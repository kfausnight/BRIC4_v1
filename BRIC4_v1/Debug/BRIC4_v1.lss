
BRIC4_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000255e0  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000255e0  000255e0  000355e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000d38  20000000  000255e8  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .lpram        00000000  30000000  30000000  00040d38  2**0
                  CONTENTS
  4 .bss          00004908  20000d38  00026320  00040d38  2**2
                  ALLOC
  5 .stack        00002000  20005640  0002ac28  00040d38  2**0
                  ALLOC
  6 .ARM.attributes 00000028  00000000  00000000  00040d38  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00040d60  2**0
                  CONTENTS, READONLY
  8 .debug_info   000d4eb3  00000000  00000000  00040db9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000d136  00000000  00000000  00115c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000016d8  00000000  00000000  00122da2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00007a10  00000000  00000000  0012447a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00032087  00000000  00000000  0012be8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0003974b  00000000  00000000  0015df11  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000abe06  00000000  00000000  0019765c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00005748  00000000  00000000  00243464  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00031962  00000000  00000000  00248bac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	40 76 00 20 49 3c 00 00 45 3c 00 00 45 3c 00 00     @v. I<..E<..E<..
	...
      2c:	45 3c 00 00 00 00 00 00 00 00 00 00 45 3c 00 00     E<..........E<..
      3c:	45 3c 00 00 45 3c 00 00 29 3c 00 00 99 b2 00 00     E<..E<..)<......
      4c:	b5 af 00 00 45 3c 00 00 45 3c 00 00 71 31 00 00     ....E<..E<..q1..
      5c:	45 3c 00 00 35 be 00 00 45 be 00 00 55 be 00 00     E<..5...E...U...
      6c:	65 be 00 00 75 be 00 00 85 be 00 00 45 3c 00 00     e...u.......E<..
      7c:	45 3c 00 00 45 3c 00 00 0d c1 00 00 6d c1 00 00     E<..E<......m...
	...
      94:	cd c1 00 00 45 3c 00 00 45 3c 00 00 45 3c 00 00     ....E<..E<..E<..
      a4:	45 3c 00 00 45 3c 00 00 45 3c 00 00 00 00 00 00     E<..E<..E<......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000d38 	.word	0x20000d38
      d4:	00000000 	.word	0x00000000
      d8:	000255e8 	.word	0x000255e8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000d3c 	.word	0x20000d3c
     108:	000255e8 	.word	0x000255e8
     10c:	000255e8 	.word	0x000255e8
     110:	00000000 	.word	0x00000000

00000114 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
     114:	4770      	bx	lr
     116:	46c0      	nop			; (mov r8, r8)

00000118 <udi_msc_getsetting>:
}

uint8_t udi_msc_getsetting(void)
{
	return 0;	// MSC don't have multiple alternate setting
}
     118:	2000      	movs	r0, #0
     11a:	4770      	bx	lr

0000011c <udi_msc_trans_ack>:
		udd_ep_id_t ep)
{
	UNUSED(ep);
	UNUSED(n);
	// Update variable to signal the end of transfer
	udi_msc_b_abort_trans = (UDD_EP_TRANSFER_OK != status) ? true : false;
     11c:	1e43      	subs	r3, r0, #1
     11e:	4198      	sbcs	r0, r3
	udi_msc_b_ack_trans = true;
     120:	2201      	movs	r2, #1
	udi_msc_b_abort_trans = (UDD_EP_TRANSFER_OK != status) ? true : false;
     122:	4b03      	ldr	r3, [pc, #12]	; (130 <udi_msc_trans_ack+0x14>)
     124:	b2c0      	uxtb	r0, r0
     126:	7018      	strb	r0, [r3, #0]
	udi_msc_b_ack_trans = true;
     128:	4b02      	ldr	r3, [pc, #8]	; (134 <udi_msc_trans_ack+0x18>)
     12a:	701a      	strb	r2, [r3, #0]
}
     12c:	4770      	bx	lr
     12e:	46c0      	nop			; (mov r8, r8)
     130:	20001254 	.word	0x20001254
     134:	20000014 	.word	0x20000014

00000138 <udi_msc_disable>:
	udi_msc_b_trans_req = false;
     138:	2200      	movs	r2, #0
     13a:	4b05      	ldr	r3, [pc, #20]	; (150 <udi_msc_disable+0x18>)
{
     13c:	b510      	push	{r4, lr}
	udi_msc_b_trans_req = false;
     13e:	701a      	strb	r2, [r3, #0]
	udi_msc_b_ack_trans = true;
     140:	2301      	movs	r3, #1
     142:	4a04      	ldr	r2, [pc, #16]	; (154 <udi_msc_disable+0x1c>)
     144:	7013      	strb	r3, [r2, #0]
	udi_msc_b_reset_trans = true;
     146:	4a04      	ldr	r2, [pc, #16]	; (158 <udi_msc_disable+0x20>)
     148:	7013      	strb	r3, [r2, #0]
	UDI_MSC_DISABLE_EXT();
     14a:	4b04      	ldr	r3, [pc, #16]	; (15c <udi_msc_disable+0x24>)
     14c:	4798      	blx	r3
}
     14e:	bd10      	pop	{r4, pc}
     150:	20000d6e 	.word	0x20000d6e
     154:	20000014 	.word	0x20000014
     158:	20000015 	.word	0x20000015
     15c:	0001952d 	.word	0x0001952d

00000160 <udi_msc_cbw_wait>:
{
     160:	b510      	push	{r4, lr}
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
     162:	4b08      	ldr	r3, [pc, #32]	; (184 <udi_msc_cbw_wait+0x24>)
{
     164:	b082      	sub	sp, #8
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
     166:	9300      	str	r3, [sp, #0]
     168:	4a07      	ldr	r2, [pc, #28]	; (188 <udi_msc_cbw_wait+0x28>)
     16a:	231f      	movs	r3, #31
     16c:	2101      	movs	r1, #1
     16e:	2002      	movs	r0, #2
     170:	4c06      	ldr	r4, [pc, #24]	; (18c <udi_msc_cbw_wait+0x2c>)
     172:	47a0      	blx	r4
     174:	2800      	cmp	r0, #0
     176:	d103      	bne.n	180 <udi_msc_cbw_wait+0x20>
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
     178:	4905      	ldr	r1, [pc, #20]	; (190 <udi_msc_cbw_wait+0x30>)
     17a:	3002      	adds	r0, #2
     17c:	4b05      	ldr	r3, [pc, #20]	; (194 <udi_msc_cbw_wait+0x34>)
     17e:	4798      	blx	r3
}
     180:	b002      	add	sp, #8
     182:	bd10      	pop	{r4, pc}
     184:	00000725 	.word	0x00000725
     188:	20000d78 	.word	0x20000d78
     18c:	00002609 	.word	0x00002609
     190:	00000161 	.word	0x00000161
     194:	0000257d 	.word	0x0000257d

00000198 <udi_msc_csw_send>:
{
     198:	b510      	push	{r4, lr}
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
     19a:	4b08      	ldr	r3, [pc, #32]	; (1bc <udi_msc_csw_send+0x24>)
{
     19c:	b082      	sub	sp, #8
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
     19e:	9300      	str	r3, [sp, #0]
     1a0:	4a07      	ldr	r2, [pc, #28]	; (1c0 <udi_msc_csw_send+0x28>)
     1a2:	230d      	movs	r3, #13
     1a4:	2100      	movs	r1, #0
     1a6:	2081      	movs	r0, #129	; 0x81
     1a8:	4c06      	ldr	r4, [pc, #24]	; (1c4 <udi_msc_csw_send+0x2c>)
     1aa:	47a0      	blx	r4
     1ac:	2800      	cmp	r0, #0
     1ae:	d103      	bne.n	1b8 <udi_msc_csw_send+0x20>
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
     1b0:	4905      	ldr	r1, [pc, #20]	; (1c8 <udi_msc_csw_send+0x30>)
     1b2:	3081      	adds	r0, #129	; 0x81
     1b4:	4b05      	ldr	r3, [pc, #20]	; (1cc <udi_msc_csw_send+0x34>)
     1b6:	4798      	blx	r3
}
     1b8:	b002      	add	sp, #8
     1ba:	bd10      	pop	{r4, pc}
     1bc:	000002c5 	.word	0x000002c5
     1c0:	20000018 	.word	0x20000018
     1c4:	00002609 	.word	0x00002609
     1c8:	00000199 	.word	0x00000199
     1cc:	0000257d 	.word	0x0000257d

000001d0 <udi_msc_sense_fail.constprop.10>:
static void udi_msc_sense_fail(uint8_t sense_key, uint16_t add_sense,
     1d0:	b570      	push	{r4, r5, r6, lr}
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
     1d2:	4c0a      	ldr	r4, [pc, #40]	; (1fc <udi_msc_sense_fail.constprop.10+0x2c>)
static void udi_msc_sense_fail(uint8_t sense_key, uint16_t add_sense,
     1d4:	000d      	movs	r5, r1
     1d6:	0006      	movs	r6, r0
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
     1d8:	2212      	movs	r2, #18
     1da:	2100      	movs	r1, #0
     1dc:	0020      	movs	r0, r4
     1de:	4b08      	ldr	r3, [pc, #32]	; (200 <udi_msc_sense_fail.constprop.10+0x30>)
     1e0:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     1e2:	23f0      	movs	r3, #240	; 0xf0
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
     1e4:	2201      	movs	r2, #1
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     1e6:	7023      	strb	r3, [r4, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
     1e8:	3be6      	subs	r3, #230	; 0xe6
     1ea:	71e3      	strb	r3, [r4, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
     1ec:	4b05      	ldr	r3, [pc, #20]	; (204 <udi_msc_sense_fail.constprop.10+0x34>)
	udi_msc_sense.sense_flag_key = sense_key;
     1ee:	70a6      	strb	r6, [r4, #2]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
     1f0:	731a      	strb	r2, [r3, #12]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
     1f2:	0a2b      	lsrs	r3, r5, #8
	udi_msc_sense.AddSnsCodeQlfr = add_sense;
     1f4:	7365      	strb	r5, [r4, #13]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
     1f6:	7323      	strb	r3, [r4, #12]
}
     1f8:	bd70      	pop	{r4, r5, r6, pc}
     1fa:	46c0      	nop			; (mov r8, r8)
     1fc:	20000da0 	.word	0x20000da0
     200:	0001f06d 	.word	0x0001f06d
     204:	20000018 	.word	0x20000018

00000208 <udi_msc_cbw_invalid>:
{
     208:	b510      	push	{r4, lr}
	if (!udi_msc_b_cbw_invalid)
     20a:	4b06      	ldr	r3, [pc, #24]	; (224 <udi_msc_cbw_invalid+0x1c>)
     20c:	781b      	ldrb	r3, [r3, #0]
     20e:	2b00      	cmp	r3, #0
     210:	d006      	beq.n	220 <udi_msc_cbw_invalid+0x18>
	udd_ep_set_halt(UDI_MSC_EP_OUT);
     212:	4b05      	ldr	r3, [pc, #20]	; (228 <udi_msc_cbw_invalid+0x20>)
     214:	2002      	movs	r0, #2
     216:	4798      	blx	r3
	udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
     218:	4904      	ldr	r1, [pc, #16]	; (22c <udi_msc_cbw_invalid+0x24>)
     21a:	2002      	movs	r0, #2
     21c:	4b04      	ldr	r3, [pc, #16]	; (230 <udi_msc_cbw_invalid+0x28>)
     21e:	4798      	blx	r3
}
     220:	bd10      	pop	{r4, pc}
     222:	46c0      	nop			; (mov r8, r8)
     224:	20000d6c 	.word	0x20000d6c
     228:	000024b1 	.word	0x000024b1
     22c:	00000209 	.word	0x00000209
     230:	0000257d 	.word	0x0000257d

00000234 <udi_msc_csw_invalid>:
{
     234:	b510      	push	{r4, lr}
	if (!udi_msc_b_cbw_invalid)
     236:	4b06      	ldr	r3, [pc, #24]	; (250 <udi_msc_csw_invalid+0x1c>)
     238:	781b      	ldrb	r3, [r3, #0]
     23a:	2b00      	cmp	r3, #0
     23c:	d006      	beq.n	24c <udi_msc_csw_invalid+0x18>
	udd_ep_set_halt(UDI_MSC_EP_IN);
     23e:	4b05      	ldr	r3, [pc, #20]	; (254 <udi_msc_csw_invalid+0x20>)
     240:	2081      	movs	r0, #129	; 0x81
     242:	4798      	blx	r3
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
     244:	4904      	ldr	r1, [pc, #16]	; (258 <udi_msc_csw_invalid+0x24>)
     246:	2081      	movs	r0, #129	; 0x81
     248:	4b04      	ldr	r3, [pc, #16]	; (25c <udi_msc_csw_invalid+0x28>)
     24a:	4798      	blx	r3
}
     24c:	bd10      	pop	{r4, pc}
     24e:	46c0      	nop			; (mov r8, r8)
     250:	20000d6c 	.word	0x20000d6c
     254:	000024b1 	.word	0x000024b1
     258:	00000235 	.word	0x00000235
     25c:	0000257d 	.word	0x0000257d

00000260 <udi_msc_csw_process>:
{
     260:	b530      	push	{r4, r5, lr}
	if (0 != udi_msc_csw.dCSWDataResidue) {
     262:	4c11      	ldr	r4, [pc, #68]	; (2a8 <udi_msc_csw_process+0x48>)
{
     264:	b083      	sub	sp, #12
	if (0 != udi_msc_csw.dCSWDataResidue) {
     266:	68a3      	ldr	r3, [r4, #8]
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
     268:	4d10      	ldr	r5, [pc, #64]	; (2ac <udi_msc_csw_process+0x4c>)
	if (0 != udi_msc_csw.dCSWDataResidue) {
     26a:	2b00      	cmp	r3, #0
     26c:	d005      	beq.n	27a <udi_msc_csw_process+0x1a>
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
     26e:	7b2b      	ldrb	r3, [r5, #12]
     270:	2b7f      	cmp	r3, #127	; 0x7f
     272:	d814      	bhi.n	29e <udi_msc_csw_process+0x3e>
			udd_ep_set_halt(UDI_MSC_EP_OUT);
     274:	2002      	movs	r0, #2
     276:	4b0e      	ldr	r3, [pc, #56]	; (2b0 <udi_msc_csw_process+0x50>)
     278:	4798      	blx	r3
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
     27a:	686b      	ldr	r3, [r5, #4]
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
     27c:	0022      	movs	r2, r4
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
     27e:	6063      	str	r3, [r4, #4]
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
     280:	4b0c      	ldr	r3, [pc, #48]	; (2b4 <udi_msc_csw_process+0x54>)
     282:	2100      	movs	r1, #0
     284:	9300      	str	r3, [sp, #0]
     286:	2081      	movs	r0, #129	; 0x81
     288:	230d      	movs	r3, #13
     28a:	4c0b      	ldr	r4, [pc, #44]	; (2b8 <udi_msc_csw_process+0x58>)
     28c:	47a0      	blx	r4
     28e:	2800      	cmp	r0, #0
     290:	d103      	bne.n	29a <udi_msc_csw_process+0x3a>
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
     292:	490a      	ldr	r1, [pc, #40]	; (2bc <udi_msc_csw_process+0x5c>)
     294:	3081      	adds	r0, #129	; 0x81
     296:	4b0a      	ldr	r3, [pc, #40]	; (2c0 <udi_msc_csw_process+0x60>)
     298:	4798      	blx	r3
}
     29a:	b003      	add	sp, #12
     29c:	bd30      	pop	{r4, r5, pc}
			udd_ep_set_halt(UDI_MSC_EP_IN);
     29e:	4b04      	ldr	r3, [pc, #16]	; (2b0 <udi_msc_csw_process+0x50>)
     2a0:	2081      	movs	r0, #129	; 0x81
     2a2:	4798      	blx	r3
     2a4:	e7e9      	b.n	27a <udi_msc_csw_process+0x1a>
     2a6:	46c0      	nop			; (mov r8, r8)
     2a8:	20000018 	.word	0x20000018
     2ac:	20000d78 	.word	0x20000d78
     2b0:	000024b1 	.word	0x000024b1
     2b4:	000002c5 	.word	0x000002c5
     2b8:	00002609 	.word	0x00002609
     2bc:	00000199 	.word	0x00000199
     2c0:	0000257d 	.word	0x0000257d

000002c4 <udi_msc_csw_sent>:
{
     2c4:	b510      	push	{r4, lr}
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
     2c6:	4b08      	ldr	r3, [pc, #32]	; (2e8 <udi_msc_csw_sent+0x24>)
{
     2c8:	b082      	sub	sp, #8
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
     2ca:	9300      	str	r3, [sp, #0]
     2cc:	4a07      	ldr	r2, [pc, #28]	; (2ec <udi_msc_csw_sent+0x28>)
     2ce:	231f      	movs	r3, #31
     2d0:	2101      	movs	r1, #1
     2d2:	2002      	movs	r0, #2
     2d4:	4c06      	ldr	r4, [pc, #24]	; (2f0 <udi_msc_csw_sent+0x2c>)
     2d6:	47a0      	blx	r4
     2d8:	2800      	cmp	r0, #0
     2da:	d103      	bne.n	2e4 <udi_msc_csw_sent+0x20>
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
     2dc:	4905      	ldr	r1, [pc, #20]	; (2f4 <udi_msc_csw_sent+0x30>)
     2de:	3002      	adds	r0, #2
     2e0:	4b05      	ldr	r3, [pc, #20]	; (2f8 <udi_msc_csw_sent+0x34>)
     2e2:	4798      	blx	r3
}
     2e4:	b002      	add	sp, #8
     2e6:	bd10      	pop	{r4, pc}
     2e8:	00000725 	.word	0x00000725
     2ec:	20000d78 	.word	0x20000d78
     2f0:	00002609 	.word	0x00002609
     2f4:	00000161 	.word	0x00000161
     2f8:	0000257d 	.word	0x0000257d

000002fc <udi_msc_enable>:
	udi_msc_b_trans_req = false;
     2fc:	2300      	movs	r3, #0
     2fe:	4a1a      	ldr	r2, [pc, #104]	; (368 <udi_msc_enable+0x6c>)
{
     300:	b5f0      	push	{r4, r5, r6, r7, lr}
	udi_msc_b_trans_req = false;
     302:	7013      	strb	r3, [r2, #0]
	udi_msc_b_cbw_invalid = false;
     304:	4a19      	ldr	r2, [pc, #100]	; (36c <udi_msc_enable+0x70>)
{
     306:	b083      	sub	sp, #12
	udi_msc_b_cbw_invalid = false;
     308:	7013      	strb	r3, [r2, #0]
	udi_msc_b_ack_trans = true;
     30a:	4a19      	ldr	r2, [pc, #100]	; (370 <udi_msc_enable+0x74>)
     30c:	3301      	adds	r3, #1
     30e:	7013      	strb	r3, [r2, #0]
	udi_msc_b_reset_trans = true;
     310:	4a18      	ldr	r2, [pc, #96]	; (374 <udi_msc_enable+0x78>)
     312:	7013      	strb	r3, [r2, #0]
	udi_msc_nb_lun = get_nb_lun();
     314:	4b18      	ldr	r3, [pc, #96]	; (378 <udi_msc_enable+0x7c>)
     316:	4798      	blx	r3
	if (0 == udi_msc_nb_lun)
     318:	2800      	cmp	r0, #0
     31a:	d104      	bne.n	326 <udi_msc_enable+0x2a>
	udi_msc_nb_lun = get_nb_lun();
     31c:	4b17      	ldr	r3, [pc, #92]	; (37c <udi_msc_enable+0x80>)
     31e:	7018      	strb	r0, [r3, #0]
		return false; // No lun available, then not authorize to enable interface
     320:	2000      	movs	r0, #0
}
     322:	b003      	add	sp, #12
     324:	bdf0      	pop	{r4, r5, r6, r7, pc}
	udi_msc_nb_lun--;
     326:	4d15      	ldr	r5, [pc, #84]	; (37c <udi_msc_enable+0x80>)
     328:	3801      	subs	r0, #1
	if (!UDI_MSC_ENABLE_EXT())
     32a:	4b15      	ldr	r3, [pc, #84]	; (380 <udi_msc_enable+0x84>)
	udi_msc_nb_lun--;
     32c:	7028      	strb	r0, [r5, #0]
	if (!UDI_MSC_ENABLE_EXT())
     32e:	4798      	blx	r3
     330:	1e07      	subs	r7, r0, #0
     332:	d0f5      	beq.n	320 <udi_msc_enable+0x24>
     334:	2400      	movs	r4, #0
     336:	4e13      	ldr	r6, [pc, #76]	; (384 <udi_msc_enable+0x88>)
		mem_unload(lun, false);
     338:	0020      	movs	r0, r4
     33a:	2100      	movs	r1, #0
     33c:	47b0      	blx	r6
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
     33e:	3401      	adds	r4, #1
     340:	782b      	ldrb	r3, [r5, #0]
     342:	b2e4      	uxtb	r4, r4
     344:	42a3      	cmp	r3, r4
     346:	d2f7      	bcs.n	338 <udi_msc_enable+0x3c>
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
     348:	4b0f      	ldr	r3, [pc, #60]	; (388 <udi_msc_enable+0x8c>)
     34a:	4a10      	ldr	r2, [pc, #64]	; (38c <udi_msc_enable+0x90>)
     34c:	9300      	str	r3, [sp, #0]
     34e:	2101      	movs	r1, #1
     350:	231f      	movs	r3, #31
     352:	2002      	movs	r0, #2
     354:	4c0e      	ldr	r4, [pc, #56]	; (390 <udi_msc_enable+0x94>)
     356:	47a0      	blx	r4
     358:	2800      	cmp	r0, #0
     35a:	d1e2      	bne.n	322 <udi_msc_enable+0x26>
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
     35c:	490d      	ldr	r1, [pc, #52]	; (394 <udi_msc_enable+0x98>)
     35e:	3002      	adds	r0, #2
     360:	4b0d      	ldr	r3, [pc, #52]	; (398 <udi_msc_enable+0x9c>)
     362:	4798      	blx	r3
     364:	0038      	movs	r0, r7
     366:	e7dc      	b.n	322 <udi_msc_enable+0x26>
     368:	20000d6e 	.word	0x20000d6e
     36c:	20000d6c 	.word	0x20000d6c
     370:	20000014 	.word	0x20000014
     374:	20000015 	.word	0x20000015
     378:	0000ae65 	.word	0x0000ae65
     37c:	20000d9c 	.word	0x20000d9c
     380:	0001951d 	.word	0x0001951d
     384:	0000ae9d 	.word	0x0000ae9d
     388:	00000725 	.word	0x00000725
     38c:	20000d78 	.word	0x20000d78
     390:	00002609 	.word	0x00002609
     394:	00000161 	.word	0x00000161
     398:	0000257d 	.word	0x0000257d

0000039c <udi_msc_setup>:
{
     39c:	b510      	push	{r4, lr}
	if (Udd_setup_is_in()) {
     39e:	4921      	ldr	r1, [pc, #132]	; (424 <udi_msc_setup+0x88>)
{
     3a0:	b082      	sub	sp, #8
	if (Udd_setup_is_in()) {
     3a2:	780a      	ldrb	r2, [r1, #0]
     3a4:	b253      	sxtb	r3, r2
     3a6:	2b00      	cmp	r3, #0
     3a8:	db28      	blt.n	3fc <udi_msc_setup+0x60>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     3aa:	2360      	movs	r3, #96	; 0x60
	return false;	// Not supported request
     3ac:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     3ae:	4013      	ands	r3, r2
     3b0:	2b20      	cmp	r3, #32
     3b2:	d001      	beq.n	3b8 <udi_msc_setup+0x1c>
}
     3b4:	b002      	add	sp, #8
     3b6:	bd10      	pop	{r4, pc}
			switch (udd_g_ctrlreq.req.bRequest) {
     3b8:	784b      	ldrb	r3, [r1, #1]
     3ba:	2bff      	cmp	r3, #255	; 0xff
     3bc:	d1fa      	bne.n	3b4 <udi_msc_setup+0x18>
				if (0 != udd_g_ctrlreq.req.wLength)
     3be:	88cb      	ldrh	r3, [r1, #6]
     3c0:	2b00      	cmp	r3, #0
     3c2:	d1f7      	bne.n	3b4 <udi_msc_setup+0x18>
				if (0 != udd_g_ctrlreq.req.wValue)
     3c4:	884b      	ldrh	r3, [r1, #2]
     3c6:	2b00      	cmp	r3, #0
     3c8:	d1f4      	bne.n	3b4 <udi_msc_setup+0x18>
				udi_msc_b_cbw_invalid = false;
     3ca:	4b17      	ldr	r3, [pc, #92]	; (428 <udi_msc_setup+0x8c>)
				udd_ep_abort(UDI_MSC_EP_OUT);
     3cc:	4c17      	ldr	r4, [pc, #92]	; (42c <udi_msc_setup+0x90>)
				udi_msc_b_cbw_invalid = false;
     3ce:	7018      	strb	r0, [r3, #0]
				udi_msc_b_trans_req = false;
     3d0:	4b17      	ldr	r3, [pc, #92]	; (430 <udi_msc_setup+0x94>)
     3d2:	7018      	strb	r0, [r3, #0]
				udd_ep_abort(UDI_MSC_EP_OUT);
     3d4:	3002      	adds	r0, #2
     3d6:	47a0      	blx	r4
				udd_ep_abort(UDI_MSC_EP_IN);
     3d8:	2081      	movs	r0, #129	; 0x81
     3da:	47a0      	blx	r4
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
     3dc:	4b15      	ldr	r3, [pc, #84]	; (434 <udi_msc_setup+0x98>)
     3de:	4a16      	ldr	r2, [pc, #88]	; (438 <udi_msc_setup+0x9c>)
     3e0:	9300      	str	r3, [sp, #0]
     3e2:	2101      	movs	r1, #1
     3e4:	231f      	movs	r3, #31
     3e6:	2002      	movs	r0, #2
     3e8:	4c14      	ldr	r4, [pc, #80]	; (43c <udi_msc_setup+0xa0>)
     3ea:	47a0      	blx	r4
     3ec:	2800      	cmp	r0, #0
     3ee:	d1e1      	bne.n	3b4 <udi_msc_setup+0x18>
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
     3f0:	4913      	ldr	r1, [pc, #76]	; (440 <udi_msc_setup+0xa4>)
     3f2:	3002      	adds	r0, #2
     3f4:	4b13      	ldr	r3, [pc, #76]	; (444 <udi_msc_setup+0xa8>)
     3f6:	4798      	blx	r3
				return true;
     3f8:	2001      	movs	r0, #1
     3fa:	e7db      	b.n	3b4 <udi_msc_setup+0x18>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     3fc:	2360      	movs	r3, #96	; 0x60
	return false;	// Not supported request
     3fe:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     400:	4013      	ands	r3, r2
     402:	2b20      	cmp	r3, #32
     404:	d1d6      	bne.n	3b4 <udi_msc_setup+0x18>
			switch (udd_g_ctrlreq.req.bRequest) {
     406:	784b      	ldrb	r3, [r1, #1]
     408:	2bfe      	cmp	r3, #254	; 0xfe
     40a:	d1d3      	bne.n	3b4 <udi_msc_setup+0x18>
				if (1 != udd_g_ctrlreq.req.wLength)
     40c:	88cb      	ldrh	r3, [r1, #6]
     40e:	2b01      	cmp	r3, #1
     410:	d1d0      	bne.n	3b4 <udi_msc_setup+0x18>
				if (0 != udd_g_ctrlreq.req.wValue)
     412:	884a      	ldrh	r2, [r1, #2]
     414:	2a00      	cmp	r2, #0
     416:	d1cd      	bne.n	3b4 <udi_msc_setup+0x18>
				udd_g_ctrlreq.payload = &udi_msc_nb_lun;
     418:	4a0b      	ldr	r2, [pc, #44]	; (448 <udi_msc_setup+0xac>)
				udd_g_ctrlreq.payload_size = 1;
     41a:	818b      	strh	r3, [r1, #12]
				udd_g_ctrlreq.payload = &udi_msc_nb_lun;
     41c:	608a      	str	r2, [r1, #8]
				return true;
     41e:	3001      	adds	r0, #1
     420:	e7c8      	b.n	3b4 <udi_msc_setup+0x18>
     422:	46c0      	nop			; (mov r8, r8)
     424:	20001440 	.word	0x20001440
     428:	20000d6c 	.word	0x20000d6c
     42c:	00002155 	.word	0x00002155
     430:	20000d6e 	.word	0x20000d6e
     434:	00000725 	.word	0x00000725
     438:	20000d78 	.word	0x20000d78
     43c:	00002609 	.word	0x00002609
     440:	00000161 	.word	0x00000161
     444:	0000257d 	.word	0x0000257d
     448:	20000d9c 	.word	0x20000d9c

0000044c <udi_msc_data_sent>:
{
     44c:	b570      	push	{r4, r5, r6, lr}
     44e:	0004      	movs	r4, r0
     450:	b082      	sub	sp, #8
     452:	000e      	movs	r6, r1
	if (UDD_EP_TRANSFER_OK != status) {
     454:	2800      	cmp	r0, #0
     456:	d001      	beq.n	45c <udi_msc_data_sent+0x10>
}
     458:	b002      	add	sp, #8
     45a:	bd70      	pop	{r4, r5, r6, pc}
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
     45c:	4d15      	ldr	r5, [pc, #84]	; (4b4 <udi_msc_data_sent+0x68>)
     45e:	4b16      	ldr	r3, [pc, #88]	; (4b8 <udi_msc_data_sent+0x6c>)
     460:	0028      	movs	r0, r5
     462:	2212      	movs	r2, #18
     464:	2100      	movs	r1, #0
     466:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     468:	23f0      	movs	r3, #240	; 0xf0
     46a:	702b      	strb	r3, [r5, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
     46c:	3be6      	subs	r3, #230	; 0xe6
     46e:	71eb      	strb	r3, [r5, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
     470:	4d12      	ldr	r5, [pc, #72]	; (4bc <udi_msc_data_sent+0x70>)
	udi_msc_csw.dCSWDataResidue -= nb_sent;
     472:	68ab      	ldr	r3, [r5, #8]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
     474:	732c      	strb	r4, [r5, #12]
	udi_msc_csw.dCSWDataResidue -= nb_sent;
     476:	1b9e      	subs	r6, r3, r6
     478:	60ae      	str	r6, [r5, #8]
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
     47a:	4c11      	ldr	r4, [pc, #68]	; (4c0 <udi_msc_data_sent+0x74>)
	if (0 != udi_msc_csw.dCSWDataResidue) {
     47c:	d005      	beq.n	48a <udi_msc_data_sent+0x3e>
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
     47e:	7b23      	ldrb	r3, [r4, #12]
     480:	2b7f      	cmp	r3, #127	; 0x7f
     482:	d813      	bhi.n	4ac <udi_msc_data_sent+0x60>
			udd_ep_set_halt(UDI_MSC_EP_OUT);
     484:	2002      	movs	r0, #2
     486:	4b0f      	ldr	r3, [pc, #60]	; (4c4 <udi_msc_data_sent+0x78>)
     488:	4798      	blx	r3
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
     48a:	6863      	ldr	r3, [r4, #4]
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
     48c:	002a      	movs	r2, r5
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
     48e:	606b      	str	r3, [r5, #4]
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
     490:	4b0d      	ldr	r3, [pc, #52]	; (4c8 <udi_msc_data_sent+0x7c>)
     492:	2100      	movs	r1, #0
     494:	9300      	str	r3, [sp, #0]
     496:	2081      	movs	r0, #129	; 0x81
     498:	230d      	movs	r3, #13
     49a:	4c0c      	ldr	r4, [pc, #48]	; (4cc <udi_msc_data_sent+0x80>)
     49c:	47a0      	blx	r4
     49e:	2800      	cmp	r0, #0
     4a0:	d1da      	bne.n	458 <udi_msc_data_sent+0xc>
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
     4a2:	490b      	ldr	r1, [pc, #44]	; (4d0 <udi_msc_data_sent+0x84>)
     4a4:	4b0b      	ldr	r3, [pc, #44]	; (4d4 <udi_msc_data_sent+0x88>)
     4a6:	3081      	adds	r0, #129	; 0x81
     4a8:	4798      	blx	r3
     4aa:	e7d5      	b.n	458 <udi_msc_data_sent+0xc>
			udd_ep_set_halt(UDI_MSC_EP_IN);
     4ac:	4b05      	ldr	r3, [pc, #20]	; (4c4 <udi_msc_data_sent+0x78>)
     4ae:	2081      	movs	r0, #129	; 0x81
     4b0:	4798      	blx	r3
     4b2:	e7ea      	b.n	48a <udi_msc_data_sent+0x3e>
     4b4:	20000da0 	.word	0x20000da0
     4b8:	0001f06d 	.word	0x0001f06d
     4bc:	20000018 	.word	0x20000018
     4c0:	20000d78 	.word	0x20000d78
     4c4:	000024b1 	.word	0x000024b1
     4c8:	000002c5 	.word	0x000002c5
     4cc:	00002609 	.word	0x00002609
     4d0:	00000199 	.word	0x00000199
     4d4:	0000257d 	.word	0x0000257d

000004d8 <udi_msc_data_send>:
{
     4d8:	b570      	push	{r4, r5, r6, lr}
     4da:	000b      	movs	r3, r1
	if (!udd_ep_run(UDI_MSC_EP_IN, true,
     4dc:	491c      	ldr	r1, [pc, #112]	; (550 <udi_msc_data_send+0x78>)
{
     4de:	b082      	sub	sp, #8
     4e0:	0002      	movs	r2, r0
	if (!udd_ep_run(UDI_MSC_EP_IN, true,
     4e2:	9100      	str	r1, [sp, #0]
     4e4:	2081      	movs	r0, #129	; 0x81
     4e6:	2101      	movs	r1, #1
     4e8:	4c1a      	ldr	r4, [pc, #104]	; (554 <udi_msc_data_send+0x7c>)
     4ea:	47a0      	blx	r4
     4ec:	2800      	cmp	r0, #0
     4ee:	d001      	beq.n	4f4 <udi_msc_data_send+0x1c>
}
     4f0:	b002      	add	sp, #8
     4f2:	bd70      	pop	{r4, r5, r6, pc}
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
     4f4:	4e18      	ldr	r6, [pc, #96]	; (558 <udi_msc_data_send+0x80>)
     4f6:	4b19      	ldr	r3, [pc, #100]	; (55c <udi_msc_data_send+0x84>)
     4f8:	0030      	movs	r0, r6
     4fa:	2212      	movs	r2, #18
     4fc:	2100      	movs	r1, #0
     4fe:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     500:	23f0      	movs	r3, #240	; 0xf0
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
     502:	4d17      	ldr	r5, [pc, #92]	; (560 <udi_msc_data_send+0x88>)
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     504:	7033      	strb	r3, [r6, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
     506:	3be6      	subs	r3, #230	; 0xe6
     508:	71f3      	strb	r3, [r6, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
     50a:	3b09      	subs	r3, #9
     50c:	732b      	strb	r3, [r5, #12]
	udi_msc_sense.sense_flag_key = sense_key;
     50e:	3303      	adds	r3, #3
     510:	70b3      	strb	r3, [r6, #2]
	if (0 != udi_msc_csw.dCSWDataResidue) {
     512:	68ab      	ldr	r3, [r5, #8]
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
     514:	4e13      	ldr	r6, [pc, #76]	; (564 <udi_msc_data_send+0x8c>)
	if (0 != udi_msc_csw.dCSWDataResidue) {
     516:	2b00      	cmp	r3, #0
     518:	d005      	beq.n	526 <udi_msc_data_send+0x4e>
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
     51a:	7b33      	ldrb	r3, [r6, #12]
     51c:	2b7f      	cmp	r3, #127	; 0x7f
     51e:	d812      	bhi.n	546 <udi_msc_data_send+0x6e>
			udd_ep_set_halt(UDI_MSC_EP_OUT);
     520:	2002      	movs	r0, #2
     522:	4b11      	ldr	r3, [pc, #68]	; (568 <udi_msc_data_send+0x90>)
     524:	4798      	blx	r3
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
     526:	6873      	ldr	r3, [r6, #4]
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
     528:	002a      	movs	r2, r5
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
     52a:	606b      	str	r3, [r5, #4]
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
     52c:	4b0f      	ldr	r3, [pc, #60]	; (56c <udi_msc_data_send+0x94>)
     52e:	2100      	movs	r1, #0
     530:	9300      	str	r3, [sp, #0]
     532:	2081      	movs	r0, #129	; 0x81
     534:	230d      	movs	r3, #13
     536:	47a0      	blx	r4
     538:	2800      	cmp	r0, #0
     53a:	d1d9      	bne.n	4f0 <udi_msc_data_send+0x18>
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
     53c:	490c      	ldr	r1, [pc, #48]	; (570 <udi_msc_data_send+0x98>)
     53e:	4b0d      	ldr	r3, [pc, #52]	; (574 <udi_msc_data_send+0x9c>)
     540:	3081      	adds	r0, #129	; 0x81
     542:	4798      	blx	r3
}
     544:	e7d4      	b.n	4f0 <udi_msc_data_send+0x18>
			udd_ep_set_halt(UDI_MSC_EP_IN);
     546:	4b08      	ldr	r3, [pc, #32]	; (568 <udi_msc_data_send+0x90>)
     548:	2081      	movs	r0, #129	; 0x81
     54a:	4798      	blx	r3
     54c:	e7eb      	b.n	526 <udi_msc_data_send+0x4e>
     54e:	46c0      	nop			; (mov r8, r8)
     550:	0000044d 	.word	0x0000044d
     554:	00002609 	.word	0x00002609
     558:	20000da0 	.word	0x20000da0
     55c:	0001f06d 	.word	0x0001f06d
     560:	20000018 	.word	0x20000018
     564:	20000d78 	.word	0x20000d78
     568:	000024b1 	.word	0x000024b1
     56c:	000002c5 	.word	0x000002c5
     570:	00000199 	.word	0x00000199
     574:	0000257d 	.word	0x0000257d

00000578 <udi_msc_spc_mode_sense>:
{
     578:	b5f0      	push	{r4, r5, r6, r7, lr}
     57a:	4657      	mov	r7, sl
     57c:	46de      	mov	lr, fp
     57e:	464e      	mov	r6, r9
     580:	4645      	mov	r5, r8
     582:	4682      	mov	sl, r0
     584:	b5e0      	push	{r5, r6, r7, lr}
	memset(&sense, 0, sizeof(sense));
     586:	4f5b      	ldr	r7, [pc, #364]	; (6f4 <udi_msc_spc_mode_sense+0x17c>)
     588:	4b5b      	ldr	r3, [pc, #364]	; (6f8 <udi_msc_spc_mode_sense+0x180>)
{
     58a:	b085      	sub	sp, #20
	memset(&sense, 0, sizeof(sense));
     58c:	2214      	movs	r2, #20
     58e:	2100      	movs	r1, #0
     590:	0038      	movs	r0, r7
     592:	4699      	mov	r9, r3
     594:	4798      	blx	r3
	if (b_sense10) {
     596:	4653      	mov	r3, sl
		request_lgt = udi_msc_cbw.CDB[8];
     598:	4c58      	ldr	r4, [pc, #352]	; (6fc <udi_msc_spc_mode_sense+0x184>)
	if (b_sense10) {
     59a:	2b00      	cmp	r3, #0
     59c:	d06a      	beq.n	674 <udi_msc_spc_mode_sense+0xfc>
		ptr_mode = &sense.s10.sense_data;
     59e:	0039      	movs	r1, r7
	mode = udi_msc_cbw.CDB[2] & SCSI_MS_MODE_ALL;
     5a0:	233f      	movs	r3, #63	; 0x3f
     5a2:	7c60      	ldrb	r0, [r4, #17]
		request_lgt = udi_msc_cbw.CDB[8];
     5a4:	7de2      	ldrb	r2, [r4, #23]
     5a6:	2614      	movs	r6, #20
		ptr_mode = &sense.s10.sense_data;
     5a8:	3108      	adds	r1, #8
		data_sense_lgt = sizeof(struct scsi_mode_param_header10);
     5aa:	2508      	movs	r5, #8
	mode = udi_msc_cbw.CDB[2] & SCSI_MS_MODE_ALL;
     5ac:	4003      	ands	r3, r0
	if ((SCSI_MS_MODE_INFEXP == mode)
     5ae:	2b1c      	cmp	r3, #28
     5b0:	d069      	beq.n	686 <udi_msc_spc_mode_sense+0x10e>
			|| (SCSI_MS_MODE_ALL == mode)) {
     5b2:	2b3f      	cmp	r3, #63	; 0x3f
     5b4:	d067      	beq.n	686 <udi_msc_spc_mode_sense+0x10e>
	if (!udi_msc_cbw_validate(request_lgt, USB_CBW_DIRECTION_IN))
     5b6:	1c2b      	adds	r3, r5, #0
     5b8:	4295      	cmp	r5, r2
     5ba:	d900      	bls.n	5be <udi_msc_spc_mode_sense+0x46>
     5bc:	1c13      	adds	r3, r2, #0
     5be:	b2db      	uxtb	r3, r3
     5c0:	9303      	str	r3, [sp, #12]
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
     5c2:	7b23      	ldrb	r3, [r4, #12]
     5c4:	4e4e      	ldr	r6, [pc, #312]	; (700 <udi_msc_spc_mode_sense+0x188>)
     5c6:	4698      	mov	r8, r3
     5c8:	3b80      	subs	r3, #128	; 0x80
     5ca:	061b      	lsls	r3, r3, #24
     5cc:	d423      	bmi.n	616 <udi_msc_spc_mode_sense+0x9e>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
     5ce:	68b3      	ldr	r3, [r6, #8]
     5d0:	469b      	mov	fp, r3
     5d2:	9b03      	ldr	r3, [sp, #12]
     5d4:	455b      	cmp	r3, fp
     5d6:	d820      	bhi.n	61a <udi_msc_spc_mode_sense+0xa2>
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;
     5d8:	4b4a      	ldr	r3, [pc, #296]	; (704 <udi_msc_spc_mode_sense+0x18c>)
     5da:	7b60      	ldrb	r0, [r4, #13]
     5dc:	4798      	blx	r3
     5de:	1e43      	subs	r3, r0, #1
     5e0:	4198      	sbcs	r0, r3
	if (b_sense10) {
     5e2:	4653      	mov	r3, sl
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;
     5e4:	01c0      	lsls	r0, r0, #7
	if (b_sense10) {
     5e6:	2b00      	cmp	r3, #0
     5e8:	d100      	bne.n	5ec <udi_msc_spc_mode_sense+0x74>
     5ea:	e076      	b.n	6da <udi_msc_spc_mode_sense+0x162>
				cpu_to_be16((data_sense_lgt - 2));
     5ec:	3d02      	subs	r5, #2
     5ee:	022d      	lsls	r5, r5, #8
		sense.s10.header.mode_data_length =
     5f0:	803d      	strh	r5, [r7, #0]
		sense.s10.header.device_specific_parameter = wp;
     5f2:	70f8      	strb	r0, [r7, #3]
	if (!udd_ep_run(UDI_MSC_EP_IN, true,
     5f4:	4b44      	ldr	r3, [pc, #272]	; (708 <udi_msc_spc_mode_sense+0x190>)
     5f6:	003a      	movs	r2, r7
     5f8:	9300      	str	r3, [sp, #0]
     5fa:	2101      	movs	r1, #1
     5fc:	9b03      	ldr	r3, [sp, #12]
     5fe:	2081      	movs	r0, #129	; 0x81
     600:	4d42      	ldr	r5, [pc, #264]	; (70c <udi_msc_spc_mode_sense+0x194>)
     602:	47a8      	blx	r5
     604:	2800      	cmp	r0, #0
     606:	d046      	beq.n	696 <udi_msc_spc_mode_sense+0x11e>
}
     608:	b005      	add	sp, #20
     60a:	bc3c      	pop	{r2, r3, r4, r5}
     60c:	4690      	mov	r8, r2
     60e:	4699      	mov	r9, r3
     610:	46a2      	mov	sl, r4
     612:	46ab      	mov	fp, r5
     614:	bdf0      	pop	{r4, r5, r6, r7, pc}
     616:	68b3      	ldr	r3, [r6, #8]
     618:	469b      	mov	fp, r3
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
     61a:	4d3d      	ldr	r5, [pc, #244]	; (710 <udi_msc_spc_mode_sense+0x198>)
     61c:	2212      	movs	r2, #18
     61e:	2100      	movs	r1, #0
     620:	0028      	movs	r0, r5
     622:	47c8      	blx	r9
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     624:	23f0      	movs	r3, #240	; 0xf0
     626:	702b      	strb	r3, [r5, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
     628:	3be6      	subs	r3, #230	; 0xe6
     62a:	71eb      	strb	r3, [r5, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
     62c:	3b09      	subs	r3, #9
     62e:	7333      	strb	r3, [r6, #12]
	udi_msc_sense.sense_flag_key = sense_key;
     630:	3304      	adds	r3, #4
     632:	70ab      	strb	r3, [r5, #2]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
     634:	331f      	adds	r3, #31
     636:	732b      	strb	r3, [r5, #12]
	if (0 != udi_msc_csw.dCSWDataResidue) {
     638:	465b      	mov	r3, fp
     63a:	2b00      	cmp	r3, #0
     63c:	d009      	beq.n	652 <udi_msc_spc_mode_sense+0xda>
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
     63e:	4643      	mov	r3, r8
     640:	466a      	mov	r2, sp
     642:	7313      	strb	r3, [r2, #12]
     644:	7b13      	ldrb	r3, [r2, #12]
     646:	b25b      	sxtb	r3, r3
     648:	2b00      	cmp	r3, #0
     64a:	db4a      	blt.n	6e2 <udi_msc_spc_mode_sense+0x16a>
			udd_ep_set_halt(UDI_MSC_EP_OUT);
     64c:	2002      	movs	r0, #2
     64e:	4b31      	ldr	r3, [pc, #196]	; (714 <udi_msc_spc_mode_sense+0x19c>)
     650:	4798      	blx	r3
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
     652:	6863      	ldr	r3, [r4, #4]
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
     654:	0032      	movs	r2, r6
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
     656:	6073      	str	r3, [r6, #4]
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
     658:	4b2f      	ldr	r3, [pc, #188]	; (718 <udi_msc_spc_mode_sense+0x1a0>)
     65a:	2100      	movs	r1, #0
     65c:	9300      	str	r3, [sp, #0]
     65e:	2081      	movs	r0, #129	; 0x81
     660:	230d      	movs	r3, #13
     662:	4c2a      	ldr	r4, [pc, #168]	; (70c <udi_msc_spc_mode_sense+0x194>)
     664:	47a0      	blx	r4
     666:	2800      	cmp	r0, #0
     668:	d1ce      	bne.n	608 <udi_msc_spc_mode_sense+0x90>
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
     66a:	492c      	ldr	r1, [pc, #176]	; (71c <udi_msc_spc_mode_sense+0x1a4>)
     66c:	4b2c      	ldr	r3, [pc, #176]	; (720 <udi_msc_spc_mode_sense+0x1a8>)
     66e:	2081      	movs	r0, #129	; 0x81
     670:	4798      	blx	r3
     672:	e7c9      	b.n	608 <udi_msc_spc_mode_sense+0x90>
	mode = udi_msc_cbw.CDB[2] & SCSI_MS_MODE_ALL;
     674:	233f      	movs	r3, #63	; 0x3f
     676:	7c60      	ldrb	r0, [r4, #17]
		request_lgt = udi_msc_cbw.CDB[4];
     678:	7ce2      	ldrb	r2, [r4, #19]
     67a:	2610      	movs	r6, #16
		ptr_mode = &sense.s6.sense_data;
     67c:	1d39      	adds	r1, r7, #4
		data_sense_lgt = sizeof(struct scsi_mode_param_header6);
     67e:	2504      	movs	r5, #4
	mode = udi_msc_cbw.CDB[2] & SCSI_MS_MODE_ALL;
     680:	4003      	ands	r3, r0
	if ((SCSI_MS_MODE_INFEXP == mode)
     682:	2b1c      	cmp	r3, #28
     684:	d195      	bne.n	5b2 <udi_msc_spc_mode_sense+0x3a>
		ptr_mode->page_code =
     686:	231c      	movs	r3, #28
     688:	700b      	strb	r3, [r1, #0]
		ptr_mode->page_length =
     68a:	3b12      	subs	r3, #18
     68c:	704b      	strb	r3, [r1, #1]
		ptr_mode->mrie =
     68e:	3b05      	subs	r3, #5
     690:	70cb      	strb	r3, [r1, #3]
		data_sense_lgt += sizeof(struct spc_control_page_info_execpt);
     692:	0035      	movs	r5, r6
     694:	e78f      	b.n	5b6 <udi_msc_spc_mode_sense+0x3e>
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
     696:	4f1e      	ldr	r7, [pc, #120]	; (710 <udi_msc_spc_mode_sense+0x198>)
     698:	2212      	movs	r2, #18
     69a:	2100      	movs	r1, #0
     69c:	0038      	movs	r0, r7
     69e:	47c8      	blx	r9
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     6a0:	23f0      	movs	r3, #240	; 0xf0
     6a2:	703b      	strb	r3, [r7, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
     6a4:	3be6      	subs	r3, #230	; 0xe6
     6a6:	71fb      	strb	r3, [r7, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
     6a8:	3b09      	subs	r3, #9
     6aa:	7333      	strb	r3, [r6, #12]
	udi_msc_sense.sense_flag_key = sense_key;
     6ac:	3303      	adds	r3, #3
     6ae:	70bb      	strb	r3, [r7, #2]
	if (0 != udi_msc_csw.dCSWDataResidue) {
     6b0:	68b3      	ldr	r3, [r6, #8]
     6b2:	2b00      	cmp	r3, #0
     6b4:	d005      	beq.n	6c2 <udi_msc_spc_mode_sense+0x14a>
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
     6b6:	7b23      	ldrb	r3, [r4, #12]
     6b8:	2b7f      	cmp	r3, #127	; 0x7f
     6ba:	d816      	bhi.n	6ea <udi_msc_spc_mode_sense+0x172>
			udd_ep_set_halt(UDI_MSC_EP_OUT);
     6bc:	2002      	movs	r0, #2
     6be:	4b15      	ldr	r3, [pc, #84]	; (714 <udi_msc_spc_mode_sense+0x19c>)
     6c0:	4798      	blx	r3
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
     6c2:	6863      	ldr	r3, [r4, #4]
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
     6c4:	0032      	movs	r2, r6
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
     6c6:	6073      	str	r3, [r6, #4]
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
     6c8:	4b13      	ldr	r3, [pc, #76]	; (718 <udi_msc_spc_mode_sense+0x1a0>)
     6ca:	2100      	movs	r1, #0
     6cc:	9300      	str	r3, [sp, #0]
     6ce:	2081      	movs	r0, #129	; 0x81
     6d0:	230d      	movs	r3, #13
     6d2:	47a8      	blx	r5
     6d4:	2800      	cmp	r0, #0
     6d6:	d197      	bne.n	608 <udi_msc_spc_mode_sense+0x90>
     6d8:	e7c7      	b.n	66a <udi_msc_spc_mode_sense+0xf2>
		sense.s6.header.mode_data_length = data_sense_lgt - 1;
     6da:	3d01      	subs	r5, #1
     6dc:	703d      	strb	r5, [r7, #0]
		sense.s6.header.device_specific_parameter = wp;
     6de:	70b8      	strb	r0, [r7, #2]
     6e0:	e788      	b.n	5f4 <udi_msc_spc_mode_sense+0x7c>
			udd_ep_set_halt(UDI_MSC_EP_IN);
     6e2:	4b0c      	ldr	r3, [pc, #48]	; (714 <udi_msc_spc_mode_sense+0x19c>)
     6e4:	2081      	movs	r0, #129	; 0x81
     6e6:	4798      	blx	r3
     6e8:	e7b3      	b.n	652 <udi_msc_spc_mode_sense+0xda>
     6ea:	4b0a      	ldr	r3, [pc, #40]	; (714 <udi_msc_spc_mode_sense+0x19c>)
     6ec:	2081      	movs	r0, #129	; 0x81
     6ee:	4798      	blx	r3
     6f0:	e7e7      	b.n	6c2 <udi_msc_spc_mode_sense+0x14a>
     6f2:	46c0      	nop			; (mov r8, r8)
     6f4:	20000d54 	.word	0x20000d54
     6f8:	0001f06d 	.word	0x0001f06d
     6fc:	20000d78 	.word	0x20000d78
     700:	20000018 	.word	0x20000018
     704:	0000aeb5 	.word	0x0000aeb5
     708:	0000044d 	.word	0x0000044d
     70c:	00002609 	.word	0x00002609
     710:	20000da0 	.word	0x20000da0
     714:	000024b1 	.word	0x000024b1
     718:	000002c5 	.word	0x000002c5
     71c:	00000199 	.word	0x00000199
     720:	0000257d 	.word	0x0000257d

00000724 <udi_msc_cbw_received>:
{
     724:	b5f0      	push	{r4, r5, r6, r7, lr}
     726:	46ce      	mov	lr, r9
     728:	4647      	mov	r7, r8
     72a:	b580      	push	{r7, lr}
     72c:	b085      	sub	sp, #20
	if (UDD_EP_TRANSFER_OK != status) {
     72e:	2800      	cmp	r0, #0
     730:	d10e      	bne.n	750 <udi_msc_cbw_received+0x2c>
	if ((sizeof(udi_msc_cbw) != nb_received)
     732:	291f      	cmp	r1, #31
     734:	d011      	beq.n	75a <udi_msc_cbw_received+0x36>
		udi_msc_b_cbw_invalid = true;
     736:	2301      	movs	r3, #1
     738:	4cd1      	ldr	r4, [pc, #836]	; (a80 <udi_msc_cbw_received+0x35c>)
	udd_ep_set_halt(UDI_MSC_EP_OUT);
     73a:	2002      	movs	r0, #2
     73c:	4ed1      	ldr	r6, [pc, #836]	; (a84 <udi_msc_cbw_received+0x360>)
		udi_msc_b_cbw_invalid = true;
     73e:	7023      	strb	r3, [r4, #0]
	udd_ep_set_halt(UDI_MSC_EP_OUT);
     740:	47b0      	blx	r6
	udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
     742:	49d1      	ldr	r1, [pc, #836]	; (a88 <udi_msc_cbw_received+0x364>)
     744:	2002      	movs	r0, #2
     746:	4dd1      	ldr	r5, [pc, #836]	; (a8c <udi_msc_cbw_received+0x368>)
     748:	47a8      	blx	r5
	if (!udi_msc_b_cbw_invalid)
     74a:	7823      	ldrb	r3, [r4, #0]
     74c:	2b00      	cmp	r3, #0
     74e:	d11d      	bne.n	78c <udi_msc_cbw_received+0x68>
}
     750:	b005      	add	sp, #20
     752:	bc0c      	pop	{r2, r3}
     754:	4690      	mov	r8, r2
     756:	4699      	mov	r9, r3
     758:	bdf0      	pop	{r4, r5, r6, r7, pc}
			|| (udi_msc_cbw.dCBWSignature !=
     75a:	4ccd      	ldr	r4, [pc, #820]	; (a90 <udi_msc_cbw_received+0x36c>)
     75c:	4bcd      	ldr	r3, [pc, #820]	; (a94 <udi_msc_cbw_received+0x370>)
     75e:	6822      	ldr	r2, [r4, #0]
     760:	429a      	cmp	r2, r3
     762:	d1e8      	bne.n	736 <udi_msc_cbw_received+0x12>
	udi_msc_cbw.bCBWLUN &= USB_CBW_LUN_MASK;
     764:	230f      	movs	r3, #15
     766:	7b60      	ldrb	r0, [r4, #13]
     768:	4018      	ands	r0, r3
	if (udi_msc_cbw.bCBWLUN > udi_msc_nb_lun) {
     76a:	4bcb      	ldr	r3, [pc, #812]	; (a98 <udi_msc_cbw_received+0x374>)
	udi_msc_cbw.bCBWLUN &= USB_CBW_LUN_MASK;
     76c:	7360      	strb	r0, [r4, #13]
	if (udi_msc_cbw.bCBWLUN > udi_msc_nb_lun) {
     76e:	781b      	ldrb	r3, [r3, #0]
     770:	4283      	cmp	r3, r0
     772:	d200      	bcs.n	776 <udi_msc_cbw_received+0x52>
     774:	e137      	b.n	9e6 <udi_msc_cbw_received+0x2c2>
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);
     776:	68a6      	ldr	r6, [r4, #8]
	udi_msc_csw.dCSWDataResidue =
     778:	4dc8      	ldr	r5, [pc, #800]	; (a9c <udi_msc_cbw_received+0x378>)
     77a:	60ae      	str	r6, [r5, #8]
	switch (udi_msc_cbw.CDB[0]) {
     77c:	7be3      	ldrb	r3, [r4, #15]
     77e:	2b5a      	cmp	r3, #90	; 0x5a
     780:	d900      	bls.n	784 <udi_msc_cbw_received+0x60>
     782:	e11f      	b.n	9c4 <udi_msc_cbw_received+0x2a0>
     784:	4ac6      	ldr	r2, [pc, #792]	; (aa0 <udi_msc_cbw_received+0x37c>)
     786:	009b      	lsls	r3, r3, #2
     788:	58d3      	ldr	r3, [r2, r3]
     78a:	469f      	mov	pc, r3
	udd_ep_set_halt(UDI_MSC_EP_IN);
     78c:	2081      	movs	r0, #129	; 0x81
     78e:	47b0      	blx	r6
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
     790:	49c4      	ldr	r1, [pc, #784]	; (aa4 <udi_msc_cbw_received+0x380>)
     792:	2081      	movs	r0, #129	; 0x81
     794:	47a8      	blx	r5
     796:	e7db      	b.n	750 <udi_msc_cbw_received+0x2c>
	bool start = 0x1 & udi_msc_cbw.CDB[4];
     798:	7ce3      	ldrb	r3, [r4, #19]
	if (loej) {
     79a:	079a      	lsls	r2, r3, #30
     79c:	d504      	bpl.n	7a8 <udi_msc_cbw_received+0x84>
		mem_unload(udi_msc_cbw.bCBWLUN, !start);
     79e:	2101      	movs	r1, #1
     7a0:	4399      	bics	r1, r3
     7a2:	4bc1      	ldr	r3, [pc, #772]	; (aa8 <udi_msc_cbw_received+0x384>)
     7a4:	4798      	blx	r3
     7a6:	68ae      	ldr	r6, [r5, #8]
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
     7a8:	4fc0      	ldr	r7, [pc, #768]	; (aac <udi_msc_cbw_received+0x388>)
     7aa:	4bc1      	ldr	r3, [pc, #772]	; (ab0 <udi_msc_cbw_received+0x38c>)
     7ac:	2212      	movs	r2, #18
     7ae:	2100      	movs	r1, #0
     7b0:	0038      	movs	r0, r7
     7b2:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     7b4:	23f0      	movs	r3, #240	; 0xf0
     7b6:	703b      	strb	r3, [r7, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
     7b8:	3be6      	subs	r3, #230	; 0xe6
     7ba:	71fb      	strb	r3, [r7, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
     7bc:	2300      	movs	r3, #0
     7be:	732b      	strb	r3, [r5, #12]
	if (0 != udi_msc_csw.dCSWDataResidue) {
     7c0:	2e00      	cmp	r6, #0
     7c2:	d006      	beq.n	7d2 <udi_msc_cbw_received+0xae>
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
     7c4:	7b23      	ldrb	r3, [r4, #12]
     7c6:	2b7f      	cmp	r3, #127	; 0x7f
     7c8:	d900      	bls.n	7cc <udi_msc_cbw_received+0xa8>
     7ca:	e0e2      	b.n	992 <udi_msc_cbw_received+0x26e>
			udd_ep_set_halt(UDI_MSC_EP_OUT);
     7cc:	2002      	movs	r0, #2
     7ce:	4bad      	ldr	r3, [pc, #692]	; (a84 <udi_msc_cbw_received+0x360>)
     7d0:	4798      	blx	r3
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
     7d2:	6863      	ldr	r3, [r4, #4]
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
     7d4:	002a      	movs	r2, r5
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
     7d6:	606b      	str	r3, [r5, #4]
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
     7d8:	4bb6      	ldr	r3, [pc, #728]	; (ab4 <udi_msc_cbw_received+0x390>)
     7da:	2100      	movs	r1, #0
     7dc:	9300      	str	r3, [sp, #0]
     7de:	2081      	movs	r0, #129	; 0x81
     7e0:	230d      	movs	r3, #13
     7e2:	4cb5      	ldr	r4, [pc, #724]	; (ab8 <udi_msc_cbw_received+0x394>)
     7e4:	47a0      	blx	r4
     7e6:	2800      	cmp	r0, #0
     7e8:	d1b2      	bne.n	750 <udi_msc_cbw_received+0x2c>
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
     7ea:	49b4      	ldr	r1, [pc, #720]	; (abc <udi_msc_cbw_received+0x398>)
     7ec:	4ba7      	ldr	r3, [pc, #668]	; (a8c <udi_msc_cbw_received+0x368>)
     7ee:	2081      	movs	r0, #129	; 0x81
     7f0:	4798      	blx	r3
     7f2:	e7ad      	b.n	750 <udi_msc_cbw_received+0x2c>
		if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
     7f4:	4bb2      	ldr	r3, [pc, #712]	; (ac0 <udi_msc_cbw_received+0x39c>)
     7f6:	4798      	blx	r3
     7f8:	2800      	cmp	r0, #0
     7fa:	d000      	beq.n	7fe <udi_msc_cbw_received+0xda>
     7fc:	e186      	b.n	b0c <udi_msc_cbw_received+0x3e8>
	MSB0(udi_msc_addr) = udi_msc_cbw.CDB[2];
     7fe:	7c62      	ldrb	r2, [r4, #17]
     800:	4bb0      	ldr	r3, [pc, #704]	; (ac4 <udi_msc_cbw_received+0x3a0>)
     802:	70da      	strb	r2, [r3, #3]
	MSB1(udi_msc_addr) = udi_msc_cbw.CDB[3];
     804:	7ca2      	ldrb	r2, [r4, #18]
     806:	709a      	strb	r2, [r3, #2]
	MSB2(udi_msc_addr) = udi_msc_cbw.CDB[4];
     808:	7ce2      	ldrb	r2, [r4, #19]
     80a:	705a      	strb	r2, [r3, #1]
	MSB3(udi_msc_addr) = udi_msc_cbw.CDB[5];
     80c:	7d22      	ldrb	r2, [r4, #20]
     80e:	701a      	strb	r2, [r3, #0]
	MSB(udi_msc_nb_block) = udi_msc_cbw.CDB[7];
     810:	7da2      	ldrb	r2, [r4, #22]
     812:	4bad      	ldr	r3, [pc, #692]	; (ac8 <udi_msc_cbw_received+0x3a4>)
     814:	705a      	strb	r2, [r3, #1]
	LSB(udi_msc_nb_block) = udi_msc_cbw.CDB[8];
     816:	7de2      	ldrb	r2, [r4, #23]
     818:	701a      	strb	r2, [r3, #0]
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
     81a:	881b      	ldrh	r3, [r3, #0]
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
     81c:	7b22      	ldrb	r2, [r4, #12]
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
     81e:	025b      	lsls	r3, r3, #9
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
     820:	2a7f      	cmp	r2, #127	; 0x7f
     822:	d900      	bls.n	826 <udi_msc_cbw_received+0x102>
     824:	e20b      	b.n	c3e <udi_msc_cbw_received+0x51a>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
     826:	68ae      	ldr	r6, [r5, #8]
     828:	42b3      	cmp	r3, r6
     82a:	d800      	bhi.n	82e <udi_msc_cbw_received+0x10a>
     82c:	e120      	b.n	a70 <udi_msc_cbw_received+0x34c>
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
     82e:	4f9f      	ldr	r7, [pc, #636]	; (aac <udi_msc_cbw_received+0x388>)
     830:	4b9f      	ldr	r3, [pc, #636]	; (ab0 <udi_msc_cbw_received+0x38c>)
     832:	2212      	movs	r2, #18
     834:	2100      	movs	r1, #0
     836:	0038      	movs	r0, r7
     838:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     83a:	23f0      	movs	r3, #240	; 0xf0
     83c:	703b      	strb	r3, [r7, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
     83e:	3be6      	subs	r3, #230	; 0xe6
     840:	71fb      	strb	r3, [r7, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
     842:	3b09      	subs	r3, #9
     844:	732b      	strb	r3, [r5, #12]
	udi_msc_sense.sense_flag_key = sense_key;
     846:	3304      	adds	r3, #4
     848:	70bb      	strb	r3, [r7, #2]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
     84a:	331f      	adds	r3, #31
     84c:	733b      	strb	r3, [r7, #12]
	if (0 != udi_msc_csw.dCSWDataResidue) {
     84e:	2e00      	cmp	r6, #0
     850:	d1bc      	bne.n	7cc <udi_msc_cbw_received+0xa8>
     852:	e7be      	b.n	7d2 <udi_msc_cbw_received+0xae>
	MSB0(udi_msc_addr) = udi_msc_cbw.CDB[2];
     854:	7c62      	ldrb	r2, [r4, #17]
     856:	4b9b      	ldr	r3, [pc, #620]	; (ac4 <udi_msc_cbw_received+0x3a0>)
     858:	70da      	strb	r2, [r3, #3]
	MSB1(udi_msc_addr) = udi_msc_cbw.CDB[3];
     85a:	7ca2      	ldrb	r2, [r4, #18]
     85c:	709a      	strb	r2, [r3, #2]
	MSB2(udi_msc_addr) = udi_msc_cbw.CDB[4];
     85e:	7ce2      	ldrb	r2, [r4, #19]
     860:	705a      	strb	r2, [r3, #1]
	MSB3(udi_msc_addr) = udi_msc_cbw.CDB[5];
     862:	7d22      	ldrb	r2, [r4, #20]
     864:	701a      	strb	r2, [r3, #0]
	MSB(udi_msc_nb_block) = udi_msc_cbw.CDB[7];
     866:	7da2      	ldrb	r2, [r4, #22]
     868:	4b97      	ldr	r3, [pc, #604]	; (ac8 <udi_msc_cbw_received+0x3a4>)
     86a:	705a      	strb	r2, [r3, #1]
	LSB(udi_msc_nb_block) = udi_msc_cbw.CDB[8];
     86c:	7de2      	ldrb	r2, [r4, #23]
     86e:	701a      	strb	r2, [r3, #0]
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
     870:	7b22      	ldrb	r2, [r4, #12]
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
     872:	881b      	ldrh	r3, [r3, #0]
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
     874:	4690      	mov	r8, r2
     876:	3a80      	subs	r2, #128	; 0x80
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
     878:	025b      	lsls	r3, r3, #9
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
     87a:	0612      	lsls	r2, r2, #24
     87c:	d500      	bpl.n	880 <udi_msc_cbw_received+0x15c>
     87e:	e0c8      	b.n	a12 <udi_msc_cbw_received+0x2ee>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
     880:	429e      	cmp	r6, r3
     882:	d200      	bcs.n	886 <udi_msc_cbw_received+0x162>
     884:	e0c5      	b.n	a12 <udi_msc_cbw_received+0x2ee>
	udi_msc_b_read = b_read;
     886:	2301      	movs	r3, #1
     888:	4a90      	ldr	r2, [pc, #576]	; (acc <udi_msc_cbw_received+0x3a8>)
     88a:	7013      	strb	r3, [r2, #0]
	udi_msc_b_trans_req = true;
     88c:	4a90      	ldr	r2, [pc, #576]	; (ad0 <udi_msc_cbw_received+0x3ac>)
     88e:	7013      	strb	r3, [r2, #0]
	UDI_MSC_NOTIFY_TRANS_EXT();
     890:	4b90      	ldr	r3, [pc, #576]	; (ad4 <udi_msc_cbw_received+0x3b0>)
     892:	4798      	blx	r3
     894:	e75c      	b.n	750 <udi_msc_cbw_received+0x2c>
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
     896:	7b23      	ldrb	r3, [r4, #12]
     898:	4698      	mov	r8, r3
     89a:	3b80      	subs	r3, #128	; 0x80
     89c:	061b      	lsls	r3, r3, #24
     89e:	d500      	bpl.n	8a2 <udi_msc_cbw_received+0x17e>
     8a0:	e0b7      	b.n	a12 <udi_msc_cbw_received+0x2ee>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
     8a2:	2e07      	cmp	r6, #7
     8a4:	d800      	bhi.n	8a8 <udi_msc_cbw_received+0x184>
     8a6:	e0b4      	b.n	a12 <udi_msc_cbw_received+0x2ee>
	switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
     8a8:	4c8b      	ldr	r4, [pc, #556]	; (ad8 <udi_msc_cbw_received+0x3b4>)
     8aa:	4b8c      	ldr	r3, [pc, #560]	; (adc <udi_msc_cbw_received+0x3b8>)
     8ac:	0021      	movs	r1, r4
     8ae:	4798      	blx	r3
     8b0:	2802      	cmp	r0, #2
     8b2:	d100      	bne.n	8b6 <udi_msc_cbw_received+0x192>
     8b4:	e1eb      	b.n	c8e <udi_msc_cbw_received+0x56a>
     8b6:	2803      	cmp	r0, #3
     8b8:	d100      	bne.n	8bc <udi_msc_cbw_received+0x198>
     8ba:	e1e0      	b.n	c7e <udi_msc_cbw_received+0x55a>
     8bc:	2800      	cmp	r0, #0
     8be:	d100      	bne.n	8c2 <udi_msc_cbw_received+0x19e>
     8c0:	e1d2      	b.n	c68 <udi_msc_cbw_received+0x544>
	udi_msc_sense_fail(SCSI_SK_HARDWARE_ERROR,
     8c2:	2100      	movs	r1, #0
     8c4:	2004      	movs	r0, #4
     8c6:	4b86      	ldr	r3, [pc, #536]	; (ae0 <udi_msc_cbw_received+0x3bc>)
     8c8:	4798      	blx	r3
		udi_msc_csw_process();
     8ca:	4b86      	ldr	r3, [pc, #536]	; (ae4 <udi_msc_cbw_received+0x3c0>)
     8cc:	4798      	blx	r3
     8ce:	e73f      	b.n	750 <udi_msc_cbw_received+0x2c>
	if (0 == prevent) {
     8d0:	7ce7      	ldrb	r7, [r4, #19]
     8d2:	2f00      	cmp	r7, #0
     8d4:	d100      	bne.n	8d8 <udi_msc_cbw_received+0x1b4>
     8d6:	e0b1      	b.n	a3c <udi_msc_cbw_received+0x318>
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
     8d8:	4f74      	ldr	r7, [pc, #464]	; (aac <udi_msc_cbw_received+0x388>)
     8da:	4b75      	ldr	r3, [pc, #468]	; (ab0 <udi_msc_cbw_received+0x38c>)
     8dc:	2212      	movs	r2, #18
     8de:	2100      	movs	r1, #0
     8e0:	0038      	movs	r0, r7
     8e2:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     8e4:	23f0      	movs	r3, #240	; 0xf0
     8e6:	703b      	strb	r3, [r7, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
     8e8:	3be6      	subs	r3, #230	; 0xe6
     8ea:	71fb      	strb	r3, [r7, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
     8ec:	3b09      	subs	r3, #9
     8ee:	732b      	strb	r3, [r5, #12]
	udi_msc_sense.sense_flag_key = sense_key;
     8f0:	3304      	adds	r3, #4
     8f2:	70bb      	strb	r3, [r7, #2]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
     8f4:	331f      	adds	r3, #31
     8f6:	733b      	strb	r3, [r7, #12]
	if (0 != udi_msc_csw.dCSWDataResidue) {
     8f8:	2e00      	cmp	r6, #0
     8fa:	d000      	beq.n	8fe <udi_msc_cbw_received+0x1da>
     8fc:	e762      	b.n	7c4 <udi_msc_cbw_received+0xa0>
     8fe:	e768      	b.n	7d2 <udi_msc_cbw_received+0xae>
	switch (mem_test_unit_ready(udi_msc_cbw.bCBWLUN)) {
     900:	4b79      	ldr	r3, [pc, #484]	; (ae8 <udi_msc_cbw_received+0x3c4>)
     902:	4798      	blx	r3
     904:	0006      	movs	r6, r0
     906:	2802      	cmp	r0, #2
     908:	d100      	bne.n	90c <udi_msc_cbw_received+0x1e8>
     90a:	e0f9      	b.n	b00 <udi_msc_cbw_received+0x3dc>
     90c:	2803      	cmp	r0, #3
     90e:	d100      	bne.n	912 <udi_msc_cbw_received+0x1ee>
     910:	e0f0      	b.n	af4 <udi_msc_cbw_received+0x3d0>
     912:	2800      	cmp	r0, #0
     914:	d100      	bne.n	918 <udi_msc_cbw_received+0x1f4>
     916:	e09f      	b.n	a58 <udi_msc_cbw_received+0x334>
	udi_msc_sense_fail(SCSI_SK_HARDWARE_ERROR,
     918:	2100      	movs	r1, #0
     91a:	2004      	movs	r0, #4
     91c:	4b70      	ldr	r3, [pc, #448]	; (ae0 <udi_msc_cbw_received+0x3bc>)
     91e:	4798      	blx	r3
	if (0 != udi_msc_csw.dCSWDataResidue) {
     920:	68ab      	ldr	r3, [r5, #8]
     922:	2b00      	cmp	r3, #0
     924:	d000      	beq.n	928 <udi_msc_cbw_received+0x204>
     926:	e74d      	b.n	7c4 <udi_msc_cbw_received+0xa0>
     928:	e753      	b.n	7d2 <udi_msc_cbw_received+0xae>
		udi_msc_spc_mode_sense(true);
     92a:	2001      	movs	r0, #1
     92c:	4b6f      	ldr	r3, [pc, #444]	; (aec <udi_msc_cbw_received+0x3c8>)
     92e:	4798      	blx	r3
     930:	e70e      	b.n	750 <udi_msc_cbw_received+0x2c>
	length = udi_msc_cbw.CDB[4];
     932:	7ce3      	ldrb	r3, [r4, #19]
     934:	1c1f      	adds	r7, r3, #0
     936:	2b24      	cmp	r3, #36	; 0x24
     938:	d900      	bls.n	93c <udi_msc_cbw_received+0x218>
     93a:	2724      	movs	r7, #36	; 0x24
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
     93c:	7b23      	ldrb	r3, [r4, #12]
     93e:	b2ff      	uxtb	r7, r7
     940:	4699      	mov	r9, r3
     942:	3b80      	subs	r3, #128	; 0x80
     944:	061b      	lsls	r3, r3, #24
     946:	d409      	bmi.n	95c <udi_msc_cbw_received+0x238>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
     948:	42be      	cmp	r6, r7
     94a:	d307      	bcc.n	95c <udi_msc_cbw_received+0x238>
	if ((0 != (udi_msc_cbw.CDB[1] & (SCSI_INQ_REQ_EVPD | SCSI_INQ_REQ_CMDT)))
     94c:	7c23      	ldrb	r3, [r4, #16]
     94e:	079b      	lsls	r3, r3, #30
     950:	d104      	bne.n	95c <udi_msc_cbw_received+0x238>
			|| (0 != udi_msc_cbw.CDB[2])) {
     952:	7c63      	ldrb	r3, [r4, #17]
     954:	4698      	mov	r8, r3
     956:	2b00      	cmp	r3, #0
     958:	d100      	bne.n	95c <udi_msc_cbw_received+0x238>
     95a:	e0ea      	b.n	b32 <udi_msc_cbw_received+0x40e>
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
     95c:	4f53      	ldr	r7, [pc, #332]	; (aac <udi_msc_cbw_received+0x388>)
     95e:	4b54      	ldr	r3, [pc, #336]	; (ab0 <udi_msc_cbw_received+0x38c>)
     960:	2212      	movs	r2, #18
     962:	2100      	movs	r1, #0
     964:	0038      	movs	r0, r7
     966:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     968:	23f0      	movs	r3, #240	; 0xf0
     96a:	703b      	strb	r3, [r7, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
     96c:	3be6      	subs	r3, #230	; 0xe6
     96e:	71fb      	strb	r3, [r7, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
     970:	3b09      	subs	r3, #9
     972:	732b      	strb	r3, [r5, #12]
	udi_msc_sense.sense_flag_key = sense_key;
     974:	3304      	adds	r3, #4
     976:	70bb      	strb	r3, [r7, #2]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
     978:	331f      	adds	r3, #31
     97a:	733b      	strb	r3, [r7, #12]
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
     97c:	464b      	mov	r3, r9
	if (0 != udi_msc_csw.dCSWDataResidue) {
     97e:	2e00      	cmp	r6, #0
     980:	d100      	bne.n	984 <udi_msc_cbw_received+0x260>
     982:	e726      	b.n	7d2 <udi_msc_cbw_received+0xae>
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
     984:	466a      	mov	r2, sp
     986:	73d3      	strb	r3, [r2, #15]
     988:	7bd3      	ldrb	r3, [r2, #15]
     98a:	b25b      	sxtb	r3, r3
     98c:	2b00      	cmp	r3, #0
     98e:	db00      	blt.n	992 <udi_msc_cbw_received+0x26e>
     990:	e71c      	b.n	7cc <udi_msc_cbw_received+0xa8>
			udd_ep_set_halt(UDI_MSC_EP_IN);
     992:	4b3c      	ldr	r3, [pc, #240]	; (a84 <udi_msc_cbw_received+0x360>)
     994:	2081      	movs	r0, #129	; 0x81
     996:	4798      	blx	r3
     998:	e71b      	b.n	7d2 <udi_msc_cbw_received+0xae>
	uint8_t length = udi_msc_cbw.CDB[4];
     99a:	7ce3      	ldrb	r3, [r4, #19]
     99c:	1c19      	adds	r1, r3, #0
     99e:	2b12      	cmp	r3, #18
     9a0:	d900      	bls.n	9a4 <udi_msc_cbw_received+0x280>
     9a2:	2112      	movs	r1, #18
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
     9a4:	7b23      	ldrb	r3, [r4, #12]
     9a6:	b2c9      	uxtb	r1, r1
     9a8:	4698      	mov	r8, r3
     9aa:	3b80      	subs	r3, #128	; 0x80
     9ac:	061b      	lsls	r3, r3, #24
     9ae:	d430      	bmi.n	a12 <udi_msc_cbw_received+0x2ee>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
     9b0:	428e      	cmp	r6, r1
     9b2:	d32e      	bcc.n	a12 <udi_msc_cbw_received+0x2ee>
	udi_msc_data_send((uint8_t*)&udi_msc_sense, length);
     9b4:	483d      	ldr	r0, [pc, #244]	; (aac <udi_msc_cbw_received+0x388>)
     9b6:	4b4e      	ldr	r3, [pc, #312]	; (af0 <udi_msc_cbw_received+0x3cc>)
     9b8:	4798      	blx	r3
     9ba:	e6c9      	b.n	750 <udi_msc_cbw_received+0x2c>
		udi_msc_spc_mode_sense(false);
     9bc:	2000      	movs	r0, #0
     9be:	4b4b      	ldr	r3, [pc, #300]	; (aec <udi_msc_cbw_received+0x3c8>)
     9c0:	4798      	blx	r3
     9c2:	e6c5      	b.n	750 <udi_msc_cbw_received+0x2c>
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
     9c4:	4f39      	ldr	r7, [pc, #228]	; (aac <udi_msc_cbw_received+0x388>)
     9c6:	4b3a      	ldr	r3, [pc, #232]	; (ab0 <udi_msc_cbw_received+0x38c>)
     9c8:	2212      	movs	r2, #18
     9ca:	2100      	movs	r1, #0
     9cc:	0038      	movs	r0, r7
     9ce:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     9d0:	23f0      	movs	r3, #240	; 0xf0
     9d2:	703b      	strb	r3, [r7, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
     9d4:	3be6      	subs	r3, #230	; 0xe6
     9d6:	71fb      	strb	r3, [r7, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
     9d8:	3b09      	subs	r3, #9
     9da:	732b      	strb	r3, [r5, #12]
	udi_msc_sense.sense_flag_key = sense_key;
     9dc:	3304      	adds	r3, #4
     9de:	70bb      	strb	r3, [r7, #2]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
     9e0:	331b      	adds	r3, #27
     9e2:	733b      	strb	r3, [r7, #12]
     9e4:	e788      	b.n	8f8 <udi_msc_cbw_received+0x1d4>
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
     9e6:	4e31      	ldr	r6, [pc, #196]	; (aac <udi_msc_cbw_received+0x388>)
     9e8:	4b31      	ldr	r3, [pc, #196]	; (ab0 <udi_msc_cbw_received+0x38c>)
     9ea:	2212      	movs	r2, #18
     9ec:	2100      	movs	r1, #0
     9ee:	0030      	movs	r0, r6
     9f0:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     9f2:	23f0      	movs	r3, #240	; 0xf0
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
     9f4:	4d29      	ldr	r5, [pc, #164]	; (a9c <udi_msc_cbw_received+0x378>)
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     9f6:	7033      	strb	r3, [r6, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
     9f8:	3be6      	subs	r3, #230	; 0xe6
     9fa:	71f3      	strb	r3, [r6, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
     9fc:	3b09      	subs	r3, #9
     9fe:	732b      	strb	r3, [r5, #12]
	udi_msc_sense.sense_flag_key = sense_key;
     a00:	3304      	adds	r3, #4
     a02:	70b3      	strb	r3, [r6, #2]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
     a04:	331f      	adds	r3, #31
     a06:	7333      	strb	r3, [r6, #12]
	if (0 != udi_msc_csw.dCSWDataResidue) {
     a08:	68ab      	ldr	r3, [r5, #8]
     a0a:	2b00      	cmp	r3, #0
     a0c:	d000      	beq.n	a10 <udi_msc_cbw_received+0x2ec>
     a0e:	e6d9      	b.n	7c4 <udi_msc_cbw_received+0xa0>
     a10:	e6df      	b.n	7d2 <udi_msc_cbw_received+0xae>
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
     a12:	4f26      	ldr	r7, [pc, #152]	; (aac <udi_msc_cbw_received+0x388>)
     a14:	4b26      	ldr	r3, [pc, #152]	; (ab0 <udi_msc_cbw_received+0x38c>)
     a16:	2212      	movs	r2, #18
     a18:	2100      	movs	r1, #0
     a1a:	0038      	movs	r0, r7
     a1c:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     a1e:	23f0      	movs	r3, #240	; 0xf0
     a20:	703b      	strb	r3, [r7, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
     a22:	3be6      	subs	r3, #230	; 0xe6
     a24:	71fb      	strb	r3, [r7, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
     a26:	3b09      	subs	r3, #9
     a28:	732b      	strb	r3, [r5, #12]
	udi_msc_sense.sense_flag_key = sense_key;
     a2a:	3304      	adds	r3, #4
     a2c:	70bb      	strb	r3, [r7, #2]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
     a2e:	331f      	adds	r3, #31
     a30:	733b      	strb	r3, [r7, #12]
	if (0 != udi_msc_csw.dCSWDataResidue) {
     a32:	2e00      	cmp	r6, #0
     a34:	d100      	bne.n	a38 <udi_msc_cbw_received+0x314>
     a36:	e6cc      	b.n	7d2 <udi_msc_cbw_received+0xae>
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
     a38:	4643      	mov	r3, r8
     a3a:	e7a3      	b.n	984 <udi_msc_cbw_received+0x260>
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
     a3c:	4b1b      	ldr	r3, [pc, #108]	; (aac <udi_msc_cbw_received+0x388>)
     a3e:	2212      	movs	r2, #18
     a40:	4698      	mov	r8, r3
     a42:	0018      	movs	r0, r3
     a44:	2100      	movs	r1, #0
     a46:	4b1a      	ldr	r3, [pc, #104]	; (ab0 <udi_msc_cbw_received+0x38c>)
     a48:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     a4a:	23f0      	movs	r3, #240	; 0xf0
     a4c:	4642      	mov	r2, r8
     a4e:	7013      	strb	r3, [r2, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
     a50:	3be6      	subs	r3, #230	; 0xe6
     a52:	71d3      	strb	r3, [r2, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
     a54:	732f      	strb	r7, [r5, #12]
     a56:	e74f      	b.n	8f8 <udi_msc_cbw_received+0x1d4>
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
     a58:	4f14      	ldr	r7, [pc, #80]	; (aac <udi_msc_cbw_received+0x388>)
     a5a:	4b15      	ldr	r3, [pc, #84]	; (ab0 <udi_msc_cbw_received+0x38c>)
     a5c:	2212      	movs	r2, #18
     a5e:	2100      	movs	r1, #0
     a60:	0038      	movs	r0, r7
     a62:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     a64:	23f0      	movs	r3, #240	; 0xf0
     a66:	703b      	strb	r3, [r7, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
     a68:	3be6      	subs	r3, #230	; 0xe6
     a6a:	71fb      	strb	r3, [r7, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
     a6c:	732e      	strb	r6, [r5, #12]
     a6e:	e757      	b.n	920 <udi_msc_cbw_received+0x1fc>
	udi_msc_b_trans_req = true;
     a70:	2201      	movs	r2, #1
	udi_msc_b_read = b_read;
     a72:	4b16      	ldr	r3, [pc, #88]	; (acc <udi_msc_cbw_received+0x3a8>)
     a74:	7018      	strb	r0, [r3, #0]
	udi_msc_b_trans_req = true;
     a76:	4b16      	ldr	r3, [pc, #88]	; (ad0 <udi_msc_cbw_received+0x3ac>)
     a78:	701a      	strb	r2, [r3, #0]
	UDI_MSC_NOTIFY_TRANS_EXT();
     a7a:	4b16      	ldr	r3, [pc, #88]	; (ad4 <udi_msc_cbw_received+0x3b0>)
     a7c:	4798      	blx	r3
     a7e:	e667      	b.n	750 <udi_msc_cbw_received+0x2c>
     a80:	20000d6c 	.word	0x20000d6c
     a84:	000024b1 	.word	0x000024b1
     a88:	00000209 	.word	0x00000209
     a8c:	0000257d 	.word	0x0000257d
     a90:	20000d78 	.word	0x20000d78
     a94:	43425355 	.word	0x43425355
     a98:	20000d9c 	.word	0x20000d9c
     a9c:	20000018 	.word	0x20000018
     aa0:	0002316c 	.word	0x0002316c
     aa4:	00000235 	.word	0x00000235
     aa8:	0000ae9d 	.word	0x0000ae9d
     aac:	20000da0 	.word	0x20000da0
     ab0:	0001f06d 	.word	0x0001f06d
     ab4:	000002c5 	.word	0x000002c5
     ab8:	00002609 	.word	0x00002609
     abc:	00000199 	.word	0x00000199
     ac0:	0000aeb5 	.word	0x0000aeb5
     ac4:	20000d68 	.word	0x20000d68
     ac8:	20000d98 	.word	0x20000d98
     acc:	20000d6d 	.word	0x20000d6d
     ad0:	20000d6e 	.word	0x20000d6e
     ad4:	00019511 	.word	0x00019511
     ad8:	20000d70 	.word	0x20000d70
     adc:	0000ae7d 	.word	0x0000ae7d
     ae0:	000001d1 	.word	0x000001d1
     ae4:	00000261 	.word	0x00000261
     ae8:	0000ae69 	.word	0x0000ae69
     aec:	00000579 	.word	0x00000579
     af0:	000004d9 	.word	0x000004d9
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
     af4:	21a0      	movs	r1, #160	; 0xa0
     af6:	2006      	movs	r0, #6
     af8:	0189      	lsls	r1, r1, #6
     afa:	4bc2      	ldr	r3, [pc, #776]	; (e04 <udi_msc_cbw_received+0x6e0>)
     afc:	4798      	blx	r3
     afe:	e70f      	b.n	920 <udi_msc_cbw_received+0x1fc>
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
     b00:	21e8      	movs	r1, #232	; 0xe8
     b02:	2002      	movs	r0, #2
     b04:	0189      	lsls	r1, r1, #6
     b06:	4bbf      	ldr	r3, [pc, #764]	; (e04 <udi_msc_cbw_received+0x6e0>)
     b08:	4798      	blx	r3
     b0a:	e709      	b.n	920 <udi_msc_cbw_received+0x1fc>
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
     b0c:	4cbe      	ldr	r4, [pc, #760]	; (e08 <udi_msc_cbw_received+0x6e4>)
     b0e:	2212      	movs	r2, #18
     b10:	2100      	movs	r1, #0
     b12:	0020      	movs	r0, r4
     b14:	4bbd      	ldr	r3, [pc, #756]	; (e0c <udi_msc_cbw_received+0x6e8>)
     b16:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     b18:	23f0      	movs	r3, #240	; 0xf0
     b1a:	7023      	strb	r3, [r4, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
     b1c:	3be6      	subs	r3, #230	; 0xe6
     b1e:	71e3      	strb	r3, [r4, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
     b20:	3b09      	subs	r3, #9
     b22:	732b      	strb	r3, [r5, #12]
	udi_msc_sense.sense_flag_key = sense_key;
     b24:	3306      	adds	r3, #6
     b26:	70a3      	strb	r3, [r4, #2]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
     b28:	3320      	adds	r3, #32
     b2a:	7323      	strb	r3, [r4, #12]
			udi_msc_csw_process();
     b2c:	4bb8      	ldr	r3, [pc, #736]	; (e10 <udi_msc_cbw_received+0x6ec>)
     b2e:	4798      	blx	r3
     b30:	e60e      	b.n	750 <udi_msc_cbw_received+0x2c>
	udi_msc_inquiry_data.flags1 = mem_removal(udi_msc_cbw.bCBWLUN) ?
     b32:	4bb8      	ldr	r3, [pc, #736]	; (e14 <udi_msc_cbw_received+0x6f0>)
     b34:	4798      	blx	r3
     b36:	0003      	movs	r3, r0
     b38:	1e58      	subs	r0, r3, #1
     b3a:	4183      	sbcs	r3, r0
     b3c:	4db6      	ldr	r5, [pc, #728]	; (e18 <udi_msc_cbw_received+0x6f4>)
     b3e:	01db      	lsls	r3, r3, #7
     b40:	706b      	strb	r3, [r5, #1]
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
     b42:	7b60      	ldrb	r0, [r4, #13]
     b44:	4bb5      	ldr	r3, [pc, #724]	; (e1c <udi_msc_cbw_received+0x6f8>)
     b46:	4798      	blx	r3
     b48:	0001      	movs	r1, r0
	memcpy(udi_msc_inquiry_data.product_id,
     b4a:	0028      	movs	r0, r5
     b4c:	4bb4      	ldr	r3, [pc, #720]	; (e20 <udi_msc_cbw_received+0x6fc>)
     b4e:	3010      	adds	r0, #16
     b50:	3101      	adds	r1, #1
     b52:	2210      	movs	r2, #16
     b54:	4798      	blx	r3
		if ((0 == udi_msc_inquiry_data.product_id[i])
     b56:	7c2b      	ldrb	r3, [r5, #16]
     b58:	2b00      	cmp	r3, #0
     b5a:	d100      	bne.n	b5e <udi_msc_cbw_received+0x43a>
     b5c:	e0a0      	b.n	ca0 <udi_msc_cbw_received+0x57c>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
     b5e:	2b22      	cmp	r3, #34	; 0x22
     b60:	d100      	bne.n	b64 <udi_msc_cbw_received+0x440>
     b62:	e106      	b.n	d72 <udi_msc_cbw_received+0x64e>
		if ((0 == udi_msc_inquiry_data.product_id[i])
     b64:	7c6b      	ldrb	r3, [r5, #17]
     b66:	2b00      	cmp	r3, #0
     b68:	d100      	bne.n	b6c <udi_msc_cbw_received+0x448>
     b6a:	e107      	b.n	d7c <udi_msc_cbw_received+0x658>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
     b6c:	2b22      	cmp	r3, #34	; 0x22
     b6e:	d100      	bne.n	b72 <udi_msc_cbw_received+0x44e>
     b70:	e101      	b.n	d76 <udi_msc_cbw_received+0x652>
		if ((0 == udi_msc_inquiry_data.product_id[i])
     b72:	7cab      	ldrb	r3, [r5, #18]
     b74:	2b00      	cmp	r3, #0
     b76:	d100      	bne.n	b7a <udi_msc_cbw_received+0x456>
     b78:	e10a      	b.n	d90 <udi_msc_cbw_received+0x66c>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
     b7a:	2b22      	cmp	r3, #34	; 0x22
     b7c:	d100      	bne.n	b80 <udi_msc_cbw_received+0x45c>
     b7e:	e104      	b.n	d8a <udi_msc_cbw_received+0x666>
		if ((0 == udi_msc_inquiry_data.product_id[i])
     b80:	7ceb      	ldrb	r3, [r5, #19]
     b82:	2b00      	cmp	r3, #0
     b84:	d100      	bne.n	b88 <udi_msc_cbw_received+0x464>
     b86:	e0fe      	b.n	d86 <udi_msc_cbw_received+0x662>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
     b88:	2b22      	cmp	r3, #34	; 0x22
     b8a:	d100      	bne.n	b8e <udi_msc_cbw_received+0x46a>
     b8c:	e0f8      	b.n	d80 <udi_msc_cbw_received+0x65c>
		if ((0 == udi_msc_inquiry_data.product_id[i])
     b8e:	7d2b      	ldrb	r3, [r5, #20]
     b90:	2b00      	cmp	r3, #0
     b92:	d100      	bne.n	b96 <udi_msc_cbw_received+0x472>
     b94:	e110      	b.n	db8 <udi_msc_cbw_received+0x694>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
     b96:	2b22      	cmp	r3, #34	; 0x22
     b98:	d100      	bne.n	b9c <udi_msc_cbw_received+0x478>
     b9a:	e10a      	b.n	db2 <udi_msc_cbw_received+0x68e>
		if ((0 == udi_msc_inquiry_data.product_id[i])
     b9c:	7d6b      	ldrb	r3, [r5, #21]
     b9e:	2b00      	cmp	r3, #0
     ba0:	d100      	bne.n	ba4 <udi_msc_cbw_received+0x480>
     ba2:	e104      	b.n	dae <udi_msc_cbw_received+0x68a>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
     ba4:	2b22      	cmp	r3, #34	; 0x22
     ba6:	d100      	bne.n	baa <udi_msc_cbw_received+0x486>
     ba8:	e0fe      	b.n	da8 <udi_msc_cbw_received+0x684>
		if ((0 == udi_msc_inquiry_data.product_id[i])
     baa:	7dab      	ldrb	r3, [r5, #22]
     bac:	2b00      	cmp	r3, #0
     bae:	d100      	bne.n	bb2 <udi_msc_cbw_received+0x48e>
     bb0:	e0f8      	b.n	da4 <udi_msc_cbw_received+0x680>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
     bb2:	2b22      	cmp	r3, #34	; 0x22
     bb4:	d100      	bne.n	bb8 <udi_msc_cbw_received+0x494>
     bb6:	e0f2      	b.n	d9e <udi_msc_cbw_received+0x67a>
		if ((0 == udi_msc_inquiry_data.product_id[i])
     bb8:	7deb      	ldrb	r3, [r5, #23]
     bba:	2b00      	cmp	r3, #0
     bbc:	d100      	bne.n	bc0 <udi_msc_cbw_received+0x49c>
     bbe:	e0ec      	b.n	d9a <udi_msc_cbw_received+0x676>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
     bc0:	2b22      	cmp	r3, #34	; 0x22
     bc2:	d100      	bne.n	bc6 <udi_msc_cbw_received+0x4a2>
     bc4:	e0e6      	b.n	d94 <udi_msc_cbw_received+0x670>
		if ((0 == udi_msc_inquiry_data.product_id[i])
     bc6:	7e2b      	ldrb	r3, [r5, #24]
     bc8:	2b00      	cmp	r3, #0
     bca:	d100      	bne.n	bce <udi_msc_cbw_received+0x4aa>
     bcc:	e117      	b.n	dfe <udi_msc_cbw_received+0x6da>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
     bce:	2b22      	cmp	r3, #34	; 0x22
     bd0:	d100      	bne.n	bd4 <udi_msc_cbw_received+0x4b0>
     bd2:	e111      	b.n	df8 <udi_msc_cbw_received+0x6d4>
		if ((0 == udi_msc_inquiry_data.product_id[i])
     bd4:	7e6b      	ldrb	r3, [r5, #25]
     bd6:	2b00      	cmp	r3, #0
     bd8:	d100      	bne.n	bdc <udi_msc_cbw_received+0x4b8>
     bda:	e10b      	b.n	df4 <udi_msc_cbw_received+0x6d0>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
     bdc:	2b22      	cmp	r3, #34	; 0x22
     bde:	d100      	bne.n	be2 <udi_msc_cbw_received+0x4be>
     be0:	e105      	b.n	dee <udi_msc_cbw_received+0x6ca>
		if ((0 == udi_msc_inquiry_data.product_id[i])
     be2:	7eab      	ldrb	r3, [r5, #26]
     be4:	2b00      	cmp	r3, #0
     be6:	d100      	bne.n	bea <udi_msc_cbw_received+0x4c6>
     be8:	e0ff      	b.n	dea <udi_msc_cbw_received+0x6c6>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
     bea:	2b22      	cmp	r3, #34	; 0x22
     bec:	d100      	bne.n	bf0 <udi_msc_cbw_received+0x4cc>
     bee:	e0f9      	b.n	de4 <udi_msc_cbw_received+0x6c0>
		if ((0 == udi_msc_inquiry_data.product_id[i])
     bf0:	7eeb      	ldrb	r3, [r5, #27]
     bf2:	2b00      	cmp	r3, #0
     bf4:	d100      	bne.n	bf8 <udi_msc_cbw_received+0x4d4>
     bf6:	e0f3      	b.n	de0 <udi_msc_cbw_received+0x6bc>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
     bf8:	2b22      	cmp	r3, #34	; 0x22
     bfa:	d100      	bne.n	bfe <udi_msc_cbw_received+0x4da>
     bfc:	e0b7      	b.n	d6e <udi_msc_cbw_received+0x64a>
		if ((0 == udi_msc_inquiry_data.product_id[i])
     bfe:	7f2b      	ldrb	r3, [r5, #28]
     c00:	2b00      	cmp	r3, #0
     c02:	d100      	bne.n	c06 <udi_msc_cbw_received+0x4e2>
     c04:	e0ea      	b.n	ddc <udi_msc_cbw_received+0x6b8>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
     c06:	2b22      	cmp	r3, #34	; 0x22
     c08:	d100      	bne.n	c0c <udi_msc_cbw_received+0x4e8>
     c0a:	e0e4      	b.n	dd6 <udi_msc_cbw_received+0x6b2>
		if ((0 == udi_msc_inquiry_data.product_id[i])
     c0c:	7f6b      	ldrb	r3, [r5, #29]
     c0e:	2b00      	cmp	r3, #0
     c10:	d100      	bne.n	c14 <udi_msc_cbw_received+0x4f0>
     c12:	e0de      	b.n	dd2 <udi_msc_cbw_received+0x6ae>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
     c14:	2b22      	cmp	r3, #34	; 0x22
     c16:	d100      	bne.n	c1a <udi_msc_cbw_received+0x4f6>
     c18:	e0d8      	b.n	dcc <udi_msc_cbw_received+0x6a8>
		if ((0 == udi_msc_inquiry_data.product_id[i])
     c1a:	7fab      	ldrb	r3, [r5, #30]
     c1c:	2b00      	cmp	r3, #0
     c1e:	d03e      	beq.n	c9e <udi_msc_cbw_received+0x57a>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
     c20:	2b22      	cmp	r3, #34	; 0x22
     c22:	d100      	bne.n	c26 <udi_msc_cbw_received+0x502>
     c24:	e0cf      	b.n	dc6 <udi_msc_cbw_received+0x6a2>
		if ((0 == udi_msc_inquiry_data.product_id[i])
     c26:	7feb      	ldrb	r3, [r5, #31]
     c28:	2b00      	cmp	r3, #0
     c2a:	d100      	bne.n	c2e <udi_msc_cbw_received+0x50a>
     c2c:	e0c9      	b.n	dc2 <udi_msc_cbw_received+0x69e>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
     c2e:	2b22      	cmp	r3, #34	; 0x22
     c30:	d100      	bne.n	c34 <udi_msc_cbw_received+0x510>
     c32:	e0c3      	b.n	dbc <udi_msc_cbw_received+0x698>
	udi_msc_data_send((uint8_t *) & udi_msc_inquiry_data, length);
     c34:	0039      	movs	r1, r7
     c36:	0028      	movs	r0, r5
     c38:	4b7a      	ldr	r3, [pc, #488]	; (e24 <udi_msc_cbw_received+0x700>)
     c3a:	4798      	blx	r3
     c3c:	e588      	b.n	750 <udi_msc_cbw_received+0x2c>
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
     c3e:	4e72      	ldr	r6, [pc, #456]	; (e08 <udi_msc_cbw_received+0x6e4>)
     c40:	4b72      	ldr	r3, [pc, #456]	; (e0c <udi_msc_cbw_received+0x6e8>)
     c42:	2212      	movs	r2, #18
     c44:	2100      	movs	r1, #0
     c46:	0030      	movs	r0, r6
     c48:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     c4a:	23f0      	movs	r3, #240	; 0xf0
     c4c:	7033      	strb	r3, [r6, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
     c4e:	3be6      	subs	r3, #230	; 0xe6
     c50:	71f3      	strb	r3, [r6, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
     c52:	3b09      	subs	r3, #9
     c54:	732b      	strb	r3, [r5, #12]
	udi_msc_sense.sense_flag_key = sense_key;
     c56:	3304      	adds	r3, #4
     c58:	70b3      	strb	r3, [r6, #2]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
     c5a:	331f      	adds	r3, #31
     c5c:	7333      	strb	r3, [r6, #12]
	if (0 != udi_msc_csw.dCSWDataResidue) {
     c5e:	68ab      	ldr	r3, [r5, #8]
     c60:	2b00      	cmp	r3, #0
     c62:	d000      	beq.n	c66 <udi_msc_cbw_received+0x542>
     c64:	e695      	b.n	992 <udi_msc_cbw_received+0x26e>
     c66:	e5b4      	b.n	7d2 <udi_msc_cbw_received+0xae>
	udi_msc_capacity.block_len = CPU_TO_BE32(UDI_MSC_BLOCK_SIZE);
     c68:	2380      	movs	r3, #128	; 0x80
     c6a:	029b      	lsls	r3, r3, #10
     c6c:	6063      	str	r3, [r4, #4]
	udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
     c6e:	6823      	ldr	r3, [r4, #0]
	udi_msc_data_send((uint8_t *) & udi_msc_capacity,
     c70:	2108      	movs	r1, #8
	udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
     c72:	ba1b      	rev	r3, r3
     c74:	6023      	str	r3, [r4, #0]
	udi_msc_data_send((uint8_t *) & udi_msc_capacity,
     c76:	0020      	movs	r0, r4
     c78:	4b6a      	ldr	r3, [pc, #424]	; (e24 <udi_msc_cbw_received+0x700>)
     c7a:	4798      	blx	r3
     c7c:	e568      	b.n	750 <udi_msc_cbw_received+0x2c>
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
     c7e:	21a0      	movs	r1, #160	; 0xa0
     c80:	2006      	movs	r0, #6
     c82:	0189      	lsls	r1, r1, #6
     c84:	4b5f      	ldr	r3, [pc, #380]	; (e04 <udi_msc_cbw_received+0x6e0>)
     c86:	4798      	blx	r3
		udi_msc_csw_process();
     c88:	4b61      	ldr	r3, [pc, #388]	; (e10 <udi_msc_cbw_received+0x6ec>)
     c8a:	4798      	blx	r3
     c8c:	e560      	b.n	750 <udi_msc_cbw_received+0x2c>
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
     c8e:	21e8      	movs	r1, #232	; 0xe8
     c90:	2002      	movs	r0, #2
     c92:	0189      	lsls	r1, r1, #6
     c94:	4b5b      	ldr	r3, [pc, #364]	; (e04 <udi_msc_cbw_received+0x6e0>)
     c96:	4798      	blx	r3
		udi_msc_csw_process();
     c98:	4b5d      	ldr	r3, [pc, #372]	; (e10 <udi_msc_cbw_received+0x6ec>)
     c9a:	4798      	blx	r3
     c9c:	e558      	b.n	750 <udi_msc_cbw_received+0x2c>
		i++;
     c9e:	230e      	movs	r3, #14
		udi_msc_inquiry_data.product_id[i] = ' ';
     ca0:	2220      	movs	r2, #32
     ca2:	18e9      	adds	r1, r5, r3
     ca4:	740a      	strb	r2, [r1, #16]
		i++;
     ca6:	1c59      	adds	r1, r3, #1
     ca8:	b2c9      	uxtb	r1, r1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
     caa:	2910      	cmp	r1, #16
     cac:	d0c2      	beq.n	c34 <udi_msc_cbw_received+0x510>
		udi_msc_inquiry_data.product_id[i] = ' ';
     cae:	1869      	adds	r1, r5, r1
     cb0:	740a      	strb	r2, [r1, #16]
		i++;
     cb2:	1c99      	adds	r1, r3, #2
     cb4:	b2c9      	uxtb	r1, r1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
     cb6:	2910      	cmp	r1, #16
     cb8:	d0bc      	beq.n	c34 <udi_msc_cbw_received+0x510>
		udi_msc_inquiry_data.product_id[i] = ' ';
     cba:	1869      	adds	r1, r5, r1
     cbc:	740a      	strb	r2, [r1, #16]
		i++;
     cbe:	1cd9      	adds	r1, r3, #3
     cc0:	b2c9      	uxtb	r1, r1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
     cc2:	2910      	cmp	r1, #16
     cc4:	d0b6      	beq.n	c34 <udi_msc_cbw_received+0x510>
		udi_msc_inquiry_data.product_id[i] = ' ';
     cc6:	1869      	adds	r1, r5, r1
     cc8:	740a      	strb	r2, [r1, #16]
		i++;
     cca:	1d19      	adds	r1, r3, #4
     ccc:	b2c9      	uxtb	r1, r1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
     cce:	2910      	cmp	r1, #16
     cd0:	d0b0      	beq.n	c34 <udi_msc_cbw_received+0x510>
		udi_msc_inquiry_data.product_id[i] = ' ';
     cd2:	1869      	adds	r1, r5, r1
     cd4:	740a      	strb	r2, [r1, #16]
		i++;
     cd6:	1d59      	adds	r1, r3, #5
     cd8:	b2c9      	uxtb	r1, r1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
     cda:	2910      	cmp	r1, #16
     cdc:	d0aa      	beq.n	c34 <udi_msc_cbw_received+0x510>
		udi_msc_inquiry_data.product_id[i] = ' ';
     cde:	1869      	adds	r1, r5, r1
     ce0:	740a      	strb	r2, [r1, #16]
		i++;
     ce2:	1d99      	adds	r1, r3, #6
     ce4:	b2c9      	uxtb	r1, r1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
     ce6:	2910      	cmp	r1, #16
     ce8:	d0a4      	beq.n	c34 <udi_msc_cbw_received+0x510>
		udi_msc_inquiry_data.product_id[i] = ' ';
     cea:	1869      	adds	r1, r5, r1
     cec:	740a      	strb	r2, [r1, #16]
		i++;
     cee:	1dd9      	adds	r1, r3, #7
     cf0:	b2c9      	uxtb	r1, r1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
     cf2:	2910      	cmp	r1, #16
     cf4:	d09e      	beq.n	c34 <udi_msc_cbw_received+0x510>
		udi_msc_inquiry_data.product_id[i] = ' ';
     cf6:	1869      	adds	r1, r5, r1
     cf8:	740a      	strb	r2, [r1, #16]
		i++;
     cfa:	0019      	movs	r1, r3
     cfc:	3108      	adds	r1, #8
     cfe:	b2c9      	uxtb	r1, r1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
     d00:	2910      	cmp	r1, #16
     d02:	d097      	beq.n	c34 <udi_msc_cbw_received+0x510>
		udi_msc_inquiry_data.product_id[i] = ' ';
     d04:	1869      	adds	r1, r5, r1
     d06:	740a      	strb	r2, [r1, #16]
		i++;
     d08:	0019      	movs	r1, r3
     d0a:	3109      	adds	r1, #9
     d0c:	b2c9      	uxtb	r1, r1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
     d0e:	2910      	cmp	r1, #16
     d10:	d090      	beq.n	c34 <udi_msc_cbw_received+0x510>
		udi_msc_inquiry_data.product_id[i] = ' ';
     d12:	1869      	adds	r1, r5, r1
     d14:	740a      	strb	r2, [r1, #16]
		i++;
     d16:	001a      	movs	r2, r3
     d18:	320a      	adds	r2, #10
     d1a:	b2d2      	uxtb	r2, r2
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
     d1c:	2a10      	cmp	r2, #16
     d1e:	d089      	beq.n	c34 <udi_msc_cbw_received+0x510>
		udi_msc_inquiry_data.product_id[i] = ' ';
     d20:	18a9      	adds	r1, r5, r2
     d22:	2220      	movs	r2, #32
     d24:	740a      	strb	r2, [r1, #16]
		i++;
     d26:	0019      	movs	r1, r3
     d28:	310b      	adds	r1, #11
     d2a:	b2c9      	uxtb	r1, r1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
     d2c:	2910      	cmp	r1, #16
     d2e:	d081      	beq.n	c34 <udi_msc_cbw_received+0x510>
		udi_msc_inquiry_data.product_id[i] = ' ';
     d30:	1869      	adds	r1, r5, r1
     d32:	740a      	strb	r2, [r1, #16]
		i++;
     d34:	0019      	movs	r1, r3
     d36:	310c      	adds	r1, #12
     d38:	b2c9      	uxtb	r1, r1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
     d3a:	2910      	cmp	r1, #16
     d3c:	d100      	bne.n	d40 <udi_msc_cbw_received+0x61c>
     d3e:	e779      	b.n	c34 <udi_msc_cbw_received+0x510>
		udi_msc_inquiry_data.product_id[i] = ' ';
     d40:	1869      	adds	r1, r5, r1
     d42:	740a      	strb	r2, [r1, #16]
		i++;
     d44:	0019      	movs	r1, r3
     d46:	310d      	adds	r1, #13
     d48:	b2c9      	uxtb	r1, r1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
     d4a:	2910      	cmp	r1, #16
     d4c:	d100      	bne.n	d50 <udi_msc_cbw_received+0x62c>
     d4e:	e771      	b.n	c34 <udi_msc_cbw_received+0x510>
		udi_msc_inquiry_data.product_id[i] = ' ';
     d50:	1869      	adds	r1, r5, r1
     d52:	740a      	strb	r2, [r1, #16]
		i++;
     d54:	0019      	movs	r1, r3
     d56:	310e      	adds	r1, #14
     d58:	b2c9      	uxtb	r1, r1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
     d5a:	2910      	cmp	r1, #16
     d5c:	d100      	bne.n	d60 <udi_msc_cbw_received+0x63c>
     d5e:	e769      	b.n	c34 <udi_msc_cbw_received+0x510>
		udi_msc_inquiry_data.product_id[i] = ' ';
     d60:	1869      	adds	r1, r5, r1
     d62:	740a      	strb	r2, [r1, #16]
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
     d64:	2b01      	cmp	r3, #1
     d66:	d100      	bne.n	d6a <udi_msc_cbw_received+0x646>
     d68:	e764      	b.n	c34 <udi_msc_cbw_received+0x510>
		udi_msc_inquiry_data.product_id[i] = ' ';
     d6a:	77ea      	strb	r2, [r5, #31]
     d6c:	e762      	b.n	c34 <udi_msc_cbw_received+0x510>
		i++;
     d6e:	230b      	movs	r3, #11
     d70:	4698      	mov	r8, r3
	udi_msc_inquiry_data.flags1 = mem_removal(udi_msc_cbw.bCBWLUN) ?
     d72:	4643      	mov	r3, r8
     d74:	e794      	b.n	ca0 <udi_msc_cbw_received+0x57c>
		i++;
     d76:	2301      	movs	r3, #1
     d78:	4698      	mov	r8, r3
     d7a:	e7fa      	b.n	d72 <udi_msc_cbw_received+0x64e>
     d7c:	2301      	movs	r3, #1
     d7e:	e78f      	b.n	ca0 <udi_msc_cbw_received+0x57c>
     d80:	2303      	movs	r3, #3
     d82:	4698      	mov	r8, r3
     d84:	e7f5      	b.n	d72 <udi_msc_cbw_received+0x64e>
     d86:	2303      	movs	r3, #3
     d88:	e78a      	b.n	ca0 <udi_msc_cbw_received+0x57c>
     d8a:	2302      	movs	r3, #2
     d8c:	4698      	mov	r8, r3
     d8e:	e7f0      	b.n	d72 <udi_msc_cbw_received+0x64e>
     d90:	2302      	movs	r3, #2
     d92:	e785      	b.n	ca0 <udi_msc_cbw_received+0x57c>
     d94:	2307      	movs	r3, #7
     d96:	4698      	mov	r8, r3
     d98:	e7eb      	b.n	d72 <udi_msc_cbw_received+0x64e>
     d9a:	2307      	movs	r3, #7
     d9c:	e780      	b.n	ca0 <udi_msc_cbw_received+0x57c>
     d9e:	2306      	movs	r3, #6
     da0:	4698      	mov	r8, r3
     da2:	e7e6      	b.n	d72 <udi_msc_cbw_received+0x64e>
     da4:	2306      	movs	r3, #6
     da6:	e77b      	b.n	ca0 <udi_msc_cbw_received+0x57c>
     da8:	2305      	movs	r3, #5
     daa:	4698      	mov	r8, r3
     dac:	e7e1      	b.n	d72 <udi_msc_cbw_received+0x64e>
     dae:	2305      	movs	r3, #5
     db0:	e776      	b.n	ca0 <udi_msc_cbw_received+0x57c>
     db2:	2304      	movs	r3, #4
     db4:	4698      	mov	r8, r3
     db6:	e7dc      	b.n	d72 <udi_msc_cbw_received+0x64e>
     db8:	2304      	movs	r3, #4
     dba:	e771      	b.n	ca0 <udi_msc_cbw_received+0x57c>
     dbc:	230f      	movs	r3, #15
     dbe:	4698      	mov	r8, r3
     dc0:	e7d7      	b.n	d72 <udi_msc_cbw_received+0x64e>
     dc2:	230f      	movs	r3, #15
     dc4:	e76c      	b.n	ca0 <udi_msc_cbw_received+0x57c>
     dc6:	230e      	movs	r3, #14
     dc8:	4698      	mov	r8, r3
     dca:	e7d2      	b.n	d72 <udi_msc_cbw_received+0x64e>
     dcc:	230d      	movs	r3, #13
     dce:	4698      	mov	r8, r3
     dd0:	e7cf      	b.n	d72 <udi_msc_cbw_received+0x64e>
     dd2:	230d      	movs	r3, #13
     dd4:	e764      	b.n	ca0 <udi_msc_cbw_received+0x57c>
     dd6:	230c      	movs	r3, #12
     dd8:	4698      	mov	r8, r3
     dda:	e7ca      	b.n	d72 <udi_msc_cbw_received+0x64e>
     ddc:	230c      	movs	r3, #12
     dde:	e75f      	b.n	ca0 <udi_msc_cbw_received+0x57c>
     de0:	230b      	movs	r3, #11
     de2:	e75d      	b.n	ca0 <udi_msc_cbw_received+0x57c>
     de4:	230a      	movs	r3, #10
     de6:	4698      	mov	r8, r3
     de8:	e7c3      	b.n	d72 <udi_msc_cbw_received+0x64e>
     dea:	230a      	movs	r3, #10
     dec:	e758      	b.n	ca0 <udi_msc_cbw_received+0x57c>
     dee:	2309      	movs	r3, #9
     df0:	4698      	mov	r8, r3
     df2:	e7be      	b.n	d72 <udi_msc_cbw_received+0x64e>
     df4:	2309      	movs	r3, #9
     df6:	e753      	b.n	ca0 <udi_msc_cbw_received+0x57c>
     df8:	2308      	movs	r3, #8
     dfa:	4698      	mov	r8, r3
     dfc:	e7b9      	b.n	d72 <udi_msc_cbw_received+0x64e>
     dfe:	2308      	movs	r3, #8
     e00:	e74e      	b.n	ca0 <udi_msc_cbw_received+0x57c>
     e02:	46c0      	nop			; (mov r8, r8)
     e04:	000001d1 	.word	0x000001d1
     e08:	20000da0 	.word	0x20000da0
     e0c:	0001f06d 	.word	0x0001f06d
     e10:	00000261 	.word	0x00000261
     e14:	0000aec9 	.word	0x0000aec9
     e18:	20000028 	.word	0x20000028
     e1c:	0000aedd 	.word	0x0000aedd
     e20:	0001efe9 	.word	0x0001efe9
     e24:	000004d9 	.word	0x000004d9

00000e28 <udi_msc_process_trans>:
{
     e28:	b5f0      	push	{r4, r5, r6, r7, lr}
     e2a:	46c6      	mov	lr, r8
     e2c:	b500      	push	{lr}
	if (!udi_msc_b_trans_req)
     e2e:	4b4b      	ldr	r3, [pc, #300]	; (f5c <udi_msc_process_trans+0x134>)
{
     e30:	b082      	sub	sp, #8
	if (!udi_msc_b_trans_req)
     e32:	781c      	ldrb	r4, [r3, #0]
     e34:	2c00      	cmp	r4, #0
     e36:	d03f      	beq.n	eb8 <udi_msc_process_trans+0x90>
	udi_msc_b_trans_req = false;
     e38:	2200      	movs	r2, #0
     e3a:	701a      	strb	r2, [r3, #0]
	if (udi_msc_b_read) {
     e3c:	4b48      	ldr	r3, [pc, #288]	; (f60 <udi_msc_process_trans+0x138>)
	udi_msc_b_reset_trans = false;
     e3e:	4d49      	ldr	r5, [pc, #292]	; (f64 <udi_msc_process_trans+0x13c>)
	if (udi_msc_b_read) {
     e40:	781b      	ldrb	r3, [r3, #0]
	udi_msc_b_reset_trans = false;
     e42:	702a      	strb	r2, [r5, #0]
	if (udi_msc_b_read) {
     e44:	2b00      	cmp	r3, #0
     e46:	d13c      	bne.n	ec2 <udi_msc_process_trans+0x9a>
		status = usb_2_memory(udi_msc_cbw.bCBWLUN, udi_msc_addr,
     e48:	4b47      	ldr	r3, [pc, #284]	; (f68 <udi_msc_process_trans+0x140>)
     e4a:	4e48      	ldr	r6, [pc, #288]	; (f6c <udi_msc_process_trans+0x144>)
     e4c:	881a      	ldrh	r2, [r3, #0]
     e4e:	4b48      	ldr	r3, [pc, #288]	; (f70 <udi_msc_process_trans+0x148>)
     e50:	7b70      	ldrb	r0, [r6, #13]
     e52:	6819      	ldr	r1, [r3, #0]
     e54:	4b47      	ldr	r3, [pc, #284]	; (f74 <udi_msc_process_trans+0x14c>)
     e56:	4798      	blx	r3
	if (udi_msc_b_reset_trans) {
     e58:	782b      	ldrb	r3, [r5, #0]
		status = usb_2_memory(udi_msc_cbw.bCBWLUN, udi_msc_addr,
     e5a:	0007      	movs	r7, r0
	if (udi_msc_b_reset_trans) {
     e5c:	b2db      	uxtb	r3, r3
     e5e:	2b00      	cmp	r3, #0
     e60:	d13c      	bne.n	edc <udi_msc_process_trans+0xb4>
	switch (status) {
     e62:	2f02      	cmp	r7, #2
     e64:	d062      	beq.n	f2c <udi_msc_process_trans+0x104>
     e66:	2f03      	cmp	r7, #3
     e68:	d03c      	beq.n	ee4 <udi_msc_process_trans+0xbc>
     e6a:	2f00      	cmp	r7, #0
     e6c:	d051      	beq.n	f12 <udi_msc_process_trans+0xea>
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
     e6e:	4f42      	ldr	r7, [pc, #264]	; (f78 <udi_msc_process_trans+0x150>)
     e70:	4b42      	ldr	r3, [pc, #264]	; (f7c <udi_msc_process_trans+0x154>)
     e72:	2212      	movs	r2, #18
     e74:	2100      	movs	r1, #0
     e76:	0038      	movs	r0, r7
     e78:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     e7a:	23f0      	movs	r3, #240	; 0xf0
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
     e7c:	4d40      	ldr	r5, [pc, #256]	; (f80 <udi_msc_process_trans+0x158>)
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     e7e:	703b      	strb	r3, [r7, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
     e80:	3be6      	subs	r3, #230	; 0xe6
     e82:	71fb      	strb	r3, [r7, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
     e84:	3b09      	subs	r3, #9
     e86:	732b      	strb	r3, [r5, #12]
	udi_msc_sense.sense_flag_key = sense_key;
     e88:	3303      	adds	r3, #3
     e8a:	70bb      	strb	r3, [r7, #2]
	if (0 != udi_msc_csw.dCSWDataResidue) {
     e8c:	68ab      	ldr	r3, [r5, #8]
     e8e:	2b00      	cmp	r3, #0
     e90:	d005      	beq.n	e9e <udi_msc_process_trans+0x76>
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
     e92:	7b33      	ldrb	r3, [r6, #12]
     e94:	2b7f      	cmp	r3, #127	; 0x7f
     e96:	d85c      	bhi.n	f52 <udi_msc_process_trans+0x12a>
			udd_ep_set_halt(UDI_MSC_EP_OUT);
     e98:	2002      	movs	r0, #2
     e9a:	4b3a      	ldr	r3, [pc, #232]	; (f84 <udi_msc_process_trans+0x15c>)
     e9c:	4798      	blx	r3
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
     e9e:	6873      	ldr	r3, [r6, #4]
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
     ea0:	002a      	movs	r2, r5
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
     ea2:	606b      	str	r3, [r5, #4]
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
     ea4:	4b38      	ldr	r3, [pc, #224]	; (f88 <udi_msc_process_trans+0x160>)
     ea6:	2100      	movs	r1, #0
     ea8:	9300      	str	r3, [sp, #0]
     eaa:	2081      	movs	r0, #129	; 0x81
     eac:	230d      	movs	r3, #13
     eae:	4d37      	ldr	r5, [pc, #220]	; (f8c <udi_msc_process_trans+0x164>)
     eb0:	47a8      	blx	r5
     eb2:	2800      	cmp	r0, #0
     eb4:	d028      	beq.n	f08 <udi_msc_process_trans+0xe0>
	return true;
     eb6:	0004      	movs	r4, r0
}
     eb8:	0020      	movs	r0, r4
     eba:	b002      	add	sp, #8
     ebc:	bc04      	pop	{r2}
     ebe:	4690      	mov	r8, r2
     ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		status = memory_2_usb(udi_msc_cbw.bCBWLUN, udi_msc_addr,
     ec2:	4b29      	ldr	r3, [pc, #164]	; (f68 <udi_msc_process_trans+0x140>)
     ec4:	4e29      	ldr	r6, [pc, #164]	; (f6c <udi_msc_process_trans+0x144>)
     ec6:	881a      	ldrh	r2, [r3, #0]
     ec8:	4b29      	ldr	r3, [pc, #164]	; (f70 <udi_msc_process_trans+0x148>)
     eca:	7b70      	ldrb	r0, [r6, #13]
     ecc:	6819      	ldr	r1, [r3, #0]
     ece:	4b30      	ldr	r3, [pc, #192]	; (f90 <udi_msc_process_trans+0x168>)
     ed0:	4798      	blx	r3
	if (udi_msc_b_reset_trans) {
     ed2:	782b      	ldrb	r3, [r5, #0]
		status = memory_2_usb(udi_msc_cbw.bCBWLUN, udi_msc_addr,
     ed4:	0007      	movs	r7, r0
	if (udi_msc_b_reset_trans) {
     ed6:	b2db      	uxtb	r3, r3
     ed8:	2b00      	cmp	r3, #0
     eda:	d0c2      	beq.n	e62 <udi_msc_process_trans+0x3a>
		udi_msc_b_reset_trans = false;
     edc:	2200      	movs	r2, #0
		return true;
     ede:	001c      	movs	r4, r3
		udi_msc_b_reset_trans = false;
     ee0:	702a      	strb	r2, [r5, #0]
		return true;
     ee2:	e7e9      	b.n	eb8 <udi_msc_process_trans+0x90>
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
     ee4:	4f24      	ldr	r7, [pc, #144]	; (f78 <udi_msc_process_trans+0x150>)
     ee6:	4b25      	ldr	r3, [pc, #148]	; (f7c <udi_msc_process_trans+0x154>)
     ee8:	2212      	movs	r2, #18
     eea:	2100      	movs	r1, #0
     eec:	0038      	movs	r0, r7
     eee:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     ef0:	23f0      	movs	r3, #240	; 0xf0
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
     ef2:	4d23      	ldr	r5, [pc, #140]	; (f80 <udi_msc_process_trans+0x158>)
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     ef4:	703b      	strb	r3, [r7, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
     ef6:	3be6      	subs	r3, #230	; 0xe6
     ef8:	71fb      	strb	r3, [r7, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
     efa:	3b09      	subs	r3, #9
     efc:	732b      	strb	r3, [r5, #12]
	udi_msc_sense.sense_flag_key = sense_key;
     efe:	3305      	adds	r3, #5
     f00:	70bb      	strb	r3, [r7, #2]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
     f02:	3322      	adds	r3, #34	; 0x22
     f04:	733b      	strb	r3, [r7, #12]
     f06:	e7c1      	b.n	e8c <udi_msc_process_trans+0x64>
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
     f08:	4922      	ldr	r1, [pc, #136]	; (f94 <udi_msc_process_trans+0x16c>)
     f0a:	4b23      	ldr	r3, [pc, #140]	; (f98 <udi_msc_process_trans+0x170>)
     f0c:	3081      	adds	r0, #129	; 0x81
     f0e:	4798      	blx	r3
     f10:	e7d2      	b.n	eb8 <udi_msc_process_trans+0x90>
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
     f12:	4d19      	ldr	r5, [pc, #100]	; (f78 <udi_msc_process_trans+0x150>)
     f14:	4b19      	ldr	r3, [pc, #100]	; (f7c <udi_msc_process_trans+0x154>)
     f16:	0028      	movs	r0, r5
     f18:	2212      	movs	r2, #18
     f1a:	2100      	movs	r1, #0
     f1c:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     f1e:	23f0      	movs	r3, #240	; 0xf0
     f20:	702b      	strb	r3, [r5, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
     f22:	3be6      	subs	r3, #230	; 0xe6
     f24:	71eb      	strb	r3, [r5, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
     f26:	4d16      	ldr	r5, [pc, #88]	; (f80 <udi_msc_process_trans+0x158>)
     f28:	732f      	strb	r7, [r5, #12]
     f2a:	e7af      	b.n	e8c <udi_msc_process_trans+0x64>
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
     f2c:	4b12      	ldr	r3, [pc, #72]	; (f78 <udi_msc_process_trans+0x150>)
     f2e:	2212      	movs	r2, #18
     f30:	4698      	mov	r8, r3
     f32:	0018      	movs	r0, r3
     f34:	2100      	movs	r1, #0
     f36:	4b11      	ldr	r3, [pc, #68]	; (f7c <udi_msc_process_trans+0x154>)
     f38:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     f3a:	4642      	mov	r2, r8
     f3c:	23f0      	movs	r3, #240	; 0xf0
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
     f3e:	4d10      	ldr	r5, [pc, #64]	; (f80 <udi_msc_process_trans+0x158>)
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     f40:	7013      	strb	r3, [r2, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
     f42:	3be6      	subs	r3, #230	; 0xe6
     f44:	71d3      	strb	r3, [r2, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
     f46:	3b09      	subs	r3, #9
     f48:	732b      	strb	r3, [r5, #12]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
     f4a:	233a      	movs	r3, #58	; 0x3a
	udi_msc_sense.sense_flag_key = sense_key;
     f4c:	7097      	strb	r7, [r2, #2]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
     f4e:	7313      	strb	r3, [r2, #12]
     f50:	e79c      	b.n	e8c <udi_msc_process_trans+0x64>
			udd_ep_set_halt(UDI_MSC_EP_IN);
     f52:	4b0c      	ldr	r3, [pc, #48]	; (f84 <udi_msc_process_trans+0x15c>)
     f54:	2081      	movs	r0, #129	; 0x81
     f56:	4798      	blx	r3
     f58:	e7a1      	b.n	e9e <udi_msc_process_trans+0x76>
     f5a:	46c0      	nop			; (mov r8, r8)
     f5c:	20000d6e 	.word	0x20000d6e
     f60:	20000d6d 	.word	0x20000d6d
     f64:	20000015 	.word	0x20000015
     f68:	20000d98 	.word	0x20000d98
     f6c:	20000d78 	.word	0x20000d78
     f70:	20000d68 	.word	0x20000d68
     f74:	0000af09 	.word	0x0000af09
     f78:	20000da0 	.word	0x20000da0
     f7c:	0001f06d 	.word	0x0001f06d
     f80:	20000018 	.word	0x20000018
     f84:	000024b1 	.word	0x000024b1
     f88:	000002c5 	.word	0x000002c5
     f8c:	00002609 	.word	0x00002609
     f90:	0000aeed 	.word	0x0000aeed
     f94:	00000199 	.word	0x00000199
     f98:	0000257d 	.word	0x0000257d

00000f9c <udi_msc_trans_block>:


bool udi_msc_trans_block(bool b_read, uint8_t * block, iram_size_t block_size,
		void (*callback) (udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep))
{
     f9c:	b570      	push	{r4, r5, r6, lr}
	if (!udi_msc_b_ack_trans)
     f9e:	4c1d      	ldr	r4, [pc, #116]	; (1014 <udi_msc_trans_block+0x78>)
{
     fa0:	0015      	movs	r5, r2
	if (!udi_msc_b_ack_trans)
     fa2:	7822      	ldrb	r2, [r4, #0]
{
     fa4:	b082      	sub	sp, #8
	if (!udi_msc_b_ack_trans)
     fa6:	2a00      	cmp	r2, #0
     fa8:	d016      	beq.n	fd8 <udi_msc_trans_block+0x3c>
		return false;	// No possible, transfer on going

	// Start transfer Internal RAM<->USB line
	udi_msc_b_ack_trans = false;
     faa:	2200      	movs	r2, #0
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
     fac:	2602      	movs	r6, #2
	udi_msc_b_ack_trans = false;
     fae:	7022      	strb	r2, [r4, #0]
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
     fb0:	2800      	cmp	r0, #0
     fb2:	d114      	bne.n	fde <udi_msc_trans_block+0x42>
     fb4:	2b00      	cmp	r3, #0
     fb6:	d014      	beq.n	fe2 <udi_msc_trans_block+0x46>
     fb8:	9300      	str	r3, [sp, #0]
     fba:	000a      	movs	r2, r1
     fbc:	0030      	movs	r0, r6
     fbe:	002b      	movs	r3, r5
     fc0:	2100      	movs	r1, #0
     fc2:	4e15      	ldr	r6, [pc, #84]	; (1018 <udi_msc_trans_block+0x7c>)
     fc4:	47b0      	blx	r6
     fc6:	2800      	cmp	r0, #0
     fc8:	d004      	beq.n	fd4 <udi_msc_trans_block+0x38>
			return false;
		}
		udi_msc_csw.dCSWDataResidue -= block_size;
		return (!udi_msc_b_abort_trans);
	}
	udi_msc_csw.dCSWDataResidue -= block_size;
     fca:	4b14      	ldr	r3, [pc, #80]	; (101c <udi_msc_trans_block+0x80>)
     fcc:	689a      	ldr	r2, [r3, #8]
     fce:	1b55      	subs	r5, r2, r5
     fd0:	609d      	str	r5, [r3, #8]
	return true;
     fd2:	e002      	b.n	fda <udi_msc_trans_block+0x3e>
		udi_msc_b_ack_trans = true;
     fd4:	2301      	movs	r3, #1
     fd6:	7023      	strb	r3, [r4, #0]
		return false;
     fd8:	2000      	movs	r0, #0
}
     fda:	b002      	add	sp, #8
     fdc:	bd70      	pop	{r4, r5, r6, pc}
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
     fde:	367f      	adds	r6, #127	; 0x7f
     fe0:	e7e8      	b.n	fb4 <udi_msc_trans_block+0x18>
     fe2:	4b0f      	ldr	r3, [pc, #60]	; (1020 <udi_msc_trans_block+0x84>)
     fe4:	000a      	movs	r2, r1
     fe6:	9300      	str	r3, [sp, #0]
     fe8:	0030      	movs	r0, r6
     fea:	002b      	movs	r3, r5
     fec:	2100      	movs	r1, #0
     fee:	4e0a      	ldr	r6, [pc, #40]	; (1018 <udi_msc_trans_block+0x7c>)
     ff0:	47b0      	blx	r6
     ff2:	2800      	cmp	r0, #0
     ff4:	d0ee      	beq.n	fd4 <udi_msc_trans_block+0x38>
		while (!udi_msc_b_ack_trans);
     ff6:	7823      	ldrb	r3, [r4, #0]
     ff8:	2b00      	cmp	r3, #0
     ffa:	d0fc      	beq.n	ff6 <udi_msc_trans_block+0x5a>
		if (udi_msc_b_abort_trans) {
     ffc:	4b09      	ldr	r3, [pc, #36]	; (1024 <udi_msc_trans_block+0x88>)
     ffe:	781a      	ldrb	r2, [r3, #0]
    1000:	2a00      	cmp	r2, #0
    1002:	d1e9      	bne.n	fd8 <udi_msc_trans_block+0x3c>
		return (!udi_msc_b_abort_trans);
    1004:	7818      	ldrb	r0, [r3, #0]
    1006:	2301      	movs	r3, #1
		udi_msc_csw.dCSWDataResidue -= block_size;
    1008:	4a04      	ldr	r2, [pc, #16]	; (101c <udi_msc_trans_block+0x80>)
		return (!udi_msc_b_abort_trans);
    100a:	4058      	eors	r0, r3
		udi_msc_csw.dCSWDataResidue -= block_size;
    100c:	6891      	ldr	r1, [r2, #8]
    100e:	1b4d      	subs	r5, r1, r5
    1010:	6095      	str	r5, [r2, #8]
		return (!udi_msc_b_abort_trans);
    1012:	e7e2      	b.n	fda <udi_msc_trans_block+0x3e>
    1014:	20000014 	.word	0x20000014
    1018:	00002609 	.word	0x00002609
    101c:	20000018 	.word	0x20000018
    1020:	0000011d 	.word	0x0000011d
    1024:	20001254 	.word	0x20001254

00001028 <udc_valid_address>:
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    1028:	207f      	movs	r0, #127	; 0x7f
{
    102a:	b510      	push	{r4, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    102c:	4b02      	ldr	r3, [pc, #8]	; (1038 <udc_valid_address+0x10>)
    102e:	885b      	ldrh	r3, [r3, #2]
    1030:	4018      	ands	r0, r3
    1032:	4b02      	ldr	r3, [pc, #8]	; (103c <udc_valid_address+0x14>)
    1034:	4798      	blx	r3
}
    1036:	bd10      	pop	{r4, pc}
    1038:	20001440 	.word	0x20001440
    103c:	00002835 	.word	0x00002835

00001040 <udc_update_iface_desc.part.0>:
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
    1040:	b570      	push	{r4, r5, r6, lr}
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1042:	4b14      	ldr	r3, [pc, #80]	; (1094 <udc_update_iface_desc.part.0+0x54>)
    1044:	681b      	ldr	r3, [r3, #0]
    1046:	681b      	ldr	r3, [r3, #0]
    1048:	791a      	ldrb	r2, [r3, #4]
    104a:	4282      	cmp	r2, r0
    104c:	d91d      	bls.n	108a <udc_update_iface_desc.part.0+0x4a>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    104e:	4e12      	ldr	r6, [pc, #72]	; (1098 <udc_update_iface_desc.part.0+0x58>)
    1050:	6033      	str	r3, [r6, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    1052:	78dc      	ldrb	r4, [r3, #3]
    1054:	789a      	ldrb	r2, [r3, #2]
    1056:	0224      	lsls	r4, r4, #8
    1058:	4314      	orrs	r4, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    105a:	191c      	adds	r4, r3, r4
	while (ptr_end_desc >
    105c:	42a3      	cmp	r3, r4
    105e:	d214      	bcs.n	108a <udc_update_iface_desc.part.0+0x4a>
    1060:	2500      	movs	r5, #0
    1062:	e004      	b.n	106e <udc_update_iface_desc.part.0+0x2e>
				udc_ptr_iface->bLength);
    1064:	781a      	ldrb	r2, [r3, #0]
    1066:	2501      	movs	r5, #1
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    1068:	189b      	adds	r3, r3, r2
	while (ptr_end_desc >
    106a:	429c      	cmp	r4, r3
    106c:	d90c      	bls.n	1088 <udc_update_iface_desc.part.0+0x48>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    106e:	785a      	ldrb	r2, [r3, #1]
    1070:	2a04      	cmp	r2, #4
    1072:	d1f7      	bne.n	1064 <udc_update_iface_desc.part.0+0x24>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    1074:	789a      	ldrb	r2, [r3, #2]
    1076:	4282      	cmp	r2, r0
    1078:	d1f4      	bne.n	1064 <udc_update_iface_desc.part.0+0x24>
    107a:	78da      	ldrb	r2, [r3, #3]
    107c:	428a      	cmp	r2, r1
    107e:	d1f1      	bne.n	1064 <udc_update_iface_desc.part.0+0x24>
    1080:	2d00      	cmp	r5, #0
    1082:	d104      	bne.n	108e <udc_update_iface_desc.part.0+0x4e>
				return true; // Interface found
    1084:	2001      	movs	r0, #1
    1086:	e001      	b.n	108c <udc_update_iface_desc.part.0+0x4c>
    1088:	6033      	str	r3, [r6, #0]
		return false;
    108a:	2000      	movs	r0, #0
}
    108c:	bd70      	pop	{r4, r5, r6, pc}
    108e:	6033      	str	r3, [r6, #0]
				return true; // Interface found
    1090:	2001      	movs	r0, #1
    1092:	e7fb      	b.n	108c <udc_update_iface_desc.part.0+0x4c>
    1094:	20000dc0 	.word	0x20000dc0
    1098:	20000dc4 	.word	0x20000dc4

0000109c <udc_iface_disable.part.1>:
static bool udc_iface_disable(uint8_t iface_num)
    109c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    109e:	4d27      	ldr	r5, [pc, #156]	; (113c <udc_iface_disable.part.1+0xa0>)
    10a0:	0082      	lsls	r2, r0, #2
    10a2:	682b      	ldr	r3, [r5, #0]
static bool udc_iface_disable(uint8_t iface_num)
    10a4:	0007      	movs	r7, r0
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    10a6:	685b      	ldr	r3, [r3, #4]
    10a8:	58d6      	ldr	r6, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    10aa:	68f3      	ldr	r3, [r6, #12]
    10ac:	4798      	blx	r3
	if (0 == udc_num_configuration) {
    10ae:	4b24      	ldr	r3, [pc, #144]	; (1140 <udc_iface_disable.part.1+0xa4>)
    10b0:	781b      	ldrb	r3, [r3, #0]
    10b2:	2b00      	cmp	r3, #0
    10b4:	d101      	bne.n	10ba <udc_iface_disable.part.1+0x1e>
		return false;
    10b6:	2000      	movs	r0, #0
}
    10b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    10ba:	682b      	ldr	r3, [r5, #0]
    10bc:	681b      	ldr	r3, [r3, #0]
    10be:	791a      	ldrb	r2, [r3, #4]
    10c0:	42ba      	cmp	r2, r7
    10c2:	d9f8      	bls.n	10b6 <udc_iface_disable.part.1+0x1a>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    10c4:	4a1f      	ldr	r2, [pc, #124]	; (1144 <udc_iface_disable.part.1+0xa8>)
    10c6:	6013      	str	r3, [r2, #0]
    10c8:	4694      	mov	ip, r2
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    10ca:	78da      	ldrb	r2, [r3, #3]
    10cc:	789c      	ldrb	r4, [r3, #2]
    10ce:	0212      	lsls	r2, r2, #8
    10d0:	4322      	orrs	r2, r4
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    10d2:	189a      	adds	r2, r3, r2
	while (ptr_end_desc >
    10d4:	4293      	cmp	r3, r2
    10d6:	d2ee      	bcs.n	10b6 <udc_iface_disable.part.1+0x1a>
    10d8:	001c      	movs	r4, r3
    10da:	2100      	movs	r1, #0
    10dc:	e004      	b.n	10e8 <udc_iface_disable.part.1+0x4c>
				udc_ptr_iface->bLength);
    10de:	7823      	ldrb	r3, [r4, #0]
    10e0:	2101      	movs	r1, #1
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    10e2:	18e4      	adds	r4, r4, r3
	while (ptr_end_desc >
    10e4:	42a2      	cmp	r2, r4
    10e6:	d919      	bls.n	111c <udc_iface_disable.part.1+0x80>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    10e8:	7863      	ldrb	r3, [r4, #1]
    10ea:	2b04      	cmp	r3, #4
    10ec:	d1f7      	bne.n	10de <udc_iface_disable.part.1+0x42>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    10ee:	78a3      	ldrb	r3, [r4, #2]
    10f0:	42bb      	cmp	r3, r7
    10f2:	d1f4      	bne.n	10de <udc_iface_disable.part.1+0x42>
    10f4:	78e3      	ldrb	r3, [r4, #3]
    10f6:	4283      	cmp	r3, r0
    10f8:	d1f1      	bne.n	10de <udc_iface_disable.part.1+0x42>
    10fa:	2900      	cmp	r1, #0
    10fc:	d11b      	bne.n	1136 <udc_iface_disable.part.1+0x9a>
			udd_ep_free(ep_desc->bEndpointAddress);
    10fe:	4f12      	ldr	r7, [pc, #72]	; (1148 <udc_iface_disable.part.1+0xac>)
    1100:	e004      	b.n	110c <udc_iface_disable.part.1+0x70>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    1102:	7863      	ldrb	r3, [r4, #1]
    1104:	2b04      	cmp	r3, #4
    1106:	d005      	beq.n	1114 <udc_iface_disable.part.1+0x78>
		if (desc_id == desc->bDescriptorType) {
    1108:	2b05      	cmp	r3, #5
    110a:	d00a      	beq.n	1122 <udc_iface_disable.part.1+0x86>
			desc->bLength);
    110c:	7823      	ldrb	r3, [r4, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    110e:	18e4      	adds	r4, r4, r3
	while (ptr_eof_desc > desc) {
    1110:	42a2      	cmp	r2, r4
    1112:	d8f6      	bhi.n	1102 <udc_iface_disable.part.1+0x66>
	udi_api->disable();
    1114:	6873      	ldr	r3, [r6, #4]
    1116:	4798      	blx	r3
	return true;
    1118:	2001      	movs	r0, #1
    111a:	e7cd      	b.n	10b8 <udc_iface_disable.part.1+0x1c>
    111c:	4663      	mov	r3, ip
    111e:	601c      	str	r4, [r3, #0]
    1120:	e7c9      	b.n	10b6 <udc_iface_disable.part.1+0x1a>
			udd_ep_free(ep_desc->bEndpointAddress);
    1122:	78a0      	ldrb	r0, [r4, #2]
    1124:	47b8      	blx	r7
    1126:	682b      	ldr	r3, [r5, #0]
    1128:	681b      	ldr	r3, [r3, #0]
    112a:	78da      	ldrb	r2, [r3, #3]
    112c:	7899      	ldrb	r1, [r3, #2]
    112e:	0212      	lsls	r2, r2, #8
    1130:	430a      	orrs	r2, r1
    1132:	189a      	adds	r2, r3, r2
    1134:	e7ea      	b.n	110c <udc_iface_disable.part.1+0x70>
    1136:	4663      	mov	r3, ip
    1138:	601c      	str	r4, [r3, #0]
    113a:	e7e0      	b.n	10fe <udc_iface_disable.part.1+0x62>
    113c:	20000dc0 	.word	0x20000dc0
    1140:	20000dbc 	.word	0x20000dbc
    1144:	20000dc4 	.word	0x20000dc4
    1148:	000022dd 	.word	0x000022dd

0000114c <udc_start>:
{
    114c:	b510      	push	{r4, lr}
	udd_enable();
    114e:	4b01      	ldr	r3, [pc, #4]	; (1154 <udc_start+0x8>)
    1150:	4798      	blx	r3
}
    1152:	bd10      	pop	{r4, pc}
    1154:	00002971 	.word	0x00002971

00001158 <udc_stop>:
{
    1158:	b5f0      	push	{r4, r5, r6, r7, lr}
    115a:	46c6      	mov	lr, r8
	udd_disable();
    115c:	4b26      	ldr	r3, [pc, #152]	; (11f8 <udc_stop+0xa0>)
{
    115e:	b500      	push	{lr}
	udd_disable();
    1160:	4798      	blx	r3
	if (udc_num_configuration) {
    1162:	4d26      	ldr	r5, [pc, #152]	; (11fc <udc_stop+0xa4>)
    1164:	782a      	ldrb	r2, [r5, #0]
    1166:	2a00      	cmp	r2, #0
    1168:	d035      	beq.n	11d6 <udc_stop+0x7e>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    116a:	4e25      	ldr	r6, [pc, #148]	; (1200 <udc_stop+0xa8>)
    116c:	6833      	ldr	r3, [r6, #0]
    116e:	681b      	ldr	r3, [r3, #0]
    1170:	7919      	ldrb	r1, [r3, #4]
		for (iface_num = 0;
    1172:	2900      	cmp	r1, #0
    1174:	d02f      	beq.n	11d6 <udc_stop+0x7e>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    1176:	4823      	ldr	r0, [pc, #140]	; (1204 <udc_stop+0xac>)
		for (iface_num = 0;
    1178:	2400      	movs	r4, #0
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    117a:	4680      	mov	r8, r0
    117c:	4f22      	ldr	r7, [pc, #136]	; (1208 <udc_stop+0xb0>)
    117e:	e004      	b.n	118a <udc_stop+0x32>
				iface_num++) {
    1180:	3401      	adds	r4, #1
    1182:	b2e4      	uxtb	r4, r4
		for (iface_num = 0;
    1184:	428c      	cmp	r4, r1
    1186:	d226      	bcs.n	11d6 <udc_stop+0x7e>
    1188:	782a      	ldrb	r2, [r5, #0]
	if (0 == udc_num_configuration) {
    118a:	2a00      	cmp	r2, #0
    118c:	d0f8      	beq.n	1180 <udc_stop+0x28>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    118e:	4642      	mov	r2, r8
    1190:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    1192:	78d9      	ldrb	r1, [r3, #3]
    1194:	789a      	ldrb	r2, [r3, #2]
    1196:	0209      	lsls	r1, r1, #8
    1198:	4311      	orrs	r1, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    119a:	1859      	adds	r1, r3, r1
	while (ptr_end_desc >
    119c:	2000      	movs	r0, #0
    119e:	428b      	cmp	r3, r1
    11a0:	d305      	bcc.n	11ae <udc_stop+0x56>
    11a2:	e022      	b.n	11ea <udc_stop+0x92>
				udc_ptr_iface->bLength);
    11a4:	781a      	ldrb	r2, [r3, #0]
    11a6:	2001      	movs	r0, #1
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    11a8:	189b      	adds	r3, r3, r2
	while (ptr_end_desc >
    11aa:	4299      	cmp	r1, r3
    11ac:	d91b      	bls.n	11e6 <udc_stop+0x8e>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    11ae:	785a      	ldrb	r2, [r3, #1]
    11b0:	2a04      	cmp	r2, #4
    11b2:	d1f7      	bne.n	11a4 <udc_stop+0x4c>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    11b4:	789a      	ldrb	r2, [r3, #2]
    11b6:	42a2      	cmp	r2, r4
    11b8:	d1f4      	bne.n	11a4 <udc_stop+0x4c>
    11ba:	78da      	ldrb	r2, [r3, #3]
    11bc:	2a00      	cmp	r2, #0
    11be:	d1f1      	bne.n	11a4 <udc_stop+0x4c>
    11c0:	2800      	cmp	r0, #0
    11c2:	d116      	bne.n	11f2 <udc_stop+0x9a>
    11c4:	0020      	movs	r0, r4
    11c6:	47b8      	blx	r7
    11c8:	6833      	ldr	r3, [r6, #0]
				iface_num++) {
    11ca:	3401      	adds	r4, #1
    11cc:	681b      	ldr	r3, [r3, #0]
    11ce:	b2e4      	uxtb	r4, r4
    11d0:	7919      	ldrb	r1, [r3, #4]
		for (iface_num = 0;
    11d2:	428c      	cmp	r4, r1
    11d4:	d3d8      	bcc.n	1188 <udc_stop+0x30>
	udc_num_configuration = 0;
    11d6:	2300      	movs	r3, #0
	udc_device_status =
    11d8:	2201      	movs	r2, #1
	udc_num_configuration = 0;
    11da:	702b      	strb	r3, [r5, #0]
	udc_device_status =
    11dc:	4b0b      	ldr	r3, [pc, #44]	; (120c <udc_stop+0xb4>)
    11de:	801a      	strh	r2, [r3, #0]
}
    11e0:	bc04      	pop	{r2}
    11e2:	4690      	mov	r8, r2
    11e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11e6:	4642      	mov	r2, r8
    11e8:	6013      	str	r3, [r2, #0]
    11ea:	6833      	ldr	r3, [r6, #0]
    11ec:	681b      	ldr	r3, [r3, #0]
    11ee:	7919      	ldrb	r1, [r3, #4]
    11f0:	e7c6      	b.n	1180 <udc_stop+0x28>
    11f2:	4642      	mov	r2, r8
    11f4:	6013      	str	r3, [r2, #0]
    11f6:	e7e5      	b.n	11c4 <udc_stop+0x6c>
    11f8:	00002a8d 	.word	0x00002a8d
    11fc:	20000dbc 	.word	0x20000dbc
    1200:	20000dc0 	.word	0x20000dc0
    1204:	20000dc4 	.word	0x20000dc4
    1208:	0000109d 	.word	0x0000109d
    120c:	20000db2 	.word	0x20000db2

00001210 <udc_reset>:
{
    1210:	b5f0      	push	{r4, r5, r6, r7, lr}
    1212:	46c6      	mov	lr, r8
    1214:	b500      	push	{lr}
	if (udc_num_configuration) {
    1216:	4d25      	ldr	r5, [pc, #148]	; (12ac <udc_reset+0x9c>)
    1218:	782a      	ldrb	r2, [r5, #0]
    121a:	2a00      	cmp	r2, #0
    121c:	d035      	beq.n	128a <udc_reset+0x7a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    121e:	4e24      	ldr	r6, [pc, #144]	; (12b0 <udc_reset+0xa0>)
    1220:	6833      	ldr	r3, [r6, #0]
    1222:	681b      	ldr	r3, [r3, #0]
    1224:	7919      	ldrb	r1, [r3, #4]
		for (iface_num = 0;
    1226:	2900      	cmp	r1, #0
    1228:	d02f      	beq.n	128a <udc_reset+0x7a>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    122a:	4822      	ldr	r0, [pc, #136]	; (12b4 <udc_reset+0xa4>)
		for (iface_num = 0;
    122c:	2400      	movs	r4, #0
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    122e:	4680      	mov	r8, r0
    1230:	4f21      	ldr	r7, [pc, #132]	; (12b8 <udc_reset+0xa8>)
    1232:	e004      	b.n	123e <udc_reset+0x2e>
				iface_num++) {
    1234:	3401      	adds	r4, #1
    1236:	b2e4      	uxtb	r4, r4
		for (iface_num = 0;
    1238:	428c      	cmp	r4, r1
    123a:	d226      	bcs.n	128a <udc_reset+0x7a>
    123c:	782a      	ldrb	r2, [r5, #0]
	if (0 == udc_num_configuration) {
    123e:	2a00      	cmp	r2, #0
    1240:	d0f8      	beq.n	1234 <udc_reset+0x24>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    1242:	4642      	mov	r2, r8
    1244:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    1246:	78d9      	ldrb	r1, [r3, #3]
    1248:	789a      	ldrb	r2, [r3, #2]
    124a:	0209      	lsls	r1, r1, #8
    124c:	4311      	orrs	r1, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    124e:	1859      	adds	r1, r3, r1
	while (ptr_end_desc >
    1250:	2000      	movs	r0, #0
    1252:	4299      	cmp	r1, r3
    1254:	d805      	bhi.n	1262 <udc_reset+0x52>
    1256:	e022      	b.n	129e <udc_reset+0x8e>
				udc_ptr_iface->bLength);
    1258:	781a      	ldrb	r2, [r3, #0]
    125a:	2001      	movs	r0, #1
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    125c:	189b      	adds	r3, r3, r2
	while (ptr_end_desc >
    125e:	4299      	cmp	r1, r3
    1260:	d91b      	bls.n	129a <udc_reset+0x8a>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    1262:	785a      	ldrb	r2, [r3, #1]
    1264:	2a04      	cmp	r2, #4
    1266:	d1f7      	bne.n	1258 <udc_reset+0x48>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    1268:	789a      	ldrb	r2, [r3, #2]
    126a:	42a2      	cmp	r2, r4
    126c:	d1f4      	bne.n	1258 <udc_reset+0x48>
    126e:	78da      	ldrb	r2, [r3, #3]
    1270:	2a00      	cmp	r2, #0
    1272:	d1f1      	bne.n	1258 <udc_reset+0x48>
    1274:	2800      	cmp	r0, #0
    1276:	d116      	bne.n	12a6 <udc_reset+0x96>
    1278:	0020      	movs	r0, r4
    127a:	47b8      	blx	r7
    127c:	6833      	ldr	r3, [r6, #0]
				iface_num++) {
    127e:	3401      	adds	r4, #1
    1280:	681b      	ldr	r3, [r3, #0]
    1282:	b2e4      	uxtb	r4, r4
    1284:	7919      	ldrb	r1, [r3, #4]
		for (iface_num = 0;
    1286:	428c      	cmp	r4, r1
    1288:	d3d8      	bcc.n	123c <udc_reset+0x2c>
	udc_num_configuration = 0;
    128a:	2300      	movs	r3, #0
	udc_device_status =
    128c:	2201      	movs	r2, #1
	udc_num_configuration = 0;
    128e:	702b      	strb	r3, [r5, #0]
	udc_device_status =
    1290:	4b0a      	ldr	r3, [pc, #40]	; (12bc <udc_reset+0xac>)
    1292:	801a      	strh	r2, [r3, #0]
}
    1294:	bc04      	pop	{r2}
    1296:	4690      	mov	r8, r2
    1298:	bdf0      	pop	{r4, r5, r6, r7, pc}
    129a:	4642      	mov	r2, r8
    129c:	6013      	str	r3, [r2, #0]
    129e:	6833      	ldr	r3, [r6, #0]
    12a0:	681b      	ldr	r3, [r3, #0]
    12a2:	7919      	ldrb	r1, [r3, #4]
    12a4:	e7c6      	b.n	1234 <udc_reset+0x24>
    12a6:	4642      	mov	r2, r8
    12a8:	6013      	str	r3, [r2, #0]
    12aa:	e7e5      	b.n	1278 <udc_reset+0x68>
    12ac:	20000dbc 	.word	0x20000dbc
    12b0:	20000dc0 	.word	0x20000dc0
    12b4:	20000dc4 	.word	0x20000dc4
    12b8:	0000109d 	.word	0x0000109d
    12bc:	20000db2 	.word	0x20000db2

000012c0 <udc_sof_notify>:
{
    12c0:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
    12c2:	4b0d      	ldr	r3, [pc, #52]	; (12f8 <udc_sof_notify+0x38>)
    12c4:	781b      	ldrb	r3, [r3, #0]
    12c6:	2b00      	cmp	r3, #0
    12c8:	d014      	beq.n	12f4 <udc_sof_notify+0x34>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    12ca:	4d0c      	ldr	r5, [pc, #48]	; (12fc <udc_sof_notify+0x3c>)
    12cc:	682a      	ldr	r2, [r5, #0]
    12ce:	6813      	ldr	r3, [r2, #0]
    12d0:	7919      	ldrb	r1, [r3, #4]
		for (iface_num = 0;
    12d2:	2900      	cmp	r1, #0
    12d4:	d00e      	beq.n	12f4 <udc_sof_notify+0x34>
    12d6:	2400      	movs	r4, #0
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    12d8:	6850      	ldr	r0, [r2, #4]
    12da:	00a3      	lsls	r3, r4, #2
    12dc:	581b      	ldr	r3, [r3, r0]
    12de:	691b      	ldr	r3, [r3, #16]
    12e0:	2b00      	cmp	r3, #0
    12e2:	d003      	beq.n	12ec <udc_sof_notify+0x2c>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    12e4:	4798      	blx	r3
    12e6:	682a      	ldr	r2, [r5, #0]
    12e8:	6813      	ldr	r3, [r2, #0]
    12ea:	7919      	ldrb	r1, [r3, #4]
				iface_num++) {
    12ec:	3401      	adds	r4, #1
    12ee:	b2e4      	uxtb	r4, r4
		for (iface_num = 0;
    12f0:	428c      	cmp	r4, r1
    12f2:	d3f1      	bcc.n	12d8 <udc_sof_notify+0x18>
}
    12f4:	bd70      	pop	{r4, r5, r6, pc}
    12f6:	46c0      	nop			; (mov r8, r8)
    12f8:	20000dbc 	.word	0x20000dbc
    12fc:	20000dc0 	.word	0x20000dc0

00001300 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    1300:	b5f0      	push	{r4, r5, r6, r7, lr}
    1302:	46de      	mov	lr, fp
    1304:	4657      	mov	r7, sl
    1306:	464e      	mov	r6, r9
    1308:	4645      	mov	r5, r8
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    130a:	2300      	movs	r3, #0
{
    130c:	b5e0      	push	{r5, r6, r7, lr}
	udd_g_ctrlreq.payload_size = 0;
    130e:	4cba      	ldr	r4, [pc, #744]	; (15f8 <udc_process_setup+0x2f8>)
{
    1310:	b083      	sub	sp, #12
	udd_g_ctrlreq.payload_size = 0;
    1312:	81a3      	strh	r3, [r4, #12]
	udd_g_ctrlreq.callback = NULL;
    1314:	6123      	str	r3, [r4, #16]
	udd_g_ctrlreq.over_under_run = NULL;
    1316:	6163      	str	r3, [r4, #20]

	if (Udd_setup_is_in()) {
    1318:	7823      	ldrb	r3, [r4, #0]
    131a:	b25a      	sxtb	r2, r3
    131c:	2a00      	cmp	r2, #0
    131e:	db13      	blt.n	1348 <udc_process_setup+0x48>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1320:	2260      	movs	r2, #96	; 0x60
    1322:	421a      	tst	r2, r3
    1324:	d100      	bne.n	1328 <udc_process_setup+0x28>
    1326:	e071      	b.n	140c <udc_process_setup+0x10c>
    1328:	221f      	movs	r2, #31
    132a:	4013      	ands	r3, r2
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    132c:	2b01      	cmp	r3, #1
    132e:	d100      	bne.n	1332 <udc_process_setup+0x32>
    1330:	e08d      	b.n	144e <udc_process_setup+0x14e>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1332:	2b02      	cmp	r3, #2
    1334:	d023      	beq.n	137e <udc_process_setup+0x7e>
			return false; // Error from USB host
    1336:	2500      	movs	r5, #0
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1338:	0028      	movs	r0, r5
    133a:	b003      	add	sp, #12
    133c:	bc3c      	pop	{r2, r3, r4, r5}
    133e:	4690      	mov	r8, r2
    1340:	4699      	mov	r9, r3
    1342:	46a2      	mov	sl, r4
    1344:	46ab      	mov	fp, r5
    1346:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
    1348:	88e2      	ldrh	r2, [r4, #6]
    134a:	2a00      	cmp	r2, #0
    134c:	d0f3      	beq.n	1336 <udc_process_setup+0x36>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    134e:	2160      	movs	r1, #96	; 0x60
    1350:	4219      	tst	r1, r3
    1352:	d1e9      	bne.n	1328 <udc_process_setup+0x28>
    1354:	211f      	movs	r1, #31
    1356:	400b      	ands	r3, r1
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1358:	d000      	beq.n	135c <udc_process_setup+0x5c>
    135a:	e0e3      	b.n	1524 <udc_process_setup+0x224>
			switch (udd_g_ctrlreq.req.bRequest) {
    135c:	7863      	ldrb	r3, [r4, #1]
    135e:	2b06      	cmp	r3, #6
    1360:	d100      	bne.n	1364 <udc_process_setup+0x64>
    1362:	e1a9      	b.n	16b8 <udc_process_setup+0x3b8>
    1364:	2b08      	cmp	r3, #8
    1366:	d100      	bne.n	136a <udc_process_setup+0x6a>
    1368:	e19d      	b.n	16a6 <udc_process_setup+0x3a6>
    136a:	2b00      	cmp	r3, #0
    136c:	d1e3      	bne.n	1336 <udc_process_setup+0x36>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    136e:	2a02      	cmp	r2, #2
    1370:	d1e1      	bne.n	1336 <udc_process_setup+0x36>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    1372:	391d      	subs	r1, #29
    1374:	48a1      	ldr	r0, [pc, #644]	; (15fc <udc_process_setup+0x2fc>)
    1376:	4ba2      	ldr	r3, [pc, #648]	; (1600 <udc_process_setup+0x300>)
    1378:	4798      	blx	r3
			return true;
    137a:	2501      	movs	r5, #1
    137c:	e7dc      	b.n	1338 <udc_process_setup+0x38>
	if (0 == udc_num_configuration) {
    137e:	4fa1      	ldr	r7, [pc, #644]	; (1604 <udc_process_setup+0x304>)
    1380:	783b      	ldrb	r3, [r7, #0]
    1382:	2b00      	cmp	r3, #0
    1384:	d0d7      	beq.n	1336 <udc_process_setup+0x36>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1386:	4ea0      	ldr	r6, [pc, #640]	; (1608 <udc_process_setup+0x308>)
    1388:	6833      	ldr	r3, [r6, #0]
    138a:	681a      	ldr	r2, [r3, #0]
    138c:	7912      	ldrb	r2, [r2, #4]
    138e:	2a00      	cmp	r2, #0
    1390:	d0d1      	beq.n	1336 <udc_process_setup+0x36>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    1392:	4a9e      	ldr	r2, [pc, #632]	; (160c <udc_process_setup+0x30c>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1394:	2400      	movs	r4, #0
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    1396:	4690      	mov	r8, r2
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1398:	685b      	ldr	r3, [r3, #4]
    139a:	00a2      	lsls	r2, r4, #2
    139c:	58d5      	ldr	r5, [r2, r3]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    139e:	68eb      	ldr	r3, [r5, #12]
    13a0:	4798      	blx	r3
	if (0 == udc_num_configuration) {
    13a2:	783b      	ldrb	r3, [r7, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    13a4:	4684      	mov	ip, r0
	if (0 == udc_num_configuration) {
    13a6:	2b00      	cmp	r3, #0
    13a8:	d0c5      	beq.n	1336 <udc_process_setup+0x36>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    13aa:	6833      	ldr	r3, [r6, #0]
    13ac:	681b      	ldr	r3, [r3, #0]
    13ae:	791a      	ldrb	r2, [r3, #4]
    13b0:	42a2      	cmp	r2, r4
    13b2:	d9c0      	bls.n	1336 <udc_process_setup+0x36>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    13b4:	4642      	mov	r2, r8
    13b6:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    13b8:	78d9      	ldrb	r1, [r3, #3]
    13ba:	789a      	ldrb	r2, [r3, #2]
    13bc:	0209      	lsls	r1, r1, #8
    13be:	4311      	orrs	r1, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    13c0:	1859      	adds	r1, r3, r1
	while (ptr_end_desc >
    13c2:	428b      	cmp	r3, r1
    13c4:	d2b7      	bcs.n	1336 <udc_process_setup+0x36>
    13c6:	2000      	movs	r0, #0
    13c8:	e004      	b.n	13d4 <udc_process_setup+0xd4>
				udc_ptr_iface->bLength);
    13ca:	781a      	ldrb	r2, [r3, #0]
    13cc:	2001      	movs	r0, #1
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    13ce:	189b      	adds	r3, r3, r2
	while (ptr_end_desc >
    13d0:	4299      	cmp	r1, r3
    13d2:	d918      	bls.n	1406 <udc_process_setup+0x106>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    13d4:	785a      	ldrb	r2, [r3, #1]
    13d6:	2a04      	cmp	r2, #4
    13d8:	d1f7      	bne.n	13ca <udc_process_setup+0xca>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    13da:	789a      	ldrb	r2, [r3, #2]
    13dc:	42a2      	cmp	r2, r4
    13de:	d1f4      	bne.n	13ca <udc_process_setup+0xca>
    13e0:	78da      	ldrb	r2, [r3, #3]
    13e2:	4562      	cmp	r2, ip
    13e4:	d1f1      	bne.n	13ca <udc_process_setup+0xca>
    13e6:	2800      	cmp	r0, #0
    13e8:	d000      	beq.n	13ec <udc_process_setup+0xec>
    13ea:	e2a9      	b.n	1940 <udc_process_setup+0x640>
		if (udi_api->setup()) {
    13ec:	68ab      	ldr	r3, [r5, #8]
    13ee:	4798      	blx	r3
    13f0:	2800      	cmp	r0, #0
    13f2:	d000      	beq.n	13f6 <udc_process_setup+0xf6>
    13f4:	e082      	b.n	14fc <udc_process_setup+0x1fc>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    13f6:	6833      	ldr	r3, [r6, #0]
			iface_num++) {
    13f8:	3401      	adds	r4, #1
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    13fa:	681a      	ldr	r2, [r3, #0]
			iface_num++) {
    13fc:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    13fe:	7912      	ldrb	r2, [r2, #4]
    1400:	42a2      	cmp	r2, r4
    1402:	d8c9      	bhi.n	1398 <udc_process_setup+0x98>
    1404:	e797      	b.n	1336 <udc_process_setup+0x36>
    1406:	4642      	mov	r2, r8
    1408:	6013      	str	r3, [r2, #0]
    140a:	e794      	b.n	1336 <udc_process_setup+0x36>
    140c:	251f      	movs	r5, #31
    140e:	402b      	ands	r3, r5
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1410:	d158      	bne.n	14c4 <udc_process_setup+0x1c4>
			switch (udd_g_ctrlreq.req.bRequest) {
    1412:	7863      	ldrb	r3, [r4, #1]
    1414:	2b03      	cmp	r3, #3
    1416:	d100      	bne.n	141a <udc_process_setup+0x11a>
    1418:	e78d      	b.n	1336 <udc_process_setup+0x36>
    141a:	d971      	bls.n	1500 <udc_process_setup+0x200>
    141c:	2b05      	cmp	r3, #5
    141e:	d100      	bne.n	1422 <udc_process_setup+0x122>
    1420:	e0de      	b.n	15e0 <udc_process_setup+0x2e0>
    1422:	2b09      	cmp	r3, #9
    1424:	d000      	beq.n	1428 <udc_process_setup+0x128>
    1426:	e786      	b.n	1336 <udc_process_setup+0x36>
	if (udd_g_ctrlreq.req.wLength) {
    1428:	88e3      	ldrh	r3, [r4, #6]
    142a:	2b00      	cmp	r3, #0
    142c:	d000      	beq.n	1430 <udc_process_setup+0x130>
    142e:	e782      	b.n	1336 <udc_process_setup+0x36>
	if (!udd_getaddress()) {
    1430:	4b77      	ldr	r3, [pc, #476]	; (1610 <udc_process_setup+0x310>)
    1432:	4798      	blx	r3
    1434:	2800      	cmp	r0, #0
    1436:	d006      	beq.n	1446 <udc_process_setup+0x146>
				udc_config.confdev_lsfs->bNumConfigurations) {
    1438:	4d76      	ldr	r5, [pc, #472]	; (1614 <udc_process_setup+0x314>)
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    143a:	78a2      	ldrb	r2, [r4, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
    143c:	682b      	ldr	r3, [r5, #0]
    143e:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1440:	429a      	cmp	r2, r3
    1442:	dc00      	bgt.n	1446 <udc_process_setup+0x146>
    1444:	e18f      	b.n	1766 <udc_process_setup+0x466>
    1446:	231f      	movs	r3, #31
    1448:	7822      	ldrb	r2, [r4, #0]
    144a:	4013      	ands	r3, r2
    144c:	e76e      	b.n	132c <udc_process_setup+0x2c>
    144e:	4f6d      	ldr	r7, [pc, #436]	; (1604 <udc_process_setup+0x304>)
    1450:	783b      	ldrb	r3, [r7, #0]
	if (0 == udc_num_configuration) {
    1452:	2b00      	cmp	r3, #0
    1454:	d100      	bne.n	1458 <udc_process_setup+0x158>
    1456:	e76e      	b.n	1336 <udc_process_setup+0x36>
    1458:	4e6b      	ldr	r6, [pc, #428]	; (1608 <udc_process_setup+0x308>)
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    145a:	6833      	ldr	r3, [r6, #0]
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    145c:	7925      	ldrb	r5, [r4, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    145e:	469c      	mov	ip, r3
    1460:	681b      	ldr	r3, [r3, #0]
    1462:	791a      	ldrb	r2, [r3, #4]
    1464:	42aa      	cmp	r2, r5
    1466:	d800      	bhi.n	146a <udc_process_setup+0x16a>
    1468:	e765      	b.n	1336 <udc_process_setup+0x36>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    146a:	4a68      	ldr	r2, [pc, #416]	; (160c <udc_process_setup+0x30c>)
    146c:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    146e:	78d9      	ldrb	r1, [r3, #3]
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    1470:	4690      	mov	r8, r2
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    1472:	789a      	ldrb	r2, [r3, #2]
    1474:	0209      	lsls	r1, r1, #8
    1476:	4311      	orrs	r1, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    1478:	1859      	adds	r1, r3, r1
	while (ptr_end_desc >
    147a:	428b      	cmp	r3, r1
    147c:	d21e      	bcs.n	14bc <udc_process_setup+0x1bc>
    147e:	2000      	movs	r0, #0
    1480:	e005      	b.n	148e <udc_process_setup+0x18e>
				udc_ptr_iface->bLength);
    1482:	781a      	ldrb	r2, [r3, #0]
    1484:	2001      	movs	r0, #1
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    1486:	189b      	adds	r3, r3, r2
	while (ptr_end_desc >
    1488:	4299      	cmp	r1, r3
    148a:	d800      	bhi.n	148e <udc_process_setup+0x18e>
    148c:	e0b0      	b.n	15f0 <udc_process_setup+0x2f0>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    148e:	785a      	ldrb	r2, [r3, #1]
    1490:	2a04      	cmp	r2, #4
    1492:	d1f6      	bne.n	1482 <udc_process_setup+0x182>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    1494:	789a      	ldrb	r2, [r3, #2]
    1496:	42aa      	cmp	r2, r5
    1498:	d1f3      	bne.n	1482 <udc_process_setup+0x182>
    149a:	78da      	ldrb	r2, [r3, #3]
    149c:	2a00      	cmp	r2, #0
    149e:	d1f0      	bne.n	1482 <udc_process_setup+0x182>
    14a0:	2800      	cmp	r0, #0
    14a2:	d000      	beq.n	14a6 <udc_process_setup+0x1a6>
    14a4:	e249      	b.n	193a <udc_process_setup+0x63a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    14a6:	4663      	mov	r3, ip
    14a8:	685b      	ldr	r3, [r3, #4]
    14aa:	00aa      	lsls	r2, r5, #2
    14ac:	58d3      	ldr	r3, [r2, r3]
    14ae:	4699      	mov	r9, r3
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    14b0:	68db      	ldr	r3, [r3, #12]
    14b2:	4798      	blx	r3
	if (0 == udc_num_configuration) {
    14b4:	783b      	ldrb	r3, [r7, #0]
    14b6:	2b00      	cmp	r3, #0
    14b8:	d000      	beq.n	14bc <udc_process_setup+0x1bc>
    14ba:	e128      	b.n	170e <udc_process_setup+0x40e>
    14bc:	231f      	movs	r3, #31
    14be:	7822      	ldrb	r2, [r4, #0]
    14c0:	4013      	ands	r3, r2
    14c2:	e736      	b.n	1332 <udc_process_setup+0x32>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    14c4:	2b01      	cmp	r3, #1
    14c6:	d045      	beq.n	1554 <udc_process_setup+0x254>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    14c8:	2b02      	cmp	r3, #2
    14ca:	d000      	beq.n	14ce <udc_process_setup+0x1ce>
    14cc:	e733      	b.n	1336 <udc_process_setup+0x36>
			switch (udd_g_ctrlreq.req.bRequest) {
    14ce:	7863      	ldrb	r3, [r4, #1]
    14d0:	2b01      	cmp	r3, #1
    14d2:	d100      	bne.n	14d6 <udc_process_setup+0x1d6>
    14d4:	e0b0      	b.n	1638 <udc_process_setup+0x338>
    14d6:	2b03      	cmp	r3, #3
    14d8:	d000      	beq.n	14dc <udc_process_setup+0x1dc>
    14da:	e750      	b.n	137e <udc_process_setup+0x7e>
	if (udd_g_ctrlreq.req.wLength) {
    14dc:	88e3      	ldrh	r3, [r4, #6]
    14de:	2b00      	cmp	r3, #0
    14e0:	d000      	beq.n	14e4 <udc_process_setup+0x1e4>
    14e2:	e74c      	b.n	137e <udc_process_setup+0x7e>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    14e4:	8863      	ldrh	r3, [r4, #2]
    14e6:	2b00      	cmp	r3, #0
    14e8:	d000      	beq.n	14ec <udc_process_setup+0x1ec>
    14ea:	e748      	b.n	137e <udc_process_setup+0x7e>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    14ec:	7920      	ldrb	r0, [r4, #4]
    14ee:	4b4a      	ldr	r3, [pc, #296]	; (1618 <udc_process_setup+0x318>)
    14f0:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    14f2:	7920      	ldrb	r0, [r4, #4]
    14f4:	4b49      	ldr	r3, [pc, #292]	; (161c <udc_process_setup+0x31c>)
    14f6:	4798      	blx	r3
		if (udc_reqstd()) {
    14f8:	2800      	cmp	r0, #0
    14fa:	d0a4      	beq.n	1446 <udc_process_setup+0x146>
			return true;
    14fc:	2501      	movs	r5, #1
    14fe:	e71b      	b.n	1338 <udc_process_setup+0x38>
			switch (udd_g_ctrlreq.req.bRequest) {
    1500:	2b01      	cmp	r3, #1
    1502:	d000      	beq.n	1506 <udc_process_setup+0x206>
    1504:	e717      	b.n	1336 <udc_process_setup+0x36>
	if (udd_g_ctrlreq.req.wLength) {
    1506:	88e3      	ldrh	r3, [r4, #6]
    1508:	2b00      	cmp	r3, #0
    150a:	d000      	beq.n	150e <udc_process_setup+0x20e>
    150c:	e713      	b.n	1336 <udc_process_setup+0x36>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    150e:	8863      	ldrh	r3, [r4, #2]
    1510:	2b01      	cmp	r3, #1
    1512:	d000      	beq.n	1516 <udc_process_setup+0x216>
    1514:	e70f      	b.n	1336 <udc_process_setup+0x36>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1516:	2102      	movs	r1, #2
    1518:	4a38      	ldr	r2, [pc, #224]	; (15fc <udc_process_setup+0x2fc>)
			return true;
    151a:	2501      	movs	r5, #1
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    151c:	8813      	ldrh	r3, [r2, #0]
    151e:	438b      	bics	r3, r1
    1520:	8013      	strh	r3, [r2, #0]
    1522:	e709      	b.n	1338 <udc_process_setup+0x38>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1524:	2b01      	cmp	r3, #1
    1526:	d100      	bne.n	152a <udc_process_setup+0x22a>
    1528:	e092      	b.n	1650 <udc_process_setup+0x350>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    152a:	2b02      	cmp	r3, #2
    152c:	d000      	beq.n	1530 <udc_process_setup+0x230>
    152e:	e702      	b.n	1336 <udc_process_setup+0x36>
			switch (udd_g_ctrlreq.req.bRequest) {
    1530:	7863      	ldrb	r3, [r4, #1]
    1532:	2b00      	cmp	r3, #0
    1534:	d000      	beq.n	1538 <udc_process_setup+0x238>
    1536:	e722      	b.n	137e <udc_process_setup+0x7e>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1538:	2a02      	cmp	r2, #2
    153a:	d000      	beq.n	153e <udc_process_setup+0x23e>
    153c:	e71f      	b.n	137e <udc_process_setup+0x7e>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    153e:	4b38      	ldr	r3, [pc, #224]	; (1620 <udc_process_setup+0x320>)
    1540:	7920      	ldrb	r0, [r4, #4]
    1542:	4798      	blx	r3
    1544:	4b37      	ldr	r3, [pc, #220]	; (1624 <udc_process_setup+0x324>)
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1546:	2102      	movs	r1, #2
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
    1548:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    154a:	0018      	movs	r0, r3
    154c:	4b2c      	ldr	r3, [pc, #176]	; (1600 <udc_process_setup+0x300>)
    154e:	4798      	blx	r3
			return true;
    1550:	2501      	movs	r5, #1
    1552:	e6f1      	b.n	1338 <udc_process_setup+0x38>
			switch (udd_g_ctrlreq.req.bRequest) {
    1554:	7863      	ldrb	r3, [r4, #1]
    1556:	2b0b      	cmp	r3, #11
    1558:	d000      	beq.n	155c <udc_process_setup+0x25c>
    155a:	e774      	b.n	1446 <udc_process_setup+0x146>
	if (udd_g_ctrlreq.req.wLength) {
    155c:	88e3      	ldrh	r3, [r4, #6]
    155e:	2b00      	cmp	r3, #0
    1560:	d000      	beq.n	1564 <udc_process_setup+0x264>
    1562:	e774      	b.n	144e <udc_process_setup+0x14e>
	if (!udc_num_configuration) {
    1564:	4b27      	ldr	r3, [pc, #156]	; (1604 <udc_process_setup+0x304>)
    1566:	4699      	mov	r9, r3
    1568:	781b      	ldrb	r3, [r3, #0]
    156a:	2b00      	cmp	r3, #0
    156c:	d100      	bne.n	1570 <udc_process_setup+0x270>
    156e:	e6e2      	b.n	1336 <udc_process_setup+0x36>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1570:	7927      	ldrb	r7, [r4, #4]
    1572:	4b2d      	ldr	r3, [pc, #180]	; (1628 <udc_process_setup+0x328>)
    1574:	2100      	movs	r1, #0
    1576:	0038      	movs	r0, r7
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1578:	8866      	ldrh	r6, [r4, #2]
    157a:	4698      	mov	r8, r3
    157c:	4798      	blx	r3
	if (!udc_update_iface_desc(iface_num, 0)) {
    157e:	2800      	cmp	r0, #0
    1580:	d100      	bne.n	1584 <udc_process_setup+0x284>
    1582:	e760      	b.n	1446 <udc_process_setup+0x146>
    1584:	0038      	movs	r0, r7
    1586:	4b29      	ldr	r3, [pc, #164]	; (162c <udc_process_setup+0x32c>)
    1588:	4798      	blx	r3
	if (!udc_iface_disable(iface_num)) {
    158a:	2800      	cmp	r0, #0
    158c:	d100      	bne.n	1590 <udc_process_setup+0x290>
    158e:	e1cc      	b.n	192a <udc_process_setup+0x62a>
	if (0 == udc_num_configuration) {
    1590:	464b      	mov	r3, r9
    1592:	781b      	ldrb	r3, [r3, #0]
    1594:	2b00      	cmp	r3, #0
    1596:	d100      	bne.n	159a <udc_process_setup+0x29a>
    1598:	e755      	b.n	1446 <udc_process_setup+0x146>
    159a:	b2f1      	uxtb	r1, r6
    159c:	0038      	movs	r0, r7
    159e:	47c0      	blx	r8
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    15a0:	2800      	cmp	r0, #0
    15a2:	d100      	bne.n	15a6 <udc_process_setup+0x2a6>
    15a4:	e74f      	b.n	1446 <udc_process_setup+0x146>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    15a6:	4b19      	ldr	r3, [pc, #100]	; (160c <udc_process_setup+0x30c>)
    15a8:	4e17      	ldr	r6, [pc, #92]	; (1608 <udc_process_setup+0x308>)
    15aa:	681d      	ldr	r5, [r3, #0]
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    15ac:	4b20      	ldr	r3, [pc, #128]	; (1630 <udc_process_setup+0x330>)
    15ae:	4698      	mov	r8, r3
			udc_ptr_conf->desc +
    15b0:	6830      	ldr	r0, [r6, #0]
    15b2:	6803      	ldr	r3, [r0, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    15b4:	78da      	ldrb	r2, [r3, #3]
    15b6:	7899      	ldrb	r1, [r3, #2]
    15b8:	0212      	lsls	r2, r2, #8
    15ba:	430a      	orrs	r2, r1
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    15bc:	189b      	adds	r3, r3, r2
    15be:	e005      	b.n	15cc <udc_process_setup+0x2cc>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    15c0:	786a      	ldrb	r2, [r5, #1]
    15c2:	2a04      	cmp	r2, #4
    15c4:	d006      	beq.n	15d4 <udc_process_setup+0x2d4>
		if (desc_id == desc->bDescriptorType) {
    15c6:	2a05      	cmp	r2, #5
    15c8:	d100      	bne.n	15cc <udc_process_setup+0x2cc>
    15ca:	e095      	b.n	16f8 <udc_process_setup+0x3f8>
			desc->bLength);
    15cc:	782a      	ldrb	r2, [r5, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    15ce:	18ad      	adds	r5, r5, r2
	while (ptr_eof_desc > desc) {
    15d0:	42ab      	cmp	r3, r5
    15d2:	d8f5      	bhi.n	15c0 <udc_process_setup+0x2c0>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    15d4:	6843      	ldr	r3, [r0, #4]
    15d6:	00bf      	lsls	r7, r7, #2
    15d8:	58fb      	ldr	r3, [r7, r3]
    15da:	681b      	ldr	r3, [r3, #0]
    15dc:	4798      	blx	r3
    15de:	e78b      	b.n	14f8 <udc_process_setup+0x1f8>
	if (udd_g_ctrlreq.req.wLength) {
    15e0:	88e3      	ldrh	r3, [r4, #6]
    15e2:	2b00      	cmp	r3, #0
    15e4:	d000      	beq.n	15e8 <udc_process_setup+0x2e8>
    15e6:	e6a6      	b.n	1336 <udc_process_setup+0x36>
	udd_g_ctrlreq.callback = udc_valid_address;
    15e8:	4b12      	ldr	r3, [pc, #72]	; (1634 <udc_process_setup+0x334>)
			return true;
    15ea:	2501      	movs	r5, #1
	udd_g_ctrlreq.callback = udc_valid_address;
    15ec:	6123      	str	r3, [r4, #16]
    15ee:	e6a3      	b.n	1338 <udc_process_setup+0x38>
    15f0:	4642      	mov	r2, r8
    15f2:	6013      	str	r3, [r2, #0]
    15f4:	e762      	b.n	14bc <udc_process_setup+0x1bc>
    15f6:	46c0      	nop			; (mov r8, r8)
    15f8:	20001440 	.word	0x20001440
    15fc:	20000db2 	.word	0x20000db2
    1600:	00002855 	.word	0x00002855
    1604:	20000dbc 	.word	0x20000dbc
    1608:	20000dc0 	.word	0x20000dc0
    160c:	20000dc4 	.word	0x20000dc4
    1610:	00002845 	.word	0x00002845
    1614:	2000004c 	.word	0x2000004c
    1618:	00002155 	.word	0x00002155
    161c:	000024b1 	.word	0x000024b1
    1620:	0000249d 	.word	0x0000249d
    1624:	20000db4 	.word	0x20000db4
    1628:	00001041 	.word	0x00001041
    162c:	0000109d 	.word	0x0000109d
    1630:	00002391 	.word	0x00002391
    1634:	00001029 	.word	0x00001029
	if (udd_g_ctrlreq.req.wLength) {
    1638:	88e3      	ldrh	r3, [r4, #6]
    163a:	2b00      	cmp	r3, #0
    163c:	d000      	beq.n	1640 <udc_process_setup+0x340>
    163e:	e69e      	b.n	137e <udc_process_setup+0x7e>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1640:	8863      	ldrh	r3, [r4, #2]
    1642:	2b00      	cmp	r3, #0
    1644:	d000      	beq.n	1648 <udc_process_setup+0x348>
    1646:	e69a      	b.n	137e <udc_process_setup+0x7e>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1648:	7920      	ldrb	r0, [r4, #4]
    164a:	4bc0      	ldr	r3, [pc, #768]	; (194c <udc_process_setup+0x64c>)
    164c:	4798      	blx	r3
    164e:	e753      	b.n	14f8 <udc_process_setup+0x1f8>
			switch (udd_g_ctrlreq.req.bRequest) {
    1650:	7863      	ldrb	r3, [r4, #1]
    1652:	2b0a      	cmp	r3, #10
    1654:	d000      	beq.n	1658 <udc_process_setup+0x358>
    1656:	e6f6      	b.n	1446 <udc_process_setup+0x146>
	if (udd_g_ctrlreq.req.wLength != 1) {
    1658:	2a01      	cmp	r2, #1
    165a:	d000      	beq.n	165e <udc_process_setup+0x35e>
    165c:	e6f7      	b.n	144e <udc_process_setup+0x14e>
	if (!udc_num_configuration) {
    165e:	4fbc      	ldr	r7, [pc, #752]	; (1950 <udc_process_setup+0x650>)
    1660:	783b      	ldrb	r3, [r7, #0]
    1662:	2b00      	cmp	r3, #0
    1664:	d100      	bne.n	1668 <udc_process_setup+0x368>
    1666:	e666      	b.n	1336 <udc_process_setup+0x36>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1668:	7923      	ldrb	r3, [r4, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    166a:	4eba      	ldr	r6, [pc, #744]	; (1954 <udc_process_setup+0x654>)
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    166c:	4698      	mov	r8, r3
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    166e:	6833      	ldr	r3, [r6, #0]
    1670:	4699      	mov	r9, r3
    1672:	681b      	ldr	r3, [r3, #0]
    1674:	791b      	ldrb	r3, [r3, #4]
    1676:	4543      	cmp	r3, r8
    1678:	d800      	bhi.n	167c <udc_process_setup+0x37c>
    167a:	e6ee      	b.n	145a <udc_process_setup+0x15a>
    167c:	2100      	movs	r1, #0
    167e:	4640      	mov	r0, r8
    1680:	4bb5      	ldr	r3, [pc, #724]	; (1958 <udc_process_setup+0x658>)
    1682:	4798      	blx	r3
    1684:	1e05      	subs	r5, r0, #0
	if (!udc_update_iface_desc(iface_num, 0)) {
    1686:	d100      	bne.n	168a <udc_process_setup+0x38a>
    1688:	e6dd      	b.n	1446 <udc_process_setup+0x146>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    168a:	464b      	mov	r3, r9
    168c:	685a      	ldr	r2, [r3, #4]
    168e:	4643      	mov	r3, r8
    1690:	009b      	lsls	r3, r3, #2
	udc_iface_setting = udi_api->getsetting();
    1692:	589b      	ldr	r3, [r3, r2]
    1694:	68db      	ldr	r3, [r3, #12]
    1696:	4798      	blx	r3
    1698:	4bb0      	ldr	r3, [pc, #704]	; (195c <udc_process_setup+0x65c>)
	udd_set_setup_payload(&udc_iface_setting,1);
    169a:	2101      	movs	r1, #1
	udc_iface_setting = udi_api->getsetting();
    169c:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
    169e:	0018      	movs	r0, r3
    16a0:	4baf      	ldr	r3, [pc, #700]	; (1960 <udc_process_setup+0x660>)
    16a2:	4798      	blx	r3
    16a4:	e648      	b.n	1338 <udc_process_setup+0x38>
	if (udd_g_ctrlreq.req.wLength != 1) {
    16a6:	2a01      	cmp	r2, #1
    16a8:	d000      	beq.n	16ac <udc_process_setup+0x3ac>
    16aa:	e644      	b.n	1336 <udc_process_setup+0x36>
	udd_set_setup_payload(&udc_num_configuration,1);
    16ac:	2101      	movs	r1, #1
    16ae:	48a8      	ldr	r0, [pc, #672]	; (1950 <udc_process_setup+0x650>)
    16b0:	4bab      	ldr	r3, [pc, #684]	; (1960 <udc_process_setup+0x660>)
    16b2:	4798      	blx	r3
			return true;
    16b4:	2501      	movs	r5, #1
    16b6:	e63f      	b.n	1338 <udc_process_setup+0x38>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    16b8:	8863      	ldrh	r3, [r4, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    16ba:	0a1d      	lsrs	r5, r3, #8
    16bc:	2d02      	cmp	r5, #2
    16be:	d100      	bne.n	16c2 <udc_process_setup+0x3c2>
    16c0:	e118      	b.n	18f4 <udc_process_setup+0x5f4>
    16c2:	d800      	bhi.n	16c6 <udc_process_setup+0x3c6>
    16c4:	e0cb      	b.n	185e <udc_process_setup+0x55e>
    16c6:	2d03      	cmp	r5, #3
    16c8:	d100      	bne.n	16cc <udc_process_setup+0x3cc>
    16ca:	e0d4      	b.n	1876 <udc_process_setup+0x576>
    16cc:	2d0f      	cmp	r5, #15
    16ce:	d000      	beq.n	16d2 <udc_process_setup+0x3d2>
    16d0:	e631      	b.n	1336 <udc_process_setup+0x36>
		if (udc_config.conf_bos == NULL) {
    16d2:	4ba4      	ldr	r3, [pc, #656]	; (1964 <udc_process_setup+0x664>)
    16d4:	6898      	ldr	r0, [r3, #8]
    16d6:	2800      	cmp	r0, #0
    16d8:	d100      	bne.n	16dc <udc_process_setup+0x3dc>
    16da:	e62c      	b.n	1336 <udc_process_setup+0x36>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    16dc:	78c1      	ldrb	r1, [r0, #3]
    16de:	7883      	ldrb	r3, [r0, #2]
    16e0:	0209      	lsls	r1, r1, #8
    16e2:	4319      	orrs	r1, r3
    16e4:	4b9e      	ldr	r3, [pc, #632]	; (1960 <udc_process_setup+0x660>)
    16e6:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    16e8:	88e3      	ldrh	r3, [r4, #6]
    16ea:	89a2      	ldrh	r2, [r4, #12]
    16ec:	429a      	cmp	r2, r3
    16ee:	d800      	bhi.n	16f2 <udc_process_setup+0x3f2>
    16f0:	e704      	b.n	14fc <udc_process_setup+0x1fc>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    16f2:	81a3      	strh	r3, [r4, #12]
			return true;
    16f4:	2501      	movs	r5, #1
    16f6:	e61f      	b.n	1338 <udc_process_setup+0x38>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    16f8:	796a      	ldrb	r2, [r5, #5]
    16fa:	792b      	ldrb	r3, [r5, #4]
    16fc:	0212      	lsls	r2, r2, #8
    16fe:	431a      	orrs	r2, r3
    1700:	78e9      	ldrb	r1, [r5, #3]
    1702:	78a8      	ldrb	r0, [r5, #2]
    1704:	47c0      	blx	r8
    1706:	2800      	cmp	r0, #0
    1708:	d000      	beq.n	170c <udc_process_setup+0x40c>
    170a:	e751      	b.n	15b0 <udc_process_setup+0x2b0>
    170c:	e69b      	b.n	1446 <udc_process_setup+0x146>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    170e:	6833      	ldr	r3, [r6, #0]
    1710:	681b      	ldr	r3, [r3, #0]
    1712:	791a      	ldrb	r2, [r3, #4]
    1714:	42aa      	cmp	r2, r5
    1716:	d800      	bhi.n	171a <udc_process_setup+0x41a>
    1718:	e6d0      	b.n	14bc <udc_process_setup+0x1bc>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    171a:	4642      	mov	r2, r8
    171c:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    171e:	78da      	ldrb	r2, [r3, #3]
    1720:	7899      	ldrb	r1, [r3, #2]
    1722:	0212      	lsls	r2, r2, #8
    1724:	430a      	orrs	r2, r1
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    1726:	189a      	adds	r2, r3, r2
	while (ptr_end_desc >
    1728:	4293      	cmp	r3, r2
    172a:	d300      	bcc.n	172e <udc_process_setup+0x42e>
    172c:	e6c6      	b.n	14bc <udc_process_setup+0x1bc>
    172e:	2600      	movs	r6, #0
    1730:	e005      	b.n	173e <udc_process_setup+0x43e>
				udc_ptr_iface->bLength);
    1732:	7819      	ldrb	r1, [r3, #0]
    1734:	2601      	movs	r6, #1
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    1736:	185b      	adds	r3, r3, r1
	while (ptr_end_desc >
    1738:	429a      	cmp	r2, r3
    173a:	d800      	bhi.n	173e <udc_process_setup+0x43e>
    173c:	e758      	b.n	15f0 <udc_process_setup+0x2f0>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    173e:	7859      	ldrb	r1, [r3, #1]
    1740:	2904      	cmp	r1, #4
    1742:	d1f6      	bne.n	1732 <udc_process_setup+0x432>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    1744:	7899      	ldrb	r1, [r3, #2]
    1746:	42a9      	cmp	r1, r5
    1748:	d1f3      	bne.n	1732 <udc_process_setup+0x432>
    174a:	78d9      	ldrb	r1, [r3, #3]
    174c:	4281      	cmp	r1, r0
    174e:	d1f0      	bne.n	1732 <udc_process_setup+0x432>
    1750:	2e00      	cmp	r6, #0
    1752:	d000      	beq.n	1756 <udc_process_setup+0x456>
    1754:	e0f7      	b.n	1946 <udc_process_setup+0x646>
	return udi_api->setup();
    1756:	464b      	mov	r3, r9
    1758:	689b      	ldr	r3, [r3, #8]
    175a:	4798      	blx	r3
		if (udc_req_iface()) {
    175c:	2800      	cmp	r0, #0
    175e:	d100      	bne.n	1762 <udc_process_setup+0x462>
    1760:	e6ac      	b.n	14bc <udc_process_setup+0x1bc>
			return true;
    1762:	2501      	movs	r5, #1
    1764:	e5e8      	b.n	1338 <udc_process_setup+0x38>
	udc_reset();
    1766:	4b80      	ldr	r3, [pc, #512]	; (1968 <udc_process_setup+0x668>)
    1768:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    176a:	78a3      	ldrb	r3, [r4, #2]
    176c:	4f78      	ldr	r7, [pc, #480]	; (1950 <udc_process_setup+0x650>)
    176e:	703b      	strb	r3, [r7, #0]
	if (udc_num_configuration == 0) {
    1770:	2b00      	cmp	r3, #0
    1772:	d100      	bne.n	1776 <udc_process_setup+0x476>
    1774:	e6c2      	b.n	14fc <udc_process_setup+0x1fc>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1776:	4a7d      	ldr	r2, [pc, #500]	; (196c <udc_process_setup+0x66c>)
    1778:	6868      	ldr	r0, [r5, #4]
    177a:	4694      	mov	ip, r2
    177c:	4463      	add	r3, ip
    177e:	00db      	lsls	r3, r3, #3
    1780:	18c0      	adds	r0, r0, r3
    1782:	4e74      	ldr	r6, [pc, #464]	; (1954 <udc_process_setup+0x654>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1784:	6803      	ldr	r3, [r0, #0]
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1786:	6030      	str	r0, [r6, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1788:	791a      	ldrb	r2, [r3, #4]
    178a:	2a00      	cmp	r2, #0
    178c:	d100      	bne.n	1790 <udc_process_setup+0x490>
    178e:	e6b5      	b.n	14fc <udc_process_setup+0x1fc>
    1790:	2200      	movs	r2, #0
    1792:	4691      	mov	r9, r2
    1794:	4a76      	ldr	r2, [pc, #472]	; (1970 <udc_process_setup+0x670>)
    1796:	4690      	mov	r8, r2
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    1798:	4a76      	ldr	r2, [pc, #472]	; (1974 <udc_process_setup+0x674>)
    179a:	4693      	mov	fp, r2
    179c:	0032      	movs	r2, r6
    179e:	464e      	mov	r6, r9
    17a0:	46b9      	mov	r9, r7
    17a2:	0017      	movs	r7, r2
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    17a4:	4642      	mov	r2, r8
    17a6:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    17a8:	78d9      	ldrb	r1, [r3, #3]
    17aa:	789a      	ldrb	r2, [r3, #2]
    17ac:	020d      	lsls	r5, r1, #8
    17ae:	4315      	orrs	r5, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    17b0:	46ac      	mov	ip, r5
    17b2:	449c      	add	ip, r3
	while (ptr_end_desc >
    17b4:	459c      	cmp	ip, r3
    17b6:	d800      	bhi.n	17ba <udc_process_setup+0x4ba>
    17b8:	e645      	b.n	1446 <udc_process_setup+0x146>
    17ba:	2500      	movs	r5, #0
    17bc:	9301      	str	r3, [sp, #4]
    17be:	9500      	str	r5, [sp, #0]
    17c0:	469a      	mov	sl, r3
    17c2:	001d      	movs	r5, r3
    17c4:	e005      	b.n	17d2 <udc_process_setup+0x4d2>
				udc_ptr_iface->bLength);
    17c6:	782b      	ldrb	r3, [r5, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    17c8:	18ed      	adds	r5, r5, r3
    17ca:	2301      	movs	r3, #1
    17cc:	9300      	str	r3, [sp, #0]
	while (ptr_end_desc >
    17ce:	45ac      	cmp	ip, r5
    17d0:	d94e      	bls.n	1870 <udc_process_setup+0x570>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    17d2:	786b      	ldrb	r3, [r5, #1]
    17d4:	2b04      	cmp	r3, #4
    17d6:	d1f6      	bne.n	17c6 <udc_process_setup+0x4c6>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    17d8:	78ab      	ldrb	r3, [r5, #2]
    17da:	42b3      	cmp	r3, r6
    17dc:	d1f3      	bne.n	17c6 <udc_process_setup+0x4c6>
    17de:	78eb      	ldrb	r3, [r5, #3]
    17e0:	2b00      	cmp	r3, #0
    17e2:	d1f0      	bne.n	17c6 <udc_process_setup+0x4c6>
    17e4:	9501      	str	r5, [sp, #4]
    17e6:	9d00      	ldr	r5, [sp, #0]
    17e8:	4653      	mov	r3, sl
    17ea:	2d00      	cmp	r5, #0
    17ec:	d004      	beq.n	17f8 <udc_process_setup+0x4f8>
    17ee:	4642      	mov	r2, r8
    17f0:	9901      	ldr	r1, [sp, #4]
    17f2:	6011      	str	r1, [r2, #0]
    17f4:	789a      	ldrb	r2, [r3, #2]
    17f6:	78d9      	ldrb	r1, [r3, #3]
	while (ptr_end_desc >
    17f8:	9d01      	ldr	r5, [sp, #4]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    17fa:	0209      	lsls	r1, r1, #8
    17fc:	430a      	orrs	r2, r1
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    17fe:	189a      	adds	r2, r3, r2
    1800:	e004      	b.n	180c <udc_process_setup+0x50c>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    1802:	786b      	ldrb	r3, [r5, #1]
    1804:	2b04      	cmp	r3, #4
    1806:	d005      	beq.n	1814 <udc_process_setup+0x514>
		if (desc_id == desc->bDescriptorType) {
    1808:	2b05      	cmp	r3, #5
    180a:	d019      	beq.n	1840 <udc_process_setup+0x540>
			desc->bLength);
    180c:	782b      	ldrb	r3, [r5, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    180e:	18ed      	adds	r5, r5, r3
	while (ptr_eof_desc > desc) {
    1810:	42aa      	cmp	r2, r5
    1812:	d8f6      	bhi.n	1802 <udc_process_setup+0x502>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    1814:	6843      	ldr	r3, [r0, #4]
    1816:	00b2      	lsls	r2, r6, #2
    1818:	58d3      	ldr	r3, [r2, r3]
    181a:	681b      	ldr	r3, [r3, #0]
    181c:	4798      	blx	r3
		if (!udc_iface_enable(iface_num, 0)) {
    181e:	2800      	cmp	r0, #0
    1820:	d100      	bne.n	1824 <udc_process_setup+0x524>
    1822:	e610      	b.n	1446 <udc_process_setup+0x146>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1824:	6838      	ldr	r0, [r7, #0]
			iface_num++) {
    1826:	3601      	adds	r6, #1
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1828:	6803      	ldr	r3, [r0, #0]
			iface_num++) {
    182a:	b2f6      	uxtb	r6, r6
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    182c:	791a      	ldrb	r2, [r3, #4]
    182e:	42b2      	cmp	r2, r6
    1830:	d800      	bhi.n	1834 <udc_process_setup+0x534>
    1832:	e663      	b.n	14fc <udc_process_setup+0x1fc>
	if (0 == udc_num_configuration) {
    1834:	464a      	mov	r2, r9
    1836:	7812      	ldrb	r2, [r2, #0]
    1838:	2a00      	cmp	r2, #0
    183a:	d100      	bne.n	183e <udc_process_setup+0x53e>
    183c:	e603      	b.n	1446 <udc_process_setup+0x146>
    183e:	e7b1      	b.n	17a4 <udc_process_setup+0x4a4>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    1840:	796a      	ldrb	r2, [r5, #5]
    1842:	792b      	ldrb	r3, [r5, #4]
    1844:	0212      	lsls	r2, r2, #8
    1846:	431a      	orrs	r2, r3
    1848:	78e9      	ldrb	r1, [r5, #3]
    184a:	78a8      	ldrb	r0, [r5, #2]
    184c:	47d8      	blx	fp
    184e:	2800      	cmp	r0, #0
    1850:	d100      	bne.n	1854 <udc_process_setup+0x554>
    1852:	e5f8      	b.n	1446 <udc_process_setup+0x146>
    1854:	6838      	ldr	r0, [r7, #0]
    1856:	6803      	ldr	r3, [r0, #0]
    1858:	789a      	ldrb	r2, [r3, #2]
    185a:	78d9      	ldrb	r1, [r3, #3]
    185c:	e7cd      	b.n	17fa <udc_process_setup+0x4fa>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    185e:	2d01      	cmp	r5, #1
    1860:	d000      	beq.n	1864 <udc_process_setup+0x564>
    1862:	e568      	b.n	1336 <udc_process_setup+0x36>
				(uint8_t *) udc_config.confdev_lsfs,
    1864:	4b3f      	ldr	r3, [pc, #252]	; (1964 <udc_process_setup+0x664>)
    1866:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
    1868:	4b3d      	ldr	r3, [pc, #244]	; (1960 <udc_process_setup+0x660>)
    186a:	7801      	ldrb	r1, [r0, #0]
    186c:	4798      	blx	r3
    186e:	e73b      	b.n	16e8 <udc_process_setup+0x3e8>
    1870:	4643      	mov	r3, r8
    1872:	601d      	str	r5, [r3, #0]
    1874:	e5e7      	b.n	1446 <udc_process_setup+0x146>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1876:	22ff      	movs	r2, #255	; 0xff
    1878:	4013      	ands	r3, r2
    187a:	2b01      	cmp	r3, #1
    187c:	d04d      	beq.n	191a <udc_process_setup+0x61a>
    187e:	2b00      	cmp	r3, #0
    1880:	d033      	beq.n	18ea <udc_process_setup+0x5ea>
    1882:	2b02      	cmp	r3, #2
    1884:	d054      	beq.n	1930 <udc_process_setup+0x630>
    1886:	2b03      	cmp	r3, #3
    1888:	d000      	beq.n	188c <udc_process_setup+0x58c>
    188a:	e5dc      	b.n	1446 <udc_process_setup+0x146>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    188c:	2331      	movs	r3, #49	; 0x31
    188e:	211a      	movs	r1, #26
    1890:	251a      	movs	r5, #26
    1892:	220c      	movs	r2, #12
    1894:	4838      	ldr	r0, [pc, #224]	; (1978 <udc_process_setup+0x678>)
    1896:	8043      	strh	r3, [r0, #2]
    1898:	4b38      	ldr	r3, [pc, #224]	; (197c <udc_process_setup+0x67c>)
    189a:	785e      	ldrb	r6, [r3, #1]
    189c:	8086      	strh	r6, [r0, #4]
    189e:	789e      	ldrb	r6, [r3, #2]
    18a0:	80c6      	strh	r6, [r0, #6]
    18a2:	78de      	ldrb	r6, [r3, #3]
    18a4:	8106      	strh	r6, [r0, #8]
    18a6:	791e      	ldrb	r6, [r3, #4]
    18a8:	8146      	strh	r6, [r0, #10]
		for(i = 0; i < str_length; i++) {
    18aa:	2a05      	cmp	r2, #5
    18ac:	d019      	beq.n	18e2 <udc_process_setup+0x5e2>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    18ae:	795e      	ldrb	r6, [r3, #5]
    18b0:	8186      	strh	r6, [r0, #12]
		for(i = 0; i < str_length; i++) {
    18b2:	2a06      	cmp	r2, #6
    18b4:	d015      	beq.n	18e2 <udc_process_setup+0x5e2>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    18b6:	799e      	ldrb	r6, [r3, #6]
    18b8:	81c6      	strh	r6, [r0, #14]
		for(i = 0; i < str_length; i++) {
    18ba:	2a07      	cmp	r2, #7
    18bc:	d011      	beq.n	18e2 <udc_process_setup+0x5e2>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    18be:	79de      	ldrb	r6, [r3, #7]
    18c0:	8206      	strh	r6, [r0, #16]
		for(i = 0; i < str_length; i++) {
    18c2:	2a08      	cmp	r2, #8
    18c4:	d00d      	beq.n	18e2 <udc_process_setup+0x5e2>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    18c6:	7a1e      	ldrb	r6, [r3, #8]
    18c8:	8246      	strh	r6, [r0, #18]
		for(i = 0; i < str_length; i++) {
    18ca:	2a09      	cmp	r2, #9
    18cc:	d009      	beq.n	18e2 <udc_process_setup+0x5e2>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    18ce:	7a5e      	ldrb	r6, [r3, #9]
    18d0:	8286      	strh	r6, [r0, #20]
		for(i = 0; i < str_length; i++) {
    18d2:	2a0a      	cmp	r2, #10
    18d4:	d005      	beq.n	18e2 <udc_process_setup+0x5e2>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    18d6:	7a9e      	ldrb	r6, [r3, #10]
    18d8:	82c6      	strh	r6, [r0, #22]
		for(i = 0; i < str_length; i++) {
    18da:	2a0c      	cmp	r2, #12
    18dc:	d101      	bne.n	18e2 <udc_process_setup+0x5e2>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    18de:	7adb      	ldrb	r3, [r3, #11]
    18e0:	8303      	strh	r3, [r0, #24]
		udd_set_setup_payload(
    18e2:	4b1f      	ldr	r3, [pc, #124]	; (1960 <udc_process_setup+0x660>)
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    18e4:	7005      	strb	r5, [r0, #0]
		udd_set_setup_payload(
    18e6:	4798      	blx	r3
    18e8:	e6fe      	b.n	16e8 <udc_process_setup+0x3e8>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    18ea:	2104      	movs	r1, #4
    18ec:	4824      	ldr	r0, [pc, #144]	; (1980 <udc_process_setup+0x680>)
    18ee:	4b1c      	ldr	r3, [pc, #112]	; (1960 <udc_process_setup+0x660>)
    18f0:	4798      	blx	r3
    18f2:	e6f9      	b.n	16e8 <udc_process_setup+0x3e8>
			if (conf_num >= udc_config.confdev_lsfs->
    18f4:	4a1b      	ldr	r2, [pc, #108]	; (1964 <udc_process_setup+0x664>)
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    18f6:	b2db      	uxtb	r3, r3
			if (conf_num >= udc_config.confdev_lsfs->
    18f8:	6811      	ldr	r1, [r2, #0]
    18fa:	7c49      	ldrb	r1, [r1, #17]
    18fc:	4299      	cmp	r1, r3
    18fe:	d800      	bhi.n	1902 <udc_process_setup+0x602>
    1900:	e519      	b.n	1336 <udc_process_setup+0x36>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
    1902:	6852      	ldr	r2, [r2, #4]
    1904:	00db      	lsls	r3, r3, #3
    1906:	5898      	ldr	r0, [r3, r2]
			udd_set_setup_payload(
    1908:	78c1      	ldrb	r1, [r0, #3]
    190a:	7883      	ldrb	r3, [r0, #2]
    190c:	0209      	lsls	r1, r1, #8
    190e:	4319      	orrs	r1, r3
    1910:	4b13      	ldr	r3, [pc, #76]	; (1960 <udc_process_setup+0x660>)
    1912:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1914:	68a3      	ldr	r3, [r4, #8]
    1916:	705d      	strb	r5, [r3, #1]
    1918:	e6e6      	b.n	16e8 <udc_process_setup+0x3e8>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    191a:	2114      	movs	r1, #20
    191c:	2514      	movs	r5, #20
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    191e:	2209      	movs	r2, #9
		str = udc_string_manufacturer_name;
    1920:	4b18      	ldr	r3, [pc, #96]	; (1984 <udc_process_setup+0x684>)
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1922:	4815      	ldr	r0, [pc, #84]	; (1978 <udc_process_setup+0x678>)
    1924:	781e      	ldrb	r6, [r3, #0]
    1926:	8046      	strh	r6, [r0, #2]
    1928:	e7b7      	b.n	189a <udc_process_setup+0x59a>
    192a:	7823      	ldrb	r3, [r4, #0]
    192c:	402b      	ands	r3, r5
    192e:	e4fd      	b.n	132c <udc_process_setup+0x2c>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1930:	210c      	movs	r1, #12
    1932:	250c      	movs	r5, #12
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1934:	2205      	movs	r2, #5
		str = udc_string_product_name;
    1936:	4b14      	ldr	r3, [pc, #80]	; (1988 <udc_process_setup+0x688>)
    1938:	e7f3      	b.n	1922 <udc_process_setup+0x622>
    193a:	4642      	mov	r2, r8
    193c:	6013      	str	r3, [r2, #0]
    193e:	e5b2      	b.n	14a6 <udc_process_setup+0x1a6>
    1940:	4642      	mov	r2, r8
    1942:	6013      	str	r3, [r2, #0]
    1944:	e552      	b.n	13ec <udc_process_setup+0xec>
    1946:	4642      	mov	r2, r8
    1948:	6013      	str	r3, [r2, #0]
    194a:	e704      	b.n	1756 <udc_process_setup+0x456>
    194c:	00002521 	.word	0x00002521
    1950:	20000dbc 	.word	0x20000dbc
    1954:	20000dc0 	.word	0x20000dc0
    1958:	00001041 	.word	0x00001041
    195c:	20000db8 	.word	0x20000db8
    1960:	00002855 	.word	0x00002855
    1964:	2000004c 	.word	0x2000004c
    1968:	00001211 	.word	0x00001211
    196c:	1fffffff 	.word	0x1fffffff
    1970:	20000dc4 	.word	0x20000dc4
    1974:	00002391 	.word	0x00002391
    1978:	20000098 	.word	0x20000098
    197c:	000232d8 	.word	0x000232d8
    1980:	200000b4 	.word	0x200000b4
    1984:	200000b8 	.word	0x200000b8
    1988:	200000c4 	.word	0x200000c4

0000198c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    198c:	4b0b      	ldr	r3, [pc, #44]	; (19bc <cpu_irq_enter_critical+0x30>)
    198e:	681a      	ldr	r2, [r3, #0]
    1990:	2a00      	cmp	r2, #0
    1992:	d105      	bne.n	19a0 <cpu_irq_enter_critical+0x14>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1994:	f3ef 8110 	mrs	r1, PRIMASK
		if (cpu_irq_is_enabled()) {
    1998:	2900      	cmp	r1, #0
    199a:	d005      	beq.n	19a8 <cpu_irq_enter_critical+0x1c>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    199c:	4908      	ldr	r1, [pc, #32]	; (19c0 <cpu_irq_enter_critical+0x34>)
    199e:	700a      	strb	r2, [r1, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    19a0:	681a      	ldr	r2, [r3, #0]
    19a2:	3201      	adds	r2, #1
    19a4:	601a      	str	r2, [r3, #0]
}
    19a6:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    19a8:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    19aa:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    19ae:	4a05      	ldr	r2, [pc, #20]	; (19c4 <cpu_irq_enter_critical+0x38>)
    19b0:	7011      	strb	r1, [r2, #0]
			cpu_irq_prev_interrupt_state = true;
    19b2:	4a03      	ldr	r2, [pc, #12]	; (19c0 <cpu_irq_enter_critical+0x34>)
    19b4:	3101      	adds	r1, #1
    19b6:	7011      	strb	r1, [r2, #0]
    19b8:	e7f2      	b.n	19a0 <cpu_irq_enter_critical+0x14>
    19ba:	46c0      	nop			; (mov r8, r8)
    19bc:	20000dc8 	.word	0x20000dc8
    19c0:	20000dcc 	.word	0x20000dcc
    19c4:	200000ca 	.word	0x200000ca

000019c8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    19c8:	4b08      	ldr	r3, [pc, #32]	; (19ec <cpu_irq_leave_critical+0x24>)
    19ca:	681a      	ldr	r2, [r3, #0]
    19cc:	3a01      	subs	r2, #1
    19ce:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    19d0:	681b      	ldr	r3, [r3, #0]
    19d2:	2b00      	cmp	r3, #0
    19d4:	d109      	bne.n	19ea <cpu_irq_leave_critical+0x22>
    19d6:	4b06      	ldr	r3, [pc, #24]	; (19f0 <cpu_irq_leave_critical+0x28>)
    19d8:	781b      	ldrb	r3, [r3, #0]
    19da:	2b00      	cmp	r3, #0
    19dc:	d005      	beq.n	19ea <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    19de:	2201      	movs	r2, #1
    19e0:	4b04      	ldr	r3, [pc, #16]	; (19f4 <cpu_irq_leave_critical+0x2c>)
    19e2:	701a      	strb	r2, [r3, #0]
    19e4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    19e8:	b662      	cpsie	i
	}
}
    19ea:	4770      	bx	lr
    19ec:	20000dc8 	.word	0x20000dc8
    19f0:	20000dcc 	.word	0x20000dcc
    19f4:	200000ca 	.word	0x200000ca

000019f8 <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    19f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    19fa:	4657      	mov	r7, sl
    19fc:	464e      	mov	r6, r9
    19fe:	46de      	mov	lr, fp
    1a00:	4645      	mov	r5, r8
    1a02:	b5e0      	push	{r5, r6, r7, lr}
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    1a04:	798e      	ldrb	r6, [r1, #6]
{
    1a06:	b083      	sub	sp, #12

	if (ep & USB_EP_DIR_IN) {
    1a08:	b273      	sxtb	r3, r6
{
    1a0a:	468a      	mov	sl, r1
	if (ep & USB_EP_DIR_IN) {
    1a0c:	2b00      	cmp	r3, #0
    1a0e:	da00      	bge.n	1a12 <udd_ep_transfer_process+0x1a>
    1a10:	e071      	b.n	1af6 <udd_ep_transfer_process+0xfe>
	if ((ep == 0) || (ep == 0x80)) {
    1a12:	2e00      	cmp	r6, #0
    1a14:	d033      	beq.n	1a7e <udd_ep_transfer_process+0x86>
    1a16:	230f      	movs	r3, #15
    1a18:	4033      	ands	r3, r6
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    1a1a:	005c      	lsls	r4, r3, #1
    1a1c:	3c02      	subs	r4, #2
	ep_size = ptr_job->ep_size;
    1a1e:	00a5      	lsls	r5, r4, #2
    1a20:	4699      	mov	r9, r3
    1a22:	4f6f      	ldr	r7, [pc, #444]	; (1be0 <udd_ep_transfer_process+0x1e8>)
    1a24:	192b      	adds	r3, r5, r4
    1a26:	009b      	lsls	r3, r3, #2
    1a28:	18fb      	adds	r3, r7, r3
    1a2a:	8a1a      	ldrh	r2, [r3, #16]
    1a2c:	9201      	str	r2, [sp, #4]
	nb_trans = ep_callback_para->received_bytes;
    1a2e:	880a      	ldrh	r2, [r1, #0]
    1a30:	4693      	mov	fp, r2
	if (ptr_job->b_use_out_cache_buffer) {
    1a32:	7c9a      	ldrb	r2, [r3, #18]
    1a34:	0752      	lsls	r2, r2, #29
    1a36:	d426      	bmi.n	1a86 <udd_ep_transfer_process+0x8e>
	ptr_job->nb_trans += nb_trans;
    1a38:	192b      	adds	r3, r5, r4
    1a3a:	009b      	lsls	r3, r3, #2
    1a3c:	18fb      	adds	r3, r7, r3
    1a3e:	68da      	ldr	r2, [r3, #12]
    1a40:	445a      	add	r2, fp
    1a42:	4690      	mov	r8, r2
    1a44:	60da      	str	r2, [r3, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    1a46:	689a      	ldr	r2, [r3, #8]
    1a48:	4590      	cmp	r8, r2
    1a4a:	d81a      	bhi.n	1a82 <udd_ep_transfer_process+0x8a>
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    1a4c:	4653      	mov	r3, sl
    1a4e:	889b      	ldrh	r3, [r3, #4]
    1a50:	455b      	cmp	r3, fp
    1a52:	d02b      	beq.n	1aac <udd_ep_transfer_process+0xb4>
	ptr_job->busy = false;
    1a54:	2001      	movs	r0, #1
    1a56:	192c      	adds	r4, r5, r4
    1a58:	00a4      	lsls	r4, r4, #2
    1a5a:	1939      	adds	r1, r7, r4
    1a5c:	7c8b      	ldrb	r3, [r1, #18]
    1a5e:	4383      	bics	r3, r0
    1a60:	748b      	strb	r3, [r1, #18]
	if (NULL != ptr_job->call_trans) {
    1a62:	593b      	ldr	r3, [r7, r4]
    1a64:	2b00      	cmp	r3, #0
    1a66:	d003      	beq.n	1a70 <udd_ep_transfer_process+0x78>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    1a68:	68c9      	ldr	r1, [r1, #12]
    1a6a:	0032      	movs	r2, r6
    1a6c:	2000      	movs	r0, #0
    1a6e:	4798      	blx	r3
		udd_ep_trans_in_next(pointer);
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    1a70:	b003      	add	sp, #12
    1a72:	bc3c      	pop	{r2, r3, r4, r5}
    1a74:	4690      	mov	r8, r2
    1a76:	4699      	mov	r9, r3
    1a78:	46a2      	mov	sl, r4
    1a7a:	46ab      	mov	fp, r5
    1a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ep_size = ptr_job->ep_size;
    1a7e:	8a33      	ldrh	r3, [r6, #16]
    1a80:	deff      	udf	#255	; 0xff
		ptr_job->nb_trans = ptr_job->buf_size;
    1a82:	60da      	str	r2, [r3, #12]
    1a84:	e7e6      	b.n	1a54 <udd_ep_transfer_process+0x5c>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    1a86:	68d9      	ldr	r1, [r3, #12]
    1a88:	685a      	ldr	r2, [r3, #4]
    1a8a:	468c      	mov	ip, r1
    1a8c:	6898      	ldr	r0, [r3, #8]
    1a8e:	4462      	add	r2, ip
    1a90:	9901      	ldr	r1, [sp, #4]
    1a92:	4b54      	ldr	r3, [pc, #336]	; (1be4 <udd_ep_transfer_process+0x1ec>)
    1a94:	4690      	mov	r8, r2
    1a96:	4798      	blx	r3
    1a98:	464b      	mov	r3, r9
    1a9a:	000a      	movs	r2, r1
    1a9c:	3b01      	subs	r3, #1
    1a9e:	4952      	ldr	r1, [pc, #328]	; (1be8 <udd_ep_transfer_process+0x1f0>)
    1aa0:	019b      	lsls	r3, r3, #6
    1aa2:	1859      	adds	r1, r3, r1
    1aa4:	4640      	mov	r0, r8
    1aa6:	4b51      	ldr	r3, [pc, #324]	; (1bec <udd_ep_transfer_process+0x1f4>)
    1aa8:	4798      	blx	r3
    1aaa:	e7c5      	b.n	1a38 <udd_ep_transfer_process+0x40>
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    1aac:	4590      	cmp	r8, r2
    1aae:	d0d1      	beq.n	1a54 <udd_ep_transfer_process+0x5c>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    1ab0:	4643      	mov	r3, r8
    1ab2:	1ad2      	subs	r2, r2, r3
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    1ab4:	4b4e      	ldr	r3, [pc, #312]	; (1bf0 <udd_ep_transfer_process+0x1f8>)
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    1ab6:	b296      	uxth	r6, r2
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    1ab8:	469a      	mov	sl, r3
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    1aba:	9901      	ldr	r1, [sp, #4]
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    1abc:	429e      	cmp	r6, r3
    1abe:	d96c      	bls.n	1b9a <udd_ep_transfer_process+0x1a2>
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    1ac0:	0018      	movs	r0, r3
    1ac2:	4b4c      	ldr	r3, [pc, #304]	; (1bf4 <udd_ep_transfer_process+0x1fc>)
    1ac4:	4798      	blx	r3
    1ac6:	4653      	mov	r3, sl
    1ac8:	1a5b      	subs	r3, r3, r1
    1aca:	b29b      	uxth	r3, r3
			ptr_job->b_use_out_cache_buffer = true;
    1acc:	192c      	adds	r4, r5, r4
		if (next_trans < ep_size) {
    1ace:	9901      	ldr	r1, [sp, #4]
			ptr_job->b_use_out_cache_buffer = true;
    1ad0:	00a4      	lsls	r4, r4, #2
    1ad2:	193f      	adds	r7, r7, r4
		if (next_trans < ep_size) {
    1ad4:	4299      	cmp	r1, r3
    1ad6:	d959      	bls.n	1b8c <udd_ep_transfer_process+0x194>
			ptr_job->b_use_out_cache_buffer = true;
    1ad8:	2204      	movs	r2, #4
    1ada:	7cbb      	ldrb	r3, [r7, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    1adc:	4c46      	ldr	r4, [pc, #280]	; (1bf8 <udd_ep_transfer_process+0x200>)
			ptr_job->b_use_out_cache_buffer = true;
    1ade:	4313      	orrs	r3, r2
    1ae0:	74bb      	strb	r3, [r7, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    1ae2:	464b      	mov	r3, r9
    1ae4:	1e5a      	subs	r2, r3, #1
    1ae6:	4b40      	ldr	r3, [pc, #256]	; (1be8 <udd_ep_transfer_process+0x1f0>)
    1ae8:	0192      	lsls	r2, r2, #6
    1aea:	18d2      	adds	r2, r2, r3
    1aec:	4843      	ldr	r0, [pc, #268]	; (1bfc <udd_ep_transfer_process+0x204>)
    1aee:	000b      	movs	r3, r1
    1af0:	4649      	mov	r1, r9
    1af2:	47a0      	blx	r4
    1af4:	e7bc      	b.n	1a70 <udd_ep_transfer_process+0x78>
	if ((ep == 0) || (ep == 0x80)) {
    1af6:	2e80      	cmp	r6, #128	; 0x80
    1af8:	d045      	beq.n	1b86 <udd_ep_transfer_process+0x18e>
    1afa:	230f      	movs	r3, #15
    1afc:	4033      	ands	r3, r6
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    1afe:	005c      	lsls	r4, r3, #1
    1b00:	4699      	mov	r9, r3
    1b02:	1e63      	subs	r3, r4, #1
	ep_size = ptr_job->ep_size;
    1b04:	009c      	lsls	r4, r3, #2
    1b06:	18e0      	adds	r0, r4, r3
    1b08:	4f35      	ldr	r7, [pc, #212]	; (1be0 <udd_ep_transfer_process+0x1e8>)
    1b0a:	0080      	lsls	r0, r0, #2
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    1b0c:	4698      	mov	r8, r3
	ep_size = ptr_job->ep_size;
    1b0e:	183b      	adds	r3, r7, r0
    1b10:	8a19      	ldrh	r1, [r3, #16]
    1b12:	001a      	movs	r2, r3
    1b14:	468b      	mov	fp, r1
	ptr_job->nb_trans += nb_trans;
    1b16:	4651      	mov	r1, sl
    1b18:	884d      	ldrh	r5, [r1, #2]
    1b1a:	68d9      	ldr	r1, [r3, #12]
	ep_size = ptr_job->ep_size;
    1b1c:	3210      	adds	r2, #16
	ptr_job->nb_trans += nb_trans;
    1b1e:	468c      	mov	ip, r1
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    1b20:	6899      	ldr	r1, [r3, #8]
	ptr_job->nb_trans += nb_trans;
    1b22:	4465      	add	r5, ip
    1b24:	60dd      	str	r5, [r3, #12]
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    1b26:	428d      	cmp	r5, r1
    1b28:	d03d      	beq.n	1ba6 <udd_ep_transfer_process+0x1ae>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    1b2a:	1b4e      	subs	r6, r1, r5
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    1b2c:	4b30      	ldr	r3, [pc, #192]	; (1bf0 <udd_ep_transfer_process+0x1f8>)
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    1b2e:	b2b6      	uxth	r6, r6
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    1b30:	469a      	mov	sl, r3
    1b32:	429e      	cmp	r6, r3
    1b34:	d906      	bls.n	1b44 <udd_ep_transfer_process+0x14c>
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    1b36:	0018      	movs	r0, r3
    1b38:	4659      	mov	r1, fp
    1b3a:	4b2e      	ldr	r3, [pc, #184]	; (1bf4 <udd_ep_transfer_process+0x1fc>)
    1b3c:	4798      	blx	r3
    1b3e:	4653      	mov	r3, sl
    1b40:	1a5e      	subs	r6, r3, r1
    1b42:	b2b6      	uxth	r6, r6
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    1b44:	4643      	mov	r3, r8
    1b46:	18e3      	adds	r3, r4, r3
    1b48:	009b      	lsls	r3, r3, #2
    1b4a:	18fb      	adds	r3, r7, r3
    1b4c:	7c9a      	ldrb	r2, [r3, #18]
    1b4e:	2300      	movs	r3, #0
    1b50:	0792      	lsls	r2, r2, #30
    1b52:	d507      	bpl.n	1b64 <udd_ep_transfer_process+0x16c>
    1b54:	4b23      	ldr	r3, [pc, #140]	; (1be4 <udd_ep_transfer_process+0x1ec>)
    1b56:	4659      	mov	r1, fp
    1b58:	0030      	movs	r0, r6
    1b5a:	4798      	blx	r3
    1b5c:	b289      	uxth	r1, r1
    1b5e:	424b      	negs	r3, r1
    1b60:	414b      	adcs	r3, r1
    1b62:	b2db      	uxtb	r3, r3
    1b64:	2002      	movs	r0, #2
    1b66:	4444      	add	r4, r8
    1b68:	00a4      	lsls	r4, r4, #2
    1b6a:	193f      	adds	r7, r7, r4
    1b6c:	7cba      	ldrb	r2, [r7, #18]
    1b6e:	005b      	lsls	r3, r3, #1
    1b70:	4382      	bics	r2, r0
    1b72:	4313      	orrs	r3, r2
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    1b74:	687a      	ldr	r2, [r7, #4]
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    1b76:	74bb      	strb	r3, [r7, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    1b78:	1952      	adds	r2, r2, r5
    1b7a:	0033      	movs	r3, r6
    1b7c:	4649      	mov	r1, r9
    1b7e:	4c20      	ldr	r4, [pc, #128]	; (1c00 <udd_ep_transfer_process+0x208>)
    1b80:	481e      	ldr	r0, [pc, #120]	; (1bfc <udd_ep_transfer_process+0x204>)
    1b82:	47a0      	blx	r4
    1b84:	e774      	b.n	1a70 <udd_ep_transfer_process+0x78>
	ep_size = ptr_job->ep_size;
    1b86:	2300      	movs	r3, #0
    1b88:	8a1b      	ldrh	r3, [r3, #16]
    1b8a:	deff      	udf	#255	; 0xff
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    1b8c:	687a      	ldr	r2, [r7, #4]
    1b8e:	4649      	mov	r1, r9
    1b90:	4442      	add	r2, r8
    1b92:	4c19      	ldr	r4, [pc, #100]	; (1bf8 <udd_ep_transfer_process+0x200>)
    1b94:	4819      	ldr	r0, [pc, #100]	; (1bfc <udd_ep_transfer_process+0x204>)
    1b96:	47a0      	blx	r4
    1b98:	e76a      	b.n	1a70 <udd_ep_transfer_process+0x78>
			next_trans -= next_trans % ep_size;
    1b9a:	4b12      	ldr	r3, [pc, #72]	; (1be4 <udd_ep_transfer_process+0x1ec>)
    1b9c:	0030      	movs	r0, r6
    1b9e:	4798      	blx	r3
    1ba0:	1a73      	subs	r3, r6, r1
    1ba2:	b29b      	uxth	r3, r3
    1ba4:	e792      	b.n	1acc <udd_ep_transfer_process+0xd4>
	if (ptr_job->b_shortpacket) {
    1ba6:	2102      	movs	r1, #2
    1ba8:	7c9c      	ldrb	r4, [r3, #18]
    1baa:	4221      	tst	r1, r4
    1bac:	d10c      	bne.n	1bc8 <udd_ep_transfer_process+0x1d0>
	ptr_job->busy = false;
    1bae:	2101      	movs	r1, #1
    1bb0:	7893      	ldrb	r3, [r2, #2]
    1bb2:	438b      	bics	r3, r1
    1bb4:	7093      	strb	r3, [r2, #2]
	if (NULL != ptr_job->call_trans) {
    1bb6:	583b      	ldr	r3, [r7, r0]
    1bb8:	2b00      	cmp	r3, #0
    1bba:	d100      	bne.n	1bbe <udd_ep_transfer_process+0x1c6>
    1bbc:	e758      	b.n	1a70 <udd_ep_transfer_process+0x78>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    1bbe:	0032      	movs	r2, r6
    1bc0:	0029      	movs	r1, r5
    1bc2:	2000      	movs	r0, #0
    1bc4:	4798      	blx	r3
    1bc6:	e753      	b.n	1a70 <udd_ep_transfer_process+0x78>
		ptr_job->b_shortpacket = false;
    1bc8:	7890      	ldrb	r0, [r2, #2]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    1bca:	4c0d      	ldr	r4, [pc, #52]	; (1c00 <udd_ep_transfer_process+0x208>)
		ptr_job->b_shortpacket = false;
    1bcc:	4388      	bics	r0, r1
    1bce:	7090      	strb	r0, [r2, #2]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    1bd0:	685a      	ldr	r2, [r3, #4]
    1bd2:	4649      	mov	r1, r9
    1bd4:	1952      	adds	r2, r2, r5
    1bd6:	2300      	movs	r3, #0
    1bd8:	4808      	ldr	r0, [pc, #32]	; (1bfc <udd_ep_transfer_process+0x204>)
    1bda:	47a0      	blx	r4
    1bdc:	e748      	b.n	1a70 <udd_ep_transfer_process+0x78>
    1bde:	46c0      	nop			; (mov r8, r8)
    1be0:	20000dd4 	.word	0x20000dd4
    1be4:	0001c099 	.word	0x0001c099
    1be8:	20001258 	.word	0x20001258
    1bec:	0001efe9 	.word	0x0001efe9
    1bf0:	00001fff 	.word	0x00001fff
    1bf4:	0001c26d 	.word	0x0001c26d
    1bf8:	000030e5 	.word	0x000030e5
    1bfc:	200012d8 	.word	0x200012d8
    1c00:	00003099 	.word	0x00003099

00001c04 <_usb_on_bus_reset>:
 * \brief Control endpoint Reset callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_bus_reset(struct usb_module *module_inst, void *pointer)
{
    1c04:	b530      	push	{r4, r5, lr}
    1c06:	0004      	movs	r4, r0
    1c08:	b083      	sub	sp, #12
	// Reset USB Device Stack Core
	udc_reset();
    1c0a:	4b1e      	ldr	r3, [pc, #120]	; (1c84 <_usb_on_bus_reset+0x80>)
    1c0c:	4798      	blx	r3
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    1c0e:	2380      	movs	r3, #128	; 0x80
    1c10:	6822      	ldr	r2, [r4, #0]
	 usb_device_endpoint_get_config_defaults(&config_ep0);
    1c12:	ad01      	add	r5, sp, #4
    1c14:	7293      	strb	r3, [r2, #10]
    1c16:	0028      	movs	r0, r5
    1c18:	4b1b      	ldr	r3, [pc, #108]	; (1c88 <_usb_on_bus_reset+0x84>)
    1c1a:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    1c1c:	2303      	movs	r3, #3
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    1c1e:	0029      	movs	r1, r5
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    1c20:	706b      	strb	r3, [r5, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    1c22:	0020      	movs	r0, r4
    1c24:	4b19      	ldr	r3, [pc, #100]	; (1c8c <_usb_on_bus_reset+0x88>)
    1c26:	4798      	blx	r3
	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    1c28:	4919      	ldr	r1, [pc, #100]	; (1c90 <_usb_on_bus_reset+0x8c>)
    1c2a:	0020      	movs	r0, r4
    1c2c:	4b19      	ldr	r3, [pc, #100]	; (1c94 <_usb_on_bus_reset+0x90>)
    1c2e:	4798      	blx	r3
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    1c30:	4d19      	ldr	r5, [pc, #100]	; (1c98 <_usb_on_bus_reset+0x94>)
    1c32:	4b1a      	ldr	r3, [pc, #104]	; (1c9c <_usb_on_bus_reset+0x98>)
    1c34:	2202      	movs	r2, #2
    1c36:	2100      	movs	r1, #0
    1c38:	0020      	movs	r0, r4
    1c3a:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    1c3c:	4b18      	ldr	r3, [pc, #96]	; (1ca0 <_usb_on_bus_reset+0x9c>)
    1c3e:	2200      	movs	r2, #0
    1c40:	2100      	movs	r1, #0
    1c42:	0020      	movs	r0, r4
    1c44:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    1c46:	4b17      	ldr	r3, [pc, #92]	; (1ca4 <_usb_on_bus_reset+0xa0>)
    1c48:	2201      	movs	r2, #1
    1c4a:	2100      	movs	r1, #0
    1c4c:	0020      	movs	r0, r4
    1c4e:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    1c50:	4d15      	ldr	r5, [pc, #84]	; (1ca8 <_usb_on_bus_reset+0xa4>)
    1c52:	2202      	movs	r2, #2
    1c54:	2100      	movs	r1, #0
    1c56:	0020      	movs	r0, r4
    1c58:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    1c5a:	2200      	movs	r2, #0
    1c5c:	2100      	movs	r1, #0
    1c5e:	0020      	movs	r0, r4
    1c60:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    1c62:	2201      	movs	r2, #1
    1c64:	2100      	movs	r1, #0
    1c66:	0020      	movs	r0, r4
    1c68:	47a8      	blx	r5
    1c6a:	6821      	ldr	r1, [r4, #0]
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    1c6c:	4a0f      	ldr	r2, [pc, #60]	; (1cac <_usb_on_bus_reset+0xa8>)
    1c6e:	890b      	ldrh	r3, [r1, #8]
    1c70:	401a      	ands	r2, r3
    1c72:	2380      	movs	r3, #128	; 0x80
    1c74:	00db      	lsls	r3, r3, #3
    1c76:	4313      	orrs	r3, r2
	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    1c78:	2200      	movs	r2, #0
    1c7a:	810b      	strh	r3, [r1, #8]
    1c7c:	4b0c      	ldr	r3, [pc, #48]	; (1cb0 <_usb_on_bus_reset+0xac>)
    1c7e:	701a      	strb	r2, [r3, #0]
	usb_device_set_address(module_inst,0);
	udd_ctrl_ep_enable(module_inst);
}
    1c80:	b003      	add	sp, #12
    1c82:	bd30      	pop	{r4, r5, pc}
    1c84:	00001211 	.word	0x00001211
    1c88:	00002d8d 	.word	0x00002d8d
    1c8c:	00002d9d 	.word	0x00002d9d
    1c90:	20001458 	.word	0x20001458
    1c94:	0000312d 	.word	0x0000312d
    1c98:	00002bdd 	.word	0x00002bdd
    1c9c:	00001ea5 	.word	0x00001ea5
    1ca0:	000021a9 	.word	0x000021a9
    1ca4:	00001cb5 	.word	0x00001cb5
    1ca8:	00002c2d 	.word	0x00002c2d
    1cac:	fffff3ff 	.word	0xfffff3ff
    1cb0:	20000dd2 	.word	0x20000dd2

00001cb4 <_usb_ep0_on_tansfer_fail>:
{
    1cb4:	b510      	push	{r4, lr}
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    1cb6:	7989      	ldrb	r1, [r1, #6]
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    1cb8:	4a12      	ldr	r2, [pc, #72]	; (1d04 <_usb_ep0_on_tansfer_fail+0x50>)
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    1cba:	b24b      	sxtb	r3, r1
    1cbc:	2b00      	cmp	r3, #0
    1cbe:	db05      	blt.n	1ccc <_usb_ep0_on_tansfer_fail+0x18>
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    1cc0:	7813      	ldrb	r3, [r2, #0]
    1cc2:	2b02      	cmp	r3, #2
    1cc4:	d00b      	beq.n	1cde <_usb_ep0_on_tansfer_fail+0x2a>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    1cc6:	2b03      	cmp	r3, #3
    1cc8:	d005      	beq.n	1cd6 <_usb_ep0_on_tansfer_fail+0x22>
}
    1cca:	bd10      	pop	{r4, pc}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    1ccc:	7813      	ldrb	r3, [r2, #0]
    1cce:	2b01      	cmp	r3, #1
    1cd0:	d008      	beq.n	1ce4 <_usb_ep0_on_tansfer_fail+0x30>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    1cd2:	2b04      	cmp	r3, #4
    1cd4:	d1f9      	bne.n	1cca <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    1cd6:	480c      	ldr	r0, [pc, #48]	; (1d08 <_usb_ep0_on_tansfer_fail+0x54>)
    1cd8:	4b0c      	ldr	r3, [pc, #48]	; (1d0c <_usb_ep0_on_tansfer_fail+0x58>)
    1cda:	4798      	blx	r3
}
    1cdc:	e7f5      	b.n	1cca <_usb_ep0_on_tansfer_fail+0x16>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    1cde:	3302      	adds	r3, #2
    1ce0:	7013      	strb	r3, [r2, #0]
    1ce2:	e7f2      	b.n	1cca <_usb_ep0_on_tansfer_fail+0x16>
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    1ce4:	4c08      	ldr	r4, [pc, #32]	; (1d08 <_usb_ep0_on_tansfer_fail+0x54>)
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    1ce6:	3302      	adds	r3, #2
    1ce8:	7013      	strb	r3, [r2, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    1cea:	4909      	ldr	r1, [pc, #36]	; (1d10 <_usb_ep0_on_tansfer_fail+0x5c>)
    1cec:	0020      	movs	r0, r4
    1cee:	4b09      	ldr	r3, [pc, #36]	; (1d14 <_usb_ep0_on_tansfer_fail+0x60>)
    1cf0:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    1cf2:	4b09      	ldr	r3, [pc, #36]	; (1d18 <_usb_ep0_on_tansfer_fail+0x64>)
    1cf4:	2100      	movs	r1, #0
    1cf6:	689a      	ldr	r2, [r3, #8]
    1cf8:	0020      	movs	r0, r4
    1cfa:	2300      	movs	r3, #0
    1cfc:	4c07      	ldr	r4, [pc, #28]	; (1d1c <_usb_ep0_on_tansfer_fail+0x68>)
    1cfe:	47a0      	blx	r4
    1d00:	e7e3      	b.n	1cca <_usb_ep0_on_tansfer_fail+0x16>
    1d02:	46c0      	nop			; (mov r8, r8)
    1d04:	20000dd2 	.word	0x20000dd2
    1d08:	200012d8 	.word	0x200012d8
    1d0c:	00002ffd 	.word	0x00002ffd
    1d10:	20001458 	.word	0x20001458
    1d14:	0000312d 	.word	0x0000312d
    1d18:	20001440 	.word	0x20001440
    1d1c:	00003099 	.word	0x00003099

00001d20 <udd_ctrl_in_sent>:
{
    1d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    1d22:	4d1f      	ldr	r5, [pc, #124]	; (1da0 <udd_ctrl_in_sent+0x80>)
    1d24:	4e1f      	ldr	r6, [pc, #124]	; (1da4 <udd_ctrl_in_sent+0x84>)
    1d26:	882a      	ldrh	r2, [r5, #0]
    1d28:	89b4      	ldrh	r4, [r6, #12]
    1d2a:	1aa4      	subs	r4, r4, r2
    1d2c:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
    1d2e:	2c00      	cmp	r4, #0
    1d30:	d010      	beq.n	1d54 <udd_ctrl_in_sent+0x34>
    1d32:	4f1d      	ldr	r7, [pc, #116]	; (1da8 <udd_ctrl_in_sent+0x88>)
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    1d34:	2c3f      	cmp	r4, #63	; 0x3f
    1d36:	d923      	bls.n	1d80 <udd_ctrl_in_sent+0x60>
    1d38:	2340      	movs	r3, #64	; 0x40
		b_shortpacket = false;
    1d3a:	2100      	movs	r1, #0
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    1d3c:	2440      	movs	r4, #64	; 0x40
    1d3e:	7039      	strb	r1, [r7, #0]
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    1d40:	68b1      	ldr	r1, [r6, #8]
    1d42:	481a      	ldr	r0, [pc, #104]	; (1dac <udd_ctrl_in_sent+0x8c>)
    1d44:	188a      	adds	r2, r1, r2
    1d46:	4e1a      	ldr	r6, [pc, #104]	; (1db0 <udd_ctrl_in_sent+0x90>)
    1d48:	2100      	movs	r1, #0
    1d4a:	47b0      	blx	r6
	udd_ctrl_payload_nb_trans += nb_remain;
    1d4c:	882b      	ldrh	r3, [r5, #0]
    1d4e:	18e4      	adds	r4, r4, r3
    1d50:	802c      	strh	r4, [r5, #0]
}
    1d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    1d54:	4917      	ldr	r1, [pc, #92]	; (1db4 <udd_ctrl_in_sent+0x94>)
    1d56:	880b      	ldrh	r3, [r1, #0]
    1d58:	18d3      	adds	r3, r2, r3
    1d5a:	b29b      	uxth	r3, r3
    1d5c:	800b      	strh	r3, [r1, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    1d5e:	88f1      	ldrh	r1, [r6, #6]
    1d60:	4299      	cmp	r1, r3
    1d62:	d010      	beq.n	1d86 <udd_ctrl_in_sent+0x66>
    1d64:	4f10      	ldr	r7, [pc, #64]	; (1da8 <udd_ctrl_in_sent+0x88>)
    1d66:	783b      	ldrb	r3, [r7, #0]
    1d68:	2b00      	cmp	r3, #0
    1d6a:	d10c      	bne.n	1d86 <udd_ctrl_in_sent+0x66>
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    1d6c:	6973      	ldr	r3, [r6, #20]
    1d6e:	2b00      	cmp	r3, #0
    1d70:	d004      	beq.n	1d7c <udd_ctrl_in_sent+0x5c>
    1d72:	4798      	blx	r3
    1d74:	2800      	cmp	r0, #0
    1d76:	d10e      	bne.n	1d96 <udd_ctrl_in_sent+0x76>
    1d78:	2300      	movs	r3, #0
    1d7a:	882a      	ldrh	r2, [r5, #0]
		b_shortpacket = true;
    1d7c:	2101      	movs	r1, #1
    1d7e:	e7de      	b.n	1d3e <udd_ctrl_in_sent+0x1e>
    1d80:	0023      	movs	r3, r4
    1d82:	2101      	movs	r1, #1
    1d84:	e7db      	b.n	1d3e <udd_ctrl_in_sent+0x1e>
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    1d86:	2204      	movs	r2, #4
    1d88:	4b0b      	ldr	r3, [pc, #44]	; (1db8 <udd_ctrl_in_sent+0x98>)
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    1d8a:	490c      	ldr	r1, [pc, #48]	; (1dbc <udd_ctrl_in_sent+0x9c>)
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    1d8c:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    1d8e:	4807      	ldr	r0, [pc, #28]	; (1dac <udd_ctrl_in_sent+0x8c>)
    1d90:	4b0b      	ldr	r3, [pc, #44]	; (1dc0 <udd_ctrl_in_sent+0xa0>)
    1d92:	4798      	blx	r3
			return;
    1d94:	e7dd      	b.n	1d52 <udd_ctrl_in_sent+0x32>
			udd_ctrl_payload_nb_trans = 0;
    1d96:	802c      	strh	r4, [r5, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    1d98:	89b4      	ldrh	r4, [r6, #12]
    1d9a:	2200      	movs	r2, #0
    1d9c:	e7ca      	b.n	1d34 <udd_ctrl_in_sent+0x14>
    1d9e:	46c0      	nop			; (mov r8, r8)
    1da0:	20000dce 	.word	0x20000dce
    1da4:	20001440 	.word	0x20001440
    1da8:	20000dcd 	.word	0x20000dcd
    1dac:	200012d8 	.word	0x200012d8
    1db0:	00003099 	.word	0x00003099
    1db4:	20000dd0 	.word	0x20000dd0
    1db8:	20000dd2 	.word	0x20000dd2
    1dbc:	20001458 	.word	0x20001458
    1dc0:	0000312d 	.word	0x0000312d

00001dc4 <_usb_on_sof_notify>:
{
    1dc4:	b510      	push	{r4, lr}
	udc_sof_notify();
    1dc6:	4b01      	ldr	r3, [pc, #4]	; (1dcc <_usb_on_sof_notify+0x8>)
    1dc8:	4798      	blx	r3
}
    1dca:	bd10      	pop	{r4, pc}
    1dcc:	000012c1 	.word	0x000012c1

00001dd0 <cpu_irq_restore.part.0>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
		cpu_irq_enable();
    1dd0:	2201      	movs	r2, #1
    1dd2:	4b03      	ldr	r3, [pc, #12]	; (1de0 <cpu_irq_restore.part.0+0x10>)
    1dd4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    1dd6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1dda:	b662      	cpsie	i
}
    1ddc:	4770      	bx	lr
    1dde:	46c0      	nop			; (mov r8, r8)
    1de0:	200000ca 	.word	0x200000ca

00001de4 <_usb_device_lpm_suspend>:
{
    1de4:	b530      	push	{r4, r5, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    1de6:	4c27      	ldr	r4, [pc, #156]	; (1e84 <_usb_device_lpm_suspend+0xa0>)
{
    1de8:	b085      	sub	sp, #20
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    1dea:	2106      	movs	r1, #6
    1dec:	0020      	movs	r0, r4
    1dee:	4d26      	ldr	r5, [pc, #152]	; (1e88 <_usb_device_lpm_suspend+0xa4>)
    1df0:	47a8      	blx	r5
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    1df2:	2104      	movs	r1, #4
    1df4:	0020      	movs	r0, r4
    1df6:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    1df8:	0020      	movs	r0, r4
    1dfa:	4b24      	ldr	r3, [pc, #144]	; (1e8c <_usb_device_lpm_suspend+0xa8>)
    1dfc:	2102      	movs	r1, #2
    1dfe:	4798      	blx	r3
	enum sleepmgr_mode sleep_mode[] = {
    1e00:	4b23      	ldr	r3, [pc, #140]	; (1e90 <_usb_device_lpm_suspend+0xac>)
	if (udd_state == new_state) {
    1e02:	4c24      	ldr	r4, [pc, #144]	; (1e94 <_usb_device_lpm_suspend+0xb0>)
	enum sleepmgr_mode sleep_mode[] = {
    1e04:	9301      	str	r3, [sp, #4]
	if (udd_state == new_state) {
    1e06:	7823      	ldrb	r3, [r4, #0]
    1e08:	2b02      	cmp	r3, #2
    1e0a:	d01e      	beq.n	1e4a <_usb_device_lpm_suspend+0x66>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    1e0c:	4b22      	ldr	r3, [pc, #136]	; (1e98 <_usb_device_lpm_suspend+0xb4>)
    1e0e:	785a      	ldrb	r2, [r3, #1]
    1e10:	2aff      	cmp	r2, #255	; 0xff
    1e12:	d01c      	beq.n	1e4e <_usb_device_lpm_suspend+0x6a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1e14:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1e18:	4251      	negs	r1, r2
    1e1a:	414a      	adcs	r2, r1
    1e1c:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    1e1e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    1e20:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1e24:	2200      	movs	r2, #0
    1e26:	491d      	ldr	r1, [pc, #116]	; (1e9c <_usb_device_lpm_suspend+0xb8>)
    1e28:	700a      	strb	r2, [r1, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    1e2a:	785a      	ldrb	r2, [r3, #1]
	return flags;
    1e2c:	9802      	ldr	r0, [sp, #8]
    1e2e:	3201      	adds	r2, #1
    1e30:	705a      	strb	r2, [r3, #1]
	if (cpu_irq_is_enabled_flags(flags))
    1e32:	2800      	cmp	r0, #0
    1e34:	d004      	beq.n	1e40 <_usb_device_lpm_suspend+0x5c>
		cpu_irq_enable();
    1e36:	2201      	movs	r2, #1
    1e38:	700a      	strb	r2, [r1, #0]
    1e3a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1e3e:	b662      	cpsie	i
	if (udd_state != UDD_STATE_OFF) {
    1e40:	7822      	ldrb	r2, [r4, #0]
    1e42:	2a00      	cmp	r2, #0
    1e44:	d104      	bne.n	1e50 <_usb_device_lpm_suspend+0x6c>
	udd_state = new_state;
    1e46:	2302      	movs	r3, #2
    1e48:	7023      	strb	r3, [r4, #0]
}
    1e4a:	b005      	add	sp, #20
    1e4c:	bd30      	pop	{r4, r5, pc}
    1e4e:	e7fe      	b.n	1e4e <_usb_device_lpm_suspend+0x6a>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    1e50:	a801      	add	r0, sp, #4
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    1e52:	5c82      	ldrb	r2, [r0, r2]
    1e54:	5c98      	ldrb	r0, [r3, r2]
    1e56:	2800      	cmp	r0, #0
    1e58:	d012      	beq.n	1e80 <_usb_device_lpm_suspend+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1e5a:	f3ef 8010 	mrs	r0, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1e5e:	4245      	negs	r5, r0
    1e60:	4168      	adcs	r0, r5
    1e62:	9003      	str	r0, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    1e64:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    1e66:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1e6a:	2000      	movs	r0, #0
    1e6c:	7008      	strb	r0, [r1, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    1e6e:	5c99      	ldrb	r1, [r3, r2]
	return flags;
    1e70:	9803      	ldr	r0, [sp, #12]
    1e72:	3901      	subs	r1, #1
    1e74:	5499      	strb	r1, [r3, r2]
	if (cpu_irq_is_enabled_flags(flags))
    1e76:	2800      	cmp	r0, #0
    1e78:	d0e5      	beq.n	1e46 <_usb_device_lpm_suspend+0x62>
    1e7a:	4b09      	ldr	r3, [pc, #36]	; (1ea0 <_usb_device_lpm_suspend+0xbc>)
    1e7c:	4798      	blx	r3
    1e7e:	e7e2      	b.n	1e46 <_usb_device_lpm_suspend+0x62>
    1e80:	e7fe      	b.n	1e80 <_usb_device_lpm_suspend+0x9c>
    1e82:	46c0      	nop			; (mov r8, r8)
    1e84:	200012d8 	.word	0x200012d8
    1e88:	00002bc1 	.word	0x00002bc1
    1e8c:	00002ba1 	.word	0x00002ba1
    1e90:	01010100 	.word	0x01010100
    1e94:	20000e24 	.word	0x20000e24
    1e98:	20001638 	.word	0x20001638
    1e9c:	200000ca 	.word	0x200000ca
    1ea0:	00001dd1 	.word	0x00001dd1

00001ea4 <_usb_ep0_on_setup>:
{
    1ea4:	b570      	push	{r4, r5, r6, lr}
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    1ea6:	4d33      	ldr	r5, [pc, #204]	; (1f74 <_usb_ep0_on_setup+0xd0>)
{
    1ea8:	000c      	movs	r4, r1
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    1eaa:	782b      	ldrb	r3, [r5, #0]
    1eac:	2b00      	cmp	r3, #0
    1eae:	d006      	beq.n	1ebe <_usb_ep0_on_setup+0x1a>
		if (NULL != udd_g_ctrlreq.callback) {
    1eb0:	4b31      	ldr	r3, [pc, #196]	; (1f78 <_usb_ep0_on_setup+0xd4>)
    1eb2:	691b      	ldr	r3, [r3, #16]
    1eb4:	2b00      	cmp	r3, #0
    1eb6:	d000      	beq.n	1eba <_usb_ep0_on_setup+0x16>
			udd_g_ctrlreq.callback();
    1eb8:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    1eba:	2300      	movs	r3, #0
    1ebc:	702b      	strb	r3, [r5, #0]
	if ( 8 != ep_callback_para->received_bytes) {
    1ebe:	8823      	ldrh	r3, [r4, #0]
    1ec0:	2b08      	cmp	r3, #8
    1ec2:	d00b      	beq.n	1edc <_usb_ep0_on_setup+0x38>
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    1ec4:	2305      	movs	r3, #5
	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    1ec6:	4c2d      	ldr	r4, [pc, #180]	; (1f7c <_usb_ep0_on_setup+0xd8>)
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    1ec8:	702b      	strb	r3, [r5, #0]
	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    1eca:	2180      	movs	r1, #128	; 0x80
    1ecc:	0020      	movs	r0, r4
    1ece:	4b2c      	ldr	r3, [pc, #176]	; (1f80 <_usb_ep0_on_setup+0xdc>)
    1ed0:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    1ed2:	2100      	movs	r1, #0
    1ed4:	0020      	movs	r0, r4
    1ed6:	4b2b      	ldr	r3, [pc, #172]	; (1f84 <_usb_ep0_on_setup+0xe0>)
    1ed8:	4798      	blx	r3
}
    1eda:	bd70      	pop	{r4, r5, r6, pc}
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    1edc:	4c2a      	ldr	r4, [pc, #168]	; (1f88 <_usb_ep0_on_setup+0xe4>)
    1ede:	4e26      	ldr	r6, [pc, #152]	; (1f78 <_usb_ep0_on_setup+0xd4>)
    1ee0:	7823      	ldrb	r3, [r4, #0]
    1ee2:	7033      	strb	r3, [r6, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    1ee4:	7863      	ldrb	r3, [r4, #1]
    1ee6:	7073      	strb	r3, [r6, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    1ee8:	78e2      	ldrb	r2, [r4, #3]
    1eea:	78a3      	ldrb	r3, [r4, #2]
    1eec:	0212      	lsls	r2, r2, #8
    1eee:	189b      	adds	r3, r3, r2
    1ef0:	8073      	strh	r3, [r6, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    1ef2:	7962      	ldrb	r2, [r4, #5]
    1ef4:	7923      	ldrb	r3, [r4, #4]
    1ef6:	0212      	lsls	r2, r2, #8
    1ef8:	189b      	adds	r3, r3, r2
    1efa:	80b3      	strh	r3, [r6, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    1efc:	79e2      	ldrb	r2, [r4, #7]
    1efe:	79a3      	ldrb	r3, [r4, #6]
    1f00:	0212      	lsls	r2, r2, #8
    1f02:	189b      	adds	r3, r3, r2
    1f04:	80f3      	strh	r3, [r6, #6]
		if (false == udc_process_setup()) {
    1f06:	4b21      	ldr	r3, [pc, #132]	; (1f8c <_usb_ep0_on_setup+0xe8>)
    1f08:	4798      	blx	r3
    1f0a:	2800      	cmp	r0, #0
    1f0c:	d0da      	beq.n	1ec4 <_usb_ep0_on_setup+0x20>
		} else if (Udd_setup_is_in()) {
    1f0e:	7833      	ldrb	r3, [r6, #0]
    1f10:	2b7f      	cmp	r3, #127	; 0x7f
    1f12:	d81e      	bhi.n	1f52 <_usb_ep0_on_setup+0xae>
			if(0 == udd_g_ctrlreq.req.wLength) {
    1f14:	88f3      	ldrh	r3, [r6, #6]
    1f16:	2b00      	cmp	r3, #0
    1f18:	d00d      	beq.n	1f36 <_usb_ep0_on_setup+0x92>
				udd_ctrl_prev_payload_nb_trans = 0;
    1f1a:	2300      	movs	r3, #0
    1f1c:	4a1c      	ldr	r2, [pc, #112]	; (1f90 <_usb_ep0_on_setup+0xec>)
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    1f1e:	2100      	movs	r1, #0
				udd_ctrl_prev_payload_nb_trans = 0;
    1f20:	8013      	strh	r3, [r2, #0]
				udd_ctrl_payload_nb_trans = 0;
    1f22:	4a1c      	ldr	r2, [pc, #112]	; (1f94 <_usb_ep0_on_setup+0xf0>)
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    1f24:	4815      	ldr	r0, [pc, #84]	; (1f7c <_usb_ep0_on_setup+0xd8>)
				udd_ctrl_payload_nb_trans = 0;
    1f26:	8013      	strh	r3, [r2, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    1f28:	3301      	adds	r3, #1
    1f2a:	702b      	strb	r3, [r5, #0]
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    1f2c:	0022      	movs	r2, r4
    1f2e:	333f      	adds	r3, #63	; 0x3f
    1f30:	4c19      	ldr	r4, [pc, #100]	; (1f98 <_usb_ep0_on_setup+0xf4>)
    1f32:	47a0      	blx	r4
    1f34:	e7d1      	b.n	1eda <_usb_ep0_on_setup+0x36>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    1f36:	3303      	adds	r3, #3
    1f38:	702b      	strb	r3, [r5, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    1f3a:	4d10      	ldr	r5, [pc, #64]	; (1f7c <_usb_ep0_on_setup+0xd8>)
    1f3c:	0021      	movs	r1, r4
    1f3e:	0028      	movs	r0, r5
    1f40:	4b16      	ldr	r3, [pc, #88]	; (1f9c <_usb_ep0_on_setup+0xf8>)
    1f42:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    1f44:	68b2      	ldr	r2, [r6, #8]
    1f46:	2300      	movs	r3, #0
    1f48:	2100      	movs	r1, #0
    1f4a:	0028      	movs	r0, r5
    1f4c:	4c14      	ldr	r4, [pc, #80]	; (1fa0 <_usb_ep0_on_setup+0xfc>)
    1f4e:	47a0      	blx	r4
    1f50:	e7c3      	b.n	1eda <_usb_ep0_on_setup+0x36>
			udd_ctrl_prev_payload_nb_trans = 0;
    1f52:	2300      	movs	r3, #0
    1f54:	4a0e      	ldr	r2, [pc, #56]	; (1f90 <_usb_ep0_on_setup+0xec>)
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    1f56:	2100      	movs	r1, #0
			udd_ctrl_prev_payload_nb_trans = 0;
    1f58:	8013      	strh	r3, [r2, #0]
			udd_ctrl_payload_nb_trans = 0;
    1f5a:	4a0e      	ldr	r2, [pc, #56]	; (1f94 <_usb_ep0_on_setup+0xf0>)
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    1f5c:	4807      	ldr	r0, [pc, #28]	; (1f7c <_usb_ep0_on_setup+0xd8>)
			udd_ctrl_payload_nb_trans = 0;
    1f5e:	8013      	strh	r3, [r2, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    1f60:	3302      	adds	r3, #2
    1f62:	702b      	strb	r3, [r5, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    1f64:	0022      	movs	r2, r4
    1f66:	333e      	adds	r3, #62	; 0x3e
    1f68:	4c0b      	ldr	r4, [pc, #44]	; (1f98 <_usb_ep0_on_setup+0xf4>)
    1f6a:	47a0      	blx	r4
			udd_ctrl_in_sent();
    1f6c:	4b0d      	ldr	r3, [pc, #52]	; (1fa4 <_usb_ep0_on_setup+0x100>)
    1f6e:	4798      	blx	r3
    1f70:	e7b3      	b.n	1eda <_usb_ep0_on_setup+0x36>
    1f72:	46c0      	nop			; (mov r8, r8)
    1f74:	20000dd2 	.word	0x20000dd2
    1f78:	20001440 	.word	0x20001440
    1f7c:	200012d8 	.word	0x200012d8
    1f80:	00002ffd 	.word	0x00002ffd
    1f84:	0000301d 	.word	0x0000301d
    1f88:	20001458 	.word	0x20001458
    1f8c:	00001301 	.word	0x00001301
    1f90:	20000dd0 	.word	0x20000dd0
    1f94:	20000dce 	.word	0x20000dce
    1f98:	000030e5 	.word	0x000030e5
    1f9c:	0000312d 	.word	0x0000312d
    1fa0:	00003099 	.word	0x00003099
    1fa4:	00001d21 	.word	0x00001d21

00001fa8 <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    1fa8:	b530      	push	{r4, r5, lr}
		if (!(OSCCTRL->DFLLCTRL.reg & OSCCTRL_DFLLCTRL_USBCRM)) {
    1faa:	4b31      	ldr	r3, [pc, #196]	; (2070 <STACK_SIZE+0x70>)
{
    1fac:	b085      	sub	sp, #20
		if (!(OSCCTRL->DFLLCTRL.reg & OSCCTRL_DFLLCTRL_USBCRM)) {
    1fae:	8b1a      	ldrh	r2, [r3, #24]
    1fb0:	0692      	lsls	r2, r2, #26
    1fb2:	d43e      	bmi.n	2032 <STACK_SIZE+0x32>
			while((OSCCTRL->STATUS.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    1fb4:	21d0      	movs	r1, #208	; 0xd0
    1fb6:	0109      	lsls	r1, r1, #4
    1fb8:	68da      	ldr	r2, [r3, #12]
    1fba:	400a      	ands	r2, r1
    1fbc:	428a      	cmp	r2, r1
    1fbe:	d1fb      	bne.n	1fb8 <_usb_on_wakeup+0x10>
	udd_wait_clock_ready();

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    1fc0:	4c2c      	ldr	r4, [pc, #176]	; (2074 <STACK_SIZE+0x74>)
    1fc2:	4b2d      	ldr	r3, [pc, #180]	; (2078 <STACK_SIZE+0x78>)
    1fc4:	2102      	movs	r1, #2
    1fc6:	0020      	movs	r0, r4
    1fc8:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    1fca:	2104      	movs	r1, #4
    1fcc:	0020      	movs	r0, r4
    1fce:	4d2b      	ldr	r5, [pc, #172]	; (207c <STACK_SIZE+0x7c>)
    1fd0:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    1fd2:	4b2b      	ldr	r3, [pc, #172]	; (2080 <STACK_SIZE+0x80>)
    1fd4:	4a2b      	ldr	r2, [pc, #172]	; (2084 <STACK_SIZE+0x84>)
    1fd6:	2106      	movs	r1, #6
    1fd8:	0020      	movs	r0, r4
    1fda:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    1fdc:	0020      	movs	r0, r4
    1fde:	2106      	movs	r1, #6
    1fe0:	47a8      	blx	r5
	enum sleepmgr_mode sleep_mode[] = {
    1fe2:	4b29      	ldr	r3, [pc, #164]	; (2088 <STACK_SIZE+0x88>)
	if (udd_state == new_state) {
    1fe4:	4c29      	ldr	r4, [pc, #164]	; (208c <STACK_SIZE+0x8c>)
	enum sleepmgr_mode sleep_mode[] = {
    1fe6:	9301      	str	r3, [sp, #4]
	if (udd_state == new_state) {
    1fe8:	7823      	ldrb	r3, [r4, #0]
    1fea:	2b03      	cmp	r3, #3
    1fec:	d01e      	beq.n	202c <STACK_SIZE+0x2c>
	if(sleepmgr_locks[mode] >= 0xff) {
    1fee:	4b28      	ldr	r3, [pc, #160]	; (2090 <STACK_SIZE+0x90>)
    1ff0:	785a      	ldrb	r2, [r3, #1]
    1ff2:	2aff      	cmp	r2, #255	; 0xff
    1ff4:	d01c      	beq.n	2030 <STACK_SIZE+0x30>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1ff6:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1ffa:	4251      	negs	r1, r2
    1ffc:	414a      	adcs	r2, r1
    1ffe:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    2000:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    2002:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2006:	2200      	movs	r2, #0
    2008:	4922      	ldr	r1, [pc, #136]	; (2094 <STACK_SIZE+0x94>)
    200a:	700a      	strb	r2, [r1, #0]
	++sleepmgr_locks[mode];
    200c:	785a      	ldrb	r2, [r3, #1]
	return flags;
    200e:	9802      	ldr	r0, [sp, #8]
    2010:	3201      	adds	r2, #1
    2012:	705a      	strb	r2, [r3, #1]
	if (cpu_irq_is_enabled_flags(flags))
    2014:	2800      	cmp	r0, #0
    2016:	d004      	beq.n	2022 <STACK_SIZE+0x22>
		cpu_irq_enable();
    2018:	2201      	movs	r2, #1
    201a:	700a      	strb	r2, [r1, #0]
    201c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2020:	b662      	cpsie	i
	if (udd_state != UDD_STATE_OFF) {
    2022:	7822      	ldrb	r2, [r4, #0]
    2024:	2a00      	cmp	r2, #0
    2026:	d10a      	bne.n	203e <STACK_SIZE+0x3e>
	udd_state = new_state;
    2028:	2303      	movs	r3, #3
    202a:	7023      	strb	r3, [r4, #0]
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
#endif
}
    202c:	b005      	add	sp, #20
    202e:	bd30      	pop	{r4, r5, pc}
    2030:	e7fe      	b.n	2030 <STACK_SIZE+0x30>
			while((OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY);
    2032:	2180      	movs	r1, #128	; 0x80
    2034:	0049      	lsls	r1, r1, #1
    2036:	68da      	ldr	r2, [r3, #12]
    2038:	420a      	tst	r2, r1
    203a:	d0fc      	beq.n	2036 <STACK_SIZE+0x36>
    203c:	e7c0      	b.n	1fc0 <_usb_on_wakeup+0x18>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    203e:	a801      	add	r0, sp, #4
	if(sleepmgr_locks[mode] == 0) {
    2040:	5c82      	ldrb	r2, [r0, r2]
    2042:	5c98      	ldrb	r0, [r3, r2]
    2044:	2800      	cmp	r0, #0
    2046:	d012      	beq.n	206e <STACK_SIZE+0x6e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2048:	f3ef 8010 	mrs	r0, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    204c:	4245      	negs	r5, r0
    204e:	4168      	adcs	r0, r5
    2050:	9003      	str	r0, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    2052:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    2054:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2058:	2000      	movs	r0, #0
    205a:	7008      	strb	r0, [r1, #0]
	--sleepmgr_locks[mode];
    205c:	5c99      	ldrb	r1, [r3, r2]
	return flags;
    205e:	9803      	ldr	r0, [sp, #12]
    2060:	3901      	subs	r1, #1
    2062:	5499      	strb	r1, [r3, r2]
	if (cpu_irq_is_enabled_flags(flags))
    2064:	2800      	cmp	r0, #0
    2066:	d0df      	beq.n	2028 <STACK_SIZE+0x28>
    2068:	4b0b      	ldr	r3, [pc, #44]	; (2098 <STACK_SIZE+0x98>)
    206a:	4798      	blx	r3
    206c:	e7dc      	b.n	2028 <STACK_SIZE+0x28>
    206e:	e7fe      	b.n	206e <STACK_SIZE+0x6e>
    2070:	40000c00 	.word	0x40000c00
    2074:	200012d8 	.word	0x200012d8
    2078:	00002bc1 	.word	0x00002bc1
    207c:	00002ba1 	.word	0x00002ba1
    2080:	00002b7d 	.word	0x00002b7d
    2084:	00001de5 	.word	0x00001de5
    2088:	01010100 	.word	0x01010100
    208c:	20000e24 	.word	0x20000e24
    2090:	20001638 	.word	0x20001638
    2094:	200000ca 	.word	0x200000ca
    2098:	00001dd1 	.word	0x00001dd1

0000209c <_usb_on_suspend>:
{
    209c:	b530      	push	{r4, r5, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    209e:	4c25      	ldr	r4, [pc, #148]	; (2134 <_usb_on_suspend+0x98>)
{
    20a0:	b085      	sub	sp, #20
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    20a2:	2104      	movs	r1, #4
    20a4:	0020      	movs	r0, r4
    20a6:	4b24      	ldr	r3, [pc, #144]	; (2138 <_usb_on_suspend+0x9c>)
    20a8:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    20aa:	0020      	movs	r0, r4
    20ac:	4b23      	ldr	r3, [pc, #140]	; (213c <_usb_on_suspend+0xa0>)
    20ae:	2102      	movs	r1, #2
    20b0:	4798      	blx	r3
	enum sleepmgr_mode sleep_mode[] = {
    20b2:	4b23      	ldr	r3, [pc, #140]	; (2140 <_usb_on_suspend+0xa4>)
	if (udd_state == new_state) {
    20b4:	4c23      	ldr	r4, [pc, #140]	; (2144 <_usb_on_suspend+0xa8>)
	enum sleepmgr_mode sleep_mode[] = {
    20b6:	9301      	str	r3, [sp, #4]
	if (udd_state == new_state) {
    20b8:	7823      	ldrb	r3, [r4, #0]
    20ba:	2b01      	cmp	r3, #1
    20bc:	d01e      	beq.n	20fc <_usb_on_suspend+0x60>
	if(sleepmgr_locks[mode] >= 0xff) {
    20be:	4b22      	ldr	r3, [pc, #136]	; (2148 <_usb_on_suspend+0xac>)
    20c0:	785a      	ldrb	r2, [r3, #1]
    20c2:	2aff      	cmp	r2, #255	; 0xff
    20c4:	d01c      	beq.n	2100 <_usb_on_suspend+0x64>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    20c6:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    20ca:	4251      	negs	r1, r2
    20cc:	414a      	adcs	r2, r1
    20ce:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    20d0:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    20d2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    20d6:	2200      	movs	r2, #0
    20d8:	491c      	ldr	r1, [pc, #112]	; (214c <_usb_on_suspend+0xb0>)
    20da:	700a      	strb	r2, [r1, #0]
	++sleepmgr_locks[mode];
    20dc:	785a      	ldrb	r2, [r3, #1]
	return flags;
    20de:	9802      	ldr	r0, [sp, #8]
    20e0:	3201      	adds	r2, #1
    20e2:	705a      	strb	r2, [r3, #1]
	if (cpu_irq_is_enabled_flags(flags))
    20e4:	2800      	cmp	r0, #0
    20e6:	d004      	beq.n	20f2 <_usb_on_suspend+0x56>
		cpu_irq_enable();
    20e8:	2201      	movs	r2, #1
    20ea:	700a      	strb	r2, [r1, #0]
    20ec:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    20f0:	b662      	cpsie	i
	if (udd_state != UDD_STATE_OFF) {
    20f2:	7822      	ldrb	r2, [r4, #0]
    20f4:	2a00      	cmp	r2, #0
    20f6:	d104      	bne.n	2102 <_usb_on_suspend+0x66>
	udd_state = new_state;
    20f8:	2301      	movs	r3, #1
    20fa:	7023      	strb	r3, [r4, #0]
}
    20fc:	b005      	add	sp, #20
    20fe:	bd30      	pop	{r4, r5, pc}
    2100:	e7fe      	b.n	2100 <_usb_on_suspend+0x64>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    2102:	a801      	add	r0, sp, #4
	if(sleepmgr_locks[mode] == 0) {
    2104:	5c82      	ldrb	r2, [r0, r2]
    2106:	5c98      	ldrb	r0, [r3, r2]
    2108:	2800      	cmp	r0, #0
    210a:	d012      	beq.n	2132 <_usb_on_suspend+0x96>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    210c:	f3ef 8010 	mrs	r0, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2110:	4245      	negs	r5, r0
    2112:	4168      	adcs	r0, r5
    2114:	9003      	str	r0, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    2116:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    2118:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    211c:	2000      	movs	r0, #0
    211e:	7008      	strb	r0, [r1, #0]
	--sleepmgr_locks[mode];
    2120:	5c99      	ldrb	r1, [r3, r2]
	return flags;
    2122:	9803      	ldr	r0, [sp, #12]
    2124:	3901      	subs	r1, #1
    2126:	5499      	strb	r1, [r3, r2]
	if (cpu_irq_is_enabled_flags(flags))
    2128:	2800      	cmp	r0, #0
    212a:	d0e5      	beq.n	20f8 <_usb_on_suspend+0x5c>
    212c:	4b08      	ldr	r3, [pc, #32]	; (2150 <_usb_on_suspend+0xb4>)
    212e:	4798      	blx	r3
    2130:	e7e2      	b.n	20f8 <_usb_on_suspend+0x5c>
    2132:	e7fe      	b.n	2132 <_usb_on_suspend+0x96>
    2134:	200012d8 	.word	0x200012d8
    2138:	00002bc1 	.word	0x00002bc1
    213c:	00002ba1 	.word	0x00002ba1
    2140:	01010100 	.word	0x01010100
    2144:	20000e24 	.word	0x20000e24
    2148:	20001638 	.word	0x20001638
    214c:	200000ca 	.word	0x200000ca
    2150:	00001dd1 	.word	0x00001dd1

00002154 <udd_ep_abort>:
{
    2154:	b570      	push	{r4, r5, r6, lr}
	usb_device_endpoint_abort_job(&usb_device, ep);
    2156:	0001      	movs	r1, r0
{
    2158:	0004      	movs	r4, r0
	usb_device_endpoint_abort_job(&usb_device, ep);
    215a:	4b10      	ldr	r3, [pc, #64]	; (219c <udd_ep_abort+0x48>)
    215c:	4810      	ldr	r0, [pc, #64]	; (21a0 <udd_ep_abort+0x4c>)
    215e:	4798      	blx	r3
	if ((ep == 0) || (ep == 0x80)) {
    2160:	237f      	movs	r3, #127	; 0x7f
    2162:	4023      	ands	r3, r4
    2164:	d017      	beq.n	2196 <udd_ep_abort+0x42>
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    2166:	230f      	movs	r3, #15
	if (!ptr_job->busy) {
    2168:	2001      	movs	r0, #1
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    216a:	4023      	ands	r3, r4
    216c:	09e2      	lsrs	r2, r4, #7
    216e:	005b      	lsls	r3, r3, #1
    2170:	189b      	adds	r3, r3, r2
    2172:	3b02      	subs	r3, #2
	if (!ptr_job->busy) {
    2174:	009a      	lsls	r2, r3, #2
    2176:	18d3      	adds	r3, r2, r3
    2178:	490a      	ldr	r1, [pc, #40]	; (21a4 <udd_ep_abort+0x50>)
    217a:	009b      	lsls	r3, r3, #2
    217c:	18ca      	adds	r2, r1, r3
    217e:	7c95      	ldrb	r5, [r2, #18]
    2180:	4228      	tst	r0, r5
    2182:	d007      	beq.n	2194 <udd_ep_abort+0x40>
	if (NULL != ptr_job->call_trans) {
    2184:	585b      	ldr	r3, [r3, r1]
	ptr_job->busy = false;
    2186:	4385      	bics	r5, r0
    2188:	7495      	strb	r5, [r2, #18]
	if (NULL != ptr_job->call_trans) {
    218a:	2b00      	cmp	r3, #0
    218c:	d002      	beq.n	2194 <udd_ep_abort+0x40>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    218e:	68d1      	ldr	r1, [r2, #12]
    2190:	0022      	movs	r2, r4
    2192:	4798      	blx	r3
}
    2194:	bd70      	pop	{r4, r5, r6, pc}
	if (!ptr_job->busy) {
    2196:	7c9b      	ldrb	r3, [r3, #18]
    2198:	deff      	udf	#255	; 0xff
    219a:	46c0      	nop			; (mov r8, r8)
    219c:	00002fad 	.word	0x00002fad
    21a0:	200012d8 	.word	0x200012d8
    21a4:	20000dd4 	.word	0x20000dd4

000021a8 <_usb_ep0_on_tansfer_ok>:
{
    21a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21aa:	46ce      	mov	lr, r9
    21ac:	4647      	mov	r7, r8
    21ae:	b580      	push	{r7, lr}
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    21b0:	4c3c      	ldr	r4, [pc, #240]	; (22a4 <_usb_ep0_on_tansfer_ok+0xfc>)
    21b2:	7823      	ldrb	r3, [r4, #0]
    21b4:	2b01      	cmp	r3, #1
    21b6:	d00c      	beq.n	21d2 <_usb_ep0_on_tansfer_ok+0x2a>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    21b8:	2b02      	cmp	r3, #2
    21ba:	d036      	beq.n	222a <_usb_ep0_on_tansfer_ok+0x82>
			if (NULL != udd_g_ctrlreq.callback) {
    21bc:	4b3a      	ldr	r3, [pc, #232]	; (22a8 <_usb_ep0_on_tansfer_ok+0x100>)
    21be:	691b      	ldr	r3, [r3, #16]
    21c0:	2b00      	cmp	r3, #0
    21c2:	d000      	beq.n	21c6 <_usb_ep0_on_tansfer_ok+0x1e>
				udd_g_ctrlreq.callback();
    21c4:	4798      	blx	r3
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    21c6:	2300      	movs	r3, #0
    21c8:	7023      	strb	r3, [r4, #0]
}
    21ca:	bc0c      	pop	{r2, r3}
    21cc:	4690      	mov	r8, r2
    21ce:	4699      	mov	r9, r3
    21d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    21d2:	4a36      	ldr	r2, [pc, #216]	; (22ac <_usb_ep0_on_tansfer_ok+0x104>)
    21d4:	4e34      	ldr	r6, [pc, #208]	; (22a8 <_usb_ep0_on_tansfer_ok+0x100>)
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    21d6:	880f      	ldrh	r7, [r1, #0]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    21d8:	8810      	ldrh	r0, [r2, #0]
    21da:	89b3      	ldrh	r3, [r6, #12]
    21dc:	19c5      	adds	r5, r0, r7
    21de:	4690      	mov	r8, r2
    21e0:	42ab      	cmp	r3, r5
    21e2:	db25      	blt.n	2230 <_usb_ep0_on_tansfer_ok+0x88>
	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    21e4:	68b3      	ldr	r3, [r6, #8]
    21e6:	003a      	movs	r2, r7
    21e8:	469c      	mov	ip, r3
    21ea:	4b31      	ldr	r3, [pc, #196]	; (22b0 <_usb_ep0_on_tansfer_ok+0x108>)
    21ec:	4460      	add	r0, ip
    21ee:	0019      	movs	r1, r3
    21f0:	4699      	mov	r9, r3
    21f2:	4b30      	ldr	r3, [pc, #192]	; (22b4 <_usb_ep0_on_tansfer_ok+0x10c>)
    21f4:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    21f6:	4643      	mov	r3, r8
    21f8:	b2ad      	uxth	r5, r5
    21fa:	801d      	strh	r5, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    21fc:	2f40      	cmp	r7, #64	; 0x40
    21fe:	d01b      	beq.n	2238 <_usb_ep0_on_tansfer_ok+0x90>
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2200:	6973      	ldr	r3, [r6, #20]
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2202:	81b5      	strh	r5, [r6, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2204:	2b00      	cmp	r3, #0
    2206:	d002      	beq.n	220e <_usb_ep0_on_tansfer_ok+0x66>
			if (!udd_g_ctrlreq.over_under_run()) {
    2208:	4798      	blx	r3
    220a:	1e05      	subs	r5, r0, #0
    220c:	d032      	beq.n	2274 <_usb_ep0_on_tansfer_ok+0xcc>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    220e:	2303      	movs	r3, #3
    2210:	7023      	strb	r3, [r4, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    2212:	4c29      	ldr	r4, [pc, #164]	; (22b8 <_usb_ep0_on_tansfer_ok+0x110>)
    2214:	4649      	mov	r1, r9
    2216:	0020      	movs	r0, r4
    2218:	4b28      	ldr	r3, [pc, #160]	; (22bc <_usb_ep0_on_tansfer_ok+0x114>)
    221a:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    221c:	68b2      	ldr	r2, [r6, #8]
    221e:	2300      	movs	r3, #0
    2220:	2100      	movs	r1, #0
    2222:	0020      	movs	r0, r4
    2224:	4c26      	ldr	r4, [pc, #152]	; (22c0 <_usb_ep0_on_tansfer_ok+0x118>)
    2226:	47a0      	blx	r4
    2228:	e7cf      	b.n	21ca <_usb_ep0_on_tansfer_ok+0x22>
			udd_ctrl_in_sent();
    222a:	4b26      	ldr	r3, [pc, #152]	; (22c4 <_usb_ep0_on_tansfer_ok+0x11c>)
    222c:	4798      	blx	r3
    222e:	e7cc      	b.n	21ca <_usb_ep0_on_tansfer_ok+0x22>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2230:	1a1f      	subs	r7, r3, r0
    2232:	b2bf      	uxth	r7, r7
    2234:	19c5      	adds	r5, r0, r7
    2236:	e7d5      	b.n	21e4 <_usb_ep0_on_tansfer_ok+0x3c>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    2238:	4f23      	ldr	r7, [pc, #140]	; (22c8 <_usb_ep0_on_tansfer_ok+0x120>)
    223a:	88f2      	ldrh	r2, [r6, #6]
    223c:	883b      	ldrh	r3, [r7, #0]
    223e:	195b      	adds	r3, r3, r5
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    2240:	429a      	cmp	r2, r3
    2242:	dddd      	ble.n	2200 <_usb_ep0_on_tansfer_ok+0x58>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2244:	89b3      	ldrh	r3, [r6, #12]
    2246:	42ab      	cmp	r3, r5
    2248:	d10d      	bne.n	2266 <_usb_ep0_on_tansfer_ok+0xbe>
		if (!udd_g_ctrlreq.over_under_run) {
    224a:	6975      	ldr	r5, [r6, #20]
    224c:	2d00      	cmp	r5, #0
    224e:	d011      	beq.n	2274 <_usb_ep0_on_tansfer_ok+0xcc>
		if (!udd_g_ctrlreq.over_under_run()) {
    2250:	47a8      	blx	r5
    2252:	2800      	cmp	r0, #0
    2254:	d01b      	beq.n	228e <_usb_ep0_on_tansfer_ok+0xe6>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2256:	4642      	mov	r2, r8
    2258:	883b      	ldrh	r3, [r7, #0]
    225a:	8812      	ldrh	r2, [r2, #0]
    225c:	189b      	adds	r3, r3, r2
    225e:	803b      	strh	r3, [r7, #0]
		udd_ctrl_payload_nb_trans = 0;
    2260:	4642      	mov	r2, r8
    2262:	2300      	movs	r3, #0
    2264:	8013      	strh	r3, [r2, #0]
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    2266:	2340      	movs	r3, #64	; 0x40
    2268:	464a      	mov	r2, r9
    226a:	2100      	movs	r1, #0
    226c:	4c17      	ldr	r4, [pc, #92]	; (22cc <_usb_ep0_on_tansfer_ok+0x124>)
    226e:	4812      	ldr	r0, [pc, #72]	; (22b8 <_usb_ep0_on_tansfer_ok+0x110>)
    2270:	47a0      	blx	r4
    2272:	e7aa      	b.n	21ca <_usb_ep0_on_tansfer_ok+0x22>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2274:	2305      	movs	r3, #5
    2276:	7023      	strb	r3, [r4, #0]
	usb_device_endpoint_set_halt(&usb_device, ep);
    2278:	4c0f      	ldr	r4, [pc, #60]	; (22b8 <_usb_ep0_on_tansfer_ok+0x110>)
    227a:	2100      	movs	r1, #0
    227c:	0020      	movs	r0, r4
    227e:	4b14      	ldr	r3, [pc, #80]	; (22d0 <_usb_ep0_on_tansfer_ok+0x128>)
    2280:	4798      	blx	r3
	usb_device_endpoint_abort_job(&usb_device, ep);
    2282:	2100      	movs	r1, #0
    2284:	0020      	movs	r0, r4
    2286:	4b13      	ldr	r3, [pc, #76]	; (22d4 <_usb_ep0_on_tansfer_ok+0x12c>)
    2288:	4798      	blx	r3
	if (!ptr_job->busy) {
    228a:	7cab      	ldrb	r3, [r5, #18]
    228c:	deff      	udf	#255	; 0xff
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    228e:	2305      	movs	r3, #5
	usb_device_endpoint_set_halt(&usb_device, ep);
    2290:	2100      	movs	r1, #0
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2292:	7023      	strb	r3, [r4, #0]
	usb_device_endpoint_set_halt(&usb_device, ep);
    2294:	4808      	ldr	r0, [pc, #32]	; (22b8 <_usb_ep0_on_tansfer_ok+0x110>)
    2296:	4b0e      	ldr	r3, [pc, #56]	; (22d0 <_usb_ep0_on_tansfer_ok+0x128>)
    2298:	4798      	blx	r3
	udd_ep_abort(ep);
    229a:	2000      	movs	r0, #0
    229c:	4b0e      	ldr	r3, [pc, #56]	; (22d8 <_usb_ep0_on_tansfer_ok+0x130>)
    229e:	4798      	blx	r3
    22a0:	e793      	b.n	21ca <_usb_ep0_on_tansfer_ok+0x22>
    22a2:	46c0      	nop			; (mov r8, r8)
    22a4:	20000dd2 	.word	0x20000dd2
    22a8:	20001440 	.word	0x20001440
    22ac:	20000dce 	.word	0x20000dce
    22b0:	20001458 	.word	0x20001458
    22b4:	0001efe9 	.word	0x0001efe9
    22b8:	200012d8 	.word	0x200012d8
    22bc:	0000312d 	.word	0x0000312d
    22c0:	00003099 	.word	0x00003099
    22c4:	00001d21 	.word	0x00001d21
    22c8:	20000dd0 	.word	0x20000dd0
    22cc:	000030e5 	.word	0x000030e5
    22d0:	00002ffd 	.word	0x00002ffd
    22d4:	00002fad 	.word	0x00002fad
    22d8:	00002155 	.word	0x00002155

000022dc <udd_ep_free>:
{
    22dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    22de:	46ce      	mov	lr, r9
    22e0:	4647      	mov	r7, r8
    22e2:	0005      	movs	r5, r0
    22e4:	b580      	push	{r7, lr}
    22e6:	b083      	sub	sp, #12
	usb_device_endpoint_get_config_defaults(&config_ep);
    22e8:	ac01      	add	r4, sp, #4
    22ea:	0020      	movs	r0, r4
    22ec:	4b21      	ldr	r3, [pc, #132]	; (2374 <udd_ep_free+0x98>)
    22ee:	4798      	blx	r3
	usb_device_endpoint_abort_job(&usb_device, ep);
    22f0:	4e21      	ldr	r6, [pc, #132]	; (2378 <udd_ep_free+0x9c>)
    22f2:	4b22      	ldr	r3, [pc, #136]	; (237c <udd_ep_free+0xa0>)
    22f4:	0029      	movs	r1, r5
    22f6:	0030      	movs	r0, r6
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    22f8:	270f      	movs	r7, #15
	usb_device_endpoint_abort_job(&usb_device, ep);
    22fa:	4798      	blx	r3
	if ((ep == 0) || (ep == 0x80)) {
    22fc:	237f      	movs	r3, #127	; 0x7f
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    22fe:	402f      	ands	r7, r5
	if ((ep == 0) || (ep == 0x80)) {
    2300:	402b      	ands	r3, r5
    2302:	d035      	beq.n	2370 <udd_ep_free+0x94>
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    2304:	007a      	lsls	r2, r7, #1
    2306:	09e9      	lsrs	r1, r5, #7
    2308:	1853      	adds	r3, r2, r1
	if (!ptr_job->busy) {
    230a:	4a1d      	ldr	r2, [pc, #116]	; (2380 <udd_ep_free+0xa4>)
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    230c:	3b02      	subs	r3, #2
	if (!ptr_job->busy) {
    230e:	4691      	mov	r9, r2
    2310:	009a      	lsls	r2, r3, #2
    2312:	18d3      	adds	r3, r2, r3
    2314:	464a      	mov	r2, r9
    2316:	2001      	movs	r0, #1
    2318:	009b      	lsls	r3, r3, #2
    231a:	18d2      	adds	r2, r2, r3
    231c:	7c91      	ldrb	r1, [r2, #18]
    231e:	4208      	tst	r0, r1
    2320:	d010      	beq.n	2344 <udd_ep_free+0x68>
	ptr_job->busy = false;
    2322:	2110      	movs	r1, #16
    2324:	4688      	mov	r8, r1
    2326:	4490      	add	r8, r2
    2328:	4641      	mov	r1, r8
    232a:	7889      	ldrb	r1, [r1, #2]
    232c:	4381      	bics	r1, r0
    232e:	0008      	movs	r0, r1
    2330:	4641      	mov	r1, r8
    2332:	7088      	strb	r0, [r1, #2]
	if (NULL != ptr_job->call_trans) {
    2334:	4649      	mov	r1, r9
    2336:	585b      	ldr	r3, [r3, r1]
    2338:	2b00      	cmp	r3, #0
    233a:	d003      	beq.n	2344 <udd_ep_free+0x68>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    233c:	68d1      	ldr	r1, [r2, #12]
    233e:	2001      	movs	r0, #1
    2340:	002a      	movs	r2, r5
    2342:	4798      	blx	r3
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    2344:	2300      	movs	r3, #0
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    2346:	0021      	movs	r1, r4
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    2348:	70e3      	strb	r3, [r4, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    234a:	0030      	movs	r0, r6
    234c:	4b0d      	ldr	r3, [pc, #52]	; (2384 <udd_ep_free+0xa8>)
	config_ep.ep_address = ep;
    234e:	7025      	strb	r5, [r4, #0]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    2350:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    2352:	0039      	movs	r1, r7
    2354:	2200      	movs	r2, #0
    2356:	0030      	movs	r0, r6
    2358:	4b0b      	ldr	r3, [pc, #44]	; (2388 <udd_ep_free+0xac>)
    235a:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    235c:	2200      	movs	r2, #0
    235e:	0029      	movs	r1, r5
    2360:	0030      	movs	r0, r6
    2362:	4b0a      	ldr	r3, [pc, #40]	; (238c <udd_ep_free+0xb0>)
    2364:	4798      	blx	r3
}
    2366:	b003      	add	sp, #12
    2368:	bc0c      	pop	{r2, r3}
    236a:	4690      	mov	r8, r2
    236c:	4699      	mov	r9, r3
    236e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!ptr_job->busy) {
    2370:	7c9b      	ldrb	r3, [r3, #18]
    2372:	deff      	udf	#255	; 0xff
    2374:	00002d8d 	.word	0x00002d8d
    2378:	200012d8 	.word	0x200012d8
    237c:	00002fad 	.word	0x00002fad
    2380:	20000dd4 	.word	0x20000dd4
    2384:	00002d9d 	.word	0x00002d9d
    2388:	00002c05 	.word	0x00002c05
    238c:	00002cdd 	.word	0x00002cdd

00002390 <udd_ep_alloc>:
{
    2390:	b5f0      	push	{r4, r5, r6, r7, lr}
    2392:	46c6      	mov	lr, r8
    2394:	0005      	movs	r5, r0
    2396:	b500      	push	{lr}
    2398:	b082      	sub	sp, #8
	usb_device_endpoint_get_config_defaults(&config_ep);
    239a:	ac01      	add	r4, sp, #4
    239c:	0020      	movs	r0, r4
    239e:	4b37      	ldr	r3, [pc, #220]	; (247c <udd_ep_alloc+0xec>)
{
    23a0:	000e      	movs	r6, r1
    23a2:	0017      	movs	r7, r2
	usb_device_endpoint_get_config_defaults(&config_ep);
    23a4:	4798      	blx	r3
	config_ep.ep_address = ep;
    23a6:	7025      	strb	r5, [r4, #0]
	if(MaxEndpointSize <= 8) {
    23a8:	2f08      	cmp	r7, #8
    23aa:	d820      	bhi.n	23ee <udd_ep_alloc+0x5e>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    23ac:	2300      	movs	r3, #0
    23ae:	7063      	strb	r3, [r4, #1]
	if ((ep == 0) || (ep == 0x80)) {
    23b0:	237f      	movs	r3, #127	; 0x7f
    23b2:	402b      	ands	r3, r5
    23b4:	d019      	beq.n	23ea <udd_ep_alloc+0x5a>
    23b6:	230f      	movs	r3, #15
    23b8:	402b      	ands	r3, r5
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    23ba:	09ea      	lsrs	r2, r5, #7
    23bc:	4698      	mov	r8, r3
	ptr_job->ep_size = MaxEndpointSize;
    23be:	005b      	lsls	r3, r3, #1
    23c0:	189b      	adds	r3, r3, r2
    23c2:	3b02      	subs	r3, #2
    23c4:	009a      	lsls	r2, r3, #2
    23c6:	18d3      	adds	r3, r2, r3
    23c8:	4a2d      	ldr	r2, [pc, #180]	; (2480 <udd_ep_alloc+0xf0>)
    23ca:	009b      	lsls	r3, r3, #2
    23cc:	18d3      	adds	r3, r2, r3
    23ce:	821f      	strh	r7, [r3, #16]
	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    23d0:	2303      	movs	r3, #3
    23d2:	401e      	ands	r6, r3
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    23d4:	2e01      	cmp	r6, #1
    23d6:	d030      	beq.n	243a <udd_ep_alloc+0xaa>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    23d8:	2e02      	cmp	r6, #2
    23da:	d015      	beq.n	2408 <udd_ep_alloc+0x78>
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    23dc:	2e03      	cmp	r6, #3
    23de:	d012      	beq.n	2406 <udd_ep_alloc+0x76>
		return false;
    23e0:	2000      	movs	r0, #0
}
    23e2:	b002      	add	sp, #8
    23e4:	bc04      	pop	{r2}
    23e6:	4690      	mov	r8, r2
    23e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ptr_job->ep_size = MaxEndpointSize;
    23ea:	821b      	strh	r3, [r3, #16]
    23ec:	deff      	udf	#255	; 0xff
	} else if(MaxEndpointSize <= 16) {
    23ee:	2f10      	cmp	r7, #16
    23f0:	d802      	bhi.n	23f8 <udd_ep_alloc+0x68>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    23f2:	2301      	movs	r3, #1
    23f4:	7063      	strb	r3, [r4, #1]
    23f6:	e7db      	b.n	23b0 <udd_ep_alloc+0x20>
	} else if(MaxEndpointSize <= 32) {
    23f8:	2f20      	cmp	r7, #32
    23fa:	d921      	bls.n	2440 <udd_ep_alloc+0xb0>
	} else if(MaxEndpointSize <= 64) {
    23fc:	2f40      	cmp	r7, #64	; 0x40
    23fe:	d822      	bhi.n	2446 <udd_ep_alloc+0xb6>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    2400:	2303      	movs	r3, #3
    2402:	7063      	strb	r3, [r4, #1]
    2404:	e7d4      	b.n	23b0 <udd_ep_alloc+0x20>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    2406:	2304      	movs	r3, #4
    2408:	70e3      	strb	r3, [r4, #3]
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    240a:	4e1e      	ldr	r6, [pc, #120]	; (2484 <udd_ep_alloc+0xf4>)
    240c:	0021      	movs	r1, r4
    240e:	0030      	movs	r0, r6
    2410:	4b1d      	ldr	r3, [pc, #116]	; (2488 <udd_ep_alloc+0xf8>)
    2412:	4798      	blx	r3
    2414:	2800      	cmp	r0, #0
    2416:	d1e3      	bne.n	23e0 <udd_ep_alloc+0x50>
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    2418:	4b1c      	ldr	r3, [pc, #112]	; (248c <udd_ep_alloc+0xfc>)
    241a:	2200      	movs	r2, #0
    241c:	4641      	mov	r1, r8
    241e:	4c1c      	ldr	r4, [pc, #112]	; (2490 <udd_ep_alloc+0x100>)
    2420:	0030      	movs	r0, r6
    2422:	47a0      	blx	r4
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    2424:	2200      	movs	r2, #0
    2426:	0029      	movs	r1, r5
    2428:	4c1a      	ldr	r4, [pc, #104]	; (2494 <udd_ep_alloc+0x104>)
    242a:	0030      	movs	r0, r6
    242c:	47a0      	blx	r4
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    242e:	2201      	movs	r2, #1
    2430:	0029      	movs	r1, r5
    2432:	0030      	movs	r0, r6
    2434:	47a0      	blx	r4
	return true;
    2436:	2001      	movs	r0, #1
    2438:	e7d3      	b.n	23e2 <udd_ep_alloc+0x52>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    243a:	3b01      	subs	r3, #1
    243c:	70e3      	strb	r3, [r4, #3]
    243e:	e7e4      	b.n	240a <udd_ep_alloc+0x7a>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    2440:	2302      	movs	r3, #2
    2442:	7063      	strb	r3, [r4, #1]
    2444:	e7b4      	b.n	23b0 <udd_ep_alloc+0x20>
	} else if(MaxEndpointSize <= 128) {
    2446:	2f80      	cmp	r7, #128	; 0x80
    2448:	d906      	bls.n	2458 <udd_ep_alloc+0xc8>
	} else if(MaxEndpointSize <= 256) {
    244a:	2380      	movs	r3, #128	; 0x80
    244c:	005b      	lsls	r3, r3, #1
    244e:	429f      	cmp	r7, r3
    2450:	d805      	bhi.n	245e <udd_ep_alloc+0xce>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    2452:	3bfb      	subs	r3, #251	; 0xfb
    2454:	7063      	strb	r3, [r4, #1]
    2456:	e7ab      	b.n	23b0 <udd_ep_alloc+0x20>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    2458:	2304      	movs	r3, #4
    245a:	7063      	strb	r3, [r4, #1]
    245c:	e7a8      	b.n	23b0 <udd_ep_alloc+0x20>
	} else if(MaxEndpointSize <= 512) {
    245e:	2380      	movs	r3, #128	; 0x80
    2460:	009b      	lsls	r3, r3, #2
    2462:	429f      	cmp	r7, r3
    2464:	d803      	bhi.n	246e <udd_ep_alloc+0xde>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    2466:	3bfb      	subs	r3, #251	; 0xfb
    2468:	3bff      	subs	r3, #255	; 0xff
    246a:	7063      	strb	r3, [r4, #1]
    246c:	e7a0      	b.n	23b0 <udd_ep_alloc+0x20>
	} else if(MaxEndpointSize <= 1023) {
    246e:	4b0a      	ldr	r3, [pc, #40]	; (2498 <udd_ep_alloc+0x108>)
    2470:	429f      	cmp	r7, r3
    2472:	d8b5      	bhi.n	23e0 <udd_ep_alloc+0x50>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    2474:	2307      	movs	r3, #7
    2476:	7063      	strb	r3, [r4, #1]
    2478:	e79a      	b.n	23b0 <udd_ep_alloc+0x20>
    247a:	46c0      	nop			; (mov r8, r8)
    247c:	00002d8d 	.word	0x00002d8d
    2480:	20000dd4 	.word	0x20000dd4
    2484:	200012d8 	.word	0x200012d8
    2488:	00002d9d 	.word	0x00002d9d
    248c:	000019f9 	.word	0x000019f9
    2490:	00002bdd 	.word	0x00002bdd
    2494:	00002c2d 	.word	0x00002c2d
    2498:	000003ff 	.word	0x000003ff

0000249c <udd_ep_is_halted>:
{
    249c:	b510      	push	{r4, lr}
    249e:	0001      	movs	r1, r0
	return usb_device_endpoint_is_halted(&usb_device, ep);
    24a0:	4b01      	ldr	r3, [pc, #4]	; (24a8 <udd_ep_is_halted+0xc>)
    24a2:	4802      	ldr	r0, [pc, #8]	; (24ac <udd_ep_is_halted+0x10>)
    24a4:	4798      	blx	r3
}
    24a6:	bd10      	pop	{r4, pc}
    24a8:	00002fdd 	.word	0x00002fdd
    24ac:	200012d8 	.word	0x200012d8

000024b0 <udd_ep_set_halt>:
{
    24b0:	b570      	push	{r4, r5, r6, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    24b2:	240f      	movs	r4, #15
{
    24b4:	0005      	movs	r5, r0
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    24b6:	4004      	ands	r4, r0
		return false;
    24b8:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    24ba:	2c02      	cmp	r4, #2
    24bc:	d900      	bls.n	24c0 <udd_ep_set_halt+0x10>
}
    24be:	bd70      	pop	{r4, r5, r6, pc}
	usb_device_endpoint_set_halt(&usb_device, ep);
    24c0:	4e13      	ldr	r6, [pc, #76]	; (2510 <udd_ep_set_halt+0x60>)
    24c2:	0029      	movs	r1, r5
    24c4:	0030      	movs	r0, r6
    24c6:	4b13      	ldr	r3, [pc, #76]	; (2514 <udd_ep_set_halt+0x64>)
    24c8:	4798      	blx	r3
	usb_device_endpoint_abort_job(&usb_device, ep);
    24ca:	4b13      	ldr	r3, [pc, #76]	; (2518 <udd_ep_set_halt+0x68>)
    24cc:	0029      	movs	r1, r5
    24ce:	0030      	movs	r0, r6
    24d0:	4798      	blx	r3
	if ((ep == 0) || (ep == 0x80)) {
    24d2:	237f      	movs	r3, #127	; 0x7f
    24d4:	402b      	ands	r3, r5
    24d6:	d018      	beq.n	250a <udd_ep_set_halt+0x5a>
	if (!ptr_job->busy) {
    24d8:	2101      	movs	r1, #1
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    24da:	09eb      	lsrs	r3, r5, #7
    24dc:	0064      	lsls	r4, r4, #1
    24de:	18e4      	adds	r4, r4, r3
    24e0:	3c02      	subs	r4, #2
	if (!ptr_job->busy) {
    24e2:	00a3      	lsls	r3, r4, #2
    24e4:	191c      	adds	r4, r3, r4
    24e6:	4a0d      	ldr	r2, [pc, #52]	; (251c <udd_ep_set_halt+0x6c>)
    24e8:	00a4      	lsls	r4, r4, #2
    24ea:	1913      	adds	r3, r2, r4
    24ec:	7c98      	ldrb	r0, [r3, #18]
    24ee:	4201      	tst	r1, r0
    24f0:	d009      	beq.n	2506 <udd_ep_set_halt+0x56>
	ptr_job->busy = false;
    24f2:	7c98      	ldrb	r0, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    24f4:	58a4      	ldr	r4, [r4, r2]
	ptr_job->busy = false;
    24f6:	4388      	bics	r0, r1
    24f8:	7498      	strb	r0, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    24fa:	2c00      	cmp	r4, #0
    24fc:	d003      	beq.n	2506 <udd_ep_set_halt+0x56>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    24fe:	68d9      	ldr	r1, [r3, #12]
    2500:	002a      	movs	r2, r5
    2502:	2001      	movs	r0, #1
    2504:	47a0      	blx	r4
    2506:	2001      	movs	r0, #1
    2508:	e7d9      	b.n	24be <udd_ep_set_halt+0xe>
	if (!ptr_job->busy) {
    250a:	7c9b      	ldrb	r3, [r3, #18]
    250c:	deff      	udf	#255	; 0xff
    250e:	46c0      	nop			; (mov r8, r8)
    2510:	200012d8 	.word	0x200012d8
    2514:	00002ffd 	.word	0x00002ffd
    2518:	00002fad 	.word	0x00002fad
    251c:	20000dd4 	.word	0x20000dd4

00002520 <udd_ep_clear_halt>:
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    2520:	230f      	movs	r3, #15
{
    2522:	b570      	push	{r4, r5, r6, lr}
    2524:	0001      	movs	r1, r0
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    2526:	4003      	ands	r3, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    2528:	2b02      	cmp	r3, #2
    252a:	d81f      	bhi.n	256c <udd_ep_clear_halt+0x4c>
	if ((ep == 0) || (ep == 0x80)) {
    252c:	247f      	movs	r4, #127	; 0x7f
    252e:	4004      	ands	r4, r0
    2530:	d104      	bne.n	253c <udd_ep_clear_halt+0x1c>
	usb_device_endpoint_clear_halt(&usb_device, ep);
    2532:	480f      	ldr	r0, [pc, #60]	; (2570 <udd_ep_clear_halt+0x50>)
    2534:	4b0f      	ldr	r3, [pc, #60]	; (2574 <udd_ep_clear_halt+0x54>)
    2536:	4798      	blx	r3
	if (ptr_job->busy == true) {
    2538:	7ca3      	ldrb	r3, [r4, #18]
    253a:	deff      	udf	#255	; 0xff
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    253c:	005c      	lsls	r4, r3, #1
    253e:	09c3      	lsrs	r3, r0, #7
    2540:	18e4      	adds	r4, r4, r3
    2542:	3c02      	subs	r4, #2
	usb_device_endpoint_clear_halt(&usb_device, ep);
    2544:	4b0b      	ldr	r3, [pc, #44]	; (2574 <udd_ep_clear_halt+0x54>)
    2546:	480a      	ldr	r0, [pc, #40]	; (2570 <udd_ep_clear_halt+0x50>)
    2548:	4798      	blx	r3
	if (ptr_job->busy == true) {
    254a:	00a3      	lsls	r3, r4, #2
    254c:	191c      	adds	r4, r3, r4
    254e:	4a0a      	ldr	r2, [pc, #40]	; (2578 <udd_ep_clear_halt+0x58>)
    2550:	00a4      	lsls	r4, r4, #2
    2552:	1913      	adds	r3, r2, r4
    2554:	7c99      	ldrb	r1, [r3, #18]
	return true;
    2556:	2501      	movs	r5, #1
	if (ptr_job->busy == true) {
    2558:	07c9      	lsls	r1, r1, #31
    255a:	d401      	bmi.n	2560 <udd_ep_clear_halt+0x40>
}
    255c:	0028      	movs	r0, r5
    255e:	bd70      	pop	{r4, r5, r6, pc}
		ptr_job->busy = false;
    2560:	7c99      	ldrb	r1, [r3, #18]
    2562:	43a9      	bics	r1, r5
    2564:	7499      	strb	r1, [r3, #18]
		ptr_job->call_nohalt();
    2566:	58a3      	ldr	r3, [r4, r2]
    2568:	4798      	blx	r3
    256a:	e7f7      	b.n	255c <udd_ep_clear_halt+0x3c>
		return false;
    256c:	2500      	movs	r5, #0
    256e:	e7f5      	b.n	255c <udd_ep_clear_halt+0x3c>
    2570:	200012d8 	.word	0x200012d8
    2574:	0000301d 	.word	0x0000301d
    2578:	20000dd4 	.word	0x20000dd4

0000257c <udd_ep_wait_stall_clear>:
{
    257c:	b5f0      	push	{r4, r5, r6, r7, lr}
	ep_num = ep & USB_EP_ADDR_MASK;
    257e:	230f      	movs	r3, #15
{
    2580:	4646      	mov	r6, r8
    2582:	46d6      	mov	lr, sl
    2584:	464f      	mov	r7, r9
    2586:	0005      	movs	r5, r0
    2588:	b5c0      	push	{r6, r7, lr}
	ep_num = ep & USB_EP_ADDR_MASK;
    258a:	4003      	ands	r3, r0
{
    258c:	000e      	movs	r6, r1
	if (USB_DEVICE_MAX_EP < ep_num) {
    258e:	2b02      	cmp	r3, #2
    2590:	d813      	bhi.n	25ba <udd_ep_wait_stall_clear+0x3e>
	if ((ep == 0) || (ep == 0x80)) {
    2592:	227f      	movs	r2, #127	; 0x7f
    2594:	4002      	ands	r2, r0
    2596:	d101      	bne.n	259c <udd_ep_wait_stall_clear+0x20>
	if (ptr_job->busy == true) {
    2598:	7c93      	ldrb	r3, [r2, #18]
    259a:	deff      	udf	#255	; 0xff
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    259c:	09c2      	lsrs	r2, r0, #7
    259e:	005b      	lsls	r3, r3, #1
    25a0:	189b      	adds	r3, r3, r2
    25a2:	3b02      	subs	r3, #2
	if (ptr_job->busy == true) {
    25a4:	009c      	lsls	r4, r3, #2
    25a6:	18e4      	adds	r4, r4, r3
    25a8:	4a13      	ldr	r2, [pc, #76]	; (25f8 <udd_ep_wait_stall_clear+0x7c>)
    25aa:	00a4      	lsls	r4, r4, #2
    25ac:	4690      	mov	r8, r2
    25ae:	46a1      	mov	r9, r4
    25b0:	44c1      	add	r9, r8
    25b2:	464b      	mov	r3, r9
    25b4:	7c9b      	ldrb	r3, [r3, #18]
    25b6:	07db      	lsls	r3, r3, #31
    25b8:	d506      	bpl.n	25c8 <udd_ep_wait_stall_clear+0x4c>
		return false;
    25ba:	2700      	movs	r7, #0
}
    25bc:	0038      	movs	r0, r7
    25be:	bc1c      	pop	{r2, r3, r4}
    25c0:	4690      	mov	r8, r2
    25c2:	4699      	mov	r9, r3
    25c4:	46a2      	mov	sl, r4
    25c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usb_device_endpoint_is_halted(&usb_device, ep)) {
    25c8:	4b0c      	ldr	r3, [pc, #48]	; (25fc <udd_ep_wait_stall_clear+0x80>)
    25ca:	0001      	movs	r1, r0
    25cc:	469a      	mov	sl, r3
    25ce:	0018      	movs	r0, r3
    25d0:	4b0b      	ldr	r3, [pc, #44]	; (2600 <udd_ep_wait_stall_clear+0x84>)
    25d2:	4798      	blx	r3
    25d4:	1e07      	subs	r7, r0, #0
    25d6:	d007      	beq.n	25e8 <udd_ep_wait_stall_clear+0x6c>
		ptr_job->busy = true;
    25d8:	464b      	mov	r3, r9
    25da:	2101      	movs	r1, #1
    25dc:	7c9a      	ldrb	r2, [r3, #18]
    25de:	430a      	orrs	r2, r1
    25e0:	749a      	strb	r2, [r3, #18]
		ptr_job->call_nohalt = callback;
    25e2:	4643      	mov	r3, r8
    25e4:	50e6      	str	r6, [r4, r3]
		return true;
    25e6:	e7e9      	b.n	25bc <udd_ep_wait_stall_clear+0x40>
	} else if (usb_device_endpoint_is_configured(&usb_device, ep)) {
    25e8:	0029      	movs	r1, r5
    25ea:	4650      	mov	r0, sl
    25ec:	4b05      	ldr	r3, [pc, #20]	; (2604 <udd_ep_wait_stall_clear+0x88>)
    25ee:	4798      	blx	r3
    25f0:	1e07      	subs	r7, r0, #0
    25f2:	d0e2      	beq.n	25ba <udd_ep_wait_stall_clear+0x3e>
		callback(); /* Endpoint not halted then call directly callback */
    25f4:	47b0      	blx	r6
		return true;
    25f6:	e7e1      	b.n	25bc <udd_ep_wait_stall_clear+0x40>
    25f8:	20000dd4 	.word	0x20000dd4
    25fc:	200012d8 	.word	0x200012d8
    2600:	00002fdd 	.word	0x00002fdd
    2604:	00002f89 	.word	0x00002f89

00002608 <udd_ep_run>:
{
    2608:	b5f0      	push	{r4, r5, r6, r7, lr}
    260a:	4645      	mov	r5, r8
    260c:	4657      	mov	r7, sl
    260e:	464e      	mov	r6, r9
    2610:	46de      	mov	lr, fp
	ep_num = ep & USB_EP_ADDR_MASK;
    2612:	240f      	movs	r4, #15
{
    2614:	b5e0      	push	{r5, r6, r7, lr}
    2616:	4688      	mov	r8, r1
    2618:	b087      	sub	sp, #28
    261a:	0005      	movs	r5, r0
    261c:	4691      	mov	r9, r2
    261e:	001f      	movs	r7, r3
	ep_num = ep & USB_EP_ADDR_MASK;
    2620:	4004      	ands	r4, r0
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    2622:	2c02      	cmp	r4, #2
    2624:	d907      	bls.n	2636 <udd_ep_run+0x2e>
		return false;
    2626:	2000      	movs	r0, #0
}
    2628:	b007      	add	sp, #28
    262a:	bc3c      	pop	{r2, r3, r4, r5}
    262c:	4690      	mov	r8, r2
    262e:	4699      	mov	r9, r3
    2630:	46a2      	mov	sl, r4
    2632:	46ab      	mov	fp, r5
    2634:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return usb_device_endpoint_is_halted(&usb_device, ep);
    2636:	4b75      	ldr	r3, [pc, #468]	; (280c <udd_ep_run+0x204>)
    2638:	0001      	movs	r1, r0
    263a:	469b      	mov	fp, r3
    263c:	0018      	movs	r0, r3
    263e:	4b74      	ldr	r3, [pc, #464]	; (2810 <udd_ep_run+0x208>)
    2640:	4798      	blx	r3
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    2642:	2800      	cmp	r0, #0
    2644:	d1ef      	bne.n	2626 <udd_ep_run+0x1e>
	if ((ep == 0) || (ep == 0x80)) {
    2646:	237f      	movs	r3, #127	; 0x7f
    2648:	402b      	ands	r3, r5
    264a:	d10c      	bne.n	2666 <udd_ep_run+0x5e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    264c:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2650:	4251      	negs	r1, r2
    2652:	414a      	adcs	r2, r1
    2654:	9205      	str	r2, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    2656:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    2658:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    265c:	4a6d      	ldr	r2, [pc, #436]	; (2814 <udd_ep_run+0x20c>)
    265e:	7013      	strb	r3, [r2, #0]
	return flags;
    2660:	9a05      	ldr	r2, [sp, #20]
	if (ptr_job->busy == true) {
    2662:	7c9b      	ldrb	r3, [r3, #18]
    2664:	deff      	udf	#255	; 0xff
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    2666:	b26b      	sxtb	r3, r5
    2668:	001a      	movs	r2, r3
    266a:	9303      	str	r3, [sp, #12]
    266c:	0fd2      	lsrs	r2, r2, #31
    266e:	0063      	lsls	r3, r4, #1
    2670:	189e      	adds	r6, r3, r2
    2672:	1eb1      	subs	r1, r6, #2
    2674:	000e      	movs	r6, r1
    2676:	9101      	str	r1, [sp, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2678:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    267c:	425a      	negs	r2, r3
    267e:	4153      	adcs	r3, r2
    2680:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    2682:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    2684:	f3bf 8f5f 	dmb	sy
	if (ptr_job->busy == true) {
    2688:	4963      	ldr	r1, [pc, #396]	; (2818 <udd_ep_run+0x210>)
    268a:	46b4      	mov	ip, r6
    268c:	468a      	mov	sl, r1
    268e:	2101      	movs	r1, #1
	cpu_irq_disable();
    2690:	4a60      	ldr	r2, [pc, #384]	; (2814 <udd_ep_run+0x20c>)
    2692:	7010      	strb	r0, [r2, #0]
	return flags;
    2694:	9b05      	ldr	r3, [sp, #20]
    2696:	9300      	str	r3, [sp, #0]
    2698:	00b3      	lsls	r3, r6, #2
    269a:	9302      	str	r3, [sp, #8]
    269c:	4463      	add	r3, ip
    269e:	009b      	lsls	r3, r3, #2
    26a0:	4453      	add	r3, sl
    26a2:	7c9e      	ldrb	r6, [r3, #18]
    26a4:	4231      	tst	r1, r6
    26a6:	d153      	bne.n	2750 <udd_ep_run+0x148>
	ptr_job->busy = true;
    26a8:	2601      	movs	r6, #1
    26aa:	46b4      	mov	ip, r6
    26ac:	4666      	mov	r6, ip
    26ae:	7c98      	ldrb	r0, [r3, #18]
    26b0:	4330      	orrs	r0, r6
    26b2:	7498      	strb	r0, [r3, #18]
	if (cpu_irq_is_enabled_flags(flags))
    26b4:	9b00      	ldr	r3, [sp, #0]
    26b6:	2b00      	cmp	r3, #0
    26b8:	d160      	bne.n	277c <udd_ep_run+0x174>
	ptr_job->buf = buf;
    26ba:	9a01      	ldr	r2, [sp, #4]
    26bc:	4649      	mov	r1, r9
    26be:	4694      	mov	ip, r2
    26c0:	4652      	mov	r2, sl
    26c2:	9b02      	ldr	r3, [sp, #8]
	ptr_job->call_trans = callback;
    26c4:	9810      	ldr	r0, [sp, #64]	; 0x40
	ptr_job->buf = buf;
    26c6:	4463      	add	r3, ip
    26c8:	009b      	lsls	r3, r3, #2
    26ca:	18d2      	adds	r2, r2, r3
    26cc:	6051      	str	r1, [r2, #4]
	ptr_job->nb_trans = 0;
    26ce:	2100      	movs	r1, #0
    26d0:	60d1      	str	r1, [r2, #12]
	ptr_job->call_trans = callback;
    26d2:	4651      	mov	r1, sl
    26d4:	50c8      	str	r0, [r1, r3]
	ptr_job->b_shortpacket = b_shortpacket;
    26d6:	0011      	movs	r1, r2
    26d8:	3110      	adds	r1, #16
    26da:	788e      	ldrb	r6, [r1, #2]
    26dc:	4643      	mov	r3, r8
    26de:	46b0      	mov	r8, r6
    26e0:	2602      	movs	r6, #2
    26e2:	2001      	movs	r0, #1
    26e4:	46b4      	mov	ip, r6
    26e6:	4003      	ands	r3, r0
    26e8:	4646      	mov	r6, r8
    26ea:	4660      	mov	r0, ip
    26ec:	4386      	bics	r6, r0
	ptr_job->b_use_out_cache_buffer = false;
    26ee:	2004      	movs	r0, #4
	ptr_job->b_shortpacket = b_shortpacket;
    26f0:	005b      	lsls	r3, r3, #1
	ptr_job->b_use_out_cache_buffer = false;
    26f2:	4333      	orrs	r3, r6
    26f4:	4383      	bics	r3, r0
    26f6:	708b      	strb	r3, [r1, #2]
	if (ep & USB_EP_DIR_IN) {
    26f8:	9b03      	ldr	r3, [sp, #12]
	ptr_job->buf_size = buf_size;
    26fa:	6097      	str	r7, [r2, #8]
	if (ep & USB_EP_DIR_IN) {
    26fc:	2b00      	cmp	r3, #0
    26fe:	db42      	blt.n	2786 <udd_ep_run+0x17e>
		if (0 != ptr_job->buf_size) {
    2700:	2f00      	cmp	r7, #0
    2702:	d02e      	beq.n	2762 <udd_ep_run+0x15a>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    2704:	8a13      	ldrh	r3, [r2, #16]
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    2706:	4d45      	ldr	r5, [pc, #276]	; (281c <udd_ep_run+0x214>)
			next_trans = ptr_job->buf_size;
    2708:	b2bf      	uxth	r7, r7
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    270a:	4698      	mov	r8, r3
    270c:	0019      	movs	r1, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    270e:	42af      	cmp	r7, r5
    2710:	d96d      	bls.n	27ee <udd_ep_run+0x1e6>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    2712:	4b43      	ldr	r3, [pc, #268]	; (2820 <udd_ep_run+0x218>)
    2714:	0028      	movs	r0, r5
    2716:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    2718:	1a6b      	subs	r3, r5, r1
    271a:	b29b      	uxth	r3, r3
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    271c:	464a      	mov	r2, r9
			if (next_trans < ptr_job->ep_size) {
    271e:	4543      	cmp	r3, r8
    2720:	d20e      	bcs.n	2740 <udd_ep_run+0x138>
				ptr_job->b_use_out_cache_buffer = true;
    2722:	9b02      	ldr	r3, [sp, #8]
    2724:	2104      	movs	r1, #4
    2726:	469c      	mov	ip, r3
    2728:	9b01      	ldr	r3, [sp, #4]
    272a:	4463      	add	r3, ip
    272c:	009e      	lsls	r6, r3, #2
    272e:	4456      	add	r6, sl
    2730:	7cb2      	ldrb	r2, [r6, #18]
								udd_ep_out_cache_buffer[ep_num - 1],
    2732:	4b3c      	ldr	r3, [pc, #240]	; (2824 <udd_ep_run+0x21c>)
				ptr_job->b_use_out_cache_buffer = true;
    2734:	430a      	orrs	r2, r1
    2736:	74b2      	strb	r2, [r6, #18]
								udd_ep_out_cache_buffer[ep_num - 1],
    2738:	1e62      	subs	r2, r4, #1
    273a:	0192      	lsls	r2, r2, #6
    273c:	18d2      	adds	r2, r2, r3
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    273e:	4643      	mov	r3, r8
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    2740:	0021      	movs	r1, r4
    2742:	4658      	mov	r0, fp
    2744:	4c38      	ldr	r4, [pc, #224]	; (2828 <udd_ep_run+0x220>)
    2746:	47a0      	blx	r4
				return (STATUS_OK ==
    2748:	4243      	negs	r3, r0
    274a:	4158      	adcs	r0, r3
    274c:	b2c0      	uxtb	r0, r0
    274e:	e76b      	b.n	2628 <udd_ep_run+0x20>
    2750:	9b00      	ldr	r3, [sp, #0]
    2752:	2b00      	cmp	r3, #0
    2754:	d100      	bne.n	2758 <udd_ep_run+0x150>
    2756:	e766      	b.n	2626 <udd_ep_run+0x1e>
		cpu_irq_enable();
    2758:	7011      	strb	r1, [r2, #0]
    275a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    275e:	b662      	cpsie	i
    2760:	e762      	b.n	2628 <udd_ep_run+0x20>
			ptr_job->busy = false;
    2762:	2201      	movs	r2, #1
    2764:	788b      	ldrb	r3, [r1, #2]
    2766:	4393      	bics	r3, r2
    2768:	708b      	strb	r3, [r1, #2]
			if (NULL != ptr_job->call_trans) {
    276a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    276c:	2b00      	cmp	r3, #0
    276e:	d003      	beq.n	2778 <udd_ep_run+0x170>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    2770:	002a      	movs	r2, r5
    2772:	2100      	movs	r1, #0
    2774:	2000      	movs	r0, #0
    2776:	4798      	blx	r3
			return true;
    2778:	2001      	movs	r0, #1
    277a:	e755      	b.n	2628 <udd_ep_run+0x20>
    277c:	7011      	strb	r1, [r2, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    277e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2782:	b662      	cpsie	i
    2784:	e799      	b.n	26ba <udd_ep_run+0xb2>
		if (0 != ptr_job->buf_size) {
    2786:	2f00      	cmp	r7, #0
    2788:	d037      	beq.n	27fa <udd_ep_run+0x1f2>
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    278a:	4d24      	ldr	r5, [pc, #144]	; (281c <udd_ep_run+0x214>)
			next_trans = ptr_job->buf_size;
    278c:	b2bf      	uxth	r7, r7
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    278e:	42af      	cmp	r7, r5
    2790:	d905      	bls.n	279e <udd_ep_run+0x196>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    2792:	8a11      	ldrh	r1, [r2, #16]
    2794:	0028      	movs	r0, r5
    2796:	4b22      	ldr	r3, [pc, #136]	; (2820 <udd_ep_run+0x218>)
    2798:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    279a:	1a6f      	subs	r7, r5, r1
    279c:	b2bf      	uxth	r7, r7
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    279e:	9a01      	ldr	r2, [sp, #4]
    27a0:	9b02      	ldr	r3, [sp, #8]
    27a2:	4694      	mov	ip, r2
    27a4:	4463      	add	r3, ip
    27a6:	009b      	lsls	r3, r3, #2
    27a8:	4453      	add	r3, sl
    27aa:	7c99      	ldrb	r1, [r3, #18]
    27ac:	2200      	movs	r2, #0
    27ae:	0789      	lsls	r1, r1, #30
    27b0:	d507      	bpl.n	27c2 <udd_ep_run+0x1ba>
					(0 == (next_trans % ptr_job->ep_size));
    27b2:	8a19      	ldrh	r1, [r3, #16]
    27b4:	0038      	movs	r0, r7
    27b6:	4b1d      	ldr	r3, [pc, #116]	; (282c <udd_ep_run+0x224>)
    27b8:	4798      	blx	r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    27ba:	b289      	uxth	r1, r1
    27bc:	424a      	negs	r2, r1
    27be:	414a      	adcs	r2, r1
    27c0:	b2d2      	uxtb	r2, r2
    27c2:	9901      	ldr	r1, [sp, #4]
    27c4:	2002      	movs	r0, #2
    27c6:	468c      	mov	ip, r1
    27c8:	9b02      	ldr	r3, [sp, #8]
    27ca:	0051      	lsls	r1, r2, #1
    27cc:	4463      	add	r3, ip
    27ce:	009b      	lsls	r3, r3, #2
    27d0:	4453      	add	r3, sl
    27d2:	7c9a      	ldrb	r2, [r3, #18]
    27d4:	4382      	bics	r2, r0
    27d6:	430a      	orrs	r2, r1
    27d8:	749a      	strb	r2, [r3, #18]
    27da:	003b      	movs	r3, r7
				usb_device_endpoint_write_buffer_job(&usb_device,
    27dc:	0021      	movs	r1, r4
    27de:	464a      	mov	r2, r9
    27e0:	4658      	mov	r0, fp
    27e2:	4c13      	ldr	r4, [pc, #76]	; (2830 <udd_ep_run+0x228>)
    27e4:	47a0      	blx	r4
		return (STATUS_OK ==
    27e6:	4243      	negs	r3, r0
    27e8:	4158      	adcs	r0, r3
    27ea:	b2c0      	uxtb	r0, r0
    27ec:	e71c      	b.n	2628 <udd_ep_run+0x20>
				next_trans -= next_trans % ptr_job->ep_size;
    27ee:	0038      	movs	r0, r7
    27f0:	4b0e      	ldr	r3, [pc, #56]	; (282c <udd_ep_run+0x224>)
    27f2:	4798      	blx	r3
    27f4:	1a7f      	subs	r7, r7, r1
    27f6:	b2bb      	uxth	r3, r7
    27f8:	e790      	b.n	271c <udd_ep_run+0x114>
		} else if (true == ptr_job->b_shortpacket) {
    27fa:	7c93      	ldrb	r3, [r2, #18]
    27fc:	4662      	mov	r2, ip
    27fe:	421a      	tst	r2, r3
    2800:	d0af      	beq.n	2762 <udd_ep_run+0x15a>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    2802:	788b      	ldrb	r3, [r1, #2]
    2804:	4393      	bics	r3, r2
    2806:	708b      	strb	r3, [r1, #2]
    2808:	2300      	movs	r3, #0
    280a:	e7e7      	b.n	27dc <udd_ep_run+0x1d4>
    280c:	200012d8 	.word	0x200012d8
    2810:	00002fdd 	.word	0x00002fdd
    2814:	200000ca 	.word	0x200000ca
    2818:	20000dd4 	.word	0x20000dd4
    281c:	00001fff 	.word	0x00001fff
    2820:	0001c26d 	.word	0x0001c26d
    2824:	20001258 	.word	0x20001258
    2828:	000030e5 	.word	0x000030e5
    282c:	0001c099 	.word	0x0001c099
    2830:	00003099 	.word	0x00003099

00002834 <udd_set_address>:
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    2834:	2280      	movs	r2, #128	; 0x80
    2836:	4b02      	ldr	r3, [pc, #8]	; (2840 <udd_set_address+0xc>)
    2838:	4310      	orrs	r0, r2
    283a:	681b      	ldr	r3, [r3, #0]
    283c:	7298      	strb	r0, [r3, #10]
}
    283e:	4770      	bx	lr
    2840:	200012d8 	.word	0x200012d8

00002844 <udd_getaddress>:
{
    2844:	4b02      	ldr	r3, [pc, #8]	; (2850 <udd_getaddress+0xc>)
}
    2846:	681b      	ldr	r3, [r3, #0]
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    2848:	7a98      	ldrb	r0, [r3, #10]
    284a:	0640      	lsls	r0, r0, #25
    284c:	0e40      	lsrs	r0, r0, #25
    284e:	4770      	bx	lr
    2850:	200012d8 	.word	0x200012d8

00002854 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
    2854:	4b01      	ldr	r3, [pc, #4]	; (285c <udd_set_setup_payload+0x8>)
    2856:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    2858:	8199      	strh	r1, [r3, #12]
}
    285a:	4770      	bx	lr
    285c:	20001440 	.word	0x20001440

00002860 <udd_attach>:
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
}

void udd_attach(void)
{
    2860:	b570      	push	{r4, r5, r6, lr}
	enum sleepmgr_mode sleep_mode[] = {
    2862:	4b36      	ldr	r3, [pc, #216]	; (293c <udd_attach+0xdc>)
	if (udd_state == new_state) {
    2864:	4c36      	ldr	r4, [pc, #216]	; (2940 <udd_attach+0xe0>)
{
    2866:	b084      	sub	sp, #16
	enum sleepmgr_mode sleep_mode[] = {
    2868:	9301      	str	r3, [sp, #4]
	if (udd_state == new_state) {
    286a:	7823      	ldrb	r3, [r4, #0]
    286c:	2b03      	cmp	r3, #3
    286e:	d01e      	beq.n	28ae <udd_attach+0x4e>
	if(sleepmgr_locks[mode] >= 0xff) {
    2870:	4b34      	ldr	r3, [pc, #208]	; (2944 <udd_attach+0xe4>)
    2872:	785a      	ldrb	r2, [r3, #1]
    2874:	2aff      	cmp	r2, #255	; 0xff
    2876:	d047      	beq.n	2908 <udd_attach+0xa8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2878:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    287c:	4251      	negs	r1, r2
    287e:	414a      	adcs	r2, r1
    2880:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    2882:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    2884:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2888:	2200      	movs	r2, #0
    288a:	492f      	ldr	r1, [pc, #188]	; (2948 <udd_attach+0xe8>)
    288c:	700a      	strb	r2, [r1, #0]
	++sleepmgr_locks[mode];
    288e:	785a      	ldrb	r2, [r3, #1]
	return flags;
    2890:	9802      	ldr	r0, [sp, #8]
    2892:	3201      	adds	r2, #1
    2894:	705a      	strb	r2, [r3, #1]
	if (cpu_irq_is_enabled_flags(flags))
    2896:	2800      	cmp	r0, #0
    2898:	d004      	beq.n	28a4 <udd_attach+0x44>
		cpu_irq_enable();
    289a:	2201      	movs	r2, #1
    289c:	700a      	strb	r2, [r1, #0]
    289e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    28a2:	b662      	cpsie	i
	if (udd_state != UDD_STATE_OFF) {
    28a4:	7822      	ldrb	r2, [r4, #0]
    28a6:	2a00      	cmp	r2, #0
    28a8:	d12f      	bne.n	290a <udd_attach+0xaa>
	udd_state = new_state;
    28aa:	2303      	movs	r3, #3
    28ac:	7023      	strb	r3, [r4, #0]
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    28ae:	2101      	movs	r1, #1
    28b0:	4c26      	ldr	r4, [pc, #152]	; (294c <udd_attach+0xec>)
	udd_sleep_mode(UDD_STATE_IDLE);
	usb_device_attach(&usb_device);

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    28b2:	4e27      	ldr	r6, [pc, #156]	; (2950 <udd_attach+0xf0>)
    28b4:	6822      	ldr	r2, [r4, #0]
    28b6:	0020      	movs	r0, r4
    28b8:	8913      	ldrh	r3, [r2, #8]
    28ba:	438b      	bics	r3, r1
    28bc:	8113      	strh	r3, [r2, #8]
    28be:	3103      	adds	r1, #3
    28c0:	4a24      	ldr	r2, [pc, #144]	; (2954 <udd_attach+0xf4>)
    28c2:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    28c4:	4a24      	ldr	r2, [pc, #144]	; (2958 <udd_attach+0xf8>)
    28c6:	2100      	movs	r1, #0
    28c8:	0020      	movs	r0, r4
    28ca:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    28cc:	4a23      	ldr	r2, [pc, #140]	; (295c <udd_attach+0xfc>)
    28ce:	2101      	movs	r1, #1
    28d0:	0020      	movs	r0, r4
    28d2:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    28d4:	4a22      	ldr	r2, [pc, #136]	; (2960 <udd_attach+0x100>)
    28d6:	2102      	movs	r1, #2
    28d8:	0020      	movs	r0, r4
    28da:	47b0      	blx	r6

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    28dc:	4d21      	ldr	r5, [pc, #132]	; (2964 <udd_attach+0x104>)
    28de:	2104      	movs	r1, #4
    28e0:	0020      	movs	r0, r4
    28e2:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    28e4:	2100      	movs	r1, #0
    28e6:	0020      	movs	r0, r4
    28e8:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    28ea:	2101      	movs	r1, #1
    28ec:	0020      	movs	r0, r4
    28ee:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    28f0:	2102      	movs	r1, #2
    28f2:	0020      	movs	r0, r4
    28f4:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    28f6:	4a1c      	ldr	r2, [pc, #112]	; (2968 <udd_attach+0x108>)
    28f8:	2106      	movs	r1, #6
    28fa:	0020      	movs	r0, r4
    28fc:	47b0      	blx	r6
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    28fe:	2106      	movs	r1, #6
    2900:	0020      	movs	r0, r4
    2902:	47a8      	blx	r5
#endif
}
    2904:	b004      	add	sp, #16
    2906:	bd70      	pop	{r4, r5, r6, pc}
    2908:	e7fe      	b.n	2908 <udd_attach+0xa8>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    290a:	a801      	add	r0, sp, #4
	if(sleepmgr_locks[mode] == 0) {
    290c:	5c82      	ldrb	r2, [r0, r2]
    290e:	5c98      	ldrb	r0, [r3, r2]
    2910:	2800      	cmp	r0, #0
    2912:	d012      	beq.n	293a <udd_attach+0xda>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2914:	f3ef 8010 	mrs	r0, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2918:	4245      	negs	r5, r0
    291a:	4168      	adcs	r0, r5
    291c:	9003      	str	r0, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    291e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    2920:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2924:	2000      	movs	r0, #0
    2926:	7008      	strb	r0, [r1, #0]
	--sleepmgr_locks[mode];
    2928:	5c99      	ldrb	r1, [r3, r2]
	return flags;
    292a:	9803      	ldr	r0, [sp, #12]
    292c:	3901      	subs	r1, #1
    292e:	5499      	strb	r1, [r3, r2]
	if (cpu_irq_is_enabled_flags(flags))
    2930:	2800      	cmp	r0, #0
    2932:	d0ba      	beq.n	28aa <udd_attach+0x4a>
    2934:	4b0d      	ldr	r3, [pc, #52]	; (296c <udd_attach+0x10c>)
    2936:	4798      	blx	r3
    2938:	e7b7      	b.n	28aa <udd_attach+0x4a>
    293a:	e7fe      	b.n	293a <udd_attach+0xda>
    293c:	01010100 	.word	0x01010100
    2940:	20000e24 	.word	0x20000e24
    2944:	20001638 	.word	0x20001638
    2948:	200000ca 	.word	0x200000ca
    294c:	200012d8 	.word	0x200012d8
    2950:	00002b7d 	.word	0x00002b7d
    2954:	0000209d 	.word	0x0000209d
    2958:	00001dc5 	.word	0x00001dc5
    295c:	00001c05 	.word	0x00001c05
    2960:	00001fa9 	.word	0x00001fa9
    2964:	00002ba1 	.word	0x00002ba1
    2968:	00001de5 	.word	0x00001de5
    296c:	00001dd1 	.word	0x00001dd1

00002970 <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    2970:	b5f0      	push	{r4, r5, r6, r7, lr}
    2972:	b087      	sub	sp, #28
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2974:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2978:	425a      	negs	r2, r3
    297a:	4153      	adcs	r3, r2
    297c:	9302      	str	r3, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    297e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    2980:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2984:	2300      	movs	r3, #0
    2986:	4c36      	ldr	r4, [pc, #216]	; (2a60 <udd_enable+0xf0>)
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    2988:	ae01      	add	r6, sp, #4
    298a:	7023      	strb	r3, [r4, #0]
    298c:	0030      	movs	r0, r6
    298e:	4b35      	ldr	r3, [pc, #212]	; (2a64 <udd_enable+0xf4>)
	return flags;
    2990:	9d02      	ldr	r5, [sp, #8]
    2992:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    2994:	2303      	movs	r3, #3
	usb_init(&usb_device, USB, &config_usb);
    2996:	2182      	movs	r1, #130	; 0x82
    2998:	4f33      	ldr	r7, [pc, #204]	; (2a68 <udd_enable+0xf8>)
    299a:	0032      	movs	r2, r6
	config_usb.source_generator = UDD_CLOCK_GEN;
    299c:	70b3      	strb	r3, [r6, #2]
	usb_init(&usb_device, USB, &config_usb);
    299e:	05c9      	lsls	r1, r1, #23
    29a0:	4b32      	ldr	r3, [pc, #200]	; (2a6c <udd_enable+0xfc>)
    29a2:	0038      	movs	r0, r7
    29a4:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    29a6:	4b32      	ldr	r3, [pc, #200]	; (2a70 <udd_enable+0x100>)
    29a8:	0038      	movs	r0, r7
    29aa:	4798      	blx	r3
		if (!(OSCCTRL->DFLLCTRL.reg & OSCCTRL_DFLLCTRL_USBCRM)) {
    29ac:	4b31      	ldr	r3, [pc, #196]	; (2a74 <udd_enable+0x104>)
    29ae:	8b1a      	ldrh	r2, [r3, #24]
    29b0:	0692      	lsls	r2, r2, #26
    29b2:	d435      	bmi.n	2a20 <udd_enable+0xb0>
			while((OSCCTRL->STATUS.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    29b4:	21d0      	movs	r1, #208	; 0xd0
    29b6:	0109      	lsls	r1, r1, #4
    29b8:	68da      	ldr	r2, [r3, #12]
    29ba:	400a      	ands	r2, r1
    29bc:	428a      	cmp	r2, r1
    29be:	d1fb      	bne.n	29b8 <udd_enable+0x48>
	enum sleepmgr_mode sleep_mode[] = {
    29c0:	4b2d      	ldr	r3, [pc, #180]	; (2a78 <udd_enable+0x108>)
	if (udd_state == new_state) {
    29c2:	4e2e      	ldr	r6, [pc, #184]	; (2a7c <udd_enable+0x10c>)
	enum sleepmgr_mode sleep_mode[] = {
    29c4:	9303      	str	r3, [sp, #12]
	if (udd_state == new_state) {
    29c6:	7833      	ldrb	r3, [r6, #0]
    29c8:	2b01      	cmp	r3, #1
    29ca:	d01d      	beq.n	2a08 <udd_enable+0x98>
	if(sleepmgr_locks[mode] >= 0xff) {
    29cc:	4b2c      	ldr	r3, [pc, #176]	; (2a80 <udd_enable+0x110>)
    29ce:	785a      	ldrb	r2, [r3, #1]
    29d0:	2aff      	cmp	r2, #255	; 0xff
    29d2:	d024      	beq.n	2a1e <udd_enable+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    29d4:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    29d8:	4251      	negs	r1, r2
    29da:	414a      	adcs	r2, r1
    29dc:	9204      	str	r2, [sp, #16]
  __ASM volatile ("cpsid i" : : : "memory");
    29de:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    29e0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    29e4:	2200      	movs	r2, #0
    29e6:	7022      	strb	r2, [r4, #0]
	++sleepmgr_locks[mode];
    29e8:	785a      	ldrb	r2, [r3, #1]
	return flags;
    29ea:	9904      	ldr	r1, [sp, #16]
    29ec:	3201      	adds	r2, #1
    29ee:	705a      	strb	r2, [r3, #1]
	if (cpu_irq_is_enabled_flags(flags))
    29f0:	2900      	cmp	r1, #0
    29f2:	d004      	beq.n	29fe <udd_enable+0x8e>
		cpu_irq_enable();
    29f4:	2201      	movs	r2, #1
    29f6:	7022      	strb	r2, [r4, #0]
    29f8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    29fc:	b662      	cpsie	i
	if (udd_state != UDD_STATE_OFF) {
    29fe:	7832      	ldrb	r2, [r6, #0]
    2a00:	2a00      	cmp	r2, #0
    2a02:	d113      	bne.n	2a2c <udd_enable+0xbc>
	udd_state = new_state;
    2a04:	2301      	movs	r3, #1
    2a06:	7033      	strb	r3, [r6, #0]
		_uhd_vbus_handler();
	}
#else
	// No VBus detect, assume always high
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
    2a08:	4b1e      	ldr	r3, [pc, #120]	; (2a84 <udd_enable+0x114>)
    2a0a:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    2a0c:	2d00      	cmp	r5, #0
    2a0e:	d004      	beq.n	2a1a <udd_enable+0xaa>
		cpu_irq_enable();
    2a10:	2301      	movs	r3, #1
    2a12:	7023      	strb	r3, [r4, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    2a14:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2a18:	b662      	cpsie	i
# endif
#endif

	cpu_irq_restore(flags);
}
    2a1a:	b007      	add	sp, #28
    2a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a1e:	e7fe      	b.n	2a1e <udd_enable+0xae>
			while((OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY);
    2a20:	2180      	movs	r1, #128	; 0x80
    2a22:	0049      	lsls	r1, r1, #1
    2a24:	68da      	ldr	r2, [r3, #12]
    2a26:	420a      	tst	r2, r1
    2a28:	d0fc      	beq.n	2a24 <udd_enable+0xb4>
    2a2a:	e7c9      	b.n	29c0 <udd_enable+0x50>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    2a2c:	a903      	add	r1, sp, #12
	if(sleepmgr_locks[mode] == 0) {
    2a2e:	5c8a      	ldrb	r2, [r1, r2]
    2a30:	5c99      	ldrb	r1, [r3, r2]
    2a32:	2900      	cmp	r1, #0
    2a34:	d012      	beq.n	2a5c <udd_enable+0xec>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2a36:	f3ef 8110 	mrs	r1, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2a3a:	4248      	negs	r0, r1
    2a3c:	4141      	adcs	r1, r0
    2a3e:	9105      	str	r1, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    2a40:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    2a42:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2a46:	2100      	movs	r1, #0
    2a48:	7021      	strb	r1, [r4, #0]
	--sleepmgr_locks[mode];
    2a4a:	5c99      	ldrb	r1, [r3, r2]
	return flags;
    2a4c:	9805      	ldr	r0, [sp, #20]
    2a4e:	3901      	subs	r1, #1
    2a50:	5499      	strb	r1, [r3, r2]
	if (cpu_irq_is_enabled_flags(flags))
    2a52:	2800      	cmp	r0, #0
    2a54:	d0d6      	beq.n	2a04 <udd_enable+0x94>
    2a56:	4b0c      	ldr	r3, [pc, #48]	; (2a88 <udd_enable+0x118>)
    2a58:	4798      	blx	r3
    2a5a:	e7d3      	b.n	2a04 <udd_enable+0x94>
    2a5c:	e7fe      	b.n	2a5c <udd_enable+0xec>
    2a5e:	46c0      	nop			; (mov r8, r8)
    2a60:	200000ca 	.word	0x200000ca
    2a64:	000038d1 	.word	0x000038d1
    2a68:	200012d8 	.word	0x200012d8
    2a6c:	000038e1 	.word	0x000038e1
    2a70:	0000315d 	.word	0x0000315d
    2a74:	40000c00 	.word	0x40000c00
    2a78:	01010100 	.word	0x01010100
    2a7c:	20000e24 	.word	0x20000e24
    2a80:	20001638 	.word	0x20001638
    2a84:	00002861 	.word	0x00002861
    2a88:	00001dd1 	.word	0x00001dd1

00002a8c <udd_disable>:
	module_inst->hw->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_DETACH;
    2a8c:	2101      	movs	r1, #1

void udd_disable(void)
{
    2a8e:	b570      	push	{r4, r5, r6, lr}
	enum sleepmgr_mode sleep_mode[] = {
    2a90:	2600      	movs	r6, #0
    2a92:	4b2f      	ldr	r3, [pc, #188]	; (2b50 <udd_disable+0xc4>)
	if (udd_state == new_state) {
    2a94:	4d2f      	ldr	r5, [pc, #188]	; (2b54 <udd_disable+0xc8>)
    2a96:	681a      	ldr	r2, [r3, #0]
{
    2a98:	b084      	sub	sp, #16
    2a9a:	8913      	ldrh	r3, [r2, #8]
    2a9c:	430b      	orrs	r3, r1
    2a9e:	b29b      	uxth	r3, r3
    2aa0:	8113      	strh	r3, [r2, #8]
	if (udd_state == new_state) {
    2aa2:	782b      	ldrb	r3, [r5, #0]
	enum sleepmgr_mode sleep_mode[] = {
    2aa4:	aa01      	add	r2, sp, #4
    2aa6:	7016      	strb	r6, [r2, #0]
    2aa8:	7051      	strb	r1, [r2, #1]
    2aaa:	7091      	strb	r1, [r2, #2]
    2aac:	70d1      	strb	r1, [r2, #3]
	if (udd_state == new_state) {
    2aae:	2b01      	cmp	r3, #1
    2ab0:	d04b      	beq.n	2b4a <udd_disable+0xbe>
	if(sleepmgr_locks[mode] >= 0xff) {
    2ab2:	4b29      	ldr	r3, [pc, #164]	; (2b58 <udd_disable+0xcc>)
    2ab4:	7858      	ldrb	r0, [r3, #1]
    2ab6:	28ff      	cmp	r0, #255	; 0xff
    2ab8:	d02e      	beq.n	2b18 <udd_disable+0x8c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2aba:	f3ef 8010 	mrs	r0, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2abe:	4244      	negs	r4, r0
    2ac0:	4160      	adcs	r0, r4
    2ac2:	9002      	str	r0, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    2ac4:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    2ac6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2aca:	4c24      	ldr	r4, [pc, #144]	; (2b5c <udd_disable+0xd0>)
    2acc:	7026      	strb	r6, [r4, #0]
	++sleepmgr_locks[mode];
    2ace:	7858      	ldrb	r0, [r3, #1]
	return flags;
    2ad0:	9e02      	ldr	r6, [sp, #8]
    2ad2:	3001      	adds	r0, #1
    2ad4:	7058      	strb	r0, [r3, #1]
	if (cpu_irq_is_enabled_flags(flags))
    2ad6:	2e00      	cmp	r6, #0
    2ad8:	d003      	beq.n	2ae2 <udd_disable+0x56>
		cpu_irq_enable();
    2ada:	7021      	strb	r1, [r4, #0]
    2adc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2ae0:	b662      	cpsie	i
	if (udd_state != UDD_STATE_OFF) {
    2ae2:	7829      	ldrb	r1, [r5, #0]
    2ae4:	2900      	cmp	r1, #0
    2ae6:	d118      	bne.n	2b1a <udd_disable+0x8e>
	udd_state = new_state;
    2ae8:	2301      	movs	r3, #1
    2aea:	702b      	strb	r3, [r5, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2aec:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2af0:	425a      	negs	r2, r3
    2af2:	4153      	adcs	r3, r2
    2af4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    2af6:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    2af8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2afc:	2300      	movs	r3, #0
    2afe:	7023      	strb	r3, [r4, #0]
	return flags;
    2b00:	9d01      	ldr	r5, [sp, #4]
	udd_detach();

	//udd_sleep_mode(UDD_STATE_OFF);

	flags = cpu_irq_save();
	usb_dual_disable();
    2b02:	4b17      	ldr	r3, [pc, #92]	; (2b60 <udd_disable+0xd4>)
    2b04:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    2b06:	2d00      	cmp	r5, #0
    2b08:	d004      	beq.n	2b14 <udd_disable+0x88>
		cpu_irq_enable();
    2b0a:	2301      	movs	r3, #1
    2b0c:	7023      	strb	r3, [r4, #0]
    2b0e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2b12:	b662      	cpsie	i
	cpu_irq_restore(flags);
}
    2b14:	b004      	add	sp, #16
    2b16:	bd70      	pop	{r4, r5, r6, pc}
    2b18:	e7fe      	b.n	2b18 <udd_disable+0x8c>
	if(sleepmgr_locks[mode] == 0) {
    2b1a:	5c52      	ldrb	r2, [r2, r1]
    2b1c:	5c99      	ldrb	r1, [r3, r2]
    2b1e:	2900      	cmp	r1, #0
    2b20:	d012      	beq.n	2b48 <udd_disable+0xbc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2b22:	f3ef 8110 	mrs	r1, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2b26:	4248      	negs	r0, r1
    2b28:	4141      	adcs	r1, r0
    2b2a:	9103      	str	r1, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    2b2c:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    2b2e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2b32:	2100      	movs	r1, #0
    2b34:	7021      	strb	r1, [r4, #0]
	--sleepmgr_locks[mode];
    2b36:	5c99      	ldrb	r1, [r3, r2]
	return flags;
    2b38:	9803      	ldr	r0, [sp, #12]
    2b3a:	3901      	subs	r1, #1
    2b3c:	5499      	strb	r1, [r3, r2]
	if (cpu_irq_is_enabled_flags(flags))
    2b3e:	2800      	cmp	r0, #0
    2b40:	d0d2      	beq.n	2ae8 <udd_disable+0x5c>
    2b42:	4b08      	ldr	r3, [pc, #32]	; (2b64 <udd_disable+0xd8>)
    2b44:	4798      	blx	r3
    2b46:	e7cf      	b.n	2ae8 <udd_disable+0x5c>
    2b48:	e7fe      	b.n	2b48 <udd_disable+0xbc>
    2b4a:	4c04      	ldr	r4, [pc, #16]	; (2b5c <udd_disable+0xd0>)
    2b4c:	e7ce      	b.n	2aec <udd_disable+0x60>
    2b4e:	46c0      	nop			; (mov r8, r8)
    2b50:	200012d8 	.word	0x200012d8
    2b54:	20000e24 	.word	0x20000e24
    2b58:	20001638 	.word	0x20001638
    2b5c:	200000ca 	.word	0x200000ca
    2b60:	00002b69 	.word	0x00002b69
    2b64:	00001dd1 	.word	0x00001dd1

00002b68 <usb_dual_disable>:
/**
 * \brief Deinitialize the dual role driver
 */
void usb_dual_disable(void)
{
	if (!_initialized) {
    2b68:	4b03      	ldr	r3, [pc, #12]	; (2b78 <usb_dual_disable+0x10>)
    2b6a:	781a      	ldrb	r2, [r3, #0]
    2b6c:	2a00      	cmp	r2, #0
    2b6e:	d001      	beq.n	2b74 <usb_dual_disable+0xc>
		return; // Dual role not initialized
	}
	_initialized = false;
    2b70:	2200      	movs	r2, #0
    2b72:	701a      	strb	r2, [r3, #0]

#if USB_ID_EIC
	extint_chan_disable_callback(USB_ID_EIC_LINE,
			EXTINT_CALLBACK_TYPE_DETECT);
#endif
}
    2b74:	4770      	bx	lr
    2b76:	46c0      	nop			; (mov r8, r8)
    2b78:	20000e25 	.word	0x20000e25

00002b7c <usb_device_register_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    2b7c:	000b      	movs	r3, r1
    2b7e:	332e      	adds	r3, #46	; 0x2e
    2b80:	009b      	lsls	r3, r3, #2
{
    2b82:	b510      	push	{r4, lr}
	module_inst->device_callback[callback_type] = callback_func;
    2b84:	501a      	str	r2, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    2b86:	22aa      	movs	r2, #170	; 0xaa
    2b88:	4c04      	ldr	r4, [pc, #16]	; (2b9c <usb_device_register_callback+0x20>)
    2b8a:	0052      	lsls	r2, r2, #1
    2b8c:	0049      	lsls	r1, r1, #1
    2b8e:	5a83      	ldrh	r3, [r0, r2]
    2b90:	5b09      	ldrh	r1, [r1, r4]
    2b92:	430b      	orrs	r3, r1
    2b94:	5283      	strh	r3, [r0, r2]

	return STATUS_OK;
}
    2b96:	2000      	movs	r0, #0
    2b98:	bd10      	pop	{r4, pc}
    2b9a:	46c0      	nop			; (mov r8, r8)
    2b9c:	000232fc 	.word	0x000232fc

00002ba0 <usb_device_enable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    2ba0:	4b06      	ldr	r3, [pc, #24]	; (2bbc <usb_device_enable_callback+0x1c>)
    2ba2:	0049      	lsls	r1, r1, #1
    2ba4:	5acb      	ldrh	r3, [r1, r3]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    2ba6:	21ab      	movs	r1, #171	; 0xab
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    2ba8:	6802      	ldr	r2, [r0, #0]
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    2baa:	0049      	lsls	r1, r1, #1
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    2bac:	8393      	strh	r3, [r2, #28]
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    2bae:	5a42      	ldrh	r2, [r0, r1]
    2bb0:	431a      	orrs	r2, r3
    2bb2:	5242      	strh	r2, [r0, r1]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    2bb4:	6802      	ldr	r2, [r0, #0]

	return STATUS_OK;
}
    2bb6:	2000      	movs	r0, #0
	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    2bb8:	8313      	strh	r3, [r2, #24]
}
    2bba:	4770      	bx	lr
    2bbc:	000232fc 	.word	0x000232fc

00002bc0 <usb_device_disable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    2bc0:	4b05      	ldr	r3, [pc, #20]	; (2bd8 <usb_device_disable_callback+0x18>)
    2bc2:	0049      	lsls	r1, r1, #1
    2bc4:	5aca      	ldrh	r2, [r1, r3]
    2bc6:	21ab      	movs	r1, #171	; 0xab
    2bc8:	0049      	lsls	r1, r1, #1
    2bca:	5a43      	ldrh	r3, [r0, r1]
    2bcc:	4393      	bics	r3, r2
    2bce:	5243      	strh	r3, [r0, r1]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    2bd0:	6803      	ldr	r3, [r0, #0]

	return STATUS_OK;
}
    2bd2:	2000      	movs	r0, #0
	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    2bd4:	829a      	strh	r2, [r3, #20]
}
    2bd6:	4770      	bx	lr
    2bd8:	000232fc 	.word	0x000232fc

00002bdc <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    2bdc:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    2bde:	008c      	lsls	r4, r1, #2
    2be0:	18a4      	adds	r4, r4, r2
    2be2:	3434      	adds	r4, #52	; 0x34
    2be4:	00a4      	lsls	r4, r4, #2
    2be6:	1904      	adds	r4, r0, r4

	/* Set the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    2be8:	1840      	adds	r0, r0, r1
    2bea:	3059      	adds	r0, #89	; 0x59
    2bec:	4904      	ldr	r1, [pc, #16]	; (2c00 <usb_device_endpoint_register_callback+0x24>)
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    2bee:	6063      	str	r3, [r4, #4]
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    2bf0:	30ff      	adds	r0, #255	; 0xff
    2bf2:	7803      	ldrb	r3, [r0, #0]
    2bf4:	5c8a      	ldrb	r2, [r1, r2]
    2bf6:	4313      	orrs	r3, r2
    2bf8:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    2bfa:	2000      	movs	r0, #0
    2bfc:	bd10      	pop	{r4, pc}
    2bfe:	46c0      	nop			; (mov r8, r8)
    2c00:	0002330c 	.word	0x0002330c

00002c04 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    2c04:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    2c06:	2400      	movs	r4, #0
    2c08:	008b      	lsls	r3, r1, #2
    2c0a:	189b      	adds	r3, r3, r2
    2c0c:	3334      	adds	r3, #52	; 0x34
    2c0e:	009b      	lsls	r3, r3, #2
    2c10:	18c3      	adds	r3, r0, r3

	/* Clear the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    2c12:	1840      	adds	r0, r0, r1
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    2c14:	605c      	str	r4, [r3, #4]
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    2c16:	3059      	adds	r0, #89	; 0x59
    2c18:	4b03      	ldr	r3, [pc, #12]	; (2c28 <usb_device_endpoint_unregister_callback+0x24>)
    2c1a:	30ff      	adds	r0, #255	; 0xff
    2c1c:	5c9a      	ldrb	r2, [r3, r2]
    2c1e:	7803      	ldrb	r3, [r0, #0]
    2c20:	4393      	bics	r3, r2
    2c22:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    2c24:	2000      	movs	r0, #0
    2c26:	bd10      	pop	{r4, pc}
    2c28:	0002330c 	.word	0x0002330c

00002c2c <usb_device_endpoint_enable_callback>:
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    2c2c:	230f      	movs	r3, #15
{
    2c2e:	b570      	push	{r4, r5, r6, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    2c30:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    2c32:	18c4      	adds	r4, r0, r3
    2c34:	3461      	adds	r4, #97	; 0x61
    2c36:	4e28      	ldr	r6, [pc, #160]	; (2cd8 <usb_device_endpoint_enable_callback+0xac>)
    2c38:	34ff      	adds	r4, #255	; 0xff
    2c3a:	7825      	ldrb	r5, [r4, #0]
    2c3c:	5cb6      	ldrb	r6, [r6, r2]
    2c3e:	4335      	orrs	r5, r6
    2c40:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    2c42:	2a00      	cmp	r2, #0
    2c44:	d108      	bne.n	2c58 <usb_device_endpoint_enable_callback+0x2c>
		if (ep_num == 0) { // control endpoint
    2c46:	2b00      	cmp	r3, #0
    2c48:	d115      	bne.n	2c76 <usb_device_endpoint_enable_callback+0x4a>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    2c4a:	230a      	movs	r3, #10
    2c4c:	2103      	movs	r1, #3
    2c4e:	6802      	ldr	r2, [r0, #0]
    2c50:	33ff      	adds	r3, #255	; 0xff
    2c52:	54d1      	strb	r1, [r2, r3]
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
		}
	}

	return STATUS_OK;
}
    2c54:	2000      	movs	r0, #0
    2c56:	bd70      	pop	{r4, r5, r6, pc}
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    2c58:	2a01      	cmp	r2, #1
    2c5a:	d117      	bne.n	2c8c <usb_device_endpoint_enable_callback+0x60>
		if (ep_num == 0) { // control endpoint
    2c5c:	2b00      	cmp	r3, #0
    2c5e:	d01f      	beq.n	2ca0 <usb_device_endpoint_enable_callback+0x74>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    2c60:	6802      	ldr	r2, [r0, #0]
    2c62:	015b      	lsls	r3, r3, #5
    2c64:	18d3      	adds	r3, r2, r3
    2c66:	330a      	adds	r3, #10
		} else if (ep & USB_EP_DIR_IN) {
    2c68:	b249      	sxtb	r1, r1
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    2c6a:	33ff      	adds	r3, #255	; 0xff
		} else if (ep & USB_EP_DIR_IN) {
    2c6c:	2900      	cmp	r1, #0
    2c6e:	db20      	blt.n	2cb2 <usb_device_endpoint_enable_callback+0x86>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    2c70:	2204      	movs	r2, #4
    2c72:	701a      	strb	r2, [r3, #0]
    2c74:	e7ee      	b.n	2c54 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    2c76:	6802      	ldr	r2, [r0, #0]
    2c78:	015b      	lsls	r3, r3, #5
    2c7a:	18d3      	adds	r3, r2, r3
    2c7c:	330a      	adds	r3, #10
		} else if (ep & USB_EP_DIR_IN) {
    2c7e:	b249      	sxtb	r1, r1
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    2c80:	33ff      	adds	r3, #255	; 0xff
		} else if (ep & USB_EP_DIR_IN) {
    2c82:	2900      	cmp	r1, #0
    2c84:	db12      	blt.n	2cac <usb_device_endpoint_enable_callback+0x80>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    2c86:	2201      	movs	r2, #1
    2c88:	701a      	strb	r2, [r3, #0]
    2c8a:	e7e3      	b.n	2c54 <usb_device_endpoint_enable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    2c8c:	2a02      	cmp	r2, #2
    2c8e:	d113      	bne.n	2cb8 <usb_device_endpoint_enable_callback+0x8c>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    2c90:	6802      	ldr	r2, [r0, #0]
    2c92:	015b      	lsls	r3, r3, #5
    2c94:	18d3      	adds	r3, r2, r3
    2c96:	2210      	movs	r2, #16
    2c98:	330a      	adds	r3, #10
    2c9a:	33ff      	adds	r3, #255	; 0xff
    2c9c:	701a      	strb	r2, [r3, #0]
    2c9e:	e7d9      	b.n	2c54 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    2ca0:	230a      	movs	r3, #10
    2ca2:	210c      	movs	r1, #12
    2ca4:	6802      	ldr	r2, [r0, #0]
    2ca6:	33ff      	adds	r3, #255	; 0xff
    2ca8:	54d1      	strb	r1, [r2, r3]
    2caa:	e7d3      	b.n	2c54 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    2cac:	2202      	movs	r2, #2
    2cae:	701a      	strb	r2, [r3, #0]
    2cb0:	e7d0      	b.n	2c54 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    2cb2:	2208      	movs	r2, #8
    2cb4:	701a      	strb	r2, [r3, #0]
    2cb6:	e7cd      	b.n	2c54 <usb_device_endpoint_enable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    2cb8:	2a03      	cmp	r2, #3
    2cba:	d1cb      	bne.n	2c54 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    2cbc:	6802      	ldr	r2, [r0, #0]
    2cbe:	015b      	lsls	r3, r3, #5
    2cc0:	18d3      	adds	r3, r2, r3
    2cc2:	330a      	adds	r3, #10
		if (ep & USB_EP_DIR_IN) {
    2cc4:	b249      	sxtb	r1, r1
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    2cc6:	33ff      	adds	r3, #255	; 0xff
		if (ep & USB_EP_DIR_IN) {
    2cc8:	2900      	cmp	r1, #0
    2cca:	db02      	blt.n	2cd2 <usb_device_endpoint_enable_callback+0xa6>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    2ccc:	2220      	movs	r2, #32
    2cce:	701a      	strb	r2, [r3, #0]
    2cd0:	e7c0      	b.n	2c54 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    2cd2:	2240      	movs	r2, #64	; 0x40
    2cd4:	701a      	strb	r2, [r3, #0]
    2cd6:	e7bd      	b.n	2c54 <usb_device_endpoint_enable_callback+0x28>
    2cd8:	0002330c 	.word	0x0002330c

00002cdc <usb_device_endpoint_disable_callback>:
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    2cdc:	230f      	movs	r3, #15
{
    2cde:	b570      	push	{r4, r5, r6, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    2ce0:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    2ce2:	18c4      	adds	r4, r0, r3
    2ce4:	4d28      	ldr	r5, [pc, #160]	; (2d88 <usb_device_endpoint_disable_callback+0xac>)
    2ce6:	3461      	adds	r4, #97	; 0x61
    2ce8:	34ff      	adds	r4, #255	; 0xff
    2cea:	5cae      	ldrb	r6, [r5, r2]
    2cec:	7825      	ldrb	r5, [r4, #0]
    2cee:	43b5      	bics	r5, r6
    2cf0:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    2cf2:	2a00      	cmp	r2, #0
    2cf4:	d108      	bne.n	2d08 <usb_device_endpoint_disable_callback+0x2c>
		if (ep_num == 0) { // control endpoint
    2cf6:	2b00      	cmp	r3, #0
    2cf8:	d115      	bne.n	2d26 <usb_device_endpoint_disable_callback+0x4a>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    2cfa:	2103      	movs	r1, #3
    2cfc:	6802      	ldr	r2, [r0, #0]
    2cfe:	3309      	adds	r3, #9
    2d00:	33ff      	adds	r3, #255	; 0xff
    2d02:	54d1      	strb	r1, [r2, r3]
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
		}
	}

	return STATUS_OK;
}
    2d04:	2000      	movs	r0, #0
    2d06:	bd70      	pop	{r4, r5, r6, pc}
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    2d08:	2a01      	cmp	r2, #1
    2d0a:	d117      	bne.n	2d3c <usb_device_endpoint_disable_callback+0x60>
		if (ep_num == 0) { // control endpoint
    2d0c:	2b00      	cmp	r3, #0
    2d0e:	d01f      	beq.n	2d50 <usb_device_endpoint_disable_callback+0x74>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    2d10:	6802      	ldr	r2, [r0, #0]
    2d12:	015b      	lsls	r3, r3, #5
    2d14:	18d3      	adds	r3, r2, r3
    2d16:	3309      	adds	r3, #9
		} else if (ep & USB_EP_DIR_IN) {
    2d18:	b249      	sxtb	r1, r1
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    2d1a:	33ff      	adds	r3, #255	; 0xff
		} else if (ep & USB_EP_DIR_IN) {
    2d1c:	2900      	cmp	r1, #0
    2d1e:	db20      	blt.n	2d62 <usb_device_endpoint_disable_callback+0x86>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    2d20:	2204      	movs	r2, #4
    2d22:	701a      	strb	r2, [r3, #0]
    2d24:	e7ee      	b.n	2d04 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    2d26:	6802      	ldr	r2, [r0, #0]
    2d28:	015b      	lsls	r3, r3, #5
    2d2a:	18d3      	adds	r3, r2, r3
    2d2c:	3309      	adds	r3, #9
		} else if (ep & USB_EP_DIR_IN) {
    2d2e:	b249      	sxtb	r1, r1
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    2d30:	33ff      	adds	r3, #255	; 0xff
		} else if (ep & USB_EP_DIR_IN) {
    2d32:	2900      	cmp	r1, #0
    2d34:	db12      	blt.n	2d5c <usb_device_endpoint_disable_callback+0x80>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    2d36:	2201      	movs	r2, #1
    2d38:	701a      	strb	r2, [r3, #0]
    2d3a:	e7e3      	b.n	2d04 <usb_device_endpoint_disable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    2d3c:	2a02      	cmp	r2, #2
    2d3e:	d113      	bne.n	2d68 <usb_device_endpoint_disable_callback+0x8c>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    2d40:	6802      	ldr	r2, [r0, #0]
    2d42:	015b      	lsls	r3, r3, #5
    2d44:	18d3      	adds	r3, r2, r3
    2d46:	2210      	movs	r2, #16
    2d48:	3309      	adds	r3, #9
    2d4a:	33ff      	adds	r3, #255	; 0xff
    2d4c:	701a      	strb	r2, [r3, #0]
    2d4e:	e7d9      	b.n	2d04 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    2d50:	210c      	movs	r1, #12
    2d52:	6802      	ldr	r2, [r0, #0]
    2d54:	3309      	adds	r3, #9
    2d56:	33ff      	adds	r3, #255	; 0xff
    2d58:	54d1      	strb	r1, [r2, r3]
    2d5a:	e7d3      	b.n	2d04 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    2d5c:	2202      	movs	r2, #2
    2d5e:	701a      	strb	r2, [r3, #0]
    2d60:	e7d0      	b.n	2d04 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    2d62:	2208      	movs	r2, #8
    2d64:	701a      	strb	r2, [r3, #0]
    2d66:	e7cd      	b.n	2d04 <usb_device_endpoint_disable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    2d68:	2a03      	cmp	r2, #3
    2d6a:	d1cb      	bne.n	2d04 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    2d6c:	6802      	ldr	r2, [r0, #0]
    2d6e:	015b      	lsls	r3, r3, #5
    2d70:	18d3      	adds	r3, r2, r3
    2d72:	3309      	adds	r3, #9
		if (ep & USB_EP_DIR_IN) {
    2d74:	b249      	sxtb	r1, r1
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    2d76:	33ff      	adds	r3, #255	; 0xff
		if (ep & USB_EP_DIR_IN) {
    2d78:	2900      	cmp	r1, #0
    2d7a:	db02      	blt.n	2d82 <usb_device_endpoint_disable_callback+0xa6>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    2d7c:	2220      	movs	r2, #32
    2d7e:	701a      	strb	r2, [r3, #0]
    2d80:	e7c0      	b.n	2d04 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    2d82:	2240      	movs	r2, #64	; 0x40
    2d84:	701a      	strb	r2, [r3, #0]
    2d86:	e7bd      	b.n	2d04 <usb_device_endpoint_disable_callback+0x28>
    2d88:	0002330c 	.word	0x0002330c

00002d8c <usb_device_endpoint_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    2d8c:	2300      	movs	r3, #0
    2d8e:	7003      	strb	r3, [r0, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    2d90:	7043      	strb	r3, [r0, #1]
	ep_config->auto_zlp = false;
    2d92:	7083      	strb	r3, [r0, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    2d94:	3301      	adds	r3, #1
    2d96:	70c3      	strb	r3, [r0, #3]
}
    2d98:	4770      	bx	lr
    2d9a:	46c0      	nop			; (mov r8, r8)

00002d9c <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    2d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d9e:	46ce      	mov	lr, r9
    2da0:	4647      	mov	r7, r8
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    2da2:	230f      	movs	r3, #15
{
    2da4:	b580      	push	{r7, lr}
	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    2da6:	780c      	ldrb	r4, [r1, #0]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;

	switch (ep_config->ep_type) {
    2da8:	78ca      	ldrb	r2, [r1, #3]
	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    2daa:	4023      	ands	r3, r4
{
    2dac:	0006      	movs	r6, r0
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    2dae:	b264      	sxtb	r4, r4
	switch (ep_config->ep_type) {
    2db0:	2a04      	cmp	r2, #4
    2db2:	d81a      	bhi.n	2dea <usb_device_endpoint_set_config+0x4e>
    2db4:	4d71      	ldr	r5, [pc, #452]	; (2f7c <usb_device_endpoint_set_config+0x1e0>)
    2db6:	0092      	lsls	r2, r2, #2
    2db8:	58aa      	ldr	r2, [r5, r2]
    2dba:	4697      	mov	pc, r2
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
			return STATUS_OK;

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    2dbc:	2080      	movs	r0, #128	; 0x80
    2dbe:	0040      	lsls	r0, r0, #1
    2dc0:	4680      	mov	r8, r0
    2dc2:	5c17      	ldrb	r7, [r2, r0]
    2dc4:	3890      	subs	r0, #144	; 0x90
    2dc6:	4684      	mov	ip, r0
    2dc8:	4665      	mov	r5, ip
				return STATUS_ERR_DENIED;
    2dca:	3854      	subs	r0, #84	; 0x54
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    2dcc:	423d      	tst	r5, r7
    2dce:	d124      	bne.n	2e1a <usb_device_endpoint_set_config+0x7e>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    2dd0:	4640      	mov	r0, r8
    2dd2:	2720      	movs	r7, #32
    2dd4:	5c10      	ldrb	r0, [r2, r0]
			break;

		case USB_DEVICE_ENDPOINT_TYPE_BULK:
			if (ep_bank) {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    2dd6:	4645      	mov	r5, r8
    2dd8:	4338      	orrs	r0, r7
    2dda:	5550      	strb	r0, [r2, r5]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    2ddc:	0018      	movs	r0, r3
    2dde:	6832      	ldr	r2, [r6, #0]
    2de0:	3008      	adds	r0, #8
    2de2:	0140      	lsls	r0, r0, #5
    2de4:	1812      	adds	r2, r2, r0
    2de6:	2080      	movs	r0, #128	; 0x80
    2de8:	7110      	strb	r0, [r2, #4]

		default:
			break;
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    2dea:	2007      	movs	r0, #7
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    2dec:	0fe2      	lsrs	r2, r4, #31
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    2dee:	005b      	lsls	r3, r3, #1
    2df0:	189b      	adds	r3, r3, r2
    2df2:	4a63      	ldr	r2, [pc, #396]	; (2f80 <usb_device_endpoint_set_config+0x1e4>)
    2df4:	784c      	ldrb	r4, [r1, #1]
    2df6:	011b      	lsls	r3, r3, #4
    2df8:	18d3      	adds	r3, r2, r3
    2dfa:	685a      	ldr	r2, [r3, #4]
    2dfc:	4020      	ands	r0, r4
    2dfe:	4c61      	ldr	r4, [pc, #388]	; (2f84 <usb_device_endpoint_set_config+0x1e8>)
    2e00:	0700      	lsls	r0, r0, #28
    2e02:	4022      	ands	r2, r4
    2e04:	4302      	orrs	r2, r0
    2e06:	605a      	str	r2, [r3, #4]

	if (true == ep_config->auto_zlp) {
    2e08:	788a      	ldrb	r2, [r1, #2]
    2e0a:	2a00      	cmp	r2, #0
    2e0c:	d000      	beq.n	2e10 <usb_device_endpoint_set_config+0x74>
    2e0e:	e084      	b.n	2f1a <usb_device_endpoint_set_config+0x17e>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
	}

	return STATUS_OK;
    2e10:	2000      	movs	r0, #0
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    2e12:	685a      	ldr	r2, [r3, #4]
    2e14:	0052      	lsls	r2, r2, #1
    2e16:	0852      	lsrs	r2, r2, #1
    2e18:	605a      	str	r2, [r3, #4]
}
    2e1a:	bc0c      	pop	{r2, r3}
    2e1c:	4690      	mov	r8, r2
    2e1e:	4699      	mov	r9, r3
    2e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e22:	6800      	ldr	r0, [r0, #0]
    2e24:	015a      	lsls	r2, r3, #5
    2e26:	4684      	mov	ip, r0
    2e28:	4462      	add	r2, ip
			if (ep_bank) {
    2e2a:	2c00      	cmp	r4, #0
    2e2c:	da00      	bge.n	2e30 <usb_device_endpoint_set_config+0x94>
    2e2e:	e08a      	b.n	2f46 <usb_device_endpoint_set_config+0x1aa>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    2e30:	2580      	movs	r5, #128	; 0x80
    2e32:	006d      	lsls	r5, r5, #1
    2e34:	5d57      	ldrb	r7, [r2, r5]
				return STATUS_ERR_DENIED;
    2e36:	201c      	movs	r0, #28
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    2e38:	077f      	lsls	r7, r7, #29
    2e3a:	d1ee      	bne.n	2e1a <usb_device_endpoint_set_config+0x7e>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    2e3c:	5d50      	ldrb	r0, [r2, r5]
    2e3e:	2703      	movs	r7, #3
    2e40:	e061      	b.n	2f06 <usb_device_endpoint_set_config+0x16a>
    2e42:	6800      	ldr	r0, [r0, #0]
    2e44:	015a      	lsls	r2, r3, #5
    2e46:	4684      	mov	ip, r0
    2e48:	4462      	add	r2, ip
			if (ep_bank) {
    2e4a:	2c00      	cmp	r4, #0
    2e4c:	db6c      	blt.n	2f28 <usb_device_endpoint_set_config+0x18c>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    2e4e:	2580      	movs	r5, #128	; 0x80
    2e50:	006d      	lsls	r5, r5, #1
    2e52:	5d57      	ldrb	r7, [r2, r5]
				return STATUS_ERR_DENIED;
    2e54:	201c      	movs	r0, #28
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    2e56:	077f      	lsls	r7, r7, #29
    2e58:	d1df      	bne.n	2e1a <usb_device_endpoint_set_config+0x7e>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    2e5a:	5d50      	ldrb	r0, [r2, r5]
    2e5c:	2704      	movs	r7, #4
    2e5e:	e052      	b.n	2f06 <usb_device_endpoint_set_config+0x16a>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    2e60:	2100      	movs	r1, #0
    2e62:	6802      	ldr	r2, [r0, #0]
    2e64:	3308      	adds	r3, #8
    2e66:	015b      	lsls	r3, r3, #5
    2e68:	5499      	strb	r1, [r3, r2]
			return STATUS_OK;
    2e6a:	2000      	movs	r0, #0
    2e6c:	e7d5      	b.n	2e1a <usb_device_endpoint_set_config+0x7e>
    2e6e:	6802      	ldr	r2, [r0, #0]
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    2e70:	2080      	movs	r0, #128	; 0x80
    2e72:	015d      	lsls	r5, r3, #5
    2e74:	0040      	lsls	r0, r0, #1
    2e76:	1952      	adds	r2, r2, r5
    2e78:	5c17      	ldrb	r7, [r2, r0]
    2e7a:	4681      	mov	r9, r0
				return STATUS_ERR_DENIED;
    2e7c:	38e4      	subs	r0, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    2e7e:	077f      	lsls	r7, r7, #29
    2e80:	d1cb      	bne.n	2e1a <usb_device_endpoint_set_config+0x7e>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    2e82:	464c      	mov	r4, r9
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    2e84:	2770      	movs	r7, #112	; 0x70
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    2e86:	5d14      	ldrb	r4, [r2, r4]
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    2e88:	4227      	tst	r7, r4
    2e8a:	d1c6      	bne.n	2e1a <usb_device_endpoint_set_config+0x7e>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    2e8c:	464c      	mov	r4, r9
    2e8e:	380b      	subs	r0, #11
    2e90:	5510      	strb	r0, [r2, r4]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    2e92:	6832      	ldr	r2, [r6, #0]
    2e94:	3308      	adds	r3, #8
    2e96:	015b      	lsls	r3, r3, #5
    2e98:	18d2      	adds	r2, r2, r3
    2e9a:	302f      	adds	r0, #47	; 0x2f
    2e9c:	7150      	strb	r0, [r2, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    2e9e:	6832      	ldr	r2, [r6, #0]
    2ea0:	18d3      	adds	r3, r2, r3
    2ea2:	2280      	movs	r2, #128	; 0x80
    2ea4:	711a      	strb	r2, [r3, #4]
			if (true == ep_config->auto_zlp) {
    2ea6:	788b      	ldrb	r3, [r1, #2]
    2ea8:	2b00      	cmp	r3, #0
    2eaa:	d05b      	beq.n	2f64 <usb_device_endpoint_set_config+0x1c8>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    2eac:	2080      	movs	r0, #128	; 0x80
    2eae:	4b34      	ldr	r3, [pc, #208]	; (2f80 <usb_device_endpoint_set_config+0x1e4>)
    2eb0:	0600      	lsls	r0, r0, #24
    2eb2:	195a      	adds	r2, r3, r5
    2eb4:	6854      	ldr	r4, [r2, #4]
    2eb6:	4304      	orrs	r4, r0
    2eb8:	6054      	str	r4, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    2eba:	6954      	ldr	r4, [r2, #20]
    2ebc:	4320      	orrs	r0, r4
    2ebe:	6150      	str	r0, [r2, #20]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    2ec0:	2207      	movs	r2, #7
    2ec2:	784c      	ldrb	r4, [r1, #1]
    2ec4:	195d      	adds	r5, r3, r5
    2ec6:	6868      	ldr	r0, [r5, #4]
    2ec8:	4e2e      	ldr	r6, [pc, #184]	; (2f84 <usb_device_endpoint_set_config+0x1e8>)
    2eca:	4014      	ands	r4, r2
    2ecc:	0724      	lsls	r4, r4, #28
    2ece:	4030      	ands	r0, r6
    2ed0:	4320      	orrs	r0, r4
    2ed2:	6068      	str	r0, [r5, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    2ed4:	7849      	ldrb	r1, [r1, #1]
    2ed6:	696b      	ldr	r3, [r5, #20]
    2ed8:	400a      	ands	r2, r1
    2eda:	0712      	lsls	r2, r2, #28
    2edc:	4033      	ands	r3, r6
    2ede:	431a      	orrs	r2, r3
    2ee0:	616a      	str	r2, [r5, #20]
			return STATUS_OK;
    2ee2:	2000      	movs	r0, #0
    2ee4:	e799      	b.n	2e1a <usb_device_endpoint_set_config+0x7e>
    2ee6:	6800      	ldr	r0, [r0, #0]
    2ee8:	015a      	lsls	r2, r3, #5
    2eea:	4684      	mov	ip, r0
    2eec:	4462      	add	r2, ip
			if (ep_bank) {
    2eee:	2c00      	cmp	r4, #0
    2ef0:	da00      	bge.n	2ef4 <usb_device_endpoint_set_config+0x158>
    2ef2:	e763      	b.n	2dbc <usb_device_endpoint_set_config+0x20>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    2ef4:	2580      	movs	r5, #128	; 0x80
    2ef6:	006d      	lsls	r5, r5, #1
    2ef8:	5d57      	ldrb	r7, [r2, r5]
				return STATUS_ERR_DENIED;
    2efa:	201c      	movs	r0, #28
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    2efc:	077f      	lsls	r7, r7, #29
    2efe:	d000      	beq.n	2f02 <usb_device_endpoint_set_config+0x166>
    2f00:	e78b      	b.n	2e1a <usb_device_endpoint_set_config+0x7e>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    2f02:	2702      	movs	r7, #2
    2f04:	5d50      	ldrb	r0, [r2, r5]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    2f06:	4338      	orrs	r0, r7
    2f08:	5550      	strb	r0, [r2, r5]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    2f0a:	0018      	movs	r0, r3
    2f0c:	6832      	ldr	r2, [r6, #0]
    2f0e:	3008      	adds	r0, #8
    2f10:	0140      	lsls	r0, r0, #5
    2f12:	1812      	adds	r2, r2, r0
    2f14:	2040      	movs	r0, #64	; 0x40
    2f16:	7150      	strb	r0, [r2, #5]
    2f18:	e767      	b.n	2dea <usb_device_endpoint_set_config+0x4e>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    2f1a:	2280      	movs	r2, #128	; 0x80
    2f1c:	6859      	ldr	r1, [r3, #4]
    2f1e:	0612      	lsls	r2, r2, #24
    2f20:	430a      	orrs	r2, r1
    2f22:	605a      	str	r2, [r3, #4]
	return STATUS_OK;
    2f24:	2000      	movs	r0, #0
    2f26:	e778      	b.n	2e1a <usb_device_endpoint_set_config+0x7e>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    2f28:	2080      	movs	r0, #128	; 0x80
    2f2a:	0040      	lsls	r0, r0, #1
    2f2c:	4680      	mov	r8, r0
    2f2e:	5c17      	ldrb	r7, [r2, r0]
    2f30:	3890      	subs	r0, #144	; 0x90
    2f32:	4684      	mov	ip, r0
    2f34:	4665      	mov	r5, ip
				return STATUS_ERR_DENIED;
    2f36:	3854      	subs	r0, #84	; 0x54
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    2f38:	423d      	tst	r5, r7
    2f3a:	d000      	beq.n	2f3e <usb_device_endpoint_set_config+0x1a2>
    2f3c:	e76d      	b.n	2e1a <usb_device_endpoint_set_config+0x7e>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    2f3e:	4640      	mov	r0, r8
    2f40:	2740      	movs	r7, #64	; 0x40
    2f42:	5c10      	ldrb	r0, [r2, r0]
    2f44:	e747      	b.n	2dd6 <usb_device_endpoint_set_config+0x3a>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    2f46:	2080      	movs	r0, #128	; 0x80
    2f48:	0040      	lsls	r0, r0, #1
    2f4a:	4680      	mov	r8, r0
    2f4c:	5c17      	ldrb	r7, [r2, r0]
    2f4e:	3890      	subs	r0, #144	; 0x90
    2f50:	4684      	mov	ip, r0
    2f52:	4665      	mov	r5, ip
				return STATUS_ERR_DENIED;
    2f54:	3854      	subs	r0, #84	; 0x54
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    2f56:	423d      	tst	r5, r7
    2f58:	d000      	beq.n	2f5c <usb_device_endpoint_set_config+0x1c0>
    2f5a:	e75e      	b.n	2e1a <usb_device_endpoint_set_config+0x7e>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    2f5c:	4640      	mov	r0, r8
    2f5e:	2730      	movs	r7, #48	; 0x30
    2f60:	5c10      	ldrb	r0, [r2, r0]
    2f62:	e738      	b.n	2dd6 <usb_device_endpoint_set_config+0x3a>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    2f64:	4b06      	ldr	r3, [pc, #24]	; (2f80 <usb_device_endpoint_set_config+0x1e4>)
    2f66:	1958      	adds	r0, r3, r5
    2f68:	6842      	ldr	r2, [r0, #4]
    2f6a:	0052      	lsls	r2, r2, #1
    2f6c:	0852      	lsrs	r2, r2, #1
    2f6e:	6042      	str	r2, [r0, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    2f70:	6942      	ldr	r2, [r0, #20]
    2f72:	0052      	lsls	r2, r2, #1
    2f74:	0852      	lsrs	r2, r2, #1
    2f76:	6142      	str	r2, [r0, #20]
    2f78:	e7a2      	b.n	2ec0 <usb_device_endpoint_set_config+0x124>
    2f7a:	46c0      	nop			; (mov r8, r8)
    2f7c:	000232e8 	.word	0x000232e8
    2f80:	20001498 	.word	0x20001498
    2f84:	8fffffff 	.word	0x8fffffff

00002f88 <usb_device_endpoint_is_configured>:
 *
 * \return \c true if endpoint is configured and ready to use
 */
bool usb_device_endpoint_is_configured(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    2f88:	230f      	movs	r3, #15
    2f8a:	400b      	ands	r3, r1
	uint8_t flag;

	if (ep & USB_EP_DIR_IN) {
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    2f8c:	6802      	ldr	r2, [r0, #0]
    2f8e:	3308      	adds	r3, #8
    2f90:	015b      	lsls	r3, r3, #5
	if (ep & USB_EP_DIR_IN) {
    2f92:	b249      	sxtb	r1, r1
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    2f94:	5c98      	ldrb	r0, [r3, r2]
	if (ep & USB_EP_DIR_IN) {
    2f96:	2900      	cmp	r1, #0
    2f98:	db05      	blt.n	2fa6 <usb_device_endpoint_is_configured+0x1e>
	} else {
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    2f9a:	0740      	lsls	r0, r0, #29
    2f9c:	0f40      	lsrs	r0, r0, #29
	}
	return ((enum usb_device_endpoint_type)(flag) != USB_DEVICE_ENDPOINT_TYPE_DISABLE);
    2f9e:	1e43      	subs	r3, r0, #1
    2fa0:	4198      	sbcs	r0, r3
    2fa2:	b2c0      	uxtb	r0, r0
}
    2fa4:	4770      	bx	lr
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    2fa6:	0640      	lsls	r0, r0, #25
    2fa8:	0f40      	lsrs	r0, r0, #29
    2faa:	e7f8      	b.n	2f9e <usb_device_endpoint_is_configured+0x16>

00002fac <usb_device_endpoint_abort_job>:
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    2fac:	230f      	movs	r3, #15
    2fae:	400b      	ands	r3, r1

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    2fb0:	3308      	adds	r3, #8
    2fb2:	6802      	ldr	r2, [r0, #0]
    2fb4:	015b      	lsls	r3, r3, #5
	if (ep & USB_EP_DIR_IN) {
    2fb6:	b249      	sxtb	r1, r1
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    2fb8:	18d2      	adds	r2, r2, r3
	if (ep & USB_EP_DIR_IN) {
    2fba:	2900      	cmp	r1, #0
    2fbc:	db06      	blt.n	2fcc <usb_device_endpoint_abort_job+0x20>
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    2fbe:	2140      	movs	r1, #64	; 0x40
    2fc0:	7151      	strb	r1, [r2, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    2fc2:	6802      	ldr	r2, [r0, #0]
    2fc4:	18d3      	adds	r3, r2, r3
    2fc6:	2201      	movs	r2, #1
    2fc8:	71da      	strb	r2, [r3, #7]
	}
}
    2fca:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    2fcc:	2180      	movs	r1, #128	; 0x80
    2fce:	7111      	strb	r1, [r2, #4]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    2fd0:	6802      	ldr	r2, [r0, #0]
    2fd2:	18d3      	adds	r3, r2, r3
    2fd4:	2202      	movs	r2, #2
    2fd6:	71da      	strb	r2, [r3, #7]
    2fd8:	e7f7      	b.n	2fca <usb_device_endpoint_abort_job+0x1e>
    2fda:	46c0      	nop			; (mov r8, r8)

00002fdc <usb_device_endpoint_is_halted>:
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    2fdc:	230f      	movs	r3, #15
    2fde:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    2fe0:	6802      	ldr	r2, [r0, #0]
    2fe2:	3308      	adds	r3, #8
    2fe4:	015b      	lsls	r3, r3, #5
    2fe6:	18d3      	adds	r3, r2, r3
	if (ep & USB_EP_DIR_IN) {
    2fe8:	b249      	sxtb	r1, r1
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    2fea:	7998      	ldrb	r0, [r3, #6]
	if (ep & USB_EP_DIR_IN) {
    2fec:	2900      	cmp	r1, #0
    2fee:	db02      	blt.n	2ff6 <usb_device_endpoint_is_halted+0x1a>
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    2ff0:	06c0      	lsls	r0, r0, #27
    2ff2:	0fc0      	lsrs	r0, r0, #31
	}
}
    2ff4:	4770      	bx	lr
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    2ff6:	0680      	lsls	r0, r0, #26
    2ff8:	0fc0      	lsrs	r0, r0, #31
    2ffa:	e7fb      	b.n	2ff4 <usb_device_endpoint_is_halted+0x18>

00002ffc <usb_device_endpoint_set_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    2ffc:	230f      	movs	r3, #15
    2ffe:	400b      	ands	r3, r1

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    3000:	6802      	ldr	r2, [r0, #0]
    3002:	3308      	adds	r3, #8
    3004:	015b      	lsls	r3, r3, #5
	if (ep & USB_EP_DIR_IN) {
    3006:	b249      	sxtb	r1, r1
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    3008:	18d3      	adds	r3, r2, r3
	if (ep & USB_EP_DIR_IN) {
    300a:	2900      	cmp	r1, #0
    300c:	db02      	blt.n	3014 <usb_device_endpoint_set_halt+0x18>
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    300e:	2210      	movs	r2, #16
    3010:	715a      	strb	r2, [r3, #5]
	}
}
    3012:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    3014:	2220      	movs	r2, #32
    3016:	715a      	strb	r2, [r3, #5]
    3018:	e7fb      	b.n	3012 <usb_device_endpoint_set_halt+0x16>
    301a:	46c0      	nop			; (mov r8, r8)

0000301c <usb_device_endpoint_clear_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    301c:	230f      	movs	r3, #15
    301e:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    3020:	b249      	sxtb	r1, r1
{
    3022:	b530      	push	{r4, r5, lr}
	if (ep & USB_EP_DIR_IN) {
    3024:	2900      	cmp	r1, #0
    3026:	db1b      	blt.n	3060 <usb_device_endpoint_clear_halt+0x44>
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    3028:	2483      	movs	r4, #131	; 0x83
    302a:	6802      	ldr	r2, [r0, #0]
    302c:	0159      	lsls	r1, r3, #5
    302e:	0064      	lsls	r4, r4, #1
    3030:	1852      	adds	r2, r2, r1
    3032:	5d15      	ldrb	r5, [r2, r4]
    3034:	3cf6      	subs	r4, #246	; 0xf6
    3036:	422c      	tst	r4, r5
    3038:	d011      	beq.n	305e <usb_device_endpoint_clear_halt+0x42>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    303a:	2582      	movs	r5, #130	; 0x82
    303c:	006d      	lsls	r5, r5, #1
    303e:	5554      	strb	r4, [r2, r5]
    3040:	6802      	ldr	r2, [r0, #0]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    3042:	3410      	adds	r4, #16
    3044:	1852      	adds	r2, r2, r1
    3046:	2108      	movs	r1, #8
    3048:	31ff      	adds	r1, #255	; 0xff
    304a:	5c55      	ldrb	r5, [r2, r1]
    304c:	422c      	tst	r4, r5
    304e:	d006      	beq.n	305e <usb_device_endpoint_clear_halt+0x42>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    3050:	5454      	strb	r4, [r2, r1]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    3052:	6802      	ldr	r2, [r0, #0]
    3054:	3308      	adds	r3, #8
    3056:	015b      	lsls	r3, r3, #5
    3058:	18d3      	adds	r3, r2, r3
    305a:	2201      	movs	r2, #1
    305c:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    305e:	bd30      	pop	{r4, r5, pc}
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    3060:	2483      	movs	r4, #131	; 0x83
    3062:	6802      	ldr	r2, [r0, #0]
    3064:	0159      	lsls	r1, r3, #5
    3066:	0064      	lsls	r4, r4, #1
    3068:	1852      	adds	r2, r2, r1
    306a:	5d15      	ldrb	r5, [r2, r4]
    306c:	3ce6      	subs	r4, #230	; 0xe6
    306e:	422c      	tst	r4, r5
    3070:	d0f5      	beq.n	305e <usb_device_endpoint_clear_halt+0x42>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    3072:	2582      	movs	r5, #130	; 0x82
    3074:	006d      	lsls	r5, r5, #1
    3076:	5554      	strb	r4, [r2, r5]
    3078:	6802      	ldr	r2, [r0, #0]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    307a:	3420      	adds	r4, #32
    307c:	1852      	adds	r2, r2, r1
    307e:	2108      	movs	r1, #8
    3080:	31ff      	adds	r1, #255	; 0xff
    3082:	5c55      	ldrb	r5, [r2, r1]
    3084:	422c      	tst	r4, r5
    3086:	d0ea      	beq.n	305e <usb_device_endpoint_clear_halt+0x42>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    3088:	5454      	strb	r4, [r2, r1]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    308a:	6802      	ldr	r2, [r0, #0]
    308c:	3308      	adds	r3, #8
    308e:	015b      	lsls	r3, r3, #5
    3090:	18d3      	adds	r3, r2, r3
    3092:	2202      	movs	r2, #2
    3094:	711a      	strb	r2, [r3, #4]
    3096:	e7e2      	b.n	305e <usb_device_endpoint_clear_halt+0x42>

00003098 <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    3098:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    309a:	000d      	movs	r5, r1
    309c:	6804      	ldr	r4, [r0, #0]
    309e:	3508      	adds	r5, #8
    30a0:	016d      	lsls	r5, r5, #5
    30a2:	5d2c      	ldrb	r4, [r5, r4]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    30a4:	261c      	movs	r6, #28
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    30a6:	0664      	lsls	r4, r4, #25
    30a8:	0f64      	lsrs	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    30aa:	d101      	bne.n	30b0 <usb_device_endpoint_write_buffer_job+0x18>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;

	return STATUS_OK;
}
    30ac:	0030      	movs	r0, r6
    30ae:	bd70      	pop	{r4, r5, r6, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    30b0:	4c0a      	ldr	r4, [pc, #40]	; (30dc <usb_device_endpoint_write_buffer_job+0x44>)
    30b2:	0149      	lsls	r1, r1, #5
    30b4:	1861      	adds	r1, r4, r1
    30b6:	000c      	movs	r4, r1
    30b8:	610a      	str	r2, [r1, #16]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    30ba:	694a      	ldr	r2, [r1, #20]
    30bc:	4908      	ldr	r1, [pc, #32]	; (30e0 <usb_device_endpoint_write_buffer_job+0x48>)
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    30be:	049b      	lsls	r3, r3, #18
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    30c0:	400a      	ands	r2, r1
    30c2:	6162      	str	r2, [r4, #20]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    30c4:	6962      	ldr	r2, [r4, #20]
    30c6:	0c9b      	lsrs	r3, r3, #18
    30c8:	0b92      	lsrs	r2, r2, #14
    30ca:	0392      	lsls	r2, r2, #14
    30cc:	4313      	orrs	r3, r2
    30ce:	6163      	str	r3, [r4, #20]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    30d0:	6803      	ldr	r3, [r0, #0]
	return STATUS_OK;
    30d2:	2600      	movs	r6, #0
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    30d4:	195d      	adds	r5, r3, r5
    30d6:	2380      	movs	r3, #128	; 0x80
    30d8:	716b      	strb	r3, [r5, #5]
	return STATUS_OK;
    30da:	e7e7      	b.n	30ac <usb_device_endpoint_write_buffer_job+0x14>
    30dc:	20001498 	.word	0x20001498
    30e0:	f0003fff 	.word	0xf0003fff

000030e4 <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    30e4:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    30e6:	000c      	movs	r4, r1
    30e8:	6805      	ldr	r5, [r0, #0]
    30ea:	3408      	adds	r4, #8
    30ec:	0164      	lsls	r4, r4, #5
    30ee:	5d65      	ldrb	r5, [r4, r5]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    30f0:	261c      	movs	r6, #28
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    30f2:	076d      	lsls	r5, r5, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    30f4:	d101      	bne.n	30fa <usb_device_endpoint_read_buffer_job+0x16>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;

	return STATUS_OK;
}
    30f6:	0030      	movs	r0, r6
    30f8:	bd70      	pop	{r4, r5, r6, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    30fa:	4d0a      	ldr	r5, [pc, #40]	; (3124 <usb_device_endpoint_read_buffer_job+0x40>)
    30fc:	0149      	lsls	r1, r1, #5
    30fe:	514a      	str	r2, [r1, r5]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    3100:	1869      	adds	r1, r5, r1
    3102:	684a      	ldr	r2, [r1, #4]
    3104:	4d08      	ldr	r5, [pc, #32]	; (3128 <usb_device_endpoint_read_buffer_job+0x44>)
    3106:	049b      	lsls	r3, r3, #18
    3108:	091b      	lsrs	r3, r3, #4
    310a:	402a      	ands	r2, r5
    310c:	4313      	orrs	r3, r2
    310e:	604b      	str	r3, [r1, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    3110:	684b      	ldr	r3, [r1, #4]
	return STATUS_OK;
    3112:	2600      	movs	r6, #0
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    3114:	0b9b      	lsrs	r3, r3, #14
    3116:	039b      	lsls	r3, r3, #14
    3118:	604b      	str	r3, [r1, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    311a:	6803      	ldr	r3, [r0, #0]
    311c:	191c      	adds	r4, r3, r4
    311e:	2340      	movs	r3, #64	; 0x40
    3120:	7123      	strb	r3, [r4, #4]
	return STATUS_OK;
    3122:	e7e8      	b.n	30f6 <usb_device_endpoint_read_buffer_job+0x12>
    3124:	20001498 	.word	0x20001498
    3128:	f0003fff 	.word	0xf0003fff

0000312c <usb_device_endpoint_setup_buffer_job>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    312c:	4b09      	ldr	r3, [pc, #36]	; (3154 <usb_device_endpoint_setup_buffer_job+0x28>)
    312e:	6019      	str	r1, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    3130:	685a      	ldr	r2, [r3, #4]
    3132:	4909      	ldr	r1, [pc, #36]	; (3158 <usb_device_endpoint_setup_buffer_job+0x2c>)
    3134:	4011      	ands	r1, r2
    3136:	2280      	movs	r2, #128	; 0x80
    3138:	0292      	lsls	r2, r2, #10
    313a:	430a      	orrs	r2, r1
    313c:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    313e:	685a      	ldr	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    3140:	2140      	movs	r1, #64	; 0x40
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    3142:	0b92      	lsrs	r2, r2, #14
    3144:	0392      	lsls	r2, r2, #14
    3146:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    3148:	2382      	movs	r3, #130	; 0x82
    314a:	6802      	ldr	r2, [r0, #0]
    314c:	005b      	lsls	r3, r3, #1

	return STATUS_OK;
}
    314e:	2000      	movs	r0, #0
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    3150:	54d1      	strb	r1, [r2, r3]
}
    3152:	4770      	bx	lr
    3154:	20001498 	.word	0x20001498
    3158:	f0003fff 	.word	0xf0003fff

0000315c <usb_enable>:
void usb_enable(struct usb_module *module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    315c:	2102      	movs	r1, #2
    315e:	6802      	ldr	r2, [r0, #0]
    3160:	7813      	ldrb	r3, [r2, #0]
    3162:	430b      	orrs	r3, r1
    3164:	7013      	strb	r3, [r2, #0]
    3166:	6802      	ldr	r2, [r0, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    3168:	7893      	ldrb	r3, [r2, #2]
    316a:	2b02      	cmp	r3, #2
    316c:	d0fc      	beq.n	3168 <usb_enable+0xc>
}
    316e:	4770      	bx	lr

00003170 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    3170:	b5f0      	push	{r4, r5, r6, r7, lr}
    3172:	4657      	mov	r7, sl
    3174:	4645      	mov	r5, r8
    3176:	46de      	mov	lr, fp
    3178:	464e      	mov	r6, r9
    317a:	b5e0      	push	{r5, r6, r7, lr}
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    317c:	4c86      	ldr	r4, [pc, #536]	; (3398 <USB_Handler+0x228>)
{
    317e:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    3180:	6827      	ldr	r7, [r4, #0]
    3182:	683d      	ldr	r5, [r7, #0]
    3184:	782b      	ldrb	r3, [r5, #0]
    3186:	09db      	lsrs	r3, r3, #7
    3188:	d000      	beq.n	318c <USB_Handler+0x1c>
    318a:	e06d      	b.n	3268 <USB_Handler+0xf8>
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    318c:	8c2e      	ldrh	r6, [r5, #32]
    318e:	b2b6      	uxth	r6, r6
	if (0 == ep_inst) {
    3190:	2e00      	cmp	r6, #0
    3192:	d136      	bne.n	3202 <USB_Handler+0x92>
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    3194:	8bab      	ldrh	r3, [r5, #28]
		flags_run = flags &
    3196:	22aa      	movs	r2, #170	; 0xaa
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    3198:	b29b      	uxth	r3, r3
    319a:	4698      	mov	r8, r3
				_usb_instances->device_enabled_callback_mask &
    319c:	23ab      	movs	r3, #171	; 0xab
		flags_run = flags &
    319e:	0052      	lsls	r2, r2, #1
				_usb_instances->device_enabled_callback_mask &
    31a0:	005b      	lsls	r3, r3, #1
		flags_run = flags &
    31a2:	5afb      	ldrh	r3, [r7, r3]
    31a4:	5abe      	ldrh	r6, [r7, r2]
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    31a6:	2500      	movs	r5, #0
		flags_run = flags &
    31a8:	401e      	ands	r6, r3
    31aa:	4643      	mov	r3, r8
    31ac:	401e      	ands	r6, r3
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    31ae:	4b7b      	ldr	r3, [pc, #492]	; (339c <USB_Handler+0x22c>)
    31b0:	4f7b      	ldr	r7, [pc, #492]	; (33a0 <USB_Handler+0x230>)
    31b2:	469b      	mov	fp, r3
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    31b4:	2380      	movs	r3, #128	; 0x80
    31b6:	005b      	lsls	r3, r3, #1
    31b8:	469a      	mov	sl, r3
    31ba:	4b7a      	ldr	r3, [pc, #488]	; (33a4 <USB_Handler+0x234>)
    31bc:	4699      	mov	r9, r3
    31be:	0033      	movs	r3, r6
    31c0:	4646      	mov	r6, r8
    31c2:	4698      	mov	r8, r3
			if (flags & _usb_device_irq_bits[i]) {
    31c4:	006b      	lsls	r3, r5, #1
    31c6:	5afb      	ldrh	r3, [r7, r3]
    31c8:	4233      	tst	r3, r6
    31ca:	d002      	beq.n	31d2 <USB_Handler+0x62>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    31cc:	6822      	ldr	r2, [r4, #0]
    31ce:	6812      	ldr	r2, [r2, #0]
    31d0:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
    31d2:	4642      	mov	r2, r8
    31d4:	4213      	tst	r3, r2
    31d6:	d00a      	beq.n	31ee <USB_Handler+0x7e>
    31d8:	4649      	mov	r1, r9
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    31da:	2d06      	cmp	r5, #6
    31dc:	d100      	bne.n	31e0 <USB_Handler+0x70>
    31de:	e364      	b.n	38aa <USB_Handler+0x73a>
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    31e0:	002b      	movs	r3, r5
    31e2:	6822      	ldr	r2, [r4, #0]
    31e4:	332e      	adds	r3, #46	; 0x2e
    31e6:	009b      	lsls	r3, r3, #2
    31e8:	589b      	ldr	r3, [r3, r2]
    31ea:	0010      	movs	r0, r2
    31ec:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    31ee:	3501      	adds	r5, #1
    31f0:	2d07      	cmp	r5, #7
    31f2:	d1e7      	bne.n	31c4 <USB_Handler+0x54>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    31f4:	b003      	add	sp, #12
    31f6:	bc3c      	pop	{r2, r3, r4, r5}
    31f8:	4690      	mov	r8, r2
    31fa:	4699      	mov	r9, r3
    31fc:	46a2      	mov	sl, r4
    31fe:	46ab      	mov	fp, r5
    3200:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (ep_inst & (1 << i)) {
    3202:	2201      	movs	r2, #1
    3204:	003c      	movs	r4, r7
    3206:	4694      	mov	ip, r2
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    3208:	325f      	adds	r2, #95	; 0x5f
    320a:	4693      	mov	fp, r2
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    320c:	3a50      	subs	r2, #80	; 0x50
	if (0 == ep_inst) {
    320e:	2300      	movs	r3, #0
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    3210:	4692      	mov	sl, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    3212:	46b9      	mov	r9, r7
    3214:	46a8      	mov	r8, r5
    3216:	3459      	adds	r4, #89	; 0x59
    3218:	34ff      	adds	r4, #255	; 0xff
			if (ep_inst & (1 << i)) {
    321a:	0032      	movs	r2, r6
    321c:	4661      	mov	r1, ip
    321e:	411a      	asrs	r2, r3
    3220:	b2dd      	uxtb	r5, r3
    3222:	4211      	tst	r1, r2
    3224:	d01b      	beq.n	325e <USB_Handler+0xee>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    3226:	001f      	movs	r7, r3
    3228:	3708      	adds	r7, #8
    322a:	017a      	lsls	r2, r7, #5
    322c:	4442      	add	r2, r8
    322e:	1dd1      	adds	r1, r2, #7
    3230:	79d2      	ldrb	r2, [r2, #7]
    3232:	9100      	str	r1, [sp, #0]
    3234:	7a21      	ldrb	r1, [r4, #8]
    3236:	7820      	ldrb	r0, [r4, #0]
    3238:	b2d2      	uxtb	r2, r2
    323a:	4011      	ands	r1, r2
    323c:	4001      	ands	r1, r0
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    323e:	4658      	mov	r0, fp
    3240:	4210      	tst	r0, r2
    3242:	d000      	beq.n	3246 <USB_Handler+0xd6>
    3244:	e227      	b.n	3696 <USB_Handler+0x526>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    3246:	4650      	mov	r0, sl
    3248:	4210      	tst	r0, r2
    324a:	d000      	beq.n	324e <USB_Handler+0xde>
    324c:	e24e      	b.n	36ec <USB_Handler+0x57c>
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    324e:	2003      	movs	r0, #3
    3250:	4210      	tst	r0, r2
    3252:	d000      	beq.n	3256 <USB_Handler+0xe6>
    3254:	e263      	b.n	371e <USB_Handler+0x5ae>
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    3256:	200c      	movs	r0, #12
    3258:	4210      	tst	r0, r2
    325a:	d000      	beq.n	325e <USB_Handler+0xee>
    325c:	e283      	b.n	3766 <USB_Handler+0x5f6>
    325e:	3301      	adds	r3, #1
    3260:	3401      	adds	r4, #1
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    3262:	2b08      	cmp	r3, #8
    3264:	d1d9      	bne.n	321a <USB_Handler+0xaa>
    3266:	e7c5      	b.n	31f4 <USB_Handler+0x84>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    3268:	8c2b      	ldrh	r3, [r5, #32]
    326a:	2b00      	cmp	r3, #0
    326c:	d100      	bne.n	3270 <USB_Handler+0x100>
    326e:	e0a1      	b.n	33b4 <USB_Handler+0x244>
    3270:	8c28      	ldrh	r0, [r5, #32]
    3272:	4b4d      	ldr	r3, [pc, #308]	; (33a8 <USB_Handler+0x238>)
    3274:	b280      	uxth	r0, r0
    3276:	4798      	blx	r3
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    3278:	2308      	movs	r3, #8
    327a:	4698      	mov	r8, r3
    327c:	4480      	add	r8, r0
    327e:	4643      	mov	r3, r8
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    3280:	2203      	movs	r2, #3
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    3282:	015b      	lsls	r3, r3, #5
    3284:	18ed      	adds	r5, r5, r3
    3286:	79ed      	ldrb	r5, [r5, #7]
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    3288:	0006      	movs	r6, r0
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    328a:	b2ed      	uxtb	r5, r5
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    328c:	422a      	tst	r2, r5
    328e:	d014      	beq.n	32ba <USB_Handler+0x14a>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3290:	4946      	ldr	r1, [pc, #280]	; (33ac <USB_Handler+0x23c>)
    3292:	468c      	mov	ip, r1
    3294:	2101      	movs	r1, #1
    3296:	4689      	mov	r9, r1
    3298:	4081      	lsls	r1, r0
    329a:	4660      	mov	r0, ip
    329c:	6800      	ldr	r0, [r0, #0]
    329e:	4388      	bics	r0, r1
    32a0:	0001      	movs	r1, r0
    32a2:	4660      	mov	r0, ip
    32a4:	6001      	str	r1, [r0, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    32a6:	6839      	ldr	r1, [r7, #0]
    32a8:	18c9      	adds	r1, r1, r3
    32aa:	71ca      	strb	r2, [r1, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    32ac:	4649      	mov	r1, r9
    32ae:	19ba      	adds	r2, r7, r6
    32b0:	32ae      	adds	r2, #174	; 0xae
    32b2:	7812      	ldrb	r2, [r2, #0]
    32b4:	4211      	tst	r1, r2
    32b6:	d000      	beq.n	32ba <USB_Handler+0x14a>
    32b8:	e172      	b.n	35a0 <USB_Handler+0x430>
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    32ba:	2304      	movs	r3, #4
    32bc:	422b      	tst	r3, r5
    32be:	d020      	beq.n	3302 <USB_Handler+0x192>
			if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_ISO &&
    32c0:	6823      	ldr	r3, [r4, #0]
    32c2:	681f      	ldr	r7, [r3, #0]
    32c4:	469c      	mov	ip, r3
    32c6:	4643      	mov	r3, r8
    32c8:	015b      	lsls	r3, r3, #5
    32ca:	4699      	mov	r9, r3
    32cc:	5ddb      	ldrb	r3, [r3, r7]
    32ce:	069b      	lsls	r3, r3, #26
    32d0:	0f5b      	lsrs	r3, r3, #29
    32d2:	9300      	str	r3, [sp, #0]
    32d4:	2b02      	cmp	r3, #2
    32d6:	d100      	bne.n	32da <USB_Handler+0x16a>
    32d8:	e1bf      	b.n	365a <USB_Handler+0x4ea>
    32da:	4830      	ldr	r0, [pc, #192]	; (339c <USB_Handler+0x22c>)
    32dc:	0172      	lsls	r2, r6, #5
			else if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_BULK &&
    32de:	4643      	mov	r3, r8
    32e0:	0159      	lsls	r1, r3, #5
    32e2:	5dcb      	ldrb	r3, [r1, r7]
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    32e4:	1882      	adds	r2, r0, r2
			else if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_BULK &&
    32e6:	069b      	lsls	r3, r3, #26
    32e8:	0f5b      	lsrs	r3, r3, #29
    32ea:	2b03      	cmp	r3, #3
    32ec:	d100      	bne.n	32f0 <USB_Handler+0x180>
    32ee:	e1bf      	b.n	3670 <USB_Handler+0x500>
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    32f0:	2300      	movs	r3, #0
    32f2:	7293      	strb	r3, [r2, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    32f4:	4663      	mov	r3, ip
    32f6:	4642      	mov	r2, r8
    32f8:	681b      	ldr	r3, [r3, #0]
    32fa:	0152      	lsls	r2, r2, #5
    32fc:	189b      	adds	r3, r3, r2
    32fe:	2204      	movs	r2, #4
    3300:	71da      	strb	r2, [r3, #7]
		if (flags & USB_HOST_PINTFLAG_PERR) {
    3302:	2308      	movs	r3, #8
    3304:	422b      	tst	r3, r5
    3306:	d012      	beq.n	332e <USB_Handler+0x1be>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3308:	2201      	movs	r2, #1
    330a:	40b2      	lsls	r2, r6
    330c:	4927      	ldr	r1, [pc, #156]	; (33ac <USB_Handler+0x23c>)
    330e:	6808      	ldr	r0, [r1, #0]
    3310:	4390      	bics	r0, r2
    3312:	6008      	str	r0, [r1, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3314:	6820      	ldr	r0, [r4, #0]
    3316:	4642      	mov	r2, r8
    3318:	6801      	ldr	r1, [r0, #0]
    331a:	0152      	lsls	r2, r2, #5
    331c:	468c      	mov	ip, r1
    331e:	4462      	add	r2, ip
    3320:	71d3      	strb	r3, [r2, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3322:	1983      	adds	r3, r0, r6
    3324:	33ae      	adds	r3, #174	; 0xae
    3326:	781b      	ldrb	r3, [r3, #0]
    3328:	079b      	lsls	r3, r3, #30
    332a:	d500      	bpl.n	332e <USB_Handler+0x1be>
    332c:	e187      	b.n	363e <USB_Handler+0x4ce>
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    332e:	2310      	movs	r3, #16
    3330:	422b      	tst	r3, r5
    3332:	d012      	beq.n	335a <USB_Handler+0x1ea>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3334:	2201      	movs	r2, #1
    3336:	40b2      	lsls	r2, r6
    3338:	491c      	ldr	r1, [pc, #112]	; (33ac <USB_Handler+0x23c>)
    333a:	6808      	ldr	r0, [r1, #0]
    333c:	4390      	bics	r0, r2
    333e:	6008      	str	r0, [r1, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3340:	6820      	ldr	r0, [r4, #0]
    3342:	4642      	mov	r2, r8
    3344:	6801      	ldr	r1, [r0, #0]
    3346:	0152      	lsls	r2, r2, #5
    3348:	468c      	mov	ip, r1
    334a:	4462      	add	r2, ip
    334c:	71d3      	strb	r3, [r2, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    334e:	1983      	adds	r3, r0, r6
    3350:	33ae      	adds	r3, #174	; 0xae
    3352:	781b      	ldrb	r3, [r3, #0]
    3354:	075b      	lsls	r3, r3, #29
    3356:	d500      	bpl.n	335a <USB_Handler+0x1ea>
    3358:	e162      	b.n	3620 <USB_Handler+0x4b0>
		if (flags & USB_HOST_PINTFLAG_STALL) {
    335a:	2220      	movs	r2, #32
    335c:	422a      	tst	r2, r5
    335e:	d100      	bne.n	3362 <USB_Handler+0x1f2>
    3360:	e748      	b.n	31f4 <USB_Handler+0x84>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3362:	2301      	movs	r3, #1
    3364:	40b3      	lsls	r3, r6
    3366:	4911      	ldr	r1, [pc, #68]	; (33ac <USB_Handler+0x23c>)
    3368:	6808      	ldr	r0, [r1, #0]
    336a:	4398      	bics	r0, r3
    336c:	6008      	str	r0, [r1, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    336e:	6820      	ldr	r0, [r4, #0]
    3370:	4643      	mov	r3, r8
    3372:	6801      	ldr	r1, [r0, #0]
    3374:	015b      	lsls	r3, r3, #5
    3376:	468c      	mov	ip, r1
    3378:	4463      	add	r3, ip
    337a:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    337c:	1983      	adds	r3, r0, r6
    337e:	33ae      	adds	r3, #174	; 0xae
    3380:	781b      	ldrb	r3, [r3, #0]
    3382:	071b      	lsls	r3, r3, #28
    3384:	d400      	bmi.n	3388 <USB_Handler+0x218>
    3386:	e735      	b.n	31f4 <USB_Handler+0x84>
				pipe_callback_para.pipe_num = pipe_int;
    3388:	4909      	ldr	r1, [pc, #36]	; (33b0 <USB_Handler+0x240>)
    338a:	700e      	strb	r6, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    338c:	0136      	lsls	r6, r6, #4
    338e:	1986      	adds	r6, r0, r6
    3390:	6b33      	ldr	r3, [r6, #48]	; 0x30
    3392:	4798      	blx	r3
    3394:	e72e      	b.n	31f4 <USB_Handler+0x84>
    3396:	46c0      	nop			; (mov r8, r8)
    3398:	20000e28 	.word	0x20000e28
    339c:	20001498 	.word	0x20001498
    33a0:	000232fc 	.word	0x000232fc
    33a4:	20000e2c 	.word	0x20000e2c
    33a8:	0001c3a5 	.word	0x0001c3a5
    33ac:	20000e38 	.word	0x20000e38
    33b0:	20000e3c 	.word	0x20000e3c
		if (flags & USB_HOST_INTFLAG_HSOF) {
    33b4:	2304      	movs	r3, #4
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    33b6:	8bae      	ldrh	r6, [r5, #28]
    33b8:	b2b6      	uxth	r6, r6
		if (flags & USB_HOST_INTFLAG_HSOF) {
    33ba:	4233      	tst	r3, r6
    33bc:	d100      	bne.n	33c0 <USB_Handler+0x250>
    33be:	e080      	b.n	34c2 <USB_Handler+0x352>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    33c0:	83ab      	strh	r3, [r5, #28]
    33c2:	4bc5      	ldr	r3, [pc, #788]	; (36d8 <USB_Handler+0x568>)
    33c4:	681b      	ldr	r3, [r3, #0]
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    33c6:	079a      	lsls	r2, r3, #30
    33c8:	d511      	bpl.n	33ee <USB_Handler+0x27e>
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    33ca:	2090      	movs	r0, #144	; 0x90
    33cc:	6839      	ldr	r1, [r7, #0]
    33ce:	0040      	lsls	r0, r0, #1
    33d0:	5c0a      	ldrb	r2, [r1, r0]
    33d2:	0692      	lsls	r2, r2, #26
    33d4:	0f52      	lsrs	r2, r2, #29
    33d6:	2a03      	cmp	r2, #3
    33d8:	d109      	bne.n	33ee <USB_Handler+0x27e>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN != USB_HOST_PIPE_TOKEN_IN) {
    33da:	5c0a      	ldrb	r2, [r1, r0]
    33dc:	0792      	lsls	r2, r2, #30
    33de:	0f92      	lsrs	r2, r2, #30
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    33e0:	2a01      	cmp	r2, #1
    33e2:	d104      	bne.n	33ee <USB_Handler+0x27e>
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
    33e4:	3811      	subs	r0, #17
    33e6:	3224      	adds	r2, #36	; 0x24
    33e8:	38ff      	subs	r0, #255	; 0xff
    33ea:	32ff      	adds	r2, #255	; 0xff
    33ec:	5488      	strb	r0, [r1, r2]
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    33ee:	075a      	lsls	r2, r3, #29
    33f0:	d511      	bpl.n	3416 <USB_Handler+0x2a6>
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    33f2:	20a0      	movs	r0, #160	; 0xa0
    33f4:	6839      	ldr	r1, [r7, #0]
    33f6:	0040      	lsls	r0, r0, #1
    33f8:	5c0a      	ldrb	r2, [r1, r0]
    33fa:	0692      	lsls	r2, r2, #26
    33fc:	0f52      	lsrs	r2, r2, #29
    33fe:	2a03      	cmp	r2, #3
    3400:	d109      	bne.n	3416 <USB_Handler+0x2a6>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN != USB_HOST_PIPE_TOKEN_IN) {
    3402:	5c0a      	ldrb	r2, [r1, r0]
    3404:	0792      	lsls	r2, r2, #30
    3406:	0f92      	lsrs	r2, r2, #30
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    3408:	2a01      	cmp	r2, #1
    340a:	d104      	bne.n	3416 <USB_Handler+0x2a6>
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
    340c:	3831      	subs	r0, #49	; 0x31
    340e:	3244      	adds	r2, #68	; 0x44
    3410:	38ff      	subs	r0, #255	; 0xff
    3412:	32ff      	adds	r2, #255	; 0xff
    3414:	5488      	strb	r0, [r1, r2]
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    3416:	071a      	lsls	r2, r3, #28
    3418:	d511      	bpl.n	343e <USB_Handler+0x2ce>
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    341a:	20b0      	movs	r0, #176	; 0xb0
    341c:	6839      	ldr	r1, [r7, #0]
    341e:	0040      	lsls	r0, r0, #1
    3420:	5c0a      	ldrb	r2, [r1, r0]
    3422:	0692      	lsls	r2, r2, #26
    3424:	0f52      	lsrs	r2, r2, #29
    3426:	2a03      	cmp	r2, #3
    3428:	d109      	bne.n	343e <USB_Handler+0x2ce>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN != USB_HOST_PIPE_TOKEN_IN) {
    342a:	5c0a      	ldrb	r2, [r1, r0]
    342c:	0792      	lsls	r2, r2, #30
    342e:	0f92      	lsrs	r2, r2, #30
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    3430:	2a01      	cmp	r2, #1
    3432:	d104      	bne.n	343e <USB_Handler+0x2ce>
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
    3434:	3851      	subs	r0, #81	; 0x51
    3436:	3264      	adds	r2, #100	; 0x64
    3438:	38ff      	subs	r0, #255	; 0xff
    343a:	32ff      	adds	r2, #255	; 0xff
    343c:	5488      	strb	r0, [r1, r2]
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    343e:	2110      	movs	r1, #16
    3440:	4219      	tst	r1, r3
    3442:	d00f      	beq.n	3464 <USB_Handler+0x2f4>
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    3444:	25c0      	movs	r5, #192	; 0xc0
    3446:	6838      	ldr	r0, [r7, #0]
    3448:	006d      	lsls	r5, r5, #1
    344a:	5d42      	ldrb	r2, [r0, r5]
    344c:	0692      	lsls	r2, r2, #26
    344e:	0f52      	lsrs	r2, r2, #29
    3450:	2a03      	cmp	r2, #3
    3452:	d107      	bne.n	3464 <USB_Handler+0x2f4>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN != USB_HOST_PIPE_TOKEN_IN) {
    3454:	5d42      	ldrb	r2, [r0, r5]
    3456:	0792      	lsls	r2, r2, #30
    3458:	0f92      	lsrs	r2, r2, #30
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    345a:	2a01      	cmp	r2, #1
    345c:	d102      	bne.n	3464 <USB_Handler+0x2f4>
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
    345e:	3284      	adds	r2, #132	; 0x84
    3460:	32ff      	adds	r2, #255	; 0xff
    3462:	5481      	strb	r1, [r0, r2]
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    3464:	069a      	lsls	r2, r3, #26
    3466:	d511      	bpl.n	348c <USB_Handler+0x31c>
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    3468:	20d0      	movs	r0, #208	; 0xd0
    346a:	6839      	ldr	r1, [r7, #0]
    346c:	0040      	lsls	r0, r0, #1
    346e:	5c0a      	ldrb	r2, [r1, r0]
    3470:	0692      	lsls	r2, r2, #26
    3472:	0f52      	lsrs	r2, r2, #29
    3474:	2a03      	cmp	r2, #3
    3476:	d109      	bne.n	348c <USB_Handler+0x31c>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN != USB_HOST_PIPE_TOKEN_IN) {
    3478:	5c0a      	ldrb	r2, [r1, r0]
    347a:	0792      	lsls	r2, r2, #30
    347c:	0f92      	lsrs	r2, r2, #30
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    347e:	2a01      	cmp	r2, #1
    3480:	d104      	bne.n	348c <USB_Handler+0x31c>
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
    3482:	3891      	subs	r0, #145	; 0x91
    3484:	32a4      	adds	r2, #164	; 0xa4
    3486:	38ff      	subs	r0, #255	; 0xff
    3488:	32ff      	adds	r2, #255	; 0xff
    348a:	5488      	strb	r0, [r1, r2]
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    348c:	065a      	lsls	r2, r3, #25
    348e:	d511      	bpl.n	34b4 <USB_Handler+0x344>
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    3490:	20e0      	movs	r0, #224	; 0xe0
    3492:	6839      	ldr	r1, [r7, #0]
    3494:	0040      	lsls	r0, r0, #1
    3496:	5c0a      	ldrb	r2, [r1, r0]
    3498:	0692      	lsls	r2, r2, #26
    349a:	0f52      	lsrs	r2, r2, #29
    349c:	2a03      	cmp	r2, #3
    349e:	d109      	bne.n	34b4 <USB_Handler+0x344>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN != USB_HOST_PIPE_TOKEN_IN) {
    34a0:	5c0a      	ldrb	r2, [r1, r0]
    34a2:	0792      	lsls	r2, r2, #30
    34a4:	0f92      	lsrs	r2, r2, #30
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    34a6:	2a01      	cmp	r2, #1
    34a8:	d104      	bne.n	34b4 <USB_Handler+0x344>
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
    34aa:	38b1      	subs	r0, #177	; 0xb1
    34ac:	32c4      	adds	r2, #196	; 0xc4
    34ae:	38ff      	subs	r0, #255	; 0xff
    34b0:	32ff      	adds	r2, #255	; 0xff
    34b2:	5488      	strb	r0, [r1, r2]
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    34b4:	061b      	lsls	r3, r3, #24
    34b6:	d460      	bmi.n	357a <USB_Handler+0x40a>
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    34b8:	23a5      	movs	r3, #165	; 0xa5
    34ba:	5cfb      	ldrb	r3, [r7, r3]
    34bc:	07db      	lsls	r3, r3, #31
    34be:	d500      	bpl.n	34c2 <USB_Handler+0x352>
    34c0:	e0aa      	b.n	3618 <USB_Handler+0x4a8>
		if (flags & USB_HOST_INTFLAG_RST) {
    34c2:	2308      	movs	r3, #8
    34c4:	4233      	tst	r3, r6
    34c6:	d00a      	beq.n	34de <USB_Handler+0x36e>
			host_pipe_job_busy_status = 0;
    34c8:	2100      	movs	r1, #0
    34ca:	4a83      	ldr	r2, [pc, #524]	; (36d8 <USB_Handler+0x568>)
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    34cc:	6820      	ldr	r0, [r4, #0]
			host_pipe_job_busy_status = 0;
    34ce:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    34d0:	6802      	ldr	r2, [r0, #0]
    34d2:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    34d4:	339d      	adds	r3, #157	; 0x9d
    34d6:	5cc3      	ldrb	r3, [r0, r3]
    34d8:	079b      	lsls	r3, r3, #30
    34da:	d500      	bpl.n	34de <USB_Handler+0x36e>
    34dc:	e099      	b.n	3612 <USB_Handler+0x4a2>
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    34de:	2340      	movs	r3, #64	; 0x40
    34e0:	4233      	tst	r3, r6
    34e2:	d007      	beq.n	34f4 <USB_Handler+0x384>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    34e4:	6820      	ldr	r0, [r4, #0]
    34e6:	6802      	ldr	r2, [r0, #0]
    34e8:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    34ea:	3365      	adds	r3, #101	; 0x65
    34ec:	5cc3      	ldrb	r3, [r0, r3]
    34ee:	06db      	lsls	r3, r3, #27
    34f0:	d500      	bpl.n	34f4 <USB_Handler+0x384>
    34f2:	e08b      	b.n	360c <USB_Handler+0x49c>
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    34f4:	2320      	movs	r3, #32
    34f6:	4233      	tst	r3, r6
    34f8:	d006      	beq.n	3508 <USB_Handler+0x398>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    34fa:	6820      	ldr	r0, [r4, #0]
    34fc:	6802      	ldr	r2, [r0, #0]
    34fe:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    3500:	3385      	adds	r3, #133	; 0x85
    3502:	5cc3      	ldrb	r3, [r0, r3]
    3504:	071b      	lsls	r3, r3, #28
    3506:	d47e      	bmi.n	3606 <USB_Handler+0x496>
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    3508:	2310      	movs	r3, #16
    350a:	4233      	tst	r3, r6
    350c:	d006      	beq.n	351c <USB_Handler+0x3ac>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    350e:	6820      	ldr	r0, [r4, #0]
    3510:	6802      	ldr	r2, [r0, #0]
    3512:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    3514:	3395      	adds	r3, #149	; 0x95
    3516:	5cc3      	ldrb	r3, [r0, r3]
    3518:	075b      	lsls	r3, r3, #29
    351a:	d471      	bmi.n	3600 <USB_Handler+0x490>
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    351c:	2380      	movs	r3, #128	; 0x80
    351e:	4233      	tst	r3, r6
    3520:	d009      	beq.n	3536 <USB_Handler+0x3c6>
			host_pipe_job_busy_status = 0;
    3522:	2100      	movs	r1, #0
    3524:	4a6c      	ldr	r2, [pc, #432]	; (36d8 <USB_Handler+0x568>)
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    3526:	6820      	ldr	r0, [r4, #0]
			host_pipe_job_busy_status = 0;
    3528:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    352a:	6802      	ldr	r2, [r0, #0]
    352c:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    352e:	3325      	adds	r3, #37	; 0x25
    3530:	5cc3      	ldrb	r3, [r0, r3]
    3532:	069b      	lsls	r3, r3, #26
    3534:	d461      	bmi.n	35fa <USB_Handler+0x48a>
		if (flags & USB_HOST_INTFLAG_DCONN) {
    3536:	2380      	movs	r3, #128	; 0x80
    3538:	005b      	lsls	r3, r3, #1
    353a:	421e      	tst	r6, r3
    353c:	d009      	beq.n	3552 <USB_Handler+0x3e2>
			host_pipe_job_busy_status = 0;
    353e:	2100      	movs	r1, #0
    3540:	4a65      	ldr	r2, [pc, #404]	; (36d8 <USB_Handler+0x568>)
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    3542:	6820      	ldr	r0, [r4, #0]
			host_pipe_job_busy_status = 0;
    3544:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    3546:	6802      	ldr	r2, [r0, #0]
    3548:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    354a:	3b5b      	subs	r3, #91	; 0x5b
    354c:	5cc3      	ldrb	r3, [r0, r3]
    354e:	065b      	lsls	r3, r3, #25
    3550:	d450      	bmi.n	35f4 <USB_Handler+0x484>
		if (flags & USB_HOST_INTFLAG_DDISC) {
    3552:	2380      	movs	r3, #128	; 0x80
    3554:	009b      	lsls	r3, r3, #2
    3556:	421e      	tst	r6, r3
    3558:	d100      	bne.n	355c <USB_Handler+0x3ec>
    355a:	e64b      	b.n	31f4 <USB_Handler+0x84>
			host_pipe_job_busy_status = 0;
    355c:	2100      	movs	r1, #0
    355e:	4a5e      	ldr	r2, [pc, #376]	; (36d8 <USB_Handler+0x568>)
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    3560:	6820      	ldr	r0, [r4, #0]
			host_pipe_job_busy_status = 0;
    3562:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    3564:	6802      	ldr	r2, [r0, #0]
    3566:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    3568:	3b5c      	subs	r3, #92	; 0x5c
    356a:	3bff      	subs	r3, #255	; 0xff
    356c:	5cc3      	ldrb	r3, [r0, r3]
    356e:	2b7f      	cmp	r3, #127	; 0x7f
    3570:	d800      	bhi.n	3574 <USB_Handler+0x404>
    3572:	e63f      	b.n	31f4 <USB_Handler+0x84>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    3574:	6a03      	ldr	r3, [r0, #32]
    3576:	4798      	blx	r3
    3578:	e63c      	b.n	31f4 <USB_Handler+0x84>
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    357a:	21f0      	movs	r1, #240	; 0xf0
    357c:	683a      	ldr	r2, [r7, #0]
    357e:	0049      	lsls	r1, r1, #1
    3580:	5c53      	ldrb	r3, [r2, r1]
    3582:	069b      	lsls	r3, r3, #26
    3584:	0f5b      	lsrs	r3, r3, #29
    3586:	2b03      	cmp	r3, #3
    3588:	d196      	bne.n	34b8 <USB_Handler+0x348>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN != USB_HOST_PIPE_TOKEN_IN) {
    358a:	5c53      	ldrb	r3, [r2, r1]
    358c:	079b      	lsls	r3, r3, #30
    358e:	0f9b      	lsrs	r3, r3, #30
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    3590:	2b01      	cmp	r3, #1
    3592:	d191      	bne.n	34b8 <USB_Handler+0x348>
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
    3594:	39d1      	subs	r1, #209	; 0xd1
    3596:	33e4      	adds	r3, #228	; 0xe4
    3598:	39ff      	subs	r1, #255	; 0xff
    359a:	33ff      	adds	r3, #255	; 0xff
    359c:	54d1      	strb	r1, [r2, r3]
    359e:	e78b      	b.n	34b8 <USB_Handler+0x348>
				pipe_callback_para.pipe_num = pipe_int;
    35a0:	494e      	ldr	r1, [pc, #312]	; (36dc <USB_Handler+0x56c>)
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    35a2:	484f      	ldr	r0, [pc, #316]	; (36e0 <USB_Handler+0x570>)
				pipe_callback_para.pipe_num = pipe_int;
    35a4:	700e      	strb	r6, [r1, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    35a6:	683a      	ldr	r2, [r7, #0]
    35a8:	5c9b      	ldrb	r3, [r3, r2]
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    35aa:	0172      	lsls	r2, r6, #5
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    35ac:	079b      	lsls	r3, r3, #30
    35ae:	0f9b      	lsrs	r3, r3, #30
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    35b0:	1882      	adds	r2, r0, r2
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    35b2:	2b01      	cmp	r3, #1
    35b4:	d100      	bne.n	35b8 <USB_Handler+0x448>
    35b6:	e109      	b.n	37cc <USB_Handler+0x65c>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    35b8:	6853      	ldr	r3, [r2, #4]
    35ba:	011b      	lsls	r3, r3, #4
    35bc:	0c9b      	lsrs	r3, r3, #18
    35be:	804b      	strh	r3, [r1, #2]
    35c0:	b298      	uxth	r0, r3
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    35c2:	6853      	ldr	r3, [r2, #4]
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    35c4:	4682      	mov	sl, r0
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    35c6:	049b      	lsls	r3, r3, #18
    35c8:	0c9b      	lsrs	r3, r3, #18
    35ca:	808b      	strh	r3, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    35cc:	6853      	ldr	r3, [r2, #4]
    35ce:	4699      	mov	r9, r3
    35d0:	4648      	mov	r0, r9
    35d2:	4b44      	ldr	r3, [pc, #272]	; (36e4 <USB_Handler+0x574>)
    35d4:	4018      	ands	r0, r3
					if (0 == pipe_callback_para.transfered_size) {
    35d6:	4653      	mov	r3, sl
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    35d8:	6050      	str	r0, [r2, #4]
					if (0 == pipe_callback_para.transfered_size) {
    35da:	2b00      	cmp	r3, #0
    35dc:	d103      	bne.n	35e6 <USB_Handler+0x476>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    35de:	6853      	ldr	r3, [r2, #4]
    35e0:	049b      	lsls	r3, r3, #18
    35e2:	0c9b      	lsrs	r3, r3, #18
    35e4:	804b      	strh	r3, [r1, #2]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    35e6:	1cb3      	adds	r3, r6, #2
    35e8:	011b      	lsls	r3, r3, #4
    35ea:	18fb      	adds	r3, r7, r3
    35ec:	685b      	ldr	r3, [r3, #4]
    35ee:	0038      	movs	r0, r7
    35f0:	4798      	blx	r3
    35f2:	e662      	b.n	32ba <USB_Handler+0x14a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    35f4:	69c3      	ldr	r3, [r0, #28]
    35f6:	4798      	blx	r3
    35f8:	e7ab      	b.n	3552 <USB_Handler+0x3e2>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    35fa:	6983      	ldr	r3, [r0, #24]
    35fc:	4798      	blx	r3
    35fe:	e79a      	b.n	3536 <USB_Handler+0x3c6>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    3600:	68c3      	ldr	r3, [r0, #12]
    3602:	4798      	blx	r3
    3604:	e78a      	b.n	351c <USB_Handler+0x3ac>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    3606:	6903      	ldr	r3, [r0, #16]
    3608:	4798      	blx	r3
    360a:	e77d      	b.n	3508 <USB_Handler+0x398>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    360c:	6943      	ldr	r3, [r0, #20]
    360e:	4798      	blx	r3
    3610:	e770      	b.n	34f4 <USB_Handler+0x384>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    3612:	6883      	ldr	r3, [r0, #8]
    3614:	4798      	blx	r3
    3616:	e762      	b.n	34de <USB_Handler+0x36e>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    3618:	687b      	ldr	r3, [r7, #4]
    361a:	0038      	movs	r0, r7
    361c:	4798      	blx	r3
    361e:	e750      	b.n	34c2 <USB_Handler+0x352>
				pipe_callback_para.pipe_num = pipe_int;
    3620:	4a2e      	ldr	r2, [pc, #184]	; (36dc <USB_Handler+0x56c>)
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    3622:	4b2f      	ldr	r3, [pc, #188]	; (36e0 <USB_Handler+0x570>)
    3624:	0171      	lsls	r1, r6, #5
				pipe_callback_para.pipe_num = pipe_int;
    3626:	7016      	strb	r6, [r2, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    3628:	185b      	adds	r3, r3, r1
    362a:	685b      	ldr	r3, [r3, #4]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    362c:	2100      	movs	r1, #0
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    362e:	011b      	lsls	r3, r3, #4
    3630:	0c9b      	lsrs	r3, r3, #18
    3632:	8053      	strh	r3, [r2, #2]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    3634:	0133      	lsls	r3, r6, #4
    3636:	18c3      	adds	r3, r0, r3
    3638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    363a:	4798      	blx	r3
    363c:	e68d      	b.n	335a <USB_Handler+0x1ea>
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    363e:	4b28      	ldr	r3, [pc, #160]	; (36e0 <USB_Handler+0x570>)
    3640:	0172      	lsls	r2, r6, #5
    3642:	189b      	adds	r3, r3, r2
    3644:	89da      	ldrh	r2, [r3, #14]
    3646:	231f      	movs	r3, #31
				pipe_callback_para.pipe_num = pipe_int;
    3648:	4924      	ldr	r1, [pc, #144]	; (36dc <USB_Handler+0x56c>)
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    364a:	4013      	ands	r3, r2
				pipe_callback_para.pipe_error_status =
    364c:	704b      	strb	r3, [r1, #1]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    364e:	0133      	lsls	r3, r6, #4
    3650:	18c3      	adds	r3, r0, r3
				pipe_callback_para.pipe_num = pipe_int;
    3652:	700e      	strb	r6, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    3654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3656:	4798      	blx	r3
    3658:	e669      	b.n	332e <USB_Handler+0x1be>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN &&
    365a:	464a      	mov	r2, r9
    365c:	5dd2      	ldrb	r2, [r2, r7]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.bit.CRCERR) {
    365e:	4820      	ldr	r0, [pc, #128]	; (36e0 <USB_Handler+0x570>)
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN &&
    3660:	0792      	lsls	r2, r2, #30
    3662:	0f92      	lsrs	r2, r2, #30
    3664:	4692      	mov	sl, r2
			if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_ISO &&
    3666:	2a01      	cmp	r2, #1
    3668:	d100      	bne.n	366c <USB_Handler+0x4fc>
    366a:	e0f3      	b.n	3854 <USB_Handler+0x6e4>
    366c:	0172      	lsls	r2, r6, #5
    366e:	e636      	b.n	32de <USB_Handler+0x16e>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN) {
    3670:	5dcb      	ldrb	r3, [r1, r7]
    3672:	079b      	lsls	r3, r3, #30
    3674:	0f9b      	lsrs	r3, r3, #30
			else if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_BULK &&
    3676:	2b01      	cmp	r3, #1
    3678:	d000      	beq.n	367c <USB_Handler+0x50c>
    367a:	e639      	b.n	32f0 <USB_Handler+0x180>
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    367c:	2300      	movs	r3, #0
    367e:	7293      	strb	r3, [r2, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3680:	4663      	mov	r3, ip
    3682:	2204      	movs	r2, #4
    3684:	681b      	ldr	r3, [r3, #0]
    3686:	185b      	adds	r3, r3, r1
    3688:	71da      	strb	r2, [r3, #7]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSSET.reg = USB_HOST_PSTATUS_PFREEZE;
    368a:	4663      	mov	r3, ip
    368c:	681b      	ldr	r3, [r3, #0]
    368e:	1859      	adds	r1, r3, r1
    3690:	2310      	movs	r3, #16
    3692:	714b      	strb	r3, [r1, #5]
    3694:	e635      	b.n	3302 <USB_Handler+0x192>
    3696:	002a      	movs	r2, r5
    3698:	4645      	mov	r5, r8
    369a:	4690      	mov	r8, r2
    369c:	015a      	lsls	r2, r3, #5
    369e:	18ad      	adds	r5, r5, r2
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    36a0:	2208      	movs	r2, #8
    36a2:	2040      	movs	r0, #64	; 0x40
    36a4:	32ff      	adds	r2, #255	; 0xff
    36a6:	5cac      	ldrb	r4, [r5, r2]
    36a8:	464f      	mov	r7, r9
    36aa:	4220      	tst	r0, r4
    36ac:	d100      	bne.n	36b0 <USB_Handler+0x540>
    36ae:	e09a      	b.n	37e6 <USB_Handler+0x676>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    36b0:	54a8      	strb	r0, [r5, r2]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    36b2:	4640      	mov	r0, r8
    36b4:	3a88      	subs	r2, #136	; 0x88
    36b6:	3aff      	subs	r2, #255	; 0xff
    36b8:	4302      	orrs	r2, r0
    36ba:	480b      	ldr	r0, [pc, #44]	; (36e8 <USB_Handler+0x578>)
    36bc:	7182      	strb	r2, [r0, #6]
					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    36be:	2260      	movs	r2, #96	; 0x60
    36c0:	420a      	tst	r2, r1
    36c2:	d100      	bne.n	36c6 <USB_Handler+0x556>
    36c4:	e596      	b.n	31f4 <USB_Handler+0x84>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    36c6:	011b      	lsls	r3, r3, #4
    36c8:	18fb      	adds	r3, r7, r3
    36ca:	33e0      	adds	r3, #224	; 0xe0
    36cc:	681b      	ldr	r3, [r3, #0]
    36ce:	4906      	ldr	r1, [pc, #24]	; (36e8 <USB_Handler+0x578>)
    36d0:	0038      	movs	r0, r7
    36d2:	4798      	blx	r3
    36d4:	e58e      	b.n	31f4 <USB_Handler+0x84>
    36d6:	46c0      	nop			; (mov r8, r8)
    36d8:	20000e38 	.word	0x20000e38
    36dc:	20000e3c 	.word	0x20000e3c
    36e0:	20001498 	.word	0x20001498
    36e4:	f0003fff 	.word	0xf0003fff
    36e8:	20000e30 	.word	0x20000e30
    36ec:	464f      	mov	r7, r9
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    36ee:	9a00      	ldr	r2, [sp, #0]
    36f0:	7010      	strb	r0, [r2, #0]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    36f2:	18fa      	adds	r2, r7, r3
    36f4:	3261      	adds	r2, #97	; 0x61
    36f6:	32ff      	adds	r2, #255	; 0xff
    36f8:	7812      	ldrb	r2, [r2, #0]
    36fa:	4210      	tst	r0, r2
    36fc:	d100      	bne.n	3700 <USB_Handler+0x590>
    36fe:	e579      	b.n	31f4 <USB_Handler+0x84>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    3700:	4a6e      	ldr	r2, [pc, #440]	; (38bc <USB_Handler+0x74c>)
    3702:	0159      	lsls	r1, r3, #5
    3704:	1852      	adds	r2, r2, r1
    3706:	6852      	ldr	r2, [r2, #4]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    3708:	011b      	lsls	r3, r3, #4
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    370a:	496d      	ldr	r1, [pc, #436]	; (38c0 <USB_Handler+0x750>)
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    370c:	18fb      	adds	r3, r7, r3
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    370e:	0492      	lsls	r2, r2, #18
    3710:	0c92      	lsrs	r2, r2, #18
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    3712:	33dc      	adds	r3, #220	; 0xdc
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    3714:	800a      	strh	r2, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    3716:	681b      	ldr	r3, [r3, #0]
    3718:	4648      	mov	r0, r9
    371a:	4798      	blx	r3
    371c:	e56a      	b.n	31f4 <USB_Handler+0x84>
    371e:	002a      	movs	r2, r5
    3720:	4645      	mov	r5, r8
    3722:	4690      	mov	r8, r2
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    3724:	2208      	movs	r2, #8
    3726:	2402      	movs	r4, #2
    3728:	0158      	lsls	r0, r3, #5
    372a:	182d      	adds	r5, r5, r0
    372c:	32ff      	adds	r2, #255	; 0xff
    372e:	5cae      	ldrb	r6, [r5, r2]
    3730:	464f      	mov	r7, r9
    3732:	4234      	tst	r4, r6
    3734:	d061      	beq.n	37fa <USB_Handler+0x68a>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    3736:	54ac      	strb	r4, [r5, r2]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    3738:	4645      	mov	r5, r8
    373a:	3a88      	subs	r2, #136	; 0x88
    373c:	4c60      	ldr	r4, [pc, #384]	; (38c0 <USB_Handler+0x750>)
    373e:	3aff      	subs	r2, #255	; 0xff
    3740:	432a      	orrs	r2, r5
    3742:	71a2      	strb	r2, [r4, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    3744:	4a5d      	ldr	r2, [pc, #372]	; (38bc <USB_Handler+0x74c>)
    3746:	1810      	adds	r0, r2, r0
    3748:	6942      	ldr	r2, [r0, #20]
    374a:	0492      	lsls	r2, r2, #18
    374c:	0c92      	lsrs	r2, r2, #18
    374e:	8062      	strh	r2, [r4, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    3750:	078a      	lsls	r2, r1, #30
    3752:	d100      	bne.n	3756 <USB_Handler+0x5e6>
    3754:	e54e      	b.n	31f4 <USB_Handler+0x84>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    3756:	330d      	adds	r3, #13
    3758:	011b      	lsls	r3, r3, #4
    375a:	18fb      	adds	r3, r7, r3
    375c:	685b      	ldr	r3, [r3, #4]
    375e:	4958      	ldr	r1, [pc, #352]	; (38c0 <USB_Handler+0x750>)
    3760:	0038      	movs	r0, r7
    3762:	4798      	blx	r3
    3764:	e546      	b.n	31f4 <USB_Handler+0x84>
    3766:	003a      	movs	r2, r7
    3768:	0028      	movs	r0, r5
    376a:	464f      	mov	r7, r9
    376c:	4645      	mov	r5, r8
    376e:	4691      	mov	r9, r2
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    3770:	2208      	movs	r2, #8
    3772:	2408      	movs	r4, #8
    3774:	4680      	mov	r8, r0
    3776:	0158      	lsls	r0, r3, #5
    3778:	182d      	adds	r5, r5, r0
    377a:	32ff      	adds	r2, #255	; 0xff
    377c:	5cae      	ldrb	r6, [r5, r2]
    377e:	4234      	tst	r4, r6
    3780:	d04e      	beq.n	3820 <USB_Handler+0x6b0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    3782:	54ac      	strb	r4, [r5, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    3784:	4a4d      	ldr	r2, [pc, #308]	; (38bc <USB_Handler+0x74c>)
    3786:	1810      	adds	r0, r2, r0
    3788:	2202      	movs	r2, #2
    378a:	7e84      	ldrb	r4, [r0, #26]
    378c:	4222      	tst	r2, r4
    378e:	d002      	beq.n	3796 <USB_Handler+0x626>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    3790:	7e84      	ldrb	r4, [r0, #26]
    3792:	4394      	bics	r4, r2
    3794:	7684      	strb	r4, [r0, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    3796:	2280      	movs	r2, #128	; 0x80
    3798:	4640      	mov	r0, r8
    379a:	4252      	negs	r2, r2
    379c:	4302      	orrs	r2, r0
    379e:	4848      	ldr	r0, [pc, #288]	; (38c0 <USB_Handler+0x750>)
    37a0:	7182      	strb	r2, [r0, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    37a2:	6838      	ldr	r0, [r7, #0]
    37a4:	464a      	mov	r2, r9
    37a6:	4684      	mov	ip, r0
    37a8:	0152      	lsls	r2, r2, #5
    37aa:	4462      	add	r2, ip
    37ac:	79d2      	ldrb	r2, [r2, #7]
    37ae:	0792      	lsls	r2, r2, #30
    37b0:	d500      	bpl.n	37b4 <USB_Handler+0x644>
    37b2:	e51f      	b.n	31f4 <USB_Handler+0x84>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    37b4:	220c      	movs	r2, #12
    37b6:	420a      	tst	r2, r1
    37b8:	d100      	bne.n	37bc <USB_Handler+0x64c>
    37ba:	e51b      	b.n	31f4 <USB_Handler+0x84>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    37bc:	011b      	lsls	r3, r3, #4
    37be:	18fb      	adds	r3, r7, r3
    37c0:	33d8      	adds	r3, #216	; 0xd8
    37c2:	681b      	ldr	r3, [r3, #0]
    37c4:	493e      	ldr	r1, [pc, #248]	; (38c0 <USB_Handler+0x750>)
    37c6:	0038      	movs	r0, r7
    37c8:	4798      	blx	r3
    37ca:	e513      	b.n	31f4 <USB_Handler+0x84>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    37cc:	6853      	ldr	r3, [r2, #4]
    37ce:	049b      	lsls	r3, r3, #18
    37d0:	0c9b      	lsrs	r3, r3, #18
    37d2:	804b      	strh	r3, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    37d4:	6853      	ldr	r3, [r2, #4]
    37d6:	011b      	lsls	r3, r3, #4
    37d8:	0c9b      	lsrs	r3, r3, #18
    37da:	808b      	strh	r3, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    37dc:	6853      	ldr	r3, [r2, #4]
    37de:	0b9b      	lsrs	r3, r3, #14
    37e0:	039b      	lsls	r3, r3, #14
    37e2:	6053      	str	r3, [r2, #4]
    37e4:	e6ff      	b.n	35e6 <USB_Handler+0x476>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    37e6:	2020      	movs	r0, #32
    37e8:	5cac      	ldrb	r4, [r5, r2]
    37ea:	4220      	tst	r0, r4
    37ec:	d100      	bne.n	37f0 <USB_Handler+0x680>
    37ee:	e766      	b.n	36be <USB_Handler+0x54e>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    37f0:	54a8      	strb	r0, [r5, r2]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    37f2:	4640      	mov	r0, r8
    37f4:	4a32      	ldr	r2, [pc, #200]	; (38c0 <USB_Handler+0x750>)
    37f6:	7190      	strb	r0, [r2, #6]
    37f8:	e761      	b.n	36be <USB_Handler+0x54e>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    37fa:	5cac      	ldrb	r4, [r5, r2]
    37fc:	07e4      	lsls	r4, r4, #31
    37fe:	d5a7      	bpl.n	3750 <USB_Handler+0x5e0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    3800:	4664      	mov	r4, ip
    3802:	54ac      	strb	r4, [r5, r2]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    3804:	4642      	mov	r2, r8
    3806:	4c2e      	ldr	r4, [pc, #184]	; (38c0 <USB_Handler+0x750>)
    3808:	71a2      	strb	r2, [r4, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    380a:	4a2c      	ldr	r2, [pc, #176]	; (38bc <USB_Handler+0x74c>)
    380c:	1810      	adds	r0, r2, r0
    380e:	6842      	ldr	r2, [r0, #4]
    3810:	0492      	lsls	r2, r2, #18
    3812:	0c92      	lsrs	r2, r2, #18
    3814:	8022      	strh	r2, [r4, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    3816:	6842      	ldr	r2, [r0, #4]
    3818:	0112      	lsls	r2, r2, #4
    381a:	0c92      	lsrs	r2, r2, #18
    381c:	80a2      	strh	r2, [r4, #4]
    381e:	e797      	b.n	3750 <USB_Handler+0x5e0>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    3820:	2404      	movs	r4, #4
    3822:	5cae      	ldrb	r6, [r5, r2]
    3824:	4234      	tst	r4, r6
    3826:	d0c5      	beq.n	37b4 <USB_Handler+0x644>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    3828:	54ac      	strb	r4, [r5, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    382a:	4a24      	ldr	r2, [pc, #144]	; (38bc <USB_Handler+0x74c>)
    382c:	3c02      	subs	r4, #2
    382e:	1810      	adds	r0, r2, r0
    3830:	7a82      	ldrb	r2, [r0, #10]
    3832:	4214      	tst	r4, r2
    3834:	d002      	beq.n	383c <USB_Handler+0x6cc>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    3836:	7a82      	ldrb	r2, [r0, #10]
    3838:	43a2      	bics	r2, r4
    383a:	7282      	strb	r2, [r0, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    383c:	4640      	mov	r0, r8
    383e:	4a20      	ldr	r2, [pc, #128]	; (38c0 <USB_Handler+0x750>)
    3840:	7190      	strb	r0, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    3842:	6838      	ldr	r0, [r7, #0]
    3844:	464a      	mov	r2, r9
    3846:	4684      	mov	ip, r0
    3848:	0152      	lsls	r2, r2, #5
    384a:	4462      	add	r2, ip
    384c:	79d2      	ldrb	r2, [r2, #7]
    384e:	07d2      	lsls	r2, r2, #31
    3850:	d5b0      	bpl.n	37b4 <USB_Handler+0x644>
    3852:	e4cf      	b.n	31f4 <USB_Handler+0x84>
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.bit.CRCERR) {
    3854:	0172      	lsls	r2, r6, #5
    3856:	1881      	adds	r1, r0, r2
    3858:	000b      	movs	r3, r1
    385a:	2108      	movs	r1, #8
    385c:	469b      	mov	fp, r3
    385e:	9301      	str	r3, [sp, #4]
    3860:	4459      	add	r1, fp
    3862:	7889      	ldrb	r1, [r1, #2]
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN &&
    3864:	07c9      	lsls	r1, r1, #31
    3866:	d400      	bmi.n	386a <USB_Handler+0x6fa>
    3868:	e539      	b.n	32de <USB_Handler+0x16e>
				host_pipe_job_busy_status &= ~(1 << pipe_int);
    386a:	4652      	mov	r2, sl
    386c:	40b2      	lsls	r2, r6
    386e:	4815      	ldr	r0, [pc, #84]	; (38c4 <USB_Handler+0x754>)
    3870:	6801      	ldr	r1, [r0, #0]
    3872:	4391      	bics	r1, r2
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    3874:	2200      	movs	r2, #0
    3876:	729a      	strb	r2, [r3, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3878:	4663      	mov	r3, ip
				host_pipe_job_busy_status &= ~(1 << pipe_int);
    387a:	6001      	str	r1, [r0, #0]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    387c:	681b      	ldr	r3, [r3, #0]
    387e:	444b      	add	r3, r9
    3880:	001a      	movs	r2, r3
    3882:	2304      	movs	r3, #4
    3884:	71d3      	strb	r3, [r2, #7]
				if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3886:	4663      	mov	r3, ip
    3888:	199a      	adds	r2, r3, r6
    388a:	32ae      	adds	r2, #174	; 0xae
    388c:	7812      	ldrb	r2, [r2, #0]
    388e:	9b00      	ldr	r3, [sp, #0]
    3890:	4213      	tst	r3, r2
    3892:	d100      	bne.n	3896 <USB_Handler+0x726>
    3894:	e535      	b.n	3302 <USB_Handler+0x192>
					pipe_callback_para.pipe_error_status = USB_STATUS_PIPE_CRC16ER;
    3896:	2310      	movs	r3, #16
					pipe_callback_para.pipe_num = pipe_int;
    3898:	490b      	ldr	r1, [pc, #44]	; (38c8 <USB_Handler+0x758>)
							[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    389a:	4660      	mov	r0, ip
					pipe_callback_para.pipe_error_status = USB_STATUS_PIPE_CRC16ER;
    389c:	704b      	strb	r3, [r1, #1]
							[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    389e:	0133      	lsls	r3, r6, #4
    38a0:	4463      	add	r3, ip
					pipe_callback_para.pipe_num = pipe_int;
    38a2:	700e      	strb	r6, [r1, #0]
							[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    38a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    38a6:	4798      	blx	r3
    38a8:	e52b      	b.n	3302 <USB_Handler+0x192>
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    38aa:	465b      	mov	r3, fp
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    38ac:	4652      	mov	r2, sl
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    38ae:	891b      	ldrh	r3, [r3, #8]
					device_callback_lpm_wakeup_enable =
    38b0:	4906      	ldr	r1, [pc, #24]	; (38cc <USB_Handler+0x75c>)
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    38b2:	091b      	lsrs	r3, r3, #4
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    38b4:	4013      	ands	r3, r2
    38b6:	600b      	str	r3, [r1, #0]
    38b8:	e492      	b.n	31e0 <USB_Handler+0x70>
    38ba:	46c0      	nop			; (mov r8, r8)
    38bc:	20001498 	.word	0x20001498
    38c0:	20000e30 	.word	0x20000e30
    38c4:	20000e38 	.word	0x20000e38
    38c8:	20000e3c 	.word	0x20000e3c
    38cc:	20000e2c 	.word	0x20000e2c

000038d0 <usb_get_config_defaults>:
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    38d0:	2300      	movs	r3, #0
	module_config->run_in_standby = 1;
	module_config->source_generator = GCLK_GENERATOR_3;
    38d2:	2203      	movs	r2, #3
	module_config->select_host_mode = 0;
    38d4:	7003      	strb	r3, [r0, #0]
	module_config->run_in_standby = 1;
    38d6:	3301      	adds	r3, #1
    38d8:	7043      	strb	r3, [r0, #1]
	module_config->source_generator = GCLK_GENERATOR_3;
    38da:	7082      	strb	r2, [r0, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    38dc:	70c3      	strb	r3, [r0, #3]
}
    38de:	4770      	bx	lr

000038e0 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    38e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAML22
	host_pipe_job_busy_status = 0;
    38e2:	2300      	movs	r3, #0
{
    38e4:	46ce      	mov	lr, r9
    38e6:	4647      	mov	r7, r8
    38e8:	0004      	movs	r4, r0
    38ea:	0016      	movs	r6, r2
	host_pipe_job_busy_status = 0;
    38ec:	4a90      	ldr	r2, [pc, #576]	; (3b30 <usb_init+0x250>)
{
    38ee:	b580      	push	{r7, lr}
    38f0:	000d      	movs	r5, r1
	host_pipe_job_busy_status = 0;
    38f2:	6013      	str	r3, [r2, #0]
#endif

	_usb_instances = module_inst;

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    38f4:	6021      	str	r1, [r4, #0]
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
    38f6:	2101      	movs	r1, #1
	_usb_instances = module_inst;
    38f8:	4a8e      	ldr	r2, [pc, #568]	; (3b34 <usb_init+0x254>)
{
    38fa:	b083      	sub	sp, #12
	_usb_instances = module_inst;
    38fc:	6010      	str	r0, [r2, #0]
    38fe:	488e      	ldr	r0, [pc, #568]	; (3b38 <usb_init+0x258>)
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3900:	af01      	add	r7, sp, #4
    3902:	6982      	ldr	r2, [r0, #24]
    3904:	430a      	orrs	r2, r1
    3906:	6182      	str	r2, [r0, #24]
    3908:	707b      	strb	r3, [r7, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    390a:	70fb      	strb	r3, [r7, #3]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_USB);

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = MUX_PA24G_USB_DM;
    390c:	3306      	adds	r3, #6
    390e:	4699      	mov	r9, r3
    3910:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    3912:	4b8a      	ldr	r3, [pc, #552]	; (3b3c <usb_init+0x25c>)
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3914:	70b9      	strb	r1, [r7, #2]
    3916:	2018      	movs	r0, #24
    3918:	0039      	movs	r1, r7
    391a:	4698      	mov	r8, r3
    391c:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    391e:	464b      	mov	r3, r9
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    3920:	0039      	movs	r1, r7
    3922:	2019      	movs	r0, #25
	pin_config.mux_position = MUX_PA25G_USB_DP;
    3924:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    3926:	47c0      	blx	r8

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = module_config->source_generator;
    3928:	466a      	mov	r2, sp
    392a:	78b3      	ldrb	r3, [r6, #2]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    392c:	4669      	mov	r1, sp
	gclk_chan_config.source_generator = module_config->source_generator;
    392e:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    3930:	2004      	movs	r0, #4
    3932:	4b83      	ldr	r3, [pc, #524]	; (3b40 <usb_init+0x260>)
    3934:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    3936:	4b83      	ldr	r3, [pc, #524]	; (3b44 <usb_init+0x264>)
    3938:	2004      	movs	r0, #4
    393a:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    393c:	2201      	movs	r2, #1
    393e:	782b      	ldrb	r3, [r5, #0]
    3940:	4313      	orrs	r3, r2
    3942:	702b      	strb	r3, [r5, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    3944:	78ab      	ldrb	r3, [r5, #2]
    3946:	07db      	lsls	r3, r3, #31
    3948:	d4fc      	bmi.n	3944 <usb_init+0x64>
		/* Sync wait */
	}

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    394a:	4b7f      	ldr	r3, [pc, #508]	; (3b48 <usb_init+0x268>)
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    394c:	681b      	ldr	r3, [r3, #0]
    394e:	0b5b      	lsrs	r3, r3, #13
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    3950:	43da      	mvns	r2, r3
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    3952:	06d2      	lsls	r2, r2, #27
    3954:	d100      	bne.n	3958 <usb_init+0x78>
    3956:	e0e9      	b.n	3b2c <usb_init+0x24c>
    3958:	211f      	movs	r1, #31
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    395a:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    395c:	487b      	ldr	r0, [pc, #492]	; (3b4c <usb_init+0x26c>)
    395e:	400b      	ands	r3, r1
    3960:	019b      	lsls	r3, r3, #6
    3962:	4002      	ands	r2, r0
    3964:	4313      	orrs	r3, r2
    3966:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    3968:	4b77      	ldr	r3, [pc, #476]	; (3b48 <usb_init+0x268>)
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    396a:	681b      	ldr	r3, [r3, #0]
    396c:	0c9b      	lsrs	r3, r3, #18
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    396e:	4019      	ands	r1, r3
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    3970:	291f      	cmp	r1, #31
    3972:	d100      	bne.n	3976 <usb_init+0x96>
    3974:	e0d8      	b.n	3b28 <usb_init+0x248>
    3976:	211f      	movs	r1, #31
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    3978:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    397a:	400b      	ands	r3, r1
    397c:	438a      	bics	r2, r1
    397e:	4313      	orrs	r3, r2
    3980:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    3982:	4b71      	ldr	r3, [pc, #452]	; (3b48 <usb_init+0x268>)
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    3984:	6819      	ldr	r1, [r3, #0]
    3986:	0dc9      	lsrs	r1, r1, #23
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    3988:	43cb      	mvns	r3, r1
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    398a:	075b      	lsls	r3, r3, #29
    398c:	d100      	bne.n	3990 <usb_init+0xb0>
    398e:	e0c9      	b.n	3b24 <usb_init+0x244>
		pad_trim = 3;
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    3990:	2207      	movs	r2, #7
    3992:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    3994:	400a      	ands	r2, r1
    3996:	496e      	ldr	r1, [pc, #440]	; (3b50 <usb_init+0x270>)
    3998:	0312      	lsls	r2, r2, #12
    399a:	400b      	ands	r3, r1
    399c:	4313      	orrs	r3, r2
    399e:	852b      	strh	r3, [r5, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    39a0:	237f      	movs	r3, #127	; 0x7f
    39a2:	7829      	ldrb	r1, [r5, #0]
    39a4:	7832      	ldrb	r2, [r6, #0]
    39a6:	400b      	ands	r3, r1
    39a8:	01d2      	lsls	r2, r2, #7
    39aa:	4313      	orrs	r3, r2
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    39ac:	2201      	movs	r2, #1
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    39ae:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    39b0:	7871      	ldrb	r1, [r6, #1]
    39b2:	782b      	ldrb	r3, [r5, #0]
    39b4:	400a      	ands	r2, r1
    39b6:	2104      	movs	r1, #4
    39b8:	0092      	lsls	r2, r2, #2
    39ba:	438b      	bics	r3, r1
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    39bc:	4865      	ldr	r0, [pc, #404]	; (3b54 <usb_init+0x274>)
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    39be:	4313      	orrs	r3, r2
    39c0:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    39c2:	6268      	str	r0, [r5, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    39c4:	78f3      	ldrb	r3, [r6, #3]
    39c6:	2b01      	cmp	r3, #1
    39c8:	d100      	bne.n	39cc <usb_init+0xec>
    39ca:	e0a5      	b.n	3b18 <usb_init+0x238>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    39cc:	2b00      	cmp	r3, #0
    39ce:	d106      	bne.n	39de <usb_init+0xfe>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    39d0:	210c      	movs	r1, #12
    39d2:	6822      	ldr	r2, [r4, #0]
    39d4:	8913      	ldrh	r3, [r2, #8]
    39d6:	438b      	bics	r3, r1
    39d8:	2104      	movs	r1, #4
    39da:	430b      	orrs	r3, r1
    39dc:	8113      	strh	r3, [r2, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    39de:	2780      	movs	r7, #128	; 0x80
    39e0:	007f      	lsls	r7, r7, #1
    39e2:	4e5d      	ldr	r6, [pc, #372]	; (3b58 <usb_init+0x278>)
    39e4:	003a      	movs	r2, r7
    39e6:	2100      	movs	r1, #0
    39e8:	47b0      	blx	r6
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAML22
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
    39ea:	1d20      	adds	r0, r4, #4
    39ec:	2220      	movs	r2, #32
    39ee:	2100      	movs	r1, #0
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
    39f0:	2500      	movs	r5, #0
    39f2:	47b0      	blx	r6
    39f4:	2380      	movs	r3, #128	; 0x80
		}
	};
	module_inst->host_registered_callback_mask = 0;
	module_inst->host_enabled_callback_mask = 0;
	for (i = 0; i < USB_PIPE_NUM; i++) {
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    39f6:	0020      	movs	r0, r4
			module_inst->host_pipe_callback[i][j] = NULL;
    39f8:	6265      	str	r5, [r4, #36]	; 0x24
    39fa:	62a5      	str	r5, [r4, #40]	; 0x28
    39fc:	62e5      	str	r5, [r4, #44]	; 0x2c
    39fe:	6325      	str	r5, [r4, #48]	; 0x30
    3a00:	6365      	str	r5, [r4, #52]	; 0x34
    3a02:	63a5      	str	r5, [r4, #56]	; 0x38
    3a04:	63e5      	str	r5, [r4, #60]	; 0x3c
    3a06:	6425      	str	r5, [r4, #64]	; 0x40
    3a08:	6465      	str	r5, [r4, #68]	; 0x44
    3a0a:	64a5      	str	r5, [r4, #72]	; 0x48
    3a0c:	64e5      	str	r5, [r4, #76]	; 0x4c
    3a0e:	6525      	str	r5, [r4, #80]	; 0x50
    3a10:	6565      	str	r5, [r4, #84]	; 0x54
    3a12:	65a5      	str	r5, [r4, #88]	; 0x58
    3a14:	65e5      	str	r5, [r4, #92]	; 0x5c
    3a16:	6625      	str	r5, [r4, #96]	; 0x60
    3a18:	6665      	str	r5, [r4, #100]	; 0x64
    3a1a:	66a5      	str	r5, [r4, #104]	; 0x68
    3a1c:	66e5      	str	r5, [r4, #108]	; 0x6c
    3a1e:	6725      	str	r5, [r4, #112]	; 0x70
    3a20:	6765      	str	r5, [r4, #116]	; 0x74
    3a22:	67a5      	str	r5, [r4, #120]	; 0x78
    3a24:	67e5      	str	r5, [r4, #124]	; 0x7c
    3a26:	50e5      	str	r5, [r4, r3]
    3a28:	3304      	adds	r3, #4
    3a2a:	50e5      	str	r5, [r4, r3]
    3a2c:	3304      	adds	r3, #4
    3a2e:	50e5      	str	r5, [r4, r3]
    3a30:	3304      	adds	r3, #4
    3a32:	50e5      	str	r5, [r4, r3]
    3a34:	3304      	adds	r3, #4
    3a36:	50e5      	str	r5, [r4, r3]
    3a38:	3304      	adds	r3, #4
    3a3a:	50e5      	str	r5, [r4, r3]
    3a3c:	3304      	adds	r3, #4
    3a3e:	50e5      	str	r5, [r4, r3]
    3a40:	3304      	adds	r3, #4
    3a42:	50e5      	str	r5, [r4, r3]
    3a44:	3304      	adds	r3, #4
    3a46:	50e5      	str	r5, [r4, r3]
	module_inst->host_registered_callback_mask = 0;
    3a48:	3304      	adds	r3, #4
    3a4a:	54e5      	strb	r5, [r4, r3]
	module_inst->host_enabled_callback_mask = 0;
    3a4c:	3301      	adds	r3, #1
    3a4e:	54e5      	strb	r5, [r4, r3]
    3a50:	2208      	movs	r2, #8
    3a52:	2100      	movs	r1, #0
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    3a54:	30a6      	adds	r0, #166	; 0xa6
    3a56:	47b0      	blx	r6
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    3a58:	0020      	movs	r0, r4
    3a5a:	2208      	movs	r2, #8
    3a5c:	2100      	movs	r1, #0
    3a5e:	30ae      	adds	r0, #174	; 0xae
    3a60:	47b0      	blx	r6
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
    3a62:	0020      	movs	r0, r4
    3a64:	221c      	movs	r2, #28
    3a66:	2100      	movs	r1, #0
    3a68:	30b8      	adds	r0, #184	; 0xb8
    3a6a:	47b0      	blx	r6
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
    3a6c:	23d4      	movs	r3, #212	; 0xd4
		}
	}
	module_inst->device_registered_callback_mask = 0;
	module_inst->device_enabled_callback_mask = 0;
	for (j = 0; j < USB_EPT_NUM; j++) {
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    3a6e:	0020      	movs	r0, r4
			module_inst->device_endpoint_callback[i][j] = NULL;
    3a70:	50e5      	str	r5, [r4, r3]
    3a72:	3304      	adds	r3, #4
    3a74:	50e5      	str	r5, [r4, r3]
    3a76:	3304      	adds	r3, #4
    3a78:	50e5      	str	r5, [r4, r3]
    3a7a:	3304      	adds	r3, #4
    3a7c:	50e5      	str	r5, [r4, r3]
    3a7e:	3304      	adds	r3, #4
    3a80:	50e5      	str	r5, [r4, r3]
    3a82:	3304      	adds	r3, #4
    3a84:	50e5      	str	r5, [r4, r3]
    3a86:	3304      	adds	r3, #4
    3a88:	50e5      	str	r5, [r4, r3]
    3a8a:	3304      	adds	r3, #4
    3a8c:	50e5      	str	r5, [r4, r3]
    3a8e:	3304      	adds	r3, #4
    3a90:	50e5      	str	r5, [r4, r3]
    3a92:	3304      	adds	r3, #4
    3a94:	50e5      	str	r5, [r4, r3]
    3a96:	3304      	adds	r3, #4
    3a98:	50e5      	str	r5, [r4, r3]
    3a9a:	3308      	adds	r3, #8
    3a9c:	51e5      	str	r5, [r4, r7]
    3a9e:	50e5      	str	r5, [r4, r3]
    3aa0:	3304      	adds	r3, #4
    3aa2:	50e5      	str	r5, [r4, r3]
    3aa4:	3304      	adds	r3, #4
    3aa6:	50e5      	str	r5, [r4, r3]
    3aa8:	3304      	adds	r3, #4
    3aaa:	50e5      	str	r5, [r4, r3]
    3aac:	3304      	adds	r3, #4
    3aae:	50e5      	str	r5, [r4, r3]
    3ab0:	3304      	adds	r3, #4
    3ab2:	50e5      	str	r5, [r4, r3]
    3ab4:	3304      	adds	r3, #4
    3ab6:	50e5      	str	r5, [r4, r3]
    3ab8:	3304      	adds	r3, #4
    3aba:	50e5      	str	r5, [r4, r3]
    3abc:	3304      	adds	r3, #4
    3abe:	50e5      	str	r5, [r4, r3]
    3ac0:	3304      	adds	r3, #4
    3ac2:	50e5      	str	r5, [r4, r3]
    3ac4:	3304      	adds	r3, #4
    3ac6:	50e5      	str	r5, [r4, r3]
    3ac8:	3304      	adds	r3, #4
    3aca:	50e5      	str	r5, [r4, r3]
    3acc:	3304      	adds	r3, #4
    3ace:	50e5      	str	r5, [r4, r3]
    3ad0:	3304      	adds	r3, #4
    3ad2:	50e5      	str	r5, [r4, r3]
    3ad4:	3304      	adds	r3, #4
    3ad6:	50e5      	str	r5, [r4, r3]
    3ad8:	3304      	adds	r3, #4
    3ada:	50e5      	str	r5, [r4, r3]
    3adc:	3304      	adds	r3, #4
    3ade:	50e5      	str	r5, [r4, r3]
    3ae0:	3304      	adds	r3, #4
    3ae2:	50e5      	str	r5, [r4, r3]
    3ae4:	3304      	adds	r3, #4
    3ae6:	50e5      	str	r5, [r4, r3]
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    3ae8:	3059      	adds	r0, #89	; 0x59
			module_inst->device_endpoint_callback[i][j] = NULL;
    3aea:	3304      	adds	r3, #4
    3aec:	50e5      	str	r5, [r4, r3]
    3aee:	2208      	movs	r2, #8
	module_inst->device_registered_callback_mask = 0;
    3af0:	3304      	adds	r3, #4
    3af2:	2100      	movs	r1, #0
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    3af4:	30ff      	adds	r0, #255	; 0xff
	module_inst->device_registered_callback_mask = 0;
    3af6:	50e5      	str	r5, [r4, r3]
    3af8:	47b0      	blx	r6
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    3afa:	0020      	movs	r0, r4
    3afc:	3061      	adds	r0, #97	; 0x61
    3afe:	2208      	movs	r2, #8
    3b00:	2100      	movs	r1, #0
    3b02:	30ff      	adds	r0, #255	; 0xff
    3b04:	47b0      	blx	r6
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3b06:	2240      	movs	r2, #64	; 0x40

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);

	return STATUS_OK;
}
    3b08:	2000      	movs	r0, #0
    3b0a:	4b14      	ldr	r3, [pc, #80]	; (3b5c <usb_init+0x27c>)
    3b0c:	601a      	str	r2, [r3, #0]
    3b0e:	b003      	add	sp, #12
    3b10:	bc0c      	pop	{r2, r3}
    3b12:	4690      	mov	r8, r2
    3b14:	4699      	mov	r9, r3
    3b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    3b18:	6822      	ldr	r2, [r4, #0]
    3b1a:	3108      	adds	r1, #8
    3b1c:	8913      	ldrh	r3, [r2, #8]
    3b1e:	438b      	bics	r3, r1
    3b20:	8113      	strh	r3, [r2, #8]
    3b22:	e75c      	b.n	39de <usb_init+0xfe>
	if (pad_trim == 0x7) {
    3b24:	2103      	movs	r1, #3
    3b26:	e733      	b.n	3990 <usb_init+0xb0>
	if (pad_transp == 0x1F) {
    3b28:	231d      	movs	r3, #29
    3b2a:	e724      	b.n	3976 <usb_init+0x96>
	if (pad_transn == 0x1F) {
    3b2c:	2305      	movs	r3, #5
    3b2e:	e713      	b.n	3958 <usb_init+0x78>
    3b30:	20000e38 	.word	0x20000e38
    3b34:	20000e28 	.word	0x20000e28
    3b38:	40000400 	.word	0x40000400
    3b3c:	00015961 	.word	0x00015961
    3b40:	00015865 	.word	0x00015865
    3b44:	000158a5 	.word	0x000158a5
    3b48:	0080601c 	.word	0x0080601c
    3b4c:	fffff83f 	.word	0xfffff83f
    3b50:	ffff8fff 	.word	0xffff8fff
    3b54:	20001498 	.word	0x20001498
    3b58:	0001f06d 	.word	0x0001f06d
    3b5c:	e000e100 	.word	0xe000e100

00003b60 <wdt_set_config>:
			MCLK->APBAMASK.reg |= mask;
    3b60:	2180      	movs	r1, #128	; 0x80
 * \retval STATUS_ERR_IO  If the Watchdog module is locked to be always on
 */
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
enum status_code wdt_set_config(
		const struct wdt_conf *const config)
{
    3b62:	b510      	push	{r4, lr}
    3b64:	4a29      	ldr	r2, [pc, #164]	; (3c0c <wdt_set_config+0xac>)
    3b66:	6953      	ldr	r3, [r2, #20]
    3b68:	430b      	orrs	r3, r1
static inline bool wdt_is_locked(void)
{
	Wdt *const WDT_module = WDT;

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	return (WDT_module->CTRLA.reg & WDT_CTRLA_ALWAYSON);
    3b6a:	4929      	ldr	r1, [pc, #164]	; (3c10 <wdt_set_config+0xb0>)
    3b6c:	6153      	str	r3, [r2, #20]
    3b6e:	780b      	ldrb	r3, [r1, #0]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_WDT);

	/* Check of the Watchdog has been locked to be always on, if so, abort */
	if (wdt_is_locked()) {
		return STATUS_ERR_IO;
    3b70:	2210      	movs	r2, #16
	if (wdt_is_locked()) {
    3b72:	b25b      	sxtb	r3, r3
    3b74:	2b00      	cmp	r3, #0
    3b76:	db03      	blt.n	3b80 <wdt_set_config+0x20>
	}

	/* Check for an invalid timeout period, abort if found */
	if (config->timeout_period == WDT_PERIOD_NONE) {
    3b78:	7883      	ldrb	r3, [r0, #2]
		return STATUS_ERR_INVALID_ARG;
    3b7a:	3207      	adds	r2, #7
	if (config->timeout_period == WDT_PERIOD_NONE) {
    3b7c:	2b00      	cmp	r3, #0
    3b7e:	d101      	bne.n	3b84 <wdt_set_config+0x24>
	while (wdt_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}

	return STATUS_OK;
}
    3b80:	0010      	movs	r0, r2
    3b82:	bd10      	pop	{r4, pc}
	if ((config->timeout_period < config->window_period) ||
    3b84:	78c4      	ldrb	r4, [r0, #3]
    3b86:	429c      	cmp	r4, r3
    3b88:	d8fa      	bhi.n	3b80 <wdt_set_config+0x20>
    3b8a:	7904      	ldrb	r4, [r0, #4]
    3b8c:	429c      	cmp	r4, r3
    3b8e:	d8f7      	bhi.n	3b80 <wdt_set_config+0x20>
	WDT_module->CTRLA.reg &= ~WDT_CTRLA_ENABLE;
    3b90:	780b      	ldrb	r3, [r1, #0]
    3b92:	3a15      	subs	r2, #21
    3b94:	4393      	bics	r3, r2
    3b96:	700b      	strb	r3, [r1, #0]
	if (WDT_module->SYNCBUSY.reg) {
    3b98:	688b      	ldr	r3, [r1, #8]
    3b9a:	2b00      	cmp	r3, #0
    3b9c:	d1fc      	bne.n	3b98 <wdt_set_config+0x38>
	if(config->enable == false) {
    3b9e:	7843      	ldrb	r3, [r0, #1]
    3ba0:	2b00      	cmp	r3, #0
    3ba2:	d101      	bne.n	3ba8 <wdt_set_config+0x48>
		return STATUS_OK;
    3ba4:	2200      	movs	r2, #0
    3ba6:	e7eb      	b.n	3b80 <wdt_set_config+0x20>
	new_config |= (config->timeout_period - 1) << WDT_CONFIG_PER_Pos;
    3ba8:	7883      	ldrb	r3, [r0, #2]
	if (config->window_period != WDT_PERIOD_NONE) {
    3baa:	78c2      	ldrb	r2, [r0, #3]
	new_config |= (config->timeout_period - 1) << WDT_CONFIG_PER_Pos;
    3bac:	3b01      	subs	r3, #1
	if (config->window_period != WDT_PERIOD_NONE) {
    3bae:	2a00      	cmp	r2, #0
    3bb0:	d026      	beq.n	3c00 <wdt_set_config+0xa0>
		WDT_module->CTRLA.reg |= WDT_CTRLA_WEN;
    3bb2:	2204      	movs	r2, #4
    3bb4:	780c      	ldrb	r4, [r1, #0]
    3bb6:	4322      	orrs	r2, r4
    3bb8:	700a      	strb	r2, [r1, #0]
		new_config |= (config->window_period - 1) << WDT_CONFIG_WINDOW_Pos;
    3bba:	78c2      	ldrb	r2, [r0, #3]
    3bbc:	3a01      	subs	r2, #1
    3bbe:	0112      	lsls	r2, r2, #4
    3bc0:	4313      	orrs	r3, r2
    3bc2:	4a13      	ldr	r2, [pc, #76]	; (3c10 <wdt_set_config+0xb0>)
    3bc4:	6891      	ldr	r1, [r2, #8]
    3bc6:	2900      	cmp	r1, #0
    3bc8:	d1fc      	bne.n	3bc4 <wdt_set_config+0x64>
	WDT_module->CONFIG.reg = new_config;
    3bca:	b2db      	uxtb	r3, r3
    3bcc:	7053      	strb	r3, [r2, #1]
	if (config->early_warning_period != WDT_PERIOD_NONE) {
    3bce:	7903      	ldrb	r3, [r0, #4]
    3bd0:	2b00      	cmp	r3, #0
    3bd2:	d002      	beq.n	3bda <wdt_set_config+0x7a>
			= (config->early_warning_period - 1) << WDT_EWCTRL_EWOFFSET_Pos;
    3bd4:	3b01      	subs	r3, #1
    3bd6:	b2db      	uxtb	r3, r3
    3bd8:	7093      	strb	r3, [r2, #2]
	if (config->always_on) {
    3bda:	7803      	ldrb	r3, [r0, #0]
		WDT_module->CTRLA.reg |= WDT_CTRLA_ALWAYSON;
    3bdc:	4a0c      	ldr	r2, [pc, #48]	; (3c10 <wdt_set_config+0xb0>)
	if (config->always_on) {
    3bde:	2b00      	cmp	r3, #0
    3be0:	d009      	beq.n	3bf6 <wdt_set_config+0x96>
		WDT_module->CTRLA.reg |= WDT_CTRLA_ALWAYSON;
    3be2:	2180      	movs	r1, #128	; 0x80
    3be4:	7813      	ldrb	r3, [r2, #0]
    3be6:	430b      	orrs	r3, r1
    3be8:	7013      	strb	r3, [r2, #0]
    3bea:	4b09      	ldr	r3, [pc, #36]	; (3c10 <wdt_set_config+0xb0>)
    3bec:	689a      	ldr	r2, [r3, #8]
    3bee:	2a00      	cmp	r2, #0
    3bf0:	d1fc      	bne.n	3bec <wdt_set_config+0x8c>
		return STATUS_OK;
    3bf2:	2200      	movs	r2, #0
    3bf4:	e7c4      	b.n	3b80 <wdt_set_config+0x20>
		WDT_module->CTRLA.reg |= WDT_CTRLA_ENABLE;
    3bf6:	2302      	movs	r3, #2
    3bf8:	7811      	ldrb	r1, [r2, #0]
    3bfa:	430b      	orrs	r3, r1
    3bfc:	7013      	strb	r3, [r2, #0]
    3bfe:	e7f4      	b.n	3bea <wdt_set_config+0x8a>
		WDT_module->CTRLA.reg &= ~WDT_CTRLA_WEN;
    3c00:	2404      	movs	r4, #4
    3c02:	780a      	ldrb	r2, [r1, #0]
    3c04:	43a2      	bics	r2, r4
    3c06:	700a      	strb	r2, [r1, #0]
    3c08:	e7db      	b.n	3bc2 <wdt_set_config+0x62>
    3c0a:	46c0      	nop			; (mov r8, r8)
    3c0c:	40000400 	.word	0x40000400
    3c10:	40001c00 	.word	0x40001c00

00003c14 <wdt_reset_count>:
void wdt_reset_count(void)
{
	Wdt *const WDT_module = WDT;

	/* Disable the Watchdog module */
	WDT_module->CLEAR.reg = WDT_CLEAR_CLEAR_KEY;
    3c14:	22a5      	movs	r2, #165	; 0xa5
    3c16:	4b03      	ldr	r3, [pc, #12]	; (3c24 <wdt_reset_count+0x10>)
    3c18:	731a      	strb	r2, [r3, #12]
    3c1a:	689a      	ldr	r2, [r3, #8]
    3c1c:	2a00      	cmp	r2, #0
    3c1e:	d1fc      	bne.n	3c1a <wdt_reset_count+0x6>

	while (wdt_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    3c20:	4770      	bx	lr
    3c22:	46c0      	nop			; (mov r8, r8)
    3c24:	40001c00 	.word	0x40001c00

00003c28 <WDT_Handler>:
 */
static inline void wdt_clear_early_warning(void)
{
	Wdt *const WDT_module = WDT;

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
    3c28:	2201      	movs	r2, #1
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
    3c2a:	b510      	push	{r4, lr}
    3c2c:	4b03      	ldr	r3, [pc, #12]	; (3c3c <WDT_Handler+0x14>)
    3c2e:	719a      	strb	r2, [r3, #6]
	wdt_clear_early_warning();

	if (wdt_early_warning_callback) {
    3c30:	4b03      	ldr	r3, [pc, #12]	; (3c40 <WDT_Handler+0x18>)
    3c32:	681b      	ldr	r3, [r3, #0]
    3c34:	2b00      	cmp	r3, #0
    3c36:	d000      	beq.n	3c3a <WDT_Handler+0x12>
		wdt_early_warning_callback();
    3c38:	4798      	blx	r3
	}
}
    3c3a:	bd10      	pop	{r4, pc}
    3c3c:	40001c00 	.word	0x40001c00
    3c40:	20001598 	.word	0x20001598

00003c44 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    3c44:	e7fe      	b.n	3c44 <Dummy_Handler>
    3c46:	46c0      	nop			; (mov r8, r8)

00003c48 <Reset_Handler>:
        if (pSrc != pDest) {
    3c48:	4914      	ldr	r1, [pc, #80]	; (3c9c <Reset_Handler+0x54>)
    3c4a:	4815      	ldr	r0, [pc, #84]	; (3ca0 <Reset_Handler+0x58>)
{
    3c4c:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    3c4e:	4281      	cmp	r1, r0
    3c50:	d009      	beq.n	3c66 <Reset_Handler+0x1e>
                for (; pDest < &_erelocate;) {
    3c52:	4b14      	ldr	r3, [pc, #80]	; (3ca4 <Reset_Handler+0x5c>)
    3c54:	4298      	cmp	r0, r3
    3c56:	d206      	bcs.n	3c66 <Reset_Handler+0x1e>
                        *pDest++ = *pSrc++;
    3c58:	43c2      	mvns	r2, r0
    3c5a:	18d2      	adds	r2, r2, r3
    3c5c:	0892      	lsrs	r2, r2, #2
    3c5e:	3201      	adds	r2, #1
    3c60:	0092      	lsls	r2, r2, #2
    3c62:	4b11      	ldr	r3, [pc, #68]	; (3ca8 <Reset_Handler+0x60>)
    3c64:	4798      	blx	r3
        for (pDest = &_szero; pDest < &_ezero;) {
    3c66:	4811      	ldr	r0, [pc, #68]	; (3cac <Reset_Handler+0x64>)
    3c68:	4b11      	ldr	r3, [pc, #68]	; (3cb0 <Reset_Handler+0x68>)
    3c6a:	4298      	cmp	r0, r3
    3c6c:	d207      	bcs.n	3c7e <Reset_Handler+0x36>
                *pDest++ = 0;
    3c6e:	43c2      	mvns	r2, r0
    3c70:	18d2      	adds	r2, r2, r3
    3c72:	0892      	lsrs	r2, r2, #2
    3c74:	3201      	adds	r2, #1
    3c76:	0092      	lsls	r2, r2, #2
    3c78:	2100      	movs	r1, #0
    3c7a:	4b0e      	ldr	r3, [pc, #56]	; (3cb4 <Reset_Handler+0x6c>)
    3c7c:	4798      	blx	r3
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3c7e:	21ff      	movs	r1, #255	; 0xff
    3c80:	4b0d      	ldr	r3, [pc, #52]	; (3cb8 <Reset_Handler+0x70>)
    3c82:	4a0e      	ldr	r2, [pc, #56]	; (3cbc <Reset_Handler+0x74>)
    3c84:	438b      	bics	r3, r1
    3c86:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    3c88:	4a0d      	ldr	r2, [pc, #52]	; (3cc0 <Reset_Handler+0x78>)
    3c8a:	397f      	subs	r1, #127	; 0x7f
    3c8c:	6853      	ldr	r3, [r2, #4]
    3c8e:	430b      	orrs	r3, r1
    3c90:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    3c92:	4b0c      	ldr	r3, [pc, #48]	; (3cc4 <Reset_Handler+0x7c>)
    3c94:	4798      	blx	r3
        main();
    3c96:	4b0c      	ldr	r3, [pc, #48]	; (3cc8 <Reset_Handler+0x80>)
    3c98:	4798      	blx	r3
    3c9a:	e7fe      	b.n	3c9a <Reset_Handler+0x52>
    3c9c:	000255e8 	.word	0x000255e8
    3ca0:	20000000 	.word	0x20000000
    3ca4:	20000d38 	.word	0x20000d38
    3ca8:	0001efe9 	.word	0x0001efe9
    3cac:	20000d38 	.word	0x20000d38
    3cb0:	20005640 	.word	0x20005640
    3cb4:	0001f06d 	.word	0x0001f06d
    3cb8:	00000000 	.word	0x00000000
    3cbc:	e000ed00 	.word	0xe000ed00
    3cc0:	41004000 	.word	0x41004000
    3cc4:	0001efa1 	.word	0x0001efa1
    3cc8:	00018fb5 	.word	0x00018fb5

00003ccc <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    3ccc:	4a04      	ldr	r2, [pc, #16]	; (3ce0 <_sbrk+0x14>)
    3cce:	6813      	ldr	r3, [r2, #0]
    3cd0:	2b00      	cmp	r3, #0
    3cd2:	d003      	beq.n	3cdc <_sbrk+0x10>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	heap += incr;
    3cd4:	1818      	adds	r0, r3, r0
    3cd6:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
}
    3cd8:	0018      	movs	r0, r3
    3cda:	4770      	bx	lr
    3cdc:	4b01      	ldr	r3, [pc, #4]	; (3ce4 <_sbrk+0x18>)
    3cde:	e7f9      	b.n	3cd4 <_sbrk+0x8>
    3ce0:	20000e44 	.word	0x20000e44
    3ce4:	20007640 	.word	0x20007640

00003ce8 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
    3ce8:	b570      	push	{r4, r5, r6, lr}
    3cea:	0004      	movs	r4, r0
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
    3cec:	2801      	cmp	r0, #1
    3cee:	d901      	bls.n	3cf4 <disk_initialize+0xc>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
    3cf0:	2001      	movs	r0, #1
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
    3cf2:	bd70      	pop	{r4, r5, r6, pc}
		mem_status = mem_test_unit_ready(drv);
    3cf4:	4d07      	ldr	r5, [pc, #28]	; (3d14 <disk_initialize+0x2c>)
    3cf6:	47a8      	blx	r5
		if (CTRL_BUSY != mem_status) {
    3cf8:	2803      	cmp	r0, #3
    3cfa:	d101      	bne.n	3d00 <disk_initialize+0x18>
		mem_status = mem_test_unit_ready(drv);
    3cfc:	0020      	movs	r0, r4
    3cfe:	47a8      	blx	r5
	if (mem_status != CTRL_GOOD) {
    3d00:	2800      	cmp	r0, #0
    3d02:	d1f5      	bne.n	3cf0 <disk_initialize+0x8>
	if (mem_wr_protect(drv)) {
    3d04:	4b04      	ldr	r3, [pc, #16]	; (3d18 <disk_initialize+0x30>)
    3d06:	0020      	movs	r0, r4
    3d08:	4798      	blx	r3
	return 0;
    3d0a:	1e43      	subs	r3, r0, #1
    3d0c:	4198      	sbcs	r0, r3
    3d0e:	0080      	lsls	r0, r0, #2
    3d10:	e7ef      	b.n	3cf2 <disk_initialize+0xa>
    3d12:	46c0      	nop			; (mov r8, r8)
    3d14:	0000ae69 	.word	0x0000ae69
    3d18:	0000aeb5 	.word	0x0000aeb5

00003d1c <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
    3d1c:	b510      	push	{r4, lr}
	switch (mem_test_unit_ready(drv)) {
    3d1e:	4b06      	ldr	r3, [pc, #24]	; (3d38 <disk_status+0x1c>)
    3d20:	4798      	blx	r3
    3d22:	2800      	cmp	r0, #0
    3d24:	d006      	beq.n	3d34 <disk_status+0x18>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
    3d26:	2303      	movs	r3, #3
	switch (mem_test_unit_ready(drv)) {
    3d28:	2802      	cmp	r0, #2
    3d2a:	d101      	bne.n	3d30 <disk_status+0x14>
	default:
		return STA_NOINIT;
	}
}
    3d2c:	0018      	movs	r0, r3
    3d2e:	bd10      	pop	{r4, pc}
		return STA_NOINIT;
    3d30:	3b02      	subs	r3, #2
    3d32:	e7fb      	b.n	3d2c <disk_status+0x10>
		return 0;
    3d34:	2300      	movs	r3, #0
    3d36:	e7f9      	b.n	3d2c <disk_status+0x10>
    3d38:	0000ae69 	.word	0x0000ae69

00003d3c <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
    3d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d3e:	4645      	mov	r5, r8
    3d40:	46de      	mov	lr, fp
    3d42:	4657      	mov	r7, sl
    3d44:	464e      	mov	r6, r9
    3d46:	b5e0      	push	{r5, r6, r7, lr}
    3d48:	001f      	movs	r7, r3
    3d4a:	b083      	sub	sp, #12
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    3d4c:	4b19      	ldr	r3, [pc, #100]	; (3db4 <disk_read+0x78>)
{
    3d4e:	4680      	mov	r8, r0
    3d50:	000d      	movs	r5, r1
    3d52:	0014      	movs	r4, r2
	uint8_t uc_sector_size = mem_sector_size(drv);
    3d54:	4798      	blx	r3
    3d56:	1e06      	subs	r6, r0, #0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
    3d58:	d107      	bne.n	3d6a <disk_read+0x2e>
		return RES_ERROR;
    3d5a:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    3d5c:	b003      	add	sp, #12
    3d5e:	bc3c      	pop	{r2, r3, r4, r5}
    3d60:	4690      	mov	r8, r2
    3d62:	4699      	mov	r9, r3
    3d64:	46a2      	mov	sl, r4
    3d66:	46ab      	mov	fp, r5
    3d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    3d6a:	4b13      	ldr	r3, [pc, #76]	; (3db8 <disk_read+0x7c>)
    3d6c:	a901      	add	r1, sp, #4
    3d6e:	4640      	mov	r0, r8
    3d70:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
    3d72:	0032      	movs	r2, r6
			(ul_last_sector_num + 1) * uc_sector_size) {
    3d74:	9b01      	ldr	r3, [sp, #4]
	if ((sector + count * uc_sector_size) >
    3d76:	437a      	muls	r2, r7
			(ul_last_sector_num + 1) * uc_sector_size) {
    3d78:	3301      	adds	r3, #1
    3d7a:	4373      	muls	r3, r6
	if ((sector + count * uc_sector_size) >
    3d7c:	1912      	adds	r2, r2, r4
		return RES_PARERR;
    3d7e:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    3d80:	429a      	cmp	r2, r3
    3d82:	d8eb      	bhi.n	3d5c <disk_read+0x20>
	for (i = 0; i < count; i++) {
    3d84:	2f00      	cmp	r7, #0
    3d86:	d013      	beq.n	3db0 <disk_read+0x74>
    3d88:	0273      	lsls	r3, r6, #9
    3d8a:	469b      	mov	fp, r3
    3d8c:	1c7b      	adds	r3, r7, #1
    3d8e:	4699      	mov	r9, r3
    3d90:	4b0a      	ldr	r3, [pc, #40]	; (3dbc <disk_read+0x80>)
    3d92:	2701      	movs	r7, #1
    3d94:	469a      	mov	sl, r3
    3d96:	e004      	b.n	3da2 <disk_read+0x66>
    3d98:	3701      	adds	r7, #1
    3d9a:	19a4      	adds	r4, r4, r6
    3d9c:	445d      	add	r5, fp
    3d9e:	454f      	cmp	r7, r9
    3da0:	d006      	beq.n	3db0 <disk_read+0x74>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    3da2:	002a      	movs	r2, r5
    3da4:	0021      	movs	r1, r4
    3da6:	4640      	mov	r0, r8
    3da8:	47d0      	blx	sl
    3daa:	2800      	cmp	r0, #0
    3dac:	d0f4      	beq.n	3d98 <disk_read+0x5c>
    3dae:	e7d4      	b.n	3d5a <disk_read+0x1e>
	return RES_OK;
    3db0:	2000      	movs	r0, #0
    3db2:	e7d3      	b.n	3d5c <disk_read+0x20>
    3db4:	0000ae95 	.word	0x0000ae95
    3db8:	0000ae7d 	.word	0x0000ae7d
    3dbc:	0000af25 	.word	0x0000af25

00003dc0 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
    3dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3dc2:	4645      	mov	r5, r8
    3dc4:	46de      	mov	lr, fp
    3dc6:	4657      	mov	r7, sl
    3dc8:	464e      	mov	r6, r9
    3dca:	b5e0      	push	{r5, r6, r7, lr}
    3dcc:	001f      	movs	r7, r3
    3dce:	b083      	sub	sp, #12
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    3dd0:	4b19      	ldr	r3, [pc, #100]	; (3e38 <disk_write+0x78>)
{
    3dd2:	4680      	mov	r8, r0
    3dd4:	000d      	movs	r5, r1
    3dd6:	0014      	movs	r4, r2
	uint8_t uc_sector_size = mem_sector_size(drv);
    3dd8:	4798      	blx	r3
    3dda:	1e06      	subs	r6, r0, #0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
    3ddc:	d107      	bne.n	3dee <disk_write+0x2e>
		return RES_ERROR;
    3dde:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    3de0:	b003      	add	sp, #12
    3de2:	bc3c      	pop	{r2, r3, r4, r5}
    3de4:	4690      	mov	r8, r2
    3de6:	4699      	mov	r9, r3
    3de8:	46a2      	mov	sl, r4
    3dea:	46ab      	mov	fp, r5
    3dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    3dee:	4b13      	ldr	r3, [pc, #76]	; (3e3c <disk_write+0x7c>)
    3df0:	a901      	add	r1, sp, #4
    3df2:	4640      	mov	r0, r8
    3df4:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
    3df6:	0032      	movs	r2, r6
			(ul_last_sector_num + 1) * uc_sector_size) {
    3df8:	9b01      	ldr	r3, [sp, #4]
	if ((sector + count * uc_sector_size) >
    3dfa:	437a      	muls	r2, r7
			(ul_last_sector_num + 1) * uc_sector_size) {
    3dfc:	3301      	adds	r3, #1
    3dfe:	4373      	muls	r3, r6
	if ((sector + count * uc_sector_size) >
    3e00:	1912      	adds	r2, r2, r4
		return RES_PARERR;
    3e02:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    3e04:	429a      	cmp	r2, r3
    3e06:	d8eb      	bhi.n	3de0 <disk_write+0x20>
	for (i = 0; i < count; i++) {
    3e08:	2f00      	cmp	r7, #0
    3e0a:	d013      	beq.n	3e34 <disk_write+0x74>
    3e0c:	0273      	lsls	r3, r6, #9
    3e0e:	469b      	mov	fp, r3
    3e10:	1c7b      	adds	r3, r7, #1
    3e12:	4699      	mov	r9, r3
    3e14:	4b0a      	ldr	r3, [pc, #40]	; (3e40 <disk_write+0x80>)
    3e16:	2701      	movs	r7, #1
    3e18:	469a      	mov	sl, r3
    3e1a:	e004      	b.n	3e26 <disk_write+0x66>
    3e1c:	3701      	adds	r7, #1
    3e1e:	19a4      	adds	r4, r4, r6
    3e20:	445d      	add	r5, fp
    3e22:	454f      	cmp	r7, r9
    3e24:	d006      	beq.n	3e34 <disk_write+0x74>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    3e26:	002a      	movs	r2, r5
    3e28:	0021      	movs	r1, r4
    3e2a:	4640      	mov	r0, r8
    3e2c:	47d0      	blx	sl
    3e2e:	2800      	cmp	r0, #0
    3e30:	d0f4      	beq.n	3e1c <disk_write+0x5c>
    3e32:	e7d4      	b.n	3dde <disk_write+0x1e>
	return RES_OK;
    3e34:	2000      	movs	r0, #0
    3e36:	e7d3      	b.n	3de0 <disk_write+0x20>
    3e38:	0000ae95 	.word	0x0000ae95
    3e3c:	0000ae7d 	.word	0x0000ae7d
    3e40:	0000af41 	.word	0x0000af41

00003e44 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
    3e44:	b510      	push	{r4, lr}
    3e46:	0014      	movs	r4, r2
    3e48:	b082      	sub	sp, #8
	DRESULT res = RES_PARERR;

	switch (ctrl) {
    3e4a:	2901      	cmp	r1, #1
    3e4c:	d020      	beq.n	3e90 <disk_ioctl+0x4c>
    3e4e:	2900      	cmp	r1, #0
    3e50:	d018      	beq.n	3e84 <disk_ioctl+0x40>
    3e52:	2902      	cmp	r1, #2
    3e54:	d007      	beq.n	3e66 <disk_ioctl+0x22>
			res = RES_NOTRDY;
		}
		break;

	default:
		res = RES_PARERR;
    3e56:	2004      	movs	r0, #4
	switch (ctrl) {
    3e58:	2903      	cmp	r1, #3
    3e5a:	d102      	bne.n	3e62 <disk_ioctl+0x1e>
		*(DWORD *)buff = 1;
    3e5c:	2301      	movs	r3, #1
		res = RES_OK;
    3e5e:	2000      	movs	r0, #0
		*(DWORD *)buff = 1;
    3e60:	6013      	str	r3, [r2, #0]
	}

	return res;
}
    3e62:	b002      	add	sp, #8
    3e64:	bd10      	pop	{r4, pc}
		uint8_t uc_sector_size = mem_sector_size(drv);
    3e66:	4b0f      	ldr	r3, [pc, #60]	; (3ea4 <disk_ioctl+0x60>)
    3e68:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
    3e6a:	1e43      	subs	r3, r0, #1
    3e6c:	b2db      	uxtb	r3, r3
    3e6e:	2b01      	cmp	r3, #1
    3e70:	d904      	bls.n	3e7c <disk_ioctl+0x38>
				(uc_sector_size != SECTOR_SIZE_1024) &&
    3e72:	22fb      	movs	r2, #251	; 0xfb
    3e74:	1f03      	subs	r3, r0, #4
			return RES_ERROR;
    3e76:	2001      	movs	r0, #1
				(uc_sector_size != SECTOR_SIZE_1024) &&
    3e78:	4213      	tst	r3, r2
    3e7a:	d1f2      	bne.n	3e62 <disk_ioctl+0x1e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
    3e7c:	2300      	movs	r3, #0
		res = RES_OK;
    3e7e:	2000      	movs	r0, #0
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
    3e80:	7023      	strb	r3, [r4, #0]
	break;
    3e82:	e7ee      	b.n	3e62 <disk_ioctl+0x1e>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
    3e84:	4b08      	ldr	r3, [pc, #32]	; (3ea8 <disk_ioctl+0x64>)
    3e86:	4798      	blx	r3
    3e88:	2800      	cmp	r0, #0
    3e8a:	d009      	beq.n	3ea0 <disk_ioctl+0x5c>
			res = RES_NOTRDY;
    3e8c:	2003      	movs	r0, #3
    3e8e:	e7e8      	b.n	3e62 <disk_ioctl+0x1e>
		mem_read_capacity(drv, &ul_last_sector_num);
    3e90:	4b06      	ldr	r3, [pc, #24]	; (3eac <disk_ioctl+0x68>)
    3e92:	a901      	add	r1, sp, #4
    3e94:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
    3e96:	9b01      	ldr	r3, [sp, #4]
		res = RES_OK;
    3e98:	2000      	movs	r0, #0
		*(DWORD *)buff = ul_last_sector_num + 1;
    3e9a:	3301      	adds	r3, #1
    3e9c:	6023      	str	r3, [r4, #0]
	break;
    3e9e:	e7e0      	b.n	3e62 <disk_ioctl+0x1e>
			res = RES_OK;
    3ea0:	2000      	movs	r0, #0
    3ea2:	e7de      	b.n	3e62 <disk_ioctl+0x1e>
    3ea4:	0000ae95 	.word	0x0000ae95
    3ea8:	0000ae69 	.word	0x0000ae69
    3eac:	0000ae7d 	.word	0x0000ae7d

00003eb0 <get_fattime>:
*/


// KFausnight 20200713
uint32_t get_fattime(void)
{
    3eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3eb2:	46c6      	mov	lr, r8
    3eb4:	b500      	push	{lr}

	//  Get current time from external RTC
	//get_time(); //commented out; always performed to get posix time stamp and should match
	
	// Format into FAT time stamp format
	ul_time = ((bcd2int(current_time.year) +20 ) << 25)
    3eb6:	4e10      	ldr	r6, [pc, #64]	; (3ef8 <get_fattime+0x48>)
    3eb8:	4d10      	ldr	r5, [pc, #64]	; (3efc <get_fattime+0x4c>)
    3eba:	79b0      	ldrb	r0, [r6, #6]
    3ebc:	47a8      	blx	r5
    3ebe:	0004      	movs	r4, r0
	| (bcd2int(current_time.month) << 21)
    3ec0:	7970      	ldrb	r0, [r6, #5]
    3ec2:	47a8      	blx	r5
    3ec4:	0007      	movs	r7, r0
	| (bcd2int(current_time.date) << 16)
    3ec6:	7930      	ldrb	r0, [r6, #4]
    3ec8:	47a8      	blx	r5
	| (bcd2int(current_time.month) << 21)
    3eca:	057f      	lsls	r7, r7, #21
	| (bcd2int(current_time.date) << 16)
    3ecc:	0400      	lsls	r0, r0, #16
    3ece:	4307      	orrs	r7, r0
    3ed0:	46b8      	mov	r8, r7
	| (bcd2int(current_time.hours) << 11)
    3ed2:	78b0      	ldrb	r0, [r6, #2]
    3ed4:	47a8      	blx	r5
    3ed6:	4643      	mov	r3, r8
    3ed8:	02c7      	lsls	r7, r0, #11
	| (bcd2int(current_time.minutes) << 5)
    3eda:	7870      	ldrb	r0, [r6, #1]
    3edc:	431f      	orrs	r7, r3
    3ede:	47a8      	blx	r5
    3ee0:	0140      	lsls	r0, r0, #5
    3ee2:	4307      	orrs	r7, r0
	| ((bcd2int(current_time.seconds) >> 1) << 0);
    3ee4:	7830      	ldrb	r0, [r6, #0]
    3ee6:	47a8      	blx	r5
	ul_time = ((bcd2int(current_time.year) +20 ) << 25)
    3ee8:	3414      	adds	r4, #20
	| ((bcd2int(current_time.seconds) >> 1) << 0);
    3eea:	0840      	lsrs	r0, r0, #1
	ul_time = ((bcd2int(current_time.year) +20 ) << 25)
    3eec:	4338      	orrs	r0, r7
    3eee:	0664      	lsls	r4, r4, #25
    3ef0:	4320      	orrs	r0, r4

	return ul_time;
}
    3ef2:	bc04      	pop	{r2}
    3ef4:	4690      	mov	r8, r2
    3ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ef8:	200010cc 	.word	0x200010cc
    3efc:	000079cd 	.word	0x000079cd

00003f00 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    3f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f02:	4647      	mov	r7, r8
    3f04:	46ce      	mov	lr, r9
    3f06:	b580      	push	{r7, lr}
	DWORD wsect;


	wsect = fs->winsect;
    3f08:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
{
    3f0a:	0004      	movs	r4, r0
    3f0c:	000f      	movs	r7, r1
	if (wsect != sector) {	/* Changed current window */
    3f0e:	428d      	cmp	r5, r1
    3f10:	d004      	beq.n	3f1c <move_window+0x1c>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    3f12:	7903      	ldrb	r3, [r0, #4]
    3f14:	2b00      	cmp	r3, #0
    3f16:	d111      	bne.n	3f3c <move_window+0x3c>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
    3f18:	2f00      	cmp	r7, #0
    3f1a:	d104      	bne.n	3f26 <move_window+0x26>
				return FR_DISK_ERR;
			fs->winsect = sector;
		}
	}

	return FR_OK;
    3f1c:	2000      	movs	r0, #0
}
    3f1e:	bc0c      	pop	{r2, r3}
    3f20:	4690      	mov	r8, r2
    3f22:	4699      	mov	r9, r3
    3f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    3f26:	0021      	movs	r1, r4
    3f28:	7860      	ldrb	r0, [r4, #1]
    3f2a:	2301      	movs	r3, #1
    3f2c:	003a      	movs	r2, r7
    3f2e:	3130      	adds	r1, #48	; 0x30
    3f30:	4d14      	ldr	r5, [pc, #80]	; (3f84 <move_window+0x84>)
    3f32:	47a8      	blx	r5
    3f34:	2800      	cmp	r0, #0
    3f36:	d123      	bne.n	3f80 <move_window+0x80>
			fs->winsect = sector;
    3f38:	62e7      	str	r7, [r4, #44]	; 0x2c
    3f3a:	e7f0      	b.n	3f1e <move_window+0x1e>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    3f3c:	2330      	movs	r3, #48	; 0x30
    3f3e:	4698      	mov	r8, r3
    3f40:	4e11      	ldr	r6, [pc, #68]	; (3f88 <move_window+0x88>)
    3f42:	4480      	add	r8, r0
    3f44:	3b2f      	subs	r3, #47	; 0x2f
    3f46:	7840      	ldrb	r0, [r0, #1]
    3f48:	002a      	movs	r2, r5
    3f4a:	4641      	mov	r1, r8
    3f4c:	46b1      	mov	r9, r6
    3f4e:	47b0      	blx	r6
    3f50:	2800      	cmp	r0, #0
    3f52:	d115      	bne.n	3f80 <move_window+0x80>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    3f54:	69e3      	ldr	r3, [r4, #28]
    3f56:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
    3f58:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    3f5a:	189a      	adds	r2, r3, r2
    3f5c:	4295      	cmp	r5, r2
    3f5e:	d2db      	bcs.n	3f18 <move_window+0x18>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    3f60:	78e6      	ldrb	r6, [r4, #3]
    3f62:	2e01      	cmp	r6, #1
    3f64:	d801      	bhi.n	3f6a <move_window+0x6a>
    3f66:	e7d7      	b.n	3f18 <move_window+0x18>
    3f68:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
    3f6a:	18ed      	adds	r5, r5, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    3f6c:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    3f6e:	7860      	ldrb	r0, [r4, #1]
    3f70:	2301      	movs	r3, #1
    3f72:	002a      	movs	r2, r5
    3f74:	4641      	mov	r1, r8
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    3f76:	b2f6      	uxtb	r6, r6
					disk_write(fs->drv, fs->win, wsect, 1);
    3f78:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    3f7a:	2e01      	cmp	r6, #1
    3f7c:	d1f4      	bne.n	3f68 <move_window+0x68>
    3f7e:	e7cb      	b.n	3f18 <move_window+0x18>
				return FR_DISK_ERR;
    3f80:	2001      	movs	r0, #1
    3f82:	e7cc      	b.n	3f1e <move_window+0x1e>
    3f84:	00003d3d 	.word	0x00003d3d
    3f88:	00003dc1 	.word	0x00003dc1

00003f8c <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
    3f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f8e:	46c6      	mov	lr, r8
    3f90:	b500      	push	{lr}
	wsect = fs->winsect;
    3f92:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
{
    3f94:	0004      	movs	r4, r0
	if (wsect != sector) {	/* Changed current window */
    3f96:	2d00      	cmp	r5, #0
    3f98:	d002      	beq.n	3fa0 <sync+0x14>
		if (fs->wflag) {	/* Write back dirty window if needed */
    3f9a:	7903      	ldrb	r3, [r0, #4]
    3f9c:	2b00      	cmp	r3, #0
    3f9e:	d10d      	bne.n	3fbc <sync+0x30>


	res = move_window(fs, 0);
	if (res == FR_OK) {
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    3fa0:	7823      	ldrb	r3, [r4, #0]
    3fa2:	2b03      	cmp	r3, #3
    3fa4:	d02d      	beq.n	4002 <sync+0x76>
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
			fs->fsi_flag = 0;
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    3fa6:	4b34      	ldr	r3, [pc, #208]	; (4078 <sync+0xec>)
    3fa8:	7860      	ldrb	r0, [r4, #1]
    3faa:	2200      	movs	r2, #0
    3fac:	2100      	movs	r1, #0
    3fae:	4798      	blx	r3
    3fb0:	1e43      	subs	r3, r0, #1
    3fb2:	4198      	sbcs	r0, r3
    3fb4:	b2c0      	uxtb	r0, r0
			res = FR_DISK_ERR;
	}

	return res;
}
    3fb6:	bc04      	pop	{r2}
    3fb8:	4690      	mov	r8, r2
    3fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    3fbc:	0007      	movs	r7, r0
    3fbe:	3730      	adds	r7, #48	; 0x30
    3fc0:	2301      	movs	r3, #1
    3fc2:	4e2e      	ldr	r6, [pc, #184]	; (407c <sync+0xf0>)
    3fc4:	7840      	ldrb	r0, [r0, #1]
    3fc6:	002a      	movs	r2, r5
    3fc8:	0039      	movs	r1, r7
    3fca:	47b0      	blx	r6
    3fcc:	46b0      	mov	r8, r6
    3fce:	0003      	movs	r3, r0
    3fd0:	2001      	movs	r0, #1
    3fd2:	2b00      	cmp	r3, #0
    3fd4:	d1ef      	bne.n	3fb6 <sync+0x2a>
			fs->wflag = 0;
    3fd6:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    3fd8:	6a22      	ldr	r2, [r4, #32]
    3fda:	69e3      	ldr	r3, [r4, #28]
    3fdc:	189a      	adds	r2, r3, r2
    3fde:	4295      	cmp	r5, r2
    3fe0:	d2de      	bcs.n	3fa0 <sync+0x14>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    3fe2:	78e6      	ldrb	r6, [r4, #3]
    3fe4:	2e01      	cmp	r6, #1
    3fe6:	d801      	bhi.n	3fec <sync+0x60>
    3fe8:	e7da      	b.n	3fa0 <sync+0x14>
    3fea:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
    3fec:	18ed      	adds	r5, r5, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    3fee:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    3ff0:	7860      	ldrb	r0, [r4, #1]
    3ff2:	2301      	movs	r3, #1
    3ff4:	002a      	movs	r2, r5
    3ff6:	0039      	movs	r1, r7
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    3ff8:	b2f6      	uxtb	r6, r6
					disk_write(fs->drv, fs->win, wsect, 1);
    3ffa:	47c0      	blx	r8
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    3ffc:	2e01      	cmp	r6, #1
    3ffe:	d1f4      	bne.n	3fea <sync+0x5e>
    4000:	e7ce      	b.n	3fa0 <sync+0x14>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    4002:	7963      	ldrb	r3, [r4, #5]
    4004:	2b00      	cmp	r3, #0
    4006:	d0ce      	beq.n	3fa6 <sync+0x1a>
    4008:	0025      	movs	r5, r4
			fs->winsect = 0;
    400a:	2600      	movs	r6, #0
    400c:	2280      	movs	r2, #128	; 0x80
    400e:	3530      	adds	r5, #48	; 0x30
    4010:	0092      	lsls	r2, r2, #2
    4012:	2100      	movs	r1, #0
    4014:	0028      	movs	r0, r5
    4016:	4b1a      	ldr	r3, [pc, #104]	; (4080 <sync+0xf4>)
    4018:	62e6      	str	r6, [r4, #44]	; 0x2c
    401a:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    401c:	2255      	movs	r2, #85	; 0x55
    401e:	4b19      	ldr	r3, [pc, #100]	; (4084 <sync+0xf8>)
    4020:	54e2      	strb	r2, [r4, r3]
    4022:	4b19      	ldr	r3, [pc, #100]	; (4088 <sync+0xfc>)
    4024:	3255      	adds	r2, #85	; 0x55
    4026:	54e2      	strb	r2, [r4, r3]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    4028:	4b18      	ldr	r3, [pc, #96]	; (408c <sync+0x100>)
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    402a:	4a19      	ldr	r2, [pc, #100]	; (4090 <sync+0x104>)
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    402c:	6323      	str	r3, [r4, #48]	; 0x30
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    402e:	2385      	movs	r3, #133	; 0x85
    4030:	009b      	lsls	r3, r3, #2
    4032:	50e2      	str	r2, [r4, r3]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    4034:	2286      	movs	r2, #134	; 0x86
    4036:	6923      	ldr	r3, [r4, #16]
    4038:	0092      	lsls	r2, r2, #2
    403a:	54a3      	strb	r3, [r4, r2]
    403c:	4a15      	ldr	r2, [pc, #84]	; (4094 <sync+0x108>)
    403e:	0a19      	lsrs	r1, r3, #8
    4040:	54a1      	strb	r1, [r4, r2]
    4042:	4a15      	ldr	r2, [pc, #84]	; (4098 <sync+0x10c>)
    4044:	0c19      	lsrs	r1, r3, #16
    4046:	54a1      	strb	r1, [r4, r2]
    4048:	4a14      	ldr	r2, [pc, #80]	; (409c <sync+0x110>)
    404a:	0e1b      	lsrs	r3, r3, #24
    404c:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    404e:	68e3      	ldr	r3, [r4, #12]
    4050:	3201      	adds	r2, #1
    4052:	54a3      	strb	r3, [r4, r2]
    4054:	4a12      	ldr	r2, [pc, #72]	; (40a0 <sync+0x114>)
    4056:	0a19      	lsrs	r1, r3, #8
    4058:	54a1      	strb	r1, [r4, r2]
    405a:	4a12      	ldr	r2, [pc, #72]	; (40a4 <sync+0x118>)
    405c:	0c19      	lsrs	r1, r3, #16
    405e:	54a1      	strb	r1, [r4, r2]
    4060:	4a11      	ldr	r2, [pc, #68]	; (40a8 <sync+0x11c>)
    4062:	0e1b      	lsrs	r3, r3, #24
    4064:	54a3      	strb	r3, [r4, r2]
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    4066:	0029      	movs	r1, r5
    4068:	7860      	ldrb	r0, [r4, #1]
    406a:	2301      	movs	r3, #1
    406c:	6962      	ldr	r2, [r4, #20]
    406e:	4d03      	ldr	r5, [pc, #12]	; (407c <sync+0xf0>)
    4070:	47a8      	blx	r5
			fs->fsi_flag = 0;
    4072:	7166      	strb	r6, [r4, #5]
    4074:	e797      	b.n	3fa6 <sync+0x1a>
    4076:	46c0      	nop			; (mov r8, r8)
    4078:	00003e45 	.word	0x00003e45
    407c:	00003dc1 	.word	0x00003dc1
    4080:	0001f06d 	.word	0x0001f06d
    4084:	0000022e 	.word	0x0000022e
    4088:	0000022f 	.word	0x0000022f
    408c:	41615252 	.word	0x41615252
    4090:	61417272 	.word	0x61417272
    4094:	00000219 	.word	0x00000219
    4098:	0000021a 	.word	0x0000021a
    409c:	0000021b 	.word	0x0000021b
    40a0:	0000021d 	.word	0x0000021d
    40a4:	0000021e 	.word	0x0000021e
    40a8:	0000021f 	.word	0x0000021f

000040ac <put_fat.part.4>:
/*-----------------------------------------------------------------------*/
/* FAT access - Change value of a FAT entry                              */
/*-----------------------------------------------------------------------*/
#if !_FS_READONLY

static FRESULT put_fat (
    40ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    40ae:	4657      	mov	r7, sl
    40b0:	4645      	mov	r5, r8
    40b2:	46de      	mov	lr, fp
    40b4:	464e      	mov	r6, r9
    40b6:	b5e0      	push	{r5, r6, r7, lr}

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		switch (fs->fs_type) {
    40b8:	7803      	ldrb	r3, [r0, #0]
static FRESULT put_fat (
    40ba:	b083      	sub	sp, #12
    40bc:	0004      	movs	r4, r0
    40be:	000d      	movs	r5, r1
    40c0:	0017      	movs	r7, r2
		switch (fs->fs_type) {
    40c2:	2b02      	cmp	r3, #2
    40c4:	d100      	bne.n	40c8 <put_fat.part.4+0x1c>
    40c6:	e0b2      	b.n	422e <put_fat.part.4+0x182>
    40c8:	2b03      	cmp	r3, #3
    40ca:	d100      	bne.n	40ce <put_fat.part.4+0x22>
    40cc:	e07b      	b.n	41c6 <put_fat.part.4+0x11a>
			val |= LD_DWORD(p) & 0xF0000000;
			ST_DWORD(p, val);
			break;

		default :
			res = FR_INT_ERR;
    40ce:	2002      	movs	r0, #2
		switch (fs->fs_type) {
    40d0:	2b01      	cmp	r3, #1
    40d2:	d008      	beq.n	40e6 <put_fat.part.4+0x3a>
		}
		fs->wflag = 1;
    40d4:	2301      	movs	r3, #1
    40d6:	7123      	strb	r3, [r4, #4]
	}

	return res;
}
    40d8:	b003      	add	sp, #12
    40da:	bc3c      	pop	{r2, r3, r4, r5}
    40dc:	4690      	mov	r8, r2
    40de:	4699      	mov	r9, r3
    40e0:	46a2      	mov	sl, r4
    40e2:	46ab      	mov	fp, r5
    40e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bc = clst; bc += bc / 2;
    40e6:	084e      	lsrs	r6, r1, #1
    40e8:	1873      	adds	r3, r6, r1
    40ea:	9300      	str	r3, [sp, #0]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    40ec:	0a5b      	lsrs	r3, r3, #9
    40ee:	4699      	mov	r9, r3
    40f0:	6a22      	ldr	r2, [r4, #32]
	wsect = fs->winsect;
    40f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    40f4:	4491      	add	r9, r2
	wsect = fs->winsect;
    40f6:	4698      	mov	r8, r3
	if (wsect != sector) {	/* Changed current window */
    40f8:	4599      	cmp	r9, r3
    40fa:	d00a      	beq.n	4112 <put_fat.part.4+0x66>
		if (fs->wflag) {	/* Write back dirty window if needed */
    40fc:	7923      	ldrb	r3, [r4, #4]
    40fe:	2b00      	cmp	r3, #0
    4100:	d000      	beq.n	4104 <put_fat.part.4+0x58>
    4102:	e13f      	b.n	4384 <put_fat.part.4+0x2d8>
		if (sector) {
    4104:	464b      	mov	r3, r9
    4106:	2b00      	cmp	r3, #0
    4108:	d000      	beq.n	410c <put_fat.part.4+0x60>
    410a:	e16f      	b.n	43ec <put_fat.part.4+0x340>
    410c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    410e:	6a22      	ldr	r2, [r4, #32]
    4110:	4698      	mov	r8, r3
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    4112:	2101      	movs	r1, #1
			p = &fs->win[bc % SS(fs)];
    4114:	9b00      	ldr	r3, [sp, #0]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    4116:	400d      	ands	r5, r1
			p = &fs->win[bc % SS(fs)];
    4118:	05db      	lsls	r3, r3, #23
    411a:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    411c:	46a9      	mov	r9, r5
    411e:	2d00      	cmp	r5, #0
    4120:	d100      	bne.n	4124 <put_fat.part.4+0x78>
    4122:	e0ad      	b.n	4280 <put_fat.part.4+0x1d4>
    4124:	200f      	movs	r0, #15
    4126:	18e3      	adds	r3, r4, r3
    4128:	3330      	adds	r3, #48	; 0x30
    412a:	781d      	ldrb	r5, [r3, #0]
    412c:	4005      	ands	r5, r0
    412e:	0138      	lsls	r0, r7, #4
    4130:	4328      	orrs	r0, r5
    4132:	7018      	strb	r0, [r3, #0]
			bc++;
    4134:	9b00      	ldr	r3, [sp, #0]
			fs->wflag = 1;
    4136:	7121      	strb	r1, [r4, #4]
			bc++;
    4138:	3301      	adds	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    413a:	0a5d      	lsrs	r5, r3, #9
    413c:	18ad      	adds	r5, r5, r2
			bc++;
    413e:	9300      	str	r3, [sp, #0]
	if (wsect != sector) {	/* Changed current window */
    4140:	4545      	cmp	r5, r8
    4142:	d100      	bne.n	4146 <put_fat.part.4+0x9a>
    4144:	e16c      	b.n	4420 <put_fat.part.4+0x374>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    4146:	2330      	movs	r3, #48	; 0x30
    4148:	469c      	mov	ip, r3
    414a:	44a4      	add	ip, r4
    414c:	4663      	mov	r3, ip
    414e:	9301      	str	r3, [sp, #4]
    4150:	4661      	mov	r1, ip
    4152:	7860      	ldrb	r0, [r4, #1]
    4154:	2301      	movs	r3, #1
    4156:	4642      	mov	r2, r8
    4158:	4eb3      	ldr	r6, [pc, #716]	; (4428 <put_fat.part.4+0x37c>)
    415a:	47b0      	blx	r6
    415c:	2800      	cmp	r0, #0
    415e:	d000      	beq.n	4162 <put_fat.part.4+0xb6>
    4160:	e14d      	b.n	43fe <put_fat.part.4+0x352>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    4162:	69e3      	ldr	r3, [r4, #28]
    4164:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
    4166:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    4168:	189a      	adds	r2, r3, r2
    416a:	4542      	cmp	r2, r8
    416c:	d91e      	bls.n	41ac <put_fat.part.4+0x100>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    416e:	78e2      	ldrb	r2, [r4, #3]
    4170:	4693      	mov	fp, r2
    4172:	2a01      	cmp	r2, #1
    4174:	d91a      	bls.n	41ac <put_fat.part.4+0x100>
    4176:	4642      	mov	r2, r8
    4178:	0031      	movs	r1, r6
    417a:	9800      	ldr	r0, [sp, #0]
    417c:	46a8      	mov	r8, r5
    417e:	0026      	movs	r6, r4
    4180:	4682      	mov	sl, r0
    4182:	465c      	mov	r4, fp
    4184:	0015      	movs	r5, r2
    4186:	46bb      	mov	fp, r7
    4188:	000f      	movs	r7, r1
    418a:	e000      	b.n	418e <put_fat.part.4+0xe2>
    418c:	69f3      	ldr	r3, [r6, #28]
					wsect += fs->fsize;
    418e:	18ed      	adds	r5, r5, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4190:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    4192:	7870      	ldrb	r0, [r6, #1]
    4194:	2301      	movs	r3, #1
    4196:	002a      	movs	r2, r5
    4198:	9901      	ldr	r1, [sp, #4]
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    419a:	b2e4      	uxtb	r4, r4
					disk_write(fs->drv, fs->win, wsect, 1);
    419c:	47b8      	blx	r7
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    419e:	2c01      	cmp	r4, #1
    41a0:	d1f4      	bne.n	418c <put_fat.part.4+0xe0>
    41a2:	4653      	mov	r3, sl
    41a4:	4645      	mov	r5, r8
    41a6:	0034      	movs	r4, r6
    41a8:	465f      	mov	r7, fp
    41aa:	9300      	str	r3, [sp, #0]
		if (sector) {
    41ac:	2d00      	cmp	r5, #0
    41ae:	d000      	beq.n	41b2 <put_fat.part.4+0x106>
    41b0:	e12c      	b.n	440c <put_fat.part.4+0x360>
			p = &fs->win[bc % SS(fs)];
    41b2:	9b00      	ldr	r3, [sp, #0]
    41b4:	05de      	lsls	r6, r3, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    41b6:	464b      	mov	r3, r9
			p = &fs->win[bc % SS(fs)];
    41b8:	0df6      	lsrs	r6, r6, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    41ba:	2b00      	cmp	r3, #0
    41bc:	d06e      	beq.n	429c <put_fat.part.4+0x1f0>
    41be:	093f      	lsrs	r7, r7, #4
    41c0:	b2ff      	uxtb	r7, r7
    41c2:	19a6      	adds	r6, r4, r6
    41c4:	e073      	b.n	42ae <put_fat.part.4+0x202>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    41c6:	6a03      	ldr	r3, [r0, #32]
    41c8:	09ce      	lsrs	r6, r1, #7
    41ca:	469c      	mov	ip, r3
    41cc:	0033      	movs	r3, r6
    41ce:	4463      	add	r3, ip
    41d0:	001a      	movs	r2, r3
    41d2:	9300      	str	r3, [sp, #0]
	wsect = fs->winsect;
    41d4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    41d6:	4698      	mov	r8, r3
	if (wsect != sector) {	/* Changed current window */
    41d8:	4542      	cmp	r2, r8
    41da:	d012      	beq.n	4202 <put_fat.part.4+0x156>
		if (fs->wflag) {	/* Write back dirty window if needed */
    41dc:	7903      	ldrb	r3, [r0, #4]
    41de:	2b00      	cmp	r3, #0
    41e0:	d169      	bne.n	42b6 <put_fat.part.4+0x20a>
		if (sector) {
    41e2:	9b00      	ldr	r3, [sp, #0]
    41e4:	2b00      	cmp	r3, #0
    41e6:	d00c      	beq.n	4202 <put_fat.part.4+0x156>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    41e8:	0021      	movs	r1, r4
    41ea:	001a      	movs	r2, r3
    41ec:	7860      	ldrb	r0, [r4, #1]
    41ee:	2301      	movs	r3, #1
    41f0:	3130      	adds	r1, #48	; 0x30
    41f2:	4e8e      	ldr	r6, [pc, #568]	; (442c <put_fat.part.4+0x380>)
    41f4:	4691      	mov	r9, r2
    41f6:	47b0      	blx	r6
    41f8:	2800      	cmp	r0, #0
    41fa:	d000      	beq.n	41fe <put_fat.part.4+0x152>
    41fc:	e0ff      	b.n	43fe <put_fat.part.4+0x352>
			fs->winsect = sector;
    41fe:	464b      	mov	r3, r9
    4200:	62e3      	str	r3, [r4, #44]	; 0x2c
			p = &fs->win[clst * 4 % SS(fs)];
    4202:	23fe      	movs	r3, #254	; 0xfe
    4204:	00ad      	lsls	r5, r5, #2
    4206:	005b      	lsls	r3, r3, #1
    4208:	401d      	ands	r5, r3
    420a:	002a      	movs	r2, r5
    420c:	3230      	adds	r2, #48	; 0x30
    420e:	18a2      	adds	r2, r4, r2
			val |= LD_DWORD(p) & 0xF0000000;
    4210:	78d3      	ldrb	r3, [r2, #3]
    4212:	1965      	adds	r5, r4, r5
    4214:	091b      	lsrs	r3, r3, #4
    4216:	071b      	lsls	r3, r3, #28
    4218:	431f      	orrs	r7, r3
			ST_DWORD(p, val);
    421a:	0a3b      	lsrs	r3, r7, #8
			val |= LD_DWORD(p) & 0xF0000000;
    421c:	3530      	adds	r5, #48	; 0x30
			ST_DWORD(p, val);
    421e:	702f      	strb	r7, [r5, #0]
    4220:	7053      	strb	r3, [r2, #1]
    4222:	0c3b      	lsrs	r3, r7, #16
    4224:	0e3f      	lsrs	r7, r7, #24
    4226:	7093      	strb	r3, [r2, #2]
    4228:	70d7      	strb	r7, [r2, #3]
    422a:	2000      	movs	r0, #0
    422c:	e752      	b.n	40d4 <put_fat.part.4+0x28>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    422e:	6a03      	ldr	r3, [r0, #32]
    4230:	0a0e      	lsrs	r6, r1, #8
    4232:	469c      	mov	ip, r3
    4234:	0033      	movs	r3, r6
    4236:	4463      	add	r3, ip
    4238:	001a      	movs	r2, r3
    423a:	9300      	str	r3, [sp, #0]
	wsect = fs->winsect;
    423c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    423e:	4698      	mov	r8, r3
	if (wsect != sector) {	/* Changed current window */
    4240:	4542      	cmp	r2, r8
    4242:	d012      	beq.n	426a <put_fat.part.4+0x1be>
		if (fs->wflag) {	/* Write back dirty window if needed */
    4244:	7903      	ldrb	r3, [r0, #4]
    4246:	2b00      	cmp	r3, #0
    4248:	d169      	bne.n	431e <put_fat.part.4+0x272>
		if (sector) {
    424a:	9b00      	ldr	r3, [sp, #0]
    424c:	2b00      	cmp	r3, #0
    424e:	d00c      	beq.n	426a <put_fat.part.4+0x1be>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    4250:	0021      	movs	r1, r4
    4252:	001a      	movs	r2, r3
    4254:	7860      	ldrb	r0, [r4, #1]
    4256:	2301      	movs	r3, #1
    4258:	3130      	adds	r1, #48	; 0x30
    425a:	4e74      	ldr	r6, [pc, #464]	; (442c <put_fat.part.4+0x380>)
    425c:	4691      	mov	r9, r2
    425e:	47b0      	blx	r6
    4260:	2800      	cmp	r0, #0
    4262:	d000      	beq.n	4266 <put_fat.part.4+0x1ba>
    4264:	e0cb      	b.n	43fe <put_fat.part.4+0x352>
			fs->winsect = sector;
    4266:	464b      	mov	r3, r9
    4268:	62e3      	str	r3, [r4, #44]	; 0x2c
			p = &fs->win[clst * 2 % SS(fs)];
    426a:	23ff      	movs	r3, #255	; 0xff
    426c:	006d      	lsls	r5, r5, #1
    426e:	005b      	lsls	r3, r3, #1
    4270:	401d      	ands	r5, r3
			ST_WORD(p, (WORD)val);
    4272:	1965      	adds	r5, r4, r5
    4274:	3530      	adds	r5, #48	; 0x30
    4276:	702f      	strb	r7, [r5, #0]
    4278:	0a3f      	lsrs	r7, r7, #8
    427a:	706f      	strb	r7, [r5, #1]
    427c:	2000      	movs	r0, #0
    427e:	e729      	b.n	40d4 <put_fat.part.4+0x28>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    4280:	18e3      	adds	r3, r4, r3
    4282:	3330      	adds	r3, #48	; 0x30
    4284:	701f      	strb	r7, [r3, #0]
			bc++;
    4286:	9b00      	ldr	r3, [sp, #0]
			fs->wflag = 1;
    4288:	7121      	strb	r1, [r4, #4]
			bc++;
    428a:	3301      	adds	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    428c:	0a5d      	lsrs	r5, r3, #9
    428e:	18ad      	adds	r5, r5, r2
			bc++;
    4290:	9300      	str	r3, [sp, #0]
	if (wsect != sector) {	/* Changed current window */
    4292:	4545      	cmp	r5, r8
    4294:	d000      	beq.n	4298 <put_fat.part.4+0x1ec>
    4296:	e756      	b.n	4146 <put_fat.part.4+0x9a>
			p = &fs->win[bc % SS(fs)];
    4298:	05de      	lsls	r6, r3, #23
    429a:	0df6      	lsrs	r6, r6, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    429c:	19a6      	adds	r6, r4, r6
    429e:	0033      	movs	r3, r6
    42a0:	220f      	movs	r2, #15
    42a2:	3330      	adds	r3, #48	; 0x30
    42a4:	781b      	ldrb	r3, [r3, #0]
    42a6:	0a3f      	lsrs	r7, r7, #8
    42a8:	4393      	bics	r3, r2
    42aa:	4017      	ands	r7, r2
    42ac:	431f      	orrs	r7, r3
    42ae:	3630      	adds	r6, #48	; 0x30
    42b0:	7037      	strb	r7, [r6, #0]
    42b2:	2000      	movs	r0, #0
    42b4:	e70e      	b.n	40d4 <put_fat.part.4+0x28>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    42b6:	2330      	movs	r3, #48	; 0x30
    42b8:	469b      	mov	fp, r3
    42ba:	4e5b      	ldr	r6, [pc, #364]	; (4428 <put_fat.part.4+0x37c>)
    42bc:	4483      	add	fp, r0
    42be:	3b2f      	subs	r3, #47	; 0x2f
    42c0:	7840      	ldrb	r0, [r0, #1]
    42c2:	4642      	mov	r2, r8
    42c4:	4659      	mov	r1, fp
    42c6:	46b2      	mov	sl, r6
    42c8:	47b0      	blx	r6
    42ca:	2800      	cmp	r0, #0
    42cc:	d000      	beq.n	42d0 <put_fat.part.4+0x224>
    42ce:	e096      	b.n	43fe <put_fat.part.4+0x352>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    42d0:	69e3      	ldr	r3, [r4, #28]
    42d2:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
    42d4:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    42d6:	189a      	adds	r2, r3, r2
    42d8:	4590      	cmp	r8, r2
    42da:	d282      	bcs.n	41e2 <put_fat.part.4+0x136>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    42dc:	78e2      	ldrb	r2, [r4, #3]
    42de:	4691      	mov	r9, r2
    42e0:	2a01      	cmp	r2, #1
    42e2:	d800      	bhi.n	42e6 <put_fat.part.4+0x23a>
    42e4:	e77d      	b.n	41e2 <put_fat.part.4+0x136>
    42e6:	9a00      	ldr	r2, [sp, #0]
    42e8:	0029      	movs	r1, r5
    42ea:	4645      	mov	r5, r8
    42ec:	4690      	mov	r8, r2
    42ee:	003a      	movs	r2, r7
    42f0:	0026      	movs	r6, r4
    42f2:	465f      	mov	r7, fp
    42f4:	464c      	mov	r4, r9
    42f6:	4693      	mov	fp, r2
    42f8:	4689      	mov	r9, r1
    42fa:	e000      	b.n	42fe <put_fat.part.4+0x252>
    42fc:	69f3      	ldr	r3, [r6, #28]
					wsect += fs->fsize;
    42fe:	18ed      	adds	r5, r5, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4300:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    4302:	7870      	ldrb	r0, [r6, #1]
    4304:	2301      	movs	r3, #1
    4306:	002a      	movs	r2, r5
    4308:	0039      	movs	r1, r7
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    430a:	b2e4      	uxtb	r4, r4
					disk_write(fs->drv, fs->win, wsect, 1);
    430c:	47d0      	blx	sl
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    430e:	2c01      	cmp	r4, #1
    4310:	d1f4      	bne.n	42fc <put_fat.part.4+0x250>
    4312:	4643      	mov	r3, r8
    4314:	0034      	movs	r4, r6
    4316:	9300      	str	r3, [sp, #0]
    4318:	464d      	mov	r5, r9
    431a:	465f      	mov	r7, fp
    431c:	e761      	b.n	41e2 <put_fat.part.4+0x136>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    431e:	2330      	movs	r3, #48	; 0x30
    4320:	469b      	mov	fp, r3
    4322:	4e41      	ldr	r6, [pc, #260]	; (4428 <put_fat.part.4+0x37c>)
    4324:	4483      	add	fp, r0
    4326:	3b2f      	subs	r3, #47	; 0x2f
    4328:	7840      	ldrb	r0, [r0, #1]
    432a:	4642      	mov	r2, r8
    432c:	4659      	mov	r1, fp
    432e:	46b2      	mov	sl, r6
    4330:	47b0      	blx	r6
    4332:	2800      	cmp	r0, #0
    4334:	d163      	bne.n	43fe <put_fat.part.4+0x352>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    4336:	69e3      	ldr	r3, [r4, #28]
    4338:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
    433a:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    433c:	189a      	adds	r2, r3, r2
    433e:	4590      	cmp	r8, r2
    4340:	d283      	bcs.n	424a <put_fat.part.4+0x19e>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4342:	78e2      	ldrb	r2, [r4, #3]
    4344:	4691      	mov	r9, r2
    4346:	2a01      	cmp	r2, #1
    4348:	d800      	bhi.n	434c <put_fat.part.4+0x2a0>
    434a:	e77e      	b.n	424a <put_fat.part.4+0x19e>
    434c:	9a00      	ldr	r2, [sp, #0]
    434e:	0029      	movs	r1, r5
    4350:	4645      	mov	r5, r8
    4352:	4690      	mov	r8, r2
    4354:	003a      	movs	r2, r7
    4356:	0026      	movs	r6, r4
    4358:	465f      	mov	r7, fp
    435a:	464c      	mov	r4, r9
    435c:	4693      	mov	fp, r2
    435e:	4689      	mov	r9, r1
    4360:	e000      	b.n	4364 <put_fat.part.4+0x2b8>
    4362:	69f3      	ldr	r3, [r6, #28]
					wsect += fs->fsize;
    4364:	18ed      	adds	r5, r5, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4366:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    4368:	7870      	ldrb	r0, [r6, #1]
    436a:	2301      	movs	r3, #1
    436c:	002a      	movs	r2, r5
    436e:	0039      	movs	r1, r7
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4370:	b2e4      	uxtb	r4, r4
					disk_write(fs->drv, fs->win, wsect, 1);
    4372:	47d0      	blx	sl
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4374:	2c01      	cmp	r4, #1
    4376:	d1f4      	bne.n	4362 <put_fat.part.4+0x2b6>
    4378:	4643      	mov	r3, r8
    437a:	0034      	movs	r4, r6
    437c:	9300      	str	r3, [sp, #0]
    437e:	464d      	mov	r5, r9
    4380:	465f      	mov	r7, fp
    4382:	e762      	b.n	424a <put_fat.part.4+0x19e>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    4384:	2330      	movs	r3, #48	; 0x30
    4386:	469c      	mov	ip, r3
    4388:	44a4      	add	ip, r4
    438a:	4663      	mov	r3, ip
    438c:	9301      	str	r3, [sp, #4]
    438e:	4661      	mov	r1, ip
    4390:	7860      	ldrb	r0, [r4, #1]
    4392:	2301      	movs	r3, #1
    4394:	4642      	mov	r2, r8
    4396:	4e24      	ldr	r6, [pc, #144]	; (4428 <put_fat.part.4+0x37c>)
    4398:	47b0      	blx	r6
    439a:	2800      	cmp	r0, #0
    439c:	d12f      	bne.n	43fe <put_fat.part.4+0x352>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    439e:	69e3      	ldr	r3, [r4, #28]
    43a0:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
    43a2:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    43a4:	189a      	adds	r2, r3, r2
    43a6:	4590      	cmp	r8, r2
    43a8:	d300      	bcc.n	43ac <put_fat.part.4+0x300>
    43aa:	e6ab      	b.n	4104 <put_fat.part.4+0x58>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    43ac:	78e2      	ldrb	r2, [r4, #3]
    43ae:	4693      	mov	fp, r2
    43b0:	2a01      	cmp	r2, #1
    43b2:	d800      	bhi.n	43b6 <put_fat.part.4+0x30a>
    43b4:	e6a6      	b.n	4104 <put_fat.part.4+0x58>
    43b6:	0032      	movs	r2, r6
    43b8:	9900      	ldr	r1, [sp, #0]
    43ba:	46aa      	mov	sl, r5
    43bc:	0026      	movs	r6, r4
    43be:	4645      	mov	r5, r8
    43c0:	465c      	mov	r4, fp
    43c2:	4688      	mov	r8, r1
    43c4:	46bb      	mov	fp, r7
    43c6:	0017      	movs	r7, r2
    43c8:	e000      	b.n	43cc <put_fat.part.4+0x320>
    43ca:	69f3      	ldr	r3, [r6, #28]
					wsect += fs->fsize;
    43cc:	18ed      	adds	r5, r5, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    43ce:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    43d0:	7870      	ldrb	r0, [r6, #1]
    43d2:	2301      	movs	r3, #1
    43d4:	002a      	movs	r2, r5
    43d6:	9901      	ldr	r1, [sp, #4]
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    43d8:	b2e4      	uxtb	r4, r4
					disk_write(fs->drv, fs->win, wsect, 1);
    43da:	47b8      	blx	r7
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    43dc:	2c01      	cmp	r4, #1
    43de:	d1f4      	bne.n	43ca <put_fat.part.4+0x31e>
    43e0:	4643      	mov	r3, r8
    43e2:	0034      	movs	r4, r6
    43e4:	9300      	str	r3, [sp, #0]
    43e6:	4655      	mov	r5, sl
    43e8:	465f      	mov	r7, fp
    43ea:	e68b      	b.n	4104 <put_fat.part.4+0x58>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    43ec:	0021      	movs	r1, r4
    43ee:	7860      	ldrb	r0, [r4, #1]
    43f0:	2301      	movs	r3, #1
    43f2:	464a      	mov	r2, r9
    43f4:	3130      	adds	r1, #48	; 0x30
    43f6:	4e0d      	ldr	r6, [pc, #52]	; (442c <put_fat.part.4+0x380>)
    43f8:	47b0      	blx	r6
    43fa:	2800      	cmp	r0, #0
    43fc:	d001      	beq.n	4402 <put_fat.part.4+0x356>
			res = FR_INT_ERR;
    43fe:	2001      	movs	r0, #1
    4400:	e668      	b.n	40d4 <put_fat.part.4+0x28>
			fs->winsect = sector;
    4402:	464b      	mov	r3, r9
    4404:	6a22      	ldr	r2, [r4, #32]
    4406:	62e3      	str	r3, [r4, #44]	; 0x2c
    4408:	46c8      	mov	r8, r9
    440a:	e682      	b.n	4112 <put_fat.part.4+0x66>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    440c:	7860      	ldrb	r0, [r4, #1]
    440e:	2301      	movs	r3, #1
    4410:	002a      	movs	r2, r5
    4412:	9901      	ldr	r1, [sp, #4]
    4414:	4e05      	ldr	r6, [pc, #20]	; (442c <put_fat.part.4+0x380>)
    4416:	47b0      	blx	r6
    4418:	2800      	cmp	r0, #0
    441a:	d1f0      	bne.n	43fe <put_fat.part.4+0x352>
			fs->winsect = sector;
    441c:	62e5      	str	r5, [r4, #44]	; 0x2c
    441e:	e6c8      	b.n	41b2 <put_fat.part.4+0x106>
			p = &fs->win[bc % SS(fs)];
    4420:	9b00      	ldr	r3, [sp, #0]
    4422:	05de      	lsls	r6, r3, #23
    4424:	0df6      	lsrs	r6, r6, #23
    4426:	e6ca      	b.n	41be <put_fat.part.4+0x112>
    4428:	00003dc1 	.word	0x00003dc1
    442c:	00003d3d 	.word	0x00003d3d

00004430 <remove_chain.part.6>:
/*-----------------------------------------------------------------------*/
/* FAT handling - Remove a cluster chain                                 */
/*-----------------------------------------------------------------------*/
#if !_FS_READONLY
static
FRESULT remove_chain (
    4430:	b5f0      	push	{r4, r5, r6, r7, lr}
    4432:	4657      	mov	r7, sl
    4434:	464e      	mov	r6, r9
    4436:	46de      	mov	lr, fp
    4438:	4645      	mov	r5, r8
    443a:	0004      	movs	r4, r0
    443c:	b5e0      	push	{r5, r6, r7, lr}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    443e:	4bc7      	ldr	r3, [pc, #796]	; (475c <remove_chain.part.6+0x32c>)
FRESULT remove_chain (
    4440:	b085      	sub	sp, #20
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    4442:	469a      	mov	sl, r3
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
    4444:	69a3      	ldr	r3, [r4, #24]
FRESULT remove_chain (
    4446:	000e      	movs	r6, r1
		while (clst < fs->n_fatent) {			/* Not a last link? */
    4448:	429e      	cmp	r6, r3
    444a:	d300      	bcc.n	444e <remove_chain.part.6+0x1e>
    444c:	e087      	b.n	455e <remove_chain.part.6+0x12e>
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    444e:	2e01      	cmp	r6, #1
    4450:	d96f      	bls.n	4532 <remove_chain.part.6+0x102>
	switch (fs->fs_type) {
    4452:	7823      	ldrb	r3, [r4, #0]
    4454:	2b02      	cmp	r3, #2
    4456:	d100      	bne.n	445a <remove_chain.part.6+0x2a>
    4458:	e083      	b.n	4562 <remove_chain.part.6+0x132>
    445a:	2b03      	cmp	r3, #3
    445c:	d040      	beq.n	44e0 <remove_chain.part.6+0xb0>
    445e:	2b01      	cmp	r3, #1
    4460:	d007      	beq.n	4472 <remove_chain.part.6+0x42>
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    4462:	2001      	movs	r0, #1
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
    4464:	b005      	add	sp, #20
    4466:	bc3c      	pop	{r2, r3, r4, r5}
    4468:	4690      	mov	r8, r2
    446a:	4699      	mov	r9, r3
    446c:	46a2      	mov	sl, r4
    446e:	46ab      	mov	fp, r5
    4470:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bc = (UINT)clst; bc += bc / 2;
    4472:	0875      	lsrs	r5, r6, #1
    4474:	19ad      	adds	r5, r5, r6
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    4476:	0a6b      	lsrs	r3, r5, #9
    4478:	4698      	mov	r8, r3
    447a:	6a22      	ldr	r2, [r4, #32]
	wsect = fs->winsect;
    447c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    447e:	4490      	add	r8, r2
	wsect = fs->winsect;
    4480:	001f      	movs	r7, r3
	if (wsect != sector) {	/* Changed current window */
    4482:	4598      	cmp	r8, r3
    4484:	d00a      	beq.n	449c <remove_chain.part.6+0x6c>
		if (fs->wflag) {	/* Write back dirty window if needed */
    4486:	7923      	ldrb	r3, [r4, #4]
    4488:	2b00      	cmp	r3, #0
    448a:	d000      	beq.n	448e <remove_chain.part.6+0x5e>
    448c:	e102      	b.n	4694 <remove_chain.part.6+0x264>
		if (sector) {
    448e:	4643      	mov	r3, r8
    4490:	2b00      	cmp	r3, #0
    4492:	d000      	beq.n	4496 <remove_chain.part.6+0x66>
    4494:	e088      	b.n	45a8 <remove_chain.part.6+0x178>
    4496:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4498:	6a22      	ldr	r2, [r4, #32]
    449a:	001f      	movs	r7, r3
		wc = fs->win[bc % SS(fs)]; bc++;
    449c:	05eb      	lsls	r3, r5, #23
    449e:	0ddb      	lsrs	r3, r3, #23
    44a0:	18e3      	adds	r3, r4, r3
    44a2:	3330      	adds	r3, #48	; 0x30
    44a4:	781b      	ldrb	r3, [r3, #0]
    44a6:	3501      	adds	r5, #1
    44a8:	4698      	mov	r8, r3
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    44aa:	0a6b      	lsrs	r3, r5, #9
    44ac:	4699      	mov	r9, r3
    44ae:	4491      	add	r9, r2
	if (wsect != sector) {	/* Changed current window */
    44b0:	45b9      	cmp	r9, r7
    44b2:	d007      	beq.n	44c4 <remove_chain.part.6+0x94>
		if (fs->wflag) {	/* Write back dirty window if needed */
    44b4:	7923      	ldrb	r3, [r4, #4]
    44b6:	2b00      	cmp	r3, #0
    44b8:	d000      	beq.n	44bc <remove_chain.part.6+0x8c>
    44ba:	e12c      	b.n	4716 <remove_chain.part.6+0x2e6>
		if (sector) {
    44bc:	464b      	mov	r3, r9
    44be:	2b00      	cmp	r3, #0
    44c0:	d000      	beq.n	44c4 <remove_chain.part.6+0x94>
    44c2:	e11b      	b.n	46fc <remove_chain.part.6+0x2cc>
		wc |= fs->win[bc % SS(fs)] << 8;
    44c4:	4642      	mov	r2, r8
    44c6:	05ed      	lsls	r5, r5, #23
    44c8:	0ded      	lsrs	r5, r5, #23
    44ca:	1965      	adds	r5, r4, r5
    44cc:	3530      	adds	r5, #48	; 0x30
    44ce:	782b      	ldrb	r3, [r5, #0]
    44d0:	021b      	lsls	r3, r3, #8
    44d2:	4313      	orrs	r3, r2
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    44d4:	091d      	lsrs	r5, r3, #4
    44d6:	07f2      	lsls	r2, r6, #31
    44d8:	d424      	bmi.n	4524 <remove_chain.part.6+0xf4>
    44da:	051d      	lsls	r5, r3, #20
    44dc:	0d2d      	lsrs	r5, r5, #20
    44de:	e021      	b.n	4524 <remove_chain.part.6+0xf4>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    44e0:	6a23      	ldr	r3, [r4, #32]
    44e2:	09f5      	lsrs	r5, r6, #7
    44e4:	469c      	mov	ip, r3
	wsect = fs->winsect;
    44e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    44e8:	4465      	add	r5, ip
	wsect = fs->winsect;
    44ea:	469b      	mov	fp, r3
	if (wsect != sector) {	/* Changed current window */
    44ec:	429d      	cmp	r5, r3
    44ee:	d004      	beq.n	44fa <remove_chain.part.6+0xca>
		if (fs->wflag) {	/* Write back dirty window if needed */
    44f0:	7923      	ldrb	r3, [r4, #4]
    44f2:	2b00      	cmp	r3, #0
    44f4:	d173      	bne.n	45de <remove_chain.part.6+0x1ae>
		if (sector) {
    44f6:	2d00      	cmp	r5, #0
    44f8:	d165      	bne.n	45c6 <remove_chain.part.6+0x196>
		p = &fs->win[clst * 4 % SS(fs)];
    44fa:	22fe      	movs	r2, #254	; 0xfe
    44fc:	00b3      	lsls	r3, r6, #2
    44fe:	0052      	lsls	r2, r2, #1
    4500:	4013      	ands	r3, r2
    4502:	001a      	movs	r2, r3
    4504:	3230      	adds	r2, #48	; 0x30
    4506:	18a2      	adds	r2, r4, r2
		return LD_DWORD(p) & 0x0FFFFFFF;
    4508:	78d5      	ldrb	r5, [r2, #3]
    450a:	7891      	ldrb	r1, [r2, #2]
    450c:	18e3      	adds	r3, r4, r3
    450e:	3330      	adds	r3, #48	; 0x30
    4510:	781b      	ldrb	r3, [r3, #0]
    4512:	062d      	lsls	r5, r5, #24
    4514:	0409      	lsls	r1, r1, #16
    4516:	430d      	orrs	r5, r1
    4518:	431d      	orrs	r5, r3
    451a:	7853      	ldrb	r3, [r2, #1]
    451c:	021b      	lsls	r3, r3, #8
    451e:	431d      	orrs	r5, r3
    4520:	012d      	lsls	r5, r5, #4
    4522:	092d      	lsrs	r5, r5, #4
			if (nxt == 0) break;				/* Empty cluster? */
    4524:	2d00      	cmp	r5, #0
    4526:	d01a      	beq.n	455e <remove_chain.part.6+0x12e>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    4528:	2d01      	cmp	r5, #1
    452a:	d002      	beq.n	4532 <remove_chain.part.6+0x102>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    452c:	69a3      	ldr	r3, [r4, #24]
    452e:	429e      	cmp	r6, r3
    4530:	d301      	bcc.n	4536 <remove_chain.part.6+0x106>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    4532:	2002      	movs	r0, #2
    4534:	e796      	b.n	4464 <remove_chain.part.6+0x34>
    4536:	2200      	movs	r2, #0
    4538:	0031      	movs	r1, r6
    453a:	0020      	movs	r0, r4
    453c:	4b88      	ldr	r3, [pc, #544]	; (4760 <remove_chain.part.6+0x330>)
    453e:	4798      	blx	r3
			if (res != FR_OK) break;
    4540:	2800      	cmp	r0, #0
    4542:	d000      	beq.n	4546 <remove_chain.part.6+0x116>
    4544:	e78e      	b.n	4464 <remove_chain.part.6+0x34>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    4546:	6923      	ldr	r3, [r4, #16]
    4548:	1c5a      	adds	r2, r3, #1
    454a:	d003      	beq.n	4554 <remove_chain.part.6+0x124>
				fs->free_clust++;
    454c:	3301      	adds	r3, #1
    454e:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
    4550:	2301      	movs	r3, #1
    4552:	7163      	strb	r3, [r4, #5]
		while (clst < fs->n_fatent) {			/* Not a last link? */
    4554:	69a3      	ldr	r3, [r4, #24]
FRESULT remove_chain (
    4556:	002e      	movs	r6, r5
		while (clst < fs->n_fatent) {			/* Not a last link? */
    4558:	429e      	cmp	r6, r3
    455a:	d200      	bcs.n	455e <remove_chain.part.6+0x12e>
    455c:	e777      	b.n	444e <remove_chain.part.6+0x1e>
FRESULT remove_chain (
    455e:	2000      	movs	r0, #0
    4560:	e780      	b.n	4464 <remove_chain.part.6+0x34>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    4562:	6a23      	ldr	r3, [r4, #32]
    4564:	0a35      	lsrs	r5, r6, #8
    4566:	469c      	mov	ip, r3
	wsect = fs->winsect;
    4568:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    456a:	4465      	add	r5, ip
	if (wsect != sector) {	/* Changed current window */
    456c:	42bd      	cmp	r5, r7
    456e:	d004      	beq.n	457a <remove_chain.part.6+0x14a>
		if (fs->wflag) {	/* Write back dirty window if needed */
    4570:	7923      	ldrb	r3, [r4, #4]
    4572:	2b00      	cmp	r3, #0
    4574:	d162      	bne.n	463c <remove_chain.part.6+0x20c>
		if (sector) {
    4576:	2d00      	cmp	r5, #0
    4578:	d10a      	bne.n	4590 <remove_chain.part.6+0x160>
		p = &fs->win[clst * 2 % SS(fs)];
    457a:	22ff      	movs	r2, #255	; 0xff
    457c:	0073      	lsls	r3, r6, #1
    457e:	0052      	lsls	r2, r2, #1
    4580:	4013      	ands	r3, r2
		return LD_WORD(p);
    4582:	18e3      	adds	r3, r4, r3
    4584:	3330      	adds	r3, #48	; 0x30
    4586:	785d      	ldrb	r5, [r3, #1]
    4588:	781b      	ldrb	r3, [r3, #0]
    458a:	022d      	lsls	r5, r5, #8
    458c:	431d      	orrs	r5, r3
    458e:	e7c9      	b.n	4524 <remove_chain.part.6+0xf4>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    4590:	0021      	movs	r1, r4
    4592:	7860      	ldrb	r0, [r4, #1]
    4594:	2301      	movs	r3, #1
    4596:	002a      	movs	r2, r5
    4598:	3130      	adds	r1, #48	; 0x30
    459a:	4f72      	ldr	r7, [pc, #456]	; (4764 <remove_chain.part.6+0x334>)
    459c:	47b8      	blx	r7
    459e:	2800      	cmp	r0, #0
    45a0:	d000      	beq.n	45a4 <remove_chain.part.6+0x174>
    45a2:	e75e      	b.n	4462 <remove_chain.part.6+0x32>
			fs->winsect = sector;
    45a4:	62e5      	str	r5, [r4, #44]	; 0x2c
    45a6:	e7e8      	b.n	457a <remove_chain.part.6+0x14a>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    45a8:	0021      	movs	r1, r4
    45aa:	7860      	ldrb	r0, [r4, #1]
    45ac:	2301      	movs	r3, #1
    45ae:	4642      	mov	r2, r8
    45b0:	3130      	adds	r1, #48	; 0x30
    45b2:	4f6c      	ldr	r7, [pc, #432]	; (4764 <remove_chain.part.6+0x334>)
    45b4:	47b8      	blx	r7
    45b6:	2800      	cmp	r0, #0
    45b8:	d000      	beq.n	45bc <remove_chain.part.6+0x18c>
    45ba:	e752      	b.n	4462 <remove_chain.part.6+0x32>
			fs->winsect = sector;
    45bc:	4643      	mov	r3, r8
    45be:	6a22      	ldr	r2, [r4, #32]
    45c0:	62e3      	str	r3, [r4, #44]	; 0x2c
    45c2:	4647      	mov	r7, r8
    45c4:	e76a      	b.n	449c <remove_chain.part.6+0x6c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    45c6:	0021      	movs	r1, r4
    45c8:	7860      	ldrb	r0, [r4, #1]
    45ca:	2301      	movs	r3, #1
    45cc:	002a      	movs	r2, r5
    45ce:	3130      	adds	r1, #48	; 0x30
    45d0:	4f64      	ldr	r7, [pc, #400]	; (4764 <remove_chain.part.6+0x334>)
    45d2:	47b8      	blx	r7
    45d4:	2800      	cmp	r0, #0
    45d6:	d000      	beq.n	45da <remove_chain.part.6+0x1aa>
    45d8:	e743      	b.n	4462 <remove_chain.part.6+0x32>
			fs->winsect = sector;
    45da:	62e5      	str	r5, [r4, #44]	; 0x2c
    45dc:	e78d      	b.n	44fa <remove_chain.part.6+0xca>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    45de:	2330      	movs	r3, #48	; 0x30
    45e0:	4699      	mov	r9, r3
    45e2:	44a1      	add	r9, r4
    45e4:	7860      	ldrb	r0, [r4, #1]
    45e6:	3b2f      	subs	r3, #47	; 0x2f
    45e8:	465a      	mov	r2, fp
    45ea:	4649      	mov	r1, r9
    45ec:	4f5b      	ldr	r7, [pc, #364]	; (475c <remove_chain.part.6+0x32c>)
    45ee:	47b8      	blx	r7
    45f0:	2800      	cmp	r0, #0
    45f2:	d000      	beq.n	45f6 <remove_chain.part.6+0x1c6>
    45f4:	e735      	b.n	4462 <remove_chain.part.6+0x32>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    45f6:	69e3      	ldr	r3, [r4, #28]
    45f8:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
    45fa:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    45fc:	189a      	adds	r2, r3, r2
    45fe:	4593      	cmp	fp, r2
    4600:	d300      	bcc.n	4604 <remove_chain.part.6+0x1d4>
    4602:	e778      	b.n	44f6 <remove_chain.part.6+0xc6>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4604:	78e2      	ldrb	r2, [r4, #3]
    4606:	2a01      	cmp	r2, #1
    4608:	d800      	bhi.n	460c <remove_chain.part.6+0x1dc>
    460a:	e774      	b.n	44f6 <remove_chain.part.6+0xc6>
    460c:	0021      	movs	r1, r4
    460e:	46a8      	mov	r8, r5
    4610:	465c      	mov	r4, fp
    4612:	0017      	movs	r7, r2
    4614:	46cb      	mov	fp, r9
    4616:	000d      	movs	r5, r1
    4618:	46b1      	mov	r9, r6
    461a:	e000      	b.n	461e <remove_chain.part.6+0x1ee>
    461c:	69eb      	ldr	r3, [r5, #28]
					wsect += fs->fsize;
    461e:	18e4      	adds	r4, r4, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4620:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    4622:	7868      	ldrb	r0, [r5, #1]
    4624:	2301      	movs	r3, #1
    4626:	0022      	movs	r2, r4
    4628:	4659      	mov	r1, fp
    462a:	4e4c      	ldr	r6, [pc, #304]	; (475c <remove_chain.part.6+0x32c>)
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    462c:	b2ff      	uxtb	r7, r7
					disk_write(fs->drv, fs->win, wsect, 1);
    462e:	47b0      	blx	r6
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4630:	2f01      	cmp	r7, #1
    4632:	d1f3      	bne.n	461c <remove_chain.part.6+0x1ec>
    4634:	002c      	movs	r4, r5
    4636:	464e      	mov	r6, r9
    4638:	4645      	mov	r5, r8
    463a:	e75c      	b.n	44f6 <remove_chain.part.6+0xc6>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    463c:	2330      	movs	r3, #48	; 0x30
    463e:	4699      	mov	r9, r3
    4640:	44a1      	add	r9, r4
    4642:	7860      	ldrb	r0, [r4, #1]
    4644:	3b2f      	subs	r3, #47	; 0x2f
    4646:	003a      	movs	r2, r7
    4648:	4649      	mov	r1, r9
    464a:	47d0      	blx	sl
    464c:	2800      	cmp	r0, #0
    464e:	d000      	beq.n	4652 <remove_chain.part.6+0x222>
    4650:	e707      	b.n	4462 <remove_chain.part.6+0x32>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    4652:	69e3      	ldr	r3, [r4, #28]
    4654:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
    4656:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    4658:	189a      	adds	r2, r3, r2
    465a:	4297      	cmp	r7, r2
    465c:	d28b      	bcs.n	4576 <remove_chain.part.6+0x146>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    465e:	78e2      	ldrb	r2, [r4, #3]
    4660:	2a01      	cmp	r2, #1
    4662:	d988      	bls.n	4576 <remove_chain.part.6+0x146>
    4664:	0021      	movs	r1, r4
    4666:	003c      	movs	r4, r7
    4668:	0017      	movs	r7, r2
    466a:	0032      	movs	r2, r6
    466c:	46a8      	mov	r8, r5
    466e:	464e      	mov	r6, r9
    4670:	000d      	movs	r5, r1
    4672:	4691      	mov	r9, r2
    4674:	e000      	b.n	4678 <remove_chain.part.6+0x248>
    4676:	69eb      	ldr	r3, [r5, #28]
					wsect += fs->fsize;
    4678:	18e4      	adds	r4, r4, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    467a:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    467c:	7868      	ldrb	r0, [r5, #1]
    467e:	2301      	movs	r3, #1
    4680:	0022      	movs	r2, r4
    4682:	0031      	movs	r1, r6
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4684:	b2ff      	uxtb	r7, r7
					disk_write(fs->drv, fs->win, wsect, 1);
    4686:	47d0      	blx	sl
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4688:	2f01      	cmp	r7, #1
    468a:	d1f4      	bne.n	4676 <remove_chain.part.6+0x246>
    468c:	002c      	movs	r4, r5
    468e:	464e      	mov	r6, r9
    4690:	4645      	mov	r5, r8
    4692:	e770      	b.n	4576 <remove_chain.part.6+0x146>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    4694:	2330      	movs	r3, #48	; 0x30
    4696:	469b      	mov	fp, r3
    4698:	46b9      	mov	r9, r7
    469a:	44a3      	add	fp, r4
    469c:	003a      	movs	r2, r7
    469e:	4f2f      	ldr	r7, [pc, #188]	; (475c <remove_chain.part.6+0x32c>)
    46a0:	7860      	ldrb	r0, [r4, #1]
    46a2:	3b2f      	subs	r3, #47	; 0x2f
    46a4:	4659      	mov	r1, fp
    46a6:	9701      	str	r7, [sp, #4]
    46a8:	47b8      	blx	r7
    46aa:	2800      	cmp	r0, #0
    46ac:	d000      	beq.n	46b0 <remove_chain.part.6+0x280>
    46ae:	e6d8      	b.n	4462 <remove_chain.part.6+0x32>
			fs->wflag = 0;
    46b0:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    46b2:	4648      	mov	r0, r9
    46b4:	69e3      	ldr	r3, [r4, #28]
    46b6:	6a22      	ldr	r2, [r4, #32]
    46b8:	189a      	adds	r2, r3, r2
    46ba:	4290      	cmp	r0, r2
    46bc:	d300      	bcc.n	46c0 <remove_chain.part.6+0x290>
    46be:	e6e6      	b.n	448e <remove_chain.part.6+0x5e>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    46c0:	78e2      	ldrb	r2, [r4, #3]
    46c2:	2a01      	cmp	r2, #1
    46c4:	d800      	bhi.n	46c8 <remove_chain.part.6+0x298>
    46c6:	e6e2      	b.n	448e <remove_chain.part.6+0x5e>
    46c8:	0021      	movs	r1, r4
    46ca:	0004      	movs	r4, r0
    46cc:	4658      	mov	r0, fp
    46ce:	46a9      	mov	r9, r5
    46d0:	0017      	movs	r7, r2
    46d2:	000d      	movs	r5, r1
    46d4:	9002      	str	r0, [sp, #8]
    46d6:	46b3      	mov	fp, r6
    46d8:	0001      	movs	r1, r0
    46da:	e001      	b.n	46e0 <remove_chain.part.6+0x2b0>
    46dc:	69eb      	ldr	r3, [r5, #28]
    46de:	9902      	ldr	r1, [sp, #8]
					wsect += fs->fsize;
    46e0:	18e4      	adds	r4, r4, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    46e2:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    46e4:	7868      	ldrb	r0, [r5, #1]
    46e6:	2301      	movs	r3, #1
    46e8:	0022      	movs	r2, r4
    46ea:	9e01      	ldr	r6, [sp, #4]
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    46ec:	b2ff      	uxtb	r7, r7
					disk_write(fs->drv, fs->win, wsect, 1);
    46ee:	47b0      	blx	r6
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    46f0:	2f01      	cmp	r7, #1
    46f2:	d1f3      	bne.n	46dc <remove_chain.part.6+0x2ac>
    46f4:	002c      	movs	r4, r5
    46f6:	465e      	mov	r6, fp
    46f8:	464d      	mov	r5, r9
    46fa:	e6c8      	b.n	448e <remove_chain.part.6+0x5e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    46fc:	0021      	movs	r1, r4
    46fe:	7860      	ldrb	r0, [r4, #1]
    4700:	2301      	movs	r3, #1
    4702:	464a      	mov	r2, r9
    4704:	3130      	adds	r1, #48	; 0x30
    4706:	4f17      	ldr	r7, [pc, #92]	; (4764 <remove_chain.part.6+0x334>)
    4708:	47b8      	blx	r7
    470a:	2800      	cmp	r0, #0
    470c:	d000      	beq.n	4710 <remove_chain.part.6+0x2e0>
    470e:	e6a8      	b.n	4462 <remove_chain.part.6+0x32>
			fs->winsect = sector;
    4710:	464b      	mov	r3, r9
    4712:	62e3      	str	r3, [r4, #44]	; 0x2c
    4714:	e6d6      	b.n	44c4 <remove_chain.part.6+0x94>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    4716:	2330      	movs	r3, #48	; 0x30
    4718:	469c      	mov	ip, r3
    471a:	44a4      	add	ip, r4
    471c:	4661      	mov	r1, ip
    471e:	46bb      	mov	fp, r7
    4720:	003a      	movs	r2, r7
    4722:	4f0e      	ldr	r7, [pc, #56]	; (475c <remove_chain.part.6+0x32c>)
    4724:	7860      	ldrb	r0, [r4, #1]
    4726:	2301      	movs	r3, #1
    4728:	9102      	str	r1, [sp, #8]
    472a:	9701      	str	r7, [sp, #4]
    472c:	47b8      	blx	r7
    472e:	2800      	cmp	r0, #0
    4730:	d000      	beq.n	4734 <remove_chain.part.6+0x304>
    4732:	e696      	b.n	4462 <remove_chain.part.6+0x32>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    4734:	69e3      	ldr	r3, [r4, #28]
    4736:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
    4738:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    473a:	189a      	adds	r2, r3, r2
    473c:	4658      	mov	r0, fp
    473e:	455a      	cmp	r2, fp
    4740:	d800      	bhi.n	4744 <remove_chain.part.6+0x314>
    4742:	e6bb      	b.n	44bc <remove_chain.part.6+0x8c>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4744:	78e2      	ldrb	r2, [r4, #3]
    4746:	4693      	mov	fp, r2
    4748:	2a01      	cmp	r2, #1
    474a:	d800      	bhi.n	474e <remove_chain.part.6+0x31e>
    474c:	e6b6      	b.n	44bc <remove_chain.part.6+0x8c>
    474e:	0022      	movs	r2, r4
    4750:	465f      	mov	r7, fp
    4752:	0004      	movs	r4, r0
    4754:	46ab      	mov	fp, r5
    4756:	9603      	str	r6, [sp, #12]
    4758:	0015      	movs	r5, r2
    475a:	e006      	b.n	476a <remove_chain.part.6+0x33a>
    475c:	00003dc1 	.word	0x00003dc1
    4760:	000040ad 	.word	0x000040ad
    4764:	00003d3d 	.word	0x00003d3d
    4768:	69eb      	ldr	r3, [r5, #28]
					wsect += fs->fsize;
    476a:	18e4      	adds	r4, r4, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    476c:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    476e:	7868      	ldrb	r0, [r5, #1]
    4770:	2301      	movs	r3, #1
    4772:	0022      	movs	r2, r4
    4774:	9902      	ldr	r1, [sp, #8]
    4776:	9e01      	ldr	r6, [sp, #4]
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4778:	b2ff      	uxtb	r7, r7
					disk_write(fs->drv, fs->win, wsect, 1);
    477a:	47b0      	blx	r6
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    477c:	2f01      	cmp	r7, #1
    477e:	d1f3      	bne.n	4768 <remove_chain.part.6+0x338>
    4780:	002c      	movs	r4, r5
    4782:	9e03      	ldr	r6, [sp, #12]
    4784:	465d      	mov	r5, fp
    4786:	e699      	b.n	44bc <remove_chain.part.6+0x8c>

00004788 <get_fat.part.3>:
static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
    4788:	b5f0      	push	{r4, r5, r6, r7, lr}
    478a:	4645      	mov	r5, r8
    478c:	46de      	mov	lr, fp
    478e:	4657      	mov	r7, sl
    4790:	464e      	mov	r6, r9
    4792:	b5e0      	push	{r5, r6, r7, lr}
	switch (fs->fs_type) {
    4794:	7803      	ldrb	r3, [r0, #0]
static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
    4796:	b085      	sub	sp, #20
    4798:	0004      	movs	r4, r0
    479a:	000d      	movs	r5, r1
	switch (fs->fs_type) {
    479c:	2b02      	cmp	r3, #2
    479e:	d100      	bne.n	47a2 <get_fat.part.3+0x1a>
    47a0:	e074      	b.n	488c <get_fat.part.3+0x104>
    47a2:	2b03      	cmp	r3, #3
    47a4:	d044      	beq.n	4830 <get_fat.part.3+0xa8>
    47a6:	2b01      	cmp	r3, #1
    47a8:	d008      	beq.n	47bc <get_fat.part.3+0x34>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    47aa:	2001      	movs	r0, #1
    47ac:	4240      	negs	r0, r0
}
    47ae:	b005      	add	sp, #20
    47b0:	bc3c      	pop	{r2, r3, r4, r5}
    47b2:	4690      	mov	r8, r2
    47b4:	4699      	mov	r9, r3
    47b6:	46a2      	mov	sl, r4
    47b8:	46ab      	mov	fp, r5
    47ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bc = (UINT)clst; bc += bc / 2;
    47bc:	084e      	lsrs	r6, r1, #1
    47be:	1873      	adds	r3, r6, r1
    47c0:	9301      	str	r3, [sp, #4]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    47c2:	0a5b      	lsrs	r3, r3, #9
    47c4:	469a      	mov	sl, r3
    47c6:	6a02      	ldr	r2, [r0, #32]
	wsect = fs->winsect;
    47c8:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    47ca:	4492      	add	sl, r2
	if (wsect != sector) {	/* Changed current window */
    47cc:	45ba      	cmp	sl, r7
    47ce:	d009      	beq.n	47e4 <get_fat.part.3+0x5c>
		if (fs->wflag) {	/* Write back dirty window if needed */
    47d0:	7903      	ldrb	r3, [r0, #4]
    47d2:	2b00      	cmp	r3, #0
    47d4:	d000      	beq.n	47d8 <get_fat.part.3+0x50>
    47d6:	e0aa      	b.n	492e <get_fat.part.3+0x1a6>
		if (sector) {
    47d8:	4653      	mov	r3, sl
    47da:	2b00      	cmp	r3, #0
    47dc:	d000      	beq.n	47e0 <get_fat.part.3+0x58>
    47de:	e108      	b.n	49f2 <get_fat.part.3+0x26a>
    47e0:	6a22      	ldr	r2, [r4, #32]
    47e2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
		wc = fs->win[bc % SS(fs)]; bc++;
    47e4:	9901      	ldr	r1, [sp, #4]
    47e6:	05cb      	lsls	r3, r1, #23
    47e8:	0ddb      	lsrs	r3, r3, #23
    47ea:	18e3      	adds	r3, r4, r3
    47ec:	3330      	adds	r3, #48	; 0x30
    47ee:	781b      	ldrb	r3, [r3, #0]
    47f0:	469a      	mov	sl, r3
    47f2:	000b      	movs	r3, r1
    47f4:	3301      	adds	r3, #1
    47f6:	9301      	str	r3, [sp, #4]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    47f8:	0a5b      	lsrs	r3, r3, #9
    47fa:	4699      	mov	r9, r3
    47fc:	4491      	add	r9, r2
	if (wsect != sector) {	/* Changed current window */
    47fe:	45b9      	cmp	r9, r7
    4800:	d007      	beq.n	4812 <get_fat.part.3+0x8a>
		if (fs->wflag) {	/* Write back dirty window if needed */
    4802:	7923      	ldrb	r3, [r4, #4]
    4804:	2b00      	cmp	r3, #0
    4806:	d000      	beq.n	480a <get_fat.part.3+0x82>
    4808:	e10f      	b.n	4a2a <get_fat.part.3+0x2a2>
		if (sector) {
    480a:	464b      	mov	r3, r9
    480c:	2b00      	cmp	r3, #0
    480e:	d000      	beq.n	4812 <get_fat.part.3+0x8a>
    4810:	e0fe      	b.n	4a10 <get_fat.part.3+0x288>
		wc |= fs->win[bc % SS(fs)] << 8;
    4812:	4652      	mov	r2, sl
    4814:	9b01      	ldr	r3, [sp, #4]
    4816:	05de      	lsls	r6, r3, #23
    4818:	0df6      	lsrs	r6, r6, #23
    481a:	19a4      	adds	r4, r4, r6
    481c:	3430      	adds	r4, #48	; 0x30
    481e:	7823      	ldrb	r3, [r4, #0]
    4820:	021b      	lsls	r3, r3, #8
    4822:	4313      	orrs	r3, r2
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    4824:	0918      	lsrs	r0, r3, #4
    4826:	07ea      	lsls	r2, r5, #31
    4828:	d4c1      	bmi.n	47ae <get_fat.part.3+0x26>
    482a:	0518      	lsls	r0, r3, #20
    482c:	0d00      	lsrs	r0, r0, #20
    482e:	e7be      	b.n	47ae <get_fat.part.3+0x26>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    4830:	6a03      	ldr	r3, [r0, #32]
    4832:	09ce      	lsrs	r6, r1, #7
    4834:	469c      	mov	ip, r3
	wsect = fs->winsect;
    4836:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    4838:	4466      	add	r6, ip
	wsect = fs->winsect;
    483a:	469b      	mov	fp, r3
	if (wsect != sector) {	/* Changed current window */
    483c:	429e      	cmp	r6, r3
    483e:	d00f      	beq.n	4860 <get_fat.part.3+0xd8>
		if (fs->wflag) {	/* Write back dirty window if needed */
    4840:	7903      	ldrb	r3, [r0, #4]
    4842:	2b00      	cmp	r3, #0
    4844:	d000      	beq.n	4848 <get_fat.part.3+0xc0>
    4846:	e0a4      	b.n	4992 <get_fat.part.3+0x20a>
		if (sector) {
    4848:	2e00      	cmp	r6, #0
    484a:	d009      	beq.n	4860 <get_fat.part.3+0xd8>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    484c:	0021      	movs	r1, r4
    484e:	7860      	ldrb	r0, [r4, #1]
    4850:	2301      	movs	r3, #1
    4852:	0032      	movs	r2, r6
    4854:	3130      	adds	r1, #48	; 0x30
    4856:	4f90      	ldr	r7, [pc, #576]	; (4a98 <get_fat.part.3+0x310>)
    4858:	47b8      	blx	r7
    485a:	2800      	cmp	r0, #0
    485c:	d1a5      	bne.n	47aa <get_fat.part.3+0x22>
			fs->winsect = sector;
    485e:	62e6      	str	r6, [r4, #44]	; 0x2c
		p = &fs->win[clst * 4 % SS(fs)];
    4860:	23fe      	movs	r3, #254	; 0xfe
    4862:	00ad      	lsls	r5, r5, #2
    4864:	005b      	lsls	r3, r3, #1
    4866:	401d      	ands	r5, r3
    4868:	002b      	movs	r3, r5
    486a:	3330      	adds	r3, #48	; 0x30
    486c:	18e3      	adds	r3, r4, r3
		return LD_DWORD(p) & 0x0FFFFFFF;
    486e:	78d8      	ldrb	r0, [r3, #3]
    4870:	789a      	ldrb	r2, [r3, #2]
    4872:	1964      	adds	r4, r4, r5
    4874:	0412      	lsls	r2, r2, #16
    4876:	0600      	lsls	r0, r0, #24
    4878:	3430      	adds	r4, #48	; 0x30
    487a:	4310      	orrs	r0, r2
    487c:	785b      	ldrb	r3, [r3, #1]
    487e:	7822      	ldrb	r2, [r4, #0]
    4880:	021b      	lsls	r3, r3, #8
    4882:	4310      	orrs	r0, r2
    4884:	4318      	orrs	r0, r3
    4886:	0100      	lsls	r0, r0, #4
    4888:	0900      	lsrs	r0, r0, #4
    488a:	e790      	b.n	47ae <get_fat.part.3+0x26>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    488c:	6a03      	ldr	r3, [r0, #32]
    488e:	0a0e      	lsrs	r6, r1, #8
    4890:	469c      	mov	ip, r3
	wsect = fs->winsect;
    4892:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    4894:	4466      	add	r6, ip
	wsect = fs->winsect;
    4896:	469b      	mov	fp, r3
	if (wsect != sector) {	/* Changed current window */
    4898:	429e      	cmp	r6, r3
    489a:	d00f      	beq.n	48bc <get_fat.part.3+0x134>
		if (fs->wflag) {	/* Write back dirty window if needed */
    489c:	7903      	ldrb	r3, [r0, #4]
    489e:	2b00      	cmp	r3, #0
    48a0:	d117      	bne.n	48d2 <get_fat.part.3+0x14a>
		if (sector) {
    48a2:	2e00      	cmp	r6, #0
    48a4:	d00a      	beq.n	48bc <get_fat.part.3+0x134>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    48a6:	0021      	movs	r1, r4
    48a8:	7860      	ldrb	r0, [r4, #1]
    48aa:	2301      	movs	r3, #1
    48ac:	0032      	movs	r2, r6
    48ae:	3130      	adds	r1, #48	; 0x30
    48b0:	4f79      	ldr	r7, [pc, #484]	; (4a98 <get_fat.part.3+0x310>)
    48b2:	47b8      	blx	r7
    48b4:	2800      	cmp	r0, #0
    48b6:	d000      	beq.n	48ba <get_fat.part.3+0x132>
    48b8:	e777      	b.n	47aa <get_fat.part.3+0x22>
			fs->winsect = sector;
    48ba:	62e6      	str	r6, [r4, #44]	; 0x2c
		p = &fs->win[clst * 2 % SS(fs)];
    48bc:	23ff      	movs	r3, #255	; 0xff
    48be:	006d      	lsls	r5, r5, #1
    48c0:	005b      	lsls	r3, r3, #1
    48c2:	401d      	ands	r5, r3
		return LD_WORD(p);
    48c4:	1964      	adds	r4, r4, r5
    48c6:	3430      	adds	r4, #48	; 0x30
    48c8:	7863      	ldrb	r3, [r4, #1]
    48ca:	7820      	ldrb	r0, [r4, #0]
    48cc:	021b      	lsls	r3, r3, #8
    48ce:	4318      	orrs	r0, r3
    48d0:	e76d      	b.n	47ae <get_fat.part.3+0x26>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    48d2:	2330      	movs	r3, #48	; 0x30
    48d4:	469a      	mov	sl, r3
    48d6:	4f71      	ldr	r7, [pc, #452]	; (4a9c <get_fat.part.3+0x314>)
    48d8:	4482      	add	sl, r0
    48da:	3b2f      	subs	r3, #47	; 0x2f
    48dc:	7840      	ldrb	r0, [r0, #1]
    48de:	465a      	mov	r2, fp
    48e0:	4651      	mov	r1, sl
    48e2:	46b8      	mov	r8, r7
    48e4:	47b8      	blx	r7
    48e6:	2800      	cmp	r0, #0
    48e8:	d000      	beq.n	48ec <get_fat.part.3+0x164>
    48ea:	e75e      	b.n	47aa <get_fat.part.3+0x22>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    48ec:	69e3      	ldr	r3, [r4, #28]
    48ee:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
    48f0:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    48f2:	189a      	adds	r2, r3, r2
    48f4:	4593      	cmp	fp, r2
    48f6:	d2d4      	bcs.n	48a2 <get_fat.part.3+0x11a>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    48f8:	78e2      	ldrb	r2, [r4, #3]
    48fa:	4691      	mov	r9, r2
    48fc:	2a01      	cmp	r2, #1
    48fe:	d9d0      	bls.n	48a2 <get_fat.part.3+0x11a>
    4900:	002a      	movs	r2, r5
    4902:	464f      	mov	r7, r9
    4904:	0025      	movs	r5, r4
    4906:	46b1      	mov	r9, r6
    4908:	465c      	mov	r4, fp
    490a:	4656      	mov	r6, sl
    490c:	4692      	mov	sl, r2
    490e:	e000      	b.n	4912 <get_fat.part.3+0x18a>
    4910:	69eb      	ldr	r3, [r5, #28]
					wsect += fs->fsize;
    4912:	18e4      	adds	r4, r4, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4914:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    4916:	7868      	ldrb	r0, [r5, #1]
    4918:	2301      	movs	r3, #1
    491a:	0022      	movs	r2, r4
    491c:	0031      	movs	r1, r6
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    491e:	b2ff      	uxtb	r7, r7
					disk_write(fs->drv, fs->win, wsect, 1);
    4920:	47c0      	blx	r8
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4922:	2f01      	cmp	r7, #1
    4924:	d1f4      	bne.n	4910 <get_fat.part.3+0x188>
    4926:	002c      	movs	r4, r5
    4928:	464e      	mov	r6, r9
    492a:	4655      	mov	r5, sl
    492c:	e7b9      	b.n	48a2 <get_fat.part.3+0x11a>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    492e:	2330      	movs	r3, #48	; 0x30
    4930:	469b      	mov	fp, r3
    4932:	4e5a      	ldr	r6, [pc, #360]	; (4a9c <get_fat.part.3+0x314>)
    4934:	4483      	add	fp, r0
    4936:	3b2f      	subs	r3, #47	; 0x2f
    4938:	7840      	ldrb	r0, [r0, #1]
    493a:	003a      	movs	r2, r7
    493c:	4659      	mov	r1, fp
    493e:	46b0      	mov	r8, r6
    4940:	47b0      	blx	r6
    4942:	2800      	cmp	r0, #0
    4944:	d000      	beq.n	4948 <get_fat.part.3+0x1c0>
    4946:	e730      	b.n	47aa <get_fat.part.3+0x22>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    4948:	69e3      	ldr	r3, [r4, #28]
    494a:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
    494c:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    494e:	189a      	adds	r2, r3, r2
    4950:	4297      	cmp	r7, r2
    4952:	d300      	bcc.n	4956 <get_fat.part.3+0x1ce>
    4954:	e740      	b.n	47d8 <get_fat.part.3+0x50>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4956:	78e2      	ldrb	r2, [r4, #3]
    4958:	4691      	mov	r9, r2
    495a:	2a01      	cmp	r2, #1
    495c:	d800      	bhi.n	4960 <get_fat.part.3+0x1d8>
    495e:	e73b      	b.n	47d8 <get_fat.part.3+0x50>
    4960:	002a      	movs	r2, r5
    4962:	9901      	ldr	r1, [sp, #4]
    4964:	0025      	movs	r5, r4
    4966:	465e      	mov	r6, fp
    4968:	003c      	movs	r4, r7
    496a:	4693      	mov	fp, r2
    496c:	464f      	mov	r7, r9
    496e:	4689      	mov	r9, r1
    4970:	e000      	b.n	4974 <get_fat.part.3+0x1ec>
    4972:	69eb      	ldr	r3, [r5, #28]
					wsect += fs->fsize;
    4974:	18e4      	adds	r4, r4, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4976:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    4978:	7868      	ldrb	r0, [r5, #1]
    497a:	2301      	movs	r3, #1
    497c:	0022      	movs	r2, r4
    497e:	0031      	movs	r1, r6
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4980:	b2ff      	uxtb	r7, r7
					disk_write(fs->drv, fs->win, wsect, 1);
    4982:	47c0      	blx	r8
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4984:	2f01      	cmp	r7, #1
    4986:	d1f4      	bne.n	4972 <get_fat.part.3+0x1ea>
    4988:	464b      	mov	r3, r9
    498a:	002c      	movs	r4, r5
    498c:	9301      	str	r3, [sp, #4]
    498e:	465d      	mov	r5, fp
    4990:	e722      	b.n	47d8 <get_fat.part.3+0x50>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    4992:	2330      	movs	r3, #48	; 0x30
    4994:	469a      	mov	sl, r3
    4996:	4f41      	ldr	r7, [pc, #260]	; (4a9c <get_fat.part.3+0x314>)
    4998:	4482      	add	sl, r0
    499a:	3b2f      	subs	r3, #47	; 0x2f
    499c:	7840      	ldrb	r0, [r0, #1]
    499e:	465a      	mov	r2, fp
    49a0:	4651      	mov	r1, sl
    49a2:	46b8      	mov	r8, r7
    49a4:	47b8      	blx	r7
    49a6:	2800      	cmp	r0, #0
    49a8:	d000      	beq.n	49ac <get_fat.part.3+0x224>
    49aa:	e6fe      	b.n	47aa <get_fat.part.3+0x22>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    49ac:	69e3      	ldr	r3, [r4, #28]
    49ae:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
    49b0:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    49b2:	189a      	adds	r2, r3, r2
    49b4:	4593      	cmp	fp, r2
    49b6:	d300      	bcc.n	49ba <get_fat.part.3+0x232>
    49b8:	e746      	b.n	4848 <get_fat.part.3+0xc0>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    49ba:	78e2      	ldrb	r2, [r4, #3]
    49bc:	4691      	mov	r9, r2
    49be:	2a01      	cmp	r2, #1
    49c0:	d800      	bhi.n	49c4 <get_fat.part.3+0x23c>
    49c2:	e741      	b.n	4848 <get_fat.part.3+0xc0>
    49c4:	002a      	movs	r2, r5
    49c6:	464f      	mov	r7, r9
    49c8:	0025      	movs	r5, r4
    49ca:	46b1      	mov	r9, r6
    49cc:	465c      	mov	r4, fp
    49ce:	4656      	mov	r6, sl
    49d0:	4692      	mov	sl, r2
    49d2:	e000      	b.n	49d6 <get_fat.part.3+0x24e>
    49d4:	69eb      	ldr	r3, [r5, #28]
					wsect += fs->fsize;
    49d6:	18e4      	adds	r4, r4, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    49d8:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    49da:	7868      	ldrb	r0, [r5, #1]
    49dc:	2301      	movs	r3, #1
    49de:	0022      	movs	r2, r4
    49e0:	0031      	movs	r1, r6
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    49e2:	b2ff      	uxtb	r7, r7
					disk_write(fs->drv, fs->win, wsect, 1);
    49e4:	47c0      	blx	r8
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    49e6:	2f01      	cmp	r7, #1
    49e8:	d1f4      	bne.n	49d4 <get_fat.part.3+0x24c>
    49ea:	002c      	movs	r4, r5
    49ec:	464e      	mov	r6, r9
    49ee:	4655      	mov	r5, sl
    49f0:	e72a      	b.n	4848 <get_fat.part.3+0xc0>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    49f2:	0021      	movs	r1, r4
    49f4:	7860      	ldrb	r0, [r4, #1]
    49f6:	2301      	movs	r3, #1
    49f8:	4652      	mov	r2, sl
    49fa:	3130      	adds	r1, #48	; 0x30
    49fc:	4f26      	ldr	r7, [pc, #152]	; (4a98 <get_fat.part.3+0x310>)
    49fe:	47b8      	blx	r7
    4a00:	2800      	cmp	r0, #0
    4a02:	d000      	beq.n	4a06 <get_fat.part.3+0x27e>
    4a04:	e6d1      	b.n	47aa <get_fat.part.3+0x22>
			fs->winsect = sector;
    4a06:	4653      	mov	r3, sl
    4a08:	6a22      	ldr	r2, [r4, #32]
    4a0a:	62e3      	str	r3, [r4, #44]	; 0x2c
    4a0c:	4657      	mov	r7, sl
    4a0e:	e6e9      	b.n	47e4 <get_fat.part.3+0x5c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    4a10:	0021      	movs	r1, r4
    4a12:	7860      	ldrb	r0, [r4, #1]
    4a14:	2301      	movs	r3, #1
    4a16:	464a      	mov	r2, r9
    4a18:	3130      	adds	r1, #48	; 0x30
    4a1a:	4f1f      	ldr	r7, [pc, #124]	; (4a98 <get_fat.part.3+0x310>)
    4a1c:	47b8      	blx	r7
    4a1e:	2800      	cmp	r0, #0
    4a20:	d000      	beq.n	4a24 <get_fat.part.3+0x29c>
    4a22:	e6c2      	b.n	47aa <get_fat.part.3+0x22>
			fs->winsect = sector;
    4a24:	464b      	mov	r3, r9
    4a26:	62e3      	str	r3, [r4, #44]	; 0x2c
    4a28:	e6f3      	b.n	4812 <get_fat.part.3+0x8a>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    4a2a:	2330      	movs	r3, #48	; 0x30
    4a2c:	469c      	mov	ip, r3
    4a2e:	44a4      	add	ip, r4
    4a30:	4661      	mov	r1, ip
    4a32:	4e1a      	ldr	r6, [pc, #104]	; (4a9c <get_fat.part.3+0x314>)
    4a34:	7860      	ldrb	r0, [r4, #1]
    4a36:	2301      	movs	r3, #1
    4a38:	003a      	movs	r2, r7
    4a3a:	9102      	str	r1, [sp, #8]
    4a3c:	46b0      	mov	r8, r6
    4a3e:	47b0      	blx	r6
    4a40:	2800      	cmp	r0, #0
    4a42:	d000      	beq.n	4a46 <get_fat.part.3+0x2be>
    4a44:	e6b1      	b.n	47aa <get_fat.part.3+0x22>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    4a46:	69e3      	ldr	r3, [r4, #28]
    4a48:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
    4a4a:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    4a4c:	189a      	adds	r2, r3, r2
    4a4e:	42ba      	cmp	r2, r7
    4a50:	d800      	bhi.n	4a54 <get_fat.part.3+0x2cc>
    4a52:	e6da      	b.n	480a <get_fat.part.3+0x82>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4a54:	78e2      	ldrb	r2, [r4, #3]
    4a56:	4693      	mov	fp, r2
    4a58:	2a01      	cmp	r2, #1
    4a5a:	d800      	bhi.n	4a5e <get_fat.part.3+0x2d6>
    4a5c:	e6d5      	b.n	480a <get_fat.part.3+0x82>
    4a5e:	4652      	mov	r2, sl
    4a60:	9203      	str	r2, [sp, #12]
    4a62:	9a01      	ldr	r2, [sp, #4]
    4a64:	9e02      	ldr	r6, [sp, #8]
    4a66:	4692      	mov	sl, r2
    4a68:	002a      	movs	r2, r5
    4a6a:	0025      	movs	r5, r4
    4a6c:	003c      	movs	r4, r7
    4a6e:	465f      	mov	r7, fp
    4a70:	4693      	mov	fp, r2
    4a72:	e000      	b.n	4a76 <get_fat.part.3+0x2ee>
    4a74:	69eb      	ldr	r3, [r5, #28]
					wsect += fs->fsize;
    4a76:	18e4      	adds	r4, r4, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4a78:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    4a7a:	7868      	ldrb	r0, [r5, #1]
    4a7c:	2301      	movs	r3, #1
    4a7e:	0022      	movs	r2, r4
    4a80:	0031      	movs	r1, r6
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4a82:	b2ff      	uxtb	r7, r7
					disk_write(fs->drv, fs->win, wsect, 1);
    4a84:	47c0      	blx	r8
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4a86:	2f01      	cmp	r7, #1
    4a88:	d1f4      	bne.n	4a74 <get_fat.part.3+0x2ec>
    4a8a:	4653      	mov	r3, sl
    4a8c:	9301      	str	r3, [sp, #4]
    4a8e:	9b03      	ldr	r3, [sp, #12]
    4a90:	002c      	movs	r4, r5
    4a92:	469a      	mov	sl, r3
    4a94:	465d      	mov	r5, fp
    4a96:	e6b8      	b.n	480a <get_fat.part.3+0x82>
    4a98:	00003d3d 	.word	0x00003d3d
    4a9c:	00003dc1 	.word	0x00003dc1

00004aa0 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
    4aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4aa2:	0005      	movs	r5, r0
	DWORD clst;
	WORD ic;


	dj->index = idx;
    4aa4:	80e9      	strh	r1, [r5, #6]
{
    4aa6:	000c      	movs	r4, r1
	clst = dj->sclust;
    4aa8:	6881      	ldr	r1, [r0, #8]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    4aaa:	2901      	cmp	r1, #1
    4aac:	d003      	beq.n	4ab6 <dir_sdi+0x16>
    4aae:	6800      	ldr	r0, [r0, #0]
    4ab0:	6983      	ldr	r3, [r0, #24]
    4ab2:	4299      	cmp	r1, r3
    4ab4:	d301      	bcc.n	4aba <dir_sdi+0x1a>
		return FR_INT_ERR;
    4ab6:	2002      	movs	r0, #2
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */

	return FR_OK;	/* Seek succeeded */
}
    4ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    4aba:	2900      	cmp	r1, #0
    4abc:	d118      	bne.n	4af0 <dir_sdi+0x50>
    4abe:	7802      	ldrb	r2, [r0, #0]
    4ac0:	2a03      	cmp	r2, #3
    4ac2:	d012      	beq.n	4aea <dir_sdi+0x4a>
		dj->clust = clst;
    4ac4:	2300      	movs	r3, #0
    4ac6:	60eb      	str	r3, [r5, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    4ac8:	8903      	ldrh	r3, [r0, #8]
    4aca:	42a3      	cmp	r3, r4
    4acc:	d9f3      	bls.n	4ab6 <dir_sdi+0x16>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    4ace:	6a42      	ldr	r2, [r0, #36]	; 0x24
    4ad0:	0923      	lsrs	r3, r4, #4
    4ad2:	4694      	mov	ip, r2
    4ad4:	b29b      	uxth	r3, r3
    4ad6:	4463      	add	r3, ip
    4ad8:	612b      	str	r3, [r5, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    4ada:	230f      	movs	r3, #15
    4adc:	401c      	ands	r4, r3
    4ade:	3030      	adds	r0, #48	; 0x30
    4ae0:	0164      	lsls	r4, r4, #5
    4ae2:	1900      	adds	r0, r0, r4
    4ae4:	6168      	str	r0, [r5, #20]
	return FR_OK;	/* Seek succeeded */
    4ae6:	2000      	movs	r0, #0
    4ae8:	e7e6      	b.n	4ab8 <dir_sdi+0x18>
		clst = dj->fs->dirbase;
    4aea:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    4aec:	2900      	cmp	r1, #0
    4aee:	d0e9      	beq.n	4ac4 <dir_sdi+0x24>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    4af0:	7886      	ldrb	r6, [r0, #2]
    4af2:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
    4af4:	42b4      	cmp	r4, r6
    4af6:	d317      	bcc.n	4b28 <dir_sdi+0x88>
    4af8:	1ba4      	subs	r4, r4, r6
    4afa:	b2a4      	uxth	r4, r4
    4afc:	4f13      	ldr	r7, [pc, #76]	; (4b4c <dir_sdi+0xac>)
    4afe:	e00e      	b.n	4b1e <dir_sdi+0x7e>
    4b00:	47b8      	blx	r7
    4b02:	0001      	movs	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    4b04:	1c43      	adds	r3, r0, #1
    4b06:	d01f      	beq.n	4b48 <dir_sdi+0xa8>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    4b08:	2801      	cmp	r0, #1
    4b0a:	d9d4      	bls.n	4ab6 <dir_sdi+0x16>
    4b0c:	6828      	ldr	r0, [r5, #0]
    4b0e:	6983      	ldr	r3, [r0, #24]
    4b10:	428b      	cmp	r3, r1
    4b12:	d9d0      	bls.n	4ab6 <dir_sdi+0x16>
    4b14:	1ba2      	subs	r2, r4, r6
    4b16:	b292      	uxth	r2, r2
		while (idx >= ic) {	/* Follow cluster chain */
    4b18:	42a6      	cmp	r6, r4
    4b1a:	d805      	bhi.n	4b28 <dir_sdi+0x88>
    4b1c:	0014      	movs	r4, r2
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    4b1e:	2901      	cmp	r1, #1
    4b20:	d9c9      	bls.n	4ab6 <dir_sdi+0x16>
    4b22:	4299      	cmp	r1, r3
    4b24:	d2c7      	bcs.n	4ab6 <dir_sdi+0x16>
    4b26:	e7eb      	b.n	4b00 <dir_sdi+0x60>
		dj->clust = clst;
    4b28:	60e9      	str	r1, [r5, #12]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    4b2a:	6983      	ldr	r3, [r0, #24]
	clst -= 2;
    4b2c:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    4b2e:	3b02      	subs	r3, #2
    4b30:	2200      	movs	r2, #0
    4b32:	4299      	cmp	r1, r3
    4b34:	d203      	bcs.n	4b3e <dir_sdi+0x9e>
	return clst * fs->csize + fs->database;
    4b36:	7883      	ldrb	r3, [r0, #2]
    4b38:	4359      	muls	r1, r3
    4b3a:	6a83      	ldr	r3, [r0, #40]	; 0x28
    4b3c:	18ca      	adds	r2, r1, r3
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    4b3e:	0921      	lsrs	r1, r4, #4
    4b40:	b289      	uxth	r1, r1
    4b42:	1889      	adds	r1, r1, r2
    4b44:	6129      	str	r1, [r5, #16]
    4b46:	e7c8      	b.n	4ada <dir_sdi+0x3a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    4b48:	2001      	movs	r0, #1
    4b4a:	e7b5      	b.n	4ab8 <dir_sdi+0x18>
    4b4c:	00004789 	.word	0x00004789

00004b50 <create_chain>:
{
    4b50:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b52:	4657      	mov	r7, sl
    4b54:	4645      	mov	r5, r8
    4b56:	46de      	mov	lr, fp
    4b58:	464e      	mov	r6, r9
    4b5a:	b5e0      	push	{r5, r6, r7, lr}
    4b5c:	468a      	mov	sl, r1
    4b5e:	b085      	sub	sp, #20
    4b60:	0005      	movs	r5, r0
	if (clst == 0) {		/* Create a new chain */
    4b62:	2900      	cmp	r1, #0
    4b64:	d11d      	bne.n	4ba2 <create_chain+0x52>
		scl = fs->last_clust;			/* Get suggested start point */
    4b66:	68c3      	ldr	r3, [r0, #12]
    4b68:	469b      	mov	fp, r3
		if (!scl || scl >= fs->n_fatent) scl = 1;
    4b6a:	2b00      	cmp	r3, #0
    4b6c:	d128      	bne.n	4bc0 <create_chain+0x70>
    4b6e:	2201      	movs	r2, #1
    4b70:	4693      	mov	fp, r2
    4b72:	6983      	ldr	r3, [r0, #24]
    4b74:	465c      	mov	r4, fp
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    4b76:	465f      	mov	r7, fp
    4b78:	46d3      	mov	fp, sl
		ncl++;							/* Next cluster */
    4b7a:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    4b7c:	429c      	cmp	r4, r3
    4b7e:	d325      	bcc.n	4bcc <create_chain+0x7c>
			if (ncl > scl) return 0;	/* No free cluster */
    4b80:	2f01      	cmp	r7, #1
    4b82:	d800      	bhi.n	4b86 <create_chain+0x36>
    4b84:	e176      	b.n	4e74 <create_chain+0x324>
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    4b86:	2b02      	cmp	r3, #2
    4b88:	d911      	bls.n	4bae <create_chain+0x5e>
	switch (fs->fs_type) {
    4b8a:	782b      	ldrb	r3, [r5, #0]
			ncl = 2;
    4b8c:	2402      	movs	r4, #2
	switch (fs->fs_type) {
    4b8e:	2b02      	cmp	r3, #2
    4b90:	d021      	beq.n	4bd6 <create_chain+0x86>
    4b92:	2b03      	cmp	r3, #3
    4b94:	d100      	bne.n	4b98 <create_chain+0x48>
    4b96:	e07f      	b.n	4c98 <create_chain+0x148>
    4b98:	2b01      	cmp	r3, #1
    4b9a:	d042      	beq.n	4c22 <create_chain+0xd2>
    4b9c:	2401      	movs	r4, #1
    4b9e:	4264      	negs	r4, r4
    4ba0:	e006      	b.n	4bb0 <create_chain+0x60>
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    4ba2:	2901      	cmp	r1, #1
    4ba4:	d903      	bls.n	4bae <create_chain+0x5e>
    4ba6:	6983      	ldr	r3, [r0, #24]
    4ba8:	4299      	cmp	r1, r3
    4baa:	d200      	bcs.n	4bae <create_chain+0x5e>
    4bac:	e164      	b.n	4e78 <create_chain+0x328>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    4bae:	2401      	movs	r4, #1
}
    4bb0:	0020      	movs	r0, r4
    4bb2:	b005      	add	sp, #20
    4bb4:	bc3c      	pop	{r2, r3, r4, r5}
    4bb6:	4690      	mov	r8, r2
    4bb8:	4699      	mov	r9, r3
    4bba:	46a2      	mov	sl, r4
    4bbc:	46ab      	mov	fp, r5
    4bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!scl || scl >= fs->n_fatent) scl = 1;
    4bc0:	6983      	ldr	r3, [r0, #24]
    4bc2:	459b      	cmp	fp, r3
    4bc4:	d3d6      	bcc.n	4b74 <create_chain+0x24>
    4bc6:	2201      	movs	r2, #1
    4bc8:	4693      	mov	fp, r2
    4bca:	e7d3      	b.n	4b74 <create_chain+0x24>
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    4bcc:	2c01      	cmp	r4, #1
    4bce:	d9ee      	bls.n	4bae <create_chain+0x5e>
	switch (fs->fs_type) {
    4bd0:	782b      	ldrb	r3, [r5, #0]
    4bd2:	2b02      	cmp	r3, #2
    4bd4:	d1dd      	bne.n	4b92 <create_chain+0x42>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    4bd6:	6a2b      	ldr	r3, [r5, #32]
    4bd8:	0a26      	lsrs	r6, r4, #8
    4bda:	469c      	mov	ip, r3
    4bdc:	0033      	movs	r3, r6
    4bde:	4463      	add	r3, ip
    4be0:	001a      	movs	r2, r3
    4be2:	9300      	str	r3, [sp, #0]
	wsect = fs->winsect;
    4be4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    4be6:	4698      	mov	r8, r3
	if (wsect != sector) {	/* Changed current window */
    4be8:	4542      	cmp	r2, r8
    4bea:	d006      	beq.n	4bfa <create_chain+0xaa>
		if (fs->wflag) {	/* Write back dirty window if needed */
    4bec:	792b      	ldrb	r3, [r5, #4]
    4bee:	2b00      	cmp	r3, #0
    4bf0:	d000      	beq.n	4bf4 <create_chain+0xa4>
    4bf2:	e10b      	b.n	4e0c <create_chain+0x2bc>
		if (sector) {
    4bf4:	9b00      	ldr	r3, [sp, #0]
    4bf6:	2b00      	cmp	r3, #0
    4bf8:	d175      	bne.n	4ce6 <create_chain+0x196>
		p = &fs->win[clst * 2 % SS(fs)];
    4bfa:	23ff      	movs	r3, #255	; 0xff
    4bfc:	0062      	lsls	r2, r4, #1
    4bfe:	005b      	lsls	r3, r3, #1
    4c00:	401a      	ands	r2, r3
		return LD_WORD(p);
    4c02:	18aa      	adds	r2, r5, r2
    4c04:	3230      	adds	r2, #48	; 0x30
    4c06:	7851      	ldrb	r1, [r2, #1]
    4c08:	7813      	ldrb	r3, [r2, #0]
    4c0a:	0209      	lsls	r1, r1, #8
    4c0c:	430b      	orrs	r3, r1
		if (cs == 0) break;				/* Found a free cluster */
    4c0e:	2b00      	cmp	r3, #0
    4c10:	d100      	bne.n	4c14 <create_chain+0xc4>
    4c12:	e178      	b.n	4f06 <create_chain+0x3b6>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    4c14:	2b01      	cmp	r3, #1
    4c16:	d0ca      	beq.n	4bae <create_chain+0x5e>
		if (ncl == scl) return 0;		/* No free cluster */
    4c18:	42a7      	cmp	r7, r4
    4c1a:	d100      	bne.n	4c1e <create_chain+0xce>
    4c1c:	e12a      	b.n	4e74 <create_chain+0x324>
    4c1e:	69ab      	ldr	r3, [r5, #24]
    4c20:	e7ab      	b.n	4b7a <create_chain+0x2a>
		bc = (UINT)clst; bc += bc / 2;
    4c22:	0866      	lsrs	r6, r4, #1
    4c24:	1933      	adds	r3, r6, r4
    4c26:	9300      	str	r3, [sp, #0]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    4c28:	0a5b      	lsrs	r3, r3, #9
    4c2a:	4699      	mov	r9, r3
    4c2c:	6a2a      	ldr	r2, [r5, #32]
	wsect = fs->winsect;
    4c2e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    4c30:	4491      	add	r9, r2
	wsect = fs->winsect;
    4c32:	4698      	mov	r8, r3
	if (wsect != sector) {	/* Changed current window */
    4c34:	4599      	cmp	r9, r3
    4c36:	d009      	beq.n	4c4c <create_chain+0xfc>
		if (fs->wflag) {	/* Write back dirty window if needed */
    4c38:	792b      	ldrb	r3, [r5, #4]
    4c3a:	2b00      	cmp	r3, #0
    4c3c:	d000      	beq.n	4c40 <create_chain+0xf0>
    4c3e:	e0af      	b.n	4da0 <create_chain+0x250>
		if (sector) {
    4c40:	464b      	mov	r3, r9
    4c42:	2b00      	cmp	r3, #0
    4c44:	d16b      	bne.n	4d1e <create_chain+0x1ce>
    4c46:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    4c48:	6a2a      	ldr	r2, [r5, #32]
    4c4a:	4698      	mov	r8, r3
		wc = fs->win[bc % SS(fs)]; bc++;
    4c4c:	9900      	ldr	r1, [sp, #0]
    4c4e:	05cb      	lsls	r3, r1, #23
    4c50:	0ddb      	lsrs	r3, r3, #23
    4c52:	18eb      	adds	r3, r5, r3
    4c54:	3330      	adds	r3, #48	; 0x30
    4c56:	781b      	ldrb	r3, [r3, #0]
    4c58:	469a      	mov	sl, r3
    4c5a:	000b      	movs	r3, r1
    4c5c:	3301      	adds	r3, #1
    4c5e:	9300      	str	r3, [sp, #0]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    4c60:	0a5b      	lsrs	r3, r3, #9
    4c62:	4699      	mov	r9, r3
    4c64:	4491      	add	r9, r2
	if (wsect != sector) {	/* Changed current window */
    4c66:	45c1      	cmp	r9, r8
    4c68:	d007      	beq.n	4c7a <create_chain+0x12a>
		if (fs->wflag) {	/* Write back dirty window if needed */
    4c6a:	792b      	ldrb	r3, [r5, #4]
    4c6c:	2b00      	cmp	r3, #0
    4c6e:	d000      	beq.n	4c72 <create_chain+0x122>
    4c70:	e11b      	b.n	4eaa <create_chain+0x35a>
		if (sector) {
    4c72:	464b      	mov	r3, r9
    4c74:	2b00      	cmp	r3, #0
    4c76:	d000      	beq.n	4c7a <create_chain+0x12a>
    4c78:	e10a      	b.n	4e90 <create_chain+0x340>
		wc |= fs->win[bc % SS(fs)] << 8;
    4c7a:	9b00      	ldr	r3, [sp, #0]
    4c7c:	05de      	lsls	r6, r3, #23
    4c7e:	4653      	mov	r3, sl
    4c80:	0df6      	lsrs	r6, r6, #23
    4c82:	19ae      	adds	r6, r5, r6
    4c84:	3630      	adds	r6, #48	; 0x30
    4c86:	7832      	ldrb	r2, [r6, #0]
    4c88:	0212      	lsls	r2, r2, #8
    4c8a:	431a      	orrs	r2, r3
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    4c8c:	0913      	lsrs	r3, r2, #4
    4c8e:	07e1      	lsls	r1, r4, #31
    4c90:	d4bd      	bmi.n	4c0e <create_chain+0xbe>
    4c92:	0513      	lsls	r3, r2, #20
    4c94:	0d1b      	lsrs	r3, r3, #20
    4c96:	e7ba      	b.n	4c0e <create_chain+0xbe>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    4c98:	6a2b      	ldr	r3, [r5, #32]
    4c9a:	09e6      	lsrs	r6, r4, #7
    4c9c:	469c      	mov	ip, r3
    4c9e:	0033      	movs	r3, r6
    4ca0:	4463      	add	r3, ip
    4ca2:	001a      	movs	r2, r3
    4ca4:	9300      	str	r3, [sp, #0]
	wsect = fs->winsect;
    4ca6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    4ca8:	4698      	mov	r8, r3
	if (wsect != sector) {	/* Changed current window */
    4caa:	4542      	cmp	r2, r8
    4cac:	d005      	beq.n	4cba <create_chain+0x16a>
		if (fs->wflag) {	/* Write back dirty window if needed */
    4cae:	792b      	ldrb	r3, [r5, #4]
    4cb0:	2b00      	cmp	r3, #0
    4cb2:	d143      	bne.n	4d3c <create_chain+0x1ec>
		if (sector) {
    4cb4:	9b00      	ldr	r3, [sp, #0]
    4cb6:	2b00      	cmp	r3, #0
    4cb8:	d123      	bne.n	4d02 <create_chain+0x1b2>
		p = &fs->win[clst * 4 % SS(fs)];
    4cba:	23fe      	movs	r3, #254	; 0xfe
    4cbc:	00a2      	lsls	r2, r4, #2
    4cbe:	005b      	lsls	r3, r3, #1
    4cc0:	401a      	ands	r2, r3
    4cc2:	0011      	movs	r1, r2
    4cc4:	3130      	adds	r1, #48	; 0x30
    4cc6:	1869      	adds	r1, r5, r1
		return LD_DWORD(p) & 0x0FFFFFFF;
    4cc8:	78cb      	ldrb	r3, [r1, #3]
    4cca:	7888      	ldrb	r0, [r1, #2]
    4ccc:	18aa      	adds	r2, r5, r2
    4cce:	3230      	adds	r2, #48	; 0x30
    4cd0:	7812      	ldrb	r2, [r2, #0]
    4cd2:	061b      	lsls	r3, r3, #24
    4cd4:	0400      	lsls	r0, r0, #16
    4cd6:	4303      	orrs	r3, r0
    4cd8:	4313      	orrs	r3, r2
    4cda:	784a      	ldrb	r2, [r1, #1]
    4cdc:	0212      	lsls	r2, r2, #8
    4cde:	4313      	orrs	r3, r2
    4ce0:	011b      	lsls	r3, r3, #4
    4ce2:	091b      	lsrs	r3, r3, #4
    4ce4:	e793      	b.n	4c0e <create_chain+0xbe>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    4ce6:	0029      	movs	r1, r5
    4ce8:	001a      	movs	r2, r3
    4cea:	7868      	ldrb	r0, [r5, #1]
    4cec:	2301      	movs	r3, #1
    4cee:	3130      	adds	r1, #48	; 0x30
    4cf0:	4e9a      	ldr	r6, [pc, #616]	; (4f5c <create_chain+0x40c>)
    4cf2:	4690      	mov	r8, r2
    4cf4:	47b0      	blx	r6
    4cf6:	2800      	cmp	r0, #0
    4cf8:	d000      	beq.n	4cfc <create_chain+0x1ac>
    4cfa:	e74f      	b.n	4b9c <create_chain+0x4c>
			fs->winsect = sector;
    4cfc:	4643      	mov	r3, r8
    4cfe:	62eb      	str	r3, [r5, #44]	; 0x2c
    4d00:	e77b      	b.n	4bfa <create_chain+0xaa>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    4d02:	0029      	movs	r1, r5
    4d04:	001a      	movs	r2, r3
    4d06:	7868      	ldrb	r0, [r5, #1]
    4d08:	2301      	movs	r3, #1
    4d0a:	3130      	adds	r1, #48	; 0x30
    4d0c:	4e93      	ldr	r6, [pc, #588]	; (4f5c <create_chain+0x40c>)
    4d0e:	4691      	mov	r9, r2
    4d10:	47b0      	blx	r6
    4d12:	2800      	cmp	r0, #0
    4d14:	d000      	beq.n	4d18 <create_chain+0x1c8>
    4d16:	e741      	b.n	4b9c <create_chain+0x4c>
			fs->winsect = sector;
    4d18:	464b      	mov	r3, r9
    4d1a:	62eb      	str	r3, [r5, #44]	; 0x2c
    4d1c:	e7cd      	b.n	4cba <create_chain+0x16a>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    4d1e:	0029      	movs	r1, r5
    4d20:	7868      	ldrb	r0, [r5, #1]
    4d22:	2301      	movs	r3, #1
    4d24:	464a      	mov	r2, r9
    4d26:	3130      	adds	r1, #48	; 0x30
    4d28:	4e8c      	ldr	r6, [pc, #560]	; (4f5c <create_chain+0x40c>)
    4d2a:	47b0      	blx	r6
    4d2c:	2800      	cmp	r0, #0
    4d2e:	d000      	beq.n	4d32 <create_chain+0x1e2>
    4d30:	e734      	b.n	4b9c <create_chain+0x4c>
			fs->winsect = sector;
    4d32:	464b      	mov	r3, r9
    4d34:	6a2a      	ldr	r2, [r5, #32]
    4d36:	62eb      	str	r3, [r5, #44]	; 0x2c
    4d38:	46c8      	mov	r8, r9
    4d3a:	e787      	b.n	4c4c <create_chain+0xfc>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    4d3c:	2330      	movs	r3, #48	; 0x30
    4d3e:	469a      	mov	sl, r3
    4d40:	44aa      	add	sl, r5
    4d42:	7868      	ldrb	r0, [r5, #1]
    4d44:	3b2f      	subs	r3, #47	; 0x2f
    4d46:	4642      	mov	r2, r8
    4d48:	4651      	mov	r1, sl
    4d4a:	4e85      	ldr	r6, [pc, #532]	; (4f60 <create_chain+0x410>)
    4d4c:	47b0      	blx	r6
    4d4e:	2800      	cmp	r0, #0
    4d50:	d000      	beq.n	4d54 <create_chain+0x204>
    4d52:	e723      	b.n	4b9c <create_chain+0x4c>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    4d54:	69eb      	ldr	r3, [r5, #28]
    4d56:	6a2a      	ldr	r2, [r5, #32]
			fs->wflag = 0;
    4d58:	7128      	strb	r0, [r5, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    4d5a:	189a      	adds	r2, r3, r2
    4d5c:	4590      	cmp	r8, r2
    4d5e:	d2a9      	bcs.n	4cb4 <create_chain+0x164>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4d60:	78ea      	ldrb	r2, [r5, #3]
    4d62:	4691      	mov	r9, r2
    4d64:	2a01      	cmp	r2, #1
    4d66:	d9a5      	bls.n	4cb4 <create_chain+0x164>
    4d68:	4652      	mov	r2, sl
    4d6a:	9201      	str	r2, [sp, #4]
    4d6c:	9a00      	ldr	r2, [sp, #0]
    4d6e:	002e      	movs	r6, r5
    4d70:	46a2      	mov	sl, r4
    4d72:	4645      	mov	r5, r8
    4d74:	464c      	mov	r4, r9
    4d76:	46b8      	mov	r8, r7
    4d78:	4691      	mov	r9, r2
    4d7a:	e000      	b.n	4d7e <create_chain+0x22e>
    4d7c:	69f3      	ldr	r3, [r6, #28]
					wsect += fs->fsize;
    4d7e:	18ed      	adds	r5, r5, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4d80:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    4d82:	7870      	ldrb	r0, [r6, #1]
    4d84:	2301      	movs	r3, #1
    4d86:	002a      	movs	r2, r5
    4d88:	9901      	ldr	r1, [sp, #4]
    4d8a:	4f75      	ldr	r7, [pc, #468]	; (4f60 <create_chain+0x410>)
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4d8c:	b2e4      	uxtb	r4, r4
					disk_write(fs->drv, fs->win, wsect, 1);
    4d8e:	47b8      	blx	r7
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4d90:	2c01      	cmp	r4, #1
    4d92:	d1f3      	bne.n	4d7c <create_chain+0x22c>
    4d94:	464b      	mov	r3, r9
    4d96:	4647      	mov	r7, r8
    4d98:	4654      	mov	r4, sl
    4d9a:	0035      	movs	r5, r6
    4d9c:	9300      	str	r3, [sp, #0]
    4d9e:	e789      	b.n	4cb4 <create_chain+0x164>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    4da0:	2330      	movs	r3, #48	; 0x30
    4da2:	469c      	mov	ip, r3
    4da4:	44ac      	add	ip, r5
    4da6:	4663      	mov	r3, ip
    4da8:	4e6d      	ldr	r6, [pc, #436]	; (4f60 <create_chain+0x410>)
    4daa:	9302      	str	r3, [sp, #8]
    4dac:	7868      	ldrb	r0, [r5, #1]
    4dae:	4661      	mov	r1, ip
    4db0:	2301      	movs	r3, #1
    4db2:	4642      	mov	r2, r8
    4db4:	9601      	str	r6, [sp, #4]
    4db6:	47b0      	blx	r6
    4db8:	2800      	cmp	r0, #0
    4dba:	d000      	beq.n	4dbe <create_chain+0x26e>
    4dbc:	e6ee      	b.n	4b9c <create_chain+0x4c>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    4dbe:	69eb      	ldr	r3, [r5, #28]
    4dc0:	6a2a      	ldr	r2, [r5, #32]
			fs->wflag = 0;
    4dc2:	7128      	strb	r0, [r5, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    4dc4:	189a      	adds	r2, r3, r2
    4dc6:	4590      	cmp	r8, r2
    4dc8:	d300      	bcc.n	4dcc <create_chain+0x27c>
    4dca:	e739      	b.n	4c40 <create_chain+0xf0>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4dcc:	78ea      	ldrb	r2, [r5, #3]
    4dce:	4692      	mov	sl, r2
    4dd0:	2a01      	cmp	r2, #1
    4dd2:	d800      	bhi.n	4dd6 <create_chain+0x286>
    4dd4:	e734      	b.n	4c40 <create_chain+0xf0>
    4dd6:	0022      	movs	r2, r4
    4dd8:	9900      	ldr	r1, [sp, #0]
    4dda:	4654      	mov	r4, sl
    4ddc:	002e      	movs	r6, r5
    4dde:	9703      	str	r7, [sp, #12]
    4de0:	4645      	mov	r5, r8
    4de2:	4692      	mov	sl, r2
    4de4:	4688      	mov	r8, r1
    4de6:	e000      	b.n	4dea <create_chain+0x29a>
    4de8:	69f3      	ldr	r3, [r6, #28]
					wsect += fs->fsize;
    4dea:	18ed      	adds	r5, r5, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4dec:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    4dee:	7870      	ldrb	r0, [r6, #1]
    4df0:	2301      	movs	r3, #1
    4df2:	002a      	movs	r2, r5
    4df4:	9902      	ldr	r1, [sp, #8]
    4df6:	9f01      	ldr	r7, [sp, #4]
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4df8:	b2e4      	uxtb	r4, r4
					disk_write(fs->drv, fs->win, wsect, 1);
    4dfa:	47b8      	blx	r7
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4dfc:	2c01      	cmp	r4, #1
    4dfe:	d1f3      	bne.n	4de8 <create_chain+0x298>
    4e00:	4643      	mov	r3, r8
    4e02:	9f03      	ldr	r7, [sp, #12]
    4e04:	4654      	mov	r4, sl
    4e06:	0035      	movs	r5, r6
    4e08:	9300      	str	r3, [sp, #0]
    4e0a:	e719      	b.n	4c40 <create_chain+0xf0>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    4e0c:	2330      	movs	r3, #48	; 0x30
    4e0e:	469a      	mov	sl, r3
    4e10:	44aa      	add	sl, r5
    4e12:	7868      	ldrb	r0, [r5, #1]
    4e14:	3b2f      	subs	r3, #47	; 0x2f
    4e16:	4642      	mov	r2, r8
    4e18:	4651      	mov	r1, sl
    4e1a:	4e51      	ldr	r6, [pc, #324]	; (4f60 <create_chain+0x410>)
    4e1c:	47b0      	blx	r6
    4e1e:	2800      	cmp	r0, #0
    4e20:	d000      	beq.n	4e24 <create_chain+0x2d4>
    4e22:	e6bb      	b.n	4b9c <create_chain+0x4c>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    4e24:	69eb      	ldr	r3, [r5, #28]
    4e26:	6a2a      	ldr	r2, [r5, #32]
			fs->wflag = 0;
    4e28:	7128      	strb	r0, [r5, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    4e2a:	189a      	adds	r2, r3, r2
    4e2c:	4590      	cmp	r8, r2
    4e2e:	d300      	bcc.n	4e32 <create_chain+0x2e2>
    4e30:	e6e0      	b.n	4bf4 <create_chain+0xa4>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4e32:	78ea      	ldrb	r2, [r5, #3]
    4e34:	4691      	mov	r9, r2
    4e36:	2a01      	cmp	r2, #1
    4e38:	d800      	bhi.n	4e3c <create_chain+0x2ec>
    4e3a:	e6db      	b.n	4bf4 <create_chain+0xa4>
    4e3c:	4652      	mov	r2, sl
    4e3e:	9201      	str	r2, [sp, #4]
    4e40:	9a00      	ldr	r2, [sp, #0]
    4e42:	002e      	movs	r6, r5
    4e44:	46a2      	mov	sl, r4
    4e46:	4645      	mov	r5, r8
    4e48:	464c      	mov	r4, r9
    4e4a:	46b8      	mov	r8, r7
    4e4c:	4691      	mov	r9, r2
    4e4e:	e000      	b.n	4e52 <create_chain+0x302>
    4e50:	69f3      	ldr	r3, [r6, #28]
					wsect += fs->fsize;
    4e52:	18ed      	adds	r5, r5, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4e54:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    4e56:	7870      	ldrb	r0, [r6, #1]
    4e58:	2301      	movs	r3, #1
    4e5a:	002a      	movs	r2, r5
    4e5c:	9901      	ldr	r1, [sp, #4]
    4e5e:	4f40      	ldr	r7, [pc, #256]	; (4f60 <create_chain+0x410>)
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4e60:	b2e4      	uxtb	r4, r4
					disk_write(fs->drv, fs->win, wsect, 1);
    4e62:	47b8      	blx	r7
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4e64:	2c01      	cmp	r4, #1
    4e66:	d1f3      	bne.n	4e50 <create_chain+0x300>
    4e68:	464b      	mov	r3, r9
    4e6a:	4647      	mov	r7, r8
    4e6c:	4654      	mov	r4, sl
    4e6e:	0035      	movs	r5, r6
    4e70:	9300      	str	r3, [sp, #0]
    4e72:	e6bf      	b.n	4bf4 <create_chain+0xa4>
		if (ncl == scl) return 0;		/* No free cluster */
    4e74:	2400      	movs	r4, #0
    4e76:	e69b      	b.n	4bb0 <create_chain+0x60>
    4e78:	4b3a      	ldr	r3, [pc, #232]	; (4f64 <create_chain+0x414>)
    4e7a:	4798      	blx	r3
    4e7c:	0004      	movs	r4, r0
		if (cs < 2) return 1;			/* It is an invalid cluster */
    4e7e:	2801      	cmp	r0, #1
    4e80:	d800      	bhi.n	4e84 <create_chain+0x334>
    4e82:	e694      	b.n	4bae <create_chain+0x5e>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    4e84:	69ab      	ldr	r3, [r5, #24]
    4e86:	46d3      	mov	fp, sl
    4e88:	4283      	cmp	r3, r0
    4e8a:	d800      	bhi.n	4e8e <create_chain+0x33e>
    4e8c:	e672      	b.n	4b74 <create_chain+0x24>
    4e8e:	e68f      	b.n	4bb0 <create_chain+0x60>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    4e90:	0029      	movs	r1, r5
    4e92:	7868      	ldrb	r0, [r5, #1]
    4e94:	2301      	movs	r3, #1
    4e96:	464a      	mov	r2, r9
    4e98:	3130      	adds	r1, #48	; 0x30
    4e9a:	4e30      	ldr	r6, [pc, #192]	; (4f5c <create_chain+0x40c>)
    4e9c:	47b0      	blx	r6
    4e9e:	2800      	cmp	r0, #0
    4ea0:	d000      	beq.n	4ea4 <create_chain+0x354>
    4ea2:	e67b      	b.n	4b9c <create_chain+0x4c>
			fs->winsect = sector;
    4ea4:	464b      	mov	r3, r9
    4ea6:	62eb      	str	r3, [r5, #44]	; 0x2c
    4ea8:	e6e7      	b.n	4c7a <create_chain+0x12a>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    4eaa:	2330      	movs	r3, #48	; 0x30
    4eac:	469c      	mov	ip, r3
    4eae:	44ac      	add	ip, r5
    4eb0:	4661      	mov	r1, ip
    4eb2:	4e2b      	ldr	r6, [pc, #172]	; (4f60 <create_chain+0x410>)
    4eb4:	7868      	ldrb	r0, [r5, #1]
    4eb6:	2301      	movs	r3, #1
    4eb8:	4642      	mov	r2, r8
    4eba:	9102      	str	r1, [sp, #8]
    4ebc:	9601      	str	r6, [sp, #4]
    4ebe:	47b0      	blx	r6
    4ec0:	2800      	cmp	r0, #0
    4ec2:	d000      	beq.n	4ec6 <create_chain+0x376>
    4ec4:	e66a      	b.n	4b9c <create_chain+0x4c>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    4ec6:	69eb      	ldr	r3, [r5, #28]
    4ec8:	6a2a      	ldr	r2, [r5, #32]
			fs->wflag = 0;
    4eca:	7128      	strb	r0, [r5, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    4ecc:	189a      	adds	r2, r3, r2
    4ece:	4542      	cmp	r2, r8
    4ed0:	d800      	bhi.n	4ed4 <create_chain+0x384>
    4ed2:	e6ce      	b.n	4c72 <create_chain+0x122>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4ed4:	78ea      	ldrb	r2, [r5, #3]
    4ed6:	2a01      	cmp	r2, #1
    4ed8:	d800      	bhi.n	4edc <create_chain+0x38c>
    4eda:	e6ca      	b.n	4c72 <create_chain+0x122>
    4edc:	9703      	str	r7, [sp, #12]
    4ede:	0017      	movs	r7, r2
    4ee0:	0022      	movs	r2, r4
    4ee2:	4644      	mov	r4, r8
    4ee4:	4690      	mov	r8, r2
    4ee6:	e000      	b.n	4eea <create_chain+0x39a>
    4ee8:	69eb      	ldr	r3, [r5, #28]
					wsect += fs->fsize;
    4eea:	18e4      	adds	r4, r4, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4eec:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    4eee:	7868      	ldrb	r0, [r5, #1]
    4ef0:	2301      	movs	r3, #1
    4ef2:	0022      	movs	r2, r4
    4ef4:	9902      	ldr	r1, [sp, #8]
    4ef6:	9e01      	ldr	r6, [sp, #4]
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4ef8:	b2ff      	uxtb	r7, r7
					disk_write(fs->drv, fs->win, wsect, 1);
    4efa:	47b0      	blx	r6
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4efc:	2f01      	cmp	r7, #1
    4efe:	d1f3      	bne.n	4ee8 <create_chain+0x398>
    4f00:	9f03      	ldr	r7, [sp, #12]
    4f02:	4644      	mov	r4, r8
    4f04:	e6b5      	b.n	4c72 <create_chain+0x122>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    4f06:	69ab      	ldr	r3, [r5, #24]
    4f08:	42a3      	cmp	r3, r4
    4f0a:	d800      	bhi.n	4f0e <create_chain+0x3be>
    4f0c:	e64f      	b.n	4bae <create_chain+0x5e>
    4f0e:	4a16      	ldr	r2, [pc, #88]	; (4f68 <create_chain+0x418>)
    4f10:	0021      	movs	r1, r4
    4f12:	0028      	movs	r0, r5
    4f14:	4e15      	ldr	r6, [pc, #84]	; (4f6c <create_chain+0x41c>)
    4f16:	47b0      	blx	r6
	if (res == FR_OK && clst != 0) {
    4f18:	2800      	cmp	r0, #0
    4f1a:	d11a      	bne.n	4f52 <create_chain+0x402>
    4f1c:	465b      	mov	r3, fp
    4f1e:	2b00      	cmp	r3, #0
    4f20:	d00d      	beq.n	4f3e <create_chain+0x3ee>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    4f22:	465b      	mov	r3, fp
    4f24:	2b01      	cmp	r3, #1
    4f26:	d800      	bhi.n	4f2a <create_chain+0x3da>
    4f28:	e641      	b.n	4bae <create_chain+0x5e>
    4f2a:	69ab      	ldr	r3, [r5, #24]
    4f2c:	459b      	cmp	fp, r3
    4f2e:	d300      	bcc.n	4f32 <create_chain+0x3e2>
    4f30:	e63d      	b.n	4bae <create_chain+0x5e>
    4f32:	0022      	movs	r2, r4
    4f34:	4659      	mov	r1, fp
    4f36:	0028      	movs	r0, r5
    4f38:	47b0      	blx	r6
	if (res == FR_OK) {
    4f3a:	2800      	cmp	r0, #0
    4f3c:	d109      	bne.n	4f52 <create_chain+0x402>
		if (fs->free_clust != 0xFFFFFFFF) {
    4f3e:	692b      	ldr	r3, [r5, #16]
		fs->last_clust = ncl;			/* Update FSINFO */
    4f40:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
    4f42:	1c5a      	adds	r2, r3, #1
    4f44:	d100      	bne.n	4f48 <create_chain+0x3f8>
    4f46:	e633      	b.n	4bb0 <create_chain+0x60>
			fs->free_clust--;
    4f48:	3b01      	subs	r3, #1
    4f4a:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
    4f4c:	2301      	movs	r3, #1
    4f4e:	716b      	strb	r3, [r5, #5]
    4f50:	e62e      	b.n	4bb0 <create_chain+0x60>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    4f52:	2801      	cmp	r0, #1
    4f54:	d100      	bne.n	4f58 <create_chain+0x408>
    4f56:	e621      	b.n	4b9c <create_chain+0x4c>
    4f58:	e629      	b.n	4bae <create_chain+0x5e>
    4f5a:	46c0      	nop			; (mov r8, r8)
    4f5c:	00003d3d 	.word	0x00003d3d
    4f60:	00003dc1 	.word	0x00003dc1
    4f64:	00004789 	.word	0x00004789
    4f68:	0fffffff 	.word	0x0fffffff
    4f6c:	000040ad 	.word	0x000040ad

00004f70 <dir_next.constprop.7>:
/*-----------------------------------------------------------------------*/
/* Directory handling - Move directory index next                        */
/*-----------------------------------------------------------------------*/

static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
    4f70:	b570      	push	{r4, r5, r6, lr}
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
    4f72:	88c4      	ldrh	r4, [r0, #6]
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
    4f74:	0005      	movs	r5, r0
	i = dj->index + 1;
    4f76:	3401      	adds	r4, #1
    4f78:	b2a4      	uxth	r4, r4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    4f7a:	2c00      	cmp	r4, #0
    4f7c:	d101      	bne.n	4f82 <dir_next.constprop.7+0x12>
		return FR_NO_FILE;
    4f7e:	2004      	movs	r0, #4

	dj->index = i;
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;

	return FR_OK;
}
    4f80:	bd70      	pop	{r4, r5, r6, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    4f82:	6903      	ldr	r3, [r0, #16]
    4f84:	2b00      	cmp	r3, #0
    4f86:	d0fa      	beq.n	4f7e <dir_next.constprop.7+0xe>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    4f88:	260f      	movs	r6, #15
    4f8a:	4026      	ands	r6, r4
    4f8c:	d007      	beq.n	4f9e <dir_next.constprop.7+0x2e>
    4f8e:	6803      	ldr	r3, [r0, #0]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    4f90:	3330      	adds	r3, #48	; 0x30
    4f92:	0176      	lsls	r6, r6, #5
    4f94:	199e      	adds	r6, r3, r6
	dj->index = i;
    4f96:	80ec      	strh	r4, [r5, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    4f98:	616e      	str	r6, [r5, #20]
	return FR_OK;
    4f9a:	2000      	movs	r0, #0
    4f9c:	e7f0      	b.n	4f80 <dir_next.constprop.7+0x10>
		if (dj->clust == 0) {	/* Static table */
    4f9e:	68c1      	ldr	r1, [r0, #12]
		dj->sect++;					/* Next sector */
    4fa0:	3301      	adds	r3, #1
    4fa2:	6103      	str	r3, [r0, #16]
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    4fa4:	6803      	ldr	r3, [r0, #0]
		if (dj->clust == 0) {	/* Static table */
    4fa6:	2900      	cmp	r1, #0
    4fa8:	d00b      	beq.n	4fc2 <dir_next.constprop.7+0x52>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    4faa:	789a      	ldrb	r2, [r3, #2]
    4fac:	0920      	lsrs	r0, r4, #4
    4fae:	3a01      	subs	r2, #1
    4fb0:	4210      	tst	r0, r2
    4fb2:	d1ed      	bne.n	4f90 <dir_next.constprop.7+0x20>
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    4fb4:	2901      	cmp	r1, #1
    4fb6:	d902      	bls.n	4fbe <dir_next.constprop.7+0x4e>
    4fb8:	699a      	ldr	r2, [r3, #24]
    4fba:	4291      	cmp	r1, r2
    4fbc:	d305      	bcc.n	4fca <dir_next.constprop.7+0x5a>
				if (clst <= 1) return FR_INT_ERR;
    4fbe:	2002      	movs	r0, #2
    4fc0:	e7de      	b.n	4f80 <dir_next.constprop.7+0x10>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    4fc2:	891a      	ldrh	r2, [r3, #8]
    4fc4:	42a2      	cmp	r2, r4
    4fc6:	d9da      	bls.n	4f7e <dir_next.constprop.7+0xe>
    4fc8:	e7e2      	b.n	4f90 <dir_next.constprop.7+0x20>
    4fca:	0018      	movs	r0, r3
    4fcc:	4b0c      	ldr	r3, [pc, #48]	; (5000 <dir_next.constprop.7+0x90>)
    4fce:	4798      	blx	r3
				if (clst <= 1) return FR_INT_ERR;
    4fd0:	2801      	cmp	r0, #1
    4fd2:	d9f4      	bls.n	4fbe <dir_next.constprop.7+0x4e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    4fd4:	1c43      	adds	r3, r0, #1
    4fd6:	d010      	beq.n	4ffa <dir_next.constprop.7+0x8a>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    4fd8:	682b      	ldr	r3, [r5, #0]
    4fda:	699a      	ldr	r2, [r3, #24]
    4fdc:	4290      	cmp	r0, r2
    4fde:	d2ce      	bcs.n	4f7e <dir_next.constprop.7+0xe>
				dj->clust = clst;				/* Initialize data for new cluster */
    4fe0:	60e8      	str	r0, [r5, #12]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    4fe2:	699a      	ldr	r2, [r3, #24]
	clst -= 2;
    4fe4:	3802      	subs	r0, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    4fe6:	3a02      	subs	r2, #2
    4fe8:	2100      	movs	r1, #0
    4fea:	4290      	cmp	r0, r2
    4fec:	d203      	bcs.n	4ff6 <dir_next.constprop.7+0x86>
	return clst * fs->csize + fs->database;
    4fee:	789a      	ldrb	r2, [r3, #2]
    4ff0:	4350      	muls	r0, r2
    4ff2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4ff4:	1881      	adds	r1, r0, r2
				dj->sect = clust2sect(dj->fs, clst);
    4ff6:	6129      	str	r1, [r5, #16]
    4ff8:	e7ca      	b.n	4f90 <dir_next.constprop.7+0x20>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    4ffa:	2001      	movs	r0, #1
    4ffc:	e7c0      	b.n	4f80 <dir_next.constprop.7+0x10>
    4ffe:	46c0      	nop			; (mov r8, r8)
    5000:	00004789 	.word	0x00004789

00005004 <dir_find.part.5>:
/*-----------------------------------------------------------------------*/
/* Directory handling - Find an object in the directory                  */
/*-----------------------------------------------------------------------*/

static
FRESULT dir_find (
    5004:	b5f0      	push	{r4, r5, r6, r7, lr}
    5006:	4657      	mov	r7, sl
    5008:	464e      	mov	r6, r9
    500a:	4645      	mov	r5, r8
    500c:	46de      	mov	lr, fp
    500e:	b5e0      	push	{r5, r6, r7, lr}
    5010:	6906      	ldr	r6, [r0, #16]
    5012:	23ff      	movs	r3, #255	; 0xff
    5014:	0005      	movs	r5, r0
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
    5016:	0037      	movs	r7, r6
FRESULT dir_find (
    5018:	b085      	sub	sp, #20
    501a:	6804      	ldr	r4, [r0, #0]
    501c:	9302      	str	r3, [sp, #8]
    501e:	9301      	str	r3, [sp, #4]
	wsect = fs->winsect;
    5020:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5022:	001a      	movs	r2, r3
	if (wsect != sector) {	/* Changed current window */
    5024:	42bb      	cmp	r3, r7
    5026:	d010      	beq.n	504a <dir_find.part.5+0x46>
		if (fs->wflag) {	/* Write back dirty window if needed */
    5028:	7923      	ldrb	r3, [r4, #4]
    502a:	2b00      	cmp	r3, #0
    502c:	d000      	beq.n	5030 <dir_find.part.5+0x2c>
    502e:	e0c8      	b.n	51c2 <dir_find.part.5+0x1be>
		if (sector) {
    5030:	2f00      	cmp	r7, #0
    5032:	d00a      	beq.n	504a <dir_find.part.5+0x46>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    5034:	0021      	movs	r1, r4
    5036:	7860      	ldrb	r0, [r4, #1]
    5038:	2301      	movs	r3, #1
    503a:	003a      	movs	r2, r7
    503c:	3130      	adds	r1, #48	; 0x30
    503e:	4ec0      	ldr	r6, [pc, #768]	; (5340 <dir_find.part.5+0x33c>)
    5040:	47b0      	blx	r6
    5042:	2800      	cmp	r0, #0
    5044:	d000      	beq.n	5048 <dir_find.part.5+0x44>
    5046:	e0ea      	b.n	521e <dir_find.part.5+0x21a>
			fs->winsect = sector;
    5048:	62e7      	str	r7, [r4, #44]	; 0x2c
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    504a:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
    504c:	7823      	ldrb	r3, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    504e:	2b00      	cmp	r3, #0
    5050:	d010      	beq.n	5074 <dir_find.part.5+0x70>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
    5052:	223f      	movs	r2, #63	; 0x3f
    5054:	7ae1      	ldrb	r1, [r4, #11]
    5056:	400a      	ands	r2, r1
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    5058:	2be5      	cmp	r3, #229	; 0xe5
    505a:	d004      	beq.n	5066 <dir_find.part.5+0x62>
    505c:	0709      	lsls	r1, r1, #28
    505e:	d522      	bpl.n	50a6 <dir_find.part.5+0xa2>
    5060:	2a0f      	cmp	r2, #15
    5062:	d100      	bne.n	5066 <dir_find.part.5+0x62>
    5064:	e0dd      	b.n	5222 <dir_find.part.5+0x21e>
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    5066:	23ff      	movs	r3, #255	; 0xff
    5068:	9301      	str	r3, [sp, #4]
	i = dj->index + 1;
    506a:	88ee      	ldrh	r6, [r5, #6]
    506c:	3601      	adds	r6, #1
    506e:	b2b6      	uxth	r6, r6
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    5070:	2e00      	cmp	r6, #0
    5072:	d107      	bne.n	5084 <dir_find.part.5+0x80>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    5074:	2004      	movs	r0, #4
#endif
		res = dir_next(dj, 0);		/* Next entry */
	} while (res == FR_OK);

	return res;
}
    5076:	b005      	add	sp, #20
    5078:	bc3c      	pop	{r2, r3, r4, r5}
    507a:	4690      	mov	r8, r2
    507c:	4699      	mov	r9, r3
    507e:	46a2      	mov	sl, r4
    5080:	46ab      	mov	fp, r5
    5082:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    5084:	692f      	ldr	r7, [r5, #16]
    5086:	2f00      	cmp	r7, #0
    5088:	d0f4      	beq.n	5074 <dir_find.part.5+0x70>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    508a:	230f      	movs	r3, #15
    508c:	4033      	ands	r3, r6
    508e:	4698      	mov	r8, r3
    5090:	d100      	bne.n	5094 <dir_find.part.5+0x90>
    5092:	e10e      	b.n	52b2 <dir_find.part.5+0x2ae>
    5094:	682c      	ldr	r4, [r5, #0]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    5096:	4643      	mov	r3, r8
    5098:	015a      	lsls	r2, r3, #5
    509a:	0023      	movs	r3, r4
    509c:	3330      	adds	r3, #48	; 0x30
    509e:	189b      	adds	r3, r3, r2
	dj->index = i;
    50a0:	80ee      	strh	r6, [r5, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    50a2:	616b      	str	r3, [r5, #20]
    50a4:	e7bc      	b.n	5020 <dir_find.part.5+0x1c>
			if (a == AM_LFN) {			/* An LFN entry is found */
    50a6:	2a0f      	cmp	r2, #15
    50a8:	d100      	bne.n	50ac <dir_find.part.5+0xa8>
    50aa:	e0ba      	b.n	5222 <dir_find.part.5+0x21e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    50ac:	9a01      	ldr	r2, [sp, #4]
    50ae:	2a00      	cmp	r2, #0
    50b0:	d146      	bne.n	5140 <dir_find.part.5+0x13c>
	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    50b2:	085a      	lsrs	r2, r3, #1
    50b4:	01db      	lsls	r3, r3, #7
    50b6:	4313      	orrs	r3, r2
    50b8:	7862      	ldrb	r2, [r4, #1]
    50ba:	189b      	adds	r3, r3, r2
    50bc:	b2da      	uxtb	r2, r3
    50be:	0852      	lsrs	r2, r2, #1
    50c0:	01db      	lsls	r3, r3, #7
    50c2:	431a      	orrs	r2, r3
    50c4:	78a3      	ldrb	r3, [r4, #2]
    50c6:	b2d2      	uxtb	r2, r2
    50c8:	18d2      	adds	r2, r2, r3
    50ca:	b2d3      	uxtb	r3, r2
    50cc:	085b      	lsrs	r3, r3, #1
    50ce:	01d2      	lsls	r2, r2, #7
    50d0:	4313      	orrs	r3, r2
    50d2:	78e2      	ldrb	r2, [r4, #3]
    50d4:	b2db      	uxtb	r3, r3
    50d6:	189b      	adds	r3, r3, r2
    50d8:	b2da      	uxtb	r2, r3
    50da:	0852      	lsrs	r2, r2, #1
    50dc:	01db      	lsls	r3, r3, #7
    50de:	431a      	orrs	r2, r3
    50e0:	7923      	ldrb	r3, [r4, #4]
    50e2:	b2d2      	uxtb	r2, r2
    50e4:	18d2      	adds	r2, r2, r3
    50e6:	b2d3      	uxtb	r3, r2
    50e8:	085b      	lsrs	r3, r3, #1
    50ea:	01d2      	lsls	r2, r2, #7
    50ec:	4313      	orrs	r3, r2
    50ee:	7962      	ldrb	r2, [r4, #5]
    50f0:	b2db      	uxtb	r3, r3
    50f2:	189b      	adds	r3, r3, r2
    50f4:	b2da      	uxtb	r2, r3
    50f6:	0852      	lsrs	r2, r2, #1
    50f8:	01db      	lsls	r3, r3, #7
    50fa:	431a      	orrs	r2, r3
    50fc:	79a3      	ldrb	r3, [r4, #6]
    50fe:	b2d2      	uxtb	r2, r2
    5100:	18d2      	adds	r2, r2, r3
    5102:	b2d3      	uxtb	r3, r2
    5104:	085b      	lsrs	r3, r3, #1
    5106:	01d2      	lsls	r2, r2, #7
    5108:	4313      	orrs	r3, r2
    510a:	79e2      	ldrb	r2, [r4, #7]
    510c:	b2db      	uxtb	r3, r3
    510e:	189b      	adds	r3, r3, r2
    5110:	b2da      	uxtb	r2, r3
    5112:	0852      	lsrs	r2, r2, #1
    5114:	01db      	lsls	r3, r3, #7
    5116:	431a      	orrs	r2, r3
    5118:	7a23      	ldrb	r3, [r4, #8]
    511a:	b2d2      	uxtb	r2, r2
    511c:	18d2      	adds	r2, r2, r3
    511e:	b2d3      	uxtb	r3, r2
    5120:	085b      	lsrs	r3, r3, #1
    5122:	01d2      	lsls	r2, r2, #7
    5124:	4313      	orrs	r3, r2
    5126:	7a62      	ldrb	r2, [r4, #9]
    5128:	b2db      	uxtb	r3, r3
    512a:	189b      	adds	r3, r3, r2
    512c:	b2da      	uxtb	r2, r3
    512e:	0852      	lsrs	r2, r2, #1
    5130:	01db      	lsls	r3, r3, #7
    5132:	4313      	orrs	r3, r2
    5134:	7aa2      	ldrb	r2, [r4, #10]
    5136:	189b      	adds	r3, r3, r2
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    5138:	9a02      	ldr	r2, [sp, #8]
    513a:	b2db      	uxtb	r3, r3
    513c:	4293      	cmp	r3, r2
    513e:	d03e      	beq.n	51be <dir_find.part.5+0x1ba>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    5140:	2301      	movs	r3, #1
    5142:	425b      	negs	r3, r3
    5144:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    5146:	69ab      	ldr	r3, [r5, #24]
    5148:	7ada      	ldrb	r2, [r3, #11]
    514a:	07d2      	lsls	r2, r2, #31
    514c:	d500      	bpl.n	5150 <dir_find.part.5+0x14c>
    514e:	e78a      	b.n	5066 <dir_find.part.5+0x62>
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    5150:	7821      	ldrb	r1, [r4, #0]
    5152:	781a      	ldrb	r2, [r3, #0]
    5154:	4291      	cmp	r1, r2
    5156:	d000      	beq.n	515a <dir_find.part.5+0x156>
    5158:	e785      	b.n	5066 <dir_find.part.5+0x62>
    515a:	7861      	ldrb	r1, [r4, #1]
    515c:	785a      	ldrb	r2, [r3, #1]
    515e:	4291      	cmp	r1, r2
    5160:	d000      	beq.n	5164 <dir_find.part.5+0x160>
    5162:	e780      	b.n	5066 <dir_find.part.5+0x62>
    5164:	7899      	ldrb	r1, [r3, #2]
    5166:	78a2      	ldrb	r2, [r4, #2]
    5168:	4291      	cmp	r1, r2
    516a:	d000      	beq.n	516e <dir_find.part.5+0x16a>
    516c:	e77b      	b.n	5066 <dir_find.part.5+0x62>
    516e:	78e1      	ldrb	r1, [r4, #3]
    5170:	78da      	ldrb	r2, [r3, #3]
    5172:	4291      	cmp	r1, r2
    5174:	d000      	beq.n	5178 <dir_find.part.5+0x174>
    5176:	e776      	b.n	5066 <dir_find.part.5+0x62>
    5178:	7921      	ldrb	r1, [r4, #4]
    517a:	791a      	ldrb	r2, [r3, #4]
    517c:	4291      	cmp	r1, r2
    517e:	d000      	beq.n	5182 <dir_find.part.5+0x17e>
    5180:	e771      	b.n	5066 <dir_find.part.5+0x62>
    5182:	7961      	ldrb	r1, [r4, #5]
    5184:	795a      	ldrb	r2, [r3, #5]
    5186:	4291      	cmp	r1, r2
    5188:	d000      	beq.n	518c <dir_find.part.5+0x188>
    518a:	e76c      	b.n	5066 <dir_find.part.5+0x62>
    518c:	79a1      	ldrb	r1, [r4, #6]
    518e:	799a      	ldrb	r2, [r3, #6]
    5190:	4291      	cmp	r1, r2
    5192:	d000      	beq.n	5196 <dir_find.part.5+0x192>
    5194:	e767      	b.n	5066 <dir_find.part.5+0x62>
    5196:	79e1      	ldrb	r1, [r4, #7]
    5198:	79da      	ldrb	r2, [r3, #7]
    519a:	4291      	cmp	r1, r2
    519c:	d000      	beq.n	51a0 <dir_find.part.5+0x19c>
    519e:	e762      	b.n	5066 <dir_find.part.5+0x62>
    51a0:	7a21      	ldrb	r1, [r4, #8]
    51a2:	7a1a      	ldrb	r2, [r3, #8]
    51a4:	4291      	cmp	r1, r2
    51a6:	d000      	beq.n	51aa <dir_find.part.5+0x1a6>
    51a8:	e75d      	b.n	5066 <dir_find.part.5+0x62>
    51aa:	7a61      	ldrb	r1, [r4, #9]
    51ac:	7a5a      	ldrb	r2, [r3, #9]
    51ae:	4291      	cmp	r1, r2
    51b0:	d000      	beq.n	51b4 <dir_find.part.5+0x1b0>
    51b2:	e758      	b.n	5066 <dir_find.part.5+0x62>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    51b4:	7aa2      	ldrb	r2, [r4, #10]
    51b6:	7a9b      	ldrb	r3, [r3, #10]
    51b8:	429a      	cmp	r2, r3
    51ba:	d000      	beq.n	51be <dir_find.part.5+0x1ba>
    51bc:	e753      	b.n	5066 <dir_find.part.5+0x62>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    51be:	2000      	movs	r0, #0
    51c0:	e759      	b.n	5076 <dir_find.part.5+0x72>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    51c2:	2330      	movs	r3, #48	; 0x30
    51c4:	469a      	mov	sl, r3
    51c6:	4e5f      	ldr	r6, [pc, #380]	; (5344 <dir_find.part.5+0x340>)
    51c8:	44a2      	add	sl, r4
    51ca:	7860      	ldrb	r0, [r4, #1]
    51cc:	3b2f      	subs	r3, #47	; 0x2f
    51ce:	4651      	mov	r1, sl
    51d0:	4690      	mov	r8, r2
    51d2:	46b3      	mov	fp, r6
    51d4:	47b0      	blx	r6
    51d6:	2800      	cmp	r0, #0
    51d8:	d121      	bne.n	521e <dir_find.part.5+0x21a>
			fs->wflag = 0;
    51da:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    51dc:	4640      	mov	r0, r8
    51de:	69e3      	ldr	r3, [r4, #28]
    51e0:	6a22      	ldr	r2, [r4, #32]
    51e2:	189a      	adds	r2, r3, r2
    51e4:	4290      	cmp	r0, r2
    51e6:	d300      	bcc.n	51ea <dir_find.part.5+0x1e6>
    51e8:	e722      	b.n	5030 <dir_find.part.5+0x2c>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    51ea:	78e2      	ldrb	r2, [r4, #3]
    51ec:	2a01      	cmp	r2, #1
    51ee:	d800      	bhi.n	51f2 <dir_find.part.5+0x1ee>
    51f0:	e71e      	b.n	5030 <dir_find.part.5+0x2c>
    51f2:	46a9      	mov	r9, r5
    51f4:	46b8      	mov	r8, r7
    51f6:	0025      	movs	r5, r4
    51f8:	0016      	movs	r6, r2
    51fa:	0004      	movs	r4, r0
    51fc:	4657      	mov	r7, sl
    51fe:	e000      	b.n	5202 <dir_find.part.5+0x1fe>
    5200:	69eb      	ldr	r3, [r5, #28]
					wsect += fs->fsize;
    5202:	18e4      	adds	r4, r4, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    5204:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    5206:	7868      	ldrb	r0, [r5, #1]
    5208:	2301      	movs	r3, #1
    520a:	0022      	movs	r2, r4
    520c:	0039      	movs	r1, r7
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    520e:	b2f6      	uxtb	r6, r6
					disk_write(fs->drv, fs->win, wsect, 1);
    5210:	47d8      	blx	fp
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    5212:	2e01      	cmp	r6, #1
    5214:	d1f4      	bne.n	5200 <dir_find.part.5+0x1fc>
    5216:	002c      	movs	r4, r5
    5218:	4647      	mov	r7, r8
    521a:	464d      	mov	r5, r9
    521c:	e708      	b.n	5030 <dir_find.part.5+0x2c>
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    521e:	2001      	movs	r0, #1
    5220:	e729      	b.n	5076 <dir_find.part.5+0x72>
				if (dj->lfn) {
    5222:	69ee      	ldr	r6, [r5, #28]
    5224:	2e00      	cmp	r6, #0
    5226:	d100      	bne.n	522a <dir_find.part.5+0x226>
    5228:	e71f      	b.n	506a <dir_find.part.5+0x66>
					if (c & LLE) {		/* Is it start of LFN sequence? */
    522a:	2240      	movs	r2, #64	; 0x40
    522c:	421a      	tst	r2, r3
    522e:	d03b      	beq.n	52a8 <dir_find.part.5+0x2a4>
						sum = dir[LDIR_Chksum];
    5230:	7b61      	ldrb	r1, [r4, #13]
						c &= ~LLE; ord = c;	/* LFN start order */
    5232:	4393      	bics	r3, r2
						sum = dir[LDIR_Chksum];
    5234:	9102      	str	r1, [sp, #8]
						c &= ~LLE; ord = c;	/* LFN start order */
    5236:	9301      	str	r3, [sp, #4]
						dj->lfn_idx = dj->index;
    5238:	88eb      	ldrh	r3, [r5, #6]
    523a:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    523c:	7b63      	ldrb	r3, [r4, #13]
    523e:	9a02      	ldr	r2, [sp, #8]
    5240:	4293      	cmp	r3, r2
    5242:	d000      	beq.n	5246 <dir_find.part.5+0x242>
    5244:	e70f      	b.n	5066 <dir_find.part.5+0x62>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
    5246:	2240      	movs	r2, #64	; 0x40
    5248:	7823      	ldrb	r3, [r4, #0]
			if (uc != 0xFFFF) return 0;	/* Check filler */
    524a:	46ab      	mov	fp, r5
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
    524c:	4393      	bics	r3, r2
    524e:	3b01      	subs	r3, #1
    5250:	005a      	lsls	r2, r3, #1
    5252:	18d2      	adds	r2, r2, r3
    5254:	0092      	lsls	r2, r2, #2
    5256:	18d3      	adds	r3, r2, r3
    5258:	4a3b      	ldr	r2, [pc, #236]	; (5348 <dir_find.part.5+0x344>)
	s = 0; wc = 1;
    525a:	2001      	movs	r0, #1
    525c:	4692      	mov	sl, r2
			if (uc != 0xFFFF) return 0;	/* Check filler */
    525e:	4a3b      	ldr	r2, [pc, #236]	; (534c <dir_find.part.5+0x348>)
	s = 0; wc = 1;
    5260:	2700      	movs	r7, #0
			if (uc != 0xFFFF) return 0;	/* Check filler */
    5262:	4691      	mov	r9, r2
    5264:	46b0      	mov	r8, r6
    5266:	001d      	movs	r5, r3
    5268:	e004      	b.n	5274 <dir_find.part.5+0x270>
    526a:	454b      	cmp	r3, r9
    526c:	d164      	bne.n	5338 <dir_find.part.5+0x334>
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
    526e:	3701      	adds	r7, #1
    5270:	2f0d      	cmp	r7, #13
    5272:	d036      	beq.n	52e2 <dir_find.part.5+0x2de>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
    5274:	4653      	mov	r3, sl
    5276:	5dda      	ldrb	r2, [r3, r7]
    5278:	18a3      	adds	r3, r4, r2
    527a:	785b      	ldrb	r3, [r3, #1]
    527c:	5ca2      	ldrb	r2, [r4, r2]
    527e:	021b      	lsls	r3, r3, #8
    5280:	4313      	orrs	r3, r2
		if (wc) {	/* Last char has not been processed */
    5282:	2800      	cmp	r0, #0
    5284:	d0f1      	beq.n	526a <dir_find.part.5+0x266>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
    5286:	0018      	movs	r0, r3
    5288:	4b31      	ldr	r3, [pc, #196]	; (5350 <dir_find.part.5+0x34c>)
    528a:	4798      	blx	r3
    528c:	9003      	str	r0, [sp, #12]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
    528e:	2dfe      	cmp	r5, #254	; 0xfe
    5290:	d852      	bhi.n	5338 <dir_find.part.5+0x334>
    5292:	4643      	mov	r3, r8
    5294:	1c6e      	adds	r6, r5, #1
    5296:	006d      	lsls	r5, r5, #1
    5298:	5ae8      	ldrh	r0, [r5, r3]
    529a:	4b2d      	ldr	r3, [pc, #180]	; (5350 <dir_find.part.5+0x34c>)
    529c:	4798      	blx	r3
    529e:	9b03      	ldr	r3, [sp, #12]
    52a0:	4283      	cmp	r3, r0
    52a2:	d149      	bne.n	5338 <dir_find.part.5+0x334>
    52a4:	0035      	movs	r5, r6
    52a6:	e7e2      	b.n	526e <dir_find.part.5+0x26a>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    52a8:	9a01      	ldr	r2, [sp, #4]
    52aa:	4293      	cmp	r3, r2
    52ac:	d000      	beq.n	52b0 <dir_find.part.5+0x2ac>
    52ae:	e6da      	b.n	5066 <dir_find.part.5+0x62>
    52b0:	e7c4      	b.n	523c <dir_find.part.5+0x238>
		if (dj->clust == 0) {	/* Static table */
    52b2:	68e9      	ldr	r1, [r5, #12]
		dj->sect++;					/* Next sector */
    52b4:	3701      	adds	r7, #1
    52b6:	612f      	str	r7, [r5, #16]
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    52b8:	682c      	ldr	r4, [r5, #0]
		if (dj->clust == 0) {	/* Static table */
    52ba:	2900      	cmp	r1, #0
    52bc:	d104      	bne.n	52c8 <dir_find.part.5+0x2c4>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    52be:	8923      	ldrh	r3, [r4, #8]
    52c0:	42b3      	cmp	r3, r6
    52c2:	d800      	bhi.n	52c6 <dir_find.part.5+0x2c2>
    52c4:	e6d6      	b.n	5074 <dir_find.part.5+0x70>
    52c6:	e6e6      	b.n	5096 <dir_find.part.5+0x92>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    52c8:	78a3      	ldrb	r3, [r4, #2]
    52ca:	0932      	lsrs	r2, r6, #4
    52cc:	3b01      	subs	r3, #1
    52ce:	421a      	tst	r2, r3
    52d0:	d000      	beq.n	52d4 <dir_find.part.5+0x2d0>
    52d2:	e6e0      	b.n	5096 <dir_find.part.5+0x92>
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    52d4:	2901      	cmp	r1, #1
    52d6:	d902      	bls.n	52de <dir_find.part.5+0x2da>
    52d8:	69a3      	ldr	r3, [r4, #24]
    52da:	4299      	cmp	r1, r3
    52dc:	d313      	bcc.n	5306 <dir_find.part.5+0x302>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    52de:	2002      	movs	r0, #2
    52e0:	e6c9      	b.n	5076 <dir_find.part.5+0x72>
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
    52e2:	7823      	ldrb	r3, [r4, #0]
    52e4:	0029      	movs	r1, r5
    52e6:	4646      	mov	r6, r8
    52e8:	465d      	mov	r5, fp
    52ea:	065a      	lsls	r2, r3, #25
    52ec:	d506      	bpl.n	52fc <dir_find.part.5+0x2f8>
    52ee:	2800      	cmp	r0, #0
    52f0:	d004      	beq.n	52fc <dir_find.part.5+0x2f8>
    52f2:	004b      	lsls	r3, r1, #1
    52f4:	5b9b      	ldrh	r3, [r3, r6]
    52f6:	2b00      	cmp	r3, #0
    52f8:	d000      	beq.n	52fc <dir_find.part.5+0x2f8>
    52fa:	e6b4      	b.n	5066 <dir_find.part.5+0x62>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    52fc:	9f01      	ldr	r7, [sp, #4]
    52fe:	3f01      	subs	r7, #1
    5300:	b2fb      	uxtb	r3, r7
    5302:	9301      	str	r3, [sp, #4]
    5304:	e6b1      	b.n	506a <dir_find.part.5+0x66>
    5306:	0020      	movs	r0, r4
    5308:	4b12      	ldr	r3, [pc, #72]	; (5354 <dir_find.part.5+0x350>)
    530a:	4798      	blx	r3
				if (clst <= 1) return FR_INT_ERR;
    530c:	2801      	cmp	r0, #1
    530e:	d9e6      	bls.n	52de <dir_find.part.5+0x2da>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    5310:	1c43      	adds	r3, r0, #1
    5312:	d084      	beq.n	521e <dir_find.part.5+0x21a>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    5314:	682c      	ldr	r4, [r5, #0]
    5316:	69a3      	ldr	r3, [r4, #24]
    5318:	4298      	cmp	r0, r3
    531a:	d300      	bcc.n	531e <dir_find.part.5+0x31a>
    531c:	e6aa      	b.n	5074 <dir_find.part.5+0x70>
				dj->clust = clst;				/* Initialize data for new cluster */
    531e:	60e8      	str	r0, [r5, #12]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    5320:	69a3      	ldr	r3, [r4, #24]
	clst -= 2;
    5322:	3802      	subs	r0, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    5324:	3b02      	subs	r3, #2
    5326:	2700      	movs	r7, #0
    5328:	4298      	cmp	r0, r3
    532a:	d203      	bcs.n	5334 <dir_find.part.5+0x330>
	return clst * fs->csize + fs->database;
    532c:	78a3      	ldrb	r3, [r4, #2]
    532e:	4358      	muls	r0, r3
    5330:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5332:	18c7      	adds	r7, r0, r3
				dj->sect = clust2sect(dj->fs, clst);
    5334:	612f      	str	r7, [r5, #16]
    5336:	e6ae      	b.n	5096 <dir_find.part.5+0x92>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    5338:	23ff      	movs	r3, #255	; 0xff
    533a:	465d      	mov	r5, fp
    533c:	9301      	str	r3, [sp, #4]
    533e:	e694      	b.n	506a <dir_find.part.5+0x66>
    5340:	00003d3d 	.word	0x00003d3d
    5344:	00003dc1 	.word	0x00003dc1
    5348:	00023310 	.word	0x00023310
    534c:	0000ffff 	.word	0x0000ffff
    5350:	00006c9d 	.word	0x00006c9d
    5354:	00004789 	.word	0x00004789

00005358 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
    5358:	b5f0      	push	{r4, r5, r6, r7, lr}
    535a:	46de      	mov	lr, fp
    535c:	464e      	mov	r6, r9
    535e:	4657      	mov	r7, sl
    5360:	4645      	mov	r5, r8
    5362:	b5e0      	push	{r5, r6, r7, lr}
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
    5364:	69c3      	ldr	r3, [r0, #28]
{
    5366:	b08b      	sub	sp, #44	; 0x2c
	fn = dj->fn; lfn = dj->lfn;
    5368:	6986      	ldr	r6, [r0, #24]
    536a:	ac07      	add	r4, sp, #28
{
    536c:	4683      	mov	fp, r0
	fn = dj->fn; lfn = dj->lfn;
    536e:	4699      	mov	r9, r3
    5370:	220c      	movs	r2, #12
    5372:	4bc0      	ldr	r3, [pc, #768]	; (5674 <dir_register+0x31c>)
    5374:	0031      	movs	r1, r6
    5376:	0020      	movs	r0, r4
    5378:	4798      	blx	r3
	mem_cpy(sn, fn, 12);

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
    537a:	7ae3      	ldrb	r3, [r4, #11]
    537c:	9302      	str	r3, [sp, #8]
    537e:	07db      	lsls	r3, r3, #31
    5380:	d456      	bmi.n	5430 <dir_register+0xd8>
    5382:	4bbd      	ldr	r3, [pc, #756]	; (5678 <dir_register+0x320>)
    5384:	9301      	str	r3, [sp, #4]

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
		for (ne = 0; lfn[ne]; ne++) ;
		ne = (ne + 25) / 13;
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
    5386:	2301      	movs	r3, #1
    5388:	9300      	str	r3, [sp, #0]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    538a:	9b02      	ldr	r3, [sp, #8]
    538c:	079b      	lsls	r3, r3, #30
    538e:	d511      	bpl.n	53b4 <dir_register+0x5c>
		for (ne = 0; lfn[ne]; ne++) ;
    5390:	464b      	mov	r3, r9
    5392:	881b      	ldrh	r3, [r3, #0]
    5394:	2b00      	cmp	r3, #0
    5396:	d00d      	beq.n	53b4 <dir_register+0x5c>
    5398:	2000      	movs	r0, #0
    539a:	464a      	mov	r2, r9
    539c:	3001      	adds	r0, #1
    539e:	b280      	uxth	r0, r0
    53a0:	0043      	lsls	r3, r0, #1
    53a2:	5a9b      	ldrh	r3, [r3, r2]
    53a4:	2b00      	cmp	r3, #0
    53a6:	d1f9      	bne.n	539c <dir_register+0x44>
    53a8:	4bb4      	ldr	r3, [pc, #720]	; (567c <dir_register+0x324>)
    53aa:	3019      	adds	r0, #25
    53ac:	210d      	movs	r1, #13
    53ae:	4798      	blx	r3
    53b0:	b283      	uxth	r3, r0
    53b2:	9300      	str	r3, [sp, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
    53b4:	2100      	movs	r1, #0
    53b6:	4658      	mov	r0, fp
    53b8:	9b01      	ldr	r3, [sp, #4]
    53ba:	4798      	blx	r3
    53bc:	4682      	mov	sl, r0
	if (res != FR_OK) return res;
    53be:	2800      	cmp	r0, #0
    53c0:	d12e      	bne.n	5420 <dir_register+0xc8>
    53c2:	465b      	mov	r3, fp
    53c4:	681f      	ldr	r7, [r3, #0]
    53c6:	691b      	ldr	r3, [r3, #16]
    53c8:	465e      	mov	r6, fp
    53ca:	4699      	mov	r9, r3
    53cc:	2300      	movs	r3, #0
    53ce:	4698      	mov	r8, r3
    53d0:	9303      	str	r3, [sp, #12]
	wsect = fs->winsect;
    53d2:	6afc      	ldr	r4, [r7, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
    53d4:	454c      	cmp	r4, r9
    53d6:	d012      	beq.n	53fe <dir_register+0xa6>
		if (fs->wflag) {	/* Write back dirty window if needed */
    53d8:	793b      	ldrb	r3, [r7, #4]
    53da:	2b00      	cmp	r3, #0
    53dc:	d000      	beq.n	53e0 <dir_register+0x88>
    53de:	e2bb      	b.n	5958 <dir_register+0x600>
		if (sector) {
    53e0:	464b      	mov	r3, r9
    53e2:	2b00      	cmp	r3, #0
    53e4:	d00b      	beq.n	53fe <dir_register+0xa6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    53e6:	0039      	movs	r1, r7
    53e8:	7878      	ldrb	r0, [r7, #1]
    53ea:	2301      	movs	r3, #1
    53ec:	464a      	mov	r2, r9
    53ee:	3130      	adds	r1, #48	; 0x30
    53f0:	4ca3      	ldr	r4, [pc, #652]	; (5680 <dir_register+0x328>)
    53f2:	47a0      	blx	r4
    53f4:	2800      	cmp	r0, #0
    53f6:	d000      	beq.n	53fa <dir_register+0xa2>
    53f8:	e2ab      	b.n	5952 <dir_register+0x5fa>
			fs->winsect = sector;
    53fa:	464b      	mov	r3, r9
    53fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	n = is = 0;
	do {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		c = *dj->dir;				/* Check the entry status */
    53fe:	6973      	ldr	r3, [r6, #20]
    5400:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
    5402:	2be5      	cmp	r3, #229	; 0xe5
    5404:	d100      	bne.n	5408 <dir_register+0xb0>
    5406:	e13f      	b.n	5688 <dir_register+0x330>
    5408:	2b00      	cmp	r3, #0
    540a:	d100      	bne.n	540e <dir_register+0xb6>
    540c:	e13c      	b.n	5688 <dir_register+0x330>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
			if (++n == ne) break;	/* A contiguous entry that required count is found */
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
    540e:	2500      	movs	r5, #0
	i = dj->index + 1;
    5410:	88f4      	ldrh	r4, [r6, #6]
    5412:	3401      	adds	r4, #1
    5414:	b2a4      	uxth	r4, r4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    5416:	2c00      	cmp	r4, #0
    5418:	d000      	beq.n	541c <dir_register+0xc4>
    541a:	e27d      	b.n	5918 <dir_register+0x5c0>
		return FR_NO_FILE;
    541c:	2304      	movs	r3, #4
    541e:	469a      	mov	sl, r3
			dj->fs->wflag = 1;
		}
	}

	return res;
}
    5420:	4650      	mov	r0, sl
    5422:	b00b      	add	sp, #44	; 0x2c
    5424:	bc3c      	pop	{r2, r3, r4, r5}
    5426:	4690      	mov	r8, r2
    5428:	4699      	mov	r9, r3
    542a:	46a2      	mov	sl, r4
    542c:	46ab      	mov	fp, r5
    542e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
    5430:	2300      	movs	r3, #0
    5432:	465a      	mov	r2, fp
    5434:	72f3      	strb	r3, [r6, #11]
    5436:	61d3      	str	r3, [r2, #28]
    5438:	4b8f      	ldr	r3, [pc, #572]	; (5678 <dir_register+0x320>)
		for (n = 1; n < 100; n++) {
    543a:	2701      	movs	r7, #1
    543c:	9301      	str	r3, [sp, #4]
		c = (seq % 16) + '0';
    543e:	230f      	movs	r3, #15
    5440:	4698      	mov	r8, r3
    5442:	ad05      	add	r5, sp, #20
    5444:	9700      	str	r7, [sp, #0]
		*d++ = *s++;
    5446:	7823      	ldrb	r3, [r4, #0]
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
    5448:	9a00      	ldr	r2, [sp, #0]
		*d++ = *s++;
    544a:	469c      	mov	ip, r3
    544c:	7033      	strb	r3, [r6, #0]
    544e:	7863      	ldrb	r3, [r4, #1]
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
    5450:	0017      	movs	r7, r2
		*d++ = *s++;
    5452:	7073      	strb	r3, [r6, #1]
    5454:	78a3      	ldrb	r3, [r4, #2]
    5456:	70b3      	strb	r3, [r6, #2]
    5458:	78e3      	ldrb	r3, [r4, #3]
    545a:	70f3      	strb	r3, [r6, #3]
    545c:	7923      	ldrb	r3, [r4, #4]
    545e:	7133      	strb	r3, [r6, #4]
    5460:	7963      	ldrb	r3, [r4, #5]
    5462:	7173      	strb	r3, [r6, #5]
    5464:	79a3      	ldrb	r3, [r4, #6]
    5466:	71b3      	strb	r3, [r6, #6]
    5468:	79e3      	ldrb	r3, [r4, #7]
    546a:	71f3      	strb	r3, [r6, #7]
    546c:	7a23      	ldrb	r3, [r4, #8]
    546e:	7233      	strb	r3, [r6, #8]
    5470:	7a63      	ldrb	r3, [r4, #9]
    5472:	7273      	strb	r3, [r6, #9]
    5474:	7aa3      	ldrb	r3, [r4, #10]
    5476:	72b3      	strb	r3, [r6, #10]
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
    5478:	0013      	movs	r3, r2
    547a:	2a05      	cmp	r2, #5
    547c:	d90e      	bls.n	549c <dir_register+0x144>
    547e:	464b      	mov	r3, r9
    5480:	8818      	ldrh	r0, [r3, #0]
    5482:	0013      	movs	r3, r2
    5484:	0001      	movs	r1, r0
    5486:	464a      	mov	r2, r9
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
    5488:	0858      	lsrs	r0, r3, #1
    548a:	03db      	lsls	r3, r3, #15
    548c:	4318      	orrs	r0, r3
    548e:	3202      	adds	r2, #2
    5490:	1840      	adds	r0, r0, r1
    5492:	8811      	ldrh	r1, [r2, #0]
    5494:	b283      	uxth	r3, r0
    5496:	2900      	cmp	r1, #0
    5498:	d1f6      	bne.n	5488 <dir_register+0x130>
    549a:	9700      	str	r7, [sp, #0]
		c = (seq % 16) + '0';
    549c:	4640      	mov	r0, r8
    549e:	4018      	ands	r0, r3
    54a0:	0002      	movs	r2, r0
    54a2:	3230      	adds	r2, #48	; 0x30
		if (c > '9') c += 7;
    54a4:	2a39      	cmp	r2, #57	; 0x39
    54a6:	d900      	bls.n	54aa <dir_register+0x152>
    54a8:	3207      	adds	r2, #7
		ns[i--] = c;
    54aa:	71ea      	strb	r2, [r5, #7]
		seq /= 16;
    54ac:	091a      	lsrs	r2, r3, #4
    54ae:	b292      	uxth	r2, r2
	} while (seq);
    54b0:	2a00      	cmp	r2, #0
    54b2:	d100      	bne.n	54b6 <dir_register+0x15e>
    54b4:	e0da      	b.n	566c <dir_register+0x314>
		c = (seq % 16) + '0';
    54b6:	4641      	mov	r1, r8
    54b8:	400a      	ands	r2, r1
    54ba:	0010      	movs	r0, r2
    54bc:	3030      	adds	r0, #48	; 0x30
		if (c > '9') c += 7;
    54be:	2839      	cmp	r0, #57	; 0x39
    54c0:	d901      	bls.n	54c6 <dir_register+0x16e>
    54c2:	3237      	adds	r2, #55	; 0x37
    54c4:	0010      	movs	r0, r2
		seq /= 16;
    54c6:	0a1a      	lsrs	r2, r3, #8
    54c8:	b292      	uxth	r2, r2
		ns[i--] = c;
    54ca:	71a8      	strb	r0, [r5, #6]
	} while (seq);
    54cc:	2a00      	cmp	r2, #0
    54ce:	d100      	bne.n	54d2 <dir_register+0x17a>
    54d0:	e0c9      	b.n	5666 <dir_register+0x30e>
		c = (seq % 16) + '0';
    54d2:	4641      	mov	r1, r8
    54d4:	400a      	ands	r2, r1
    54d6:	0010      	movs	r0, r2
    54d8:	3030      	adds	r0, #48	; 0x30
		if (c > '9') c += 7;
    54da:	2839      	cmp	r0, #57	; 0x39
    54dc:	d901      	bls.n	54e2 <dir_register+0x18a>
    54de:	3237      	adds	r2, #55	; 0x37
    54e0:	0010      	movs	r0, r2
		seq /= 16;
    54e2:	0b1b      	lsrs	r3, r3, #12
    54e4:	b29b      	uxth	r3, r3
		ns[i--] = c;
    54e6:	7168      	strb	r0, [r5, #5]
	} while (seq);
    54e8:	2b00      	cmp	r3, #0
    54ea:	d100      	bne.n	54ee <dir_register+0x196>
    54ec:	e0b8      	b.n	5660 <dir_register+0x308>
		c = (seq % 16) + '0';
    54ee:	b2db      	uxtb	r3, r3
    54f0:	001a      	movs	r2, r3
    54f2:	3230      	adds	r2, #48	; 0x30
    54f4:	b2d2      	uxtb	r2, r2
		if (c > '9') c += 7;
    54f6:	2a39      	cmp	r2, #57	; 0x39
    54f8:	d901      	bls.n	54fe <dir_register+0x1a6>
    54fa:	3337      	adds	r3, #55	; 0x37
    54fc:	b2da      	uxtb	r2, r3
		ns[i--] = c;
    54fe:	712a      	strb	r2, [r5, #4]
    5500:	2004      	movs	r0, #4
    5502:	2203      	movs	r2, #3
	ns[i] = '~';
    5504:	237e      	movs	r3, #126	; 0x7e
	for (j = 0; j < i && dst[j] != ' '; j++) {
    5506:	4661      	mov	r1, ip
	ns[i] = '~';
    5508:	54ab      	strb	r3, [r5, r2]
	for (j = 0; j < i && dst[j] != ' '; j++) {
    550a:	2920      	cmp	r1, #32
    550c:	d100      	bne.n	5510 <dir_register+0x1b8>
    550e:	e0a2      	b.n	5656 <dir_register+0x2fe>
    5510:	7873      	ldrb	r3, [r6, #1]
    5512:	1c71      	adds	r1, r6, #1
    5514:	2b20      	cmp	r3, #32
    5516:	d100      	bne.n	551a <dir_register+0x1c2>
    5518:	e252      	b.n	59c0 <dir_register+0x668>
    551a:	78b3      	ldrb	r3, [r6, #2]
    551c:	1cb1      	adds	r1, r6, #2
    551e:	2b20      	cmp	r3, #32
    5520:	d100      	bne.n	5524 <dir_register+0x1cc>
    5522:	e24b      	b.n	59bc <dir_register+0x664>
    5524:	2a03      	cmp	r2, #3
    5526:	d100      	bne.n	552a <dir_register+0x1d2>
    5528:	e240      	b.n	59ac <dir_register+0x654>
    552a:	78f3      	ldrb	r3, [r6, #3]
    552c:	1cf1      	adds	r1, r6, #3
    552e:	2b20      	cmp	r3, #32
    5530:	d100      	bne.n	5534 <dir_register+0x1dc>
    5532:	e23d      	b.n	59b0 <dir_register+0x658>
    5534:	2a04      	cmp	r2, #4
    5536:	d100      	bne.n	553a <dir_register+0x1e2>
    5538:	e236      	b.n	59a8 <dir_register+0x650>
    553a:	7933      	ldrb	r3, [r6, #4]
    553c:	1d31      	adds	r1, r6, #4
    553e:	2b20      	cmp	r3, #32
    5540:	d100      	bne.n	5544 <dir_register+0x1ec>
    5542:	e23f      	b.n	59c4 <dir_register+0x66c>
    5544:	2305      	movs	r3, #5
    5546:	2a06      	cmp	r2, #6
    5548:	d107      	bne.n	555a <dir_register+0x202>
    554a:	7973      	ldrb	r3, [r6, #5]
    554c:	1d71      	adds	r1, r6, #5
    554e:	469c      	mov	ip, r3
    5550:	4667      	mov	r7, ip
    5552:	2306      	movs	r3, #6
    5554:	2f20      	cmp	r7, #32
    5556:	d100      	bne.n	555a <dir_register+0x202>
    5558:	e236      	b.n	59c8 <dir_register+0x670>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    555a:	1c59      	adds	r1, r3, #1
    555c:	468c      	mov	ip, r1
    555e:	217e      	movs	r1, #126	; 0x7e
    5560:	54f1      	strb	r1, [r6, r3]
    5562:	1c97      	adds	r7, r2, #2
    5564:	46ba      	mov	sl, r7
    5566:	4667      	mov	r7, ip
    5568:	5c28      	ldrb	r0, [r5, r0]
    556a:	1c99      	adds	r1, r3, #2
    556c:	55f0      	strb	r0, [r6, r7]
	} while (j < 8);
    556e:	2908      	cmp	r1, #8
    5570:	d01e      	beq.n	55b0 <dir_register+0x258>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    5572:	4657      	mov	r7, sl
    5574:	1cd8      	adds	r0, r3, #3
    5576:	1871      	adds	r1, r6, r1
    5578:	2f08      	cmp	r7, #8
    557a:	d12e      	bne.n	55da <dir_register+0x282>
    557c:	2220      	movs	r2, #32
    557e:	700a      	strb	r2, [r1, #0]
	} while (j < 8);
    5580:	2808      	cmp	r0, #8
    5582:	d015      	beq.n	55b0 <dir_register+0x258>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    5584:	1d19      	adds	r1, r3, #4
    5586:	5432      	strb	r2, [r6, r0]
	} while (j < 8);
    5588:	2908      	cmp	r1, #8
    558a:	d011      	beq.n	55b0 <dir_register+0x258>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    558c:	1d58      	adds	r0, r3, #5
    558e:	1873      	adds	r3, r6, r1
    5590:	469c      	mov	ip, r3
    5592:	2320      	movs	r3, #32
    5594:	4662      	mov	r2, ip
    5596:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
    5598:	2808      	cmp	r0, #8
    559a:	d009      	beq.n	55b0 <dir_register+0x258>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    559c:	1c8a      	adds	r2, r1, #2
    559e:	5433      	strb	r3, [r6, r0]
	} while (j < 8);
    55a0:	2a08      	cmp	r2, #8
    55a2:	d005      	beq.n	55b0 <dir_register+0x258>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    55a4:	54b3      	strb	r3, [r6, r2]
    55a6:	1df2      	adds	r2, r6, #7
	} while (j < 8);
    55a8:	2904      	cmp	r1, #4
    55aa:	d101      	bne.n	55b0 <dir_register+0x258>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    55ac:	2320      	movs	r3, #32
    55ae:	7013      	strb	r3, [r2, #0]
	res = dir_sdi(dj, 0);			/* Rewind directory object */
    55b0:	2100      	movs	r1, #0
    55b2:	4658      	mov	r0, fp
    55b4:	9b01      	ldr	r3, [sp, #4]
    55b6:	4798      	blx	r3
	if (res != FR_OK) return res;
    55b8:	2800      	cmp	r0, #0
    55ba:	d141      	bne.n	5640 <dir_register+0x2e8>
    55bc:	4658      	mov	r0, fp
    55be:	4b31      	ldr	r3, [pc, #196]	; (5684 <dir_register+0x32c>)
    55c0:	4798      	blx	r3
			if (res != FR_OK) break;
    55c2:	2800      	cmp	r0, #0
    55c4:	d13c      	bne.n	5640 <dir_register+0x2e8>
		for (n = 1; n < 100; n++) {
    55c6:	9f00      	ldr	r7, [sp, #0]
    55c8:	3701      	adds	r7, #1
    55ca:	b2bb      	uxth	r3, r7
    55cc:	9300      	str	r3, [sp, #0]
    55ce:	2b64      	cmp	r3, #100	; 0x64
    55d0:	d000      	beq.n	55d4 <dir_register+0x27c>
    55d2:	e738      	b.n	5446 <dir_register+0xee>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    55d4:	2307      	movs	r3, #7
    55d6:	469a      	mov	sl, r3
    55d8:	e722      	b.n	5420 <dir_register+0xc8>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    55da:	1cd7      	adds	r7, r2, #3
    55dc:	46bc      	mov	ip, r7
    55de:	4657      	mov	r7, sl
    55e0:	5def      	ldrb	r7, [r5, r7]
    55e2:	700f      	strb	r7, [r1, #0]
	} while (j < 8);
    55e4:	2808      	cmp	r0, #8
    55e6:	d0e3      	beq.n	55b0 <dir_register+0x258>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    55e8:	4667      	mov	r7, ip
    55ea:	1d19      	adds	r1, r3, #4
    55ec:	1830      	adds	r0, r6, r0
    55ee:	2f08      	cmp	r7, #8
    55f0:	d112      	bne.n	5618 <dir_register+0x2c0>
    55f2:	2220      	movs	r2, #32
    55f4:	7002      	strb	r2, [r0, #0]
	} while (j < 8);
    55f6:	2908      	cmp	r1, #8
    55f8:	d0da      	beq.n	55b0 <dir_register+0x258>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    55fa:	1d58      	adds	r0, r3, #5
    55fc:	5472      	strb	r2, [r6, r1]
	} while (j < 8);
    55fe:	2808      	cmp	r0, #8
    5600:	d0d6      	beq.n	55b0 <dir_register+0x258>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    5602:	2220      	movs	r2, #32
    5604:	1831      	adds	r1, r6, r0
    5606:	3306      	adds	r3, #6
    5608:	700a      	strb	r2, [r1, #0]
	} while (j < 8);
    560a:	2b08      	cmp	r3, #8
    560c:	d0d0      	beq.n	55b0 <dir_register+0x258>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    560e:	54f2      	strb	r2, [r6, r3]
	} while (j < 8);
    5610:	2805      	cmp	r0, #5
    5612:	d1cd      	bne.n	55b0 <dir_register+0x258>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    5614:	1df2      	adds	r2, r6, #7
    5616:	e7c9      	b.n	55ac <dir_register+0x254>
    5618:	4667      	mov	r7, ip
    561a:	5def      	ldrb	r7, [r5, r7]
    561c:	7007      	strb	r7, [r0, #0]
	} while (j < 8);
    561e:	2908      	cmp	r1, #8
    5620:	d0c6      	beq.n	55b0 <dir_register+0x258>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    5622:	1877      	adds	r7, r6, r1
    5624:	1d58      	adds	r0, r3, #5
    5626:	46bc      	mov	ip, r7
    5628:	2a04      	cmp	r2, #4
    562a:	d0b2      	beq.n	5592 <dir_register+0x23a>
    562c:	79ea      	ldrb	r2, [r5, #7]
    562e:	703a      	strb	r2, [r7, #0]
	} while (j < 8);
    5630:	2808      	cmp	r0, #8
    5632:	d1e6      	bne.n	5602 <dir_register+0x2aa>
	res = dir_sdi(dj, 0);			/* Rewind directory object */
    5634:	2100      	movs	r1, #0
    5636:	4658      	mov	r0, fp
    5638:	9b01      	ldr	r3, [sp, #4]
    563a:	4798      	blx	r3
	if (res != FR_OK) return res;
    563c:	2800      	cmp	r0, #0
    563e:	d0bd      	beq.n	55bc <dir_register+0x264>
    5640:	4682      	mov	sl, r0
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
    5642:	2804      	cmp	r0, #4
    5644:	d000      	beq.n	5648 <dir_register+0x2f0>
    5646:	e6eb      	b.n	5420 <dir_register+0xc8>
		fn[NS] = sn[NS]; dj->lfn = lfn;
    5648:	466b      	mov	r3, sp
    564a:	7a1b      	ldrb	r3, [r3, #8]
    564c:	464a      	mov	r2, r9
    564e:	72f3      	strb	r3, [r6, #11]
    5650:	465b      	mov	r3, fp
    5652:	61da      	str	r2, [r3, #28]
    5654:	e697      	b.n	5386 <dir_register+0x2e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    5656:	7033      	strb	r3, [r6, #0]
    5658:	2301      	movs	r3, #1
    565a:	469c      	mov	ip, r3
	for (j = 0; j < i && dst[j] != ' '; j++) {
    565c:	2300      	movs	r3, #0
    565e:	e780      	b.n	5562 <dir_register+0x20a>
	} while (seq);
    5660:	2005      	movs	r0, #5
		ns[i--] = c;
    5662:	2204      	movs	r2, #4
    5664:	e74e      	b.n	5504 <dir_register+0x1ac>
	} while (seq);
    5666:	2006      	movs	r0, #6
		ns[i--] = c;
    5668:	2205      	movs	r2, #5
    566a:	e74b      	b.n	5504 <dir_register+0x1ac>
	} while (seq);
    566c:	2007      	movs	r0, #7
		ns[i--] = c;
    566e:	2206      	movs	r2, #6
    5670:	e748      	b.n	5504 <dir_register+0x1ac>
    5672:	46c0      	nop			; (mov r8, r8)
    5674:	0001efe9 	.word	0x0001efe9
    5678:	00004aa1 	.word	0x00004aa1
    567c:	0001c0a1 	.word	0x0001c0a1
    5680:	00003d3d 	.word	0x00003d3d
    5684:	00005005 	.word	0x00005005
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
    5688:	4643      	mov	r3, r8
    568a:	2b00      	cmp	r3, #0
    568c:	d101      	bne.n	5692 <dir_register+0x33a>
    568e:	88f3      	ldrh	r3, [r6, #6]
    5690:	9303      	str	r3, [sp, #12]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
    5692:	4643      	mov	r3, r8
    5694:	1c5d      	adds	r5, r3, #1
    5696:	9b00      	ldr	r3, [sp, #0]
    5698:	b2ad      	uxth	r5, r5
    569a:	42ab      	cmp	r3, r5
    569c:	d000      	beq.n	56a0 <dir_register+0x348>
    569e:	e6b7      	b.n	5410 <dir_register+0xb8>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
    56a0:	9b00      	ldr	r3, [sp, #0]
    56a2:	4644      	mov	r4, r8
    56a4:	46b3      	mov	fp, r6
    56a6:	2b01      	cmp	r3, #1
    56a8:	d100      	bne.n	56ac <dir_register+0x354>
    56aa:	e1ab      	b.n	5a04 <dir_register+0x6ac>
		res = dir_sdi(dj, is);
    56ac:	9903      	ldr	r1, [sp, #12]
    56ae:	4658      	mov	r0, fp
    56b0:	9b01      	ldr	r3, [sp, #4]
    56b2:	4798      	blx	r3
		if (res == FR_OK) {
    56b4:	2800      	cmp	r0, #0
    56b6:	d000      	beq.n	56ba <dir_register+0x362>
    56b8:	e210      	b.n	5adc <dir_register+0x784>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
    56ba:	465b      	mov	r3, fp
    56bc:	6999      	ldr	r1, [r3, #24]
				res = dir_next(dj, 0);	/* Next entry */
    56be:	465d      	mov	r5, fp
	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    56c0:	780a      	ldrb	r2, [r1, #0]
				res = dir_next(dj, 0);	/* Next entry */
    56c2:	46a3      	mov	fp, r4
	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    56c4:	0853      	lsrs	r3, r2, #1
    56c6:	01d2      	lsls	r2, r2, #7
    56c8:	4313      	orrs	r3, r2
    56ca:	784a      	ldrb	r2, [r1, #1]
    56cc:	189b      	adds	r3, r3, r2
    56ce:	b2da      	uxtb	r2, r3
    56d0:	0852      	lsrs	r2, r2, #1
    56d2:	01db      	lsls	r3, r3, #7
    56d4:	431a      	orrs	r2, r3
    56d6:	788b      	ldrb	r3, [r1, #2]
    56d8:	b2d2      	uxtb	r2, r2
    56da:	18d2      	adds	r2, r2, r3
    56dc:	b2d3      	uxtb	r3, r2
    56de:	085b      	lsrs	r3, r3, #1
    56e0:	01d2      	lsls	r2, r2, #7
    56e2:	4313      	orrs	r3, r2
    56e4:	78ca      	ldrb	r2, [r1, #3]
    56e6:	b2db      	uxtb	r3, r3
    56e8:	189b      	adds	r3, r3, r2
    56ea:	b2da      	uxtb	r2, r3
    56ec:	0852      	lsrs	r2, r2, #1
    56ee:	01db      	lsls	r3, r3, #7
    56f0:	431a      	orrs	r2, r3
    56f2:	790b      	ldrb	r3, [r1, #4]
    56f4:	b2d2      	uxtb	r2, r2
    56f6:	18d2      	adds	r2, r2, r3
    56f8:	b2d3      	uxtb	r3, r2
    56fa:	085b      	lsrs	r3, r3, #1
    56fc:	01d2      	lsls	r2, r2, #7
    56fe:	4313      	orrs	r3, r2
    5700:	794a      	ldrb	r2, [r1, #5]
    5702:	b2db      	uxtb	r3, r3
    5704:	189b      	adds	r3, r3, r2
    5706:	b2da      	uxtb	r2, r3
    5708:	0852      	lsrs	r2, r2, #1
    570a:	01db      	lsls	r3, r3, #7
    570c:	431a      	orrs	r2, r3
    570e:	798b      	ldrb	r3, [r1, #6]
    5710:	b2d2      	uxtb	r2, r2
    5712:	18d2      	adds	r2, r2, r3
    5714:	b2d3      	uxtb	r3, r2
    5716:	085b      	lsrs	r3, r3, #1
    5718:	01d2      	lsls	r2, r2, #7
    571a:	4313      	orrs	r3, r2
    571c:	79ca      	ldrb	r2, [r1, #7]
    571e:	b2db      	uxtb	r3, r3
    5720:	189b      	adds	r3, r3, r2
    5722:	b2da      	uxtb	r2, r3
    5724:	0852      	lsrs	r2, r2, #1
    5726:	01db      	lsls	r3, r3, #7
    5728:	431a      	orrs	r2, r3
    572a:	7a0b      	ldrb	r3, [r1, #8]
    572c:	b2d2      	uxtb	r2, r2
    572e:	18d2      	adds	r2, r2, r3
    5730:	b2d3      	uxtb	r3, r2
    5732:	085b      	lsrs	r3, r3, #1
    5734:	01d2      	lsls	r2, r2, #7
    5736:	4313      	orrs	r3, r2
    5738:	7a4a      	ldrb	r2, [r1, #9]
    573a:	b2db      	uxtb	r3, r3
    573c:	189b      	adds	r3, r3, r2
    573e:	b2da      	uxtb	r2, r3
    5740:	0852      	lsrs	r2, r2, #1
    5742:	01db      	lsls	r3, r3, #7
    5744:	4313      	orrs	r3, r2
    5746:	7a8a      	ldrb	r2, [r1, #10]
    5748:	189b      	adds	r3, r3, r2
    574a:	b2db      	uxtb	r3, r3
    574c:	9301      	str	r3, [sp, #4]
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    574e:	4bcc      	ldr	r3, [pc, #816]	; (5a80 <dir_register+0x728>)
    5750:	4698      	mov	r8, r3
    5752:	e036      	b.n	57c2 <dir_register+0x46a>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    5754:	22ff      	movs	r2, #255	; 0xff
    5756:	70da      	strb	r2, [r3, #3]
    5758:	711a      	strb	r2, [r3, #4]
    575a:	22ff      	movs	r2, #255	; 0xff
    575c:	715a      	strb	r2, [r3, #5]
    575e:	719a      	strb	r2, [r3, #6]
    5760:	22ff      	movs	r2, #255	; 0xff
    5762:	71da      	strb	r2, [r3, #7]
    5764:	721a      	strb	r2, [r3, #8]
    5766:	22ff      	movs	r2, #255	; 0xff
    5768:	725a      	strb	r2, [r3, #9]
    576a:	729a      	strb	r2, [r3, #10]
    576c:	22ff      	movs	r2, #255	; 0xff
    576e:	739a      	strb	r2, [r3, #14]
    5770:	73da      	strb	r2, [r3, #15]
    5772:	22ff      	movs	r2, #255	; 0xff
    5774:	741a      	strb	r2, [r3, #16]
    5776:	745a      	strb	r2, [r3, #17]
    5778:	22ff      	movs	r2, #255	; 0xff
    577a:	749a      	strb	r2, [r3, #18]
    577c:	74da      	strb	r2, [r3, #19]
    577e:	22ff      	movs	r2, #255	; 0xff
    5780:	751a      	strb	r2, [r3, #20]
    5782:	755a      	strb	r2, [r3, #21]
    5784:	22ff      	movs	r2, #255	; 0xff
    5786:	759a      	strb	r2, [r3, #22]
    5788:	75da      	strb	r2, [r3, #23]
    578a:	22ff      	movs	r2, #255	; 0xff
    578c:	761a      	strb	r2, [r3, #24]
    578e:	765a      	strb	r2, [r3, #25]
    5790:	22ff      	movs	r2, #255	; 0xff
    5792:	771a      	strb	r2, [r3, #28]
    5794:	775a      	strb	r2, [r3, #29]
    5796:	22ff      	movs	r2, #255	; 0xff
    5798:	779a      	strb	r2, [r3, #30]
    579a:	77da      	strb	r2, [r3, #31]
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
    579c:	2240      	movs	r2, #64	; 0x40
    579e:	4314      	orrs	r4, r2
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
    57a0:	701c      	strb	r4, [r3, #0]
				dj->fs->wflag = 1;
    57a2:	2301      	movs	r3, #1
    57a4:	682a      	ldr	r2, [r5, #0]
				res = dir_next(dj, 0);	/* Next entry */
    57a6:	0028      	movs	r0, r5
				dj->fs->wflag = 1;
    57a8:	7113      	strb	r3, [r2, #4]
				res = dir_next(dj, 0);	/* Next entry */
    57aa:	4bb6      	ldr	r3, [pc, #728]	; (5a84 <dir_register+0x72c>)
    57ac:	4798      	blx	r3
			} while (res == FR_OK && --ne);
    57ae:	2800      	cmp	r0, #0
    57b0:	d000      	beq.n	57b4 <dir_register+0x45c>
    57b2:	e193      	b.n	5adc <dir_register+0x784>
    57b4:	465b      	mov	r3, fp
    57b6:	3b01      	subs	r3, #1
    57b8:	b29b      	uxth	r3, r3
    57ba:	469b      	mov	fp, r3
    57bc:	2b00      	cmp	r3, #0
    57be:	d100      	bne.n	57c2 <dir_register+0x46a>
    57c0:	e11f      	b.n	5a02 <dir_register+0x6aa>
				res = move_window(dj->fs, dj->sect);
    57c2:	682c      	ldr	r4, [r5, #0]
    57c4:	692b      	ldr	r3, [r5, #16]
	wsect = fs->winsect;
    57c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
				res = move_window(dj->fs, dj->sect);
    57c8:	4699      	mov	r9, r3
	if (wsect != sector) {	/* Changed current window */
    57ca:	42b3      	cmp	r3, r6
    57cc:	d012      	beq.n	57f4 <dir_register+0x49c>
		if (fs->wflag) {	/* Write back dirty window if needed */
    57ce:	7923      	ldrb	r3, [r4, #4]
    57d0:	2b00      	cmp	r3, #0
    57d2:	d000      	beq.n	57d6 <dir_register+0x47e>
    57d4:	e15e      	b.n	5a94 <dir_register+0x73c>
		if (sector) {
    57d6:	464b      	mov	r3, r9
    57d8:	2b00      	cmp	r3, #0
    57da:	d00b      	beq.n	57f4 <dir_register+0x49c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    57dc:	0021      	movs	r1, r4
    57de:	7860      	ldrb	r0, [r4, #1]
    57e0:	2301      	movs	r3, #1
    57e2:	464a      	mov	r2, r9
    57e4:	3130      	adds	r1, #48	; 0x30
    57e6:	4ea8      	ldr	r6, [pc, #672]	; (5a88 <dir_register+0x730>)
    57e8:	47b0      	blx	r6
    57ea:	2800      	cmp	r0, #0
    57ec:	d000      	beq.n	57f0 <dir_register+0x498>
    57ee:	e0b0      	b.n	5952 <dir_register+0x5fa>
			fs->winsect = sector;
    57f0:	464b      	mov	r3, r9
    57f2:	62e3      	str	r3, [r4, #44]	; 0x2c
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
    57f4:	4669      	mov	r1, sp
    57f6:	465a      	mov	r2, fp
    57f8:	696b      	ldr	r3, [r5, #20]
    57fa:	700a      	strb	r2, [r1, #0]
	dir[LDIR_Chksum] = sum;			/* Set check sum */
    57fc:	790a      	ldrb	r2, [r1, #4]
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
    57fe:	69e8      	ldr	r0, [r5, #28]
	dir[LDIR_Chksum] = sum;			/* Set check sum */
    5800:	735a      	strb	r2, [r3, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
    5802:	220f      	movs	r2, #15
    5804:	72da      	strb	r2, [r3, #11]
	dir[LDIR_Type] = 0;
    5806:	2200      	movs	r2, #0
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
    5808:	780c      	ldrb	r4, [r1, #0]
	dir[LDIR_Type] = 0;
    580a:	731a      	strb	r2, [r3, #12]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
    580c:	1e61      	subs	r1, r4, #1
	ST_WORD(dir+LDIR_FstClusLO, 0);
    580e:	769a      	strb	r2, [r3, #26]
    5810:	76da      	strb	r2, [r3, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
    5812:	004a      	lsls	r2, r1, #1
    5814:	1852      	adds	r2, r2, r1
    5816:	0092      	lsls	r2, r2, #2
    5818:	1852      	adds	r2, r2, r1
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    581a:	0051      	lsls	r1, r2, #1
    581c:	4689      	mov	r9, r1
    581e:	5a41      	ldrh	r1, [r0, r1]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    5820:	0a0f      	lsrs	r7, r1, #8
    5822:	7059      	strb	r1, [r3, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    5824:	3901      	subs	r1, #1
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    5826:	709f      	strb	r7, [r3, #2]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    5828:	b28f      	uxth	r7, r1
    582a:	4998      	ldr	r1, [pc, #608]	; (5a8c <dir_register+0x734>)
    582c:	428f      	cmp	r7, r1
    582e:	d891      	bhi.n	5754 <dir_register+0x3fc>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    5830:	3201      	adds	r2, #1
    5832:	0052      	lsls	r2, r2, #1
    5834:	5a87      	ldrh	r7, [r0, r2]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    5836:	0a3e      	lsrs	r6, r7, #8
    5838:	70df      	strb	r7, [r3, #3]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    583a:	3f01      	subs	r7, #1
    583c:	b2bf      	uxth	r7, r7
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    583e:	711e      	strb	r6, [r3, #4]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    5840:	428f      	cmp	r7, r1
    5842:	d88a      	bhi.n	575a <dir_register+0x402>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    5844:	1882      	adds	r2, r0, r2
    5846:	8857      	ldrh	r7, [r2, #2]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    5848:	0a3e      	lsrs	r6, r7, #8
    584a:	715f      	strb	r7, [r3, #5]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    584c:	3f01      	subs	r7, #1
    584e:	b2bf      	uxth	r7, r7
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    5850:	719e      	strb	r6, [r3, #6]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    5852:	428f      	cmp	r7, r1
    5854:	d884      	bhi.n	5760 <dir_register+0x408>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    5856:	8897      	ldrh	r7, [r2, #4]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    5858:	0a3e      	lsrs	r6, r7, #8
    585a:	71df      	strb	r7, [r3, #7]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    585c:	3f01      	subs	r7, #1
    585e:	b2bf      	uxth	r7, r7
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    5860:	721e      	strb	r6, [r3, #8]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    5862:	428f      	cmp	r7, r1
    5864:	d900      	bls.n	5868 <dir_register+0x510>
    5866:	e77e      	b.n	5766 <dir_register+0x40e>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    5868:	88d7      	ldrh	r7, [r2, #6]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    586a:	0a3e      	lsrs	r6, r7, #8
    586c:	725f      	strb	r7, [r3, #9]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    586e:	3f01      	subs	r7, #1
    5870:	b2bf      	uxth	r7, r7
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    5872:	729e      	strb	r6, [r3, #10]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    5874:	428f      	cmp	r7, r1
    5876:	d900      	bls.n	587a <dir_register+0x522>
    5878:	e778      	b.n	576c <dir_register+0x414>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    587a:	8917      	ldrh	r7, [r2, #8]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    587c:	0a3e      	lsrs	r6, r7, #8
    587e:	739f      	strb	r7, [r3, #14]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    5880:	3f01      	subs	r7, #1
    5882:	b2bf      	uxth	r7, r7
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    5884:	73de      	strb	r6, [r3, #15]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    5886:	428f      	cmp	r7, r1
    5888:	d900      	bls.n	588c <dir_register+0x534>
    588a:	e772      	b.n	5772 <dir_register+0x41a>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    588c:	8957      	ldrh	r7, [r2, #10]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    588e:	0a3e      	lsrs	r6, r7, #8
    5890:	741f      	strb	r7, [r3, #16]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    5892:	3f01      	subs	r7, #1
    5894:	b2bf      	uxth	r7, r7
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    5896:	745e      	strb	r6, [r3, #17]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    5898:	428f      	cmp	r7, r1
    589a:	d900      	bls.n	589e <dir_register+0x546>
    589c:	e76c      	b.n	5778 <dir_register+0x420>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    589e:	8997      	ldrh	r7, [r2, #12]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    58a0:	0a3e      	lsrs	r6, r7, #8
    58a2:	749f      	strb	r7, [r3, #18]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    58a4:	3f01      	subs	r7, #1
    58a6:	b2bf      	uxth	r7, r7
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    58a8:	74de      	strb	r6, [r3, #19]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    58aa:	428f      	cmp	r7, r1
    58ac:	d900      	bls.n	58b0 <dir_register+0x558>
    58ae:	e766      	b.n	577e <dir_register+0x426>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    58b0:	89d7      	ldrh	r7, [r2, #14]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    58b2:	0a3e      	lsrs	r6, r7, #8
    58b4:	751f      	strb	r7, [r3, #20]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    58b6:	3f01      	subs	r7, #1
    58b8:	b2bf      	uxth	r7, r7
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    58ba:	755e      	strb	r6, [r3, #21]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    58bc:	428f      	cmp	r7, r1
    58be:	d900      	bls.n	58c2 <dir_register+0x56a>
    58c0:	e760      	b.n	5784 <dir_register+0x42c>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    58c2:	8a17      	ldrh	r7, [r2, #16]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    58c4:	0a3e      	lsrs	r6, r7, #8
    58c6:	759f      	strb	r7, [r3, #22]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    58c8:	3f01      	subs	r7, #1
    58ca:	b2bf      	uxth	r7, r7
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    58cc:	75de      	strb	r6, [r3, #23]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    58ce:	428f      	cmp	r7, r1
    58d0:	d900      	bls.n	58d4 <dir_register+0x57c>
    58d2:	e75a      	b.n	578a <dir_register+0x432>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    58d4:	8a51      	ldrh	r1, [r2, #18]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    58d6:	0a0f      	lsrs	r7, r1, #8
    58d8:	7619      	strb	r1, [r3, #24]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    58da:	3901      	subs	r1, #1
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    58dc:	765f      	strb	r7, [r3, #25]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    58de:	b28f      	uxth	r7, r1
    58e0:	496a      	ldr	r1, [pc, #424]	; (5a8c <dir_register+0x734>)
    58e2:	428f      	cmp	r7, r1
    58e4:	d900      	bls.n	58e8 <dir_register+0x590>
    58e6:	e753      	b.n	5790 <dir_register+0x438>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    58e8:	8a97      	ldrh	r7, [r2, #20]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    58ea:	0a3e      	lsrs	r6, r7, #8
    58ec:	771f      	strb	r7, [r3, #28]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    58ee:	3f01      	subs	r7, #1
    58f0:	b2bf      	uxth	r7, r7
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    58f2:	775e      	strb	r6, [r3, #29]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    58f4:	428f      	cmp	r7, r1
    58f6:	d900      	bls.n	58fa <dir_register+0x5a2>
    58f8:	e74d      	b.n	5796 <dir_register+0x43e>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    58fa:	8ad2      	ldrh	r2, [r2, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    58fc:	0a17      	lsrs	r7, r2, #8
    58fe:	779a      	strb	r2, [r3, #30]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    5900:	3a01      	subs	r2, #1
    5902:	b292      	uxth	r2, r2
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    5904:	77df      	strb	r7, [r3, #31]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    5906:	428a      	cmp	r2, r1
    5908:	d900      	bls.n	590c <dir_register+0x5b4>
    590a:	e747      	b.n	579c <dir_register+0x444>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
    590c:	4448      	add	r0, r9
    590e:	8b42      	ldrh	r2, [r0, #26]
    5910:	2a00      	cmp	r2, #0
    5912:	d100      	bne.n	5916 <dir_register+0x5be>
    5914:	e742      	b.n	579c <dir_register+0x444>
    5916:	e743      	b.n	57a0 <dir_register+0x448>
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    5918:	6933      	ldr	r3, [r6, #16]
    591a:	4699      	mov	r9, r3
    591c:	2b00      	cmp	r3, #0
    591e:	d100      	bne.n	5922 <dir_register+0x5ca>
    5920:	e57c      	b.n	541c <dir_register+0xc4>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    5922:	230f      	movs	r3, #15
    5924:	4023      	ands	r3, r4
    5926:	4698      	mov	r8, r3
    5928:	d050      	beq.n	59cc <dir_register+0x674>
    592a:	6837      	ldr	r7, [r6, #0]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    592c:	4643      	mov	r3, r8
    592e:	015a      	lsls	r2, r3, #5
    5930:	003b      	movs	r3, r7
    5932:	3330      	adds	r3, #48	; 0x30
    5934:	189b      	adds	r3, r3, r2
	dj->index = i;
    5936:	80f4      	strh	r4, [r6, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    5938:	6173      	str	r3, [r6, #20]
    593a:	46a8      	mov	r8, r5
    593c:	e549      	b.n	53d2 <dir_register+0x7a>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    593e:	0021      	movs	r1, r4
    5940:	7860      	ldrb	r0, [r4, #1]
    5942:	2301      	movs	r3, #1
    5944:	003a      	movs	r2, r7
    5946:	3130      	adds	r1, #48	; 0x30
    5948:	4d4f      	ldr	r5, [pc, #316]	; (5a88 <dir_register+0x730>)
    594a:	47a8      	blx	r5
    594c:	2800      	cmp	r0, #0
    594e:	d100      	bne.n	5952 <dir_register+0x5fa>
    5950:	e0c6      	b.n	5ae0 <dir_register+0x788>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    5952:	2301      	movs	r3, #1
    5954:	469a      	mov	sl, r3
    5956:	e563      	b.n	5420 <dir_register+0xc8>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    5958:	2330      	movs	r3, #48	; 0x30
    595a:	469b      	mov	fp, r3
    595c:	44bb      	add	fp, r7
    595e:	7878      	ldrb	r0, [r7, #1]
    5960:	3b2f      	subs	r3, #47	; 0x2f
    5962:	0022      	movs	r2, r4
    5964:	4659      	mov	r1, fp
    5966:	4d46      	ldr	r5, [pc, #280]	; (5a80 <dir_register+0x728>)
    5968:	47a8      	blx	r5
    596a:	2800      	cmp	r0, #0
    596c:	d1f1      	bne.n	5952 <dir_register+0x5fa>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    596e:	69fb      	ldr	r3, [r7, #28]
    5970:	6a3a      	ldr	r2, [r7, #32]
			fs->wflag = 0;
    5972:	7138      	strb	r0, [r7, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    5974:	189a      	adds	r2, r3, r2
    5976:	4294      	cmp	r4, r2
    5978:	d300      	bcc.n	597c <dir_register+0x624>
    597a:	e531      	b.n	53e0 <dir_register+0x88>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    597c:	78fd      	ldrb	r5, [r7, #3]
    597e:	2d01      	cmp	r5, #1
    5980:	d800      	bhi.n	5984 <dir_register+0x62c>
    5982:	e52d      	b.n	53e0 <dir_register+0x88>
    5984:	4659      	mov	r1, fp
    5986:	46b3      	mov	fp, r6
    5988:	9102      	str	r1, [sp, #8]
    598a:	e001      	b.n	5990 <dir_register+0x638>
    598c:	69fb      	ldr	r3, [r7, #28]
    598e:	9902      	ldr	r1, [sp, #8]
					wsect += fs->fsize;
    5990:	18e4      	adds	r4, r4, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    5992:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    5994:	7878      	ldrb	r0, [r7, #1]
    5996:	2301      	movs	r3, #1
    5998:	0022      	movs	r2, r4
    599a:	4e39      	ldr	r6, [pc, #228]	; (5a80 <dir_register+0x728>)
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    599c:	b2ed      	uxtb	r5, r5
					disk_write(fs->drv, fs->win, wsect, 1);
    599e:	47b0      	blx	r6
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    59a0:	2d01      	cmp	r5, #1
    59a2:	d1f3      	bne.n	598c <dir_register+0x634>
    59a4:	465e      	mov	r6, fp
    59a6:	e51b      	b.n	53e0 <dir_register+0x88>
	for (j = 0; j < i && dst[j] != ' '; j++) {
    59a8:	2304      	movs	r3, #4
    59aa:	e5d6      	b.n	555a <dir_register+0x202>
    59ac:	2303      	movs	r3, #3
    59ae:	e5d4      	b.n	555a <dir_register+0x202>
    59b0:	2303      	movs	r3, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    59b2:	1c5f      	adds	r7, r3, #1
    59b4:	46bc      	mov	ip, r7
    59b6:	277e      	movs	r7, #126	; 0x7e
    59b8:	700f      	strb	r7, [r1, #0]
    59ba:	e5d2      	b.n	5562 <dir_register+0x20a>
	for (j = 0; j < i && dst[j] != ' '; j++) {
    59bc:	2302      	movs	r3, #2
    59be:	e7f8      	b.n	59b2 <dir_register+0x65a>
    59c0:	2301      	movs	r3, #1
    59c2:	e7f6      	b.n	59b2 <dir_register+0x65a>
    59c4:	2304      	movs	r3, #4
    59c6:	e7f4      	b.n	59b2 <dir_register+0x65a>
    59c8:	3b01      	subs	r3, #1
    59ca:	e7f2      	b.n	59b2 <dir_register+0x65a>
		dj->sect++;					/* Next sector */
    59cc:	2301      	movs	r3, #1
    59ce:	469c      	mov	ip, r3
    59d0:	44e1      	add	r9, ip
    59d2:	464b      	mov	r3, r9
		if (dj->clust == 0) {	/* Static table */
    59d4:	68f1      	ldr	r1, [r6, #12]
		dj->sect++;					/* Next sector */
    59d6:	6133      	str	r3, [r6, #16]
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    59d8:	6837      	ldr	r7, [r6, #0]
		if (dj->clust == 0) {	/* Static table */
    59da:	2900      	cmp	r1, #0
    59dc:	d00c      	beq.n	59f8 <dir_register+0x6a0>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    59de:	78bb      	ldrb	r3, [r7, #2]
    59e0:	0922      	lsrs	r2, r4, #4
    59e2:	3b01      	subs	r3, #1
    59e4:	421a      	tst	r2, r3
    59e6:	d1a1      	bne.n	592c <dir_register+0x5d4>
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    59e8:	2901      	cmp	r1, #1
    59ea:	d902      	bls.n	59f2 <dir_register+0x69a>
    59ec:	69bb      	ldr	r3, [r7, #24]
    59ee:	4299      	cmp	r1, r3
    59f0:	d378      	bcc.n	5ae4 <dir_register+0x78c>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    59f2:	2302      	movs	r3, #2
    59f4:	469a      	mov	sl, r3
    59f6:	e513      	b.n	5420 <dir_register+0xc8>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    59f8:	893b      	ldrh	r3, [r7, #8]
    59fa:	42a3      	cmp	r3, r4
    59fc:	d800      	bhi.n	5a00 <dir_register+0x6a8>
    59fe:	e50d      	b.n	541c <dir_register+0xc4>
    5a00:	e794      	b.n	592c <dir_register+0x5d4>
    5a02:	46ab      	mov	fp, r5
		res = move_window(dj->fs, dj->sect);
    5a04:	465b      	mov	r3, fp
    5a06:	681c      	ldr	r4, [r3, #0]
    5a08:	691f      	ldr	r7, [r3, #16]
	wsect = fs->winsect;
    5a0a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
    5a0c:	42af      	cmp	r7, r5
    5a0e:	d005      	beq.n	5a1c <dir_register+0x6c4>
		if (fs->wflag) {	/* Write back dirty window if needed */
    5a10:	7923      	ldrb	r3, [r4, #4]
    5a12:	2b00      	cmp	r3, #0
    5a14:	d000      	beq.n	5a18 <dir_register+0x6c0>
    5a16:	e0ba      	b.n	5b8e <dir_register+0x836>
		if (sector) {
    5a18:	2f00      	cmp	r7, #0
    5a1a:	d190      	bne.n	593e <dir_register+0x5e6>
			dir = dj->dir;
    5a1c:	465b      	mov	r3, fp
    5a1e:	695c      	ldr	r4, [r3, #20]
    5a20:	2220      	movs	r2, #32
    5a22:	2100      	movs	r1, #0
    5a24:	4b1a      	ldr	r3, [pc, #104]	; (5a90 <dir_register+0x738>)
    5a26:	0020      	movs	r0, r4
    5a28:	4798      	blx	r3
    5a2a:	2200      	movs	r2, #0
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    5a2c:	465b      	mov	r3, fp
    5a2e:	0010      	movs	r0, r2
    5a30:	699b      	ldr	r3, [r3, #24]
    5a32:	1d19      	adds	r1, r3, #4
    5a34:	428c      	cmp	r4, r1
    5a36:	4150      	adcs	r0, r2
    5a38:	0001      	movs	r1, r0
    5a3a:	1d20      	adds	r0, r4, #4
    5a3c:	4283      	cmp	r3, r0
    5a3e:	4152      	adcs	r2, r2
    5a40:	430a      	orrs	r2, r1
    5a42:	b2d2      	uxtb	r2, r2
    5a44:	2a00      	cmp	r2, #0
    5a46:	d100      	bne.n	5a4a <dir_register+0x6f2>
    5a48:	e0db      	b.n	5c02 <dir_register+0x8aa>
    5a4a:	001a      	movs	r2, r3
    5a4c:	4322      	orrs	r2, r4
    5a4e:	0792      	lsls	r2, r2, #30
    5a50:	d000      	beq.n	5a54 <dir_register+0x6fc>
    5a52:	e0d6      	b.n	5c02 <dir_register+0x8aa>
		*d++ = *s++;
    5a54:	681a      	ldr	r2, [r3, #0]
    5a56:	6022      	str	r2, [r4, #0]
    5a58:	685a      	ldr	r2, [r3, #4]
    5a5a:	6062      	str	r2, [r4, #4]
    5a5c:	7a1a      	ldrb	r2, [r3, #8]
    5a5e:	7222      	strb	r2, [r4, #8]
    5a60:	7a5a      	ldrb	r2, [r3, #9]
    5a62:	7262      	strb	r2, [r4, #9]
    5a64:	7a9b      	ldrb	r3, [r3, #10]
    5a66:	72a3      	strb	r3, [r4, #10]
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    5a68:	465b      	mov	r3, fp
    5a6a:	699b      	ldr	r3, [r3, #24]
    5a6c:	7ada      	ldrb	r2, [r3, #11]
    5a6e:	2318      	movs	r3, #24
    5a70:	4013      	ands	r3, r2
    5a72:	7323      	strb	r3, [r4, #12]
			dj->fs->wflag = 1;
    5a74:	465b      	mov	r3, fp
    5a76:	2201      	movs	r2, #1
    5a78:	681b      	ldr	r3, [r3, #0]
    5a7a:	711a      	strb	r2, [r3, #4]
    5a7c:	e4d0      	b.n	5420 <dir_register+0xc8>
    5a7e:	46c0      	nop			; (mov r8, r8)
    5a80:	00003dc1 	.word	0x00003dc1
    5a84:	00004f71 	.word	0x00004f71
    5a88:	00003d3d 	.word	0x00003d3d
    5a8c:	0000fffd 	.word	0x0000fffd
    5a90:	0001f06d 	.word	0x0001f06d
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    5a94:	2330      	movs	r3, #48	; 0x30
    5a96:	469c      	mov	ip, r3
    5a98:	44a4      	add	ip, r4
    5a9a:	4663      	mov	r3, ip
    5a9c:	9300      	str	r3, [sp, #0]
    5a9e:	4661      	mov	r1, ip
    5aa0:	7860      	ldrb	r0, [r4, #1]
    5aa2:	2301      	movs	r3, #1
    5aa4:	0032      	movs	r2, r6
    5aa6:	47c0      	blx	r8
    5aa8:	2800      	cmp	r0, #0
    5aaa:	d000      	beq.n	5aae <dir_register+0x756>
    5aac:	e751      	b.n	5952 <dir_register+0x5fa>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    5aae:	69e3      	ldr	r3, [r4, #28]
    5ab0:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
    5ab2:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    5ab4:	189a      	adds	r2, r3, r2
    5ab6:	4296      	cmp	r6, r2
    5ab8:	d300      	bcc.n	5abc <dir_register+0x764>
    5aba:	e68c      	b.n	57d6 <dir_register+0x47e>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    5abc:	78e7      	ldrb	r7, [r4, #3]
    5abe:	2f01      	cmp	r7, #1
    5ac0:	d801      	bhi.n	5ac6 <dir_register+0x76e>
    5ac2:	e688      	b.n	57d6 <dir_register+0x47e>
    5ac4:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
    5ac6:	18f6      	adds	r6, r6, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    5ac8:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    5aca:	7860      	ldrb	r0, [r4, #1]
    5acc:	2301      	movs	r3, #1
    5ace:	0032      	movs	r2, r6
    5ad0:	9900      	ldr	r1, [sp, #0]
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    5ad2:	b2ff      	uxtb	r7, r7
					disk_write(fs->drv, fs->win, wsect, 1);
    5ad4:	47c0      	blx	r8
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    5ad6:	2f01      	cmp	r7, #1
    5ad8:	d1f4      	bne.n	5ac4 <dir_register+0x76c>
    5ada:	e67c      	b.n	57d6 <dir_register+0x47e>
				res = dir_next(dj, 0);	/* Next entry */
    5adc:	4682      	mov	sl, r0
    5ade:	e49f      	b.n	5420 <dir_register+0xc8>
			fs->winsect = sector;
    5ae0:	62e7      	str	r7, [r4, #44]	; 0x2c
    5ae2:	e79b      	b.n	5a1c <dir_register+0x6c4>
    5ae4:	4b52      	ldr	r3, [pc, #328]	; (5c30 <dir_register+0x8d8>)
    5ae6:	0038      	movs	r0, r7
    5ae8:	4798      	blx	r3
    5aea:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;
    5aec:	0003      	movs	r3, r0
    5aee:	2801      	cmp	r0, #1
    5af0:	d800      	bhi.n	5af4 <dir_register+0x79c>
    5af2:	e77e      	b.n	59f2 <dir_register+0x69a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    5af4:	3301      	adds	r3, #1
    5af6:	d100      	bne.n	5afa <dir_register+0x7a2>
    5af8:	e72b      	b.n	5952 <dir_register+0x5fa>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    5afa:	6837      	ldr	r7, [r6, #0]
    5afc:	69bb      	ldr	r3, [r7, #24]
    5afe:	4298      	cmp	r0, r3
    5b00:	d369      	bcc.n	5bd6 <dir_register+0x87e>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    5b02:	4b4c      	ldr	r3, [pc, #304]	; (5c34 <dir_register+0x8dc>)
    5b04:	68f1      	ldr	r1, [r6, #12]
    5b06:	0038      	movs	r0, r7
    5b08:	4798      	blx	r3
    5b0a:	4681      	mov	r9, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    5b0c:	1e03      	subs	r3, r0, #0
    5b0e:	d100      	bne.n	5b12 <dir_register+0x7ba>
    5b10:	e560      	b.n	55d4 <dir_register+0x27c>
					if (clst == 1) return FR_INT_ERR;
    5b12:	2801      	cmp	r0, #1
    5b14:	d100      	bne.n	5b18 <dir_register+0x7c0>
    5b16:	e76c      	b.n	59f2 <dir_register+0x69a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    5b18:	3301      	adds	r3, #1
    5b1a:	d100      	bne.n	5b1e <dir_register+0x7c6>
    5b1c:	e719      	b.n	5952 <dir_register+0x5fa>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    5b1e:	2100      	movs	r1, #0
    5b20:	6830      	ldr	r0, [r6, #0]
    5b22:	4b45      	ldr	r3, [pc, #276]	; (5c38 <dir_register+0x8e0>)
    5b24:	4798      	blx	r3
    5b26:	2800      	cmp	r0, #0
    5b28:	d000      	beq.n	5b2c <dir_register+0x7d4>
    5b2a:	e712      	b.n	5952 <dir_register+0x5fa>
    5b2c:	2280      	movs	r2, #128	; 0x80
		*d++ = (BYTE)val;
    5b2e:	6830      	ldr	r0, [r6, #0]
    5b30:	0092      	lsls	r2, r2, #2
    5b32:	2100      	movs	r1, #0
    5b34:	4b41      	ldr	r3, [pc, #260]	; (5c3c <dir_register+0x8e4>)
    5b36:	3030      	adds	r0, #48	; 0x30
    5b38:	4798      	blx	r3
	clst -= 2;
    5b3a:	2302      	movs	r3, #2
    5b3c:	425b      	negs	r3, r3
    5b3e:	444b      	add	r3, r9
    5b40:	469b      	mov	fp, r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    5b42:	6832      	ldr	r2, [r6, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    5b44:	6993      	ldr	r3, [r2, #24]
    5b46:	1e99      	subs	r1, r3, #2
    5b48:	2300      	movs	r3, #0
    5b4a:	458b      	cmp	fp, r1
    5b4c:	d205      	bcs.n	5b5a <dir_register+0x802>
	return clst * fs->csize + fs->database;
    5b4e:	4659      	mov	r1, fp
    5b50:	7893      	ldrb	r3, [r2, #2]
    5b52:	434b      	muls	r3, r1
    5b54:	6a91      	ldr	r1, [r2, #40]	; 0x28
    5b56:	468c      	mov	ip, r1
    5b58:	4463      	add	r3, ip
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    5b5a:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    5b5c:	6833      	ldr	r3, [r6, #0]
    5b5e:	2700      	movs	r7, #0
    5b60:	789a      	ldrb	r2, [r3, #2]
    5b62:	2a00      	cmp	r2, #0
    5b64:	d10a      	bne.n	5b7c <dir_register+0x824>
    5b66:	e05d      	b.n	5c24 <dir_register+0x8cc>
						dj->fs->winsect++;
    5b68:	6832      	ldr	r2, [r6, #0]
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    5b6a:	3701      	adds	r7, #1
						dj->fs->winsect++;
    5b6c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    5b6e:	b2ff      	uxtb	r7, r7
						dj->fs->winsect++;
    5b70:	3301      	adds	r3, #1
    5b72:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    5b74:	6833      	ldr	r3, [r6, #0]
    5b76:	789a      	ldrb	r2, [r3, #2]
    5b78:	42ba      	cmp	r2, r7
    5b7a:	d953      	bls.n	5c24 <dir_register+0x8cc>
						dj->fs->wflag = 1;
    5b7c:	2201      	movs	r2, #1
    5b7e:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    5b80:	2100      	movs	r1, #0
    5b82:	6830      	ldr	r0, [r6, #0]
    5b84:	4b2c      	ldr	r3, [pc, #176]	; (5c38 <dir_register+0x8e0>)
    5b86:	4798      	blx	r3
    5b88:	2800      	cmp	r0, #0
    5b8a:	d0ed      	beq.n	5b68 <dir_register+0x810>
    5b8c:	e6e1      	b.n	5952 <dir_register+0x5fa>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    5b8e:	2330      	movs	r3, #48	; 0x30
    5b90:	4698      	mov	r8, r3
    5b92:	4e2b      	ldr	r6, [pc, #172]	; (5c40 <dir_register+0x8e8>)
    5b94:	44a0      	add	r8, r4
    5b96:	7860      	ldrb	r0, [r4, #1]
    5b98:	3b2f      	subs	r3, #47	; 0x2f
    5b9a:	002a      	movs	r2, r5
    5b9c:	4641      	mov	r1, r8
    5b9e:	46b1      	mov	r9, r6
    5ba0:	47b0      	blx	r6
    5ba2:	2800      	cmp	r0, #0
    5ba4:	d000      	beq.n	5ba8 <dir_register+0x850>
    5ba6:	e6d4      	b.n	5952 <dir_register+0x5fa>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    5ba8:	69e3      	ldr	r3, [r4, #28]
    5baa:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
    5bac:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    5bae:	189a      	adds	r2, r3, r2
    5bb0:	4295      	cmp	r5, r2
    5bb2:	d300      	bcc.n	5bb6 <dir_register+0x85e>
    5bb4:	e730      	b.n	5a18 <dir_register+0x6c0>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    5bb6:	78e6      	ldrb	r6, [r4, #3]
    5bb8:	2e01      	cmp	r6, #1
    5bba:	d801      	bhi.n	5bc0 <dir_register+0x868>
    5bbc:	e72c      	b.n	5a18 <dir_register+0x6c0>
    5bbe:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
    5bc0:	18ed      	adds	r5, r5, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    5bc2:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    5bc4:	7860      	ldrb	r0, [r4, #1]
    5bc6:	2301      	movs	r3, #1
    5bc8:	002a      	movs	r2, r5
    5bca:	4641      	mov	r1, r8
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    5bcc:	b2f6      	uxtb	r6, r6
					disk_write(fs->drv, fs->win, wsect, 1);
    5bce:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    5bd0:	2e01      	cmp	r6, #1
    5bd2:	d1f4      	bne.n	5bbe <dir_register+0x866>
    5bd4:	e720      	b.n	5a18 <dir_register+0x6c0>
    5bd6:	2302      	movs	r3, #2
    5bd8:	425b      	negs	r3, r3
    5bda:	444b      	add	r3, r9
    5bdc:	469b      	mov	fp, r3
				dj->clust = clst;				/* Initialize data for new cluster */
    5bde:	464b      	mov	r3, r9
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    5be0:	2200      	movs	r2, #0
				dj->clust = clst;				/* Initialize data for new cluster */
    5be2:	60f3      	str	r3, [r6, #12]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    5be4:	69bb      	ldr	r3, [r7, #24]
    5be6:	4691      	mov	r9, r2
    5be8:	3b02      	subs	r3, #2
    5bea:	455b      	cmp	r3, fp
    5bec:	d906      	bls.n	5bfc <dir_register+0x8a4>
	return clst * fs->csize + fs->database;
    5bee:	465a      	mov	r2, fp
    5bf0:	78bb      	ldrb	r3, [r7, #2]
    5bf2:	435a      	muls	r2, r3
    5bf4:	0013      	movs	r3, r2
    5bf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    5bf8:	4691      	mov	r9, r2
    5bfa:	4499      	add	r9, r3
				dj->sect = clust2sect(dj->fs, clst);
    5bfc:	464b      	mov	r3, r9
    5bfe:	6133      	str	r3, [r6, #16]
    5c00:	e694      	b.n	592c <dir_register+0x5d4>
		*d++ = *s++;
    5c02:	781a      	ldrb	r2, [r3, #0]
    5c04:	7022      	strb	r2, [r4, #0]
    5c06:	785a      	ldrb	r2, [r3, #1]
    5c08:	7062      	strb	r2, [r4, #1]
    5c0a:	789a      	ldrb	r2, [r3, #2]
    5c0c:	70a2      	strb	r2, [r4, #2]
    5c0e:	78da      	ldrb	r2, [r3, #3]
    5c10:	70e2      	strb	r2, [r4, #3]
    5c12:	791a      	ldrb	r2, [r3, #4]
    5c14:	7122      	strb	r2, [r4, #4]
    5c16:	795a      	ldrb	r2, [r3, #5]
    5c18:	7162      	strb	r2, [r4, #5]
    5c1a:	799a      	ldrb	r2, [r3, #6]
    5c1c:	71a2      	strb	r2, [r4, #6]
    5c1e:	79da      	ldrb	r2, [r3, #7]
    5c20:	71e2      	strb	r2, [r4, #7]
    5c22:	e71b      	b.n	5a5c <dir_register+0x704>
					dj->fs->winsect -= c;						/* Rewind window address */
    5c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5c26:	1bd7      	subs	r7, r2, r7
    5c28:	62df      	str	r7, [r3, #44]	; 0x2c
    5c2a:	6837      	ldr	r7, [r6, #0]
    5c2c:	e7d7      	b.n	5bde <dir_register+0x886>
    5c2e:	46c0      	nop			; (mov r8, r8)
    5c30:	00004789 	.word	0x00004789
    5c34:	00004b51 	.word	0x00004b51
    5c38:	00003f01 	.word	0x00003f01
    5c3c:	0001f06d 	.word	0x0001f06d
    5c40:	00003dc1 	.word	0x00003dc1

00005c44 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
    5c44:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c46:	46de      	mov	lr, fp
    5c48:	4645      	mov	r5, r8
    5c4a:	4657      	mov	r7, sl
    5c4c:	464e      	mov	r6, r9
    5c4e:	b5e0      	push	{r5, r6, r7, lr}
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    5c50:	780b      	ldrb	r3, [r1, #0]
{
    5c52:	b083      	sub	sp, #12
    5c54:	4683      	mov	fp, r0
    5c56:	000d      	movs	r5, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    5c58:	2b2f      	cmp	r3, #47	; 0x2f
    5c5a:	d100      	bne.n	5c5e <follow_path+0x1a>
    5c5c:	e13f      	b.n	5ede <follow_path+0x29a>
    5c5e:	2b5c      	cmp	r3, #92	; 0x5c
    5c60:	d100      	bne.n	5c64 <follow_path+0x20>
    5c62:	e13c      	b.n	5ede <follow_path+0x29a>
		path++;
	dj->sclust = 0;						/* Start from the root dir */
    5c64:	465b      	mov	r3, fp
    5c66:	2400      	movs	r4, #0
    5c68:	609c      	str	r4, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    5c6a:	782b      	ldrb	r3, [r5, #0]
    5c6c:	2b1f      	cmp	r3, #31
    5c6e:	d800      	bhi.n	5c72 <follow_path+0x2e>
    5c70:	e13d      	b.n	5eee <follow_path+0x2aa>
    5c72:	4bb2      	ldr	r3, [pc, #712]	; (5f3c <follow_path+0x2f8>)
    5c74:	4698      	mov	r8, r3
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    5c76:	7828      	ldrb	r0, [r5, #0]
    5c78:	282f      	cmp	r0, #47	; 0x2f
    5c7a:	d001      	beq.n	5c80 <follow_path+0x3c>
    5c7c:	285c      	cmp	r0, #92	; 0x5c
    5c7e:	d101      	bne.n	5c84 <follow_path+0x40>
    5c80:	3501      	adds	r5, #1
    5c82:	e7f8      	b.n	5c76 <follow_path+0x32>
	lfn = dj->lfn;
    5c84:	465b      	mov	r3, fp
    5c86:	69db      	ldr	r3, [r3, #28]
		w = p[si++];					/* Get a character */
    5c88:	b280      	uxth	r0, r0
	lfn = dj->lfn;
    5c8a:	9300      	str	r3, [sp, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    5c8c:	281f      	cmp	r0, #31
    5c8e:	d92d      	bls.n	5cec <follow_path+0xa8>
    5c90:	282f      	cmp	r0, #47	; 0x2f
    5c92:	d02b      	beq.n	5cec <follow_path+0xa8>
    5c94:	285c      	cmp	r0, #92	; 0x5c
    5c96:	d029      	beq.n	5cec <follow_path+0xa8>
    5c98:	001e      	movs	r6, r3
    5c9a:	4699      	mov	r9, r3
		if (di >= _MAX_LFN)				/* Reject too long name */
    5c9c:	2380      	movs	r3, #128	; 0x80
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    5c9e:	2101      	movs	r1, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    5ca0:	005b      	lsls	r3, r3, #1
    5ca2:	1c6f      	adds	r7, r5, #1
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    5ca4:	2401      	movs	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    5ca6:	469a      	mov	sl, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    5ca8:	47c0      	blx	r8
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
    5caa:	2800      	cmp	r0, #0
    5cac:	d01e      	beq.n	5cec <follow_path+0xa8>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    5cae:	287f      	cmp	r0, #127	; 0x7f
    5cb0:	d809      	bhi.n	5cc6 <follow_path+0x82>
	while (*str && *str != chr) str++;
    5cb2:	2822      	cmp	r0, #34	; 0x22
    5cb4:	d01a      	beq.n	5cec <follow_path+0xa8>
    5cb6:	232a      	movs	r3, #42	; 0x2a
    5cb8:	4aa1      	ldr	r2, [pc, #644]	; (5f40 <follow_path+0x2fc>)
    5cba:	4298      	cmp	r0, r3
    5cbc:	d016      	beq.n	5cec <follow_path+0xa8>
    5cbe:	3201      	adds	r2, #1
    5cc0:	7813      	ldrb	r3, [r2, #0]
    5cc2:	2b00      	cmp	r3, #0
    5cc4:	d1f9      	bne.n	5cba <follow_path+0x76>
		lfn[di++] = w;					/* Store the Unicode char */
    5cc6:	8030      	strh	r0, [r6, #0]
		w = p[si++];					/* Get a character */
    5cc8:	7838      	ldrb	r0, [r7, #0]
    5cca:	1c63      	adds	r3, r4, #1
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    5ccc:	281f      	cmp	r0, #31
    5cce:	d800      	bhi.n	5cd2 <follow_path+0x8e>
    5cd0:	e0dc      	b.n	5e8c <follow_path+0x248>
    5cd2:	282f      	cmp	r0, #47	; 0x2f
    5cd4:	d012      	beq.n	5cfc <follow_path+0xb8>
    5cd6:	285c      	cmp	r0, #92	; 0x5c
    5cd8:	d010      	beq.n	5cfc <follow_path+0xb8>
    5cda:	3602      	adds	r6, #2
    5cdc:	3701      	adds	r7, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    5cde:	4553      	cmp	r3, sl
    5ce0:	d004      	beq.n	5cec <follow_path+0xa8>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    5ce2:	2101      	movs	r1, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    5ce4:	001c      	movs	r4, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    5ce6:	47c0      	blx	r8
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
    5ce8:	2800      	cmp	r0, #0
    5cea:	d1e0      	bne.n	5cae <follow_path+0x6a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
    5cec:	2006      	movs	r0, #6
			dj->sclust = LD_CLUST(dir);
		}
	}

	return res;
}
    5cee:	b003      	add	sp, #12
    5cf0:	bc3c      	pop	{r2, r3, r4, r5}
    5cf2:	4690      	mov	r8, r2
    5cf4:	4699      	mov	r9, r3
    5cf6:	46a2      	mov	sl, r4
    5cf8:	46ab      	mov	fp, r5
    5cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    5cfc:	2700      	movs	r7, #0
	*path = &p[si];						/* Return pointer to the next segment */
    5cfe:	18ed      	adds	r5, r5, r3
    5d00:	9a00      	ldr	r2, [sp, #0]
    5d02:	4b90      	ldr	r3, [pc, #576]	; (5f44 <follow_path+0x300>)
    5d04:	4694      	mov	ip, r2
    5d06:	18e3      	adds	r3, r4, r3
    5d08:	005b      	lsls	r3, r3, #1
    5d0a:	4463      	add	r3, ip
		w = lfn[di-1];
    5d0c:	881a      	ldrh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
    5d0e:	2a20      	cmp	r2, #32
    5d10:	d001      	beq.n	5d16 <follow_path+0xd2>
    5d12:	2a2e      	cmp	r2, #46	; 0x2e
    5d14:	d104      	bne.n	5d20 <follow_path+0xdc>
		di--;
    5d16:	3c01      	subs	r4, #1
    5d18:	3b02      	subs	r3, #2
	while (di) {						/* Strip trailing spaces and dots */
    5d1a:	2c00      	cmp	r4, #0
    5d1c:	d1f6      	bne.n	5d0c <follow_path+0xc8>
    5d1e:	e7e5      	b.n	5cec <follow_path+0xa8>
	lfn[di] = 0;						/* LFN is created */
    5d20:	2200      	movs	r2, #0
    5d22:	9900      	ldr	r1, [sp, #0]
    5d24:	0063      	lsls	r3, r4, #1
    5d26:	52ca      	strh	r2, [r1, r3]
	mem_set(dj->fn, ' ', 11);
    5d28:	465a      	mov	r2, fp
		*d++ = (BYTE)val;
    5d2a:	2120      	movs	r1, #32
	mem_set(dj->fn, ' ', 11);
    5d2c:	6992      	ldr	r2, [r2, #24]
		*d++ = (BYTE)val;
    5d2e:	2600      	movs	r6, #0
    5d30:	7011      	strb	r1, [r2, #0]
    5d32:	7051      	strb	r1, [r2, #1]
    5d34:	7091      	strb	r1, [r2, #2]
    5d36:	70d1      	strb	r1, [r2, #3]
    5d38:	7111      	strb	r1, [r2, #4]
    5d3a:	7151      	strb	r1, [r2, #5]
    5d3c:	7191      	strb	r1, [r2, #6]
    5d3e:	71d1      	strb	r1, [r2, #7]
    5d40:	7211      	strb	r1, [r2, #8]
    5d42:	7251      	strb	r1, [r2, #9]
    5d44:	7291      	strb	r1, [r2, #10]
    5d46:	464a      	mov	r2, r9
    5d48:	e001      	b.n	5d4e <follow_path+0x10a>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
    5d4a:	3601      	adds	r6, #1
    5d4c:	3202      	adds	r2, #2
    5d4e:	8810      	ldrh	r0, [r2, #0]
    5d50:	2820      	cmp	r0, #32
    5d52:	d0fa      	beq.n	5d4a <follow_path+0x106>
    5d54:	282e      	cmp	r0, #46	; 0x2e
    5d56:	d0f8      	beq.n	5d4a <follow_path+0x106>
	if (si) cf |= NS_LOSS | NS_LFN;
    5d58:	2e00      	cmp	r6, #0
    5d5a:	d001      	beq.n	5d60 <follow_path+0x11c>
    5d5c:	2203      	movs	r2, #3
    5d5e:	4317      	orrs	r7, r2
    5d60:	9a00      	ldr	r2, [sp, #0]
    5d62:	3b02      	subs	r3, #2
    5d64:	4694      	mov	ip, r2
    5d66:	4463      	add	r3, ip
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
    5d68:	881a      	ldrh	r2, [r3, #0]
    5d6a:	2a2e      	cmp	r2, #46	; 0x2e
    5d6c:	d003      	beq.n	5d76 <follow_path+0x132>
    5d6e:	3c01      	subs	r4, #1
    5d70:	3b02      	subs	r3, #2
    5d72:	2c00      	cmp	r4, #0
    5d74:	d1f8      	bne.n	5d68 <follow_path+0x124>
		dj->fn[i++] = (BYTE)w;
    5d76:	2308      	movs	r3, #8
    5d78:	469a      	mov	sl, r3
    5d7a:	2300      	movs	r3, #0
    5d7c:	4699      	mov	r9, r3
    5d7e:	9301      	str	r3, [sp, #4]
    5d80:	002b      	movs	r3, r5
    5d82:	0025      	movs	r5, r4
    5d84:	464c      	mov	r4, r9
    5d86:	4699      	mov	r9, r3
		w = lfn[si++];					/* Get an LFN char */
    5d88:	3601      	adds	r6, #1
		if (!w) break;					/* Break on end of the LFN */
    5d8a:	2800      	cmp	r0, #0
    5d8c:	d035      	beq.n	5dfa <follow_path+0x1b6>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    5d8e:	2820      	cmp	r0, #32
    5d90:	d022      	beq.n	5dd8 <follow_path+0x194>
    5d92:	282e      	cmp	r0, #46	; 0x2e
    5d94:	d01e      	beq.n	5dd4 <follow_path+0x190>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
    5d96:	4554      	cmp	r4, sl
    5d98:	d224      	bcs.n	5de4 <follow_path+0x1a0>
    5d9a:	42ae      	cmp	r6, r5
    5d9c:	d079      	beq.n	5e92 <follow_path+0x24e>
		if (w >= 0x80) {				/* Non ASCII char */
    5d9e:	287f      	cmp	r0, #127	; 0x7f
    5da0:	d900      	bls.n	5da4 <follow_path+0x160>
    5da2:	e08a      	b.n	5eba <follow_path+0x276>
	while (*str && *str != chr) str++;
    5da4:	282b      	cmp	r0, #43	; 0x2b
    5da6:	d009      	beq.n	5dbc <follow_path+0x178>
    5da8:	232c      	movs	r3, #44	; 0x2c
    5daa:	4a67      	ldr	r2, [pc, #412]	; (5f48 <follow_path+0x304>)
    5dac:	e004      	b.n	5db8 <follow_path+0x174>
    5dae:	3201      	adds	r2, #1
    5db0:	7813      	ldrb	r3, [r2, #0]
    5db2:	2b00      	cmp	r3, #0
    5db4:	d100      	bne.n	5db8 <follow_path+0x174>
    5db6:	e0a6      	b.n	5f06 <follow_path+0x2c2>
    5db8:	4283      	cmp	r3, r0
    5dba:	d1f8      	bne.n	5dae <follow_path+0x16a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
    5dbc:	2303      	movs	r3, #3
    5dbe:	205f      	movs	r0, #95	; 0x5f
    5dc0:	431f      	orrs	r7, r3
    5dc2:	b2ff      	uxtb	r7, r7
		dj->fn[i++] = (BYTE)w;
    5dc4:	465b      	mov	r3, fp
    5dc6:	699b      	ldr	r3, [r3, #24]
    5dc8:	5518      	strb	r0, [r3, r4]
    5dca:	3401      	adds	r4, #1
    5dcc:	9a00      	ldr	r2, [sp, #0]
    5dce:	0073      	lsls	r3, r6, #1
    5dd0:	5a98      	ldrh	r0, [r3, r2]
    5dd2:	e7d9      	b.n	5d88 <follow_path+0x144>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    5dd4:	42ae      	cmp	r6, r5
    5dd6:	d003      	beq.n	5de0 <follow_path+0x19c>
			cf |= NS_LOSS | NS_LFN; continue;
    5dd8:	2303      	movs	r3, #3
    5dda:	431f      	orrs	r7, r3
    5ddc:	b2ff      	uxtb	r7, r7
    5dde:	e7f5      	b.n	5dcc <follow_path+0x188>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
    5de0:	4554      	cmp	r4, sl
    5de2:	d356      	bcc.n	5e92 <follow_path+0x24e>
			if (ni == 11) {				/* Long extension */
    5de4:	4653      	mov	r3, sl
    5de6:	2b0b      	cmp	r3, #11
    5de8:	d100      	bne.n	5dec <follow_path+0x1a8>
    5dea:	e0b5      	b.n	5f58 <follow_path+0x314>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
    5dec:	42ae      	cmp	r6, r5
    5dee:	d053      	beq.n	5e98 <follow_path+0x254>
    5df0:	2303      	movs	r3, #3
    5df2:	431f      	orrs	r7, r3
    5df4:	b2ff      	uxtb	r7, r7
			if (si > di) break;			/* No extension */
    5df6:	42ae      	cmp	r6, r5
    5df8:	d94e      	bls.n	5e98 <follow_path+0x254>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    5dfa:	465b      	mov	r3, fp
    5dfc:	699b      	ldr	r3, [r3, #24]
    5dfe:	464d      	mov	r5, r9
    5e00:	781a      	ldrb	r2, [r3, #0]
    5e02:	2ae5      	cmp	r2, #229	; 0xe5
    5e04:	d07a      	beq.n	5efc <follow_path+0x2b8>
	if (ni == 8) b <<= 2;
    5e06:	4652      	mov	r2, sl
    5e08:	2a08      	cmp	r2, #8
    5e0a:	d051      	beq.n	5eb0 <follow_path+0x26c>
    5e0c:	220c      	movs	r2, #12
    5e0e:	9901      	ldr	r1, [sp, #4]
    5e10:	400a      	ands	r2, r1
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
    5e12:	2a0c      	cmp	r2, #12
    5e14:	d049      	beq.n	5eaa <follow_path+0x266>
    5e16:	43c9      	mvns	r1, r1
    5e18:	0789      	lsls	r1, r1, #30
    5e1a:	d046      	beq.n	5eaa <follow_path+0x266>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
    5e1c:	07b9      	lsls	r1, r7, #30
    5e1e:	d406      	bmi.n	5e2e <follow_path+0x1ea>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    5e20:	2103      	movs	r1, #3
    5e22:	9801      	ldr	r0, [sp, #4]
    5e24:	4001      	ands	r1, r0
    5e26:	2901      	cmp	r1, #1
    5e28:	d07a      	beq.n	5f20 <follow_path+0x2dc>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    5e2a:	2a04      	cmp	r2, #4
    5e2c:	d075      	beq.n	5f1a <follow_path+0x2d6>
	dj->fn[NS] = cf;	/* SFN is created */
    5e2e:	72df      	strb	r7, [r3, #11]
	res = dir_sdi(dj, 0);			/* Rewind directory object */
    5e30:	2100      	movs	r1, #0
    5e32:	4658      	mov	r0, fp
    5e34:	4b45      	ldr	r3, [pc, #276]	; (5f4c <follow_path+0x308>)
    5e36:	4798      	blx	r3
	if (res != FR_OK) return res;
    5e38:	2800      	cmp	r0, #0
    5e3a:	d11c      	bne.n	5e76 <follow_path+0x232>
    5e3c:	4b44      	ldr	r3, [pc, #272]	; (5f50 <follow_path+0x30c>)
    5e3e:	4658      	mov	r0, fp
    5e40:	4798      	blx	r3
			ns = *(dj->fn+NS);
    5e42:	465b      	mov	r3, fp
    5e44:	699b      	ldr	r3, [r3, #24]
    5e46:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
    5e48:	2800      	cmp	r0, #0
    5e4a:	d117      	bne.n	5e7c <follow_path+0x238>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    5e4c:	075b      	lsls	r3, r3, #29
    5e4e:	d500      	bpl.n	5e52 <follow_path+0x20e>
    5e50:	e74d      	b.n	5cee <follow_path+0xaa>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    5e52:	465b      	mov	r3, fp
    5e54:	695a      	ldr	r2, [r3, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    5e56:	7ad3      	ldrb	r3, [r2, #11]
    5e58:	06db      	lsls	r3, r3, #27
    5e5a:	d515      	bpl.n	5e88 <follow_path+0x244>
			dj->sclust = LD_CLUST(dir);
    5e5c:	7d51      	ldrb	r1, [r2, #21]
    5e5e:	7d13      	ldrb	r3, [r2, #20]
    5e60:	0209      	lsls	r1, r1, #8
    5e62:	430b      	orrs	r3, r1
    5e64:	7ed1      	ldrb	r1, [r2, #27]
    5e66:	7e92      	ldrb	r2, [r2, #26]
    5e68:	0209      	lsls	r1, r1, #8
    5e6a:	430a      	orrs	r2, r1
    5e6c:	041b      	lsls	r3, r3, #16
    5e6e:	4313      	orrs	r3, r2
    5e70:	465a      	mov	r2, fp
    5e72:	6093      	str	r3, [r2, #8]
			res = create_name(dj, &path);	/* Get a segment */
    5e74:	e6ff      	b.n	5c76 <follow_path+0x32>
			ns = *(dj->fn+NS);
    5e76:	465b      	mov	r3, fp
    5e78:	699b      	ldr	r3, [r3, #24]
    5e7a:	7adb      	ldrb	r3, [r3, #11]
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    5e7c:	2804      	cmp	r0, #4
    5e7e:	d000      	beq.n	5e82 <follow_path+0x23e>
    5e80:	e735      	b.n	5cee <follow_path+0xaa>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    5e82:	4218      	tst	r0, r3
    5e84:	d000      	beq.n	5e88 <follow_path+0x244>
    5e86:	e732      	b.n	5cee <follow_path+0xaa>
				res = FR_NO_PATH; break;
    5e88:	2005      	movs	r0, #5
	return res;
    5e8a:	e730      	b.n	5cee <follow_path+0xaa>
	*path = &p[si];						/* Return pointer to the next segment */
    5e8c:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    5e8e:	2704      	movs	r7, #4
    5e90:	e736      	b.n	5d00 <follow_path+0xbc>
			if (ni == 11) {				/* Long extension */
    5e92:	4653      	mov	r3, sl
    5e94:	2b0b      	cmp	r3, #11
    5e96:	d05f      	beq.n	5f58 <follow_path+0x314>
			b <<= 2; continue;
    5e98:	9b01      	ldr	r3, [sp, #4]
    5e9a:	002e      	movs	r6, r5
    5e9c:	009b      	lsls	r3, r3, #2
    5e9e:	b2db      	uxtb	r3, r3
    5ea0:	9301      	str	r3, [sp, #4]
			si = di; i = 8; ni = 11;	/* Enter extension section */
    5ea2:	230b      	movs	r3, #11
    5ea4:	2408      	movs	r4, #8
    5ea6:	469a      	mov	sl, r3
    5ea8:	e790      	b.n	5dcc <follow_path+0x188>
		cf |= NS_LFN;
    5eaa:	2102      	movs	r1, #2
    5eac:	430f      	orrs	r7, r1
    5eae:	e7b5      	b.n	5e1c <follow_path+0x1d8>
	if (ni == 8) b <<= 2;
    5eb0:	9a01      	ldr	r2, [sp, #4]
    5eb2:	0092      	lsls	r2, r2, #2
    5eb4:	b2d2      	uxtb	r2, r2
    5eb6:	9201      	str	r2, [sp, #4]
    5eb8:	e7a8      	b.n	5e0c <follow_path+0x1c8>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
    5eba:	2100      	movs	r1, #0
    5ebc:	47c0      	blx	r8
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
    5ebe:	2800      	cmp	r0, #0
    5ec0:	d00a      	beq.n	5ed8 <follow_path+0x294>
    5ec2:	4b24      	ldr	r3, [pc, #144]	; (5f54 <follow_path+0x310>)
    5ec4:	469c      	mov	ip, r3
			cf |= NS_LFN;				/* Force create LFN entry */
    5ec6:	2302      	movs	r3, #2
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
    5ec8:	4460      	add	r0, ip
    5eca:	3880      	subs	r0, #128	; 0x80
    5ecc:	7800      	ldrb	r0, [r0, #0]
			cf |= NS_LFN;				/* Force create LFN entry */
    5ece:	431f      	orrs	r7, r3
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
    5ed0:	2800      	cmp	r0, #0
    5ed2:	d100      	bne.n	5ed6 <follow_path+0x292>
    5ed4:	e772      	b.n	5dbc <follow_path+0x178>
    5ed6:	e765      	b.n	5da4 <follow_path+0x160>
			cf |= NS_LFN;				/* Force create LFN entry */
    5ed8:	2302      	movs	r3, #2
    5eda:	431f      	orrs	r7, r3
    5edc:	e76e      	b.n	5dbc <follow_path+0x178>
	dj->sclust = 0;						/* Start from the root dir */
    5ede:	465b      	mov	r3, fp
    5ee0:	2400      	movs	r4, #0
		path++;
    5ee2:	3501      	adds	r5, #1
	dj->sclust = 0;						/* Start from the root dir */
    5ee4:	609c      	str	r4, [r3, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    5ee6:	782b      	ldrb	r3, [r5, #0]
    5ee8:	2b1f      	cmp	r3, #31
    5eea:	d900      	bls.n	5eee <follow_path+0x2aa>
    5eec:	e6c1      	b.n	5c72 <follow_path+0x2e>
		res = dir_sdi(dj, 0);
    5eee:	4b17      	ldr	r3, [pc, #92]	; (5f4c <follow_path+0x308>)
    5ef0:	2100      	movs	r1, #0
    5ef2:	4658      	mov	r0, fp
    5ef4:	4798      	blx	r3
		dj->dir = 0;
    5ef6:	465b      	mov	r3, fp
    5ef8:	615c      	str	r4, [r3, #20]
    5efa:	e6f8      	b.n	5cee <follow_path+0xaa>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    5efc:	3ae0      	subs	r2, #224	; 0xe0
    5efe:	701a      	strb	r2, [r3, #0]
    5f00:	465b      	mov	r3, fp
    5f02:	699b      	ldr	r3, [r3, #24]
    5f04:	e77f      	b.n	5e06 <follow_path+0x1c2>
				if (IsUpper(w)) {		/* ASCII large capital */
    5f06:	0003      	movs	r3, r0
    5f08:	3b41      	subs	r3, #65	; 0x41
    5f0a:	2b19      	cmp	r3, #25
    5f0c:	d80b      	bhi.n	5f26 <follow_path+0x2e2>
					b |= 2;
    5f0e:	2302      	movs	r3, #2
    5f10:	9a01      	ldr	r2, [sp, #4]
    5f12:	b2c0      	uxtb	r0, r0
    5f14:	431a      	orrs	r2, r3
    5f16:	9201      	str	r2, [sp, #4]
    5f18:	e754      	b.n	5dc4 <follow_path+0x180>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    5f1a:	3204      	adds	r2, #4
    5f1c:	4317      	orrs	r7, r2
    5f1e:	e786      	b.n	5e2e <follow_path+0x1ea>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    5f20:	310f      	adds	r1, #15
    5f22:	430f      	orrs	r7, r1
    5f24:	e781      	b.n	5e2a <follow_path+0x1e6>
					if (IsLower(w)) {	/* ASCII small capital */
    5f26:	0003      	movs	r3, r0
    5f28:	3b61      	subs	r3, #97	; 0x61
    5f2a:	2b19      	cmp	r3, #25
    5f2c:	d804      	bhi.n	5f38 <follow_path+0x2f4>
						b |= 1; w -= 0x20;
    5f2e:	2301      	movs	r3, #1
    5f30:	9a01      	ldr	r2, [sp, #4]
    5f32:	3820      	subs	r0, #32
    5f34:	431a      	orrs	r2, r3
    5f36:	9201      	str	r2, [sp, #4]
    5f38:	b2c0      	uxtb	r0, r0
    5f3a:	e743      	b.n	5dc4 <follow_path+0x180>
    5f3c:	00006c5d 	.word	0x00006c5d
    5f40:	000233a1 	.word	0x000233a1
    5f44:	7fffffff 	.word	0x7fffffff
    5f48:	000233ad 	.word	0x000233ad
    5f4c:	00004aa1 	.word	0x00004aa1
    5f50:	00005005 	.word	0x00005005
    5f54:	00023320 	.word	0x00023320
				cf |= NS_LOSS | NS_LFN; break;
    5f58:	2303      	movs	r3, #3
    5f5a:	431f      	orrs	r7, r3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    5f5c:	465b      	mov	r3, fp
    5f5e:	699b      	ldr	r3, [r3, #24]
    5f60:	464d      	mov	r5, r9
    5f62:	781a      	ldrb	r2, [r3, #0]
    5f64:	2ae5      	cmp	r2, #229	; 0xe5
    5f66:	d000      	beq.n	5f6a <follow_path+0x326>
    5f68:	e750      	b.n	5e0c <follow_path+0x1c8>
    5f6a:	3ae0      	subs	r2, #224	; 0xe0
    5f6c:	701a      	strb	r2, [r3, #0]
    5f6e:	465b      	mov	r3, fp
    5f70:	699b      	ldr	r3, [r3, #24]
    5f72:	e74b      	b.n	5e0c <follow_path+0x1c8>

00005f74 <f_mount>:
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
    5f74:	230b      	movs	r3, #11
	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    5f76:	2800      	cmp	r0, #0
    5f78:	d001      	beq.n	5f7e <f_mount+0xa>
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
    5f7a:	0018      	movs	r0, r3
    5f7c:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
    5f7e:	4b06      	ldr	r3, [pc, #24]	; (5f98 <f_mount+0x24>)
    5f80:	681a      	ldr	r2, [r3, #0]
	if (rfs) {
    5f82:	2a00      	cmp	r2, #0
    5f84:	d000      	beq.n	5f88 <f_mount+0x14>
		rfs->fs_type = 0;		/* Clear old fs object */
    5f86:	7010      	strb	r0, [r2, #0]
	if (fs) {
    5f88:	2900      	cmp	r1, #0
    5f8a:	d001      	beq.n	5f90 <f_mount+0x1c>
		fs->fs_type = 0;		/* Clear new fs object */
    5f8c:	2200      	movs	r2, #0
    5f8e:	700a      	strb	r2, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
    5f90:	6019      	str	r1, [r3, #0]
	return FR_OK;
    5f92:	2300      	movs	r3, #0
    5f94:	e7f1      	b.n	5f7a <f_mount+0x6>
    5f96:	46c0      	nop			; (mov r8, r8)
    5f98:	20000e48 	.word	0x20000e48

00005f9c <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    5f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5f9e:	4657      	mov	r7, sl
    5fa0:	464e      	mov	r6, r9
    5fa2:	4645      	mov	r5, r8
    5fa4:	46de      	mov	lr, fp
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    5fa6:	2300      	movs	r3, #0
{
    5fa8:	b5e0      	push	{r5, r6, r7, lr}

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    5faa:	261f      	movs	r6, #31
	fp->fs = 0;			/* Clear file object */
    5fac:	6003      	str	r3, [r0, #0]
{
    5fae:	4cbc      	ldr	r4, [pc, #752]	; (62a0 <f_open+0x304>)
	vol = p[0] - '0';					/* Is there a drive number? */
    5fb0:	780b      	ldrb	r3, [r1, #0]
{
    5fb2:	44a5      	add	sp, r4
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    5fb4:	4016      	ands	r6, r2
	vol = p[0] - '0';					/* Is there a drive number? */
    5fb6:	3b30      	subs	r3, #48	; 0x30
{
    5fb8:	0005      	movs	r5, r0
    5fba:	000c      	movs	r4, r1
    5fbc:	0017      	movs	r7, r2
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    5fbe:	9601      	str	r6, [sp, #4]
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    5fc0:	2b09      	cmp	r3, #9
    5fc2:	d800      	bhi.n	5fc6 <f_open+0x2a>
    5fc4:	e072      	b.n	60ac <f_open+0x110>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    5fc6:	4bb7      	ldr	r3, [pc, #732]	; (62a4 <f_open+0x308>)
    5fc8:	681b      	ldr	r3, [r3, #0]
    5fca:	4699      	mov	r9, r3
    5fcc:	9309      	str	r3, [sp, #36]	; 0x24
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    5fce:	2b00      	cmp	r3, #0
    5fd0:	d100      	bne.n	5fd4 <f_open+0x38>
    5fd2:	e0a2      	b.n	611a <f_open+0x17e>
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    5fd4:	231e      	movs	r3, #30
    5fd6:	403b      	ands	r3, r7
    5fd8:	469a      	mov	sl, r3
	if (fs->fs_type) {					/* If the logical drive has been mounted */
    5fda:	464b      	mov	r3, r9
    5fdc:	781b      	ldrb	r3, [r3, #0]
    5fde:	2b00      	cmp	r3, #0
    5fe0:	d100      	bne.n	5fe4 <f_open+0x48>
    5fe2:	e087      	b.n	60f4 <f_open+0x158>
		stat = disk_status(fs->drv);
    5fe4:	464b      	mov	r3, r9
    5fe6:	7858      	ldrb	r0, [r3, #1]
    5fe8:	4baf      	ldr	r3, [pc, #700]	; (62a8 <f_open+0x30c>)
    5fea:	4798      	blx	r3
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    5fec:	07c3      	lsls	r3, r0, #31
    5fee:	d500      	bpl.n	5ff2 <f_open+0x56>
    5ff0:	e080      	b.n	60f4 <f_open+0x158>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    5ff2:	4653      	mov	r3, sl
    5ff4:	2b00      	cmp	r3, #0
    5ff6:	d002      	beq.n	5ffe <f_open+0x62>
    5ff8:	0743      	lsls	r3, r0, #29
    5ffa:	d500      	bpl.n	5ffe <f_open+0x62>
    5ffc:	e08a      	b.n	6114 <f_open+0x178>
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    5ffe:	ab09      	add	r3, sp, #36	; 0x24
    6000:	4699      	mov	r9, r3
    6002:	aa06      	add	r2, sp, #24
    6004:	920f      	str	r2, [sp, #60]	; 0x3c
    6006:	464a      	mov	r2, r9
    6008:	ab12      	add	r3, sp, #72	; 0x48
    600a:	61d3      	str	r3, [r2, #28]
	if (res == FR_OK)
		res = follow_path(&dj, path);	/* Follow the file path */
    600c:	0021      	movs	r1, r4
    600e:	4ba7      	ldr	r3, [pc, #668]	; (62ac <f_open+0x310>)
    6010:	4648      	mov	r0, r9
    6012:	4798      	blx	r3
	dir = dj.dir;
    6014:	464b      	mov	r3, r9
		res = follow_path(&dj, path);	/* Follow the file path */
    6016:	4680      	mov	r8, r0
	dir = dj.dir;
    6018:	695c      	ldr	r4, [r3, #20]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
    601a:	2800      	cmp	r0, #0
    601c:	d000      	beq.n	6020 <f_open+0x84>
    601e:	e2e5      	b.n	65ec <f_open+0x650>
		if (!dir)	/* Current dir itself */
    6020:	2c00      	cmp	r4, #0
    6022:	d100      	bne.n	6026 <f_open+0x8a>
    6024:	e092      	b.n	614c <f_open+0x1b0>
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    6026:	231c      	movs	r3, #28
    6028:	423b      	tst	r3, r7
    602a:	d100      	bne.n	602e <f_open+0x92>
    602c:	e078      	b.n	6120 <f_open+0x184>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
			dir = dj.dir;					/* New entry */
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
				res = FR_DENIED;
    602e:	2107      	movs	r1, #7
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    6030:	2211      	movs	r2, #17
    6032:	7ae3      	ldrb	r3, [r4, #11]
				res = FR_DENIED;
    6034:	4688      	mov	r8, r1
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    6036:	421a      	tst	r2, r3
    6038:	d12e      	bne.n	6098 <f_open+0xfc>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
					res = FR_EXIST;
    603a:	2308      	movs	r3, #8
    603c:	4698      	mov	r8, r3
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    603e:	077b      	lsls	r3, r7, #29
    6040:	d42a      	bmi.n	6098 <f_open+0xfc>
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    6042:	9b01      	ldr	r3, [sp, #4]
    6044:	071b      	lsls	r3, r3, #28
    6046:	d500      	bpl.n	604a <f_open+0xae>
    6048:	e083      	b.n	6152 <f_open+0x1b6>
    604a:	9f09      	ldr	r7, [sp, #36]	; 0x24
    604c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    604e:	4698      	mov	r8, r3
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
			mode |= FA__WRITTEN;
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    6050:	4643      	mov	r3, r8
    6052:	61eb      	str	r3, [r5, #28]
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
    6054:	466b      	mov	r3, sp
    6056:	791b      	ldrb	r3, [r3, #4]
		fp->dir_ptr = dir;
    6058:	622c      	str	r4, [r5, #32]
		fp->flag = mode;					/* File access mode */
    605a:	71ab      	strb	r3, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    605c:	7d62      	ldrb	r2, [r4, #21]
    605e:	7d23      	ldrb	r3, [r4, #20]
    6060:	7ee1      	ldrb	r1, [r4, #27]
    6062:	0212      	lsls	r2, r2, #8
    6064:	4313      	orrs	r3, r2
    6066:	7ea2      	ldrb	r2, [r4, #26]
    6068:	0209      	lsls	r1, r1, #8
    606a:	430a      	orrs	r2, r1
    606c:	041b      	lsls	r3, r3, #16
    606e:	4313      	orrs	r3, r2
    6070:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    6072:	7f62      	ldrb	r2, [r4, #29]
    6074:	7f23      	ldrb	r3, [r4, #28]
    6076:	0212      	lsls	r2, r2, #8
    6078:	431a      	orrs	r2, r3
    607a:	7fa3      	ldrb	r3, [r4, #30]
    607c:	041b      	lsls	r3, r3, #16
    607e:	431a      	orrs	r2, r3
    6080:	7fe3      	ldrb	r3, [r4, #31]
		fp->fptr = 0;						/* File pointer */
		fp->dsect = 0;
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    6082:	602f      	str	r7, [r5, #0]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    6084:	061b      	lsls	r3, r3, #24
    6086:	4313      	orrs	r3, r2
    6088:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
    608a:	2300      	movs	r3, #0
    608c:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
    608e:	61ab      	str	r3, [r5, #24]
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    6090:	88fb      	ldrh	r3, [r7, #6]
    6092:	80ab      	strh	r3, [r5, #4]
    6094:	2300      	movs	r3, #0
    6096:	4698      	mov	r8, r3
	}

	LEAVE_FF(dj.fs, res);
}
    6098:	4640      	mov	r0, r8
    609a:	2393      	movs	r3, #147	; 0x93
    609c:	009b      	lsls	r3, r3, #2
    609e:	449d      	add	sp, r3
    60a0:	bc3c      	pop	{r2, r3, r4, r5}
    60a2:	4690      	mov	r8, r2
    60a4:	4699      	mov	r9, r3
    60a6:	46a2      	mov	sl, r4
    60a8:	46ab      	mov	fp, r5
    60aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    60ac:	784a      	ldrb	r2, [r1, #1]
    60ae:	2a3a      	cmp	r2, #58	; 0x3a
    60b0:	d000      	beq.n	60b4 <f_open+0x118>
    60b2:	e788      	b.n	5fc6 <f_open+0x2a>
		return FR_INVALID_DRIVE;
    60b4:	3a2f      	subs	r2, #47	; 0x2f
    60b6:	4690      	mov	r8, r2
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    60b8:	2b00      	cmp	r3, #0
    60ba:	d100      	bne.n	60be <f_open+0x122>
    60bc:	e29b      	b.n	65f6 <f_open+0x65a>
	INIT_BUF(dj);
    60be:	ab09      	add	r3, sp, #36	; 0x24
    60c0:	4699      	mov	r9, r3
    60c2:	aa06      	add	r2, sp, #24
    60c4:	920f      	str	r2, [sp, #60]	; 0x3c
    60c6:	464a      	mov	r2, r9
    60c8:	ab12      	add	r3, sp, #72	; 0x48
    60ca:	61d3      	str	r3, [r2, #28]
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    60cc:	231c      	movs	r3, #28
    60ce:	423b      	tst	r3, r7
    60d0:	d0e2      	beq.n	6098 <f_open+0xfc>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    60d2:	4643      	mov	r3, r8
    60d4:	2b04      	cmp	r3, #4
    60d6:	d1df      	bne.n	6098 <f_open+0xfc>
				res = dir_register(&dj);
    60d8:	4648      	mov	r0, r9
    60da:	4b75      	ldr	r3, [pc, #468]	; (62b0 <f_open+0x314>)
    60dc:	4798      	blx	r3
    60de:	ab09      	add	r3, sp, #36	; 0x24
    60e0:	4699      	mov	r9, r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    60e2:	2308      	movs	r3, #8
    60e4:	9a01      	ldr	r2, [sp, #4]
				res = dir_register(&dj);
    60e6:	4680      	mov	r8, r0
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    60e8:	431a      	orrs	r2, r3
    60ea:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    60ec:	9201      	str	r2, [sp, #4]
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    60ee:	2800      	cmp	r0, #0
    60f0:	d0a7      	beq.n	6042 <f_open+0xa6>
    60f2:	e7d1      	b.n	6098 <f_open+0xfc>
	fs->fs_type = 0;					/* Clear the file system object */
    60f4:	2300      	movs	r3, #0
    60f6:	464a      	mov	r2, r9
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    60f8:	2000      	movs	r0, #0
	fs->fs_type = 0;					/* Clear the file system object */
    60fa:	7013      	strb	r3, [r2, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    60fc:	7053      	strb	r3, [r2, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    60fe:	4b6d      	ldr	r3, [pc, #436]	; (62b4 <f_open+0x318>)
    6100:	4798      	blx	r3
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    6102:	2303      	movs	r3, #3
    6104:	4698      	mov	r8, r3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    6106:	07c3      	lsls	r3, r0, #31
    6108:	d4d9      	bmi.n	60be <f_open+0x122>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    610a:	4653      	mov	r3, sl
    610c:	2b00      	cmp	r3, #0
    610e:	d073      	beq.n	61f8 <f_open+0x25c>
    6110:	0743      	lsls	r3, r0, #29
    6112:	d571      	bpl.n	61f8 <f_open+0x25c>
				return FR_WRITE_PROTECTED;
    6114:	230a      	movs	r3, #10
    6116:	4698      	mov	r8, r3
    6118:	e7d1      	b.n	60be <f_open+0x122>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    611a:	230c      	movs	r3, #12
    611c:	4698      	mov	r8, r3
    611e:	e7ce      	b.n	60be <f_open+0x122>
				res = FR_NO_FILE;
    6120:	2204      	movs	r2, #4
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    6122:	7ae3      	ldrb	r3, [r4, #11]
				res = FR_NO_FILE;
    6124:	4690      	mov	r8, r2
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    6126:	06da      	lsls	r2, r3, #27
    6128:	d4b6      	bmi.n	6098 <f_open+0xfc>
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    612a:	07ba      	lsls	r2, r7, #30
    612c:	d503      	bpl.n	6136 <f_open+0x19a>
				res = FR_DENIED;
    612e:	2207      	movs	r2, #7
    6130:	4690      	mov	r8, r2
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    6132:	07db      	lsls	r3, r3, #31
    6134:	d4b0      	bmi.n	6098 <f_open+0xfc>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    6136:	073b      	lsls	r3, r7, #28
    6138:	d400      	bmi.n	613c <f_open+0x1a0>
    613a:	e786      	b.n	604a <f_open+0xae>
    613c:	9f09      	ldr	r7, [sp, #36]	; 0x24
    613e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6140:	4698      	mov	r8, r3
			mode |= FA__WRITTEN;
    6142:	2320      	movs	r3, #32
    6144:	9a01      	ldr	r2, [sp, #4]
    6146:	431a      	orrs	r2, r3
    6148:	9201      	str	r2, [sp, #4]
    614a:	e781      	b.n	6050 <f_open+0xb4>
			res = FR_INVALID_NAME;
    614c:	2306      	movs	r3, #6
    614e:	4698      	mov	r8, r3
    6150:	e7a2      	b.n	6098 <f_open+0xfc>
			dw = get_fattime();					/* Created time */
    6152:	4b59      	ldr	r3, [pc, #356]	; (62b8 <f_open+0x31c>)
    6154:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
    6156:	0a03      	lsrs	r3, r0, #8
    6158:	73e3      	strb	r3, [r4, #15]
    615a:	0c03      	lsrs	r3, r0, #16
    615c:	7423      	strb	r3, [r4, #16]
			dir[DIR_Attr] = 0;					/* Reset attribute */
    615e:	2300      	movs	r3, #0
			cl = LD_CLUST(dir);					/* Get start cluster */
    6160:	7d61      	ldrb	r1, [r4, #21]
    6162:	7d22      	ldrb	r2, [r4, #20]
			ST_DWORD(dir+DIR_CrtTime, dw);
    6164:	73a0      	strb	r0, [r4, #14]
    6166:	0e00      	lsrs	r0, r0, #24
    6168:	7460      	strb	r0, [r4, #17]
			cl = LD_CLUST(dir);					/* Get start cluster */
    616a:	0209      	lsls	r1, r1, #8
    616c:	7ee0      	ldrb	r0, [r4, #27]
    616e:	430a      	orrs	r2, r1
    6170:	7ea1      	ldrb	r1, [r4, #26]
    6172:	0200      	lsls	r0, r0, #8
    6174:	0412      	lsls	r2, r2, #16
    6176:	4301      	orrs	r1, r0
			dj.fs->wflag = 1;
    6178:	9f09      	ldr	r7, [sp, #36]	; 0x24
			dir[DIR_Attr] = 0;					/* Reset attribute */
    617a:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    617c:	7723      	strb	r3, [r4, #28]
    617e:	7763      	strb	r3, [r4, #29]
    6180:	77a3      	strb	r3, [r4, #30]
    6182:	77e3      	strb	r3, [r4, #31]
			ST_CLUST(dir, 0);					/* cluster = 0 */
    6184:	76a3      	strb	r3, [r4, #26]
    6186:	76e3      	strb	r3, [r4, #27]
    6188:	7523      	strb	r3, [r4, #20]
    618a:	7563      	strb	r3, [r4, #21]
			cl = LD_CLUST(dir);					/* Get start cluster */
    618c:	430a      	orrs	r2, r1
			dj.fs->wflag = 1;
    618e:	3301      	adds	r3, #1
			cl = LD_CLUST(dir);					/* Get start cluster */
    6190:	4693      	mov	fp, r2
			dj.fs->wflag = 1;
    6192:	713b      	strb	r3, [r7, #4]
			if (cl) {							/* Remove the cluster chain if exist */
    6194:	2a00      	cmp	r2, #0
    6196:	d0d2      	beq.n	613e <f_open+0x1a2>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    6198:	2a01      	cmp	r2, #1
    619a:	d04c      	beq.n	6236 <f_open+0x29a>
    619c:	2302      	movs	r3, #2
    619e:	4698      	mov	r8, r3
    61a0:	69bb      	ldr	r3, [r7, #24]
    61a2:	429a      	cmp	r2, r3
    61a4:	d300      	bcc.n	61a8 <f_open+0x20c>
    61a6:	e777      	b.n	6098 <f_open+0xfc>
				dw = dj.fs->winsect;
    61a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    61aa:	0011      	movs	r1, r2
    61ac:	469a      	mov	sl, r3
    61ae:	0038      	movs	r0, r7
    61b0:	4b42      	ldr	r3, [pc, #264]	; (62bc <f_open+0x320>)
    61b2:	4798      	blx	r3
    61b4:	4680      	mov	r8, r0
				if (res == FR_OK) {
    61b6:	2800      	cmp	r0, #0
    61b8:	d000      	beq.n	61bc <f_open+0x220>
    61ba:	e76d      	b.n	6098 <f_open+0xfc>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    61bc:	464b      	mov	r3, r9
    61be:	681f      	ldr	r7, [r3, #0]
    61c0:	465b      	mov	r3, fp
    61c2:	3b01      	subs	r3, #1
    61c4:	60fb      	str	r3, [r7, #12]
	wsect = fs->winsect;
    61c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    61c8:	4698      	mov	r8, r3
	if (wsect != sector) {	/* Changed current window */
    61ca:	459a      	cmp	sl, r3
    61cc:	d0b9      	beq.n	6142 <f_open+0x1a6>
		if (fs->wflag) {	/* Write back dirty window if needed */
    61ce:	793b      	ldrb	r3, [r7, #4]
    61d0:	2b00      	cmp	r3, #0
    61d2:	d133      	bne.n	623c <f_open+0x2a0>
		if (sector) {
    61d4:	4653      	mov	r3, sl
    61d6:	2b00      	cmp	r3, #0
    61d8:	d0b0      	beq.n	613c <f_open+0x1a0>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    61da:	0039      	movs	r1, r7
    61dc:	7878      	ldrb	r0, [r7, #1]
    61de:	2301      	movs	r3, #1
    61e0:	4652      	mov	r2, sl
    61e2:	3130      	adds	r1, #48	; 0x30
    61e4:	4e36      	ldr	r6, [pc, #216]	; (62c0 <f_open+0x324>)
    61e6:	47b0      	blx	r6
    61e8:	2800      	cmp	r0, #0
    61ea:	d155      	bne.n	6298 <f_open+0x2fc>
			fs->winsect = sector;
    61ec:	4653      	mov	r3, sl
    61ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    61f0:	9f09      	ldr	r7, [sp, #36]	; 0x24
    61f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    61f4:	4698      	mov	r8, r3
    61f6:	e7a4      	b.n	6142 <f_open+0x1a6>
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    61f8:	2330      	movs	r3, #48	; 0x30
    61fa:	444b      	add	r3, r9
    61fc:	469b      	mov	fp, r3
    61fe:	464b      	mov	r3, r9
    6200:	4e2f      	ldr	r6, [pc, #188]	; (62c0 <f_open+0x324>)
    6202:	7858      	ldrb	r0, [r3, #1]
    6204:	2200      	movs	r2, #0
    6206:	2301      	movs	r3, #1
    6208:	4659      	mov	r1, fp
    620a:	47b0      	blx	r6
	if (fmt == 3) return FR_DISK_ERR;
    620c:	2301      	movs	r3, #1
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    620e:	46b2      	mov	sl, r6
	if (fmt == 3) return FR_DISK_ERR;
    6210:	4698      	mov	r8, r3
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    6212:	2800      	cmp	r0, #0
    6214:	d000      	beq.n	6218 <f_open+0x27c>
    6216:	e752      	b.n	60be <f_open+0x122>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    6218:	464b      	mov	r3, r9
    621a:	4a2a      	ldr	r2, [pc, #168]	; (62c4 <f_open+0x328>)
    621c:	492a      	ldr	r1, [pc, #168]	; (62c8 <f_open+0x32c>)
    621e:	5c9a      	ldrb	r2, [r3, r2]
    6220:	5c5b      	ldrb	r3, [r3, r1]
    6222:	0212      	lsls	r2, r2, #8
    6224:	4313      	orrs	r3, r2
    6226:	4a29      	ldr	r2, [pc, #164]	; (62cc <f_open+0x330>)
    6228:	b21b      	sxth	r3, r3
    622a:	001e      	movs	r6, r3
    622c:	4293      	cmp	r3, r2
    622e:	d051      	beq.n	62d4 <f_open+0x338>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    6230:	230d      	movs	r3, #13
    6232:	4698      	mov	r8, r3
    6234:	e743      	b.n	60be <f_open+0x122>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    6236:	2302      	movs	r3, #2
    6238:	4698      	mov	r8, r3
    623a:	e72d      	b.n	6098 <f_open+0xfc>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    623c:	2330      	movs	r3, #48	; 0x30
    623e:	469c      	mov	ip, r3
    6240:	44bc      	add	ip, r7
    6242:	4663      	mov	r3, ip
    6244:	4e22      	ldr	r6, [pc, #136]	; (62d0 <f_open+0x334>)
    6246:	9302      	str	r3, [sp, #8]
    6248:	4661      	mov	r1, ip
    624a:	7878      	ldrb	r0, [r7, #1]
    624c:	2301      	movs	r3, #1
    624e:	4642      	mov	r2, r8
    6250:	46b3      	mov	fp, r6
    6252:	47b0      	blx	r6
    6254:	2800      	cmp	r0, #0
    6256:	d11f      	bne.n	6298 <f_open+0x2fc>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    6258:	69fb      	ldr	r3, [r7, #28]
    625a:	6a3a      	ldr	r2, [r7, #32]
			fs->wflag = 0;
    625c:	7138      	strb	r0, [r7, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    625e:	18d2      	adds	r2, r2, r3
    6260:	4590      	cmp	r8, r2
    6262:	d2b7      	bcs.n	61d4 <f_open+0x238>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    6264:	78fa      	ldrb	r2, [r7, #3]
    6266:	4691      	mov	r9, r2
    6268:	2a01      	cmp	r2, #1
    626a:	d9b3      	bls.n	61d4 <f_open+0x238>
    626c:	002a      	movs	r2, r5
    626e:	9e01      	ldr	r6, [sp, #4]
    6270:	4645      	mov	r5, r8
    6272:	46a0      	mov	r8, r4
    6274:	464c      	mov	r4, r9
    6276:	4691      	mov	r9, r2
    6278:	e000      	b.n	627c <f_open+0x2e0>
    627a:	69fb      	ldr	r3, [r7, #28]
					wsect += fs->fsize;
    627c:	18ed      	adds	r5, r5, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    627e:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    6280:	7878      	ldrb	r0, [r7, #1]
    6282:	2301      	movs	r3, #1
    6284:	002a      	movs	r2, r5
    6286:	9902      	ldr	r1, [sp, #8]
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    6288:	b2e4      	uxtb	r4, r4
					disk_write(fs->drv, fs->win, wsect, 1);
    628a:	47d8      	blx	fp
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    628c:	2c01      	cmp	r4, #1
    628e:	d1f4      	bne.n	627a <f_open+0x2de>
    6290:	9601      	str	r6, [sp, #4]
    6292:	4644      	mov	r4, r8
    6294:	464d      	mov	r5, r9
    6296:	e79d      	b.n	61d4 <f_open+0x238>
				return FR_DISK_ERR;
    6298:	2301      	movs	r3, #1
    629a:	4698      	mov	r8, r3
    629c:	e6fc      	b.n	6098 <f_open+0xfc>
    629e:	46c0      	nop			; (mov r8, r8)
    62a0:	fffffdb4 	.word	0xfffffdb4
    62a4:	20000e48 	.word	0x20000e48
    62a8:	00003d1d 	.word	0x00003d1d
    62ac:	00005c45 	.word	0x00005c45
    62b0:	00005359 	.word	0x00005359
    62b4:	00003ce9 	.word	0x00003ce9
    62b8:	00003eb1 	.word	0x00003eb1
    62bc:	00004431 	.word	0x00004431
    62c0:	00003d3d 	.word	0x00003d3d
    62c4:	0000022f 	.word	0x0000022f
    62c8:	0000022e 	.word	0x0000022e
    62cc:	ffffaa55 	.word	0xffffaa55
    62d0:	00003dc1 	.word	0x00003dc1
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    62d4:	2366      	movs	r3, #102	; 0x66
    62d6:	444b      	add	r3, r9
    62d8:	881a      	ldrh	r2, [r3, #0]
    62da:	9304      	str	r3, [sp, #16]
    62dc:	885b      	ldrh	r3, [r3, #2]
    62de:	041b      	lsls	r3, r3, #16
    62e0:	4313      	orrs	r3, r2
    62e2:	4ac6      	ldr	r2, [pc, #792]	; (65fc <f_open+0x660>)
    62e4:	021b      	lsls	r3, r3, #8
    62e6:	0a1b      	lsrs	r3, r3, #8
    62e8:	4293      	cmp	r3, r2
    62ea:	d100      	bne.n	62ee <f_open+0x352>
    62ec:	e103      	b.n	64f6 <f_open+0x55a>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    62ee:	464b      	mov	r3, r9
    62f0:	2282      	movs	r2, #130	; 0x82
    62f2:	5a9a      	ldrh	r2, [r3, r2]
    62f4:	2382      	movs	r3, #130	; 0x82
    62f6:	444b      	add	r3, r9
    62f8:	9302      	str	r3, [sp, #8]
    62fa:	885b      	ldrh	r3, [r3, #2]
    62fc:	041b      	lsls	r3, r3, #16
    62fe:	4313      	orrs	r3, r2
    6300:	4abe      	ldr	r2, [pc, #760]	; (65fc <f_open+0x660>)
    6302:	021b      	lsls	r3, r3, #8
    6304:	0a1b      	lsrs	r3, r3, #8
    6306:	4293      	cmp	r3, r2
    6308:	d100      	bne.n	630c <f_open+0x370>
    630a:	e0f4      	b.n	64f6 <f_open+0x55a>
		if (tbl[4]) {						/* Is the partition existing? */
    630c:	23f9      	movs	r3, #249	; 0xf9
    630e:	464a      	mov	r2, r9
    6310:	005b      	lsls	r3, r3, #1
    6312:	5cd3      	ldrb	r3, [r2, r3]
    6314:	2b00      	cmp	r3, #0
    6316:	d08b      	beq.n	6230 <f_open+0x294>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    6318:	4649      	mov	r1, r9
    631a:	23fb      	movs	r3, #251	; 0xfb
    631c:	464a      	mov	r2, r9
    631e:	31f7      	adds	r1, #247	; 0xf7
    6320:	31ff      	adds	r1, #255	; 0xff
    6322:	005b      	lsls	r3, r3, #1
    6324:	5cd3      	ldrb	r3, [r2, r3]
    6326:	784a      	ldrb	r2, [r1, #1]
    6328:	0212      	lsls	r2, r2, #8
    632a:	4313      	orrs	r3, r2
    632c:	788a      	ldrb	r2, [r1, #2]
    632e:	0412      	lsls	r2, r2, #16
    6330:	431a      	orrs	r2, r3
    6332:	78cb      	ldrb	r3, [r1, #3]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    6334:	4659      	mov	r1, fp
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    6336:	061b      	lsls	r3, r3, #24
    6338:	4313      	orrs	r3, r2
    633a:	9303      	str	r3, [sp, #12]
    633c:	001a      	movs	r2, r3
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    633e:	464b      	mov	r3, r9
    6340:	7858      	ldrb	r0, [r3, #1]
    6342:	2301      	movs	r3, #1
    6344:	47d0      	blx	sl
    6346:	2800      	cmp	r0, #0
    6348:	d000      	beq.n	634c <f_open+0x3b0>
    634a:	e6a5      	b.n	6098 <f_open+0xfc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    634c:	464b      	mov	r3, r9
    634e:	4aac      	ldr	r2, [pc, #688]	; (6600 <f_open+0x664>)
    6350:	49ac      	ldr	r1, [pc, #688]	; (6604 <f_open+0x668>)
    6352:	5c9a      	ldrb	r2, [r3, r2]
    6354:	5c5b      	ldrb	r3, [r3, r1]
    6356:	0212      	lsls	r2, r2, #8
    6358:	4313      	orrs	r3, r2
    635a:	b21b      	sxth	r3, r3
    635c:	42b3      	cmp	r3, r6
    635e:	d000      	beq.n	6362 <f_open+0x3c6>
    6360:	e766      	b.n	6230 <f_open+0x294>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    6362:	9b04      	ldr	r3, [sp, #16]
    6364:	881a      	ldrh	r2, [r3, #0]
    6366:	885b      	ldrh	r3, [r3, #2]
    6368:	041b      	lsls	r3, r3, #16
    636a:	4313      	orrs	r3, r2
    636c:	4aa3      	ldr	r2, [pc, #652]	; (65fc <f_open+0x660>)
    636e:	021b      	lsls	r3, r3, #8
    6370:	0a1b      	lsrs	r3, r3, #8
    6372:	4293      	cmp	r3, r2
    6374:	d00c      	beq.n	6390 <f_open+0x3f4>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    6376:	464b      	mov	r3, r9
    6378:	2282      	movs	r2, #130	; 0x82
    637a:	5a9a      	ldrh	r2, [r3, r2]
    637c:	9b02      	ldr	r3, [sp, #8]
    637e:	885b      	ldrh	r3, [r3, #2]
    6380:	041b      	lsls	r3, r3, #16
    6382:	4313      	orrs	r3, r2
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    6384:	4a9d      	ldr	r2, [pc, #628]	; (65fc <f_open+0x660>)
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    6386:	021b      	lsls	r3, r3, #8
    6388:	0a1b      	lsrs	r3, r3, #8
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    638a:	4293      	cmp	r3, r2
    638c:	d000      	beq.n	6390 <f_open+0x3f4>
    638e:	e74f      	b.n	6230 <f_open+0x294>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    6390:	233c      	movs	r3, #60	; 0x3c
    6392:	464a      	mov	r2, r9
    6394:	4649      	mov	r1, r9
    6396:	5cd2      	ldrb	r2, [r2, r3]
    6398:	3b01      	subs	r3, #1
    639a:	5ccb      	ldrb	r3, [r1, r3]
    639c:	0212      	lsls	r2, r2, #8
    639e:	4313      	orrs	r3, r2
    63a0:	2280      	movs	r2, #128	; 0x80
    63a2:	b21b      	sxth	r3, r3
    63a4:	0092      	lsls	r2, r2, #2
    63a6:	4293      	cmp	r3, r2
    63a8:	d000      	beq.n	63ac <f_open+0x410>
    63aa:	e741      	b.n	6230 <f_open+0x294>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    63ac:	2347      	movs	r3, #71	; 0x47
    63ae:	5cca      	ldrb	r2, [r1, r3]
    63b0:	3b01      	subs	r3, #1
    63b2:	5ccb      	ldrb	r3, [r1, r3]
    63b4:	0212      	lsls	r2, r2, #8
    63b6:	4313      	orrs	r3, r2
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    63b8:	d100      	bne.n	63bc <f_open+0x420>
    63ba:	6d4b      	ldr	r3, [r1, #84]	; 0x54
    63bc:	001a      	movs	r2, r3
    63be:	9302      	str	r3, [sp, #8]
	fs->fsize = fasize;
    63c0:	464b      	mov	r3, r9
    63c2:	61da      	str	r2, [r3, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    63c4:	464a      	mov	r2, r9
    63c6:	2340      	movs	r3, #64	; 0x40
    63c8:	5cd3      	ldrb	r3, [r2, r3]
    63ca:	70d3      	strb	r3, [r2, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    63cc:	1e5a      	subs	r2, r3, #1
    63ce:	2a01      	cmp	r2, #1
    63d0:	d900      	bls.n	63d4 <f_open+0x438>
    63d2:	e72d      	b.n	6230 <f_open+0x294>
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    63d4:	223d      	movs	r2, #61	; 0x3d
    63d6:	4649      	mov	r1, r9
    63d8:	5c89      	ldrb	r1, [r1, r2]
    63da:	464a      	mov	r2, r9
    63dc:	7091      	strb	r1, [r2, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    63de:	2900      	cmp	r1, #0
    63e0:	d100      	bne.n	63e4 <f_open+0x448>
    63e2:	e725      	b.n	6230 <f_open+0x294>
    63e4:	1e4a      	subs	r2, r1, #1
    63e6:	4211      	tst	r1, r2
    63e8:	d000      	beq.n	63ec <f_open+0x450>
    63ea:	e721      	b.n	6230 <f_open+0x294>
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    63ec:	4648      	mov	r0, r9
    63ee:	2242      	movs	r2, #66	; 0x42
    63f0:	464e      	mov	r6, r9
    63f2:	5c82      	ldrb	r2, [r0, r2]
    63f4:	2041      	movs	r0, #65	; 0x41
    63f6:	5c30      	ldrb	r0, [r6, r0]
    63f8:	0212      	lsls	r2, r2, #8
    63fa:	4310      	orrs	r0, r2
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    63fc:	0002      	movs	r2, r0
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    63fe:	4680      	mov	r8, r0
    6400:	8130      	strh	r0, [r6, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    6402:	0712      	lsls	r2, r2, #28
    6404:	d000      	beq.n	6408 <f_open+0x46c>
    6406:	e713      	b.n	6230 <f_open+0x294>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    6408:	2244      	movs	r2, #68	; 0x44
    640a:	2043      	movs	r0, #67	; 0x43
    640c:	5cb2      	ldrb	r2, [r6, r2]
    640e:	5c30      	ldrb	r0, [r6, r0]
    6410:	0212      	lsls	r2, r2, #8
    6412:	4310      	orrs	r0, r2
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    6414:	d100      	bne.n	6418 <f_open+0x47c>
    6416:	6d30      	ldr	r0, [r6, #80]	; 0x50
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    6418:	464e      	mov	r6, r9
    641a:	223f      	movs	r2, #63	; 0x3f
    641c:	5cb2      	ldrb	r2, [r6, r2]
    641e:	263e      	movs	r6, #62	; 0x3e
    6420:	46b4      	mov	ip, r6
    6422:	0212      	lsls	r2, r2, #8
    6424:	9204      	str	r2, [sp, #16]
    6426:	464e      	mov	r6, r9
    6428:	4662      	mov	r2, ip
    642a:	5cb2      	ldrb	r2, [r6, r2]
    642c:	0016      	movs	r6, r2
    642e:	9a04      	ldr	r2, [sp, #16]
    6430:	4316      	orrs	r6, r2
    6432:	9604      	str	r6, [sp, #16]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    6434:	d100      	bne.n	6438 <f_open+0x49c>
    6436:	e6fb      	b.n	6230 <f_open+0x294>
	fasize *= b;										/* Number of sectors for FAT area */
    6438:	9a02      	ldr	r2, [sp, #8]
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    643a:	46b4      	mov	ip, r6
	fasize *= b;										/* Number of sectors for FAT area */
    643c:	435a      	muls	r2, r3
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    643e:	4643      	mov	r3, r8
    6440:	091b      	lsrs	r3, r3, #4
    6442:	4463      	add	r3, ip
    6444:	4694      	mov	ip, r2
    6446:	4463      	add	r3, ip
	fasize *= b;										/* Number of sectors for FAT area */
    6448:	9205      	str	r2, [sp, #20]
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    644a:	001e      	movs	r6, r3
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    644c:	4283      	cmp	r3, r0
    644e:	d900      	bls.n	6452 <f_open+0x4b6>
    6450:	e6ee      	b.n	6230 <f_open+0x294>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    6452:	1ac0      	subs	r0, r0, r3
    6454:	4b6c      	ldr	r3, [pc, #432]	; (6608 <f_open+0x66c>)
    6456:	4798      	blx	r3
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    6458:	2800      	cmp	r0, #0
    645a:	d100      	bne.n	645e <f_open+0x4c2>
    645c:	e6e8      	b.n	6230 <f_open+0x294>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    645e:	4b6b      	ldr	r3, [pc, #428]	; (660c <f_open+0x670>)
    6460:	4298      	cmp	r0, r3
    6462:	d800      	bhi.n	6466 <f_open+0x4ca>
    6464:	e095      	b.n	6592 <f_open+0x5f6>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    6466:	4b6a      	ldr	r3, [pc, #424]	; (6610 <f_open+0x674>)
    6468:	4298      	cmp	r0, r3
    646a:	d96b      	bls.n	6544 <f_open+0x5a8>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    646c:	464b      	mov	r3, r9
	fs->database = bsect + sysect;						/* Data start sector */
    646e:	9903      	ldr	r1, [sp, #12]
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    6470:	3002      	adds	r0, #2
    6472:	6198      	str	r0, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    6474:	468c      	mov	ip, r1
    6476:	0033      	movs	r3, r6
    6478:	464a      	mov	r2, r9
    647a:	4463      	add	r3, ip
    647c:	6293      	str	r3, [r2, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    647e:	464a      	mov	r2, r9
    6480:	9b04      	ldr	r3, [sp, #16]
    6482:	4463      	add	r3, ip
    6484:	6213      	str	r3, [r2, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    6486:	4643      	mov	r3, r8
    6488:	2b00      	cmp	r3, #0
    648a:	d000      	beq.n	648e <f_open+0x4f2>
    648c:	e6d0      	b.n	6230 <f_open+0x294>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    648e:	464b      	mov	r3, r9
    6490:	6dda      	ldr	r2, [r3, #92]	; 0x5c
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    6492:	0080      	lsls	r0, r0, #2
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    6494:	625a      	str	r2, [r3, #36]	; 0x24
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    6496:	4b5f      	ldr	r3, [pc, #380]	; (6614 <f_open+0x678>)
    6498:	9a02      	ldr	r2, [sp, #8]
    649a:	18c3      	adds	r3, r0, r3
    649c:	0a5b      	lsrs	r3, r3, #9
    649e:	429a      	cmp	r2, r3
    64a0:	d200      	bcs.n	64a4 <f_open+0x508>
    64a2:	e6c5      	b.n	6230 <f_open+0x294>
	fs->free_clust = 0xFFFFFFFF;
    64a4:	2301      	movs	r3, #1
    64a6:	464a      	mov	r2, r9
    64a8:	425b      	negs	r3, r3
    64aa:	6113      	str	r3, [r2, #16]
	fs->last_clust = 0;
    64ac:	464b      	mov	r3, r9
    64ae:	4642      	mov	r2, r8
    64b0:	60da      	str	r2, [r3, #12]
	 	fs->fsi_flag = 0;
    64b2:	4642      	mov	r2, r8
    64b4:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    64b6:	464a      	mov	r2, r9
    64b8:	2361      	movs	r3, #97	; 0x61
    64ba:	4649      	mov	r1, r9
    64bc:	5cd3      	ldrb	r3, [r2, r3]
    64be:	2260      	movs	r2, #96	; 0x60
    64c0:	5c8a      	ldrb	r2, [r1, r2]
    64c2:	021b      	lsls	r3, r3, #8
    64c4:	431a      	orrs	r2, r3
    64c6:	9b03      	ldr	r3, [sp, #12]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    64c8:	7848      	ldrb	r0, [r1, #1]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    64ca:	469c      	mov	ip, r3
    64cc:	4462      	add	r2, ip
    64ce:	614a      	str	r2, [r1, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    64d0:	2301      	movs	r3, #1
    64d2:	4659      	mov	r1, fp
    64d4:	47d0      	blx	sl
    64d6:	2303      	movs	r3, #3
    64d8:	2800      	cmp	r0, #0
    64da:	d00f      	beq.n	64fc <f_open+0x560>
	fs->fs_type = fmt;		/* FAT sub-type */
    64dc:	464a      	mov	r2, r9
    64de:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;		/* File system mount ID */
    64e0:	4a4d      	ldr	r2, [pc, #308]	; (6618 <f_open+0x67c>)
    64e2:	8813      	ldrh	r3, [r2, #0]
    64e4:	3301      	adds	r3, #1
    64e6:	b29b      	uxth	r3, r3
    64e8:	8013      	strh	r3, [r2, #0]
    64ea:	464a      	mov	r2, r9
    64ec:	80d3      	strh	r3, [r2, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
    64ee:	2300      	movs	r3, #0
    64f0:	62d3      	str	r3, [r2, #44]	; 0x2c
	fs->wflag = 0;
    64f2:	7113      	strb	r3, [r2, #4]
    64f4:	e583      	b.n	5ffe <f_open+0x62>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    64f6:	2300      	movs	r3, #0
    64f8:	9303      	str	r3, [sp, #12]
    64fa:	e749      	b.n	6390 <f_open+0x3f4>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    64fc:	464a      	mov	r2, r9
    64fe:	4649      	mov	r1, r9
    6500:	4b3f      	ldr	r3, [pc, #252]	; (6600 <f_open+0x664>)
    6502:	5cd3      	ldrb	r3, [r2, r3]
    6504:	4a3f      	ldr	r2, [pc, #252]	; (6604 <f_open+0x668>)
    6506:	021b      	lsls	r3, r3, #8
    6508:	5c8a      	ldrb	r2, [r1, r2]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    650a:	4944      	ldr	r1, [pc, #272]	; (661c <f_open+0x680>)
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    650c:	431a      	orrs	r2, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    650e:	b212      	sxth	r2, r2
    6510:	2303      	movs	r3, #3
    6512:	428a      	cmp	r2, r1
    6514:	d1e2      	bne.n	64dc <f_open+0x540>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    6516:	4649      	mov	r1, r9
    6518:	4a41      	ldr	r2, [pc, #260]	; (6620 <f_open+0x684>)
    651a:	6b09      	ldr	r1, [r1, #48]	; 0x30
    651c:	4291      	cmp	r1, r2
    651e:	d1dd      	bne.n	64dc <f_open+0x540>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    6520:	2385      	movs	r3, #133	; 0x85
    6522:	4649      	mov	r1, r9
    6524:	009b      	lsls	r3, r3, #2
    6526:	58c9      	ldr	r1, [r1, r3]
    6528:	4a3e      	ldr	r2, [pc, #248]	; (6624 <f_open+0x688>)
    652a:	2303      	movs	r3, #3
    652c:	4291      	cmp	r1, r2
    652e:	d1d5      	bne.n	64dc <f_open+0x540>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    6530:	2287      	movs	r2, #135	; 0x87
    6532:	4649      	mov	r1, r9
    6534:	0092      	lsls	r2, r2, #2
    6536:	588a      	ldr	r2, [r1, r2]
    6538:	60ca      	str	r2, [r1, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    653a:	2286      	movs	r2, #134	; 0x86
    653c:	0092      	lsls	r2, r2, #2
    653e:	588a      	ldr	r2, [r1, r2]
    6540:	610a      	str	r2, [r1, #16]
    6542:	e7cb      	b.n	64dc <f_open+0x540>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    6544:	464b      	mov	r3, r9
	fs->database = bsect + sysect;						/* Data start sector */
    6546:	9903      	ldr	r1, [sp, #12]
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    6548:	3002      	adds	r0, #2
    654a:	6198      	str	r0, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    654c:	468c      	mov	ip, r1
    654e:	0033      	movs	r3, r6
    6550:	464a      	mov	r2, r9
    6552:	4463      	add	r3, ip
    6554:	6293      	str	r3, [r2, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    6556:	9b04      	ldr	r3, [sp, #16]
    6558:	001a      	movs	r2, r3
    655a:	464b      	mov	r3, r9
    655c:	4462      	add	r2, ip
    655e:	621a      	str	r2, [r3, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    6560:	4643      	mov	r3, r8
    6562:	2b00      	cmp	r3, #0
    6564:	d100      	bne.n	6568 <f_open+0x5cc>
    6566:	e663      	b.n	6230 <f_open+0x294>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    6568:	9b05      	ldr	r3, [sp, #20]
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    656a:	0040      	lsls	r0, r0, #1
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    656c:	469c      	mov	ip, r3
    656e:	464b      	mov	r3, r9
    6570:	4462      	add	r2, ip
    6572:	625a      	str	r2, [r3, #36]	; 0x24
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    6574:	4b27      	ldr	r3, [pc, #156]	; (6614 <f_open+0x678>)
    6576:	9a02      	ldr	r2, [sp, #8]
    6578:	18c3      	adds	r3, r0, r3
    657a:	0a5b      	lsrs	r3, r3, #9
    657c:	4293      	cmp	r3, r2
    657e:	d900      	bls.n	6582 <f_open+0x5e6>
    6580:	e656      	b.n	6230 <f_open+0x294>
	fs->free_clust = 0xFFFFFFFF;
    6582:	2301      	movs	r3, #1
    6584:	464a      	mov	r2, r9
    6586:	425b      	negs	r3, r3
    6588:	6113      	str	r3, [r2, #16]
	fs->last_clust = 0;
    658a:	2300      	movs	r3, #0
    658c:	60d3      	str	r3, [r2, #12]
    658e:	3302      	adds	r3, #2
    6590:	e7a4      	b.n	64dc <f_open+0x540>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    6592:	464b      	mov	r3, r9
	fs->database = bsect + sysect;						/* Data start sector */
    6594:	9903      	ldr	r1, [sp, #12]
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    6596:	3002      	adds	r0, #2
    6598:	6198      	str	r0, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    659a:	468c      	mov	ip, r1
    659c:	0033      	movs	r3, r6
    659e:	464a      	mov	r2, r9
    65a0:	4463      	add	r3, ip
    65a2:	6293      	str	r3, [r2, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    65a4:	9b04      	ldr	r3, [sp, #16]
    65a6:	001a      	movs	r2, r3
    65a8:	464b      	mov	r3, r9
    65aa:	4462      	add	r2, ip
    65ac:	621a      	str	r2, [r3, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    65ae:	4643      	mov	r3, r8
    65b0:	2b00      	cmp	r3, #0
    65b2:	d100      	bne.n	65b6 <f_open+0x61a>
    65b4:	e63c      	b.n	6230 <f_open+0x294>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    65b6:	9b05      	ldr	r3, [sp, #20]
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    65b8:	4916      	ldr	r1, [pc, #88]	; (6614 <f_open+0x678>)
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    65ba:	469c      	mov	ip, r3
    65bc:	464b      	mov	r3, r9
    65be:	4462      	add	r2, ip
    65c0:	625a      	str	r2, [r3, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    65c2:	2303      	movs	r3, #3
    65c4:	2201      	movs	r2, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    65c6:	468c      	mov	ip, r1
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    65c8:	4343      	muls	r3, r0
    65ca:	4010      	ands	r0, r2
    65cc:	085b      	lsrs	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    65ce:	4460      	add	r0, ip
    65d0:	9902      	ldr	r1, [sp, #8]
    65d2:	181b      	adds	r3, r3, r0
    65d4:	0a5b      	lsrs	r3, r3, #9
    65d6:	4299      	cmp	r1, r3
    65d8:	d200      	bcs.n	65dc <f_open+0x640>
    65da:	e629      	b.n	6230 <f_open+0x294>
	fs->free_clust = 0xFFFFFFFF;
    65dc:	2301      	movs	r3, #1
    65de:	4649      	mov	r1, r9
    65e0:	425b      	negs	r3, r3
    65e2:	610b      	str	r3, [r1, #16]
	fs->last_clust = 0;
    65e4:	2300      	movs	r3, #0
    65e6:	60cb      	str	r3, [r1, #12]
	fmt = FS_FAT12;
    65e8:	0013      	movs	r3, r2
    65ea:	e777      	b.n	64dc <f_open+0x540>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    65ec:	231c      	movs	r3, #28
    65ee:	421f      	tst	r7, r3
    65f0:	d100      	bne.n	65f4 <f_open+0x658>
    65f2:	e551      	b.n	6098 <f_open+0xfc>
    65f4:	e56d      	b.n	60d2 <f_open+0x136>
		p += 2; *path = p;				/* Return pointer to the path name */
    65f6:	3402      	adds	r4, #2
    65f8:	e4e5      	b.n	5fc6 <f_open+0x2a>
    65fa:	46c0      	nop			; (mov r8, r8)
    65fc:	00544146 	.word	0x00544146
    6600:	0000022f 	.word	0x0000022f
    6604:	0000022e 	.word	0x0000022e
    6608:	0001bf8d 	.word	0x0001bf8d
    660c:	00000ff5 	.word	0x00000ff5
    6610:	0000fff5 	.word	0x0000fff5
    6614:	000001ff 	.word	0x000001ff
    6618:	20000e4c 	.word	0x20000e4c
    661c:	ffffaa55 	.word	0xffffaa55
    6620:	41615252 	.word	0x41615252
    6624:	61417272 	.word	0x61417272

00006628 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    6628:	b5f0      	push	{r4, r5, r6, r7, lr}
    662a:	46de      	mov	lr, fp
    662c:	469b      	mov	fp, r3
    662e:	4645      	mov	r5, r8
    6630:	4657      	mov	r7, sl
    6632:	464e      	mov	r6, r9
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    6634:	2300      	movs	r3, #0
{
    6636:	4690      	mov	r8, r2
	*bw = 0;	/* Initialize byte counter */
    6638:	465a      	mov	r2, fp
{
    663a:	b5e0      	push	{r5, r6, r7, lr}
	*bw = 0;	/* Initialize byte counter */
    663c:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
    663e:	6803      	ldr	r3, [r0, #0]
{
    6640:	b083      	sub	sp, #12
    6642:	0004      	movs	r4, r0
    6644:	000d      	movs	r5, r1
	if (!fs || !fs->fs_type || fs->id != id)
    6646:	2b00      	cmp	r3, #0
    6648:	d02c      	beq.n	66a4 <f_write+0x7c>
    664a:	781a      	ldrb	r2, [r3, #0]
		return FR_INVALID_OBJECT;
    664c:	2009      	movs	r0, #9
	if (!fs || !fs->fs_type || fs->id != id)
    664e:	2a00      	cmp	r2, #0
    6650:	d106      	bne.n	6660 <f_write+0x38>

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */

	LEAVE_FF(fp->fs, FR_OK);
}
    6652:	b003      	add	sp, #12
    6654:	bc3c      	pop	{r2, r3, r4, r5}
    6656:	4690      	mov	r8, r2
    6658:	4699      	mov	r9, r3
    665a:	46a2      	mov	sl, r4
    665c:	46ab      	mov	fp, r5
    665e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!fs || !fs->fs_type || fs->id != id)
    6660:	88a1      	ldrh	r1, [r4, #4]
    6662:	88da      	ldrh	r2, [r3, #6]
    6664:	4291      	cmp	r1, r2
    6666:	d1f4      	bne.n	6652 <f_write+0x2a>
	if (disk_status(fs->drv) & STA_NOINIT)
    6668:	7858      	ldrb	r0, [r3, #1]
    666a:	4bab      	ldr	r3, [pc, #684]	; (6918 <f_write+0x2f0>)
    666c:	4798      	blx	r3
    666e:	0003      	movs	r3, r0
		return FR_NOT_READY;
    6670:	2003      	movs	r0, #3
	if (disk_status(fs->drv) & STA_NOINIT)
    6672:	07db      	lsls	r3, r3, #31
    6674:	d4ed      	bmi.n	6652 <f_write+0x2a>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    6676:	79a3      	ldrb	r3, [r4, #6]
		LEAVE_FF(fp->fs, FR_INT_ERR);
    6678:	2002      	movs	r0, #2
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    667a:	b25a      	sxtb	r2, r3
    667c:	2a00      	cmp	r2, #0
    667e:	dbe8      	blt.n	6652 <f_write+0x2a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    6680:	0002      	movs	r2, r0
		LEAVE_FF(fp->fs, FR_DENIED);
    6682:	2007      	movs	r0, #7
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    6684:	401a      	ands	r2, r3
    6686:	d0e4      	beq.n	6652 <f_write+0x2a>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    6688:	4641      	mov	r1, r8
    668a:	68e2      	ldr	r2, [r4, #12]
    668c:	1851      	adds	r1, r2, r1
    668e:	428a      	cmp	r2, r1
    6690:	d90a      	bls.n	66a8 <f_write+0x80>
	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    6692:	68a1      	ldr	r1, [r4, #8]
    6694:	4291      	cmp	r1, r2
    6696:	d900      	bls.n	669a <f_write+0x72>
    6698:	60e1      	str	r1, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    669a:	2220      	movs	r2, #32
    669c:	4313      	orrs	r3, r2
    669e:	71a3      	strb	r3, [r4, #6]
	LEAVE_FF(fp->fs, FR_OK);
    66a0:	2000      	movs	r0, #0
    66a2:	e7d6      	b.n	6652 <f_write+0x2a>
		return FR_INVALID_OBJECT;
    66a4:	2009      	movs	r0, #9
    66a6:	e7d4      	b.n	6652 <f_write+0x2a>
	for ( ;  btw;							/* Repeat until all data written */
    66a8:	4641      	mov	r1, r8
    66aa:	2900      	cmp	r1, #0
    66ac:	d0f1      	beq.n	6692 <f_write+0x6a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    66ae:	002e      	movs	r6, r5
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    66b0:	68a2      	ldr	r2, [r4, #8]
    66b2:	05d3      	lsls	r3, r2, #23
    66b4:	0ddb      	lsrs	r3, r3, #23
    66b6:	d000      	beq.n	66ba <f_write+0x92>
    66b8:	e084      	b.n	67c4 <f_write+0x19c>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    66ba:	6820      	ldr	r0, [r4, #0]
    66bc:	0a53      	lsrs	r3, r2, #9
    66be:	7881      	ldrb	r1, [r0, #2]
    66c0:	3901      	subs	r1, #1
    66c2:	400b      	ands	r3, r1
    66c4:	b2db      	uxtb	r3, r3
    66c6:	4699      	mov	r9, r3
			if (!csect) {					/* On the cluster boundary? */
    66c8:	2b00      	cmp	r3, #0
    66ca:	d10e      	bne.n	66ea <f_write+0xc2>
				if (fp->fptr == 0) {		/* On the top of the file? */
    66cc:	2a00      	cmp	r2, #0
    66ce:	d000      	beq.n	66d2 <f_write+0xaa>
    66d0:	e0f7      	b.n	68c2 <f_write+0x29a>
					clst = fp->sclust;		/* Follow from the origin */
    66d2:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
    66d4:	2b00      	cmp	r3, #0
    66d6:	d100      	bne.n	66da <f_write+0xb2>
    66d8:	e105      	b.n	68e6 <f_write+0x2be>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    66da:	2b01      	cmp	r3, #1
    66dc:	d100      	bne.n	66e0 <f_write+0xb8>
    66de:	e10e      	b.n	68fe <f_write+0x2d6>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    66e0:	1c5a      	adds	r2, r3, #1
    66e2:	d100      	bne.n	66e6 <f_write+0xbe>
    66e4:	e111      	b.n	690a <f_write+0x2e2>
    66e6:	6820      	ldr	r0, [r4, #0]
				fp->clust = clst;			/* Update current cluster */
    66e8:	6163      	str	r3, [r4, #20]
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
    66ea:	2540      	movs	r5, #64	; 0x40
    66ec:	79a2      	ldrb	r2, [r4, #6]
    66ee:	4215      	tst	r5, r2
    66f0:	d000      	beq.n	66f4 <f_write+0xcc>
    66f2:	e0c6      	b.n	6882 <f_write+0x25a>
	clst -= 2;
    66f4:	6963      	ldr	r3, [r4, #20]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    66f6:	6981      	ldr	r1, [r0, #24]
	clst -= 2;
    66f8:	3b02      	subs	r3, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    66fa:	3902      	subs	r1, #2
    66fc:	428b      	cmp	r3, r1
    66fe:	d300      	bcc.n	6702 <f_write+0xda>
    6700:	e0f7      	b.n	68f2 <f_write+0x2ca>
	return clst * fs->csize + fs->database;
    6702:	6a85      	ldr	r5, [r0, #40]	; 0x28
    6704:	7881      	ldrb	r1, [r0, #2]
    6706:	46aa      	mov	sl, r5
    6708:	434b      	muls	r3, r1
    670a:	9301      	str	r3, [sp, #4]
    670c:	4453      	add	r3, sl
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    670e:	2b00      	cmp	r3, #0
    6710:	d100      	bne.n	6714 <f_write+0xec>
    6712:	e0ee      	b.n	68f2 <f_write+0x2ca>
			sect += csect;
    6714:	444b      	add	r3, r9
    6716:	9300      	str	r3, [sp, #0]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    6718:	4643      	mov	r3, r8
    671a:	0a5d      	lsrs	r5, r3, #9
			if (cc) {						/* Write maximum contiguous sectors directly */
    671c:	d046      	beq.n	67ac <f_write+0x184>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    671e:	464b      	mov	r3, r9
    6720:	195b      	adds	r3, r3, r5
    6722:	428b      	cmp	r3, r1
    6724:	d901      	bls.n	672a <f_write+0x102>
					cc = fp->fs->csize - csect;
    6726:	464b      	mov	r3, r9
    6728:	1acd      	subs	r5, r1, r3
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    672a:	b2eb      	uxtb	r3, r5
    672c:	7840      	ldrb	r0, [r0, #1]
    672e:	9a00      	ldr	r2, [sp, #0]
    6730:	0031      	movs	r1, r6
    6732:	4f7a      	ldr	r7, [pc, #488]	; (691c <f_write+0x2f4>)
    6734:	47b8      	blx	r7
    6736:	2800      	cmp	r0, #0
    6738:	d000      	beq.n	673c <f_write+0x114>
    673a:	e0bb      	b.n	68b4 <f_write+0x28c>
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
    673c:	69a3      	ldr	r3, [r4, #24]
    673e:	9a00      	ldr	r2, [sp, #0]
    6740:	1a9f      	subs	r7, r3, r2
    6742:	42bd      	cmp	r5, r7
    6744:	d92f      	bls.n	67a6 <f_write+0x17e>
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
    6746:	027f      	lsls	r7, r7, #9
    6748:	19f1      	adds	r1, r6, r7
    674a:	9100      	str	r1, [sp, #0]
    674c:	4649      	mov	r1, r9
    674e:	1a5b      	subs	r3, r3, r1
    6750:	4651      	mov	r1, sl
    6752:	0022      	movs	r2, r4
    6754:	0007      	movs	r7, r0
    6756:	1a5b      	subs	r3, r3, r1
    6758:	9901      	ldr	r1, [sp, #4]
    675a:	3224      	adds	r2, #36	; 0x24
    675c:	1a5b      	subs	r3, r3, r1
    675e:	025b      	lsls	r3, r3, #9
    6760:	18f1      	adds	r1, r6, r3
    6762:	3304      	adds	r3, #4
    6764:	18f3      	adds	r3, r6, r3
    6766:	429a      	cmp	r2, r3
    6768:	4147      	adcs	r7, r0
    676a:	003b      	movs	r3, r7
    676c:	2728      	movs	r7, #40	; 0x28
    676e:	46bc      	mov	ip, r7
    6770:	44a4      	add	ip, r4
    6772:	4667      	mov	r7, ip
    6774:	42b9      	cmp	r1, r7
    6776:	4140      	adcs	r0, r0
    6778:	4318      	orrs	r0, r3
    677a:	b2c0      	uxtb	r0, r0
    677c:	2800      	cmp	r0, #0
    677e:	d100      	bne.n	6782 <f_write+0x15a>
    6780:	e0a7      	b.n	68d2 <f_write+0x2aa>
    6782:	0013      	movs	r3, r2
    6784:	430b      	orrs	r3, r1
    6786:	079b      	lsls	r3, r3, #30
    6788:	d000      	beq.n	678c <f_write+0x164>
    678a:	e0a2      	b.n	68d2 <f_write+0x2aa>
    678c:	0013      	movs	r3, r2
    678e:	000a      	movs	r2, r1
    6790:	2189      	movs	r1, #137	; 0x89
    6792:	0089      	lsls	r1, r1, #2
    6794:	1860      	adds	r0, r4, r1
		*d++ = *s++;
    6796:	ca02      	ldmia	r2!, {r1}
    6798:	c302      	stmia	r3!, {r1}
    679a:	4283      	cmp	r3, r0
    679c:	d1fb      	bne.n	6796 <f_write+0x16e>
					fp->flag &= ~FA__DIRTY;
    679e:	2240      	movs	r2, #64	; 0x40
    67a0:	79a3      	ldrb	r3, [r4, #6]
    67a2:	4393      	bics	r3, r2
    67a4:	71a3      	strb	r3, [r4, #6]
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    67a6:	026d      	lsls	r5, r5, #9
    67a8:	68a3      	ldr	r3, [r4, #8]
				continue;
    67aa:	e051      	b.n	6850 <f_write+0x228>
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
    67ac:	69a3      	ldr	r3, [r4, #24]
    67ae:	9a00      	ldr	r2, [sp, #0]
    67b0:	429a      	cmp	r2, r3
    67b2:	d07d      	beq.n	68b0 <f_write+0x288>
				if (fp->fptr < fp->fsize &&
    67b4:	68a3      	ldr	r3, [r4, #8]
    67b6:	68e2      	ldr	r2, [r4, #12]
    67b8:	4293      	cmp	r3, r2
    67ba:	d370      	bcc.n	689e <f_write+0x276>
			fp->dsect = sect;
    67bc:	9a00      	ldr	r2, [sp, #0]
    67be:	05db      	lsls	r3, r3, #23
    67c0:	61a2      	str	r2, [r4, #24]
    67c2:	0ddb      	lsrs	r3, r3, #23
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    67c4:	2580      	movs	r5, #128	; 0x80
    67c6:	00ad      	lsls	r5, r5, #2
    67c8:	1aed      	subs	r5, r5, r3
    67ca:	4545      	cmp	r5, r8
    67cc:	d900      	bls.n	67d0 <f_write+0x1a8>
    67ce:	4645      	mov	r5, r8
    67d0:	2100      	movs	r1, #0
    67d2:	000f      	movs	r7, r1
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    67d4:	001a      	movs	r2, r3
    67d6:	3328      	adds	r3, #40	; 0x28
    67d8:	18e3      	adds	r3, r4, r3
    67da:	429e      	cmp	r6, r3
    67dc:	414f      	adcs	r7, r1
    67de:	3224      	adds	r2, #36	; 0x24
    67e0:	003b      	movs	r3, r7
    67e2:	18a2      	adds	r2, r4, r2
    67e4:	1d37      	adds	r7, r6, #4
    67e6:	42ba      	cmp	r2, r7
    67e8:	4149      	adcs	r1, r1
    67ea:	4319      	orrs	r1, r3
    67ec:	2309      	movs	r3, #9
    67ee:	42ab      	cmp	r3, r5
    67f0:	419b      	sbcs	r3, r3
    67f2:	425b      	negs	r3, r3
	while (cnt--)
    67f4:	1e68      	subs	r0, r5, #1
    67f6:	420b      	tst	r3, r1
    67f8:	d03c      	beq.n	6874 <f_write+0x24c>
    67fa:	0013      	movs	r3, r2
    67fc:	4333      	orrs	r3, r6
    67fe:	079b      	lsls	r3, r3, #30
    6800:	d138      	bne.n	6874 <f_write+0x24c>
    6802:	1f2b      	subs	r3, r5, #4
    6804:	089b      	lsrs	r3, r3, #2
    6806:	3301      	adds	r3, #1
    6808:	0099      	lsls	r1, r3, #2
    680a:	468c      	mov	ip, r1
    680c:	2802      	cmp	r0, #2
    680e:	d92f      	bls.n	6870 <f_write+0x248>
    6810:	2100      	movs	r1, #0
    6812:	2700      	movs	r7, #0
    6814:	4681      	mov	r9, r0
		*d++ = *s++;
    6816:	5870      	ldr	r0, [r6, r1]
    6818:	3701      	adds	r7, #1
    681a:	5050      	str	r0, [r2, r1]
    681c:	3104      	adds	r1, #4
    681e:	42bb      	cmp	r3, r7
    6820:	d8f9      	bhi.n	6816 <f_write+0x1ee>
    6822:	4648      	mov	r0, r9
    6824:	4663      	mov	r3, ip
    6826:	4661      	mov	r1, ip
    6828:	4462      	add	r2, ip
    682a:	18f3      	adds	r3, r6, r3
    682c:	1a40      	subs	r0, r0, r1
    682e:	45ac      	cmp	ip, r5
    6830:	d009      	beq.n	6846 <f_write+0x21e>
    6832:	7819      	ldrb	r1, [r3, #0]
    6834:	7011      	strb	r1, [r2, #0]
	while (cnt--)
    6836:	2800      	cmp	r0, #0
    6838:	d005      	beq.n	6846 <f_write+0x21e>
		*d++ = *s++;
    683a:	7859      	ldrb	r1, [r3, #1]
    683c:	7051      	strb	r1, [r2, #1]
	while (cnt--)
    683e:	2801      	cmp	r0, #1
    6840:	d001      	beq.n	6846 <f_write+0x21e>
		*d++ = *s++;
    6842:	789b      	ldrb	r3, [r3, #2]
    6844:	7093      	strb	r3, [r2, #2]
		fp->flag |= FA__DIRTY;
    6846:	2140      	movs	r1, #64	; 0x40
    6848:	79a2      	ldrb	r2, [r4, #6]
    684a:	68a3      	ldr	r3, [r4, #8]
    684c:	430a      	orrs	r2, r1
    684e:	71a2      	strb	r2, [r4, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    6850:	18eb      	adds	r3, r5, r3
    6852:	60a3      	str	r3, [r4, #8]
    6854:	465b      	mov	r3, fp
    6856:	465a      	mov	r2, fp
    6858:	681b      	ldr	r3, [r3, #0]
    685a:	1976      	adds	r6, r6, r5
    685c:	195b      	adds	r3, r3, r5
    685e:	6013      	str	r3, [r2, #0]
    6860:	4643      	mov	r3, r8
    6862:	1b5b      	subs	r3, r3, r5
    6864:	4698      	mov	r8, r3
	for ( ;  btw;							/* Repeat until all data written */
    6866:	d000      	beq.n	686a <f_write+0x242>
    6868:	e722      	b.n	66b0 <f_write+0x88>
    686a:	68e2      	ldr	r2, [r4, #12]
    686c:	79a3      	ldrb	r3, [r4, #6]
    686e:	e710      	b.n	6692 <f_write+0x6a>
	while (cnt--)
    6870:	0033      	movs	r3, r6
    6872:	e7de      	b.n	6832 <f_write+0x20a>
    6874:	2300      	movs	r3, #0
		*d++ = *s++;
    6876:	5cf1      	ldrb	r1, [r6, r3]
    6878:	54d1      	strb	r1, [r2, r3]
    687a:	3301      	adds	r3, #1
	while (cnt--)
    687c:	429d      	cmp	r5, r3
    687e:	d1fa      	bne.n	6876 <f_write+0x24e>
    6880:	e7e1      	b.n	6846 <f_write+0x21e>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    6882:	0021      	movs	r1, r4
    6884:	69a2      	ldr	r2, [r4, #24]
    6886:	7840      	ldrb	r0, [r0, #1]
    6888:	2301      	movs	r3, #1
    688a:	3124      	adds	r1, #36	; 0x24
    688c:	4f23      	ldr	r7, [pc, #140]	; (691c <f_write+0x2f4>)
    688e:	47b8      	blx	r7
					ABORT(fp->fs, FR_DISK_ERR);
    6890:	79a2      	ldrb	r2, [r4, #6]
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    6892:	2800      	cmp	r0, #0
    6894:	d10f      	bne.n	68b6 <f_write+0x28e>
				fp->flag &= ~FA__DIRTY;
    6896:	43aa      	bics	r2, r5
    6898:	71a2      	strb	r2, [r4, #6]
    689a:	6820      	ldr	r0, [r4, #0]
    689c:	e72a      	b.n	66f4 <f_write+0xcc>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
    689e:	0021      	movs	r1, r4
    68a0:	7840      	ldrb	r0, [r0, #1]
    68a2:	2301      	movs	r3, #1
    68a4:	9a00      	ldr	r2, [sp, #0]
    68a6:	3124      	adds	r1, #36	; 0x24
    68a8:	4d1d      	ldr	r5, [pc, #116]	; (6920 <f_write+0x2f8>)
    68aa:	47a8      	blx	r5
				if (fp->fptr < fp->fsize &&
    68ac:	2800      	cmp	r0, #0
    68ae:	d101      	bne.n	68b4 <f_write+0x28c>
    68b0:	68a3      	ldr	r3, [r4, #8]
    68b2:	e783      	b.n	67bc <f_write+0x194>
					ABORT(fp->fs, FR_DISK_ERR);
    68b4:	79a2      	ldrb	r2, [r4, #6]
    68b6:	2380      	movs	r3, #128	; 0x80
    68b8:	425b      	negs	r3, r3
    68ba:	4313      	orrs	r3, r2
    68bc:	71a3      	strb	r3, [r4, #6]
    68be:	2001      	movs	r0, #1
    68c0:	e6c7      	b.n	6652 <f_write+0x2a>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    68c2:	4b18      	ldr	r3, [pc, #96]	; (6924 <f_write+0x2fc>)
    68c4:	6961      	ldr	r1, [r4, #20]
    68c6:	4798      	blx	r3
    68c8:	0003      	movs	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    68ca:	2b00      	cmp	r3, #0
    68cc:	d000      	beq.n	68d0 <f_write+0x2a8>
    68ce:	e704      	b.n	66da <f_write+0xb2>
    68d0:	e7cb      	b.n	686a <f_write+0x242>
	while (cnt--)
    68d2:	2080      	movs	r0, #128	; 0x80
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
    68d4:	2300      	movs	r3, #0
	while (cnt--)
    68d6:	9f00      	ldr	r7, [sp, #0]
    68d8:	0080      	lsls	r0, r0, #2
		*d++ = *s++;
    68da:	5cf9      	ldrb	r1, [r7, r3]
    68dc:	54d1      	strb	r1, [r2, r3]
    68de:	3301      	adds	r3, #1
	while (cnt--)
    68e0:	4283      	cmp	r3, r0
    68e2:	d1fa      	bne.n	68da <f_write+0x2b2>
    68e4:	e75b      	b.n	679e <f_write+0x176>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    68e6:	4b0f      	ldr	r3, [pc, #60]	; (6924 <f_write+0x2fc>)
    68e8:	2100      	movs	r1, #0
    68ea:	4798      	blx	r3
    68ec:	0003      	movs	r3, r0
    68ee:	6120      	str	r0, [r4, #16]
    68f0:	e7eb      	b.n	68ca <f_write+0x2a2>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    68f2:	2380      	movs	r3, #128	; 0x80
    68f4:	425b      	negs	r3, r3
    68f6:	431a      	orrs	r2, r3
    68f8:	71a2      	strb	r2, [r4, #6]
    68fa:	2002      	movs	r0, #2
    68fc:	e6a9      	b.n	6652 <f_write+0x2a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    68fe:	79a2      	ldrb	r2, [r4, #6]
    6900:	3b81      	subs	r3, #129	; 0x81
    6902:	4313      	orrs	r3, r2
    6904:	71a3      	strb	r3, [r4, #6]
    6906:	2002      	movs	r0, #2
    6908:	e6a3      	b.n	6652 <f_write+0x2a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    690a:	79a2      	ldrb	r2, [r4, #6]
    690c:	3b7f      	subs	r3, #127	; 0x7f
    690e:	4313      	orrs	r3, r2
    6910:	71a3      	strb	r3, [r4, #6]
    6912:	2001      	movs	r0, #1
    6914:	e69d      	b.n	6652 <f_write+0x2a>
    6916:	46c0      	nop			; (mov r8, r8)
    6918:	00003d1d 	.word	0x00003d1d
    691c:	00003dc1 	.word	0x00003dc1
    6920:	00003d3d 	.word	0x00003d3d
    6924:	00004b51 	.word	0x00004b51

00006928 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    6928:	b5f0      	push	{r4, r5, r6, r7, lr}
    692a:	46d6      	mov	lr, sl
    692c:	464f      	mov	r7, r9
    692e:	4646      	mov	r6, r8
    6930:	b5c0      	push	{r6, r7, lr}
	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    6932:	6803      	ldr	r3, [r0, #0]
{
    6934:	0004      	movs	r4, r0
	if (!fs || !fs->fs_type || fs->id != id)
    6936:	2b00      	cmp	r3, #0
    6938:	d063      	beq.n	6a02 <f_close+0xda>
    693a:	781a      	ldrb	r2, [r3, #0]
		return FR_INVALID_OBJECT;
    693c:	2009      	movs	r0, #9
	if (!fs || !fs->fs_type || fs->id != id)
    693e:	2a00      	cmp	r2, #0
    6940:	d104      	bne.n	694c <f_close+0x24>
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	return res;
#endif
}
    6942:	bc1c      	pop	{r2, r3, r4}
    6944:	4690      	mov	r8, r2
    6946:	4699      	mov	r9, r3
    6948:	46a2      	mov	sl, r4
    694a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!fs || !fs->fs_type || fs->id != id)
    694c:	88a1      	ldrh	r1, [r4, #4]
    694e:	88da      	ldrh	r2, [r3, #6]
    6950:	4291      	cmp	r1, r2
    6952:	d1f6      	bne.n	6942 <f_close+0x1a>
	if (disk_status(fs->drv) & STA_NOINIT)
    6954:	7858      	ldrb	r0, [r3, #1]
    6956:	4b44      	ldr	r3, [pc, #272]	; (6a68 <f_close+0x140>)
    6958:	4798      	blx	r3
    695a:	0003      	movs	r3, r0
		return FR_NOT_READY;
    695c:	2003      	movs	r0, #3
	if (disk_status(fs->drv) & STA_NOINIT)
    695e:	07db      	lsls	r3, r3, #31
    6960:	d4ef      	bmi.n	6942 <f_close+0x1a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    6962:	79a3      	ldrb	r3, [r4, #6]
    6964:	069a      	lsls	r2, r3, #26
    6966:	d548      	bpl.n	69fa <f_close+0xd2>
			if (fp->flag & FA__DIRTY) {
    6968:	2540      	movs	r5, #64	; 0x40
    696a:	421d      	tst	r5, r3
    696c:	d00c      	beq.n	6988 <f_close+0x60>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    696e:	0021      	movs	r1, r4
    6970:	6823      	ldr	r3, [r4, #0]
    6972:	69a2      	ldr	r2, [r4, #24]
    6974:	7858      	ldrb	r0, [r3, #1]
    6976:	3124      	adds	r1, #36	; 0x24
    6978:	2301      	movs	r3, #1
    697a:	4e3c      	ldr	r6, [pc, #240]	; (6a6c <f_close+0x144>)
    697c:	47b0      	blx	r6
    697e:	2800      	cmp	r0, #0
    6980:	d14d      	bne.n	6a1e <f_close+0xf6>
				fp->flag &= ~FA__DIRTY;
    6982:	79a3      	ldrb	r3, [r4, #6]
    6984:	43ab      	bics	r3, r5
    6986:	71a3      	strb	r3, [r4, #6]
			res = move_window(fp->fs, fp->dir_sect);
    6988:	6825      	ldr	r5, [r4, #0]
    698a:	69e3      	ldr	r3, [r4, #28]
	wsect = fs->winsect;
    698c:	6aee      	ldr	r6, [r5, #44]	; 0x2c
			res = move_window(fp->fs, fp->dir_sect);
    698e:	4698      	mov	r8, r3
	if (wsect != sector) {	/* Changed current window */
    6990:	42b3      	cmp	r3, r6
    6992:	d005      	beq.n	69a0 <f_close+0x78>
		if (fs->wflag) {	/* Write back dirty window if needed */
    6994:	792b      	ldrb	r3, [r5, #4]
    6996:	2b00      	cmp	r3, #0
    6998:	d135      	bne.n	6a06 <f_close+0xde>
		if (sector) {
    699a:	4643      	mov	r3, r8
    699c:	2b00      	cmp	r3, #0
    699e:	d140      	bne.n	6a22 <f_close+0xfa>
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    69a0:	2220      	movs	r2, #32
				dir = fp->dir_ptr;
    69a2:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    69a4:	7aeb      	ldrb	r3, [r5, #11]
    69a6:	4313      	orrs	r3, r2
    69a8:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    69aa:	7b23      	ldrb	r3, [r4, #12]
    69ac:	772b      	strb	r3, [r5, #28]
    69ae:	89a3      	ldrh	r3, [r4, #12]
    69b0:	0a1b      	lsrs	r3, r3, #8
    69b2:	776b      	strb	r3, [r5, #29]
    69b4:	89e3      	ldrh	r3, [r4, #14]
    69b6:	77ab      	strb	r3, [r5, #30]
    69b8:	7be3      	ldrb	r3, [r4, #15]
    69ba:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
    69bc:	7c23      	ldrb	r3, [r4, #16]
    69be:	76ab      	strb	r3, [r5, #26]
    69c0:	8a23      	ldrh	r3, [r4, #16]
    69c2:	0a1b      	lsrs	r3, r3, #8
    69c4:	76eb      	strb	r3, [r5, #27]
    69c6:	8a63      	ldrh	r3, [r4, #18]
    69c8:	752b      	strb	r3, [r5, #20]
    69ca:	8a63      	ldrh	r3, [r4, #18]
    69cc:	0a1b      	lsrs	r3, r3, #8
    69ce:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
    69d0:	4b27      	ldr	r3, [pc, #156]	; (6a70 <f_close+0x148>)
    69d2:	4798      	blx	r3
				fp->flag &= ~FA__WRITTEN;
    69d4:	2220      	movs	r2, #32
				ST_DWORD(dir+DIR_WrtTime, tim);
    69d6:	0a03      	lsrs	r3, r0, #8
    69d8:	75a8      	strb	r0, [r5, #22]
    69da:	75eb      	strb	r3, [r5, #23]
    69dc:	0c03      	lsrs	r3, r0, #16
    69de:	0e00      	lsrs	r0, r0, #24
    69e0:	762b      	strb	r3, [r5, #24]
    69e2:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
    69e4:	79a3      	ldrb	r3, [r4, #6]
    69e6:	4393      	bics	r3, r2
    69e8:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
    69ea:	2301      	movs	r3, #1
    69ec:	6822      	ldr	r2, [r4, #0]
    69ee:	7113      	strb	r3, [r2, #4]
				res = sync(fp->fs);
    69f0:	6820      	ldr	r0, [r4, #0]
    69f2:	4b20      	ldr	r3, [pc, #128]	; (6a74 <f_close+0x14c>)
    69f4:	4798      	blx	r3
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    69f6:	2800      	cmp	r0, #0
    69f8:	d1a3      	bne.n	6942 <f_close+0x1a>
    69fa:	2300      	movs	r3, #0
    69fc:	2000      	movs	r0, #0
    69fe:	6023      	str	r3, [r4, #0]
    6a00:	e79f      	b.n	6942 <f_close+0x1a>
		return FR_INVALID_OBJECT;
    6a02:	2009      	movs	r0, #9
    6a04:	e79d      	b.n	6942 <f_close+0x1a>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    6a06:	2330      	movs	r3, #48	; 0x30
    6a08:	4699      	mov	r9, r3
    6a0a:	4f18      	ldr	r7, [pc, #96]	; (6a6c <f_close+0x144>)
    6a0c:	44a9      	add	r9, r5
    6a0e:	7868      	ldrb	r0, [r5, #1]
    6a10:	3b2f      	subs	r3, #47	; 0x2f
    6a12:	0032      	movs	r2, r6
    6a14:	4649      	mov	r1, r9
    6a16:	46ba      	mov	sl, r7
    6a18:	47b8      	blx	r7
    6a1a:	2800      	cmp	r0, #0
    6a1c:	d00d      	beq.n	6a3a <f_close+0x112>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
    6a1e:	2001      	movs	r0, #1
    6a20:	e78f      	b.n	6942 <f_close+0x1a>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    6a22:	0029      	movs	r1, r5
    6a24:	7868      	ldrb	r0, [r5, #1]
    6a26:	2301      	movs	r3, #1
    6a28:	4642      	mov	r2, r8
    6a2a:	3130      	adds	r1, #48	; 0x30
    6a2c:	4e12      	ldr	r6, [pc, #72]	; (6a78 <f_close+0x150>)
    6a2e:	47b0      	blx	r6
    6a30:	2800      	cmp	r0, #0
    6a32:	d1f4      	bne.n	6a1e <f_close+0xf6>
			fs->winsect = sector;
    6a34:	4643      	mov	r3, r8
    6a36:	62eb      	str	r3, [r5, #44]	; 0x2c
    6a38:	e7b2      	b.n	69a0 <f_close+0x78>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    6a3a:	69eb      	ldr	r3, [r5, #28]
    6a3c:	6a2a      	ldr	r2, [r5, #32]
			fs->wflag = 0;
    6a3e:	7128      	strb	r0, [r5, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    6a40:	189a      	adds	r2, r3, r2
    6a42:	4296      	cmp	r6, r2
    6a44:	d2a9      	bcs.n	699a <f_close+0x72>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    6a46:	78ef      	ldrb	r7, [r5, #3]
    6a48:	2f01      	cmp	r7, #1
    6a4a:	d801      	bhi.n	6a50 <f_close+0x128>
    6a4c:	e7a5      	b.n	699a <f_close+0x72>
    6a4e:	69eb      	ldr	r3, [r5, #28]
					wsect += fs->fsize;
    6a50:	18f6      	adds	r6, r6, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    6a52:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    6a54:	7868      	ldrb	r0, [r5, #1]
    6a56:	2301      	movs	r3, #1
    6a58:	0032      	movs	r2, r6
    6a5a:	4649      	mov	r1, r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    6a5c:	b2ff      	uxtb	r7, r7
					disk_write(fs->drv, fs->win, wsect, 1);
    6a5e:	47d0      	blx	sl
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    6a60:	2f01      	cmp	r7, #1
    6a62:	d1f4      	bne.n	6a4e <f_close+0x126>
    6a64:	e799      	b.n	699a <f_close+0x72>
    6a66:	46c0      	nop			; (mov r8, r8)
    6a68:	00003d1d 	.word	0x00003d1d
    6a6c:	00003dc1 	.word	0x00003dc1
    6a70:	00003eb1 	.word	0x00003eb1
    6a74:	00003f8d 	.word	0x00003f8d
    6a78:	00003d3d 	.word	0x00003d3d

00006a7c <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    6a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6a7e:	4646      	mov	r6, r8
    6a80:	46d6      	mov	lr, sl
    6a82:	464f      	mov	r7, r9
    6a84:	b5c0      	push	{r6, r7, lr}
	FRESULT res;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    6a86:	6803      	ldr	r3, [r0, #0]
{
    6a88:	0004      	movs	r4, r0
    6a8a:	000e      	movs	r6, r1
	if (!fs || !fs->fs_type || fs->id != id)
    6a8c:	2b00      	cmp	r3, #0
    6a8e:	d100      	bne.n	6a92 <f_lseek+0x16>
    6a90:	e078      	b.n	6b84 <f_lseek+0x108>
    6a92:	781a      	ldrb	r2, [r3, #0]
		return FR_INVALID_OBJECT;
    6a94:	2009      	movs	r0, #9
	if (!fs || !fs->fs_type || fs->id != id)
    6a96:	2a00      	cmp	r2, #0
    6a98:	d104      	bne.n	6aa4 <f_lseek+0x28>
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    6a9a:	bc1c      	pop	{r2, r3, r4}
    6a9c:	4690      	mov	r8, r2
    6a9e:	4699      	mov	r9, r3
    6aa0:	46a2      	mov	sl, r4
    6aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!fs || !fs->fs_type || fs->id != id)
    6aa4:	88a1      	ldrh	r1, [r4, #4]
    6aa6:	88da      	ldrh	r2, [r3, #6]
    6aa8:	4291      	cmp	r1, r2
    6aaa:	d1f6      	bne.n	6a9a <f_lseek+0x1e>
	if (disk_status(fs->drv) & STA_NOINIT)
    6aac:	7858      	ldrb	r0, [r3, #1]
    6aae:	4b65      	ldr	r3, [pc, #404]	; (6c44 <f_lseek+0x1c8>)
    6ab0:	4798      	blx	r3
    6ab2:	0003      	movs	r3, r0
		return FR_NOT_READY;
    6ab4:	2003      	movs	r0, #3
	if (disk_status(fs->drv) & STA_NOINIT)
    6ab6:	07db      	lsls	r3, r3, #31
    6ab8:	d4ef      	bmi.n	6a9a <f_lseek+0x1e>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    6aba:	79a3      	ldrb	r3, [r4, #6]
		LEAVE_FF(fp->fs, FR_INT_ERR);
    6abc:	2002      	movs	r0, #2
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    6abe:	b25a      	sxtb	r2, r3
    6ac0:	2a00      	cmp	r2, #0
    6ac2:	dbea      	blt.n	6a9a <f_lseek+0x1e>
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    6ac4:	68e2      	ldr	r2, [r4, #12]
    6ac6:	42b2      	cmp	r2, r6
    6ac8:	d202      	bcs.n	6ad0 <f_lseek+0x54>
			 && !(fp->flag & FA_WRITE)
    6aca:	4218      	tst	r0, r3
    6acc:	d100      	bne.n	6ad0 <f_lseek+0x54>
    6ace:	0016      	movs	r6, r2
		fp->fptr = nsect = 0;
    6ad0:	2300      	movs	r3, #0
		ifptr = fp->fptr;
    6ad2:	68a5      	ldr	r5, [r4, #8]
    6ad4:	2000      	movs	r0, #0
		fp->fptr = nsect = 0;
    6ad6:	60a3      	str	r3, [r4, #8]
		if (ofs) {
    6ad8:	2e00      	cmp	r6, #0
    6ada:	d0de      	beq.n	6a9a <f_lseek+0x1e>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    6adc:	6823      	ldr	r3, [r4, #0]
    6ade:	789f      	ldrb	r7, [r3, #2]
    6ae0:	4698      	mov	r8, r3
    6ae2:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
    6ae4:	2d00      	cmp	r5, #0
    6ae6:	d011      	beq.n	6b0c <f_lseek+0x90>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    6ae8:	4b57      	ldr	r3, [pc, #348]	; (6c48 <f_lseek+0x1cc>)
    6aea:	0039      	movs	r1, r7
    6aec:	1e70      	subs	r0, r6, #1
    6aee:	4699      	mov	r9, r3
    6af0:	4798      	blx	r3
    6af2:	3d01      	subs	r5, #1
    6af4:	4682      	mov	sl, r0
    6af6:	0039      	movs	r1, r7
    6af8:	0028      	movs	r0, r5
    6afa:	47c8      	blx	r9
			if (ifptr > 0 &&
    6afc:	4582      	cmp	sl, r0
    6afe:	d305      	bcc.n	6b0c <f_lseek+0x90>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    6b00:	427a      	negs	r2, r7
    6b02:	402a      	ands	r2, r5
    6b04:	60a2      	str	r2, [r4, #8]
				ofs -= fp->fptr;
    6b06:	1ab6      	subs	r6, r6, r2
				clst = fp->clust;
    6b08:	6965      	ldr	r5, [r4, #20]
    6b0a:	e003      	b.n	6b14 <f_lseek+0x98>
				clst = fp->sclust;						/* start from the first cluster */
    6b0c:	6925      	ldr	r5, [r4, #16]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    6b0e:	2d00      	cmp	r5, #0
    6b10:	d07c      	beq.n	6c0c <f_lseek+0x190>
				fp->clust = clst;
    6b12:	6165      	str	r5, [r4, #20]
			if (clst != 0) {
    6b14:	2d00      	cmp	r5, #0
    6b16:	d137      	bne.n	6b88 <f_lseek+0x10c>
    6b18:	68a3      	ldr	r3, [r4, #8]
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    6b1a:	05da      	lsls	r2, r3, #23
    6b1c:	d021      	beq.n	6b62 <f_lseek+0xe6>
    6b1e:	69a2      	ldr	r2, [r4, #24]
    6b20:	4295      	cmp	r5, r2
    6b22:	d01e      	beq.n	6b62 <f_lseek+0xe6>
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
    6b24:	2340      	movs	r3, #64	; 0x40
    6b26:	4699      	mov	r9, r3
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    6b28:	0026      	movs	r6, r4
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
    6b2a:	4649      	mov	r1, r9
    6b2c:	79a3      	ldrb	r3, [r4, #6]
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    6b2e:	3624      	adds	r6, #36	; 0x24
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
    6b30:	4219      	tst	r1, r3
    6b32:	d00b      	beq.n	6b4c <f_lseek+0xd0>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    6b34:	6823      	ldr	r3, [r4, #0]
    6b36:	0031      	movs	r1, r6
    6b38:	7858      	ldrb	r0, [r3, #1]
    6b3a:	4f44      	ldr	r7, [pc, #272]	; (6c4c <f_lseek+0x1d0>)
    6b3c:	2301      	movs	r3, #1
    6b3e:	47b8      	blx	r7
    6b40:	2800      	cmp	r0, #0
    6b42:	d118      	bne.n	6b76 <f_lseek+0xfa>
				fp->flag &= ~FA__DIRTY;
    6b44:	464a      	mov	r2, r9
    6b46:	79a3      	ldrb	r3, [r4, #6]
    6b48:	4393      	bics	r3, r2
    6b4a:	71a3      	strb	r3, [r4, #6]
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
    6b4c:	6823      	ldr	r3, [r4, #0]
    6b4e:	0031      	movs	r1, r6
    6b50:	7858      	ldrb	r0, [r3, #1]
    6b52:	002a      	movs	r2, r5
    6b54:	2301      	movs	r3, #1
    6b56:	4e3e      	ldr	r6, [pc, #248]	; (6c50 <f_lseek+0x1d4>)
    6b58:	47b0      	blx	r6
    6b5a:	2800      	cmp	r0, #0
    6b5c:	d10b      	bne.n	6b76 <f_lseek+0xfa>
    6b5e:	68a3      	ldr	r3, [r4, #8]
			fp->dsect = nsect;
    6b60:	61a5      	str	r5, [r4, #24]
    6b62:	68e2      	ldr	r2, [r4, #12]
    6b64:	2000      	movs	r0, #0
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
    6b66:	4293      	cmp	r3, r2
    6b68:	d997      	bls.n	6a9a <f_lseek+0x1e>
			fp->flag |= FA__WRITTEN;
    6b6a:	2220      	movs	r2, #32
			fp->fsize = fp->fptr;
    6b6c:	60e3      	str	r3, [r4, #12]
			fp->flag |= FA__WRITTEN;
    6b6e:	79a3      	ldrb	r3, [r4, #6]
    6b70:	4313      	orrs	r3, r2
    6b72:	71a3      	strb	r3, [r4, #6]
    6b74:	e791      	b.n	6a9a <f_lseek+0x1e>
				ABORT(fp->fs, FR_DISK_ERR);
    6b76:	2380      	movs	r3, #128	; 0x80
    6b78:	79a2      	ldrb	r2, [r4, #6]
    6b7a:	425b      	negs	r3, r3
    6b7c:	4313      	orrs	r3, r2
    6b7e:	71a3      	strb	r3, [r4, #6]
    6b80:	2001      	movs	r0, #1
    6b82:	e78a      	b.n	6a9a <f_lseek+0x1e>
		return FR_INVALID_OBJECT;
    6b84:	2009      	movs	r0, #9
    6b86:	e788      	b.n	6a9a <f_lseek+0x1e>
				while (ofs > bcs) {						/* Cluster following loop */
    6b88:	42be      	cmp	r6, r7
    6b8a:	d958      	bls.n	6c3e <f_lseek+0x1c2>
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    6b8c:	2302      	movs	r3, #2
    6b8e:	4698      	mov	r8, r3
    6b90:	4b30      	ldr	r3, [pc, #192]	; (6c54 <f_lseek+0x1d8>)
    6b92:	6820      	ldr	r0, [r4, #0]
    6b94:	469a      	mov	sl, r3
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    6b96:	4b30      	ldr	r3, [pc, #192]	; (6c58 <f_lseek+0x1dc>)
    6b98:	4699      	mov	r9, r3
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    6b9a:	4642      	mov	r2, r8
    6b9c:	79a3      	ldrb	r3, [r4, #6]
    6b9e:	421a      	tst	r2, r3
    6ba0:	d10a      	bne.n	6bb8 <f_lseek+0x13c>
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    6ba2:	2d01      	cmp	r5, #1
    6ba4:	d902      	bls.n	6bac <f_lseek+0x130>
    6ba6:	6982      	ldr	r2, [r0, #24]
    6ba8:	42aa      	cmp	r2, r5
    6baa:	d82b      	bhi.n	6c04 <f_lseek+0x188>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    6bac:	2280      	movs	r2, #128	; 0x80
    6bae:	4252      	negs	r2, r2
    6bb0:	4313      	orrs	r3, r2
    6bb2:	71a3      	strb	r3, [r4, #6]
    6bb4:	2002      	movs	r0, #2
    6bb6:	e770      	b.n	6a9a <f_lseek+0x1e>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    6bb8:	0029      	movs	r1, r5
    6bba:	47c8      	blx	r9
    6bbc:	1e05      	subs	r5, r0, #0
						if (clst == 0) {				/* When disk gets full, clip file size */
    6bbe:	d03b      	beq.n	6c38 <f_lseek+0x1bc>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    6bc0:	1c6b      	adds	r3, r5, #1
    6bc2:	d0d8      	beq.n	6b76 <f_lseek+0xfa>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    6bc4:	2d01      	cmp	r5, #1
    6bc6:	d92c      	bls.n	6c22 <f_lseek+0x1a6>
    6bc8:	6820      	ldr	r0, [r4, #0]
    6bca:	6983      	ldr	r3, [r0, #24]
    6bcc:	429d      	cmp	r5, r3
    6bce:	d228      	bcs.n	6c22 <f_lseek+0x1a6>
					fp->fptr += bcs;
    6bd0:	68a3      	ldr	r3, [r4, #8]
					fp->clust = clst;
    6bd2:	6165      	str	r5, [r4, #20]
					fp->fptr += bcs;
    6bd4:	18fb      	adds	r3, r7, r3
    6bd6:	60a3      	str	r3, [r4, #8]
					ofs -= bcs;
    6bd8:	1bf6      	subs	r6, r6, r7
				while (ofs > bcs) {						/* Cluster following loop */
    6bda:	42b7      	cmp	r7, r6
    6bdc:	d3dd      	bcc.n	6b9a <f_lseek+0x11e>
				fp->fptr += ofs;
    6bde:	18f3      	adds	r3, r6, r3
    6be0:	60a3      	str	r3, [r4, #8]
				if (ofs % SS(fp->fs)) {
    6be2:	05f2      	lsls	r2, r6, #23
    6be4:	d026      	beq.n	6c34 <f_lseek+0x1b8>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    6be6:	6821      	ldr	r1, [r4, #0]
	clst -= 2;
    6be8:	3d02      	subs	r5, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    6bea:	698a      	ldr	r2, [r1, #24]
    6bec:	3a02      	subs	r2, #2
    6bee:	4295      	cmp	r5, r2
    6bf0:	d219      	bcs.n	6c26 <f_lseek+0x1aa>
	return clst * fs->csize + fs->database;
    6bf2:	788a      	ldrb	r2, [r1, #2]
    6bf4:	4355      	muls	r5, r2
    6bf6:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    6bf8:	18ad      	adds	r5, r5, r2
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    6bfa:	2d00      	cmp	r5, #0
    6bfc:	d013      	beq.n	6c26 <f_lseek+0x1aa>
					nsect += ofs / SS(fp->fs);
    6bfe:	0a76      	lsrs	r6, r6, #9
    6c00:	1975      	adds	r5, r6, r5
    6c02:	e78a      	b.n	6b1a <f_lseek+0x9e>
    6c04:	0029      	movs	r1, r5
    6c06:	47d0      	blx	sl
    6c08:	0005      	movs	r5, r0
    6c0a:	e7d9      	b.n	6bc0 <f_lseek+0x144>
					clst = create_chain(fp->fs, 0);
    6c0c:	2100      	movs	r1, #0
    6c0e:	4640      	mov	r0, r8
    6c10:	4b11      	ldr	r3, [pc, #68]	; (6c58 <f_lseek+0x1dc>)
    6c12:	4798      	blx	r3
    6c14:	0005      	movs	r5, r0
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    6c16:	2801      	cmp	r0, #1
    6c18:	d005      	beq.n	6c26 <f_lseek+0x1aa>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    6c1a:	1c43      	adds	r3, r0, #1
    6c1c:	d0ab      	beq.n	6b76 <f_lseek+0xfa>
					fp->sclust = clst;
    6c1e:	6120      	str	r0, [r4, #16]
    6c20:	e777      	b.n	6b12 <f_lseek+0x96>
    6c22:	79a3      	ldrb	r3, [r4, #6]
    6c24:	e7c2      	b.n	6bac <f_lseek+0x130>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    6c26:	2380      	movs	r3, #128	; 0x80
    6c28:	79a2      	ldrb	r2, [r4, #6]
    6c2a:	425b      	negs	r3, r3
    6c2c:	4313      	orrs	r3, r2
    6c2e:	71a3      	strb	r3, [r4, #6]
    6c30:	2002      	movs	r0, #2
    6c32:	e732      	b.n	6a9a <f_lseek+0x1e>
		fp->fptr = nsect = 0;
    6c34:	2500      	movs	r5, #0
    6c36:	e770      	b.n	6b1a <f_lseek+0x9e>
    6c38:	68a3      	ldr	r3, [r4, #8]
						if (clst == 0) {				/* When disk gets full, clip file size */
    6c3a:	003e      	movs	r6, r7
    6c3c:	e7cf      	b.n	6bde <f_lseek+0x162>
    6c3e:	68a3      	ldr	r3, [r4, #8]
    6c40:	e7cd      	b.n	6bde <f_lseek+0x162>
    6c42:	46c0      	nop			; (mov r8, r8)
    6c44:	00003d1d 	.word	0x00003d1d
    6c48:	0001bf8d 	.word	0x0001bf8d
    6c4c:	00003dc1 	.word	0x00003dc1
    6c50:	00003d3d 	.word	0x00003d3d
    6c54:	00004789 	.word	0x00004789
    6c58:	00004b51 	.word	0x00004b51

00006c5c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
    6c5c:	0003      	movs	r3, r0
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
    6c5e:	287f      	cmp	r0, #127	; 0x7f
    6c60:	d90e      	bls.n	6c80 <ff_convert+0x24>
		c = src;

	} else {
		if (dir) {		/* OEMCP to Unicode */
    6c62:	2900      	cmp	r1, #0
    6c64:	d10e      	bne.n	6c84 <ff_convert+0x28>
    6c66:	4a0c      	ldr	r2, [pc, #48]	; (6c98 <ff_convert+0x3c>)
    6c68:	2300      	movs	r3, #0
    6c6a:	e004      	b.n	6c76 <ff_convert+0x1a>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
    6c6c:	3301      	adds	r3, #1
    6c6e:	b29b      	uxth	r3, r3
    6c70:	3202      	adds	r2, #2
    6c72:	2b80      	cmp	r3, #128	; 0x80
    6c74:	d00e      	beq.n	6c94 <ff_convert+0x38>
				if (src == Tbl[c]) break;
    6c76:	8811      	ldrh	r1, [r2, #0]
    6c78:	4281      	cmp	r1, r0
    6c7a:	d1f7      	bne.n	6c6c <ff_convert+0x10>
    6c7c:	3380      	adds	r3, #128	; 0x80
    6c7e:	b29b      	uxth	r3, r3
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
    6c80:	0018      	movs	r0, r3
    6c82:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
    6c84:	2300      	movs	r3, #0
    6c86:	28ff      	cmp	r0, #255	; 0xff
    6c88:	d8fa      	bhi.n	6c80 <ff_convert+0x24>
    6c8a:	3880      	subs	r0, #128	; 0x80
    6c8c:	4b02      	ldr	r3, [pc, #8]	; (6c98 <ff_convert+0x3c>)
    6c8e:	0040      	lsls	r0, r0, #1
    6c90:	5ac3      	ldrh	r3, [r0, r3]
    6c92:	e7f5      	b.n	6c80 <ff_convert+0x24>
    6c94:	2300      	movs	r3, #0
    6c96:	e7f3      	b.n	6c80 <ff_convert+0x24>
    6c98:	000233b4 	.word	0x000233b4

00006c9c <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    6c9c:	2861      	cmp	r0, #97	; 0x61
    6c9e:	d010      	beq.n	6cc2 <ff_wtoupper+0x26>
    6ca0:	2101      	movs	r1, #1
    6ca2:	2262      	movs	r2, #98	; 0x62
    6ca4:	4b08      	ldr	r3, [pc, #32]	; (6cc8 <ff_wtoupper+0x2c>)
    6ca6:	3304      	adds	r3, #4
    6ca8:	4290      	cmp	r0, r2
    6caa:	d006      	beq.n	6cba <ff_wtoupper+0x1e>
    6cac:	3302      	adds	r3, #2
    6cae:	1e9a      	subs	r2, r3, #2
    6cb0:	8812      	ldrh	r2, [r2, #0]
    6cb2:	3101      	adds	r1, #1
    6cb4:	2a00      	cmp	r2, #0
    6cb6:	d1f7      	bne.n	6ca8 <ff_wtoupper+0xc>

	return tbl_lower[i] ? tbl_upper[i] : chr;
}
    6cb8:	4770      	bx	lr
    6cba:	4b04      	ldr	r3, [pc, #16]	; (6ccc <ff_wtoupper+0x30>)
    6cbc:	0049      	lsls	r1, r1, #1
    6cbe:	5ac8      	ldrh	r0, [r1, r3]
    6cc0:	e7fa      	b.n	6cb8 <ff_wtoupper+0x1c>
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    6cc2:	3820      	subs	r0, #32
    6cc4:	e7f8      	b.n	6cb8 <ff_wtoupper+0x1c>
    6cc6:	46c0      	nop			; (mov r8, r8)
    6cc8:	000234b4 	.word	0x000234b4
    6ccc:	00023694 	.word	0x00023694

00006cd0 <backlightCustomAdjust>:
//Backlight Settings
#define LED_MAX 225 //93%; limited by driver current limit per datasheet



struct BACKLIGHTCOLOR * backlightCustomAdjust(char refColor, int8_t adjustment){
    6cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    6cd2:	46de      	mov	lr, fp
    6cd4:	4657      	mov	r7, sl
    6cd6:	464e      	mov	r6, r9
    6cd8:	4645      	mov	r5, r8
    6cda:	b5e0      	push	{r5, r6, r7, lr}
    6cdc:	b087      	sub	sp, #28
	uint8_t * colorPtr;
	uint8_t maxRef;
	
	switch (refColor){
    6cde:	2862      	cmp	r0, #98	; 0x62
    6ce0:	d100      	bne.n	6ce4 <backlightCustomAdjust+0x14>
    6ce2:	e094      	b.n	6e0e <backlightCustomAdjust+0x13e>
    6ce4:	d800      	bhi.n	6ce8 <backlightCustomAdjust+0x18>
    6ce6:	e08b      	b.n	6e00 <backlightCustomAdjust+0x130>
    6ce8:	2867      	cmp	r0, #103	; 0x67
    6cea:	d100      	bne.n	6cee <backlightCustomAdjust+0x1e>
    6cec:	e078      	b.n	6de0 <backlightCustomAdjust+0x110>
    6cee:	2872      	cmp	r0, #114	; 0x72
    6cf0:	d000      	beq.n	6cf4 <backlightCustomAdjust+0x24>
    6cf2:	e085      	b.n	6e00 <backlightCustomAdjust+0x130>
		case 'r':
			colorPtr = &colorCustom.red;
    6cf4:	4b49      	ldr	r3, [pc, #292]	; (6e1c <backlightCustomAdjust+0x14c>)
			maxRef = options.backlight_setting.maxColor;
    6cf6:	4d4a      	ldr	r5, [pc, #296]	; (6e20 <backlightCustomAdjust+0x150>)
			colorPtr = &colorCustom.red;
    6cf8:	1d1a      	adds	r2, r3, #4
			maxRef = options.backlight_setting.maxColor;
    6cfa:	7c28      	ldrb	r0, [r5, #16]
			colorPtr = &colorCustom.red;
    6cfc:	9301      	str	r3, [sp, #4]
		default:
			colorPtr = &options.backlight_setting.brightness;
			maxRef = options.backlight_setting.maxBrightness;
	}
	
	if (adjustment>0){
    6cfe:	2900      	cmp	r1, #0
    6d00:	dc00      	bgt.n	6d04 <backlightCustomAdjust+0x34>
    6d02:	e075      	b.n	6df0 <backlightCustomAdjust+0x120>
		if (*colorPtr<maxRef){
    6d04:	7813      	ldrb	r3, [r2, #0]
    6d06:	4298      	cmp	r0, r3
    6d08:	d901      	bls.n	6d0e <backlightCustomAdjust+0x3e>
			*colorPtr = *colorPtr+adjustment;
		}
	}else if (adjustment<0){
		if (*colorPtr>0){
			*colorPtr = *colorPtr+adjustment;
    6d0a:	1859      	adds	r1, r3, r1
    6d0c:	7011      	strb	r1, [r2, #0]
void backlight_level(struct BACKLIGHT_SETTING *blset){
	uint8_t u8blue, u8green, u8red;
	float fred, fblue, fgreen;
	float scale;
	
	fred = colorOptions[blset->colorRef]->red;
    6d0e:	7cab      	ldrb	r3, [r5, #18]
    6d10:	4a44      	ldr	r2, [pc, #272]	; (6e24 <backlightCustomAdjust+0x154>)
    6d12:	009b      	lsls	r3, r3, #2
    6d14:	589f      	ldr	r7, [r3, r2]
    6d16:	4c44      	ldr	r4, [pc, #272]	; (6e28 <backlightCustomAdjust+0x158>)
    6d18:	7938      	ldrb	r0, [r7, #4]
    6d1a:	47a0      	blx	r4
    6d1c:	4680      	mov	r8, r0
	fgreen = colorOptions[blset->colorRef]->green;
    6d1e:	79b8      	ldrb	r0, [r7, #6]
    6d20:	47a0      	blx	r4
    6d22:	1c06      	adds	r6, r0, #0
	fblue = colorOptions[blset->colorRef]->blue;
    6d24:	7978      	ldrb	r0, [r7, #5]
    6d26:	47a0      	blx	r4
	
	
	
	scale = 1/(fred+fgreen+fblue);
    6d28:	4c40      	ldr	r4, [pc, #256]	; (6e2c <backlightCustomAdjust+0x15c>)
	fblue = colorOptions[blset->colorRef]->blue;
    6d2a:	1c07      	adds	r7, r0, #0
	scale = 1/(fred+fgreen+fblue);
    6d2c:	1c31      	adds	r1, r6, #0
    6d2e:	4640      	mov	r0, r8
    6d30:	47a0      	blx	r4
    6d32:	1c39      	adds	r1, r7, #0
    6d34:	47a0      	blx	r4
    6d36:	1c01      	adds	r1, r0, #0
    6d38:	20fe      	movs	r0, #254	; 0xfe
    6d3a:	4b3d      	ldr	r3, [pc, #244]	; (6e30 <backlightCustomAdjust+0x160>)
    6d3c:	0580      	lsls	r0, r0, #22
    6d3e:	469a      	mov	sl, r3
    6d40:	4798      	blx	r3
	scale = scale*blset->brightness/blset->maxBrightness;
    6d42:	4b3c      	ldr	r3, [pc, #240]	; (6e34 <backlightCustomAdjust+0x164>)
	scale = 1/(fred+fgreen+fblue);
    6d44:	4683      	mov	fp, r0
	scale = scale*blset->brightness/blset->maxBrightness;
    6d46:	7b28      	ldrb	r0, [r5, #12]
    6d48:	4699      	mov	r9, r3
    6d4a:	4798      	blx	r3
    6d4c:	4c3a      	ldr	r4, [pc, #232]	; (6e38 <backlightCustomAdjust+0x168>)
    6d4e:	1c01      	adds	r1, r0, #0
    6d50:	4658      	mov	r0, fp
    6d52:	47a0      	blx	r4
    6d54:	4683      	mov	fp, r0
    6d56:	7c68      	ldrb	r0, [r5, #17]
    6d58:	47c8      	blx	r9
    6d5a:	1c01      	adds	r1, r0, #0
    6d5c:	4658      	mov	r0, fp
    6d5e:	47d0      	blx	sl
	fred = scale*fred;
    6d60:	1c01      	adds	r1, r0, #0
	scale = scale*blset->brightness/blset->maxBrightness;
    6d62:	4681      	mov	r9, r0
	fred = scale*fred;
    6d64:	4640      	mov	r0, r8
    6d66:	47a0      	blx	r4
	fblue = scale*fblue;
	fgreen = scale*fgreen;
	
	u8red = fred*LED_MAX;
    6d68:	4934      	ldr	r1, [pc, #208]	; (6e3c <backlightCustomAdjust+0x16c>)
    6d6a:	47a0      	blx	r4
    6d6c:	4b34      	ldr	r3, [pc, #208]	; (6e40 <backlightCustomAdjust+0x170>)
	if (u8blue>LED_MAX){u8blue = LED_MAX;}
	if (u8blue>LED_MAX){u8blue = LED_MAX;}
	
	uint16_t mes_len = 10;
	uint8_t temp_buf[mes_len];
	temp_buf[0]= 0x80;  //control register 0b10000000
    6d6e:	ad03      	add	r5, sp, #12
	u8red = fred*LED_MAX;
    6d70:	469b      	mov	fp, r3
    6d72:	4798      	blx	r3
	fblue = scale*fblue;
    6d74:	4649      	mov	r1, r9
	u8red = fred*LED_MAX;
    6d76:	b2c3      	uxtb	r3, r0
	fblue = scale*fblue;
    6d78:	1c38      	adds	r0, r7, #0
	u8red = fred*LED_MAX;
    6d7a:	4698      	mov	r8, r3
	fblue = scale*fblue;
    6d7c:	47a0      	blx	r4
	u8blue = fblue*LED_MAX;
    6d7e:	492f      	ldr	r1, [pc, #188]	; (6e3c <backlightCustomAdjust+0x16c>)
    6d80:	47a0      	blx	r4
    6d82:	47d8      	blx	fp
	temp_buf[0]= 0x80;  //control register 0b10000000
    6d84:	2380      	movs	r3, #128	; 0x80
	u8blue = fblue*LED_MAX;
    6d86:	b2c0      	uxtb	r0, r0
	temp_buf[0]= 0x80;  //control register 0b10000000
    6d88:	702b      	strb	r3, [r5, #0]
	temp_buf[1]= 0x80; //Mode1: 0b10000000
    6d8a:	706b      	strb	r3, [r5, #1]
	temp_buf[2]= 0x08; //Mode2: 0b00001000
    6d8c:	3b78      	subs	r3, #120	; 0x78
    6d8e:	70ab      	strb	r3, [r5, #2]
	temp_buf[3]= u8blue; //PWM0 - blue
    6d90:	1c03      	adds	r3, r0, #0
    6d92:	28e1      	cmp	r0, #225	; 0xe1
    6d94:	d901      	bls.n	6d9a <backlightCustomAdjust+0xca>
    6d96:	4b2b      	ldr	r3, [pc, #172]	; (6e44 <backlightCustomAdjust+0x174>)
    6d98:	781b      	ldrb	r3, [r3, #0]
    6d9a:	70eb      	strb	r3, [r5, #3]
	fgreen = scale*fgreen;
    6d9c:	4649      	mov	r1, r9
    6d9e:	1c30      	adds	r0, r6, #0
    6da0:	47a0      	blx	r4
	u8green = fgreen*LED_MAX;
    6da2:	4926      	ldr	r1, [pc, #152]	; (6e3c <backlightCustomAdjust+0x16c>)
    6da4:	47a0      	blx	r4
    6da6:	47d8      	blx	fp
	temp_buf[4]= u8green; //PWM1 - green
	temp_buf[5]= u8red; //PWM2 - red
    6da8:	4642      	mov	r2, r8
	temp_buf[4]= u8green; //PWM1 - green
    6daa:	7128      	strb	r0, [r5, #4]
	temp_buf[5]= u8red; //PWM2 - red
    6dac:	4643      	mov	r3, r8
    6dae:	2ae1      	cmp	r2, #225	; 0xe1
    6db0:	d901      	bls.n	6db6 <backlightCustomAdjust+0xe6>
    6db2:	4b24      	ldr	r3, [pc, #144]	; (6e44 <backlightCustomAdjust+0x174>)
    6db4:	781b      	ldrb	r3, [r3, #0]
    6db6:	716b      	strb	r3, [r5, #5]
	temp_buf[6]= 0x00; //PWM3
    6db8:	2300      	movs	r3, #0
    6dba:	71ab      	strb	r3, [r5, #6]
	temp_buf[7]= 0x00; //GRPPWM
    6dbc:	71eb      	strb	r3, [r5, #7]
	temp_buf[8]= 0x00; //FRPFREQ
    6dbe:	722b      	strb	r3, [r5, #8]
	temp_buf[9]= 0x2A; //LEDOUT: 0b00101010
    6dc0:	332a      	adds	r3, #42	; 0x2a
    6dc2:	726b      	strb	r3, [r5, #9]
	
	i2c_read_write(writep, led_add,temp_buf, mes_len);
    6dc4:	002a      	movs	r2, r5
    6dc6:	3b20      	subs	r3, #32
    6dc8:	2162      	movs	r1, #98	; 0x62
    6dca:	2001      	movs	r0, #1
    6dcc:	4c1e      	ldr	r4, [pc, #120]	; (6e48 <backlightCustomAdjust+0x178>)
    6dce:	47a0      	blx	r4
}
    6dd0:	9801      	ldr	r0, [sp, #4]
    6dd2:	b007      	add	sp, #28
    6dd4:	bc3c      	pop	{r2, r3, r4, r5}
    6dd6:	4690      	mov	r8, r2
    6dd8:	4699      	mov	r9, r3
    6dda:	46a2      	mov	sl, r4
    6ddc:	46ab      	mov	fp, r5
    6dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
			colorPtr = &colorCustom.green;
    6de0:	4b0e      	ldr	r3, [pc, #56]	; (6e1c <backlightCustomAdjust+0x14c>)
			maxRef = options.backlight_setting.maxColor;
    6de2:	4d0f      	ldr	r5, [pc, #60]	; (6e20 <backlightCustomAdjust+0x150>)
			colorPtr = &colorCustom.green;
    6de4:	1d9a      	adds	r2, r3, #6
			maxRef = options.backlight_setting.maxColor;
    6de6:	7c28      	ldrb	r0, [r5, #16]
			colorPtr = &colorCustom.green;
    6de8:	9301      	str	r3, [sp, #4]
	if (adjustment>0){
    6dea:	2900      	cmp	r1, #0
    6dec:	dd00      	ble.n	6df0 <backlightCustomAdjust+0x120>
    6dee:	e789      	b.n	6d04 <backlightCustomAdjust+0x34>
	}else if (adjustment<0){
    6df0:	2900      	cmp	r1, #0
    6df2:	d100      	bne.n	6df6 <backlightCustomAdjust+0x126>
    6df4:	e78b      	b.n	6d0e <backlightCustomAdjust+0x3e>
		if (*colorPtr>0){
    6df6:	7813      	ldrb	r3, [r2, #0]
    6df8:	2b00      	cmp	r3, #0
    6dfa:	d000      	beq.n	6dfe <backlightCustomAdjust+0x12e>
    6dfc:	e785      	b.n	6d0a <backlightCustomAdjust+0x3a>
    6dfe:	e786      	b.n	6d0e <backlightCustomAdjust+0x3e>
			maxRef = options.backlight_setting.maxBrightness;
    6e00:	4d07      	ldr	r5, [pc, #28]	; (6e20 <backlightCustomAdjust+0x150>)
    6e02:	4b06      	ldr	r3, [pc, #24]	; (6e1c <backlightCustomAdjust+0x14c>)
			colorPtr = &options.backlight_setting.brightness;
    6e04:	002a      	movs	r2, r5
			maxRef = options.backlight_setting.maxBrightness;
    6e06:	7c68      	ldrb	r0, [r5, #17]
			colorPtr = &options.backlight_setting.brightness;
    6e08:	320c      	adds	r2, #12
    6e0a:	9301      	str	r3, [sp, #4]
    6e0c:	e777      	b.n	6cfe <backlightCustomAdjust+0x2e>
			colorPtr = &colorCustom.blue;
    6e0e:	4b03      	ldr	r3, [pc, #12]	; (6e1c <backlightCustomAdjust+0x14c>)
			maxRef = options.backlight_setting.maxColor;
    6e10:	4d03      	ldr	r5, [pc, #12]	; (6e20 <backlightCustomAdjust+0x150>)
			colorPtr = &colorCustom.blue;
    6e12:	1d5a      	adds	r2, r3, #5
			maxRef = options.backlight_setting.maxColor;
    6e14:	7c28      	ldrb	r0, [r5, #16]
			colorPtr = &colorCustom.blue;
    6e16:	9301      	str	r3, [sp, #4]
			break;
    6e18:	e771      	b.n	6cfe <backlightCustomAdjust+0x2e>
    6e1a:	46c0      	nop			; (mov r8, r8)
    6e1c:	200000d4 	.word	0x200000d4
    6e20:	20003770 	.word	0x20003770
    6e24:	200000ec 	.word	0x200000ec
    6e28:	0001d201 	.word	0x0001d201
    6e2c:	0001c4a5 	.word	0x0001c4a5
    6e30:	0001c7c9 	.word	0x0001c7c9
    6e34:	0001d161 	.word	0x0001d161
    6e38:	0001cba9 	.word	0x0001cba9
    6e3c:	43610000 	.word	0x43610000
    6e40:	0001c439 	.word	0x0001c439
    6e44:	00023874 	.word	0x00023874
    6e48:	00012a81 	.word	0x00012a81

00006e4c <backlightColorToggle>:
void backlightColorToggle(void){
    6e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e4e:	46de      	mov	lr, fp
    6e50:	4657      	mov	r7, sl
    6e52:	464e      	mov	r6, r9
    6e54:	4645      	mov	r5, r8
    6e56:	b5e0      	push	{r5, r6, r7, lr}
	options.backlight_setting.colorRef++;
    6e58:	4c35      	ldr	r4, [pc, #212]	; (6f30 <backlightColorToggle+0xe4>)
void backlightColorToggle(void){
    6e5a:	b085      	sub	sp, #20
	options.backlight_setting.colorRef++;
    6e5c:	7ca3      	ldrb	r3, [r4, #18]
    6e5e:	3301      	adds	r3, #1
    6e60:	b2db      	uxtb	r3, r3
	if (options.backlight_setting.colorRef>=(sizeof(colorOptions)/sizeof(&colorCustom))){
    6e62:	2b06      	cmp	r3, #6
    6e64:	d900      	bls.n	6e68 <backlightColorToggle+0x1c>
		options.backlight_setting.colorRef = 1;
    6e66:	2301      	movs	r3, #1
	fred = colorOptions[blset->colorRef]->red;
    6e68:	4a32      	ldr	r2, [pc, #200]	; (6f34 <backlightColorToggle+0xe8>)
		options.backlight_setting.colorRef = 1;
    6e6a:	74a3      	strb	r3, [r4, #18]
	fred = colorOptions[blset->colorRef]->red;
    6e6c:	009b      	lsls	r3, r3, #2
    6e6e:	589e      	ldr	r6, [r3, r2]
    6e70:	4d31      	ldr	r5, [pc, #196]	; (6f38 <backlightColorToggle+0xec>)
    6e72:	7930      	ldrb	r0, [r6, #4]
    6e74:	47a8      	blx	r5
    6e76:	1c07      	adds	r7, r0, #0
	fgreen = colorOptions[blset->colorRef]->green;
    6e78:	79b0      	ldrb	r0, [r6, #6]
    6e7a:	47a8      	blx	r5
    6e7c:	4680      	mov	r8, r0
	fblue = colorOptions[blset->colorRef]->blue;
    6e7e:	7970      	ldrb	r0, [r6, #5]
    6e80:	47a8      	blx	r5
    6e82:	4682      	mov	sl, r0
	scale = 1/(fred+fgreen+fblue);
    6e84:	4d2d      	ldr	r5, [pc, #180]	; (6f3c <backlightColorToggle+0xf0>)
    6e86:	4641      	mov	r1, r8
    6e88:	1c38      	adds	r0, r7, #0
    6e8a:	47a8      	blx	r5
    6e8c:	4651      	mov	r1, sl
    6e8e:	47a8      	blx	r5
    6e90:	1c01      	adds	r1, r0, #0
    6e92:	20fe      	movs	r0, #254	; 0xfe
    6e94:	4e2a      	ldr	r6, [pc, #168]	; (6f40 <backlightColorToggle+0xf4>)
    6e96:	0580      	lsls	r0, r0, #22
    6e98:	47b0      	blx	r6
	scale = scale*blset->brightness/blset->maxBrightness;
    6e9a:	4b2a      	ldr	r3, [pc, #168]	; (6f44 <backlightColorToggle+0xf8>)
	scale = 1/(fred+fgreen+fblue);
    6e9c:	4683      	mov	fp, r0
	scale = scale*blset->brightness/blset->maxBrightness;
    6e9e:	7b20      	ldrb	r0, [r4, #12]
    6ea0:	4699      	mov	r9, r3
    6ea2:	4798      	blx	r3
    6ea4:	4d28      	ldr	r5, [pc, #160]	; (6f48 <backlightColorToggle+0xfc>)
    6ea6:	1c01      	adds	r1, r0, #0
    6ea8:	4658      	mov	r0, fp
    6eaa:	47a8      	blx	r5
    6eac:	4683      	mov	fp, r0
    6eae:	7c60      	ldrb	r0, [r4, #17]
    6eb0:	47c8      	blx	r9
    6eb2:	1c01      	adds	r1, r0, #0
    6eb4:	4658      	mov	r0, fp
    6eb6:	47b0      	blx	r6
	fred = scale*fred;
    6eb8:	1c01      	adds	r1, r0, #0
	scale = scale*blset->brightness/blset->maxBrightness;
    6eba:	4681      	mov	r9, r0
	fred = scale*fred;
    6ebc:	1c38      	adds	r0, r7, #0
    6ebe:	47a8      	blx	r5
	u8red = fred*LED_MAX;
    6ec0:	4922      	ldr	r1, [pc, #136]	; (6f4c <backlightColorToggle+0x100>)
    6ec2:	47a8      	blx	r5
    6ec4:	4f22      	ldr	r7, [pc, #136]	; (6f50 <backlightColorToggle+0x104>)
    6ec6:	47b8      	blx	r7
	fblue = scale*fblue;
    6ec8:	4649      	mov	r1, r9
	u8red = fred*LED_MAX;
    6eca:	b2c6      	uxtb	r6, r0
	fblue = scale*fblue;
    6ecc:	4650      	mov	r0, sl
    6ece:	47a8      	blx	r5
	u8blue = fblue*LED_MAX;
    6ed0:	491e      	ldr	r1, [pc, #120]	; (6f4c <backlightColorToggle+0x100>)
    6ed2:	47a8      	blx	r5
    6ed4:	47b8      	blx	r7
	temp_buf[0]= 0x80;  //control register 0b10000000
    6ed6:	2380      	movs	r3, #128	; 0x80
    6ed8:	ac01      	add	r4, sp, #4
	u8blue = fblue*LED_MAX;
    6eda:	b2c0      	uxtb	r0, r0
	temp_buf[0]= 0x80;  //control register 0b10000000
    6edc:	7023      	strb	r3, [r4, #0]
	temp_buf[1]= 0x80; //Mode1: 0b10000000
    6ede:	7063      	strb	r3, [r4, #1]
	temp_buf[2]= 0x08; //Mode2: 0b00001000
    6ee0:	3b78      	subs	r3, #120	; 0x78
    6ee2:	70a3      	strb	r3, [r4, #2]
	temp_buf[3]= u8blue; //PWM0 - blue
    6ee4:	1c03      	adds	r3, r0, #0
    6ee6:	28e1      	cmp	r0, #225	; 0xe1
    6ee8:	d901      	bls.n	6eee <backlightColorToggle+0xa2>
    6eea:	4b1a      	ldr	r3, [pc, #104]	; (6f54 <backlightColorToggle+0x108>)
    6eec:	781b      	ldrb	r3, [r3, #0]
    6eee:	70e3      	strb	r3, [r4, #3]
	fgreen = scale*fgreen;
    6ef0:	4649      	mov	r1, r9
    6ef2:	4640      	mov	r0, r8
    6ef4:	47a8      	blx	r5
	u8green = fgreen*LED_MAX;
    6ef6:	4915      	ldr	r1, [pc, #84]	; (6f4c <backlightColorToggle+0x100>)
    6ef8:	47a8      	blx	r5
    6efa:	47b8      	blx	r7
	temp_buf[5]= u8red; //PWM2 - red
    6efc:	1c33      	adds	r3, r6, #0
	temp_buf[4]= u8green; //PWM1 - green
    6efe:	7120      	strb	r0, [r4, #4]
	temp_buf[5]= u8red; //PWM2 - red
    6f00:	2ee1      	cmp	r6, #225	; 0xe1
    6f02:	d901      	bls.n	6f08 <backlightColorToggle+0xbc>
    6f04:	4b13      	ldr	r3, [pc, #76]	; (6f54 <backlightColorToggle+0x108>)
    6f06:	781b      	ldrb	r3, [r3, #0]
    6f08:	7163      	strb	r3, [r4, #5]
	temp_buf[6]= 0x00; //PWM3
    6f0a:	2300      	movs	r3, #0
    6f0c:	71a3      	strb	r3, [r4, #6]
	temp_buf[7]= 0x00; //GRPPWM
    6f0e:	71e3      	strb	r3, [r4, #7]
	temp_buf[8]= 0x00; //FRPFREQ
    6f10:	7223      	strb	r3, [r4, #8]
	temp_buf[9]= 0x2A; //LEDOUT: 0b00101010
    6f12:	332a      	adds	r3, #42	; 0x2a
    6f14:	7263      	strb	r3, [r4, #9]
	i2c_read_write(writep, led_add,temp_buf, mes_len);
    6f16:	0022      	movs	r2, r4
    6f18:	3b20      	subs	r3, #32
    6f1a:	2162      	movs	r1, #98	; 0x62
    6f1c:	2001      	movs	r0, #1
    6f1e:	4c0e      	ldr	r4, [pc, #56]	; (6f58 <backlightColorToggle+0x10c>)
    6f20:	47a0      	blx	r4
}
    6f22:	b005      	add	sp, #20
    6f24:	bc3c      	pop	{r2, r3, r4, r5}
    6f26:	4690      	mov	r8, r2
    6f28:	4699      	mov	r9, r3
    6f2a:	46a2      	mov	sl, r4
    6f2c:	46ab      	mov	fp, r5
    6f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6f30:	20003770 	.word	0x20003770
    6f34:	200000ec 	.word	0x200000ec
    6f38:	0001d201 	.word	0x0001d201
    6f3c:	0001c4a5 	.word	0x0001c4a5
    6f40:	0001c7c9 	.word	0x0001c7c9
    6f44:	0001d161 	.word	0x0001d161
    6f48:	0001cba9 	.word	0x0001cba9
    6f4c:	43610000 	.word	0x43610000
    6f50:	0001c439 	.word	0x0001c439
    6f54:	00023874 	.word	0x00023874
    6f58:	00012a81 	.word	0x00012a81

00006f5c <backlightPlus>:
void backlightPlus(void){
    6f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6f5e:	4657      	mov	r7, sl
    6f60:	4645      	mov	r5, r8
    6f62:	46de      	mov	lr, fp
    6f64:	464e      	mov	r6, r9
    6f66:	b5e0      	push	{r5, r6, r7, lr}
	if (options.backlight_setting.brightness<options.backlight_setting.maxBrightness){
    6f68:	4b39      	ldr	r3, [pc, #228]	; (7050 <backlightPlus+0xf4>)
void backlightPlus(void){
    6f6a:	b085      	sub	sp, #20
	if (options.backlight_setting.brightness<options.backlight_setting.maxBrightness){
    6f6c:	7c5a      	ldrb	r2, [r3, #17]
    6f6e:	7b1d      	ldrb	r5, [r3, #12]
    6f70:	4692      	mov	sl, r2
    6f72:	4295      	cmp	r5, r2
    6f74:	d202      	bcs.n	6f7c <backlightPlus+0x20>
		options.backlight_setting.brightness = options.backlight_setting.brightness+1;
    6f76:	3501      	adds	r5, #1
    6f78:	b2ed      	uxtb	r5, r5
    6f7a:	731d      	strb	r5, [r3, #12]
	fred = colorOptions[blset->colorRef]->red;
    6f7c:	7c9b      	ldrb	r3, [r3, #18]
    6f7e:	4a35      	ldr	r2, [pc, #212]	; (7054 <backlightPlus+0xf8>)
    6f80:	009b      	lsls	r3, r3, #2
    6f82:	589b      	ldr	r3, [r3, r2]
    6f84:	4c34      	ldr	r4, [pc, #208]	; (7058 <backlightPlus+0xfc>)
    6f86:	4698      	mov	r8, r3
    6f88:	7918      	ldrb	r0, [r3, #4]
    6f8a:	47a0      	blx	r4
	fgreen = colorOptions[blset->colorRef]->green;
    6f8c:	4643      	mov	r3, r8
	fred = colorOptions[blset->colorRef]->red;
    6f8e:	1c07      	adds	r7, r0, #0
	fgreen = colorOptions[blset->colorRef]->green;
    6f90:	7998      	ldrb	r0, [r3, #6]
    6f92:	47a0      	blx	r4
	fblue = colorOptions[blset->colorRef]->blue;
    6f94:	4643      	mov	r3, r8
	fgreen = colorOptions[blset->colorRef]->green;
    6f96:	1c06      	adds	r6, r0, #0
	fblue = colorOptions[blset->colorRef]->blue;
    6f98:	7958      	ldrb	r0, [r3, #5]
    6f9a:	47a0      	blx	r4
	scale = 1/(fred+fgreen+fblue);
    6f9c:	4b2f      	ldr	r3, [pc, #188]	; (705c <backlightPlus+0x100>)
	fblue = colorOptions[blset->colorRef]->blue;
    6f9e:	1c04      	adds	r4, r0, #0
	scale = 1/(fred+fgreen+fblue);
    6fa0:	1c31      	adds	r1, r6, #0
    6fa2:	1c38      	adds	r0, r7, #0
    6fa4:	4698      	mov	r8, r3
    6fa6:	4798      	blx	r3
    6fa8:	1c21      	adds	r1, r4, #0
    6faa:	47c0      	blx	r8
    6fac:	1c01      	adds	r1, r0, #0
    6fae:	20fe      	movs	r0, #254	; 0xfe
    6fb0:	4b2b      	ldr	r3, [pc, #172]	; (7060 <backlightPlus+0x104>)
    6fb2:	0580      	lsls	r0, r0, #22
    6fb4:	4698      	mov	r8, r3
    6fb6:	4798      	blx	r3
	scale = scale*blset->brightness/blset->maxBrightness;
    6fb8:	4b2a      	ldr	r3, [pc, #168]	; (7064 <backlightPlus+0x108>)
	scale = 1/(fred+fgreen+fblue);
    6fba:	4683      	mov	fp, r0
	scale = scale*blset->brightness/blset->maxBrightness;
    6fbc:	0028      	movs	r0, r5
    6fbe:	4699      	mov	r9, r3
    6fc0:	4798      	blx	r3
    6fc2:	4d29      	ldr	r5, [pc, #164]	; (7068 <backlightPlus+0x10c>)
    6fc4:	1c01      	adds	r1, r0, #0
    6fc6:	4658      	mov	r0, fp
    6fc8:	47a8      	blx	r5
    6fca:	4683      	mov	fp, r0
    6fcc:	4650      	mov	r0, sl
    6fce:	47c8      	blx	r9
    6fd0:	1c01      	adds	r1, r0, #0
    6fd2:	4658      	mov	r0, fp
    6fd4:	47c0      	blx	r8
	fred = scale*fred;
    6fd6:	1c01      	adds	r1, r0, #0
	scale = scale*blset->brightness/blset->maxBrightness;
    6fd8:	4680      	mov	r8, r0
	fred = scale*fred;
    6fda:	1c38      	adds	r0, r7, #0
    6fdc:	47a8      	blx	r5
	u8red = fred*LED_MAX;
    6fde:	4923      	ldr	r1, [pc, #140]	; (706c <backlightPlus+0x110>)
    6fe0:	47a8      	blx	r5
    6fe2:	4b23      	ldr	r3, [pc, #140]	; (7070 <backlightPlus+0x114>)
    6fe4:	4699      	mov	r9, r3
    6fe6:	4798      	blx	r3
	fblue = scale*fblue;
    6fe8:	4641      	mov	r1, r8
	u8red = fred*LED_MAX;
    6fea:	b2c7      	uxtb	r7, r0
	fblue = scale*fblue;
    6fec:	1c20      	adds	r0, r4, #0
    6fee:	47a8      	blx	r5
	u8blue = fblue*LED_MAX;
    6ff0:	491e      	ldr	r1, [pc, #120]	; (706c <backlightPlus+0x110>)
    6ff2:	47a8      	blx	r5
    6ff4:	47c8      	blx	r9
	temp_buf[0]= 0x80;  //control register 0b10000000
    6ff6:	2380      	movs	r3, #128	; 0x80
    6ff8:	ac01      	add	r4, sp, #4
	u8blue = fblue*LED_MAX;
    6ffa:	b2c0      	uxtb	r0, r0
	temp_buf[0]= 0x80;  //control register 0b10000000
    6ffc:	7023      	strb	r3, [r4, #0]
	temp_buf[1]= 0x80; //Mode1: 0b10000000
    6ffe:	7063      	strb	r3, [r4, #1]
	temp_buf[2]= 0x08; //Mode2: 0b00001000
    7000:	3b78      	subs	r3, #120	; 0x78
    7002:	70a3      	strb	r3, [r4, #2]
	temp_buf[3]= u8blue; //PWM0 - blue
    7004:	1c03      	adds	r3, r0, #0
    7006:	28e1      	cmp	r0, #225	; 0xe1
    7008:	d901      	bls.n	700e <backlightPlus+0xb2>
    700a:	4b1a      	ldr	r3, [pc, #104]	; (7074 <backlightPlus+0x118>)
    700c:	781b      	ldrb	r3, [r3, #0]
    700e:	70e3      	strb	r3, [r4, #3]
	fgreen = scale*fgreen;
    7010:	4641      	mov	r1, r8
    7012:	1c30      	adds	r0, r6, #0
    7014:	47a8      	blx	r5
	u8green = fgreen*LED_MAX;
    7016:	4915      	ldr	r1, [pc, #84]	; (706c <backlightPlus+0x110>)
    7018:	47a8      	blx	r5
    701a:	47c8      	blx	r9
	temp_buf[5]= u8red; //PWM2 - red
    701c:	1c3b      	adds	r3, r7, #0
	temp_buf[4]= u8green; //PWM1 - green
    701e:	7120      	strb	r0, [r4, #4]
	temp_buf[5]= u8red; //PWM2 - red
    7020:	2fe1      	cmp	r7, #225	; 0xe1
    7022:	d901      	bls.n	7028 <backlightPlus+0xcc>
    7024:	4b13      	ldr	r3, [pc, #76]	; (7074 <backlightPlus+0x118>)
    7026:	781b      	ldrb	r3, [r3, #0]
    7028:	7163      	strb	r3, [r4, #5]
	temp_buf[6]= 0x00; //PWM3
    702a:	2300      	movs	r3, #0
    702c:	71a3      	strb	r3, [r4, #6]
	temp_buf[7]= 0x00; //GRPPWM
    702e:	71e3      	strb	r3, [r4, #7]
	temp_buf[8]= 0x00; //FRPFREQ
    7030:	7223      	strb	r3, [r4, #8]
	temp_buf[9]= 0x2A; //LEDOUT: 0b00101010
    7032:	332a      	adds	r3, #42	; 0x2a
    7034:	7263      	strb	r3, [r4, #9]
	i2c_read_write(writep, led_add,temp_buf, mes_len);
    7036:	0022      	movs	r2, r4
    7038:	3b20      	subs	r3, #32
    703a:	2162      	movs	r1, #98	; 0x62
    703c:	2001      	movs	r0, #1
    703e:	4c0e      	ldr	r4, [pc, #56]	; (7078 <backlightPlus+0x11c>)
    7040:	47a0      	blx	r4
}
    7042:	b005      	add	sp, #20
    7044:	bc3c      	pop	{r2, r3, r4, r5}
    7046:	4690      	mov	r8, r2
    7048:	4699      	mov	r9, r3
    704a:	46a2      	mov	sl, r4
    704c:	46ab      	mov	fp, r5
    704e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7050:	20003770 	.word	0x20003770
    7054:	200000ec 	.word	0x200000ec
    7058:	0001d201 	.word	0x0001d201
    705c:	0001c4a5 	.word	0x0001c4a5
    7060:	0001c7c9 	.word	0x0001c7c9
    7064:	0001d161 	.word	0x0001d161
    7068:	0001cba9 	.word	0x0001cba9
    706c:	43610000 	.word	0x43610000
    7070:	0001c439 	.word	0x0001c439
    7074:	00023874 	.word	0x00023874
    7078:	00012a81 	.word	0x00012a81

0000707c <backlightMinus>:
void backlightMinus(void){	
    707c:	b5f0      	push	{r4, r5, r6, r7, lr}
    707e:	4645      	mov	r5, r8
    7080:	46de      	mov	lr, fp
    7082:	4657      	mov	r7, sl
    7084:	464e      	mov	r6, r9
    7086:	b5e0      	push	{r5, r6, r7, lr}
	if (options.backlight_setting.brightness>0){
    7088:	4c39      	ldr	r4, [pc, #228]	; (7170 <backlightMinus+0xf4>)
void backlightMinus(void){	
    708a:	b085      	sub	sp, #20
	if (options.backlight_setting.brightness>0){
    708c:	7b25      	ldrb	r5, [r4, #12]
    708e:	2d00      	cmp	r5, #0
    7090:	d002      	beq.n	7098 <backlightMinus+0x1c>
		options.backlight_setting.brightness = options.backlight_setting.brightness-1;
    7092:	3d01      	subs	r5, #1
    7094:	b2ed      	uxtb	r5, r5
    7096:	7325      	strb	r5, [r4, #12]
	fred = colorOptions[blset->colorRef]->red;
    7098:	7ca3      	ldrb	r3, [r4, #18]
    709a:	4a36      	ldr	r2, [pc, #216]	; (7174 <backlightMinus+0xf8>)
    709c:	009b      	lsls	r3, r3, #2
    709e:	589b      	ldr	r3, [r3, r2]
    70a0:	4f35      	ldr	r7, [pc, #212]	; (7178 <backlightMinus+0xfc>)
    70a2:	4699      	mov	r9, r3
    70a4:	7918      	ldrb	r0, [r3, #4]
    70a6:	47b8      	blx	r7
	fgreen = colorOptions[blset->colorRef]->green;
    70a8:	464b      	mov	r3, r9
	fred = colorOptions[blset->colorRef]->red;
    70aa:	4680      	mov	r8, r0
	fgreen = colorOptions[blset->colorRef]->green;
    70ac:	7998      	ldrb	r0, [r3, #6]
    70ae:	47b8      	blx	r7
	fblue = colorOptions[blset->colorRef]->blue;
    70b0:	464b      	mov	r3, r9
	fgreen = colorOptions[blset->colorRef]->green;
    70b2:	1c06      	adds	r6, r0, #0
	fblue = colorOptions[blset->colorRef]->blue;
    70b4:	7958      	ldrb	r0, [r3, #5]
    70b6:	47b8      	blx	r7
	scale = 1/(fred+fgreen+fblue);
    70b8:	4b30      	ldr	r3, [pc, #192]	; (717c <backlightMinus+0x100>)
	fblue = colorOptions[blset->colorRef]->blue;
    70ba:	1c07      	adds	r7, r0, #0
	scale = 1/(fred+fgreen+fblue);
    70bc:	1c31      	adds	r1, r6, #0
    70be:	4640      	mov	r0, r8
    70c0:	4699      	mov	r9, r3
    70c2:	4798      	blx	r3
    70c4:	1c39      	adds	r1, r7, #0
    70c6:	47c8      	blx	r9
    70c8:	1c01      	adds	r1, r0, #0
    70ca:	20fe      	movs	r0, #254	; 0xfe
    70cc:	4b2c      	ldr	r3, [pc, #176]	; (7180 <backlightMinus+0x104>)
    70ce:	0580      	lsls	r0, r0, #22
    70d0:	4699      	mov	r9, r3
    70d2:	4798      	blx	r3
	scale = scale*blset->brightness/blset->maxBrightness;
    70d4:	4b2b      	ldr	r3, [pc, #172]	; (7184 <backlightMinus+0x108>)
	scale = 1/(fred+fgreen+fblue);
    70d6:	4683      	mov	fp, r0
	scale = scale*blset->brightness/blset->maxBrightness;
    70d8:	0028      	movs	r0, r5
    70da:	469a      	mov	sl, r3
    70dc:	4798      	blx	r3
    70de:	4d2a      	ldr	r5, [pc, #168]	; (7188 <backlightMinus+0x10c>)
    70e0:	1c01      	adds	r1, r0, #0
    70e2:	4658      	mov	r0, fp
    70e4:	47a8      	blx	r5
    70e6:	4683      	mov	fp, r0
    70e8:	7c60      	ldrb	r0, [r4, #17]
    70ea:	47d0      	blx	sl
    70ec:	1c01      	adds	r1, r0, #0
    70ee:	4658      	mov	r0, fp
    70f0:	47c8      	blx	r9
	fred = scale*fred;
    70f2:	1c01      	adds	r1, r0, #0
	scale = scale*blset->brightness/blset->maxBrightness;
    70f4:	4681      	mov	r9, r0
	fred = scale*fred;
    70f6:	4640      	mov	r0, r8
    70f8:	47a8      	blx	r5
	u8red = fred*LED_MAX;
    70fa:	4924      	ldr	r1, [pc, #144]	; (718c <backlightMinus+0x110>)
    70fc:	47a8      	blx	r5
    70fe:	4b24      	ldr	r3, [pc, #144]	; (7190 <backlightMinus+0x114>)
	temp_buf[0]= 0x80;  //control register 0b10000000
    7100:	ac01      	add	r4, sp, #4
	u8red = fred*LED_MAX;
    7102:	469a      	mov	sl, r3
    7104:	4798      	blx	r3
	fblue = scale*fblue;
    7106:	4649      	mov	r1, r9
	u8red = fred*LED_MAX;
    7108:	b2c3      	uxtb	r3, r0
	fblue = scale*fblue;
    710a:	1c38      	adds	r0, r7, #0
	u8red = fred*LED_MAX;
    710c:	4698      	mov	r8, r3
	fblue = scale*fblue;
    710e:	47a8      	blx	r5
	u8blue = fblue*LED_MAX;
    7110:	491e      	ldr	r1, [pc, #120]	; (718c <backlightMinus+0x110>)
    7112:	47a8      	blx	r5
    7114:	47d0      	blx	sl
	temp_buf[0]= 0x80;  //control register 0b10000000
    7116:	2380      	movs	r3, #128	; 0x80
	u8blue = fblue*LED_MAX;
    7118:	b2c0      	uxtb	r0, r0
	temp_buf[0]= 0x80;  //control register 0b10000000
    711a:	7023      	strb	r3, [r4, #0]
	temp_buf[1]= 0x80; //Mode1: 0b10000000
    711c:	7063      	strb	r3, [r4, #1]
	temp_buf[2]= 0x08; //Mode2: 0b00001000
    711e:	3b78      	subs	r3, #120	; 0x78
    7120:	70a3      	strb	r3, [r4, #2]
	temp_buf[3]= u8blue; //PWM0 - blue
    7122:	1c03      	adds	r3, r0, #0
    7124:	28e1      	cmp	r0, #225	; 0xe1
    7126:	d901      	bls.n	712c <backlightMinus+0xb0>
    7128:	4b1a      	ldr	r3, [pc, #104]	; (7194 <backlightMinus+0x118>)
    712a:	781b      	ldrb	r3, [r3, #0]
    712c:	70e3      	strb	r3, [r4, #3]
	fgreen = scale*fgreen;
    712e:	4649      	mov	r1, r9
    7130:	1c30      	adds	r0, r6, #0
    7132:	47a8      	blx	r5
	u8green = fgreen*LED_MAX;
    7134:	4915      	ldr	r1, [pc, #84]	; (718c <backlightMinus+0x110>)
    7136:	47a8      	blx	r5
    7138:	47d0      	blx	sl
	temp_buf[5]= u8red; //PWM2 - red
    713a:	4642      	mov	r2, r8
	temp_buf[4]= u8green; //PWM1 - green
    713c:	7120      	strb	r0, [r4, #4]
	temp_buf[5]= u8red; //PWM2 - red
    713e:	4643      	mov	r3, r8
    7140:	2ae1      	cmp	r2, #225	; 0xe1
    7142:	d901      	bls.n	7148 <backlightMinus+0xcc>
    7144:	4b13      	ldr	r3, [pc, #76]	; (7194 <backlightMinus+0x118>)
    7146:	781b      	ldrb	r3, [r3, #0]
    7148:	7163      	strb	r3, [r4, #5]
	temp_buf[6]= 0x00; //PWM3
    714a:	2300      	movs	r3, #0
    714c:	71a3      	strb	r3, [r4, #6]
	temp_buf[7]= 0x00; //GRPPWM
    714e:	71e3      	strb	r3, [r4, #7]
	temp_buf[8]= 0x00; //FRPFREQ
    7150:	7223      	strb	r3, [r4, #8]
	temp_buf[9]= 0x2A; //LEDOUT: 0b00101010
    7152:	332a      	adds	r3, #42	; 0x2a
    7154:	7263      	strb	r3, [r4, #9]
	i2c_read_write(writep, led_add,temp_buf, mes_len);
    7156:	0022      	movs	r2, r4
    7158:	3b20      	subs	r3, #32
    715a:	2162      	movs	r1, #98	; 0x62
    715c:	2001      	movs	r0, #1
    715e:	4c0e      	ldr	r4, [pc, #56]	; (7198 <backlightMinus+0x11c>)
    7160:	47a0      	blx	r4
}
    7162:	b005      	add	sp, #20
    7164:	bc3c      	pop	{r2, r3, r4, r5}
    7166:	4690      	mov	r8, r2
    7168:	4699      	mov	r9, r3
    716a:	46a2      	mov	sl, r4
    716c:	46ab      	mov	fp, r5
    716e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7170:	20003770 	.word	0x20003770
    7174:	200000ec 	.word	0x200000ec
    7178:	0001d201 	.word	0x0001d201
    717c:	0001c4a5 	.word	0x0001c4a5
    7180:	0001c7c9 	.word	0x0001c7c9
    7184:	0001d161 	.word	0x0001d161
    7188:	0001cba9 	.word	0x0001cba9
    718c:	43610000 	.word	0x43610000
    7190:	0001c439 	.word	0x0001c439
    7194:	00023874 	.word	0x00023874
    7198:	00012a81 	.word	0x00012a81

0000719c <backlightLevelToggle>:
void backlightLevelToggle(void){
    719c:	b5f0      	push	{r4, r5, r6, r7, lr}
    719e:	4657      	mov	r7, sl
    71a0:	4645      	mov	r5, r8
    71a2:	46de      	mov	lr, fp
    71a4:	464e      	mov	r6, r9
    71a6:	b5e0      	push	{r5, r6, r7, lr}
	options.backlight_setting.brightness = options.backlight_setting.brightness+1;
    71a8:	4b3b      	ldr	r3, [pc, #236]	; (7298 <backlightLevelToggle+0xfc>)
void backlightLevelToggle(void){
    71aa:	b085      	sub	sp, #20
	options.backlight_setting.brightness = options.backlight_setting.brightness+1;
    71ac:	7b18      	ldrb	r0, [r3, #12]
	if (options.backlight_setting.brightness>options.backlight_setting.maxBrightness){
    71ae:	7c5a      	ldrb	r2, [r3, #17]
	options.backlight_setting.brightness = options.backlight_setting.brightness+1;
    71b0:	3001      	adds	r0, #1
    71b2:	b2c5      	uxtb	r5, r0
    71b4:	731d      	strb	r5, [r3, #12]
	if (options.backlight_setting.brightness>options.backlight_setting.maxBrightness){
    71b6:	4692      	mov	sl, r2
    71b8:	4295      	cmp	r5, r2
    71ba:	d902      	bls.n	71c2 <backlightLevelToggle+0x26>
		options.backlight_setting.brightness = 0;
    71bc:	2200      	movs	r2, #0
    71be:	2500      	movs	r5, #0
    71c0:	731a      	strb	r2, [r3, #12]
	fred = colorOptions[blset->colorRef]->red;
    71c2:	7c9b      	ldrb	r3, [r3, #18]
    71c4:	4a35      	ldr	r2, [pc, #212]	; (729c <backlightLevelToggle+0x100>)
    71c6:	009b      	lsls	r3, r3, #2
    71c8:	589b      	ldr	r3, [r3, r2]
    71ca:	4c35      	ldr	r4, [pc, #212]	; (72a0 <backlightLevelToggle+0x104>)
    71cc:	4698      	mov	r8, r3
    71ce:	7918      	ldrb	r0, [r3, #4]
    71d0:	47a0      	blx	r4
	fgreen = colorOptions[blset->colorRef]->green;
    71d2:	4643      	mov	r3, r8
	fred = colorOptions[blset->colorRef]->red;
    71d4:	1c07      	adds	r7, r0, #0
	fgreen = colorOptions[blset->colorRef]->green;
    71d6:	7998      	ldrb	r0, [r3, #6]
    71d8:	47a0      	blx	r4
	fblue = colorOptions[blset->colorRef]->blue;
    71da:	4643      	mov	r3, r8
	fgreen = colorOptions[blset->colorRef]->green;
    71dc:	1c06      	adds	r6, r0, #0
	fblue = colorOptions[blset->colorRef]->blue;
    71de:	7958      	ldrb	r0, [r3, #5]
    71e0:	47a0      	blx	r4
	scale = 1/(fred+fgreen+fblue);
    71e2:	4b30      	ldr	r3, [pc, #192]	; (72a4 <backlightLevelToggle+0x108>)
	fblue = colorOptions[blset->colorRef]->blue;
    71e4:	1c04      	adds	r4, r0, #0
	scale = 1/(fred+fgreen+fblue);
    71e6:	1c31      	adds	r1, r6, #0
    71e8:	1c38      	adds	r0, r7, #0
    71ea:	4698      	mov	r8, r3
    71ec:	4798      	blx	r3
    71ee:	1c21      	adds	r1, r4, #0
    71f0:	47c0      	blx	r8
    71f2:	1c01      	adds	r1, r0, #0
    71f4:	20fe      	movs	r0, #254	; 0xfe
    71f6:	4b2c      	ldr	r3, [pc, #176]	; (72a8 <backlightLevelToggle+0x10c>)
    71f8:	0580      	lsls	r0, r0, #22
    71fa:	4698      	mov	r8, r3
    71fc:	4798      	blx	r3
	scale = scale*blset->brightness/blset->maxBrightness;
    71fe:	4b2b      	ldr	r3, [pc, #172]	; (72ac <backlightLevelToggle+0x110>)
	scale = 1/(fred+fgreen+fblue);
    7200:	4683      	mov	fp, r0
	scale = scale*blset->brightness/blset->maxBrightness;
    7202:	0028      	movs	r0, r5
    7204:	4699      	mov	r9, r3
    7206:	4798      	blx	r3
    7208:	4d29      	ldr	r5, [pc, #164]	; (72b0 <backlightLevelToggle+0x114>)
    720a:	1c01      	adds	r1, r0, #0
    720c:	4658      	mov	r0, fp
    720e:	47a8      	blx	r5
    7210:	4683      	mov	fp, r0
    7212:	4650      	mov	r0, sl
    7214:	47c8      	blx	r9
    7216:	1c01      	adds	r1, r0, #0
    7218:	4658      	mov	r0, fp
    721a:	47c0      	blx	r8
	fred = scale*fred;
    721c:	1c01      	adds	r1, r0, #0
	scale = scale*blset->brightness/blset->maxBrightness;
    721e:	4680      	mov	r8, r0
	fred = scale*fred;
    7220:	1c38      	adds	r0, r7, #0
    7222:	47a8      	blx	r5
	u8red = fred*LED_MAX;
    7224:	4923      	ldr	r1, [pc, #140]	; (72b4 <backlightLevelToggle+0x118>)
    7226:	47a8      	blx	r5
    7228:	4b23      	ldr	r3, [pc, #140]	; (72b8 <backlightLevelToggle+0x11c>)
    722a:	4699      	mov	r9, r3
    722c:	4798      	blx	r3
	fblue = scale*fblue;
    722e:	4641      	mov	r1, r8
	u8red = fred*LED_MAX;
    7230:	b2c7      	uxtb	r7, r0
	fblue = scale*fblue;
    7232:	1c20      	adds	r0, r4, #0
    7234:	47a8      	blx	r5
	u8blue = fblue*LED_MAX;
    7236:	491f      	ldr	r1, [pc, #124]	; (72b4 <backlightLevelToggle+0x118>)
    7238:	47a8      	blx	r5
    723a:	47c8      	blx	r9
	temp_buf[0]= 0x80;  //control register 0b10000000
    723c:	2380      	movs	r3, #128	; 0x80
    723e:	ac01      	add	r4, sp, #4
	u8blue = fblue*LED_MAX;
    7240:	b2c0      	uxtb	r0, r0
	temp_buf[0]= 0x80;  //control register 0b10000000
    7242:	7023      	strb	r3, [r4, #0]
	temp_buf[1]= 0x80; //Mode1: 0b10000000
    7244:	7063      	strb	r3, [r4, #1]
	temp_buf[2]= 0x08; //Mode2: 0b00001000
    7246:	3b78      	subs	r3, #120	; 0x78
    7248:	70a3      	strb	r3, [r4, #2]
	temp_buf[3]= u8blue; //PWM0 - blue
    724a:	1c03      	adds	r3, r0, #0
    724c:	28e1      	cmp	r0, #225	; 0xe1
    724e:	d901      	bls.n	7254 <backlightLevelToggle+0xb8>
    7250:	4b1a      	ldr	r3, [pc, #104]	; (72bc <backlightLevelToggle+0x120>)
    7252:	781b      	ldrb	r3, [r3, #0]
    7254:	70e3      	strb	r3, [r4, #3]
	fgreen = scale*fgreen;
    7256:	4641      	mov	r1, r8
    7258:	1c30      	adds	r0, r6, #0
    725a:	47a8      	blx	r5
	u8green = fgreen*LED_MAX;
    725c:	4915      	ldr	r1, [pc, #84]	; (72b4 <backlightLevelToggle+0x118>)
    725e:	47a8      	blx	r5
    7260:	47c8      	blx	r9
	temp_buf[5]= u8red; //PWM2 - red
    7262:	1c3b      	adds	r3, r7, #0
	temp_buf[4]= u8green; //PWM1 - green
    7264:	7120      	strb	r0, [r4, #4]
	temp_buf[5]= u8red; //PWM2 - red
    7266:	2fe1      	cmp	r7, #225	; 0xe1
    7268:	d901      	bls.n	726e <backlightLevelToggle+0xd2>
    726a:	4b14      	ldr	r3, [pc, #80]	; (72bc <backlightLevelToggle+0x120>)
    726c:	781b      	ldrb	r3, [r3, #0]
    726e:	7163      	strb	r3, [r4, #5]
	temp_buf[6]= 0x00; //PWM3
    7270:	2300      	movs	r3, #0
    7272:	71a3      	strb	r3, [r4, #6]
	temp_buf[7]= 0x00; //GRPPWM
    7274:	71e3      	strb	r3, [r4, #7]
	temp_buf[8]= 0x00; //FRPFREQ
    7276:	7223      	strb	r3, [r4, #8]
	temp_buf[9]= 0x2A; //LEDOUT: 0b00101010
    7278:	332a      	adds	r3, #42	; 0x2a
    727a:	7263      	strb	r3, [r4, #9]
	i2c_read_write(writep, led_add,temp_buf, mes_len);
    727c:	0022      	movs	r2, r4
    727e:	3b20      	subs	r3, #32
    7280:	2162      	movs	r1, #98	; 0x62
    7282:	2001      	movs	r0, #1
    7284:	4c0e      	ldr	r4, [pc, #56]	; (72c0 <backlightLevelToggle+0x124>)
    7286:	47a0      	blx	r4
}
    7288:	b005      	add	sp, #20
    728a:	bc3c      	pop	{r2, r3, r4, r5}
    728c:	4690      	mov	r8, r2
    728e:	4699      	mov	r9, r3
    7290:	46a2      	mov	sl, r4
    7292:	46ab      	mov	fp, r5
    7294:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7296:	46c0      	nop			; (mov r8, r8)
    7298:	20003770 	.word	0x20003770
    729c:	200000ec 	.word	0x200000ec
    72a0:	0001d201 	.word	0x0001d201
    72a4:	0001c4a5 	.word	0x0001c4a5
    72a8:	0001c7c9 	.word	0x0001c7c9
    72ac:	0001d161 	.word	0x0001d161
    72b0:	0001cba9 	.word	0x0001cba9
    72b4:	43610000 	.word	0x43610000
    72b8:	0001c439 	.word	0x0001c439
    72bc:	00023874 	.word	0x00023874
    72c0:	00012a81 	.word	0x00012a81

000072c4 <backlightGetCurrentColor>:
	return colorOptions[options.backlight_setting.colorRef]->colorStringPtr;	
    72c4:	4b03      	ldr	r3, [pc, #12]	; (72d4 <backlightGetCurrentColor+0x10>)
    72c6:	4a04      	ldr	r2, [pc, #16]	; (72d8 <backlightGetCurrentColor+0x14>)
    72c8:	7c9b      	ldrb	r3, [r3, #18]
    72ca:	009b      	lsls	r3, r3, #2
    72cc:	589b      	ldr	r3, [r3, r2]
    72ce:	6818      	ldr	r0, [r3, #0]
}
    72d0:	4770      	bx	lr
    72d2:	46c0      	nop			; (mov r8, r8)
    72d4:	20003770 	.word	0x20003770
    72d8:	200000ec 	.word	0x200000ec

000072dc <backlightOn>:
void backlightOn(void){
    72dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    72de:	46de      	mov	lr, fp
    72e0:	4657      	mov	r7, sl
    72e2:	464e      	mov	r6, r9
    72e4:	4645      	mov	r5, r8
    72e6:	b5e0      	push	{r5, r6, r7, lr}
	fred = colorOptions[blset->colorRef]->red;
    72e8:	4c32      	ldr	r4, [pc, #200]	; (73b4 <backlightOn+0xd8>)
    72ea:	4a33      	ldr	r2, [pc, #204]	; (73b8 <backlightOn+0xdc>)
    72ec:	7ca3      	ldrb	r3, [r4, #18]
void backlightOn(void){
    72ee:	b085      	sub	sp, #20
	fred = colorOptions[blset->colorRef]->red;
    72f0:	009b      	lsls	r3, r3, #2
    72f2:	589e      	ldr	r6, [r3, r2]
    72f4:	4d31      	ldr	r5, [pc, #196]	; (73bc <backlightOn+0xe0>)
    72f6:	7930      	ldrb	r0, [r6, #4]
    72f8:	47a8      	blx	r5
    72fa:	1c07      	adds	r7, r0, #0
	fgreen = colorOptions[blset->colorRef]->green;
    72fc:	79b0      	ldrb	r0, [r6, #6]
    72fe:	47a8      	blx	r5
    7300:	4681      	mov	r9, r0
	fblue = colorOptions[blset->colorRef]->blue;
    7302:	7970      	ldrb	r0, [r6, #5]
    7304:	47a8      	blx	r5
    7306:	4682      	mov	sl, r0
	scale = 1/(fred+fgreen+fblue);
    7308:	4d2d      	ldr	r5, [pc, #180]	; (73c0 <backlightOn+0xe4>)
    730a:	4649      	mov	r1, r9
    730c:	1c38      	adds	r0, r7, #0
    730e:	47a8      	blx	r5
    7310:	4651      	mov	r1, sl
    7312:	47a8      	blx	r5
    7314:	1c01      	adds	r1, r0, #0
    7316:	20fe      	movs	r0, #254	; 0xfe
    7318:	4e2a      	ldr	r6, [pc, #168]	; (73c4 <backlightOn+0xe8>)
    731a:	0580      	lsls	r0, r0, #22
    731c:	47b0      	blx	r6
	scale = scale*blset->brightness/blset->maxBrightness;
    731e:	4b2a      	ldr	r3, [pc, #168]	; (73c8 <backlightOn+0xec>)
	scale = 1/(fred+fgreen+fblue);
    7320:	4683      	mov	fp, r0
	scale = scale*blset->brightness/blset->maxBrightness;
    7322:	7b20      	ldrb	r0, [r4, #12]
    7324:	4698      	mov	r8, r3
    7326:	4798      	blx	r3
    7328:	4d28      	ldr	r5, [pc, #160]	; (73cc <backlightOn+0xf0>)
    732a:	1c01      	adds	r1, r0, #0
    732c:	4658      	mov	r0, fp
    732e:	47a8      	blx	r5
    7330:	4683      	mov	fp, r0
    7332:	7c60      	ldrb	r0, [r4, #17]
    7334:	47c0      	blx	r8
    7336:	1c01      	adds	r1, r0, #0
    7338:	4658      	mov	r0, fp
    733a:	47b0      	blx	r6
	fred = scale*fred;
    733c:	1c01      	adds	r1, r0, #0
	scale = scale*blset->brightness/blset->maxBrightness;
    733e:	4680      	mov	r8, r0
	fred = scale*fred;
    7340:	1c38      	adds	r0, r7, #0
    7342:	47a8      	blx	r5
	u8red = fred*LED_MAX;
    7344:	4922      	ldr	r1, [pc, #136]	; (73d0 <backlightOn+0xf4>)
    7346:	47a8      	blx	r5
    7348:	4f22      	ldr	r7, [pc, #136]	; (73d4 <backlightOn+0xf8>)
    734a:	47b8      	blx	r7
	fblue = scale*fblue;
    734c:	4641      	mov	r1, r8
	u8red = fred*LED_MAX;
    734e:	b2c6      	uxtb	r6, r0
	fblue = scale*fblue;
    7350:	4650      	mov	r0, sl
    7352:	47a8      	blx	r5
	u8blue = fblue*LED_MAX;
    7354:	491e      	ldr	r1, [pc, #120]	; (73d0 <backlightOn+0xf4>)
    7356:	47a8      	blx	r5
    7358:	47b8      	blx	r7
	temp_buf[0]= 0x80;  //control register 0b10000000
    735a:	2380      	movs	r3, #128	; 0x80
    735c:	ac01      	add	r4, sp, #4
    735e:	7023      	strb	r3, [r4, #0]
	u8blue = fblue*LED_MAX;
    7360:	b2c0      	uxtb	r0, r0
	temp_buf[1]= 0x80; //Mode1: 0b10000000
    7362:	7063      	strb	r3, [r4, #1]
	temp_buf[2]= 0x08; //Mode2: 0b00001000
    7364:	3b78      	subs	r3, #120	; 0x78
    7366:	70a3      	strb	r3, [r4, #2]
	temp_buf[3]= u8blue; //PWM0 - blue
    7368:	1c03      	adds	r3, r0, #0
    736a:	28e1      	cmp	r0, #225	; 0xe1
    736c:	d901      	bls.n	7372 <backlightOn+0x96>
    736e:	4b1a      	ldr	r3, [pc, #104]	; (73d8 <backlightOn+0xfc>)
    7370:	781b      	ldrb	r3, [r3, #0]
    7372:	70e3      	strb	r3, [r4, #3]
	fgreen = scale*fgreen;
    7374:	4641      	mov	r1, r8
    7376:	4648      	mov	r0, r9
    7378:	47a8      	blx	r5
	u8green = fgreen*LED_MAX;
    737a:	4915      	ldr	r1, [pc, #84]	; (73d0 <backlightOn+0xf4>)
    737c:	47a8      	blx	r5
    737e:	47b8      	blx	r7
	temp_buf[5]= u8red; //PWM2 - red
    7380:	1c33      	adds	r3, r6, #0
	temp_buf[4]= u8green; //PWM1 - green
    7382:	7120      	strb	r0, [r4, #4]
	temp_buf[5]= u8red; //PWM2 - red
    7384:	2ee1      	cmp	r6, #225	; 0xe1
    7386:	d901      	bls.n	738c <backlightOn+0xb0>
    7388:	4b13      	ldr	r3, [pc, #76]	; (73d8 <backlightOn+0xfc>)
    738a:	781b      	ldrb	r3, [r3, #0]
    738c:	7163      	strb	r3, [r4, #5]
	temp_buf[6]= 0x00; //PWM3
    738e:	2300      	movs	r3, #0
    7390:	71a3      	strb	r3, [r4, #6]
	temp_buf[7]= 0x00; //GRPPWM
    7392:	71e3      	strb	r3, [r4, #7]
	temp_buf[8]= 0x00; //FRPFREQ
    7394:	7223      	strb	r3, [r4, #8]
	temp_buf[9]= 0x2A; //LEDOUT: 0b00101010
    7396:	332a      	adds	r3, #42	; 0x2a
    7398:	7263      	strb	r3, [r4, #9]
	i2c_read_write(writep, led_add,temp_buf, mes_len);
    739a:	0022      	movs	r2, r4
    739c:	3b20      	subs	r3, #32
    739e:	2162      	movs	r1, #98	; 0x62
    73a0:	2001      	movs	r0, #1
    73a2:	4c0e      	ldr	r4, [pc, #56]	; (73dc <backlightOn+0x100>)
    73a4:	47a0      	blx	r4
}
    73a6:	b005      	add	sp, #20
    73a8:	bc3c      	pop	{r2, r3, r4, r5}
    73aa:	4690      	mov	r8, r2
    73ac:	4699      	mov	r9, r3
    73ae:	46a2      	mov	sl, r4
    73b0:	46ab      	mov	fp, r5
    73b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    73b4:	20003770 	.word	0x20003770
    73b8:	200000ec 	.word	0x200000ec
    73bc:	0001d201 	.word	0x0001d201
    73c0:	0001c4a5 	.word	0x0001c4a5
    73c4:	0001c7c9 	.word	0x0001c7c9
    73c8:	0001d161 	.word	0x0001d161
    73cc:	0001cba9 	.word	0x0001cba9
    73d0:	43610000 	.word	0x43610000
    73d4:	0001c439 	.word	0x0001c439
    73d8:	00023874 	.word	0x00023874
    73dc:	00012a81 	.word	0x00012a81

000073e0 <backlightOff>:

void backlightOff(void){
		
	uint16_t mes_len = 10;
	uint8_t temp_buf[mes_len];
	temp_buf[0]= 0x80;  //control register 0b10000000
    73e0:	2380      	movs	r3, #128	; 0x80
void backlightOff(void){
    73e2:	b510      	push	{r4, lr}
    73e4:	b084      	sub	sp, #16
	temp_buf[0]= 0x80;  //control register 0b10000000
    73e6:	aa01      	add	r2, sp, #4
    73e8:	7013      	strb	r3, [r2, #0]
	temp_buf[1]= 0x80; //Mode1: 0b10000000
    73ea:	7053      	strb	r3, [r2, #1]
	temp_buf[2]= 0x08; //Mode2: 0b00001000
    73ec:	3b78      	subs	r3, #120	; 0x78
    73ee:	7093      	strb	r3, [r2, #2]
	temp_buf[3]= 0x00; //PWM0 - blue
    73f0:	2300      	movs	r3, #0
    73f2:	70d3      	strb	r3, [r2, #3]
	temp_buf[4]= 0x00; //PWM1 - green
    73f4:	7113      	strb	r3, [r2, #4]
	temp_buf[5]= 0x00; //PWM2 - red
    73f6:	7153      	strb	r3, [r2, #5]
	temp_buf[6]= 0x00; //PWM3
    73f8:	7193      	strb	r3, [r2, #6]
	temp_buf[7]= 0x00; //GRPPWM
    73fa:	71d3      	strb	r3, [r2, #7]
	temp_buf[8]= 0x00; //FRPFREQ
    73fc:	7213      	strb	r3, [r2, #8]
	temp_buf[9]= 0x2A; //LEDOUT: 0b00101010
    73fe:	332a      	adds	r3, #42	; 0x2a
    7400:	7253      	strb	r3, [r2, #9]
	
	i2c_read_write(writep, led_add,temp_buf, mes_len);
    7402:	2162      	movs	r1, #98	; 0x62
    7404:	3b20      	subs	r3, #32
    7406:	2001      	movs	r0, #1
    7408:	4c01      	ldr	r4, [pc, #4]	; (7410 <backlightOff+0x30>)
    740a:	47a0      	blx	r4
	
}
    740c:	b004      	add	sp, #16
    740e:	bd10      	pop	{r4, pc}
    7410:	00012a81 	.word	0x00012a81

00007414 <config_batt>:
	data1=data1 & 0xFFFD;//clear POR bit
	max17055_reg_read_write(writep ,0x00, &data1);
	
}

void config_batt(void){
    7414:	b5f0      	push	{r4, r5, r6, r7, lr}
    7416:	46ce      	mov	lr, r9
    7418:	4647      	mov	r7, r8
    741a:	b580      	push	{r7, lr}
    741c:	b083      	sub	sp, #12
	uint16_t data1;
	max17055_reg_read_write(readp, 0x3D, &data1);//check DNR bit 0x3D bit 1
    741e:	466b      	mov	r3, sp
    7420:	1d9c      	adds	r4, r3, #6
    7422:	0022      	movs	r2, r4
    7424:	213d      	movs	r1, #61	; 0x3d
    7426:	2000      	movs	r0, #0
    7428:	4d34      	ldr	r5, [pc, #208]	; (74fc <config_batt+0xe8>)
    742a:	47a8      	blx	r5
	while(data1 & 0x0001){
    742c:	8823      	ldrh	r3, [r4, #0]
    742e:	4e34      	ldr	r6, [pc, #208]	; (7500 <config_batt+0xec>)
    7430:	07db      	lsls	r3, r3, #31
    7432:	d509      	bpl.n	7448 <config_batt+0x34>
    7434:	2701      	movs	r7, #1
		delay_ms(10);
    7436:	200a      	movs	r0, #10
    7438:	47b0      	blx	r6
		max17055_reg_read_write(readp, 0x3D, &data1);
    743a:	0022      	movs	r2, r4
    743c:	213d      	movs	r1, #61	; 0x3d
    743e:	2000      	movs	r0, #0
    7440:	47a8      	blx	r5
	while(data1 & 0x0001){
    7442:	8823      	ldrh	r3, [r4, #0]
    7444:	421f      	tst	r7, r3
    7446:	d1f6      	bne.n	7436 <config_batt+0x22>
	}
	max17055_reg_read_write(writep, 0x18, &DesignCap);//Write design capacity register 0x18
    7448:	4b2e      	ldr	r3, [pc, #184]	; (7504 <config_batt+0xf0>)
    744a:	2118      	movs	r1, #24
    744c:	4699      	mov	r9, r3
    744e:	001a      	movs	r2, r3
    7450:	2001      	movs	r0, #1
    7452:	47a8      	blx	r5
	data1=DesignCap/32;
    7454:	464b      	mov	r3, r9
    7456:	881b      	ldrh	r3, [r3, #0]
	max17055_reg_read_write(writep, 0x45, &data1);//write dQacc register 0x45
    7458:	0022      	movs	r2, r4
	data1=DesignCap/32;
    745a:	095b      	lsrs	r3, r3, #5
	max17055_reg_read_write(writep, 0x45, &data1);//write dQacc register 0x45
    745c:	2145      	movs	r1, #69	; 0x45
    745e:	2001      	movs	r0, #1
	data1=DesignCap/32;
    7460:	8023      	strh	r3, [r4, #0]
	max17055_reg_read_write(writep, 0x45, &data1);//write dQacc register 0x45
    7462:	47a8      	blx	r5
	max17055_reg_read_write(writep, 0x1E, &IchgTerm);//Write termination charge register 0x1E
    7464:	4a28      	ldr	r2, [pc, #160]	; (7508 <config_batt+0xf4>)
    7466:	211e      	movs	r1, #30
    7468:	2001      	movs	r0, #1
    746a:	47a8      	blx	r5
	max17055_reg_read_write(writep, 0x3A, &VEmpty);//Write empty voltage, register 0x3A
    746c:	4a27      	ldr	r2, [pc, #156]	; (750c <config_batt+0xf8>)
    746e:	213a      	movs	r1, #58	; 0x3a
    7470:	2001      	movs	r0, #1
    7472:	47a8      	blx	r5
	max17055_reg_read_write(readp, 0xBA, &HibCFG);//Save hibernation configuration
    7474:	4f26      	ldr	r7, [pc, #152]	; (7510 <config_batt+0xfc>)
    7476:	21ba      	movs	r1, #186	; 0xba
    7478:	003a      	movs	r2, r7
    747a:	2000      	movs	r0, #0
    747c:	47a8      	blx	r5
	data1=0x90;
    747e:	2390      	movs	r3, #144	; 0x90
	max17055_reg_read_write(writep, 0x60, &data1);//Exit hibernate mode step 1
    7480:	0022      	movs	r2, r4
    7482:	2160      	movs	r1, #96	; 0x60
    7484:	2001      	movs	r0, #1
	data1=0x90;
    7486:	8023      	strh	r3, [r4, #0]
	max17055_reg_read_write(writep, 0x60, &data1);//Exit hibernate mode step 1
    7488:	47a8      	blx	r5
	data1=0x00;
    748a:	2300      	movs	r3, #0
    748c:	4698      	mov	r8, r3
	max17055_reg_read_write(writep,0xBA, &data1);//exit hibernate mode step 2
    748e:	0022      	movs	r2, r4
    7490:	21ba      	movs	r1, #186	; 0xba
    7492:	2001      	movs	r0, #1
	data1=0x00;
    7494:	8023      	strh	r3, [r4, #0]
	max17055_reg_read_write(writep,0xBA, &data1);//exit hibernate mode step 2
    7496:	47a8      	blx	r5
	data1=0x00;
    7498:	4643      	mov	r3, r8
	max17055_reg_read_write(writep, 0x60, &data1);//exit hibernate mode step 3
    749a:	0022      	movs	r2, r4
    749c:	2160      	movs	r1, #96	; 0x60
    749e:	2001      	movs	r0, #1
	data1=0x00;
    74a0:	8023      	strh	r3, [r4, #0]
	max17055_reg_read_write(writep, 0x60, &data1);//exit hibernate mode step 3
    74a2:	47a8      	blx	r5
	data1=DesignCap/32;
    74a4:	464b      	mov	r3, r9
    74a6:	8819      	ldrh	r1, [r3, #0]
	data1=data1*44138;
    74a8:	481a      	ldr	r0, [pc, #104]	; (7514 <config_batt+0x100>)
	data1=DesignCap/32;
    74aa:	094b      	lsrs	r3, r1, #5
	data1=data1*44138;
    74ac:	4358      	muls	r0, r3
	data1=data1/DesignCap;
    74ae:	4b1a      	ldr	r3, [pc, #104]	; (7518 <config_batt+0x104>)
    74b0:	b280      	uxth	r0, r0
    74b2:	4798      	blx	r3
	max17055_reg_read_write(writep, 0x46, &data1);//write dPAcc register 0x46
    74b4:	0022      	movs	r2, r4
	data1=data1/DesignCap;
    74b6:	8020      	strh	r0, [r4, #0]
	max17055_reg_read_write(writep, 0x46, &data1);//write dPAcc register 0x46
    74b8:	2146      	movs	r1, #70	; 0x46
    74ba:	2001      	movs	r0, #1
    74bc:	47a8      	blx	r5
	data1=0x8000;//model 0
    74be:	4b17      	ldr	r3, [pc, #92]	; (751c <config_batt+0x108>)
	max17055_reg_read_write(writep, 0xD8, &data1);//write model configuration at register D8
    74c0:	0022      	movs	r2, r4
    74c2:	21d8      	movs	r1, #216	; 0xd8
    74c4:	2001      	movs	r0, #1
	data1=0x8000;//model 0
    74c6:	8023      	strh	r3, [r4, #0]
	max17055_reg_read_write(writep, 0xD8, &data1);//write model configuration at register D8
    74c8:	47a8      	blx	r5
	//wait for model to refresh
	data1=0x0000;
    74ca:	4643      	mov	r3, r8
    74cc:	8023      	strh	r3, [r4, #0]
	while(!data1){
		delay_ms(10);
    74ce:	200a      	movs	r0, #10
    74d0:	47b0      	blx	r6
		max17055_reg_read_write(readp,0xD8,&data1);
    74d2:	0022      	movs	r2, r4
    74d4:	21d8      	movs	r1, #216	; 0xd8
    74d6:	2000      	movs	r0, #0
    74d8:	47a8      	blx	r5
		data1=data1 & 0x8000;
    74da:	8823      	ldrh	r3, [r4, #0]
    74dc:	0bda      	lsrs	r2, r3, #15
    74de:	03d2      	lsls	r2, r2, #15
	while(!data1){
    74e0:	b21b      	sxth	r3, r3
		data1=data1 & 0x8000;
    74e2:	8022      	strh	r2, [r4, #0]
	while(!data1){
    74e4:	2b00      	cmp	r3, #0
    74e6:	daf2      	bge.n	74ce <config_batt+0xba>
	}
	max17055_reg_read_write(writep, 0xBA, &HibCFG);//restore hiberation configuration at register 0xBA
    74e8:	003a      	movs	r2, r7
    74ea:	21ba      	movs	r1, #186	; 0xba
    74ec:	2001      	movs	r0, #1
    74ee:	47a8      	blx	r5
}
    74f0:	b003      	add	sp, #12
    74f2:	bc0c      	pop	{r2, r3}
    74f4:	4690      	mov	r8, r2
    74f6:	4699      	mov	r9, r3
    74f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    74fa:	46c0      	nop			; (mov r8, r8)
    74fc:	00012b25 	.word	0x00012b25
    7500:	000151d9 	.word	0x000151d9
    7504:	20000158 	.word	0x20000158
    7508:	2000015a 	.word	0x2000015a
    750c:	2000015c 	.word	0x2000015c
    7510:	2000162c 	.word	0x2000162c
    7514:	ffffac6a 	.word	0xffffac6a
    7518:	0001bf8d 	.word	0x0001bf8d
    751c:	ffff8000 	.word	0xffff8000

00007520 <setup_batt>:
void setup_batt(void){
    7520:	b530      	push	{r4, r5, lr}
    7522:	b083      	sub	sp, #12
	max17055_reg_read_write(readp, 0x00, &data1);
    7524:	466b      	mov	r3, sp
    7526:	1d9c      	adds	r4, r3, #6
    7528:	0022      	movs	r2, r4
    752a:	2100      	movs	r1, #0
    752c:	2000      	movs	r0, #0
    752e:	4d0b      	ldr	r5, [pc, #44]	; (755c <setup_batt+0x3c>)
    7530:	47a8      	blx	r5
	data1=data1 & 0x0002;//bit two is POR
    7532:	2302      	movs	r3, #2
    7534:	8822      	ldrh	r2, [r4, #0]
    7536:	4013      	ands	r3, r2
    7538:	8023      	strh	r3, [r4, #0]
	if (data1){
    753a:	d001      	beq.n	7540 <setup_batt+0x20>
		config_batt();
    753c:	4b08      	ldr	r3, [pc, #32]	; (7560 <setup_batt+0x40>)
    753e:	4798      	blx	r3
	max17055_reg_read_write(readp, 0x00, &data1);
    7540:	0022      	movs	r2, r4
    7542:	2100      	movs	r1, #0
    7544:	2000      	movs	r0, #0
    7546:	47a8      	blx	r5
	data1=data1 & 0xFFFD;//clear POR bit
    7548:	2202      	movs	r2, #2
    754a:	8823      	ldrh	r3, [r4, #0]
	max17055_reg_read_write(writep ,0x00, &data1);
    754c:	2100      	movs	r1, #0
	data1=data1 & 0xFFFD;//clear POR bit
    754e:	4393      	bics	r3, r2
	max17055_reg_read_write(writep ,0x00, &data1);
    7550:	2001      	movs	r0, #1
    7552:	0022      	movs	r2, r4
	data1=data1 & 0xFFFD;//clear POR bit
    7554:	8023      	strh	r3, [r4, #0]
	max17055_reg_read_write(writep ,0x00, &data1);
    7556:	47a8      	blx	r5
}
    7558:	b003      	add	sp, #12
    755a:	bd30      	pop	{r4, r5, pc}
    755c:	00012b25 	.word	0x00012b25
    7560:	00007415 	.word	0x00007415

00007564 <getBatteryLevel>:

uint16_t getBatteryLevel(void){
    7564:	b510      	push	{r4, lr}
    7566:	b082      	sub	sp, #8
	//  Reads back battery state of charge in %, 0-100
	uint16_t batt_SOC;
	max17055_reg_read_write(readp, 0x06, &batt_SOC);
    7568:	466b      	mov	r3, sp
    756a:	1d9c      	adds	r4, r3, #6
    756c:	0022      	movs	r2, r4
    756e:	2106      	movs	r1, #6
    7570:	2000      	movs	r0, #0
    7572:	4b0a      	ldr	r3, [pc, #40]	; (759c <getBatteryLevel+0x38>)
    7574:	4798      	blx	r3
	batt_SOC=batt_SOC>>8;
    7576:	8820      	ldrh	r0, [r4, #0]
	//  Add margin to show topped-off battery
	batt_SOC = batt_SOC*1.03;  
    7578:	4b09      	ldr	r3, [pc, #36]	; (75a0 <getBatteryLevel+0x3c>)
    757a:	0a00      	lsrs	r0, r0, #8
    757c:	4798      	blx	r3
    757e:	4a09      	ldr	r2, [pc, #36]	; (75a4 <getBatteryLevel+0x40>)
    7580:	4b09      	ldr	r3, [pc, #36]	; (75a8 <getBatteryLevel+0x44>)
    7582:	4c0a      	ldr	r4, [pc, #40]	; (75ac <getBatteryLevel+0x48>)
    7584:	47a0      	blx	r4
    7586:	4b0a      	ldr	r3, [pc, #40]	; (75b0 <getBatteryLevel+0x4c>)
    7588:	4798      	blx	r3
    758a:	b282      	uxth	r2, r0
    758c:	2364      	movs	r3, #100	; 0x64
    758e:	2a63      	cmp	r2, #99	; 0x63
    7590:	d800      	bhi.n	7594 <getBatteryLevel+0x30>
    7592:	1c03      	adds	r3, r0, #0
    7594:	b298      	uxth	r0, r3
	if (batt_SOC>100){
		batt_SOC = 100;
	}
	
	return batt_SOC;
}
    7596:	b002      	add	sp, #8
    7598:	bd10      	pop	{r4, pc}
    759a:	46c0      	nop			; (mov r8, r8)
    759c:	00012b25 	.word	0x00012b25
    75a0:	0001ece9 	.word	0x0001ece9
    75a4:	47ae147b 	.word	0x47ae147b
    75a8:	3ff07ae1 	.word	0x3ff07ae1
    75ac:	0001e115 	.word	0x0001e115
    75b0:	0001c469 	.word	0x0001c469

000075b4 <setup_charger>:


void setup_charger(void){
	// ILIM is lower 3 bits of addr 0x02
	uint8_t data;
	if (options.chargeCurrent==500){
    75b4:	23fa      	movs	r3, #250	; 0xfa
void setup_charger(void){
    75b6:	b500      	push	{lr}
	if (options.chargeCurrent==500){
    75b8:	4a08      	ldr	r2, [pc, #32]	; (75dc <setup_charger+0x28>)
void setup_charger(void){
    75ba:	b083      	sub	sp, #12
	if (options.chargeCurrent==500){
    75bc:	6852      	ldr	r2, [r2, #4]
    75be:	005b      	lsls	r3, r3, #1
    75c0:	429a      	cmp	r2, r3
    75c2:	d009      	beq.n	75d8 <setup_charger+0x24>
		data = 0x06;
		}else{
		data = 0x00;
    75c4:	2300      	movs	r3, #0
    75c6:	466a      	mov	r2, sp
    75c8:	3207      	adds	r2, #7
    75ca:	7013      	strb	r3, [r2, #0]
	}
	adp5062_reg_read_write(writep, 0x02, &data);
    75cc:	2102      	movs	r1, #2
    75ce:	2001      	movs	r0, #1
    75d0:	4b03      	ldr	r3, [pc, #12]	; (75e0 <setup_charger+0x2c>)
    75d2:	4798      	blx	r3
	
	
	
}
    75d4:	b003      	add	sp, #12
    75d6:	bd00      	pop	{pc}
		data = 0x06;
    75d8:	2306      	movs	r3, #6
    75da:	e7f4      	b.n	75c6 <setup_charger+0x12>
    75dc:	20003770 	.word	0x20003770
    75e0:	00012bf1 	.word	0x00012bf1

000075e4 <getChargerStatus>:

uint8_t getChargerStatus(void){
    75e4:	b510      	push	{r4, lr}
    75e6:	b082      	sub	sp, #8

uint8_t getChargerRegister(uint8_t address){
	//  Read data from address on Charger
	uint8_t registerData;
	
	adp5062_reg_read_write(readp, address, &registerData); 
    75e8:	466b      	mov	r3, sp
    75ea:	1ddc      	adds	r4, r3, #7
    75ec:	0022      	movs	r2, r4
    75ee:	210b      	movs	r1, #11
    75f0:	2000      	movs	r0, #0
    75f2:	4b03      	ldr	r3, [pc, #12]	; (7600 <getChargerStatus+0x1c>)
    75f4:	4798      	blx	r3
	return status;
    75f6:	2007      	movs	r0, #7
	
	return registerData;
    75f8:	7823      	ldrb	r3, [r4, #0]
	return status;
    75fa:	4018      	ands	r0, r3
}
    75fc:	b002      	add	sp, #8
    75fe:	bd10      	pop	{r4, pc}
    7600:	00012bf1 	.word	0x00012bf1

00007604 <getChargerRegister>:
uint8_t getChargerRegister(uint8_t address){
    7604:	b510      	push	{r4, lr}
    7606:	b082      	sub	sp, #8
	adp5062_reg_read_write(readp, address, &registerData); 
    7608:	466b      	mov	r3, sp
    760a:	1ddc      	adds	r4, r3, #7
uint8_t getChargerRegister(uint8_t address){
    760c:	0001      	movs	r1, r0
	adp5062_reg_read_write(readp, address, &registerData); 
    760e:	0022      	movs	r2, r4
    7610:	2000      	movs	r0, #0
    7612:	4b02      	ldr	r3, [pc, #8]	; (761c <getChargerRegister+0x18>)
    7614:	4798      	blx	r3
	return registerData;
    7616:	7820      	ldrb	r0, [r4, #0]
}
    7618:	b002      	add	sp, #8
    761a:	bd10      	pop	{r4, pc}
    761c:	00012bf1 	.word	0x00012bf1

00007620 <bin2str>:
void  bin2str(uint8_t data, char *strPtr){
	uint8_t i;
	uint8_t shifter = 128;
	
	for (i=0;i<8;i++){
		if (data&shifter){
    7620:	b243      	sxtb	r3, r0
    7622:	2b00      	cmp	r3, #0
    7624:	db20      	blt.n	7668 <bin2str+0x48>
			strPtr[i] = '1';
		}else{
			strPtr[i] = '0';
    7626:	2330      	movs	r3, #48	; 0x30
    7628:	700b      	strb	r3, [r1, #0]
		if (data&shifter){
    762a:	0643      	lsls	r3, r0, #25
    762c:	d420      	bmi.n	7670 <bin2str+0x50>
			strPtr[i] = '0';
    762e:	2330      	movs	r3, #48	; 0x30
    7630:	704b      	strb	r3, [r1, #1]
		if (data&shifter){
    7632:	0683      	lsls	r3, r0, #26
    7634:	d420      	bmi.n	7678 <bin2str+0x58>
			strPtr[i] = '0';
    7636:	2330      	movs	r3, #48	; 0x30
    7638:	708b      	strb	r3, [r1, #2]
		if (data&shifter){
    763a:	06c3      	lsls	r3, r0, #27
    763c:	d420      	bmi.n	7680 <bin2str+0x60>
			strPtr[i] = '0';
    763e:	2330      	movs	r3, #48	; 0x30
    7640:	70cb      	strb	r3, [r1, #3]
		if (data&shifter){
    7642:	0703      	lsls	r3, r0, #28
    7644:	d420      	bmi.n	7688 <bin2str+0x68>
			strPtr[i] = '0';
    7646:	2330      	movs	r3, #48	; 0x30
    7648:	710b      	strb	r3, [r1, #4]
		if (data&shifter){
    764a:	0743      	lsls	r3, r0, #29
    764c:	d420      	bmi.n	7690 <bin2str+0x70>
			strPtr[i] = '0';
    764e:	2330      	movs	r3, #48	; 0x30
    7650:	714b      	strb	r3, [r1, #5]
		if (data&shifter){
    7652:	0783      	lsls	r3, r0, #30
    7654:	d420      	bmi.n	7698 <bin2str+0x78>
			strPtr[i] = '0';
    7656:	2330      	movs	r3, #48	; 0x30
    7658:	718b      	strb	r3, [r1, #6]
		if (data&shifter){
    765a:	07c3      	lsls	r3, r0, #31
    765c:	d520      	bpl.n	76a0 <bin2str+0x80>
			strPtr[i] = '1';
    765e:	2331      	movs	r3, #49	; 0x31
    7660:	71cb      	strb	r3, [r1, #7]
		}
		shifter = shifter>>1;
	}
	strPtr[8] = '\0';
    7662:	2300      	movs	r3, #0
    7664:	720b      	strb	r3, [r1, #8]
	
}
    7666:	4770      	bx	lr
			strPtr[i] = '1';
    7668:	2331      	movs	r3, #49	; 0x31
    766a:	700b      	strb	r3, [r1, #0]
		if (data&shifter){
    766c:	0643      	lsls	r3, r0, #25
    766e:	d5de      	bpl.n	762e <bin2str+0xe>
			strPtr[i] = '1';
    7670:	2331      	movs	r3, #49	; 0x31
    7672:	704b      	strb	r3, [r1, #1]
		if (data&shifter){
    7674:	0683      	lsls	r3, r0, #26
    7676:	d5de      	bpl.n	7636 <bin2str+0x16>
			strPtr[i] = '1';
    7678:	2331      	movs	r3, #49	; 0x31
    767a:	708b      	strb	r3, [r1, #2]
		if (data&shifter){
    767c:	06c3      	lsls	r3, r0, #27
    767e:	d5de      	bpl.n	763e <bin2str+0x1e>
			strPtr[i] = '1';
    7680:	2331      	movs	r3, #49	; 0x31
    7682:	70cb      	strb	r3, [r1, #3]
		if (data&shifter){
    7684:	0703      	lsls	r3, r0, #28
    7686:	d5de      	bpl.n	7646 <bin2str+0x26>
			strPtr[i] = '1';
    7688:	2331      	movs	r3, #49	; 0x31
    768a:	710b      	strb	r3, [r1, #4]
		if (data&shifter){
    768c:	0743      	lsls	r3, r0, #29
    768e:	d5de      	bpl.n	764e <bin2str+0x2e>
			strPtr[i] = '1';
    7690:	2331      	movs	r3, #49	; 0x31
    7692:	714b      	strb	r3, [r1, #5]
		if (data&shifter){
    7694:	0783      	lsls	r3, r0, #30
    7696:	d5de      	bpl.n	7656 <bin2str+0x36>
			strPtr[i] = '1';
    7698:	2331      	movs	r3, #49	; 0x31
    769a:	718b      	strb	r3, [r1, #6]
		if (data&shifter){
    769c:	07c3      	lsls	r3, r0, #31
    769e:	d4de      	bmi.n	765e <bin2str+0x3e>
			strPtr[i] = '0';
    76a0:	2330      	movs	r3, #48	; 0x30
    76a2:	71cb      	strb	r3, [r1, #7]
    76a4:	e7dd      	b.n	7662 <bin2str+0x42>
    76a6:	46c0      	nop			; (mov r8, r8)

000076a8 <setup_XOSC32k>:
	config->frequency           = 32768UL;
    76a8:	2380      	movs	r3, #128	; 0x80


bool isExtClockEnabled = false;


void setup_XOSC32k(void){
    76aa:	b510      	push	{r4, lr}
    76ac:	b084      	sub	sp, #16
    76ae:	a801      	add	r0, sp, #4
    76b0:	021b      	lsls	r3, r3, #8
    76b2:	6043      	str	r3, [r0, #4]
	config->enable_32khz_output = true;
    76b4:	2301      	movs	r3, #1
	config->write_once          = false;
    76b6:	2200      	movs	r2, #0
	config->enable_32khz_output = true;
    76b8:	70c3      	strb	r3, [r0, #3]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = SYSTEM_CLOCK_EXTERNAL_CLOCK;//CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    76ba:	7003      	strb	r3, [r0, #0]
	xosc32k_conf.startup_time        = SYSTEM_XOSC32K_STARTUP_2048;//CONF_CLOCK_XOSC32K_STARTUP_TIME;
	xosc32k_conf.enable_1khz_output  = true;//CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    76bc:	7083      	strb	r3, [r0, #2]
	xosc32k_conf.enable_32khz_output = true;//CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
	xosc32k_conf.run_in_standby      = true;//CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    76be:	7203      	strb	r3, [r0, #8]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    76c0:	4b09      	ldr	r3, [pc, #36]	; (76e8 <setup_XOSC32k+0x40>)
	config->write_once          = false;
    76c2:	7282      	strb	r2, [r0, #10]
	xosc32k_conf.startup_time        = SYSTEM_XOSC32K_STARTUP_2048;//CONF_CLOCK_XOSC32K_STARTUP_TIME;
    76c4:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.on_demand           = false;
    76c6:	7242      	strb	r2, [r0, #9]
	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    76c8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    76ca:	2005      	movs	r0, #5
    76cc:	4b07      	ldr	r3, [pc, #28]	; (76ec <setup_XOSC32k+0x44>)
    76ce:	4798      	blx	r3
    76d0:	4c07      	ldr	r4, [pc, #28]	; (76f0 <setup_XOSC32k+0x48>)
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    76d2:	2005      	movs	r0, #5
    76d4:	47a0      	blx	r4
    76d6:	2800      	cmp	r0, #0
    76d8:	d0fb      	beq.n	76d2 <setup_XOSC32k+0x2a>
	OSC32KCTRL->XOSC32K.bit.ONDEMAND = 1;
    76da:	2180      	movs	r1, #128	; 0x80
    76dc:	4a05      	ldr	r2, [pc, #20]	; (76f4 <setup_XOSC32k+0x4c>)
    76de:	6953      	ldr	r3, [r2, #20]
    76e0:	430b      	orrs	r3, r1
    76e2:	6153      	str	r3, [r2, #20]
	//system_clock_source_disable(SYSTEM_CLOCK_SOURCE_OSC32K);

}
    76e4:	b004      	add	sp, #16
    76e6:	bd10      	pop	{r4, pc}
    76e8:	000152bd 	.word	0x000152bd
    76ec:	000153d9 	.word	0x000153d9
    76f0:	00015495 	.word	0x00015495
    76f4:	40001000 	.word	0x40001000

000076f8 <clock_32k_source>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    76f8:	2301      	movs	r3, #1
	config->high_when_disabled = false;
    76fa:	2200      	movs	r2, #0


void clock_32k_source(enum clock_type ext_int){
    76fc:	b500      	push	{lr}
    76fe:	b085      	sub	sp, #20
	config->division_factor    = 1;
    7700:	a901      	add	r1, sp, #4
    7702:	604b      	str	r3, [r1, #4]
	struct system_gclk_gen_config gclock_gen_conf;
	
	system_gclk_gen_get_config_defaults(&gclock_gen_conf);
	gclock_gen_conf.run_in_standby = true;
    7704:	720b      	strb	r3, [r1, #8]
	config->high_when_disabled = false;
    7706:	704a      	strb	r2, [r1, #1]
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
	config->output_enable      = false;
    7708:	724a      	strb	r2, [r1, #9]
	if(ext_int == clock_ext){
		gclock_gen_conf.source_clock = SYSTEM_CLOCK_SOURCE_XOSC32K;
    770a:	3304      	adds	r3, #4
	if(ext_int == clock_ext){
    770c:	2800      	cmp	r0, #0
    770e:	d000      	beq.n	7712 <clock_32k_source+0x1a>
	}else{
		gclock_gen_conf.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
    7710:	3b02      	subs	r3, #2
    7712:	700b      	strb	r3, [r1, #0]
	}
	system_gclk_gen_set_config(GCLK_FOR_32khz, &gclock_gen_conf);
    7714:	2002      	movs	r0, #2
    7716:	4b03      	ldr	r3, [pc, #12]	; (7724 <clock_32k_source+0x2c>)
    7718:	4798      	blx	r3
	system_gclk_gen_enable(GCLK_FOR_32khz);
    771a:	2002      	movs	r0, #2
    771c:	4b02      	ldr	r3, [pc, #8]	; (7728 <clock_32k_source+0x30>)
    771e:	4798      	blx	r3
	
}
    7720:	b005      	add	sp, #20
    7722:	bd00      	pop	{pc}
    7724:	0001570d 	.word	0x0001570d
    7728:	000157b9 	.word	0x000157b9

0000772c <get_time>:


void get_time(void){
	uint8_t temp_buf[20];
	int16_t temp_var16;
	temp_buf[0]=0x00;
    772c:	2300      	movs	r3, #0
void get_time(void){
    772e:	b530      	push	{r4, r5, lr}
    7730:	b087      	sub	sp, #28
	temp_buf[0]=0x00;
    7732:	ac01      	add	r4, sp, #4
    7734:	7023      	strb	r3, [r4, #0]
	i2c_read_write(readp, rtc_add, temp_buf, 19);
    7736:	0022      	movs	r2, r4
    7738:	2168      	movs	r1, #104	; 0x68
    773a:	3313      	adds	r3, #19
    773c:	2000      	movs	r0, #0
    773e:	4d18      	ldr	r5, [pc, #96]	; (77a0 <get_time+0x74>)
    7740:	47a8      	blx	r5
	//Parse Data
	current_time.seconds=	temp_buf[0x01];
    7742:	7863      	ldrb	r3, [r4, #1]
    7744:	4d17      	ldr	r5, [pc, #92]	; (77a4 <get_time+0x78>)
    7746:	702b      	strb	r3, [r5, #0]
	current_time.minutes=	temp_buf[0x02];
    7748:	78a3      	ldrb	r3, [r4, #2]
    774a:	706b      	strb	r3, [r5, #1]
	current_time.hours=		temp_buf[0x03];
    774c:	78e3      	ldrb	r3, [r4, #3]
    774e:	70ab      	strb	r3, [r5, #2]
	current_time.date=		temp_buf[0x05] ;
    7750:	7963      	ldrb	r3, [r4, #5]
    7752:	712b      	strb	r3, [r5, #4]
	current_time.month=		temp_buf[0x06] & 0x7F;//mask out first "century" bit
    7754:	237f      	movs	r3, #127	; 0x7f
    7756:	79a2      	ldrb	r2, [r4, #6]
    7758:	4013      	ands	r3, r2
    775a:	716b      	strb	r3, [r5, #5]
	current_time.year=		temp_buf[0x07];
    775c:	79e3      	ldrb	r3, [r4, #7]
    775e:	71ab      	strb	r3, [r5, #6]
	current_time.control=	temp_buf[0x0F];
    7760:	7be3      	ldrb	r3, [r4, #15]
    7762:	71eb      	strb	r3, [r5, #7]
	current_time.control_status=	temp_buf[0x10];
    7764:	7c23      	ldrb	r3, [r4, #16]
    7766:	722b      	strb	r3, [r5, #8]
	temp_var16=temp_buf[0x12];
	temp_var16=temp_var16<<8;
    7768:	7ca3      	ldrb	r3, [r4, #18]
	temp_var16=temp_var16+temp_buf[0x13];
    776a:	7ce0      	ldrb	r0, [r4, #19]
	temp_var16=temp_var16<<8;
    776c:	021b      	lsls	r3, r3, #8
	temp_var16=temp_var16+temp_buf[0x13];
    776e:	18c0      	adds	r0, r0, r3
	current_time.temperatureC=temp_var16;
    7770:	b200      	sxth	r0, r0
    7772:	4b0d      	ldr	r3, [pc, #52]	; (77a8 <get_time+0x7c>)
    7774:	4798      	blx	r3
	current_time.temperatureC=current_time.temperatureC/256;
    7776:	21ee      	movs	r1, #238	; 0xee
    7778:	4b0c      	ldr	r3, [pc, #48]	; (77ac <get_time+0x80>)
    777a:	0589      	lsls	r1, r1, #22
    777c:	4798      	blx	r3
	current_time.temperatureF=current_time.temperatureC*1.8+32;
    777e:	4b0c      	ldr	r3, [pc, #48]	; (77b0 <get_time+0x84>)
	current_time.temperatureC=current_time.temperatureC/256;
    7780:	60e8      	str	r0, [r5, #12]
	current_time.temperatureF=current_time.temperatureC*1.8+32;
    7782:	4798      	blx	r3
    7784:	4c0b      	ldr	r4, [pc, #44]	; (77b4 <get_time+0x88>)
    7786:	4a0c      	ldr	r2, [pc, #48]	; (77b8 <get_time+0x8c>)
    7788:	4b0c      	ldr	r3, [pc, #48]	; (77bc <get_time+0x90>)
    778a:	47a0      	blx	r4
    778c:	2200      	movs	r2, #0
    778e:	4b0c      	ldr	r3, [pc, #48]	; (77c0 <get_time+0x94>)
    7790:	4c0c      	ldr	r4, [pc, #48]	; (77c4 <get_time+0x98>)
    7792:	47a0      	blx	r4
    7794:	4b0c      	ldr	r3, [pc, #48]	; (77c8 <get_time+0x9c>)
    7796:	4798      	blx	r3
    7798:	6128      	str	r0, [r5, #16]
	
}
    779a:	b007      	add	sp, #28
    779c:	bd30      	pop	{r4, r5, pc}
    779e:	46c0      	nop			; (mov r8, r8)
    77a0:	00012a81 	.word	0x00012a81
    77a4:	200010cc 	.word	0x200010cc
    77a8:	0001d161 	.word	0x0001d161
    77ac:	0001cba9 	.word	0x0001cba9
    77b0:	0001eddd 	.word	0x0001eddd
    77b4:	0001e115 	.word	0x0001e115
    77b8:	cccccccd 	.word	0xcccccccd
    77bc:	3ffccccc 	.word	0x3ffccccc
    77c0:	40400000 	.word	0x40400000
    77c4:	0001d28d 	.word	0x0001d28d
    77c8:	0001ee81 	.word	0x0001ee81

000077cc <set_time>:

void set_time(void){
	uint8_t temp_buf[20];

	temp_buf[0]=0x00;
    77cc:	2300      	movs	r3, #0
void set_time(void){
    77ce:	b510      	push	{r4, lr}
    77d0:	b086      	sub	sp, #24
	temp_buf[0]=0x00;
    77d2:	aa01      	add	r2, sp, #4
    77d4:	7013      	strb	r3, [r2, #0]

	//Parse Data
	temp_buf[0x01]=temp_time.seconds;
    77d6:	4b0b      	ldr	r3, [pc, #44]	; (7804 <set_time+0x38>)
	temp_buf[0x03]=temp_time.hours;
	temp_buf[0x04]=temp_time.day;
	temp_buf[0x05]=temp_time.date;
	temp_buf[0x06]=temp_time.month;
	temp_buf[0x07]=temp_time.year;
	i2c_read_write(writep, rtc_add, temp_buf, 8);
    77d8:	2001      	movs	r0, #1
	temp_buf[0x01]=temp_time.seconds;
    77da:	7819      	ldrb	r1, [r3, #0]
	i2c_read_write(writep, rtc_add, temp_buf, 8);
    77dc:	4c0a      	ldr	r4, [pc, #40]	; (7808 <set_time+0x3c>)
	temp_buf[0x01]=temp_time.seconds;
    77de:	7051      	strb	r1, [r2, #1]
	temp_buf[0x02]=temp_time.minutes;
    77e0:	7859      	ldrb	r1, [r3, #1]
    77e2:	7091      	strb	r1, [r2, #2]
	temp_buf[0x03]=temp_time.hours;
    77e4:	7899      	ldrb	r1, [r3, #2]
    77e6:	70d1      	strb	r1, [r2, #3]
	temp_buf[0x04]=temp_time.day;
    77e8:	78d9      	ldrb	r1, [r3, #3]
    77ea:	7111      	strb	r1, [r2, #4]
	temp_buf[0x05]=temp_time.date;
    77ec:	7919      	ldrb	r1, [r3, #4]
    77ee:	7151      	strb	r1, [r2, #5]
	temp_buf[0x06]=temp_time.month;
    77f0:	7959      	ldrb	r1, [r3, #5]
    77f2:	7191      	strb	r1, [r2, #6]
	temp_buf[0x07]=temp_time.year;
    77f4:	799b      	ldrb	r3, [r3, #6]
	i2c_read_write(writep, rtc_add, temp_buf, 8);
    77f6:	2168      	movs	r1, #104	; 0x68
	temp_buf[0x07]=temp_time.year;
    77f8:	71d3      	strb	r3, [r2, #7]
	i2c_read_write(writep, rtc_add, temp_buf, 8);
    77fa:	2308      	movs	r3, #8
    77fc:	47a0      	blx	r4
	
}
    77fe:	b006      	add	sp, #24
    7800:	bd10      	pop	{r4, pc}
    7802:	46c0      	nop			; (mov r8, r8)
    7804:	2000111c 	.word	0x2000111c
    7808:	00012a81 	.word	0x00012a81

0000780c <ext_osc_onoff>:
	uint8_t temp_buf[3];

	temp_buf[0] = 0x0E;
	//Register 0x0Eh 
	//0b00000100 = 0x04
	temp_buf[1] = 0x04;
    780c:	2304      	movs	r3, #4
void ext_osc_onoff(bool onoff){
    780e:	b570      	push	{r4, r5, r6, lr}
    7810:	b082      	sub	sp, #8
	temp_buf[0] = 0x0E;
    7812:	ac01      	add	r4, sp, #4
	temp_buf[1] = 0x04;
    7814:	7063      	strb	r3, [r4, #1]
	//0b00000000 = 0x00; 32kHz osc off
	if (onoff){
		temp_buf[2] = 0x08;
		isExtClockEnabled = true;
	}else{
		temp_buf[2] = 0x00;
    7816:	0003      	movs	r3, r0
    7818:	1e5a      	subs	r2, r3, #1
    781a:	4193      	sbcs	r3, r2
	temp_buf[0] = 0x0E;
    781c:	260e      	movs	r6, #14
    781e:	4a09      	ldr	r2, [pc, #36]	; (7844 <ext_osc_onoff+0x38>)
		temp_buf[2] = 0x00;
    7820:	00db      	lsls	r3, r3, #3
    7822:	7010      	strb	r0, [r2, #0]
    7824:	70a3      	strb	r3, [r4, #2]
		isExtClockEnabled = false;
	}
	
	i2c_read_write(writep, rtc_add, temp_buf, 3);
    7826:	0022      	movs	r2, r4
    7828:	4d07      	ldr	r5, [pc, #28]	; (7848 <ext_osc_onoff+0x3c>)
    782a:	2303      	movs	r3, #3
    782c:	2168      	movs	r1, #104	; 0x68
    782e:	2001      	movs	r0, #1
	temp_buf[0] = 0x0E;
    7830:	7026      	strb	r6, [r4, #0]
	i2c_read_write(writep, rtc_add, temp_buf, 3);
    7832:	47a8      	blx	r5
	
	//****************debug
	temp_buf[0]=0x0E;
	i2c_read_write(readp, rtc_add, temp_buf, 3);
    7834:	2303      	movs	r3, #3
    7836:	0022      	movs	r2, r4
    7838:	2168      	movs	r1, #104	; 0x68
    783a:	2000      	movs	r0, #0
	temp_buf[0]=0x0E;
    783c:	7026      	strb	r6, [r4, #0]
	i2c_read_write(readp, rtc_add, temp_buf, 3);
    783e:	47a8      	blx	r5
	//Parse Data

	//*******************debug
}
    7840:	b002      	add	sp, #8
    7842:	bd70      	pop	{r4, r5, r6, pc}
    7844:	20000e4e 	.word	0x20000e4e
    7848:	00012a81 	.word	0x00012a81

0000784c <gen_posix_time>:



uint32_t gen_posix_time(struct Time *time_inst){
    784c:	b5f0      	push	{r4, r5, r6, r7, lr}
    784e:	46de      	mov	lr, fp
    7850:	4657      	mov	r7, sl
    7852:	464e      	mov	r6, r9
    7854:	4645      	mov	r5, r8
    7856:	b5e0      	push	{r5, r6, r7, lr}
	//https://stackoverflow.com/questions/21975472/how-to-calculate-epoch-day
	uint32_t posix_time;
	uint32_t tm_sec, tm_min, tm_hour, tm_yday, tm_year, tm_month;
	
	tm_sec = bcd2int(time_inst->seconds);
    7858:	7803      	ldrb	r3, [r0, #0]
uint32_t gen_posix_time(struct Time *time_inst){
    785a:	b083      	sub	sp, #12
	tm_sec = bcd2int(time_inst->seconds);
    785c:	4698      	mov	r8, r3

uint32_t bcd2int(uint8_t bcd_var){
	uint8_t dec;
	dec = bcd_var & 0xF0;
	dec = dec>>4;
	dec = dec*10;
    785e:	091b      	lsrs	r3, r3, #4
    7860:	009a      	lsls	r2, r3, #2
    7862:	189b      	adds	r3, r3, r2
    7864:	005b      	lsls	r3, r3, #1
    7866:	9301      	str	r3, [sp, #4]
	tm_min = bcd2int(time_inst->minutes);
    7868:	7842      	ldrb	r2, [r0, #1]
    786a:	4691      	mov	r9, r2
	dec = dec*10;
    786c:	0916      	lsrs	r6, r2, #4
	tm_hour = bcd2int(time_inst->hours);
    786e:	7882      	ldrb	r2, [r0, #2]
	dec = dec*10;
    7870:	00b3      	lsls	r3, r6, #2
    7872:	0917      	lsrs	r7, r2, #4
    7874:	18f6      	adds	r6, r6, r3
    7876:	00bb      	lsls	r3, r7, #2
    7878:	18ff      	adds	r7, r7, r3
	tm_hour = bcd2int(time_inst->hours);
    787a:	4692      	mov	sl, r2
	dec = dec*10;
    787c:	007a      	lsls	r2, r7, #1
	dec = dec + (bcd_var & 0x0F);
    787e:	270f      	movs	r7, #15
	dec = dec*10;
    7880:	9200      	str	r2, [sp, #0]
	tm_year = bcd2int(time_inst->year)+100;//  Years since 1900, time_inst->year is years since 2000
    7882:	7982      	ldrb	r2, [r0, #6]
	tm_month = bcd2int(time_inst->month);
    7884:	7941      	ldrb	r1, [r0, #5]
	dec = dec*10;
    7886:	0913      	lsrs	r3, r2, #4
    7888:	009d      	lsls	r5, r3, #2
    788a:	195d      	adds	r5, r3, r5
	dec = dec + (bcd_var & 0x0F);
    788c:	403a      	ands	r2, r7
	dec = dec*10;
    788e:	006d      	lsls	r5, r5, #1
	dec = dec + (bcd_var & 0x0F);
    7890:	18ad      	adds	r5, r5, r2
	tm_yday = bcd2int(time_inst->date);
    7892:	7902      	ldrb	r2, [r0, #4]
	
	return dec;
    7894:	b2ed      	uxtb	r5, r5
	dec = dec*10;
    7896:	0914      	lsrs	r4, r2, #4
    7898:	00a3      	lsls	r3, r4, #2
    789a:	18e4      	adds	r4, r4, r3
    789c:	090b      	lsrs	r3, r1, #4
    789e:	0098      	lsls	r0, r3, #2
    78a0:	181b      	adds	r3, r3, r0
	dec = dec + (bcd_var & 0x0F);
    78a2:	4039      	ands	r1, r7
	dec = dec*10;
    78a4:	005b      	lsls	r3, r3, #1
	dec = dec + (bcd_var & 0x0F);
    78a6:	185b      	adds	r3, r3, r1
    78a8:	403a      	ands	r2, r7
	dec = dec*10;
    78aa:	0064      	lsls	r4, r4, #1
	return dec;
    78ac:	b2db      	uxtb	r3, r3
	dec = dec + (bcd_var & 0x0F);
    78ae:	18a4      	adds	r4, r4, r2
	tm_yday = tm_yday + days_per_month_acc[(tm_month-1)] -1;
    78b0:	3b01      	subs	r3, #1
    78b2:	4a21      	ldr	r2, [pc, #132]	; (7938 <gen_posix_time+0xec>)
    78b4:	009b      	lsls	r3, r3, #2
    78b6:	5898      	ldr	r0, [r3, r2]
	return dec;
    78b8:	b2e4      	uxtb	r4, r4
	tm_yday = tm_yday + days_per_month_acc[(tm_month-1)] -1;
    78ba:	3c01      	subs	r4, #1
    78bc:	1824      	adds	r4, r4, r0
	posix_time += ((tm_year-69)/4)*86400 -((tm_year-1)/100)*86400 + ((tm_year+299)/400)*86400;
    78be:	0028      	movs	r0, r5
    78c0:	301f      	adds	r0, #31
    78c2:	491e      	ldr	r1, [pc, #120]	; (793c <gen_posix_time+0xf0>)
    78c4:	0880      	lsrs	r0, r0, #2
    78c6:	1824      	adds	r4, r4, r0
    78c8:	0028      	movs	r0, r5
    78ca:	468b      	mov	fp, r1
    78cc:	21c8      	movs	r1, #200	; 0xc8
    78ce:	3090      	adds	r0, #144	; 0x90
    78d0:	0049      	lsls	r1, r1, #1
    78d2:	30ff      	adds	r0, #255	; 0xff
    78d4:	47d8      	blx	fp
    78d6:	1824      	adds	r4, r4, r0
    78d8:	0028      	movs	r0, r5
    78da:	2164      	movs	r1, #100	; 0x64
    78dc:	3063      	adds	r0, #99	; 0x63
    78de:	47d8      	blx	fp
    78e0:	1a20      	subs	r0, r4, r0
    78e2:	4c17      	ldr	r4, [pc, #92]	; (7940 <gen_posix_time+0xf4>)
	dec = dec*10;
    78e4:	0076      	lsls	r6, r6, #1
	posix_time += ((tm_year-69)/4)*86400 -((tm_year-1)/100)*86400 + ((tm_year+299)/400)*86400;
    78e6:	4344      	muls	r4, r0
	dec = dec + (bcd_var & 0x0F);
    78e8:	4648      	mov	r0, r9
    78ea:	4038      	ands	r0, r7
    78ec:	1830      	adds	r0, r6, r0
	return dec;
    78ee:	b2c0      	uxtb	r0, r0
	dec = dec + (bcd_var & 0x0F);
    78f0:	9b01      	ldr	r3, [sp, #4]
	posix_time = tm_sec+tm_min*60+tm_hour*3600+tm_yday*86400 + (tm_year-70)*31536000;
    78f2:	0106      	lsls	r6, r0, #4
    78f4:	1a36      	subs	r6, r6, r0
	dec = dec + (bcd_var & 0x0F);
    78f6:	4640      	mov	r0, r8
    78f8:	469c      	mov	ip, r3
	posix_time += ((tm_year-69)/4)*86400 -((tm_year-1)/100)*86400 + ((tm_year+299)/400)*86400;
    78fa:	4b12      	ldr	r3, [pc, #72]	; (7944 <gen_posix_time+0xf8>)
	dec = dec + (bcd_var & 0x0F);
    78fc:	4038      	ands	r0, r7
    78fe:	4460      	add	r0, ip
	posix_time += ((tm_year-69)/4)*86400 -((tm_year-1)/100)*86400 + ((tm_year+299)/400)*86400;
    7900:	469c      	mov	ip, r3
	dec = dec + (bcd_var & 0x0F);
    7902:	9a00      	ldr	r2, [sp, #0]
    7904:	4653      	mov	r3, sl
	return dec;
    7906:	b2c0      	uxtb	r0, r0
	posix_time += ((tm_year-69)/4)*86400 -((tm_year-1)/100)*86400 + ((tm_year+299)/400)*86400;
    7908:	4460      	add	r0, ip
	posix_time = tm_sec+tm_min*60+tm_hour*3600+tm_yday*86400 + (tm_year-70)*31536000;
    790a:	00b6      	lsls	r6, r6, #2
	dec = dec + (bcd_var & 0x0F);
    790c:	4694      	mov	ip, r2
	posix_time += ((tm_year-69)/4)*86400 -((tm_year-1)/100)*86400 + ((tm_year+299)/400)*86400;
    790e:	1836      	adds	r6, r6, r0
	posix_time = tm_sec+tm_min*60+tm_hour*3600+tm_yday*86400 + (tm_year-70)*31536000;
    7910:	20e1      	movs	r0, #225	; 0xe1
	dec = dec + (bcd_var & 0x0F);
    7912:	401f      	ands	r7, r3
    7914:	4467      	add	r7, ip
	posix_time = tm_sec+tm_min*60+tm_hour*3600+tm_yday*86400 + (tm_year-70)*31536000;
    7916:	0100      	lsls	r0, r0, #4
	return dec;
    7918:	b2ff      	uxtb	r7, r7
	posix_time = tm_sec+tm_min*60+tm_hour*3600+tm_yday*86400 + (tm_year-70)*31536000;
    791a:	4347      	muls	r7, r0
    791c:	480a      	ldr	r0, [pc, #40]	; (7948 <gen_posix_time+0xfc>)
	tm_year = bcd2int(time_inst->year)+100;//  Years since 1900, time_inst->year is years since 2000
    791e:	3564      	adds	r5, #100	; 0x64
	posix_time = tm_sec+tm_min*60+tm_hour*3600+tm_yday*86400 + (tm_year-70)*31536000;
    7920:	4368      	muls	r0, r5
	posix_time += ((tm_year-69)/4)*86400 -((tm_year-1)/100)*86400 + ((tm_year+299)/400)*86400;
    7922:	19f7      	adds	r7, r6, r7
    7924:	1838      	adds	r0, r7, r0
    7926:	1820      	adds	r0, r4, r0
}
    7928:	b003      	add	sp, #12
    792a:	bc3c      	pop	{r2, r3, r4, r5}
    792c:	4690      	mov	r8, r2
    792e:	4699      	mov	r9, r3
    7930:	46a2      	mov	sl, r4
    7932:	46ab      	mov	fp, r5
    7934:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7936:	46c0      	nop			; (mov r8, r8)
    7938:	20000160 	.word	0x20000160
    793c:	0001bf8d 	.word	0x0001bf8d
    7940:	00015180 	.word	0x00015180
    7944:	7c6beb00 	.word	0x7c6beb00
    7948:	01e13380 	.word	0x01e13380

0000794c <incBcdData>:
uint8_t incBcdData(uint8_t bcdData, int8_t increment, uint8_t dataMin, uint8_t dataMax){
    794c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    794e:	0014      	movs	r4, r2
	dec = dec*10;
    7950:	0902      	lsrs	r2, r0, #4
uint8_t incBcdData(uint8_t bcdData, int8_t increment, uint8_t dataMin, uint8_t dataMax){
    7952:	0005      	movs	r5, r0
	dec = dec*10;
    7954:	0090      	lsls	r0, r2, #2
    7956:	1812      	adds	r2, r2, r0
	dec = dec + (bcd_var & 0x0F);
    7958:	200f      	movs	r0, #15
uint8_t incBcdData(uint8_t bcdData, int8_t increment, uint8_t dataMin, uint8_t dataMax){
    795a:	46ce      	mov	lr, r9
    795c:	4647      	mov	r7, r8
	dec = dec*10;
    795e:	0052      	lsls	r2, r2, #1
	dec = dec + (bcd_var & 0x0F);
    7960:	4028      	ands	r0, r5
    7962:	1810      	adds	r0, r2, r0
uint8_t incBcdData(uint8_t bcdData, int8_t increment, uint8_t dataMin, uint8_t dataMax){
    7964:	b580      	push	{r7, lr}
	dec = dec + (bcd_var & 0x0F);
    7966:	b2c0      	uxtb	r0, r0
	if (increment<0){
    7968:	2900      	cmp	r1, #0
    796a:	db22      	blt.n	79b2 <incBcdData+0x66>
		if (intData<dataMax){
    796c:	4283      	cmp	r3, r0
    796e:	d81d      	bhi.n	79ac <incBcdData+0x60>
	while (binaryInput > 0) {
    7970:	2c00      	cmp	r4, #0
    7972:	d025      	beq.n	79c0 <incBcdData+0x74>
    7974:	4b13      	ldr	r3, [pc, #76]	; (79c4 <incBcdData+0x78>)
    7976:	2600      	movs	r6, #0
    7978:	4699      	mov	r9, r3
    797a:	4b13      	ldr	r3, [pc, #76]	; (79c8 <incBcdData+0x7c>)
    797c:	2700      	movs	r7, #0
    797e:	4698      	mov	r8, r3
		bcdResult |= (binaryInput % 10) << (shift++ << 2);
    7980:	0020      	movs	r0, r4
    7982:	210a      	movs	r1, #10
    7984:	47c8      	blx	r9
    7986:	1c7d      	adds	r5, r7, #1
    7988:	b2c9      	uxtb	r1, r1
    798a:	00bf      	lsls	r7, r7, #2
    798c:	40b9      	lsls	r1, r7
		binaryInput /= 10;
    798e:	0020      	movs	r0, r4
		bcdResult |= (binaryInput % 10) << (shift++ << 2);
    7990:	430e      	orrs	r6, r1
		binaryInput /= 10;
    7992:	210a      	movs	r1, #10
    7994:	47c0      	blx	r8
		bcdResult |= (binaryInput % 10) << (shift++ << 2);
    7996:	b2ed      	uxtb	r5, r5
		binaryInput /= 10;
    7998:	b2c4      	uxtb	r4, r0
		bcdResult |= (binaryInput % 10) << (shift++ << 2);
    799a:	b2f6      	uxtb	r6, r6
    799c:	002f      	movs	r7, r5
	while (binaryInput > 0) {
    799e:	2c00      	cmp	r4, #0
    79a0:	d1ee      	bne.n	7980 <incBcdData+0x34>
}
    79a2:	0030      	movs	r0, r6
    79a4:	bc0c      	pop	{r2, r3}
    79a6:	4690      	mov	r8, r2
    79a8:	4699      	mov	r9, r3
    79aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			intData = intData+1;
    79ac:	3001      	adds	r0, #1
    79ae:	b2c4      	uxtb	r4, r0
    79b0:	e7e0      	b.n	7974 <incBcdData+0x28>
		if (intData>dataMin){
    79b2:	4284      	cmp	r4, r0
    79b4:	d202      	bcs.n	79bc <incBcdData+0x70>
			intData = intData-1;
    79b6:	3801      	subs	r0, #1
    79b8:	b2c4      	uxtb	r4, r0
    79ba:	e7d9      	b.n	7970 <incBcdData+0x24>
    79bc:	001c      	movs	r4, r3
    79be:	e7d7      	b.n	7970 <incBcdData+0x24>
	while (binaryInput > 0) {
    79c0:	2600      	movs	r6, #0
    79c2:	e7ee      	b.n	79a2 <incBcdData+0x56>
    79c4:	0001c099 	.word	0x0001c099
    79c8:	0001bf8d 	.word	0x0001bf8d

000079cc <bcd2int>:
	dec = dec*10;
    79cc:	0903      	lsrs	r3, r0, #4
uint32_t bcd2int(uint8_t bcd_var){
    79ce:	0002      	movs	r2, r0
	dec = dec*10;
    79d0:	0098      	lsls	r0, r3, #2
    79d2:	181b      	adds	r3, r3, r0
	dec = dec + (bcd_var & 0x0F);
    79d4:	200f      	movs	r0, #15
	dec = dec*10;
    79d6:	005b      	lsls	r3, r3, #1
	dec = dec + (bcd_var & 0x0F);
    79d8:	4010      	ands	r0, r2
    79da:	1818      	adds	r0, r3, r0
	return dec;
    79dc:	b2c0      	uxtb	r0, r0
}
    79de:	4770      	bx	lr

000079e0 <load_user_settings>:
extern struct BACKLIGHT_SETTING backlight_setting;




void load_user_settings(void){
    79e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    79e2:	46de      	mov	lr, fp
    79e4:	4657      	mov	r7, sl
    79e6:	4645      	mov	r5, r8
    79e8:	464e      	mov	r6, r9
    79ea:	b5e0      	push	{r5, r6, r7, lr}
	
	//  Load example options structure to find initialized key
	struct OPTIONS tempOptions;
	getDefaultOptions(&tempOptions);
    79ec:	4b32      	ldr	r3, [pc, #200]	; (7ab8 <load_user_settings+0xd8>)
void load_user_settings(void){
    79ee:	b093      	sub	sp, #76	; 0x4c
	getDefaultOptions(&tempOptions);
    79f0:	a804      	add	r0, sp, #16


void EEPROM_read(uint16_t data_address, uint8_t data_buf[], uint8_t bytes_to_read){
	uint16_t limit=20;
	uint16_t timeout;
	struct i2c_master_packet packet = {
    79f2:	af09      	add	r7, sp, #36	; 0x24
	getDefaultOptions(&tempOptions);
    79f4:	469b      	mov	fp, r3
    79f6:	4798      	blx	r3
	struct i2c_master_packet packet = {
    79f8:	4b30      	ldr	r3, [pc, #192]	; (7abc <load_user_settings+0xdc>)
    79fa:	220c      	movs	r2, #12
    79fc:	2100      	movs	r1, #0
    79fe:	0038      	movs	r0, r7
    7a00:	4798      	blx	r3
	
	
	//  Write 16bit read address
	//  Set Up packet
	uint8_t add_buf[2];
	add_buf[0] = data_address>>8;//high byte
    7a02:	2301      	movs	r3, #1
    7a04:	ac01      	add	r4, sp, #4
    7a06:	7023      	strb	r3, [r4, #0]
	add_buf[1] = data_address & 0xff;//low byte
    7a08:	3301      	adds	r3, #1
    7a0a:	7063      	strb	r3, [r4, #1]
	struct i2c_master_packet packet = {
    7a0c:	4b2c      	ldr	r3, [pc, #176]	; (7ac0 <load_user_settings+0xe0>)
	packet.data = add_buf;
    7a0e:	607c      	str	r4, [r7, #4]
	struct i2c_master_packet packet = {
    7a10:	9309      	str	r3, [sp, #36]	; 0x24
    7a12:	2315      	movs	r3, #21
    7a14:	4d2b      	ldr	r5, [pc, #172]	; (7ac4 <load_user_settings+0xe4>)
    7a16:	4698      	mov	r8, r3
    7a18:	4e2b      	ldr	r6, [pc, #172]	; (7ac8 <load_user_settings+0xe8>)
    7a1a:	e005      	b.n	7a28 <load_user_settings+0x48>
    7a1c:	4643      	mov	r3, r8
    7a1e:	3b01      	subs	r3, #1
    7a20:	b29b      	uxth	r3, r3
    7a22:	4698      	mov	r8, r3
	packet.data_length=2;
	timeout=0;
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
		if (timeout++ == limit) {   break;   }
    7a24:	2b00      	cmp	r3, #0
    7a26:	d004      	beq.n	7a32 <load_user_settings+0x52>
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    7a28:	0039      	movs	r1, r7
    7a2a:	0028      	movs	r0, r5
    7a2c:	47b0      	blx	r6
    7a2e:	2800      	cmp	r0, #0
    7a30:	d1f4      	bne.n	7a1c <load_user_settings+0x3c>
	}
	//  Send read request to eeprom chip
	packet.data = data_buf;
    7a32:	4b26      	ldr	r3, [pc, #152]	; (7acc <load_user_settings+0xec>)
    7a34:	4699      	mov	r9, r3
    7a36:	607b      	str	r3, [r7, #4]
	packet.data_length=bytes_to_read;
    7a38:	2314      	movs	r3, #20
    7a3a:	807b      	strh	r3, [r7, #2]
    7a3c:	3301      	adds	r3, #1
    7a3e:	4698      	mov	r8, r3
    7a40:	4b23      	ldr	r3, [pc, #140]	; (7ad0 <load_user_settings+0xf0>)
    7a42:	469a      	mov	sl, r3
    7a44:	e005      	b.n	7a52 <load_user_settings+0x72>
    7a46:	4643      	mov	r3, r8
    7a48:	3b01      	subs	r3, #1
    7a4a:	b29b      	uxth	r3, r3
    7a4c:	4698      	mov	r8, r3
	timeout=0;
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
		if (timeout++ == limit) {   break;   }
    7a4e:	2b00      	cmp	r3, #0
    7a50:	d004      	beq.n	7a5c <load_user_settings+0x7c>
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    7a52:	0039      	movs	r1, r7
    7a54:	0028      	movs	r0, r5
    7a56:	47d0      	blx	sl
    7a58:	2800      	cmp	r0, #0
    7a5a:	d1f4      	bne.n	7a46 <load_user_settings+0x66>
	if (options.Settings_Initialized_Key != tempOptions.Settings_Initialized_Key){
    7a5c:	464b      	mov	r3, r9
    7a5e:	2123      	movs	r1, #35	; 0x23
    7a60:	7cda      	ldrb	r2, [r3, #19]
    7a62:	466b      	mov	r3, sp
    7a64:	185b      	adds	r3, r3, r1
    7a66:	781b      	ldrb	r3, [r3, #0]
    7a68:	429a      	cmp	r2, r3
    7a6a:	d01d      	beq.n	7aa8 <load_user_settings+0xc8>
		getDefaultOptions(&options);
    7a6c:	4648      	mov	r0, r9
    7a6e:	47d8      	blx	fp
	
	uint16_t limit=200;
	uint16_t timeout;
	//  Packet template
	packet.data = send_buf;
	packet.ten_bit_address = false;
    7a70:	2300      	movs	r3, #0
    7a72:	7223      	strb	r3, [r4, #8]
	packet.high_speed = false;
    7a74:	7263      	strb	r3, [r4, #9]
	packet.hs_master_code = 0x0;
    7a76:	72a3      	strb	r3, [r4, #10]
	packet.address = EEPROM_add;
    7a78:	4b16      	ldr	r3, [pc, #88]	; (7ad4 <load_user_settings+0xf4>)
	packet.data = send_buf;
    7a7a:	6067      	str	r7, [r4, #4]
	packet.address = EEPROM_add;
    7a7c:	9301      	str	r3, [sp, #4]
			bytes_packet = bytes_to_write;
		}
		packet.data_length = bytes_packet + 2;// Include 16-bit address
		//  Set address
		address_packet = address_init + p*page_size;
		send_buf[0] = address_packet>>8;//high byte
    7a7e:	2301      	movs	r3, #1
    7a80:	2026      	movs	r0, #38	; 0x26
    7a82:	703b      	strb	r3, [r7, #0]
		send_buf[1] = address_packet & 0x00FF;// low byte
    7a84:	3301      	adds	r3, #1
    7a86:	707b      	strb	r3, [r7, #1]
    7a88:	2214      	movs	r2, #20
    7a8a:	4649      	mov	r1, r9
    7a8c:	4468      	add	r0, sp
    7a8e:	4b12      	ldr	r3, [pc, #72]	; (7ad8 <load_user_settings+0xf8>)
    7a90:	4798      	blx	r3
    7a92:	27c9      	movs	r7, #201	; 0xc9
    7a94:	e003      	b.n	7a9e <load_user_settings+0xbe>
    7a96:	3f01      	subs	r7, #1
    7a98:	b2bf      	uxth	r7, r7
			send_buf[k+2] = data_buf[p*page_size+k];
		}
		// Send Packet
		timeout=0;
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
			if (timeout++ == limit) {   break;   }
    7a9a:	2f00      	cmp	r7, #0
    7a9c:	d004      	beq.n	7aa8 <load_user_settings+0xc8>
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    7a9e:	0021      	movs	r1, r4
    7aa0:	0028      	movs	r0, r5
    7aa2:	47b0      	blx	r6
    7aa4:	2800      	cmp	r0, #0
    7aa6:	d1f6      	bne.n	7a96 <load_user_settings+0xb6>
}
    7aa8:	b013      	add	sp, #76	; 0x4c
    7aaa:	bc3c      	pop	{r2, r3, r4, r5}
    7aac:	4690      	mov	r8, r2
    7aae:	4699      	mov	r9, r3
    7ab0:	46a2      	mov	sl, r4
    7ab2:	46ab      	mov	fp, r5
    7ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7ab6:	46c0      	nop			; (mov r8, r8)
    7ab8:	000194ed 	.word	0x000194ed
    7abc:	0001f06d 	.word	0x0001f06d
    7ac0:	00020057 	.word	0x00020057
    7ac4:	20001140 	.word	0x20001140
    7ac8:	0000baf5 	.word	0x0000baf5
    7acc:	20003770 	.word	0x20003770
    7ad0:	0000bad5 	.word	0x0000bad5
    7ad4:	00160057 	.word	0x00160057
    7ad8:	0001efe9 	.word	0x0001efe9

00007adc <save_user_settings>:
void save_user_settings(void){
    7adc:	b570      	push	{r4, r5, r6, lr}
    7ade:	b08c      	sub	sp, #48	; 0x30
	packet.ten_bit_address = false;
    7ae0:	2200      	movs	r2, #0
    7ae2:	4669      	mov	r1, sp
    7ae4:	720a      	strb	r2, [r1, #8]
	packet.high_speed = false;
    7ae6:	724a      	strb	r2, [r1, #9]
	packet.hs_master_code = 0x0;
    7ae8:	728a      	strb	r2, [r1, #10]
	packet.address = EEPROM_add;
    7aea:	4a0e      	ldr	r2, [pc, #56]	; (7b24 <save_user_settings+0x48>)
    7aec:	200e      	movs	r0, #14
    7aee:	9200      	str	r2, [sp, #0]
		send_buf[0] = address_packet>>8;//high byte
    7af0:	2201      	movs	r2, #1
	packet.data = send_buf;
    7af2:	ab03      	add	r3, sp, #12
		send_buf[0] = address_packet>>8;//high byte
    7af4:	701a      	strb	r2, [r3, #0]
		send_buf[1] = address_packet & 0x00FF;// low byte
    7af6:	3201      	adds	r2, #1
    7af8:	705a      	strb	r2, [r3, #1]
	packet.data = send_buf;
    7afa:	9301      	str	r3, [sp, #4]
    7afc:	3212      	adds	r2, #18
    7afe:	490a      	ldr	r1, [pc, #40]	; (7b28 <save_user_settings+0x4c>)
    7b00:	4468      	add	r0, sp
    7b02:	4b0a      	ldr	r3, [pc, #40]	; (7b2c <save_user_settings+0x50>)
    7b04:	4798      	blx	r3
		send_buf[1] = address_packet & 0x00FF;// low byte
    7b06:	24c9      	movs	r4, #201	; 0xc9
    7b08:	4e09      	ldr	r6, [pc, #36]	; (7b30 <save_user_settings+0x54>)
    7b0a:	4d0a      	ldr	r5, [pc, #40]	; (7b34 <save_user_settings+0x58>)
    7b0c:	e003      	b.n	7b16 <save_user_settings+0x3a>
    7b0e:	3c01      	subs	r4, #1
    7b10:	b2a4      	uxth	r4, r4
			if (timeout++ == limit) {   break;   }
    7b12:	2c00      	cmp	r4, #0
    7b14:	d004      	beq.n	7b20 <save_user_settings+0x44>
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    7b16:	4669      	mov	r1, sp
    7b18:	0030      	movs	r0, r6
    7b1a:	47a8      	blx	r5
    7b1c:	2800      	cmp	r0, #0
    7b1e:	d1f6      	bne.n	7b0e <save_user_settings+0x32>
}
    7b20:	b00c      	add	sp, #48	; 0x30
    7b22:	bd70      	pop	{r4, r5, r6, pc}
    7b24:	00160057 	.word	0x00160057
    7b28:	20003770 	.word	0x20003770
    7b2c:	0001efe9 	.word	0x0001efe9
    7b30:	20001140 	.word	0x20001140
    7b34:	0000baf5 	.word	0x0000baf5

00007b38 <save_calibration>:
void save_calibration(void){
    7b38:	b5f0      	push	{r4, r5, r6, r7, lr}
    7b3a:	4657      	mov	r7, sl
    7b3c:	4645      	mov	r5, r8
    7b3e:	46de      	mov	lr, fp
    7b40:	464e      	mov	r6, r9
    7b42:	b5e0      	push	{r5, r6, r7, lr}
    7b44:	b08d      	sub	sp, #52	; 0x34
	packet.ten_bit_address = false;
    7b46:	2300      	movs	r3, #0
    7b48:	466a      	mov	r2, sp
    7b4a:	7213      	strb	r3, [r2, #8]
	packet.high_speed = false;
    7b4c:	7253      	strb	r3, [r2, #9]
	packet.hs_master_code = 0x0;
    7b4e:	7293      	strb	r3, [r2, #10]
	packet.address = EEPROM_add;
    7b50:	3357      	adds	r3, #87	; 0x57
    7b52:	8013      	strh	r3, [r2, #0]
    7b54:	2300      	movs	r3, #0
    7b56:	4699      	mov	r9, r3
    7b58:	3360      	adds	r3, #96	; 0x60
    7b5a:	469a      	mov	sl, r3
    7b5c:	4bcd      	ldr	r3, [pc, #820]	; (7e94 <save_calibration+0x35c>)
	packet.data = send_buf;
    7b5e:	af03      	add	r7, sp, #12
    7b60:	469b      	mov	fp, r3
    7b62:	4bcd      	ldr	r3, [pc, #820]	; (7e98 <save_calibration+0x360>)
    7b64:	4dcd      	ldr	r5, [pc, #820]	; (7e9c <save_calibration+0x364>)
    7b66:	4698      	mov	r8, r3
    7b68:	4ccd      	ldr	r4, [pc, #820]	; (7ea0 <save_calibration+0x368>)
    7b6a:	9701      	str	r7, [sp, #4]
		if (bytes_to_write>page_size){
    7b6c:	4653      	mov	r3, sl
    7b6e:	2b20      	cmp	r3, #32
    7b70:	d900      	bls.n	7b74 <save_calibration+0x3c>
    7b72:	e188      	b.n	7e86 <save_calibration+0x34e>
    7b74:	4652      	mov	r2, sl
    7b76:	3302      	adds	r3, #2
		packet.data_length = bytes_packet + 2;// Include 16-bit address
    7b78:	4669      	mov	r1, sp
    7b7a:	804b      	strh	r3, [r1, #2]
		send_buf[0] = address_packet>>8;//high byte
    7b7c:	2303      	movs	r3, #3
    7b7e:	703b      	strb	r3, [r7, #0]
		send_buf[1] = address_packet & 0x00FF;// low byte
    7b80:	464b      	mov	r3, r9
    7b82:	707b      	strb	r3, [r7, #1]
    7b84:	230e      	movs	r3, #14
    7b86:	4659      	mov	r1, fp
			send_buf[k+2] = data_buf[p*page_size+k];
    7b88:	3a01      	subs	r2, #1
    7b8a:	446b      	add	r3, sp
    7b8c:	b2d2      	uxtb	r2, r2
    7b8e:	3201      	adds	r2, #1
    7b90:	4449      	add	r1, r9
    7b92:	0018      	movs	r0, r3
    7b94:	47c0      	blx	r8
    7b96:	26c9      	movs	r6, #201	; 0xc9
    7b98:	e003      	b.n	7ba2 <save_calibration+0x6a>
    7b9a:	3e01      	subs	r6, #1
    7b9c:	b2b6      	uxth	r6, r6
			if (timeout++ == limit) {   break;   }
    7b9e:	2e00      	cmp	r6, #0
    7ba0:	d004      	beq.n	7bac <save_calibration+0x74>
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    7ba2:	4669      	mov	r1, sp
    7ba4:	0028      	movs	r0, r5
    7ba6:	47a0      	blx	r4
    7ba8:	2800      	cmp	r0, #0
    7baa:	d1f6      	bne.n	7b9a <save_calibration+0x62>
    7bac:	2320      	movs	r3, #32
    7bae:	469c      	mov	ip, r3
    7bb0:	44e1      	add	r9, ip
	for (p=0;p<packets;p++){
    7bb2:	464b      	mov	r3, r9
    7bb4:	2b80      	cmp	r3, #128	; 0x80
    7bb6:	d1d9      	bne.n	7b6c <save_calibration+0x34>
	packet.ten_bit_address = false;
    7bb8:	2300      	movs	r3, #0
    7bba:	466a      	mov	r2, sp
    7bbc:	7213      	strb	r3, [r2, #8]
	packet.high_speed = false;
    7bbe:	7253      	strb	r3, [r2, #9]
	packet.hs_master_code = 0x0;
    7bc0:	7293      	strb	r3, [r2, #10]
	packet.address = EEPROM_add;
    7bc2:	3357      	adds	r3, #87	; 0x57
    7bc4:	8013      	strh	r3, [r2, #0]
    7bc6:	2300      	movs	r3, #0
    7bc8:	4699      	mov	r9, r3
    7bca:	3360      	adds	r3, #96	; 0x60
    7bcc:	469a      	mov	sl, r3
    7bce:	4bb5      	ldr	r3, [pc, #724]	; (7ea4 <save_calibration+0x36c>)
	packet.data = send_buf;
    7bd0:	9701      	str	r7, [sp, #4]
    7bd2:	469b      	mov	fp, r3
		if (bytes_to_write>page_size){
    7bd4:	4653      	mov	r3, sl
    7bd6:	2b20      	cmp	r3, #32
    7bd8:	d900      	bls.n	7bdc <save_calibration+0xa4>
    7bda:	e14d      	b.n	7e78 <save_calibration+0x340>
    7bdc:	4652      	mov	r2, sl
    7bde:	3302      	adds	r3, #2
		packet.data_length = bytes_packet + 2;// Include 16-bit address
    7be0:	4669      	mov	r1, sp
    7be2:	804b      	strh	r3, [r1, #2]
		send_buf[0] = address_packet>>8;//high byte
    7be4:	2304      	movs	r3, #4
    7be6:	703b      	strb	r3, [r7, #0]
		send_buf[1] = address_packet & 0x00FF;// low byte
    7be8:	464b      	mov	r3, r9
    7bea:	707b      	strb	r3, [r7, #1]
    7bec:	230e      	movs	r3, #14
    7bee:	4659      	mov	r1, fp
			send_buf[k+2] = data_buf[p*page_size+k];
    7bf0:	3a01      	subs	r2, #1
    7bf2:	446b      	add	r3, sp
    7bf4:	b2d2      	uxtb	r2, r2
    7bf6:	3201      	adds	r2, #1
    7bf8:	4449      	add	r1, r9
    7bfa:	0018      	movs	r0, r3
    7bfc:	47c0      	blx	r8
    7bfe:	26c9      	movs	r6, #201	; 0xc9
    7c00:	e003      	b.n	7c0a <save_calibration+0xd2>
    7c02:	3e01      	subs	r6, #1
    7c04:	b2b6      	uxth	r6, r6
			if (timeout++ == limit) {   break;   }
    7c06:	2e00      	cmp	r6, #0
    7c08:	d004      	beq.n	7c14 <save_calibration+0xdc>
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    7c0a:	4669      	mov	r1, sp
    7c0c:	0028      	movs	r0, r5
    7c0e:	47a0      	blx	r4
    7c10:	2800      	cmp	r0, #0
    7c12:	d1f6      	bne.n	7c02 <save_calibration+0xca>
    7c14:	2320      	movs	r3, #32
    7c16:	469c      	mov	ip, r3
    7c18:	44e1      	add	r9, ip
	for (p=0;p<packets;p++){
    7c1a:	464b      	mov	r3, r9
    7c1c:	2b80      	cmp	r3, #128	; 0x80
    7c1e:	d1d9      	bne.n	7bd4 <save_calibration+0x9c>
	packet.ten_bit_address = false;
    7c20:	2300      	movs	r3, #0
    7c22:	466a      	mov	r2, sp
    7c24:	7213      	strb	r3, [r2, #8]
	packet.high_speed = false;
    7c26:	7253      	strb	r3, [r2, #9]
	packet.hs_master_code = 0x0;
    7c28:	7293      	strb	r3, [r2, #10]
	packet.address = EEPROM_add;
    7c2a:	3357      	adds	r3, #87	; 0x57
    7c2c:	8013      	strh	r3, [r2, #0]
    7c2e:	2300      	movs	r3, #0
    7c30:	4699      	mov	r9, r3
    7c32:	3360      	adds	r3, #96	; 0x60
    7c34:	469a      	mov	sl, r3
    7c36:	4b9c      	ldr	r3, [pc, #624]	; (7ea8 <save_calibration+0x370>)
	packet.data = send_buf;
    7c38:	9701      	str	r7, [sp, #4]
    7c3a:	469b      	mov	fp, r3
		if (bytes_to_write>page_size){
    7c3c:	4653      	mov	r3, sl
    7c3e:	2b20      	cmp	r3, #32
    7c40:	d900      	bls.n	7c44 <save_calibration+0x10c>
    7c42:	e112      	b.n	7e6a <save_calibration+0x332>
    7c44:	4652      	mov	r2, sl
    7c46:	3302      	adds	r3, #2
		packet.data_length = bytes_packet + 2;// Include 16-bit address
    7c48:	4669      	mov	r1, sp
    7c4a:	804b      	strh	r3, [r1, #2]
		send_buf[0] = address_packet>>8;//high byte
    7c4c:	2305      	movs	r3, #5
    7c4e:	703b      	strb	r3, [r7, #0]
		send_buf[1] = address_packet & 0x00FF;// low byte
    7c50:	464b      	mov	r3, r9
    7c52:	707b      	strb	r3, [r7, #1]
    7c54:	230e      	movs	r3, #14
    7c56:	4659      	mov	r1, fp
			send_buf[k+2] = data_buf[p*page_size+k];
    7c58:	3a01      	subs	r2, #1
    7c5a:	446b      	add	r3, sp
    7c5c:	b2d2      	uxtb	r2, r2
    7c5e:	3201      	adds	r2, #1
    7c60:	4449      	add	r1, r9
    7c62:	0018      	movs	r0, r3
    7c64:	47c0      	blx	r8
    7c66:	26c9      	movs	r6, #201	; 0xc9
    7c68:	e003      	b.n	7c72 <save_calibration+0x13a>
    7c6a:	3e01      	subs	r6, #1
    7c6c:	b2b6      	uxth	r6, r6
			if (timeout++ == limit) {   break;   }
    7c6e:	2e00      	cmp	r6, #0
    7c70:	d004      	beq.n	7c7c <save_calibration+0x144>
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    7c72:	4669      	mov	r1, sp
    7c74:	0028      	movs	r0, r5
    7c76:	47a0      	blx	r4
    7c78:	2800      	cmp	r0, #0
    7c7a:	d1f6      	bne.n	7c6a <save_calibration+0x132>
    7c7c:	2320      	movs	r3, #32
    7c7e:	469c      	mov	ip, r3
    7c80:	44e1      	add	r9, ip
	for (p=0;p<packets;p++){
    7c82:	464b      	mov	r3, r9
    7c84:	2b80      	cmp	r3, #128	; 0x80
    7c86:	d1d9      	bne.n	7c3c <save_calibration+0x104>
	packet.ten_bit_address = false;
    7c88:	2300      	movs	r3, #0
    7c8a:	466a      	mov	r2, sp
    7c8c:	7213      	strb	r3, [r2, #8]
	packet.high_speed = false;
    7c8e:	7253      	strb	r3, [r2, #9]
	packet.hs_master_code = 0x0;
    7c90:	7293      	strb	r3, [r2, #10]
	packet.address = EEPROM_add;
    7c92:	3357      	adds	r3, #87	; 0x57
    7c94:	8013      	strh	r3, [r2, #0]
    7c96:	2300      	movs	r3, #0
    7c98:	4699      	mov	r9, r3
    7c9a:	3360      	adds	r3, #96	; 0x60
    7c9c:	469a      	mov	sl, r3
    7c9e:	4b83      	ldr	r3, [pc, #524]	; (7eac <save_calibration+0x374>)
	packet.data = send_buf;
    7ca0:	9701      	str	r7, [sp, #4]
    7ca2:	469b      	mov	fp, r3
		if (bytes_to_write>page_size){
    7ca4:	4653      	mov	r3, sl
    7ca6:	2b20      	cmp	r3, #32
    7ca8:	d900      	bls.n	7cac <save_calibration+0x174>
    7caa:	e0d7      	b.n	7e5c <save_calibration+0x324>
    7cac:	4652      	mov	r2, sl
    7cae:	3302      	adds	r3, #2
		packet.data_length = bytes_packet + 2;// Include 16-bit address
    7cb0:	4669      	mov	r1, sp
    7cb2:	804b      	strh	r3, [r1, #2]
		send_buf[0] = address_packet>>8;//high byte
    7cb4:	2306      	movs	r3, #6
    7cb6:	703b      	strb	r3, [r7, #0]
		send_buf[1] = address_packet & 0x00FF;// low byte
    7cb8:	464b      	mov	r3, r9
    7cba:	707b      	strb	r3, [r7, #1]
    7cbc:	230e      	movs	r3, #14
    7cbe:	4659      	mov	r1, fp
			send_buf[k+2] = data_buf[p*page_size+k];
    7cc0:	3a01      	subs	r2, #1
    7cc2:	446b      	add	r3, sp
    7cc4:	b2d2      	uxtb	r2, r2
    7cc6:	3201      	adds	r2, #1
    7cc8:	4449      	add	r1, r9
    7cca:	0018      	movs	r0, r3
    7ccc:	47c0      	blx	r8
    7cce:	26c9      	movs	r6, #201	; 0xc9
    7cd0:	e003      	b.n	7cda <save_calibration+0x1a2>
    7cd2:	3e01      	subs	r6, #1
    7cd4:	b2b6      	uxth	r6, r6
			if (timeout++ == limit) {   break;   }
    7cd6:	2e00      	cmp	r6, #0
    7cd8:	d004      	beq.n	7ce4 <save_calibration+0x1ac>
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    7cda:	4669      	mov	r1, sp
    7cdc:	0028      	movs	r0, r5
    7cde:	47a0      	blx	r4
    7ce0:	2800      	cmp	r0, #0
    7ce2:	d1f6      	bne.n	7cd2 <save_calibration+0x19a>
    7ce4:	2320      	movs	r3, #32
    7ce6:	469c      	mov	ip, r3
    7ce8:	44e1      	add	r9, ip
	for (p=0;p<packets;p++){
    7cea:	464b      	mov	r3, r9
    7cec:	2b80      	cmp	r3, #128	; 0x80
    7cee:	d1d9      	bne.n	7ca4 <save_calibration+0x16c>
	packet.ten_bit_address = false;
    7cf0:	2300      	movs	r3, #0
    7cf2:	466a      	mov	r2, sp
    7cf4:	7213      	strb	r3, [r2, #8]
	packet.high_speed = false;
    7cf6:	7253      	strb	r3, [r2, #9]
	packet.hs_master_code = 0x0;
    7cf8:	7293      	strb	r3, [r2, #10]
	packet.address = EEPROM_add;
    7cfa:	3357      	adds	r3, #87	; 0x57
    7cfc:	8013      	strh	r3, [r2, #0]
    7cfe:	2300      	movs	r3, #0
    7d00:	4699      	mov	r9, r3
    7d02:	3360      	adds	r3, #96	; 0x60
    7d04:	469a      	mov	sl, r3
    7d06:	4b6a      	ldr	r3, [pc, #424]	; (7eb0 <save_calibration+0x378>)
	packet.data = send_buf;
    7d08:	9701      	str	r7, [sp, #4]
    7d0a:	469b      	mov	fp, r3
		if (bytes_to_write>page_size){
    7d0c:	4653      	mov	r3, sl
    7d0e:	2b20      	cmp	r3, #32
    7d10:	d900      	bls.n	7d14 <save_calibration+0x1dc>
    7d12:	e09c      	b.n	7e4e <save_calibration+0x316>
    7d14:	4652      	mov	r2, sl
    7d16:	3302      	adds	r3, #2
		packet.data_length = bytes_packet + 2;// Include 16-bit address
    7d18:	4669      	mov	r1, sp
    7d1a:	804b      	strh	r3, [r1, #2]
		send_buf[0] = address_packet>>8;//high byte
    7d1c:	2307      	movs	r3, #7
    7d1e:	703b      	strb	r3, [r7, #0]
		send_buf[1] = address_packet & 0x00FF;// low byte
    7d20:	464b      	mov	r3, r9
    7d22:	707b      	strb	r3, [r7, #1]
    7d24:	230e      	movs	r3, #14
    7d26:	4659      	mov	r1, fp
			send_buf[k+2] = data_buf[p*page_size+k];
    7d28:	3a01      	subs	r2, #1
    7d2a:	446b      	add	r3, sp
    7d2c:	b2d2      	uxtb	r2, r2
    7d2e:	3201      	adds	r2, #1
    7d30:	4449      	add	r1, r9
    7d32:	0018      	movs	r0, r3
    7d34:	47c0      	blx	r8
    7d36:	26c9      	movs	r6, #201	; 0xc9
    7d38:	e003      	b.n	7d42 <save_calibration+0x20a>
    7d3a:	3e01      	subs	r6, #1
    7d3c:	b2b6      	uxth	r6, r6
			if (timeout++ == limit) {   break;   }
    7d3e:	2e00      	cmp	r6, #0
    7d40:	d004      	beq.n	7d4c <save_calibration+0x214>
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    7d42:	4669      	mov	r1, sp
    7d44:	0028      	movs	r0, r5
    7d46:	47a0      	blx	r4
    7d48:	2800      	cmp	r0, #0
    7d4a:	d1f6      	bne.n	7d3a <save_calibration+0x202>
    7d4c:	2320      	movs	r3, #32
    7d4e:	469c      	mov	ip, r3
    7d50:	44e1      	add	r9, ip
	for (p=0;p<packets;p++){
    7d52:	464b      	mov	r3, r9
    7d54:	2b80      	cmp	r3, #128	; 0x80
    7d56:	d1d9      	bne.n	7d0c <save_calibration+0x1d4>
	packet.ten_bit_address = false;
    7d58:	2300      	movs	r3, #0
    7d5a:	466a      	mov	r2, sp
    7d5c:	7213      	strb	r3, [r2, #8]
	packet.high_speed = false;
    7d5e:	7253      	strb	r3, [r2, #9]
	packet.hs_master_code = 0x0;
    7d60:	7293      	strb	r3, [r2, #10]
	packet.address = EEPROM_add;
    7d62:	3357      	adds	r3, #87	; 0x57
    7d64:	8013      	strh	r3, [r2, #0]
    7d66:	2300      	movs	r3, #0
    7d68:	4699      	mov	r9, r3
    7d6a:	3354      	adds	r3, #84	; 0x54
    7d6c:	469a      	mov	sl, r3
    7d6e:	4b51      	ldr	r3, [pc, #324]	; (7eb4 <save_calibration+0x37c>)
	packet.data = send_buf;
    7d70:	9701      	str	r7, [sp, #4]
    7d72:	469b      	mov	fp, r3
		if (bytes_to_write>page_size){
    7d74:	4653      	mov	r3, sl
    7d76:	2b20      	cmp	r3, #32
    7d78:	d862      	bhi.n	7e40 <save_calibration+0x308>
    7d7a:	4652      	mov	r2, sl
    7d7c:	3302      	adds	r3, #2
		packet.data_length = bytes_packet + 2;// Include 16-bit address
    7d7e:	4669      	mov	r1, sp
    7d80:	804b      	strh	r3, [r1, #2]
		send_buf[0] = address_packet>>8;//high byte
    7d82:	2308      	movs	r3, #8
    7d84:	703b      	strb	r3, [r7, #0]
		send_buf[1] = address_packet & 0x00FF;// low byte
    7d86:	464b      	mov	r3, r9
    7d88:	707b      	strb	r3, [r7, #1]
    7d8a:	230e      	movs	r3, #14
    7d8c:	4659      	mov	r1, fp
			send_buf[k+2] = data_buf[p*page_size+k];
    7d8e:	3a01      	subs	r2, #1
    7d90:	446b      	add	r3, sp
    7d92:	b2d2      	uxtb	r2, r2
    7d94:	3201      	adds	r2, #1
    7d96:	4449      	add	r1, r9
    7d98:	0018      	movs	r0, r3
    7d9a:	47c0      	blx	r8
    7d9c:	26c9      	movs	r6, #201	; 0xc9
    7d9e:	e003      	b.n	7da8 <save_calibration+0x270>
    7da0:	3e01      	subs	r6, #1
    7da2:	b2b6      	uxth	r6, r6
			if (timeout++ == limit) {   break;   }
    7da4:	2e00      	cmp	r6, #0
    7da6:	d004      	beq.n	7db2 <save_calibration+0x27a>
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    7da8:	4669      	mov	r1, sp
    7daa:	0028      	movs	r0, r5
    7dac:	47a0      	blx	r4
    7dae:	2800      	cmp	r0, #0
    7db0:	d1f6      	bne.n	7da0 <save_calibration+0x268>
    7db2:	2320      	movs	r3, #32
    7db4:	469c      	mov	ip, r3
    7db6:	44e1      	add	r9, ip
	for (p=0;p<packets;p++){
    7db8:	464b      	mov	r3, r9
    7dba:	2b60      	cmp	r3, #96	; 0x60
    7dbc:	d1da      	bne.n	7d74 <save_calibration+0x23c>
	packet.ten_bit_address = false;
    7dbe:	2300      	movs	r3, #0
    7dc0:	466a      	mov	r2, sp
    7dc2:	7213      	strb	r3, [r2, #8]
	packet.high_speed = false;
    7dc4:	7253      	strb	r3, [r2, #9]
	packet.hs_master_code = 0x0;
    7dc6:	7293      	strb	r3, [r2, #10]
	packet.address = EEPROM_add;
    7dc8:	3357      	adds	r3, #87	; 0x57
    7dca:	8013      	strh	r3, [r2, #0]
    7dcc:	2300      	movs	r3, #0
    7dce:	4699      	mov	r9, r3
    7dd0:	3354      	adds	r3, #84	; 0x54
    7dd2:	469a      	mov	sl, r3
    7dd4:	4b38      	ldr	r3, [pc, #224]	; (7eb8 <save_calibration+0x380>)
	packet.data = send_buf;
    7dd6:	9701      	str	r7, [sp, #4]
    7dd8:	469b      	mov	fp, r3
		if (bytes_to_write>page_size){
    7dda:	4653      	mov	r3, sl
    7ddc:	2b20      	cmp	r3, #32
    7dde:	d828      	bhi.n	7e32 <save_calibration+0x2fa>
    7de0:	4652      	mov	r2, sl
    7de2:	3302      	adds	r3, #2
		packet.data_length = bytes_packet + 2;// Include 16-bit address
    7de4:	4669      	mov	r1, sp
    7de6:	804b      	strh	r3, [r1, #2]
		send_buf[0] = address_packet>>8;//high byte
    7de8:	2309      	movs	r3, #9
    7dea:	703b      	strb	r3, [r7, #0]
		send_buf[1] = address_packet & 0x00FF;// low byte
    7dec:	464b      	mov	r3, r9
    7dee:	707b      	strb	r3, [r7, #1]
    7df0:	230e      	movs	r3, #14
    7df2:	4659      	mov	r1, fp
			send_buf[k+2] = data_buf[p*page_size+k];
    7df4:	3a01      	subs	r2, #1
    7df6:	446b      	add	r3, sp
    7df8:	b2d2      	uxtb	r2, r2
    7dfa:	3201      	adds	r2, #1
    7dfc:	4449      	add	r1, r9
    7dfe:	0018      	movs	r0, r3
    7e00:	47c0      	blx	r8
    7e02:	26c9      	movs	r6, #201	; 0xc9
    7e04:	e003      	b.n	7e0e <save_calibration+0x2d6>
    7e06:	3e01      	subs	r6, #1
    7e08:	b2b6      	uxth	r6, r6
			if (timeout++ == limit) {   break;   }
    7e0a:	2e00      	cmp	r6, #0
    7e0c:	d004      	beq.n	7e18 <save_calibration+0x2e0>
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    7e0e:	4669      	mov	r1, sp
    7e10:	0028      	movs	r0, r5
    7e12:	47a0      	blx	r4
    7e14:	2800      	cmp	r0, #0
    7e16:	d1f6      	bne.n	7e06 <save_calibration+0x2ce>
    7e18:	2320      	movs	r3, #32
    7e1a:	469c      	mov	ip, r3
    7e1c:	44e1      	add	r9, ip
	for (p=0;p<packets;p++){
    7e1e:	464b      	mov	r3, r9
    7e20:	2b60      	cmp	r3, #96	; 0x60
    7e22:	d1da      	bne.n	7dda <save_calibration+0x2a2>
}
    7e24:	b00d      	add	sp, #52	; 0x34
    7e26:	bc3c      	pop	{r2, r3, r4, r5}
    7e28:	4690      	mov	r8, r2
    7e2a:	4699      	mov	r9, r3
    7e2c:	46a2      	mov	sl, r4
    7e2e:	46ab      	mov	fp, r5
    7e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bytes_to_write = bytes_to_write-page_size;
    7e32:	4653      	mov	r3, sl
    7e34:	3b20      	subs	r3, #32
    7e36:	b2db      	uxtb	r3, r3
    7e38:	469a      	mov	sl, r3
			bytes_packet = page_size;
    7e3a:	2220      	movs	r2, #32
			bytes_to_write = bytes_to_write-page_size;
    7e3c:	2322      	movs	r3, #34	; 0x22
    7e3e:	e7d1      	b.n	7de4 <save_calibration+0x2ac>
    7e40:	4653      	mov	r3, sl
    7e42:	3b20      	subs	r3, #32
    7e44:	b2db      	uxtb	r3, r3
    7e46:	469a      	mov	sl, r3
			bytes_packet = page_size;
    7e48:	2220      	movs	r2, #32
			bytes_to_write = bytes_to_write-page_size;
    7e4a:	2322      	movs	r3, #34	; 0x22
    7e4c:	e797      	b.n	7d7e <save_calibration+0x246>
    7e4e:	4653      	mov	r3, sl
    7e50:	3b20      	subs	r3, #32
    7e52:	b2db      	uxtb	r3, r3
    7e54:	469a      	mov	sl, r3
			bytes_packet = page_size;
    7e56:	2220      	movs	r2, #32
			bytes_to_write = bytes_to_write-page_size;
    7e58:	2322      	movs	r3, #34	; 0x22
    7e5a:	e75d      	b.n	7d18 <save_calibration+0x1e0>
    7e5c:	4653      	mov	r3, sl
    7e5e:	3b20      	subs	r3, #32
    7e60:	b2db      	uxtb	r3, r3
    7e62:	469a      	mov	sl, r3
			bytes_packet = page_size;
    7e64:	2220      	movs	r2, #32
			bytes_to_write = bytes_to_write-page_size;
    7e66:	2322      	movs	r3, #34	; 0x22
    7e68:	e722      	b.n	7cb0 <save_calibration+0x178>
    7e6a:	4653      	mov	r3, sl
    7e6c:	3b20      	subs	r3, #32
    7e6e:	b2db      	uxtb	r3, r3
    7e70:	469a      	mov	sl, r3
			bytes_packet = page_size;
    7e72:	2220      	movs	r2, #32
			bytes_to_write = bytes_to_write-page_size;
    7e74:	2322      	movs	r3, #34	; 0x22
    7e76:	e6e7      	b.n	7c48 <save_calibration+0x110>
    7e78:	4653      	mov	r3, sl
    7e7a:	3b20      	subs	r3, #32
    7e7c:	b2db      	uxtb	r3, r3
    7e7e:	469a      	mov	sl, r3
			bytes_packet = page_size;
    7e80:	2220      	movs	r2, #32
			bytes_to_write = bytes_to_write-page_size;
    7e82:	2322      	movs	r3, #34	; 0x22
    7e84:	e6ac      	b.n	7be0 <save_calibration+0xa8>
    7e86:	4653      	mov	r3, sl
    7e88:	3b20      	subs	r3, #32
    7e8a:	b2db      	uxtb	r3, r3
    7e8c:	469a      	mov	sl, r3
			bytes_packet = page_size;
    7e8e:	2220      	movs	r2, #32
			bytes_to_write = bytes_to_write-page_size;
    7e90:	2322      	movs	r3, #34	; 0x22
    7e92:	e671      	b.n	7b78 <save_calibration+0x40>
    7e94:	200051f4 	.word	0x200051f4
    7e98:	0001efe9 	.word	0x0001efe9
    7e9c:	20001140 	.word	0x20001140
    7ea0:	0000baf5 	.word	0x0000baf5
    7ea4:	20004dd0 	.word	0x20004dd0
    7ea8:	200036fc 	.word	0x200036fc
    7eac:	20002650 	.word	0x20002650
    7eb0:	20004b48 	.word	0x20004b48
    7eb4:	200020e8 	.word	0x200020e8
    7eb8:	200037a4 	.word	0x200037a4

00007ebc <load_calibration>:
void load_calibration(void){
    7ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
    7ebe:	46de      	mov	lr, fp
    7ec0:	4657      	mov	r7, sl
    7ec2:	464e      	mov	r6, r9
    7ec4:	4645      	mov	r5, r8
    7ec6:	b5e0      	push	{r5, r6, r7, lr}
	cal_init_struct(&tempCal);
    7ec8:	4ba2      	ldr	r3, [pc, #648]	; (8154 <load_calibration+0x298>)
void load_calibration(void){
    7eca:	b09d      	sub	sp, #116	; 0x74
	cal_init_struct(&tempCal);
    7ecc:	a804      	add	r0, sp, #16
    7ece:	469a      	mov	sl, r3
	struct i2c_master_packet packet = {
    7ed0:	ac01      	add	r4, sp, #4
	cal_init_struct(&tempCal);
    7ed2:	4798      	blx	r3
	struct i2c_master_packet packet = {
    7ed4:	4ba0      	ldr	r3, [pc, #640]	; (8158 <load_calibration+0x29c>)
    7ed6:	220c      	movs	r2, #12
    7ed8:	2100      	movs	r1, #0
    7eda:	0020      	movs	r0, r4
    7edc:	4699      	mov	r9, r3
    7ede:	4798      	blx	r3
	add_buf[0] = data_address>>8;//high byte
    7ee0:	466a      	mov	r2, sp
    7ee2:	2303      	movs	r3, #3
    7ee4:	7013      	strb	r3, [r2, #0]
	add_buf[1] = data_address & 0xff;//low byte
    7ee6:	2300      	movs	r3, #0
	struct i2c_master_packet packet = {
    7ee8:	2615      	movs	r6, #21
	add_buf[1] = data_address & 0xff;//low byte
    7eea:	7053      	strb	r3, [r2, #1]
	struct i2c_master_packet packet = {
    7eec:	4b9b      	ldr	r3, [pc, #620]	; (815c <load_calibration+0x2a0>)
    7eee:	4d9c      	ldr	r5, [pc, #624]	; (8160 <load_calibration+0x2a4>)
    7ef0:	4f9c      	ldr	r7, [pc, #624]	; (8164 <load_calibration+0x2a8>)
	packet.data = add_buf;
    7ef2:	6062      	str	r2, [r4, #4]
	struct i2c_master_packet packet = {
    7ef4:	9301      	str	r3, [sp, #4]
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    7ef6:	0021      	movs	r1, r4
    7ef8:	0028      	movs	r0, r5
    7efa:	47b8      	blx	r7
    7efc:	2800      	cmp	r0, #0
    7efe:	d003      	beq.n	7f08 <load_calibration+0x4c>
    7f00:	3e01      	subs	r6, #1
    7f02:	b2b6      	uxth	r6, r6
		if (timeout++ == limit) {   break;   }
    7f04:	2e00      	cmp	r6, #0
    7f06:	d1f6      	bne.n	7ef6 <load_calibration+0x3a>
	packet.data = data_buf;
    7f08:	4b97      	ldr	r3, [pc, #604]	; (8168 <load_calibration+0x2ac>)
    7f0a:	4e98      	ldr	r6, [pc, #608]	; (816c <load_calibration+0x2b0>)
    7f0c:	469b      	mov	fp, r3
    7f0e:	6063      	str	r3, [r4, #4]
	packet.data_length=bytes_to_read;
    7f10:	2360      	movs	r3, #96	; 0x60
    7f12:	8063      	strh	r3, [r4, #2]
    7f14:	3b4b      	subs	r3, #75	; 0x4b
    7f16:	4698      	mov	r8, r3
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    7f18:	0021      	movs	r1, r4
    7f1a:	0028      	movs	r0, r5
    7f1c:	47b0      	blx	r6
    7f1e:	2800      	cmp	r0, #0
    7f20:	d005      	beq.n	7f2e <load_calibration+0x72>
    7f22:	4643      	mov	r3, r8
    7f24:	3b01      	subs	r3, #1
    7f26:	b29b      	uxth	r3, r3
    7f28:	4698      	mov	r8, r3
		if (timeout++ == limit) {   break;   }
    7f2a:	2b00      	cmp	r3, #0
    7f2c:	d1f4      	bne.n	7f18 <load_calibration+0x5c>
	struct i2c_master_packet packet = {
    7f2e:	220c      	movs	r2, #12
    7f30:	2100      	movs	r1, #0
    7f32:	0020      	movs	r0, r4
    7f34:	47c8      	blx	r9
	add_buf[0] = data_address>>8;//high byte
    7f36:	466a      	mov	r2, sp
    7f38:	2304      	movs	r3, #4
    7f3a:	7013      	strb	r3, [r2, #0]
	add_buf[1] = data_address & 0xff;//low byte
    7f3c:	2300      	movs	r3, #0
    7f3e:	7053      	strb	r3, [r2, #1]
	struct i2c_master_packet packet = {
    7f40:	4b86      	ldr	r3, [pc, #536]	; (815c <load_calibration+0x2a0>)
	packet.data = add_buf;
    7f42:	6062      	str	r2, [r4, #4]
	struct i2c_master_packet packet = {
    7f44:	9301      	str	r3, [sp, #4]
    7f46:	2315      	movs	r3, #21
    7f48:	4698      	mov	r8, r3
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    7f4a:	0021      	movs	r1, r4
    7f4c:	0028      	movs	r0, r5
    7f4e:	47b8      	blx	r7
    7f50:	2800      	cmp	r0, #0
    7f52:	d005      	beq.n	7f60 <load_calibration+0xa4>
    7f54:	4643      	mov	r3, r8
    7f56:	3b01      	subs	r3, #1
    7f58:	b29b      	uxth	r3, r3
    7f5a:	4698      	mov	r8, r3
		if (timeout++ == limit) {   break;   }
    7f5c:	2b00      	cmp	r3, #0
    7f5e:	d1f4      	bne.n	7f4a <load_calibration+0x8e>
	packet.data = data_buf;
    7f60:	4b83      	ldr	r3, [pc, #524]	; (8170 <load_calibration+0x2b4>)
    7f62:	6063      	str	r3, [r4, #4]
	packet.data_length=bytes_to_read;
    7f64:	2360      	movs	r3, #96	; 0x60
    7f66:	8063      	strh	r3, [r4, #2]
    7f68:	3b4b      	subs	r3, #75	; 0x4b
    7f6a:	4698      	mov	r8, r3
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    7f6c:	0021      	movs	r1, r4
    7f6e:	0028      	movs	r0, r5
    7f70:	47b0      	blx	r6
    7f72:	2800      	cmp	r0, #0
    7f74:	d005      	beq.n	7f82 <load_calibration+0xc6>
    7f76:	4643      	mov	r3, r8
    7f78:	3b01      	subs	r3, #1
    7f7a:	b29b      	uxth	r3, r3
    7f7c:	4698      	mov	r8, r3
		if (timeout++ == limit) {   break;   }
    7f7e:	2b00      	cmp	r3, #0
    7f80:	d1f4      	bne.n	7f6c <load_calibration+0xb0>
	struct i2c_master_packet packet = {
    7f82:	220c      	movs	r2, #12
    7f84:	2100      	movs	r1, #0
    7f86:	0020      	movs	r0, r4
    7f88:	47c8      	blx	r9
	add_buf[0] = data_address>>8;//high byte
    7f8a:	466a      	mov	r2, sp
    7f8c:	2305      	movs	r3, #5
    7f8e:	7013      	strb	r3, [r2, #0]
	add_buf[1] = data_address & 0xff;//low byte
    7f90:	2300      	movs	r3, #0
    7f92:	7053      	strb	r3, [r2, #1]
	struct i2c_master_packet packet = {
    7f94:	4b71      	ldr	r3, [pc, #452]	; (815c <load_calibration+0x2a0>)
	packet.data = add_buf;
    7f96:	6062      	str	r2, [r4, #4]
	struct i2c_master_packet packet = {
    7f98:	9301      	str	r3, [sp, #4]
    7f9a:	2315      	movs	r3, #21
    7f9c:	4698      	mov	r8, r3
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    7f9e:	0021      	movs	r1, r4
    7fa0:	0028      	movs	r0, r5
    7fa2:	47b8      	blx	r7
    7fa4:	2800      	cmp	r0, #0
    7fa6:	d005      	beq.n	7fb4 <load_calibration+0xf8>
    7fa8:	4643      	mov	r3, r8
    7faa:	3b01      	subs	r3, #1
    7fac:	b29b      	uxth	r3, r3
    7fae:	4698      	mov	r8, r3
		if (timeout++ == limit) {   break;   }
    7fb0:	2b00      	cmp	r3, #0
    7fb2:	d1f4      	bne.n	7f9e <load_calibration+0xe2>
	packet.data = data_buf;
    7fb4:	4b6f      	ldr	r3, [pc, #444]	; (8174 <load_calibration+0x2b8>)
    7fb6:	6063      	str	r3, [r4, #4]
	packet.data_length=bytes_to_read;
    7fb8:	2360      	movs	r3, #96	; 0x60
    7fba:	8063      	strh	r3, [r4, #2]
    7fbc:	3b4b      	subs	r3, #75	; 0x4b
    7fbe:	4698      	mov	r8, r3
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    7fc0:	0021      	movs	r1, r4
    7fc2:	0028      	movs	r0, r5
    7fc4:	47b0      	blx	r6
    7fc6:	2800      	cmp	r0, #0
    7fc8:	d005      	beq.n	7fd6 <load_calibration+0x11a>
    7fca:	4643      	mov	r3, r8
    7fcc:	3b01      	subs	r3, #1
    7fce:	b29b      	uxth	r3, r3
    7fd0:	4698      	mov	r8, r3
		if (timeout++ == limit) {   break;   }
    7fd2:	2b00      	cmp	r3, #0
    7fd4:	d1f4      	bne.n	7fc0 <load_calibration+0x104>
	struct i2c_master_packet packet = {
    7fd6:	220c      	movs	r2, #12
    7fd8:	2100      	movs	r1, #0
    7fda:	0020      	movs	r0, r4
    7fdc:	47c8      	blx	r9
	add_buf[0] = data_address>>8;//high byte
    7fde:	466a      	mov	r2, sp
    7fe0:	2306      	movs	r3, #6
    7fe2:	7013      	strb	r3, [r2, #0]
	add_buf[1] = data_address & 0xff;//low byte
    7fe4:	2300      	movs	r3, #0
    7fe6:	7053      	strb	r3, [r2, #1]
	struct i2c_master_packet packet = {
    7fe8:	4b5c      	ldr	r3, [pc, #368]	; (815c <load_calibration+0x2a0>)
	packet.data = add_buf;
    7fea:	6062      	str	r2, [r4, #4]
	struct i2c_master_packet packet = {
    7fec:	9301      	str	r3, [sp, #4]
    7fee:	2315      	movs	r3, #21
    7ff0:	4698      	mov	r8, r3
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    7ff2:	0021      	movs	r1, r4
    7ff4:	0028      	movs	r0, r5
    7ff6:	47b8      	blx	r7
    7ff8:	2800      	cmp	r0, #0
    7ffa:	d005      	beq.n	8008 <load_calibration+0x14c>
    7ffc:	4643      	mov	r3, r8
    7ffe:	3b01      	subs	r3, #1
    8000:	b29b      	uxth	r3, r3
    8002:	4698      	mov	r8, r3
		if (timeout++ == limit) {   break;   }
    8004:	2b00      	cmp	r3, #0
    8006:	d1f4      	bne.n	7ff2 <load_calibration+0x136>
	packet.data = data_buf;
    8008:	4b5b      	ldr	r3, [pc, #364]	; (8178 <load_calibration+0x2bc>)
    800a:	6063      	str	r3, [r4, #4]
	packet.data_length=bytes_to_read;
    800c:	2360      	movs	r3, #96	; 0x60
    800e:	8063      	strh	r3, [r4, #2]
    8010:	3b4b      	subs	r3, #75	; 0x4b
    8012:	4698      	mov	r8, r3
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    8014:	0021      	movs	r1, r4
    8016:	0028      	movs	r0, r5
    8018:	47b0      	blx	r6
    801a:	2800      	cmp	r0, #0
    801c:	d005      	beq.n	802a <load_calibration+0x16e>
    801e:	4643      	mov	r3, r8
    8020:	3b01      	subs	r3, #1
    8022:	b29b      	uxth	r3, r3
    8024:	4698      	mov	r8, r3
		if (timeout++ == limit) {   break;   }
    8026:	2b00      	cmp	r3, #0
    8028:	d1f4      	bne.n	8014 <load_calibration+0x158>
	struct i2c_master_packet packet = {
    802a:	220c      	movs	r2, #12
    802c:	2100      	movs	r1, #0
    802e:	0020      	movs	r0, r4
    8030:	47c8      	blx	r9
	add_buf[0] = data_address>>8;//high byte
    8032:	466a      	mov	r2, sp
    8034:	2307      	movs	r3, #7
    8036:	7013      	strb	r3, [r2, #0]
	add_buf[1] = data_address & 0xff;//low byte
    8038:	2300      	movs	r3, #0
    803a:	7053      	strb	r3, [r2, #1]
	struct i2c_master_packet packet = {
    803c:	4b47      	ldr	r3, [pc, #284]	; (815c <load_calibration+0x2a0>)
	packet.data = add_buf;
    803e:	6062      	str	r2, [r4, #4]
	struct i2c_master_packet packet = {
    8040:	9301      	str	r3, [sp, #4]
    8042:	2315      	movs	r3, #21
    8044:	4698      	mov	r8, r3
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    8046:	0021      	movs	r1, r4
    8048:	0028      	movs	r0, r5
    804a:	47b8      	blx	r7
    804c:	2800      	cmp	r0, #0
    804e:	d005      	beq.n	805c <load_calibration+0x1a0>
    8050:	4643      	mov	r3, r8
    8052:	3b01      	subs	r3, #1
    8054:	b29b      	uxth	r3, r3
    8056:	4698      	mov	r8, r3
		if (timeout++ == limit) {   break;   }
    8058:	2b00      	cmp	r3, #0
    805a:	d1f4      	bne.n	8046 <load_calibration+0x18a>
	packet.data = data_buf;
    805c:	4b47      	ldr	r3, [pc, #284]	; (817c <load_calibration+0x2c0>)
    805e:	6063      	str	r3, [r4, #4]
	packet.data_length=bytes_to_read;
    8060:	2360      	movs	r3, #96	; 0x60
    8062:	8063      	strh	r3, [r4, #2]
    8064:	3b4b      	subs	r3, #75	; 0x4b
    8066:	4698      	mov	r8, r3
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    8068:	0021      	movs	r1, r4
    806a:	0028      	movs	r0, r5
    806c:	47b0      	blx	r6
    806e:	2800      	cmp	r0, #0
    8070:	d005      	beq.n	807e <load_calibration+0x1c2>
    8072:	4643      	mov	r3, r8
    8074:	3b01      	subs	r3, #1
    8076:	b29b      	uxth	r3, r3
    8078:	4698      	mov	r8, r3
		if (timeout++ == limit) {   break;   }
    807a:	2b00      	cmp	r3, #0
    807c:	d1f4      	bne.n	8068 <load_calibration+0x1ac>
	struct i2c_master_packet packet = {
    807e:	220c      	movs	r2, #12
    8080:	2100      	movs	r1, #0
    8082:	0020      	movs	r0, r4
    8084:	47c8      	blx	r9
	add_buf[0] = data_address>>8;//high byte
    8086:	466a      	mov	r2, sp
    8088:	2308      	movs	r3, #8
    808a:	7013      	strb	r3, [r2, #0]
	add_buf[1] = data_address & 0xff;//low byte
    808c:	2300      	movs	r3, #0
    808e:	7053      	strb	r3, [r2, #1]
	struct i2c_master_packet packet = {
    8090:	4b32      	ldr	r3, [pc, #200]	; (815c <load_calibration+0x2a0>)
	packet.data = add_buf;
    8092:	6062      	str	r2, [r4, #4]
	struct i2c_master_packet packet = {
    8094:	9301      	str	r3, [sp, #4]
    8096:	2315      	movs	r3, #21
    8098:	4698      	mov	r8, r3
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    809a:	0021      	movs	r1, r4
    809c:	0028      	movs	r0, r5
    809e:	47b8      	blx	r7
    80a0:	2800      	cmp	r0, #0
    80a2:	d005      	beq.n	80b0 <load_calibration+0x1f4>
    80a4:	4643      	mov	r3, r8
    80a6:	3b01      	subs	r3, #1
    80a8:	b29b      	uxth	r3, r3
    80aa:	4698      	mov	r8, r3
		if (timeout++ == limit) {   break;   }
    80ac:	2b00      	cmp	r3, #0
    80ae:	d1f4      	bne.n	809a <load_calibration+0x1de>
	packet.data = data_buf;
    80b0:	4b33      	ldr	r3, [pc, #204]	; (8180 <load_calibration+0x2c4>)
    80b2:	6063      	str	r3, [r4, #4]
	packet.data_length=bytes_to_read;
    80b4:	2354      	movs	r3, #84	; 0x54
    80b6:	8063      	strh	r3, [r4, #2]
    80b8:	3b3f      	subs	r3, #63	; 0x3f
    80ba:	4698      	mov	r8, r3
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    80bc:	0021      	movs	r1, r4
    80be:	0028      	movs	r0, r5
    80c0:	47b0      	blx	r6
    80c2:	2800      	cmp	r0, #0
    80c4:	d005      	beq.n	80d2 <load_calibration+0x216>
    80c6:	4643      	mov	r3, r8
    80c8:	3b01      	subs	r3, #1
    80ca:	b29b      	uxth	r3, r3
    80cc:	4698      	mov	r8, r3
		if (timeout++ == limit) {   break;   }
    80ce:	2b00      	cmp	r3, #0
    80d0:	d1f4      	bne.n	80bc <load_calibration+0x200>
	struct i2c_master_packet packet = {
    80d2:	220c      	movs	r2, #12
    80d4:	2100      	movs	r1, #0
    80d6:	0020      	movs	r0, r4
    80d8:	47c8      	blx	r9
	add_buf[0] = data_address>>8;//high byte
    80da:	466a      	mov	r2, sp
    80dc:	2309      	movs	r3, #9
    80de:	7013      	strb	r3, [r2, #0]
	add_buf[1] = data_address & 0xff;//low byte
    80e0:	2300      	movs	r3, #0
    80e2:	7053      	strb	r3, [r2, #1]
	struct i2c_master_packet packet = {
    80e4:	4b1d      	ldr	r3, [pc, #116]	; (815c <load_calibration+0x2a0>)
	packet.data = add_buf;
    80e6:	6062      	str	r2, [r4, #4]
	struct i2c_master_packet packet = {
    80e8:	9301      	str	r3, [sp, #4]
    80ea:	2315      	movs	r3, #21
    80ec:	4698      	mov	r8, r3
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    80ee:	0021      	movs	r1, r4
    80f0:	0028      	movs	r0, r5
    80f2:	47b8      	blx	r7
    80f4:	2800      	cmp	r0, #0
    80f6:	d005      	beq.n	8104 <load_calibration+0x248>
    80f8:	4643      	mov	r3, r8
    80fa:	3b01      	subs	r3, #1
    80fc:	b29b      	uxth	r3, r3
    80fe:	4698      	mov	r8, r3
		if (timeout++ == limit) {   break;   }
    8100:	2b00      	cmp	r3, #0
    8102:	d1f4      	bne.n	80ee <load_calibration+0x232>
	packet.data = data_buf;
    8104:	4b1f      	ldr	r3, [pc, #124]	; (8184 <load_calibration+0x2c8>)
	packet.data_length=bytes_to_read;
    8106:	2715      	movs	r7, #21
	packet.data = data_buf;
    8108:	6063      	str	r3, [r4, #4]
	packet.data_length=bytes_to_read;
    810a:	2354      	movs	r3, #84	; 0x54
    810c:	8063      	strh	r3, [r4, #2]
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    810e:	0021      	movs	r1, r4
    8110:	0028      	movs	r0, r5
    8112:	47b0      	blx	r6
    8114:	2800      	cmp	r0, #0
    8116:	d003      	beq.n	8120 <load_calibration+0x264>
    8118:	3f01      	subs	r7, #1
    811a:	b2bf      	uxth	r7, r7
		if (timeout++ == limit) {   break;   }
    811c:	2f00      	cmp	r7, #0
    811e:	d1f6      	bne.n	810e <load_calibration+0x252>
	if(tempCal.Cal_Initialized_Key != a1_calst.Cal_Initialized_Key){
    8120:	466b      	mov	r3, sp
    8122:	7c1a      	ldrb	r2, [r3, #16]
    8124:	465b      	mov	r3, fp
    8126:	781b      	ldrb	r3, [r3, #0]
    8128:	429a      	cmp	r2, r3
    812a:	d00b      	beq.n	8144 <load_calibration+0x288>
		cal_init_struct(&a1_calst);
    812c:	4658      	mov	r0, fp
    812e:	47d0      	blx	sl
		cal_init_struct(&a2_calst);
    8130:	480f      	ldr	r0, [pc, #60]	; (8170 <load_calibration+0x2b4>)
    8132:	47d0      	blx	sl
		cal_init_struct(&c1_calst);
    8134:	480f      	ldr	r0, [pc, #60]	; (8174 <load_calibration+0x2b8>)
    8136:	47d0      	blx	sl
		cal_init_struct(&c2_calst);
    8138:	480f      	ldr	r0, [pc, #60]	; (8178 <load_calibration+0x2bc>)
    813a:	47d0      	blx	sl
		cal_init_struct(&dist_calst);
    813c:	480f      	ldr	r0, [pc, #60]	; (817c <load_calibration+0x2c0>)
    813e:	47d0      	blx	sl
		save_calibration();		
    8140:	4b11      	ldr	r3, [pc, #68]	; (8188 <load_calibration+0x2cc>)
    8142:	4798      	blx	r3
}
    8144:	b01d      	add	sp, #116	; 0x74
    8146:	bc3c      	pop	{r2, r3, r4, r5}
    8148:	4690      	mov	r8, r2
    814a:	4699      	mov	r9, r3
    814c:	46a2      	mov	sl, r4
    814e:	46ab      	mov	fp, r5
    8150:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8152:	46c0      	nop			; (mov r8, r8)
    8154:	0000e671 	.word	0x0000e671
    8158:	0001f06d 	.word	0x0001f06d
    815c:	00020057 	.word	0x00020057
    8160:	20001140 	.word	0x20001140
    8164:	0000baf5 	.word	0x0000baf5
    8168:	200051f4 	.word	0x200051f4
    816c:	0000bad5 	.word	0x0000bad5
    8170:	20004dd0 	.word	0x20004dd0
    8174:	200036fc 	.word	0x200036fc
    8178:	20002650 	.word	0x20002650
    817c:	20004b48 	.word	0x20004b48
    8180:	200020e8 	.word	0x200020e8
    8184:	200037a4 	.word	0x200037a4
    8188:	00007b39 	.word	0x00007b39

0000818c <laser_parse_buffer>:
}




void laser_parse_buffer(struct MEASUREMENT *meas_inst){
    818c:	b5f0      	push	{r4, r5, r6, r7, lr}
    818e:	46de      	mov	lr, fp
    8190:	4657      	mov	r7, sl
    8192:	464e      	mov	r6, r9
    8194:	4645      	mov	r5, r8
    8196:	0004      	movs	r4, r0
    8198:	2300      	movs	r3, #0
    819a:	b5e0      	push	{r5, r6, r7, lr}
    819c:	4963      	ldr	r1, [pc, #396]	; (832c <laser_parse_buffer+0x1a0>)
    819e:	b083      	sub	sp, #12
	uint8_t AA_index;
	
	
	AA_index=0;
	for (i=0; i<sizeof(rxBufferLaser); i++){
		if(rxBufferLaser[i]==0xAA){
    81a0:	5cca      	ldrb	r2, [r1, r3]
    81a2:	2aaa      	cmp	r2, #170	; 0xaa
    81a4:	d019      	beq.n	81da <laser_parse_buffer+0x4e>
    81a6:	3301      	adds	r3, #1
	for (i=0; i<sizeof(rxBufferLaser); i++){
    81a8:	2b14      	cmp	r3, #20
    81aa:	d1f9      	bne.n	81a0 <laser_parse_buffer+0x14>
		}
	}
	
	//parse data
	if(i==sizeof(rxBufferLaser)){//No 0xAA initiate message, pattern error
		meas_inst->measurement_error[meas_inst->num_errors] = laser_pattern_error; 		
    81ac:	210a      	movs	r1, #10
    81ae:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    81b0:	18e2      	adds	r2, r4, r3
    81b2:	3260      	adds	r2, #96	; 0x60
			break;
			case 256:
				meas_inst->measurement_error[meas_inst->num_errors] = laser_strong_signal;
			break;
			default:
				meas_inst->measurement_error[meas_inst->num_errors] = laser_unknown;
    81b4:	7011      	strb	r1, [r2, #0]
		}
		meas_inst->measurement_error_data1[meas_inst->num_errors] = 0;
    81b6:	001a      	movs	r2, r3
    81b8:	2100      	movs	r1, #0
    81ba:	321a      	adds	r2, #26
    81bc:	0092      	lsls	r2, r2, #2
bool increment_error_count(struct MEASUREMENT *meas_inst)
{
	uint32_t array_max;
	bool error_incremented;
	array_max = sizeof(meas_inst->measurement_error)/sizeof(meas_inst->measurement_error[0]);
	if 	((meas_inst->num_errors+1)<array_max){
    81be:	3301      	adds	r3, #1
		meas_inst->measurement_error_data1[meas_inst->num_errors] = 0;
    81c0:	5111      	str	r1, [r2, r4]
	if 	((meas_inst->num_errors+1)<array_max){
    81c2:	2b07      	cmp	r3, #7
    81c4:	d800      	bhi.n	81c8 <laser_parse_buffer+0x3c>
		meas_inst->num_errors++;
    81c6:	65e3      	str	r3, [r4, #92]	; 0x5c
		meas_inst->distance = 0;
    81c8:	2300      	movs	r3, #0
    81ca:	61e3      	str	r3, [r4, #28]
}
    81cc:	b003      	add	sp, #12
    81ce:	bc3c      	pop	{r2, r3, r4, r5}
    81d0:	4690      	mov	r8, r2
    81d2:	4699      	mov	r9, r3
    81d4:	46a2      	mov	sl, r4
    81d6:	46ab      	mov	fp, r5
    81d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	}else if(meas_inst->readTimeMs > timeOutMs){//timeout error
    81da:	4a55      	ldr	r2, [pc, #340]	; (8330 <laser_parse_buffer+0x1a4>)
    81dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    81de:	4290      	cmp	r0, r2
    81e0:	d815      	bhi.n	820e <laser_parse_buffer+0x82>
	}else if(rxBufferLaser[AA_index+2]!=0x44){
    81e2:	1c9a      	adds	r2, r3, #2
    81e4:	5c88      	ldrb	r0, [r1, r2]
    81e6:	2844      	cmp	r0, #68	; 0x44
    81e8:	d01b      	beq.n	8222 <laser_parse_buffer+0x96>
		meas_inst->measurement_error[meas_inst->num_errors] = laser_wrong_message;
    81ea:	6de5      	ldr	r5, [r4, #92]	; 0x5c
    81ec:	200d      	movs	r0, #13
		meas_inst->measurement_error_data1[meas_inst->num_errors] = rxBufferLaser[AA_index+2];
    81ee:	002e      	movs	r6, r5
		meas_inst->measurement_error[meas_inst->num_errors] = laser_wrong_message;
    81f0:	1963      	adds	r3, r4, r5
    81f2:	3360      	adds	r3, #96	; 0x60
    81f4:	7018      	strb	r0, [r3, #0]
		meas_inst->measurement_error_data1[meas_inst->num_errors] = rxBufferLaser[AA_index+2];
    81f6:	5c88      	ldrb	r0, [r1, r2]
    81f8:	361a      	adds	r6, #26
    81fa:	b2c0      	uxtb	r0, r0
    81fc:	00b6      	lsls	r6, r6, #2
    81fe:	4b4d      	ldr	r3, [pc, #308]	; (8334 <laser_parse_buffer+0x1a8>)
    8200:	4798      	blx	r3
	if 	((meas_inst->num_errors+1)<array_max){
    8202:	3501      	adds	r5, #1
		meas_inst->measurement_error_data1[meas_inst->num_errors] = rxBufferLaser[AA_index+2];
    8204:	5130      	str	r0, [r6, r4]
	if 	((meas_inst->num_errors+1)<array_max){
    8206:	2d07      	cmp	r5, #7
    8208:	d8de      	bhi.n	81c8 <laser_parse_buffer+0x3c>
		meas_inst->num_errors++;
    820a:	65e5      	str	r5, [r4, #92]	; 0x5c
    820c:	e7dc      	b.n	81c8 <laser_parse_buffer+0x3c>
		meas_inst->measurement_error[meas_inst->num_errors] = laser_response_timeout;
    820e:	6de5      	ldr	r5, [r4, #92]	; 0x5c
    8210:	220b      	movs	r2, #11
		meas_inst->measurement_error_data1[meas_inst->num_errors] = meas_inst->samples;
    8212:	002e      	movs	r6, r5
		meas_inst->measurement_error[meas_inst->num_errors] = laser_response_timeout;
    8214:	1963      	adds	r3, r4, r5
    8216:	3360      	adds	r3, #96	; 0x60
    8218:	701a      	strb	r2, [r3, #0]
		meas_inst->measurement_error_data1[meas_inst->num_errors] = meas_inst->samples;
    821a:	361a      	adds	r6, #26
    821c:	00b6      	lsls	r6, r6, #2
    821e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8220:	e7ed      	b.n	81fe <laser_parse_buffer+0x72>
	}else if (rxBufferLaser[AA_index+3]=='E'){//rangefinder generated error
    8222:	1cda      	adds	r2, r3, #3
    8224:	5c88      	ldrb	r0, [r1, r2]
    8226:	2845      	cmp	r0, #69	; 0x45
    8228:	d050      	beq.n	82cc <laser_parse_buffer+0x140>
			temp1=rxBufferLaser[AA_index+i] & mask;
    822a:	5c88      	ldrb	r0, [r1, r2]
    822c:	1d1a      	adds	r2, r3, #4
    822e:	5c8a      	ldrb	r2, [r1, r2]
			meas_inst->distance=meas_inst->distance + temp1*mult;
    8230:	4f40      	ldr	r7, [pc, #256]	; (8334 <laser_parse_buffer+0x1a8>)
			temp1=rxBufferLaser[AA_index+i] & mask;
    8232:	b2d2      	uxtb	r2, r2
    8234:	4692      	mov	sl, r2
    8236:	1d5a      	adds	r2, r3, #5
    8238:	5c8a      	ldrb	r2, [r1, r2]
    823a:	b2d2      	uxtb	r2, r2
    823c:	4691      	mov	r9, r2
    823e:	1d9a      	adds	r2, r3, #6
    8240:	5c8a      	ldrb	r2, [r1, r2]
    8242:	b2d2      	uxtb	r2, r2
    8244:	4690      	mov	r8, r2
    8246:	1dda      	adds	r2, r3, #7
    8248:	3308      	adds	r3, #8
    824a:	5c8a      	ldrb	r2, [r1, r2]
    824c:	5ccd      	ldrb	r5, [r1, r3]
    824e:	0003      	movs	r3, r0
    8250:	b2e9      	uxtb	r1, r5
    8252:	250f      	movs	r5, #15
			meas_inst->distance=meas_inst->distance + temp1*mult;
    8254:	4838      	ldr	r0, [pc, #224]	; (8338 <laser_parse_buffer+0x1ac>)
			temp1=rxBufferLaser[AA_index+i] & mask;
    8256:	b2d2      	uxtb	r2, r2
    8258:	402b      	ands	r3, r5
    825a:	9201      	str	r2, [sp, #4]
			meas_inst->distance=meas_inst->distance + temp1*mult;
    825c:	4358      	muls	r0, r3
			temp1=rxBufferLaser[AA_index+i] & mask;
    825e:	9100      	str	r1, [sp, #0]
			meas_inst->distance=meas_inst->distance + temp1*mult;
    8260:	47b8      	blx	r7
    8262:	4e36      	ldr	r6, [pc, #216]	; (833c <laser_parse_buffer+0x1b0>)
    8264:	2100      	movs	r1, #0
    8266:	47b0      	blx	r6
			temp1=rxBufferLaser[AA_index+i] & mask;
    8268:	4653      	mov	r3, sl
			meas_inst->distance=meas_inst->distance + temp1*mult;
    826a:	4683      	mov	fp, r0
    826c:	4834      	ldr	r0, [pc, #208]	; (8340 <laser_parse_buffer+0x1b4>)
			temp1=rxBufferLaser[AA_index+i] & mask;
    826e:	402b      	ands	r3, r5
			meas_inst->distance=meas_inst->distance + temp1*mult;
    8270:	4358      	muls	r0, r3
    8272:	47b8      	blx	r7
    8274:	1c01      	adds	r1, r0, #0
    8276:	4658      	mov	r0, fp
    8278:	47b0      	blx	r6
			temp1=rxBufferLaser[AA_index+i] & mask;
    827a:	464b      	mov	r3, r9
			meas_inst->distance=meas_inst->distance + temp1*mult;
    827c:	4682      	mov	sl, r0
    827e:	20fa      	movs	r0, #250	; 0xfa
			temp1=rxBufferLaser[AA_index+i] & mask;
    8280:	402b      	ands	r3, r5
			meas_inst->distance=meas_inst->distance + temp1*mult;
    8282:	0080      	lsls	r0, r0, #2
    8284:	4358      	muls	r0, r3
    8286:	47b8      	blx	r7
    8288:	1c01      	adds	r1, r0, #0
    828a:	4650      	mov	r0, sl
    828c:	47b0      	blx	r6
			temp1=rxBufferLaser[AA_index+i] & mask;
    828e:	4643      	mov	r3, r8
			meas_inst->distance=meas_inst->distance + temp1*mult;
    8290:	4681      	mov	r9, r0
    8292:	2064      	movs	r0, #100	; 0x64
			temp1=rxBufferLaser[AA_index+i] & mask;
    8294:	402b      	ands	r3, r5
			meas_inst->distance=meas_inst->distance + temp1*mult;
    8296:	4358      	muls	r0, r3
    8298:	47b8      	blx	r7
    829a:	1c01      	adds	r1, r0, #0
    829c:	4648      	mov	r0, r9
    829e:	47b0      	blx	r6
			temp1=rxBufferLaser[AA_index+i] & mask;
    82a0:	9b01      	ldr	r3, [sp, #4]
			meas_inst->distance=meas_inst->distance + temp1*mult;
    82a2:	4680      	mov	r8, r0
			temp1=rxBufferLaser[AA_index+i] & mask;
    82a4:	402b      	ands	r3, r5
			meas_inst->distance=meas_inst->distance + temp1*mult;
    82a6:	0098      	lsls	r0, r3, #2
    82a8:	18c0      	adds	r0, r0, r3
    82aa:	0040      	lsls	r0, r0, #1
    82ac:	47b8      	blx	r7
    82ae:	1c01      	adds	r1, r0, #0
    82b0:	4640      	mov	r0, r8
    82b2:	47b0      	blx	r6
    82b4:	4680      	mov	r8, r0
    82b6:	9800      	ldr	r0, [sp, #0]
    82b8:	4028      	ands	r0, r5
    82ba:	47b8      	blx	r7
    82bc:	1c01      	adds	r1, r0, #0
    82be:	4640      	mov	r0, r8
    82c0:	47b0      	blx	r6
		meas_inst->distance=meas_inst->distance/1000;
    82c2:	4920      	ldr	r1, [pc, #128]	; (8344 <laser_parse_buffer+0x1b8>)
    82c4:	4b20      	ldr	r3, [pc, #128]	; (8348 <laser_parse_buffer+0x1bc>)
    82c6:	4798      	blx	r3
    82c8:	61e0      	str	r0, [r4, #28]
    82ca:	e77f      	b.n	81cc <laser_parse_buffer+0x40>
			temp1 = rxBufferLaser[AA_index+i] & mask;
    82cc:	1d9a      	adds	r2, r3, #6
    82ce:	5c8e      	ldrb	r6, [r1, r2]
    82d0:	1dda      	adds	r2, r3, #7
    82d2:	5c8d      	ldrb	r5, [r1, r2]
    82d4:	220f      	movs	r2, #15
			temp_err = temp_err + temp1*mult;
    82d6:	301f      	adds	r0, #31
			temp1 = rxBufferLaser[AA_index+i] & mask;
    82d8:	4016      	ands	r6, r2
    82da:	4015      	ands	r5, r2
			temp_err = temp_err + temp1*mult;
    82dc:	4370      	muls	r0, r6
			temp1 = rxBufferLaser[AA_index+i] & mask;
    82de:	002e      	movs	r6, r5
    82e0:	3308      	adds	r3, #8
			temp_err = temp_err + temp1*mult;
    82e2:	00ad      	lsls	r5, r5, #2
    82e4:	19ad      	adds	r5, r5, r6
			temp1 = rxBufferLaser[AA_index+i] & mask;
    82e6:	5ccb      	ldrb	r3, [r1, r3]
			temp_err = temp_err + temp1*mult;
    82e8:	006d      	lsls	r5, r5, #1
    82ea:	1940      	adds	r0, r0, r5
			temp1 = rxBufferLaser[AA_index+i] & mask;
    82ec:	401a      	ands	r2, r3
			temp_err = temp_err + temp1*mult;
    82ee:	1812      	adds	r2, r2, r0
		switch (temp_err){
    82f0:	2aff      	cmp	r2, #255	; 0xff
    82f2:	d00a      	beq.n	830a <laser_parse_buffer+0x17e>
    82f4:	2380      	movs	r3, #128	; 0x80
    82f6:	005b      	lsls	r3, r3, #1
    82f8:	429a      	cmp	r2, r3
    82fa:	d011      	beq.n	8320 <laser_parse_buffer+0x194>
				meas_inst->measurement_error[meas_inst->num_errors] = laser_calc_err;
    82fc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
		switch (temp_err){
    82fe:	2acc      	cmp	r2, #204	; 0xcc
    8300:	d009      	beq.n	8316 <laser_parse_buffer+0x18a>
				meas_inst->measurement_error[meas_inst->num_errors] = laser_unknown;
    8302:	18e2      	adds	r2, r4, r3
    8304:	3260      	adds	r2, #96	; 0x60
    8306:	210c      	movs	r1, #12
    8308:	e754      	b.n	81b4 <laser_parse_buffer+0x28>
				meas_inst->measurement_error[meas_inst->num_errors] = laser_weak_signal;
    830a:	2108      	movs	r1, #8
    830c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    830e:	18e2      	adds	r2, r4, r3
    8310:	3260      	adds	r2, #96	; 0x60
    8312:	7011      	strb	r1, [r2, #0]
			break;
    8314:	e74f      	b.n	81b6 <laser_parse_buffer+0x2a>
				meas_inst->measurement_error[meas_inst->num_errors] = laser_calc_err;
    8316:	2107      	movs	r1, #7
    8318:	18e2      	adds	r2, r4, r3
    831a:	3260      	adds	r2, #96	; 0x60
    831c:	7011      	strb	r1, [r2, #0]
			break;
    831e:	e74a      	b.n	81b6 <laser_parse_buffer+0x2a>
				meas_inst->measurement_error[meas_inst->num_errors] = laser_strong_signal;
    8320:	2109      	movs	r1, #9
    8322:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    8324:	18e2      	adds	r2, r4, r3
    8326:	3260      	adds	r2, #96	; 0x60
    8328:	7011      	strb	r1, [r2, #0]
			break;
    832a:	e744      	b.n	81b6 <laser_parse_buffer+0x2a>
    832c:	200011d4 	.word	0x200011d4
    8330:	00001388 	.word	0x00001388
    8334:	0001d201 	.word	0x0001d201
    8338:	000186a0 	.word	0x000186a0
    833c:	0001c4a5 	.word	0x0001c4a5
    8340:	00002710 	.word	0x00002710
    8344:	447a0000 	.word	0x447a0000
    8348:	0001c7c9 	.word	0x0001c7c9

0000834c <rangefinder_on_off>:
void rangefinder_on_off(bool on_off){
    834c:	b510      	push	{r4, lr}

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    834e:	2204      	movs	r2, #4
    8350:	4b06      	ldr	r3, [pc, #24]	; (836c <rangefinder_on_off+0x20>)
	if (on_off){
    8352:	2800      	cmp	r0, #0
    8354:	d104      	bne.n	8360 <rangefinder_on_off+0x14>
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    8356:	615a      	str	r2, [r3, #20]
	laser_triggered = false;
    8358:	2200      	movs	r2, #0
    835a:	4b05      	ldr	r3, [pc, #20]	; (8370 <rangefinder_on_off+0x24>)
    835c:	701a      	strb	r2, [r3, #0]
}
    835e:	bd10      	pop	{r4, pc}
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    8360:	619a      	str	r2, [r3, #24]
		delay_ms(100);
    8362:	2064      	movs	r0, #100	; 0x64
    8364:	4b03      	ldr	r3, [pc, #12]	; (8374 <rangefinder_on_off+0x28>)
    8366:	4798      	blx	r3
    8368:	e7f6      	b.n	8358 <rangefinder_on_off+0xc>
    836a:	46c0      	nop			; (mov r8, r8)
    836c:	40002800 	.word	0x40002800
    8370:	2000264c 	.word	0x2000264c
    8374:	000151d9 	.word	0x000151d9

00008378 <laser_on_off>:
void laser_on_off(bool on_off){
    8378:	b510      	push	{r4, lr}
		writeLaser(cmd_laser_on, sizeof(cmd_laser_on));
    837a:	2105      	movs	r1, #5
	if(on_off){
    837c:	2800      	cmp	r0, #0
    837e:	d00d      	beq.n	839c <laser_on_off+0x24>
		writeLaser(cmd_laser_on, sizeof(cmd_laser_on));
    8380:	480d      	ldr	r0, [pc, #52]	; (83b8 <laser_on_off+0x40>)
    8382:	4b0e      	ldr	r3, [pc, #56]	; (83bc <laser_on_off+0x44>)
    8384:	4798      	blx	r3
    8386:	4c0e      	ldr	r4, [pc, #56]	; (83c0 <laser_on_off+0x48>)
		while(!isLaserTransmitComplete());
    8388:	47a0      	blx	r4
    838a:	2800      	cmp	r0, #0
    838c:	d0fc      	beq.n	8388 <laser_on_off+0x10>
		laser_triggered = true;
    838e:	2201      	movs	r2, #1
    8390:	4b0c      	ldr	r3, [pc, #48]	; (83c4 <laser_on_off+0x4c>)
		laser_timeout_timer(true);
    8392:	2001      	movs	r0, #1
		laser_triggered = true;
    8394:	701a      	strb	r2, [r3, #0]
		laser_timeout_timer(true);
    8396:	4b0c      	ldr	r3, [pc, #48]	; (83c8 <laser_on_off+0x50>)
    8398:	4798      	blx	r3
}
    839a:	bd10      	pop	{r4, pc}
		writeLaser(cmd_laser_off, sizeof(cmd_laser_off));
    839c:	480b      	ldr	r0, [pc, #44]	; (83cc <laser_on_off+0x54>)
    839e:	4b07      	ldr	r3, [pc, #28]	; (83bc <laser_on_off+0x44>)
    83a0:	4798      	blx	r3
    83a2:	4c07      	ldr	r4, [pc, #28]	; (83c0 <laser_on_off+0x48>)
		while(!isLaserTransmitComplete());
    83a4:	47a0      	blx	r4
    83a6:	2800      	cmp	r0, #0
    83a8:	d0fc      	beq.n	83a4 <laser_on_off+0x2c>
		laser_triggered = false;
    83aa:	2200      	movs	r2, #0
    83ac:	4b05      	ldr	r3, [pc, #20]	; (83c4 <laser_on_off+0x4c>)
		laser_timeout_timer(false);
    83ae:	2000      	movs	r0, #0
		laser_triggered = false;
    83b0:	701a      	strb	r2, [r3, #0]
		laser_timeout_timer(false);
    83b2:	4b05      	ldr	r3, [pc, #20]	; (83c8 <laser_on_off+0x50>)
    83b4:	4798      	blx	r3
}
    83b6:	e7f0      	b.n	839a <laser_on_off+0x22>
    83b8:	200001a0 	.word	0x200001a0
    83bc:	00012961 	.word	0x00012961
    83c0:	00012981 	.word	0x00012981
    83c4:	2000264c 	.word	0x2000264c
    83c8:	00009a09 	.word	0x00009a09
    83cc:	20000198 	.word	0x20000198

000083d0 <read_accel>:
void read_accel(struct spi_slave_inst *const sensor, float vector[3]){
    83d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    83d2:	46de      	mov	lr, fp
    83d4:	4657      	mov	r7, sl
    83d6:	464e      	mov	r6, r9
    83d8:	4645      	mov	r5, r8
    83da:	b5e0      	push	{r5, r6, r7, lr}
    83dc:	0007      	movs	r7, r0
	spi_select_slave(&spi_main, sensor, true);
    83de:	4c3a      	ldr	r4, [pc, #232]	; (84c8 <read_accel+0xf8>)
void read_accel(struct spi_slave_inst *const sensor, float vector[3]){
    83e0:	b083      	sub	sp, #12
	spi_transceive_buffer_wait(&spi_main, read_x, read_buffer, length);
    83e2:	ad01      	add	r5, sp, #4
void read_accel(struct spi_slave_inst *const sensor, float vector[3]){
    83e4:	4689      	mov	r9, r1
	spi_select_slave(&spi_main, sensor, true);
    83e6:	2201      	movs	r2, #1
    83e8:	0001      	movs	r1, r0
    83ea:	4b38      	ldr	r3, [pc, #224]	; (84cc <read_accel+0xfc>)
    83ec:	0020      	movs	r0, r4
    83ee:	4798      	blx	r3
	spi_transceive_buffer_wait(&spi_main, read_x, read_buffer, length);
    83f0:	4e37      	ldr	r6, [pc, #220]	; (84d0 <read_accel+0x100>)
    83f2:	002a      	movs	r2, r5
    83f4:	2304      	movs	r3, #4
    83f6:	4937      	ldr	r1, [pc, #220]	; (84d4 <read_accel+0x104>)
    83f8:	0020      	movs	r0, r4
    83fa:	47b0      	blx	r6
	spi_select_slave(&spi_main, sensor, false);
    83fc:	0039      	movs	r1, r7
    83fe:	2200      	movs	r2, #0
    8400:	0020      	movs	r0, r4
    8402:	4b32      	ldr	r3, [pc, #200]	; (84cc <read_accel+0xfc>)
    8404:	4798      	blx	r3
	spi_select_slave(&spi_main, sensor, true);
    8406:	0039      	movs	r1, r7
    8408:	2201      	movs	r2, #1
    840a:	0020      	movs	r0, r4
    840c:	4b2f      	ldr	r3, [pc, #188]	; (84cc <read_accel+0xfc>)
    840e:	4798      	blx	r3
	spi_transceive_buffer_wait(&spi_main, read_y, read_buffer, length);
    8410:	002a      	movs	r2, r5
    8412:	2304      	movs	r3, #4
    8414:	4930      	ldr	r1, [pc, #192]	; (84d8 <read_accel+0x108>)
    8416:	0020      	movs	r0, r4
    8418:	47b0      	blx	r6
	spi_select_slave(&spi_main, sensor, false);
    841a:	0039      	movs	r1, r7
    841c:	2200      	movs	r2, #0
    841e:	0020      	movs	r0, r4
    8420:	4b2a      	ldr	r3, [pc, #168]	; (84cc <read_accel+0xfc>)
    8422:	4798      	blx	r3
	var16=var16<<8;
    8424:	786b      	ldrb	r3, [r5, #1]
	var16=var16+buffer[2];
    8426:	78a8      	ldrb	r0, [r5, #2]
	var16=var16<<8;
    8428:	021b      	lsls	r3, r3, #8
	var16=var16+buffer[2];
    842a:	18c0      	adds	r0, r0, r3
	result=var16;
    842c:	4b2b      	ldr	r3, [pc, #172]	; (84dc <read_accel+0x10c>)
    842e:	b200      	sxth	r0, r0
    8430:	469a      	mov	sl, r3
    8432:	4798      	blx	r3
	spi_transceive_buffer_wait(&spi_main, read_x, read_buffer, length);
    8434:	46b0      	mov	r8, r6
	spi_select_slave(&spi_main, sensor, true);
    8436:	0039      	movs	r1, r7
	result=var16;
    8438:	1c06      	adds	r6, r0, #0
	spi_select_slave(&spi_main, sensor, true);
    843a:	2201      	movs	r2, #1
    843c:	0020      	movs	r0, r4
    843e:	4b23      	ldr	r3, [pc, #140]	; (84cc <read_accel+0xfc>)
    8440:	4798      	blx	r3
	spi_transceive_buffer_wait(&spi_main, read_z, read_buffer, length);
    8442:	002a      	movs	r2, r5
    8444:	2304      	movs	r3, #4
    8446:	4926      	ldr	r1, [pc, #152]	; (84e0 <read_accel+0x110>)
    8448:	0020      	movs	r0, r4
    844a:	47c0      	blx	r8
	spi_select_slave(&spi_main, sensor, false);
    844c:	0039      	movs	r1, r7
    844e:	2200      	movs	r2, #0
    8450:	0020      	movs	r0, r4
    8452:	4b1e      	ldr	r3, [pc, #120]	; (84cc <read_accel+0xfc>)
    8454:	4798      	blx	r3
	var16=var16<<8;
    8456:	786b      	ldrb	r3, [r5, #1]
	var16=var16+buffer[2];
    8458:	78a8      	ldrb	r0, [r5, #2]
	var16=var16<<8;
    845a:	021b      	lsls	r3, r3, #8
	var16=var16+buffer[2];
    845c:	18c0      	adds	r0, r0, r3
	result=var16;
    845e:	b200      	sxth	r0, r0
    8460:	47d0      	blx	sl
	spi_select_slave(&spi_main, sensor, true);
    8462:	0039      	movs	r1, r7
	result=var16;
    8464:	4683      	mov	fp, r0
	spi_select_slave(&spi_main, sensor, true);
    8466:	2201      	movs	r2, #1
    8468:	0020      	movs	r0, r4
    846a:	4b18      	ldr	r3, [pc, #96]	; (84cc <read_accel+0xfc>)
    846c:	4798      	blx	r3
	spi_transceive_buffer_wait(&spi_main, read_status, read_buffer, length);
    846e:	002a      	movs	r2, r5
    8470:	2304      	movs	r3, #4
    8472:	491c      	ldr	r1, [pc, #112]	; (84e4 <read_accel+0x114>)
    8474:	0020      	movs	r0, r4
    8476:	47c0      	blx	r8
	spi_select_slave(&spi_main, sensor, false);
    8478:	2200      	movs	r2, #0
    847a:	0039      	movs	r1, r7
    847c:	0020      	movs	r0, r4
    847e:	4b13      	ldr	r3, [pc, #76]	; (84cc <read_accel+0xfc>)
    8480:	4798      	blx	r3
	var16=var16<<8;
    8482:	786b      	ldrb	r3, [r5, #1]
	var16=var16+buffer[2];
    8484:	78a8      	ldrb	r0, [r5, #2]
	var16=var16<<8;
    8486:	021b      	lsls	r3, r3, #8
	var16=var16+buffer[2];
    8488:	18c0      	adds	r0, r0, r3
	result=var16;
    848a:	b200      	sxth	r0, r0
    848c:	47d0      	blx	sl
		tempV[i] = tempV[i]/a_coarse_gain;
    848e:	4d16      	ldr	r5, [pc, #88]	; (84e8 <read_accel+0x118>)
    8490:	4916      	ldr	r1, [pc, #88]	; (84ec <read_accel+0x11c>)
    8492:	47a8      	blx	r5
    8494:	4915      	ldr	r1, [pc, #84]	; (84ec <read_accel+0x11c>)
    8496:	1c04      	adds	r4, r0, #0
    8498:	4658      	mov	r0, fp
    849a:	47a8      	blx	r5
	vector[0] = tempV[1];
    849c:	464b      	mov	r3, r9
		tempV[i] = tempV[i]/a_coarse_gain;
    849e:	4913      	ldr	r1, [pc, #76]	; (84ec <read_accel+0x11c>)
	vector[0] = tempV[1];
    84a0:	6018      	str	r0, [r3, #0]
		tempV[i] = tempV[i]/a_coarse_gain;
    84a2:	1c30      	adds	r0, r6, #0
    84a4:	47a8      	blx	r5
	vector[1] = -1*tempV[0];
    84a6:	2380      	movs	r3, #128	; 0x80
    84a8:	061b      	lsls	r3, r3, #24
    84aa:	469c      	mov	ip, r3
    84ac:	464b      	mov	r3, r9
    84ae:	4460      	add	r0, ip
    84b0:	6058      	str	r0, [r3, #4]
	vector[2] = -1*tempV[2];
    84b2:	464b      	mov	r3, r9
    84b4:	4464      	add	r4, ip
    84b6:	609c      	str	r4, [r3, #8]
}
    84b8:	b003      	add	sp, #12
    84ba:	bc3c      	pop	{r2, r3, r4, r5}
    84bc:	4690      	mov	r8, r2
    84be:	4699      	mov	r9, r3
    84c0:	46a2      	mov	sl, r4
    84c2:	46ab      	mov	fp, r5
    84c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    84c6:	46c0      	nop			; (mov r8, r8)
    84c8:	20001134 	.word	0x20001134
    84cc:	00014a29 	.word	0x00014a29
    84d0:	00014bb5 	.word	0x00014bb5
    84d4:	200001b4 	.word	0x200001b4
    84d8:	200001b8 	.word	0x200001b8
    84dc:	0001d161 	.word	0x0001d161
    84e0:	200001bc 	.word	0x200001bc
    84e4:	200001b0 	.word	0x200001b0
    84e8:	0001c7c9 	.word	0x0001c7c9
    84ec:	459c4000 	.word	0x459c4000

000084f0 <setup_accel>:
void setup_accel(struct spi_slave_inst *const sensor){
    84f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    84f2:	0006      	movs	r6, r0
	spi_select_slave(&spi_main, sensor, true);
    84f4:	4c11      	ldr	r4, [pc, #68]	; (853c <setup_accel+0x4c>)
void setup_accel(struct spi_slave_inst *const sensor){
    84f6:	b083      	sub	sp, #12
	spi_select_slave(&spi_main, sensor, true);
    84f8:	4d11      	ldr	r5, [pc, #68]	; (8540 <setup_accel+0x50>)
    84fa:	0001      	movs	r1, r0
    84fc:	2201      	movs	r2, #1
    84fe:	0020      	movs	r0, r4
    8500:	47a8      	blx	r5
	spi_transceive_buffer_wait(&spi_main, sw_reset, read_buffer, 4);
    8502:	2304      	movs	r3, #4
    8504:	aa01      	add	r2, sp, #4
    8506:	4f0f      	ldr	r7, [pc, #60]	; (8544 <setup_accel+0x54>)
    8508:	490f      	ldr	r1, [pc, #60]	; (8548 <setup_accel+0x58>)
    850a:	0020      	movs	r0, r4
    850c:	47b8      	blx	r7
	spi_select_slave(&spi_main, sensor, false);
    850e:	0031      	movs	r1, r6
    8510:	2200      	movs	r2, #0
    8512:	0020      	movs	r0, r4
    8514:	47a8      	blx	r5
	delay_ms(10);
    8516:	4b0d      	ldr	r3, [pc, #52]	; (854c <setup_accel+0x5c>)
    8518:	200a      	movs	r0, #10
    851a:	4798      	blx	r3
	spi_select_slave(&spi_main, sensor, true);
    851c:	0031      	movs	r1, r6
    851e:	2201      	movs	r2, #1
    8520:	0020      	movs	r0, r4
    8522:	47a8      	blx	r5
	spi_transceive_buffer_wait(&spi_main, set_mode4, read_buffer, 4);
    8524:	2304      	movs	r3, #4
    8526:	aa01      	add	r2, sp, #4
    8528:	4909      	ldr	r1, [pc, #36]	; (8550 <setup_accel+0x60>)
    852a:	0020      	movs	r0, r4
    852c:	47b8      	blx	r7
	spi_select_slave(&spi_main, sensor, false);
    852e:	2200      	movs	r2, #0
    8530:	0031      	movs	r1, r6
    8532:	0020      	movs	r0, r4
    8534:	47a8      	blx	r5
}
    8536:	b003      	add	sp, #12
    8538:	bdf0      	pop	{r4, r5, r6, r7, pc}
    853a:	46c0      	nop			; (mov r8, r8)
    853c:	20001134 	.word	0x20001134
    8540:	00014a29 	.word	0x00014a29
    8544:	00014bb5 	.word	0x00014bb5
    8548:	200001c4 	.word	0x200001c4
    854c:	000151d9 	.word	0x000151d9
    8550:	200001c0 	.word	0x200001c0

00008554 <read_mag>:
uint8_t read_mag(struct spi_slave_inst *const sensor, float vector[3]){
    8554:	b5f0      	push	{r4, r5, r6, r7, lr}
    8556:	46de      	mov	lr, fp
    8558:	4657      	mov	r7, sl
    855a:	464e      	mov	r6, r9
    855c:	4645      	mov	r5, r8
    855e:	b5e0      	push	{r5, r6, r7, lr}
	spi_select_slave(&spi_main, sensor, true);
    8560:	4e5e      	ldr	r6, [pc, #376]	; (86dc <read_mag+0x188>)
    8562:	4b5f      	ldr	r3, [pc, #380]	; (86e0 <read_mag+0x18c>)
uint8_t read_mag(struct spi_slave_inst *const sensor, float vector[3]){
    8564:	b085      	sub	sp, #20
    8566:	4681      	mov	r9, r0
	spi_select_slave(&spi_main, sensor, true);
    8568:	2201      	movs	r2, #1
uint8_t read_mag(struct spi_slave_inst *const sensor, float vector[3]){
    856a:	468b      	mov	fp, r1
	spi_select_slave(&spi_main, sensor, true);
    856c:	0001      	movs	r1, r0
    856e:	0030      	movs	r0, r6
    8570:	4698      	mov	r8, r3
    8572:	4798      	blx	r3
	write_buffer[0]=0x00; //poll register
    8574:	466a      	mov	r2, sp
    8576:	2300      	movs	r3, #0
    8578:	7013      	strb	r3, [r2, #0]
	write_buffer[1]=0x70; //set to poll X,Y,Z
    857a:	3370      	adds	r3, #112	; 0x70
    857c:	7053      	strb	r3, [r2, #1]
	spi_write_buffer_wait(&spi_main, write_buffer, 2);
    857e:	4669      	mov	r1, sp
    8580:	4b58      	ldr	r3, [pc, #352]	; (86e4 <read_mag+0x190>)
    8582:	2202      	movs	r2, #2
    8584:	0030      	movs	r0, r6
    8586:	4798      	blx	r3
	spi_select_slave(&spi_main, sensor, false);
    8588:	2200      	movs	r2, #0
    858a:	4649      	mov	r1, r9
    858c:	0030      	movs	r0, r6
    858e:	47c0      	blx	r8
	delay_us(1);
    8590:	4b55      	ldr	r3, [pc, #340]	; (86e8 <read_mag+0x194>)
    8592:	2001      	movs	r0, #1
    8594:	469a      	mov	sl, r3
    8596:	4798      	blx	r3
		spi_select_slave(&spi_main, sensor, true);
    8598:	2201      	movs	r2, #1
    859a:	4649      	mov	r1, r9
    859c:	0030      	movs	r0, r6
    859e:	47c0      	blx	r8
		write_buffer[0]=0xB4;
    85a0:	466a      	mov	r2, sp
    85a2:	23b4      	movs	r3, #180	; 0xb4
		spi_transceive_buffer_wait(&spi_main, write_buffer, read_buffer, 2);
    85a4:	af01      	add	r7, sp, #4
		write_buffer[0]=0xB4;
    85a6:	7013      	strb	r3, [r2, #0]
		write_buffer[1]=0xFF;
    85a8:	334b      	adds	r3, #75	; 0x4b
    85aa:	7053      	strb	r3, [r2, #1]
		spi_transceive_buffer_wait(&spi_main, write_buffer, read_buffer, 2);
    85ac:	4669      	mov	r1, sp
    85ae:	3bfd      	subs	r3, #253	; 0xfd
    85b0:	003a      	movs	r2, r7
    85b2:	4c4e      	ldr	r4, [pc, #312]	; (86ec <read_mag+0x198>)
    85b4:	0030      	movs	r0, r6
    85b6:	47a0      	blx	r4
		data_ready=data_ready & 0x80;
    85b8:	237f      	movs	r3, #127	; 0x7f
		data_ready=read_buffer[1];
    85ba:	787d      	ldrb	r5, [r7, #1]
		spi_select_slave(&spi_main, sensor, false);
    85bc:	2200      	movs	r2, #0
    85be:	4649      	mov	r1, r9
    85c0:	0030      	movs	r0, r6
		data_ready=data_ready & 0x80;
    85c2:	439d      	bics	r5, r3
		spi_select_slave(&spi_main, sensor, false);
    85c4:	47c0      	blx	r8
		delay_us(1);
    85c6:	2001      	movs	r0, #1
    85c8:	47d0      	blx	sl
		counter1=counter1+1;
    85ca:	2401      	movs	r4, #1
    85cc:	e01b      	b.n	8606 <read_mag+0xb2>
		spi_select_slave(&spi_main, sensor, true);
    85ce:	2201      	movs	r2, #1
    85d0:	4649      	mov	r1, r9
    85d2:	0030      	movs	r0, r6
    85d4:	47c0      	blx	r8
		write_buffer[0]=0xB4;
    85d6:	466b      	mov	r3, sp
    85d8:	22b4      	movs	r2, #180	; 0xb4
    85da:	701a      	strb	r2, [r3, #0]
		write_buffer[1]=0xFF;
    85dc:	22ff      	movs	r2, #255	; 0xff
		spi_transceive_buffer_wait(&spi_main, write_buffer, read_buffer, 2);
    85de:	4669      	mov	r1, sp
		write_buffer[1]=0xFF;
    85e0:	705a      	strb	r2, [r3, #1]
		spi_transceive_buffer_wait(&spi_main, write_buffer, read_buffer, 2);
    85e2:	4d42      	ldr	r5, [pc, #264]	; (86ec <read_mag+0x198>)
    85e4:	2302      	movs	r3, #2
    85e6:	003a      	movs	r2, r7
    85e8:	0030      	movs	r0, r6
    85ea:	47a8      	blx	r5
		data_ready=data_ready & 0x80;
    85ec:	237f      	movs	r3, #127	; 0x7f
		data_ready=read_buffer[1];
    85ee:	787d      	ldrb	r5, [r7, #1]
		counter1=counter1+1;
    85f0:	3401      	adds	r4, #1
		spi_select_slave(&spi_main, sensor, false);
    85f2:	2200      	movs	r2, #0
    85f4:	4649      	mov	r1, r9
    85f6:	0030      	movs	r0, r6
		data_ready=data_ready & 0x80;
    85f8:	439d      	bics	r5, r3
		counter1=counter1+1;
    85fa:	b2e4      	uxtb	r4, r4
		spi_select_slave(&spi_main, sensor, false);
    85fc:	47c0      	blx	r8
		delay_us(1);
    85fe:	2001      	movs	r0, #1
    8600:	47d0      	blx	sl
		if(counter1==0xFF){break;}
    8602:	2cff      	cmp	r4, #255	; 0xff
    8604:	d001      	beq.n	860a <read_mag+0xb6>
	while(!data_ready){
    8606:	2d00      	cmp	r5, #0
    8608:	d0e1      	beq.n	85ce <read_mag+0x7a>
	spi_select_slave(&spi_main, sensor, true);
    860a:	2201      	movs	r2, #1
    860c:	4649      	mov	r1, r9
    860e:	0030      	movs	r0, r6
    8610:	47c0      	blx	r8
	write_buffer[0]=0xA4;
    8612:	23a4      	movs	r3, #164	; 0xa4
    8614:	466a      	mov	r2, sp
	spi_write_buffer_wait(&spi_main, write_buffer, 1);
    8616:	4669      	mov	r1, sp
	write_buffer[0]=0xA4;
    8618:	7013      	strb	r3, [r2, #0]
	spi_write_buffer_wait(&spi_main, write_buffer, 1);
    861a:	0030      	movs	r0, r6
    861c:	2201      	movs	r2, #1
    861e:	4b31      	ldr	r3, [pc, #196]	; (86e4 <read_mag+0x190>)
    8620:	4798      	blx	r3
	spi_read_buffer_wait(&spi_main, read_buffer, 9, 0xFF);
    8622:	23ff      	movs	r3, #255	; 0xff
    8624:	2209      	movs	r2, #9
    8626:	0039      	movs	r1, r7
    8628:	0030      	movs	r0, r6
    862a:	4d31      	ldr	r5, [pc, #196]	; (86f0 <read_mag+0x19c>)
    862c:	47a8      	blx	r5
	spi_select_slave(&spi_main, sensor, false);
    862e:	2200      	movs	r2, #0
    8630:	4649      	mov	r1, r9
    8632:	0030      	movs	r0, r6
    8634:	47c0      	blx	r8
	delay_us(1);
    8636:	2001      	movs	r0, #1
    8638:	47d0      	blx	sl
	if(data[0] & 0x80){//negative number
    863a:	783b      	ldrb	r3, [r7, #0]
	int32_t temp=0x00000000;
    863c:	2200      	movs	r2, #0
	if(data[0] & 0x80){//negative number
    863e:	b259      	sxtb	r1, r3
    8640:	2900      	cmp	r1, #0
    8642:	db42      	blt.n	86ca <read_mag+0x176>
	temp=temp+data[0];
    8644:	189b      	adds	r3, r3, r2
	temp=temp+data[1];
    8646:	7878      	ldrb	r0, [r7, #1]
	temp=temp<<8;
    8648:	021b      	lsls	r3, r3, #8
	temp=temp+data[1];
    864a:	18c3      	adds	r3, r0, r3
	temp=temp+data[2];
    864c:	78b8      	ldrb	r0, [r7, #2]
	temp=temp<<8;
    864e:	021b      	lsls	r3, r3, #8
	temp=temp+data[2];
    8650:	18c0      	adds	r0, r0, r3
	result=temp;
    8652:	4d28      	ldr	r5, [pc, #160]	; (86f4 <read_mag+0x1a0>)
    8654:	47a8      	blx	r5
	if(data[0] & 0x80){//negative number
    8656:	78fb      	ldrb	r3, [r7, #3]
	result=temp;
    8658:	1c06      	adds	r6, r0, #0
	if(data[0] & 0x80){//negative number
    865a:	b259      	sxtb	r1, r3
	int32_t temp=0x00000000;
    865c:	2200      	movs	r2, #0
	if(data[0] & 0x80){//negative number
    865e:	2900      	cmp	r1, #0
    8660:	db39      	blt.n	86d6 <read_mag+0x182>
	temp=temp+data[0];
    8662:	189b      	adds	r3, r3, r2
	temp=temp+data[1];
    8664:	7938      	ldrb	r0, [r7, #4]
	temp=temp<<8;
    8666:	021b      	lsls	r3, r3, #8
	temp=temp+data[1];
    8668:	18c3      	adds	r3, r0, r3
	temp=temp+data[2];
    866a:	7978      	ldrb	r0, [r7, #5]
	temp=temp<<8;
    866c:	021b      	lsls	r3, r3, #8
	temp=temp+data[2];
    866e:	18c0      	adds	r0, r0, r3
	result=temp;
    8670:	47a8      	blx	r5
    8672:	465b      	mov	r3, fp
    8674:	6058      	str	r0, [r3, #4]
	if(data[0] & 0x80){//negative number
    8676:	79bb      	ldrb	r3, [r7, #6]
	int32_t temp=0x00000000;
    8678:	2200      	movs	r2, #0
	if(data[0] & 0x80){//negative number
    867a:	b259      	sxtb	r1, r3
    867c:	2900      	cmp	r1, #0
    867e:	db27      	blt.n	86d0 <read_mag+0x17c>
	temp=temp+data[0];
    8680:	189b      	adds	r3, r3, r2
	temp=temp+data[1];
    8682:	79f8      	ldrb	r0, [r7, #7]
	temp=temp<<8;
    8684:	021b      	lsls	r3, r3, #8
	temp=temp+data[1];
    8686:	18c3      	adds	r3, r0, r3
	temp=temp+data[2];
    8688:	7a38      	ldrb	r0, [r7, #8]
	temp=temp<<8;
    868a:	021b      	lsls	r3, r3, #8
	temp=temp+data[2];
    868c:	18c0      	adds	r0, r0, r3
	result=temp;
    868e:	47a8      	blx	r5
	vector[2]=-1* parse_mag_data(&read_buffer[6]);//Z axis inverted
    8690:	2380      	movs	r3, #128	; 0x80
    8692:	061b      	lsls	r3, r3, #24
    8694:	18c5      	adds	r5, r0, r3
    8696:	465b      	mov	r3, fp
		vector[i] = vector[i]/c_coarse_gain;
    8698:	4f17      	ldr	r7, [pc, #92]	; (86f8 <read_mag+0x1a4>)
	vector[2]=-1* parse_mag_data(&read_buffer[6]);//Z axis inverted
    869a:	609d      	str	r5, [r3, #8]
		vector[i] = vector[i]/c_coarse_gain;
    869c:	4917      	ldr	r1, [pc, #92]	; (86fc <read_mag+0x1a8>)
    869e:	1c30      	adds	r0, r6, #0
    86a0:	47b8      	blx	r7
    86a2:	465b      	mov	r3, fp
    86a4:	4915      	ldr	r1, [pc, #84]	; (86fc <read_mag+0x1a8>)
    86a6:	6018      	str	r0, [r3, #0]
    86a8:	6858      	ldr	r0, [r3, #4]
    86aa:	47b8      	blx	r7
    86ac:	465b      	mov	r3, fp
    86ae:	4913      	ldr	r1, [pc, #76]	; (86fc <read_mag+0x1a8>)
    86b0:	6058      	str	r0, [r3, #4]
    86b2:	1c28      	adds	r0, r5, #0
    86b4:	47b8      	blx	r7
    86b6:	465b      	mov	r3, fp
    86b8:	6098      	str	r0, [r3, #8]
}
    86ba:	0020      	movs	r0, r4
    86bc:	b005      	add	sp, #20
    86be:	bc3c      	pop	{r2, r3, r4, r5}
    86c0:	4690      	mov	r8, r2
    86c2:	4699      	mov	r9, r3
    86c4:	46a2      	mov	sl, r4
    86c6:	46ab      	mov	fp, r5
    86c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp=temp<<8;
    86ca:	22ff      	movs	r2, #255	; 0xff
    86cc:	0212      	lsls	r2, r2, #8
    86ce:	e7b9      	b.n	8644 <read_mag+0xf0>
    86d0:	22ff      	movs	r2, #255	; 0xff
    86d2:	0212      	lsls	r2, r2, #8
    86d4:	e7d4      	b.n	8680 <read_mag+0x12c>
    86d6:	22ff      	movs	r2, #255	; 0xff
    86d8:	0212      	lsls	r2, r2, #8
    86da:	e7c2      	b.n	8662 <read_mag+0x10e>
    86dc:	20001134 	.word	0x20001134
    86e0:	00014a29 	.word	0x00014a29
    86e4:	00014afd 	.word	0x00014afd
    86e8:	000151a9 	.word	0x000151a9
    86ec:	00014bb5 	.word	0x00014bb5
    86f0:	00014909 	.word	0x00014909
    86f4:	0001d161 	.word	0x0001d161
    86f8:	0001c7c9 	.word	0x0001c7c9
    86fc:	45dac000 	.word	0x45dac000

00008700 <quick_measurement>:
void quick_measurement(struct MEASUREMENT *meas_inst){
    8700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	read_accel(&slave_acc1, meas_inst->a1xyz);
    8702:	0005      	movs	r5, r0
void quick_measurement(struct MEASUREMENT *meas_inst){
    8704:	46ce      	mov	lr, r9
    8706:	4647      	mov	r7, r8
	read_accel(&slave_acc1, meas_inst->a1xyz);
    8708:	3520      	adds	r5, #32
void quick_measurement(struct MEASUREMENT *meas_inst){
    870a:	b580      	push	{r7, lr}
    870c:	0004      	movs	r4, r0
	read_accel(&slave_acc1, meas_inst->a1xyz);
    870e:	0029      	movs	r1, r5
    8710:	4e16      	ldr	r6, [pc, #88]	; (876c <quick_measurement+0x6c>)
    8712:	4817      	ldr	r0, [pc, #92]	; (8770 <quick_measurement+0x70>)
    8714:	47b0      	blx	r6
	read_accel(&slave_acc2, meas_inst->a2xyz);
    8716:	232c      	movs	r3, #44	; 0x2c
    8718:	4698      	mov	r8, r3
    871a:	44a0      	add	r8, r4
    871c:	4641      	mov	r1, r8
    871e:	4815      	ldr	r0, [pc, #84]	; (8774 <quick_measurement+0x74>)
	read_mag(&slave_mag1, meas_inst->c1xyz);
    8720:	0027      	movs	r7, r4
	read_accel(&slave_acc2, meas_inst->a2xyz);
    8722:	47b0      	blx	r6
	read_mag(&slave_mag2, meas_inst->c2xyz);
    8724:	0026      	movs	r6, r4
	read_mag(&slave_mag1, meas_inst->c1xyz);
    8726:	4b14      	ldr	r3, [pc, #80]	; (8778 <quick_measurement+0x78>)
    8728:	3738      	adds	r7, #56	; 0x38
	read_mag(&slave_mag2, meas_inst->c2xyz);
    872a:	3644      	adds	r6, #68	; 0x44
	read_mag(&slave_mag1, meas_inst->c1xyz);
    872c:	0039      	movs	r1, r7
    872e:	4813      	ldr	r0, [pc, #76]	; (877c <quick_measurement+0x7c>)
    8730:	4699      	mov	r9, r3
    8732:	4798      	blx	r3
	read_mag(&slave_mag2, meas_inst->c2xyz);
    8734:	0031      	movs	r1, r6
    8736:	4812      	ldr	r0, [pc, #72]	; (8780 <quick_measurement+0x80>)
    8738:	47c8      	blx	r9
	cal_apply_cal(meas_inst->a1xyz, meas_inst->a1xyz, &a1_calst);
    873a:	0029      	movs	r1, r5
    873c:	0028      	movs	r0, r5
    873e:	4a11      	ldr	r2, [pc, #68]	; (8784 <quick_measurement+0x84>)
    8740:	4d11      	ldr	r5, [pc, #68]	; (8788 <quick_measurement+0x88>)
    8742:	47a8      	blx	r5
	cal_apply_cal(meas_inst->a2xyz, meas_inst->a2xyz, &a2_calst);
    8744:	4641      	mov	r1, r8
    8746:	4640      	mov	r0, r8
    8748:	4a10      	ldr	r2, [pc, #64]	; (878c <quick_measurement+0x8c>)
    874a:	47a8      	blx	r5
	cal_apply_cal(meas_inst->c1xyz, meas_inst->c1xyz, &c1_calst);
    874c:	0039      	movs	r1, r7
    874e:	0038      	movs	r0, r7
    8750:	4a0f      	ldr	r2, [pc, #60]	; (8790 <quick_measurement+0x90>)
    8752:	47a8      	blx	r5
	cal_apply_cal(meas_inst->c2xyz, meas_inst->c2xyz, &c2_calst);
    8754:	0031      	movs	r1, r6
    8756:	0030      	movs	r0, r6
    8758:	4a0e      	ldr	r2, [pc, #56]	; (8794 <quick_measurement+0x94>)
    875a:	47a8      	blx	r5
	calc_orientation(meas_inst);
    875c:	0020      	movs	r0, r4
    875e:	4b0e      	ldr	r3, [pc, #56]	; (8798 <quick_measurement+0x98>)
    8760:	4798      	blx	r3
}
    8762:	bc0c      	pop	{r2, r3}
    8764:	4690      	mov	r8, r2
    8766:	4699      	mov	r9, r3
    8768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    876a:	46c0      	nop			; (mov r8, r8)
    876c:	000083d1 	.word	0x000083d1
    8770:	20001168 	.word	0x20001168
    8774:	200010e0 	.word	0x200010e0
    8778:	00008555 	.word	0x00008555
    877c:	2000116c 	.word	0x2000116c
    8780:	200010c4 	.word	0x200010c4
    8784:	200051f4 	.word	0x200051f4
    8788:	0000e559 	.word	0x0000e559
    878c:	20004dd0 	.word	0x20004dd0
    8790:	200036fc 	.word	0x200036fc
    8794:	20002650 	.word	0x20002650
    8798:	0000cef1 	.word	0x0000cef1

0000879c <setup_mag>:
void setup_mag(struct spi_slave_inst *const sensor){
    879c:	b5f0      	push	{r4, r5, r6, r7, lr}
    879e:	46ce      	mov	lr, r9
    87a0:	4647      	mov	r7, r8
    87a2:	b580      	push	{r7, lr}
	spi_select_slave(&spi_main, sensor, true);
    87a4:	4c31      	ldr	r4, [pc, #196]	; (886c <setup_mag+0xd0>)
void setup_mag(struct spi_slave_inst *const sensor){
    87a6:	b083      	sub	sp, #12
    87a8:	0006      	movs	r6, r0
	spi_select_slave(&spi_main, sensor, true);
    87aa:	4d31      	ldr	r5, [pc, #196]	; (8870 <setup_mag+0xd4>)
    87ac:	0001      	movs	r1, r0
    87ae:	2201      	movs	r2, #1
    87b0:	0020      	movs	r0, r4
    87b2:	47a8      	blx	r5
	write_buffer[0]=0x04;//location of first write count register
    87b4:	466a      	mov	r2, sp
    87b6:	2304      	movs	r3, #4
    87b8:	7013      	strb	r3, [r2, #0]
	write_buffer[1]=cycle_count1;
    87ba:	4b2e      	ldr	r3, [pc, #184]	; (8874 <setup_mag+0xd8>)
	write_buffer[2]=cycle_count2;
    87bc:	4669      	mov	r1, sp
	write_buffer[1]=cycle_count1;
    87be:	781a      	ldrb	r2, [r3, #0]
    87c0:	466b      	mov	r3, sp
    87c2:	705a      	strb	r2, [r3, #1]
	write_buffer[2]=cycle_count2;
    87c4:	4b2c      	ldr	r3, [pc, #176]	; (8878 <setup_mag+0xdc>)
	spi_write_buffer_wait(&spi_main, write_buffer, 7);
    87c6:	4f2d      	ldr	r7, [pc, #180]	; (887c <setup_mag+0xe0>)
	write_buffer[2]=cycle_count2;
    87c8:	781b      	ldrb	r3, [r3, #0]
	write_buffer[3]=cycle_count1;
    87ca:	70ca      	strb	r2, [r1, #3]
	write_buffer[5]=cycle_count1;
    87cc:	714a      	strb	r2, [r1, #5]
	spi_write_buffer_wait(&spi_main, write_buffer, 7);
    87ce:	0020      	movs	r0, r4
    87d0:	2207      	movs	r2, #7
	write_buffer[2]=cycle_count2;
    87d2:	708b      	strb	r3, [r1, #2]
	write_buffer[4]=cycle_count2;
    87d4:	710b      	strb	r3, [r1, #4]
	write_buffer[6]=cycle_count2;
    87d6:	718b      	strb	r3, [r1, #6]
	spi_write_buffer_wait(&spi_main, write_buffer, 7);
    87d8:	47b8      	blx	r7
	spi_select_slave(&spi_main, sensor, false);
    87da:	0031      	movs	r1, r6
    87dc:	2200      	movs	r2, #0
    87de:	0020      	movs	r0, r4
    87e0:	47a8      	blx	r5
	delay_ms(10);
    87e2:	200a      	movs	r0, #10
    87e4:	4b26      	ldr	r3, [pc, #152]	; (8880 <setup_mag+0xe4>)
    87e6:	4798      	blx	r3
	write_buffer[0]=0x01;//location of CRM register
    87e8:	466a      	mov	r2, sp
    87ea:	2301      	movs	r3, #1
    87ec:	7013      	strb	r3, [r2, #0]
	write_buffer[1]=0x00;
    87ee:	2300      	movs	r3, #0
    87f0:	4699      	mov	r9, r3
    87f2:	466b      	mov	r3, sp
    87f4:	464a      	mov	r2, r9
	spi_select_slave(&spi_main, sensor, true);
    87f6:	0031      	movs	r1, r6
	write_buffer[1]=0x00;
    87f8:	705a      	strb	r2, [r3, #1]
	spi_select_slave(&spi_main, sensor, true);
    87fa:	0020      	movs	r0, r4
    87fc:	2201      	movs	r2, #1
    87fe:	47a8      	blx	r5
	spi_write_buffer_wait(&spi_main, write_buffer, 2);
    8800:	4669      	mov	r1, sp
    8802:	2202      	movs	r2, #2
    8804:	0020      	movs	r0, r4
    8806:	47b8      	blx	r7
	spi_select_slave(&spi_main, sensor, false);
    8808:	0031      	movs	r1, r6
    880a:	2200      	movs	r2, #0
    880c:	0020      	movs	r0, r4
    880e:	47a8      	blx	r5
	delay_us(1);
    8810:	4b1c      	ldr	r3, [pc, #112]	; (8884 <setup_mag+0xe8>)
    8812:	2001      	movs	r0, #1
    8814:	4698      	mov	r8, r3
    8816:	4798      	blx	r3
	write_buffer[0]=0x33;//location of BIST register
    8818:	466a      	mov	r2, sp
    881a:	2333      	movs	r3, #51	; 0x33
    881c:	7013      	strb	r3, [r2, #0]
	write_buffer[1]=0x00;	//default value
    881e:	466b      	mov	r3, sp
    8820:	464a      	mov	r2, r9
	spi_select_slave(&spi_main, sensor, true);
    8822:	0031      	movs	r1, r6
	write_buffer[1]=0x00;	//default value
    8824:	705a      	strb	r2, [r3, #1]
	spi_select_slave(&spi_main, sensor, true);
    8826:	0020      	movs	r0, r4
    8828:	2201      	movs	r2, #1
    882a:	47a8      	blx	r5
	spi_write_buffer_wait(&spi_main, write_buffer, 2);
    882c:	4669      	mov	r1, sp
    882e:	2202      	movs	r2, #2
    8830:	0020      	movs	r0, r4
    8832:	47b8      	blx	r7
	spi_select_slave(&spi_main, sensor, false);
    8834:	0031      	movs	r1, r6
    8836:	2200      	movs	r2, #0
    8838:	0020      	movs	r0, r4
    883a:	47a8      	blx	r5
	delay_us(1);
    883c:	2001      	movs	r0, #1
    883e:	47c0      	blx	r8
	write_buffer[0]=0x35;//location of HSHAKE register
    8840:	466a      	mov	r2, sp
    8842:	2335      	movs	r3, #53	; 0x35
    8844:	7013      	strb	r3, [r2, #0]
	write_buffer[1]=0x1B;//default value
    8846:	3b1a      	subs	r3, #26
    8848:	7053      	strb	r3, [r2, #1]
	spi_select_slave(&spi_main, sensor, true);
    884a:	0031      	movs	r1, r6
    884c:	2201      	movs	r2, #1
    884e:	0020      	movs	r0, r4
    8850:	47a8      	blx	r5
	spi_write_buffer_wait(&spi_main, write_buffer, 2);
    8852:	4669      	mov	r1, sp
    8854:	2202      	movs	r2, #2
    8856:	0020      	movs	r0, r4
    8858:	47b8      	blx	r7
	spi_select_slave(&spi_main, sensor, false);
    885a:	2200      	movs	r2, #0
    885c:	0031      	movs	r1, r6
    885e:	0020      	movs	r0, r4
    8860:	47a8      	blx	r5
}
    8862:	b003      	add	sp, #12
    8864:	bc0c      	pop	{r2, r3}
    8866:	4690      	mov	r8, r2
    8868:	4699      	mov	r9, r3
    886a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    886c:	20001134 	.word	0x20001134
    8870:	00014a29 	.word	0x00014a29
    8874:	200001ad 	.word	0x200001ad
    8878:	200001ae 	.word	0x200001ae
    887c:	00014afd 	.word	0x00014afd
    8880:	000151d9 	.word	0x000151d9
    8884:	000151a9 	.word	0x000151a9

00008888 <adjustErrorSensitivity>:
	options.errorSensitivity = options.errorSensitivity+errorSensitivityAdjustmentIncrement;
    8888:	21fa      	movs	r1, #250	; 0xfa
void adjustErrorSensitivity(void){
    888a:	b570      	push	{r4, r5, r6, lr}
	options.errorSensitivity = options.errorSensitivity+errorSensitivityAdjustmentIncrement;
    888c:	4c08      	ldr	r4, [pc, #32]	; (88b0 <adjustErrorSensitivity+0x28>)
    888e:	0589      	lsls	r1, r1, #22
    8890:	4b08      	ldr	r3, [pc, #32]	; (88b4 <adjustErrorSensitivity+0x2c>)
    8892:	68a0      	ldr	r0, [r4, #8]
    8894:	4798      	blx	r3
	if (options.errorSensitivity>errorSensitivityAdjustmentMax){
    8896:	4908      	ldr	r1, [pc, #32]	; (88b8 <adjustErrorSensitivity+0x30>)
    8898:	4b08      	ldr	r3, [pc, #32]	; (88bc <adjustErrorSensitivity+0x34>)
	options.errorSensitivity = options.errorSensitivity+errorSensitivityAdjustmentIncrement;
    889a:	1c05      	adds	r5, r0, #0
	if (options.errorSensitivity>errorSensitivityAdjustmentMax){
    889c:	4798      	blx	r3
    889e:	2800      	cmp	r0, #0
    88a0:	d003      	beq.n	88aa <adjustErrorSensitivity+0x22>
		options.errorSensitivity = errorSensitivityAdjustmentMin;
    88a2:	23fc      	movs	r3, #252	; 0xfc
    88a4:	059b      	lsls	r3, r3, #22
    88a6:	60a3      	str	r3, [r4, #8]
}
    88a8:	bd70      	pop	{r4, r5, r6, pc}
	options.errorSensitivity = options.errorSensitivity+errorSensitivityAdjustmentIncrement;
    88aa:	60a5      	str	r5, [r4, #8]
    88ac:	e7fc      	b.n	88a8 <adjustErrorSensitivity+0x20>
    88ae:	46c0      	nop			; (mov r8, r8)
    88b0:	20003770 	.word	0x20003770
    88b4:	0001c4a5 	.word	0x0001c4a5
    88b8:	40400000 	.word	0x40400000
    88bc:	0001c341 	.word	0x0001c341

000088c0 <error_check>:
		error_incremented = false;
	}
	return error_incremented;
}

void error_check(struct MEASUREMENT *meas_inst){
    88c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    88c2:	46de      	mov	lr, fp
    88c4:	4657      	mov	r7, sl
    88c6:	464e      	mov	r6, r9
    88c8:	4645      	mov	r5, r8
	comp_err_limit  = errlim_mag*max(cal_report_azm_inc.mag_stdev_c1, cal_report_azm_inc.mag_stdev_c2);
	
	accel_err_limit = 0.5;
	comp_err_limit  = 0.5;
	
	maga1 = calc_magnitude(meas_inst->a1xyz);
    88ca:	2320      	movs	r3, #32
void error_check(struct MEASUREMENT *meas_inst){
    88cc:	4680      	mov	r8, r0
    88ce:	b5e0      	push	{r5, r6, r7, lr}
	maga1 = calc_magnitude(meas_inst->a1xyz);
    88d0:	4443      	add	r3, r8
void error_check(struct MEASUREMENT *meas_inst){
    88d2:	b097      	sub	sp, #92	; 0x5c
	maga1 = calc_magnitude(meas_inst->a1xyz);
    88d4:	9306      	str	r3, [sp, #24]
	magnitude = sqrt(pow(xyz[0],2)+pow(xyz[1],2)+pow(xyz[2],2));
    88d6:	4bdf      	ldr	r3, [pc, #892]	; (8c54 <error_check+0x394>)
    88d8:	6a00      	ldr	r0, [r0, #32]
    88da:	469b      	mov	fp, r3
    88dc:	47d8      	blx	fp
    88de:	4643      	mov	r3, r8
    88e0:	0006      	movs	r6, r0
    88e2:	6a58      	ldr	r0, [r3, #36]	; 0x24
    88e4:	000f      	movs	r7, r1
    88e6:	47d8      	blx	fp
    88e8:	4643      	mov	r3, r8
    88ea:	0004      	movs	r4, r0
    88ec:	6a98      	ldr	r0, [r3, #40]	; 0x28
    88ee:	000d      	movs	r5, r1
    88f0:	47d8      	blx	fp
    88f2:	0022      	movs	r2, r4
    88f4:	9002      	str	r0, [sp, #8]
    88f6:	9103      	str	r1, [sp, #12]
    88f8:	002b      	movs	r3, r5
    88fa:	0020      	movs	r0, r4
    88fc:	0029      	movs	r1, r5
    88fe:	4cd6      	ldr	r4, [pc, #856]	; (8c58 <error_check+0x398>)
    8900:	47a0      	blx	r4
    8902:	0032      	movs	r2, r6
    8904:	0004      	movs	r4, r0
    8906:	000d      	movs	r5, r1
    8908:	003b      	movs	r3, r7
    890a:	0030      	movs	r0, r6
    890c:	0039      	movs	r1, r7
    890e:	4ed2      	ldr	r6, [pc, #840]	; (8c58 <error_check+0x398>)
    8910:	47b0      	blx	r6
    8912:	000b      	movs	r3, r1
    8914:	49d1      	ldr	r1, [pc, #836]	; (8c5c <error_check+0x39c>)
    8916:	0002      	movs	r2, r0
    8918:	4689      	mov	r9, r1
    891a:	0020      	movs	r0, r4
    891c:	0029      	movs	r1, r5
    891e:	47c8      	blx	r9
    8920:	0004      	movs	r4, r0
    8922:	000d      	movs	r5, r1
    8924:	9802      	ldr	r0, [sp, #8]
    8926:	9903      	ldr	r1, [sp, #12]
    8928:	0002      	movs	r2, r0
    892a:	000b      	movs	r3, r1
    892c:	47b0      	blx	r6
    892e:	0002      	movs	r2, r0
    8930:	000b      	movs	r3, r1
    8932:	0020      	movs	r0, r4
    8934:	0029      	movs	r1, r5
    8936:	47c8      	blx	r9
    8938:	4bc9      	ldr	r3, [pc, #804]	; (8c60 <error_check+0x3a0>)
    893a:	469a      	mov	sl, r3
    893c:	4798      	blx	r3
    893e:	4bc9      	ldr	r3, [pc, #804]	; (8c64 <error_check+0x3a4>)
    8940:	4798      	blx	r3
	maga2 = calc_magnitude(meas_inst->a2xyz);
    8942:	232c      	movs	r3, #44	; 0x2c
    8944:	4443      	add	r3, r8
    8946:	9307      	str	r3, [sp, #28]
	magnitude = sqrt(pow(xyz[0],2)+pow(xyz[1],2)+pow(xyz[2],2));
    8948:	4643      	mov	r3, r8
    894a:	9005      	str	r0, [sp, #20]
    894c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    894e:	47d8      	blx	fp
    8950:	4643      	mov	r3, r8
    8952:	0004      	movs	r4, r0
    8954:	6b18      	ldr	r0, [r3, #48]	; 0x30
    8956:	000d      	movs	r5, r1
    8958:	47d8      	blx	fp
    895a:	4643      	mov	r3, r8
    895c:	0006      	movs	r6, r0
    895e:	6b58      	ldr	r0, [r3, #52]	; 0x34
    8960:	000f      	movs	r7, r1
    8962:	47d8      	blx	fp
    8964:	0022      	movs	r2, r4
    8966:	9002      	str	r0, [sp, #8]
    8968:	9103      	str	r1, [sp, #12]
    896a:	002b      	movs	r3, r5
    896c:	0020      	movs	r0, r4
    896e:	0029      	movs	r1, r5
    8970:	4cb9      	ldr	r4, [pc, #740]	; (8c58 <error_check+0x398>)
    8972:	47a0      	blx	r4
    8974:	0032      	movs	r2, r6
    8976:	0004      	movs	r4, r0
    8978:	000d      	movs	r5, r1
    897a:	003b      	movs	r3, r7
    897c:	0030      	movs	r0, r6
    897e:	0039      	movs	r1, r7
    8980:	4eb5      	ldr	r6, [pc, #724]	; (8c58 <error_check+0x398>)
    8982:	47b0      	blx	r6
    8984:	0002      	movs	r2, r0
    8986:	000b      	movs	r3, r1
    8988:	0020      	movs	r0, r4
    898a:	0029      	movs	r1, r5
    898c:	47c8      	blx	r9
    898e:	0004      	movs	r4, r0
    8990:	000d      	movs	r5, r1
    8992:	9802      	ldr	r0, [sp, #8]
    8994:	9903      	ldr	r1, [sp, #12]
    8996:	0002      	movs	r2, r0
    8998:	000b      	movs	r3, r1
    899a:	47b0      	blx	r6
    899c:	0002      	movs	r2, r0
    899e:	000b      	movs	r3, r1
    89a0:	0020      	movs	r0, r4
    89a2:	0029      	movs	r1, r5
    89a4:	47c8      	blx	r9
    89a6:	47d0      	blx	sl
    89a8:	4bae      	ldr	r3, [pc, #696]	; (8c64 <error_check+0x3a4>)
    89aa:	4798      	blx	r3
	magc1 = calc_magnitude(meas_inst->c1xyz);
    89ac:	2338      	movs	r3, #56	; 0x38
    89ae:	4443      	add	r3, r8
    89b0:	9308      	str	r3, [sp, #32]
	magnitude = sqrt(pow(xyz[0],2)+pow(xyz[1],2)+pow(xyz[2],2));
    89b2:	4643      	mov	r3, r8
    89b4:	9004      	str	r0, [sp, #16]
    89b6:	6b98      	ldr	r0, [r3, #56]	; 0x38
    89b8:	47d8      	blx	fp
    89ba:	4643      	mov	r3, r8
    89bc:	0006      	movs	r6, r0
    89be:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    89c0:	000f      	movs	r7, r1
    89c2:	47d8      	blx	fp
    89c4:	4643      	mov	r3, r8
    89c6:	0004      	movs	r4, r0
    89c8:	6c18      	ldr	r0, [r3, #64]	; 0x40
    89ca:	000d      	movs	r5, r1
    89cc:	47d8      	blx	fp
    89ce:	0022      	movs	r2, r4
    89d0:	9002      	str	r0, [sp, #8]
    89d2:	9103      	str	r1, [sp, #12]
    89d4:	002b      	movs	r3, r5
    89d6:	0020      	movs	r0, r4
    89d8:	0029      	movs	r1, r5
    89da:	4c9f      	ldr	r4, [pc, #636]	; (8c58 <error_check+0x398>)
    89dc:	47a0      	blx	r4
    89de:	0032      	movs	r2, r6
    89e0:	0004      	movs	r4, r0
    89e2:	000d      	movs	r5, r1
    89e4:	003b      	movs	r3, r7
    89e6:	0030      	movs	r0, r6
    89e8:	0039      	movs	r1, r7
    89ea:	4e9b      	ldr	r6, [pc, #620]	; (8c58 <error_check+0x398>)
    89ec:	47b0      	blx	r6
    89ee:	0002      	movs	r2, r0
    89f0:	000b      	movs	r3, r1
    89f2:	0020      	movs	r0, r4
    89f4:	0029      	movs	r1, r5
    89f6:	47c8      	blx	r9
    89f8:	0004      	movs	r4, r0
    89fa:	000d      	movs	r5, r1
    89fc:	9802      	ldr	r0, [sp, #8]
    89fe:	9903      	ldr	r1, [sp, #12]
    8a00:	0002      	movs	r2, r0
    8a02:	000b      	movs	r3, r1
    8a04:	47b0      	blx	r6
    8a06:	0002      	movs	r2, r0
    8a08:	000b      	movs	r3, r1
    8a0a:	0020      	movs	r0, r4
    8a0c:	0029      	movs	r1, r5
    8a0e:	47c8      	blx	r9
    8a10:	47d0      	blx	sl
    8a12:	4b94      	ldr	r3, [pc, #592]	; (8c64 <error_check+0x3a4>)
    8a14:	4798      	blx	r3
	magc2 = calc_magnitude(meas_inst->c2xyz);
    8a16:	2344      	movs	r3, #68	; 0x44
    8a18:	4443      	add	r3, r8
    8a1a:	9309      	str	r3, [sp, #36]	; 0x24
	magnitude = sqrt(pow(xyz[0],2)+pow(xyz[1],2)+pow(xyz[2],2));
    8a1c:	4643      	mov	r3, r8
    8a1e:	9002      	str	r0, [sp, #8]
    8a20:	6c58      	ldr	r0, [r3, #68]	; 0x44
    8a22:	47d8      	blx	fp
    8a24:	4643      	mov	r3, r8
    8a26:	0004      	movs	r4, r0
    8a28:	6c98      	ldr	r0, [r3, #72]	; 0x48
    8a2a:	000d      	movs	r5, r1
    8a2c:	47d8      	blx	fp
    8a2e:	4643      	mov	r3, r8
    8a30:	0006      	movs	r6, r0
    8a32:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    8a34:	000f      	movs	r7, r1
    8a36:	47d8      	blx	fp
    8a38:	0022      	movs	r2, r4
    8a3a:	900a      	str	r0, [sp, #40]	; 0x28
    8a3c:	910b      	str	r1, [sp, #44]	; 0x2c
    8a3e:	002b      	movs	r3, r5
    8a40:	0020      	movs	r0, r4
    8a42:	0029      	movs	r1, r5
    8a44:	4c84      	ldr	r4, [pc, #528]	; (8c58 <error_check+0x398>)
    8a46:	47a0      	blx	r4
    8a48:	0032      	movs	r2, r6
    8a4a:	0004      	movs	r4, r0
    8a4c:	000d      	movs	r5, r1
    8a4e:	003b      	movs	r3, r7
    8a50:	0030      	movs	r0, r6
    8a52:	0039      	movs	r1, r7
    8a54:	4e80      	ldr	r6, [pc, #512]	; (8c58 <error_check+0x398>)
    8a56:	47b0      	blx	r6
    8a58:	0002      	movs	r2, r0
    8a5a:	000b      	movs	r3, r1
    8a5c:	0020      	movs	r0, r4
    8a5e:	0029      	movs	r1, r5
    8a60:	47c8      	blx	r9
    8a62:	0004      	movs	r4, r0
    8a64:	000d      	movs	r5, r1
    8a66:	980a      	ldr	r0, [sp, #40]	; 0x28
    8a68:	990b      	ldr	r1, [sp, #44]	; 0x2c
    8a6a:	0002      	movs	r2, r0
    8a6c:	000b      	movs	r3, r1
    8a6e:	47b0      	blx	r6
    8a70:	0002      	movs	r2, r0
    8a72:	000b      	movs	r3, r1
    8a74:	0020      	movs	r0, r4
    8a76:	0029      	movs	r1, r5
    8a78:	47c8      	blx	r9
    8a7a:	47d0      	blx	sl
    8a7c:	4b79      	ldr	r3, [pc, #484]	; (8c64 <error_check+0x3a4>)
    8a7e:	4798      	blx	r3
		
	//  Magnitude Check accelerometer 1
	//mag = calc_magnitude(meas_inst->a1xyz);
	delta = fabs(maga1-1);
    8a80:	21fe      	movs	r1, #254	; 0xfe
    8a82:	9c05      	ldr	r4, [sp, #20]
    8a84:	4b78      	ldr	r3, [pc, #480]	; (8c68 <error_check+0x3a8>)
    8a86:	0589      	lsls	r1, r1, #22
	magnitude = sqrt(pow(xyz[0],2)+pow(xyz[1],2)+pow(xyz[2],2));
    8a88:	1c06      	adds	r6, r0, #0
	delta = fabs(maga1-1);
    8a8a:	1c20      	adds	r0, r4, #0
    8a8c:	469a      	mov	sl, r3
    8a8e:	4798      	blx	r3
	if (fabs(maga1-1)>accel_err_limit)
    8a90:	21fc      	movs	r1, #252	; 0xfc
	delta = fabs(maga1-1);
    8a92:	0040      	lsls	r0, r0, #1
	if (fabs(maga1-1)>accel_err_limit)
    8a94:	4b75      	ldr	r3, [pc, #468]	; (8c6c <error_check+0x3ac>)
	delta = fabs(maga1-1);
    8a96:	0840      	lsrs	r0, r0, #1
	if (fabs(maga1-1)>accel_err_limit)
    8a98:	0589      	lsls	r1, r1, #22
    8a9a:	4699      	mov	r9, r3
    8a9c:	4798      	blx	r3
    8a9e:	2800      	cmp	r0, #0
    8aa0:	d00f      	beq.n	8ac2 <error_check+0x202>
	{
		meas_inst->measurement_error[meas_inst->num_errors] = accel1_mag_err;
    8aa2:	4643      	mov	r3, r8
    8aa4:	4642      	mov	r2, r8
    8aa6:	2101      	movs	r1, #1
    8aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    8aaa:	18d2      	adds	r2, r2, r3
    8aac:	3260      	adds	r2, #96	; 0x60
    8aae:	7011      	strb	r1, [r2, #0]
		meas_inst->measurement_error_data1[meas_inst->num_errors] = maga1;
    8ab0:	001a      	movs	r2, r3
    8ab2:	4641      	mov	r1, r8
    8ab4:	321a      	adds	r2, #26
    8ab6:	0092      	lsls	r2, r2, #2
	if 	((meas_inst->num_errors+1)<array_max){
    8ab8:	3301      	adds	r3, #1
		meas_inst->measurement_error_data1[meas_inst->num_errors] = maga1;
    8aba:	5054      	str	r4, [r2, r1]
	if 	((meas_inst->num_errors+1)<array_max){
    8abc:	2b07      	cmp	r3, #7
    8abe:	d800      	bhi.n	8ac2 <error_check+0x202>
    8ac0:	e268      	b.n	8f94 <error_check+0x6d4>
		increment_error_count(meas_inst);
	}
	//  Magnitude Check accelerometer 2
	//mag = calc_magnitude(meas_inst->a2xyz);
	delta = fabs(maga2-1);
    8ac2:	21fe      	movs	r1, #254	; 0xfe
    8ac4:	9c04      	ldr	r4, [sp, #16]
    8ac6:	0589      	lsls	r1, r1, #22
    8ac8:	1c20      	adds	r0, r4, #0
    8aca:	47d0      	blx	sl
	if (delta>accel_err_limit)
    8acc:	21fc      	movs	r1, #252	; 0xfc
	delta = fabs(maga2-1);
    8ace:	0040      	lsls	r0, r0, #1
    8ad0:	0840      	lsrs	r0, r0, #1
	if (delta>accel_err_limit)
    8ad2:	0589      	lsls	r1, r1, #22
    8ad4:	47c8      	blx	r9
    8ad6:	2800      	cmp	r0, #0
    8ad8:	d00f      	beq.n	8afa <error_check+0x23a>
	{
		meas_inst->measurement_error[meas_inst->num_errors] = accel2_mag_err;
    8ada:	4643      	mov	r3, r8
    8adc:	4642      	mov	r2, r8
    8ade:	2102      	movs	r1, #2
    8ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    8ae2:	18d2      	adds	r2, r2, r3
    8ae4:	3260      	adds	r2, #96	; 0x60
    8ae6:	7011      	strb	r1, [r2, #0]
		meas_inst->measurement_error_data1[meas_inst->num_errors] = maga2;
    8ae8:	001a      	movs	r2, r3
    8aea:	4641      	mov	r1, r8
    8aec:	321a      	adds	r2, #26
    8aee:	0092      	lsls	r2, r2, #2
	if 	((meas_inst->num_errors+1)<array_max){
    8af0:	3301      	adds	r3, #1
		meas_inst->measurement_error_data1[meas_inst->num_errors] = maga2;
    8af2:	5054      	str	r4, [r2, r1]
	if 	((meas_inst->num_errors+1)<array_max){
    8af4:	2b07      	cmp	r3, #7
    8af6:	d800      	bhi.n	8afa <error_check+0x23a>
    8af8:	e24a      	b.n	8f90 <error_check+0x6d0>
		increment_error_count(meas_inst);
	}
	//  Magnitude Check Compass 1
	//mag = calc_magnitude(meas_inst->c1xyz);
	delta = fabs(magc1-1);
    8afa:	21fe      	movs	r1, #254	; 0xfe
    8afc:	9c02      	ldr	r4, [sp, #8]
    8afe:	0589      	lsls	r1, r1, #22
    8b00:	1c20      	adds	r0, r4, #0
    8b02:	47d0      	blx	sl
 	if (delta>comp_err_limit)
    8b04:	21fc      	movs	r1, #252	; 0xfc
	delta = fabs(magc1-1);
    8b06:	0040      	lsls	r0, r0, #1
    8b08:	0840      	lsrs	r0, r0, #1
 	if (delta>comp_err_limit)
    8b0a:	0589      	lsls	r1, r1, #22
    8b0c:	47c8      	blx	r9
    8b0e:	2800      	cmp	r0, #0
    8b10:	d00f      	beq.n	8b32 <error_check+0x272>
	{
		meas_inst->measurement_error[meas_inst->num_errors] = comp1_mag_err;
    8b12:	4643      	mov	r3, r8
    8b14:	4642      	mov	r2, r8
    8b16:	2103      	movs	r1, #3
    8b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    8b1a:	18d2      	adds	r2, r2, r3
    8b1c:	3260      	adds	r2, #96	; 0x60
    8b1e:	7011      	strb	r1, [r2, #0]
		meas_inst->measurement_error_data1[meas_inst->num_errors] = magc1;
    8b20:	001a      	movs	r2, r3
    8b22:	4641      	mov	r1, r8
    8b24:	321a      	adds	r2, #26
    8b26:	0092      	lsls	r2, r2, #2
	if 	((meas_inst->num_errors+1)<array_max){
    8b28:	3301      	adds	r3, #1
		meas_inst->measurement_error_data1[meas_inst->num_errors] = magc1;
    8b2a:	5054      	str	r4, [r2, r1]
	if 	((meas_inst->num_errors+1)<array_max){
    8b2c:	2b07      	cmp	r3, #7
    8b2e:	d800      	bhi.n	8b32 <error_check+0x272>
    8b30:	e22c      	b.n	8f8c <error_check+0x6cc>
		increment_error_count(meas_inst);

	}
	//  Magnitude Check Compass 2
	//mag = calc_magnitude(meas_inst->c2xyz);
	delta = fabs(magc2-1);
    8b32:	21fe      	movs	r1, #254	; 0xfe
    8b34:	1c30      	adds	r0, r6, #0
    8b36:	0589      	lsls	r1, r1, #22
    8b38:	47d0      	blx	sl
	if (delta>comp_err_limit)
    8b3a:	21fc      	movs	r1, #252	; 0xfc
	delta = fabs(magc2-1);
    8b3c:	0040      	lsls	r0, r0, #1
    8b3e:	0840      	lsrs	r0, r0, #1
	if (delta>comp_err_limit)
    8b40:	0589      	lsls	r1, r1, #22
    8b42:	47c8      	blx	r9
    8b44:	2800      	cmp	r0, #0
    8b46:	d00f      	beq.n	8b68 <error_check+0x2a8>
	{
		meas_inst->measurement_error[meas_inst->num_errors] = comp2_mag_err;
    8b48:	4643      	mov	r3, r8
    8b4a:	4642      	mov	r2, r8
    8b4c:	2104      	movs	r1, #4
    8b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    8b50:	18d2      	adds	r2, r2, r3
    8b52:	3260      	adds	r2, #96	; 0x60
    8b54:	7011      	strb	r1, [r2, #0]
		meas_inst->measurement_error_data1[meas_inst->num_errors] = magc2;
    8b56:	001a      	movs	r2, r3
    8b58:	4641      	mov	r1, r8
    8b5a:	321a      	adds	r2, #26
    8b5c:	0092      	lsls	r2, r2, #2
	if 	((meas_inst->num_errors+1)<array_max){
    8b5e:	3301      	adds	r3, #1
		meas_inst->measurement_error_data1[meas_inst->num_errors] = magc2;
    8b60:	5056      	str	r6, [r2, r1]
	if 	((meas_inst->num_errors+1)<array_max){
    8b62:	2b07      	cmp	r3, #7
    8b64:	d800      	bhi.n	8b68 <error_check+0x2a8>
    8b66:	e20f      	b.n	8f88 <error_check+0x6c8>
	
	
	// Axis check, Accelerometer
	for (i=0;i<3;i++){
		//  Cycle through all 3 axis
		delta = fabs((meas_inst->a1xyz[i]/maga1) - (meas_inst->a2xyz[i]/maga2));
    8b68:	4643      	mov	r3, r8
    8b6a:	4c41      	ldr	r4, [pc, #260]	; (8c70 <error_check+0x3b0>)
    8b6c:	9905      	ldr	r1, [sp, #20]
    8b6e:	6a18      	ldr	r0, [r3, #32]
    8b70:	47a0      	blx	r4
    8b72:	4643      	mov	r3, r8
    8b74:	1c05      	adds	r5, r0, #0
    8b76:	9904      	ldr	r1, [sp, #16]
    8b78:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    8b7a:	47a0      	blx	r4
    8b7c:	1c01      	adds	r1, r0, #0
    8b7e:	1c28      	adds	r0, r5, #0
    8b80:	47d0      	blx	sl
		accel_err_limit = errlim_disp*cal_report_azm_inc.disp_stdev_acc[i];
		accel_err_limit = 0.5;
		if (delta>accel_err_limit){
    8b82:	21fc      	movs	r1, #252	; 0xfc
		delta = fabs((meas_inst->a1xyz[i]/maga1) - (meas_inst->a2xyz[i]/maga2));
    8b84:	0045      	lsls	r5, r0, #1
    8b86:	086d      	lsrs	r5, r5, #1
		if (delta>accel_err_limit){
    8b88:	0589      	lsls	r1, r1, #22
    8b8a:	1c28      	adds	r0, r5, #0
    8b8c:	47c8      	blx	r9
    8b8e:	2800      	cmp	r0, #0
    8b90:	d012      	beq.n	8bb8 <error_check+0x2f8>
			meas_inst->measurement_error[meas_inst->num_errors] = accel_disp_err;
    8b92:	4643      	mov	r3, r8
    8b94:	4642      	mov	r2, r8
    8b96:	2105      	movs	r1, #5
			meas_inst->measurement_error_data1[meas_inst->num_errors] = delta;
			meas_inst->measurement_error_data2[meas_inst->num_errors] = i+1;
    8b98:	20fe      	movs	r0, #254	; 0xfe
			meas_inst->measurement_error[meas_inst->num_errors] = accel_disp_err;
    8b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
			meas_inst->measurement_error_data2[meas_inst->num_errors] = i+1;
    8b9c:	0580      	lsls	r0, r0, #22
			meas_inst->measurement_error[meas_inst->num_errors] = accel_disp_err;
    8b9e:	18d2      	adds	r2, r2, r3
    8ba0:	3260      	adds	r2, #96	; 0x60
    8ba2:	7011      	strb	r1, [r2, #0]
    8ba4:	009a      	lsls	r2, r3, #2
    8ba6:	4442      	add	r2, r8
			meas_inst->measurement_error_data2[meas_inst->num_errors] = i+1;
    8ba8:	3183      	adds	r1, #131	; 0x83
	if 	((meas_inst->num_errors+1)<array_max){
    8baa:	3301      	adds	r3, #1
			meas_inst->measurement_error_data1[meas_inst->num_errors] = delta;
    8bac:	6695      	str	r5, [r2, #104]	; 0x68
			meas_inst->measurement_error_data2[meas_inst->num_errors] = i+1;
    8bae:	5050      	str	r0, [r2, r1]
	if 	((meas_inst->num_errors+1)<array_max){
    8bb0:	2b07      	cmp	r3, #7
    8bb2:	d801      	bhi.n	8bb8 <error_check+0x2f8>
		meas_inst->num_errors++;
    8bb4:	4642      	mov	r2, r8
    8bb6:	65d3      	str	r3, [r2, #92]	; 0x5c
		delta = fabs((meas_inst->a1xyz[i]/maga1) - (meas_inst->a2xyz[i]/maga2));
    8bb8:	4643      	mov	r3, r8
    8bba:	9905      	ldr	r1, [sp, #20]
    8bbc:	6a58      	ldr	r0, [r3, #36]	; 0x24
    8bbe:	47a0      	blx	r4
    8bc0:	4643      	mov	r3, r8
    8bc2:	1c05      	adds	r5, r0, #0
    8bc4:	9904      	ldr	r1, [sp, #16]
    8bc6:	6b18      	ldr	r0, [r3, #48]	; 0x30
    8bc8:	47a0      	blx	r4
    8bca:	1c01      	adds	r1, r0, #0
    8bcc:	1c28      	adds	r0, r5, #0
    8bce:	47d0      	blx	sl
		if (delta>accel_err_limit){
    8bd0:	21fc      	movs	r1, #252	; 0xfc
		delta = fabs((meas_inst->a1xyz[i]/maga1) - (meas_inst->a2xyz[i]/maga2));
    8bd2:	0045      	lsls	r5, r0, #1
    8bd4:	086d      	lsrs	r5, r5, #1
		if (delta>accel_err_limit){
    8bd6:	0589      	lsls	r1, r1, #22
    8bd8:	1c28      	adds	r0, r5, #0
    8bda:	47c8      	blx	r9
    8bdc:	2800      	cmp	r0, #0
    8bde:	d012      	beq.n	8c06 <error_check+0x346>
			meas_inst->measurement_error[meas_inst->num_errors] = accel_disp_err;
    8be0:	4643      	mov	r3, r8
    8be2:	4642      	mov	r2, r8
    8be4:	2105      	movs	r1, #5
			meas_inst->measurement_error_data2[meas_inst->num_errors] = i+1;
    8be6:	2080      	movs	r0, #128	; 0x80
			meas_inst->measurement_error[meas_inst->num_errors] = accel_disp_err;
    8be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
			meas_inst->measurement_error_data2[meas_inst->num_errors] = i+1;
    8bea:	05c0      	lsls	r0, r0, #23
			meas_inst->measurement_error[meas_inst->num_errors] = accel_disp_err;
    8bec:	18d2      	adds	r2, r2, r3
    8bee:	3260      	adds	r2, #96	; 0x60
    8bf0:	7011      	strb	r1, [r2, #0]
    8bf2:	009a      	lsls	r2, r3, #2
    8bf4:	4442      	add	r2, r8
			meas_inst->measurement_error_data2[meas_inst->num_errors] = i+1;
    8bf6:	3183      	adds	r1, #131	; 0x83
	if 	((meas_inst->num_errors+1)<array_max){
    8bf8:	3301      	adds	r3, #1
			meas_inst->measurement_error_data1[meas_inst->num_errors] = delta;
    8bfa:	6695      	str	r5, [r2, #104]	; 0x68
			meas_inst->measurement_error_data2[meas_inst->num_errors] = i+1;
    8bfc:	5050      	str	r0, [r2, r1]
	if 	((meas_inst->num_errors+1)<array_max){
    8bfe:	2b07      	cmp	r3, #7
    8c00:	d801      	bhi.n	8c06 <error_check+0x346>
		meas_inst->num_errors++;
    8c02:	4642      	mov	r2, r8
    8c04:	65d3      	str	r3, [r2, #92]	; 0x5c
		delta = fabs((meas_inst->a1xyz[i]/maga1) - (meas_inst->a2xyz[i]/maga2));
    8c06:	4643      	mov	r3, r8
    8c08:	9905      	ldr	r1, [sp, #20]
    8c0a:	6a98      	ldr	r0, [r3, #40]	; 0x28
    8c0c:	47a0      	blx	r4
    8c0e:	4643      	mov	r3, r8
    8c10:	1c05      	adds	r5, r0, #0
    8c12:	9904      	ldr	r1, [sp, #16]
    8c14:	6b58      	ldr	r0, [r3, #52]	; 0x34
    8c16:	47a0      	blx	r4
    8c18:	1c01      	adds	r1, r0, #0
    8c1a:	1c28      	adds	r0, r5, #0
    8c1c:	47d0      	blx	sl
		if (delta>accel_err_limit){
    8c1e:	21fc      	movs	r1, #252	; 0xfc
		delta = fabs((meas_inst->a1xyz[i]/maga1) - (meas_inst->a2xyz[i]/maga2));
    8c20:	0045      	lsls	r5, r0, #1
    8c22:	086d      	lsrs	r5, r5, #1
		if (delta>accel_err_limit){
    8c24:	0589      	lsls	r1, r1, #22
    8c26:	1c28      	adds	r0, r5, #0
    8c28:	47c8      	blx	r9
    8c2a:	2800      	cmp	r0, #0
    8c2c:	d024      	beq.n	8c78 <error_check+0x3b8>
			meas_inst->measurement_error[meas_inst->num_errors] = accel_disp_err;
    8c2e:	4643      	mov	r3, r8
    8c30:	4642      	mov	r2, r8
    8c32:	2105      	movs	r1, #5
    8c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
			meas_inst->measurement_error_data2[meas_inst->num_errors] = i+1;
    8c36:	480f      	ldr	r0, [pc, #60]	; (8c74 <error_check+0x3b4>)
			meas_inst->measurement_error[meas_inst->num_errors] = accel_disp_err;
    8c38:	18d2      	adds	r2, r2, r3
    8c3a:	3260      	adds	r2, #96	; 0x60
    8c3c:	7011      	strb	r1, [r2, #0]
    8c3e:	009a      	lsls	r2, r3, #2
    8c40:	4442      	add	r2, r8
			meas_inst->measurement_error_data2[meas_inst->num_errors] = i+1;
    8c42:	3183      	adds	r1, #131	; 0x83
	if 	((meas_inst->num_errors+1)<array_max){
    8c44:	3301      	adds	r3, #1
			meas_inst->measurement_error_data1[meas_inst->num_errors] = delta;
    8c46:	6695      	str	r5, [r2, #104]	; 0x68
			meas_inst->measurement_error_data2[meas_inst->num_errors] = i+1;
    8c48:	5050      	str	r0, [r2, r1]
	if 	((meas_inst->num_errors+1)<array_max){
    8c4a:	2b07      	cmp	r3, #7
    8c4c:	d814      	bhi.n	8c78 <error_check+0x3b8>
		meas_inst->num_errors++;
    8c4e:	4642      	mov	r2, r8
    8c50:	65d3      	str	r3, [r2, #92]	; 0x5c
    8c52:	e011      	b.n	8c78 <error_check+0x3b8>
    8c54:	0001eddd 	.word	0x0001eddd
    8c58:	0001e115 	.word	0x0001e115
    8c5c:	0001d28d 	.word	0x0001d28d
    8c60:	000199b5 	.word	0x000199b5
    8c64:	0001ee81 	.word	0x0001ee81
    8c68:	0001cde9 	.word	0x0001cde9
    8c6c:	0001c341 	.word	0x0001c341
    8c70:	0001c7c9 	.word	0x0001c7c9
    8c74:	40400000 	.word	0x40400000
		
	}
	
	// Axis check, Accelerometer
	for (i=0;i<3;i++){
		delta = fabs((meas_inst->c1xyz[i]/magc1) - (meas_inst->c2xyz[i]/magc2));
    8c78:	4643      	mov	r3, r8
    8c7a:	9902      	ldr	r1, [sp, #8]
    8c7c:	6b98      	ldr	r0, [r3, #56]	; 0x38
    8c7e:	47a0      	blx	r4
    8c80:	4643      	mov	r3, r8
    8c82:	1c05      	adds	r5, r0, #0
    8c84:	1c31      	adds	r1, r6, #0
    8c86:	6c58      	ldr	r0, [r3, #68]	; 0x44
    8c88:	47a0      	blx	r4
    8c8a:	1c01      	adds	r1, r0, #0
    8c8c:	1c28      	adds	r0, r5, #0
    8c8e:	47d0      	blx	sl
		comp_err_limit = errlim_mag*cal_report_azm_inc.disp_stdev_comp[i];
		comp_err_limit  = 0.5;
		if (delta>comp_err_limit){
    8c90:	21fc      	movs	r1, #252	; 0xfc
		delta = fabs((meas_inst->c1xyz[i]/magc1) - (meas_inst->c2xyz[i]/magc2));
    8c92:	0045      	lsls	r5, r0, #1
    8c94:	086d      	lsrs	r5, r5, #1
		if (delta>comp_err_limit){
    8c96:	0589      	lsls	r1, r1, #22
    8c98:	1c28      	adds	r0, r5, #0
    8c9a:	47c8      	blx	r9
    8c9c:	2800      	cmp	r0, #0
    8c9e:	d012      	beq.n	8cc6 <error_check+0x406>
			meas_inst->measurement_error[meas_inst->num_errors] = comp_disp_err;
    8ca0:	4643      	mov	r3, r8
    8ca2:	4642      	mov	r2, r8
    8ca4:	2106      	movs	r1, #6
			meas_inst->measurement_error_data1[meas_inst->num_errors] = delta;
			meas_inst->measurement_error_data2[meas_inst->num_errors] = i+1;
    8ca6:	20fe      	movs	r0, #254	; 0xfe
			meas_inst->measurement_error[meas_inst->num_errors] = comp_disp_err;
    8ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
			meas_inst->measurement_error_data2[meas_inst->num_errors] = i+1;
    8caa:	0580      	lsls	r0, r0, #22
			meas_inst->measurement_error[meas_inst->num_errors] = comp_disp_err;
    8cac:	18d2      	adds	r2, r2, r3
    8cae:	3260      	adds	r2, #96	; 0x60
    8cb0:	7011      	strb	r1, [r2, #0]
    8cb2:	009a      	lsls	r2, r3, #2
    8cb4:	4442      	add	r2, r8
			meas_inst->measurement_error_data2[meas_inst->num_errors] = i+1;
    8cb6:	3182      	adds	r1, #130	; 0x82
	if 	((meas_inst->num_errors+1)<array_max){
    8cb8:	3301      	adds	r3, #1
			meas_inst->measurement_error_data1[meas_inst->num_errors] = delta;
    8cba:	6695      	str	r5, [r2, #104]	; 0x68
			meas_inst->measurement_error_data2[meas_inst->num_errors] = i+1;
    8cbc:	5050      	str	r0, [r2, r1]
	if 	((meas_inst->num_errors+1)<array_max){
    8cbe:	2b07      	cmp	r3, #7
    8cc0:	d801      	bhi.n	8cc6 <error_check+0x406>
		meas_inst->num_errors++;
    8cc2:	4642      	mov	r2, r8
    8cc4:	65d3      	str	r3, [r2, #92]	; 0x5c
		delta = fabs((meas_inst->c1xyz[i]/magc1) - (meas_inst->c2xyz[i]/magc2));
    8cc6:	4643      	mov	r3, r8
    8cc8:	9902      	ldr	r1, [sp, #8]
    8cca:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    8ccc:	47a0      	blx	r4
    8cce:	4643      	mov	r3, r8
    8cd0:	1c05      	adds	r5, r0, #0
    8cd2:	1c31      	adds	r1, r6, #0
    8cd4:	6c98      	ldr	r0, [r3, #72]	; 0x48
    8cd6:	47a0      	blx	r4
    8cd8:	1c01      	adds	r1, r0, #0
    8cda:	1c28      	adds	r0, r5, #0
    8cdc:	47d0      	blx	sl
		if (delta>comp_err_limit){
    8cde:	21fc      	movs	r1, #252	; 0xfc
		delta = fabs((meas_inst->c1xyz[i]/magc1) - (meas_inst->c2xyz[i]/magc2));
    8ce0:	0045      	lsls	r5, r0, #1
    8ce2:	086d      	lsrs	r5, r5, #1
		if (delta>comp_err_limit){
    8ce4:	0589      	lsls	r1, r1, #22
    8ce6:	1c28      	adds	r0, r5, #0
    8ce8:	47c8      	blx	r9
    8cea:	2800      	cmp	r0, #0
    8cec:	d012      	beq.n	8d14 <error_check+0x454>
			meas_inst->measurement_error[meas_inst->num_errors] = comp_disp_err;
    8cee:	4643      	mov	r3, r8
    8cf0:	4642      	mov	r2, r8
    8cf2:	2106      	movs	r1, #6
			meas_inst->measurement_error_data2[meas_inst->num_errors] = i+1;
    8cf4:	2080      	movs	r0, #128	; 0x80
			meas_inst->measurement_error[meas_inst->num_errors] = comp_disp_err;
    8cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
			meas_inst->measurement_error_data2[meas_inst->num_errors] = i+1;
    8cf8:	05c0      	lsls	r0, r0, #23
			meas_inst->measurement_error[meas_inst->num_errors] = comp_disp_err;
    8cfa:	18d2      	adds	r2, r2, r3
    8cfc:	3260      	adds	r2, #96	; 0x60
    8cfe:	7011      	strb	r1, [r2, #0]
    8d00:	009a      	lsls	r2, r3, #2
    8d02:	4442      	add	r2, r8
			meas_inst->measurement_error_data2[meas_inst->num_errors] = i+1;
    8d04:	3182      	adds	r1, #130	; 0x82
	if 	((meas_inst->num_errors+1)<array_max){
    8d06:	3301      	adds	r3, #1
			meas_inst->measurement_error_data1[meas_inst->num_errors] = delta;
    8d08:	6695      	str	r5, [r2, #104]	; 0x68
			meas_inst->measurement_error_data2[meas_inst->num_errors] = i+1;
    8d0a:	5050      	str	r0, [r2, r1]
	if 	((meas_inst->num_errors+1)<array_max){
    8d0c:	2b07      	cmp	r3, #7
    8d0e:	d801      	bhi.n	8d14 <error_check+0x454>
		meas_inst->num_errors++;
    8d10:	4642      	mov	r2, r8
    8d12:	65d3      	str	r3, [r2, #92]	; 0x5c
		delta = fabs((meas_inst->c1xyz[i]/magc1) - (meas_inst->c2xyz[i]/magc2));
    8d14:	4643      	mov	r3, r8
    8d16:	9902      	ldr	r1, [sp, #8]
    8d18:	6c18      	ldr	r0, [r3, #64]	; 0x40
    8d1a:	47a0      	blx	r4
    8d1c:	4643      	mov	r3, r8
    8d1e:	1c05      	adds	r5, r0, #0
    8d20:	1c31      	adds	r1, r6, #0
    8d22:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    8d24:	47a0      	blx	r4
    8d26:	1c01      	adds	r1, r0, #0
    8d28:	1c28      	adds	r0, r5, #0
    8d2a:	47d0      	blx	sl
		if (delta>comp_err_limit){
    8d2c:	21fc      	movs	r1, #252	; 0xfc
		delta = fabs((meas_inst->c1xyz[i]/magc1) - (meas_inst->c2xyz[i]/magc2));
    8d2e:	0044      	lsls	r4, r0, #1
    8d30:	0864      	lsrs	r4, r4, #1
		if (delta>comp_err_limit){
    8d32:	0589      	lsls	r1, r1, #22
    8d34:	1c20      	adds	r0, r4, #0
    8d36:	47c8      	blx	r9
    8d38:	2800      	cmp	r0, #0
    8d3a:	d000      	beq.n	8d3e <error_check+0x47e>
    8d3c:	e10e      	b.n	8f5c <error_check+0x69c>
	}
	
	
	
	//  Check Angle Disparity
	calc_azm_inc_roll_dec(meas_inst->a1xyz, meas_inst->c1xyz, &azm_arr[0], &inc_arr[0], &foo1, &foo2);
    8d3e:	9f08      	ldr	r7, [sp, #32]
    8d40:	ad0d      	add	r5, sp, #52	; 0x34
    8d42:	ac0c      	add	r4, sp, #48	; 0x30
    8d44:	4e94      	ldr	r6, [pc, #592]	; (8f98 <error_check+0x6d8>)
    8d46:	0039      	movs	r1, r7
    8d48:	9501      	str	r5, [sp, #4]
    8d4a:	9400      	str	r4, [sp, #0]
    8d4c:	ab12      	add	r3, sp, #72	; 0x48
    8d4e:	aa0e      	add	r2, sp, #56	; 0x38
    8d50:	9806      	ldr	r0, [sp, #24]
    8d52:	47b0      	blx	r6
	calc_azm_inc_roll_dec(meas_inst->a2xyz, meas_inst->c1xyz, &azm_arr[1], &inc_arr[1], &foo1, &foo2);
    8d54:	0039      	movs	r1, r7
    8d56:	9501      	str	r5, [sp, #4]
    8d58:	9400      	str	r4, [sp, #0]
    8d5a:	ab13      	add	r3, sp, #76	; 0x4c
    8d5c:	aa0f      	add	r2, sp, #60	; 0x3c
    8d5e:	9807      	ldr	r0, [sp, #28]
    8d60:	47b0      	blx	r6
	calc_azm_inc_roll_dec(meas_inst->a1xyz, meas_inst->c2xyz, &azm_arr[2], &inc_arr[2], &foo1, &foo2);
    8d62:	9f09      	ldr	r7, [sp, #36]	; 0x24
    8d64:	9501      	str	r5, [sp, #4]
    8d66:	0039      	movs	r1, r7
    8d68:	9400      	str	r4, [sp, #0]
    8d6a:	ab14      	add	r3, sp, #80	; 0x50
    8d6c:	aa10      	add	r2, sp, #64	; 0x40
    8d6e:	9806      	ldr	r0, [sp, #24]
    8d70:	47b0      	blx	r6
	calc_azm_inc_roll_dec(meas_inst->a2xyz, meas_inst->c2xyz, &azm_arr[3], &inc_arr[3], &foo1, &foo2);
    8d72:	0039      	movs	r1, r7
    8d74:	9501      	str	r5, [sp, #4]
    8d76:	9400      	str	r4, [sp, #0]
    8d78:	ab15      	add	r3, sp, #84	; 0x54
    8d7a:	aa11      	add	r2, sp, #68	; 0x44
    8d7c:	9807      	ldr	r0, [sp, #28]
    8d7e:	47b0      	blx	r6
	//  Check Inclinometer
	angMin = inc_arr[0]; angMax = inc_arr[0];
    8d80:	9c12      	ldr	r4, [sp, #72]	; 0x48
	for (i=1;i<4;i++){
		angMin = min(angMin, inc_arr[i]);
    8d82:	9f13      	ldr	r7, [sp, #76]	; 0x4c
    8d84:	4d85      	ldr	r5, [pc, #532]	; (8f9c <error_check+0x6dc>)
    8d86:	1c39      	adds	r1, r7, #0
    8d88:	1c20      	adds	r0, r4, #0
    8d8a:	47a8      	blx	r5
    8d8c:	1c26      	adds	r6, r4, #0
    8d8e:	2800      	cmp	r0, #0
    8d90:	d100      	bne.n	8d94 <error_check+0x4d4>
    8d92:	1c3e      	adds	r6, r7, #0
    8d94:	1c39      	adds	r1, r7, #0
    8d96:	1c20      	adds	r0, r4, #0
    8d98:	47c8      	blx	r9
    8d9a:	2800      	cmp	r0, #0
    8d9c:	d100      	bne.n	8da0 <error_check+0x4e0>
    8d9e:	1c3c      	adds	r4, r7, #0
    8da0:	9f14      	ldr	r7, [sp, #80]	; 0x50
    8da2:	1c30      	adds	r0, r6, #0
    8da4:	1c39      	adds	r1, r7, #0
    8da6:	47a8      	blx	r5
    8da8:	2800      	cmp	r0, #0
    8daa:	d100      	bne.n	8dae <error_check+0x4ee>
    8dac:	1c3e      	adds	r6, r7, #0
    8dae:	1c39      	adds	r1, r7, #0
    8db0:	1c20      	adds	r0, r4, #0
    8db2:	47c8      	blx	r9
    8db4:	2800      	cmp	r0, #0
    8db6:	d100      	bne.n	8dba <error_check+0x4fa>
    8db8:	1c3c      	adds	r4, r7, #0
    8dba:	9f15      	ldr	r7, [sp, #84]	; 0x54
		angMax = max(angMax, inc_arr[i]);
	}	
	delta = angMax-angMin;
    8dbc:	1c21      	adds	r1, r4, #0
    8dbe:	1c38      	adds	r0, r7, #0
    8dc0:	47a8      	blx	r5
    8dc2:	2800      	cmp	r0, #0
    8dc4:	d100      	bne.n	8dc8 <error_check+0x508>
    8dc6:	1c3c      	adds	r4, r7, #0
    8dc8:	1c31      	adds	r1, r6, #0
    8dca:	1c38      	adds	r0, r7, #0
    8dcc:	47c8      	blx	r9
    8dce:	1c31      	adds	r1, r6, #0
    8dd0:	2800      	cmp	r0, #0
    8dd2:	d100      	bne.n	8dd6 <error_check+0x516>
    8dd4:	1c39      	adds	r1, r7, #0
    8dd6:	1c20      	adds	r0, r4, #0
    8dd8:	47d0      	blx	sl
	if (delta>options.errorSensitivity){
    8dda:	4b71      	ldr	r3, [pc, #452]	; (8fa0 <error_check+0x6e0>)
	delta = angMax-angMin;
    8ddc:	1c04      	adds	r4, r0, #0
	if (delta>options.errorSensitivity){
    8dde:	689b      	ldr	r3, [r3, #8]
    8de0:	9305      	str	r3, [sp, #20]
    8de2:	1c19      	adds	r1, r3, #0
    8de4:	47c8      	blx	r9
    8de6:	2800      	cmp	r0, #0
    8de8:	d00f      	beq.n	8e0a <error_check+0x54a>
		meas_inst->measurement_error[meas_inst->num_errors] = inc_ang_err;
    8dea:	4643      	mov	r3, r8
    8dec:	4642      	mov	r2, r8
    8dee:	210e      	movs	r1, #14
    8df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    8df2:	18d2      	adds	r2, r2, r3
    8df4:	3260      	adds	r2, #96	; 0x60
    8df6:	7011      	strb	r1, [r2, #0]
		meas_inst->measurement_error_data1[meas_inst->num_errors] = delta;
    8df8:	001a      	movs	r2, r3
    8dfa:	4641      	mov	r1, r8
    8dfc:	321a      	adds	r2, #26
    8dfe:	0092      	lsls	r2, r2, #2
	if 	((meas_inst->num_errors+1)<array_max){
    8e00:	3301      	adds	r3, #1
		meas_inst->measurement_error_data1[meas_inst->num_errors] = delta;
    8e02:	5054      	str	r4, [r2, r1]
	if 	((meas_inst->num_errors+1)<array_max){
    8e04:	2b07      	cmp	r3, #7
    8e06:	d800      	bhi.n	8e0a <error_check+0x54a>
    8e08:	e0bc      	b.n	8f84 <error_check+0x6c4>
	}
	// Check Compass
	//  Check for possible angle wrap-around
	bool wrapFlag = false;
	for (i=0;i<4;i++){
		if (azm_arr[i]<90){ wrapFlag = true;}
    8e0a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    8e0c:	4965      	ldr	r1, [pc, #404]	; (8fa4 <error_check+0x6e4>)
    8e0e:	1c20      	adds	r0, r4, #0
    8e10:	2601      	movs	r6, #1
    8e12:	47a8      	blx	r5
    8e14:	2800      	cmp	r0, #0
    8e16:	d100      	bne.n	8e1a <error_check+0x55a>
    8e18:	2600      	movs	r6, #0
    8e1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8e1c:	4961      	ldr	r1, [pc, #388]	; (8fa4 <error_check+0x6e4>)
    8e1e:	9302      	str	r3, [sp, #8]
    8e20:	1c18      	adds	r0, r3, #0
    8e22:	47a8      	blx	r5
    8e24:	2701      	movs	r7, #1
    8e26:	2800      	cmp	r0, #0
    8e28:	d100      	bne.n	8e2c <error_check+0x56c>
    8e2a:	1c37      	adds	r7, r6, #0
    8e2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8e2e:	495d      	ldr	r1, [pc, #372]	; (8fa4 <error_check+0x6e4>)
    8e30:	9304      	str	r3, [sp, #16]
    8e32:	1c18      	adds	r0, r3, #0
    8e34:	47a8      	blx	r5
    8e36:	2601      	movs	r6, #1
    8e38:	2800      	cmp	r0, #0
    8e3a:	d100      	bne.n	8e3e <error_check+0x57e>
    8e3c:	1c3e      	adds	r6, r7, #0
    8e3e:	9f11      	ldr	r7, [sp, #68]	; 0x44
	}
	if (wrapFlag){
    8e40:	4958      	ldr	r1, [pc, #352]	; (8fa4 <error_check+0x6e4>)
    8e42:	1c38      	adds	r0, r7, #0
    8e44:	47a8      	blx	r5
    8e46:	2800      	cmp	r0, #0
    8e48:	d160      	bne.n	8f0c <error_check+0x64c>
    8e4a:	b2f6      	uxtb	r6, r6
    8e4c:	2e00      	cmp	r6, #0
    8e4e:	d15d      	bne.n	8f0c <error_check+0x64c>
			if (azm_arr[i]>270){ azm_arr[i]= azm_arr[i]-360;}
		}
	}	
	angMin = azm_arr[0]; angMax = azm_arr[0]; 
	for (i=1;i<4;i++){
		angMin = min(angMin, azm_arr[i]);
    8e50:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    8e52:	1c20      	adds	r0, r4, #0
    8e54:	1c31      	adds	r1, r6, #0
    8e56:	47a8      	blx	r5
    8e58:	1c27      	adds	r7, r4, #0
    8e5a:	2800      	cmp	r0, #0
    8e5c:	d100      	bne.n	8e60 <error_check+0x5a0>
    8e5e:	1c37      	adds	r7, r6, #0
    8e60:	1c31      	adds	r1, r6, #0
    8e62:	1c20      	adds	r0, r4, #0
    8e64:	47c8      	blx	r9
    8e66:	2800      	cmp	r0, #0
    8e68:	d100      	bne.n	8e6c <error_check+0x5ac>
    8e6a:	1c34      	adds	r4, r6, #0
    8e6c:	9e10      	ldr	r6, [sp, #64]	; 0x40
    8e6e:	1c39      	adds	r1, r7, #0
    8e70:	1c30      	adds	r0, r6, #0
    8e72:	47c8      	blx	r9
    8e74:	9704      	str	r7, [sp, #16]
    8e76:	2800      	cmp	r0, #0
    8e78:	d100      	bne.n	8e7c <error_check+0x5bc>
    8e7a:	9604      	str	r6, [sp, #16]
    8e7c:	1c21      	adds	r1, r4, #0
    8e7e:	1c30      	adds	r0, r6, #0
    8e80:	47a8      	blx	r5
    8e82:	2800      	cmp	r0, #0
    8e84:	d100      	bne.n	8e88 <error_check+0x5c8>
    8e86:	1c34      	adds	r4, r6, #0
		angMax = max(angMax, azm_arr[i]);
	}
	delta = (angMax-angMin)*cos(meas_inst->inclination*deg2rad); //  Adjust for high angle shots
    8e88:	4642      	mov	r2, r8
		angMin = min(angMin, azm_arr[i]);
    8e8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
	delta = (angMax-angMin)*cos(meas_inst->inclination*deg2rad); //  Adjust for high angle shots
    8e8c:	6910      	ldr	r0, [r2, #16]
		angMin = min(angMin, azm_arr[i]);
    8e8e:	9302      	str	r3, [sp, #8]
	delta = (angMax-angMin)*cos(meas_inst->inclination*deg2rad); //  Adjust for high angle shots
    8e90:	4b45      	ldr	r3, [pc, #276]	; (8fa8 <error_check+0x6e8>)
    8e92:	6819      	ldr	r1, [r3, #0]
    8e94:	4b45      	ldr	r3, [pc, #276]	; (8fac <error_check+0x6ec>)
    8e96:	4798      	blx	r3
    8e98:	47d8      	blx	fp
    8e9a:	4b45      	ldr	r3, [pc, #276]	; (8fb0 <error_check+0x6f0>)
    8e9c:	4798      	blx	r3
    8e9e:	0006      	movs	r6, r0
    8ea0:	000f      	movs	r7, r1
    8ea2:	1c20      	adds	r0, r4, #0
    8ea4:	9902      	ldr	r1, [sp, #8]
    8ea6:	47c8      	blx	r9
    8ea8:	2800      	cmp	r0, #0
    8eaa:	d100      	bne.n	8eae <error_check+0x5ee>
    8eac:	9c02      	ldr	r4, [sp, #8]
    8eae:	9b04      	ldr	r3, [sp, #16]
    8eb0:	9902      	ldr	r1, [sp, #8]
    8eb2:	1c18      	adds	r0, r3, #0
    8eb4:	4699      	mov	r9, r3
    8eb6:	47a8      	blx	r5
    8eb8:	4649      	mov	r1, r9
    8eba:	2800      	cmp	r0, #0
    8ebc:	d100      	bne.n	8ec0 <error_check+0x600>
    8ebe:	9902      	ldr	r1, [sp, #8]
    8ec0:	1c20      	adds	r0, r4, #0
    8ec2:	47d0      	blx	sl
    8ec4:	47d8      	blx	fp
    8ec6:	0032      	movs	r2, r6
    8ec8:	003b      	movs	r3, r7
    8eca:	4c3a      	ldr	r4, [pc, #232]	; (8fb4 <error_check+0x6f4>)
    8ecc:	47a0      	blx	r4
    8ece:	4b3a      	ldr	r3, [pc, #232]	; (8fb8 <error_check+0x6f8>)
    8ed0:	4798      	blx	r3
    8ed2:	1c04      	adds	r4, r0, #0
	if (delta>options.errorSensitivity){
    8ed4:	1c01      	adds	r1, r0, #0
    8ed6:	9805      	ldr	r0, [sp, #20]
    8ed8:	47a8      	blx	r5
    8eda:	2800      	cmp	r0, #0
    8edc:	d00f      	beq.n	8efe <error_check+0x63e>
		meas_inst->measurement_error[meas_inst->num_errors] = azm_ang_err;
    8ede:	4643      	mov	r3, r8
    8ee0:	4642      	mov	r2, r8
    8ee2:	210f      	movs	r1, #15
    8ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    8ee6:	18d2      	adds	r2, r2, r3
    8ee8:	3260      	adds	r2, #96	; 0x60
    8eea:	7011      	strb	r1, [r2, #0]
		meas_inst->measurement_error_data1[meas_inst->num_errors] = delta;
    8eec:	001a      	movs	r2, r3
    8eee:	4641      	mov	r1, r8
    8ef0:	321a      	adds	r2, #26
    8ef2:	0092      	lsls	r2, r2, #2
	if 	((meas_inst->num_errors+1)<array_max){
    8ef4:	3301      	adds	r3, #1
		meas_inst->measurement_error_data1[meas_inst->num_errors] = delta;
    8ef6:	5054      	str	r4, [r2, r1]
	if 	((meas_inst->num_errors+1)<array_max){
    8ef8:	2b07      	cmp	r3, #7
    8efa:	d800      	bhi.n	8efe <error_check+0x63e>
		meas_inst->num_errors++;
    8efc:	65cb      	str	r3, [r1, #92]	; 0x5c
	}
	
	
	
	
}
    8efe:	b017      	add	sp, #92	; 0x5c
    8f00:	bc3c      	pop	{r2, r3, r4, r5}
    8f02:	4690      	mov	r8, r2
    8f04:	4699      	mov	r9, r3
    8f06:	46a2      	mov	sl, r4
    8f08:	46ab      	mov	fp, r5
    8f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (azm_arr[i]>270){ azm_arr[i]= azm_arr[i]-360;}
    8f0c:	492b      	ldr	r1, [pc, #172]	; (8fbc <error_check+0x6fc>)
    8f0e:	1c20      	adds	r0, r4, #0
    8f10:	47c8      	blx	r9
    8f12:	2800      	cmp	r0, #0
    8f14:	d003      	beq.n	8f1e <error_check+0x65e>
    8f16:	1c20      	adds	r0, r4, #0
    8f18:	4929      	ldr	r1, [pc, #164]	; (8fc0 <error_check+0x700>)
    8f1a:	47d0      	blx	sl
    8f1c:	1c04      	adds	r4, r0, #0
    8f1e:	9e02      	ldr	r6, [sp, #8]
    8f20:	4926      	ldr	r1, [pc, #152]	; (8fbc <error_check+0x6fc>)
    8f22:	1c30      	adds	r0, r6, #0
    8f24:	47c8      	blx	r9
    8f26:	2800      	cmp	r0, #0
    8f28:	d003      	beq.n	8f32 <error_check+0x672>
    8f2a:	4925      	ldr	r1, [pc, #148]	; (8fc0 <error_check+0x700>)
    8f2c:	1c30      	adds	r0, r6, #0
    8f2e:	47d0      	blx	sl
    8f30:	900f      	str	r0, [sp, #60]	; 0x3c
    8f32:	9e04      	ldr	r6, [sp, #16]
    8f34:	4921      	ldr	r1, [pc, #132]	; (8fbc <error_check+0x6fc>)
    8f36:	1c30      	adds	r0, r6, #0
    8f38:	47c8      	blx	r9
    8f3a:	2800      	cmp	r0, #0
    8f3c:	d003      	beq.n	8f46 <error_check+0x686>
    8f3e:	4920      	ldr	r1, [pc, #128]	; (8fc0 <error_check+0x700>)
    8f40:	1c30      	adds	r0, r6, #0
    8f42:	47d0      	blx	sl
    8f44:	9010      	str	r0, [sp, #64]	; 0x40
    8f46:	491d      	ldr	r1, [pc, #116]	; (8fbc <error_check+0x6fc>)
    8f48:	1c38      	adds	r0, r7, #0
    8f4a:	47c8      	blx	r9
    8f4c:	2800      	cmp	r0, #0
    8f4e:	d100      	bne.n	8f52 <error_check+0x692>
    8f50:	e77e      	b.n	8e50 <error_check+0x590>
    8f52:	491b      	ldr	r1, [pc, #108]	; (8fc0 <error_check+0x700>)
    8f54:	1c38      	adds	r0, r7, #0
    8f56:	47d0      	blx	sl
    8f58:	9011      	str	r0, [sp, #68]	; 0x44
    8f5a:	e779      	b.n	8e50 <error_check+0x590>
			meas_inst->measurement_error[meas_inst->num_errors] = comp_disp_err;
    8f5c:	4643      	mov	r3, r8
    8f5e:	4642      	mov	r2, r8
    8f60:	2106      	movs	r1, #6
    8f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
			meas_inst->measurement_error_data2[meas_inst->num_errors] = i+1;
    8f64:	4817      	ldr	r0, [pc, #92]	; (8fc4 <error_check+0x704>)
			meas_inst->measurement_error[meas_inst->num_errors] = comp_disp_err;
    8f66:	18d2      	adds	r2, r2, r3
    8f68:	3260      	adds	r2, #96	; 0x60
    8f6a:	7011      	strb	r1, [r2, #0]
    8f6c:	009a      	lsls	r2, r3, #2
    8f6e:	4442      	add	r2, r8
			meas_inst->measurement_error_data2[meas_inst->num_errors] = i+1;
    8f70:	3182      	adds	r1, #130	; 0x82
	if 	((meas_inst->num_errors+1)<array_max){
    8f72:	3301      	adds	r3, #1
			meas_inst->measurement_error_data1[meas_inst->num_errors] = delta;
    8f74:	6694      	str	r4, [r2, #104]	; 0x68
			meas_inst->measurement_error_data2[meas_inst->num_errors] = i+1;
    8f76:	5050      	str	r0, [r2, r1]
	if 	((meas_inst->num_errors+1)<array_max){
    8f78:	2b07      	cmp	r3, #7
    8f7a:	d900      	bls.n	8f7e <error_check+0x6be>
    8f7c:	e6df      	b.n	8d3e <error_check+0x47e>
		meas_inst->num_errors++;
    8f7e:	4642      	mov	r2, r8
    8f80:	65d3      	str	r3, [r2, #92]	; 0x5c
    8f82:	e6dc      	b.n	8d3e <error_check+0x47e>
    8f84:	65cb      	str	r3, [r1, #92]	; 0x5c
    8f86:	e740      	b.n	8e0a <error_check+0x54a>
    8f88:	65cb      	str	r3, [r1, #92]	; 0x5c
    8f8a:	e5ed      	b.n	8b68 <error_check+0x2a8>
    8f8c:	65cb      	str	r3, [r1, #92]	; 0x5c
    8f8e:	e5d0      	b.n	8b32 <error_check+0x272>
    8f90:	65cb      	str	r3, [r1, #92]	; 0x5c
    8f92:	e5b2      	b.n	8afa <error_check+0x23a>
    8f94:	65cb      	str	r3, [r1, #92]	; 0x5c
    8f96:	e594      	b.n	8ac2 <error_check+0x202>
    8f98:	0000d845 	.word	0x0000d845
    8f9c:	0001c319 	.word	0x0001c319
    8fa0:	20003770 	.word	0x20003770
    8fa4:	42b40000 	.word	0x42b40000
    8fa8:	00024504 	.word	0x00024504
    8fac:	0001cba9 	.word	0x0001cba9
    8fb0:	00019539 	.word	0x00019539
    8fb4:	0001e115 	.word	0x0001e115
    8fb8:	0001ee81 	.word	0x0001ee81
    8fbc:	43870000 	.word	0x43870000
    8fc0:	43b40000 	.word	0x43b40000
    8fc4:	40400000 	.word	0x40400000

00008fc8 <full_measurement>:
void full_measurement(struct MEASUREMENT *meas_inst, bool calibrate_data){
    8fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    8fca:	46de      	mov	lr, fp
    8fcc:	4657      	mov	r7, sl
    8fce:	464e      	mov	r6, r9
    8fd0:	4645      	mov	r5, r8
    8fd2:	b5e0      	push	{r5, r6, r7, lr}
	laser_delay(options.shot_delay);//  Beep then delay for 1 second
    8fd4:	4ba6      	ldr	r3, [pc, #664]	; (9270 <full_measurement+0x2a8>)
void full_measurement(struct MEASUREMENT *meas_inst, bool calibrate_data){
    8fd6:	b093      	sub	sp, #76	; 0x4c
    8fd8:	9101      	str	r1, [sp, #4]
	laser_delay(options.shot_delay);//  Beep then delay for 1 second
    8fda:	789b      	ldrb	r3, [r3, #2]
void full_measurement(struct MEASUREMENT *meas_inst, bool calibrate_data){
    8fdc:	0004      	movs	r4, r0
	laser_delay(options.shot_delay);//  Beep then delay for 1 second
    8fde:	469b      	mov	fp, r3
	for (delay_count=0;delay_count<shot_delay;delay_count ++){
    8fe0:	2b00      	cmp	r3, #0
    8fe2:	d100      	bne.n	8fe6 <full_measurement+0x1e>
    8fe4:	e13a      	b.n	925c <full_measurement+0x294>
    8fe6:	4ba3      	ldr	r3, [pc, #652]	; (9274 <full_measurement+0x2ac>)
    8fe8:	4fa3      	ldr	r7, [pc, #652]	; (9278 <full_measurement+0x2b0>)
    8fea:	4698      	mov	r8, r3
    8fec:	4ba3      	ldr	r3, [pc, #652]	; (927c <full_measurement+0x2b4>)
    8fee:	465c      	mov	r4, fp
    8ff0:	469a      	mov	sl, r3
    8ff2:	4ba3      	ldr	r3, [pc, #652]	; (9280 <full_measurement+0x2b8>)
    8ff4:	2500      	movs	r5, #0
    8ff6:	4699      	mov	r9, r3
    8ff8:	003b      	movs	r3, r7
    8ffa:	4683      	mov	fp, r0
    8ffc:	4647      	mov	r7, r8
    8ffe:	4698      	mov	r8, r3
    9000:	4ea0      	ldr	r6, [pc, #640]	; (9284 <full_measurement+0x2bc>)
	rxBufferLaserClear();
    9002:	47b8      	blx	r7
	writeLaser(cmd_beep_on, sizeof(cmd_beep_on));
    9004:	2106      	movs	r1, #6
    9006:	4650      	mov	r0, sl
    9008:	47c0      	blx	r8
	while(!isLaserReceiveComplete());
    900a:	47b0      	blx	r6
    900c:	2800      	cmp	r0, #0
    900e:	d0fc      	beq.n	900a <full_measurement+0x42>
		delay_ms(900);
    9010:	20e1      	movs	r0, #225	; 0xe1
	for (delay_count=0;delay_count<shot_delay;delay_count ++){
    9012:	3501      	adds	r5, #1
		delay_ms(900);
    9014:	0080      	lsls	r0, r0, #2
	for (delay_count=0;delay_count<shot_delay;delay_count ++){
    9016:	b2ed      	uxtb	r5, r5
		delay_ms(900);
    9018:	47c8      	blx	r9
	for (delay_count=0;delay_count<shot_delay;delay_count ++){
    901a:	42ac      	cmp	r4, r5
    901c:	d1f1      	bne.n	9002 <full_measurement+0x3a>
    901e:	4643      	mov	r3, r8
    9020:	465c      	mov	r4, fp
    9022:	46b8      	mov	r8, r7
    9024:	001f      	movs	r7, r3
	rxBufferLaserClear();
    9026:	47c0      	blx	r8
	writeLaser(cmd_beep_on, sizeof(cmd_beep_on));
    9028:	2106      	movs	r1, #6
    902a:	4650      	mov	r0, sl
    902c:	47b8      	blx	r7
	while(!isLaserReceiveComplete());
    902e:	47b0      	blx	r6
    9030:	2800      	cmp	r0, #0
    9032:	d0fc      	beq.n	902e <full_measurement+0x66>
	delay_ms(100);//  Avoids cutting off the beep too quickly with another command
    9034:	2064      	movs	r0, #100	; 0x64
    9036:	47c8      	blx	r9
	backlightOff();
    9038:	4b93      	ldr	r3, [pc, #588]	; (9288 <full_measurement+0x2c0>)
    903a:	4798      	blx	r3
		meas_inst->a1xyz[i] = 0;
    903c:	2320      	movs	r3, #32
    903e:	469c      	mov	ip, r3
    9040:	44a4      	add	ip, r4
    9042:	4663      	mov	r3, ip
    9044:	4d91      	ldr	r5, [pc, #580]	; (928c <full_measurement+0x2c4>)
    9046:	220c      	movs	r2, #12
    9048:	2100      	movs	r1, #0
    904a:	4660      	mov	r0, ip
    904c:	9302      	str	r3, [sp, #8]
    904e:	47a8      	blx	r5
		meas_inst->a2xyz[i] = 0;
    9050:	232c      	movs	r3, #44	; 0x2c
    9052:	469c      	mov	ip, r3
    9054:	44a4      	add	ip, r4
    9056:	4663      	mov	r3, ip
    9058:	220c      	movs	r2, #12
    905a:	2100      	movs	r1, #0
    905c:	4660      	mov	r0, ip
    905e:	9303      	str	r3, [sp, #12]
    9060:	47a8      	blx	r5
		meas_inst->c1xyz[i] = 0;
    9062:	2338      	movs	r3, #56	; 0x38
    9064:	469c      	mov	ip, r3
    9066:	44a4      	add	ip, r4
    9068:	4663      	mov	r3, ip
    906a:	220c      	movs	r2, #12
    906c:	2100      	movs	r1, #0
    906e:	4660      	mov	r0, ip
    9070:	9304      	str	r3, [sp, #16]
    9072:	47a8      	blx	r5
		meas_inst->c2xyz[i] = 0;
    9074:	2344      	movs	r3, #68	; 0x44
    9076:	469c      	mov	ip, r3
    9078:	44a4      	add	ip, r4
    907a:	4663      	mov	r3, ip
    907c:	220c      	movs	r2, #12
    907e:	4660      	mov	r0, ip
    9080:	2100      	movs	r1, #0
    9082:	9305      	str	r3, [sp, #20]
    9084:	47a8      	blx	r5
	meas_inst->num_errors = 0;
    9086:	2300      	movs	r3, #0
    9088:	65e3      	str	r3, [r4, #92]	; 0x5c
	meas_inst->samples = 0;
    908a:	6523      	str	r3, [r4, #80]	; 0x50
	rxBufferLaserClear();
    908c:	47c0      	blx	r8
	writeLaser(cmd_laser_single, sizeof(cmd_laser_single));
    908e:	2105      	movs	r1, #5
    9090:	487f      	ldr	r0, [pc, #508]	; (9290 <full_measurement+0x2c8>)
    9092:	47b8      	blx	r7
	refMs1 = rtc_count_get_count(&rtc1); //  Background clock running at 1000hz
    9094:	4b7f      	ldr	r3, [pc, #508]	; (9294 <full_measurement+0x2cc>)
    9096:	0018      	movs	r0, r3
    9098:	469a      	mov	sl, r3
    909a:	4b7f      	ldr	r3, [pc, #508]	; (9298 <full_measurement+0x2d0>)
    909c:	4699      	mov	r9, r3
    909e:	4798      	blx	r3
    90a0:	4b7e      	ldr	r3, [pc, #504]	; (929c <full_measurement+0x2d4>)
    90a2:	4683      	mov	fp, r0
    90a4:	4698      	mov	r8, r3
    90a6:	4f7e      	ldr	r7, [pc, #504]	; (92a0 <full_measurement+0x2d8>)
    90a8:	4d7e      	ldr	r5, [pc, #504]	; (92a4 <full_measurement+0x2dc>)
    90aa:	e003      	b.n	90b4 <full_measurement+0xec>
		if (isLaserReceiveComplete()){
    90ac:	47b0      	blx	r6
    90ae:	2800      	cmp	r0, #0
    90b0:	d000      	beq.n	90b4 <full_measurement+0xec>
    90b2:	e0b1      	b.n	9218 <full_measurement+0x250>
		read_accel(&slave_acc1,a1temp);
    90b4:	a906      	add	r1, sp, #24
    90b6:	487c      	ldr	r0, [pc, #496]	; (92a8 <full_measurement+0x2e0>)
    90b8:	47c0      	blx	r8
		read_accel(&slave_acc2, a2temp);
    90ba:	a909      	add	r1, sp, #36	; 0x24
    90bc:	487b      	ldr	r0, [pc, #492]	; (92ac <full_measurement+0x2e4>)
    90be:	47c0      	blx	r8
		read_mag(&slave_mag1, c1temp);
    90c0:	a90c      	add	r1, sp, #48	; 0x30
    90c2:	487b      	ldr	r0, [pc, #492]	; (92b0 <full_measurement+0x2e8>)
    90c4:	47b8      	blx	r7
		read_mag(&slave_mag2, c2temp);
    90c6:	a90f      	add	r1, sp, #60	; 0x3c
    90c8:	487a      	ldr	r0, [pc, #488]	; (92b4 <full_measurement+0x2ec>)
    90ca:	47b8      	blx	r7
			meas_inst->a1xyz[i] += a1temp[i];
    90cc:	9906      	ldr	r1, [sp, #24]
    90ce:	6a20      	ldr	r0, [r4, #32]
    90d0:	47a8      	blx	r5
			meas_inst->a2xyz[i] += a2temp[i];
    90d2:	9909      	ldr	r1, [sp, #36]	; 0x24
			meas_inst->a1xyz[i] += a1temp[i];
    90d4:	6220      	str	r0, [r4, #32]
			meas_inst->a2xyz[i] += a2temp[i];
    90d6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    90d8:	47a8      	blx	r5
			meas_inst->c1xyz[i] += c1temp[i];
    90da:	990c      	ldr	r1, [sp, #48]	; 0x30
			meas_inst->a2xyz[i] += a2temp[i];
    90dc:	62e0      	str	r0, [r4, #44]	; 0x2c
			meas_inst->c1xyz[i] += c1temp[i];
    90de:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    90e0:	47a8      	blx	r5
			meas_inst->c2xyz[i] += c2temp[i];
    90e2:	990f      	ldr	r1, [sp, #60]	; 0x3c
			meas_inst->c1xyz[i] += c1temp[i];
    90e4:	63a0      	str	r0, [r4, #56]	; 0x38
			meas_inst->c2xyz[i] += c2temp[i];
    90e6:	6c60      	ldr	r0, [r4, #68]	; 0x44
    90e8:	47a8      	blx	r5
			meas_inst->a1xyz[i] += a1temp[i];
    90ea:	9907      	ldr	r1, [sp, #28]
			meas_inst->c2xyz[i] += c2temp[i];
    90ec:	6460      	str	r0, [r4, #68]	; 0x44
			meas_inst->a1xyz[i] += a1temp[i];
    90ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
    90f0:	47a8      	blx	r5
			meas_inst->a2xyz[i] += a2temp[i];
    90f2:	990a      	ldr	r1, [sp, #40]	; 0x28
			meas_inst->a1xyz[i] += a1temp[i];
    90f4:	6260      	str	r0, [r4, #36]	; 0x24
			meas_inst->a2xyz[i] += a2temp[i];
    90f6:	6b20      	ldr	r0, [r4, #48]	; 0x30
    90f8:	47a8      	blx	r5
			meas_inst->c1xyz[i] += c1temp[i];
    90fa:	990d      	ldr	r1, [sp, #52]	; 0x34
			meas_inst->a2xyz[i] += a2temp[i];
    90fc:	6320      	str	r0, [r4, #48]	; 0x30
			meas_inst->c1xyz[i] += c1temp[i];
    90fe:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    9100:	47a8      	blx	r5
			meas_inst->c2xyz[i] += c2temp[i];
    9102:	9910      	ldr	r1, [sp, #64]	; 0x40
			meas_inst->c1xyz[i] += c1temp[i];
    9104:	63e0      	str	r0, [r4, #60]	; 0x3c
			meas_inst->c2xyz[i] += c2temp[i];
    9106:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    9108:	47a8      	blx	r5
			meas_inst->a1xyz[i] += a1temp[i];
    910a:	9908      	ldr	r1, [sp, #32]
			meas_inst->c2xyz[i] += c2temp[i];
    910c:	64a0      	str	r0, [r4, #72]	; 0x48
			meas_inst->a1xyz[i] += a1temp[i];
    910e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    9110:	47a8      	blx	r5
			meas_inst->a2xyz[i] += a2temp[i];
    9112:	990b      	ldr	r1, [sp, #44]	; 0x2c
			meas_inst->a1xyz[i] += a1temp[i];
    9114:	62a0      	str	r0, [r4, #40]	; 0x28
			meas_inst->a2xyz[i] += a2temp[i];
    9116:	6b60      	ldr	r0, [r4, #52]	; 0x34
    9118:	47a8      	blx	r5
			meas_inst->c1xyz[i] += c1temp[i];
    911a:	990e      	ldr	r1, [sp, #56]	; 0x38
			meas_inst->a2xyz[i] += a2temp[i];
    911c:	6360      	str	r0, [r4, #52]	; 0x34
			meas_inst->c1xyz[i] += c1temp[i];
    911e:	6c20      	ldr	r0, [r4, #64]	; 0x40
    9120:	47a8      	blx	r5
			meas_inst->c2xyz[i] += c2temp[i];
    9122:	9911      	ldr	r1, [sp, #68]	; 0x44
			meas_inst->c1xyz[i] += c1temp[i];
    9124:	6420      	str	r0, [r4, #64]	; 0x40
			meas_inst->c2xyz[i] += c2temp[i];
    9126:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    9128:	47a8      	blx	r5
		meas_inst->samples += 1;
    912a:	6d23      	ldr	r3, [r4, #80]	; 0x50
			meas_inst->c2xyz[i] += c2temp[i];
    912c:	64e0      	str	r0, [r4, #76]	; 0x4c
		meas_inst->samples += 1;
    912e:	3301      	adds	r3, #1
    9130:	6523      	str	r3, [r4, #80]	; 0x50
		meas_inst->readTimeMs = rtc_count_get_count(&rtc1)-refMs1;
    9132:	4650      	mov	r0, sl
    9134:	47c8      	blx	r9
    9136:	465b      	mov	r3, fp
    9138:	1ac0      	subs	r0, r0, r3
		if (meas_inst->readTimeMs > timeOutMs){
    913a:	4b5f      	ldr	r3, [pc, #380]	; (92b8 <full_measurement+0x2f0>)
		meas_inst->readTimeMs = rtc_count_get_count(&rtc1)-refMs1;
    913c:	65a0      	str	r0, [r4, #88]	; 0x58
		if (meas_inst->readTimeMs > timeOutMs){
    913e:	4298      	cmp	r0, r3
    9140:	d9b4      	bls.n	90ac <full_measurement+0xe4>
	laser_parse_buffer(meas_inst);
    9142:	4b5e      	ldr	r3, [pc, #376]	; (92bc <full_measurement+0x2f4>)
    9144:	0020      	movs	r0, r4
    9146:	4798      	blx	r3
	if (calibrate_data){
    9148:	9b01      	ldr	r3, [sp, #4]
    914a:	2b00      	cmp	r3, #0
    914c:	d004      	beq.n	9158 <full_measurement+0x190>
		meas_inst->distance = meas_inst->distance+dist_calst.dist_offset;
    914e:	4b5c      	ldr	r3, [pc, #368]	; (92c0 <full_measurement+0x2f8>)
    9150:	69e0      	ldr	r0, [r4, #28]
    9152:	6d99      	ldr	r1, [r3, #88]	; 0x58
    9154:	47a8      	blx	r5
    9156:	61e0      	str	r0, [r4, #28]
	if (options.current_unit_dist == feet){
    9158:	4b45      	ldr	r3, [pc, #276]	; (9270 <full_measurement+0x2a8>)
    915a:	781d      	ldrb	r5, [r3, #0]
    915c:	2d00      	cmp	r5, #0
    915e:	d161      	bne.n	9224 <full_measurement+0x25c>
		meas_inst->distance = meas_inst->distance * mt2ft;//convert from meters to feet
    9160:	4b58      	ldr	r3, [pc, #352]	; (92c4 <full_measurement+0x2fc>)
    9162:	69e0      	ldr	r0, [r4, #28]
    9164:	6819      	ldr	r1, [r3, #0]
    9166:	4b58      	ldr	r3, [pc, #352]	; (92c8 <full_measurement+0x300>)
    9168:	4798      	blx	r3
    916a:	61e0      	str	r0, [r4, #28]
    916c:	2354      	movs	r3, #84	; 0x54
    916e:	54e5      	strb	r5, [r4, r3]
    9170:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9172:	4b56      	ldr	r3, [pc, #344]	; (92cc <full_measurement+0x304>)
    9174:	4798      	blx	r3
		meas_inst->a1xyz[i] =meas_inst->a1xyz[i] / meas_inst->samples;
    9176:	4d56      	ldr	r5, [pc, #344]	; (92d0 <full_measurement+0x308>)
    9178:	1c06      	adds	r6, r0, #0
    917a:	1c01      	adds	r1, r0, #0
    917c:	6a20      	ldr	r0, [r4, #32]
    917e:	47a8      	blx	r5
		meas_inst->a2xyz[i] =meas_inst->a2xyz[i] / meas_inst->samples;
    9180:	1c31      	adds	r1, r6, #0
		meas_inst->a1xyz[i] =meas_inst->a1xyz[i] / meas_inst->samples;
    9182:	6220      	str	r0, [r4, #32]
		meas_inst->a2xyz[i] =meas_inst->a2xyz[i] / meas_inst->samples;
    9184:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    9186:	47a8      	blx	r5
		meas_inst->c1xyz[i] =meas_inst->c1xyz[i] / meas_inst->samples;
    9188:	1c31      	adds	r1, r6, #0
		meas_inst->a2xyz[i] =meas_inst->a2xyz[i] / meas_inst->samples;
    918a:	62e0      	str	r0, [r4, #44]	; 0x2c
		meas_inst->c1xyz[i] =meas_inst->c1xyz[i] / meas_inst->samples;
    918c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    918e:	47a8      	blx	r5
		meas_inst->c2xyz[i] =meas_inst->c2xyz[i] / meas_inst->samples;
    9190:	1c31      	adds	r1, r6, #0
		meas_inst->c1xyz[i] =meas_inst->c1xyz[i] / meas_inst->samples;
    9192:	63a0      	str	r0, [r4, #56]	; 0x38
		meas_inst->c2xyz[i] =meas_inst->c2xyz[i] / meas_inst->samples;
    9194:	6c60      	ldr	r0, [r4, #68]	; 0x44
    9196:	47a8      	blx	r5
		meas_inst->a1xyz[i] =meas_inst->a1xyz[i] / meas_inst->samples;
    9198:	1c31      	adds	r1, r6, #0
		meas_inst->c2xyz[i] =meas_inst->c2xyz[i] / meas_inst->samples;
    919a:	6460      	str	r0, [r4, #68]	; 0x44
		meas_inst->a1xyz[i] =meas_inst->a1xyz[i] / meas_inst->samples;
    919c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    919e:	47a8      	blx	r5
		meas_inst->a2xyz[i] =meas_inst->a2xyz[i] / meas_inst->samples;
    91a0:	1c31      	adds	r1, r6, #0
		meas_inst->a1xyz[i] =meas_inst->a1xyz[i] / meas_inst->samples;
    91a2:	6260      	str	r0, [r4, #36]	; 0x24
		meas_inst->a2xyz[i] =meas_inst->a2xyz[i] / meas_inst->samples;
    91a4:	6b20      	ldr	r0, [r4, #48]	; 0x30
    91a6:	47a8      	blx	r5
		meas_inst->c1xyz[i] =meas_inst->c1xyz[i] / meas_inst->samples;
    91a8:	1c31      	adds	r1, r6, #0
		meas_inst->a2xyz[i] =meas_inst->a2xyz[i] / meas_inst->samples;
    91aa:	6320      	str	r0, [r4, #48]	; 0x30
		meas_inst->c1xyz[i] =meas_inst->c1xyz[i] / meas_inst->samples;
    91ac:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    91ae:	47a8      	blx	r5
		meas_inst->c2xyz[i] =meas_inst->c2xyz[i] / meas_inst->samples;
    91b0:	1c31      	adds	r1, r6, #0
		meas_inst->c1xyz[i] =meas_inst->c1xyz[i] / meas_inst->samples;
    91b2:	63e0      	str	r0, [r4, #60]	; 0x3c
		meas_inst->c2xyz[i] =meas_inst->c2xyz[i] / meas_inst->samples;
    91b4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    91b6:	47a8      	blx	r5
		meas_inst->a1xyz[i] =meas_inst->a1xyz[i] / meas_inst->samples;
    91b8:	1c31      	adds	r1, r6, #0
		meas_inst->c2xyz[i] =meas_inst->c2xyz[i] / meas_inst->samples;
    91ba:	64a0      	str	r0, [r4, #72]	; 0x48
		meas_inst->a1xyz[i] =meas_inst->a1xyz[i] / meas_inst->samples;
    91bc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    91be:	47a8      	blx	r5
		meas_inst->a2xyz[i] =meas_inst->a2xyz[i] / meas_inst->samples;
    91c0:	1c31      	adds	r1, r6, #0
		meas_inst->a1xyz[i] =meas_inst->a1xyz[i] / meas_inst->samples;
    91c2:	62a0      	str	r0, [r4, #40]	; 0x28
		meas_inst->a2xyz[i] =meas_inst->a2xyz[i] / meas_inst->samples;
    91c4:	6b60      	ldr	r0, [r4, #52]	; 0x34
    91c6:	47a8      	blx	r5
		meas_inst->c1xyz[i] =meas_inst->c1xyz[i] / meas_inst->samples;
    91c8:	1c31      	adds	r1, r6, #0
		meas_inst->a2xyz[i] =meas_inst->a2xyz[i] / meas_inst->samples;
    91ca:	6360      	str	r0, [r4, #52]	; 0x34
		meas_inst->c1xyz[i] =meas_inst->c1xyz[i] / meas_inst->samples;
    91cc:	6c20      	ldr	r0, [r4, #64]	; 0x40
    91ce:	47a8      	blx	r5
		meas_inst->c2xyz[i] =meas_inst->c2xyz[i] / meas_inst->samples;
    91d0:	1c31      	adds	r1, r6, #0
		meas_inst->c1xyz[i] =meas_inst->c1xyz[i] / meas_inst->samples;
    91d2:	6420      	str	r0, [r4, #64]	; 0x40
		meas_inst->c2xyz[i] =meas_inst->c2xyz[i] / meas_inst->samples;
    91d4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    91d6:	47a8      	blx	r5
	if (calibrate_data){
    91d8:	9b01      	ldr	r3, [sp, #4]
		meas_inst->c2xyz[i] =meas_inst->c2xyz[i] / meas_inst->samples;
    91da:	64e0      	str	r0, [r4, #76]	; 0x4c
	if (calibrate_data){
    91dc:	2b00      	cmp	r3, #0
    91de:	d123      	bne.n	9228 <full_measurement+0x260>
	calc_orientation(meas_inst);
    91e0:	0020      	movs	r0, r4
    91e2:	4b3c      	ldr	r3, [pc, #240]	; (92d4 <full_measurement+0x30c>)
    91e4:	4798      	blx	r3
	get_time();
    91e6:	4b3c      	ldr	r3, [pc, #240]	; (92d8 <full_measurement+0x310>)
    91e8:	4798      	blx	r3
	meas_inst->posix_time = gen_posix_time(&current_time);// Save POSIX time
    91ea:	4d3c      	ldr	r5, [pc, #240]	; (92dc <full_measurement+0x314>)
    91ec:	4b3c      	ldr	r3, [pc, #240]	; (92e0 <full_measurement+0x318>)
    91ee:	0028      	movs	r0, r5
    91f0:	4798      	blx	r3
	if (options.current_unit_temp == celsius){
    91f2:	4b1f      	ldr	r3, [pc, #124]	; (9270 <full_measurement+0x2a8>)
	meas_inst->posix_time = gen_posix_time(&current_time);// Save POSIX time
    91f4:	6060      	str	r0, [r4, #4]
	if (options.current_unit_temp == celsius){
    91f6:	785b      	ldrb	r3, [r3, #1]
    91f8:	2b04      	cmp	r3, #4
    91fa:	d02d      	beq.n	9258 <full_measurement+0x290>
		meas_inst->temp_units = fahrenheit;
    91fc:	2305      	movs	r3, #5
		meas_inst->temperature = current_time.temperatureF;
    91fe:	692a      	ldr	r2, [r5, #16]
    9200:	2155      	movs	r1, #85	; 0x55
    9202:	5463      	strb	r3, [r4, r1]
    9204:	60a2      	str	r2, [r4, #8]
	backlightOn();
    9206:	4b37      	ldr	r3, [pc, #220]	; (92e4 <full_measurement+0x31c>)
    9208:	4798      	blx	r3
}
    920a:	b013      	add	sp, #76	; 0x4c
    920c:	bc3c      	pop	{r2, r3, r4, r5}
    920e:	4690      	mov	r8, r2
    9210:	4699      	mov	r9, r3
    9212:	46a2      	mov	sl, r4
    9214:	46ab      	mov	fp, r5
    9216:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(laserMessageType()==SINGLE_MEASUREMENT){
    9218:	4b33      	ldr	r3, [pc, #204]	; (92e8 <full_measurement+0x320>)
    921a:	4798      	blx	r3
    921c:	2844      	cmp	r0, #68	; 0x44
    921e:	d000      	beq.n	9222 <full_measurement+0x25a>
    9220:	e748      	b.n	90b4 <full_measurement+0xec>
    9222:	e78e      	b.n	9142 <full_measurement+0x17a>
		meas_inst->distance_units = meters;
    9224:	2501      	movs	r5, #1
    9226:	e7a1      	b.n	916c <full_measurement+0x1a4>
		cal_apply_cal(meas_inst->a1xyz, meas_inst->a1xyz, &a1_calst);
    9228:	9802      	ldr	r0, [sp, #8]
    922a:	4d30      	ldr	r5, [pc, #192]	; (92ec <full_measurement+0x324>)
    922c:	0001      	movs	r1, r0
    922e:	4a30      	ldr	r2, [pc, #192]	; (92f0 <full_measurement+0x328>)
    9230:	47a8      	blx	r5
		cal_apply_cal(meas_inst->a2xyz, meas_inst->a2xyz, &a2_calst);
    9232:	9803      	ldr	r0, [sp, #12]
    9234:	4a2f      	ldr	r2, [pc, #188]	; (92f4 <full_measurement+0x32c>)
    9236:	0001      	movs	r1, r0
    9238:	47a8      	blx	r5
		cal_apply_cal(meas_inst->c1xyz, meas_inst->c1xyz, &c1_calst);
    923a:	9804      	ldr	r0, [sp, #16]
    923c:	4a2e      	ldr	r2, [pc, #184]	; (92f8 <full_measurement+0x330>)
    923e:	0001      	movs	r1, r0
    9240:	47a8      	blx	r5
		cal_apply_cal(meas_inst->c2xyz, meas_inst->c2xyz, &c2_calst);
    9242:	9805      	ldr	r0, [sp, #20]
    9244:	4a2d      	ldr	r2, [pc, #180]	; (92fc <full_measurement+0x334>)
    9246:	0001      	movs	r1, r0
    9248:	47a8      	blx	r5
	calc_orientation(meas_inst);
    924a:	0020      	movs	r0, r4
    924c:	4b21      	ldr	r3, [pc, #132]	; (92d4 <full_measurement+0x30c>)
    924e:	4798      	blx	r3
		error_check(meas_inst);
    9250:	0020      	movs	r0, r4
    9252:	4b2b      	ldr	r3, [pc, #172]	; (9300 <full_measurement+0x338>)
    9254:	4798      	blx	r3
    9256:	e7c6      	b.n	91e6 <full_measurement+0x21e>
		meas_inst->temperature = current_time.temperatureC;
    9258:	68ea      	ldr	r2, [r5, #12]
    925a:	e7d1      	b.n	9200 <full_measurement+0x238>
    925c:	4b05      	ldr	r3, [pc, #20]	; (9274 <full_measurement+0x2ac>)
    925e:	4f06      	ldr	r7, [pc, #24]	; (9278 <full_measurement+0x2b0>)
    9260:	4698      	mov	r8, r3
    9262:	4b06      	ldr	r3, [pc, #24]	; (927c <full_measurement+0x2b4>)
    9264:	4e07      	ldr	r6, [pc, #28]	; (9284 <full_measurement+0x2bc>)
    9266:	469a      	mov	sl, r3
    9268:	4b05      	ldr	r3, [pc, #20]	; (9280 <full_measurement+0x2b8>)
    926a:	4699      	mov	r9, r3
    926c:	e6db      	b.n	9026 <full_measurement+0x5e>
    926e:	46c0      	nop			; (mov r8, r8)
    9270:	20003770 	.word	0x20003770
    9274:	00012999 	.word	0x00012999
    9278:	00012961 	.word	0x00012961
    927c:	20000190 	.word	0x20000190
    9280:	000151d9 	.word	0x000151d9
    9284:	0001298d 	.word	0x0001298d
    9288:	000073e1 	.word	0x000073e1
    928c:	0001f06d 	.word	0x0001f06d
    9290:	200001a8 	.word	0x200001a8
    9294:	200015b8 	.word	0x200015b8
    9298:	0000b279 	.word	0x0000b279
    929c:	000083d1 	.word	0x000083d1
    92a0:	00008555 	.word	0x00008555
    92a4:	0001c4a5 	.word	0x0001c4a5
    92a8:	20001168 	.word	0x20001168
    92ac:	200010e0 	.word	0x200010e0
    92b0:	2000116c 	.word	0x2000116c
    92b4:	200010c4 	.word	0x200010c4
    92b8:	00001388 	.word	0x00001388
    92bc:	0000818d 	.word	0x0000818d
    92c0:	20004b48 	.word	0x20004b48
    92c4:	00024cb8 	.word	0x00024cb8
    92c8:	0001cba9 	.word	0x0001cba9
    92cc:	0001d201 	.word	0x0001d201
    92d0:	0001c7c9 	.word	0x0001c7c9
    92d4:	0000cef1 	.word	0x0000cef1
    92d8:	0000772d 	.word	0x0000772d
    92dc:	200010cc 	.word	0x200010cc
    92e0:	0000784d 	.word	0x0000784d
    92e4:	000072dd 	.word	0x000072dd
    92e8:	000129b5 	.word	0x000129b5
    92ec:	0000e559 	.word	0x0000e559
    92f0:	200051f4 	.word	0x200051f4
    92f4:	20004dd0 	.word	0x20004dd0
    92f8:	200036fc 	.word	0x200036fc
    92fc:	20002650 	.word	0x20002650
    9300:	000088c1 	.word	0x000088c1

00009304 <gen_err_message>:



void gen_err_message(char *err_str, struct MEASUREMENT *meas_inst, uint8_t errN){
    9304:	b5f0      	push	{r4, r5, r6, r7, lr}
    9306:	46c6      	mov	lr, r8
    9308:	0017      	movs	r7, r2
    930a:	0093      	lsls	r3, r2, #2
	float data1, data2;
	uint8_t axis;
	data1 = meas_inst->measurement_error_data1[errN];
	data2 = meas_inst->measurement_error_data2[errN];
    930c:	2288      	movs	r2, #136	; 0x88
void gen_err_message(char *err_str, struct MEASUREMENT *meas_inst, uint8_t errN){
    930e:	b500      	push	{lr}
    9310:	18cb      	adds	r3, r1, r3
    9312:	000c      	movs	r4, r1
    9314:	b082      	sub	sp, #8
    9316:	0005      	movs	r5, r0
	data1 = meas_inst->measurement_error_data1[errN];
    9318:	6e9e      	ldr	r6, [r3, #104]	; 0x68
	axis = data2;
    931a:	5898      	ldr	r0, [r3, r2]
    931c:	4b6c      	ldr	r3, [pc, #432]	; (94d0 <gen_err_message+0x1cc>)
    931e:	4798      	blx	r3
	
	switch(meas_inst->measurement_error[errN]){
    9320:	19e4      	adds	r4, r4, r7
	axis = data2;
    9322:	b2c3      	uxtb	r3, r0
	switch(meas_inst->measurement_error[errN]){
    9324:	3460      	adds	r4, #96	; 0x60
	axis = data2;
    9326:	4698      	mov	r8, r3
	switch(meas_inst->measurement_error[errN]){
    9328:	7823      	ldrb	r3, [r4, #0]
    932a:	2b0f      	cmp	r3, #15
    932c:	d900      	bls.n	9330 <gen_err_message+0x2c>
    932e:	e0a0      	b.n	9472 <gen_err_message+0x16e>
    9330:	4a68      	ldr	r2, [pc, #416]	; (94d4 <gen_err_message+0x1d0>)
    9332:	009b      	lsls	r3, r3, #2
    9334:	58d3      	ldr	r3, [r2, r3]
    9336:	469f      	mov	pc, r3
			break;
		case inc_ang_err:
			sprintf(err_str,"Inc Delta: %0.3f deg", data1);
			break;
		case azm_ang_err:
			sprintf(err_str,"Azm Delta: %0.3f deg", data1);
    9338:	4b67      	ldr	r3, [pc, #412]	; (94d8 <gen_err_message+0x1d4>)
    933a:	1c30      	adds	r0, r6, #0
    933c:	4798      	blx	r3
    933e:	4c67      	ldr	r4, [pc, #412]	; (94dc <gen_err_message+0x1d8>)
    9340:	0002      	movs	r2, r0
    9342:	000b      	movs	r3, r1
    9344:	0028      	movs	r0, r5
    9346:	4966      	ldr	r1, [pc, #408]	; (94e0 <gen_err_message+0x1dc>)
    9348:	47a0      	blx	r4
	};
	
	
	
	
}
    934a:	b002      	add	sp, #8
    934c:	bc04      	pop	{r2}
    934e:	4690      	mov	r8, r2
    9350:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (data1>1){sprintf(err_str,"Acc1 High: %0.4f", data1);}
    9352:	21fe      	movs	r1, #254	; 0xfe
    9354:	1c30      	adds	r0, r6, #0
    9356:	0589      	lsls	r1, r1, #22
    9358:	4b62      	ldr	r3, [pc, #392]	; (94e4 <gen_err_message+0x1e0>)
    935a:	4798      	blx	r3
    935c:	2800      	cmp	r0, #0
    935e:	d100      	bne.n	9362 <gen_err_message+0x5e>
    9360:	e08d      	b.n	947e <gen_err_message+0x17a>
    9362:	1c30      	adds	r0, r6, #0
    9364:	4b5c      	ldr	r3, [pc, #368]	; (94d8 <gen_err_message+0x1d4>)
    9366:	4798      	blx	r3
    9368:	4c5c      	ldr	r4, [pc, #368]	; (94dc <gen_err_message+0x1d8>)
    936a:	0002      	movs	r2, r0
    936c:	000b      	movs	r3, r1
    936e:	0028      	movs	r0, r5
    9370:	495d      	ldr	r1, [pc, #372]	; (94e8 <gen_err_message+0x1e4>)
    9372:	47a0      	blx	r4
    9374:	e7e9      	b.n	934a <gen_err_message+0x46>
			if (data1>1){sprintf(err_str,"Acc2 High: %0.4f", data1);}
    9376:	21fe      	movs	r1, #254	; 0xfe
    9378:	1c30      	adds	r0, r6, #0
    937a:	0589      	lsls	r1, r1, #22
    937c:	4b59      	ldr	r3, [pc, #356]	; (94e4 <gen_err_message+0x1e0>)
    937e:	4798      	blx	r3
    9380:	2800      	cmp	r0, #0
    9382:	d100      	bne.n	9386 <gen_err_message+0x82>
    9384:	e099      	b.n	94ba <gen_err_message+0x1b6>
    9386:	1c30      	adds	r0, r6, #0
    9388:	4b53      	ldr	r3, [pc, #332]	; (94d8 <gen_err_message+0x1d4>)
    938a:	4798      	blx	r3
    938c:	4c53      	ldr	r4, [pc, #332]	; (94dc <gen_err_message+0x1d8>)
    938e:	0002      	movs	r2, r0
    9390:	000b      	movs	r3, r1
    9392:	0028      	movs	r0, r5
    9394:	4955      	ldr	r1, [pc, #340]	; (94ec <gen_err_message+0x1e8>)
    9396:	47a0      	blx	r4
    9398:	e7d7      	b.n	934a <gen_err_message+0x46>
			if (data1>1){sprintf(err_str,"Comp1 High: %0.4f", data1);}
    939a:	21fe      	movs	r1, #254	; 0xfe
    939c:	1c30      	adds	r0, r6, #0
    939e:	0589      	lsls	r1, r1, #22
    93a0:	4b50      	ldr	r3, [pc, #320]	; (94e4 <gen_err_message+0x1e0>)
    93a2:	4798      	blx	r3
    93a4:	2800      	cmp	r0, #0
    93a6:	d07e      	beq.n	94a6 <gen_err_message+0x1a2>
    93a8:	1c30      	adds	r0, r6, #0
    93aa:	4b4b      	ldr	r3, [pc, #300]	; (94d8 <gen_err_message+0x1d4>)
    93ac:	4798      	blx	r3
    93ae:	4c4b      	ldr	r4, [pc, #300]	; (94dc <gen_err_message+0x1d8>)
    93b0:	0002      	movs	r2, r0
    93b2:	000b      	movs	r3, r1
    93b4:	0028      	movs	r0, r5
    93b6:	494e      	ldr	r1, [pc, #312]	; (94f0 <gen_err_message+0x1ec>)
    93b8:	47a0      	blx	r4
    93ba:	e7c6      	b.n	934a <gen_err_message+0x46>
			if (data1>1){sprintf(err_str,"Comp2 High: %0.4f", data1);}
    93bc:	21fe      	movs	r1, #254	; 0xfe
    93be:	1c30      	adds	r0, r6, #0
    93c0:	0589      	lsls	r1, r1, #22
    93c2:	4b48      	ldr	r3, [pc, #288]	; (94e4 <gen_err_message+0x1e0>)
    93c4:	4798      	blx	r3
    93c6:	2800      	cmp	r0, #0
    93c8:	d063      	beq.n	9492 <gen_err_message+0x18e>
    93ca:	1c30      	adds	r0, r6, #0
    93cc:	4b42      	ldr	r3, [pc, #264]	; (94d8 <gen_err_message+0x1d4>)
    93ce:	4798      	blx	r3
    93d0:	4c42      	ldr	r4, [pc, #264]	; (94dc <gen_err_message+0x1d8>)
    93d2:	0002      	movs	r2, r0
    93d4:	000b      	movs	r3, r1
    93d6:	0028      	movs	r0, r5
    93d8:	4946      	ldr	r1, [pc, #280]	; (94f4 <gen_err_message+0x1f0>)
    93da:	47a0      	blx	r4
    93dc:	e7b5      	b.n	934a <gen_err_message+0x46>
			sprintf(err_str,"Acc delta ax%d: %0.3f%%", axis, 100*data1);
    93de:	4946      	ldr	r1, [pc, #280]	; (94f8 <gen_err_message+0x1f4>)
    93e0:	1c30      	adds	r0, r6, #0
    93e2:	4b46      	ldr	r3, [pc, #280]	; (94fc <gen_err_message+0x1f8>)
    93e4:	4798      	blx	r3
    93e6:	4b3c      	ldr	r3, [pc, #240]	; (94d8 <gen_err_message+0x1d4>)
    93e8:	4798      	blx	r3
    93ea:	4642      	mov	r2, r8
    93ec:	9000      	str	r0, [sp, #0]
    93ee:	9101      	str	r1, [sp, #4]
    93f0:	4b3a      	ldr	r3, [pc, #232]	; (94dc <gen_err_message+0x1d8>)
    93f2:	4943      	ldr	r1, [pc, #268]	; (9500 <gen_err_message+0x1fc>)
    93f4:	0028      	movs	r0, r5
    93f6:	4798      	blx	r3
			break;
    93f8:	e7a7      	b.n	934a <gen_err_message+0x46>
			sprintf(err_str,"Cmp delta ax%d: %0.3f%%", axis, 100*data1);
    93fa:	493f      	ldr	r1, [pc, #252]	; (94f8 <gen_err_message+0x1f4>)
    93fc:	1c30      	adds	r0, r6, #0
    93fe:	4b3f      	ldr	r3, [pc, #252]	; (94fc <gen_err_message+0x1f8>)
    9400:	4798      	blx	r3
    9402:	4b35      	ldr	r3, [pc, #212]	; (94d8 <gen_err_message+0x1d4>)
    9404:	4798      	blx	r3
    9406:	4642      	mov	r2, r8
    9408:	9000      	str	r0, [sp, #0]
    940a:	9101      	str	r1, [sp, #4]
    940c:	4b33      	ldr	r3, [pc, #204]	; (94dc <gen_err_message+0x1d8>)
    940e:	493d      	ldr	r1, [pc, #244]	; (9504 <gen_err_message+0x200>)
    9410:	0028      	movs	r0, r5
    9412:	4798      	blx	r3
			break;
    9414:	e799      	b.n	934a <gen_err_message+0x46>
			sprintf(err_str,"laser calc error");
    9416:	2211      	movs	r2, #17
    9418:	493b      	ldr	r1, [pc, #236]	; (9508 <gen_err_message+0x204>)
    941a:	0028      	movs	r0, r5
    941c:	4b3b      	ldr	r3, [pc, #236]	; (950c <gen_err_message+0x208>)
    941e:	4798      	blx	r3
			break;
    9420:	e793      	b.n	934a <gen_err_message+0x46>
			sprintf(err_str,"laser weak signal");
    9422:	2212      	movs	r2, #18
    9424:	493a      	ldr	r1, [pc, #232]	; (9510 <gen_err_message+0x20c>)
    9426:	0028      	movs	r0, r5
    9428:	4b38      	ldr	r3, [pc, #224]	; (950c <gen_err_message+0x208>)
    942a:	4798      	blx	r3
			break;
    942c:	e78d      	b.n	934a <gen_err_message+0x46>
			sprintf(err_str,"laser strong signal");
    942e:	2214      	movs	r2, #20
    9430:	4938      	ldr	r1, [pc, #224]	; (9514 <gen_err_message+0x210>)
    9432:	0028      	movs	r0, r5
    9434:	4b35      	ldr	r3, [pc, #212]	; (950c <gen_err_message+0x208>)
    9436:	4798      	blx	r3
			break;
    9438:	e787      	b.n	934a <gen_err_message+0x46>
			sprintf(err_str,"laser comm timeout");
    943a:	2213      	movs	r2, #19
    943c:	4936      	ldr	r1, [pc, #216]	; (9518 <gen_err_message+0x214>)
    943e:	0028      	movs	r0, r5
    9440:	4b32      	ldr	r3, [pc, #200]	; (950c <gen_err_message+0x208>)
    9442:	4798      	blx	r3
			break;
    9444:	e781      	b.n	934a <gen_err_message+0x46>
			sprintf(err_str,"laser error, unknown");
    9446:	2215      	movs	r2, #21
    9448:	4934      	ldr	r1, [pc, #208]	; (951c <gen_err_message+0x218>)
    944a:	0028      	movs	r0, r5
    944c:	4b2f      	ldr	r3, [pc, #188]	; (950c <gen_err_message+0x208>)
    944e:	4798      	blx	r3
			break;
    9450:	e77b      	b.n	934a <gen_err_message+0x46>
			sprintf(err_str,"laser wrong message");
    9452:	2214      	movs	r2, #20
    9454:	4932      	ldr	r1, [pc, #200]	; (9520 <gen_err_message+0x21c>)
    9456:	0028      	movs	r0, r5
    9458:	4b2c      	ldr	r3, [pc, #176]	; (950c <gen_err_message+0x208>)
    945a:	4798      	blx	r3
			break;
    945c:	e775      	b.n	934a <gen_err_message+0x46>
			sprintf(err_str,"Inc Delta: %0.3f deg", data1);
    945e:	1c30      	adds	r0, r6, #0
    9460:	4b1d      	ldr	r3, [pc, #116]	; (94d8 <gen_err_message+0x1d4>)
    9462:	4798      	blx	r3
    9464:	4c1d      	ldr	r4, [pc, #116]	; (94dc <gen_err_message+0x1d8>)
    9466:	0002      	movs	r2, r0
    9468:	000b      	movs	r3, r1
    946a:	0028      	movs	r0, r5
    946c:	492d      	ldr	r1, [pc, #180]	; (9524 <gen_err_message+0x220>)
    946e:	47a0      	blx	r4
			break;
    9470:	e76b      	b.n	934a <gen_err_message+0x46>
			sprintf(err_str,"unrecognized error");	
    9472:	2213      	movs	r2, #19
    9474:	492c      	ldr	r1, [pc, #176]	; (9528 <gen_err_message+0x224>)
    9476:	0028      	movs	r0, r5
    9478:	4b24      	ldr	r3, [pc, #144]	; (950c <gen_err_message+0x208>)
    947a:	4798      	blx	r3
}
    947c:	e765      	b.n	934a <gen_err_message+0x46>
			else{sprintf(err_str,"Acc1 Low: %0.4f", data1);}
    947e:	1c30      	adds	r0, r6, #0
    9480:	4b15      	ldr	r3, [pc, #84]	; (94d8 <gen_err_message+0x1d4>)
    9482:	4798      	blx	r3
    9484:	4c15      	ldr	r4, [pc, #84]	; (94dc <gen_err_message+0x1d8>)
    9486:	0002      	movs	r2, r0
    9488:	000b      	movs	r3, r1
    948a:	0028      	movs	r0, r5
    948c:	4927      	ldr	r1, [pc, #156]	; (952c <gen_err_message+0x228>)
    948e:	47a0      	blx	r4
    9490:	e75b      	b.n	934a <gen_err_message+0x46>
			else{sprintf(err_str,"Comp2 Low: %0.4f", data1);}
    9492:	1c30      	adds	r0, r6, #0
    9494:	4b10      	ldr	r3, [pc, #64]	; (94d8 <gen_err_message+0x1d4>)
    9496:	4798      	blx	r3
    9498:	4c10      	ldr	r4, [pc, #64]	; (94dc <gen_err_message+0x1d8>)
    949a:	0002      	movs	r2, r0
    949c:	000b      	movs	r3, r1
    949e:	0028      	movs	r0, r5
    94a0:	4923      	ldr	r1, [pc, #140]	; (9530 <gen_err_message+0x22c>)
    94a2:	47a0      	blx	r4
    94a4:	e751      	b.n	934a <gen_err_message+0x46>
			else{sprintf(err_str,"Comp1 Low: %0.4f", data1);}
    94a6:	1c30      	adds	r0, r6, #0
    94a8:	4b0b      	ldr	r3, [pc, #44]	; (94d8 <gen_err_message+0x1d4>)
    94aa:	4798      	blx	r3
    94ac:	4c0b      	ldr	r4, [pc, #44]	; (94dc <gen_err_message+0x1d8>)
    94ae:	0002      	movs	r2, r0
    94b0:	000b      	movs	r3, r1
    94b2:	0028      	movs	r0, r5
    94b4:	491f      	ldr	r1, [pc, #124]	; (9534 <gen_err_message+0x230>)
    94b6:	47a0      	blx	r4
    94b8:	e747      	b.n	934a <gen_err_message+0x46>
			else{sprintf(err_str,"Acc2 Low: %0.4f", data1);}
    94ba:	1c30      	adds	r0, r6, #0
    94bc:	4b06      	ldr	r3, [pc, #24]	; (94d8 <gen_err_message+0x1d4>)
    94be:	4798      	blx	r3
    94c0:	4c06      	ldr	r4, [pc, #24]	; (94dc <gen_err_message+0x1d8>)
    94c2:	0002      	movs	r2, r0
    94c4:	000b      	movs	r3, r1
    94c6:	0028      	movs	r0, r5
    94c8:	491b      	ldr	r1, [pc, #108]	; (9538 <gen_err_message+0x234>)
    94ca:	47a0      	blx	r4
    94cc:	e73d      	b.n	934a <gen_err_message+0x46>
    94ce:	46c0      	nop			; (mov r8, r8)
    94d0:	0001c439 	.word	0x0001c439
    94d4:	00023878 	.word	0x00023878
    94d8:	0001eddd 	.word	0x0001eddd
    94dc:	0001f101 	.word	0x0001f101
    94e0:	00023998 	.word	0x00023998
    94e4:	0001c341 	.word	0x0001c341
    94e8:	000238b8 	.word	0x000238b8
    94ec:	000238dc 	.word	0x000238dc
    94f0:	00023900 	.word	0x00023900
    94f4:	00023928 	.word	0x00023928
    94f8:	42c80000 	.word	0x42c80000
    94fc:	0001cba9 	.word	0x0001cba9
    9500:	00023950 	.word	0x00023950
    9504:	00023968 	.word	0x00023968
    9508:	000239b0 	.word	0x000239b0
    950c:	0001efe9 	.word	0x0001efe9
    9510:	000239c4 	.word	0x000239c4
    9514:	000239d8 	.word	0x000239d8
    9518:	000239ec 	.word	0x000239ec
    951c:	00023a00 	.word	0x00023a00
    9520:	00023a18 	.word	0x00023a18
    9524:	00023980 	.word	0x00023980
    9528:	00023a2c 	.word	0x00023a2c
    952c:	000238cc 	.word	0x000238cc
    9530:	0002393c 	.word	0x0002393c
    9534:	00023914 	.word	0x00023914
    9538:	000238f0 	.word	0x000238f0

0000953c <timer_callback_1s>:

void timer_callback_1s(struct tc_module *const module_inst)
{

	
	current_input=input_1sec;
    953c:	2207      	movs	r2, #7
    953e:	4b01      	ldr	r3, [pc, #4]	; (9544 <timer_callback_1s+0x8>)
    9540:	701a      	strb	r2, [r3, #0]


}
    9542:	4770      	bx	lr
    9544:	200043f4 	.word	0x200043f4

00009548 <timer_callback_longbutton>:




void timer_callback_longbutton(struct tc_module *const module_inst)
{
    9548:	b510      	push	{r4, lr}
    954a:	4809      	ldr	r0, [pc, #36]	; (9570 <timer_callback_longbutton+0x28>)
    954c:	6802      	ldr	r2, [r0, #0]

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	return (tc_module->SYNCBUSY.reg);
    954e:	6913      	ldr	r3, [r2, #16]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    9550:	2b00      	cmp	r3, #0
    9552:	d1fc      	bne.n	954e <timer_callback_longbutton+0x6>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_STOP_Val);
    9554:	3340      	adds	r3, #64	; 0x40
    9556:	7153      	strb	r3, [r2, #5]
	
	tc_stop_counter(&timer1);
	tc_set_count_value(&timer1, 0);
    9558:	2100      	movs	r1, #0
    955a:	4b06      	ldr	r3, [pc, #24]	; (9574 <timer_callback_longbutton+0x2c>)
    955c:	4798      	blx	r3
	}
}

inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->IN.reg & arch_ioport_pin_to_mask(pin);
    955e:	4b06      	ldr	r3, [pc, #24]	; (9578 <timer_callback_longbutton+0x30>)
    9560:	6a1b      	ldr	r3, [r3, #32]
	if(!ioport_get_pin_level(buttonE)){
    9562:	069b      	lsls	r3, r3, #26
    9564:	d402      	bmi.n	956c <timer_callback_longbutton+0x24>
		current_input=input_powerdown;
    9566:	2206      	movs	r2, #6
    9568:	4b04      	ldr	r3, [pc, #16]	; (957c <timer_callback_longbutton+0x34>)
    956a:	701a      	strb	r2, [r3, #0]
	}
	
}
    956c:	bd10      	pop	{r4, pc}
    956e:	46c0      	nop			; (mov r8, r8)
    9570:	200015f0 	.word	0x200015f0
    9574:	0000c5d1 	.word	0x0000c5d1
    9578:	40002800 	.word	0x40002800
    957c:	200043f4 	.word	0x200043f4

00009580 <timer_callback_laser_timeout>:
{
    9580:	b510      	push	{r4, lr}
    9582:	4809      	ldr	r0, [pc, #36]	; (95a8 <timer_callback_laser_timeout+0x28>)
    9584:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    9586:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    9588:	2b00      	cmp	r3, #0
    958a:	d1fc      	bne.n	9586 <timer_callback_laser_timeout+0x6>
	tc_set_count_value(&timer3, laser_timeout);
    958c:	21e1      	movs	r1, #225	; 0xe1
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_STOP_Val);
    958e:	3340      	adds	r3, #64	; 0x40
    9590:	7153      	strb	r3, [r2, #5]
    9592:	0089      	lsls	r1, r1, #2
    9594:	4b05      	ldr	r3, [pc, #20]	; (95ac <timer_callback_laser_timeout+0x2c>)
    9596:	4798      	blx	r3
	rangefinder_on_off(false);
    9598:	4b05      	ldr	r3, [pc, #20]	; (95b0 <timer_callback_laser_timeout+0x30>)
    959a:	2000      	movs	r0, #0
    959c:	4798      	blx	r3
	current_input = input_laser_timeout;
    959e:	2216      	movs	r2, #22
    95a0:	4b04      	ldr	r3, [pc, #16]	; (95b4 <timer_callback_laser_timeout+0x34>)
    95a2:	701a      	strb	r2, [r3, #0]
}
    95a4:	bd10      	pop	{r4, pc}
    95a6:	46c0      	nop			; (mov r8, r8)
    95a8:	2000160c 	.word	0x2000160c
    95ac:	0000c5d1 	.word	0x0000c5d1
    95b0:	0000834d 	.word	0x0000834d
    95b4:	200043f4 	.word	0x200043f4

000095b8 <setup_rtc>:
void setup_rtc(void){
    95b8:	b510      	push	{r4, lr}
    95ba:	b084      	sub	sp, #16
	/* Sanity check argument */
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
	config->mode                = RTC_COUNT_MODE_32BIT;
    95bc:	2301      	movs	r3, #1
    95be:	466a      	mov	r2, sp
	config->clear_on_match      = false;
    95c0:	4669      	mov	r1, sp
	config->mode                = RTC_COUNT_MODE_32BIT;
    95c2:	7093      	strb	r3, [r2, #2]
	config->clear_on_match      = false;
    95c4:	2200      	movs	r2, #0

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	config->enable_read_sync    = true;
    95c6:	710b      	strb	r3, [r1, #4]
	config->clear_on_match      = false;
    95c8:	70ca      	strb	r2, [r1, #3]
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
		config->compare_values[i] = 0;
    95ca:	2300      	movs	r3, #0
    95cc:	2200      	movs	r2, #0
    95ce:	9202      	str	r2, [sp, #8]
    95d0:	9303      	str	r3, [sp, #12]
	config_rtc_count.prescaler           = RTC_COUNT_PRESCALER_DIV_1;
    95d2:	2380      	movs	r3, #128	; 0x80
	rtc_count_init(&rtc1, RTC, &config_rtc_count);
    95d4:	4c06      	ldr	r4, [pc, #24]	; (95f0 <setup_rtc+0x38>)
	config_rtc_count.prescaler           = RTC_COUNT_PRESCALER_DIV_1;
    95d6:	005b      	lsls	r3, r3, #1
    95d8:	466a      	mov	r2, sp
    95da:	800b      	strh	r3, [r1, #0]
	rtc_count_init(&rtc1, RTC, &config_rtc_count);
    95dc:	0020      	movs	r0, r4
    95de:	4905      	ldr	r1, [pc, #20]	; (95f4 <setup_rtc+0x3c>)
    95e0:	4b05      	ldr	r3, [pc, #20]	; (95f8 <setup_rtc+0x40>)
    95e2:	4798      	blx	r3
	rtc_count_enable(&rtc1);
    95e4:	0020      	movs	r0, r4
    95e6:	4b05      	ldr	r3, [pc, #20]	; (95fc <setup_rtc+0x44>)
    95e8:	4798      	blx	r3
}
    95ea:	b004      	add	sp, #16
    95ec:	bd10      	pop	{r4, pc}
    95ee:	46c0      	nop			; (mov r8, r8)
    95f0:	200015b8 	.word	0x200015b8
    95f4:	40002000 	.word	0x40002000
    95f8:	0000b149 	.word	0x0000b149
    95fc:	0000b121 	.word	0x0000b121

00009600 <wdt_enable>:
	config->always_on            = false;
    9600:	2300      	movs	r3, #0
	config->enable               = true;
    9602:	2201      	movs	r2, #1
void wdt_enable(void){
    9604:	b510      	push	{r4, lr}
	config->always_on            = false;
    9606:	4805      	ldr	r0, [pc, #20]	; (961c <wdt_enable+0x1c>)
    9608:	7003      	strb	r3, [r0, #0]
	config->enable               = true;
    960a:	7042      	strb	r2, [r0, #1]
	config->window_period        = WDT_PERIOD_NONE;
    960c:	70c3      	strb	r3, [r0, #3]
	config->timeout_period       = WDT_PERIOD_16384CLK;
    960e:	320b      	adds	r2, #11
	config->early_warning_period = WDT_PERIOD_NONE;
    9610:	7103      	strb	r3, [r0, #4]
	wdt_set_config(&wdt_configuration);
    9612:	4b03      	ldr	r3, [pc, #12]	; (9620 <wdt_enable+0x20>)
	config->timeout_period       = WDT_PERIOD_16384CLK;
    9614:	7082      	strb	r2, [r0, #2]
    9616:	4798      	blx	r3
}
    9618:	bd10      	pop	{r4, pc}
    961a:	46c0      	nop			; (mov r8, r8)
    961c:	20001630 	.word	0x20001630
    9620:	00003b61 	.word	0x00003b61

00009624 <wdt_disable>:
	config->always_on            = false;
    9624:	2300      	movs	r3, #0
	config->timeout_period       = WDT_PERIOD_16384CLK;
    9626:	220c      	movs	r2, #12
void wdt_disable(void){
    9628:	b510      	push	{r4, lr}
	config->always_on            = false;
    962a:	4804      	ldr	r0, [pc, #16]	; (963c <wdt_disable+0x18>)
    962c:	7003      	strb	r3, [r0, #0]
	config->window_period        = WDT_PERIOD_NONE;
    962e:	70c3      	strb	r3, [r0, #3]
	config->early_warning_period = WDT_PERIOD_NONE;
    9630:	7103      	strb	r3, [r0, #4]
	wdt_configuration.enable = false;
    9632:	7043      	strb	r3, [r0, #1]
	wdt_set_config(&wdt_configuration);
    9634:	4b02      	ldr	r3, [pc, #8]	; (9640 <wdt_disable+0x1c>)
	config->timeout_period       = WDT_PERIOD_16384CLK;
    9636:	7082      	strb	r2, [r0, #2]
    9638:	4798      	blx	r3
}
    963a:	bd10      	pop	{r4, pc}
    963c:	20001630 	.word	0x20001630
    9640:	00003b61 	.word	0x00003b61

00009644 <idle_timeout>:
	if ((current_input == input_1sec) && (!isCharging)){
    9644:	4b0a      	ldr	r3, [pc, #40]	; (9670 <idle_timeout+0x2c>)
    9646:	781a      	ldrb	r2, [r3, #0]
    9648:	2a07      	cmp	r2, #7
    964a:	d003      	beq.n	9654 <idle_timeout+0x10>
    964c:	2200      	movs	r2, #0
    964e:	4b09      	ldr	r3, [pc, #36]	; (9674 <idle_timeout+0x30>)
    9650:	601a      	str	r2, [r3, #0]
};
    9652:	4770      	bx	lr
	if ((current_input == input_1sec) && (!isCharging)){
    9654:	4a08      	ldr	r2, [pc, #32]	; (9678 <idle_timeout+0x34>)
    9656:	7811      	ldrb	r1, [r2, #0]
    9658:	2900      	cmp	r1, #0
    965a:	d1f7      	bne.n	964c <idle_timeout+0x8>
		idle_seconds++;
    965c:	4805      	ldr	r0, [pc, #20]	; (9674 <idle_timeout+0x30>)
    965e:	6802      	ldr	r2, [r0, #0]
    9660:	3201      	adds	r2, #1
    9662:	6002      	str	r2, [r0, #0]
	if (idle_seconds>idle_seconds_max){
    9664:	2a3c      	cmp	r2, #60	; 0x3c
    9666:	d9f4      	bls.n	9652 <idle_timeout+0xe>
		current_input = input_powerdown;
    9668:	2206      	movs	r2, #6
		idle_seconds = 0;
    966a:	6001      	str	r1, [r0, #0]
		current_input = input_powerdown;
    966c:	701a      	strb	r2, [r3, #0]
};
    966e:	e7f0      	b.n	9652 <idle_timeout+0xe>
    9670:	200043f4 	.word	0x200043f4
    9674:	20000e50 	.word	0x20000e50
    9678:	20000fa5 	.word	0x20000fa5

0000967c <configure_timer_1s>:
void configure_timer_1s(void){
    967c:	b530      	push	{r4, r5, lr}
    967e:	b08f      	sub	sp, #60	; 0x3c
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    9680:	2300      	movs	r3, #0
    9682:	466a      	mov	r2, sp
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    9684:	2100      	movs	r1, #0
    9686:	2000      	movs	r0, #0
	config->counter_16_bit.value                   = 0x0000;
    9688:	8513      	strh	r3, [r2, #40]	; 0x28
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    968a:	7193      	strb	r3, [r2, #6]
	config->run_in_standby             = false;
    968c:	7053      	strb	r3, [r2, #1]
	config->on_demand                  = false;
    968e:	7093      	strb	r3, [r2, #2]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    9690:	7213      	strb	r3, [r2, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    9692:	7253      	strb	r3, [r2, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    9694:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    9696:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    9698:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    969a:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    969c:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    969e:	7413      	strb	r3, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    96a0:	7713      	strb	r3, [r2, #28]
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    96a2:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    96a4:	8593      	strh	r3, [r2, #44]	; 0x2c
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    96a6:	9008      	str	r0, [sp, #32]
    96a8:	9109      	str	r1, [sp, #36]	; 0x24
	config->double_buffering_enabled = false;
    96aa:	2200      	movs	r2, #0
    96ac:	4669      	mov	r1, sp
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    96ae:	9305      	str	r3, [sp, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    96b0:	9306      	str	r3, [sp, #24]
	config->double_buffering_enabled = false;
    96b2:	3334      	adds	r3, #52	; 0x34
    96b4:	54ca      	strb	r2, [r1, r3]
	config_tc.counter_size    = TC_COUNTER_SIZE_8BIT;
    96b6:	3b30      	subs	r3, #48	; 0x30
    96b8:	70cb      	strb	r3, [r1, #3]
	config_tc.clock_prescaler =     TC_CLOCK_PRESCALER_DIV1024 ;//  TC_CLOCK_PRESCALER_DIV1024;
    96ba:	23e0      	movs	r3, #224	; 0xe0
    96bc:	00db      	lsls	r3, r3, #3
    96be:	808b      	strh	r3, [r1, #4]
	config_tc.clock_source = GCLK_FOR_TIMER1S;
    96c0:	2302      	movs	r3, #2
	config_tc.counter_8_bit.period = 0x1F;//0x1F = 31d, 1 second exactly on counter
    96c2:	221f      	movs	r2, #31
	config_tc.clock_source = GCLK_FOR_TIMER1S;
    96c4:	700b      	strb	r3, [r1, #0]
	if(timer2_on_off){
    96c6:	4d23      	ldr	r5, [pc, #140]	; (9754 <configure_timer_1s+0xd8>)
	config_tc.reload_action =  TC_RELOAD_ACTION_PRESC;
    96c8:	330e      	adds	r3, #14
    96ca:	71cb      	strb	r3, [r1, #7]
	config_tc.counter_8_bit.period = 0x1F;//0x1F = 31d, 1 second exactly on counter
    96cc:	3319      	adds	r3, #25
    96ce:	54ca      	strb	r2, [r1, r3]
	if(timer2_on_off){
    96d0:	782b      	ldrb	r3, [r5, #0]
    96d2:	4c21      	ldr	r4, [pc, #132]	; (9758 <configure_timer_1s+0xdc>)
    96d4:	2b00      	cmp	r3, #0
    96d6:	d00b      	beq.n	96f0 <configure_timer_1s+0x74>
    96d8:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    96da:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    96dc:	2b00      	cmp	r3, #0
    96de:	d1fc      	bne.n	96da <configure_timer_1s+0x5e>
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    96e0:	2133      	movs	r1, #51	; 0x33
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    96e2:	2002      	movs	r0, #2
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    96e4:	7211      	strb	r1, [r2, #8]
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
    96e6:	7291      	strb	r1, [r2, #10]
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    96e8:	6811      	ldr	r1, [r2, #0]
    96ea:	4381      	bics	r1, r0
    96ec:	6011      	str	r1, [r2, #0]
		timer2_on_off = false;
    96ee:	702b      	strb	r3, [r5, #0]
	tc_init(&timer2, TC1, &config_tc);
    96f0:	466a      	mov	r2, sp
    96f2:	491a      	ldr	r1, [pc, #104]	; (975c <configure_timer_1s+0xe0>)
    96f4:	0020      	movs	r0, r4
    96f6:	4b1a      	ldr	r3, [pc, #104]	; (9760 <configure_timer_1s+0xe4>)
    96f8:	4798      	blx	r3
    96fa:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    96fc:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    96fe:	2b00      	cmp	r3, #0
    9700:	d1fc      	bne.n	96fc <configure_timer_1s+0x80>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    9702:	2102      	movs	r1, #2
    9704:	6813      	ldr	r3, [r2, #0]
    9706:	430b      	orrs	r3, r1
    9708:	6013      	str	r3, [r2, #0]
	timer2_on_off = true;
    970a:	2301      	movs	r3, #1
    970c:	702b      	strb	r3, [r5, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    970e:	6823      	ldr	r3, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    9710:	691a      	ldr	r2, [r3, #16]

	while (tc_is_syncing(module_inst)) {
    9712:	2a00      	cmp	r2, #0
    9714:	d1fc      	bne.n	9710 <configure_timer_1s+0x94>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    9716:	711a      	strb	r2, [r3, #4]
	return (tc_module->SYNCBUSY.reg);
    9718:	691a      	ldr	r2, [r3, #16]

	while (tc_is_syncing(module_inst)) {
    971a:	2a00      	cmp	r2, #0
    971c:	d1fc      	bne.n	9718 <configure_timer_1s+0x9c>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_RETRIGGER_Val);
    971e:	3220      	adds	r2, #32
    9720:	715a      	strb	r2, [r3, #5]
	tc_register_callback(
    9722:	4910      	ldr	r1, [pc, #64]	; (9764 <configure_timer_1s+0xe8>)
    9724:	2200      	movs	r2, #0
    9726:	0020      	movs	r0, r4
    9728:	4b0f      	ldr	r3, [pc, #60]	; (9768 <configure_timer_1s+0xec>)
    972a:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    972c:	6820      	ldr	r0, [r4, #0]
    972e:	4b0f      	ldr	r3, [pc, #60]	; (976c <configure_timer_1s+0xf0>)
    9730:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    9732:	4b0f      	ldr	r3, [pc, #60]	; (9770 <configure_timer_1s+0xf4>)
    9734:	5c1a      	ldrb	r2, [r3, r0]
    9736:	231f      	movs	r3, #31
    9738:	4013      	ands	r3, r2
    973a:	2201      	movs	r2, #1
    973c:	0011      	movs	r1, r2
    973e:	4099      	lsls	r1, r3
    9740:	4b0c      	ldr	r3, [pc, #48]	; (9774 <configure_timer_1s+0xf8>)
    9742:	6019      	str	r1, [r3, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    9744:	2101      	movs	r1, #1
    9746:	7e63      	ldrb	r3, [r4, #25]
    9748:	430b      	orrs	r3, r1
    974a:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    974c:	6823      	ldr	r3, [r4, #0]
    974e:	725a      	strb	r2, [r3, #9]
}
    9750:	b00f      	add	sp, #60	; 0x3c
    9752:	bd30      	pop	{r4, r5, pc}
    9754:	20000e55 	.word	0x20000e55
    9758:	2000159c 	.word	0x2000159c
    975c:	42002400 	.word	0x42002400
    9760:	0000c26d 	.word	0x0000c26d
    9764:	0000953d 	.word	0x0000953d
    9768:	0000c0d9 	.word	0x0000c0d9
    976c:	0000c22d 	.word	0x0000c22d
    9770:	00023a40 	.word	0x00023a40
    9774:	e000e100 	.word	0xe000e100

00009778 <configure_timer_laser_timeout>:
void configure_timer_laser_timeout(void){
    9778:	b530      	push	{r4, r5, lr}
    977a:	b08f      	sub	sp, #60	; 0x3c
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    977c:	2300      	movs	r3, #0
    977e:	466a      	mov	r2, sp
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    9780:	2100      	movs	r1, #0
    9782:	2000      	movs	r0, #0
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    9784:	70d3      	strb	r3, [r2, #3]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    9786:	7193      	strb	r3, [r2, #6]
	config->run_in_standby             = false;
    9788:	7053      	strb	r3, [r2, #1]
	config->on_demand                  = false;
    978a:	7093      	strb	r3, [r2, #2]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    978c:	7213      	strb	r3, [r2, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    978e:	7253      	strb	r3, [r2, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    9790:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    9792:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    9794:	7313      	strb	r3, [r2, #12]
	config->oneshot                    = false;
    9796:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    9798:	7413      	strb	r3, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    979a:	7713      	strb	r3, [r2, #28]
	config->counter_16_bit.value                   = 0x0000;
    979c:	8513      	strh	r3, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    979e:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    97a0:	8593      	strh	r3, [r2, #44]	; 0x2c
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    97a2:	9008      	str	r0, [sp, #32]
    97a4:	9109      	str	r1, [sp, #36]	; 0x24
	config->double_buffering_enabled = false;
    97a6:	2200      	movs	r2, #0
    97a8:	4669      	mov	r1, sp
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    97aa:	9305      	str	r3, [sp, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    97ac:	9306      	str	r3, [sp, #24]
	config->double_buffering_enabled = false;
    97ae:	3334      	adds	r3, #52	; 0x34
    97b0:	54ca      	strb	r2, [r1, r3]
	config_tc.clock_prescaler =     TC_CLOCK_PRESCALER_DIV1024 ;//  TC_CLOCK_PRESCALER_DIV1024;
    97b2:	23e0      	movs	r3, #224	; 0xe0
    97b4:	00db      	lsls	r3, r3, #3
    97b6:	808b      	strh	r3, [r1, #4]
	config_tc.clock_source =		GCLK_FOR_LASER_TIMEOUT;
    97b8:	2302      	movs	r3, #2
	if(timer3_on_off){
    97ba:	4d24      	ldr	r5, [pc, #144]	; (984c <configure_timer_laser_timeout+0xd4>)
	config_tc.clock_source =		GCLK_FOR_LASER_TIMEOUT;
    97bc:	700b      	strb	r3, [r1, #0]
	config_tc.count_direction =		TC_COUNT_DIRECTION_DOWN;
    97be:	3b01      	subs	r3, #1
    97c0:	738b      	strb	r3, [r1, #14]
	config_tc.reload_action =		TC_RELOAD_ACTION_PRESC;
    97c2:	330f      	adds	r3, #15
    97c4:	71cb      	strb	r3, [r1, #7]
	if(timer3_on_off){
    97c6:	782b      	ldrb	r3, [r5, #0]
    97c8:	4c21      	ldr	r4, [pc, #132]	; (9850 <configure_timer_laser_timeout+0xd8>)
    97ca:	2b00      	cmp	r3, #0
    97cc:	d00b      	beq.n	97e6 <configure_timer_laser_timeout+0x6e>
    97ce:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    97d0:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    97d2:	2b00      	cmp	r3, #0
    97d4:	d1fc      	bne.n	97d0 <configure_timer_laser_timeout+0x58>
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    97d6:	2133      	movs	r1, #51	; 0x33
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    97d8:	2002      	movs	r0, #2
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    97da:	7211      	strb	r1, [r2, #8]
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
    97dc:	7291      	strb	r1, [r2, #10]
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    97de:	6811      	ldr	r1, [r2, #0]
    97e0:	4381      	bics	r1, r0
    97e2:	6011      	str	r1, [r2, #0]
		timer3_on_off = false;
    97e4:	702b      	strb	r3, [r5, #0]
	tc_init(&timer3, TC4, &config_tc);
    97e6:	466a      	mov	r2, sp
    97e8:	491a      	ldr	r1, [pc, #104]	; (9854 <configure_timer_laser_timeout+0xdc>)
    97ea:	0020      	movs	r0, r4
    97ec:	4b1a      	ldr	r3, [pc, #104]	; (9858 <configure_timer_laser_timeout+0xe0>)
    97ee:	4798      	blx	r3
    97f0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    97f2:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    97f4:	2b00      	cmp	r3, #0
    97f6:	d1fc      	bne.n	97f2 <configure_timer_laser_timeout+0x7a>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    97f8:	2102      	movs	r1, #2
    97fa:	6813      	ldr	r3, [r2, #0]
    97fc:	430b      	orrs	r3, r1
    97fe:	6013      	str	r3, [r2, #0]
	timer3_on_off = true;
    9800:	2301      	movs	r3, #1
    9802:	6822      	ldr	r2, [r4, #0]
    9804:	702b      	strb	r3, [r5, #0]
	return (tc_module->SYNCBUSY.reg);
    9806:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    9808:	2b00      	cmp	r3, #0
    980a:	d1fc      	bne.n	9806 <configure_timer_laser_timeout+0x8e>
	tc_set_count_value(&timer3, laser_timeout);
    980c:	21e1      	movs	r1, #225	; 0xe1
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_STOP_Val);
    980e:	3340      	adds	r3, #64	; 0x40
    9810:	7153      	strb	r3, [r2, #5]
    9812:	0089      	lsls	r1, r1, #2
    9814:	0020      	movs	r0, r4
    9816:	4b11      	ldr	r3, [pc, #68]	; (985c <configure_timer_laser_timeout+0xe4>)
    9818:	4798      	blx	r3
	tc_register_callback(
    981a:	2200      	movs	r2, #0
    981c:	4910      	ldr	r1, [pc, #64]	; (9860 <configure_timer_laser_timeout+0xe8>)
    981e:	0020      	movs	r0, r4
    9820:	4b10      	ldr	r3, [pc, #64]	; (9864 <configure_timer_laser_timeout+0xec>)
    9822:	4798      	blx	r3
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    9824:	6820      	ldr	r0, [r4, #0]
    9826:	4b10      	ldr	r3, [pc, #64]	; (9868 <configure_timer_laser_timeout+0xf0>)
    9828:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    982a:	4b10      	ldr	r3, [pc, #64]	; (986c <configure_timer_laser_timeout+0xf4>)
    982c:	5c1a      	ldrb	r2, [r3, r0]
    982e:	231f      	movs	r3, #31
    9830:	4013      	ands	r3, r2
    9832:	2201      	movs	r2, #1
    9834:	0011      	movs	r1, r2
    9836:	4099      	lsls	r1, r3
    9838:	4b0d      	ldr	r3, [pc, #52]	; (9870 <configure_timer_laser_timeout+0xf8>)
    983a:	6019      	str	r1, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
    983c:	2101      	movs	r1, #1
    983e:	7e63      	ldrb	r3, [r4, #25]
    9840:	430b      	orrs	r3, r1
    9842:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    9844:	6823      	ldr	r3, [r4, #0]
    9846:	725a      	strb	r2, [r3, #9]
}
    9848:	b00f      	add	sp, #60	; 0x3c
    984a:	bd30      	pop	{r4, r5, pc}
    984c:	20000e56 	.word	0x20000e56
    9850:	2000160c 	.word	0x2000160c
    9854:	43000800 	.word	0x43000800
    9858:	0000c26d 	.word	0x0000c26d
    985c:	0000c5d1 	.word	0x0000c5d1
    9860:	00009581 	.word	0x00009581
    9864:	0000c0d9 	.word	0x0000c0d9
    9868:	0000c22d 	.word	0x0000c22d
    986c:	00023a40 	.word	0x00023a40
    9870:	e000e100 	.word	0xe000e100

00009874 <configure_timer_longbutton>:
void configure_timer_longbutton(void){
    9874:	b530      	push	{r4, r5, lr}
    9876:	b08f      	sub	sp, #60	; 0x3c
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    9878:	2300      	movs	r3, #0
    987a:	466a      	mov	r2, sp
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    987c:	2100      	movs	r1, #0
    987e:	2000      	movs	r0, #0
	config->counter_16_bit.value                   = 0x0000;
    9880:	8513      	strh	r3, [r2, #40]	; 0x28
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    9882:	7193      	strb	r3, [r2, #6]
	config->run_in_standby             = false;
    9884:	7053      	strb	r3, [r2, #1]
	config->on_demand                  = false;
    9886:	7093      	strb	r3, [r2, #2]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    9888:	7213      	strb	r3, [r2, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    988a:	7253      	strb	r3, [r2, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    988c:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    988e:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    9890:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    9892:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    9894:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    9896:	7413      	strb	r3, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    9898:	7713      	strb	r3, [r2, #28]
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    989a:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    989c:	8593      	strh	r3, [r2, #44]	; 0x2c
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    989e:	9008      	str	r0, [sp, #32]
    98a0:	9109      	str	r1, [sp, #36]	; 0x24
	config->double_buffering_enabled = false;
    98a2:	2200      	movs	r2, #0
    98a4:	4669      	mov	r1, sp
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    98a6:	9305      	str	r3, [sp, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    98a8:	9306      	str	r3, [sp, #24]
	config->double_buffering_enabled = false;
    98aa:	3334      	adds	r3, #52	; 0x34
    98ac:	54ca      	strb	r2, [r1, r3]
	config_tc.counter_size    = TC_COUNTER_SIZE_8BIT;
    98ae:	3b30      	subs	r3, #48	; 0x30
    98b0:	70cb      	strb	r3, [r1, #3]
	config_tc.clock_prescaler =    TC_CLOCK_PRESCALER_DIV1024;//  TC_CLOCK_PRESCALER_DIV1024;
    98b2:	23e0      	movs	r3, #224	; 0xe0
    98b4:	00db      	lsls	r3, r3, #3
    98b6:	808b      	strh	r3, [r1, #4]
	config_tc.clock_source = GCLK_FOR_LONGBUTTON;
    98b8:	2302      	movs	r3, #2
	config_tc.counter_8_bit.period = 96;
    98ba:	2260      	movs	r2, #96	; 0x60
	config_tc.clock_source = GCLK_FOR_LONGBUTTON;
    98bc:	700b      	strb	r3, [r1, #0]
	if(timer1_on_off){
    98be:	4d23      	ldr	r5, [pc, #140]	; (994c <configure_timer_longbutton+0xd8>)
	config_tc.reload_action = TC_RELOAD_ACTION_PRESC;
    98c0:	330e      	adds	r3, #14
    98c2:	71cb      	strb	r3, [r1, #7]
	config_tc.counter_8_bit.period = 96;
    98c4:	3319      	adds	r3, #25
    98c6:	54ca      	strb	r2, [r1, r3]
	if(timer1_on_off){
    98c8:	782b      	ldrb	r3, [r5, #0]
    98ca:	4c21      	ldr	r4, [pc, #132]	; (9950 <configure_timer_longbutton+0xdc>)
    98cc:	2b00      	cmp	r3, #0
    98ce:	d00b      	beq.n	98e8 <configure_timer_longbutton+0x74>
    98d0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    98d2:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    98d4:	2b00      	cmp	r3, #0
    98d6:	d1fc      	bne.n	98d2 <configure_timer_longbutton+0x5e>
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    98d8:	2133      	movs	r1, #51	; 0x33
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    98da:	2002      	movs	r0, #2
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    98dc:	7211      	strb	r1, [r2, #8]
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
    98de:	7291      	strb	r1, [r2, #10]
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    98e0:	6811      	ldr	r1, [r2, #0]
    98e2:	4381      	bics	r1, r0
    98e4:	6011      	str	r1, [r2, #0]
		timer1_on_off = false;
    98e6:	702b      	strb	r3, [r5, #0]
	tc_init(&timer1, TC0, &config_tc);
    98e8:	466a      	mov	r2, sp
    98ea:	491a      	ldr	r1, [pc, #104]	; (9954 <configure_timer_longbutton+0xe0>)
    98ec:	0020      	movs	r0, r4
    98ee:	4b1a      	ldr	r3, [pc, #104]	; (9958 <configure_timer_longbutton+0xe4>)
    98f0:	4798      	blx	r3
    98f2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    98f4:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    98f6:	2b00      	cmp	r3, #0
    98f8:	d1fc      	bne.n	98f4 <configure_timer_longbutton+0x80>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    98fa:	2102      	movs	r1, #2
    98fc:	6813      	ldr	r3, [r2, #0]
    98fe:	430b      	orrs	r3, r1
    9900:	6013      	str	r3, [r2, #0]
	timer1_on_off = true;
    9902:	2301      	movs	r3, #1
    9904:	6822      	ldr	r2, [r4, #0]
    9906:	702b      	strb	r3, [r5, #0]
	return (tc_module->SYNCBUSY.reg);
    9908:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    990a:	2b00      	cmp	r3, #0
    990c:	d1fc      	bne.n	9908 <configure_timer_longbutton+0x94>
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_STOP_Val);
    990e:	3340      	adds	r3, #64	; 0x40
    9910:	7153      	strb	r3, [r2, #5]
	tc_set_count_value(&timer1, 0);
    9912:	2100      	movs	r1, #0
    9914:	0020      	movs	r0, r4
    9916:	4b11      	ldr	r3, [pc, #68]	; (995c <configure_timer_longbutton+0xe8>)
    9918:	4798      	blx	r3
	tc_register_callback(
    991a:	2200      	movs	r2, #0
    991c:	4910      	ldr	r1, [pc, #64]	; (9960 <configure_timer_longbutton+0xec>)
    991e:	0020      	movs	r0, r4
    9920:	4b10      	ldr	r3, [pc, #64]	; (9964 <configure_timer_longbutton+0xf0>)
    9922:	4798      	blx	r3
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    9924:	6820      	ldr	r0, [r4, #0]
    9926:	4b10      	ldr	r3, [pc, #64]	; (9968 <configure_timer_longbutton+0xf4>)
    9928:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    992a:	4b10      	ldr	r3, [pc, #64]	; (996c <configure_timer_longbutton+0xf8>)
    992c:	5c1a      	ldrb	r2, [r3, r0]
    992e:	231f      	movs	r3, #31
    9930:	4013      	ands	r3, r2
    9932:	2201      	movs	r2, #1
    9934:	0011      	movs	r1, r2
    9936:	4099      	lsls	r1, r3
    9938:	4b0d      	ldr	r3, [pc, #52]	; (9970 <configure_timer_longbutton+0xfc>)
    993a:	6019      	str	r1, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
    993c:	2101      	movs	r1, #1
    993e:	7e63      	ldrb	r3, [r4, #25]
    9940:	430b      	orrs	r3, r1
    9942:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    9944:	6823      	ldr	r3, [r4, #0]
    9946:	725a      	strb	r2, [r3, #9]
}
    9948:	b00f      	add	sp, #60	; 0x3c
    994a:	bd30      	pop	{r4, r5, pc}
    994c:	20000e54 	.word	0x20000e54
    9950:	200015f0 	.word	0x200015f0
    9954:	42002000 	.word	0x42002000
    9958:	0000c26d 	.word	0x0000c26d
    995c:	0000c5d1 	.word	0x0000c5d1
    9960:	00009549 	.word	0x00009549
    9964:	0000c0d9 	.word	0x0000c0d9
    9968:	0000c22d 	.word	0x0000c22d
    996c:	00023a40 	.word	0x00023a40
    9970:	e000e100 	.word	0xe000e100

00009974 <configure_timers>:
void configure_timers(enum STATE timer_state){
    9974:	b510      	push	{r4, lr}
	switch (timer_state)
    9976:	2804      	cmp	r0, #4
    9978:	d008      	beq.n	998c <configure_timers+0x18>
    997a:	2805      	cmp	r0, #5
    997c:	d105      	bne.n	998a <configure_timers+0x16>
			configure_timer_1s();
    997e:	4b19      	ldr	r3, [pc, #100]	; (99e4 <configure_timers+0x70>)
    9980:	4798      	blx	r3
			configure_timer_laser_timeout();
    9982:	4b19      	ldr	r3, [pc, #100]	; (99e8 <configure_timers+0x74>)
    9984:	4798      	blx	r3
			configure_timer_longbutton();			
    9986:	4b19      	ldr	r3, [pc, #100]	; (99ec <configure_timers+0x78>)
    9988:	4798      	blx	r3
}
    998a:	bd10      	pop	{r4, pc}
    998c:	4b18      	ldr	r3, [pc, #96]	; (99f0 <configure_timers+0x7c>)
    998e:	681a      	ldr	r2, [r3, #0]
	return (tc_module->SYNCBUSY.reg);
    9990:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    9992:	2b00      	cmp	r3, #0
    9994:	d1fc      	bne.n	9990 <configure_timers+0x1c>
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    9996:	2133      	movs	r1, #51	; 0x33
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    9998:	2002      	movs	r0, #2
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    999a:	7211      	strb	r1, [r2, #8]
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
    999c:	7291      	strb	r1, [r2, #10]
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    999e:	6811      	ldr	r1, [r2, #0]
    99a0:	4381      	bics	r1, r0
    99a2:	6011      	str	r1, [r2, #0]
			timer1_on_off = false;
    99a4:	4a13      	ldr	r2, [pc, #76]	; (99f4 <configure_timers+0x80>)
    99a6:	7013      	strb	r3, [r2, #0]
    99a8:	4b13      	ldr	r3, [pc, #76]	; (99f8 <configure_timers+0x84>)
    99aa:	681a      	ldr	r2, [r3, #0]
	return (tc_module->SYNCBUSY.reg);
    99ac:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    99ae:	2b00      	cmp	r3, #0
    99b0:	d1fc      	bne.n	99ac <configure_timers+0x38>
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    99b2:	2133      	movs	r1, #51	; 0x33
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    99b4:	2002      	movs	r0, #2
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    99b6:	7211      	strb	r1, [r2, #8]
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
    99b8:	7291      	strb	r1, [r2, #10]
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    99ba:	6811      	ldr	r1, [r2, #0]
    99bc:	4381      	bics	r1, r0
    99be:	6011      	str	r1, [r2, #0]
			timer2_on_off = false;
    99c0:	4a0e      	ldr	r2, [pc, #56]	; (99fc <configure_timers+0x88>)
    99c2:	7013      	strb	r3, [r2, #0]
    99c4:	4b0e      	ldr	r3, [pc, #56]	; (9a00 <configure_timers+0x8c>)
    99c6:	681a      	ldr	r2, [r3, #0]
	return (tc_module->SYNCBUSY.reg);
    99c8:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    99ca:	2b00      	cmp	r3, #0
    99cc:	d1fc      	bne.n	99c8 <configure_timers+0x54>
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    99ce:	2133      	movs	r1, #51	; 0x33
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    99d0:	2002      	movs	r0, #2
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    99d2:	7211      	strb	r1, [r2, #8]
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
    99d4:	7291      	strb	r1, [r2, #10]
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    99d6:	6811      	ldr	r1, [r2, #0]
    99d8:	4381      	bics	r1, r0
    99da:	6011      	str	r1, [r2, #0]
			timer3_on_off = false;
    99dc:	4a09      	ldr	r2, [pc, #36]	; (9a04 <configure_timers+0x90>)
    99de:	7013      	strb	r3, [r2, #0]
}
    99e0:	e7d3      	b.n	998a <configure_timers+0x16>
    99e2:	46c0      	nop			; (mov r8, r8)
    99e4:	0000967d 	.word	0x0000967d
    99e8:	00009779 	.word	0x00009779
    99ec:	00009875 	.word	0x00009875
    99f0:	200015f0 	.word	0x200015f0
    99f4:	20000e54 	.word	0x20000e54
    99f8:	2000159c 	.word	0x2000159c
    99fc:	20000e55 	.word	0x20000e55
    9a00:	2000160c 	.word	0x2000160c
    9a04:	20000e56 	.word	0x20000e56

00009a08 <laser_timeout_timer>:



//*******************************
void laser_timeout_timer(bool on_off)
{
    9a08:	b510      	push	{r4, lr}
	if (on_off){
    9a0a:	2800      	cmp	r0, #0
    9a0c:	d10b      	bne.n	9a26 <laser_timeout_timer+0x1e>
    9a0e:	480e      	ldr	r0, [pc, #56]	; (9a48 <laser_timeout_timer+0x40>)
    9a10:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    9a12:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    9a14:	2b00      	cmp	r3, #0
    9a16:	d1fc      	bne.n	9a12 <laser_timeout_timer+0xa>
		tc_set_count_value(&timer3, laser_timeout);
		tc_start_counter(&timer3);
		
	}else{
		tc_stop_counter(&timer3);
		tc_set_count_value(&timer3, laser_timeout);
    9a18:	21e1      	movs	r1, #225	; 0xe1
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_STOP_Val);
    9a1a:	3340      	adds	r3, #64	; 0x40
    9a1c:	7153      	strb	r3, [r2, #5]
    9a1e:	0089      	lsls	r1, r1, #2
    9a20:	4b0a      	ldr	r3, [pc, #40]	; (9a4c <laser_timeout_timer+0x44>)
    9a22:	4798      	blx	r3
	
	}


}
    9a24:	bd10      	pop	{r4, pc}
		tc_set_count_value(&timer3, laser_timeout);
    9a26:	21e1      	movs	r1, #225	; 0xe1
    9a28:	4c07      	ldr	r4, [pc, #28]	; (9a48 <laser_timeout_timer+0x40>)
    9a2a:	4b08      	ldr	r3, [pc, #32]	; (9a4c <laser_timeout_timer+0x44>)
    9a2c:	0089      	lsls	r1, r1, #2
    9a2e:	0020      	movs	r0, r4
    9a30:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    9a32:	6823      	ldr	r3, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    9a34:	691a      	ldr	r2, [r3, #16]
	while (tc_is_syncing(module_inst)) {
    9a36:	2a00      	cmp	r2, #0
    9a38:	d1fc      	bne.n	9a34 <laser_timeout_timer+0x2c>
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    9a3a:	711a      	strb	r2, [r3, #4]
	return (tc_module->SYNCBUSY.reg);
    9a3c:	691a      	ldr	r2, [r3, #16]
	while (tc_is_syncing(module_inst)) {
    9a3e:	2a00      	cmp	r2, #0
    9a40:	d1fc      	bne.n	9a3c <laser_timeout_timer+0x34>
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_RETRIGGER_Val);
    9a42:	3220      	adds	r2, #32
    9a44:	715a      	strb	r2, [r3, #5]
    9a46:	e7ed      	b.n	9a24 <laser_timeout_timer+0x1c>
    9a48:	2000160c 	.word	0x2000160c
    9a4c:	0000c5d1 	.word	0x0000c5d1

00009a50 <sd_mmc_init>:
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    9a50:	2204      	movs	r2, #4
    9a52:	4b03      	ldr	r3, [pc, #12]	; (9a60 <sd_mmc_init+0x10>)
    9a54:	729a      	strb	r2, [r3, #10]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
    9a56:	4b03      	ldr	r3, [pc, #12]	; (9a64 <sd_mmc_init+0x14>)
    9a58:	32fb      	adds	r2, #251	; 0xfb
    9a5a:	701a      	strb	r2, [r3, #0]
	//driver_init(); //  Kfausnight 20200721.  Not needed; SPI initiated in comm.c code
}
    9a5c:	4770      	bx	lr
    9a5e:	46c0      	nop			; (mov r8, r8)
    9a60:	20000e5c 	.word	0x20000e5c
    9a64:	20000e80 	.word	0x20000e80

00009a68 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
    9a68:	b5f0      	push	{r4, r5, r6, r7, lr}
    9a6a:	4645      	mov	r5, r8
    9a6c:	46de      	mov	lr, fp
    9a6e:	4657      	mov	r7, sl
    9a70:	464e      	mov	r6, r9
    9a72:	b5e0      	push	{r5, r6, r7, lr}
    9a74:	0005      	movs	r5, r0
    9a76:	b087      	sub	sp, #28
	if (slot >= SD_MMC_MEM_CNT) {
    9a78:	2800      	cmp	r0, #0
    9a7a:	d00c      	beq.n	9a96 <sd_mmc_check+0x2e>
    9a7c:	4c6f      	ldr	r4, [pc, #444]	; (9c3c <sd_mmc_check+0x1d4>)
		return SD_MMC_ERR_SLOT;
    9a7e:	2504      	movs	r5, #4
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    9a80:	7823      	ldrb	r3, [r4, #0]
    9a82:	2b00      	cmp	r3, #0
    9a84:	d023      	beq.n	9ace <sd_mmc_check+0x66>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
    9a86:	0028      	movs	r0, r5
    9a88:	b007      	add	sp, #28
    9a8a:	bc3c      	pop	{r2, r3, r4, r5}
    9a8c:	4690      	mov	r8, r2
    9a8e:	4699      	mov	r9, r3
    9a90:	46a2      	mov	sl, r4
    9a92:	46ab      	mov	fp, r5
    9a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    9a96:	4e6a      	ldr	r6, [pc, #424]	; (9c40 <sd_mmc_check+0x1d8>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    9a98:	7ab3      	ldrb	r3, [r6, #10]
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    9a9a:	3b03      	subs	r3, #3
    9a9c:	2b01      	cmp	r3, #1
    9a9e:	d949      	bls.n	9b34 <sd_mmc_check+0xcc>
    9aa0:	7fb3      	ldrb	r3, [r6, #30]
    9aa2:	6831      	ldr	r1, [r6, #0]
    9aa4:	1e58      	subs	r0, r3, #1
    9aa6:	4183      	sbcs	r3, r0
    9aa8:	7b72      	ldrb	r2, [r6, #13]
    9aaa:	b2db      	uxtb	r3, r3
	sd_mmc_slot_sel = slot;
    9aac:	2000      	movs	r0, #0
    9aae:	4c63      	ldr	r4, [pc, #396]	; (9c3c <sd_mmc_check+0x1d4>)
    9ab0:	4680      	mov	r8, r0
    9ab2:	7020      	strb	r0, [r4, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
    9ab4:	4863      	ldr	r0, [pc, #396]	; (9c44 <sd_mmc_check+0x1dc>)
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    9ab6:	4f64      	ldr	r7, [pc, #400]	; (9c48 <sd_mmc_check+0x1e0>)
	sd_mmc_card = &sd_mmc_cards[slot];
    9ab8:	6006      	str	r6, [r0, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    9aba:	2000      	movs	r0, #0
    9abc:	47b8      	blx	r7
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
    9abe:	7ab3      	ldrb	r3, [r6, #10]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    9ac0:	46b9      	mov	r9, r7
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
    9ac2:	2b02      	cmp	r3, #2
    9ac4:	d007      	beq.n	9ad6 <sd_mmc_check+0x6e>
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    9ac6:	7823      	ldrb	r3, [r4, #0]
    9ac8:	2500      	movs	r5, #0
    9aca:	2b00      	cmp	r3, #0
    9acc:	d1db      	bne.n	9a86 <sd_mmc_check+0x1e>
		driver_deselect_device(sd_mmc_slot_sel);
    9ace:	2000      	movs	r0, #0
    9ad0:	4b5e      	ldr	r3, [pc, #376]	; (9c4c <sd_mmc_check+0x1e4>)
    9ad2:	4798      	blx	r3
    9ad4:	e7d7      	b.n	9a86 <sd_mmc_check+0x1e>
	sd_mmc_card->type = CARD_TYPE_SD;
    9ad6:	2201      	movs	r2, #1
    9ad8:	4b5a      	ldr	r3, [pc, #360]	; (9c44 <sd_mmc_check+0x1dc>)
    9ada:	681b      	ldr	r3, [r3, #0]
    9adc:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
    9ade:	4642      	mov	r2, r8
    9ae0:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
    9ae2:	4642      	mov	r2, r8
    9ae4:	811a      	strh	r2, [r3, #8]
	spi_select_slave(&spi_main, &slave_SD, false);	//Added by KFausnight
    9ae6:	4b5a      	ldr	r3, [pc, #360]	; (9c50 <sd_mmc_check+0x1e8>)
    9ae8:	2200      	movs	r2, #0
    9aea:	469b      	mov	fp, r3
    9aec:	4b59      	ldr	r3, [pc, #356]	; (9c54 <sd_mmc_check+0x1ec>)
    9aee:	4659      	mov	r1, fp
    9af0:	469a      	mov	sl, r3
    9af2:	0018      	movs	r0, r3
    9af4:	4b58      	ldr	r3, [pc, #352]	; (9c58 <sd_mmc_check+0x1f0>)
    9af6:	4698      	mov	r8, r3
    9af8:	4798      	blx	r3
	delay_ms(1);//Added by KFausnight
    9afa:	4e58      	ldr	r6, [pc, #352]	; (9c5c <sd_mmc_check+0x1f4>)
    9afc:	2001      	movs	r0, #1
    9afe:	47b0      	blx	r6
	driver_send_clock();
    9b00:	4b57      	ldr	r3, [pc, #348]	; (9c60 <sd_mmc_check+0x1f8>)
    9b02:	4798      	blx	r3
	delay_ms(1);//Added by KFausnight
    9b04:	2001      	movs	r0, #1
    9b06:	47b0      	blx	r6
	spi_select_slave(&spi_main, &slave_SD, true);	//Added by KFausnight
    9b08:	4659      	mov	r1, fp
    9b0a:	2201      	movs	r2, #1
    9b0c:	4650      	mov	r0, sl
    9b0e:	47c0      	blx	r8
	delay_ms(1);//Added by KFausnight
    9b10:	2001      	movs	r0, #1
    9b12:	47b0      	blx	r6
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    9b14:	2088      	movs	r0, #136	; 0x88
    9b16:	2100      	movs	r1, #0
    9b18:	0140      	lsls	r0, r0, #5
    9b1a:	4e52      	ldr	r6, [pc, #328]	; (9c64 <sd_mmc_check+0x1fc>)
    9b1c:	47b0      	blx	r6
    9b1e:	2800      	cmp	r0, #0
    9b20:	d112      	bne.n	9b48 <sd_mmc_check+0xe0>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
    9b22:	2203      	movs	r2, #3
    9b24:	4b47      	ldr	r3, [pc, #284]	; (9c44 <sd_mmc_check+0x1dc>)
	return SD_MMC_ERR_UNUSABLE;
    9b26:	2503      	movs	r5, #3
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
    9b28:	681b      	ldr	r3, [r3, #0]
    9b2a:	729a      	strb	r2, [r3, #10]
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    9b2c:	7823      	ldrb	r3, [r4, #0]
    9b2e:	2b00      	cmp	r3, #0
    9b30:	d1a9      	bne.n	9a86 <sd_mmc_check+0x1e>
    9b32:	e7cc      	b.n	9ace <sd_mmc_check+0x66>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    9b34:	2302      	movs	r3, #2
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    9b36:	494c      	ldr	r1, [pc, #304]	; (9c68 <sd_mmc_check+0x200>)
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    9b38:	72b3      	strb	r3, [r6, #10]
		sd_mmc_cards[slot].bus_width = 1;
    9b3a:	3b01      	subs	r3, #1
    9b3c:	7373      	strb	r3, [r6, #13]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    9b3e:	6031      	str	r1, [r6, #0]
		sd_mmc_cards[slot].high_speed = 0;
    9b40:	77b0      	strb	r0, [r6, #30]
    9b42:	2300      	movs	r3, #0
    9b44:	2201      	movs	r2, #1
    9b46:	e7b1      	b.n	9aac <sd_mmc_check+0x44>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
    9b48:	23d5      	movs	r3, #213	; 0xd5
    9b4a:	005b      	lsls	r3, r3, #1
    9b4c:	0019      	movs	r1, r3
    9b4e:	4847      	ldr	r0, [pc, #284]	; (9c6c <sd_mmc_check+0x204>)
    9b50:	4698      	mov	r8, r3
    9b52:	47b0      	blx	r6
    9b54:	2800      	cmp	r0, #0
    9b56:	d138      	bne.n	9bca <sd_mmc_check+0x162>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    9b58:	4b3a      	ldr	r3, [pc, #232]	; (9c44 <sd_mmc_check+0x1dc>)
    9b5a:	6819      	ldr	r1, [r3, #0]
    9b5c:	7aca      	ldrb	r2, [r1, #11]
    9b5e:	07d3      	lsls	r3, r2, #31
    9b60:	d442      	bmi.n	9be8 <sd_mmc_check+0x180>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    9b62:	2309      	movs	r3, #9
    9b64:	4013      	ands	r3, r2
    9b66:	2b01      	cmp	r3, #1
    9b68:	d11e      	bne.n	9ba8 <sd_mmc_check+0x140>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    9b6a:	2180      	movs	r1, #128	; 0x80
    9b6c:	4840      	ldr	r0, [pc, #256]	; (9c70 <sd_mmc_check+0x208>)
    9b6e:	0089      	lsls	r1, r1, #2
    9b70:	47b0      	blx	r6
    9b72:	2800      	cmp	r0, #0
    9b74:	d0d5      	beq.n	9b22 <sd_mmc_check+0xba>
    9b76:	4b33      	ldr	r3, [pc, #204]	; (9c44 <sd_mmc_check+0x1dc>)
    9b78:	6819      	ldr	r1, [r3, #0]
    9b7a:	7acb      	ldrb	r3, [r1, #11]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    9b7c:	07db      	lsls	r3, r3, #31
    9b7e:	d513      	bpl.n	9ba8 <sd_mmc_check+0x140>
			if (!(driver_get_response() & 0xFF)) {
    9b80:	4b3c      	ldr	r3, [pc, #240]	; (9c74 <sd_mmc_check+0x20c>)
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    9b82:	4d3d      	ldr	r5, [pc, #244]	; (9c78 <sd_mmc_check+0x210>)
			if (!(driver_get_response() & 0xFF)) {
    9b84:	469a      	mov	sl, r3
    9b86:	23ff      	movs	r3, #255	; 0xff
    9b88:	4698      	mov	r8, r3
    9b8a:	e002      	b.n	9b92 <sd_mmc_check+0x12a>
    9b8c:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
    9b8e:	2d00      	cmp	r5, #0
    9b90:	d0c7      	beq.n	9b22 <sd_mmc_check+0xba>
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
    9b92:	2100      	movs	r1, #0
    9b94:	4839      	ldr	r0, [pc, #228]	; (9c7c <sd_mmc_check+0x214>)
    9b96:	47b0      	blx	r6
    9b98:	2800      	cmp	r0, #0
    9b9a:	d0c2      	beq.n	9b22 <sd_mmc_check+0xba>
			if (!(driver_get_response() & 0xFF)) {
    9b9c:	47d0      	blx	sl
    9b9e:	4643      	mov	r3, r8
    9ba0:	4203      	tst	r3, r0
    9ba2:	d1f3      	bne.n	9b8c <sd_mmc_check+0x124>
    9ba4:	4b27      	ldr	r3, [pc, #156]	; (9c44 <sd_mmc_check+0x1dc>)
    9ba6:	6819      	ldr	r1, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    9ba8:	7f8b      	ldrb	r3, [r1, #30]
    9baa:	7820      	ldrb	r0, [r4, #0]
    9bac:	1e5a      	subs	r2, r3, #1
    9bae:	4193      	sbcs	r3, r2
    9bb0:	7b4a      	ldrb	r2, [r1, #13]
    9bb2:	b2db      	uxtb	r3, r3
    9bb4:	6809      	ldr	r1, [r1, #0]
    9bb6:	47c8      	blx	r9
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
    9bb8:	2200      	movs	r2, #0
    9bba:	4b22      	ldr	r3, [pc, #136]	; (9c44 <sd_mmc_check+0x1dc>)
    9bbc:	681b      	ldr	r3, [r3, #0]
    9bbe:	729a      	strb	r2, [r3, #10]
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    9bc0:	7823      	ldrb	r3, [r4, #0]
    9bc2:	2b00      	cmp	r3, #0
    9bc4:	d00b      	beq.n	9bde <sd_mmc_check+0x176>
		return SD_MMC_INIT_ONGOING;
    9bc6:	2501      	movs	r5, #1
    9bc8:	e75d      	b.n	9a86 <sd_mmc_check+0x1e>
	resp = driver_get_response();
    9bca:	4b2a      	ldr	r3, [pc, #168]	; (9c74 <sd_mmc_check+0x20c>)
    9bcc:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
    9bce:	1c43      	adds	r3, r0, #1
    9bd0:	d0c2      	beq.n	9b58 <sd_mmc_check+0xf0>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
    9bd2:	0500      	lsls	r0, r0, #20
    9bd4:	0d00      	lsrs	r0, r0, #20
	*v2 = 1;
    9bd6:	2501      	movs	r5, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
    9bd8:	4540      	cmp	r0, r8
    9bda:	d1a2      	bne.n	9b22 <sd_mmc_check+0xba>
    9bdc:	e7bc      	b.n	9b58 <sd_mmc_check+0xf0>
		driver_deselect_device(sd_mmc_slot_sel);
    9bde:	2000      	movs	r0, #0
    9be0:	4b1a      	ldr	r3, [pc, #104]	; (9c4c <sd_mmc_check+0x1e4>)
    9be2:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
    9be4:	2501      	movs	r5, #1
    9be6:	e74e      	b.n	9a86 <sd_mmc_check+0x1e>
    9be8:	1e6b      	subs	r3, r5, #1
    9bea:	419d      	sbcs	r5, r3
    9bec:	07ab      	lsls	r3, r5, #30
    9bee:	4698      	mov	r8, r3
		resp = driver_get_response();
    9bf0:	4b20      	ldr	r3, [pc, #128]	; (9c74 <sd_mmc_check+0x20c>)
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    9bf2:	4d23      	ldr	r5, [pc, #140]	; (9c80 <sd_mmc_check+0x218>)
		resp = driver_get_response();
    9bf4:	469a      	mov	sl, r3
    9bf6:	e00b      	b.n	9c10 <sd_mmc_check+0x1a8>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
    9bf8:	4641      	mov	r1, r8
    9bfa:	4822      	ldr	r0, [pc, #136]	; (9c84 <sd_mmc_check+0x21c>)
    9bfc:	47b0      	blx	r6
    9bfe:	2800      	cmp	r0, #0
    9c00:	d00b      	beq.n	9c1a <sd_mmc_check+0x1b2>
		resp = driver_get_response();
    9c02:	47d0      	blx	sl
		if (!(resp & R1_SPI_IDLE)) {
    9c04:	07c3      	lsls	r3, r0, #31
    9c06:	d400      	bmi.n	9c0a <sd_mmc_check+0x1a2>
    9c08:	e125      	b.n	9e56 <sd_mmc_check+0x3ee>
    9c0a:	3d01      	subs	r5, #1
		if (retry-- == 0) {
    9c0c:	2d00      	cmp	r5, #0
    9c0e:	d004      	beq.n	9c1a <sd_mmc_check+0x1b2>
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
    9c10:	2100      	movs	r1, #0
    9c12:	481d      	ldr	r0, [pc, #116]	; (9c88 <sd_mmc_check+0x220>)
    9c14:	47b0      	blx	r6
    9c16:	2800      	cmp	r0, #0
    9c18:	d1ee      	bne.n	9bf8 <sd_mmc_check+0x190>
			sd_mmc_card->type = CARD_TYPE_MMC;
    9c1a:	2302      	movs	r3, #2
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    9c1c:	2088      	movs	r0, #136	; 0x88
			sd_mmc_card->type = CARD_TYPE_MMC;
    9c1e:	4a09      	ldr	r2, [pc, #36]	; (9c44 <sd_mmc_check+0x1dc>)
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    9c20:	2100      	movs	r1, #0
			sd_mmc_card->type = CARD_TYPE_MMC;
    9c22:	6812      	ldr	r2, [r2, #0]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    9c24:	0140      	lsls	r0, r0, #5
			sd_mmc_card->type = CARD_TYPE_MMC;
    9c26:	72d3      	strb	r3, [r2, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    9c28:	47b0      	blx	r6
    9c2a:	2800      	cmp	r0, #0
    9c2c:	d100      	bne.n	9c30 <sd_mmc_check+0x1c8>
    9c2e:	e778      	b.n	9b22 <sd_mmc_check+0xba>
		resp = driver_get_response();
    9c30:	4b10      	ldr	r3, [pc, #64]	; (9c74 <sd_mmc_check+0x20c>)
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    9c32:	4d13      	ldr	r5, [pc, #76]	; (9c80 <sd_mmc_check+0x218>)
		resp = driver_get_response();
    9c34:	4698      	mov	r8, r3
		if (!(resp & R1_SPI_IDLE)) {
    9c36:	2301      	movs	r3, #1
    9c38:	469a      	mov	sl, r3
    9c3a:	e02b      	b.n	9c94 <sd_mmc_check+0x22c>
    9c3c:	20000e80 	.word	0x20000e80
    9c40:	20000e5c 	.word	0x20000e5c
    9c44:	20000e58 	.word	0x20000e58
    9c48:	0000a471 	.word	0x0000a471
    9c4c:	0000a495 	.word	0x0000a495
    9c50:	20001118 	.word	0x20001118
    9c54:	20001134 	.word	0x20001134
    9c58:	00014a29 	.word	0x00014a29
    9c5c:	000151d9 	.word	0x000151d9
    9c60:	0000a4b9 	.word	0x0000a4b9
    9c64:	0000aa35 	.word	0x0000aa35
    9c68:	00061a80 	.word	0x00061a80
    9c6c:	00005508 	.word	0x00005508
    9c70:	00001110 	.word	0x00001110
    9c74:	0000aa4d 	.word	0x0000aa4d
    9c78:	00030d41 	.word	0x00030d41
    9c7c:	00001b0d 	.word	0x00001b0d
    9c80:	00001bef 	.word	0x00001bef
    9c84:	00001129 	.word	0x00001129
    9c88:	00001137 	.word	0x00001137
    9c8c:	3d01      	subs	r5, #1
		if (retry-- == 0) {
    9c8e:	2d00      	cmp	r5, #0
    9c90:	d100      	bne.n	9c94 <sd_mmc_check+0x22c>
    9c92:	e746      	b.n	9b22 <sd_mmc_check+0xba>
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
    9c94:	2100      	movs	r1, #0
    9c96:	48d8      	ldr	r0, [pc, #864]	; (9ff8 <sd_mmc_check+0x590>)
    9c98:	47b0      	blx	r6
    9c9a:	2800      	cmp	r0, #0
    9c9c:	d100      	bne.n	9ca0 <sd_mmc_check+0x238>
    9c9e:	e740      	b.n	9b22 <sd_mmc_check+0xba>
		resp = driver_get_response();
    9ca0:	47c0      	blx	r8
		if (!(resp & R1_SPI_IDLE)) {
    9ca2:	4653      	mov	r3, sl
    9ca4:	4203      	tst	r3, r0
    9ca6:	d1f1      	bne.n	9c8c <sd_mmc_check+0x224>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    9ca8:	2100      	movs	r1, #0
    9caa:	48d4      	ldr	r0, [pc, #848]	; (9ffc <sd_mmc_check+0x594>)
    9cac:	47b0      	blx	r6
    9cae:	2800      	cmp	r0, #0
    9cb0:	d100      	bne.n	9cb4 <sd_mmc_check+0x24c>
    9cb2:	e736      	b.n	9b22 <sd_mmc_check+0xba>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
    9cb4:	47c0      	blx	r8
    9cb6:	23c0      	movs	r3, #192	; 0xc0
    9cb8:	05db      	lsls	r3, r3, #23
    9cba:	4018      	ands	r0, r3
    9cbc:	2380      	movs	r3, #128	; 0x80
    9cbe:	05db      	lsls	r3, r3, #23
    9cc0:	4298      	cmp	r0, r3
    9cc2:	d105      	bne.n	9cd0 <sd_mmc_check+0x268>
		sd_mmc_card->type |= CARD_TYPE_HC;
    9cc4:	4bce      	ldr	r3, [pc, #824]	; (a000 <sd_mmc_check+0x598>)
    9cc6:	681a      	ldr	r2, [r3, #0]
    9cc8:	2308      	movs	r3, #8
    9cca:	7ad1      	ldrb	r1, [r2, #11]
    9ccc:	430b      	orrs	r3, r1
    9cce:	72d3      	strb	r3, [r2, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    9cd0:	2100      	movs	r1, #0
    9cd2:	48cc      	ldr	r0, [pc, #816]	; (a004 <sd_mmc_check+0x59c>)
    9cd4:	47b0      	blx	r6
    9cd6:	2800      	cmp	r0, #0
    9cd8:	d100      	bne.n	9cdc <sd_mmc_check+0x274>
    9cda:	e722      	b.n	9b22 <sd_mmc_check+0xba>
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
    9cdc:	2501      	movs	r5, #1
    9cde:	4bc8      	ldr	r3, [pc, #800]	; (a000 <sd_mmc_check+0x598>)
    9ce0:	4fc9      	ldr	r7, [pc, #804]	; (a008 <sd_mmc_check+0x5a0>)
    9ce2:	681b      	ldr	r3, [r3, #0]
    9ce4:	2210      	movs	r2, #16
    9ce6:	8919      	ldrh	r1, [r3, #8]
    9ce8:	48c8      	ldr	r0, [pc, #800]	; (a00c <sd_mmc_check+0x5a4>)
    9cea:	0409      	lsls	r1, r1, #16
    9cec:	9500      	str	r5, [sp, #0]
    9cee:	002b      	movs	r3, r5
    9cf0:	46ba      	mov	sl, r7
    9cf2:	47b8      	blx	r7
    9cf4:	2800      	cmp	r0, #0
    9cf6:	d100      	bne.n	9cfa <sd_mmc_check+0x292>
    9cf8:	e713      	b.n	9b22 <sd_mmc_check+0xba>
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
    9cfa:	4bc1      	ldr	r3, [pc, #772]	; (a000 <sd_mmc_check+0x598>)
    9cfc:	0029      	movs	r1, r5
    9cfe:	6818      	ldr	r0, [r3, #0]
    9d00:	4bc3      	ldr	r3, [pc, #780]	; (a010 <sd_mmc_check+0x5a8>)
    9d02:	300e      	adds	r0, #14
    9d04:	4798      	blx	r3
    9d06:	2800      	cmp	r0, #0
    9d08:	d100      	bne.n	9d0c <sd_mmc_check+0x2a4>
    9d0a:	e70a      	b.n	9b22 <sd_mmc_check+0xba>
	return driver_wait_end_of_read_blocks();
    9d0c:	4bc1      	ldr	r3, [pc, #772]	; (a014 <sd_mmc_check+0x5ac>)
    9d0e:	4798      	blx	r3
	if (!sd_mmc_cmd9_spi()) {
    9d10:	2800      	cmp	r0, #0
    9d12:	d100      	bne.n	9d16 <sd_mmc_check+0x2ae>
    9d14:	e705      	b.n	9b22 <sd_mmc_check+0xba>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
    9d16:	4bba      	ldr	r3, [pc, #744]	; (a000 <sd_mmc_check+0x598>)
    9d18:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    9d1a:	7b93      	ldrb	r3, [r2, #14]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
    9d1c:	069b      	lsls	r3, r3, #26
    9d1e:	0f1b      	lsrs	r3, r3, #28
    9d20:	2b02      	cmp	r3, #2
    9d22:	d100      	bne.n	9d26 <sd_mmc_check+0x2be>
    9d24:	e160      	b.n	9fe8 <sd_mmc_check+0x580>
    9d26:	d800      	bhi.n	9d2a <sd_mmc_check+0x2c2>
    9d28:	e194      	b.n	a054 <sd_mmc_check+0x5ec>
    9d2a:	2b03      	cmp	r3, #3
    9d2c:	d100      	bne.n	9d30 <sd_mmc_check+0x2c8>
    9d2e:	e18e      	b.n	a04e <sd_mmc_check+0x5e6>
    9d30:	2b04      	cmp	r3, #4
    9d32:	d000      	beq.n	9d36 <sd_mmc_check+0x2ce>
    9d34:	e155      	b.n	9fe2 <sd_mmc_check+0x57a>
		sd_mmc_card->version = CARD_VER_MMC_4;
    9d36:	2340      	movs	r3, #64	; 0x40
    9d38:	7313      	strb	r3, [r2, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    9d3a:	2507      	movs	r5, #7
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    9d3c:	7c53      	ldrb	r3, [r2, #17]
	sd_mmc_card->clock = unit * mul * 1000;
    9d3e:	4fb6      	ldr	r7, [pc, #728]	; (a018 <sd_mmc_check+0x5b0>)
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
    9d40:	08d9      	lsrs	r1, r3, #3
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    9d42:	402b      	ands	r3, r5
    9d44:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
    9d46:	59db      	ldr	r3, [r3, r7]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
    9d48:	200f      	movs	r0, #15
	sd_mmc_card->clock = unit * mul * 1000;
    9d4a:	469c      	mov	ip, r3
    9d4c:	23fa      	movs	r3, #250	; 0xfa
    9d4e:	4667      	mov	r7, ip
    9d50:	009b      	lsls	r3, r3, #2
    9d52:	437b      	muls	r3, r7
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
    9d54:	4001      	ands	r1, r0
	sd_mmc_card->clock = unit * mul * 1000;
    9d56:	4fb1      	ldr	r7, [pc, #708]	; (a01c <sd_mmc_check+0x5b4>)
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
    9d58:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
    9d5a:	59c9      	ldr	r1, [r1, r7]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    9d5c:	7d17      	ldrb	r7, [r2, #20]
    9d5e:	434b      	muls	r3, r1
    9d60:	6013      	str	r3, [r2, #0]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    9d62:	7d53      	ldrb	r3, [r2, #21]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    9d64:	7d91      	ldrb	r1, [r2, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    9d66:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    9d68:	02bf      	lsls	r7, r7, #10
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    9d6a:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    9d6c:	433b      	orrs	r3, r7
    9d6e:	430b      	orrs	r3, r1
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
    9d70:	49ab      	ldr	r1, [pc, #684]	; (a020 <sd_mmc_check+0x5b8>)
	value &=  ((uint32_t)1 << size) - 1;
    9d72:	051b      	lsls	r3, r3, #20
    9d74:	0d1b      	lsrs	r3, r3, #20
    9d76:	428b      	cmp	r3, r1
    9d78:	d00f      	beq.n	9d9a <sd_mmc_check+0x332>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    9d7a:	7e11      	ldrb	r1, [r2, #24]
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    9d7c:	3301      	adds	r3, #1
    9d7e:	4129      	asrs	r1, r5
    9d80:	468c      	mov	ip, r1
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    9d82:	4667      	mov	r7, ip
    9d84:	7dd1      	ldrb	r1, [r2, #23]
    9d86:	0049      	lsls	r1, r1, #1
    9d88:	4339      	orrs	r1, r7
	value &=  ((uint32_t)1 << size) - 1;
    9d8a:	4029      	ands	r1, r5
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    9d8c:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    9d8e:	408b      	lsls	r3, r1
    9d90:	7cd1      	ldrb	r1, [r2, #19]
    9d92:	4008      	ands	r0, r1
		sd_mmc_card->capacity = blocknr *
    9d94:	4083      	lsls	r3, r0
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    9d96:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    9d98:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
    9d9a:	7b13      	ldrb	r3, [r2, #12]
    9d9c:	2b3f      	cmp	r3, #63	; 0x3f
    9d9e:	d936      	bls.n	9e0e <sd_mmc_check+0x3a6>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
    9da0:	2100      	movs	r1, #0
    9da2:	2280      	movs	r2, #128	; 0x80
    9da4:	9100      	str	r1, [sp, #0]
    9da6:	2301      	movs	r3, #1
    9da8:	0092      	lsls	r2, r2, #2
    9daa:	489e      	ldr	r0, [pc, #632]	; (a024 <sd_mmc_check+0x5bc>)
    9dac:	47d0      	blx	sl
    9dae:	2800      	cmp	r0, #0
    9db0:	d100      	bne.n	9db4 <sd_mmc_check+0x34c>
    9db2:	e6b6      	b.n	9b22 <sd_mmc_check+0xba>
    9db4:	2332      	movs	r3, #50	; 0x32
    9db6:	469a      	mov	sl, r3
    9db8:	4d9b      	ldr	r5, [pc, #620]	; (a028 <sd_mmc_check+0x5c0>)
		if (!driver_read_word(&ext_csd)) {
    9dba:	a803      	add	r0, sp, #12
    9dbc:	47a8      	blx	r5
    9dbe:	2800      	cmp	r0, #0
    9dc0:	d100      	bne.n	9dc4 <sd_mmc_check+0x35c>
    9dc2:	e6ae      	b.n	9b22 <sd_mmc_check+0xba>
    9dc4:	4653      	mov	r3, sl
    9dc6:	3b01      	subs	r3, #1
    9dc8:	b29b      	uxth	r3, r3
    9dca:	469a      	mov	sl, r3
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
    9dcc:	2b00      	cmp	r3, #0
    9dce:	d1f4      	bne.n	9dba <sd_mmc_check+0x352>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
    9dd0:	4b8b      	ldr	r3, [pc, #556]	; (a000 <sd_mmc_check+0x598>)
    9dd2:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    9dd4:	7d8a      	ldrb	r2, [r1, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    9dd6:	7d4b      	ldrb	r3, [r1, #21]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    9dd8:	7d09      	ldrb	r1, [r1, #20]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    9dda:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    9ddc:	0289      	lsls	r1, r1, #10
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    9dde:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    9de0:	430b      	orrs	r3, r1
    9de2:	4313      	orrs	r3, r2
    9de4:	4a8e      	ldr	r2, [pc, #568]	; (a020 <sd_mmc_check+0x5b8>)
	value &=  ((uint32_t)1 << size) - 1;
    9de6:	051b      	lsls	r3, r3, #20
    9de8:	0d1b      	lsrs	r3, r3, #20
    9dea:	4293      	cmp	r3, r2
    9dec:	d100      	bne.n	9df0 <sd_mmc_check+0x388>
    9dee:	e0db      	b.n	9fa8 <sd_mmc_check+0x540>
    9df0:	2332      	movs	r3, #50	; 0x32
    9df2:	469a      	mov	sl, r3
    9df4:	ab04      	add	r3, sp, #16
    9df6:	469b      	mov	fp, r3
		if (!driver_read_word(&sec_count)) {
    9df8:	4658      	mov	r0, fp
    9dfa:	47a8      	blx	r5
    9dfc:	2800      	cmp	r0, #0
    9dfe:	d100      	bne.n	9e02 <sd_mmc_check+0x39a>
    9e00:	e68f      	b.n	9b22 <sd_mmc_check+0xba>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    9e02:	4653      	mov	r3, sl
    9e04:	3301      	adds	r3, #1
    9e06:	b29b      	uxth	r3, r3
    9e08:	469a      	mov	sl, r3
    9e0a:	2b80      	cmp	r3, #128	; 0x80
    9e0c:	d1f4      	bne.n	9df8 <sd_mmc_check+0x390>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    9e0e:	2180      	movs	r1, #128	; 0x80
    9e10:	4886      	ldr	r0, [pc, #536]	; (a02c <sd_mmc_check+0x5c4>)
    9e12:	0089      	lsls	r1, r1, #2
    9e14:	47b0      	blx	r6
    9e16:	2800      	cmp	r0, #0
    9e18:	d100      	bne.n	9e1c <sd_mmc_check+0x3b4>
    9e1a:	e682      	b.n	9b22 <sd_mmc_check+0xba>
			if (!(driver_get_response() & 0xFF)) {
    9e1c:	23ff      	movs	r3, #255	; 0xff
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    9e1e:	4d84      	ldr	r5, [pc, #528]	; (a030 <sd_mmc_check+0x5c8>)
			if (!(driver_get_response() & 0xFF)) {
    9e20:	469a      	mov	sl, r3
    9e22:	e003      	b.n	9e2c <sd_mmc_check+0x3c4>
    9e24:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
    9e26:	2d00      	cmp	r5, #0
    9e28:	d100      	bne.n	9e2c <sd_mmc_check+0x3c4>
    9e2a:	e67a      	b.n	9b22 <sd_mmc_check+0xba>
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
    9e2c:	2100      	movs	r1, #0
    9e2e:	4881      	ldr	r0, [pc, #516]	; (a034 <sd_mmc_check+0x5cc>)
    9e30:	47b0      	blx	r6
    9e32:	2800      	cmp	r0, #0
    9e34:	d100      	bne.n	9e38 <sd_mmc_check+0x3d0>
    9e36:	e674      	b.n	9b22 <sd_mmc_check+0xba>
			if (!(driver_get_response() & 0xFF)) {
    9e38:	47c0      	blx	r8
    9e3a:	4653      	mov	r3, sl
    9e3c:	4218      	tst	r0, r3
    9e3e:	d1f1      	bne.n	9e24 <sd_mmc_check+0x3bc>
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    9e40:	4b6f      	ldr	r3, [pc, #444]	; (a000 <sd_mmc_check+0x598>)
    9e42:	7820      	ldrb	r0, [r4, #0]
    9e44:	6819      	ldr	r1, [r3, #0]
    9e46:	7f8b      	ldrb	r3, [r1, #30]
    9e48:	1e5a      	subs	r2, r3, #1
    9e4a:	4193      	sbcs	r3, r2
    9e4c:	7b4a      	ldrb	r2, [r1, #13]
    9e4e:	b2db      	uxtb	r3, r3
    9e50:	6809      	ldr	r1, [r1, #0]
    9e52:	47c8      	blx	r9
    9e54:	e6b0      	b.n	9bb8 <sd_mmc_check+0x150>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    9e56:	2100      	movs	r1, #0
    9e58:	4868      	ldr	r0, [pc, #416]	; (9ffc <sd_mmc_check+0x594>)
    9e5a:	47b0      	blx	r6
    9e5c:	2800      	cmp	r0, #0
    9e5e:	d100      	bne.n	9e62 <sd_mmc_check+0x3fa>
    9e60:	e6db      	b.n	9c1a <sd_mmc_check+0x1b2>
	if ((driver_get_response() & OCR_CCS) != 0) {
    9e62:	47d0      	blx	sl
    9e64:	0043      	lsls	r3, r0, #1
    9e66:	d505      	bpl.n	9e74 <sd_mmc_check+0x40c>
		sd_mmc_card->type |= CARD_TYPE_HC;
    9e68:	4b65      	ldr	r3, [pc, #404]	; (a000 <sd_mmc_check+0x598>)
    9e6a:	681a      	ldr	r2, [r3, #0]
    9e6c:	2308      	movs	r3, #8
    9e6e:	7ad1      	ldrb	r1, [r2, #11]
    9e70:	430b      	orrs	r3, r1
    9e72:	72d3      	strb	r3, [r2, #11]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    9e74:	2100      	movs	r1, #0
    9e76:	4863      	ldr	r0, [pc, #396]	; (a004 <sd_mmc_check+0x59c>)
    9e78:	47b0      	blx	r6
    9e7a:	2800      	cmp	r0, #0
    9e7c:	d100      	bne.n	9e80 <sd_mmc_check+0x418>
    9e7e:	e650      	b.n	9b22 <sd_mmc_check+0xba>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    9e80:	2501      	movs	r5, #1
    9e82:	4b5f      	ldr	r3, [pc, #380]	; (a000 <sd_mmc_check+0x598>)
    9e84:	6819      	ldr	r1, [r3, #0]
    9e86:	7acb      	ldrb	r3, [r1, #11]
    9e88:	422b      	tst	r3, r5
    9e8a:	d100      	bne.n	9e8e <sd_mmc_check+0x426>
    9e8c:	e0a3      	b.n	9fd6 <sd_mmc_check+0x56e>
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
    9e8e:	8909      	ldrh	r1, [r1, #8]
    9e90:	4f5d      	ldr	r7, [pc, #372]	; (a008 <sd_mmc_check+0x5a0>)
    9e92:	0409      	lsls	r1, r1, #16
    9e94:	9500      	str	r5, [sp, #0]
    9e96:	002b      	movs	r3, r5
    9e98:	2210      	movs	r2, #16
    9e9a:	485c      	ldr	r0, [pc, #368]	; (a00c <sd_mmc_check+0x5a4>)
    9e9c:	46ba      	mov	sl, r7
    9e9e:	47b8      	blx	r7
    9ea0:	2800      	cmp	r0, #0
    9ea2:	d100      	bne.n	9ea6 <sd_mmc_check+0x43e>
    9ea4:	e63d      	b.n	9b22 <sd_mmc_check+0xba>
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
    9ea6:	4b56      	ldr	r3, [pc, #344]	; (a000 <sd_mmc_check+0x598>)
    9ea8:	0029      	movs	r1, r5
    9eaa:	6818      	ldr	r0, [r3, #0]
    9eac:	4b58      	ldr	r3, [pc, #352]	; (a010 <sd_mmc_check+0x5a8>)
    9eae:	300e      	adds	r0, #14
    9eb0:	4698      	mov	r8, r3
    9eb2:	4798      	blx	r3
    9eb4:	2800      	cmp	r0, #0
    9eb6:	d100      	bne.n	9eba <sd_mmc_check+0x452>
    9eb8:	e633      	b.n	9b22 <sd_mmc_check+0xba>
	return driver_wait_end_of_read_blocks();
    9eba:	4b56      	ldr	r3, [pc, #344]	; (a014 <sd_mmc_check+0x5ac>)
    9ebc:	469b      	mov	fp, r3
    9ebe:	4798      	blx	r3
		if (!sd_mmc_cmd9_spi()) {
    9ec0:	2800      	cmp	r0, #0
    9ec2:	d100      	bne.n	9ec6 <sd_mmc_check+0x45e>
    9ec4:	e62d      	b.n	9b22 <sd_mmc_check+0xba>
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    9ec6:	2007      	movs	r0, #7
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    9ec8:	4b4d      	ldr	r3, [pc, #308]	; (a000 <sd_mmc_check+0x598>)
	sd_mmc_card->clock = unit * mul * 1000;
    9eca:	4f53      	ldr	r7, [pc, #332]	; (a018 <sd_mmc_check+0x5b0>)
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    9ecc:	681a      	ldr	r2, [r3, #0]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
    9ece:	210f      	movs	r1, #15
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    9ed0:	7c53      	ldrb	r3, [r2, #17]
    9ed2:	08dd      	lsrs	r5, r3, #3
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    9ed4:	4003      	ands	r3, r0
    9ed6:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
    9ed8:	59db      	ldr	r3, [r3, r7]
    9eda:	27fa      	movs	r7, #250	; 0xfa
    9edc:	00bf      	lsls	r7, r7, #2
    9ede:	437b      	muls	r3, r7
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
    9ee0:	400d      	ands	r5, r1
	sd_mmc_card->clock = unit * mul * 1000;
    9ee2:	4f55      	ldr	r7, [pc, #340]	; (a038 <sd_mmc_check+0x5d0>)
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
    9ee4:	00ad      	lsls	r5, r5, #2
	sd_mmc_card->clock = unit * mul * 1000;
    9ee6:	59ed      	ldr	r5, [r5, r7]
    9ee8:	436b      	muls	r3, r5
    9eea:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
    9eec:	7b93      	ldrb	r3, [r2, #14]
    9eee:	099b      	lsrs	r3, r3, #6
    9ef0:	d14c      	bne.n	9f8c <sd_mmc_check+0x524>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    9ef2:	7d53      	ldrb	r3, [r2, #21]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    9ef4:	7d17      	ldrb	r7, [r2, #20]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    9ef6:	7d95      	ldrb	r5, [r2, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    9ef8:	02bf      	lsls	r7, r7, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    9efa:	009b      	lsls	r3, r3, #2
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    9efc:	11ad      	asrs	r5, r5, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    9efe:	433b      	orrs	r3, r7
    9f00:	432b      	orrs	r3, r5
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    9f02:	7dd7      	ldrb	r7, [r2, #23]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    9f04:	7e15      	ldrb	r5, [r2, #24]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    9f06:	007f      	lsls	r7, r7, #1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    9f08:	11ed      	asrs	r5, r5, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    9f0a:	433d      	orrs	r5, r7
	value &=  ((uint32_t)1 << size) - 1;
    9f0c:	051b      	lsls	r3, r3, #20
    9f0e:	0d1b      	lsrs	r3, r3, #20
    9f10:	4028      	ands	r0, r5
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    9f12:	3002      	adds	r0, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    9f14:	3301      	adds	r3, #1
    9f16:	4083      	lsls	r3, r0
    9f18:	7cd0      	ldrb	r0, [r2, #19]
    9f1a:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
    9f1c:	408b      	lsls	r3, r1
				/ 1024;
    9f1e:	0a9b      	lsrs	r3, r3, #10
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    9f20:	8911      	ldrh	r1, [r2, #8]
    9f22:	6053      	str	r3, [r2, #4]
    9f24:	0409      	lsls	r1, r1, #16
    9f26:	4845      	ldr	r0, [pc, #276]	; (a03c <sd_mmc_check+0x5d4>)
    9f28:	47b0      	blx	r6
    9f2a:	2800      	cmp	r0, #0
    9f2c:	d100      	bne.n	9f30 <sd_mmc_check+0x4c8>
    9f2e:	e5f8      	b.n	9b22 <sd_mmc_check+0xba>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
    9f30:	2301      	movs	r3, #1
    9f32:	2208      	movs	r2, #8
    9f34:	9300      	str	r3, [sp, #0]
    9f36:	2100      	movs	r1, #0
    9f38:	4841      	ldr	r0, [pc, #260]	; (a040 <sd_mmc_check+0x5d8>)
    9f3a:	47d0      	blx	sl
    9f3c:	2800      	cmp	r0, #0
    9f3e:	d100      	bne.n	9f42 <sd_mmc_check+0x4da>
    9f40:	e5ef      	b.n	9b22 <sd_mmc_check+0xba>
	if (!driver_start_read_blocks(scr, 1)) {
    9f42:	ad04      	add	r5, sp, #16
    9f44:	2101      	movs	r1, #1
    9f46:	0028      	movs	r0, r5
    9f48:	47c0      	blx	r8
    9f4a:	2800      	cmp	r0, #0
    9f4c:	d100      	bne.n	9f50 <sd_mmc_check+0x4e8>
    9f4e:	e5e8      	b.n	9b22 <sd_mmc_check+0xba>
	if (!driver_wait_end_of_read_blocks()) {
    9f50:	47d8      	blx	fp
    9f52:	2800      	cmp	r0, #0
    9f54:	d100      	bne.n	9f58 <sd_mmc_check+0x4f0>
    9f56:	e5e4      	b.n	9b22 <sd_mmc_check+0xba>
	switch (SD_SCR_SD_SPEC(scr)) {
    9f58:	220f      	movs	r2, #15
    9f5a:	782b      	ldrb	r3, [r5, #0]
    9f5c:	4013      	ands	r3, r2
    9f5e:	2b01      	cmp	r3, #1
    9f60:	d070      	beq.n	a044 <sd_mmc_check+0x5dc>
    9f62:	2b00      	cmp	r3, #0
    9f64:	d043      	beq.n	9fee <sd_mmc_check+0x586>
    9f66:	2b02      	cmp	r3, #2
    9f68:	d141      	bne.n	9fee <sd_mmc_check+0x586>
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
    9f6a:	78ab      	ldrb	r3, [r5, #2]
    9f6c:	09db      	lsrs	r3, r3, #7
    9f6e:	2b01      	cmp	r3, #1
    9f70:	d075      	beq.n	a05e <sd_mmc_check+0x5f6>
			sd_mmc_card->version = CARD_VER_SD_2_0;
    9f72:	2320      	movs	r3, #32
    9f74:	4a22      	ldr	r2, [pc, #136]	; (a000 <sd_mmc_check+0x598>)
    9f76:	6812      	ldr	r2, [r2, #0]
    9f78:	7313      	strb	r3, [r2, #12]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    9f7a:	2209      	movs	r2, #9
    9f7c:	4b20      	ldr	r3, [pc, #128]	; (a000 <sd_mmc_check+0x598>)
    9f7e:	6819      	ldr	r1, [r3, #0]
    9f80:	7acb      	ldrb	r3, [r1, #11]
    9f82:	401a      	ands	r2, r3
    9f84:	2a01      	cmp	r2, #1
    9f86:	d000      	beq.n	9f8a <sd_mmc_check+0x522>
    9f88:	e5f8      	b.n	9b7c <sd_mmc_check+0x114>
    9f8a:	e5ee      	b.n	9b6a <sd_mmc_check+0x102>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    9f8c:	7d93      	ldrb	r3, [r2, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    9f8e:	7d51      	ldrb	r1, [r2, #21]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    9f90:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    9f92:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    9f94:	430b      	orrs	r3, r1
				* 512;
    9f96:	2180      	movs	r1, #128	; 0x80
    9f98:	0089      	lsls	r1, r1, #2
    9f9a:	468c      	mov	ip, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    9f9c:	7dd0      	ldrb	r0, [r2, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    9f9e:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
    9fa0:	029b      	lsls	r3, r3, #10
    9fa2:	085b      	lsrs	r3, r3, #1
    9fa4:	4463      	add	r3, ip
    9fa6:	e7bb      	b.n	9f20 <sd_mmc_check+0x4b8>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
    9fa8:	2304      	movs	r3, #4
    9faa:	469a      	mov	sl, r3
    9fac:	ab04      	add	r3, sp, #16
    9fae:	469b      	mov	fp, r3
			if (!driver_read_word(&sec_count)) {
    9fb0:	4658      	mov	r0, fp
    9fb2:	47a8      	blx	r5
    9fb4:	2800      	cmp	r0, #0
    9fb6:	d100      	bne.n	9fba <sd_mmc_check+0x552>
    9fb8:	e5b3      	b.n	9b22 <sd_mmc_check+0xba>
    9fba:	4653      	mov	r3, sl
    9fbc:	3b01      	subs	r3, #1
    9fbe:	b29b      	uxth	r3, r3
    9fc0:	469a      	mov	sl, r3
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    9fc2:	2b00      	cmp	r3, #0
    9fc4:	d1f4      	bne.n	9fb0 <sd_mmc_check+0x548>
		sd_mmc_card->capacity = sec_count / 2;
    9fc6:	4b0e      	ldr	r3, [pc, #56]	; (a000 <sd_mmc_check+0x598>)
    9fc8:	681a      	ldr	r2, [r3, #0]
    9fca:	9b04      	ldr	r3, [sp, #16]
    9fcc:	085b      	lsrs	r3, r3, #1
    9fce:	6053      	str	r3, [r2, #4]
    9fd0:	2336      	movs	r3, #54	; 0x36
    9fd2:	469a      	mov	sl, r3
    9fd4:	e710      	b.n	9df8 <sd_mmc_check+0x390>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    9fd6:	2209      	movs	r2, #9
    9fd8:	4013      	ands	r3, r2
    9fda:	2b01      	cmp	r3, #1
    9fdc:	d000      	beq.n	9fe0 <sd_mmc_check+0x578>
    9fde:	e5e3      	b.n	9ba8 <sd_mmc_check+0x140>
    9fe0:	e5c3      	b.n	9b6a <sd_mmc_check+0x102>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
    9fe2:	2312      	movs	r3, #18
    9fe4:	7313      	strb	r3, [r2, #12]
    9fe6:	e6a8      	b.n	9d3a <sd_mmc_check+0x2d2>
		sd_mmc_card->version = CARD_VER_MMC_2_2;
    9fe8:	2322      	movs	r3, #34	; 0x22
    9fea:	7313      	strb	r3, [r2, #12]
    9fec:	e6a5      	b.n	9d3a <sd_mmc_check+0x2d2>
		sd_mmc_card->version = CARD_VER_SD_1_0;
    9fee:	2310      	movs	r3, #16
    9ff0:	4a03      	ldr	r2, [pc, #12]	; (a000 <sd_mmc_check+0x598>)
    9ff2:	6812      	ldr	r2, [r2, #0]
    9ff4:	7313      	strb	r3, [r2, #12]
    9ff6:	e7c0      	b.n	9f7a <sd_mmc_check+0x512>
    9ff8:	00001101 	.word	0x00001101
    9ffc:	0000053a 	.word	0x0000053a
    a000:	20000e58 	.word	0x20000e58
    a004:	0000113b 	.word	0x0000113b
    a008:	0000a4f1 	.word	0x0000a4f1
    a00c:	00081109 	.word	0x00081109
    a010:	0000ab35 	.word	0x0000ab35
    a014:	0000ac11 	.word	0x0000ac11
    a018:	00023a84 	.word	0x00023a84
    a01c:	00023a44 	.word	0x00023a44
    a020:	00000fff 	.word	0x00000fff
    a024:	00081108 	.word	0x00081108
    a028:	0000aa59 	.word	0x0000aa59
    a02c:	00001110 	.word	0x00001110
    a030:	00030d41 	.word	0x00030d41
    a034:	00001b0d 	.word	0x00001b0d
    a038:	00023aa0 	.word	0x00023aa0
    a03c:	00001137 	.word	0x00001137
    a040:	00081133 	.word	0x00081133
		sd_mmc_card->version = CARD_VER_SD_1_10;
    a044:	231a      	movs	r3, #26
    a046:	4a08      	ldr	r2, [pc, #32]	; (a068 <sd_mmc_check+0x600>)
    a048:	6812      	ldr	r2, [r2, #0]
    a04a:	7313      	strb	r3, [r2, #12]
    a04c:	e795      	b.n	9f7a <sd_mmc_check+0x512>
		sd_mmc_card->version = CARD_VER_MMC_3;
    a04e:	2330      	movs	r3, #48	; 0x30
    a050:	7313      	strb	r3, [r2, #12]
    a052:	e672      	b.n	9d3a <sd_mmc_check+0x2d2>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
    a054:	42ab      	cmp	r3, r5
    a056:	d1c4      	bne.n	9fe2 <sd_mmc_check+0x57a>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
    a058:	2314      	movs	r3, #20
    a05a:	7313      	strb	r3, [r2, #12]
    a05c:	e66d      	b.n	9d3a <sd_mmc_check+0x2d2>
			sd_mmc_card->version = CARD_VER_SD_3_0;
    a05e:	4a02      	ldr	r2, [pc, #8]	; (a068 <sd_mmc_check+0x600>)
    a060:	332f      	adds	r3, #47	; 0x2f
    a062:	6812      	ldr	r2, [r2, #0]
    a064:	7313      	strb	r3, [r2, #12]
    a066:	e788      	b.n	9f7a <sd_mmc_check+0x512>
    a068:	20000e58 	.word	0x20000e58

0000a06c <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
    a06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (slot >= SD_MMC_MEM_CNT) {
    a06e:	2800      	cmp	r0, #0
    a070:	d001      	beq.n	a076 <sd_mmc_get_type+0xa>
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
		return CARD_TYPE_UNKNOWN;
    a072:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
    a074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    a076:	4c14      	ldr	r4, [pc, #80]	; (a0c8 <sd_mmc_get_type+0x5c>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    a078:	7aa3      	ldrb	r3, [r4, #10]
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    a07a:	3b03      	subs	r3, #3
    a07c:	2b01      	cmp	r3, #1
    a07e:	d919      	bls.n	a0b4 <sd_mmc_get_type+0x48>
    a080:	7fa3      	ldrb	r3, [r4, #30]
    a082:	6821      	ldr	r1, [r4, #0]
    a084:	1e58      	subs	r0, r3, #1
    a086:	4183      	sbcs	r3, r0
    a088:	7b62      	ldrb	r2, [r4, #13]
    a08a:	b2db      	uxtb	r3, r3
	sd_mmc_slot_sel = slot;
    a08c:	2000      	movs	r0, #0
    a08e:	4e0f      	ldr	r6, [pc, #60]	; (a0cc <sd_mmc_get_type+0x60>)
	sd_mmc_card = &sd_mmc_cards[slot];
    a090:	4d0f      	ldr	r5, [pc, #60]	; (a0d0 <sd_mmc_get_type+0x64>)
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    a092:	4f10      	ldr	r7, [pc, #64]	; (a0d4 <sd_mmc_get_type+0x68>)
	sd_mmc_slot_sel = slot;
    a094:	7030      	strb	r0, [r6, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
    a096:	602c      	str	r4, [r5, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    a098:	47b8      	blx	r7
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    a09a:	7aa3      	ldrb	r3, [r4, #10]
    a09c:	2b02      	cmp	r3, #2
    a09e:	d0e8      	beq.n	a072 <sd_mmc_get_type+0x6>
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    a0a0:	7833      	ldrb	r3, [r6, #0]
    a0a2:	2b00      	cmp	r3, #0
    a0a4:	d002      	beq.n	a0ac <sd_mmc_get_type+0x40>
	return sd_mmc_card->type;
    a0a6:	682b      	ldr	r3, [r5, #0]
    a0a8:	7ad8      	ldrb	r0, [r3, #11]
    a0aa:	e7e3      	b.n	a074 <sd_mmc_get_type+0x8>
		driver_deselect_device(sd_mmc_slot_sel);
    a0ac:	2000      	movs	r0, #0
    a0ae:	4b0a      	ldr	r3, [pc, #40]	; (a0d8 <sd_mmc_get_type+0x6c>)
    a0b0:	4798      	blx	r3
    a0b2:	e7f8      	b.n	a0a6 <sd_mmc_get_type+0x3a>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    a0b4:	2302      	movs	r3, #2
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    a0b6:	4909      	ldr	r1, [pc, #36]	; (a0dc <sd_mmc_get_type+0x70>)
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    a0b8:	72a3      	strb	r3, [r4, #10]
		sd_mmc_cards[slot].bus_width = 1;
    a0ba:	3b01      	subs	r3, #1
    a0bc:	7363      	strb	r3, [r4, #13]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    a0be:	6021      	str	r1, [r4, #0]
		sd_mmc_cards[slot].high_speed = 0;
    a0c0:	77a0      	strb	r0, [r4, #30]
    a0c2:	2300      	movs	r3, #0
    a0c4:	2201      	movs	r2, #1
    a0c6:	e7e1      	b.n	a08c <sd_mmc_get_type+0x20>
    a0c8:	20000e5c 	.word	0x20000e5c
    a0cc:	20000e80 	.word	0x20000e80
    a0d0:	20000e58 	.word	0x20000e58
    a0d4:	0000a471 	.word	0x0000a471
    a0d8:	0000a495 	.word	0x0000a495
    a0dc:	00061a80 	.word	0x00061a80

0000a0e0 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
    a0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (slot >= SD_MMC_MEM_CNT) {
    a0e2:	2800      	cmp	r0, #0
    a0e4:	d001      	beq.n	a0ea <sd_mmc_get_capacity+0xa>
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
		return 0;
    a0e6:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
    a0e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    a0ea:	4c14      	ldr	r4, [pc, #80]	; (a13c <sd_mmc_get_capacity+0x5c>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    a0ec:	7aa3      	ldrb	r3, [r4, #10]
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    a0ee:	3b03      	subs	r3, #3
    a0f0:	2b01      	cmp	r3, #1
    a0f2:	d919      	bls.n	a128 <sd_mmc_get_capacity+0x48>
    a0f4:	7fa3      	ldrb	r3, [r4, #30]
    a0f6:	6821      	ldr	r1, [r4, #0]
    a0f8:	1e58      	subs	r0, r3, #1
    a0fa:	4183      	sbcs	r3, r0
    a0fc:	7b62      	ldrb	r2, [r4, #13]
    a0fe:	b2db      	uxtb	r3, r3
	sd_mmc_slot_sel = slot;
    a100:	2000      	movs	r0, #0
    a102:	4e0f      	ldr	r6, [pc, #60]	; (a140 <sd_mmc_get_capacity+0x60>)
	sd_mmc_card = &sd_mmc_cards[slot];
    a104:	4d0f      	ldr	r5, [pc, #60]	; (a144 <sd_mmc_get_capacity+0x64>)
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    a106:	4f10      	ldr	r7, [pc, #64]	; (a148 <sd_mmc_get_capacity+0x68>)
	sd_mmc_slot_sel = slot;
    a108:	7030      	strb	r0, [r6, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
    a10a:	602c      	str	r4, [r5, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    a10c:	47b8      	blx	r7
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    a10e:	7aa3      	ldrb	r3, [r4, #10]
    a110:	2b02      	cmp	r3, #2
    a112:	d0e8      	beq.n	a0e6 <sd_mmc_get_capacity+0x6>
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    a114:	7833      	ldrb	r3, [r6, #0]
    a116:	2b00      	cmp	r3, #0
    a118:	d002      	beq.n	a120 <sd_mmc_get_capacity+0x40>
	return sd_mmc_card->capacity;
    a11a:	682b      	ldr	r3, [r5, #0]
    a11c:	6858      	ldr	r0, [r3, #4]
    a11e:	e7e3      	b.n	a0e8 <sd_mmc_get_capacity+0x8>
		driver_deselect_device(sd_mmc_slot_sel);
    a120:	2000      	movs	r0, #0
    a122:	4b0a      	ldr	r3, [pc, #40]	; (a14c <sd_mmc_get_capacity+0x6c>)
    a124:	4798      	blx	r3
    a126:	e7f8      	b.n	a11a <sd_mmc_get_capacity+0x3a>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    a128:	2302      	movs	r3, #2
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    a12a:	4909      	ldr	r1, [pc, #36]	; (a150 <sd_mmc_get_capacity+0x70>)
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    a12c:	72a3      	strb	r3, [r4, #10]
		sd_mmc_cards[slot].bus_width = 1;
    a12e:	3b01      	subs	r3, #1
    a130:	7363      	strb	r3, [r4, #13]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    a132:	6021      	str	r1, [r4, #0]
		sd_mmc_cards[slot].high_speed = 0;
    a134:	77a0      	strb	r0, [r4, #30]
    a136:	2300      	movs	r3, #0
    a138:	2201      	movs	r2, #1
    a13a:	e7e1      	b.n	a100 <sd_mmc_get_capacity+0x20>
    a13c:	20000e5c 	.word	0x20000e5c
    a140:	20000e80 	.word	0x20000e80
    a144:	20000e58 	.word	0x20000e58
    a148:	0000a471 	.word	0x0000a471
    a14c:	0000a495 	.word	0x0000a495
    a150:	00061a80 	.word	0x00061a80

0000a154 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
    a154:	2000      	movs	r0, #0
    a156:	4770      	bx	lr

0000a158 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    a158:	b5f0      	push	{r4, r5, r6, r7, lr}
    a15a:	464e      	mov	r6, r9
    a15c:	4645      	mov	r5, r8
    a15e:	46de      	mov	lr, fp
    a160:	4657      	mov	r7, sl
    a162:	b5e0      	push	{r5, r6, r7, lr}
    a164:	4689      	mov	r9, r1
    a166:	b083      	sub	sp, #12
    a168:	4690      	mov	r8, r2
		return SD_MMC_ERR_SLOT;
    a16a:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
    a16c:	2800      	cmp	r0, #0
    a16e:	d007      	beq.n	a180 <sd_mmc_init_read_blocks+0x28>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
    a170:	0018      	movs	r0, r3
    a172:	b003      	add	sp, #12
    a174:	bc3c      	pop	{r2, r3, r4, r5}
    a176:	4690      	mov	r8, r2
    a178:	4699      	mov	r9, r3
    a17a:	46a2      	mov	sl, r4
    a17c:	46ab      	mov	fp, r5
    a17e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    a180:	4c2e      	ldr	r4, [pc, #184]	; (a23c <sd_mmc_init_read_blocks+0xe4>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    a182:	7aa3      	ldrb	r3, [r4, #10]
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    a184:	3b03      	subs	r3, #3
    a186:	2b01      	cmp	r3, #1
    a188:	d94c      	bls.n	a224 <sd_mmc_init_read_blocks+0xcc>
    a18a:	7fa3      	ldrb	r3, [r4, #30]
    a18c:	6821      	ldr	r1, [r4, #0]
    a18e:	1e58      	subs	r0, r3, #1
    a190:	4183      	sbcs	r3, r0
    a192:	7b62      	ldrb	r2, [r4, #13]
    a194:	b2db      	uxtb	r3, r3
	sd_mmc_slot_sel = slot;
    a196:	482a      	ldr	r0, [pc, #168]	; (a240 <sd_mmc_init_read_blocks+0xe8>)
    a198:	4682      	mov	sl, r0
    a19a:	2000      	movs	r0, #0
    a19c:	4655      	mov	r5, sl
    a19e:	7028      	strb	r0, [r5, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
    a1a0:	4828      	ldr	r0, [pc, #160]	; (a244 <sd_mmc_init_read_blocks+0xec>)
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    a1a2:	4d29      	ldr	r5, [pc, #164]	; (a248 <sd_mmc_init_read_blocks+0xf0>)
	sd_mmc_card = &sd_mmc_cards[slot];
    a1a4:	6004      	str	r4, [r0, #0]
    a1a6:	4683      	mov	fp, r0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    a1a8:	2000      	movs	r0, #0
    a1aa:	47a8      	blx	r5
	if (sd_mmc_err != SD_MMC_OK) {
    a1ac:	7aa2      	ldrb	r2, [r4, #10]
    a1ae:	2301      	movs	r3, #1
    a1b0:	2a02      	cmp	r2, #2
    a1b2:	d0dd      	beq.n	a170 <sd_mmc_init_read_blocks+0x18>
    a1b4:	4c25      	ldr	r4, [pc, #148]	; (a24c <sd_mmc_init_read_blocks+0xf4>)
    a1b6:	4d26      	ldr	r5, [pc, #152]	; (a250 <sd_mmc_init_read_blocks+0xf8>)
			if (!(driver_get_response() & 0xFF)) {
    a1b8:	4f26      	ldr	r7, [pc, #152]	; (a254 <sd_mmc_init_read_blocks+0xfc>)
    a1ba:	26ff      	movs	r6, #255	; 0xff
    a1bc:	e005      	b.n	a1ca <sd_mmc_init_read_blocks+0x72>
    a1be:	47b8      	blx	r7
    a1c0:	4206      	tst	r6, r0
    a1c2:	d00d      	beq.n	a1e0 <sd_mmc_init_read_blocks+0x88>
    a1c4:	3c01      	subs	r4, #1
		if (nec_timeout-- == 0) {
    a1c6:	2c00      	cmp	r4, #0
    a1c8:	d004      	beq.n	a1d4 <sd_mmc_init_read_blocks+0x7c>
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
    a1ca:	2100      	movs	r1, #0
    a1cc:	4822      	ldr	r0, [pc, #136]	; (a258 <sd_mmc_init_read_blocks+0x100>)
    a1ce:	47a8      	blx	r5
    a1d0:	2800      	cmp	r0, #0
    a1d2:	d1f4      	bne.n	a1be <sd_mmc_init_read_blocks+0x66>
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    a1d4:	4653      	mov	r3, sl
    a1d6:	781b      	ldrb	r3, [r3, #0]
    a1d8:	2b00      	cmp	r3, #0
    a1da:	d01e      	beq.n	a21a <sd_mmc_init_read_blocks+0xc2>
		return SD_MMC_ERR_COMM;
    a1dc:	2305      	movs	r3, #5
    a1de:	e7c7      	b.n	a170 <sd_mmc_init_read_blocks+0x18>
	if (nb_block > 1) {
    a1e0:	4643      	mov	r3, r8
    a1e2:	2b01      	cmp	r3, #1
    a1e4:	d928      	bls.n	a238 <sd_mmc_init_read_blocks+0xe0>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
    a1e6:	481d      	ldr	r0, [pc, #116]	; (a25c <sd_mmc_init_read_blocks+0x104>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    a1e8:	465b      	mov	r3, fp
    a1ea:	681b      	ldr	r3, [r3, #0]
    a1ec:	7adb      	ldrb	r3, [r3, #11]
    a1ee:	071b      	lsls	r3, r3, #28
    a1f0:	d402      	bmi.n	a1f8 <sd_mmc_init_read_blocks+0xa0>
		arg = (start * SD_MMC_BLOCK_SIZE);
    a1f2:	464b      	mov	r3, r9
    a1f4:	025b      	lsls	r3, r3, #9
    a1f6:	4699      	mov	r9, r3
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    a1f8:	2301      	movs	r3, #1
    a1fa:	2280      	movs	r2, #128	; 0x80
    a1fc:	9300      	str	r3, [sp, #0]
    a1fe:	0092      	lsls	r2, r2, #2
    a200:	4643      	mov	r3, r8
    a202:	4649      	mov	r1, r9
    a204:	4c16      	ldr	r4, [pc, #88]	; (a260 <sd_mmc_init_read_blocks+0x108>)
    a206:	47a0      	blx	r4
    a208:	2800      	cmp	r0, #0
    a20a:	d0e3      	beq.n	a1d4 <sd_mmc_init_read_blocks+0x7c>
	sd_mmc_nb_block_remaining = nb_block;
    a20c:	4642      	mov	r2, r8
    a20e:	4b15      	ldr	r3, [pc, #84]	; (a264 <sd_mmc_init_read_blocks+0x10c>)
    a210:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    a212:	4b15      	ldr	r3, [pc, #84]	; (a268 <sd_mmc_init_read_blocks+0x110>)
    a214:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    a216:	2300      	movs	r3, #0
    a218:	e7aa      	b.n	a170 <sd_mmc_init_read_blocks+0x18>
		driver_deselect_device(sd_mmc_slot_sel);
    a21a:	4b14      	ldr	r3, [pc, #80]	; (a26c <sd_mmc_init_read_blocks+0x114>)
    a21c:	2000      	movs	r0, #0
    a21e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    a220:	2305      	movs	r3, #5
    a222:	e7a5      	b.n	a170 <sd_mmc_init_read_blocks+0x18>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    a224:	2302      	movs	r3, #2
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    a226:	4912      	ldr	r1, [pc, #72]	; (a270 <sd_mmc_init_read_blocks+0x118>)
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    a228:	72a3      	strb	r3, [r4, #10]
		sd_mmc_cards[slot].bus_width = 1;
    a22a:	3b01      	subs	r3, #1
    a22c:	7363      	strb	r3, [r4, #13]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    a22e:	6021      	str	r1, [r4, #0]
		sd_mmc_cards[slot].high_speed = 0;
    a230:	77a0      	strb	r0, [r4, #30]
    a232:	2300      	movs	r3, #0
    a234:	2201      	movs	r2, #1
    a236:	e7ae      	b.n	a196 <sd_mmc_init_read_blocks+0x3e>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    a238:	480e      	ldr	r0, [pc, #56]	; (a274 <sd_mmc_init_read_blocks+0x11c>)
    a23a:	e7d5      	b.n	a1e8 <sd_mmc_init_read_blocks+0x90>
    a23c:	20000e5c 	.word	0x20000e5c
    a240:	20000e80 	.word	0x20000e80
    a244:	20000e58 	.word	0x20000e58
    a248:	0000a471 	.word	0x0000a471
    a24c:	00030d41 	.word	0x00030d41
    a250:	0000aa35 	.word	0x0000aa35
    a254:	0000aa4d 	.word	0x0000aa4d
    a258:	00001b0d 	.word	0x00001b0d
    a25c:	00101112 	.word	0x00101112
    a260:	0000a4f1 	.word	0x0000a4f1
    a264:	20000e7c 	.word	0x20000e7c
    a268:	20000e7e 	.word	0x20000e7e
    a26c:	0000a495 	.word	0x0000a495
    a270:	00061a80 	.word	0x00061a80
    a274:	00081111 	.word	0x00081111

0000a278 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    a278:	b510      	push	{r4, lr}
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
    a27a:	4b08      	ldr	r3, [pc, #32]	; (a29c <sd_mmc_start_read_blocks+0x24>)
{
    a27c:	000c      	movs	r4, r1
	if (!driver_start_read_blocks(dest, nb_block)) {
    a27e:	4798      	blx	r3
    a280:	2800      	cmp	r0, #0
    a282:	d104      	bne.n	a28e <sd_mmc_start_read_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
    a284:	2100      	movs	r1, #0
		return SD_MMC_ERR_COMM;
    a286:	2005      	movs	r0, #5
    a288:	4b05      	ldr	r3, [pc, #20]	; (a2a0 <sd_mmc_start_read_blocks+0x28>)
    a28a:	8019      	strh	r1, [r3, #0]
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    a28c:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
    a28e:	4b04      	ldr	r3, [pc, #16]	; (a2a0 <sd_mmc_start_read_blocks+0x28>)
	return SD_MMC_OK;
    a290:	2000      	movs	r0, #0
	sd_mmc_nb_block_remaining -= nb_block;
    a292:	8819      	ldrh	r1, [r3, #0]
    a294:	1b09      	subs	r1, r1, r4
    a296:	b289      	uxth	r1, r1
	return SD_MMC_OK;
    a298:	e7f7      	b.n	a28a <sd_mmc_start_read_blocks+0x12>
    a29a:	46c0      	nop			; (mov r8, r8)
    a29c:	0000ab35 	.word	0x0000ab35
    a2a0:	20000e7c 	.word	0x20000e7c

0000a2a4 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    a2a4:	b510      	push	{r4, lr}
	if (!driver_wait_end_of_read_blocks()) {
    a2a6:	4b15      	ldr	r3, [pc, #84]	; (a2fc <sd_mmc_wait_end_of_read_blocks+0x58>)
{
    a2a8:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
    a2aa:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    a2ac:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
    a2ae:	2800      	cmp	r0, #0
    a2b0:	d101      	bne.n	a2b6 <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    a2b2:	0018      	movs	r0, r3
    a2b4:	bd10      	pop	{r4, pc}
	if (abort) {
    a2b6:	2c00      	cmp	r4, #0
    a2b8:	d113      	bne.n	a2e2 <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
    a2ba:	4b11      	ldr	r3, [pc, #68]	; (a300 <sd_mmc_wait_end_of_read_blocks+0x5c>)
    a2bc:	881b      	ldrh	r3, [r3, #0]
    a2be:	2b00      	cmp	r3, #0
    a2c0:	d10d      	bne.n	a2de <sd_mmc_wait_end_of_read_blocks+0x3a>
	if (sd_mmc_nb_block_to_tranfer == 1) {
    a2c2:	4b10      	ldr	r3, [pc, #64]	; (a304 <sd_mmc_wait_end_of_read_blocks+0x60>)
    a2c4:	881b      	ldrh	r3, [r3, #0]
    a2c6:	2b01      	cmp	r3, #1
    a2c8:	d005      	beq.n	a2d6 <sd_mmc_wait_end_of_read_blocks+0x32>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    a2ca:	2100      	movs	r1, #0
    a2cc:	480e      	ldr	r0, [pc, #56]	; (a308 <sd_mmc_wait_end_of_read_blocks+0x64>)
    a2ce:	4c0f      	ldr	r4, [pc, #60]	; (a30c <sd_mmc_wait_end_of_read_blocks+0x68>)
    a2d0:	47a0      	blx	r4
    a2d2:	2800      	cmp	r0, #0
    a2d4:	d00e      	beq.n	a2f4 <sd_mmc_wait_end_of_read_blocks+0x50>
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    a2d6:	4b0e      	ldr	r3, [pc, #56]	; (a310 <sd_mmc_wait_end_of_read_blocks+0x6c>)
    a2d8:	781b      	ldrb	r3, [r3, #0]
    a2da:	2b00      	cmp	r3, #0
    a2dc:	d005      	beq.n	a2ea <sd_mmc_wait_end_of_read_blocks+0x46>
		return SD_MMC_OK;
    a2de:	2300      	movs	r3, #0
    a2e0:	e7e7      	b.n	a2b2 <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_nb_block_remaining = 0;
    a2e2:	2200      	movs	r2, #0
    a2e4:	4b06      	ldr	r3, [pc, #24]	; (a300 <sd_mmc_wait_end_of_read_blocks+0x5c>)
    a2e6:	801a      	strh	r2, [r3, #0]
    a2e8:	e7eb      	b.n	a2c2 <sd_mmc_wait_end_of_read_blocks+0x1e>
		driver_deselect_device(sd_mmc_slot_sel);
    a2ea:	4b0a      	ldr	r3, [pc, #40]	; (a314 <sd_mmc_wait_end_of_read_blocks+0x70>)
    a2ec:	2000      	movs	r0, #0
    a2ee:	4798      	blx	r3
		return SD_MMC_OK;
    a2f0:	2300      	movs	r3, #0
    a2f2:	e7de      	b.n	a2b2 <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
    a2f4:	2100      	movs	r1, #0
    a2f6:	4804      	ldr	r0, [pc, #16]	; (a308 <sd_mmc_wait_end_of_read_blocks+0x64>)
    a2f8:	47a0      	blx	r4
    a2fa:	e7ec      	b.n	a2d6 <sd_mmc_wait_end_of_read_blocks+0x32>
    a2fc:	0000ac11 	.word	0x0000ac11
    a300:	20000e7c 	.word	0x20000e7c
    a304:	20000e7e 	.word	0x20000e7e
    a308:	0000310c 	.word	0x0000310c
    a30c:	0000aa35 	.word	0x0000aa35
    a310:	20000e80 	.word	0x20000e80
    a314:	0000a495 	.word	0x0000a495

0000a318 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    a318:	b5f0      	push	{r4, r5, r6, r7, lr}
    a31a:	4646      	mov	r6, r8
    a31c:	46d6      	mov	lr, sl
    a31e:	464f      	mov	r7, r9
    a320:	b5c0      	push	{r6, r7, lr}
    a322:	0015      	movs	r5, r2
    a324:	b082      	sub	sp, #8
    a326:	000e      	movs	r6, r1
		return SD_MMC_ERR_SLOT;
    a328:	2404      	movs	r4, #4
	if (slot >= SD_MMC_MEM_CNT) {
    a32a:	2800      	cmp	r0, #0
    a32c:	d006      	beq.n	a33c <sd_mmc_init_write_blocks+0x24>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
    a32e:	0020      	movs	r0, r4
    a330:	b002      	add	sp, #8
    a332:	bc1c      	pop	{r2, r3, r4}
    a334:	4690      	mov	r8, r2
    a336:	4699      	mov	r9, r3
    a338:	46a2      	mov	sl, r4
    a33a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    a33c:	4c23      	ldr	r4, [pc, #140]	; (a3cc <sd_mmc_init_write_blocks+0xb4>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    a33e:	7aa3      	ldrb	r3, [r4, #10]
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    a340:	3b03      	subs	r3, #3
    a342:	2b01      	cmp	r3, #1
    a344:	d937      	bls.n	a3b6 <sd_mmc_init_write_blocks+0x9e>
    a346:	7fa3      	ldrb	r3, [r4, #30]
    a348:	6821      	ldr	r1, [r4, #0]
    a34a:	1e58      	subs	r0, r3, #1
    a34c:	4183      	sbcs	r3, r0
    a34e:	7b62      	ldrb	r2, [r4, #13]
    a350:	b2db      	uxtb	r3, r3
	sd_mmc_slot_sel = slot;
    a352:	481f      	ldr	r0, [pc, #124]	; (a3d0 <sd_mmc_init_write_blocks+0xb8>)
    a354:	4682      	mov	sl, r0
    a356:	2000      	movs	r0, #0
    a358:	4657      	mov	r7, sl
    a35a:	7038      	strb	r0, [r7, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
    a35c:	481d      	ldr	r0, [pc, #116]	; (a3d4 <sd_mmc_init_write_blocks+0xbc>)
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    a35e:	4f1e      	ldr	r7, [pc, #120]	; (a3d8 <sd_mmc_init_write_blocks+0xc0>)
	sd_mmc_card = &sd_mmc_cards[slot];
    a360:	6004      	str	r4, [r0, #0]
    a362:	4680      	mov	r8, r0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    a364:	2000      	movs	r0, #0
    a366:	47b8      	blx	r7
	if (sd_mmc_err != SD_MMC_OK) {
    a368:	7aa3      	ldrb	r3, [r4, #10]
    a36a:	2401      	movs	r4, #1
    a36c:	2b02      	cmp	r3, #2
    a36e:	d0de      	beq.n	a32e <sd_mmc_init_write_blocks+0x16>
	if (nb_block > 1) {
    a370:	2d01      	cmp	r5, #1
    a372:	d91e      	bls.n	a3b2 <sd_mmc_init_write_blocks+0x9a>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    a374:	4819      	ldr	r0, [pc, #100]	; (a3dc <sd_mmc_init_write_blocks+0xc4>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    a376:	4643      	mov	r3, r8
    a378:	681b      	ldr	r3, [r3, #0]
    a37a:	7adb      	ldrb	r3, [r3, #11]
    a37c:	071b      	lsls	r3, r3, #28
    a37e:	d400      	bmi.n	a382 <sd_mmc_init_write_blocks+0x6a>
		arg = (start * SD_MMC_BLOCK_SIZE);
    a380:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    a382:	2301      	movs	r3, #1
    a384:	2280      	movs	r2, #128	; 0x80
    a386:	9300      	str	r3, [sp, #0]
    a388:	0092      	lsls	r2, r2, #2
    a38a:	002b      	movs	r3, r5
    a38c:	0031      	movs	r1, r6
    a38e:	4c14      	ldr	r4, [pc, #80]	; (a3e0 <sd_mmc_init_write_blocks+0xc8>)
    a390:	47a0      	blx	r4
    a392:	2800      	cmp	r0, #0
    a394:	d107      	bne.n	a3a6 <sd_mmc_init_write_blocks+0x8e>
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    a396:	4653      	mov	r3, sl
    a398:	781b      	ldrb	r3, [r3, #0]
		return SD_MMC_ERR_COMM;
    a39a:	2405      	movs	r4, #5
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    a39c:	2b00      	cmp	r3, #0
    a39e:	d1c6      	bne.n	a32e <sd_mmc_init_write_blocks+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
    a3a0:	4b10      	ldr	r3, [pc, #64]	; (a3e4 <sd_mmc_init_write_blocks+0xcc>)
    a3a2:	4798      	blx	r3
    a3a4:	e7c3      	b.n	a32e <sd_mmc_init_write_blocks+0x16>
	sd_mmc_nb_block_remaining = nb_block;
    a3a6:	4b10      	ldr	r3, [pc, #64]	; (a3e8 <sd_mmc_init_write_blocks+0xd0>)
	return SD_MMC_OK;
    a3a8:	2400      	movs	r4, #0
	sd_mmc_nb_block_remaining = nb_block;
    a3aa:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    a3ac:	4b0f      	ldr	r3, [pc, #60]	; (a3ec <sd_mmc_init_write_blocks+0xd4>)
    a3ae:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
    a3b0:	e7bd      	b.n	a32e <sd_mmc_init_write_blocks+0x16>
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    a3b2:	480f      	ldr	r0, [pc, #60]	; (a3f0 <sd_mmc_init_write_blocks+0xd8>)
    a3b4:	e7df      	b.n	a376 <sd_mmc_init_write_blocks+0x5e>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    a3b6:	2302      	movs	r3, #2
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    a3b8:	490e      	ldr	r1, [pc, #56]	; (a3f4 <sd_mmc_init_write_blocks+0xdc>)
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    a3ba:	72a3      	strb	r3, [r4, #10]
		sd_mmc_cards[slot].bus_width = 1;
    a3bc:	3b01      	subs	r3, #1
    a3be:	7363      	strb	r3, [r4, #13]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    a3c0:	6021      	str	r1, [r4, #0]
		sd_mmc_cards[slot].high_speed = 0;
    a3c2:	77a0      	strb	r0, [r4, #30]
    a3c4:	2300      	movs	r3, #0
    a3c6:	2201      	movs	r2, #1
    a3c8:	e7c3      	b.n	a352 <sd_mmc_init_write_blocks+0x3a>
    a3ca:	46c0      	nop			; (mov r8, r8)
    a3cc:	20000e5c 	.word	0x20000e5c
    a3d0:	20000e80 	.word	0x20000e80
    a3d4:	20000e58 	.word	0x20000e58
    a3d8:	0000a471 	.word	0x0000a471
    a3dc:	00109119 	.word	0x00109119
    a3e0:	0000a4f1 	.word	0x0000a4f1
    a3e4:	0000a495 	.word	0x0000a495
    a3e8:	20000e7c 	.word	0x20000e7c
    a3ec:	20000e7e 	.word	0x20000e7e
    a3f0:	00089118 	.word	0x00089118
    a3f4:	00061a80 	.word	0x00061a80

0000a3f8 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    a3f8:	b510      	push	{r4, lr}
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    a3fa:	4b08      	ldr	r3, [pc, #32]	; (a41c <sd_mmc_start_write_blocks+0x24>)
{
    a3fc:	000c      	movs	r4, r1
	if (!driver_start_write_blocks(src, nb_block)) {
    a3fe:	4798      	blx	r3
    a400:	2800      	cmp	r0, #0
    a402:	d104      	bne.n	a40e <sd_mmc_start_write_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
    a404:	2100      	movs	r1, #0
		return SD_MMC_ERR_COMM;
    a406:	2005      	movs	r0, #5
    a408:	4b05      	ldr	r3, [pc, #20]	; (a420 <sd_mmc_start_write_blocks+0x28>)
    a40a:	8019      	strh	r1, [r3, #0]
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    a40c:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
    a40e:	4b04      	ldr	r3, [pc, #16]	; (a420 <sd_mmc_start_write_blocks+0x28>)
	return SD_MMC_OK;
    a410:	2000      	movs	r0, #0
	sd_mmc_nb_block_remaining -= nb_block;
    a412:	8819      	ldrh	r1, [r3, #0]
    a414:	1b09      	subs	r1, r1, r4
    a416:	b289      	uxth	r1, r1
	return SD_MMC_OK;
    a418:	e7f7      	b.n	a40a <sd_mmc_start_write_blocks+0x12>
    a41a:	46c0      	nop			; (mov r8, r8)
    a41c:	0000ac15 	.word	0x0000ac15
    a420:	20000e7c 	.word	0x20000e7c

0000a424 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    a424:	b510      	push	{r4, lr}
	if (!driver_wait_end_of_write_blocks()) {
    a426:	4b0e      	ldr	r3, [pc, #56]	; (a460 <sd_mmc_wait_end_of_write_blocks+0x3c>)
{
    a428:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
    a42a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    a42c:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
    a42e:	2800      	cmp	r0, #0
    a430:	d101      	bne.n	a436 <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    a432:	0018      	movs	r0, r3
    a434:	bd10      	pop	{r4, pc}
	if (abort) {
    a436:	2c00      	cmp	r4, #0
    a438:	d109      	bne.n	a44e <sd_mmc_wait_end_of_write_blocks+0x2a>
	} else if (sd_mmc_nb_block_remaining) {
    a43a:	4b0a      	ldr	r3, [pc, #40]	; (a464 <sd_mmc_wait_end_of_write_blocks+0x40>)
    a43c:	881b      	ldrh	r3, [r3, #0]
    a43e:	2b00      	cmp	r3, #0
    a440:	d103      	bne.n	a44a <sd_mmc_wait_end_of_write_blocks+0x26>
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    a442:	4b09      	ldr	r3, [pc, #36]	; (a468 <sd_mmc_wait_end_of_write_blocks+0x44>)
    a444:	781b      	ldrb	r3, [r3, #0]
    a446:	2b00      	cmp	r3, #0
    a448:	d005      	beq.n	a456 <sd_mmc_wait_end_of_write_blocks+0x32>
		return SD_MMC_OK;
    a44a:	2300      	movs	r3, #0
    a44c:	e7f1      	b.n	a432 <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_nb_block_remaining = 0;
    a44e:	2200      	movs	r2, #0
    a450:	4b04      	ldr	r3, [pc, #16]	; (a464 <sd_mmc_wait_end_of_write_blocks+0x40>)
    a452:	801a      	strh	r2, [r3, #0]
    a454:	e7f5      	b.n	a442 <sd_mmc_wait_end_of_write_blocks+0x1e>
		driver_deselect_device(sd_mmc_slot_sel);
    a456:	4b05      	ldr	r3, [pc, #20]	; (a46c <sd_mmc_wait_end_of_write_blocks+0x48>)
    a458:	2000      	movs	r0, #0
    a45a:	4798      	blx	r3
		return SD_MMC_OK;
    a45c:	2300      	movs	r3, #0
    a45e:	e7e8      	b.n	a432 <sd_mmc_wait_end_of_write_blocks+0xe>
    a460:	0000ad65 	.word	0x0000ad65
    a464:	20000e7c 	.word	0x20000e7c
    a468:	20000e80 	.word	0x20000e80
    a46c:	0000a495 	.word	0x0000a495

0000a470 <sd_mmc_spi_select_device>:
void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    a470:	2200      	movs	r2, #0
{
    a472:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    a474:	4b03      	ldr	r3, [pc, #12]	; (a484 <sd_mmc_spi_select_device+0x14>)
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&spi_main, clock)) {
		clock -= clock / 8;
	}
	*/
	//spi_select_slave(&spi_main, &sd_mmc_spi_devices[slot], true);
	spi_select_slave(&spi_main, &slave_SD, true);//Kfausnight 20200721
    a476:	4904      	ldr	r1, [pc, #16]	; (a488 <sd_mmc_spi_select_device+0x18>)
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    a478:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&spi_main, &slave_SD, true);//Kfausnight 20200721
    a47a:	4804      	ldr	r0, [pc, #16]	; (a48c <sd_mmc_spi_select_device+0x1c>)
    a47c:	3201      	adds	r2, #1
    a47e:	4b04      	ldr	r3, [pc, #16]	; (a490 <sd_mmc_spi_select_device+0x20>)
    a480:	4798      	blx	r3
}
    a482:	bd10      	pop	{r4, pc}
    a484:	20000e84 	.word	0x20000e84
    a488:	20001118 	.word	0x20001118
    a48c:	20001134 	.word	0x20001134
    a490:	00014a29 	.word	0x00014a29

0000a494 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    a494:	2200      	movs	r2, #0
{
    a496:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    a498:	4b03      	ldr	r3, [pc, #12]	; (a4a8 <sd_mmc_spi_deselect_device+0x14>)
	//spi_select_slave(&spi_main, &sd_mmc_spi_devices[slot], false);
	spi_select_slave(&spi_main, &slave_SD, false);//Kfausnight 20200721
    a49a:	4904      	ldr	r1, [pc, #16]	; (a4ac <sd_mmc_spi_deselect_device+0x18>)
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    a49c:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&spi_main, &slave_SD, false);//Kfausnight 20200721
    a49e:	4804      	ldr	r0, [pc, #16]	; (a4b0 <sd_mmc_spi_deselect_device+0x1c>)
    a4a0:	4b04      	ldr	r3, [pc, #16]	; (a4b4 <sd_mmc_spi_deselect_device+0x20>)
    a4a2:	4798      	blx	r3
}
    a4a4:	bd10      	pop	{r4, pc}
    a4a6:	46c0      	nop			; (mov r8, r8)
    a4a8:	20000e84 	.word	0x20000e84
    a4ac:	20001118 	.word	0x20001118
    a4b0:	20001134 	.word	0x20001134
    a4b4:	00014a29 	.word	0x00014a29

0000a4b8 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    a4b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    a4ba:	b083      	sub	sp, #12
	uint8_t i;
	uint8_t dummy = 0xFF;
    a4bc:	466b      	mov	r3, sp
    a4be:	1ddd      	adds	r5, r3, #7
    a4c0:	23ff      	movs	r3, #255	; 0xff

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    a4c2:	2200      	movs	r2, #0
    a4c4:	240a      	movs	r4, #10
	uint8_t dummy = 0xFF;
    a4c6:	702b      	strb	r3, [r5, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    a4c8:	4b06      	ldr	r3, [pc, #24]	; (a4e4 <sd_mmc_spi_send_clock+0x2c>)
    a4ca:	4f07      	ldr	r7, [pc, #28]	; (a4e8 <sd_mmc_spi_send_clock+0x30>)
    a4cc:	4e07      	ldr	r6, [pc, #28]	; (a4ec <sd_mmc_spi_send_clock+0x34>)
    a4ce:	701a      	strb	r2, [r3, #0]
    a4d0:	3c01      	subs	r4, #1
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&spi_main, &dummy, 1); // 8 cycles
    a4d2:	2201      	movs	r2, #1
    a4d4:	0029      	movs	r1, r5
    a4d6:	0038      	movs	r0, r7
    a4d8:	b2e4      	uxtb	r4, r4
    a4da:	47b0      	blx	r6
	for (i = 0; i < 10; i++) {
    a4dc:	2c00      	cmp	r4, #0
    a4de:	d1f7      	bne.n	a4d0 <sd_mmc_spi_send_clock+0x18>
	}
}
    a4e0:	b003      	add	sp, #12
    a4e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a4e4:	20000e84 	.word	0x20000e84
    a4e8:	20001134 	.word	0x20001134
    a4ec:	00014afd 	.word	0x00014afd

0000a4f0 <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    a4f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a4f2:	4657      	mov	r7, sl
    a4f4:	464e      	mov	r6, r9
    a4f6:	4645      	mov	r5, r8
    a4f8:	46de      	mov	lr, fp
    a4fa:	b5e0      	push	{r5, r6, r7, lr}
    a4fc:	b089      	sub	sp, #36	; 0x24
    a4fe:	9303      	str	r3, [sp, #12]
	uint8_t dummy = 0xFF;
    a500:	ab04      	add	r3, sp, #16
    a502:	3305      	adds	r3, #5
    a504:	469c      	mov	ip, r3
{
    a506:	9202      	str	r2, [sp, #8]
	uint8_t dummy = 0xFF;
    a508:	23ff      	movs	r3, #255	; 0xff
    a50a:	4662      	mov	r2, ip
{
    a50c:	4680      	mov	r8, r0
	uint8_t dummy = 0xFF;
    a50e:	7013      	strb	r3, [r2, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    a510:	2300      	movs	r3, #0
    a512:	4ade      	ldr	r2, [pc, #888]	; (a88c <sd_mmc_spi_adtc_start+0x39c>)

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    a514:	203f      	movs	r0, #63	; 0x3f
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    a516:	7013      	strb	r3, [r2, #0]
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    a518:	4643      	mov	r3, r8
    a51a:	4018      	ands	r0, r3
    a51c:	2340      	movs	r3, #64	; 0x40
{
    a51e:	4689      	mov	r9, r1
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    a520:	4318      	orrs	r0, r3
	cmd_token[1] = arg >> 24;
    a522:	000b      	movs	r3, r1
	cmd_token[2] = arg >> 16;
	cmd_token[3] = arg >> 8;
	cmd_token[4] = arg;
    a524:	466a      	mov	r2, sp
	cmd_token[3] = arg >> 8;
    a526:	0a1d      	lsrs	r5, r3, #8
	cmd_token[4] = arg;
    a528:	464b      	mov	r3, r9
    a52a:	71d3      	strb	r3, [r2, #7]
			crc <<= 1;
    a52c:	2300      	movs	r3, #0
			value <<= 1;
    a52e:	0046      	lsls	r6, r0, #1
			crc <<= 1;
    a530:	b2db      	uxtb	r3, r3
    a532:	469a      	mov	sl, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    a534:	405e      	eors	r6, r3
    a536:	466b      	mov	r3, sp
	cmd_token[4] = arg;
    a538:	79d2      	ldrb	r2, [r2, #7]
			if ((value & 0x80) ^ (crc & 0x80)) {
    a53a:	71de      	strb	r6, [r3, #7]
    a53c:	79de      	ldrb	r6, [r3, #7]
				crc ^= 0x09;
    a53e:	4653      	mov	r3, sl
			if ((value & 0x80) ^ (crc & 0x80)) {
    a540:	b276      	sxtb	r6, r6
    a542:	46b1      	mov	r9, r6
				crc ^= 0x09;
    a544:	2609      	movs	r6, #9
    a546:	431e      	orrs	r6, r3
    a548:	46b3      	mov	fp, r6
    a54a:	464e      	mov	r6, r9
	cmd_token[1] = arg >> 24;
    a54c:	0e0f      	lsrs	r7, r1, #24
	cmd_token[2] = arg >> 16;
    a54e:	0c09      	lsrs	r1, r1, #16
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    a550:	ac06      	add	r4, sp, #24
	cmd_token[2] = arg >> 16;
    a552:	b2c9      	uxtb	r1, r1
	cmd_token[3] = arg >> 8;
    a554:	b2ed      	uxtb	r5, r5
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    a556:	7020      	strb	r0, [r4, #0]
	cmd_token[1] = arg >> 24;
    a558:	7067      	strb	r7, [r4, #1]
	cmd_token[2] = arg >> 16;
    a55a:	70a1      	strb	r1, [r4, #2]
	cmd_token[3] = arg >> 8;
    a55c:	70e5      	strb	r5, [r4, #3]
	cmd_token[4] = arg;
    a55e:	7122      	strb	r2, [r4, #4]
    a560:	4653      	mov	r3, sl
    a562:	2e00      	cmp	r6, #0
    a564:	da00      	bge.n	a568 <sd_mmc_spi_adtc_start+0x78>
    a566:	e20f      	b.n	a988 <sd_mmc_spi_adtc_start+0x498>
			crc <<= 1;
    a568:	005b      	lsls	r3, r3, #1
    a56a:	b2db      	uxtb	r3, r3
			value <<= 1;
    a56c:	0086      	lsls	r6, r0, #2
			if ((value & 0x80) ^ (crc & 0x80)) {
    a56e:	405e      	eors	r6, r3
    a570:	46b1      	mov	r9, r6
				crc ^= 0x09;
    a572:	2609      	movs	r6, #9
    a574:	405e      	eors	r6, r3
    a576:	46b3      	mov	fp, r6
    a578:	464e      	mov	r6, r9
    a57a:	0636      	lsls	r6, r6, #24
    a57c:	d500      	bpl.n	a580 <sd_mmc_spi_adtc_start+0x90>
    a57e:	e201      	b.n	a984 <sd_mmc_spi_adtc_start+0x494>
			crc <<= 1;
    a580:	005b      	lsls	r3, r3, #1
    a582:	b2db      	uxtb	r3, r3
			value <<= 1;
    a584:	00c6      	lsls	r6, r0, #3
			if ((value & 0x80) ^ (crc & 0x80)) {
    a586:	405e      	eors	r6, r3
    a588:	46b1      	mov	r9, r6
				crc ^= 0x09;
    a58a:	2609      	movs	r6, #9
    a58c:	405e      	eors	r6, r3
    a58e:	46b3      	mov	fp, r6
    a590:	464e      	mov	r6, r9
    a592:	0636      	lsls	r6, r6, #24
    a594:	d500      	bpl.n	a598 <sd_mmc_spi_adtc_start+0xa8>
    a596:	e1f3      	b.n	a980 <sd_mmc_spi_adtc_start+0x490>
			crc <<= 1;
    a598:	005b      	lsls	r3, r3, #1
    a59a:	b2db      	uxtb	r3, r3
			value <<= 1;
    a59c:	0106      	lsls	r6, r0, #4
			if ((value & 0x80) ^ (crc & 0x80)) {
    a59e:	405e      	eors	r6, r3
    a5a0:	46b1      	mov	r9, r6
				crc ^= 0x09;
    a5a2:	2609      	movs	r6, #9
    a5a4:	405e      	eors	r6, r3
    a5a6:	46b3      	mov	fp, r6
    a5a8:	464e      	mov	r6, r9
    a5aa:	0636      	lsls	r6, r6, #24
    a5ac:	d500      	bpl.n	a5b0 <sd_mmc_spi_adtc_start+0xc0>
    a5ae:	e1e5      	b.n	a97c <sd_mmc_spi_adtc_start+0x48c>
			crc <<= 1;
    a5b0:	005b      	lsls	r3, r3, #1
    a5b2:	b2db      	uxtb	r3, r3
			value <<= 1;
    a5b4:	0146      	lsls	r6, r0, #5
			if ((value & 0x80) ^ (crc & 0x80)) {
    a5b6:	405e      	eors	r6, r3
    a5b8:	46b1      	mov	r9, r6
				crc ^= 0x09;
    a5ba:	2609      	movs	r6, #9
    a5bc:	405e      	eors	r6, r3
    a5be:	46b3      	mov	fp, r6
    a5c0:	464e      	mov	r6, r9
    a5c2:	0636      	lsls	r6, r6, #24
    a5c4:	d500      	bpl.n	a5c8 <sd_mmc_spi_adtc_start+0xd8>
    a5c6:	e1d7      	b.n	a978 <sd_mmc_spi_adtc_start+0x488>
			crc <<= 1;
    a5c8:	005b      	lsls	r3, r3, #1
    a5ca:	b2db      	uxtb	r3, r3
			value <<= 1;
    a5cc:	0186      	lsls	r6, r0, #6
			if ((value & 0x80) ^ (crc & 0x80)) {
    a5ce:	405e      	eors	r6, r3
    a5d0:	46b1      	mov	r9, r6
				crc ^= 0x09;
    a5d2:	2609      	movs	r6, #9
    a5d4:	405e      	eors	r6, r3
    a5d6:	46b3      	mov	fp, r6
    a5d8:	464e      	mov	r6, r9
    a5da:	0636      	lsls	r6, r6, #24
    a5dc:	d500      	bpl.n	a5e0 <sd_mmc_spi_adtc_start+0xf0>
    a5de:	e1c9      	b.n	a974 <sd_mmc_spi_adtc_start+0x484>
    a5e0:	2609      	movs	r6, #9
			crc <<= 1;
    a5e2:	005b      	lsls	r3, r3, #1
    a5e4:	b2db      	uxtb	r3, r3
			value <<= 1;
    a5e6:	01c0      	lsls	r0, r0, #7
			if ((value & 0x80) ^ (crc & 0x80)) {
    a5e8:	4058      	eors	r0, r3
				crc ^= 0x09;
    a5ea:	405e      	eors	r6, r3
    a5ec:	0600      	lsls	r0, r0, #24
    a5ee:	d500      	bpl.n	a5f2 <sd_mmc_spi_adtc_start+0x102>
    a5f0:	e1be      	b.n	a970 <sd_mmc_spi_adtc_start+0x480>
			if ((value & 0x80) ^ (crc & 0x80)) {
    a5f2:	0038      	movs	r0, r7
				crc ^= 0x09;
    a5f4:	2609      	movs	r6, #9
			crc <<= 1;
    a5f6:	005b      	lsls	r3, r3, #1
    a5f8:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    a5fa:	4058      	eors	r0, r3
    a5fc:	b240      	sxtb	r0, r0
				crc ^= 0x09;
    a5fe:	405e      	eors	r6, r3
    a600:	2800      	cmp	r0, #0
    a602:	da00      	bge.n	a606 <sd_mmc_spi_adtc_start+0x116>
    a604:	e1b2      	b.n	a96c <sd_mmc_spi_adtc_start+0x47c>
    a606:	2609      	movs	r6, #9
			crc <<= 1;
    a608:	005b      	lsls	r3, r3, #1
    a60a:	b2db      	uxtb	r3, r3
			value <<= 1;
    a60c:	0078      	lsls	r0, r7, #1
			if ((value & 0x80) ^ (crc & 0x80)) {
    a60e:	4058      	eors	r0, r3
				crc ^= 0x09;
    a610:	405e      	eors	r6, r3
    a612:	0600      	lsls	r0, r0, #24
    a614:	d500      	bpl.n	a618 <sd_mmc_spi_adtc_start+0x128>
    a616:	e1a7      	b.n	a968 <sd_mmc_spi_adtc_start+0x478>
    a618:	2609      	movs	r6, #9
			crc <<= 1;
    a61a:	005b      	lsls	r3, r3, #1
    a61c:	b2db      	uxtb	r3, r3
			value <<= 1;
    a61e:	00b8      	lsls	r0, r7, #2
			if ((value & 0x80) ^ (crc & 0x80)) {
    a620:	4058      	eors	r0, r3
				crc ^= 0x09;
    a622:	405e      	eors	r6, r3
    a624:	0600      	lsls	r0, r0, #24
    a626:	d500      	bpl.n	a62a <sd_mmc_spi_adtc_start+0x13a>
    a628:	e19c      	b.n	a964 <sd_mmc_spi_adtc_start+0x474>
    a62a:	2609      	movs	r6, #9
			crc <<= 1;
    a62c:	005b      	lsls	r3, r3, #1
    a62e:	b2db      	uxtb	r3, r3
			value <<= 1;
    a630:	00f8      	lsls	r0, r7, #3
			if ((value & 0x80) ^ (crc & 0x80)) {
    a632:	4058      	eors	r0, r3
				crc ^= 0x09;
    a634:	405e      	eors	r6, r3
    a636:	0600      	lsls	r0, r0, #24
    a638:	d500      	bpl.n	a63c <sd_mmc_spi_adtc_start+0x14c>
    a63a:	e191      	b.n	a960 <sd_mmc_spi_adtc_start+0x470>
    a63c:	2609      	movs	r6, #9
			crc <<= 1;
    a63e:	005b      	lsls	r3, r3, #1
    a640:	b2db      	uxtb	r3, r3
			value <<= 1;
    a642:	0138      	lsls	r0, r7, #4
			if ((value & 0x80) ^ (crc & 0x80)) {
    a644:	4058      	eors	r0, r3
				crc ^= 0x09;
    a646:	405e      	eors	r6, r3
    a648:	0600      	lsls	r0, r0, #24
    a64a:	d500      	bpl.n	a64e <sd_mmc_spi_adtc_start+0x15e>
    a64c:	e186      	b.n	a95c <sd_mmc_spi_adtc_start+0x46c>
    a64e:	2609      	movs	r6, #9
			crc <<= 1;
    a650:	005b      	lsls	r3, r3, #1
    a652:	b2db      	uxtb	r3, r3
			value <<= 1;
    a654:	0178      	lsls	r0, r7, #5
			if ((value & 0x80) ^ (crc & 0x80)) {
    a656:	4058      	eors	r0, r3
				crc ^= 0x09;
    a658:	405e      	eors	r6, r3
    a65a:	0600      	lsls	r0, r0, #24
    a65c:	d500      	bpl.n	a660 <sd_mmc_spi_adtc_start+0x170>
    a65e:	e17b      	b.n	a958 <sd_mmc_spi_adtc_start+0x468>
    a660:	2609      	movs	r6, #9
			crc <<= 1;
    a662:	005b      	lsls	r3, r3, #1
    a664:	b2db      	uxtb	r3, r3
			value <<= 1;
    a666:	01b8      	lsls	r0, r7, #6
			if ((value & 0x80) ^ (crc & 0x80)) {
    a668:	4058      	eors	r0, r3
				crc ^= 0x09;
    a66a:	405e      	eors	r6, r3
    a66c:	0600      	lsls	r0, r0, #24
    a66e:	d500      	bpl.n	a672 <sd_mmc_spi_adtc_start+0x182>
    a670:	e170      	b.n	a954 <sd_mmc_spi_adtc_start+0x464>
			value <<= 1;
    a672:	01f8      	lsls	r0, r7, #7
				crc ^= 0x09;
    a674:	2709      	movs	r7, #9
			crc <<= 1;
    a676:	005b      	lsls	r3, r3, #1
    a678:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    a67a:	4058      	eors	r0, r3
				crc ^= 0x09;
    a67c:	405f      	eors	r7, r3
    a67e:	0600      	lsls	r0, r0, #24
    a680:	d500      	bpl.n	a684 <sd_mmc_spi_adtc_start+0x194>
    a682:	e165      	b.n	a950 <sd_mmc_spi_adtc_start+0x460>
			if ((value & 0x80) ^ (crc & 0x80)) {
    a684:	0008      	movs	r0, r1
				crc ^= 0x09;
    a686:	2709      	movs	r7, #9
			crc <<= 1;
    a688:	005b      	lsls	r3, r3, #1
    a68a:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    a68c:	4058      	eors	r0, r3
    a68e:	b240      	sxtb	r0, r0
				crc ^= 0x09;
    a690:	405f      	eors	r7, r3
    a692:	2800      	cmp	r0, #0
    a694:	da00      	bge.n	a698 <sd_mmc_spi_adtc_start+0x1a8>
    a696:	e159      	b.n	a94c <sd_mmc_spi_adtc_start+0x45c>
    a698:	2709      	movs	r7, #9
			crc <<= 1;
    a69a:	005b      	lsls	r3, r3, #1
    a69c:	b2db      	uxtb	r3, r3
			value <<= 1;
    a69e:	0048      	lsls	r0, r1, #1
			if ((value & 0x80) ^ (crc & 0x80)) {
    a6a0:	4058      	eors	r0, r3
				crc ^= 0x09;
    a6a2:	405f      	eors	r7, r3
    a6a4:	0600      	lsls	r0, r0, #24
    a6a6:	d500      	bpl.n	a6aa <sd_mmc_spi_adtc_start+0x1ba>
    a6a8:	e14e      	b.n	a948 <sd_mmc_spi_adtc_start+0x458>
    a6aa:	2709      	movs	r7, #9
			crc <<= 1;
    a6ac:	005b      	lsls	r3, r3, #1
    a6ae:	b2db      	uxtb	r3, r3
			value <<= 1;
    a6b0:	0088      	lsls	r0, r1, #2
			if ((value & 0x80) ^ (crc & 0x80)) {
    a6b2:	4058      	eors	r0, r3
				crc ^= 0x09;
    a6b4:	405f      	eors	r7, r3
    a6b6:	0600      	lsls	r0, r0, #24
    a6b8:	d500      	bpl.n	a6bc <sd_mmc_spi_adtc_start+0x1cc>
    a6ba:	e143      	b.n	a944 <sd_mmc_spi_adtc_start+0x454>
    a6bc:	2709      	movs	r7, #9
			crc <<= 1;
    a6be:	005b      	lsls	r3, r3, #1
    a6c0:	b2db      	uxtb	r3, r3
			value <<= 1;
    a6c2:	00c8      	lsls	r0, r1, #3
			if ((value & 0x80) ^ (crc & 0x80)) {
    a6c4:	4058      	eors	r0, r3
				crc ^= 0x09;
    a6c6:	405f      	eors	r7, r3
    a6c8:	0600      	lsls	r0, r0, #24
    a6ca:	d500      	bpl.n	a6ce <sd_mmc_spi_adtc_start+0x1de>
    a6cc:	e138      	b.n	a940 <sd_mmc_spi_adtc_start+0x450>
    a6ce:	2709      	movs	r7, #9
			crc <<= 1;
    a6d0:	005b      	lsls	r3, r3, #1
    a6d2:	b2db      	uxtb	r3, r3
			value <<= 1;
    a6d4:	0108      	lsls	r0, r1, #4
			if ((value & 0x80) ^ (crc & 0x80)) {
    a6d6:	4058      	eors	r0, r3
				crc ^= 0x09;
    a6d8:	405f      	eors	r7, r3
    a6da:	0600      	lsls	r0, r0, #24
    a6dc:	d500      	bpl.n	a6e0 <sd_mmc_spi_adtc_start+0x1f0>
    a6de:	e12d      	b.n	a93c <sd_mmc_spi_adtc_start+0x44c>
    a6e0:	2709      	movs	r7, #9
			crc <<= 1;
    a6e2:	005b      	lsls	r3, r3, #1
    a6e4:	b2db      	uxtb	r3, r3
			value <<= 1;
    a6e6:	0148      	lsls	r0, r1, #5
			if ((value & 0x80) ^ (crc & 0x80)) {
    a6e8:	4058      	eors	r0, r3
				crc ^= 0x09;
    a6ea:	405f      	eors	r7, r3
    a6ec:	0600      	lsls	r0, r0, #24
    a6ee:	d500      	bpl.n	a6f2 <sd_mmc_spi_adtc_start+0x202>
    a6f0:	e122      	b.n	a938 <sd_mmc_spi_adtc_start+0x448>
    a6f2:	2709      	movs	r7, #9
			crc <<= 1;
    a6f4:	005b      	lsls	r3, r3, #1
    a6f6:	b2db      	uxtb	r3, r3
			value <<= 1;
    a6f8:	0188      	lsls	r0, r1, #6
			if ((value & 0x80) ^ (crc & 0x80)) {
    a6fa:	4058      	eors	r0, r3
				crc ^= 0x09;
    a6fc:	405f      	eors	r7, r3
    a6fe:	0600      	lsls	r0, r0, #24
    a700:	d500      	bpl.n	a704 <sd_mmc_spi_adtc_start+0x214>
    a702:	e117      	b.n	a934 <sd_mmc_spi_adtc_start+0x444>
    a704:	2009      	movs	r0, #9
			crc <<= 1;
    a706:	005b      	lsls	r3, r3, #1
    a708:	b2db      	uxtb	r3, r3
			value <<= 1;
    a70a:	01c9      	lsls	r1, r1, #7
			if ((value & 0x80) ^ (crc & 0x80)) {
    a70c:	4059      	eors	r1, r3
				crc ^= 0x09;
    a70e:	4058      	eors	r0, r3
    a710:	0609      	lsls	r1, r1, #24
    a712:	d500      	bpl.n	a716 <sd_mmc_spi_adtc_start+0x226>
    a714:	e10c      	b.n	a930 <sd_mmc_spi_adtc_start+0x440>
			if ((value & 0x80) ^ (crc & 0x80)) {
    a716:	0029      	movs	r1, r5
				crc ^= 0x09;
    a718:	2009      	movs	r0, #9
			crc <<= 1;
    a71a:	005b      	lsls	r3, r3, #1
    a71c:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    a71e:	4059      	eors	r1, r3
    a720:	b249      	sxtb	r1, r1
				crc ^= 0x09;
    a722:	4058      	eors	r0, r3
    a724:	2900      	cmp	r1, #0
    a726:	da00      	bge.n	a72a <sd_mmc_spi_adtc_start+0x23a>
    a728:	e100      	b.n	a92c <sd_mmc_spi_adtc_start+0x43c>
    a72a:	2009      	movs	r0, #9
			crc <<= 1;
    a72c:	005b      	lsls	r3, r3, #1
    a72e:	b2db      	uxtb	r3, r3
			value <<= 1;
    a730:	0069      	lsls	r1, r5, #1
			if ((value & 0x80) ^ (crc & 0x80)) {
    a732:	4059      	eors	r1, r3
				crc ^= 0x09;
    a734:	4058      	eors	r0, r3
    a736:	0609      	lsls	r1, r1, #24
    a738:	d500      	bpl.n	a73c <sd_mmc_spi_adtc_start+0x24c>
    a73a:	e0f5      	b.n	a928 <sd_mmc_spi_adtc_start+0x438>
    a73c:	2009      	movs	r0, #9
			crc <<= 1;
    a73e:	005b      	lsls	r3, r3, #1
    a740:	b2db      	uxtb	r3, r3
			value <<= 1;
    a742:	00a9      	lsls	r1, r5, #2
			if ((value & 0x80) ^ (crc & 0x80)) {
    a744:	4059      	eors	r1, r3
				crc ^= 0x09;
    a746:	4058      	eors	r0, r3
    a748:	0609      	lsls	r1, r1, #24
    a74a:	d500      	bpl.n	a74e <sd_mmc_spi_adtc_start+0x25e>
    a74c:	e0ea      	b.n	a924 <sd_mmc_spi_adtc_start+0x434>
    a74e:	2009      	movs	r0, #9
			crc <<= 1;
    a750:	005b      	lsls	r3, r3, #1
    a752:	b2db      	uxtb	r3, r3
			value <<= 1;
    a754:	00e9      	lsls	r1, r5, #3
			if ((value & 0x80) ^ (crc & 0x80)) {
    a756:	4059      	eors	r1, r3
				crc ^= 0x09;
    a758:	4058      	eors	r0, r3
    a75a:	0609      	lsls	r1, r1, #24
    a75c:	d500      	bpl.n	a760 <sd_mmc_spi_adtc_start+0x270>
    a75e:	e0df      	b.n	a920 <sd_mmc_spi_adtc_start+0x430>
    a760:	2009      	movs	r0, #9
			crc <<= 1;
    a762:	005b      	lsls	r3, r3, #1
    a764:	b2db      	uxtb	r3, r3
			value <<= 1;
    a766:	0129      	lsls	r1, r5, #4
			if ((value & 0x80) ^ (crc & 0x80)) {
    a768:	4059      	eors	r1, r3
				crc ^= 0x09;
    a76a:	4058      	eors	r0, r3
    a76c:	0609      	lsls	r1, r1, #24
    a76e:	d500      	bpl.n	a772 <sd_mmc_spi_adtc_start+0x282>
    a770:	e0d4      	b.n	a91c <sd_mmc_spi_adtc_start+0x42c>
    a772:	2009      	movs	r0, #9
			crc <<= 1;
    a774:	005b      	lsls	r3, r3, #1
    a776:	b2db      	uxtb	r3, r3
			value <<= 1;
    a778:	0169      	lsls	r1, r5, #5
			if ((value & 0x80) ^ (crc & 0x80)) {
    a77a:	4059      	eors	r1, r3
				crc ^= 0x09;
    a77c:	4058      	eors	r0, r3
    a77e:	0609      	lsls	r1, r1, #24
    a780:	d500      	bpl.n	a784 <sd_mmc_spi_adtc_start+0x294>
    a782:	e0c9      	b.n	a918 <sd_mmc_spi_adtc_start+0x428>
    a784:	2009      	movs	r0, #9
			crc <<= 1;
    a786:	005b      	lsls	r3, r3, #1
    a788:	b2db      	uxtb	r3, r3
			value <<= 1;
    a78a:	01a9      	lsls	r1, r5, #6
			if ((value & 0x80) ^ (crc & 0x80)) {
    a78c:	4059      	eors	r1, r3
				crc ^= 0x09;
    a78e:	4058      	eors	r0, r3
    a790:	0609      	lsls	r1, r1, #24
    a792:	d500      	bpl.n	a796 <sd_mmc_spi_adtc_start+0x2a6>
    a794:	e0be      	b.n	a914 <sd_mmc_spi_adtc_start+0x424>
    a796:	2109      	movs	r1, #9
			crc <<= 1;
    a798:	005b      	lsls	r3, r3, #1
    a79a:	b2db      	uxtb	r3, r3
			value <<= 1;
    a79c:	01ed      	lsls	r5, r5, #7
			if ((value & 0x80) ^ (crc & 0x80)) {
    a79e:	405d      	eors	r5, r3
				crc ^= 0x09;
    a7a0:	4059      	eors	r1, r3
    a7a2:	0628      	lsls	r0, r5, #24
    a7a4:	d500      	bpl.n	a7a8 <sd_mmc_spi_adtc_start+0x2b8>
    a7a6:	e0b3      	b.n	a910 <sd_mmc_spi_adtc_start+0x420>
			if ((value & 0x80) ^ (crc & 0x80)) {
    a7a8:	0011      	movs	r1, r2
				crc ^= 0x09;
    a7aa:	2009      	movs	r0, #9
			crc <<= 1;
    a7ac:	005b      	lsls	r3, r3, #1
    a7ae:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    a7b0:	4059      	eors	r1, r3
    a7b2:	b249      	sxtb	r1, r1
				crc ^= 0x09;
    a7b4:	4058      	eors	r0, r3
    a7b6:	2900      	cmp	r1, #0
    a7b8:	da00      	bge.n	a7bc <sd_mmc_spi_adtc_start+0x2cc>
    a7ba:	e0a7      	b.n	a90c <sd_mmc_spi_adtc_start+0x41c>
    a7bc:	2009      	movs	r0, #9
			crc <<= 1;
    a7be:	005b      	lsls	r3, r3, #1
    a7c0:	b2db      	uxtb	r3, r3
			value <<= 1;
    a7c2:	0051      	lsls	r1, r2, #1
			if ((value & 0x80) ^ (crc & 0x80)) {
    a7c4:	4059      	eors	r1, r3
				crc ^= 0x09;
    a7c6:	4058      	eors	r0, r3
    a7c8:	0609      	lsls	r1, r1, #24
    a7ca:	d500      	bpl.n	a7ce <sd_mmc_spi_adtc_start+0x2de>
    a7cc:	e09c      	b.n	a908 <sd_mmc_spi_adtc_start+0x418>
    a7ce:	2009      	movs	r0, #9
			crc <<= 1;
    a7d0:	005b      	lsls	r3, r3, #1
    a7d2:	b2db      	uxtb	r3, r3
			value <<= 1;
    a7d4:	0091      	lsls	r1, r2, #2
			if ((value & 0x80) ^ (crc & 0x80)) {
    a7d6:	4059      	eors	r1, r3
				crc ^= 0x09;
    a7d8:	4058      	eors	r0, r3
    a7da:	0609      	lsls	r1, r1, #24
    a7dc:	d500      	bpl.n	a7e0 <sd_mmc_spi_adtc_start+0x2f0>
    a7de:	e091      	b.n	a904 <sd_mmc_spi_adtc_start+0x414>
    a7e0:	2009      	movs	r0, #9
			crc <<= 1;
    a7e2:	005b      	lsls	r3, r3, #1
    a7e4:	b2db      	uxtb	r3, r3
			value <<= 1;
    a7e6:	00d1      	lsls	r1, r2, #3
			if ((value & 0x80) ^ (crc & 0x80)) {
    a7e8:	4059      	eors	r1, r3
				crc ^= 0x09;
    a7ea:	4058      	eors	r0, r3
    a7ec:	0609      	lsls	r1, r1, #24
    a7ee:	d500      	bpl.n	a7f2 <sd_mmc_spi_adtc_start+0x302>
    a7f0:	e086      	b.n	a900 <sd_mmc_spi_adtc_start+0x410>
    a7f2:	2009      	movs	r0, #9
			crc <<= 1;
    a7f4:	005b      	lsls	r3, r3, #1
    a7f6:	b2db      	uxtb	r3, r3
			value <<= 1;
    a7f8:	0111      	lsls	r1, r2, #4
			if ((value & 0x80) ^ (crc & 0x80)) {
    a7fa:	4059      	eors	r1, r3
				crc ^= 0x09;
    a7fc:	4058      	eors	r0, r3
    a7fe:	0609      	lsls	r1, r1, #24
    a800:	d500      	bpl.n	a804 <sd_mmc_spi_adtc_start+0x314>
    a802:	e07b      	b.n	a8fc <sd_mmc_spi_adtc_start+0x40c>
    a804:	2009      	movs	r0, #9
			crc <<= 1;
    a806:	005b      	lsls	r3, r3, #1
    a808:	b2db      	uxtb	r3, r3
			value <<= 1;
    a80a:	0151      	lsls	r1, r2, #5
			if ((value & 0x80) ^ (crc & 0x80)) {
    a80c:	4059      	eors	r1, r3
				crc ^= 0x09;
    a80e:	4058      	eors	r0, r3
    a810:	0609      	lsls	r1, r1, #24
    a812:	d500      	bpl.n	a816 <sd_mmc_spi_adtc_start+0x326>
    a814:	e070      	b.n	a8f8 <sd_mmc_spi_adtc_start+0x408>
    a816:	2009      	movs	r0, #9
			crc <<= 1;
    a818:	005b      	lsls	r3, r3, #1
    a81a:	b2db      	uxtb	r3, r3
			value <<= 1;
    a81c:	0191      	lsls	r1, r2, #6
			if ((value & 0x80) ^ (crc & 0x80)) {
    a81e:	4059      	eors	r1, r3
				crc ^= 0x09;
    a820:	4058      	eors	r0, r3
    a822:	0609      	lsls	r1, r1, #24
    a824:	d466      	bmi.n	a8f4 <sd_mmc_spi_adtc_start+0x404>
    a826:	2109      	movs	r1, #9
			crc <<= 1;
    a828:	005b      	lsls	r3, r3, #1
    a82a:	b2db      	uxtb	r3, r3
			value <<= 1;
    a82c:	01d2      	lsls	r2, r2, #7
			if ((value & 0x80) ^ (crc & 0x80)) {
    a82e:	405a      	eors	r2, r3
				crc ^= 0x09;
    a830:	4059      	eors	r1, r3
	crc = (crc << 1) | 1;
    a832:	0612      	lsls	r2, r2, #24
    a834:	d45c      	bmi.n	a8f0 <sd_mmc_spi_adtc_start+0x400>
    a836:	2201      	movs	r2, #1
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&spi_main, &dummy, 1);
    a838:	4d15      	ldr	r5, [pc, #84]	; (a890 <sd_mmc_spi_adtc_start+0x3a0>)
	crc = (crc << 1) | 1;
    a83a:	b2db      	uxtb	r3, r3
    a83c:	005b      	lsls	r3, r3, #1
    a83e:	4313      	orrs	r3, r2
	spi_write_buffer_wait(&spi_main, &dummy, 1);
    a840:	4661      	mov	r1, ip
    a842:	4e14      	ldr	r6, [pc, #80]	; (a894 <sd_mmc_spi_adtc_start+0x3a4>)
    a844:	2201      	movs	r2, #1
    a846:	0028      	movs	r0, r5
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    a848:	7163      	strb	r3, [r4, #5]
	spi_write_buffer_wait(&spi_main, &dummy, 1);
    a84a:	47b0      	blx	r6
	// Send command
	spi_write_buffer_wait(&spi_main, cmd_token, sizeof(cmd_token));
    a84c:	0021      	movs	r1, r4
    a84e:	2206      	movs	r2, #6
    a850:	0028      	movs	r0, r5
    a852:	47b0      	blx	r6

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    a854:	ab04      	add	r3, sp, #16
    a856:	1d9c      	adds	r4, r3, #6
    a858:	23ff      	movs	r3, #255	; 0xff
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&spi_main, &r1, 1,
    a85a:	2201      	movs	r2, #1
    a85c:	0021      	movs	r1, r4
    a85e:	0028      	movs	r0, r5
    a860:	4f0d      	ldr	r7, [pc, #52]	; (a898 <sd_mmc_spi_adtc_start+0x3a8>)
	r1 = 0xFF;
    a862:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&spi_main, &r1, 1,
    a864:	2607      	movs	r6, #7
    a866:	47b8      	blx	r7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&spi_main, &r1, 1,
    a868:	23ff      	movs	r3, #255	; 0xff
    a86a:	2201      	movs	r2, #1
    a86c:	0021      	movs	r1, r4
    a86e:	0028      	movs	r0, r5
    a870:	47b8      	blx	r7
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    a872:	7823      	ldrb	r3, [r4, #0]
    a874:	b25a      	sxtb	r2, r3
    a876:	2a00      	cmp	r2, #0
    a878:	da17      	bge.n	a8aa <sd_mmc_spi_adtc_start+0x3ba>
    a87a:	3e01      	subs	r6, #1
    a87c:	b2f6      	uxtb	r6, r6
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    a87e:	2e00      	cmp	r6, #0
    a880:	d1f2      	bne.n	a868 <sd_mmc_spi_adtc_start+0x378>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    a882:	2302      	movs	r3, #2
			return false;
    a884:	2000      	movs	r0, #0
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    a886:	4a01      	ldr	r2, [pc, #4]	; (a88c <sd_mmc_spi_adtc_start+0x39c>)
    a888:	7013      	strb	r3, [r2, #0]
    a88a:	e007      	b.n	a89c <sd_mmc_spi_adtc_start+0x3ac>
    a88c:	20000e84 	.word	0x20000e84
    a890:	20001134 	.word	0x20001134
    a894:	00014afd 	.word	0x00014afd
    a898:	00014909 	.word	0x00014909

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
    a89c:	b009      	add	sp, #36	; 0x24
    a89e:	bc3c      	pop	{r2, r3, r4, r5}
    a8a0:	4690      	mov	r8, r2
    a8a2:	4699      	mov	r9, r3
    a8a4:	46a2      	mov	sl, r4
    a8a6:	46ab      	mov	fp, r5
    a8a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
    a8aa:	4a5c      	ldr	r2, [pc, #368]	; (aa1c <sd_mmc_spi_adtc_start+0x52c>)
    a8ac:	4693      	mov	fp, r2
    a8ae:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
    a8b0:	071a      	lsls	r2, r3, #28
    a8b2:	d46b      	bmi.n	a98c <sd_mmc_spi_adtc_start+0x49c>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    a8b4:	075a      	lsls	r2, r3, #29
    a8b6:	d46e      	bmi.n	a996 <sd_mmc_spi_adtc_start+0x4a6>
	if (r1 & ~R1_SPI_IDLE) {
    a8b8:	2201      	movs	r2, #1
    a8ba:	4393      	bics	r3, r2
    a8bc:	d000      	beq.n	a8c0 <sd_mmc_spi_adtc_start+0x3d0>
    a8be:	e0a4      	b.n	aa0a <sd_mmc_spi_adtc_start+0x51a>
	if (cmd & SDMMC_RESP_BUSY) {
    a8c0:	4643      	mov	r3, r8
    a8c2:	049b      	lsls	r3, r3, #18
    a8c4:	d46c      	bmi.n	a9a0 <sd_mmc_spi_adtc_start+0x4b0>
	if (cmd & SDMMC_RESP_8) {
    a8c6:	4643      	mov	r3, r8
    a8c8:	059b      	lsls	r3, r3, #22
    a8ca:	d500      	bpl.n	a8ce <sd_mmc_spi_adtc_start+0x3de>
    a8cc:	e094      	b.n	a9f8 <sd_mmc_spi_adtc_start+0x508>
	if (cmd & SDMMC_RESP_32) {
    a8ce:	4643      	mov	r3, r8
    a8d0:	055b      	lsls	r3, r3, #21
    a8d2:	d500      	bpl.n	a8d6 <sd_mmc_spi_adtc_start+0x3e6>
    a8d4:	e085      	b.n	a9e2 <sd_mmc_spi_adtc_start+0x4f2>
	sd_mmc_spi_block_size = block_size;
    a8d6:	466a      	mov	r2, sp
    a8d8:	4b51      	ldr	r3, [pc, #324]	; (aa20 <sd_mmc_spi_adtc_start+0x530>)
    a8da:	8912      	ldrh	r2, [r2, #8]
	return true; // Command complete
    a8dc:	2001      	movs	r0, #1
	sd_mmc_spi_block_size = block_size;
    a8de:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    a8e0:	466a      	mov	r2, sp
    a8e2:	4b50      	ldr	r3, [pc, #320]	; (aa24 <sd_mmc_spi_adtc_start+0x534>)
    a8e4:	8992      	ldrh	r2, [r2, #12]
    a8e6:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    a8e8:	2200      	movs	r2, #0
    a8ea:	4b4f      	ldr	r3, [pc, #316]	; (aa28 <sd_mmc_spi_adtc_start+0x538>)
    a8ec:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    a8ee:	e7d5      	b.n	a89c <sd_mmc_spi_adtc_start+0x3ac>
	crc = (crc << 1) | 1;
    a8f0:	1c0b      	adds	r3, r1, #0
    a8f2:	e7a0      	b.n	a836 <sd_mmc_spi_adtc_start+0x346>
    a8f4:	1c03      	adds	r3, r0, #0
    a8f6:	e796      	b.n	a826 <sd_mmc_spi_adtc_start+0x336>
    a8f8:	1c03      	adds	r3, r0, #0
    a8fa:	e78c      	b.n	a816 <sd_mmc_spi_adtc_start+0x326>
    a8fc:	1c03      	adds	r3, r0, #0
    a8fe:	e781      	b.n	a804 <sd_mmc_spi_adtc_start+0x314>
    a900:	1c03      	adds	r3, r0, #0
    a902:	e776      	b.n	a7f2 <sd_mmc_spi_adtc_start+0x302>
    a904:	1c03      	adds	r3, r0, #0
    a906:	e76b      	b.n	a7e0 <sd_mmc_spi_adtc_start+0x2f0>
    a908:	1c03      	adds	r3, r0, #0
    a90a:	e760      	b.n	a7ce <sd_mmc_spi_adtc_start+0x2de>
    a90c:	1c03      	adds	r3, r0, #0
    a90e:	e755      	b.n	a7bc <sd_mmc_spi_adtc_start+0x2cc>
    a910:	1c0b      	adds	r3, r1, #0
    a912:	e749      	b.n	a7a8 <sd_mmc_spi_adtc_start+0x2b8>
    a914:	1c03      	adds	r3, r0, #0
    a916:	e73e      	b.n	a796 <sd_mmc_spi_adtc_start+0x2a6>
    a918:	1c03      	adds	r3, r0, #0
    a91a:	e733      	b.n	a784 <sd_mmc_spi_adtc_start+0x294>
    a91c:	1c03      	adds	r3, r0, #0
    a91e:	e728      	b.n	a772 <sd_mmc_spi_adtc_start+0x282>
    a920:	1c03      	adds	r3, r0, #0
    a922:	e71d      	b.n	a760 <sd_mmc_spi_adtc_start+0x270>
    a924:	1c03      	adds	r3, r0, #0
    a926:	e712      	b.n	a74e <sd_mmc_spi_adtc_start+0x25e>
    a928:	1c03      	adds	r3, r0, #0
    a92a:	e707      	b.n	a73c <sd_mmc_spi_adtc_start+0x24c>
    a92c:	1c03      	adds	r3, r0, #0
    a92e:	e6fc      	b.n	a72a <sd_mmc_spi_adtc_start+0x23a>
    a930:	1c03      	adds	r3, r0, #0
    a932:	e6f0      	b.n	a716 <sd_mmc_spi_adtc_start+0x226>
    a934:	1c3b      	adds	r3, r7, #0
    a936:	e6e5      	b.n	a704 <sd_mmc_spi_adtc_start+0x214>
    a938:	1c3b      	adds	r3, r7, #0
    a93a:	e6da      	b.n	a6f2 <sd_mmc_spi_adtc_start+0x202>
    a93c:	1c3b      	adds	r3, r7, #0
    a93e:	e6cf      	b.n	a6e0 <sd_mmc_spi_adtc_start+0x1f0>
    a940:	1c3b      	adds	r3, r7, #0
    a942:	e6c4      	b.n	a6ce <sd_mmc_spi_adtc_start+0x1de>
    a944:	1c3b      	adds	r3, r7, #0
    a946:	e6b9      	b.n	a6bc <sd_mmc_spi_adtc_start+0x1cc>
    a948:	1c3b      	adds	r3, r7, #0
    a94a:	e6ae      	b.n	a6aa <sd_mmc_spi_adtc_start+0x1ba>
    a94c:	1c3b      	adds	r3, r7, #0
    a94e:	e6a3      	b.n	a698 <sd_mmc_spi_adtc_start+0x1a8>
    a950:	1c3b      	adds	r3, r7, #0
    a952:	e697      	b.n	a684 <sd_mmc_spi_adtc_start+0x194>
    a954:	1c33      	adds	r3, r6, #0
    a956:	e68c      	b.n	a672 <sd_mmc_spi_adtc_start+0x182>
    a958:	1c33      	adds	r3, r6, #0
    a95a:	e681      	b.n	a660 <sd_mmc_spi_adtc_start+0x170>
    a95c:	1c33      	adds	r3, r6, #0
    a95e:	e676      	b.n	a64e <sd_mmc_spi_adtc_start+0x15e>
    a960:	1c33      	adds	r3, r6, #0
    a962:	e66b      	b.n	a63c <sd_mmc_spi_adtc_start+0x14c>
    a964:	1c33      	adds	r3, r6, #0
    a966:	e660      	b.n	a62a <sd_mmc_spi_adtc_start+0x13a>
    a968:	1c33      	adds	r3, r6, #0
    a96a:	e655      	b.n	a618 <sd_mmc_spi_adtc_start+0x128>
    a96c:	1c33      	adds	r3, r6, #0
    a96e:	e64a      	b.n	a606 <sd_mmc_spi_adtc_start+0x116>
    a970:	1c33      	adds	r3, r6, #0
    a972:	e63e      	b.n	a5f2 <sd_mmc_spi_adtc_start+0x102>
    a974:	465b      	mov	r3, fp
    a976:	e633      	b.n	a5e0 <sd_mmc_spi_adtc_start+0xf0>
    a978:	465b      	mov	r3, fp
    a97a:	e625      	b.n	a5c8 <sd_mmc_spi_adtc_start+0xd8>
    a97c:	465b      	mov	r3, fp
    a97e:	e617      	b.n	a5b0 <sd_mmc_spi_adtc_start+0xc0>
    a980:	465b      	mov	r3, fp
    a982:	e609      	b.n	a598 <sd_mmc_spi_adtc_start+0xa8>
    a984:	465b      	mov	r3, fp
    a986:	e5fb      	b.n	a580 <sd_mmc_spi_adtc_start+0x90>
    a988:	465b      	mov	r3, fp
    a98a:	e5ed      	b.n	a568 <sd_mmc_spi_adtc_start+0x78>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    a98c:	2306      	movs	r3, #6
    a98e:	4a27      	ldr	r2, [pc, #156]	; (aa2c <sd_mmc_spi_adtc_start+0x53c>)
		return false;
    a990:	2000      	movs	r0, #0
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    a992:	7013      	strb	r3, [r2, #0]
		return false;
    a994:	e782      	b.n	a89c <sd_mmc_spi_adtc_start+0x3ac>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    a996:	2309      	movs	r3, #9
    a998:	4a24      	ldr	r2, [pc, #144]	; (aa2c <sd_mmc_spi_adtc_start+0x53c>)
		return false;
    a99a:	2000      	movs	r0, #0
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    a99c:	7013      	strb	r3, [r2, #0]
		return false;
    a99e:	e77d      	b.n	a89c <sd_mmc_spi_adtc_start+0x3ac>
	uint8_t line = 0xFF;
    a9a0:	ab04      	add	r3, sp, #16
    a9a2:	1ddc      	adds	r4, r3, #7
    a9a4:	23ff      	movs	r3, #255	; 0xff
	spi_read_buffer_wait(&spi_main, &line, 1,
    a9a6:	2201      	movs	r2, #1
    a9a8:	0021      	movs	r1, r4
    a9aa:	0028      	movs	r0, r5
	uint8_t line = 0xFF;
    a9ac:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&spi_main, &line, 1,
    a9ae:	47b8      	blx	r7
	spi_read_buffer_wait(&spi_main, &line, 1,
    a9b0:	23ff      	movs	r3, #255	; 0xff
    a9b2:	2201      	movs	r2, #1
    a9b4:	0021      	movs	r1, r4
    a9b6:	0028      	movs	r0, r5
    a9b8:	47b8      	blx	r7
		spi_read_buffer_wait(&spi_main, &line, 1,
    a9ba:	23ff      	movs	r3, #255	; 0xff
    a9bc:	2201      	movs	r2, #1
    a9be:	0021      	movs	r1, r4
    a9c0:	0028      	movs	r0, r5
    a9c2:	47b8      	blx	r7
    a9c4:	4b1a      	ldr	r3, [pc, #104]	; (aa30 <sd_mmc_spi_adtc_start+0x540>)
    a9c6:	001e      	movs	r6, r3
    a9c8:	e007      	b.n	a9da <sd_mmc_spi_adtc_start+0x4ea>
    a9ca:	23ff      	movs	r3, #255	; 0xff
    a9cc:	2201      	movs	r2, #1
    a9ce:	0021      	movs	r1, r4
    a9d0:	0028      	movs	r0, r5
    a9d2:	3e01      	subs	r6, #1
    a9d4:	47b8      	blx	r7
		if (!(nec_timeout--)) {
    a9d6:	2e00      	cmp	r6, #0
    a9d8:	d01b      	beq.n	aa12 <sd_mmc_spi_adtc_start+0x522>
	} while (line != 0xFF);
    a9da:	7823      	ldrb	r3, [r4, #0]
    a9dc:	2bff      	cmp	r3, #255	; 0xff
    a9de:	d1f4      	bne.n	a9ca <sd_mmc_spi_adtc_start+0x4da>
    a9e0:	e771      	b.n	a8c6 <sd_mmc_spi_adtc_start+0x3d6>
		spi_read_buffer_wait(&spi_main, (uint8_t *)&sd_mmc_spi_response_32, 4,
    a9e2:	23ff      	movs	r3, #255	; 0xff
    a9e4:	2204      	movs	r2, #4
    a9e6:	4659      	mov	r1, fp
    a9e8:	0028      	movs	r0, r5
    a9ea:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    a9ec:	465b      	mov	r3, fp
    a9ee:	465a      	mov	r2, fp
    a9f0:	681b      	ldr	r3, [r3, #0]
    a9f2:	ba1b      	rev	r3, r3
    a9f4:	6013      	str	r3, [r2, #0]
    a9f6:	e76e      	b.n	a8d6 <sd_mmc_spi_adtc_start+0x3e6>
		sd_mmc_spi_response_32 = 0;
    a9f8:	465a      	mov	r2, fp
    a9fa:	2300      	movs	r3, #0
		spi_read_buffer_wait(&spi_main, (uint8_t *)&sd_mmc_spi_response_32, 1,
    a9fc:	4659      	mov	r1, fp
		sd_mmc_spi_response_32 = 0;
    a9fe:	6013      	str	r3, [r2, #0]
		spi_read_buffer_wait(&spi_main, (uint8_t *)&sd_mmc_spi_response_32, 1,
    aa00:	0028      	movs	r0, r5
    aa02:	33ff      	adds	r3, #255	; 0xff
    aa04:	2201      	movs	r2, #1
    aa06:	47b8      	blx	r7
    aa08:	e761      	b.n	a8ce <sd_mmc_spi_adtc_start+0x3de>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    aa0a:	4b08      	ldr	r3, [pc, #32]	; (aa2c <sd_mmc_spi_adtc_start+0x53c>)
		return false;
    aa0c:	2000      	movs	r0, #0
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    aa0e:	701a      	strb	r2, [r3, #0]
		return false;
    aa10:	e744      	b.n	a89c <sd_mmc_spi_adtc_start+0x3ac>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    aa12:	2303      	movs	r3, #3
    aa14:	4a05      	ldr	r2, [pc, #20]	; (aa2c <sd_mmc_spi_adtc_start+0x53c>)
			return false;
    aa16:	2000      	movs	r0, #0
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    aa18:	7013      	strb	r3, [r2, #0]
			return false;
    aa1a:	e73f      	b.n	a89c <sd_mmc_spi_adtc_start+0x3ac>
    aa1c:	20000e88 	.word	0x20000e88
    aa20:	20000e82 	.word	0x20000e82
    aa24:	20000e86 	.word	0x20000e86
    aa28:	20000e8c 	.word	0x20000e8c
    aa2c:	20000e84 	.word	0x20000e84
    aa30:	00030d40 	.word	0x00030d40

0000aa34 <sd_mmc_spi_send_cmd>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    aa34:	2300      	movs	r3, #0
{
    aa36:	b510      	push	{r4, lr}
    aa38:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    aa3a:	9300      	str	r3, [sp, #0]
    aa3c:	2200      	movs	r2, #0
    aa3e:	4c02      	ldr	r4, [pc, #8]	; (aa48 <sd_mmc_spi_send_cmd+0x14>)
    aa40:	47a0      	blx	r4
}
    aa42:	b002      	add	sp, #8
    aa44:	bd10      	pop	{r4, pc}
    aa46:	46c0      	nop			; (mov r8, r8)
    aa48:	0000a4f1 	.word	0x0000a4f1

0000aa4c <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
    aa4c:	4b01      	ldr	r3, [pc, #4]	; (aa54 <sd_mmc_spi_get_response+0x8>)
    aa4e:	6818      	ldr	r0, [r3, #0]
}
    aa50:	4770      	bx	lr
    aa52:	46c0      	nop			; (mov r8, r8)
    aa54:	20000e88 	.word	0x20000e88

0000aa58 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    aa58:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    aa5a:	2300      	movs	r3, #0
{
    aa5c:	46de      	mov	lr, fp
    aa5e:	4657      	mov	r7, sl
    aa60:	464e      	mov	r6, r9
    aa62:	4645      	mov	r5, r8
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    aa64:	4a2c      	ldr	r2, [pc, #176]	; (ab18 <sd_mmc_spi_read_word+0xc0>)
{
    aa66:	b5e0      	push	{r5, r6, r7, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    aa68:	7013      	strb	r3, [r2, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    aa6a:	4b2c      	ldr	r3, [pc, #176]	; (ab1c <sd_mmc_spi_read_word+0xc4>)
{
    aa6c:	b085      	sub	sp, #20
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    aa6e:	4699      	mov	r9, r3
    aa70:	4b2b      	ldr	r3, [pc, #172]	; (ab20 <sd_mmc_spi_read_word+0xc8>)
{
    aa72:	9001      	str	r0, [sp, #4]
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    aa74:	469b      	mov	fp, r3
    aa76:	8819      	ldrh	r1, [r3, #0]
    aa78:	4b2a      	ldr	r3, [pc, #168]	; (ab24 <sd_mmc_spi_read_word+0xcc>)
    aa7a:	469a      	mov	sl, r3
    aa7c:	464b      	mov	r3, r9
    aa7e:	6818      	ldr	r0, [r3, #0]
    aa80:	47d0      	blx	sl
    aa82:	2900      	cmp	r1, #0
    aa84:	d019      	beq.n	aaba <sd_mmc_spi_read_word+0x62>
    aa86:	4f28      	ldr	r7, [pc, #160]	; (ab28 <sd_mmc_spi_read_word+0xd0>)
    aa88:	4e28      	ldr	r6, [pc, #160]	; (ab2c <sd_mmc_spi_read_word+0xd4>)
		if (!sd_mmc_spi_start_read_block()) {
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&spi_main, (uint8_t *)&value, 4,
    aa8a:	23ff      	movs	r3, #255	; 0xff
    aa8c:	2204      	movs	r2, #4
    aa8e:	a901      	add	r1, sp, #4
    aa90:	0038      	movs	r0, r7
    aa92:	47b0      	blx	r6
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
    aa94:	464b      	mov	r3, r9
    aa96:	681b      	ldr	r3, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
    aa98:	2401      	movs	r4, #1
	sd_mmc_spi_transfert_pos += 4;
    aa9a:	1d18      	adds	r0, r3, #4
    aa9c:	464b      	mov	r3, r9
    aa9e:	6018      	str	r0, [r3, #0]
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    aaa0:	465b      	mov	r3, fp
    aaa2:	8819      	ldrh	r1, [r3, #0]
    aaa4:	47d0      	blx	sl
    aaa6:	2900      	cmp	r1, #0
    aaa8:	d025      	beq.n	aaf6 <sd_mmc_spi_read_word+0x9e>
}
    aaaa:	0020      	movs	r0, r4
    aaac:	b005      	add	sp, #20
    aaae:	bc3c      	pop	{r2, r3, r4, r5}
    aab0:	4690      	mov	r8, r2
    aab2:	4699      	mov	r9, r3
    aab4:	46a2      	mov	sl, r4
    aab6:	46ab      	mov	fp, r5
    aab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    aaba:	230f      	movs	r3, #15
	token = 0;
    aabc:	ad03      	add	r5, sp, #12
    aabe:	7029      	strb	r1, [r5, #0]
    aac0:	4c1b      	ldr	r4, [pc, #108]	; (ab30 <sd_mmc_spi_read_word+0xd8>)
    aac2:	4f19      	ldr	r7, [pc, #100]	; (ab28 <sd_mmc_spi_read_word+0xd0>)
    aac4:	4e19      	ldr	r6, [pc, #100]	; (ab2c <sd_mmc_spi_read_word+0xd4>)
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    aac6:	4698      	mov	r8, r3
    aac8:	e004      	b.n	aad4 <sd_mmc_spi_read_word+0x7c>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    aaca:	2bfe      	cmp	r3, #254	; 0xfe
    aacc:	d0dd      	beq.n	aa8a <sd_mmc_spi_read_word+0x32>
    aace:	3c01      	subs	r4, #1
		if (i-- == 0) {
    aad0:	2c00      	cmp	r4, #0
    aad2:	d01b      	beq.n	ab0c <sd_mmc_spi_read_word+0xb4>
		spi_read_buffer_wait(&spi_main, &token, 1,
    aad4:	23ff      	movs	r3, #255	; 0xff
    aad6:	2201      	movs	r2, #1
    aad8:	0029      	movs	r1, r5
    aada:	0038      	movs	r0, r7
    aadc:	47b0      	blx	r6
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    aade:	782b      	ldrb	r3, [r5, #0]
    aae0:	4641      	mov	r1, r8
    aae2:	001a      	movs	r2, r3
    aae4:	438a      	bics	r2, r1
    aae6:	d1f0      	bne.n	aaca <sd_mmc_spi_read_word+0x72>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    aae8:	3207      	adds	r2, #7
    aaea:	421a      	tst	r2, r3
    aaec:	d009      	beq.n	ab02 <sd_mmc_spi_read_word+0xaa>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    aaee:	4b0a      	ldr	r3, [pc, #40]	; (ab18 <sd_mmc_spi_read_word+0xc0>)
			return false;
    aaf0:	2400      	movs	r4, #0
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    aaf2:	701a      	strb	r2, [r3, #0]
    aaf4:	e7d9      	b.n	aaaa <sd_mmc_spi_read_word+0x52>
	spi_read_buffer_wait(&spi_main, crc, 2,
    aaf6:	23ff      	movs	r3, #255	; 0xff
    aaf8:	2202      	movs	r2, #2
    aafa:	a903      	add	r1, sp, #12
    aafc:	0038      	movs	r0, r7
    aafe:	47b0      	blx	r6
    ab00:	e7d3      	b.n	aaaa <sd_mmc_spi_read_word+0x52>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    ab02:	230b      	movs	r3, #11
    ab04:	4a04      	ldr	r2, [pc, #16]	; (ab18 <sd_mmc_spi_read_word+0xc0>)
			return false;
    ab06:	2400      	movs	r4, #0
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    ab08:	7013      	strb	r3, [r2, #0]
    ab0a:	e7ce      	b.n	aaaa <sd_mmc_spi_read_word+0x52>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    ab0c:	2304      	movs	r3, #4
    ab0e:	4a02      	ldr	r2, [pc, #8]	; (ab18 <sd_mmc_spi_read_word+0xc0>)
			return false;
    ab10:	2400      	movs	r4, #0
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    ab12:	7013      	strb	r3, [r2, #0]
    ab14:	e7c9      	b.n	aaaa <sd_mmc_spi_read_word+0x52>
    ab16:	46c0      	nop			; (mov r8, r8)
    ab18:	20000e84 	.word	0x20000e84
    ab1c:	20000e8c 	.word	0x20000e8c
    ab20:	20000e82 	.word	0x20000e82
    ab24:	0001c099 	.word	0x0001c099
    ab28:	20001134 	.word	0x20001134
    ab2c:	00014909 	.word	0x00014909
    ab30:	0007a120 	.word	0x0007a120

0000ab34 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    ab34:	b5f0      	push	{r4, r5, r6, r7, lr}
    ab36:	464e      	mov	r6, r9
    ab38:	46de      	mov	lr, fp
    ab3a:	4657      	mov	r7, sl
    ab3c:	4645      	mov	r5, r8
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    ab3e:	2300      	movs	r3, #0
{
    ab40:	b5e0      	push	{r5, r6, r7, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    ab42:	4a2c      	ldr	r2, [pc, #176]	; (abf4 <sd_mmc_spi_start_read_blocks+0xc0>)
{
    ab44:	b085      	sub	sp, #20
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    ab46:	7013      	strb	r3, [r2, #0]
	pos = 0;
	while (nb_block--) {
    ab48:	1e4b      	subs	r3, r1, #1
    ab4a:	b29b      	uxth	r3, r3
{
    ab4c:	9001      	str	r0, [sp, #4]
	while (nb_block--) {
    ab4e:	4699      	mov	r9, r3
    ab50:	2900      	cmp	r1, #0
    ab52:	d045      	beq.n	abe0 <sd_mmc_spi_start_read_blocks+0xac>
    ab54:	2300      	movs	r3, #0
    ab56:	469a      	mov	sl, r3

		// Read block
		spi_read_buffer_wait(&spi_main, &((uint8_t*)dest)[pos],
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    ab58:	4b27      	ldr	r3, [pc, #156]	; (abf8 <sd_mmc_spi_start_read_blocks+0xc4>)
    ab5a:	4f28      	ldr	r7, [pc, #160]	; (abfc <sd_mmc_spi_start_read_blocks+0xc8>)
    ab5c:	469b      	mov	fp, r3
    ab5e:	4e28      	ldr	r6, [pc, #160]	; (ac00 <sd_mmc_spi_start_read_blocks+0xcc>)
    ab60:	ad03      	add	r5, sp, #12
	token = 0;
    ab62:	2300      	movs	r3, #0
    ab64:	702b      	strb	r3, [r5, #0]
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    ab66:	230f      	movs	r3, #15
	token = 0;
    ab68:	4c26      	ldr	r4, [pc, #152]	; (ac04 <sd_mmc_spi_start_read_blocks+0xd0>)
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    ab6a:	4698      	mov	r8, r3
    ab6c:	e004      	b.n	ab78 <sd_mmc_spi_start_read_blocks+0x44>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    ab6e:	2bfe      	cmp	r3, #254	; 0xfe
    ab70:	d019      	beq.n	aba6 <sd_mmc_spi_start_read_blocks+0x72>
    ab72:	3c01      	subs	r4, #1
		if (i-- == 0) {
    ab74:	2c00      	cmp	r4, #0
    ab76:	d039      	beq.n	abec <sd_mmc_spi_start_read_blocks+0xb8>
		spi_read_buffer_wait(&spi_main, &token, 1,
    ab78:	23ff      	movs	r3, #255	; 0xff
    ab7a:	2201      	movs	r2, #1
    ab7c:	0029      	movs	r1, r5
    ab7e:	0038      	movs	r0, r7
    ab80:	47b0      	blx	r6
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    ab82:	782b      	ldrb	r3, [r5, #0]
    ab84:	4641      	mov	r1, r8
    ab86:	001a      	movs	r2, r3
    ab88:	438a      	bics	r2, r1
    ab8a:	d1f0      	bne.n	ab6e <sd_mmc_spi_start_read_blocks+0x3a>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    ab8c:	3207      	adds	r2, #7
    ab8e:	421a      	tst	r2, r3
    ab90:	d028      	beq.n	abe4 <sd_mmc_spi_start_read_blocks+0xb0>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    ab92:	4b18      	ldr	r3, [pc, #96]	; (abf4 <sd_mmc_spi_start_read_blocks+0xc0>)
    ab94:	701a      	strb	r2, [r3, #0]
			return false;
    ab96:	2000      	movs	r0, #0

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
    ab98:	b005      	add	sp, #20
    ab9a:	bc3c      	pop	{r2, r3, r4, r5}
    ab9c:	4690      	mov	r8, r2
    ab9e:	4699      	mov	r9, r3
    aba0:	46a2      	mov	sl, r4
    aba2:	46ab      	mov	fp, r5
    aba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		spi_read_buffer_wait(&spi_main, &((uint8_t*)dest)[pos],
    aba6:	4b18      	ldr	r3, [pc, #96]	; (ac08 <sd_mmc_spi_start_read_blocks+0xd4>)
    aba8:	0038      	movs	r0, r7
    abaa:	881a      	ldrh	r2, [r3, #0]
    abac:	9b01      	ldr	r3, [sp, #4]
    abae:	4453      	add	r3, sl
    abb0:	0019      	movs	r1, r3
    abb2:	23ff      	movs	r3, #255	; 0xff
    abb4:	47b0      	blx	r6
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    abb6:	465a      	mov	r2, fp
    abb8:	6812      	ldr	r2, [r2, #0]
		pos += sd_mmc_spi_block_size;
    abba:	4b13      	ldr	r3, [pc, #76]	; (ac08 <sd_mmc_spi_start_read_blocks+0xd4>)
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    abbc:	4694      	mov	ip, r2
    abbe:	465a      	mov	r2, fp
		pos += sd_mmc_spi_block_size;
    abc0:	881b      	ldrh	r3, [r3, #0]
	spi_read_buffer_wait(&spi_main, crc, 2,
    abc2:	0029      	movs	r1, r5
		pos += sd_mmc_spi_block_size;
    abc4:	449a      	add	sl, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    abc6:	4463      	add	r3, ip
    abc8:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&spi_main, crc, 2,
    abca:	0038      	movs	r0, r7
    abcc:	23ff      	movs	r3, #255	; 0xff
    abce:	2202      	movs	r2, #2
    abd0:	47b0      	blx	r6
	while (nb_block--) {
    abd2:	464b      	mov	r3, r9
    abd4:	3b01      	subs	r3, #1
    abd6:	b29b      	uxth	r3, r3
    abd8:	4699      	mov	r9, r3
    abda:	4b0c      	ldr	r3, [pc, #48]	; (ac0c <sd_mmc_spi_start_read_blocks+0xd8>)
    abdc:	4599      	cmp	r9, r3
    abde:	d1c0      	bne.n	ab62 <sd_mmc_spi_start_read_blocks+0x2e>
	return true;
    abe0:	2001      	movs	r0, #1
    abe2:	e7d9      	b.n	ab98 <sd_mmc_spi_start_read_blocks+0x64>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    abe4:	230b      	movs	r3, #11
    abe6:	4a03      	ldr	r2, [pc, #12]	; (abf4 <sd_mmc_spi_start_read_blocks+0xc0>)
    abe8:	7013      	strb	r3, [r2, #0]
    abea:	e7d4      	b.n	ab96 <sd_mmc_spi_start_read_blocks+0x62>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    abec:	2304      	movs	r3, #4
    abee:	4a01      	ldr	r2, [pc, #4]	; (abf4 <sd_mmc_spi_start_read_blocks+0xc0>)
    abf0:	7013      	strb	r3, [r2, #0]
    abf2:	e7d0      	b.n	ab96 <sd_mmc_spi_start_read_blocks+0x62>
    abf4:	20000e84 	.word	0x20000e84
    abf8:	20000e8c 	.word	0x20000e8c
    abfc:	20001134 	.word	0x20001134
    ac00:	00014909 	.word	0x00014909
    ac04:	0007a120 	.word	0x0007a120
    ac08:	20000e82 	.word	0x20000e82
    ac0c:	0000ffff 	.word	0x0000ffff

0000ac10 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
    ac10:	2001      	movs	r0, #1
    ac12:	4770      	bx	lr

0000ac14 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    ac14:	b5f0      	push	{r4, r5, r6, r7, lr}
    ac16:	46de      	mov	lr, fp
    ac18:	4657      	mov	r7, sl
    ac1a:	464e      	mov	r6, r9
    ac1c:	4645      	mov	r5, r8
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    ac1e:	2300      	movs	r3, #0
{
    ac20:	b5e0      	push	{r5, r6, r7, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    ac22:	4a48      	ldr	r2, [pc, #288]	; (ad44 <sd_mmc_spi_start_write_blocks+0x130>)
{
    ac24:	b087      	sub	sp, #28
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    ac26:	7013      	strb	r3, [r2, #0]
	pos = 0;
	while (nb_block--) {
    ac28:	1e4b      	subs	r3, r1, #1
    ac2a:	b29b      	uxth	r3, r3
{
    ac2c:	9003      	str	r0, [sp, #12]
	while (nb_block--) {
    ac2e:	9302      	str	r3, [sp, #8]
    ac30:	2900      	cmp	r1, #0
    ac32:	d04c      	beq.n	acce <sd_mmc_spi_start_write_blocks+0xba>
    ac34:	2300      	movs	r3, #0
    ac36:	9301      	str	r3, [sp, #4]
    ac38:	ab04      	add	r3, sp, #16
    ac3a:	1d5f      	adds	r7, r3, #5
    ac3c:	4b42      	ldr	r3, [pc, #264]	; (ad48 <sd_mmc_spi_start_write_blocks+0x134>)
    ac3e:	4e43      	ldr	r6, [pc, #268]	; (ad4c <sd_mmc_spi_start_write_blocks+0x138>)
    ac40:	4699      	mov	r9, r3
    ac42:	ab04      	add	r3, sp, #16
    ac44:	1d9c      	adds	r4, r3, #6
    ac46:	4b42      	ldr	r3, [pc, #264]	; (ad50 <sd_mmc_spi_start_write_blocks+0x13c>)
    ac48:	469b      	mov	fp, r3
    ac4a:	4b42      	ldr	r3, [pc, #264]	; (ad54 <sd_mmc_spi_start_write_blocks+0x140>)
    ac4c:	4698      	mov	r8, r3
	uint8_t dummy = 0xFF;
    ac4e:	23ff      	movs	r3, #255	; 0xff
	spi_write_buffer_wait(&spi_main,&dummy, 1);
    ac50:	2201      	movs	r2, #1
    ac52:	0039      	movs	r1, r7
    ac54:	0030      	movs	r0, r6
	uint8_t dummy = 0xFF;
    ac56:	703b      	strb	r3, [r7, #0]
	spi_write_buffer_wait(&spi_main,&dummy, 1);
    ac58:	47c8      	blx	r9
	if (1 == sd_mmc_spi_nb_block) {
    ac5a:	4b3f      	ldr	r3, [pc, #252]	; (ad58 <sd_mmc_spi_start_write_blocks+0x144>)
    ac5c:	881b      	ldrh	r3, [r3, #0]
    ac5e:	2b01      	cmp	r3, #1
    ac60:	d066      	beq.n	ad30 <sd_mmc_spi_start_write_blocks+0x11c>
		token = SPI_TOKEN_MULTI_WRITE;
    ac62:	23fc      	movs	r3, #252	; 0xfc
	spi_write_buffer_wait(&spi_main,&token, 1);
    ac64:	2201      	movs	r2, #1
    ac66:	0021      	movs	r1, r4
    ac68:	0030      	movs	r0, r6
    ac6a:	7023      	strb	r3, [r4, #0]
    ac6c:	47c8      	blx	r9
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();

		// Write block
		spi_write_buffer_wait(&spi_main, &((uint8_t*)src)[pos],
    ac6e:	9801      	ldr	r0, [sp, #4]
    ac70:	4b3a      	ldr	r3, [pc, #232]	; (ad5c <sd_mmc_spi_start_write_blocks+0x148>)
    ac72:	4684      	mov	ip, r0
    ac74:	881a      	ldrh	r2, [r3, #0]
    ac76:	9b03      	ldr	r3, [sp, #12]
    ac78:	0030      	movs	r0, r6
    ac7a:	4463      	add	r3, ip
    ac7c:	0019      	movs	r1, r3
    ac7e:	47c8      	blx	r9
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    ac80:	4b36      	ldr	r3, [pc, #216]	; (ad5c <sd_mmc_spi_start_write_blocks+0x148>)
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    ac82:	465a      	mov	r2, fp
		pos += sd_mmc_spi_block_size;
    ac84:	881b      	ldrh	r3, [r3, #0]
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    ac86:	2501      	movs	r5, #1
		pos += sd_mmc_spi_block_size;
    ac88:	469a      	mov	sl, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    ac8a:	465b      	mov	r3, fp
    ac8c:	681b      	ldr	r3, [r3, #0]
	spi_write_buffer_wait(&spi_main, (uint8_t *)&crc, 2);
    ac8e:	0021      	movs	r1, r4
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    ac90:	4453      	add	r3, sl
    ac92:	6013      	str	r3, [r2, #0]
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    ac94:	426d      	negs	r5, r5
	spi_write_buffer_wait(&spi_main, (uint8_t *)&crc, 2);
    ac96:	2202      	movs	r2, #2
    ac98:	0030      	movs	r0, r6
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    ac9a:	8025      	strh	r5, [r4, #0]
	spi_write_buffer_wait(&spi_main, (uint8_t *)&crc, 2);
    ac9c:	47c8      	blx	r9
	spi_read_buffer_wait(&spi_main, &resp, 1,
    ac9e:	23ff      	movs	r3, #255	; 0xff
    aca0:	2201      	movs	r2, #1
    aca2:	0039      	movs	r1, r7
    aca4:	0030      	movs	r0, r6
    aca6:	47c0      	blx	r8
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    aca8:	2211      	movs	r2, #17
    acaa:	783b      	ldrb	r3, [r7, #0]
    acac:	401a      	ands	r2, r3
    acae:	2a01      	cmp	r2, #1
    acb0:	d00f      	beq.n	acd2 <sd_mmc_spi_start_write_blocks+0xbe>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    acb2:	2301      	movs	r3, #1
    acb4:	4a23      	ldr	r2, [pc, #140]	; (ad44 <sd_mmc_spi_start_write_blocks+0x130>)
    acb6:	7013      	strb	r3, [r2, #0]
		if (nb_block) {
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    acb8:	2000      	movs	r0, #0
			}
		}
	}
	return true;
}
    acba:	b007      	add	sp, #28
    acbc:	bc3c      	pop	{r2, r3, r4, r5}
    acbe:	4690      	mov	r8, r2
    acc0:	4699      	mov	r9, r3
    acc2:	46a2      	mov	sl, r4
    acc4:	46ab      	mov	fp, r5
    acc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (nb_block) {
    acc8:	9b02      	ldr	r3, [sp, #8]
    acca:	2b00      	cmp	r3, #0
    accc:	d10b      	bne.n	ace6 <sd_mmc_spi_start_write_blocks+0xd2>
	return true;
    acce:	2001      	movs	r0, #1
    acd0:	e7f3      	b.n	acba <sd_mmc_spi_start_write_blocks+0xa6>
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    acd2:	221e      	movs	r2, #30
    acd4:	4013      	ands	r3, r2
    acd6:	2b04      	cmp	r3, #4
    acd8:	d0f6      	beq.n	acc8 <sd_mmc_spi_start_write_blocks+0xb4>
    acda:	2b0a      	cmp	r3, #10
    acdc:	d12a      	bne.n	ad34 <sd_mmc_spi_start_write_blocks+0x120>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    acde:	4a19      	ldr	r2, [pc, #100]	; (ad44 <sd_mmc_spi_start_write_blocks+0x130>)
    ace0:	3b02      	subs	r3, #2
    ace2:	7013      	strb	r3, [r2, #0]
    ace4:	e7e8      	b.n	acb8 <sd_mmc_spi_start_write_blocks+0xa4>
	spi_read_buffer_wait(&spi_main, &line, 1,
    ace6:	23ff      	movs	r3, #255	; 0xff
    ace8:	2201      	movs	r2, #1
    acea:	0021      	movs	r1, r4
    acec:	0030      	movs	r0, r6
	uint8_t line = 0xFF;
    acee:	7025      	strb	r5, [r4, #0]
	spi_read_buffer_wait(&spi_main, &line, 1,
    acf0:	47c0      	blx	r8
	spi_read_buffer_wait(&spi_main, &line, 1,
    acf2:	23ff      	movs	r3, #255	; 0xff
    acf4:	2201      	movs	r2, #1
    acf6:	0021      	movs	r1, r4
    acf8:	0030      	movs	r0, r6
    acfa:	47c0      	blx	r8
		spi_read_buffer_wait(&spi_main, &line, 1,
    acfc:	23ff      	movs	r3, #255	; 0xff
    acfe:	2201      	movs	r2, #1
    ad00:	0021      	movs	r1, r4
    ad02:	0030      	movs	r0, r6
    ad04:	47c0      	blx	r8
    ad06:	4d16      	ldr	r5, [pc, #88]	; (ad60 <sd_mmc_spi_start_write_blocks+0x14c>)
    ad08:	e007      	b.n	ad1a <sd_mmc_spi_start_write_blocks+0x106>
    ad0a:	23ff      	movs	r3, #255	; 0xff
    ad0c:	2201      	movs	r2, #1
    ad0e:	0021      	movs	r1, r4
    ad10:	0030      	movs	r0, r6
    ad12:	3d01      	subs	r5, #1
    ad14:	47c0      	blx	r8
		if (!(nec_timeout--)) {
    ad16:	2d00      	cmp	r5, #0
    ad18:	d010      	beq.n	ad3c <sd_mmc_spi_start_write_blocks+0x128>
	} while (line != 0xFF);
    ad1a:	7823      	ldrb	r3, [r4, #0]
    ad1c:	2bff      	cmp	r3, #255	; 0xff
    ad1e:	d1f4      	bne.n	ad0a <sd_mmc_spi_start_write_blocks+0xf6>
		pos += sd_mmc_spi_block_size;
    ad20:	9b01      	ldr	r3, [sp, #4]
    ad22:	4453      	add	r3, sl
    ad24:	9301      	str	r3, [sp, #4]
	while (nb_block--) {
    ad26:	9b02      	ldr	r3, [sp, #8]
    ad28:	3b01      	subs	r3, #1
    ad2a:	b29b      	uxth	r3, r3
    ad2c:	9302      	str	r3, [sp, #8]
    ad2e:	e78e      	b.n	ac4e <sd_mmc_spi_start_write_blocks+0x3a>
		token = SPI_TOKEN_SINGLE_WRITE;
    ad30:	23fe      	movs	r3, #254	; 0xfe
    ad32:	e797      	b.n	ac64 <sd_mmc_spi_start_write_blocks+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    ad34:	230a      	movs	r3, #10
    ad36:	4a03      	ldr	r2, [pc, #12]	; (ad44 <sd_mmc_spi_start_write_blocks+0x130>)
    ad38:	7013      	strb	r3, [r2, #0]
    ad3a:	e7bd      	b.n	acb8 <sd_mmc_spi_start_write_blocks+0xa4>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    ad3c:	2305      	movs	r3, #5
    ad3e:	4a01      	ldr	r2, [pc, #4]	; (ad44 <sd_mmc_spi_start_write_blocks+0x130>)
    ad40:	7013      	strb	r3, [r2, #0]
    ad42:	e7b9      	b.n	acb8 <sd_mmc_spi_start_write_blocks+0xa4>
    ad44:	20000e84 	.word	0x20000e84
    ad48:	00014afd 	.word	0x00014afd
    ad4c:	20001134 	.word	0x20001134
    ad50:	20000e8c 	.word	0x20000e8c
    ad54:	00014909 	.word	0x00014909
    ad58:	20000e86 	.word	0x20000e86
    ad5c:	20000e82 	.word	0x20000e82
    ad60:	00030d40 	.word	0x00030d40

0000ad64 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    ad64:	b5f0      	push	{r4, r5, r6, r7, lr}
    ad66:	46ce      	mov	lr, r9
    ad68:	4647      	mov	r7, r8
    ad6a:	b580      	push	{r7, lr}
    ad6c:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
    ad6e:	466b      	mov	r3, sp
    ad70:	1ddd      	adds	r5, r3, #7
    ad72:	23ff      	movs	r3, #255	; 0xff
	spi_read_buffer_wait(&spi_main, &line, 1,
    ad74:	4f32      	ldr	r7, [pc, #200]	; (ae40 <sd_mmc_spi_wait_end_of_write_blocks+0xdc>)
    ad76:	4c33      	ldr	r4, [pc, #204]	; (ae44 <sd_mmc_spi_wait_end_of_write_blocks+0xe0>)
    ad78:	2201      	movs	r2, #1
    ad7a:	0029      	movs	r1, r5
    ad7c:	0038      	movs	r0, r7
	uint8_t line = 0xFF;
    ad7e:	702b      	strb	r3, [r5, #0]
	spi_read_buffer_wait(&spi_main, &line, 1,
    ad80:	47a0      	blx	r4
	spi_read_buffer_wait(&spi_main, &line, 1,
    ad82:	23ff      	movs	r3, #255	; 0xff
    ad84:	2201      	movs	r2, #1
    ad86:	0029      	movs	r1, r5
    ad88:	0038      	movs	r0, r7
    ad8a:	47a0      	blx	r4
		spi_read_buffer_wait(&spi_main, &line, 1,
    ad8c:	23ff      	movs	r3, #255	; 0xff
    ad8e:	2201      	movs	r2, #1
    ad90:	0029      	movs	r1, r5
    ad92:	0038      	movs	r0, r7
	spi_read_buffer_wait(&spi_main, &line, 1,
    ad94:	46a0      	mov	r8, r4
		spi_read_buffer_wait(&spi_main, &line, 1,
    ad96:	47a0      	blx	r4
    ad98:	4c2b      	ldr	r4, [pc, #172]	; (ae48 <sd_mmc_spi_wait_end_of_write_blocks+0xe4>)
    ad9a:	e007      	b.n	adac <sd_mmc_spi_wait_end_of_write_blocks+0x48>
    ad9c:	23ff      	movs	r3, #255	; 0xff
    ad9e:	2201      	movs	r2, #1
    ada0:	0029      	movs	r1, r5
    ada2:	0038      	movs	r0, r7
    ada4:	3c01      	subs	r4, #1
    ada6:	47c0      	blx	r8
		if (!(nec_timeout--)) {
    ada8:	2c00      	cmp	r4, #0
    adaa:	d015      	beq.n	add8 <sd_mmc_spi_wait_end_of_write_blocks+0x74>
	} while (line != 0xFF);
    adac:	782e      	ldrb	r6, [r5, #0]
    adae:	2eff      	cmp	r6, #255	; 0xff
    adb0:	d1f4      	bne.n	ad9c <sd_mmc_spi_wait_end_of_write_blocks+0x38>
	if (1 == sd_mmc_spi_nb_block) {
    adb2:	4b26      	ldr	r3, [pc, #152]	; (ae4c <sd_mmc_spi_wait_end_of_write_blocks+0xe8>)
    adb4:	881c      	ldrh	r4, [r3, #0]
    adb6:	2c01      	cmp	r4, #1
    adb8:	d03f      	beq.n	ae3a <sd_mmc_spi_wait_end_of_write_blocks+0xd6>
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    adba:	4b25      	ldr	r3, [pc, #148]	; (ae50 <sd_mmc_spi_wait_end_of_write_blocks+0xec>)
    adbc:	8819      	ldrh	r1, [r3, #0]
    adbe:	4b25      	ldr	r3, [pc, #148]	; (ae54 <sd_mmc_spi_wait_end_of_write_blocks+0xf0>)
    adc0:	6818      	ldr	r0, [r3, #0]
    adc2:	4b25      	ldr	r3, [pc, #148]	; (ae58 <sd_mmc_spi_wait_end_of_write_blocks+0xf4>)
    adc4:	4798      	blx	r3
    adc6:	0003      	movs	r3, r0
		return true; // It is not the End of multi write
    adc8:	2001      	movs	r0, #1
	if (sd_mmc_spi_nb_block >
    adca:	429c      	cmp	r4, r3
    adcc:	d909      	bls.n	ade2 <sd_mmc_spi_wait_end_of_write_blocks+0x7e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
    adce:	b003      	add	sp, #12
    add0:	bc0c      	pop	{r2, r3}
    add2:	4690      	mov	r8, r2
    add4:	4699      	mov	r9, r3
    add6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    add8:	2205      	movs	r2, #5
    adda:	4b20      	ldr	r3, [pc, #128]	; (ae5c <sd_mmc_spi_wait_end_of_write_blocks+0xf8>)
		return false;
    addc:	2000      	movs	r0, #0
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    adde:	701a      	strb	r2, [r3, #0]
    ade0:	e7f5      	b.n	adce <sd_mmc_spi_wait_end_of_write_blocks+0x6a>
	value = 0xFF;
    ade2:	466b      	mov	r3, sp
    ade4:	1d9c      	adds	r4, r3, #6
    ade6:	719e      	strb	r6, [r3, #6]
	spi_write_buffer_wait(&spi_main, &value, 1);
    ade8:	4b1d      	ldr	r3, [pc, #116]	; (ae60 <sd_mmc_spi_wait_end_of_write_blocks+0xfc>)
    adea:	0021      	movs	r1, r4
    adec:	2201      	movs	r2, #1
    adee:	0038      	movs	r0, r7
    adf0:	4699      	mov	r9, r3
    adf2:	4798      	blx	r3
	value = SPI_TOKEN_STOP_TRAN;
    adf4:	23fd      	movs	r3, #253	; 0xfd
	spi_write_buffer_wait(&spi_main, &value, 1);
    adf6:	0021      	movs	r1, r4
    adf8:	2201      	movs	r2, #1
    adfa:	0038      	movs	r0, r7
	value = SPI_TOKEN_STOP_TRAN;
    adfc:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&spi_main, &value, 1);
    adfe:	47c8      	blx	r9
	spi_read_buffer_wait(&spi_main, &line, 1,
    ae00:	23ff      	movs	r3, #255	; 0xff
    ae02:	2201      	movs	r2, #1
    ae04:	0029      	movs	r1, r5
    ae06:	0038      	movs	r0, r7
	uint8_t line = 0xFF;
    ae08:	702e      	strb	r6, [r5, #0]
	spi_read_buffer_wait(&spi_main, &line, 1,
    ae0a:	47c0      	blx	r8
	spi_read_buffer_wait(&spi_main, &line, 1,
    ae0c:	23ff      	movs	r3, #255	; 0xff
    ae0e:	2201      	movs	r2, #1
    ae10:	0029      	movs	r1, r5
    ae12:	0038      	movs	r0, r7
    ae14:	47c0      	blx	r8
		spi_read_buffer_wait(&spi_main, &line, 1,
    ae16:	23ff      	movs	r3, #255	; 0xff
    ae18:	2201      	movs	r2, #1
    ae1a:	0029      	movs	r1, r5
    ae1c:	0038      	movs	r0, r7
    ae1e:	47c0      	blx	r8
    ae20:	4c09      	ldr	r4, [pc, #36]	; (ae48 <sd_mmc_spi_wait_end_of_write_blocks+0xe4>)
    ae22:	e007      	b.n	ae34 <sd_mmc_spi_wait_end_of_write_blocks+0xd0>
    ae24:	23ff      	movs	r3, #255	; 0xff
    ae26:	2201      	movs	r2, #1
    ae28:	0029      	movs	r1, r5
    ae2a:	0038      	movs	r0, r7
    ae2c:	3c01      	subs	r4, #1
    ae2e:	47c0      	blx	r8
		if (!(nec_timeout--)) {
    ae30:	2c00      	cmp	r4, #0
    ae32:	d0d1      	beq.n	add8 <sd_mmc_spi_wait_end_of_write_blocks+0x74>
	} while (line != 0xFF);
    ae34:	782b      	ldrb	r3, [r5, #0]
    ae36:	2bff      	cmp	r3, #255	; 0xff
    ae38:	d1f4      	bne.n	ae24 <sd_mmc_spi_wait_end_of_write_blocks+0xc0>
	return true;
    ae3a:	2001      	movs	r0, #1
    ae3c:	e7c7      	b.n	adce <sd_mmc_spi_wait_end_of_write_blocks+0x6a>
    ae3e:	46c0      	nop			; (mov r8, r8)
    ae40:	20001134 	.word	0x20001134
    ae44:	00014909 	.word	0x00014909
    ae48:	00030d40 	.word	0x00030d40
    ae4c:	20000e86 	.word	0x20000e86
    ae50:	20000e82 	.word	0x20000e82
    ae54:	20000e8c 	.word	0x20000e8c
    ae58:	0001bf8d 	.word	0x0001bf8d
    ae5c:	20000e84 	.word	0x20000e84
    ae60:	00014afd 	.word	0x00014afd

0000ae64 <get_nb_lun>:

  return nb_lun;
#else
  return MAX_LUN;
#endif
}
    ae64:	2001      	movs	r0, #1
    ae66:	4770      	bx	lr

0000ae68 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    ae68:	0003      	movs	r3, r0
    ae6a:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    ae6c:	2001      	movs	r0, #1
    ae6e:	2b00      	cmp	r3, #0
    ae70:	d101      	bne.n	ae76 <mem_test_unit_ready+0xe>
    ae72:	4b01      	ldr	r3, [pc, #4]	; (ae78 <mem_test_unit_ready+0x10>)
    ae74:	4798      	blx	r3
#endif

  Ctrl_access_unlock();

  return status;
}
    ae76:	bd10      	pop	{r4, pc}
    ae78:	00012cb1 	.word	0x00012cb1

0000ae7c <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    ae7c:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    ae7e:	2301      	movs	r3, #1
    ae80:	2800      	cmp	r0, #0
    ae82:	d103      	bne.n	ae8c <mem_read_capacity+0x10>
    ae84:	4b02      	ldr	r3, [pc, #8]	; (ae90 <mem_read_capacity+0x14>)
    ae86:	0008      	movs	r0, r1
    ae88:	4798      	blx	r3
    ae8a:	0003      	movs	r3, r0
#endif

  Ctrl_access_unlock();

  return status;
}
    ae8c:	0018      	movs	r0, r3
    ae8e:	bd10      	pop	{r4, pc}
    ae90:	00012cf9 	.word	0x00012cf9

0000ae94 <mem_sector_size>:

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    ae94:	4243      	negs	r3, r0
    ae96:	4158      	adcs	r0, r3
#endif

  Ctrl_access_unlock();

  return sector_size;
}
    ae98:	b2c0      	uxtb	r0, r0
    ae9a:	4770      	bx	lr

0000ae9c <mem_unload>:


bool mem_unload(U8 lun, bool unload)
{
    ae9c:	b510      	push	{r4, lr}

  unloaded =
#if MAX_LUN
          (lun < MAX_LUN) ?
              (lun_desc[lun].unload ?
                  lun_desc[lun].unload(unload) : !unload) :
    ae9e:	2300      	movs	r3, #0
    aea0:	2800      	cmp	r0, #0
    aea2:	d103      	bne.n	aeac <mem_unload+0x10>
    aea4:	4b02      	ldr	r3, [pc, #8]	; (aeb0 <mem_unload+0x14>)
    aea6:	0008      	movs	r0, r1
    aea8:	4798      	blx	r3
    aeaa:	0003      	movs	r3, r0
#endif

  Ctrl_access_unlock();

  return unloaded;
}
    aeac:	0018      	movs	r0, r3
    aeae:	bd10      	pop	{r4, pc}
    aeb0:	00012d55 	.word	0x00012d55

0000aeb4 <mem_wr_protect>:

bool mem_wr_protect(U8 lun)
{
    aeb4:	0003      	movs	r3, r0
    aeb6:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    aeb8:	2001      	movs	r0, #1
    aeba:	2b00      	cmp	r3, #0
    aebc:	d101      	bne.n	aec2 <mem_wr_protect+0xe>
    aebe:	4b01      	ldr	r3, [pc, #4]	; (aec4 <mem_wr_protect+0x10>)
    aec0:	4798      	blx	r3
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
    aec2:	bd10      	pop	{r4, pc}
    aec4:	00012d61 	.word	0x00012d61

0000aec8 <mem_removal>:


bool mem_removal(U8 lun)
{
    aec8:	0003      	movs	r3, r0
    aeca:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  removal =
#if MAX_LUN
          (lun < MAX_LUN) ? lun_desc[lun].removal() :
    aecc:	2001      	movs	r0, #1
    aece:	2b00      	cmp	r3, #0
    aed0:	d101      	bne.n	aed6 <mem_removal+0xe>
    aed2:	4b01      	ldr	r3, [pc, #4]	; (aed8 <mem_removal+0x10>)
    aed4:	4798      	blx	r3
#endif

  Ctrl_access_unlock();

  return removal;
}
    aed6:	bd10      	pop	{r4, pc}
    aed8:	00012d71 	.word	0x00012d71

0000aedc <mem_name>:
#if MAX_LUN==0
  UNUSED(lun);
#endif
  return
#if MAX_LUN
       (lun < MAX_LUN) ? lun_desc[lun].name :
    aedc:	2800      	cmp	r0, #0
    aede:	d101      	bne.n	aee4 <mem_name+0x8>
    aee0:	4801      	ldr	r0, [pc, #4]	; (aee8 <mem_name+0xc>)
#if LUN_USB == ENABLE
                           LUN_USB_NAME;
#else
                           NULL;
#endif
}
    aee2:	4770      	bx	lr
       (lun < MAX_LUN) ? lun_desc[lun].name :
    aee4:	2000      	movs	r0, #0
    aee6:	e7fc      	b.n	aee2 <mem_name+0x6>
    aee8:	00023ae0 	.word	0x00023ae0

0000aeec <memory_2_usb>:
 */
//! @{


Ctrl_status memory_2_usb(U8 lun, U32 addr, U16 nb_sector)
{
    aeec:	b510      	push	{r4, lr}
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(nb_sector);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
    aeee:	2301      	movs	r3, #1
{
    aef0:	000c      	movs	r4, r1
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
    aef2:	2800      	cmp	r0, #0
    aef4:	d104      	bne.n	af00 <memory_2_usb+0x14>
    aef6:	4b03      	ldr	r3, [pc, #12]	; (af04 <memory_2_usb+0x18>)
    aef8:	0011      	movs	r1, r2
    aefa:	0020      	movs	r0, r4
    aefc:	4798      	blx	r3
    aefe:	0003      	movs	r3, r0
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
    af00:	0018      	movs	r0, r3
    af02:	bd10      	pop	{r4, pc}
    af04:	00012d75 	.word	0x00012d75

0000af08 <usb_2_memory>:


Ctrl_status usb_2_memory(U8 lun, U32 addr, U16 nb_sector)
{
    af08:	b510      	push	{r4, lr}
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(nb_sector);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
    af0a:	2301      	movs	r3, #1
{
    af0c:	000c      	movs	r4, r1
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
    af0e:	2800      	cmp	r0, #0
    af10:	d104      	bne.n	af1c <usb_2_memory+0x14>
    af12:	4b03      	ldr	r3, [pc, #12]	; (af20 <usb_2_memory+0x18>)
    af14:	0011      	movs	r1, r2
    af16:	0020      	movs	r0, r4
    af18:	4798      	blx	r3
    af1a:	0003      	movs	r3, r0
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
    af1c:	0018      	movs	r0, r3
    af1e:	bd10      	pop	{r4, pc}
    af20:	00012e31 	.word	0x00012e31

0000af24 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    af24:	b510      	push	{r4, lr}
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    af26:	2301      	movs	r3, #1
{
    af28:	000c      	movs	r4, r1
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    af2a:	2800      	cmp	r0, #0
    af2c:	d104      	bne.n	af38 <memory_2_ram+0x14>
    af2e:	4b03      	ldr	r3, [pc, #12]	; (af3c <memory_2_ram+0x18>)
    af30:	0011      	movs	r1, r2
    af32:	0020      	movs	r0, r4
    af34:	4798      	blx	r3
    af36:	0003      	movs	r3, r0
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
    af38:	0018      	movs	r0, r3
    af3a:	bd10      	pop	{r4, pc}
    af3c:	00012f19 	.word	0x00012f19

0000af40 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    af40:	b510      	push	{r4, lr}
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    af42:	2301      	movs	r3, #1
{
    af44:	000c      	movs	r4, r1
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    af46:	2800      	cmp	r0, #0
    af48:	d104      	bne.n	af54 <ram_2_memory+0x14>
    af4a:	4b03      	ldr	r3, [pc, #12]	; (af58 <ram_2_memory+0x18>)
    af4c:	0011      	movs	r1, r2
    af4e:	0020      	movs	r0, r4
    af50:	4798      	blx	r3
    af52:	0003      	movs	r3, r0
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
    af54:	0018      	movs	r0, r3
    af56:	bd10      	pop	{r4, pc}
    af58:	00012f61 	.word	0x00012f61

0000af5c <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    af5c:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    af5e:	2a00      	cmp	r2, #0
    af60:	d001      	beq.n	af66 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    af62:	0018      	movs	r0, r3
    af64:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    af66:	4a06      	ldr	r2, [pc, #24]	; (af80 <extint_register_callback+0x24>)
    af68:	0089      	lsls	r1, r1, #2
    af6a:	588b      	ldr	r3, [r1, r2]
    af6c:	2b00      	cmp	r3, #0
    af6e:	d003      	beq.n	af78 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    af70:	4283      	cmp	r3, r0
    af72:	d003      	beq.n	af7c <extint_register_callback+0x20>
	return STATUS_ERR_ALREADY_INITIALIZED;
    af74:	231d      	movs	r3, #29
    af76:	e7f4      	b.n	af62 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    af78:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    af7a:	e7f2      	b.n	af62 <extint_register_callback+0x6>
		return STATUS_OK;
    af7c:	2300      	movs	r3, #0
    af7e:	e7f0      	b.n	af62 <extint_register_callback+0x6>
    af80:	20001640 	.word	0x20001640

0000af84 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    af84:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    af86:	2900      	cmp	r1, #0
    af88:	d001      	beq.n	af8e <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    af8a:	0018      	movs	r0, r3
    af8c:	4770      	bx	lr
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    af8e:	281f      	cmp	r0, #31
    af90:	d805      	bhi.n	af9e <extint_chan_enable_callback+0x1a>
		eic->INTENSET.reg = (1UL << channel);
    af92:	3b16      	subs	r3, #22
    af94:	4083      	lsls	r3, r0
    af96:	4a03      	ldr	r2, [pc, #12]	; (afa4 <extint_chan_enable_callback+0x20>)
    af98:	6113      	str	r3, [r2, #16]
	return STATUS_OK;
    af9a:	2300      	movs	r3, #0
    af9c:	e7f5      	b.n	af8a <extint_chan_enable_callback+0x6>
		eic->INTENSET.reg = (1UL << channel);
    af9e:	6109      	str	r1, [r1, #16]
    afa0:	deff      	udf	#255	; 0xff
    afa2:	46c0      	nop			; (mov r8, r8)
    afa4:	40002400 	.word	0x40002400

0000afa8 <extint_get_current_channel>:
 *
 * \return Channel number.
 */
uint8_t extint_get_current_channel(void)
{
	return _current_channel;
    afa8:	4b01      	ldr	r3, [pc, #4]	; (afb0 <extint_get_current_channel+0x8>)
    afaa:	7818      	ldrb	r0, [r3, #0]
}
    afac:	4770      	bx	lr
    afae:	46c0      	nop			; (mov r8, r8)
    afb0:	2000163d 	.word	0x2000163d

0000afb4 <EIC_Handler>:

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    afb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    afb6:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    afb8:	2601      	movs	r6, #1
    afba:	4c0b      	ldr	r4, [pc, #44]	; (afe8 <EIC_Handler+0x34>)

	return (eic_module->INTFLAG.reg & eic_mask);
    afbc:	4d0b      	ldr	r5, [pc, #44]	; (afec <EIC_Handler+0x38>)
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    afbe:	4f0c      	ldr	r7, [pc, #48]	; (aff0 <EIC_Handler+0x3c>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    afc0:	7023      	strb	r3, [r4, #0]
	uint32_t eic_mask   = (1UL << (channel % 32));
    afc2:	0032      	movs	r2, r6
    afc4:	409a      	lsls	r2, r3
	return (eic_module->INTFLAG.reg & eic_mask);
    afc6:	6969      	ldr	r1, [r5, #20]
		if (extint_chan_is_detected(_current_channel)) {
    afc8:	4211      	tst	r1, r2
    afca:	d006      	beq.n	afda <EIC_Handler+0x26>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    afcc:	616a      	str	r2, [r5, #20]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    afce:	009b      	lsls	r3, r3, #2
    afd0:	59db      	ldr	r3, [r3, r7]
    afd2:	2b00      	cmp	r3, #0
    afd4:	d000      	beq.n	afd8 <EIC_Handler+0x24>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    afd6:	4798      	blx	r3
    afd8:	7823      	ldrb	r3, [r4, #0]
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    afda:	3301      	adds	r3, #1
    afdc:	b2db      	uxtb	r3, r3
    afde:	7023      	strb	r3, [r4, #0]
    afe0:	2b0f      	cmp	r3, #15
    afe2:	d9ee      	bls.n	afc2 <EIC_Handler+0xe>
			}
		}
	}
}
    afe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    afe6:	46c0      	nop			; (mov r8, r8)
    afe8:	2000163d 	.word	0x2000163d
    afec:	40002400 	.word	0x40002400
    aff0:	20001640 	.word	0x20001640

0000aff4 <_system_extint_init>:
			MCLK->APBAMASK.reg |= mask;
    aff4:	2380      	movs	r3, #128	; 0x80
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    aff6:	b510      	push	{r4, lr}
    aff8:	4a15      	ldr	r2, [pc, #84]	; (b050 <_system_extint_init+0x5c>)
    affa:	009b      	lsls	r3, r3, #2
    affc:	6951      	ldr	r1, [r2, #20]
	system_gclk_chan_enable(EIC_GCLK_ID);
#endif

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
    affe:	4c15      	ldr	r4, [pc, #84]	; (b054 <_system_extint_init+0x60>)
    b000:	430b      	orrs	r3, r1
    b002:	6153      	str	r3, [r2, #20]
    b004:	2201      	movs	r2, #1
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    b006:	2101      	movs	r1, #1
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
    b008:	7823      	ldrb	r3, [r4, #0]
    b00a:	4313      	orrs	r3, r2
    b00c:	7023      	strb	r3, [r4, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    b00e:	3201      	adds	r2, #1
    b010:	6863      	ldr	r3, [r4, #4]
    b012:	421a      	tst	r2, r3
    b014:	d1fc      	bne.n	b010 <_system_extint_init+0x1c>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    b016:	6863      	ldr	r3, [r4, #4]
    b018:	4219      	tst	r1, r3
    b01a:	d1f9      	bne.n	b010 <_system_extint_init+0x1c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_GCLK;
	}
#else
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_ULP32K;
    b01c:	2210      	movs	r2, #16
    b01e:	7823      	ldrb	r3, [r4, #0]
    b020:	2100      	movs	r1, #0
    b022:	4313      	orrs	r3, r2
    b024:	7023      	strb	r3, [r4, #0]
    b026:	2240      	movs	r2, #64	; 0x40
    b028:	4b0b      	ldr	r3, [pc, #44]	; (b058 <_system_extint_init+0x64>)
    b02a:	480c      	ldr	r0, [pc, #48]	; (b05c <_system_extint_init+0x68>)
    b02c:	4798      	blx	r3
    b02e:	2208      	movs	r2, #8
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    b030:	2102      	movs	r1, #2
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    b032:	2001      	movs	r0, #1
    b034:	4b0a      	ldr	r3, [pc, #40]	; (b060 <_system_extint_init+0x6c>)
    b036:	601a      	str	r2, [r3, #0]
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
    b038:	7823      	ldrb	r3, [r4, #0]
    b03a:	3a06      	subs	r2, #6
    b03c:	4313      	orrs	r3, r2
    b03e:	7023      	strb	r3, [r4, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    b040:	4b04      	ldr	r3, [pc, #16]	; (b054 <_system_extint_init+0x60>)
    b042:	685a      	ldr	r2, [r3, #4]
    b044:	4211      	tst	r1, r2
    b046:	d1fc      	bne.n	b042 <_system_extint_init+0x4e>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    b048:	685a      	ldr	r2, [r3, #4]
    b04a:	4210      	tst	r0, r2
    b04c:	d1f9      	bne.n	b042 <_system_extint_init+0x4e>
}
    b04e:	bd10      	pop	{r4, pc}
    b050:	40000400 	.word	0x40000400
    b054:	40002400 	.word	0x40002400
    b058:	0001f06d 	.word	0x0001f06d
    b05c:	20001640 	.word	0x20001640
    b060:	e000e100 	.word	0xe000e100

0000b064 <extint_chan_get_config_defaults>:
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
	config->gpio_pin_mux        = 0;
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    b064:	2201      	movs	r2, #1
	config->gpio_pin            = 0;
    b066:	2300      	movs	r3, #0
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    b068:	7202      	strb	r2, [r0, #8]
	config->filter_input_signal = false;
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    b06a:	3201      	adds	r2, #1
	config->gpio_pin            = 0;
    b06c:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    b06e:	6043      	str	r3, [r0, #4]
	config->filter_input_signal = false;
    b070:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    b072:	72c2      	strb	r2, [r0, #11]
	config->enable_async_edge_detection = false;
    b074:	7243      	strb	r3, [r0, #9]
}
    b076:	4770      	bx	lr

0000b078 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    b078:	b5f0      	push	{r4, r5, r6, r7, lr}
    b07a:	000c      	movs	r4, r1
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    b07c:	2102      	movs	r1, #2
{
    b07e:	0005      	movs	r5, r0
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    b080:	2001      	movs	r0, #1
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    b082:	4a25      	ldr	r2, [pc, #148]	; (b118 <extint_chan_set_config+0xa0>)
{
    b084:	b083      	sub	sp, #12
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    b086:	7813      	ldrb	r3, [r2, #0]
    b088:	438b      	bics	r3, r1
    b08a:	7013      	strb	r3, [r2, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    b08c:	6853      	ldr	r3, [r2, #4]
    b08e:	4219      	tst	r1, r3
    b090:	d1fc      	bne.n	b08c <extint_chan_set_config+0x14>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    b092:	6853      	ldr	r3, [r2, #4]
    b094:	4003      	ands	r3, r0
    b096:	d1f9      	bne.n	b08c <extint_chan_set_config+0x14>
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    b098:	a901      	add	r1, sp, #4
    b09a:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    b09c:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));
#endif
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    b09e:	7923      	ldrb	r3, [r4, #4]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    b0a0:	7820      	ldrb	r0, [r4, #0]
	pinmux_config.mux_position = config->gpio_pin_mux;
    b0a2:	700b      	strb	r3, [r1, #0]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    b0a4:	7a23      	ldrb	r3, [r4, #8]
    b0a6:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    b0a8:	4b1c      	ldr	r3, [pc, #112]	; (b11c <extint_chan_set_config+0xa4>)
    b0aa:	4798      	blx	r3
		return NULL;
    b0ac:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    b0ae:	2d1f      	cmp	r5, #31
    b0b0:	d800      	bhi.n	b0b4 <extint_chan_set_config+0x3c>
		return eics[eic_index];
    b0b2:	4919      	ldr	r1, [pc, #100]	; (b118 <extint_chan_set_config+0xa0>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    b0b4:	2207      	movs	r2, #7

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    b0b6:	7aa3      	ldrb	r3, [r4, #10]
	uint32_t config_pos = (4 * (channel % 8));
    b0b8:	402a      	ands	r2, r5
    b0ba:	0092      	lsls	r2, r2, #2
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    b0bc:	7ae7      	ldrb	r7, [r4, #11]
	if (config->filter_input_signal) {
    b0be:	2b00      	cmp	r3, #0
    b0c0:	d001      	beq.n	b0c6 <extint_chan_set_config+0x4e>
    b0c2:	2308      	movs	r3, #8
    b0c4:	431f      	orrs	r7, r3
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    b0c6:	260f      	movs	r6, #15
			(new_config << config_pos);
    b0c8:	4097      	lsls	r7, r2
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    b0ca:	4096      	lsls	r6, r2
			(new_config << config_pos);
    b0cc:	003a      	movs	r2, r7
    b0ce:	08eb      	lsrs	r3, r5, #3
    b0d0:	009b      	lsls	r3, r3, #2
    b0d2:	18cb      	adds	r3, r1, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    b0d4:	69d8      	ldr	r0, [r3, #28]
    b0d6:	43b0      	bics	r0, r6
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    b0d8:	4302      	orrs	r2, r0
		= (EIC_module->CONFIG[channel / 8].reg &
    b0da:	61da      	str	r2, [r3, #28]
#if (SAML22) || (SAML21XXXB) || (SAMC20) || (SAMR30) || (SAMR34) || (SAMR35)
	/* Config asynchronous edge detection */
	if (config->enable_async_edge_detection) {
    b0dc:	7a63      	ldrb	r3, [r4, #9]
		EIC_module->ASYNCH.reg |= (1UL << channel);
    b0de:	698a      	ldr	r2, [r1, #24]
	if (config->enable_async_edge_detection) {
    b0e0:	2b00      	cmp	r3, #0
    b0e2:	d114      	bne.n	b10e <extint_chan_set_config+0x96>
	} else {
		EIC_module->ASYNCH.reg &= (EIC_ASYNCH_MASK & (~(1UL << channel)));
    b0e4:	2301      	movs	r3, #1
    b0e6:	40ab      	lsls	r3, r5
    b0e8:	43db      	mvns	r3, r3
    b0ea:	041b      	lsls	r3, r3, #16
    b0ec:	0c1b      	lsrs	r3, r3, #16
    b0ee:	4013      	ands	r3, r2
    b0f0:	618b      	str	r3, [r1, #24]
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
    b0f2:	2102      	movs	r1, #2
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    b0f4:	2001      	movs	r0, #1
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
    b0f6:	4b08      	ldr	r3, [pc, #32]	; (b118 <extint_chan_set_config+0xa0>)
    b0f8:	781a      	ldrb	r2, [r3, #0]
    b0fa:	430a      	orrs	r2, r1
    b0fc:	701a      	strb	r2, [r3, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    b0fe:	685a      	ldr	r2, [r3, #4]
    b100:	4211      	tst	r1, r2
    b102:	d1fc      	bne.n	b0fe <extint_chan_set_config+0x86>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    b104:	685a      	ldr	r2, [r3, #4]
    b106:	4210      	tst	r0, r2
    b108:	d1f9      	bne.n	b0fe <extint_chan_set_config+0x86>
	} else {
		EIC_module->EIC_ASYNCH.reg &= (EIC_EIC_ASYNCH_MASK & (~(1UL << channel)));
	}
#endif
	_extint_enable();
}
    b10a:	b003      	add	sp, #12
    b10c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->ASYNCH.reg |= (1UL << channel);
    b10e:	2301      	movs	r3, #1
    b110:	40ab      	lsls	r3, r5
    b112:	4313      	orrs	r3, r2
    b114:	618b      	str	r3, [r1, #24]
    b116:	e7ec      	b.n	b0f2 <extint_chan_set_config+0x7a>
    b118:	40002400 	.word	0x40002400
    b11c:	00015961 	.word	0x00015961

0000b120 <rtc_count_enable>:
    b120:	2104      	movs	r1, #4
    b122:	4b08      	ldr	r3, [pc, #32]	; (b144 <rtc_count_enable+0x24>)
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    b124:	6802      	ldr	r2, [r0, #0]
    b126:	6019      	str	r1, [r3, #0]
    b128:	6801      	ldr	r1, [r0, #0]
	if (rtc_module->MODE0.SYNCBUSY.reg) {
    b12a:	690b      	ldr	r3, [r1, #16]
    b12c:	2b00      	cmp	r3, #0
    b12e:	d1fc      	bne.n	b12a <rtc_count_enable+0xa>
	while (rtc_count_is_syncing(module)) {
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    b130:	2102      	movs	r1, #2
    b132:	8813      	ldrh	r3, [r2, #0]
    b134:	430b      	orrs	r3, r1
    b136:	8013      	strh	r3, [r2, #0]
    b138:	6802      	ldr	r2, [r0, #0]
	if (rtc_module->MODE0.SYNCBUSY.reg) {
    b13a:	6913      	ldr	r3, [r2, #16]
    b13c:	2b00      	cmp	r3, #0
    b13e:	d1fc      	bne.n	b13a <rtc_count_enable+0x1a>

	while (rtc_count_is_syncing(module)) {
		/* Wait for synchronization */
	}
}
    b140:	4770      	bx	lr
    b142:	46c0      	nop			; (mov r8, r8)
    b144:	e000e100 	.word	0xe000e100

0000b148 <rtc_count_init>:
 */
enum status_code rtc_count_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_count_config *const config)
{
    b148:	b570      	push	{r4, r5, r6, lr}
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    b14a:	6001      	str	r1, [r0, #0]
    b14c:	2180      	movs	r1, #128	; 0x80
{
    b14e:	0003      	movs	r3, r0
    b150:	4843      	ldr	r0, [pc, #268]	; (b260 <rtc_count_init+0x118>)
    b152:	0049      	lsls	r1, r1, #1
    b154:	6944      	ldr	r4, [r0, #20]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    b156:	2504      	movs	r5, #4
    b158:	4321      	orrs	r1, r4
    b15a:	6141      	str	r1, [r0, #20]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_RTC);

	/* Select RTC clock */
	OSC32KCTRL->RTCCTRL.reg = RTC_CLOCK_SOURCE;
    b15c:	2000      	movs	r0, #0
    b15e:	4941      	ldr	r1, [pc, #260]	; (b264 <rtc_count_init+0x11c>)
    b160:	4c41      	ldr	r4, [pc, #260]	; (b268 <rtc_count_init+0x120>)
    b162:	6108      	str	r0, [r1, #16]
    b164:	2180      	movs	r1, #128	; 0x80
	Rtc *const rtc_module = module->hw;
    b166:	6818      	ldr	r0, [r3, #0]
    b168:	5065      	str	r5, [r4, r1]
    b16a:	681c      	ldr	r4, [r3, #0]
	if (rtc_module->MODE0.SYNCBUSY.reg) {
    b16c:	6921      	ldr	r1, [r4, #16]
    b16e:	2900      	cmp	r1, #0
    b170:	d1fc      	bne.n	b16c <rtc_count_init+0x24>
	rtc_module->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    b172:	2402      	movs	r4, #2
	rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTENCLR_MASK;
    b174:	493d      	ldr	r1, [pc, #244]	; (b26c <rtc_count_init+0x124>)
    b176:	8101      	strh	r1, [r0, #8]
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_MASK;
    b178:	8181      	strh	r1, [r0, #12]
	rtc_module->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    b17a:	8801      	ldrh	r1, [r0, #0]
    b17c:	43a1      	bics	r1, r4
    b17e:	8001      	strh	r1, [r0, #0]
    b180:	681c      	ldr	r4, [r3, #0]
	if (rtc_module->MODE0.SYNCBUSY.reg) {
    b182:	6921      	ldr	r1, [r4, #16]
    b184:	2900      	cmp	r1, #0
    b186:	d1fc      	bne.n	b182 <rtc_count_init+0x3a>
	module->registered_callback = 0;
    b188:	8699      	strh	r1, [r3, #52]	; 0x34
	module->enabled_callback    = 0;
    b18a:	86d9      	strh	r1, [r3, #54]	; 0x36
	if (rtc_module->MODE0.SYNCBUSY.reg) {
    b18c:	6921      	ldr	r1, [r4, #16]
    b18e:	2900      	cmp	r1, #0
    b190:	d1fc      	bne.n	b18c <rtc_count_init+0x44>
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    b192:	2401      	movs	r4, #1
    b194:	8801      	ldrh	r1, [r0, #0]
    b196:	4321      	orrs	r1, r4
    b198:	8001      	strh	r1, [r0, #0]
    b19a:	6818      	ldr	r0, [r3, #0]
	if (rtc_module->MODE0.SYNCBUSY.reg) {
    b19c:	6901      	ldr	r1, [r0, #16]
    b19e:	2900      	cmp	r1, #0
    b1a0:	d1fc      	bne.n	b19c <rtc_count_init+0x54>

	/* Reset module to hardware defaults. */
	rtc_count_reset(module);

	/* Save conf_struct internally for continued use. */
	module->mode                = config->mode;
    b1a2:	7891      	ldrb	r1, [r2, #2]
    b1a4:	7119      	strb	r1, [r3, #4]

#  if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
    b1a6:	4932      	ldr	r1, [pc, #200]	; (b270 <rtc_count_init+0x128>)
    b1a8:	600b      	str	r3, [r1, #0]
				    | (config->enable_read_sync << RTC_MODE0_CTRLA_COUNTSYNC_Pos)
    b1aa:	7911      	ldrb	r1, [r2, #4]
				    | config->prescaler;
    b1ac:	8814      	ldrh	r4, [r2, #0]
				    | (config->enable_read_sync << RTC_MODE0_CTRLA_COUNTSYNC_Pos)
    b1ae:	03c9      	lsls	r1, r1, #15
	Rtc *const rtc_module = module->hw;
    b1b0:	6818      	ldr	r0, [r3, #0]
				    | config->prescaler;
    b1b2:	4321      	orrs	r1, r4
    b1b4:	b289      	uxth	r1, r1
	rtc_module->MODE0.CTRLA.reg = RTC_MODE0_CTRLA_MODE(0)
    b1b6:	8001      	strh	r1, [r0, #0]
	switch (config->mode) {
    b1b8:	7891      	ldrb	r1, [r2, #2]
    b1ba:	2900      	cmp	r1, #0
    b1bc:	d020      	beq.n	b200 <rtc_count_init+0xb8>
    b1be:	2901      	cmp	r1, #1
    b1c0:	d001      	beq.n	b1c6 <rtc_count_init+0x7e>
			return STATUS_ERR_INVALID_ARG;
    b1c2:	2017      	movs	r0, #23
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#  endif

	/* Set config and return status. */
	return _rtc_count_set_config(module, config);
}
    b1c4:	bd70      	pop	{r4, r5, r6, pc}
			rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MODE(0);
    b1c6:	8801      	ldrh	r1, [r0, #0]
    b1c8:	b289      	uxth	r1, r1
    b1ca:	8001      	strh	r1, [r0, #0]
			if (config->clear_on_match) {
    b1cc:	78d1      	ldrb	r1, [r2, #3]
    b1ce:	2900      	cmp	r1, #0
    b1d0:	d139      	bne.n	b246 <rtc_count_init+0xfe>
				rtc_count_set_compare(module, config->compare_values[i],
    b1d2:	6890      	ldr	r0, [r2, #8]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    b1d4:	6819      	ldr	r1, [r3, #0]
	if (rtc_module->MODE0.SYNCBUSY.reg) {
    b1d6:	690a      	ldr	r2, [r1, #16]
    b1d8:	2a00      	cmp	r2, #0
    b1da:	d1fc      	bne.n	b1d6 <rtc_count_init+0x8e>
	while (rtc_count_is_syncing(module)) {
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
    b1dc:	791a      	ldrb	r2, [r3, #4]
    b1de:	2a00      	cmp	r2, #0
    b1e0:	d008      	beq.n	b1f4 <rtc_count_init+0xac>
    b1e2:	2a01      	cmp	r2, #1
    b1e4:	d104      	bne.n	b1f0 <rtc_count_init+0xa8>
			if ((uint32_t)comp_index > RTC_COMP32_NUM) {
				return STATUS_ERR_INVALID_ARG;
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
    b1e6:	6208      	str	r0, [r1, #32]
    b1e8:	681a      	ldr	r2, [r3, #0]
	if (rtc_module->MODE0.SYNCBUSY.reg) {
    b1ea:	6913      	ldr	r3, [r2, #16]
    b1ec:	2b00      	cmp	r3, #0
    b1ee:	d1fc      	bne.n	b1ea <rtc_count_init+0xa2>
	return STATUS_OK;
    b1f0:	2000      	movs	r0, #0
    b1f2:	e7e7      	b.n	b1c4 <rtc_count_init+0x7c>
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
				return STATUS_ERR_INVALID_ARG;
			}

			/* Check that 16-bit value is provided. */
			if (comp_value > 0xffff) {
    b1f4:	4a1f      	ldr	r2, [pc, #124]	; (b274 <rtc_count_init+0x12c>)
    b1f6:	4290      	cmp	r0, r2
    b1f8:	d8fa      	bhi.n	b1f0 <rtc_count_init+0xa8>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
			}

			/* Set compare value for COMP. */
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
    b1fa:	b280      	uxth	r0, r0
    b1fc:	8408      	strh	r0, [r1, #32]
    b1fe:	e7f3      	b.n	b1e8 <rtc_count_init+0xa0>
			rtc_module->MODE1.CTRLA.reg |= RTC_MODE1_CTRLA_MODE(1);
    b200:	2404      	movs	r4, #4
    b202:	8801      	ldrh	r1, [r0, #0]
    b204:	4321      	orrs	r1, r4
    b206:	8001      	strh	r1, [r0, #0]
			if (config->clear_on_match) {
    b208:	78d1      	ldrb	r1, [r2, #3]
				return STATUS_ERR_INVALID_ARG;
    b20a:	2017      	movs	r0, #23
			if (config->clear_on_match) {
    b20c:	2900      	cmp	r1, #0
    b20e:	d1d9      	bne.n	b1c4 <rtc_count_init+0x7c>
    b210:	2000      	movs	r0, #0
    b212:	681c      	ldr	r4, [r3, #0]
			if (comp_value > 0xffff) {
    b214:	4e17      	ldr	r6, [pc, #92]	; (b274 <rtc_count_init+0x12c>)
    b216:	3208      	adds	r2, #8
				rtc_count_set_compare(module, config->compare_values[i],
    b218:	6815      	ldr	r5, [r2, #0]
	if (rtc_module->MODE0.SYNCBUSY.reg) {
    b21a:	6921      	ldr	r1, [r4, #16]
    b21c:	2900      	cmp	r1, #0
    b21e:	d1fc      	bne.n	b21a <rtc_count_init+0xd2>
	switch (module->mode) {
    b220:	7919      	ldrb	r1, [r3, #4]
    b222:	2900      	cmp	r1, #0
    b224:	d014      	beq.n	b250 <rtc_count_init+0x108>
    b226:	2901      	cmp	r1, #1
    b228:	d107      	bne.n	b23a <rtc_count_init+0xf2>
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
    b22a:	0001      	movs	r1, r0
    b22c:	3108      	adds	r1, #8
    b22e:	0089      	lsls	r1, r1, #2
    b230:	510d      	str	r5, [r1, r4]
    b232:	681c      	ldr	r4, [r3, #0]
	if (rtc_module->MODE0.SYNCBUSY.reg) {
    b234:	6921      	ldr	r1, [r4, #16]
    b236:	2900      	cmp	r1, #0
    b238:	d1fc      	bne.n	b234 <rtc_count_init+0xec>
    b23a:	3001      	adds	r0, #1
    b23c:	3204      	adds	r2, #4
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    b23e:	2802      	cmp	r0, #2
    b240:	d1ea      	bne.n	b218 <rtc_count_init+0xd0>
	return STATUS_OK;
    b242:	2000      	movs	r0, #0
    b244:	e7be      	b.n	b1c4 <rtc_count_init+0x7c>
				rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MATCHCLR;
    b246:	2480      	movs	r4, #128	; 0x80
    b248:	8801      	ldrh	r1, [r0, #0]
    b24a:	4321      	orrs	r1, r4
    b24c:	8001      	strh	r1, [r0, #0]
    b24e:	e7c0      	b.n	b1d2 <rtc_count_init+0x8a>
			if (comp_value > 0xffff) {
    b250:	42b5      	cmp	r5, r6
    b252:	d8f2      	bhi.n	b23a <rtc_count_init+0xf2>
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
    b254:	0001      	movs	r1, r0
    b256:	3110      	adds	r1, #16
    b258:	b2ad      	uxth	r5, r5
    b25a:	0049      	lsls	r1, r1, #1
    b25c:	530d      	strh	r5, [r1, r4]
    b25e:	e7e8      	b.n	b232 <rtc_count_init+0xea>
    b260:	40000400 	.word	0x40000400
    b264:	40001000 	.word	0x40001000
    b268:	e000e100 	.word	0xe000e100
    b26c:	ffff81ff 	.word	0xffff81ff
    b270:	20001680 	.word	0x20001680
    b274:	0000ffff 	.word	0x0000ffff

0000b278 <rtc_count_get_count>:
	Rtc *const rtc_module = module->hw;
    b278:	6802      	ldr	r2, [r0, #0]
	if (rtc_module->MODE0.SYNCBUSY.reg) {
    b27a:	6913      	ldr	r3, [r2, #16]
    b27c:	2b00      	cmp	r3, #0
    b27e:	d1fc      	bne.n	b27a <rtc_count_get_count+0x2>
	switch (module->mode) {
    b280:	7903      	ldrb	r3, [r0, #4]
    b282:	2b00      	cmp	r3, #0
    b284:	d004      	beq.n	b290 <rtc_count_get_count+0x18>
			ret_val = 0;
    b286:	2000      	movs	r0, #0
	switch (module->mode) {
    b288:	2b01      	cmp	r3, #1
    b28a:	d100      	bne.n	b28e <rtc_count_get_count+0x16>
			ret_val = rtc_module->MODE0.COUNT.reg;
    b28c:	6990      	ldr	r0, [r2, #24]
}
    b28e:	4770      	bx	lr
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
    b290:	8b10      	ldrh	r0, [r2, #24]
    b292:	b280      	uxth	r0, r0
			break;
    b294:	e7fb      	b.n	b28e <rtc_count_get_count+0x16>
    b296:	46c0      	nop			; (mov r8, r8)

0000b298 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    b298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    b29a:	4b3a      	ldr	r3, [pc, #232]	; (b384 <RTC_Handler+0xec>)
    b29c:	681f      	ldr	r7, [r3, #0]
	uint16_t callback_mask = module->enabled_callback;
    b29e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
	Rtc *const rtc_module = module->hw;
    b2a0:	683d      	ldr	r5, [r7, #0]
	callback_mask &= module->registered_callback;
    b2a2:	8ebe      	ldrh	r6, [r7, #52]	; 0x34
    b2a4:	401e      	ands	r6, r3
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
    b2a6:	89ab      	ldrh	r3, [r5, #12]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
    b2a8:	896c      	ldrh	r4, [r5, #10]
    b2aa:	401c      	ands	r4, r3
	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
    b2ac:	b223      	sxth	r3, r4
    b2ae:	2b00      	cmp	r3, #0
    b2b0:	db51      	blt.n	b356 <RTC_Handler+0xbe>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_PER(0xff)) {
    b2b2:	23ff      	movs	r3, #255	; 0xff
    b2b4:	4223      	tst	r3, r4
    b2b6:	d042      	beq.n	b33e <RTC_Handler+0xa6>
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    b2b8:	3bfe      	subs	r3, #254	; 0xfe
    b2ba:	4223      	tst	r3, r4
    b2bc:	d003      	beq.n	b2c6 <RTC_Handler+0x2e>
			  && (callback_mask & (1 << i))) {
    b2be:	4233      	tst	r3, r6
    b2c0:	d001      	beq.n	b2c6 <RTC_Handler+0x2e>
				module->callbacks[i]();
    b2c2:	68bb      	ldr	r3, [r7, #8]
    b2c4:	4798      	blx	r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    b2c6:	2301      	movs	r3, #1
    b2c8:	81ab      	strh	r3, [r5, #12]
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    b2ca:	07a2      	lsls	r2, r4, #30
    b2cc:	d504      	bpl.n	b2d8 <RTC_Handler+0x40>
			  && (callback_mask & (1 << i))) {
    b2ce:	1072      	asrs	r2, r6, #1
    b2d0:	4213      	tst	r3, r2
    b2d2:	d001      	beq.n	b2d8 <RTC_Handler+0x40>
				module->callbacks[i]();
    b2d4:	68fb      	ldr	r3, [r7, #12]
    b2d6:	4798      	blx	r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    b2d8:	2302      	movs	r3, #2
    b2da:	81ab      	strh	r3, [r5, #12]
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    b2dc:	0763      	lsls	r3, r4, #29
    b2de:	d503      	bpl.n	b2e8 <RTC_Handler+0x50>
			  && (callback_mask & (1 << i))) {
    b2e0:	0773      	lsls	r3, r6, #29
    b2e2:	d501      	bpl.n	b2e8 <RTC_Handler+0x50>
				module->callbacks[i]();
    b2e4:	693b      	ldr	r3, [r7, #16]
    b2e6:	4798      	blx	r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    b2e8:	2304      	movs	r3, #4
    b2ea:	81ab      	strh	r3, [r5, #12]
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    b2ec:	0723      	lsls	r3, r4, #28
    b2ee:	d503      	bpl.n	b2f8 <RTC_Handler+0x60>
			  && (callback_mask & (1 << i))) {
    b2f0:	0733      	lsls	r3, r6, #28
    b2f2:	d501      	bpl.n	b2f8 <RTC_Handler+0x60>
				module->callbacks[i]();
    b2f4:	697b      	ldr	r3, [r7, #20]
    b2f6:	4798      	blx	r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    b2f8:	2308      	movs	r3, #8
    b2fa:	81ab      	strh	r3, [r5, #12]
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    b2fc:	06e3      	lsls	r3, r4, #27
    b2fe:	d503      	bpl.n	b308 <RTC_Handler+0x70>
			  && (callback_mask & (1 << i))) {
    b300:	06f3      	lsls	r3, r6, #27
    b302:	d501      	bpl.n	b308 <RTC_Handler+0x70>
				module->callbacks[i]();
    b304:	69bb      	ldr	r3, [r7, #24]
    b306:	4798      	blx	r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    b308:	2310      	movs	r3, #16
    b30a:	81ab      	strh	r3, [r5, #12]
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    b30c:	06a3      	lsls	r3, r4, #26
    b30e:	d503      	bpl.n	b318 <RTC_Handler+0x80>
			  && (callback_mask & (1 << i))) {
    b310:	06b3      	lsls	r3, r6, #26
    b312:	d501      	bpl.n	b318 <RTC_Handler+0x80>
				module->callbacks[i]();
    b314:	69fb      	ldr	r3, [r7, #28]
    b316:	4798      	blx	r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    b318:	2320      	movs	r3, #32
    b31a:	81ab      	strh	r3, [r5, #12]
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    b31c:	0663      	lsls	r3, r4, #25
    b31e:	d503      	bpl.n	b328 <RTC_Handler+0x90>
			  && (callback_mask & (1 << i))) {
    b320:	0673      	lsls	r3, r6, #25
    b322:	d501      	bpl.n	b328 <RTC_Handler+0x90>
				module->callbacks[i]();
    b324:	6a3b      	ldr	r3, [r7, #32]
    b326:	4798      	blx	r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    b328:	2340      	movs	r3, #64	; 0x40
    b32a:	81ab      	strh	r3, [r5, #12]
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    b32c:	0623      	lsls	r3, r4, #24
    b32e:	d503      	bpl.n	b338 <RTC_Handler+0xa0>
			  && (callback_mask & (1 << i))) {
    b330:	0633      	lsls	r3, r6, #24
    b332:	d501      	bpl.n	b338 <RTC_Handler+0xa0>
				module->callbacks[i]();
    b334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b336:	4798      	blx	r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    b338:	2380      	movs	r3, #128	; 0x80
    b33a:	81ab      	strh	r3, [r5, #12]
	_rtc_interrupt_handler(0);
}
    b33c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
    b33e:	2380      	movs	r3, #128	; 0x80
    b340:	005b      	lsls	r3, r3, #1
    b342:	421c      	tst	r4, r3
    b344:	d00c      	beq.n	b360 <RTC_Handler+0xc8>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
    b346:	421e      	tst	r6, r3
    b348:	d001      	beq.n	b34e <RTC_Handler+0xb6>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
    b34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b34c:	4798      	blx	r3
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
    b34e:	2380      	movs	r3, #128	; 0x80
    b350:	005b      	lsls	r3, r3, #1
    b352:	81ab      	strh	r3, [r5, #12]
    b354:	e7f2      	b.n	b33c <RTC_Handler+0xa4>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
    b356:	0573      	lsls	r3, r6, #21
    b358:	d40c      	bmi.n	b374 <RTC_Handler+0xdc>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
    b35a:	4b0b      	ldr	r3, [pc, #44]	; (b388 <RTC_Handler+0xf0>)
    b35c:	81ab      	strh	r3, [r5, #12]
    b35e:	e7ed      	b.n	b33c <RTC_Handler+0xa4>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
    b360:	2380      	movs	r3, #128	; 0x80
    b362:	009b      	lsls	r3, r3, #2
    b364:	421c      	tst	r4, r3
    b366:	d0e9      	beq.n	b33c <RTC_Handler+0xa4>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
    b368:	421e      	tst	r6, r3
    b36a:	d108      	bne.n	b37e <RTC_Handler+0xe6>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
    b36c:	2380      	movs	r3, #128	; 0x80
    b36e:	009b      	lsls	r3, r3, #2
    b370:	81ab      	strh	r3, [r5, #12]
}
    b372:	e7e3      	b.n	b33c <RTC_Handler+0xa4>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
    b374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b376:	4798      	blx	r3
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
    b378:	4b03      	ldr	r3, [pc, #12]	; (b388 <RTC_Handler+0xf0>)
    b37a:	81ab      	strh	r3, [r5, #12]
    b37c:	e7de      	b.n	b33c <RTC_Handler+0xa4>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
    b37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b380:	4798      	blx	r3
    b382:	e7f3      	b.n	b36c <RTC_Handler+0xd4>
    b384:	20001680 	.word	0x20001680
    b388:	ffff8000 	.word	0xffff8000

0000b38c <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    b38c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b38e:	4645      	mov	r5, r8
    b390:	4688      	mov	r8, r1
    b392:	464e      	mov	r6, r9
    b394:	46de      	mov	lr, fp
    b396:	4657      	mov	r7, sl
	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    b398:	4643      	mov	r3, r8
{
    b39a:	b5e0      	push	{r5, r6, r7, lr}
	uint16_t tmp_data_length = packet->data_length;
    b39c:	885b      	ldrh	r3, [r3, #2]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    b39e:	2207      	movs	r2, #7
    b3a0:	4699      	mov	r9, r3
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    b3a2:	6801      	ldr	r1, [r0, #0]
    b3a4:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    b3a6:	421a      	tst	r2, r3
    b3a8:	d1fc      	bne.n	b3a4 <_i2c_master_write_packet+0x18>

	_i2c_master_wait_for_sync(module);

	/* Switch to high speed mode */
	if (packet->high_speed) {
    b3aa:	4643      	mov	r3, r8
    b3ac:	7a5b      	ldrb	r3, [r3, #9]
    b3ae:	2b00      	cmp	r3, #0
    b3b0:	d000      	beq.n	b3b4 <_i2c_master_write_packet+0x28>
    b3b2:	e08d      	b.n	b4d0 <_i2c_master_write_packet+0x144>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    b3b4:	684b      	ldr	r3, [r1, #4]
    b3b6:	4a55      	ldr	r2, [pc, #340]	; (b50c <_i2c_master_write_packet+0x180>)
    b3b8:	4013      	ands	r3, r2
    b3ba:	604b      	str	r3, [r1, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    b3bc:	4643      	mov	r3, r8
    b3be:	7a1b      	ldrb	r3, [r3, #8]
    b3c0:	2b00      	cmp	r3, #0
    b3c2:	d058      	beq.n	b476 <_i2c_master_write_packet+0xea>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    b3c4:	4643      	mov	r3, r8
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    b3c6:	4642      	mov	r2, r8
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    b3c8:	881b      	ldrh	r3, [r3, #0]
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    b3ca:	7a52      	ldrb	r2, [r2, #9]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    b3cc:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    b3ce:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    b3d0:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    b3d2:	2280      	movs	r2, #128	; 0x80
    b3d4:	0212      	lsls	r2, r2, #8
    b3d6:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    b3d8:	624b      	str	r3, [r1, #36]	; 0x24
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    b3da:	6802      	ldr	r2, [r0, #0]
	uint16_t timeout_counter = 0;
    b3dc:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    b3de:	2501      	movs	r5, #1
    b3e0:	2602      	movs	r6, #2
    b3e2:	e008      	b.n	b3f6 <_i2c_master_write_packet+0x6a>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    b3e4:	7e14      	ldrb	r4, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    b3e6:	4226      	tst	r6, r4
    b3e8:	d108      	bne.n	b3fc <_i2c_master_write_packet+0x70>
		if (++timeout_counter >= module->buffer_timeout) {
    b3ea:	3301      	adds	r3, #1
    b3ec:	8904      	ldrh	r4, [r0, #8]
    b3ee:	b29b      	uxth	r3, r3
    b3f0:	429c      	cmp	r4, r3
    b3f2:	d800      	bhi.n	b3f6 <_i2c_master_write_packet+0x6a>
    b3f4:	e06a      	b.n	b4cc <_i2c_master_write_packet+0x140>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    b3f6:	7e14      	ldrb	r4, [r2, #24]
    b3f8:	4225      	tst	r5, r4
    b3fa:	d0f3      	beq.n	b3e4 <_i2c_master_write_packet+0x58>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    b3fc:	2302      	movs	r3, #2
    b3fe:	7e14      	ldrb	r4, [r2, #24]
    b400:	4223      	tst	r3, r4
    b402:	d041      	beq.n	b488 <_i2c_master_write_packet+0xfc>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    b404:	7613      	strb	r3, [r2, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    b406:	8b52      	ldrh	r2, [r2, #26]
    b408:	4213      	tst	r3, r2
    b40a:	d147      	bne.n	b49c <_i2c_master_write_packet+0x110>
	uint16_t timeout_counter = 0;
    b40c:	2300      	movs	r3, #0
    b40e:	469c      	mov	ip, r3
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    b410:	3320      	adds	r3, #32
    b412:	469a      	mov	sl, r3
				return STATUS_ERR_PACKET_COLLISION;
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    b414:	3308      	adds	r3, #8
    b416:	469b      	mov	fp, r3
			if (tmp_status != STATUS_OK) {
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    b418:	4663      	mov	r3, ip
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    b41a:	2707      	movs	r7, #7
    b41c:	468c      	mov	ip, r1
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    b41e:	2501      	movs	r5, #1
    b420:	2602      	movs	r6, #2
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    b422:	0019      	movs	r1, r3
		while (tmp_data_length--) {
    b424:	4549      	cmp	r1, r9
    b426:	d100      	bne.n	b42a <_i2c_master_write_packet+0x9e>
    b428:	e06d      	b.n	b506 <_i2c_master_write_packet+0x17a>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    b42a:	4663      	mov	r3, ip
    b42c:	4652      	mov	r2, sl
    b42e:	8b5b      	ldrh	r3, [r3, #26]
    b430:	421a      	tst	r2, r3
    b432:	d033      	beq.n	b49c <_i2c_master_write_packet+0x110>
    b434:	6802      	ldr	r2, [r0, #0]
    b436:	69d3      	ldr	r3, [r2, #28]
	while (i2c_master_is_syncing(module)) {
    b438:	421f      	tst	r7, r3
    b43a:	d1fc      	bne.n	b436 <_i2c_master_write_packet+0xaa>
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    b43c:	4643      	mov	r3, r8
    b43e:	4662      	mov	r2, ip
    b440:	465c      	mov	r4, fp
    b442:	685b      	ldr	r3, [r3, #4]
    b444:	5c5b      	ldrb	r3, [r3, r1]
    b446:	5513      	strb	r3, [r2, r4]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    b448:	6802      	ldr	r2, [r0, #0]
	uint16_t timeout_counter = 0;
    b44a:	2300      	movs	r3, #0
    b44c:	e007      	b.n	b45e <_i2c_master_write_packet+0xd2>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    b44e:	7e14      	ldrb	r4, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    b450:	4226      	tst	r6, r4
    b452:	d107      	bne.n	b464 <_i2c_master_write_packet+0xd8>
		if (++timeout_counter >= module->buffer_timeout) {
    b454:	3301      	adds	r3, #1
    b456:	8904      	ldrh	r4, [r0, #8]
    b458:	b29b      	uxth	r3, r3
    b45a:	429c      	cmp	r4, r3
    b45c:	d926      	bls.n	b4ac <_i2c_master_write_packet+0x120>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    b45e:	7e14      	ldrb	r4, [r2, #24]
    b460:	4225      	tst	r5, r4
    b462:	d0f4      	beq.n	b44e <_i2c_master_write_packet+0xc2>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    b464:	4663      	mov	r3, ip
    b466:	2204      	movs	r2, #4
    b468:	8b5b      	ldrh	r3, [r3, #26]
    b46a:	3101      	adds	r1, #1
    b46c:	421a      	tst	r2, r3
    b46e:	d0d9      	beq.n	b424 <_i2c_master_write_packet+0x98>
    b470:	4661      	mov	r1, ip
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
    b472:	221e      	movs	r2, #30
    b474:	e01c      	b.n	b4b0 <_i2c_master_write_packet+0x124>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    b476:	4643      	mov	r3, r8
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    b478:	4642      	mov	r2, r8
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    b47a:	881b      	ldrh	r3, [r3, #0]
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    b47c:	7a52      	ldrb	r2, [r2, #9]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    b47e:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    b480:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    b482:	4313      	orrs	r3, r2
    b484:	624b      	str	r3, [r1, #36]	; 0x24
    b486:	e7a8      	b.n	b3da <_i2c_master_write_packet+0x4e>
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    b488:	8b53      	ldrh	r3, [r2, #26]
    b48a:	075b      	lsls	r3, r3, #29
    b48c:	d5be      	bpl.n	b40c <_i2c_master_write_packet+0x80>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    b48e:	23c0      	movs	r3, #192	; 0xc0
    b490:	6851      	ldr	r1, [r2, #4]
    b492:	029b      	lsls	r3, r3, #10
    b494:	430b      	orrs	r3, r1
    b496:	6053      	str	r3, [r2, #4]
		return STATUS_ERR_BAD_ADDRESS;
    b498:	2218      	movs	r2, #24
    b49a:	e000      	b.n	b49e <_i2c_master_write_packet+0x112>
			return STATUS_ERR_PACKET_COLLISION;
    b49c:	2241      	movs	r2, #65	; 0x41
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
    b49e:	0010      	movs	r0, r2
    b4a0:	bc3c      	pop	{r2, r3, r4, r5}
    b4a2:	4690      	mov	r8, r2
    b4a4:	4699      	mov	r9, r3
    b4a6:	46a2      	mov	sl, r4
    b4a8:	46ab      	mov	fp, r5
    b4aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b4ac:	4661      	mov	r1, ip
			return STATUS_ERR_TIMEOUT;
    b4ae:	2212      	movs	r2, #18
		if (module->send_stop) {
    b4b0:	7a83      	ldrb	r3, [r0, #10]
    b4b2:	2b00      	cmp	r3, #0
    b4b4:	d0f3      	beq.n	b49e <_i2c_master_write_packet+0x112>
    b4b6:	6804      	ldr	r4, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    b4b8:	2007      	movs	r0, #7
    b4ba:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
    b4bc:	4218      	tst	r0, r3
    b4be:	d1fc      	bne.n	b4ba <_i2c_master_write_packet+0x12e>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    b4c0:	23c0      	movs	r3, #192	; 0xc0
    b4c2:	6848      	ldr	r0, [r1, #4]
    b4c4:	029b      	lsls	r3, r3, #10
    b4c6:	4303      	orrs	r3, r0
    b4c8:	604b      	str	r3, [r1, #4]
    b4ca:	e7e8      	b.n	b49e <_i2c_master_write_packet+0x112>
			return STATUS_ERR_TIMEOUT;
    b4cc:	2212      	movs	r2, #18
    b4ce:	e7e6      	b.n	b49e <_i2c_master_write_packet+0x112>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    b4d0:	4643      	mov	r3, r8
    b4d2:	7a9a      	ldrb	r2, [r3, #10]
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    b4d4:	2380      	movs	r3, #128	; 0x80
    b4d6:	684c      	ldr	r4, [r1, #4]
    b4d8:	02db      	lsls	r3, r3, #11
    b4da:	4323      	orrs	r3, r4
    b4dc:	604b      	str	r3, [r1, #4]
	i2c_module->ADDR.reg = hs_master_code;
    b4de:	624a      	str	r2, [r1, #36]	; 0x24
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    b4e0:	6802      	ldr	r2, [r0, #0]
	uint16_t timeout_counter = 0;
    b4e2:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    b4e4:	2501      	movs	r5, #1
    b4e6:	2602      	movs	r6, #2
    b4e8:	e007      	b.n	b4fa <_i2c_master_write_packet+0x16e>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    b4ea:	7e14      	ldrb	r4, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    b4ec:	4226      	tst	r6, r4
    b4ee:	d107      	bne.n	b500 <_i2c_master_write_packet+0x174>
		if (++timeout_counter >= module->buffer_timeout) {
    b4f0:	3301      	adds	r3, #1
    b4f2:	8904      	ldrh	r4, [r0, #8]
    b4f4:	b29b      	uxth	r3, r3
    b4f6:	429c      	cmp	r4, r3
    b4f8:	d902      	bls.n	b500 <_i2c_master_write_packet+0x174>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    b4fa:	7e14      	ldrb	r4, [r2, #24]
    b4fc:	4225      	tst	r5, r4
    b4fe:	d0f4      	beq.n	b4ea <_i2c_master_write_packet+0x15e>
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    b500:	2301      	movs	r3, #1
    b502:	760b      	strb	r3, [r1, #24]
    b504:	e756      	b.n	b3b4 <_i2c_master_write_packet+0x28>
    b506:	4661      	mov	r1, ip
    b508:	2200      	movs	r2, #0
    b50a:	e7d1      	b.n	b4b0 <_i2c_master_write_packet+0x124>
    b50c:	fffbffff 	.word	0xfffbffff

0000b510 <_i2c_master_read_packet>:
{
    b510:	b5f0      	push	{r4, r5, r6, r7, lr}
    b512:	464e      	mov	r6, r9
    b514:	46de      	mov	lr, fp
    b516:	4657      	mov	r7, sl
    b518:	4645      	mov	r5, r8
    b51a:	b5e0      	push	{r5, r6, r7, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    b51c:	6803      	ldr	r3, [r0, #0]
{
    b51e:	4689      	mov	r9, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    b520:	469c      	mov	ip, r3
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    b522:	4663      	mov	r3, ip
    b524:	681b      	ldr	r3, [r3, #0]
{
    b526:	b083      	sub	sp, #12
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    b528:	011b      	lsls	r3, r3, #4
    b52a:	0fdb      	lsrs	r3, r3, #31
	uint16_t tmp_data_length = packet->data_length;
    b52c:	8849      	ldrh	r1, [r1, #2]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    b52e:	9301      	str	r3, [sp, #4]
	if (packet->high_speed) {
    b530:	464b      	mov	r3, r9
    b532:	7a5b      	ldrb	r3, [r3, #9]
    b534:	2b00      	cmp	r3, #0
    b536:	d000      	beq.n	b53a <_i2c_master_read_packet+0x2a>
    b538:	e0fc      	b.n	b734 <_i2c_master_read_packet+0x224>
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    b53a:	4663      	mov	r3, ip
    b53c:	4a9b      	ldr	r2, [pc, #620]	; (b7ac <_i2c_master_read_packet+0x29c>)
    b53e:	685b      	ldr	r3, [r3, #4]
    b540:	4013      	ands	r3, r2
    b542:	4662      	mov	r2, ip
    b544:	6053      	str	r3, [r2, #4]
	if (packet->ten_bit_address) {
    b546:	464b      	mov	r3, r9
    b548:	7a1b      	ldrb	r3, [r3, #8]
    b54a:	2b00      	cmp	r3, #0
    b54c:	d03c      	beq.n	b5c8 <_i2c_master_read_packet+0xb8>
		i2c_module->ADDR.reg = (packet->address << 1) |
    b54e:	464b      	mov	r3, r9
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    b550:	464a      	mov	r2, r9
		i2c_module->ADDR.reg = (packet->address << 1) |
    b552:	881b      	ldrh	r3, [r3, #0]
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    b554:	7a52      	ldrb	r2, [r2, #9]
		i2c_module->ADDR.reg = (packet->address << 1) |
    b556:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    b558:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    b55a:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    b55c:	2280      	movs	r2, #128	; 0x80
    b55e:	0212      	lsls	r2, r2, #8
    b560:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
    b562:	4662      	mov	r2, ip
    b564:	6253      	str	r3, [r2, #36]	; 0x24
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    b566:	6802      	ldr	r2, [r0, #0]
	uint16_t timeout_counter = 0;
    b568:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    b56a:	2501      	movs	r5, #1
    b56c:	2602      	movs	r6, #2
    b56e:	e008      	b.n	b582 <_i2c_master_read_packet+0x72>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    b570:	7e14      	ldrb	r4, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    b572:	4226      	tst	r6, r4
    b574:	d108      	bne.n	b588 <_i2c_master_read_packet+0x78>
		if (++timeout_counter >= module->buffer_timeout) {
    b576:	3301      	adds	r3, #1
    b578:	8904      	ldrh	r4, [r0, #8]
    b57a:	b29b      	uxth	r3, r3
    b57c:	429c      	cmp	r4, r3
    b57e:	d800      	bhi.n	b582 <_i2c_master_read_packet+0x72>
    b580:	e10a      	b.n	b798 <_i2c_master_read_packet+0x288>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    b582:	7e14      	ldrb	r4, [r2, #24]
    b584:	4225      	tst	r5, r4
    b586:	d0f3      	beq.n	b570 <_i2c_master_read_packet+0x60>
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    b588:	4663      	mov	r3, ip
    b58a:	4a88      	ldr	r2, [pc, #544]	; (b7ac <_i2c_master_read_packet+0x29c>)
    b58c:	685b      	ldr	r3, [r3, #4]
    b58e:	4013      	ands	r3, r2
    b590:	4662      	mov	r2, ip
    b592:	6053      	str	r3, [r2, #4]
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    b594:	2202      	movs	r2, #2
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    b596:	6803      	ldr	r3, [r0, #0]
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    b598:	7e1c      	ldrb	r4, [r3, #24]
    b59a:	4222      	tst	r2, r4
    b59c:	d100      	bne.n	b5a0 <_i2c_master_read_packet+0x90>
    b59e:	e0ef      	b.n	b780 <_i2c_master_read_packet+0x270>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    b5a0:	761a      	strb	r2, [r3, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    b5a2:	8b5b      	ldrh	r3, [r3, #26]
    b5a4:	421a      	tst	r2, r3
    b5a6:	d000      	beq.n	b5aa <_i2c_master_read_packet+0x9a>
    b5a8:	e0ad      	b.n	b706 <_i2c_master_read_packet+0x1f6>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    b5aa:	464b      	mov	r3, r9
    b5ac:	2278      	movs	r2, #120	; 0x78
    b5ae:	881b      	ldrh	r3, [r3, #0]
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    b5b0:	2401      	movs	r4, #1
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    b5b2:	0a1b      	lsrs	r3, r3, #8
    b5b4:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    b5b6:	464a      	mov	r2, r9
    b5b8:	7a52      	ldrb	r2, [r2, #9]
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    b5ba:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    b5bc:	0392      	lsls	r2, r2, #14
    b5be:	4322      	orrs	r2, r4
    b5c0:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    b5c2:	4662      	mov	r2, ip
    b5c4:	6253      	str	r3, [r2, #36]	; 0x24
    b5c6:	e00a      	b.n	b5de <_i2c_master_read_packet+0xce>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    b5c8:	464b      	mov	r3, r9
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    b5ca:	464a      	mov	r2, r9
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    b5cc:	881b      	ldrh	r3, [r3, #0]
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    b5ce:	7a52      	ldrb	r2, [r2, #9]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    b5d0:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    b5d2:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    b5d4:	4313      	orrs	r3, r2
    b5d6:	2201      	movs	r2, #1
    b5d8:	4313      	orrs	r3, r2
    b5da:	4662      	mov	r2, ip
    b5dc:	6253      	str	r3, [r2, #36]	; 0x24
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    b5de:	6802      	ldr	r2, [r0, #0]
	uint16_t timeout_counter = 0;
    b5e0:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    b5e2:	2501      	movs	r5, #1
    b5e4:	2602      	movs	r6, #2
    b5e6:	e008      	b.n	b5fa <_i2c_master_read_packet+0xea>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    b5e8:	7e14      	ldrb	r4, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    b5ea:	4226      	tst	r6, r4
    b5ec:	d108      	bne.n	b600 <_i2c_master_read_packet+0xf0>
		if (++timeout_counter >= module->buffer_timeout) {
    b5ee:	3301      	adds	r3, #1
    b5f0:	8904      	ldrh	r4, [r0, #8]
    b5f2:	b29b      	uxth	r3, r3
    b5f4:	429c      	cmp	r4, r3
    b5f6:	d800      	bhi.n	b5fa <_i2c_master_read_packet+0xea>
    b5f8:	e0ba      	b.n	b770 <_i2c_master_read_packet+0x260>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    b5fa:	7e14      	ldrb	r4, [r2, #24]
    b5fc:	4225      	tst	r5, r4
    b5fe:	d0f3      	beq.n	b5e8 <_i2c_master_read_packet+0xd8>
	return STATUS_OK;
    b600:	2300      	movs	r3, #0
    b602:	9300      	str	r3, [sp, #0]
	if ((sclsm_flag) && (packet->data_length == 1)) {
    b604:	9b01      	ldr	r3, [sp, #4]
    b606:	2b00      	cmp	r3, #0
    b608:	d000      	beq.n	b60c <_i2c_master_read_packet+0xfc>
    b60a:	e06f      	b.n	b6ec <_i2c_master_read_packet+0x1dc>
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    b60c:	4663      	mov	r3, ip
    b60e:	4a67      	ldr	r2, [pc, #412]	; (b7ac <_i2c_master_read_packet+0x29c>)
    b610:	685b      	ldr	r3, [r3, #4]
    b612:	4013      	ands	r3, r2
    b614:	4662      	mov	r2, ip
    b616:	6053      	str	r3, [r2, #4]
	if (tmp_status == STATUS_OK) {
    b618:	9b00      	ldr	r3, [sp, #0]
    b61a:	2b00      	cmp	r3, #0
    b61c:	d15e      	bne.n	b6dc <_i2c_master_read_packet+0x1cc>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    b61e:	2202      	movs	r2, #2
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    b620:	6803      	ldr	r3, [r0, #0]
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    b622:	7e1c      	ldrb	r4, [r3, #24]
    b624:	4222      	tst	r2, r4
    b626:	d100      	bne.n	b62a <_i2c_master_read_packet+0x11a>
    b628:	e0a5      	b.n	b776 <_i2c_master_read_packet+0x266>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    b62a:	761a      	strb	r2, [r3, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    b62c:	8b5b      	ldrh	r3, [r3, #26]
    b62e:	421a      	tst	r2, r3
    b630:	d169      	bne.n	b706 <_i2c_master_read_packet+0x1f6>
		while (tmp_data_length--) {
    b632:	4a5f      	ldr	r2, [pc, #380]	; (b7b0 <_i2c_master_read_packet+0x2a0>)
    b634:	3901      	subs	r1, #1
    b636:	4692      	mov	sl, r2
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    b638:	2220      	movs	r2, #32
    b63a:	b289      	uxth	r1, r1
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    b63c:	2300      	movs	r3, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    b63e:	4693      	mov	fp, r2
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    b640:	2707      	movs	r7, #7
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    b642:	2501      	movs	r5, #1
    b644:	2602      	movs	r6, #2
		while (tmp_data_length--) {
    b646:	4551      	cmp	r1, sl
    b648:	d02c      	beq.n	b6a4 <_i2c_master_read_packet+0x194>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    b64a:	4662      	mov	r2, ip
    b64c:	465c      	mov	r4, fp
    b64e:	8b52      	ldrh	r2, [r2, #26]
    b650:	4214      	tst	r4, r2
    b652:	d058      	beq.n	b706 <_i2c_master_read_packet+0x1f6>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    b654:	7ac2      	ldrb	r2, [r0, #11]
    b656:	2a00      	cmp	r2, #0
    b658:	d004      	beq.n	b664 <_i2c_master_read_packet+0x154>
    b65a:	9a01      	ldr	r2, [sp, #4]
    b65c:	2a00      	cmp	r2, #0
    b65e:	d055      	beq.n	b70c <_i2c_master_read_packet+0x1fc>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    b660:	2901      	cmp	r1, #1
    b662:	d055      	beq.n	b710 <_i2c_master_read_packet+0x200>
    b664:	6804      	ldr	r4, [r0, #0]
    b666:	69e2      	ldr	r2, [r4, #28]
	while (i2c_master_is_syncing(module)) {
    b668:	4217      	tst	r7, r2
    b66a:	d1fc      	bne.n	b666 <_i2c_master_read_packet+0x156>
				packet->data[counter++] = i2c_module->DATA.reg;
    b66c:	1c5a      	adds	r2, r3, #1
    b66e:	b292      	uxth	r2, r2
    b670:	2428      	movs	r4, #40	; 0x28
    b672:	4690      	mov	r8, r2
    b674:	4662      	mov	r2, ip
    b676:	5d12      	ldrb	r2, [r2, r4]
    b678:	464c      	mov	r4, r9
    b67a:	6864      	ldr	r4, [r4, #4]
    b67c:	54e2      	strb	r2, [r4, r3]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    b67e:	6802      	ldr	r2, [r0, #0]
	uint16_t timeout_counter = 0;
    b680:	2300      	movs	r3, #0
    b682:	e007      	b.n	b694 <_i2c_master_read_packet+0x184>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    b684:	7e14      	ldrb	r4, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    b686:	4226      	tst	r6, r4
    b688:	d107      	bne.n	b69a <_i2c_master_read_packet+0x18a>
		if (++timeout_counter >= module->buffer_timeout) {
    b68a:	3301      	adds	r3, #1
    b68c:	8904      	ldrh	r4, [r0, #8]
    b68e:	b29b      	uxth	r3, r3
    b690:	429c      	cmp	r4, r3
    b692:	d949      	bls.n	b728 <_i2c_master_read_packet+0x218>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    b694:	7e14      	ldrb	r4, [r2, #24]
    b696:	4225      	tst	r5, r4
    b698:	d0f4      	beq.n	b684 <_i2c_master_read_packet+0x174>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    b69a:	4643      	mov	r3, r8
    b69c:	3901      	subs	r1, #1
    b69e:	b289      	uxth	r1, r1
		while (tmp_data_length--) {
    b6a0:	4551      	cmp	r1, sl
    b6a2:	d1d2      	bne.n	b64a <_i2c_master_read_packet+0x13a>
    b6a4:	4698      	mov	r8, r3
		if (module->send_stop) {
    b6a6:	7a83      	ldrb	r3, [r0, #10]
    b6a8:	6802      	ldr	r2, [r0, #0]
    b6aa:	2b00      	cmp	r3, #0
    b6ac:	d00b      	beq.n	b6c6 <_i2c_master_read_packet+0x1b6>
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    b6ae:	2107      	movs	r1, #7
    b6b0:	69d3      	ldr	r3, [r2, #28]
	while (i2c_master_is_syncing(module)) {
    b6b2:	4219      	tst	r1, r3
    b6b4:	d1fc      	bne.n	b6b0 <_i2c_master_read_packet+0x1a0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    b6b6:	4663      	mov	r3, ip
    b6b8:	685a      	ldr	r2, [r3, #4]
    b6ba:	23c0      	movs	r3, #192	; 0xc0
    b6bc:	029b      	lsls	r3, r3, #10
    b6be:	4313      	orrs	r3, r2
    b6c0:	4662      	mov	r2, ip
    b6c2:	6053      	str	r3, [r2, #4]
    b6c4:	6802      	ldr	r2, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    b6c6:	2107      	movs	r1, #7
    b6c8:	69d3      	ldr	r3, [r2, #28]
	while (i2c_master_is_syncing(module)) {
    b6ca:	4219      	tst	r1, r3
    b6cc:	d1fc      	bne.n	b6c8 <_i2c_master_read_packet+0x1b8>
		packet->data[counter] = i2c_module->DATA.reg;
    b6ce:	2328      	movs	r3, #40	; 0x28
    b6d0:	4662      	mov	r2, ip
    b6d2:	5cd2      	ldrb	r2, [r2, r3]
    b6d4:	464b      	mov	r3, r9
    b6d6:	4641      	mov	r1, r8
    b6d8:	685b      	ldr	r3, [r3, #4]
    b6da:	545a      	strb	r2, [r3, r1]
}
    b6dc:	9800      	ldr	r0, [sp, #0]
    b6de:	b003      	add	sp, #12
    b6e0:	bc3c      	pop	{r2, r3, r4, r5}
    b6e2:	4690      	mov	r8, r2
    b6e4:	4699      	mov	r9, r3
    b6e6:	46a2      	mov	sl, r4
    b6e8:	46ab      	mov	fp, r5
    b6ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((sclsm_flag) && (packet->data_length == 1)) {
    b6ec:	464b      	mov	r3, r9
    b6ee:	885b      	ldrh	r3, [r3, #2]
    b6f0:	2b01      	cmp	r3, #1
    b6f2:	d000      	beq.n	b6f6 <_i2c_master_read_packet+0x1e6>
    b6f4:	e78a      	b.n	b60c <_i2c_master_read_packet+0xfc>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    b6f6:	4663      	mov	r3, ip
    b6f8:	685a      	ldr	r2, [r3, #4]
    b6fa:	2380      	movs	r3, #128	; 0x80
    b6fc:	02db      	lsls	r3, r3, #11
    b6fe:	4313      	orrs	r3, r2
    b700:	4662      	mov	r2, ip
    b702:	6053      	str	r3, [r2, #4]
    b704:	e788      	b.n	b618 <_i2c_master_read_packet+0x108>
			return STATUS_ERR_PACKET_COLLISION;
    b706:	2341      	movs	r3, #65	; 0x41
    b708:	9300      	str	r3, [sp, #0]
    b70a:	e7e7      	b.n	b6dc <_i2c_master_read_packet+0x1cc>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    b70c:	2900      	cmp	r1, #0
    b70e:	d1a9      	bne.n	b664 <_i2c_master_read_packet+0x154>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    b710:	4662      	mov	r2, ip
    b712:	6854      	ldr	r4, [r2, #4]
    b714:	2280      	movs	r2, #128	; 0x80
    b716:	02d2      	lsls	r2, r2, #11
    b718:	4322      	orrs	r2, r4
    b71a:	4698      	mov	r8, r3
    b71c:	4664      	mov	r4, ip
    b71e:	3901      	subs	r1, #1
    b720:	6062      	str	r2, [r4, #4]
    b722:	b289      	uxth	r1, r1
    b724:	4643      	mov	r3, r8
    b726:	e7bb      	b.n	b6a0 <_i2c_master_read_packet+0x190>
			return STATUS_ERR_TIMEOUT;
    b728:	2312      	movs	r3, #18
    b72a:	9300      	str	r3, [sp, #0]
		if (module->send_stop) {
    b72c:	7a83      	ldrb	r3, [r0, #10]
    b72e:	2b00      	cmp	r3, #0
    b730:	d0c9      	beq.n	b6c6 <_i2c_master_read_packet+0x1b6>
    b732:	e7bc      	b.n	b6ae <_i2c_master_read_packet+0x19e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    b734:	464b      	mov	r3, r9
    b736:	7a9a      	ldrb	r2, [r3, #10]
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    b738:	4663      	mov	r3, ip
    b73a:	685c      	ldr	r4, [r3, #4]
    b73c:	2380      	movs	r3, #128	; 0x80
    b73e:	02db      	lsls	r3, r3, #11
    b740:	4323      	orrs	r3, r4
    b742:	4664      	mov	r4, ip
    b744:	6063      	str	r3, [r4, #4]
	i2c_module->ADDR.reg = hs_master_code;
    b746:	6262      	str	r2, [r4, #36]	; 0x24
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    b748:	6802      	ldr	r2, [r0, #0]
	uint16_t timeout_counter = 0;
    b74a:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    b74c:	2501      	movs	r5, #1
    b74e:	2602      	movs	r6, #2
    b750:	e007      	b.n	b762 <_i2c_master_read_packet+0x252>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    b752:	7e14      	ldrb	r4, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    b754:	4226      	tst	r6, r4
    b756:	d107      	bne.n	b768 <_i2c_master_read_packet+0x258>
		if (++timeout_counter >= module->buffer_timeout) {
    b758:	3301      	adds	r3, #1
    b75a:	8904      	ldrh	r4, [r0, #8]
    b75c:	b29b      	uxth	r3, r3
    b75e:	429c      	cmp	r4, r3
    b760:	d902      	bls.n	b768 <_i2c_master_read_packet+0x258>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    b762:	7e14      	ldrb	r4, [r2, #24]
    b764:	4225      	tst	r5, r4
    b766:	d0f4      	beq.n	b752 <_i2c_master_read_packet+0x242>
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    b768:	2301      	movs	r3, #1
    b76a:	4662      	mov	r2, ip
    b76c:	7613      	strb	r3, [r2, #24]
    b76e:	e6e4      	b.n	b53a <_i2c_master_read_packet+0x2a>
			return STATUS_ERR_TIMEOUT;
    b770:	2312      	movs	r3, #18
    b772:	9300      	str	r3, [sp, #0]
    b774:	e746      	b.n	b604 <_i2c_master_read_packet+0xf4>
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    b776:	8b5a      	ldrh	r2, [r3, #26]
    b778:	0752      	lsls	r2, r2, #29
    b77a:	d400      	bmi.n	b77e <_i2c_master_read_packet+0x26e>
    b77c:	e759      	b.n	b632 <_i2c_master_read_packet+0x122>
    b77e:	e003      	b.n	b788 <_i2c_master_read_packet+0x278>
    b780:	8b5a      	ldrh	r2, [r3, #26]
    b782:	0752      	lsls	r2, r2, #29
    b784:	d400      	bmi.n	b788 <_i2c_master_read_packet+0x278>
    b786:	e710      	b.n	b5aa <_i2c_master_read_packet+0x9a>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    b788:	22c0      	movs	r2, #192	; 0xc0
    b78a:	6859      	ldr	r1, [r3, #4]
    b78c:	0292      	lsls	r2, r2, #10
    b78e:	430a      	orrs	r2, r1
    b790:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    b792:	2318      	movs	r3, #24
    b794:	9300      	str	r3, [sp, #0]
    b796:	e7a1      	b.n	b6dc <_i2c_master_read_packet+0x1cc>
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    b798:	4663      	mov	r3, ip
    b79a:	4a04      	ldr	r2, [pc, #16]	; (b7ac <_i2c_master_read_packet+0x29c>)
    b79c:	685b      	ldr	r3, [r3, #4]
    b79e:	4013      	ands	r3, r2
    b7a0:	4662      	mov	r2, ip
    b7a2:	6053      	str	r3, [r2, #4]
			return STATUS_ERR_TIMEOUT;
    b7a4:	2312      	movs	r3, #18
    b7a6:	9300      	str	r3, [sp, #0]
    b7a8:	e798      	b.n	b6dc <_i2c_master_read_packet+0x1cc>
    b7aa:	46c0      	nop			; (mov r8, r8)
    b7ac:	fffbffff 	.word	0xfffbffff
    b7b0:	0000ffff 	.word	0x0000ffff

0000b7b4 <i2c_master_init>:
{
    b7b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    b7b6:	46de      	mov	lr, fp
    b7b8:	464e      	mov	r6, r9
    b7ba:	4645      	mov	r5, r8
    b7bc:	4657      	mov	r7, sl
    b7be:	b5e0      	push	{r5, r6, r7, lr}
    b7c0:	0005      	movs	r5, r0
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    b7c2:	4bac      	ldr	r3, [pc, #688]	; (ba74 <i2c_master_init+0x2c0>)
{
    b7c4:	b089      	sub	sp, #36	; 0x24
	module->hw = hw;
    b7c6:	6029      	str	r1, [r5, #0]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    b7c8:	0008      	movs	r0, r1
{
    b7ca:	0014      	movs	r4, r2
    b7cc:	000e      	movs	r6, r1
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    b7ce:	469b      	mov	fp, r3
    b7d0:	4798      	blx	r3

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    b7d2:	4aa9      	ldr	r2, [pc, #676]	; (ba78 <i2c_master_init+0x2c4>)
	if (sercom_index == 5) {
    b7d4:	2805      	cmp	r0, #5
    b7d6:	d100      	bne.n	b7da <i2c_master_init+0x26>
    b7d8:	e0ef      	b.n	b9ba <i2c_master_init+0x206>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    b7da:	2301      	movs	r3, #1
    b7dc:	4083      	lsls	r3, r0
			MCLK->APBCMASK.reg |= mask;
    b7de:	69d1      	ldr	r1, [r2, #28]
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    b7e0:	3012      	adds	r0, #18
    b7e2:	430b      	orrs	r3, r1
    b7e4:	61d3      	str	r3, [r2, #28]
    b7e6:	b2c7      	uxtb	r7, r0
	gclk_chan_conf.source_generator = config->generator_source;
    b7e8:	7b23      	ldrb	r3, [r4, #12]
    b7ea:	aa06      	add	r2, sp, #24
    b7ec:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    b7ee:	0011      	movs	r1, r2
    b7f0:	0038      	movs	r0, r7
    b7f2:	4ba2      	ldr	r3, [pc, #648]	; (ba7c <i2c_master_init+0x2c8>)
    b7f4:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    b7f6:	0038      	movs	r0, r7
    b7f8:	4ba1      	ldr	r3, [pc, #644]	; (ba80 <i2c_master_init+0x2cc>)
    b7fa:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    b7fc:	4ba1      	ldr	r3, [pc, #644]	; (ba84 <i2c_master_init+0x2d0>)
    b7fe:	7b20      	ldrb	r0, [r4, #12]
    b800:	2100      	movs	r1, #0
    b802:	4798      	blx	r3
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    b804:	6833      	ldr	r3, [r6, #0]
		return STATUS_ERR_DENIED;
    b806:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    b808:	079b      	lsls	r3, r3, #30
    b80a:	d506      	bpl.n	b81a <i2c_master_init+0x66>
}
    b80c:	b009      	add	sp, #36	; 0x24
    b80e:	bc3c      	pop	{r2, r3, r4, r5}
    b810:	4690      	mov	r8, r2
    b812:	4699      	mov	r9, r3
    b814:	46a2      	mov	sl, r4
    b816:	46ab      	mov	fp, r5
    b818:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    b81a:	2701      	movs	r7, #1
    b81c:	6833      	ldr	r3, [r6, #0]
		return STATUS_BUSY;
    b81e:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    b820:	403b      	ands	r3, r7
    b822:	4698      	mov	r8, r3
    b824:	d1f2      	bne.n	b80c <i2c_master_init+0x58>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    b826:	6828      	ldr	r0, [r5, #0]
    b828:	47d8      	blx	fp
    b82a:	4682      	mov	sl, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    b82c:	4996      	ldr	r1, [pc, #600]	; (ba88 <i2c_master_init+0x2d4>)
    b82e:	4b97      	ldr	r3, [pc, #604]	; (ba8c <i2c_master_init+0x2d8>)
    b830:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    b832:	4653      	mov	r3, sl
    b834:	4a96      	ldr	r2, [pc, #600]	; (ba90 <i2c_master_init+0x2dc>)
    b836:	009b      	lsls	r3, r3, #2
    b838:	509d      	str	r5, [r3, r2]
	module->registered_callback = 0;
    b83a:	4643      	mov	r3, r8
    b83c:	762b      	strb	r3, [r5, #24]
	module->enabled_callback = 0;
    b83e:	766b      	strb	r3, [r5, #25]
	module->buffer_length = 0;
    b840:	2300      	movs	r3, #0
    b842:	469a      	mov	sl, r3
    b844:	4643      	mov	r3, r8
	module->status = STATUS_OK;
    b846:	4652      	mov	r2, sl
	module->buffer_length = 0;
    b848:	836b      	strh	r3, [r5, #26]
	module->buffer_remaining = 0;
    b84a:	83ab      	strh	r3, [r5, #28]
	module->status = STATUS_OK;
    b84c:	2325      	movs	r3, #37	; 0x25
    b84e:	54ea      	strb	r2, [r5, r3]
	module->buffer = NULL;
    b850:	4643      	mov	r3, r8
    b852:	622b      	str	r3, [r5, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    b854:	2314      	movs	r3, #20
    b856:	6033      	str	r3, [r6, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    b858:	682b      	ldr	r3, [r5, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    b85a:	ae07      	add	r6, sp, #28
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    b85c:	0018      	movs	r0, r3
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    b85e:	4699      	mov	r9, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    b860:	47d8      	blx	fp
    b862:	2380      	movs	r3, #128	; 0x80
    b864:	7033      	strb	r3, [r6, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    b866:	4653      	mov	r3, sl
    b868:	9000      	str	r0, [sp, #0]
	uint32_t pad0 = config->pinmux_pad0;
    b86a:	69e0      	ldr	r0, [r4, #28]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    b86c:	70b7      	strb	r7, [r6, #2]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    b86e:	7073      	strb	r3, [r6, #1]
	config->powersave    = false;
    b870:	70f3      	strb	r3, [r6, #3]
	uint32_t pad1 = config->pinmux_pad1;
    b872:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
    b874:	2800      	cmp	r0, #0
    b876:	d100      	bne.n	b87a <i2c_master_init+0xc6>
    b878:	e0b4      	b.n	b9e4 <i2c_master_init+0x230>
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    b87a:	2302      	movs	r3, #2
	pin_conf.mux_position = pad0 & 0xFFFF;
    b87c:	7030      	strb	r0, [r6, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    b87e:	7073      	strb	r3, [r6, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    b880:	0c00      	lsrs	r0, r0, #16
    b882:	4b84      	ldr	r3, [pc, #528]	; (ba94 <i2c_master_init+0x2e0>)
    b884:	b2c0      	uxtb	r0, r0
    b886:	0031      	movs	r1, r6
    b888:	469b      	mov	fp, r3
    b88a:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
    b88c:	2f00      	cmp	r7, #0
    b88e:	d100      	bne.n	b892 <i2c_master_init+0xde>
    b890:	e0ad      	b.n	b9ee <i2c_master_init+0x23a>
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    b892:	2302      	movs	r3, #2
	pin_conf.mux_position = pad1 & 0xFFFF;
    b894:	7037      	strb	r7, [r6, #0]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    b896:	0c3f      	lsrs	r7, r7, #16
    b898:	0031      	movs	r1, r6
    b89a:	b2f8      	uxtb	r0, r7
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    b89c:	469a      	mov	sl, r3
    b89e:	7073      	strb	r3, [r6, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    b8a0:	47d8      	blx	fp
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    b8a2:	8aa3      	ldrh	r3, [r4, #20]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    b8a4:	2180      	movs	r1, #128	; 0x80
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    b8a6:	80eb      	strh	r3, [r5, #6]
	module->buffer_timeout = config->buffer_timeout;
    b8a8:	8ae3      	ldrh	r3, [r4, #22]
    b8aa:	812b      	strh	r3, [r5, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
    b8ac:	7e23      	ldrb	r3, [r4, #24]
    b8ae:	2b00      	cmp	r3, #0
    b8b0:	d100      	bne.n	b8b4 <i2c_master_init+0x100>
    b8b2:	e088      	b.n	b9c6 <i2c_master_init+0x212>
	tmp_ctrla |= config->transfer_speed;
    b8b4:	68a2      	ldr	r2, [r4, #8]
    b8b6:	6923      	ldr	r3, [r4, #16]
    b8b8:	4313      	orrs	r3, r2
    b8ba:	430b      	orrs	r3, r1
	if (config->scl_low_timeout) {
    b8bc:	2124      	movs	r1, #36	; 0x24
    b8be:	5c61      	ldrb	r1, [r4, r1]
    b8c0:	2900      	cmp	r1, #0
    b8c2:	d002      	beq.n	b8ca <i2c_master_init+0x116>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    b8c4:	2180      	movs	r1, #128	; 0x80
    b8c6:	05c9      	lsls	r1, r1, #23
    b8c8:	430b      	orrs	r3, r1
		tmp_ctrla |= config->inactive_timeout;
    b8ca:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    b8cc:	430b      	orrs	r3, r1
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    b8ce:	212c      	movs	r1, #44	; 0x2c
    b8d0:	5c61      	ldrb	r1, [r4, r1]
    b8d2:	2900      	cmp	r1, #0
    b8d4:	d100      	bne.n	b8d8 <i2c_master_init+0x124>
    b8d6:	e07f      	b.n	b9d8 <i2c_master_init+0x224>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    b8d8:	2280      	movs	r2, #128	; 0x80
    b8da:	0512      	lsls	r2, r2, #20
    b8dc:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
    b8de:	222d      	movs	r2, #45	; 0x2d
    b8e0:	5ca2      	ldrb	r2, [r4, r2]
    b8e2:	2a00      	cmp	r2, #0
    b8e4:	d002      	beq.n	b8ec <i2c_master_init+0x138>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    b8e6:	2280      	movs	r2, #128	; 0x80
    b8e8:	0412      	lsls	r2, r2, #16
    b8ea:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
    b8ec:	222e      	movs	r2, #46	; 0x2e
    b8ee:	5ca2      	ldrb	r2, [r4, r2]
    b8f0:	2a00      	cmp	r2, #0
    b8f2:	d002      	beq.n	b8fa <i2c_master_init+0x146>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    b8f4:	2280      	movs	r2, #128	; 0x80
    b8f6:	03d2      	lsls	r2, r2, #15
    b8f8:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    b8fa:	464a      	mov	r2, r9
    b8fc:	6812      	ldr	r2, [r2, #0]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    b8fe:	9800      	ldr	r0, [sp, #0]
	i2c_module->CTRLA.reg |= tmp_ctrla;
    b900:	4313      	orrs	r3, r2
    b902:	464a      	mov	r2, r9
    b904:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    b906:	2380      	movs	r3, #128	; 0x80
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    b908:	3012      	adds	r0, #18
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    b90a:	005b      	lsls	r3, r3, #1
	uint32_t fscl        = 1000 * config->baud_rate;
    b90c:	25fa      	movs	r5, #250	; 0xfa
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    b90e:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    b910:	b2c0      	uxtb	r0, r0
    b912:	4b61      	ldr	r3, [pc, #388]	; (ba98 <i2c_master_init+0x2e4>)
    b914:	4798      	blx	r3
	uint32_t fscl        = 1000 * config->baud_rate;
    b916:	6823      	ldr	r3, [r4, #0]
    b918:	00ad      	lsls	r5, r5, #2
    b91a:	435d      	muls	r5, r3
	tmp_baud = (int32_t)(div_ceil(
    b91c:	4b5f      	ldr	r3, [pc, #380]	; (ba9c <i2c_master_init+0x2e8>)
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    b91e:	9005      	str	r0, [sp, #20]
	tmp_baud = (int32_t)(div_ceil(
    b920:	469b      	mov	fp, r3
    b922:	4798      	blx	r3
    b924:	9000      	str	r0, [sp, #0]
    b926:	9101      	str	r1, [sp, #4]
    b928:	0068      	lsls	r0, r5, #1
    b92a:	47d8      	blx	fp
    b92c:	9002      	str	r0, [sp, #8]
    b92e:	9103      	str	r1, [sp, #12]
    b930:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    b932:	47d8      	blx	fp
    b934:	4b5a      	ldr	r3, [pc, #360]	; (baa0 <i2c_master_init+0x2ec>)
    b936:	0006      	movs	r6, r0
    b938:	469a      	mov	sl, r3
    b93a:	000f      	movs	r7, r1
    b93c:	9800      	ldr	r0, [sp, #0]
    b93e:	9901      	ldr	r1, [sp, #4]
    b940:	4a58      	ldr	r2, [pc, #352]	; (baa4 <i2c_master_init+0x2f0>)
    b942:	4b59      	ldr	r3, [pc, #356]	; (baa8 <i2c_master_init+0x2f4>)
    b944:	47d0      	blx	sl
    b946:	0002      	movs	r2, r0
    b948:	000b      	movs	r3, r1
    b94a:	0030      	movs	r0, r6
    b94c:	0039      	movs	r1, r7
    b94e:	47d0      	blx	sl
    b950:	2200      	movs	r2, #0
    b952:	4b56      	ldr	r3, [pc, #344]	; (baac <i2c_master_init+0x2f8>)
    b954:	4f56      	ldr	r7, [pc, #344]	; (bab0 <i2c_master_init+0x2fc>)
    b956:	47b8      	blx	r7
    b958:	0006      	movs	r6, r0
    b95a:	0028      	movs	r0, r5
    b95c:	000f      	movs	r7, r1
    b95e:	47d8      	blx	fp
    b960:	0002      	movs	r2, r0
    b962:	000b      	movs	r3, r1
    b964:	0030      	movs	r0, r6
    b966:	0039      	movs	r1, r7
    b968:	47d0      	blx	sl
    b96a:	4d52      	ldr	r5, [pc, #328]	; (bab4 <i2c_master_init+0x300>)
    b96c:	0002      	movs	r2, r0
    b96e:	000b      	movs	r3, r1
    b970:	9800      	ldr	r0, [sp, #0]
    b972:	9901      	ldr	r1, [sp, #4]
    b974:	47a8      	blx	r5
    b976:	9e02      	ldr	r6, [sp, #8]
    b978:	9f03      	ldr	r7, [sp, #12]
    b97a:	4d4d      	ldr	r5, [pc, #308]	; (bab0 <i2c_master_init+0x2fc>)
    b97c:	0032      	movs	r2, r6
    b97e:	003b      	movs	r3, r7
    b980:	47a8      	blx	r5
    b982:	2200      	movs	r2, #0
    b984:	4b4c      	ldr	r3, [pc, #304]	; (bab8 <i2c_master_init+0x304>)
    b986:	4d4b      	ldr	r5, [pc, #300]	; (bab4 <i2c_master_init+0x300>)
    b988:	47a8      	blx	r5
    b98a:	0032      	movs	r2, r6
    b98c:	003b      	movs	r3, r7
    b98e:	4d4b      	ldr	r5, [pc, #300]	; (babc <i2c_master_init+0x308>)
    b990:	47a8      	blx	r5
    b992:	4f4b      	ldr	r7, [pc, #300]	; (bac0 <i2c_master_init+0x30c>)
    b994:	47b8      	blx	r7
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    b996:	2380      	movs	r3, #128	; 0x80
    b998:	68a2      	ldr	r2, [r4, #8]
	tmp_baud = (int32_t)(div_ceil(
    b99a:	0006      	movs	r6, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    b99c:	049b      	lsls	r3, r3, #18
    b99e:	429a      	cmp	r2, r3
    b9a0:	d02b      	beq.n	b9fa <i2c_master_init+0x246>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    b9a2:	2040      	movs	r0, #64	; 0x40
    b9a4:	2eff      	cmp	r6, #255	; 0xff
    b9a6:	d900      	bls.n	b9aa <i2c_master_init+0x1f6>
    b9a8:	e730      	b.n	b80c <i2c_master_init+0x58>
    b9aa:	2300      	movs	r3, #0
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    b9ac:	4642      	mov	r2, r8
    b9ae:	4313      	orrs	r3, r2
    b9b0:	431e      	orrs	r6, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    b9b2:	464b      	mov	r3, r9
	enum status_code tmp_status_code = STATUS_OK;
    b9b4:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    b9b6:	60de      	str	r6, [r3, #12]
    b9b8:	e728      	b.n	b80c <i2c_master_init+0x58>
			MCLK->APBDMASK.reg |= mask;
    b9ba:	2102      	movs	r1, #2
    b9bc:	6a13      	ldr	r3, [r2, #32]
    b9be:	2718      	movs	r7, #24
    b9c0:	430b      	orrs	r3, r1
    b9c2:	6213      	str	r3, [r2, #32]
    b9c4:	e710      	b.n	b7e8 <i2c_master_init+0x34>
	if (config->run_in_standby || system_is_debugger_present()) {
    b9c6:	4652      	mov	r2, sl
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    b9c8:	4b3e      	ldr	r3, [pc, #248]	; (bac4 <i2c_master_init+0x310>)
    b9ca:	789b      	ldrb	r3, [r3, #2]
    b9cc:	401a      	ands	r2, r3
    b9ce:	0013      	movs	r3, r2
		tmp_ctrla = 0;
    b9d0:	1e5a      	subs	r2, r3, #1
    b9d2:	4193      	sbcs	r3, r2
    b9d4:	01d9      	lsls	r1, r3, #7
    b9d6:	e76d      	b.n	b8b4 <i2c_master_init+0x100>
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    b9d8:	2180      	movs	r1, #128	; 0x80
    b9da:	0489      	lsls	r1, r1, #18
    b9dc:	428a      	cmp	r2, r1
    b9de:	d000      	beq.n	b9e2 <i2c_master_init+0x22e>
    b9e0:	e77d      	b.n	b8de <i2c_master_init+0x12a>
    b9e2:	e779      	b.n	b8d8 <i2c_master_init+0x124>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    b9e4:	2100      	movs	r1, #0
    b9e6:	4648      	mov	r0, r9
    b9e8:	4b37      	ldr	r3, [pc, #220]	; (bac8 <i2c_master_init+0x314>)
    b9ea:	4798      	blx	r3
    b9ec:	e745      	b.n	b87a <i2c_master_init+0xc6>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    b9ee:	2101      	movs	r1, #1
    b9f0:	4648      	mov	r0, r9
    b9f2:	4b35      	ldr	r3, [pc, #212]	; (bac8 <i2c_master_init+0x314>)
    b9f4:	4798      	blx	r3
    b9f6:	0007      	movs	r7, r0
    b9f8:	e74b      	b.n	b892 <i2c_master_init+0xde>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    b9fa:	23fa      	movs	r3, #250	; 0xfa
    b9fc:	6861      	ldr	r1, [r4, #4]
    b9fe:	009b      	lsls	r3, r3, #2
    ba00:	434b      	muls	r3, r1
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    ba02:	9800      	ldr	r0, [sp, #0]
    ba04:	9901      	ldr	r1, [sp, #4]
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    ba06:	4698      	mov	r8, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    ba08:	0002      	movs	r2, r0
    ba0a:	000b      	movs	r3, r1
    ba0c:	4c28      	ldr	r4, [pc, #160]	; (bab0 <i2c_master_init+0x2fc>)
    ba0e:	47a0      	blx	r4
    ba10:	0004      	movs	r4, r0
    ba12:	4640      	mov	r0, r8
    ba14:	000d      	movs	r5, r1
    ba16:	47d8      	blx	fp
    ba18:	2200      	movs	r2, #0
    ba1a:	4b2c      	ldr	r3, [pc, #176]	; (bacc <i2c_master_init+0x318>)
    ba1c:	47d0      	blx	sl
    ba1e:	0002      	movs	r2, r0
    ba20:	000b      	movs	r3, r1
    ba22:	0020      	movs	r0, r4
    ba24:	0029      	movs	r1, r5
    ba26:	4c25      	ldr	r4, [pc, #148]	; (babc <i2c_master_init+0x308>)
    ba28:	47a0      	blx	r4
    ba2a:	2200      	movs	r2, #0
    ba2c:	4b22      	ldr	r3, [pc, #136]	; (bab8 <i2c_master_init+0x304>)
    ba2e:	4c21      	ldr	r4, [pc, #132]	; (bab4 <i2c_master_init+0x300>)
    ba30:	47a0      	blx	r4
    ba32:	47b8      	blx	r7
    ba34:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
    ba36:	d013      	beq.n	ba60 <i2c_master_init+0x2ac>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    ba38:	4b25      	ldr	r3, [pc, #148]	; (bad0 <i2c_master_init+0x31c>)
    ba3a:	4641      	mov	r1, r8
    ba3c:	9805      	ldr	r0, [sp, #20]
    ba3e:	4798      	blx	r3
    ba40:	3802      	subs	r0, #2
    ba42:	1b03      	subs	r3, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    ba44:	2040      	movs	r0, #64	; 0x40
    ba46:	2eff      	cmp	r6, #255	; 0xff
    ba48:	d900      	bls.n	ba4c <i2c_master_init+0x298>
    ba4a:	e6df      	b.n	b80c <i2c_master_init+0x58>
    ba4c:	2bff      	cmp	r3, #255	; 0xff
    ba4e:	d900      	bls.n	ba52 <i2c_master_init+0x29e>
    ba50:	e6dc      	b.n	b80c <i2c_master_init+0x58>
    ba52:	22ff      	movs	r2, #255	; 0xff
    ba54:	041b      	lsls	r3, r3, #16
    ba56:	0412      	lsls	r2, r2, #16
    ba58:	4013      	ands	r3, r2
    ba5a:	4698      	mov	r8, r3
    ba5c:	0623      	lsls	r3, r4, #24
    ba5e:	e7a5      	b.n	b9ac <i2c_master_init+0x1f8>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    ba60:	4643      	mov	r3, r8
    ba62:	0059      	lsls	r1, r3, #1
    ba64:	9b05      	ldr	r3, [sp, #20]
    ba66:	1e48      	subs	r0, r1, #1
    ba68:	469c      	mov	ip, r3
    ba6a:	4b19      	ldr	r3, [pc, #100]	; (bad0 <i2c_master_init+0x31c>)
    ba6c:	4460      	add	r0, ip
    ba6e:	4798      	blx	r3
    ba70:	1e43      	subs	r3, r0, #1
    ba72:	e7e7      	b.n	ba44 <i2c_master_init+0x290>
    ba74:	00015105 	.word	0x00015105
    ba78:	40000400 	.word	0x40000400
    ba7c:	00015865 	.word	0x00015865
    ba80:	000158a5 	.word	0x000158a5
    ba84:	00014f61 	.word	0x00014f61
    ba88:	0000bb91 	.word	0x0000bb91
    ba8c:	0000bdbd 	.word	0x0000bdbd
    ba90:	20001684 	.word	0x20001684
    ba94:	00015961 	.word	0x00015961
    ba98:	000158dd 	.word	0x000158dd
    ba9c:	0001ed6d 	.word	0x0001ed6d
    baa0:	0001e115 	.word	0x0001e115
    baa4:	e826d695 	.word	0xe826d695
    baa8:	3e112e0b 	.word	0x3e112e0b
    baac:	40240000 	.word	0x40240000
    bab0:	0001d28d 	.word	0x0001d28d
    bab4:	0001e615 	.word	0x0001e615
    bab8:	3ff00000 	.word	0x3ff00000
    babc:	0001d8ad 	.word	0x0001d8ad
    bac0:	0001ec81 	.word	0x0001ec81
    bac4:	41002000 	.word	0x41002000
    bac8:	00014fa9 	.word	0x00014fa9
    bacc:	40080000 	.word	0x40080000
    bad0:	0001bf8d 	.word	0x0001bf8d

0000bad4 <i2c_master_read_packet_wait>:
{
    bad4:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
    bad6:	8b82      	ldrh	r2, [r0, #28]
{
    bad8:	0003      	movs	r3, r0
		return STATUS_BUSY;
    bada:	2005      	movs	r0, #5
	if (module->buffer_remaining > 0) {
    badc:	2a00      	cmp	r2, #0
    bade:	d000      	beq.n	bae2 <i2c_master_read_packet_wait+0xe>
}
    bae0:	bd10      	pop	{r4, pc}
	module->send_stop = true;
    bae2:	3201      	adds	r2, #1
    bae4:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    bae6:	72da      	strb	r2, [r3, #11]
	return _i2c_master_read_packet(module, packet);
    bae8:	0018      	movs	r0, r3
    baea:	4b01      	ldr	r3, [pc, #4]	; (baf0 <i2c_master_read_packet_wait+0x1c>)
    baec:	4798      	blx	r3
    baee:	e7f7      	b.n	bae0 <i2c_master_read_packet_wait+0xc>
    baf0:	0000b511 	.word	0x0000b511

0000baf4 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    baf4:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    baf6:	8b82      	ldrh	r2, [r0, #28]
{
    baf8:	0003      	movs	r3, r0
		return STATUS_BUSY;
    bafa:	2005      	movs	r0, #5
	if (module->buffer_remaining > 0) {
    bafc:	2a00      	cmp	r2, #0
    bafe:	d000      	beq.n	bb02 <i2c_master_write_packet_wait+0xe>

	module->send_stop = true;
	module->send_nack = true;

	return _i2c_master_write_packet(module, packet);
}
    bb00:	bd10      	pop	{r4, pc}
	module->send_stop = true;
    bb02:	3201      	adds	r2, #1
    bb04:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    bb06:	72da      	strb	r2, [r3, #11]
	return _i2c_master_write_packet(module, packet);
    bb08:	0018      	movs	r0, r3
    bb0a:	4b01      	ldr	r3, [pc, #4]	; (bb10 <i2c_master_write_packet_wait+0x1c>)
    bb0c:	4798      	blx	r3
    bb0e:	e7f7      	b.n	bb00 <i2c_master_write_packet_wait+0xc>
    bb10:	0000b38d 	.word	0x0000b38d

0000bb14 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    bb14:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    bb16:	6805      	ldr	r5, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    bb18:	682a      	ldr	r2, [r5, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    bb1a:	8b44      	ldrh	r4, [r0, #26]
	buffer_index -= module->buffer_remaining;
    bb1c:	8b83      	ldrh	r3, [r0, #28]
    bb1e:	1ae4      	subs	r4, r4, r3

	module->buffer_remaining--;
    bb20:	8b83      	ldrh	r3, [r0, #28]
	buffer_index -= module->buffer_remaining;
    bb22:	b2a4      	uxth	r4, r4
	module->buffer_remaining--;
    bb24:	3b01      	subs	r3, #1
    bb26:	b29b      	uxth	r3, r3
    bb28:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
    bb2a:	0113      	lsls	r3, r2, #4
    bb2c:	d51e      	bpl.n	bb6c <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
    bb2e:	7ac3      	ldrb	r3, [r0, #11]
    bb30:	002a      	movs	r2, r5
    bb32:	2b00      	cmp	r3, #0
    bb34:	d128      	bne.n	bb88 <_i2c_master_read+0x74>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
    bb36:	8b83      	ldrh	r3, [r0, #28]
    bb38:	2b00      	cmp	r3, #0
    bb3a:	d10c      	bne.n	bb56 <_i2c_master_read+0x42>
		if (module->send_stop) {
    bb3c:	7a83      	ldrb	r3, [r0, #10]
    bb3e:	2b00      	cmp	r3, #0
    bb40:	d009      	beq.n	bb56 <_i2c_master_read+0x42>
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    bb42:	2107      	movs	r1, #7
    bb44:	69d3      	ldr	r3, [r2, #28]
	while (i2c_master_is_syncing(module)) {
    bb46:	4219      	tst	r1, r3
    bb48:	d1fc      	bne.n	bb44 <_i2c_master_read+0x30>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    bb4a:	23c0      	movs	r3, #192	; 0xc0
    bb4c:	686a      	ldr	r2, [r5, #4]
    bb4e:	029b      	lsls	r3, r3, #10
    bb50:	4313      	orrs	r3, r2
    bb52:	606b      	str	r3, [r5, #4]
    bb54:	6802      	ldr	r2, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    bb56:	2107      	movs	r1, #7
    bb58:	69d3      	ldr	r3, [r2, #28]
	while (i2c_master_is_syncing(module)) {
    bb5a:	4219      	tst	r1, r3
    bb5c:	d1fc      	bne.n	bb58 <_i2c_master_read+0x44>
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    bb5e:	6a03      	ldr	r3, [r0, #32]
    bb60:	191c      	adds	r4, r3, r4
    bb62:	2328      	movs	r3, #40	; 0x28
    bb64:	5ceb      	ldrb	r3, [r5, r3]
    bb66:	b2db      	uxtb	r3, r3
    bb68:	7023      	strb	r3, [r4, #0]
}
    bb6a:	bd30      	pop	{r4, r5, pc}
		if (module->send_nack && module->buffer_remaining == 0) {
    bb6c:	7ac3      	ldrb	r3, [r0, #11]
    bb6e:	002a      	movs	r2, r5
    bb70:	2b00      	cmp	r3, #0
    bb72:	d0e0      	beq.n	bb36 <_i2c_master_read+0x22>
    bb74:	8b83      	ldrh	r3, [r0, #28]
    bb76:	2b00      	cmp	r3, #0
    bb78:	d1dd      	bne.n	bb36 <_i2c_master_read+0x22>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    bb7a:	2380      	movs	r3, #128	; 0x80
    bb7c:	686a      	ldr	r2, [r5, #4]
    bb7e:	02db      	lsls	r3, r3, #11
    bb80:	4313      	orrs	r3, r2
    bb82:	606b      	str	r3, [r5, #4]
    bb84:	6802      	ldr	r2, [r0, #0]
    bb86:	e7d6      	b.n	bb36 <_i2c_master_read+0x22>
		if (module->send_nack && module->buffer_remaining == 1) {
    bb88:	8b83      	ldrh	r3, [r0, #28]
    bb8a:	2b01      	cmp	r3, #1
    bb8c:	d1d3      	bne.n	bb36 <_i2c_master_read+0x22>
    bb8e:	e7f4      	b.n	bb7a <_i2c_master_read+0x66>

0000bb90 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    bb90:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
    bb92:	4b87      	ldr	r3, [pc, #540]	; (bdb0 <_i2c_master_interrupt_handler+0x220>)
    bb94:	0080      	lsls	r0, r0, #2
    bb96:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    bb98:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    bb9a:	682b      	ldr	r3, [r5, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    bb9c:	7e62      	ldrb	r2, [r4, #25]
	callback_mask &= module->registered_callback;
    bb9e:	7e26      	ldrb	r6, [r4, #24]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    bba0:	011b      	lsls	r3, r3, #4
	callback_mask &= module->registered_callback;
    bba2:	4016      	ands	r6, r2

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    bba4:	8b62      	ldrh	r2, [r4, #26]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    bba6:	0fdb      	lsrs	r3, r3, #31
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    bba8:	2a00      	cmp	r2, #0
    bbaa:	d103      	bne.n	bbb4 <_i2c_master_interrupt_handler+0x24>
    bbac:	8ba2      	ldrh	r2, [r4, #28]
    bbae:	2a00      	cmp	r2, #0
    bbb0:	d000      	beq.n	bbb4 <_i2c_master_interrupt_handler+0x24>
    bbb2:	e06b      	b.n	bc8c <_i2c_master_interrupt_handler+0xfc>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    bbb4:	8b62      	ldrh	r2, [r4, #26]
    bbb6:	2a00      	cmp	r2, #0
    bbb8:	d007      	beq.n	bbca <_i2c_master_interrupt_handler+0x3a>
    bbba:	8ba2      	ldrh	r2, [r4, #28]
    bbbc:	2a00      	cmp	r2, #0
    bbbe:	d104      	bne.n	bbca <_i2c_master_interrupt_handler+0x3a>
			(module->status == STATUS_BUSY) &&
    bbc0:	3225      	adds	r2, #37	; 0x25
    bbc2:	5ca1      	ldrb	r1, [r4, r2]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    bbc4:	2905      	cmp	r1, #5
    bbc6:	d100      	bne.n	bbca <_i2c_master_interrupt_handler+0x3a>
    bbc8:	e0a8      	b.n	bd1c <_i2c_master_interrupt_handler+0x18c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    bbca:	8b62      	ldrh	r2, [r4, #26]
    bbcc:	2a00      	cmp	r2, #0
    bbce:	d00f      	beq.n	bbf0 <_i2c_master_interrupt_handler+0x60>
    bbd0:	8ba2      	ldrh	r2, [r4, #28]
    bbd2:	2a00      	cmp	r2, #0
    bbd4:	d00c      	beq.n	bbf0 <_i2c_master_interrupt_handler+0x60>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    bbd6:	8b6a      	ldrh	r2, [r5, #26]
    bbd8:	0692      	lsls	r2, r2, #26
    bbda:	d500      	bpl.n	bbde <_i2c_master_interrupt_handler+0x4e>
    bbdc:	e083      	b.n	bce6 <_i2c_master_interrupt_handler+0x156>
    bbde:	2b00      	cmp	r3, #0
    bbe0:	d003      	beq.n	bbea <_i2c_master_interrupt_handler+0x5a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    bbe2:	8ba3      	ldrh	r3, [r4, #28]
    bbe4:	2b01      	cmp	r3, #1
    bbe6:	d100      	bne.n	bbea <_i2c_master_interrupt_handler+0x5a>
    bbe8:	e07d      	b.n	bce6 <_i2c_master_interrupt_handler+0x156>
			module->status = STATUS_ERR_PACKET_COLLISION;
    bbea:	2241      	movs	r2, #65	; 0x41
    bbec:	2325      	movs	r3, #37	; 0x25
    bbee:	54e2      	strb	r2, [r4, r3]
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    bbf0:	8b63      	ldrh	r3, [r4, #26]
    bbf2:	2b00      	cmp	r3, #0
    bbf4:	d002      	beq.n	bbfc <_i2c_master_interrupt_handler+0x6c>
    bbf6:	8ba3      	ldrh	r3, [r4, #28]
    bbf8:	2b00      	cmp	r3, #0
    bbfa:	d01e      	beq.n	bc3a <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    bbfc:	2325      	movs	r3, #37	; 0x25
    bbfe:	5ce2      	ldrb	r2, [r4, r3]
    bc00:	2a05      	cmp	r2, #5
    bc02:	d019      	beq.n	bc38 <_i2c_master_interrupt_handler+0xa8>
    bc04:	5ce2      	ldrb	r2, [r4, r3]
    bc06:	2a00      	cmp	r2, #0
    bc08:	d016      	beq.n	bc38 <_i2c_master_interrupt_handler+0xa8>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    bc0a:	2203      	movs	r2, #3
    bc0c:	752a      	strb	r2, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    bc0e:	2200      	movs	r2, #0
    bc10:	8362      	strh	r2, [r4, #26]
		module->buffer_remaining = 0;
    bc12:	83a2      	strh	r2, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    bc14:	5ce3      	ldrb	r3, [r4, r3]
    bc16:	2b41      	cmp	r3, #65	; 0x41
    bc18:	d00c      	beq.n	bc34 <_i2c_master_interrupt_handler+0xa4>
    bc1a:	7aa3      	ldrb	r3, [r4, #10]
    bc1c:	2b00      	cmp	r3, #0
    bc1e:	d009      	beq.n	bc34 <_i2c_master_interrupt_handler+0xa4>
    bc20:	6821      	ldr	r1, [r4, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    bc22:	3207      	adds	r2, #7
    bc24:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    bc26:	421a      	tst	r2, r3
    bc28:	d1fc      	bne.n	bc24 <_i2c_master_interrupt_handler+0x94>
				module->send_stop) {
			_i2c_master_wait_for_sync(module);
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    bc2a:	23e0      	movs	r3, #224	; 0xe0
    bc2c:	686a      	ldr	r2, [r5, #4]
    bc2e:	02db      	lsls	r3, r3, #11
    bc30:	4313      	orrs	r3, r2
    bc32:	606b      	str	r3, [r5, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    bc34:	0773      	lsls	r3, r6, #29
    bc36:	d425      	bmi.n	bc84 <_i2c_master_interrupt_handler+0xf4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
    bc38:	bd70      	pop	{r4, r5, r6, pc}
			(module->status == STATUS_BUSY) &&
    bc3a:	3325      	adds	r3, #37	; 0x25
    bc3c:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    bc3e:	2b05      	cmp	r3, #5
    bc40:	d1dc      	bne.n	bbfc <_i2c_master_interrupt_handler+0x6c>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    bc42:	331f      	adds	r3, #31
    bc44:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    bc46:	2b01      	cmp	r3, #1
    bc48:	d1d8      	bne.n	bbfc <_i2c_master_interrupt_handler+0x6c>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    bc4a:	7e2a      	ldrb	r2, [r5, #24]
    bc4c:	3301      	adds	r3, #1
    bc4e:	4213      	tst	r3, r2
    bc50:	d000      	beq.n	bc54 <_i2c_master_interrupt_handler+0xc4>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    bc52:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
    bc54:	2303      	movs	r3, #3
    bc56:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    bc58:	2300      	movs	r3, #0
		module->status        = STATUS_OK;
    bc5a:	2200      	movs	r2, #0
		module->buffer_length = 0;
    bc5c:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    bc5e:	3325      	adds	r3, #37	; 0x25
    bc60:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    bc62:	07b3      	lsls	r3, r6, #30
    bc64:	d504      	bpl.n	bc70 <_i2c_master_interrupt_handler+0xe0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    bc66:	2324      	movs	r3, #36	; 0x24
    bc68:	5ce3      	ldrb	r3, [r4, r3]
    bc6a:	2b01      	cmp	r3, #1
    bc6c:	d100      	bne.n	bc70 <_i2c_master_interrupt_handler+0xe0>
    bc6e:	e09a      	b.n	bda6 <_i2c_master_interrupt_handler+0x216>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    bc70:	07f3      	lsls	r3, r6, #31
    bc72:	d5c3      	bpl.n	bbfc <_i2c_master_interrupt_handler+0x6c>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    bc74:	2324      	movs	r3, #36	; 0x24
    bc76:	5ce3      	ldrb	r3, [r4, r3]
    bc78:	2b00      	cmp	r3, #0
    bc7a:	d1bf      	bne.n	bbfc <_i2c_master_interrupt_handler+0x6c>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    bc7c:	68e3      	ldr	r3, [r4, #12]
    bc7e:	0020      	movs	r0, r4
    bc80:	4798      	blx	r3
    bc82:	e7bb      	b.n	bbfc <_i2c_master_interrupt_handler+0x6c>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    bc84:	6963      	ldr	r3, [r4, #20]
    bc86:	0020      	movs	r0, r4
    bc88:	4798      	blx	r3
}
    bc8a:	e7d5      	b.n	bc38 <_i2c_master_interrupt_handler+0xa8>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    bc8c:	2301      	movs	r3, #1
    bc8e:	7e2a      	ldrb	r2, [r5, #24]
    bc90:	4213      	tst	r3, r2
    bc92:	d018      	beq.n	bcc6 <_i2c_master_interrupt_handler+0x136>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    bc94:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    bc96:	8b6a      	ldrh	r2, [r5, #26]
    bc98:	3301      	adds	r3, #1
    bc9a:	4013      	ands	r3, r2
    bc9c:	d15d      	bne.n	bd5a <_i2c_master_interrupt_handler+0x1ca>
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    bc9e:	8b6a      	ldrh	r2, [r5, #26]
    bca0:	0752      	lsls	r2, r2, #29
    bca2:	d510      	bpl.n	bcc6 <_i2c_master_interrupt_handler+0x136>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    bca4:	2118      	movs	r1, #24
    bca6:	2225      	movs	r2, #37	; 0x25
    bca8:	54a1      	strb	r1, [r4, r2]
			module->buffer_remaining = 0;
    bcaa:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
    bcac:	7aa3      	ldrb	r3, [r4, #10]
    bcae:	2b00      	cmp	r3, #0
    bcb0:	d009      	beq.n	bcc6 <_i2c_master_interrupt_handler+0x136>
    bcb2:	6821      	ldr	r1, [r4, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    bcb4:	3a1e      	subs	r2, #30
    bcb6:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    bcb8:	421a      	tst	r2, r3
    bcba:	d1fc      	bne.n	bcb6 <_i2c_master_interrupt_handler+0x126>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    bcbc:	23c0      	movs	r3, #192	; 0xc0
    bcbe:	686a      	ldr	r2, [r5, #4]
    bcc0:	029b      	lsls	r3, r3, #10
    bcc2:	4313      	orrs	r3, r2
    bcc4:	606b      	str	r3, [r5, #4]
	module->buffer_length = module->buffer_remaining;
    bcc6:	8ba3      	ldrh	r3, [r4, #28]
    bcc8:	b29b      	uxth	r3, r3
    bcca:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
    bccc:	2325      	movs	r3, #37	; 0x25
    bcce:	5ce2      	ldrb	r2, [r4, r3]
    bcd0:	2a05      	cmp	r2, #5
    bcd2:	d000      	beq.n	bcd6 <_i2c_master_interrupt_handler+0x146>
    bcd4:	e78c      	b.n	bbf0 <_i2c_master_interrupt_handler+0x60>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    bcd6:	321f      	adds	r2, #31
    bcd8:	5ca2      	ldrb	r2, [r4, r2]
    bcda:	2a00      	cmp	r2, #0
    bcdc:	d045      	beq.n	bd6a <_i2c_master_interrupt_handler+0x1da>
			_i2c_master_read(module);
    bcde:	0020      	movs	r0, r4
    bce0:	4b34      	ldr	r3, [pc, #208]	; (bdb4 <_i2c_master_interrupt_handler+0x224>)
    bce2:	4798      	blx	r3
    bce4:	e784      	b.n	bbf0 <_i2c_master_interrupt_handler+0x60>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    bce6:	2324      	movs	r3, #36	; 0x24
    bce8:	5ce3      	ldrb	r3, [r4, r3]
    bcea:	2b00      	cmp	r3, #0
    bcec:	d1f7      	bne.n	bcde <_i2c_master_interrupt_handler+0x14e>
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    bcee:	8b6b      	ldrh	r3, [r5, #26]
    bcf0:	075b      	lsls	r3, r3, #29
    bcf2:	d436      	bmi.n	bd62 <_i2c_master_interrupt_handler+0x1d2>
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    bcf4:	2207      	movs	r2, #7
	uint16_t buffer_index = module->buffer_length;
    bcf6:	8b61      	ldrh	r1, [r4, #26]
	buffer_index -= module->buffer_remaining;
    bcf8:	8ba3      	ldrh	r3, [r4, #28]
    bcfa:	1ac9      	subs	r1, r1, r3
	module->buffer_remaining--;
    bcfc:	8ba3      	ldrh	r3, [r4, #28]
	buffer_index -= module->buffer_remaining;
    bcfe:	b289      	uxth	r1, r1
	module->buffer_remaining--;
    bd00:	3b01      	subs	r3, #1
    bd02:	b29b      	uxth	r3, r3
    bd04:	83a3      	strh	r3, [r4, #28]
    bd06:	69eb      	ldr	r3, [r5, #28]
	while (i2c_master_is_syncing(module)) {
    bd08:	421a      	tst	r2, r3
    bd0a:	d1fc      	bne.n	bd06 <_i2c_master_interrupt_handler+0x176>
	i2c_module->DATA.reg = module->buffer[buffer_index];
    bd0c:	6a23      	ldr	r3, [r4, #32]
    bd0e:	2228      	movs	r2, #40	; 0x28
    bd10:	469c      	mov	ip, r3
    bd12:	4461      	add	r1, ip
    bd14:	780b      	ldrb	r3, [r1, #0]
    bd16:	b2db      	uxtb	r3, r3
    bd18:	54ab      	strb	r3, [r5, r2]
    bd1a:	e769      	b.n	bbf0 <_i2c_master_interrupt_handler+0x60>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    bd1c:	311f      	adds	r1, #31
    bd1e:	5c61      	ldrb	r1, [r4, r1]
    bd20:	b2c9      	uxtb	r1, r1
			(module->status == STATUS_BUSY) &&
    bd22:	2900      	cmp	r1, #0
    bd24:	d000      	beq.n	bd28 <_i2c_master_interrupt_handler+0x198>
    bd26:	e750      	b.n	bbca <_i2c_master_interrupt_handler+0x3a>
		i2c_module->INTENCLR.reg =
    bd28:	2303      	movs	r3, #3
    bd2a:	752b      	strb	r3, [r5, #20]
		module->status        = STATUS_OK;
    bd2c:	2300      	movs	r3, #0
		module->buffer_length = 0;
    bd2e:	8361      	strh	r1, [r4, #26]
		module->status        = STATUS_OK;
    bd30:	54a3      	strb	r3, [r4, r2]
		if (module->send_stop) {
    bd32:	7aa3      	ldrb	r3, [r4, #10]
    bd34:	2b00      	cmp	r3, #0
    bd36:	d030      	beq.n	bd9a <_i2c_master_interrupt_handler+0x20a>
    bd38:	6821      	ldr	r1, [r4, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    bd3a:	3a1e      	subs	r2, #30
    bd3c:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    bd3e:	421a      	tst	r2, r3
    bd40:	d1fc      	bne.n	bd3c <_i2c_master_interrupt_handler+0x1ac>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    bd42:	23c0      	movs	r3, #192	; 0xc0
    bd44:	686a      	ldr	r2, [r5, #4]
    bd46:	029b      	lsls	r3, r3, #10
    bd48:	4313      	orrs	r3, r2
    bd4a:	606b      	str	r3, [r5, #4]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    bd4c:	07f3      	lsls	r3, r6, #31
    bd4e:	d400      	bmi.n	bd52 <_i2c_master_interrupt_handler+0x1c2>
    bd50:	e74e      	b.n	bbf0 <_i2c_master_interrupt_handler+0x60>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    bd52:	68e3      	ldr	r3, [r4, #12]
    bd54:	0020      	movs	r0, r4
    bd56:	4798      	blx	r3
    bd58:	e74a      	b.n	bbf0 <_i2c_master_interrupt_handler+0x60>
			module->status = STATUS_ERR_PACKET_COLLISION;
    bd5a:	2241      	movs	r2, #65	; 0x41
    bd5c:	2325      	movs	r3, #37	; 0x25
    bd5e:	54e2      	strb	r2, [r4, r3]
    bd60:	e7b1      	b.n	bcc6 <_i2c_master_interrupt_handler+0x136>
		module->status = STATUS_ERR_OVERFLOW;
    bd62:	221e      	movs	r2, #30
    bd64:	2325      	movs	r3, #37	; 0x25
    bd66:	54e2      	strb	r2, [r4, r3]
    bd68:	e742      	b.n	bbf0 <_i2c_master_interrupt_handler+0x60>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    bd6a:	6822      	ldr	r2, [r4, #0]
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    bd6c:	8b51      	ldrh	r1, [r2, #26]
    bd6e:	0749      	lsls	r1, r1, #29
    bd70:	d416      	bmi.n	bda0 <_i2c_master_interrupt_handler+0x210>
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    bd72:	2107      	movs	r1, #7
	uint16_t buffer_index = module->buffer_length;
    bd74:	8b60      	ldrh	r0, [r4, #26]
	buffer_index -= module->buffer_remaining;
    bd76:	8ba3      	ldrh	r3, [r4, #28]
    bd78:	1ac0      	subs	r0, r0, r3
	module->buffer_remaining--;
    bd7a:	8ba3      	ldrh	r3, [r4, #28]
	buffer_index -= module->buffer_remaining;
    bd7c:	b280      	uxth	r0, r0
	module->buffer_remaining--;
    bd7e:	3b01      	subs	r3, #1
    bd80:	b29b      	uxth	r3, r3
    bd82:	83a3      	strh	r3, [r4, #28]
    bd84:	69d3      	ldr	r3, [r2, #28]
	while (i2c_master_is_syncing(module)) {
    bd86:	4219      	tst	r1, r3
    bd88:	d1fc      	bne.n	bd84 <_i2c_master_interrupt_handler+0x1f4>
	i2c_module->DATA.reg = module->buffer[buffer_index];
    bd8a:	6a23      	ldr	r3, [r4, #32]
    bd8c:	2128      	movs	r1, #40	; 0x28
    bd8e:	469c      	mov	ip, r3
    bd90:	4460      	add	r0, ip
    bd92:	7803      	ldrb	r3, [r0, #0]
    bd94:	b2db      	uxtb	r3, r3
    bd96:	5453      	strb	r3, [r2, r1]
    bd98:	e72a      	b.n	bbf0 <_i2c_master_interrupt_handler+0x60>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    bd9a:	2301      	movs	r3, #1
    bd9c:	762b      	strb	r3, [r5, #24]
    bd9e:	e7d5      	b.n	bd4c <_i2c_master_interrupt_handler+0x1bc>
		module->status = STATUS_ERR_OVERFLOW;
    bda0:	221e      	movs	r2, #30
    bda2:	54e2      	strb	r2, [r4, r3]
    bda4:	e724      	b.n	bbf0 <_i2c_master_interrupt_handler+0x60>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    bda6:	6923      	ldr	r3, [r4, #16]
    bda8:	0020      	movs	r0, r4
    bdaa:	4798      	blx	r3
    bdac:	e726      	b.n	bbfc <_i2c_master_interrupt_handler+0x6c>
    bdae:	46c0      	nop			; (mov r8, r8)
    bdb0:	20001684 	.word	0x20001684
    bdb4:	0000bb15 	.word	0x0000bb15

0000bdb8 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    bdb8:	4770      	bx	lr
    bdba:	46c0      	nop			; (mov r8, r8)

0000bdbc <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    bdbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    bdbe:	4e0c      	ldr	r6, [pc, #48]	; (bdf0 <_sercom_set_handler+0x34>)
{
    bdc0:	0005      	movs	r5, r0
	if (_handler_table_initialized == false) {
    bdc2:	7833      	ldrb	r3, [r6, #0]
{
    bdc4:	000f      	movs	r7, r1
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    bdc6:	4c0b      	ldr	r4, [pc, #44]	; (bdf4 <_sercom_set_handler+0x38>)
	if (_handler_table_initialized == false) {
    bdc8:	2b00      	cmp	r3, #0
    bdca:	d10d      	bne.n	bde8 <_sercom_set_handler+0x2c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    bdcc:	4b0a      	ldr	r3, [pc, #40]	; (bdf8 <_sercom_set_handler+0x3c>)
    bdce:	2218      	movs	r2, #24
    bdd0:	6023      	str	r3, [r4, #0]
    bdd2:	6063      	str	r3, [r4, #4]
    bdd4:	60a3      	str	r3, [r4, #8]
    bdd6:	60e3      	str	r3, [r4, #12]
    bdd8:	6123      	str	r3, [r4, #16]
    bdda:	6163      	str	r3, [r4, #20]
    bddc:	2100      	movs	r1, #0
    bdde:	4b07      	ldr	r3, [pc, #28]	; (bdfc <_sercom_set_handler+0x40>)
    bde0:	4807      	ldr	r0, [pc, #28]	; (be00 <_sercom_set_handler+0x44>)
    bde2:	4798      	blx	r3
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    bde4:	2301      	movs	r3, #1
    bde6:	7033      	strb	r3, [r6, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    bde8:	00ad      	lsls	r5, r5, #2
    bdea:	5167      	str	r7, [r4, r5]
}
    bdec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bdee:	46c0      	nop			; (mov r8, r8)
    bdf0:	20000e90 	.word	0x20000e90
    bdf4:	20000e94 	.word	0x20000e94
    bdf8:	0000bdb9 	.word	0x0000bdb9
    bdfc:	0001f06d 	.word	0x0001f06d
    be00:	20001684 	.word	0x20001684

0000be04 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    be04:	b500      	push	{lr}
    be06:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    be08:	466a      	mov	r2, sp
    be0a:	2308      	movs	r3, #8
    be0c:	7013      	strb	r3, [r2, #0]
    be0e:	3301      	adds	r3, #1
    be10:	7053      	strb	r3, [r2, #1]
    be12:	3301      	adds	r3, #1
    be14:	7093      	strb	r3, [r2, #2]
    be16:	3301      	adds	r3, #1
    be18:	70d3      	strb	r3, [r2, #3]
    be1a:	3301      	adds	r3, #1
    be1c:	7113      	strb	r3, [r2, #4]
    be1e:	3301      	adds	r3, #1
    be20:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    be22:	4b03      	ldr	r3, [pc, #12]	; (be30 <_sercom_get_interrupt_vector+0x2c>)
    be24:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    be26:	466b      	mov	r3, sp
    be28:	5618      	ldrsb	r0, [r3, r0]
}
    be2a:	b003      	add	sp, #12
    be2c:	bd00      	pop	{pc}
    be2e:	46c0      	nop			; (mov r8, r8)
    be30:	00015105 	.word	0x00015105

0000be34 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    be34:	b510      	push	{r4, lr}
    be36:	4b02      	ldr	r3, [pc, #8]	; (be40 <SERCOM0_Handler+0xc>)
    be38:	2000      	movs	r0, #0
    be3a:	681b      	ldr	r3, [r3, #0]
    be3c:	4798      	blx	r3
    be3e:	bd10      	pop	{r4, pc}
    be40:	20000e94 	.word	0x20000e94

0000be44 <SERCOM1_Handler>:
    be44:	b510      	push	{r4, lr}
    be46:	4b02      	ldr	r3, [pc, #8]	; (be50 <SERCOM1_Handler+0xc>)
    be48:	2001      	movs	r0, #1
    be4a:	685b      	ldr	r3, [r3, #4]
    be4c:	4798      	blx	r3
    be4e:	bd10      	pop	{r4, pc}
    be50:	20000e94 	.word	0x20000e94

0000be54 <SERCOM2_Handler>:
    be54:	b510      	push	{r4, lr}
    be56:	4b02      	ldr	r3, [pc, #8]	; (be60 <SERCOM2_Handler+0xc>)
    be58:	2002      	movs	r0, #2
    be5a:	689b      	ldr	r3, [r3, #8]
    be5c:	4798      	blx	r3
    be5e:	bd10      	pop	{r4, pc}
    be60:	20000e94 	.word	0x20000e94

0000be64 <SERCOM3_Handler>:
    be64:	b510      	push	{r4, lr}
    be66:	4b02      	ldr	r3, [pc, #8]	; (be70 <SERCOM3_Handler+0xc>)
    be68:	2003      	movs	r0, #3
    be6a:	68db      	ldr	r3, [r3, #12]
    be6c:	4798      	blx	r3
    be6e:	bd10      	pop	{r4, pc}
    be70:	20000e94 	.word	0x20000e94

0000be74 <SERCOM4_Handler>:
    be74:	b510      	push	{r4, lr}
    be76:	4b02      	ldr	r3, [pc, #8]	; (be80 <SERCOM4_Handler+0xc>)
    be78:	2004      	movs	r0, #4
    be7a:	691b      	ldr	r3, [r3, #16]
    be7c:	4798      	blx	r3
    be7e:	bd10      	pop	{r4, pc}
    be80:	20000e94 	.word	0x20000e94

0000be84 <SERCOM5_Handler>:
    be84:	b510      	push	{r4, lr}
    be86:	4b02      	ldr	r3, [pc, #8]	; (be90 <SERCOM5_Handler+0xc>)
    be88:	2005      	movs	r0, #5
    be8a:	695b      	ldr	r3, [r3, #20]
    be8c:	4798      	blx	r3
    be8e:	bd10      	pop	{r4, pc}
    be90:	20000e94 	.word	0x20000e94

0000be94 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    be94:	1c93      	adds	r3, r2, #2
    be96:	009b      	lsls	r3, r3, #2
    be98:	18c3      	adds	r3, r0, r3
    be9a:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    be9c:	2301      	movs	r3, #1
    be9e:	4093      	lsls	r3, r2
    bea0:	2130      	movs	r1, #48	; 0x30
    bea2:	001a      	movs	r2, r3
    bea4:	5c43      	ldrb	r3, [r0, r1]
    bea6:	4313      	orrs	r3, r2
    bea8:	5443      	strb	r3, [r0, r1]
}
    beaa:	4770      	bx	lr

0000beac <usart_read_job>:
 * \retval  STATUS_BUSY  If operation was not completed
 */
enum status_code usart_read_job(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    beac:	b570      	push	{r4, r5, r6, lr}
    beae:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    beb0:	4b10      	ldr	r3, [pc, #64]	; (bef4 <usart_read_job+0x48>)
    beb2:	000e      	movs	r6, r1
	SercomUsart *const usart_hw = &(module->hw->USART);
    beb4:	6805      	ldr	r5, [r0, #0]
    beb6:	4798      	blx	r3
	if (module->remaining_rx_buffer_length > 0) {
    beb8:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    beba:	2b00      	cmp	r3, #0
    bebc:	d003      	beq.n	bec6 <usart_read_job+0x1a>
	cpu_irq_leave_critical();
    bebe:	4b0e      	ldr	r3, [pc, #56]	; (bef8 <usart_read_job+0x4c>)
    bec0:	4798      	blx	r3
		return STATUS_BUSY;
    bec2:	2005      	movs	r0, #5
	Assert(module);
	Assert(rx_data);

	/* Call internal read buffer function with length 1 */
	return _usart_read_buffer(module, (uint8_t *)rx_data, 1);
}
    bec4:	bd70      	pop	{r4, r5, r6, pc}
	module->remaining_rx_buffer_length = length;
    bec6:	2301      	movs	r3, #1
    bec8:	85a3      	strh	r3, [r4, #44]	; 0x2c
    beca:	4b0b      	ldr	r3, [pc, #44]	; (bef8 <usart_read_job+0x4c>)
    becc:	4798      	blx	r3
	module->rx_status                  = STATUS_BUSY;
    bece:	2332      	movs	r3, #50	; 0x32
    bed0:	2205      	movs	r2, #5
	module->rx_buffer_ptr              = rx_data;
    bed2:	6266      	str	r6, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    bed4:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    bed6:	3b2e      	subs	r3, #46	; 0x2e
    bed8:	75ab      	strb	r3, [r5, #22]
	if(module->lin_slave_enabled) {
    beda:	7a23      	ldrb	r3, [r4, #8]
    bedc:	2b00      	cmp	r3, #0
    bede:	d106      	bne.n	beee <usart_read_job+0x42>
	if(module->start_frame_detection_enabled) {
    bee0:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    bee2:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    bee4:	2b00      	cmp	r3, #0
    bee6:	d0ed      	beq.n	bec4 <usart_read_job+0x18>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    bee8:	2308      	movs	r3, #8
    beea:	75ab      	strb	r3, [r5, #22]
    beec:	e7ea      	b.n	bec4 <usart_read_job+0x18>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    beee:	2320      	movs	r3, #32
    bef0:	75ab      	strb	r3, [r5, #22]
    bef2:	e7f5      	b.n	bee0 <usart_read_job+0x34>
    bef4:	0000198d 	.word	0x0000198d
    bef8:	000019c9 	.word	0x000019c9

0000befc <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    befc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    befe:	0005      	movs	r5, r0
    bf00:	000e      	movs	r6, r1
    bf02:	0014      	movs	r4, r2
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    bf04:	2017      	movs	r0, #23
	if (length == 0) {
    bf06:	2a00      	cmp	r2, #0
    bf08:	d100      	bne.n	bf0c <usart_write_buffer_job+0x10>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
    bf0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
    bf0c:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
    bf0e:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
    bf10:	2b00      	cmp	r3, #0
    bf12:	d0fa      	beq.n	bf0a <usart_write_buffer_job+0xe>
	cpu_irq_enter_critical();
    bf14:	4b0a      	ldr	r3, [pc, #40]	; (bf40 <usart_write_buffer_job+0x44>)
	SercomUsart *const usart_hw = &(module->hw->USART);
    bf16:	682f      	ldr	r7, [r5, #0]
    bf18:	4798      	blx	r3
	if (module->remaining_tx_buffer_length > 0) {
    bf1a:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    bf1c:	2b00      	cmp	r3, #0
    bf1e:	d003      	beq.n	bf28 <usart_write_buffer_job+0x2c>
	cpu_irq_leave_critical();
    bf20:	4b08      	ldr	r3, [pc, #32]	; (bf44 <usart_write_buffer_job+0x48>)
    bf22:	4798      	blx	r3
		return STATUS_BUSY;
    bf24:	2005      	movs	r0, #5
    bf26:	e7f0      	b.n	bf0a <usart_write_buffer_job+0xe>
    bf28:	4b06      	ldr	r3, [pc, #24]	; (bf44 <usart_write_buffer_job+0x48>)
	module->remaining_tx_buffer_length = length;
    bf2a:	85ec      	strh	r4, [r5, #46]	; 0x2e
    bf2c:	4798      	blx	r3
	module->tx_status                  = STATUS_BUSY;
    bf2e:	2333      	movs	r3, #51	; 0x33
    bf30:	2205      	movs	r2, #5
	module->tx_buffer_ptr              = tx_data;
    bf32:	62ae      	str	r6, [r5, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    bf34:	54ea      	strb	r2, [r5, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    bf36:	3b32      	subs	r3, #50	; 0x32
    bf38:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    bf3a:	2000      	movs	r0, #0
    bf3c:	e7e5      	b.n	bf0a <usart_write_buffer_job+0xe>
    bf3e:	46c0      	nop			; (mov r8, r8)
    bf40:	0000198d 	.word	0x0000198d
    bf44:	000019c9 	.word	0x000019c9

0000bf48 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    bf48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    bf4a:	4b62      	ldr	r3, [pc, #392]	; (c0d4 <_usart_interrupt_handler+0x18c>)
    bf4c:	0080      	lsls	r0, r0, #2
    bf4e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    bf50:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    bf52:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    bf54:	2b00      	cmp	r3, #0
    bf56:	d1fc      	bne.n	bf52 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    bf58:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    bf5a:	7da6      	ldrb	r6, [r4, #22]
	callback_status = module->callback_reg_mask &
    bf5c:	2231      	movs	r2, #49	; 0x31
    bf5e:	401e      	ands	r6, r3
    bf60:	2330      	movs	r3, #48	; 0x30
    bf62:	5caf      	ldrb	r7, [r5, r2]
    bf64:	5ceb      	ldrb	r3, [r5, r3]
    bf66:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    bf68:	2301      	movs	r3, #1
    bf6a:	4233      	tst	r3, r6
    bf6c:	d019      	beq.n	bfa2 <_usart_interrupt_handler+0x5a>
		if (module->remaining_tx_buffer_length) {
    bf6e:	8dea      	ldrh	r2, [r5, #46]	; 0x2e
    bf70:	2a00      	cmp	r2, #0
    bf72:	d04d      	beq.n	c010 <_usart_interrupt_handler+0xc8>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    bf74:	6aaa      	ldr	r2, [r5, #40]	; 0x28
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    bf76:	1c51      	adds	r1, r2, #1
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    bf78:	7813      	ldrb	r3, [r2, #0]
			(module->tx_buffer_ptr)++;
    bf7a:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    bf7c:	7969      	ldrb	r1, [r5, #5]
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    bf7e:	b2db      	uxtb	r3, r3
			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    bf80:	2901      	cmp	r1, #1
    bf82:	d100      	bne.n	bf86 <_usart_interrupt_handler+0x3e>
    bf84:	e075      	b.n	c072 <_usart_interrupt_handler+0x12a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    bf86:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    bf88:	05db      	lsls	r3, r3, #23
    bf8a:	0ddb      	lsrs	r3, r3, #23
    bf8c:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    bf8e:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    bf90:	3b01      	subs	r3, #1
    bf92:	b29b      	uxth	r3, r3
    bf94:	85eb      	strh	r3, [r5, #46]	; 0x2e
    bf96:	2b00      	cmp	r3, #0
    bf98:	d103      	bne.n	bfa2 <_usart_interrupt_handler+0x5a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    bf9a:	3301      	adds	r3, #1
    bf9c:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    bf9e:	3301      	adds	r3, #1
    bfa0:	75a3      	strb	r3, [r4, #22]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    bfa2:	2302      	movs	r3, #2
    bfa4:	4233      	tst	r3, r6
    bfa6:	d005      	beq.n	bfb4 <_usart_interrupt_handler+0x6c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
		module->tx_status = STATUS_OK;
    bfa8:	2200      	movs	r2, #0
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    bfaa:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    bfac:	3331      	adds	r3, #49	; 0x31
    bfae:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    bfb0:	07fb      	lsls	r3, r7, #31
    bfb2:	d43b      	bmi.n	c02c <_usart_interrupt_handler+0xe4>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    bfb4:	2304      	movs	r3, #4
    bfb6:	4233      	tst	r3, r6
    bfb8:	d012      	beq.n	bfe0 <_usart_interrupt_handler+0x98>

		if (module->remaining_rx_buffer_length) {
    bfba:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
    bfbc:	2a00      	cmp	r2, #0
    bfbe:	d025      	beq.n	c00c <_usart_interrupt_handler+0xc4>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    bfc0:	8b63      	ldrh	r3, [r4, #26]
    bfc2:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    bfc4:	071a      	lsls	r2, r3, #28
    bfc6:	d535      	bpl.n	c034 <_usart_interrupt_handler+0xec>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    bfc8:	2237      	movs	r2, #55	; 0x37
    bfca:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    bfcc:	d035      	beq.n	c03a <_usart_interrupt_handler+0xf2>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    bfce:	2202      	movs	r2, #2
    bfd0:	421a      	tst	r2, r3
    bfd2:	d054      	beq.n	c07e <_usart_interrupt_handler+0x136>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    bfd4:	211a      	movs	r1, #26
    bfd6:	2332      	movs	r3, #50	; 0x32
    bfd8:	54e9      	strb	r1, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    bfda:	8362      	strh	r2, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    bfdc:	077b      	lsls	r3, r7, #29
    bfde:	d459      	bmi.n	c094 <_usart_interrupt_handler+0x14c>
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    bfe0:	2310      	movs	r3, #16
    bfe2:	4233      	tst	r3, r6
    bfe4:	d003      	beq.n	bfee <_usart_interrupt_handler+0xa6>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    bfe6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    bfe8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    bfea:	423b      	tst	r3, r7
    bfec:	d116      	bne.n	c01c <_usart_interrupt_handler+0xd4>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    bfee:	2320      	movs	r3, #32
    bff0:	4233      	tst	r3, r6
    bff2:	d003      	beq.n	bffc <_usart_interrupt_handler+0xb4>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    bff4:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    bff6:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    bff8:	073b      	lsls	r3, r7, #28
    bffa:	d413      	bmi.n	c024 <_usart_interrupt_handler+0xdc>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    bffc:	2308      	movs	r3, #8
    bffe:	4233      	tst	r3, r6
    c000:	d003      	beq.n	c00a <_usart_interrupt_handler+0xc2>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    c002:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    c004:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    c006:	06bb      	lsls	r3, r7, #26
    c008:	d404      	bmi.n	c014 <_usart_interrupt_handler+0xcc>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    c00a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    c00c:	7523      	strb	r3, [r4, #20]
    c00e:	e7e7      	b.n	bfe0 <_usart_interrupt_handler+0x98>
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    c010:	7523      	strb	r3, [r4, #20]
    c012:	e7c6      	b.n	bfa2 <_usart_interrupt_handler+0x5a>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    c014:	6a2b      	ldr	r3, [r5, #32]
    c016:	0028      	movs	r0, r5
    c018:	4798      	blx	r3
}
    c01a:	e7f6      	b.n	c00a <_usart_interrupt_handler+0xc2>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    c01c:	0028      	movs	r0, r5
    c01e:	69eb      	ldr	r3, [r5, #28]
    c020:	4798      	blx	r3
    c022:	e7e4      	b.n	bfee <_usart_interrupt_handler+0xa6>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    c024:	0028      	movs	r0, r5
    c026:	69ab      	ldr	r3, [r5, #24]
    c028:	4798      	blx	r3
    c02a:	e7e7      	b.n	bffc <_usart_interrupt_handler+0xb4>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    c02c:	0028      	movs	r0, r5
    c02e:	68eb      	ldr	r3, [r5, #12]
    c030:	4798      	blx	r3
    c032:	e7bf      	b.n	bfb4 <_usart_interrupt_handler+0x6c>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    c034:	223f      	movs	r2, #63	; 0x3f
    c036:	4013      	ands	r3, r2
			if (error_code) {
    c038:	d1c9      	bne.n	bfce <_usart_interrupt_handler+0x86>
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    c03a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
				*(module->rx_buffer_ptr) = received_data;
    c03c:	6a69      	ldr	r1, [r5, #36]	; 0x24
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    c03e:	05db      	lsls	r3, r3, #23
    c040:	0ddb      	lsrs	r3, r3, #23
				*(module->rx_buffer_ptr) = received_data;
    c042:	b2da      	uxtb	r2, r3
    c044:	700a      	strb	r2, [r1, #0]
				module->rx_buffer_ptr += 1;
    c046:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    c048:	1c51      	adds	r1, r2, #1
    c04a:	6269      	str	r1, [r5, #36]	; 0x24
				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    c04c:	7969      	ldrb	r1, [r5, #5]
    c04e:	2901      	cmp	r1, #1
    c050:	d029      	beq.n	c0a6 <_usart_interrupt_handler+0x15e>
				if(--(module->remaining_rx_buffer_length) == 0) {
    c052:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    c054:	3b01      	subs	r3, #1
    c056:	b29b      	uxth	r3, r3
    c058:	85ab      	strh	r3, [r5, #44]	; 0x2c
    c05a:	2b00      	cmp	r3, #0
    c05c:	d1c0      	bne.n	bfe0 <_usart_interrupt_handler+0x98>
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    c05e:	2204      	movs	r2, #4
    c060:	7522      	strb	r2, [r4, #20]
					module->rx_status = STATUS_OK;
    c062:	322e      	adds	r2, #46	; 0x2e
    c064:	54ab      	strb	r3, [r5, r2]
					if (callback_status
    c066:	07bb      	lsls	r3, r7, #30
    c068:	d5ba      	bpl.n	bfe0 <_usart_interrupt_handler+0x98>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    c06a:	0028      	movs	r0, r5
    c06c:	692b      	ldr	r3, [r5, #16]
    c06e:	4798      	blx	r3
    c070:	e7b6      	b.n	bfe0 <_usart_interrupt_handler+0x98>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    c072:	7851      	ldrb	r1, [r2, #1]
				(module->tx_buffer_ptr)++;
    c074:	3202      	adds	r2, #2
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    c076:	0209      	lsls	r1, r1, #8
    c078:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    c07a:	62aa      	str	r2, [r5, #40]	; 0x28
    c07c:	e784      	b.n	bf88 <_usart_interrupt_handler+0x40>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    c07e:	2204      	movs	r2, #4
    c080:	421a      	tst	r2, r3
    c082:	d10b      	bne.n	c09c <_usart_interrupt_handler+0x154>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    c084:	2201      	movs	r2, #1
    c086:	421a      	tst	r2, r3
    c088:	d013      	beq.n	c0b2 <_usart_interrupt_handler+0x16a>
					module->rx_status = STATUS_ERR_BAD_DATA;
    c08a:	2113      	movs	r1, #19
    c08c:	2332      	movs	r3, #50	; 0x32
    c08e:	54e9      	strb	r1, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    c090:	8362      	strh	r2, [r4, #26]
    c092:	e7a3      	b.n	bfdc <_usart_interrupt_handler+0x94>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    c094:	0028      	movs	r0, r5
    c096:	696b      	ldr	r3, [r5, #20]
    c098:	4798      	blx	r3
    c09a:	e7a1      	b.n	bfe0 <_usart_interrupt_handler+0x98>
					module->rx_status = STATUS_ERR_OVERFLOW;
    c09c:	211e      	movs	r1, #30
    c09e:	2332      	movs	r3, #50	; 0x32
    c0a0:	54e9      	strb	r1, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    c0a2:	8362      	strh	r2, [r4, #26]
    c0a4:	e79a      	b.n	bfdc <_usart_interrupt_handler+0x94>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    c0a6:	0a1b      	lsrs	r3, r3, #8
    c0a8:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    c0aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    c0ac:	3301      	adds	r3, #1
    c0ae:	626b      	str	r3, [r5, #36]	; 0x24
    c0b0:	e7cf      	b.n	c052 <_usart_interrupt_handler+0x10a>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    c0b2:	2210      	movs	r2, #16
    c0b4:	421a      	tst	r2, r3
    c0b6:	d004      	beq.n	c0c2 <_usart_interrupt_handler+0x17a>
					module->rx_status = STATUS_ERR_PROTOCOL;
    c0b8:	2142      	movs	r1, #66	; 0x42
    c0ba:	2332      	movs	r3, #50	; 0x32
    c0bc:	54e9      	strb	r1, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    c0be:	8362      	strh	r2, [r4, #26]
    c0c0:	e78c      	b.n	bfdc <_usart_interrupt_handler+0x94>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    c0c2:	2220      	movs	r2, #32
    c0c4:	421a      	tst	r2, r3
    c0c6:	d100      	bne.n	c0ca <_usart_interrupt_handler+0x182>
    c0c8:	e788      	b.n	bfdc <_usart_interrupt_handler+0x94>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    c0ca:	2141      	movs	r1, #65	; 0x41
    c0cc:	2332      	movs	r3, #50	; 0x32
    c0ce:	54e9      	strb	r1, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    c0d0:	8362      	strh	r2, [r4, #26]
    c0d2:	e783      	b.n	bfdc <_usart_interrupt_handler+0x94>
    c0d4:	20001684 	.word	0x20001684

0000c0d8 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    c0d8:	1c93      	adds	r3, r2, #2
    c0da:	009b      	lsls	r3, r3, #2
    c0dc:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    c0de:	2a02      	cmp	r2, #2
    c0e0:	d009      	beq.n	c0f6 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    c0e2:	2a03      	cmp	r2, #3
    c0e4:	d00c      	beq.n	c100 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    c0e6:	2301      	movs	r3, #1
    c0e8:	4093      	lsls	r3, r2
    c0ea:	001a      	movs	r2, r3
    c0ec:	7e03      	ldrb	r3, [r0, #24]
    c0ee:	4313      	orrs	r3, r2
    c0f0:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    c0f2:	2000      	movs	r0, #0
    c0f4:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    c0f6:	2210      	movs	r2, #16
    c0f8:	7e03      	ldrb	r3, [r0, #24]
    c0fa:	4313      	orrs	r3, r2
    c0fc:	7603      	strb	r3, [r0, #24]
    c0fe:	e7f8      	b.n	c0f2 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    c100:	2220      	movs	r2, #32
    c102:	7e03      	ldrb	r3, [r0, #24]
    c104:	4313      	orrs	r3, r2
    c106:	7603      	strb	r3, [r0, #24]
    c108:	e7f3      	b.n	c0f2 <tc_register_callback+0x1a>
    c10a:	46c0      	nop			; (mov r8, r8)

0000c10c <TC0_Handler>:
		{ \
			_tc_interrupt_handler(m); \
		}

#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
    c10c:	b570      	push	{r4, r5, r6, lr}
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    c10e:	2601      	movs	r6, #1
	struct tc_module *module
    c110:	4b15      	ldr	r3, [pc, #84]	; (c168 <TC0_Handler+0x5c>)
    c112:	681d      	ldr	r5, [r3, #0]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    c114:	682b      	ldr	r3, [r5, #0]
    c116:	7e2a      	ldrb	r2, [r5, #24]
    c118:	7e6c      	ldrb	r4, [r5, #25]
    c11a:	7a9b      	ldrb	r3, [r3, #10]
    c11c:	4014      	ands	r4, r2
    c11e:	401c      	ands	r4, r3
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    c120:	4226      	tst	r6, r4
    c122:	d11a      	bne.n	c15a <TC0_Handler+0x4e>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    c124:	2602      	movs	r6, #2
    c126:	4226      	tst	r6, r4
    c128:	d111      	bne.n	c14e <TC0_Handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    c12a:	2610      	movs	r6, #16
    c12c:	4226      	tst	r6, r4
    c12e:	d108      	bne.n	c142 <TC0_Handler+0x36>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    c130:	2620      	movs	r6, #32
    c132:	4226      	tst	r6, r4
    c134:	d004      	beq.n	c140 <TC0_Handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    c136:	696b      	ldr	r3, [r5, #20]
    c138:	0028      	movs	r0, r5
    c13a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    c13c:	682b      	ldr	r3, [r5, #0]
    c13e:	729e      	strb	r6, [r3, #10]
	_TC_INTERRUPT_HANDLER(0,0)
    c140:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    c142:	692b      	ldr	r3, [r5, #16]
    c144:	0028      	movs	r0, r5
    c146:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    c148:	682b      	ldr	r3, [r5, #0]
    c14a:	729e      	strb	r6, [r3, #10]
    c14c:	e7f0      	b.n	c130 <TC0_Handler+0x24>
		(module->callback[TC_CALLBACK_ERROR])(module);
    c14e:	68eb      	ldr	r3, [r5, #12]
    c150:	0028      	movs	r0, r5
    c152:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    c154:	682b      	ldr	r3, [r5, #0]
    c156:	729e      	strb	r6, [r3, #10]
    c158:	e7e7      	b.n	c12a <TC0_Handler+0x1e>
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    c15a:	68ab      	ldr	r3, [r5, #8]
    c15c:	0028      	movs	r0, r5
    c15e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    c160:	682b      	ldr	r3, [r5, #0]
    c162:	729e      	strb	r6, [r3, #10]
    c164:	e7de      	b.n	c124 <TC0_Handler+0x18>
    c166:	46c0      	nop			; (mov r8, r8)
    c168:	2000169c 	.word	0x2000169c

0000c16c <TC1_Handler>:
	_TC_INTERRUPT_HANDLER(1,1)
    c16c:	b570      	push	{r4, r5, r6, lr}
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    c16e:	2601      	movs	r6, #1
	struct tc_module *module
    c170:	4b15      	ldr	r3, [pc, #84]	; (c1c8 <TC1_Handler+0x5c>)
    c172:	685d      	ldr	r5, [r3, #4]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    c174:	682b      	ldr	r3, [r5, #0]
    c176:	7e2a      	ldrb	r2, [r5, #24]
    c178:	7e6c      	ldrb	r4, [r5, #25]
    c17a:	7a9b      	ldrb	r3, [r3, #10]
    c17c:	4014      	ands	r4, r2
    c17e:	401c      	ands	r4, r3
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    c180:	4226      	tst	r6, r4
    c182:	d11a      	bne.n	c1ba <TC1_Handler+0x4e>
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    c184:	2602      	movs	r6, #2
    c186:	4226      	tst	r6, r4
    c188:	d111      	bne.n	c1ae <TC1_Handler+0x42>
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    c18a:	2610      	movs	r6, #16
    c18c:	4226      	tst	r6, r4
    c18e:	d108      	bne.n	c1a2 <TC1_Handler+0x36>
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    c190:	2620      	movs	r6, #32
    c192:	4226      	tst	r6, r4
    c194:	d004      	beq.n	c1a0 <TC1_Handler+0x34>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    c196:	696b      	ldr	r3, [r5, #20]
    c198:	0028      	movs	r0, r5
    c19a:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    c19c:	682b      	ldr	r3, [r5, #0]
    c19e:	729e      	strb	r6, [r3, #10]
	_TC_INTERRUPT_HANDLER(1,1)
    c1a0:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    c1a2:	692b      	ldr	r3, [r5, #16]
    c1a4:	0028      	movs	r0, r5
    c1a6:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    c1a8:	682b      	ldr	r3, [r5, #0]
    c1aa:	729e      	strb	r6, [r3, #10]
    c1ac:	e7f0      	b.n	c190 <TC1_Handler+0x24>
		(module->callback[TC_CALLBACK_ERROR])(module);
    c1ae:	68eb      	ldr	r3, [r5, #12]
    c1b0:	0028      	movs	r0, r5
    c1b2:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    c1b4:	682b      	ldr	r3, [r5, #0]
    c1b6:	729e      	strb	r6, [r3, #10]
    c1b8:	e7e7      	b.n	c18a <TC1_Handler+0x1e>
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    c1ba:	68ab      	ldr	r3, [r5, #8]
    c1bc:	0028      	movs	r0, r5
    c1be:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    c1c0:	682b      	ldr	r3, [r5, #0]
    c1c2:	729e      	strb	r6, [r3, #10]
    c1c4:	e7de      	b.n	c184 <TC1_Handler+0x18>
    c1c6:	46c0      	nop			; (mov r8, r8)
    c1c8:	2000169c 	.word	0x2000169c

0000c1cc <TC4_Handler>:
	_TC_INTERRUPT_HANDLER(4,2)
    c1cc:	b570      	push	{r4, r5, r6, lr}
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    c1ce:	2601      	movs	r6, #1
	struct tc_module *module
    c1d0:	4b15      	ldr	r3, [pc, #84]	; (c228 <TC4_Handler+0x5c>)
    c1d2:	689d      	ldr	r5, [r3, #8]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    c1d4:	682b      	ldr	r3, [r5, #0]
    c1d6:	7e2a      	ldrb	r2, [r5, #24]
    c1d8:	7e6c      	ldrb	r4, [r5, #25]
    c1da:	7a9b      	ldrb	r3, [r3, #10]
    c1dc:	4014      	ands	r4, r2
    c1de:	401c      	ands	r4, r3
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    c1e0:	4226      	tst	r6, r4
    c1e2:	d11a      	bne.n	c21a <TC4_Handler+0x4e>
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    c1e4:	2602      	movs	r6, #2
    c1e6:	4226      	tst	r6, r4
    c1e8:	d111      	bne.n	c20e <TC4_Handler+0x42>
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    c1ea:	2610      	movs	r6, #16
    c1ec:	4226      	tst	r6, r4
    c1ee:	d108      	bne.n	c202 <TC4_Handler+0x36>
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    c1f0:	2620      	movs	r6, #32
    c1f2:	4226      	tst	r6, r4
    c1f4:	d004      	beq.n	c200 <TC4_Handler+0x34>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    c1f6:	696b      	ldr	r3, [r5, #20]
    c1f8:	0028      	movs	r0, r5
    c1fa:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    c1fc:	682b      	ldr	r3, [r5, #0]
    c1fe:	729e      	strb	r6, [r3, #10]
	_TC_INTERRUPT_HANDLER(4,2)
    c200:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    c202:	692b      	ldr	r3, [r5, #16]
    c204:	0028      	movs	r0, r5
    c206:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    c208:	682b      	ldr	r3, [r5, #0]
    c20a:	729e      	strb	r6, [r3, #10]
    c20c:	e7f0      	b.n	c1f0 <TC4_Handler+0x24>
		(module->callback[TC_CALLBACK_ERROR])(module);
    c20e:	68eb      	ldr	r3, [r5, #12]
    c210:	0028      	movs	r0, r5
    c212:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    c214:	682b      	ldr	r3, [r5, #0]
    c216:	729e      	strb	r6, [r3, #10]
    c218:	e7e7      	b.n	c1ea <TC4_Handler+0x1e>
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    c21a:	68ab      	ldr	r3, [r5, #8]
    c21c:	0028      	movs	r0, r5
    c21e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    c220:	682b      	ldr	r3, [r5, #0]
    c222:	729e      	strb	r6, [r3, #10]
    c224:	e7de      	b.n	c1e4 <TC4_Handler+0x18>
    c226:	46c0      	nop			; (mov r8, r8)
    c228:	2000169c 	.word	0x2000169c

0000c22c <_tc_get_inst_index>:
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    c22c:	4b0e      	ldr	r3, [pc, #56]	; (c268 <_tc_get_inst_index+0x3c>)
{
    c22e:	0001      	movs	r1, r0
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    c230:	0018      	movs	r0, r3
{
    c232:	b570      	push	{r4, r5, r6, lr}
    c234:	b084      	sub	sp, #16
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    c236:	aa01      	add	r2, sp, #4
    c238:	c870      	ldmia	r0!, {r4, r5, r6}
    c23a:	c270      	stmia	r2!, {r4, r5, r6}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    c23c:	9a01      	ldr	r2, [sp, #4]
    c23e:	4291      	cmp	r1, r2
    c240:	d008      	beq.n	c254 <_tc_get_inst_index+0x28>
    c242:	685a      	ldr	r2, [r3, #4]
    c244:	4291      	cmp	r1, r2
    c246:	d008      	beq.n	c25a <_tc_get_inst_index+0x2e>
    c248:	689b      	ldr	r3, [r3, #8]
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    c24a:	2000      	movs	r0, #0
		if (hw == tc_modules[i]) {
    c24c:	428b      	cmp	r3, r1
    c24e:	d007      	beq.n	c260 <_tc_get_inst_index+0x34>
}
    c250:	b004      	add	sp, #16
    c252:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    c254:	2000      	movs	r0, #0
			return i;
    c256:	b2c0      	uxtb	r0, r0
    c258:	e7fa      	b.n	c250 <_tc_get_inst_index+0x24>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    c25a:	2001      	movs	r0, #1
			return i;
    c25c:	b2c0      	uxtb	r0, r0
    c25e:	e7f7      	b.n	c250 <_tc_get_inst_index+0x24>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    c260:	3002      	adds	r0, #2
			return i;
    c262:	b2c0      	uxtb	r0, r0
    c264:	e7f4      	b.n	c250 <_tc_get_inst_index+0x24>
    c266:	46c0      	nop			; (mov r8, r8)
    c268:	00023b20 	.word	0x00023b20

0000c26c <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    c26c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c26e:	4645      	mov	r5, r8
    c270:	46de      	mov	lr, fp
    c272:	4657      	mov	r7, sl
    c274:	464e      	mov	r6, r9
    c276:	b5e0      	push	{r5, r6, r7, lr}
    c278:	b08b      	sub	sp, #44	; 0x2c
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    c27a:	ab04      	add	r3, sp, #16
    c27c:	469b      	mov	fp, r3
    c27e:	4bc8      	ldr	r3, [pc, #800]	; (c5a0 <tc_init+0x334>)
{
    c280:	000f      	movs	r7, r1
    c282:	4690      	mov	r8, r2
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    c284:	0019      	movs	r1, r3
    c286:	465a      	mov	r2, fp
{
    c288:	0004      	movs	r4, r0
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    c28a:	c961      	ldmia	r1!, {r0, r5, r6}
    c28c:	c261      	stmia	r2!, {r0, r5, r6}
		if (hw == tc_modules[i]) {
    c28e:	9a04      	ldr	r2, [sp, #16]
    c290:	42ba      	cmp	r2, r7
    c292:	d100      	bne.n	c296 <tc_init+0x2a>
    c294:	e133      	b.n	c4fe <tc_init+0x292>
    c296:	685a      	ldr	r2, [r3, #4]
    c298:	42ba      	cmp	r2, r7
    c29a:	d100      	bne.n	c29e <tc_init+0x32>
    c29c:	e134      	b.n	c508 <tc_init+0x29c>
    c29e:	2200      	movs	r2, #0
    c2a0:	4691      	mov	r9, r2
	return 0;
    c2a2:	4692      	mov	sl, r2
		if (hw == tc_modules[i]) {
    c2a4:	689a      	ldr	r2, [r3, #8]
    c2a6:	4297      	cmp	r7, r2
    c2a8:	d100      	bne.n	c2ac <tc_init+0x40>
    c2aa:	e12f      	b.n	c50c <tc_init+0x2a0>
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC1,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC2,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC3};
#else
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC4_GCLK_ID};
    c2ac:	221b      	movs	r2, #27
    c2ae:	ae02      	add	r6, sp, #8
    c2b0:	7032      	strb	r2, [r6, #0]
    c2b2:	7072      	strb	r2, [r6, #1]
    c2b4:	3202      	adds	r2, #2
    c2b6:	70b2      	strb	r2, [r6, #2]
	/* Array of PM APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
    c2b8:	465a      	mov	r2, fp
    c2ba:	330c      	adds	r3, #12
    c2bc:	cb23      	ldmia	r3!, {r0, r1, r5}
    c2be:	c223      	stmia	r2!, {r0, r1, r5}
    c2c0:	cb23      	ldmia	r3!, {r0, r1, r5}
    c2c2:	c223      	stmia	r2!, {r0, r1, r5}
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    c2c4:	2300      	movs	r3, #0
    c2c6:	60a3      	str	r3, [r4, #8]
    c2c8:	60e3      	str	r3, [r4, #12]
    c2ca:	6123      	str	r3, [r4, #16]
    c2cc:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    c2ce:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    c2d0:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    c2d2:	464b      	mov	r3, r9
    c2d4:	4ab3      	ldr	r2, [pc, #716]	; (c5a4 <tc_init+0x338>)
    c2d6:	009b      	lsls	r3, r3, #2
    c2d8:	509c      	str	r4, [r3, r2]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    c2da:	4642      	mov	r2, r8
    c2dc:	2334      	movs	r3, #52	; 0x34
	module_inst->hw = hw;
    c2de:	6027      	str	r7, [r4, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    c2e0:	5cd3      	ldrb	r3, [r2, r3]
    c2e2:	76a3      	strb	r3, [r4, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    c2e4:	78d3      	ldrb	r3, [r2, #3]
    c2e6:	2b08      	cmp	r3, #8
    c2e8:	d00c      	beq.n	c304 <tc_init+0x98>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    c2ea:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    c2ec:	2301      	movs	r3, #1
    c2ee:	683a      	ldr	r2, [r7, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    c2f0:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    c2f2:	4213      	tst	r3, r2
    c2f4:	d00b      	beq.n	c30e <tc_init+0xa2>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    c2f6:	b00b      	add	sp, #44	; 0x2c
    c2f8:	bc3c      	pop	{r2, r3, r4, r5}
    c2fa:	4690      	mov	r8, r2
    c2fc:	4699      	mov	r9, r3
    c2fe:	46a2      	mov	sl, r4
    c300:	46ab      	mov	fp, r5
    c302:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    c304:	4652      	mov	r2, sl
		return STATUS_ERR_INVALID_ARG;
    c306:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    c308:	07d2      	lsls	r2, r2, #31
    c30a:	d4f4      	bmi.n	c2f6 <tc_init+0x8a>
    c30c:	e7ed      	b.n	c2ea <tc_init+0x7e>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    c30e:	2202      	movs	r2, #2
    c310:	7af9      	ldrb	r1, [r7, #11]
		return STATUS_ERR_DENIED;
    c312:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    c314:	420a      	tst	r2, r1
    c316:	d1ee      	bne.n	c2f6 <tc_init+0x8a>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    c318:	6839      	ldr	r1, [r7, #0]
    c31a:	400a      	ands	r2, r1
    c31c:	d1eb      	bne.n	c2f6 <tc_init+0x8a>
	if (config->pwm_channel[0].enabled) {
    c31e:	4641      	mov	r1, r8
    c320:	7c09      	ldrb	r1, [r1, #16]
    c322:	2900      	cmp	r1, #0
    c324:	d000      	beq.n	c328 <tc_init+0xbc>
    c326:	e0f6      	b.n	c516 <tc_init+0x2aa>
	if (config->pwm_channel[1].enabled) {
    c328:	4643      	mov	r3, r8
    c32a:	7f1b      	ldrb	r3, [r3, #28]
    c32c:	2b00      	cmp	r3, #0
    c32e:	d000      	beq.n	c332 <tc_init+0xc6>
    c330:	e0fd      	b.n	c52e <tc_init+0x2c2>
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    c332:	464b      	mov	r3, r9
    c334:	4659      	mov	r1, fp
    c336:	005a      	lsls	r2, r3, #1
    c338:	1c53      	adds	r3, r2, #1
    c33a:	009b      	lsls	r3, r3, #2
    c33c:	58c9      	ldr	r1, [r1, r3]
    c33e:	464b      	mov	r3, r9
	switch (bus) {
    c340:	4658      	mov	r0, fp
    c342:	00db      	lsls	r3, r3, #3
    c344:	5cc3      	ldrb	r3, [r0, r3]
    c346:	2b04      	cmp	r3, #4
    c348:	d807      	bhi.n	c35a <tc_init+0xee>
    c34a:	4897      	ldr	r0, [pc, #604]	; (c5a8 <tc_init+0x33c>)
    c34c:	009b      	lsls	r3, r3, #2
    c34e:	58c3      	ldr	r3, [r0, r3]
    c350:	469f      	mov	pc, r3
			MCLK->APBDMASK.reg |= mask;
    c352:	4896      	ldr	r0, [pc, #600]	; (c5ac <tc_init+0x340>)
    c354:	6a03      	ldr	r3, [r0, #32]
    c356:	4319      	orrs	r1, r3
    c358:	6201      	str	r1, [r0, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    c35a:	4643      	mov	r3, r8
    c35c:	78db      	ldrb	r3, [r3, #3]
    c35e:	2b08      	cmp	r3, #8
    c360:	d100      	bne.n	c364 <tc_init+0xf8>
    c362:	e0f6      	b.n	c552 <tc_init+0x2e6>
	gclk_chan_config.source_generator = config->clock_source;
    c364:	4643      	mov	r3, r8
    c366:	781b      	ldrb	r3, [r3, #0]
    c368:	a901      	add	r1, sp, #4
    c36a:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    c36c:	464b      	mov	r3, r9
    c36e:	5cf5      	ldrb	r5, [r6, r3]
    c370:	4b8f      	ldr	r3, [pc, #572]	; (c5b0 <tc_init+0x344>)
    c372:	0028      	movs	r0, r5
    c374:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    c376:	4b8f      	ldr	r3, [pc, #572]	; (c5b4 <tc_init+0x348>)
    c378:	0028      	movs	r0, r5
    c37a:	4798      	blx	r3
			(uint32_t)config->counter_size |
    c37c:	4643      	mov	r3, r8
    c37e:	4642      	mov	r2, r8
    c380:	78db      	ldrb	r3, [r3, #3]
    c382:	79d2      	ldrb	r2, [r2, #7]
    c384:	4313      	orrs	r3, r2
			(uint32_t)config->clock_prescaler;
    c386:	4642      	mov	r2, r8
    c388:	8892      	ldrh	r2, [r2, #4]
	ctrla_tmp =
    c38a:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    c38c:	4642      	mov	r2, r8
    c38e:	7a52      	ldrb	r2, [r2, #9]
    c390:	2a00      	cmp	r2, #0
    c392:	d002      	beq.n	c39a <tc_init+0x12e>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    c394:	2280      	movs	r2, #128	; 0x80
    c396:	0252      	lsls	r2, r2, #9
    c398:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    c39a:	4642      	mov	r2, r8
    c39c:	7a92      	ldrb	r2, [r2, #10]
    c39e:	2a00      	cmp	r2, #0
    c3a0:	d002      	beq.n	c3a8 <tc_init+0x13c>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    c3a2:	2280      	movs	r2, #128	; 0x80
    c3a4:	0292      	lsls	r2, r2, #10
    c3a6:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    c3a8:	4642      	mov	r2, r8
    c3aa:	7ad2      	ldrb	r2, [r2, #11]
    c3ac:	2a00      	cmp	r2, #0
    c3ae:	d002      	beq.n	c3b6 <tc_init+0x14a>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    c3b0:	2280      	movs	r2, #128	; 0x80
    c3b2:	0352      	lsls	r2, r2, #13
    c3b4:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    c3b6:	4642      	mov	r2, r8
    c3b8:	7b12      	ldrb	r2, [r2, #12]
    c3ba:	2a00      	cmp	r2, #0
    c3bc:	d002      	beq.n	c3c4 <tc_init+0x158>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    c3be:	2280      	movs	r2, #128	; 0x80
    c3c0:	0392      	lsls	r2, r2, #14
    c3c2:	4313      	orrs	r3, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    c3c4:	4642      	mov	r2, r8
    c3c6:	7851      	ldrb	r1, [r2, #1]
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
    c3c8:	7892      	ldrb	r2, [r2, #2]
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    c3ca:	0189      	lsls	r1, r1, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
    c3cc:	01d2      	lsls	r2, r2, #7
    c3ce:	4311      	orrs	r1, r2
    c3d0:	6822      	ldr	r2, [r4, #0]
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    c3d2:	4319      	orrs	r1, r3
	return (tc_module->SYNCBUSY.reg);
    c3d4:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    c3d6:	2b00      	cmp	r3, #0
    c3d8:	d1fc      	bne.n	c3d4 <tc_init+0x168>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    c3da:	6039      	str	r1, [r7, #0]
    c3dc:	6822      	ldr	r2, [r4, #0]
    c3de:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    c3e0:	2b00      	cmp	r3, #0
    c3e2:	d1fc      	bne.n	c3de <tc_init+0x172>
	hw->COUNT8.WAVE.reg = config->wave_generation;
    c3e4:	4643      	mov	r3, r8
    c3e6:	799b      	ldrb	r3, [r3, #6]
    c3e8:	733b      	strb	r3, [r7, #12]
	if (config->oneshot) {
    c3ea:	4643      	mov	r3, r8
    c3ec:	7b5b      	ldrb	r3, [r3, #13]
    c3ee:	2b00      	cmp	r3, #0
    c3f0:	d000      	beq.n	c3f4 <tc_init+0x188>
    c3f2:	e08d      	b.n	c510 <tc_init+0x2a4>
    c3f4:	2101      	movs	r1, #1
	uint8_t ctrlbset_tmp = 0;
    c3f6:	2200      	movs	r2, #0
	if (config->count_direction) {
    c3f8:	4643      	mov	r3, r8
    c3fa:	7b9b      	ldrb	r3, [r3, #14]
    c3fc:	2b00      	cmp	r3, #0
    c3fe:	d100      	bne.n	c402 <tc_init+0x196>
    c400:	0011      	movs	r1, r2
    c402:	6822      	ldr	r2, [r4, #0]
    c404:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    c406:	2b00      	cmp	r3, #0
    c408:	d1fc      	bne.n	c404 <tc_init+0x198>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    c40a:	33ff      	adds	r3, #255	; 0xff
    c40c:	713b      	strb	r3, [r7, #4]
	if (ctrlbset_tmp) {
    c40e:	2900      	cmp	r1, #0
    c410:	d004      	beq.n	c41c <tc_init+0x1b0>
    c412:	6822      	ldr	r2, [r4, #0]
    c414:	6913      	ldr	r3, [r2, #16]
		while (tc_is_syncing(module_inst)) {
    c416:	2b00      	cmp	r3, #0
    c418:	d1fc      	bne.n	c414 <tc_init+0x1a8>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    c41a:	7179      	strb	r1, [r7, #5]
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
    c41c:	4643      	mov	r3, r8
    c41e:	7a1b      	ldrb	r3, [r3, #8]
    c420:	737b      	strb	r3, [r7, #13]
    c422:	6822      	ldr	r2, [r4, #0]
    c424:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    c426:	2b00      	cmp	r3, #0
    c428:	d1fc      	bne.n	c424 <tc_init+0x1b8>
	switch (module_inst->counter_size) {
    c42a:	7923      	ldrb	r3, [r4, #4]
    c42c:	2b04      	cmp	r3, #4
    c42e:	d01b      	beq.n	c468 <tc_init+0x1fc>
    c430:	2b08      	cmp	r3, #8
    c432:	d03a      	beq.n	c4aa <tc_init+0x23e>
	return STATUS_ERR_INVALID_ARG;
    c434:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    c436:	2b00      	cmp	r3, #0
    c438:	d000      	beq.n	c43c <tc_init+0x1d0>
    c43a:	e75c      	b.n	c2f6 <tc_init+0x8a>
    c43c:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    c43e:	2b00      	cmp	r3, #0
    c440:	d1fc      	bne.n	c43c <tc_init+0x1d0>
				= config->counter_16_bit.value;
    c442:	4643      	mov	r3, r8
    c444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    c446:	82bb      	strh	r3, [r7, #20]
    c448:	6822      	ldr	r2, [r4, #0]
    c44a:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    c44c:	2b00      	cmp	r3, #0
    c44e:	d1fc      	bne.n	c44a <tc_init+0x1de>
					config->counter_16_bit.compare_capture_channel[0];
    c450:	4643      	mov	r3, r8
    c452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    c454:	83bb      	strh	r3, [r7, #28]
    c456:	6822      	ldr	r2, [r4, #0]
    c458:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    c45a:	2b00      	cmp	r3, #0
    c45c:	d1fc      	bne.n	c458 <tc_init+0x1ec>
					config->counter_16_bit.compare_capture_channel[1];
    c45e:	4643      	mov	r3, r8
    c460:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
			return STATUS_OK;
    c462:	2000      	movs	r0, #0
			hw->COUNT16.CC[1].reg =
    c464:	83fb      	strh	r3, [r7, #30]
			return STATUS_OK;
    c466:	e746      	b.n	c2f6 <tc_init+0x8a>
    c468:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    c46a:	2b00      	cmp	r3, #0
    c46c:	d1fc      	bne.n	c468 <tc_init+0x1fc>
					config->counter_8_bit.value;
    c46e:	4642      	mov	r2, r8
    c470:	3328      	adds	r3, #40	; 0x28
    c472:	5cd3      	ldrb	r3, [r2, r3]
			hw->COUNT8.COUNT.reg =
    c474:	753b      	strb	r3, [r7, #20]
    c476:	6822      	ldr	r2, [r4, #0]
    c478:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    c47a:	2b00      	cmp	r3, #0
    c47c:	d1fc      	bne.n	c478 <tc_init+0x20c>
					config->counter_8_bit.period;
    c47e:	4642      	mov	r2, r8
    c480:	3329      	adds	r3, #41	; 0x29
    c482:	5cd3      	ldrb	r3, [r2, r3]
			hw->COUNT8.PER.reg =
    c484:	76fb      	strb	r3, [r7, #27]
    c486:	6822      	ldr	r2, [r4, #0]
    c488:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    c48a:	2b00      	cmp	r3, #0
    c48c:	d1fc      	bne.n	c488 <tc_init+0x21c>
					config->counter_8_bit.compare_capture_channel[0];
    c48e:	4642      	mov	r2, r8
    c490:	332a      	adds	r3, #42	; 0x2a
    c492:	5cd3      	ldrb	r3, [r2, r3]
			hw->COUNT8.CC[0].reg =
    c494:	773b      	strb	r3, [r7, #28]
    c496:	6822      	ldr	r2, [r4, #0]
    c498:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    c49a:	2b00      	cmp	r3, #0
    c49c:	d1fc      	bne.n	c498 <tc_init+0x22c>
					config->counter_8_bit.compare_capture_channel[1];
    c49e:	4642      	mov	r2, r8
    c4a0:	332b      	adds	r3, #43	; 0x2b
    c4a2:	5cd3      	ldrb	r3, [r2, r3]
			return STATUS_OK;
    c4a4:	2000      	movs	r0, #0
			hw->COUNT8.CC[1].reg =
    c4a6:	777b      	strb	r3, [r7, #29]
			return STATUS_OK;
    c4a8:	e725      	b.n	c2f6 <tc_init+0x8a>
    c4aa:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    c4ac:	2b00      	cmp	r3, #0
    c4ae:	d1fc      	bne.n	c4aa <tc_init+0x23e>
				= config->counter_32_bit.value;
    c4b0:	4643      	mov	r3, r8
    c4b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c4b4:	617b      	str	r3, [r7, #20]
    c4b6:	6822      	ldr	r2, [r4, #0]
    c4b8:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    c4ba:	2b00      	cmp	r3, #0
    c4bc:	d1fc      	bne.n	c4b8 <tc_init+0x24c>
			hw->COUNT32.CC[0].reg =
    c4be:	4643      	mov	r3, r8
    c4c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c4c2:	61fb      	str	r3, [r7, #28]
    c4c4:	6822      	ldr	r2, [r4, #0]
    c4c6:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    c4c8:	2b00      	cmp	r3, #0
    c4ca:	d1fc      	bne.n	c4c6 <tc_init+0x25a>
					config->counter_32_bit.compare_capture_channel[1];
    c4cc:	4643      	mov	r3, r8
    c4ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			return STATUS_OK;
    c4d0:	2000      	movs	r0, #0
			hw->COUNT32.CC[1].reg =
    c4d2:	623b      	str	r3, [r7, #32]
			return STATUS_OK;
    c4d4:	e70f      	b.n	c2f6 <tc_init+0x8a>
			MCLK->APBCMASK.reg |= mask;
    c4d6:	4835      	ldr	r0, [pc, #212]	; (c5ac <tc_init+0x340>)
    c4d8:	69c3      	ldr	r3, [r0, #28]
    c4da:	4319      	orrs	r1, r3
    c4dc:	61c1      	str	r1, [r0, #28]
    c4de:	e73c      	b.n	c35a <tc_init+0xee>
			MCLK->APBBMASK.reg |= mask;
    c4e0:	4832      	ldr	r0, [pc, #200]	; (c5ac <tc_init+0x340>)
    c4e2:	6983      	ldr	r3, [r0, #24]
    c4e4:	4319      	orrs	r1, r3
    c4e6:	6181      	str	r1, [r0, #24]
    c4e8:	e737      	b.n	c35a <tc_init+0xee>
			MCLK->APBAMASK.reg |= mask;
    c4ea:	4830      	ldr	r0, [pc, #192]	; (c5ac <tc_init+0x340>)
    c4ec:	6943      	ldr	r3, [r0, #20]
    c4ee:	4319      	orrs	r1, r3
    c4f0:	6141      	str	r1, [r0, #20]
    c4f2:	e732      	b.n	c35a <tc_init+0xee>
			break;
		case SYSTEM_CLOCK_APB_APBE:
			MCLK->APBEMASK.reg |= mask;
    c4f4:	4b2d      	ldr	r3, [pc, #180]	; (c5ac <tc_init+0x340>)
    c4f6:	6a58      	ldr	r0, [r3, #36]	; 0x24
    c4f8:	4301      	orrs	r1, r0
    c4fa:	6259      	str	r1, [r3, #36]	; 0x24
    c4fc:	e72d      	b.n	c35a <tc_init+0xee>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    c4fe:	2200      	movs	r2, #0
			return i;
    c500:	b2d1      	uxtb	r1, r2
    c502:	468a      	mov	sl, r1
    c504:	4691      	mov	r9, r2
    c506:	e6d1      	b.n	c2ac <tc_init+0x40>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    c508:	2201      	movs	r2, #1
    c50a:	e7f9      	b.n	c500 <tc_init+0x294>
    c50c:	2202      	movs	r2, #2
    c50e:	e7f7      	b.n	c500 <tc_init+0x294>
    c510:	2105      	movs	r1, #5
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    c512:	2204      	movs	r2, #4
    c514:	e770      	b.n	c3f8 <tc_init+0x18c>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    c516:	a903      	add	r1, sp, #12
	config->powersave    = false;
    c518:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    c51a:	4642      	mov	r2, r8
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    c51c:	708b      	strb	r3, [r1, #2]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    c51e:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    c520:	4643      	mov	r3, r8
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    c522:	7e12      	ldrb	r2, [r2, #24]
		system_pinmux_pin_set_config(
    c524:	7d18      	ldrb	r0, [r3, #20]
    c526:	4b24      	ldr	r3, [pc, #144]	; (c5b8 <tc_init+0x34c>)
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    c528:	700a      	strb	r2, [r1, #0]
		system_pinmux_pin_set_config(
    c52a:	4798      	blx	r3
    c52c:	e6fc      	b.n	c328 <tc_init+0xbc>
	config->powersave    = false;
    c52e:	2200      	movs	r2, #0
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    c530:	a903      	add	r1, sp, #12
	config->powersave    = false;
    c532:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    c534:	2024      	movs	r0, #36	; 0x24
    c536:	4642      	mov	r2, r8
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    c538:	2301      	movs	r3, #1
    c53a:	1812      	adds	r2, r2, r0
    c53c:	7812      	ldrb	r2, [r2, #0]
    c53e:	708b      	strb	r3, [r1, #2]
    c540:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    c542:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    c544:	2220      	movs	r2, #32
    c546:	4643      	mov	r3, r8
    c548:	189b      	adds	r3, r3, r2
    c54a:	7818      	ldrb	r0, [r3, #0]
    c54c:	4b1a      	ldr	r3, [pc, #104]	; (c5b8 <tc_init+0x34c>)
    c54e:	4798      	blx	r3
    c550:	e6ef      	b.n	c332 <tc_init+0xc6>
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    c552:	4653      	mov	r3, sl
    c554:	2b02      	cmp	r3, #2
    c556:	d100      	bne.n	c55a <tc_init+0x2ee>
    c558:	e704      	b.n	c364 <tc_init+0xf8>
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    c55a:	4659      	mov	r1, fp
    c55c:	1cd3      	adds	r3, r2, #3
    c55e:	3202      	adds	r2, #2
    c560:	0092      	lsls	r2, r2, #2
	switch (bus) {
    c562:	5c8a      	ldrb	r2, [r1, r2]
    c564:	009b      	lsls	r3, r3, #2
    c566:	58cb      	ldr	r3, [r1, r3]
    c568:	2a04      	cmp	r2, #4
    c56a:	d900      	bls.n	c56e <tc_init+0x302>
    c56c:	e6fa      	b.n	c364 <tc_init+0xf8>
    c56e:	4913      	ldr	r1, [pc, #76]	; (c5bc <tc_init+0x350>)
    c570:	0092      	lsls	r2, r2, #2
    c572:	588a      	ldr	r2, [r1, r2]
    c574:	4697      	mov	pc, r2
			MCLK->APBEMASK.reg |= mask;
    c576:	4a0d      	ldr	r2, [pc, #52]	; (c5ac <tc_init+0x340>)
    c578:	6a51      	ldr	r1, [r2, #36]	; 0x24
    c57a:	430b      	orrs	r3, r1
    c57c:	6253      	str	r3, [r2, #36]	; 0x24
    c57e:	e6f1      	b.n	c364 <tc_init+0xf8>
			MCLK->APBDMASK.reg |= mask;
    c580:	490a      	ldr	r1, [pc, #40]	; (c5ac <tc_init+0x340>)
    c582:	6a0a      	ldr	r2, [r1, #32]
    c584:	4313      	orrs	r3, r2
    c586:	620b      	str	r3, [r1, #32]
    c588:	e6ec      	b.n	c364 <tc_init+0xf8>
			MCLK->APBCMASK.reg |= mask;
    c58a:	4908      	ldr	r1, [pc, #32]	; (c5ac <tc_init+0x340>)
    c58c:	69ca      	ldr	r2, [r1, #28]
    c58e:	4313      	orrs	r3, r2
    c590:	61cb      	str	r3, [r1, #28]
    c592:	e6e7      	b.n	c364 <tc_init+0xf8>
			MCLK->APBBMASK.reg |= mask;
    c594:	4905      	ldr	r1, [pc, #20]	; (c5ac <tc_init+0x340>)
    c596:	698a      	ldr	r2, [r1, #24]
    c598:	4313      	orrs	r3, r2
    c59a:	618b      	str	r3, [r1, #24]
    c59c:	e6e2      	b.n	c364 <tc_init+0xf8>
    c59e:	46c0      	nop			; (mov r8, r8)
    c5a0:	00023b20 	.word	0x00023b20
    c5a4:	2000169c 	.word	0x2000169c
    c5a8:	00023af8 	.word	0x00023af8
    c5ac:	40000400 	.word	0x40000400
    c5b0:	00015865 	.word	0x00015865
    c5b4:	000158a5 	.word	0x000158a5
    c5b8:	00015961 	.word	0x00015961
    c5bc:	00023b0c 	.word	0x00023b0c
			MCLK->APBAMASK.reg |= mask;
    c5c0:	4902      	ldr	r1, [pc, #8]	; (c5cc <tc_init+0x360>)
    c5c2:	694a      	ldr	r2, [r1, #20]
    c5c4:	4313      	orrs	r3, r2
    c5c6:	614b      	str	r3, [r1, #20]
    c5c8:	e6cc      	b.n	c364 <tc_init+0xf8>
    c5ca:	46c0      	nop			; (mov r8, r8)
    c5cc:	40000400 	.word	0x40000400

0000c5d0 <tc_set_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance*/
	Tc *const tc_module = module_inst->hw;
    c5d0:	6802      	ldr	r2, [r0, #0]
    c5d2:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    c5d4:	2b00      	cmp	r3, #0
    c5d6:	d1fc      	bne.n	c5d2 <tc_set_count_value+0x2>
		/* Wait for sync */
	}

	/* Write to based on the TC counter_size */
	switch (module_inst->counter_size) {
    c5d8:	7903      	ldrb	r3, [r0, #4]
    c5da:	2b04      	cmp	r3, #4
    c5dc:	d00c      	beq.n	c5f8 <tc_set_count_value+0x28>
    c5de:	2b08      	cmp	r3, #8
    c5e0:	d007      	beq.n	c5f2 <tc_set_count_value+0x22>
		case TC_COUNTER_SIZE_32BIT:
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
			return STATUS_OK;

		default:
			return STATUS_ERR_INVALID_ARG;
    c5e2:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    c5e4:	2b00      	cmp	r3, #0
    c5e6:	d000      	beq.n	c5ea <tc_set_count_value+0x1a>
	}
}
    c5e8:	4770      	bx	lr
			tc_module->COUNT16.COUNT.reg = (uint16_t)count;
    c5ea:	b289      	uxth	r1, r1
    c5ec:	8291      	strh	r1, [r2, #20]
			return STATUS_OK;
    c5ee:	2000      	movs	r0, #0
    c5f0:	e7fa      	b.n	c5e8 <tc_set_count_value+0x18>
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
    c5f2:	6151      	str	r1, [r2, #20]
			return STATUS_OK;
    c5f4:	2000      	movs	r0, #0
    c5f6:	e7f7      	b.n	c5e8 <tc_set_count_value+0x18>
			tc_module->COUNT8.COUNT.reg  = (uint8_t)count;
    c5f8:	b2c9      	uxtb	r1, r1
    c5fa:	7511      	strb	r1, [r2, #20]
			return STATUS_OK;
    c5fc:	2000      	movs	r0, #0
    c5fe:	e7f3      	b.n	c5e8 <tc_set_count_value+0x18>

0000c600 <cal_loop_test>:
extern FRESULT SD_status;
extern FIL file_cal_report, file_cal_raw;

extern struct OPTIONS options;

void cal_loop_test(struct MEASUREMENT *meas_inst){
    c600:	b5f0      	push	{r4, r5, r6, r7, lr}
    c602:	46de      	mov	lr, fp
    c604:	4657      	mov	r7, sl
    c606:	464e      	mov	r6, r9
    c608:	4645      	mov	r5, r8
    c60a:	b5e0      	push	{r5, r6, r7, lr}
	float dN1, dE1, dD1;
	float delta_horizontal;
	
	
	// increment distance and point counter
	n_points = n_points+1;
    c60c:	4a78      	ldr	r2, [pc, #480]	; (c7f0 <cal_loop_test+0x1f0>)
void cal_loop_test(struct MEASUREMENT *meas_inst){
    c60e:	b08b      	sub	sp, #44	; 0x2c
	n_points = n_points+1;
    c610:	6813      	ldr	r3, [r2, #0]
void cal_loop_test(struct MEASUREMENT *meas_inst){
    c612:	4682      	mov	sl, r0
	n_points = n_points+1;
    c614:	3301      	adds	r3, #1
    c616:	6013      	str	r3, [r2, #0]
	loop_distance = loop_distance + meas_inst->distance;
    c618:	69c3      	ldr	r3, [r0, #28]
    c61a:	4a76      	ldr	r2, [pc, #472]	; (c7f4 <cal_loop_test+0x1f4>)
    c61c:	9302      	str	r3, [sp, #8]
    c61e:	6810      	ldr	r0, [r2, #0]
    c620:	1c19      	adds	r1, r3, #0
    c622:	4a75      	ldr	r2, [pc, #468]	; (c7f8 <cal_loop_test+0x1f8>)
    c624:	4790      	blx	r2
    c626:	4a73      	ldr	r2, [pc, #460]	; (c7f4 <cal_loop_test+0x1f4>)
    c628:	6010      	str	r0, [r2, #0]
	// find current position
	N1 = loop_horizontal*cos(deg2rad*loop_azimuth);
    c62a:	4a74      	ldr	r2, [pc, #464]	; (c7fc <cal_loop_test+0x1fc>)
    c62c:	4690      	mov	r8, r2
    c62e:	4a74      	ldr	r2, [pc, #464]	; (c800 <cal_loop_test+0x200>)
    c630:	6810      	ldr	r0, [r2, #0]
    c632:	47c0      	blx	r8
    c634:	4b73      	ldr	r3, [pc, #460]	; (c804 <cal_loop_test+0x204>)
    c636:	000f      	movs	r7, r1
    c638:	681a      	ldr	r2, [r3, #0]
    c63a:	4973      	ldr	r1, [pc, #460]	; (c808 <cal_loop_test+0x208>)
    c63c:	9200      	str	r2, [sp, #0]
    c63e:	0006      	movs	r6, r0
    c640:	6809      	ldr	r1, [r1, #0]
    c642:	1c10      	adds	r0, r2, #0
    c644:	4c71      	ldr	r4, [pc, #452]	; (c80c <cal_loop_test+0x20c>)
    c646:	47a0      	blx	r4
    c648:	47c0      	blx	r8
    c64a:	4b71      	ldr	r3, [pc, #452]	; (c810 <cal_loop_test+0x210>)
    c64c:	0004      	movs	r4, r0
    c64e:	469c      	mov	ip, r3
    c650:	000d      	movs	r5, r1
    c652:	47e0      	blx	ip
    c654:	000b      	movs	r3, r1
    c656:	496f      	ldr	r1, [pc, #444]	; (c814 <cal_loop_test+0x214>)
    c658:	0002      	movs	r2, r0
    c65a:	4689      	mov	r9, r1
    c65c:	0030      	movs	r0, r6
    c65e:	0039      	movs	r1, r7
    c660:	47c8      	blx	r9
    c662:	4b6d      	ldr	r3, [pc, #436]	; (c818 <cal_loop_test+0x218>)
    c664:	469b      	mov	fp, r3
    c666:	4798      	blx	r3
	E1 = loop_horizontal*sin(deg2rad*loop_azimuth);
    c668:	0029      	movs	r1, r5
	N1 = loop_horizontal*cos(deg2rad*loop_azimuth);
    c66a:	9008      	str	r0, [sp, #32]
	E1 = loop_horizontal*sin(deg2rad*loop_azimuth);
    c66c:	0020      	movs	r0, r4
    c66e:	4c6b      	ldr	r4, [pc, #428]	; (c81c <cal_loop_test+0x21c>)
    c670:	47a0      	blx	r4
    c672:	0002      	movs	r2, r0
    c674:	000b      	movs	r3, r1
    c676:	0030      	movs	r0, r6
    c678:	0039      	movs	r1, r7
    c67a:	47c8      	blx	r9
    c67c:	47d8      	blx	fp
	D1 = loop_vertical;
    c67e:	4c68      	ldr	r4, [pc, #416]	; (c820 <cal_loop_test+0x220>)
	E1 = loop_horizontal*sin(deg2rad*loop_azimuth);
    c680:	9009      	str	r0, [sp, #36]	; 0x24
	D1 = loop_vertical;
    c682:	6824      	ldr	r4, [r4, #0]
    c684:	9405      	str	r4, [sp, #20]
	// find difference in position
	delta_horizontal = meas_inst->distance*cos(deg2rad*meas_inst->inclination);
    c686:	9802      	ldr	r0, [sp, #8]
    c688:	47c0      	blx	r8
    c68a:	4653      	mov	r3, sl
    c68c:	0004      	movs	r4, r0
    c68e:	000d      	movs	r5, r1
    c690:	9800      	ldr	r0, [sp, #0]
    c692:	6919      	ldr	r1, [r3, #16]
    c694:	4b5d      	ldr	r3, [pc, #372]	; (c80c <cal_loop_test+0x20c>)
    c696:	4798      	blx	r3
    c698:	47c0      	blx	r8
    c69a:	0002      	movs	r2, r0
    c69c:	000b      	movs	r3, r1
    c69e:	9206      	str	r2, [sp, #24]
    c6a0:	9307      	str	r3, [sp, #28]
    c6a2:	4b5b      	ldr	r3, [pc, #364]	; (c810 <cal_loop_test+0x210>)
    c6a4:	4798      	blx	r3
    c6a6:	9402      	str	r4, [sp, #8]
    c6a8:	9503      	str	r5, [sp, #12]
    c6aa:	0002      	movs	r2, r0
    c6ac:	000b      	movs	r3, r1
    c6ae:	0020      	movs	r0, r4
    c6b0:	0029      	movs	r1, r5
    c6b2:	47c8      	blx	r9
    c6b4:	47d8      	blx	fp
	dN1 = delta_horizontal*cos(deg2rad*meas_inst->azimuth);
    c6b6:	47c0      	blx	r8
    c6b8:	4653      	mov	r3, sl
    c6ba:	0006      	movs	r6, r0
    c6bc:	000f      	movs	r7, r1
    c6be:	9800      	ldr	r0, [sp, #0]
    c6c0:	68d9      	ldr	r1, [r3, #12]
    c6c2:	4b52      	ldr	r3, [pc, #328]	; (c80c <cal_loop_test+0x20c>)
    c6c4:	4798      	blx	r3
    c6c6:	47c0      	blx	r8
    c6c8:	4b51      	ldr	r3, [pc, #324]	; (c810 <cal_loop_test+0x210>)
    c6ca:	0004      	movs	r4, r0
    c6cc:	000d      	movs	r5, r1
    c6ce:	4798      	blx	r3
	dE1 = delta_horizontal*sin(deg2rad*meas_inst->azimuth);
    c6d0:	4b52      	ldr	r3, [pc, #328]	; (c81c <cal_loop_test+0x21c>)
	dN1 = delta_horizontal*cos(deg2rad*meas_inst->azimuth);
    c6d2:	9000      	str	r0, [sp, #0]
    c6d4:	9101      	str	r1, [sp, #4]
	dE1 = delta_horizontal*sin(deg2rad*meas_inst->azimuth);
    c6d6:	0020      	movs	r0, r4
    c6d8:	0029      	movs	r1, r5
    c6da:	4798      	blx	r3
	dD1 = meas_inst->distance*sin(deg2rad*meas_inst->inclination);
    c6dc:	4b4f      	ldr	r3, [pc, #316]	; (c81c <cal_loop_test+0x21c>)
	dE1 = delta_horizontal*sin(deg2rad*meas_inst->azimuth);
    c6de:	0004      	movs	r4, r0
    c6e0:	000d      	movs	r5, r1
	dD1 = meas_inst->distance*sin(deg2rad*meas_inst->inclination);
    c6e2:	9806      	ldr	r0, [sp, #24]
    c6e4:	9907      	ldr	r1, [sp, #28]
    c6e6:	4798      	blx	r3
	dN1 = delta_horizontal*cos(deg2rad*meas_inst->azimuth);
    c6e8:	9a00      	ldr	r2, [sp, #0]
    c6ea:	9b01      	ldr	r3, [sp, #4]
	dD1 = meas_inst->distance*sin(deg2rad*meas_inst->inclination);
    c6ec:	9006      	str	r0, [sp, #24]
    c6ee:	9107      	str	r1, [sp, #28]
	dN1 = delta_horizontal*cos(deg2rad*meas_inst->azimuth);
    c6f0:	0030      	movs	r0, r6
    c6f2:	0039      	movs	r1, r7
    c6f4:	47c8      	blx	r9
    c6f6:	47d8      	blx	fp
	//  add  new offsets
	N1 = N1 + dN1;
    c6f8:	9908      	ldr	r1, [sp, #32]
    c6fa:	4b3f      	ldr	r3, [pc, #252]	; (c7f8 <cal_loop_test+0x1f8>)
    c6fc:	4798      	blx	r3
	E1 = E1 + dE1;
	D1 = D1 + dD1;
	//  Calculate new horizontal, vertical, azimuth
	loop_horizontal = sqrt(pow(N1,2)+pow(E1,2));
    c6fe:	47c0      	blx	r8
	dE1 = delta_horizontal*sin(deg2rad*meas_inst->azimuth);
    c700:	0022      	movs	r2, r4
	loop_horizontal = sqrt(pow(N1,2)+pow(E1,2));
    c702:	9000      	str	r0, [sp, #0]
    c704:	9101      	str	r1, [sp, #4]
	dE1 = delta_horizontal*sin(deg2rad*meas_inst->azimuth);
    c706:	002b      	movs	r3, r5
    c708:	0030      	movs	r0, r6
    c70a:	0039      	movs	r1, r7
    c70c:	47c8      	blx	r9
    c70e:	47d8      	blx	fp
	E1 = E1 + dE1;
    c710:	9909      	ldr	r1, [sp, #36]	; 0x24
    c712:	4b39      	ldr	r3, [pc, #228]	; (c7f8 <cal_loop_test+0x1f8>)
    c714:	4798      	blx	r3
	loop_horizontal = sqrt(pow(N1,2)+pow(E1,2));
    c716:	47c0      	blx	r8
    c718:	9c00      	ldr	r4, [sp, #0]
    c71a:	9d01      	ldr	r5, [sp, #4]
    c71c:	0006      	movs	r6, r0
    c71e:	000f      	movs	r7, r1
    c720:	0022      	movs	r2, r4
    c722:	002b      	movs	r3, r5
    c724:	0020      	movs	r0, r4
    c726:	0029      	movs	r1, r5
    c728:	47c8      	blx	r9
    c72a:	0032      	movs	r2, r6
    c72c:	0004      	movs	r4, r0
    c72e:	000d      	movs	r5, r1
    c730:	003b      	movs	r3, r7
    c732:	0030      	movs	r0, r6
    c734:	0039      	movs	r1, r7
    c736:	47c8      	blx	r9
    c738:	000b      	movs	r3, r1
    c73a:	493a      	ldr	r1, [pc, #232]	; (c824 <cal_loop_test+0x224>)
    c73c:	0002      	movs	r2, r0
    c73e:	468a      	mov	sl, r1
    c740:	0020      	movs	r0, r4
    c742:	0029      	movs	r1, r5
    c744:	47d0      	blx	sl
    c746:	4b38      	ldr	r3, [pc, #224]	; (c828 <cal_loop_test+0x228>)
    c748:	4798      	blx	r3
    c74a:	47d8      	blx	fp
    c74c:	4b2c      	ldr	r3, [pc, #176]	; (c800 <cal_loop_test+0x200>)
    c74e:	6018      	str	r0, [r3, #0]
	dD1 = meas_inst->distance*sin(deg2rad*meas_inst->inclination);
    c750:	9a06      	ldr	r2, [sp, #24]
    c752:	9b07      	ldr	r3, [sp, #28]
    c754:	9802      	ldr	r0, [sp, #8]
    c756:	9903      	ldr	r1, [sp, #12]
    c758:	47c8      	blx	r9
    c75a:	47d8      	blx	fp
	D1 = D1 + dD1;
    c75c:	9905      	ldr	r1, [sp, #20]
    c75e:	4b26      	ldr	r3, [pc, #152]	; (c7f8 <cal_loop_test+0x1f8>)
    c760:	4798      	blx	r3
	loop_vertical = D1;
    c762:	4b2f      	ldr	r3, [pc, #188]	; (c820 <cal_loop_test+0x220>)
    c764:	6018      	str	r0, [r3, #0]
	loop_azimuth = rad2deg*atan2(E1, N1);
    c766:	4b31      	ldr	r3, [pc, #196]	; (c82c <cal_loop_test+0x22c>)
    c768:	6818      	ldr	r0, [r3, #0]
    c76a:	47c0      	blx	r8
    c76c:	9a00      	ldr	r2, [sp, #0]
    c76e:	9b01      	ldr	r3, [sp, #4]
    c770:	0004      	movs	r4, r0
    c772:	000d      	movs	r5, r1
    c774:	0030      	movs	r0, r6
    c776:	0039      	movs	r1, r7
    c778:	4e2d      	ldr	r6, [pc, #180]	; (c830 <cal_loop_test+0x230>)
    c77a:	47b0      	blx	r6
    c77c:	0002      	movs	r2, r0
    c77e:	000b      	movs	r3, r1
    c780:	0020      	movs	r0, r4
    c782:	0029      	movs	r1, r5
    c784:	47c8      	blx	r9
    c786:	47d8      	blx	fp
    c788:	4b1f      	ldr	r3, [pc, #124]	; (c808 <cal_loop_test+0x208>)
    c78a:	6018      	str	r0, [r3, #0]
	
	loop_error = sqrt(pow(loop_horizontal,2) + pow(loop_vertical,2))/loop_distance;
    c78c:	4b1c      	ldr	r3, [pc, #112]	; (c800 <cal_loop_test+0x200>)
    c78e:	6818      	ldr	r0, [r3, #0]
    c790:	47c0      	blx	r8
    c792:	4b23      	ldr	r3, [pc, #140]	; (c820 <cal_loop_test+0x220>)
    c794:	0004      	movs	r4, r0
    c796:	6818      	ldr	r0, [r3, #0]
    c798:	000d      	movs	r5, r1
    c79a:	47c0      	blx	r8
    c79c:	0022      	movs	r2, r4
    c79e:	0006      	movs	r6, r0
    c7a0:	000f      	movs	r7, r1
    c7a2:	002b      	movs	r3, r5
    c7a4:	0020      	movs	r0, r4
    c7a6:	0029      	movs	r1, r5
    c7a8:	47c8      	blx	r9
    c7aa:	0032      	movs	r2, r6
    c7ac:	0004      	movs	r4, r0
    c7ae:	000d      	movs	r5, r1
    c7b0:	003b      	movs	r3, r7
    c7b2:	0030      	movs	r0, r6
    c7b4:	0039      	movs	r1, r7
    c7b6:	47c8      	blx	r9
    c7b8:	0002      	movs	r2, r0
    c7ba:	000b      	movs	r3, r1
    c7bc:	0020      	movs	r0, r4
    c7be:	0029      	movs	r1, r5
    c7c0:	47d0      	blx	sl
    c7c2:	4b19      	ldr	r3, [pc, #100]	; (c828 <cal_loop_test+0x228>)
    c7c4:	4798      	blx	r3
    c7c6:	4b0b      	ldr	r3, [pc, #44]	; (c7f4 <cal_loop_test+0x1f4>)
    c7c8:	0004      	movs	r4, r0
    c7ca:	6818      	ldr	r0, [r3, #0]
    c7cc:	000d      	movs	r5, r1
    c7ce:	47c0      	blx	r8
    c7d0:	0002      	movs	r2, r0
    c7d2:	000b      	movs	r3, r1
    c7d4:	0020      	movs	r0, r4
    c7d6:	0029      	movs	r1, r5
    c7d8:	4c16      	ldr	r4, [pc, #88]	; (c834 <cal_loop_test+0x234>)
    c7da:	47a0      	blx	r4
    c7dc:	47d8      	blx	fp
    c7de:	4b16      	ldr	r3, [pc, #88]	; (c838 <cal_loop_test+0x238>)
    c7e0:	6018      	str	r0, [r3, #0]
	
}
    c7e2:	b00b      	add	sp, #44	; 0x2c
    c7e4:	bc3c      	pop	{r2, r3, r4, r5}
    c7e6:	4690      	mov	r8, r2
    c7e8:	4699      	mov	r9, r3
    c7ea:	46a2      	mov	sl, r4
    c7ec:	46ab      	mov	fp, r5
    c7ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c7f0:	20003054 	.word	0x20003054
    c7f4:	2000376c 	.word	0x2000376c
    c7f8:	0001c4a5 	.word	0x0001c4a5
    c7fc:	0001eddd 	.word	0x0001eddd
    c800:	200043f0 	.word	0x200043f0
    c804:	00024504 	.word	0x00024504
    c808:	200051f0 	.word	0x200051f0
    c80c:	0001cba9 	.word	0x0001cba9
    c810:	00019539 	.word	0x00019539
    c814:	0001e115 	.word	0x0001e115
    c818:	0001ee81 	.word	0x0001ee81
    c81c:	000195c5 	.word	0x000195c5
    c820:	20003764 	.word	0x20003764
    c824:	0001d28d 	.word	0x0001d28d
    c828:	000199b5 	.word	0x000199b5
    c82c:	00024d14 	.word	0x00024d14
    c830:	00019655 	.word	0x00019655
    c834:	0001d8ad 	.word	0x0001d8ad
    c838:	20004dcc 	.word	0x20004dcc

0000c83c <cal_dist_process>:

void cal_dist_process(void){
    c83c:	b510      	push	{r4, lr}
	
	
	//  Fill Out data for report structure
	get_time();//  Get current time
    c83e:	4b0c      	ldr	r3, [pc, #48]	; (c870 <cal_dist_process+0x34>)
    c840:	4798      	blx	r3
	cal_report_dist.timestamp = gen_posix_time(&current_time);
    c842:	4c0c      	ldr	r4, [pc, #48]	; (c874 <cal_dist_process+0x38>)
    c844:	4b0c      	ldr	r3, [pc, #48]	; (c878 <cal_dist_process+0x3c>)
    c846:	0020      	movs	r0, r4
    c848:	4798      	blx	r3
	cal_report_dist.software_version = software_version;
    c84a:	4a0c      	ldr	r2, [pc, #48]	; (c87c <cal_dist_process+0x40>)
	cal_report_dist.timestamp = gen_posix_time(&current_time);
    c84c:	4b0c      	ldr	r3, [pc, #48]	; (c880 <cal_dist_process+0x44>)
	cal_report_dist.software_version = software_version;
    c84e:	6812      	ldr	r2, [r2, #0]
	cal_report_dist.timestamp = gen_posix_time(&current_time);
    c850:	60d8      	str	r0, [r3, #12]
	cal_report_dist.software_version = software_version;
    c852:	601a      	str	r2, [r3, #0]
	cal_report_dist.points = buf_points;
    c854:	4a0b      	ldr	r2, [pc, #44]	; (c884 <cal_dist_process+0x48>)
    c856:	7812      	ldrb	r2, [r2, #0]
    c858:	609a      	str	r2, [r3, #8]
	memcpy(&cal_report_dist.time_struct,&current_time,sizeof(current_time));
    c85a:	3340      	adds	r3, #64	; 0x40
    c85c:	cc07      	ldmia	r4!, {r0, r1, r2}
    c85e:	c307      	stmia	r3!, {r0, r1, r2}
    c860:	cc06      	ldmia	r4!, {r1, r2}
    c862:	c306      	stmia	r3!, {r1, r2}
	
	dist_calst.dist_offset = temp_dist_offset;
    c864:	4b08      	ldr	r3, [pc, #32]	; (c888 <cal_dist_process+0x4c>)
    c866:	681a      	ldr	r2, [r3, #0]
    c868:	4b08      	ldr	r3, [pc, #32]	; (c88c <cal_dist_process+0x50>)
    c86a:	659a      	str	r2, [r3, #88]	; 0x58
}
    c86c:	bd10      	pop	{r4, pc}
    c86e:	46c0      	nop			; (mov r8, r8)
    c870:	0000772d 	.word	0x0000772d
    c874:	200010cc 	.word	0x200010cc
    c878:	0000784d 	.word	0x0000784d
    c87c:	00024e58 	.word	0x00024e58
    c880:	200037a4 	.word	0x200037a4
    c884:	2000213c 	.word	0x2000213c
    c888:	200042a8 	.word	0x200042a8
    c88c:	20004b48 	.word	0x20004b48

0000c890 <cal_add_datapoint>:
	}
		
	
}

void cal_add_datapoint(struct MEASUREMENT *meas_inst, bool last_shot){
    c890:	b5f0      	push	{r4, r5, r6, r7, lr}
    c892:	4645      	mov	r5, r8
    c894:	46de      	mov	lr, fp
    c896:	4657      	mov	r7, sl
    c898:	464e      	mov	r6, r9
    c89a:	b5e0      	push	{r5, r6, r7, lr}
	float aXYZ[3], cXYZ[3];
	uint8_t j, k;
	
	
	//  If this is the first point, initialize reference angles
	if ((ind_stack==0) && (ind_buf==0) && (buf_points == 0)){
    c89c:	4b9e      	ldr	r3, [pc, #632]	; (cb18 <cal_add_datapoint+0x288>)
void cal_add_datapoint(struct MEASUREMENT *meas_inst, bool last_shot){
    c89e:	b08f      	sub	sp, #60	; 0x3c
	if ((ind_stack==0) && (ind_buf==0) && (buf_points == 0)){
    c8a0:	781b      	ldrb	r3, [r3, #0]
void cal_add_datapoint(struct MEASUREMENT *meas_inst, bool last_shot){
    c8a2:	4680      	mov	r8, r0
    c8a4:	910d      	str	r1, [sp, #52]	; 0x34
	if ((ind_stack==0) && (ind_buf==0) && (buf_points == 0)){
    c8a6:	2b00      	cmp	r3, #0
    c8a8:	d100      	bne.n	c8ac <cal_add_datapoint+0x1c>
    c8aa:	e11d      	b.n	cae8 <cal_add_datapoint+0x258>
    c8ac:	4b9b      	ldr	r3, [pc, #620]	; (cb1c <cal_add_datapoint+0x28c>)
    c8ae:	9302      	str	r3, [sp, #8]
    c8b0:	4b9b      	ldr	r3, [pc, #620]	; (cb20 <cal_add_datapoint+0x290>)
    c8b2:	9303      	str	r3, [sp, #12]
    c8b4:	4b9b      	ldr	r3, [pc, #620]	; (cb24 <cal_add_datapoint+0x294>)
    c8b6:	930a      	str	r3, [sp, #40]	; 0x28
    c8b8:	681b      	ldr	r3, [r3, #0]
    c8ba:	9309      	str	r3, [sp, #36]	; 0x24
    c8bc:	4b9a      	ldr	r3, [pc, #616]	; (cb28 <cal_add_datapoint+0x298>)
    c8be:	930b      	str	r3, [sp, #44]	; 0x2c
    c8c0:	681b      	ldr	r3, [r3, #0]
    c8c2:	930c      	str	r3, [sp, #48]	; 0x30
	}

	
	//  Filter and sort into groups
	for (j=0;j<3;j++){
		aXYZ[j] = 0.5*(meas_inst->a1xyz[j]+meas_inst->a2xyz[j]);
    c8c4:	4643      	mov	r3, r8
    c8c6:	4d99      	ldr	r5, [pc, #612]	; (cb2c <cal_add_datapoint+0x29c>)
    c8c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    c8ca:	6a18      	ldr	r0, [r3, #32]
    c8cc:	47a8      	blx	r5
    c8ce:	21fc      	movs	r1, #252	; 0xfc
    c8d0:	4c97      	ldr	r4, [pc, #604]	; (cb30 <cal_add_datapoint+0x2a0>)
    c8d2:	0589      	lsls	r1, r1, #22
    c8d4:	47a0      	blx	r4
		cXYZ[j] = 0.5*(meas_inst->c1xyz[j]+meas_inst->c2xyz[j]);
    c8d6:	4643      	mov	r3, r8
		aXYZ[j] = 0.5*(meas_inst->a1xyz[j]+meas_inst->a2xyz[j]);
    c8d8:	9004      	str	r0, [sp, #16]
		cXYZ[j] = 0.5*(meas_inst->c1xyz[j]+meas_inst->c2xyz[j]);
    c8da:	6c59      	ldr	r1, [r3, #68]	; 0x44
    c8dc:	6b98      	ldr	r0, [r3, #56]	; 0x38
    c8de:	47a8      	blx	r5
    c8e0:	21fc      	movs	r1, #252	; 0xfc
    c8e2:	0589      	lsls	r1, r1, #22
    c8e4:	47a0      	blx	r4
    c8e6:	4643      	mov	r3, r8
    c8e8:	9006      	str	r0, [sp, #24]
    c8ea:	6c99      	ldr	r1, [r3, #72]	; 0x48
    c8ec:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    c8ee:	47a8      	blx	r5
    c8f0:	21fc      	movs	r1, #252	; 0xfc
    c8f2:	0589      	lsls	r1, r1, #22
    c8f4:	47a0      	blx	r4
    c8f6:	4643      	mov	r3, r8
    c8f8:	9007      	str	r0, [sp, #28]
    c8fa:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
    c8fc:	6c18      	ldr	r0, [r3, #64]	; 0x40
    c8fe:	47a8      	blx	r5
    c900:	21fc      	movs	r1, #252	; 0xfc
    c902:	0589      	lsls	r1, r1, #22
    c904:	47a0      	blx	r4
		aXYZ[j] = 0.5*(meas_inst->a1xyz[j]+meas_inst->a2xyz[j]);
    c906:	4643      	mov	r3, r8
		cXYZ[j] = 0.5*(meas_inst->c1xyz[j]+meas_inst->c2xyz[j]);
    c908:	9008      	str	r0, [sp, #32]
		aXYZ[j] = 0.5*(meas_inst->a1xyz[j]+meas_inst->a2xyz[j]);
    c90a:	6b19      	ldr	r1, [r3, #48]	; 0x30
    c90c:	6a58      	ldr	r0, [r3, #36]	; 0x24
    c90e:	47a8      	blx	r5
    c910:	21fc      	movs	r1, #252	; 0xfc
    c912:	0589      	lsls	r1, r1, #22
    c914:	47a0      	blx	r4
}


void calc_theta_XY(float XYZ[3], float *thetaX, float *thetaY){
	float ryz;
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
    c916:	4b87      	ldr	r3, [pc, #540]	; (cb34 <cal_add_datapoint+0x2a4>)
    c918:	4699      	mov	r9, r3
    c91a:	4798      	blx	r3
		aXYZ[j] = 0.5*(meas_inst->a1xyz[j]+meas_inst->a2xyz[j]);
    c91c:	4643      	mov	r3, r8
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
    c91e:	9000      	str	r0, [sp, #0]
    c920:	9101      	str	r1, [sp, #4]
		aXYZ[j] = 0.5*(meas_inst->a1xyz[j]+meas_inst->a2xyz[j]);
    c922:	6b59      	ldr	r1, [r3, #52]	; 0x34
    c924:	6a98      	ldr	r0, [r3, #40]	; 0x28
    c926:	47a8      	blx	r5
    c928:	21fc      	movs	r1, #252	; 0xfc
    c92a:	0589      	lsls	r1, r1, #22
    c92c:	47a0      	blx	r4
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
    c92e:	47c8      	blx	r9
    c930:	9c00      	ldr	r4, [sp, #0]
    c932:	9d01      	ldr	r5, [sp, #4]
    c934:	4b80      	ldr	r3, [pc, #512]	; (cb38 <cal_add_datapoint+0x2a8>)
    c936:	0006      	movs	r6, r0
    c938:	469a      	mov	sl, r3
    c93a:	000f      	movs	r7, r1
    c93c:	0022      	movs	r2, r4
    c93e:	002b      	movs	r3, r5
    c940:	0020      	movs	r0, r4
    c942:	0029      	movs	r1, r5
    c944:	47d0      	blx	sl
    c946:	0032      	movs	r2, r6
    c948:	0004      	movs	r4, r0
    c94a:	000d      	movs	r5, r1
    c94c:	003b      	movs	r3, r7
    c94e:	0030      	movs	r0, r6
    c950:	0039      	movs	r1, r7
    c952:	47d0      	blx	sl
    c954:	0002      	movs	r2, r0
    c956:	000b      	movs	r3, r1
    c958:	0020      	movs	r0, r4
    c95a:	0029      	movs	r1, r5
    c95c:	4d77      	ldr	r5, [pc, #476]	; (cb3c <cal_add_datapoint+0x2ac>)
    c95e:	47a8      	blx	r5
    c960:	4b77      	ldr	r3, [pc, #476]	; (cb40 <cal_add_datapoint+0x2b0>)
    c962:	4798      	blx	r3
	
	//*thetaX = rad2deg*atan2(XYZ[1], XYZ[2]) + 180;
	//*thetaY = rad2deg*atan2(XYZ[0], ryz);
	*thetaX = rad2deg*atan2(XYZ[1], XYZ[2]);
    c964:	0032      	movs	r2, r6
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
    c966:	0004      	movs	r4, r0
    c968:	000d      	movs	r5, r1
	*thetaX = rad2deg*atan2(XYZ[1], XYZ[2]);
    c96a:	9800      	ldr	r0, [sp, #0]
    c96c:	9901      	ldr	r1, [sp, #4]
    c96e:	003b      	movs	r3, r7
    c970:	4e74      	ldr	r6, [pc, #464]	; (cb44 <cal_add_datapoint+0x2b4>)
    c972:	47b0      	blx	r6
	*thetaY = -1*rad2deg*atan2(XYZ[0], ryz);
    c974:	2280      	movs	r2, #128	; 0x80
    c976:	0612      	lsls	r2, r2, #24
    c978:	4694      	mov	ip, r2
    c97a:	4b73      	ldr	r3, [pc, #460]	; (cb48 <cal_add_datapoint+0x2b8>)
    c97c:	469b      	mov	fp, r3
    c97e:	681b      	ldr	r3, [r3, #0]
    c980:	4463      	add	r3, ip
    c982:	0018      	movs	r0, r3
    c984:	47c8      	blx	r9
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
    c986:	4b71      	ldr	r3, [pc, #452]	; (cb4c <cal_add_datapoint+0x2bc>)
	*thetaY = -1*rad2deg*atan2(XYZ[0], ryz);
    c988:	0006      	movs	r6, r0
    c98a:	000f      	movs	r7, r1
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
    c98c:	0020      	movs	r0, r4
    c98e:	0029      	movs	r1, r5
    c990:	4798      	blx	r3
	*thetaY = -1*rad2deg*atan2(XYZ[0], ryz);
    c992:	47c8      	blx	r9
    c994:	0004      	movs	r4, r0
    c996:	000d      	movs	r5, r1
    c998:	9804      	ldr	r0, [sp, #16]
    c99a:	47c8      	blx	r9
    c99c:	0022      	movs	r2, r4
    c99e:	002b      	movs	r3, r5
    c9a0:	4c68      	ldr	r4, [pc, #416]	; (cb44 <cal_add_datapoint+0x2b4>)
    c9a2:	47a0      	blx	r4
    c9a4:	0002      	movs	r2, r0
    c9a6:	000b      	movs	r3, r1
    c9a8:	0030      	movs	r0, r6
    c9aa:	0039      	movs	r1, r7
    c9ac:	47d0      	blx	sl
    c9ae:	4b67      	ldr	r3, [pc, #412]	; (cb4c <cal_add_datapoint+0x2bc>)
    c9b0:	4798      	blx	r3
    c9b2:	9000      	str	r0, [sp, #0]
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
    c9b4:	9807      	ldr	r0, [sp, #28]
    c9b6:	47c8      	blx	r9
    c9b8:	0004      	movs	r4, r0
    c9ba:	9808      	ldr	r0, [sp, #32]
    c9bc:	000d      	movs	r5, r1
    c9be:	47c8      	blx	r9
    c9c0:	0022      	movs	r2, r4
    c9c2:	0006      	movs	r6, r0
    c9c4:	000f      	movs	r7, r1
    c9c6:	002b      	movs	r3, r5
    c9c8:	9404      	str	r4, [sp, #16]
    c9ca:	9505      	str	r5, [sp, #20]
    c9cc:	0020      	movs	r0, r4
    c9ce:	0029      	movs	r1, r5
    c9d0:	47d0      	blx	sl
    c9d2:	0032      	movs	r2, r6
    c9d4:	0004      	movs	r4, r0
    c9d6:	000d      	movs	r5, r1
    c9d8:	003b      	movs	r3, r7
    c9da:	0030      	movs	r0, r6
    c9dc:	0039      	movs	r1, r7
    c9de:	47d0      	blx	sl
    c9e0:	0002      	movs	r2, r0
    c9e2:	000b      	movs	r3, r1
    c9e4:	0020      	movs	r0, r4
    c9e6:	0029      	movs	r1, r5
    c9e8:	4d54      	ldr	r5, [pc, #336]	; (cb3c <cal_add_datapoint+0x2ac>)
    c9ea:	47a8      	blx	r5
    c9ec:	4b54      	ldr	r3, [pc, #336]	; (cb40 <cal_add_datapoint+0x2b0>)
    c9ee:	4798      	blx	r3
	*thetaX = rad2deg*atan2(XYZ[1], XYZ[2]);
    c9f0:	0032      	movs	r2, r6
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
    c9f2:	0004      	movs	r4, r0
    c9f4:	000d      	movs	r5, r1
	*thetaX = rad2deg*atan2(XYZ[1], XYZ[2]);
    c9f6:	9804      	ldr	r0, [sp, #16]
    c9f8:	9905      	ldr	r1, [sp, #20]
    c9fa:	003b      	movs	r3, r7
    c9fc:	4e51      	ldr	r6, [pc, #324]	; (cb44 <cal_add_datapoint+0x2b4>)
    c9fe:	47b0      	blx	r6
	*thetaY = -1*rad2deg*atan2(XYZ[0], ryz);
    ca00:	465b      	mov	r3, fp
    ca02:	6818      	ldr	r0, [r3, #0]
    ca04:	2380      	movs	r3, #128	; 0x80
    ca06:	061b      	lsls	r3, r3, #24
    ca08:	469c      	mov	ip, r3
    ca0a:	4460      	add	r0, ip
    ca0c:	47c8      	blx	r9
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
    ca0e:	4b4f      	ldr	r3, [pc, #316]	; (cb4c <cal_add_datapoint+0x2bc>)
	*thetaY = -1*rad2deg*atan2(XYZ[0], ryz);
    ca10:	0006      	movs	r6, r0
    ca12:	000f      	movs	r7, r1
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
    ca14:	0020      	movs	r0, r4
    ca16:	0029      	movs	r1, r5
    ca18:	4798      	blx	r3
	*thetaY = -1*rad2deg*atan2(XYZ[0], ryz);
    ca1a:	47c8      	blx	r9
    ca1c:	0004      	movs	r4, r0
    ca1e:	000d      	movs	r5, r1
    ca20:	9806      	ldr	r0, [sp, #24]
    ca22:	47c8      	blx	r9
    ca24:	0022      	movs	r2, r4
    ca26:	002b      	movs	r3, r5
    ca28:	4c46      	ldr	r4, [pc, #280]	; (cb44 <cal_add_datapoint+0x2b4>)
    ca2a:	47a0      	blx	r4
    ca2c:	0002      	movs	r2, r0
    ca2e:	000b      	movs	r3, r1
    ca30:	0030      	movs	r0, r6
    ca32:	0039      	movs	r1, r7
    ca34:	47d0      	blx	sl
    ca36:	4b45      	ldr	r3, [pc, #276]	; (cb4c <cal_add_datapoint+0x2bc>)
    ca38:	4798      	blx	r3
	aDelta = fabs(aX_ang - aX_ang_ref);
    ca3a:	9909      	ldr	r1, [sp, #36]	; 0x24
	*thetaY = -1*rad2deg*atan2(XYZ[0], ryz);
    ca3c:	9004      	str	r0, [sp, #16]
    ca3e:	1c06      	adds	r6, r0, #0
	aDelta = fabs(aX_ang - aX_ang_ref);
    ca40:	4c43      	ldr	r4, [pc, #268]	; (cb50 <cal_add_datapoint+0x2c0>)
    ca42:	9800      	ldr	r0, [sp, #0]
    ca44:	47a0      	blx	r4
    ca46:	0040      	lsls	r0, r0, #1
    ca48:	0840      	lsrs	r0, r0, #1
	if ((aDelta>delta_min)||(cDelta>delta_min)||last_shot){
    ca4a:	4d42      	ldr	r5, [pc, #264]	; (cb54 <cal_add_datapoint+0x2c4>)
    ca4c:	4942      	ldr	r1, [pc, #264]	; (cb58 <cal_add_datapoint+0x2c8>)
    ca4e:	47a8      	blx	r5
    ca50:	2800      	cmp	r0, #0
    ca52:	d109      	bne.n	ca68 <cal_add_datapoint+0x1d8>
	cDelta = fabs(cX_ang - cX_ang_ref);
    ca54:	990c      	ldr	r1, [sp, #48]	; 0x30
    ca56:	1c30      	adds	r0, r6, #0
    ca58:	47a0      	blx	r4
    ca5a:	0040      	lsls	r0, r0, #1
    ca5c:	0840      	lsrs	r0, r0, #1
	if ((aDelta>delta_min)||(cDelta>delta_min)||last_shot){
    ca5e:	493e      	ldr	r1, [pc, #248]	; (cb58 <cal_add_datapoint+0x2c8>)
    ca60:	47a8      	blx	r5
    ca62:	2800      	cmp	r0, #0
    ca64:	d100      	bne.n	ca68 <cal_add_datapoint+0x1d8>
    ca66:	e15d      	b.n	cd24 <cal_add_datapoint+0x494>
		if ((buf_points>= group_size)&&(ind_stack<(nbuf-buf_points))){//  Prevent buffer overflow
    ca68:	9b03      	ldr	r3, [sp, #12]
    ca6a:	781b      	ldrb	r3, [r3, #0]
    ca6c:	2b03      	cmp	r3, #3
    ca6e:	d900      	bls.n	ca72 <cal_add_datapoint+0x1e2>
    ca70:	e080      	b.n	cb74 <cal_add_datapoint+0x2e4>
    ca72:	483a      	ldr	r0, [pc, #232]	; (cb5c <cal_add_datapoint+0x2cc>)
    ca74:	4f3a      	ldr	r7, [pc, #232]	; (cb60 <cal_add_datapoint+0x2d0>)
    ca76:	4d3b      	ldr	r5, [pc, #236]	; (cb64 <cal_add_datapoint+0x2d4>)
    ca78:	4c3b      	ldr	r4, [pc, #236]	; (cb68 <cal_add_datapoint+0x2d8>)
		ind_buf = 0;
    ca7a:	2300      	movs	r3, #0
    ca7c:	9a02      	ldr	r2, [sp, #8]
    ca7e:	7013      	strb	r3, [r2, #0]
		aX_ang_ref = aX_ang;
    ca80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ca82:	9a00      	ldr	r2, [sp, #0]
    ca84:	601a      	str	r2, [r3, #0]
		cX_ang_ref = cX_ang;
    ca86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca88:	9a04      	ldr	r2, [sp, #16]
    ca8a:	601a      	str	r2, [r3, #0]
    ca8c:	2301      	movs	r3, #1
    ca8e:	4699      	mov	r9, r3
    ca90:	469a      	mov	sl, r3
    ca92:	2300      	movs	r3, #0
		a1buf[ind_buf][j] = meas_inst->a1xyz[j];
    ca94:	4641      	mov	r1, r8
    ca96:	005e      	lsls	r6, r3, #1
    ca98:	18f6      	adds	r6, r6, r3
    ca9a:	00b6      	lsls	r6, r6, #2
    ca9c:	4b33      	ldr	r3, [pc, #204]	; (cb6c <cal_add_datapoint+0x2dc>)
    ca9e:	3120      	adds	r1, #32
    caa0:	220c      	movs	r2, #12
    caa2:	1980      	adds	r0, r0, r6
    caa4:	469b      	mov	fp, r3
    caa6:	4798      	blx	r3
		a2buf[ind_buf][j] = meas_inst->a2xyz[j];
    caa8:	4641      	mov	r1, r8
    caaa:	220c      	movs	r2, #12
    caac:	312c      	adds	r1, #44	; 0x2c
    caae:	19b8      	adds	r0, r7, r6
    cab0:	47d8      	blx	fp
		c1buf[ind_buf][j] = meas_inst->c1xyz[j];
    cab2:	4641      	mov	r1, r8
    cab4:	220c      	movs	r2, #12
    cab6:	3138      	adds	r1, #56	; 0x38
    cab8:	19a8      	adds	r0, r5, r6
    caba:	47d8      	blx	fp
		c2buf[ind_buf][j] = meas_inst->c2xyz[j];
    cabc:	4641      	mov	r1, r8
    cabe:	220c      	movs	r2, #12
    cac0:	19a0      	adds	r0, r4, r6
    cac2:	3144      	adds	r1, #68	; 0x44
    cac4:	47d8      	blx	fp
	buf_points = buf_points+1;
    cac6:	4652      	mov	r2, sl
    cac8:	9b03      	ldr	r3, [sp, #12]
    caca:	701a      	strb	r2, [r3, #0]
	if (ind_buf>=group_size){
    cacc:	464b      	mov	r3, r9
    cace:	2b03      	cmp	r3, #3
    cad0:	d800      	bhi.n	cad4 <cal_add_datapoint+0x244>
    cad2:	e13a      	b.n	cd4a <cal_add_datapoint+0x4ba>
		ind_buf = 0;
    cad4:	2300      	movs	r3, #0
    cad6:	9a02      	ldr	r2, [sp, #8]
    cad8:	7013      	strb	r3, [r2, #0]
}
    cada:	b00f      	add	sp, #60	; 0x3c
    cadc:	bc3c      	pop	{r2, r3, r4, r5}
    cade:	4690      	mov	r8, r2
    cae0:	4699      	mov	r9, r3
    cae2:	46a2      	mov	sl, r4
    cae4:	46ab      	mov	fp, r5
    cae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((ind_stack==0) && (ind_buf==0) && (buf_points == 0)){
    cae8:	4b0c      	ldr	r3, [pc, #48]	; (cb1c <cal_add_datapoint+0x28c>)
    caea:	9302      	str	r3, [sp, #8]
    caec:	781b      	ldrb	r3, [r3, #0]
    caee:	2b00      	cmp	r3, #0
    caf0:	d000      	beq.n	caf4 <cal_add_datapoint+0x264>
    caf2:	e6dd      	b.n	c8b0 <cal_add_datapoint+0x20>
    caf4:	4b0a      	ldr	r3, [pc, #40]	; (cb20 <cal_add_datapoint+0x290>)
    caf6:	9303      	str	r3, [sp, #12]
    caf8:	781b      	ldrb	r3, [r3, #0]
    cafa:	2b00      	cmp	r3, #0
    cafc:	d000      	beq.n	cb00 <cal_add_datapoint+0x270>
    cafe:	e6d9      	b.n	c8b4 <cal_add_datapoint+0x24>
		aX_ang_ref = 200;//  Ensures delta will fail on first iteration
    cb00:	4b08      	ldr	r3, [pc, #32]	; (cb24 <cal_add_datapoint+0x294>)
    cb02:	001a      	movs	r2, r3
    cb04:	930a      	str	r3, [sp, #40]	; 0x28
    cb06:	4b1a      	ldr	r3, [pc, #104]	; (cb70 <cal_add_datapoint+0x2e0>)
    cb08:	6013      	str	r3, [r2, #0]
		cX_ang_ref = 200;//  Ensures delta will fail on first iteration
    cb0a:	4a07      	ldr	r2, [pc, #28]	; (cb28 <cal_add_datapoint+0x298>)
    cb0c:	930c      	str	r3, [sp, #48]	; 0x30
    cb0e:	920b      	str	r2, [sp, #44]	; 0x2c
    cb10:	6013      	str	r3, [r2, #0]
    cb12:	9309      	str	r3, [sp, #36]	; 0x24
    cb14:	e6d6      	b.n	c8c4 <cal_add_datapoint+0x34>
    cb16:	46c0      	nop			; (mov r8, r8)
    cb18:	20002284 	.word	0x20002284
    cb1c:	20003cbc 	.word	0x20003cbc
    cb20:	2000213c 	.word	0x2000213c
    cb24:	20000f0c 	.word	0x20000f0c
    cb28:	20000f70 	.word	0x20000f70
    cb2c:	0001c4a5 	.word	0x0001c4a5
    cb30:	0001cba9 	.word	0x0001cba9
    cb34:	0001eddd 	.word	0x0001eddd
    cb38:	0001e115 	.word	0x0001e115
    cb3c:	0001d28d 	.word	0x0001d28d
    cb40:	000199b5 	.word	0x000199b5
    cb44:	00019655 	.word	0x00019655
    cb48:	00024d14 	.word	0x00024d14
    cb4c:	0001ee81 	.word	0x0001ee81
    cb50:	0001cde9 	.word	0x0001cde9
    cb54:	0001c341 	.word	0x0001c341
    cb58:	41200000 	.word	0x41200000
    cb5c:	20000eac 	.word	0x20000eac
    cb60:	20000edc 	.word	0x20000edc
    cb64:	20000f10 	.word	0x20000f10
    cb68:	20000f40 	.word	0x20000f40
    cb6c:	0001efe9 	.word	0x0001efe9
    cb70:	43480000 	.word	0x43480000
		if ((buf_points>= group_size)&&(ind_stack<(nbuf-buf_points))){//  Prevent buffer overflow
    cb74:	4a77      	ldr	r2, [pc, #476]	; (cd54 <cal_add_datapoint+0x4c4>)
    cb76:	7812      	ldrb	r2, [r2, #0]
    cb78:	4691      	mov	r9, r2
    cb7a:	2250      	movs	r2, #80	; 0x50
    cb7c:	1ad3      	subs	r3, r2, r3
    cb7e:	4599      	cmp	r9, r3
    cb80:	db00      	blt.n	cb84 <cal_add_datapoint+0x2f4>
    cb82:	e776      	b.n	ca72 <cal_add_datapoint+0x1e2>
			n_groups = n_groups+1;
    cb84:	4a74      	ldr	r2, [pc, #464]	; (cd58 <cal_add_datapoint+0x4c8>)
					a1raw[ind_stack][j] = a1buf[k][j];
    cb86:	4875      	ldr	r0, [pc, #468]	; (cd5c <cal_add_datapoint+0x4cc>)
			n_groups = n_groups+1;
    cb88:	6813      	ldr	r3, [r2, #0]
					a2raw[ind_stack][j] = a2buf[k][j];
    cb8a:	4f75      	ldr	r7, [pc, #468]	; (cd60 <cal_add_datapoint+0x4d0>)
			n_groups = n_groups+1;
    cb8c:	3301      	adds	r3, #1
    cb8e:	6013      	str	r3, [r2, #0]
			n_points = n_points+group_size;
    cb90:	4a74      	ldr	r2, [pc, #464]	; (cd64 <cal_add_datapoint+0x4d4>)
					a1raw[ind_stack][j] = a1buf[k][j];
    cb92:	6801      	ldr	r1, [r0, #0]
			n_points = n_points+group_size;
    cb94:	6813      	ldr	r3, [r2, #0]
					c1raw[ind_stack][j] = c1buf[k][j];
    cb96:	4d74      	ldr	r5, [pc, #464]	; (cd68 <cal_add_datapoint+0x4d8>)
			n_points = n_points+group_size;
    cb98:	3304      	adds	r3, #4
    cb9a:	6013      	str	r3, [r2, #0]
					a1raw[ind_stack][j] = a1buf[k][j];
    cb9c:	464b      	mov	r3, r9
    cb9e:	005b      	lsls	r3, r3, #1
    cba0:	4a72      	ldr	r2, [pc, #456]	; (cd6c <cal_add_datapoint+0x4dc>)
    cba2:	444b      	add	r3, r9
    cba4:	009b      	lsls	r3, r3, #2
    cba6:	5099      	str	r1, [r3, r2]
					a2raw[ind_stack][j] = a2buf[k][j];
    cba8:	4a71      	ldr	r2, [pc, #452]	; (cd70 <cal_add_datapoint+0x4e0>)
    cbaa:	6839      	ldr	r1, [r7, #0]
					c2raw[ind_stack][j] = c2buf[k][j];
    cbac:	4c71      	ldr	r4, [pc, #452]	; (cd74 <cal_add_datapoint+0x4e4>)
					a2raw[ind_stack][j] = a2buf[k][j];
    cbae:	4692      	mov	sl, r2
    cbb0:	50d1      	str	r1, [r2, r3]
					c1raw[ind_stack][j] = c1buf[k][j];
    cbb2:	4a71      	ldr	r2, [pc, #452]	; (cd78 <cal_add_datapoint+0x4e8>)
    cbb4:	6829      	ldr	r1, [r5, #0]
    cbb6:	4693      	mov	fp, r2
    cbb8:	50d1      	str	r1, [r2, r3]
					c2raw[ind_stack][j] = c2buf[k][j];
    cbba:	4a70      	ldr	r2, [pc, #448]	; (cd7c <cal_add_datapoint+0x4ec>)
    cbbc:	6821      	ldr	r1, [r4, #0]
					c1raw[ind_stack][j] = c1buf[k][j];
    cbbe:	686e      	ldr	r6, [r5, #4]
					c2raw[ind_stack][j] = c2buf[k][j];
    cbc0:	50d1      	str	r1, [r2, r3]
					a1raw[ind_stack][j] = a1buf[k][j];
    cbc2:	4a6a      	ldr	r2, [pc, #424]	; (cd6c <cal_add_datapoint+0x4dc>)
    cbc4:	6841      	ldr	r1, [r0, #4]
    cbc6:	4694      	mov	ip, r2
    cbc8:	449c      	add	ip, r3
    cbca:	4662      	mov	r2, ip
    cbcc:	6051      	str	r1, [r2, #4]
    cbce:	9206      	str	r2, [sp, #24]
					a2raw[ind_stack][j] = a2buf[k][j];
    cbd0:	4652      	mov	r2, sl
    cbd2:	18d1      	adds	r1, r2, r3
    cbd4:	687a      	ldr	r2, [r7, #4]
    cbd6:	604a      	str	r2, [r1, #4]
					c1raw[ind_stack][j] = c1buf[k][j];
    cbd8:	465a      	mov	r2, fp
    cbda:	18d2      	adds	r2, r2, r3
    cbdc:	6056      	str	r6, [r2, #4]
					c2raw[ind_stack][j] = c2buf[k][j];
    cbde:	4e67      	ldr	r6, [pc, #412]	; (cd7c <cal_add_datapoint+0x4ec>)
    cbe0:	46b4      	mov	ip, r6
    cbe2:	449c      	add	ip, r3
    cbe4:	4663      	mov	r3, ip
    cbe6:	6866      	ldr	r6, [r4, #4]
    cbe8:	605e      	str	r6, [r3, #4]
					a1raw[ind_stack][j] = a1buf[k][j];
    cbea:	9e06      	ldr	r6, [sp, #24]
    cbec:	6883      	ldr	r3, [r0, #8]
    cbee:	60b3      	str	r3, [r6, #8]
					a2raw[ind_stack][j] = a2buf[k][j];
    cbf0:	68bb      	ldr	r3, [r7, #8]
					c1raw[ind_stack][j] = c1buf[k][j];
    cbf2:	692e      	ldr	r6, [r5, #16]
					a2raw[ind_stack][j] = a2buf[k][j];
    cbf4:	608b      	str	r3, [r1, #8]
					c1raw[ind_stack][j] = c1buf[k][j];
    cbf6:	68ab      	ldr	r3, [r5, #8]
					a1raw[ind_stack][j] = a1buf[k][j];
    cbf8:	68c1      	ldr	r1, [r0, #12]
					c1raw[ind_stack][j] = c1buf[k][j];
    cbfa:	6093      	str	r3, [r2, #8]
					c2raw[ind_stack][j] = c2buf[k][j];
    cbfc:	4662      	mov	r2, ip
    cbfe:	68a3      	ldr	r3, [r4, #8]
    cc00:	6093      	str	r3, [r2, #8]
				ind_stack = ind_stack+1;
    cc02:	464b      	mov	r3, r9
    cc04:	3301      	adds	r3, #1
					a1raw[ind_stack][j] = a1buf[k][j];
    cc06:	b2db      	uxtb	r3, r3
    cc08:	005a      	lsls	r2, r3, #1
    cc0a:	18d3      	adds	r3, r2, r3
    cc0c:	4a57      	ldr	r2, [pc, #348]	; (cd6c <cal_add_datapoint+0x4dc>)
    cc0e:	009b      	lsls	r3, r3, #2
    cc10:	5099      	str	r1, [r3, r2]
					a2raw[ind_stack][j] = a2buf[k][j];
    cc12:	4652      	mov	r2, sl
    cc14:	68f9      	ldr	r1, [r7, #12]
    cc16:	50d1      	str	r1, [r2, r3]
					c1raw[ind_stack][j] = c1buf[k][j];
    cc18:	465a      	mov	r2, fp
    cc1a:	68e9      	ldr	r1, [r5, #12]
    cc1c:	50d1      	str	r1, [r2, r3]
					c2raw[ind_stack][j] = c2buf[k][j];
    cc1e:	4a57      	ldr	r2, [pc, #348]	; (cd7c <cal_add_datapoint+0x4ec>)
    cc20:	68e1      	ldr	r1, [r4, #12]
    cc22:	50d1      	str	r1, [r2, r3]
					a1raw[ind_stack][j] = a1buf[k][j];
    cc24:	4a51      	ldr	r2, [pc, #324]	; (cd6c <cal_add_datapoint+0x4dc>)
    cc26:	6901      	ldr	r1, [r0, #16]
    cc28:	4694      	mov	ip, r2
    cc2a:	449c      	add	ip, r3
    cc2c:	4662      	mov	r2, ip
    cc2e:	6051      	str	r1, [r2, #4]
    cc30:	9206      	str	r2, [sp, #24]
					a2raw[ind_stack][j] = a2buf[k][j];
    cc32:	4652      	mov	r2, sl
    cc34:	18d1      	adds	r1, r2, r3
    cc36:	693a      	ldr	r2, [r7, #16]
    cc38:	604a      	str	r2, [r1, #4]
					c1raw[ind_stack][j] = c1buf[k][j];
    cc3a:	465a      	mov	r2, fp
    cc3c:	18d2      	adds	r2, r2, r3
    cc3e:	6056      	str	r6, [r2, #4]
					c2raw[ind_stack][j] = c2buf[k][j];
    cc40:	4e4e      	ldr	r6, [pc, #312]	; (cd7c <cal_add_datapoint+0x4ec>)
    cc42:	46b4      	mov	ip, r6
    cc44:	449c      	add	ip, r3
    cc46:	4663      	mov	r3, ip
    cc48:	6926      	ldr	r6, [r4, #16]
    cc4a:	605e      	str	r6, [r3, #4]
					a1raw[ind_stack][j] = a1buf[k][j];
    cc4c:	9e06      	ldr	r6, [sp, #24]
    cc4e:	6943      	ldr	r3, [r0, #20]
    cc50:	60b3      	str	r3, [r6, #8]
					a2raw[ind_stack][j] = a2buf[k][j];
    cc52:	697b      	ldr	r3, [r7, #20]
					c1raw[ind_stack][j] = c1buf[k][j];
    cc54:	69ee      	ldr	r6, [r5, #28]
					a2raw[ind_stack][j] = a2buf[k][j];
    cc56:	608b      	str	r3, [r1, #8]
					c1raw[ind_stack][j] = c1buf[k][j];
    cc58:	696b      	ldr	r3, [r5, #20]
					a1raw[ind_stack][j] = a1buf[k][j];
    cc5a:	6981      	ldr	r1, [r0, #24]
					c1raw[ind_stack][j] = c1buf[k][j];
    cc5c:	6093      	str	r3, [r2, #8]
					c2raw[ind_stack][j] = c2buf[k][j];
    cc5e:	4662      	mov	r2, ip
    cc60:	6963      	ldr	r3, [r4, #20]
    cc62:	6093      	str	r3, [r2, #8]
				ind_stack = ind_stack+1;
    cc64:	464b      	mov	r3, r9
    cc66:	3302      	adds	r3, #2
					a1raw[ind_stack][j] = a1buf[k][j];
    cc68:	b2db      	uxtb	r3, r3
    cc6a:	005a      	lsls	r2, r3, #1
    cc6c:	18d3      	adds	r3, r2, r3
    cc6e:	4a3f      	ldr	r2, [pc, #252]	; (cd6c <cal_add_datapoint+0x4dc>)
    cc70:	009b      	lsls	r3, r3, #2
    cc72:	5099      	str	r1, [r3, r2]
					a2raw[ind_stack][j] = a2buf[k][j];
    cc74:	4652      	mov	r2, sl
    cc76:	69b9      	ldr	r1, [r7, #24]
    cc78:	50d1      	str	r1, [r2, r3]
					c1raw[ind_stack][j] = c1buf[k][j];
    cc7a:	465a      	mov	r2, fp
    cc7c:	69a9      	ldr	r1, [r5, #24]
    cc7e:	50d1      	str	r1, [r2, r3]
					c2raw[ind_stack][j] = c2buf[k][j];
    cc80:	4a3e      	ldr	r2, [pc, #248]	; (cd7c <cal_add_datapoint+0x4ec>)
    cc82:	69a1      	ldr	r1, [r4, #24]
    cc84:	50d1      	str	r1, [r2, r3]
					a1raw[ind_stack][j] = a1buf[k][j];
    cc86:	4a39      	ldr	r2, [pc, #228]	; (cd6c <cal_add_datapoint+0x4dc>)
    cc88:	69c1      	ldr	r1, [r0, #28]
    cc8a:	4694      	mov	ip, r2
    cc8c:	449c      	add	ip, r3
    cc8e:	4662      	mov	r2, ip
    cc90:	6051      	str	r1, [r2, #4]
    cc92:	9206      	str	r2, [sp, #24]
					a2raw[ind_stack][j] = a2buf[k][j];
    cc94:	4652      	mov	r2, sl
    cc96:	18d1      	adds	r1, r2, r3
    cc98:	69fa      	ldr	r2, [r7, #28]
    cc9a:	604a      	str	r2, [r1, #4]
					c1raw[ind_stack][j] = c1buf[k][j];
    cc9c:	465a      	mov	r2, fp
    cc9e:	18d2      	adds	r2, r2, r3
    cca0:	6056      	str	r6, [r2, #4]
					c2raw[ind_stack][j] = c2buf[k][j];
    cca2:	4e36      	ldr	r6, [pc, #216]	; (cd7c <cal_add_datapoint+0x4ec>)
    cca4:	46b4      	mov	ip, r6
    cca6:	449c      	add	ip, r3
    cca8:	4663      	mov	r3, ip
    ccaa:	69e6      	ldr	r6, [r4, #28]
    ccac:	605e      	str	r6, [r3, #4]
					a1raw[ind_stack][j] = a1buf[k][j];
    ccae:	9e06      	ldr	r6, [sp, #24]
    ccb0:	6a03      	ldr	r3, [r0, #32]
    ccb2:	60b3      	str	r3, [r6, #8]
					a2raw[ind_stack][j] = a2buf[k][j];
    ccb4:	6a3b      	ldr	r3, [r7, #32]
    ccb6:	608b      	str	r3, [r1, #8]
					c1raw[ind_stack][j] = c1buf[k][j];
    ccb8:	6a2b      	ldr	r3, [r5, #32]
					a1raw[ind_stack][j] = a1buf[k][j];
    ccba:	6a41      	ldr	r1, [r0, #36]	; 0x24
					c1raw[ind_stack][j] = c1buf[k][j];
    ccbc:	6093      	str	r3, [r2, #8]
					c2raw[ind_stack][j] = c2buf[k][j];
    ccbe:	4662      	mov	r2, ip
    ccc0:	6a23      	ldr	r3, [r4, #32]
					a2raw[ind_stack][j] = a2buf[k][j];
    ccc2:	6abe      	ldr	r6, [r7, #40]	; 0x28
					c2raw[ind_stack][j] = c2buf[k][j];
    ccc4:	6093      	str	r3, [r2, #8]
				ind_stack = ind_stack+1;
    ccc6:	464b      	mov	r3, r9
    ccc8:	1cda      	adds	r2, r3, #3
					a1raw[ind_stack][j] = a1buf[k][j];
    ccca:	b2d2      	uxtb	r2, r2
    cccc:	0053      	lsls	r3, r2, #1
    ccce:	189b      	adds	r3, r3, r2
    ccd0:	4a26      	ldr	r2, [pc, #152]	; (cd6c <cal_add_datapoint+0x4dc>)
    ccd2:	009b      	lsls	r3, r3, #2
    ccd4:	5099      	str	r1, [r3, r2]
					a2raw[ind_stack][j] = a2buf[k][j];
    ccd6:	4652      	mov	r2, sl
    ccd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
    ccda:	449a      	add	sl, r3
    ccdc:	50d1      	str	r1, [r2, r3]
					c1raw[ind_stack][j] = c1buf[k][j];
    ccde:	465a      	mov	r2, fp
    cce0:	6a69      	ldr	r1, [r5, #36]	; 0x24
    cce2:	449b      	add	fp, r3
    cce4:	50d1      	str	r1, [r2, r3]
					c2raw[ind_stack][j] = c2buf[k][j];
    cce6:	4a25      	ldr	r2, [pc, #148]	; (cd7c <cal_add_datapoint+0x4ec>)
    cce8:	6a61      	ldr	r1, [r4, #36]	; 0x24
    ccea:	50d1      	str	r1, [r2, r3]
					a1raw[ind_stack][j] = a1buf[k][j];
    ccec:	4a1f      	ldr	r2, [pc, #124]	; (cd6c <cal_add_datapoint+0x4dc>)
    ccee:	18d1      	adds	r1, r2, r3
    ccf0:	6a82      	ldr	r2, [r0, #40]	; 0x28
    ccf2:	604a      	str	r2, [r1, #4]
					a2raw[ind_stack][j] = a2buf[k][j];
    ccf4:	4652      	mov	r2, sl
    ccf6:	6056      	str	r6, [r2, #4]
					c1raw[ind_stack][j] = c1buf[k][j];
    ccf8:	465e      	mov	r6, fp
    ccfa:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    ccfc:	6072      	str	r2, [r6, #4]
					c2raw[ind_stack][j] = c2buf[k][j];
    ccfe:	4a1f      	ldr	r2, [pc, #124]	; (cd7c <cal_add_datapoint+0x4ec>)
    cd00:	4694      	mov	ip, r2
    cd02:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    cd04:	4463      	add	r3, ip
    cd06:	605a      	str	r2, [r3, #4]
					a1raw[ind_stack][j] = a1buf[k][j];
    cd08:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    cd0a:	608a      	str	r2, [r1, #8]
					a2raw[ind_stack][j] = a2buf[k][j];
    cd0c:	4651      	mov	r1, sl
    cd0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    cd10:	608a      	str	r2, [r1, #8]
					c2raw[ind_stack][j] = c2buf[k][j];
    cd12:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
					c1raw[ind_stack][j] = c1buf[k][j];
    cd14:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
					c2raw[ind_stack][j] = c2buf[k][j];
    cd16:	609a      	str	r2, [r3, #8]
    cd18:	464b      	mov	r3, r9
					c1raw[ind_stack][j] = c1buf[k][j];
    cd1a:	60b1      	str	r1, [r6, #8]
    cd1c:	4a0d      	ldr	r2, [pc, #52]	; (cd54 <cal_add_datapoint+0x4c4>)
    cd1e:	3304      	adds	r3, #4
    cd20:	7013      	strb	r3, [r2, #0]
    cd22:	e6aa      	b.n	ca7a <cal_add_datapoint+0x1ea>
	if ((aDelta>delta_min)||(cDelta>delta_min)||last_shot){
    cd24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cd26:	2b00      	cmp	r3, #0
    cd28:	d000      	beq.n	cd2c <cal_add_datapoint+0x49c>
    cd2a:	e69d      	b.n	ca68 <cal_add_datapoint+0x1d8>
    cd2c:	9a03      	ldr	r2, [sp, #12]
    cd2e:	9b02      	ldr	r3, [sp, #8]
    cd30:	7812      	ldrb	r2, [r2, #0]
    cd32:	781b      	ldrb	r3, [r3, #0]
    cd34:	3201      	adds	r2, #1
    cd36:	b2d2      	uxtb	r2, r2
    cd38:	4692      	mov	sl, r2
    cd3a:	1c5a      	adds	r2, r3, #1
    cd3c:	b2d2      	uxtb	r2, r2
    cd3e:	4691      	mov	r9, r2
    cd40:	4806      	ldr	r0, [pc, #24]	; (cd5c <cal_add_datapoint+0x4cc>)
    cd42:	4f07      	ldr	r7, [pc, #28]	; (cd60 <cal_add_datapoint+0x4d0>)
    cd44:	4d08      	ldr	r5, [pc, #32]	; (cd68 <cal_add_datapoint+0x4d8>)
    cd46:	4c0b      	ldr	r4, [pc, #44]	; (cd74 <cal_add_datapoint+0x4e4>)
    cd48:	e6a4      	b.n	ca94 <cal_add_datapoint+0x204>
	ind_buf = ind_buf+1;
    cd4a:	464a      	mov	r2, r9
    cd4c:	9b02      	ldr	r3, [sp, #8]
    cd4e:	701a      	strb	r2, [r3, #0]
    cd50:	e6c3      	b.n	cada <cal_add_datapoint+0x24a>
    cd52:	46c0      	nop			; (mov r8, r8)
    cd54:	20002284 	.word	0x20002284
    cd58:	20002140 	.word	0x20002140
    cd5c:	20000eac 	.word	0x20000eac
    cd60:	20000edc 	.word	0x20000edc
    cd64:	20003054 	.word	0x20003054
    cd68:	20000f10 	.word	0x20000f10
    cd6c:	20005254 	.word	0x20005254
    cd70:	20004410 	.word	0x20004410
    cd74:	20000f40 	.word	0x20000f40
    cd78:	2000228c 	.word	0x2000228c
    cd7c:	200026b0 	.word	0x200026b0

0000cd80 <rotvec_theta_XY>:
void rotvec_theta_XY(float XYZ[3], float rotXYZ[3], float thetaX, float thetaY){
    cd80:	b5f0      	push	{r4, r5, r6, r7, lr}
    cd82:	46de      	mov	lr, fp
    cd84:	4657      	mov	r7, sl
    cd86:	464e      	mov	r6, r9
    cd88:	4645      	mov	r5, r8
    cd8a:	b5e0      	push	{r5, r6, r7, lr}
    cd8c:	b087      	sub	sp, #28
    cd8e:	9305      	str	r3, [sp, #20]
	rthetaX = thetaX*deg2rad;
    cd90:	4b50      	ldr	r3, [pc, #320]	; (ced4 <rotvec_theta_XY+0x154>)
void rotvec_theta_XY(float XYZ[3], float rotXYZ[3], float thetaX, float thetaY){
    cd92:	0004      	movs	r4, r0
	rthetaX = thetaX*deg2rad;
    cd94:	6818      	ldr	r0, [r3, #0]
    cd96:	4d50      	ldr	r5, [pc, #320]	; (ced8 <rotvec_theta_XY+0x158>)
void rotvec_theta_XY(float XYZ[3], float rotXYZ[3], float thetaX, float thetaY){
    cd98:	468a      	mov	sl, r1
	rthetaX = thetaX*deg2rad;
    cd9a:	9004      	str	r0, [sp, #16]
    cd9c:	1c11      	adds	r1, r2, #0
    cd9e:	47a8      	blx	r5
	rotM[1][1] = cos(rthetaX);
    cda0:	4a4e      	ldr	r2, [pc, #312]	; (cedc <rotvec_theta_XY+0x15c>)
    cda2:	4790      	blx	r2
    cda4:	4a4e      	ldr	r2, [pc, #312]	; (cee0 <rotvec_theta_XY+0x160>)
    cda6:	0006      	movs	r6, r0
    cda8:	000f      	movs	r7, r1
    cdaa:	4790      	blx	r2
    cdac:	4a4d      	ldr	r2, [pc, #308]	; (cee4 <rotvec_theta_XY+0x164>)
    cdae:	4693      	mov	fp, r2
    cdb0:	4790      	blx	r2
	rotM[1][2] = -1*sin(rthetaX);
    cdb2:	4a4d      	ldr	r2, [pc, #308]	; (cee8 <rotvec_theta_XY+0x168>)
	rotM[1][1] = cos(rthetaX);
    cdb4:	9001      	str	r0, [sp, #4]
	rotM[1][2] = -1*sin(rthetaX);
    cdb6:	0039      	movs	r1, r7
    cdb8:	0030      	movs	r0, r6
    cdba:	4790      	blx	r2
    cdbc:	47d8      	blx	fp
    cdbe:	6866      	ldr	r6, [r4, #4]
    cdc0:	68a2      	ldr	r2, [r4, #8]
    cdc2:	9002      	str	r0, [sp, #8]
			temp[i] = temp[i]+mat33[i][j]*mat3[j];
    cdc4:	2100      	movs	r1, #0
    cdc6:	1c30      	adds	r0, r6, #0
    cdc8:	4690      	mov	r8, r2
    cdca:	47a8      	blx	r5
    cdcc:	6827      	ldr	r7, [r4, #0]
    cdce:	4681      	mov	r9, r0
    cdd0:	4c46      	ldr	r4, [pc, #280]	; (ceec <rotvec_theta_XY+0x16c>)
    cdd2:	2100      	movs	r1, #0
    cdd4:	1c38      	adds	r0, r7, #0
    cdd6:	47a0      	blx	r4
    cdd8:	1c01      	adds	r1, r0, #0
    cdda:	4648      	mov	r0, r9
    cddc:	47a0      	blx	r4
    cdde:	2100      	movs	r1, #0
    cde0:	4681      	mov	r9, r0
    cde2:	4640      	mov	r0, r8
    cde4:	47a8      	blx	r5
    cde6:	1c01      	adds	r1, r0, #0
    cde8:	4648      	mov	r0, r9
    cdea:	47a0      	blx	r4
    cdec:	2100      	movs	r1, #0
    cdee:	9000      	str	r0, [sp, #0]
    cdf0:	1c38      	adds	r0, r7, #0
    cdf2:	47a8      	blx	r5
    cdf4:	2100      	movs	r1, #0
    cdf6:	47a0      	blx	r4
	rotM[1][2] = -1*sin(rthetaX);
    cdf8:	2380      	movs	r3, #128	; 0x80
    cdfa:	061b      	lsls	r3, r3, #24
    cdfc:	469c      	mov	ip, r3
    cdfe:	9a02      	ldr	r2, [sp, #8]
			temp[i] = temp[i]+mat33[i][j]*mat3[j];
    ce00:	1c07      	adds	r7, r0, #0
	rotM[1][2] = -1*sin(rthetaX);
    ce02:	4462      	add	r2, ip
    ce04:	0010      	movs	r0, r2
			temp[i] = temp[i]+mat33[i][j]*mat3[j];
    ce06:	4641      	mov	r1, r8
    ce08:	47a8      	blx	r5
    ce0a:	1c31      	adds	r1, r6, #0
    ce0c:	4681      	mov	r9, r0
    ce0e:	9801      	ldr	r0, [sp, #4]
    ce10:	47a8      	blx	r5
    ce12:	1c39      	adds	r1, r7, #0
    ce14:	47a0      	blx	r4
    ce16:	1c01      	adds	r1, r0, #0
    ce18:	4648      	mov	r0, r9
    ce1a:	47a0      	blx	r4
    ce1c:	1c31      	adds	r1, r6, #0
    ce1e:	9003      	str	r0, [sp, #12]
    ce20:	9802      	ldr	r0, [sp, #8]
    ce22:	47a8      	blx	r5
    ce24:	1c39      	adds	r1, r7, #0
    ce26:	47a0      	blx	r4
    ce28:	4641      	mov	r1, r8
    ce2a:	1c06      	adds	r6, r0, #0
    ce2c:	9801      	ldr	r0, [sp, #4]
    ce2e:	47a8      	blx	r5
    ce30:	1c01      	adds	r1, r0, #0
    ce32:	1c30      	adds	r0, r6, #0
    ce34:	47a0      	blx	r4
	rthetaY = thetaY*deg2rad;
    ce36:	9905      	ldr	r1, [sp, #20]
			temp[i] = temp[i]+mat33[i][j]*mat3[j];
    ce38:	4680      	mov	r8, r0
	rthetaY = thetaY*deg2rad;
    ce3a:	9804      	ldr	r0, [sp, #16]
    ce3c:	47a8      	blx	r5
	rotM[0][0] = cos(rthetaY);
    ce3e:	4b27      	ldr	r3, [pc, #156]	; (cedc <rotvec_theta_XY+0x15c>)
    ce40:	4798      	blx	r3
    ce42:	4b27      	ldr	r3, [pc, #156]	; (cee0 <rotvec_theta_XY+0x160>)
    ce44:	0006      	movs	r6, r0
    ce46:	000f      	movs	r7, r1
    ce48:	4798      	blx	r3
    ce4a:	47d8      	blx	fp
	rotM[0][2] = sin(rthetaY);
    ce4c:	4b26      	ldr	r3, [pc, #152]	; (cee8 <rotvec_theta_XY+0x168>)
	rotM[0][0] = cos(rthetaY);
    ce4e:	4681      	mov	r9, r0
	rotM[0][2] = sin(rthetaY);
    ce50:	0039      	movs	r1, r7
    ce52:	0030      	movs	r0, r6
    ce54:	4798      	blx	r3
    ce56:	47d8      	blx	fp
			temp[i] = temp[i]+mat33[i][j]*mat3[j];
    ce58:	2100      	movs	r1, #0
	rotM[0][2] = sin(rthetaY);
    ce5a:	1c06      	adds	r6, r0, #0
			temp[i] = temp[i]+mat33[i][j]*mat3[j];
    ce5c:	9803      	ldr	r0, [sp, #12]
    ce5e:	47a8      	blx	r5
    ce60:	9900      	ldr	r1, [sp, #0]
    ce62:	1c07      	adds	r7, r0, #0
    ce64:	4648      	mov	r0, r9
    ce66:	47a8      	blx	r5
    ce68:	2100      	movs	r1, #0
    ce6a:	47a0      	blx	r4
    ce6c:	1c39      	adds	r1, r7, #0
    ce6e:	47a0      	blx	r4
    ce70:	4641      	mov	r1, r8
    ce72:	4683      	mov	fp, r0
    ce74:	1c30      	adds	r0, r6, #0
    ce76:	47a8      	blx	r5
    ce78:	1c01      	adds	r1, r0, #0
    ce7a:	4658      	mov	r0, fp
    ce7c:	47a0      	blx	r4
		ret3[i] = temp[i];
    ce7e:	4653      	mov	r3, sl
			temp[i] = temp[i]+mat33[i][j]*mat3[j];
    ce80:	2100      	movs	r1, #0
		ret3[i] = temp[i];
    ce82:	6018      	str	r0, [r3, #0]
			temp[i] = temp[i]+mat33[i][j]*mat3[j];
    ce84:	9800      	ldr	r0, [sp, #0]
    ce86:	47a8      	blx	r5
    ce88:	2100      	movs	r1, #0
    ce8a:	47a0      	blx	r4
    ce8c:	9903      	ldr	r1, [sp, #12]
    ce8e:	47a0      	blx	r4
    ce90:	2100      	movs	r1, #0
    ce92:	4683      	mov	fp, r0
    ce94:	4640      	mov	r0, r8
    ce96:	47a8      	blx	r5
    ce98:	1c01      	adds	r1, r0, #0
    ce9a:	4658      	mov	r0, fp
    ce9c:	47a0      	blx	r4
		ret3[i] = temp[i];
    ce9e:	4653      	mov	r3, sl
    cea0:	6058      	str	r0, [r3, #4]
	rotM[2][0] = -1*sin(rthetaY);
    cea2:	2380      	movs	r3, #128	; 0x80
    cea4:	061b      	lsls	r3, r3, #24
    cea6:	18f0      	adds	r0, r6, r3
			temp[i] = temp[i]+mat33[i][j]*mat3[j];
    cea8:	9900      	ldr	r1, [sp, #0]
    ceaa:	47a8      	blx	r5
    ceac:	2100      	movs	r1, #0
    ceae:	47a0      	blx	r4
    ceb0:	1c39      	adds	r1, r7, #0
    ceb2:	47a0      	blx	r4
    ceb4:	4641      	mov	r1, r8
    ceb6:	1c06      	adds	r6, r0, #0
    ceb8:	4648      	mov	r0, r9
    ceba:	47a8      	blx	r5
    cebc:	1c01      	adds	r1, r0, #0
    cebe:	1c30      	adds	r0, r6, #0
    cec0:	47a0      	blx	r4
		ret3[i] = temp[i];
    cec2:	4653      	mov	r3, sl
    cec4:	6098      	str	r0, [r3, #8]
}
    cec6:	b007      	add	sp, #28
    cec8:	bc3c      	pop	{r2, r3, r4, r5}
    ceca:	4690      	mov	r8, r2
    cecc:	4699      	mov	r9, r3
    cece:	46a2      	mov	sl, r4
    ced0:	46ab      	mov	fp, r5
    ced2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ced4:	00024504 	.word	0x00024504
    ced8:	0001cba9 	.word	0x0001cba9
    cedc:	0001eddd 	.word	0x0001eddd
    cee0:	00019539 	.word	0x00019539
    cee4:	0001ee81 	.word	0x0001ee81
    cee8:	000195c5 	.word	0x000195c5
    ceec:	0001c4a5 	.word	0x0001c4a5

0000cef0 <calc_orientation>:
void calc_orientation(struct MEASUREMENT *meas_inst){
    cef0:	b5f0      	push	{r4, r5, r6, r7, lr}
    cef2:	46de      	mov	lr, fp
    cef4:	4657      	mov	r7, sl
    cef6:	464e      	mov	r6, r9
    cef8:	4645      	mov	r5, r8
    cefa:	b5e0      	push	{r5, r6, r7, lr}
    cefc:	4680      	mov	r8, r0
    cefe:	b08d      	sub	sp, #52	; 0x34
		aXYZ[i] = 0.5*(meas_inst->a1xyz[i]+meas_inst->a2xyz[i]);
    cf00:	6a01      	ldr	r1, [r0, #32]
    cf02:	4b84      	ldr	r3, [pc, #528]	; (d114 <calc_orientation+0x224>)
    cf04:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    cf06:	4798      	blx	r3
    cf08:	21fc      	movs	r1, #252	; 0xfc
    cf0a:	4c83      	ldr	r4, [pc, #524]	; (d118 <calc_orientation+0x228>)
    cf0c:	0589      	lsls	r1, r1, #22
    cf0e:	47a0      	blx	r4
		cXYZ[i] = 0.5*(meas_inst->c1xyz[i]+meas_inst->c2xyz[i]);
    cf10:	4643      	mov	r3, r8
		aXYZ[i] = 0.5*(meas_inst->a1xyz[i]+meas_inst->a2xyz[i]);
    cf12:	9005      	str	r0, [sp, #20]
		cXYZ[i] = 0.5*(meas_inst->c1xyz[i]+meas_inst->c2xyz[i]);
    cf14:	6b99      	ldr	r1, [r3, #56]	; 0x38
    cf16:	6c58      	ldr	r0, [r3, #68]	; 0x44
    cf18:	4b7e      	ldr	r3, [pc, #504]	; (d114 <calc_orientation+0x224>)
    cf1a:	4798      	blx	r3
    cf1c:	21fc      	movs	r1, #252	; 0xfc
    cf1e:	0589      	lsls	r1, r1, #22
    cf20:	47a0      	blx	r4
		aXYZ[i] = 0.5*(meas_inst->a1xyz[i]+meas_inst->a2xyz[i]);
    cf22:	4643      	mov	r3, r8
		cXYZ[i] = 0.5*(meas_inst->c1xyz[i]+meas_inst->c2xyz[i]);
    cf24:	9006      	str	r0, [sp, #24]
		aXYZ[i] = 0.5*(meas_inst->a1xyz[i]+meas_inst->a2xyz[i]);
    cf26:	6b19      	ldr	r1, [r3, #48]	; 0x30
    cf28:	6a58      	ldr	r0, [r3, #36]	; 0x24
    cf2a:	4b7a      	ldr	r3, [pc, #488]	; (d114 <calc_orientation+0x224>)
    cf2c:	4798      	blx	r3
    cf2e:	21fc      	movs	r1, #252	; 0xfc
    cf30:	0589      	lsls	r1, r1, #22
    cf32:	47a0      	blx	r4
		cXYZ[i] = 0.5*(meas_inst->c1xyz[i]+meas_inst->c2xyz[i]);
    cf34:	4643      	mov	r3, r8
		aXYZ[i] = 0.5*(meas_inst->a1xyz[i]+meas_inst->a2xyz[i]);
    cf36:	1c06      	adds	r6, r0, #0
		cXYZ[i] = 0.5*(meas_inst->c1xyz[i]+meas_inst->c2xyz[i]);
    cf38:	6c99      	ldr	r1, [r3, #72]	; 0x48
    cf3a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    cf3c:	4b75      	ldr	r3, [pc, #468]	; (d114 <calc_orientation+0x224>)
    cf3e:	4798      	blx	r3
    cf40:	21fc      	movs	r1, #252	; 0xfc
    cf42:	0589      	lsls	r1, r1, #22
    cf44:	47a0      	blx	r4
		aXYZ[i] = 0.5*(meas_inst->a1xyz[i]+meas_inst->a2xyz[i]);
    cf46:	4643      	mov	r3, r8
		cXYZ[i] = 0.5*(meas_inst->c1xyz[i]+meas_inst->c2xyz[i]);
    cf48:	9007      	str	r0, [sp, #28]
		aXYZ[i] = 0.5*(meas_inst->a1xyz[i]+meas_inst->a2xyz[i]);
    cf4a:	6b59      	ldr	r1, [r3, #52]	; 0x34
    cf4c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    cf4e:	4b71      	ldr	r3, [pc, #452]	; (d114 <calc_orientation+0x224>)
    cf50:	4798      	blx	r3
    cf52:	21fc      	movs	r1, #252	; 0xfc
    cf54:	0589      	lsls	r1, r1, #22
    cf56:	47a0      	blx	r4
		cXYZ[i] = 0.5*(meas_inst->c1xyz[i]+meas_inst->c2xyz[i]);
    cf58:	4643      	mov	r3, r8
		aXYZ[i] = 0.5*(meas_inst->a1xyz[i]+meas_inst->a2xyz[i]);
    cf5a:	1c05      	adds	r5, r0, #0
		cXYZ[i] = 0.5*(meas_inst->c1xyz[i]+meas_inst->c2xyz[i]);
    cf5c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
    cf5e:	6c18      	ldr	r0, [r3, #64]	; 0x40
    cf60:	4b6c      	ldr	r3, [pc, #432]	; (d114 <calc_orientation+0x224>)
    cf62:	4798      	blx	r3
    cf64:	21fc      	movs	r1, #252	; 0xfc
    cf66:	0589      	lsls	r1, r1, #22
    cf68:	47a0      	blx	r4
    cf6a:	9008      	str	r0, [sp, #32]
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
    cf6c:	4b6b      	ldr	r3, [pc, #428]	; (d11c <calc_orientation+0x22c>)
    cf6e:	1c30      	adds	r0, r6, #0
    cf70:	4699      	mov	r9, r3
    cf72:	4798      	blx	r3
    cf74:	9000      	str	r0, [sp, #0]
    cf76:	9101      	str	r1, [sp, #4]
    cf78:	1c28      	adds	r0, r5, #0
    cf7a:	47c8      	blx	r9
    cf7c:	9c00      	ldr	r4, [sp, #0]
    cf7e:	9d01      	ldr	r5, [sp, #4]
    cf80:	4b67      	ldr	r3, [pc, #412]	; (d120 <calc_orientation+0x230>)
    cf82:	0006      	movs	r6, r0
    cf84:	000f      	movs	r7, r1
    cf86:	469a      	mov	sl, r3
    cf88:	0022      	movs	r2, r4
    cf8a:	002b      	movs	r3, r5
    cf8c:	0020      	movs	r0, r4
    cf8e:	0029      	movs	r1, r5
    cf90:	47d0      	blx	sl
    cf92:	0032      	movs	r2, r6
    cf94:	0004      	movs	r4, r0
    cf96:	000d      	movs	r5, r1
    cf98:	003b      	movs	r3, r7
    cf9a:	0030      	movs	r0, r6
    cf9c:	0039      	movs	r1, r7
    cf9e:	47d0      	blx	sl
    cfa0:	0002      	movs	r2, r0
    cfa2:	000b      	movs	r3, r1
    cfa4:	0020      	movs	r0, r4
    cfa6:	0029      	movs	r1, r5
    cfa8:	4d5e      	ldr	r5, [pc, #376]	; (d124 <calc_orientation+0x234>)
    cfaa:	47a8      	blx	r5
    cfac:	4b5e      	ldr	r3, [pc, #376]	; (d128 <calc_orientation+0x238>)
    cfae:	4798      	blx	r3
	*thetaX = rad2deg*atan2(XYZ[1], XYZ[2]);
    cfb0:	4b5e      	ldr	r3, [pc, #376]	; (d12c <calc_orientation+0x23c>)
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
    cfb2:	9002      	str	r0, [sp, #8]
    cfb4:	9103      	str	r1, [sp, #12]
	*thetaX = rad2deg*atan2(XYZ[1], XYZ[2]);
    cfb6:	6818      	ldr	r0, [r3, #0]
    cfb8:	469b      	mov	fp, r3
    cfba:	47c8      	blx	r9
    cfbc:	0032      	movs	r2, r6
    cfbe:	0004      	movs	r4, r0
    cfc0:	000d      	movs	r5, r1
    cfc2:	9800      	ldr	r0, [sp, #0]
    cfc4:	9901      	ldr	r1, [sp, #4]
    cfc6:	003b      	movs	r3, r7
    cfc8:	4e59      	ldr	r6, [pc, #356]	; (d130 <calc_orientation+0x240>)
    cfca:	47b0      	blx	r6
    cfcc:	0002      	movs	r2, r0
    cfce:	000b      	movs	r3, r1
    cfd0:	0020      	movs	r0, r4
    cfd2:	0029      	movs	r1, r5
    cfd4:	47d0      	blx	sl
    cfd6:	4b57      	ldr	r3, [pc, #348]	; (d134 <calc_orientation+0x244>)
    cfd8:	4798      	blx	r3
	*thetaY = -1*rad2deg*atan2(XYZ[0], ryz);
    cfda:	2280      	movs	r2, #128	; 0x80
    cfdc:	465b      	mov	r3, fp
    cfde:	0612      	lsls	r2, r2, #24
    cfe0:	4694      	mov	ip, r2
    cfe2:	681b      	ldr	r3, [r3, #0]
	*thetaX = rad2deg*atan2(XYZ[1], XYZ[2]);
    cfe4:	9000      	str	r0, [sp, #0]
	*thetaY = -1*rad2deg*atan2(XYZ[0], ryz);
    cfe6:	4463      	add	r3, ip
    cfe8:	0018      	movs	r0, r3
    cfea:	47c8      	blx	r9
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
    cfec:	4b51      	ldr	r3, [pc, #324]	; (d134 <calc_orientation+0x244>)
	*thetaY = -1*rad2deg*atan2(XYZ[0], ryz);
    cfee:	0006      	movs	r6, r0
    cff0:	000f      	movs	r7, r1
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
    cff2:	9802      	ldr	r0, [sp, #8]
    cff4:	9903      	ldr	r1, [sp, #12]
    cff6:	4798      	blx	r3
	*thetaY = -1*rad2deg*atan2(XYZ[0], ryz);
    cff8:	47c8      	blx	r9
    cffa:	0004      	movs	r4, r0
    cffc:	000d      	movs	r5, r1
    cffe:	9805      	ldr	r0, [sp, #20]
    d000:	47c8      	blx	r9
    d002:	0022      	movs	r2, r4
    d004:	002b      	movs	r3, r5
    d006:	4c4a      	ldr	r4, [pc, #296]	; (d130 <calc_orientation+0x240>)
    d008:	47a0      	blx	r4
    d00a:	0002      	movs	r2, r0
    d00c:	000b      	movs	r3, r1
    d00e:	0030      	movs	r0, r6
    d010:	0039      	movs	r1, r7
    d012:	47d0      	blx	sl
    d014:	4b47      	ldr	r3, [pc, #284]	; (d134 <calc_orientation+0x244>)
    d016:	4798      	blx	r3
	*inclinationP = -1*thetaY;
    d018:	2380      	movs	r3, #128	; 0x80
    d01a:	4642      	mov	r2, r8
    d01c:	061b      	lsls	r3, r3, #24
	if ((*rollP)<0){
    d01e:	9d00      	ldr	r5, [sp, #0]
	*inclinationP = -1*thetaY;
    d020:	18c3      	adds	r3, r0, r3
	*thetaY = -1*rad2deg*atan2(XYZ[0], ryz);
    d022:	1c04      	adds	r4, r0, #0
	*inclinationP = -1*thetaY;
    d024:	6113      	str	r3, [r2, #16]
	if ((*rollP)<0){
    d026:	2100      	movs	r1, #0
    d028:	1c28      	adds	r0, r5, #0
    d02a:	4b43      	ldr	r3, [pc, #268]	; (d138 <calc_orientation+0x248>)
    d02c:	4798      	blx	r3
    d02e:	2800      	cmp	r0, #0
    d030:	d168      	bne.n	d104 <calc_orientation+0x214>
	*rollP = thetaX;
    d032:	4643      	mov	r3, r8
    d034:	1c2a      	adds	r2, r5, #0
    d036:	615d      	str	r5, [r3, #20]
	rotvec_theta_XY(cXYZ, crotXYZ, thetaX, thetaY);
    d038:	1c23      	adds	r3, r4, #0
    d03a:	a909      	add	r1, sp, #36	; 0x24
    d03c:	a806      	add	r0, sp, #24
    d03e:	4c3f      	ldr	r4, [pc, #252]	; (d13c <calc_orientation+0x24c>)
    d040:	47a0      	blx	r4
	*azimuthP = rad2deg*atan2(crotXYZ[1], crotXYZ[0]);
    d042:	465b      	mov	r3, fp
    d044:	6818      	ldr	r0, [r3, #0]
    d046:	47c8      	blx	r9
    d048:	0006      	movs	r6, r0
    d04a:	9809      	ldr	r0, [sp, #36]	; 0x24
    d04c:	000f      	movs	r7, r1
    d04e:	47c8      	blx	r9
    d050:	0004      	movs	r4, r0
    d052:	000d      	movs	r5, r1
    d054:	980a      	ldr	r0, [sp, #40]	; 0x28
    d056:	47c8      	blx	r9
    d058:	0022      	movs	r2, r4
    d05a:	002b      	movs	r3, r5
    d05c:	4c34      	ldr	r4, [pc, #208]	; (d130 <calc_orientation+0x240>)
    d05e:	47a0      	blx	r4
    d060:	0002      	movs	r2, r0
    d062:	000b      	movs	r3, r1
    d064:	0030      	movs	r0, r6
    d066:	0039      	movs	r1, r7
    d068:	47d0      	blx	sl
    d06a:	4b32      	ldr	r3, [pc, #200]	; (d134 <calc_orientation+0x244>)
    d06c:	4798      	blx	r3
	if ((*azimuthP)<0){
    d06e:	2100      	movs	r1, #0
    d070:	4b31      	ldr	r3, [pc, #196]	; (d138 <calc_orientation+0x248>)
	*azimuthP = rad2deg*atan2(crotXYZ[1], crotXYZ[0]);
    d072:	1c04      	adds	r4, r0, #0
	if ((*azimuthP)<0){
    d074:	4798      	blx	r3
    d076:	2800      	cmp	r0, #0
    d078:	d13d      	bne.n	d0f6 <calc_orientation+0x206>
	*azimuthP = rad2deg*atan2(crotXYZ[1], crotXYZ[0]);
    d07a:	4643      	mov	r3, r8
    d07c:	60dc      	str	r4, [r3, #12]
	crxy= sqrt(pow(crotXYZ[0],2)+pow(crotXYZ[1],2));
    d07e:	9809      	ldr	r0, [sp, #36]	; 0x24
    d080:	47c8      	blx	r9
    d082:	0006      	movs	r6, r0
    d084:	980a      	ldr	r0, [sp, #40]	; 0x28
    d086:	000f      	movs	r7, r1
    d088:	47c8      	blx	r9
    d08a:	0002      	movs	r2, r0
    d08c:	000b      	movs	r3, r1
    d08e:	47d0      	blx	sl
    d090:	0032      	movs	r2, r6
    d092:	0004      	movs	r4, r0
    d094:	000d      	movs	r5, r1
    d096:	003b      	movs	r3, r7
    d098:	0030      	movs	r0, r6
    d09a:	0039      	movs	r1, r7
    d09c:	47d0      	blx	sl
    d09e:	0002      	movs	r2, r0
    d0a0:	000b      	movs	r3, r1
    d0a2:	0020      	movs	r0, r4
    d0a4:	0029      	movs	r1, r5
    d0a6:	4c1f      	ldr	r4, [pc, #124]	; (d124 <calc_orientation+0x234>)
    d0a8:	47a0      	blx	r4
    d0aa:	4b1f      	ldr	r3, [pc, #124]	; (d128 <calc_orientation+0x238>)
    d0ac:	4798      	blx	r3
	*declinationP = rad2deg*atan2(crotXYZ[2], crxy);
    d0ae:	465b      	mov	r3, fp
	crxy= sqrt(pow(crotXYZ[0],2)+pow(crotXYZ[1],2));
    d0b0:	0004      	movs	r4, r0
	*declinationP = rad2deg*atan2(crotXYZ[2], crxy);
    d0b2:	6818      	ldr	r0, [r3, #0]
	crxy= sqrt(pow(crotXYZ[0],2)+pow(crotXYZ[1],2));
    d0b4:	000d      	movs	r5, r1
	*declinationP = rad2deg*atan2(crotXYZ[2], crxy);
    d0b6:	47c8      	blx	r9
	crxy= sqrt(pow(crotXYZ[0],2)+pow(crotXYZ[1],2));
    d0b8:	4b1e      	ldr	r3, [pc, #120]	; (d134 <calc_orientation+0x244>)
	*declinationP = rad2deg*atan2(crotXYZ[2], crxy);
    d0ba:	0006      	movs	r6, r0
    d0bc:	000f      	movs	r7, r1
	crxy= sqrt(pow(crotXYZ[0],2)+pow(crotXYZ[1],2));
    d0be:	0020      	movs	r0, r4
    d0c0:	0029      	movs	r1, r5
    d0c2:	4798      	blx	r3
	*declinationP = rad2deg*atan2(crotXYZ[2], crxy);
    d0c4:	47c8      	blx	r9
    d0c6:	0004      	movs	r4, r0
    d0c8:	000d      	movs	r5, r1
    d0ca:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d0cc:	47c8      	blx	r9
    d0ce:	0022      	movs	r2, r4
    d0d0:	002b      	movs	r3, r5
    d0d2:	4c17      	ldr	r4, [pc, #92]	; (d130 <calc_orientation+0x240>)
    d0d4:	47a0      	blx	r4
    d0d6:	0002      	movs	r2, r0
    d0d8:	000b      	movs	r3, r1
    d0da:	0030      	movs	r0, r6
    d0dc:	0039      	movs	r1, r7
    d0de:	47d0      	blx	sl
    d0e0:	4b14      	ldr	r3, [pc, #80]	; (d134 <calc_orientation+0x244>)
    d0e2:	4798      	blx	r3
    d0e4:	4643      	mov	r3, r8
    d0e6:	6198      	str	r0, [r3, #24]
}
    d0e8:	b00d      	add	sp, #52	; 0x34
    d0ea:	bc3c      	pop	{r2, r3, r4, r5}
    d0ec:	4690      	mov	r8, r2
    d0ee:	4699      	mov	r9, r3
    d0f0:	46a2      	mov	sl, r4
    d0f2:	46ab      	mov	fp, r5
    d0f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*azimuthP = *azimuthP+360;
    d0f6:	4b07      	ldr	r3, [pc, #28]	; (d114 <calc_orientation+0x224>)
    d0f8:	4911      	ldr	r1, [pc, #68]	; (d140 <calc_orientation+0x250>)
    d0fa:	1c20      	adds	r0, r4, #0
    d0fc:	4798      	blx	r3
    d0fe:	4643      	mov	r3, r8
    d100:	60d8      	str	r0, [r3, #12]
    d102:	e7bc      	b.n	d07e <calc_orientation+0x18e>
		*rollP = *rollP+360;
    d104:	4b03      	ldr	r3, [pc, #12]	; (d114 <calc_orientation+0x224>)
    d106:	1c28      	adds	r0, r5, #0
    d108:	490d      	ldr	r1, [pc, #52]	; (d140 <calc_orientation+0x250>)
    d10a:	4798      	blx	r3
    d10c:	4643      	mov	r3, r8
    d10e:	9a00      	ldr	r2, [sp, #0]
    d110:	6158      	str	r0, [r3, #20]
    d112:	e791      	b.n	d038 <calc_orientation+0x148>
    d114:	0001c4a5 	.word	0x0001c4a5
    d118:	0001cba9 	.word	0x0001cba9
    d11c:	0001eddd 	.word	0x0001eddd
    d120:	0001e115 	.word	0x0001e115
    d124:	0001d28d 	.word	0x0001d28d
    d128:	000199b5 	.word	0x000199b5
    d12c:	00024d14 	.word	0x00024d14
    d130:	00019655 	.word	0x00019655
    d134:	0001ee81 	.word	0x0001ee81
    d138:	0001c319 	.word	0x0001c319
    d13c:	0000cd81 	.word	0x0000cd81
    d140:	43b40000 	.word	0x43b40000

0000d144 <cal_write_report>:
FRESULT cal_write_report(void){
    d144:	b5f0      	push	{r4, r5, r6, r7, lr}
    d146:	46de      	mov	lr, fp
    d148:	4657      	mov	r7, sl
    d14a:	464e      	mov	r6, r9
    d14c:	4645      	mov	r5, r8
    d14e:	b5e0      	push	{r5, r6, r7, lr}
    d150:	4c1f      	ldr	r4, [pc, #124]	; (d1d0 <cal_write_report+0x8c>)
	spi_select_slave(&spi_main, &slave_SD, true);
    d152:	2201      	movs	r2, #1
FRESULT cal_write_report(void){
    d154:	44a5      	add	sp, r4
	spi_select_slave(&spi_main, &slave_SD, true);
    d156:	491f      	ldr	r1, [pc, #124]	; (d1d4 <cal_write_report+0x90>)
    d158:	481f      	ldr	r0, [pc, #124]	; (d1d8 <cal_write_report+0x94>)
    d15a:	4b20      	ldr	r3, [pc, #128]	; (d1dc <cal_write_report+0x98>)
    d15c:	4798      	blx	r3
	diskio_status = disk_status(0);
    d15e:	2000      	movs	r0, #0
    d160:	4c1f      	ldr	r4, [pc, #124]	; (d1e0 <cal_write_report+0x9c>)
    d162:	47a0      	blx	r4
	if(diskio_status){
    d164:	2800      	cmp	r0, #0
    d166:	d00b      	beq.n	d180 <cal_write_report+0x3c>
		configure_SD();
    d168:	4b1e      	ldr	r3, [pc, #120]	; (d1e4 <cal_write_report+0xa0>)
    d16a:	4798      	blx	r3
		diskio_status = disk_status(0);
    d16c:	2000      	movs	r0, #0
    d16e:	47a0      	blx	r4
		if(diskio_status){
    d170:	2800      	cmp	r0, #0
    d172:	d005      	beq.n	d180 <cal_write_report+0x3c>
			SD_status = fdebug1;
    d174:	2203      	movs	r2, #3
    d176:	4b1c      	ldr	r3, [pc, #112]	; (d1e8 <cal_write_report+0xa4>)
    d178:	701a      	strb	r2, [r3, #0]
			return fdebug1;
    d17a:	2303      	movs	r3, #3
    d17c:	4698      	mov	r8, r3
    d17e:	e01e      	b.n	d1be <cal_write_report+0x7a>
	sprintf(file_name, "20%02x%02x%02x_%02x%02x%02x_calibration_report.txt", current_time.year, current_time.month, current_time.date,
    d180:	491a      	ldr	r1, [pc, #104]	; (d1ec <cal_write_report+0xa8>)
    d182:	4b1a      	ldr	r3, [pc, #104]	; (d1ec <cal_write_report+0xa8>)
    d184:	7809      	ldrb	r1, [r1, #0]
    d186:	4a19      	ldr	r2, [pc, #100]	; (d1ec <cal_write_report+0xa8>)
    d188:	795b      	ldrb	r3, [r3, #5]
    d18a:	7992      	ldrb	r2, [r2, #6]
    d18c:	9103      	str	r1, [sp, #12]
    d18e:	4917      	ldr	r1, [pc, #92]	; (d1ec <cal_write_report+0xa8>)
    d190:	a849      	add	r0, sp, #292	; 0x124
    d192:	7849      	ldrb	r1, [r1, #1]
    d194:	4c16      	ldr	r4, [pc, #88]	; (d1f0 <cal_write_report+0xac>)
    d196:	9102      	str	r1, [sp, #8]
    d198:	4914      	ldr	r1, [pc, #80]	; (d1ec <cal_write_report+0xa8>)
    d19a:	7889      	ldrb	r1, [r1, #2]
    d19c:	9101      	str	r1, [sp, #4]
    d19e:	4913      	ldr	r1, [pc, #76]	; (d1ec <cal_write_report+0xa8>)
    d1a0:	7909      	ldrb	r1, [r1, #4]
    d1a2:	9100      	str	r1, [sp, #0]
    d1a4:	4913      	ldr	r1, [pc, #76]	; (d1f4 <cal_write_report+0xb0>)
    d1a6:	47a0      	blx	r4
	fdebug2 = f_open(&file_cal_report, file_name, FA_CREATE_NEW | FA_READ | FA_WRITE);						
    d1a8:	2207      	movs	r2, #7
    d1aa:	a949      	add	r1, sp, #292	; 0x124
    d1ac:	4812      	ldr	r0, [pc, #72]	; (d1f8 <cal_write_report+0xb4>)
    d1ae:	4b13      	ldr	r3, [pc, #76]	; (d1fc <cal_write_report+0xb8>)
    d1b0:	4798      	blx	r3
    d1b2:	4680      	mov	r8, r0
	if(fdebug2!=FR_OK){
    d1b4:	2800      	cmp	r0, #0
    d1b6:	d025      	beq.n	d204 <cal_write_report+0xc0>
		SD_status = fdebug2;
    d1b8:	4642      	mov	r2, r8
    d1ba:	4b0b      	ldr	r3, [pc, #44]	; (d1e8 <cal_write_report+0xa4>)
    d1bc:	701a      	strb	r2, [r3, #0]
}
    d1be:	4640      	mov	r0, r8
    d1c0:	4b0f      	ldr	r3, [pc, #60]	; (d200 <cal_write_report+0xbc>)
    d1c2:	449d      	add	sp, r3
    d1c4:	bc3c      	pop	{r2, r3, r4, r5}
    d1c6:	4690      	mov	r8, r2
    d1c8:	4699      	mov	r9, r3
    d1ca:	46a2      	mov	sl, r4
    d1cc:	46ab      	mov	fp, r5
    d1ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d1d0:	fffff92c 	.word	0xfffff92c
    d1d4:	20001118 	.word	0x20001118
    d1d8:	20001134 	.word	0x20001134
    d1dc:	00014a29 	.word	0x00014a29
    d1e0:	00003d1d 	.word	0x00003d1d
    d1e4:	00018715 	.word	0x00018715
    d1e8:	200043f5 	.word	0x200043f5
    d1ec:	200010cc 	.word	0x200010cc
    d1f0:	0001f101 	.word	0x0001f101
    d1f4:	00023b44 	.word	0x00023b44
    d1f8:	20002e30 	.word	0x20002e30
    d1fc:	00005f9d 	.word	0x00005f9d
    d200:	000006d4 	.word	0x000006d4
	sprintf(write_str1,"Calibration Report\r\n\r\nDate and Time:\r\nYYYY.MM.DD@HH:mm:ss\r\n20%02x.%02x.%02x@%02x:%02x:%02x\r\n\r\n",
    d204:	a988      	add	r1, sp, #544	; 0x220
    d206:	4688      	mov	r8, r1
				cal_report_azm_inc.time_struct.hours, cal_report_azm_inc.time_struct.minutes, cal_report_azm_inc.time_struct.seconds);
    d208:	2140      	movs	r1, #64	; 0x40
				cal_report_azm_inc.time_struct.year, cal_report_azm_inc.time_struct.month, cal_report_azm_inc.time_struct.date,
    d20a:	2345      	movs	r3, #69	; 0x45
    d20c:	2246      	movs	r2, #70	; 0x46
    d20e:	4efa      	ldr	r6, [pc, #1000]	; (d5f8 <cal_write_report+0x4b4>)
	sprintf(write_str1,"Calibration Report\r\n\r\nDate and Time:\r\nYYYY.MM.DD@HH:mm:ss\r\n20%02x.%02x.%02x@%02x:%02x:%02x\r\n\r\n",
    d210:	4cfa      	ldr	r4, [pc, #1000]	; (d5fc <cal_write_report+0x4b8>)
    d212:	5c71      	ldrb	r1, [r6, r1]
    d214:	5cb2      	ldrb	r2, [r6, r2]
    d216:	5cf3      	ldrb	r3, [r6, r3]
    d218:	9103      	str	r1, [sp, #12]
				cal_report_azm_inc.time_struct.hours, cal_report_azm_inc.time_struct.minutes, cal_report_azm_inc.time_struct.seconds);
    d21a:	2141      	movs	r1, #65	; 0x41
	sprintf(write_str1,"Calibration Report\r\n\r\nDate and Time:\r\nYYYY.MM.DD@HH:mm:ss\r\n20%02x.%02x.%02x@%02x:%02x:%02x\r\n\r\n",
    d21c:	5c71      	ldrb	r1, [r6, r1]
    d21e:	4640      	mov	r0, r8
    d220:	9102      	str	r1, [sp, #8]
				cal_report_azm_inc.time_struct.hours, cal_report_azm_inc.time_struct.minutes, cal_report_azm_inc.time_struct.seconds);
    d222:	2142      	movs	r1, #66	; 0x42
	sprintf(write_str1,"Calibration Report\r\n\r\nDate and Time:\r\nYYYY.MM.DD@HH:mm:ss\r\n20%02x.%02x.%02x@%02x:%02x:%02x\r\n\r\n",
    d224:	5c71      	ldrb	r1, [r6, r1]
    d226:	9101      	str	r1, [sp, #4]
				cal_report_azm_inc.time_struct.year, cal_report_azm_inc.time_struct.month, cal_report_azm_inc.time_struct.date,
    d228:	2144      	movs	r1, #68	; 0x44
	sprintf(write_str1,"Calibration Report\r\n\r\nDate and Time:\r\nYYYY.MM.DD@HH:mm:ss\r\n20%02x.%02x.%02x@%02x:%02x:%02x\r\n\r\n",
    d22a:	5c71      	ldrb	r1, [r6, r1]
    d22c:	9100      	str	r1, [sp, #0]
    d22e:	49f4      	ldr	r1, [pc, #976]	; (d600 <cal_write_report+0x4bc>)
    d230:	47a0      	blx	r4
	fdebug3 = f_write(&file_cal_report, write_str1, strlen(write_str1), pbw);
    d232:	4bf4      	ldr	r3, [pc, #976]	; (d604 <cal_write_report+0x4c0>)
    d234:	4640      	mov	r0, r8
    d236:	4798      	blx	r3
    d238:	ab12      	add	r3, sp, #72	; 0x48
    d23a:	0002      	movs	r2, r0
    d23c:	4641      	mov	r1, r8
    d23e:	4cf2      	ldr	r4, [pc, #968]	; (d608 <cal_write_report+0x4c4>)
    d240:	48f2      	ldr	r0, [pc, #968]	; (d60c <cal_write_report+0x4c8>)
    d242:	47a0      	blx	r4
	sprintf(write_str1,"Software Version: %1.1f\r\n\r\n", cal_report_azm_inc.software_version);
    d244:	4ff2      	ldr	r7, [pc, #968]	; (d610 <cal_write_report+0x4cc>)
    d246:	6830      	ldr	r0, [r6, #0]
    d248:	47b8      	blx	r7
    d24a:	4cec      	ldr	r4, [pc, #944]	; (d5fc <cal_write_report+0x4b8>)
    d24c:	0002      	movs	r2, r0
    d24e:	000b      	movs	r3, r1
    d250:	4640      	mov	r0, r8
    d252:	49f0      	ldr	r1, [pc, #960]	; (d614 <cal_write_report+0x4d0>)
    d254:	47a0      	blx	r4
	fdebug3 = f_write(&file_cal_report, write_str1, strlen(write_str1), pbw);
    d256:	4beb      	ldr	r3, [pc, #940]	; (d604 <cal_write_report+0x4c0>)
    d258:	4640      	mov	r0, r8
    d25a:	4798      	blx	r3
    d25c:	ab12      	add	r3, sp, #72	; 0x48
    d25e:	0002      	movs	r2, r0
    d260:	4641      	mov	r1, r8
    d262:	4ce9      	ldr	r4, [pc, #932]	; (d608 <cal_write_report+0x4c4>)
    d264:	48e9      	ldr	r0, [pc, #932]	; (d60c <cal_write_report+0x4c8>)
    d266:	47a0      	blx	r4
	sprintf(write_str1,"Measurements: %d\r\n4-Point Groups: %d\r\n\r\n", 
    d268:	68b2      	ldr	r2, [r6, #8]
    d26a:	49eb      	ldr	r1, [pc, #940]	; (d618 <cal_write_report+0x4d4>)
    d26c:	6873      	ldr	r3, [r6, #4]
    d26e:	4ce3      	ldr	r4, [pc, #908]	; (d5fc <cal_write_report+0x4b8>)
    d270:	4640      	mov	r0, r8
    d272:	47a0      	blx	r4
	fdebug3 = f_write(&file_cal_report, write_str1, strlen(write_str1), pbw);
    d274:	4be3      	ldr	r3, [pc, #908]	; (d604 <cal_write_report+0x4c0>)
    d276:	4640      	mov	r0, r8
    d278:	4798      	blx	r3
    d27a:	ab12      	add	r3, sp, #72	; 0x48
    d27c:	0002      	movs	r2, r0
    d27e:	4641      	mov	r1, r8
    d280:	4ce1      	ldr	r4, [pc, #900]	; (d608 <cal_write_report+0x4c4>)
    d282:	48e2      	ldr	r0, [pc, #904]	; (d60c <cal_write_report+0x4c8>)
    d284:	47a0      	blx	r4
	sprintf(write_str1,"Angle Error Standard Deviation:\r\n  Azimuth: %3.6f degrees\r\n  Inclination: %3.6f degrees\r\n",
    d286:	6970      	ldr	r0, [r6, #20]
    d288:	47b8      	blx	r7
    d28a:	0004      	movs	r4, r0
    d28c:	6930      	ldr	r0, [r6, #16]
    d28e:	000d      	movs	r5, r1
    d290:	47b8      	blx	r7
    d292:	0022      	movs	r2, r4
    d294:	9000      	str	r0, [sp, #0]
    d296:	9101      	str	r1, [sp, #4]
    d298:	002b      	movs	r3, r5
    d29a:	49e0      	ldr	r1, [pc, #896]	; (d61c <cal_write_report+0x4d8>)
    d29c:	4cd7      	ldr	r4, [pc, #860]	; (d5fc <cal_write_report+0x4b8>)
    d29e:	4640      	mov	r0, r8
    d2a0:	47a0      	blx	r4
	fdebug3 = f_write(&file_cal_report, write_str1, strlen(write_str1), pbw);
    d2a2:	4bd8      	ldr	r3, [pc, #864]	; (d604 <cal_write_report+0x4c0>)
    d2a4:	4640      	mov	r0, r8
    d2a6:	4798      	blx	r3
    d2a8:	ab12      	add	r3, sp, #72	; 0x48
    d2aa:	0002      	movs	r2, r0
    d2ac:	4641      	mov	r1, r8
    d2ae:	4cd6      	ldr	r4, [pc, #856]	; (d608 <cal_write_report+0x4c4>)
    d2b0:	48d6      	ldr	r0, [pc, #856]	; (d60c <cal_write_report+0x4c8>)
    d2b2:	47a0      	blx	r4
				cal_report_azm_inc.mag_stdev_a1*100, cal_report_azm_inc.mag_stdev_a2*100,cal_report_azm_inc.mag_stdev_c1*100, cal_report_azm_inc.mag_stdev_c2*100);
    d2b4:	4bda      	ldr	r3, [pc, #872]	; (d620 <cal_write_report+0x4dc>)
    d2b6:	69b0      	ldr	r0, [r6, #24]
    d2b8:	49da      	ldr	r1, [pc, #872]	; (d624 <cal_write_report+0x4e0>)
    d2ba:	4699      	mov	r9, r3
    d2bc:	4798      	blx	r3
	sprintf(write_str1,"Magnitude Error Standard Deviation:\r\n  Accelerometer 1: %3.6f %%\r\n  Accelerometer 2: %3.6f %%\r\n  Compass 1: %3.6f %%\r\n  Compass 2: %3.6f %%\r\n",
    d2be:	47b8      	blx	r7
    d2c0:	0004      	movs	r4, r0
    d2c2:	000d      	movs	r5, r1
				cal_report_azm_inc.mag_stdev_a1*100, cal_report_azm_inc.mag_stdev_a2*100,cal_report_azm_inc.mag_stdev_c1*100, cal_report_azm_inc.mag_stdev_c2*100);
    d2c4:	6a70      	ldr	r0, [r6, #36]	; 0x24
    d2c6:	49d7      	ldr	r1, [pc, #860]	; (d624 <cal_write_report+0x4e0>)
    d2c8:	47c8      	blx	r9
	sprintf(write_str1,"Magnitude Error Standard Deviation:\r\n  Accelerometer 1: %3.6f %%\r\n  Accelerometer 2: %3.6f %%\r\n  Compass 1: %3.6f %%\r\n  Compass 2: %3.6f %%\r\n",
    d2ca:	47b8      	blx	r7
    d2cc:	9004      	str	r0, [sp, #16]
    d2ce:	9105      	str	r1, [sp, #20]
				cal_report_azm_inc.mag_stdev_a1*100, cal_report_azm_inc.mag_stdev_a2*100,cal_report_azm_inc.mag_stdev_c1*100, cal_report_azm_inc.mag_stdev_c2*100);
    d2d0:	49d4      	ldr	r1, [pc, #848]	; (d624 <cal_write_report+0x4e0>)
    d2d2:	6a30      	ldr	r0, [r6, #32]
    d2d4:	47c8      	blx	r9
	sprintf(write_str1,"Magnitude Error Standard Deviation:\r\n  Accelerometer 1: %3.6f %%\r\n  Accelerometer 2: %3.6f %%\r\n  Compass 1: %3.6f %%\r\n  Compass 2: %3.6f %%\r\n",
    d2d6:	47b8      	blx	r7
    d2d8:	9002      	str	r0, [sp, #8]
    d2da:	9103      	str	r1, [sp, #12]
				cal_report_azm_inc.mag_stdev_a1*100, cal_report_azm_inc.mag_stdev_a2*100,cal_report_azm_inc.mag_stdev_c1*100, cal_report_azm_inc.mag_stdev_c2*100);
    d2dc:	49d1      	ldr	r1, [pc, #836]	; (d624 <cal_write_report+0x4e0>)
    d2de:	69f0      	ldr	r0, [r6, #28]
    d2e0:	47c8      	blx	r9
	sprintf(write_str1,"Magnitude Error Standard Deviation:\r\n  Accelerometer 1: %3.6f %%\r\n  Accelerometer 2: %3.6f %%\r\n  Compass 1: %3.6f %%\r\n  Compass 2: %3.6f %%\r\n",
    d2e2:	47b8      	blx	r7
    d2e4:	0022      	movs	r2, r4
    d2e6:	9000      	str	r0, [sp, #0]
    d2e8:	9101      	str	r1, [sp, #4]
    d2ea:	002b      	movs	r3, r5
    d2ec:	49ce      	ldr	r1, [pc, #824]	; (d628 <cal_write_report+0x4e4>)
    d2ee:	4cc3      	ldr	r4, [pc, #780]	; (d5fc <cal_write_report+0x4b8>)
    d2f0:	4640      	mov	r0, r8
    d2f2:	47a0      	blx	r4
	fdebug3 = f_write(&file_cal_report, write_str1, strlen(write_str1), pbw);
    d2f4:	4bc3      	ldr	r3, [pc, #780]	; (d604 <cal_write_report+0x4c0>)
    d2f6:	4640      	mov	r0, r8
    d2f8:	4798      	blx	r3
    d2fa:	ab12      	add	r3, sp, #72	; 0x48
    d2fc:	0002      	movs	r2, r0
    d2fe:	4641      	mov	r1, r8
    d300:	4cc1      	ldr	r4, [pc, #772]	; (d608 <cal_write_report+0x4c4>)
    d302:	48c2      	ldr	r0, [pc, #776]	; (d60c <cal_write_report+0x4c8>)
    d304:	47a0      	blx	r4
		cal_report_azm_inc.disp_stdev_acc[0]*100, cal_report_azm_inc.disp_stdev_acc[1]*100,cal_report_azm_inc.disp_stdev_acc[2]*100);
    d306:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    d308:	49c6      	ldr	r1, [pc, #792]	; (d624 <cal_write_report+0x4e0>)
    d30a:	47c8      	blx	r9
	sprintf(write_str1,"Axis Disparity:\r\n  Accelerometer: X-%3.6f%% Y-%3.6f%% Z-%3.6f%%\r\n",
    d30c:	47b8      	blx	r7
    d30e:	0004      	movs	r4, r0
    d310:	000d      	movs	r5, r1
		cal_report_azm_inc.disp_stdev_acc[0]*100, cal_report_azm_inc.disp_stdev_acc[1]*100,cal_report_azm_inc.disp_stdev_acc[2]*100);
    d312:	6b30      	ldr	r0, [r6, #48]	; 0x30
    d314:	49c3      	ldr	r1, [pc, #780]	; (d624 <cal_write_report+0x4e0>)
    d316:	47c8      	blx	r9
	sprintf(write_str1,"Axis Disparity:\r\n  Accelerometer: X-%3.6f%% Y-%3.6f%% Z-%3.6f%%\r\n",
    d318:	47b8      	blx	r7
    d31a:	9002      	str	r0, [sp, #8]
    d31c:	9103      	str	r1, [sp, #12]
		cal_report_azm_inc.disp_stdev_acc[0]*100, cal_report_azm_inc.disp_stdev_acc[1]*100,cal_report_azm_inc.disp_stdev_acc[2]*100);
    d31e:	49c1      	ldr	r1, [pc, #772]	; (d624 <cal_write_report+0x4e0>)
    d320:	6af0      	ldr	r0, [r6, #44]	; 0x2c
    d322:	47c8      	blx	r9
	sprintf(write_str1,"Axis Disparity:\r\n  Accelerometer: X-%3.6f%% Y-%3.6f%% Z-%3.6f%%\r\n",
    d324:	47b8      	blx	r7
    d326:	0022      	movs	r2, r4
    d328:	9000      	str	r0, [sp, #0]
    d32a:	9101      	str	r1, [sp, #4]
    d32c:	002b      	movs	r3, r5
    d32e:	49bf      	ldr	r1, [pc, #764]	; (d62c <cal_write_report+0x4e8>)
    d330:	4cb2      	ldr	r4, [pc, #712]	; (d5fc <cal_write_report+0x4b8>)
    d332:	4640      	mov	r0, r8
    d334:	47a0      	blx	r4
	fdebug3 = f_write(&file_cal_report, write_str1, strlen(write_str1), pbw);	
    d336:	4bb3      	ldr	r3, [pc, #716]	; (d604 <cal_write_report+0x4c0>)
    d338:	4640      	mov	r0, r8
    d33a:	4798      	blx	r3
    d33c:	ab12      	add	r3, sp, #72	; 0x48
    d33e:	0002      	movs	r2, r0
    d340:	4641      	mov	r1, r8
    d342:	4cb1      	ldr	r4, [pc, #708]	; (d608 <cal_write_report+0x4c4>)
    d344:	48b1      	ldr	r0, [pc, #708]	; (d60c <cal_write_report+0x4c8>)
    d346:	47a0      	blx	r4
		cal_report_azm_inc.disp_stdev_comp[0]*100, cal_report_azm_inc.disp_stdev_comp[1]*100,cal_report_azm_inc.disp_stdev_comp[2]*100);
    d348:	6b70      	ldr	r0, [r6, #52]	; 0x34
    d34a:	49b6      	ldr	r1, [pc, #728]	; (d624 <cal_write_report+0x4e0>)
    d34c:	47c8      	blx	r9
	sprintf(write_str1,"  Compass: X-%3.6f%% Y-%3.6f%% Z-%3.6f%%\r\n\r\n\r\n",
    d34e:	47b8      	blx	r7
    d350:	0004      	movs	r4, r0
    d352:	000d      	movs	r5, r1
		cal_report_azm_inc.disp_stdev_comp[0]*100, cal_report_azm_inc.disp_stdev_comp[1]*100,cal_report_azm_inc.disp_stdev_comp[2]*100);
    d354:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
    d356:	49b3      	ldr	r1, [pc, #716]	; (d624 <cal_write_report+0x4e0>)
    d358:	47c8      	blx	r9
	sprintf(write_str1,"  Compass: X-%3.6f%% Y-%3.6f%% Z-%3.6f%%\r\n\r\n\r\n",
    d35a:	47b8      	blx	r7
    d35c:	9002      	str	r0, [sp, #8]
    d35e:	9103      	str	r1, [sp, #12]
		cal_report_azm_inc.disp_stdev_comp[0]*100, cal_report_azm_inc.disp_stdev_comp[1]*100,cal_report_azm_inc.disp_stdev_comp[2]*100);
    d360:	49b0      	ldr	r1, [pc, #704]	; (d624 <cal_write_report+0x4e0>)
    d362:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    d364:	47c8      	blx	r9
	sprintf(write_str1,"  Compass: X-%3.6f%% Y-%3.6f%% Z-%3.6f%%\r\n\r\n\r\n",
    d366:	47b8      	blx	r7
    d368:	0022      	movs	r2, r4
    d36a:	9000      	str	r0, [sp, #0]
    d36c:	9101      	str	r1, [sp, #4]
    d36e:	002b      	movs	r3, r5
    d370:	49af      	ldr	r1, [pc, #700]	; (d630 <cal_write_report+0x4ec>)
    d372:	4ca2      	ldr	r4, [pc, #648]	; (d5fc <cal_write_report+0x4b8>)
    d374:	4640      	mov	r0, r8
    d376:	47a0      	blx	r4
	fdebug3 = f_write(&file_cal_report, write_str1, strlen(write_str1), pbw);
    d378:	4ba2      	ldr	r3, [pc, #648]	; (d604 <cal_write_report+0x4c0>)
    d37a:	4640      	mov	r0, r8
    d37c:	4798      	blx	r3
    d37e:	ab12      	add	r3, sp, #72	; 0x48
    d380:	0002      	movs	r2, r0
    d382:	4641      	mov	r1, r8
    d384:	48a1      	ldr	r0, [pc, #644]	; (d60c <cal_write_report+0x4c8>)
    d386:	4ca0      	ldr	r4, [pc, #640]	; (d608 <cal_write_report+0x4c4>)
    d388:	47a0      	blx	r4
	for (i=0;i<4;i++){
    d38a:	2300      	movs	r3, #0
    d38c:	469a      	mov	sl, r3
		switch(i){
    d38e:	4653      	mov	r3, sl
    d390:	2b02      	cmp	r3, #2
    d392:	d100      	bne.n	d396 <cal_write_report+0x252>
    d394:	e223      	b.n	d7de <cal_write_report+0x69a>
    d396:	2b03      	cmp	r3, #3
    d398:	d100      	bne.n	d39c <cal_write_report+0x258>
    d39a:	e216      	b.n	d7ca <cal_write_report+0x686>
    d39c:	2b01      	cmp	r3, #1
    d39e:	d100      	bne.n	d3a2 <cal_write_report+0x25e>
    d3a0:	e207      	b.n	d7b2 <cal_write_report+0x66e>
				sprintf(write_str1,"Inclinometer 1 Calibration:\r\n");
    d3a2:	4642      	mov	r2, r8
    d3a4:	4ba3      	ldr	r3, [pc, #652]	; (d634 <cal_write_report+0x4f0>)
				pcal_struct = &a1_calst;
    d3a6:	4ea4      	ldr	r6, [pc, #656]	; (d638 <cal_write_report+0x4f4>)
				sprintf(write_str1,"Inclinometer 1 Calibration:\r\n");
    d3a8:	cb13      	ldmia	r3!, {r0, r1, r4}
    d3aa:	c213      	stmia	r2!, {r0, r1, r4}
    d3ac:	cb13      	ldmia	r3!, {r0, r1, r4}
    d3ae:	c213      	stmia	r2!, {r0, r1, r4}
    d3b0:	6819      	ldr	r1, [r3, #0]
    d3b2:	6011      	str	r1, [r2, #0]
    d3b4:	889b      	ldrh	r3, [r3, #4]
    d3b6:	8093      	strh	r3, [r2, #4]
		sprintf(write_str2,"  Gain X: %.6f\r\n  Gain Y: %.6f\r\n  GainZ: %.6f\r\n", pcal_struct->gain[0], pcal_struct->gain[1], pcal_struct->gain[2]);
    d3b8:	6930      	ldr	r0, [r6, #16]
    d3ba:	47b8      	blx	r7
    d3bc:	0004      	movs	r4, r0
    d3be:	69b0      	ldr	r0, [r6, #24]
    d3c0:	000d      	movs	r5, r1
    d3c2:	47b8      	blx	r7
    d3c4:	9002      	str	r0, [sp, #8]
    d3c6:	9103      	str	r1, [sp, #12]
    d3c8:	6970      	ldr	r0, [r6, #20]
    d3ca:	47b8      	blx	r7
    d3cc:	9000      	str	r0, [sp, #0]
    d3ce:	9101      	str	r1, [sp, #4]
    d3d0:	a8ff      	add	r0, sp, #1020	; 0x3fc
    d3d2:	0022      	movs	r2, r4
    d3d4:	002b      	movs	r3, r5
    d3d6:	4999      	ldr	r1, [pc, #612]	; (d63c <cal_write_report+0x4f8>)
    d3d8:	4c88      	ldr	r4, [pc, #544]	; (d5fc <cal_write_report+0x4b8>)
    d3da:	307c      	adds	r0, #124	; 0x7c
    d3dc:	47a0      	blx	r4
		strcat(write_str1, write_str2);
    d3de:	a9ff      	add	r1, sp, #1020	; 0x3fc
    d3e0:	4b97      	ldr	r3, [pc, #604]	; (d640 <cal_write_report+0x4fc>)
    d3e2:	317c      	adds	r1, #124	; 0x7c
    d3e4:	4640      	mov	r0, r8
    d3e6:	4798      	blx	r3
		sprintf(write_str2,"  Offset X: %.6f\r\n  Offset Y: %.6f\r\n  Offset Z: %.6f\r\n", pcal_struct->offset[0], pcal_struct->offset[1], pcal_struct->offset[2]);
    d3e8:	6870      	ldr	r0, [r6, #4]
    d3ea:	47b8      	blx	r7
    d3ec:	0004      	movs	r4, r0
    d3ee:	68f0      	ldr	r0, [r6, #12]
    d3f0:	000d      	movs	r5, r1
    d3f2:	47b8      	blx	r7
    d3f4:	9002      	str	r0, [sp, #8]
    d3f6:	9103      	str	r1, [sp, #12]
    d3f8:	68b0      	ldr	r0, [r6, #8]
    d3fa:	47b8      	blx	r7
    d3fc:	9000      	str	r0, [sp, #0]
    d3fe:	9101      	str	r1, [sp, #4]
    d400:	a8ff      	add	r0, sp, #1020	; 0x3fc
    d402:	0022      	movs	r2, r4
    d404:	002b      	movs	r3, r5
    d406:	498f      	ldr	r1, [pc, #572]	; (d644 <cal_write_report+0x500>)
    d408:	4c7c      	ldr	r4, [pc, #496]	; (d5fc <cal_write_report+0x4b8>)
    d40a:	307c      	adds	r0, #124	; 0x7c
    d40c:	47a0      	blx	r4
		strcat(write_str1, write_str2);
    d40e:	a9ff      	add	r1, sp, #1020	; 0x3fc
    d410:	317c      	adds	r1, #124	; 0x7c
    d412:	4b8b      	ldr	r3, [pc, #556]	; (d640 <cal_write_report+0x4fc>)
    d414:	4640      	mov	r0, r8
    d416:	4798      	blx	r3
				rad2deg*pcal_struct->axmYX, rad2deg*pcal_struct->axmZX, rad2deg*pcal_struct->axmZY);
    d418:	4b8b      	ldr	r3, [pc, #556]	; (d648 <cal_write_report+0x504>)
    d41a:	69f1      	ldr	r1, [r6, #28]
    d41c:	681b      	ldr	r3, [r3, #0]
    d41e:	1c18      	adds	r0, r3, #0
    d420:	469b      	mov	fp, r3
    d422:	47c8      	blx	r9
		sprintf(write_str2,"  Axis Misalignment, Y-X: %.6f deg\r\n  Axis Misalignment, Z-X: %.6f deg\r\n  Axis Misalignment, Z-Y: %.6f deg\r\n", 
    d424:	47b8      	blx	r7
    d426:	0004      	movs	r4, r0
    d428:	000d      	movs	r5, r1
				rad2deg*pcal_struct->axmYX, rad2deg*pcal_struct->axmZX, rad2deg*pcal_struct->axmZY);
    d42a:	4658      	mov	r0, fp
    d42c:	6a31      	ldr	r1, [r6, #32]
    d42e:	47c8      	blx	r9
		sprintf(write_str2,"  Axis Misalignment, Y-X: %.6f deg\r\n  Axis Misalignment, Z-X: %.6f deg\r\n  Axis Misalignment, Z-Y: %.6f deg\r\n", 
    d430:	47b8      	blx	r7
    d432:	9002      	str	r0, [sp, #8]
    d434:	9103      	str	r1, [sp, #12]
				rad2deg*pcal_struct->axmYX, rad2deg*pcal_struct->axmZX, rad2deg*pcal_struct->axmZY);
    d436:	4658      	mov	r0, fp
    d438:	6a71      	ldr	r1, [r6, #36]	; 0x24
    d43a:	47c8      	blx	r9
		sprintf(write_str2,"  Axis Misalignment, Y-X: %.6f deg\r\n  Axis Misalignment, Z-X: %.6f deg\r\n  Axis Misalignment, Z-Y: %.6f deg\r\n", 
    d43c:	47b8      	blx	r7
    d43e:	9000      	str	r0, [sp, #0]
    d440:	9101      	str	r1, [sp, #4]
    d442:	a8ff      	add	r0, sp, #1020	; 0x3fc
    d444:	0022      	movs	r2, r4
    d446:	002b      	movs	r3, r5
    d448:	4980      	ldr	r1, [pc, #512]	; (d64c <cal_write_report+0x508>)
    d44a:	4c6c      	ldr	r4, [pc, #432]	; (d5fc <cal_write_report+0x4b8>)
    d44c:	307c      	adds	r0, #124	; 0x7c
    d44e:	47a0      	blx	r4
		strcat(write_str1, write_str2);
    d450:	a9ff      	add	r1, sp, #1020	; 0x3fc
    d452:	4b7b      	ldr	r3, [pc, #492]	; (d640 <cal_write_report+0x4fc>)
    d454:	317c      	adds	r1, #124	; 0x7c
    d456:	4640      	mov	r0, r8
    d458:	4798      	blx	r3
		sprintf(write_str2,"  Package Misalignment About X: %.3f deg\r\n  Package Misalignment About Y: %.3f deg\r\n  Package Misalignment About Z: %.3f deg\r\n\r\n", 
    d45a:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    d45c:	47b8      	blx	r7
    d45e:	0004      	movs	r4, r0
    d460:	6b30      	ldr	r0, [r6, #48]	; 0x30
    d462:	000d      	movs	r5, r1
    d464:	47b8      	blx	r7
    d466:	9002      	str	r0, [sp, #8]
    d468:	9103      	str	r1, [sp, #12]
    d46a:	6af0      	ldr	r0, [r6, #44]	; 0x2c
    d46c:	47b8      	blx	r7
    d46e:	9000      	str	r0, [sp, #0]
    d470:	9101      	str	r1, [sp, #4]
    d472:	a8ff      	add	r0, sp, #1020	; 0x3fc
    d474:	0022      	movs	r2, r4
    d476:	4976      	ldr	r1, [pc, #472]	; (d650 <cal_write_report+0x50c>)
    d478:	002b      	movs	r3, r5
    d47a:	4c60      	ldr	r4, [pc, #384]	; (d5fc <cal_write_report+0x4b8>)
    d47c:	307c      	adds	r0, #124	; 0x7c
    d47e:	47a0      	blx	r4
    d480:	4b60      	ldr	r3, [pc, #384]	; (d604 <cal_write_report+0x4c0>)
    d482:	4640      	mov	r0, r8
    d484:	4798      	blx	r3
		strcat(write_str1, write_str2);
    d486:	a9ff      	add	r1, sp, #1020	; 0x3fc
    d488:	317c      	adds	r1, #124	; 0x7c
    d48a:	4b72      	ldr	r3, [pc, #456]	; (d654 <cal_write_report+0x510>)
    d48c:	4440      	add	r0, r8
    d48e:	4798      	blx	r3
    d490:	4643      	mov	r3, r8
		fdebug3 = f_write(&file_cal_report, write_str1, strlen(write_str1), pbw);
    d492:	4641      	mov	r1, r8
		strcat(write_str1, write_str2);
    d494:	1ac2      	subs	r2, r0, r3
		fdebug3 = f_write(&file_cal_report, write_str1, strlen(write_str1), pbw);
    d496:	4c5c      	ldr	r4, [pc, #368]	; (d608 <cal_write_report+0x4c4>)
    d498:	ab12      	add	r3, sp, #72	; 0x48
    d49a:	485c      	ldr	r0, [pc, #368]	; (d60c <cal_write_report+0x4c8>)
    d49c:	47a0      	blx	r4
	for (i=0;i<4;i++){
    d49e:	2301      	movs	r3, #1
    d4a0:	469c      	mov	ip, r3
    d4a2:	44e2      	add	sl, ip
    d4a4:	4653      	mov	r3, sl
    d4a6:	2b04      	cmp	r3, #4
    d4a8:	d000      	beq.n	d4ac <cal_write_report+0x368>
    d4aa:	e770      	b.n	d38e <cal_write_report+0x24a>
	sprintf(write_str1,"\r\nCalibration Measurements:\r\n");
    d4ac:	4642      	mov	r2, r8
    d4ae:	4b6a      	ldr	r3, [pc, #424]	; (d658 <cal_write_report+0x514>)
    d4b0:	cb13      	ldmia	r3!, {r0, r1, r4}
    d4b2:	c213      	stmia	r2!, {r0, r1, r4}
    d4b4:	cb13      	ldmia	r3!, {r0, r1, r4}
    d4b6:	c213      	stmia	r2!, {r0, r1, r4}
    d4b8:	6819      	ldr	r1, [r3, #0]
	sprintf(write_str2,"                Uncalibrated                     Calibrated\r\n");
    d4ba:	a8ff      	add	r0, sp, #1020	; 0x3fc
	sprintf(write_str1,"\r\nCalibration Measurements:\r\n");
    d4bc:	6011      	str	r1, [r2, #0]
    d4be:	889b      	ldrh	r3, [r3, #4]
	sprintf(write_str2,"                Uncalibrated                     Calibrated\r\n");
    d4c0:	4c66      	ldr	r4, [pc, #408]	; (d65c <cal_write_report+0x518>)
	sprintf(write_str1,"\r\nCalibration Measurements:\r\n");
    d4c2:	8093      	strh	r3, [r2, #4]
	sprintf(write_str2,"                Uncalibrated                     Calibrated\r\n");
    d4c4:	4966      	ldr	r1, [pc, #408]	; (d660 <cal_write_report+0x51c>)
    d4c6:	223e      	movs	r2, #62	; 0x3e
    d4c8:	307c      	adds	r0, #124	; 0x7c
    d4ca:	47a0      	blx	r4
	strcat(write_str1, write_str2);
    d4cc:	ab06      	add	r3, sp, #24
    d4ce:	469c      	mov	ip, r3
    d4d0:	4864      	ldr	r0, [pc, #400]	; (d664 <cal_write_report+0x520>)
    d4d2:	a9ff      	add	r1, sp, #1020	; 0x3fc
    d4d4:	4460      	add	r0, ip
    d4d6:	223e      	movs	r2, #62	; 0x3e
    d4d8:	317c      	adds	r1, #124	; 0x7c
    d4da:	47a0      	blx	r4
	sprintf(write_str2,"Group, Point,   Azimuth,  Inclination, Roll,     Azimuth,  Inclination, Roll\r\n");
    d4dc:	a8ff      	add	r0, sp, #1020	; 0x3fc
    d4de:	224f      	movs	r2, #79	; 0x4f
    d4e0:	4961      	ldr	r1, [pc, #388]	; (d668 <cal_write_report+0x524>)
    d4e2:	307c      	adds	r0, #124	; 0x7c
    d4e4:	47a0      	blx	r4
	strcat(write_str1, write_str2);
    d4e6:	ab06      	add	r3, sp, #24
    d4e8:	469c      	mov	ip, r3
    d4ea:	4860      	ldr	r0, [pc, #384]	; (d66c <cal_write_report+0x528>)
    d4ec:	a9ff      	add	r1, sp, #1020	; 0x3fc
    d4ee:	224f      	movs	r2, #79	; 0x4f
    d4f0:	317c      	adds	r1, #124	; 0x7c
    d4f2:	4460      	add	r0, ip
    d4f4:	47a0      	blx	r4
	fdebug3 = f_write(&file_cal_report, write_str1, strlen(write_str1), pbw);
    d4f6:	ab12      	add	r3, sp, #72	; 0x48
    d4f8:	22a8      	movs	r2, #168	; 0xa8
    d4fa:	4641      	mov	r1, r8
    d4fc:	4843      	ldr	r0, [pc, #268]	; (d60c <cal_write_report+0x4c8>)
    d4fe:	4c42      	ldr	r4, [pc, #264]	; (d608 <cal_write_report+0x4c4>)
    d500:	47a0      	blx	r4
	for (i=0;i<n_points;i++){
    d502:	4b5b      	ldr	r3, [pc, #364]	; (d670 <cal_write_report+0x52c>)
	fdebug3 = f_write(&file_cal_report, write_str1, strlen(write_str1), pbw);
    d504:	4681      	mov	r9, r0
	for (i=0;i<n_points;i++){
    d506:	469a      	mov	sl, r3
    d508:	681b      	ldr	r3, [r3, #0]
    d50a:	2b00      	cmp	r3, #0
    d50c:	d100      	bne.n	d510 <cal_write_report+0x3cc>
    d50e:	e0f1      	b.n	d6f4 <cal_write_report+0x5b0>
    d510:	2300      	movs	r3, #0
    d512:	469b      	mov	fp, r3
    d514:	4c57      	ldr	r4, [pc, #348]	; (d674 <cal_write_report+0x530>)
    d516:	4d58      	ldr	r5, [pc, #352]	; (d678 <cal_write_report+0x534>)
    d518:	940d      	str	r4, [sp, #52]	; 0x34
    d51a:	4699      	mov	r9, r3
    d51c:	465c      	mov	r4, fp
    d51e:	46ab      	mov	fp, r5
    d520:	4e56      	ldr	r6, [pc, #344]	; (d67c <cal_write_report+0x538>)
			temp_meas.a1xyz[j] = a1raw[i][j];
    d522:	6833      	ldr	r3, [r6, #0]
			temp_meas.c1xyz[j] = c1raw[i][j];
    d524:	990d      	ldr	r1, [sp, #52]	; 0x34
			temp_meas.a1xyz[j] = a1raw[i][j];
    d526:	9327      	str	r3, [sp, #156]	; 0x9c
			temp_meas.a2xyz[j] = a2raw[i][j];
    d528:	465b      	mov	r3, fp
    d52a:	681b      	ldr	r3, [r3, #0]
		calc_orientation(&temp_meas);
    d52c:	a81f      	add	r0, sp, #124	; 0x7c
			temp_meas.a2xyz[j] = a2raw[i][j];
    d52e:	932a      	str	r3, [sp, #168]	; 0xa8
			temp_meas.c1xyz[j] = c1raw[i][j];
    d530:	680b      	ldr	r3, [r1, #0]
    d532:	932d      	str	r3, [sp, #180]	; 0xb4
			temp_meas.c2xyz[j] = c2raw[i][j];
    d534:	4b52      	ldr	r3, [pc, #328]	; (d680 <cal_write_report+0x53c>)
    d536:	191b      	adds	r3, r3, r4
    d538:	681a      	ldr	r2, [r3, #0]
    d53a:	9230      	str	r2, [sp, #192]	; 0xc0
			temp_meas.a1xyz[j] = a1raw[i][j];
    d53c:	6872      	ldr	r2, [r6, #4]
    d53e:	9228      	str	r2, [sp, #160]	; 0xa0
			temp_meas.a2xyz[j] = a2raw[i][j];
    d540:	465a      	mov	r2, fp
    d542:	6852      	ldr	r2, [r2, #4]
    d544:	922b      	str	r2, [sp, #172]	; 0xac
			temp_meas.c1xyz[j] = c1raw[i][j];
    d546:	684a      	ldr	r2, [r1, #4]
    d548:	922e      	str	r2, [sp, #184]	; 0xb8
			temp_meas.c2xyz[j] = c2raw[i][j];
    d54a:	685a      	ldr	r2, [r3, #4]
    d54c:	689b      	ldr	r3, [r3, #8]
    d54e:	9231      	str	r2, [sp, #196]	; 0xc4
			temp_meas.a1xyz[j] = a1raw[i][j];
    d550:	68b2      	ldr	r2, [r6, #8]
			temp_meas.c2xyz[j] = c2raw[i][j];
    d552:	930e      	str	r3, [sp, #56]	; 0x38
			temp_meas.a1xyz[j] = a1raw[i][j];
    d554:	9229      	str	r2, [sp, #164]	; 0xa4
			temp_meas.a2xyz[j] = a2raw[i][j];
    d556:	465a      	mov	r2, fp
    d558:	6892      	ldr	r2, [r2, #8]
			temp_meas.c2xyz[j] = c2raw[i][j];
    d55a:	9332      	str	r3, [sp, #200]	; 0xc8
			temp_meas.a2xyz[j] = a2raw[i][j];
    d55c:	922c      	str	r2, [sp, #176]	; 0xb0
			temp_meas.c1xyz[j] = c1raw[i][j];
    d55e:	688a      	ldr	r2, [r1, #8]
		calc_orientation(&temp_meas);
    d560:	4b48      	ldr	r3, [pc, #288]	; (d684 <cal_write_report+0x540>)
			temp_meas.c1xyz[j] = c1raw[i][j];
    d562:	922f      	str	r2, [sp, #188]	; 0xbc
		calc_orientation(&temp_meas);
    d564:	4798      	blx	r3
		azm_raw = temp_meas.azimuth;
    d566:	9b22      	ldr	r3, [sp, #136]	; 0x88
		roll_raw = temp_meas.roll;
    d568:	9924      	ldr	r1, [sp, #144]	; 0x90
		azm_raw = temp_meas.azimuth;
    d56a:	930e      	str	r3, [sp, #56]	; 0x38
			temp_meas.a1xyz[j] = a1cal[i][j];
    d56c:	4b46      	ldr	r3, [pc, #280]	; (d688 <cal_write_report+0x544>)
		roll_raw = temp_meas.roll;
    d56e:	9110      	str	r1, [sp, #64]	; 0x40
			temp_meas.a1xyz[j] = a1cal[i][j];
    d570:	1918      	adds	r0, r3, r4
    d572:	6803      	ldr	r3, [r0, #0]
		inc_raw = temp_meas.inclination;
    d574:	9a23      	ldr	r2, [sp, #140]	; 0x8c
			temp_meas.a1xyz[j] = a1cal[i][j];
    d576:	9327      	str	r3, [sp, #156]	; 0x9c
			temp_meas.a2xyz[j] = a2cal[i][j];
    d578:	4b44      	ldr	r3, [pc, #272]	; (d68c <cal_write_report+0x548>)
		inc_raw = temp_meas.inclination;
    d57a:	920f      	str	r2, [sp, #60]	; 0x3c
			temp_meas.a2xyz[j] = a2cal[i][j];
    d57c:	1919      	adds	r1, r3, r4
    d57e:	680b      	ldr	r3, [r1, #0]
    d580:	360c      	adds	r6, #12
    d582:	932a      	str	r3, [sp, #168]	; 0xa8
			temp_meas.c1xyz[j] = c1cal[i][j];
    d584:	4b42      	ldr	r3, [pc, #264]	; (d690 <cal_write_report+0x54c>)
    d586:	191a      	adds	r2, r3, r4
    d588:	6813      	ldr	r3, [r2, #0]
    d58a:	932d      	str	r3, [sp, #180]	; 0xb4
			temp_meas.c2xyz[j] = c2cal[i][j];
    d58c:	4b41      	ldr	r3, [pc, #260]	; (d694 <cal_write_report+0x550>)
    d58e:	191b      	adds	r3, r3, r4
    d590:	681d      	ldr	r5, [r3, #0]
    d592:	340c      	adds	r4, #12
    d594:	9530      	str	r5, [sp, #192]	; 0xc0
			temp_meas.a1xyz[j] = a1cal[i][j];
    d596:	6845      	ldr	r5, [r0, #4]
    d598:	9528      	str	r5, [sp, #160]	; 0xa0
			temp_meas.a2xyz[j] = a2cal[i][j];
    d59a:	684d      	ldr	r5, [r1, #4]
    d59c:	952b      	str	r5, [sp, #172]	; 0xac
			temp_meas.c1xyz[j] = c1cal[i][j];
    d59e:	6855      	ldr	r5, [r2, #4]
    d5a0:	952e      	str	r5, [sp, #184]	; 0xb8
			temp_meas.c2xyz[j] = c2cal[i][j];
    d5a2:	685d      	ldr	r5, [r3, #4]
    d5a4:	9531      	str	r5, [sp, #196]	; 0xc4
			temp_meas.a1xyz[j] = a1cal[i][j];
    d5a6:	6885      	ldr	r5, [r0, #8]
    d5a8:	9529      	str	r5, [sp, #164]	; 0xa4
			temp_meas.a2xyz[j] = a2cal[i][j];
    d5aa:	688d      	ldr	r5, [r1, #8]
    d5ac:	952c      	str	r5, [sp, #176]	; 0xb0
			temp_meas.c1xyz[j] = c1cal[i][j];
    d5ae:	6895      	ldr	r5, [r2, #8]
    d5b0:	952f      	str	r5, [sp, #188]	; 0xbc
			temp_meas.c2xyz[j] = c2cal[i][j];
    d5b2:	689d      	ldr	r5, [r3, #8]
    d5b4:	9511      	str	r5, [sp, #68]	; 0x44
    d5b6:	9532      	str	r5, [sp, #200]	; 0xc8
		calc_orientation(&temp_meas);
    d5b8:	ad1f      	add	r5, sp, #124	; 0x7c
    d5ba:	0028      	movs	r0, r5
    d5bc:	4d31      	ldr	r5, [pc, #196]	; (d684 <cal_write_report+0x540>)
    d5be:	47a8      	blx	r5
		group_current = floor(i/group_size)+1;
    d5c0:	464d      	mov	r5, r9
    d5c2:	08a8      	lsrs	r0, r5, #2
    d5c4:	4d34      	ldr	r5, [pc, #208]	; (d698 <cal_write_report+0x554>)
    d5c6:	47a8      	blx	r5
    d5c8:	2200      	movs	r2, #0
    d5ca:	4b34      	ldr	r3, [pc, #208]	; (d69c <cal_write_report+0x558>)
    d5cc:	4d34      	ldr	r5, [pc, #208]	; (d6a0 <cal_write_report+0x55c>)
    d5ce:	47a8      	blx	r5
    d5d0:	4d34      	ldr	r5, [pc, #208]	; (d6a4 <cal_write_report+0x560>)
    d5d2:	47a8      	blx	r5
		sprintf(write_str1,"%-2d,    %-2d,      %03.2f,   %03.2f,      %03.2f,   %03.2f,   %03.2f,      %03.2f\r\n",
    d5d4:	2501      	movs	r5, #1
    d5d6:	46ac      	mov	ip, r5
		group_current = floor(i/group_size)+1;
    d5d8:	9011      	str	r0, [sp, #68]	; 0x44
		sprintf(write_str1,"%-2d,    %-2d,      %03.2f,   %03.2f,      %03.2f,   %03.2f,   %03.2f,      %03.2f\r\n",
    d5da:	9824      	ldr	r0, [sp, #144]	; 0x90
    d5dc:	44e1      	add	r9, ip
    d5de:	47b8      	blx	r7
    d5e0:	900a      	str	r0, [sp, #40]	; 0x28
    d5e2:	910b      	str	r1, [sp, #44]	; 0x2c
    d5e4:	9823      	ldr	r0, [sp, #140]	; 0x8c
    d5e6:	47b8      	blx	r7
    d5e8:	9008      	str	r0, [sp, #32]
    d5ea:	9109      	str	r1, [sp, #36]	; 0x24
    d5ec:	9822      	ldr	r0, [sp, #136]	; 0x88
    d5ee:	47b8      	blx	r7
    d5f0:	9006      	str	r0, [sp, #24]
    d5f2:	9107      	str	r1, [sp, #28]
    d5f4:	9810      	ldr	r0, [sp, #64]	; 0x40
    d5f6:	e057      	b.n	d6a8 <cal_write_report+0x564>
    d5f8:	200020e8 	.word	0x200020e8
    d5fc:	0001f101 	.word	0x0001f101
    d600:	00023b78 	.word	0x00023b78
    d604:	0001f1e5 	.word	0x0001f1e5
    d608:	00006629 	.word	0x00006629
    d60c:	20002e30 	.word	0x20002e30
    d610:	0001eddd 	.word	0x0001eddd
    d614:	00023bd8 	.word	0x00023bd8
    d618:	00023bf4 	.word	0x00023bf4
    d61c:	00023c20 	.word	0x00023c20
    d620:	0001cba9 	.word	0x0001cba9
    d624:	42c80000 	.word	0x42c80000
    d628:	00023c7c 	.word	0x00023c7c
    d62c:	00023d0c 	.word	0x00023d0c
    d630:	00023d50 	.word	0x00023d50
    d634:	00023d80 	.word	0x00023d80
    d638:	200051f4 	.word	0x200051f4
    d63c:	00023df8 	.word	0x00023df8
    d640:	0001f189 	.word	0x0001f189
    d644:	00023e28 	.word	0x00023e28
    d648:	00024d14 	.word	0x00024d14
    d64c:	00023e60 	.word	0x00023e60
    d650:	00023ed0 	.word	0x00023ed0
    d654:	0001f145 	.word	0x0001f145
    d658:	00023f54 	.word	0x00023f54
    d65c:	0001efe9 	.word	0x0001efe9
    d660:	00023f74 	.word	0x00023f74
    d664:	00000225 	.word	0x00000225
    d668:	00023fb4 	.word	0x00023fb4
    d66c:	00000262 	.word	0x00000262
    d670:	20003054 	.word	0x20003054
    d674:	2000228c 	.word	0x2000228c
    d678:	20004410 	.word	0x20004410
    d67c:	20005254 	.word	0x20005254
    d680:	200026b0 	.word	0x200026b0
    d684:	0000cef1 	.word	0x0000cef1
    d688:	20003cc0 	.word	0x20003cc0
    d68c:	20004e30 	.word	0x20004e30
    d690:	20002a70 	.word	0x20002a70
    d694:	200038f8 	.word	0x200038f8
    d698:	0001ed6d 	.word	0x0001ed6d
    d69c:	3ff00000 	.word	0x3ff00000
    d6a0:	0001d28d 	.word	0x0001d28d
    d6a4:	0001c469 	.word	0x0001c469
    d6a8:	47b8      	blx	r7
    d6aa:	9004      	str	r0, [sp, #16]
    d6ac:	9105      	str	r1, [sp, #20]
    d6ae:	980f      	ldr	r0, [sp, #60]	; 0x3c
    d6b0:	47b8      	blx	r7
    d6b2:	9002      	str	r0, [sp, #8]
    d6b4:	9103      	str	r1, [sp, #12]
    d6b6:	980e      	ldr	r0, [sp, #56]	; 0x38
    d6b8:	47b8      	blx	r7
    d6ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d6bc:	9000      	str	r0, [sp, #0]
    d6be:	9101      	str	r1, [sp, #4]
    d6c0:	464b      	mov	r3, r9
    d6c2:	494c      	ldr	r1, [pc, #304]	; (d7f4 <cal_write_report+0x6b0>)
    d6c4:	4d4c      	ldr	r5, [pc, #304]	; (d7f8 <cal_write_report+0x6b4>)
    d6c6:	4640      	mov	r0, r8
    d6c8:	47a8      	blx	r5
		fdebug3 = f_write(&file_cal_report, write_str1, strlen(write_str1), pbw);
    d6ca:	4b4c      	ldr	r3, [pc, #304]	; (d7fc <cal_write_report+0x6b8>)
    d6cc:	4640      	mov	r0, r8
    d6ce:	4798      	blx	r3
    d6d0:	ab12      	add	r3, sp, #72	; 0x48
    d6d2:	0002      	movs	r2, r0
    d6d4:	4641      	mov	r1, r8
    d6d6:	484a      	ldr	r0, [pc, #296]	; (d800 <cal_write_report+0x6bc>)
    d6d8:	4d4a      	ldr	r5, [pc, #296]	; (d804 <cal_write_report+0x6c0>)
    d6da:	47a8      	blx	r5
    d6dc:	230c      	movs	r3, #12
    d6de:	469c      	mov	ip, r3
    d6e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d6e2:	44e3      	add	fp, ip
    d6e4:	330c      	adds	r3, #12
    d6e6:	930d      	str	r3, [sp, #52]	; 0x34
	for (i=0;i<n_points;i++){
    d6e8:	4653      	mov	r3, sl
    d6ea:	681b      	ldr	r3, [r3, #0]
    d6ec:	454b      	cmp	r3, r9
    d6ee:	d900      	bls.n	d6f2 <cal_write_report+0x5ae>
    d6f0:	e717      	b.n	d522 <cal_write_report+0x3de>
    d6f2:	4681      	mov	r9, r0
	f_close(&file_cal_report);
    d6f4:	4b44      	ldr	r3, [pc, #272]	; (d808 <cal_write_report+0x6c4>)
    d6f6:	4842      	ldr	r0, [pc, #264]	; (d800 <cal_write_report+0x6bc>)
    d6f8:	469b      	mov	fp, r3
    d6fa:	4798      	blx	r3
	sprintf(file_name, "20%02x%02x%02x_%02x%02x%02x_calibration_raw_data.bin", current_time.year, current_time.month, current_time.date,
    d6fc:	4943      	ldr	r1, [pc, #268]	; (d80c <cal_write_report+0x6c8>)
    d6fe:	4b43      	ldr	r3, [pc, #268]	; (d80c <cal_write_report+0x6c8>)
    d700:	7809      	ldrb	r1, [r1, #0]
    d702:	4a42      	ldr	r2, [pc, #264]	; (d80c <cal_write_report+0x6c8>)
    d704:	795b      	ldrb	r3, [r3, #5]
    d706:	7992      	ldrb	r2, [r2, #6]
    d708:	9103      	str	r1, [sp, #12]
    d70a:	4940      	ldr	r1, [pc, #256]	; (d80c <cal_write_report+0x6c8>)
    d70c:	a849      	add	r0, sp, #292	; 0x124
    d70e:	7849      	ldrb	r1, [r1, #1]
    d710:	4c39      	ldr	r4, [pc, #228]	; (d7f8 <cal_write_report+0x6b4>)
    d712:	9102      	str	r1, [sp, #8]
    d714:	493d      	ldr	r1, [pc, #244]	; (d80c <cal_write_report+0x6c8>)
    d716:	7889      	ldrb	r1, [r1, #2]
    d718:	9101      	str	r1, [sp, #4]
    d71a:	493c      	ldr	r1, [pc, #240]	; (d80c <cal_write_report+0x6c8>)
    d71c:	7909      	ldrb	r1, [r1, #4]
    d71e:	9100      	str	r1, [sp, #0]
    d720:	493b      	ldr	r1, [pc, #236]	; (d810 <cal_write_report+0x6cc>)
    d722:	47a0      	blx	r4
	fdebug2 = f_open(&file_cal_raw, file_name, FA_CREATE_NEW | FA_READ | FA_WRITE);
    d724:	2207      	movs	r2, #7
    d726:	a949      	add	r1, sp, #292	; 0x124
    d728:	483a      	ldr	r0, [pc, #232]	; (d814 <cal_write_report+0x6d0>)
    d72a:	4b3b      	ldr	r3, [pc, #236]	; (d818 <cal_write_report+0x6d4>)
    d72c:	4798      	blx	r3
    d72e:	4680      	mov	r8, r0
	if(fdebug2 != FR_OK){
    d730:	2800      	cmp	r0, #0
    d732:	d000      	beq.n	d736 <cal_write_report+0x5f2>
    d734:	e540      	b.n	d1b8 <cal_write_report+0x74>
	for (i=0;i<n_points;i++){
    d736:	4653      	mov	r3, sl
    d738:	681b      	ldr	r3, [r3, #0]
    d73a:	46c8      	mov	r8, r9
    d73c:	2b00      	cmp	r3, #0
    d73e:	d035      	beq.n	d7ac <cal_write_report+0x668>
    d740:	2300      	movs	r3, #0
    d742:	4c36      	ldr	r4, [pc, #216]	; (d81c <cal_write_report+0x6d8>)
    d744:	4699      	mov	r9, r3
    d746:	46a0      	mov	r8, r4
    d748:	4f35      	ldr	r7, [pc, #212]	; (d820 <cal_write_report+0x6dc>)
    d74a:	4e36      	ldr	r6, [pc, #216]	; (d824 <cal_write_report+0x6e0>)
    d74c:	4d36      	ldr	r5, [pc, #216]	; (d828 <cal_write_report+0x6e4>)
			raw_data_entry[k] = a1raw[i][k];
    d74e:	683b      	ldr	r3, [r7, #0]
		fdebug3 = f_write(&file_cal_raw, raw_data_entry, sizeof(raw_data_entry), pbw);
    d750:	2230      	movs	r2, #48	; 0x30
			raw_data_entry[k] = a1raw[i][k];
    d752:	9313      	str	r3, [sp, #76]	; 0x4c
			raw_data_entry[k+3] = a2raw[i][k];
    d754:	6833      	ldr	r3, [r6, #0]
		fdebug3 = f_write(&file_cal_raw, raw_data_entry, sizeof(raw_data_entry), pbw);
    d756:	a913      	add	r1, sp, #76	; 0x4c
			raw_data_entry[k+3] = a2raw[i][k];
    d758:	9316      	str	r3, [sp, #88]	; 0x58
			raw_data_entry[k+6] = c1raw[i][k];
    d75a:	682b      	ldr	r3, [r5, #0]
		fdebug3 = f_write(&file_cal_raw, raw_data_entry, sizeof(raw_data_entry), pbw);
    d75c:	482d      	ldr	r0, [pc, #180]	; (d814 <cal_write_report+0x6d0>)
			raw_data_entry[k+6] = c1raw[i][k];
    d75e:	9319      	str	r3, [sp, #100]	; 0x64
			raw_data_entry[k+9] = c2raw[i][k];
    d760:	4643      	mov	r3, r8
    d762:	681b      	ldr	r3, [r3, #0]
		fdebug3 = f_write(&file_cal_raw, raw_data_entry, sizeof(raw_data_entry), pbw);
    d764:	4c27      	ldr	r4, [pc, #156]	; (d804 <cal_write_report+0x6c0>)
			raw_data_entry[k+9] = c2raw[i][k];
    d766:	931c      	str	r3, [sp, #112]	; 0x70
			raw_data_entry[k] = a1raw[i][k];
    d768:	687b      	ldr	r3, [r7, #4]
    d76a:	9314      	str	r3, [sp, #80]	; 0x50
			raw_data_entry[k+3] = a2raw[i][k];
    d76c:	6873      	ldr	r3, [r6, #4]
    d76e:	9317      	str	r3, [sp, #92]	; 0x5c
			raw_data_entry[k+6] = c1raw[i][k];
    d770:	686b      	ldr	r3, [r5, #4]
    d772:	931a      	str	r3, [sp, #104]	; 0x68
			raw_data_entry[k+9] = c2raw[i][k];
    d774:	4643      	mov	r3, r8
    d776:	685b      	ldr	r3, [r3, #4]
    d778:	931d      	str	r3, [sp, #116]	; 0x74
			raw_data_entry[k] = a1raw[i][k];
    d77a:	68bb      	ldr	r3, [r7, #8]
    d77c:	370c      	adds	r7, #12
    d77e:	9315      	str	r3, [sp, #84]	; 0x54
			raw_data_entry[k+3] = a2raw[i][k];
    d780:	68b3      	ldr	r3, [r6, #8]
    d782:	360c      	adds	r6, #12
    d784:	9318      	str	r3, [sp, #96]	; 0x60
			raw_data_entry[k+6] = c1raw[i][k];
    d786:	68ab      	ldr	r3, [r5, #8]
    d788:	350c      	adds	r5, #12
    d78a:	931b      	str	r3, [sp, #108]	; 0x6c
			raw_data_entry[k+9] = c2raw[i][k];
    d78c:	4643      	mov	r3, r8
    d78e:	689b      	ldr	r3, [r3, #8]
    d790:	931e      	str	r3, [sp, #120]	; 0x78
		fdebug3 = f_write(&file_cal_raw, raw_data_entry, sizeof(raw_data_entry), pbw);
    d792:	ab12      	add	r3, sp, #72	; 0x48
    d794:	47a0      	blx	r4
	for (i=0;i<n_points;i++){
    d796:	2301      	movs	r3, #1
    d798:	469c      	mov	ip, r3
    d79a:	330b      	adds	r3, #11
    d79c:	44e1      	add	r9, ip
    d79e:	469c      	mov	ip, r3
    d7a0:	4653      	mov	r3, sl
    d7a2:	681b      	ldr	r3, [r3, #0]
    d7a4:	44e0      	add	r8, ip
    d7a6:	454b      	cmp	r3, r9
    d7a8:	d8d1      	bhi.n	d74e <cal_write_report+0x60a>
    d7aa:	4680      	mov	r8, r0
	f_close(&file_cal_raw);
    d7ac:	4819      	ldr	r0, [pc, #100]	; (d814 <cal_write_report+0x6d0>)
    d7ae:	47d8      	blx	fp
	return fdebug3;
    d7b0:	e505      	b.n	d1be <cal_write_report+0x7a>
				sprintf(write_str1,"Inclinometer 2 Calibration:\r\n");
    d7b2:	4642      	mov	r2, r8
    d7b4:	4b1d      	ldr	r3, [pc, #116]	; (d82c <cal_write_report+0x6e8>)
				pcal_struct = &a2_calst;
    d7b6:	4e1e      	ldr	r6, [pc, #120]	; (d830 <cal_write_report+0x6ec>)
				sprintf(write_str1,"Inclinometer 2 Calibration:\r\n");
    d7b8:	cb13      	ldmia	r3!, {r0, r1, r4}
    d7ba:	c213      	stmia	r2!, {r0, r1, r4}
    d7bc:	cb13      	ldmia	r3!, {r0, r1, r4}
    d7be:	c213      	stmia	r2!, {r0, r1, r4}
    d7c0:	6819      	ldr	r1, [r3, #0]
    d7c2:	6011      	str	r1, [r2, #0]
    d7c4:	889b      	ldrh	r3, [r3, #4]
    d7c6:	8093      	strh	r3, [r2, #4]
				break;
    d7c8:	e5f6      	b.n	d3b8 <cal_write_report+0x274>
				sprintf(write_str1,"Compass 2 Calibration:\r\n");
    d7ca:	4643      	mov	r3, r8
    d7cc:	4a19      	ldr	r2, [pc, #100]	; (d834 <cal_write_report+0x6f0>)
				pcal_struct = &c2_calst;
    d7ce:	4e1a      	ldr	r6, [pc, #104]	; (d838 <cal_write_report+0x6f4>)
				sprintf(write_str1,"Compass 2 Calibration:\r\n");
    d7d0:	ca13      	ldmia	r2!, {r0, r1, r4}
    d7d2:	c313      	stmia	r3!, {r0, r1, r4}
    d7d4:	ca13      	ldmia	r2!, {r0, r1, r4}
    d7d6:	c313      	stmia	r3!, {r0, r1, r4}
    d7d8:	7812      	ldrb	r2, [r2, #0]
    d7da:	701a      	strb	r2, [r3, #0]
				break;
    d7dc:	e5ec      	b.n	d3b8 <cal_write_report+0x274>
				sprintf(write_str1,"Compass 1 Calibration:\r\n");
    d7de:	4643      	mov	r3, r8
    d7e0:	4a16      	ldr	r2, [pc, #88]	; (d83c <cal_write_report+0x6f8>)
				pcal_struct = &c1_calst;
    d7e2:	4e17      	ldr	r6, [pc, #92]	; (d840 <cal_write_report+0x6fc>)
				sprintf(write_str1,"Compass 1 Calibration:\r\n");
    d7e4:	ca13      	ldmia	r2!, {r0, r1, r4}
    d7e6:	c313      	stmia	r3!, {r0, r1, r4}
    d7e8:	ca13      	ldmia	r2!, {r0, r1, r4}
    d7ea:	c313      	stmia	r3!, {r0, r1, r4}
    d7ec:	7812      	ldrb	r2, [r2, #0]
    d7ee:	701a      	strb	r2, [r3, #0]
				break;
    d7f0:	e5e2      	b.n	d3b8 <cal_write_report+0x274>
    d7f2:	46c0      	nop			; (mov r8, r8)
    d7f4:	00024004 	.word	0x00024004
    d7f8:	0001f101 	.word	0x0001f101
    d7fc:	0001f1e5 	.word	0x0001f1e5
    d800:	20002e30 	.word	0x20002e30
    d804:	00006629 	.word	0x00006629
    d808:	00006929 	.word	0x00006929
    d80c:	200010cc 	.word	0x200010cc
    d810:	0002405c 	.word	0x0002405c
    d814:	20004080 	.word	0x20004080
    d818:	00005f9d 	.word	0x00005f9d
    d81c:	200026b0 	.word	0x200026b0
    d820:	20005254 	.word	0x20005254
    d824:	20004410 	.word	0x20004410
    d828:	2000228c 	.word	0x2000228c
    d82c:	00023da0 	.word	0x00023da0
    d830:	20004dd0 	.word	0x20004dd0
    d834:	00023ddc 	.word	0x00023ddc
    d838:	20002650 	.word	0x20002650
    d83c:	00023dc0 	.word	0x00023dc0
    d840:	200036fc 	.word	0x200036fc

0000d844 <calc_azm_inc_roll_dec>:
void calc_azm_inc_roll_dec(float aXYZ[3], float cXYZ[3], float *azimuthP, float *inclinationP, float *rollP, float *declinationP){
    d844:	b5f0      	push	{r4, r5, r6, r7, lr}
    d846:	46de      	mov	lr, fp
    d848:	4657      	mov	r7, sl
    d84a:	464e      	mov	r6, r9
    d84c:	4645      	mov	r5, r8
    d84e:	4682      	mov	sl, r0
    d850:	b5e0      	push	{r5, r6, r7, lr}
    d852:	b08d      	sub	sp, #52	; 0x34
    d854:	9207      	str	r2, [sp, #28]
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
    d856:	4a6d      	ldr	r2, [pc, #436]	; (da0c <calc_azm_inc_roll_dec+0x1c8>)
void calc_azm_inc_roll_dec(float aXYZ[3], float cXYZ[3], float *azimuthP, float *inclinationP, float *rollP, float *declinationP){
    d858:	9306      	str	r3, [sp, #24]
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
    d85a:	4690      	mov	r8, r2
    d85c:	6840      	ldr	r0, [r0, #4]
void calc_azm_inc_roll_dec(float aXYZ[3], float cXYZ[3], float *azimuthP, float *inclinationP, float *rollP, float *declinationP){
    d85e:	9105      	str	r1, [sp, #20]
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
    d860:	47c0      	blx	r8
    d862:	4652      	mov	r2, sl
    d864:	0004      	movs	r4, r0
    d866:	6890      	ldr	r0, [r2, #8]
    d868:	000d      	movs	r5, r1
    d86a:	47c0      	blx	r8
    d86c:	4a68      	ldr	r2, [pc, #416]	; (da10 <calc_azm_inc_roll_dec+0x1cc>)
    d86e:	0006      	movs	r6, r0
    d870:	4691      	mov	r9, r2
    d872:	000f      	movs	r7, r1
    d874:	0022      	movs	r2, r4
    d876:	002b      	movs	r3, r5
    d878:	0020      	movs	r0, r4
    d87a:	0029      	movs	r1, r5
    d87c:	47c8      	blx	r9
    d87e:	0032      	movs	r2, r6
    d880:	0004      	movs	r4, r0
    d882:	000d      	movs	r5, r1
    d884:	003b      	movs	r3, r7
    d886:	0030      	movs	r0, r6
    d888:	0039      	movs	r1, r7
    d88a:	47c8      	blx	r9
    d88c:	000b      	movs	r3, r1
    d88e:	0002      	movs	r2, r0
    d890:	0029      	movs	r1, r5
    d892:	0020      	movs	r0, r4
    d894:	4c5f      	ldr	r4, [pc, #380]	; (da14 <calc_azm_inc_roll_dec+0x1d0>)
    d896:	47a0      	blx	r4
    d898:	4a5f      	ldr	r2, [pc, #380]	; (da18 <calc_azm_inc_roll_dec+0x1d4>)
    d89a:	4790      	blx	r2
	*thetaX = rad2deg*atan2(XYZ[1], XYZ[2]);
    d89c:	4a5f      	ldr	r2, [pc, #380]	; (da1c <calc_azm_inc_roll_dec+0x1d8>)
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
    d89e:	9000      	str	r0, [sp, #0]
    d8a0:	9101      	str	r1, [sp, #4]
	*thetaX = rad2deg*atan2(XYZ[1], XYZ[2]);
    d8a2:	6810      	ldr	r0, [r2, #0]
    d8a4:	4693      	mov	fp, r2
    d8a6:	47c0      	blx	r8
    d8a8:	4652      	mov	r2, sl
    d8aa:	0006      	movs	r6, r0
    d8ac:	6890      	ldr	r0, [r2, #8]
    d8ae:	000f      	movs	r7, r1
    d8b0:	47c0      	blx	r8
    d8b2:	4652      	mov	r2, sl
    d8b4:	0004      	movs	r4, r0
    d8b6:	000d      	movs	r5, r1
    d8b8:	6850      	ldr	r0, [r2, #4]
    d8ba:	47c0      	blx	r8
    d8bc:	0022      	movs	r2, r4
    d8be:	002b      	movs	r3, r5
    d8c0:	4c57      	ldr	r4, [pc, #348]	; (da20 <calc_azm_inc_roll_dec+0x1dc>)
    d8c2:	47a0      	blx	r4
    d8c4:	000b      	movs	r3, r1
    d8c6:	0002      	movs	r2, r0
    d8c8:	0039      	movs	r1, r7
    d8ca:	0030      	movs	r0, r6
    d8cc:	47c8      	blx	r9
    d8ce:	4a55      	ldr	r2, [pc, #340]	; (da24 <calc_azm_inc_roll_dec+0x1e0>)
    d8d0:	4790      	blx	r2
	*thetaY = -1*rad2deg*atan2(XYZ[0], ryz);
    d8d2:	2180      	movs	r1, #128	; 0x80
    d8d4:	465a      	mov	r2, fp
    d8d6:	0609      	lsls	r1, r1, #24
    d8d8:	468c      	mov	ip, r1
    d8da:	6812      	ldr	r2, [r2, #0]
	*thetaX = rad2deg*atan2(XYZ[1], XYZ[2]);
    d8dc:	1c06      	adds	r6, r0, #0
	*thetaY = -1*rad2deg*atan2(XYZ[0], ryz);
    d8de:	4462      	add	r2, ip
    d8e0:	0010      	movs	r0, r2
    d8e2:	47c0      	blx	r8
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
    d8e4:	4a4f      	ldr	r2, [pc, #316]	; (da24 <calc_azm_inc_roll_dec+0x1e0>)
	*thetaY = -1*rad2deg*atan2(XYZ[0], ryz);
    d8e6:	9002      	str	r0, [sp, #8]
    d8e8:	9103      	str	r1, [sp, #12]
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
    d8ea:	9800      	ldr	r0, [sp, #0]
    d8ec:	9901      	ldr	r1, [sp, #4]
    d8ee:	4790      	blx	r2
	*thetaY = -1*rad2deg*atan2(XYZ[0], ryz);
    d8f0:	47c0      	blx	r8
    d8f2:	4652      	mov	r2, sl
    d8f4:	0004      	movs	r4, r0
    d8f6:	000d      	movs	r5, r1
    d8f8:	6810      	ldr	r0, [r2, #0]
    d8fa:	47c0      	blx	r8
    d8fc:	0022      	movs	r2, r4
    d8fe:	002b      	movs	r3, r5
    d900:	4c47      	ldr	r4, [pc, #284]	; (da20 <calc_azm_inc_roll_dec+0x1dc>)
    d902:	47a0      	blx	r4
    d904:	000b      	movs	r3, r1
    d906:	0002      	movs	r2, r0
    d908:	9802      	ldr	r0, [sp, #8]
    d90a:	9903      	ldr	r1, [sp, #12]
    d90c:	47c8      	blx	r9
    d90e:	4a45      	ldr	r2, [pc, #276]	; (da24 <calc_azm_inc_roll_dec+0x1e0>)
    d910:	4790      	blx	r2
	*inclinationP = -1*thetaY;
    d912:	2280      	movs	r2, #128	; 0x80
    d914:	0612      	lsls	r2, r2, #24
    d916:	1883      	adds	r3, r0, r2
    d918:	9a06      	ldr	r2, [sp, #24]
	*thetaY = -1*rad2deg*atan2(XYZ[0], ryz);
    d91a:	1c04      	adds	r4, r0, #0
	*inclinationP = -1*thetaY;
    d91c:	6013      	str	r3, [r2, #0]
	if ((*rollP)<0){
    d91e:	4b42      	ldr	r3, [pc, #264]	; (da28 <calc_azm_inc_roll_dec+0x1e4>)
    d920:	2100      	movs	r1, #0
    d922:	1c30      	adds	r0, r6, #0
    d924:	469a      	mov	sl, r3
    d926:	4798      	blx	r3
    d928:	2800      	cmp	r0, #0
    d92a:	d167      	bne.n	d9fc <calc_azm_inc_roll_dec+0x1b8>
	*rollP = thetaX;
    d92c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    d92e:	601e      	str	r6, [r3, #0]
	rotvec_theta_XY(cXYZ, crotXYZ, thetaX, thetaY);
    d930:	1c32      	adds	r2, r6, #0
    d932:	1c23      	adds	r3, r4, #0
    d934:	a909      	add	r1, sp, #36	; 0x24
    d936:	9805      	ldr	r0, [sp, #20]
    d938:	4c3c      	ldr	r4, [pc, #240]	; (da2c <calc_azm_inc_roll_dec+0x1e8>)
    d93a:	47a0      	blx	r4
	*azimuthP = rad2deg*atan2(crotXYZ[1], crotXYZ[0]);
    d93c:	465b      	mov	r3, fp
    d93e:	6818      	ldr	r0, [r3, #0]
    d940:	47c0      	blx	r8
    d942:	0006      	movs	r6, r0
    d944:	9809      	ldr	r0, [sp, #36]	; 0x24
    d946:	000f      	movs	r7, r1
    d948:	47c0      	blx	r8
    d94a:	0004      	movs	r4, r0
    d94c:	000d      	movs	r5, r1
    d94e:	980a      	ldr	r0, [sp, #40]	; 0x28
    d950:	47c0      	blx	r8
    d952:	0022      	movs	r2, r4
    d954:	002b      	movs	r3, r5
    d956:	4c32      	ldr	r4, [pc, #200]	; (da20 <calc_azm_inc_roll_dec+0x1dc>)
    d958:	47a0      	blx	r4
    d95a:	0002      	movs	r2, r0
    d95c:	000b      	movs	r3, r1
    d95e:	0030      	movs	r0, r6
    d960:	0039      	movs	r1, r7
    d962:	47c8      	blx	r9
    d964:	4b2f      	ldr	r3, [pc, #188]	; (da24 <calc_azm_inc_roll_dec+0x1e0>)
    d966:	4798      	blx	r3
	if ((*azimuthP)<0){
    d968:	2100      	movs	r1, #0
	*azimuthP = rad2deg*atan2(crotXYZ[1], crotXYZ[0]);
    d96a:	1c04      	adds	r4, r0, #0
	if ((*azimuthP)<0){
    d96c:	47d0      	blx	sl
    d96e:	2800      	cmp	r0, #0
    d970:	d13d      	bne.n	d9ee <calc_azm_inc_roll_dec+0x1aa>
	*azimuthP = rad2deg*atan2(crotXYZ[1], crotXYZ[0]);
    d972:	9b07      	ldr	r3, [sp, #28]
    d974:	601c      	str	r4, [r3, #0]
	crxy= sqrt(pow(crotXYZ[0],2)+pow(crotXYZ[1],2));
    d976:	9809      	ldr	r0, [sp, #36]	; 0x24
    d978:	47c0      	blx	r8
    d97a:	0004      	movs	r4, r0
    d97c:	980a      	ldr	r0, [sp, #40]	; 0x28
    d97e:	000d      	movs	r5, r1
    d980:	47c0      	blx	r8
    d982:	0002      	movs	r2, r0
    d984:	000b      	movs	r3, r1
    d986:	47c8      	blx	r9
    d988:	0022      	movs	r2, r4
    d98a:	0006      	movs	r6, r0
    d98c:	000f      	movs	r7, r1
    d98e:	002b      	movs	r3, r5
    d990:	0020      	movs	r0, r4
    d992:	0029      	movs	r1, r5
    d994:	47c8      	blx	r9
    d996:	4c1f      	ldr	r4, [pc, #124]	; (da14 <calc_azm_inc_roll_dec+0x1d0>)
    d998:	0002      	movs	r2, r0
    d99a:	000b      	movs	r3, r1
    d99c:	0030      	movs	r0, r6
    d99e:	0039      	movs	r1, r7
    d9a0:	47a0      	blx	r4
    d9a2:	4b1d      	ldr	r3, [pc, #116]	; (da18 <calc_azm_inc_roll_dec+0x1d4>)
    d9a4:	4798      	blx	r3
	*declinationP = rad2deg*atan2(crotXYZ[2], crxy);
    d9a6:	465b      	mov	r3, fp
	crxy= sqrt(pow(crotXYZ[0],2)+pow(crotXYZ[1],2));
    d9a8:	0004      	movs	r4, r0
	*declinationP = rad2deg*atan2(crotXYZ[2], crxy);
    d9aa:	6818      	ldr	r0, [r3, #0]
	crxy= sqrt(pow(crotXYZ[0],2)+pow(crotXYZ[1],2));
    d9ac:	000d      	movs	r5, r1
	*declinationP = rad2deg*atan2(crotXYZ[2], crxy);
    d9ae:	47c0      	blx	r8
	crxy= sqrt(pow(crotXYZ[0],2)+pow(crotXYZ[1],2));
    d9b0:	4b1c      	ldr	r3, [pc, #112]	; (da24 <calc_azm_inc_roll_dec+0x1e0>)
	*declinationP = rad2deg*atan2(crotXYZ[2], crxy);
    d9b2:	0006      	movs	r6, r0
    d9b4:	000f      	movs	r7, r1
	crxy= sqrt(pow(crotXYZ[0],2)+pow(crotXYZ[1],2));
    d9b6:	0020      	movs	r0, r4
    d9b8:	0029      	movs	r1, r5
    d9ba:	4798      	blx	r3
	*declinationP = rad2deg*atan2(crotXYZ[2], crxy);
    d9bc:	47c0      	blx	r8
    d9be:	0004      	movs	r4, r0
    d9c0:	000d      	movs	r5, r1
    d9c2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d9c4:	47c0      	blx	r8
    d9c6:	0022      	movs	r2, r4
    d9c8:	002b      	movs	r3, r5
    d9ca:	4c15      	ldr	r4, [pc, #84]	; (da20 <calc_azm_inc_roll_dec+0x1dc>)
    d9cc:	47a0      	blx	r4
    d9ce:	0002      	movs	r2, r0
    d9d0:	000b      	movs	r3, r1
    d9d2:	0030      	movs	r0, r6
    d9d4:	0039      	movs	r1, r7
    d9d6:	47c8      	blx	r9
    d9d8:	4b12      	ldr	r3, [pc, #72]	; (da24 <calc_azm_inc_roll_dec+0x1e0>)
    d9da:	4798      	blx	r3
    d9dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    d9de:	6018      	str	r0, [r3, #0]
}
    d9e0:	b00d      	add	sp, #52	; 0x34
    d9e2:	bc3c      	pop	{r2, r3, r4, r5}
    d9e4:	4690      	mov	r8, r2
    d9e6:	4699      	mov	r9, r3
    d9e8:	46a2      	mov	sl, r4
    d9ea:	46ab      	mov	fp, r5
    d9ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*azimuthP = *azimuthP+360;
    d9ee:	4b10      	ldr	r3, [pc, #64]	; (da30 <calc_azm_inc_roll_dec+0x1ec>)
    d9f0:	4910      	ldr	r1, [pc, #64]	; (da34 <calc_azm_inc_roll_dec+0x1f0>)
    d9f2:	1c20      	adds	r0, r4, #0
    d9f4:	4798      	blx	r3
    d9f6:	9b07      	ldr	r3, [sp, #28]
    d9f8:	6018      	str	r0, [r3, #0]
    d9fa:	e7bc      	b.n	d976 <calc_azm_inc_roll_dec+0x132>
		*rollP = *rollP+360;
    d9fc:	4b0c      	ldr	r3, [pc, #48]	; (da30 <calc_azm_inc_roll_dec+0x1ec>)
    d9fe:	490d      	ldr	r1, [pc, #52]	; (da34 <calc_azm_inc_roll_dec+0x1f0>)
    da00:	1c30      	adds	r0, r6, #0
    da02:	4798      	blx	r3
    da04:	9b16      	ldr	r3, [sp, #88]	; 0x58
    da06:	6018      	str	r0, [r3, #0]
    da08:	e792      	b.n	d930 <calc_azm_inc_roll_dec+0xec>
    da0a:	46c0      	nop			; (mov r8, r8)
    da0c:	0001eddd 	.word	0x0001eddd
    da10:	0001e115 	.word	0x0001e115
    da14:	0001d28d 	.word	0x0001d28d
    da18:	000199b5 	.word	0x000199b5
    da1c:	00024d14 	.word	0x00024d14
    da20:	00019655 	.word	0x00019655
    da24:	0001ee81 	.word	0x0001ee81
    da28:	0001c319 	.word	0x0001c319
    da2c:	0000cd81 	.word	0x0000cd81
    da30:	0001c4a5 	.word	0x0001c4a5
    da34:	43b40000 	.word	0x43b40000

0000da38 <calc_mag_stdev>:
	sumsq = sqrt(sumsq);
	
	return sumsq;
}

float calc_mag_stdev(float XYZ[nbuf][3]){
    da38:	b5f0      	push	{r4, r5, r6, r7, lr}
    da3a:	46de      	mov	lr, fp
    da3c:	4657      	mov	r7, sl
    da3e:	464e      	mov	r6, r9
    da40:	4645      	mov	r5, r8
    da42:	b5e0      	push	{r5, r6, r7, lr}
	float err_mag[nbuf];
	uint32_t p;
	float temp1;
	
	for (p=0;p<n_points;p++){
    da44:	4b66      	ldr	r3, [pc, #408]	; (dbe0 <calc_mag_stdev+0x1a8>)
float calc_mag_stdev(float XYZ[nbuf][3]){
    da46:	b0d7      	sub	sp, #348	; 0x15c
	for (p=0;p<n_points;p++){
    da48:	681b      	ldr	r3, [r3, #0]
    da4a:	9300      	str	r3, [sp, #0]
    da4c:	2b00      	cmp	r3, #0
    da4e:	d100      	bne.n	da52 <calc_mag_stdev+0x1a>
    da50:	e0b7      	b.n	dbc2 <calc_mag_stdev+0x18a>
    da52:	2300      	movs	r3, #0
    da54:	4680      	mov	r8, r0
    da56:	4699      	mov	r9, r3
    da58:	4b62      	ldr	r3, [pc, #392]	; (dbe4 <calc_mag_stdev+0x1ac>)
    da5a:	469a      	mov	sl, r3
    da5c:	4b62      	ldr	r3, [pc, #392]	; (dbe8 <calc_mag_stdev+0x1b0>)
    da5e:	469b      	mov	fp, r3
    da60:	4b62      	ldr	r3, [pc, #392]	; (dbec <calc_mag_stdev+0x1b4>)
    da62:	9303      	str	r3, [sp, #12]
    da64:	4b62      	ldr	r3, [pc, #392]	; (dbf0 <calc_mag_stdev+0x1b8>)
    da66:	9302      	str	r3, [sp, #8]
		temp1 = sqrt(pow(XYZ[p][0],2)+pow(XYZ[p][1],2)+pow(XYZ[p][2],2));
    da68:	4643      	mov	r3, r8
    da6a:	6818      	ldr	r0, [r3, #0]
    da6c:	47d0      	blx	sl
    da6e:	4643      	mov	r3, r8
    da70:	0004      	movs	r4, r0
    da72:	6858      	ldr	r0, [r3, #4]
    da74:	000d      	movs	r5, r1
    da76:	47d0      	blx	sl
    da78:	4643      	mov	r3, r8
    da7a:	0006      	movs	r6, r0
    da7c:	6898      	ldr	r0, [r3, #8]
    da7e:	000f      	movs	r7, r1
    da80:	47d0      	blx	sl
    da82:	0022      	movs	r2, r4
    da84:	9000      	str	r0, [sp, #0]
    da86:	9101      	str	r1, [sp, #4]
    da88:	002b      	movs	r3, r5
    da8a:	0020      	movs	r0, r4
    da8c:	0029      	movs	r1, r5
    da8e:	47d8      	blx	fp
    da90:	0032      	movs	r2, r6
    da92:	0004      	movs	r4, r0
    da94:	000d      	movs	r5, r1
    da96:	003b      	movs	r3, r7
    da98:	0030      	movs	r0, r6
    da9a:	0039      	movs	r1, r7
    da9c:	47d8      	blx	fp
    da9e:	0002      	movs	r2, r0
    daa0:	000b      	movs	r3, r1
    daa2:	0020      	movs	r0, r4
    daa4:	0029      	movs	r1, r5
    daa6:	4c53      	ldr	r4, [pc, #332]	; (dbf4 <calc_mag_stdev+0x1bc>)
    daa8:	47a0      	blx	r4
    daaa:	0004      	movs	r4, r0
    daac:	000d      	movs	r5, r1
    daae:	9800      	ldr	r0, [sp, #0]
    dab0:	9901      	ldr	r1, [sp, #4]
    dab2:	0002      	movs	r2, r0
    dab4:	000b      	movs	r3, r1
    dab6:	47d8      	blx	fp
    dab8:	0002      	movs	r2, r0
    daba:	000b      	movs	r3, r1
    dabc:	0020      	movs	r0, r4
    dabe:	0029      	movs	r1, r5
    dac0:	4c4c      	ldr	r4, [pc, #304]	; (dbf4 <calc_mag_stdev+0x1bc>)
    dac2:	47a0      	blx	r4
    dac4:	9b03      	ldr	r3, [sp, #12]
    dac6:	4798      	blx	r3
		err_mag[p] = temp1-1;
    dac8:	464b      	mov	r3, r9
    daca:	009c      	lsls	r4, r3, #2
		temp1 = sqrt(pow(XYZ[p][0],2)+pow(XYZ[p][1],2)+pow(XYZ[p][2],2));
    dacc:	9b02      	ldr	r3, [sp, #8]
    dace:	4798      	blx	r3
		err_mag[p] = temp1-1;
    dad0:	21fe      	movs	r1, #254	; 0xfe
    dad2:	4b49      	ldr	r3, [pc, #292]	; (dbf8 <calc_mag_stdev+0x1c0>)
    dad4:	0589      	lsls	r1, r1, #22
    dad6:	4798      	blx	r3
    dad8:	ab06      	add	r3, sp, #24
    dada:	5118      	str	r0, [r3, r4]
	for (p=0;p<n_points;p++){
    dadc:	2301      	movs	r3, #1
    dade:	469c      	mov	ip, r3
    dae0:	4b3f      	ldr	r3, [pc, #252]	; (dbe0 <calc_mag_stdev+0x1a8>)
    dae2:	44e1      	add	r9, ip
    dae4:	681e      	ldr	r6, [r3, #0]
    dae6:	230c      	movs	r3, #12
    dae8:	469c      	mov	ip, r3
    daea:	44e0      	add	r8, ip
    daec:	454e      	cmp	r6, r9
    daee:	d8bb      	bhi.n	da68 <calc_mag_stdev+0x30>
	for (i=0;i<n_meas;i++){
    daf0:	2e00      	cmp	r6, #0
    daf2:	d05c      	beq.n	dbae <calc_mag_stdev+0x176>
    daf4:	2700      	movs	r7, #0
    daf6:	2400      	movs	r4, #0
    daf8:	2500      	movs	r5, #0
    dafa:	2300      	movs	r3, #0
		mean = mean+data[i];
    dafc:	aa56      	add	r2, sp, #344	; 0x158
    dafe:	4694      	mov	ip, r2
    db00:	009b      	lsls	r3, r3, #2
    db02:	4463      	add	r3, ip
    db04:	3b41      	subs	r3, #65	; 0x41
    db06:	3bff      	subs	r3, #255	; 0xff
    db08:	6818      	ldr	r0, [r3, #0]
    db0a:	47d0      	blx	sl
    db0c:	000b      	movs	r3, r1
    db0e:	0002      	movs	r2, r0
    db10:	0029      	movs	r1, r5
    db12:	0020      	movs	r0, r4
    db14:	4c37      	ldr	r4, [pc, #220]	; (dbf4 <calc_mag_stdev+0x1bc>)
    db16:	47a0      	blx	r4
	for (i=0;i<n_meas;i++){
    db18:	3701      	adds	r7, #1
    db1a:	b2ff      	uxtb	r7, r7
		mean = mean+data[i];
    db1c:	0004      	movs	r4, r0
    db1e:	000d      	movs	r5, r1
	for (i=0;i<n_meas;i++){
    db20:	003b      	movs	r3, r7
    db22:	42be      	cmp	r6, r7
    db24:	d8ea      	bhi.n	dafc <calc_mag_stdev+0xc4>
    db26:	4f35      	ldr	r7, [pc, #212]	; (dbfc <calc_mag_stdev+0x1c4>)
    db28:	1e70      	subs	r0, r6, #1
    db2a:	47b8      	blx	r7
    db2c:	9004      	str	r0, [sp, #16]
    db2e:	9105      	str	r1, [sp, #20]
	mean = mean/n_meas;
    db30:	0030      	movs	r0, r6
    db32:	47b8      	blx	r7
    db34:	4f32      	ldr	r7, [pc, #200]	; (dc00 <calc_mag_stdev+0x1c8>)
    db36:	0002      	movs	r2, r0
    db38:	000b      	movs	r3, r1
    db3a:	0020      	movs	r0, r4
    db3c:	0029      	movs	r1, r5
    db3e:	47b8      	blx	r7
    db40:	2200      	movs	r2, #0
    db42:	2300      	movs	r3, #0
    db44:	9000      	str	r0, [sp, #0]
    db46:	9101      	str	r1, [sp, #4]
    db48:	0011      	movs	r1, r2
    db4a:	001a      	movs	r2, r3
    db4c:	46b0      	mov	r8, r6
    db4e:	46b9      	mov	r9, r7
    db50:	2400      	movs	r4, #0
    db52:	2300      	movs	r3, #0
    db54:	000e      	movs	r6, r1
    db56:	0017      	movs	r7, r2
    db58:	4d2a      	ldr	r5, [pc, #168]	; (dc04 <calc_mag_stdev+0x1cc>)
		sumsq = sumsq+pow((data[i]-mean),2);
    db5a:	aa56      	add	r2, sp, #344	; 0x158
    db5c:	4694      	mov	ip, r2
    db5e:	009b      	lsls	r3, r3, #2
    db60:	4463      	add	r3, ip
    db62:	3b41      	subs	r3, #65	; 0x41
    db64:	3bff      	subs	r3, #255	; 0xff
    db66:	6818      	ldr	r0, [r3, #0]
    db68:	47d0      	blx	sl
    db6a:	9a00      	ldr	r2, [sp, #0]
    db6c:	9b01      	ldr	r3, [sp, #4]
    db6e:	47a8      	blx	r5
    db70:	0002      	movs	r2, r0
    db72:	000b      	movs	r3, r1
    db74:	47d8      	blx	fp
    db76:	000b      	movs	r3, r1
    db78:	0002      	movs	r2, r0
    db7a:	0039      	movs	r1, r7
    db7c:	0030      	movs	r0, r6
    db7e:	4e1d      	ldr	r6, [pc, #116]	; (dbf4 <calc_mag_stdev+0x1bc>)
    db80:	47b0      	blx	r6
	for (i=0;i<n_meas;i++){
    db82:	3401      	adds	r4, #1
    db84:	b2e4      	uxtb	r4, r4
		sumsq = sumsq+pow((data[i]-mean),2);
    db86:	0006      	movs	r6, r0
    db88:	000f      	movs	r7, r1
	for (i=0;i<n_meas;i++){
    db8a:	0023      	movs	r3, r4
    db8c:	45a0      	cmp	r8, r4
    db8e:	d8e4      	bhi.n	db5a <calc_mag_stdev+0x122>
    db90:	464f      	mov	r7, r9
	sumsq = sumsq/(n_meas-1);
    db92:	9a04      	ldr	r2, [sp, #16]
    db94:	9b05      	ldr	r3, [sp, #20]
    db96:	47b8      	blx	r7
	sumsq = sqrt(sumsq);
    db98:	9b03      	ldr	r3, [sp, #12]
    db9a:	4798      	blx	r3
	return sumsq;
    db9c:	9b02      	ldr	r3, [sp, #8]
    db9e:	4798      	blx	r3
	}
	temp1 = stdev(err_mag, n_points);
	
	return temp1;
}
    dba0:	b057      	add	sp, #348	; 0x15c
    dba2:	bc3c      	pop	{r2, r3, r4, r5}
    dba4:	4690      	mov	r8, r2
    dba6:	4699      	mov	r9, r3
    dba8:	46a2      	mov	sl, r4
    dbaa:	46ab      	mov	fp, r5
    dbac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dbae:	4b16      	ldr	r3, [pc, #88]	; (dc08 <calc_mag_stdev+0x1d0>)
    dbb0:	4c16      	ldr	r4, [pc, #88]	; (dc0c <calc_mag_stdev+0x1d4>)
    dbb2:	4f13      	ldr	r7, [pc, #76]	; (dc00 <calc_mag_stdev+0x1c8>)
    dbb4:	9304      	str	r3, [sp, #16]
    dbb6:	9405      	str	r4, [sp, #20]
	sumsq = 0;
    dbb8:	2300      	movs	r3, #0
    dbba:	2400      	movs	r4, #0
    dbbc:	0018      	movs	r0, r3
    dbbe:	0021      	movs	r1, r4
    dbc0:	e7e7      	b.n	db92 <calc_mag_stdev+0x15a>
	for (p=0;p<n_points;p++){
    dbc2:	4b11      	ldr	r3, [pc, #68]	; (dc08 <calc_mag_stdev+0x1d0>)
    dbc4:	4c11      	ldr	r4, [pc, #68]	; (dc0c <calc_mag_stdev+0x1d4>)
    dbc6:	4f0e      	ldr	r7, [pc, #56]	; (dc00 <calc_mag_stdev+0x1c8>)
    dbc8:	9304      	str	r3, [sp, #16]
    dbca:	9405      	str	r4, [sp, #20]
	sumsq = 0;
    dbcc:	2300      	movs	r3, #0
    dbce:	2400      	movs	r4, #0
    dbd0:	0018      	movs	r0, r3
    dbd2:	4b06      	ldr	r3, [pc, #24]	; (dbec <calc_mag_stdev+0x1b4>)
    dbd4:	0021      	movs	r1, r4
    dbd6:	9303      	str	r3, [sp, #12]
    dbd8:	4b05      	ldr	r3, [pc, #20]	; (dbf0 <calc_mag_stdev+0x1b8>)
    dbda:	9302      	str	r3, [sp, #8]
    dbdc:	e7d9      	b.n	db92 <calc_mag_stdev+0x15a>
    dbde:	46c0      	nop			; (mov r8, r8)
    dbe0:	20003054 	.word	0x20003054
    dbe4:	0001eddd 	.word	0x0001eddd
    dbe8:	0001e115 	.word	0x0001e115
    dbec:	000199b5 	.word	0x000199b5
    dbf0:	0001ee81 	.word	0x0001ee81
    dbf4:	0001d28d 	.word	0x0001d28d
    dbf8:	0001cde9 	.word	0x0001cde9
    dbfc:	0001ed6d 	.word	0x0001ed6d
    dc00:	0001d8ad 	.word	0x0001d8ad
    dc04:	0001e615 	.word	0x0001e615
    dc08:	ffe00000 	.word	0xffe00000
    dc0c:	41efffff 	.word	0x41efffff

0000dc10 <cal_evaluate>:
void cal_evaluate(void){
    dc10:	b5f0      	push	{r4, r5, r6, r7, lr}
    dc12:	46de      	mov	lr, fp
    dc14:	4645      	mov	r5, r8
    dc16:	4657      	mov	r7, sl
    dc18:	464e      	mov	r6, r9
    dc1a:	b5e0      	push	{r5, r6, r7, lr}
    dc1c:	4cf0      	ldr	r4, [pc, #960]	; (dfe0 <cal_evaluate+0x3d0>)
	get_time();//  Get current time
    dc1e:	4bf1      	ldr	r3, [pc, #964]	; (dfe4 <cal_evaluate+0x3d4>)
void cal_evaluate(void){
    dc20:	44a5      	add	sp, r4
	get_time();//  Get current time
    dc22:	4798      	blx	r3
	cal_report_azm_inc.timestamp = gen_posix_time(&current_time);
    dc24:	4cf0      	ldr	r4, [pc, #960]	; (dfe8 <cal_evaluate+0x3d8>)
    dc26:	4bf1      	ldr	r3, [pc, #964]	; (dfec <cal_evaluate+0x3dc>)
    dc28:	0020      	movs	r0, r4
    dc2a:	4798      	blx	r3
    dc2c:	4bf0      	ldr	r3, [pc, #960]	; (dff0 <cal_evaluate+0x3e0>)
	cal_report_azm_inc.groups = n_groups;
    dc2e:	49f0      	ldr	r1, [pc, #960]	; (dff0 <cal_evaluate+0x3e0>)
	cal_report_azm_inc.timestamp = gen_posix_time(&current_time);
    dc30:	60d8      	str	r0, [r3, #12]
	cal_report_azm_inc.software_version = software_version;
    dc32:	4bf0      	ldr	r3, [pc, #960]	; (dff4 <cal_evaluate+0x3e4>)
    dc34:	681b      	ldr	r3, [r3, #0]
    dc36:	9302      	str	r3, [sp, #8]
    dc38:	9a02      	ldr	r2, [sp, #8]
    dc3a:	4bed      	ldr	r3, [pc, #948]	; (dff0 <cal_evaluate+0x3e0>)
    dc3c:	601a      	str	r2, [r3, #0]
	cal_report_azm_inc.points = n_points;
    dc3e:	4bee      	ldr	r3, [pc, #952]	; (dff8 <cal_evaluate+0x3e8>)
    dc40:	681a      	ldr	r2, [r3, #0]
    dc42:	4beb      	ldr	r3, [pc, #940]	; (dff0 <cal_evaluate+0x3e0>)
    dc44:	609a      	str	r2, [r3, #8]
	cal_report_azm_inc.groups = n_groups;
    dc46:	4bed      	ldr	r3, [pc, #948]	; (dffc <cal_evaluate+0x3ec>)
    dc48:	681b      	ldr	r3, [r3, #0]
    dc4a:	9319      	str	r3, [sp, #100]	; 0x64
    dc4c:	604b      	str	r3, [r1, #4]
	memcpy(&cal_report_azm_inc.time_struct,&current_time,sizeof(current_time));
    dc4e:	000b      	movs	r3, r1
    dc50:	3340      	adds	r3, #64	; 0x40
    dc52:	cc23      	ldmia	r4!, {r0, r1, r5}
    dc54:	c323      	stmia	r3!, {r0, r1, r5}
    dc56:	cc03      	ldmia	r4!, {r0, r1}
    dc58:	c303      	stmia	r3!, {r0, r1}
	for (p=0;p<n_points;p++){
    dc5a:	2a00      	cmp	r2, #0
    dc5c:	d101      	bne.n	dc62 <cal_evaluate+0x52>
    dc5e:	f000 fc35 	bl	e4cc <cal_evaluate+0x8bc>
    dc62:	4be7      	ldr	r3, [pc, #924]	; (e000 <cal_evaluate+0x3f0>)
    dc64:	4fe7      	ldr	r7, [pc, #924]	; (e004 <cal_evaluate+0x3f4>)
    dc66:	469b      	mov	fp, r3
    dc68:	931a      	str	r3, [sp, #104]	; 0x68
    dc6a:	4be7      	ldr	r3, [pc, #924]	; (e008 <cal_evaluate+0x3f8>)
	calc_azm_inc_roll_dec(aXYZ, cXYZ,
    dc6c:	003a      	movs	r2, r7
    dc6e:	931b      	str	r3, [sp, #108]	; 0x6c
    dc70:	001d      	movs	r5, r3
    dc72:	4be6      	ldr	r3, [pc, #920]	; (e00c <cal_evaluate+0x3fc>)
    dc74:	4ee6      	ldr	r6, [pc, #920]	; (e010 <cal_evaluate+0x400>)
    dc76:	4699      	mov	r9, r3
    dc78:	931c      	str	r3, [sp, #112]	; 0x70
    dc7a:	4be6      	ldr	r3, [pc, #920]	; (e014 <cal_evaluate+0x404>)
    dc7c:	ace8      	add	r4, sp, #928	; 0x3a0
    dc7e:	4698      	mov	r8, r3
    dc80:	931d      	str	r3, [sp, #116]	; 0x74
	for (p=0;p<n_points;p++){
    dc82:	2300      	movs	r3, #0
    dc84:	9304      	str	r3, [sp, #16]
    dc86:	ab98      	add	r3, sp, #608	; 0x260
    dc88:	469a      	mov	sl, r3
    dc8a:	4be3      	ldr	r3, [pc, #908]	; (e018 <cal_evaluate+0x408>)
	calc_azm_inc_roll_dec(aXYZ, cXYZ,
    dc8c:	4647      	mov	r7, r8
    dc8e:	9313      	str	r3, [sp, #76]	; 0x4c
    dc90:	4be2      	ldr	r3, [pc, #904]	; (e01c <cal_evaluate+0x40c>)
    dc92:	46d0      	mov	r8, sl
    dc94:	9312      	str	r3, [sp, #72]	; 0x48
    dc96:	464b      	mov	r3, r9
    dc98:	4692      	mov	sl, r2
    dc9a:	46a1      	mov	r9, r4
    dc9c:	465c      	mov	r4, fp
    dc9e:	46b3      	mov	fp, r6
    dca0:	9302      	str	r3, [sp, #8]
			temp_meas.a1xyz[i] = a1cal[p][i];
    dca2:	6823      	ldr	r3, [r4, #0]
			temp_meas.c1xyz[i] = c1cal[p][i];
    dca4:	9e02      	ldr	r6, [sp, #8]
			temp_meas.a1xyz[i] = a1cal[p][i];
    dca6:	9326      	str	r3, [sp, #152]	; 0x98
			temp_meas.a2xyz[i] = a2cal[p][i];
    dca8:	682b      	ldr	r3, [r5, #0]
			temp_meas.c2xyz[i] = c2cal[p][i];
    dcaa:	683a      	ldr	r2, [r7, #0]
			temp_meas.a2xyz[i] = a2cal[p][i];
    dcac:	9329      	str	r3, [sp, #164]	; 0xa4
			temp_meas.c1xyz[i] = c1cal[p][i];
    dcae:	6833      	ldr	r3, [r6, #0]
			temp_meas.a1xyz[i] = a1cal[p][i];
    dcb0:	6861      	ldr	r1, [r4, #4]
			temp_meas.c1xyz[i] = c1cal[p][i];
    dcb2:	9306      	str	r3, [sp, #24]
    dcb4:	932c      	str	r3, [sp, #176]	; 0xb0
			temp_meas.c2xyz[i] = c2cal[p][i];
    dcb6:	9209      	str	r2, [sp, #36]	; 0x24
			temp_meas.c1xyz[i] = c1cal[p][i];
    dcb8:	6873      	ldr	r3, [r6, #4]
			temp_meas.c2xyz[i] = c2cal[p][i];
    dcba:	922f      	str	r2, [sp, #188]	; 0xbc
    dcbc:	687a      	ldr	r2, [r7, #4]
			temp_meas.a2xyz[i] = a2cal[p][i];
    dcbe:	6868      	ldr	r0, [r5, #4]
			temp_meas.a1xyz[i] = a1cal[p][i];
    dcc0:	910a      	str	r1, [sp, #40]	; 0x28
    dcc2:	9127      	str	r1, [sp, #156]	; 0x9c
			temp_meas.c1xyz[i] = c1cal[p][i];
    dcc4:	930c      	str	r3, [sp, #48]	; 0x30
    dcc6:	68b1      	ldr	r1, [r6, #8]
    dcc8:	932d      	str	r3, [sp, #180]	; 0xb4
			temp_meas.c2xyz[i] = c2cal[p][i];
    dcca:	920e      	str	r2, [sp, #56]	; 0x38
			temp_meas.a1xyz[i] = a1cal[p][i];
    dccc:	68a3      	ldr	r3, [r4, #8]
			temp_meas.c2xyz[i] = c2cal[p][i];
    dcce:	9230      	str	r2, [sp, #192]	; 0xc0
			temp_meas.a2xyz[i] = a2cal[p][i];
    dcd0:	68aa      	ldr	r2, [r5, #8]
    dcd2:	900b      	str	r0, [sp, #44]	; 0x2c
    dcd4:	9210      	str	r2, [sp, #64]	; 0x40
    dcd6:	922b      	str	r2, [sp, #172]	; 0xac
    dcd8:	902a      	str	r0, [sp, #168]	; 0xa8
			temp_meas.c1xyz[i] = c1cal[p][i];
    dcda:	9111      	str	r1, [sp, #68]	; 0x44
    dcdc:	912e      	str	r1, [sp, #184]	; 0xb8
			temp_meas.a1xyz[i] = a1cal[p][i];
    dcde:	930f      	str	r3, [sp, #60]	; 0x3c
    dce0:	9328      	str	r3, [sp, #160]	; 0xa0
			temp_meas.c2xyz[i] = c2cal[p][i];
    dce2:	68bb      	ldr	r3, [r7, #8]
		aXYZ[i] = 0.5*(meas_inst->a1xyz[i]+meas_inst->a2xyz[i]);
    dce4:	6829      	ldr	r1, [r5, #0]
			temp_meas.c2xyz[i] = c2cal[p][i];
    dce6:	9331      	str	r3, [sp, #196]	; 0xc4
		aXYZ[i] = 0.5*(meas_inst->a1xyz[i]+meas_inst->a2xyz[i]);
    dce8:	6820      	ldr	r0, [r4, #0]
			temp_meas.c2xyz[i] = c2cal[p][i];
    dcea:	1c1e      	adds	r6, r3, #0
		aXYZ[i] = 0.5*(meas_inst->a1xyz[i]+meas_inst->a2xyz[i]);
    dcec:	47d0      	blx	sl
    dcee:	21fc      	movs	r1, #252	; 0xfc
    dcf0:	0589      	lsls	r1, r1, #22
    dcf2:	47d8      	blx	fp
    dcf4:	4642      	mov	r2, r8
		cXYZ[i] = 0.5*(meas_inst->c1xyz[i]+meas_inst->c2xyz[i]);
    dcf6:	9909      	ldr	r1, [sp, #36]	; 0x24
		aXYZ[i] = 0.5*(meas_inst->a1xyz[i]+meas_inst->a2xyz[i]);
    dcf8:	6010      	str	r0, [r2, #0]
		cXYZ[i] = 0.5*(meas_inst->c1xyz[i]+meas_inst->c2xyz[i]);
    dcfa:	9806      	ldr	r0, [sp, #24]
    dcfc:	47d0      	blx	sl
    dcfe:	21fc      	movs	r1, #252	; 0xfc
    dd00:	0589      	lsls	r1, r1, #22
    dd02:	47d8      	blx	fp
    dd04:	464a      	mov	r2, r9
		aXYZ[i] = 0.5*(meas_inst->a1xyz[i]+meas_inst->a2xyz[i]);
    dd06:	990b      	ldr	r1, [sp, #44]	; 0x2c
		cXYZ[i] = 0.5*(meas_inst->c1xyz[i]+meas_inst->c2xyz[i]);
    dd08:	6010      	str	r0, [r2, #0]
		aXYZ[i] = 0.5*(meas_inst->a1xyz[i]+meas_inst->a2xyz[i]);
    dd0a:	980a      	ldr	r0, [sp, #40]	; 0x28
    dd0c:	47d0      	blx	sl
    dd0e:	21fc      	movs	r1, #252	; 0xfc
    dd10:	0589      	lsls	r1, r1, #22
    dd12:	47d8      	blx	fp
    dd14:	4642      	mov	r2, r8
		cXYZ[i] = 0.5*(meas_inst->c1xyz[i]+meas_inst->c2xyz[i]);
    dd16:	990e      	ldr	r1, [sp, #56]	; 0x38
		aXYZ[i] = 0.5*(meas_inst->a1xyz[i]+meas_inst->a2xyz[i]);
    dd18:	6050      	str	r0, [r2, #4]
		cXYZ[i] = 0.5*(meas_inst->c1xyz[i]+meas_inst->c2xyz[i]);
    dd1a:	980c      	ldr	r0, [sp, #48]	; 0x30
    dd1c:	47d0      	blx	sl
    dd1e:	21fc      	movs	r1, #252	; 0xfc
    dd20:	0589      	lsls	r1, r1, #22
    dd22:	47d8      	blx	fp
    dd24:	464a      	mov	r2, r9
		aXYZ[i] = 0.5*(meas_inst->a1xyz[i]+meas_inst->a2xyz[i]);
    dd26:	9910      	ldr	r1, [sp, #64]	; 0x40
		cXYZ[i] = 0.5*(meas_inst->c1xyz[i]+meas_inst->c2xyz[i]);
    dd28:	6050      	str	r0, [r2, #4]
		aXYZ[i] = 0.5*(meas_inst->a1xyz[i]+meas_inst->a2xyz[i]);
    dd2a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    dd2c:	47d0      	blx	sl
    dd2e:	21fc      	movs	r1, #252	; 0xfc
    dd30:	0589      	lsls	r1, r1, #22
    dd32:	47d8      	blx	fp
    dd34:	4642      	mov	r2, r8
		cXYZ[i] = 0.5*(meas_inst->c1xyz[i]+meas_inst->c2xyz[i]);
    dd36:	1c31      	adds	r1, r6, #0
		aXYZ[i] = 0.5*(meas_inst->a1xyz[i]+meas_inst->a2xyz[i]);
    dd38:	6090      	str	r0, [r2, #8]
		cXYZ[i] = 0.5*(meas_inst->c1xyz[i]+meas_inst->c2xyz[i]);
    dd3a:	9811      	ldr	r0, [sp, #68]	; 0x44
    dd3c:	47d0      	blx	sl
    dd3e:	21fc      	movs	r1, #252	; 0xfc
    dd40:	0589      	lsls	r1, r1, #22
    dd42:	47d8      	blx	fp
    dd44:	464b      	mov	r3, r9
    dd46:	6098      	str	r0, [r3, #8]
	calc_azm_inc_roll_dec(aXYZ, cXYZ,
    dd48:	abe8      	add	r3, sp, #928	; 0x3a0
    dd4a:	4699      	mov	r9, r3
    dd4c:	ab98      	add	r3, sp, #608	; 0x260
    dd4e:	4698      	mov	r8, r3
    dd50:	ab24      	add	r3, sp, #144	; 0x90
    dd52:	9301      	str	r3, [sp, #4]
    dd54:	ab23      	add	r3, sp, #140	; 0x8c
    dd56:	9300      	str	r3, [sp, #0]
    dd58:	aa21      	add	r2, sp, #132	; 0x84
    dd5a:	ab22      	add	r3, sp, #136	; 0x88
    dd5c:	4649      	mov	r1, r9
    dd5e:	4640      	mov	r0, r8
    dd60:	4eaf      	ldr	r6, [pc, #700]	; (e020 <cal_evaluate+0x410>)
    dd62:	47b0      	blx	r6
		azimuth[p] = temp_meas.azimuth;
    dd64:	9921      	ldr	r1, [sp, #132]	; 0x84
    dd66:	9a04      	ldr	r2, [sp, #16]
    dd68:	9104      	str	r1, [sp, #16]
    dd6a:	9804      	ldr	r0, [sp, #16]
    dd6c:	9913      	ldr	r1, [sp, #76]	; 0x4c
    dd6e:	0093      	lsls	r3, r2, #2
    dd70:	5058      	str	r0, [r3, r1]
		inclination[p] = temp_meas.inclination;
    dd72:	9922      	ldr	r1, [sp, #136]	; 0x88
    dd74:	340c      	adds	r4, #12
    dd76:	9104      	str	r1, [sp, #16]
    dd78:	9804      	ldr	r0, [sp, #16]
    dd7a:	9912      	ldr	r1, [sp, #72]	; 0x48
    dd7c:	350c      	adds	r5, #12
    dd7e:	5058      	str	r0, [r3, r1]
		roll[p] = temp_meas.roll;
    dd80:	9923      	ldr	r1, [sp, #140]	; 0x8c
    dd82:	370c      	adds	r7, #12
    dd84:	9104      	str	r1, [sp, #16]
    dd86:	9804      	ldr	r0, [sp, #16]
    dd88:	49a6      	ldr	r1, [pc, #664]	; (e024 <cal_evaluate+0x414>)
    dd8a:	50c8      	str	r0, [r1, r3]
	for (p=0;p<n_points;p++){
    dd8c:	0013      	movs	r3, r2
    dd8e:	3301      	adds	r3, #1
    dd90:	001a      	movs	r2, r3
    dd92:	9304      	str	r3, [sp, #16]
    dd94:	4b98      	ldr	r3, [pc, #608]	; (dff8 <cal_evaluate+0x3e8>)
    dd96:	9902      	ldr	r1, [sp, #8]
    dd98:	681b      	ldr	r3, [r3, #0]
    dd9a:	310c      	adds	r1, #12
    dd9c:	9102      	str	r1, [sp, #8]
    dd9e:	4293      	cmp	r3, r2
    dda0:	d900      	bls.n	dda4 <cal_evaluate+0x194>
    dda2:	e77e      	b.n	dca2 <cal_evaluate+0x92>
    dda4:	9319      	str	r3, [sp, #100]	; 0x64
    dda6:	4b95      	ldr	r3, [pc, #596]	; (dffc <cal_evaluate+0x3ec>)
    dda8:	4657      	mov	r7, sl
    ddaa:	681b      	ldr	r3, [r3, #0]
    ddac:	46c2      	mov	sl, r8
    ddae:	465e      	mov	r6, fp
	for (g=0;g<n_groups;g++){
    ddb0:	2b00      	cmp	r3, #0
    ddb2:	d100      	bne.n	ddb6 <cal_evaluate+0x1a6>
    ddb4:	e368      	b.n	e488 <cal_evaluate+0x878>
    ddb6:	4a9c      	ldr	r2, [pc, #624]	; (e028 <cal_evaluate+0x418>)
    ddb8:	011b      	lsls	r3, r3, #4
    ddba:	6812      	ldr	r2, [r2, #0]
    ddbc:	4651      	mov	r1, sl
    ddbe:	9214      	str	r2, [sp, #80]	; 0x50
    ddc0:	9a12      	ldr	r2, [sp, #72]	; 0x48
				if (azm_group[k]<20){
    ddc2:	9618      	str	r6, [sp, #96]	; 0x60
    ddc4:	4690      	mov	r8, r2
    ddc6:	4443      	add	r3, r8
    ddc8:	9315      	str	r3, [sp, #84]	; 0x54
	for (p=0;p<n_points;p++){
    ddca:	2303      	movs	r3, #3
    ddcc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    ddce:	9310      	str	r3, [sp, #64]	; 0x40
    ddd0:	4b96      	ldr	r3, [pc, #600]	; (e02c <cal_evaluate+0x41c>)
    ddd2:	4691      	mov	r9, r2
    ddd4:	aa48      	add	r2, sp, #288	; 0x120
				if (azm_group[k]<20){
    ddd6:	4646      	mov	r6, r8
    ddd8:	469b      	mov	fp, r3
    ddda:	4690      	mov	r8, r2
    dddc:	4894      	ldr	r0, [pc, #592]	; (e030 <cal_evaluate+0x420>)
    ddde:	9117      	str	r1, [sp, #92]	; 0x5c
    dde0:	9004      	str	r0, [sp, #16]
    dde2:	4894      	ldr	r0, [pc, #592]	; (e034 <cal_evaluate+0x424>)
    dde4:	9016      	str	r0, [sp, #88]	; 0x58
    dde6:	4894      	ldr	r0, [pc, #592]	; (e038 <cal_evaluate+0x428>)
    dde8:	900a      	str	r0, [sp, #40]	; 0x28
			inc_group[k] = inclination[ind1];
    ddea:	6833      	ldr	r3, [r6, #0]
			if (azm_group[k]>340){
    ddec:	4993      	ldr	r1, [pc, #588]	; (e03c <cal_evaluate+0x42c>)
			inc_group[k] = inclination[ind1];
    ddee:	9306      	str	r3, [sp, #24]
			azm_group[k] = azimuth[ind1];
    ddf0:	464b      	mov	r3, r9
    ddf2:	681b      	ldr	r3, [r3, #0]
			if (azm_group[k]>340){
    ddf4:	2401      	movs	r4, #1
			azm_group[k] = azimuth[ind1];
    ddf6:	930b      	str	r3, [sp, #44]	; 0x2c
    ddf8:	1c1d      	adds	r5, r3, #0
			inc_group[k] = inclination[ind1];
    ddfa:	6873      	ldr	r3, [r6, #4]
    ddfc:	9311      	str	r3, [sp, #68]	; 0x44
			azm_group[k] = azimuth[ind1];
    ddfe:	464b      	mov	r3, r9
    de00:	685b      	ldr	r3, [r3, #4]
    de02:	930c      	str	r3, [sp, #48]	; 0x30
			if (azm_group[k]>340){
    de04:	1c18      	adds	r0, r3, #0
    de06:	4b8e      	ldr	r3, [pc, #568]	; (e040 <cal_evaluate+0x430>)
    de08:	4798      	blx	r3
    de0a:	2800      	cmp	r0, #0
    de0c:	d107      	bne.n	de1e <cal_evaluate+0x20e>
    de0e:	498b      	ldr	r1, [pc, #556]	; (e03c <cal_evaluate+0x42c>)
    de10:	1c28      	adds	r0, r5, #0
    de12:	4b8b      	ldr	r3, [pc, #556]	; (e040 <cal_evaluate+0x430>)
    de14:	4798      	blx	r3
    de16:	2800      	cmp	r0, #0
    de18:	d100      	bne.n	de1c <cal_evaluate+0x20c>
    de1a:	2400      	movs	r4, #0
    de1c:	b2e4      	uxtb	r4, r4
			inc_group[k] = inclination[ind1];
    de1e:	68b3      	ldr	r3, [r6, #8]
			if (azm_group[k]>340){
    de20:	4986      	ldr	r1, [pc, #536]	; (e03c <cal_evaluate+0x42c>)
			inc_group[k] = inclination[ind1];
    de22:	9312      	str	r3, [sp, #72]	; 0x48
			azm_group[k] = azimuth[ind1];
    de24:	464b      	mov	r3, r9
    de26:	689b      	ldr	r3, [r3, #8]
    de28:	930e      	str	r3, [sp, #56]	; 0x38
			if (azm_group[k]>340){
    de2a:	1c18      	adds	r0, r3, #0
    de2c:	4b84      	ldr	r3, [pc, #528]	; (e040 <cal_evaluate+0x430>)
    de2e:	4798      	blx	r3
			inc_group[k] = inclination[ind1];
    de30:	68f3      	ldr	r3, [r6, #12]
    de32:	9313      	str	r3, [sp, #76]	; 0x4c
			azm_group[k] = azimuth[ind1];
    de34:	464b      	mov	r3, r9
    de36:	68db      	ldr	r3, [r3, #12]
    de38:	930f      	str	r3, [sp, #60]	; 0x3c
			if (azm_group[k]>340){
    de3a:	2800      	cmp	r0, #0
    de3c:	d107      	bne.n	de4e <cal_evaluate+0x23e>
    de3e:	1c18      	adds	r0, r3, #0
    de40:	497e      	ldr	r1, [pc, #504]	; (e03c <cal_evaluate+0x42c>)
    de42:	4b7f      	ldr	r3, [pc, #508]	; (e040 <cal_evaluate+0x430>)
    de44:	4798      	blx	r3
    de46:	2800      	cmp	r0, #0
    de48:	d101      	bne.n	de4e <cal_evaluate+0x23e>
		if (wrap_around){
    de4a:	2c00      	cmp	r4, #0
    de4c:	d02b      	beq.n	dea6 <cal_evaluate+0x296>
				if (azm_group[k]<20){
    de4e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    de50:	497c      	ldr	r1, [pc, #496]	; (e044 <cal_evaluate+0x434>)
    de52:	1c20      	adds	r0, r4, #0
    de54:	4b7c      	ldr	r3, [pc, #496]	; (e048 <cal_evaluate+0x438>)
    de56:	4798      	blx	r3
    de58:	2800      	cmp	r0, #0
    de5a:	d003      	beq.n	de64 <cal_evaluate+0x254>
					azm_group[k] = azm_group[k]+360;
    de5c:	497b      	ldr	r1, [pc, #492]	; (e04c <cal_evaluate+0x43c>)
    de5e:	1c20      	adds	r0, r4, #0
    de60:	47b8      	blx	r7
    de62:	900b      	str	r0, [sp, #44]	; 0x2c
				if (azm_group[k]<20){
    de64:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    de66:	4977      	ldr	r1, [pc, #476]	; (e044 <cal_evaluate+0x434>)
    de68:	1c20      	adds	r0, r4, #0
    de6a:	4b77      	ldr	r3, [pc, #476]	; (e048 <cal_evaluate+0x438>)
    de6c:	4798      	blx	r3
    de6e:	2800      	cmp	r0, #0
    de70:	d003      	beq.n	de7a <cal_evaluate+0x26a>
					azm_group[k] = azm_group[k]+360;
    de72:	4976      	ldr	r1, [pc, #472]	; (e04c <cal_evaluate+0x43c>)
    de74:	1c20      	adds	r0, r4, #0
    de76:	47b8      	blx	r7
    de78:	900c      	str	r0, [sp, #48]	; 0x30
				if (azm_group[k]<20){
    de7a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    de7c:	4971      	ldr	r1, [pc, #452]	; (e044 <cal_evaluate+0x434>)
    de7e:	1c20      	adds	r0, r4, #0
    de80:	4b71      	ldr	r3, [pc, #452]	; (e048 <cal_evaluate+0x438>)
    de82:	4798      	blx	r3
    de84:	2800      	cmp	r0, #0
    de86:	d003      	beq.n	de90 <cal_evaluate+0x280>
					azm_group[k] = azm_group[k]+360;
    de88:	4970      	ldr	r1, [pc, #448]	; (e04c <cal_evaluate+0x43c>)
    de8a:	1c20      	adds	r0, r4, #0
    de8c:	47b8      	blx	r7
    de8e:	900e      	str	r0, [sp, #56]	; 0x38
				if (azm_group[k]<20){
    de90:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    de92:	496c      	ldr	r1, [pc, #432]	; (e044 <cal_evaluate+0x434>)
    de94:	1c20      	adds	r0, r4, #0
    de96:	4b6c      	ldr	r3, [pc, #432]	; (e048 <cal_evaluate+0x438>)
    de98:	4798      	blx	r3
    de9a:	2800      	cmp	r0, #0
    de9c:	d003      	beq.n	dea6 <cal_evaluate+0x296>
					azm_group[k] = azm_group[k]+360;
    de9e:	496b      	ldr	r1, [pc, #428]	; (e04c <cal_evaluate+0x43c>)
    dea0:	1c20      	adds	r0, r4, #0
    dea2:	47b8      	blx	r7
    dea4:	900f      	str	r0, [sp, #60]	; 0x3c
			inc_avg = inc_avg + inc_group[k];
    dea6:	9806      	ldr	r0, [sp, #24]
    dea8:	2100      	movs	r1, #0
    deaa:	47b8      	blx	r7
			azm_avg = azm_avg + azm_group[k];
    deac:	2100      	movs	r1, #0
			inc_avg = inc_avg + inc_group[k];
    deae:	1c05      	adds	r5, r0, #0
			azm_avg = azm_avg + azm_group[k];
    deb0:	980b      	ldr	r0, [sp, #44]	; 0x2c
    deb2:	47b8      	blx	r7
			inc_avg = inc_avg + inc_group[k];
    deb4:	9911      	ldr	r1, [sp, #68]	; 0x44
			azm_avg = azm_avg + azm_group[k];
    deb6:	1c04      	adds	r4, r0, #0
			inc_avg = inc_avg + inc_group[k];
    deb8:	1c28      	adds	r0, r5, #0
    deba:	47b8      	blx	r7
			azm_avg = azm_avg + azm_group[k];
    debc:	990c      	ldr	r1, [sp, #48]	; 0x30
			inc_avg = inc_avg + inc_group[k];
    debe:	1c05      	adds	r5, r0, #0
			azm_avg = azm_avg + azm_group[k];
    dec0:	1c20      	adds	r0, r4, #0
    dec2:	47b8      	blx	r7
			inc_avg = inc_avg + inc_group[k];
    dec4:	9912      	ldr	r1, [sp, #72]	; 0x48
			azm_avg = azm_avg + azm_group[k];
    dec6:	1c04      	adds	r4, r0, #0
			inc_avg = inc_avg + inc_group[k];
    dec8:	1c28      	adds	r0, r5, #0
    deca:	47b8      	blx	r7
			azm_avg = azm_avg + azm_group[k];
    decc:	990e      	ldr	r1, [sp, #56]	; 0x38
			inc_avg = inc_avg + inc_group[k];
    dece:	1c05      	adds	r5, r0, #0
			azm_avg = azm_avg + azm_group[k];
    ded0:	1c20      	adds	r0, r4, #0
    ded2:	47b8      	blx	r7
			inc_avg = inc_avg + inc_group[k];
    ded4:	1c29      	adds	r1, r5, #0
			azm_avg = azm_avg + azm_group[k];
    ded6:	1c04      	adds	r4, r0, #0
			inc_avg = inc_avg + inc_group[k];
    ded8:	9813      	ldr	r0, [sp, #76]	; 0x4c
    deda:	47b8      	blx	r7
			azm_avg = azm_avg + azm_group[k];
    dedc:	990f      	ldr	r1, [sp, #60]	; 0x3c
			inc_avg = inc_avg + inc_group[k];
    dede:	1c05      	adds	r5, r0, #0
			azm_avg = azm_avg + azm_group[k];
    dee0:	1c20      	adds	r0, r4, #0
    dee2:	47b8      	blx	r7
		inc_avg = inc_avg/group_size;
    dee4:	21fa      	movs	r1, #250	; 0xfa
			azm_avg = azm_avg + azm_group[k];
    dee6:	1c04      	adds	r4, r0, #0
		inc_avg = inc_avg/group_size;
    dee8:	0589      	lsls	r1, r1, #22
    deea:	1c28      	adds	r0, r5, #0
    deec:	9d18      	ldr	r5, [sp, #96]	; 0x60
    deee:	47a8      	blx	r5
		azm_avg = azm_avg/group_size;
    def0:	21fa      	movs	r1, #250	; 0xfa
		inc_avg = inc_avg/group_size;
    def2:	9002      	str	r0, [sp, #8]
		azm_avg = azm_avg/group_size;
    def4:	0589      	lsls	r1, r1, #22
    def6:	1c20      	adds	r0, r4, #0
    def8:	47a8      	blx	r5
    defa:	002c      	movs	r4, r5
			inc_err_array[ind1] = inc_group[k]-inc_avg;
    defc:	9d02      	ldr	r5, [sp, #8]
		azm_avg = azm_avg/group_size;
    defe:	9009      	str	r0, [sp, #36]	; 0x24
			inc_err_array[ind1] = inc_group[k]-inc_avg;
    df00:	1c29      	adds	r1, r5, #0
    df02:	9806      	ldr	r0, [sp, #24]
    df04:	47d8      	blx	fp
    df06:	4643      	mov	r3, r8
			azm_err_array[ind1] = (azm_group[k]-azm_avg)*cos(inc_avg*deg2rad);
    df08:	9914      	ldr	r1, [sp, #80]	; 0x50
			inc_err_array[ind1] = inc_group[k]-inc_avg;
    df0a:	6018      	str	r0, [r3, #0]
			azm_err_array[ind1] = (azm_group[k]-azm_avg)*cos(inc_avg*deg2rad);
    df0c:	9502      	str	r5, [sp, #8]
    df0e:	1c28      	adds	r0, r5, #0
    df10:	47a0      	blx	r4
    df12:	9d04      	ldr	r5, [sp, #16]
    df14:	47a8      	blx	r5
    df16:	4c4e      	ldr	r4, [pc, #312]	; (e050 <cal_evaluate+0x440>)
    df18:	47a0      	blx	r4
    df1a:	9006      	str	r0, [sp, #24]
    df1c:	9107      	str	r1, [sp, #28]
    df1e:	9909      	ldr	r1, [sp, #36]	; 0x24
    df20:	980b      	ldr	r0, [sp, #44]	; 0x2c
    df22:	47d8      	blx	fp
    df24:	9504      	str	r5, [sp, #16]
    df26:	47a8      	blx	r5
    df28:	9a06      	ldr	r2, [sp, #24]
    df2a:	9b07      	ldr	r3, [sp, #28]
    df2c:	9d16      	ldr	r5, [sp, #88]	; 0x58
    df2e:	47a8      	blx	r5
    df30:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    df32:	47a0      	blx	r4
    df34:	4651      	mov	r1, sl
    df36:	6008      	str	r0, [r1, #0]
			inc_err_array[ind1] = inc_group[k]-inc_avg;
    df38:	9902      	ldr	r1, [sp, #8]
    df3a:	9811      	ldr	r0, [sp, #68]	; 0x44
    df3c:	47d8      	blx	fp
    df3e:	4641      	mov	r1, r8
    df40:	6048      	str	r0, [r1, #4]
			azm_err_array[ind1] = (azm_group[k]-azm_avg)*cos(inc_avg*deg2rad);
    df42:	9909      	ldr	r1, [sp, #36]	; 0x24
    df44:	980c      	ldr	r0, [sp, #48]	; 0x30
    df46:	47d8      	blx	fp
    df48:	9904      	ldr	r1, [sp, #16]
    df4a:	4788      	blx	r1
    df4c:	9a06      	ldr	r2, [sp, #24]
    df4e:	9b07      	ldr	r3, [sp, #28]
    df50:	47a8      	blx	r5
    df52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    df54:	4798      	blx	r3
    df56:	002c      	movs	r4, r5
    df58:	4655      	mov	r5, sl
			inc_err_array[ind1] = inc_group[k]-inc_avg;
    df5a:	9902      	ldr	r1, [sp, #8]
			azm_err_array[ind1] = (azm_group[k]-azm_avg)*cos(inc_avg*deg2rad);
    df5c:	6068      	str	r0, [r5, #4]
			inc_err_array[ind1] = inc_group[k]-inc_avg;
    df5e:	9812      	ldr	r0, [sp, #72]	; 0x48
    df60:	47d8      	blx	fp
    df62:	4645      	mov	r5, r8
			azm_err_array[ind1] = (azm_group[k]-azm_avg)*cos(inc_avg*deg2rad);
    df64:	9909      	ldr	r1, [sp, #36]	; 0x24
			inc_err_array[ind1] = inc_group[k]-inc_avg;
    df66:	60a8      	str	r0, [r5, #8]
			azm_err_array[ind1] = (azm_group[k]-azm_avg)*cos(inc_avg*deg2rad);
    df68:	980e      	ldr	r0, [sp, #56]	; 0x38
    df6a:	47d8      	blx	fp
    df6c:	9b04      	ldr	r3, [sp, #16]
    df6e:	4798      	blx	r3
    df70:	9a06      	ldr	r2, [sp, #24]
    df72:	9b07      	ldr	r3, [sp, #28]
    df74:	47a0      	blx	r4
    df76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    df78:	4790      	blx	r2
    df7a:	0025      	movs	r5, r4
    df7c:	4654      	mov	r4, sl
    df7e:	60a0      	str	r0, [r4, #8]
			inc_err_array[ind1] = inc_group[k]-inc_avg;
    df80:	9c10      	ldr	r4, [sp, #64]	; 0x40
    df82:	9902      	ldr	r1, [sp, #8]
    df84:	9813      	ldr	r0, [sp, #76]	; 0x4c
    df86:	47d8      	blx	fp
    df88:	22b0      	movs	r2, #176	; 0xb0
    df8a:	a91c      	add	r1, sp, #112	; 0x70
    df8c:	1889      	adds	r1, r1, r2
    df8e:	00a4      	lsls	r4, r4, #2
    df90:	5108      	str	r0, [r1, r4]
    df92:	9402      	str	r4, [sp, #8]
			azm_err_array[ind1] = (azm_group[k]-azm_avg)*cos(inc_avg*deg2rad);
    df94:	9909      	ldr	r1, [sp, #36]	; 0x24
    df96:	980f      	ldr	r0, [sp, #60]	; 0x3c
    df98:	47d8      	blx	fp
    df9a:	9b04      	ldr	r3, [sp, #16]
    df9c:	4798      	blx	r3
    df9e:	9a06      	ldr	r2, [sp, #24]
    dfa0:	9b07      	ldr	r3, [sp, #28]
    dfa2:	47a8      	blx	r5
    dfa4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    dfa6:	4790      	blx	r2
    dfa8:	9c02      	ldr	r4, [sp, #8]
    dfaa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    dfac:	3610      	adds	r6, #16
    dfae:	50e0      	str	r0, [r4, r3]
    dfb0:	2310      	movs	r3, #16
    dfb2:	469c      	mov	ip, r3
    dfb4:	9c10      	ldr	r4, [sp, #64]	; 0x40
    dfb6:	44e1      	add	r9, ip
    dfb8:	1d23      	adds	r3, r4, #4
    dfba:	9310      	str	r3, [sp, #64]	; 0x40
	for (g=0;g<n_groups;g++){
    dfbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
    dfbe:	44e0      	add	r8, ip
    dfc0:	44e2      	add	sl, ip
    dfc2:	42b3      	cmp	r3, r6
    dfc4:	d000      	beq.n	dfc8 <cal_evaluate+0x3b8>
    dfc6:	e710      	b.n	ddea <cal_evaluate+0x1da>
	for (i=0;i<n_meas;i++){
    dfc8:	9b19      	ldr	r3, [sp, #100]	; 0x64
    dfca:	2b00      	cmp	r3, #0
    dfcc:	d100      	bne.n	dfd0 <cal_evaluate+0x3c0>
    dfce:	e261      	b.n	e494 <cal_evaluate+0x884>
    dfd0:	4a17      	ldr	r2, [pc, #92]	; (e030 <cal_evaluate+0x420>)
    dfd2:	2700      	movs	r7, #0
    dfd4:	2400      	movs	r4, #0
    dfd6:	2500      	movs	r5, #0
    dfd8:	2300      	movs	r3, #0
    dfda:	4690      	mov	r8, r2
    dfdc:	e03a      	b.n	e054 <cal_evaluate+0x444>
    dfde:	46c0      	nop			; (mov r8, r8)
    dfe0:	fffffb1c 	.word	0xfffffb1c
    dfe4:	0000772d 	.word	0x0000772d
    dfe8:	200010cc 	.word	0x200010cc
    dfec:	0000784d 	.word	0x0000784d
    dff0:	200020e8 	.word	0x200020e8
    dff4:	00024e58 	.word	0x00024e58
    dff8:	20003054 	.word	0x20003054
    dffc:	20002140 	.word	0x20002140
    e000:	20003cc0 	.word	0x20003cc0
    e004:	0001c4a5 	.word	0x0001c4a5
    e008:	20004e30 	.word	0x20004e30
    e00c:	20002a70 	.word	0x20002a70
    e010:	0001cba9 	.word	0x0001cba9
    e014:	200038f8 	.word	0x200038f8
    e018:	20002144 	.word	0x20002144
    e01c:	200042b0 	.word	0x200042b0
    e020:	0000d845 	.word	0x0000d845
    e024:	200047d8 	.word	0x200047d8
    e028:	00024504 	.word	0x00024504
    e02c:	0001cde9 	.word	0x0001cde9
    e030:	0001eddd 	.word	0x0001eddd
    e034:	0001e115 	.word	0x0001e115
    e038:	0001ee81 	.word	0x0001ee81
    e03c:	43aa0000 	.word	0x43aa0000
    e040:	0001c341 	.word	0x0001c341
    e044:	41a00000 	.word	0x41a00000
    e048:	0001c319 	.word	0x0001c319
    e04c:	43b40000 	.word	0x43b40000
    e050:	00019539 	.word	0x00019539
    e054:	4ee4      	ldr	r6, [pc, #912]	; (e3e8 <cal_evaluate+0x7d8>)
    e056:	9204      	str	r2, [sp, #16]
    e058:	46b1      	mov	r9, r6
    e05a:	9e19      	ldr	r6, [sp, #100]	; 0x64
		mean = mean+data[i];
    e05c:	aaff      	add	r2, sp, #1020	; 0x3fc
    e05e:	32e4      	adds	r2, #228	; 0xe4
    e060:	4694      	mov	ip, r2
    e062:	4ae2      	ldr	r2, [pc, #904]	; (e3ec <cal_evaluate+0x7dc>)
    e064:	009b      	lsls	r3, r3, #2
    e066:	4463      	add	r3, ip
    e068:	4694      	mov	ip, r2
    e06a:	4463      	add	r3, ip
    e06c:	6818      	ldr	r0, [r3, #0]
    e06e:	47c0      	blx	r8
    e070:	000b      	movs	r3, r1
    e072:	0002      	movs	r2, r0
    e074:	0029      	movs	r1, r5
    e076:	0020      	movs	r0, r4
    e078:	47c8      	blx	r9
	for (i=0;i<n_meas;i++){
    e07a:	3701      	adds	r7, #1
    e07c:	b2ff      	uxtb	r7, r7
		mean = mean+data[i];
    e07e:	0004      	movs	r4, r0
    e080:	000d      	movs	r5, r1
	for (i=0;i<n_meas;i++){
    e082:	003b      	movs	r3, r7
    e084:	42b7      	cmp	r7, r6
    e086:	d3e9      	bcc.n	e05c <cal_evaluate+0x44c>
	mean = mean/n_meas;
    e088:	4bd9      	ldr	r3, [pc, #868]	; (e3f0 <cal_evaluate+0x7e0>)
    e08a:	9819      	ldr	r0, [sp, #100]	; 0x64
    e08c:	9309      	str	r3, [sp, #36]	; 0x24
    e08e:	4798      	blx	r3
    e090:	000b      	movs	r3, r1
    e092:	49d8      	ldr	r1, [pc, #864]	; (e3f4 <cal_evaluate+0x7e4>)
    e094:	0002      	movs	r2, r0
    e096:	000f      	movs	r7, r1
    e098:	9106      	str	r1, [sp, #24]
    e09a:	0020      	movs	r0, r4
    e09c:	0029      	movs	r1, r5
    e09e:	47b8      	blx	r7
    e0a0:	464e      	mov	r6, r9
    e0a2:	2300      	movs	r3, #0
    e0a4:	9002      	str	r0, [sp, #8]
    e0a6:	9103      	str	r1, [sp, #12]
    e0a8:	4ad3      	ldr	r2, [pc, #844]	; (e3f8 <cal_evaluate+0x7e8>)
    e0aa:	9904      	ldr	r1, [sp, #16]
    e0ac:	46b3      	mov	fp, r6
    e0ae:	2400      	movs	r4, #0
    e0b0:	2500      	movs	r5, #0
    e0b2:	4689      	mov	r9, r1
    e0b4:	4692      	mov	sl, r2
    e0b6:	001e      	movs	r6, r3
    e0b8:	4fd0      	ldr	r7, [pc, #832]	; (e3fc <cal_evaluate+0x7ec>)
    e0ba:	46b8      	mov	r8, r7
    e0bc:	9f19      	ldr	r7, [sp, #100]	; 0x64
		sumsq = sumsq+pow((data[i]-mean),2);
    e0be:	aaff      	add	r2, sp, #1020	; 0x3fc
    e0c0:	32e4      	adds	r2, #228	; 0xe4
    e0c2:	4694      	mov	ip, r2
    e0c4:	4ac9      	ldr	r2, [pc, #804]	; (e3ec <cal_evaluate+0x7dc>)
    e0c6:	009b      	lsls	r3, r3, #2
    e0c8:	4463      	add	r3, ip
    e0ca:	4694      	mov	ip, r2
    e0cc:	4463      	add	r3, ip
    e0ce:	6818      	ldr	r0, [r3, #0]
    e0d0:	47c8      	blx	r9
    e0d2:	9a02      	ldr	r2, [sp, #8]
    e0d4:	9b03      	ldr	r3, [sp, #12]
    e0d6:	47c0      	blx	r8
    e0d8:	0002      	movs	r2, r0
    e0da:	000b      	movs	r3, r1
    e0dc:	47d0      	blx	sl
    e0de:	000b      	movs	r3, r1
    e0e0:	0002      	movs	r2, r0
    e0e2:	0029      	movs	r1, r5
    e0e4:	0020      	movs	r0, r4
    e0e6:	47d8      	blx	fp
	for (i=0;i<n_meas;i++){
    e0e8:	3601      	adds	r6, #1
    e0ea:	b2f6      	uxtb	r6, r6
		sumsq = sumsq+pow((data[i]-mean),2);
    e0ec:	0004      	movs	r4, r0
    e0ee:	000d      	movs	r5, r1
	for (i=0;i<n_meas;i++){
    e0f0:	0033      	movs	r3, r6
    e0f2:	42be      	cmp	r6, r7
    e0f4:	d3e3      	bcc.n	e0be <cal_evaluate+0x4ae>
	sumsq = sumsq/(n_meas-1);
    e0f6:	9819      	ldr	r0, [sp, #100]	; 0x64
    e0f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e0fa:	3801      	subs	r0, #1
    e0fc:	4798      	blx	r3
    e0fe:	0002      	movs	r2, r0
    e100:	000b      	movs	r3, r1
    e102:	0020      	movs	r0, r4
    e104:	0029      	movs	r1, r5
    e106:	9c06      	ldr	r4, [sp, #24]
    e108:	47a0      	blx	r4
	sumsq = sqrt(sumsq);
    e10a:	4bbd      	ldr	r3, [pc, #756]	; (e400 <cal_evaluate+0x7f0>)
    e10c:	4798      	blx	r3
	return sumsq;
    e10e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e110:	4798      	blx	r3
    e112:	4bbc      	ldr	r3, [pc, #752]	; (e404 <cal_evaluate+0x7f4>)
    e114:	6118      	str	r0, [r3, #16]
	cal_report_azm_inc.azm_angle_err = stdev(azm_err_array, n_points);
    e116:	4bbc      	ldr	r3, [pc, #752]	; (e408 <cal_evaluate+0x7f8>)
    e118:	681b      	ldr	r3, [r3, #0]
    e11a:	4698      	mov	r8, r3
	for (i=0;i<n_meas;i++){
    e11c:	2b00      	cmp	r3, #0
    e11e:	d100      	bne.n	e122 <cal_evaluate+0x512>
    e120:	e1bf      	b.n	e4a2 <cal_evaluate+0x892>
    e122:	4aba      	ldr	r2, [pc, #744]	; (e40c <cal_evaluate+0x7fc>)
    e124:	4eb0      	ldr	r6, [pc, #704]	; (e3e8 <cal_evaluate+0x7d8>)
    e126:	2700      	movs	r7, #0
    e128:	46b1      	mov	r9, r6
    e12a:	2400      	movs	r4, #0
    e12c:	4646      	mov	r6, r8
    e12e:	2500      	movs	r5, #0
    e130:	2300      	movs	r3, #0
    e132:	4690      	mov	r8, r2
    e134:	9204      	str	r2, [sp, #16]
		mean = mean+data[i];
    e136:	aaff      	add	r2, sp, #1020	; 0x3fc
    e138:	32e4      	adds	r2, #228	; 0xe4
    e13a:	4694      	mov	ip, r2
    e13c:	4ab4      	ldr	r2, [pc, #720]	; (e410 <cal_evaluate+0x800>)
    e13e:	009b      	lsls	r3, r3, #2
    e140:	4463      	add	r3, ip
    e142:	4694      	mov	ip, r2
    e144:	4463      	add	r3, ip
    e146:	6818      	ldr	r0, [r3, #0]
    e148:	47c0      	blx	r8
    e14a:	000b      	movs	r3, r1
    e14c:	0002      	movs	r2, r0
    e14e:	0029      	movs	r1, r5
    e150:	0020      	movs	r0, r4
    e152:	47c8      	blx	r9
	for (i=0;i<n_meas;i++){
    e154:	3701      	adds	r7, #1
    e156:	b2ff      	uxtb	r7, r7
		mean = mean+data[i];
    e158:	0004      	movs	r4, r0
    e15a:	000d      	movs	r5, r1
	for (i=0;i<n_meas;i++){
    e15c:	003b      	movs	r3, r7
    e15e:	42be      	cmp	r6, r7
    e160:	d8e9      	bhi.n	e136 <cal_evaluate+0x526>
    e162:	46b0      	mov	r8, r6
	mean = mean/n_meas;
    e164:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e166:	4640      	mov	r0, r8
    e168:	4798      	blx	r3
    e16a:	0002      	movs	r2, r0
    e16c:	000b      	movs	r3, r1
    e16e:	0020      	movs	r0, r4
    e170:	0029      	movs	r1, r5
    e172:	9c06      	ldr	r4, [sp, #24]
    e174:	47a0      	blx	r4
    e176:	464e      	mov	r6, r9
    e178:	9002      	str	r0, [sp, #8]
    e17a:	9103      	str	r1, [sp, #12]
    e17c:	9904      	ldr	r1, [sp, #16]
    e17e:	2300      	movs	r3, #0
    e180:	468b      	mov	fp, r1
    e182:	0031      	movs	r1, r6
    e184:	4f9d      	ldr	r7, [pc, #628]	; (e3fc <cal_evaluate+0x7ec>)
    e186:	4a9c      	ldr	r2, [pc, #624]	; (e3f8 <cal_evaluate+0x7e8>)
    e188:	46ba      	mov	sl, r7
    e18a:	2400      	movs	r4, #0
    e18c:	4647      	mov	r7, r8
    e18e:	2500      	movs	r5, #0
    e190:	001e      	movs	r6, r3
    e192:	4690      	mov	r8, r2
    e194:	4689      	mov	r9, r1
		sumsq = sumsq+pow((data[i]-mean),2);
    e196:	aaff      	add	r2, sp, #1020	; 0x3fc
    e198:	32e4      	adds	r2, #228	; 0xe4
    e19a:	4694      	mov	ip, r2
    e19c:	4a9c      	ldr	r2, [pc, #624]	; (e410 <cal_evaluate+0x800>)
    e19e:	009b      	lsls	r3, r3, #2
    e1a0:	4463      	add	r3, ip
    e1a2:	4694      	mov	ip, r2
    e1a4:	4463      	add	r3, ip
    e1a6:	6818      	ldr	r0, [r3, #0]
    e1a8:	47d8      	blx	fp
    e1aa:	9a02      	ldr	r2, [sp, #8]
    e1ac:	9b03      	ldr	r3, [sp, #12]
    e1ae:	47d0      	blx	sl
    e1b0:	0002      	movs	r2, r0
    e1b2:	000b      	movs	r3, r1
    e1b4:	47c0      	blx	r8
    e1b6:	000b      	movs	r3, r1
    e1b8:	0002      	movs	r2, r0
    e1ba:	0029      	movs	r1, r5
    e1bc:	0020      	movs	r0, r4
    e1be:	47c8      	blx	r9
	for (i=0;i<n_meas;i++){
    e1c0:	3601      	adds	r6, #1
    e1c2:	b2f6      	uxtb	r6, r6
		sumsq = sumsq+pow((data[i]-mean),2);
    e1c4:	0004      	movs	r4, r0
    e1c6:	000d      	movs	r5, r1
	for (i=0;i<n_meas;i++){
    e1c8:	0033      	movs	r3, r6
    e1ca:	42b7      	cmp	r7, r6
    e1cc:	d8e3      	bhi.n	e196 <cal_evaluate+0x586>
    e1ce:	46b8      	mov	r8, r7
	sumsq = sumsq/(n_meas-1);
    e1d0:	4640      	mov	r0, r8
    e1d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e1d4:	3801      	subs	r0, #1
    e1d6:	4798      	blx	r3
    e1d8:	0002      	movs	r2, r0
    e1da:	000b      	movs	r3, r1
    e1dc:	0020      	movs	r0, r4
    e1de:	0029      	movs	r1, r5
    e1e0:	9c06      	ldr	r4, [sp, #24]
    e1e2:	47a0      	blx	r4
	sumsq = sqrt(sumsq);
    e1e4:	4b86      	ldr	r3, [pc, #536]	; (e400 <cal_evaluate+0x7f0>)
    e1e6:	4798      	blx	r3
	return sumsq;
    e1e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e1ea:	4798      	blx	r3
    e1ec:	4b85      	ldr	r3, [pc, #532]	; (e404 <cal_evaluate+0x7f4>)
	cal_report_azm_inc.mag_stdev_a1 = calc_mag_stdev(a1cal);
    e1ee:	4c89      	ldr	r4, [pc, #548]	; (e414 <cal_evaluate+0x804>)
	return sumsq;
    e1f0:	6158      	str	r0, [r3, #20]
	cal_report_azm_inc.mag_stdev_a1 = calc_mag_stdev(a1cal);
    e1f2:	981a      	ldr	r0, [sp, #104]	; 0x68
    e1f4:	47a0      	blx	r4
    e1f6:	4b83      	ldr	r3, [pc, #524]	; (e404 <cal_evaluate+0x7f4>)
    e1f8:	6198      	str	r0, [r3, #24]
	cal_report_azm_inc.mag_stdev_a2 = calc_mag_stdev(a2cal);
    e1fa:	981b      	ldr	r0, [sp, #108]	; 0x6c
    e1fc:	47a0      	blx	r4
    e1fe:	4b81      	ldr	r3, [pc, #516]	; (e404 <cal_evaluate+0x7f4>)
    e200:	61d8      	str	r0, [r3, #28]
	cal_report_azm_inc.mag_stdev_c1 = calc_mag_stdev(c1cal);
    e202:	981c      	ldr	r0, [sp, #112]	; 0x70
    e204:	47a0      	blx	r4
    e206:	4b7f      	ldr	r3, [pc, #508]	; (e404 <cal_evaluate+0x7f4>)
    e208:	6218      	str	r0, [r3, #32]
	cal_report_azm_inc.mag_stdev_c2 = calc_mag_stdev(c2cal);
    e20a:	981d      	ldr	r0, [sp, #116]	; 0x74
    e20c:	47a0      	blx	r4
    e20e:	4b7d      	ldr	r3, [pc, #500]	; (e404 <cal_evaluate+0x7f4>)
    e210:	6258      	str	r0, [r3, #36]	; 0x24
    e212:	2300      	movs	r3, #0
    e214:	930b      	str	r3, [sp, #44]	; 0x2c
    e216:	4b80      	ldr	r3, [pc, #512]	; (e418 <cal_evaluate+0x808>)
    e218:	469a      	mov	sl, r3

float calc_disp_stdev(float XYZ1[nbuf][3], float XYZ2[nbuf][3], uint8_t axis){
	float err_disp[nbuf];
	uint32_t p;
	for (p=0;p<n_points;p++){
    e21a:	4b7b      	ldr	r3, [pc, #492]	; (e408 <cal_evaluate+0x7f8>)
    e21c:	681b      	ldr	r3, [r3, #0]
    e21e:	9302      	str	r3, [sp, #8]
    e220:	2b00      	cmp	r3, #0
    e222:	d100      	bne.n	e226 <cal_evaluate+0x616>
    e224:	e140      	b.n	e4a8 <cal_evaluate+0x898>
    e226:	469c      	mov	ip, r3
    e228:	005e      	lsls	r6, r3, #1
		err_disp[p] =  XYZ1[p][axis]-XYZ2[p][axis];
    e22a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    e22c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e22e:	4698      	mov	r8, r3
    e230:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    e232:	4466      	add	r6, ip
    e234:	001f      	movs	r7, r3
    e236:	4694      	mov	ip, r2
    e238:	4467      	add	r7, ip
    e23a:	003b      	movs	r3, r7
    e23c:	44e0      	add	r8, ip
    e23e:	4647      	mov	r7, r8
	for (p=0;p<n_points;p++){
    e240:	2400      	movs	r4, #0
		err_disp[p] =  XYZ1[p][axis]-XYZ2[p][axis];
    e242:	4698      	mov	r8, r3
    e244:	ade8      	add	r5, sp, #928	; 0x3a0
    e246:	00b6      	lsls	r6, r6, #2
    e248:	4643      	mov	r3, r8
    e24a:	5938      	ldr	r0, [r7, r4]
    e24c:	5919      	ldr	r1, [r3, r4]
    e24e:	47d0      	blx	sl
    e250:	340c      	adds	r4, #12
    e252:	c501      	stmia	r5!, {r0}
	for (p=0;p<n_points;p++){
    e254:	42a6      	cmp	r6, r4
    e256:	d1f7      	bne.n	e248 <cal_evaluate+0x638>
    e258:	4a6c      	ldr	r2, [pc, #432]	; (e40c <cal_evaluate+0x7fc>)
    e25a:	2500      	movs	r5, #0
    e25c:	2600      	movs	r6, #0
    e25e:	2700      	movs	r7, #0
    e260:	2300      	movs	r3, #0
    e262:	4691      	mov	r9, r2
    e264:	4c60      	ldr	r4, [pc, #384]	; (e3e8 <cal_evaluate+0x7d8>)
    e266:	46a0      	mov	r8, r4
    e268:	9c02      	ldr	r4, [sp, #8]
		mean = mean+data[i];
    e26a:	aaff      	add	r2, sp, #1020	; 0x3fc
    e26c:	32e4      	adds	r2, #228	; 0xe4
    e26e:	4694      	mov	ip, r2
    e270:	009b      	lsls	r3, r3, #2
    e272:	4463      	add	r3, ip
    e274:	3b41      	subs	r3, #65	; 0x41
    e276:	3bff      	subs	r3, #255	; 0xff
    e278:	6818      	ldr	r0, [r3, #0]
    e27a:	47c8      	blx	r9
    e27c:	000b      	movs	r3, r1
    e27e:	0002      	movs	r2, r0
    e280:	0039      	movs	r1, r7
    e282:	0030      	movs	r0, r6
    e284:	47c0      	blx	r8
	for (i=0;i<n_meas;i++){
    e286:	3501      	adds	r5, #1
    e288:	b2ed      	uxtb	r5, r5
		mean = mean+data[i];
    e28a:	0006      	movs	r6, r0
    e28c:	000f      	movs	r7, r1
	for (i=0;i<n_meas;i++){
    e28e:	002b      	movs	r3, r5
    e290:	42a5      	cmp	r5, r4
    e292:	d3ea      	bcc.n	e26a <cal_evaluate+0x65a>
    e294:	9d02      	ldr	r5, [sp, #8]
    e296:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e298:	1e68      	subs	r0, r5, #1
    e29a:	4798      	blx	r3
	mean = mean/n_meas;
    e29c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e29e:	900c      	str	r0, [sp, #48]	; 0x30
    e2a0:	910d      	str	r1, [sp, #52]	; 0x34
    e2a2:	0028      	movs	r0, r5
    e2a4:	4798      	blx	r3
    e2a6:	9d06      	ldr	r5, [sp, #24]
    e2a8:	0002      	movs	r2, r0
    e2aa:	000b      	movs	r3, r1
    e2ac:	0030      	movs	r0, r6
    e2ae:	0039      	movs	r1, r7
    e2b0:	47a8      	blx	r5
    e2b2:	4a51      	ldr	r2, [pc, #324]	; (e3f8 <cal_evaluate+0x7e8>)
    e2b4:	4d51      	ldr	r5, [pc, #324]	; (e3fc <cal_evaluate+0x7ec>)
    e2b6:	4644      	mov	r4, r8
    e2b8:	2300      	movs	r3, #0
    e2ba:	4690      	mov	r8, r2
    e2bc:	002a      	movs	r2, r5
    e2be:	46cb      	mov	fp, r9
    e2c0:	4645      	mov	r5, r8
    e2c2:	2600      	movs	r6, #0
    e2c4:	46a0      	mov	r8, r4
    e2c6:	2700      	movs	r7, #0
    e2c8:	001c      	movs	r4, r3
    e2ca:	4691      	mov	r9, r2
    e2cc:	9004      	str	r0, [sp, #16]
    e2ce:	9105      	str	r1, [sp, #20]
		sumsq = sumsq+pow((data[i]-mean),2);
    e2d0:	aaff      	add	r2, sp, #1020	; 0x3fc
    e2d2:	32e4      	adds	r2, #228	; 0xe4
    e2d4:	4694      	mov	ip, r2
    e2d6:	009b      	lsls	r3, r3, #2
    e2d8:	4463      	add	r3, ip
    e2da:	3b41      	subs	r3, #65	; 0x41
    e2dc:	3bff      	subs	r3, #255	; 0xff
    e2de:	6818      	ldr	r0, [r3, #0]
    e2e0:	47d8      	blx	fp
    e2e2:	9a04      	ldr	r2, [sp, #16]
    e2e4:	9b05      	ldr	r3, [sp, #20]
    e2e6:	47c8      	blx	r9
    e2e8:	0002      	movs	r2, r0
    e2ea:	000b      	movs	r3, r1
    e2ec:	47a8      	blx	r5
    e2ee:	0002      	movs	r2, r0
    e2f0:	000b      	movs	r3, r1
    e2f2:	0030      	movs	r0, r6
    e2f4:	0039      	movs	r1, r7
    e2f6:	47c0      	blx	r8
	for (i=0;i<n_meas;i++){
    e2f8:	3401      	adds	r4, #1
    e2fa:	9a02      	ldr	r2, [sp, #8]
    e2fc:	b2e4      	uxtb	r4, r4
		sumsq = sumsq+pow((data[i]-mean),2);
    e2fe:	0006      	movs	r6, r0
    e300:	000f      	movs	r7, r1
	for (i=0;i<n_meas;i++){
    e302:	0023      	movs	r3, r4
    e304:	4294      	cmp	r4, r2
    e306:	d3e3      	bcc.n	e2d0 <cal_evaluate+0x6c0>
    e308:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    e30a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	sumsq = sumsq/(n_meas-1);
    e30c:	9c06      	ldr	r4, [sp, #24]
    e30e:	0039      	movs	r1, r7
    e310:	0030      	movs	r0, r6
    e312:	47a0      	blx	r4
	sumsq = sqrt(sumsq);
    e314:	4b3a      	ldr	r3, [pc, #232]	; (e400 <cal_evaluate+0x7f0>)
    e316:	4798      	blx	r3
    e318:	4b3a      	ldr	r3, [pc, #232]	; (e404 <cal_evaluate+0x7f4>)
    e31a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    e31c:	001a      	movs	r2, r3
    e31e:	46bc      	mov	ip, r7
    e320:	4462      	add	r2, ip
	return sumsq;
    e322:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e324:	920e      	str	r2, [sp, #56]	; 0x38
    e326:	0014      	movs	r4, r2
    e328:	4798      	blx	r3
	for (p=0;p<n_points;p++){
    e32a:	4b37      	ldr	r3, [pc, #220]	; (e408 <cal_evaluate+0x7f8>)
	return sumsq;
    e32c:	62a0      	str	r0, [r4, #40]	; 0x28
	for (p=0;p<n_points;p++){
    e32e:	681b      	ldr	r3, [r3, #0]
    e330:	9302      	str	r3, [sp, #8]
    e332:	2b00      	cmp	r3, #0
    e334:	d100      	bne.n	e338 <cal_evaluate+0x728>
    e336:	e0c0      	b.n	e4ba <cal_evaluate+0x8aa>
    e338:	469c      	mov	ip, r3
		err_disp[p] =  XYZ1[p][axis]-XYZ2[p][axis];
    e33a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    e33c:	005e      	lsls	r6, r3, #1
    e33e:	4466      	add	r6, ip
    e340:	46bc      	mov	ip, r7
    e342:	0017      	movs	r7, r2
    e344:	4b34      	ldr	r3, [pc, #208]	; (e418 <cal_evaluate+0x808>)
    e346:	4467      	add	r7, ip
    e348:	4699      	mov	r9, r3
    e34a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
	for (p=0;p<n_points;p++){
    e34c:	2400      	movs	r4, #0
		err_disp[p] =  XYZ1[p][axis]-XYZ2[p][axis];
    e34e:	4698      	mov	r8, r3
    e350:	003b      	movs	r3, r7
    e352:	44e0      	add	r8, ip
    e354:	4647      	mov	r7, r8
    e356:	4698      	mov	r8, r3
    e358:	ade8      	add	r5, sp, #928	; 0x3a0
    e35a:	00b6      	lsls	r6, r6, #2
    e35c:	4643      	mov	r3, r8
    e35e:	5938      	ldr	r0, [r7, r4]
    e360:	5919      	ldr	r1, [r3, r4]
    e362:	47c8      	blx	r9
    e364:	340c      	adds	r4, #12
    e366:	c501      	stmia	r5!, {r0}
	for (p=0;p<n_points;p++){
    e368:	42b4      	cmp	r4, r6
    e36a:	d1f7      	bne.n	e35c <cal_evaluate+0x74c>
    e36c:	4a27      	ldr	r2, [pc, #156]	; (e40c <cal_evaluate+0x7fc>)
    e36e:	2500      	movs	r5, #0
    e370:	2600      	movs	r6, #0
    e372:	2700      	movs	r7, #0
    e374:	2300      	movs	r3, #0
    e376:	4691      	mov	r9, r2
    e378:	4c1b      	ldr	r4, [pc, #108]	; (e3e8 <cal_evaluate+0x7d8>)
    e37a:	46a0      	mov	r8, r4
    e37c:	9c02      	ldr	r4, [sp, #8]
		mean = mean+data[i];
    e37e:	aaff      	add	r2, sp, #1020	; 0x3fc
    e380:	32e4      	adds	r2, #228	; 0xe4
    e382:	4694      	mov	ip, r2
    e384:	009b      	lsls	r3, r3, #2
    e386:	4463      	add	r3, ip
    e388:	3b41      	subs	r3, #65	; 0x41
    e38a:	3bff      	subs	r3, #255	; 0xff
    e38c:	6818      	ldr	r0, [r3, #0]
    e38e:	47c8      	blx	r9
    e390:	000b      	movs	r3, r1
    e392:	0002      	movs	r2, r0
    e394:	0039      	movs	r1, r7
    e396:	0030      	movs	r0, r6
    e398:	47c0      	blx	r8
	for (i=0;i<n_meas;i++){
    e39a:	3501      	adds	r5, #1
    e39c:	b2ed      	uxtb	r5, r5
		mean = mean+data[i];
    e39e:	0006      	movs	r6, r0
    e3a0:	000f      	movs	r7, r1
	for (i=0;i<n_meas;i++){
    e3a2:	002b      	movs	r3, r5
    e3a4:	42a5      	cmp	r5, r4
    e3a6:	d3ea      	bcc.n	e37e <cal_evaluate+0x76e>
    e3a8:	9d02      	ldr	r5, [sp, #8]
    e3aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e3ac:	1e68      	subs	r0, r5, #1
    e3ae:	4798      	blx	r3
	mean = mean/n_meas;
    e3b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e3b2:	900c      	str	r0, [sp, #48]	; 0x30
    e3b4:	910d      	str	r1, [sp, #52]	; 0x34
    e3b6:	0028      	movs	r0, r5
    e3b8:	4798      	blx	r3
    e3ba:	9d06      	ldr	r5, [sp, #24]
    e3bc:	0002      	movs	r2, r0
    e3be:	000b      	movs	r3, r1
    e3c0:	0030      	movs	r0, r6
    e3c2:	0039      	movs	r1, r7
    e3c4:	47a8      	blx	r5
    e3c6:	4a0c      	ldr	r2, [pc, #48]	; (e3f8 <cal_evaluate+0x7e8>)
    e3c8:	4d0c      	ldr	r5, [pc, #48]	; (e3fc <cal_evaluate+0x7ec>)
    e3ca:	4644      	mov	r4, r8
    e3cc:	2300      	movs	r3, #0
    e3ce:	4690      	mov	r8, r2
    e3d0:	002a      	movs	r2, r5
    e3d2:	46cb      	mov	fp, r9
    e3d4:	4645      	mov	r5, r8
    e3d6:	2600      	movs	r6, #0
    e3d8:	46a0      	mov	r8, r4
    e3da:	2700      	movs	r7, #0
    e3dc:	001c      	movs	r4, r3
    e3de:	4691      	mov	r9, r2
    e3e0:	9004      	str	r0, [sp, #16]
    e3e2:	9105      	str	r1, [sp, #20]
    e3e4:	e01a      	b.n	e41c <cal_evaluate+0x80c>
    e3e6:	46c0      	nop			; (mov r8, r8)
    e3e8:	0001d28d 	.word	0x0001d28d
    e3ec:	fffffc40 	.word	0xfffffc40
    e3f0:	0001ed6d 	.word	0x0001ed6d
    e3f4:	0001d8ad 	.word	0x0001d8ad
    e3f8:	0001e115 	.word	0x0001e115
    e3fc:	0001e615 	.word	0x0001e615
    e400:	000199b5 	.word	0x000199b5
    e404:	200020e8 	.word	0x200020e8
    e408:	20003054 	.word	0x20003054
    e40c:	0001eddd 	.word	0x0001eddd
    e410:	fffffd80 	.word	0xfffffd80
    e414:	0000da39 	.word	0x0000da39
    e418:	0001cde9 	.word	0x0001cde9
		sumsq = sumsq+pow((data[i]-mean),2);
    e41c:	aaff      	add	r2, sp, #1020	; 0x3fc
    e41e:	32e4      	adds	r2, #228	; 0xe4
    e420:	4694      	mov	ip, r2
    e422:	009b      	lsls	r3, r3, #2
    e424:	4463      	add	r3, ip
    e426:	3b41      	subs	r3, #65	; 0x41
    e428:	3bff      	subs	r3, #255	; 0xff
    e42a:	6818      	ldr	r0, [r3, #0]
    e42c:	47d8      	blx	fp
    e42e:	9a04      	ldr	r2, [sp, #16]
    e430:	9b05      	ldr	r3, [sp, #20]
    e432:	47c8      	blx	r9
    e434:	0002      	movs	r2, r0
    e436:	000b      	movs	r3, r1
    e438:	47a8      	blx	r5
    e43a:	0002      	movs	r2, r0
    e43c:	000b      	movs	r3, r1
    e43e:	0030      	movs	r0, r6
    e440:	0039      	movs	r1, r7
    e442:	47c0      	blx	r8
	for (i=0;i<n_meas;i++){
    e444:	3401      	adds	r4, #1
    e446:	9a02      	ldr	r2, [sp, #8]
    e448:	b2e4      	uxtb	r4, r4
		sumsq = sumsq+pow((data[i]-mean),2);
    e44a:	0006      	movs	r6, r0
    e44c:	000f      	movs	r7, r1
	for (i=0;i<n_meas;i++){
    e44e:	0023      	movs	r3, r4
    e450:	4294      	cmp	r4, r2
    e452:	d3e3      	bcc.n	e41c <cal_evaluate+0x80c>
    e454:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    e456:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	sumsq = sumsq/(n_meas-1);
    e458:	9c06      	ldr	r4, [sp, #24]
    e45a:	0030      	movs	r0, r6
    e45c:	0039      	movs	r1, r7
    e45e:	47a0      	blx	r4
	sumsq = sqrt(sumsq);
    e460:	4b2e      	ldr	r3, [pc, #184]	; (e51c <cal_evaluate+0x90c>)
    e462:	4798      	blx	r3
	return sumsq;
    e464:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e466:	4798      	blx	r3
    e468:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e46a:	6358      	str	r0, [r3, #52]	; 0x34
    e46c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e46e:	3304      	adds	r3, #4
    e470:	930b      	str	r3, [sp, #44]	; 0x2c
	for (i=0;i<3;i++){
    e472:	2b0c      	cmp	r3, #12
    e474:	d000      	beq.n	e478 <cal_evaluate+0x868>
    e476:	e6d0      	b.n	e21a <cal_evaluate+0x60a>
}
    e478:	4b29      	ldr	r3, [pc, #164]	; (e520 <cal_evaluate+0x910>)
    e47a:	449d      	add	sp, r3
    e47c:	bc3c      	pop	{r2, r3, r4, r5}
    e47e:	4690      	mov	r8, r2
    e480:	4699      	mov	r9, r3
    e482:	46a2      	mov	sl, r4
    e484:	46ab      	mov	fp, r5
    e486:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e488:	4b26      	ldr	r3, [pc, #152]	; (e524 <cal_evaluate+0x914>)
    e48a:	930a      	str	r3, [sp, #40]	; 0x28
	for (i=0;i<n_meas;i++){
    e48c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    e48e:	2b00      	cmp	r3, #0
    e490:	d000      	beq.n	e494 <cal_evaluate+0x884>
    e492:	e59d      	b.n	dfd0 <cal_evaluate+0x3c0>
    e494:	4b24      	ldr	r3, [pc, #144]	; (e528 <cal_evaluate+0x918>)
	sumsq = 0;
    e496:	2400      	movs	r4, #0
    e498:	9309      	str	r3, [sp, #36]	; 0x24
    e49a:	4b24      	ldr	r3, [pc, #144]	; (e52c <cal_evaluate+0x91c>)
    e49c:	2500      	movs	r5, #0
    e49e:	9306      	str	r3, [sp, #24]
    e4a0:	e629      	b.n	e0f6 <cal_evaluate+0x4e6>
    e4a2:	2400      	movs	r4, #0
    e4a4:	2500      	movs	r5, #0
    e4a6:	e693      	b.n	e1d0 <cal_evaluate+0x5c0>
	for (p=0;p<n_points;p++){
    e4a8:	4b21      	ldr	r3, [pc, #132]	; (e530 <cal_evaluate+0x920>)
    e4aa:	4c22      	ldr	r4, [pc, #136]	; (e534 <cal_evaluate+0x924>)
    e4ac:	001a      	movs	r2, r3
    e4ae:	930c      	str	r3, [sp, #48]	; 0x30
    e4b0:	940d      	str	r4, [sp, #52]	; 0x34
	sumsq = 0;
    e4b2:	2600      	movs	r6, #0
    e4b4:	2700      	movs	r7, #0
    e4b6:	0023      	movs	r3, r4
    e4b8:	e728      	b.n	e30c <cal_evaluate+0x6fc>
	for (p=0;p<n_points;p++){
    e4ba:	4b1d      	ldr	r3, [pc, #116]	; (e530 <cal_evaluate+0x920>)
    e4bc:	4c1d      	ldr	r4, [pc, #116]	; (e534 <cal_evaluate+0x924>)
    e4be:	001a      	movs	r2, r3
    e4c0:	930c      	str	r3, [sp, #48]	; 0x30
    e4c2:	940d      	str	r4, [sp, #52]	; 0x34
	sumsq = 0;
    e4c4:	2600      	movs	r6, #0
    e4c6:	2700      	movs	r7, #0
    e4c8:	0023      	movs	r3, r4
    e4ca:	e7c5      	b.n	e458 <cal_evaluate+0x848>
	for (g=0;g<n_groups;g++){
    e4cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
    e4ce:	2b00      	cmp	r3, #0
    e4d0:	d012      	beq.n	e4f8 <cal_evaluate+0x8e8>
	for (p=0;p<n_points;p++){
    e4d2:	2200      	movs	r2, #0
    e4d4:	9219      	str	r2, [sp, #100]	; 0x64
    e4d6:	4a18      	ldr	r2, [pc, #96]	; (e538 <cal_evaluate+0x928>)
    e4d8:	4f18      	ldr	r7, [pc, #96]	; (e53c <cal_evaluate+0x92c>)
    e4da:	921a      	str	r2, [sp, #104]	; 0x68
    e4dc:	4a18      	ldr	r2, [pc, #96]	; (e540 <cal_evaluate+0x930>)
    e4de:	4e19      	ldr	r6, [pc, #100]	; (e544 <cal_evaluate+0x934>)
    e4e0:	921b      	str	r2, [sp, #108]	; 0x6c
    e4e2:	4a19      	ldr	r2, [pc, #100]	; (e548 <cal_evaluate+0x938>)
    e4e4:	921c      	str	r2, [sp, #112]	; 0x70
    e4e6:	4a19      	ldr	r2, [pc, #100]	; (e54c <cal_evaluate+0x93c>)
    e4e8:	921d      	str	r2, [sp, #116]	; 0x74
    e4ea:	aa98      	add	r2, sp, #608	; 0x260
    e4ec:	4692      	mov	sl, r2
    e4ee:	4a18      	ldr	r2, [pc, #96]	; (e550 <cal_evaluate+0x940>)
    e4f0:	9213      	str	r2, [sp, #76]	; 0x4c
    e4f2:	4a18      	ldr	r2, [pc, #96]	; (e554 <cal_evaluate+0x944>)
    e4f4:	9212      	str	r2, [sp, #72]	; 0x48
    e4f6:	e45e      	b.n	ddb6 <cal_evaluate+0x1a6>
    e4f8:	4b0f      	ldr	r3, [pc, #60]	; (e538 <cal_evaluate+0x928>)
	sumsq = 0;
    e4fa:	2400      	movs	r4, #0
    e4fc:	931a      	str	r3, [sp, #104]	; 0x68
    e4fe:	4b10      	ldr	r3, [pc, #64]	; (e540 <cal_evaluate+0x930>)
    e500:	2500      	movs	r5, #0
    e502:	931b      	str	r3, [sp, #108]	; 0x6c
    e504:	4b10      	ldr	r3, [pc, #64]	; (e548 <cal_evaluate+0x938>)
    e506:	931c      	str	r3, [sp, #112]	; 0x70
    e508:	4b10      	ldr	r3, [pc, #64]	; (e54c <cal_evaluate+0x93c>)
    e50a:	931d      	str	r3, [sp, #116]	; 0x74
    e50c:	4b05      	ldr	r3, [pc, #20]	; (e524 <cal_evaluate+0x914>)
    e50e:	930a      	str	r3, [sp, #40]	; 0x28
    e510:	4b05      	ldr	r3, [pc, #20]	; (e528 <cal_evaluate+0x918>)
    e512:	9309      	str	r3, [sp, #36]	; 0x24
    e514:	4b05      	ldr	r3, [pc, #20]	; (e52c <cal_evaluate+0x91c>)
    e516:	9306      	str	r3, [sp, #24]
    e518:	e5ed      	b.n	e0f6 <cal_evaluate+0x4e6>
    e51a:	46c0      	nop			; (mov r8, r8)
    e51c:	000199b5 	.word	0x000199b5
    e520:	000004e4 	.word	0x000004e4
    e524:	0001ee81 	.word	0x0001ee81
    e528:	0001ed6d 	.word	0x0001ed6d
    e52c:	0001d8ad 	.word	0x0001d8ad
    e530:	ffe00000 	.word	0xffe00000
    e534:	41efffff 	.word	0x41efffff
    e538:	20003cc0 	.word	0x20003cc0
    e53c:	0001c4a5 	.word	0x0001c4a5
    e540:	20004e30 	.word	0x20004e30
    e544:	0001cba9 	.word	0x0001cba9
    e548:	20002a70 	.word	0x20002a70
    e54c:	200038f8 	.word	0x200038f8
    e550:	20002144 	.word	0x20002144
    e554:	200042b0 	.word	0x200042b0

0000e558 <cal_apply_cal>:
}




void cal_apply_cal(float uncalXYZ[3], float calXYZ[3], struct INST_CAL *cal_struct){
    e558:	b5f0      	push	{r4, r5, r6, r7, lr}
    e55a:	46de      	mov	lr, fp
    e55c:	4657      	mov	r7, sl
    e55e:	464e      	mov	r6, r9
    e560:	4645      	mov	r5, r8
    e562:	b5e0      	push	{r5, r6, r7, lr}
    e564:	4682      	mov	sl, r0
    e566:	b083      	sub	sp, #12
    e568:	000f      	movs	r7, r1
	uint8_t i;
	
	//  Apply gain and offset calibration
	for (i=0;i<3;i++){
		//  Subtract Offset
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
    e56a:	6800      	ldr	r0, [r0, #0]
    e56c:	6851      	ldr	r1, [r2, #4]
    e56e:	4e3c      	ldr	r6, [pc, #240]	; (e660 <cal_apply_cal+0x108>)
void cal_apply_cal(float uncalXYZ[3], float calXYZ[3], struct INST_CAL *cal_struct){
    e570:	0014      	movs	r4, r2
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
    e572:	47b0      	blx	r6
    e574:	6038      	str	r0, [r7, #0]
		//  Divide by Gain
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
    e576:	6921      	ldr	r1, [r4, #16]
    e578:	4d3a      	ldr	r5, [pc, #232]	; (e664 <cal_apply_cal+0x10c>)
    e57a:	47a8      	blx	r5
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
    e57c:	4653      	mov	r3, sl
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
    e57e:	6038      	str	r0, [r7, #0]
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
    e580:	68a1      	ldr	r1, [r4, #8]
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
    e582:	4680      	mov	r8, r0
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
    e584:	6858      	ldr	r0, [r3, #4]
    e586:	47b0      	blx	r6
    e588:	6078      	str	r0, [r7, #4]
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
    e58a:	6961      	ldr	r1, [r4, #20]
    e58c:	47a8      	blx	r5
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
    e58e:	4653      	mov	r3, sl
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
    e590:	6078      	str	r0, [r7, #4]
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
    e592:	68e1      	ldr	r1, [r4, #12]
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
    e594:	4681      	mov	r9, r0
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
    e596:	6898      	ldr	r0, [r3, #8]
    e598:	47b0      	blx	r6
    e59a:	60b8      	str	r0, [r7, #8]
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
    e59c:	69a1      	ldr	r1, [r4, #24]
    e59e:	47a8      	blx	r5
    e5a0:	60b8      	str	r0, [r7, #8]
	}
	//  Apply axis misalignments
	calXYZ[1] = calXYZ[1]+calXYZ[0]*cal_struct->axmYX;
    e5a2:	4e31      	ldr	r6, [pc, #196]	; (e668 <cal_apply_cal+0x110>)
    e5a4:	69e1      	ldr	r1, [r4, #28]
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
    e5a6:	4682      	mov	sl, r0
	calXYZ[1] = calXYZ[1]+calXYZ[0]*cal_struct->axmYX;
    e5a8:	4640      	mov	r0, r8
    e5aa:	47b0      	blx	r6
    e5ac:	4d2f      	ldr	r5, [pc, #188]	; (e66c <cal_apply_cal+0x114>)
    e5ae:	4649      	mov	r1, r9
    e5b0:	47a8      	blx	r5
    e5b2:	6078      	str	r0, [r7, #4]
	calXYZ[2] = calXYZ[2]+calXYZ[1]*cal_struct->axmZY+ calXYZ[0]*cal_struct->axmZX;
    e5b4:	6a21      	ldr	r1, [r4, #32]
	calXYZ[1] = calXYZ[1]+calXYZ[0]*cal_struct->axmYX;
    e5b6:	4681      	mov	r9, r0
	calXYZ[2] = calXYZ[2]+calXYZ[1]*cal_struct->axmZY+ calXYZ[0]*cal_struct->axmZX;
    e5b8:	47b0      	blx	r6
    e5ba:	4651      	mov	r1, sl
    e5bc:	47a8      	blx	r5
    e5be:	6a61      	ldr	r1, [r4, #36]	; 0x24
    e5c0:	4682      	mov	sl, r0
    e5c2:	4640      	mov	r0, r8
    e5c4:	47b0      	blx	r6
    e5c6:	1c01      	adds	r1, r0, #0
    e5c8:	4650      	mov	r0, sl
    e5ca:	47a8      	blx	r5
    e5cc:	60b8      	str	r0, [r7, #8]
    e5ce:	4682      	mov	sl, r0
			temp[i] = temp[i]+mat33[i][j]*mat3[j];
    e5d0:	6c21      	ldr	r1, [r4, #64]	; 0x40
    e5d2:	4640      	mov	r0, r8
    e5d4:	47b0      	blx	r6
    e5d6:	2100      	movs	r1, #0
    e5d8:	47a8      	blx	r5
    e5da:	6c61      	ldr	r1, [r4, #68]	; 0x44
    e5dc:	4683      	mov	fp, r0
    e5de:	4648      	mov	r0, r9
    e5e0:	47b0      	blx	r6
    e5e2:	1c01      	adds	r1, r0, #0
    e5e4:	4658      	mov	r0, fp
    e5e6:	47a8      	blx	r5
    e5e8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    e5ea:	4683      	mov	fp, r0
    e5ec:	4650      	mov	r0, sl
    e5ee:	47b0      	blx	r6
    e5f0:	1c01      	adds	r1, r0, #0
    e5f2:	4658      	mov	r0, fp
    e5f4:	47a8      	blx	r5
    e5f6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    e5f8:	9001      	str	r0, [sp, #4]
    e5fa:	4640      	mov	r0, r8
    e5fc:	47b0      	blx	r6
    e5fe:	2100      	movs	r1, #0
    e600:	47a8      	blx	r5
    e602:	6d21      	ldr	r1, [r4, #80]	; 0x50
    e604:	4683      	mov	fp, r0
    e606:	4648      	mov	r0, r9
    e608:	47b0      	blx	r6
    e60a:	1c01      	adds	r1, r0, #0
    e60c:	4658      	mov	r0, fp
    e60e:	47a8      	blx	r5
    e610:	6d61      	ldr	r1, [r4, #84]	; 0x54
    e612:	4683      	mov	fp, r0
    e614:	4650      	mov	r0, sl
    e616:	47b0      	blx	r6
    e618:	1c01      	adds	r1, r0, #0
    e61a:	4658      	mov	r0, fp
    e61c:	47a8      	blx	r5
    e61e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    e620:	4683      	mov	fp, r0
    e622:	4640      	mov	r0, r8
    e624:	47b0      	blx	r6
    e626:	2100      	movs	r1, #0
    e628:	47a8      	blx	r5
    e62a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    e62c:	4680      	mov	r8, r0
    e62e:	4648      	mov	r0, r9
    e630:	47b0      	blx	r6
    e632:	1c01      	adds	r1, r0, #0
    e634:	4640      	mov	r0, r8
    e636:	47a8      	blx	r5
    e638:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    e63a:	4680      	mov	r8, r0
    e63c:	4650      	mov	r0, sl
    e63e:	47b0      	blx	r6
    e640:	1c01      	adds	r1, r0, #0
    e642:	4640      	mov	r0, r8
    e644:	47a8      	blx	r5
		ret3[i] = temp[i];
    e646:	9b01      	ldr	r3, [sp, #4]
    e648:	6038      	str	r0, [r7, #0]
    e64a:	607b      	str	r3, [r7, #4]
    e64c:	465b      	mov	r3, fp
    e64e:	60bb      	str	r3, [r7, #8]

	//  Apply rotation calibration
	//  Rotate vector by rotation matrix
	mat_mult_33_31(cal_struct->RotM, calXYZ, calXYZ);
	
}
    e650:	b003      	add	sp, #12
    e652:	bc3c      	pop	{r2, r3, r4, r5}
    e654:	4690      	mov	r8, r2
    e656:	4699      	mov	r9, r3
    e658:	46a2      	mov	sl, r4
    e65a:	46ab      	mov	fp, r5
    e65c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e65e:	46c0      	nop			; (mov r8, r8)
    e660:	0001cde9 	.word	0x0001cde9
    e664:	0001c7c9 	.word	0x0001c7c9
    e668:	0001cba9 	.word	0x0001cba9
    e66c:	0001c4a5 	.word	0x0001c4a5

0000e670 <cal_init_struct>:
void cal_init_struct(struct INST_CAL *cal_struct){
	uint8_t i, j;
	
	for (i=0;i<3;i++){
		cal_struct->gain[i] = 1;
		cal_struct->offset[i] = 0;
    e670:	2300      	movs	r3, #0
		cal_struct->gain[i] = 1;
    e672:	22fe      	movs	r2, #254	; 0xfe
		cal_struct->offset[i] = 0;
    e674:	6043      	str	r3, [r0, #4]
		
		for (j=0;j<3;j++){
			cal_struct->RotM[i][j] = 0;//Clear row
    e676:	6383      	str	r3, [r0, #56]	; 0x38
    e678:	63c3      	str	r3, [r0, #60]	; 0x3c
		cal_struct->offset[i] = 0;
    e67a:	6083      	str	r3, [r0, #8]
			cal_struct->RotM[i][j] = 0;//Clear row
    e67c:	6403      	str	r3, [r0, #64]	; 0x40
    e67e:	6483      	str	r3, [r0, #72]	; 0x48
		cal_struct->offset[i] = 0;
    e680:	60c3      	str	r3, [r0, #12]
			cal_struct->RotM[i][j] = 0;//Clear row
    e682:	64c3      	str	r3, [r0, #76]	; 0x4c
    e684:	6503      	str	r3, [r0, #80]	; 0x50
		}
		cal_struct->RotM[i][i] = 1;// Create identity matrix
		
	}
	cal_struct->axmYX = 0;
    e686:	61c3      	str	r3, [r0, #28]
	cal_struct->axmZY = 0;
    e688:	6203      	str	r3, [r0, #32]
	cal_struct->axmZX = 0;
    e68a:	6243      	str	r3, [r0, #36]	; 0x24
	
	cal_struct->thetaX = 0;
    e68c:	6283      	str	r3, [r0, #40]	; 0x28
	cal_struct->thetaY = 0;
    e68e:	62c3      	str	r3, [r0, #44]	; 0x2c
	cal_struct->thetaZ = 0;
    e690:	6303      	str	r3, [r0, #48]	; 0x30
	cal_struct->angle_stdev = 1;
	
	cal_struct->dist_offset = 0;
    e692:	6583      	str	r3, [r0, #88]	; 0x58
	
	cal_struct->Cal_Initialized_Key = 0xB1;//  Indicator that structure has been initialized
    e694:	23b1      	movs	r3, #177	; 0xb1
		cal_struct->gain[i] = 1;
    e696:	0592      	lsls	r2, r2, #22
    e698:	6102      	str	r2, [r0, #16]
		cal_struct->RotM[i][i] = 1;// Create identity matrix
    e69a:	6342      	str	r2, [r0, #52]	; 0x34
		cal_struct->gain[i] = 1;
    e69c:	6142      	str	r2, [r0, #20]
		cal_struct->RotM[i][i] = 1;// Create identity matrix
    e69e:	6442      	str	r2, [r0, #68]	; 0x44
		cal_struct->gain[i] = 1;
    e6a0:	6182      	str	r2, [r0, #24]
		cal_struct->RotM[i][i] = 1;// Create identity matrix
    e6a2:	6542      	str	r2, [r0, #84]	; 0x54
	cal_struct->angle_stdev = 1;
    e6a4:	65c2      	str	r2, [r0, #92]	; 0x5c
	cal_struct->Cal_Initialized_Key = 0xB1;//  Indicator that structure has been initialized
    e6a6:	7003      	strb	r3, [r0, #0]
	
}
    e6a8:	4770      	bx	lr
    e6aa:	46c0      	nop			; (mov r8, r8)

0000e6ac <gen_RotM>:

void gen_RotM(struct INST_CAL *cal_struct){
    e6ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    e6ae:	46de      	mov	lr, fp
    e6b0:	4657      	mov	r7, sl
    e6b2:	464e      	mov	r6, r9
    e6b4:	4645      	mov	r5, r8
    e6b6:	b5e0      	push	{r5, r6, r7, lr}
	float tX, tY, tZ;
	
	tX = cal_struct->thetaX*deg2rad;
    e6b8:	4b4f      	ldr	r3, [pc, #316]	; (e7f8 <gen_RotM+0x14c>)
void gen_RotM(struct INST_CAL *cal_struct){
    e6ba:	b08d      	sub	sp, #52	; 0x34
	tX = cal_struct->thetaX*deg2rad;
    e6bc:	681e      	ldr	r6, [r3, #0]
void gen_RotM(struct INST_CAL *cal_struct){
    e6be:	0004      	movs	r4, r0
	tX = cal_struct->thetaX*deg2rad;
    e6c0:	6a81      	ldr	r1, [r0, #40]	; 0x28
    e6c2:	4d4e      	ldr	r5, [pc, #312]	; (e7fc <gen_RotM+0x150>)
    e6c4:	1c30      	adds	r0, r6, #0
    e6c6:	47a8      	blx	r5
	tY = cal_struct->thetaY*deg2rad;
    e6c8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	tX = cal_struct->thetaX*deg2rad;
    e6ca:	900b      	str	r0, [sp, #44]	; 0x2c
	tY = cal_struct->thetaY*deg2rad;
    e6cc:	1c30      	adds	r0, r6, #0
    e6ce:	47a8      	blx	r5
	tZ = cal_struct->thetaZ*deg2rad;
	
	cal_struct->RotM[0][0] = cos(tY)*cos(tZ);
    e6d0:	4b4b      	ldr	r3, [pc, #300]	; (e800 <gen_RotM+0x154>)
    e6d2:	469a      	mov	sl, r3
    e6d4:	4798      	blx	r3
    e6d6:	0002      	movs	r2, r0
    e6d8:	000b      	movs	r3, r1
    e6da:	9200      	str	r2, [sp, #0]
    e6dc:	9301      	str	r3, [sp, #4]
    e6de:	4b49      	ldr	r3, [pc, #292]	; (e804 <gen_RotM+0x158>)
    e6e0:	4699      	mov	r9, r3
    e6e2:	4798      	blx	r3
    e6e4:	9002      	str	r0, [sp, #8]
    e6e6:	9103      	str	r1, [sp, #12]
	tZ = cal_struct->thetaZ*deg2rad;
    e6e8:	6b21      	ldr	r1, [r4, #48]	; 0x30
    e6ea:	1c30      	adds	r0, r6, #0
    e6ec:	47a8      	blx	r5
	cal_struct->RotM[0][0] = cos(tY)*cos(tZ);
    e6ee:	47d0      	blx	sl
    e6f0:	0006      	movs	r6, r0
    e6f2:	000f      	movs	r7, r1
    e6f4:	47c8      	blx	r9
    e6f6:	0002      	movs	r2, r0
    e6f8:	000b      	movs	r3, r1
    e6fa:	4943      	ldr	r1, [pc, #268]	; (e808 <gen_RotM+0x15c>)
    e6fc:	9204      	str	r2, [sp, #16]
    e6fe:	9305      	str	r3, [sp, #20]
    e700:	468b      	mov	fp, r1
    e702:	9802      	ldr	r0, [sp, #8]
    e704:	9903      	ldr	r1, [sp, #12]
    e706:	47d8      	blx	fp
    e708:	4d40      	ldr	r5, [pc, #256]	; (e80c <gen_RotM+0x160>)
    e70a:	47a8      	blx	r5
	cal_struct->RotM[0][1] = -sin(tZ);
    e70c:	4b40      	ldr	r3, [pc, #256]	; (e810 <gen_RotM+0x164>)
	cal_struct->RotM[0][0] = cos(tY)*cos(tZ);
    e70e:	6360      	str	r0, [r4, #52]	; 0x34
	cal_struct->RotM[0][1] = -sin(tZ);
    e710:	0039      	movs	r1, r7
    e712:	0030      	movs	r0, r6
    e714:	4698      	mov	r8, r3
    e716:	4798      	blx	r3
    e718:	000a      	movs	r2, r1
    e71a:	0001      	movs	r1, r0
    e71c:	9106      	str	r1, [sp, #24]
    e71e:	9207      	str	r2, [sp, #28]
    e720:	0011      	movs	r1, r2
    e722:	47a8      	blx	r5
    e724:	2380      	movs	r3, #128	; 0x80
    e726:	061b      	lsls	r3, r3, #24
    e728:	469c      	mov	ip, r3
    e72a:	4460      	add	r0, ip
    e72c:	63a0      	str	r0, [r4, #56]	; 0x38
	cal_struct->RotM[0][2] = sin(tY);
    e72e:	9800      	ldr	r0, [sp, #0]
    e730:	9901      	ldr	r1, [sp, #4]
    e732:	47c0      	blx	r8
    e734:	000a      	movs	r2, r1
    e736:	0001      	movs	r1, r0
    e738:	9108      	str	r1, [sp, #32]
    e73a:	9209      	str	r2, [sp, #36]	; 0x24
    e73c:	0011      	movs	r1, r2
    e73e:	47a8      	blx	r5
    e740:	63e0      	str	r0, [r4, #60]	; 0x3c
	cal_struct->RotM[1][0] = (cos(tX)*sin(tZ))+(sin(tX)*sin(tY));
    e742:	980b      	ldr	r0, [sp, #44]	; 0x2c
    e744:	47d0      	blx	sl
    e746:	0006      	movs	r6, r0
    e748:	000f      	movs	r7, r1
    e74a:	47c8      	blx	r9
    e74c:	9000      	str	r0, [sp, #0]
    e74e:	9101      	str	r1, [sp, #4]
    e750:	0030      	movs	r0, r6
    e752:	0039      	movs	r1, r7
    e754:	47c0      	blx	r8
    e756:	9a00      	ldr	r2, [sp, #0]
    e758:	9b01      	ldr	r3, [sp, #4]
    e75a:	4681      	mov	r9, r0
    e75c:	4688      	mov	r8, r1
    e75e:	9806      	ldr	r0, [sp, #24]
    e760:	9907      	ldr	r1, [sp, #28]
    e762:	47d8      	blx	fp
    e764:	464a      	mov	r2, r9
    e766:	0006      	movs	r6, r0
    e768:	000f      	movs	r7, r1
    e76a:	9808      	ldr	r0, [sp, #32]
    e76c:	9909      	ldr	r1, [sp, #36]	; 0x24
    e76e:	4643      	mov	r3, r8
    e770:	47d8      	blx	fp
    e772:	0002      	movs	r2, r0
    e774:	000b      	movs	r3, r1
    e776:	0030      	movs	r0, r6
    e778:	0039      	movs	r1, r7
    e77a:	4e26      	ldr	r6, [pc, #152]	; (e814 <gen_RotM+0x168>)
    e77c:	47b0      	blx	r6
    e77e:	47a8      	blx	r5
	cal_struct->RotM[1][1] = cos(tX)*cos(tZ);
    e780:	9a00      	ldr	r2, [sp, #0]
    e782:	9b01      	ldr	r3, [sp, #4]
	cal_struct->RotM[1][0] = (cos(tX)*sin(tZ))+(sin(tX)*sin(tY));
    e784:	6420      	str	r0, [r4, #64]	; 0x40
	cal_struct->RotM[1][2] = -sin(tX)*cos(tY);
    e786:	2680      	movs	r6, #128	; 0x80
	cal_struct->RotM[1][1] = cos(tX)*cos(tZ);
    e788:	9804      	ldr	r0, [sp, #16]
    e78a:	9905      	ldr	r1, [sp, #20]
    e78c:	47d8      	blx	fp
    e78e:	47a8      	blx	r5
	cal_struct->RotM[1][2] = -sin(tX)*cos(tY);
    e790:	9a02      	ldr	r2, [sp, #8]
    e792:	9b03      	ldr	r3, [sp, #12]
    e794:	0636      	lsls	r6, r6, #24
    e796:	4446      	add	r6, r8
	cal_struct->RotM[1][1] = cos(tX)*cos(tZ);
    e798:	6460      	str	r0, [r4, #68]	; 0x44
	cal_struct->RotM[1][2] = -sin(tX)*cos(tY);
    e79a:	0031      	movs	r1, r6
    e79c:	4648      	mov	r0, r9
    e79e:	47d8      	blx	fp
    e7a0:	47a8      	blx	r5
	cal_struct->RotM[2][0]  = (sin(tX)*sin(tZ))-(cos(tX)*sin(tY));
    e7a2:	464a      	mov	r2, r9
	cal_struct->RotM[1][2] = -sin(tX)*cos(tY);
    e7a4:	64a0      	str	r0, [r4, #72]	; 0x48
	cal_struct->RotM[2][0]  = (sin(tX)*sin(tZ))-(cos(tX)*sin(tY));
    e7a6:	4643      	mov	r3, r8
    e7a8:	9806      	ldr	r0, [sp, #24]
    e7aa:	9907      	ldr	r1, [sp, #28]
    e7ac:	47d8      	blx	fp
    e7ae:	9a00      	ldr	r2, [sp, #0]
    e7b0:	9b01      	ldr	r3, [sp, #4]
    e7b2:	0006      	movs	r6, r0
    e7b4:	000f      	movs	r7, r1
    e7b6:	9808      	ldr	r0, [sp, #32]
    e7b8:	9909      	ldr	r1, [sp, #36]	; 0x24
    e7ba:	47d8      	blx	fp
    e7bc:	0002      	movs	r2, r0
    e7be:	000b      	movs	r3, r1
    e7c0:	0030      	movs	r0, r6
    e7c2:	0039      	movs	r1, r7
    e7c4:	4e14      	ldr	r6, [pc, #80]	; (e818 <gen_RotM+0x16c>)
    e7c6:	47b0      	blx	r6
    e7c8:	47a8      	blx	r5
	cal_struct->RotM[2][1] = sin(tX)*cos(tZ);
    e7ca:	464a      	mov	r2, r9
    e7cc:	4643      	mov	r3, r8
	cal_struct->RotM[2][0]  = (sin(tX)*sin(tZ))-(cos(tX)*sin(tY));
    e7ce:	64e0      	str	r0, [r4, #76]	; 0x4c
	cal_struct->RotM[2][1] = sin(tX)*cos(tZ);
    e7d0:	9804      	ldr	r0, [sp, #16]
    e7d2:	9905      	ldr	r1, [sp, #20]
    e7d4:	47d8      	blx	fp
    e7d6:	47a8      	blx	r5
	cal_struct->RotM[2][2] = cos(tX)*cos(tY);
    e7d8:	9a00      	ldr	r2, [sp, #0]
    e7da:	9b01      	ldr	r3, [sp, #4]
	cal_struct->RotM[2][1] = sin(tX)*cos(tZ);
    e7dc:	6520      	str	r0, [r4, #80]	; 0x50
	cal_struct->RotM[2][2] = cos(tX)*cos(tY);
    e7de:	9802      	ldr	r0, [sp, #8]
    e7e0:	9903      	ldr	r1, [sp, #12]
    e7e2:	47d8      	blx	fp
    e7e4:	47a8      	blx	r5
    e7e6:	6560      	str	r0, [r4, #84]	; 0x54
	
}
    e7e8:	b00d      	add	sp, #52	; 0x34
    e7ea:	bc3c      	pop	{r2, r3, r4, r5}
    e7ec:	4690      	mov	r8, r2
    e7ee:	4699      	mov	r9, r3
    e7f0:	46a2      	mov	sl, r4
    e7f2:	46ab      	mov	fp, r5
    e7f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e7f6:	46c0      	nop			; (mov r8, r8)
    e7f8:	00024504 	.word	0x00024504
    e7fc:	0001cba9 	.word	0x0001cba9
    e800:	0001eddd 	.word	0x0001eddd
    e804:	00019539 	.word	0x00019539
    e808:	0001e115 	.word	0x0001e115
    e80c:	0001ee81 	.word	0x0001ee81
    e810:	000195c5 	.word	0x000195c5
    e814:	0001d28d 	.word	0x0001d28d
    e818:	0001e615 	.word	0x0001e615

0000e81c <cal_angleX>:
void cal_angleX(float XYZ1[][3], float XYZ2[][3], struct INST_CAL *cal_struct){
    e81c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e81e:	46de      	mov	lr, fp
    e820:	4657      	mov	r7, sl
    e822:	464e      	mov	r6, r9
    e824:	4645      	mov	r5, r8
    e826:	b5e0      	push	{r5, r6, r7, lr}
	for (i=0;i<n_points;i++){
    e828:	4b3d      	ldr	r3, [pc, #244]	; (e920 <cal_angleX+0x104>)
void cal_angleX(float XYZ1[][3], float XYZ2[][3], struct INST_CAL *cal_struct){
    e82a:	4c3e      	ldr	r4, [pc, #248]	; (e924 <cal_angleX+0x108>)
	for (i=0;i<n_points;i++){
    e82c:	681b      	ldr	r3, [r3, #0]
void cal_angleX(float XYZ1[][3], float XYZ2[][3], struct INST_CAL *cal_struct){
    e82e:	44a5      	add	sp, r4
    e830:	9201      	str	r2, [sp, #4]
	for (i=0;i<n_points;i++){
    e832:	9300      	str	r3, [sp, #0]
    e834:	1e1a      	subs	r2, r3, #0
    e836:	d06e      	beq.n	e916 <cal_angleX+0xfa>
    e838:	4694      	mov	ip, r2
    e83a:	468b      	mov	fp, r1
    e83c:	005b      	lsls	r3, r3, #1
    e83e:	4463      	add	r3, ip
    e840:	009b      	lsls	r3, r3, #2
    e842:	3304      	adds	r3, #4
    e844:	449b      	add	fp, r3
    e846:	4b38      	ldr	r3, [pc, #224]	; (e928 <cal_angleX+0x10c>)
    e848:	2600      	movs	r6, #0
    e84a:	4698      	mov	r8, r3
    e84c:	1d0c      	adds	r4, r1, #4
    e84e:	1d05      	adds	r5, r0, #4
    e850:	af52      	add	r7, sp, #328	; 0x148
		D[i] = XYZ2[i][1]-XYZ2[i][2];
    e852:	6823      	ldr	r3, [r4, #0]
    e854:	469a      	mov	sl, r3
    e856:	6863      	ldr	r3, [r4, #4]
    e858:	4650      	mov	r0, sl
    e85a:	1c19      	adds	r1, r3, #0
    e85c:	4699      	mov	r9, r3
    e85e:	47c0      	blx	r8
    e860:	ab02      	add	r3, sp, #8
    e862:	5198      	str	r0, [r3, r6]
		V[i] = XYZ2[i][1]-XYZ1[i][1]+XYZ2[i][2]-XYZ1[i][2];
    e864:	6829      	ldr	r1, [r5, #0]
    e866:	4650      	mov	r0, sl
    e868:	47c0      	blx	r8
    e86a:	4649      	mov	r1, r9
    e86c:	4b2f      	ldr	r3, [pc, #188]	; (e92c <cal_angleX+0x110>)
    e86e:	4798      	blx	r3
    e870:	6869      	ldr	r1, [r5, #4]
    e872:	47c0      	blx	r8
    e874:	340c      	adds	r4, #12
    e876:	51b8      	str	r0, [r7, r6]
    e878:	350c      	adds	r5, #12
    e87a:	3604      	adds	r6, #4
	for (i=0;i<n_points;i++){
    e87c:	45a3      	cmp	fp, r4
    e87e:	d1e8      	bne.n	e852 <cal_angleX+0x36>
    e880:	9b00      	ldr	r3, [sp, #0]
    e882:	ae02      	add	r6, sp, #8
    e884:	009b      	lsls	r3, r3, #2
    e886:	469b      	mov	fp, r3
    e888:	469a      	mov	sl, r3
    e88a:	2300      	movs	r3, #0
    e88c:	4698      	mov	r8, r3
    e88e:	4b28      	ldr	r3, [pc, #160]	; (e930 <cal_angleX+0x114>)
    e890:	46b4      	mov	ip, r6
    e892:	4699      	mov	r9, r3
    e894:	44e3      	add	fp, ip
		DtD = DtD + pow(D[i],2);
    e896:	ce01      	ldmia	r6!, {r0}
    e898:	47c8      	blx	r9
    e89a:	4c26      	ldr	r4, [pc, #152]	; (e934 <cal_angleX+0x118>)
    e89c:	0002      	movs	r2, r0
    e89e:	000b      	movs	r3, r1
    e8a0:	47a0      	blx	r4
    e8a2:	0004      	movs	r4, r0
    e8a4:	4640      	mov	r0, r8
    e8a6:	000d      	movs	r5, r1
    e8a8:	47c8      	blx	r9
    e8aa:	0002      	movs	r2, r0
    e8ac:	000b      	movs	r3, r1
    e8ae:	0020      	movs	r0, r4
    e8b0:	0029      	movs	r1, r5
    e8b2:	4c21      	ldr	r4, [pc, #132]	; (e938 <cal_angleX+0x11c>)
    e8b4:	47a0      	blx	r4
    e8b6:	4b21      	ldr	r3, [pc, #132]	; (e93c <cal_angleX+0x120>)
    e8b8:	4798      	blx	r3
    e8ba:	4680      	mov	r8, r0
	for (i=0;i<n_points;i++){
    e8bc:	45b3      	cmp	fp, r6
    e8be:	d1ea      	bne.n	e896 <cal_angleX+0x7a>
    e8c0:	2400      	movs	r4, #0
    e8c2:	2500      	movs	r5, #0
    e8c4:	4e1e      	ldr	r6, [pc, #120]	; (e940 <cal_angleX+0x124>)
		DtV = DtV + D[i]*V[i];
    e8c6:	ab02      	add	r3, sp, #8
    e8c8:	5939      	ldr	r1, [r7, r4]
    e8ca:	5918      	ldr	r0, [r3, r4]
    e8cc:	47b0      	blx	r6
    e8ce:	4b17      	ldr	r3, [pc, #92]	; (e92c <cal_angleX+0x110>)
    e8d0:	1c01      	adds	r1, r0, #0
    e8d2:	1c28      	adds	r0, r5, #0
    e8d4:	4798      	blx	r3
    e8d6:	3404      	adds	r4, #4
    e8d8:	1c05      	adds	r5, r0, #0
	for (i=0;i<n_points;i++){
    e8da:	45a2      	cmp	sl, r4
    e8dc:	d1f3      	bne.n	e8c6 <cal_angleX+0xaa>
	Res = (1/DtD)*DtV;
    e8de:	20fe      	movs	r0, #254	; 0xfe
    e8e0:	4b18      	ldr	r3, [pc, #96]	; (e944 <cal_angleX+0x128>)
    e8e2:	4641      	mov	r1, r8
    e8e4:	0580      	lsls	r0, r0, #22
    e8e6:	4798      	blx	r3
    e8e8:	1c29      	adds	r1, r5, #0
    e8ea:	47b0      	blx	r6
	cal_struct->thetaX = -1*rad2deg*Res;
    e8ec:	4b16      	ldr	r3, [pc, #88]	; (e948 <cal_angleX+0x12c>)
    e8ee:	6819      	ldr	r1, [r3, #0]
    e8f0:	2380      	movs	r3, #128	; 0x80
    e8f2:	061b      	lsls	r3, r3, #24
    e8f4:	469c      	mov	ip, r3
    e8f6:	4461      	add	r1, ip
    e8f8:	47b0      	blx	r6
    e8fa:	9b01      	ldr	r3, [sp, #4]
    e8fc:	6298      	str	r0, [r3, #40]	; 0x28
	gen_RotM(cal_struct);
    e8fe:	0018      	movs	r0, r3
    e900:	4b12      	ldr	r3, [pc, #72]	; (e94c <cal_angleX+0x130>)
    e902:	4798      	blx	r3
}
    e904:	23a3      	movs	r3, #163	; 0xa3
    e906:	009b      	lsls	r3, r3, #2
    e908:	449d      	add	sp, r3
    e90a:	bc3c      	pop	{r2, r3, r4, r5}
    e90c:	4690      	mov	r8, r2
    e90e:	4699      	mov	r9, r3
    e910:	46a2      	mov	sl, r4
    e912:	46ab      	mov	fp, r5
    e914:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i=0;i<n_points;i++){
    e916:	2300      	movs	r3, #0
    e918:	4e09      	ldr	r6, [pc, #36]	; (e940 <cal_angleX+0x124>)
    e91a:	4698      	mov	r8, r3
    e91c:	1c1d      	adds	r5, r3, #0
    e91e:	e7de      	b.n	e8de <cal_angleX+0xc2>
    e920:	20003054 	.word	0x20003054
    e924:	fffffd74 	.word	0xfffffd74
    e928:	0001cde9 	.word	0x0001cde9
    e92c:	0001c4a5 	.word	0x0001c4a5
    e930:	0001eddd 	.word	0x0001eddd
    e934:	0001e115 	.word	0x0001e115
    e938:	0001d28d 	.word	0x0001d28d
    e93c:	0001ee81 	.word	0x0001ee81
    e940:	0001cba9 	.word	0x0001cba9
    e944:	0001c7c9 	.word	0x0001c7c9
    e948:	00024d14 	.word	0x00024d14
    e94c:	0000e6ad 	.word	0x0000e6ad

0000e950 <cal_angleYZ>:
void cal_angleYZ(float XYZ[][3], struct INST_CAL *cal_struct){
    e950:	b5f0      	push	{r4, r5, r6, r7, lr}
    e952:	46de      	mov	lr, fp
    e954:	4657      	mov	r7, sl
    e956:	464e      	mov	r6, r9
    e958:	4645      	mov	r5, r8
    e95a:	b5e0      	push	{r5, r6, r7, lr}
    e95c:	4ced      	ldr	r4, [pc, #948]	; (ed14 <cal_angleYZ+0x3c4>)
	B1_init = cal_struct->thetaY;
    e95e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
void cal_angleYZ(float XYZ[][3], struct INST_CAL *cal_struct){
    e960:	44a5      	add	sp, r4
	B1_init = cal_struct->thetaY;
    e962:	9216      	str	r2, [sp, #88]	; 0x58
	B2_init = -1*cal_struct->thetaZ;
    e964:	2280      	movs	r2, #128	; 0x80
    e966:	0612      	lsls	r2, r2, #24
    e968:	4694      	mov	ip, r2
    e96a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
void cal_angleYZ(float XYZ[][3], struct INST_CAL *cal_struct){
    e96c:	9018      	str	r0, [sp, #96]	; 0x60
	B2_init = -1*cal_struct->thetaZ;
    e96e:	4463      	add	r3, ip
    e970:	9317      	str	r3, [sp, #92]	; 0x5c
	for (k=0;k< n_groups;k++){
    e972:	4be9      	ldr	r3, [pc, #932]	; (ed18 <cal_angleYZ+0x3c8>)
void cal_angleYZ(float XYZ[][3], struct INST_CAL *cal_struct){
    e974:	911b      	str	r1, [sp, #108]	; 0x6c
	for (k=0;k< n_groups;k++){
    e976:	681b      	ldr	r3, [r3, #0]
    e978:	9301      	str	r3, [sp, #4]
    e97a:	2b00      	cmp	r3, #0
    e97c:	d100      	bne.n	e980 <cal_angleYZ+0x30>
    e97e:	e2f1      	b.n	ef64 <cal_angleYZ+0x614>
    e980:	2300      	movs	r3, #0
    e982:	9319      	str	r3, [sp, #100]	; 0x64
    e984:	931a      	str	r3, [sp, #104]	; 0x68
    e986:	4be5      	ldr	r3, [pc, #916]	; (ed1c <cal_angleYZ+0x3cc>)
    e988:	469a      	mov	sl, r3
    e98a:	4be5      	ldr	r3, [pc, #916]	; (ed20 <cal_angleYZ+0x3d0>)
    e98c:	469b      	mov	fp, r3
    e98e:	4be5      	ldr	r3, [pc, #916]	; (ed24 <cal_angleYZ+0x3d4>)
    e990:	9313      	str	r3, [sp, #76]	; 0x4c
    e992:	4be5      	ldr	r3, [pc, #916]	; (ed28 <cal_angleYZ+0x3d8>)
    e994:	9315      	str	r3, [sp, #84]	; 0x54
    e996:	4be5      	ldr	r3, [pc, #916]	; (ed2c <cal_angleYZ+0x3dc>)
    e998:	4699      	mov	r9, r3
    e99a:	4be5      	ldr	r3, [pc, #916]	; (ed30 <cal_angleYZ+0x3e0>)
    e99c:	9306      	str	r3, [sp, #24]
    e99e:	ab22      	add	r3, sp, #136	; 0x88
    e9a0:	9311      	str	r3, [sp, #68]	; 0x44
    e9a2:	ab72      	add	r3, sp, #456	; 0x1c8
    e9a4:	930e      	str	r3, [sp, #56]	; 0x38
    e9a6:	4be3      	ldr	r3, [pc, #908]	; (ed34 <cal_angleYZ+0x3e4>)
    e9a8:	9302      	str	r3, [sp, #8]
    e9aa:	4be3      	ldr	r3, [pc, #908]	; (ed38 <cal_angleYZ+0x3e8>)
    e9ac:	930f      	str	r3, [sp, #60]	; 0x3c
    e9ae:	4be3      	ldr	r3, [pc, #908]	; (ed3c <cal_angleYZ+0x3ec>)
    e9b0:	9310      	str	r3, [sp, #64]	; 0x40
    e9b2:	4be3      	ldr	r3, [pc, #908]	; (ed40 <cal_angleYZ+0x3f0>)
    e9b4:	9307      	str	r3, [sp, #28]
    e9b6:	4be3      	ldr	r3, [pc, #908]	; (ed44 <cal_angleYZ+0x3f4>)
    e9b8:	9308      	str	r3, [sp, #32]
    e9ba:	4be3      	ldr	r3, [pc, #908]	; (ed48 <cal_angleYZ+0x3f8>)
    e9bc:	9314      	str	r3, [sp, #80]	; 0x50
    e9be:	465b      	mov	r3, fp
    e9c0:	9301      	str	r3, [sp, #4]
    e9c2:	9a19      	ldr	r2, [sp, #100]	; 0x64
    e9c4:	0013      	movs	r3, r2
    e9c6:	3304      	adds	r3, #4
    e9c8:	b2db      	uxtb	r3, r3
    e9ca:	9312      	str	r3, [sp, #72]	; 0x48
    e9cc:	2300      	movs	r3, #0
    e9ce:	4693      	mov	fp, r2
    e9d0:	9304      	str	r3, [sp, #16]
			calc_theta_XY(&XYZ[ind][0], &roll_ang[ind], &x_ang_shift[ind]);
    e9d2:	465b      	mov	r3, fp
    e9d4:	9a18      	ldr	r2, [sp, #96]	; 0x60
    e9d6:	005b      	lsls	r3, r3, #1
    e9d8:	4690      	mov	r8, r2
    e9da:	445b      	add	r3, fp
    e9dc:	009b      	lsls	r3, r3, #2
    e9de:	4498      	add	r8, r3
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
    e9e0:	4643      	mov	r3, r8
    e9e2:	6858      	ldr	r0, [r3, #4]
    e9e4:	47d0      	blx	sl
    e9e6:	4643      	mov	r3, r8
    e9e8:	0006      	movs	r6, r0
    e9ea:	6898      	ldr	r0, [r3, #8]
    e9ec:	000f      	movs	r7, r1
    e9ee:	47d0      	blx	sl
    e9f0:	9c01      	ldr	r4, [sp, #4]
    e9f2:	0002      	movs	r2, r0
    e9f4:	000b      	movs	r3, r1
    e9f6:	47a0      	blx	r4
    e9f8:	0032      	movs	r2, r6
    e9fa:	0004      	movs	r4, r0
    e9fc:	000d      	movs	r5, r1
    e9fe:	003b      	movs	r3, r7
    ea00:	0030      	movs	r0, r6
    ea02:	0039      	movs	r1, r7
    ea04:	9e01      	ldr	r6, [sp, #4]
    ea06:	47b0      	blx	r6
    ea08:	0002      	movs	r2, r0
    ea0a:	000b      	movs	r3, r1
    ea0c:	0020      	movs	r0, r4
    ea0e:	0029      	movs	r1, r5
    ea10:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    ea12:	47a8      	blx	r5
    ea14:	9b15      	ldr	r3, [sp, #84]	; 0x54
    ea16:	4798      	blx	r3
	*thetaX = rad2deg*atan2(XYZ[1], XYZ[2]);
    ea18:	464b      	mov	r3, r9
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
    ea1a:	900a      	str	r0, [sp, #40]	; 0x28
    ea1c:	910b      	str	r1, [sp, #44]	; 0x2c
	*thetaX = rad2deg*atan2(XYZ[1], XYZ[2]);
    ea1e:	6818      	ldr	r0, [r3, #0]
    ea20:	47d0      	blx	sl
    ea22:	4643      	mov	r3, r8
    ea24:	0006      	movs	r6, r0
    ea26:	6898      	ldr	r0, [r3, #8]
    ea28:	000f      	movs	r7, r1
    ea2a:	47d0      	blx	sl
    ea2c:	4643      	mov	r3, r8
    ea2e:	0004      	movs	r4, r0
    ea30:	000d      	movs	r5, r1
    ea32:	6858      	ldr	r0, [r3, #4]
    ea34:	47d0      	blx	sl
    ea36:	0022      	movs	r2, r4
    ea38:	002b      	movs	r3, r5
    ea3a:	4dc4      	ldr	r5, [pc, #784]	; (ed4c <cal_angleYZ+0x3fc>)
    ea3c:	47a8      	blx	r5
    ea3e:	9d01      	ldr	r5, [sp, #4]
    ea40:	0002      	movs	r2, r0
    ea42:	000b      	movs	r3, r1
    ea44:	0030      	movs	r0, r6
    ea46:	0039      	movs	r1, r7
    ea48:	47a8      	blx	r5
    ea4a:	9c06      	ldr	r4, [sp, #24]
    ea4c:	47a0      	blx	r4
    ea4e:	465b      	mov	r3, fp
	*thetaY = -1*rad2deg*atan2(XYZ[0], ryz);
    ea50:	2280      	movs	r2, #128	; 0x80
	*thetaX = rad2deg*atan2(XYZ[1], XYZ[2]);
    ea52:	009f      	lsls	r7, r3, #2
    ea54:	9b11      	ldr	r3, [sp, #68]	; 0x44
	*thetaY = -1*rad2deg*atan2(XYZ[0], ryz);
    ea56:	0612      	lsls	r2, r2, #24
	*thetaX = rad2deg*atan2(XYZ[1], XYZ[2]);
    ea58:	51d8      	str	r0, [r3, r7]
	*thetaY = -1*rad2deg*atan2(XYZ[0], ryz);
    ea5a:	464b      	mov	r3, r9
    ea5c:	4694      	mov	ip, r2
    ea5e:	681b      	ldr	r3, [r3, #0]
	*thetaX = rad2deg*atan2(XYZ[1], XYZ[2]);
    ea60:	1c06      	adds	r6, r0, #0
	*thetaY = -1*rad2deg*atan2(XYZ[0], ryz);
    ea62:	4463      	add	r3, ip
    ea64:	0018      	movs	r0, r3
    ea66:	47d0      	blx	sl
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
    ea68:	9406      	str	r4, [sp, #24]
	*thetaY = -1*rad2deg*atan2(XYZ[0], ryz);
    ea6a:	900c      	str	r0, [sp, #48]	; 0x30
    ea6c:	910d      	str	r1, [sp, #52]	; 0x34
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
    ea6e:	980a      	ldr	r0, [sp, #40]	; 0x28
    ea70:	990b      	ldr	r1, [sp, #44]	; 0x2c
    ea72:	47a0      	blx	r4
	*thetaY = -1*rad2deg*atan2(XYZ[0], ryz);
    ea74:	47d0      	blx	sl
    ea76:	4643      	mov	r3, r8
    ea78:	0004      	movs	r4, r0
    ea7a:	000d      	movs	r5, r1
    ea7c:	6818      	ldr	r0, [r3, #0]
    ea7e:	47d0      	blx	sl
    ea80:	0022      	movs	r2, r4
    ea82:	002b      	movs	r3, r5
    ea84:	4cb1      	ldr	r4, [pc, #708]	; (ed4c <cal_angleYZ+0x3fc>)
    ea86:	47a0      	blx	r4
    ea88:	9c01      	ldr	r4, [sp, #4]
    ea8a:	0002      	movs	r2, r0
    ea8c:	000b      	movs	r3, r1
    ea8e:	980c      	ldr	r0, [sp, #48]	; 0x30
    ea90:	990d      	ldr	r1, [sp, #52]	; 0x34
    ea92:	47a0      	blx	r4
    ea94:	9d06      	ldr	r5, [sp, #24]
    ea96:	47a8      	blx	r5
    ea98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ea9a:	4680      	mov	r8, r0
    ea9c:	51d8      	str	r0, [r3, r7]
			- B1_init*cos(deg2rad*roll_ang[ind])
    ea9e:	4bac      	ldr	r3, [pc, #688]	; (ed50 <cal_angleYZ+0x400>)
    eaa0:	1c30      	adds	r0, r6, #0
    eaa2:	6819      	ldr	r1, [r3, #0]
    eaa4:	9b02      	ldr	r3, [sp, #8]
    eaa6:	4798      	blx	r3
    eaa8:	47d0      	blx	sl
    eaaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    eaac:	0004      	movs	r4, r0
    eaae:	000d      	movs	r5, r1
    eab0:	4798      	blx	r3
			- B2_init*sin(deg2rad*roll_ang[ind]);
    eab2:	9b10      	ldr	r3, [sp, #64]	; 0x40
			- B1_init*cos(deg2rad*roll_ang[ind])
    eab4:	000f      	movs	r7, r1
    eab6:	0006      	movs	r6, r0
			- B2_init*sin(deg2rad*roll_ang[ind]);
    eab8:	0029      	movs	r1, r5
    eaba:	0020      	movs	r0, r4
    eabc:	4798      	blx	r3
    eabe:	900a      	str	r0, [sp, #40]	; 0x28
    eac0:	910b      	str	r1, [sp, #44]	; 0x2c
			x_ang_comp  = x_ang_shift[ind]
    eac2:	4640      	mov	r0, r8
    eac4:	47d0      	blx	sl
    eac6:	0004      	movs	r4, r0
			- B1_init*cos(deg2rad*roll_ang[ind])
    eac8:	9816      	ldr	r0, [sp, #88]	; 0x58
			x_ang_comp  = x_ang_shift[ind]
    eaca:	000d      	movs	r5, r1
			- B1_init*cos(deg2rad*roll_ang[ind])
    eacc:	47d0      	blx	sl
    eace:	003b      	movs	r3, r7
    ead0:	0032      	movs	r2, r6
    ead2:	9f01      	ldr	r7, [sp, #4]
    ead4:	47b8      	blx	r7
    ead6:	0002      	movs	r2, r0
    ead8:	000b      	movs	r3, r1
    eada:	0020      	movs	r0, r4
    eadc:	0029      	movs	r1, r5
    eade:	9c07      	ldr	r4, [sp, #28]
    eae0:	47a0      	blx	r4
    eae2:	0004      	movs	r4, r0
			- B2_init*sin(deg2rad*roll_ang[ind]);
    eae4:	9817      	ldr	r0, [sp, #92]	; 0x5c
			- B1_init*cos(deg2rad*roll_ang[ind])
    eae6:	000d      	movs	r5, r1
			- B2_init*sin(deg2rad*roll_ang[ind]);
    eae8:	47d0      	blx	sl
    eaea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    eaec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    eaee:	47b8      	blx	r7
    eaf0:	0002      	movs	r2, r0
    eaf2:	000b      	movs	r3, r1
    eaf4:	0020      	movs	r0, r4
    eaf6:	0029      	movs	r1, r5
    eaf8:	9c07      	ldr	r4, [sp, #28]
    eafa:	47a0      	blx	r4
			x_ang_comp  = x_ang_shift[ind]
    eafc:	9d06      	ldr	r5, [sp, #24]
    eafe:	47a8      	blx	r5
			group_avg = group_avg+x_ang_comp;
    eb00:	9b08      	ldr	r3, [sp, #32]
			x_ang_comp  = x_ang_shift[ind]
    eb02:	1c01      	adds	r1, r0, #0
			group_avg = group_avg+x_ang_comp;
    eb04:	9804      	ldr	r0, [sp, #16]
    eb06:	4798      	blx	r3
    eb08:	465b      	mov	r3, fp
    eb0a:	3301      	adds	r3, #1
    eb0c:	b2db      	uxtb	r3, r3
    eb0e:	469b      	mov	fp, r3
		for (j=0;j<group_size;j++){
    eb10:	9b12      	ldr	r3, [sp, #72]	; 0x48
			group_avg = group_avg+x_ang_comp;
    eb12:	9004      	str	r0, [sp, #16]
		for (j=0;j<group_size;j++){
    eb14:	455b      	cmp	r3, fp
    eb16:	d000      	beq.n	eb1a <cal_angleYZ+0x1ca>
    eb18:	e75b      	b.n	e9d2 <cal_angleYZ+0x82>
		group_avg = group_avg/group_size;
    eb1a:	21fa      	movs	r1, #250	; 0xfa
    eb1c:	9b02      	ldr	r3, [sp, #8]
    eb1e:	0589      	lsls	r1, r1, #22
    eb20:	4798      	blx	r3
			x_ang_shift[ind] = x_ang_shift[ind]-group_avg;
    eb22:	9f19      	ldr	r7, [sp, #100]	; 0x64
    eb24:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    eb26:	00bc      	lsls	r4, r7, #2
		group_avg = group_avg/group_size;
    eb28:	1c05      	adds	r5, r0, #0
			x_ang_shift[ind] = x_ang_shift[ind]-group_avg;
    eb2a:	1c01      	adds	r1, r0, #0
    eb2c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    eb2e:	5930      	ldr	r0, [r6, r4]
    eb30:	4798      	blx	r3
    eb32:	5130      	str	r0, [r6, r4]
    eb34:	1c7c      	adds	r4, r7, #1
    eb36:	b2e4      	uxtb	r4, r4
    eb38:	00a4      	lsls	r4, r4, #2
    eb3a:	5930      	ldr	r0, [r6, r4]
    eb3c:	9a14      	ldr	r2, [sp, #80]	; 0x50
    eb3e:	1c29      	adds	r1, r5, #0
    eb40:	4790      	blx	r2
    eb42:	5130      	str	r0, [r6, r4]
    eb44:	1cbc      	adds	r4, r7, #2
    eb46:	b2e4      	uxtb	r4, r4
    eb48:	00a4      	lsls	r4, r4, #2
    eb4a:	5930      	ldr	r0, [r6, r4]
    eb4c:	1c29      	adds	r1, r5, #0
    eb4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    eb50:	4798      	blx	r3
    eb52:	5130      	str	r0, [r6, r4]
    eb54:	1cfc      	adds	r4, r7, #3
    eb56:	b2e4      	uxtb	r4, r4
    eb58:	00a4      	lsls	r4, r4, #2
    eb5a:	5930      	ldr	r0, [r6, r4]
    eb5c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    eb5e:	1c29      	adds	r1, r5, #0
    eb60:	4798      	blx	r3
    eb62:	9a12      	ldr	r2, [sp, #72]	; 0x48
	for (k=0;k< n_groups;k++){
    eb64:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    eb66:	9219      	str	r2, [sp, #100]	; 0x64
    eb68:	4a6b      	ldr	r2, [pc, #428]	; (ed18 <cal_angleYZ+0x3c8>)
    eb6a:	3301      	adds	r3, #1
    eb6c:	6812      	ldr	r2, [r2, #0]
    eb6e:	b2db      	uxtb	r3, r3
			x_ang_shift[ind] = x_ang_shift[ind]-group_avg;
    eb70:	5130      	str	r0, [r6, r4]
	for (k=0;k< n_groups;k++){
    eb72:	931a      	str	r3, [sp, #104]	; 0x68
    eb74:	9204      	str	r2, [sp, #16]
    eb76:	4293      	cmp	r3, r2
    eb78:	d200      	bcs.n	eb7c <cal_angleYZ+0x22c>
    eb7a:	e722      	b.n	e9c2 <cal_angleYZ+0x72>
	for (np=0;np<n_points;np++){
    eb7c:	4b75      	ldr	r3, [pc, #468]	; (ed54 <cal_angleYZ+0x404>)
    eb7e:	681f      	ldr	r7, [r3, #0]
    eb80:	469b      	mov	fp, r3
    eb82:	2f00      	cmp	r7, #0
    eb84:	d02e      	beq.n	ebe4 <cal_angleYZ+0x294>
    eb86:	2600      	movs	r6, #0
    eb88:	46b9      	mov	r9, r7
    eb8a:	4b71      	ldr	r3, [pc, #452]	; (ed50 <cal_angleYZ+0x400>)
    eb8c:	681b      	ldr	r3, [r3, #0]
    eb8e:	4698      	mov	r8, r3
    eb90:	4b62      	ldr	r3, [pc, #392]	; (ed1c <cal_angleYZ+0x3cc>)
    eb92:	469a      	mov	sl, r3
    eb94:	ab22      	add	r3, sp, #136	; 0x88
    eb96:	9311      	str	r3, [sp, #68]	; 0x44
    eb98:	4b67      	ldr	r3, [pc, #412]	; (ed38 <cal_angleYZ+0x3e8>)
    eb9a:	930f      	str	r3, [sp, #60]	; 0x3c
    eb9c:	4b67      	ldr	r3, [pc, #412]	; (ed3c <cal_angleYZ+0x3ec>)
    eb9e:	9310      	str	r3, [sp, #64]	; 0x40
		X[np][0] = cos(deg2rad*roll_ang[np]);
    eba0:	9a11      	ldr	r2, [sp, #68]	; 0x44
    eba2:	00b3      	lsls	r3, r6, #2
    eba4:	58d1      	ldr	r1, [r2, r3]
    eba6:	4640      	mov	r0, r8
    eba8:	9b02      	ldr	r3, [sp, #8]
    ebaa:	4798      	blx	r3
    ebac:	47d0      	blx	sl
    ebae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ebb0:	0004      	movs	r4, r0
    ebb2:	000d      	movs	r5, r1
    ebb4:	4798      	blx	r3
    ebb6:	9b06      	ldr	r3, [sp, #24]
    ebb8:	4798      	blx	r3
    ebba:	21a6      	movs	r1, #166	; 0xa6
    ebbc:	aa1c      	add	r2, sp, #112	; 0x70
    ebbe:	0089      	lsls	r1, r1, #2
    ebc0:	00f7      	lsls	r7, r6, #3
    ebc2:	1852      	adds	r2, r2, r1
    ebc4:	51d0      	str	r0, [r2, r7]
		X[np][1] = sin(deg2rad*roll_ang[np]);
    ebc6:	0029      	movs	r1, r5
    ebc8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ebca:	0020      	movs	r0, r4
    ebcc:	4790      	blx	r2
    ebce:	aac2      	add	r2, sp, #776	; 0x308
    ebd0:	4694      	mov	ip, r2
    ebd2:	9b06      	ldr	r3, [sp, #24]
    ebd4:	4467      	add	r7, ip
    ebd6:	4798      	blx	r3
	for (np=0;np<n_points;np++){
    ebd8:	3601      	adds	r6, #1
    ebda:	b2f6      	uxtb	r6, r6
		X[np][1] = sin(deg2rad*roll_ang[np]);
    ebdc:	6078      	str	r0, [r7, #4]
	for (np=0;np<n_points;np++){
    ebde:	454e      	cmp	r6, r9
    ebe0:	d3de      	bcc.n	eba0 <cal_angleYZ+0x250>
    ebe2:	464f      	mov	r7, r9
			for (np=0;np<n_points;np++){
    ebe4:	2300      	movs	r3, #0
    ebe6:	46b8      	mov	r8, r7
    ebe8:	4699      	mov	r9, r3
    ebea:	adc2      	add	r5, sp, #776	; 0x308
    ebec:	464b      	mov	r3, r9
    ebee:	aa1e      	add	r2, sp, #120	; 0x78
    ebf0:	4692      	mov	sl, r2
	for (np=0;np<n_points;np++){
    ebf2:	2700      	movs	r7, #0
    ebf4:	00db      	lsls	r3, r3, #3
    ebf6:	449a      	add	sl, r3
			tempX1[i][j]=0;
    ebf8:	4653      	mov	r3, sl
    ebfa:	2200      	movs	r2, #0
    ebfc:	601a      	str	r2, [r3, #0]
			for (np=0;np<n_points;np++){
    ebfe:	4643      	mov	r3, r8
    ec00:	2b00      	cmp	r3, #0
    ec02:	d01c      	beq.n	ec3e <cal_angleYZ+0x2ee>
    ec04:	003b      	movs	r3, r7
    ec06:	2600      	movs	r6, #0
    ec08:	4647      	mov	r7, r8
    ec0a:	2400      	movs	r4, #0
    ec0c:	4698      	mov	r8, r3
				tempX1[i][j] = tempX1[i][j]+X[np][j]*X[np][i];
    ec0e:	4642      	mov	r2, r8
    ec10:	0063      	lsls	r3, r4, #1
    ec12:	189a      	adds	r2, r3, r2
    ec14:	444b      	add	r3, r9
    ec16:	0092      	lsls	r2, r2, #2
    ec18:	009b      	lsls	r3, r3, #2
    ec1a:	58e9      	ldr	r1, [r5, r3]
    ec1c:	58a8      	ldr	r0, [r5, r2]
    ec1e:	9b02      	ldr	r3, [sp, #8]
    ec20:	4798      	blx	r3
    ec22:	9b08      	ldr	r3, [sp, #32]
    ec24:	1c01      	adds	r1, r0, #0
    ec26:	1c30      	adds	r0, r6, #0
    ec28:	4798      	blx	r3
			for (np=0;np<n_points;np++){
    ec2a:	3401      	adds	r4, #1
    ec2c:	b2e4      	uxtb	r4, r4
				tempX1[i][j] = tempX1[i][j]+X[np][j]*X[np][i];
    ec2e:	1c06      	adds	r6, r0, #0
			for (np=0;np<n_points;np++){
    ec30:	42a7      	cmp	r7, r4
    ec32:	d8ec      	bhi.n	ec0e <cal_angleYZ+0x2be>
    ec34:	4643      	mov	r3, r8
    ec36:	46b8      	mov	r8, r7
    ec38:	001f      	movs	r7, r3
    ec3a:	4653      	mov	r3, sl
    ec3c:	6018      	str	r0, [r3, #0]
    ec3e:	2304      	movs	r3, #4
    ec40:	469c      	mov	ip, r3
    ec42:	3701      	adds	r7, #1
    ec44:	44e2      	add	sl, ip
		for (j=0;j<2;j++){
    ec46:	2f02      	cmp	r7, #2
    ec48:	d1d6      	bne.n	ebf8 <cal_angleYZ+0x2a8>
    ec4a:	2301      	movs	r3, #1
    ec4c:	469c      	mov	ip, r3
    ec4e:	44e1      	add	r9, ip
	for (i=0;i<2;i++){
    ec50:	464b      	mov	r3, r9
    ec52:	2b02      	cmp	r3, #2
    ec54:	d1ca      	bne.n	ebec <cal_angleYZ+0x29c>
	detX = tempX1[0][0]*tempX1[1][1]-(tempX1[0][1]*tempX1[1][0]);
    ec56:	9b21      	ldr	r3, [sp, #132]	; 0x84
    ec58:	4647      	mov	r7, r8
    ec5a:	4698      	mov	r8, r3
    ec5c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    ec5e:	9e1e      	ldr	r6, [sp, #120]	; 0x78
    ec60:	469a      	mov	sl, r3
    ec62:	9b20      	ldr	r3, [sp, #128]	; 0x80
    ec64:	9d02      	ldr	r5, [sp, #8]
    ec66:	4641      	mov	r1, r8
    ec68:	1c30      	adds	r0, r6, #0
    ec6a:	4699      	mov	r9, r3
    ec6c:	47a8      	blx	r5
    ec6e:	4649      	mov	r1, r9
    ec70:	1c04      	adds	r4, r0, #0
    ec72:	9502      	str	r5, [sp, #8]
    ec74:	4650      	mov	r0, sl
    ec76:	47a8      	blx	r5
    ec78:	9b14      	ldr	r3, [sp, #80]	; 0x50
    ec7a:	1c01      	adds	r1, r0, #0
    ec7c:	1c20      	adds	r0, r4, #0
    ec7e:	4798      	blx	r3
	tempX2[0][0] = tempX1[1][1]/detX;
    ec80:	4c35      	ldr	r4, [pc, #212]	; (ed58 <cal_angleYZ+0x408>)
	detX = tempX1[0][0]*tempX1[1][1]-(tempX1[0][1]*tempX1[1][0]);
    ec82:	1c05      	adds	r5, r0, #0
	tempX2[0][0] = tempX1[1][1]/detX;
    ec84:	1c01      	adds	r1, r0, #0
    ec86:	4640      	mov	r0, r8
    ec88:	47a0      	blx	r4
	tempX2[1][1] = tempX1[0][0]/detX;
    ec8a:	1c29      	adds	r1, r5, #0
	tempX2[0][0] = tempX1[1][1]/detX;
    ec8c:	9004      	str	r0, [sp, #16]
	tempX2[1][1] = tempX1[0][0]/detX;
    ec8e:	1c30      	adds	r0, r6, #0
    ec90:	47a0      	blx	r4
	tempX2[0][1] = -1*tempX1[1][0]/detX;
    ec92:	2380      	movs	r3, #128	; 0x80
    ec94:	061b      	lsls	r3, r3, #24
    ec96:	444b      	add	r3, r9
    ec98:	1c29      	adds	r1, r5, #0
	tempX2[1][1] = tempX1[0][0]/detX;
    ec9a:	9007      	str	r0, [sp, #28]
	tempX2[0][1] = -1*tempX1[1][0]/detX;
    ec9c:	0018      	movs	r0, r3
    ec9e:	47a0      	blx	r4
	tempX2[1][0] = -1*tempX1[0][1]/detX;
    eca0:	2380      	movs	r3, #128	; 0x80
    eca2:	061b      	lsls	r3, r3, #24
    eca4:	4453      	add	r3, sl
	tempX2[0][1] = -1*tempX1[1][0]/detX;
    eca6:	4680      	mov	r8, r0
	tempX2[1][0] = -1*tempX1[0][1]/detX;
    eca8:	1c29      	adds	r1, r5, #0
    ecaa:	0018      	movs	r0, r3
    ecac:	47a0      	blx	r4
    ecae:	2300      	movs	r3, #0
    ecb0:	4699      	mov	r9, r3
    ecb2:	4643      	mov	r3, r8
    ecb4:	9a02      	ldr	r2, [sp, #8]
    ecb6:	930c      	str	r3, [sp, #48]	; 0x30
    ecb8:	9b08      	ldr	r3, [sp, #32]
    ecba:	46b8      	mov	r8, r7
    ecbc:	469a      	mov	sl, r3
    ecbe:	464f      	mov	r7, r9
    ecc0:	4691      	mov	r9, r2
    ecc2:	900a      	str	r0, [sp, #40]	; 0x28
    ecc4:	ad72      	add	r5, sp, #456	; 0x1c8
		tempX3[i] = 0;
    ecc6:	2100      	movs	r1, #0
    ecc8:	00bb      	lsls	r3, r7, #2
    ecca:	aa1c      	add	r2, sp, #112	; 0x70
    eccc:	9301      	str	r3, [sp, #4]
    ecce:	50d1      	str	r1, [r2, r3]
		for (np=0;np<n_points;np++){
    ecd0:	4643      	mov	r3, r8
    ecd2:	2b00      	cmp	r3, #0
    ecd4:	d042      	beq.n	ed5c <cal_angleYZ+0x40c>
    ecd6:	003b      	movs	r3, r7
    ecd8:	2600      	movs	r6, #0
    ecda:	4647      	mov	r7, r8
    ecdc:	2400      	movs	r4, #0
    ecde:	4698      	mov	r8, r3
			tempX3[i] = tempX3[i] + X[np][i]*x_ang_shift[np];
    ece0:	20a6      	movs	r0, #166	; 0xa6
    ece2:	00a2      	lsls	r2, r4, #2
    ece4:	0063      	lsls	r3, r4, #1
    ece6:	58a9      	ldr	r1, [r5, r2]
    ece8:	0080      	lsls	r0, r0, #2
    ecea:	4443      	add	r3, r8
    ecec:	aa1c      	add	r2, sp, #112	; 0x70
    ecee:	009b      	lsls	r3, r3, #2
    ecf0:	1812      	adds	r2, r2, r0
    ecf2:	58d0      	ldr	r0, [r2, r3]
    ecf4:	47c8      	blx	r9
    ecf6:	1c01      	adds	r1, r0, #0
    ecf8:	1c30      	adds	r0, r6, #0
    ecfa:	47d0      	blx	sl
		for (np=0;np<n_points;np++){
    ecfc:	3401      	adds	r4, #1
    ecfe:	b2e4      	uxtb	r4, r4
			tempX3[i] = tempX3[i] + X[np][i]*x_ang_shift[np];
    ed00:	1c06      	adds	r6, r0, #0
		for (np=0;np<n_points;np++){
    ed02:	42a7      	cmp	r7, r4
    ed04:	d8ec      	bhi.n	ece0 <cal_angleYZ+0x390>
    ed06:	4643      	mov	r3, r8
    ed08:	9a01      	ldr	r2, [sp, #4]
    ed0a:	46b8      	mov	r8, r7
    ed0c:	001f      	movs	r7, r3
    ed0e:	ab1c      	add	r3, sp, #112	; 0x70
    ed10:	5098      	str	r0, [r3, r2]
    ed12:	e023      	b.n	ed5c <cal_angleYZ+0x40c>
    ed14:	fffffa74 	.word	0xfffffa74
    ed18:	20002140 	.word	0x20002140
    ed1c:	0001eddd 	.word	0x0001eddd
    ed20:	0001e115 	.word	0x0001e115
    ed24:	0001d28d 	.word	0x0001d28d
    ed28:	000199b5 	.word	0x000199b5
    ed2c:	00024d14 	.word	0x00024d14
    ed30:	0001ee81 	.word	0x0001ee81
    ed34:	0001cba9 	.word	0x0001cba9
    ed38:	00019539 	.word	0x00019539
    ed3c:	000195c5 	.word	0x000195c5
    ed40:	0001e615 	.word	0x0001e615
    ed44:	0001c4a5 	.word	0x0001c4a5
    ed48:	0001cde9 	.word	0x0001cde9
    ed4c:	00019655 	.word	0x00019655
    ed50:	00024504 	.word	0x00024504
    ed54:	20003054 	.word	0x20003054
    ed58:	0001c7c9 	.word	0x0001c7c9
    ed5c:	3701      	adds	r7, #1
	for (i=0;i<2;i++){
    ed5e:	2f02      	cmp	r7, #2
    ed60:	d1b1      	bne.n	ecc6 <cal_angleYZ+0x376>
    ed62:	9d1c      	ldr	r5, [sp, #112]	; 0x70
    ed64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			B[i] = B[i]+tempX2[i][j]*tempX3[j];
    ed66:	9f02      	ldr	r7, [sp, #8]
    ed68:	1c29      	adds	r1, r5, #0
    ed6a:	9804      	ldr	r0, [sp, #16]
    ed6c:	4698      	mov	r8, r3
    ed6e:	47b8      	blx	r7
    ed70:	9b08      	ldr	r3, [sp, #32]
    ed72:	2100      	movs	r1, #0
    ed74:	4798      	blx	r3
    ed76:	9c1d      	ldr	r4, [sp, #116]	; 0x74
    ed78:	1c06      	adds	r6, r0, #0
    ed7a:	1c21      	adds	r1, r4, #0
    ed7c:	4640      	mov	r0, r8
    ed7e:	47b8      	blx	r7
    ed80:	9a08      	ldr	r2, [sp, #32]
    ed82:	1c01      	adds	r1, r0, #0
    ed84:	1c30      	adds	r0, r6, #0
    ed86:	4790      	blx	r2
	cal_struct->thetaY = B[0];
    ed88:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
			B[i] = B[i]+tempX2[i][j]*tempX3[j];
    ed8a:	1c29      	adds	r1, r5, #0
	cal_struct->thetaY = B[0];
    ed8c:	62d8      	str	r0, [r3, #44]	; 0x2c
			B[i] = B[i]+tempX2[i][j]*tempX3[j];
    ed8e:	980a      	ldr	r0, [sp, #40]	; 0x28
    ed90:	47b8      	blx	r7
    ed92:	003e      	movs	r6, r7
    ed94:	2100      	movs	r1, #0
    ed96:	9f08      	ldr	r7, [sp, #32]
    ed98:	47b8      	blx	r7
    ed9a:	1c21      	adds	r1, r4, #0
    ed9c:	1c05      	adds	r5, r0, #0
    ed9e:	9807      	ldr	r0, [sp, #28]
    eda0:	47b0      	blx	r6
    eda2:	1c01      	adds	r1, r0, #0
    eda4:	1c28      	adds	r0, r5, #0
    eda6:	47b8      	blx	r7
	cal_struct->thetaZ = -1*B[1];
    eda8:	2280      	movs	r2, #128	; 0x80
    edaa:	0612      	lsls	r2, r2, #24
    edac:	4694      	mov	ip, r2
    edae:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    edb0:	4460      	add	r0, ip
    edb2:	6320      	str	r0, [r4, #48]	; 0x30
	gen_RotM(cal_struct);
    edb4:	4b75      	ldr	r3, [pc, #468]	; (ef8c <cal_angleYZ+0x63c>)
    edb6:	0020      	movs	r0, r4
    edb8:	4798      	blx	r3
	B2_init = -1*cal_struct->thetaZ;
    edba:	2280      	movs	r2, #128	; 0x80
    edbc:	0612      	lsls	r2, r2, #24
    edbe:	4694      	mov	ip, r2
    edc0:	6b23      	ldr	r3, [r4, #48]	; 0x30
	B1_init = cal_struct->thetaY;
    edc2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	B2_init = -1*cal_struct->thetaZ;
    edc4:	4463      	add	r3, ip
    edc6:	001c      	movs	r4, r3
	for (np=0;np<n_points;np++){
    edc8:	465b      	mov	r3, fp
    edca:	681b      	ldr	r3, [r3, #0]
    edcc:	9301      	str	r3, [sp, #4]
    edce:	2b00      	cmp	r3, #0
    edd0:	d100      	bne.n	edd4 <cal_angleYZ+0x484>
    edd2:	e0d2      	b.n	ef7a <cal_angleYZ+0x62a>
    edd4:	4b6e      	ldr	r3, [pc, #440]	; (ef90 <cal_angleYZ+0x640>)
    edd6:	469a      	mov	sl, r3
    edd8:	4798      	blx	r3
    edda:	4b6e      	ldr	r3, [pc, #440]	; (ef94 <cal_angleYZ+0x644>)
    eddc:	9008      	str	r0, [sp, #32]
    edde:	9109      	str	r1, [sp, #36]	; 0x24
    ede0:	681b      	ldr	r3, [r3, #0]
    ede2:	1c20      	adds	r0, r4, #0
    ede4:	930a      	str	r3, [sp, #40]	; 0x28
    ede6:	47d0      	blx	sl
    ede8:	2300      	movs	r3, #0
    edea:	4698      	mov	r8, r3
    edec:	4b6a      	ldr	r3, [pc, #424]	; (ef98 <cal_angleYZ+0x648>)
    edee:	900c      	str	r0, [sp, #48]	; 0x30
    edf0:	910d      	str	r1, [sp, #52]	; 0x34
    edf2:	469b      	mov	fp, r3
    edf4:	ab22      	add	r3, sp, #136	; 0x88
    edf6:	9311      	str	r3, [sp, #68]	; 0x44
    edf8:	ab72      	add	r3, sp, #456	; 0x1c8
    edfa:	930e      	str	r3, [sp, #56]	; 0x38
    edfc:	4b67      	ldr	r3, [pc, #412]	; (ef9c <cal_angleYZ+0x64c>)
    edfe:	930f      	str	r3, [sp, #60]	; 0x3c
    ee00:	4b67      	ldr	r3, [pc, #412]	; (efa0 <cal_angleYZ+0x650>)
    ee02:	9310      	str	r3, [sp, #64]	; 0x40
    ee04:	4b67      	ldr	r3, [pc, #412]	; (efa4 <cal_angleYZ+0x654>)
    ee06:	9307      	str	r3, [sp, #28]
		- B1_init*cos(deg2rad*roll_ang[np])
    ee08:	4643      	mov	r3, r8
    ee0a:	009b      	lsls	r3, r3, #2
    ee0c:	4699      	mov	r9, r3
    ee0e:	464a      	mov	r2, r9
    ee10:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ee12:	980a      	ldr	r0, [sp, #40]	; 0x28
    ee14:	5899      	ldr	r1, [r3, r2]
    ee16:	9b02      	ldr	r3, [sp, #8]
    ee18:	4798      	blx	r3
    ee1a:	47d0      	blx	sl
    ee1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ee1e:	0004      	movs	r4, r0
    ee20:	000d      	movs	r5, r1
    ee22:	4798      	blx	r3
		- B2_init*sin(deg2rad*roll_ang[np]);
    ee24:	9b10      	ldr	r3, [sp, #64]	; 0x40
		- B1_init*cos(deg2rad*roll_ang[np])
    ee26:	0006      	movs	r6, r0
    ee28:	000f      	movs	r7, r1
		- B2_init*sin(deg2rad*roll_ang[np]);
    ee2a:	0020      	movs	r0, r4
    ee2c:	0029      	movs	r1, r5
    ee2e:	4798      	blx	r3
		x_ang_shift[np] = x_ang_shift[np]
    ee30:	464a      	mov	r2, r9
    ee32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		- B2_init*sin(deg2rad*roll_ang[np]);
    ee34:	9004      	str	r0, [sp, #16]
    ee36:	9105      	str	r1, [sp, #20]
		x_ang_shift[np] = x_ang_shift[np]
    ee38:	5898      	ldr	r0, [r3, r2]
    ee3a:	47d0      	blx	sl
		- B1_init*cos(deg2rad*roll_ang[np])
    ee3c:	9a08      	ldr	r2, [sp, #32]
    ee3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
		x_ang_shift[np] = x_ang_shift[np]
    ee40:	0004      	movs	r4, r0
    ee42:	000d      	movs	r5, r1
		- B1_init*cos(deg2rad*roll_ang[np])
    ee44:	0030      	movs	r0, r6
    ee46:	0039      	movs	r1, r7
    ee48:	47d8      	blx	fp
    ee4a:	9e07      	ldr	r6, [sp, #28]
    ee4c:	0002      	movs	r2, r0
    ee4e:	000b      	movs	r3, r1
    ee50:	0020      	movs	r0, r4
    ee52:	0029      	movs	r1, r5
    ee54:	47b0      	blx	r6
		- B2_init*sin(deg2rad*roll_ang[np]);
    ee56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ee58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		- B1_init*cos(deg2rad*roll_ang[np])
    ee5a:	0004      	movs	r4, r0
    ee5c:	000d      	movs	r5, r1
		- B2_init*sin(deg2rad*roll_ang[np]);
    ee5e:	9804      	ldr	r0, [sp, #16]
    ee60:	9905      	ldr	r1, [sp, #20]
    ee62:	47d8      	blx	fp
    ee64:	000b      	movs	r3, r1
    ee66:	0002      	movs	r2, r0
    ee68:	0029      	movs	r1, r5
    ee6a:	0020      	movs	r0, r4
    ee6c:	47b0      	blx	r6
    ee6e:	9a06      	ldr	r2, [sp, #24]
    ee70:	4790      	blx	r2
    ee72:	464a      	mov	r2, r9
    ee74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ee76:	5098      	str	r0, [r3, r2]
	for (np=0;np<n_points;np++){
    ee78:	4643      	mov	r3, r8
    ee7a:	3301      	adds	r3, #1
    ee7c:	b2db      	uxtb	r3, r3
    ee7e:	4698      	mov	r8, r3
    ee80:	9b01      	ldr	r3, [sp, #4]
    ee82:	4543      	cmp	r3, r8
    ee84:	d8c0      	bhi.n	ee08 <cal_angleYZ+0x4b8>
    ee86:	4a48      	ldr	r2, [pc, #288]	; (efa8 <cal_angleYZ+0x658>)
    ee88:	001f      	movs	r7, r3
    ee8a:	2600      	movs	r6, #0
    ee8c:	2400      	movs	r4, #0
    ee8e:	2500      	movs	r5, #0
    ee90:	2300      	movs	r3, #0
    ee92:	4690      	mov	r8, r2
    ee94:	9213      	str	r2, [sp, #76]	; 0x4c
		mean = mean+data[i];
    ee96:	a91c      	add	r1, sp, #112	; 0x70
    ee98:	22a3      	movs	r2, #163	; 0xa3
    ee9a:	468c      	mov	ip, r1
    ee9c:	00d2      	lsls	r2, r2, #3
    ee9e:	4462      	add	r2, ip
    eea0:	4694      	mov	ip, r2
    eea2:	4a42      	ldr	r2, [pc, #264]	; (efac <cal_angleYZ+0x65c>)
    eea4:	009b      	lsls	r3, r3, #2
    eea6:	4463      	add	r3, ip
    eea8:	4694      	mov	ip, r2
    eeaa:	4463      	add	r3, ip
    eeac:	6818      	ldr	r0, [r3, #0]
    eeae:	47d0      	blx	sl
    eeb0:	000b      	movs	r3, r1
    eeb2:	0002      	movs	r2, r0
    eeb4:	0029      	movs	r1, r5
    eeb6:	0020      	movs	r0, r4
    eeb8:	47c0      	blx	r8
	for (i=0;i<n_meas;i++){
    eeba:	3601      	adds	r6, #1
    eebc:	b2f6      	uxtb	r6, r6
		mean = mean+data[i];
    eebe:	0004      	movs	r4, r0
    eec0:	000d      	movs	r5, r1
	for (i=0;i<n_meas;i++){
    eec2:	0033      	movs	r3, r6
    eec4:	42b7      	cmp	r7, r6
    eec6:	d8e6      	bhi.n	ee96 <cal_angleYZ+0x546>
    eec8:	9f01      	ldr	r7, [sp, #4]
    eeca:	4e39      	ldr	r6, [pc, #228]	; (efb0 <cal_angleYZ+0x660>)
    eecc:	1e78      	subs	r0, r7, #1
    eece:	47b0      	blx	r6
    eed0:	9004      	str	r0, [sp, #16]
    eed2:	9105      	str	r1, [sp, #20]
	mean = mean/n_meas;
    eed4:	0038      	movs	r0, r7
    eed6:	47b0      	blx	r6
    eed8:	4f36      	ldr	r7, [pc, #216]	; (efb4 <cal_angleYZ+0x664>)
    eeda:	0002      	movs	r2, r0
    eedc:	000b      	movs	r3, r1
    eede:	0020      	movs	r0, r4
    eee0:	0029      	movs	r1, r5
    eee2:	47b8      	blx	r7
    eee4:	9a07      	ldr	r2, [sp, #28]
    eee6:	46b9      	mov	r9, r7
    eee8:	4657      	mov	r7, sl
    eeea:	4692      	mov	sl, r2
    eeec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    eeee:	2600      	movs	r6, #0
    eef0:	2400      	movs	r4, #0
    eef2:	2500      	movs	r5, #0
    eef4:	2300      	movs	r3, #0
    eef6:	4690      	mov	r8, r2
    eef8:	9002      	str	r0, [sp, #8]
    eefa:	9103      	str	r1, [sp, #12]
		sumsq = sumsq+pow((data[i]-mean),2);
    eefc:	a91c      	add	r1, sp, #112	; 0x70
    eefe:	22a3      	movs	r2, #163	; 0xa3
    ef00:	468c      	mov	ip, r1
    ef02:	00d2      	lsls	r2, r2, #3
    ef04:	4462      	add	r2, ip
    ef06:	4694      	mov	ip, r2
    ef08:	4a28      	ldr	r2, [pc, #160]	; (efac <cal_angleYZ+0x65c>)
    ef0a:	009b      	lsls	r3, r3, #2
    ef0c:	4463      	add	r3, ip
    ef0e:	4694      	mov	ip, r2
    ef10:	4463      	add	r3, ip
    ef12:	6818      	ldr	r0, [r3, #0]
    ef14:	47b8      	blx	r7
    ef16:	9a02      	ldr	r2, [sp, #8]
    ef18:	9b03      	ldr	r3, [sp, #12]
    ef1a:	47d0      	blx	sl
    ef1c:	0002      	movs	r2, r0
    ef1e:	000b      	movs	r3, r1
    ef20:	47d8      	blx	fp
    ef22:	0002      	movs	r2, r0
    ef24:	000b      	movs	r3, r1
    ef26:	0020      	movs	r0, r4
    ef28:	0029      	movs	r1, r5
    ef2a:	47c0      	blx	r8
	for (i=0;i<n_meas;i++){
    ef2c:	3601      	adds	r6, #1
    ef2e:	9a01      	ldr	r2, [sp, #4]
    ef30:	b2f6      	uxtb	r6, r6
		sumsq = sumsq+pow((data[i]-mean),2);
    ef32:	0004      	movs	r4, r0
    ef34:	000d      	movs	r5, r1
	for (i=0;i<n_meas;i++){
    ef36:	0033      	movs	r3, r6
    ef38:	42b2      	cmp	r2, r6
    ef3a:	d8df      	bhi.n	eefc <cal_angleYZ+0x5ac>
    ef3c:	464f      	mov	r7, r9
	sumsq = sumsq/(n_meas-1);
    ef3e:	9a04      	ldr	r2, [sp, #16]
    ef40:	9b05      	ldr	r3, [sp, #20]
    ef42:	0020      	movs	r0, r4
    ef44:	0029      	movs	r1, r5
    ef46:	47b8      	blx	r7
	sumsq = sqrt(sumsq);
    ef48:	9b15      	ldr	r3, [sp, #84]	; 0x54
    ef4a:	4798      	blx	r3
	return sumsq;
    ef4c:	9b06      	ldr	r3, [sp, #24]
    ef4e:	4798      	blx	r3
    ef50:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    ef52:	65d8      	str	r0, [r3, #92]	; 0x5c
}
    ef54:	4b18      	ldr	r3, [pc, #96]	; (efb8 <cal_angleYZ+0x668>)
    ef56:	449d      	add	sp, r3
    ef58:	bc3c      	pop	{r2, r3, r4, r5}
    ef5a:	4690      	mov	r8, r2
    ef5c:	4699      	mov	r9, r3
    ef5e:	46a2      	mov	sl, r4
    ef60:	46ab      	mov	fp, r5
    ef62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ef64:	4b15      	ldr	r3, [pc, #84]	; (efbc <cal_angleYZ+0x66c>)
    ef66:	9315      	str	r3, [sp, #84]	; 0x54
    ef68:	4b15      	ldr	r3, [pc, #84]	; (efc0 <cal_angleYZ+0x670>)
    ef6a:	9306      	str	r3, [sp, #24]
    ef6c:	4b15      	ldr	r3, [pc, #84]	; (efc4 <cal_angleYZ+0x674>)
    ef6e:	9302      	str	r3, [sp, #8]
    ef70:	4b15      	ldr	r3, [pc, #84]	; (efc8 <cal_angleYZ+0x678>)
    ef72:	9308      	str	r3, [sp, #32]
    ef74:	4b15      	ldr	r3, [pc, #84]	; (efcc <cal_angleYZ+0x67c>)
    ef76:	9314      	str	r3, [sp, #80]	; 0x50
    ef78:	e600      	b.n	eb7c <cal_angleYZ+0x22c>
	for (np=0;np<n_points;np++){
    ef7a:	4c15      	ldr	r4, [pc, #84]	; (efd0 <cal_angleYZ+0x680>)
    ef7c:	4b15      	ldr	r3, [pc, #84]	; (efd4 <cal_angleYZ+0x684>)
	sumsq = 0;
    ef7e:	2500      	movs	r5, #0
	for (np=0;np<n_points;np++){
    ef80:	9304      	str	r3, [sp, #16]
    ef82:	9405      	str	r4, [sp, #20]
    ef84:	4f0b      	ldr	r7, [pc, #44]	; (efb4 <cal_angleYZ+0x664>)
	sumsq = 0;
    ef86:	2400      	movs	r4, #0
    ef88:	e7d9      	b.n	ef3e <cal_angleYZ+0x5ee>
    ef8a:	46c0      	nop			; (mov r8, r8)
    ef8c:	0000e6ad 	.word	0x0000e6ad
    ef90:	0001eddd 	.word	0x0001eddd
    ef94:	00024504 	.word	0x00024504
    ef98:	0001e115 	.word	0x0001e115
    ef9c:	00019539 	.word	0x00019539
    efa0:	000195c5 	.word	0x000195c5
    efa4:	0001e615 	.word	0x0001e615
    efa8:	0001d28d 	.word	0x0001d28d
    efac:	fffffc40 	.word	0xfffffc40
    efb0:	0001ed6d 	.word	0x0001ed6d
    efb4:	0001d8ad 	.word	0x0001d8ad
    efb8:	0000058c 	.word	0x0000058c
    efbc:	000199b5 	.word	0x000199b5
    efc0:	0001ee81 	.word	0x0001ee81
    efc4:	0001cba9 	.word	0x0001cba9
    efc8:	0001c4a5 	.word	0x0001c4a5
    efcc:	0001cde9 	.word	0x0001cde9
    efd0:	41efffff 	.word	0x41efffff
    efd4:	ffe00000 	.word	0xffe00000

0000efd8 <determinant>:
	
}


float determinant(float a[6][6], uint8_t k)
{
    efd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    efda:	46de      	mov	lr, fp
    efdc:	4657      	mov	r7, sl
    efde:	464e      	mov	r6, r9
    efe0:	4645      	mov	r5, r8
    efe2:	b5e0      	push	{r5, r6, r7, lr}
    efe4:	4ce0      	ldr	r4, [pc, #896]	; (f368 <determinant+0x390>)
    efe6:	44a5      	add	sp, r4
    efe8:	9017      	str	r0, [sp, #92]	; 0x5c
    efea:	911c      	str	r1, [sp, #112]	; 0x70
	float s = 1, det = 0, b[6][6];
	uint8_t i, j, m, n, c;
	if (k == 1)
    efec:	2901      	cmp	r1, #1
    efee:	d100      	bne.n	eff2 <determinant+0x1a>
    eff0:	e1ed      	b.n	f3ce <determinant+0x3f6>
		return (a[0][0]);
	}
	else
	{
		det = 0;
		for (c = 0; c < k; c++)
    eff2:	2900      	cmp	r1, #0
    eff4:	d100      	bne.n	eff8 <determinant+0x20>
    eff6:	e1d9      	b.n	f3ac <determinant+0x3d4>
							m++;
						}
					}
				}
			}
			det = det + s * (a[0][c] * determinant(b, k - 1));
    eff8:	000b      	movs	r3, r1
    effa:	000a      	movs	r2, r1
    effc:	3b01      	subs	r3, #1
    effe:	b2db      	uxtb	r3, r3
    f000:	0019      	movs	r1, r3
    f002:	930e      	str	r3, [sp, #56]	; 0x38
    f004:	0013      	movs	r3, r2
    f006:	3a02      	subs	r2, #2
    f008:	9222      	str	r2, [sp, #136]	; 0x88
    f00a:	b2d2      	uxtb	r2, r2
    f00c:	9214      	str	r2, [sp, #80]	; 0x50
    f00e:	001a      	movs	r2, r3
    f010:	3b03      	subs	r3, #3
    f012:	b2db      	uxtb	r3, r3
    f014:	9315      	str	r3, [sp, #84]	; 0x54
    f016:	0013      	movs	r3, r2
    f018:	3b04      	subs	r3, #4
    f01a:	b2db      	uxtb	r3, r3
    f01c:	930b      	str	r3, [sp, #44]	; 0x2c
    f01e:	0013      	movs	r3, r2
    f020:	3b05      	subs	r3, #5
    f022:	b2db      	uxtb	r3, r3
    f024:	469a      	mov	sl, r3
    f026:	000b      	movs	r3, r1
    f028:	3301      	adds	r3, #1
    f02a:	9321      	str	r3, [sp, #132]	; 0x84
    f02c:	2300      	movs	r3, #0
    f02e:	9306      	str	r3, [sp, #24]
    f030:	2300      	movs	r3, #0
    f032:	930d      	str	r3, [sp, #52]	; 0x34
    f034:	23fe      	movs	r3, #254	; 0xfe
    f036:	059b      	lsls	r3, r3, #22
    f038:	9318      	str	r3, [sp, #96]	; 0x60
			for (i = 0;i < k; i++)
    f03a:	2000      	movs	r0, #0
    f03c:	466b      	mov	r3, sp
    f03e:	900c      	str	r0, [sp, #48]	; 0x30
					b[i][j] = 0;
    f040:	2000      	movs	r0, #0
    f042:	7e1e      	ldrb	r6, [r3, #24]
    f044:	9d1c      	ldr	r5, [sp, #112]	; 0x70
    f046:	46b0      	mov	r8, r6
    f048:	46ac      	mov	ip, r5
    f04a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    f04c:	9d22      	ldr	r5, [sp, #136]	; 0x88
			for (i = 0;i < k; i++)
    f04e:	a924      	add	r1, sp, #144	; 0x90
    f050:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    f052:	2300      	movs	r3, #0
    f054:	2200      	movs	r2, #0
    f056:	46a9      	mov	r9, r5
					b[i][j] = 0;
    f058:	6008      	str	r0, [r1, #0]
					if (i != 0 && j != c)
    f05a:	2e00      	cmp	r6, #0
    f05c:	d100      	bne.n	f060 <determinant+0x88>
    f05e:	e08c      	b.n	f17a <determinant+0x1a2>
    f060:	9e06      	ldr	r6, [sp, #24]
    f062:	2e00      	cmp	r6, #0
    f064:	d100      	bne.n	f068 <determinant+0x90>
    f066:	e190      	b.n	f38a <determinant+0x3b2>
						b[m][n] = a[i][j];
    f068:	0056      	lsls	r6, r2, #1
    f06a:	18b6      	adds	r6, r6, r2
    f06c:	0076      	lsls	r6, r6, #1
    f06e:	18f6      	adds	r6, r6, r3
    f070:	6825      	ldr	r5, [r4, #0]
    f072:	00b6      	lsls	r6, r6, #2
    f074:	af24      	add	r7, sp, #144	; 0x90
    f076:	51bd      	str	r5, [r7, r6]
						if (n < (k - 2))
    f078:	454b      	cmp	r3, r9
    f07a:	da00      	bge.n	f07e <determinant+0xa6>
    f07c:	e179      	b.n	f372 <determinant+0x39a>
					if (i != 0 && j != c)
    f07e:	4645      	mov	r5, r8
							m++;
    f080:	3201      	adds	r2, #1
    f082:	b2d2      	uxtb	r2, r2
							n = 0;
    f084:	2300      	movs	r3, #0
					b[i][j] = 0;
    f086:	6048      	str	r0, [r1, #4]
					if (i != 0 && j != c)
    f088:	2d01      	cmp	r5, #1
    f08a:	d100      	bne.n	f08e <determinant+0xb6>
    f08c:	e178      	b.n	f380 <determinant+0x3a8>
						b[m][n] = a[i][j];
    f08e:	0056      	lsls	r6, r2, #1
    f090:	18b6      	adds	r6, r6, r2
    f092:	0076      	lsls	r6, r6, #1
    f094:	18f6      	adds	r6, r6, r3
    f096:	6867      	ldr	r7, [r4, #4]
    f098:	00b6      	lsls	r6, r6, #2
    f09a:	ad24      	add	r5, sp, #144	; 0x90
    f09c:	51af      	str	r7, [r5, r6]
						if (n < (k - 2))
    f09e:	454b      	cmp	r3, r9
    f0a0:	da00      	bge.n	f0a4 <determinant+0xcc>
    f0a2:	e163      	b.n	f36c <determinant+0x394>
							n = 0;
    f0a4:	2300      	movs	r3, #0
							m++;
    f0a6:	3201      	adds	r2, #1
    f0a8:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
    f0aa:	4665      	mov	r5, ip
    f0ac:	2d02      	cmp	r5, #2
    f0ae:	d100      	bne.n	f0b2 <determinant+0xda>
    f0b0:	e151      	b.n	f356 <determinant+0x37e>
					if (i != 0 && j != c)
    f0b2:	9d06      	ldr	r5, [sp, #24]
					b[i][j] = 0;
    f0b4:	6088      	str	r0, [r1, #8]
					if (i != 0 && j != c)
    f0b6:	2d02      	cmp	r5, #2
    f0b8:	d100      	bne.n	f0bc <determinant+0xe4>
    f0ba:	e172      	b.n	f3a2 <determinant+0x3ca>
						b[m][n] = a[i][j];
    f0bc:	0056      	lsls	r6, r2, #1
    f0be:	18b6      	adds	r6, r6, r2
    f0c0:	0076      	lsls	r6, r6, #1
    f0c2:	18f6      	adds	r6, r6, r3
    f0c4:	68a7      	ldr	r7, [r4, #8]
    f0c6:	00b6      	lsls	r6, r6, #2
    f0c8:	ad24      	add	r5, sp, #144	; 0x90
    f0ca:	51af      	str	r7, [r5, r6]
						if (n < (k - 2))
    f0cc:	454b      	cmp	r3, r9
    f0ce:	da00      	bge.n	f0d2 <determinant+0xfa>
    f0d0:	e146      	b.n	f360 <determinant+0x388>
							n = 0;
    f0d2:	2300      	movs	r3, #0
							m++;
    f0d4:	3201      	adds	r2, #1
    f0d6:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
    f0d8:	4665      	mov	r5, ip
    f0da:	2d03      	cmp	r5, #3
    f0dc:	d100      	bne.n	f0e0 <determinant+0x108>
    f0de:	e13a      	b.n	f356 <determinant+0x37e>
					if (i != 0 && j != c)
    f0e0:	9d06      	ldr	r5, [sp, #24]
					b[i][j] = 0;
    f0e2:	60c8      	str	r0, [r1, #12]
					if (i != 0 && j != c)
    f0e4:	2d03      	cmp	r5, #3
    f0e6:	d100      	bne.n	f0ea <determinant+0x112>
    f0e8:	e156      	b.n	f398 <determinant+0x3c0>
						b[m][n] = a[i][j];
    f0ea:	0056      	lsls	r6, r2, #1
    f0ec:	18b6      	adds	r6, r6, r2
    f0ee:	0076      	lsls	r6, r6, #1
    f0f0:	18f6      	adds	r6, r6, r3
    f0f2:	68e7      	ldr	r7, [r4, #12]
    f0f4:	00b6      	lsls	r6, r6, #2
    f0f6:	ad24      	add	r5, sp, #144	; 0x90
    f0f8:	51af      	str	r7, [r5, r6]
						if (n < (k - 2))
    f0fa:	454b      	cmp	r3, r9
    f0fc:	da00      	bge.n	f100 <determinant+0x128>
    f0fe:	e12c      	b.n	f35a <determinant+0x382>
							n = 0;
    f100:	2300      	movs	r3, #0
							m++;
    f102:	3201      	adds	r2, #1
    f104:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
    f106:	4665      	mov	r5, ip
    f108:	2d04      	cmp	r5, #4
    f10a:	d100      	bne.n	f10e <determinant+0x136>
    f10c:	e123      	b.n	f356 <determinant+0x37e>
					if (i != 0 && j != c)
    f10e:	9d06      	ldr	r5, [sp, #24]
					b[i][j] = 0;
    f110:	6108      	str	r0, [r1, #16]
					if (i != 0 && j != c)
    f112:	2d04      	cmp	r5, #4
    f114:	d100      	bne.n	f118 <determinant+0x140>
    f116:	e13a      	b.n	f38e <determinant+0x3b6>
						b[m][n] = a[i][j];
    f118:	0056      	lsls	r6, r2, #1
    f11a:	18b6      	adds	r6, r6, r2
    f11c:	0076      	lsls	r6, r6, #1
    f11e:	18f6      	adds	r6, r6, r3
    f120:	6927      	ldr	r7, [r4, #16]
    f122:	00b6      	lsls	r6, r6, #2
    f124:	ad24      	add	r5, sp, #144	; 0x90
    f126:	51af      	str	r7, [r5, r6]
						if (n < (k - 2))
    f128:	454b      	cmp	r3, r9
    f12a:	da00      	bge.n	f12e <determinant+0x156>
    f12c:	e10d      	b.n	f34a <determinant+0x372>
				for (j = 0 ;j < k; j++)
    f12e:	4665      	mov	r5, ip
							m++;
    f130:	3201      	adds	r2, #1
    f132:	b2d2      	uxtb	r2, r2
							n = 0;
    f134:	2300      	movs	r3, #0
				for (j = 0 ;j < k; j++)
    f136:	2d05      	cmp	r5, #5
    f138:	d100      	bne.n	f13c <determinant+0x164>
    f13a:	e10c      	b.n	f356 <determinant+0x37e>
					if (i != 0 && j != c)
    f13c:	9d06      	ldr	r5, [sp, #24]
					b[i][j] = 0;
    f13e:	6148      	str	r0, [r1, #20]
					if (i != 0 && j != c)
    f140:	2d05      	cmp	r5, #5
    f142:	d100      	bne.n	f146 <determinant+0x16e>
    f144:	e107      	b.n	f356 <determinant+0x37e>
						b[m][n] = a[i][j];
    f146:	0056      	lsls	r6, r2, #1
    f148:	18b6      	adds	r6, r6, r2
    f14a:	0076      	lsls	r6, r6, #1
    f14c:	18f6      	adds	r6, r6, r3
    f14e:	6967      	ldr	r7, [r4, #20]
    f150:	00b6      	lsls	r6, r6, #2
    f152:	ad24      	add	r5, sp, #144	; 0x90
    f154:	51af      	str	r7, [r5, r6]
						if (n < (k - 2))
    f156:	454b      	cmp	r3, r9
    f158:	da00      	bge.n	f15c <determinant+0x184>
    f15a:	e0f2      	b.n	f342 <determinant+0x36a>
							n = 0;
    f15c:	2300      	movs	r3, #0
							m++;
    f15e:	3201      	adds	r2, #1
    f160:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    f162:	b2d2      	uxtb	r2, r2
			for (i = 0;i < k; i++)
    f164:	3601      	adds	r6, #1
    f166:	b2f6      	uxtb	r6, r6
    f168:	3118      	adds	r1, #24
    f16a:	3418      	adds	r4, #24
    f16c:	45b4      	cmp	ip, r6
    f16e:	d01f      	beq.n	f1b0 <determinant+0x1d8>
    f170:	960c      	str	r6, [sp, #48]	; 0x30
					b[i][j] = 0;
    f172:	6008      	str	r0, [r1, #0]
					if (i != 0 && j != c)
    f174:	2e00      	cmp	r6, #0
    f176:	d000      	beq.n	f17a <determinant+0x1a2>
    f178:	e772      	b.n	f060 <determinant+0x88>
				for (j = 0 ;j < k; j++)
    f17a:	4665      	mov	r5, ip
					b[i][j] = 0;
    f17c:	6048      	str	r0, [r1, #4]
				for (j = 0 ;j < k; j++)
    f17e:	2d02      	cmp	r5, #2
    f180:	d100      	bne.n	f184 <determinant+0x1ac>
    f182:	e11f      	b.n	f3c4 <determinant+0x3ec>
    f184:	4665      	mov	r5, ip
					b[i][j] = 0;
    f186:	6088      	str	r0, [r1, #8]
				for (j = 0 ;j < k; j++)
    f188:	2d03      	cmp	r5, #3
    f18a:	d100      	bne.n	f18e <determinant+0x1b6>
    f18c:	e11a      	b.n	f3c4 <determinant+0x3ec>
    f18e:	4665      	mov	r5, ip
					b[i][j] = 0;
    f190:	60c8      	str	r0, [r1, #12]
				for (j = 0 ;j < k; j++)
    f192:	2d04      	cmp	r5, #4
    f194:	d100      	bne.n	f198 <determinant+0x1c0>
    f196:	e115      	b.n	f3c4 <determinant+0x3ec>
    f198:	4665      	mov	r5, ip
					b[i][j] = 0;
    f19a:	6108      	str	r0, [r1, #16]
				for (j = 0 ;j < k; j++)
    f19c:	2d05      	cmp	r5, #5
    f19e:	d100      	bne.n	f1a2 <determinant+0x1ca>
    f1a0:	e110      	b.n	f3c4 <determinant+0x3ec>
			for (i = 0;i < k; i++)
    f1a2:	3601      	adds	r6, #1
    f1a4:	b2f6      	uxtb	r6, r6
					b[i][j] = 0;
    f1a6:	6148      	str	r0, [r1, #20]
    f1a8:	3418      	adds	r4, #24
    f1aa:	3118      	adds	r1, #24
			for (i = 0;i < k; i++)
    f1ac:	45b4      	cmp	ip, r6
    f1ae:	d1df      	bne.n	f170 <determinant+0x198>
			det = det + s * (a[0][c] * determinant(b, k - 1));
    f1b0:	9b06      	ldr	r3, [sp, #24]
    f1b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    f1b4:	009b      	lsls	r3, r3, #2
    f1b6:	58d3      	ldr	r3, [r2, r3]
    f1b8:	931d      	str	r3, [sp, #116]	; 0x74
	if (k == 1)
    f1ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f1bc:	2b01      	cmp	r3, #1
    f1be:	d100      	bne.n	f1c2 <determinant+0x1ea>
    f1c0:	e209      	b.n	f5d6 <determinant+0x5fe>
    f1c2:	2300      	movs	r3, #0
    f1c4:	9308      	str	r3, [sp, #32]
    f1c6:	2300      	movs	r3, #0
    f1c8:	2700      	movs	r7, #0
    f1ca:	930f      	str	r3, [sp, #60]	; 0x3c
    f1cc:	23fe      	movs	r3, #254	; 0xfe
    f1ce:	4655      	mov	r5, sl
    f1d0:	46bc      	mov	ip, r7
    f1d2:	059b      	lsls	r3, r3, #22
    f1d4:	9319      	str	r3, [sp, #100]	; 0x64
    f1d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f1d8:	3b02      	subs	r3, #2
    f1da:	9323      	str	r3, [sp, #140]	; 0x8c
    f1dc:	2601      	movs	r6, #1
    f1de:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    f1e0:	af24      	add	r7, sp, #144	; 0x90
    f1e2:	46a2      	mov	sl, r4
    f1e4:	9c23      	ldr	r4, [sp, #140]	; 0x8c
    f1e6:	46b0      	mov	r8, r6
    f1e8:	a948      	add	r1, sp, #288	; 0x120
    f1ea:	2300      	movs	r3, #0
    f1ec:	2200      	movs	r2, #0
					b[i][j] = 0;
    f1ee:	2000      	movs	r0, #0
    f1f0:	46a9      	mov	r9, r5
    f1f2:	003e      	movs	r6, r7
    f1f4:	46a3      	mov	fp, r4
    f1f6:	e081      	b.n	f2fc <determinant+0x324>
					if (i != 0 && j != c)
    f1f8:	4664      	mov	r4, ip
							m++;
    f1fa:	3201      	adds	r2, #1
    f1fc:	b2d2      	uxtb	r2, r2
							n = 0;
    f1fe:	2300      	movs	r3, #0
					b[i][j] = 0;
    f200:	6048      	str	r0, [r1, #4]
					if (i != 0 && j != c)
    f202:	2c01      	cmp	r4, #1
    f204:	d100      	bne.n	f208 <determinant+0x230>
    f206:	e097      	b.n	f338 <determinant+0x360>
						b[m][n] = a[i][j];
    f208:	2790      	movs	r7, #144	; 0x90
    f20a:	0055      	lsls	r5, r2, #1
    f20c:	18ad      	adds	r5, r5, r2
    f20e:	006d      	lsls	r5, r5, #1
    f210:	ac24      	add	r4, sp, #144	; 0x90
    f212:	19e4      	adds	r4, r4, r7
    f214:	18ed      	adds	r5, r5, r3
    f216:	6877      	ldr	r7, [r6, #4]
    f218:	00ad      	lsls	r5, r5, #2
    f21a:	5167      	str	r7, [r4, r5]
						if (n < (k - 2))
    f21c:	455b      	cmp	r3, fp
    f21e:	da00      	bge.n	f222 <determinant+0x24a>
    f220:	e0d9      	b.n	f3d6 <determinant+0x3fe>
				for (j = 0 ;j < k; j++)
    f222:	4654      	mov	r4, sl
							m++;
    f224:	3201      	adds	r2, #1
    f226:	b2d2      	uxtb	r2, r2
							n = 0;
    f228:	2300      	movs	r3, #0
				for (j = 0 ;j < k; j++)
    f22a:	2c02      	cmp	r4, #2
    f22c:	d100      	bne.n	f230 <determinant+0x258>
    f22e:	e0d8      	b.n	f3e2 <determinant+0x40a>
					if (i != 0 && j != c)
    f230:	9c08      	ldr	r4, [sp, #32]
					b[i][j] = 0;
    f232:	6088      	str	r0, [r1, #8]
					if (i != 0 && j != c)
    f234:	2c02      	cmp	r4, #2
    f236:	d101      	bne.n	f23c <determinant+0x264>
    f238:	f000 fed2 	bl	ffe0 <determinant+0x1008>
						b[m][n] = a[i][j];
    f23c:	2790      	movs	r7, #144	; 0x90
    f23e:	0055      	lsls	r5, r2, #1
    f240:	18ad      	adds	r5, r5, r2
    f242:	006d      	lsls	r5, r5, #1
    f244:	ac24      	add	r4, sp, #144	; 0x90
    f246:	19e4      	adds	r4, r4, r7
    f248:	18ed      	adds	r5, r5, r3
    f24a:	68b7      	ldr	r7, [r6, #8]
    f24c:	00ad      	lsls	r5, r5, #2
    f24e:	5167      	str	r7, [r4, r5]
						if (n < (k - 2))
    f250:	455b      	cmp	r3, fp
    f252:	da00      	bge.n	f256 <determinant+0x27e>
    f254:	e197      	b.n	f586 <determinant+0x5ae>
							n = 0;
    f256:	2300      	movs	r3, #0
							m++;
    f258:	3201      	adds	r2, #1
    f25a:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
    f25c:	4654      	mov	r4, sl
    f25e:	2c03      	cmp	r4, #3
    f260:	d043      	beq.n	f2ea <determinant+0x312>
					if (i != 0 && j != c)
    f262:	9c08      	ldr	r4, [sp, #32]
					b[i][j] = 0;
    f264:	60c8      	str	r0, [r1, #12]
					if (i != 0 && j != c)
    f266:	2c03      	cmp	r4, #3
    f268:	d100      	bne.n	f26c <determinant+0x294>
    f26a:	e1ae      	b.n	f5ca <determinant+0x5f2>
						b[m][n] = a[i][j];
    f26c:	2790      	movs	r7, #144	; 0x90
    f26e:	0055      	lsls	r5, r2, #1
    f270:	18ad      	adds	r5, r5, r2
    f272:	006d      	lsls	r5, r5, #1
    f274:	ac24      	add	r4, sp, #144	; 0x90
    f276:	19e4      	adds	r4, r4, r7
    f278:	18ed      	adds	r5, r5, r3
    f27a:	68f7      	ldr	r7, [r6, #12]
    f27c:	00ad      	lsls	r5, r5, #2
    f27e:	5167      	str	r7, [r4, r5]
						if (n < (k - 2))
    f280:	455b      	cmp	r3, fp
    f282:	da00      	bge.n	f286 <determinant+0x2ae>
    f284:	e19e      	b.n	f5c4 <determinant+0x5ec>
							n = 0;
    f286:	2300      	movs	r3, #0
							m++;
    f288:	3201      	adds	r2, #1
    f28a:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
    f28c:	4654      	mov	r4, sl
    f28e:	2c04      	cmp	r4, #4
    f290:	d02b      	beq.n	f2ea <determinant+0x312>
					if (i != 0 && j != c)
    f292:	9c08      	ldr	r4, [sp, #32]
					b[i][j] = 0;
    f294:	6108      	str	r0, [r1, #16]
					if (i != 0 && j != c)
    f296:	2c04      	cmp	r4, #4
    f298:	d100      	bne.n	f29c <determinant+0x2c4>
    f29a:	e1b9      	b.n	f610 <determinant+0x638>
						b[m][n] = a[i][j];
    f29c:	2790      	movs	r7, #144	; 0x90
    f29e:	0055      	lsls	r5, r2, #1
    f2a0:	18ad      	adds	r5, r5, r2
    f2a2:	006d      	lsls	r5, r5, #1
    f2a4:	ac24      	add	r4, sp, #144	; 0x90
    f2a6:	19e4      	adds	r4, r4, r7
    f2a8:	18ed      	adds	r5, r5, r3
    f2aa:	6937      	ldr	r7, [r6, #16]
    f2ac:	00ad      	lsls	r5, r5, #2
    f2ae:	5167      	str	r7, [r4, r5]
						if (n < (k - 2))
    f2b0:	455b      	cmp	r3, fp
    f2b2:	da00      	bge.n	f2b6 <determinant+0x2de>
    f2b4:	e183      	b.n	f5be <determinant+0x5e6>
							n = 0;
    f2b6:	2300      	movs	r3, #0
							m++;
    f2b8:	3201      	adds	r2, #1
    f2ba:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
    f2bc:	4654      	mov	r4, sl
    f2be:	2c05      	cmp	r4, #5
    f2c0:	d013      	beq.n	f2ea <determinant+0x312>
					if (i != 0 && j != c)
    f2c2:	9c08      	ldr	r4, [sp, #32]
					b[i][j] = 0;
    f2c4:	6148      	str	r0, [r1, #20]
					if (i != 0 && j != c)
    f2c6:	2c05      	cmp	r4, #5
    f2c8:	d00f      	beq.n	f2ea <determinant+0x312>
						b[m][n] = a[i][j];
    f2ca:	2790      	movs	r7, #144	; 0x90
    f2cc:	0055      	lsls	r5, r2, #1
    f2ce:	18ad      	adds	r5, r5, r2
    f2d0:	006d      	lsls	r5, r5, #1
    f2d2:	ac24      	add	r4, sp, #144	; 0x90
    f2d4:	19e4      	adds	r4, r4, r7
    f2d6:	18ed      	adds	r5, r5, r3
    f2d8:	6977      	ldr	r7, [r6, #20]
    f2da:	00ad      	lsls	r5, r5, #2
    f2dc:	5167      	str	r7, [r4, r5]
						if (n < (k - 2))
    f2de:	455b      	cmp	r3, fp
    f2e0:	da00      	bge.n	f2e4 <determinant+0x30c>
    f2e2:	e169      	b.n	f5b8 <determinant+0x5e0>
							n = 0;
    f2e4:	2300      	movs	r3, #0
							m++;
    f2e6:	3201      	adds	r2, #1
    f2e8:	b2d2      	uxtb	r2, r2
			for (i = 0;i < k; i++)
    f2ea:	45c2      	cmp	sl, r8
    f2ec:	d800      	bhi.n	f2f0 <determinant+0x318>
    f2ee:	e078      	b.n	f3e2 <determinant+0x40a>
    f2f0:	4645      	mov	r5, r8
    f2f2:	3501      	adds	r5, #1
    f2f4:	b2ed      	uxtb	r5, r5
    f2f6:	46a8      	mov	r8, r5
    f2f8:	3118      	adds	r1, #24
    f2fa:	3618      	adds	r6, #24
					if (i != 0 && j != c)
    f2fc:	4645      	mov	r5, r8
					b[i][j] = 0;
    f2fe:	6008      	str	r0, [r1, #0]
					if (i != 0 && j != c)
    f300:	2d01      	cmp	r5, #1
    f302:	d100      	bne.n	f306 <determinant+0x32e>
    f304:	e142      	b.n	f58c <determinant+0x5b4>
    f306:	9d08      	ldr	r5, [sp, #32]
    f308:	2d00      	cmp	r5, #0
    f30a:	d101      	bne.n	f310 <determinant+0x338>
    f30c:	f000 fe70 	bl	fff0 <determinant+0x1018>
						b[m][n] = a[i][j];
    f310:	2490      	movs	r4, #144	; 0x90
    f312:	0055      	lsls	r5, r2, #1
    f314:	18ad      	adds	r5, r5, r2
    f316:	006d      	lsls	r5, r5, #1
    f318:	af24      	add	r7, sp, #144	; 0x90
    f31a:	193f      	adds	r7, r7, r4
    f31c:	18ed      	adds	r5, r5, r3
    f31e:	6834      	ldr	r4, [r6, #0]
    f320:	00ad      	lsls	r5, r5, #2
    f322:	517c      	str	r4, [r7, r5]
						if (n < (k - 2))
    f324:	455b      	cmp	r3, fp
    f326:	db00      	blt.n	f32a <determinant+0x352>
    f328:	e766      	b.n	f1f8 <determinant+0x220>
					if (i != 0 && j != c)
    f32a:	4664      	mov	r4, ip
						n++;
    f32c:	3301      	adds	r3, #1
    f32e:	b2db      	uxtb	r3, r3
					b[i][j] = 0;
    f330:	6048      	str	r0, [r1, #4]
					if (i != 0 && j != c)
    f332:	2c01      	cmp	r4, #1
    f334:	d000      	beq.n	f338 <determinant+0x360>
    f336:	e767      	b.n	f208 <determinant+0x230>
				for (j = 0 ;j < k; j++)
    f338:	4654      	mov	r4, sl
    f33a:	2c02      	cmp	r4, #2
    f33c:	d051      	beq.n	f3e2 <determinant+0x40a>
					b[i][j] = 0;
    f33e:	6088      	str	r0, [r1, #8]
    f340:	e77c      	b.n	f23c <determinant+0x264>
						n++;
    f342:	3301      	adds	r3, #1
    f344:	b2db      	uxtb	r3, r3
    f346:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    f348:	e70c      	b.n	f164 <determinant+0x18c>
				for (j = 0 ;j < k; j++)
    f34a:	4665      	mov	r5, ip
						n++;
    f34c:	3301      	adds	r3, #1
    f34e:	b2db      	uxtb	r3, r3
				for (j = 0 ;j < k; j++)
    f350:	2d05      	cmp	r5, #5
    f352:	d000      	beq.n	f356 <determinant+0x37e>
    f354:	e6f2      	b.n	f13c <determinant+0x164>
    f356:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    f358:	e704      	b.n	f164 <determinant+0x18c>
						n++;
    f35a:	3301      	adds	r3, #1
    f35c:	b2db      	uxtb	r3, r3
    f35e:	e6d2      	b.n	f106 <determinant+0x12e>
    f360:	3301      	adds	r3, #1
    f362:	b2db      	uxtb	r3, r3
    f364:	e6b8      	b.n	f0d8 <determinant+0x100>
    f366:	46c0      	nop			; (mov r8, r8)
    f368:	fffffc0c 	.word	0xfffffc0c
    f36c:	3301      	adds	r3, #1
    f36e:	b2db      	uxtb	r3, r3
    f370:	e69b      	b.n	f0aa <determinant+0xd2>
					if (i != 0 && j != c)
    f372:	4645      	mov	r5, r8
						n++;
    f374:	3301      	adds	r3, #1
    f376:	b2db      	uxtb	r3, r3
					b[i][j] = 0;
    f378:	6048      	str	r0, [r1, #4]
					if (i != 0 && j != c)
    f37a:	2d01      	cmp	r5, #1
    f37c:	d000      	beq.n	f380 <determinant+0x3a8>
    f37e:	e686      	b.n	f08e <determinant+0xb6>
				for (j = 0 ;j < k; j++)
    f380:	4665      	mov	r5, ip
    f382:	2d02      	cmp	r5, #2
    f384:	d0e7      	beq.n	f356 <determinant+0x37e>
					b[i][j] = 0;
    f386:	6088      	str	r0, [r1, #8]
    f388:	e698      	b.n	f0bc <determinant+0xe4>
    f38a:	6048      	str	r0, [r1, #4]
    f38c:	e67f      	b.n	f08e <determinant+0xb6>
				for (j = 0 ;j < k; j++)
    f38e:	4665      	mov	r5, ip
    f390:	2d05      	cmp	r5, #5
    f392:	d0e0      	beq.n	f356 <determinant+0x37e>
					b[i][j] = 0;
    f394:	6148      	str	r0, [r1, #20]
    f396:	e6d6      	b.n	f146 <determinant+0x16e>
				for (j = 0 ;j < k; j++)
    f398:	4665      	mov	r5, ip
    f39a:	2d04      	cmp	r5, #4
    f39c:	d0db      	beq.n	f356 <determinant+0x37e>
					b[i][j] = 0;
    f39e:	6108      	str	r0, [r1, #16]
    f3a0:	e6ba      	b.n	f118 <determinant+0x140>
				for (j = 0 ;j < k; j++)
    f3a2:	4665      	mov	r5, ip
    f3a4:	2d03      	cmp	r5, #3
    f3a6:	d0d6      	beq.n	f356 <determinant+0x37e>
					b[i][j] = 0;
    f3a8:	60c8      	str	r0, [r1, #12]
    f3aa:	e69e      	b.n	f0ea <determinant+0x112>
		for (c = 0; c < k; c++)
    f3ac:	2300      	movs	r3, #0
    f3ae:	930d      	str	r3, [sp, #52]	; 0x34
    f3b0:	1c18      	adds	r0, r3, #0
			s = -1 * s;
		}
	}
	
	return (det);
}
    f3b2:	23fd      	movs	r3, #253	; 0xfd
    f3b4:	009b      	lsls	r3, r3, #2
    f3b6:	449d      	add	sp, r3
    f3b8:	bc3c      	pop	{r2, r3, r4, r5}
    f3ba:	4690      	mov	r8, r2
    f3bc:	4699      	mov	r9, r3
    f3be:	46a2      	mov	sl, r4
    f3c0:	46ab      	mov	fp, r5
    f3c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			for (i = 0;i < k; i++)
    f3c4:	2601      	movs	r6, #1
    f3c6:	3118      	adds	r1, #24
    f3c8:	3418      	adds	r4, #24
    f3ca:	960c      	str	r6, [sp, #48]	; 0x30
    f3cc:	e6d1      	b.n	f172 <determinant+0x19a>
		return (a[0][0]);
    f3ce:	6803      	ldr	r3, [r0, #0]
    f3d0:	930d      	str	r3, [sp, #52]	; 0x34
    f3d2:	1c18      	adds	r0, r3, #0
    f3d4:	e7ed      	b.n	f3b2 <determinant+0x3da>
				for (j = 0 ;j < k; j++)
    f3d6:	4654      	mov	r4, sl
						n++;
    f3d8:	3301      	adds	r3, #1
    f3da:	b2db      	uxtb	r3, r3
				for (j = 0 ;j < k; j++)
    f3dc:	2c02      	cmp	r4, #2
    f3de:	d000      	beq.n	f3e2 <determinant+0x40a>
    f3e0:	e726      	b.n	f230 <determinant+0x258>
			det = det + s * (a[0][c] * determinant(b, k - 1));
    f3e2:	9b08      	ldr	r3, [sp, #32]
    f3e4:	aa24      	add	r2, sp, #144	; 0x90
    f3e6:	009b      	lsls	r3, r3, #2
    f3e8:	58d3      	ldr	r3, [r2, r3]
    f3ea:	464d      	mov	r5, r9
    f3ec:	931e      	str	r3, [sp, #120]	; 0x78
	if (k == 1)
    f3ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
    f3f0:	2b01      	cmp	r3, #1
    f3f2:	d101      	bne.n	f3f8 <determinant+0x420>
    f3f4:	f000 fdf0 	bl	ffd8 <determinant+0x1000>
    f3f8:	2300      	movs	r3, #0
    f3fa:	9309      	str	r3, [sp, #36]	; 0x24
    f3fc:	2300      	movs	r3, #0
    f3fe:	9310      	str	r3, [sp, #64]	; 0x40
    f400:	23fe      	movs	r3, #254	; 0xfe
    f402:	059b      	lsls	r3, r3, #22
    f404:	931a      	str	r3, [sp, #104]	; 0x68
    f406:	2300      	movs	r3, #0
    f408:	469c      	mov	ip, r3
					b[i][j] = 0;
    f40a:	2000      	movs	r0, #0
							n = 0;
    f40c:	2701      	movs	r7, #1
    f40e:	9c14      	ldr	r4, [sp, #80]	; 0x50
					b[i][j] = 0;
    f410:	4681      	mov	r9, r0
    f412:	1ea0      	subs	r0, r4, #2
    f414:	4680      	mov	r8, r0
    f416:	0038      	movs	r0, r7
							n = 0;
    f418:	ae48      	add	r6, sp, #288	; 0x120
    f41a:	a96c      	add	r1, sp, #432	; 0x1b0
    f41c:	2300      	movs	r3, #0
    f41e:	2200      	movs	r2, #0
    f420:	46aa      	mov	sl, r5
    f422:	0037      	movs	r7, r6
    f424:	4683      	mov	fp, r0
    f426:	e088      	b.n	f53a <determinant+0x562>
					b[i][j] = 0;
    f428:	4648      	mov	r0, r9
    f42a:	6048      	str	r0, [r1, #4]
					if (i != 0 && j != c)
    f42c:	4660      	mov	r0, ip
							m++;
    f42e:	3201      	adds	r2, #1
    f430:	b2d2      	uxtb	r2, r2
							n = 0;
    f432:	2300      	movs	r3, #0
					if (i != 0 && j != c)
    f434:	2801      	cmp	r0, #1
    f436:	d100      	bne.n	f43a <determinant+0x462>
    f438:	e0a0      	b.n	f57c <determinant+0x5a4>
						b[m][n] = a[i][j];
    f43a:	2690      	movs	r6, #144	; 0x90
    f43c:	0055      	lsls	r5, r2, #1
    f43e:	18ad      	adds	r5, r5, r2
    f440:	0076      	lsls	r6, r6, #1
    f442:	006d      	lsls	r5, r5, #1
    f444:	a824      	add	r0, sp, #144	; 0x90
    f446:	1980      	adds	r0, r0, r6
    f448:	18ed      	adds	r5, r5, r3
    f44a:	687e      	ldr	r6, [r7, #4]
    f44c:	00ad      	lsls	r5, r5, #2
    f44e:	5146      	str	r6, [r0, r5]
						if (n < (k - 2))
    f450:	4543      	cmp	r3, r8
    f452:	da00      	bge.n	f456 <determinant+0x47e>
    f454:	e0e5      	b.n	f622 <determinant+0x64a>
							m++;
    f456:	3201      	adds	r2, #1
    f458:	b2d2      	uxtb	r2, r2
							n = 0;
    f45a:	2300      	movs	r3, #0
				for (j = 0 ;j < k; j++)
    f45c:	2c02      	cmp	r4, #2
    f45e:	d100      	bne.n	f462 <determinant+0x48a>
    f460:	e0e4      	b.n	f62c <determinant+0x654>
					b[i][j] = 0;
    f462:	4648      	mov	r0, r9
    f464:	6088      	str	r0, [r1, #8]
					if (i != 0 && j != c)
    f466:	9809      	ldr	r0, [sp, #36]	; 0x24
    f468:	2802      	cmp	r0, #2
    f46a:	d101      	bne.n	f470 <determinant+0x498>
    f46c:	f000 fdd3 	bl	10016 <determinant+0x103e>
						b[m][n] = a[i][j];
    f470:	2690      	movs	r6, #144	; 0x90
    f472:	0055      	lsls	r5, r2, #1
    f474:	18ad      	adds	r5, r5, r2
    f476:	0076      	lsls	r6, r6, #1
    f478:	006d      	lsls	r5, r5, #1
    f47a:	a824      	add	r0, sp, #144	; 0x90
    f47c:	1980      	adds	r0, r0, r6
    f47e:	18ed      	adds	r5, r5, r3
    f480:	68be      	ldr	r6, [r7, #8]
    f482:	00ad      	lsls	r5, r5, #2
    f484:	5146      	str	r6, [r0, r5]
						if (n < (k - 2))
    f486:	4543      	cmp	r3, r8
    f488:	da00      	bge.n	f48c <determinant+0x4b4>
    f48a:	e0c7      	b.n	f61c <determinant+0x644>
							n = 0;
    f48c:	2300      	movs	r3, #0
							m++;
    f48e:	3201      	adds	r2, #1
    f490:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
    f492:	2c03      	cmp	r4, #3
    f494:	d049      	beq.n	f52a <determinant+0x552>
					b[i][j] = 0;
    f496:	4648      	mov	r0, r9
    f498:	60c8      	str	r0, [r1, #12]
					if (i != 0 && j != c)
    f49a:	9809      	ldr	r0, [sp, #36]	; 0x24
    f49c:	2803      	cmp	r0, #3
    f49e:	d101      	bne.n	f4a4 <determinant+0x4cc>
    f4a0:	f000 fdb1 	bl	10006 <determinant+0x102e>
						b[m][n] = a[i][j];
    f4a4:	2690      	movs	r6, #144	; 0x90
    f4a6:	0055      	lsls	r5, r2, #1
    f4a8:	18ad      	adds	r5, r5, r2
    f4aa:	0076      	lsls	r6, r6, #1
    f4ac:	006d      	lsls	r5, r5, #1
    f4ae:	a824      	add	r0, sp, #144	; 0x90
    f4b0:	1980      	adds	r0, r0, r6
    f4b2:	18ed      	adds	r5, r5, r3
    f4b4:	68fe      	ldr	r6, [r7, #12]
    f4b6:	00ad      	lsls	r5, r5, #2
    f4b8:	5146      	str	r6, [r0, r5]
						if (n < (k - 2))
    f4ba:	4543      	cmp	r3, r8
    f4bc:	da00      	bge.n	f4c0 <determinant+0x4e8>
    f4be:	e1d9      	b.n	f874 <determinant+0x89c>
							n = 0;
    f4c0:	2300      	movs	r3, #0
							m++;
    f4c2:	3201      	adds	r2, #1
    f4c4:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
    f4c6:	2c04      	cmp	r4, #4
    f4c8:	d02f      	beq.n	f52a <determinant+0x552>
					b[i][j] = 0;
    f4ca:	4648      	mov	r0, r9
    f4cc:	6108      	str	r0, [r1, #16]
					if (i != 0 && j != c)
    f4ce:	9809      	ldr	r0, [sp, #36]	; 0x24
    f4d0:	2804      	cmp	r0, #4
    f4d2:	d101      	bne.n	f4d8 <determinant+0x500>
    f4d4:	f000 fd8f 	bl	fff6 <determinant+0x101e>
						b[m][n] = a[i][j];
    f4d8:	2690      	movs	r6, #144	; 0x90
    f4da:	0055      	lsls	r5, r2, #1
    f4dc:	18ad      	adds	r5, r5, r2
    f4de:	0076      	lsls	r6, r6, #1
    f4e0:	006d      	lsls	r5, r5, #1
    f4e2:	a824      	add	r0, sp, #144	; 0x90
    f4e4:	1980      	adds	r0, r0, r6
    f4e6:	18ed      	adds	r5, r5, r3
    f4e8:	693e      	ldr	r6, [r7, #16]
    f4ea:	00ad      	lsls	r5, r5, #2
    f4ec:	5146      	str	r6, [r0, r5]
						if (n < (k - 2))
    f4ee:	4543      	cmp	r3, r8
    f4f0:	da00      	bge.n	f4f4 <determinant+0x51c>
    f4f2:	e1bc      	b.n	f86e <determinant+0x896>
							n = 0;
    f4f4:	2300      	movs	r3, #0
							m++;
    f4f6:	3201      	adds	r2, #1
    f4f8:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
    f4fa:	2c05      	cmp	r4, #5
    f4fc:	d015      	beq.n	f52a <determinant+0x552>
					b[i][j] = 0;
    f4fe:	4648      	mov	r0, r9
    f500:	6148      	str	r0, [r1, #20]
					if (i != 0 && j != c)
    f502:	9809      	ldr	r0, [sp, #36]	; 0x24
    f504:	2805      	cmp	r0, #5
    f506:	d010      	beq.n	f52a <determinant+0x552>
						b[m][n] = a[i][j];
    f508:	2690      	movs	r6, #144	; 0x90
    f50a:	0055      	lsls	r5, r2, #1
    f50c:	18ad      	adds	r5, r5, r2
    f50e:	0076      	lsls	r6, r6, #1
    f510:	006d      	lsls	r5, r5, #1
    f512:	a824      	add	r0, sp, #144	; 0x90
    f514:	1980      	adds	r0, r0, r6
    f516:	18ed      	adds	r5, r5, r3
    f518:	697e      	ldr	r6, [r7, #20]
    f51a:	00ad      	lsls	r5, r5, #2
    f51c:	5146      	str	r6, [r0, r5]
						if (n < (k - 2))
    f51e:	4543      	cmp	r3, r8
    f520:	da00      	bge.n	f524 <determinant+0x54c>
    f522:	e1a1      	b.n	f868 <determinant+0x890>
							n = 0;
    f524:	2300      	movs	r3, #0
							m++;
    f526:	3201      	adds	r2, #1
    f528:	b2d2      	uxtb	r2, r2
			for (i = 0;i < k; i++)
    f52a:	455c      	cmp	r4, fp
    f52c:	d97e      	bls.n	f62c <determinant+0x654>
    f52e:	465e      	mov	r6, fp
    f530:	3601      	adds	r6, #1
    f532:	b2f0      	uxtb	r0, r6
    f534:	4683      	mov	fp, r0
    f536:	3118      	adds	r1, #24
    f538:	3718      	adds	r7, #24
					b[i][j] = 0;
    f53a:	4648      	mov	r0, r9
    f53c:	6008      	str	r0, [r1, #0]
					if (i != 0 && j != c)
    f53e:	4658      	mov	r0, fp
    f540:	2801      	cmp	r0, #1
    f542:	d100      	bne.n	f546 <determinant+0x56e>
    f544:	e199      	b.n	f87a <determinant+0x8a2>
    f546:	9d09      	ldr	r5, [sp, #36]	; 0x24
    f548:	2d00      	cmp	r5, #0
    f54a:	d101      	bne.n	f550 <determinant+0x578>
    f54c:	f000 fd73 	bl	10036 <determinant+0x105e>
						b[m][n] = a[i][j];
    f550:	2090      	movs	r0, #144	; 0x90
    f552:	0055      	lsls	r5, r2, #1
    f554:	18ad      	adds	r5, r5, r2
    f556:	0040      	lsls	r0, r0, #1
    f558:	006d      	lsls	r5, r5, #1
    f55a:	ae24      	add	r6, sp, #144	; 0x90
    f55c:	1836      	adds	r6, r6, r0
    f55e:	18ed      	adds	r5, r5, r3
    f560:	6838      	ldr	r0, [r7, #0]
    f562:	00ad      	lsls	r5, r5, #2
    f564:	5170      	str	r0, [r6, r5]
						if (n < (k - 2))
    f566:	4543      	cmp	r3, r8
    f568:	db00      	blt.n	f56c <determinant+0x594>
    f56a:	e75d      	b.n	f428 <determinant+0x450>
					b[i][j] = 0;
    f56c:	4648      	mov	r0, r9
    f56e:	6048      	str	r0, [r1, #4]
					if (i != 0 && j != c)
    f570:	4660      	mov	r0, ip
						n++;
    f572:	3301      	adds	r3, #1
    f574:	b2db      	uxtb	r3, r3
					if (i != 0 && j != c)
    f576:	2801      	cmp	r0, #1
    f578:	d000      	beq.n	f57c <determinant+0x5a4>
    f57a:	e75e      	b.n	f43a <determinant+0x462>
				for (j = 0 ;j < k; j++)
    f57c:	2c02      	cmp	r4, #2
    f57e:	d055      	beq.n	f62c <determinant+0x654>
					b[i][j] = 0;
    f580:	4648      	mov	r0, r9
    f582:	6088      	str	r0, [r1, #8]
    f584:	e774      	b.n	f470 <determinant+0x498>
						n++;
    f586:	3301      	adds	r3, #1
    f588:	b2db      	uxtb	r3, r3
    f58a:	e667      	b.n	f25c <determinant+0x284>
				for (j = 0 ;j < k; j++)
    f58c:	4654      	mov	r4, sl
					b[i][j] = 0;
    f58e:	6048      	str	r0, [r1, #4]
				for (j = 0 ;j < k; j++)
    f590:	2c02      	cmp	r4, #2
    f592:	d100      	bne.n	f596 <determinant+0x5be>
    f594:	e6ac      	b.n	f2f0 <determinant+0x318>
    f596:	4654      	mov	r4, sl
					b[i][j] = 0;
    f598:	6088      	str	r0, [r1, #8]
				for (j = 0 ;j < k; j++)
    f59a:	2c03      	cmp	r4, #3
    f59c:	d100      	bne.n	f5a0 <determinant+0x5c8>
    f59e:	e6a7      	b.n	f2f0 <determinant+0x318>
    f5a0:	4654      	mov	r4, sl
					b[i][j] = 0;
    f5a2:	60c8      	str	r0, [r1, #12]
				for (j = 0 ;j < k; j++)
    f5a4:	2c04      	cmp	r4, #4
    f5a6:	d100      	bne.n	f5aa <determinant+0x5d2>
    f5a8:	e6a2      	b.n	f2f0 <determinant+0x318>
    f5aa:	4654      	mov	r4, sl
					b[i][j] = 0;
    f5ac:	6108      	str	r0, [r1, #16]
				for (j = 0 ;j < k; j++)
    f5ae:	2c05      	cmp	r4, #5
    f5b0:	d100      	bne.n	f5b4 <determinant+0x5dc>
    f5b2:	e69d      	b.n	f2f0 <determinant+0x318>
					b[i][j] = 0;
    f5b4:	6148      	str	r0, [r1, #20]
    f5b6:	e69b      	b.n	f2f0 <determinant+0x318>
						n++;
    f5b8:	3301      	adds	r3, #1
    f5ba:	b2db      	uxtb	r3, r3
    f5bc:	e695      	b.n	f2ea <determinant+0x312>
    f5be:	3301      	adds	r3, #1
    f5c0:	b2db      	uxtb	r3, r3
    f5c2:	e67b      	b.n	f2bc <determinant+0x2e4>
    f5c4:	3301      	adds	r3, #1
    f5c6:	b2db      	uxtb	r3, r3
    f5c8:	e660      	b.n	f28c <determinant+0x2b4>
				for (j = 0 ;j < k; j++)
    f5ca:	4654      	mov	r4, sl
    f5cc:	2c04      	cmp	r4, #4
    f5ce:	d100      	bne.n	f5d2 <determinant+0x5fa>
    f5d0:	e68b      	b.n	f2ea <determinant+0x312>
					b[i][j] = 0;
    f5d2:	6108      	str	r0, [r1, #16]
    f5d4:	e662      	b.n	f29c <determinant+0x2c4>
		return (a[0][0]);
    f5d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
    f5d8:	930f      	str	r3, [sp, #60]	; 0x3c
    f5da:	1c19      	adds	r1, r3, #0
			det = det + s * (a[0][c] * determinant(b, k - 1));
    f5dc:	4bcb      	ldr	r3, [pc, #812]	; (f90c <determinant+0x934>)
    f5de:	981d      	ldr	r0, [sp, #116]	; 0x74
    f5e0:	4798      	blx	r3
    f5e2:	9c18      	ldr	r4, [sp, #96]	; 0x60
    f5e4:	4bc9      	ldr	r3, [pc, #804]	; (f90c <determinant+0x934>)
    f5e6:	1c21      	adds	r1, r4, #0
    f5e8:	4798      	blx	r3
    f5ea:	4bc9      	ldr	r3, [pc, #804]	; (f910 <determinant+0x938>)
    f5ec:	1c01      	adds	r1, r0, #0
    f5ee:	980d      	ldr	r0, [sp, #52]	; 0x34
    f5f0:	4798      	blx	r3
			s = -1 * s;
    f5f2:	2280      	movs	r2, #128	; 0x80
    f5f4:	0612      	lsls	r2, r2, #24
    f5f6:	4694      	mov	ip, r2
    f5f8:	0023      	movs	r3, r4
    f5fa:	4463      	add	r3, ip
    f5fc:	9318      	str	r3, [sp, #96]	; 0x60
    f5fe:	9b06      	ldr	r3, [sp, #24]
		for (c = 0; c < k; c++)
    f600:	9a21      	ldr	r2, [sp, #132]	; 0x84
    f602:	3301      	adds	r3, #1
			det = det + s * (a[0][c] * determinant(b, k - 1));
    f604:	900d      	str	r0, [sp, #52]	; 0x34
    f606:	9306      	str	r3, [sp, #24]
		for (c = 0; c < k; c++)
    f608:	429a      	cmp	r2, r3
    f60a:	d000      	beq.n	f60e <determinant+0x636>
    f60c:	e515      	b.n	f03a <determinant+0x62>
    f60e:	e6d0      	b.n	f3b2 <determinant+0x3da>
				for (j = 0 ;j < k; j++)
    f610:	4654      	mov	r4, sl
    f612:	2c05      	cmp	r4, #5
    f614:	d100      	bne.n	f618 <determinant+0x640>
    f616:	e668      	b.n	f2ea <determinant+0x312>
					b[i][j] = 0;
    f618:	6148      	str	r0, [r1, #20]
    f61a:	e656      	b.n	f2ca <determinant+0x2f2>
						n++;
    f61c:	3301      	adds	r3, #1
    f61e:	b2db      	uxtb	r3, r3
    f620:	e737      	b.n	f492 <determinant+0x4ba>
    f622:	3301      	adds	r3, #1
    f624:	b2db      	uxtb	r3, r3
				for (j = 0 ;j < k; j++)
    f626:	2c02      	cmp	r4, #2
    f628:	d000      	beq.n	f62c <determinant+0x654>
    f62a:	e71a      	b.n	f462 <determinant+0x48a>
			det = det + s * (a[0][c] * determinant(b, k - 1));
    f62c:	2190      	movs	r1, #144	; 0x90
    f62e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f630:	aa24      	add	r2, sp, #144	; 0x90
    f632:	009b      	lsls	r3, r3, #2
    f634:	1852      	adds	r2, r2, r1
    f636:	58d3      	ldr	r3, [r2, r3]
    f638:	4655      	mov	r5, sl
    f63a:	931f      	str	r3, [sp, #124]	; 0x7c
	if (k == 1)
    f63c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    f63e:	2b01      	cmp	r3, #1
    f640:	d101      	bne.n	f646 <determinant+0x66e>
    f642:	f000 fd2a 	bl	1009a <determinant+0x10c2>
    f646:	2300      	movs	r3, #0
    f648:	9313      	str	r3, [sp, #76]	; 0x4c
    f64a:	2300      	movs	r3, #0
    f64c:	9311      	str	r3, [sp, #68]	; 0x44
    f64e:	23fe      	movs	r3, #254	; 0xfe
    f650:	059b      	lsls	r3, r3, #22
    f652:	931b      	str	r3, [sp, #108]	; 0x6c
    f654:	2300      	movs	r3, #0
    f656:	46aa      	mov	sl, r5
    f658:	469b      	mov	fp, r3
    f65a:	22ff      	movs	r2, #255	; 0xff
    f65c:	4694      	mov	ip, r2
    f65e:	9a15      	ldr	r2, [sp, #84]	; 0x54
							n = 0;
    f660:	2301      	movs	r3, #1
    f662:	1e96      	subs	r6, r2, #2
    f664:	9200      	str	r2, [sp, #0]
    f666:	4652      	mov	r2, sl
    f668:	9204      	str	r2, [sp, #16]
    f66a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    f66c:	4699      	mov	r9, r3
    f66e:	4692      	mov	sl, r2
    f670:	465a      	mov	r2, fp
    f672:	2000      	movs	r0, #0
    f674:	2300      	movs	r3, #0
    f676:	2100      	movs	r1, #0
					b[i][j] = 0;
    f678:	2500      	movs	r5, #0
    f67a:	9203      	str	r2, [sp, #12]
    f67c:	46b0      	mov	r8, r6
    f67e:	e0c9      	b.n	f814 <determinant+0x83c>
							n = 0;
    f680:	2300      	movs	r3, #0
							m++;
    f682:	3101      	adds	r1, #1
    f684:	b2c9      	uxtb	r1, r1
					b[i][j] = 0;
    f686:	9c01      	ldr	r4, [sp, #4]
    f688:	1826      	adds	r6, r4, r0
    f68a:	ac90      	add	r4, sp, #576	; 0x240
    f68c:	46a3      	mov	fp, r4
    f68e:	00f6      	lsls	r6, r6, #3
					if (i != 0 && j != c)
    f690:	9c03      	ldr	r4, [sp, #12]
					b[i][j] = 0;
    f692:	445e      	add	r6, fp
    f694:	6075      	str	r5, [r6, #4]
					if (i != 0 && j != c)
    f696:	4693      	mov	fp, r2
    f698:	2c01      	cmp	r4, #1
    f69a:	d101      	bne.n	f6a0 <determinant+0x6c8>
    f69c:	f000 fcc3 	bl	10026 <determinant+0x104e>
						b[m][n] = a[i][j];
    f6a0:	465c      	mov	r4, fp
    f6a2:	26d8      	movs	r6, #216	; 0xd8
    f6a4:	6864      	ldr	r4, [r4, #4]
    f6a6:	004a      	lsls	r2, r1, #1
    f6a8:	1852      	adds	r2, r2, r1
    f6aa:	9402      	str	r4, [sp, #8]
    f6ac:	0076      	lsls	r6, r6, #1
    f6ae:	0052      	lsls	r2, r2, #1
    f6b0:	ac24      	add	r4, sp, #144	; 0x90
    f6b2:	19a4      	adds	r4, r4, r6
    f6b4:	18d2      	adds	r2, r2, r3
    f6b6:	9e02      	ldr	r6, [sp, #8]
    f6b8:	0092      	lsls	r2, r2, #2
    f6ba:	50a6      	str	r6, [r4, r2]
						if (n < (k - 2))
    f6bc:	4543      	cmp	r3, r8
    f6be:	da00      	bge.n	f6c2 <determinant+0x6ea>
    f6c0:	e0f2      	b.n	f8a8 <determinant+0x8d0>
							n = 0;
    f6c2:	2300      	movs	r3, #0
							m++;
    f6c4:	3101      	adds	r1, #1
    f6c6:	b2c9      	uxtb	r1, r1
				for (j = 0 ;j < k; j++)
    f6c8:	9a00      	ldr	r2, [sp, #0]
    f6ca:	2a02      	cmp	r2, #2
    f6cc:	d100      	bne.n	f6d0 <determinant+0x6f8>
    f6ce:	e099      	b.n	f804 <determinant+0x82c>
					b[i][j] = 0;
    f6d0:	ac90      	add	r4, sp, #576	; 0x240
    f6d2:	46a3      	mov	fp, r4
					if (i != 0 && j != c)
    f6d4:	4654      	mov	r4, sl
					b[i][j] = 0;
    f6d6:	9a01      	ldr	r2, [sp, #4]
    f6d8:	1812      	adds	r2, r2, r0
    f6da:	00d2      	lsls	r2, r2, #3
    f6dc:	445a      	add	r2, fp
    f6de:	6095      	str	r5, [r2, #8]
					if (i != 0 && j != c)
    f6e0:	2c02      	cmp	r4, #2
    f6e2:	d101      	bne.n	f6e8 <determinant+0x710>
    f6e4:	f000 fcc3 	bl	1006e <determinant+0x1096>
    f6e8:	4666      	mov	r6, ip
    f6ea:	ac6c      	add	r4, sp, #432	; 0x1b0
    f6ec:	46a3      	mov	fp, r4
    f6ee:	4006      	ands	r6, r0
    f6f0:	0072      	lsls	r2, r6, #1
    f6f2:	1992      	adds	r2, r2, r6
    f6f4:	00d2      	lsls	r2, r2, #3
    f6f6:	445a      	add	r2, fp
						b[m][n] = a[i][j];
    f6f8:	24d8      	movs	r4, #216	; 0xd8
    f6fa:	6892      	ldr	r2, [r2, #8]
    f6fc:	004e      	lsls	r6, r1, #1
    f6fe:	1876      	adds	r6, r6, r1
    f700:	9202      	str	r2, [sp, #8]
    f702:	0064      	lsls	r4, r4, #1
    f704:	0076      	lsls	r6, r6, #1
    f706:	aa24      	add	r2, sp, #144	; 0x90
    f708:	1912      	adds	r2, r2, r4
    f70a:	18f6      	adds	r6, r6, r3
    f70c:	9c02      	ldr	r4, [sp, #8]
    f70e:	00b6      	lsls	r6, r6, #2
    f710:	5194      	str	r4, [r2, r6]
						if (n < (k - 2))
    f712:	4543      	cmp	r3, r8
    f714:	da00      	bge.n	f718 <determinant+0x740>
    f716:	e1f7      	b.n	fb08 <determinant+0xb30>
							n = 0;
    f718:	2300      	movs	r3, #0
							m++;
    f71a:	3101      	adds	r1, #1
    f71c:	b2c9      	uxtb	r1, r1
				for (j = 0 ;j < k; j++)
    f71e:	9a00      	ldr	r2, [sp, #0]
    f720:	2a03      	cmp	r2, #3
    f722:	d06f      	beq.n	f804 <determinant+0x82c>
					b[i][j] = 0;
    f724:	ac90      	add	r4, sp, #576	; 0x240
    f726:	46a3      	mov	fp, r4
					if (i != 0 && j != c)
    f728:	4654      	mov	r4, sl
					b[i][j] = 0;
    f72a:	9a01      	ldr	r2, [sp, #4]
    f72c:	1812      	adds	r2, r2, r0
    f72e:	00d2      	lsls	r2, r2, #3
    f730:	445a      	add	r2, fp
    f732:	60d5      	str	r5, [r2, #12]
					if (i != 0 && j != c)
    f734:	2c03      	cmp	r4, #3
    f736:	d101      	bne.n	f73c <determinant+0x764>
    f738:	f000 fc89 	bl	1004e <determinant+0x1076>
						b[m][n] = a[i][j];
    f73c:	4666      	mov	r6, ip
    f73e:	ac6c      	add	r4, sp, #432	; 0x1b0
    f740:	46a3      	mov	fp, r4
    f742:	27d8      	movs	r7, #216	; 0xd8
    f744:	4006      	ands	r6, r0
    f746:	0072      	lsls	r2, r6, #1
    f748:	1992      	adds	r2, r2, r6
    f74a:	004e      	lsls	r6, r1, #1
    f74c:	00d2      	lsls	r2, r2, #3
    f74e:	1876      	adds	r6, r6, r1
    f750:	007f      	lsls	r7, r7, #1
    f752:	445a      	add	r2, fp
    f754:	0076      	lsls	r6, r6, #1
    f756:	ac24      	add	r4, sp, #144	; 0x90
    f758:	19e4      	adds	r4, r4, r7
    f75a:	18f6      	adds	r6, r6, r3
    f75c:	68d7      	ldr	r7, [r2, #12]
    f75e:	00b6      	lsls	r6, r6, #2
    f760:	51a7      	str	r7, [r4, r6]
						if (n < (k - 2))
    f762:	4543      	cmp	r3, r8
    f764:	da00      	bge.n	f768 <determinant+0x790>
    f766:	e1cc      	b.n	fb02 <determinant+0xb2a>
							n = 0;
    f768:	2300      	movs	r3, #0
							m++;
    f76a:	3101      	adds	r1, #1
    f76c:	b2c9      	uxtb	r1, r1
				for (j = 0 ;j < k; j++)
    f76e:	9c00      	ldr	r4, [sp, #0]
    f770:	2c04      	cmp	r4, #4
    f772:	d047      	beq.n	f804 <determinant+0x82c>
					b[i][j] = 0;
    f774:	9c01      	ldr	r4, [sp, #4]
    f776:	1826      	adds	r6, r4, r0
    f778:	ac90      	add	r4, sp, #576	; 0x240
    f77a:	46a3      	mov	fp, r4
					if (i != 0 && j != c)
    f77c:	4654      	mov	r4, sl
					b[i][j] = 0;
    f77e:	00f6      	lsls	r6, r6, #3
    f780:	445e      	add	r6, fp
    f782:	6135      	str	r5, [r6, #16]
					if (i != 0 && j != c)
    f784:	4693      	mov	fp, r2
    f786:	2c04      	cmp	r4, #4
    f788:	d101      	bne.n	f78e <determinant+0x7b6>
    f78a:	f000 fc58 	bl	1003e <determinant+0x1066>
						b[m][n] = a[i][j];
    f78e:	465c      	mov	r4, fp
    f790:	26d8      	movs	r6, #216	; 0xd8
    f792:	6924      	ldr	r4, [r4, #16]
    f794:	004a      	lsls	r2, r1, #1
    f796:	1852      	adds	r2, r2, r1
    f798:	9402      	str	r4, [sp, #8]
    f79a:	0076      	lsls	r6, r6, #1
    f79c:	0052      	lsls	r2, r2, #1
    f79e:	ac24      	add	r4, sp, #144	; 0x90
    f7a0:	19a4      	adds	r4, r4, r6
    f7a2:	18d2      	adds	r2, r2, r3
    f7a4:	9e02      	ldr	r6, [sp, #8]
    f7a6:	0092      	lsls	r2, r2, #2
    f7a8:	50a6      	str	r6, [r4, r2]
						if (n < (k - 2))
    f7aa:	4543      	cmp	r3, r8
    f7ac:	da00      	bge.n	f7b0 <determinant+0x7d8>
    f7ae:	e1a5      	b.n	fafc <determinant+0xb24>
							n = 0;
    f7b0:	2300      	movs	r3, #0
							m++;
    f7b2:	3101      	adds	r1, #1
    f7b4:	b2c9      	uxtb	r1, r1
				for (j = 0 ;j < k; j++)
    f7b6:	9a00      	ldr	r2, [sp, #0]
    f7b8:	2a05      	cmp	r2, #5
    f7ba:	d023      	beq.n	f804 <determinant+0x82c>
					b[i][j] = 0;
    f7bc:	9a01      	ldr	r2, [sp, #4]
    f7be:	1814      	adds	r4, r2, r0
    f7c0:	aa90      	add	r2, sp, #576	; 0x240
    f7c2:	4693      	mov	fp, r2
					if (i != 0 && j != c)
    f7c4:	4652      	mov	r2, sl
					b[i][j] = 0;
    f7c6:	00e4      	lsls	r4, r4, #3
    f7c8:	445c      	add	r4, fp
    f7ca:	6165      	str	r5, [r4, #20]
					if (i != 0 && j != c)
    f7cc:	2a05      	cmp	r2, #5
    f7ce:	d019      	beq.n	f804 <determinant+0x82c>
    f7d0:	4664      	mov	r4, ip
    f7d2:	4004      	ands	r4, r0
    f7d4:	0062      	lsls	r2, r4, #1
    f7d6:	1912      	adds	r2, r2, r4
    f7d8:	ac6c      	add	r4, sp, #432	; 0x1b0
    f7da:	46a3      	mov	fp, r4
    f7dc:	00d2      	lsls	r2, r2, #3
    f7de:	445a      	add	r2, fp
						b[m][n] = a[i][j];
    f7e0:	26d8      	movs	r6, #216	; 0xd8
    f7e2:	6952      	ldr	r2, [r2, #20]
    f7e4:	004c      	lsls	r4, r1, #1
    f7e6:	1864      	adds	r4, r4, r1
    f7e8:	9201      	str	r2, [sp, #4]
    f7ea:	0076      	lsls	r6, r6, #1
    f7ec:	0064      	lsls	r4, r4, #1
    f7ee:	aa24      	add	r2, sp, #144	; 0x90
    f7f0:	1992      	adds	r2, r2, r6
    f7f2:	18e4      	adds	r4, r4, r3
    f7f4:	9e01      	ldr	r6, [sp, #4]
    f7f6:	00a4      	lsls	r4, r4, #2
    f7f8:	5116      	str	r6, [r2, r4]
						if (n < (k - 2))
    f7fa:	4543      	cmp	r3, r8
    f7fc:	db57      	blt.n	f8ae <determinant+0x8d6>
							n = 0;
    f7fe:	2300      	movs	r3, #0
							m++;
    f800:	3101      	adds	r1, #1
    f802:	b2c9      	uxtb	r1, r1
			for (i = 0;i < k; i++)
    f804:	9a00      	ldr	r2, [sp, #0]
    f806:	454a      	cmp	r2, r9
    f808:	d956      	bls.n	f8b8 <determinant+0x8e0>
    f80a:	464a      	mov	r2, r9
    f80c:	3201      	adds	r2, #1
    f80e:	b2d2      	uxtb	r2, r2
    f810:	4691      	mov	r9, r2
    f812:	3001      	adds	r0, #1
					b[i][j] = 0;
    f814:	27d8      	movs	r7, #216	; 0xd8
    f816:	0042      	lsls	r2, r0, #1
    f818:	9201      	str	r2, [sp, #4]
    f81a:	ae24      	add	r6, sp, #144	; 0x90
    f81c:	1812      	adds	r2, r2, r0
    f81e:	007f      	lsls	r7, r7, #1
    f820:	00d2      	lsls	r2, r2, #3
    f822:	19f6      	adds	r6, r6, r7
    f824:	50b5      	str	r5, [r6, r2]
					if (i != 0 && j != c)
    f826:	2800      	cmp	r0, #0
    f828:	d100      	bne.n	f82c <determinant+0x854>
    f82a:	e170      	b.n	fb0e <determinant+0xb36>
    f82c:	4656      	mov	r6, sl
    f82e:	2e00      	cmp	r6, #0
    f830:	d101      	bne.n	f836 <determinant+0x85e>
    f832:	f000 fc24 	bl	1007e <determinant+0x10a6>
						b[m][n] = a[i][j];
    f836:	4666      	mov	r6, ip
    f838:	4006      	ands	r6, r0
    f83a:	0072      	lsls	r2, r6, #1
    f83c:	1992      	adds	r2, r2, r6
    f83e:	ae6c      	add	r6, sp, #432	; 0x1b0
    f840:	46b3      	mov	fp, r6
    f842:	24d8      	movs	r4, #216	; 0xd8
    f844:	004e      	lsls	r6, r1, #1
    f846:	00d2      	lsls	r2, r2, #3
    f848:	1876      	adds	r6, r6, r1
    f84a:	0064      	lsls	r4, r4, #1
    f84c:	445a      	add	r2, fp
    f84e:	0076      	lsls	r6, r6, #1
    f850:	af24      	add	r7, sp, #144	; 0x90
    f852:	193f      	adds	r7, r7, r4
    f854:	18f6      	adds	r6, r6, r3
    f856:	6814      	ldr	r4, [r2, #0]
    f858:	00b6      	lsls	r6, r6, #2
    f85a:	51bc      	str	r4, [r7, r6]
						if (n < (k - 2))
    f85c:	4543      	cmp	r3, r8
    f85e:	db00      	blt.n	f862 <determinant+0x88a>
    f860:	e70e      	b.n	f680 <determinant+0x6a8>
						n++;
    f862:	3301      	adds	r3, #1
    f864:	b2db      	uxtb	r3, r3
    f866:	e70e      	b.n	f686 <determinant+0x6ae>
    f868:	3301      	adds	r3, #1
    f86a:	b2db      	uxtb	r3, r3
    f86c:	e65d      	b.n	f52a <determinant+0x552>
    f86e:	3301      	adds	r3, #1
    f870:	b2db      	uxtb	r3, r3
    f872:	e642      	b.n	f4fa <determinant+0x522>
    f874:	3301      	adds	r3, #1
    f876:	b2db      	uxtb	r3, r3
    f878:	e625      	b.n	f4c6 <determinant+0x4ee>
					b[i][j] = 0;
    f87a:	4648      	mov	r0, r9
    f87c:	6048      	str	r0, [r1, #4]
				for (j = 0 ;j < k; j++)
    f87e:	2c02      	cmp	r4, #2
    f880:	d100      	bne.n	f884 <determinant+0x8ac>
    f882:	e654      	b.n	f52e <determinant+0x556>
					b[i][j] = 0;
    f884:	4648      	mov	r0, r9
    f886:	6088      	str	r0, [r1, #8]
				for (j = 0 ;j < k; j++)
    f888:	2c03      	cmp	r4, #3
    f88a:	d100      	bne.n	f88e <determinant+0x8b6>
    f88c:	e64d      	b.n	f52a <determinant+0x552>
					b[i][j] = 0;
    f88e:	4648      	mov	r0, r9
    f890:	60c8      	str	r0, [r1, #12]
				for (j = 0 ;j < k; j++)
    f892:	2c04      	cmp	r4, #4
    f894:	d100      	bne.n	f898 <determinant+0x8c0>
    f896:	e648      	b.n	f52a <determinant+0x552>
					b[i][j] = 0;
    f898:	4648      	mov	r0, r9
    f89a:	6108      	str	r0, [r1, #16]
				for (j = 0 ;j < k; j++)
    f89c:	2c05      	cmp	r4, #5
    f89e:	d100      	bne.n	f8a2 <determinant+0x8ca>
    f8a0:	e643      	b.n	f52a <determinant+0x552>
					b[i][j] = 0;
    f8a2:	4648      	mov	r0, r9
    f8a4:	6148      	str	r0, [r1, #20]
    f8a6:	e642      	b.n	f52e <determinant+0x556>
						n++;
    f8a8:	3301      	adds	r3, #1
    f8aa:	b2db      	uxtb	r3, r3
    f8ac:	e70c      	b.n	f6c8 <determinant+0x6f0>
			for (i = 0;i < k; i++)
    f8ae:	9a00      	ldr	r2, [sp, #0]
						n++;
    f8b0:	3301      	adds	r3, #1
    f8b2:	b2db      	uxtb	r3, r3
			for (i = 0;i < k; i++)
    f8b4:	454a      	cmp	r2, r9
    f8b6:	d8a8      	bhi.n	f80a <determinant+0x832>
			det = det + s * (a[0][c] * determinant(b, k - 1));
    f8b8:	2190      	movs	r1, #144	; 0x90
    f8ba:	9b04      	ldr	r3, [sp, #16]
    f8bc:	aa24      	add	r2, sp, #144	; 0x90
    f8be:	469a      	mov	sl, r3
    f8c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f8c2:	0049      	lsls	r1, r1, #1
    f8c4:	009b      	lsls	r3, r3, #2
    f8c6:	1852      	adds	r2, r2, r1
    f8c8:	58d3      	ldr	r3, [r2, r3]
    f8ca:	9320      	str	r3, [sp, #128]	; 0x80
	if (k == 1)
    f8cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f8ce:	2b01      	cmp	r3, #1
    f8d0:	d100      	bne.n	f8d4 <determinant+0x8fc>
    f8d2:	e323      	b.n	ff1c <determinant+0xf44>
    f8d4:	2300      	movs	r3, #0
    f8d6:	9307      	str	r3, [sp, #28]
    f8d8:	2300      	movs	r3, #0
    f8da:	930a      	str	r3, [sp, #40]	; 0x28
    f8dc:	23fe      	movs	r3, #254	; 0xfe
    f8de:	059b      	lsls	r3, r3, #22
    f8e0:	9312      	str	r3, [sp, #72]	; 0x48
    f8e2:	2300      	movs	r3, #0
    f8e4:	469b      	mov	fp, r3
    f8e6:	21ff      	movs	r1, #255	; 0xff
    f8e8:	4688      	mov	r8, r1
    f8ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
							n = 0;
    f8ec:	2301      	movs	r3, #1
    f8ee:	1e8e      	subs	r6, r1, #2
    f8f0:	4689      	mov	r9, r1
    f8f2:	4651      	mov	r1, sl
    f8f4:	9103      	str	r1, [sp, #12]
    f8f6:	9907      	ldr	r1, [sp, #28]
    f8f8:	469c      	mov	ip, r3
    f8fa:	468a      	mov	sl, r1
    f8fc:	4659      	mov	r1, fp
    f8fe:	2000      	movs	r0, #0
    f900:	2300      	movs	r3, #0
    f902:	2200      	movs	r2, #0
    f904:	9102      	str	r1, [sp, #8]
    f906:	9600      	str	r6, [sp, #0]
    f908:	e0ce      	b.n	faa8 <determinant+0xad0>
    f90a:	46c0      	nop			; (mov r8, r8)
    f90c:	0001cba9 	.word	0x0001cba9
    f910:	0001c4a5 	.word	0x0001c4a5
    f914:	2300      	movs	r3, #0
							m++;
    f916:	3201      	adds	r2, #1
    f918:	b2d2      	uxtb	r2, r2
					b[i][j] = 0;
    f91a:	adb4      	add	r5, sp, #720	; 0x2d0
    f91c:	46ab      	mov	fp, r5
    f91e:	2500      	movs	r5, #0
    f920:	1827      	adds	r7, r4, r0
    f922:	00ff      	lsls	r7, r7, #3
    f924:	445f      	add	r7, fp
    f926:	607d      	str	r5, [r7, #4]
					if (i != 0 && j != c)
    f928:	9d02      	ldr	r5, [sp, #8]
    f92a:	468b      	mov	fp, r1
    f92c:	2d01      	cmp	r5, #1
    f92e:	d100      	bne.n	f932 <determinant+0x95a>
    f930:	e344      	b.n	ffbc <determinant+0xfe4>
						b[m][n] = a[i][j];
    f932:	465d      	mov	r5, fp
    f934:	2690      	movs	r6, #144	; 0x90
    f936:	686d      	ldr	r5, [r5, #4]
    f938:	0051      	lsls	r1, r2, #1
    f93a:	1889      	adds	r1, r1, r2
    f93c:	9501      	str	r5, [sp, #4]
    f93e:	00b6      	lsls	r6, r6, #2
    f940:	0049      	lsls	r1, r1, #1
    f942:	ad24      	add	r5, sp, #144	; 0x90
    f944:	19ad      	adds	r5, r5, r6
    f946:	18c9      	adds	r1, r1, r3
    f948:	9e01      	ldr	r6, [sp, #4]
    f94a:	0089      	lsls	r1, r1, #2
    f94c:	506e      	str	r6, [r5, r1]
						if (n < (k - 2))
    f94e:	9900      	ldr	r1, [sp, #0]
    f950:	428b      	cmp	r3, r1
    f952:	da00      	bge.n	f956 <determinant+0x97e>
    f954:	e0ee      	b.n	fb34 <determinant+0xb5c>
							n = 0;
    f956:	2300      	movs	r3, #0
							m++;
    f958:	3201      	adds	r2, #1
    f95a:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
    f95c:	4649      	mov	r1, r9
    f95e:	2902      	cmp	r1, #2
    f960:	d100      	bne.n	f964 <determinant+0x98c>
    f962:	e09a      	b.n	fa9a <determinant+0xac2>
					b[i][j] = 0;
    f964:	adb4      	add	r5, sp, #720	; 0x2d0
    f966:	46ab      	mov	fp, r5
    f968:	2500      	movs	r5, #0
    f96a:	1821      	adds	r1, r4, r0
    f96c:	00c9      	lsls	r1, r1, #3
    f96e:	4459      	add	r1, fp
    f970:	608d      	str	r5, [r1, #8]
					if (i != 0 && j != c)
    f972:	4655      	mov	r5, sl
    f974:	2d02      	cmp	r5, #2
    f976:	d100      	bne.n	f97a <determinant+0x9a2>
    f978:	e2e3      	b.n	ff42 <determinant+0xf6a>
    f97a:	4647      	mov	r7, r8
    f97c:	ad90      	add	r5, sp, #576	; 0x240
    f97e:	46ab      	mov	fp, r5
    f980:	4007      	ands	r7, r0
    f982:	0079      	lsls	r1, r7, #1
    f984:	19c9      	adds	r1, r1, r7
    f986:	00c9      	lsls	r1, r1, #3
    f988:	4459      	add	r1, fp
						b[m][n] = a[i][j];
    f98a:	2590      	movs	r5, #144	; 0x90
    f98c:	6889      	ldr	r1, [r1, #8]
    f98e:	0057      	lsls	r7, r2, #1
    f990:	18bf      	adds	r7, r7, r2
    f992:	9101      	str	r1, [sp, #4]
    f994:	00ad      	lsls	r5, r5, #2
    f996:	007f      	lsls	r7, r7, #1
    f998:	a924      	add	r1, sp, #144	; 0x90
    f99a:	1949      	adds	r1, r1, r5
    f99c:	18ff      	adds	r7, r7, r3
    f99e:	9d01      	ldr	r5, [sp, #4]
    f9a0:	00bf      	lsls	r7, r7, #2
    f9a2:	51cd      	str	r5, [r1, r7]
						if (n < (k - 2))
    f9a4:	9900      	ldr	r1, [sp, #0]
    f9a6:	428b      	cmp	r3, r1
    f9a8:	da00      	bge.n	f9ac <determinant+0x9d4>
    f9aa:	e1cd      	b.n	fd48 <determinant+0xd70>
							n = 0;
    f9ac:	2300      	movs	r3, #0
							m++;
    f9ae:	3201      	adds	r2, #1
    f9b0:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
    f9b2:	4649      	mov	r1, r9
    f9b4:	2903      	cmp	r1, #3
    f9b6:	d070      	beq.n	fa9a <determinant+0xac2>
					b[i][j] = 0;
    f9b8:	adb4      	add	r5, sp, #720	; 0x2d0
    f9ba:	46ab      	mov	fp, r5
    f9bc:	2500      	movs	r5, #0
    f9be:	1821      	adds	r1, r4, r0
    f9c0:	00c9      	lsls	r1, r1, #3
    f9c2:	4459      	add	r1, fp
    f9c4:	60cd      	str	r5, [r1, #12]
					if (i != 0 && j != c)
    f9c6:	4655      	mov	r5, sl
    f9c8:	2d03      	cmp	r5, #3
    f9ca:	d100      	bne.n	f9ce <determinant+0x9f6>
    f9cc:	e2aa      	b.n	ff24 <determinant+0xf4c>
						b[m][n] = a[i][j];
    f9ce:	4647      	mov	r7, r8
    f9d0:	ad90      	add	r5, sp, #576	; 0x240
    f9d2:	46ab      	mov	fp, r5
    f9d4:	2690      	movs	r6, #144	; 0x90
    f9d6:	4007      	ands	r7, r0
    f9d8:	0079      	lsls	r1, r7, #1
    f9da:	19c9      	adds	r1, r1, r7
    f9dc:	0057      	lsls	r7, r2, #1
    f9de:	00c9      	lsls	r1, r1, #3
    f9e0:	18bf      	adds	r7, r7, r2
    f9e2:	00b6      	lsls	r6, r6, #2
    f9e4:	4459      	add	r1, fp
    f9e6:	007f      	lsls	r7, r7, #1
    f9e8:	ad24      	add	r5, sp, #144	; 0x90
    f9ea:	19ad      	adds	r5, r5, r6
    f9ec:	18ff      	adds	r7, r7, r3
    f9ee:	68ce      	ldr	r6, [r1, #12]
    f9f0:	00bf      	lsls	r7, r7, #2
    f9f2:	51ee      	str	r6, [r5, r7]
						if (n < (k - 2))
    f9f4:	9d00      	ldr	r5, [sp, #0]
    f9f6:	42ab      	cmp	r3, r5
    f9f8:	da00      	bge.n	f9fc <determinant+0xa24>
    f9fa:	e1a2      	b.n	fd42 <determinant+0xd6a>
							n = 0;
    f9fc:	2300      	movs	r3, #0
							m++;
    f9fe:	3201      	adds	r2, #1
    fa00:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
    fa02:	464d      	mov	r5, r9
    fa04:	2d04      	cmp	r5, #4
    fa06:	d048      	beq.n	fa9a <determinant+0xac2>
					b[i][j] = 0;
    fa08:	adb4      	add	r5, sp, #720	; 0x2d0
    fa0a:	46ab      	mov	fp, r5
    fa0c:	2500      	movs	r5, #0
    fa0e:	1827      	adds	r7, r4, r0
    fa10:	00ff      	lsls	r7, r7, #3
    fa12:	445f      	add	r7, fp
    fa14:	613d      	str	r5, [r7, #16]
					if (i != 0 && j != c)
    fa16:	4655      	mov	r5, sl
    fa18:	468b      	mov	fp, r1
    fa1a:	2d04      	cmp	r5, #4
    fa1c:	d100      	bne.n	fa20 <determinant+0xa48>
    fa1e:	e2d4      	b.n	ffca <determinant+0xff2>
						b[m][n] = a[i][j];
    fa20:	465d      	mov	r5, fp
    fa22:	2690      	movs	r6, #144	; 0x90
    fa24:	692d      	ldr	r5, [r5, #16]
    fa26:	0051      	lsls	r1, r2, #1
    fa28:	1889      	adds	r1, r1, r2
    fa2a:	9501      	str	r5, [sp, #4]
    fa2c:	00b6      	lsls	r6, r6, #2
    fa2e:	0049      	lsls	r1, r1, #1
    fa30:	ad24      	add	r5, sp, #144	; 0x90
    fa32:	19ad      	adds	r5, r5, r6
    fa34:	18c9      	adds	r1, r1, r3
    fa36:	9e01      	ldr	r6, [sp, #4]
    fa38:	0089      	lsls	r1, r1, #2
    fa3a:	506e      	str	r6, [r5, r1]
						if (n < (k - 2))
    fa3c:	9900      	ldr	r1, [sp, #0]
    fa3e:	428b      	cmp	r3, r1
    fa40:	da00      	bge.n	fa44 <determinant+0xa6c>
    fa42:	e17b      	b.n	fd3c <determinant+0xd64>
							n = 0;
    fa44:	2300      	movs	r3, #0
							m++;
    fa46:	3201      	adds	r2, #1
    fa48:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
    fa4a:	4649      	mov	r1, r9
    fa4c:	2905      	cmp	r1, #5
    fa4e:	d024      	beq.n	fa9a <determinant+0xac2>
					b[i][j] = 0;
    fa50:	a9b4      	add	r1, sp, #720	; 0x2d0
    fa52:	468b      	mov	fp, r1
    fa54:	2100      	movs	r1, #0
    fa56:	1824      	adds	r4, r4, r0
    fa58:	00e4      	lsls	r4, r4, #3
    fa5a:	445c      	add	r4, fp
    fa5c:	6161      	str	r1, [r4, #20]
					if (i != 0 && j != c)
    fa5e:	4651      	mov	r1, sl
    fa60:	2905      	cmp	r1, #5
    fa62:	d01a      	beq.n	fa9a <determinant+0xac2>
    fa64:	4644      	mov	r4, r8
    fa66:	4004      	ands	r4, r0
    fa68:	0061      	lsls	r1, r4, #1
    fa6a:	1909      	adds	r1, r1, r4
    fa6c:	ac90      	add	r4, sp, #576	; 0x240
    fa6e:	46a3      	mov	fp, r4
    fa70:	00c9      	lsls	r1, r1, #3
    fa72:	4459      	add	r1, fp
						b[m][n] = a[i][j];
    fa74:	2590      	movs	r5, #144	; 0x90
    fa76:	6949      	ldr	r1, [r1, #20]
    fa78:	0054      	lsls	r4, r2, #1
    fa7a:	18a4      	adds	r4, r4, r2
    fa7c:	9101      	str	r1, [sp, #4]
    fa7e:	00ad      	lsls	r5, r5, #2
    fa80:	0064      	lsls	r4, r4, #1
    fa82:	a924      	add	r1, sp, #144	; 0x90
    fa84:	1949      	adds	r1, r1, r5
    fa86:	18e4      	adds	r4, r4, r3
    fa88:	9d01      	ldr	r5, [sp, #4]
    fa8a:	00a4      	lsls	r4, r4, #2
    fa8c:	510d      	str	r5, [r1, r4]
						if (n < (k - 2))
    fa8e:	9900      	ldr	r1, [sp, #0]
    fa90:	428b      	cmp	r3, r1
    fa92:	db52      	blt.n	fb3a <determinant+0xb62>
							n = 0;
    fa94:	2300      	movs	r3, #0
							m++;
    fa96:	3201      	adds	r2, #1
    fa98:	b2d2      	uxtb	r2, r2
			for (i = 0;i < k; i++)
    fa9a:	45e1      	cmp	r9, ip
    fa9c:	d951      	bls.n	fb42 <determinant+0xb6a>
    fa9e:	4661      	mov	r1, ip
    faa0:	3101      	adds	r1, #1
    faa2:	b2c9      	uxtb	r1, r1
    faa4:	468c      	mov	ip, r1
    faa6:	3001      	adds	r0, #1
					b[i][j] = 0;
    faa8:	2690      	movs	r6, #144	; 0x90
    faaa:	2500      	movs	r5, #0
    faac:	0044      	lsls	r4, r0, #1
    faae:	1821      	adds	r1, r4, r0
    fab0:	af24      	add	r7, sp, #144	; 0x90
    fab2:	00b6      	lsls	r6, r6, #2
    fab4:	00c9      	lsls	r1, r1, #3
    fab6:	19bf      	adds	r7, r7, r6
    fab8:	507d      	str	r5, [r7, r1]
					if (i != 0 && j != c)
    faba:	2800      	cmp	r0, #0
    fabc:	d100      	bne.n	fac0 <determinant+0xae8>
    fabe:	e146      	b.n	fd4e <determinant+0xd76>
    fac0:	4656      	mov	r6, sl
    fac2:	2e00      	cmp	r6, #0
    fac4:	d100      	bne.n	fac8 <determinant+0xaf0>
    fac6:	e243      	b.n	ff50 <determinant+0xf78>
						b[m][n] = a[i][j];
    fac8:	4647      	mov	r7, r8
    faca:	ae90      	add	r6, sp, #576	; 0x240
    facc:	46b3      	mov	fp, r6
    face:	2590      	movs	r5, #144	; 0x90
    fad0:	4007      	ands	r7, r0
    fad2:	0079      	lsls	r1, r7, #1
    fad4:	19c9      	adds	r1, r1, r7
    fad6:	0057      	lsls	r7, r2, #1
    fad8:	00c9      	lsls	r1, r1, #3
    fada:	18bf      	adds	r7, r7, r2
    fadc:	00ad      	lsls	r5, r5, #2
    fade:	4459      	add	r1, fp
    fae0:	007f      	lsls	r7, r7, #1
    fae2:	ae24      	add	r6, sp, #144	; 0x90
    fae4:	1976      	adds	r6, r6, r5
    fae6:	18ff      	adds	r7, r7, r3
    fae8:	680d      	ldr	r5, [r1, #0]
    faea:	00bf      	lsls	r7, r7, #2
    faec:	51f5      	str	r5, [r6, r7]
						if (n < (k - 2))
    faee:	9d00      	ldr	r5, [sp, #0]
    faf0:	42ab      	cmp	r3, r5
    faf2:	db00      	blt.n	faf6 <determinant+0xb1e>
    faf4:	e70e      	b.n	f914 <determinant+0x93c>
						n++;
    faf6:	3301      	adds	r3, #1
    faf8:	b2db      	uxtb	r3, r3
    fafa:	e70e      	b.n	f91a <determinant+0x942>
    fafc:	3301      	adds	r3, #1
    fafe:	b2db      	uxtb	r3, r3
    fb00:	e659      	b.n	f7b6 <determinant+0x7de>
    fb02:	3301      	adds	r3, #1
    fb04:	b2db      	uxtb	r3, r3
    fb06:	e632      	b.n	f76e <determinant+0x796>
    fb08:	3301      	adds	r3, #1
    fb0a:	b2db      	uxtb	r3, r3
    fb0c:	e607      	b.n	f71e <determinant+0x746>
				for (j = 0 ;j < k; j++)
    fb0e:	9a00      	ldr	r2, [sp, #0]
					b[i][j] = 0;
    fb10:	9591      	str	r5, [sp, #580]	; 0x244
				for (j = 0 ;j < k; j++)
    fb12:	2a02      	cmp	r2, #2
    fb14:	d100      	bne.n	fb18 <determinant+0xb40>
    fb16:	e675      	b.n	f804 <determinant+0x82c>
					b[i][j] = 0;
    fb18:	9592      	str	r5, [sp, #584]	; 0x248
				for (j = 0 ;j < k; j++)
    fb1a:	2a03      	cmp	r2, #3
    fb1c:	d100      	bne.n	fb20 <determinant+0xb48>
    fb1e:	e671      	b.n	f804 <determinant+0x82c>
					b[i][j] = 0;
    fb20:	9593      	str	r5, [sp, #588]	; 0x24c
				for (j = 0 ;j < k; j++)
    fb22:	2a04      	cmp	r2, #4
    fb24:	d100      	bne.n	fb28 <determinant+0xb50>
    fb26:	e66d      	b.n	f804 <determinant+0x82c>
					b[i][j] = 0;
    fb28:	9594      	str	r5, [sp, #592]	; 0x250
				for (j = 0 ;j < k; j++)
    fb2a:	2a05      	cmp	r2, #5
    fb2c:	d100      	bne.n	fb30 <determinant+0xb58>
    fb2e:	e669      	b.n	f804 <determinant+0x82c>
					b[i][j] = 0;
    fb30:	9595      	str	r5, [sp, #596]	; 0x254
    fb32:	e66a      	b.n	f80a <determinant+0x832>
						n++;
    fb34:	3301      	adds	r3, #1
    fb36:	b2db      	uxtb	r3, r3
    fb38:	e710      	b.n	f95c <determinant+0x984>
    fb3a:	3301      	adds	r3, #1
    fb3c:	b2db      	uxtb	r3, r3
			for (i = 0;i < k; i++)
    fb3e:	45e1      	cmp	r9, ip
    fb40:	d8ad      	bhi.n	fa9e <determinant+0xac6>
			det = det + s * (a[0][c] * determinant(b, k - 1));
    fb42:	21d8      	movs	r1, #216	; 0xd8
    fb44:	9b03      	ldr	r3, [sp, #12]
    fb46:	aa24      	add	r2, sp, #144	; 0x90
    fb48:	469a      	mov	sl, r3
    fb4a:	9b07      	ldr	r3, [sp, #28]
    fb4c:	0049      	lsls	r1, r1, #1
    fb4e:	009b      	lsls	r3, r3, #2
    fb50:	1852      	adds	r2, r2, r1
    fb52:	58d3      	ldr	r3, [r2, r3]
    fb54:	9316      	str	r3, [sp, #88]	; 0x58
	if (k == 1)
    fb56:	4653      	mov	r3, sl
    fb58:	2b01      	cmp	r3, #1
    fb5a:	d100      	bne.n	fb5e <determinant+0xb86>
    fb5c:	e1da      	b.n	ff14 <determinant+0xf3c>
    fb5e:	2300      	movs	r3, #0
    fb60:	9303      	str	r3, [sp, #12]
    fb62:	23fe      	movs	r3, #254	; 0xfe
    fb64:	059b      	lsls	r3, r3, #22
    fb66:	9304      	str	r3, [sp, #16]
    fb68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fb6a:	2600      	movs	r6, #0
    fb6c:	3b05      	subs	r3, #5
    fb6e:	9305      	str	r3, [sp, #20]
    fb70:	2300      	movs	r3, #0
    fb72:	4657      	mov	r7, sl
    fb74:	acd8      	add	r4, sp, #864	; 0x360
    fb76:	9302      	str	r3, [sp, #8]
					b[i][j] = 0;
    fb78:	2100      	movs	r1, #0
    fb7a:	4688      	mov	r8, r1
    fb7c:	21ff      	movs	r1, #255	; 0xff
							n = 0;
    fb7e:	2301      	movs	r3, #1
    fb80:	468a      	mov	sl, r1
    fb82:	1eb9      	subs	r1, r7, #2
    fb84:	9301      	str	r3, [sp, #4]
    fb86:	2000      	movs	r0, #0
    fb88:	2300      	movs	r3, #0
    fb8a:	2200      	movs	r2, #0
    fb8c:	46bc      	mov	ip, r7
    fb8e:	9100      	str	r1, [sp, #0]
    fb90:	46b1      	mov	r9, r6
    fb92:	e0b1      	b.n	fcf8 <determinant+0xd20>
    fb94:	2300      	movs	r3, #0
							m++;
    fb96:	3201      	adds	r2, #1
    fb98:	b2d2      	uxtb	r2, r2
					b[i][j] = 0;
    fb9a:	4647      	mov	r7, r8
    fb9c:	182e      	adds	r6, r5, r0
    fb9e:	00f6      	lsls	r6, r6, #3
    fba0:	19a6      	adds	r6, r4, r6
    fba2:	6077      	str	r7, [r6, #4]
					if (i != 0 && j != c)
    fba4:	9f02      	ldr	r7, [sp, #8]
    fba6:	468b      	mov	fp, r1
    fba8:	2f01      	cmp	r7, #1
    fbaa:	d100      	bne.n	fbae <determinant+0xbd6>
    fbac:	e1ea      	b.n	ff84 <determinant+0xfac>
						b[m][n] = a[i][j];
    fbae:	465e      	mov	r6, fp
    fbb0:	0051      	lsls	r1, r2, #1
    fbb2:	1889      	adds	r1, r1, r2
    fbb4:	0049      	lsls	r1, r1, #1
    fbb6:	18c9      	adds	r1, r1, r3
    fbb8:	6876      	ldr	r6, [r6, #4]
    fbba:	0089      	lsls	r1, r1, #2
    fbbc:	5066      	str	r6, [r4, r1]
						if (n < (k - 2))
    fbbe:	9900      	ldr	r1, [sp, #0]
    fbc0:	428b      	cmp	r3, r1
    fbc2:	da00      	bge.n	fbc6 <determinant+0xbee>
    fbc4:	e0de      	b.n	fd84 <determinant+0xdac>
							n = 0;
    fbc6:	2300      	movs	r3, #0
							m++;
    fbc8:	3201      	adds	r2, #1
    fbca:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
    fbcc:	4661      	mov	r1, ip
    fbce:	2902      	cmp	r1, #2
    fbd0:	d100      	bne.n	fbd4 <determinant+0xbfc>
    fbd2:	e08a      	b.n	fcea <determinant+0xd12>
					b[i][j] = 0;
    fbd4:	4646      	mov	r6, r8
    fbd6:	1829      	adds	r1, r5, r0
    fbd8:	00c9      	lsls	r1, r1, #3
    fbda:	1861      	adds	r1, r4, r1
    fbdc:	608e      	str	r6, [r1, #8]
					if (i != 0 && j != c)
    fbde:	464e      	mov	r6, r9
    fbe0:	2e02      	cmp	r6, #2
    fbe2:	d100      	bne.n	fbe6 <determinant+0xc0e>
    fbe4:	e1dc      	b.n	ffa0 <determinant+0xfc8>
    fbe6:	4656      	mov	r6, sl
    fbe8:	4006      	ands	r6, r0
    fbea:	0071      	lsls	r1, r6, #1
    fbec:	1989      	adds	r1, r1, r6
    fbee:	aeb4      	add	r6, sp, #720	; 0x2d0
    fbf0:	46b3      	mov	fp, r6
    fbf2:	00c9      	lsls	r1, r1, #3
    fbf4:	4459      	add	r1, fp
						b[m][n] = a[i][j];
    fbf6:	0056      	lsls	r6, r2, #1
    fbf8:	18b6      	adds	r6, r6, r2
    fbfa:	0076      	lsls	r6, r6, #1
    fbfc:	6889      	ldr	r1, [r1, #8]
    fbfe:	18f6      	adds	r6, r6, r3
    fc00:	00b6      	lsls	r6, r6, #2
    fc02:	51a1      	str	r1, [r4, r6]
						if (n < (k - 2))
    fc04:	9900      	ldr	r1, [sp, #0]
    fc06:	428b      	cmp	r3, r1
    fc08:	da00      	bge.n	fc0c <determinant+0xc34>
    fc0a:	e165      	b.n	fed8 <determinant+0xf00>
							n = 0;
    fc0c:	2300      	movs	r3, #0
							m++;
    fc0e:	3201      	adds	r2, #1
    fc10:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
    fc12:	4661      	mov	r1, ip
    fc14:	2903      	cmp	r1, #3
    fc16:	d068      	beq.n	fcea <determinant+0xd12>
					b[i][j] = 0;
    fc18:	4646      	mov	r6, r8
    fc1a:	1829      	adds	r1, r5, r0
    fc1c:	00c9      	lsls	r1, r1, #3
    fc1e:	1861      	adds	r1, r4, r1
    fc20:	60ce      	str	r6, [r1, #12]
					if (i != 0 && j != c)
    fc22:	464e      	mov	r6, r9
    fc24:	2e03      	cmp	r6, #3
    fc26:	d100      	bne.n	fc2a <determinant+0xc52>
    fc28:	e1b3      	b.n	ff92 <determinant+0xfba>
						b[m][n] = a[i][j];
    fc2a:	4656      	mov	r6, sl
    fc2c:	4006      	ands	r6, r0
    fc2e:	46b3      	mov	fp, r6
    fc30:	affc      	add	r7, sp, #1008	; 0x3f0
    fc32:	0076      	lsls	r6, r6, #1
    fc34:	445e      	add	r6, fp
    fc36:	46bb      	mov	fp, r7
    fc38:	00f6      	lsls	r6, r6, #3
    fc3a:	0051      	lsls	r1, r2, #1
    fc3c:	445e      	add	r6, fp
    fc3e:	1889      	adds	r1, r1, r2
    fc40:	3e21      	subs	r6, #33	; 0x21
    fc42:	0049      	lsls	r1, r1, #1
    fc44:	3eff      	subs	r6, #255	; 0xff
    fc46:	18c9      	adds	r1, r1, r3
    fc48:	68f6      	ldr	r6, [r6, #12]
    fc4a:	0089      	lsls	r1, r1, #2
    fc4c:	5066      	str	r6, [r4, r1]
						if (n < (k - 2))
    fc4e:	9900      	ldr	r1, [sp, #0]
    fc50:	428b      	cmp	r3, r1
    fc52:	da00      	bge.n	fc56 <determinant+0xc7e>
    fc54:	e13d      	b.n	fed2 <determinant+0xefa>
							n = 0;
    fc56:	2300      	movs	r3, #0
							m++;
    fc58:	3201      	adds	r2, #1
    fc5a:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
    fc5c:	4661      	mov	r1, ip
    fc5e:	2904      	cmp	r1, #4
    fc60:	d043      	beq.n	fcea <determinant+0xd12>
					b[i][j] = 0;
    fc62:	4646      	mov	r6, r8
    fc64:	1829      	adds	r1, r5, r0
    fc66:	00c9      	lsls	r1, r1, #3
    fc68:	1861      	adds	r1, r4, r1
    fc6a:	610e      	str	r6, [r1, #16]
					if (i != 0 && j != c)
    fc6c:	464e      	mov	r6, r9
    fc6e:	2e04      	cmp	r6, #4
    fc70:	d100      	bne.n	fc74 <determinant+0xc9c>
    fc72:	e19c      	b.n	ffae <determinant+0xfd6>
						b[m][n] = a[i][j];
    fc74:	4656      	mov	r6, sl
    fc76:	4006      	ands	r6, r0
    fc78:	46b3      	mov	fp, r6
    fc7a:	affc      	add	r7, sp, #1008	; 0x3f0
    fc7c:	0076      	lsls	r6, r6, #1
    fc7e:	445e      	add	r6, fp
    fc80:	46bb      	mov	fp, r7
    fc82:	00f6      	lsls	r6, r6, #3
    fc84:	0051      	lsls	r1, r2, #1
    fc86:	445e      	add	r6, fp
    fc88:	1889      	adds	r1, r1, r2
    fc8a:	3e21      	subs	r6, #33	; 0x21
    fc8c:	0049      	lsls	r1, r1, #1
    fc8e:	3eff      	subs	r6, #255	; 0xff
    fc90:	18c9      	adds	r1, r1, r3
    fc92:	6936      	ldr	r6, [r6, #16]
    fc94:	0089      	lsls	r1, r1, #2
    fc96:	5066      	str	r6, [r4, r1]
						if (n < (k - 2))
    fc98:	9900      	ldr	r1, [sp, #0]
    fc9a:	428b      	cmp	r3, r1
    fc9c:	da00      	bge.n	fca0 <determinant+0xcc8>
    fc9e:	e115      	b.n	fecc <determinant+0xef4>
							n = 0;
    fca0:	2300      	movs	r3, #0
							m++;
    fca2:	3201      	adds	r2, #1
    fca4:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
    fca6:	4661      	mov	r1, ip
    fca8:	2905      	cmp	r1, #5
    fcaa:	d01e      	beq.n	fcea <determinant+0xd12>
					b[i][j] = 0;
    fcac:	4641      	mov	r1, r8
    fcae:	182d      	adds	r5, r5, r0
    fcb0:	00ed      	lsls	r5, r5, #3
    fcb2:	1965      	adds	r5, r4, r5
    fcb4:	6169      	str	r1, [r5, #20]
					if (i != 0 && j != c)
    fcb6:	4649      	mov	r1, r9
    fcb8:	2905      	cmp	r1, #5
    fcba:	d016      	beq.n	fcea <determinant+0xd12>
						b[m][n] = a[i][j];
    fcbc:	4656      	mov	r6, sl
    fcbe:	4006      	ands	r6, r0
    fcc0:	0075      	lsls	r5, r6, #1
    fcc2:	19ad      	adds	r5, r5, r6
    fcc4:	aefc      	add	r6, sp, #1008	; 0x3f0
    fcc6:	46b3      	mov	fp, r6
    fcc8:	00ed      	lsls	r5, r5, #3
    fcca:	0051      	lsls	r1, r2, #1
    fccc:	445d      	add	r5, fp
    fcce:	1889      	adds	r1, r1, r2
    fcd0:	3d21      	subs	r5, #33	; 0x21
    fcd2:	0049      	lsls	r1, r1, #1
    fcd4:	3dff      	subs	r5, #255	; 0xff
    fcd6:	18c9      	adds	r1, r1, r3
    fcd8:	696d      	ldr	r5, [r5, #20]
    fcda:	0089      	lsls	r1, r1, #2
    fcdc:	5065      	str	r5, [r4, r1]
						if (n < (k - 2))
    fcde:	9900      	ldr	r1, [sp, #0]
    fce0:	428b      	cmp	r3, r1
    fce2:	db52      	blt.n	fd8a <determinant+0xdb2>
							n = 0;
    fce4:	2300      	movs	r3, #0
							m++;
    fce6:	3201      	adds	r2, #1
    fce8:	b2d2      	uxtb	r2, r2
			for (i = 0;i < k; i++)
    fcea:	9901      	ldr	r1, [sp, #4]
    fcec:	458c      	cmp	ip, r1
    fcee:	d951      	bls.n	fd94 <determinant+0xdbc>
    fcf0:	3101      	adds	r1, #1
    fcf2:	b2c9      	uxtb	r1, r1
    fcf4:	3001      	adds	r0, #1
    fcf6:	9101      	str	r1, [sp, #4]
					b[i][j] = 0;
    fcf8:	4646      	mov	r6, r8
    fcfa:	0045      	lsls	r5, r0, #1
    fcfc:	1829      	adds	r1, r5, r0
    fcfe:	00c9      	lsls	r1, r1, #3
    fd00:	5066      	str	r6, [r4, r1]
					if (i != 0 && j != c)
    fd02:	2800      	cmp	r0, #0
    fd04:	d100      	bne.n	fd08 <determinant+0xd30>
    fd06:	e0ea      	b.n	fede <determinant+0xf06>
    fd08:	464e      	mov	r6, r9
    fd0a:	2e00      	cmp	r6, #0
    fd0c:	d100      	bne.n	fd10 <determinant+0xd38>
    fd0e:	e12d      	b.n	ff6c <determinant+0xf94>
						b[m][n] = a[i][j];
    fd10:	4656      	mov	r6, sl
    fd12:	4006      	ands	r6, r0
    fd14:	0071      	lsls	r1, r6, #1
    fd16:	1989      	adds	r1, r1, r6
    fd18:	aeb4      	add	r6, sp, #720	; 0x2d0
    fd1a:	46b3      	mov	fp, r6
    fd1c:	0056      	lsls	r6, r2, #1
    fd1e:	00c9      	lsls	r1, r1, #3
    fd20:	18b6      	adds	r6, r6, r2
    fd22:	4459      	add	r1, fp
    fd24:	0076      	lsls	r6, r6, #1
    fd26:	18f6      	adds	r6, r6, r3
    fd28:	680f      	ldr	r7, [r1, #0]
    fd2a:	00b6      	lsls	r6, r6, #2
    fd2c:	51a7      	str	r7, [r4, r6]
						if (n < (k - 2))
    fd2e:	9e00      	ldr	r6, [sp, #0]
    fd30:	42b3      	cmp	r3, r6
    fd32:	db00      	blt.n	fd36 <determinant+0xd5e>
    fd34:	e72e      	b.n	fb94 <determinant+0xbbc>
						n++;
    fd36:	3301      	adds	r3, #1
    fd38:	b2db      	uxtb	r3, r3
    fd3a:	e72e      	b.n	fb9a <determinant+0xbc2>
    fd3c:	3301      	adds	r3, #1
    fd3e:	b2db      	uxtb	r3, r3
    fd40:	e683      	b.n	fa4a <determinant+0xa72>
    fd42:	3301      	adds	r3, #1
    fd44:	b2db      	uxtb	r3, r3
    fd46:	e65c      	b.n	fa02 <determinant+0xa2a>
    fd48:	3301      	adds	r3, #1
    fd4a:	b2db      	uxtb	r3, r3
    fd4c:	e631      	b.n	f9b2 <determinant+0x9da>
					b[i][j] = 0;
    fd4e:	2100      	movs	r1, #0
    fd50:	91b5      	str	r1, [sp, #724]	; 0x2d4
				for (j = 0 ;j < k; j++)
    fd52:	4649      	mov	r1, r9
    fd54:	2902      	cmp	r1, #2
    fd56:	d100      	bne.n	fd5a <determinant+0xd82>
    fd58:	e69f      	b.n	fa9a <determinant+0xac2>
					b[i][j] = 0;
    fd5a:	2100      	movs	r1, #0
    fd5c:	91b6      	str	r1, [sp, #728]	; 0x2d8
				for (j = 0 ;j < k; j++)
    fd5e:	4649      	mov	r1, r9
    fd60:	2903      	cmp	r1, #3
    fd62:	d100      	bne.n	fd66 <determinant+0xd8e>
    fd64:	e699      	b.n	fa9a <determinant+0xac2>
					b[i][j] = 0;
    fd66:	2100      	movs	r1, #0
    fd68:	91b7      	str	r1, [sp, #732]	; 0x2dc
				for (j = 0 ;j < k; j++)
    fd6a:	4649      	mov	r1, r9
    fd6c:	2904      	cmp	r1, #4
    fd6e:	d100      	bne.n	fd72 <determinant+0xd9a>
    fd70:	e693      	b.n	fa9a <determinant+0xac2>
					b[i][j] = 0;
    fd72:	2100      	movs	r1, #0
    fd74:	91b8      	str	r1, [sp, #736]	; 0x2e0
				for (j = 0 ;j < k; j++)
    fd76:	4649      	mov	r1, r9
    fd78:	2905      	cmp	r1, #5
    fd7a:	d100      	bne.n	fd7e <determinant+0xda6>
    fd7c:	e68d      	b.n	fa9a <determinant+0xac2>
					b[i][j] = 0;
    fd7e:	2100      	movs	r1, #0
    fd80:	91b9      	str	r1, [sp, #740]	; 0x2e4
    fd82:	e68c      	b.n	fa9e <determinant+0xac6>
						n++;
    fd84:	3301      	adds	r3, #1
    fd86:	b2db      	uxtb	r3, r3
    fd88:	e720      	b.n	fbcc <determinant+0xbf4>
			for (i = 0;i < k; i++)
    fd8a:	9901      	ldr	r1, [sp, #4]
						n++;
    fd8c:	3301      	adds	r3, #1
    fd8e:	b2db      	uxtb	r3, r3
			for (i = 0;i < k; i++)
    fd90:	458c      	cmp	ip, r1
    fd92:	d8ad      	bhi.n	fcf0 <determinant+0xd18>
			det = det + s * (a[0][c] * determinant(b, k - 1));
    fd94:	466b      	mov	r3, sp
    fd96:	0020      	movs	r0, r4
    fd98:	7d19      	ldrb	r1, [r3, #20]
    fd9a:	4667      	mov	r7, ip
    fd9c:	f7ff f91c 	bl	efd8 <determinant>
    fda0:	2190      	movs	r1, #144	; 0x90
    fda2:	464e      	mov	r6, r9
    fda4:	0089      	lsls	r1, r1, #2
    fda6:	aa24      	add	r2, sp, #144	; 0x90
    fda8:	1852      	adds	r2, r2, r1
    fdaa:	00b3      	lsls	r3, r6, #2
    fdac:	58d1      	ldr	r1, [r2, r3]
    fdae:	4bbd      	ldr	r3, [pc, #756]	; (100a4 <determinant+0x10cc>)
    fdb0:	4798      	blx	r3
    fdb2:	9d04      	ldr	r5, [sp, #16]
    fdb4:	4bbb      	ldr	r3, [pc, #748]	; (100a4 <determinant+0x10cc>)
    fdb6:	1c29      	adds	r1, r5, #0
    fdb8:	4798      	blx	r3
    fdba:	4bbb      	ldr	r3, [pc, #748]	; (100a8 <determinant+0x10d0>)
    fdbc:	1c01      	adds	r1, r0, #0
    fdbe:	9803      	ldr	r0, [sp, #12]
    fdc0:	4798      	blx	r3
			s = -1 * s;
    fdc2:	2280      	movs	r2, #128	; 0x80
    fdc4:	0612      	lsls	r2, r2, #24
    fdc6:	002b      	movs	r3, r5
    fdc8:	4694      	mov	ip, r2
    fdca:	3601      	adds	r6, #1
    fdcc:	4463      	add	r3, ip
    fdce:	9304      	str	r3, [sp, #16]
		for (c = 0; c < k; c++)
    fdd0:	b2f3      	uxtb	r3, r6
			det = det + s * (a[0][c] * determinant(b, k - 1));
    fdd2:	9003      	str	r0, [sp, #12]
		for (c = 0; c < k; c++)
    fdd4:	9302      	str	r3, [sp, #8]
    fdd6:	429f      	cmp	r7, r3
    fdd8:	d900      	bls.n	fddc <determinant+0xe04>
    fdda:	e6cd      	b.n	fb78 <determinant+0xba0>
    fddc:	46ba      	mov	sl, r7
    fdde:	1c01      	adds	r1, r0, #0
			det = det + s * (a[0][c] * determinant(b, k - 1));
    fde0:	4bb0      	ldr	r3, [pc, #704]	; (100a4 <determinant+0x10cc>)
    fde2:	9816      	ldr	r0, [sp, #88]	; 0x58
    fde4:	4798      	blx	r3
    fde6:	9c12      	ldr	r4, [sp, #72]	; 0x48
    fde8:	4bae      	ldr	r3, [pc, #696]	; (100a4 <determinant+0x10cc>)
    fdea:	1c21      	adds	r1, r4, #0
    fdec:	4798      	blx	r3
    fdee:	4bae      	ldr	r3, [pc, #696]	; (100a8 <determinant+0x10d0>)
    fdf0:	1c01      	adds	r1, r0, #0
    fdf2:	980a      	ldr	r0, [sp, #40]	; 0x28
    fdf4:	4798      	blx	r3
			s = -1 * s;
    fdf6:	2280      	movs	r2, #128	; 0x80
    fdf8:	0612      	lsls	r2, r2, #24
    fdfa:	0023      	movs	r3, r4
    fdfc:	4694      	mov	ip, r2
    fdfe:	4463      	add	r3, ip
    fe00:	9312      	str	r3, [sp, #72]	; 0x48
    fe02:	9b07      	ldr	r3, [sp, #28]
			det = det + s * (a[0][c] * determinant(b, k - 1));
    fe04:	900a      	str	r0, [sp, #40]	; 0x28
    fe06:	3301      	adds	r3, #1
    fe08:	9307      	str	r3, [sp, #28]
		for (c = 0; c < k; c++)
    fe0a:	b2db      	uxtb	r3, r3
    fe0c:	469b      	mov	fp, r3
    fe0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fe10:	455b      	cmp	r3, fp
    fe12:	d900      	bls.n	fe16 <determinant+0xe3e>
    fe14:	e567      	b.n	f8e6 <determinant+0x90e>
    fe16:	1c01      	adds	r1, r0, #0
			det = det + s * (a[0][c] * determinant(b, k - 1));
    fe18:	4ba2      	ldr	r3, [pc, #648]	; (100a4 <determinant+0x10cc>)
    fe1a:	9820      	ldr	r0, [sp, #128]	; 0x80
    fe1c:	4798      	blx	r3
    fe1e:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    fe20:	4ba0      	ldr	r3, [pc, #640]	; (100a4 <determinant+0x10cc>)
    fe22:	1c21      	adds	r1, r4, #0
    fe24:	4798      	blx	r3
    fe26:	4ba0      	ldr	r3, [pc, #640]	; (100a8 <determinant+0x10d0>)
    fe28:	1c01      	adds	r1, r0, #0
    fe2a:	9811      	ldr	r0, [sp, #68]	; 0x44
    fe2c:	4798      	blx	r3
			s = -1 * s;
    fe2e:	2280      	movs	r2, #128	; 0x80
    fe30:	0612      	lsls	r2, r2, #24
    fe32:	0023      	movs	r3, r4
    fe34:	4694      	mov	ip, r2
    fe36:	4463      	add	r3, ip
    fe38:	931b      	str	r3, [sp, #108]	; 0x6c
    fe3a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
			det = det + s * (a[0][c] * determinant(b, k - 1));
    fe3c:	9011      	str	r0, [sp, #68]	; 0x44
    fe3e:	3301      	adds	r3, #1
    fe40:	9313      	str	r3, [sp, #76]	; 0x4c
		for (c = 0; c < k; c++)
    fe42:	b2db      	uxtb	r3, r3
    fe44:	469b      	mov	fp, r3
    fe46:	9b15      	ldr	r3, [sp, #84]	; 0x54
    fe48:	455b      	cmp	r3, fp
    fe4a:	d900      	bls.n	fe4e <determinant+0xe76>
    fe4c:	e405      	b.n	f65a <determinant+0x682>
    fe4e:	4655      	mov	r5, sl
    fe50:	1c01      	adds	r1, r0, #0
			det = det + s * (a[0][c] * determinant(b, k - 1));
    fe52:	4b94      	ldr	r3, [pc, #592]	; (100a4 <determinant+0x10cc>)
    fe54:	981f      	ldr	r0, [sp, #124]	; 0x7c
    fe56:	4798      	blx	r3
    fe58:	9c1a      	ldr	r4, [sp, #104]	; 0x68
    fe5a:	4b92      	ldr	r3, [pc, #584]	; (100a4 <determinant+0x10cc>)
    fe5c:	1c21      	adds	r1, r4, #0
    fe5e:	4798      	blx	r3
    fe60:	4b91      	ldr	r3, [pc, #580]	; (100a8 <determinant+0x10d0>)
    fe62:	1c01      	adds	r1, r0, #0
    fe64:	9810      	ldr	r0, [sp, #64]	; 0x40
    fe66:	4798      	blx	r3
			s = -1 * s;
    fe68:	2280      	movs	r2, #128	; 0x80
    fe6a:	0612      	lsls	r2, r2, #24
    fe6c:	4694      	mov	ip, r2
    fe6e:	0023      	movs	r3, r4
    fe70:	4463      	add	r3, ip
    fe72:	931a      	str	r3, [sp, #104]	; 0x68
    fe74:	9b09      	ldr	r3, [sp, #36]	; 0x24
			det = det + s * (a[0][c] * determinant(b, k - 1));
    fe76:	9010      	str	r0, [sp, #64]	; 0x40
    fe78:	3301      	adds	r3, #1
    fe7a:	9309      	str	r3, [sp, #36]	; 0x24
		for (c = 0; c < k; c++)
    fe7c:	b2db      	uxtb	r3, r3
    fe7e:	469c      	mov	ip, r3
    fe80:	9b14      	ldr	r3, [sp, #80]	; 0x50
    fe82:	4563      	cmp	r3, ip
    fe84:	d901      	bls.n	fe8a <determinant+0xeb2>
    fe86:	f7ff fac0 	bl	f40a <determinant+0x432>
    fe8a:	1c01      	adds	r1, r0, #0
			det = det + s * (a[0][c] * determinant(b, k - 1));
    fe8c:	4b85      	ldr	r3, [pc, #532]	; (100a4 <determinant+0x10cc>)
    fe8e:	981e      	ldr	r0, [sp, #120]	; 0x78
    fe90:	4798      	blx	r3
    fe92:	9c19      	ldr	r4, [sp, #100]	; 0x64
    fe94:	4b83      	ldr	r3, [pc, #524]	; (100a4 <determinant+0x10cc>)
    fe96:	1c21      	adds	r1, r4, #0
    fe98:	4798      	blx	r3
    fe9a:	4b83      	ldr	r3, [pc, #524]	; (100a8 <determinant+0x10d0>)
    fe9c:	1c01      	adds	r1, r0, #0
    fe9e:	980f      	ldr	r0, [sp, #60]	; 0x3c
    fea0:	4798      	blx	r3
			s = -1 * s;
    fea2:	2280      	movs	r2, #128	; 0x80
    fea4:	0612      	lsls	r2, r2, #24
    fea6:	4694      	mov	ip, r2
    fea8:	0023      	movs	r3, r4
    feaa:	4463      	add	r3, ip
    feac:	9319      	str	r3, [sp, #100]	; 0x64
    feae:	9b08      	ldr	r3, [sp, #32]
			det = det + s * (a[0][c] * determinant(b, k - 1));
    feb0:	900f      	str	r0, [sp, #60]	; 0x3c
    feb2:	3301      	adds	r3, #1
    feb4:	9308      	str	r3, [sp, #32]
		for (c = 0; c < k; c++)
    feb6:	b2db      	uxtb	r3, r3
    feb8:	469c      	mov	ip, r3
    feba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    febc:	4563      	cmp	r3, ip
    febe:	d901      	bls.n	fec4 <determinant+0xeec>
    fec0:	f7ff f98c 	bl	f1dc <determinant+0x204>
    fec4:	46aa      	mov	sl, r5
    fec6:	1c01      	adds	r1, r0, #0
    fec8:	f7ff fb88 	bl	f5dc <determinant+0x604>
						n++;
    fecc:	3301      	adds	r3, #1
    fece:	b2db      	uxtb	r3, r3
    fed0:	e6e9      	b.n	fca6 <determinant+0xcce>
    fed2:	3301      	adds	r3, #1
    fed4:	b2db      	uxtb	r3, r3
    fed6:	e6c1      	b.n	fc5c <determinant+0xc84>
    fed8:	3301      	adds	r3, #1
    feda:	b2db      	uxtb	r3, r3
    fedc:	e699      	b.n	fc12 <determinant+0xc3a>
				for (j = 0 ;j < k; j++)
    fede:	4661      	mov	r1, ip
					b[i][j] = 0;
    fee0:	6066      	str	r6, [r4, #4]
				for (j = 0 ;j < k; j++)
    fee2:	2902      	cmp	r1, #2
    fee4:	d100      	bne.n	fee8 <determinant+0xf10>
    fee6:	e700      	b.n	fcea <determinant+0xd12>
					b[i][j] = 0;
    fee8:	4641      	mov	r1, r8
    feea:	60a1      	str	r1, [r4, #8]
				for (j = 0 ;j < k; j++)
    feec:	4661      	mov	r1, ip
    feee:	2903      	cmp	r1, #3
    fef0:	d100      	bne.n	fef4 <determinant+0xf1c>
    fef2:	e6fa      	b.n	fcea <determinant+0xd12>
					b[i][j] = 0;
    fef4:	4641      	mov	r1, r8
    fef6:	60e1      	str	r1, [r4, #12]
				for (j = 0 ;j < k; j++)
    fef8:	4661      	mov	r1, ip
    fefa:	2904      	cmp	r1, #4
    fefc:	d100      	bne.n	ff00 <determinant+0xf28>
    fefe:	e6f4      	b.n	fcea <determinant+0xd12>
					b[i][j] = 0;
    ff00:	4641      	mov	r1, r8
    ff02:	6121      	str	r1, [r4, #16]
				for (j = 0 ;j < k; j++)
    ff04:	4661      	mov	r1, ip
    ff06:	2905      	cmp	r1, #5
    ff08:	d100      	bne.n	ff0c <determinant+0xf34>
    ff0a:	e6ee      	b.n	fcea <determinant+0xd12>
					b[i][j] = 0;
    ff0c:	4641      	mov	r1, r8
    ff0e:	6161      	str	r1, [r4, #20]
    ff10:	9901      	ldr	r1, [sp, #4]
    ff12:	e6ed      	b.n	fcf0 <determinant+0xd18>
		return (a[0][0]);
    ff14:	9bb4      	ldr	r3, [sp, #720]	; 0x2d0
    ff16:	9303      	str	r3, [sp, #12]
    ff18:	1c19      	adds	r1, r3, #0
    ff1a:	e761      	b.n	fde0 <determinant+0xe08>
    ff1c:	9b90      	ldr	r3, [sp, #576]	; 0x240
    ff1e:	930a      	str	r3, [sp, #40]	; 0x28
    ff20:	1c19      	adds	r1, r3, #0
    ff22:	e779      	b.n	fe18 <determinant+0xe40>
				for (j = 0 ;j < k; j++)
    ff24:	464d      	mov	r5, r9
    ff26:	2d04      	cmp	r5, #4
    ff28:	d100      	bne.n	ff2c <determinant+0xf54>
    ff2a:	e5b6      	b.n	fa9a <determinant+0xac2>
					b[i][j] = 0;
    ff2c:	2500      	movs	r5, #0
    ff2e:	4647      	mov	r7, r8
    ff30:	610d      	str	r5, [r1, #16]
    ff32:	ad90      	add	r5, sp, #576	; 0x240
    ff34:	46ab      	mov	fp, r5
    ff36:	4007      	ands	r7, r0
    ff38:	0079      	lsls	r1, r7, #1
    ff3a:	19c9      	adds	r1, r1, r7
    ff3c:	00c9      	lsls	r1, r1, #3
    ff3e:	448b      	add	fp, r1
    ff40:	e56e      	b.n	fa20 <determinant+0xa48>
				for (j = 0 ;j < k; j++)
    ff42:	464d      	mov	r5, r9
    ff44:	2d03      	cmp	r5, #3
    ff46:	d100      	bne.n	ff4a <determinant+0xf72>
    ff48:	e5a7      	b.n	fa9a <determinant+0xac2>
					b[i][j] = 0;
    ff4a:	2500      	movs	r5, #0
    ff4c:	60cd      	str	r5, [r1, #12]
    ff4e:	e53e      	b.n	f9ce <determinant+0x9f6>
    ff50:	adb4      	add	r5, sp, #720	; 0x2d0
    ff52:	46ab      	mov	fp, r5
    ff54:	2500      	movs	r5, #0
    ff56:	4647      	mov	r7, r8
    ff58:	4459      	add	r1, fp
    ff5a:	604d      	str	r5, [r1, #4]
    ff5c:	ad90      	add	r5, sp, #576	; 0x240
    ff5e:	46ab      	mov	fp, r5
    ff60:	4007      	ands	r7, r0
    ff62:	0079      	lsls	r1, r7, #1
    ff64:	19c9      	adds	r1, r1, r7
    ff66:	00c9      	lsls	r1, r1, #3
    ff68:	448b      	add	fp, r1
    ff6a:	e4e2      	b.n	f932 <determinant+0x95a>
    ff6c:	4646      	mov	r6, r8
    ff6e:	1861      	adds	r1, r4, r1
    ff70:	604e      	str	r6, [r1, #4]
    ff72:	4656      	mov	r6, sl
    ff74:	4006      	ands	r6, r0
    ff76:	0071      	lsls	r1, r6, #1
    ff78:	1989      	adds	r1, r1, r6
    ff7a:	aeb4      	add	r6, sp, #720	; 0x2d0
    ff7c:	46b3      	mov	fp, r6
    ff7e:	00c9      	lsls	r1, r1, #3
    ff80:	448b      	add	fp, r1
    ff82:	e614      	b.n	fbae <determinant+0xbd6>
				for (j = 0 ;j < k; j++)
    ff84:	4667      	mov	r7, ip
    ff86:	2f02      	cmp	r7, #2
    ff88:	d100      	bne.n	ff8c <determinant+0xfb4>
    ff8a:	e6ae      	b.n	fcea <determinant+0xd12>
					b[i][j] = 0;
    ff8c:	4647      	mov	r7, r8
    ff8e:	60b7      	str	r7, [r6, #8]
    ff90:	e631      	b.n	fbf6 <determinant+0xc1e>
				for (j = 0 ;j < k; j++)
    ff92:	4666      	mov	r6, ip
    ff94:	2e04      	cmp	r6, #4
    ff96:	d100      	bne.n	ff9a <determinant+0xfc2>
    ff98:	e6a7      	b.n	fcea <determinant+0xd12>
					b[i][j] = 0;
    ff9a:	4646      	mov	r6, r8
    ff9c:	610e      	str	r6, [r1, #16]
    ff9e:	e669      	b.n	fc74 <determinant+0xc9c>
				for (j = 0 ;j < k; j++)
    ffa0:	4666      	mov	r6, ip
    ffa2:	2e03      	cmp	r6, #3
    ffa4:	d100      	bne.n	ffa8 <determinant+0xfd0>
    ffa6:	e6a0      	b.n	fcea <determinant+0xd12>
					b[i][j] = 0;
    ffa8:	4646      	mov	r6, r8
    ffaa:	60ce      	str	r6, [r1, #12]
    ffac:	e63d      	b.n	fc2a <determinant+0xc52>
				for (j = 0 ;j < k; j++)
    ffae:	4665      	mov	r5, ip
    ffb0:	2d05      	cmp	r5, #5
    ffb2:	d100      	bne.n	ffb6 <determinant+0xfde>
    ffb4:	e699      	b.n	fcea <determinant+0xd12>
					b[i][j] = 0;
    ffb6:	4645      	mov	r5, r8
    ffb8:	614d      	str	r5, [r1, #20]
    ffba:	e67f      	b.n	fcbc <determinant+0xce4>
				for (j = 0 ;j < k; j++)
    ffbc:	464d      	mov	r5, r9
    ffbe:	2d02      	cmp	r5, #2
    ffc0:	d100      	bne.n	ffc4 <determinant+0xfec>
    ffc2:	e56a      	b.n	fa9a <determinant+0xac2>
					b[i][j] = 0;
    ffc4:	2500      	movs	r5, #0
    ffc6:	60bd      	str	r5, [r7, #8]
    ffc8:	e4df      	b.n	f98a <determinant+0x9b2>
				for (j = 0 ;j < k; j++)
    ffca:	464c      	mov	r4, r9
    ffcc:	2c05      	cmp	r4, #5
    ffce:	d100      	bne.n	ffd2 <determinant+0xffa>
    ffd0:	e563      	b.n	fa9a <determinant+0xac2>
					b[i][j] = 0;
    ffd2:	2400      	movs	r4, #0
    ffd4:	617c      	str	r4, [r7, #20]
    ffd6:	e54d      	b.n	fa74 <determinant+0xa9c>
		return (a[0][0]);
    ffd8:	9b48      	ldr	r3, [sp, #288]	; 0x120
    ffda:	9310      	str	r3, [sp, #64]	; 0x40
    ffdc:	1c19      	adds	r1, r3, #0
    ffde:	e755      	b.n	fe8c <determinant+0xeb4>
				for (j = 0 ;j < k; j++)
    ffe0:	4654      	mov	r4, sl
    ffe2:	2c03      	cmp	r4, #3
    ffe4:	d101      	bne.n	ffea <determinant+0x1012>
    ffe6:	f7ff f980 	bl	f2ea <determinant+0x312>
					b[i][j] = 0;
    ffea:	60c8      	str	r0, [r1, #12]
    ffec:	f7ff f93e 	bl	f26c <determinant+0x294>
    fff0:	6048      	str	r0, [r1, #4]
    fff2:	f7ff f909 	bl	f208 <determinant+0x230>
				for (j = 0 ;j < k; j++)
    fff6:	2c05      	cmp	r4, #5
    fff8:	d101      	bne.n	fffe <determinant+0x1026>
    fffa:	f7ff fa96 	bl	f52a <determinant+0x552>
					b[i][j] = 0;
    fffe:	4648      	mov	r0, r9
   10000:	6148      	str	r0, [r1, #20]
   10002:	f7ff fa81 	bl	f508 <determinant+0x530>
				for (j = 0 ;j < k; j++)
   10006:	2c04      	cmp	r4, #4
   10008:	d101      	bne.n	1000e <determinant+0x1036>
   1000a:	f7ff fa8e 	bl	f52a <determinant+0x552>
					b[i][j] = 0;
   1000e:	4648      	mov	r0, r9
   10010:	6108      	str	r0, [r1, #16]
   10012:	f7ff fa61 	bl	f4d8 <determinant+0x500>
				for (j = 0 ;j < k; j++)
   10016:	2c03      	cmp	r4, #3
   10018:	d101      	bne.n	1001e <determinant+0x1046>
   1001a:	f7ff fa86 	bl	f52a <determinant+0x552>
					b[i][j] = 0;
   1001e:	4648      	mov	r0, r9
   10020:	60c8      	str	r0, [r1, #12]
   10022:	f7ff fa3f 	bl	f4a4 <determinant+0x4cc>
				for (j = 0 ;j < k; j++)
   10026:	9c00      	ldr	r4, [sp, #0]
   10028:	2c02      	cmp	r4, #2
   1002a:	d101      	bne.n	10030 <determinant+0x1058>
   1002c:	f7ff fbea 	bl	f804 <determinant+0x82c>
					b[i][j] = 0;
   10030:	60b5      	str	r5, [r6, #8]
   10032:	f7ff fb61 	bl	f6f8 <determinant+0x720>
   10036:	4648      	mov	r0, r9
   10038:	6048      	str	r0, [r1, #4]
   1003a:	f7ff f9fe 	bl	f43a <determinant+0x462>
				for (j = 0 ;j < k; j++)
   1003e:	9c00      	ldr	r4, [sp, #0]
   10040:	2c05      	cmp	r4, #5
   10042:	d101      	bne.n	10048 <determinant+0x1070>
   10044:	f7ff fbde 	bl	f804 <determinant+0x82c>
					b[i][j] = 0;
   10048:	6175      	str	r5, [r6, #20]
   1004a:	f7ff fbc9 	bl	f7e0 <determinant+0x808>
				for (j = 0 ;j < k; j++)
   1004e:	9c00      	ldr	r4, [sp, #0]
   10050:	2c04      	cmp	r4, #4
   10052:	d101      	bne.n	10058 <determinant+0x1080>
   10054:	f7ff fbd6 	bl	f804 <determinant+0x82c>
   10058:	4666      	mov	r6, ip
   1005a:	ac6c      	add	r4, sp, #432	; 0x1b0
   1005c:	46a3      	mov	fp, r4
   1005e:	4006      	ands	r6, r0
					b[i][j] = 0;
   10060:	6115      	str	r5, [r2, #16]
   10062:	0072      	lsls	r2, r6, #1
   10064:	1992      	adds	r2, r2, r6
   10066:	00d2      	lsls	r2, r2, #3
   10068:	4493      	add	fp, r2
   1006a:	f7ff fb90 	bl	f78e <determinant+0x7b6>
				for (j = 0 ;j < k; j++)
   1006e:	9c00      	ldr	r4, [sp, #0]
   10070:	2c03      	cmp	r4, #3
   10072:	d101      	bne.n	10078 <determinant+0x10a0>
   10074:	f7ff fbc6 	bl	f804 <determinant+0x82c>
					b[i][j] = 0;
   10078:	60d5      	str	r5, [r2, #12]
   1007a:	f7ff fb5f 	bl	f73c <determinant+0x764>
   1007e:	ac90      	add	r4, sp, #576	; 0x240
   10080:	46a3      	mov	fp, r4
   10082:	4666      	mov	r6, ip
   10084:	ac6c      	add	r4, sp, #432	; 0x1b0
   10086:	445a      	add	r2, fp
   10088:	46a3      	mov	fp, r4
   1008a:	4006      	ands	r6, r0
   1008c:	6055      	str	r5, [r2, #4]
   1008e:	0072      	lsls	r2, r6, #1
   10090:	1992      	adds	r2, r2, r6
   10092:	00d2      	lsls	r2, r2, #3
   10094:	4493      	add	fp, r2
   10096:	f7ff fb03 	bl	f6a0 <determinant+0x6c8>
		return (a[0][0]);
   1009a:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
   1009c:	9311      	str	r3, [sp, #68]	; 0x44
   1009e:	1c19      	adds	r1, r3, #0
   100a0:	e6d7      	b.n	fe52 <determinant+0xe7a>
   100a2:	46c0      	nop			; (mov r8, r8)
   100a4:	0001cba9 	.word	0x0001cba9
   100a8:	0001c4a5 	.word	0x0001c4a5

000100ac <cal_axis_misalignments>:
void cal_axis_misalignments(float XYZ[nbuf][3], struct INST_CAL *cal_struct){
   100ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   100ae:	46de      	mov	lr, fp
   100b0:	4657      	mov	r7, sl
   100b2:	464e      	mov	r6, r9
   100b4:	4645      	mov	r5, r8
   100b6:	b5e0      	push	{r5, r6, r7, lr}
	for (k=0;k<n_points;k++){
   100b8:	4b41      	ldr	r3, [pc, #260]	; (101c0 <cal_axis_misalignments+0x114>)
void cal_axis_misalignments(float XYZ[nbuf][3], struct INST_CAL *cal_struct){
   100ba:	4c42      	ldr	r4, [pc, #264]	; (101c4 <cal_axis_misalignments+0x118>)
	for (k=0;k<n_points;k++){
   100bc:	681b      	ldr	r3, [r3, #0]
void cal_axis_misalignments(float XYZ[nbuf][3], struct INST_CAL *cal_struct){
   100be:	44a5      	add	sp, r4
   100c0:	9109      	str	r1, [sp, #36]	; 0x24
	for (k=0;k<n_points;k++){
   100c2:	9305      	str	r3, [sp, #20]
   100c4:	2b00      	cmp	r3, #0
   100c6:	d100      	bne.n	100ca <cal_axis_misalignments+0x1e>
   100c8:	e088      	b.n	101dc <cal_axis_misalignments+0x130>
   100ca:	23a0      	movs	r3, #160	; 0xa0
   100cc:	00db      	lsls	r3, r3, #3
   100ce:	446b      	add	r3, sp
   100d0:	001a      	movs	r2, r3
   100d2:	9304      	str	r3, [sp, #16]
   100d4:	4699      	mov	r9, r3
   100d6:	abf0      	add	r3, sp, #960	; 0x3c0
   100d8:	469a      	mov	sl, r3
   100da:	9b05      	ldr	r3, [sp, #20]
   100dc:	4680      	mov	r8, r0
   100de:	011b      	lsls	r3, r3, #4
   100e0:	0019      	movs	r1, r3
   100e2:	9308      	str	r3, [sp, #32]
   100e4:	468c      	mov	ip, r1
   100e6:	0013      	movs	r3, r2
   100e8:	4463      	add	r3, ip
   100ea:	930b      	str	r3, [sp, #44]	; 0x2c
   100ec:	4b36      	ldr	r3, [pc, #216]	; (101c8 <cal_axis_misalignments+0x11c>)
   100ee:	469b      	mov	fp, r3
   100f0:	4b36      	ldr	r3, [pc, #216]	; (101cc <cal_axis_misalignments+0x120>)
   100f2:	9306      	str	r3, [sp, #24]
   100f4:	4b36      	ldr	r3, [pc, #216]	; (101d0 <cal_axis_misalignments+0x124>)
   100f6:	9307      	str	r3, [sp, #28]
   100f8:	4b36      	ldr	r3, [pc, #216]	; (101d4 <cal_axis_misalignments+0x128>)
   100fa:	930a      	str	r3, [sp, #40]	; 0x28
		D[k][0] = 1;
   100fc:	22fe      	movs	r2, #254	; 0xfe
   100fe:	464b      	mov	r3, r9
   10100:	0592      	lsls	r2, r2, #22
   10102:	601a      	str	r2, [r3, #0]
		D[k][1] = -2*XYZ[k][0]*XYZ[k][1];
   10104:	4643      	mov	r3, r8
   10106:	21c0      	movs	r1, #192	; 0xc0
   10108:	681c      	ldr	r4, [r3, #0]
   1010a:	0609      	lsls	r1, r1, #24
   1010c:	1c20      	adds	r0, r4, #0
   1010e:	47d8      	blx	fp
   10110:	4643      	mov	r3, r8
   10112:	685e      	ldr	r6, [r3, #4]
   10114:	1c05      	adds	r5, r0, #0
   10116:	1c31      	adds	r1, r6, #0
   10118:	47d8      	blx	fp
   1011a:	464b      	mov	r3, r9
   1011c:	6058      	str	r0, [r3, #4]
		D[k][2] = -2*XYZ[k][1]*XYZ[k][2];
   1011e:	4643      	mov	r3, r8
   10120:	21c0      	movs	r1, #192	; 0xc0
   10122:	689b      	ldr	r3, [r3, #8]
   10124:	0609      	lsls	r1, r1, #24
   10126:	1c1f      	adds	r7, r3, #0
   10128:	1c30      	adds	r0, r6, #0
   1012a:	47d8      	blx	fp
   1012c:	1c39      	adds	r1, r7, #0
   1012e:	47d8      	blx	fp
   10130:	464a      	mov	r2, r9
		D[k][3] = -2*XYZ[k][0]*XYZ[k][2];
   10132:	1c39      	adds	r1, r7, #0
		D[k][2] = -2*XYZ[k][1]*XYZ[k][2];
   10134:	6090      	str	r0, [r2, #8]
		D[k][3] = -2*XYZ[k][0]*XYZ[k][2];
   10136:	9702      	str	r7, [sp, #8]
   10138:	1c28      	adds	r0, r5, #0
   1013a:	47d8      	blx	fp
   1013c:	464a      	mov	r2, r9
		V[k] = pow(XYZ[k][0],2)+pow(XYZ[k][1],2)+pow(XYZ[k][2],2);
   1013e:	9f06      	ldr	r7, [sp, #24]
		D[k][3] = -2*XYZ[k][0]*XYZ[k][2];
   10140:	60d0      	str	r0, [r2, #12]
		V[k] = pow(XYZ[k][0],2)+pow(XYZ[k][1],2)+pow(XYZ[k][2],2);
   10142:	1c20      	adds	r0, r4, #0
   10144:	47b8      	blx	r7
   10146:	9706      	str	r7, [sp, #24]
   10148:	0004      	movs	r4, r0
   1014a:	1c30      	adds	r0, r6, #0
   1014c:	000d      	movs	r5, r1
   1014e:	47b8      	blx	r7
   10150:	9b06      	ldr	r3, [sp, #24]
   10152:	0006      	movs	r6, r0
   10154:	9802      	ldr	r0, [sp, #8]
   10156:	000f      	movs	r7, r1
   10158:	4798      	blx	r3
   1015a:	0022      	movs	r2, r4
   1015c:	9002      	str	r0, [sp, #8]
   1015e:	9103      	str	r1, [sp, #12]
   10160:	002b      	movs	r3, r5
   10162:	0020      	movs	r0, r4
   10164:	0029      	movs	r1, r5
   10166:	9c07      	ldr	r4, [sp, #28]
   10168:	47a0      	blx	r4
   1016a:	003b      	movs	r3, r7
   1016c:	0004      	movs	r4, r0
   1016e:	000d      	movs	r5, r1
   10170:	0032      	movs	r2, r6
   10172:	0039      	movs	r1, r7
   10174:	0030      	movs	r0, r6
   10176:	9f07      	ldr	r7, [sp, #28]
   10178:	47b8      	blx	r7
   1017a:	0002      	movs	r2, r0
   1017c:	000b      	movs	r3, r1
   1017e:	0020      	movs	r0, r4
   10180:	0029      	movs	r1, r5
   10182:	4c15      	ldr	r4, [pc, #84]	; (101d8 <cal_axis_misalignments+0x12c>)
   10184:	47a0      	blx	r4
   10186:	0004      	movs	r4, r0
   10188:	000d      	movs	r5, r1
   1018a:	9802      	ldr	r0, [sp, #8]
   1018c:	9903      	ldr	r1, [sp, #12]
   1018e:	0002      	movs	r2, r0
   10190:	000b      	movs	r3, r1
   10192:	47b8      	blx	r7
   10194:	0002      	movs	r2, r0
   10196:	000b      	movs	r3, r1
   10198:	0020      	movs	r0, r4
   1019a:	0029      	movs	r1, r5
   1019c:	4c0e      	ldr	r4, [pc, #56]	; (101d8 <cal_axis_misalignments+0x12c>)
   1019e:	47a0      	blx	r4
   101a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   101a2:	4798      	blx	r3
   101a4:	4653      	mov	r3, sl
   101a6:	c301      	stmia	r3!, {r0}
   101a8:	469a      	mov	sl, r3
   101aa:	2310      	movs	r3, #16
   101ac:	469c      	mov	ip, r3
   101ae:	3b04      	subs	r3, #4
   101b0:	44e1      	add	r9, ip
   101b2:	469c      	mov	ip, r3
	for (k=0;k<n_points;k++){
   101b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   101b6:	44e0      	add	r8, ip
   101b8:	4599      	cmp	r9, r3
   101ba:	d19f      	bne.n	100fc <cal_axis_misalignments+0x50>
   101bc:	e01c      	b.n	101f8 <cal_axis_misalignments+0x14c>
   101be:	46c0      	nop			; (mov r8, r8)
   101c0:	20003054 	.word	0x20003054
   101c4:	fffff5fc 	.word	0xfffff5fc
   101c8:	0001cba9 	.word	0x0001cba9
   101cc:	0001eddd 	.word	0x0001eddd
   101d0:	0001e115 	.word	0x0001e115
   101d4:	0001ee81 	.word	0x0001ee81
   101d8:	0001d28d 	.word	0x0001d28d
   101dc:	23a0      	movs	r3, #160	; 0xa0
   101de:	00db      	lsls	r3, r3, #3
   101e0:	446b      	add	r3, sp
   101e2:	9304      	str	r3, [sp, #16]
   101e4:	2300      	movs	r3, #0
   101e6:	9308      	str	r3, [sp, #32]
   101e8:	4bec      	ldr	r3, [pc, #944]	; (1059c <cal_axis_misalignments+0x4f0>)
   101ea:	469b      	mov	fp, r3
   101ec:	4bec      	ldr	r3, [pc, #944]	; (105a0 <cal_axis_misalignments+0x4f4>)
   101ee:	9306      	str	r3, [sp, #24]
   101f0:	4bec      	ldr	r3, [pc, #944]	; (105a4 <cal_axis_misalignments+0x4f8>)
   101f2:	9307      	str	r3, [sp, #28]
   101f4:	4bec      	ldr	r3, [pc, #944]	; (105a8 <cal_axis_misalignments+0x4fc>)
   101f6:	930a      	str	r3, [sp, #40]	; 0x28
   101f8:	ab18      	add	r3, sp, #96	; 0x60
   101fa:	4699      	mov	r9, r3
			for (k=0;k<n_points;k++){
   101fc:	9302      	str	r3, [sp, #8]
   101fe:	4beb      	ldr	r3, [pc, #940]	; (105ac <cal_axis_misalignments+0x500>)
   10200:	2600      	movs	r6, #0
   10202:	469a      	mov	sl, r3
   10204:	9a04      	ldr	r2, [sp, #16]
void cal_axis_misalignments(float XYZ[nbuf][3], struct INST_CAL *cal_struct){
   10206:	2700      	movs	r7, #0
   10208:	4690      	mov	r8, r2
   1020a:	9b08      	ldr	r3, [sp, #32]
   1020c:	1b9b      	subs	r3, r3, r6
   1020e:	4498      	add	r8, r3
			DtD[i][j] = 0;
   10210:	2200      	movs	r2, #0
   10212:	9b02      	ldr	r3, [sp, #8]
   10214:	51da      	str	r2, [r3, r7]
			for (k=0;k<n_points;k++){
   10216:	9b05      	ldr	r3, [sp, #20]
   10218:	2b00      	cmp	r3, #0
   1021a:	d00f      	beq.n	1023c <cal_axis_misalignments+0x190>
   1021c:	2500      	movs	r5, #0
   1021e:	9b04      	ldr	r3, [sp, #16]
   10220:	1b9c      	subs	r4, r3, r6
				DtD[i][j] = DtD[i][j] + D[k][i]*D[k][j];
   10222:	1933      	adds	r3, r6, r4
   10224:	6821      	ldr	r1, [r4, #0]
   10226:	59d8      	ldr	r0, [r3, r7]
   10228:	47d8      	blx	fp
   1022a:	1c01      	adds	r1, r0, #0
   1022c:	1c28      	adds	r0, r5, #0
   1022e:	47d0      	blx	sl
   10230:	3410      	adds	r4, #16
   10232:	1c05      	adds	r5, r0, #0
			for (k=0;k<n_points;k++){
   10234:	45a0      	cmp	r8, r4
   10236:	d1f4      	bne.n	10222 <cal_axis_misalignments+0x176>
   10238:	9b02      	ldr	r3, [sp, #8]
   1023a:	51d8      	str	r0, [r3, r7]
   1023c:	3704      	adds	r7, #4
		for (j=0;j<4;j++){
   1023e:	2f10      	cmp	r7, #16
   10240:	d1e6      	bne.n	10210 <cal_axis_misalignments+0x164>
   10242:	9b02      	ldr	r3, [sp, #8]
   10244:	3e04      	subs	r6, #4
   10246:	3318      	adds	r3, #24
   10248:	9302      	str	r3, [sp, #8]
	for (i=0;i<4;i++){
   1024a:	0033      	movs	r3, r6
   1024c:	3310      	adds	r3, #16
   1024e:	d1d9      	bne.n	10204 <cal_axis_misalignments+0x158>
   10250:	2500      	movs	r5, #0
		DtV[i] = 0;
   10252:	2200      	movs	r2, #0
   10254:	ab14      	add	r3, sp, #80	; 0x50
   10256:	515a      	str	r2, [r3, r5]
		for (k=0;k<n_points;k++){
   10258:	9b05      	ldr	r3, [sp, #20]
   1025a:	2b00      	cmp	r3, #0
   1025c:	d018      	beq.n	10290 <cal_axis_misalignments+0x1e4>
   1025e:	aaf0      	add	r2, sp, #960	; 0x3c0
   10260:	4690      	mov	r8, r2
   10262:	9b04      	ldr	r3, [sp, #16]
   10264:	9a08      	ldr	r2, [sp, #32]
   10266:	195c      	adds	r4, r3, r5
   10268:	469c      	mov	ip, r3
   1026a:	4643      	mov	r3, r8
   1026c:	1957      	adds	r7, r2, r5
   1026e:	46a8      	mov	r8, r5
   10270:	2600      	movs	r6, #0
   10272:	001d      	movs	r5, r3
   10274:	4467      	add	r7, ip
			DtV[i] = DtV[i]+D[k][i]*V[k];
   10276:	cd02      	ldmia	r5!, {r1}
   10278:	6820      	ldr	r0, [r4, #0]
   1027a:	47d8      	blx	fp
   1027c:	1c01      	adds	r1, r0, #0
   1027e:	1c30      	adds	r0, r6, #0
   10280:	47d0      	blx	sl
   10282:	3410      	adds	r4, #16
   10284:	1c06      	adds	r6, r0, #0
		for (k=0;k<n_points;k++){
   10286:	42a7      	cmp	r7, r4
   10288:	d1f5      	bne.n	10276 <cal_axis_misalignments+0x1ca>
   1028a:	4645      	mov	r5, r8
   1028c:	ab14      	add	r3, sp, #80	; 0x50
   1028e:	5158      	str	r0, [r3, r5]
   10290:	3504      	adds	r5, #4
	for (i=0;i<4;i++){
   10292:	2d10      	cmp	r5, #16
   10294:	d1dd      	bne.n	10252 <cal_axis_misalignments+0x1a6>
   10296:	ab60      	add	r3, sp, #384	; 0x180
   10298:	9308      	str	r3, [sp, #32]
   1029a:	2300      	movs	r3, #0
   1029c:	4698      	mov	r8, r3
   1029e:	ad3c      	add	r5, sp, #240	; 0xf0
   102a0:	4643      	mov	r3, r8
   102a2:	aa02      	add	r2, sp, #8
   102a4:	7013      	strb	r3, [r2, #0]
   102a6:	7813      	ldrb	r3, [r2, #0]
   102a8:	9310      	str	r3, [sp, #64]	; 0x40
						b[m][n] = source[i][j];
   102aa:	9b08      	ldr	r3, [sp, #32]
   102ac:	930d      	str	r3, [sp, #52]	; 0x34
   102ae:	2300      	movs	r3, #0
   102b0:	9302      	str	r3, [sp, #8]
   102b2:	4643      	mov	r3, r8
   102b4:	9305      	str	r3, [sp, #20]
   102b6:	465b      	mov	r3, fp
   102b8:	9304      	str	r3, [sp, #16]
					if (i != q && j != p)
   102ba:	9b05      	ldr	r3, [sp, #20]
   102bc:	2b00      	cmp	r3, #0
   102be:	d101      	bne.n	102c4 <cal_axis_misalignments+0x218>
   102c0:	f000 fd1e 	bl	10d00 <cal_axis_misalignments+0xc54>
   102c4:	9b02      	ldr	r3, [sp, #8]
   102c6:	b2d8      	uxtb	r0, r3
   102c8:	2b00      	cmp	r3, #0
   102ca:	d101      	bne.n	102d0 <cal_axis_misalignments+0x224>
   102cc:	f000 fd03 	bl	10cd6 <cal_axis_misalignments+0xc2a>
						b[m][n] = source[i][j];
   102d0:	464b      	mov	r3, r9
   102d2:	681b      	ldr	r3, [r3, #0]
   102d4:	602b      	str	r3, [r5, #0]
					if (i != q && j != p)
   102d6:	2801      	cmp	r0, #1
   102d8:	d100      	bne.n	102dc <cal_axis_misalignments+0x230>
   102da:	e288      	b.n	107ee <cal_axis_misalignments+0x742>
						b[m][n] = source[i][j];
   102dc:	464b      	mov	r3, r9
						n++;
   102de:	2201      	movs	r2, #1
						b[m][n] = source[i][j];
   102e0:	685b      	ldr	r3, [r3, #4]
					if (i != q && j != p)
   102e2:	9902      	ldr	r1, [sp, #8]
						b[m][n] = source[i][j];
   102e4:	606b      	str	r3, [r5, #4]
   102e6:	1c53      	adds	r3, r2, #1
					if (i != q && j != p)
   102e8:	2902      	cmp	r1, #2
   102ea:	d101      	bne.n	102f0 <cal_axis_misalignments+0x244>
   102ec:	f000 fcfd 	bl	10cea <cal_axis_misalignments+0xc3e>
						b[m][n] = source[i][j];
   102f0:	4649      	mov	r1, r9
   102f2:	6889      	ldr	r1, [r1, #8]
   102f4:	009a      	lsls	r2, r3, #2
   102f6:	50a9      	str	r1, [r5, r2]
						if (n < (f - 2))
   102f8:	2b01      	cmp	r3, #1
   102fa:	d100      	bne.n	102fe <cal_axis_misalignments+0x252>
   102fc:	e27a      	b.n	107f4 <cal_axis_misalignments+0x748>
					if (i != q && j != p)
   102fe:	2803      	cmp	r0, #3
   10300:	d101      	bne.n	10306 <cal_axis_misalignments+0x25a>
   10302:	f000 fcc9 	bl	10c98 <cal_axis_misalignments+0xbec>
						b[m][n] = source[i][j];
   10306:	464b      	mov	r3, r9
   10308:	68db      	ldr	r3, [r3, #12]
   1030a:	2201      	movs	r2, #1
   1030c:	61ab      	str	r3, [r5, #24]
							m++;
   1030e:	2301      	movs	r3, #1
					if (i != q && j != p)
   10310:	9910      	ldr	r1, [sp, #64]	; 0x40
   10312:	2901      	cmp	r1, #1
   10314:	d100      	bne.n	10318 <cal_axis_misalignments+0x26c>
   10316:	e27b      	b.n	10810 <cal_axis_misalignments+0x764>
   10318:	9902      	ldr	r1, [sp, #8]
   1031a:	4684      	mov	ip, r0
   1031c:	2900      	cmp	r1, #0
   1031e:	d100      	bne.n	10322 <cal_axis_misalignments+0x276>
   10320:	e30c      	b.n	1093c <cal_axis_misalignments+0x890>
						b[m][n] = source[i][j];
   10322:	464f      	mov	r7, r9
   10324:	0059      	lsls	r1, r3, #1
   10326:	18ce      	adds	r6, r1, r3
   10328:	0076      	lsls	r6, r6, #1
   1032a:	18b4      	adds	r4, r6, r2
   1032c:	69bf      	ldr	r7, [r7, #24]
   1032e:	00a4      	lsls	r4, r4, #2
   10330:	512f      	str	r7, [r5, r4]
						if (n < (f - 2))
   10332:	2a01      	cmp	r2, #1
   10334:	d900      	bls.n	10338 <cal_axis_misalignments+0x28c>
   10336:	e230      	b.n	1079a <cal_axis_misalignments+0x6ee>
						n++;
   10338:	466f      	mov	r7, sp
   1033a:	1c54      	adds	r4, r2, #1
   1033c:	71fc      	strb	r4, [r7, #7]
   1033e:	2424      	movs	r4, #36	; 0x24
   10340:	af02      	add	r7, sp, #8
   10342:	193f      	adds	r7, r7, r4
   10344:	466c      	mov	r4, sp
   10346:	79e4      	ldrb	r4, [r4, #7]
   10348:	703c      	strb	r4, [r7, #0]
   1034a:	2724      	movs	r7, #36	; 0x24
   1034c:	ac02      	add	r4, sp, #8
   1034e:	19e4      	adds	r4, r4, r7
   10350:	7824      	ldrb	r4, [r4, #0]
   10352:	46a0      	mov	r8, r4
						b[m][n] = source[i][j];
   10354:	4446      	add	r6, r8
   10356:	00b6      	lsls	r6, r6, #2
   10358:	464c      	mov	r4, r9
					if (i != q && j != p)
   1035a:	2801      	cmp	r0, #1
   1035c:	d100      	bne.n	10360 <cal_axis_misalignments+0x2b4>
   1035e:	e2dc      	b.n	1091a <cal_axis_misalignments+0x86e>
						b[m][n] = source[i][j];
   10360:	69e4      	ldr	r4, [r4, #28]
   10362:	51ac      	str	r4, [r5, r6]
						if (n < (f - 2))
   10364:	4644      	mov	r4, r8
   10366:	2c01      	cmp	r4, #1
   10368:	d100      	bne.n	1036c <cal_axis_misalignments+0x2c0>
   1036a:	e2d2      	b.n	10912 <cal_axis_misalignments+0x866>
							m++;
   1036c:	3301      	adds	r3, #1
   1036e:	b2db      	uxtb	r3, r3
					if (i != q && j != p)
   10370:	2802      	cmp	r0, #2
   10372:	d101      	bne.n	10378 <cal_axis_misalignments+0x2cc>
   10374:	f000 fc9b 	bl	10cae <cal_axis_misalignments+0xc02>
						b[m][n] = source[i][j];
   10378:	464c      	mov	r4, r9
   1037a:	0059      	lsls	r1, r3, #1
   1037c:	18ca      	adds	r2, r1, r3
   1037e:	6a24      	ldr	r4, [r4, #32]
   10380:	00d2      	lsls	r2, r2, #3
   10382:	50ac      	str	r4, [r5, r2]
   10384:	2201      	movs	r2, #1
					if (i != q && j != p)
   10386:	4664      	mov	r4, ip
   10388:	2c03      	cmp	r4, #3
   1038a:	d101      	bne.n	10390 <cal_axis_misalignments+0x2e4>
   1038c:	f000 fcc0 	bl	10d10 <cal_axis_misalignments+0xc64>
   10390:	0016      	movs	r6, r2
						b[m][n] = source[i][j];
   10392:	18cf      	adds	r7, r1, r3
   10394:	007f      	lsls	r7, r7, #1
   10396:	46bc      	mov	ip, r7
   10398:	464c      	mov	r4, r9
   1039a:	44b4      	add	ip, r6
   1039c:	4667      	mov	r7, ip
   1039e:	6a64      	ldr	r4, [r4, #36]	; 0x24
   103a0:	00bf      	lsls	r7, r7, #2
   103a2:	51ec      	str	r4, [r5, r7]
						if (n < (f - 2))
   103a4:	2e01      	cmp	r6, #1
   103a6:	dc00      	bgt.n	103aa <cal_axis_misalignments+0x2fe>
   103a8:	e2b0      	b.n	1090c <cal_axis_misalignments+0x860>
							n = 0;
   103aa:	2200      	movs	r2, #0
							m++;
   103ac:	3301      	adds	r3, #1
   103ae:	b2db      	uxtb	r3, r3
   103b0:	0059      	lsls	r1, r3, #1
					if (i != q && j != p)
   103b2:	9c05      	ldr	r4, [sp, #20]
   103b4:	2c02      	cmp	r4, #2
   103b6:	d04c      	beq.n	10452 <cal_axis_misalignments+0x3a6>
   103b8:	9c02      	ldr	r4, [sp, #8]
   103ba:	4684      	mov	ip, r0
   103bc:	2c00      	cmp	r4, #0
   103be:	d100      	bne.n	103c2 <cal_axis_misalignments+0x316>
   103c0:	e22c      	b.n	1081c <cal_axis_misalignments+0x770>
						b[m][n] = source[i][j];
   103c2:	464f      	mov	r7, r9
   103c4:	18ce      	adds	r6, r1, r3
   103c6:	0076      	lsls	r6, r6, #1
   103c8:	18b4      	adds	r4, r6, r2
   103ca:	6b3f      	ldr	r7, [r7, #48]	; 0x30
   103cc:	00a4      	lsls	r4, r4, #2
   103ce:	512f      	str	r7, [r5, r4]
						if (n < (f - 2))
   103d0:	2a01      	cmp	r2, #1
   103d2:	dd00      	ble.n	103d6 <cal_axis_misalignments+0x32a>
   103d4:	e1b7      	b.n	10746 <cal_axis_misalignments+0x69a>
						n++;
   103d6:	466f      	mov	r7, sp
   103d8:	1c54      	adds	r4, r2, #1
   103da:	71fc      	strb	r4, [r7, #7]
   103dc:	2424      	movs	r4, #36	; 0x24
   103de:	af02      	add	r7, sp, #8
   103e0:	193f      	adds	r7, r7, r4
   103e2:	466c      	mov	r4, sp
   103e4:	79e4      	ldrb	r4, [r4, #7]
   103e6:	703c      	strb	r4, [r7, #0]
   103e8:	2724      	movs	r7, #36	; 0x24
   103ea:	ac02      	add	r4, sp, #8
   103ec:	19e4      	adds	r4, r4, r7
   103ee:	7824      	ldrb	r4, [r4, #0]
   103f0:	46a0      	mov	r8, r4
						b[m][n] = source[i][j];
   103f2:	4446      	add	r6, r8
   103f4:	00b6      	lsls	r6, r6, #2
   103f6:	464c      	mov	r4, r9
					if (i != q && j != p)
   103f8:	2801      	cmp	r0, #1
   103fa:	d101      	bne.n	10400 <cal_axis_misalignments+0x354>
   103fc:	f000 fc20 	bl	10c40 <cal_axis_misalignments+0xb94>
						b[m][n] = source[i][j];
   10400:	6b64      	ldr	r4, [r4, #52]	; 0x34
   10402:	51ac      	str	r4, [r5, r6]
						if (n < (f - 2))
   10404:	4644      	mov	r4, r8
   10406:	2c01      	cmp	r4, #1
   10408:	d800      	bhi.n	1040c <cal_axis_misalignments+0x360>
   1040a:	e28f      	b.n	1092c <cal_axis_misalignments+0x880>
							m++;
   1040c:	3301      	adds	r3, #1
   1040e:	b2db      	uxtb	r3, r3
					if (i != q && j != p)
   10410:	2802      	cmp	r0, #2
   10412:	d100      	bne.n	10416 <cal_axis_misalignments+0x36a>
   10414:	e277      	b.n	10906 <cal_axis_misalignments+0x85a>
						b[m][n] = source[i][j];
   10416:	464c      	mov	r4, r9
   10418:	0059      	lsls	r1, r3, #1
   1041a:	18ca      	adds	r2, r1, r3
   1041c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   1041e:	00d2      	lsls	r2, r2, #3
   10420:	50ac      	str	r4, [r5, r2]
   10422:	2201      	movs	r2, #1
					if (i != q && j != p)
   10424:	4664      	mov	r4, ip
   10426:	2c03      	cmp	r4, #3
   10428:	d100      	bne.n	1042c <cal_axis_misalignments+0x380>
   1042a:	e29c      	b.n	10966 <cal_axis_misalignments+0x8ba>
   1042c:	0016      	movs	r6, r2
						b[m][n] = source[i][j];
   1042e:	464c      	mov	r4, r9
   10430:	18c9      	adds	r1, r1, r3
   10432:	0049      	lsls	r1, r1, #1
   10434:	1989      	adds	r1, r1, r6
   10436:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   10438:	0089      	lsls	r1, r1, #2
   1043a:	506c      	str	r4, [r5, r1]
						if (n < (f - 2))
   1043c:	2e01      	cmp	r6, #1
   1043e:	dc01      	bgt.n	10444 <cal_axis_misalignments+0x398>
   10440:	f000 fc43 	bl	10cca <cal_axis_misalignments+0xc1e>
							n = 0;
   10444:	2200      	movs	r2, #0
							m++;
   10446:	3301      	adds	r3, #1
   10448:	b2db      	uxtb	r3, r3
					if (i != q && j != p)
   1044a:	9c05      	ldr	r4, [sp, #20]
   1044c:	0059      	lsls	r1, r3, #1
   1044e:	2c03      	cmp	r4, #3
   10450:	d035      	beq.n	104be <cal_axis_misalignments+0x412>
   10452:	9e02      	ldr	r6, [sp, #8]
   10454:	4680      	mov	r8, r0
   10456:	2e00      	cmp	r6, #0
   10458:	d100      	bne.n	1045c <cal_axis_misalignments+0x3b0>
   1045a:	e1f3      	b.n	10844 <cal_axis_misalignments+0x798>
						b[m][n] = source[i][j];
   1045c:	18ce      	adds	r6, r1, r3
   1045e:	0074      	lsls	r4, r6, #1
   10460:	464e      	mov	r6, r9
   10462:	18a7      	adds	r7, r4, r2
   10464:	6cb6      	ldr	r6, [r6, #72]	; 0x48
   10466:	00bf      	lsls	r7, r7, #2
   10468:	51ee      	str	r6, [r5, r7]
						if (n < (f - 2))
   1046a:	2a01      	cmp	r2, #1
   1046c:	dc00      	bgt.n	10470 <cal_axis_misalignments+0x3c4>
   1046e:	e203      	b.n	10878 <cal_axis_misalignments+0x7cc>
							m++;
   10470:	3301      	adds	r3, #1
   10472:	b2db      	uxtb	r3, r3
					if (i != q && j != p)
   10474:	2801      	cmp	r0, #1
   10476:	d101      	bne.n	1047c <cal_axis_misalignments+0x3d0>
   10478:	f000 fc1d 	bl	10cb6 <cal_axis_misalignments+0xc0a>
						b[m][n] = source[i][j];
   1047c:	464c      	mov	r4, r9
   1047e:	0059      	lsls	r1, r3, #1
   10480:	18ca      	adds	r2, r1, r3
   10482:	6ce4      	ldr	r4, [r4, #76]	; 0x4c
   10484:	00d2      	lsls	r2, r2, #3
   10486:	50ac      	str	r4, [r5, r2]
   10488:	2601      	movs	r6, #1
   1048a:	2201      	movs	r2, #1
					if (i != q && j != p)
   1048c:	2802      	cmp	r0, #2
   1048e:	d100      	bne.n	10492 <cal_axis_misalignments+0x3e6>
   10490:	e1ea      	b.n	10868 <cal_axis_misalignments+0x7bc>
						b[m][n] = source[i][j];
   10492:	464f      	mov	r7, r9
   10494:	18c8      	adds	r0, r1, r3
   10496:	0040      	lsls	r0, r0, #1
   10498:	1980      	adds	r0, r0, r6
   1049a:	6d3f      	ldr	r7, [r7, #80]	; 0x50
   1049c:	0080      	lsls	r0, r0, #2
   1049e:	502f      	str	r7, [r5, r0]
						if (n < (f - 2))
   104a0:	2e01      	cmp	r6, #1
   104a2:	dc01      	bgt.n	104a8 <cal_axis_misalignments+0x3fc>
   104a4:	f000 fc0e 	bl	10cc4 <cal_axis_misalignments+0xc18>
					if (i != q && j != p)
   104a8:	4642      	mov	r2, r8
							m++;
   104aa:	3301      	adds	r3, #1
   104ac:	b2db      	uxtb	r3, r3
					if (i != q && j != p)
   104ae:	2a03      	cmp	r2, #3
   104b0:	d005      	beq.n	104be <cal_axis_misalignments+0x412>
						b[m][n] = source[i][j];
   104b2:	005a      	lsls	r2, r3, #1
   104b4:	18d3      	adds	r3, r2, r3
   104b6:	464a      	mov	r2, r9
   104b8:	6d52      	ldr	r2, [r2, #84]	; 0x54
   104ba:	00db      	lsls	r3, r3, #3
   104bc:	50ea      	str	r2, [r5, r3]
			fac[q][p] = pow(-1, q + p) * determinant(b, f - 1);
   104be:	9b02      	ldr	r3, [sp, #8]
   104c0:	9a05      	ldr	r2, [sp, #20]
   104c2:	18d0      	adds	r0, r2, r3
   104c4:	4a3a      	ldr	r2, [pc, #232]	; (105b0 <cal_axis_misalignments+0x504>)
   104c6:	4790      	blx	r2
   104c8:	4e3a      	ldr	r6, [pc, #232]	; (105b4 <cal_axis_misalignments+0x508>)
   104ca:	000b      	movs	r3, r1
   104cc:	0002      	movs	r2, r0
   104ce:	493a      	ldr	r1, [pc, #232]	; (105b8 <cal_axis_misalignments+0x50c>)
   104d0:	2000      	movs	r0, #0
   104d2:	47b0      	blx	r6
						b[m][n] = a[i][j];
   104d4:	6bae      	ldr	r6, [r5, #56]	; 0x38
			fac[q][p] = pow(-1, q + p) * determinant(b, f - 1);
   104d6:	900e      	str	r0, [sp, #56]	; 0x38
   104d8:	910f      	str	r1, [sp, #60]	; 0x3c
						b[m][n] = a[i][j];
   104da:	46b3      	mov	fp, r6
			det = det + s * (a[0][c] * determinant(b, k - 1));
   104dc:	682e      	ldr	r6, [r5, #0]
						b[m][n] = a[i][j];
   104de:	465a      	mov	r2, fp
			det = det + s * (a[0][c] * determinant(b, k - 1));
   104e0:	960c      	str	r6, [sp, #48]	; 0x30
					b[i][j] = 0;
   104e2:	2600      	movs	r6, #0
						b[m][n] = a[i][j];
   104e4:	69e9      	ldr	r1, [r5, #28]
   104e6:	92cc      	str	r2, [sp, #816]	; 0x330
   104e8:	1c0f      	adds	r7, r1, #0
   104ea:	6a29      	ldr	r1, [r5, #32]
			det = det + s * (a[0][c] * determinant(b, k - 1));
   104ec:	4a33      	ldr	r2, [pc, #204]	; (105bc <cal_axis_misalignments+0x510>)
						b[m][n] = a[i][j];
   104ee:	4688      	mov	r8, r1
   104f0:	6b69      	ldr	r1, [r5, #52]	; 0x34
			det = det + s * (a[0][c] * determinant(b, k - 1));
   104f2:	a8cc      	add	r0, sp, #816	; 0x330
						b[m][n] = a[i][j];
   104f4:	910b      	str	r1, [sp, #44]	; 0x2c
			det = det + s * (a[0][c] * determinant(b, k - 1));
   104f6:	2101      	movs	r1, #1
					b[i][j] = 0;
   104f8:	96cd      	str	r6, [sp, #820]	; 0x334
   104fa:	96d2      	str	r6, [sp, #840]	; 0x348
   104fc:	96d3      	str	r6, [sp, #844]	; 0x34c
			det = det + s * (a[0][c] * determinant(b, k - 1));
   104fe:	4790      	blx	r2
   10500:	9c04      	ldr	r4, [sp, #16]
   10502:	1c01      	adds	r1, r0, #0
   10504:	9711      	str	r7, [sp, #68]	; 0x44
   10506:	1c38      	adds	r0, r7, #0
   10508:	47a0      	blx	r4
   1050a:	1c31      	adds	r1, r6, #0
   1050c:	47d0      	blx	sl
						b[m][n] = a[i][j];
   1050e:	990b      	ldr	r1, [sp, #44]	; 0x2c
			det = det + s * (a[0][c] * determinant(b, k - 1));
   10510:	afcc      	add	r7, sp, #816	; 0x330
   10512:	1c04      	adds	r4, r0, #0
						b[m][n] = a[i][j];
   10514:	91cc      	str	r1, [sp, #816]	; 0x330
			det = det + s * (a[0][c] * determinant(b, k - 1));
   10516:	0038      	movs	r0, r7
   10518:	2101      	movs	r1, #1
   1051a:	4f28      	ldr	r7, [pc, #160]	; (105bc <cal_axis_misalignments+0x510>)
   1051c:	47b8      	blx	r7
   1051e:	4641      	mov	r1, r8
   10520:	9f04      	ldr	r7, [sp, #16]
   10522:	47b8      	blx	r7
   10524:	4f26      	ldr	r7, [pc, #152]	; (105c0 <cal_axis_misalignments+0x514>)
   10526:	1c01      	adds	r1, r0, #0
   10528:	1c20      	adds	r0, r4, #0
   1052a:	47b8      	blx	r7
   1052c:	990c      	ldr	r1, [sp, #48]	; 0x30
   1052e:	9c04      	ldr	r4, [sp, #16]
   10530:	47a0      	blx	r4
   10532:	1c31      	adds	r1, r6, #0
   10534:	47d0      	blx	sl
   10536:	686b      	ldr	r3, [r5, #4]
						b[m][n] = a[i][j];
   10538:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			det = det + s * (a[0][c] * determinant(b, k - 1));
   1053a:	9312      	str	r3, [sp, #72]	; 0x48
						b[m][n] = a[i][j];
   1053c:	465b      	mov	r3, fp
   1053e:	69af      	ldr	r7, [r5, #24]
   10540:	93cc      	str	r3, [sp, #816]	; 0x330
			det = det + s * (a[0][c] * determinant(b, k - 1));
   10542:	abcc      	add	r3, sp, #816	; 0x330
   10544:	9013      	str	r0, [sp, #76]	; 0x4c
   10546:	2101      	movs	r1, #1
   10548:	0018      	movs	r0, r3
   1054a:	4b1c      	ldr	r3, [pc, #112]	; (105bc <cal_axis_misalignments+0x510>)
						b[m][n] = a[i][j];
   1054c:	920c      	str	r2, [sp, #48]	; 0x30
					b[i][j] = 0;
   1054e:	96cd      	str	r6, [sp, #820]	; 0x334
   10550:	96d2      	str	r6, [sp, #840]	; 0x348
   10552:	96d3      	str	r6, [sp, #844]	; 0x34c
			det = det + s * (a[0][c] * determinant(b, k - 1));
   10554:	4798      	blx	r3
   10556:	9b04      	ldr	r3, [sp, #16]
   10558:	1c39      	adds	r1, r7, #0
   1055a:	4798      	blx	r3
   1055c:	1c31      	adds	r1, r6, #0
   1055e:	47d0      	blx	sl
   10560:	1c3c      	adds	r4, r7, #0
						b[m][n] = a[i][j];
   10562:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			det = det + s * (a[0][c] * determinant(b, k - 1));
   10564:	afcc      	add	r7, sp, #816	; 0x330
   10566:	4683      	mov	fp, r0
   10568:	2101      	movs	r1, #1
   1056a:	0038      	movs	r0, r7
   1056c:	4f13      	ldr	r7, [pc, #76]	; (105bc <cal_axis_misalignments+0x510>)
						b[m][n] = a[i][j];
   1056e:	92cc      	str	r2, [sp, #816]	; 0x330
			det = det + s * (a[0][c] * determinant(b, k - 1));
   10570:	47b8      	blx	r7
   10572:	9b04      	ldr	r3, [sp, #16]
   10574:	4641      	mov	r1, r8
   10576:	4798      	blx	r3
   10578:	4f11      	ldr	r7, [pc, #68]	; (105c0 <cal_axis_misalignments+0x514>)
   1057a:	1c01      	adds	r1, r0, #0
   1057c:	4658      	mov	r0, fp
   1057e:	47b8      	blx	r7
   10580:	9912      	ldr	r1, [sp, #72]	; 0x48
   10582:	9b04      	ldr	r3, [sp, #16]
   10584:	4798      	blx	r3
   10586:	1c01      	adds	r1, r0, #0
   10588:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1058a:	47b8      	blx	r7
   1058c:	68ab      	ldr	r3, [r5, #8]
						b[m][n] = a[i][j];
   1058e:	990b      	ldr	r1, [sp, #44]	; 0x2c
			det = det + s * (a[0][c] * determinant(b, k - 1));
   10590:	469b      	mov	fp, r3
   10592:	abcc      	add	r3, sp, #816	; 0x330
   10594:	9012      	str	r0, [sp, #72]	; 0x48
						b[m][n] = a[i][j];
   10596:	91cc      	str	r1, [sp, #816]	; 0x330
   10598:	e014      	b.n	105c4 <cal_axis_misalignments+0x518>
   1059a:	46c0      	nop			; (mov r8, r8)
   1059c:	0001cba9 	.word	0x0001cba9
   105a0:	0001eddd 	.word	0x0001eddd
   105a4:	0001e115 	.word	0x0001e115
   105a8:	0001ee81 	.word	0x0001ee81
   105ac:	0001c4a5 	.word	0x0001c4a5
   105b0:	0001ece9 	.word	0x0001ece9
   105b4:	0001965d 	.word	0x0001965d
   105b8:	bff00000 	.word	0xbff00000
   105bc:	0000efd9 	.word	0x0000efd9
   105c0:	0001cde9 	.word	0x0001cde9
			det = det + s * (a[0][c] * determinant(b, k - 1));
   105c4:	0018      	movs	r0, r3
   105c6:	2101      	movs	r1, #1
   105c8:	4bda      	ldr	r3, [pc, #872]	; (10934 <cal_axis_misalignments+0x888>)
					b[i][j] = 0;
   105ca:	96cd      	str	r6, [sp, #820]	; 0x334
   105cc:	96d2      	str	r6, [sp, #840]	; 0x348
   105ce:	96d3      	str	r6, [sp, #844]	; 0x34c
			det = det + s * (a[0][c] * determinant(b, k - 1));
   105d0:	4798      	blx	r3
   105d2:	1c01      	adds	r1, r0, #0
   105d4:	1c20      	adds	r0, r4, #0
   105d6:	9c04      	ldr	r4, [sp, #16]
   105d8:	47a0      	blx	r4
   105da:	1c31      	adds	r1, r6, #0
   105dc:	47d0      	blx	sl
   105de:	afcc      	add	r7, sp, #816	; 0x330
						b[m][n] = a[i][j];
   105e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			det = det + s * (a[0][c] * determinant(b, k - 1));
   105e2:	4680      	mov	r8, r0
   105e4:	2101      	movs	r1, #1
   105e6:	0038      	movs	r0, r7
   105e8:	4fd2      	ldr	r7, [pc, #840]	; (10934 <cal_axis_misalignments+0x888>)
						b[m][n] = a[i][j];
   105ea:	92cc      	str	r2, [sp, #816]	; 0x330
			det = det + s * (a[0][c] * determinant(b, k - 1));
   105ec:	47b8      	blx	r7
   105ee:	1c01      	adds	r1, r0, #0
   105f0:	9811      	ldr	r0, [sp, #68]	; 0x44
   105f2:	47a0      	blx	r4
   105f4:	4fd0      	ldr	r7, [pc, #832]	; (10938 <cal_axis_misalignments+0x88c>)
   105f6:	1c01      	adds	r1, r0, #0
   105f8:	4640      	mov	r0, r8
   105fa:	47b8      	blx	r7
   105fc:	4659      	mov	r1, fp
   105fe:	47a0      	blx	r4
   10600:	9912      	ldr	r1, [sp, #72]	; 0x48
   10602:	47d0      	blx	sl
			fac[q][p] = pow(-1, q + p) * determinant(b, f - 1);
   10604:	9906      	ldr	r1, [sp, #24]
   10606:	4788      	blx	r1
   10608:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1060a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1060c:	9f07      	ldr	r7, [sp, #28]
   1060e:	47b8      	blx	r7
   10610:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10612:	4790      	blx	r2
   10614:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   10616:	9b02      	ldr	r3, [sp, #8]
   10618:	c201      	stmia	r2!, {r0}
   1061a:	3301      	adds	r3, #1
   1061c:	920d      	str	r2, [sp, #52]	; 0x34
   1061e:	9302      	str	r3, [sp, #8]
		for (p = 0;p < f; p++)
   10620:	2b04      	cmp	r3, #4
   10622:	d000      	beq.n	10626 <cal_axis_misalignments+0x57a>
   10624:	e649      	b.n	102ba <cal_axis_misalignments+0x20e>
   10626:	9b05      	ldr	r3, [sp, #20]
   10628:	4698      	mov	r8, r3
   1062a:	9b04      	ldr	r3, [sp, #16]
   1062c:	469b      	mov	fp, r3
   1062e:	2301      	movs	r3, #1
   10630:	469c      	mov	ip, r3
   10632:	9b08      	ldr	r3, [sp, #32]
   10634:	44e0      	add	r8, ip
   10636:	3318      	adds	r3, #24
   10638:	9308      	str	r3, [sp, #32]
	for (q = 0;q < f; q++)
   1063a:	4643      	mov	r3, r8
   1063c:	2b04      	cmp	r3, #4
   1063e:	d000      	beq.n	10642 <cal_axis_misalignments+0x596>
   10640:	e62e      	b.n	102a0 <cal_axis_misalignments+0x1f4>
			b[i][j] = fac[j][i];
   10642:	9b61      	ldr	r3, [sp, #388]	; 0x184
   10644:	9606      	str	r6, [sp, #24]
   10646:	938a      	str	r3, [sp, #552]	; 0x228
   10648:	9b67      	ldr	r3, [sp, #412]	; 0x19c
   1064a:	aca8      	add	r4, sp, #672	; 0x2a0
   1064c:	938b      	str	r3, [sp, #556]	; 0x22c
   1064e:	9b6d      	ldr	r3, [sp, #436]	; 0x1b4
					b[i][j] = 0;
   10650:	1c37      	adds	r7, r6, #0
			b[i][j] = fac[j][i];
   10652:	938c      	str	r3, [sp, #560]	; 0x230
   10654:	9b73      	ldr	r3, [sp, #460]	; 0x1cc
   10656:	938d      	str	r3, [sp, #564]	; 0x234
   10658:	9b62      	ldr	r3, [sp, #392]	; 0x188
   1065a:	9390      	str	r3, [sp, #576]	; 0x240
   1065c:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   1065e:	9391      	str	r3, [sp, #580]	; 0x244
   10660:	9b6e      	ldr	r3, [sp, #440]	; 0x1b8
   10662:	9392      	str	r3, [sp, #584]	; 0x248
   10664:	9b74      	ldr	r3, [sp, #464]	; 0x1d0
   10666:	9393      	str	r3, [sp, #588]	; 0x24c
   10668:	9b63      	ldr	r3, [sp, #396]	; 0x18c
   1066a:	9396      	str	r3, [sp, #600]	; 0x258
   1066c:	9b69      	ldr	r3, [sp, #420]	; 0x1a4
   1066e:	9397      	str	r3, [sp, #604]	; 0x25c
   10670:	9b6f      	ldr	r3, [sp, #444]	; 0x1bc
   10672:	9398      	str	r3, [sp, #608]	; 0x260
   10674:	9b75      	ldr	r3, [sp, #468]	; 0x1d4
   10676:	9302      	str	r3, [sp, #8]
   10678:	9399      	str	r3, [sp, #612]	; 0x264
   1067a:	2300      	movs	r3, #0
   1067c:	9304      	str	r3, [sp, #16]
   1067e:	23fe      	movs	r3, #254	; 0xfe
   10680:	059b      	lsls	r3, r3, #22
   10682:	9307      	str	r3, [sp, #28]
   10684:	465b      	mov	r3, fp
   10686:	9305      	str	r3, [sp, #20]
   10688:	ab02      	add	r3, sp, #8
   1068a:	7a1b      	ldrb	r3, [r3, #8]
   1068c:	0020      	movs	r0, r4
   1068e:	469c      	mov	ip, r3
	for (i=0;i<4;i++){
   10690:	2301      	movs	r3, #1
   10692:	4698      	mov	r8, r3
   10694:	464d      	mov	r5, r9
					if (i != 0 && j != c)
   10696:	4641      	mov	r1, r8
	for (i=0;i<4;i++){
   10698:	2200      	movs	r2, #0
   1069a:	2300      	movs	r3, #0
   1069c:	9502      	str	r5, [sp, #8]
					b[i][j] = 0;
   1069e:	6007      	str	r7, [r0, #0]
					if (i != 0 && j != c)
   106a0:	2901      	cmp	r1, #1
   106a2:	d04c      	beq.n	1073e <cal_axis_misalignments+0x692>
   106a4:	9904      	ldr	r1, [sp, #16]
   106a6:	2900      	cmp	r1, #0
   106a8:	d100      	bne.n	106ac <cal_axis_misalignments+0x600>
   106aa:	e2e6      	b.n	10c7a <cal_axis_misalignments+0xbce>
						b[m][n] = a[i][j];
   106ac:	0059      	lsls	r1, r3, #1
   106ae:	18ce      	adds	r6, r1, r3
   106b0:	0075      	lsls	r5, r6, #1
   106b2:	9e02      	ldr	r6, [sp, #8]
   106b4:	9508      	str	r5, [sp, #32]
   106b6:	6836      	ldr	r6, [r6, #0]
   106b8:	18ad      	adds	r5, r5, r2
   106ba:	00ad      	lsls	r5, r5, #2
   106bc:	5166      	str	r6, [r4, r5]
						if (n < (k - 2))
   106be:	2a01      	cmp	r2, #1
   106c0:	dc00      	bgt.n	106c4 <cal_axis_misalignments+0x618>
   106c2:	e163      	b.n	1098c <cal_axis_misalignments+0x8e0>
					if (i != 0 && j != c)
   106c4:	4662      	mov	r2, ip
							m++;
   106c6:	3301      	adds	r3, #1
   106c8:	b2db      	uxtb	r3, r3
					b[i][j] = 0;
   106ca:	6047      	str	r7, [r0, #4]
					if (i != 0 && j != c)
   106cc:	2a01      	cmp	r2, #1
   106ce:	d100      	bne.n	106d2 <cal_axis_misalignments+0x626>
   106d0:	e298      	b.n	10c04 <cal_axis_misalignments+0xb58>
						b[m][n] = a[i][j];
   106d2:	9d02      	ldr	r5, [sp, #8]
   106d4:	0059      	lsls	r1, r3, #1
   106d6:	18ca      	adds	r2, r1, r3
   106d8:	686d      	ldr	r5, [r5, #4]
   106da:	00d2      	lsls	r2, r2, #3
   106dc:	50a5      	str	r5, [r4, r2]
   106de:	2201      	movs	r2, #1
					if (i != 0 && j != c)
   106e0:	9e04      	ldr	r6, [sp, #16]
						b[m][n] = a[i][j];
   106e2:	4693      	mov	fp, r2
					b[i][j] = 0;
   106e4:	6087      	str	r7, [r0, #8]
					if (i != 0 && j != c)
   106e6:	2e02      	cmp	r6, #2
   106e8:	d100      	bne.n	106ec <cal_axis_misalignments+0x640>
   106ea:	e2a4      	b.n	10c36 <cal_axis_misalignments+0xb8a>
						b[m][n] = a[i][j];
   106ec:	18ce      	adds	r6, r1, r3
   106ee:	9d02      	ldr	r5, [sp, #8]
   106f0:	0076      	lsls	r6, r6, #1
   106f2:	68ad      	ldr	r5, [r5, #8]
   106f4:	445e      	add	r6, fp
   106f6:	00b6      	lsls	r6, r6, #2
   106f8:	51a5      	str	r5, [r4, r6]
						if (n < (k - 2))
   106fa:	465d      	mov	r5, fp
   106fc:	2d01      	cmp	r5, #1
   106fe:	dc00      	bgt.n	10702 <cal_axis_misalignments+0x656>
   10700:	e288      	b.n	10c14 <cal_axis_misalignments+0xb68>
					if (i != 0 && j != c)
   10702:	9e04      	ldr	r6, [sp, #16]
							m++;
   10704:	3301      	adds	r3, #1
   10706:	b2db      	uxtb	r3, r3
					b[i][j] = 0;
   10708:	60c7      	str	r7, [r0, #12]
					if (i != 0 && j != c)
   1070a:	2e03      	cmp	r6, #3
   1070c:	d100      	bne.n	10710 <cal_axis_misalignments+0x664>
   1070e:	e16e      	b.n	109ee <cal_axis_misalignments+0x942>
						b[m][n] = a[i][j];
   10710:	9902      	ldr	r1, [sp, #8]
   10712:	005a      	lsls	r2, r3, #1
   10714:	18d2      	adds	r2, r2, r3
   10716:	68c9      	ldr	r1, [r1, #12]
   10718:	00d2      	lsls	r2, r2, #3
   1071a:	50a1      	str	r1, [r4, r2]
   1071c:	2201      	movs	r2, #1
			for (i = 0;i < k; i++)
   1071e:	4641      	mov	r1, r8
   10720:	2904      	cmp	r1, #4
   10722:	d100      	bne.n	10726 <cal_axis_misalignments+0x67a>
   10724:	e168      	b.n	109f8 <cal_axis_misalignments+0x94c>
   10726:	4641      	mov	r1, r8
   10728:	3101      	adds	r1, #1
   1072a:	b2c9      	uxtb	r1, r1
   1072c:	4688      	mov	r8, r1
   1072e:	9902      	ldr	r1, [sp, #8]
   10730:	3018      	adds	r0, #24
   10732:	3118      	adds	r1, #24
   10734:	9102      	str	r1, [sp, #8]
					if (i != 0 && j != c)
   10736:	4641      	mov	r1, r8
					b[i][j] = 0;
   10738:	6007      	str	r7, [r0, #0]
					if (i != 0 && j != c)
   1073a:	2901      	cmp	r1, #1
   1073c:	d1b2      	bne.n	106a4 <cal_axis_misalignments+0x5f8>
					b[i][j] = 0;
   1073e:	6067      	str	r7, [r4, #4]
   10740:	60a7      	str	r7, [r4, #8]
   10742:	60e7      	str	r7, [r4, #12]
   10744:	e7ef      	b.n	10726 <cal_axis_misalignments+0x67a>
							m++;
   10746:	3301      	adds	r3, #1
   10748:	b2db      	uxtb	r3, r3
						b[m][n] = source[i][j];
   1074a:	0059      	lsls	r1, r3, #1
   1074c:	18ca      	adds	r2, r1, r3
   1074e:	00d2      	lsls	r2, r2, #3
   10750:	464c      	mov	r4, r9
					if (i != q && j != p)
   10752:	2801      	cmp	r0, #1
   10754:	d100      	bne.n	10758 <cal_axis_misalignments+0x6ac>
   10756:	e113      	b.n	10980 <cal_axis_misalignments+0x8d4>
						b[m][n] = source[i][j];
   10758:	6b64      	ldr	r4, [r4, #52]	; 0x34
   1075a:	2601      	movs	r6, #1
   1075c:	50ac      	str	r4, [r5, r2]
   1075e:	2201      	movs	r2, #1
					if (i != q && j != p)
   10760:	2802      	cmp	r0, #2
   10762:	d100      	bne.n	10766 <cal_axis_misalignments+0x6ba>
   10764:	e663      	b.n	1042e <cal_axis_misalignments+0x382>
						b[m][n] = source[i][j];
   10766:	18cc      	adds	r4, r1, r3
   10768:	0064      	lsls	r4, r4, #1
   1076a:	46a0      	mov	r8, r4
   1076c:	464f      	mov	r7, r9
   1076e:	44b0      	add	r8, r6
   10770:	4644      	mov	r4, r8
   10772:	6bbf      	ldr	r7, [r7, #56]	; 0x38
   10774:	00a4      	lsls	r4, r4, #2
   10776:	512f      	str	r7, [r5, r4]
						if (n < (f - 2))
   10778:	2e01      	cmp	r6, #1
   1077a:	dc00      	bgt.n	1077e <cal_axis_misalignments+0x6d2>
   1077c:	e103      	b.n	10986 <cal_axis_misalignments+0x8da>
					if (i != q && j != p)
   1077e:	4662      	mov	r2, ip
							m++;
   10780:	3301      	adds	r3, #1
   10782:	b2db      	uxtb	r3, r3
					if (i != q && j != p)
   10784:	2a03      	cmp	r2, #3
   10786:	d100      	bne.n	1078a <cal_axis_misalignments+0x6de>
   10788:	e0ec      	b.n	10964 <cal_axis_misalignments+0x8b8>
						b[m][n] = source[i][j];
   1078a:	464a      	mov	r2, r9
   1078c:	0059      	lsls	r1, r3, #1
   1078e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
   10790:	18c9      	adds	r1, r1, r3
   10792:	00c9      	lsls	r1, r1, #3
   10794:	506a      	str	r2, [r5, r1]
   10796:	2201      	movs	r2, #1
   10798:	e657      	b.n	1044a <cal_axis_misalignments+0x39e>
							m++;
   1079a:	3301      	adds	r3, #1
   1079c:	b2db      	uxtb	r3, r3
						b[m][n] = source[i][j];
   1079e:	0059      	lsls	r1, r3, #1
   107a0:	18ca      	adds	r2, r1, r3
   107a2:	00d2      	lsls	r2, r2, #3
   107a4:	464c      	mov	r4, r9
					if (i != q && j != p)
   107a6:	2801      	cmp	r0, #1
   107a8:	d100      	bne.n	107ac <cal_axis_misalignments+0x700>
   107aa:	e2b9      	b.n	10d20 <cal_axis_misalignments+0xc74>
						b[m][n] = source[i][j];
   107ac:	69e4      	ldr	r4, [r4, #28]
   107ae:	2601      	movs	r6, #1
   107b0:	50ac      	str	r4, [r5, r2]
   107b2:	2201      	movs	r2, #1
					if (i != q && j != p)
   107b4:	2802      	cmp	r0, #2
   107b6:	d100      	bne.n	107ba <cal_axis_misalignments+0x70e>
   107b8:	e5eb      	b.n	10392 <cal_axis_misalignments+0x2e6>
						b[m][n] = source[i][j];
   107ba:	18cc      	adds	r4, r1, r3
   107bc:	0064      	lsls	r4, r4, #1
   107be:	46a0      	mov	r8, r4
   107c0:	464f      	mov	r7, r9
   107c2:	44b0      	add	r8, r6
   107c4:	4644      	mov	r4, r8
   107c6:	6a3f      	ldr	r7, [r7, #32]
   107c8:	00a4      	lsls	r4, r4, #2
   107ca:	512f      	str	r7, [r5, r4]
						if (n < (f - 2))
   107cc:	2e01      	cmp	r6, #1
   107ce:	dc00      	bgt.n	107d2 <cal_axis_misalignments+0x726>
   107d0:	e2a9      	b.n	10d26 <cal_axis_misalignments+0xc7a>
					if (i != q && j != p)
   107d2:	4662      	mov	r2, ip
							m++;
   107d4:	3301      	adds	r3, #1
   107d6:	b2db      	uxtb	r3, r3
					if (i != q && j != p)
   107d8:	2a03      	cmp	r2, #3
   107da:	d100      	bne.n	107de <cal_axis_misalignments+0x732>
   107dc:	e296      	b.n	10d0c <cal_axis_misalignments+0xc60>
						b[m][n] = source[i][j];
   107de:	464c      	mov	r4, r9
   107e0:	0059      	lsls	r1, r3, #1
   107e2:	18ca      	adds	r2, r1, r3
   107e4:	6a64      	ldr	r4, [r4, #36]	; 0x24
   107e6:	00d2      	lsls	r2, r2, #3
   107e8:	50ac      	str	r4, [r5, r2]
   107ea:	2201      	movs	r2, #1
   107ec:	e5e1      	b.n	103b2 <cal_axis_misalignments+0x306>
   107ee:	464b      	mov	r3, r9
   107f0:	689b      	ldr	r3, [r3, #8]
   107f2:	606b      	str	r3, [r5, #4]
					if (i != q && j != p)
   107f4:	9b02      	ldr	r3, [sp, #8]
   107f6:	2202      	movs	r2, #2
   107f8:	2b03      	cmp	r3, #3
   107fa:	d100      	bne.n	107fe <cal_axis_misalignments+0x752>
   107fc:	e269      	b.n	10cd2 <cal_axis_misalignments+0xc26>
						b[m][n] = source[i][j];
   107fe:	464b      	mov	r3, r9
   10800:	68db      	ldr	r3, [r3, #12]
   10802:	60ab      	str	r3, [r5, #8]
					if (i != q && j != p)
   10804:	9910      	ldr	r1, [sp, #64]	; 0x40
							n = 0;
   10806:	2200      	movs	r2, #0
							m++;
   10808:	2301      	movs	r3, #1
					if (i != q && j != p)
   1080a:	2901      	cmp	r1, #1
   1080c:	d000      	beq.n	10810 <cal_axis_misalignments+0x764>
   1080e:	e583      	b.n	10318 <cal_axis_misalignments+0x26c>
   10810:	9c02      	ldr	r4, [sp, #8]
   10812:	0059      	lsls	r1, r3, #1
   10814:	4684      	mov	ip, r0
   10816:	2c00      	cmp	r4, #0
   10818:	d000      	beq.n	1081c <cal_axis_misalignments+0x770>
   1081a:	e5d2      	b.n	103c2 <cal_axis_misalignments+0x316>
						b[m][n] = source[i][j];
   1081c:	464c      	mov	r4, r9
   1081e:	18ce      	adds	r6, r1, r3
   10820:	0076      	lsls	r6, r6, #1
   10822:	18b6      	adds	r6, r6, r2
   10824:	6b64      	ldr	r4, [r4, #52]	; 0x34
   10826:	00b6      	lsls	r6, r6, #2
   10828:	51ac      	str	r4, [r5, r6]
						if (n < (f - 2))
   1082a:	2a01      	cmp	r2, #1
   1082c:	dc00      	bgt.n	10830 <cal_axis_misalignments+0x784>
   1082e:	e1f4      	b.n	10c1a <cal_axis_misalignments+0xb6e>
						b[m][n] = source[i][j];
   10830:	464c      	mov	r4, r9
							m++;
   10832:	3301      	adds	r3, #1
   10834:	b2db      	uxtb	r3, r3
						b[m][n] = source[i][j];
   10836:	0059      	lsls	r1, r3, #1
   10838:	18ca      	adds	r2, r1, r3
   1083a:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   1083c:	00d2      	lsls	r2, r2, #3
   1083e:	50ac      	str	r4, [r5, r2]
   10840:	2201      	movs	r2, #1
   10842:	e5f3      	b.n	1042c <cal_axis_misalignments+0x380>
   10844:	464e      	mov	r6, r9
   10846:	18c8      	adds	r0, r1, r3
   10848:	0040      	lsls	r0, r0, #1
   1084a:	1880      	adds	r0, r0, r2
   1084c:	6cf6      	ldr	r6, [r6, #76]	; 0x4c
   1084e:	0080      	lsls	r0, r0, #2
   10850:	502e      	str	r6, [r5, r0]
						if (n < (f - 2))
   10852:	2a01      	cmp	r2, #1
   10854:	dd4e      	ble.n	108f4 <cal_axis_misalignments+0x848>
						b[m][n] = source[i][j];
   10856:	4648      	mov	r0, r9
   10858:	2601      	movs	r6, #1
							m++;
   1085a:	3301      	adds	r3, #1
   1085c:	b2db      	uxtb	r3, r3
						b[m][n] = source[i][j];
   1085e:	0059      	lsls	r1, r3, #1
   10860:	18ca      	adds	r2, r1, r3
   10862:	6d00      	ldr	r0, [r0, #80]	; 0x50
   10864:	00d2      	lsls	r2, r2, #3
   10866:	50a8      	str	r0, [r5, r2]
   10868:	18cb      	adds	r3, r1, r3
   1086a:	005b      	lsls	r3, r3, #1
   1086c:	199e      	adds	r6, r3, r6
   1086e:	464b      	mov	r3, r9
   10870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   10872:	00b6      	lsls	r6, r6, #2
   10874:	51ab      	str	r3, [r5, r6]
   10876:	e622      	b.n	104be <cal_axis_misalignments+0x412>
						n++;
   10878:	466f      	mov	r7, sp
   1087a:	1c56      	adds	r6, r2, #1
   1087c:	71fe      	strb	r6, [r7, #7]
   1087e:	2624      	movs	r6, #36	; 0x24
   10880:	af02      	add	r7, sp, #8
   10882:	19bf      	adds	r7, r7, r6
   10884:	466e      	mov	r6, sp
   10886:	79f6      	ldrb	r6, [r6, #7]
   10888:	703e      	strb	r6, [r7, #0]
   1088a:	2724      	movs	r7, #36	; 0x24
   1088c:	ae02      	add	r6, sp, #8
   1088e:	19f6      	adds	r6, r6, r7
   10890:	7836      	ldrb	r6, [r6, #0]
   10892:	46b4      	mov	ip, r6
						b[m][n] = source[i][j];
   10894:	4464      	add	r4, ip
   10896:	00a6      	lsls	r6, r4, #2
					if (i != q && j != p)
   10898:	2801      	cmp	r0, #1
   1089a:	d022      	beq.n	108e2 <cal_axis_misalignments+0x836>
						b[m][n] = source[i][j];
   1089c:	464f      	mov	r7, r9
   1089e:	6cff      	ldr	r7, [r7, #76]	; 0x4c
   108a0:	51af      	str	r7, [r5, r6]
						if (n < (f - 2))
   108a2:	4666      	mov	r6, ip
   108a4:	2e01      	cmp	r6, #1
   108a6:	d918      	bls.n	108da <cal_axis_misalignments+0x82e>
							m++;
   108a8:	3301      	adds	r3, #1
   108aa:	b2db      	uxtb	r3, r3
							n = 0;
   108ac:	2600      	movs	r6, #0
   108ae:	0059      	lsls	r1, r3, #1
					if (i != q && j != p)
   108b0:	2802      	cmp	r0, #2
   108b2:	d0d9      	beq.n	10868 <cal_axis_misalignments+0x7bc>
						b[m][n] = source[i][j];
   108b4:	4648      	mov	r0, r9
   108b6:	2601      	movs	r6, #1
   108b8:	0059      	lsls	r1, r3, #1
   108ba:	18ca      	adds	r2, r1, r3
   108bc:	6d00      	ldr	r0, [r0, #80]	; 0x50
   108be:	00d2      	lsls	r2, r2, #3
   108c0:	50a8      	str	r0, [r5, r2]
					if (i != q && j != p)
   108c2:	4642      	mov	r2, r8
   108c4:	2a03      	cmp	r2, #3
   108c6:	d100      	bne.n	108ca <cal_axis_misalignments+0x81e>
   108c8:	e5f9      	b.n	104be <cal_axis_misalignments+0x412>
						b[m][n] = source[i][j];
   108ca:	18cb      	adds	r3, r1, r3
   108cc:	005b      	lsls	r3, r3, #1
   108ce:	199e      	adds	r6, r3, r6
   108d0:	464b      	mov	r3, r9
   108d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   108d4:	00b6      	lsls	r6, r6, #2
   108d6:	51ab      	str	r3, [r5, r6]
   108d8:	e5f1      	b.n	104be <cal_axis_misalignments+0x412>
   108da:	3202      	adds	r2, #2
   108dc:	b2d2      	uxtb	r2, r2
   108de:	0016      	movs	r6, r2
   108e0:	e5d4      	b.n	1048c <cal_axis_misalignments+0x3e0>
   108e2:	4648      	mov	r0, r9
   108e4:	6d00      	ldr	r0, [r0, #80]	; 0x50
   108e6:	51a8      	str	r0, [r5, r6]
						if (n < (f - 2))
   108e8:	4660      	mov	r0, ip
   108ea:	2801      	cmp	r0, #1
   108ec:	dd08      	ble.n	10900 <cal_axis_misalignments+0x854>
							m++;
   108ee:	3301      	adds	r3, #1
   108f0:	b2db      	uxtb	r3, r3
   108f2:	e5de      	b.n	104b2 <cal_axis_misalignments+0x406>
						if (n < (f - 2))
   108f4:	2000      	movs	r0, #0
   108f6:	3201      	adds	r2, #1
   108f8:	b2d2      	uxtb	r2, r2
   108fa:	0016      	movs	r6, r2
   108fc:	4680      	mov	r8, r0
   108fe:	e5c8      	b.n	10492 <cal_axis_misalignments+0x3e6>
   10900:	1c96      	adds	r6, r2, #2
   10902:	b2f6      	uxtb	r6, r6
   10904:	e7b0      	b.n	10868 <cal_axis_misalignments+0x7bc>
							n = 0;
   10906:	2200      	movs	r2, #0
   10908:	0059      	lsls	r1, r3, #1
   1090a:	e58f      	b.n	1042c <cal_axis_misalignments+0x380>
   1090c:	3201      	adds	r2, #1
   1090e:	b2d2      	uxtb	r2, r2
   10910:	e54f      	b.n	103b2 <cal_axis_misalignments+0x306>
   10912:	3202      	adds	r2, #2
   10914:	b2d2      	uxtb	r2, r2
   10916:	0016      	movs	r6, r2
   10918:	e74c      	b.n	107b4 <cal_axis_misalignments+0x708>
						b[m][n] = source[i][j];
   1091a:	6a24      	ldr	r4, [r4, #32]
   1091c:	51ac      	str	r4, [r5, r6]
						if (n < (f - 2))
   1091e:	4644      	mov	r4, r8
   10920:	2c01      	cmp	r4, #1
   10922:	d100      	bne.n	10926 <cal_axis_misalignments+0x87a>
   10924:	e194      	b.n	10c50 <cal_axis_misalignments+0xba4>
							m++;
   10926:	3301      	adds	r3, #1
   10928:	b2db      	uxtb	r3, r3
   1092a:	e758      	b.n	107de <cal_axis_misalignments+0x732>
   1092c:	3202      	adds	r2, #2
   1092e:	b2d2      	uxtb	r2, r2
   10930:	0016      	movs	r6, r2
   10932:	e715      	b.n	10760 <cal_axis_misalignments+0x6b4>
   10934:	0000efd9 	.word	0x0000efd9
   10938:	0001cde9 	.word	0x0001cde9
						b[m][n] = source[i][j];
   1093c:	464c      	mov	r4, r9
   1093e:	0059      	lsls	r1, r3, #1
   10940:	18ce      	adds	r6, r1, r3
   10942:	0076      	lsls	r6, r6, #1
   10944:	18b6      	adds	r6, r6, r2
   10946:	69e4      	ldr	r4, [r4, #28]
   10948:	00b6      	lsls	r6, r6, #2
   1094a:	51ac      	str	r4, [r5, r6]
						if (n < (f - 2))
   1094c:	2a01      	cmp	r2, #1
   1094e:	d911      	bls.n	10974 <cal_axis_misalignments+0x8c8>
						b[m][n] = source[i][j];
   10950:	464c      	mov	r4, r9
							m++;
   10952:	3301      	adds	r3, #1
   10954:	b2db      	uxtb	r3, r3
						b[m][n] = source[i][j];
   10956:	0059      	lsls	r1, r3, #1
   10958:	18ca      	adds	r2, r1, r3
   1095a:	6a24      	ldr	r4, [r4, #32]
   1095c:	00d2      	lsls	r2, r2, #3
   1095e:	50ac      	str	r4, [r5, r2]
   10960:	2201      	movs	r2, #1
   10962:	e515      	b.n	10390 <cal_axis_misalignments+0x2e4>
							n = 0;
   10964:	2200      	movs	r2, #0
					if (i != q && j != p)
   10966:	9905      	ldr	r1, [sp, #20]
   10968:	2903      	cmp	r1, #3
   1096a:	d100      	bne.n	1096e <cal_axis_misalignments+0x8c2>
   1096c:	e5a7      	b.n	104be <cal_axis_misalignments+0x412>
   1096e:	4680      	mov	r8, r0
   10970:	0059      	lsls	r1, r3, #1
   10972:	e573      	b.n	1045c <cal_axis_misalignments+0x3b0>
						if (n < (f - 2))
   10974:	2400      	movs	r4, #0
   10976:	3201      	adds	r2, #1
   10978:	b2d2      	uxtb	r2, r2
   1097a:	0016      	movs	r6, r2
   1097c:	46a4      	mov	ip, r4
   1097e:	e71c      	b.n	107ba <cal_axis_misalignments+0x70e>
						b[m][n] = source[i][j];
   10980:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   10982:	50ac      	str	r4, [r5, r2]
							n = 0;
   10984:	2200      	movs	r2, #0
   10986:	3201      	adds	r2, #1
   10988:	b2d2      	uxtb	r2, r2
   1098a:	e54b      	b.n	10424 <cal_axis_misalignments+0x378>
					if (i != 0 && j != c)
   1098c:	4665      	mov	r5, ip
						n++;
   1098e:	3201      	adds	r2, #1
   10990:	b2d2      	uxtb	r2, r2
					b[i][j] = 0;
   10992:	6047      	str	r7, [r0, #4]
					if (i != 0 && j != c)
   10994:	2d01      	cmp	r5, #1
   10996:	d100      	bne.n	1099a <cal_axis_misalignments+0x8ee>
   10998:	e162      	b.n	10c60 <cal_axis_misalignments+0xbb4>
						b[m][n] = a[i][j];
   1099a:	9d08      	ldr	r5, [sp, #32]
   1099c:	18ae      	adds	r6, r5, r2
   1099e:	9d02      	ldr	r5, [sp, #8]
   109a0:	00b6      	lsls	r6, r6, #2
   109a2:	686d      	ldr	r5, [r5, #4]
   109a4:	51a5      	str	r5, [r4, r6]
						if (n < (k - 2))
   109a6:	2a01      	cmp	r2, #1
   109a8:	d800      	bhi.n	109ac <cal_axis_misalignments+0x900>
   109aa:	e13c      	b.n	10c26 <cal_axis_misalignments+0xb7a>
					if (i != 0 && j != c)
   109ac:	4662      	mov	r2, ip
							m++;
   109ae:	3301      	adds	r3, #1
   109b0:	b2db      	uxtb	r3, r3
					b[i][j] = 0;
   109b2:	6087      	str	r7, [r0, #8]
					if (i != 0 && j != c)
   109b4:	2a02      	cmp	r2, #2
   109b6:	d100      	bne.n	109ba <cal_axis_misalignments+0x90e>
   109b8:	e120      	b.n	10bfc <cal_axis_misalignments+0xb50>
						b[m][n] = a[i][j];
   109ba:	9d02      	ldr	r5, [sp, #8]
   109bc:	0059      	lsls	r1, r3, #1
   109be:	18ca      	adds	r2, r1, r3
   109c0:	68ad      	ldr	r5, [r5, #8]
   109c2:	00d2      	lsls	r2, r2, #3
   109c4:	50a5      	str	r5, [r4, r2]
   109c6:	2201      	movs	r2, #1
					if (i != 0 && j != c)
   109c8:	9d04      	ldr	r5, [sp, #16]
					b[i][j] = 0;
   109ca:	60c7      	str	r7, [r0, #12]
					if (i != 0 && j != c)
   109cc:	2d03      	cmp	r5, #3
   109ce:	d100      	bne.n	109d2 <cal_axis_misalignments+0x926>
   109d0:	e6a5      	b.n	1071e <cal_axis_misalignments+0x672>
   109d2:	4693      	mov	fp, r2
						b[m][n] = a[i][j];
   109d4:	18c9      	adds	r1, r1, r3
   109d6:	9d02      	ldr	r5, [sp, #8]
   109d8:	0049      	lsls	r1, r1, #1
   109da:	4459      	add	r1, fp
   109dc:	68ed      	ldr	r5, [r5, #12]
   109de:	0089      	lsls	r1, r1, #2
   109e0:	5065      	str	r5, [r4, r1]
						if (n < (k - 2))
   109e2:	4659      	mov	r1, fp
   109e4:	2901      	cmp	r1, #1
   109e6:	dc00      	bgt.n	109ea <cal_axis_misalignments+0x93e>
   109e8:	e127      	b.n	10c3a <cal_axis_misalignments+0xb8e>
							m++;
   109ea:	3301      	adds	r3, #1
   109ec:	b2db      	uxtb	r3, r3
			for (i = 0;i < k; i++)
   109ee:	4641      	mov	r1, r8
							n = 0;
   109f0:	2200      	movs	r2, #0
			for (i = 0;i < k; i++)
   109f2:	2904      	cmp	r1, #4
   109f4:	d000      	beq.n	109f8 <cal_axis_misalignments+0x94c>
   109f6:	e696      	b.n	10726 <cal_axis_misalignments+0x67a>
						b[m][n] = a[i][j];
   109f8:	6a25      	ldr	r5, [r4, #32]
			det = det + s * (a[0][c] * determinant(b, k - 1));
   109fa:	464a      	mov	r2, r9
						b[m][n] = a[i][j];
   109fc:	46a8      	mov	r8, r5
			det = det + s * (a[0][c] * determinant(b, k - 1));
   109fe:	9b04      	ldr	r3, [sp, #16]
						b[m][n] = a[i][j];
   10a00:	69a0      	ldr	r0, [r4, #24]
			det = det + s * (a[0][c] * determinant(b, k - 1));
   10a02:	009b      	lsls	r3, r3, #2
   10a04:	58d2      	ldr	r2, [r2, r3]
						b[m][n] = a[i][j];
   10a06:	4643      	mov	r3, r8
   10a08:	93cd      	str	r3, [sp, #820]	; 0x334
			det = det + s * (a[0][c] * determinant(b, k - 1));
   10a0a:	6823      	ldr	r3, [r4, #0]
						b[m][n] = a[i][j];
   10a0c:	6b26      	ldr	r6, [r4, #48]	; 0x30
			det = det + s * (a[0][c] * determinant(b, k - 1));
   10a0e:	469b      	mov	fp, r3
   10a10:	abcc      	add	r3, sp, #816	; 0x330
						b[m][n] = a[i][j];
   10a12:	9002      	str	r0, [sp, #8]
			det = det + s * (a[0][c] * determinant(b, k - 1));
   10a14:	0018      	movs	r0, r3
   10a16:	4bc6      	ldr	r3, [pc, #792]	; (10d30 <cal_axis_misalignments+0xc84>)
						b[m][n] = a[i][j];
   10a18:	6b65      	ldr	r5, [r4, #52]	; 0x34
			det = det + s * (a[0][c] * determinant(b, k - 1));
   10a1a:	920a      	str	r2, [sp, #40]	; 0x28
						b[m][n] = a[i][j];
   10a1c:	9608      	str	r6, [sp, #32]
   10a1e:	69e2      	ldr	r2, [r4, #28]
   10a20:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			det = det + s * (a[0][c] * determinant(b, k - 1));
   10a22:	469c      	mov	ip, r3
   10a24:	3902      	subs	r1, #2
						b[m][n] = a[i][j];
   10a26:	920b      	str	r2, [sp, #44]	; 0x2c
   10a28:	92cc      	str	r2, [sp, #816]	; 0x330
   10a2a:	95d2      	str	r5, [sp, #840]	; 0x348
   10a2c:	96d3      	str	r6, [sp, #844]	; 0x34c
					b[i][j] = 0;
   10a2e:	97ce      	str	r7, [sp, #824]	; 0x338
   10a30:	97d4      	str	r7, [sp, #848]	; 0x350
   10a32:	97d8      	str	r7, [sp, #864]	; 0x360
   10a34:	97d9      	str	r7, [sp, #868]	; 0x364
   10a36:	97da      	str	r7, [sp, #872]	; 0x368
			det = det + s * (a[0][c] * determinant(b, k - 1));
   10a38:	47e0      	blx	ip
   10a3a:	9b05      	ldr	r3, [sp, #20]
   10a3c:	4659      	mov	r1, fp
   10a3e:	469c      	mov	ip, r3
   10a40:	47e0      	blx	ip
   10a42:	2100      	movs	r1, #0
   10a44:	47d0      	blx	sl
						b[m][n] = a[i][j];
   10a46:	4641      	mov	r1, r8
			det = det + s * (a[0][c] * determinant(b, k - 1));
   10a48:	4ab9      	ldr	r2, [pc, #740]	; (10d30 <cal_axis_misalignments+0xc84>)
   10a4a:	4683      	mov	fp, r0
						b[m][n] = a[i][j];
   10a4c:	91cd      	str	r1, [sp, #820]	; 0x334
   10a4e:	9802      	ldr	r0, [sp, #8]
   10a50:	9908      	ldr	r1, [sp, #32]
   10a52:	96d3      	str	r6, [sp, #844]	; 0x34c
			det = det + s * (a[0][c] * determinant(b, k - 1));
   10a54:	6866      	ldr	r6, [r4, #4]
   10a56:	4694      	mov	ip, r2
						b[m][n] = a[i][j];
   10a58:	90cc      	str	r0, [sp, #816]	; 0x330
   10a5a:	91d2      	str	r1, [sp, #840]	; 0x348
			det = det + s * (a[0][c] * determinant(b, k - 1));
   10a5c:	a8cc      	add	r0, sp, #816	; 0x330
   10a5e:	2102      	movs	r1, #2
					b[i][j] = 0;
   10a60:	97ce      	str	r7, [sp, #824]	; 0x338
   10a62:	97d4      	str	r7, [sp, #848]	; 0x350
   10a64:	97d8      	str	r7, [sp, #864]	; 0x360
   10a66:	97d9      	str	r7, [sp, #868]	; 0x364
   10a68:	97da      	str	r7, [sp, #872]	; 0x368
			det = det + s * (a[0][c] * determinant(b, k - 1));
   10a6a:	47e0      	blx	ip
   10a6c:	9b05      	ldr	r3, [sp, #20]
   10a6e:	1c31      	adds	r1, r6, #0
   10a70:	4798      	blx	r3
   10a72:	4eb0      	ldr	r6, [pc, #704]	; (10d34 <cal_axis_misalignments+0xc88>)
   10a74:	1c01      	adds	r1, r0, #0
   10a76:	4658      	mov	r0, fp
   10a78:	47b0      	blx	r6
						b[m][n] = a[i][j];
   10a7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
			det = det + s * (a[0][c] * determinant(b, k - 1));
   10a7c:	1c06      	adds	r6, r0, #0
						b[m][n] = a[i][j];
   10a7e:	92cd      	str	r2, [sp, #820]	; 0x334
   10a80:	9802      	ldr	r0, [sp, #8]
   10a82:	9a08      	ldr	r2, [sp, #32]
   10a84:	90cc      	str	r0, [sp, #816]	; 0x330
   10a86:	92d2      	str	r2, [sp, #840]	; 0x348
					b[i][j] = 0;
   10a88:	97ce      	str	r7, [sp, #824]	; 0x338
   10a8a:	97d4      	str	r7, [sp, #848]	; 0x350
   10a8c:	97d8      	str	r7, [sp, #864]	; 0x360
   10a8e:	97d9      	str	r7, [sp, #868]	; 0x364
			det = det + s * (a[0][c] * determinant(b, k - 1));
   10a90:	68a0      	ldr	r0, [r4, #8]
   10a92:	4aa7      	ldr	r2, [pc, #668]	; (10d30 <cal_axis_misalignments+0xc84>)
   10a94:	4680      	mov	r8, r0
   10a96:	2102      	movs	r1, #2
   10a98:	a8cc      	add	r0, sp, #816	; 0x330
						b[m][n] = a[i][j];
   10a9a:	95d3      	str	r5, [sp, #844]	; 0x34c
					b[i][j] = 0;
   10a9c:	97da      	str	r7, [sp, #872]	; 0x368
			det = det + s * (a[0][c] * determinant(b, k - 1));
   10a9e:	4790      	blx	r2
   10aa0:	9d05      	ldr	r5, [sp, #20]
   10aa2:	4641      	mov	r1, r8
   10aa4:	47a8      	blx	r5
   10aa6:	1c31      	adds	r1, r6, #0
   10aa8:	47d0      	blx	sl
   10aaa:	990a      	ldr	r1, [sp, #40]	; 0x28
   10aac:	47a8      	blx	r5
   10aae:	9e07      	ldr	r6, [sp, #28]
   10ab0:	1c31      	adds	r1, r6, #0
   10ab2:	47a8      	blx	r5
   10ab4:	1c01      	adds	r1, r0, #0
   10ab6:	9806      	ldr	r0, [sp, #24]
   10ab8:	47d0      	blx	sl
			s = -1 * s;
   10aba:	2180      	movs	r1, #128	; 0x80
   10abc:	0609      	lsls	r1, r1, #24
   10abe:	0032      	movs	r2, r6
   10ac0:	468c      	mov	ip, r1
   10ac2:	9b04      	ldr	r3, [sp, #16]
   10ac4:	4462      	add	r2, ip
   10ac6:	3301      	adds	r3, #1
			det = det + s * (a[0][c] * determinant(b, k - 1));
   10ac8:	9006      	str	r0, [sp, #24]
			s = -1 * s;
   10aca:	9207      	str	r2, [sp, #28]
   10acc:	9304      	str	r3, [sp, #16]
		for (c = 0; c < k; c++)
   10ace:	2b04      	cmp	r3, #4
   10ad0:	d000      	beq.n	10ad4 <cal_axis_misalignments+0xa28>
   10ad2:	e5d9      	b.n	10688 <cal_axis_misalignments+0x5dc>
   10ad4:	46ab      	mov	fp, r5
			dest[i][j] = b[i][j] / d;
   10ad6:	9d06      	ldr	r5, [sp, #24]
   10ad8:	4c97      	ldr	r4, [pc, #604]	; (10d38 <cal_axis_misalignments+0xc8c>)
   10ada:	1c29      	adds	r1, r5, #0
   10adc:	988a      	ldr	r0, [sp, #552]	; 0x228
   10ade:	47a0      	blx	r4
   10ae0:	1c29      	adds	r1, r5, #0
   10ae2:	1c07      	adds	r7, r0, #0
   10ae4:	988b      	ldr	r0, [sp, #556]	; 0x22c
   10ae6:	47a0      	blx	r4
   10ae8:	1c29      	adds	r1, r5, #0
   10aea:	9002      	str	r0, [sp, #8]
   10aec:	988c      	ldr	r0, [sp, #560]	; 0x230
   10aee:	47a0      	blx	r4
   10af0:	1c29      	adds	r1, r5, #0
   10af2:	9004      	str	r0, [sp, #16]
   10af4:	988d      	ldr	r0, [sp, #564]	; 0x234
   10af6:	47a0      	blx	r4
   10af8:	1c29      	adds	r1, r5, #0
   10afa:	9005      	str	r0, [sp, #20]
   10afc:	9890      	ldr	r0, [sp, #576]	; 0x240
   10afe:	47a0      	blx	r4
   10b00:	1c29      	adds	r1, r5, #0
   10b02:	9006      	str	r0, [sp, #24]
   10b04:	9891      	ldr	r0, [sp, #580]	; 0x244
   10b06:	47a0      	blx	r4
   10b08:	1c29      	adds	r1, r5, #0
   10b0a:	9007      	str	r0, [sp, #28]
   10b0c:	9892      	ldr	r0, [sp, #584]	; 0x248
   10b0e:	47a0      	blx	r4
   10b10:	1c29      	adds	r1, r5, #0
   10b12:	4681      	mov	r9, r0
   10b14:	9893      	ldr	r0, [sp, #588]	; 0x24c
   10b16:	47a0      	blx	r4
   10b18:	1c29      	adds	r1, r5, #0
   10b1a:	9008      	str	r0, [sp, #32]
   10b1c:	9896      	ldr	r0, [sp, #600]	; 0x258
   10b1e:	47a0      	blx	r4
   10b20:	1c29      	adds	r1, r5, #0
   10b22:	900a      	str	r0, [sp, #40]	; 0x28
   10b24:	9897      	ldr	r0, [sp, #604]	; 0x25c
   10b26:	47a0      	blx	r4
   10b28:	1c29      	adds	r1, r5, #0
   10b2a:	900b      	str	r0, [sp, #44]	; 0x2c
   10b2c:	9898      	ldr	r0, [sp, #608]	; 0x260
   10b2e:	47a0      	blx	r4
   10b30:	1c29      	adds	r1, r5, #0
   10b32:	900c      	str	r0, [sp, #48]	; 0x30
   10b34:	9899      	ldr	r0, [sp, #612]	; 0x264
   10b36:	47a0      	blx	r4
   10b38:	9b14      	ldr	r3, [sp, #80]	; 0x50
   10b3a:	900d      	str	r0, [sp, #52]	; 0x34
			Res[i] = Res[i]+DtD[i][j]*DtV[j];
   10b3c:	1c19      	adds	r1, r3, #0
   10b3e:	1c38      	adds	r0, r7, #0
   10b40:	4698      	mov	r8, r3
   10b42:	47d8      	blx	fp
   10b44:	2100      	movs	r1, #0
   10b46:	47d0      	blx	sl
   10b48:	9e15      	ldr	r6, [sp, #84]	; 0x54
   10b4a:	9d16      	ldr	r5, [sp, #88]	; 0x58
   10b4c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   10b4e:	1c07      	adds	r7, r0, #0
   10b50:	9902      	ldr	r1, [sp, #8]
   10b52:	1c30      	adds	r0, r6, #0
   10b54:	47d8      	blx	fp
   10b56:	1c01      	adds	r1, r0, #0
   10b58:	1c38      	adds	r0, r7, #0
   10b5a:	47d0      	blx	sl
   10b5c:	1c29      	adds	r1, r5, #0
   10b5e:	1c07      	adds	r7, r0, #0
   10b60:	9804      	ldr	r0, [sp, #16]
   10b62:	47d8      	blx	fp
   10b64:	1c01      	adds	r1, r0, #0
   10b66:	1c38      	adds	r0, r7, #0
   10b68:	47d0      	blx	sl
   10b6a:	9905      	ldr	r1, [sp, #20]
   10b6c:	1c07      	adds	r7, r0, #0
   10b6e:	1c20      	adds	r0, r4, #0
   10b70:	47d8      	blx	fp
   10b72:	1c01      	adds	r1, r0, #0
   10b74:	1c38      	adds	r0, r7, #0
   10b76:	47d0      	blx	sl
	cal_struct->axmYX = Res[1];
   10b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
			Res[i] = Res[i]+DtD[i][j]*DtV[j];
   10b7a:	4641      	mov	r1, r8
	cal_struct->axmYX = Res[1];
   10b7c:	61d8      	str	r0, [r3, #28]
			Res[i] = Res[i]+DtD[i][j]*DtV[j];
   10b7e:	9806      	ldr	r0, [sp, #24]
   10b80:	47d8      	blx	fp
   10b82:	2100      	movs	r1, #0
   10b84:	47d0      	blx	sl
   10b86:	9907      	ldr	r1, [sp, #28]
   10b88:	1c07      	adds	r7, r0, #0
   10b8a:	1c30      	adds	r0, r6, #0
   10b8c:	47d8      	blx	fp
   10b8e:	1c01      	adds	r1, r0, #0
   10b90:	1c38      	adds	r0, r7, #0
   10b92:	47d0      	blx	sl
   10b94:	1c29      	adds	r1, r5, #0
   10b96:	1c07      	adds	r7, r0, #0
   10b98:	4648      	mov	r0, r9
   10b9a:	47d8      	blx	fp
   10b9c:	1c01      	adds	r1, r0, #0
   10b9e:	1c38      	adds	r0, r7, #0
   10ba0:	47d0      	blx	sl
   10ba2:	9908      	ldr	r1, [sp, #32]
   10ba4:	1c07      	adds	r7, r0, #0
   10ba6:	1c20      	adds	r0, r4, #0
   10ba8:	47d8      	blx	fp
   10baa:	1c01      	adds	r1, r0, #0
   10bac:	1c38      	adds	r0, r7, #0
   10bae:	47d0      	blx	sl
	cal_struct->axmZY = Res[2];
   10bb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
			Res[i] = Res[i]+DtD[i][j]*DtV[j];
   10bb2:	4641      	mov	r1, r8
	cal_struct->axmZY = Res[2];
   10bb4:	6218      	str	r0, [r3, #32]
			Res[i] = Res[i]+DtD[i][j]*DtV[j];
   10bb6:	980a      	ldr	r0, [sp, #40]	; 0x28
   10bb8:	47d8      	blx	fp
   10bba:	2100      	movs	r1, #0
   10bbc:	47d0      	blx	sl
   10bbe:	1c31      	adds	r1, r6, #0
   10bc0:	1c07      	adds	r7, r0, #0
   10bc2:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10bc4:	47d8      	blx	fp
   10bc6:	1c01      	adds	r1, r0, #0
   10bc8:	1c38      	adds	r0, r7, #0
   10bca:	47d0      	blx	sl
   10bcc:	1c29      	adds	r1, r5, #0
   10bce:	1c06      	adds	r6, r0, #0
   10bd0:	980c      	ldr	r0, [sp, #48]	; 0x30
   10bd2:	47d8      	blx	fp
   10bd4:	1c01      	adds	r1, r0, #0
   10bd6:	1c30      	adds	r0, r6, #0
   10bd8:	47d0      	blx	sl
   10bda:	990d      	ldr	r1, [sp, #52]	; 0x34
   10bdc:	1c05      	adds	r5, r0, #0
   10bde:	1c20      	adds	r0, r4, #0
   10be0:	47d8      	blx	fp
   10be2:	1c01      	adds	r1, r0, #0
   10be4:	1c28      	adds	r0, r5, #0
   10be6:	47d0      	blx	sl
	cal_struct->axmZX = Res[3];
   10be8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10bea:	6258      	str	r0, [r3, #36]	; 0x24
}
   10bec:	4b53      	ldr	r3, [pc, #332]	; (10d3c <cal_axis_misalignments+0xc90>)
   10bee:	449d      	add	sp, r3
   10bf0:	bc3c      	pop	{r2, r3, r4, r5}
   10bf2:	4690      	mov	r8, r2
   10bf4:	4699      	mov	r9, r3
   10bf6:	46a2      	mov	sl, r4
   10bf8:	46ab      	mov	fp, r5
   10bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
					b[i][j] = 0;
   10bfc:	60c7      	str	r7, [r0, #12]
							n = 0;
   10bfe:	2200      	movs	r2, #0
   10c00:	0059      	lsls	r1, r3, #1
   10c02:	e6e6      	b.n	109d2 <cal_axis_misalignments+0x926>
						b[m][n] = a[i][j];
   10c04:	9d02      	ldr	r5, [sp, #8]
   10c06:	0059      	lsls	r1, r3, #1
   10c08:	18ca      	adds	r2, r1, r3
   10c0a:	68ad      	ldr	r5, [r5, #8]
   10c0c:	00d2      	lsls	r2, r2, #3
					b[i][j] = 0;
   10c0e:	6087      	str	r7, [r0, #8]
						b[m][n] = a[i][j];
   10c10:	50a5      	str	r5, [r4, r2]
							n = 0;
   10c12:	2200      	movs	r2, #0
   10c14:	3201      	adds	r2, #1
   10c16:	b2d2      	uxtb	r2, r2
   10c18:	e6d6      	b.n	109c8 <cal_axis_misalignments+0x91c>
						if (n < (f - 2))
   10c1a:	2400      	movs	r4, #0
   10c1c:	3201      	adds	r2, #1
   10c1e:	b2d2      	uxtb	r2, r2
   10c20:	0016      	movs	r6, r2
   10c22:	46a4      	mov	ip, r4
   10c24:	e59f      	b.n	10766 <cal_axis_misalignments+0x6ba>
   10c26:	3201      	adds	r2, #1
					if (i != 0 && j != c)
   10c28:	9e04      	ldr	r6, [sp, #16]
   10c2a:	b2d2      	uxtb	r2, r2
   10c2c:	4693      	mov	fp, r2
					b[i][j] = 0;
   10c2e:	6087      	str	r7, [r0, #8]
					if (i != 0 && j != c)
   10c30:	2e02      	cmp	r6, #2
   10c32:	d000      	beq.n	10c36 <cal_axis_misalignments+0xb8a>
   10c34:	e55a      	b.n	106ec <cal_axis_misalignments+0x640>
					b[i][j] = 0;
   10c36:	60c7      	str	r7, [r0, #12]
   10c38:	e6cc      	b.n	109d4 <cal_axis_misalignments+0x928>
   10c3a:	3201      	adds	r2, #1
   10c3c:	b2d2      	uxtb	r2, r2
   10c3e:	e56e      	b.n	1071e <cal_axis_misalignments+0x672>
						b[m][n] = source[i][j];
   10c40:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   10c42:	51ac      	str	r4, [r5, r6]
						if (n < (f - 2))
   10c44:	4644      	mov	r4, r8
   10c46:	2c01      	cmp	r4, #1
   10c48:	dd06      	ble.n	10c58 <cal_axis_misalignments+0xbac>
							m++;
   10c4a:	3301      	adds	r3, #1
   10c4c:	b2db      	uxtb	r3, r3
   10c4e:	e59c      	b.n	1078a <cal_axis_misalignments+0x6de>
   10c50:	3202      	adds	r2, #2
   10c52:	b2d2      	uxtb	r2, r2
   10c54:	f7ff fb9c 	bl	10390 <cal_axis_misalignments+0x2e4>
   10c58:	3202      	adds	r2, #2
   10c5a:	b2d2      	uxtb	r2, r2
   10c5c:	f7ff fbe6 	bl	1042c <cal_axis_misalignments+0x380>
						b[m][n] = a[i][j];
   10c60:	9d08      	ldr	r5, [sp, #32]
					b[i][j] = 0;
   10c62:	6087      	str	r7, [r0, #8]
						b[m][n] = a[i][j];
   10c64:	18ae      	adds	r6, r5, r2
   10c66:	9d02      	ldr	r5, [sp, #8]
   10c68:	00b6      	lsls	r6, r6, #2
   10c6a:	68ad      	ldr	r5, [r5, #8]
   10c6c:	51a5      	str	r5, [r4, r6]
						if (n < (k - 2))
   10c6e:	2a01      	cmp	r2, #1
   10c70:	ddd0      	ble.n	10c14 <cal_axis_misalignments+0xb68>
							m++;
   10c72:	3301      	adds	r3, #1
   10c74:	b2db      	uxtb	r3, r3
					b[i][j] = 0;
   10c76:	60c7      	str	r7, [r0, #12]
   10c78:	e54a      	b.n	10710 <cal_axis_misalignments+0x664>
						b[m][n] = a[i][j];
   10c7a:	0059      	lsls	r1, r3, #1
   10c7c:	18ce      	adds	r6, r1, r3
   10c7e:	9d02      	ldr	r5, [sp, #8]
					b[i][j] = 0;
   10c80:	6047      	str	r7, [r0, #4]
						b[m][n] = a[i][j];
   10c82:	0076      	lsls	r6, r6, #1
   10c84:	18b6      	adds	r6, r6, r2
   10c86:	686d      	ldr	r5, [r5, #4]
   10c88:	00b6      	lsls	r6, r6, #2
   10c8a:	51a5      	str	r5, [r4, r6]
						if (n < (k - 2))
   10c8c:	2a01      	cmp	r2, #1
   10c8e:	ddca      	ble.n	10c26 <cal_axis_misalignments+0xb7a>
							m++;
   10c90:	3301      	adds	r3, #1
   10c92:	b2db      	uxtb	r3, r3
					b[i][j] = 0;
   10c94:	6087      	str	r7, [r0, #8]
   10c96:	e690      	b.n	109ba <cal_axis_misalignments+0x90e>
							n = 0;
   10c98:	2200      	movs	r2, #0
							m++;
   10c9a:	2301      	movs	r3, #1
					if (i != q && j != p)
   10c9c:	9910      	ldr	r1, [sp, #64]	; 0x40
   10c9e:	4684      	mov	ip, r0
   10ca0:	2901      	cmp	r1, #1
   10ca2:	d001      	beq.n	10ca8 <cal_axis_misalignments+0xbfc>
   10ca4:	f7ff fb3d 	bl	10322 <cal_axis_misalignments+0x276>
   10ca8:	0059      	lsls	r1, r3, #1
   10caa:	f7ff fb82 	bl	103b2 <cal_axis_misalignments+0x306>
							n = 0;
   10cae:	2200      	movs	r2, #0
   10cb0:	0059      	lsls	r1, r3, #1
   10cb2:	f7ff fb6d 	bl	10390 <cal_axis_misalignments+0x2e4>
						b[m][n] = source[i][j];
   10cb6:	4648      	mov	r0, r9
   10cb8:	0059      	lsls	r1, r3, #1
   10cba:	18ca      	adds	r2, r1, r3
   10cbc:	6d00      	ldr	r0, [r0, #80]	; 0x50
   10cbe:	00d2      	lsls	r2, r2, #3
   10cc0:	50a8      	str	r0, [r5, r2]
							n = 0;
   10cc2:	2200      	movs	r2, #0
   10cc4:	1c56      	adds	r6, r2, #1
   10cc6:	b2f6      	uxtb	r6, r6
   10cc8:	e5fb      	b.n	108c2 <cal_axis_misalignments+0x816>
   10cca:	3201      	adds	r2, #1
   10ccc:	b2d2      	uxtb	r2, r2
   10cce:	f7ff fbbc 	bl	1044a <cal_axis_misalignments+0x39e>
					if (i != q && j != p)
   10cd2:	2300      	movs	r3, #0
   10cd4:	e7e2      	b.n	10c9c <cal_axis_misalignments+0xbf0>
						b[m][n] = source[i][j];
   10cd6:	464b      	mov	r3, r9
   10cd8:	2200      	movs	r2, #0
   10cda:	685b      	ldr	r3, [r3, #4]
					if (i != q && j != p)
   10cdc:	9902      	ldr	r1, [sp, #8]
						b[m][n] = source[i][j];
   10cde:	602b      	str	r3, [r5, #0]
   10ce0:	1c53      	adds	r3, r2, #1
					if (i != q && j != p)
   10ce2:	2902      	cmp	r1, #2
   10ce4:	d001      	beq.n	10cea <cal_axis_misalignments+0xc3e>
   10ce6:	f7ff fb03 	bl	102f0 <cal_axis_misalignments+0x244>
						b[m][n] = source[i][j];
   10cea:	464e      	mov	r6, r9
   10cec:	68f6      	ldr	r6, [r6, #12]
   10cee:	0099      	lsls	r1, r3, #2
   10cf0:	506e      	str	r6, [r5, r1]
						if (n < (f - 2))
   10cf2:	2b01      	cmp	r3, #1
   10cf4:	d000      	beq.n	10cf8 <cal_axis_misalignments+0xc4c>
   10cf6:	e585      	b.n	10804 <cal_axis_misalignments+0x758>
   10cf8:	3202      	adds	r2, #2
   10cfa:	2300      	movs	r3, #0
   10cfc:	f7ff fb08 	bl	10310 <cal_axis_misalignments+0x264>
   10d00:	a902      	add	r1, sp, #8
					if (i != q && j != p)
   10d02:	2300      	movs	r3, #0
   10d04:	2200      	movs	r2, #0
   10d06:	7808      	ldrb	r0, [r1, #0]
   10d08:	f7ff fb06 	bl	10318 <cal_axis_misalignments+0x26c>
							n = 0;
   10d0c:	2200      	movs	r2, #0
   10d0e:	0059      	lsls	r1, r3, #1
					if (i != q && j != p)
   10d10:	9c05      	ldr	r4, [sp, #20]
   10d12:	4684      	mov	ip, r0
   10d14:	2c02      	cmp	r4, #2
   10d16:	d001      	beq.n	10d1c <cal_axis_misalignments+0xc70>
   10d18:	f7ff fb53 	bl	103c2 <cal_axis_misalignments+0x316>
   10d1c:	f7ff fb99 	bl	10452 <cal_axis_misalignments+0x3a6>
						b[m][n] = source[i][j];
   10d20:	6a24      	ldr	r4, [r4, #32]
   10d22:	50ac      	str	r4, [r5, r2]
							n = 0;
   10d24:	2200      	movs	r2, #0
   10d26:	3201      	adds	r2, #1
   10d28:	b2d2      	uxtb	r2, r2
   10d2a:	f7ff fb2c 	bl	10386 <cal_axis_misalignments+0x2da>
   10d2e:	46c0      	nop			; (mov r8, r8)
   10d30:	0000efd9 	.word	0x0000efd9
   10d34:	0001cde9 	.word	0x0001cde9
   10d38:	0001c7c9 	.word	0x0001c7c9
   10d3c:	00000a04 	.word	0x00000a04

00010d40 <cal_gain_off>:
void cal_gain_off(float XYZ[][3], struct INST_CAL *cal_struct){
   10d40:	b5f0      	push	{r4, r5, r6, r7, lr}
   10d42:	46de      	mov	lr, fp
   10d44:	4657      	mov	r7, sl
   10d46:	464e      	mov	r6, r9
   10d48:	4645      	mov	r5, r8
   10d4a:	b5e0      	push	{r5, r6, r7, lr}
	for (i=0;i<n_points;i++){
   10d4c:	4b4a      	ldr	r3, [pc, #296]	; (10e78 <cal_gain_off+0x138>)
void cal_gain_off(float XYZ[][3], struct INST_CAL *cal_struct){
   10d4e:	4c4b      	ldr	r4, [pc, #300]	; (10e7c <cal_gain_off+0x13c>)
	for (i=0;i<n_points;i++){
   10d50:	681f      	ldr	r7, [r3, #0]
void cal_gain_off(float XYZ[][3], struct INST_CAL *cal_struct){
   10d52:	44a5      	add	sp, r4
   10d54:	4683      	mov	fp, r0
   10d56:	9114      	str	r1, [sp, #80]	; 0x50
	for (i=0;i<n_points;i++){
   10d58:	2f00      	cmp	r7, #0
   10d5a:	d03a      	beq.n	10dd2 <cal_gain_off+0x92>
   10d5c:	2300      	movs	r3, #0
   10d5e:	2600      	movs	r6, #0
   10d60:	46b9      	mov	r9, r7
   10d62:	aaff      	add	r2, sp, #1020	; 0x3fc
   10d64:	3214      	adds	r2, #20
   10d66:	4692      	mov	sl, r2
   10d68:	4a45      	ldr	r2, [pc, #276]	; (10e80 <cal_gain_off+0x140>)
   10d6a:	9204      	str	r2, [sp, #16]
   10d6c:	4a45      	ldr	r2, [pc, #276]	; (10e84 <cal_gain_off+0x144>)
   10d6e:	9202      	str	r2, [sp, #8]
		D[i][0] = XYZ[i][0]*XYZ[i][0];
   10d70:	005d      	lsls	r5, r3, #1
   10d72:	18ed      	adds	r5, r5, r3
   10d74:	00ad      	lsls	r5, r5, #2
   10d76:	445d      	add	r5, fp
   10d78:	682b      	ldr	r3, [r5, #0]
   10d7a:	0074      	lsls	r4, r6, #1
   10d7c:	4698      	mov	r8, r3
   10d7e:	1c19      	adds	r1, r3, #0
   10d80:	1c18      	adds	r0, r3, #0
   10d82:	9b04      	ldr	r3, [sp, #16]
   10d84:	4798      	blx	r3
   10d86:	4652      	mov	r2, sl
		D[i][1] = XYZ[i][1]*XYZ[i][1];
   10d88:	686f      	ldr	r7, [r5, #4]
		D[i][0] = XYZ[i][0]*XYZ[i][0];
   10d8a:	19a4      	adds	r4, r4, r6
   10d8c:	00e4      	lsls	r4, r4, #3
   10d8e:	5110      	str	r0, [r2, r4]
		D[i][1] = XYZ[i][1]*XYZ[i][1];
   10d90:	1c39      	adds	r1, r7, #0
   10d92:	1c38      	adds	r0, r7, #0
   10d94:	9b04      	ldr	r3, [sp, #16]
   10d96:	4798      	blx	r3
		D[i][2] = XYZ[i][2]*XYZ[i][2];
   10d98:	68ad      	ldr	r5, [r5, #8]
		D[i][1] = XYZ[i][1]*XYZ[i][1];
   10d9a:	4454      	add	r4, sl
   10d9c:	6060      	str	r0, [r4, #4]
		D[i][2] = XYZ[i][2]*XYZ[i][2];
   10d9e:	1c29      	adds	r1, r5, #0
   10da0:	9b04      	ldr	r3, [sp, #16]
   10da2:	1c28      	adds	r0, r5, #0
   10da4:	4798      	blx	r3
		D[i][3] = 2*XYZ[i][0];
   10da6:	9b02      	ldr	r3, [sp, #8]
		D[i][2] = XYZ[i][2]*XYZ[i][2];
   10da8:	60a0      	str	r0, [r4, #8]
		D[i][3] = 2*XYZ[i][0];
   10daa:	4641      	mov	r1, r8
   10dac:	4640      	mov	r0, r8
   10dae:	4798      	blx	r3
		D[i][4] = 2*XYZ[i][1];
   10db0:	1c39      	adds	r1, r7, #0
		D[i][3] = 2*XYZ[i][0];
   10db2:	60e0      	str	r0, [r4, #12]
		D[i][4] = 2*XYZ[i][1];
   10db4:	1c38      	adds	r0, r7, #0
   10db6:	9f02      	ldr	r7, [sp, #8]
   10db8:	47b8      	blx	r7
		D[i][5] = 2*XYZ[i][2];
   10dba:	1c29      	adds	r1, r5, #0
		D[i][4] = 2*XYZ[i][1];
   10dbc:	6120      	str	r0, [r4, #16]
		D[i][5] = 2*XYZ[i][2];
   10dbe:	1c28      	adds	r0, r5, #0
   10dc0:	47b8      	blx	r7
	for (i=0;i<n_points;i++){
   10dc2:	3601      	adds	r6, #1
   10dc4:	b2f6      	uxtb	r6, r6
		D[i][5] = 2*XYZ[i][2];
   10dc6:	6160      	str	r0, [r4, #20]
	for (i=0;i<n_points;i++){
   10dc8:	0033      	movs	r3, r6
   10dca:	454e      	cmp	r6, r9
   10dcc:	d3d0      	bcc.n	10d70 <cal_gain_off+0x30>
   10dce:	464f      	mov	r7, r9
   10dd0:	e003      	b.n	10dda <cal_gain_off+0x9a>
   10dd2:	4b2b      	ldr	r3, [pc, #172]	; (10e80 <cal_gain_off+0x140>)
   10dd4:	9304      	str	r3, [sp, #16]
   10dd6:	4b2b      	ldr	r3, [pc, #172]	; (10e84 <cal_gain_off+0x144>)
   10dd8:	9302      	str	r3, [sp, #8]
			for (k=0;k<n_points;k++){
   10dda:	2500      	movs	r5, #0
   10ddc:	ab2c      	add	r3, sp, #176	; 0xb0
   10dde:	469b      	mov	fp, r3
   10de0:	46ba      	mov	sl, r7
   10de2:	46a8      	mov	r8, r5
   10de4:	aeff      	add	r6, sp, #1020	; 0x3fc
   10de6:	3614      	adds	r6, #20
	for (i=0;i<n_points;i++){
   10de8:	46d9      	mov	r9, fp
   10dea:	2500      	movs	r5, #0
			temp1[i][j] = 0;
   10dec:	464b      	mov	r3, r9
   10dee:	2200      	movs	r2, #0
   10df0:	601a      	str	r2, [r3, #0]
			for (k=0;k<n_points;k++){
   10df2:	4653      	mov	r3, sl
   10df4:	2700      	movs	r7, #0
   10df6:	2400      	movs	r4, #0
   10df8:	2b00      	cmp	r3, #0
   10dfa:	d016      	beq.n	10e2a <cal_gain_off+0xea>
				temp1[i][j] = temp1[i][j] + D[k][i]*D[k][j];
   10dfc:	4642      	mov	r2, r8
   10dfe:	0063      	lsls	r3, r4, #1
   10e00:	191b      	adds	r3, r3, r4
   10e02:	005b      	lsls	r3, r3, #1
   10e04:	189a      	adds	r2, r3, r2
   10e06:	195b      	adds	r3, r3, r5
   10e08:	0092      	lsls	r2, r2, #2
   10e0a:	009b      	lsls	r3, r3, #2
   10e0c:	58f1      	ldr	r1, [r6, r3]
   10e0e:	58b0      	ldr	r0, [r6, r2]
   10e10:	9b04      	ldr	r3, [sp, #16]
   10e12:	4798      	blx	r3
   10e14:	9b02      	ldr	r3, [sp, #8]
   10e16:	1c01      	adds	r1, r0, #0
   10e18:	1c38      	adds	r0, r7, #0
   10e1a:	4798      	blx	r3
			for (k=0;k<n_points;k++){
   10e1c:	3401      	adds	r4, #1
   10e1e:	b2e4      	uxtb	r4, r4
				temp1[i][j] = temp1[i][j] + D[k][i]*D[k][j];
   10e20:	1c07      	adds	r7, r0, #0
			for (k=0;k<n_points;k++){
   10e22:	4554      	cmp	r4, sl
   10e24:	d3ea      	bcc.n	10dfc <cal_gain_off+0xbc>
   10e26:	464b      	mov	r3, r9
   10e28:	6018      	str	r0, [r3, #0]
   10e2a:	2304      	movs	r3, #4
   10e2c:	469c      	mov	ip, r3
   10e2e:	3501      	adds	r5, #1
   10e30:	44e1      	add	r9, ip
		for (j=0;j<6;j++){
   10e32:	2d06      	cmp	r5, #6
   10e34:	d1da      	bne.n	10dec <cal_gain_off+0xac>
   10e36:	2301      	movs	r3, #1
   10e38:	469c      	mov	ip, r3
   10e3a:	3317      	adds	r3, #23
   10e3c:	44e0      	add	r8, ip
   10e3e:	469c      	mov	ip, r3
	for (i=0;i<6;i++){
   10e40:	4643      	mov	r3, r8
   10e42:	44e3      	add	fp, ip
   10e44:	2b06      	cmp	r3, #6
   10e46:	d1cf      	bne.n	10de8 <cal_gain_off+0xa8>
   10e48:	ab74      	add	r3, sp, #464	; 0x1d0
   10e4a:	9310      	str	r3, [sp, #64]	; 0x40
   10e4c:	2300      	movs	r3, #0
   10e4e:	aee0      	add	r6, sp, #896	; 0x380
   10e50:	930d      	str	r3, [sp, #52]	; 0x34
   10e52:	466b      	mov	r3, sp
   10e54:	2234      	movs	r2, #52	; 0x34
   10e56:	189b      	adds	r3, r3, r2
   10e58:	781b      	ldrb	r3, [r3, #0]
   10e5a:	930b      	str	r3, [sp, #44]	; 0x2c
			fac[q][p] = pow(-1, q + p) * determinant(b, f - 1);
   10e5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10e5e:	9311      	str	r3, [sp, #68]	; 0x44
   10e60:	2300      	movs	r3, #0
   10e62:	930e      	str	r3, [sp, #56]	; 0x38
			for (k=0;k<n_points;k++){
   10e64:	2500      	movs	r5, #0
   10e66:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   10e68:	a82c      	add	r0, sp, #176	; 0xb0
   10e6a:	b2fb      	uxtb	r3, r7
   10e6c:	469c      	mov	ip, r3
   10e6e:	2200      	movs	r2, #0
   10e70:	2300      	movs	r3, #0
   10e72:	46a8      	mov	r8, r5
   10e74:	46ba      	mov	sl, r7
   10e76:	e067      	b.n	10f48 <cal_gain_off+0x208>
   10e78:	20003054 	.word	0x20003054
   10e7c:	fffff46c 	.word	0xfffff46c
   10e80:	0001cba9 	.word	0x0001cba9
   10e84:	0001c4a5 	.word	0x0001c4a5
					if (i != q && j != p)
   10e88:	4662      	mov	r2, ip
							m++;
   10e8a:	3301      	adds	r3, #1
   10e8c:	b2db      	uxtb	r3, r3
					if (i != q && j != p)
   10e8e:	2a01      	cmp	r2, #1
   10e90:	d101      	bne.n	10e96 <cal_gain_off+0x156>
   10e92:	f000 fc77 	bl	11784 <cal_gain_off+0xa44>
						b[m][n] = source[i][j];
   10e96:	2590      	movs	r5, #144	; 0x90
   10e98:	0059      	lsls	r1, r3, #1
   10e9a:	ac2c      	add	r4, sp, #176	; 0xb0
   10e9c:	1964      	adds	r4, r4, r5
   10e9e:	18ca      	adds	r2, r1, r3
   10ea0:	6845      	ldr	r5, [r0, #4]
   10ea2:	00d2      	lsls	r2, r2, #3
   10ea4:	50a5      	str	r5, [r4, r2]
   10ea6:	2201      	movs	r2, #1
					if (i != q && j != p)
   10ea8:	4654      	mov	r4, sl
						b[m][n] = source[i][j];
   10eaa:	4691      	mov	r9, r2
					if (i != q && j != p)
   10eac:	2c02      	cmp	r4, #2
   10eae:	d101      	bne.n	10eb4 <cal_gain_off+0x174>
   10eb0:	f000 fc4a 	bl	11748 <cal_gain_off+0xa08>
						b[m][n] = source[i][j];
   10eb4:	2790      	movs	r7, #144	; 0x90
   10eb6:	18cc      	adds	r4, r1, r3
   10eb8:	0064      	lsls	r4, r4, #1
   10eba:	ad2c      	add	r5, sp, #176	; 0xb0
   10ebc:	19ed      	adds	r5, r5, r7
   10ebe:	444c      	add	r4, r9
   10ec0:	6887      	ldr	r7, [r0, #8]
   10ec2:	00a4      	lsls	r4, r4, #2
   10ec4:	512f      	str	r7, [r5, r4]
						if (n < (f - 2))
   10ec6:	464c      	mov	r4, r9
   10ec8:	2c03      	cmp	r4, #3
   10eca:	dc01      	bgt.n	10ed0 <cal_gain_off+0x190>
   10ecc:	f000 fc63 	bl	11796 <cal_gain_off+0xa56>
					if (i != q && j != p)
   10ed0:	4652      	mov	r2, sl
							m++;
   10ed2:	3301      	adds	r3, #1
   10ed4:	b2db      	uxtb	r3, r3
					if (i != q && j != p)
   10ed6:	2a03      	cmp	r2, #3
   10ed8:	d101      	bne.n	10ede <cal_gain_off+0x19e>
   10eda:	f000 fc47 	bl	1176c <cal_gain_off+0xa2c>
						b[m][n] = source[i][j];
   10ede:	2590      	movs	r5, #144	; 0x90
   10ee0:	0059      	lsls	r1, r3, #1
   10ee2:	ac2c      	add	r4, sp, #176	; 0xb0
   10ee4:	1964      	adds	r4, r4, r5
   10ee6:	18ca      	adds	r2, r1, r3
   10ee8:	68c5      	ldr	r5, [r0, #12]
   10eea:	00d2      	lsls	r2, r2, #3
   10eec:	50a5      	str	r5, [r4, r2]
   10eee:	2201      	movs	r2, #1
   10ef0:	4693      	mov	fp, r2
					if (i != q && j != p)
   10ef2:	4654      	mov	r4, sl
   10ef4:	2c04      	cmp	r4, #4
   10ef6:	d100      	bne.n	10efa <cal_gain_off+0x1ba>
   10ef8:	e083      	b.n	11002 <cal_gain_off+0x2c2>
						b[m][n] = source[i][j];
   10efa:	18cd      	adds	r5, r1, r3
   10efc:	006d      	lsls	r5, r5, #1
   10efe:	46a9      	mov	r9, r5
   10f00:	44d9      	add	r9, fp
   10f02:	464d      	mov	r5, r9
   10f04:	00ad      	lsls	r5, r5, #2
   10f06:	46a9      	mov	r9, r5
   10f08:	2490      	movs	r4, #144	; 0x90
   10f0a:	464f      	mov	r7, r9
   10f0c:	ad2c      	add	r5, sp, #176	; 0xb0
   10f0e:	192d      	adds	r5, r5, r4
   10f10:	6904      	ldr	r4, [r0, #16]
   10f12:	51ec      	str	r4, [r5, r7]
						if (n < (f - 2))
   10f14:	465c      	mov	r4, fp
   10f16:	2c03      	cmp	r4, #3
   10f18:	dc01      	bgt.n	10f1e <cal_gain_off+0x1de>
   10f1a:	f000 fc30 	bl	1177e <cal_gain_off+0xa3e>
					if (i != q && j != p)
   10f1e:	4652      	mov	r2, sl
							m++;
   10f20:	3301      	adds	r3, #1
   10f22:	b2db      	uxtb	r3, r3
					if (i != q && j != p)
   10f24:	2a05      	cmp	r2, #5
   10f26:	d07b      	beq.n	11020 <cal_gain_off+0x2e0>
						b[m][n] = source[i][j];
   10f28:	2490      	movs	r4, #144	; 0x90
   10f2a:	005a      	lsls	r2, r3, #1
   10f2c:	a92c      	add	r1, sp, #176	; 0xb0
   10f2e:	1909      	adds	r1, r1, r4
   10f30:	18d2      	adds	r2, r2, r3
   10f32:	6944      	ldr	r4, [r0, #20]
   10f34:	00d2      	lsls	r2, r2, #3
   10f36:	508c      	str	r4, [r1, r2]
   10f38:	2201      	movs	r2, #1
			for (i = 0;i < f; i++)
   10f3a:	4645      	mov	r5, r8
   10f3c:	3501      	adds	r5, #1
   10f3e:	b2e9      	uxtb	r1, r5
   10f40:	4688      	mov	r8, r1
   10f42:	3018      	adds	r0, #24
   10f44:	2906      	cmp	r1, #6
   10f46:	d073      	beq.n	11030 <cal_gain_off+0x2f0>
					if (i != q && j != p)
   10f48:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10f4a:	4588      	cmp	r8, r1
   10f4c:	d0f5      	beq.n	10f3a <cal_gain_off+0x1fa>
   10f4e:	4651      	mov	r1, sl
   10f50:	2900      	cmp	r1, #0
   10f52:	d101      	bne.n	10f58 <cal_gain_off+0x218>
   10f54:	f000 fc23 	bl	1179e <cal_gain_off+0xa5e>
						b[m][n] = source[i][j];
   10f58:	0059      	lsls	r1, r3, #1
   10f5a:	18cc      	adds	r4, r1, r3
   10f5c:	0064      	lsls	r4, r4, #1
   10f5e:	18a7      	adds	r7, r4, r2
   10f60:	00bf      	lsls	r7, r7, #2
   10f62:	46b9      	mov	r9, r7
   10f64:	2590      	movs	r5, #144	; 0x90
   10f66:	46a3      	mov	fp, r4
   10f68:	464c      	mov	r4, r9
   10f6a:	af2c      	add	r7, sp, #176	; 0xb0
   10f6c:	197f      	adds	r7, r7, r5
   10f6e:	6805      	ldr	r5, [r0, #0]
   10f70:	513d      	str	r5, [r7, r4]
						if (n < (f - 2))
   10f72:	2a03      	cmp	r2, #3
   10f74:	dc88      	bgt.n	10e88 <cal_gain_off+0x148>
					if (i != q && j != p)
   10f76:	4664      	mov	r4, ip
						n++;
   10f78:	3201      	adds	r2, #1
   10f7a:	b2d2      	uxtb	r2, r2
					if (i != q && j != p)
   10f7c:	2c01      	cmp	r4, #1
   10f7e:	d101      	bne.n	10f84 <cal_gain_off+0x244>
   10f80:	f000 fc9a 	bl	118b8 <cal_gain_off+0xb78>
						b[m][n] = source[i][j];
   10f84:	2790      	movs	r7, #144	; 0x90
   10f86:	465c      	mov	r4, fp
   10f88:	ad2c      	add	r5, sp, #176	; 0xb0
   10f8a:	19ed      	adds	r5, r5, r7
   10f8c:	18a4      	adds	r4, r4, r2
   10f8e:	6847      	ldr	r7, [r0, #4]
   10f90:	00a4      	lsls	r4, r4, #2
   10f92:	512f      	str	r7, [r5, r4]
						if (n < (f - 2))
   10f94:	2a03      	cmp	r2, #3
   10f96:	d800      	bhi.n	10f9a <cal_gain_off+0x25a>
   10f98:	e3ce      	b.n	11738 <cal_gain_off+0x9f8>
					if (i != q && j != p)
   10f9a:	4662      	mov	r2, ip
							m++;
   10f9c:	3301      	adds	r3, #1
   10f9e:	b2db      	uxtb	r3, r3
					if (i != q && j != p)
   10fa0:	2a02      	cmp	r2, #2
   10fa2:	d100      	bne.n	10fa6 <cal_gain_off+0x266>
   10fa4:	e3a1      	b.n	116ea <cal_gain_off+0x9aa>
						b[m][n] = source[i][j];
   10fa6:	2590      	movs	r5, #144	; 0x90
   10fa8:	0059      	lsls	r1, r3, #1
   10faa:	ac2c      	add	r4, sp, #176	; 0xb0
   10fac:	1964      	adds	r4, r4, r5
   10fae:	18ca      	adds	r2, r1, r3
   10fb0:	6885      	ldr	r5, [r0, #8]
   10fb2:	00d2      	lsls	r2, r2, #3
   10fb4:	50a5      	str	r5, [r4, r2]
   10fb6:	2201      	movs	r2, #1
   10fb8:	4691      	mov	r9, r2
					if (i != q && j != p)
   10fba:	4654      	mov	r4, sl
   10fbc:	2c03      	cmp	r4, #3
   10fbe:	d100      	bne.n	10fc2 <cal_gain_off+0x282>
   10fc0:	e3a1      	b.n	11706 <cal_gain_off+0x9c6>
						b[m][n] = source[i][j];
   10fc2:	2790      	movs	r7, #144	; 0x90
   10fc4:	18cc      	adds	r4, r1, r3
   10fc6:	0064      	lsls	r4, r4, #1
   10fc8:	ad2c      	add	r5, sp, #176	; 0xb0
   10fca:	19ed      	adds	r5, r5, r7
   10fcc:	444c      	add	r4, r9
   10fce:	68c7      	ldr	r7, [r0, #12]
   10fd0:	00a4      	lsls	r4, r4, #2
   10fd2:	512f      	str	r7, [r5, r4]
						if (n < (f - 2))
   10fd4:	464c      	mov	r4, r9
   10fd6:	2c03      	cmp	r4, #3
   10fd8:	dc00      	bgt.n	10fdc <cal_gain_off+0x29c>
   10fda:	e38f      	b.n	116fc <cal_gain_off+0x9bc>
					if (i != q && j != p)
   10fdc:	4652      	mov	r2, sl
							m++;
   10fde:	3301      	adds	r3, #1
   10fe0:	b2db      	uxtb	r3, r3
					if (i != q && j != p)
   10fe2:	2a04      	cmp	r2, #4
   10fe4:	d100      	bne.n	10fe8 <cal_gain_off+0x2a8>
   10fe6:	e3be      	b.n	11766 <cal_gain_off+0xa26>
						b[m][n] = source[i][j];
   10fe8:	2590      	movs	r5, #144	; 0x90
   10fea:	0059      	lsls	r1, r3, #1
   10fec:	ac2c      	add	r4, sp, #176	; 0xb0
   10fee:	1964      	adds	r4, r4, r5
   10ff0:	18ca      	adds	r2, r1, r3
   10ff2:	6905      	ldr	r5, [r0, #16]
   10ff4:	00d2      	lsls	r2, r2, #3
   10ff6:	50a5      	str	r5, [r4, r2]
   10ff8:	2201      	movs	r2, #1
					if (i != q && j != p)
   10ffa:	4654      	mov	r4, sl
   10ffc:	2c05      	cmp	r4, #5
   10ffe:	d09c      	beq.n	10f3a <cal_gain_off+0x1fa>
   11000:	4693      	mov	fp, r2
						b[m][n] = source[i][j];
   11002:	2590      	movs	r5, #144	; 0x90
   11004:	18c9      	adds	r1, r1, r3
   11006:	0049      	lsls	r1, r1, #1
   11008:	ac2c      	add	r4, sp, #176	; 0xb0
   1100a:	1964      	adds	r4, r4, r5
   1100c:	4459      	add	r1, fp
   1100e:	6945      	ldr	r5, [r0, #20]
   11010:	0089      	lsls	r1, r1, #2
   11012:	5065      	str	r5, [r4, r1]
						if (n < (f - 2))
   11014:	4659      	mov	r1, fp
   11016:	2903      	cmp	r1, #3
   11018:	dc00      	bgt.n	1101c <cal_gain_off+0x2dc>
   1101a:	e3d0      	b.n	117be <cal_gain_off+0xa7e>
							m++;
   1101c:	3301      	adds	r3, #1
   1101e:	b2db      	uxtb	r3, r3
			for (i = 0;i < f; i++)
   11020:	4645      	mov	r5, r8
   11022:	3501      	adds	r5, #1
   11024:	b2e9      	uxtb	r1, r5
							n = 0;
   11026:	2200      	movs	r2, #0
			for (i = 0;i < f; i++)
   11028:	4688      	mov	r8, r1
   1102a:	3018      	adds	r0, #24
   1102c:	2906      	cmp	r1, #6
   1102e:	d18b      	bne.n	10f48 <cal_gain_off+0x208>
			fac[q][p] = pow(-1, q + p) * determinant(b, f - 1);
   11030:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   11032:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11034:	4694      	mov	ip, r2
   11036:	4463      	add	r3, ip
   11038:	0018      	movs	r0, r3
   1103a:	4b8c      	ldr	r3, [pc, #560]	; (1126c <cal_gain_off+0x52c>)
   1103c:	4798      	blx	r3
   1103e:	4c8c      	ldr	r4, [pc, #560]	; (11270 <cal_gain_off+0x530>)
   11040:	0002      	movs	r2, r0
   11042:	000b      	movs	r3, r1
   11044:	2000      	movs	r0, #0
   11046:	498b      	ldr	r1, [pc, #556]	; (11274 <cal_gain_off+0x534>)
   11048:	47a0      	blx	r4
   1104a:	2300      	movs	r3, #0
   1104c:	22fe      	movs	r2, #254	; 0xfe
   1104e:	9309      	str	r3, [sp, #36]	; 0x24
   11050:	2300      	movs	r3, #0
   11052:	9012      	str	r0, [sp, #72]	; 0x48
   11054:	9113      	str	r1, [sp, #76]	; 0x4c
   11056:	0592      	lsls	r2, r2, #22
   11058:	930a      	str	r3, [sp, #40]	; 0x28
   1105a:	920c      	str	r2, [sp, #48]	; 0x30
					b[i][j] = 0;
   1105c:	9300      	str	r3, [sp, #0]
   1105e:	9a09      	ldr	r2, [sp, #36]	; 0x24
							n = 0;
   11060:	a8bc      	add	r0, sp, #752	; 0x2f0
   11062:	b2d3      	uxtb	r3, r2
   11064:	4699      	mov	r9, r3
   11066:	4683      	mov	fp, r0
   11068:	2301      	movs	r3, #1
					b[i][j] = 0;
   1106a:	4658      	mov	r0, fp
							n = 0;
   1106c:	469c      	mov	ip, r3
   1106e:	4692      	mov	sl, r2
					b[i][j] = 0;
   11070:	9a00      	ldr	r2, [sp, #0]
   11072:	464d      	mov	r5, r9
   11074:	6002      	str	r2, [r0, #0]
					if (i != 0 && j != c)
   11076:	4662      	mov	r2, ip
   11078:	ac50      	add	r4, sp, #320	; 0x140
							n = 0;
   1107a:	2100      	movs	r1, #0
   1107c:	2300      	movs	r3, #0
   1107e:	9506      	str	r5, [sp, #24]
					if (i != 0 && j != c)
   11080:	2a01      	cmp	r2, #1
   11082:	d078      	beq.n	11176 <cal_gain_off+0x436>
   11084:	4652      	mov	r2, sl
   11086:	2a00      	cmp	r2, #0
   11088:	d100      	bne.n	1108c <cal_gain_off+0x34c>
   1108a:	e317      	b.n	116bc <cal_gain_off+0x97c>
						b[m][n] = a[i][j];
   1108c:	005a      	lsls	r2, r3, #1
   1108e:	18d5      	adds	r5, r2, r3
   11090:	0068      	lsls	r0, r5, #1
   11092:	1847      	adds	r7, r0, r1
   11094:	00bf      	lsls	r7, r7, #2
   11096:	46b8      	mov	r8, r7
   11098:	4681      	mov	r9, r0
   1109a:	2090      	movs	r0, #144	; 0x90
   1109c:	4645      	mov	r5, r8
   1109e:	0080      	lsls	r0, r0, #2
   110a0:	af2c      	add	r7, sp, #176	; 0xb0
   110a2:	183f      	adds	r7, r7, r0
   110a4:	6820      	ldr	r0, [r4, #0]
   110a6:	5178      	str	r0, [r7, r5]
						if (n < (k - 2))
   110a8:	2902      	cmp	r1, #2
   110aa:	dd6a      	ble.n	11182 <cal_gain_off+0x442>
					b[i][j] = 0;
   110ac:	4659      	mov	r1, fp
   110ae:	9a00      	ldr	r2, [sp, #0]
							m++;
   110b0:	3301      	adds	r3, #1
					b[i][j] = 0;
   110b2:	604a      	str	r2, [r1, #4]
					if (i != 0 && j != c)
   110b4:	9a06      	ldr	r2, [sp, #24]
							m++;
   110b6:	b2db      	uxtb	r3, r3
					if (i != 0 && j != c)
   110b8:	2a01      	cmp	r2, #1
   110ba:	d100      	bne.n	110be <cal_gain_off+0x37e>
   110bc:	e383      	b.n	117c6 <cal_gain_off+0xa86>
						b[m][n] = a[i][j];
   110be:	2590      	movs	r5, #144	; 0x90
   110c0:	005a      	lsls	r2, r3, #1
   110c2:	00ad      	lsls	r5, r5, #2
   110c4:	a82c      	add	r0, sp, #176	; 0xb0
   110c6:	1940      	adds	r0, r0, r5
   110c8:	18d1      	adds	r1, r2, r3
   110ca:	6865      	ldr	r5, [r4, #4]
   110cc:	00c9      	lsls	r1, r1, #3
   110ce:	5045      	str	r5, [r0, r1]
   110d0:	2101      	movs	r1, #1
   110d2:	4688      	mov	r8, r1
					b[i][j] = 0;
   110d4:	465d      	mov	r5, fp
   110d6:	9800      	ldr	r0, [sp, #0]
   110d8:	60a8      	str	r0, [r5, #8]
					if (i != 0 && j != c)
   110da:	4650      	mov	r0, sl
   110dc:	2802      	cmp	r0, #2
   110de:	d100      	bne.n	110e2 <cal_gain_off+0x3a2>
   110e0:	e38c      	b.n	117fc <cal_gain_off+0xabc>
						b[m][n] = a[i][j];
   110e2:	2790      	movs	r7, #144	; 0x90
   110e4:	18d5      	adds	r5, r2, r3
   110e6:	00bf      	lsls	r7, r7, #2
   110e8:	006d      	lsls	r5, r5, #1
   110ea:	a82c      	add	r0, sp, #176	; 0xb0
   110ec:	19c0      	adds	r0, r0, r7
   110ee:	4445      	add	r5, r8
   110f0:	68a7      	ldr	r7, [r4, #8]
   110f2:	00ad      	lsls	r5, r5, #2
   110f4:	5147      	str	r7, [r0, r5]
						if (n < (k - 2))
   110f6:	4640      	mov	r0, r8
   110f8:	2802      	cmp	r0, #2
   110fa:	dc00      	bgt.n	110fe <cal_gain_off+0x3be>
   110fc:	e370      	b.n	117e0 <cal_gain_off+0xaa0>
					b[i][j] = 0;
   110fe:	4659      	mov	r1, fp
   11100:	9a00      	ldr	r2, [sp, #0]
							m++;
   11102:	3301      	adds	r3, #1
					b[i][j] = 0;
   11104:	60ca      	str	r2, [r1, #12]
					if (i != 0 && j != c)
   11106:	4652      	mov	r2, sl
							m++;
   11108:	b2db      	uxtb	r3, r3
					if (i != 0 && j != c)
   1110a:	2a03      	cmp	r2, #3
   1110c:	d100      	bne.n	11110 <cal_gain_off+0x3d0>
   1110e:	e2cf      	b.n	116b0 <cal_gain_off+0x970>
						b[m][n] = a[i][j];
   11110:	2590      	movs	r5, #144	; 0x90
   11112:	005a      	lsls	r2, r3, #1
   11114:	00ad      	lsls	r5, r5, #2
   11116:	a82c      	add	r0, sp, #176	; 0xb0
   11118:	1940      	adds	r0, r0, r5
   1111a:	18d1      	adds	r1, r2, r3
   1111c:	68e5      	ldr	r5, [r4, #12]
   1111e:	00c9      	lsls	r1, r1, #3
   11120:	5045      	str	r5, [r0, r1]
   11122:	2101      	movs	r1, #1
					b[i][j] = 0;
   11124:	4658      	mov	r0, fp
   11126:	9d00      	ldr	r5, [sp, #0]
   11128:	6105      	str	r5, [r0, #16]
					if (i != 0 && j != c)
   1112a:	4650      	mov	r0, sl
   1112c:	2804      	cmp	r0, #4
   1112e:	d011      	beq.n	11154 <cal_gain_off+0x414>
   11130:	4689      	mov	r9, r1
						b[m][n] = a[i][j];
   11132:	2590      	movs	r5, #144	; 0x90
   11134:	464f      	mov	r7, r9
   11136:	18d2      	adds	r2, r2, r3
   11138:	00ad      	lsls	r5, r5, #2
   1113a:	0052      	lsls	r2, r2, #1
   1113c:	a82c      	add	r0, sp, #176	; 0xb0
   1113e:	1940      	adds	r0, r0, r5
   11140:	444a      	add	r2, r9
   11142:	6925      	ldr	r5, [r4, #16]
   11144:	0092      	lsls	r2, r2, #2
   11146:	5085      	str	r5, [r0, r2]
						if (n < (k - 2))
   11148:	2f02      	cmp	r7, #2
   1114a:	dc00      	bgt.n	1114e <cal_gain_off+0x40e>
   1114c:	e2ad      	b.n	116aa <cal_gain_off+0x96a>
							m++;
   1114e:	3301      	adds	r3, #1
   11150:	b2db      	uxtb	r3, r3
							n = 0;
   11152:	2100      	movs	r1, #0
			for (i = 0;i < k; i++)
   11154:	4662      	mov	r2, ip
   11156:	2a05      	cmp	r2, #5
   11158:	d06a      	beq.n	11230 <cal_gain_off+0x4f0>
   1115a:	2218      	movs	r2, #24
   1115c:	4690      	mov	r8, r2
   1115e:	4662      	mov	r2, ip
   11160:	3201      	adds	r2, #1
   11162:	b2d2      	uxtb	r2, r2
   11164:	44c3      	add	fp, r8
   11166:	4694      	mov	ip, r2
					b[i][j] = 0;
   11168:	4658      	mov	r0, fp
   1116a:	9a00      	ldr	r2, [sp, #0]
   1116c:	3418      	adds	r4, #24
   1116e:	6002      	str	r2, [r0, #0]
					if (i != 0 && j != c)
   11170:	4662      	mov	r2, ip
   11172:	2a01      	cmp	r2, #1
   11174:	d186      	bne.n	11084 <cal_gain_off+0x344>
					b[i][j] = 0;
   11176:	9a00      	ldr	r2, [sp, #0]
   11178:	92bd      	str	r2, [sp, #756]	; 0x2f4
   1117a:	92be      	str	r2, [sp, #760]	; 0x2f8
   1117c:	92bf      	str	r2, [sp, #764]	; 0x2fc
   1117e:	92c0      	str	r2, [sp, #768]	; 0x300
   11180:	e7eb      	b.n	1115a <cal_gain_off+0x41a>
   11182:	465d      	mov	r5, fp
   11184:	9800      	ldr	r0, [sp, #0]
						n++;
   11186:	3101      	adds	r1, #1
					b[i][j] = 0;
   11188:	6068      	str	r0, [r5, #4]
					if (i != 0 && j != c)
   1118a:	9806      	ldr	r0, [sp, #24]
						n++;
   1118c:	b2c9      	uxtb	r1, r1
					if (i != 0 && j != c)
   1118e:	2801      	cmp	r0, #1
   11190:	d100      	bne.n	11194 <cal_gain_off+0x454>
   11192:	e35d      	b.n	11850 <cal_gain_off+0xb10>
						b[m][n] = a[i][j];
   11194:	2790      	movs	r7, #144	; 0x90
   11196:	464d      	mov	r5, r9
   11198:	00bf      	lsls	r7, r7, #2
   1119a:	a82c      	add	r0, sp, #176	; 0xb0
   1119c:	19c0      	adds	r0, r0, r7
   1119e:	186d      	adds	r5, r5, r1
   111a0:	6867      	ldr	r7, [r4, #4]
   111a2:	00ad      	lsls	r5, r5, #2
   111a4:	5147      	str	r7, [r0, r5]
						if (n < (k - 2))
   111a6:	2902      	cmp	r1, #2
   111a8:	d800      	bhi.n	111ac <cal_gain_off+0x46c>
   111aa:	e34d      	b.n	11848 <cal_gain_off+0xb08>
					b[i][j] = 0;
   111ac:	4659      	mov	r1, fp
   111ae:	9a00      	ldr	r2, [sp, #0]
							m++;
   111b0:	3301      	adds	r3, #1
					b[i][j] = 0;
   111b2:	608a      	str	r2, [r1, #8]
					if (i != 0 && j != c)
   111b4:	9a06      	ldr	r2, [sp, #24]
							m++;
   111b6:	b2db      	uxtb	r3, r3
					if (i != 0 && j != c)
   111b8:	2a02      	cmp	r2, #2
   111ba:	d100      	bne.n	111be <cal_gain_off+0x47e>
   111bc:	e334      	b.n	11828 <cal_gain_off+0xae8>
						b[m][n] = a[i][j];
   111be:	2590      	movs	r5, #144	; 0x90
   111c0:	005a      	lsls	r2, r3, #1
   111c2:	00ad      	lsls	r5, r5, #2
   111c4:	a82c      	add	r0, sp, #176	; 0xb0
   111c6:	1940      	adds	r0, r0, r5
   111c8:	18d1      	adds	r1, r2, r3
   111ca:	68a5      	ldr	r5, [r4, #8]
   111cc:	00c9      	lsls	r1, r1, #3
   111ce:	5045      	str	r5, [r0, r1]
					b[i][j] = 0;
   111d0:	465d      	mov	r5, fp
   111d2:	9800      	ldr	r0, [sp, #0]
						b[m][n] = a[i][j];
   111d4:	2101      	movs	r1, #1
					b[i][j] = 0;
   111d6:	60e8      	str	r0, [r5, #12]
					if (i != 0 && j != c)
   111d8:	4650      	mov	r0, sl
						b[m][n] = a[i][j];
   111da:	4689      	mov	r9, r1
					if (i != 0 && j != c)
   111dc:	2803      	cmp	r0, #3
   111de:	d100      	bne.n	111e2 <cal_gain_off+0x4a2>
   111e0:	e308      	b.n	117f4 <cal_gain_off+0xab4>
						b[m][n] = a[i][j];
   111e2:	18d0      	adds	r0, r2, r3
   111e4:	0040      	lsls	r0, r0, #1
   111e6:	4680      	mov	r8, r0
   111e8:	44c8      	add	r8, r9
   111ea:	4640      	mov	r0, r8
   111ec:	0080      	lsls	r0, r0, #2
   111ee:	4680      	mov	r8, r0
   111f0:	2590      	movs	r5, #144	; 0x90
   111f2:	4647      	mov	r7, r8
   111f4:	00ad      	lsls	r5, r5, #2
   111f6:	a82c      	add	r0, sp, #176	; 0xb0
   111f8:	1940      	adds	r0, r0, r5
   111fa:	68e5      	ldr	r5, [r4, #12]
   111fc:	51c5      	str	r5, [r0, r7]
						if (n < (k - 2))
   111fe:	4648      	mov	r0, r9
   11200:	2802      	cmp	r0, #2
   11202:	dc00      	bgt.n	11206 <cal_gain_off+0x4c6>
   11204:	e31d      	b.n	11842 <cal_gain_off+0xb02>
					b[i][j] = 0;
   11206:	4659      	mov	r1, fp
   11208:	9a00      	ldr	r2, [sp, #0]
							m++;
   1120a:	3301      	adds	r3, #1
					b[i][j] = 0;
   1120c:	610a      	str	r2, [r1, #16]
					if (i != 0 && j != c)
   1120e:	4652      	mov	r2, sl
							m++;
   11210:	b2db      	uxtb	r3, r3
					if (i != 0 && j != c)
   11212:	2a04      	cmp	r2, #4
   11214:	d09d      	beq.n	11152 <cal_gain_off+0x412>
						b[m][n] = a[i][j];
   11216:	2090      	movs	r0, #144	; 0x90
   11218:	005a      	lsls	r2, r3, #1
   1121a:	0080      	lsls	r0, r0, #2
   1121c:	a92c      	add	r1, sp, #176	; 0xb0
   1121e:	1809      	adds	r1, r1, r0
   11220:	18d2      	adds	r2, r2, r3
   11222:	6920      	ldr	r0, [r4, #16]
   11224:	00d2      	lsls	r2, r2, #3
   11226:	5088      	str	r0, [r1, r2]
			for (i = 0;i < k; i++)
   11228:	4662      	mov	r2, ip
						b[m][n] = a[i][j];
   1122a:	2101      	movs	r1, #1
			for (i = 0;i < k; i++)
   1122c:	2a05      	cmp	r2, #5
   1122e:	d194      	bne.n	1115a <cal_gain_off+0x41a>
			det = det + s * (a[0][c] * determinant(b, k - 1));
   11230:	2190      	movs	r1, #144	; 0x90
   11232:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11234:	aa2c      	add	r2, sp, #176	; 0xb0
   11236:	009b      	lsls	r3, r3, #2
   11238:	1852      	adds	r2, r2, r1
   1123a:	58d3      	ldr	r3, [r2, r3]
   1123c:	930f      	str	r3, [sp, #60]	; 0x3c
   1123e:	2300      	movs	r3, #0
   11240:	9307      	str	r3, [sp, #28]
   11242:	2300      	movs	r3, #0
   11244:	4699      	mov	r9, r3
   11246:	23fe      	movs	r3, #254	; 0xfe
   11248:	059b      	lsls	r3, r3, #22
   1124a:	4698      	mov	r8, r3
   1124c:	464b      	mov	r3, r9
   1124e:	9308      	str	r3, [sp, #32]
							n = 0;
   11250:	acbc      	add	r4, sp, #752	; 0x2f0
   11252:	2501      	movs	r5, #1
   11254:	0020      	movs	r0, r4
   11256:	9a07      	ldr	r2, [sp, #28]
   11258:	46ac      	mov	ip, r5
   1125a:	b2d3      	uxtb	r3, r2
   1125c:	469b      	mov	fp, r3
   1125e:	2100      	movs	r1, #0
   11260:	2300      	movs	r3, #0
   11262:	0034      	movs	r4, r6
   11264:	4692      	mov	sl, r2
   11266:	0005      	movs	r5, r0
   11268:	e03d      	b.n	112e6 <cal_gain_off+0x5a6>
   1126a:	46c0      	nop			; (mov r8, r8)
   1126c:	0001ece9 	.word	0x0001ece9
   11270:	0001965d 	.word	0x0001965d
   11274:	bff00000 	.word	0xbff00000
					b[i][j] = 0;
   11278:	9a00      	ldr	r2, [sp, #0]
							m++;
   1127a:	3301      	adds	r3, #1
					b[i][j] = 0;
   1127c:	6062      	str	r2, [r4, #4]
					if (i != 0 && j != c)
   1127e:	465a      	mov	r2, fp
							m++;
   11280:	b2db      	uxtb	r3, r3
					if (i != 0 && j != c)
   11282:	2a01      	cmp	r2, #1
   11284:	d100      	bne.n	11288 <cal_gain_off+0x548>
   11286:	e30c      	b.n	118a2 <cal_gain_off+0xb62>
						b[m][n] = a[i][j];
   11288:	005a      	lsls	r2, r3, #1
   1128a:	6868      	ldr	r0, [r5, #4]
   1128c:	18d1      	adds	r1, r2, r3
   1128e:	00c9      	lsls	r1, r1, #3
   11290:	5070      	str	r0, [r6, r1]
					b[i][j] = 0;
   11292:	9800      	ldr	r0, [sp, #0]
						b[m][n] = a[i][j];
   11294:	2101      	movs	r1, #1
					b[i][j] = 0;
   11296:	60a0      	str	r0, [r4, #8]
					if (i != 0 && j != c)
   11298:	4650      	mov	r0, sl
						b[m][n] = a[i][j];
   1129a:	4689      	mov	r9, r1
					if (i != 0 && j != c)
   1129c:	2802      	cmp	r0, #2
   1129e:	d100      	bne.n	112a2 <cal_gain_off+0x562>
   112a0:	e1f1      	b.n	11686 <cal_gain_off+0x946>
						b[m][n] = a[i][j];
   112a2:	18d0      	adds	r0, r2, r3
   112a4:	0040      	lsls	r0, r0, #1
   112a6:	4448      	add	r0, r9
   112a8:	68af      	ldr	r7, [r5, #8]
   112aa:	0080      	lsls	r0, r0, #2
   112ac:	5037      	str	r7, [r6, r0]
						if (n < (k - 2))
   112ae:	4648      	mov	r0, r9
   112b0:	2801      	cmp	r0, #1
   112b2:	dc00      	bgt.n	112b6 <cal_gain_off+0x576>
   112b4:	e2fd      	b.n	118b2 <cal_gain_off+0xb72>
					b[i][j] = 0;
   112b6:	9a00      	ldr	r2, [sp, #0]
							m++;
   112b8:	3301      	adds	r3, #1
					b[i][j] = 0;
   112ba:	60e2      	str	r2, [r4, #12]
					if (i != 0 && j != c)
   112bc:	4652      	mov	r2, sl
							m++;
   112be:	b2db      	uxtb	r3, r3
							n = 0;
   112c0:	2100      	movs	r1, #0
					if (i != 0 && j != c)
   112c2:	2a03      	cmp	r2, #3
   112c4:	d100      	bne.n	112c8 <cal_gain_off+0x588>
   112c6:	e2d7      	b.n	11878 <cal_gain_off+0xb38>
						b[m][n] = a[i][j];
   112c8:	005a      	lsls	r2, r3, #1
   112ca:	68e9      	ldr	r1, [r5, #12]
   112cc:	18d2      	adds	r2, r2, r3
   112ce:	00d2      	lsls	r2, r2, #3
   112d0:	50b1      	str	r1, [r6, r2]
   112d2:	2101      	movs	r1, #1
			for (i = 0;i < k; i++)
   112d4:	4662      	mov	r2, ip
   112d6:	2a04      	cmp	r2, #4
   112d8:	d04e      	beq.n	11378 <cal_gain_off+0x638>
   112da:	4662      	mov	r2, ip
   112dc:	3201      	adds	r2, #1
   112de:	b2d2      	uxtb	r2, r2
   112e0:	4694      	mov	ip, r2
   112e2:	3418      	adds	r4, #24
   112e4:	3518      	adds	r5, #24
					b[i][j] = 0;
   112e6:	9a00      	ldr	r2, [sp, #0]
   112e8:	6022      	str	r2, [r4, #0]
					if (i != 0 && j != c)
   112ea:	4662      	mov	r2, ip
   112ec:	2a01      	cmp	r2, #1
   112ee:	d100      	bne.n	112f2 <cal_gain_off+0x5b2>
   112f0:	e1b6      	b.n	11660 <cal_gain_off+0x920>
   112f2:	4652      	mov	r2, sl
   112f4:	2a00      	cmp	r2, #0
   112f6:	d100      	bne.n	112fa <cal_gain_off+0x5ba>
   112f8:	e2f0      	b.n	118dc <cal_gain_off+0xb9c>
						b[m][n] = a[i][j];
   112fa:	005a      	lsls	r2, r3, #1
   112fc:	18d0      	adds	r0, r2, r3
   112fe:	0040      	lsls	r0, r0, #1
   11300:	1847      	adds	r7, r0, r1
   11302:	9006      	str	r0, [sp, #24]
   11304:	6828      	ldr	r0, [r5, #0]
   11306:	00bf      	lsls	r7, r7, #2
   11308:	51f0      	str	r0, [r6, r7]
						if (n < (k - 2))
   1130a:	2901      	cmp	r1, #1
   1130c:	dcb4      	bgt.n	11278 <cal_gain_off+0x538>
					b[i][j] = 0;
   1130e:	9800      	ldr	r0, [sp, #0]
						n++;
   11310:	3101      	adds	r1, #1
					b[i][j] = 0;
   11312:	6060      	str	r0, [r4, #4]
					if (i != 0 && j != c)
   11314:	4658      	mov	r0, fp
						n++;
   11316:	b2c9      	uxtb	r1, r1
					if (i != 0 && j != c)
   11318:	2801      	cmp	r0, #1
   1131a:	d100      	bne.n	1131e <cal_gain_off+0x5de>
   1131c:	e1b6      	b.n	1168c <cal_gain_off+0x94c>
						b[m][n] = a[i][j];
   1131e:	9f06      	ldr	r7, [sp, #24]
   11320:	1878      	adds	r0, r7, r1
   11322:	686f      	ldr	r7, [r5, #4]
   11324:	0080      	lsls	r0, r0, #2
   11326:	5037      	str	r7, [r6, r0]
						if (n < (k - 2))
   11328:	2901      	cmp	r1, #1
   1132a:	d800      	bhi.n	1132e <cal_gain_off+0x5ee>
   1132c:	e1a2      	b.n	11674 <cal_gain_off+0x934>
					b[i][j] = 0;
   1132e:	9a00      	ldr	r2, [sp, #0]
							m++;
   11330:	3301      	adds	r3, #1
					b[i][j] = 0;
   11332:	60a2      	str	r2, [r4, #8]
					if (i != 0 && j != c)
   11334:	465a      	mov	r2, fp
							m++;
   11336:	b2db      	uxtb	r3, r3
					if (i != 0 && j != c)
   11338:	2a02      	cmp	r2, #2
   1133a:	d100      	bne.n	1133e <cal_gain_off+0x5fe>
   1133c:	e195      	b.n	1166a <cal_gain_off+0x92a>
						b[m][n] = a[i][j];
   1133e:	005a      	lsls	r2, r3, #1
   11340:	18d1      	adds	r1, r2, r3
   11342:	68a8      	ldr	r0, [r5, #8]
   11344:	00c9      	lsls	r1, r1, #3
   11346:	5070      	str	r0, [r6, r1]
   11348:	2101      	movs	r1, #1
					b[i][j] = 0;
   1134a:	9800      	ldr	r0, [sp, #0]
   1134c:	60e0      	str	r0, [r4, #12]
					if (i != 0 && j != c)
   1134e:	4650      	mov	r0, sl
   11350:	2803      	cmp	r0, #3
   11352:	d100      	bne.n	11356 <cal_gain_off+0x616>
   11354:	e290      	b.n	11878 <cal_gain_off+0xb38>
   11356:	4689      	mov	r9, r1
						b[m][n] = a[i][j];
   11358:	18d2      	adds	r2, r2, r3
   1135a:	0052      	lsls	r2, r2, #1
   1135c:	444a      	add	r2, r9
   1135e:	68e8      	ldr	r0, [r5, #12]
   11360:	0092      	lsls	r2, r2, #2
   11362:	50b0      	str	r0, [r6, r2]
						if (n < (k - 2))
   11364:	464a      	mov	r2, r9
   11366:	2a01      	cmp	r2, #1
   11368:	dc00      	bgt.n	1136c <cal_gain_off+0x62c>
   1136a:	e2b4      	b.n	118d6 <cal_gain_off+0xb96>
			for (i = 0;i < k; i++)
   1136c:	4662      	mov	r2, ip
							m++;
   1136e:	3301      	adds	r3, #1
   11370:	b2db      	uxtb	r3, r3
							n = 0;
   11372:	2100      	movs	r1, #0
			for (i = 0;i < k; i++)
   11374:	2a04      	cmp	r2, #4
   11376:	d1b0      	bne.n	112da <cal_gain_off+0x59a>
			det = det + s * (a[0][c] * determinant(b, k - 1));
   11378:	2103      	movs	r1, #3
   1137a:	4beb      	ldr	r3, [pc, #940]	; (11728 <cal_gain_off+0x9e8>)
   1137c:	0030      	movs	r0, r6
   1137e:	4798      	blx	r3
   11380:	2190      	movs	r1, #144	; 0x90
   11382:	9c07      	ldr	r4, [sp, #28]
   11384:	0089      	lsls	r1, r1, #2
   11386:	aa2c      	add	r2, sp, #176	; 0xb0
   11388:	00a3      	lsls	r3, r4, #2
   1138a:	1852      	adds	r2, r2, r1
   1138c:	58d1      	ldr	r1, [r2, r3]
   1138e:	9d04      	ldr	r5, [sp, #16]
   11390:	47a8      	blx	r5
   11392:	4641      	mov	r1, r8
   11394:	47a8      	blx	r5
   11396:	9b02      	ldr	r3, [sp, #8]
   11398:	1c01      	adds	r1, r0, #0
   1139a:	9808      	ldr	r0, [sp, #32]
   1139c:	4798      	blx	r3
			s = -1 * s;
   1139e:	2380      	movs	r3, #128	; 0x80
   113a0:	061b      	lsls	r3, r3, #24
   113a2:	4443      	add	r3, r8
   113a4:	4698      	mov	r8, r3
   113a6:	0023      	movs	r3, r4
   113a8:	3301      	adds	r3, #1
			det = det + s * (a[0][c] * determinant(b, k - 1));
   113aa:	9008      	str	r0, [sp, #32]
   113ac:	9307      	str	r3, [sp, #28]
		for (c = 0; c < k; c++)
   113ae:	2b04      	cmp	r3, #4
   113b0:	d000      	beq.n	113b4 <cal_gain_off+0x674>
   113b2:	e74d      	b.n	11250 <cal_gain_off+0x510>
   113b4:	4681      	mov	r9, r0
   113b6:	002c      	movs	r4, r5
			det = det + s * (a[0][c] * determinant(b, k - 1));
   113b8:	4649      	mov	r1, r9
   113ba:	980f      	ldr	r0, [sp, #60]	; 0x3c
   113bc:	47a0      	blx	r4
   113be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   113c0:	1c29      	adds	r1, r5, #0
   113c2:	47a0      	blx	r4
   113c4:	9b02      	ldr	r3, [sp, #8]
   113c6:	1c01      	adds	r1, r0, #0
   113c8:	980a      	ldr	r0, [sp, #40]	; 0x28
   113ca:	4798      	blx	r3
			s = -1 * s;
   113cc:	2280      	movs	r2, #128	; 0x80
   113ce:	0612      	lsls	r2, r2, #24
   113d0:	002b      	movs	r3, r5
   113d2:	4694      	mov	ip, r2
   113d4:	4463      	add	r3, ip
   113d6:	930c      	str	r3, [sp, #48]	; 0x30
   113d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
			det = det + s * (a[0][c] * determinant(b, k - 1));
   113da:	900a      	str	r0, [sp, #40]	; 0x28
   113dc:	3301      	adds	r3, #1
   113de:	9309      	str	r3, [sp, #36]	; 0x24
		for (c = 0; c < k; c++)
   113e0:	2b05      	cmp	r3, #5
   113e2:	d000      	beq.n	113e6 <cal_gain_off+0x6a6>
   113e4:	e63b      	b.n	1105e <cal_gain_off+0x31e>
			fac[q][p] = pow(-1, q + p) * determinant(b, f - 1);
   113e6:	4bd1      	ldr	r3, [pc, #836]	; (1172c <cal_gain_off+0x9ec>)
   113e8:	4798      	blx	r3
   113ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
   113ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   113ee:	4cd0      	ldr	r4, [pc, #832]	; (11730 <cal_gain_off+0x9f0>)
   113f0:	47a0      	blx	r4
   113f2:	4bd0      	ldr	r3, [pc, #832]	; (11734 <cal_gain_off+0x9f4>)
   113f4:	4798      	blx	r3
   113f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   113f8:	c301      	stmia	r3!, {r0}
   113fa:	9311      	str	r3, [sp, #68]	; 0x44
   113fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   113fe:	3301      	adds	r3, #1
   11400:	930e      	str	r3, [sp, #56]	; 0x38
		for (p = 0;p < f; p++)
   11402:	2b06      	cmp	r3, #6
   11404:	d000      	beq.n	11408 <cal_gain_off+0x6c8>
   11406:	e52d      	b.n	10e64 <cal_gain_off+0x124>
   11408:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1140a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1140c:	3301      	adds	r3, #1
   1140e:	3218      	adds	r2, #24
   11410:	930d      	str	r3, [sp, #52]	; 0x34
   11412:	9210      	str	r2, [sp, #64]	; 0x40
	for (q = 0;q < f; q++)
   11414:	2b06      	cmp	r3, #6
   11416:	d000      	beq.n	1141a <cal_gain_off+0x6da>
   11418:	e51b      	b.n	10e52 <cal_gain_off+0x112>
			b[i][j] = fac[j][i];
   1141a:	9b74      	ldr	r3, [sp, #464]	; 0x1d0
   1141c:	2290      	movs	r2, #144	; 0x90
   1141e:	9398      	str	r3, [sp, #608]	; 0x260
   11420:	9b7a      	ldr	r3, [sp, #488]	; 0x1e8
   11422:	2180      	movs	r1, #128	; 0x80
   11424:	9399      	str	r3, [sp, #612]	; 0x264
   11426:	9b80      	ldr	r3, [sp, #512]	; 0x200
   11428:	2090      	movs	r0, #144	; 0x90
   1142a:	939a      	str	r3, [sp, #616]	; 0x268
   1142c:	9b86      	ldr	r3, [sp, #536]	; 0x218
   1142e:	0052      	lsls	r2, r2, #1
   11430:	939b      	str	r3, [sp, #620]	; 0x26c
   11432:	9b8c      	ldr	r3, [sp, #560]	; 0x230
   11434:	0040      	lsls	r0, r0, #1
   11436:	939c      	str	r3, [sp, #624]	; 0x270
   11438:	9b92      	ldr	r3, [sp, #584]	; 0x248
   1143a:	2490      	movs	r4, #144	; 0x90
   1143c:	939d      	str	r3, [sp, #628]	; 0x274
   1143e:	9b75      	ldr	r3, [sp, #468]	; 0x1d4
   11440:	0064      	lsls	r4, r4, #1
   11442:	939e      	str	r3, [sp, #632]	; 0x278
   11444:	9b7b      	ldr	r3, [sp, #492]	; 0x1ec
   11446:	2700      	movs	r7, #0
   11448:	939f      	str	r3, [sp, #636]	; 0x27c
   1144a:	9b81      	ldr	r3, [sp, #516]	; 0x204
					b[i][j] = 0;
   1144c:	46ba      	mov	sl, r7
			b[i][j] = fac[j][i];
   1144e:	93a0      	str	r3, [sp, #640]	; 0x280
   11450:	9b87      	ldr	r3, [sp, #540]	; 0x21c
   11452:	93a1      	str	r3, [sp, #644]	; 0x284
   11454:	9b8d      	ldr	r3, [sp, #564]	; 0x234
   11456:	93a2      	str	r3, [sp, #648]	; 0x288
   11458:	9b93      	ldr	r3, [sp, #588]	; 0x24c
   1145a:	93a3      	str	r3, [sp, #652]	; 0x28c
   1145c:	9b76      	ldr	r3, [sp, #472]	; 0x1d8
   1145e:	93a4      	str	r3, [sp, #656]	; 0x290
   11460:	9b7c      	ldr	r3, [sp, #496]	; 0x1f0
   11462:	93a5      	str	r3, [sp, #660]	; 0x294
   11464:	9b82      	ldr	r3, [sp, #520]	; 0x208
   11466:	93a6      	str	r3, [sp, #664]	; 0x298
   11468:	9b88      	ldr	r3, [sp, #544]	; 0x220
   1146a:	93a7      	str	r3, [sp, #668]	; 0x29c
   1146c:	9b8e      	ldr	r3, [sp, #568]	; 0x238
   1146e:	93a8      	str	r3, [sp, #672]	; 0x2a0
   11470:	ab2c      	add	r3, sp, #176	; 0xb0
   11472:	189b      	adds	r3, r3, r2
   11474:	585b      	ldr	r3, [r3, r1]
   11476:	3a9c      	subs	r2, #156	; 0x9c
   11478:	93a9      	str	r3, [sp, #676]	; 0x2a4
   1147a:	9b77      	ldr	r3, [sp, #476]	; 0x1dc
   1147c:	93aa      	str	r3, [sp, #680]	; 0x2a8
   1147e:	9b7d      	ldr	r3, [sp, #500]	; 0x1f4
   11480:	93ab      	str	r3, [sp, #684]	; 0x2ac
   11482:	9b83      	ldr	r3, [sp, #524]	; 0x20c
   11484:	93ac      	str	r3, [sp, #688]	; 0x2b0
   11486:	9b89      	ldr	r3, [sp, #548]	; 0x224
   11488:	93ad      	str	r3, [sp, #692]	; 0x2b4
   1148a:	9b8f      	ldr	r3, [sp, #572]	; 0x23c
   1148c:	93ae      	str	r3, [sp, #696]	; 0x2b8
   1148e:	ab2c      	add	r3, sp, #176	; 0xb0
   11490:	181b      	adds	r3, r3, r0
   11492:	589b      	ldr	r3, [r3, r2]
   11494:	a82c      	add	r0, sp, #176	; 0xb0
   11496:	93af      	str	r3, [sp, #700]	; 0x2bc
   11498:	9b78      	ldr	r3, [sp, #480]	; 0x1e0
   1149a:	1900      	adds	r0, r0, r4
   1149c:	93b0      	str	r3, [sp, #704]	; 0x2c0
   1149e:	9b7e      	ldr	r3, [sp, #504]	; 0x1f8
   114a0:	3490      	adds	r4, #144	; 0x90
   114a2:	93b1      	str	r3, [sp, #708]	; 0x2c4
   114a4:	9b84      	ldr	r3, [sp, #528]	; 0x210
   114a6:	93b2      	str	r3, [sp, #712]	; 0x2c8
   114a8:	9b8a      	ldr	r3, [sp, #552]	; 0x228
   114aa:	93b3      	str	r3, [sp, #716]	; 0x2cc
   114ac:	9b90      	ldr	r3, [sp, #576]	; 0x240
   114ae:	93b4      	str	r3, [sp, #720]	; 0x2d0
   114b0:	2388      	movs	r3, #136	; 0x88
   114b2:	58c0      	ldr	r0, [r0, r3]
   114b4:	90b5      	str	r0, [sp, #724]	; 0x2d4
   114b6:	9879      	ldr	r0, [sp, #484]	; 0x1e4
   114b8:	90b6      	str	r0, [sp, #728]	; 0x2d8
   114ba:	987f      	ldr	r0, [sp, #508]	; 0x1fc
   114bc:	90b7      	str	r0, [sp, #732]	; 0x2dc
   114be:	9885      	ldr	r0, [sp, #532]	; 0x214
   114c0:	9708      	str	r7, [sp, #32]
   114c2:	9000      	str	r0, [sp, #0]
   114c4:	a82c      	add	r0, sp, #176	; 0xb0
   114c6:	1900      	adds	r0, r0, r4
   114c8:	9c00      	ldr	r4, [sp, #0]
   114ca:	5044      	str	r4, [r0, r1]
   114cc:	20d8      	movs	r0, #216	; 0xd8
   114ce:	998b      	ldr	r1, [sp, #556]	; 0x22c
   114d0:	0040      	lsls	r0, r0, #1
   114d2:	9100      	str	r1, [sp, #0]
   114d4:	a92c      	add	r1, sp, #176	; 0xb0
   114d6:	1809      	adds	r1, r1, r0
   114d8:	9800      	ldr	r0, [sp, #0]
   114da:	5088      	str	r0, [r1, r2]
   114dc:	21d8      	movs	r1, #216	; 0xd8
   114de:	9a91      	ldr	r2, [sp, #580]	; 0x244
   114e0:	0049      	lsls	r1, r1, #1
   114e2:	9200      	str	r2, [sp, #0]
   114e4:	aa2c      	add	r2, sp, #176	; 0xb0
   114e6:	1852      	adds	r2, r2, r1
   114e8:	9900      	ldr	r1, [sp, #0]
   114ea:	50d1      	str	r1, [r2, r3]
   114ec:	2190      	movs	r1, #144	; 0x90
   114ee:	aa2c      	add	r2, sp, #176	; 0xb0
   114f0:	0049      	lsls	r1, r1, #1
   114f2:	3304      	adds	r3, #4
   114f4:	1852      	adds	r2, r2, r1
   114f6:	58d2      	ldr	r2, [r2, r3]
   114f8:	3190      	adds	r1, #144	; 0x90
   114fa:	9200      	str	r2, [sp, #0]
   114fc:	aa2c      	add	r2, sp, #176	; 0xb0
   114fe:	1852      	adds	r2, r2, r1
   11500:	9900      	ldr	r1, [sp, #0]
   11502:	50d1      	str	r1, [r2, r3]
   11504:	2300      	movs	r3, #0
   11506:	4699      	mov	r9, r3
   11508:	23fe      	movs	r3, #254	; 0xfe
   1150a:	464c      	mov	r4, r9
   1150c:	059b      	lsls	r3, r3, #22
   1150e:	9309      	str	r3, [sp, #36]	; 0x24
   11510:	b2e3      	uxtb	r3, r4
   11512:	4698      	mov	r8, r3
	for (i=0;i<6;i++){
   11514:	2301      	movs	r3, #1
   11516:	4641      	mov	r1, r8
   11518:	469c      	mov	ip, r3
   1151a:	9106      	str	r1, [sp, #24]
					b[i][j] = 0;
   1151c:	4651      	mov	r1, sl
	for (i=0;i<6;i++){
   1151e:	a8bc      	add	r0, sp, #752	; 0x2f0
					b[i][j] = 0;
   11520:	6001      	str	r1, [r0, #0]
					if (i != 0 && j != c)
   11522:	4661      	mov	r1, ip
	for (i=0;i<6;i++){
   11524:	ad2c      	add	r5, sp, #176	; 0xb0
   11526:	2200      	movs	r2, #0
   11528:	2300      	movs	r3, #0
   1152a:	9400      	str	r4, [sp, #0]
					if (i != 0 && j != c)
   1152c:	2901      	cmp	r1, #1
   1152e:	d100      	bne.n	11532 <cal_gain_off+0x7f2>
   11530:	e08f      	b.n	11652 <cal_gain_off+0x912>
   11532:	9900      	ldr	r1, [sp, #0]
   11534:	2900      	cmp	r1, #0
   11536:	d101      	bne.n	1153c <cal_gain_off+0x7fc>
   11538:	f000 fefd 	bl	12336 <cal_gain_off+0x15f6>
						b[m][n] = a[i][j];
   1153c:	0059      	lsls	r1, r3, #1
   1153e:	18cf      	adds	r7, r1, r3
   11540:	468b      	mov	fp, r1
   11542:	0079      	lsls	r1, r7, #1
   11544:	188c      	adds	r4, r1, r2
   11546:	00a4      	lsls	r4, r4, #2
   11548:	46a1      	mov	r9, r4
   1154a:	4688      	mov	r8, r1
   1154c:	2190      	movs	r1, #144	; 0x90
   1154e:	464f      	mov	r7, r9
   11550:	0089      	lsls	r1, r1, #2
   11552:	ac2c      	add	r4, sp, #176	; 0xb0
   11554:	1864      	adds	r4, r4, r1
   11556:	6829      	ldr	r1, [r5, #0]
   11558:	51e1      	str	r1, [r4, r7]
						if (n < (k - 2))
   1155a:	2a03      	cmp	r2, #3
   1155c:	dc00      	bgt.n	11560 <cal_gain_off+0x820>
   1155e:	e1ce      	b.n	118fe <cal_gain_off+0xbbe>
					b[i][j] = 0;
   11560:	4652      	mov	r2, sl
   11562:	6042      	str	r2, [r0, #4]
					if (i != 0 && j != c)
   11564:	9a06      	ldr	r2, [sp, #24]
							m++;
   11566:	3301      	adds	r3, #1
   11568:	b2db      	uxtb	r3, r3
					if (i != 0 && j != c)
   1156a:	2a01      	cmp	r2, #1
   1156c:	d100      	bne.n	11570 <cal_gain_off+0x830>
   1156e:	e2ee      	b.n	11b4e <cal_gain_off+0xe0e>
						b[m][n] = a[i][j];
   11570:	2490      	movs	r4, #144	; 0x90
   11572:	005a      	lsls	r2, r3, #1
   11574:	00a4      	lsls	r4, r4, #2
   11576:	a92c      	add	r1, sp, #176	; 0xb0
   11578:	1909      	adds	r1, r1, r4
   1157a:	4693      	mov	fp, r2
   1157c:	686c      	ldr	r4, [r5, #4]
   1157e:	18d2      	adds	r2, r2, r3
   11580:	00d2      	lsls	r2, r2, #3
   11582:	508c      	str	r4, [r1, r2]
   11584:	2201      	movs	r2, #1
   11586:	4691      	mov	r9, r2
					b[i][j] = 0;
   11588:	4651      	mov	r1, sl
   1158a:	6081      	str	r1, [r0, #8]
					if (i != 0 && j != c)
   1158c:	9900      	ldr	r1, [sp, #0]
   1158e:	2902      	cmp	r1, #2
   11590:	d101      	bne.n	11596 <cal_gain_off+0x856>
   11592:	f000 fe9b 	bl	122cc <cal_gain_off+0x158c>
						b[m][n] = a[i][j];
   11596:	465c      	mov	r4, fp
   11598:	18e7      	adds	r7, r4, r3
   1159a:	2490      	movs	r4, #144	; 0x90
   1159c:	007f      	lsls	r7, r7, #1
   1159e:	00a4      	lsls	r4, r4, #2
   115a0:	a92c      	add	r1, sp, #176	; 0xb0
   115a2:	1909      	adds	r1, r1, r4
   115a4:	444f      	add	r7, r9
   115a6:	68ac      	ldr	r4, [r5, #8]
   115a8:	00bf      	lsls	r7, r7, #2
   115aa:	51cc      	str	r4, [r1, r7]
						if (n < (k - 2))
   115ac:	4649      	mov	r1, r9
   115ae:	2903      	cmp	r1, #3
   115b0:	dc00      	bgt.n	115b4 <cal_gain_off+0x874>
   115b2:	e2d9      	b.n	11b68 <cal_gain_off+0xe28>
					b[i][j] = 0;
   115b4:	4652      	mov	r2, sl
   115b6:	60c2      	str	r2, [r0, #12]
					if (i != 0 && j != c)
   115b8:	9a00      	ldr	r2, [sp, #0]
							m++;
   115ba:	3301      	adds	r3, #1
   115bc:	b2db      	uxtb	r3, r3
					if (i != 0 && j != c)
   115be:	2a03      	cmp	r2, #3
   115c0:	d100      	bne.n	115c4 <cal_gain_off+0x884>
   115c2:	e2b4      	b.n	11b2e <cal_gain_off+0xdee>
						b[m][n] = a[i][j];
   115c4:	2490      	movs	r4, #144	; 0x90
   115c6:	005a      	lsls	r2, r3, #1
   115c8:	00a4      	lsls	r4, r4, #2
   115ca:	a92c      	add	r1, sp, #176	; 0xb0
   115cc:	1909      	adds	r1, r1, r4
   115ce:	4693      	mov	fp, r2
   115d0:	68ec      	ldr	r4, [r5, #12]
   115d2:	18d2      	adds	r2, r2, r3
   115d4:	00d2      	lsls	r2, r2, #3
   115d6:	508c      	str	r4, [r1, r2]
					b[i][j] = 0;
   115d8:	4651      	mov	r1, sl
						b[m][n] = a[i][j];
   115da:	2201      	movs	r2, #1
					b[i][j] = 0;
   115dc:	6101      	str	r1, [r0, #16]
					if (i != 0 && j != c)
   115de:	9900      	ldr	r1, [sp, #0]
						b[m][n] = a[i][j];
   115e0:	4690      	mov	r8, r2
					if (i != 0 && j != c)
   115e2:	2904      	cmp	r1, #4
   115e4:	d100      	bne.n	115e8 <cal_gain_off+0x8a8>
   115e6:	e29f      	b.n	11b28 <cal_gain_off+0xde8>
						b[m][n] = a[i][j];
   115e8:	465c      	mov	r4, fp
   115ea:	18e1      	adds	r1, r4, r3
   115ec:	0049      	lsls	r1, r1, #1
   115ee:	4689      	mov	r9, r1
   115f0:	44c1      	add	r9, r8
   115f2:	4649      	mov	r1, r9
   115f4:	0089      	lsls	r1, r1, #2
   115f6:	4689      	mov	r9, r1
   115f8:	2790      	movs	r7, #144	; 0x90
   115fa:	464c      	mov	r4, r9
   115fc:	00bf      	lsls	r7, r7, #2
   115fe:	a92c      	add	r1, sp, #176	; 0xb0
   11600:	19c9      	adds	r1, r1, r7
   11602:	692f      	ldr	r7, [r5, #16]
   11604:	510f      	str	r7, [r1, r4]
						if (n < (k - 2))
   11606:	4641      	mov	r1, r8
   11608:	2903      	cmp	r1, #3
   1160a:	dc00      	bgt.n	1160e <cal_gain_off+0x8ce>
   1160c:	e29c      	b.n	11b48 <cal_gain_off+0xe08>
					b[i][j] = 0;
   1160e:	4652      	mov	r2, sl
   11610:	6142      	str	r2, [r0, #20]
					if (i != 0 && j != c)
   11612:	9a00      	ldr	r2, [sp, #0]
							m++;
   11614:	3301      	adds	r3, #1
   11616:	b2db      	uxtb	r3, r3
					if (i != 0 && j != c)
   11618:	2a05      	cmp	r2, #5
   1161a:	d100      	bne.n	1161e <cal_gain_off+0x8de>
   1161c:	e1da      	b.n	119d4 <cal_gain_off+0xc94>
						b[m][n] = a[i][j];
   1161e:	2490      	movs	r4, #144	; 0x90
   11620:	005a      	lsls	r2, r3, #1
   11622:	00a4      	lsls	r4, r4, #2
   11624:	a92c      	add	r1, sp, #176	; 0xb0
   11626:	1909      	adds	r1, r1, r4
   11628:	18d2      	adds	r2, r2, r3
   1162a:	696c      	ldr	r4, [r5, #20]
   1162c:	00d2      	lsls	r2, r2, #3
   1162e:	508c      	str	r4, [r1, r2]
   11630:	2201      	movs	r2, #1
			for (i = 0;i < k; i++)
   11632:	4661      	mov	r1, ip
   11634:	2906      	cmp	r1, #6
   11636:	d100      	bne.n	1163a <cal_gain_off+0x8fa>
   11638:	e1d1      	b.n	119de <cal_gain_off+0xc9e>
   1163a:	4661      	mov	r1, ip
   1163c:	3101      	adds	r1, #1
   1163e:	b2c9      	uxtb	r1, r1
   11640:	468c      	mov	ip, r1
					b[i][j] = 0;
   11642:	4651      	mov	r1, sl
   11644:	3018      	adds	r0, #24
   11646:	6001      	str	r1, [r0, #0]
					if (i != 0 && j != c)
   11648:	4661      	mov	r1, ip
   1164a:	3518      	adds	r5, #24
   1164c:	2901      	cmp	r1, #1
   1164e:	d000      	beq.n	11652 <cal_gain_off+0x912>
   11650:	e76f      	b.n	11532 <cal_gain_off+0x7f2>
					b[i][j] = 0;
   11652:	4651      	mov	r1, sl
   11654:	91bd      	str	r1, [sp, #756]	; 0x2f4
   11656:	91be      	str	r1, [sp, #760]	; 0x2f8
   11658:	91bf      	str	r1, [sp, #764]	; 0x2fc
   1165a:	91c0      	str	r1, [sp, #768]	; 0x300
   1165c:	91c1      	str	r1, [sp, #772]	; 0x304
   1165e:	e7ec      	b.n	1163a <cal_gain_off+0x8fa>
   11660:	9a00      	ldr	r2, [sp, #0]
   11662:	6072      	str	r2, [r6, #4]
   11664:	60b2      	str	r2, [r6, #8]
   11666:	60f2      	str	r2, [r6, #12]
   11668:	e637      	b.n	112da <cal_gain_off+0x59a>
   1166a:	9a00      	ldr	r2, [sp, #0]
							n = 0;
   1166c:	2100      	movs	r1, #0
					b[i][j] = 0;
   1166e:	60e2      	str	r2, [r4, #12]
   11670:	005a      	lsls	r2, r3, #1
   11672:	e670      	b.n	11356 <cal_gain_off+0x616>
   11674:	9800      	ldr	r0, [sp, #0]
   11676:	3101      	adds	r1, #1
   11678:	60a0      	str	r0, [r4, #8]
					if (i != 0 && j != c)
   1167a:	4650      	mov	r0, sl
   1167c:	b2c9      	uxtb	r1, r1
   1167e:	4689      	mov	r9, r1
   11680:	2802      	cmp	r0, #2
   11682:	d000      	beq.n	11686 <cal_gain_off+0x946>
   11684:	e60d      	b.n	112a2 <cal_gain_off+0x562>
					b[i][j] = 0;
   11686:	9800      	ldr	r0, [sp, #0]
   11688:	60e0      	str	r0, [r4, #12]
   1168a:	e665      	b.n	11358 <cal_gain_off+0x618>
   1168c:	9800      	ldr	r0, [sp, #0]
						b[m][n] = a[i][j];
   1168e:	68af      	ldr	r7, [r5, #8]
					b[i][j] = 0;
   11690:	60a0      	str	r0, [r4, #8]
						b[m][n] = a[i][j];
   11692:	9806      	ldr	r0, [sp, #24]
   11694:	1840      	adds	r0, r0, r1
   11696:	0080      	lsls	r0, r0, #2
   11698:	5037      	str	r7, [r6, r0]
						if (n < (k - 2))
   1169a:	2901      	cmp	r1, #1
   1169c:	dc00      	bgt.n	116a0 <cal_gain_off+0x960>
   1169e:	e108      	b.n	118b2 <cal_gain_off+0xb72>
					b[i][j] = 0;
   116a0:	9a00      	ldr	r2, [sp, #0]
							m++;
   116a2:	3301      	adds	r3, #1
   116a4:	b2db      	uxtb	r3, r3
					b[i][j] = 0;
   116a6:	60e2      	str	r2, [r4, #12]
   116a8:	e60e      	b.n	112c8 <cal_gain_off+0x588>
   116aa:	3101      	adds	r1, #1
   116ac:	b2c9      	uxtb	r1, r1
   116ae:	e551      	b.n	11154 <cal_gain_off+0x414>
   116b0:	465a      	mov	r2, fp
   116b2:	9900      	ldr	r1, [sp, #0]
   116b4:	6111      	str	r1, [r2, #16]
							n = 0;
   116b6:	2100      	movs	r1, #0
   116b8:	005a      	lsls	r2, r3, #1
   116ba:	e539      	b.n	11130 <cal_gain_off+0x3f0>
					b[i][j] = 0;
   116bc:	465a      	mov	r2, fp
						b[m][n] = a[i][j];
   116be:	2790      	movs	r7, #144	; 0x90
					b[i][j] = 0;
   116c0:	9800      	ldr	r0, [sp, #0]
						b[m][n] = a[i][j];
   116c2:	00bf      	lsls	r7, r7, #2
					b[i][j] = 0;
   116c4:	6050      	str	r0, [r2, #4]
						b[m][n] = a[i][j];
   116c6:	005a      	lsls	r2, r3, #1
   116c8:	18d5      	adds	r5, r2, r3
   116ca:	006d      	lsls	r5, r5, #1
   116cc:	a82c      	add	r0, sp, #176	; 0xb0
   116ce:	19c0      	adds	r0, r0, r7
   116d0:	186d      	adds	r5, r5, r1
   116d2:	6867      	ldr	r7, [r4, #4]
   116d4:	00ad      	lsls	r5, r5, #2
   116d6:	5147      	str	r7, [r0, r5]
						if (n < (k - 2))
   116d8:	2902      	cmp	r1, #2
   116da:	dc00      	bgt.n	116de <cal_gain_off+0x99e>
   116dc:	e0b4      	b.n	11848 <cal_gain_off+0xb08>
					b[i][j] = 0;
   116de:	465a      	mov	r2, fp
   116e0:	9900      	ldr	r1, [sp, #0]
							m++;
   116e2:	3301      	adds	r3, #1
   116e4:	b2db      	uxtb	r3, r3
					b[i][j] = 0;
   116e6:	6091      	str	r1, [r2, #8]
   116e8:	e569      	b.n	111be <cal_gain_off+0x47e>
						b[m][n] = source[i][j];
   116ea:	2590      	movs	r5, #144	; 0x90
   116ec:	0059      	lsls	r1, r3, #1
   116ee:	ac2c      	add	r4, sp, #176	; 0xb0
   116f0:	1964      	adds	r4, r4, r5
   116f2:	18ca      	adds	r2, r1, r3
   116f4:	68c5      	ldr	r5, [r0, #12]
   116f6:	00d2      	lsls	r2, r2, #3
   116f8:	50a5      	str	r5, [r4, r2]
							n = 0;
   116fa:	2200      	movs	r2, #0
   116fc:	3201      	adds	r2, #1
   116fe:	b2d2      	uxtb	r2, r2
   11700:	4693      	mov	fp, r2
   11702:	f7ff fbf6 	bl	10ef2 <cal_gain_off+0x1b2>
						b[m][n] = source[i][j];
   11706:	2790      	movs	r7, #144	; 0x90
   11708:	18cc      	adds	r4, r1, r3
   1170a:	0064      	lsls	r4, r4, #1
   1170c:	ad2c      	add	r5, sp, #176	; 0xb0
   1170e:	19ed      	adds	r5, r5, r7
   11710:	444c      	add	r4, r9
   11712:	6907      	ldr	r7, [r0, #16]
   11714:	00a4      	lsls	r4, r4, #2
   11716:	512f      	str	r7, [r5, r4]
						if (n < (f - 2))
   11718:	464c      	mov	r4, r9
   1171a:	2c03      	cmp	r4, #3
   1171c:	dd2f      	ble.n	1177e <cal_gain_off+0xa3e>
							m++;
   1171e:	3301      	adds	r3, #1
   11720:	b2db      	uxtb	r3, r3
   11722:	f7ff fc01 	bl	10f28 <cal_gain_off+0x1e8>
   11726:	46c0      	nop			; (mov r8, r8)
   11728:	0000efd9 	.word	0x0000efd9
   1172c:	0001eddd 	.word	0x0001eddd
   11730:	0001e115 	.word	0x0001e115
   11734:	0001ee81 	.word	0x0001ee81
					if (i != q && j != p)
   11738:	4654      	mov	r4, sl
   1173a:	3201      	adds	r2, #1
   1173c:	b2d2      	uxtb	r2, r2
   1173e:	4691      	mov	r9, r2
   11740:	2c02      	cmp	r4, #2
   11742:	d001      	beq.n	11748 <cal_gain_off+0xa08>
   11744:	f7ff fbb6 	bl	10eb4 <cal_gain_off+0x174>
						b[m][n] = source[i][j];
   11748:	2790      	movs	r7, #144	; 0x90
   1174a:	18cc      	adds	r4, r1, r3
   1174c:	0064      	lsls	r4, r4, #1
   1174e:	ad2c      	add	r5, sp, #176	; 0xb0
   11750:	19ed      	adds	r5, r5, r7
   11752:	444c      	add	r4, r9
   11754:	68c7      	ldr	r7, [r0, #12]
   11756:	00a4      	lsls	r4, r4, #2
   11758:	512f      	str	r7, [r5, r4]
						if (n < (f - 2))
   1175a:	464c      	mov	r4, r9
   1175c:	2c03      	cmp	r4, #3
   1175e:	ddcd      	ble.n	116fc <cal_gain_off+0x9bc>
							m++;
   11760:	3301      	adds	r3, #1
   11762:	b2db      	uxtb	r3, r3
   11764:	e440      	b.n	10fe8 <cal_gain_off+0x2a8>
							n = 0;
   11766:	2200      	movs	r2, #0
   11768:	0059      	lsls	r1, r3, #1
   1176a:	e449      	b.n	11000 <cal_gain_off+0x2c0>
						b[m][n] = source[i][j];
   1176c:	2590      	movs	r5, #144	; 0x90
   1176e:	0059      	lsls	r1, r3, #1
   11770:	ac2c      	add	r4, sp, #176	; 0xb0
   11772:	1964      	adds	r4, r4, r5
   11774:	18ca      	adds	r2, r1, r3
   11776:	6905      	ldr	r5, [r0, #16]
   11778:	00d2      	lsls	r2, r2, #3
   1177a:	50a5      	str	r5, [r4, r2]
							n = 0;
   1177c:	2200      	movs	r2, #0
   1177e:	3201      	adds	r2, #1
   11780:	b2d2      	uxtb	r2, r2
   11782:	e43a      	b.n	10ffa <cal_gain_off+0x2ba>
						b[m][n] = source[i][j];
   11784:	2590      	movs	r5, #144	; 0x90
   11786:	0059      	lsls	r1, r3, #1
   11788:	ac2c      	add	r4, sp, #176	; 0xb0
   1178a:	1964      	adds	r4, r4, r5
   1178c:	18ca      	adds	r2, r1, r3
   1178e:	6885      	ldr	r5, [r0, #8]
   11790:	00d2      	lsls	r2, r2, #3
   11792:	50a5      	str	r5, [r4, r2]
							n = 0;
   11794:	2200      	movs	r2, #0
   11796:	3201      	adds	r2, #1
   11798:	b2d2      	uxtb	r2, r2
   1179a:	4691      	mov	r9, r2
   1179c:	e40d      	b.n	10fba <cal_gain_off+0x27a>
						b[m][n] = source[i][j];
   1179e:	2790      	movs	r7, #144	; 0x90
   117a0:	0059      	lsls	r1, r3, #1
   117a2:	18cc      	adds	r4, r1, r3
   117a4:	0064      	lsls	r4, r4, #1
   117a6:	ad2c      	add	r5, sp, #176	; 0xb0
   117a8:	19ed      	adds	r5, r5, r7
   117aa:	18a4      	adds	r4, r4, r2
   117ac:	6847      	ldr	r7, [r0, #4]
   117ae:	00a4      	lsls	r4, r4, #2
   117b0:	512f      	str	r7, [r5, r4]
						if (n < (f - 2))
   117b2:	2a03      	cmp	r2, #3
   117b4:	ddc0      	ble.n	11738 <cal_gain_off+0x9f8>
							m++;
   117b6:	3301      	adds	r3, #1
   117b8:	b2db      	uxtb	r3, r3
   117ba:	f7ff fbf4 	bl	10fa6 <cal_gain_off+0x266>
   117be:	3201      	adds	r2, #1
   117c0:	b2d2      	uxtb	r2, r2
   117c2:	f7ff fbba 	bl	10f3a <cal_gain_off+0x1fa>
					b[i][j] = 0;
   117c6:	465a      	mov	r2, fp
						b[m][n] = a[i][j];
   117c8:	2590      	movs	r5, #144	; 0x90
					b[i][j] = 0;
   117ca:	9900      	ldr	r1, [sp, #0]
						b[m][n] = a[i][j];
   117cc:	00ad      	lsls	r5, r5, #2
					b[i][j] = 0;
   117ce:	6091      	str	r1, [r2, #8]
						b[m][n] = a[i][j];
   117d0:	a82c      	add	r0, sp, #176	; 0xb0
   117d2:	005a      	lsls	r2, r3, #1
   117d4:	1940      	adds	r0, r0, r5
   117d6:	18d1      	adds	r1, r2, r3
   117d8:	68a5      	ldr	r5, [r4, #8]
   117da:	00c9      	lsls	r1, r1, #3
   117dc:	5045      	str	r5, [r0, r1]
							n = 0;
   117de:	2100      	movs	r1, #0
					b[i][j] = 0;
   117e0:	465d      	mov	r5, fp
   117e2:	9800      	ldr	r0, [sp, #0]
   117e4:	3101      	adds	r1, #1
   117e6:	60e8      	str	r0, [r5, #12]
					if (i != 0 && j != c)
   117e8:	4650      	mov	r0, sl
   117ea:	b2c9      	uxtb	r1, r1
   117ec:	4689      	mov	r9, r1
   117ee:	2803      	cmp	r0, #3
   117f0:	d000      	beq.n	117f4 <cal_gain_off+0xab4>
   117f2:	e4f6      	b.n	111e2 <cal_gain_off+0x4a2>
					b[i][j] = 0;
   117f4:	4658      	mov	r0, fp
   117f6:	9d00      	ldr	r5, [sp, #0]
   117f8:	6105      	str	r5, [r0, #16]
   117fa:	e49a      	b.n	11132 <cal_gain_off+0x3f2>
   117fc:	4658      	mov	r0, fp
						b[m][n] = a[i][j];
   117fe:	2790      	movs	r7, #144	; 0x90
					b[i][j] = 0;
   11800:	9d00      	ldr	r5, [sp, #0]
						b[m][n] = a[i][j];
   11802:	00bf      	lsls	r7, r7, #2
					b[i][j] = 0;
   11804:	60c5      	str	r5, [r0, #12]
						b[m][n] = a[i][j];
   11806:	18d5      	adds	r5, r2, r3
   11808:	006d      	lsls	r5, r5, #1
   1180a:	a82c      	add	r0, sp, #176	; 0xb0
   1180c:	19c0      	adds	r0, r0, r7
   1180e:	4445      	add	r5, r8
   11810:	68e7      	ldr	r7, [r4, #12]
   11812:	00ad      	lsls	r5, r5, #2
   11814:	5147      	str	r7, [r0, r5]
						if (n < (k - 2))
   11816:	4640      	mov	r0, r8
   11818:	2802      	cmp	r0, #2
   1181a:	dd12      	ble.n	11842 <cal_gain_off+0xb02>
					b[i][j] = 0;
   1181c:	465a      	mov	r2, fp
   1181e:	9900      	ldr	r1, [sp, #0]
							m++;
   11820:	3301      	adds	r3, #1
   11822:	b2db      	uxtb	r3, r3
					b[i][j] = 0;
   11824:	6111      	str	r1, [r2, #16]
   11826:	e4f6      	b.n	11216 <cal_gain_off+0x4d6>
   11828:	465a      	mov	r2, fp
						b[m][n] = a[i][j];
   1182a:	2590      	movs	r5, #144	; 0x90
					b[i][j] = 0;
   1182c:	9900      	ldr	r1, [sp, #0]
						b[m][n] = a[i][j];
   1182e:	00ad      	lsls	r5, r5, #2
					b[i][j] = 0;
   11830:	60d1      	str	r1, [r2, #12]
						b[m][n] = a[i][j];
   11832:	a82c      	add	r0, sp, #176	; 0xb0
   11834:	005a      	lsls	r2, r3, #1
   11836:	1940      	adds	r0, r0, r5
   11838:	18d1      	adds	r1, r2, r3
   1183a:	68e5      	ldr	r5, [r4, #12]
   1183c:	00c9      	lsls	r1, r1, #3
   1183e:	5045      	str	r5, [r0, r1]
							n = 0;
   11840:	2100      	movs	r1, #0
   11842:	3101      	adds	r1, #1
   11844:	b2c9      	uxtb	r1, r1
   11846:	e46d      	b.n	11124 <cal_gain_off+0x3e4>
   11848:	3101      	adds	r1, #1
   1184a:	b2c9      	uxtb	r1, r1
   1184c:	4688      	mov	r8, r1
   1184e:	e441      	b.n	110d4 <cal_gain_off+0x394>
					b[i][j] = 0;
   11850:	4658      	mov	r0, fp
   11852:	9d00      	ldr	r5, [sp, #0]
						b[m][n] = a[i][j];
   11854:	2790      	movs	r7, #144	; 0x90
					b[i][j] = 0;
   11856:	6085      	str	r5, [r0, #8]
						b[m][n] = a[i][j];
   11858:	4648      	mov	r0, r9
   1185a:	00bf      	lsls	r7, r7, #2
   1185c:	1845      	adds	r5, r0, r1
   1185e:	a82c      	add	r0, sp, #176	; 0xb0
   11860:	19c0      	adds	r0, r0, r7
   11862:	68a7      	ldr	r7, [r4, #8]
   11864:	00ad      	lsls	r5, r5, #2
   11866:	5147      	str	r7, [r0, r5]
						if (n < (k - 2))
   11868:	2902      	cmp	r1, #2
   1186a:	ddb9      	ble.n	117e0 <cal_gain_off+0xaa0>
					b[i][j] = 0;
   1186c:	465a      	mov	r2, fp
   1186e:	9900      	ldr	r1, [sp, #0]
							m++;
   11870:	3301      	adds	r3, #1
   11872:	b2db      	uxtb	r3, r3
					b[i][j] = 0;
   11874:	60d1      	str	r1, [r2, #12]
   11876:	e44b      	b.n	11110 <cal_gain_off+0x3d0>
			for (i = 0;i < k; i++)
   11878:	4662      	mov	r2, ip
   1187a:	2a04      	cmp	r2, #4
   1187c:	d000      	beq.n	11880 <cal_gain_off+0xb40>
   1187e:	e52c      	b.n	112da <cal_gain_off+0x59a>
   11880:	9b08      	ldr	r3, [sp, #32]
			det = det + s * (a[0][c] * determinant(b, k - 1));
   11882:	2103      	movs	r1, #3
   11884:	4699      	mov	r9, r3
   11886:	0030      	movs	r0, r6
   11888:	4bc6      	ldr	r3, [pc, #792]	; (11ba4 <cal_gain_off+0xe64>)
   1188a:	4798      	blx	r3
   1188c:	99bf      	ldr	r1, [sp, #764]	; 0x2fc
   1188e:	9c04      	ldr	r4, [sp, #16]
   11890:	47a0      	blx	r4
   11892:	4641      	mov	r1, r8
   11894:	47a0      	blx	r4
   11896:	9b02      	ldr	r3, [sp, #8]
   11898:	1c01      	adds	r1, r0, #0
   1189a:	4648      	mov	r0, r9
   1189c:	4798      	blx	r3
   1189e:	4681      	mov	r9, r0
   118a0:	e58a      	b.n	113b8 <cal_gain_off+0x678>
					b[i][j] = 0;
   118a2:	9a00      	ldr	r2, [sp, #0]
						b[m][n] = a[i][j];
   118a4:	68a8      	ldr	r0, [r5, #8]
					b[i][j] = 0;
   118a6:	60a2      	str	r2, [r4, #8]
						b[m][n] = a[i][j];
   118a8:	005a      	lsls	r2, r3, #1
   118aa:	18d1      	adds	r1, r2, r3
   118ac:	00c9      	lsls	r1, r1, #3
   118ae:	5070      	str	r0, [r6, r1]
							n = 0;
   118b0:	2100      	movs	r1, #0
   118b2:	3101      	adds	r1, #1
   118b4:	b2c9      	uxtb	r1, r1
   118b6:	e548      	b.n	1134a <cal_gain_off+0x60a>
						b[m][n] = source[i][j];
   118b8:	2790      	movs	r7, #144	; 0x90
   118ba:	465c      	mov	r4, fp
   118bc:	ad2c      	add	r5, sp, #176	; 0xb0
   118be:	19ed      	adds	r5, r5, r7
   118c0:	18a4      	adds	r4, r4, r2
   118c2:	6887      	ldr	r7, [r0, #8]
   118c4:	00a4      	lsls	r4, r4, #2
   118c6:	512f      	str	r7, [r5, r4]
						if (n < (f - 2))
   118c8:	2a03      	cmp	r2, #3
   118ca:	dc00      	bgt.n	118ce <cal_gain_off+0xb8e>
   118cc:	e763      	b.n	11796 <cal_gain_off+0xa56>
							m++;
   118ce:	3301      	adds	r3, #1
   118d0:	b2db      	uxtb	r3, r3
   118d2:	f7ff fb04 	bl	10ede <cal_gain_off+0x19e>
   118d6:	3101      	adds	r1, #1
   118d8:	b2c9      	uxtb	r1, r1
   118da:	e4fb      	b.n	112d4 <cal_gain_off+0x594>
					b[i][j] = 0;
   118dc:	9a00      	ldr	r2, [sp, #0]
   118de:	6062      	str	r2, [r4, #4]
						b[m][n] = a[i][j];
   118e0:	005a      	lsls	r2, r3, #1
   118e2:	18d0      	adds	r0, r2, r3
   118e4:	0040      	lsls	r0, r0, #1
   118e6:	1840      	adds	r0, r0, r1
   118e8:	686f      	ldr	r7, [r5, #4]
   118ea:	0080      	lsls	r0, r0, #2
   118ec:	5037      	str	r7, [r6, r0]
						if (n < (k - 2))
   118ee:	2901      	cmp	r1, #1
   118f0:	dc00      	bgt.n	118f4 <cal_gain_off+0xbb4>
   118f2:	e6bf      	b.n	11674 <cal_gain_off+0x934>
					b[i][j] = 0;
   118f4:	9a00      	ldr	r2, [sp, #0]
							m++;
   118f6:	3301      	adds	r3, #1
   118f8:	b2db      	uxtb	r3, r3
					b[i][j] = 0;
   118fa:	60a2      	str	r2, [r4, #8]
   118fc:	e51f      	b.n	1133e <cal_gain_off+0x5fe>
   118fe:	4651      	mov	r1, sl
   11900:	6041      	str	r1, [r0, #4]
					if (i != 0 && j != c)
   11902:	9906      	ldr	r1, [sp, #24]
						n++;
   11904:	3201      	adds	r2, #1
   11906:	b2d2      	uxtb	r2, r2
					if (i != 0 && j != c)
   11908:	2901      	cmp	r1, #1
   1190a:	d101      	bne.n	11910 <cal_gain_off+0xbd0>
   1190c:	f000 fcff 	bl	1230e <cal_gain_off+0x15ce>
						b[m][n] = a[i][j];
   11910:	4641      	mov	r1, r8
   11912:	2490      	movs	r4, #144	; 0x90
   11914:	188f      	adds	r7, r1, r2
   11916:	00a4      	lsls	r4, r4, #2
   11918:	a92c      	add	r1, sp, #176	; 0xb0
   1191a:	1909      	adds	r1, r1, r4
   1191c:	686c      	ldr	r4, [r5, #4]
   1191e:	00bf      	lsls	r7, r7, #2
   11920:	51cc      	str	r4, [r1, r7]
						if (n < (k - 2))
   11922:	2a03      	cmp	r2, #3
   11924:	d801      	bhi.n	1192a <cal_gain_off+0xbea>
   11926:	f000 fced 	bl	12304 <cal_gain_off+0x15c4>
					b[i][j] = 0;
   1192a:	4652      	mov	r2, sl
   1192c:	6082      	str	r2, [r0, #8]
					if (i != 0 && j != c)
   1192e:	9a06      	ldr	r2, [sp, #24]
							m++;
   11930:	3301      	adds	r3, #1
   11932:	b2db      	uxtb	r3, r3
					if (i != 0 && j != c)
   11934:	2a02      	cmp	r2, #2
   11936:	d100      	bne.n	1193a <cal_gain_off+0xbfa>
   11938:	e0e0      	b.n	11afc <cal_gain_off+0xdbc>
						b[m][n] = a[i][j];
   1193a:	2490      	movs	r4, #144	; 0x90
   1193c:	005a      	lsls	r2, r3, #1
   1193e:	00a4      	lsls	r4, r4, #2
   11940:	a92c      	add	r1, sp, #176	; 0xb0
   11942:	1909      	adds	r1, r1, r4
   11944:	4693      	mov	fp, r2
   11946:	68ac      	ldr	r4, [r5, #8]
   11948:	18d2      	adds	r2, r2, r3
   1194a:	00d2      	lsls	r2, r2, #3
   1194c:	508c      	str	r4, [r1, r2]
					b[i][j] = 0;
   1194e:	4651      	mov	r1, sl
						b[m][n] = a[i][j];
   11950:	2201      	movs	r2, #1
					b[i][j] = 0;
   11952:	60c1      	str	r1, [r0, #12]
					if (i != 0 && j != c)
   11954:	9900      	ldr	r1, [sp, #0]
						b[m][n] = a[i][j];
   11956:	4691      	mov	r9, r2
					if (i != 0 && j != c)
   11958:	2903      	cmp	r1, #3
   1195a:	d100      	bne.n	1195e <cal_gain_off+0xc1e>
   1195c:	e10d      	b.n	11b7a <cal_gain_off+0xe3a>
						b[m][n] = a[i][j];
   1195e:	465c      	mov	r4, fp
   11960:	18e7      	adds	r7, r4, r3
   11962:	2490      	movs	r4, #144	; 0x90
   11964:	007f      	lsls	r7, r7, #1
   11966:	00a4      	lsls	r4, r4, #2
   11968:	a92c      	add	r1, sp, #176	; 0xb0
   1196a:	1909      	adds	r1, r1, r4
   1196c:	444f      	add	r7, r9
   1196e:	68ec      	ldr	r4, [r5, #12]
   11970:	00bf      	lsls	r7, r7, #2
   11972:	51cc      	str	r4, [r1, r7]
						if (n < (k - 2))
   11974:	4649      	mov	r1, r9
   11976:	2903      	cmp	r1, #3
   11978:	dc00      	bgt.n	1197c <cal_gain_off+0xc3c>
   1197a:	e0cc      	b.n	11b16 <cal_gain_off+0xdd6>
					b[i][j] = 0;
   1197c:	4652      	mov	r2, sl
   1197e:	6102      	str	r2, [r0, #16]
					if (i != 0 && j != c)
   11980:	9a00      	ldr	r2, [sp, #0]
							m++;
   11982:	3301      	adds	r3, #1
   11984:	b2db      	uxtb	r3, r3
					if (i != 0 && j != c)
   11986:	2a04      	cmp	r2, #4
   11988:	d100      	bne.n	1198c <cal_gain_off+0xc4c>
   1198a:	e0b1      	b.n	11af0 <cal_gain_off+0xdb0>
						b[m][n] = a[i][j];
   1198c:	2490      	movs	r4, #144	; 0x90
   1198e:	005a      	lsls	r2, r3, #1
   11990:	00a4      	lsls	r4, r4, #2
   11992:	a92c      	add	r1, sp, #176	; 0xb0
   11994:	1909      	adds	r1, r1, r4
   11996:	4693      	mov	fp, r2
   11998:	692c      	ldr	r4, [r5, #16]
   1199a:	18d2      	adds	r2, r2, r3
   1199c:	00d2      	lsls	r2, r2, #3
   1199e:	508c      	str	r4, [r1, r2]
   119a0:	2201      	movs	r2, #1
					b[i][j] = 0;
   119a2:	4651      	mov	r1, sl
   119a4:	6141      	str	r1, [r0, #20]
					if (i != 0 && j != c)
   119a6:	9900      	ldr	r1, [sp, #0]
   119a8:	2905      	cmp	r1, #5
   119aa:	d100      	bne.n	119ae <cal_gain_off+0xc6e>
   119ac:	e641      	b.n	11632 <cal_gain_off+0x8f2>
   119ae:	4690      	mov	r8, r2
						b[m][n] = a[i][j];
   119b0:	4659      	mov	r1, fp
   119b2:	2790      	movs	r7, #144	; 0x90
   119b4:	18c9      	adds	r1, r1, r3
   119b6:	00bf      	lsls	r7, r7, #2
   119b8:	0049      	lsls	r1, r1, #1
   119ba:	ac2c      	add	r4, sp, #176	; 0xb0
   119bc:	19e4      	adds	r4, r4, r7
   119be:	4441      	add	r1, r8
   119c0:	696f      	ldr	r7, [r5, #20]
   119c2:	0089      	lsls	r1, r1, #2
   119c4:	5067      	str	r7, [r4, r1]
						if (n < (k - 2))
   119c6:	4641      	mov	r1, r8
   119c8:	2903      	cmp	r1, #3
   119ca:	dc01      	bgt.n	119d0 <cal_gain_off+0xc90>
   119cc:	f000 fc96 	bl	122fc <cal_gain_off+0x15bc>
							m++;
   119d0:	3301      	adds	r3, #1
   119d2:	b2db      	uxtb	r3, r3
			for (i = 0;i < k; i++)
   119d4:	4661      	mov	r1, ip
							n = 0;
   119d6:	2200      	movs	r2, #0
			for (i = 0;i < k; i++)
   119d8:	2906      	cmp	r1, #6
   119da:	d000      	beq.n	119de <cal_gain_off+0xc9e>
   119dc:	e62d      	b.n	1163a <cal_gain_off+0x8fa>
   119de:	9c00      	ldr	r4, [sp, #0]
			det = det + s * (a[0][c] * determinant(b, k - 1));
   119e0:	aa2c      	add	r2, sp, #176	; 0xb0
   119e2:	00a3      	lsls	r3, r4, #2
   119e4:	58d3      	ldr	r3, [r2, r3]
   119e6:	2500      	movs	r5, #0
   119e8:	930b      	str	r3, [sp, #44]	; 0x2c
   119ea:	2300      	movs	r3, #0
   119ec:	4699      	mov	r9, r3
   119ee:	23fe      	movs	r3, #254	; 0xfe
   119f0:	059b      	lsls	r3, r3, #22
   119f2:	9307      	str	r3, [sp, #28]
   119f4:	464b      	mov	r3, r9
   119f6:	46a1      	mov	r9, r4
   119f8:	9306      	str	r3, [sp, #24]
   119fa:	4649      	mov	r1, r9
							n = 0;
   119fc:	2401      	movs	r4, #1
   119fe:	0030      	movs	r0, r6
   11a00:	910a      	str	r1, [sp, #40]	; 0x28
					b[i][j] = 0;
   11a02:	4651      	mov	r1, sl
   11a04:	9400      	str	r4, [sp, #0]
   11a06:	6001      	str	r1, [r0, #0]
					if (i != 0 && j != c)
   11a08:	9900      	ldr	r1, [sp, #0]
   11a0a:	b2eb      	uxtb	r3, r5
   11a0c:	469c      	mov	ip, r3
							n = 0;
   11a0e:	afbc      	add	r7, sp, #752	; 0x2f0
   11a10:	2200      	movs	r2, #0
   11a12:	2300      	movs	r3, #0
   11a14:	46a8      	mov	r8, r5
					if (i != 0 && j != c)
   11a16:	2901      	cmp	r1, #1
   11a18:	d064      	beq.n	11ae4 <cal_gain_off+0xda4>
   11a1a:	4641      	mov	r1, r8
   11a1c:	2900      	cmp	r1, #0
   11a1e:	d101      	bne.n	11a24 <cal_gain_off+0xce4>
   11a20:	f000 fc14 	bl	1224c <cal_gain_off+0x150c>
						b[m][n] = a[i][j];
   11a24:	0059      	lsls	r1, r3, #1
   11a26:	18cc      	adds	r4, r1, r3
   11a28:	0064      	lsls	r4, r4, #1
   11a2a:	18a5      	adds	r5, r4, r2
   11a2c:	46a1      	mov	r9, r4
   11a2e:	683c      	ldr	r4, [r7, #0]
   11a30:	00ad      	lsls	r5, r5, #2
   11a32:	5174      	str	r4, [r6, r5]
						if (n < (k - 2))
   11a34:	2a02      	cmp	r2, #2
   11a36:	dc00      	bgt.n	11a3a <cal_gain_off+0xcfa>
   11a38:	e0b6      	b.n	11ba8 <cal_gain_off+0xe68>
					b[i][j] = 0;
   11a3a:	4652      	mov	r2, sl
   11a3c:	6042      	str	r2, [r0, #4]
					if (i != 0 && j != c)
   11a3e:	4662      	mov	r2, ip
							m++;
   11a40:	3301      	adds	r3, #1
   11a42:	b2db      	uxtb	r3, r3
					if (i != 0 && j != c)
   11a44:	2a01      	cmp	r2, #1
   11a46:	d101      	bne.n	11a4c <cal_gain_off+0xd0c>
   11a48:	f000 fc2b 	bl	122a2 <cal_gain_off+0x1562>
						b[m][n] = a[i][j];
   11a4c:	0059      	lsls	r1, r3, #1
   11a4e:	18ca      	adds	r2, r1, r3
   11a50:	687c      	ldr	r4, [r7, #4]
   11a52:	00d2      	lsls	r2, r2, #3
   11a54:	50b4      	str	r4, [r6, r2]
   11a56:	2201      	movs	r2, #1
   11a58:	4693      	mov	fp, r2
					b[i][j] = 0;
   11a5a:	4654      	mov	r4, sl
   11a5c:	6084      	str	r4, [r0, #8]
					if (i != 0 && j != c)
   11a5e:	4644      	mov	r4, r8
   11a60:	2c02      	cmp	r4, #2
   11a62:	d101      	bne.n	11a68 <cal_gain_off+0xd28>
   11a64:	f000 fc0c 	bl	12280 <cal_gain_off+0x1540>
						b[m][n] = a[i][j];
   11a68:	18cc      	adds	r4, r1, r3
   11a6a:	0064      	lsls	r4, r4, #1
   11a6c:	445c      	add	r4, fp
   11a6e:	68bd      	ldr	r5, [r7, #8]
   11a70:	00a4      	lsls	r4, r4, #2
   11a72:	5135      	str	r5, [r6, r4]
						if (n < (k - 2))
   11a74:	465c      	mov	r4, fp
   11a76:	2c02      	cmp	r4, #2
   11a78:	dc01      	bgt.n	11a7e <cal_gain_off+0xd3e>
   11a7a:	f000 fc1a 	bl	122b2 <cal_gain_off+0x1572>
					b[i][j] = 0;
   11a7e:	4652      	mov	r2, sl
   11a80:	60c2      	str	r2, [r0, #12]
					if (i != 0 && j != c)
   11a82:	4642      	mov	r2, r8
							m++;
   11a84:	3301      	adds	r3, #1
   11a86:	b2db      	uxtb	r3, r3
					if (i != 0 && j != c)
   11a88:	2a03      	cmp	r2, #3
   11a8a:	d101      	bne.n	11a90 <cal_gain_off+0xd50>
   11a8c:	f000 fbf2 	bl	12274 <cal_gain_off+0x1534>
						b[m][n] = a[i][j];
   11a90:	0059      	lsls	r1, r3, #1
   11a92:	18ca      	adds	r2, r1, r3
   11a94:	68fc      	ldr	r4, [r7, #12]
   11a96:	00d2      	lsls	r2, r2, #3
   11a98:	50b4      	str	r4, [r6, r2]
   11a9a:	2201      	movs	r2, #1
					b[i][j] = 0;
   11a9c:	4654      	mov	r4, sl
   11a9e:	6104      	str	r4, [r0, #16]
					if (i != 0 && j != c)
   11aa0:	4644      	mov	r4, r8
   11aa2:	2c04      	cmp	r4, #4
   11aa4:	d101      	bne.n	11aaa <cal_gain_off+0xd6a>
   11aa6:	f000 fc5d 	bl	12364 <cal_gain_off+0x1624>
   11aaa:	4691      	mov	r9, r2
						b[m][n] = a[i][j];
   11aac:	464d      	mov	r5, r9
   11aae:	18c9      	adds	r1, r1, r3
   11ab0:	0049      	lsls	r1, r1, #1
   11ab2:	4449      	add	r1, r9
   11ab4:	693c      	ldr	r4, [r7, #16]
   11ab6:	0089      	lsls	r1, r1, #2
   11ab8:	5074      	str	r4, [r6, r1]
						if (n < (k - 2))
   11aba:	2d02      	cmp	r5, #2
   11abc:	dc00      	bgt.n	11ac0 <cal_gain_off+0xd80>
   11abe:	e3d6      	b.n	1226e <cal_gain_off+0x152e>
							n = 0;
   11ac0:	2200      	movs	r2, #0
							m++;
   11ac2:	3301      	adds	r3, #1
   11ac4:	b2db      	uxtb	r3, r3
			for (i = 0;i < k; i++)
   11ac6:	9900      	ldr	r1, [sp, #0]
   11ac8:	2905      	cmp	r1, #5
   11aca:	d100      	bne.n	11ace <cal_gain_off+0xd8e>
   11acc:	e0b1      	b.n	11c32 <cal_gain_off+0xef2>
   11ace:	9d00      	ldr	r5, [sp, #0]
   11ad0:	3018      	adds	r0, #24
   11ad2:	3501      	adds	r5, #1
   11ad4:	b2e9      	uxtb	r1, r5
   11ad6:	9100      	str	r1, [sp, #0]
					b[i][j] = 0;
   11ad8:	4651      	mov	r1, sl
   11ada:	6001      	str	r1, [r0, #0]
					if (i != 0 && j != c)
   11adc:	9900      	ldr	r1, [sp, #0]
   11ade:	3718      	adds	r7, #24
   11ae0:	2901      	cmp	r1, #1
   11ae2:	d19a      	bne.n	11a1a <cal_gain_off+0xcda>
					b[i][j] = 0;
   11ae4:	4651      	mov	r1, sl
   11ae6:	6071      	str	r1, [r6, #4]
   11ae8:	60b1      	str	r1, [r6, #8]
   11aea:	60f1      	str	r1, [r6, #12]
   11aec:	6131      	str	r1, [r6, #16]
   11aee:	e7ee      	b.n	11ace <cal_gain_off+0xd8e>
   11af0:	4652      	mov	r2, sl
   11af2:	0059      	lsls	r1, r3, #1
   11af4:	6142      	str	r2, [r0, #20]
   11af6:	468b      	mov	fp, r1
							n = 0;
   11af8:	2200      	movs	r2, #0
   11afa:	e758      	b.n	119ae <cal_gain_off+0xc6e>
					b[i][j] = 0;
   11afc:	4652      	mov	r2, sl
						b[m][n] = a[i][j];
   11afe:	2490      	movs	r4, #144	; 0x90
					b[i][j] = 0;
   11b00:	60c2      	str	r2, [r0, #12]
						b[m][n] = a[i][j];
   11b02:	00a4      	lsls	r4, r4, #2
   11b04:	005a      	lsls	r2, r3, #1
   11b06:	a92c      	add	r1, sp, #176	; 0xb0
   11b08:	1909      	adds	r1, r1, r4
   11b0a:	4693      	mov	fp, r2
   11b0c:	68ec      	ldr	r4, [r5, #12]
   11b0e:	18d2      	adds	r2, r2, r3
   11b10:	00d2      	lsls	r2, r2, #3
   11b12:	508c      	str	r4, [r1, r2]
							n = 0;
   11b14:	2200      	movs	r2, #0
					b[i][j] = 0;
   11b16:	4651      	mov	r1, sl
   11b18:	3201      	adds	r2, #1
   11b1a:	6101      	str	r1, [r0, #16]
					if (i != 0 && j != c)
   11b1c:	9900      	ldr	r1, [sp, #0]
   11b1e:	b2d2      	uxtb	r2, r2
   11b20:	4690      	mov	r8, r2
   11b22:	2904      	cmp	r1, #4
   11b24:	d000      	beq.n	11b28 <cal_gain_off+0xde8>
   11b26:	e55f      	b.n	115e8 <cal_gain_off+0x8a8>
					b[i][j] = 0;
   11b28:	4651      	mov	r1, sl
   11b2a:	6141      	str	r1, [r0, #20]
   11b2c:	e740      	b.n	119b0 <cal_gain_off+0xc70>
   11b2e:	4652      	mov	r2, sl
						b[m][n] = a[i][j];
   11b30:	2490      	movs	r4, #144	; 0x90
					b[i][j] = 0;
   11b32:	6102      	str	r2, [r0, #16]
						b[m][n] = a[i][j];
   11b34:	00a4      	lsls	r4, r4, #2
   11b36:	005a      	lsls	r2, r3, #1
   11b38:	a92c      	add	r1, sp, #176	; 0xb0
   11b3a:	1909      	adds	r1, r1, r4
   11b3c:	4693      	mov	fp, r2
   11b3e:	692c      	ldr	r4, [r5, #16]
   11b40:	18d2      	adds	r2, r2, r3
   11b42:	00d2      	lsls	r2, r2, #3
   11b44:	508c      	str	r4, [r1, r2]
							n = 0;
   11b46:	2200      	movs	r2, #0
   11b48:	3201      	adds	r2, #1
   11b4a:	b2d2      	uxtb	r2, r2
   11b4c:	e729      	b.n	119a2 <cal_gain_off+0xc62>
					b[i][j] = 0;
   11b4e:	4652      	mov	r2, sl
						b[m][n] = a[i][j];
   11b50:	2490      	movs	r4, #144	; 0x90
					b[i][j] = 0;
   11b52:	6082      	str	r2, [r0, #8]
						b[m][n] = a[i][j];
   11b54:	00a4      	lsls	r4, r4, #2
   11b56:	005a      	lsls	r2, r3, #1
   11b58:	a92c      	add	r1, sp, #176	; 0xb0
   11b5a:	1909      	adds	r1, r1, r4
   11b5c:	4693      	mov	fp, r2
   11b5e:	68ac      	ldr	r4, [r5, #8]
   11b60:	18d2      	adds	r2, r2, r3
   11b62:	00d2      	lsls	r2, r2, #3
   11b64:	508c      	str	r4, [r1, r2]
							n = 0;
   11b66:	2200      	movs	r2, #0
					b[i][j] = 0;
   11b68:	4651      	mov	r1, sl
   11b6a:	3201      	adds	r2, #1
   11b6c:	60c1      	str	r1, [r0, #12]
					if (i != 0 && j != c)
   11b6e:	9900      	ldr	r1, [sp, #0]
   11b70:	b2d2      	uxtb	r2, r2
   11b72:	4691      	mov	r9, r2
   11b74:	2903      	cmp	r1, #3
   11b76:	d000      	beq.n	11b7a <cal_gain_off+0xe3a>
   11b78:	e6f1      	b.n	1195e <cal_gain_off+0xc1e>
					b[i][j] = 0;
   11b7a:	4651      	mov	r1, sl
   11b7c:	6101      	str	r1, [r0, #16]
						b[m][n] = a[i][j];
   11b7e:	4659      	mov	r1, fp
   11b80:	2490      	movs	r4, #144	; 0x90
   11b82:	18cf      	adds	r7, r1, r3
   11b84:	00a4      	lsls	r4, r4, #2
   11b86:	007f      	lsls	r7, r7, #1
   11b88:	a92c      	add	r1, sp, #176	; 0xb0
   11b8a:	1909      	adds	r1, r1, r4
   11b8c:	444f      	add	r7, r9
   11b8e:	692c      	ldr	r4, [r5, #16]
   11b90:	00bf      	lsls	r7, r7, #2
   11b92:	51cc      	str	r4, [r1, r7]
						if (n < (k - 2))
   11b94:	4649      	mov	r1, r9
   11b96:	2903      	cmp	r1, #3
   11b98:	ddd6      	ble.n	11b48 <cal_gain_off+0xe08>
					b[i][j] = 0;
   11b9a:	4652      	mov	r2, sl
							m++;
   11b9c:	3301      	adds	r3, #1
   11b9e:	b2db      	uxtb	r3, r3
					b[i][j] = 0;
   11ba0:	6142      	str	r2, [r0, #20]
   11ba2:	e53c      	b.n	1161e <cal_gain_off+0x8de>
   11ba4:	0000efd9 	.word	0x0000efd9
   11ba8:	4654      	mov	r4, sl
   11baa:	6044      	str	r4, [r0, #4]
					if (i != 0 && j != c)
   11bac:	4664      	mov	r4, ip
						n++;
   11bae:	3201      	adds	r2, #1
   11bb0:	b2d2      	uxtb	r2, r2
					if (i != 0 && j != c)
   11bb2:	2c01      	cmp	r4, #1
   11bb4:	d101      	bne.n	11bba <cal_gain_off+0xe7a>
   11bb6:	f000 fbfd 	bl	123b4 <cal_gain_off+0x1674>
						b[m][n] = a[i][j];
   11bba:	464c      	mov	r4, r9
   11bbc:	687d      	ldr	r5, [r7, #4]
   11bbe:	18a4      	adds	r4, r4, r2
   11bc0:	00a4      	lsls	r4, r4, #2
   11bc2:	5135      	str	r5, [r6, r4]
						if (n < (k - 2))
   11bc4:	2a02      	cmp	r2, #2
   11bc6:	d801      	bhi.n	11bcc <cal_gain_off+0xe8c>
   11bc8:	f000 fbef 	bl	123aa <cal_gain_off+0x166a>
					b[i][j] = 0;
   11bcc:	4652      	mov	r2, sl
   11bce:	6082      	str	r2, [r0, #8]
					if (i != 0 && j != c)
   11bd0:	4662      	mov	r2, ip
							m++;
   11bd2:	3301      	adds	r3, #1
   11bd4:	b2db      	uxtb	r3, r3
					if (i != 0 && j != c)
   11bd6:	2a02      	cmp	r2, #2
   11bd8:	d100      	bne.n	11bdc <cal_gain_off+0xe9c>
   11bda:	e3da      	b.n	12392 <cal_gain_off+0x1652>
					b[i][j] = 0;
   11bdc:	4655      	mov	r5, sl
						b[m][n] = a[i][j];
   11bde:	0059      	lsls	r1, r3, #1
   11be0:	18ca      	adds	r2, r1, r3
   11be2:	68bc      	ldr	r4, [r7, #8]
   11be4:	00d2      	lsls	r2, r2, #3
   11be6:	50b4      	str	r4, [r6, r2]
   11be8:	2201      	movs	r2, #1
					b[i][j] = 0;
   11bea:	60c5      	str	r5, [r0, #12]
					if (i != 0 && j != c)
   11bec:	4645      	mov	r5, r8
						b[m][n] = a[i][j];
   11bee:	4691      	mov	r9, r2
					if (i != 0 && j != c)
   11bf0:	2d03      	cmp	r5, #3
   11bf2:	d100      	bne.n	11bf6 <cal_gain_off+0xeb6>
   11bf4:	e366      	b.n	122c4 <cal_gain_off+0x1584>
						b[m][n] = a[i][j];
   11bf6:	18cd      	adds	r5, r1, r3
   11bf8:	006d      	lsls	r5, r5, #1
   11bfa:	46ab      	mov	fp, r5
   11bfc:	44cb      	add	fp, r9
   11bfe:	465d      	mov	r5, fp
   11c00:	68fc      	ldr	r4, [r7, #12]
   11c02:	00ad      	lsls	r5, r5, #2
   11c04:	5174      	str	r4, [r6, r5]
						if (n < (k - 2))
   11c06:	464c      	mov	r4, r9
   11c08:	2c02      	cmp	r4, #2
   11c0a:	dc00      	bgt.n	11c0e <cal_gain_off+0xece>
   11c0c:	e3c9      	b.n	123a2 <cal_gain_off+0x1662>
					b[i][j] = 0;
   11c0e:	4652      	mov	r2, sl
   11c10:	6102      	str	r2, [r0, #16]
					if (i != 0 && j != c)
   11c12:	4642      	mov	r2, r8
							m++;
   11c14:	3301      	adds	r3, #1
   11c16:	b2db      	uxtb	r3, r3
					if (i != 0 && j != c)
   11c18:	2a04      	cmp	r2, #4
   11c1a:	d100      	bne.n	11c1e <cal_gain_off+0xede>
   11c1c:	e3a1      	b.n	12362 <cal_gain_off+0x1622>
						b[m][n] = a[i][j];
   11c1e:	005a      	lsls	r2, r3, #1
   11c20:	6939      	ldr	r1, [r7, #16]
   11c22:	18d2      	adds	r2, r2, r3
   11c24:	00d2      	lsls	r2, r2, #3
   11c26:	50b1      	str	r1, [r6, r2]
			for (i = 0;i < k; i++)
   11c28:	9900      	ldr	r1, [sp, #0]
						b[m][n] = a[i][j];
   11c2a:	2201      	movs	r2, #1
			for (i = 0;i < k; i++)
   11c2c:	2905      	cmp	r1, #5
   11c2e:	d000      	beq.n	11c32 <cal_gain_off+0xef2>
   11c30:	e74d      	b.n	11ace <cal_gain_off+0xd8e>
   11c32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			det = det + s * (a[0][c] * determinant(b, k - 1));
   11c34:	3901      	subs	r1, #1
   11c36:	4699      	mov	r9, r3
   11c38:	0030      	movs	r0, r6
   11c3a:	4b89      	ldr	r3, [pc, #548]	; (11e60 <cal_gain_off+0x1120>)
   11c3c:	4798      	blx	r3
   11c3e:	2190      	movs	r1, #144	; 0x90
   11c40:	4645      	mov	r5, r8
   11c42:	0089      	lsls	r1, r1, #2
   11c44:	aa2c      	add	r2, sp, #176	; 0xb0
   11c46:	00ab      	lsls	r3, r5, #2
   11c48:	1852      	adds	r2, r2, r1
   11c4a:	58d1      	ldr	r1, [r2, r3]
   11c4c:	9c04      	ldr	r4, [sp, #16]
   11c4e:	47a0      	blx	r4
   11c50:	9f07      	ldr	r7, [sp, #28]
   11c52:	3501      	adds	r5, #1
   11c54:	1c39      	adds	r1, r7, #0
   11c56:	47a0      	blx	r4
   11c58:	9b02      	ldr	r3, [sp, #8]
   11c5a:	1c01      	adds	r1, r0, #0
   11c5c:	9806      	ldr	r0, [sp, #24]
   11c5e:	4798      	blx	r3
			s = -1 * s;
   11c60:	2280      	movs	r2, #128	; 0x80
   11c62:	0612      	lsls	r2, r2, #24
   11c64:	003b      	movs	r3, r7
   11c66:	4694      	mov	ip, r2
   11c68:	4463      	add	r3, ip
			det = det + s * (a[0][c] * determinant(b, k - 1));
   11c6a:	9006      	str	r0, [sp, #24]
			s = -1 * s;
   11c6c:	9307      	str	r3, [sp, #28]
		for (c = 0; c < k; c++)
   11c6e:	2d05      	cmp	r5, #5
   11c70:	d000      	beq.n	11c74 <cal_gain_off+0xf34>
   11c72:	e6c2      	b.n	119fa <cal_gain_off+0xcba>
   11c74:	464c      	mov	r4, r9
   11c76:	4681      	mov	r9, r0
   11c78:	9d04      	ldr	r5, [sp, #16]
			det = det + s * (a[0][c] * determinant(b, k - 1));
   11c7a:	4649      	mov	r1, r9
   11c7c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   11c7e:	47a8      	blx	r5
   11c80:	9f09      	ldr	r7, [sp, #36]	; 0x24
   11c82:	3401      	adds	r4, #1
   11c84:	1c39      	adds	r1, r7, #0
   11c86:	47a8      	blx	r5
   11c88:	9b02      	ldr	r3, [sp, #8]
   11c8a:	1c01      	adds	r1, r0, #0
   11c8c:	9808      	ldr	r0, [sp, #32]
   11c8e:	4798      	blx	r3
			s = -1 * s;
   11c90:	2280      	movs	r2, #128	; 0x80
   11c92:	0612      	lsls	r2, r2, #24
   11c94:	003b      	movs	r3, r7
   11c96:	4694      	mov	ip, r2
   11c98:	4463      	add	r3, ip
			det = det + s * (a[0][c] * determinant(b, k - 1));
   11c9a:	9008      	str	r0, [sp, #32]
			s = -1 * s;
   11c9c:	9309      	str	r3, [sp, #36]	; 0x24
		for (c = 0; c < k; c++)
   11c9e:	2c06      	cmp	r4, #6
   11ca0:	d000      	beq.n	11ca4 <cal_gain_off+0xf64>
   11ca2:	e435      	b.n	11510 <cal_gain_off+0x7d0>
			dest[i][j] = b[i][j] / d;
   11ca4:	4b6f      	ldr	r3, [pc, #444]	; (11e64 <cal_gain_off+0x1124>)
   11ca6:	1c07      	adds	r7, r0, #0
   11ca8:	1c01      	adds	r1, r0, #0
   11caa:	9898      	ldr	r0, [sp, #608]	; 0x260
   11cac:	4698      	mov	r8, r3
   11cae:	4798      	blx	r3
   11cb0:	1c39      	adds	r1, r7, #0
   11cb2:	902b      	str	r0, [sp, #172]	; 0xac
   11cb4:	902c      	str	r0, [sp, #176]	; 0xb0
   11cb6:	9899      	ldr	r0, [sp, #612]	; 0x264
   11cb8:	47c0      	blx	r8
   11cba:	1c39      	adds	r1, r7, #0
   11cbc:	902a      	str	r0, [sp, #168]	; 0xa8
   11cbe:	902d      	str	r0, [sp, #180]	; 0xb4
   11cc0:	989a      	ldr	r0, [sp, #616]	; 0x268
   11cc2:	47c0      	blx	r8
   11cc4:	1c39      	adds	r1, r7, #0
   11cc6:	9029      	str	r0, [sp, #164]	; 0xa4
   11cc8:	902e      	str	r0, [sp, #184]	; 0xb8
   11cca:	989b      	ldr	r0, [sp, #620]	; 0x26c
   11ccc:	47c0      	blx	r8
   11cce:	1c39      	adds	r1, r7, #0
   11cd0:	9028      	str	r0, [sp, #160]	; 0xa0
   11cd2:	902f      	str	r0, [sp, #188]	; 0xbc
   11cd4:	989c      	ldr	r0, [sp, #624]	; 0x270
   11cd6:	47c0      	blx	r8
   11cd8:	1c39      	adds	r1, r7, #0
   11cda:	9027      	str	r0, [sp, #156]	; 0x9c
   11cdc:	9030      	str	r0, [sp, #192]	; 0xc0
   11cde:	989d      	ldr	r0, [sp, #628]	; 0x274
   11ce0:	47c0      	blx	r8
   11ce2:	1c39      	adds	r1, r7, #0
   11ce4:	9026      	str	r0, [sp, #152]	; 0x98
   11ce6:	9031      	str	r0, [sp, #196]	; 0xc4
   11ce8:	989e      	ldr	r0, [sp, #632]	; 0x278
   11cea:	47c0      	blx	r8
   11cec:	1c39      	adds	r1, r7, #0
   11cee:	9025      	str	r0, [sp, #148]	; 0x94
   11cf0:	9032      	str	r0, [sp, #200]	; 0xc8
   11cf2:	989f      	ldr	r0, [sp, #636]	; 0x27c
   11cf4:	47c0      	blx	r8
   11cf6:	1c39      	adds	r1, r7, #0
   11cf8:	9024      	str	r0, [sp, #144]	; 0x90
   11cfa:	9033      	str	r0, [sp, #204]	; 0xcc
   11cfc:	98a0      	ldr	r0, [sp, #640]	; 0x280
   11cfe:	47c0      	blx	r8
   11d00:	1c39      	adds	r1, r7, #0
   11d02:	9023      	str	r0, [sp, #140]	; 0x8c
   11d04:	9034      	str	r0, [sp, #208]	; 0xd0
   11d06:	98a1      	ldr	r0, [sp, #644]	; 0x284
   11d08:	47c0      	blx	r8
   11d0a:	1c39      	adds	r1, r7, #0
   11d0c:	9022      	str	r0, [sp, #136]	; 0x88
   11d0e:	9035      	str	r0, [sp, #212]	; 0xd4
   11d10:	98a2      	ldr	r0, [sp, #648]	; 0x288
   11d12:	47c0      	blx	r8
   11d14:	1c39      	adds	r1, r7, #0
   11d16:	9021      	str	r0, [sp, #132]	; 0x84
   11d18:	9036      	str	r0, [sp, #216]	; 0xd8
   11d1a:	98a3      	ldr	r0, [sp, #652]	; 0x28c
   11d1c:	47c0      	blx	r8
   11d1e:	1c39      	adds	r1, r7, #0
   11d20:	9006      	str	r0, [sp, #24]
   11d22:	9037      	str	r0, [sp, #220]	; 0xdc
   11d24:	98a4      	ldr	r0, [sp, #656]	; 0x290
   11d26:	47c0      	blx	r8
   11d28:	1c39      	adds	r1, r7, #0
   11d2a:	9020      	str	r0, [sp, #128]	; 0x80
   11d2c:	9038      	str	r0, [sp, #224]	; 0xe0
   11d2e:	98a5      	ldr	r0, [sp, #660]	; 0x294
   11d30:	47c0      	blx	r8
   11d32:	1c39      	adds	r1, r7, #0
   11d34:	901f      	str	r0, [sp, #124]	; 0x7c
   11d36:	9039      	str	r0, [sp, #228]	; 0xe4
   11d38:	98a6      	ldr	r0, [sp, #664]	; 0x298
   11d3a:	47c0      	blx	r8
   11d3c:	1c39      	adds	r1, r7, #0
   11d3e:	901e      	str	r0, [sp, #120]	; 0x78
   11d40:	903a      	str	r0, [sp, #232]	; 0xe8
   11d42:	98a7      	ldr	r0, [sp, #668]	; 0x29c
   11d44:	47c0      	blx	r8
   11d46:	1c39      	adds	r1, r7, #0
   11d48:	901d      	str	r0, [sp, #116]	; 0x74
   11d4a:	903b      	str	r0, [sp, #236]	; 0xec
   11d4c:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
   11d4e:	47c0      	blx	r8
   11d50:	1c39      	adds	r1, r7, #0
   11d52:	901c      	str	r0, [sp, #112]	; 0x70
   11d54:	903c      	str	r0, [sp, #240]	; 0xf0
   11d56:	98a9      	ldr	r0, [sp, #676]	; 0x2a4
   11d58:	47c0      	blx	r8
   11d5a:	1c39      	adds	r1, r7, #0
   11d5c:	901b      	str	r0, [sp, #108]	; 0x6c
   11d5e:	903d      	str	r0, [sp, #244]	; 0xf4
   11d60:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
   11d62:	47c0      	blx	r8
   11d64:	1c39      	adds	r1, r7, #0
   11d66:	901a      	str	r0, [sp, #104]	; 0x68
   11d68:	903e      	str	r0, [sp, #248]	; 0xf8
   11d6a:	98ab      	ldr	r0, [sp, #684]	; 0x2ac
   11d6c:	47c0      	blx	r8
   11d6e:	1c39      	adds	r1, r7, #0
   11d70:	9019      	str	r0, [sp, #100]	; 0x64
   11d72:	903f      	str	r0, [sp, #252]	; 0xfc
   11d74:	98ac      	ldr	r0, [sp, #688]	; 0x2b0
   11d76:	47c0      	blx	r8
   11d78:	1c39      	adds	r1, r7, #0
   11d7a:	9018      	str	r0, [sp, #96]	; 0x60
   11d7c:	9040      	str	r0, [sp, #256]	; 0x100
   11d7e:	98ad      	ldr	r0, [sp, #692]	; 0x2b4
   11d80:	47c0      	blx	r8
   11d82:	1c39      	adds	r1, r7, #0
   11d84:	9017      	str	r0, [sp, #92]	; 0x5c
   11d86:	9041      	str	r0, [sp, #260]	; 0x104
   11d88:	98ae      	ldr	r0, [sp, #696]	; 0x2b8
   11d8a:	47c0      	blx	r8
   11d8c:	1c39      	adds	r1, r7, #0
   11d8e:	900f      	str	r0, [sp, #60]	; 0x3c
   11d90:	9042      	str	r0, [sp, #264]	; 0x108
   11d92:	98af      	ldr	r0, [sp, #700]	; 0x2bc
   11d94:	47c0      	blx	r8
   11d96:	1c39      	adds	r1, r7, #0
   11d98:	900d      	str	r0, [sp, #52]	; 0x34
   11d9a:	9043      	str	r0, [sp, #268]	; 0x10c
   11d9c:	98b0      	ldr	r0, [sp, #704]	; 0x2c0
   11d9e:	47c0      	blx	r8
   11da0:	1c39      	adds	r1, r7, #0
   11da2:	900c      	str	r0, [sp, #48]	; 0x30
   11da4:	9044      	str	r0, [sp, #272]	; 0x110
   11da6:	98b1      	ldr	r0, [sp, #708]	; 0x2c4
   11da8:	47c0      	blx	r8
   11daa:	1c39      	adds	r1, r7, #0
   11dac:	900b      	str	r0, [sp, #44]	; 0x2c
   11dae:	9045      	str	r0, [sp, #276]	; 0x114
   11db0:	98b2      	ldr	r0, [sp, #712]	; 0x2c8
   11db2:	47c0      	blx	r8
   11db4:	1c39      	adds	r1, r7, #0
   11db6:	900a      	str	r0, [sp, #40]	; 0x28
   11db8:	9046      	str	r0, [sp, #280]	; 0x118
   11dba:	98b3      	ldr	r0, [sp, #716]	; 0x2cc
   11dbc:	47c0      	blx	r8
   11dbe:	1c39      	adds	r1, r7, #0
   11dc0:	9009      	str	r0, [sp, #36]	; 0x24
   11dc2:	9047      	str	r0, [sp, #284]	; 0x11c
   11dc4:	98b4      	ldr	r0, [sp, #720]	; 0x2d0
   11dc6:	47c0      	blx	r8
   11dc8:	1c39      	adds	r1, r7, #0
   11dca:	9008      	str	r0, [sp, #32]
   11dcc:	9048      	str	r0, [sp, #288]	; 0x120
   11dce:	98b5      	ldr	r0, [sp, #724]	; 0x2d4
   11dd0:	47c0      	blx	r8
   11dd2:	1c39      	adds	r1, r7, #0
   11dd4:	9007      	str	r0, [sp, #28]
   11dd6:	9049      	str	r0, [sp, #292]	; 0x124
   11dd8:	98b6      	ldr	r0, [sp, #728]	; 0x2d8
   11dda:	47c0      	blx	r8
   11ddc:	1c39      	adds	r1, r7, #0
   11dde:	900e      	str	r0, [sp, #56]	; 0x38
   11de0:	904a      	str	r0, [sp, #296]	; 0x128
   11de2:	98b7      	ldr	r0, [sp, #732]	; 0x2dc
   11de4:	47c0      	blx	r8
   11de6:	22d8      	movs	r2, #216	; 0xd8
   11de8:	2480      	movs	r4, #128	; 0x80
   11dea:	0052      	lsls	r2, r2, #1
   11dec:	ab2c      	add	r3, sp, #176	; 0xb0
   11dee:	189b      	adds	r3, r3, r2
   11df0:	1c39      	adds	r1, r7, #0
   11df2:	9010      	str	r0, [sp, #64]	; 0x40
   11df4:	904b      	str	r0, [sp, #300]	; 0x12c
   11df6:	5918      	ldr	r0, [r3, r4]
   11df8:	47c0      	blx	r8
   11dfa:	22d8      	movs	r2, #216	; 0xd8
   11dfc:	ab2c      	add	r3, sp, #176	; 0xb0
   11dfe:	0052      	lsls	r2, r2, #1
   11e00:	5118      	str	r0, [r3, r4]
   11e02:	189b      	adds	r3, r3, r2
   11e04:	3404      	adds	r4, #4
   11e06:	1c39      	adds	r1, r7, #0
   11e08:	9011      	str	r0, [sp, #68]	; 0x44
   11e0a:	5918      	ldr	r0, [r3, r4]
   11e0c:	47c0      	blx	r8
   11e0e:	22d8      	movs	r2, #216	; 0xd8
   11e10:	ab2c      	add	r3, sp, #176	; 0xb0
   11e12:	0052      	lsls	r2, r2, #1
   11e14:	5118      	str	r0, [r3, r4]
   11e16:	189b      	adds	r3, r3, r2
   11e18:	3404      	adds	r4, #4
   11e1a:	1c39      	adds	r1, r7, #0
   11e1c:	9012      	str	r0, [sp, #72]	; 0x48
   11e1e:	5918      	ldr	r0, [r3, r4]
   11e20:	47c0      	blx	r8
   11e22:	22d8      	movs	r2, #216	; 0xd8
   11e24:	ab2c      	add	r3, sp, #176	; 0xb0
   11e26:	0052      	lsls	r2, r2, #1
   11e28:	5118      	str	r0, [r3, r4]
   11e2a:	189b      	adds	r3, r3, r2
   11e2c:	3404      	adds	r4, #4
   11e2e:	9015      	str	r0, [sp, #84]	; 0x54
   11e30:	1c39      	adds	r1, r7, #0
   11e32:	5918      	ldr	r0, [r3, r4]
   11e34:	47c0      	blx	r8
   11e36:	ab2c      	add	r3, sp, #176	; 0xb0
   11e38:	5118      	str	r0, [r3, r4]
   11e3a:	4b0b      	ldr	r3, [pc, #44]	; (11e68 <cal_gain_off+0x1128>)
   11e3c:	2700      	movs	r7, #0
   11e3e:	681b      	ldr	r3, [r3, #0]
   11e40:	9016      	str	r0, [sp, #88]	; 0x58
   11e42:	4699      	mov	r9, r3
		temp2[i] = 0;
   11e44:	2300      	movs	r3, #0
   11e46:	469a      	mov	sl, r3
   11e48:	abff      	add	r3, sp, #1020	; 0x3fc
   11e4a:	3314      	adds	r3, #20
   11e4c:	469b      	mov	fp, r3
   11e4e:	adbc      	add	r5, sp, #752	; 0x2f0
   11e50:	4653      	mov	r3, sl
   11e52:	602b      	str	r3, [r5, #0]
		for (k = 0;k<n_points;k++){
   11e54:	464b      	mov	r3, r9
   11e56:	2000      	movs	r0, #0
   11e58:	2400      	movs	r4, #0
   11e5a:	2b00      	cmp	r3, #0
   11e5c:	d014      	beq.n	11e88 <cal_gain_off+0x1148>
   11e5e:	e005      	b.n	11e6c <cal_gain_off+0x112c>
   11e60:	0000efd9 	.word	0x0000efd9
   11e64:	0001c7c9 	.word	0x0001c7c9
   11e68:	20003054 	.word	0x20003054
			temp2[i] = temp2[i]+D[k][i];
   11e6c:	465a      	mov	r2, fp
   11e6e:	0063      	lsls	r3, r4, #1
   11e70:	191b      	adds	r3, r3, r4
   11e72:	005b      	lsls	r3, r3, #1
   11e74:	19db      	adds	r3, r3, r7
   11e76:	009b      	lsls	r3, r3, #2
		for (k = 0;k<n_points;k++){
   11e78:	3401      	adds	r4, #1
			temp2[i] = temp2[i]+D[k][i];
   11e7a:	58d1      	ldr	r1, [r2, r3]
		for (k = 0;k<n_points;k++){
   11e7c:	b2e4      	uxtb	r4, r4
			temp2[i] = temp2[i]+D[k][i];
   11e7e:	9b02      	ldr	r3, [sp, #8]
   11e80:	4798      	blx	r3
		for (k = 0;k<n_points;k++){
   11e82:	454c      	cmp	r4, r9
   11e84:	d3f2      	bcc.n	11e6c <cal_gain_off+0x112c>
   11e86:	6028      	str	r0, [r5, #0]
   11e88:	3701      	adds	r7, #1
   11e8a:	3504      	adds	r5, #4
	for (i=0;i<6;i++){
   11e8c:	2f06      	cmp	r7, #6
   11e8e:	d1df      	bne.n	11e50 <cal_gain_off+0x1110>
   11e90:	9abf      	ldr	r2, [sp, #764]	; 0x2fc
   11e92:	9bbc      	ldr	r3, [sp, #752]	; 0x2f0
   11e94:	4691      	mov	r9, r2
   11e96:	9ac0      	ldr	r2, [sp, #768]	; 0x300
			v[i] = v[i]+temp1[i][j]*temp2[j];
   11e98:	1c19      	adds	r1, r3, #0
   11e9a:	4692      	mov	sl, r2
   11e9c:	9ac1      	ldr	r2, [sp, #772]	; 0x304
   11e9e:	9300      	str	r3, [sp, #0]
   11ea0:	982b      	ldr	r0, [sp, #172]	; 0xac
   11ea2:	9b04      	ldr	r3, [sp, #16]
   11ea4:	4693      	mov	fp, r2
   11ea6:	4798      	blx	r3
   11ea8:	9f02      	ldr	r7, [sp, #8]
   11eaa:	2100      	movs	r1, #0
   11eac:	47b8      	blx	r7
   11eae:	9dbd      	ldr	r5, [sp, #756]	; 0x2f4
   11eb0:	9b04      	ldr	r3, [sp, #16]
   11eb2:	1c07      	adds	r7, r0, #0
   11eb4:	1c29      	adds	r1, r5, #0
   11eb6:	982a      	ldr	r0, [sp, #168]	; 0xa8
   11eb8:	4798      	blx	r3
   11eba:	1c01      	adds	r1, r0, #0
   11ebc:	1c38      	adds	r0, r7, #0
   11ebe:	9f02      	ldr	r7, [sp, #8]
   11ec0:	47b8      	blx	r7
   11ec2:	9cbe      	ldr	r4, [sp, #760]	; 0x2f8
   11ec4:	9b04      	ldr	r3, [sp, #16]
   11ec6:	1c07      	adds	r7, r0, #0
   11ec8:	1c21      	adds	r1, r4, #0
   11eca:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11ecc:	4798      	blx	r3
   11ece:	1c01      	adds	r1, r0, #0
   11ed0:	1c38      	adds	r0, r7, #0
   11ed2:	9f02      	ldr	r7, [sp, #8]
   11ed4:	47b8      	blx	r7
   11ed6:	9b04      	ldr	r3, [sp, #16]
   11ed8:	1c07      	adds	r7, r0, #0
   11eda:	4649      	mov	r1, r9
   11edc:	9828      	ldr	r0, [sp, #160]	; 0xa0
   11ede:	4798      	blx	r3
   11ee0:	1c01      	adds	r1, r0, #0
   11ee2:	1c38      	adds	r0, r7, #0
   11ee4:	9f02      	ldr	r7, [sp, #8]
   11ee6:	47b8      	blx	r7
   11ee8:	9b04      	ldr	r3, [sp, #16]
   11eea:	1c07      	adds	r7, r0, #0
   11eec:	4651      	mov	r1, sl
   11eee:	9827      	ldr	r0, [sp, #156]	; 0x9c
   11ef0:	4798      	blx	r3
   11ef2:	1c01      	adds	r1, r0, #0
   11ef4:	1c38      	adds	r0, r7, #0
   11ef6:	9f02      	ldr	r7, [sp, #8]
   11ef8:	47b8      	blx	r7
   11efa:	4659      	mov	r1, fp
   11efc:	1c07      	adds	r7, r0, #0
   11efe:	9826      	ldr	r0, [sp, #152]	; 0x98
   11f00:	9a04      	ldr	r2, [sp, #16]
   11f02:	4790      	blx	r2
   11f04:	1c01      	adds	r1, r0, #0
   11f06:	1c38      	adds	r0, r7, #0
   11f08:	9f02      	ldr	r7, [sp, #8]
   11f0a:	47b8      	blx	r7
   11f0c:	9a04      	ldr	r2, [sp, #16]
   11f0e:	9900      	ldr	r1, [sp, #0]
   11f10:	9026      	str	r0, [sp, #152]	; 0x98
   11f12:	90e0      	str	r0, [sp, #896]	; 0x380
   11f14:	9825      	ldr	r0, [sp, #148]	; 0x94
   11f16:	4790      	blx	r2
   11f18:	9f02      	ldr	r7, [sp, #8]
   11f1a:	2100      	movs	r1, #0
   11f1c:	47b8      	blx	r7
   11f1e:	9a04      	ldr	r2, [sp, #16]
   11f20:	1c07      	adds	r7, r0, #0
   11f22:	1c29      	adds	r1, r5, #0
   11f24:	9824      	ldr	r0, [sp, #144]	; 0x90
   11f26:	4790      	blx	r2
   11f28:	1c01      	adds	r1, r0, #0
   11f2a:	1c38      	adds	r0, r7, #0
   11f2c:	9f02      	ldr	r7, [sp, #8]
   11f2e:	47b8      	blx	r7
   11f30:	9a04      	ldr	r2, [sp, #16]
   11f32:	1c07      	adds	r7, r0, #0
   11f34:	1c21      	adds	r1, r4, #0
   11f36:	9823      	ldr	r0, [sp, #140]	; 0x8c
   11f38:	4790      	blx	r2
   11f3a:	1c01      	adds	r1, r0, #0
   11f3c:	1c38      	adds	r0, r7, #0
   11f3e:	9f02      	ldr	r7, [sp, #8]
   11f40:	47b8      	blx	r7
   11f42:	9a04      	ldr	r2, [sp, #16]
   11f44:	1c07      	adds	r7, r0, #0
   11f46:	4649      	mov	r1, r9
   11f48:	9822      	ldr	r0, [sp, #136]	; 0x88
   11f4a:	4790      	blx	r2
   11f4c:	1c01      	adds	r1, r0, #0
   11f4e:	1c38      	adds	r0, r7, #0
   11f50:	9f02      	ldr	r7, [sp, #8]
   11f52:	47b8      	blx	r7
   11f54:	9b04      	ldr	r3, [sp, #16]
   11f56:	1c07      	adds	r7, r0, #0
   11f58:	4651      	mov	r1, sl
   11f5a:	9821      	ldr	r0, [sp, #132]	; 0x84
   11f5c:	4798      	blx	r3
   11f5e:	1c01      	adds	r1, r0, #0
   11f60:	1c38      	adds	r0, r7, #0
   11f62:	9f02      	ldr	r7, [sp, #8]
   11f64:	47b8      	blx	r7
   11f66:	4659      	mov	r1, fp
   11f68:	1c07      	adds	r7, r0, #0
   11f6a:	9b04      	ldr	r3, [sp, #16]
   11f6c:	9806      	ldr	r0, [sp, #24]
   11f6e:	4798      	blx	r3
   11f70:	1c01      	adds	r1, r0, #0
   11f72:	1c38      	adds	r0, r7, #0
   11f74:	9f02      	ldr	r7, [sp, #8]
   11f76:	47b8      	blx	r7
   11f78:	9b04      	ldr	r3, [sp, #16]
   11f7a:	9900      	ldr	r1, [sp, #0]
   11f7c:	9006      	str	r0, [sp, #24]
   11f7e:	6070      	str	r0, [r6, #4]
   11f80:	9820      	ldr	r0, [sp, #128]	; 0x80
   11f82:	4798      	blx	r3
   11f84:	9f02      	ldr	r7, [sp, #8]
   11f86:	2100      	movs	r1, #0
   11f88:	47b8      	blx	r7
   11f8a:	9b04      	ldr	r3, [sp, #16]
   11f8c:	1c07      	adds	r7, r0, #0
   11f8e:	1c29      	adds	r1, r5, #0
   11f90:	981f      	ldr	r0, [sp, #124]	; 0x7c
   11f92:	4798      	blx	r3
   11f94:	1c01      	adds	r1, r0, #0
   11f96:	1c38      	adds	r0, r7, #0
   11f98:	9f02      	ldr	r7, [sp, #8]
   11f9a:	47b8      	blx	r7
   11f9c:	9b04      	ldr	r3, [sp, #16]
   11f9e:	1c07      	adds	r7, r0, #0
   11fa0:	1c21      	adds	r1, r4, #0
   11fa2:	981e      	ldr	r0, [sp, #120]	; 0x78
   11fa4:	4798      	blx	r3
   11fa6:	1c01      	adds	r1, r0, #0
   11fa8:	1c38      	adds	r0, r7, #0
   11faa:	9f02      	ldr	r7, [sp, #8]
   11fac:	47b8      	blx	r7
   11fae:	9a04      	ldr	r2, [sp, #16]
   11fb0:	1c07      	adds	r7, r0, #0
   11fb2:	4649      	mov	r1, r9
   11fb4:	981d      	ldr	r0, [sp, #116]	; 0x74
   11fb6:	4790      	blx	r2
   11fb8:	1c01      	adds	r1, r0, #0
   11fba:	1c38      	adds	r0, r7, #0
   11fbc:	9f02      	ldr	r7, [sp, #8]
   11fbe:	47b8      	blx	r7
   11fc0:	9a04      	ldr	r2, [sp, #16]
   11fc2:	1c07      	adds	r7, r0, #0
   11fc4:	4651      	mov	r1, sl
   11fc6:	981c      	ldr	r0, [sp, #112]	; 0x70
   11fc8:	4790      	blx	r2
   11fca:	1c01      	adds	r1, r0, #0
   11fcc:	1c38      	adds	r0, r7, #0
   11fce:	9f02      	ldr	r7, [sp, #8]
   11fd0:	47b8      	blx	r7
   11fd2:	9a04      	ldr	r2, [sp, #16]
   11fd4:	1c07      	adds	r7, r0, #0
   11fd6:	4659      	mov	r1, fp
   11fd8:	981b      	ldr	r0, [sp, #108]	; 0x6c
   11fda:	4790      	blx	r2
   11fdc:	1c01      	adds	r1, r0, #0
   11fde:	1c38      	adds	r0, r7, #0
   11fe0:	9f02      	ldr	r7, [sp, #8]
   11fe2:	47b8      	blx	r7
   11fe4:	9a04      	ldr	r2, [sp, #16]
   11fe6:	9900      	ldr	r1, [sp, #0]
   11fe8:	901b      	str	r0, [sp, #108]	; 0x6c
   11fea:	60b0      	str	r0, [r6, #8]
   11fec:	981a      	ldr	r0, [sp, #104]	; 0x68
   11fee:	4790      	blx	r2
   11ff0:	9f02      	ldr	r7, [sp, #8]
   11ff2:	2100      	movs	r1, #0
   11ff4:	47b8      	blx	r7
   11ff6:	9a04      	ldr	r2, [sp, #16]
   11ff8:	1c07      	adds	r7, r0, #0
   11ffa:	1c29      	adds	r1, r5, #0
   11ffc:	9819      	ldr	r0, [sp, #100]	; 0x64
   11ffe:	4790      	blx	r2
   12000:	1c01      	adds	r1, r0, #0
   12002:	1c38      	adds	r0, r7, #0
   12004:	9f02      	ldr	r7, [sp, #8]
   12006:	47b8      	blx	r7
   12008:	9b04      	ldr	r3, [sp, #16]
   1200a:	1c07      	adds	r7, r0, #0
   1200c:	1c21      	adds	r1, r4, #0
   1200e:	9818      	ldr	r0, [sp, #96]	; 0x60
   12010:	4798      	blx	r3
   12012:	1c01      	adds	r1, r0, #0
   12014:	1c38      	adds	r0, r7, #0
   12016:	9f02      	ldr	r7, [sp, #8]
   12018:	47b8      	blx	r7
   1201a:	9b04      	ldr	r3, [sp, #16]
   1201c:	1c07      	adds	r7, r0, #0
   1201e:	4649      	mov	r1, r9
   12020:	9817      	ldr	r0, [sp, #92]	; 0x5c
   12022:	4798      	blx	r3
   12024:	1c01      	adds	r1, r0, #0
   12026:	1c38      	adds	r0, r7, #0
   12028:	9f02      	ldr	r7, [sp, #8]
   1202a:	47b8      	blx	r7
   1202c:	9b04      	ldr	r3, [sp, #16]
   1202e:	1c07      	adds	r7, r0, #0
   12030:	4651      	mov	r1, sl
   12032:	980f      	ldr	r0, [sp, #60]	; 0x3c
   12034:	4798      	blx	r3
   12036:	1c01      	adds	r1, r0, #0
   12038:	1c38      	adds	r0, r7, #0
   1203a:	9f02      	ldr	r7, [sp, #8]
   1203c:	47b8      	blx	r7
   1203e:	4659      	mov	r1, fp
   12040:	1c07      	adds	r7, r0, #0
   12042:	9b04      	ldr	r3, [sp, #16]
   12044:	980d      	ldr	r0, [sp, #52]	; 0x34
   12046:	4798      	blx	r3
   12048:	1c01      	adds	r1, r0, #0
   1204a:	1c38      	adds	r0, r7, #0
   1204c:	9f02      	ldr	r7, [sp, #8]
   1204e:	47b8      	blx	r7
   12050:	9b04      	ldr	r3, [sp, #16]
   12052:	9900      	ldr	r1, [sp, #0]
   12054:	900d      	str	r0, [sp, #52]	; 0x34
   12056:	60f0      	str	r0, [r6, #12]
   12058:	980c      	ldr	r0, [sp, #48]	; 0x30
   1205a:	4798      	blx	r3
   1205c:	9f02      	ldr	r7, [sp, #8]
   1205e:	2100      	movs	r1, #0
   12060:	47b8      	blx	r7
   12062:	9a04      	ldr	r2, [sp, #16]
   12064:	1c07      	adds	r7, r0, #0
   12066:	1c29      	adds	r1, r5, #0
   12068:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1206a:	4790      	blx	r2
   1206c:	1c01      	adds	r1, r0, #0
   1206e:	1c38      	adds	r0, r7, #0
   12070:	9f02      	ldr	r7, [sp, #8]
   12072:	47b8      	blx	r7
   12074:	9a04      	ldr	r2, [sp, #16]
   12076:	1c07      	adds	r7, r0, #0
   12078:	1c21      	adds	r1, r4, #0
   1207a:	980a      	ldr	r0, [sp, #40]	; 0x28
   1207c:	4790      	blx	r2
   1207e:	1c01      	adds	r1, r0, #0
   12080:	1c38      	adds	r0, r7, #0
   12082:	9f02      	ldr	r7, [sp, #8]
   12084:	47b8      	blx	r7
   12086:	9a04      	ldr	r2, [sp, #16]
   12088:	1c07      	adds	r7, r0, #0
   1208a:	4649      	mov	r1, r9
   1208c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1208e:	4790      	blx	r2
   12090:	1c01      	adds	r1, r0, #0
   12092:	1c38      	adds	r0, r7, #0
   12094:	9f02      	ldr	r7, [sp, #8]
   12096:	47b8      	blx	r7
   12098:	9a04      	ldr	r2, [sp, #16]
   1209a:	1c07      	adds	r7, r0, #0
   1209c:	4651      	mov	r1, sl
   1209e:	9808      	ldr	r0, [sp, #32]
   120a0:	4790      	blx	r2
   120a2:	1c01      	adds	r1, r0, #0
   120a4:	1c38      	adds	r0, r7, #0
   120a6:	9f02      	ldr	r7, [sp, #8]
   120a8:	47b8      	blx	r7
   120aa:	9a04      	ldr	r2, [sp, #16]
   120ac:	1c07      	adds	r7, r0, #0
   120ae:	4659      	mov	r1, fp
   120b0:	9807      	ldr	r0, [sp, #28]
   120b2:	4790      	blx	r2
   120b4:	1c01      	adds	r1, r0, #0
   120b6:	1c38      	adds	r0, r7, #0
   120b8:	9f02      	ldr	r7, [sp, #8]
   120ba:	47b8      	blx	r7
   120bc:	1c07      	adds	r7, r0, #0
   120be:	6130      	str	r0, [r6, #16]
   120c0:	9900      	ldr	r1, [sp, #0]
   120c2:	9b04      	ldr	r3, [sp, #16]
   120c4:	980e      	ldr	r0, [sp, #56]	; 0x38
   120c6:	4798      	blx	r3
   120c8:	9a02      	ldr	r2, [sp, #8]
   120ca:	2100      	movs	r1, #0
   120cc:	4694      	mov	ip, r2
   120ce:	47e0      	blx	ip
   120d0:	9b04      	ldr	r3, [sp, #16]
   120d2:	1c29      	adds	r1, r5, #0
   120d4:	9000      	str	r0, [sp, #0]
   120d6:	9810      	ldr	r0, [sp, #64]	; 0x40
   120d8:	4798      	blx	r3
   120da:	9d02      	ldr	r5, [sp, #8]
   120dc:	1c01      	adds	r1, r0, #0
   120de:	46ac      	mov	ip, r5
   120e0:	9800      	ldr	r0, [sp, #0]
   120e2:	47e0      	blx	ip
   120e4:	9b04      	ldr	r3, [sp, #16]
   120e6:	1c05      	adds	r5, r0, #0
   120e8:	1c21      	adds	r1, r4, #0
   120ea:	9811      	ldr	r0, [sp, #68]	; 0x44
   120ec:	4798      	blx	r3
   120ee:	9c02      	ldr	r4, [sp, #8]
   120f0:	1c01      	adds	r1, r0, #0
   120f2:	1c28      	adds	r0, r5, #0
   120f4:	47a0      	blx	r4
   120f6:	9d04      	ldr	r5, [sp, #16]
   120f8:	1c04      	adds	r4, r0, #0
   120fa:	4649      	mov	r1, r9
   120fc:	9812      	ldr	r0, [sp, #72]	; 0x48
   120fe:	47a8      	blx	r5
   12100:	9b02      	ldr	r3, [sp, #8]
   12102:	1c01      	adds	r1, r0, #0
   12104:	1c20      	adds	r0, r4, #0
   12106:	4798      	blx	r3
   12108:	4651      	mov	r1, sl
   1210a:	1c04      	adds	r4, r0, #0
   1210c:	9815      	ldr	r0, [sp, #84]	; 0x54
   1210e:	47a8      	blx	r5
   12110:	9b02      	ldr	r3, [sp, #8]
   12112:	1c01      	adds	r1, r0, #0
   12114:	1c20      	adds	r0, r4, #0
   12116:	4798      	blx	r3
   12118:	4659      	mov	r1, fp
   1211a:	1c04      	adds	r4, r0, #0
   1211c:	9816      	ldr	r0, [sp, #88]	; 0x58
   1211e:	47a8      	blx	r5
   12120:	9a02      	ldr	r2, [sp, #8]
   12122:	1c01      	adds	r1, r0, #0
   12124:	1c20      	adds	r0, r4, #0
   12126:	4790      	blx	r2
		cal_struct->offset[i] = -1*(v[i+3]/v[i]);
   12128:	9b26      	ldr	r3, [sp, #152]	; 0x98
			v[i] = v[i]+temp1[i][j]*temp2[j];
   1212a:	6170      	str	r0, [r6, #20]
		cal_struct->offset[i] = -1*(v[i+3]/v[i]);
   1212c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
			v[i] = v[i]+temp1[i][j]*temp2[j];
   1212e:	4681      	mov	r9, r0
		cal_struct->offset[i] = -1*(v[i+3]/v[i]);
   12130:	1c19      	adds	r1, r3, #0
   12132:	1c28      	adds	r0, r5, #0
   12134:	469a      	mov	sl, r3
   12136:	47c0      	blx	r8
   12138:	2380      	movs	r3, #128	; 0x80
   1213a:	061b      	lsls	r3, r3, #24
   1213c:	469c      	mov	ip, r3
   1213e:	9c14      	ldr	r4, [sp, #80]	; 0x50
   12140:	4460      	add	r0, ip
   12142:	6060      	str	r0, [r4, #4]
   12144:	9906      	ldr	r1, [sp, #24]
   12146:	1c38      	adds	r0, r7, #0
   12148:	47c0      	blx	r8
   1214a:	2380      	movs	r3, #128	; 0x80
   1214c:	061b      	lsls	r3, r3, #24
   1214e:	469c      	mov	ip, r3
   12150:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   12152:	4460      	add	r0, ip
   12154:	60a0      	str	r0, [r4, #8]
   12156:	1c19      	adds	r1, r3, #0
   12158:	4648      	mov	r0, r9
   1215a:	469b      	mov	fp, r3
   1215c:	47c0      	blx	r8
   1215e:	2380      	movs	r3, #128	; 0x80
   12160:	061b      	lsls	r3, r3, #24
   12162:	469c      	mov	ip, r3
   12164:	4460      	add	r0, ip
   12166:	60e0      	str	r0, [r4, #12]
	g=1 + pow(v[3],2)/v[0]+pow(v[4],2)/v[1]+pow(v[5],2)/v[2];
   12168:	4b9a      	ldr	r3, [pc, #616]	; (123d4 <cal_gain_off+0x1694>)
   1216a:	1c28      	adds	r0, r5, #0
   1216c:	4798      	blx	r3
   1216e:	4b99      	ldr	r3, [pc, #612]	; (123d4 <cal_gain_off+0x1694>)
   12170:	0004      	movs	r4, r0
   12172:	1c38      	adds	r0, r7, #0
   12174:	000d      	movs	r5, r1
   12176:	4798      	blx	r3
   12178:	4b96      	ldr	r3, [pc, #600]	; (123d4 <cal_gain_off+0x1694>)
   1217a:	9000      	str	r0, [sp, #0]
   1217c:	9101      	str	r1, [sp, #4]
   1217e:	4648      	mov	r0, r9
   12180:	4798      	blx	r3
   12182:	0022      	movs	r2, r4
   12184:	9002      	str	r0, [sp, #8]
   12186:	9103      	str	r1, [sp, #12]
   12188:	002b      	movs	r3, r5
   1218a:	0020      	movs	r0, r4
   1218c:	0029      	movs	r1, r5
   1218e:	4d92      	ldr	r5, [pc, #584]	; (123d8 <cal_gain_off+0x1698>)
   12190:	47a8      	blx	r5
   12192:	4b90      	ldr	r3, [pc, #576]	; (123d4 <cal_gain_off+0x1694>)
   12194:	0004      	movs	r4, r0
   12196:	4650      	mov	r0, sl
   12198:	000d      	movs	r5, r1
   1219a:	4798      	blx	r3
   1219c:	4f8f      	ldr	r7, [pc, #572]	; (123dc <cal_gain_off+0x169c>)
   1219e:	0002      	movs	r2, r0
   121a0:	000b      	movs	r3, r1
   121a2:	0020      	movs	r0, r4
   121a4:	0029      	movs	r1, r5
   121a6:	47b8      	blx	r7
   121a8:	4b8d      	ldr	r3, [pc, #564]	; (123e0 <cal_gain_off+0x16a0>)
   121aa:	2200      	movs	r2, #0
   121ac:	4699      	mov	r9, r3
   121ae:	4b8d      	ldr	r3, [pc, #564]	; (123e4 <cal_gain_off+0x16a4>)
   121b0:	47c8      	blx	r9
   121b2:	9c00      	ldr	r4, [sp, #0]
   121b4:	9d01      	ldr	r5, [sp, #4]
   121b6:	9004      	str	r0, [sp, #16]
   121b8:	9105      	str	r1, [sp, #20]
   121ba:	0022      	movs	r2, r4
   121bc:	002b      	movs	r3, r5
   121be:	0020      	movs	r0, r4
   121c0:	0029      	movs	r1, r5
   121c2:	4d85      	ldr	r5, [pc, #532]	; (123d8 <cal_gain_off+0x1698>)
   121c4:	47a8      	blx	r5
   121c6:	4b83      	ldr	r3, [pc, #524]	; (123d4 <cal_gain_off+0x1694>)
   121c8:	0004      	movs	r4, r0
   121ca:	9806      	ldr	r0, [sp, #24]
   121cc:	000d      	movs	r5, r1
   121ce:	4798      	blx	r3
   121d0:	0002      	movs	r2, r0
   121d2:	000b      	movs	r3, r1
   121d4:	0020      	movs	r0, r4
   121d6:	0029      	movs	r1, r5
   121d8:	47b8      	blx	r7
   121da:	0002      	movs	r2, r0
   121dc:	000b      	movs	r3, r1
   121de:	9804      	ldr	r0, [sp, #16]
   121e0:	9905      	ldr	r1, [sp, #20]
   121e2:	47c8      	blx	r9
   121e4:	9c02      	ldr	r4, [sp, #8]
   121e6:	9d03      	ldr	r5, [sp, #12]
   121e8:	9000      	str	r0, [sp, #0]
   121ea:	9101      	str	r1, [sp, #4]
   121ec:	0022      	movs	r2, r4
   121ee:	002b      	movs	r3, r5
   121f0:	0020      	movs	r0, r4
   121f2:	0029      	movs	r1, r5
   121f4:	4c78      	ldr	r4, [pc, #480]	; (123d8 <cal_gain_off+0x1698>)
   121f6:	47a0      	blx	r4
   121f8:	4b76      	ldr	r3, [pc, #472]	; (123d4 <cal_gain_off+0x1694>)
   121fa:	0004      	movs	r4, r0
   121fc:	4658      	mov	r0, fp
   121fe:	000d      	movs	r5, r1
   12200:	4798      	blx	r3
   12202:	0002      	movs	r2, r0
   12204:	000b      	movs	r3, r1
   12206:	0020      	movs	r0, r4
   12208:	0029      	movs	r1, r5
   1220a:	47b8      	blx	r7
   1220c:	0002      	movs	r2, r0
   1220e:	000b      	movs	r3, r1
   12210:	9800      	ldr	r0, [sp, #0]
   12212:	9901      	ldr	r1, [sp, #4]
   12214:	47c8      	blx	r9
   12216:	4b74      	ldr	r3, [pc, #464]	; (123e8 <cal_gain_off+0x16a8>)
   12218:	4798      	blx	r3
   1221a:	2400      	movs	r4, #0
   1221c:	4681      	mov	r9, r0
   1221e:	4d73      	ldr	r5, [pc, #460]	; (123ec <cal_gain_off+0x16ac>)
		cal_struct->gain[i] = sqrt(g/v[i]);
   12220:	5931      	ldr	r1, [r6, r4]
   12222:	4648      	mov	r0, r9
   12224:	47c0      	blx	r8
   12226:	4b6b      	ldr	r3, [pc, #428]	; (123d4 <cal_gain_off+0x1694>)
   12228:	4798      	blx	r3
   1222a:	47a8      	blx	r5
   1222c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1222e:	191f      	adds	r7, r3, r4
   12230:	4b6d      	ldr	r3, [pc, #436]	; (123e8 <cal_gain_off+0x16a8>)
   12232:	4798      	blx	r3
   12234:	3404      	adds	r4, #4
   12236:	6138      	str	r0, [r7, #16]
	for (i=0;i<3;i++){
   12238:	2c0c      	cmp	r4, #12
   1223a:	d1f1      	bne.n	12220 <cal_gain_off+0x14e0>
}
   1223c:	4b6c      	ldr	r3, [pc, #432]	; (123f0 <cal_gain_off+0x16b0>)
   1223e:	449d      	add	sp, r3
   12240:	bc3c      	pop	{r2, r3, r4, r5}
   12242:	4690      	mov	r8, r2
   12244:	4699      	mov	r9, r3
   12246:	46a2      	mov	sl, r4
   12248:	46ab      	mov	fp, r5
   1224a:	bdf0      	pop	{r4, r5, r6, r7, pc}
					b[i][j] = 0;
   1224c:	4651      	mov	r1, sl
   1224e:	6041      	str	r1, [r0, #4]
						b[m][n] = a[i][j];
   12250:	0059      	lsls	r1, r3, #1
   12252:	18cc      	adds	r4, r1, r3
   12254:	0064      	lsls	r4, r4, #1
   12256:	18a4      	adds	r4, r4, r2
   12258:	687d      	ldr	r5, [r7, #4]
   1225a:	00a4      	lsls	r4, r4, #2
   1225c:	5135      	str	r5, [r6, r4]
						if (n < (k - 2))
   1225e:	2a02      	cmp	r2, #2
   12260:	dc00      	bgt.n	12264 <cal_gain_off+0x1524>
   12262:	e0a2      	b.n	123aa <cal_gain_off+0x166a>
					b[i][j] = 0;
   12264:	4652      	mov	r2, sl
							m++;
   12266:	3301      	adds	r3, #1
   12268:	b2db      	uxtb	r3, r3
					b[i][j] = 0;
   1226a:	6082      	str	r2, [r0, #8]
   1226c:	e4b6      	b.n	11bdc <cal_gain_off+0xe9c>
   1226e:	3201      	adds	r2, #1
   12270:	b2d2      	uxtb	r2, r2
   12272:	e428      	b.n	11ac6 <cal_gain_off+0xd86>
   12274:	4652      	mov	r2, sl
   12276:	0059      	lsls	r1, r3, #1
   12278:	6102      	str	r2, [r0, #16]
							n = 0;
   1227a:	2200      	movs	r2, #0
   1227c:	f7ff fc15 	bl	11aaa <cal_gain_off+0xd6a>
					b[i][j] = 0;
   12280:	4654      	mov	r4, sl
   12282:	60c4      	str	r4, [r0, #12]
						b[m][n] = a[i][j];
   12284:	18cc      	adds	r4, r1, r3
   12286:	0064      	lsls	r4, r4, #1
   12288:	445c      	add	r4, fp
   1228a:	68fd      	ldr	r5, [r7, #12]
   1228c:	00a4      	lsls	r4, r4, #2
   1228e:	5135      	str	r5, [r6, r4]
						if (n < (k - 2))
   12290:	465c      	mov	r4, fp
   12292:	2c02      	cmp	r4, #2
   12294:	dc00      	bgt.n	12298 <cal_gain_off+0x1558>
   12296:	e084      	b.n	123a2 <cal_gain_off+0x1662>
					b[i][j] = 0;
   12298:	4652      	mov	r2, sl
							m++;
   1229a:	3301      	adds	r3, #1
   1229c:	b2db      	uxtb	r3, r3
					b[i][j] = 0;
   1229e:	6102      	str	r2, [r0, #16]
   122a0:	e4bd      	b.n	11c1e <cal_gain_off+0xede>
   122a2:	4652      	mov	r2, sl
						b[m][n] = a[i][j];
   122a4:	0059      	lsls	r1, r3, #1
					b[i][j] = 0;
   122a6:	6082      	str	r2, [r0, #8]
						b[m][n] = a[i][j];
   122a8:	68bc      	ldr	r4, [r7, #8]
   122aa:	18ca      	adds	r2, r1, r3
   122ac:	00d2      	lsls	r2, r2, #3
   122ae:	50b4      	str	r4, [r6, r2]
							n = 0;
   122b0:	2200      	movs	r2, #0
					b[i][j] = 0;
   122b2:	4655      	mov	r5, sl
   122b4:	60c5      	str	r5, [r0, #12]
					if (i != 0 && j != c)
   122b6:	4645      	mov	r5, r8
   122b8:	3201      	adds	r2, #1
   122ba:	b2d2      	uxtb	r2, r2
   122bc:	4691      	mov	r9, r2
   122be:	2d03      	cmp	r5, #3
   122c0:	d000      	beq.n	122c4 <cal_gain_off+0x1584>
   122c2:	e498      	b.n	11bf6 <cal_gain_off+0xeb6>
					b[i][j] = 0;
   122c4:	4654      	mov	r4, sl
   122c6:	6104      	str	r4, [r0, #16]
   122c8:	f7ff fbf0 	bl	11aac <cal_gain_off+0xd6c>
   122cc:	4651      	mov	r1, sl
   122ce:	60c1      	str	r1, [r0, #12]
						b[m][n] = a[i][j];
   122d0:	4659      	mov	r1, fp
   122d2:	2490      	movs	r4, #144	; 0x90
   122d4:	18cf      	adds	r7, r1, r3
   122d6:	00a4      	lsls	r4, r4, #2
   122d8:	007f      	lsls	r7, r7, #1
   122da:	a92c      	add	r1, sp, #176	; 0xb0
   122dc:	1909      	adds	r1, r1, r4
   122de:	444f      	add	r7, r9
   122e0:	68ec      	ldr	r4, [r5, #12]
   122e2:	00bf      	lsls	r7, r7, #2
   122e4:	51cc      	str	r4, [r1, r7]
						if (n < (k - 2))
   122e6:	4649      	mov	r1, r9
   122e8:	2903      	cmp	r1, #3
   122ea:	dc01      	bgt.n	122f0 <cal_gain_off+0x15b0>
   122ec:	f7ff fc13 	bl	11b16 <cal_gain_off+0xdd6>
					b[i][j] = 0;
   122f0:	4652      	mov	r2, sl
							m++;
   122f2:	3301      	adds	r3, #1
   122f4:	b2db      	uxtb	r3, r3
					b[i][j] = 0;
   122f6:	6102      	str	r2, [r0, #16]
   122f8:	f7ff fb48 	bl	1198c <cal_gain_off+0xc4c>
   122fc:	3201      	adds	r2, #1
   122fe:	b2d2      	uxtb	r2, r2
   12300:	f7ff f997 	bl	11632 <cal_gain_off+0x8f2>
   12304:	3201      	adds	r2, #1
   12306:	b2d2      	uxtb	r2, r2
   12308:	4691      	mov	r9, r2
   1230a:	f7ff f93d 	bl	11588 <cal_gain_off+0x848>
   1230e:	4651      	mov	r1, sl
						b[m][n] = a[i][j];
   12310:	2490      	movs	r4, #144	; 0x90
					b[i][j] = 0;
   12312:	6081      	str	r1, [r0, #8]
						b[m][n] = a[i][j];
   12314:	4641      	mov	r1, r8
   12316:	00a4      	lsls	r4, r4, #2
   12318:	188f      	adds	r7, r1, r2
   1231a:	a92c      	add	r1, sp, #176	; 0xb0
   1231c:	1909      	adds	r1, r1, r4
   1231e:	68ac      	ldr	r4, [r5, #8]
   12320:	00bf      	lsls	r7, r7, #2
   12322:	51cc      	str	r4, [r1, r7]
						if (n < (k - 2))
   12324:	2a03      	cmp	r2, #3
   12326:	dc00      	bgt.n	1232a <cal_gain_off+0x15ea>
   12328:	e41e      	b.n	11b68 <cal_gain_off+0xe28>
					b[i][j] = 0;
   1232a:	4652      	mov	r2, sl
							m++;
   1232c:	3301      	adds	r3, #1
   1232e:	b2db      	uxtb	r3, r3
					b[i][j] = 0;
   12330:	60c2      	str	r2, [r0, #12]
   12332:	f7ff f947 	bl	115c4 <cal_gain_off+0x884>
   12336:	4651      	mov	r1, sl
						b[m][n] = a[i][j];
   12338:	2490      	movs	r4, #144	; 0x90
					b[i][j] = 0;
   1233a:	6041      	str	r1, [r0, #4]
						b[m][n] = a[i][j];
   1233c:	0059      	lsls	r1, r3, #1
   1233e:	18cf      	adds	r7, r1, r3
   12340:	00a4      	lsls	r4, r4, #2
   12342:	468b      	mov	fp, r1
   12344:	007f      	lsls	r7, r7, #1
   12346:	a92c      	add	r1, sp, #176	; 0xb0
   12348:	1909      	adds	r1, r1, r4
   1234a:	18bf      	adds	r7, r7, r2
   1234c:	686c      	ldr	r4, [r5, #4]
   1234e:	00bf      	lsls	r7, r7, #2
   12350:	51cc      	str	r4, [r1, r7]
						if (n < (k - 2))
   12352:	2a03      	cmp	r2, #3
   12354:	ddd6      	ble.n	12304 <cal_gain_off+0x15c4>
					b[i][j] = 0;
   12356:	4652      	mov	r2, sl
							m++;
   12358:	3301      	adds	r3, #1
   1235a:	b2db      	uxtb	r3, r3
					b[i][j] = 0;
   1235c:	6082      	str	r2, [r0, #8]
   1235e:	f7ff faec 	bl	1193a <cal_gain_off+0xbfa>
							n = 0;
   12362:	2200      	movs	r2, #0
			for (i = 0;i < k; i++)
   12364:	9900      	ldr	r1, [sp, #0]
   12366:	2905      	cmp	r1, #5
   12368:	d001      	beq.n	1236e <cal_gain_off+0x162e>
   1236a:	f7ff fbb0 	bl	11ace <cal_gain_off+0xd8e>
   1236e:	9b06      	ldr	r3, [sp, #24]
			det = det + s * (a[0][c] * determinant(b, k - 1));
   12370:	3901      	subs	r1, #1
   12372:	4699      	mov	r9, r3
   12374:	0030      	movs	r0, r6
   12376:	4b1f      	ldr	r3, [pc, #124]	; (123f4 <cal_gain_off+0x16b4>)
   12378:	4798      	blx	r3
   1237a:	99c0      	ldr	r1, [sp, #768]	; 0x300
   1237c:	9d04      	ldr	r5, [sp, #16]
   1237e:	47a8      	blx	r5
   12380:	9907      	ldr	r1, [sp, #28]
   12382:	47a8      	blx	r5
   12384:	9b02      	ldr	r3, [sp, #8]
   12386:	1c01      	adds	r1, r0, #0
   12388:	4648      	mov	r0, r9
   1238a:	4798      	blx	r3
   1238c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1238e:	4681      	mov	r9, r0
   12390:	e473      	b.n	11c7a <cal_gain_off+0xf3a>
					b[i][j] = 0;
   12392:	4652      	mov	r2, sl
						b[m][n] = a[i][j];
   12394:	0059      	lsls	r1, r3, #1
					b[i][j] = 0;
   12396:	60c2      	str	r2, [r0, #12]
						b[m][n] = a[i][j];
   12398:	68fc      	ldr	r4, [r7, #12]
   1239a:	18ca      	adds	r2, r1, r3
   1239c:	00d2      	lsls	r2, r2, #3
   1239e:	50b4      	str	r4, [r6, r2]
							n = 0;
   123a0:	2200      	movs	r2, #0
   123a2:	3201      	adds	r2, #1
   123a4:	b2d2      	uxtb	r2, r2
   123a6:	f7ff fb79 	bl	11a9c <cal_gain_off+0xd5c>
   123aa:	3201      	adds	r2, #1
   123ac:	b2d2      	uxtb	r2, r2
   123ae:	4693      	mov	fp, r2
   123b0:	f7ff fb53 	bl	11a5a <cal_gain_off+0xd1a>
					b[i][j] = 0;
   123b4:	4654      	mov	r4, sl
   123b6:	6084      	str	r4, [r0, #8]
						b[m][n] = a[i][j];
   123b8:	464c      	mov	r4, r9
   123ba:	68bd      	ldr	r5, [r7, #8]
   123bc:	18a4      	adds	r4, r4, r2
   123be:	00a4      	lsls	r4, r4, #2
   123c0:	5135      	str	r5, [r6, r4]
						if (n < (k - 2))
   123c2:	2a02      	cmp	r2, #2
   123c4:	dc00      	bgt.n	123c8 <cal_gain_off+0x1688>
   123c6:	e774      	b.n	122b2 <cal_gain_off+0x1572>
					b[i][j] = 0;
   123c8:	4652      	mov	r2, sl
							m++;
   123ca:	3301      	adds	r3, #1
   123cc:	b2db      	uxtb	r3, r3
					b[i][j] = 0;
   123ce:	60c2      	str	r2, [r0, #12]
   123d0:	f7ff fb5e 	bl	11a90 <cal_gain_off+0xd50>
   123d4:	0001eddd 	.word	0x0001eddd
   123d8:	0001e115 	.word	0x0001e115
   123dc:	0001d8ad 	.word	0x0001d8ad
   123e0:	0001d28d 	.word	0x0001d28d
   123e4:	3ff00000 	.word	0x3ff00000
   123e8:	0001ee81 	.word	0x0001ee81
   123ec:	000199b5 	.word	0x000199b5
   123f0:	00000b94 	.word	0x00000b94
   123f4:	0000efd9 	.word	0x0000efd9

000123f8 <writeLaserCallback>:

}

void writeLaserCallback(struct usart_module *const usart_module)
{
	LaserTransmitComplete = true;
   123f8:	2201      	movs	r2, #1
   123fa:	4b01      	ldr	r3, [pc, #4]	; (12400 <writeLaserCallback+0x8>)
   123fc:	701a      	strb	r2, [r3, #0]
}
   123fe:	4770      	bx	lr
   12400:	200016aa 	.word	0x200016aa

00012404 <readLaserCallback>:
{
   12404:	b570      	push	{r4, r5, r6, lr}
	debugBuffer[debugBufferIndex] = rxBufferLaser[rxBufferLaserIndex];
   12406:	4825      	ldr	r0, [pc, #148]	; (1249c <readLaserCallback+0x98>)
   12408:	4a25      	ldr	r2, [pc, #148]	; (124a0 <readLaserCallback+0x9c>)
   1240a:	7803      	ldrb	r3, [r0, #0]
   1240c:	7814      	ldrb	r4, [r2, #0]
   1240e:	4925      	ldr	r1, [pc, #148]	; (124a4 <readLaserCallback+0xa0>)
   12410:	b2e4      	uxtb	r4, r4
   12412:	5d0c      	ldrb	r4, [r1, r4]
   12414:	4d24      	ldr	r5, [pc, #144]	; (124a8 <readLaserCallback+0xa4>)
   12416:	b2db      	uxtb	r3, r3
   12418:	b2e4      	uxtb	r4, r4
   1241a:	54ec      	strb	r4, [r5, r3]
	debugBufferIndex++;
   1241c:	7803      	ldrb	r3, [r0, #0]
   1241e:	3301      	adds	r3, #1
   12420:	b2db      	uxtb	r3, r3
   12422:	7003      	strb	r3, [r0, #0]
	if(debugBufferIndex>=sizeof(debugBuffer)){debugBufferIndex=0;}
   12424:	7803      	ldrb	r3, [r0, #0]
   12426:	2bc7      	cmp	r3, #199	; 0xc7
   12428:	d901      	bls.n	1242e <readLaserCallback+0x2a>
   1242a:	2300      	movs	r3, #0
   1242c:	7003      	strb	r3, [r0, #0]
	if(rxBufferLaser[rxBufferLaserIndex]==0xA8){
   1242e:	7813      	ldrb	r3, [r2, #0]
   12430:	b2db      	uxtb	r3, r3
   12432:	5ccb      	ldrb	r3, [r1, r3]
   12434:	2ba8      	cmp	r3, #168	; 0xa8
   12436:	d014      	beq.n	12462 <readLaserCallback+0x5e>
	}else if(rxBufferLaser[rxBufferLaserIndex]==0xAA){
   12438:	7813      	ldrb	r3, [r2, #0]
   1243a:	b2db      	uxtb	r3, r3
   1243c:	5ccb      	ldrb	r3, [r1, r3]
   1243e:	b2db      	uxtb	r3, r3
   12440:	2baa      	cmp	r3, #170	; 0xaa
   12442:	d01d      	beq.n	12480 <readLaserCallback+0x7c>
		rxBufferLaserIndex++;
   12444:	7813      	ldrb	r3, [r2, #0]
   12446:	3301      	adds	r3, #1
   12448:	b2db      	uxtb	r3, r3
   1244a:	7013      	strb	r3, [r2, #0]
		if (rxBufferLaserIndex>=sizeof(rxBufferLaser)){
   1244c:	7813      	ldrb	r3, [r2, #0]
   1244e:	2b13      	cmp	r3, #19
   12450:	d901      	bls.n	12456 <readLaserCallback+0x52>
			rxBufferLaserIndex = 0;
   12452:	2300      	movs	r3, #0
   12454:	7013      	strb	r3, [r2, #0]
	usart_read_job(&usart_laser, &rxBufferLaser[rxBufferLaserIndex]);
   12456:	7813      	ldrb	r3, [r2, #0]
   12458:	4814      	ldr	r0, [pc, #80]	; (124ac <readLaserCallback+0xa8>)
   1245a:	18c9      	adds	r1, r1, r3
   1245c:	4b14      	ldr	r3, [pc, #80]	; (124b0 <readLaserCallback+0xac>)
   1245e:	4798      	blx	r3
}
   12460:	bd70      	pop	{r4, r5, r6, pc}
		LaserReceiveComplete=true;		
   12462:	2001      	movs	r0, #1
   12464:	4b13      	ldr	r3, [pc, #76]	; (124b4 <readLaserCallback+0xb0>)
   12466:	7018      	strb	r0, [r3, #0]
		rxBufferLaserIndex = 0;
   12468:	2300      	movs	r3, #0
   1246a:	7013      	strb	r3, [r2, #0]
//  Determine the type of message currently in the buffer
enum LASER_MESSAGE_TYPE laserMessageType(void){
	uint8_t i;
	enum LASER_MESSAGE_TYPE messType = 0;
	for(i=0;i<sizeof(rxBufferLaser);i++){
		if(rxBufferLaser[i]==0xAA){
   1246c:	5cc8      	ldrb	r0, [r1, r3]
   1246e:	28aa      	cmp	r0, #170	; 0xaa
   12470:	d00f      	beq.n	12492 <readLaserCallback+0x8e>
   12472:	3301      	adds	r3, #1
	for(i=0;i<sizeof(rxBufferLaser);i++){
   12474:	2b14      	cmp	r3, #20
   12476:	d1f9      	bne.n	1246c <readLaserCallback+0x68>
	enum LASER_MESSAGE_TYPE messType = 0;
   12478:	2300      	movs	r3, #0
		laserCurrentMessage = laserMessageType();;
   1247a:	480f      	ldr	r0, [pc, #60]	; (124b8 <readLaserCallback+0xb4>)
   1247c:	7003      	strb	r3, [r0, #0]
   1247e:	e7ea      	b.n	12456 <readLaserCallback+0x52>
		LaserReceiveComplete=false;
   12480:	2000      	movs	r0, #0
   12482:	4c0c      	ldr	r4, [pc, #48]	; (124b4 <readLaserCallback+0xb0>)
   12484:	7020      	strb	r0, [r4, #0]
		rxBufferLaser[0]=0xAA;  //  Ensure message starts at beginning of buffer
   12486:	700b      	strb	r3, [r1, #0]
		rxBufferLaserIndex = 1;	// Next byte to be placed at 1	
   12488:	3ba9      	subs	r3, #169	; 0xa9
   1248a:	7013      	strb	r3, [r2, #0]
		laserCurrentMessage = NONE;
   1248c:	4b0a      	ldr	r3, [pc, #40]	; (124b8 <readLaserCallback+0xb4>)
   1248e:	7018      	strb	r0, [r3, #0]
   12490:	e7e1      	b.n	12456 <readLaserCallback+0x52>
			messType =  rxBufferLaser[i+2];
   12492:	3302      	adds	r3, #2
   12494:	5ccb      	ldrb	r3, [r1, r3]
   12496:	b2db      	uxtb	r3, r3
   12498:	e7ef      	b.n	1247a <readLaserCallback+0x76>
   1249a:	46c0      	nop			; (mov r8, r8)
   1249c:	20001130 	.word	0x20001130
   124a0:	2000116f 	.word	0x2000116f
   124a4:	200011d4 	.word	0x200011d4
   124a8:	20000ff8 	.word	0x20000ff8
   124ac:	200010e4 	.word	0x200010e4
   124b0:	0000bead 	.word	0x0000bead
   124b4:	200016ab 	.word	0x200016ab
   124b8:	200016a8 	.word	0x200016a8

000124bc <disable_comms>:
void disable_comms(void){
   124bc:	b570      	push	{r4, r5, r6, lr}
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   124be:	4e26      	ldr	r6, [pc, #152]	; (12558 <disable_comms+0x9c>)

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   124c0:	4c26      	ldr	r4, [pc, #152]	; (1255c <disable_comms+0xa0>)
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   124c2:	6835      	ldr	r5, [r6, #0]
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   124c4:	0028      	movs	r0, r5
   124c6:	47a0      	blx	r4
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   124c8:	231f      	movs	r3, #31
   124ca:	4018      	ands	r0, r3
   124cc:	3b1e      	subs	r3, #30
   124ce:	2280      	movs	r2, #128	; 0x80
   124d0:	4083      	lsls	r3, r0
   124d2:	4923      	ldr	r1, [pc, #140]	; (12560 <disable_comms+0xa4>)
   124d4:	508b      	str	r3, [r1, r2]
   124d6:	6831      	ldr	r1, [r6, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   124d8:	3a79      	subs	r2, #121	; 0x79
   124da:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
   124dc:	421a      	tst	r2, r3
   124de:	d1fc      	bne.n	124da <disable_comms+0x1e>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   124e0:	2383      	movs	r3, #131	; 0x83
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   124e2:	2202      	movs	r2, #2
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   124e4:	752b      	strb	r3, [r5, #20]
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
   124e6:	762b      	strb	r3, [r5, #24]
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   124e8:	682b      	ldr	r3, [r5, #0]
   124ea:	4393      	bics	r3, r2
   124ec:	602b      	str	r3, [r5, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   124ee:	4b1d      	ldr	r3, [pc, #116]	; (12564 <disable_comms+0xa8>)
   124f0:	681a      	ldr	r2, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
   124f2:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
   124f4:	2b00      	cmp	r3, #0
   124f6:	d1fc      	bne.n	124f2 <disable_comms+0x36>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   124f8:	2102      	movs	r1, #2
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   124fa:	338f      	adds	r3, #143	; 0x8f
   124fc:	7513      	strb	r3, [r2, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   124fe:	7613      	strb	r3, [r2, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   12500:	6813      	ldr	r3, [r2, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   12502:	4e19      	ldr	r6, [pc, #100]	; (12568 <disable_comms+0xac>)
   12504:	438b      	bics	r3, r1
   12506:	6013      	str	r3, [r2, #0]
   12508:	6835      	ldr	r5, [r6, #0]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   1250a:	0028      	movs	r0, r5
   1250c:	47a0      	blx	r4
   1250e:	231f      	movs	r3, #31
   12510:	4018      	ands	r0, r3
   12512:	3b1e      	subs	r3, #30
   12514:	2280      	movs	r2, #128	; 0x80
   12516:	4083      	lsls	r3, r0
   12518:	4911      	ldr	r1, [pc, #68]	; (12560 <disable_comms+0xa4>)
   1251a:	508b      	str	r3, [r1, r2]
   1251c:	6832      	ldr	r2, [r6, #0]
	return (usart_hw->SYNCBUSY.reg);
   1251e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   12520:	2b00      	cmp	r3, #0
   12522:	d1fc      	bne.n	1251e <disable_comms+0x62>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
   12524:	2202      	movs	r2, #2
   12526:	682b      	ldr	r3, [r5, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
   12528:	4e10      	ldr	r6, [pc, #64]	; (1256c <disable_comms+0xb0>)
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
   1252a:	4393      	bics	r3, r2
   1252c:	602b      	str	r3, [r5, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
   1252e:	6835      	ldr	r5, [r6, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   12530:	0028      	movs	r0, r5
   12532:	47a0      	blx	r4
   12534:	231f      	movs	r3, #31
   12536:	4018      	ands	r0, r3
   12538:	3b1e      	subs	r3, #30
   1253a:	2280      	movs	r2, #128	; 0x80
   1253c:	4083      	lsls	r3, r0
   1253e:	4908      	ldr	r1, [pc, #32]	; (12560 <disable_comms+0xa4>)
   12540:	508b      	str	r3, [r1, r2]
   12542:	6832      	ldr	r2, [r6, #0]
	return (usart_hw->SYNCBUSY.reg);
   12544:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   12546:	2b00      	cmp	r3, #0
   12548:	d1fc      	bne.n	12544 <disable_comms+0x88>
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
   1254a:	2102      	movs	r1, #2
   1254c:	682a      	ldr	r2, [r5, #0]
   1254e:	438a      	bics	r2, r1
   12550:	602a      	str	r2, [r5, #0]
	USART_BLE_enabled = false;
   12552:	4a07      	ldr	r2, [pc, #28]	; (12570 <disable_comms+0xb4>)
   12554:	7013      	strb	r3, [r2, #0]
}
   12556:	bd70      	pop	{r4, r5, r6, pc}
   12558:	20001140 	.word	0x20001140
   1255c:	0000be05 	.word	0x0000be05
   12560:	e000e100 	.word	0xe000e100
   12564:	20001134 	.word	0x20001134
   12568:	200010e4 	.word	0x200010e4
   1256c:	20001220 	.word	0x20001220
   12570:	2000440c 	.word	0x2000440c

00012574 <setup_spi>:
void setup_spi(void){
   12574:	b5f0      	push	{r4, r5, r6, r7, lr}
   12576:	46ce      	mov	lr, r9
   12578:	4647      	mov	r7, r8
	slave->ss_pin          = config->ss_pin;
   1257a:	2317      	movs	r3, #23
	slave->address_enabled = config->address_enabled;
   1257c:	2600      	movs	r6, #0
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
   1257e:	2501      	movs	r5, #1
   12580:	b580      	push	{r7, lr}
	slave->ss_pin          = config->ss_pin;
   12582:	4f6d      	ldr	r7, [pc, #436]	; (12738 <setup_spi+0x1c4>)
   12584:	b083      	sub	sp, #12
   12586:	ac01      	add	r4, sp, #4
   12588:	703b      	strb	r3, [r7, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1258a:	4b6c      	ldr	r3, [pc, #432]	; (1273c <setup_spi+0x1c8>)
   1258c:	0021      	movs	r1, r4
   1258e:	2017      	movs	r0, #23
   12590:	4699      	mov	r9, r3
	slave->address_enabled = config->address_enabled;
   12592:	707e      	strb	r6, [r7, #1]
	slave->address         = config->address;
   12594:	70be      	strb	r6, [r7, #2]
   12596:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
   12598:	70a6      	strb	r6, [r4, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   1259a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1259c:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   1259e:	783a      	ldrb	r2, [r7, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
   125a0:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
   125a2:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
   125a4:	4688      	mov	r8, r1
   125a6:	2900      	cmp	r1, #0
   125a8:	d000      	beq.n	125ac <setup_spi+0x38>
   125aa:	e0c3      	b.n	12734 <setup_spi+0x1c0>
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   125ac:	271f      	movs	r7, #31
   125ae:	0029      	movs	r1, r5
   125b0:	403a      	ands	r2, r7
   125b2:	4091      	lsls	r1, r2
   125b4:	000a      	movs	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
   125b6:	4962      	ldr	r1, [pc, #392]	; (12740 <setup_spi+0x1cc>)
   125b8:	01db      	lsls	r3, r3, #7
   125ba:	468c      	mov	ip, r1
   125bc:	4463      	add	r3, ip
   125be:	619a      	str	r2, [r3, #24]
	slave->ss_pin          = config->ss_pin;
   125c0:	2312      	movs	r3, #18
   125c2:	4e60      	ldr	r6, [pc, #384]	; (12744 <setup_spi+0x1d0>)
	port_pin_set_config(slave->ss_pin, &pin_conf);
   125c4:	0021      	movs	r1, r4
	slave->ss_pin          = config->ss_pin;
   125c6:	7033      	strb	r3, [r6, #0]
	slave->address_enabled = config->address_enabled;
   125c8:	4643      	mov	r3, r8
	port_pin_set_config(slave->ss_pin, &pin_conf);
   125ca:	2012      	movs	r0, #18
	slave->address_enabled = config->address_enabled;
   125cc:	7073      	strb	r3, [r6, #1]
	slave->address         = config->address;
   125ce:	70b3      	strb	r3, [r6, #2]
	config->powersave  = false;
   125d0:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
   125d2:	7065      	strb	r5, [r4, #1]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   125d4:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   125d6:	47c8      	blx	r9
	port_pin_set_output_level(slave->ss_pin, true);
   125d8:	7832      	ldrb	r2, [r6, #0]
	uint8_t group_index = (gpio_pin / 32);
   125da:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
   125dc:	09d6      	lsrs	r6, r2, #7
   125de:	d000      	beq.n	125e2 <setup_spi+0x6e>
   125e0:	e0a5      	b.n	1272e <setup_spi+0x1ba>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   125e2:	0029      	movs	r1, r5
   125e4:	403a      	ands	r2, r7
   125e6:	4091      	lsls	r1, r2
   125e8:	000a      	movs	r2, r1
		port_base->OUTSET.reg = pin_mask;
   125ea:	4955      	ldr	r1, [pc, #340]	; (12740 <setup_spi+0x1cc>)
   125ec:	01db      	lsls	r3, r3, #7
   125ee:	468c      	mov	ip, r1
   125f0:	4463      	add	r3, ip
   125f2:	619a      	str	r2, [r3, #24]
	slave->ss_pin          = config->ss_pin;
   125f4:	4b54      	ldr	r3, [pc, #336]	; (12748 <setup_spi+0x1d4>)
	port_pin_set_config(slave->ss_pin, &pin_conf);
   125f6:	0021      	movs	r1, r4
	slave->ss_pin          = config->ss_pin;
   125f8:	4698      	mov	r8, r3
   125fa:	2313      	movs	r3, #19
   125fc:	4642      	mov	r2, r8
	port_pin_set_config(slave->ss_pin, &pin_conf);
   125fe:	2013      	movs	r0, #19
	slave->ss_pin          = config->ss_pin;
   12600:	7013      	strb	r3, [r2, #0]
	slave->address_enabled = config->address_enabled;
   12602:	7056      	strb	r6, [r2, #1]
	slave->address         = config->address;
   12604:	7096      	strb	r6, [r2, #2]
	config->input_pull = PORT_PIN_PULL_UP;
   12606:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
   12608:	70a6      	strb	r6, [r4, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   1260a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1260c:	47c8      	blx	r9
	port_pin_set_output_level(slave->ss_pin, true);
   1260e:	4643      	mov	r3, r8
   12610:	781a      	ldrb	r2, [r3, #0]
   12612:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
   12614:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
   12616:	4688      	mov	r8, r1
   12618:	2900      	cmp	r1, #0
   1261a:	d000      	beq.n	1261e <setup_spi+0xaa>
   1261c:	e08a      	b.n	12734 <setup_spi+0x1c0>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1261e:	0029      	movs	r1, r5
   12620:	403a      	ands	r2, r7
   12622:	4091      	lsls	r1, r2
   12624:	000a      	movs	r2, r1
		port_base->OUTSET.reg = pin_mask;
   12626:	4946      	ldr	r1, [pc, #280]	; (12740 <setup_spi+0x1cc>)
   12628:	01db      	lsls	r3, r3, #7
   1262a:	468c      	mov	ip, r1
   1262c:	4463      	add	r3, ip
   1262e:	619a      	str	r2, [r3, #24]
	slave->ss_pin          = config->ss_pin;
   12630:	2315      	movs	r3, #21
   12632:	4e46      	ldr	r6, [pc, #280]	; (1274c <setup_spi+0x1d8>)
	port_pin_set_config(slave->ss_pin, &pin_conf);
   12634:	0021      	movs	r1, r4
	slave->ss_pin          = config->ss_pin;
   12636:	7033      	strb	r3, [r6, #0]
	slave->address_enabled = config->address_enabled;
   12638:	4643      	mov	r3, r8
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1263a:	2015      	movs	r0, #21
	slave->address_enabled = config->address_enabled;
   1263c:	7073      	strb	r3, [r6, #1]
	slave->address         = config->address;
   1263e:	70b3      	strb	r3, [r6, #2]
	config->powersave  = false;
   12640:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
   12642:	7065      	strb	r5, [r4, #1]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   12644:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   12646:	47c8      	blx	r9
	port_pin_set_output_level(slave->ss_pin, true);
   12648:	7832      	ldrb	r2, [r6, #0]
	uint8_t group_index = (gpio_pin / 32);
   1264a:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
   1264c:	09d6      	lsrs	r6, r2, #7
   1264e:	d000      	beq.n	12652 <setup_spi+0xde>
   12650:	e06d      	b.n	1272e <setup_spi+0x1ba>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   12652:	0029      	movs	r1, r5
   12654:	403a      	ands	r2, r7
   12656:	4091      	lsls	r1, r2
   12658:	000a      	movs	r2, r1
		port_base->OUTSET.reg = pin_mask;
   1265a:	4939      	ldr	r1, [pc, #228]	; (12740 <setup_spi+0x1cc>)
   1265c:	01db      	lsls	r3, r3, #7
   1265e:	468c      	mov	ip, r1
   12660:	4463      	add	r3, ip
   12662:	619a      	str	r2, [r3, #24]
	slave->ss_pin          = config->ss_pin;
   12664:	4b3a      	ldr	r3, [pc, #232]	; (12750 <setup_spi+0x1dc>)
	port_pin_set_config(slave->ss_pin, &pin_conf);
   12666:	0021      	movs	r1, r4
	slave->ss_pin          = config->ss_pin;
   12668:	4698      	mov	r8, r3
   1266a:	2314      	movs	r3, #20
   1266c:	4642      	mov	r2, r8
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1266e:	2014      	movs	r0, #20
	slave->ss_pin          = config->ss_pin;
   12670:	7013      	strb	r3, [r2, #0]
	slave->address_enabled = config->address_enabled;
   12672:	7056      	strb	r6, [r2, #1]
	slave->address         = config->address;
   12674:	7096      	strb	r6, [r2, #2]
	config->input_pull = PORT_PIN_PULL_UP;
   12676:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
   12678:	70a6      	strb	r6, [r4, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   1267a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1267c:	47c8      	blx	r9
	port_pin_set_output_level(slave->ss_pin, true);
   1267e:	4643      	mov	r3, r8
   12680:	781a      	ldrb	r2, [r3, #0]
   12682:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
   12684:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
   12686:	4688      	mov	r8, r1
   12688:	2900      	cmp	r1, #0
   1268a:	d153      	bne.n	12734 <setup_spi+0x1c0>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1268c:	0029      	movs	r1, r5
   1268e:	403a      	ands	r2, r7
   12690:	4091      	lsls	r1, r2
   12692:	000a      	movs	r2, r1
		port_base->OUTSET.reg = pin_mask;
   12694:	492a      	ldr	r1, [pc, #168]	; (12740 <setup_spi+0x1cc>)
   12696:	01db      	lsls	r3, r3, #7
   12698:	468c      	mov	ip, r1
   1269a:	4463      	add	r3, ip
   1269c:	619a      	str	r2, [r3, #24]
	slave->ss_pin          = config->ss_pin;
   1269e:	230f      	movs	r3, #15
   126a0:	4e2c      	ldr	r6, [pc, #176]	; (12754 <setup_spi+0x1e0>)
	port_pin_set_config(slave->ss_pin, &pin_conf);
   126a2:	0021      	movs	r1, r4
	slave->ss_pin          = config->ss_pin;
   126a4:	7033      	strb	r3, [r6, #0]
	slave->address_enabled = config->address_enabled;
   126a6:	4643      	mov	r3, r8
	port_pin_set_config(slave->ss_pin, &pin_conf);
   126a8:	200f      	movs	r0, #15
	slave->address_enabled = config->address_enabled;
   126aa:	7073      	strb	r3, [r6, #1]
	slave->address         = config->address;
   126ac:	70b3      	strb	r3, [r6, #2]
	config->powersave  = false;
   126ae:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
   126b0:	7065      	strb	r5, [r4, #1]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   126b2:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   126b4:	47c8      	blx	r9
	port_pin_set_output_level(slave->ss_pin, true);
   126b6:	7832      	ldrb	r2, [r6, #0]
	uint8_t group_index = (gpio_pin / 32);
   126b8:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
   126ba:	09d6      	lsrs	r6, r2, #7
   126bc:	d137      	bne.n	1272e <setup_spi+0x1ba>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   126be:	4017      	ands	r7, r2
   126c0:	002a      	movs	r2, r5
		port_base->OUTSET.reg = pin_mask;
   126c2:	491f      	ldr	r1, [pc, #124]	; (12740 <setup_spi+0x1cc>)
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   126c4:	40ba      	lsls	r2, r7
		port_base->OUTSET.reg = pin_mask;
   126c6:	468c      	mov	ip, r1
	config->mode             = SPI_MODE_MASTER;
   126c8:	4c23      	ldr	r4, [pc, #140]	; (12758 <setup_spi+0x1e4>)
   126ca:	01db      	lsls	r3, r3, #7
   126cc:	4463      	add	r3, ip
   126ce:	619a      	str	r2, [r3, #24]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   126d0:	0020      	movs	r0, r4
	config->generator_source = GCLK_GENERATOR_0;
   126d2:	2324      	movs	r3, #36	; 0x24
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   126d4:	220c      	movs	r2, #12
	config->generator_source = GCLK_GENERATOR_0;
   126d6:	54e6      	strb	r6, [r4, r3]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   126d8:	2100      	movs	r1, #0
   126da:	4b20      	ldr	r3, [pc, #128]	; (1275c <setup_spi+0x1e8>)
   126dc:	3018      	adds	r0, #24
	config->mode             = SPI_MODE_MASTER;
   126de:	7025      	strb	r5, [r4, #0]
	config->receiver_enable  = true;
   126e0:	74a5      	strb	r5, [r4, #18]
	config->select_slave_low_detect_enable= true;
   126e2:	74e5      	strb	r5, [r4, #19]
	config->data_order       = SPI_DATA_ORDER_MSB;
   126e4:	6066      	str	r6, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   126e6:	60a6      	str	r6, [r4, #8]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   126e8:	7426      	strb	r6, [r4, #16]
	config->run_in_standby   = false;
   126ea:	7466      	strb	r6, [r4, #17]
	config->master_slave_select_enable= false;
   126ec:	7526      	strb	r6, [r4, #20]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   126ee:	4798      	blx	r3
	config_spi_master.mux_setting = SPI_SIGNAL_MUX_SETTING_E;
   126f0:	2380      	movs	r3, #128	; 0x80
   126f2:	025b      	lsls	r3, r3, #9
   126f4:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = PINMUX_PB08D_SERCOM4_PAD0;
   126f6:	4b1a      	ldr	r3, [pc, #104]	; (12760 <setup_spi+0x1ec>)
	spi_init(&spi_main, SERCOM4, &config_spi_master);
   126f8:	4d1a      	ldr	r5, [pc, #104]	; (12764 <setup_spi+0x1f0>)
	config_spi_master.pinmux_pad0 = PINMUX_PB08D_SERCOM4_PAD0;
   126fa:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad2 = PINMUX_PB10D_SERCOM4_PAD2;
   126fc:	4b1a      	ldr	r3, [pc, #104]	; (12768 <setup_spi+0x1f4>)
	spi_init(&spi_main, SERCOM4, &config_spi_master);
   126fe:	0022      	movs	r2, r4
	config_spi_master.pinmux_pad2 = PINMUX_PB10D_SERCOM4_PAD2;
   12700:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = PINMUX_PB11D_SERCOM4_PAD3;
   12702:	4b1a      	ldr	r3, [pc, #104]	; (1276c <setup_spi+0x1f8>)
	spi_init(&spi_main, SERCOM4, &config_spi_master);
   12704:	491a      	ldr	r1, [pc, #104]	; (12770 <setup_spi+0x1fc>)
	config_spi_master.pinmux_pad3 = PINMUX_PB11D_SERCOM4_PAD3;
   12706:	6363      	str	r3, [r4, #52]	; 0x34
	config_spi_master.mode_specific.master.baudrate = baudMaxAcc;
   12708:	4b1a      	ldr	r3, [pc, #104]	; (12774 <setup_spi+0x200>)
	spi_init(&spi_main, SERCOM4, &config_spi_master);
   1270a:	0028      	movs	r0, r5
	config_spi_master.mode_specific.master.baudrate = baudMaxAcc;
   1270c:	61a3      	str	r3, [r4, #24]
	spi_init(&spi_main, SERCOM4, &config_spi_master);
   1270e:	4b1a      	ldr	r3, [pc, #104]	; (12778 <setup_spi+0x204>)
	config->pinmux_pad1 = PINMUX_DEFAULT;
   12710:	62e6      	str	r6, [r4, #44]	; 0x2c
   12712:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
   12714:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   12716:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
   12718:	2b00      	cmp	r3, #0
   1271a:	d1fc      	bne.n	12716 <setup_spi+0x1a2>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   1271c:	2102      	movs	r1, #2
   1271e:	6813      	ldr	r3, [r2, #0]
   12720:	430b      	orrs	r3, r1
   12722:	6013      	str	r3, [r2, #0]
}
   12724:	b003      	add	sp, #12
   12726:	bc0c      	pop	{r2, r3}
   12728:	4690      	mov	r8, r2
   1272a:	4699      	mov	r9, r3
   1272c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1272e:	4643      	mov	r3, r8
   12730:	619b      	str	r3, [r3, #24]
   12732:	deff      	udf	#255	; 0xff
   12734:	61b6      	str	r6, [r6, #24]
   12736:	deff      	udf	#255	; 0xff
   12738:	200010c8 	.word	0x200010c8
   1273c:	00015209 	.word	0x00015209
   12740:	40002800 	.word	0x40002800
   12744:	20001168 	.word	0x20001168
   12748:	200010e0 	.word	0x200010e0
   1274c:	2000116c 	.word	0x2000116c
   12750:	200010c4 	.word	0x200010c4
   12754:	20001118 	.word	0x20001118
   12758:	200011e8 	.word	0x200011e8
   1275c:	0001f06d 	.word	0x0001f06d
   12760:	00280003 	.word	0x00280003
   12764:	20001134 	.word	0x20001134
   12768:	002a0003 	.word	0x002a0003
   1276c:	002b0003 	.word	0x002b0003
   12770:	42001000 	.word	0x42001000
   12774:	002625a0 	.word	0x002625a0
   12778:	000144dd 	.word	0x000144dd

0001277c <configure_usart>:
void configure_usart(void){
   1277c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1277e:	b091      	sub	sp, #68	; 0x44
	config->parity           = USART_PARITY_NONE;
   12780:	4669      	mov	r1, sp
   12782:	22ff      	movs	r2, #255	; 0xff
   12784:	810a      	strh	r2, [r1, #8]
	config->baudrate         = 9600;
   12786:	2296      	movs	r2, #150	; 0x96
	config->data_order       = USART_DATAORDER_LSB;
   12788:	2380      	movs	r3, #128	; 0x80
	config->baudrate         = 9600;
   1278a:	0192      	lsls	r2, r2, #6
   1278c:	9208      	str	r2, [sp, #32]
	config->receiver_enable  = true;
   1278e:	2202      	movs	r2, #2
	config->data_order       = USART_DATAORDER_LSB;
   12790:	05db      	lsls	r3, r3, #23
   12792:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   12794:	2300      	movs	r3, #0
	config->receiver_enable  = true;
   12796:	32ff      	adds	r2, #255	; 0xff
   12798:	9209      	str	r2, [sp, #36]	; 0x24
	config->run_in_standby   = false;
   1279a:	3ad5      	subs	r2, #213	; 0xd5
   1279c:	548b      	strb	r3, [r1, r2]
	config->generator_source = GCLK_GENERATOR_0;
   1279e:	3201      	adds	r2, #1
   127a0:	548b      	strb	r3, [r1, r2]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   127a2:	9301      	str	r3, [sp, #4]
	config->stopbits         = USART_STOPBITS_1;
   127a4:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   127a6:	72cb      	strb	r3, [r1, #11]
	config->ext_clock_freq   = 0;
   127a8:	930a      	str	r3, [sp, #40]	; 0x28
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   127aa:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   127ac:	820b      	strh	r3, [r1, #16]
	config->receive_pulse_length                    = 19;
   127ae:	2313      	movs	r3, #19
   127b0:	768b      	strb	r3, [r1, #26]
	config_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
   127b2:	2380      	movs	r3, #128	; 0x80
   127b4:	035b      	lsls	r3, r3, #13
   127b6:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
   127b8:	4b48      	ldr	r3, [pc, #288]	; (128dc <configure_usart+0x160>)
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   127ba:	2200      	movs	r2, #0
   127bc:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_PA17C_SERCOM1_PAD1;
   127be:	4b48      	ldr	r3, [pc, #288]	; (128e0 <configure_usart+0x164>)
	config->lin_slave_enable      = false;
   127c0:	76ca      	strb	r2, [r1, #27]
   127c2:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_UNUSED;
   127c4:	2301      	movs	r3, #1
   127c6:	425b      	negs	r3, r3
	config->immediate_buffer_overflow_notification  = false;
   127c8:	760a      	strb	r2, [r1, #24]
	config->start_frame_detection_enable            = false;
   127ca:	770a      	strb	r2, [r1, #28]
	config->encoding_format_enable                  = false;
   127cc:	764a      	strb	r2, [r1, #25]
	config->collision_detection_enable              = false;
   127ce:	774a      	strb	r2, [r1, #29]
   127d0:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_UNUSED;
   127d2:	930f      	str	r3, [sp, #60]	; 0x3c
   127d4:	4c43      	ldr	r4, [pc, #268]	; (128e4 <configure_usart+0x168>)
   127d6:	4d44      	ldr	r5, [pc, #272]	; (128e8 <configure_usart+0x16c>)
   127d8:	e001      	b.n	127de <configure_usart+0x62>
	}while((usart_status != STATUS_OK) && (usart_status != STATUS_ERR_DENIED) );
   127da:	281c      	cmp	r0, #28
   127dc:	d005      	beq.n	127ea <configure_usart+0x6e>
		usart_status = usart_init(&usart_laser,	SERCOM1, &config_usart) ;
   127de:	466a      	mov	r2, sp
   127e0:	4942      	ldr	r1, [pc, #264]	; (128ec <configure_usart+0x170>)
   127e2:	0020      	movs	r0, r4
   127e4:	47a8      	blx	r5
	}while((usart_status != STATUS_OK) && (usart_status != STATUS_ERR_DENIED) );
   127e6:	2800      	cmp	r0, #0
   127e8:	d1f7      	bne.n	127da <configure_usart+0x5e>
	SercomUsart *const usart_hw = &(module->hw->USART);
   127ea:	6826      	ldr	r6, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   127ec:	4f40      	ldr	r7, [pc, #256]	; (128f0 <configure_usart+0x174>)
   127ee:	0030      	movs	r0, r6
   127f0:	47b8      	blx	r7
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   127f2:	231f      	movs	r3, #31
   127f4:	4018      	ands	r0, r3
   127f6:	3b1e      	subs	r3, #30
   127f8:	4083      	lsls	r3, r0
   127fa:	4a3e      	ldr	r2, [pc, #248]	; (128f4 <configure_usart+0x178>)
   127fc:	6013      	str	r3, [r2, #0]
   127fe:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
   12800:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   12802:	2b00      	cmp	r3, #0
   12804:	d1fc      	bne.n	12800 <configure_usart+0x84>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   12806:	2102      	movs	r1, #2
   12808:	6832      	ldr	r2, [r6, #0]
	config->receiver_enable  = true;
   1280a:	4668      	mov	r0, sp
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   1280c:	430a      	orrs	r2, r1
   1280e:	6032      	str	r2, [r6, #0]
	config->data_order       = USART_DATAORDER_LSB;
   12810:	2280      	movs	r2, #128	; 0x80
   12812:	05d2      	lsls	r2, r2, #23
	config->parity           = USART_PARITY_NONE;
   12814:	4669      	mov	r1, sp
	config->data_order       = USART_DATAORDER_LSB;
   12816:	9200      	str	r2, [sp, #0]
	config->parity           = USART_PARITY_NONE;
   12818:	22ff      	movs	r2, #255	; 0xff
	config->stopbits         = USART_STOPBITS_1;
   1281a:	728b      	strb	r3, [r1, #10]
	config->parity           = USART_PARITY_NONE;
   1281c:	810a      	strh	r2, [r1, #8]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   1281e:	72cb      	strb	r3, [r1, #11]
	config->receiver_enable  = true;
   12820:	2201      	movs	r2, #1
   12822:	2124      	movs	r1, #36	; 0x24
   12824:	5442      	strb	r2, [r0, r1]
	config->transmitter_enable = true;
   12826:	3101      	adds	r1, #1
   12828:	5442      	strb	r2, [r0, r1]
	config->clock_polarity_inverted = false;
   1282a:	3225      	adds	r2, #37	; 0x25
   1282c:	5483      	strb	r3, [r0, r2]
	config->use_external_clock = false;
   1282e:	3201      	adds	r2, #1
   12830:	5483      	strb	r3, [r0, r2]
	config->run_in_standby   = false;
   12832:	3205      	adds	r2, #5
   12834:	5483      	strb	r3, [r0, r2]
	config->generator_source = GCLK_GENERATOR_0;
   12836:	3201      	adds	r2, #1
   12838:	5483      	strb	r3, [r0, r2]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   1283a:	9301      	str	r3, [sp, #4]
	config->ext_clock_freq   = 0;
   1283c:	930a      	str	r3, [sp, #40]	; 0x28
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   1283e:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   12840:	8203      	strh	r3, [r0, #16]
	config->receive_pulse_length                    = 19;
   12842:	2313      	movs	r3, #19
   12844:	7683      	strb	r3, [r0, #26]
	config_usart.baudrate    = 115200;
   12846:	23e1      	movs	r3, #225	; 0xe1
   12848:	025b      	lsls	r3, r3, #9
   1284a:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = USART_RX_1_TX_0_RTS_2_CTS_3;
   1284c:	2390      	movs	r3, #144	; 0x90
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   1284e:	2200      	movs	r2, #0
   12850:	035b      	lsls	r3, r3, #13
   12852:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
   12854:	4b28      	ldr	r3, [pc, #160]	; (128f8 <configure_usart+0x17c>)
	config->lin_slave_enable      = false;
   12856:	76c2      	strb	r2, [r0, #27]
   12858:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
   1285a:	4b28      	ldr	r3, [pc, #160]	; (128fc <configure_usart+0x180>)
	config->immediate_buffer_overflow_notification  = false;
   1285c:	7602      	strb	r2, [r0, #24]
   1285e:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_PA10C_SERCOM0_PAD2;
   12860:	4b27      	ldr	r3, [pc, #156]	; (12900 <configure_usart+0x184>)
	config->start_frame_detection_enable            = false;
   12862:	7702      	strb	r2, [r0, #28]
   12864:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_PA11C_SERCOM0_PAD3;
   12866:	4b27      	ldr	r3, [pc, #156]	; (12904 <configure_usart+0x188>)
	config->encoding_format_enable                  = false;
   12868:	7642      	strb	r2, [r0, #25]
	config->collision_detection_enable              = false;
   1286a:	7742      	strb	r2, [r0, #29]
   1286c:	930f      	str	r3, [sp, #60]	; 0x3c
   1286e:	e001      	b.n	12874 <configure_usart+0xf8>
	}while((usart_status != STATUS_OK) && (usart_status != STATUS_ERR_DENIED) );
   12870:	281c      	cmp	r0, #28
   12872:	d005      	beq.n	12880 <configure_usart+0x104>
		usart_status = usart_init(&usart_laser,	SERCOM1, &config_usart) ;
   12874:	466a      	mov	r2, sp
   12876:	491d      	ldr	r1, [pc, #116]	; (128ec <configure_usart+0x170>)
   12878:	0020      	movs	r0, r4
   1287a:	47a8      	blx	r5
	}while((usart_status != STATUS_OK) && (usart_status != STATUS_ERR_DENIED) );
   1287c:	2800      	cmp	r0, #0
   1287e:	d1f7      	bne.n	12870 <configure_usart+0xf4>
	SercomUsart *const usart_hw = &(module->hw->USART);
   12880:	4d21      	ldr	r5, [pc, #132]	; (12908 <configure_usart+0x18c>)
   12882:	682e      	ldr	r6, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   12884:	0030      	movs	r0, r6
   12886:	47b8      	blx	r7
   12888:	231f      	movs	r3, #31
   1288a:	4018      	ands	r0, r3
   1288c:	3b1e      	subs	r3, #30
   1288e:	4083      	lsls	r3, r0
   12890:	4a18      	ldr	r2, [pc, #96]	; (128f4 <configure_usart+0x178>)
   12892:	6013      	str	r3, [r2, #0]
   12894:	682b      	ldr	r3, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
   12896:	69dd      	ldr	r5, [r3, #28]
	while (usart_is_syncing(module)) {
   12898:	2d00      	cmp	r5, #0
   1289a:	d1fc      	bne.n	12896 <configure_usart+0x11a>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   1289c:	2202      	movs	r2, #2
   1289e:	6833      	ldr	r3, [r6, #0]
	usart_register_callback(&usart_laser,
   128a0:	0020      	movs	r0, r4
   128a2:	4313      	orrs	r3, r2
   128a4:	6033      	str	r3, [r6, #0]
	USART_BLE_enabled = true;
   128a6:	4b19      	ldr	r3, [pc, #100]	; (1290c <configure_usart+0x190>)
   128a8:	3a01      	subs	r2, #1
   128aa:	701a      	strb	r2, [r3, #0]
	usart_register_callback(&usart_laser,
   128ac:	4e18      	ldr	r6, [pc, #96]	; (12910 <configure_usart+0x194>)
   128ae:	2200      	movs	r2, #0
   128b0:	4918      	ldr	r1, [pc, #96]	; (12914 <configure_usart+0x198>)
   128b2:	47b0      	blx	r6
	usart_register_callback(&usart_laser,
   128b4:	0020      	movs	r0, r4
   128b6:	2201      	movs	r2, #1
   128b8:	4917      	ldr	r1, [pc, #92]	; (12918 <configure_usart+0x19c>)
   128ba:	47b0      	blx	r6
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   128bc:	2231      	movs	r2, #49	; 0x31
   128be:	2103      	movs	r1, #3
   128c0:	5ca3      	ldrb	r3, [r4, r2]
	usart_read_job(&usart_laser, rxBufferLaser); // 
   128c2:	0020      	movs	r0, r4
   128c4:	430b      	orrs	r3, r1
   128c6:	54a3      	strb	r3, [r4, r2]
	rxBufferLaserIndex = 0;
   128c8:	4b14      	ldr	r3, [pc, #80]	; (1291c <configure_usart+0x1a0>)
	usart_read_job(&usart_laser, rxBufferLaser); // 
   128ca:	4915      	ldr	r1, [pc, #84]	; (12920 <configure_usart+0x1a4>)
	rxBufferLaserIndex = 0;
   128cc:	701d      	strb	r5, [r3, #0]
	debugBufferIndex = 0;
   128ce:	4b15      	ldr	r3, [pc, #84]	; (12924 <configure_usart+0x1a8>)
   128d0:	701d      	strb	r5, [r3, #0]
	usart_read_job(&usart_laser, rxBufferLaser); // 
   128d2:	4b15      	ldr	r3, [pc, #84]	; (12928 <configure_usart+0x1ac>)
   128d4:	4798      	blx	r3
}
   128d6:	b011      	add	sp, #68	; 0x44
   128d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   128da:	46c0      	nop			; (mov r8, r8)
   128dc:	00100002 	.word	0x00100002
   128e0:	00110002 	.word	0x00110002
   128e4:	200010e4 	.word	0x200010e4
   128e8:	000141b1 	.word	0x000141b1
   128ec:	42000400 	.word	0x42000400
   128f0:	0000be05 	.word	0x0000be05
   128f4:	e000e100 	.word	0xe000e100
   128f8:	00080002 	.word	0x00080002
   128fc:	00090002 	.word	0x00090002
   12900:	000a0002 	.word	0x000a0002
   12904:	000b0002 	.word	0x000b0002
   12908:	20001220 	.word	0x20001220
   1290c:	2000440c 	.word	0x2000440c
   12910:	0000be95 	.word	0x0000be95
   12914:	000123f9 	.word	0x000123f9
   12918:	00012405 	.word	0x00012405
   1291c:	2000116f 	.word	0x2000116f
   12920:	200011d4 	.word	0x200011d4
   12924:	20001130 	.word	0x20001130
   12928:	0000bead 	.word	0x0000bead

0001292c <configure_usart_callbacks>:
{
   1292c:	b570      	push	{r4, r5, r6, lr}
	usart_register_callback(&usart_laser,
   1292e:	4c08      	ldr	r4, [pc, #32]	; (12950 <configure_usart_callbacks+0x24>)
   12930:	4d08      	ldr	r5, [pc, #32]	; (12954 <configure_usart_callbacks+0x28>)
   12932:	0020      	movs	r0, r4
   12934:	2200      	movs	r2, #0
   12936:	4908      	ldr	r1, [pc, #32]	; (12958 <configure_usart_callbacks+0x2c>)
   12938:	47a8      	blx	r5
	usart_register_callback(&usart_laser,
   1293a:	2201      	movs	r2, #1
   1293c:	4907      	ldr	r1, [pc, #28]	; (1295c <configure_usart_callbacks+0x30>)
   1293e:	0020      	movs	r0, r4
   12940:	47a8      	blx	r5
   12942:	2231      	movs	r2, #49	; 0x31
   12944:	2103      	movs	r1, #3
   12946:	5ca3      	ldrb	r3, [r4, r2]
   12948:	430b      	orrs	r3, r1
   1294a:	54a3      	strb	r3, [r4, r2]
}
   1294c:	bd70      	pop	{r4, r5, r6, pc}
   1294e:	46c0      	nop			; (mov r8, r8)
   12950:	200010e4 	.word	0x200010e4
   12954:	0000be95 	.word	0x0000be95
   12958:	000123f9 	.word	0x000123f9
   1295c:	00012405 	.word	0x00012405

00012960 <writeLaser>:
enum status_code writeLaser(uint8_t *tx_data, uint16_t length){
   12960:	000a      	movs	r2, r1
	LaserTransmitComplete=false;
   12962:	2100      	movs	r1, #0
enum status_code writeLaser(uint8_t *tx_data, uint16_t length){
   12964:	b510      	push	{r4, lr}
	LaserTransmitComplete=false;
   12966:	4b03      	ldr	r3, [pc, #12]	; (12974 <writeLaser+0x14>)
   12968:	7019      	strb	r1, [r3, #0]
	writeStatus = usart_write_buffer_job(&usart_laser, tx_data, length);
   1296a:	0001      	movs	r1, r0
   1296c:	4b02      	ldr	r3, [pc, #8]	; (12978 <writeLaser+0x18>)
   1296e:	4803      	ldr	r0, [pc, #12]	; (1297c <writeLaser+0x1c>)
   12970:	4798      	blx	r3
}
   12972:	bd10      	pop	{r4, pc}
   12974:	200016aa 	.word	0x200016aa
   12978:	0000befd 	.word	0x0000befd
   1297c:	200010e4 	.word	0x200010e4

00012980 <isLaserTransmitComplete>:
	return LaserTransmitComplete;
   12980:	4b01      	ldr	r3, [pc, #4]	; (12988 <isLaserTransmitComplete+0x8>)
   12982:	7818      	ldrb	r0, [r3, #0]
   12984:	b2c0      	uxtb	r0, r0
}
   12986:	4770      	bx	lr
   12988:	200016aa 	.word	0x200016aa

0001298c <isLaserReceiveComplete>:
	return LaserReceiveComplete;
   1298c:	4b01      	ldr	r3, [pc, #4]	; (12994 <isLaserReceiveComplete+0x8>)
   1298e:	7818      	ldrb	r0, [r3, #0]
   12990:	b2c0      	uxtb	r0, r0
}
   12992:	4770      	bx	lr
   12994:	200016ab 	.word	0x200016ab

00012998 <rxBufferLaserClear>:
	laserCurrentMessage = NONE;
   12998:	2300      	movs	r3, #0
   1299a:	4a03      	ldr	r2, [pc, #12]	; (129a8 <rxBufferLaserClear+0x10>)
   1299c:	7013      	strb	r3, [r2, #0]
	LaserReceiveComplete=false;
   1299e:	4a03      	ldr	r2, [pc, #12]	; (129ac <rxBufferLaserClear+0x14>)
   129a0:	7013      	strb	r3, [r2, #0]
	rxBufferLaserIndex = 0;
   129a2:	4a03      	ldr	r2, [pc, #12]	; (129b0 <rxBufferLaserClear+0x18>)
   129a4:	7013      	strb	r3, [r2, #0]
}
   129a6:	4770      	bx	lr
   129a8:	200016a8 	.word	0x200016a8
   129ac:	200016ab 	.word	0x200016ab
   129b0:	2000116f 	.word	0x2000116f

000129b4 <laserMessageType>:
enum LASER_MESSAGE_TYPE laserMessageType(void){
   129b4:	2300      	movs	r3, #0
   129b6:	4906      	ldr	r1, [pc, #24]	; (129d0 <laserMessageType+0x1c>)
		if(rxBufferLaser[i]==0xAA){
   129b8:	5cca      	ldrb	r2, [r1, r3]
   129ba:	2aaa      	cmp	r2, #170	; 0xaa
   129bc:	d004      	beq.n	129c8 <laserMessageType+0x14>
   129be:	3301      	adds	r3, #1
	for(i=0;i<sizeof(rxBufferLaser);i++){
   129c0:	2b14      	cmp	r3, #20
   129c2:	d1f9      	bne.n	129b8 <laserMessageType+0x4>
	enum LASER_MESSAGE_TYPE messType = 0;
   129c4:	2000      	movs	r0, #0
			break;
		}
		
	}
	return messType;
};
   129c6:	4770      	bx	lr
			messType =  rxBufferLaser[i+2];
   129c8:	3302      	adds	r3, #2
   129ca:	5cc8      	ldrb	r0, [r1, r3]
   129cc:	b2c0      	uxtb	r0, r0
			break;
   129ce:	e7fa      	b.n	129c6 <laserMessageType+0x12>
   129d0:	200011d4 	.word	0x200011d4

000129d4 <configure_i2c_master>:
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   129d4:	2364      	movs	r3, #100	; 0x64
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   129d6:	2180      	movs	r1, #128	; 0x80


//I2C
//************************************************
void configure_i2c_master(void)
{
   129d8:	b530      	push	{r4, r5, lr}
   129da:	b08f      	sub	sp, #60	; 0x3c
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   129dc:	9301      	str	r3, [sp, #4]
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   129de:	4b1f      	ldr	r3, [pc, #124]	; (12a5c <configure_i2c_master+0x88>)
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   129e0:	aa01      	add	r2, sp, #4
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   129e2:	0389      	lsls	r1, r1, #14
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   129e4:	6053      	str	r3, [r2, #4]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   129e6:	6111      	str	r1, [r2, #16]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   129e8:	2300      	movs	r3, #0
	config->scl_low_timeout  = false;
   129ea:	2124      	movs	r1, #36	; 0x24
   129ec:	5453      	strb	r3, [r2, r1]
	config->scl_stretch_only_after_ack_bit = false;
   129ee:	3108      	adds	r1, #8
   129f0:	5453      	strb	r3, [r2, r1]
	config->slave_scl_low_extend_timeout   = false;
   129f2:	3101      	adds	r1, #1
   129f4:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
   129f6:	3101      	adds	r1, #1
   129f8:	5453      	strb	r3, [r2, r1]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   129fa:	6093      	str	r3, [r2, #8]
	config->generator_source = GCLK_GENERATOR_0;
   129fc:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
   129fe:	7613      	strb	r3, [r2, #24]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   12a00:	6293      	str	r3, [r2, #40]	; 0x28
	config->sda_scl_rise_time_ns = 215;
   12a02:	33d7      	adds	r3, #215	; 0xd7
   12a04:	8613      	strh	r3, [r2, #48]	; 0x30
	config->unknown_bus_state_timeout = 65535;
   12a06:	4b16      	ldr	r3, [pc, #88]	; (12a60 <configure_i2c_master+0x8c>)
	/* Change buffer timeout to something longer. */
	config_i2c_master.generator_source = GCLK_FOR_I2C;
	config_i2c_master.buffer_timeout = 10000;
	config_i2c_master.pinmux_pad0    = PINMUX_PA12C_SERCOM2_PAD0;
	config_i2c_master.pinmux_pad1    = PINMUX_PA13C_SERCOM2_PAD1;
	i2c_master_init(&i2c_master_instance, SERCOM2, &config_i2c_master);
   12a08:	4d16      	ldr	r5, [pc, #88]	; (12a64 <configure_i2c_master+0x90>)
   12a0a:	9306      	str	r3, [sp, #24]
	config_i2c_master.pinmux_pad0    = PINMUX_PA12C_SERCOM2_PAD0;
   12a0c:	4b16      	ldr	r3, [pc, #88]	; (12a68 <configure_i2c_master+0x94>)
	i2c_master_init(&i2c_master_instance, SERCOM2, &config_i2c_master);
   12a0e:	4917      	ldr	r1, [pc, #92]	; (12a6c <configure_i2c_master+0x98>)
	config_i2c_master.pinmux_pad0    = PINMUX_PA12C_SERCOM2_PAD0;
   12a10:	61d3      	str	r3, [r2, #28]
	config_i2c_master.pinmux_pad1    = PINMUX_PA13C_SERCOM2_PAD1;
   12a12:	4b17      	ldr	r3, [pc, #92]	; (12a70 <configure_i2c_master+0x9c>)
	i2c_master_init(&i2c_master_instance, SERCOM2, &config_i2c_master);
   12a14:	0028      	movs	r0, r5
	config_i2c_master.pinmux_pad1    = PINMUX_PA13C_SERCOM2_PAD1;
   12a16:	6213      	str	r3, [r2, #32]
	i2c_master_init(&i2c_master_instance, SERCOM2, &config_i2c_master);
   12a18:	4b16      	ldr	r3, [pc, #88]	; (12a74 <configure_i2c_master+0xa0>)
   12a1a:	4798      	blx	r3
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   12a1c:	2207      	movs	r2, #7
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12a1e:	682c      	ldr	r4, [r5, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   12a20:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
   12a22:	421a      	tst	r2, r3
   12a24:	d1fc      	bne.n	12a20 <configure_i2c_master+0x4c>
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   12a26:	2202      	movs	r2, #2
   12a28:	6823      	ldr	r3, [r4, #0]
   12a2a:	4313      	orrs	r3, r2
   12a2c:	6023      	str	r3, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   12a2e:	6828      	ldr	r0, [r5, #0]
   12a30:	4b11      	ldr	r3, [pc, #68]	; (12a78 <configure_i2c_master+0xa4>)
   12a32:	4798      	blx	r3
   12a34:	231f      	movs	r3, #31
   12a36:	4018      	ands	r0, r3
   12a38:	3b1e      	subs	r3, #30
   12a3a:	4083      	lsls	r3, r0
   12a3c:	4a0f      	ldr	r2, [pc, #60]	; (12a7c <configure_i2c_master+0xa8>)
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   12a3e:	2110      	movs	r1, #16
   12a40:	6013      	str	r3, [r2, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   12a42:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
   12a44:	2300      	movs	r3, #0
   12a46:	e002      	b.n	12a4e <configure_i2c_master+0x7a>
		timeout_counter++;
   12a48:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   12a4a:	4283      	cmp	r3, r0
   12a4c:	d204      	bcs.n	12a58 <configure_i2c_master+0x84>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   12a4e:	8b62      	ldrh	r2, [r4, #26]
   12a50:	4211      	tst	r1, r2
   12a52:	d0f9      	beq.n	12a48 <configure_i2c_master+0x74>
	i2c_master_enable(&i2c_master_instance);
}
   12a54:	b00f      	add	sp, #60	; 0x3c
   12a56:	bd30      	pop	{r4, r5, pc}
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   12a58:	8361      	strh	r1, [r4, #26]
   12a5a:	e7fb      	b.n	12a54 <configure_i2c_master+0x80>
   12a5c:	00000d48 	.word	0x00000d48
   12a60:	2710ffff 	.word	0x2710ffff
   12a64:	20001140 	.word	0x20001140
   12a68:	000c0002 	.word	0x000c0002
   12a6c:	42000800 	.word	0x42000800
   12a70:	000d0002 	.word	0x000d0002
   12a74:	0000b7b5 	.word	0x0000b7b5
   12a78:	0000be05 	.word	0x0000be05
   12a7c:	e000e100 	.word	0xe000e100

00012a80 <i2c_read_write>:

void i2c_read_write(enum read_write mode, uint8_t device, uint8_t *buf, uint8_t length){
   12a80:	b5f0      	push	{r4, r5, r6, r7, lr}
   12a82:	46ce      	mov	lr, r9
   12a84:	4647      	mov	r7, r8
   12a86:	4690      	mov	r8, r2
   12a88:	b580      	push	{r7, lr}
   12a8a:	b085      	sub	sp, #20
	//first character in buffer is read/write register address
	uint16_t limit=100;
	uint16_t timeout;
	struct i2c_master_packet packet = {
   12a8c:	ad01      	add	r5, sp, #4
void i2c_read_write(enum read_write mode, uint8_t device, uint8_t *buf, uint8_t length){
   12a8e:	000e      	movs	r6, r1
   12a90:	0004      	movs	r4, r0
   12a92:	4699      	mov	r9, r3
	struct i2c_master_packet packet = {
   12a94:	220c      	movs	r2, #12
   12a96:	4b1f      	ldr	r3, [pc, #124]	; (12b14 <i2c_read_write+0x94>)
   12a98:	2100      	movs	r1, #0
   12a9a:	0028      	movs	r0, r5
   12a9c:	4798      	blx	r3
   12a9e:	4643      	mov	r3, r8
   12aa0:	802e      	strh	r6, [r5, #0]
   12aa2:	606b      	str	r3, [r5, #4]
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	
	if (mode==readp){
   12aa4:	2c00      	cmp	r4, #0
   12aa6:	d124      	bne.n	12af2 <i2c_read_write+0x72>
		timeout=0;
		packet.data_length=1;
   12aa8:	2301      	movs	r3, #1
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   12aaa:	3465      	adds	r4, #101	; 0x65
		packet.data_length=1;
   12aac:	806b      	strh	r3, [r5, #2]
   12aae:	4e1a      	ldr	r6, [pc, #104]	; (12b18 <i2c_read_write+0x98>)
   12ab0:	4f1a      	ldr	r7, [pc, #104]	; (12b1c <i2c_read_write+0x9c>)
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   12ab2:	e003      	b.n	12abc <i2c_read_write+0x3c>
   12ab4:	3c01      	subs	r4, #1
   12ab6:	b2a4      	uxth	r4, r4
			if (timeout++ == limit) {   break;   }
   12ab8:	2c00      	cmp	r4, #0
   12aba:	d004      	beq.n	12ac6 <i2c_read_write+0x46>
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   12abc:	0029      	movs	r1, r5
   12abe:	0030      	movs	r0, r6
   12ac0:	47b8      	blx	r7
   12ac2:	2800      	cmp	r0, #0
   12ac4:	d1f6      	bne.n	12ab4 <i2c_read_write+0x34>
		}
		timeout=0;
		packet.data=buf+1;
   12ac6:	4643      	mov	r3, r8
   12ac8:	3301      	adds	r3, #1
   12aca:	606b      	str	r3, [r5, #4]
		packet.data_length=length;
   12acc:	464b      	mov	r3, r9
		while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   12ace:	2465      	movs	r4, #101	; 0x65
		packet.data_length=length;
   12ad0:	806b      	strh	r3, [r5, #2]
   12ad2:	4f13      	ldr	r7, [pc, #76]	; (12b20 <i2c_read_write+0xa0>)
		while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   12ad4:	e003      	b.n	12ade <i2c_read_write+0x5e>
   12ad6:	3c01      	subs	r4, #1
   12ad8:	b2a4      	uxth	r4, r4
			if (timeout++ == limit) {   break;   }
   12ada:	2c00      	cmp	r4, #0
   12adc:	d004      	beq.n	12ae8 <i2c_read_write+0x68>
		while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   12ade:	0029      	movs	r1, r5
   12ae0:	0030      	movs	r0, r6
   12ae2:	47b8      	blx	r7
   12ae4:	2800      	cmp	r0, #0
   12ae6:	d1f6      	bne.n	12ad6 <i2c_read_write+0x56>
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
			if (timeout++ == limit) {   break;   }
		}
	}
	
}
   12ae8:	b005      	add	sp, #20
   12aea:	bc0c      	pop	{r2, r3}
   12aec:	4690      	mov	r8, r2
   12aee:	4699      	mov	r9, r3
   12af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		packet.data_length=length;
   12af2:	464b      	mov	r3, r9
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   12af4:	2465      	movs	r4, #101	; 0x65
		packet.data_length=length;
   12af6:	806b      	strh	r3, [r5, #2]
   12af8:	4e07      	ldr	r6, [pc, #28]	; (12b18 <i2c_read_write+0x98>)
   12afa:	4f08      	ldr	r7, [pc, #32]	; (12b1c <i2c_read_write+0x9c>)
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   12afc:	e003      	b.n	12b06 <i2c_read_write+0x86>
   12afe:	3c01      	subs	r4, #1
   12b00:	b2a4      	uxth	r4, r4
			if (timeout++ == limit) {   break;   }
   12b02:	2c00      	cmp	r4, #0
   12b04:	d0f0      	beq.n	12ae8 <i2c_read_write+0x68>
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   12b06:	0029      	movs	r1, r5
   12b08:	0030      	movs	r0, r6
   12b0a:	47b8      	blx	r7
   12b0c:	2800      	cmp	r0, #0
   12b0e:	d1f6      	bne.n	12afe <i2c_read_write+0x7e>
   12b10:	e7ea      	b.n	12ae8 <i2c_read_write+0x68>
   12b12:	46c0      	nop			; (mov r8, r8)
   12b14:	0001f06d 	.word	0x0001f06d
   12b18:	20001140 	.word	0x20001140
   12b1c:	0000baf5 	.word	0x0000baf5
   12b20:	0000bad5 	.word	0x0000bad5

00012b24 <max17055_reg_read_write>:


void max17055_reg_read_write(enum read_write mode, uint8_t address, uint16_t *data){
   12b24:	b5f0      	push	{r4, r5, r6, r7, lr}
   12b26:	46c6      	mov	lr, r8
   12b28:	b500      	push	{lr}
   12b2a:	b084      	sub	sp, #16
	//MAX17055 is the battery fuel gauge
	//MAX17055 is 16-bit register read/writes with LSB first
	uint16_t temp16;
	uint8_t temp_buf[3];
	
	temp_buf[0] = address;
   12b2c:	466b      	mov	r3, sp
void max17055_reg_read_write(enum read_write mode, uint8_t address, uint16_t *data){
   12b2e:	4690      	mov	r8, r2
	temp_buf[0] = address;
   12b30:	7019      	strb	r1, [r3, #0]
	if (mode==readp){
   12b32:	2800      	cmp	r0, #0
   12b34:	d01f      	beq.n	12b76 <max17055_reg_read_write+0x52>
		temp16=temp_buf[2];
		temp16=temp16<<8;
		temp16=temp16+temp_buf[1];
		*data=temp16;
	}else{
		temp16=*data;
   12b36:	8813      	ldrh	r3, [r2, #0]
		temp_buf[1]=temp16 & 0x00FF;
   12b38:	466a      	mov	r2, sp
	struct i2c_master_packet packet = {
   12b3a:	ad01      	add	r5, sp, #4
		temp_buf[1]=temp16 & 0x00FF;
   12b3c:	7053      	strb	r3, [r2, #1]
		temp16=temp16>>8;
   12b3e:	0a1b      	lsrs	r3, r3, #8
		temp_buf[2]=temp16 & 0x00FF;
   12b40:	7093      	strb	r3, [r2, #2]
	struct i2c_master_packet packet = {
   12b42:	2100      	movs	r1, #0
   12b44:	4b24      	ldr	r3, [pc, #144]	; (12bd8 <max17055_reg_read_write+0xb4>)
   12b46:	220c      	movs	r2, #12
   12b48:	0028      	movs	r0, r5
   12b4a:	4798      	blx	r3
   12b4c:	466b      	mov	r3, sp
   12b4e:	606b      	str	r3, [r5, #4]
   12b50:	4b22      	ldr	r3, [pc, #136]	; (12bdc <max17055_reg_read_write+0xb8>)
   12b52:	2465      	movs	r4, #101	; 0x65
   12b54:	9301      	str	r3, [sp, #4]
   12b56:	4e22      	ldr	r6, [pc, #136]	; (12be0 <max17055_reg_read_write+0xbc>)
   12b58:	4f22      	ldr	r7, [pc, #136]	; (12be4 <max17055_reg_read_write+0xc0>)
   12b5a:	e003      	b.n	12b64 <max17055_reg_read_write+0x40>
   12b5c:	3c01      	subs	r4, #1
   12b5e:	b2a4      	uxth	r4, r4
			if (timeout++ == limit) {   break;   }
   12b60:	2c00      	cmp	r4, #0
   12b62:	d004      	beq.n	12b6e <max17055_reg_read_write+0x4a>
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   12b64:	0029      	movs	r1, r5
   12b66:	0030      	movs	r0, r6
   12b68:	47b8      	blx	r7
   12b6a:	2800      	cmp	r0, #0
   12b6c:	d1f6      	bne.n	12b5c <max17055_reg_read_write+0x38>
		i2c_read_write(writep, batt_add, temp_buf, 2);
	}
}
   12b6e:	b004      	add	sp, #16
   12b70:	bc04      	pop	{r2}
   12b72:	4690      	mov	r8, r2
   12b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct i2c_master_packet packet = {
   12b76:	ad01      	add	r5, sp, #4
   12b78:	4b17      	ldr	r3, [pc, #92]	; (12bd8 <max17055_reg_read_write+0xb4>)
   12b7a:	220c      	movs	r2, #12
   12b7c:	2100      	movs	r1, #0
   12b7e:	0028      	movs	r0, r5
   12b80:	4798      	blx	r3
   12b82:	466b      	mov	r3, sp
   12b84:	606b      	str	r3, [r5, #4]
   12b86:	4b18      	ldr	r3, [pc, #96]	; (12be8 <max17055_reg_read_write+0xc4>)
   12b88:	2465      	movs	r4, #101	; 0x65
   12b8a:	9301      	str	r3, [sp, #4]
   12b8c:	4e14      	ldr	r6, [pc, #80]	; (12be0 <max17055_reg_read_write+0xbc>)
   12b8e:	4f15      	ldr	r7, [pc, #84]	; (12be4 <max17055_reg_read_write+0xc0>)
   12b90:	e003      	b.n	12b9a <max17055_reg_read_write+0x76>
   12b92:	3c01      	subs	r4, #1
   12b94:	b2a4      	uxth	r4, r4
			if (timeout++ == limit) {   break;   }
   12b96:	2c00      	cmp	r4, #0
   12b98:	d004      	beq.n	12ba4 <max17055_reg_read_write+0x80>
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   12b9a:	0029      	movs	r1, r5
   12b9c:	0030      	movs	r0, r6
   12b9e:	47b8      	blx	r7
   12ba0:	2800      	cmp	r0, #0
   12ba2:	d1f6      	bne.n	12b92 <max17055_reg_read_write+0x6e>
		packet.data=buf+1;
   12ba4:	466b      	mov	r3, sp
   12ba6:	3301      	adds	r3, #1
   12ba8:	606b      	str	r3, [r5, #4]
		packet.data_length=length;
   12baa:	2302      	movs	r3, #2
   12bac:	2465      	movs	r4, #101	; 0x65
   12bae:	806b      	strh	r3, [r5, #2]
   12bb0:	4f0e      	ldr	r7, [pc, #56]	; (12bec <max17055_reg_read_write+0xc8>)
   12bb2:	e003      	b.n	12bbc <max17055_reg_read_write+0x98>
   12bb4:	3c01      	subs	r4, #1
   12bb6:	b2a4      	uxth	r4, r4
			if (timeout++ == limit) {   break;   }
   12bb8:	2c00      	cmp	r4, #0
   12bba:	d004      	beq.n	12bc6 <max17055_reg_read_write+0xa2>
		while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   12bbc:	0029      	movs	r1, r5
   12bbe:	0030      	movs	r0, r6
   12bc0:	47b8      	blx	r7
   12bc2:	2800      	cmp	r0, #0
   12bc4:	d1f6      	bne.n	12bb4 <max17055_reg_read_write+0x90>
		temp16=temp_buf[2];
   12bc6:	466b      	mov	r3, sp
		temp16=temp16+temp_buf[1];
   12bc8:	466a      	mov	r2, sp
		temp16=temp_buf[2];
   12bca:	789b      	ldrb	r3, [r3, #2]
		temp16=temp16+temp_buf[1];
   12bcc:	7852      	ldrb	r2, [r2, #1]
		temp16=temp16<<8;
   12bce:	021b      	lsls	r3, r3, #8
		temp16=temp16+temp_buf[1];
   12bd0:	189b      	adds	r3, r3, r2
		*data=temp16;
   12bd2:	4642      	mov	r2, r8
   12bd4:	8013      	strh	r3, [r2, #0]
   12bd6:	e7ca      	b.n	12b6e <max17055_reg_read_write+0x4a>
   12bd8:	0001f06d 	.word	0x0001f06d
   12bdc:	00020036 	.word	0x00020036
   12be0:	20001140 	.word	0x20001140
   12be4:	0000baf5 	.word	0x0000baf5
   12be8:	00010036 	.word	0x00010036
   12bec:	0000bad5 	.word	0x0000bad5

00012bf0 <adp5062_reg_read_write>:

void adp5062_reg_read_write(enum read_write mode, uint8_t address, uint8_t *data){
   12bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
   12bf2:	46c6      	mov	lr, r8
   12bf4:	b500      	push	{lr}
   12bf6:	b084      	sub	sp, #16
	// ADP5062 is the charger chip
	// Write and read 8-bit registers
	uint8_t temp_buf[2];
	
	temp_buf[0] = address;
   12bf8:	466b      	mov	r3, sp
void adp5062_reg_read_write(enum read_write mode, uint8_t address, uint8_t *data){
   12bfa:	4690      	mov	r8, r2
	temp_buf[0] = address;
   12bfc:	7019      	strb	r1, [r3, #0]
	if (mode==readp){
   12bfe:	2800      	cmp	r0, #0
   12c00:	d01c      	beq.n	12c3c <adp5062_reg_read_write+0x4c>
		i2c_read_write(readp, charger_add, temp_buf, 1);
		*data=temp_buf[1];
	}else{
		
		temp_buf[1]=data;
   12c02:	466b      	mov	r3, sp
	struct i2c_master_packet packet = {
   12c04:	ad01      	add	r5, sp, #4
		temp_buf[1]=data;
   12c06:	705a      	strb	r2, [r3, #1]
	struct i2c_master_packet packet = {
   12c08:	2100      	movs	r1, #0
   12c0a:	4b23      	ldr	r3, [pc, #140]	; (12c98 <adp5062_reg_read_write+0xa8>)
   12c0c:	220c      	movs	r2, #12
   12c0e:	0028      	movs	r0, r5
   12c10:	4798      	blx	r3
   12c12:	466b      	mov	r3, sp
   12c14:	606b      	str	r3, [r5, #4]
   12c16:	4b21      	ldr	r3, [pc, #132]	; (12c9c <adp5062_reg_read_write+0xac>)
   12c18:	2465      	movs	r4, #101	; 0x65
   12c1a:	9301      	str	r3, [sp, #4]
   12c1c:	4e20      	ldr	r6, [pc, #128]	; (12ca0 <adp5062_reg_read_write+0xb0>)
   12c1e:	4f21      	ldr	r7, [pc, #132]	; (12ca4 <adp5062_reg_read_write+0xb4>)
   12c20:	e003      	b.n	12c2a <adp5062_reg_read_write+0x3a>
   12c22:	3c01      	subs	r4, #1
   12c24:	b2a4      	uxth	r4, r4
			if (timeout++ == limit) {   break;   }
   12c26:	2c00      	cmp	r4, #0
   12c28:	d004      	beq.n	12c34 <adp5062_reg_read_write+0x44>
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   12c2a:	0029      	movs	r1, r5
   12c2c:	0030      	movs	r0, r6
   12c2e:	47b8      	blx	r7
   12c30:	2800      	cmp	r0, #0
   12c32:	d1f6      	bne.n	12c22 <adp5062_reg_read_write+0x32>
		i2c_read_write(writep, charger_add, temp_buf, 2);
	}
}
   12c34:	b004      	add	sp, #16
   12c36:	bc04      	pop	{r2}
   12c38:	4690      	mov	r8, r2
   12c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct i2c_master_packet packet = {
   12c3c:	ad01      	add	r5, sp, #4
   12c3e:	4b16      	ldr	r3, [pc, #88]	; (12c98 <adp5062_reg_read_write+0xa8>)
   12c40:	220c      	movs	r2, #12
   12c42:	2100      	movs	r1, #0
   12c44:	0028      	movs	r0, r5
   12c46:	4798      	blx	r3
   12c48:	466b      	mov	r3, sp
   12c4a:	606b      	str	r3, [r5, #4]
   12c4c:	4b16      	ldr	r3, [pc, #88]	; (12ca8 <adp5062_reg_read_write+0xb8>)
   12c4e:	2465      	movs	r4, #101	; 0x65
   12c50:	9301      	str	r3, [sp, #4]
   12c52:	4e13      	ldr	r6, [pc, #76]	; (12ca0 <adp5062_reg_read_write+0xb0>)
   12c54:	4f13      	ldr	r7, [pc, #76]	; (12ca4 <adp5062_reg_read_write+0xb4>)
   12c56:	e003      	b.n	12c60 <adp5062_reg_read_write+0x70>
   12c58:	3c01      	subs	r4, #1
   12c5a:	b2a4      	uxth	r4, r4
			if (timeout++ == limit) {   break;   }
   12c5c:	2c00      	cmp	r4, #0
   12c5e:	d004      	beq.n	12c6a <adp5062_reg_read_write+0x7a>
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   12c60:	0029      	movs	r1, r5
   12c62:	0030      	movs	r0, r6
   12c64:	47b8      	blx	r7
   12c66:	2800      	cmp	r0, #0
   12c68:	d1f6      	bne.n	12c58 <adp5062_reg_read_write+0x68>
		packet.data=buf+1;
   12c6a:	466b      	mov	r3, sp
   12c6c:	3301      	adds	r3, #1
   12c6e:	606b      	str	r3, [r5, #4]
		packet.data_length=length;
   12c70:	2301      	movs	r3, #1
   12c72:	2465      	movs	r4, #101	; 0x65
   12c74:	806b      	strh	r3, [r5, #2]
   12c76:	4f0d      	ldr	r7, [pc, #52]	; (12cac <adp5062_reg_read_write+0xbc>)
   12c78:	e003      	b.n	12c82 <adp5062_reg_read_write+0x92>
   12c7a:	3c01      	subs	r4, #1
   12c7c:	b2a4      	uxth	r4, r4
			if (timeout++ == limit) {   break;   }
   12c7e:	2c00      	cmp	r4, #0
   12c80:	d004      	beq.n	12c8c <adp5062_reg_read_write+0x9c>
		while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   12c82:	0029      	movs	r1, r5
   12c84:	0030      	movs	r0, r6
   12c86:	47b8      	blx	r7
   12c88:	2800      	cmp	r0, #0
   12c8a:	d1f6      	bne.n	12c7a <adp5062_reg_read_write+0x8a>
		*data=temp_buf[1];
   12c8c:	466b      	mov	r3, sp
   12c8e:	4642      	mov	r2, r8
   12c90:	785b      	ldrb	r3, [r3, #1]
   12c92:	7013      	strb	r3, [r2, #0]
   12c94:	e7ce      	b.n	12c34 <adp5062_reg_read_write+0x44>
   12c96:	46c0      	nop			; (mov r8, r8)
   12c98:	0001f06d 	.word	0x0001f06d
   12c9c:	00020014 	.word	0x00020014
   12ca0:	20001140 	.word	0x20001140
   12ca4:	0000baf5 	.word	0x0000baf5
   12ca8:	00010014 	.word	0x00010014
   12cac:	0000bad5 	.word	0x0000bad5

00012cb0 <sd_mmc_test_unit_ready_0>:
		return CTRL_FAIL;
	}
}

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   12cb0:	b510      	push	{r4, lr}
	switch (sd_mmc_check(slot))
   12cb2:	2000      	movs	r0, #0
   12cb4:	4b0d      	ldr	r3, [pc, #52]	; (12cec <sd_mmc_test_unit_ready_0+0x3c>)
   12cb6:	4798      	blx	r3
   12cb8:	2801      	cmp	r0, #1
   12cba:	d015      	beq.n	12ce8 <sd_mmc_test_unit_ready_0+0x38>
   12cbc:	2800      	cmp	r0, #0
   12cbe:	d008      	beq.n	12cd2 <sd_mmc_test_unit_ready_0+0x22>
   12cc0:	2802      	cmp	r0, #2
   12cc2:	d001      	beq.n	12cc8 <sd_mmc_test_unit_ready_0+0x18>
		return CTRL_FAIL;
   12cc4:	2001      	movs	r0, #1
	return sd_mmc_test_unit_ready(0);
}
   12cc6:	bd10      	pop	{r4, pc}
		sd_mmc_ejected[slot] = false;
   12cc8:	2200      	movs	r2, #0
   12cca:	4b09      	ldr	r3, [pc, #36]	; (12cf0 <sd_mmc_test_unit_ready_0+0x40>)
   12ccc:	701a      	strb	r2, [r3, #0]
		return CTRL_NO_PRESENT;
   12cce:	2002      	movs	r0, #2
   12cd0:	e7f9      	b.n	12cc6 <sd_mmc_test_unit_ready_0+0x16>
		if (sd_mmc_ejected[slot]) {
   12cd2:	4b07      	ldr	r3, [pc, #28]	; (12cf0 <sd_mmc_test_unit_ready_0+0x40>)
   12cd4:	781b      	ldrb	r3, [r3, #0]
   12cd6:	2b00      	cmp	r3, #0
   12cd8:	d1f9      	bne.n	12cce <sd_mmc_test_unit_ready_0+0x1e>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   12cda:	4b06      	ldr	r3, [pc, #24]	; (12cf4 <sd_mmc_test_unit_ready_0+0x44>)
   12cdc:	2000      	movs	r0, #0
   12cde:	4798      	blx	r3
   12ce0:	0783      	lsls	r3, r0, #30
   12ce2:	d0f4      	beq.n	12cce <sd_mmc_test_unit_ready_0+0x1e>
			return CTRL_GOOD;
   12ce4:	2000      	movs	r0, #0
   12ce6:	e7ee      	b.n	12cc6 <sd_mmc_test_unit_ready_0+0x16>
		return CTRL_BUSY;
   12ce8:	2003      	movs	r0, #3
   12cea:	e7ec      	b.n	12cc6 <sd_mmc_test_unit_ready_0+0x16>
   12cec:	00009a69 	.word	0x00009a69
   12cf0:	20000f74 	.word	0x20000f74
   12cf4:	0000a06d 	.word	0x0000a06d

00012cf8 <sd_mmc_read_capacity_0>:
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
	return sd_mmc_test_unit_ready(slot);
}

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   12cf8:	b510      	push	{r4, lr}
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   12cfa:	4b12      	ldr	r3, [pc, #72]	; (12d44 <sd_mmc_read_capacity_0+0x4c>)
{
   12cfc:	0004      	movs	r4, r0
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   12cfe:	2000      	movs	r0, #0
   12d00:	4798      	blx	r3
   12d02:	0040      	lsls	r0, r0, #1
   12d04:	3801      	subs	r0, #1
   12d06:	6020      	str	r0, [r4, #0]
	switch (sd_mmc_check(slot))
   12d08:	4b0f      	ldr	r3, [pc, #60]	; (12d48 <sd_mmc_read_capacity_0+0x50>)
   12d0a:	2000      	movs	r0, #0
   12d0c:	4798      	blx	r3
   12d0e:	2801      	cmp	r0, #1
   12d10:	d015      	beq.n	12d3e <sd_mmc_read_capacity_0+0x46>
   12d12:	2800      	cmp	r0, #0
   12d14:	d008      	beq.n	12d28 <sd_mmc_read_capacity_0+0x30>
   12d16:	2802      	cmp	r0, #2
   12d18:	d001      	beq.n	12d1e <sd_mmc_read_capacity_0+0x26>
		return CTRL_FAIL;
   12d1a:	2001      	movs	r0, #1
	return sd_mmc_read_capacity(0, nb_sector);
}
   12d1c:	bd10      	pop	{r4, pc}
		sd_mmc_ejected[slot] = false;
   12d1e:	2200      	movs	r2, #0
   12d20:	4b0a      	ldr	r3, [pc, #40]	; (12d4c <sd_mmc_read_capacity_0+0x54>)
   12d22:	701a      	strb	r2, [r3, #0]
		return CTRL_NO_PRESENT;
   12d24:	2002      	movs	r0, #2
   12d26:	e7f9      	b.n	12d1c <sd_mmc_read_capacity_0+0x24>
		if (sd_mmc_ejected[slot]) {
   12d28:	4b08      	ldr	r3, [pc, #32]	; (12d4c <sd_mmc_read_capacity_0+0x54>)
   12d2a:	781b      	ldrb	r3, [r3, #0]
   12d2c:	2b00      	cmp	r3, #0
   12d2e:	d1f9      	bne.n	12d24 <sd_mmc_read_capacity_0+0x2c>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   12d30:	4b07      	ldr	r3, [pc, #28]	; (12d50 <sd_mmc_read_capacity_0+0x58>)
   12d32:	2000      	movs	r0, #0
   12d34:	4798      	blx	r3
   12d36:	0783      	lsls	r3, r0, #30
   12d38:	d0f4      	beq.n	12d24 <sd_mmc_read_capacity_0+0x2c>
			return CTRL_GOOD;
   12d3a:	2000      	movs	r0, #0
   12d3c:	e7ee      	b.n	12d1c <sd_mmc_read_capacity_0+0x24>
		return CTRL_BUSY;
   12d3e:	2003      	movs	r0, #3
   12d40:	e7ec      	b.n	12d1c <sd_mmc_read_capacity_0+0x24>
   12d42:	46c0      	nop			; (mov r8, r8)
   12d44:	0000a0e1 	.word	0x0000a0e1
   12d48:	00009a69 	.word	0x00009a69
   12d4c:	20000f74 	.word	0x20000f74
   12d50:	0000a06d 	.word	0x0000a06d

00012d54 <sd_mmc_unload_0>:
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
	sd_mmc_ejected[slot] = unload;
   12d54:	4b01      	ldr	r3, [pc, #4]	; (12d5c <sd_mmc_unload_0+0x8>)
   12d56:	7018      	strb	r0, [r3, #0]
}

bool sd_mmc_unload_0(bool unload)
{
	return sd_mmc_unload(0, unload);
}
   12d58:	2001      	movs	r0, #1
   12d5a:	4770      	bx	lr
   12d5c:	20000f74 	.word	0x20000f74

00012d60 <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
   12d60:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
   12d62:	2000      	movs	r0, #0
   12d64:	4b01      	ldr	r3, [pc, #4]	; (12d6c <sd_mmc_wr_protect_0+0xc>)
   12d66:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
   12d68:	bd10      	pop	{r4, pc}
   12d6a:	46c0      	nop			; (mov r8, r8)
   12d6c:	0000a155 	.word	0x0000a155

00012d70 <sd_mmc_removal_0>:
   12d70:	2001      	movs	r0, #1
   12d72:	4770      	bx	lr

00012d74 <sd_mmc_usb_read_10_0>:
	}
	return CTRL_GOOD;
}

Ctrl_status sd_mmc_usb_read_10_0(uint32_t addr, uint16_t nb_sector)
{
   12d74:	b5f0      	push	{r4, r5, r6, r7, lr}
   12d76:	46c6      	mov	lr, r8
   12d78:	000c      	movs	r4, r1
   12d7a:	b500      	push	{lr}
	switch (sd_mmc_init_read_blocks(slot, addr, nb_sector)) {
   12d7c:	000a      	movs	r2, r1
   12d7e:	4b25      	ldr	r3, [pc, #148]	; (12e14 <sd_mmc_usb_read_10_0+0xa0>)
   12d80:	0001      	movs	r1, r0
   12d82:	2000      	movs	r0, #0
   12d84:	4798      	blx	r3
   12d86:	2800      	cmp	r0, #0
   12d88:	d006      	beq.n	12d98 <sd_mmc_usb_read_10_0+0x24>
		return CTRL_FAIL;
   12d8a:	3802      	subs	r0, #2
   12d8c:	4243      	negs	r3, r0
   12d8e:	4158      	adcs	r0, r3
   12d90:	3001      	adds	r0, #1
	return sd_mmc_usb_read_10(0, addr, nb_sector);
}
   12d92:	bc04      	pop	{r2}
   12d94:	4690      	mov	r8, r2
   12d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (!udi_msc_trans_block(true,
   12d98:	4b1f      	ldr	r3, [pc, #124]	; (12e18 <sd_mmc_usb_read_10_0+0xa4>)
	bool b_first_step = true;
   12d9a:	2601      	movs	r6, #1
			if (!udi_msc_trans_block(true,
   12d9c:	4698      	mov	r8, r3
   12d9e:	4f1f      	ldr	r7, [pc, #124]	; (12e1c <sd_mmc_usb_read_10_0+0xa8>)
	while (nb_step--) {
   12da0:	4b1f      	ldr	r3, [pc, #124]	; (12e20 <sd_mmc_usb_read_10_0+0xac>)
   12da2:	429c      	cmp	r4, r3
   12da4:	d028      	beq.n	12df8 <sd_mmc_usb_read_10_0+0x84>
		if (nb_step) { // Skip last step
   12da6:	2c00      	cmp	r4, #0
   12da8:	d01a      	beq.n	12de0 <sd_mmc_usb_read_10_0+0x6c>
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
   12daa:	2501      	movs	r5, #1
   12dac:	4025      	ands	r5, r4
   12dae:	d12f      	bne.n	12e10 <sd_mmc_usb_read_10_0+0x9c>
   12db0:	481c      	ldr	r0, [pc, #112]	; (12e24 <sd_mmc_usb_read_10_0+0xb0>)
   12db2:	2101      	movs	r1, #1
   12db4:	4b1c      	ldr	r3, [pc, #112]	; (12e28 <sd_mmc_usb_read_10_0+0xb4>)
   12db6:	4798      	blx	r3
   12db8:	2800      	cmp	r0, #0
   12dba:	d10f      	bne.n	12ddc <sd_mmc_usb_read_10_0+0x68>
		if (!b_first_step) { // Skip first step
   12dbc:	2e00      	cmp	r6, #0
   12dbe:	d11d      	bne.n	12dfc <sd_mmc_usb_read_10_0+0x88>
			if (!udi_msc_trans_block(true,
   12dc0:	2d00      	cmp	r5, #0
   12dc2:	d00f      	beq.n	12de4 <sd_mmc_usb_read_10_0+0x70>
   12dc4:	2280      	movs	r2, #128	; 0x80
   12dc6:	2300      	movs	r3, #0
   12dc8:	0092      	lsls	r2, r2, #2
   12dca:	4916      	ldr	r1, [pc, #88]	; (12e24 <sd_mmc_usb_read_10_0+0xb0>)
   12dcc:	2001      	movs	r0, #1
   12dce:	4d13      	ldr	r5, [pc, #76]	; (12e1c <sd_mmc_usb_read_10_0+0xa8>)
   12dd0:	47a8      	blx	r5
   12dd2:	2800      	cmp	r0, #0
   12dd4:	d112      	bne.n	12dfc <sd_mmc_usb_read_10_0+0x88>
					sd_mmc_wait_end_of_read_blocks(true);
   12dd6:	2001      	movs	r0, #1
   12dd8:	4b14      	ldr	r3, [pc, #80]	; (12e2c <sd_mmc_usb_read_10_0+0xb8>)
   12dda:	4798      	blx	r3
				return CTRL_FAIL;
   12ddc:	2001      	movs	r0, #1
   12dde:	e7d8      	b.n	12d92 <sd_mmc_usb_read_10_0+0x1e>
		if (!b_first_step) { // Skip first step
   12de0:	2e00      	cmp	r6, #0
   12de2:	d109      	bne.n	12df8 <sd_mmc_usb_read_10_0+0x84>
			if (!udi_msc_trans_block(true,
   12de4:	2280      	movs	r2, #128	; 0x80
   12de6:	2300      	movs	r3, #0
   12de8:	0092      	lsls	r2, r2, #2
   12dea:	4641      	mov	r1, r8
   12dec:	2001      	movs	r0, #1
   12dee:	47b8      	blx	r7
   12df0:	2800      	cmp	r0, #0
   12df2:	d0f0      	beq.n	12dd6 <sd_mmc_usb_read_10_0+0x62>
		if (nb_step) { // Skip last step
   12df4:	2c00      	cmp	r4, #0
   12df6:	d101      	bne.n	12dfc <sd_mmc_usb_read_10_0+0x88>
	return CTRL_GOOD;
   12df8:	2000      	movs	r0, #0
   12dfa:	e7ca      	b.n	12d92 <sd_mmc_usb_read_10_0+0x1e>
			if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
   12dfc:	2000      	movs	r0, #0
   12dfe:	4b0b      	ldr	r3, [pc, #44]	; (12e2c <sd_mmc_usb_read_10_0+0xb8>)
   12e00:	4798      	blx	r3
   12e02:	3c01      	subs	r4, #1
   12e04:	b2a4      	uxth	r4, r4
   12e06:	2600      	movs	r6, #0
   12e08:	2800      	cmp	r0, #0
   12e0a:	d0c9      	beq.n	12da0 <sd_mmc_usb_read_10_0+0x2c>
				return CTRL_FAIL;
   12e0c:	2001      	movs	r0, #1
   12e0e:	e7c0      	b.n	12d92 <sd_mmc_usb_read_10_0+0x1e>
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
   12e10:	4801      	ldr	r0, [pc, #4]	; (12e18 <sd_mmc_usb_read_10_0+0xa4>)
   12e12:	e7ce      	b.n	12db2 <sd_mmc_usb_read_10_0+0x3e>
   12e14:	0000a159 	.word	0x0000a159
   12e18:	200016ac 	.word	0x200016ac
   12e1c:	00000f9d 	.word	0x00000f9d
   12e20:	0000ffff 	.word	0x0000ffff
   12e24:	200018ac 	.word	0x200018ac
   12e28:	0000a279 	.word	0x0000a279
   12e2c:	0000a2a5 	.word	0x0000a2a5

00012e30 <sd_mmc_usb_write_10_0>:
	}
	return CTRL_GOOD;
}

Ctrl_status sd_mmc_usb_write_10_0(uint32_t addr, uint16_t nb_sector)
{
   12e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12e32:	46ce      	mov	lr, r9
   12e34:	4647      	mov	r7, r8
   12e36:	000c      	movs	r4, r1
   12e38:	b580      	push	{r7, lr}
	switch (sd_mmc_init_write_blocks(slot, addr, nb_sector)) {
   12e3a:	000a      	movs	r2, r1
   12e3c:	4b2f      	ldr	r3, [pc, #188]	; (12efc <sd_mmc_usb_write_10_0+0xcc>)
   12e3e:	0001      	movs	r1, r0
   12e40:	2000      	movs	r0, #0
   12e42:	4798      	blx	r3
   12e44:	2800      	cmp	r0, #0
   12e46:	d007      	beq.n	12e58 <sd_mmc_usb_write_10_0+0x28>
		return CTRL_FAIL;
   12e48:	3802      	subs	r0, #2
   12e4a:	4243      	negs	r3, r0
   12e4c:	4158      	adcs	r0, r3
   12e4e:	3001      	adds	r0, #1
	return sd_mmc_usb_write_10(0, addr, nb_sector);
}
   12e50:	bc0c      	pop	{r2, r3}
   12e52:	4690      	mov	r8, r2
   12e54:	4699      	mov	r9, r3
   12e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	while (nb_step--) {
   12e58:	4b29      	ldr	r3, [pc, #164]	; (12f00 <sd_mmc_usb_write_10_0+0xd0>)
   12e5a:	429c      	cmp	r4, r3
   12e5c:	d101      	bne.n	12e62 <sd_mmc_usb_write_10_0+0x32>
	return CTRL_GOOD;
   12e5e:	2000      	movs	r0, #0
   12e60:	e7f6      	b.n	12e50 <sd_mmc_usb_write_10_0+0x20>
   12e62:	1e65      	subs	r5, r4, #1
   12e64:	b2ad      	uxth	r5, r5
		if (nb_step) { // Skip last step
   12e66:	2c00      	cmp	r4, #0
   12e68:	d0f9      	beq.n	12e5e <sd_mmc_usb_write_10_0+0x2e>
			if (!udi_msc_trans_block(false,
   12e6a:	2301      	movs	r3, #1
   12e6c:	4699      	mov	r9, r3
   12e6e:	07e3      	lsls	r3, r4, #31
   12e70:	d538      	bpl.n	12ee4 <sd_mmc_usb_write_10_0+0xb4>
   12e72:	4924      	ldr	r1, [pc, #144]	; (12f04 <sd_mmc_usb_write_10_0+0xd4>)
   12e74:	4f24      	ldr	r7, [pc, #144]	; (12f08 <sd_mmc_usb_write_10_0+0xd8>)
   12e76:	000b      	movs	r3, r1
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
   12e78:	4698      	mov	r8, r3
   12e7a:	4e24      	ldr	r6, [pc, #144]	; (12f0c <sd_mmc_usb_write_10_0+0xdc>)
			if (!udi_msc_trans_block(false,
   12e7c:	2280      	movs	r2, #128	; 0x80
   12e7e:	2300      	movs	r3, #0
   12e80:	0092      	lsls	r2, r2, #2
   12e82:	2000      	movs	r0, #0
   12e84:	47b0      	blx	r6
				if (!b_first_step) {
   12e86:	464b      	mov	r3, r9
			if (!udi_msc_trans_block(false,
   12e88:	2800      	cmp	r0, #0
   12e8a:	d02f      	beq.n	12eec <sd_mmc_usb_write_10_0+0xbc>
		if (!b_first_step) { // Skip first step
   12e8c:	2b00      	cmp	r3, #0
   12e8e:	d01b      	beq.n	12ec8 <sd_mmc_usb_write_10_0+0x98>
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
   12e90:	0038      	movs	r0, r7
   12e92:	07eb      	lsls	r3, r5, #31
   12e94:	d400      	bmi.n	12e98 <sd_mmc_usb_write_10_0+0x68>
   12e96:	4640      	mov	r0, r8
   12e98:	2101      	movs	r1, #1
   12e9a:	4b1d      	ldr	r3, [pc, #116]	; (12f10 <sd_mmc_usb_write_10_0+0xe0>)
   12e9c:	4798      	blx	r3
   12e9e:	3c01      	subs	r4, #1
   12ea0:	3d01      	subs	r5, #1
   12ea2:	b2a4      	uxth	r4, r4
   12ea4:	b2ad      	uxth	r5, r5
   12ea6:	2800      	cmp	r0, #0
   12ea8:	d113      	bne.n	12ed2 <sd_mmc_usb_write_10_0+0xa2>
		if (nb_step) { // Skip last step
   12eaa:	2c00      	cmp	r4, #0
   12eac:	d013      	beq.n	12ed6 <sd_mmc_usb_write_10_0+0xa6>
   12eae:	2300      	movs	r3, #0
			if (!udi_msc_trans_block(false,
   12eb0:	4914      	ldr	r1, [pc, #80]	; (12f04 <sd_mmc_usb_write_10_0+0xd4>)
   12eb2:	4699      	mov	r9, r3
   12eb4:	07e3      	lsls	r3, r4, #31
   12eb6:	d4e1      	bmi.n	12e7c <sd_mmc_usb_write_10_0+0x4c>
   12eb8:	2280      	movs	r2, #128	; 0x80
   12eba:	2300      	movs	r3, #0
   12ebc:	0092      	lsls	r2, r2, #2
   12ebe:	4912      	ldr	r1, [pc, #72]	; (12f08 <sd_mmc_usb_write_10_0+0xd8>)
   12ec0:	2000      	movs	r0, #0
   12ec2:	47b0      	blx	r6
   12ec4:	2800      	cmp	r0, #0
   12ec6:	d013      	beq.n	12ef0 <sd_mmc_usb_write_10_0+0xc0>
			if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   12ec8:	2000      	movs	r0, #0
   12eca:	4b12      	ldr	r3, [pc, #72]	; (12f14 <sd_mmc_usb_write_10_0+0xe4>)
   12ecc:	4798      	blx	r3
   12ece:	2800      	cmp	r0, #0
   12ed0:	d0de      	beq.n	12e90 <sd_mmc_usb_write_10_0+0x60>
				return CTRL_FAIL;
   12ed2:	2001      	movs	r0, #1
   12ed4:	e7bc      	b.n	12e50 <sd_mmc_usb_write_10_0+0x20>
			if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   12ed6:	2000      	movs	r0, #0
   12ed8:	4b0e      	ldr	r3, [pc, #56]	; (12f14 <sd_mmc_usb_write_10_0+0xe4>)
   12eda:	4798      	blx	r3
   12edc:	2800      	cmp	r0, #0
   12ede:	d1f8      	bne.n	12ed2 <sd_mmc_usb_write_10_0+0xa2>
	return CTRL_GOOD;
   12ee0:	2000      	movs	r0, #0
   12ee2:	e7b5      	b.n	12e50 <sd_mmc_usb_write_10_0+0x20>
			if (!udi_msc_trans_block(false,
   12ee4:	4908      	ldr	r1, [pc, #32]	; (12f08 <sd_mmc_usb_write_10_0+0xd8>)
   12ee6:	4b07      	ldr	r3, [pc, #28]	; (12f04 <sd_mmc_usb_write_10_0+0xd4>)
   12ee8:	000f      	movs	r7, r1
   12eea:	e7c5      	b.n	12e78 <sd_mmc_usb_write_10_0+0x48>
				if (!b_first_step) {
   12eec:	2b00      	cmp	r3, #0
   12eee:	d1f0      	bne.n	12ed2 <sd_mmc_usb_write_10_0+0xa2>
					sd_mmc_wait_end_of_write_blocks(true);
   12ef0:	2001      	movs	r0, #1
   12ef2:	4b08      	ldr	r3, [pc, #32]	; (12f14 <sd_mmc_usb_write_10_0+0xe4>)
   12ef4:	4798      	blx	r3
				return CTRL_FAIL;
   12ef6:	2001      	movs	r0, #1
   12ef8:	e7aa      	b.n	12e50 <sd_mmc_usb_write_10_0+0x20>
   12efa:	46c0      	nop			; (mov r8, r8)
   12efc:	0000a319 	.word	0x0000a319
   12f00:	0000ffff 	.word	0x0000ffff
   12f04:	200018ac 	.word	0x200018ac
   12f08:	200016ac 	.word	0x200016ac
   12f0c:	00000f9d 	.word	0x00000f9d
   12f10:	0000a3f9 	.word	0x0000a3f9
   12f14:	0000a425 	.word	0x0000a425

00012f18 <sd_mmc_mem_2_ram_0>:
	}
	return CTRL_GOOD;
}

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
   12f18:	b510      	push	{r4, lr}
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
   12f1a:	2201      	movs	r2, #1
{
   12f1c:	000c      	movs	r4, r1
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
   12f1e:	4b0d      	ldr	r3, [pc, #52]	; (12f54 <sd_mmc_mem_2_ram_0+0x3c>)
   12f20:	0001      	movs	r1, r0
   12f22:	2000      	movs	r0, #0
   12f24:	4798      	blx	r3
   12f26:	2800      	cmp	r0, #0
   12f28:	d004      	beq.n	12f34 <sd_mmc_mem_2_ram_0+0x1c>
		return CTRL_FAIL;
   12f2a:	3802      	subs	r0, #2
   12f2c:	4243      	negs	r3, r0
   12f2e:	4158      	adcs	r0, r3
   12f30:	3001      	adds	r0, #1
	return sd_mmc_mem_2_ram(0, addr, ram);
}
   12f32:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   12f34:	4b08      	ldr	r3, [pc, #32]	; (12f58 <sd_mmc_mem_2_ram_0+0x40>)
   12f36:	2101      	movs	r1, #1
   12f38:	0020      	movs	r0, r4
   12f3a:	4798      	blx	r3
   12f3c:	0003      	movs	r3, r0
		return CTRL_FAIL;
   12f3e:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   12f40:	2b00      	cmp	r3, #0
   12f42:	d1f6      	bne.n	12f32 <sd_mmc_mem_2_ram_0+0x1a>
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
   12f44:	4b05      	ldr	r3, [pc, #20]	; (12f5c <sd_mmc_mem_2_ram_0+0x44>)
   12f46:	2000      	movs	r0, #0
   12f48:	4798      	blx	r3
   12f4a:	1e43      	subs	r3, r0, #1
   12f4c:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
   12f4e:	b2c0      	uxtb	r0, r0
   12f50:	e7ef      	b.n	12f32 <sd_mmc_mem_2_ram_0+0x1a>
   12f52:	46c0      	nop			; (mov r8, r8)
   12f54:	0000a159 	.word	0x0000a159
   12f58:	0000a279 	.word	0x0000a279
   12f5c:	0000a2a5 	.word	0x0000a2a5

00012f60 <sd_mmc_ram_2_mem_0>:
	}
	return CTRL_GOOD;
}

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
   12f60:	b510      	push	{r4, lr}
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
   12f62:	2201      	movs	r2, #1
{
   12f64:	000c      	movs	r4, r1
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
   12f66:	4b0d      	ldr	r3, [pc, #52]	; (12f9c <sd_mmc_ram_2_mem_0+0x3c>)
   12f68:	0001      	movs	r1, r0
   12f6a:	2000      	movs	r0, #0
   12f6c:	4798      	blx	r3
   12f6e:	2800      	cmp	r0, #0
   12f70:	d004      	beq.n	12f7c <sd_mmc_ram_2_mem_0+0x1c>
		return CTRL_FAIL;
   12f72:	3802      	subs	r0, #2
   12f74:	4243      	negs	r3, r0
   12f76:	4158      	adcs	r0, r3
   12f78:	3001      	adds	r0, #1
	return sd_mmc_ram_2_mem(0, addr, ram);
}
   12f7a:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   12f7c:	4b08      	ldr	r3, [pc, #32]	; (12fa0 <sd_mmc_ram_2_mem_0+0x40>)
   12f7e:	2101      	movs	r1, #1
   12f80:	0020      	movs	r0, r4
   12f82:	4798      	blx	r3
   12f84:	0003      	movs	r3, r0
		return CTRL_FAIL;
   12f86:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   12f88:	2b00      	cmp	r3, #0
   12f8a:	d1f6      	bne.n	12f7a <sd_mmc_ram_2_mem_0+0x1a>
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   12f8c:	4b05      	ldr	r3, [pc, #20]	; (12fa4 <sd_mmc_ram_2_mem_0+0x44>)
   12f8e:	2000      	movs	r0, #0
   12f90:	4798      	blx	r3
   12f92:	1e43      	subs	r3, r0, #1
   12f94:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
   12f96:	b2c0      	uxtb	r0, r0
   12f98:	e7ef      	b.n	12f7a <sd_mmc_ram_2_mem_0+0x1a>
   12f9a:	46c0      	nop			; (mov r8, r8)
   12f9c:	0000a319 	.word	0x0000a319
   12fa0:	0000a3f9 	.word	0x0000a3f9
   12fa4:	0000a425 	.word	0x0000a425

00012fa8 <glcd_init>:
//void delay_ms(uint32_t ms);

//#define BACKLIGHT_INVERT	// Uncomment if LED backlight turn on with low value

void glcd_init(void)
{
   12fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   12faa:	2580      	movs	r5, #128	; 0x80
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   12fac:	2157      	movs	r1, #87	; 0x57
   12fae:	2002      	movs	r0, #2
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   12fb0:	2380      	movs	r3, #128	; 0x80
   12fb2:	4c14      	ldr	r4, [pc, #80]	; (13004 <glcd_init+0x5c>)
   12fb4:	042d      	lsls	r5, r5, #16
   12fb6:	60a5      	str	r5, [r4, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   12fb8:	5c62      	ldrb	r2, [r4, r1]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   12fba:	051b      	lsls	r3, r3, #20
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   12fbc:	4302      	orrs	r2, r0
   12fbe:	b2d2      	uxtb	r2, r2
   12fc0:	5462      	strb	r2, [r4, r1]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   12fc2:	60a3      	str	r3, [r4, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   12fc4:	235b      	movs	r3, #91	; 0x5b
   12fc6:	5ce2      	ldrb	r2, [r4, r3]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   12fc8:	4e0f      	ldr	r6, [pc, #60]	; (13008 <glcd_init+0x60>)
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   12fca:	4302      	orrs	r2, r0
   12fcc:	b2d2      	uxtb	r2, r2
   12fce:	54e2      	strb	r2, [r4, r3]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   12fd0:	60b5      	str	r5, [r6, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   12fd2:	5c73      	ldrb	r3, [r6, r1]
   12fd4:	4303      	orrs	r3, r0
   12fd6:	b2db      	uxtb	r3, r3
   12fd8:	5473      	strb	r3, [r6, r1]

	
	GLCD_DESELECT();
	

	glcd_select_screen((uint8_t *)&glcd_buffer,&glcd_bbox);
   12fda:	480c      	ldr	r0, [pc, #48]	; (1300c <glcd_init+0x64>)
   12fdc:	490c      	ldr	r1, [pc, #48]	; (13010 <glcd_init+0x68>)
   12fde:	4b0d      	ldr	r3, [pc, #52]	; (13014 <glcd_init+0x6c>)
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
   12fe0:	61a5      	str	r5, [r4, #24]
   12fe2:	4798      	blx	r3
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
   12fe4:	6165      	str	r5, [r4, #20]
	/* Toggle RST low to reset. Minimum pulse 100ns on data sheet. */
	GLCD_SELECT();
	GLCD_RESET_LOW();


	delay_ms(GLCD_RESET_TIME);
   12fe6:	4f0c      	ldr	r7, [pc, #48]	; (13018 <glcd_init+0x70>)
   12fe8:	6175      	str	r5, [r6, #20]
   12fea:	2001      	movs	r0, #1
   12fec:	47b8      	blx	r7
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
   12fee:	61b5      	str	r5, [r6, #24]
   12ff0:	2001      	movs	r0, #1
   12ff2:	61a5      	str	r5, [r4, #24]
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
   12ff4:	6165      	str	r5, [r4, #20]
   12ff6:	6175      	str	r5, [r6, #20]
   12ff8:	47b8      	blx	r7
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
   12ffa:	61b5      	str	r5, [r6, #24]
	glcd_ST7565R_init();
   12ffc:	4b07      	ldr	r3, [pc, #28]	; (1301c <glcd_init+0x74>)
   12ffe:	61a5      	str	r5, [r4, #24]
   13000:	4798      	blx	r3
}
   13002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13004:	40002800 	.word	0x40002800
   13008:	40002880 	.word	0x40002880
   1300c:	20001ab0 	.word	0x20001ab0
   13010:	20001aac 	.word	0x20001aac
   13014:	0001312d 	.word	0x0001312d
   13018:	000151d9 	.word	0x000151d9
   1301c:	00013a91 	.word	0x00013a91

00013020 <glcd_spi_write>:
{
   13020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13022:	0005      	movs	r5, r0
	spi_select_slave(&spi_main, &slave_lcd, true);
   13024:	4f08      	ldr	r7, [pc, #32]	; (13048 <glcd_spi_write+0x28>)
   13026:	4c09      	ldr	r4, [pc, #36]	; (1304c <glcd_spi_write+0x2c>)
   13028:	0039      	movs	r1, r7
   1302a:	4e09      	ldr	r6, [pc, #36]	; (13050 <glcd_spi_write+0x30>)
   1302c:	2201      	movs	r2, #1
   1302e:	0020      	movs	r0, r4
   13030:	47b0      	blx	r6
	spi_transceive_wait(&spi_main, c, &temp);
   13032:	b2a9      	uxth	r1, r5
   13034:	4b07      	ldr	r3, [pc, #28]	; (13054 <glcd_spi_write+0x34>)
   13036:	4a08      	ldr	r2, [pc, #32]	; (13058 <glcd_spi_write+0x38>)
   13038:	0020      	movs	r0, r4
   1303a:	4798      	blx	r3
	spi_select_slave(&spi_main, &slave_lcd, false);
   1303c:	0039      	movs	r1, r7
   1303e:	2200      	movs	r2, #0
   13040:	0020      	movs	r0, r4
   13042:	47b0      	blx	r6
}
   13044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13046:	46c0      	nop			; (mov r8, r8)
   13048:	200010c8 	.word	0x200010c8
   1304c:	20001134 	.word	0x20001134
   13050:	00014a29 	.word	0x00014a29
   13054:	000149cd 	.word	0x000149cd
   13058:	20000f76 	.word	0x20000f76

0001305c <glcd_update_bbox>:
glcd_BoundingBox_t *glcd_bbox_selected;

/** @} */

void glcd_update_bbox(uint8_t xmin, uint8_t ymin, uint8_t xmax, uint8_t ymax)
{
   1305c:	b570      	push	{r4, r5, r6, lr}
	/* Keep and check bounding box within limits of LCD screen dimensions */
	if (xmin > (GLCD_LCD_WIDTH-1)) {
   1305e:	b244      	sxtb	r4, r0
   13060:	2c00      	cmp	r4, #0
   13062:	db22      	blt.n	130aa <glcd_update_bbox+0x4e>
		xmin = GLCD_LCD_WIDTH-1;
	}
	if (xmax > (GLCD_LCD_WIDTH-1)) {
   13064:	b254      	sxtb	r4, r2
   13066:	2c00      	cmp	r4, #0
   13068:	db23      	blt.n	130b2 <glcd_update_bbox+0x56>
   1306a:	1c0c      	adds	r4, r1, #0
   1306c:	293f      	cmp	r1, #63	; 0x3f
   1306e:	d900      	bls.n	13072 <glcd_update_bbox+0x16>
   13070:	243f      	movs	r4, #63	; 0x3f
   13072:	b2e4      	uxtb	r4, r4
   13074:	1c19      	adds	r1, r3, #0
   13076:	2b3f      	cmp	r3, #63	; 0x3f
   13078:	d900      	bls.n	1307c <glcd_update_bbox+0x20>
   1307a:	213f      	movs	r1, #63	; 0x3f
	if (ymax > (GLCD_LCD_HEIGHT-1)) {
		ymax = GLCD_LCD_HEIGHT-1;
	}

	/* Update the bounding box size */
	if (xmin < glcd_bbox_selected->x_min) {
   1307c:	4d0e      	ldr	r5, [pc, #56]	; (130b8 <glcd_update_bbox+0x5c>)
   1307e:	b2c9      	uxtb	r1, r1
   13080:	682b      	ldr	r3, [r5, #0]
   13082:	781e      	ldrb	r6, [r3, #0]
   13084:	4286      	cmp	r6, r0
   13086:	d901      	bls.n	1308c <glcd_update_bbox+0x30>
		glcd_bbox_selected->x_min = xmin;
   13088:	7018      	strb	r0, [r3, #0]
   1308a:	682b      	ldr	r3, [r5, #0]
	}		
	if (xmax > glcd_bbox_selected->x_max) {
   1308c:	7898      	ldrb	r0, [r3, #2]
   1308e:	4290      	cmp	r0, r2
   13090:	d201      	bcs.n	13096 <glcd_update_bbox+0x3a>
		glcd_bbox_selected->x_max = xmax;
   13092:	709a      	strb	r2, [r3, #2]
   13094:	682b      	ldr	r3, [r5, #0]
	}
	if (ymin < glcd_bbox_selected->y_min) {
   13096:	785a      	ldrb	r2, [r3, #1]
   13098:	42a2      	cmp	r2, r4
   1309a:	d901      	bls.n	130a0 <glcd_update_bbox+0x44>
		glcd_bbox_selected->y_min = ymin;
   1309c:	705c      	strb	r4, [r3, #1]
   1309e:	682b      	ldr	r3, [r5, #0]
	}		
	if (ymax > glcd_bbox_selected->y_max) {
   130a0:	78da      	ldrb	r2, [r3, #3]
   130a2:	428a      	cmp	r2, r1
   130a4:	d200      	bcs.n	130a8 <glcd_update_bbox+0x4c>
		glcd_bbox_selected->y_max = ymax;
   130a6:	70d9      	strb	r1, [r3, #3]
	}			
}
   130a8:	bd70      	pop	{r4, r5, r6, pc}
	if (xmax > (GLCD_LCD_WIDTH-1)) {
   130aa:	b254      	sxtb	r4, r2
		xmin = GLCD_LCD_WIDTH-1;
   130ac:	207f      	movs	r0, #127	; 0x7f
	if (xmax > (GLCD_LCD_WIDTH-1)) {
   130ae:	2c00      	cmp	r4, #0
   130b0:	dadb      	bge.n	1306a <glcd_update_bbox+0xe>
		xmax = GLCD_LCD_WIDTH-1;
   130b2:	227f      	movs	r2, #127	; 0x7f
   130b4:	e7d9      	b.n	1306a <glcd_update_bbox+0xe>
   130b6:	46c0      	nop			; (mov r8, r8)
   130b8:	20001eb4 	.word	0x20001eb4

000130bc <glcd_reset_bbox>:
   130bc:	227f      	movs	r2, #127	; 0x7f
   130be:	4b06      	ldr	r3, [pc, #24]	; (130d8 <glcd_reset_bbox+0x1c>)
   130c0:	6819      	ldr	r1, [r3, #0]
   130c2:	700a      	strb	r2, [r1, #0]
   130c4:	2200      	movs	r2, #0
   130c6:	6819      	ldr	r1, [r3, #0]
   130c8:	708a      	strb	r2, [r1, #2]
   130ca:	213f      	movs	r1, #63	; 0x3f
   130cc:	6818      	ldr	r0, [r3, #0]
   130ce:	7041      	strb	r1, [r0, #1]
   130d0:	681b      	ldr	r3, [r3, #0]
   130d2:	70da      	strb	r2, [r3, #3]
   130d4:	4770      	bx	lr
   130d6:	46c0      	nop			; (mov r8, r8)
   130d8:	20001eb4 	.word	0x20001eb4

000130dc <glcd_clear_buffer>:
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
	glcd_write();
}

void glcd_clear_buffer(void) {
	memset(glcd_buffer_selected, 0x00, GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8);
   130dc:	2280      	movs	r2, #128	; 0x80
void glcd_clear_buffer(void) {
   130de:	b510      	push	{r4, lr}
	memset(glcd_buffer_selected, 0x00, GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8);
   130e0:	4b0f      	ldr	r3, [pc, #60]	; (13120 <glcd_clear_buffer+0x44>)
   130e2:	00d2      	lsls	r2, r2, #3
   130e4:	6818      	ldr	r0, [r3, #0]
   130e6:	2100      	movs	r1, #0
   130e8:	4b0e      	ldr	r3, [pc, #56]	; (13124 <glcd_clear_buffer+0x48>)
   130ea:	4798      	blx	r3
	if (xmin < glcd_bbox_selected->x_min) {
   130ec:	4a0e      	ldr	r2, [pc, #56]	; (13128 <glcd_clear_buffer+0x4c>)
   130ee:	6813      	ldr	r3, [r2, #0]
   130f0:	7819      	ldrb	r1, [r3, #0]
   130f2:	2900      	cmp	r1, #0
   130f4:	d002      	beq.n	130fc <glcd_clear_buffer+0x20>
		glcd_bbox_selected->x_min = xmin;
   130f6:	2100      	movs	r1, #0
   130f8:	7019      	strb	r1, [r3, #0]
   130fa:	6813      	ldr	r3, [r2, #0]
	if (xmax > glcd_bbox_selected->x_max) {
   130fc:	7899      	ldrb	r1, [r3, #2]
   130fe:	297e      	cmp	r1, #126	; 0x7e
   13100:	d802      	bhi.n	13108 <glcd_clear_buffer+0x2c>
		glcd_bbox_selected->x_max = xmax;
   13102:	217f      	movs	r1, #127	; 0x7f
   13104:	7099      	strb	r1, [r3, #2]
   13106:	6813      	ldr	r3, [r2, #0]
	if (ymin < glcd_bbox_selected->y_min) {
   13108:	7859      	ldrb	r1, [r3, #1]
   1310a:	2900      	cmp	r1, #0
   1310c:	d002      	beq.n	13114 <glcd_clear_buffer+0x38>
		glcd_bbox_selected->y_min = ymin;
   1310e:	2100      	movs	r1, #0
   13110:	7059      	strb	r1, [r3, #1]
   13112:	6813      	ldr	r3, [r2, #0]
	if (ymax > glcd_bbox_selected->y_max) {
   13114:	78da      	ldrb	r2, [r3, #3]
   13116:	2a3e      	cmp	r2, #62	; 0x3e
   13118:	d801      	bhi.n	1311e <glcd_clear_buffer+0x42>
		glcd_bbox_selected->y_max = ymax;
   1311a:	223f      	movs	r2, #63	; 0x3f
   1311c:	70da      	strb	r2, [r3, #3]
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
}
   1311e:	bd10      	pop	{r4, pc}
   13120:	20001eb0 	.word	0x20001eb0
   13124:	0001f06d 	.word	0x0001f06d
   13128:	20001eb4 	.word	0x20001eb4

0001312c <glcd_select_screen>:

void glcd_select_screen(uint8_t *buffer, glcd_BoundingBox_t *bbox)
{
	glcd_buffer_selected = buffer;
   1312c:	4b02      	ldr	r3, [pc, #8]	; (13138 <glcd_select_screen+0xc>)
   1312e:	6018      	str	r0, [r3, #0]
	glcd_bbox_selected = bbox;
   13130:	4b02      	ldr	r3, [pc, #8]	; (1313c <glcd_select_screen+0x10>)
   13132:	6019      	str	r1, [r3, #0]
}
   13134:	4770      	bx	lr
   13136:	46c0      	nop			; (mov r8, r8)
   13138:	20001eb0 	.word	0x20001eb0
   1313c:	20001eb4 	.word	0x20001eb4

00013140 <glcd_set_pixel>:
#include <string.h>
#include "glcd.h"

/* Based on PCD8544 library by Limor Fried */
void glcd_set_pixel(uint8_t x, uint8_t y, uint8_t color) {
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   13140:	b243      	sxtb	r3, r0
void glcd_set_pixel(uint8_t x, uint8_t y, uint8_t color) {
   13142:	b570      	push	{r4, r5, r6, lr}
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   13144:	2b00      	cmp	r3, #0
   13146:	db12      	blt.n	1316e <glcd_set_pixel+0x2e>
   13148:	293f      	cmp	r1, #63	; 0x3f
   1314a:	d810      	bhi.n	1316e <glcd_set_pixel+0x2e>
		return;
	}

	if (color) {
		/* Set black */
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1314c:	08cb      	lsrs	r3, r1, #3
   1314e:	01db      	lsls	r3, r3, #7
   13150:	181b      	adds	r3, r3, r0
   13152:	4d0b      	ldr	r5, [pc, #44]	; (13180 <glcd_set_pixel+0x40>)
	if (color) {
   13154:	2a00      	cmp	r2, #0
   13156:	d00b      	beq.n	13170 <glcd_set_pixel+0x30>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   13158:	2407      	movs	r4, #7
   1315a:	2201      	movs	r2, #1
   1315c:	400c      	ands	r4, r1
   1315e:	40a2      	lsls	r2, r4
   13160:	5cec      	ldrb	r4, [r5, r3]
   13162:	4322      	orrs	r2, r4
   13164:	54ea      	strb	r2, [r5, r3]
	} else {
		/* Set white */
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
	}

	glcd_update_bbox(x,y,x,y);
   13166:	000b      	movs	r3, r1
   13168:	0002      	movs	r2, r0
   1316a:	4c06      	ldr	r4, [pc, #24]	; (13184 <glcd_set_pixel+0x44>)
   1316c:	47a0      	blx	r4
}
   1316e:	bd70      	pop	{r4, r5, r6, pc}
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   13170:	2207      	movs	r2, #7
   13172:	2401      	movs	r4, #1
   13174:	400a      	ands	r2, r1
   13176:	4094      	lsls	r4, r2
   13178:	5cea      	ldrb	r2, [r5, r3]
   1317a:	43a2      	bics	r2, r4
   1317c:	54ea      	strb	r2, [r5, r3]
   1317e:	e7f2      	b.n	13166 <glcd_set_pixel+0x26>
   13180:	20001ab0 	.word	0x20001ab0
   13184:	0001305d 	.word	0x0001305d

00013188 <glcd_draw_line>:
	glcd_update_bbox(x,y,x,y);
	glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] ^= ( 1 << (y%8));
}

/* Bresenham's algorithm - based on PCD8544 library Limor Fried */
void glcd_draw_line(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) {
   13188:	b5f0      	push	{r4, r5, r6, r7, lr}
   1318a:	4657      	mov	r7, sl
   1318c:	464e      	mov	r6, r9
   1318e:	4645      	mov	r5, r8
   13190:	46de      	mov	lr, fp
   13192:	001c      	movs	r4, r3
   13194:	b5e0      	push	{r5, r6, r7, lr}
   13196:	000e      	movs	r6, r1
   13198:	4681      	mov	r9, r0
   1319a:	b087      	sub	sp, #28
   1319c:	ab10      	add	r3, sp, #64	; 0x40
   1319e:	781b      	ldrb	r3, [r3, #0]
   131a0:	0015      	movs	r5, r2
   131a2:	9304      	str	r3, [sp, #16]
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
   131a4:	1ba3      	subs	r3, r4, r6
   131a6:	17d8      	asrs	r0, r3, #31
   131a8:	181b      	adds	r3, r3, r0
   131aa:	4043      	eors	r3, r0
   131ac:	4698      	mov	r8, r3
   131ae:	464b      	mov	r3, r9
   131b0:	1aef      	subs	r7, r5, r3
   131b2:	17f8      	asrs	r0, r7, #31
   131b4:	9301      	str	r3, [sp, #4]
   131b6:	183b      	adds	r3, r7, r0
   131b8:	4043      	eors	r3, r0
   131ba:	0021      	movs	r1, r4
   131bc:	0032      	movs	r2, r6
   131be:	46aa      	mov	sl, r5
   131c0:	469b      	mov	fp, r3
   131c2:	9302      	str	r3, [sp, #8]
	uint8_t dx, dy;
	int8_t err;
	int8_t ystep;
	
	if (steep) {
   131c4:	4598      	cmp	r8, r3
   131c6:	dc07      	bgt.n	131d8 <glcd_draw_line+0x50>
   131c8:	4643      	mov	r3, r8
   131ca:	46a2      	mov	sl, r4
   131cc:	9601      	str	r6, [sp, #4]
   131ce:	002c      	movs	r4, r5
   131d0:	464e      	mov	r6, r9
   131d2:	000d      	movs	r5, r1
   131d4:	4691      	mov	r9, r2
   131d6:	9302      	str	r3, [sp, #8]
		swap(x0, y0);
		swap(x1, y1);
	}
	
	if (x0 > x1) {
   131d8:	42a6      	cmp	r6, r4
   131da:	d800      	bhi.n	131de <glcd_draw_line+0x56>
   131dc:	e094      	b.n	13308 <glcd_draw_line+0x180>
		swap(x0, x1);
		swap(y0, y1);
	}
	
	glcd_update_bbox( x0, y0, x1, y1 );
   131de:	4f59      	ldr	r7, [pc, #356]	; (13344 <glcd_draw_line+0x1bc>)
   131e0:	464b      	mov	r3, r9
   131e2:	0032      	movs	r2, r6
   131e4:	0029      	movs	r1, r5
   131e6:	0020      	movs	r0, r4
   131e8:	9705      	str	r7, [sp, #20]
   131ea:	47b8      	blx	r7

	dx = x1 - x0;
	dy = abs(y1 - y0);
   131ec:	4651      	mov	r1, sl
	dx = x1 - x0;
   131ee:	1b33      	subs	r3, r6, r4
   131f0:	b2db      	uxtb	r3, r3
   131f2:	001a      	movs	r2, r3
   131f4:	9303      	str	r3, [sp, #12]
	dy = abs(y1 - y0);
   131f6:	9b01      	ldr	r3, [sp, #4]
	
	err = dx / 2;
   131f8:	0857      	lsrs	r7, r2, #1
	dy = abs(y1 - y0);
   131fa:	1a5b      	subs	r3, r3, r1
   131fc:	17d9      	asrs	r1, r3, #31
   131fe:	185b      	adds	r3, r3, r1
   13200:	404b      	eors	r3, r1
   13202:	b2db      	uxtb	r3, r3
   13204:	469a      	mov	sl, r3
	
	if (y0 < y1) {
   13206:	2301      	movs	r3, #1
   13208:	9302      	str	r3, [sp, #8]
   1320a:	45a9      	cmp	r9, r5
   1320c:	d800      	bhi.n	13210 <glcd_draw_line+0x88>
   1320e:	e096      	b.n	1333e <glcd_draw_line+0x1b6>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   13210:	4642      	mov	r2, r8
   13212:	4b4d      	ldr	r3, [pc, #308]	; (13348 <glcd_draw_line+0x1c0>)
   13214:	9201      	str	r2, [sp, #4]
   13216:	4699      	mov	r9, r3
   13218:	46b0      	mov	r8, r6
   1321a:	e00d      	b.n	13238 <glcd_draw_line+0xb0>
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1321c:	062b      	lsls	r3, r5, #24
   1321e:	d401      	bmi.n	13224 <glcd_draw_line+0x9c>
   13220:	2c3f      	cmp	r4, #63	; 0x3f
   13222:	d93f      	bls.n	132a4 <glcd_draw_line+0x11c>
		if (steep) {
			glcd_set_pixel(y0, x0, color);
		} else {
			glcd_set_pixel(x0, y0, color);
		}
		err -= dy;
   13224:	4653      	mov	r3, sl
   13226:	1aff      	subs	r7, r7, r3
   13228:	b2fb      	uxtb	r3, r7
   1322a:	b25f      	sxtb	r7, r3
		if (err < 0) {
   1322c:	2f00      	cmp	r7, #0
   1322e:	db26      	blt.n	1327e <glcd_draw_line+0xf6>
	for (; x0<=x1; x0++) {
   13230:	3401      	adds	r4, #1
   13232:	b2e4      	uxtb	r4, r4
   13234:	4544      	cmp	r4, r8
   13236:	d82e      	bhi.n	13296 <glcd_draw_line+0x10e>
		if (steep) {
   13238:	9b01      	ldr	r3, [sp, #4]
   1323a:	455b      	cmp	r3, fp
   1323c:	dcee      	bgt.n	1321c <glcd_draw_line+0x94>
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1323e:	0623      	lsls	r3, r4, #24
   13240:	d4f0      	bmi.n	13224 <glcd_draw_line+0x9c>
   13242:	2d3f      	cmp	r5, #63	; 0x3f
   13244:	d8ee      	bhi.n	13224 <glcd_draw_line+0x9c>
	if (color) {
   13246:	9b04      	ldr	r3, [sp, #16]
   13248:	2b00      	cmp	r3, #0
   1324a:	d041      	beq.n	132d0 <glcd_draw_line+0x148>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1324c:	2107      	movs	r1, #7
   1324e:	2201      	movs	r2, #1
   13250:	4029      	ands	r1, r5
   13252:	408a      	lsls	r2, r1
   13254:	08eb      	lsrs	r3, r5, #3
   13256:	b2db      	uxtb	r3, r3
   13258:	01db      	lsls	r3, r3, #7
   1325a:	493b      	ldr	r1, [pc, #236]	; (13348 <glcd_draw_line+0x1c0>)
   1325c:	191b      	adds	r3, r3, r4
   1325e:	5cc9      	ldrb	r1, [r1, r3]
   13260:	430a      	orrs	r2, r1
   13262:	4939      	ldr	r1, [pc, #228]	; (13348 <glcd_draw_line+0x1c0>)
   13264:	54ca      	strb	r2, [r1, r3]
	glcd_update_bbox(x,y,x,y);
   13266:	002b      	movs	r3, r5
   13268:	0022      	movs	r2, r4
   1326a:	0029      	movs	r1, r5
   1326c:	0020      	movs	r0, r4
   1326e:	9e05      	ldr	r6, [sp, #20]
   13270:	47b0      	blx	r6
		err -= dy;
   13272:	4653      	mov	r3, sl
   13274:	1aff      	subs	r7, r7, r3
   13276:	b2fb      	uxtb	r3, r7
   13278:	b25f      	sxtb	r7, r3
		if (err < 0) {
   1327a:	2f00      	cmp	r7, #0
   1327c:	dad8      	bge.n	13230 <glcd_draw_line+0xa8>
			y0 += ystep;
   1327e:	9a02      	ldr	r2, [sp, #8]
	for (; x0<=x1; x0++) {
   13280:	3401      	adds	r4, #1
			y0 += ystep;
   13282:	4694      	mov	ip, r2
			err += dx;
   13284:	9a03      	ldr	r2, [sp, #12]
			y0 += ystep;
   13286:	4465      	add	r5, ip
			err += dx;
   13288:	4694      	mov	ip, r2
	for (; x0<=x1; x0++) {
   1328a:	b2e4      	uxtb	r4, r4
			err += dx;
   1328c:	4463      	add	r3, ip
			y0 += ystep;
   1328e:	b2ed      	uxtb	r5, r5
			err += dx;
   13290:	b25f      	sxtb	r7, r3
	for (; x0<=x1; x0++) {
   13292:	4544      	cmp	r4, r8
   13294:	d9d0      	bls.n	13238 <glcd_draw_line+0xb0>
		}
	}
}
   13296:	b007      	add	sp, #28
   13298:	bc3c      	pop	{r2, r3, r4, r5}
   1329a:	4690      	mov	r8, r2
   1329c:	4699      	mov	r9, r3
   1329e:	46a2      	mov	sl, r4
   132a0:	46ab      	mov	fp, r5
   132a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (color) {
   132a4:	9b04      	ldr	r3, [sp, #16]
   132a6:	2b00      	cmp	r3, #0
   132a8:	d020      	beq.n	132ec <glcd_draw_line+0x164>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   132aa:	2007      	movs	r0, #7
   132ac:	2201      	movs	r2, #1
   132ae:	4020      	ands	r0, r4
   132b0:	4082      	lsls	r2, r0
   132b2:	08e3      	lsrs	r3, r4, #3
   132b4:	b2db      	uxtb	r3, r3
   132b6:	4924      	ldr	r1, [pc, #144]	; (13348 <glcd_draw_line+0x1c0>)
   132b8:	01db      	lsls	r3, r3, #7
   132ba:	195b      	adds	r3, r3, r5
   132bc:	5cc8      	ldrb	r0, [r1, r3]
   132be:	4302      	orrs	r2, r0
   132c0:	54ca      	strb	r2, [r1, r3]
	glcd_update_bbox(x,y,x,y);
   132c2:	0023      	movs	r3, r4
   132c4:	002a      	movs	r2, r5
   132c6:	0021      	movs	r1, r4
   132c8:	0028      	movs	r0, r5
   132ca:	9e05      	ldr	r6, [sp, #20]
   132cc:	47b0      	blx	r6
   132ce:	e7a9      	b.n	13224 <glcd_draw_line+0x9c>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   132d0:	2207      	movs	r2, #7
   132d2:	2101      	movs	r1, #1
   132d4:	402a      	ands	r2, r5
   132d6:	4091      	lsls	r1, r2
   132d8:	464a      	mov	r2, r9
   132da:	08eb      	lsrs	r3, r5, #3
   132dc:	b2db      	uxtb	r3, r3
   132de:	01db      	lsls	r3, r3, #7
   132e0:	191b      	adds	r3, r3, r4
   132e2:	5cd2      	ldrb	r2, [r2, r3]
   132e4:	438a      	bics	r2, r1
   132e6:	4649      	mov	r1, r9
   132e8:	54ca      	strb	r2, [r1, r3]
   132ea:	e7bc      	b.n	13266 <glcd_draw_line+0xde>
   132ec:	2207      	movs	r2, #7
   132ee:	2101      	movs	r1, #1
   132f0:	4022      	ands	r2, r4
   132f2:	4091      	lsls	r1, r2
   132f4:	08e3      	lsrs	r3, r4, #3
   132f6:	b2db      	uxtb	r3, r3
   132f8:	01db      	lsls	r3, r3, #7
   132fa:	4a13      	ldr	r2, [pc, #76]	; (13348 <glcd_draw_line+0x1c0>)
   132fc:	195b      	adds	r3, r3, r5
   132fe:	5cd2      	ldrb	r2, [r2, r3]
   13300:	438a      	bics	r2, r1
   13302:	4911      	ldr	r1, [pc, #68]	; (13348 <glcd_draw_line+0x1c0>)
   13304:	54ca      	strb	r2, [r1, r3]
   13306:	e7dc      	b.n	132c2 <glcd_draw_line+0x13a>
	glcd_update_bbox( x0, y0, x1, y1 );
   13308:	4f0e      	ldr	r7, [pc, #56]	; (13344 <glcd_draw_line+0x1bc>)
   1330a:	002b      	movs	r3, r5
   1330c:	0022      	movs	r2, r4
   1330e:	4649      	mov	r1, r9
   13310:	0030      	movs	r0, r6
   13312:	9705      	str	r7, [sp, #20]
   13314:	47b8      	blx	r7
	dy = abs(y1 - y0);
   13316:	466a      	mov	r2, sp
	dx = x1 - x0;
   13318:	1ba3      	subs	r3, r4, r6
	dy = abs(y1 - y0);
   1331a:	7a12      	ldrb	r2, [r2, #8]
	dx = x1 - x0;
   1331c:	b2db      	uxtb	r3, r3
   1331e:	9303      	str	r3, [sp, #12]
	dy = abs(y1 - y0);
   13320:	4692      	mov	sl, r2
	err = dx / 2;
   13322:	085f      	lsrs	r7, r3, #1
	if (y0 < y1) {
   13324:	45a9      	cmp	r9, r5
   13326:	d206      	bcs.n	13336 <glcd_draw_line+0x1ae>
   13328:	0023      	movs	r3, r4
   1332a:	0034      	movs	r4, r6
   1332c:	001e      	movs	r6, r3
   1332e:	2301      	movs	r3, #1
   13330:	464d      	mov	r5, r9
   13332:	9302      	str	r3, [sp, #8]
   13334:	e76c      	b.n	13210 <glcd_draw_line+0x88>
   13336:	0023      	movs	r3, r4
   13338:	464d      	mov	r5, r9
   1333a:	0034      	movs	r4, r6
   1333c:	001e      	movs	r6, r3
   1333e:	23ff      	movs	r3, #255	; 0xff
   13340:	9302      	str	r3, [sp, #8]
   13342:	e765      	b.n	13210 <glcd_draw_line+0x88>
   13344:	0001305d 	.word	0x0001305d
   13348:	20001ab0 	.word	0x20001ab0

0001334c <glcd_draw_circle>:
	glcd_draw_line(x+1, y+h, x+w, y+h, color);
	glcd_draw_line(x+w, y+1, x+w, y+h, color);
}

void glcd_draw_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
   1334c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1334e:	46de      	mov	lr, fp
   13350:	4657      	mov	r7, sl
   13352:	464e      	mov	r6, r9
   13354:	4645      	mov	r5, r8
   13356:	b5e0      	push	{r5, r6, r7, lr}
   13358:	b08b      	sub	sp, #44	; 0x2c
   1335a:	9307      	str	r3, [sp, #28]
		
	int8_t f = 1 - r;
   1335c:	2301      	movs	r3, #1
   1335e:	2401      	movs	r4, #1
   13360:	1a9b      	subs	r3, r3, r2
   13362:	46a1      	mov	r9, r4
   13364:	b25c      	sxtb	r4, r3
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
   13366:	01d3      	lsls	r3, r2, #7
   13368:	1a9b      	subs	r3, r3, r2
	int8_t x = 0;
	int8_t y = r;
	
	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
   1336a:	1a87      	subs	r7, r0, r2
   1336c:	468c      	mov	ip, r1
	int8_t ddF_y = -2 * r;
   1336e:	005b      	lsls	r3, r3, #1
	int8_t f = 1 - r;
   13370:	46a3      	mov	fp, r4
	int8_t ddF_y = -2 * r;
   13372:	b25c      	sxtb	r4, r3
	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
   13374:	b2fb      	uxtb	r3, r7
   13376:	469a      	mov	sl, r3
   13378:	1a8e      	subs	r6, r1, r2
   1337a:	1815      	adds	r5, r2, r0
	int8_t ddF_y = -2 * r;
   1337c:	9408      	str	r4, [sp, #32]
	int8_t y = r;
   1337e:	b254      	sxtb	r4, r2
	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
   13380:	4462      	add	r2, ip
	int8_t y = r;
   13382:	9403      	str	r4, [sp, #12]
	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
   13384:	b2f6      	uxtb	r6, r6
   13386:	b2d4      	uxtb	r4, r2
   13388:	b2ed      	uxtb	r5, r5
{
   1338a:	9106      	str	r1, [sp, #24]
	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
   1338c:	9005      	str	r0, [sp, #20]
   1338e:	0023      	movs	r3, r4
   13390:	002a      	movs	r2, r5
   13392:	0031      	movs	r1, r6
   13394:	4650      	mov	r0, sl
   13396:	4fda      	ldr	r7, [pc, #872]	; (13700 <glcd_draw_circle+0x3b4>)
   13398:	47b8      	blx	r7
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1339a:	466b      	mov	r3, sp
   1339c:	7d1b      	ldrb	r3, [r3, #20]
   1339e:	b25b      	sxtb	r3, r3
   133a0:	2b00      	cmp	r3, #0
   133a2:	db05      	blt.n	133b0 <glcd_draw_circle+0x64>
   133a4:	2c3f      	cmp	r4, #63	; 0x3f
   133a6:	d800      	bhi.n	133aa <glcd_draw_circle+0x5e>
   133a8:	e281      	b.n	138ae <glcd_draw_circle+0x562>
   133aa:	2e3f      	cmp	r6, #63	; 0x3f
   133ac:	d800      	bhi.n	133b0 <glcd_draw_circle+0x64>
   133ae:	e263      	b.n	13878 <glcd_draw_circle+0x52c>
   133b0:	b26b      	sxtb	r3, r5
   133b2:	2b00      	cmp	r3, #0
   133b4:	da00      	bge.n	133b8 <glcd_draw_circle+0x6c>
   133b6:	e238      	b.n	1382a <glcd_draw_circle+0x4de>
   133b8:	9b06      	ldr	r3, [sp, #24]
   133ba:	2b3f      	cmp	r3, #63	; 0x3f
   133bc:	d800      	bhi.n	133c0 <glcd_draw_circle+0x74>
   133be:	e291      	b.n	138e4 <glcd_draw_circle+0x598>
	glcd_set_pixel(x0, y0+r, color);
	glcd_set_pixel(x0, y0-r, color);
	glcd_set_pixel(x0+r, y0, color);
	glcd_set_pixel(x0-r, y0, color);
	
	while (x<y) {
   133c0:	9b03      	ldr	r3, [sp, #12]
   133c2:	2b00      	cmp	r3, #0
   133c4:	dc00      	bgt.n	133c8 <glcd_draw_circle+0x7c>
   133c6:	e229      	b.n	1381c <glcd_draw_circle+0x4d0>
   133c8:	9b06      	ldr	r3, [sp, #24]
   133ca:	9a05      	ldr	r2, [sp, #20]
   133cc:	1e5d      	subs	r5, r3, #1
   133ce:	1c5e      	adds	r6, r3, #1
   133d0:	0013      	movs	r3, r2
   133d2:	3b01      	subs	r3, #1
   133d4:	b2db      	uxtb	r3, r3
   133d6:	9301      	str	r3, [sp, #4]
   133d8:	0013      	movs	r3, r2
   133da:	3301      	adds	r3, #1
   133dc:	b2db      	uxtb	r3, r3
   133de:	469a      	mov	sl, r3
   133e0:	2300      	movs	r3, #0
   133e2:	9304      	str	r3, [sp, #16]
   133e4:	4653      	mov	r3, sl
   133e6:	b2f6      	uxtb	r6, r6
   133e8:	b2ed      	uxtb	r5, r5
   133ea:	9600      	str	r6, [sp, #0]
   133ec:	9302      	str	r3, [sp, #8]
   133ee:	e044      	b.n	1347a <glcd_draw_circle+0x12e>
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   133f0:	2f3f      	cmp	r7, #63	; 0x3f
   133f2:	d800      	bhi.n	133f6 <glcd_draw_circle+0xaa>
   133f4:	e105      	b.n	13602 <glcd_draw_circle+0x2b6>
   133f6:	466b      	mov	r3, sp
   133f8:	791b      	ldrb	r3, [r3, #4]
   133fa:	b25b      	sxtb	r3, r3
   133fc:	4699      	mov	r9, r3
   133fe:	2b00      	cmp	r3, #0
   13400:	da00      	bge.n	13404 <glcd_draw_circle+0xb8>
   13402:	e0c4      	b.n	1358e <glcd_draw_circle+0x242>
   13404:	2f3f      	cmp	r7, #63	; 0x3f
   13406:	d964      	bls.n	134d2 <glcd_draw_circle+0x186>
		ddF_x += 2;
		f += ddF_x;
		
		glcd_set_pixel(x0 + x, y0 + y, color);
		glcd_set_pixel(x0 - x, y0 + y, color);
		glcd_set_pixel(x0 + x, y0 - y, color);
   13408:	9b06      	ldr	r3, [sp, #24]
   1340a:	1b1f      	subs	r7, r3, r4
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1340c:	4653      	mov	r3, sl
		glcd_set_pixel(x0 + x, y0 - y, color);
   1340e:	b2ff      	uxtb	r7, r7
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   13410:	2b00      	cmp	r3, #0
   13412:	db7e      	blt.n	13512 <glcd_draw_circle+0x1c6>
   13414:	2f3f      	cmp	r7, #63	; 0x3f
   13416:	d800      	bhi.n	1341a <glcd_draw_circle+0xce>
   13418:	e0bf      	b.n	1359a <glcd_draw_circle+0x24e>
		glcd_set_pixel(x0 - x, y0 - y, color);
		
		glcd_set_pixel(x0 + y, y0 + x, color);
   1341a:	9b05      	ldr	r3, [sp, #20]
   1341c:	191f      	adds	r7, r3, r4
   1341e:	b2ff      	uxtb	r7, r7
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   13420:	b27b      	sxtb	r3, r7
   13422:	4699      	mov	r9, r3
   13424:	2b00      	cmp	r3, #0
   13426:	da00      	bge.n	1342a <glcd_draw_circle+0xde>
   13428:	e0a8      	b.n	1357c <glcd_draw_circle+0x230>
   1342a:	9b00      	ldr	r3, [sp, #0]
   1342c:	2b3f      	cmp	r3, #63	; 0x3f
   1342e:	d800      	bhi.n	13432 <glcd_draw_circle+0xe6>
   13430:	e121      	b.n	13676 <glcd_draw_circle+0x32a>
		glcd_set_pixel(x0 - y, y0 + x, color);
   13432:	9b05      	ldr	r3, [sp, #20]
   13434:	1b1c      	subs	r4, r3, r4
   13436:	b2e4      	uxtb	r4, r4
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   13438:	b263      	sxtb	r3, r4
   1343a:	469a      	mov	sl, r3
   1343c:	2b00      	cmp	r3, #0
   1343e:	db06      	blt.n	1344e <glcd_draw_circle+0x102>
   13440:	9b00      	ldr	r3, [sp, #0]
   13442:	2b3f      	cmp	r3, #63	; 0x3f
   13444:	d800      	bhi.n	13448 <glcd_draw_circle+0xfc>
   13446:	e130      	b.n	136aa <glcd_draw_circle+0x35e>
   13448:	464b      	mov	r3, r9
   1344a:	2b00      	cmp	r3, #0
   1344c:	db75      	blt.n	1353a <glcd_draw_circle+0x1ee>
   1344e:	2d3f      	cmp	r5, #63	; 0x3f
   13450:	d800      	bhi.n	13454 <glcd_draw_circle+0x108>
   13452:	e0f0      	b.n	13636 <glcd_draw_circle+0x2ea>
   13454:	9e00      	ldr	r6, [sp, #0]
	while (x<y) {
   13456:	9a04      	ldr	r2, [sp, #16]
   13458:	3601      	adds	r6, #1
   1345a:	b2f3      	uxtb	r3, r6
   1345c:	9300      	str	r3, [sp, #0]
   1345e:	9b01      	ldr	r3, [sp, #4]
   13460:	3d01      	subs	r5, #1
   13462:	3b01      	subs	r3, #1
   13464:	b2db      	uxtb	r3, r3
   13466:	9301      	str	r3, [sp, #4]
   13468:	9b02      	ldr	r3, [sp, #8]
   1346a:	b2ed      	uxtb	r5, r5
   1346c:	3301      	adds	r3, #1
   1346e:	b2db      	uxtb	r3, r3
   13470:	9302      	str	r3, [sp, #8]
   13472:	9b03      	ldr	r3, [sp, #12]
   13474:	4293      	cmp	r3, r2
   13476:	dc00      	bgt.n	1347a <glcd_draw_circle+0x12e>
   13478:	e1d0      	b.n	1381c <glcd_draw_circle+0x4d0>
		if (f >= 0) {
   1347a:	465b      	mov	r3, fp
   1347c:	2b00      	cmp	r3, #0
   1347e:	db0b      	blt.n	13498 <glcd_draw_circle+0x14c>
			y--;
   13480:	9b03      	ldr	r3, [sp, #12]
   13482:	3b01      	subs	r3, #1
   13484:	b25b      	sxtb	r3, r3
   13486:	9303      	str	r3, [sp, #12]
			ddF_y += 2;
   13488:	9b08      	ldr	r3, [sp, #32]
   1348a:	3302      	adds	r3, #2
   1348c:	b2db      	uxtb	r3, r3
   1348e:	b25a      	sxtb	r2, r3
			f += ddF_y;
   13490:	445b      	add	r3, fp
   13492:	b25b      	sxtb	r3, r3
   13494:	469b      	mov	fp, r3
			ddF_y += 2;
   13496:	9208      	str	r2, [sp, #32]
   13498:	9b04      	ldr	r3, [sp, #16]
   1349a:	3301      	adds	r3, #1
   1349c:	b2db      	uxtb	r3, r3
   1349e:	b25a      	sxtb	r2, r3
		f += ddF_x;
   134a0:	005b      	lsls	r3, r3, #1
   134a2:	3301      	adds	r3, #1
   134a4:	445b      	add	r3, fp
   134a6:	b25b      	sxtb	r3, r3
   134a8:	469b      	mov	fp, r3
		glcd_set_pixel(x0 + x, y0 + y, color);
   134aa:	466b      	mov	r3, sp
   134ac:	7b1c      	ldrb	r4, [r3, #12]
   134ae:	9b06      	ldr	r3, [sp, #24]
   134b0:	9204      	str	r2, [sp, #16]
   134b2:	191f      	adds	r7, r3, r4
   134b4:	466b      	mov	r3, sp
   134b6:	7a1b      	ldrb	r3, [r3, #8]
   134b8:	b2ff      	uxtb	r7, r7
   134ba:	b25b      	sxtb	r3, r3
   134bc:	469a      	mov	sl, r3
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   134be:	2b00      	cmp	r3, #0
   134c0:	da96      	bge.n	133f0 <glcd_draw_circle+0xa4>
   134c2:	466b      	mov	r3, sp
   134c4:	791b      	ldrb	r3, [r3, #4]
   134c6:	b25b      	sxtb	r3, r3
   134c8:	4699      	mov	r9, r3
   134ca:	2b00      	cmp	r3, #0
   134cc:	dba5      	blt.n	1341a <glcd_draw_circle+0xce>
   134ce:	2f3f      	cmp	r7, #63	; 0x3f
   134d0:	d89a      	bhi.n	13408 <glcd_draw_circle+0xbc>
	if (color) {
   134d2:	9b07      	ldr	r3, [sp, #28]
   134d4:	2b00      	cmp	r3, #0
   134d6:	d100      	bne.n	134da <glcd_draw_circle+0x18e>
   134d8:	e17e      	b.n	137d8 <glcd_draw_circle+0x48c>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   134da:	9a01      	ldr	r2, [sp, #4]
   134dc:	2107      	movs	r1, #7
   134de:	4694      	mov	ip, r2
   134e0:	4a88      	ldr	r2, [pc, #544]	; (13704 <glcd_draw_circle+0x3b8>)
   134e2:	4039      	ands	r1, r7
   134e4:	4690      	mov	r8, r2
   134e6:	2201      	movs	r2, #1
   134e8:	408a      	lsls	r2, r1
   134ea:	4641      	mov	r1, r8
   134ec:	08fb      	lsrs	r3, r7, #3
   134ee:	01db      	lsls	r3, r3, #7
   134f0:	4463      	add	r3, ip
   134f2:	5cc9      	ldrb	r1, [r1, r3]
   134f4:	430a      	orrs	r2, r1
   134f6:	4641      	mov	r1, r8
   134f8:	54ca      	strb	r2, [r1, r3]
	glcd_update_bbox(x,y,x,y);
   134fa:	9801      	ldr	r0, [sp, #4]
   134fc:	003b      	movs	r3, r7
   134fe:	0039      	movs	r1, r7
   13500:	0002      	movs	r2, r0
   13502:	4e7f      	ldr	r6, [pc, #508]	; (13700 <glcd_draw_circle+0x3b4>)
   13504:	47b0      	blx	r6
		glcd_set_pixel(x0 + x, y0 - y, color);
   13506:	9b06      	ldr	r3, [sp, #24]
   13508:	1b1f      	subs	r7, r3, r4
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1350a:	4653      	mov	r3, sl
		glcd_set_pixel(x0 + x, y0 - y, color);
   1350c:	b2ff      	uxtb	r7, r7
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1350e:	2b00      	cmp	r3, #0
   13510:	da80      	bge.n	13414 <glcd_draw_circle+0xc8>
   13512:	2f3f      	cmp	r7, #63	; 0x3f
   13514:	d881      	bhi.n	1341a <glcd_draw_circle+0xce>
   13516:	08fb      	lsrs	r3, r7, #3
   13518:	01db      	lsls	r3, r3, #7
   1351a:	2207      	movs	r2, #7
   1351c:	9309      	str	r3, [sp, #36]	; 0x24
   1351e:	2301      	movs	r3, #1
   13520:	403a      	ands	r2, r7
   13522:	4093      	lsls	r3, r2
   13524:	b25b      	sxtb	r3, r3
   13526:	469a      	mov	sl, r3
   13528:	4b76      	ldr	r3, [pc, #472]	; (13704 <glcd_draw_circle+0x3b8>)
   1352a:	4698      	mov	r8, r3
	if (color) {
   1352c:	9b07      	ldr	r3, [sp, #28]
   1352e:	2b00      	cmp	r3, #0
   13530:	d154      	bne.n	135dc <glcd_draw_circle+0x290>
   13532:	4653      	mov	r3, sl
   13534:	43db      	mvns	r3, r3
   13536:	469a      	mov	sl, r3
   13538:	e107      	b.n	1374a <glcd_draw_circle+0x3fe>
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1353a:	2d3f      	cmp	r5, #63	; 0x3f
   1353c:	d88a      	bhi.n	13454 <glcd_draw_circle+0x108>
   1353e:	08eb      	lsrs	r3, r5, #3
   13540:	01db      	lsls	r3, r3, #7
   13542:	2207      	movs	r2, #7
   13544:	9309      	str	r3, [sp, #36]	; 0x24
   13546:	2301      	movs	r3, #1
   13548:	402a      	ands	r2, r5
   1354a:	4093      	lsls	r3, r2
   1354c:	b25b      	sxtb	r3, r3
   1354e:	4699      	mov	r9, r3
	if (color) {
   13550:	9b07      	ldr	r3, [sp, #28]
   13552:	2b00      	cmp	r3, #0
   13554:	d100      	bne.n	13558 <glcd_draw_circle+0x20c>
   13556:	e22f      	b.n	139b8 <glcd_draw_circle+0x66c>
   13558:	4b6a      	ldr	r3, [pc, #424]	; (13704 <glcd_draw_circle+0x3b8>)
   1355a:	4698      	mov	r8, r3
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1355c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1355e:	4649      	mov	r1, r9
   13560:	18e2      	adds	r2, r4, r3
   13562:	4643      	mov	r3, r8
   13564:	5c9b      	ldrb	r3, [r3, r2]
   13566:	4319      	orrs	r1, r3
   13568:	000b      	movs	r3, r1
   1356a:	4641      	mov	r1, r8
   1356c:	548b      	strb	r3, [r1, r2]
	glcd_update_bbox(x,y,x,y);
   1356e:	0022      	movs	r2, r4
   13570:	0020      	movs	r0, r4
   13572:	002b      	movs	r3, r5
   13574:	0029      	movs	r1, r5
   13576:	4c62      	ldr	r4, [pc, #392]	; (13700 <glcd_draw_circle+0x3b4>)
   13578:	47a0      	blx	r4
   1357a:	e76b      	b.n	13454 <glcd_draw_circle+0x108>
		glcd_set_pixel(x0 - y, y0 + x, color);
   1357c:	9b05      	ldr	r3, [sp, #20]
   1357e:	1b1c      	subs	r4, r3, r4
   13580:	b2e4      	uxtb	r4, r4
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   13582:	b263      	sxtb	r3, r4
   13584:	469a      	mov	sl, r3
   13586:	2b00      	cmp	r3, #0
   13588:	da00      	bge.n	1358c <glcd_draw_circle+0x240>
   1358a:	e763      	b.n	13454 <glcd_draw_circle+0x108>
   1358c:	e758      	b.n	13440 <glcd_draw_circle+0xf4>
		glcd_set_pixel(x0 + x, y0 - y, color);
   1358e:	9b06      	ldr	r3, [sp, #24]
   13590:	1b1f      	subs	r7, r3, r4
   13592:	b2ff      	uxtb	r7, r7
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   13594:	2f3f      	cmp	r7, #63	; 0x3f
   13596:	d900      	bls.n	1359a <glcd_draw_circle+0x24e>
   13598:	e73f      	b.n	1341a <glcd_draw_circle+0xce>
	if (color) {
   1359a:	9b07      	ldr	r3, [sp, #28]
   1359c:	2b00      	cmp	r3, #0
   1359e:	d100      	bne.n	135a2 <glcd_draw_circle+0x256>
   135a0:	e0b2      	b.n	13708 <glcd_draw_circle+0x3bc>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   135a2:	08fb      	lsrs	r3, r7, #3
   135a4:	01db      	lsls	r3, r3, #7
   135a6:	2107      	movs	r1, #7
   135a8:	469c      	mov	ip, r3
   135aa:	9309      	str	r3, [sp, #36]	; 0x24
   135ac:	2301      	movs	r3, #1
   135ae:	4039      	ands	r1, r7
   135b0:	408b      	lsls	r3, r1
   135b2:	b25b      	sxtb	r3, r3
   135b4:	469a      	mov	sl, r3
   135b6:	9802      	ldr	r0, [sp, #8]
   135b8:	4b52      	ldr	r3, [pc, #328]	; (13704 <glcd_draw_circle+0x3b8>)
   135ba:	0002      	movs	r2, r0
   135bc:	4698      	mov	r8, r3
   135be:	4651      	mov	r1, sl
   135c0:	4462      	add	r2, ip
   135c2:	5c9b      	ldrb	r3, [r3, r2]
	glcd_update_bbox(x,y,x,y);
   135c4:	4e4e      	ldr	r6, [pc, #312]	; (13700 <glcd_draw_circle+0x3b4>)
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   135c6:	430b      	orrs	r3, r1
   135c8:	4641      	mov	r1, r8
   135ca:	548b      	strb	r3, [r1, r2]
	glcd_update_bbox(x,y,x,y);
   135cc:	003b      	movs	r3, r7
   135ce:	0002      	movs	r2, r0
   135d0:	0039      	movs	r1, r7
   135d2:	47b0      	blx	r6
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   135d4:	464b      	mov	r3, r9
   135d6:	2b00      	cmp	r3, #0
   135d8:	da00      	bge.n	135dc <glcd_draw_circle+0x290>
   135da:	e71e      	b.n	1341a <glcd_draw_circle+0xce>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   135dc:	9901      	ldr	r1, [sp, #4]
   135de:	9b09      	ldr	r3, [sp, #36]	; 0x24
   135e0:	468c      	mov	ip, r1
   135e2:	4463      	add	r3, ip
   135e4:	001a      	movs	r2, r3
   135e6:	4643      	mov	r3, r8
   135e8:	4651      	mov	r1, sl
   135ea:	5c9b      	ldrb	r3, [r3, r2]
   135ec:	4319      	orrs	r1, r3
   135ee:	000b      	movs	r3, r1
   135f0:	4641      	mov	r1, r8
   135f2:	548b      	strb	r3, [r1, r2]
	glcd_update_bbox(x,y,x,y);
   135f4:	9801      	ldr	r0, [sp, #4]
   135f6:	003b      	movs	r3, r7
   135f8:	0002      	movs	r2, r0
   135fa:	0039      	movs	r1, r7
   135fc:	4e40      	ldr	r6, [pc, #256]	; (13700 <glcd_draw_circle+0x3b4>)
   135fe:	47b0      	blx	r6
   13600:	e70b      	b.n	1341a <glcd_draw_circle+0xce>
	if (color) {
   13602:	9b07      	ldr	r3, [sp, #28]
   13604:	2b00      	cmp	r3, #0
   13606:	d069      	beq.n	136dc <glcd_draw_circle+0x390>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   13608:	9a02      	ldr	r2, [sp, #8]
   1360a:	2107      	movs	r1, #7
   1360c:	4694      	mov	ip, r2
   1360e:	4a3d      	ldr	r2, [pc, #244]	; (13704 <glcd_draw_circle+0x3b8>)
   13610:	4039      	ands	r1, r7
   13612:	4690      	mov	r8, r2
   13614:	2201      	movs	r2, #1
   13616:	408a      	lsls	r2, r1
   13618:	4641      	mov	r1, r8
   1361a:	08fb      	lsrs	r3, r7, #3
   1361c:	01db      	lsls	r3, r3, #7
   1361e:	4463      	add	r3, ip
   13620:	5cc9      	ldrb	r1, [r1, r3]
   13622:	430a      	orrs	r2, r1
   13624:	4641      	mov	r1, r8
   13626:	54ca      	strb	r2, [r1, r3]
	glcd_update_bbox(x,y,x,y);
   13628:	9802      	ldr	r0, [sp, #8]
   1362a:	003b      	movs	r3, r7
   1362c:	0002      	movs	r2, r0
   1362e:	0039      	movs	r1, r7
   13630:	4e33      	ldr	r6, [pc, #204]	; (13700 <glcd_draw_circle+0x3b4>)
   13632:	47b0      	blx	r6
   13634:	e6df      	b.n	133f6 <glcd_draw_circle+0xaa>
	if (color) {
   13636:	9b07      	ldr	r3, [sp, #28]
   13638:	2b00      	cmp	r3, #0
   1363a:	d100      	bne.n	1363e <glcd_draw_circle+0x2f2>
   1363c:	e0a3      	b.n	13786 <glcd_draw_circle+0x43a>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1363e:	08eb      	lsrs	r3, r5, #3
   13640:	01db      	lsls	r3, r3, #7
   13642:	2107      	movs	r1, #7
   13644:	18fa      	adds	r2, r7, r3
   13646:	9309      	str	r3, [sp, #36]	; 0x24
   13648:	2301      	movs	r3, #1
   1364a:	4029      	ands	r1, r5
   1364c:	408b      	lsls	r3, r1
   1364e:	b25b      	sxtb	r3, r3
   13650:	4699      	mov	r9, r3
   13652:	4b2c      	ldr	r3, [pc, #176]	; (13704 <glcd_draw_circle+0x3b8>)
   13654:	4649      	mov	r1, r9
   13656:	4698      	mov	r8, r3
   13658:	5c9b      	ldrb	r3, [r3, r2]
	glcd_update_bbox(x,y,x,y);
   1365a:	0038      	movs	r0, r7
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1365c:	430b      	orrs	r3, r1
   1365e:	4641      	mov	r1, r8
	glcd_update_bbox(x,y,x,y);
   13660:	4e27      	ldr	r6, [pc, #156]	; (13700 <glcd_draw_circle+0x3b4>)
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   13662:	548b      	strb	r3, [r1, r2]
	glcd_update_bbox(x,y,x,y);
   13664:	002b      	movs	r3, r5
   13666:	003a      	movs	r2, r7
   13668:	0029      	movs	r1, r5
   1366a:	47b0      	blx	r6
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1366c:	4653      	mov	r3, sl
   1366e:	2b00      	cmp	r3, #0
   13670:	db00      	blt.n	13674 <glcd_draw_circle+0x328>
   13672:	e773      	b.n	1355c <glcd_draw_circle+0x210>
   13674:	e6ee      	b.n	13454 <glcd_draw_circle+0x108>
	if (color) {
   13676:	9b07      	ldr	r3, [sp, #28]
   13678:	2b00      	cmp	r3, #0
   1367a:	d100      	bne.n	1367e <glcd_draw_circle+0x332>
   1367c:	e0bd      	b.n	137fa <glcd_draw_circle+0x4ae>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1367e:	4a21      	ldr	r2, [pc, #132]	; (13704 <glcd_draw_circle+0x3b8>)
   13680:	2107      	movs	r1, #7
   13682:	4690      	mov	r8, r2
   13684:	2201      	movs	r2, #1
   13686:	9800      	ldr	r0, [sp, #0]
   13688:	4001      	ands	r1, r0
   1368a:	408a      	lsls	r2, r1
   1368c:	4641      	mov	r1, r8
   1368e:	08c3      	lsrs	r3, r0, #3
   13690:	01db      	lsls	r3, r3, #7
   13692:	19db      	adds	r3, r3, r7
   13694:	5cc9      	ldrb	r1, [r1, r3]
   13696:	430a      	orrs	r2, r1
   13698:	4641      	mov	r1, r8
   1369a:	54ca      	strb	r2, [r1, r3]
   1369c:	0001      	movs	r1, r0
	glcd_update_bbox(x,y,x,y);
   1369e:	000b      	movs	r3, r1
   136a0:	003a      	movs	r2, r7
   136a2:	0038      	movs	r0, r7
   136a4:	4e16      	ldr	r6, [pc, #88]	; (13700 <glcd_draw_circle+0x3b4>)
   136a6:	47b0      	blx	r6
   136a8:	e6c3      	b.n	13432 <glcd_draw_circle+0xe6>
	if (color) {
   136aa:	9b07      	ldr	r3, [sp, #28]
   136ac:	2b00      	cmp	r3, #0
   136ae:	d059      	beq.n	13764 <glcd_draw_circle+0x418>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   136b0:	4a14      	ldr	r2, [pc, #80]	; (13704 <glcd_draw_circle+0x3b8>)
   136b2:	2107      	movs	r1, #7
   136b4:	4690      	mov	r8, r2
   136b6:	2201      	movs	r2, #1
   136b8:	9800      	ldr	r0, [sp, #0]
   136ba:	4001      	ands	r1, r0
   136bc:	408a      	lsls	r2, r1
   136be:	4641      	mov	r1, r8
   136c0:	08c3      	lsrs	r3, r0, #3
   136c2:	01db      	lsls	r3, r3, #7
   136c4:	191b      	adds	r3, r3, r4
   136c6:	5cc9      	ldrb	r1, [r1, r3]
   136c8:	430a      	orrs	r2, r1
   136ca:	4641      	mov	r1, r8
   136cc:	54ca      	strb	r2, [r1, r3]
   136ce:	0001      	movs	r1, r0
	glcd_update_bbox(x,y,x,y);
   136d0:	000b      	movs	r3, r1
   136d2:	0022      	movs	r2, r4
   136d4:	0020      	movs	r0, r4
   136d6:	4e0a      	ldr	r6, [pc, #40]	; (13700 <glcd_draw_circle+0x3b4>)
   136d8:	47b0      	blx	r6
   136da:	e6b5      	b.n	13448 <glcd_draw_circle+0xfc>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   136dc:	9a02      	ldr	r2, [sp, #8]
   136de:	2101      	movs	r1, #1
   136e0:	4694      	mov	ip, r2
   136e2:	4a08      	ldr	r2, [pc, #32]	; (13704 <glcd_draw_circle+0x3b8>)
   136e4:	08fb      	lsrs	r3, r7, #3
   136e6:	4690      	mov	r8, r2
   136e8:	2207      	movs	r2, #7
   136ea:	403a      	ands	r2, r7
   136ec:	4091      	lsls	r1, r2
   136ee:	4642      	mov	r2, r8
   136f0:	01db      	lsls	r3, r3, #7
   136f2:	4463      	add	r3, ip
   136f4:	5cd2      	ldrb	r2, [r2, r3]
   136f6:	438a      	bics	r2, r1
   136f8:	4641      	mov	r1, r8
   136fa:	54ca      	strb	r2, [r1, r3]
   136fc:	e794      	b.n	13628 <glcd_draw_circle+0x2dc>
   136fe:	46c0      	nop			; (mov r8, r8)
   13700:	0001305d 	.word	0x0001305d
   13704:	20001ab0 	.word	0x20001ab0
   13708:	08fb      	lsrs	r3, r7, #3
   1370a:	01db      	lsls	r3, r3, #7
   1370c:	2107      	movs	r1, #7
   1370e:	469c      	mov	ip, r3
   13710:	9309      	str	r3, [sp, #36]	; 0x24
   13712:	2301      	movs	r3, #1
   13714:	4039      	ands	r1, r7
   13716:	408b      	lsls	r3, r1
   13718:	b25b      	sxtb	r3, r3
   1371a:	469a      	mov	sl, r3
   1371c:	4ba9      	ldr	r3, [pc, #676]	; (139c4 <glcd_draw_circle+0x678>)
   1371e:	9802      	ldr	r0, [sp, #8]
   13720:	4698      	mov	r8, r3
   13722:	4653      	mov	r3, sl
   13724:	43db      	mvns	r3, r3
   13726:	469a      	mov	sl, r3
   13728:	0002      	movs	r2, r0
   1372a:	4643      	mov	r3, r8
   1372c:	4651      	mov	r1, sl
   1372e:	4462      	add	r2, ip
   13730:	5c9b      	ldrb	r3, [r3, r2]
	glcd_update_bbox(x,y,x,y);
   13732:	4ea5      	ldr	r6, [pc, #660]	; (139c8 <glcd_draw_circle+0x67c>)
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   13734:	400b      	ands	r3, r1
   13736:	4641      	mov	r1, r8
   13738:	548b      	strb	r3, [r1, r2]
	glcd_update_bbox(x,y,x,y);
   1373a:	003b      	movs	r3, r7
   1373c:	0002      	movs	r2, r0
   1373e:	0039      	movs	r1, r7
   13740:	47b0      	blx	r6
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   13742:	464b      	mov	r3, r9
   13744:	2b00      	cmp	r3, #0
   13746:	da00      	bge.n	1374a <glcd_draw_circle+0x3fe>
   13748:	e667      	b.n	1341a <glcd_draw_circle+0xce>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   1374a:	9901      	ldr	r1, [sp, #4]
   1374c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1374e:	468c      	mov	ip, r1
   13750:	4463      	add	r3, ip
   13752:	001a      	movs	r2, r3
   13754:	4643      	mov	r3, r8
   13756:	4651      	mov	r1, sl
   13758:	5c9b      	ldrb	r3, [r3, r2]
   1375a:	4019      	ands	r1, r3
   1375c:	000b      	movs	r3, r1
   1375e:	4641      	mov	r1, r8
   13760:	548b      	strb	r3, [r1, r2]
   13762:	e747      	b.n	135f4 <glcd_draw_circle+0x2a8>
   13764:	4a97      	ldr	r2, [pc, #604]	; (139c4 <glcd_draw_circle+0x678>)
   13766:	9900      	ldr	r1, [sp, #0]
   13768:	4690      	mov	r8, r2
   1376a:	2207      	movs	r2, #7
   1376c:	08cb      	lsrs	r3, r1, #3
   1376e:	400a      	ands	r2, r1
   13770:	2101      	movs	r1, #1
   13772:	4091      	lsls	r1, r2
   13774:	4642      	mov	r2, r8
   13776:	01db      	lsls	r3, r3, #7
   13778:	191b      	adds	r3, r3, r4
   1377a:	5cd2      	ldrb	r2, [r2, r3]
   1377c:	438a      	bics	r2, r1
   1377e:	4641      	mov	r1, r8
   13780:	54ca      	strb	r2, [r1, r3]
   13782:	9900      	ldr	r1, [sp, #0]
   13784:	e7a4      	b.n	136d0 <glcd_draw_circle+0x384>
   13786:	08eb      	lsrs	r3, r5, #3
   13788:	01db      	lsls	r3, r3, #7
   1378a:	2107      	movs	r1, #7
   1378c:	18fa      	adds	r2, r7, r3
   1378e:	9309      	str	r3, [sp, #36]	; 0x24
   13790:	2301      	movs	r3, #1
   13792:	4029      	ands	r1, r5
   13794:	408b      	lsls	r3, r1
   13796:	b25b      	sxtb	r3, r3
   13798:	4699      	mov	r9, r3
   1379a:	4b8a      	ldr	r3, [pc, #552]	; (139c4 <glcd_draw_circle+0x678>)
	glcd_update_bbox(x,y,x,y);
   1379c:	0038      	movs	r0, r7
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   1379e:	4698      	mov	r8, r3
   137a0:	464b      	mov	r3, r9
   137a2:	43db      	mvns	r3, r3
   137a4:	4699      	mov	r9, r3
   137a6:	4643      	mov	r3, r8
   137a8:	4649      	mov	r1, r9
   137aa:	5c9b      	ldrb	r3, [r3, r2]
	glcd_update_bbox(x,y,x,y);
   137ac:	4e86      	ldr	r6, [pc, #536]	; (139c8 <glcd_draw_circle+0x67c>)
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   137ae:	400b      	ands	r3, r1
   137b0:	4641      	mov	r1, r8
   137b2:	548b      	strb	r3, [r1, r2]
	glcd_update_bbox(x,y,x,y);
   137b4:	002b      	movs	r3, r5
   137b6:	003a      	movs	r2, r7
   137b8:	0029      	movs	r1, r5
   137ba:	47b0      	blx	r6
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   137bc:	4653      	mov	r3, sl
   137be:	2b00      	cmp	r3, #0
   137c0:	da00      	bge.n	137c4 <glcd_draw_circle+0x478>
   137c2:	e647      	b.n	13454 <glcd_draw_circle+0x108>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   137c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   137c6:	4649      	mov	r1, r9
   137c8:	18e2      	adds	r2, r4, r3
   137ca:	4643      	mov	r3, r8
   137cc:	5c9b      	ldrb	r3, [r3, r2]
   137ce:	4019      	ands	r1, r3
   137d0:	000b      	movs	r3, r1
   137d2:	4641      	mov	r1, r8
   137d4:	548b      	strb	r3, [r1, r2]
   137d6:	e6ca      	b.n	1356e <glcd_draw_circle+0x222>
   137d8:	9a01      	ldr	r2, [sp, #4]
   137da:	2101      	movs	r1, #1
   137dc:	4694      	mov	ip, r2
   137de:	4a79      	ldr	r2, [pc, #484]	; (139c4 <glcd_draw_circle+0x678>)
   137e0:	08fb      	lsrs	r3, r7, #3
   137e2:	4690      	mov	r8, r2
   137e4:	2207      	movs	r2, #7
   137e6:	403a      	ands	r2, r7
   137e8:	4091      	lsls	r1, r2
   137ea:	4642      	mov	r2, r8
   137ec:	01db      	lsls	r3, r3, #7
   137ee:	4463      	add	r3, ip
   137f0:	5cd2      	ldrb	r2, [r2, r3]
   137f2:	438a      	bics	r2, r1
   137f4:	4641      	mov	r1, r8
   137f6:	54ca      	strb	r2, [r1, r3]
   137f8:	e67f      	b.n	134fa <glcd_draw_circle+0x1ae>
   137fa:	4a72      	ldr	r2, [pc, #456]	; (139c4 <glcd_draw_circle+0x678>)
   137fc:	9900      	ldr	r1, [sp, #0]
   137fe:	4690      	mov	r8, r2
   13800:	2207      	movs	r2, #7
   13802:	08cb      	lsrs	r3, r1, #3
   13804:	400a      	ands	r2, r1
   13806:	2101      	movs	r1, #1
   13808:	4091      	lsls	r1, r2
   1380a:	4642      	mov	r2, r8
   1380c:	01db      	lsls	r3, r3, #7
   1380e:	19db      	adds	r3, r3, r7
   13810:	5cd2      	ldrb	r2, [r2, r3]
   13812:	438a      	bics	r2, r1
   13814:	4641      	mov	r1, r8
   13816:	54ca      	strb	r2, [r1, r3]
   13818:	9900      	ldr	r1, [sp, #0]
   1381a:	e740      	b.n	1369e <glcd_draw_circle+0x352>
		glcd_set_pixel(x0 + y, y0 - x, color);
		glcd_set_pixel(x0 - y, y0 - x, color);
		
	}
}
   1381c:	b00b      	add	sp, #44	; 0x2c
   1381e:	bc3c      	pop	{r2, r3, r4, r5}
   13820:	4690      	mov	r8, r2
   13822:	4699      	mov	r9, r3
   13824:	46a2      	mov	sl, r4
   13826:	46ab      	mov	fp, r5
   13828:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1382a:	4653      	mov	r3, sl
   1382c:	466a      	mov	r2, sp
   1382e:	7013      	strb	r3, [r2, #0]
   13830:	7813      	ldrb	r3, [r2, #0]
   13832:	b25b      	sxtb	r3, r3
   13834:	2b00      	cmp	r3, #0
   13836:	da00      	bge.n	1383a <glcd_draw_circle+0x4ee>
   13838:	e5c2      	b.n	133c0 <glcd_draw_circle+0x74>
   1383a:	9b06      	ldr	r3, [sp, #24]
   1383c:	2b3f      	cmp	r3, #63	; 0x3f
   1383e:	d900      	bls.n	13842 <glcd_draw_circle+0x4f6>
   13840:	e5be      	b.n	133c0 <glcd_draw_circle+0x74>
   13842:	001a      	movs	r2, r3
   13844:	08de      	lsrs	r6, r3, #3
   13846:	2307      	movs	r3, #7
   13848:	2401      	movs	r4, #1
   1384a:	4013      	ands	r3, r2
   1384c:	409c      	lsls	r4, r3
	if (color) {
   1384e:	9b07      	ldr	r3, [sp, #28]
   13850:	01f6      	lsls	r6, r6, #7
   13852:	b264      	sxtb	r4, r4
   13854:	2b00      	cmp	r3, #0
   13856:	d100      	bne.n	1385a <glcd_draw_circle+0x50e>
   13858:	e0aa      	b.n	139b0 <glcd_draw_circle+0x664>
   1385a:	4b5a      	ldr	r3, [pc, #360]	; (139c4 <glcd_draw_circle+0x678>)
   1385c:	4698      	mov	r8, r3
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1385e:	4643      	mov	r3, r8
   13860:	4456      	add	r6, sl
   13862:	5d9b      	ldrb	r3, [r3, r6]
   13864:	431c      	orrs	r4, r3
   13866:	4643      	mov	r3, r8
   13868:	559c      	strb	r4, [r3, r6]
	glcd_update_bbox(x,y,x,y);
   1386a:	9906      	ldr	r1, [sp, #24]
   1386c:	4652      	mov	r2, sl
   1386e:	000b      	movs	r3, r1
   13870:	4650      	mov	r0, sl
   13872:	4c55      	ldr	r4, [pc, #340]	; (139c8 <glcd_draw_circle+0x67c>)
   13874:	47a0      	blx	r4
   13876:	e5a3      	b.n	133c0 <glcd_draw_circle+0x74>
	if (color) {
   13878:	9b07      	ldr	r3, [sp, #28]
   1387a:	2b00      	cmp	r3, #0
   1387c:	d000      	beq.n	13880 <glcd_draw_circle+0x534>
   1387e:	e086      	b.n	1398e <glcd_draw_circle+0x642>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   13880:	9a05      	ldr	r2, [sp, #20]
   13882:	2101      	movs	r1, #1
   13884:	4694      	mov	ip, r2
   13886:	4a4f      	ldr	r2, [pc, #316]	; (139c4 <glcd_draw_circle+0x678>)
   13888:	08f3      	lsrs	r3, r6, #3
   1388a:	4690      	mov	r8, r2
   1388c:	2207      	movs	r2, #7
   1388e:	4032      	ands	r2, r6
   13890:	4091      	lsls	r1, r2
   13892:	4642      	mov	r2, r8
   13894:	01db      	lsls	r3, r3, #7
   13896:	4463      	add	r3, ip
   13898:	5cd2      	ldrb	r2, [r2, r3]
   1389a:	438a      	bics	r2, r1
   1389c:	4641      	mov	r1, r8
   1389e:	54ca      	strb	r2, [r1, r3]
	glcd_update_bbox(x,y,x,y);
   138a0:	9805      	ldr	r0, [sp, #20]
   138a2:	0033      	movs	r3, r6
   138a4:	0002      	movs	r2, r0
   138a6:	0031      	movs	r1, r6
   138a8:	4c47      	ldr	r4, [pc, #284]	; (139c8 <glcd_draw_circle+0x67c>)
   138aa:	47a0      	blx	r4
   138ac:	e580      	b.n	133b0 <glcd_draw_circle+0x64>
	if (color) {
   138ae:	9b07      	ldr	r3, [sp, #28]
   138b0:	2b00      	cmp	r3, #0
   138b2:	d15a      	bne.n	1396a <glcd_draw_circle+0x61e>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   138b4:	9b05      	ldr	r3, [sp, #20]
   138b6:	4649      	mov	r1, r9
   138b8:	469c      	mov	ip, r3
   138ba:	4b42      	ldr	r3, [pc, #264]	; (139c4 <glcd_draw_circle+0x678>)
   138bc:	08e2      	lsrs	r2, r4, #3
   138be:	4698      	mov	r8, r3
   138c0:	2307      	movs	r3, #7
   138c2:	4023      	ands	r3, r4
   138c4:	4099      	lsls	r1, r3
   138c6:	000b      	movs	r3, r1
   138c8:	4641      	mov	r1, r8
   138ca:	01d2      	lsls	r2, r2, #7
   138cc:	4462      	add	r2, ip
   138ce:	5c89      	ldrb	r1, [r1, r2]
   138d0:	4399      	bics	r1, r3
   138d2:	4643      	mov	r3, r8
   138d4:	5499      	strb	r1, [r3, r2]
	glcd_update_bbox(x,y,x,y);
   138d6:	9805      	ldr	r0, [sp, #20]
   138d8:	0023      	movs	r3, r4
   138da:	0021      	movs	r1, r4
   138dc:	0002      	movs	r2, r0
   138de:	4c3a      	ldr	r4, [pc, #232]	; (139c8 <glcd_draw_circle+0x67c>)
   138e0:	47a0      	blx	r4
   138e2:	e562      	b.n	133aa <glcd_draw_circle+0x5e>
	if (color) {
   138e4:	9b07      	ldr	r3, [sp, #28]
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   138e6:	9906      	ldr	r1, [sp, #24]
	if (color) {
   138e8:	2b00      	cmp	r3, #0
   138ea:	d122      	bne.n	13932 <glcd_draw_circle+0x5e6>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   138ec:	2307      	movs	r3, #7
   138ee:	2401      	movs	r4, #1
   138f0:	400b      	ands	r3, r1
   138f2:	409c      	lsls	r4, r3
   138f4:	4b33      	ldr	r3, [pc, #204]	; (139c4 <glcd_draw_circle+0x678>)
   138f6:	b264      	sxtb	r4, r4
   138f8:	4698      	mov	r8, r3
   138fa:	43e4      	mvns	r4, r4
   138fc:	4640      	mov	r0, r8
   138fe:	08ce      	lsrs	r6, r1, #3
   13900:	01f6      	lsls	r6, r6, #7
   13902:	19aa      	adds	r2, r5, r6
   13904:	5c9b      	ldrb	r3, [r3, r2]
   13906:	4023      	ands	r3, r4
   13908:	5483      	strb	r3, [r0, r2]
	glcd_update_bbox(x,y,x,y);
   1390a:	002a      	movs	r2, r5
   1390c:	000b      	movs	r3, r1
   1390e:	0028      	movs	r0, r5
   13910:	4d2d      	ldr	r5, [pc, #180]	; (139c8 <glcd_draw_circle+0x67c>)
   13912:	47a8      	blx	r5
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   13914:	4653      	mov	r3, sl
   13916:	466a      	mov	r2, sp
   13918:	7013      	strb	r3, [r2, #0]
   1391a:	7813      	ldrb	r3, [r2, #0]
   1391c:	b25b      	sxtb	r3, r3
   1391e:	2b00      	cmp	r3, #0
   13920:	da00      	bge.n	13924 <glcd_draw_circle+0x5d8>
   13922:	e54d      	b.n	133c0 <glcd_draw_circle+0x74>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   13924:	4643      	mov	r3, r8
   13926:	4456      	add	r6, sl
   13928:	5d9b      	ldrb	r3, [r3, r6]
   1392a:	401c      	ands	r4, r3
   1392c:	4643      	mov	r3, r8
   1392e:	559c      	strb	r4, [r3, r6]
   13930:	e79b      	b.n	1386a <glcd_draw_circle+0x51e>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   13932:	2307      	movs	r3, #7
   13934:	2401      	movs	r4, #1
   13936:	400b      	ands	r3, r1
   13938:	409c      	lsls	r4, r3
   1393a:	4b22      	ldr	r3, [pc, #136]	; (139c4 <glcd_draw_circle+0x678>)
   1393c:	08ce      	lsrs	r6, r1, #3
   1393e:	4698      	mov	r8, r3
   13940:	4640      	mov	r0, r8
   13942:	01f6      	lsls	r6, r6, #7
   13944:	19aa      	adds	r2, r5, r6
   13946:	5c9b      	ldrb	r3, [r3, r2]
   13948:	b264      	sxtb	r4, r4
   1394a:	4323      	orrs	r3, r4
   1394c:	5483      	strb	r3, [r0, r2]
	glcd_update_bbox(x,y,x,y);
   1394e:	002a      	movs	r2, r5
   13950:	000b      	movs	r3, r1
   13952:	0028      	movs	r0, r5
   13954:	4d1c      	ldr	r5, [pc, #112]	; (139c8 <glcd_draw_circle+0x67c>)
   13956:	47a8      	blx	r5
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   13958:	4653      	mov	r3, sl
   1395a:	466a      	mov	r2, sp
   1395c:	7013      	strb	r3, [r2, #0]
   1395e:	7813      	ldrb	r3, [r2, #0]
   13960:	b25b      	sxtb	r3, r3
   13962:	2b00      	cmp	r3, #0
   13964:	da00      	bge.n	13968 <glcd_draw_circle+0x61c>
   13966:	e52b      	b.n	133c0 <glcd_draw_circle+0x74>
   13968:	e779      	b.n	1385e <glcd_draw_circle+0x512>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1396a:	9a05      	ldr	r2, [sp, #20]
   1396c:	4649      	mov	r1, r9
   1396e:	4694      	mov	ip, r2
   13970:	4a14      	ldr	r2, [pc, #80]	; (139c4 <glcd_draw_circle+0x678>)
   13972:	08e3      	lsrs	r3, r4, #3
   13974:	4690      	mov	r8, r2
   13976:	2207      	movs	r2, #7
   13978:	4022      	ands	r2, r4
   1397a:	4091      	lsls	r1, r2
   1397c:	000a      	movs	r2, r1
   1397e:	4641      	mov	r1, r8
   13980:	01db      	lsls	r3, r3, #7
   13982:	4463      	add	r3, ip
   13984:	5cc9      	ldrb	r1, [r1, r3]
   13986:	430a      	orrs	r2, r1
   13988:	4641      	mov	r1, r8
   1398a:	54ca      	strb	r2, [r1, r3]
   1398c:	e7a3      	b.n	138d6 <glcd_draw_circle+0x58a>
   1398e:	9a05      	ldr	r2, [sp, #20]
   13990:	2107      	movs	r1, #7
   13992:	4694      	mov	ip, r2
   13994:	4a0b      	ldr	r2, [pc, #44]	; (139c4 <glcd_draw_circle+0x678>)
   13996:	4031      	ands	r1, r6
   13998:	4690      	mov	r8, r2
   1399a:	2201      	movs	r2, #1
   1399c:	408a      	lsls	r2, r1
   1399e:	4641      	mov	r1, r8
   139a0:	08f3      	lsrs	r3, r6, #3
   139a2:	01db      	lsls	r3, r3, #7
   139a4:	4463      	add	r3, ip
   139a6:	5cc9      	ldrb	r1, [r1, r3]
   139a8:	430a      	orrs	r2, r1
   139aa:	4641      	mov	r1, r8
   139ac:	54ca      	strb	r2, [r1, r3]
   139ae:	e777      	b.n	138a0 <glcd_draw_circle+0x554>
   139b0:	4b04      	ldr	r3, [pc, #16]	; (139c4 <glcd_draw_circle+0x678>)
   139b2:	43e4      	mvns	r4, r4
   139b4:	4698      	mov	r8, r3
   139b6:	e7b5      	b.n	13924 <glcd_draw_circle+0x5d8>
   139b8:	4b02      	ldr	r3, [pc, #8]	; (139c4 <glcd_draw_circle+0x678>)
   139ba:	4698      	mov	r8, r3
   139bc:	464b      	mov	r3, r9
   139be:	43db      	mvns	r3, r3
   139c0:	4699      	mov	r9, r3
   139c2:	e6ff      	b.n	137c4 <glcd_draw_circle+0x478>
   139c4:	20001ab0 	.word	0x20001ab0
   139c8:	0001305d 	.word	0x0001305d

000139cc <glcd_write>:
void glcd_write()
{

	uint8_t bank;

	for (bank = 0; bank < GLCD_NUMBER_OF_BANKS; bank++) {
   139cc:	2200      	movs	r2, #0
{
   139ce:	b5f0      	push	{r4, r5, r6, r7, lr}
   139d0:	4657      	mov	r7, sl
   139d2:	4645      	mov	r5, r8
   139d4:	46de      	mov	lr, fp
   139d6:	464e      	mov	r6, r9
	for (bank = 0; bank < GLCD_NUMBER_OF_BANKS; bank++) {
   139d8:	4692      	mov	sl, r2
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
   139da:	4a28      	ldr	r2, [pc, #160]	; (13a7c <glcd_write+0xb0>)
{
   139dc:	b5e0      	push	{r5, r6, r7, lr}
   139de:	4690      	mov	r8, r2
   139e0:	4a27      	ldr	r2, [pc, #156]	; (13a80 <glcd_write+0xb4>)
   139e2:	2500      	movs	r5, #0
   139e4:	4693      	mov	fp, r2
   139e6:	4b27      	ldr	r3, [pc, #156]	; (13a84 <glcd_write+0xb8>)
	glcd_spi_write(c);	
   139e8:	4f27      	ldr	r7, [pc, #156]	; (13a88 <glcd_write+0xbc>)
   139ea:	4699      	mov	r9, r3
   139ec:	681b      	ldr	r3, [r3, #0]
{
   139ee:	b083      	sub	sp, #12
   139f0:	2208      	movs	r2, #8
   139f2:	4694      	mov	ip, r2
   139f4:	44ac      	add	ip, r5
   139f6:	4662      	mov	r2, ip
   139f8:	9201      	str	r2, [sp, #4]
		/* Each bank is a single row 8 bits tall */
		uint8_t column;		
		
		if (glcd_bbox_selected->y_min >= (bank+1)*8) {
   139fa:	785a      	ldrb	r2, [r3, #1]
   139fc:	4562      	cmp	r2, ip
   139fe:	da2d      	bge.n	13a5c <glcd_write+0x90>
			continue; /* Skip the entire bank */
		}
		
		if (glcd_bbox_selected->y_max < bank*8) {
   13a00:	78db      	ldrb	r3, [r3, #3]
   13a02:	42ab      	cmp	r3, r5
   13a04:	db31      	blt.n	13a6a <glcd_write+0x9e>
   13a06:	2680      	movs	r6, #128	; 0x80
   13a08:	4643      	mov	r3, r8
   13a0a:	0536      	lsls	r6, r6, #20
   13a0c:	615e      	str	r6, [r3, #20]
	glcd_command(ST7565R_PAGE_ADDRESS_SET | (0x0F & y)); /* 0x0F = 0b00001111 */
   13a0e:	20b0      	movs	r0, #176	; 0xb0
	glcd_spi_write(c);	
   13a10:	4653      	mov	r3, sl
   13a12:	4318      	orrs	r0, r3
   13a14:	47b8      	blx	r7
			break;    /* No more banks need updating */
		}
		
		glcd_set_y_address(bank);
		glcd_set_x_address(glcd_bbox_selected->x_min);
   13a16:	464b      	mov	r3, r9
   13a18:	681b      	ldr	r3, [r3, #0]
   13a1a:	781c      	ldrb	r4, [r3, #0]
   13a1c:	4643      	mov	r3, r8
   13a1e:	615e      	str	r6, [r3, #20]
	glcd_command(ST7565R_COLUMN_ADDRESS_SET_UPPER | (addr >> 4));
   13a20:	2310      	movs	r3, #16
   13a22:	0920      	lsrs	r0, r4, #4
	glcd_spi_write(c);	
   13a24:	4318      	orrs	r0, r3
   13a26:	47b8      	blx	r7
   13a28:	4643      	mov	r3, r8
   13a2a:	200f      	movs	r0, #15
   13a2c:	615e      	str	r6, [r3, #20]
   13a2e:	4020      	ands	r0, r4
   13a30:	47b8      	blx	r7

		for (column = glcd_bbox_selected->x_min; column <= glcd_bbox_selected->x_max; column++)
   13a32:	464b      	mov	r3, r9
   13a34:	681b      	ldr	r3, [r3, #0]
   13a36:	781c      	ldrb	r4, [r3, #0]
   13a38:	789a      	ldrb	r2, [r3, #2]
   13a3a:	42a2      	cmp	r2, r4
   13a3c:	d30e      	bcc.n	13a5c <glcd_write+0x90>
   13a3e:	012d      	lsls	r5, r5, #4
		{
			glcd_data( glcd_buffer_selected[GLCD_NUMBER_OF_COLS * bank + column] );
   13a40:	465b      	mov	r3, fp
   13a42:	681b      	ldr	r3, [r3, #0]
   13a44:	191b      	adds	r3, r3, r4
   13a46:	5d58      	ldrb	r0, [r3, r5]
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
   13a48:	4643      	mov	r3, r8
   13a4a:	619e      	str	r6, [r3, #24]
	glcd_spi_write(c);	
   13a4c:	47b8      	blx	r7
		for (column = glcd_bbox_selected->x_min; column <= glcd_bbox_selected->x_max; column++)
   13a4e:	464b      	mov	r3, r9
   13a50:	681b      	ldr	r3, [r3, #0]
   13a52:	3401      	adds	r4, #1
   13a54:	789a      	ldrb	r2, [r3, #2]
   13a56:	b2e4      	uxtb	r4, r4
   13a58:	42a2      	cmp	r2, r4
   13a5a:	d2f1      	bcs.n	13a40 <glcd_write+0x74>
	for (bank = 0; bank < GLCD_NUMBER_OF_BANKS; bank++) {
   13a5c:	4652      	mov	r2, sl
   13a5e:	3201      	adds	r2, #1
   13a60:	b2d2      	uxtb	r2, r2
   13a62:	4692      	mov	sl, r2
   13a64:	9d01      	ldr	r5, [sp, #4]
   13a66:	2a10      	cmp	r2, #16
   13a68:	d1c2      	bne.n	139f0 <glcd_write+0x24>
		}
	}

	glcd_reset_bbox();
   13a6a:	4b08      	ldr	r3, [pc, #32]	; (13a8c <glcd_write+0xc0>)
   13a6c:	4798      	blx	r3

}
   13a6e:	b003      	add	sp, #12
   13a70:	bc3c      	pop	{r2, r3, r4, r5}
   13a72:	4690      	mov	r8, r2
   13a74:	4699      	mov	r9, r3
   13a76:	46a2      	mov	sl, r4
   13a78:	46ab      	mov	fp, r5
   13a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13a7c:	40002800 	.word	0x40002800
   13a80:	20001eb0 	.word	0x20001eb0
   13a84:	20001eb4 	.word	0x20001eb4
   13a88:	00013021 	.word	0x00013021
   13a8c:	000130bd 	.word	0x000130bd

00013a90 <glcd_ST7565R_init>:

void glcd_ST7565R_init(void) {
   13a90:	b570      	push	{r4, r5, r6, lr}
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
   13a92:	2680      	movs	r6, #128	; 0x80
   13a94:	4d0f      	ldr	r5, [pc, #60]	; (13ad4 <glcd_ST7565R_init+0x44>)
   13a96:	0536      	lsls	r6, r6, #20
	glcd_spi_write(c);	
   13a98:	4c0f      	ldr	r4, [pc, #60]	; (13ad8 <glcd_ST7565R_init+0x48>)
   13a9a:	616e      	str	r6, [r5, #20]
   13a9c:	20a0      	movs	r0, #160	; 0xa0
   13a9e:	47a0      	blx	r4
   13aa0:	616e      	str	r6, [r5, #20]
   13aa2:	20ae      	movs	r0, #174	; 0xae
   13aa4:	47a0      	blx	r4
   13aa6:	616e      	str	r6, [r5, #20]
   13aa8:	20c8      	movs	r0, #200	; 0xc8
   13aaa:	47a0      	blx	r4
   13aac:	616e      	str	r6, [r5, #20]
   13aae:	20a2      	movs	r0, #162	; 0xa2
   13ab0:	47a0      	blx	r4
   13ab2:	616e      	str	r6, [r5, #20]
   13ab4:	202f      	movs	r0, #47	; 0x2f
   13ab6:	47a0      	blx	r4
   13ab8:	616e      	str	r6, [r5, #20]
   13aba:	2026      	movs	r0, #38	; 0x26
   13abc:	47a0      	blx	r4
   13abe:	616e      	str	r6, [r5, #20]
   13ac0:	2081      	movs	r0, #129	; 0x81
   13ac2:	47a0      	blx	r4
   13ac4:	616e      	str	r6, [r5, #20]
   13ac6:	2014      	movs	r0, #20
   13ac8:	47a0      	blx	r4
   13aca:	616e      	str	r6, [r5, #20]
   13acc:	20af      	movs	r0, #175	; 0xaf
   13ace:	47a0      	blx	r4
	glcd_set_contrast(20); /* Set contrast, value experimentally determined, value 0 to 63 */
	glcd_command(0xaf); /* Display on */

#endif

}
   13ad0:	bd70      	pop	{r4, r5, r6, pc}
   13ad2:	46c0      	nop			; (mov r8, r8)
   13ad4:	40002800 	.word	0x40002800
   13ad8:	00013021 	.word	0x00013021

00013adc <glcd_draw_char_xy>:
	font_current.end_char = end_char;
	font_current.table_type = type; /* Only supports MikroElektronika generated format at the moment */
}

uint8_t glcd_draw_char_xy(uint8_t x, uint8_t y, char c)
{
   13adc:	b5f0      	push	{r4, r5, r6, r7, lr}
   13ade:	46de      	mov	lr, fp
   13ae0:	4657      	mov	r7, sl
   13ae2:	464e      	mov	r6, r9
   13ae4:	4645      	mov	r5, r8
   13ae6:	b5e0      	push	{r5, r6, r7, lr}
	if (c < font_current.start_char || c > font_current.end_char) {
   13ae8:	4bb1      	ldr	r3, [pc, #708]	; (13db0 <glcd_draw_char_xy+0x2d4>)
{
   13aea:	b08f      	sub	sp, #60	; 0x3c
   13aec:	9202      	str	r2, [sp, #8]
	if (c < font_current.start_char || c > font_current.end_char) {
   13aee:	4699      	mov	r9, r3
   13af0:	799b      	ldrb	r3, [r3, #6]
{
   13af2:	468b      	mov	fp, r1
   13af4:	4682      	mov	sl, r0
   13af6:	0011      	movs	r1, r2
	if (c < font_current.start_char || c > font_current.end_char) {
   13af8:	4293      	cmp	r3, r2
   13afa:	d83c      	bhi.n	13b76 <glcd_draw_char_xy+0x9a>
   13afc:	464a      	mov	r2, r9
   13afe:	79d2      	ldrb	r2, [r2, #7]
   13b00:	428a      	cmp	r2, r1
   13b02:	d338      	bcc.n	13b76 <glcd_draw_char_xy+0x9a>
		c = '.';
	}
	
	if (font_current.table_type == STANG) {
   13b04:	464a      	mov	r2, r9
   13b06:	7a12      	ldrb	r2, [r2, #8]
   13b08:	2a00      	cmp	r2, #0
   13b0a:	d13a      	bne.n	13b82 <glcd_draw_char_xy+0xa6>
		/* Font table in Pascal Stang format (single byte height with with no width specifier) */
		/* Maximum height of 8 bits only */
			
		uint8_t i;
		for ( i = 0; i < font_current.width; i++ ) {
   13b0c:	464a      	mov	r2, r9
   13b0e:	7917      	ldrb	r7, [r2, #4]
   13b10:	4652      	mov	r2, sl
   13b12:	9203      	str	r2, [sp, #12]
   13b14:	2200      	movs	r2, #0
   13b16:	9201      	str	r2, [sp, #4]
   13b18:	2f00      	cmp	r7, #0
   13b1a:	d037      	beq.n	13b8c <glcd_draw_char_xy+0xb0>
					return 0;
				}
				if (dat & (1<<j)) {
					glcd_set_pixel(x+i,y+j,BLACK);
				} else {
					glcd_set_pixel(x+i,y+j,WHITE);
   13b1c:	003a      	movs	r2, r7
   13b1e:	4657      	mov	r7, sl
			uint8_t dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
   13b20:	9902      	ldr	r1, [sp, #8]
   13b22:	9801      	ldr	r0, [sp, #4]
   13b24:	1acb      	subs	r3, r1, r3
   13b26:	435a      	muls	r2, r3
   13b28:	464b      	mov	r3, r9
   13b2a:	4684      	mov	ip, r0
   13b2c:	681b      	ldr	r3, [r3, #0]
   13b2e:	4463      	add	r3, ip
   13b30:	5c9b      	ldrb	r3, [r3, r2]
   13b32:	4698      	mov	r8, r3
   13b34:	9b03      	ldr	r3, [sp, #12]
   13b36:	4463      	add	r3, ip
   13b38:	2b7f      	cmp	r3, #127	; 0x7f
   13b3a:	dc27      	bgt.n	13b8c <glcd_draw_char_xy+0xb0>
   13b3c:	465e      	mov	r6, fp
				if (dat & (1<<j)) {
   13b3e:	2301      	movs	r3, #1
   13b40:	3608      	adds	r6, #8
   13b42:	b2f6      	uxtb	r6, r6
			uint8_t dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
   13b44:	465c      	mov	r4, fp
   13b46:	2500      	movs	r5, #0
				if (dat & (1<<j)) {
   13b48:	469a      	mov	sl, r3
   13b4a:	e009      	b.n	13b60 <glcd_draw_char_xy+0x84>
					glcd_set_pixel(x+i,y+j,WHITE);
   13b4c:	2200      	movs	r2, #0
					glcd_set_pixel(x+i,y+j,BLACK);
   13b4e:	0021      	movs	r1, r4
   13b50:	3401      	adds	r4, #1
   13b52:	0038      	movs	r0, r7
   13b54:	4b97      	ldr	r3, [pc, #604]	; (13db4 <glcd_draw_char_xy+0x2d8>)
   13b56:	b2e4      	uxtb	r4, r4
   13b58:	4798      	blx	r3
   13b5a:	3501      	adds	r5, #1
			for (j = 0; j < 8; j++) {
   13b5c:	42b4      	cmp	r4, r6
   13b5e:	d01e      	beq.n	13b9e <glcd_draw_char_xy+0xc2>
				if (x+i >= GLCD_LCD_WIDTH || y+j >= GLCD_LCD_HEIGHT) {
   13b60:	465b      	mov	r3, fp
   13b62:	195b      	adds	r3, r3, r5
   13b64:	2b3f      	cmp	r3, #63	; 0x3f
   13b66:	d811      	bhi.n	13b8c <glcd_draw_char_xy+0xb0>
				if (dat & (1<<j)) {
   13b68:	4643      	mov	r3, r8
   13b6a:	4652      	mov	r2, sl
   13b6c:	412b      	asrs	r3, r5
   13b6e:	421a      	tst	r2, r3
   13b70:	d0ec      	beq.n	13b4c <glcd_draw_char_xy+0x70>
					glcd_set_pixel(x+i,y+j,BLACK);
   13b72:	2201      	movs	r2, #1
   13b74:	e7eb      	b.n	13b4e <glcd_draw_char_xy+0x72>
		c = '.';
   13b76:	222e      	movs	r2, #46	; 0x2e
   13b78:	9202      	str	r2, [sp, #8]
	if (font_current.table_type == STANG) {
   13b7a:	464a      	mov	r2, r9
   13b7c:	7a12      	ldrb	r2, [r2, #8]
   13b7e:	2a00      	cmp	r2, #0
   13b80:	d0c4      	beq.n	13b0c <glcd_draw_char_xy+0x30>
		
		/* always return how many pixels of width were written */
		/* here for "stang" format fonts, it is always fixed */
		return font_current.width;
		
	} else if (font_current.table_type == MIKRO) {
   13b82:	2a01      	cmp	r2, #1
   13b84:	d019      	beq.n	13bba <glcd_draw_char_xy+0xde>
				}									
			}				
		}
		return var_width;	
	
	} else if (font_current.table_type == GLCD_UTILS) {
   13b86:	2a02      	cmp	r2, #2
   13b88:	d100      	bne.n	13b8c <glcd_draw_char_xy+0xb0>
   13b8a:	e0fc      	b.n	13d86 <glcd_draw_char_xy+0x2aa>
		for ( i = 0; i < font_current.width; i++ ) {
   13b8c:	2700      	movs	r7, #0
		/* Don't recognise the font table */
		return 0;
		
	}

}
   13b8e:	0038      	movs	r0, r7
   13b90:	b00f      	add	sp, #60	; 0x3c
   13b92:	bc3c      	pop	{r2, r3, r4, r5}
   13b94:	4690      	mov	r8, r2
   13b96:	4699      	mov	r9, r3
   13b98:	46a2      	mov	sl, r4
   13b9a:	46ab      	mov	fp, r5
   13b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for ( i = 0; i < font_current.width; i++ ) {
   13b9e:	464a      	mov	r2, r9
   13ba0:	9b01      	ldr	r3, [sp, #4]
   13ba2:	3701      	adds	r7, #1
   13ba4:	3301      	adds	r3, #1
   13ba6:	b2db      	uxtb	r3, r3
   13ba8:	9301      	str	r3, [sp, #4]
   13baa:	7912      	ldrb	r2, [r2, #4]
   13bac:	b2ff      	uxtb	r7, r7
   13bae:	429a      	cmp	r2, r3
   13bb0:	d800      	bhi.n	13bb4 <glcd_draw_char_xy+0xd8>
   13bb2:	e21f      	b.n	13ff4 <glcd_draw_char_xy+0x518>
   13bb4:	464b      	mov	r3, r9
   13bb6:	799b      	ldrb	r3, [r3, #6]
   13bb8:	e7b2      	b.n	13b20 <glcd_draw_char_xy+0x44>
		if ((font_current.height % 8) > 0){
   13bba:	464a      	mov	r2, r9
   13bbc:	7952      	ldrb	r2, [r2, #5]
			bytes_high = (font_current.height / 8);
   13bbe:	08d1      	lsrs	r1, r2, #3
   13bc0:	9101      	str	r1, [sp, #4]
		if ((font_current.height % 8) > 0){
   13bc2:	0751      	lsls	r1, r2, #29
   13bc4:	d002      	beq.n	13bcc <glcd_draw_char_xy+0xf0>
			bytes_high = (font_current.height / 8) + 1;
   13bc6:	08d2      	lsrs	r2, r2, #3
   13bc8:	3201      	adds	r2, #1
   13bca:	9201      	str	r2, [sp, #4]
		bytes_per_char = font_current.width * bytes_high + 1; /* The +1 is the width byte at the start */
   13bcc:	464a      	mov	r2, r9
   13bce:	9901      	ldr	r1, [sp, #4]
   13bd0:	7912      	ldrb	r2, [r2, #4]
   13bd2:	434a      	muls	r2, r1
		p = font_current.font_table + (c - font_current.start_char) * bytes_per_char;
   13bd4:	9902      	ldr	r1, [sp, #8]
		bytes_per_char = font_current.width * bytes_high + 1; /* The +1 is the width byte at the start */
   13bd6:	3201      	adds	r2, #1
		p = font_current.font_table + (c - font_current.start_char) * bytes_per_char;
   13bd8:	1acb      	subs	r3, r1, r3
   13bda:	b2d2      	uxtb	r2, r2
   13bdc:	435a      	muls	r2, r3
   13bde:	464b      	mov	r3, r9
   13be0:	681b      	ldr	r3, [r3, #0]
   13be2:	469c      	mov	ip, r3
   13be4:	4462      	add	r2, ip
		var_width = *p;
   13be6:	7817      	ldrb	r7, [r2, #0]
		for ( i = 0; i < var_width; i++ ) {
   13be8:	2f00      	cmp	r7, #0
   13bea:	d0cf      	beq.n	13b8c <glcd_draw_char_xy+0xb0>
   13bec:	9202      	str	r2, [sp, #8]
   13bee:	4652      	mov	r2, sl
   13bf0:	1e7b      	subs	r3, r7, #1
   13bf2:	3201      	adds	r2, #1
   13bf4:	b2db      	uxtb	r3, r3
   13bf6:	189b      	adds	r3, r3, r2
   13bf8:	9305      	str	r3, [sp, #20]
   13bfa:	465b      	mov	r3, fp
   13bfc:	9a01      	ldr	r2, [sp, #4]
   13bfe:	3b01      	subs	r3, #1
   13c00:	00d2      	lsls	r2, r2, #3
   13c02:	189b      	adds	r3, r3, r2
   13c04:	b2db      	uxtb	r3, r3
   13c06:	9303      	str	r3, [sp, #12]
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   13c08:	9706      	str	r7, [sp, #24]
			for ( j = 0; j < bytes_high; j++ ) {
   13c0a:	9b01      	ldr	r3, [sp, #4]
   13c0c:	2b00      	cmp	r3, #0
   13c0e:	d100      	bne.n	13c12 <glcd_draw_char_xy+0x136>
   13c10:	e201      	b.n	14016 <glcd_draw_char_xy+0x53a>
				uint8_t dat = *( p + i*bytes_high + j );
   13c12:	9b02      	ldr	r3, [sp, #8]
   13c14:	785f      	ldrb	r7, [r3, #1]
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
   13c16:	4653      	mov	r3, sl
   13c18:	2b7f      	cmp	r3, #127	; 0x7f
   13c1a:	dcb7      	bgt.n	13b8c <glcd_draw_char_xy+0xb0>
   13c1c:	465b      	mov	r3, fp
   13c1e:	2b3f      	cmp	r3, #63	; 0x3f
   13c20:	dcb4      	bgt.n	13b8c <glcd_draw_char_xy+0xb0>
   13c22:	465b      	mov	r3, fp
   13c24:	1dde      	adds	r6, r3, #7
   13c26:	9b02      	ldr	r3, [sp, #8]
   13c28:	465c      	mov	r4, fp
   13c2a:	4698      	mov	r8, r3
   13c2c:	2500      	movs	r5, #0
   13c2e:	b2f6      	uxtb	r6, r6
					if ((j*8 + bit) >= font_current.height) {
   13c30:	464b      	mov	r3, r9
   13c32:	795b      	ldrb	r3, [r3, #5]
   13c34:	42ab      	cmp	r3, r5
   13c36:	dd0a      	ble.n	13c4e <glcd_draw_char_xy+0x172>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   13c38:	466a      	mov	r2, sp
   13c3a:	4653      	mov	r3, sl
   13c3c:	7413      	strb	r3, [r2, #16]
   13c3e:	b2e1      	uxtb	r1, r4
   13c40:	7c10      	ldrb	r0, [r2, #16]
					if (dat & (1<<bit)) {
   13c42:	07fb      	lsls	r3, r7, #31
   13c44:	d500      	bpl.n	13c48 <glcd_draw_char_xy+0x16c>
   13c46:	e18c      	b.n	13f62 <glcd_draw_char_xy+0x486>
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   13c48:	2200      	movs	r2, #0
   13c4a:	4b5a      	ldr	r3, [pc, #360]	; (13db4 <glcd_draw_char_xy+0x2d8>)
   13c4c:	4798      	blx	r3
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
   13c4e:	2c3f      	cmp	r4, #63	; 0x3f
   13c50:	d09c      	beq.n	13b8c <glcd_draw_char_xy+0xb0>
					if ((j*8 + bit) >= font_current.height) {
   13c52:	464b      	mov	r3, r9
   13c54:	795a      	ldrb	r2, [r3, #5]
   13c56:	1c6b      	adds	r3, r5, #1
   13c58:	429a      	cmp	r2, r3
   13c5a:	dd0b      	ble.n	13c74 <glcd_draw_char_xy+0x198>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   13c5c:	466a      	mov	r2, sp
   13c5e:	4653      	mov	r3, sl
   13c60:	1fb1      	subs	r1, r6, #6
   13c62:	7413      	strb	r3, [r2, #16]
   13c64:	b2c9      	uxtb	r1, r1
   13c66:	7c10      	ldrb	r0, [r2, #16]
					if (dat & (1<<bit)) {
   13c68:	07bb      	lsls	r3, r7, #30
   13c6a:	d500      	bpl.n	13c6e <glcd_draw_char_xy+0x192>
   13c6c:	e182      	b.n	13f74 <glcd_draw_char_xy+0x498>
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   13c6e:	2200      	movs	r2, #0
   13c70:	4b50      	ldr	r3, [pc, #320]	; (13db4 <glcd_draw_char_xy+0x2d8>)
   13c72:	4798      	blx	r3
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
   13c74:	2c3e      	cmp	r4, #62	; 0x3e
   13c76:	d100      	bne.n	13c7a <glcd_draw_char_xy+0x19e>
   13c78:	e788      	b.n	13b8c <glcd_draw_char_xy+0xb0>
					if ((j*8 + bit) >= font_current.height) {
   13c7a:	464b      	mov	r3, r9
   13c7c:	795a      	ldrb	r2, [r3, #5]
   13c7e:	1cab      	adds	r3, r5, #2
   13c80:	429a      	cmp	r2, r3
   13c82:	dd0b      	ble.n	13c9c <glcd_draw_char_xy+0x1c0>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   13c84:	466a      	mov	r2, sp
   13c86:	4653      	mov	r3, sl
   13c88:	1f71      	subs	r1, r6, #5
   13c8a:	7413      	strb	r3, [r2, #16]
   13c8c:	b2c9      	uxtb	r1, r1
   13c8e:	7c10      	ldrb	r0, [r2, #16]
					if (dat & (1<<bit)) {
   13c90:	077b      	lsls	r3, r7, #29
   13c92:	d500      	bpl.n	13c96 <glcd_draw_char_xy+0x1ba>
   13c94:	e177      	b.n	13f86 <glcd_draw_char_xy+0x4aa>
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   13c96:	2200      	movs	r2, #0
   13c98:	4b46      	ldr	r3, [pc, #280]	; (13db4 <glcd_draw_char_xy+0x2d8>)
   13c9a:	4798      	blx	r3
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
   13c9c:	2c3d      	cmp	r4, #61	; 0x3d
   13c9e:	d100      	bne.n	13ca2 <glcd_draw_char_xy+0x1c6>
   13ca0:	e774      	b.n	13b8c <glcd_draw_char_xy+0xb0>
					if ((j*8 + bit) >= font_current.height) {
   13ca2:	464b      	mov	r3, r9
   13ca4:	795a      	ldrb	r2, [r3, #5]
   13ca6:	1ceb      	adds	r3, r5, #3
   13ca8:	429a      	cmp	r2, r3
   13caa:	dd0b      	ble.n	13cc4 <glcd_draw_char_xy+0x1e8>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   13cac:	466a      	mov	r2, sp
   13cae:	4653      	mov	r3, sl
   13cb0:	1f31      	subs	r1, r6, #4
   13cb2:	7413      	strb	r3, [r2, #16]
   13cb4:	b2c9      	uxtb	r1, r1
   13cb6:	7c10      	ldrb	r0, [r2, #16]
					if (dat & (1<<bit)) {
   13cb8:	073b      	lsls	r3, r7, #28
   13cba:	d500      	bpl.n	13cbe <glcd_draw_char_xy+0x1e2>
   13cbc:	e16c      	b.n	13f98 <glcd_draw_char_xy+0x4bc>
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   13cbe:	2200      	movs	r2, #0
   13cc0:	4b3c      	ldr	r3, [pc, #240]	; (13db4 <glcd_draw_char_xy+0x2d8>)
   13cc2:	4798      	blx	r3
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
   13cc4:	2c3c      	cmp	r4, #60	; 0x3c
   13cc6:	d100      	bne.n	13cca <glcd_draw_char_xy+0x1ee>
   13cc8:	e760      	b.n	13b8c <glcd_draw_char_xy+0xb0>
					if ((j*8 + bit) >= font_current.height) {
   13cca:	464b      	mov	r3, r9
   13ccc:	795a      	ldrb	r2, [r3, #5]
   13cce:	1d2b      	adds	r3, r5, #4
   13cd0:	429a      	cmp	r2, r3
   13cd2:	dd0b      	ble.n	13cec <glcd_draw_char_xy+0x210>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   13cd4:	466a      	mov	r2, sp
   13cd6:	4653      	mov	r3, sl
   13cd8:	1ef1      	subs	r1, r6, #3
   13cda:	7413      	strb	r3, [r2, #16]
   13cdc:	b2c9      	uxtb	r1, r1
   13cde:	7c10      	ldrb	r0, [r2, #16]
					if (dat & (1<<bit)) {
   13ce0:	06fb      	lsls	r3, r7, #27
   13ce2:	d500      	bpl.n	13ce6 <glcd_draw_char_xy+0x20a>
   13ce4:	e161      	b.n	13faa <glcd_draw_char_xy+0x4ce>
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   13ce6:	2200      	movs	r2, #0
   13ce8:	4b32      	ldr	r3, [pc, #200]	; (13db4 <glcd_draw_char_xy+0x2d8>)
   13cea:	4798      	blx	r3
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
   13cec:	2c3b      	cmp	r4, #59	; 0x3b
   13cee:	d100      	bne.n	13cf2 <glcd_draw_char_xy+0x216>
   13cf0:	e74c      	b.n	13b8c <glcd_draw_char_xy+0xb0>
					if ((j*8 + bit) >= font_current.height) {
   13cf2:	464b      	mov	r3, r9
   13cf4:	795a      	ldrb	r2, [r3, #5]
   13cf6:	1d6b      	adds	r3, r5, #5
   13cf8:	429a      	cmp	r2, r3
   13cfa:	dd0b      	ble.n	13d14 <glcd_draw_char_xy+0x238>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   13cfc:	466a      	mov	r2, sp
   13cfe:	4653      	mov	r3, sl
   13d00:	1eb1      	subs	r1, r6, #2
   13d02:	7413      	strb	r3, [r2, #16]
   13d04:	b2c9      	uxtb	r1, r1
   13d06:	7c10      	ldrb	r0, [r2, #16]
					if (dat & (1<<bit)) {
   13d08:	06bb      	lsls	r3, r7, #26
   13d0a:	d500      	bpl.n	13d0e <glcd_draw_char_xy+0x232>
   13d0c:	e156      	b.n	13fbc <glcd_draw_char_xy+0x4e0>
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   13d0e:	2200      	movs	r2, #0
   13d10:	4b28      	ldr	r3, [pc, #160]	; (13db4 <glcd_draw_char_xy+0x2d8>)
   13d12:	4798      	blx	r3
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
   13d14:	2c3a      	cmp	r4, #58	; 0x3a
   13d16:	d100      	bne.n	13d1a <glcd_draw_char_xy+0x23e>
   13d18:	e738      	b.n	13b8c <glcd_draw_char_xy+0xb0>
					if ((j*8 + bit) >= font_current.height) {
   13d1a:	464b      	mov	r3, r9
   13d1c:	795a      	ldrb	r2, [r3, #5]
   13d1e:	1dab      	adds	r3, r5, #6
   13d20:	429a      	cmp	r2, r3
   13d22:	dd0b      	ble.n	13d3c <glcd_draw_char_xy+0x260>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   13d24:	466a      	mov	r2, sp
   13d26:	4653      	mov	r3, sl
   13d28:	1e71      	subs	r1, r6, #1
   13d2a:	7413      	strb	r3, [r2, #16]
   13d2c:	b2c9      	uxtb	r1, r1
   13d2e:	7c10      	ldrb	r0, [r2, #16]
					if (dat & (1<<bit)) {
   13d30:	067b      	lsls	r3, r7, #25
   13d32:	d500      	bpl.n	13d36 <glcd_draw_char_xy+0x25a>
   13d34:	e14b      	b.n	13fce <glcd_draw_char_xy+0x4f2>
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   13d36:	2200      	movs	r2, #0
   13d38:	4b1e      	ldr	r3, [pc, #120]	; (13db4 <glcd_draw_char_xy+0x2d8>)
   13d3a:	4798      	blx	r3
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
   13d3c:	2c39      	cmp	r4, #57	; 0x39
   13d3e:	d100      	bne.n	13d42 <glcd_draw_char_xy+0x266>
   13d40:	e724      	b.n	13b8c <glcd_draw_char_xy+0xb0>
					if ((j*8 + bit) >= font_current.height) {
   13d42:	464b      	mov	r3, r9
   13d44:	795a      	ldrb	r2, [r3, #5]
   13d46:	1deb      	adds	r3, r5, #7
   13d48:	429a      	cmp	r2, r3
   13d4a:	dd0b      	ble.n	13d64 <glcd_draw_char_xy+0x288>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   13d4c:	466a      	mov	r2, sp
   13d4e:	4653      	mov	r3, sl
   13d50:	7413      	strb	r3, [r2, #16]
					if (dat & (1<<bit)) {
   13d52:	09ff      	lsrs	r7, r7, #7
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   13d54:	7c10      	ldrb	r0, [r2, #16]
					if (dat & (1<<bit)) {
   13d56:	2f00      	cmp	r7, #0
   13d58:	d000      	beq.n	13d5c <glcd_draw_char_xy+0x280>
   13d5a:	e141      	b.n	13fe0 <glcd_draw_char_xy+0x504>
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   13d5c:	2200      	movs	r2, #0
   13d5e:	0031      	movs	r1, r6
   13d60:	4b14      	ldr	r3, [pc, #80]	; (13db4 <glcd_draw_char_xy+0x2d8>)
   13d62:	4798      	blx	r3
			for ( j = 0; j < bytes_high; j++ ) {
   13d64:	9b03      	ldr	r3, [sp, #12]
   13d66:	42b3      	cmp	r3, r6
   13d68:	d100      	bne.n	13d6c <glcd_draw_char_xy+0x290>
   13d6a:	e154      	b.n	14016 <glcd_draw_char_xy+0x53a>
				uint8_t dat = *( p + i*bytes_high + j );
   13d6c:	4643      	mov	r3, r8
   13d6e:	789f      	ldrb	r7, [r3, #2]
   13d70:	2301      	movs	r3, #1
   13d72:	469c      	mov	ip, r3
   13d74:	3608      	adds	r6, #8
   13d76:	3408      	adds	r4, #8
   13d78:	3508      	adds	r5, #8
   13d7a:	44e0      	add	r8, ip
   13d7c:	b2f6      	uxtb	r6, r6
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
   13d7e:	2c40      	cmp	r4, #64	; 0x40
   13d80:	d000      	beq.n	13d84 <glcd_draw_char_xy+0x2a8>
   13d82:	e755      	b.n	13c30 <glcd_draw_char_xy+0x154>
   13d84:	e702      	b.n	13b8c <glcd_draw_char_xy+0xb0>
		bytes_high = font_current.height / 8 + 1;
   13d86:	464a      	mov	r2, r9
		bytes_per_char = font_current.width * bytes_high;
   13d88:	4649      	mov	r1, r9
		bytes_high = font_current.height / 8 + 1;
   13d8a:	7952      	ldrb	r2, [r2, #5]
		bytes_per_char = font_current.width * bytes_high;
   13d8c:	790f      	ldrb	r7, [r1, #4]
		bytes_high = font_current.height / 8 + 1;
   13d8e:	08d2      	lsrs	r2, r2, #3
   13d90:	1c51      	adds	r1, r2, #1
		bytes_per_char = font_current.width * bytes_high;
   13d92:	4379      	muls	r1, r7
		p = font_current.font_table + (c - font_current.start_char) * bytes_per_char;
   13d94:	9802      	ldr	r0, [sp, #8]
   13d96:	b2c9      	uxtb	r1, r1
   13d98:	1ac3      	subs	r3, r0, r3
   13d9a:	434b      	muls	r3, r1
   13d9c:	4649      	mov	r1, r9
   13d9e:	6809      	ldr	r1, [r1, #0]
   13da0:	1e78      	subs	r0, r7, #1
   13da2:	468c      	mov	ip, r1
   13da4:	4463      	add	r3, ip
   13da6:	9303      	str	r3, [sp, #12]
		n = 0; /* How many columns back from the end */
   13da8:	2100      	movs	r1, #0
   13daa:	001c      	movs	r4, r3
   13dac:	e00a      	b.n	13dc4 <glcd_draw_char_xy+0x2e8>
   13dae:	46c0      	nop			; (mov r8, r8)
   13db0:	20001eb8 	.word	0x20001eb8
   13db4:	00013141 	.word	0x00013141
				var_width--;
   13db8:	3f01      	subs	r7, #1
   13dba:	b2ff      	uxtb	r7, r7
				if (var_width == 0) {
   13dbc:	2f00      	cmp	r7, #0
   13dbe:	d007      	beq.n	13dd0 <glcd_draw_char_xy+0x2f4>
			n++;
   13dc0:	3101      	adds	r1, #1
   13dc2:	b2c9      	uxtb	r1, r1
				offset = (font_current.width - 1 - n) * row;
   13dc4:	1a43      	subs	r3, r0, r1
   13dc6:	4353      	muls	r3, r2
				max_byte = *(p + offset);
   13dc8:	b2db      	uxtb	r3, r3
			if (max_byte == 0) {
   13dca:	5ce3      	ldrb	r3, [r4, r3]
   13dcc:	2b00      	cmp	r3, #0
   13dce:	d0f3      	beq.n	13db8 <glcd_draw_char_xy+0x2dc>
   13dd0:	465b      	mov	r3, fp
   13dd2:	3307      	adds	r3, #7
   13dd4:	b2db      	uxtb	r3, r3
   13dd6:	9305      	str	r3, [sp, #20]
   13dd8:	00d2      	lsls	r2, r2, #3
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
   13dda:	2300      	movs	r3, #0
   13ddc:	445a      	add	r2, fp
   13dde:	465c      	mov	r4, fp
   13de0:	2606      	movs	r6, #6
   13de2:	46bb      	mov	fp, r7
   13de4:	3208      	adds	r2, #8
   13de6:	920d      	str	r2, [sp, #52]	; 0x34
   13de8:	9301      	str	r3, [sp, #4]
			for ( i = 0; i < var_width; i++ ) {
   13dea:	465b      	mov	r3, fp
   13dec:	2b00      	cmp	r3, #0
   13dee:	d100      	bne.n	13df2 <glcd_draw_char_xy+0x316>
   13df0:	e102      	b.n	13ff8 <glcd_draw_char_xy+0x51c>
				dat = *( p + j*font_current.width + i );
   13df2:	464b      	mov	r3, r9
   13df4:	9a01      	ldr	r2, [sp, #4]
   13df6:	791b      	ldrb	r3, [r3, #4]
   13df8:	9903      	ldr	r1, [sp, #12]
   13dfa:	4353      	muls	r3, r2
   13dfc:	5ccf      	ldrb	r7, [r1, r3]
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
   13dfe:	4653      	mov	r3, sl
   13e00:	2b7f      	cmp	r3, #127	; 0x7f
   13e02:	dd00      	ble.n	13e06 <glcd_draw_char_xy+0x32a>
   13e04:	e6c2      	b.n	13b8c <glcd_draw_char_xy+0xb0>
   13e06:	00d3      	lsls	r3, r2, #3
   13e08:	9304      	str	r3, [sp, #16]
   13e0a:	2c3f      	cmp	r4, #63	; 0x3f
   13e0c:	dd00      	ble.n	13e10 <glcd_draw_char_xy+0x334>
   13e0e:	e6bd      	b.n	13b8c <glcd_draw_char_xy+0xb0>
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   13e10:	9a05      	ldr	r2, [sp, #20]
   13e12:	b2e3      	uxtb	r3, r4
   13e14:	9306      	str	r3, [sp, #24]
   13e16:	0013      	movs	r3, r2
   13e18:	3b06      	subs	r3, #6
   13e1a:	b2db      	uxtb	r3, r3
   13e1c:	9307      	str	r3, [sp, #28]
   13e1e:	0013      	movs	r3, r2
   13e20:	3b05      	subs	r3, #5
   13e22:	b2db      	uxtb	r3, r3
   13e24:	9308      	str	r3, [sp, #32]
   13e26:	0013      	movs	r3, r2
   13e28:	3b04      	subs	r3, #4
   13e2a:	b2db      	uxtb	r3, r3
   13e2c:	9309      	str	r3, [sp, #36]	; 0x24
   13e2e:	0013      	movs	r3, r2
   13e30:	3b03      	subs	r3, #3
   13e32:	b2db      	uxtb	r3, r3
   13e34:	930a      	str	r3, [sp, #40]	; 0x28
   13e36:	0013      	movs	r3, r2
   13e38:	3b02      	subs	r3, #2
   13e3a:	b2db      	uxtb	r3, r3
   13e3c:	930b      	str	r3, [sp, #44]	; 0x2c
   13e3e:	0013      	movs	r3, r2
   13e40:	3b01      	subs	r3, #1
   13e42:	b2db      	uxtb	r3, r3
   13e44:	930c      	str	r3, [sp, #48]	; 0x30
   13e46:	2301      	movs	r3, #1
   13e48:	4655      	mov	r5, sl
   13e4a:	4698      	mov	r8, r3
					if ((j*8 + bit) >= font_current.height) {
   13e4c:	464b      	mov	r3, r9
   13e4e:	9a04      	ldr	r2, [sp, #16]
   13e50:	795b      	ldrb	r3, [r3, #5]
   13e52:	4293      	cmp	r3, r2
   13e54:	dd07      	ble.n	13e66 <glcd_draw_char_xy+0x38a>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   13e56:	b2e8      	uxtb	r0, r5
					if (dat & (1<<bit)) {
   13e58:	07fb      	lsls	r3, r7, #31
   13e5a:	d500      	bpl.n	13e5e <glcd_draw_char_xy+0x382>
   13e5c:	e085      	b.n	13f6a <glcd_draw_char_xy+0x48e>
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   13e5e:	2200      	movs	r2, #0
   13e60:	9906      	ldr	r1, [sp, #24]
   13e62:	4b74      	ldr	r3, [pc, #464]	; (14034 <glcd_draw_char_xy+0x558>)
   13e64:	4798      	blx	r3
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
   13e66:	2c3f      	cmp	r4, #63	; 0x3f
   13e68:	d100      	bne.n	13e6c <glcd_draw_char_xy+0x390>
   13e6a:	e68f      	b.n	13b8c <glcd_draw_char_xy+0xb0>
					if ((j*8 + bit) >= font_current.height) {
   13e6c:	464b      	mov	r3, r9
   13e6e:	795a      	ldrb	r2, [r3, #5]
   13e70:	1f73      	subs	r3, r6, #5
   13e72:	429a      	cmp	r2, r3
   13e74:	dd06      	ble.n	13e84 <glcd_draw_char_xy+0x3a8>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   13e76:	b2e8      	uxtb	r0, r5
					if (dat & (1<<bit)) {
   13e78:	07bb      	lsls	r3, r7, #30
   13e7a:	d47f      	bmi.n	13f7c <glcd_draw_char_xy+0x4a0>
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   13e7c:	2200      	movs	r2, #0
   13e7e:	9907      	ldr	r1, [sp, #28]
   13e80:	4b6c      	ldr	r3, [pc, #432]	; (14034 <glcd_draw_char_xy+0x558>)
   13e82:	4798      	blx	r3
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
   13e84:	2c3e      	cmp	r4, #62	; 0x3e
   13e86:	d100      	bne.n	13e8a <glcd_draw_char_xy+0x3ae>
   13e88:	e680      	b.n	13b8c <glcd_draw_char_xy+0xb0>
					if ((j*8 + bit) >= font_current.height) {
   13e8a:	464a      	mov	r2, r9
   13e8c:	7952      	ldrb	r2, [r2, #5]
   13e8e:	1f33      	subs	r3, r6, #4
   13e90:	4293      	cmp	r3, r2
   13e92:	da06      	bge.n	13ea2 <glcd_draw_char_xy+0x3c6>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   13e94:	b2e8      	uxtb	r0, r5
					if (dat & (1<<bit)) {
   13e96:	077b      	lsls	r3, r7, #29
   13e98:	d479      	bmi.n	13f8e <glcd_draw_char_xy+0x4b2>
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   13e9a:	2200      	movs	r2, #0
   13e9c:	9908      	ldr	r1, [sp, #32]
   13e9e:	4b65      	ldr	r3, [pc, #404]	; (14034 <glcd_draw_char_xy+0x558>)
   13ea0:	4798      	blx	r3
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
   13ea2:	2c3d      	cmp	r4, #61	; 0x3d
   13ea4:	d100      	bne.n	13ea8 <glcd_draw_char_xy+0x3cc>
   13ea6:	e671      	b.n	13b8c <glcd_draw_char_xy+0xb0>
					if ((j*8 + bit) >= font_current.height) {
   13ea8:	464a      	mov	r2, r9
   13eaa:	7952      	ldrb	r2, [r2, #5]
   13eac:	1ef3      	subs	r3, r6, #3
   13eae:	4293      	cmp	r3, r2
   13eb0:	da06      	bge.n	13ec0 <glcd_draw_char_xy+0x3e4>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   13eb2:	b2e8      	uxtb	r0, r5
					if (dat & (1<<bit)) {
   13eb4:	073b      	lsls	r3, r7, #28
   13eb6:	d473      	bmi.n	13fa0 <glcd_draw_char_xy+0x4c4>
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   13eb8:	2200      	movs	r2, #0
   13eba:	9909      	ldr	r1, [sp, #36]	; 0x24
   13ebc:	4b5d      	ldr	r3, [pc, #372]	; (14034 <glcd_draw_char_xy+0x558>)
   13ebe:	4798      	blx	r3
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
   13ec0:	2c3c      	cmp	r4, #60	; 0x3c
   13ec2:	d100      	bne.n	13ec6 <glcd_draw_char_xy+0x3ea>
   13ec4:	e662      	b.n	13b8c <glcd_draw_char_xy+0xb0>
					if ((j*8 + bit) >= font_current.height) {
   13ec6:	464a      	mov	r2, r9
   13ec8:	7952      	ldrb	r2, [r2, #5]
   13eca:	1eb3      	subs	r3, r6, #2
   13ecc:	4293      	cmp	r3, r2
   13ece:	da06      	bge.n	13ede <glcd_draw_char_xy+0x402>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   13ed0:	b2e8      	uxtb	r0, r5
					if (dat & (1<<bit)) {
   13ed2:	06fb      	lsls	r3, r7, #27
   13ed4:	d46d      	bmi.n	13fb2 <glcd_draw_char_xy+0x4d6>
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   13ed6:	2200      	movs	r2, #0
   13ed8:	990a      	ldr	r1, [sp, #40]	; 0x28
   13eda:	4b56      	ldr	r3, [pc, #344]	; (14034 <glcd_draw_char_xy+0x558>)
   13edc:	4798      	blx	r3
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
   13ede:	2c3b      	cmp	r4, #59	; 0x3b
   13ee0:	d100      	bne.n	13ee4 <glcd_draw_char_xy+0x408>
   13ee2:	e653      	b.n	13b8c <glcd_draw_char_xy+0xb0>
					if ((j*8 + bit) >= font_current.height) {
   13ee4:	464a      	mov	r2, r9
   13ee6:	7952      	ldrb	r2, [r2, #5]
   13ee8:	1e73      	subs	r3, r6, #1
   13eea:	4293      	cmp	r3, r2
   13eec:	da06      	bge.n	13efc <glcd_draw_char_xy+0x420>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   13eee:	b2e8      	uxtb	r0, r5
					if (dat & (1<<bit)) {
   13ef0:	06bb      	lsls	r3, r7, #26
   13ef2:	d467      	bmi.n	13fc4 <glcd_draw_char_xy+0x4e8>
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   13ef4:	2200      	movs	r2, #0
   13ef6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13ef8:	4b4e      	ldr	r3, [pc, #312]	; (14034 <glcd_draw_char_xy+0x558>)
   13efa:	4798      	blx	r3
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
   13efc:	2c3a      	cmp	r4, #58	; 0x3a
   13efe:	d100      	bne.n	13f02 <glcd_draw_char_xy+0x426>
   13f00:	e644      	b.n	13b8c <glcd_draw_char_xy+0xb0>
					if ((j*8 + bit) >= font_current.height) {
   13f02:	464b      	mov	r3, r9
   13f04:	795b      	ldrb	r3, [r3, #5]
   13f06:	429e      	cmp	r6, r3
   13f08:	da06      	bge.n	13f18 <glcd_draw_char_xy+0x43c>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   13f0a:	b2e8      	uxtb	r0, r5
					if (dat & (1<<bit)) {
   13f0c:	067b      	lsls	r3, r7, #25
   13f0e:	d462      	bmi.n	13fd6 <glcd_draw_char_xy+0x4fa>
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   13f10:	2200      	movs	r2, #0
   13f12:	990c      	ldr	r1, [sp, #48]	; 0x30
   13f14:	4b47      	ldr	r3, [pc, #284]	; (14034 <glcd_draw_char_xy+0x558>)
   13f16:	4798      	blx	r3
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
   13f18:	2c39      	cmp	r4, #57	; 0x39
   13f1a:	d100      	bne.n	13f1e <glcd_draw_char_xy+0x442>
   13f1c:	e636      	b.n	13b8c <glcd_draw_char_xy+0xb0>
					if ((j*8 + bit) >= font_current.height) {
   13f1e:	464a      	mov	r2, r9
   13f20:	7952      	ldrb	r2, [r2, #5]
   13f22:	1c73      	adds	r3, r6, #1
   13f24:	4293      	cmp	r3, r2
   13f26:	da07      	bge.n	13f38 <glcd_draw_char_xy+0x45c>
					if (dat & (1<<bit)) {
   13f28:	09ff      	lsrs	r7, r7, #7
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   13f2a:	b2e8      	uxtb	r0, r5
					if (dat & (1<<bit)) {
   13f2c:	2f00      	cmp	r7, #0
   13f2e:	d15c      	bne.n	13fea <glcd_draw_char_xy+0x50e>
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   13f30:	2200      	movs	r2, #0
   13f32:	9905      	ldr	r1, [sp, #20]
   13f34:	4b3f      	ldr	r3, [pc, #252]	; (14034 <glcd_draw_char_xy+0x558>)
   13f36:	4798      	blx	r3
			for ( i = 0; i < var_width; i++ ) {
   13f38:	4643      	mov	r3, r8
   13f3a:	466a      	mov	r2, sp
   13f3c:	7213      	strb	r3, [r2, #8]
   13f3e:	7a13      	ldrb	r3, [r2, #8]
   13f40:	459b      	cmp	fp, r3
   13f42:	d959      	bls.n	13ff8 <glcd_draw_char_xy+0x51c>
				dat = *( p + j*font_current.width + i );
   13f44:	464b      	mov	r3, r9
   13f46:	9a01      	ldr	r2, [sp, #4]
   13f48:	791b      	ldrb	r3, [r3, #4]
   13f4a:	3501      	adds	r5, #1
   13f4c:	4353      	muls	r3, r2
   13f4e:	9a03      	ldr	r2, [sp, #12]
   13f50:	4442      	add	r2, r8
   13f52:	5cd7      	ldrb	r7, [r2, r3]
   13f54:	2301      	movs	r3, #1
   13f56:	469c      	mov	ip, r3
   13f58:	44e0      	add	r8, ip
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
   13f5a:	2d80      	cmp	r5, #128	; 0x80
   13f5c:	d000      	beq.n	13f60 <glcd_draw_char_xy+0x484>
   13f5e:	e775      	b.n	13e4c <glcd_draw_char_xy+0x370>
   13f60:	e614      	b.n	13b8c <glcd_draw_char_xy+0xb0>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   13f62:	2201      	movs	r2, #1
   13f64:	4b33      	ldr	r3, [pc, #204]	; (14034 <glcd_draw_char_xy+0x558>)
   13f66:	4798      	blx	r3
   13f68:	e671      	b.n	13c4e <glcd_draw_char_xy+0x172>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   13f6a:	2201      	movs	r2, #1
   13f6c:	9906      	ldr	r1, [sp, #24]
   13f6e:	4b31      	ldr	r3, [pc, #196]	; (14034 <glcd_draw_char_xy+0x558>)
   13f70:	4798      	blx	r3
   13f72:	e778      	b.n	13e66 <glcd_draw_char_xy+0x38a>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   13f74:	2201      	movs	r2, #1
   13f76:	4b2f      	ldr	r3, [pc, #188]	; (14034 <glcd_draw_char_xy+0x558>)
   13f78:	4798      	blx	r3
   13f7a:	e67b      	b.n	13c74 <glcd_draw_char_xy+0x198>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   13f7c:	2201      	movs	r2, #1
   13f7e:	9907      	ldr	r1, [sp, #28]
   13f80:	4b2c      	ldr	r3, [pc, #176]	; (14034 <glcd_draw_char_xy+0x558>)
   13f82:	4798      	blx	r3
   13f84:	e77e      	b.n	13e84 <glcd_draw_char_xy+0x3a8>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   13f86:	2201      	movs	r2, #1
   13f88:	4b2a      	ldr	r3, [pc, #168]	; (14034 <glcd_draw_char_xy+0x558>)
   13f8a:	4798      	blx	r3
   13f8c:	e686      	b.n	13c9c <glcd_draw_char_xy+0x1c0>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   13f8e:	2201      	movs	r2, #1
   13f90:	9908      	ldr	r1, [sp, #32]
   13f92:	4b28      	ldr	r3, [pc, #160]	; (14034 <glcd_draw_char_xy+0x558>)
   13f94:	4798      	blx	r3
   13f96:	e784      	b.n	13ea2 <glcd_draw_char_xy+0x3c6>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   13f98:	2201      	movs	r2, #1
   13f9a:	4b26      	ldr	r3, [pc, #152]	; (14034 <glcd_draw_char_xy+0x558>)
   13f9c:	4798      	blx	r3
   13f9e:	e691      	b.n	13cc4 <glcd_draw_char_xy+0x1e8>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   13fa0:	2201      	movs	r2, #1
   13fa2:	9909      	ldr	r1, [sp, #36]	; 0x24
   13fa4:	4b23      	ldr	r3, [pc, #140]	; (14034 <glcd_draw_char_xy+0x558>)
   13fa6:	4798      	blx	r3
   13fa8:	e78a      	b.n	13ec0 <glcd_draw_char_xy+0x3e4>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   13faa:	2201      	movs	r2, #1
   13fac:	4b21      	ldr	r3, [pc, #132]	; (14034 <glcd_draw_char_xy+0x558>)
   13fae:	4798      	blx	r3
   13fb0:	e69c      	b.n	13cec <glcd_draw_char_xy+0x210>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   13fb2:	2201      	movs	r2, #1
   13fb4:	990a      	ldr	r1, [sp, #40]	; 0x28
   13fb6:	4b1f      	ldr	r3, [pc, #124]	; (14034 <glcd_draw_char_xy+0x558>)
   13fb8:	4798      	blx	r3
   13fba:	e790      	b.n	13ede <glcd_draw_char_xy+0x402>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   13fbc:	2201      	movs	r2, #1
   13fbe:	4b1d      	ldr	r3, [pc, #116]	; (14034 <glcd_draw_char_xy+0x558>)
   13fc0:	4798      	blx	r3
   13fc2:	e6a7      	b.n	13d14 <glcd_draw_char_xy+0x238>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   13fc4:	2201      	movs	r2, #1
   13fc6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13fc8:	4b1a      	ldr	r3, [pc, #104]	; (14034 <glcd_draw_char_xy+0x558>)
   13fca:	4798      	blx	r3
   13fcc:	e796      	b.n	13efc <glcd_draw_char_xy+0x420>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   13fce:	2201      	movs	r2, #1
   13fd0:	4b18      	ldr	r3, [pc, #96]	; (14034 <glcd_draw_char_xy+0x558>)
   13fd2:	4798      	blx	r3
   13fd4:	e6b2      	b.n	13d3c <glcd_draw_char_xy+0x260>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   13fd6:	2201      	movs	r2, #1
   13fd8:	990c      	ldr	r1, [sp, #48]	; 0x30
   13fda:	4b16      	ldr	r3, [pc, #88]	; (14034 <glcd_draw_char_xy+0x558>)
   13fdc:	4798      	blx	r3
   13fde:	e79b      	b.n	13f18 <glcd_draw_char_xy+0x43c>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   13fe0:	2201      	movs	r2, #1
   13fe2:	0031      	movs	r1, r6
   13fe4:	4b13      	ldr	r3, [pc, #76]	; (14034 <glcd_draw_char_xy+0x558>)
   13fe6:	4798      	blx	r3
   13fe8:	e6bc      	b.n	13d64 <glcd_draw_char_xy+0x288>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   13fea:	2201      	movs	r2, #1
   13fec:	9905      	ldr	r1, [sp, #20]
   13fee:	4b11      	ldr	r3, [pc, #68]	; (14034 <glcd_draw_char_xy+0x558>)
   13ff0:	4798      	blx	r3
   13ff2:	e7a1      	b.n	13f38 <glcd_draw_char_xy+0x45c>
   13ff4:	0017      	movs	r7, r2
   13ff6:	e5ca      	b.n	13b8e <glcd_draw_char_xy+0xb2>
   13ff8:	9b01      	ldr	r3, [sp, #4]
   13ffa:	3408      	adds	r4, #8
   13ffc:	3301      	adds	r3, #1
   13ffe:	9301      	str	r3, [sp, #4]
   14000:	9b05      	ldr	r3, [sp, #20]
   14002:	3608      	adds	r6, #8
   14004:	3308      	adds	r3, #8
   14006:	b2db      	uxtb	r3, r3
   14008:	9305      	str	r3, [sp, #20]
		for ( j = 0; j < bytes_high; j++ ) {
   1400a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1400c:	42a3      	cmp	r3, r4
   1400e:	d000      	beq.n	14012 <glcd_draw_char_xy+0x536>
   14010:	e6eb      	b.n	13dea <glcd_draw_char_xy+0x30e>
   14012:	465f      	mov	r7, fp
   14014:	e5bb      	b.n	13b8e <glcd_draw_char_xy+0xb2>
   14016:	9a01      	ldr	r2, [sp, #4]
   14018:	9b02      	ldr	r3, [sp, #8]
   1401a:	4694      	mov	ip, r2
   1401c:	4463      	add	r3, ip
   1401e:	9302      	str	r3, [sp, #8]
   14020:	2301      	movs	r3, #1
   14022:	469c      	mov	ip, r3
		for ( i = 0; i < var_width; i++ ) {
   14024:	9b05      	ldr	r3, [sp, #20]
   14026:	44e2      	add	sl, ip
   14028:	4553      	cmp	r3, sl
   1402a:	d000      	beq.n	1402e <glcd_draw_char_xy+0x552>
   1402c:	e5ed      	b.n	13c0a <glcd_draw_char_xy+0x12e>
   1402e:	9f06      	ldr	r7, [sp, #24]
   14030:	e5ad      	b.n	13b8e <glcd_draw_char_xy+0xb2>
   14032:	46c0      	nop			; (mov r8, r8)
   14034:	00013141 	.word	0x00013141

00014038 <glcd_draw_string_xy>:

void glcd_draw_string_xy(uint8_t x, uint8_t y, char *c)
{
   14038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t width;

	if (y > (GLCD_LCD_HEIGHT - font_current.height - 1)) {
   1403a:	4b0c      	ldr	r3, [pc, #48]	; (1406c <glcd_draw_string_xy+0x34>)
{
   1403c:	0014      	movs	r4, r2
	if (y > (GLCD_LCD_HEIGHT - font_current.height - 1)) {
   1403e:	795a      	ldrb	r2, [r3, #5]
   14040:	233f      	movs	r3, #63	; 0x3f
{
   14042:	0005      	movs	r5, r0
   14044:	000e      	movs	r6, r1
	if (y > (GLCD_LCD_HEIGHT - font_current.height - 1)) {
   14046:	1a9b      	subs	r3, r3, r2
   14048:	4299      	cmp	r1, r3
   1404a:	dc0d      	bgt.n	14068 <glcd_draw_string_xy+0x30>
		/* Character won't fit */
		return;
	}

	while (*c) {
   1404c:	7822      	ldrb	r2, [r4, #0]
   1404e:	2a00      	cmp	r2, #0
   14050:	d00a      	beq.n	14068 <glcd_draw_string_xy+0x30>
   14052:	4f07      	ldr	r7, [pc, #28]	; (14070 <glcd_draw_string_xy+0x38>)
		width = glcd_draw_char_xy(x,y,*c);
   14054:	0028      	movs	r0, r5
   14056:	0031      	movs	r1, r6
   14058:	47b8      	blx	r7
		x += (width + 1);
		c++;
   1405a:	3401      	adds	r4, #1
		x += (width + 1);
   1405c:	1940      	adds	r0, r0, r5
	while (*c) {
   1405e:	7822      	ldrb	r2, [r4, #0]
		x += (width + 1);
   14060:	3001      	adds	r0, #1
   14062:	b2c5      	uxtb	r5, r0
	while (*c) {
   14064:	2a00      	cmp	r2, #0
   14066:	d1f5      	bne.n	14054 <glcd_draw_string_xy+0x1c>
	}		
}
   14068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1406a:	46c0      	nop			; (mov r8, r8)
   1406c:	20001eb8 	.word	0x20001eb8
   14070:	00013add 	.word	0x00013add

00014074 <glcd_tiny_set_font>:
#if defined(GLCD_DEVICE_AVR8)
void glcd_tiny_set_font(PGM_P font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#else
void glcd_tiny_set_font(const char * font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#endif
{
   14074:	b530      	push	{r4, r5, lr}
   14076:	ac03      	add	r4, sp, #12
   14078:	7825      	ldrb	r5, [r4, #0]
	font_current.font_table = font_table;
   1407a:	4c04      	ldr	r4, [pc, #16]	; (1408c <glcd_tiny_set_font+0x18>)
	font_current.width = width;
	font_current.height = height;
	font_current.start_char = start_char;
   1407c:	71a3      	strb	r3, [r4, #6]
	font_current.end_char = end_char;
	font_current.table_type = STANG;
   1407e:	2300      	movs	r3, #0
	font_current.end_char = end_char;
   14080:	71e5      	strb	r5, [r4, #7]
	font_current.font_table = font_table;
   14082:	6020      	str	r0, [r4, #0]
	font_current.width = width;
   14084:	7121      	strb	r1, [r4, #4]
	font_current.height = height;
   14086:	7162      	strb	r2, [r4, #5]
	font_current.table_type = STANG;
   14088:	7223      	strb	r3, [r4, #8]
}
   1408a:	bd30      	pop	{r4, r5, pc}
   1408c:	20001eb8 	.word	0x20001eb8

00014090 <glcd_tiny_draw_string>:
		x++;
	}
}

void glcd_tiny_draw_string(uint8_t x, uint8_t line, char *str)
{
   14090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14092:	464e      	mov	r6, r9
   14094:	4645      	mov	r5, r8
   14096:	4657      	mov	r7, sl
   14098:	46de      	mov	lr, fp
   1409a:	b5e0      	push	{r5, r6, r7, lr}
	if (font_current.height >= 8) {
   1409c:	4e40      	ldr	r6, [pc, #256]	; (141a0 <glcd_tiny_draw_string+0x110>)
{
   1409e:	0005      	movs	r5, r0
	if (font_current.height >= 8) {
   140a0:	7973      	ldrb	r3, [r6, #5]
{
   140a2:	4688      	mov	r8, r1
   140a4:	4691      	mov	r9, r2
	if (font_current.height >= 8) {
   140a6:	469a      	mov	sl, r3
   140a8:	2b07      	cmp	r3, #7
   140aa:	d82a      	bhi.n	14102 <glcd_tiny_draw_string+0x72>
   140ac:	4b3d      	ldr	r3, [pc, #244]	; (141a4 <glcd_tiny_draw_string+0x114>)
   140ae:	469b      	mov	fp, r3
		return;
	}
	while (*str) {
   140b0:	464b      	mov	r3, r9
   140b2:	781f      	ldrb	r7, [r3, #0]
   140b4:	2f00      	cmp	r7, #0
   140b6:	d024      	beq.n	14102 <glcd_tiny_draw_string+0x72>
		glcd_tiny_draw_char(x, line, *str++);
   140b8:	2301      	movs	r3, #1
   140ba:	469c      	mov	ip, r3
	if (font_current.height >= 8) {
   140bc:	4653      	mov	r3, sl
		glcd_tiny_draw_char(x, line, *str++);
   140be:	44e1      	add	r9, ip
	if (font_current.height >= 8) {
   140c0:	2b07      	cmp	r3, #7
   140c2:	d826      	bhi.n	14112 <glcd_tiny_draw_string+0x82>
	if (c < font_current.start_char || c > font_current.end_char) {
   140c4:	79b3      	ldrb	r3, [r6, #6]
   140c6:	42bb      	cmp	r3, r7
   140c8:	d821      	bhi.n	1410e <glcd_tiny_draw_string+0x7e>
   140ca:	79f3      	ldrb	r3, [r6, #7]
   140cc:	42bb      	cmp	r3, r7
   140ce:	d31e      	bcc.n	1410e <glcd_tiny_draw_string+0x7e>
	if ( line >= GLCD_LCD_HEIGHT / (font_current.height + 1) ) {
   140d0:	4653      	mov	r3, sl
   140d2:	1c5c      	adds	r4, r3, #1
   140d4:	0021      	movs	r1, r4
   140d6:	4b34      	ldr	r3, [pc, #208]	; (141a8 <glcd_tiny_draw_string+0x118>)
   140d8:	2040      	movs	r0, #64	; 0x40
   140da:	4798      	blx	r3
   140dc:	7933      	ldrb	r3, [r6, #4]
   140de:	4580      	cmp	r8, r0
   140e0:	da24      	bge.n	1412c <glcd_tiny_draw_string+0x9c>
	if ( (x+font_current.width) >= GLCD_LCD_WIDTH ) {
   140e2:	18ea      	adds	r2, r5, r3
   140e4:	2a7f      	cmp	r2, #127	; 0x7f
   140e6:	dd28      	ble.n	1413a <glcd_tiny_draw_string+0xaa>
   140e8:	3501      	adds	r5, #1
		x += (font_current.width + 1);
   140ea:	18ed      	adds	r5, r5, r3
   140ec:	b2ed      	uxtb	r5, r5
		if ((x + font_current.width + 1) > GLCD_LCD_WIDTH) {
   140ee:	18eb      	adds	r3, r5, r3
   140f0:	2b7f      	cmp	r3, #127	; 0x7f
   140f2:	dddd      	ble.n	140b0 <glcd_tiny_draw_string+0x20>
			x = 0; /* Ran out of this line */
			line++;
   140f4:	4643      	mov	r3, r8
   140f6:	3301      	adds	r3, #1
   140f8:	b2db      	uxtb	r3, r3
   140fa:	4698      	mov	r8, r3
			x = 0; /* Ran out of this line */
   140fc:	2500      	movs	r5, #0
		}
		if (line >= (GLCD_LCD_HEIGHT/(font_current.height + 1)))
   140fe:	4580      	cmp	r8, r0
   14100:	dbd6      	blt.n	140b0 <glcd_tiny_draw_string+0x20>
			return; /* Ran out of space :( */
	}
}
   14102:	bc3c      	pop	{r2, r3, r4, r5}
   14104:	4690      	mov	r8, r2
   14106:	4699      	mov	r9, r3
   14108:	46a2      	mov	sl, r4
   1410a:	46ab      	mov	fp, r5
   1410c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		c = '.';
   1410e:	272e      	movs	r7, #46	; 0x2e
   14110:	e7de      	b.n	140d0 <glcd_tiny_draw_string+0x40>
   14112:	7934      	ldrb	r4, [r6, #4]
   14114:	1c59      	adds	r1, r3, #1
   14116:	2040      	movs	r0, #64	; 0x40
   14118:	4b23      	ldr	r3, [pc, #140]	; (141a8 <glcd_tiny_draw_string+0x118>)
   1411a:	0027      	movs	r7, r4
   1411c:	4798      	blx	r3
   1411e:	3501      	adds	r5, #1
		x += (font_current.width + 1);
   14120:	192d      	adds	r5, r5, r4
   14122:	b2ed      	uxtb	r5, r5
		if ((x + font_current.width + 1) > GLCD_LCD_WIDTH) {
   14124:	19ef      	adds	r7, r5, r7
   14126:	2f7f      	cmp	r7, #127	; 0x7f
   14128:	dce4      	bgt.n	140f4 <glcd_tiny_draw_string+0x64>
   1412a:	e7e8      	b.n	140fe <glcd_tiny_draw_string+0x6e>
   1412c:	3501      	adds	r5, #1
		x += (font_current.width + 1);
   1412e:	18ed      	adds	r5, r5, r3
		if ((x + font_current.width + 1) > GLCD_LCD_WIDTH) {
   14130:	b2ed      	uxtb	r5, r5
   14132:	18ed      	adds	r5, r5, r3
   14134:	2d7f      	cmp	r5, #127	; 0x7f
   14136:	dcdd      	bgt.n	140f4 <glcd_tiny_draw_string+0x64>
   14138:	e7e3      	b.n	14102 <glcd_tiny_draw_string+0x72>
	glcd_update_bbox(x, line*(font_current.height + 1), x+font_current.width, line*(font_current.height + 1) + (font_current.height + 1));
   1413a:	4643      	mov	r3, r8
   1413c:	4641      	mov	r1, r8
   1413e:	b2e4      	uxtb	r4, r4
   14140:	3301      	adds	r3, #1
   14142:	4363      	muls	r3, r4
   14144:	434c      	muls	r4, r1
   14146:	b2db      	uxtb	r3, r3
   14148:	b2e1      	uxtb	r1, r4
   1414a:	b2d2      	uxtb	r2, r2
   1414c:	4c17      	ldr	r4, [pc, #92]	; (141ac <glcd_tiny_draw_string+0x11c>)
   1414e:	0028      	movs	r0, r5
   14150:	47a0      	blx	r4
   14152:	4643      	mov	r3, r8
	for ( i = 0; i < font_current.width; i++ ) {
   14154:	7934      	ldrb	r4, [r6, #4]
   14156:	01d9      	lsls	r1, r3, #7
   14158:	2300      	movs	r3, #0
   1415a:	2c00      	cmp	r4, #0
   1415c:	d018      	beq.n	14190 <glcd_tiny_draw_string+0x100>
		glcd_buffer_selected[x + (line * GLCD_LCD_WIDTH)] = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
   1415e:	4658      	mov	r0, fp
   14160:	79b2      	ldrb	r2, [r6, #6]
   14162:	6800      	ldr	r0, [r0, #0]
   14164:	1aba      	subs	r2, r7, r2
   14166:	4354      	muls	r4, r2
   14168:	6832      	ldr	r2, [r6, #0]
   1416a:	1840      	adds	r0, r0, r1
   1416c:	18d2      	adds	r2, r2, r3
   1416e:	5d14      	ldrb	r4, [r2, r4]
   14170:	18ea      	adds	r2, r5, r3
   14172:	b2d2      	uxtb	r2, r2
   14174:	5484      	strb	r4, [r0, r2]
	for ( i = 0; i < font_current.width; i++ ) {
   14176:	3301      	adds	r3, #1
   14178:	7934      	ldrb	r4, [r6, #4]
   1417a:	b2db      	uxtb	r3, r3
   1417c:	429c      	cmp	r4, r3
   1417e:	d8ee      	bhi.n	1415e <glcd_tiny_draw_string+0xce>
   14180:	7973      	ldrb	r3, [r6, #5]
   14182:	2040      	movs	r0, #64	; 0x40
   14184:	469a      	mov	sl, r3
   14186:	1c59      	adds	r1, r3, #1
   14188:	4b07      	ldr	r3, [pc, #28]	; (141a8 <glcd_tiny_draw_string+0x118>)
   1418a:	0027      	movs	r7, r4
   1418c:	4798      	blx	r3
   1418e:	e7c6      	b.n	1411e <glcd_tiny_draw_string+0x8e>
   14190:	7973      	ldrb	r3, [r6, #5]
   14192:	2040      	movs	r0, #64	; 0x40
   14194:	1c59      	adds	r1, r3, #1
   14196:	469a      	mov	sl, r3
   14198:	4b03      	ldr	r3, [pc, #12]	; (141a8 <glcd_tiny_draw_string+0x118>)
   1419a:	4798      	blx	r3
   1419c:	2700      	movs	r7, #0
   1419e:	e7be      	b.n	1411e <glcd_tiny_draw_string+0x8e>
   141a0:	20001eb8 	.word	0x20001eb8
   141a4:	20001eb0 	.word	0x20001eb0
   141a8:	0001c0a1 	.word	0x0001c0a1
   141ac:	0001305d 	.word	0x0001305d

000141b0 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   141b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   141b2:	4645      	mov	r5, r8
   141b4:	46de      	mov	lr, fp
   141b6:	464e      	mov	r6, r9
   141b8:	4657      	mov	r7, sl
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   141ba:	0003      	movs	r3, r0
{
   141bc:	b5e0      	push	{r5, r6, r7, lr}
	module->hw = hw;
   141be:	6019      	str	r1, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   141c0:	4bb7      	ldr	r3, [pc, #732]	; (144a0 <usart_init+0x2f0>)
{
   141c2:	b091      	sub	sp, #68	; 0x44
   141c4:	4680      	mov	r8, r0
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   141c6:	0008      	movs	r0, r1
   141c8:	4699      	mov	r9, r3
{
   141ca:	000c      	movs	r4, r1
   141cc:	0015      	movs	r5, r2
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   141ce:	4798      	blx	r3
   141d0:	0003      	movs	r3, r0
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35)
	if (sercom_index == 5) {
   141d2:	2805      	cmp	r0, #5
   141d4:	d100      	bne.n	141d8 <usart_init+0x28>
   141d6:	e109      	b.n	143ec <usart_init+0x23c>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   141d8:	0006      	movs	r6, r0
   141da:	0007      	movs	r7, r0
   141dc:	3612      	adds	r6, #18
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   141de:	2201      	movs	r2, #1
   141e0:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   141e2:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   141e4:	420a      	tst	r2, r1
   141e6:	d006      	beq.n	141f6 <usart_init+0x46>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
   141e8:	b011      	add	sp, #68	; 0x44
   141ea:	bc3c      	pop	{r2, r3, r4, r5}
   141ec:	4690      	mov	r8, r2
   141ee:	4699      	mov	r9, r3
   141f0:	46a2      	mov	sl, r4
   141f2:	46ab      	mov	fp, r5
   141f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   141f6:	6821      	ldr	r1, [r4, #0]
		return STATUS_ERR_DENIED;
   141f8:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   141fa:	0789      	lsls	r1, r1, #30
   141fc:	d4f4      	bmi.n	141e8 <usart_init+0x38>
	if (sercom_index == 5) {
   141fe:	2b05      	cmp	r3, #5
   14200:	d100      	bne.n	14204 <usart_init+0x54>
   14202:	e11c      	b.n	1443e <usart_init+0x28e>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
   14204:	40ba      	lsls	r2, r7
			MCLK->APBCMASK.reg |= mask;
   14206:	4ba7      	ldr	r3, [pc, #668]	; (144a4 <usart_init+0x2f4>)
   14208:	69d9      	ldr	r1, [r3, #28]
   1420a:	430a      	orrs	r2, r1
   1420c:	61da      	str	r2, [r3, #28]
	gclk_chan_conf.source_generator = config->generator_source;
   1420e:	272d      	movs	r7, #45	; 0x2d
   14210:	5deb      	ldrb	r3, [r5, r7]
   14212:	a90a      	add	r1, sp, #40	; 0x28
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   14214:	b2f6      	uxtb	r6, r6
	gclk_chan_conf.source_generator = config->generator_source;
   14216:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   14218:	0030      	movs	r0, r6
   1421a:	4ba3      	ldr	r3, [pc, #652]	; (144a8 <usart_init+0x2f8>)
   1421c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   1421e:	0030      	movs	r0, r6
   14220:	4ba2      	ldr	r3, [pc, #648]	; (144ac <usart_init+0x2fc>)
   14222:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   14224:	4ba2      	ldr	r3, [pc, #648]	; (144b0 <usart_init+0x300>)
   14226:	5de8      	ldrb	r0, [r5, r7]
   14228:	2100      	movs	r1, #0
   1422a:	4798      	blx	r3
	module->character_size = config->character_size;
   1422c:	4642      	mov	r2, r8
   1422e:	7aeb      	ldrb	r3, [r5, #11]
   14230:	7153      	strb	r3, [r2, #5]
	module->receiver_enabled = config->receiver_enable;
   14232:	2324      	movs	r3, #36	; 0x24
   14234:	5ceb      	ldrb	r3, [r5, r3]
   14236:	7193      	strb	r3, [r2, #6]
	module->transmitter_enabled = config->transmitter_enable;
   14238:	2325      	movs	r3, #37	; 0x25
   1423a:	5ceb      	ldrb	r3, [r5, r3]
   1423c:	71d3      	strb	r3, [r2, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
   1423e:	7eeb      	ldrb	r3, [r5, #27]
   14240:	7213      	strb	r3, [r2, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   14242:	7f2b      	ldrb	r3, [r5, #28]
   14244:	7253      	strb	r3, [r2, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
   14246:	6813      	ldr	r3, [r2, #0]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   14248:	0018      	movs	r0, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
   1424a:	469a      	mov	sl, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   1424c:	47c8      	blx	r9
	if (sercom_index == 5) {
   1424e:	2805      	cmp	r0, #5
   14250:	d100      	bne.n	14254 <usart_init+0xa4>
   14252:	e0f2      	b.n	1443a <usart_init+0x28a>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   14254:	3012      	adds	r0, #18
	uint16_t baud  = 0;
   14256:	2300      	movs	r3, #0
   14258:	ae0c      	add	r6, sp, #48	; 0x30
   1425a:	8033      	strh	r3, [r6, #0]
	switch (config->sample_rate) {
   1425c:	2380      	movs	r3, #128	; 0x80
   1425e:	8a2a      	ldrh	r2, [r5, #16]
   14260:	01db      	lsls	r3, r3, #7
   14262:	9202      	str	r2, [sp, #8]
   14264:	429a      	cmp	r2, r3
   14266:	d100      	bne.n	1426a <usart_init+0xba>
   14268:	e0f4      	b.n	14454 <usart_init+0x2a4>
   1426a:	d800      	bhi.n	1426e <usart_init+0xbe>
   1426c:	e0dc      	b.n	14428 <usart_init+0x278>
   1426e:	23c0      	movs	r3, #192	; 0xc0
   14270:	01db      	lsls	r3, r3, #7
   14272:	429a      	cmp	r2, r3
   14274:	d100      	bne.n	14278 <usart_init+0xc8>
   14276:	e0bc      	b.n	143f2 <usart_init+0x242>
   14278:	2380      	movs	r3, #128	; 0x80
   1427a:	021b      	lsls	r3, r3, #8
   1427c:	429a      	cmp	r2, r3
   1427e:	d000      	beq.n	14282 <usart_init+0xd2>
   14280:	e0e3      	b.n	1444a <usart_init+0x29a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   14282:	2303      	movs	r3, #3
   14284:	9309      	str	r3, [sp, #36]	; 0x24
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   14286:	2300      	movs	r3, #0
   14288:	9308      	str	r3, [sp, #32]
	ctrla = (uint32_t)config->data_order |
   1428a:	682b      	ldr	r3, [r5, #0]
   1428c:	9303      	str	r3, [sp, #12]
		(uint32_t)config->mux_setting |
   1428e:	68eb      	ldr	r3, [r5, #12]
   14290:	9304      	str	r3, [sp, #16]
		config->sample_adjustment |
   14292:	696b      	ldr	r3, [r5, #20]
   14294:	9305      	str	r3, [sp, #20]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   14296:	7e2b      	ldrb	r3, [r5, #24]
   14298:	9306      	str	r3, [sp, #24]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   1429a:	2326      	movs	r3, #38	; 0x26
   1429c:	5ceb      	ldrb	r3, [r5, r3]
   1429e:	9307      	str	r3, [sp, #28]
	transfer_mode = (uint32_t)config->transfer_mode;
   142a0:	686b      	ldr	r3, [r5, #4]
   142a2:	469b      	mov	fp, r3
	switch (transfer_mode)
   142a4:	2b00      	cmp	r3, #0
   142a6:	d100      	bne.n	142aa <usart_init+0xfa>
   142a8:	e0ad      	b.n	14406 <usart_init+0x256>
   142aa:	2380      	movs	r3, #128	; 0x80
   142ac:	055b      	lsls	r3, r3, #21
   142ae:	459b      	cmp	fp, r3
   142b0:	d000      	beq.n	142b4 <usart_init+0x104>
   142b2:	e0a6      	b.n	14402 <usart_init+0x252>
			if (!config->use_external_clock) {
   142b4:	2327      	movs	r3, #39	; 0x27
   142b6:	5cea      	ldrb	r2, [r5, r3]
   142b8:	2300      	movs	r3, #0
   142ba:	2a00      	cmp	r2, #0
   142bc:	d100      	bne.n	142c0 <usart_init+0x110>
   142be:	e0e4      	b.n	1448a <usart_init+0x2da>
	if(config->encoding_format_enable) {
   142c0:	7e6a      	ldrb	r2, [r5, #25]
   142c2:	2a00      	cmp	r2, #0
   142c4:	d002      	beq.n	142cc <usart_init+0x11c>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   142c6:	4651      	mov	r1, sl
   142c8:	7eaa      	ldrb	r2, [r5, #26]
   142ca:	738a      	strb	r2, [r1, #14]
	usart_hw->BAUD.reg = baud;
   142cc:	4652      	mov	r2, sl
   142ce:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
   142d0:	9a04      	ldr	r2, [sp, #16]
   142d2:	9b03      	ldr	r3, [sp, #12]
   142d4:	9f02      	ldr	r7, [sp, #8]
   142d6:	4313      	orrs	r3, r2
   142d8:	9a05      	ldr	r2, [sp, #20]
   142da:	4313      	orrs	r3, r2
   142dc:	465a      	mov	r2, fp
   142de:	4313      	orrs	r3, r2
   142e0:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   142e2:	9b06      	ldr	r3, [sp, #24]
   142e4:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
   142e6:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   142e8:	9b07      	ldr	r3, [sp, #28]
   142ea:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
   142ec:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
   142ee:	2327      	movs	r3, #39	; 0x27
   142f0:	5ceb      	ldrb	r3, [r5, r3]
   142f2:	2b00      	cmp	r3, #0
   142f4:	d101      	bne.n	142fa <usart_init+0x14a>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   142f6:	3304      	adds	r3, #4
   142f8:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   142fa:	7e6b      	ldrb	r3, [r5, #25]
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   142fc:	7f2a      	ldrb	r2, [r5, #28]
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   142fe:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   14300:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   14302:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   14304:	7f6a      	ldrb	r2, [r5, #29]
	ctrlb |= (uint32_t)config->character_size;
   14306:	7ae9      	ldrb	r1, [r5, #11]
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   14308:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   1430a:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   1430c:	2224      	movs	r2, #36	; 0x24
   1430e:	5caa      	ldrb	r2, [r5, r2]
   14310:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   14312:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   14314:	2225      	movs	r2, #37	; 0x25
   14316:	5caa      	ldrb	r2, [r5, r2]
   14318:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   1431a:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
   1431c:	7aaa      	ldrb	r2, [r5, #10]
   1431e:	430a      	orrs	r2, r1
	if (config->parity != USART_PARITY_NONE) {
   14320:	8929      	ldrh	r1, [r5, #8]
	ctrlb |= (uint32_t)config->character_size;
   14322:	431a      	orrs	r2, r3
   14324:	0010      	movs	r0, r2
	if (config->parity != USART_PARITY_NONE) {
   14326:	29ff      	cmp	r1, #255	; 0xff
   14328:	d100      	bne.n	1432c <usart_init+0x17c>
   1432a:	e098      	b.n	1445e <usart_init+0x2ae>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   1432c:	2380      	movs	r3, #128	; 0x80
   1432e:	045b      	lsls	r3, r3, #17
   14330:	431f      	orrs	r7, r3
		ctrlb |= config->parity;
   14332:	4308      	orrs	r0, r1
	if (config->run_in_standby || system_is_debugger_present()) {
   14334:	212c      	movs	r1, #44	; 0x2c
   14336:	5c69      	ldrb	r1, [r5, r1]
   14338:	2900      	cmp	r1, #0
   1433a:	d103      	bne.n	14344 <usart_init+0x194>
   1433c:	4b5d      	ldr	r3, [pc, #372]	; (144b4 <usart_init+0x304>)
   1433e:	789b      	ldrb	r3, [r3, #2]
   14340:	079b      	lsls	r3, r3, #30
   14342:	d501      	bpl.n	14348 <usart_init+0x198>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   14344:	2380      	movs	r3, #128	; 0x80
   14346:	431f      	orrs	r7, r3
   14348:	4643      	mov	r3, r8
   1434a:	681a      	ldr	r2, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
   1434c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   1434e:	2b00      	cmp	r3, #0
   14350:	d1fc      	bne.n	1434c <usart_init+0x19c>
	usart_hw->CTRLB.reg = ctrlb;
   14352:	4653      	mov	r3, sl
   14354:	6058      	str	r0, [r3, #4]
   14356:	4643      	mov	r3, r8
   14358:	681a      	ldr	r2, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
   1435a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   1435c:	2b00      	cmp	r3, #0
   1435e:	d1fc      	bne.n	1435a <usart_init+0x1aa>
	usart_hw->CTRLA.reg = ctrla;
   14360:	4652      	mov	r2, sl
   14362:	6017      	str	r7, [r2, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   14364:	af0b      	add	r7, sp, #44	; 0x2c
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   14366:	707b      	strb	r3, [r7, #1]
	config->powersave    = false;
   14368:	70fb      	strb	r3, [r7, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   1436a:	70bb      	strb	r3, [r7, #2]
	uint32_t pad_pinmuxes[] = {
   1436c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	config->mux_position = SYSTEM_PINMUX_GPIO;
   1436e:	2280      	movs	r2, #128	; 0x80
   14370:	930c      	str	r3, [sp, #48]	; 0x30
   14372:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   14374:	703a      	strb	r2, [r7, #0]
   14376:	6073      	str	r3, [r6, #4]
   14378:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1437a:	60b3      	str	r3, [r6, #8]
   1437c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   1437e:	2500      	movs	r5, #0
   14380:	60f3      	str	r3, [r6, #12]
			current_pinmux = _sercom_get_default_pad(hw, pad);
   14382:	4b4d      	ldr	r3, [pc, #308]	; (144b8 <usart_init+0x308>)
   14384:	469b      	mov	fp, r3
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   14386:	4b4d      	ldr	r3, [pc, #308]	; (144bc <usart_init+0x30c>)
   14388:	469a      	mov	sl, r3
		uint32_t current_pinmux = pad_pinmuxes[pad];
   1438a:	00ab      	lsls	r3, r5, #2
   1438c:	58f0      	ldr	r0, [r6, r3]
   1438e:	b2e9      	uxtb	r1, r5
		if (current_pinmux == PINMUX_DEFAULT) {
   14390:	2800      	cmp	r0, #0
   14392:	d033      	beq.n	143fc <usart_init+0x24c>
		if (current_pinmux != PINMUX_UNUSED) {
   14394:	1c43      	adds	r3, r0, #1
   14396:	d004      	beq.n	143a2 <usart_init+0x1f2>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   14398:	7038      	strb	r0, [r7, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   1439a:	0c00      	lsrs	r0, r0, #16
   1439c:	b2c0      	uxtb	r0, r0
   1439e:	0039      	movs	r1, r7
   143a0:	47d0      	blx	sl
   143a2:	3501      	adds	r5, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
   143a4:	2d04      	cmp	r5, #4
   143a6:	d1f0      	bne.n	1438a <usart_init+0x1da>
		module->callback[i]            = NULL;
   143a8:	4640      	mov	r0, r8
   143aa:	2218      	movs	r2, #24
   143ac:	2100      	movs	r1, #0
   143ae:	4b44      	ldr	r3, [pc, #272]	; (144c0 <usart_init+0x310>)
   143b0:	300c      	adds	r0, #12
   143b2:	4798      	blx	r3
	module->tx_buffer_ptr              = NULL;
   143b4:	2200      	movs	r2, #0
   143b6:	4643      	mov	r3, r8
	module->remaining_tx_buffer_length = 0x0000;
   143b8:	4641      	mov	r1, r8
	module->tx_buffer_ptr              = NULL;
   143ba:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   143bc:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   143be:	2300      	movs	r3, #0
   143c0:	85ca      	strh	r2, [r1, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   143c2:	858a      	strh	r2, [r1, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   143c4:	3230      	adds	r2, #48	; 0x30
   143c6:	548b      	strb	r3, [r1, r2]
	module->callback_enable_mask       = 0x00;
   143c8:	3201      	adds	r2, #1
   143ca:	548b      	strb	r3, [r1, r2]
	module->rx_status                  = STATUS_OK;
   143cc:	3201      	adds	r2, #1
   143ce:	548b      	strb	r3, [r1, r2]
	module->tx_status                  = STATUS_OK;
   143d0:	3201      	adds	r2, #1
   143d2:	548b      	strb	r3, [r1, r2]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   143d4:	6808      	ldr	r0, [r1, #0]
   143d6:	47c8      	blx	r9
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   143d8:	4b3a      	ldr	r3, [pc, #232]	; (144c4 <usart_init+0x314>)
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   143da:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   143dc:	493a      	ldr	r1, [pc, #232]	; (144c8 <usart_init+0x318>)
   143de:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   143e0:	4642      	mov	r2, r8
   143e2:	4b3a      	ldr	r3, [pc, #232]	; (144cc <usart_init+0x31c>)
   143e4:	00a4      	lsls	r4, r4, #2
   143e6:	50e2      	str	r2, [r4, r3]
	return status_code;
   143e8:	2000      	movs	r0, #0
   143ea:	e6fd      	b.n	141e8 <usart_init+0x38>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
   143ec:	2618      	movs	r6, #24
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
   143ee:	2701      	movs	r7, #1
   143f0:	e6f5      	b.n	141de <usart_init+0x2e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   143f2:	2308      	movs	r3, #8
   143f4:	9309      	str	r3, [sp, #36]	; 0x24
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   143f6:	3b07      	subs	r3, #7
   143f8:	9308      	str	r3, [sp, #32]
   143fa:	e746      	b.n	1428a <usart_init+0xda>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   143fc:	0020      	movs	r0, r4
   143fe:	47d8      	blx	fp
   14400:	e7c8      	b.n	14394 <usart_init+0x1e4>
	switch (transfer_mode)
   14402:	2300      	movs	r3, #0
   14404:	e75c      	b.n	142c0 <usart_init+0x110>
			if (config->use_external_clock) {
   14406:	2327      	movs	r3, #39	; 0x27
   14408:	5ceb      	ldrb	r3, [r5, r3]
   1440a:	2b00      	cmp	r3, #0
   1440c:	d02f      	beq.n	1446e <usart_init+0x2be>
				status_code =
   1440e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14410:	0032      	movs	r2, r6
   14412:	9300      	str	r3, [sp, #0]
   14414:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   14416:	9b08      	ldr	r3, [sp, #32]
   14418:	6a28      	ldr	r0, [r5, #32]
   1441a:	4f2d      	ldr	r7, [pc, #180]	; (144d0 <usart_init+0x320>)
   1441c:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
   1441e:	2800      	cmp	r0, #0
   14420:	d000      	beq.n	14424 <usart_init+0x274>
   14422:	e6e1      	b.n	141e8 <usart_init+0x38>
   14424:	8833      	ldrh	r3, [r6, #0]
   14426:	e74b      	b.n	142c0 <usart_init+0x110>
	switch (config->sample_rate) {
   14428:	2380      	movs	r3, #128	; 0x80
   1442a:	019b      	lsls	r3, r3, #6
   1442c:	429a      	cmp	r2, r3
   1442e:	d10c      	bne.n	1444a <usart_init+0x29a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   14430:	2310      	movs	r3, #16
   14432:	9309      	str	r3, [sp, #36]	; 0x24
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   14434:	3b0f      	subs	r3, #15
   14436:	9308      	str	r3, [sp, #32]
   14438:	e727      	b.n	1428a <usart_init+0xda>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
   1443a:	2018      	movs	r0, #24
   1443c:	e70b      	b.n	14256 <usart_init+0xa6>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
   1443e:	40ba      	lsls	r2, r7
			MCLK->APBDMASK.reg |= mask;
   14440:	4b18      	ldr	r3, [pc, #96]	; (144a4 <usart_init+0x2f4>)
   14442:	6a19      	ldr	r1, [r3, #32]
   14444:	430a      	orrs	r2, r1
   14446:	621a      	str	r2, [r3, #32]
   14448:	e6e1      	b.n	1420e <usart_init+0x5e>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   1444a:	2310      	movs	r3, #16
   1444c:	9309      	str	r3, [sp, #36]	; 0x24
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   1444e:	2300      	movs	r3, #0
   14450:	9308      	str	r3, [sp, #32]
   14452:	e71a      	b.n	1428a <usart_init+0xda>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   14454:	2308      	movs	r3, #8
   14456:	9309      	str	r3, [sp, #36]	; 0x24
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   14458:	2300      	movs	r3, #0
   1445a:	9308      	str	r3, [sp, #32]
   1445c:	e715      	b.n	1428a <usart_init+0xda>
		if(config->lin_slave_enable) {
   1445e:	7eeb      	ldrb	r3, [r5, #27]
   14460:	2b00      	cmp	r3, #0
   14462:	d100      	bne.n	14466 <usart_init+0x2b6>
   14464:	e766      	b.n	14334 <usart_init+0x184>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   14466:	2380      	movs	r3, #128	; 0x80
   14468:	04db      	lsls	r3, r3, #19
   1446a:	431f      	orrs	r7, r3
   1446c:	e762      	b.n	14334 <usart_init+0x184>
						_sercom_get_async_baud_val(config->baudrate,
   1446e:	6a2b      	ldr	r3, [r5, #32]
   14470:	b2c0      	uxtb	r0, r0
   14472:	001f      	movs	r7, r3
   14474:	4b17      	ldr	r3, [pc, #92]	; (144d4 <usart_init+0x324>)
   14476:	4798      	blx	r3
				status_code =
   14478:	9b09      	ldr	r3, [sp, #36]	; 0x24
						_sercom_get_async_baud_val(config->baudrate,
   1447a:	0001      	movs	r1, r0
				status_code =
   1447c:	9300      	str	r3, [sp, #0]
   1447e:	0032      	movs	r2, r6
   14480:	9b08      	ldr	r3, [sp, #32]
   14482:	0038      	movs	r0, r7
   14484:	4f12      	ldr	r7, [pc, #72]	; (144d0 <usart_init+0x320>)
   14486:	47b8      	blx	r7
   14488:	e7c9      	b.n	1441e <usart_init+0x26e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   1448a:	6a2b      	ldr	r3, [r5, #32]
   1448c:	b2c0      	uxtb	r0, r0
   1448e:	001f      	movs	r7, r3
   14490:	4b10      	ldr	r3, [pc, #64]	; (144d4 <usart_init+0x324>)
   14492:	4798      	blx	r3
   14494:	0032      	movs	r2, r6
   14496:	0001      	movs	r1, r0
   14498:	4b0f      	ldr	r3, [pc, #60]	; (144d8 <usart_init+0x328>)
   1449a:	0038      	movs	r0, r7
   1449c:	4798      	blx	r3
   1449e:	e7be      	b.n	1441e <usart_init+0x26e>
   144a0:	00015105 	.word	0x00015105
   144a4:	40000400 	.word	0x40000400
   144a8:	00015865 	.word	0x00015865
   144ac:	000158a5 	.word	0x000158a5
   144b0:	00014f61 	.word	0x00014f61
   144b4:	41002000 	.word	0x41002000
   144b8:	00014fa9 	.word	0x00014fa9
   144bc:	00015961 	.word	0x00015961
   144c0:	0001f06d 	.word	0x0001f06d
   144c4:	0000bdbd 	.word	0x0000bdbd
   144c8:	0000bf49 	.word	0x0000bf49
   144cc:	20001684 	.word	0x20001684
   144d0:	00014cf9 	.word	0x00014cf9
   144d4:	000158dd 	.word	0x000158dd
   144d8:	00014cd1 	.word	0x00014cd1

000144dc <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   144dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   144de:	4645      	mov	r5, r8
   144e0:	464e      	mov	r6, r9
   144e2:	46de      	mov	lr, fp
   144e4:	4657      	mov	r7, sl
   144e6:	b5e0      	push	{r5, r6, r7, lr}
   144e8:	0005      	movs	r5, r0
   144ea:	0014      	movs	r4, r2
	module->hw = hw;

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   144ec:	2202      	movs	r2, #2
	module->hw = hw;
   144ee:	6029      	str	r1, [r5, #0]
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   144f0:	680b      	ldr	r3, [r1, #0]
{
   144f2:	b087      	sub	sp, #28
   144f4:	000e      	movs	r6, r1
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   144f6:	4690      	mov	r8, r2
   144f8:	421a      	tst	r2, r3
   144fa:	d10c      	bne.n	14516 <spi_init+0x3a>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   144fc:	2701      	movs	r7, #1
   144fe:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
   14500:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   14502:	421f      	tst	r7, r3
   14504:	d100      	bne.n	14508 <spi_init+0x2c>
   14506:	e0df      	b.n	146c8 <spi_init+0x1ec>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
   14508:	b007      	add	sp, #28
   1450a:	bc3c      	pop	{r2, r3, r4, r5}
   1450c:	4690      	mov	r8, r2
   1450e:	4699      	mov	r9, r3
   14510:	46a2      	mov	sl, r4
   14512:	46ab      	mov	fp, r5
   14514:	bdf0      	pop	{r4, r5, r6, r7, pc}
		config->pinmux_pad2, config->pinmux_pad3
   14516:	6b23      	ldr	r3, [r4, #48]	; 0x30
		config->pinmux_pad0, config->pinmux_pad1,
   14518:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		config->pinmux_pad2, config->pinmux_pad3
   1451a:	4698      	mov	r8, r3
   1451c:	6b63      	ldr	r3, [r4, #52]	; 0x34
		config->pinmux_pad0, config->pinmux_pad1,
   1451e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
		config->pinmux_pad2, config->pinmux_pad3
   14520:	4699      	mov	r9, r3
		if (current_pinmux == PINMUX_DEFAULT) {
   14522:	2800      	cmp	r0, #0
   14524:	d100      	bne.n	14528 <spi_init+0x4c>
   14526:	e0bf      	b.n	146a8 <spi_init+0x1cc>
		if (current_pinmux == PINMUX_UNUSED) {
   14528:	1c43      	adds	r3, r0, #1
   1452a:	d01e      	beq.n	1456a <spi_init+0x8e>
		if ((current_pinmux & 0xFFFF) !=
   1452c:	0402      	lsls	r2, r0, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
   1452e:	0c00      	lsrs	r0, r0, #16
		if ((current_pinmux & 0xFFFF) !=
   14530:	0c13      	lsrs	r3, r2, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
   14532:	b2c0      	uxtb	r0, r0
		if ((current_pinmux & 0xFFFF) !=
   14534:	469b      	mov	fp, r3
	if (port_index < PORT_INST_NUM) {
   14536:	09c1      	lsrs	r1, r0, #7
	uint8_t group_index = (gpio_pin / 32);
   14538:	0943      	lsrs	r3, r0, #5
	if (port_index < PORT_INST_NUM) {
   1453a:	2900      	cmp	r1, #0
   1453c:	d000      	beq.n	14540 <spi_init+0x64>
   1453e:	e0be      	b.n	146be <spi_init+0x1e2>
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
   14540:	311f      	adds	r1, #31
   14542:	4001      	ands	r1, r0
   14544:	468c      	mov	ip, r1

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
   14546:	49ce      	ldr	r1, [pc, #824]	; (14880 <spi_init+0x3a4>)
   14548:	01db      	lsls	r3, r3, #7
   1454a:	468a      	mov	sl, r1
   1454c:	4661      	mov	r1, ip
   1454e:	4453      	add	r3, sl
   14550:	1859      	adds	r1, r3, r1
   14552:	3140      	adds	r1, #64	; 0x40
   14554:	7809      	ldrb	r1, [r1, #0]
   14556:	468a      	mov	sl, r1
   14558:	2101      	movs	r1, #1
   1455a:	4652      	mov	r2, sl
   1455c:	4211      	tst	r1, r2
   1455e:	d000      	beq.n	14562 <spi_init+0x86>
   14560:	e13e      	b.n	147e0 <spi_init+0x304>
   14562:	2380      	movs	r3, #128	; 0x80
   14564:	455b      	cmp	r3, fp
   14566:	d000      	beq.n	1456a <spi_init+0x8e>
   14568:	e09a      	b.n	146a0 <spi_init+0x1c4>
		if (current_pinmux == PINMUX_DEFAULT) {
   1456a:	2f00      	cmp	r7, #0
   1456c:	d100      	bne.n	14570 <spi_init+0x94>
   1456e:	e0a0      	b.n	146b2 <spi_init+0x1d6>
		if (current_pinmux == PINMUX_UNUSED) {
   14570:	1c7b      	adds	r3, r7, #1
   14572:	d019      	beq.n	145a8 <spi_init+0xcc>
		if ((current_pinmux & 0xFFFF) !=
   14574:	043a      	lsls	r2, r7, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
   14576:	0c3f      	lsrs	r7, r7, #16
		if ((current_pinmux & 0xFFFF) !=
   14578:	0c13      	lsrs	r3, r2, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
   1457a:	b2f8      	uxtb	r0, r7
		if ((current_pinmux & 0xFFFF) !=
   1457c:	469a      	mov	sl, r3
	if (port_index < PORT_INST_NUM) {
   1457e:	09c1      	lsrs	r1, r0, #7
	uint8_t group_index = (gpio_pin / 32);
   14580:	0943      	lsrs	r3, r0, #5
	if (port_index < PORT_INST_NUM) {
   14582:	2900      	cmp	r1, #0
   14584:	d000      	beq.n	14588 <spi_init+0xac>
   14586:	e09a      	b.n	146be <spi_init+0x1e2>
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
   14588:	49bd      	ldr	r1, [pc, #756]	; (14880 <spi_init+0x3a4>)
	uint32_t pin_index = (gpio_pin % 32);
   1458a:	271f      	movs	r7, #31
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
   1458c:	468c      	mov	ip, r1
   1458e:	2201      	movs	r2, #1
   14590:	01db      	lsls	r3, r3, #7
	uint32_t pin_index = (gpio_pin % 32);
   14592:	4007      	ands	r7, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
   14594:	4463      	add	r3, ip
   14596:	19d9      	adds	r1, r3, r7
   14598:	3140      	adds	r1, #64	; 0x40
   1459a:	7809      	ldrb	r1, [r1, #0]
   1459c:	420a      	tst	r2, r1
   1459e:	d000      	beq.n	145a2 <spi_init+0xc6>
   145a0:	e12e      	b.n	14800 <spi_init+0x324>
   145a2:	2380      	movs	r3, #128	; 0x80
   145a4:	4553      	cmp	r3, sl
   145a6:	d17b      	bne.n	146a0 <spi_init+0x1c4>
		if (current_pinmux == PINMUX_DEFAULT) {
   145a8:	4643      	mov	r3, r8
   145aa:	2b00      	cmp	r3, #0
   145ac:	d100      	bne.n	145b0 <spi_init+0xd4>
   145ae:	e13f      	b.n	14830 <spi_init+0x354>
		if (current_pinmux == PINMUX_UNUSED) {
   145b0:	4643      	mov	r3, r8
   145b2:	3301      	adds	r3, #1
   145b4:	d019      	beq.n	145ea <spi_init+0x10e>
		if ((current_pinmux & 0xFFFF) !=
   145b6:	4643      	mov	r3, r8
   145b8:	041a      	lsls	r2, r3, #16
   145ba:	0c13      	lsrs	r3, r2, #16
   145bc:	469a      	mov	sl, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
   145be:	4643      	mov	r3, r8
   145c0:	0c18      	lsrs	r0, r3, #16
   145c2:	b2c0      	uxtb	r0, r0
	uint8_t group_index = (gpio_pin / 32);
   145c4:	0943      	lsrs	r3, r0, #5
	if (port_index < PORT_INST_NUM) {
   145c6:	09c1      	lsrs	r1, r0, #7
   145c8:	d179      	bne.n	146be <spi_init+0x1e2>
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
   145ca:	49ad      	ldr	r1, [pc, #692]	; (14880 <spi_init+0x3a4>)
	uint32_t pin_index = (gpio_pin % 32);
   145cc:	271f      	movs	r7, #31
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
   145ce:	468c      	mov	ip, r1
   145d0:	2201      	movs	r2, #1
   145d2:	01db      	lsls	r3, r3, #7
	uint32_t pin_index = (gpio_pin % 32);
   145d4:	4007      	ands	r7, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
   145d6:	4463      	add	r3, ip
   145d8:	19d9      	adds	r1, r3, r7
   145da:	3140      	adds	r1, #64	; 0x40
   145dc:	7809      	ldrb	r1, [r1, #0]
   145de:	420a      	tst	r2, r1
   145e0:	d000      	beq.n	145e4 <spi_init+0x108>
   145e2:	e119      	b.n	14818 <spi_init+0x33c>
   145e4:	2380      	movs	r3, #128	; 0x80
		if ((current_pinmux & 0xFFFF) !=
   145e6:	459a      	cmp	sl, r3
   145e8:	d15a      	bne.n	146a0 <spi_init+0x1c4>
		if (current_pinmux == PINMUX_DEFAULT) {
   145ea:	464b      	mov	r3, r9
   145ec:	2b00      	cmp	r3, #0
   145ee:	d100      	bne.n	145f2 <spi_init+0x116>
   145f0:	e124      	b.n	1483c <spi_init+0x360>
		if (current_pinmux == PINMUX_UNUSED) {
   145f2:	464b      	mov	r3, r9
   145f4:	3301      	adds	r3, #1
   145f6:	d027      	beq.n	14648 <spi_init+0x16c>
		if ((current_pinmux & 0xFFFF) !=
   145f8:	464b      	mov	r3, r9
   145fa:	0419      	lsls	r1, r3, #16
   145fc:	0c0b      	lsrs	r3, r1, #16
   145fe:	469a      	mov	sl, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
   14600:	464b      	mov	r3, r9
   14602:	0c18      	lsrs	r0, r3, #16
   14604:	b2c0      	uxtb	r0, r0
	uint8_t group_index = (gpio_pin / 32);
   14606:	0943      	lsrs	r3, r0, #5
	if (port_index < PORT_INST_NUM) {
   14608:	09c2      	lsrs	r2, r0, #7
   1460a:	d158      	bne.n	146be <spi_init+0x1e2>
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
   1460c:	4a9c      	ldr	r2, [pc, #624]	; (14880 <spi_init+0x3a4>)
	uint32_t pin_index = (gpio_pin % 32);
   1460e:	271f      	movs	r7, #31
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
   14610:	4694      	mov	ip, r2
   14612:	01db      	lsls	r3, r3, #7
   14614:	4463      	add	r3, ip
	uint32_t pin_index = (gpio_pin % 32);
   14616:	4007      	ands	r7, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
   14618:	19da      	adds	r2, r3, r7
   1461a:	3240      	adds	r2, #64	; 0x40
   1461c:	7812      	ldrb	r2, [r2, #0]
   1461e:	4690      	mov	r8, r2
   14620:	2201      	movs	r2, #1
   14622:	4694      	mov	ip, r2
   14624:	327f      	adds	r2, #127	; 0x7f
   14626:	4691      	mov	r9, r2
   14628:	4661      	mov	r1, ip
   1462a:	4642      	mov	r2, r8
   1462c:	4211      	tst	r1, r2
   1462e:	d009      	beq.n	14644 <spi_init+0x168>
		return SYSTEM_PINMUX_GPIO;
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
   14630:	087f      	lsrs	r7, r7, #1
   14632:	19db      	adds	r3, r3, r7
   14634:	3330      	adds	r3, #48	; 0x30
   14636:	781a      	ldrb	r2, [r3, #0]
   14638:	b2d2      	uxtb	r2, r2

	if (pin_index & 1) {
   1463a:	4201      	tst	r1, r0
   1463c:	d100      	bne.n	14640 <spi_init+0x164>
   1463e:	e103      	b.n	14848 <spi_init+0x36c>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
   14640:	0913      	lsrs	r3, r2, #4
   14642:	4699      	mov	r9, r3
		if ((current_pinmux & 0xFFFF) !=
   14644:	45ca      	cmp	sl, r9
   14646:	d12b      	bne.n	146a0 <spi_init+0x1c4>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
   14648:	2011      	movs	r0, #17
   1464a:	4b8e      	ldr	r3, [pc, #568]	; (14884 <spi_init+0x3a8>)
   1464c:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
   1464e:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
   14650:	2700      	movs	r7, #0
	if (config->mode == SPI_MODE_MASTER) {
   14652:	2a01      	cmp	r2, #1
   14654:	d100      	bne.n	14658 <spi_init+0x17c>
   14656:	e127      	b.n	148a8 <spi_init+0x3cc>
	ctrla |= config->mux_setting;
   14658:	68a2      	ldr	r2, [r4, #8]
   1465a:	6863      	ldr	r3, [r4, #4]
	if (config->run_in_standby) {
   1465c:	7c61      	ldrb	r1, [r4, #17]
	ctrla |= config->mux_setting;
   1465e:	4313      	orrs	r3, r2
   14660:	68e2      	ldr	r2, [r4, #12]
   14662:	4313      	orrs	r3, r2
   14664:	433b      	orrs	r3, r7
	ctrlb |= config->character_size;
   14666:	7c22      	ldrb	r2, [r4, #16]
	if (config->run_in_standby) {
   14668:	2900      	cmp	r1, #0
   1466a:	d001      	beq.n	14670 <spi_init+0x194>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   1466c:	2180      	movs	r1, #128	; 0x80
   1466e:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
   14670:	7ca1      	ldrb	r1, [r4, #18]
   14672:	2900      	cmp	r1, #0
   14674:	d002      	beq.n	1467c <spi_init+0x1a0>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   14676:	2180      	movs	r1, #128	; 0x80
   14678:	0289      	lsls	r1, r1, #10
   1467a:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
   1467c:	7ce1      	ldrb	r1, [r4, #19]
   1467e:	2900      	cmp	r1, #0
   14680:	d002      	beq.n	14688 <spi_init+0x1ac>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   14682:	2180      	movs	r1, #128	; 0x80
   14684:	0089      	lsls	r1, r1, #2
   14686:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
   14688:	7d21      	ldrb	r1, [r4, #20]
   1468a:	2900      	cmp	r1, #0
   1468c:	d002      	beq.n	14694 <spi_init+0x1b8>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   1468e:	2180      	movs	r1, #128	; 0x80
   14690:	0189      	lsls	r1, r1, #6
   14692:	430a      	orrs	r2, r1
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
   14694:	2002      	movs	r0, #2
	if (spi_module->CTRLA.reg == ctrla &&
   14696:	6831      	ldr	r1, [r6, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
   14698:	4303      	orrs	r3, r0
	if (spi_module->CTRLA.reg == ctrla &&
   1469a:	428b      	cmp	r3, r1
   1469c:	d100      	bne.n	146a0 <spi_init+0x1c4>
   1469e:	e0d7      	b.n	14850 <spi_init+0x374>
			module->hw = NULL;
   146a0:	2300      	movs	r3, #0
			return STATUS_ERR_DENIED;
   146a2:	201c      	movs	r0, #28
			module->hw = NULL;
   146a4:	602b      	str	r3, [r5, #0]
   146a6:	e72f      	b.n	14508 <spi_init+0x2c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   146a8:	2100      	movs	r1, #0
   146aa:	0030      	movs	r0, r6
   146ac:	4b76      	ldr	r3, [pc, #472]	; (14888 <spi_init+0x3ac>)
   146ae:	4798      	blx	r3
   146b0:	e73a      	b.n	14528 <spi_init+0x4c>
   146b2:	2101      	movs	r1, #1
   146b4:	0030      	movs	r0, r6
   146b6:	4b74      	ldr	r3, [pc, #464]	; (14888 <spi_init+0x3ac>)
   146b8:	4798      	blx	r3
   146ba:	0007      	movs	r7, r0
   146bc:	e758      	b.n	14570 <spi_init+0x94>
	uint32_t pin_index = (gpio_pin % 32);
   146be:	231f      	movs	r3, #31
   146c0:	4018      	ands	r0, r3
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
   146c2:	3040      	adds	r0, #64	; 0x40
   146c4:	7803      	ldrb	r3, [r0, #0]
   146c6:	deff      	udf	#255	; 0xff
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   146c8:	0008      	movs	r0, r1
   146ca:	4b70      	ldr	r3, [pc, #448]	; (1488c <spi_init+0x3b0>)
   146cc:	4798      	blx	r3
	if (sercom_index == 5) {
   146ce:	2805      	cmp	r0, #5
   146d0:	d100      	bne.n	146d4 <spi_init+0x1f8>
   146d2:	e0cd      	b.n	14870 <spi_init+0x394>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   146d4:	4087      	lsls	r7, r0
			MCLK->APBCMASK.reg |= mask;
   146d6:	4b6e      	ldr	r3, [pc, #440]	; (14890 <spi_init+0x3b4>)
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   146d8:	3012      	adds	r0, #18
   146da:	69da      	ldr	r2, [r3, #28]
   146dc:	4317      	orrs	r7, r2
   146de:	61df      	str	r7, [r3, #28]
   146e0:	b2c7      	uxtb	r7, r0
	gclk_chan_conf.source_generator = config->generator_source;
   146e2:	2324      	movs	r3, #36	; 0x24
   146e4:	466a      	mov	r2, sp
   146e6:	4698      	mov	r8, r3
   146e8:	5ce3      	ldrb	r3, [r4, r3]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   146ea:	4669      	mov	r1, sp
	gclk_chan_conf.source_generator = config->generator_source;
   146ec:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   146ee:	0038      	movs	r0, r7
   146f0:	4b68      	ldr	r3, [pc, #416]	; (14894 <spi_init+0x3b8>)
   146f2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   146f4:	0038      	movs	r0, r7
   146f6:	4b68      	ldr	r3, [pc, #416]	; (14898 <spi_init+0x3bc>)
   146f8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   146fa:	4643      	mov	r3, r8
   146fc:	2100      	movs	r1, #0
   146fe:	5ce0      	ldrb	r0, [r4, r3]
   14700:	4b66      	ldr	r3, [pc, #408]	; (1489c <spi_init+0x3c0>)
   14702:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
   14704:	7823      	ldrb	r3, [r4, #0]
   14706:	2b01      	cmp	r3, #1
   14708:	d100      	bne.n	1470c <spi_init+0x230>
   1470a:	e0ab      	b.n	14864 <spi_init+0x388>
	SercomSpi *const spi_module = &(module->hw->SPI);
   1470c:	682a      	ldr	r2, [r5, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   1470e:	4669      	mov	r1, sp
   14710:	4691      	mov	r9, r2
   14712:	2280      	movs	r2, #128	; 0x80
   14714:	710a      	strb	r2, [r1, #4]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   14716:	2200      	movs	r2, #0
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   14718:	4668      	mov	r0, sp
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1471a:	714a      	strb	r2, [r1, #5]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   1471c:	2101      	movs	r1, #1
	config->powersave    = false;
   1471e:	71c2      	strb	r2, [r0, #7]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   14720:	7181      	strb	r1, [r0, #6]
	if(config->mode == SPI_MODE_SLAVE) {
   14722:	2b00      	cmp	r3, #0
   14724:	d100      	bne.n	14728 <spi_init+0x24c>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   14726:	7183      	strb	r3, [r0, #6]
	uint32_t pad_pinmuxes[] = {
   14728:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1472a:	af02      	add	r7, sp, #8
   1472c:	9302      	str	r3, [sp, #8]
   1472e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   14730:	2600      	movs	r6, #0
   14732:	607b      	str	r3, [r7, #4]
   14734:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14736:	60bb      	str	r3, [r7, #8]
   14738:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1473a:	60fb      	str	r3, [r7, #12]
			current_pinmux = _sercom_get_default_pad(hw, pad);
   1473c:	4b52      	ldr	r3, [pc, #328]	; (14888 <spi_init+0x3ac>)
   1473e:	469b      	mov	fp, r3
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   14740:	4b57      	ldr	r3, [pc, #348]	; (148a0 <spi_init+0x3c4>)
   14742:	469a      	mov	sl, r3
		uint32_t current_pinmux = pad_pinmuxes[pad];
   14744:	00b3      	lsls	r3, r6, #2
   14746:	58f8      	ldr	r0, [r7, r3]
   14748:	b2f1      	uxtb	r1, r6
		if (current_pinmux == PINMUX_DEFAULT) {
   1474a:	2800      	cmp	r0, #0
   1474c:	d045      	beq.n	147da <spi_init+0x2fe>
		if (current_pinmux != PINMUX_UNUSED) {
   1474e:	1c43      	adds	r3, r0, #1
   14750:	d005      	beq.n	1475e <spi_init+0x282>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   14752:	466b      	mov	r3, sp
   14754:	7118      	strb	r0, [r3, #4]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   14756:	0c00      	lsrs	r0, r0, #16
   14758:	b2c0      	uxtb	r0, r0
   1475a:	a901      	add	r1, sp, #4
   1475c:	47d0      	blx	sl
   1475e:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
   14760:	2e04      	cmp	r6, #4
   14762:	d1ef      	bne.n	14744 <spi_init+0x268>
	module->mode             = config->mode;
   14764:	7823      	ldrb	r3, [r4, #0]
	uint16_t baud = 0;
   14766:	466a      	mov	r2, sp
	module->mode             = config->mode;
   14768:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
   1476a:	7c23      	ldrb	r3, [r4, #16]
   1476c:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
   1476e:	7ca3      	ldrb	r3, [r4, #18]
   14770:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
   14772:	7d23      	ldrb	r3, [r4, #20]
   14774:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
   14776:	2300      	movs	r3, #0
   14778:	8053      	strh	r3, [r2, #2]
	if (config->mode == SPI_MODE_MASTER) {
   1477a:	7823      	ldrb	r3, [r4, #0]
   1477c:	2b01      	cmp	r3, #1
   1477e:	d100      	bne.n	14782 <spi_init+0x2a6>
   14780:	e0a5      	b.n	148ce <spi_init+0x3f2>
	ctrla |= config->transfer_mode;
   14782:	68a2      	ldr	r2, [r4, #8]
   14784:	6863      	ldr	r3, [r4, #4]
	ctrlb |= config->character_size;
   14786:	7c21      	ldrb	r1, [r4, #16]
	ctrla |= config->transfer_mode;
   14788:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
   1478a:	68e2      	ldr	r2, [r4, #12]
   1478c:	4313      	orrs	r3, r2
	if (config->run_in_standby || system_is_debugger_present()) {
   1478e:	7c62      	ldrb	r2, [r4, #17]
   14790:	2a00      	cmp	r2, #0
   14792:	d11f      	bne.n	147d4 <spi_init+0x2f8>
   14794:	4a43      	ldr	r2, [pc, #268]	; (148a4 <spi_init+0x3c8>)
   14796:	7892      	ldrb	r2, [r2, #2]
   14798:	0792      	lsls	r2, r2, #30
   1479a:	d41b      	bmi.n	147d4 <spi_init+0x2f8>
	if (config->receiver_enable) {
   1479c:	7ca2      	ldrb	r2, [r4, #18]
   1479e:	2a00      	cmp	r2, #0
   147a0:	d002      	beq.n	147a8 <spi_init+0x2cc>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   147a2:	2280      	movs	r2, #128	; 0x80
   147a4:	0292      	lsls	r2, r2, #10
   147a6:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
   147a8:	7ce2      	ldrb	r2, [r4, #19]
   147aa:	2a00      	cmp	r2, #0
   147ac:	d002      	beq.n	147b4 <spi_init+0x2d8>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   147ae:	2280      	movs	r2, #128	; 0x80
   147b0:	0092      	lsls	r2, r2, #2
   147b2:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
   147b4:	7d22      	ldrb	r2, [r4, #20]
   147b6:	2a00      	cmp	r2, #0
   147b8:	d002      	beq.n	147c0 <spi_init+0x2e4>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   147ba:	2280      	movs	r2, #128	; 0x80
   147bc:	0192      	lsls	r2, r2, #6
   147be:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
   147c0:	464a      	mov	r2, r9
   147c2:	6812      	ldr	r2, [r2, #0]
	return STATUS_OK;
   147c4:	2000      	movs	r0, #0
	spi_module->CTRLA.reg |= ctrla;
   147c6:	4313      	orrs	r3, r2
   147c8:	464a      	mov	r2, r9
   147ca:	6013      	str	r3, [r2, #0]
	spi_module->CTRLB.reg |= ctrlb;
   147cc:	6853      	ldr	r3, [r2, #4]
   147ce:	430b      	orrs	r3, r1
   147d0:	6053      	str	r3, [r2, #4]
   147d2:	e699      	b.n	14508 <spi_init+0x2c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   147d4:	2280      	movs	r2, #128	; 0x80
   147d6:	4313      	orrs	r3, r2
   147d8:	e7e0      	b.n	1479c <spi_init+0x2c0>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   147da:	4648      	mov	r0, r9
   147dc:	47d8      	blx	fp
   147de:	e7b6      	b.n	1474e <spi_init+0x272>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
   147e0:	4662      	mov	r2, ip
   147e2:	0852      	lsrs	r2, r2, #1
   147e4:	4694      	mov	ip, r2
   147e6:	4463      	add	r3, ip
   147e8:	3330      	adds	r3, #48	; 0x30
   147ea:	781b      	ldrb	r3, [r3, #0]
   147ec:	b2db      	uxtb	r3, r3
   147ee:	469c      	mov	ip, r3
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
   147f0:	091b      	lsrs	r3, r3, #4
	if (pin_index & 1) {
   147f2:	4201      	tst	r1, r0
   147f4:	d000      	beq.n	147f8 <spi_init+0x31c>
   147f6:	e6b5      	b.n	14564 <spi_init+0x88>
   147f8:	230f      	movs	r3, #15
   147fa:	4662      	mov	r2, ip
   147fc:	4013      	ands	r3, r2
   147fe:	e6b1      	b.n	14564 <spi_init+0x88>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
   14800:	087f      	lsrs	r7, r7, #1
   14802:	19db      	adds	r3, r3, r7
   14804:	3330      	adds	r3, #48	; 0x30
   14806:	7819      	ldrb	r1, [r3, #0]
   14808:	b2c9      	uxtb	r1, r1
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
   1480a:	090b      	lsrs	r3, r1, #4
	if (pin_index & 1) {
   1480c:	4202      	tst	r2, r0
   1480e:	d000      	beq.n	14812 <spi_init+0x336>
   14810:	e6c8      	b.n	145a4 <spi_init+0xc8>
   14812:	230f      	movs	r3, #15
   14814:	400b      	ands	r3, r1
   14816:	e6c5      	b.n	145a4 <spi_init+0xc8>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
   14818:	087f      	lsrs	r7, r7, #1
   1481a:	19db      	adds	r3, r3, r7
   1481c:	3330      	adds	r3, #48	; 0x30
   1481e:	7819      	ldrb	r1, [r3, #0]
   14820:	b2c9      	uxtb	r1, r1
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
   14822:	090b      	lsrs	r3, r1, #4
	if (pin_index & 1) {
   14824:	4202      	tst	r2, r0
   14826:	d000      	beq.n	1482a <spi_init+0x34e>
   14828:	e6dd      	b.n	145e6 <spi_init+0x10a>
   1482a:	230f      	movs	r3, #15
   1482c:	400b      	ands	r3, r1
   1482e:	e6da      	b.n	145e6 <spi_init+0x10a>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   14830:	2102      	movs	r1, #2
   14832:	0030      	movs	r0, r6
   14834:	4b14      	ldr	r3, [pc, #80]	; (14888 <spi_init+0x3ac>)
   14836:	4798      	blx	r3
   14838:	4680      	mov	r8, r0
   1483a:	e6b9      	b.n	145b0 <spi_init+0xd4>
   1483c:	2103      	movs	r1, #3
   1483e:	0030      	movs	r0, r6
   14840:	4b11      	ldr	r3, [pc, #68]	; (14888 <spi_init+0x3ac>)
   14842:	4798      	blx	r3
   14844:	4681      	mov	r9, r0
   14846:	e6d4      	b.n	145f2 <spi_init+0x116>
   14848:	230f      	movs	r3, #15
   1484a:	401a      	ands	r2, r3
   1484c:	4691      	mov	r9, r2
   1484e:	e6f9      	b.n	14644 <spi_init+0x168>
			spi_module->CTRLB.reg == ctrlb) {
   14850:	6873      	ldr	r3, [r6, #4]
	if (spi_module->CTRLA.reg == ctrla &&
   14852:	4293      	cmp	r3, r2
   14854:	d000      	beq.n	14858 <spi_init+0x37c>
   14856:	e723      	b.n	146a0 <spi_init+0x1c4>
		module->mode           = config->mode;
   14858:	7823      	ldrb	r3, [r4, #0]
		return STATUS_OK;
   1485a:	2000      	movs	r0, #0
		module->mode           = config->mode;
   1485c:	716b      	strb	r3, [r5, #5]
		module->character_size = config->character_size;
   1485e:	7c23      	ldrb	r3, [r4, #16]
   14860:	71ab      	strb	r3, [r5, #6]
   14862:	e651      	b.n	14508 <spi_init+0x2c>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   14864:	220c      	movs	r2, #12
   14866:	6833      	ldr	r3, [r6, #0]
   14868:	4313      	orrs	r3, r2
   1486a:	6033      	str	r3, [r6, #0]
   1486c:	7823      	ldrb	r3, [r4, #0]
   1486e:	e74d      	b.n	1470c <spi_init+0x230>
			MCLK->APBDMASK.reg |= mask;
   14870:	4641      	mov	r1, r8
   14872:	4a07      	ldr	r2, [pc, #28]	; (14890 <spi_init+0x3b4>)
   14874:	2718      	movs	r7, #24
   14876:	6a13      	ldr	r3, [r2, #32]
   14878:	430b      	orrs	r3, r1
   1487a:	6213      	str	r3, [r2, #32]
   1487c:	e731      	b.n	146e2 <spi_init+0x206>
   1487e:	46c0      	nop			; (mov r8, r8)
   14880:	40002800 	.word	0x40002800
   14884:	000158dd 	.word	0x000158dd
   14888:	00014fa9 	.word	0x00014fa9
   1488c:	00015105 	.word	0x00015105
   14890:	40000400 	.word	0x40000400
   14894:	00015865 	.word	0x00015865
   14898:	000158a5 	.word	0x000158a5
   1489c:	00014f61 	.word	0x00014f61
   148a0:	00015961 	.word	0x00015961
   148a4:	41002000 	.word	0x41002000
		enum status_code error_code = _sercom_get_sync_baud_val(
   148a8:	0001      	movs	r1, r0
   148aa:	4b14      	ldr	r3, [pc, #80]	; (148fc <spi_init+0x420>)
   148ac:	aa02      	add	r2, sp, #8
   148ae:	69a0      	ldr	r0, [r4, #24]
   148b0:	4798      	blx	r3
   148b2:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
   148b4:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
   148b6:	2b00      	cmp	r3, #0
   148b8:	d000      	beq.n	148bc <spi_init+0x3e0>
   148ba:	e625      	b.n	14508 <spi_init+0x2c>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
   148bc:	466a      	mov	r2, sp
   148be:	7b33      	ldrb	r3, [r6, #12]
   148c0:	7a12      	ldrb	r2, [r2, #8]
			return STATUS_ERR_DENIED;
   148c2:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
   148c4:	429a      	cmp	r2, r3
   148c6:	d000      	beq.n	148ca <spi_init+0x3ee>
   148c8:	e61e      	b.n	14508 <spi_init+0x2c>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
   148ca:	370c      	adds	r7, #12
   148cc:	e6c4      	b.n	14658 <spi_init+0x17c>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   148ce:	4b0c      	ldr	r3, [pc, #48]	; (14900 <spi_init+0x424>)
   148d0:	6828      	ldr	r0, [r5, #0]
   148d2:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   148d4:	3012      	adds	r0, #18
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   148d6:	4b0b      	ldr	r3, [pc, #44]	; (14904 <spi_init+0x428>)
   148d8:	b2c0      	uxtb	r0, r0
   148da:	4798      	blx	r3
		enum status_code error_code = _sercom_get_sync_baud_val(
   148dc:	466b      	mov	r3, sp
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   148de:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
   148e0:	1c9a      	adds	r2, r3, #2
   148e2:	69a0      	ldr	r0, [r4, #24]
   148e4:	4b05      	ldr	r3, [pc, #20]	; (148fc <spi_init+0x420>)
   148e6:	4798      	blx	r3
   148e8:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
   148ea:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
   148ec:	2b00      	cmp	r3, #0
   148ee:	d000      	beq.n	148f2 <spi_init+0x416>
   148f0:	e60a      	b.n	14508 <spi_init+0x2c>
		spi_module->BAUD.reg = (uint8_t)baud;
   148f2:	466b      	mov	r3, sp
   148f4:	464a      	mov	r2, r9
   148f6:	789b      	ldrb	r3, [r3, #2]
   148f8:	7313      	strb	r3, [r2, #12]
   148fa:	e742      	b.n	14782 <spi_init+0x2a6>
   148fc:	00014cd1 	.word	0x00014cd1
   14900:	00015105 	.word	0x00015105
   14904:	000158dd 	.word	0x000158dd

00014908 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   14908:	b5f0      	push	{r4, r5, r6, r7, lr}
   1490a:	46de      	mov	lr, fp
   1490c:	4657      	mov	r7, sl
   1490e:	464e      	mov	r6, r9
   14910:	4645      	mov	r5, r8
   14912:	468b      	mov	fp, r1
   14914:	b5e0      	push	{r5, r6, r7, lr}
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   14916:	2417      	movs	r4, #23
	if (length == 0) {
   14918:	2a00      	cmp	r2, #0
   1491a:	d106      	bne.n	1492a <spi_read_buffer_wait+0x22>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
   1491c:	0020      	movs	r0, r4
   1491e:	bc3c      	pop	{r2, r3, r4, r5}
   14920:	4690      	mov	r8, r2
   14922:	4699      	mov	r9, r3
   14924:	46a2      	mov	sl, r4
   14926:	46ab      	mov	fp, r5
   14928:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
   1492a:	79c4      	ldrb	r4, [r0, #7]
   1492c:	2c00      	cmp	r4, #0
   1492e:	d101      	bne.n	14934 <spi_read_buffer_wait+0x2c>
		return STATUS_ERR_DENIED;
   14930:	341c      	adds	r4, #28
   14932:	e7f3      	b.n	1491c <spi_read_buffer_wait+0x14>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   14934:	05db      	lsls	r3, r3, #23
   14936:	0ddb      	lsrs	r3, r3, #23
   14938:	469c      	mov	ip, r3
		while (!spi_is_ready_to_read(module)) {
   1493a:	2304      	movs	r3, #4
   1493c:	4698      	mov	r8, r3
	while (length--) {
   1493e:	4b22      	ldr	r3, [pc, #136]	; (149c8 <spi_read_buffer_wait+0xc0>)
   14940:	2600      	movs	r6, #0
			while (!spi_is_ready_to_write(module)) {
   14942:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(module)) {
   14944:	2404      	movs	r4, #4
	while (length--) {
   14946:	4699      	mov	r9, r3
   14948:	3a01      	subs	r2, #1
   1494a:	b295      	uxth	r5, r2
		if (module->mode == SPI_MODE_MASTER) {
   1494c:	7943      	ldrb	r3, [r0, #5]
   1494e:	6802      	ldr	r2, [r0, #0]
   14950:	2b01      	cmp	r3, #1
   14952:	d01e      	beq.n	14992 <spi_read_buffer_wait+0x8a>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   14954:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_read(module)) {
   14956:	421c      	tst	r4, r3
   14958:	d0fc      	beq.n	14954 <spi_read_buffer_wait+0x4c>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   1495a:	4641      	mov	r1, r8
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   1495c:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
   1495e:	4219      	tst	r1, r3
   14960:	d021      	beq.n	149a6 <spi_read_buffer_wait+0x9e>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   14962:	8b53      	ldrh	r3, [r2, #26]
   14964:	421c      	tst	r4, r3
   14966:	d126      	bne.n	149b6 <spi_read_buffer_wait+0xae>
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   14968:	7983      	ldrb	r3, [r0, #6]
   1496a:	2b01      	cmp	r3, #1
   1496c:	d027      	beq.n	149be <spi_read_buffer_wait+0xb6>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   1496e:	6a93      	ldr	r3, [r2, #40]	; 0x28
   14970:	b2db      	uxtb	r3, r3
   14972:	469a      	mov	sl, r3
		rx_data[rx_pos++] = received_data;
   14974:	4652      	mov	r2, sl
   14976:	4659      	mov	r1, fp
   14978:	558a      	strb	r2, [r1, r6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1497a:	7982      	ldrb	r2, [r0, #6]
		rx_data[rx_pos++] = received_data;
   1497c:	1c73      	adds	r3, r6, #1
   1497e:	b29b      	uxth	r3, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   14980:	2a01      	cmp	r2, #1
   14982:	d012      	beq.n	149aa <spi_read_buffer_wait+0xa2>
		rx_data[rx_pos++] = received_data;
   14984:	001e      	movs	r6, r3
	while (length--) {
   14986:	3d01      	subs	r5, #1
   14988:	b2ad      	uxth	r5, r5
   1498a:	454d      	cmp	r5, r9
   1498c:	d1de      	bne.n	1494c <spi_read_buffer_wait+0x44>
	return STATUS_OK;
   1498e:	2400      	movs	r4, #0
   14990:	e7c4      	b.n	1491c <spi_read_buffer_wait+0x14>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   14992:	7e13      	ldrb	r3, [r2, #24]
			while (!spi_is_ready_to_write(module)) {
   14994:	421f      	tst	r7, r3
   14996:	d0fc      	beq.n	14992 <spi_read_buffer_wait+0x8a>
   14998:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
   1499a:	421f      	tst	r7, r3
   1499c:	d0da      	beq.n	14954 <spi_read_buffer_wait+0x4c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   1499e:	4663      	mov	r3, ip
   149a0:	6293      	str	r3, [r2, #40]	; 0x28
   149a2:	6802      	ldr	r2, [r0, #0]
   149a4:	e7d6      	b.n	14954 <spi_read_buffer_wait+0x4c>
		return STATUS_ERR_IO;
   149a6:	2410      	movs	r4, #16
   149a8:	e7b8      	b.n	1491c <spi_read_buffer_wait+0x14>
			rx_data[rx_pos++] = (received_data >> 8);
   149aa:	4652      	mov	r2, sl
   149ac:	3602      	adds	r6, #2
   149ae:	0a12      	lsrs	r2, r2, #8
   149b0:	b2b6      	uxth	r6, r6
   149b2:	54ca      	strb	r2, [r1, r3]
   149b4:	e7e7      	b.n	14986 <spi_read_buffer_wait+0x7e>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   149b6:	8354      	strh	r4, [r2, #26]
		*rx_data = (uint8_t)spi_module->DATA.reg;
   149b8:	6a93      	ldr	r3, [r2, #40]	; 0x28
		retval = STATUS_ERR_OVERFLOW;
   149ba:	241e      	movs	r4, #30
   149bc:	e7ae      	b.n	1491c <spi_read_buffer_wait+0x14>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   149be:	6a93      	ldr	r3, [r2, #40]	; 0x28
   149c0:	05db      	lsls	r3, r3, #23
   149c2:	0ddb      	lsrs	r3, r3, #23
   149c4:	469a      	mov	sl, r3
   149c6:	e7d5      	b.n	14974 <spi_read_buffer_wait+0x6c>
   149c8:	0000ffff 	.word	0x0000ffff

000149cc <spi_transceive_wait>:
 */
enum status_code spi_transceive_wait(
		struct spi_module *const module,
		uint16_t tx_data,
		uint16_t *rx_data)
{
   149cc:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);

	if (!(module->receiver_enabled)) {
   149ce:	79c3      	ldrb	r3, [r0, #7]
		return STATUS_ERR_DENIED;
   149d0:	251c      	movs	r5, #28
	if (!(module->receiver_enabled)) {
   149d2:	2b00      	cmp	r3, #0
   149d4:	d101      	bne.n	149da <spi_transceive_wait+0xe>

	/* Read data */
	retval = spi_read(module, rx_data);

	return retval;
}
   149d6:	0028      	movs	r0, r5
   149d8:	bd30      	pop	{r4, r5, pc}
   149da:	6803      	ldr	r3, [r0, #0]
	while (!spi_is_ready_to_write(module)) {
   149dc:	3d1b      	subs	r5, #27
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   149de:	7e1c      	ldrb	r4, [r3, #24]
   149e0:	4225      	tst	r5, r4
   149e2:	d0fc      	beq.n	149de <spi_transceive_wait+0x12>
   149e4:	7e1c      	ldrb	r4, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
   149e6:	4225      	tst	r5, r4
   149e8:	d114      	bne.n	14a14 <spi_transceive_wait+0x48>
	while (!spi_is_ready_to_read(module)) {
   149ea:	2404      	movs	r4, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   149ec:	7e19      	ldrb	r1, [r3, #24]
   149ee:	420c      	tst	r4, r1
   149f0:	d0fc      	beq.n	149ec <spi_transceive_wait+0x20>
   149f2:	7e19      	ldrb	r1, [r3, #24]
		return STATUS_ERR_IO;
   149f4:	2510      	movs	r5, #16
	if (!spi_is_ready_to_read(module)) {
   149f6:	420c      	tst	r4, r1
   149f8:	d0ed      	beq.n	149d6 <spi_transceive_wait+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   149fa:	8b59      	ldrh	r1, [r3, #26]
	enum status_code retval = STATUS_OK;
   149fc:	2500      	movs	r5, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   149fe:	0749      	lsls	r1, r1, #29
   14a00:	d501      	bpl.n	14a06 <spi_transceive_wait+0x3a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   14a02:	835c      	strh	r4, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
   14a04:	351e      	adds	r5, #30
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   14a06:	7981      	ldrb	r1, [r0, #6]
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   14a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   14a0a:	2901      	cmp	r1, #1
   14a0c:	d007      	beq.n	14a1e <spi_transceive_wait+0x52>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   14a0e:	b2db      	uxtb	r3, r3
   14a10:	8013      	strh	r3, [r2, #0]
   14a12:	e7e0      	b.n	149d6 <spi_transceive_wait+0xa>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   14a14:	05c9      	lsls	r1, r1, #23
   14a16:	0dc9      	lsrs	r1, r1, #23
   14a18:	6299      	str	r1, [r3, #40]	; 0x28
   14a1a:	6803      	ldr	r3, [r0, #0]
   14a1c:	e7e5      	b.n	149ea <spi_transceive_wait+0x1e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   14a1e:	05db      	lsls	r3, r3, #23
   14a20:	0ddb      	lsrs	r3, r3, #23
   14a22:	8013      	strh	r3, [r2, #0]
   14a24:	e7d7      	b.n	149d6 <spi_transceive_wait+0xa>
   14a26:	46c0      	nop			; (mov r8, r8)

00014a28 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   14a28:	b570      	push	{r4, r5, r6, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   14a2a:	7943      	ldrb	r3, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
   14a2c:	2415      	movs	r4, #21
	if (module->mode != SPI_MODE_MASTER) {
   14a2e:	2b01      	cmp	r3, #1
   14a30:	d001      	beq.n	14a36 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
   14a32:	0020      	movs	r0, r4
   14a34:	bd70      	pop	{r4, r5, r6, pc}
	if(!(module->master_slave_select_enable))
   14a36:	7a04      	ldrb	r4, [r0, #8]
   14a38:	2c00      	cmp	r4, #0
   14a3a:	d13a      	bne.n	14ab2 <spi_select_slave+0x8a>
		if (select) {
   14a3c:	2a00      	cmp	r2, #0
   14a3e:	d03a      	beq.n	14ab6 <spi_select_slave+0x8e>
			if (slave->address_enabled) {
   14a40:	784a      	ldrb	r2, [r1, #1]
   14a42:	2a00      	cmp	r2, #0
   14a44:	d046      	beq.n	14ad4 <spi_select_slave+0xac>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   14a46:	6802      	ldr	r2, [r0, #0]
   14a48:	7e12      	ldrb	r2, [r2, #24]
				if (!spi_is_ready_to_write(module)) {
   14a4a:	401a      	ands	r2, r3
   14a4c:	d10d      	bne.n	14a6a <spi_select_slave+0x42>
					port_pin_set_output_level(slave->ss_pin, true);
   14a4e:	7808      	ldrb	r0, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);
   14a50:	0941      	lsrs	r1, r0, #5
	if (port_index < PORT_INST_NUM) {
   14a52:	09c4      	lsrs	r4, r0, #7
   14a54:	d13c      	bne.n	14ad0 <spi_select_slave+0xa8>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   14a56:	321f      	adds	r2, #31
   14a58:	4002      	ands	r2, r0
   14a5a:	4093      	lsls	r3, r2
		port_base->OUTSET.reg = pin_mask;
   14a5c:	01ca      	lsls	r2, r1, #7
   14a5e:	4926      	ldr	r1, [pc, #152]	; (14af8 <spi_select_slave+0xd0>)
					return STATUS_BUSY;
   14a60:	3405      	adds	r4, #5
   14a62:	468c      	mov	ip, r1
   14a64:	4462      	add	r2, ip
   14a66:	6193      	str	r3, [r2, #24]
   14a68:	e7e3      	b.n	14a32 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
   14a6a:	780d      	ldrb	r5, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);
   14a6c:	096a      	lsrs	r2, r5, #5
	if (port_index < PORT_INST_NUM) {
   14a6e:	09ee      	lsrs	r6, r5, #7
   14a70:	d13f      	bne.n	14af2 <spi_select_slave+0xca>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   14a72:	241f      	movs	r4, #31
   14a74:	402c      	ands	r4, r5
   14a76:	001d      	movs	r5, r3
   14a78:	40a5      	lsls	r5, r4
   14a7a:	002c      	movs	r4, r5
	} else {
		port_base->OUTCLR.reg = pin_mask;
   14a7c:	4d1e      	ldr	r5, [pc, #120]	; (14af8 <spi_select_slave+0xd0>)
   14a7e:	01d2      	lsls	r2, r2, #7
   14a80:	46ac      	mov	ip, r5
   14a82:	4462      	add	r2, ip
   14a84:	6154      	str	r4, [r2, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
   14a86:	6802      	ldr	r2, [r0, #0]
				spi_write(module, slave->address);
   14a88:	788c      	ldrb	r4, [r1, #2]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   14a8a:	7e11      	ldrb	r1, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
   14a8c:	420b      	tst	r3, r1
   14a8e:	d000      	beq.n	14a92 <spi_select_slave+0x6a>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   14a90:	6294      	str	r4, [r2, #40]	; 0x28
				if (!(module->receiver_enabled)) {
   14a92:	79c3      	ldrb	r3, [r0, #7]
   14a94:	2b00      	cmp	r3, #0
   14a96:	d10c      	bne.n	14ab2 <spi_select_slave+0x8a>
					while (!spi_is_ready_to_read(module)) {
   14a98:	2104      	movs	r1, #4
   14a9a:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   14a9c:	7e13      	ldrb	r3, [r2, #24]
   14a9e:	4219      	tst	r1, r3
   14aa0:	d0fc      	beq.n	14a9c <spi_select_slave+0x74>
   14aa2:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
   14aa4:	4219      	tst	r1, r3
   14aa6:	d004      	beq.n	14ab2 <spi_select_slave+0x8a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   14aa8:	8b53      	ldrh	r3, [r2, #26]
   14aaa:	075b      	lsls	r3, r3, #29
   14aac:	d500      	bpl.n	14ab0 <spi_select_slave+0x88>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   14aae:	8351      	strh	r1, [r2, #26]
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   14ab0:	6a93      	ldr	r3, [r2, #40]	; 0x28
	return STATUS_OK;
   14ab2:	2400      	movs	r4, #0
   14ab4:	e7bd      	b.n	14a32 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
   14ab6:	7808      	ldrb	r0, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);
   14ab8:	0941      	lsrs	r1, r0, #5
	if (port_index < PORT_INST_NUM) {
   14aba:	09c4      	lsrs	r4, r0, #7
   14abc:	d108      	bne.n	14ad0 <spi_select_slave+0xa8>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   14abe:	221f      	movs	r2, #31
   14ac0:	4002      	ands	r2, r0
   14ac2:	4093      	lsls	r3, r2
		port_base->OUTSET.reg = pin_mask;
   14ac4:	01ca      	lsls	r2, r1, #7
   14ac6:	490c      	ldr	r1, [pc, #48]	; (14af8 <spi_select_slave+0xd0>)
   14ac8:	468c      	mov	ip, r1
   14aca:	4462      	add	r2, ip
   14acc:	6193      	str	r3, [r2, #24]
   14ace:	e7b0      	b.n	14a32 <spi_select_slave+0xa>
   14ad0:	6192      	str	r2, [r2, #24]
   14ad2:	deff      	udf	#255	; 0xff
				port_pin_set_output_level(slave->ss_pin, false);
   14ad4:	7808      	ldrb	r0, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);
   14ad6:	0941      	lsrs	r1, r0, #5
	if (port_index < PORT_INST_NUM) {
   14ad8:	09c4      	lsrs	r4, r0, #7
   14ada:	d108      	bne.n	14aee <spi_select_slave+0xc6>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   14adc:	221f      	movs	r2, #31
   14ade:	4002      	ands	r2, r0
   14ae0:	4093      	lsls	r3, r2
		port_base->OUTCLR.reg = pin_mask;
   14ae2:	01ca      	lsls	r2, r1, #7
   14ae4:	4904      	ldr	r1, [pc, #16]	; (14af8 <spi_select_slave+0xd0>)
   14ae6:	468c      	mov	ip, r1
   14ae8:	4462      	add	r2, ip
   14aea:	6153      	str	r3, [r2, #20]
   14aec:	e7a1      	b.n	14a32 <spi_select_slave+0xa>
   14aee:	6152      	str	r2, [r2, #20]
   14af0:	deff      	udf	#255	; 0xff
   14af2:	6164      	str	r4, [r4, #20]
   14af4:	deff      	udf	#255	; 0xff
   14af6:	46c0      	nop			; (mov r8, r8)
   14af8:	40002800 	.word	0x40002800

00014afc <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   14afc:	b5f0      	push	{r4, r5, r6, r7, lr}
   14afe:	46de      	mov	lr, fp
   14b00:	4657      	mov	r7, sl
   14b02:	464e      	mov	r6, r9
   14b04:	4645      	mov	r5, r8
   14b06:	b5e0      	push	{r5, r6, r7, lr}
   14b08:	468b      	mov	fp, r1
   14b0a:	b083      	sub	sp, #12
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   14b0c:	2317      	movs	r3, #23
	if (length == 0) {
   14b0e:	2a00      	cmp	r2, #0
   14b10:	d107      	bne.n	14b22 <spi_write_buffer_wait+0x26>
			}
		}
	}
#  endif
	return STATUS_OK;
}
   14b12:	0018      	movs	r0, r3
   14b14:	b003      	add	sp, #12
   14b16:	bc3c      	pop	{r2, r3, r4, r5}
   14b18:	4690      	mov	r8, r2
   14b1a:	4699      	mov	r9, r3
   14b1c:	46a2      	mov	sl, r4
   14b1e:	46ab      	mov	fp, r5
   14b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
			while (!spi_is_ready_to_read(module)) {
   14b22:	2304      	movs	r3, #4
   14b24:	4698      	mov	r8, r3
	while (length--) {
   14b26:	4b22      	ldr	r3, [pc, #136]	; (14bb0 <spi_write_buffer_wait+0xb4>)
   14b28:	2700      	movs	r7, #0
		while (!spi_is_ready_to_write(module)) {
   14b2a:	2401      	movs	r4, #1
			while (!spi_is_ready_to_read(module)) {
   14b2c:	2504      	movs	r5, #4
	while (length--) {
   14b2e:	469c      	mov	ip, r3
   14b30:	3a01      	subs	r2, #1
   14b32:	b296      	uxth	r6, r2
   14b34:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   14b36:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(module)) {
   14b38:	421c      	tst	r4, r3
   14b3a:	d0fc      	beq.n	14b36 <spi_write_buffer_wait+0x3a>
		uint16_t data_to_send = tx_data[tx_pos++];
   14b3c:	1c7b      	adds	r3, r7, #1
   14b3e:	b29b      	uxth	r3, r3
   14b40:	469a      	mov	sl, r3
   14b42:	465b      	mov	r3, fp
   14b44:	5ddb      	ldrb	r3, [r3, r7]
   14b46:	9301      	str	r3, [sp, #4]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   14b48:	7981      	ldrb	r1, [r0, #6]
   14b4a:	2901      	cmp	r1, #1
   14b4c:	d027      	beq.n	14b9e <spi_write_buffer_wait+0xa2>
		uint16_t data_to_send = tx_data[tx_pos++];
   14b4e:	466b      	mov	r3, sp
   14b50:	4657      	mov	r7, sl
   14b52:	889b      	ldrh	r3, [r3, #4]
   14b54:	7e11      	ldrb	r1, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
   14b56:	420c      	tst	r4, r1
   14b58:	d002      	beq.n	14b60 <spi_write_buffer_wait+0x64>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   14b5a:	05db      	lsls	r3, r3, #23
   14b5c:	0ddb      	lsrs	r3, r3, #23
   14b5e:	6293      	str	r3, [r2, #40]	; 0x28
		if (module->receiver_enabled) {
   14b60:	79c3      	ldrb	r3, [r0, #7]
   14b62:	2b00      	cmp	r3, #0
   14b64:	d00c      	beq.n	14b80 <spi_write_buffer_wait+0x84>
   14b66:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   14b68:	7e13      	ldrb	r3, [r2, #24]
			while (!spi_is_ready_to_read(module)) {
   14b6a:	421d      	tst	r5, r3
   14b6c:	d0fc      	beq.n	14b68 <spi_write_buffer_wait+0x6c>
	if (!spi_is_ready_to_read(module)) {
   14b6e:	4641      	mov	r1, r8
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   14b70:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
   14b72:	4219      	tst	r1, r3
   14b74:	d004      	beq.n	14b80 <spi_write_buffer_wait+0x84>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   14b76:	8b53      	ldrh	r3, [r2, #26]
   14b78:	421d      	tst	r5, r3
   14b7a:	d000      	beq.n	14b7e <spi_write_buffer_wait+0x82>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   14b7c:	8355      	strh	r5, [r2, #26]
		*rx_data = (uint8_t)spi_module->DATA.reg;
   14b7e:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (length--) {
   14b80:	3e01      	subs	r6, #1
   14b82:	b2b6      	uxth	r6, r6
   14b84:	4566      	cmp	r6, ip
   14b86:	d1d5      	bne.n	14b34 <spi_write_buffer_wait+0x38>
	if (module->mode == SPI_MODE_MASTER) {
   14b88:	7942      	ldrb	r2, [r0, #5]
	return STATUS_OK;
   14b8a:	2300      	movs	r3, #0
	if (module->mode == SPI_MODE_MASTER) {
   14b8c:	2a01      	cmp	r2, #1
   14b8e:	d1c0      	bne.n	14b12 <spi_write_buffer_wait+0x16>
   14b90:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
   14b92:	3201      	adds	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   14b94:	7e0b      	ldrb	r3, [r1, #24]
   14b96:	421a      	tst	r2, r3
   14b98:	d0fc      	beq.n	14b94 <spi_write_buffer_wait+0x98>
	return STATUS_OK;
   14b9a:	2300      	movs	r3, #0
   14b9c:	e7b9      	b.n	14b12 <spi_write_buffer_wait+0x16>
			data_to_send |= (tx_data[tx_pos++] << 8);
   14b9e:	465b      	mov	r3, fp
   14ba0:	4651      	mov	r1, sl
   14ba2:	5c59      	ldrb	r1, [r3, r1]
   14ba4:	9b01      	ldr	r3, [sp, #4]
   14ba6:	3702      	adds	r7, #2
   14ba8:	0209      	lsls	r1, r1, #8
   14baa:	b2bf      	uxth	r7, r7
   14bac:	430b      	orrs	r3, r1
   14bae:	e7d1      	b.n	14b54 <spi_write_buffer_wait+0x58>
   14bb0:	0000ffff 	.word	0x0000ffff

00014bb4 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
   14bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   14bb6:	464e      	mov	r6, r9
   14bb8:	4645      	mov	r5, r8
   14bba:	46de      	mov	lr, fp
   14bbc:	4657      	mov	r7, sl
   14bbe:	b5e0      	push	{r5, r6, r7, lr}
   14bc0:	4691      	mov	r9, r2
   14bc2:	b083      	sub	sp, #12
   14bc4:	4688      	mov	r8, r1
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   14bc6:	2217      	movs	r2, #23
	if (length == 0) {
   14bc8:	2b00      	cmp	r3, #0
   14bca:	d107      	bne.n	14bdc <spi_transceive_buffer_wait+0x28>
			}
		}
	}
#  endif
	return STATUS_OK;
}
   14bcc:	0010      	movs	r0, r2
   14bce:	b003      	add	sp, #12
   14bd0:	bc3c      	pop	{r2, r3, r4, r5}
   14bd2:	4690      	mov	r8, r2
   14bd4:	4699      	mov	r9, r3
   14bd6:	46a2      	mov	sl, r4
   14bd8:	46ab      	mov	fp, r5
   14bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
   14bdc:	79c2      	ldrb	r2, [r0, #7]
   14bde:	2a00      	cmp	r2, #0
   14be0:	d101      	bne.n	14be6 <spi_transceive_buffer_wait+0x32>
		return STATUS_ERR_DENIED;
   14be2:	321c      	adds	r2, #28
   14be4:	e7f2      	b.n	14bcc <spi_transceive_buffer_wait+0x18>
	while (length--) {
   14be6:	3b01      	subs	r3, #1
   14be8:	b29e      	uxth	r6, r3
   14bea:	2300      	movs	r3, #0
   14bec:	469c      	mov	ip, r3
		while (!spi_is_ready_to_read(module)) {
   14bee:	3304      	adds	r3, #4
	while (length--) {
   14bf0:	2100      	movs	r1, #0
		while (!spi_is_ready_to_write(module)) {
   14bf2:	2401      	movs	r4, #1
		while (!spi_is_ready_to_read(module)) {
   14bf4:	2504      	movs	r5, #4
   14bf6:	469b      	mov	fp, r3
   14bf8:	4667      	mov	r7, ip
   14bfa:	9600      	str	r6, [sp, #0]
   14bfc:	6803      	ldr	r3, [r0, #0]
   14bfe:	9e00      	ldr	r6, [sp, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   14c00:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(module)) {
   14c02:	4214      	tst	r4, r2
   14c04:	d0fc      	beq.n	14c00 <spi_transceive_buffer_wait+0x4c>
		uint16_t data_to_send = tx_data[tx_pos++];
   14c06:	1c4a      	adds	r2, r1, #1
   14c08:	b292      	uxth	r2, r2
   14c0a:	4694      	mov	ip, r2
   14c0c:	4642      	mov	r2, r8
   14c0e:	5c52      	ldrb	r2, [r2, r1]
   14c10:	9600      	str	r6, [sp, #0]
   14c12:	9201      	str	r2, [sp, #4]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   14c14:	7986      	ldrb	r6, [r0, #6]
   14c16:	2e01      	cmp	r6, #1
   14c18:	d039      	beq.n	14c8e <spi_transceive_buffer_wait+0xda>
		uint16_t data_to_send = tx_data[tx_pos++];
   14c1a:	4661      	mov	r1, ip
   14c1c:	b292      	uxth	r2, r2
   14c1e:	7e1e      	ldrb	r6, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
   14c20:	4234      	tst	r4, r6
   14c22:	d032      	beq.n	14c8a <spi_transceive_buffer_wait+0xd6>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   14c24:	05d2      	lsls	r2, r2, #23
   14c26:	0dd2      	lsrs	r2, r2, #23
   14c28:	629a      	str	r2, [r3, #40]	; 0x28
   14c2a:	6803      	ldr	r3, [r0, #0]
   14c2c:	9e00      	ldr	r6, [sp, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   14c2e:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(module)) {
   14c30:	4215      	tst	r5, r2
   14c32:	d0fc      	beq.n	14c2e <spi_transceive_buffer_wait+0x7a>
   14c34:	9600      	str	r6, [sp, #0]
	if (!spi_is_ready_to_read(module)) {
   14c36:	465e      	mov	r6, fp
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   14c38:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
   14c3a:	4216      	tst	r6, r2
   14c3c:	d023      	beq.n	14c86 <spi_transceive_buffer_wait+0xd2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   14c3e:	8b5a      	ldrh	r2, [r3, #26]
   14c40:	4215      	tst	r5, r2
   14c42:	d135      	bne.n	14cb0 <spi_transceive_buffer_wait+0xfc>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   14c44:	7982      	ldrb	r2, [r0, #6]
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   14c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   14c48:	2a01      	cmp	r2, #1
   14c4a:	d038      	beq.n	14cbe <spi_transceive_buffer_wait+0x10a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   14c4c:	b2db      	uxtb	r3, r3
   14c4e:	469c      	mov	ip, r3
		rx_data[rx_pos++] = received_data;
   14c50:	464a      	mov	r2, r9
   14c52:	4666      	mov	r6, ip
   14c54:	55d6      	strb	r6, [r2, r7]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   14c56:	7982      	ldrb	r2, [r0, #6]
		rx_data[rx_pos++] = received_data;
   14c58:	1c7b      	adds	r3, r7, #1
   14c5a:	b29b      	uxth	r3, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   14c5c:	2a01      	cmp	r2, #1
   14c5e:	d020      	beq.n	14ca2 <spi_transceive_buffer_wait+0xee>
		rx_data[rx_pos++] = received_data;
   14c60:	001f      	movs	r7, r3
	while (length--) {
   14c62:	9e00      	ldr	r6, [sp, #0]
   14c64:	4b19      	ldr	r3, [pc, #100]	; (14ccc <spi_transceive_buffer_wait+0x118>)
   14c66:	3e01      	subs	r6, #1
   14c68:	b2b2      	uxth	r2, r6
   14c6a:	9200      	str	r2, [sp, #0]
   14c6c:	429a      	cmp	r2, r3
   14c6e:	d1c5      	bne.n	14bfc <spi_transceive_buffer_wait+0x48>
	if (module->mode == SPI_MODE_MASTER) {
   14c70:	7943      	ldrb	r3, [r0, #5]
	return STATUS_OK;
   14c72:	2200      	movs	r2, #0
	if (module->mode == SPI_MODE_MASTER) {
   14c74:	2b01      	cmp	r3, #1
   14c76:	d1a9      	bne.n	14bcc <spi_transceive_buffer_wait+0x18>
   14c78:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
   14c7a:	3202      	adds	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   14c7c:	7e0b      	ldrb	r3, [r1, #24]
   14c7e:	421a      	tst	r2, r3
   14c80:	d0fc      	beq.n	14c7c <spi_transceive_buffer_wait+0xc8>
	return STATUS_OK;
   14c82:	2200      	movs	r2, #0
   14c84:	e7a2      	b.n	14bcc <spi_transceive_buffer_wait+0x18>
		return STATUS_ERR_IO;
   14c86:	2210      	movs	r2, #16
   14c88:	e7a0      	b.n	14bcc <spi_transceive_buffer_wait+0x18>
   14c8a:	9e00      	ldr	r6, [sp, #0]
   14c8c:	e7cf      	b.n	14c2e <spi_transceive_buffer_wait+0x7a>
			data_to_send |= (tx_data[tx_pos++] << 8);
   14c8e:	4646      	mov	r6, r8
   14c90:	4662      	mov	r2, ip
   14c92:	5cb2      	ldrb	r2, [r6, r2]
   14c94:	9e01      	ldr	r6, [sp, #4]
   14c96:	0212      	lsls	r2, r2, #8
   14c98:	3102      	adds	r1, #2
   14c9a:	4316      	orrs	r6, r2
   14c9c:	b289      	uxth	r1, r1
   14c9e:	0032      	movs	r2, r6
   14ca0:	e7bd      	b.n	14c1e <spi_transceive_buffer_wait+0x6a>
			rx_data[rx_pos++] = (received_data >> 8);
   14ca2:	4662      	mov	r2, ip
   14ca4:	464e      	mov	r6, r9
   14ca6:	3702      	adds	r7, #2
   14ca8:	0a12      	lsrs	r2, r2, #8
   14caa:	b2bf      	uxth	r7, r7
   14cac:	54f2      	strb	r2, [r6, r3]
   14cae:	e7d8      	b.n	14c62 <spi_transceive_buffer_wait+0xae>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   14cb0:	835d      	strh	r5, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   14cb2:	7982      	ldrb	r2, [r0, #6]
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   14cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   14cb6:	2a01      	cmp	r2, #1
   14cb8:	d005      	beq.n	14cc6 <spi_transceive_buffer_wait+0x112>
		retval = STATUS_ERR_OVERFLOW;
   14cba:	221e      	movs	r2, #30
   14cbc:	e786      	b.n	14bcc <spi_transceive_buffer_wait+0x18>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   14cbe:	05db      	lsls	r3, r3, #23
   14cc0:	0ddb      	lsrs	r3, r3, #23
   14cc2:	469c      	mov	ip, r3
   14cc4:	e7c4      	b.n	14c50 <spi_transceive_buffer_wait+0x9c>
		retval = STATUS_ERR_OVERFLOW;
   14cc6:	321d      	adds	r2, #29
   14cc8:	e780      	b.n	14bcc <spi_transceive_buffer_wait+0x18>
   14cca:	46c0      	nop			; (mov r8, r8)
   14ccc:	0000ffff 	.word	0x0000ffff

00014cd0 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   14cd0:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   14cd2:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   14cd4:	2340      	movs	r3, #64	; 0x40
   14cd6:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
   14cd8:	4281      	cmp	r1, r0
   14cda:	d202      	bcs.n	14ce2 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
   14cdc:	0018      	movs	r0, r3
   14cde:	bd10      	pop	{r4, pc}
		baud_calculated++;
   14ce0:	001c      	movs	r4, r3
   14ce2:	1c63      	adds	r3, r4, #1
		clock_value = clock_value - baudrate;
   14ce4:	1a09      	subs	r1, r1, r0
		baud_calculated++;
   14ce6:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
   14ce8:	4288      	cmp	r0, r1
   14cea:	d9f9      	bls.n	14ce0 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   14cec:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
   14cee:	2cff      	cmp	r4, #255	; 0xff
   14cf0:	d8f4      	bhi.n	14cdc <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
   14cf2:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
   14cf4:	2300      	movs	r3, #0
   14cf6:	e7f1      	b.n	14cdc <_sercom_get_sync_baud_val+0xc>

00014cf8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   14cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
   14cfa:	46de      	mov	lr, fp
   14cfc:	4645      	mov	r5, r8
   14cfe:	4657      	mov	r7, sl
   14d00:	464e      	mov	r6, r9
   14d02:	b5e0      	push	{r5, r6, r7, lr}
   14d04:	b087      	sub	sp, #28
   14d06:	4693      	mov	fp, r2
   14d08:	aa10      	add	r2, sp, #64	; 0x40
   14d0a:	7814      	ldrb	r4, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   14d0c:	0002      	movs	r2, r0
{
   14d0e:	4688      	mov	r8, r1
	if ((baudrate * sample_num) > peripheral_clock) {
   14d10:	4362      	muls	r2, r4
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   14d12:	2140      	movs	r1, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
   14d14:	4542      	cmp	r2, r8
   14d16:	d907      	bls.n	14d28 <_sercom_get_async_baud_val+0x30>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
   14d18:	0008      	movs	r0, r1
   14d1a:	b007      	add	sp, #28
   14d1c:	bc3c      	pop	{r2, r3, r4, r5}
   14d1e:	4690      	mov	r8, r2
   14d20:	4699      	mov	r9, r3
   14d22:	46a2      	mov	sl, r4
   14d24:	46ab      	mov	fp, r5
   14d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   14d28:	2b00      	cmp	r3, #0
   14d2a:	d15f      	bne.n	14dec <_sercom_get_async_baud_val+0xf4>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   14d2c:	0002      	movs	r2, r0
   14d2e:	2100      	movs	r1, #0
   14d30:	0020      	movs	r0, r4
   14d32:	4c8a      	ldr	r4, [pc, #552]	; (14f5c <_sercom_get_async_baud_val+0x264>)
   14d34:	47a0      	blx	r4
		ratio = long_division(temp1, peripheral_clock);
   14d36:	4643      	mov	r3, r8
   14d38:	9300      	str	r3, [sp, #0]
   14d3a:	2300      	movs	r3, #0
		bit_shift = (uint64_t)1 << i;
   14d3c:	2120      	movs	r1, #32
	uint64_t q = 0, r = 0, bit_shift;
   14d3e:	4698      	mov	r8, r3
		bit_shift = (uint64_t)1 << i;
   14d40:	468a      	mov	sl, r1
   14d42:	391f      	subs	r1, #31
	uint64_t q = 0, r = 0, bit_shift;
   14d44:	2700      	movs	r7, #0
		bit_shift = (uint64_t)1 << i;
   14d46:	468c      	mov	ip, r1
   14d48:	4641      	mov	r1, r8
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   14d4a:	4681      	mov	r9, r0
		ratio = long_division(temp1, peripheral_clock);
   14d4c:	9301      	str	r3, [sp, #4]
		bit_shift = (uint64_t)1 << i;
   14d4e:	46d8      	mov	r8, fp
	uint64_t q = 0, r = 0, bit_shift;
   14d50:	2200      	movs	r2, #0
   14d52:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
   14d54:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
   14d56:	9102      	str	r1, [sp, #8]
   14d58:	46bb      	mov	fp, r7
   14d5a:	e00f      	b.n	14d7c <_sercom_get_async_baud_val+0x84>
   14d5c:	42bd      	cmp	r5, r7
   14d5e:	d052      	beq.n	14e06 <_sercom_get_async_baud_val+0x10e>
   14d60:	46a3      	mov	fp, r4
   14d62:	9c00      	ldr	r4, [sp, #0]
   14d64:	9d01      	ldr	r5, [sp, #4]
   14d66:	9102      	str	r1, [sp, #8]
   14d68:	42bd      	cmp	r5, r7
   14d6a:	d834      	bhi.n	14dd6 <_sercom_get_async_baud_val+0xde>
   14d6c:	42bd      	cmp	r5, r7
   14d6e:	d050      	beq.n	14e12 <_sercom_get_async_baud_val+0x11a>
   14d70:	0011      	movs	r1, r2
   14d72:	001c      	movs	r4, r3
   14d74:	000a      	movs	r2, r1
   14d76:	0023      	movs	r3, r4
	for (i = 63; i >= 0; i--) {
   14d78:	3801      	subs	r0, #1
   14d7a:	d332      	bcc.n	14de2 <_sercom_get_async_baud_val+0xea>
		bit_shift = (uint64_t)1 << i;
   14d7c:	2120      	movs	r1, #32
   14d7e:	4249      	negs	r1, r1
   14d80:	1841      	adds	r1, r0, r1
   14d82:	d43a      	bmi.n	14dfa <_sercom_get_async_baud_val+0x102>
   14d84:	4664      	mov	r4, ip
   14d86:	408c      	lsls	r4, r1
   14d88:	0021      	movs	r1, r4
   14d8a:	4664      	mov	r4, ip
   14d8c:	4084      	lsls	r4, r0
		r = r << 1;
   14d8e:	1892      	adds	r2, r2, r2
   14d90:	415b      	adcs	r3, r3
		bit_shift = (uint64_t)1 << i;
   14d92:	9404      	str	r4, [sp, #16]
			r |= 0x01;
   14d94:	4666      	mov	r6, ip
   14d96:	464c      	mov	r4, r9
   14d98:	4316      	orrs	r6, r2
   14d9a:	420c      	tst	r4, r1
   14d9c:	d000      	beq.n	14da0 <_sercom_get_async_baud_val+0xa8>
   14d9e:	0032      	movs	r2, r6
			r = r - d;
   14da0:	0014      	movs	r4, r2
   14da2:	001d      	movs	r5, r3
   14da4:	0016      	movs	r6, r2
   14da6:	001f      	movs	r7, r3
   14da8:	9a00      	ldr	r2, [sp, #0]
   14daa:	9b01      	ldr	r3, [sp, #4]
   14dac:	1aa4      	subs	r4, r4, r2
   14dae:	419d      	sbcs	r5, r3
   14db0:	0022      	movs	r2, r4
			q |= bit_shift;
   14db2:	465c      	mov	r4, fp
			r = r - d;
   14db4:	002b      	movs	r3, r5
			q |= bit_shift;
   14db6:	9d04      	ldr	r5, [sp, #16]
   14db8:	4325      	orrs	r5, r4
   14dba:	002c      	movs	r4, r5
   14dbc:	9d02      	ldr	r5, [sp, #8]
   14dbe:	4329      	orrs	r1, r5
   14dc0:	9d01      	ldr	r5, [sp, #4]
   14dc2:	42bd      	cmp	r5, r7
   14dc4:	d9ca      	bls.n	14d5c <_sercom_get_async_baud_val+0x64>
   14dc6:	465c      	mov	r4, fp
   14dc8:	9902      	ldr	r1, [sp, #8]
   14dca:	46a3      	mov	fp, r4
   14dcc:	9c00      	ldr	r4, [sp, #0]
   14dce:	9d01      	ldr	r5, [sp, #4]
   14dd0:	9102      	str	r1, [sp, #8]
   14dd2:	42bd      	cmp	r5, r7
   14dd4:	d9ca      	bls.n	14d6c <_sercom_get_async_baud_val+0x74>
   14dd6:	0031      	movs	r1, r6
   14dd8:	003c      	movs	r4, r7
   14dda:	000a      	movs	r2, r1
   14ddc:	0023      	movs	r3, r4
	for (i = 63; i >= 0; i--) {
   14dde:	3801      	subs	r0, #1
   14de0:	d2cc      	bcs.n	14d7c <_sercom_get_async_baud_val+0x84>
   14de2:	465f      	mov	r7, fp
		scale = ((uint64_t)1 << SHIFT) - ratio;
   14de4:	427f      	negs	r7, r7
   14de6:	46c3      	mov	fp, r8
   14de8:	0c3f      	lsrs	r7, r7, #16
   14dea:	e002      	b.n	14df2 <_sercom_get_async_baud_val+0xfa>
   14dec:	2700      	movs	r7, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   14dee:	2b01      	cmp	r3, #1
   14df0:	d015      	beq.n	14e1e <_sercom_get_async_baud_val+0x126>
	*baudval = baud_calculated;
   14df2:	465b      	mov	r3, fp
	return STATUS_OK;
   14df4:	2100      	movs	r1, #0
	*baudval = baud_calculated;
   14df6:	801f      	strh	r7, [r3, #0]
	return STATUS_OK;
   14df8:	e78e      	b.n	14d18 <_sercom_get_async_baud_val+0x20>
		bit_shift = (uint64_t)1 << i;
   14dfa:	4651      	mov	r1, sl
   14dfc:	4664      	mov	r4, ip
   14dfe:	1a09      	subs	r1, r1, r0
   14e00:	40cc      	lsrs	r4, r1
   14e02:	0021      	movs	r1, r4
   14e04:	e7c1      	b.n	14d8a <_sercom_get_async_baud_val+0x92>
   14e06:	9d00      	ldr	r5, [sp, #0]
   14e08:	42b5      	cmp	r5, r6
   14e0a:	d9a9      	bls.n	14d60 <_sercom_get_async_baud_val+0x68>
   14e0c:	465c      	mov	r4, fp
   14e0e:	9902      	ldr	r1, [sp, #8]
   14e10:	e7db      	b.n	14dca <_sercom_get_async_baud_val+0xd2>
   14e12:	9900      	ldr	r1, [sp, #0]
   14e14:	42b1      	cmp	r1, r6
   14e16:	d9ab      	bls.n	14d70 <_sercom_get_async_baud_val+0x78>
   14e18:	0031      	movs	r1, r6
   14e1a:	003c      	movs	r4, r7
   14e1c:	e7dd      	b.n	14dda <_sercom_get_async_baud_val+0xe2>
		temp1 = ((uint64_t)baudrate * sample_num);
   14e1e:	0022      	movs	r2, r4
   14e20:	2300      	movs	r3, #0
   14e22:	4c4e      	ldr	r4, [pc, #312]	; (14f5c <_sercom_get_async_baud_val+0x264>)
   14e24:	2100      	movs	r1, #0
   14e26:	47a0      	blx	r4
		bit_shift = (uint64_t)1 << i;
   14e28:	2401      	movs	r4, #1
		temp1 = ((uint64_t)baudrate * sample_num);
   14e2a:	000b      	movs	r3, r1
	uint64_t q = 0, r = 0, bit_shift;
   14e2c:	2100      	movs	r1, #0
		temp1 = ((uint64_t)baudrate * sample_num);
   14e2e:	0002      	movs	r2, r0
	uint64_t q = 0, r = 0, bit_shift;
   14e30:	468c      	mov	ip, r1
   14e32:	2000      	movs	r0, #0
   14e34:	2100      	movs	r1, #0
	for (i = 63; i >= 0; i--) {
   14e36:	263f      	movs	r6, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
   14e38:	46a1      	mov	r9, r4
   14e3a:	e018      	b.n	14e6e <_sercom_get_async_baud_val+0x176>
   14e3c:	0004      	movs	r4, r0
   14e3e:	000d      	movs	r5, r1
   14e40:	0020      	movs	r0, r4
   14e42:	0029      	movs	r1, r5
			r = r - d;
   14e44:	1aa4      	subs	r4, r4, r2
   14e46:	419d      	sbcs	r5, r3
   14e48:	9400      	str	r4, [sp, #0]
   14e4a:	9501      	str	r5, [sp, #4]
			q |= bit_shift;
   14e4c:	4664      	mov	r4, ip
   14e4e:	4327      	orrs	r7, r4
   14e50:	428b      	cmp	r3, r1
   14e52:	d81e      	bhi.n	14e92 <_sercom_get_async_baud_val+0x19a>
   14e54:	d01b      	beq.n	14e8e <_sercom_get_async_baud_val+0x196>
   14e56:	46bc      	mov	ip, r7
   14e58:	428b      	cmp	r3, r1
   14e5a:	d815      	bhi.n	14e88 <_sercom_get_async_baud_val+0x190>
   14e5c:	d012      	beq.n	14e84 <_sercom_get_async_baud_val+0x18c>
   14e5e:	9800      	ldr	r0, [sp, #0]
   14e60:	9901      	ldr	r1, [sp, #4]
   14e62:	4682      	mov	sl, r0
   14e64:	000c      	movs	r4, r1
   14e66:	4650      	mov	r0, sl
   14e68:	0021      	movs	r1, r4
	for (i = 63; i >= 0; i--) {
   14e6a:	3e01      	subs	r6, #1
   14e6c:	d313      	bcc.n	14e96 <_sercom_get_async_baud_val+0x19e>
		bit_shift = (uint64_t)1 << i;
   14e6e:	464f      	mov	r7, r9
		r = r << 1;
   14e70:	1800      	adds	r0, r0, r0
   14e72:	4149      	adcs	r1, r1
			r |= 0x01;
   14e74:	464c      	mov	r4, r9
		bit_shift = (uint64_t)1 << i;
   14e76:	40b7      	lsls	r7, r6
   14e78:	4645      	mov	r5, r8
			r |= 0x01;
   14e7a:	4304      	orrs	r4, r0
   14e7c:	422f      	tst	r7, r5
   14e7e:	d0dd      	beq.n	14e3c <_sercom_get_async_baud_val+0x144>
   14e80:	000d      	movs	r5, r1
   14e82:	e7dd      	b.n	14e40 <_sercom_get_async_baud_val+0x148>
   14e84:	4282      	cmp	r2, r0
   14e86:	d9ea      	bls.n	14e5e <_sercom_get_async_baud_val+0x166>
   14e88:	4682      	mov	sl, r0
   14e8a:	000c      	movs	r4, r1
   14e8c:	e7eb      	b.n	14e66 <_sercom_get_async_baud_val+0x16e>
   14e8e:	4282      	cmp	r2, r0
   14e90:	d9e1      	bls.n	14e56 <_sercom_get_async_baud_val+0x15e>
   14e92:	4667      	mov	r7, ip
   14e94:	e7df      	b.n	14e56 <_sercom_get_async_baud_val+0x15e>
		if(baud_int > BAUD_INT_MAX) {
   14e96:	2080      	movs	r0, #128	; 0x80
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   14e98:	2140      	movs	r1, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
   14e9a:	0180      	lsls	r0, r0, #6
   14e9c:	4287      	cmp	r7, r0
   14e9e:	d900      	bls.n	14ea2 <_sercom_get_async_baud_val+0x1aa>
   14ea0:	e73a      	b.n	14d18 <_sercom_get_async_baud_val+0x20>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   14ea2:	4641      	mov	r1, r8
   14ea4:	0f49      	lsrs	r1, r1, #29
   14ea6:	000c      	movs	r4, r1
	for (i = 63; i >= 0; i--) {
   14ea8:	263f      	movs	r6, #63	; 0x3f
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   14eaa:	4641      	mov	r1, r8
	for (i = 63; i >= 0; i--) {
   14eac:	46b4      	mov	ip, r6
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   14eae:	00c9      	lsls	r1, r1, #3
		bit_shift = (uint64_t)1 << i;
   14eb0:	3e3e      	subs	r6, #62	; 0x3e
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   14eb2:	000d      	movs	r5, r1
		bit_shift = (uint64_t)1 << i;
   14eb4:	46b0      	mov	r8, r6
	uint64_t q = 0, r = 0, bit_shift;
   14eb6:	2100      	movs	r1, #0
		bit_shift = (uint64_t)1 << i;
   14eb8:	465e      	mov	r6, fp
	uint64_t q = 0, r = 0, bit_shift;
   14eba:	4689      	mov	r9, r1
		bit_shift = (uint64_t)1 << i;
   14ebc:	9705      	str	r7, [sp, #20]
	uint64_t q = 0, r = 0, bit_shift;
   14ebe:	2000      	movs	r0, #0
		bit_shift = (uint64_t)1 << i;
   14ec0:	4667      	mov	r7, ip
	uint64_t q = 0, r = 0, bit_shift;
   14ec2:	2100      	movs	r1, #0
		bit_shift = (uint64_t)1 << i;
   14ec4:	9604      	str	r6, [sp, #16]
   14ec6:	46a2      	mov	sl, r4
   14ec8:	46ac      	mov	ip, r5
   14eca:	e018      	b.n	14efe <_sercom_get_async_baud_val+0x206>
   14ecc:	0004      	movs	r4, r0
   14ece:	000d      	movs	r5, r1
   14ed0:	0020      	movs	r0, r4
   14ed2:	0029      	movs	r1, r5
			r = r - d;
   14ed4:	1aa4      	subs	r4, r4, r2
   14ed6:	419d      	sbcs	r5, r3
			q |= bit_shift;
   14ed8:	464e      	mov	r6, r9
			r = r - d;
   14eda:	9402      	str	r4, [sp, #8]
   14edc:	9503      	str	r5, [sp, #12]
			q |= bit_shift;
   14ede:	9c00      	ldr	r4, [sp, #0]
   14ee0:	4334      	orrs	r4, r6
   14ee2:	0026      	movs	r6, r4
   14ee4:	428b      	cmp	r3, r1
   14ee6:	d828      	bhi.n	14f3a <_sercom_get_async_baud_val+0x242>
   14ee8:	d025      	beq.n	14f36 <_sercom_get_async_baud_val+0x23e>
   14eea:	46b1      	mov	r9, r6
   14eec:	428b      	cmp	r3, r1
   14eee:	d81f      	bhi.n	14f30 <_sercom_get_async_baud_val+0x238>
   14ef0:	d01c      	beq.n	14f2c <_sercom_get_async_baud_val+0x234>
   14ef2:	9c02      	ldr	r4, [sp, #8]
   14ef4:	9d03      	ldr	r5, [sp, #12]
   14ef6:	0020      	movs	r0, r4
   14ef8:	0029      	movs	r1, r5
	for (i = 63; i >= 0; i--) {
   14efa:	3f01      	subs	r7, #1
   14efc:	d324      	bcc.n	14f48 <_sercom_get_async_baud_val+0x250>
		bit_shift = (uint64_t)1 << i;
   14efe:	2420      	movs	r4, #32
   14f00:	4264      	negs	r4, r4
   14f02:	193c      	adds	r4, r7, r4
   14f04:	d41b      	bmi.n	14f3e <_sercom_get_async_baud_val+0x246>
   14f06:	4645      	mov	r5, r8
   14f08:	40a5      	lsls	r5, r4
		r = r << 1;
   14f0a:	1800      	adds	r0, r0, r0
   14f0c:	4149      	adcs	r1, r1
			r |= 0x01;
   14f0e:	4644      	mov	r4, r8
		bit_shift = (uint64_t)1 << i;
   14f10:	4646      	mov	r6, r8
			r |= 0x01;
   14f12:	4304      	orrs	r4, r0
		bit_shift = (uint64_t)1 << i;
   14f14:	40be      	lsls	r6, r7
			r |= 0x01;
   14f16:	46a3      	mov	fp, r4
		if (n & bit_shift) {
   14f18:	4664      	mov	r4, ip
		bit_shift = (uint64_t)1 << i;
   14f1a:	9600      	str	r6, [sp, #0]
		if (n & bit_shift) {
   14f1c:	4034      	ands	r4, r6
   14f1e:	4656      	mov	r6, sl
   14f20:	4035      	ands	r5, r6
   14f22:	4325      	orrs	r5, r4
   14f24:	d0d2      	beq.n	14ecc <_sercom_get_async_baud_val+0x1d4>
   14f26:	465c      	mov	r4, fp
   14f28:	000d      	movs	r5, r1
   14f2a:	e7d1      	b.n	14ed0 <_sercom_get_async_baud_val+0x1d8>
   14f2c:	4282      	cmp	r2, r0
   14f2e:	d9e0      	bls.n	14ef2 <_sercom_get_async_baud_val+0x1fa>
   14f30:	0004      	movs	r4, r0
   14f32:	000d      	movs	r5, r1
   14f34:	e7df      	b.n	14ef6 <_sercom_get_async_baud_val+0x1fe>
   14f36:	4282      	cmp	r2, r0
   14f38:	d9d7      	bls.n	14eea <_sercom_get_async_baud_val+0x1f2>
   14f3a:	464e      	mov	r6, r9
   14f3c:	e7d5      	b.n	14eea <_sercom_get_async_baud_val+0x1f2>
		bit_shift = (uint64_t)1 << i;
   14f3e:	2420      	movs	r4, #32
   14f40:	4645      	mov	r5, r8
   14f42:	1be4      	subs	r4, r4, r7
   14f44:	40e5      	lsrs	r5, r4
   14f46:	e7e0      	b.n	14f0a <_sercom_get_async_baud_val+0x212>
   14f48:	9b04      	ldr	r3, [sp, #16]
   14f4a:	9f05      	ldr	r7, [sp, #20]
   14f4c:	469b      	mov	fp, r3
		baud_fp = temp1 - 8 * baud_int;
   14f4e:	00fb      	lsls	r3, r7, #3
   14f50:	1af3      	subs	r3, r6, r3
		baud_calculated = baud_int | (baud_fp << 13);
   14f52:	b2db      	uxtb	r3, r3
   14f54:	035b      	lsls	r3, r3, #13
   14f56:	431f      	orrs	r7, r3
   14f58:	b2bf      	uxth	r7, r7
   14f5a:	e74a      	b.n	14df2 <_sercom_get_async_baud_val+0xfa>
   14f5c:	0001c3e5 	.word	0x0001c3e5

00014f60 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   14f60:	b530      	push	{r4, r5, lr}
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   14f62:	4c0e      	ldr	r4, [pc, #56]	; (14f9c <sercom_set_gclk_generator+0x3c>)
{
   14f64:	b083      	sub	sp, #12
	if (!_sercom_config.generator_is_set || force_change) {
   14f66:	7823      	ldrb	r3, [r4, #0]
{
   14f68:	0005      	movs	r5, r0
	if (!_sercom_config.generator_is_set || force_change) {
   14f6a:	2b00      	cmp	r3, #0
   14f6c:	d006      	beq.n	14f7c <sercom_set_gclk_generator+0x1c>
   14f6e:	2900      	cmp	r1, #0
   14f70:	d104      	bne.n	14f7c <sercom_set_gclk_generator+0x1c>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
   14f72:	7863      	ldrb	r3, [r4, #1]
   14f74:	4283      	cmp	r3, r0
   14f76:	d00f      	beq.n	14f98 <sercom_set_gclk_generator+0x38>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   14f78:	201d      	movs	r0, #29
   14f7a:	e00b      	b.n	14f94 <sercom_set_gclk_generator+0x34>
		gclk_chan_conf.source_generator = generator_source;
   14f7c:	a901      	add	r1, sp, #4
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   14f7e:	2011      	movs	r0, #17
   14f80:	4b07      	ldr	r3, [pc, #28]	; (14fa0 <sercom_set_gclk_generator+0x40>)
		gclk_chan_conf.source_generator = generator_source;
   14f82:	700d      	strb	r5, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   14f84:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   14f86:	2011      	movs	r0, #17
   14f88:	4b06      	ldr	r3, [pc, #24]	; (14fa4 <sercom_set_gclk_generator+0x44>)
   14f8a:	4798      	blx	r3
		_sercom_config.generator_is_set = true;
   14f8c:	2301      	movs	r3, #1
		return STATUS_OK;
   14f8e:	2000      	movs	r0, #0
		_sercom_config.generator_source = generator_source;
   14f90:	7065      	strb	r5, [r4, #1]
		_sercom_config.generator_is_set = true;
   14f92:	7023      	strb	r3, [r4, #0]
}
   14f94:	b003      	add	sp, #12
   14f96:	bd30      	pop	{r4, r5, pc}
		return STATUS_OK;
   14f98:	2000      	movs	r0, #0
   14f9a:	e7fb      	b.n	14f94 <sercom_set_gclk_generator+0x34>
   14f9c:	20000f78 	.word	0x20000f78
   14fa0:	00015865 	.word	0x00015865
   14fa4:	000158a5 	.word	0x000158a5

00014fa8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
   14fa8:	4b3a      	ldr	r3, [pc, #232]	; (15094 <_sercom_get_default_pad+0xec>)
   14faa:	4298      	cmp	r0, r3
   14fac:	d044      	beq.n	15038 <_sercom_get_default_pad+0x90>
   14fae:	d90a      	bls.n	14fc6 <_sercom_get_default_pad+0x1e>
   14fb0:	4b39      	ldr	r3, [pc, #228]	; (15098 <_sercom_get_default_pad+0xf0>)
   14fb2:	4298      	cmp	r0, r3
   14fb4:	d018      	beq.n	14fe8 <_sercom_get_default_pad+0x40>
   14fb6:	4b39      	ldr	r3, [pc, #228]	; (1509c <_sercom_get_default_pad+0xf4>)
   14fb8:	4298      	cmp	r0, r3
   14fba:	d033      	beq.n	15024 <_sercom_get_default_pad+0x7c>
   14fbc:	4b38      	ldr	r3, [pc, #224]	; (150a0 <_sercom_get_default_pad+0xf8>)
   14fbe:	4298      	cmp	r0, r3
   14fc0:	d01c      	beq.n	14ffc <_sercom_get_default_pad+0x54>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
   14fc2:	2000      	movs	r0, #0
}
   14fc4:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
   14fc6:	2384      	movs	r3, #132	; 0x84
   14fc8:	05db      	lsls	r3, r3, #23
   14fca:	4298      	cmp	r0, r3
   14fcc:	d020      	beq.n	15010 <_sercom_get_default_pad+0x68>
   14fce:	4b35      	ldr	r3, [pc, #212]	; (150a4 <_sercom_get_default_pad+0xfc>)
   14fd0:	4298      	cmp	r0, r3
   14fd2:	d1f6      	bne.n	14fc2 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   14fd4:	2901      	cmp	r1, #1
   14fd6:	d043      	beq.n	15060 <_sercom_get_default_pad+0xb8>
   14fd8:	2900      	cmp	r1, #0
   14fda:	d03f      	beq.n	1505c <_sercom_get_default_pad+0xb4>
   14fdc:	2902      	cmp	r1, #2
   14fde:	d03b      	beq.n	15058 <_sercom_get_default_pad+0xb0>
   14fe0:	2903      	cmp	r1, #3
   14fe2:	d1ee      	bne.n	14fc2 <_sercom_get_default_pad+0x1a>
   14fe4:	4830      	ldr	r0, [pc, #192]	; (150a8 <_sercom_get_default_pad+0x100>)
   14fe6:	e7ed      	b.n	14fc4 <_sercom_get_default_pad+0x1c>
   14fe8:	2901      	cmp	r1, #1
   14fea:	d031      	beq.n	15050 <_sercom_get_default_pad+0xa8>
   14fec:	2900      	cmp	r1, #0
   14fee:	d02d      	beq.n	1504c <_sercom_get_default_pad+0xa4>
   14ff0:	2902      	cmp	r1, #2
   14ff2:	d02f      	beq.n	15054 <_sercom_get_default_pad+0xac>
   14ff4:	2903      	cmp	r1, #3
   14ff6:	d1e4      	bne.n	14fc2 <_sercom_get_default_pad+0x1a>
   14ff8:	482c      	ldr	r0, [pc, #176]	; (150ac <_sercom_get_default_pad+0x104>)
   14ffa:	e7e3      	b.n	14fc4 <_sercom_get_default_pad+0x1c>
   14ffc:	2901      	cmp	r1, #1
   14ffe:	d03f      	beq.n	15080 <_sercom_get_default_pad+0xd8>
   15000:	2900      	cmp	r1, #0
   15002:	d03b      	beq.n	1507c <_sercom_get_default_pad+0xd4>
   15004:	2902      	cmp	r1, #2
   15006:	d037      	beq.n	15078 <_sercom_get_default_pad+0xd0>
   15008:	2903      	cmp	r1, #3
   1500a:	d1da      	bne.n	14fc2 <_sercom_get_default_pad+0x1a>
   1500c:	4828      	ldr	r0, [pc, #160]	; (150b0 <_sercom_get_default_pad+0x108>)
   1500e:	e7d9      	b.n	14fc4 <_sercom_get_default_pad+0x1c>
   15010:	2901      	cmp	r1, #1
   15012:	d03d      	beq.n	15090 <_sercom_get_default_pad+0xe8>
   15014:	2900      	cmp	r1, #0
   15016:	d039      	beq.n	1508c <_sercom_get_default_pad+0xe4>
   15018:	2902      	cmp	r1, #2
   1501a:	d02b      	beq.n	15074 <_sercom_get_default_pad+0xcc>
   1501c:	2903      	cmp	r1, #3
   1501e:	d1d0      	bne.n	14fc2 <_sercom_get_default_pad+0x1a>
   15020:	4824      	ldr	r0, [pc, #144]	; (150b4 <_sercom_get_default_pad+0x10c>)
   15022:	e7cf      	b.n	14fc4 <_sercom_get_default_pad+0x1c>
   15024:	2901      	cmp	r1, #1
   15026:	d023      	beq.n	15070 <_sercom_get_default_pad+0xc8>
   15028:	2900      	cmp	r1, #0
   1502a:	d01f      	beq.n	1506c <_sercom_get_default_pad+0xc4>
   1502c:	2902      	cmp	r1, #2
   1502e:	d01b      	beq.n	15068 <_sercom_get_default_pad+0xc0>
   15030:	2903      	cmp	r1, #3
   15032:	d1c6      	bne.n	14fc2 <_sercom_get_default_pad+0x1a>
   15034:	4820      	ldr	r0, [pc, #128]	; (150b8 <_sercom_get_default_pad+0x110>)
   15036:	e7c5      	b.n	14fc4 <_sercom_get_default_pad+0x1c>
   15038:	2901      	cmp	r1, #1
   1503a:	d025      	beq.n	15088 <_sercom_get_default_pad+0xe0>
   1503c:	2900      	cmp	r1, #0
   1503e:	d021      	beq.n	15084 <_sercom_get_default_pad+0xdc>
   15040:	2902      	cmp	r1, #2
   15042:	d00f      	beq.n	15064 <_sercom_get_default_pad+0xbc>
   15044:	2903      	cmp	r1, #3
   15046:	d1bc      	bne.n	14fc2 <_sercom_get_default_pad+0x1a>
   15048:	481c      	ldr	r0, [pc, #112]	; (150bc <_sercom_get_default_pad+0x114>)
   1504a:	e7bb      	b.n	14fc4 <_sercom_get_default_pad+0x1c>
   1504c:	481c      	ldr	r0, [pc, #112]	; (150c0 <_sercom_get_default_pad+0x118>)
   1504e:	e7b9      	b.n	14fc4 <_sercom_get_default_pad+0x1c>
   15050:	481c      	ldr	r0, [pc, #112]	; (150c4 <_sercom_get_default_pad+0x11c>)
   15052:	e7b7      	b.n	14fc4 <_sercom_get_default_pad+0x1c>
   15054:	481c      	ldr	r0, [pc, #112]	; (150c8 <_sercom_get_default_pad+0x120>)
   15056:	e7b5      	b.n	14fc4 <_sercom_get_default_pad+0x1c>
   15058:	481c      	ldr	r0, [pc, #112]	; (150cc <_sercom_get_default_pad+0x124>)
   1505a:	e7b3      	b.n	14fc4 <_sercom_get_default_pad+0x1c>
   1505c:	2003      	movs	r0, #3
   1505e:	e7b1      	b.n	14fc4 <_sercom_get_default_pad+0x1c>
   15060:	481b      	ldr	r0, [pc, #108]	; (150d0 <_sercom_get_default_pad+0x128>)
   15062:	e7af      	b.n	14fc4 <_sercom_get_default_pad+0x1c>
   15064:	481b      	ldr	r0, [pc, #108]	; (150d4 <_sercom_get_default_pad+0x12c>)
   15066:	e7ad      	b.n	14fc4 <_sercom_get_default_pad+0x1c>
   15068:	481b      	ldr	r0, [pc, #108]	; (150d8 <_sercom_get_default_pad+0x130>)
   1506a:	e7ab      	b.n	14fc4 <_sercom_get_default_pad+0x1c>
   1506c:	481b      	ldr	r0, [pc, #108]	; (150dc <_sercom_get_default_pad+0x134>)
   1506e:	e7a9      	b.n	14fc4 <_sercom_get_default_pad+0x1c>
   15070:	481b      	ldr	r0, [pc, #108]	; (150e0 <_sercom_get_default_pad+0x138>)
   15072:	e7a7      	b.n	14fc4 <_sercom_get_default_pad+0x1c>
   15074:	481b      	ldr	r0, [pc, #108]	; (150e4 <_sercom_get_default_pad+0x13c>)
   15076:	e7a5      	b.n	14fc4 <_sercom_get_default_pad+0x1c>
   15078:	481b      	ldr	r0, [pc, #108]	; (150e8 <_sercom_get_default_pad+0x140>)
   1507a:	e7a3      	b.n	14fc4 <_sercom_get_default_pad+0x1c>
   1507c:	481b      	ldr	r0, [pc, #108]	; (150ec <_sercom_get_default_pad+0x144>)
   1507e:	e7a1      	b.n	14fc4 <_sercom_get_default_pad+0x1c>
   15080:	481b      	ldr	r0, [pc, #108]	; (150f0 <_sercom_get_default_pad+0x148>)
   15082:	e79f      	b.n	14fc4 <_sercom_get_default_pad+0x1c>
   15084:	481b      	ldr	r0, [pc, #108]	; (150f4 <_sercom_get_default_pad+0x14c>)
   15086:	e79d      	b.n	14fc4 <_sercom_get_default_pad+0x1c>
   15088:	481b      	ldr	r0, [pc, #108]	; (150f8 <_sercom_get_default_pad+0x150>)
   1508a:	e79b      	b.n	14fc4 <_sercom_get_default_pad+0x1c>
   1508c:	481b      	ldr	r0, [pc, #108]	; (150fc <_sercom_get_default_pad+0x154>)
   1508e:	e799      	b.n	14fc4 <_sercom_get_default_pad+0x1c>
   15090:	481b      	ldr	r0, [pc, #108]	; (15100 <_sercom_get_default_pad+0x158>)
   15092:	e797      	b.n	14fc4 <_sercom_get_default_pad+0x1c>
   15094:	42000800 	.word	0x42000800
   15098:	42001000 	.word	0x42001000
   1509c:	43000400 	.word	0x43000400
   150a0:	42000c00 	.word	0x42000c00
   150a4:	42000400 	.word	0x42000400
   150a8:	001f0003 	.word	0x001f0003
   150ac:	000f0003 	.word	0x000f0003
   150b0:	00130003 	.word	0x00130003
   150b4:	00070003 	.word	0x00070003
   150b8:	00190003 	.word	0x00190003
   150bc:	000b0003 	.word	0x000b0003
   150c0:	000c0003 	.word	0x000c0003
   150c4:	000d0003 	.word	0x000d0003
   150c8:	000e0003 	.word	0x000e0003
   150cc:	001e0003 	.word	0x001e0003
   150d0:	00010003 	.word	0x00010003
   150d4:	000a0003 	.word	0x000a0003
   150d8:	00180003 	.word	0x00180003
   150dc:	00160003 	.word	0x00160003
   150e0:	00170003 	.word	0x00170003
   150e4:	00060003 	.word	0x00060003
   150e8:	00120003 	.word	0x00120003
   150ec:	00100003 	.word	0x00100003
   150f0:	00110003 	.word	0x00110003
   150f4:	00080003 	.word	0x00080003
   150f8:	00090003 	.word	0x00090003
   150fc:	00040003 	.word	0x00040003
   15100:	00050003 	.word	0x00050003

00015104 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   15104:	b570      	push	{r4, r5, r6, lr}
   15106:	b086      	sub	sp, #24
   15108:	0001      	movs	r1, r0
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   1510a:	4668      	mov	r0, sp
   1510c:	4b15      	ldr	r3, [pc, #84]	; (15164 <_sercom_get_sercom_inst_index+0x60>)
   1510e:	cb70      	ldmia	r3!, {r4, r5, r6}
   15110:	c070      	stmia	r0!, {r4, r5, r6}
   15112:	cb70      	ldmia	r3!, {r4, r5, r6}
   15114:	c070      	stmia	r0!, {r4, r5, r6}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   15116:	9b00      	ldr	r3, [sp, #0]
   15118:	428b      	cmp	r3, r1
   1511a:	d011      	beq.n	15140 <_sercom_get_sercom_inst_index+0x3c>
   1511c:	9b01      	ldr	r3, [sp, #4]
   1511e:	428b      	cmp	r3, r1
   15120:	d011      	beq.n	15146 <_sercom_get_sercom_inst_index+0x42>
   15122:	9b02      	ldr	r3, [sp, #8]
   15124:	428b      	cmp	r3, r1
   15126:	d011      	beq.n	1514c <_sercom_get_sercom_inst_index+0x48>
   15128:	9b03      	ldr	r3, [sp, #12]
   1512a:	428b      	cmp	r3, r1
   1512c:	d011      	beq.n	15152 <_sercom_get_sercom_inst_index+0x4e>
   1512e:	9b04      	ldr	r3, [sp, #16]
   15130:	428b      	cmp	r3, r1
   15132:	d011      	beq.n	15158 <_sercom_get_sercom_inst_index+0x54>
   15134:	9b05      	ldr	r3, [sp, #20]
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   15136:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   15138:	428b      	cmp	r3, r1
   1513a:	d010      	beq.n	1515e <_sercom_get_sercom_inst_index+0x5a>
}
   1513c:	b006      	add	sp, #24
   1513e:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   15140:	2000      	movs	r0, #0
			return i;
   15142:	b2c0      	uxtb	r0, r0
   15144:	e7fa      	b.n	1513c <_sercom_get_sercom_inst_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   15146:	2001      	movs	r0, #1
			return i;
   15148:	b2c0      	uxtb	r0, r0
   1514a:	e7f7      	b.n	1513c <_sercom_get_sercom_inst_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1514c:	2002      	movs	r0, #2
			return i;
   1514e:	b2c0      	uxtb	r0, r0
   15150:	e7f4      	b.n	1513c <_sercom_get_sercom_inst_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   15152:	2003      	movs	r0, #3
			return i;
   15154:	b2c0      	uxtb	r0, r0
   15156:	e7f1      	b.n	1513c <_sercom_get_sercom_inst_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   15158:	2004      	movs	r0, #4
			return i;
   1515a:	b2c0      	uxtb	r0, r0
   1515c:	e7ee      	b.n	1513c <_sercom_get_sercom_inst_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1515e:	3005      	adds	r0, #5
			return i;
   15160:	b2c0      	uxtb	r0, r0
   15162:	e7eb      	b.n	1513c <_sercom_get_sercom_inst_index+0x38>
   15164:	00024094 	.word	0x00024094

00015168 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
   15168:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
   1516a:	4b09      	ldr	r3, [pc, #36]	; (15190 <delay_init+0x28>)
   1516c:	2000      	movs	r0, #0
   1516e:	4798      	blx	r3
	cycles_per_ms /= 1000;
   15170:	21fa      	movs	r1, #250	; 0xfa
   15172:	4c08      	ldr	r4, [pc, #32]	; (15194 <delay_init+0x2c>)
   15174:	0089      	lsls	r1, r1, #2
	cycles_per_ms = system_gclk_gen_get_hz(0);
   15176:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
   15178:	47a0      	blx	r4
   1517a:	4b07      	ldr	r3, [pc, #28]	; (15198 <delay_init+0x30>)
	cycles_per_us = cycles_per_ms / 1000;
   1517c:	4907      	ldr	r1, [pc, #28]	; (1519c <delay_init+0x34>)
	cycles_per_ms /= 1000;
   1517e:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
   15180:	0028      	movs	r0, r5
   15182:	47a0      	blx	r4

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   15184:	2205      	movs	r2, #5
	cycles_per_us = cycles_per_ms / 1000;
   15186:	4b06      	ldr	r3, [pc, #24]	; (151a0 <delay_init+0x38>)
   15188:	6018      	str	r0, [r3, #0]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   1518a:	4b06      	ldr	r3, [pc, #24]	; (151a4 <delay_init+0x3c>)
   1518c:	601a      	str	r2, [r3, #0]
}
   1518e:	bd70      	pop	{r4, r5, r6, pc}
   15190:	000157f9 	.word	0x000157f9
   15194:	0001bf8d 	.word	0x0001bf8d
   15198:	200001c8 	.word	0x200001c8
   1519c:	000f4240 	.word	0x000f4240
   151a0:	200001cc 	.word	0x200001cc
   151a4:	e000e010 	.word	0xe000e010

000151a8 <delay_cycles_us>:
{
	if (n > 0) {
		SysTick->LOAD = n;
		SysTick->VAL = 0;

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   151a8:	2180      	movs	r1, #128	; 0x80
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
   151aa:	b530      	push	{r4, r5, lr}
		SysTick->VAL = 0;
   151ac:	2500      	movs	r5, #0
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
   151ae:	4b08      	ldr	r3, [pc, #32]	; (151d0 <delay_cycles_us+0x28>)
		SysTick->LOAD = n;
   151b0:	4a08      	ldr	r2, [pc, #32]	; (151d4 <delay_cycles_us+0x2c>)
   151b2:	681c      	ldr	r4, [r3, #0]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   151b4:	0249      	lsls	r1, r1, #9
	while (n--) {
   151b6:	3801      	subs	r0, #1
   151b8:	d308      	bcc.n	151cc <delay_cycles_us+0x24>
	if (n > 0) {
   151ba:	2c00      	cmp	r4, #0
   151bc:	d0fb      	beq.n	151b6 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
   151be:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
   151c0:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   151c2:	6813      	ldr	r3, [r2, #0]
   151c4:	420b      	tst	r3, r1
   151c6:	d0fc      	beq.n	151c2 <delay_cycles_us+0x1a>
   151c8:	3801      	subs	r0, #1
   151ca:	d2f6      	bcs.n	151ba <delay_cycles_us+0x12>
	}
}
   151cc:	bd30      	pop	{r4, r5, pc}
   151ce:	46c0      	nop			; (mov r8, r8)
   151d0:	200001cc 	.word	0x200001cc
   151d4:	e000e010 	.word	0xe000e010

000151d8 <delay_cycles_ms>:
   151d8:	2180      	movs	r1, #128	; 0x80
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
   151da:	b530      	push	{r4, r5, lr}
		SysTick->VAL = 0;
   151dc:	2500      	movs	r5, #0
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
   151de:	4b08      	ldr	r3, [pc, #32]	; (15200 <delay_cycles_ms+0x28>)
		SysTick->LOAD = n;
   151e0:	4a08      	ldr	r2, [pc, #32]	; (15204 <delay_cycles_ms+0x2c>)
   151e2:	681c      	ldr	r4, [r3, #0]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   151e4:	0249      	lsls	r1, r1, #9
	while (n--) {
   151e6:	3801      	subs	r0, #1
   151e8:	d308      	bcc.n	151fc <delay_cycles_ms+0x24>
	if (n > 0) {
   151ea:	2c00      	cmp	r4, #0
   151ec:	d0fb      	beq.n	151e6 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
   151ee:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
   151f0:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   151f2:	6813      	ldr	r3, [r2, #0]
   151f4:	420b      	tst	r3, r1
   151f6:	d0fc      	beq.n	151f2 <delay_cycles_ms+0x1a>
   151f8:	3801      	subs	r0, #1
   151fa:	d2f6      	bcs.n	151ea <delay_cycles_ms+0x12>
	}
}
   151fc:	bd30      	pop	{r4, r5, pc}
   151fe:	46c0      	nop			; (mov r8, r8)
   15200:	200001c8 	.word	0x200001c8
   15204:	e000e010 	.word	0xe000e010

00015208 <port_pin_set_config>:
	config->mux_position = SYSTEM_PINMUX_GPIO;
   15208:	2280      	movs	r2, #128	; 0x80
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   1520a:	b500      	push	{lr}
   1520c:	b083      	sub	sp, #12
   1520e:	ab01      	add	r3, sp, #4
   15210:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   15212:	780a      	ldrb	r2, [r1, #0]
   15214:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   15216:	784a      	ldrb	r2, [r1, #1]
   15218:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   1521a:	788a      	ldrb	r2, [r1, #2]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   1521c:	0019      	movs	r1, r3
	pinmux_config.powersave    = config->powersave;
   1521e:	70da      	strb	r2, [r3, #3]
	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   15220:	4b01      	ldr	r3, [pc, #4]	; (15228 <port_pin_set_config+0x20>)
   15222:	4798      	blx	r3
}
   15224:	b003      	add	sp, #12
   15226:	bd00      	pop	{pc}
   15228:	00015961 	.word	0x00015961

0001522c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   1522c:	b510      	push	{r4, lr}
	switch (clock_source) {
   1522e:	2808      	cmp	r0, #8
   15230:	d82d      	bhi.n	1528e <system_clock_source_get_hz+0x62>
   15232:	4b1c      	ldr	r3, [pc, #112]	; (152a4 <system_clock_source_get_hz+0x78>)
   15234:	0080      	lsls	r0, r0, #2
   15236:	581b      	ldr	r3, [r3, r0]
   15238:	469f      	mov	pc, r3

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   1523a:	2080      	movs	r0, #128	; 0x80
   1523c:	0200      	lsls	r0, r0, #8
		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
	}
}
   1523e:	bd10      	pop	{r4, pc}
		return _system_clock_inst.xosc32k.frequency;
   15240:	4b19      	ldr	r3, [pc, #100]	; (152a8 <system_clock_source_get_hz+0x7c>)
   15242:	6958      	ldr	r0, [r3, #20]
   15244:	e7fb      	b.n	1523e <system_clock_source_get_hz+0x12>
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
   15246:	4b19      	ldr	r3, [pc, #100]	; (152ac <system_clock_source_get_hz+0x80>)
   15248:	7d18      	ldrb	r0, [r3, #20]
   1524a:	0700      	lsls	r0, r0, #28
   1524c:	0f80      	lsrs	r0, r0, #30
   1524e:	1c43      	adds	r3, r0, #1
   15250:	4817      	ldr	r0, [pc, #92]	; (152b0 <system_clock_source_get_hz+0x84>)
   15252:	4358      	muls	r0, r3
   15254:	e7f3      	b.n	1523e <system_clock_source_get_hz+0x12>
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
   15256:	4c14      	ldr	r4, [pc, #80]	; (152a8 <system_clock_source_get_hz+0x7c>)
			return 0;
   15258:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
   1525a:	6823      	ldr	r3, [r4, #0]
   1525c:	079b      	lsls	r3, r3, #30
   1525e:	d5ee      	bpl.n	1523e <system_clock_source_get_hz+0x12>
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
   15260:	2280      	movs	r2, #128	; 0x80
   15262:	4912      	ldr	r1, [pc, #72]	; (152ac <system_clock_source_get_hz+0x80>)
   15264:	0052      	lsls	r2, r2, #1
   15266:	68cb      	ldr	r3, [r1, #12]
   15268:	4213      	tst	r3, r2
   1526a:	d0fc      	beq.n	15266 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
   1526c:	6823      	ldr	r3, [r4, #0]
   1526e:	075b      	lsls	r3, r3, #29
   15270:	d40f      	bmi.n	15292 <system_clock_source_get_hz+0x66>
		return 48000000UL;
   15272:	4810      	ldr	r0, [pc, #64]	; (152b4 <system_clock_source_get_hz+0x88>)
   15274:	e7e3      	b.n	1523e <system_clock_source_get_hz+0x12>
		return _system_clock_inst.xosc.frequency;
   15276:	4b0c      	ldr	r3, [pc, #48]	; (152a8 <system_clock_source_get_hz+0x7c>)
   15278:	6918      	ldr	r0, [r3, #16]
   1527a:	e7e0      	b.n	1523e <system_clock_source_get_hz+0x12>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
   1527c:	2328      	movs	r3, #40	; 0x28
   1527e:	4a0b      	ldr	r2, [pc, #44]	; (152ac <system_clock_source_get_hz+0x80>)
			return 0;
   15280:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
   15282:	5cd3      	ldrb	r3, [r2, r3]
   15284:	079b      	lsls	r3, r3, #30
   15286:	d5da      	bpl.n	1523e <system_clock_source_get_hz+0x12>
		return _system_clock_inst.dpll.frequency;
   15288:	4b07      	ldr	r3, [pc, #28]	; (152a8 <system_clock_source_get_hz+0x7c>)
   1528a:	68d8      	ldr	r0, [r3, #12]
   1528c:	e7d7      	b.n	1523e <system_clock_source_get_hz+0x12>
		return 0;
   1528e:	2000      	movs	r0, #0
   15290:	e7d5      	b.n	1523e <system_clock_source_get_hz+0x12>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
   15292:	4b09      	ldr	r3, [pc, #36]	; (152b8 <system_clock_source_get_hz+0x8c>)
   15294:	2000      	movs	r0, #0
   15296:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
   15298:	68a3      	ldr	r3, [r4, #8]
   1529a:	041b      	lsls	r3, r3, #16
   1529c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
   1529e:	4358      	muls	r0, r3
   152a0:	e7cd      	b.n	1523e <system_clock_source_get_hz+0x12>
   152a2:	46c0      	nop			; (mov r8, r8)
   152a4:	000240ac 	.word	0x000240ac
   152a8:	20000f7c 	.word	0x20000f7c
   152ac:	40000c00 	.word	0x40000c00
   152b0:	003d0900 	.word	0x003d0900
   152b4:	02dc6c00 	.word	0x02dc6c00
   152b8:	000158dd 	.word	0x000158dd

000152bc <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
   152bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   152be:	46d6      	mov	lr, sl
   152c0:	464f      	mov	r7, r9
   152c2:	4646      	mov	r6, r8
   152c4:	b5c0      	push	{r6, r7, lr}
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;

	temp.bit.STARTUP = config->startup_time;

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
   152c6:	7801      	ldrb	r1, [r0, #0]
	temp.bit.STARTUP = config->startup_time;
   152c8:	7845      	ldrb	r5, [r0, #1]
	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
   152ca:	424c      	negs	r4, r1
   152cc:	414c      	adcs	r4, r1
   152ce:	46a1      	mov	r9, r4
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
   152d0:	7881      	ldrb	r1, [r0, #2]
	temp.bit.EN32K = config->enable_32khz_output;

	temp.bit.ONDEMAND = config->on_demand;
   152d2:	7a46      	ldrb	r6, [r0, #9]
	temp.bit.EN1K = config->enable_1khz_output;
   152d4:	468c      	mov	ip, r1
	temp.bit.EN32K = config->enable_32khz_output;
   152d6:	78c1      	ldrb	r1, [r0, #3]
	temp.bit.RUNSTDBY = config->run_in_standby;
   152d8:	7a07      	ldrb	r7, [r0, #8]
	temp.bit.WRTLOCK  = config->write_once;
   152da:	7a84      	ldrb	r4, [r0, #10]
	temp.bit.EN32K = config->enable_32khz_output;
   152dc:	4688      	mov	r8, r1

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
   152de:	6840      	ldr	r0, [r0, #4]
   152e0:	4919      	ldr	r1, [pc, #100]	; (15348 <system_clock_source_xosc32k_set_config+0x8c>)
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
   152e2:	4b1a      	ldr	r3, [pc, #104]	; (1534c <system_clock_source_xosc32k_set_config+0x90>)

	OSC32KCTRL->XOSC32K = temp;
   152e4:	2204      	movs	r2, #4
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
   152e6:	469a      	mov	sl, r3
   152e8:	695b      	ldr	r3, [r3, #20]
	_system_clock_inst.xosc32k.frequency = config->frequency;
   152ea:	6148      	str	r0, [r1, #20]
	OSC32KCTRL->XOSC32K = temp;
   152ec:	4648      	mov	r0, r9
   152ee:	4393      	bics	r3, r2
   152f0:	0080      	lsls	r0, r0, #2
   152f2:	2101      	movs	r1, #1
   152f4:	4303      	orrs	r3, r0
   152f6:	4640      	mov	r0, r8
   152f8:	3204      	adds	r2, #4
   152fa:	4008      	ands	r0, r1
   152fc:	00c0      	lsls	r0, r0, #3
   152fe:	4393      	bics	r3, r2
   15300:	4303      	orrs	r3, r0
   15302:	4660      	mov	r0, ip
   15304:	3208      	adds	r2, #8
   15306:	4008      	ands	r0, r1
   15308:	0100      	lsls	r0, r0, #4
   1530a:	4393      	bics	r3, r2
   1530c:	4303      	orrs	r3, r0
   1530e:	2040      	movs	r0, #64	; 0x40
   15310:	4652      	mov	r2, sl
   15312:	400f      	ands	r7, r1
   15314:	01bf      	lsls	r7, r7, #6
   15316:	4383      	bics	r3, r0
   15318:	433b      	orrs	r3, r7
   1531a:	3040      	adds	r0, #64	; 0x40
   1531c:	400e      	ands	r6, r1
   1531e:	4383      	bics	r3, r0
   15320:	3879      	subs	r0, #121	; 0x79
   15322:	01f6      	lsls	r6, r6, #7
   15324:	4005      	ands	r5, r0
   15326:	480a      	ldr	r0, [pc, #40]	; (15350 <system_clock_source_xosc32k_set_config+0x94>)
   15328:	4333      	orrs	r3, r6
   1532a:	022d      	lsls	r5, r5, #8
   1532c:	4003      	ands	r3, r0
   1532e:	4809      	ldr	r0, [pc, #36]	; (15354 <system_clock_source_xosc32k_set_config+0x98>)
   15330:	432b      	orrs	r3, r5
   15332:	4021      	ands	r1, r4
   15334:	0309      	lsls	r1, r1, #12
   15336:	4003      	ands	r3, r0
   15338:	430b      	orrs	r3, r1
   1533a:	6153      	str	r3, [r2, #20]
}
   1533c:	bc1c      	pop	{r2, r3, r4}
   1533e:	4690      	mov	r8, r2
   15340:	4699      	mov	r9, r3
   15342:	46a2      	mov	sl, r4
   15344:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15346:	46c0      	nop			; (mov r8, r8)
   15348:	20000f7c 	.word	0x20000f7c
   1534c:	40001000 	.word	0x40001000
   15350:	fffff8ff 	.word	0xfffff8ff
   15354:	ffffefff 	.word	0xffffefff

00015358 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
   15358:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
   1535a:	7a83      	ldrb	r3, [r0, #10]
			OSCCTRL_DFLLVAL_FINE(config->fine_value);
   1535c:	8982      	ldrh	r2, [r0, #12]
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
   1535e:	069b      	lsls	r3, r3, #26
			OSCCTRL_DFLLVAL_FINE(config->fine_value);
   15360:	0592      	lsls	r2, r2, #22
   15362:	0d92      	lsrs	r2, r2, #22
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
   15364:	0c1b      	lsrs	r3, r3, #16
   15366:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
   15368:	4a18      	ldr	r2, [pc, #96]	; (153cc <system_clock_source_dfll_set_config+0x74>)
   1536a:	6053      	str	r3, [r2, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
   1536c:	7a41      	ldrb	r1, [r0, #9]
   1536e:	7a03      	ldrb	r3, [r0, #8]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
   15370:	88c4      	ldrh	r4, [r0, #6]
			(uint32_t)config->wakeup_lock     |
   15372:	430b      	orrs	r3, r1
			(uint32_t)config->quick_lock      |
   15374:	8881      	ldrh	r1, [r0, #4]
   15376:	4321      	orrs	r1, r4
   15378:	430b      	orrs	r3, r1
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
   1537a:	7841      	ldrb	r1, [r0, #1]
   1537c:	01c9      	lsls	r1, r1, #7
			(uint32_t)config->chill_cycle     |
   1537e:	430b      	orrs	r3, r1
			((uint32_t)config->run_in_stanby << OSCCTRL_DFLLCTRL_RUNSTDBY_Pos);
   15380:	7881      	ldrb	r1, [r0, #2]
   15382:	0189      	lsls	r1, r1, #6
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
   15384:	430b      	orrs	r3, r1
	_system_clock_inst.dfll.control =
   15386:	6013      	str	r3, [r2, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
   15388:	7803      	ldrb	r3, [r0, #0]
   1538a:	2b04      	cmp	r3, #4
   1538c:	d010      	beq.n	153b0 <system_clock_source_dfll_set_config+0x58>
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
   1538e:	2b20      	cmp	r3, #32
   15390:	d10d      	bne.n	153ae <system_clock_source_dfll_set_config+0x56>

		_system_clock_inst.dfll.mul =
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   15392:	7b83      	ldrb	r3, [r0, #14]
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
   15394:	8a41      	ldrh	r1, [r0, #18]
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   15396:	069b      	lsls	r3, r3, #26
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   15398:	430b      	orrs	r3, r1
   1539a:	8a01      	ldrh	r1, [r0, #16]
   1539c:	480c      	ldr	r0, [pc, #48]	; (153d0 <system_clock_source_dfll_set_config+0x78>)
   1539e:	0409      	lsls	r1, r1, #16
   153a0:	4001      	ands	r1, r0
   153a2:	430b      	orrs	r3, r1
		_system_clock_inst.dfll.mul =
   153a4:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
   153a6:	6811      	ldr	r1, [r2, #0]
   153a8:	4b0a      	ldr	r3, [pc, #40]	; (153d4 <system_clock_source_dfll_set_config+0x7c>)
   153aa:	430b      	orrs	r3, r1
   153ac:	6013      	str	r3, [r2, #0]
				OSCCTRL_DFLLCTRL_MODE | OSCCTRL_DFLLCTRL_BPLCKC;
	}
}
   153ae:	bd10      	pop	{r4, pc}
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   153b0:	7b81      	ldrb	r1, [r0, #14]
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
   153b2:	8a44      	ldrh	r4, [r0, #18]
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   153b4:	0689      	lsls	r1, r1, #26
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   153b6:	8a00      	ldrh	r0, [r0, #16]
   153b8:	4321      	orrs	r1, r4
   153ba:	4c05      	ldr	r4, [pc, #20]	; (153d0 <system_clock_source_dfll_set_config+0x78>)
   153bc:	0400      	lsls	r0, r0, #16
   153be:	4020      	ands	r0, r4
   153c0:	4301      	orrs	r1, r0
		_system_clock_inst.dfll.mul =
   153c2:	6091      	str	r1, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
   153c4:	6811      	ldr	r1, [r2, #0]
   153c6:	430b      	orrs	r3, r1
   153c8:	6013      	str	r3, [r2, #0]
   153ca:	e7f0      	b.n	153ae <system_clock_source_dfll_set_config+0x56>
   153cc:	20000f7c 	.word	0x20000f7c
   153d0:	03ff0000 	.word	0x03ff0000
   153d4:	00000424 	.word	0x00000424

000153d8 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
   153d8:	2808      	cmp	r0, #8
   153da:	d850      	bhi.n	1547e <system_clock_source_enable+0xa6>
   153dc:	4b29      	ldr	r3, [pc, #164]	; (15484 <system_clock_source_enable+0xac>)
   153de:	0080      	lsls	r0, r0, #2
   153e0:	581b      	ldr	r3, [r3, r0]
   153e2:	469f      	mov	pc, r3
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
		_system_clock_source_dfll_set_config_errata_9905();
		break;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
   153e4:	2128      	movs	r1, #40	; 0x28
   153e6:	2002      	movs	r0, #2
   153e8:	4a27      	ldr	r2, [pc, #156]	; (15488 <system_clock_source_enable+0xb0>)
   153ea:	5c53      	ldrb	r3, [r2, r1]
   153ec:	4303      	orrs	r3, r0
   153ee:	5453      	strb	r3, [r2, r1]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
   153f0:	3036      	adds	r0, #54	; 0x36
   153f2:	3926      	subs	r1, #38	; 0x26
   153f4:	5c13      	ldrb	r3, [r2, r0]
   153f6:	4219      	tst	r1, r3
   153f8:	d1fc      	bne.n	153f4 <system_clock_source_enable+0x1c>
		}
		break;

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   153fa:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
   153fc:	4770      	bx	lr
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
   153fe:	2102      	movs	r1, #2
   15400:	4a21      	ldr	r2, [pc, #132]	; (15488 <system_clock_source_enable+0xb0>)
	return STATUS_OK;
   15402:	2000      	movs	r0, #0
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
   15404:	8a13      	ldrh	r3, [r2, #16]
   15406:	430b      	orrs	r3, r1
   15408:	8213      	strh	r3, [r2, #16]
		break;
   1540a:	e7f7      	b.n	153fc <system_clock_source_enable+0x24>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
   1540c:	2102      	movs	r1, #2
   1540e:	4a1f      	ldr	r2, [pc, #124]	; (1548c <system_clock_source_enable+0xb4>)
	return STATUS_OK;
   15410:	2000      	movs	r0, #0
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
   15412:	6993      	ldr	r3, [r2, #24]
   15414:	430b      	orrs	r3, r1
   15416:	6193      	str	r3, [r2, #24]
		break;
   15418:	e7f0      	b.n	153fc <system_clock_source_enable+0x24>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
   1541a:	2102      	movs	r1, #2
   1541c:	4a1b      	ldr	r2, [pc, #108]	; (1548c <system_clock_source_enable+0xb4>)
	return STATUS_OK;
   1541e:	2000      	movs	r0, #0
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
   15420:	6953      	ldr	r3, [r2, #20]
   15422:	430b      	orrs	r3, r1
   15424:	6153      	str	r3, [r2, #20]
		break;
   15426:	e7e9      	b.n	153fc <system_clock_source_enable+0x24>
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
   15428:	2102      	movs	r1, #2
   1542a:	4a17      	ldr	r2, [pc, #92]	; (15488 <system_clock_source_enable+0xb0>)
		return STATUS_OK;
   1542c:	2000      	movs	r0, #0
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
   1542e:	7d13      	ldrb	r3, [r2, #20]
   15430:	430b      	orrs	r3, r1
   15432:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
   15434:	e7e2      	b.n	153fc <system_clock_source_enable+0x24>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
   15436:	2102      	movs	r1, #2
   15438:	4815      	ldr	r0, [pc, #84]	; (15490 <system_clock_source_enable+0xb8>)
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
   1543a:	4a13      	ldr	r2, [pc, #76]	; (15488 <system_clock_source_enable+0xb0>)
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
   1543c:	6803      	ldr	r3, [r0, #0]
   1543e:	430b      	orrs	r3, r1
   15440:	6003      	str	r3, [r0, #0]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
   15442:	8311      	strh	r1, [r2, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
   15444:	31fe      	adds	r1, #254	; 0xfe
   15446:	68d3      	ldr	r3, [r2, #12]
   15448:	420b      	tst	r3, r1
   1544a:	d0fc      	beq.n	15446 <system_clock_source_enable+0x6e>
	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   1544c:	6883      	ldr	r3, [r0, #8]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
   1544e:	2180      	movs	r1, #128	; 0x80
	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   15450:	6213      	str	r3, [r2, #32]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
   15452:	2302      	movs	r3, #2
   15454:	8313      	strh	r3, [r2, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
   15456:	4a0c      	ldr	r2, [pc, #48]	; (15488 <system_clock_source_enable+0xb0>)
   15458:	0049      	lsls	r1, r1, #1
   1545a:	68d3      	ldr	r3, [r2, #12]
   1545c:	420b      	tst	r3, r1
   1545e:	d0fc      	beq.n	1545a <system_clock_source_enable+0x82>
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   15460:	6843      	ldr	r3, [r0, #4]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
   15462:	2180      	movs	r1, #128	; 0x80
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   15464:	61d3      	str	r3, [r2, #28]
	OSCCTRL->DFLLCTRL.reg = 0;
   15466:	2300      	movs	r3, #0
   15468:	8313      	strh	r3, [r2, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
   1546a:	4a07      	ldr	r2, [pc, #28]	; (15488 <system_clock_source_enable+0xb0>)
   1546c:	0049      	lsls	r1, r1, #1
   1546e:	68d3      	ldr	r3, [r2, #12]
   15470:	420b      	tst	r3, r1
   15472:	d0fc      	beq.n	1546e <system_clock_source_enable+0x96>
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   15474:	6803      	ldr	r3, [r0, #0]
	return STATUS_OK;
   15476:	2000      	movs	r0, #0
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   15478:	b29b      	uxth	r3, r3
   1547a:	8313      	strh	r3, [r2, #24]
   1547c:	e7be      	b.n	153fc <system_clock_source_enable+0x24>
		return STATUS_ERR_INVALID_ARG;
   1547e:	2017      	movs	r0, #23
   15480:	e7bc      	b.n	153fc <system_clock_source_enable+0x24>
   15482:	46c0      	nop			; (mov r8, r8)
   15484:	000240d0 	.word	0x000240d0
   15488:	40000c00 	.word	0x40000c00
   1548c:	40001000 	.word	0x40001000
   15490:	20000f7c 	.word	0x20000f7c

00015494 <system_clock_source_is_ready>:
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
	uint32_t mask = 0;

	switch (clock_source) {
   15494:	2808      	cmp	r0, #8
   15496:	d82f      	bhi.n	154f8 <system_clock_source_is_ready+0x64>
   15498:	4b18      	ldr	r3, [pc, #96]	; (154fc <system_clock_source_is_ready+0x68>)
   1549a:	0080      	lsls	r0, r0, #2
   1549c:	581b      	ldr	r3, [r3, r0]
   1549e:	469f      	mov	pc, r3
		return ((OSCCTRL->DPLLSTATUS.reg &
				(OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)) ==
				(OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK));
	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   154a0:	2001      	movs	r0, #1

	default:
		return false;
	}
}
   154a2:	4770      	bx	lr
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
   154a4:	4b16      	ldr	r3, [pc, #88]	; (15500 <system_clock_source_is_ready+0x6c>)
   154a6:	68d8      	ldr	r0, [r3, #12]
   154a8:	0780      	lsls	r0, r0, #30
   154aa:	0fc0      	lsrs	r0, r0, #31
   154ac:	e7f9      	b.n	154a2 <system_clock_source_is_ready+0xe>
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
   154ae:	2001      	movs	r0, #1
   154b0:	4b13      	ldr	r3, [pc, #76]	; (15500 <system_clock_source_is_ready+0x6c>)
   154b2:	68db      	ldr	r3, [r3, #12]
   154b4:	4018      	ands	r0, r3
   154b6:	e7f4      	b.n	154a2 <system_clock_source_is_ready+0xe>
		return ((OSCCTRL->STATUS.reg & mask) == mask);
   154b8:	4b12      	ldr	r3, [pc, #72]	; (15504 <system_clock_source_is_ready+0x70>)
   154ba:	68d8      	ldr	r0, [r3, #12]
   154bc:	06c0      	lsls	r0, r0, #27
   154be:	0fc0      	lsrs	r0, r0, #31
   154c0:	e7ef      	b.n	154a2 <system_clock_source_is_ready+0xe>
		return ((OSCCTRL->STATUS.reg & mask) == mask);
   154c2:	4b10      	ldr	r3, [pc, #64]	; (15504 <system_clock_source_is_ready+0x70>)
   154c4:	68d8      	ldr	r0, [r3, #12]
   154c6:	23d0      	movs	r3, #208	; 0xd0
   154c8:	011b      	lsls	r3, r3, #4
   154ca:	4018      	ands	r0, r3
   154cc:	4b0e      	ldr	r3, [pc, #56]	; (15508 <system_clock_source_is_ready+0x74>)
   154ce:	469c      	mov	ip, r3
   154d0:	4460      	add	r0, ip
   154d2:	4243      	negs	r3, r0
   154d4:	4158      	adcs	r0, r3
   154d6:	b2c0      	uxtb	r0, r0
   154d8:	e7e3      	b.n	154a2 <system_clock_source_is_ready+0xe>
		return ((OSCCTRL->DPLLSTATUS.reg &
   154da:	233c      	movs	r3, #60	; 0x3c
				(OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)) ==
   154dc:	2003      	movs	r0, #3
		return ((OSCCTRL->DPLLSTATUS.reg &
   154de:	4a09      	ldr	r2, [pc, #36]	; (15504 <system_clock_source_is_ready+0x70>)
   154e0:	5cd3      	ldrb	r3, [r2, r3]
				(OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)) ==
   154e2:	4018      	ands	r0, r3
   154e4:	3803      	subs	r0, #3
   154e6:	4243      	negs	r3, r0
   154e8:	4158      	adcs	r0, r3
   154ea:	b2c0      	uxtb	r0, r0
   154ec:	e7d9      	b.n	154a2 <system_clock_source_is_ready+0xe>
		return ((OSCCTRL->STATUS.reg & mask) == mask);
   154ee:	2001      	movs	r0, #1
   154f0:	4b04      	ldr	r3, [pc, #16]	; (15504 <system_clock_source_is_ready+0x70>)
   154f2:	68db      	ldr	r3, [r3, #12]
   154f4:	4018      	ands	r0, r3
   154f6:	e7d4      	b.n	154a2 <system_clock_source_is_ready+0xe>
		return false;
   154f8:	2000      	movs	r0, #0
   154fa:	e7d2      	b.n	154a2 <system_clock_source_is_ready+0xe>
   154fc:	000240f4 	.word	0x000240f4
   15500:	40001000 	.word	0x40001000
   15504:	40000c00 	.word	0x40000c00
   15508:	fffff300 	.word	0xfffff300

0001550c <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   1550c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
   1550e:	2280      	movs	r2, #128	; 0x80
{
   15510:	46c6      	mov	lr, r8
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   15512:	211e      	movs	r1, #30
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
   15514:	4b64      	ldr	r3, [pc, #400]	; (156a8 <system_clock_init+0x19c>)
{
   15516:	b500      	push	{lr}
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
   15518:	0052      	lsls	r2, r2, #1
   1551a:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
   1551c:	4b63      	ldr	r3, [pc, #396]	; (156ac <system_clock_init+0x1a0>)
   1551e:	3afd      	subs	r2, #253	; 0xfd
   15520:	609a      	str	r2, [r3, #8]
   15522:	4a63      	ldr	r2, [pc, #396]	; (156b0 <system_clock_init+0x1a4>)
{
   15524:	b088      	sub	sp, #32
   15526:	6853      	ldr	r3, [r2, #4]
   15528:	438b      	bics	r3, r1
   1552a:	391a      	subs	r1, #26
   1552c:	430b      	orrs	r3, r1
   1552e:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
   15530:	2380      	movs	r3, #128	; 0x80
   15532:	05db      	lsls	r3, r3, #23
   15534:	789a      	ldrb	r2, [r3, #2]
   15536:	2a02      	cmp	r2, #2
   15538:	d00a      	beq.n	15550 <system_clock_init+0x44>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
   1553a:	789a      	ldrb	r2, [r3, #2]
   1553c:	b252      	sxtb	r2, r2
   1553e:	2a00      	cmp	r2, #0
   15540:	db06      	blt.n	15550 <system_clock_init+0x44>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
   15542:	2201      	movs	r2, #1
   15544:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
   15546:	3201      	adds	r2, #1
   15548:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
   1554a:	799a      	ldrb	r2, [r3, #6]
   1554c:	2a00      	cmp	r2, #0
   1554e:	d0fc      	beq.n	1554a <system_clock_init+0x3e>
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC16M */
	if (CONF_CLOCK_OSC16M_FREQ_SEL == SYSTEM_OSC16M_4M){
		OSCCTRL->OSC16MCTRL.bit.ONDEMAND = CONF_CLOCK_OSC16M_ON_DEMAND ;
   15550:	2280      	movs	r2, #128	; 0x80
   15552:	4b55      	ldr	r3, [pc, #340]	; (156a8 <system_clock_init+0x19c>)
   15554:	4252      	negs	r2, r2
   15556:	7d19      	ldrb	r1, [r3, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   15558:	a803      	add	r0, sp, #12
   1555a:	430a      	orrs	r2, r1
		OSCCTRL->OSC16MCTRL.bit.RUNSTDBY = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
   1555c:	2140      	movs	r1, #64	; 0x40
		OSCCTRL->OSC16MCTRL.bit.ONDEMAND = CONF_CLOCK_OSC16M_ON_DEMAND ;
   1555e:	751a      	strb	r2, [r3, #20]
		OSCCTRL->OSC16MCTRL.bit.RUNSTDBY = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
   15560:	7d1a      	ldrb	r2, [r3, #20]
   15562:	438a      	bics	r2, r1
   15564:	751a      	strb	r2, [r3, #20]
   15566:	2200      	movs	r2, #0
   15568:	2300      	movs	r3, #0
   1556a:	8082      	strh	r2, [r0, #4]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   1556c:	80c2      	strh	r2, [r0, #6]
	config->fine_value      = 0xff / 4; /* Midpoint */
   1556e:	323f      	adds	r2, #63	; 0x3f
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   15570:	7203      	strb	r3, [r0, #8]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   15572:	7243      	strb	r3, [r0, #9]
	config->run_in_stanby   = false;
   15574:	7083      	strb	r3, [r0, #2]
	config->fine_value      = 0xff / 4; /* Midpoint */
   15576:	8182      	strh	r2, [r0, #12]
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
	dfll_conf.on_demand      = false;
   15578:	7043      	strb	r3, [r0, #1]
	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
   1557a:	3a3b      	subs	r2, #59	; 0x3b
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    26 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP5)
   1557c:	4b4d      	ldr	r3, [pc, #308]	; (156b4 <system_clock_init+0x1a8>)
	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
   1557e:	7002      	strb	r2, [r0, #0]
	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP5)
   15580:	681b      	ldr	r3, [r3, #0]
   15582:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the Calibration value is not correct */
	if (coarse == 0x3f) {
   15584:	2b3f      	cmp	r3, #63	; 0x3f
   15586:	d100      	bne.n	1558a <system_clock_init+0x7e>
   15588:	e08b      	b.n	156a2 <system_clock_init+0x196>
		coarse = 0x1f;
	}

	dfll_conf.coarse_value = coarse;
   1558a:	7283      	strb	r3, [r0, #10]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
   1558c:	2307      	movs	r3, #7
   1558e:	7383      	strb	r3, [r0, #14]
   15590:	4698      	mov	r8, r3
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
   15592:	4b49      	ldr	r3, [pc, #292]	; (156b8 <system_clock_init+0x1ac>)
	config->high_when_disabled = false;
   15594:	2600      	movs	r6, #0
   15596:	9307      	str	r3, [sp, #28]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
   15598:	4b48      	ldr	r3, [pc, #288]	; (156bc <system_clock_init+0x1b0>)
   1559a:	4798      	blx	r3
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   1559c:	4b48      	ldr	r3, [pc, #288]	; (156c0 <system_clock_init+0x1b4>)
   1559e:	4798      	blx	r3
   155a0:	466b      	mov	r3, sp

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   155a2:	466a      	mov	r2, sp
	config->division_factor    = 1;
   155a4:	2701      	movs	r7, #1
	config->high_when_disabled = false;
   155a6:	705e      	strb	r6, [r3, #1]
	config->output_enable      = false;
   155a8:	725e      	strb	r6, [r3, #9]
   155aa:	2303      	movs	r3, #3
   155ac:	4669      	mov	r1, sp
   155ae:	2002      	movs	r0, #2
   155b0:	4d44      	ldr	r5, [pc, #272]	; (156c4 <system_clock_init+0x1b8>)
   155b2:	7013      	strb	r3, [r2, #0]
   155b4:	7217      	strb	r7, [r2, #8]
	config->division_factor    = 1;
   155b6:	9701      	str	r7, [sp, #4]
   155b8:	47a8      	blx	r5
   155ba:	2002      	movs	r0, #2
   155bc:	4c42      	ldr	r4, [pc, #264]	; (156c8 <system_clock_init+0x1bc>)
   155be:	47a0      	blx	r4
	config->high_when_disabled = false;
   155c0:	466b      	mov	r3, sp
   155c2:	4642      	mov	r2, r8
   155c4:	4669      	mov	r1, sp
   155c6:	2003      	movs	r0, #3
   155c8:	701a      	strb	r2, [r3, #0]
   155ca:	705e      	strb	r6, [r3, #1]
	config->run_in_standby     = false;
   155cc:	721e      	strb	r6, [r3, #8]
	config->output_enable      = false;
   155ce:	725e      	strb	r6, [r3, #9]
	config->division_factor    = 1;
   155d0:	9701      	str	r7, [sp, #4]
   155d2:	47a8      	blx	r5
   155d4:	2003      	movs	r0, #3
   155d6:	47a0      	blx	r4
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
   155d8:	466b      	mov	r3, sp
   155da:	3602      	adds	r6, #2
		system_gclk_chan_set_config(OSCCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
   155dc:	4669      	mov	r1, sp
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
   155de:	701e      	strb	r6, [r3, #0]
		system_gclk_chan_set_config(OSCCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
   155e0:	2000      	movs	r0, #0
   155e2:	4b3a      	ldr	r3, [pc, #232]	; (156cc <system_clock_init+0x1c0>)
   155e4:	4798      	blx	r3
		system_gclk_chan_enable(OSCCTRL_GCLK_ID_DFLL48);
   155e6:	2000      	movs	r0, #0
   155e8:	4b39      	ldr	r3, [pc, #228]	; (156d0 <system_clock_init+0x1c4>)
   155ea:	4798      	blx	r3
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
   155ec:	2180      	movs	r1, #128	; 0x80
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
   155ee:	4839      	ldr	r0, [pc, #228]	; (156d4 <system_clock_init+0x1c8>)
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
   155f0:	4a2d      	ldr	r2, [pc, #180]	; (156a8 <system_clock_init+0x19c>)
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
   155f2:	6803      	ldr	r3, [r0, #0]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
   155f4:	0049      	lsls	r1, r1, #1
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
   155f6:	4333      	orrs	r3, r6
   155f8:	6003      	str	r3, [r0, #0]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
   155fa:	8316      	strh	r6, [r2, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
   155fc:	68d3      	ldr	r3, [r2, #12]
   155fe:	420b      	tst	r3, r1
   15600:	d0fc      	beq.n	155fc <system_clock_init+0xf0>
	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   15602:	6883      	ldr	r3, [r0, #8]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
   15604:	2180      	movs	r1, #128	; 0x80
	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   15606:	6213      	str	r3, [r2, #32]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
   15608:	2302      	movs	r3, #2
   1560a:	8313      	strh	r3, [r2, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
   1560c:	4a26      	ldr	r2, [pc, #152]	; (156a8 <system_clock_init+0x19c>)
   1560e:	0049      	lsls	r1, r1, #1
   15610:	68d3      	ldr	r3, [r2, #12]
   15612:	420b      	tst	r3, r1
   15614:	d0fc      	beq.n	15610 <system_clock_init+0x104>
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   15616:	6843      	ldr	r3, [r0, #4]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
   15618:	2180      	movs	r1, #128	; 0x80
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   1561a:	61d3      	str	r3, [r2, #28]
	OSCCTRL->DFLLCTRL.reg = 0;
   1561c:	2300      	movs	r3, #0
   1561e:	8313      	strh	r3, [r2, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
   15620:	4a21      	ldr	r2, [pc, #132]	; (156a8 <system_clock_init+0x19c>)
   15622:	0049      	lsls	r1, r1, #1
   15624:	68d3      	ldr	r3, [r2, #12]
   15626:	420b      	tst	r3, r1
   15628:	d0fc      	beq.n	15624 <system_clock_init+0x118>
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   1562a:	6803      	ldr	r3, [r0, #0]
		return ((OSCCTRL->STATUS.reg & mask) == mask);
   1562c:	491e      	ldr	r1, [pc, #120]	; (156a8 <system_clock_init+0x19c>)
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   1562e:	b29b      	uxth	r3, r3
   15630:	8313      	strh	r3, [r2, #24]
		return ((OSCCTRL->STATUS.reg & mask) == mask);
   15632:	22d0      	movs	r2, #208	; 0xd0
   15634:	0112      	lsls	r2, r2, #4
   15636:	68cb      	ldr	r3, [r1, #12]
   15638:	4013      	ands	r3, r2
#endif

	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
   1563a:	4293      	cmp	r3, r2
   1563c:	d1fb      	bne.n	15636 <system_clock_init+0x12a>
	config->high_when_disabled = false;
   1563e:	2300      	movs	r3, #0
   15640:	4698      	mov	r8, r3
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
   15642:	2601      	movs	r6, #1
   15644:	466b      	mov	r3, sp
   15646:	4642      	mov	r2, r8
   15648:	4f23      	ldr	r7, [pc, #140]	; (156d8 <system_clock_init+0x1cc>)
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   1564a:	4669      	mov	r1, sp
   1564c:	71be      	strb	r6, [r7, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
   1564e:	717e      	strb	r6, [r7, #5]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
   15650:	713e      	strb	r6, [r7, #4]
   15652:	705a      	strb	r2, [r3, #1]
	config->output_enable      = false;
   15654:	725a      	strb	r2, [r3, #9]
   15656:	466a      	mov	r2, sp
   15658:	2307      	movs	r3, #7
   1565a:	2000      	movs	r0, #0
   1565c:	7013      	strb	r3, [r2, #0]
   1565e:	7216      	strb	r6, [r2, #8]
	config->division_factor    = 1;
   15660:	9601      	str	r6, [sp, #4]
   15662:	47a8      	blx	r5
   15664:	2000      	movs	r0, #0
   15666:	47a0      	blx	r4
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
   15668:	4b1c      	ldr	r3, [pc, #112]	; (156dc <system_clock_init+0x1d0>)
   1566a:	2000      	movs	r0, #0
   1566c:	4798      	blx	r3
   1566e:	7939      	ldrb	r1, [r7, #4]
   15670:	4b1b      	ldr	r3, [pc, #108]	; (156e0 <system_clock_init+0x1d4>)
   15672:	b2c9      	uxtb	r1, r1
   15674:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
   15676:	4b1b      	ldr	r3, [pc, #108]	; (156e4 <system_clock_init+0x1d8>)
   15678:	4298      	cmp	r0, r3
   1567a:	d80e      	bhi.n	1569a <system_clock_init+0x18e>
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
   1567c:	2280      	movs	r2, #128	; 0x80
   1567e:	05d2      	lsls	r2, r2, #23
   15680:	7893      	ldrb	r3, [r2, #2]
   15682:	2b00      	cmp	r3, #0
   15684:	d009      	beq.n	1569a <system_clock_init+0x18e>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
   15686:	7893      	ldrb	r3, [r2, #2]
   15688:	b25b      	sxtb	r3, r3
   1568a:	2b00      	cmp	r3, #0
   1568c:	db05      	blt.n	1569a <system_clock_init+0x18e>
	PM->PLCFG.reg = performance_level;
   1568e:	4643      	mov	r3, r8
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
   15690:	7196      	strb	r6, [r2, #6]
	PM->PLCFG.reg = performance_level;
   15692:	7093      	strb	r3, [r2, #2]
	while (!PM->INTFLAG.reg) {
   15694:	7993      	ldrb	r3, [r2, #6]
   15696:	2b00      	cmp	r3, #0
   15698:	d0fc      	beq.n	15694 <system_clock_init+0x188>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
   1569a:	b008      	add	sp, #32
   1569c:	bc04      	pop	{r2}
   1569e:	4690      	mov	r8, r2
   156a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (coarse == 0x3f) {
   156a2:	3b20      	subs	r3, #32
   156a4:	e771      	b.n	1558a <system_clock_init+0x7e>
   156a6:	46c0      	nop			; (mov r8, r8)
   156a8:	40000c00 	.word	0x40000c00
   156ac:	40001400 	.word	0x40001400
   156b0:	41004000 	.word	0x41004000
   156b4:	00806020 	.word	0x00806020
   156b8:	05b8003f 	.word	0x05b8003f
   156bc:	00015359 	.word	0x00015359
   156c0:	000156e9 	.word	0x000156e9
   156c4:	0001570d 	.word	0x0001570d
   156c8:	000157b9 	.word	0x000157b9
   156cc:	00015865 	.word	0x00015865
   156d0:	000158a5 	.word	0x000158a5
   156d4:	20000f7c 	.word	0x20000f7c
   156d8:	40000400 	.word	0x40000400
   156dc:	000157f9 	.word	0x000157f9
   156e0:	0001bf8d 	.word	0x0001bf8d
   156e4:	00b71b00 	.word	0x00b71b00

000156e8 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
   156e8:	2140      	movs	r1, #64	; 0x40
   156ea:	4a06      	ldr	r2, [pc, #24]	; (15704 <system_gclk_init+0x1c>)
   156ec:	6953      	ldr	r3, [r2, #20]
   156ee:	430b      	orrs	r3, r1
   156f0:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
   156f2:	2301      	movs	r3, #1
   156f4:	4a04      	ldr	r2, [pc, #16]	; (15708 <system_gclk_init+0x20>)
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
   156f6:	393f      	subs	r1, #63	; 0x3f
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
   156f8:	7013      	strb	r3, [r2, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
   156fa:	7813      	ldrb	r3, [r2, #0]
   156fc:	4219      	tst	r1, r3
   156fe:	d1fc      	bne.n	156fa <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
   15700:	4770      	bx	lr
   15702:	46c0      	nop			; (mov r8, r8)
   15704:	40000400 	.word	0x40000400
   15708:	40001800 	.word	0x40001800

0001570c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   1570c:	b570      	push	{r4, r5, r6, lr}

	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   1570e:	784b      	ldrb	r3, [r1, #1]
{
   15710:	0004      	movs	r4, r0
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
   15712:	780d      	ldrb	r5, [r1, #0]
	if (config->high_when_disabled) {
   15714:	2b00      	cmp	r3, #0
   15716:	d002      	beq.n	1571e <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   15718:	2380      	movs	r3, #128	; 0x80
   1571a:	00db      	lsls	r3, r3, #3
   1571c:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   1571e:	7a4b      	ldrb	r3, [r1, #9]
   15720:	2b00      	cmp	r3, #0
   15722:	d002      	beq.n	1572a <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   15724:	2380      	movs	r3, #128	; 0x80
   15726:	011b      	lsls	r3, r3, #4
   15728:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   1572a:	6848      	ldr	r0, [r1, #4]
   1572c:	2801      	cmp	r0, #1
   1572e:	d90f      	bls.n	15750 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   15730:	1e43      	subs	r3, r0, #1
   15732:	4218      	tst	r0, r3
   15734:	d12f      	bne.n	15796 <system_gclk_gen_set_config+0x8a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   15736:	2802      	cmp	r0, #2
   15738:	d033      	beq.n	157a2 <system_gclk_gen_set_config+0x96>
   1573a:	2302      	movs	r3, #2
   1573c:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
   1573e:	3201      	adds	r2, #1
						mask <<= 1) {
   15740:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
   15742:	4298      	cmp	r0, r3
   15744:	d8fb      	bhi.n	1573e <system_gclk_gen_set_config+0x32>
   15746:	0412      	lsls	r2, r2, #16
   15748:	2380      	movs	r3, #128	; 0x80
   1574a:	015b      	lsls	r3, r3, #5
   1574c:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   1574e:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   15750:	7a0b      	ldrb	r3, [r1, #8]
   15752:	2b00      	cmp	r3, #0
   15754:	d002      	beq.n	1575c <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   15756:	2380      	movs	r3, #128	; 0x80
   15758:	019b      	lsls	r3, r3, #6
   1575a:	431d      	orrs	r5, r3
   1575c:	2604      	movs	r6, #4
   1575e:	40a6      	lsls	r6, r4
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
   15760:	4911      	ldr	r1, [pc, #68]	; (157a8 <system_gclk_gen_set_config+0x9c>)
   15762:	4a12      	ldr	r2, [pc, #72]	; (157ac <system_gclk_gen_set_config+0xa0>)
   15764:	684b      	ldr	r3, [r1, #4]
   15766:	4013      	ands	r3, r2
   15768:	421e      	tst	r6, r3
   1576a:	d1fb      	bne.n	15764 <system_gclk_gen_set_config+0x58>
	cpu_irq_enter_critical();
   1576c:	4b10      	ldr	r3, [pc, #64]	; (157b0 <system_gclk_gen_set_config+0xa4>)
   1576e:	4798      	blx	r3
   15770:	4b0d      	ldr	r3, [pc, #52]	; (157a8 <system_gclk_gen_set_config+0x9c>)
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
   15772:	2280      	movs	r2, #128	; 0x80
   15774:	469c      	mov	ip, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
   15776:	4661      	mov	r1, ip
   15778:	00a4      	lsls	r4, r4, #2
   1577a:	4464      	add	r4, ip
	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
   1577c:	6a23      	ldr	r3, [r4, #32]
   1577e:	0052      	lsls	r2, r2, #1
   15780:	4013      	ands	r3, r2
   15782:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
   15784:	4a09      	ldr	r2, [pc, #36]	; (157ac <system_gclk_gen_set_config+0xa0>)
	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
   15786:	6225      	str	r5, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
   15788:	684b      	ldr	r3, [r1, #4]
   1578a:	4013      	ands	r3, r2
   1578c:	421e      	tst	r6, r3
   1578e:	d1fb      	bne.n	15788 <system_gclk_gen_set_config+0x7c>
	cpu_irq_leave_critical();
   15790:	4b08      	ldr	r3, [pc, #32]	; (157b4 <system_gclk_gen_set_config+0xa8>)
   15792:	4798      	blx	r3
	while (system_gclk_is_syncing(generator)) {
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
   15794:	bd70      	pop	{r4, r5, r6, pc}
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   15796:	2380      	movs	r3, #128	; 0x80
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
   15798:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   1579a:	009b      	lsls	r3, r3, #2
   1579c:	4318      	orrs	r0, r3
   1579e:	4305      	orrs	r5, r0
   157a0:	e7d6      	b.n	15750 <system_gclk_gen_set_config+0x44>
			for (mask = (1UL << 1); mask < config->division_factor;
   157a2:	2200      	movs	r2, #0
   157a4:	e7d0      	b.n	15748 <system_gclk_gen_set_config+0x3c>
   157a6:	46c0      	nop			; (mov r8, r8)
   157a8:	40001800 	.word	0x40001800
   157ac:	000007fc 	.word	0x000007fc
   157b0:	0000198d 	.word	0x0000198d
   157b4:	000019c9 	.word	0x000019c9

000157b8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   157b8:	2204      	movs	r2, #4
   157ba:	b510      	push	{r4, lr}
   157bc:	4082      	lsls	r2, r0
   157be:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
   157c0:	4909      	ldr	r1, [pc, #36]	; (157e8 <system_gclk_gen_enable+0x30>)
   157c2:	480a      	ldr	r0, [pc, #40]	; (157ec <system_gclk_gen_enable+0x34>)
   157c4:	6843      	ldr	r3, [r0, #4]
   157c6:	400b      	ands	r3, r1
   157c8:	421a      	tst	r2, r3
   157ca:	d1fb      	bne.n	157c4 <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
   157cc:	4b08      	ldr	r3, [pc, #32]	; (157f0 <system_gclk_gen_enable+0x38>)
   157ce:	4798      	blx	r3
   157d0:	4b06      	ldr	r3, [pc, #24]	; (157ec <system_gclk_gen_enable+0x34>)
   157d2:	00a0      	lsls	r0, r4, #2
   157d4:	469c      	mov	ip, r3
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
   157d6:	2380      	movs	r3, #128	; 0x80
   157d8:	4460      	add	r0, ip
   157da:	6a02      	ldr	r2, [r0, #32]
   157dc:	005b      	lsls	r3, r3, #1
   157de:	4313      	orrs	r3, r2
   157e0:	6203      	str	r3, [r0, #32]
	cpu_irq_leave_critical();
   157e2:	4b04      	ldr	r3, [pc, #16]	; (157f4 <system_gclk_gen_enable+0x3c>)
   157e4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   157e6:	bd10      	pop	{r4, pc}
   157e8:	000007fc 	.word	0x000007fc
   157ec:	40001800 	.word	0x40001800
   157f0:	0000198d 	.word	0x0000198d
   157f4:	000019c9 	.word	0x000019c9

000157f8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   157f8:	2204      	movs	r2, #4
   157fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   157fc:	4082      	lsls	r2, r0
   157fe:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
   15800:	4e12      	ldr	r6, [pc, #72]	; (1584c <system_gclk_gen_get_hz+0x54>)
   15802:	4913      	ldr	r1, [pc, #76]	; (15850 <system_gclk_gen_get_hz+0x58>)
   15804:	6873      	ldr	r3, [r6, #4]
   15806:	400b      	ands	r3, r1
   15808:	421a      	tst	r2, r3
   1580a:	d1fb      	bne.n	15804 <system_gclk_gen_get_hz+0xc>

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
   1580c:	3408      	adds	r4, #8
   1580e:	00a4      	lsls	r4, r4, #2
	cpu_irq_enter_critical();
   15810:	4b10      	ldr	r3, [pc, #64]	; (15854 <system_gclk_gen_get_hz+0x5c>)
   15812:	4798      	blx	r3
   15814:	59a0      	ldr	r0, [r4, r6]
	uint32_t gen_input_hz = system_clock_source_get_hz(
   15816:	4b10      	ldr	r3, [pc, #64]	; (15858 <system_gclk_gen_get_hz+0x60>)
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
   15818:	0700      	lsls	r0, r0, #28
   1581a:	0f00      	lsrs	r0, r0, #28
	uint32_t gen_input_hz = system_clock_source_get_hz(
   1581c:	4798      	blx	r3

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
   1581e:	59a5      	ldr	r5, [r4, r6]
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
   15820:	59a4      	ldr	r4, [r4, r6]
	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
   15822:	04ed      	lsls	r5, r5, #19
	cpu_irq_leave_critical();
   15824:	4b0d      	ldr	r3, [pc, #52]	; (1585c <system_gclk_gen_get_hz+0x64>)
   15826:	0fed      	lsrs	r5, r5, #31
	uint32_t gen_input_hz = system_clock_source_get_hz(
   15828:	0007      	movs	r7, r0
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
   1582a:	0c24      	lsrs	r4, r4, #16
   1582c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   1582e:	2d00      	cmp	r5, #0
   15830:	d003      	beq.n	1583a <system_gclk_gen_get_hz+0x42>
		gen_input_hz /= divider;
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
   15832:	3401      	adds	r4, #1
   15834:	40e7      	lsrs	r7, r4
	}

	return gen_input_hz;
}
   15836:	0038      	movs	r0, r7
   15838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!divsel && divider > 1) {
   1583a:	2c01      	cmp	r4, #1
   1583c:	d9fb      	bls.n	15836 <system_gclk_gen_get_hz+0x3e>
		gen_input_hz /= divider;
   1583e:	0038      	movs	r0, r7
   15840:	0021      	movs	r1, r4
   15842:	4b07      	ldr	r3, [pc, #28]	; (15860 <system_gclk_gen_get_hz+0x68>)
   15844:	4798      	blx	r3
   15846:	0007      	movs	r7, r0
   15848:	e7f5      	b.n	15836 <system_gclk_gen_get_hz+0x3e>
   1584a:	46c0      	nop			; (mov r8, r8)
   1584c:	40001800 	.word	0x40001800
   15850:	000007fc 	.word	0x000007fc
   15854:	0000198d 	.word	0x0000198d
   15858:	0001522d 	.word	0x0001522d
   1585c:	000019c9 	.word	0x000019c9
   15860:	0001bf8d 	.word	0x0001bf8d

00015864 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   15864:	b570      	push	{r4, r5, r6, lr}
	cpu_irq_enter_critical();
   15866:	4b0c      	ldr	r3, [pc, #48]	; (15898 <system_gclk_chan_set_config+0x34>)
   15868:	0004      	movs	r4, r0
   1586a:	000e      	movs	r6, r1
   1586c:	4798      	blx	r3
   1586e:	4b0b      	ldr	r3, [pc, #44]	; (1589c <system_gclk_chan_set_config+0x38>)

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
   15870:	2280      	movs	r2, #128	; 0x80
   15872:	469c      	mov	ip, r3
   15874:	2140      	movs	r1, #64	; 0x40

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
   15876:	2580      	movs	r5, #128	; 0x80
   15878:	00a4      	lsls	r4, r4, #2
   1587a:	4464      	add	r4, ip
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
   1587c:	58a3      	ldr	r3, [r4, r2]
   1587e:	438b      	bics	r3, r1
   15880:	50a3      	str	r3, [r4, r2]
	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
   15882:	3a40      	subs	r2, #64	; 0x40
   15884:	5963      	ldr	r3, [r4, r5]
   15886:	421a      	tst	r2, r3
   15888:	d1fc      	bne.n	15884 <system_gclk_chan_set_config+0x20>
	cpu_irq_leave_critical();
   1588a:	4b05      	ldr	r3, [pc, #20]	; (158a0 <system_gclk_chan_set_config+0x3c>)
   1588c:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
   1588e:	230f      	movs	r3, #15
   15890:	7832      	ldrb	r2, [r6, #0]
   15892:	4013      	ands	r3, r2
   15894:	5163      	str	r3, [r4, r5]
}
   15896:	bd70      	pop	{r4, r5, r6, pc}
   15898:	0000198d 	.word	0x0000198d
   1589c:	40001800 	.word	0x40001800
   158a0:	000019c9 	.word	0x000019c9

000158a4 <system_gclk_chan_enable>:
{
   158a4:	b510      	push	{r4, lr}
	cpu_irq_enter_critical();
   158a6:	4b0a      	ldr	r3, [pc, #40]	; (158d0 <system_gclk_chan_enable+0x2c>)
   158a8:	0004      	movs	r4, r0
   158aa:	4798      	blx	r3
   158ac:	4b09      	ldr	r3, [pc, #36]	; (158d4 <system_gclk_chan_enable+0x30>)
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
   158ae:	2280      	movs	r2, #128	; 0x80
   158b0:	469c      	mov	ip, r3
   158b2:	2140      	movs	r1, #64	; 0x40
   158b4:	00a0      	lsls	r0, r4, #2
   158b6:	4460      	add	r0, ip
   158b8:	5883      	ldr	r3, [r0, r2]
   158ba:	430b      	orrs	r3, r1
   158bc:	5083      	str	r3, [r0, r2]
	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
   158be:	3140      	adds	r1, #64	; 0x40
   158c0:	3a40      	subs	r2, #64	; 0x40
   158c2:	5843      	ldr	r3, [r0, r1]
   158c4:	421a      	tst	r2, r3
   158c6:	d0fc      	beq.n	158c2 <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
   158c8:	4b03      	ldr	r3, [pc, #12]	; (158d8 <system_gclk_chan_enable+0x34>)
   158ca:	4798      	blx	r3
}
   158cc:	bd10      	pop	{r4, pc}
   158ce:	46c0      	nop			; (mov r8, r8)
   158d0:	0000198d 	.word	0x0000198d
   158d4:	40001800 	.word	0x40001800
   158d8:	000019c9 	.word	0x000019c9

000158dc <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   158dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   158de:	46c6      	mov	lr, r8
   158e0:	0004      	movs	r4, r0
   158e2:	b500      	push	{lr}
	cpu_irq_enter_critical();
   158e4:	4e18      	ldr	r6, [pc, #96]	; (15948 <system_gclk_chan_get_hz+0x6c>)
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
   158e6:	4d19      	ldr	r5, [pc, #100]	; (1594c <system_gclk_chan_get_hz+0x70>)
   158e8:	3420      	adds	r4, #32
   158ea:	47b0      	blx	r6
   158ec:	00a4      	lsls	r4, r4, #2
	cpu_irq_leave_critical();
   158ee:	4f18      	ldr	r7, [pc, #96]	; (15950 <system_gclk_chan_get_hz+0x74>)
   158f0:	5964      	ldr	r4, [r4, r5]
   158f2:	47b8      	blx	r7
   158f4:	2204      	movs	r2, #4
   158f6:	0724      	lsls	r4, r4, #28
   158f8:	0f24      	lsrs	r4, r4, #28
   158fa:	40a2      	lsls	r2, r4
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
   158fc:	4915      	ldr	r1, [pc, #84]	; (15954 <system_gclk_chan_get_hz+0x78>)
   158fe:	686b      	ldr	r3, [r5, #4]
   15900:	400b      	ands	r3, r1
   15902:	421a      	tst	r2, r3
   15904:	d1fb      	bne.n	158fe <system_gclk_chan_get_hz+0x22>
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
   15906:	3408      	adds	r4, #8
   15908:	00a4      	lsls	r4, r4, #2
	cpu_irq_enter_critical();
   1590a:	47b0      	blx	r6
   1590c:	5960      	ldr	r0, [r4, r5]
	uint32_t gen_input_hz = system_clock_source_get_hz(
   1590e:	4b12      	ldr	r3, [pc, #72]	; (15958 <system_gclk_chan_get_hz+0x7c>)
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
   15910:	0700      	lsls	r0, r0, #28
   15912:	0f00      	lsrs	r0, r0, #28
	uint32_t gen_input_hz = system_clock_source_get_hz(
   15914:	4798      	blx	r3
	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
   15916:	5966      	ldr	r6, [r4, r5]
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
   15918:	5964      	ldr	r4, [r4, r5]
	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
   1591a:	04f6      	lsls	r6, r6, #19
   1591c:	0ff6      	lsrs	r6, r6, #31
	uint32_t gen_input_hz = system_clock_source_get_hz(
   1591e:	4680      	mov	r8, r0
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
   15920:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
   15922:	47b8      	blx	r7
	if (!divsel && divider > 1) {
   15924:	2e00      	cmp	r6, #0
   15926:	d007      	beq.n	15938 <system_gclk_chan_get_hz+0x5c>
		gen_input_hz >>= (divider+1);
   15928:	4643      	mov	r3, r8
   1592a:	3401      	adds	r4, #1
   1592c:	40e3      	lsrs	r3, r4
   1592e:	4698      	mov	r8, r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
}
   15930:	4640      	mov	r0, r8
   15932:	bc04      	pop	{r2}
   15934:	4690      	mov	r8, r2
   15936:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!divsel && divider > 1) {
   15938:	2c01      	cmp	r4, #1
   1593a:	d9f9      	bls.n	15930 <system_gclk_chan_get_hz+0x54>
		gen_input_hz /= divider;
   1593c:	4640      	mov	r0, r8
   1593e:	0021      	movs	r1, r4
   15940:	4b06      	ldr	r3, [pc, #24]	; (1595c <system_gclk_chan_get_hz+0x80>)
   15942:	4798      	blx	r3
   15944:	4680      	mov	r8, r0
   15946:	e7f3      	b.n	15930 <system_gclk_chan_get_hz+0x54>
   15948:	0000198d 	.word	0x0000198d
   1594c:	40001800 	.word	0x40001800
   15950:	000019c9 	.word	0x000019c9
   15954:	000007fc 	.word	0x000007fc
   15958:	0001522d 	.word	0x0001522d
   1595c:	0001bf8d 	.word	0x0001bf8d

00015960 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   15960:	b570      	push	{r4, r5, r6, lr}
	if (port_index < PORT_INST_NUM) {
   15962:	09c2      	lsrs	r2, r0, #7
		return NULL;
   15964:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   15966:	2a00      	cmp	r2, #0
   15968:	d104      	bne.n	15974 <system_pinmux_pin_set_config+0x14>
		return &(ports[port_index]->Group[group_index]);
   1596a:	4a2f      	ldr	r2, [pc, #188]	; (15a28 <system_pinmux_pin_set_config+0xc8>)
   1596c:	0943      	lsrs	r3, r0, #5
   1596e:	4694      	mov	ip, r2
   15970:	01db      	lsls	r3, r3, #7
   15972:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   15974:	221f      	movs	r2, #31
   15976:	4010      	ands	r0, r2
   15978:	3a1e      	subs	r2, #30
   1597a:	4082      	lsls	r2, r0
	if (!config->powersave) {
   1597c:	78c8      	ldrb	r0, [r1, #3]
   1597e:	2800      	cmp	r0, #0
   15980:	d131      	bne.n	159e6 <system_pinmux_pin_set_config+0x86>
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   15982:	7808      	ldrb	r0, [r1, #0]
   15984:	2880      	cmp	r0, #128	; 0x80
   15986:	d047      	beq.n	15a18 <system_pinmux_pin_set_config+0xb8>
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   15988:	2480      	movs	r4, #128	; 0x80
   1598a:	0600      	lsls	r0, r0, #24
   1598c:	0264      	lsls	r4, r4, #9
   1598e:	4320      	orrs	r0, r4
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   15990:	784c      	ldrb	r4, [r1, #1]
   15992:	2502      	movs	r5, #2
   15994:	0026      	movs	r6, r4
   15996:	43ae      	bics	r6, r5
   15998:	d107      	bne.n	159aa <system_pinmux_pin_set_config+0x4a>
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   1599a:	788c      	ldrb	r4, [r1, #2]
   1599c:	2c00      	cmp	r4, #0
   1599e:	d137      	bne.n	15a10 <system_pinmux_pin_set_config+0xb0>
			pin_cfg |= PORT_WRCONFIG_INEN;
   159a0:	2480      	movs	r4, #128	; 0x80
   159a2:	02a4      	lsls	r4, r4, #10
   159a4:	4320      	orrs	r0, r4
			port->DIRCLR.reg = pin_mask;
   159a6:	605a      	str	r2, [r3, #4]
   159a8:	784c      	ldrb	r4, [r1, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   159aa:	3c01      	subs	r4, #1
   159ac:	2c01      	cmp	r4, #1
   159ae:	d935      	bls.n	15a1c <system_pinmux_pin_set_config+0xbc>
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   159b0:	24a0      	movs	r4, #160	; 0xa0
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   159b2:	0415      	lsls	r5, r2, #16
   159b4:	0c2d      	lsrs	r5, r5, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   159b6:	05e4      	lsls	r4, r4, #23
   159b8:	432c      	orrs	r4, r5
   159ba:	4304      	orrs	r4, r0
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   159bc:	629c      	str	r4, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   159be:	24d0      	movs	r4, #208	; 0xd0
	uint32_t upper_pin_mask = (pin_mask >> 16);
   159c0:	0c15      	lsrs	r5, r2, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   159c2:	0624      	lsls	r4, r4, #24
   159c4:	432c      	orrs	r4, r5
   159c6:	4304      	orrs	r4, r0
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   159c8:	629c      	str	r4, [r3, #40]	; 0x28
	if(!config->powersave) {
   159ca:	78cc      	ldrb	r4, [r1, #3]
   159cc:	2c00      	cmp	r4, #0
   159ce:	d109      	bne.n	159e4 <system_pinmux_pin_set_config+0x84>
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   159d0:	0340      	lsls	r0, r0, #13
   159d2:	d503      	bpl.n	159dc <system_pinmux_pin_set_config+0x7c>
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   159d4:	7888      	ldrb	r0, [r1, #2]
   159d6:	2801      	cmp	r0, #1
   159d8:	d023      	beq.n	15a22 <system_pinmux_pin_set_config+0xc2>
				port->OUTCLR.reg = pin_mask;
   159da:	615a      	str	r2, [r3, #20]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   159dc:	7849      	ldrb	r1, [r1, #1]
   159de:	3901      	subs	r1, #1
   159e0:	2901      	cmp	r1, #1
   159e2:	d913      	bls.n	15a0c <system_pinmux_pin_set_config+0xac>

	_system_pinmux_config(port, pin_mask, config);
}
   159e4:	bd70      	pop	{r4, r5, r6, pc}
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   159e6:	20a0      	movs	r0, #160	; 0xa0
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   159e8:	0414      	lsls	r4, r2, #16
   159ea:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   159ec:	05c0      	lsls	r0, r0, #23
   159ee:	4320      	orrs	r0, r4
		port->DIRCLR.reg = pin_mask;
   159f0:	605a      	str	r2, [r3, #4]
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   159f2:	6298      	str	r0, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   159f4:	20d0      	movs	r0, #208	; 0xd0
	uint32_t upper_pin_mask = (pin_mask >> 16);
   159f6:	0c14      	lsrs	r4, r2, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   159f8:	0600      	lsls	r0, r0, #24
   159fa:	4320      	orrs	r0, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   159fc:	6298      	str	r0, [r3, #40]	; 0x28
	if(!config->powersave) {
   159fe:	78c8      	ldrb	r0, [r1, #3]
   15a00:	2800      	cmp	r0, #0
   15a02:	d1ef      	bne.n	159e4 <system_pinmux_pin_set_config+0x84>
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   15a04:	7849      	ldrb	r1, [r1, #1]
   15a06:	3901      	subs	r1, #1
   15a08:	2901      	cmp	r1, #1
   15a0a:	d8eb      	bhi.n	159e4 <system_pinmux_pin_set_config+0x84>
			port->DIRSET.reg = pin_mask;
   15a0c:	609a      	str	r2, [r3, #8]
}
   15a0e:	e7e9      	b.n	159e4 <system_pinmux_pin_set_config+0x84>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   15a10:	24c0      	movs	r4, #192	; 0xc0
   15a12:	02e4      	lsls	r4, r4, #11
   15a14:	4320      	orrs	r0, r4
   15a16:	e7c6      	b.n	159a6 <system_pinmux_pin_set_config+0x46>
	uint32_t pin_cfg = 0;
   15a18:	2000      	movs	r0, #0
   15a1a:	e7b9      	b.n	15990 <system_pinmux_pin_set_config+0x30>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   15a1c:	4c03      	ldr	r4, [pc, #12]	; (15a2c <system_pinmux_pin_set_config+0xcc>)
   15a1e:	4020      	ands	r0, r4
   15a20:	e7c6      	b.n	159b0 <system_pinmux_pin_set_config+0x50>
				port->OUTSET.reg = pin_mask;
   15a22:	619a      	str	r2, [r3, #24]
   15a24:	e7da      	b.n	159dc <system_pinmux_pin_set_config+0x7c>
   15a26:	46c0      	nop			; (mov r8, r8)
   15a28:	40002800 	.word	0x40002800
   15a2c:	fffbffff 	.word	0xfffbffff

00015a30 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
   15a30:	4770      	bx	lr
   15a32:	46c0      	nop			; (mov r8, r8)

00015a34 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   15a34:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   15a36:	4b05      	ldr	r3, [pc, #20]	; (15a4c <system_init+0x18>)
   15a38:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   15a3a:	4b05      	ldr	r3, [pc, #20]	; (15a50 <system_init+0x1c>)
   15a3c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   15a3e:	4b05      	ldr	r3, [pc, #20]	; (15a54 <system_init+0x20>)
   15a40:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   15a42:	4b05      	ldr	r3, [pc, #20]	; (15a58 <system_init+0x24>)
   15a44:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   15a46:	4b05      	ldr	r3, [pc, #20]	; (15a5c <system_init+0x28>)
   15a48:	4798      	blx	r3
}
   15a4a:	bd10      	pop	{r4, pc}
   15a4c:	0001550d 	.word	0x0001550d
   15a50:	00000115 	.word	0x00000115
   15a54:	00015a31 	.word	0x00015a31
   15a58:	0000aff5 	.word	0x0000aff5
   15a5c:	00015a31 	.word	0x00015a31

00015a60 <fn_debug_charger>:
		}

	}//End of main program while loop
}//end of main

void fn_debug_charger(void){
   15a60:	b5f0      	push	{r4, r5, r6, r7, lr}
   15a62:	4645      	mov	r5, r8
   15a64:	46de      	mov	lr, fp
   15a66:	4657      	mov	r7, sl
   15a68:	464e      	mov	r6, r9
	uint8_t addressList[] = {
   15a6a:	2206      	movs	r2, #6
   15a6c:	2300      	movs	r3, #0
void fn_debug_charger(void){
   15a6e:	b5e0      	push	{r5, r6, r7, lr}
   15a70:	b087      	sub	sp, #28
	uint8_t addressList[] = {
   15a72:	ad01      	add	r5, sp, #4
   15a74:	70aa      	strb	r2, [r5, #2]
   15a76:	3201      	adds	r2, #1
   15a78:	70ea      	strb	r2, [r5, #3]
   15a7a:	3204      	adds	r2, #4
   15a7c:	712a      	strb	r2, [r5, #4]
   15a7e:	3201      	adds	r2, #1
   15a80:	716a      	strb	r2, [r5, #5]
	uint8_t i;
	uint8_t data;
	char binStr[10]; 
	
	//  Set initial conditions
	if (state_change) {
   15a82:	4a20      	ldr	r2, [pc, #128]	; (15b04 <fn_debug_charger+0xa4>)
	uint8_t addressList[] = {
   15a84:	702b      	strb	r3, [r5, #0]
	if (state_change) {
   15a86:	7812      	ldrb	r2, [r2, #0]
	uint8_t addressList[] = {
   15a88:	3302      	adds	r3, #2
   15a8a:	706b      	strb	r3, [r5, #1]
	if (state_change) {
   15a8c:	2a00      	cmp	r2, #0
   15a8e:	d006      	beq.n	15a9e <fn_debug_charger+0x3e>
		cur_Y = 2;
   15a90:	4a1d      	ldr	r2, [pc, #116]	; (15b08 <fn_debug_charger+0xa8>)
   15a92:	6013      	str	r3, [r2, #0]
		cur_Y_low = 2;
   15a94:	4a1d      	ldr	r2, [pc, #116]	; (15b0c <fn_debug_charger+0xac>)
   15a96:	6013      	str	r3, [r2, #0]
		cur_Y_high = 5;
   15a98:	2205      	movs	r2, #5
   15a9a:	4b1d      	ldr	r3, [pc, #116]	; (15b10 <fn_debug_charger+0xb0>)
   15a9c:	601a      	str	r2, [r3, #0]
	}
		
	// Display
	glcd_clear_buffer();
   15a9e:	4b1d      	ldr	r3, [pc, #116]	; (15b14 <fn_debug_charger+0xb4>)
   15aa0:	4798      	blx	r3
	//  Display Title
	sprintf(display_str,"Charger Debug:");
   15aa2:	4f1d      	ldr	r7, [pc, #116]	; (15b18 <fn_debug_charger+0xb8>)
   15aa4:	220f      	movs	r2, #15
   15aa6:	491d      	ldr	r1, [pc, #116]	; (15b1c <fn_debug_charger+0xbc>)
   15aa8:	4b1d      	ldr	r3, [pc, #116]	; (15b20 <fn_debug_charger+0xc0>)
   15aaa:	0038      	movs	r0, r7
   15aac:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   15aae:	4b1d      	ldr	r3, [pc, #116]	; (15b24 <fn_debug_charger+0xc4>)
   15ab0:	003a      	movs	r2, r7
   15ab2:	2100      	movs	r1, #0
   15ab4:	2000      	movs	r0, #0
   15ab6:	4698      	mov	r8, r3
   15ab8:	4798      	blx	r3
   15aba:	4b1b      	ldr	r3, [pc, #108]	; (15b28 <fn_debug_charger+0xc8>)
	
	for (i=0;i<sizeof(addressList);i++){
   15abc:	2400      	movs	r4, #0
   15abe:	469b      	mov	fp, r3
   15ac0:	4b1a      	ldr	r3, [pc, #104]	; (15b2c <fn_debug_charger+0xcc>)
   15ac2:	469a      	mov	sl, r3
   15ac4:	4b1a      	ldr	r3, [pc, #104]	; (15b30 <fn_debug_charger+0xd0>)
   15ac6:	4699      	mov	r9, r3
		data = getChargerRegister(addressList[i]);
   15ac8:	782e      	ldrb	r6, [r5, #0]
		bin2str(data, binStr);
		sprintf(display_str, "Add:%02x = %s", 
			addressList[i], binStr);
		glcd_tiny_draw_string(10, i+1, display_str);
   15aca:	3401      	adds	r4, #1
		data = getChargerRegister(addressList[i]);
   15acc:	0030      	movs	r0, r6
   15ace:	47d8      	blx	fp
		bin2str(data, binStr);
   15ad0:	a903      	add	r1, sp, #12
   15ad2:	47d0      	blx	sl
		glcd_tiny_draw_string(10, i+1, display_str);
   15ad4:	b2e4      	uxtb	r4, r4
		sprintf(display_str, "Add:%02x = %s", 
   15ad6:	0032      	movs	r2, r6
   15ad8:	ab03      	add	r3, sp, #12
   15ada:	4649      	mov	r1, r9
   15adc:	0038      	movs	r0, r7
   15ade:	4e15      	ldr	r6, [pc, #84]	; (15b34 <fn_debug_charger+0xd4>)
   15ae0:	47b0      	blx	r6
		glcd_tiny_draw_string(10, i+1, display_str);
   15ae2:	003a      	movs	r2, r7
   15ae4:	0021      	movs	r1, r4
   15ae6:	200a      	movs	r0, #10
   15ae8:	47c0      	blx	r8
   15aea:	3501      	adds	r5, #1
	for (i=0;i<sizeof(addressList);i++){
   15aec:	2c06      	cmp	r4, #6
   15aee:	d1eb      	bne.n	15ac8 <fn_debug_charger+0x68>
	
	
	
	
	
	glcd_write();
   15af0:	4b11      	ldr	r3, [pc, #68]	; (15b38 <fn_debug_charger+0xd8>)
   15af2:	4798      	blx	r3
	
}
   15af4:	b007      	add	sp, #28
   15af6:	bc3c      	pop	{r2, r3, r4, r5}
   15af8:	4690      	mov	r8, r2
   15afa:	4699      	mov	r9, r3
   15afc:	46a2      	mov	sl, r4
   15afe:	46ab      	mov	fp, r5
   15b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15b02:	46c0      	nop			; (mov r8, r8)
   15b04:	200001d0 	.word	0x200001d0
   15b08:	2000375c 	.word	0x2000375c
   15b0c:	200047d0 	.word	0x200047d0
   15b10:	200042ac 	.word	0x200042ac
   15b14:	000130dd 	.word	0x000130dd
   15b18:	200037f8 	.word	0x200037f8
   15b1c:	000245b4 	.word	0x000245b4
   15b20:	0001efe9 	.word	0x0001efe9
   15b24:	00014091 	.word	0x00014091
   15b28:	00007605 	.word	0x00007605
   15b2c:	00007621 	.word	0x00007621
   15b30:	000245c4 	.word	0x000245c4
   15b34:	0001f101 	.word	0x0001f101
   15b38:	000139cd 	.word	0x000139cd

00015b3c <fn_disp_loop_report>:
	glcd_tiny_draw_string(97,7,display_str);
	
	glcd_write();
}

void fn_disp_loop_report(void){
   15b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   15b3e:	46c6      	mov	lr, r8
   15b40:	b500      	push	{lr}
		char unit_str[4];
		//float total_error;
		
		if (options.current_unit_dist == feet){
   15b42:	4b39      	ldr	r3, [pc, #228]	; (15c28 <fn_disp_loop_report+0xec>)
void fn_disp_loop_report(void){
   15b44:	b084      	sub	sp, #16
		if (options.current_unit_dist == feet){
   15b46:	781b      	ldrb	r3, [r3, #0]
   15b48:	2b00      	cmp	r3, #0
   15b4a:	d064      	beq.n	15c16 <fn_disp_loop_report+0xda>
			strcpy(unit_str,"ft");
		}else{
			strcpy(unit_str,"m");
   15b4c:	ab03      	add	r3, sp, #12
   15b4e:	4698      	mov	r8, r3
   15b50:	236d      	movs	r3, #109	; 0x6d
   15b52:	4642      	mov	r2, r8
   15b54:	8013      	strh	r3, [r2, #0]
		}
		
		
		glcd_clear_buffer();
   15b56:	4b35      	ldr	r3, [pc, #212]	; (15c2c <fn_disp_loop_report+0xf0>)
   15b58:	4798      	blx	r3
		sprintf(display_str, "Loop Test Report:");
   15b5a:	4c35      	ldr	r4, [pc, #212]	; (15c30 <fn_disp_loop_report+0xf4>)
   15b5c:	4b35      	ldr	r3, [pc, #212]	; (15c34 <fn_disp_loop_report+0xf8>)
   15b5e:	2212      	movs	r2, #18
   15b60:	4935      	ldr	r1, [pc, #212]	; (15c38 <fn_disp_loop_report+0xfc>)
   15b62:	0020      	movs	r0, r4
   15b64:	4798      	blx	r3
		glcd_tiny_draw_string(0,0,display_str);
   15b66:	4d35      	ldr	r5, [pc, #212]	; (15c3c <fn_disp_loop_report+0x100>)
   15b68:	0022      	movs	r2, r4
   15b6a:	2100      	movs	r1, #0
   15b6c:	2000      	movs	r0, #0
   15b6e:	47a8      	blx	r5
		
		sprintf(display_str,"Segments: %d",n_points);
   15b70:	4b33      	ldr	r3, [pc, #204]	; (15c40 <fn_disp_loop_report+0x104>)
   15b72:	4e34      	ldr	r6, [pc, #208]	; (15c44 <fn_disp_loop_report+0x108>)
   15b74:	681a      	ldr	r2, [r3, #0]
   15b76:	4934      	ldr	r1, [pc, #208]	; (15c48 <fn_disp_loop_report+0x10c>)
   15b78:	0020      	movs	r0, r4
   15b7a:	47b0      	blx	r6
		glcd_tiny_draw_string(0,1,display_str);
   15b7c:	0022      	movs	r2, r4
   15b7e:	2101      	movs	r1, #1
   15b80:	2000      	movs	r0, #0
   15b82:	47a8      	blx	r5
		
		sprintf(display_str,"Total Length: %.1f %s", loop_distance, unit_str);
   15b84:	4b31      	ldr	r3, [pc, #196]	; (15c4c <fn_disp_loop_report+0x110>)
   15b86:	4f32      	ldr	r7, [pc, #200]	; (15c50 <fn_disp_loop_report+0x114>)
   15b88:	6818      	ldr	r0, [r3, #0]
   15b8a:	47b8      	blx	r7
   15b8c:	000b      	movs	r3, r1
   15b8e:	4641      	mov	r1, r8
   15b90:	0002      	movs	r2, r0
   15b92:	9100      	str	r1, [sp, #0]
   15b94:	0020      	movs	r0, r4
   15b96:	492f      	ldr	r1, [pc, #188]	; (15c54 <fn_disp_loop_report+0x118>)
   15b98:	47b0      	blx	r6
		glcd_tiny_draw_string(0,2,display_str);
   15b9a:	0022      	movs	r2, r4
   15b9c:	2102      	movs	r1, #2
   15b9e:	2000      	movs	r0, #0
   15ba0:	47a8      	blx	r5
		
		sprintf(display_str,"Horz Err: %.3f %s", loop_horizontal, unit_str);
   15ba2:	4b2d      	ldr	r3, [pc, #180]	; (15c58 <fn_disp_loop_report+0x11c>)
   15ba4:	6818      	ldr	r0, [r3, #0]
   15ba6:	47b8      	blx	r7
   15ba8:	000b      	movs	r3, r1
   15baa:	4641      	mov	r1, r8
   15bac:	0002      	movs	r2, r0
   15bae:	9100      	str	r1, [sp, #0]
   15bb0:	0020      	movs	r0, r4
   15bb2:	492a      	ldr	r1, [pc, #168]	; (15c5c <fn_disp_loop_report+0x120>)
   15bb4:	47b0      	blx	r6
		glcd_tiny_draw_string(0,3,display_str);
   15bb6:	0022      	movs	r2, r4
   15bb8:	2103      	movs	r1, #3
   15bba:	2000      	movs	r0, #0
   15bbc:	47a8      	blx	r5
		
		sprintf(display_str,"Vert Err: %.3f %s", loop_vertical, unit_str);
   15bbe:	4b28      	ldr	r3, [pc, #160]	; (15c60 <fn_disp_loop_report+0x124>)
   15bc0:	6818      	ldr	r0, [r3, #0]
   15bc2:	47b8      	blx	r7
   15bc4:	000b      	movs	r3, r1
   15bc6:	4641      	mov	r1, r8
   15bc8:	0002      	movs	r2, r0
   15bca:	9100      	str	r1, [sp, #0]
   15bcc:	0020      	movs	r0, r4
   15bce:	4925      	ldr	r1, [pc, #148]	; (15c64 <fn_disp_loop_report+0x128>)
   15bd0:	47b0      	blx	r6
		glcd_tiny_draw_string(0,4,display_str);
   15bd2:	0022      	movs	r2, r4
   15bd4:	2104      	movs	r1, #4
   15bd6:	2000      	movs	r0, #0
   15bd8:	47a8      	blx	r5
		
		sprintf(display_str,"  Azim Err: %.1f deg", loop_azimuth);
   15bda:	4b23      	ldr	r3, [pc, #140]	; (15c68 <fn_disp_loop_report+0x12c>)
   15bdc:	6818      	ldr	r0, [r3, #0]
   15bde:	47b8      	blx	r7
   15be0:	000b      	movs	r3, r1
   15be2:	0002      	movs	r2, r0
   15be4:	4921      	ldr	r1, [pc, #132]	; (15c6c <fn_disp_loop_report+0x130>)
   15be6:	0020      	movs	r0, r4
   15be8:	47b0      	blx	r6
		glcd_tiny_draw_string(0,5,display_str);
   15bea:	0022      	movs	r2, r4
   15bec:	2105      	movs	r1, #5
   15bee:	2000      	movs	r0, #0
   15bf0:	47a8      	blx	r5
		
		sprintf(display_str,"Loop Err: %.3f%% ", loop_error);
   15bf2:	4b1f      	ldr	r3, [pc, #124]	; (15c70 <fn_disp_loop_report+0x134>)
   15bf4:	6818      	ldr	r0, [r3, #0]
   15bf6:	47b8      	blx	r7
   15bf8:	000b      	movs	r3, r1
   15bfa:	0002      	movs	r2, r0
   15bfc:	491d      	ldr	r1, [pc, #116]	; (15c74 <fn_disp_loop_report+0x138>)
   15bfe:	0020      	movs	r0, r4
   15c00:	47b0      	blx	r6
		glcd_tiny_draw_string(0,5,display_str);
   15c02:	0022      	movs	r2, r4
   15c04:	2105      	movs	r1, #5
   15c06:	2000      	movs	r0, #0
   15c08:	47a8      	blx	r5
		
		
		
		glcd_write();
   15c0a:	4b1b      	ldr	r3, [pc, #108]	; (15c78 <fn_disp_loop_report+0x13c>)
   15c0c:	4798      	blx	r3
	
}
   15c0e:	b004      	add	sp, #16
   15c10:	bc04      	pop	{r2}
   15c12:	4690      	mov	r8, r2
   15c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
			strcpy(unit_str,"ft");
   15c16:	ab03      	add	r3, sp, #12
   15c18:	4698      	mov	r8, r3
   15c1a:	4641      	mov	r1, r8
   15c1c:	4b17      	ldr	r3, [pc, #92]	; (15c7c <fn_disp_loop_report+0x140>)
   15c1e:	881a      	ldrh	r2, [r3, #0]
   15c20:	800a      	strh	r2, [r1, #0]
   15c22:	789b      	ldrb	r3, [r3, #2]
   15c24:	708b      	strb	r3, [r1, #2]
   15c26:	e796      	b.n	15b56 <fn_disp_loop_report+0x1a>
   15c28:	20003770 	.word	0x20003770
   15c2c:	000130dd 	.word	0x000130dd
   15c30:	200037f8 	.word	0x200037f8
   15c34:	0001efe9 	.word	0x0001efe9
   15c38:	00024784 	.word	0x00024784
   15c3c:	00014091 	.word	0x00014091
   15c40:	20003054 	.word	0x20003054
   15c44:	0001f101 	.word	0x0001f101
   15c48:	00024798 	.word	0x00024798
   15c4c:	2000376c 	.word	0x2000376c
   15c50:	0001eddd 	.word	0x0001eddd
   15c54:	000247a8 	.word	0x000247a8
   15c58:	200043f0 	.word	0x200043f0
   15c5c:	000247c0 	.word	0x000247c0
   15c60:	20003764 	.word	0x20003764
   15c64:	000247d4 	.word	0x000247d4
   15c68:	200051f0 	.word	0x200051f0
   15c6c:	000247e8 	.word	0x000247e8
   15c70:	20004dcc 	.word	0x20004dcc
   15c74:	00024800 	.word	0x00024800
   15c78:	000139cd 	.word	0x000139cd
   15c7c:	00024780 	.word	0x00024780

00015c80 <fn_debug_rawData>:
void fn_debug_rawData(void){
   15c80:	b5f0      	push	{r4, r5, r6, r7, lr}
   15c82:	46de      	mov	lr, fp
   15c84:	4657      	mov	r7, sl
   15c86:	464e      	mov	r6, r9
   15c88:	4645      	mov	r5, r8
   15c8a:	b5e0      	push	{r5, r6, r7, lr}
   15c8c:	b0ad      	sub	sp, #180	; 0xb4
	quick_measurement( &meas_debug);	
   15c8e:	a802      	add	r0, sp, #8
   15c90:	4b47      	ldr	r3, [pc, #284]	; (15db0 <fn_debug_rawData+0x130>)
   15c92:	4798      	blx	r3
	glcd_clear_buffer();	
   15c94:	4b47      	ldr	r3, [pc, #284]	; (15db4 <fn_debug_rawData+0x134>)
   15c96:	4798      	blx	r3
	sprintf(display_str, "Acc 1     Acc 2  Done");
   15c98:	4c47      	ldr	r4, [pc, #284]	; (15db8 <fn_debug_rawData+0x138>)
   15c9a:	2216      	movs	r2, #22
   15c9c:	4947      	ldr	r1, [pc, #284]	; (15dbc <fn_debug_rawData+0x13c>)
   15c9e:	0020      	movs	r0, r4
   15ca0:	4b47      	ldr	r3, [pc, #284]	; (15dc0 <fn_debug_rawData+0x140>)
   15ca2:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   15ca4:	4b47      	ldr	r3, [pc, #284]	; (15dc4 <fn_debug_rawData+0x144>)
   15ca6:	0022      	movs	r2, r4
   15ca8:	2100      	movs	r1, #0
   15caa:	2000      	movs	r0, #0
   15cac:	4698      	mov	r8, r3
   15cae:	4798      	blx	r3
	sprintf(display_str, "X: %+0.3f %+0.3f", meas_debug.a1xyz[0], meas_debug.a2xyz[0]);
   15cb0:	4d45      	ldr	r5, [pc, #276]	; (15dc8 <fn_debug_rawData+0x148>)
   15cb2:	980a      	ldr	r0, [sp, #40]	; 0x28
   15cb4:	47a8      	blx	r5
   15cb6:	4b45      	ldr	r3, [pc, #276]	; (15dcc <fn_debug_rawData+0x14c>)
   15cb8:	0006      	movs	r6, r0
   15cba:	980d      	ldr	r0, [sp, #52]	; 0x34
   15cbc:	469a      	mov	sl, r3
   15cbe:	000f      	movs	r7, r1
   15cc0:	47a8      	blx	r5
   15cc2:	003b      	movs	r3, r7
   15cc4:	9000      	str	r0, [sp, #0]
   15cc6:	9101      	str	r1, [sp, #4]
   15cc8:	0032      	movs	r2, r6
   15cca:	4651      	mov	r1, sl
   15ccc:	4e40      	ldr	r6, [pc, #256]	; (15dd0 <fn_debug_rawData+0x150>)
   15cce:	0020      	movs	r0, r4
   15cd0:	47b0      	blx	r6
	glcd_tiny_draw_string(0,1,display_str);
   15cd2:	0022      	movs	r2, r4
   15cd4:	2101      	movs	r1, #1
   15cd6:	2000      	movs	r0, #0
   15cd8:	47c0      	blx	r8
	sprintf(display_str, "Y: %+0.3f %+0.3f", meas_debug.a1xyz[1], meas_debug.a2xyz[1]);
   15cda:	980b      	ldr	r0, [sp, #44]	; 0x2c
   15cdc:	47a8      	blx	r5
   15cde:	4b3d      	ldr	r3, [pc, #244]	; (15dd4 <fn_debug_rawData+0x154>)
	sprintf(display_str, "X: %+0.3f %+0.3f", meas_debug.a1xyz[0], meas_debug.a2xyz[0]);
   15ce0:	46b1      	mov	r9, r6
	sprintf(display_str, "Y: %+0.3f %+0.3f", meas_debug.a1xyz[1], meas_debug.a2xyz[1]);
   15ce2:	0006      	movs	r6, r0
   15ce4:	980e      	ldr	r0, [sp, #56]	; 0x38
   15ce6:	469b      	mov	fp, r3
   15ce8:	000f      	movs	r7, r1
   15cea:	47a8      	blx	r5
   15cec:	003b      	movs	r3, r7
   15cee:	9000      	str	r0, [sp, #0]
   15cf0:	9101      	str	r1, [sp, #4]
   15cf2:	0032      	movs	r2, r6
   15cf4:	4659      	mov	r1, fp
   15cf6:	0020      	movs	r0, r4
   15cf8:	47c8      	blx	r9
	glcd_tiny_draw_string(0,2,display_str);
   15cfa:	0022      	movs	r2, r4
   15cfc:	2102      	movs	r1, #2
   15cfe:	2000      	movs	r0, #0
   15d00:	47c0      	blx	r8
	sprintf(display_str, "Z: %+0.3f %+0.3f", meas_debug.a1xyz[2], meas_debug.a2xyz[2]);
   15d02:	980c      	ldr	r0, [sp, #48]	; 0x30
   15d04:	47a8      	blx	r5
   15d06:	0006      	movs	r6, r0
   15d08:	980f      	ldr	r0, [sp, #60]	; 0x3c
   15d0a:	000f      	movs	r7, r1
   15d0c:	47a8      	blx	r5
   15d0e:	003b      	movs	r3, r7
   15d10:	9000      	str	r0, [sp, #0]
   15d12:	9101      	str	r1, [sp, #4]
   15d14:	0032      	movs	r2, r6
   15d16:	4930      	ldr	r1, [pc, #192]	; (15dd8 <fn_debug_rawData+0x158>)
   15d18:	0020      	movs	r0, r4
   15d1a:	47c8      	blx	r9
	glcd_tiny_draw_string(0,3,display_str);
   15d1c:	0022      	movs	r2, r4
   15d1e:	2103      	movs	r1, #3
   15d20:	2000      	movs	r0, #0
   15d22:	47c0      	blx	r8
	sprintf(display_str, "Comp 1    Comp 2  ");
   15d24:	4b26      	ldr	r3, [pc, #152]	; (15dc0 <fn_debug_rawData+0x140>)
   15d26:	2213      	movs	r2, #19
   15d28:	492c      	ldr	r1, [pc, #176]	; (15ddc <fn_debug_rawData+0x15c>)
   15d2a:	0020      	movs	r0, r4
   15d2c:	4798      	blx	r3
	glcd_tiny_draw_string(0,4,display_str);
   15d2e:	0022      	movs	r2, r4
   15d30:	2104      	movs	r1, #4
   15d32:	2000      	movs	r0, #0
   15d34:	47c0      	blx	r8
	sprintf(display_str, "X: %+0.3f %+0.3f", meas_debug.c1xyz[0], meas_debug.c2xyz[0]);
   15d36:	9810      	ldr	r0, [sp, #64]	; 0x40
   15d38:	47a8      	blx	r5
   15d3a:	0006      	movs	r6, r0
   15d3c:	9813      	ldr	r0, [sp, #76]	; 0x4c
   15d3e:	000f      	movs	r7, r1
   15d40:	47a8      	blx	r5
   15d42:	003b      	movs	r3, r7
   15d44:	9000      	str	r0, [sp, #0]
   15d46:	9101      	str	r1, [sp, #4]
   15d48:	0032      	movs	r2, r6
   15d4a:	4651      	mov	r1, sl
   15d4c:	0020      	movs	r0, r4
   15d4e:	47c8      	blx	r9
	glcd_tiny_draw_string(0,5,display_str);
   15d50:	0022      	movs	r2, r4
   15d52:	2105      	movs	r1, #5
   15d54:	2000      	movs	r0, #0
   15d56:	47c0      	blx	r8
	sprintf(display_str, "Y: %+0.3f %+0.3f", meas_debug.c1xyz[1], meas_debug.c2xyz[1]);
   15d58:	9811      	ldr	r0, [sp, #68]	; 0x44
   15d5a:	47a8      	blx	r5
   15d5c:	0006      	movs	r6, r0
   15d5e:	9814      	ldr	r0, [sp, #80]	; 0x50
   15d60:	000f      	movs	r7, r1
   15d62:	47a8      	blx	r5
   15d64:	003b      	movs	r3, r7
   15d66:	9000      	str	r0, [sp, #0]
   15d68:	9101      	str	r1, [sp, #4]
   15d6a:	0032      	movs	r2, r6
   15d6c:	4659      	mov	r1, fp
   15d6e:	0020      	movs	r0, r4
   15d70:	47c8      	blx	r9
	glcd_tiny_draw_string(0,6,display_str);
   15d72:	0022      	movs	r2, r4
   15d74:	2106      	movs	r1, #6
   15d76:	2000      	movs	r0, #0
   15d78:	47c0      	blx	r8
	sprintf(display_str, "Z: %+0.3f %+0.3f Exit", meas_debug.c1xyz[2], meas_debug.c2xyz[2]);
   15d7a:	9812      	ldr	r0, [sp, #72]	; 0x48
   15d7c:	47a8      	blx	r5
   15d7e:	0006      	movs	r6, r0
   15d80:	9815      	ldr	r0, [sp, #84]	; 0x54
   15d82:	000f      	movs	r7, r1
   15d84:	47a8      	blx	r5
   15d86:	003b      	movs	r3, r7
   15d88:	9000      	str	r0, [sp, #0]
   15d8a:	9101      	str	r1, [sp, #4]
   15d8c:	0032      	movs	r2, r6
   15d8e:	4914      	ldr	r1, [pc, #80]	; (15de0 <fn_debug_rawData+0x160>)
   15d90:	0020      	movs	r0, r4
   15d92:	47c8      	blx	r9
	glcd_tiny_draw_string(0,7,display_str);
   15d94:	0022      	movs	r2, r4
   15d96:	2107      	movs	r1, #7
   15d98:	2000      	movs	r0, #0
   15d9a:	47c0      	blx	r8
	glcd_write();	
   15d9c:	4b11      	ldr	r3, [pc, #68]	; (15de4 <fn_debug_rawData+0x164>)
   15d9e:	4798      	blx	r3
}
   15da0:	b02d      	add	sp, #180	; 0xb4
   15da2:	bc3c      	pop	{r2, r3, r4, r5}
   15da4:	4690      	mov	r8, r2
   15da6:	4699      	mov	r9, r3
   15da8:	46a2      	mov	sl, r4
   15daa:	46ab      	mov	fp, r5
   15dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15dae:	46c0      	nop			; (mov r8, r8)
   15db0:	00008701 	.word	0x00008701
   15db4:	000130dd 	.word	0x000130dd
   15db8:	200037f8 	.word	0x200037f8
   15dbc:	000245d4 	.word	0x000245d4
   15dc0:	0001efe9 	.word	0x0001efe9
   15dc4:	00014091 	.word	0x00014091
   15dc8:	0001eddd 	.word	0x0001eddd
   15dcc:	000245ec 	.word	0x000245ec
   15dd0:	0001f101 	.word	0x0001f101
   15dd4:	00024600 	.word	0x00024600
   15dd8:	00024614 	.word	0x00024614
   15ddc:	00024628 	.word	0x00024628
   15de0:	0002463c 	.word	0x0002463c
   15de4:	000139cd 	.word	0x000139cd

00015de8 <fn_process_calibration>:
void fn_process_calibration(void){
   15de8:	b5f0      	push	{r4, r5, r6, r7, lr}
   15dea:	46de      	mov	lr, fp
   15dec:	4657      	mov	r7, sl
   15dee:	464e      	mov	r6, r9
   15df0:	4645      	mov	r5, r8
   15df2:	b5e0      	push	{r5, r6, r7, lr}
	wdt_disable();
   15df4:	4bf5      	ldr	r3, [pc, #980]	; (161cc <fn_process_calibration+0x3e4>)
void fn_process_calibration(void){
   15df6:	b085      	sub	sp, #20
	wdt_disable();
   15df8:	4798      	blx	r3
	cal_init_struct(&a1_calst);
   15dfa:	4cf5      	ldr	r4, [pc, #980]	; (161d0 <fn_process_calibration+0x3e8>)
   15dfc:	48f5      	ldr	r0, [pc, #980]	; (161d4 <fn_process_calibration+0x3ec>)
   15dfe:	47a0      	blx	r4
	cal_init_struct(&a2_calst);
   15e00:	4bf5      	ldr	r3, [pc, #980]	; (161d8 <fn_process_calibration+0x3f0>)
   15e02:	4698      	mov	r8, r3
   15e04:	0018      	movs	r0, r3
   15e06:	47a0      	blx	r4
	cal_init_struct(&c1_calst);
   15e08:	4bf4      	ldr	r3, [pc, #976]	; (161dc <fn_process_calibration+0x3f4>)
   15e0a:	4699      	mov	r9, r3
   15e0c:	0018      	movs	r0, r3
   15e0e:	47a0      	blx	r4
	cal_init_struct(&c2_calst);	
   15e10:	4ff3      	ldr	r7, [pc, #972]	; (161e0 <fn_process_calibration+0x3f8>)
   15e12:	0038      	movs	r0, r7
   15e14:	47a0      	blx	r4
	glcd_clear_buffer();
   15e16:	4bf3      	ldr	r3, [pc, #972]	; (161e4 <fn_process_calibration+0x3fc>)
   15e18:	4798      	blx	r3
	sprintf(display_str, "Processing Data...");
   15e1a:	4ef3      	ldr	r6, [pc, #972]	; (161e8 <fn_process_calibration+0x400>)
   15e1c:	2213      	movs	r2, #19
   15e1e:	49f3      	ldr	r1, [pc, #972]	; (161ec <fn_process_calibration+0x404>)
   15e20:	4bf3      	ldr	r3, [pc, #972]	; (161f0 <fn_process_calibration+0x408>)
   15e22:	0030      	movs	r0, r6
   15e24:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   15e26:	0032      	movs	r2, r6
   15e28:	2100      	movs	r1, #0
   15e2a:	2000      	movs	r0, #0
   15e2c:	4bf1      	ldr	r3, [pc, #964]	; (161f4 <fn_process_calibration+0x40c>)
   15e2e:	4798      	blx	r3
	sprintf(display_str, "Calibration:");
   15e30:	220d      	movs	r2, #13
   15e32:	49f1      	ldr	r1, [pc, #964]	; (161f8 <fn_process_calibration+0x410>)
   15e34:	4bee      	ldr	r3, [pc, #952]	; (161f0 <fn_process_calibration+0x408>)
   15e36:	0030      	movs	r0, r6
   15e38:	4798      	blx	r3
	glcd_tiny_draw_string(0,2,display_str);
   15e3a:	0032      	movs	r2, r6
   15e3c:	2102      	movs	r1, #2
   15e3e:	2000      	movs	r0, #0
   15e40:	4bec      	ldr	r3, [pc, #944]	; (161f4 <fn_process_calibration+0x40c>)
   15e42:	4798      	blx	r3
	sprintf(display_str, "Gain and Offset Cal");
   15e44:	2214      	movs	r2, #20
   15e46:	49ed      	ldr	r1, [pc, #948]	; (161fc <fn_process_calibration+0x414>)
   15e48:	4be9      	ldr	r3, [pc, #932]	; (161f0 <fn_process_calibration+0x408>)
   15e4a:	0030      	movs	r0, r6
   15e4c:	4798      	blx	r3
	glcd_tiny_draw_string(0,3,display_str);
   15e4e:	0032      	movs	r2, r6
   15e50:	2103      	movs	r1, #3
   15e52:	2000      	movs	r0, #0
   15e54:	4be7      	ldr	r3, [pc, #924]	; (161f4 <fn_process_calibration+0x40c>)
   15e56:	4798      	blx	r3
	glcd_write();	
   15e58:	4be9      	ldr	r3, [pc, #932]	; (16200 <fn_process_calibration+0x418>)
   15e5a:	4798      	blx	r3
	sprintf(display_str, "Accelerometer 1      ");
   15e5c:	2216      	movs	r2, #22
   15e5e:	49e9      	ldr	r1, [pc, #932]	; (16204 <fn_process_calibration+0x41c>)
   15e60:	4be3      	ldr	r3, [pc, #908]	; (161f0 <fn_process_calibration+0x408>)
   15e62:	0030      	movs	r0, r6
   15e64:	4798      	blx	r3
	glcd_tiny_draw_string(0,4,display_str);
   15e66:	0032      	movs	r2, r6
   15e68:	2104      	movs	r1, #4
   15e6a:	2000      	movs	r0, #0
   15e6c:	4be1      	ldr	r3, [pc, #900]	; (161f4 <fn_process_calibration+0x40c>)
   15e6e:	4798      	blx	r3
	glcd_write();	
   15e70:	4be3      	ldr	r3, [pc, #908]	; (16200 <fn_process_calibration+0x418>)
   15e72:	4798      	blx	r3
	cal_gain_off(a1raw, &a1_calst);// Gain and Offset Calibration, Accelerometer 1
   15e74:	4ce4      	ldr	r4, [pc, #912]	; (16208 <fn_process_calibration+0x420>)
   15e76:	49d7      	ldr	r1, [pc, #860]	; (161d4 <fn_process_calibration+0x3ec>)
   15e78:	48e4      	ldr	r0, [pc, #912]	; (1620c <fn_process_calibration+0x424>)
   15e7a:	47a0      	blx	r4
	sprintf(display_str, "Accelerometer 2      ");
   15e7c:	2216      	movs	r2, #22
   15e7e:	49e4      	ldr	r1, [pc, #912]	; (16210 <fn_process_calibration+0x428>)
   15e80:	4bdb      	ldr	r3, [pc, #876]	; (161f0 <fn_process_calibration+0x408>)
   15e82:	0030      	movs	r0, r6
   15e84:	4798      	blx	r3
	glcd_tiny_draw_string(0,4,display_str);
   15e86:	0032      	movs	r2, r6
   15e88:	2104      	movs	r1, #4
   15e8a:	2000      	movs	r0, #0
   15e8c:	4bd9      	ldr	r3, [pc, #868]	; (161f4 <fn_process_calibration+0x40c>)
   15e8e:	4798      	blx	r3
	glcd_write();
   15e90:	4bdb      	ldr	r3, [pc, #876]	; (16200 <fn_process_calibration+0x418>)
   15e92:	4798      	blx	r3
	cal_gain_off(a2raw, &a2_calst);// Gain and Offset Calibration, Accelerometer 2
   15e94:	4641      	mov	r1, r8
   15e96:	48df      	ldr	r0, [pc, #892]	; (16214 <fn_process_calibration+0x42c>)
   15e98:	47a0      	blx	r4
	sprintf(display_str, "Compass 1            ");
   15e9a:	2216      	movs	r2, #22
   15e9c:	49de      	ldr	r1, [pc, #888]	; (16218 <fn_process_calibration+0x430>)
   15e9e:	4bd4      	ldr	r3, [pc, #848]	; (161f0 <fn_process_calibration+0x408>)
   15ea0:	0030      	movs	r0, r6
   15ea2:	4798      	blx	r3
	glcd_tiny_draw_string(0,4,display_str);
   15ea4:	0032      	movs	r2, r6
   15ea6:	2104      	movs	r1, #4
   15ea8:	2000      	movs	r0, #0
   15eaa:	4bd2      	ldr	r3, [pc, #840]	; (161f4 <fn_process_calibration+0x40c>)
   15eac:	4798      	blx	r3
	glcd_write();
   15eae:	4bd4      	ldr	r3, [pc, #848]	; (16200 <fn_process_calibration+0x418>)
   15eb0:	4798      	blx	r3
	cal_gain_off(c1raw, &c1_calst);// Gain and Offset Calibration, Compass 1
   15eb2:	4649      	mov	r1, r9
   15eb4:	48d9      	ldr	r0, [pc, #868]	; (1621c <fn_process_calibration+0x434>)
   15eb6:	47a0      	blx	r4
	sprintf(display_str, "Compass 2            ");
   15eb8:	2216      	movs	r2, #22
   15eba:	49d9      	ldr	r1, [pc, #868]	; (16220 <fn_process_calibration+0x438>)
   15ebc:	4bcc      	ldr	r3, [pc, #816]	; (161f0 <fn_process_calibration+0x408>)
   15ebe:	0030      	movs	r0, r6
   15ec0:	4798      	blx	r3
	glcd_tiny_draw_string(0,4,display_str);
   15ec2:	0032      	movs	r2, r6
   15ec4:	2104      	movs	r1, #4
   15ec6:	2000      	movs	r0, #0
   15ec8:	4bca      	ldr	r3, [pc, #808]	; (161f4 <fn_process_calibration+0x40c>)
   15eca:	4798      	blx	r3
	glcd_write();
   15ecc:	4bcc      	ldr	r3, [pc, #816]	; (16200 <fn_process_calibration+0x418>)
   15ece:	4798      	blx	r3
	cal_gain_off(c2raw, &c2_calst);	// Gain and Offset Calibration, Compass 2
   15ed0:	0039      	movs	r1, r7
   15ed2:	48d4      	ldr	r0, [pc, #848]	; (16224 <fn_process_calibration+0x43c>)
   15ed4:	47a0      	blx	r4
	for (i=0;i<n_points;i++){
   15ed6:	4bd4      	ldr	r3, [pc, #848]	; (16228 <fn_process_calibration+0x440>)
   15ed8:	469a      	mov	sl, r3
   15eda:	681b      	ldr	r3, [r3, #0]
   15edc:	2b00      	cmp	r3, #0
   15ede:	d100      	bne.n	15ee2 <fn_process_calibration+0xfa>
   15ee0:	e1fc      	b.n	162dc <fn_process_calibration+0x4f4>
   15ee2:	2300      	movs	r3, #0
   15ee4:	469b      	mov	fp, r3
   15ee6:	4bd1      	ldr	r3, [pc, #836]	; (1622c <fn_process_calibration+0x444>)
   15ee8:	4cd1      	ldr	r4, [pc, #836]	; (16230 <fn_process_calibration+0x448>)
   15eea:	9300      	str	r3, [sp, #0]
   15eec:	4bd1      	ldr	r3, [pc, #836]	; (16234 <fn_process_calibration+0x44c>)
   15eee:	9301      	str	r3, [sp, #4]
   15ef0:	4bd1      	ldr	r3, [pc, #836]	; (16238 <fn_process_calibration+0x450>)
   15ef2:	9302      	str	r3, [sp, #8]
   15ef4:	4bd1      	ldr	r3, [pc, #836]	; (1623c <fn_process_calibration+0x454>)
   15ef6:	9303      	str	r3, [sp, #12]
   15ef8:	0023      	movs	r3, r4
   15efa:	465c      	mov	r4, fp
   15efc:	469b      	mov	fp, r3
   15efe:	0065      	lsls	r5, r4, #1
		cal_apply_cal(a1raw[i], a1cal[i], &a1_calst);
   15f00:	9b00      	ldr	r3, [sp, #0]
   15f02:	192d      	adds	r5, r5, r4
   15f04:	00ad      	lsls	r5, r5, #2
   15f06:	1959      	adds	r1, r3, r5
   15f08:	4bc0      	ldr	r3, [pc, #768]	; (1620c <fn_process_calibration+0x424>)
   15f0a:	4ab2      	ldr	r2, [pc, #712]	; (161d4 <fn_process_calibration+0x3ec>)
   15f0c:	1958      	adds	r0, r3, r5
   15f0e:	47d8      	blx	fp
		cal_apply_cal(a2raw[i], a2cal[i], &a2_calst);
   15f10:	9b01      	ldr	r3, [sp, #4]
   15f12:	4642      	mov	r2, r8
   15f14:	1959      	adds	r1, r3, r5
   15f16:	4bbf      	ldr	r3, [pc, #764]	; (16214 <fn_process_calibration+0x42c>)
	for (i=0;i<n_points;i++){
   15f18:	3401      	adds	r4, #1
		cal_apply_cal(a2raw[i], a2cal[i], &a2_calst);
   15f1a:	1958      	adds	r0, r3, r5
   15f1c:	47d8      	blx	fp
		cal_apply_cal(c1raw[i], c1cal[i], &c1_calst);
   15f1e:	9b02      	ldr	r3, [sp, #8]
   15f20:	464a      	mov	r2, r9
   15f22:	1959      	adds	r1, r3, r5
   15f24:	4bbd      	ldr	r3, [pc, #756]	; (1621c <fn_process_calibration+0x434>)
	for (i=0;i<n_points;i++){
   15f26:	b2e4      	uxtb	r4, r4
		cal_apply_cal(c1raw[i], c1cal[i], &c1_calst);
   15f28:	1958      	adds	r0, r3, r5
   15f2a:	47d8      	blx	fp
		cal_apply_cal(c2raw[i], c2cal[i], &c2_calst);
   15f2c:	9b03      	ldr	r3, [sp, #12]
   15f2e:	003a      	movs	r2, r7
   15f30:	1959      	adds	r1, r3, r5
   15f32:	4bbc      	ldr	r3, [pc, #752]	; (16224 <fn_process_calibration+0x43c>)
   15f34:	1958      	adds	r0, r3, r5
   15f36:	47d8      	blx	fp
	for (i=0;i<n_points;i++){
   15f38:	4653      	mov	r3, sl
   15f3a:	681b      	ldr	r3, [r3, #0]
   15f3c:	429c      	cmp	r4, r3
   15f3e:	d3de      	bcc.n	15efe <fn_process_calibration+0x116>
	glcd_clear_buffer();
   15f40:	4ba8      	ldr	r3, [pc, #672]	; (161e4 <fn_process_calibration+0x3fc>)
   15f42:	4798      	blx	r3
	sprintf(display_str, "Processing Data...");
   15f44:	2213      	movs	r2, #19
   15f46:	49a9      	ldr	r1, [pc, #676]	; (161ec <fn_process_calibration+0x404>)
   15f48:	4ba9      	ldr	r3, [pc, #676]	; (161f0 <fn_process_calibration+0x408>)
   15f4a:	0030      	movs	r0, r6
   15f4c:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   15f4e:	0032      	movs	r2, r6
   15f50:	2100      	movs	r1, #0
   15f52:	2000      	movs	r0, #0
   15f54:	4ba7      	ldr	r3, [pc, #668]	; (161f4 <fn_process_calibration+0x40c>)
   15f56:	4798      	blx	r3
	sprintf(display_str, "Calibration:");
   15f58:	220d      	movs	r2, #13
   15f5a:	49a7      	ldr	r1, [pc, #668]	; (161f8 <fn_process_calibration+0x410>)
   15f5c:	4ba4      	ldr	r3, [pc, #656]	; (161f0 <fn_process_calibration+0x408>)
   15f5e:	0030      	movs	r0, r6
   15f60:	4798      	blx	r3
	glcd_tiny_draw_string(0,2,display_str);
   15f62:	0032      	movs	r2, r6
   15f64:	2102      	movs	r1, #2
   15f66:	2000      	movs	r0, #0
   15f68:	4ba2      	ldr	r3, [pc, #648]	; (161f4 <fn_process_calibration+0x40c>)
   15f6a:	4798      	blx	r3
	sprintf(display_str, "Accelerometer 1      ");
   15f6c:	2216      	movs	r2, #22
   15f6e:	49a5      	ldr	r1, [pc, #660]	; (16204 <fn_process_calibration+0x41c>)
   15f70:	4b9f      	ldr	r3, [pc, #636]	; (161f0 <fn_process_calibration+0x408>)
   15f72:	0030      	movs	r0, r6
   15f74:	4798      	blx	r3
	glcd_tiny_draw_string(0,4,display_str);	glcd_write();
   15f76:	0032      	movs	r2, r6
   15f78:	2104      	movs	r1, #4
   15f7a:	2000      	movs	r0, #0
   15f7c:	4b9d      	ldr	r3, [pc, #628]	; (161f4 <fn_process_calibration+0x40c>)
   15f7e:	4798      	blx	r3
   15f80:	4b9f      	ldr	r3, [pc, #636]	; (16200 <fn_process_calibration+0x418>)
   15f82:	4798      	blx	r3
	cal_axis_misalignments(a1cal, &a1_calst); // Sensor axis misalignments, Accelerometer 1
   15f84:	4cae      	ldr	r4, [pc, #696]	; (16240 <fn_process_calibration+0x458>)
   15f86:	4993      	ldr	r1, [pc, #588]	; (161d4 <fn_process_calibration+0x3ec>)
   15f88:	9800      	ldr	r0, [sp, #0]
   15f8a:	47a0      	blx	r4
	sprintf(display_str, "Accelerometer 2      ");
   15f8c:	2216      	movs	r2, #22
   15f8e:	49a0      	ldr	r1, [pc, #640]	; (16210 <fn_process_calibration+0x428>)
   15f90:	4b97      	ldr	r3, [pc, #604]	; (161f0 <fn_process_calibration+0x408>)
   15f92:	0030      	movs	r0, r6
   15f94:	4798      	blx	r3
	glcd_tiny_draw_string(0,4,display_str);	glcd_write();
   15f96:	0032      	movs	r2, r6
   15f98:	2104      	movs	r1, #4
   15f9a:	2000      	movs	r0, #0
   15f9c:	4b95      	ldr	r3, [pc, #596]	; (161f4 <fn_process_calibration+0x40c>)
   15f9e:	4798      	blx	r3
   15fa0:	4b97      	ldr	r3, [pc, #604]	; (16200 <fn_process_calibration+0x418>)
   15fa2:	4798      	blx	r3
	cal_axis_misalignments(a2cal, &a2_calst);// Sensor axis misalignments, Accelerometer 2
   15fa4:	4641      	mov	r1, r8
   15fa6:	9801      	ldr	r0, [sp, #4]
   15fa8:	47a0      	blx	r4
	sprintf(display_str, "Compass 1            ");
   15faa:	2216      	movs	r2, #22
   15fac:	499a      	ldr	r1, [pc, #616]	; (16218 <fn_process_calibration+0x430>)
   15fae:	4b90      	ldr	r3, [pc, #576]	; (161f0 <fn_process_calibration+0x408>)
   15fb0:	0030      	movs	r0, r6
   15fb2:	4798      	blx	r3
	glcd_tiny_draw_string(0,4,display_str);	glcd_write();
   15fb4:	0032      	movs	r2, r6
   15fb6:	2104      	movs	r1, #4
   15fb8:	2000      	movs	r0, #0
   15fba:	4b8e      	ldr	r3, [pc, #568]	; (161f4 <fn_process_calibration+0x40c>)
   15fbc:	4798      	blx	r3
   15fbe:	4b90      	ldr	r3, [pc, #576]	; (16200 <fn_process_calibration+0x418>)
   15fc0:	4798      	blx	r3
	cal_axis_misalignments(c1cal, &c1_calst);// Sensor axis misalignments, Compass 1
   15fc2:	4649      	mov	r1, r9
   15fc4:	9802      	ldr	r0, [sp, #8]
   15fc6:	47a0      	blx	r4
	sprintf(display_str, "Compass 2            ");
   15fc8:	2216      	movs	r2, #22
   15fca:	4995      	ldr	r1, [pc, #596]	; (16220 <fn_process_calibration+0x438>)
   15fcc:	4b88      	ldr	r3, [pc, #544]	; (161f0 <fn_process_calibration+0x408>)
   15fce:	0030      	movs	r0, r6
   15fd0:	4798      	blx	r3
	glcd_tiny_draw_string(0,4,display_str);	glcd_write();
   15fd2:	0032      	movs	r2, r6
   15fd4:	2104      	movs	r1, #4
   15fd6:	2000      	movs	r0, #0
   15fd8:	4b86      	ldr	r3, [pc, #536]	; (161f4 <fn_process_calibration+0x40c>)
   15fda:	4798      	blx	r3
   15fdc:	4b88      	ldr	r3, [pc, #544]	; (16200 <fn_process_calibration+0x418>)
   15fde:	4798      	blx	r3
	cal_axis_misalignments(c2cal, &c2_calst);// Sensor axis misalignments, Compass 2
   15fe0:	0039      	movs	r1, r7
   15fe2:	9803      	ldr	r0, [sp, #12]
   15fe4:	47a0      	blx	r4
	for (i=0;i<n_points;i++){
   15fe6:	4653      	mov	r3, sl
   15fe8:	681b      	ldr	r3, [r3, #0]
   15fea:	2b00      	cmp	r3, #0
   15fec:	d026      	beq.n	1603c <fn_process_calibration+0x254>
   15fee:	2300      	movs	r3, #0
   15ff0:	4c8f      	ldr	r4, [pc, #572]	; (16230 <fn_process_calibration+0x448>)
   15ff2:	469b      	mov	fp, r3
   15ff4:	0023      	movs	r3, r4
   15ff6:	465c      	mov	r4, fp
   15ff8:	469b      	mov	fp, r3
   15ffa:	0065      	lsls	r5, r4, #1
		cal_apply_cal(a1raw[i], a1cal[i], &a1_calst);
   15ffc:	9b00      	ldr	r3, [sp, #0]
   15ffe:	192d      	adds	r5, r5, r4
   16000:	00ad      	lsls	r5, r5, #2
   16002:	1959      	adds	r1, r3, r5
   16004:	4b81      	ldr	r3, [pc, #516]	; (1620c <fn_process_calibration+0x424>)
   16006:	4a73      	ldr	r2, [pc, #460]	; (161d4 <fn_process_calibration+0x3ec>)
   16008:	1958      	adds	r0, r3, r5
   1600a:	47d8      	blx	fp
		cal_apply_cal(a2raw[i], a2cal[i], &a2_calst);
   1600c:	9b01      	ldr	r3, [sp, #4]
   1600e:	4642      	mov	r2, r8
   16010:	1959      	adds	r1, r3, r5
   16012:	4b80      	ldr	r3, [pc, #512]	; (16214 <fn_process_calibration+0x42c>)
	for (i=0;i<n_points;i++){
   16014:	3401      	adds	r4, #1
		cal_apply_cal(a2raw[i], a2cal[i], &a2_calst);
   16016:	1958      	adds	r0, r3, r5
   16018:	47d8      	blx	fp
		cal_apply_cal(c1raw[i], c1cal[i], &c1_calst);
   1601a:	9b02      	ldr	r3, [sp, #8]
   1601c:	464a      	mov	r2, r9
   1601e:	1959      	adds	r1, r3, r5
   16020:	4b7e      	ldr	r3, [pc, #504]	; (1621c <fn_process_calibration+0x434>)
	for (i=0;i<n_points;i++){
   16022:	b2e4      	uxtb	r4, r4
		cal_apply_cal(c1raw[i], c1cal[i], &c1_calst);
   16024:	1958      	adds	r0, r3, r5
   16026:	47d8      	blx	fp
		cal_apply_cal(c2raw[i], c2cal[i], &c2_calst);
   16028:	9b03      	ldr	r3, [sp, #12]
   1602a:	003a      	movs	r2, r7
   1602c:	1959      	adds	r1, r3, r5
   1602e:	4b7d      	ldr	r3, [pc, #500]	; (16224 <fn_process_calibration+0x43c>)
   16030:	1958      	adds	r0, r3, r5
   16032:	47d8      	blx	fp
	for (i=0;i<n_points;i++){
   16034:	4653      	mov	r3, sl
   16036:	681b      	ldr	r3, [r3, #0]
   16038:	429c      	cmp	r4, r3
   1603a:	d3de      	bcc.n	15ffa <fn_process_calibration+0x212>
	glcd_clear_buffer();
   1603c:	4b69      	ldr	r3, [pc, #420]	; (161e4 <fn_process_calibration+0x3fc>)
   1603e:	4798      	blx	r3
	sprintf(display_str, "Processing Data...");
   16040:	2213      	movs	r2, #19
   16042:	496a      	ldr	r1, [pc, #424]	; (161ec <fn_process_calibration+0x404>)
   16044:	4b6a      	ldr	r3, [pc, #424]	; (161f0 <fn_process_calibration+0x408>)
   16046:	0030      	movs	r0, r6
   16048:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   1604a:	0032      	movs	r2, r6
   1604c:	2100      	movs	r1, #0
   1604e:	2000      	movs	r0, #0
   16050:	4b68      	ldr	r3, [pc, #416]	; (161f4 <fn_process_calibration+0x40c>)
   16052:	4798      	blx	r3
	sprintf(display_str, "Calibration:");
   16054:	220d      	movs	r2, #13
   16056:	4968      	ldr	r1, [pc, #416]	; (161f8 <fn_process_calibration+0x410>)
   16058:	4b65      	ldr	r3, [pc, #404]	; (161f0 <fn_process_calibration+0x408>)
   1605a:	0030      	movs	r0, r6
   1605c:	4798      	blx	r3
	glcd_tiny_draw_string(0,2,display_str);
   1605e:	0032      	movs	r2, r6
   16060:	2102      	movs	r1, #2
   16062:	2000      	movs	r0, #0
   16064:	4b63      	ldr	r3, [pc, #396]	; (161f4 <fn_process_calibration+0x40c>)
   16066:	4798      	blx	r3
	sprintf(display_str, "Misalignment Cal, YZ");
   16068:	2215      	movs	r2, #21
   1606a:	4976      	ldr	r1, [pc, #472]	; (16244 <fn_process_calibration+0x45c>)
   1606c:	4b60      	ldr	r3, [pc, #384]	; (161f0 <fn_process_calibration+0x408>)
   1606e:	0030      	movs	r0, r6
   16070:	4798      	blx	r3
	glcd_tiny_draw_string(0,3,display_str);
   16072:	0032      	movs	r2, r6
   16074:	2103      	movs	r1, #3
   16076:	2000      	movs	r0, #0
   16078:	4b5e      	ldr	r3, [pc, #376]	; (161f4 <fn_process_calibration+0x40c>)
   1607a:	4798      	blx	r3
	glcd_write();		
   1607c:	4b60      	ldr	r3, [pc, #384]	; (16200 <fn_process_calibration+0x418>)
   1607e:	4798      	blx	r3
   16080:	4b71      	ldr	r3, [pc, #452]	; (16248 <fn_process_calibration+0x460>)
   16082:	2501      	movs	r5, #1
   16084:	469b      	mov	fp, r3
   16086:	4c71      	ldr	r4, [pc, #452]	; (1624c <fn_process_calibration+0x464>)
		sprintf(display_str, "Iteration: %d of 3    ", j+1);
   16088:	002a      	movs	r2, r5
   1608a:	4971      	ldr	r1, [pc, #452]	; (16250 <fn_process_calibration+0x468>)
   1608c:	0030      	movs	r0, r6
   1608e:	47d8      	blx	fp
		glcd_tiny_draw_string(0,4,display_str);
   16090:	0032      	movs	r2, r6
   16092:	2104      	movs	r1, #4
   16094:	2000      	movs	r0, #0
   16096:	4b57      	ldr	r3, [pc, #348]	; (161f4 <fn_process_calibration+0x40c>)
   16098:	4798      	blx	r3
		glcd_write();
   1609a:	4b59      	ldr	r3, [pc, #356]	; (16200 <fn_process_calibration+0x418>)
   1609c:	4798      	blx	r3
		cal_angleYZ(a1cal, &a1_calst);//  Sensor Package to laser Y&Z axis alignment, Accelerometer 1
   1609e:	494d      	ldr	r1, [pc, #308]	; (161d4 <fn_process_calibration+0x3ec>)
   160a0:	9800      	ldr	r0, [sp, #0]
   160a2:	47a0      	blx	r4
		cal_angleYZ(a2cal, &a2_calst);//  Sensor Package to laser Y&Z axis alignment, Accelerometer 2
   160a4:	4641      	mov	r1, r8
   160a6:	9801      	ldr	r0, [sp, #4]
   160a8:	47a0      	blx	r4
		cal_angleYZ(c1cal, &c1_calst);//  Sensor Package to laser Y&Z axis alignment, Compass 1
   160aa:	4649      	mov	r1, r9
   160ac:	9802      	ldr	r0, [sp, #8]
   160ae:	47a0      	blx	r4
   160b0:	3501      	adds	r5, #1
		cal_angleYZ(c2cal, &c2_calst);//  Sensor Package to laser Y&Z axis alignment, Compass 2
   160b2:	0039      	movs	r1, r7
   160b4:	9803      	ldr	r0, [sp, #12]
   160b6:	47a0      	blx	r4
	for (j=0;j<3;j++){
   160b8:	2d04      	cmp	r5, #4
   160ba:	d1e5      	bne.n	16088 <fn_process_calibration+0x2a0>
	for (i=0;i<n_points;i++){
   160bc:	4653      	mov	r3, sl
   160be:	681b      	ldr	r3, [r3, #0]
   160c0:	2b00      	cmp	r3, #0
   160c2:	d026      	beq.n	16112 <fn_process_calibration+0x32a>
   160c4:	2300      	movs	r3, #0
   160c6:	4c5a      	ldr	r4, [pc, #360]	; (16230 <fn_process_calibration+0x448>)
   160c8:	469b      	mov	fp, r3
   160ca:	0023      	movs	r3, r4
   160cc:	465c      	mov	r4, fp
   160ce:	469b      	mov	fp, r3
   160d0:	0065      	lsls	r5, r4, #1
		cal_apply_cal(a1raw[i], a1cal[i], &a1_calst);
   160d2:	9b00      	ldr	r3, [sp, #0]
   160d4:	192d      	adds	r5, r5, r4
   160d6:	00ad      	lsls	r5, r5, #2
   160d8:	1959      	adds	r1, r3, r5
   160da:	4b4c      	ldr	r3, [pc, #304]	; (1620c <fn_process_calibration+0x424>)
   160dc:	4a3d      	ldr	r2, [pc, #244]	; (161d4 <fn_process_calibration+0x3ec>)
   160de:	1958      	adds	r0, r3, r5
   160e0:	47d8      	blx	fp
		cal_apply_cal(a2raw[i], a2cal[i], &a2_calst);
   160e2:	9b01      	ldr	r3, [sp, #4]
   160e4:	4642      	mov	r2, r8
   160e6:	1959      	adds	r1, r3, r5
   160e8:	4b4a      	ldr	r3, [pc, #296]	; (16214 <fn_process_calibration+0x42c>)
	for (i=0;i<n_points;i++){
   160ea:	3401      	adds	r4, #1
		cal_apply_cal(a2raw[i], a2cal[i], &a2_calst);
   160ec:	1958      	adds	r0, r3, r5
   160ee:	47d8      	blx	fp
		cal_apply_cal(c1raw[i], c1cal[i], &c1_calst);
   160f0:	9b02      	ldr	r3, [sp, #8]
   160f2:	464a      	mov	r2, r9
   160f4:	1959      	adds	r1, r3, r5
   160f6:	4b49      	ldr	r3, [pc, #292]	; (1621c <fn_process_calibration+0x434>)
	for (i=0;i<n_points;i++){
   160f8:	b2e4      	uxtb	r4, r4
		cal_apply_cal(c1raw[i], c1cal[i], &c1_calst);
   160fa:	1958      	adds	r0, r3, r5
   160fc:	47d8      	blx	fp
		cal_apply_cal(c2raw[i], c2cal[i], &c2_calst);
   160fe:	9b03      	ldr	r3, [sp, #12]
   16100:	003a      	movs	r2, r7
   16102:	1959      	adds	r1, r3, r5
   16104:	4b47      	ldr	r3, [pc, #284]	; (16224 <fn_process_calibration+0x43c>)
   16106:	1958      	adds	r0, r3, r5
   16108:	47d8      	blx	fp
	for (i=0;i<n_points;i++){
   1610a:	4653      	mov	r3, sl
   1610c:	681b      	ldr	r3, [r3, #0]
   1610e:	429c      	cmp	r4, r3
   16110:	d3de      	bcc.n	160d0 <fn_process_calibration+0x2e8>
	glcd_clear_buffer();
   16112:	4b34      	ldr	r3, [pc, #208]	; (161e4 <fn_process_calibration+0x3fc>)
   16114:	4798      	blx	r3
	sprintf(display_str, "Processing Data...");
   16116:	2213      	movs	r2, #19
   16118:	4934      	ldr	r1, [pc, #208]	; (161ec <fn_process_calibration+0x404>)
   1611a:	4b35      	ldr	r3, [pc, #212]	; (161f0 <fn_process_calibration+0x408>)
   1611c:	0030      	movs	r0, r6
   1611e:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   16120:	0032      	movs	r2, r6
   16122:	2100      	movs	r1, #0
   16124:	2000      	movs	r0, #0
   16126:	4b33      	ldr	r3, [pc, #204]	; (161f4 <fn_process_calibration+0x40c>)
   16128:	4798      	blx	r3
	sprintf(display_str, "Calibration:");
   1612a:	220d      	movs	r2, #13
   1612c:	4932      	ldr	r1, [pc, #200]	; (161f8 <fn_process_calibration+0x410>)
   1612e:	4b30      	ldr	r3, [pc, #192]	; (161f0 <fn_process_calibration+0x408>)
   16130:	0030      	movs	r0, r6
   16132:	4798      	blx	r3
	glcd_tiny_draw_string(0,2,display_str);
   16134:	0032      	movs	r2, r6
   16136:	2102      	movs	r1, #2
   16138:	2000      	movs	r0, #0
   1613a:	4b2e      	ldr	r3, [pc, #184]	; (161f4 <fn_process_calibration+0x40c>)
   1613c:	4798      	blx	r3
	sprintf(display_str, "Misalignment Cal, X");
   1613e:	2214      	movs	r2, #20
   16140:	4944      	ldr	r1, [pc, #272]	; (16254 <fn_process_calibration+0x46c>)
   16142:	4b2b      	ldr	r3, [pc, #172]	; (161f0 <fn_process_calibration+0x408>)
   16144:	0030      	movs	r0, r6
   16146:	4798      	blx	r3
	glcd_tiny_draw_string(0,3,display_str);
   16148:	0032      	movs	r2, r6
   1614a:	2103      	movs	r1, #3
   1614c:	2000      	movs	r0, #0
   1614e:	4b29      	ldr	r3, [pc, #164]	; (161f4 <fn_process_calibration+0x40c>)
   16150:	4798      	blx	r3
	glcd_write();
   16152:	4b2b      	ldr	r3, [pc, #172]	; (16200 <fn_process_calibration+0x418>)
   16154:	4798      	blx	r3
	cal_angleX(a1cal, a2cal, &a2_calst);//  Sensor package to laser X-axis alignment, Accelerometer 2
   16156:	4642      	mov	r2, r8
   16158:	9901      	ldr	r1, [sp, #4]
   1615a:	9800      	ldr	r0, [sp, #0]
   1615c:	4c3e      	ldr	r4, [pc, #248]	; (16258 <fn_process_calibration+0x470>)
   1615e:	47a0      	blx	r4
	cal_angleX(c1cal, c2cal, &c2_calst);//  Sensor package to laser X-axis alignment, Compass 2
   16160:	003a      	movs	r2, r7
   16162:	9903      	ldr	r1, [sp, #12]
   16164:	9802      	ldr	r0, [sp, #8]
   16166:	47a0      	blx	r4
	for (i=0;i<n_points;i++){
   16168:	4653      	mov	r3, sl
   1616a:	681b      	ldr	r3, [r3, #0]
   1616c:	2b00      	cmp	r3, #0
   1616e:	d026      	beq.n	161be <fn_process_calibration+0x3d6>
   16170:	2300      	movs	r3, #0
   16172:	4c2f      	ldr	r4, [pc, #188]	; (16230 <fn_process_calibration+0x448>)
   16174:	469b      	mov	fp, r3
   16176:	0023      	movs	r3, r4
   16178:	465c      	mov	r4, fp
   1617a:	469b      	mov	fp, r3
   1617c:	0065      	lsls	r5, r4, #1
		cal_apply_cal(a1raw[i], a1cal[i], &a1_calst);
   1617e:	9b00      	ldr	r3, [sp, #0]
   16180:	192d      	adds	r5, r5, r4
   16182:	00ad      	lsls	r5, r5, #2
   16184:	1959      	adds	r1, r3, r5
   16186:	4b21      	ldr	r3, [pc, #132]	; (1620c <fn_process_calibration+0x424>)
   16188:	4a12      	ldr	r2, [pc, #72]	; (161d4 <fn_process_calibration+0x3ec>)
   1618a:	1958      	adds	r0, r3, r5
   1618c:	47d8      	blx	fp
		cal_apply_cal(a2raw[i], a2cal[i], &a2_calst);
   1618e:	9b01      	ldr	r3, [sp, #4]
   16190:	4642      	mov	r2, r8
   16192:	1959      	adds	r1, r3, r5
   16194:	4b1f      	ldr	r3, [pc, #124]	; (16214 <fn_process_calibration+0x42c>)
	for (i=0;i<n_points;i++){
   16196:	3401      	adds	r4, #1
		cal_apply_cal(a2raw[i], a2cal[i], &a2_calst);
   16198:	1958      	adds	r0, r3, r5
   1619a:	47d8      	blx	fp
		cal_apply_cal(c1raw[i], c1cal[i], &c1_calst);
   1619c:	9b02      	ldr	r3, [sp, #8]
   1619e:	464a      	mov	r2, r9
   161a0:	1959      	adds	r1, r3, r5
   161a2:	4b1e      	ldr	r3, [pc, #120]	; (1621c <fn_process_calibration+0x434>)
	for (i=0;i<n_points;i++){
   161a4:	b2e4      	uxtb	r4, r4
		cal_apply_cal(c1raw[i], c1cal[i], &c1_calst);
   161a6:	1958      	adds	r0, r3, r5
   161a8:	47d8      	blx	fp
		cal_apply_cal(c2raw[i], c2cal[i], &c2_calst);
   161aa:	9b03      	ldr	r3, [sp, #12]
   161ac:	003a      	movs	r2, r7
   161ae:	1959      	adds	r1, r3, r5
   161b0:	4b1c      	ldr	r3, [pc, #112]	; (16224 <fn_process_calibration+0x43c>)
   161b2:	1958      	adds	r0, r3, r5
   161b4:	47d8      	blx	fp
	for (i=0;i<n_points;i++){
   161b6:	4653      	mov	r3, sl
   161b8:	681b      	ldr	r3, [r3, #0]
   161ba:	429c      	cmp	r4, r3
   161bc:	d3de      	bcc.n	1617c <fn_process_calibration+0x394>
	glcd_clear_buffer();
   161be:	4b09      	ldr	r3, [pc, #36]	; (161e4 <fn_process_calibration+0x3fc>)
   161c0:	4798      	blx	r3
	sprintf(display_str, "Processing Data...");
   161c2:	2213      	movs	r2, #19
   161c4:	4909      	ldr	r1, [pc, #36]	; (161ec <fn_process_calibration+0x404>)
   161c6:	0030      	movs	r0, r6
   161c8:	e048      	b.n	1625c <fn_process_calibration+0x474>
   161ca:	46c0      	nop			; (mov r8, r8)
   161cc:	00009625 	.word	0x00009625
   161d0:	0000e671 	.word	0x0000e671
   161d4:	200051f4 	.word	0x200051f4
   161d8:	20004dd0 	.word	0x20004dd0
   161dc:	200036fc 	.word	0x200036fc
   161e0:	20002650 	.word	0x20002650
   161e4:	000130dd 	.word	0x000130dd
   161e8:	200037f8 	.word	0x200037f8
   161ec:	00024a04 	.word	0x00024a04
   161f0:	0001efe9 	.word	0x0001efe9
   161f4:	00014091 	.word	0x00014091
   161f8:	00024368 	.word	0x00024368
   161fc:	00024a18 	.word	0x00024a18
   16200:	000139cd 	.word	0x000139cd
   16204:	00024a2c 	.word	0x00024a2c
   16208:	00010d41 	.word	0x00010d41
   1620c:	20005254 	.word	0x20005254
   16210:	00024a44 	.word	0x00024a44
   16214:	20004410 	.word	0x20004410
   16218:	00024a5c 	.word	0x00024a5c
   1621c:	2000228c 	.word	0x2000228c
   16220:	00024a74 	.word	0x00024a74
   16224:	200026b0 	.word	0x200026b0
   16228:	20003054 	.word	0x20003054
   1622c:	20003cc0 	.word	0x20003cc0
   16230:	0000e559 	.word	0x0000e559
   16234:	20004e30 	.word	0x20004e30
   16238:	20002a70 	.word	0x20002a70
   1623c:	200038f8 	.word	0x200038f8
   16240:	000100ad 	.word	0x000100ad
   16244:	00024a8c 	.word	0x00024a8c
   16248:	0001f101 	.word	0x0001f101
   1624c:	0000e951 	.word	0x0000e951
   16250:	00024aa4 	.word	0x00024aa4
   16254:	00024abc 	.word	0x00024abc
   16258:	0000e81d 	.word	0x0000e81d
   1625c:	4b24      	ldr	r3, [pc, #144]	; (162f0 <fn_process_calibration+0x508>)
   1625e:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   16260:	0032      	movs	r2, r6
   16262:	2100      	movs	r1, #0
   16264:	2000      	movs	r0, #0
   16266:	4b23      	ldr	r3, [pc, #140]	; (162f4 <fn_process_calibration+0x50c>)
   16268:	4798      	blx	r3
	sprintf(display_str, "Evaluating Results   ");
   1626a:	2216      	movs	r2, #22
   1626c:	4922      	ldr	r1, [pc, #136]	; (162f8 <fn_process_calibration+0x510>)
   1626e:	0030      	movs	r0, r6
   16270:	4b1f      	ldr	r3, [pc, #124]	; (162f0 <fn_process_calibration+0x508>)
   16272:	4798      	blx	r3
	glcd_tiny_draw_string(0,2,display_str);
   16274:	0032      	movs	r2, r6
   16276:	2102      	movs	r1, #2
   16278:	2000      	movs	r0, #0
   1627a:	4b1e      	ldr	r3, [pc, #120]	; (162f4 <fn_process_calibration+0x50c>)
   1627c:	4798      	blx	r3
	glcd_write();
   1627e:	4b1f      	ldr	r3, [pc, #124]	; (162fc <fn_process_calibration+0x514>)
   16280:	4798      	blx	r3
	cal_evaluate();	
   16282:	4b1f      	ldr	r3, [pc, #124]	; (16300 <fn_process_calibration+0x518>)
   16284:	4798      	blx	r3
	sprintf(display_str, "Writing Report       ");
   16286:	2216      	movs	r2, #22
   16288:	491e      	ldr	r1, [pc, #120]	; (16304 <fn_process_calibration+0x51c>)
   1628a:	0030      	movs	r0, r6
   1628c:	4b18      	ldr	r3, [pc, #96]	; (162f0 <fn_process_calibration+0x508>)
   1628e:	4798      	blx	r3
	glcd_tiny_draw_string(0,2,display_str);
   16290:	0032      	movs	r2, r6
   16292:	2102      	movs	r1, #2
   16294:	2000      	movs	r0, #0
   16296:	4b17      	ldr	r3, [pc, #92]	; (162f4 <fn_process_calibration+0x50c>)
   16298:	4798      	blx	r3
	glcd_write();	
   1629a:	4b18      	ldr	r3, [pc, #96]	; (162fc <fn_process_calibration+0x514>)
   1629c:	4798      	blx	r3
	cal_write_report();
   1629e:	4b1a      	ldr	r3, [pc, #104]	; (16308 <fn_process_calibration+0x520>)
   162a0:	4798      	blx	r3
	save_calibration();
   162a2:	4b1a      	ldr	r3, [pc, #104]	; (1630c <fn_process_calibration+0x524>)
   162a4:	4798      	blx	r3
	sprintf(display_str, "Calibration Complete!");
   162a6:	2216      	movs	r2, #22
   162a8:	4919      	ldr	r1, [pc, #100]	; (16310 <fn_process_calibration+0x528>)
   162aa:	0030      	movs	r0, r6
   162ac:	4b10      	ldr	r3, [pc, #64]	; (162f0 <fn_process_calibration+0x508>)
   162ae:	4798      	blx	r3
	glcd_tiny_draw_string(0,2,display_str);
   162b0:	0032      	movs	r2, r6
   162b2:	2102      	movs	r1, #2
   162b4:	2000      	movs	r0, #0
   162b6:	4b0f      	ldr	r3, [pc, #60]	; (162f4 <fn_process_calibration+0x50c>)
   162b8:	4798      	blx	r3
	glcd_write();
   162ba:	4b10      	ldr	r3, [pc, #64]	; (162fc <fn_process_calibration+0x514>)
   162bc:	4798      	blx	r3
	delay_s(3);
   162be:	4815      	ldr	r0, [pc, #84]	; (16314 <fn_process_calibration+0x52c>)
   162c0:	4b15      	ldr	r3, [pc, #84]	; (16318 <fn_process_calibration+0x530>)
   162c2:	4798      	blx	r3
	wdt_enable();
   162c4:	4b15      	ldr	r3, [pc, #84]	; (1631c <fn_process_calibration+0x534>)
   162c6:	4798      	blx	r3
	current_input = input_state_complete;
   162c8:	2208      	movs	r2, #8
   162ca:	4b15      	ldr	r3, [pc, #84]	; (16320 <fn_process_calibration+0x538>)
   162cc:	701a      	strb	r2, [r3, #0]
}
   162ce:	b005      	add	sp, #20
   162d0:	bc3c      	pop	{r2, r3, r4, r5}
   162d2:	4690      	mov	r8, r2
   162d4:	4699      	mov	r9, r3
   162d6:	46a2      	mov	sl, r4
   162d8:	46ab      	mov	fp, r5
   162da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   162dc:	4b11      	ldr	r3, [pc, #68]	; (16324 <fn_process_calibration+0x53c>)
   162de:	9300      	str	r3, [sp, #0]
   162e0:	4b11      	ldr	r3, [pc, #68]	; (16328 <fn_process_calibration+0x540>)
   162e2:	9301      	str	r3, [sp, #4]
   162e4:	4b11      	ldr	r3, [pc, #68]	; (1632c <fn_process_calibration+0x544>)
   162e6:	9302      	str	r3, [sp, #8]
   162e8:	4b11      	ldr	r3, [pc, #68]	; (16330 <fn_process_calibration+0x548>)
   162ea:	9303      	str	r3, [sp, #12]
   162ec:	e628      	b.n	15f40 <fn_process_calibration+0x158>
   162ee:	46c0      	nop			; (mov r8, r8)
   162f0:	0001efe9 	.word	0x0001efe9
   162f4:	00014091 	.word	0x00014091
   162f8:	00024ad0 	.word	0x00024ad0
   162fc:	000139cd 	.word	0x000139cd
   16300:	0000dc11 	.word	0x0000dc11
   16304:	00024ae8 	.word	0x00024ae8
   16308:	0000d145 	.word	0x0000d145
   1630c:	00007b39 	.word	0x00007b39
   16310:	00024b00 	.word	0x00024b00
   16314:	00000bb8 	.word	0x00000bb8
   16318:	000151d9 	.word	0x000151d9
   1631c:	00009601 	.word	0x00009601
   16320:	200043f4 	.word	0x200043f4
   16324:	20003cc0 	.word	0x20003cc0
   16328:	20004e30 	.word	0x20004e30
   1632c:	20002a70 	.word	0x20002a70
   16330:	200038f8 	.word	0x200038f8

00016334 <fn_aim_abort>:
	
}



void fn_aim_abort(void){
   16334:	b510      	push	{r4, lr}
	rangefinder_on_off(false);
   16336:	4b05      	ldr	r3, [pc, #20]	; (1634c <fn_aim_abort+0x18>)
   16338:	2000      	movs	r0, #0
   1633a:	4798      	blx	r3
   1633c:	2204      	movs	r2, #4
   1633e:	4b04      	ldr	r3, [pc, #16]	; (16350 <fn_aim_abort+0x1c>)
   16340:	615a      	str	r2, [r3, #20]
	ioport_set_pin_level(laser_reset, false);

	current_input = input_state_complete;
   16342:	4b04      	ldr	r3, [pc, #16]	; (16354 <fn_aim_abort+0x20>)
   16344:	3204      	adds	r2, #4
   16346:	701a      	strb	r2, [r3, #0]
	
}
   16348:	bd10      	pop	{r4, pc}
   1634a:	46c0      	nop			; (mov r8, r8)
   1634c:	0000834d 	.word	0x0000834d
   16350:	40002800 	.word	0x40002800
   16354:	200043f4 	.word	0x200043f4

00016358 <fn_set_clock>:
void fn_set_clock(void){
   16358:	b5f0      	push	{r4, r5, r6, r7, lr}
   1635a:	4646      	mov	r6, r8
   1635c:	46d6      	mov	lr, sl
   1635e:	464f      	mov	r7, r9
   16360:	b5c0      	push	{r6, r7, lr}
   16362:	b08e      	sub	sp, #56	; 0x38
	CLOCK_SETTING clock_table[] = {
   16364:	ac02      	add	r4, sp, #8
   16366:	0022      	movs	r2, r4
   16368:	4b7b      	ldr	r3, [pc, #492]	; (16558 <fn_set_clock+0x200>)
   1636a:	cb43      	ldmia	r3!, {r0, r1, r6}
   1636c:	c243      	stmia	r2!, {r0, r1, r6}
   1636e:	cb43      	ldmia	r3!, {r0, r1, r6}
   16370:	c243      	stmia	r2!, {r0, r1, r6}
   16372:	cb43      	ldmia	r3!, {r0, r1, r6}
   16374:	c243      	stmia	r2!, {r0, r1, r6}
   16376:	cb43      	ldmia	r3!, {r0, r1, r6}
   16378:	c243      	stmia	r2!, {r0, r1, r6}
	if (state_change) {
   1637a:	4b78      	ldr	r3, [pc, #480]	; (1655c <fn_set_clock+0x204>)
   1637c:	781b      	ldrb	r3, [r3, #0]
   1637e:	2b00      	cmp	r3, #0
   16380:	d000      	beq.n	16384 <fn_set_clock+0x2c>
   16382:	e0aa      	b.n	164da <fn_set_clock+0x182>
   16384:	4b76      	ldr	r3, [pc, #472]	; (16560 <fn_set_clock+0x208>)
   16386:	4e77      	ldr	r6, [pc, #476]	; (16564 <fn_set_clock+0x20c>)
   16388:	4699      	mov	r9, r3
   1638a:	464b      	mov	r3, r9
		if (cur_Y==clock_table[i].y_pos){
   1638c:	7822      	ldrb	r2, [r4, #0]
   1638e:	681b      	ldr	r3, [r3, #0]
   16390:	429a      	cmp	r2, r3
   16392:	d100      	bne.n	16396 <fn_set_clock+0x3e>
   16394:	e0cc      	b.n	16530 <fn_set_clock+0x1d8>
   16396:	7a22      	ldrb	r2, [r4, #8]
   16398:	4293      	cmp	r3, r2
   1639a:	d100      	bne.n	1639e <fn_set_clock+0x46>
   1639c:	e0d1      	b.n	16542 <fn_set_clock+0x1ea>
   1639e:	7c22      	ldrb	r2, [r4, #16]
   163a0:	4293      	cmp	r3, r2
   163a2:	d100      	bne.n	163a6 <fn_set_clock+0x4e>
   163a4:	e0cf      	b.n	16546 <fn_set_clock+0x1ee>
   163a6:	7e22      	ldrb	r2, [r4, #24]
   163a8:	4293      	cmp	r3, r2
   163aa:	d100      	bne.n	163ae <fn_set_clock+0x56>
   163ac:	e0cd      	b.n	1654a <fn_set_clock+0x1f2>
   163ae:	2220      	movs	r2, #32
   163b0:	5ca2      	ldrb	r2, [r4, r2]
   163b2:	4293      	cmp	r3, r2
   163b4:	d100      	bne.n	163b8 <fn_set_clock+0x60>
   163b6:	e0ca      	b.n	1654e <fn_set_clock+0x1f6>
   163b8:	2228      	movs	r2, #40	; 0x28
   163ba:	5ca2      	ldrb	r2, [r4, r2]
   163bc:	429a      	cmp	r2, r3
   163be:	d100      	bne.n	163c2 <fn_set_clock+0x6a>
   163c0:	e0c7      	b.n	16552 <fn_set_clock+0x1fa>
	switch(last_input){
   163c2:	4a69      	ldr	r2, [pc, #420]	; (16568 <fn_set_clock+0x210>)
   163c4:	7812      	ldrb	r2, [r2, #0]
   163c6:	b2d2      	uxtb	r2, r2
   163c8:	2a02      	cmp	r2, #2
   163ca:	d100      	bne.n	163ce <fn_set_clock+0x76>
   163cc:	e0a2      	b.n	16514 <fn_set_clock+0x1bc>
   163ce:	2a03      	cmp	r2, #3
   163d0:	d100      	bne.n	163d4 <fn_set_clock+0x7c>
   163d2:	e096      	b.n	16502 <fn_set_clock+0x1aa>
   163d4:	2a01      	cmp	r2, #1
   163d6:	d100      	bne.n	163da <fn_set_clock+0x82>
   163d8:	e077      	b.n	164ca <fn_set_clock+0x172>
	glcd_tiny_set_font(Font5x7,5,7,32,127);
   163da:	237f      	movs	r3, #127	; 0x7f
   163dc:	2207      	movs	r2, #7
   163de:	9300      	str	r3, [sp, #0]
   163e0:	2105      	movs	r1, #5
   163e2:	4862      	ldr	r0, [pc, #392]	; (1656c <fn_set_clock+0x214>)
   163e4:	3b5f      	subs	r3, #95	; 0x5f
   163e6:	4c62      	ldr	r4, [pc, #392]	; (16570 <fn_set_clock+0x218>)
   163e8:	47a0      	blx	r4
	glcd_clear_buffer();
   163ea:	4b62      	ldr	r3, [pc, #392]	; (16574 <fn_set_clock+0x21c>)
   163ec:	4798      	blx	r3
	sprintf(display_str,"Set Clock:");
   163ee:	4c62      	ldr	r4, [pc, #392]	; (16578 <fn_set_clock+0x220>)
   163f0:	4f62      	ldr	r7, [pc, #392]	; (1657c <fn_set_clock+0x224>)
   163f2:	220b      	movs	r2, #11
   163f4:	4962      	ldr	r1, [pc, #392]	; (16580 <fn_set_clock+0x228>)
   163f6:	0020      	movs	r0, r4
   163f8:	47b8      	blx	r7
	glcd_tiny_draw_string(0,0,display_str);
   163fa:	4d62      	ldr	r5, [pc, #392]	; (16584 <fn_set_clock+0x22c>)
   163fc:	0022      	movs	r2, r4
   163fe:	2100      	movs	r1, #0
   16400:	2000      	movs	r0, #0
   16402:	47a8      	blx	r5
	sprintf(display_str,"Year:   20%02x", temp_time.year);
   16404:	4b60      	ldr	r3, [pc, #384]	; (16588 <fn_set_clock+0x230>)
   16406:	79b2      	ldrb	r2, [r6, #6]
   16408:	4960      	ldr	r1, [pc, #384]	; (1658c <fn_set_clock+0x234>)
   1640a:	0020      	movs	r0, r4
   1640c:	4698      	mov	r8, r3
   1640e:	4798      	blx	r3
	glcd_tiny_draw_string(10,1,display_str);
   16410:	0022      	movs	r2, r4
   16412:	2101      	movs	r1, #1
   16414:	200a      	movs	r0, #10
   16416:	47a8      	blx	r5
	sprintf(display_str,"Month:  %02x", temp_time.month);
   16418:	7972      	ldrb	r2, [r6, #5]
   1641a:	495d      	ldr	r1, [pc, #372]	; (16590 <fn_set_clock+0x238>)
   1641c:	0020      	movs	r0, r4
   1641e:	47c0      	blx	r8
	glcd_tiny_draw_string(10,2,display_str);
   16420:	0022      	movs	r2, r4
   16422:	2102      	movs	r1, #2
   16424:	200a      	movs	r0, #10
   16426:	47a8      	blx	r5
	sprintf(display_str,"Date:   %02x", temp_time.date);
   16428:	7932      	ldrb	r2, [r6, #4]
   1642a:	495a      	ldr	r1, [pc, #360]	; (16594 <fn_set_clock+0x23c>)
   1642c:	0020      	movs	r0, r4
   1642e:	47c0      	blx	r8
	glcd_tiny_draw_string(10,3,display_str);
   16430:	0022      	movs	r2, r4
   16432:	2103      	movs	r1, #3
   16434:	200a      	movs	r0, #10
   16436:	47a8      	blx	r5
	sprintf(display_str,"Hour:   %02x", temp_time.hours);
   16438:	78b2      	ldrb	r2, [r6, #2]
   1643a:	4957      	ldr	r1, [pc, #348]	; (16598 <fn_set_clock+0x240>)
   1643c:	0020      	movs	r0, r4
   1643e:	47c0      	blx	r8
	glcd_tiny_draw_string(10,4,display_str);
   16440:	0022      	movs	r2, r4
   16442:	2104      	movs	r1, #4
   16444:	200a      	movs	r0, #10
   16446:	47a8      	blx	r5
	sprintf(display_str,"Minute: %02x", temp_time.minutes);
   16448:	7872      	ldrb	r2, [r6, #1]
   1644a:	4954      	ldr	r1, [pc, #336]	; (1659c <fn_set_clock+0x244>)
   1644c:	0020      	movs	r0, r4
   1644e:	47c0      	blx	r8
	glcd_tiny_draw_string(10,5,display_str);
   16450:	0022      	movs	r2, r4
   16452:	2105      	movs	r1, #5
   16454:	200a      	movs	r0, #10
   16456:	47a8      	blx	r5
	sprintf(display_str,"Second: %02x", temp_time.seconds);
   16458:	7832      	ldrb	r2, [r6, #0]
   1645a:	4951      	ldr	r1, [pc, #324]	; (165a0 <fn_set_clock+0x248>)
   1645c:	0020      	movs	r0, r4
   1645e:	47c0      	blx	r8
	glcd_tiny_draw_string(10,6,display_str);
   16460:	0022      	movs	r2, r4
   16462:	2106      	movs	r1, #6
   16464:	200a      	movs	r0, #10
   16466:	47a8      	blx	r5
	sprintf(display_str, "+");
   16468:	2202      	movs	r2, #2
   1646a:	494e      	ldr	r1, [pc, #312]	; (165a4 <fn_set_clock+0x24c>)
   1646c:	0020      	movs	r0, r4
   1646e:	47b8      	blx	r7
	glcd_tiny_draw_string(121,3,display_str);
   16470:	0022      	movs	r2, r4
   16472:	2103      	movs	r1, #3
   16474:	2079      	movs	r0, #121	; 0x79
   16476:	47a8      	blx	r5
	sprintf(display_str, "-");
   16478:	2202      	movs	r2, #2
   1647a:	494b      	ldr	r1, [pc, #300]	; (165a8 <fn_set_clock+0x250>)
   1647c:	0020      	movs	r0, r4
   1647e:	47b8      	blx	r7
	glcd_tiny_draw_string(121,5,display_str);
   16480:	0022      	movs	r2, r4
   16482:	2105      	movs	r1, #5
   16484:	2079      	movs	r0, #121	; 0x79
   16486:	47a8      	blx	r5
	sprintf(display_str, "Next");
   16488:	2205      	movs	r2, #5
   1648a:	4948      	ldr	r1, [pc, #288]	; (165ac <fn_set_clock+0x254>)
   1648c:	0020      	movs	r0, r4
   1648e:	47b8      	blx	r7
	glcd_tiny_draw_string(103,0,display_str);
   16490:	0022      	movs	r2, r4
   16492:	2100      	movs	r1, #0
   16494:	2067      	movs	r0, #103	; 0x67
   16496:	47a8      	blx	r5
	sprintf(display_str, "Cancel");
   16498:	2207      	movs	r2, #7
   1649a:	4945      	ldr	r1, [pc, #276]	; (165b0 <fn_set_clock+0x258>)
   1649c:	0020      	movs	r0, r4
   1649e:	47b8      	blx	r7
	glcd_tiny_draw_string(92,7,display_str);
   164a0:	0022      	movs	r2, r4
   164a2:	2107      	movs	r1, #7
   164a4:	205c      	movs	r0, #92	; 0x5c
   164a6:	47a8      	blx	r5
	sprintf(display_str, ">");
   164a8:	2202      	movs	r2, #2
   164aa:	4942      	ldr	r1, [pc, #264]	; (165b4 <fn_set_clock+0x25c>)
   164ac:	0020      	movs	r0, r4
   164ae:	47b8      	blx	r7
	glcd_tiny_draw_string(1, cur_Y,display_str);
   164b0:	464b      	mov	r3, r9
   164b2:	0022      	movs	r2, r4
   164b4:	7819      	ldrb	r1, [r3, #0]
   164b6:	2001      	movs	r0, #1
   164b8:	47a8      	blx	r5
	glcd_write();
   164ba:	4b3f      	ldr	r3, [pc, #252]	; (165b8 <fn_set_clock+0x260>)
   164bc:	4798      	blx	r3
}
   164be:	b00e      	add	sp, #56	; 0x38
   164c0:	bc1c      	pop	{r2, r3, r4}
   164c2:	4690      	mov	r8, r2
   164c4:	4699      	mov	r9, r3
   164c6:	46a2      	mov	sl, r4
   164c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(cur_Y >= cur_Y_high){
   164ca:	4a3c      	ldr	r2, [pc, #240]	; (165bc <fn_set_clock+0x264>)
   164cc:	6812      	ldr	r2, [r2, #0]
   164ce:	429a      	cmp	r2, r3
   164d0:	dd28      	ble.n	16524 <fn_set_clock+0x1cc>
			else{++cur_Y;}
   164d2:	464a      	mov	r2, r9
   164d4:	3301      	adds	r3, #1
   164d6:	6013      	str	r3, [r2, #0]
   164d8:	e77f      	b.n	163da <fn_set_clock+0x82>
		cur_Y = 1;
   164da:	4b21      	ldr	r3, [pc, #132]	; (16560 <fn_set_clock+0x208>)
   164dc:	4699      	mov	r9, r3
   164de:	2301      	movs	r3, #1
   164e0:	464a      	mov	r2, r9
   164e2:	6013      	str	r3, [r2, #0]
		cur_Y_low = 1;
   164e4:	4a36      	ldr	r2, [pc, #216]	; (165c0 <fn_set_clock+0x268>)
   164e6:	6013      	str	r3, [r2, #0]
		cur_Y_high = 6;
   164e8:	2206      	movs	r2, #6
   164ea:	4b34      	ldr	r3, [pc, #208]	; (165bc <fn_set_clock+0x264>)
   164ec:	601a      	str	r2, [r3, #0]
		get_time();
   164ee:	4b35      	ldr	r3, [pc, #212]	; (165c4 <fn_set_clock+0x26c>)
   164f0:	4798      	blx	r3
		memcpy(&temp_time,&current_time,sizeof(current_time));	
   164f2:	4e1c      	ldr	r6, [pc, #112]	; (16564 <fn_set_clock+0x20c>)
   164f4:	4b34      	ldr	r3, [pc, #208]	; (165c8 <fn_set_clock+0x270>)
   164f6:	0032      	movs	r2, r6
   164f8:	cb83      	ldmia	r3!, {r0, r1, r7}
   164fa:	c283      	stmia	r2!, {r0, r1, r7}
   164fc:	cb03      	ldmia	r3!, {r0, r1}
   164fe:	c203      	stmia	r2!, {r0, r1}
   16500:	e743      	b.n	1638a <fn_set_clock+0x32>
			*unitPtr = incBcdData(*unitPtr, -1, unitMin, unitMax);
   16502:	2101      	movs	r1, #1
   16504:	7828      	ldrb	r0, [r5, #0]
   16506:	4643      	mov	r3, r8
   16508:	4652      	mov	r2, sl
   1650a:	4249      	negs	r1, r1
   1650c:	4c2f      	ldr	r4, [pc, #188]	; (165cc <fn_set_clock+0x274>)
   1650e:	47a0      	blx	r4
   16510:	7028      	strb	r0, [r5, #0]
			break;
   16512:	e762      	b.n	163da <fn_set_clock+0x82>
			*unitPtr = incBcdData(*unitPtr, 1, unitMin, unitMax);
   16514:	7828      	ldrb	r0, [r5, #0]
   16516:	4643      	mov	r3, r8
   16518:	4652      	mov	r2, sl
   1651a:	2101      	movs	r1, #1
   1651c:	4c2b      	ldr	r4, [pc, #172]	; (165cc <fn_set_clock+0x274>)
   1651e:	47a0      	blx	r4
   16520:	7028      	strb	r0, [r5, #0]
			break;
   16522:	e75a      	b.n	163da <fn_set_clock+0x82>
				set_time();
   16524:	4b2a      	ldr	r3, [pc, #168]	; (165d0 <fn_set_clock+0x278>)
   16526:	4798      	blx	r3
				current_input = input_state_complete;
   16528:	2208      	movs	r2, #8
   1652a:	4b2a      	ldr	r3, [pc, #168]	; (165d4 <fn_set_clock+0x27c>)
   1652c:	701a      	strb	r2, [r3, #0]
   1652e:	e754      	b.n	163da <fn_set_clock+0x82>
		if (cur_Y==clock_table[i].y_pos){
   16530:	2200      	movs	r2, #0
			unitMax = clock_table[i].max;
   16532:	00d2      	lsls	r2, r2, #3
   16534:	18a4      	adds	r4, r4, r2
   16536:	78a2      	ldrb	r2, [r4, #2]
			unitPtr = clock_table[i].ptr;
   16538:	6865      	ldr	r5, [r4, #4]
			unitMax = clock_table[i].max;
   1653a:	4690      	mov	r8, r2
			unitMin = clock_table[i].min;
   1653c:	7862      	ldrb	r2, [r4, #1]
   1653e:	4692      	mov	sl, r2
			break;
   16540:	e73f      	b.n	163c2 <fn_set_clock+0x6a>
		if (cur_Y==clock_table[i].y_pos){
   16542:	2201      	movs	r2, #1
   16544:	e7f5      	b.n	16532 <fn_set_clock+0x1da>
   16546:	2202      	movs	r2, #2
   16548:	e7f3      	b.n	16532 <fn_set_clock+0x1da>
   1654a:	2203      	movs	r2, #3
   1654c:	e7f1      	b.n	16532 <fn_set_clock+0x1da>
   1654e:	2204      	movs	r2, #4
   16550:	e7ef      	b.n	16532 <fn_set_clock+0x1da>
   16552:	2205      	movs	r2, #5
   16554:	e7ed      	b.n	16532 <fn_set_clock+0x1da>
   16556:	46c0      	nop			; (mov r8, r8)
   16558:	00024150 	.word	0x00024150
   1655c:	200001d0 	.word	0x200001d0
   16560:	2000375c 	.word	0x2000375c
   16564:	2000111c 	.word	0x2000111c
   16568:	200043f6 	.word	0x200043f6
   1656c:	00024180 	.word	0x00024180
   16570:	00014075 	.word	0x00014075
   16574:	000130dd 	.word	0x000130dd
   16578:	200037f8 	.word	0x200037f8
   1657c:	0001efe9 	.word	0x0001efe9
   16580:	00024b78 	.word	0x00024b78
   16584:	00014091 	.word	0x00014091
   16588:	0001f101 	.word	0x0001f101
   1658c:	00024b84 	.word	0x00024b84
   16590:	00024b94 	.word	0x00024b94
   16594:	00024ba4 	.word	0x00024ba4
   16598:	00024bb4 	.word	0x00024bb4
   1659c:	00024bc4 	.word	0x00024bc4
   165a0:	00024bd4 	.word	0x00024bd4
   165a4:	00024be4 	.word	0x00024be4
   165a8:	00024be8 	.word	0x00024be8
   165ac:	00024bec 	.word	0x00024bec
   165b0:	00024bf4 	.word	0x00024bf4
   165b4:	00024bfc 	.word	0x00024bfc
   165b8:	000139cd 	.word	0x000139cd
   165bc:	200042ac 	.word	0x200042ac
   165c0:	200047d0 	.word	0x200047d0
   165c4:	0000772d 	.word	0x0000772d
   165c8:	200010cc 	.word	0x200010cc
   165cc:	0000794d 	.word	0x0000794d
   165d0:	000077cd 	.word	0x000077cd
   165d4:	200043f4 	.word	0x200043f4

000165d8 <fn_disp_cal_report>:
void  fn_disp_cal_report(void){
   165d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   165da:	46de      	mov	lr, fp
   165dc:	4657      	mov	r7, sl
   165de:	464e      	mov	r6, r9
   165e0:	4645      	mov	r5, r8
   165e2:	b5e0      	push	{r5, r6, r7, lr}
	if (state_change){
   165e4:	4bd4      	ldr	r3, [pc, #848]	; (16938 <fn_disp_cal_report+0x360>)
void  fn_disp_cal_report(void){
   165e6:	b087      	sub	sp, #28
	if (state_change){
   165e8:	781b      	ldrb	r3, [r3, #0]
   165ea:	2b00      	cmp	r3, #0
   165ec:	d04e      	beq.n	1668c <fn_disp_cal_report+0xb4>
		pageView = 1;
   165ee:	2301      	movs	r3, #1
   165f0:	4ed2      	ldr	r6, [pc, #840]	; (1693c <fn_disp_cal_report+0x364>)
   165f2:	7033      	strb	r3, [r6, #0]
	switch(last_input){
   165f4:	4bd2      	ldr	r3, [pc, #840]	; (16940 <fn_disp_cal_report+0x368>)
   165f6:	781b      	ldrb	r3, [r3, #0]
   165f8:	2b03      	cmp	r3, #3
   165fa:	d059      	beq.n	166b0 <fn_disp_cal_report+0xd8>
	glcd_tiny_set_font(Font5x7,5,7,32,127);
   165fc:	237f      	movs	r3, #127	; 0x7f
   165fe:	2207      	movs	r2, #7
   16600:	2105      	movs	r1, #5
   16602:	48d0      	ldr	r0, [pc, #832]	; (16944 <fn_disp_cal_report+0x36c>)
   16604:	9300      	str	r3, [sp, #0]
   16606:	4cd0      	ldr	r4, [pc, #832]	; (16948 <fn_disp_cal_report+0x370>)
   16608:	3b5f      	subs	r3, #95	; 0x5f
   1660a:	47a0      	blx	r4
	glcd_clear_buffer();
   1660c:	4bcf      	ldr	r3, [pc, #828]	; (1694c <fn_disp_cal_report+0x374>)
   1660e:	4798      	blx	r3
	sprintf(display_str, "Calibration Report:");
   16610:	4ccf      	ldr	r4, [pc, #828]	; (16950 <fn_disp_cal_report+0x378>)
   16612:	4bd0      	ldr	r3, [pc, #832]	; (16954 <fn_disp_cal_report+0x37c>)
   16614:	2214      	movs	r2, #20
   16616:	49d0      	ldr	r1, [pc, #832]	; (16958 <fn_disp_cal_report+0x380>)
   16618:	0020      	movs	r0, r4
   1661a:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   1661c:	0022      	movs	r2, r4
   1661e:	2100      	movs	r1, #0
   16620:	2000      	movs	r0, #0
   16622:	4dce      	ldr	r5, [pc, #824]	; (1695c <fn_disp_cal_report+0x384>)
   16624:	47a8      	blx	r5
	switch(pageView){
   16626:	7833      	ldrb	r3, [r6, #0]
   16628:	2b02      	cmp	r3, #2
   1662a:	d100      	bne.n	1662e <fn_disp_cal_report+0x56>
   1662c:	e0ad      	b.n	1678a <fn_disp_cal_report+0x1b2>
   1662e:	2b03      	cmp	r3, #3
   16630:	d100      	bne.n	16634 <fn_disp_cal_report+0x5c>
   16632:	e135      	b.n	168a0 <fn_disp_cal_report+0x2c8>
   16634:	2b01      	cmp	r3, #1
   16636:	d03f      	beq.n	166b8 <fn_disp_cal_report+0xe0>
	if (pageView>1){draw_arrows(2);}//  Draw up arrow at button 2
   16638:	2b01      	cmp	r3, #1
   1663a:	d800      	bhi.n	1663e <fn_disp_cal_report+0x66>
   1663c:	e095      	b.n	1676a <fn_disp_cal_report+0x192>
			glcd_draw_line(116, 26, 120, 22, BLACK);
   1663e:	2301      	movs	r3, #1
   16640:	4699      	mov	r9, r3
   16642:	4fc7      	ldr	r7, [pc, #796]	; (16960 <fn_disp_cal_report+0x388>)
   16644:	9300      	str	r3, [sp, #0]
   16646:	2278      	movs	r2, #120	; 0x78
   16648:	3315      	adds	r3, #21
   1664a:	211a      	movs	r1, #26
   1664c:	2074      	movs	r0, #116	; 0x74
   1664e:	47b8      	blx	r7
			glcd_draw_line(120, 22, 124, 26, BLACK);
   16650:	464b      	mov	r3, r9
   16652:	227c      	movs	r2, #124	; 0x7c
   16654:	9300      	str	r3, [sp, #0]
   16656:	2116      	movs	r1, #22
   16658:	3319      	adds	r3, #25
   1665a:	2078      	movs	r0, #120	; 0x78
   1665c:	47b8      	blx	r7
	if (pageView<maxPages){draw_arrows(3);}//  Draw up arrow at button 3
   1665e:	7833      	ldrb	r3, [r6, #0]
			glcd_draw_line(116, 26, 120, 22, BLACK);
   16660:	46b8      	mov	r8, r7
	if (pageView<maxPages){draw_arrows(3);}//  Draw up arrow at button 3
   16662:	2b02      	cmp	r3, #2
   16664:	d800      	bhi.n	16668 <fn_disp_cal_report+0x90>
   16666:	e082      	b.n	1676e <fn_disp_cal_report+0x196>
	sprintf(display_str, "Exit");
   16668:	4bba      	ldr	r3, [pc, #744]	; (16954 <fn_disp_cal_report+0x37c>)
   1666a:	2205      	movs	r2, #5
   1666c:	49bd      	ldr	r1, [pc, #756]	; (16964 <fn_disp_cal_report+0x38c>)
   1666e:	0020      	movs	r0, r4
   16670:	4798      	blx	r3
	glcd_tiny_draw_string(102,7,display_str);
   16672:	0022      	movs	r2, r4
   16674:	2107      	movs	r1, #7
   16676:	2066      	movs	r0, #102	; 0x66
   16678:	47a8      	blx	r5
	glcd_write();
   1667a:	4bbb      	ldr	r3, [pc, #748]	; (16968 <fn_disp_cal_report+0x390>)
   1667c:	4798      	blx	r3
}
   1667e:	b007      	add	sp, #28
   16680:	bc3c      	pop	{r2, r3, r4, r5}
   16682:	4690      	mov	r8, r2
   16684:	4699      	mov	r9, r3
   16686:	46a2      	mov	sl, r4
   16688:	46ab      	mov	fp, r5
   1668a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch(last_input){
   1668c:	4bac      	ldr	r3, [pc, #688]	; (16940 <fn_disp_cal_report+0x368>)
			if (pageView>1){pageView--;}
   1668e:	4eab      	ldr	r6, [pc, #684]	; (1693c <fn_disp_cal_report+0x364>)
	switch(last_input){
   16690:	781b      	ldrb	r3, [r3, #0]
   16692:	b2db      	uxtb	r3, r3
   16694:	2b02      	cmp	r3, #2
   16696:	d005      	beq.n	166a4 <fn_disp_cal_report+0xcc>
   16698:	2b03      	cmp	r3, #3
   1669a:	d1af      	bne.n	165fc <fn_disp_cal_report+0x24>
   1669c:	7833      	ldrb	r3, [r6, #0]
			if (pageView<maxPages){pageView++;}
   1669e:	2b02      	cmp	r3, #2
   166a0:	d8ac      	bhi.n	165fc <fn_disp_cal_report+0x24>
   166a2:	e006      	b.n	166b2 <fn_disp_cal_report+0xda>
			if (pageView>1){pageView--;}
   166a4:	7833      	ldrb	r3, [r6, #0]
   166a6:	2b01      	cmp	r3, #1
   166a8:	d9a8      	bls.n	165fc <fn_disp_cal_report+0x24>
   166aa:	3b01      	subs	r3, #1
   166ac:	7033      	strb	r3, [r6, #0]
   166ae:	e7a5      	b.n	165fc <fn_disp_cal_report+0x24>
	switch(last_input){
   166b0:	2301      	movs	r3, #1
			if (pageView<maxPages){pageView++;}
   166b2:	3301      	adds	r3, #1
   166b4:	7033      	strb	r3, [r6, #0]
   166b6:	e7a1      	b.n	165fc <fn_disp_cal_report+0x24>
			sprintf(display_str, "Azimuth & Inclination");
   166b8:	4ba6      	ldr	r3, [pc, #664]	; (16954 <fn_disp_cal_report+0x37c>)
   166ba:	2216      	movs	r2, #22
   166bc:	49ab      	ldr	r1, [pc, #684]	; (1696c <fn_disp_cal_report+0x394>)
   166be:	0020      	movs	r0, r4
   166c0:	4798      	blx	r3
			glcd_tiny_draw_string(0,1,display_str);
   166c2:	0022      	movs	r2, r4
   166c4:	2101      	movs	r1, #1
   166c6:	2000      	movs	r0, #0
   166c8:	47a8      	blx	r5
				cal_report_azm_inc.time_struct.year, cal_report_azm_inc.time_struct.month, cal_report_azm_inc.time_struct.date,
   166ca:	4ba9      	ldr	r3, [pc, #676]	; (16970 <fn_disp_cal_report+0x398>)
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   166cc:	4fa9      	ldr	r7, [pc, #676]	; (16974 <fn_disp_cal_report+0x39c>)
				cal_report_azm_inc.time_struct.year, cal_report_azm_inc.time_struct.month, cal_report_azm_inc.time_struct.date,
   166ce:	4698      	mov	r8, r3
   166d0:	2345      	movs	r3, #69	; 0x45
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   166d2:	4642      	mov	r2, r8
   166d4:	4641      	mov	r1, r8
   166d6:	5cd3      	ldrb	r3, [r2, r3]
				cal_report_azm_inc.time_struct.year, cal_report_azm_inc.time_struct.month, cal_report_azm_inc.time_struct.date,
   166d8:	2246      	movs	r2, #70	; 0x46
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   166da:	4640      	mov	r0, r8
   166dc:	5c8a      	ldrb	r2, [r1, r2]
				cal_report_azm_inc.time_struct.hours, cal_report_azm_inc.time_struct.minutes, cal_report_azm_inc.time_struct.seconds);
   166de:	2140      	movs	r1, #64	; 0x40
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   166e0:	5c41      	ldrb	r1, [r0, r1]
   166e2:	46b9      	mov	r9, r7
   166e4:	9103      	str	r1, [sp, #12]
				cal_report_azm_inc.time_struct.hours, cal_report_azm_inc.time_struct.minutes, cal_report_azm_inc.time_struct.seconds);
   166e6:	2141      	movs	r1, #65	; 0x41
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   166e8:	5c41      	ldrb	r1, [r0, r1]
   166ea:	9102      	str	r1, [sp, #8]
				cal_report_azm_inc.time_struct.hours, cal_report_azm_inc.time_struct.minutes, cal_report_azm_inc.time_struct.seconds);
   166ec:	2142      	movs	r1, #66	; 0x42
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   166ee:	5c41      	ldrb	r1, [r0, r1]
   166f0:	9101      	str	r1, [sp, #4]
				cal_report_azm_inc.time_struct.year, cal_report_azm_inc.time_struct.month, cal_report_azm_inc.time_struct.date,
   166f2:	2144      	movs	r1, #68	; 0x44
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   166f4:	5c41      	ldrb	r1, [r0, r1]
   166f6:	0020      	movs	r0, r4
   166f8:	9100      	str	r1, [sp, #0]
   166fa:	499f      	ldr	r1, [pc, #636]	; (16978 <fn_disp_cal_report+0x3a0>)
   166fc:	47b8      	blx	r7
			glcd_tiny_draw_string(0,2,display_str);
   166fe:	0022      	movs	r2, r4
   16700:	2102      	movs	r1, #2
   16702:	2000      	movs	r0, #0
   16704:	47a8      	blx	r5
			sprintf(display_str,"4-Point Groups: %d", cal_report_azm_inc.groups);
   16706:	4643      	mov	r3, r8
   16708:	499c      	ldr	r1, [pc, #624]	; (1697c <fn_disp_cal_report+0x3a4>)
   1670a:	685a      	ldr	r2, [r3, #4]
   1670c:	0020      	movs	r0, r4
   1670e:	47b8      	blx	r7
			glcd_tiny_draw_string(0,3,display_str);
   16710:	0022      	movs	r2, r4
   16712:	2103      	movs	r1, #3
   16714:	2000      	movs	r0, #0
   16716:	47a8      	blx	r5
			sprintf(display_str,"Azm Stdev: %.3f", cal_report_azm_inc.azm_angle_err);
   16718:	4b99      	ldr	r3, [pc, #612]	; (16980 <fn_disp_cal_report+0x3a8>)
   1671a:	469b      	mov	fp, r3
   1671c:	4643      	mov	r3, r8
   1671e:	6958      	ldr	r0, [r3, #20]
   16720:	47d8      	blx	fp
   16722:	000b      	movs	r3, r1
   16724:	0002      	movs	r2, r0
   16726:	4997      	ldr	r1, [pc, #604]	; (16984 <fn_disp_cal_report+0x3ac>)
   16728:	0020      	movs	r0, r4
   1672a:	47b8      	blx	r7
			glcd_tiny_draw_string(0,5,display_str);
   1672c:	0022      	movs	r2, r4
   1672e:	2105      	movs	r1, #5
   16730:	2000      	movs	r0, #0
   16732:	47a8      	blx	r5
			glcd_draw_circle(98, 41, 1, BLACK);// Draw degree symbol
   16734:	2201      	movs	r2, #1
   16736:	2301      	movs	r3, #1
   16738:	2129      	movs	r1, #41	; 0x29
   1673a:	2062      	movs	r0, #98	; 0x62
   1673c:	4f92      	ldr	r7, [pc, #584]	; (16988 <fn_disp_cal_report+0x3b0>)
   1673e:	47b8      	blx	r7
			sprintf(display_str,"Inc Stdev: %.3f", cal_report_azm_inc.inc_angle_err);
   16740:	4643      	mov	r3, r8
   16742:	6918      	ldr	r0, [r3, #16]
   16744:	47d8      	blx	fp
   16746:	000b      	movs	r3, r1
   16748:	0002      	movs	r2, r0
   1674a:	4990      	ldr	r1, [pc, #576]	; (1698c <fn_disp_cal_report+0x3b4>)
   1674c:	0020      	movs	r0, r4
   1674e:	47c8      	blx	r9
			glcd_tiny_draw_string(0,6,display_str);
   16750:	0022      	movs	r2, r4
   16752:	2106      	movs	r1, #6
   16754:	2000      	movs	r0, #0
   16756:	47a8      	blx	r5
			glcd_draw_circle(98, 49, 1, BLACK);// Draw degree symbol
   16758:	2301      	movs	r3, #1
   1675a:	2201      	movs	r2, #1
   1675c:	2131      	movs	r1, #49	; 0x31
   1675e:	2062      	movs	r0, #98	; 0x62
   16760:	47b8      	blx	r7
   16762:	7833      	ldrb	r3, [r6, #0]
	if (pageView>1){draw_arrows(2);}//  Draw up arrow at button 2
   16764:	2b01      	cmp	r3, #1
   16766:	d900      	bls.n	1676a <fn_disp_cal_report+0x192>
   16768:	e769      	b.n	1663e <fn_disp_cal_report+0x66>
   1676a:	4b7d      	ldr	r3, [pc, #500]	; (16960 <fn_disp_cal_report+0x388>)
   1676c:	4698      	mov	r8, r3
			glcd_draw_line(116, 40, 120, 44, BLACK);
   1676e:	2601      	movs	r6, #1
   16770:	232c      	movs	r3, #44	; 0x2c
   16772:	9600      	str	r6, [sp, #0]
   16774:	2278      	movs	r2, #120	; 0x78
   16776:	2128      	movs	r1, #40	; 0x28
   16778:	2074      	movs	r0, #116	; 0x74
   1677a:	47c0      	blx	r8
			glcd_draw_line(120, 44, 124, 40, BLACK);
   1677c:	9600      	str	r6, [sp, #0]
   1677e:	2328      	movs	r3, #40	; 0x28
   16780:	227c      	movs	r2, #124	; 0x7c
   16782:	212c      	movs	r1, #44	; 0x2c
   16784:	2078      	movs	r0, #120	; 0x78
   16786:	47c0      	blx	r8
   16788:	e76e      	b.n	16668 <fn_disp_cal_report+0x90>
			sprintf(display_str, "Azimuth & Inclination");
   1678a:	4b72      	ldr	r3, [pc, #456]	; (16954 <fn_disp_cal_report+0x37c>)
   1678c:	2216      	movs	r2, #22
   1678e:	4977      	ldr	r1, [pc, #476]	; (1696c <fn_disp_cal_report+0x394>)
   16790:	0020      	movs	r0, r4
   16792:	4798      	blx	r3
			glcd_tiny_draw_string(0,1,display_str);
   16794:	0022      	movs	r2, r4
   16796:	2101      	movs	r1, #1
   16798:	2000      	movs	r0, #0
   1679a:	47a8      	blx	r5
			sprintf(display_str,"Sensor Delta X,Y,Z%%");
   1679c:	4b75      	ldr	r3, [pc, #468]	; (16974 <fn_disp_cal_report+0x39c>)
   1679e:	497c      	ldr	r1, [pc, #496]	; (16990 <fn_disp_cal_report+0x3b8>)
   167a0:	0020      	movs	r0, r4
   167a2:	469b      	mov	fp, r3
   167a4:	4798      	blx	r3
			glcd_tiny_draw_string(0,2,display_str);
   167a6:	0022      	movs	r2, r4
   167a8:	2102      	movs	r1, #2
   167aa:	2000      	movs	r0, #0
   167ac:	47a8      	blx	r5
				cal_report_azm_inc.disp_stdev_acc[0]*100, cal_report_azm_inc.disp_stdev_acc[1]*100, cal_report_azm_inc.disp_stdev_acc[2]*100);
   167ae:	4b70      	ldr	r3, [pc, #448]	; (16970 <fn_disp_cal_report+0x398>)
   167b0:	4978      	ldr	r1, [pc, #480]	; (16994 <fn_disp_cal_report+0x3bc>)
   167b2:	469a      	mov	sl, r3
   167b4:	4b78      	ldr	r3, [pc, #480]	; (16998 <fn_disp_cal_report+0x3c0>)
   167b6:	4699      	mov	r9, r3
   167b8:	4653      	mov	r3, sl
   167ba:	6a98      	ldr	r0, [r3, #40]	; 0x28
   167bc:	47c8      	blx	r9
			sprintf(display_str,"A:%.3f,%.3f,%.3f",
   167be:	4b70      	ldr	r3, [pc, #448]	; (16980 <fn_disp_cal_report+0x3a8>)
   167c0:	4698      	mov	r8, r3
   167c2:	4798      	blx	r3
				cal_report_azm_inc.disp_stdev_acc[0]*100, cal_report_azm_inc.disp_stdev_acc[1]*100, cal_report_azm_inc.disp_stdev_acc[2]*100);
   167c4:	4653      	mov	r3, sl
			sprintf(display_str,"A:%.3f,%.3f,%.3f",
   167c6:	9004      	str	r0, [sp, #16]
   167c8:	9105      	str	r1, [sp, #20]
				cal_report_azm_inc.disp_stdev_acc[0]*100, cal_report_azm_inc.disp_stdev_acc[1]*100, cal_report_azm_inc.disp_stdev_acc[2]*100);
   167ca:	6b18      	ldr	r0, [r3, #48]	; 0x30
   167cc:	4971      	ldr	r1, [pc, #452]	; (16994 <fn_disp_cal_report+0x3bc>)
   167ce:	47c8      	blx	r9
			sprintf(display_str,"A:%.3f,%.3f,%.3f",
   167d0:	47c0      	blx	r8
				cal_report_azm_inc.disp_stdev_acc[0]*100, cal_report_azm_inc.disp_stdev_acc[1]*100, cal_report_azm_inc.disp_stdev_acc[2]*100);
   167d2:	4653      	mov	r3, sl
			sprintf(display_str,"A:%.3f,%.3f,%.3f",
   167d4:	9002      	str	r0, [sp, #8]
   167d6:	9103      	str	r1, [sp, #12]
				cal_report_azm_inc.disp_stdev_acc[0]*100, cal_report_azm_inc.disp_stdev_acc[1]*100, cal_report_azm_inc.disp_stdev_acc[2]*100);
   167d8:	496e      	ldr	r1, [pc, #440]	; (16994 <fn_disp_cal_report+0x3bc>)
   167da:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   167dc:	47c8      	blx	r9
			sprintf(display_str,"A:%.3f,%.3f,%.3f",
   167de:	47c0      	blx	r8
   167e0:	9a04      	ldr	r2, [sp, #16]
   167e2:	9b05      	ldr	r3, [sp, #20]
   167e4:	9000      	str	r0, [sp, #0]
   167e6:	9101      	str	r1, [sp, #4]
   167e8:	496c      	ldr	r1, [pc, #432]	; (1699c <fn_disp_cal_report+0x3c4>)
   167ea:	0020      	movs	r0, r4
   167ec:	47d8      	blx	fp
			glcd_tiny_draw_string(0,3,display_str);
   167ee:	0022      	movs	r2, r4
   167f0:	2103      	movs	r1, #3
   167f2:	2000      	movs	r0, #0
   167f4:	47a8      	blx	r5
				cal_report_azm_inc.disp_stdev_comp[0]*100, cal_report_azm_inc.disp_stdev_comp[1]*100, cal_report_azm_inc.disp_stdev_comp[2]*100);
   167f6:	4653      	mov	r3, sl
   167f8:	4966      	ldr	r1, [pc, #408]	; (16994 <fn_disp_cal_report+0x3bc>)
   167fa:	6b58      	ldr	r0, [r3, #52]	; 0x34
   167fc:	47c8      	blx	r9
			sprintf(display_str,"C:%.3f,%.3f,%.3f",
   167fe:	47c0      	blx	r8
				cal_report_azm_inc.disp_stdev_comp[0]*100, cal_report_azm_inc.disp_stdev_comp[1]*100, cal_report_azm_inc.disp_stdev_comp[2]*100);
   16800:	4653      	mov	r3, sl
			sprintf(display_str,"C:%.3f,%.3f,%.3f",
   16802:	9004      	str	r0, [sp, #16]
   16804:	9105      	str	r1, [sp, #20]
				cal_report_azm_inc.disp_stdev_comp[0]*100, cal_report_azm_inc.disp_stdev_comp[1]*100, cal_report_azm_inc.disp_stdev_comp[2]*100);
   16806:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
   16808:	4962      	ldr	r1, [pc, #392]	; (16994 <fn_disp_cal_report+0x3bc>)
   1680a:	47c8      	blx	r9
			sprintf(display_str,"C:%.3f,%.3f,%.3f",
   1680c:	47c0      	blx	r8
				cal_report_azm_inc.disp_stdev_comp[0]*100, cal_report_azm_inc.disp_stdev_comp[1]*100, cal_report_azm_inc.disp_stdev_comp[2]*100);
   1680e:	4653      	mov	r3, sl
			sprintf(display_str,"C:%.3f,%.3f,%.3f",
   16810:	9002      	str	r0, [sp, #8]
   16812:	9103      	str	r1, [sp, #12]
				cal_report_azm_inc.disp_stdev_comp[0]*100, cal_report_azm_inc.disp_stdev_comp[1]*100, cal_report_azm_inc.disp_stdev_comp[2]*100);
   16814:	495f      	ldr	r1, [pc, #380]	; (16994 <fn_disp_cal_report+0x3bc>)
   16816:	6b98      	ldr	r0, [r3, #56]	; 0x38
   16818:	47c8      	blx	r9
			sprintf(display_str,"C:%.3f,%.3f,%.3f",
   1681a:	47c0      	blx	r8
   1681c:	9a04      	ldr	r2, [sp, #16]
   1681e:	9b05      	ldr	r3, [sp, #20]
   16820:	9000      	str	r0, [sp, #0]
   16822:	9101      	str	r1, [sp, #4]
   16824:	495e      	ldr	r1, [pc, #376]	; (169a0 <fn_disp_cal_report+0x3c8>)
   16826:	0020      	movs	r0, r4
   16828:	47d8      	blx	fp
			glcd_tiny_draw_string(0,4,display_str);
   1682a:	0022      	movs	r2, r4
   1682c:	2104      	movs	r1, #4
   1682e:	2000      	movs	r0, #0
   16830:	47a8      	blx	r5
			sprintf(display_str,"Magnitude Error %%");
   16832:	495c      	ldr	r1, [pc, #368]	; (169a4 <fn_disp_cal_report+0x3cc>)
   16834:	0020      	movs	r0, r4
   16836:	47d8      	blx	fp
			glcd_tiny_draw_string(0,5,display_str);
   16838:	0022      	movs	r2, r4
   1683a:	2105      	movs	r1, #5
   1683c:	2000      	movs	r0, #0
   1683e:	47a8      	blx	r5
			sprintf(display_str,"A1:%.3f A2:%.3f", cal_report_azm_inc.mag_stdev_a1*100, cal_report_azm_inc.mag_stdev_a2*100);
   16840:	4653      	mov	r3, sl
   16842:	4954      	ldr	r1, [pc, #336]	; (16994 <fn_disp_cal_report+0x3bc>)
   16844:	6998      	ldr	r0, [r3, #24]
   16846:	47c8      	blx	r9
   16848:	47c0      	blx	r8
   1684a:	4653      	mov	r3, sl
   1684c:	9004      	str	r0, [sp, #16]
   1684e:	9105      	str	r1, [sp, #20]
   16850:	69d8      	ldr	r0, [r3, #28]
   16852:	4950      	ldr	r1, [pc, #320]	; (16994 <fn_disp_cal_report+0x3bc>)
   16854:	47c8      	blx	r9
   16856:	47c0      	blx	r8
   16858:	9a04      	ldr	r2, [sp, #16]
   1685a:	9b05      	ldr	r3, [sp, #20]
   1685c:	9000      	str	r0, [sp, #0]
   1685e:	9101      	str	r1, [sp, #4]
   16860:	4951      	ldr	r1, [pc, #324]	; (169a8 <fn_disp_cal_report+0x3d0>)
   16862:	0020      	movs	r0, r4
   16864:	47d8      	blx	fp
			glcd_tiny_draw_string(0,6,display_str);
   16866:	0022      	movs	r2, r4
   16868:	2106      	movs	r1, #6
   1686a:	2000      	movs	r0, #0
   1686c:	47a8      	blx	r5
			sprintf(display_str,"C1:%.3f C2:%.3f", cal_report_azm_inc.mag_stdev_c1*100, cal_report_azm_inc.mag_stdev_c2*100);
   1686e:	4653      	mov	r3, sl
   16870:	4948      	ldr	r1, [pc, #288]	; (16994 <fn_disp_cal_report+0x3bc>)
   16872:	6a18      	ldr	r0, [r3, #32]
   16874:	47c8      	blx	r9
   16876:	47c0      	blx	r8
   16878:	4653      	mov	r3, sl
   1687a:	9004      	str	r0, [sp, #16]
   1687c:	9105      	str	r1, [sp, #20]
   1687e:	6a58      	ldr	r0, [r3, #36]	; 0x24
   16880:	4944      	ldr	r1, [pc, #272]	; (16994 <fn_disp_cal_report+0x3bc>)
   16882:	47c8      	blx	r9
   16884:	47c0      	blx	r8
   16886:	9a04      	ldr	r2, [sp, #16]
   16888:	9b05      	ldr	r3, [sp, #20]
   1688a:	9000      	str	r0, [sp, #0]
   1688c:	9101      	str	r1, [sp, #4]
   1688e:	4947      	ldr	r1, [pc, #284]	; (169ac <fn_disp_cal_report+0x3d4>)
   16890:	0020      	movs	r0, r4
   16892:	47d8      	blx	fp
			glcd_tiny_draw_string(0,7,display_str);
   16894:	0022      	movs	r2, r4
   16896:	2107      	movs	r1, #7
   16898:	2000      	movs	r0, #0
   1689a:	47a8      	blx	r5
   1689c:	7833      	ldrb	r3, [r6, #0]
		break;
   1689e:	e6cb      	b.n	16638 <fn_disp_cal_report+0x60>
			sprintf(display_str, "Distance");
   168a0:	4b2c      	ldr	r3, [pc, #176]	; (16954 <fn_disp_cal_report+0x37c>)
   168a2:	2209      	movs	r2, #9
   168a4:	4942      	ldr	r1, [pc, #264]	; (169b0 <fn_disp_cal_report+0x3d8>)
   168a6:	0020      	movs	r0, r4
   168a8:	4798      	blx	r3
			glcd_tiny_draw_string(0,1,display_str);
   168aa:	0022      	movs	r2, r4
   168ac:	2101      	movs	r1, #1
   168ae:	2000      	movs	r0, #0
   168b0:	47a8      	blx	r5
				cal_report_dist.time_struct.hours, cal_report_dist.time_struct.minutes, cal_report_dist.time_struct.seconds);
   168b2:	2040      	movs	r0, #64	; 0x40
				cal_report_dist.time_struct.year, cal_report_dist.time_struct.month, cal_report_dist.time_struct.date,
   168b4:	2345      	movs	r3, #69	; 0x45
   168b6:	2246      	movs	r2, #70	; 0x46
   168b8:	493e      	ldr	r1, [pc, #248]	; (169b4 <fn_disp_cal_report+0x3dc>)
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   168ba:	4f2e      	ldr	r7, [pc, #184]	; (16974 <fn_disp_cal_report+0x39c>)
   168bc:	5c08      	ldrb	r0, [r1, r0]
   168be:	5ccb      	ldrb	r3, [r1, r3]
   168c0:	5c8a      	ldrb	r2, [r1, r2]
   168c2:	9003      	str	r0, [sp, #12]
				cal_report_dist.time_struct.hours, cal_report_dist.time_struct.minutes, cal_report_dist.time_struct.seconds);
   168c4:	2041      	movs	r0, #65	; 0x41
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   168c6:	5c08      	ldrb	r0, [r1, r0]
   168c8:	9002      	str	r0, [sp, #8]
				cal_report_dist.time_struct.hours, cal_report_dist.time_struct.minutes, cal_report_dist.time_struct.seconds);
   168ca:	2042      	movs	r0, #66	; 0x42
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   168cc:	5c08      	ldrb	r0, [r1, r0]
   168ce:	9001      	str	r0, [sp, #4]
				cal_report_dist.time_struct.year, cal_report_dist.time_struct.month, cal_report_dist.time_struct.date,
   168d0:	2044      	movs	r0, #68	; 0x44
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   168d2:	5c09      	ldrb	r1, [r1, r0]
   168d4:	0020      	movs	r0, r4
   168d6:	9100      	str	r1, [sp, #0]
   168d8:	4927      	ldr	r1, [pc, #156]	; (16978 <fn_disp_cal_report+0x3a0>)
   168da:	47b8      	blx	r7
			glcd_tiny_draw_string(0,2,display_str);
   168dc:	0022      	movs	r2, r4
   168de:	2102      	movs	r1, #2
   168e0:	2000      	movs	r0, #0
   168e2:	47a8      	blx	r5
			sprintf(display_str,"Rangefinder Offset:");
   168e4:	4b1b      	ldr	r3, [pc, #108]	; (16954 <fn_disp_cal_report+0x37c>)
   168e6:	2214      	movs	r2, #20
   168e8:	4933      	ldr	r1, [pc, #204]	; (169b8 <fn_disp_cal_report+0x3e0>)
   168ea:	0020      	movs	r0, r4
   168ec:	4798      	blx	r3
			glcd_tiny_draw_string(0,4,display_str);
   168ee:	0022      	movs	r2, r4
   168f0:	2104      	movs	r1, #4
   168f2:	2000      	movs	r0, #0
   168f4:	47a8      	blx	r5
			sprintf(display_str,"  %.4f meters", dist_calst.dist_offset);
   168f6:	4b31      	ldr	r3, [pc, #196]	; (169bc <fn_disp_cal_report+0x3e4>)
   168f8:	469a      	mov	sl, r3
   168fa:	4b21      	ldr	r3, [pc, #132]	; (16980 <fn_disp_cal_report+0x3a8>)
   168fc:	4699      	mov	r9, r3
   168fe:	4653      	mov	r3, sl
   16900:	6d98      	ldr	r0, [r3, #88]	; 0x58
   16902:	47c8      	blx	r9
   16904:	000b      	movs	r3, r1
   16906:	0002      	movs	r2, r0
   16908:	492d      	ldr	r1, [pc, #180]	; (169c0 <fn_disp_cal_report+0x3e8>)
   1690a:	0020      	movs	r0, r4
   1690c:	47b8      	blx	r7
			glcd_tiny_draw_string(0,5,display_str);
   1690e:	0022      	movs	r2, r4
   16910:	2105      	movs	r1, #5
   16912:	2000      	movs	r0, #0
   16914:	47a8      	blx	r5
			sprintf(display_str,"  %.4f feet", dist_calst.dist_offset*mt2ft);
   16916:	4653      	mov	r3, sl
   16918:	492a      	ldr	r1, [pc, #168]	; (169c4 <fn_disp_cal_report+0x3ec>)
   1691a:	6d98      	ldr	r0, [r3, #88]	; 0x58
   1691c:	4b1e      	ldr	r3, [pc, #120]	; (16998 <fn_disp_cal_report+0x3c0>)
   1691e:	4798      	blx	r3
   16920:	47c8      	blx	r9
   16922:	000b      	movs	r3, r1
   16924:	0002      	movs	r2, r0
   16926:	4928      	ldr	r1, [pc, #160]	; (169c8 <fn_disp_cal_report+0x3f0>)
   16928:	0020      	movs	r0, r4
   1692a:	47b8      	blx	r7
			glcd_tiny_draw_string(0,6,display_str);
   1692c:	0022      	movs	r2, r4
   1692e:	2106      	movs	r1, #6
   16930:	2000      	movs	r0, #0
   16932:	47a8      	blx	r5
   16934:	7833      	ldrb	r3, [r6, #0]
		break;
   16936:	e67f      	b.n	16638 <fn_disp_cal_report+0x60>
   16938:	200001d0 	.word	0x200001d0
   1693c:	20000fb2 	.word	0x20000fb2
   16940:	200043f6 	.word	0x200043f6
   16944:	00024180 	.word	0x00024180
   16948:	00014075 	.word	0x00014075
   1694c:	000130dd 	.word	0x000130dd
   16950:	200037f8 	.word	0x200037f8
   16954:	0001efe9 	.word	0x0001efe9
   16958:	00024654 	.word	0x00024654
   1695c:	00014091 	.word	0x00014091
   16960:	00013189 	.word	0x00013189
   16964:	00024778 	.word	0x00024778
   16968:	000139cd 	.word	0x000139cd
   1696c:	00024668 	.word	0x00024668
   16970:	200020e8 	.word	0x200020e8
   16974:	0001f101 	.word	0x0001f101
   16978:	00024680 	.word	0x00024680
   1697c:	000246a0 	.word	0x000246a0
   16980:	0001eddd 	.word	0x0001eddd
   16984:	000246b4 	.word	0x000246b4
   16988:	0001334d 	.word	0x0001334d
   1698c:	000246c4 	.word	0x000246c4
   16990:	000246d4 	.word	0x000246d4
   16994:	42c80000 	.word	0x42c80000
   16998:	0001cba9 	.word	0x0001cba9
   1699c:	000246ec 	.word	0x000246ec
   169a0:	00024700 	.word	0x00024700
   169a4:	00024714 	.word	0x00024714
   169a8:	00024728 	.word	0x00024728
   169ac:	00024738 	.word	0x00024738
   169b0:	00024994 	.word	0x00024994
   169b4:	200037a4 	.word	0x200037a4
   169b8:	00024748 	.word	0x00024748
   169bc:	20004b48 	.word	0x20004b48
   169c0:	0002475c 	.word	0x0002475c
   169c4:	4051f948 	.word	0x4051f948
   169c8:	0002476c 	.word	0x0002476c

000169cc <fn_set_bluetooth>:
void fn_set_bluetooth(void){
   169cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   169ce:	4647      	mov	r7, r8
   169d0:	46ce      	mov	lr, r9
   169d2:	b580      	push	{r7, lr}
	char str_on[] = "On";
   169d4:	4b94      	ldr	r3, [pc, #592]	; (16c28 <fn_set_bluetooth+0x25c>)
void fn_set_bluetooth(void){
   169d6:	b085      	sub	sp, #20
	char str_on[] = "On";
   169d8:	881a      	ldrh	r2, [r3, #0]
   169da:	af02      	add	r7, sp, #8
   169dc:	803a      	strh	r2, [r7, #0]
   169de:	789b      	ldrb	r3, [r3, #2]
   169e0:	70bb      	strb	r3, [r7, #2]
	char str_off[] = "Off";
   169e2:	4b92      	ldr	r3, [pc, #584]	; (16c2c <fn_set_bluetooth+0x260>)
   169e4:	9303      	str	r3, [sp, #12]
	if (state_change) {
   169e6:	4b92      	ldr	r3, [pc, #584]	; (16c30 <fn_set_bluetooth+0x264>)
   169e8:	781b      	ldrb	r3, [r3, #0]
   169ea:	2b00      	cmp	r3, #0
   169ec:	d000      	beq.n	169f0 <fn_set_bluetooth+0x24>
   169ee:	e080      	b.n	16af2 <fn_set_bluetooth+0x126>
   169f0:	4b90      	ldr	r3, [pc, #576]	; (16c34 <fn_set_bluetooth+0x268>)
   169f2:	4698      	mov	r8, r3
   169f4:	4b90      	ldr	r3, [pc, #576]	; (16c38 <fn_set_bluetooth+0x26c>)
	switch(last_input){
   169f6:	781c      	ldrb	r4, [r3, #0]
   169f8:	b2e4      	uxtb	r4, r4
   169fa:	2c02      	cmp	r4, #2
   169fc:	d100      	bne.n	16a00 <fn_set_bluetooth+0x34>
   169fe:	e08a      	b.n	16b16 <fn_set_bluetooth+0x14a>
   16a00:	2c03      	cmp	r4, #3
   16a02:	d100      	bne.n	16a06 <fn_set_bluetooth+0x3a>
   16a04:	e0e5      	b.n	16bd2 <fn_set_bluetooth+0x206>
   16a06:	2c01      	cmp	r4, #1
   16a08:	d100      	bne.n	16a0c <fn_set_bluetooth+0x40>
   16a0a:	e091      	b.n	16b30 <fn_set_bluetooth+0x164>
   16a0c:	4b8b      	ldr	r3, [pc, #556]	; (16c3c <fn_set_bluetooth+0x270>)
   16a0e:	4699      	mov	r9, r3
	glcd_tiny_set_font(Font5x7,5,7,32,127);
   16a10:	237f      	movs	r3, #127	; 0x7f
   16a12:	2207      	movs	r2, #7
   16a14:	2105      	movs	r1, #5
   16a16:	488a      	ldr	r0, [pc, #552]	; (16c40 <fn_set_bluetooth+0x274>)
   16a18:	9300      	str	r3, [sp, #0]
   16a1a:	4c8a      	ldr	r4, [pc, #552]	; (16c44 <fn_set_bluetooth+0x278>)
   16a1c:	3b5f      	subs	r3, #95	; 0x5f
   16a1e:	47a0      	blx	r4
	glcd_clear_buffer();
   16a20:	4b89      	ldr	r3, [pc, #548]	; (16c48 <fn_set_bluetooth+0x27c>)
   16a22:	4798      	blx	r3
	sprintf(display_str,"AutoRun On/Off");
   16a24:	4c89      	ldr	r4, [pc, #548]	; (16c4c <fn_set_bluetooth+0x280>)
   16a26:	4e8a      	ldr	r6, [pc, #552]	; (16c50 <fn_set_bluetooth+0x284>)
   16a28:	220f      	movs	r2, #15
   16a2a:	498a      	ldr	r1, [pc, #552]	; (16c54 <fn_set_bluetooth+0x288>)
   16a2c:	0020      	movs	r0, r4
   16a2e:	47b0      	blx	r6
	glcd_tiny_draw_string(25, 2, display_str);
   16a30:	4d89      	ldr	r5, [pc, #548]	; (16c58 <fn_set_bluetooth+0x28c>)
   16a32:	0022      	movs	r2, r4
   16a34:	2102      	movs	r1, #2
   16a36:	2019      	movs	r0, #25
   16a38:	47a8      	blx	r5
	sprintf(display_str,"Reset On/Off");
   16a3a:	220d      	movs	r2, #13
   16a3c:	4987      	ldr	r1, [pc, #540]	; (16c5c <fn_set_bluetooth+0x290>)
   16a3e:	0020      	movs	r0, r4
   16a40:	47b0      	blx	r6
	glcd_tiny_draw_string(25, 3, display_str);
   16a42:	0022      	movs	r2, r4
   16a44:	2103      	movs	r1, #3
   16a46:	2019      	movs	r0, #25
   16a48:	47a8      	blx	r5
	sprintf(display_str,"OTA On/Off");
   16a4a:	220b      	movs	r2, #11
   16a4c:	4984      	ldr	r1, [pc, #528]	; (16c60 <fn_set_bluetooth+0x294>)
   16a4e:	0020      	movs	r0, r4
   16a50:	47b0      	blx	r6
	glcd_tiny_draw_string(25, 4, display_str);
   16a52:	0022      	movs	r2, r4
   16a54:	2104      	movs	r1, #4
   16a56:	2019      	movs	r0, #25
   16a58:	47a8      	blx	r5
	sprintf(display_str,"MC UART On/Off");
   16a5a:	220f      	movs	r2, #15
   16a5c:	4981      	ldr	r1, [pc, #516]	; (16c64 <fn_set_bluetooth+0x298>)
   16a5e:	0020      	movs	r0, r4
   16a60:	47b0      	blx	r6
	glcd_tiny_draw_string(25, 5, display_str);
   16a62:	0022      	movs	r2, r4
   16a64:	2105      	movs	r1, #5
   16a66:	2019      	movs	r0, #25
   16a68:	47a8      	blx	r5
	sprintf(display_str,"Bluetooth:     Adjust");
   16a6a:	2216      	movs	r2, #22
   16a6c:	497e      	ldr	r1, [pc, #504]	; (16c68 <fn_set_bluetooth+0x29c>)
   16a6e:	0020      	movs	r0, r4
   16a70:	47b0      	blx	r6
	glcd_tiny_draw_string(0,0,display_str);
   16a72:	0022      	movs	r2, r4
   16a74:	2100      	movs	r1, #0
   16a76:	2000      	movs	r0, #0
   16a78:	47a8      	blx	r5
	sprintf(display_str, "Back");
   16a7a:	2205      	movs	r2, #5
   16a7c:	497b      	ldr	r1, [pc, #492]	; (16c6c <fn_set_bluetooth+0x2a0>)
   16a7e:	0020      	movs	r0, r4
   16a80:	47b0      	blx	r6
	glcd_tiny_draw_string(96,7,display_str);
   16a82:	0022      	movs	r2, r4
   16a84:	2107      	movs	r1, #7
   16a86:	2060      	movs	r0, #96	; 0x60
   16a88:	47a8      	blx	r5
	sprintf(display_str, ">");
   16a8a:	2202      	movs	r2, #2
   16a8c:	4978      	ldr	r1, [pc, #480]	; (16c70 <fn_set_bluetooth+0x2a4>)
   16a8e:	0020      	movs	r0, r4
   16a90:	47b0      	blx	r6
	glcd_tiny_draw_string(18, cur_Y,display_str);
   16a92:	4643      	mov	r3, r8
   16a94:	0022      	movs	r2, r4
   16a96:	7819      	ldrb	r1, [r3, #0]
   16a98:	2012      	movs	r0, #18
   16a9a:	47a8      	blx	r5
	return arch_ioport_pin_to_base(pin)->IN.reg & arch_ioport_pin_to_mask(pin);
   16a9c:	4b75      	ldr	r3, [pc, #468]	; (16c74 <fn_set_bluetooth+0x2a8>)
	else{ str_ptr = str_on;}
   16a9e:	003a      	movs	r2, r7
   16aa0:	6a1b      	ldr	r3, [r3, #32]
	if (ioport_get_pin_level(BLE_autorun)){ str_ptr = str_off;}
   16aa2:	045b      	lsls	r3, r3, #17
   16aa4:	d500      	bpl.n	16aa8 <fn_set_bluetooth+0xdc>
   16aa6:	aa03      	add	r2, sp, #12
	glcd_tiny_draw_string(0, 2,str_ptr);
   16aa8:	2102      	movs	r1, #2
   16aaa:	2000      	movs	r0, #0
   16aac:	47a8      	blx	r5
   16aae:	4b71      	ldr	r3, [pc, #452]	; (16c74 <fn_set_bluetooth+0x2a8>)
	else{str_ptr = str_on;}
   16ab0:	003a      	movs	r2, r7
   16ab2:	6a1b      	ldr	r3, [r3, #32]
	if (ioport_get_pin_level(BLE_reset)){ str_ptr = str_off;}
   16ab4:	071b      	lsls	r3, r3, #28
   16ab6:	d500      	bpl.n	16aba <fn_set_bluetooth+0xee>
   16ab8:	aa03      	add	r2, sp, #12
	glcd_tiny_draw_string(0, 3,str_ptr);
   16aba:	2103      	movs	r1, #3
   16abc:	2000      	movs	r0, #0
   16abe:	47a8      	blx	r5
   16ac0:	4b6d      	ldr	r3, [pc, #436]	; (16c78 <fn_set_bluetooth+0x2ac>)
	else{str_ptr = str_off;}
   16ac2:	aa03      	add	r2, sp, #12
   16ac4:	6a1b      	ldr	r3, [r3, #32]
	if (ioport_get_pin_level(BLE_ota)){ str_ptr = str_on;}
   16ac6:	025b      	lsls	r3, r3, #9
   16ac8:	d500      	bpl.n	16acc <fn_set_bluetooth+0x100>
   16aca:	003a      	movs	r2, r7
	glcd_tiny_draw_string(0, 4,str_ptr);
   16acc:	2104      	movs	r1, #4
   16ace:	2000      	movs	r0, #0
   16ad0:	47a8      	blx	r5
	if (USART_BLE_enabled){ str_ptr = str_on;}
   16ad2:	464b      	mov	r3, r9
   16ad4:	781b      	ldrb	r3, [r3, #0]
	else{str_ptr = str_off;}
   16ad6:	aa03      	add	r2, sp, #12
	if (USART_BLE_enabled){ str_ptr = str_on;}
   16ad8:	2b00      	cmp	r3, #0
   16ada:	d000      	beq.n	16ade <fn_set_bluetooth+0x112>
   16adc:	003a      	movs	r2, r7
	glcd_tiny_draw_string(0, 5,str_ptr);
   16ade:	2105      	movs	r1, #5
   16ae0:	2000      	movs	r0, #0
   16ae2:	47a8      	blx	r5
	glcd_write();
   16ae4:	4b65      	ldr	r3, [pc, #404]	; (16c7c <fn_set_bluetooth+0x2b0>)
   16ae6:	4798      	blx	r3
}
   16ae8:	b005      	add	sp, #20
   16aea:	bc0c      	pop	{r2, r3}
   16aec:	4690      	mov	r8, r2
   16aee:	4699      	mov	r9, r3
   16af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		cur_Y=2;
   16af2:	4b50      	ldr	r3, [pc, #320]	; (16c34 <fn_set_bluetooth+0x268>)
   16af4:	4698      	mov	r8, r3
   16af6:	2302      	movs	r3, #2
   16af8:	4642      	mov	r2, r8
   16afa:	6013      	str	r3, [r2, #0]
		cur_Y_low=2;
   16afc:	4a60      	ldr	r2, [pc, #384]	; (16c80 <fn_set_bluetooth+0x2b4>)
   16afe:	6013      	str	r3, [r2, #0]
		cur_Y_high=5;
   16b00:	2205      	movs	r2, #5
   16b02:	4b60      	ldr	r3, [pc, #384]	; (16c84 <fn_set_bluetooth+0x2b8>)
   16b04:	601a      	str	r2, [r3, #0]
		last_input = input_none;
   16b06:	2200      	movs	r2, #0
   16b08:	4b4b      	ldr	r3, [pc, #300]	; (16c38 <fn_set_bluetooth+0x26c>)
   16b0a:	701a      	strb	r2, [r3, #0]
	switch(last_input){
   16b0c:	781c      	ldrb	r4, [r3, #0]
   16b0e:	b2e4      	uxtb	r4, r4
   16b10:	2c02      	cmp	r4, #2
   16b12:	d000      	beq.n	16b16 <fn_set_bluetooth+0x14a>
   16b14:	e774      	b.n	16a00 <fn_set_bluetooth+0x34>
			if(cur_Y > cur_Y_low){--cur_Y; }
   16b16:	4643      	mov	r3, r8
   16b18:	4a59      	ldr	r2, [pc, #356]	; (16c80 <fn_set_bluetooth+0x2b4>)
   16b1a:	681b      	ldr	r3, [r3, #0]
   16b1c:	6812      	ldr	r2, [r2, #0]
   16b1e:	4293      	cmp	r3, r2
   16b20:	dc00      	bgt.n	16b24 <fn_set_bluetooth+0x158>
   16b22:	e773      	b.n	16a0c <fn_set_bluetooth+0x40>
   16b24:	4642      	mov	r2, r8
   16b26:	3b01      	subs	r3, #1
   16b28:	6013      	str	r3, [r2, #0]
   16b2a:	4b44      	ldr	r3, [pc, #272]	; (16c3c <fn_set_bluetooth+0x270>)
   16b2c:	4699      	mov	r9, r3
   16b2e:	e76f      	b.n	16a10 <fn_set_bluetooth+0x44>
			if(cur_Y == 2){
   16b30:	4643      	mov	r3, r8
   16b32:	681b      	ldr	r3, [r3, #0]
   16b34:	2b02      	cmp	r3, #2
   16b36:	d059      	beq.n	16bec <fn_set_bluetooth+0x220>
			} else if (cur_Y==3){
   16b38:	2b03      	cmp	r3, #3
   16b3a:	d061      	beq.n	16c00 <fn_set_bluetooth+0x234>
			} else if (cur_Y==4){
   16b3c:	2b04      	cmp	r3, #4
   16b3e:	d066      	beq.n	16c0e <fn_set_bluetooth+0x242>
			} else if (cur_Y==5){
   16b40:	2b05      	cmp	r3, #5
   16b42:	d000      	beq.n	16b46 <fn_set_bluetooth+0x17a>
   16b44:	e762      	b.n	16a0c <fn_set_bluetooth+0x40>
				if (USART_BLE_enabled){
   16b46:	4b3d      	ldr	r3, [pc, #244]	; (16c3c <fn_set_bluetooth+0x270>)
   16b48:	4699      	mov	r9, r3
   16b4a:	781b      	ldrb	r3, [r3, #0]
   16b4c:	2b00      	cmp	r3, #0
   16b4e:	d065      	beq.n	16c1c <fn_set_bluetooth+0x250>
					USART_BLE_enabled = false;
   16b50:	464a      	mov	r2, r9
   16b52:	2300      	movs	r3, #0
	SercomUsart *const usart_hw = &(module->hw->USART);
   16b54:	4e4c      	ldr	r6, [pc, #304]	; (16c88 <fn_set_bluetooth+0x2bc>)
   16b56:	7013      	strb	r3, [r2, #0]
   16b58:	6835      	ldr	r5, [r6, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   16b5a:	4b4c      	ldr	r3, [pc, #304]	; (16c8c <fn_set_bluetooth+0x2c0>)
   16b5c:	0028      	movs	r0, r5
   16b5e:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   16b60:	231f      	movs	r3, #31
   16b62:	4018      	ands	r0, r3
   16b64:	4084      	lsls	r4, r0
   16b66:	4a4a      	ldr	r2, [pc, #296]	; (16c90 <fn_set_bluetooth+0x2c4>)
   16b68:	3361      	adds	r3, #97	; 0x61
   16b6a:	50d4      	str	r4, [r2, r3]
   16b6c:	6832      	ldr	r2, [r6, #0]
	return (usart_hw->SYNCBUSY.reg);
   16b6e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   16b70:	2b00      	cmp	r3, #0
   16b72:	d1fc      	bne.n	16b6e <fn_set_bluetooth+0x1a2>
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
   16b74:	2202      	movs	r2, #2
   16b76:	682b      	ldr	r3, [r5, #0]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   16b78:	244a      	movs	r4, #74	; 0x4a
   16b7a:	4393      	bics	r3, r2
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   16b7c:	2280      	movs	r2, #128	; 0x80
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   16b7e:	2002      	movs	r0, #2
   16b80:	602b      	str	r3, [r5, #0]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   16b82:	4b3c      	ldr	r3, [pc, #240]	; (16c74 <fn_set_bluetooth+0x2a8>)
   16b84:	00d2      	lsls	r2, r2, #3
   16b86:	609a      	str	r2, [r3, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   16b88:	5d19      	ldrb	r1, [r3, r4]
   16b8a:	4301      	orrs	r1, r0
   16b8c:	b2c9      	uxtb	r1, r1
   16b8e:	5519      	strb	r1, [r3, r4]
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
   16b90:	615a      	str	r2, [r3, #20]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   16b92:	2280      	movs	r2, #128	; 0x80
   16b94:	0112      	lsls	r2, r2, #4
   16b96:	605a      	str	r2, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   16b98:	224b      	movs	r2, #75	; 0x4b
   16b9a:	5c99      	ldrb	r1, [r3, r2]
   16b9c:	4301      	orrs	r1, r0
   16b9e:	b2c9      	uxtb	r1, r1
   16ba0:	5499      	strb	r1, [r3, r2]
	base->WRCONFIG.reg =
   16ba2:	4a3c      	ldr	r2, [pc, #240]	; (16c94 <fn_set_bluetooth+0x2c8>)
   16ba4:	493c      	ldr	r1, [pc, #240]	; (16c98 <fn_set_bluetooth+0x2cc>)
   16ba6:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
   16ba8:	4a3c      	ldr	r2, [pc, #240]	; (16c9c <fn_set_bluetooth+0x2d0>)
   16baa:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
   16bac:	6299      	str	r1, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
   16bae:	629a      	str	r2, [r3, #40]	; 0x28
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   16bb0:	2280      	movs	r2, #128	; 0x80
   16bb2:	0052      	lsls	r2, r2, #1
   16bb4:	605a      	str	r2, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   16bb6:	3ab8      	subs	r2, #184	; 0xb8
   16bb8:	5c99      	ldrb	r1, [r3, r2]
   16bba:	4301      	orrs	r1, r0
   16bbc:	b2c9      	uxtb	r1, r1
   16bbe:	5499      	strb	r1, [r3, r2]
   16bc0:	2149      	movs	r1, #73	; 0x49
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   16bc2:	32b9      	adds	r2, #185	; 0xb9
   16bc4:	32ff      	adds	r2, #255	; 0xff
   16bc6:	605a      	str	r2, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   16bc8:	5c5a      	ldrb	r2, [r3, r1]
   16bca:	4302      	orrs	r2, r0
   16bcc:	b2d2      	uxtb	r2, r2
   16bce:	545a      	strb	r2, [r3, r1]
   16bd0:	e71e      	b.n	16a10 <fn_set_bluetooth+0x44>
			if(cur_Y < cur_Y_high){++cur_Y; }
   16bd2:	4643      	mov	r3, r8
   16bd4:	4a2b      	ldr	r2, [pc, #172]	; (16c84 <fn_set_bluetooth+0x2b8>)
   16bd6:	681b      	ldr	r3, [r3, #0]
   16bd8:	6812      	ldr	r2, [r2, #0]
   16bda:	4293      	cmp	r3, r2
   16bdc:	db00      	blt.n	16be0 <fn_set_bluetooth+0x214>
   16bde:	e715      	b.n	16a0c <fn_set_bluetooth+0x40>
   16be0:	4642      	mov	r2, r8
   16be2:	3301      	adds	r3, #1
   16be4:	6013      	str	r3, [r2, #0]
   16be6:	4b15      	ldr	r3, [pc, #84]	; (16c3c <fn_set_bluetooth+0x270>)
   16be8:	4699      	mov	r9, r3
   16bea:	e711      	b.n	16a10 <fn_set_bluetooth+0x44>
	return arch_ioport_pin_to_base(pin)->IN.reg & arch_ioport_pin_to_mask(pin);
   16bec:	2280      	movs	r2, #128	; 0x80
   16bee:	4b21      	ldr	r3, [pc, #132]	; (16c74 <fn_set_bluetooth+0x2a8>)
   16bf0:	01d2      	lsls	r2, r2, #7
   16bf2:	6a19      	ldr	r1, [r3, #32]
	if (level) {
   16bf4:	4211      	tst	r1, r2
   16bf6:	d008      	beq.n	16c0a <fn_set_bluetooth+0x23e>
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
   16bf8:	615a      	str	r2, [r3, #20]
   16bfa:	4b10      	ldr	r3, [pc, #64]	; (16c3c <fn_set_bluetooth+0x270>)
   16bfc:	4699      	mov	r9, r3
   16bfe:	e707      	b.n	16a10 <fn_set_bluetooth+0x44>
	return arch_ioport_pin_to_base(pin)->IN.reg & arch_ioport_pin_to_mask(pin);
   16c00:	2208      	movs	r2, #8
   16c02:	4b1c      	ldr	r3, [pc, #112]	; (16c74 <fn_set_bluetooth+0x2a8>)
   16c04:	6a19      	ldr	r1, [r3, #32]
	if (level) {
   16c06:	420a      	tst	r2, r1
   16c08:	d1f6      	bne.n	16bf8 <fn_set_bluetooth+0x22c>
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
   16c0a:	619a      	str	r2, [r3, #24]
   16c0c:	e6fe      	b.n	16a0c <fn_set_bluetooth+0x40>
	return arch_ioport_pin_to_base(pin)->IN.reg & arch_ioport_pin_to_mask(pin);
   16c0e:	2280      	movs	r2, #128	; 0x80
   16c10:	4b19      	ldr	r3, [pc, #100]	; (16c78 <fn_set_bluetooth+0x2ac>)
   16c12:	03d2      	lsls	r2, r2, #15
   16c14:	6a19      	ldr	r1, [r3, #32]
	if (level) {
   16c16:	4211      	tst	r1, r2
   16c18:	d1ee      	bne.n	16bf8 <fn_set_bluetooth+0x22c>
   16c1a:	e7f6      	b.n	16c0a <fn_set_bluetooth+0x23e>
					USART_BLE_enabled = true;
   16c1c:	464b      	mov	r3, r9
   16c1e:	701c      	strb	r4, [r3, #0]
					configure_usart();
   16c20:	4b1f      	ldr	r3, [pc, #124]	; (16ca0 <fn_set_bluetooth+0x2d4>)
   16c22:	4798      	blx	r3
   16c24:	e6f4      	b.n	16a10 <fn_set_bluetooth+0x44>
   16c26:	46c0      	nop			; (mov r8, r8)
   16c28:	00024b74 	.word	0x00024b74
   16c2c:	0066664f 	.word	0x0066664f
   16c30:	200001d0 	.word	0x200001d0
   16c34:	2000375c 	.word	0x2000375c
   16c38:	200043f6 	.word	0x200043f6
   16c3c:	2000440c 	.word	0x2000440c
   16c40:	00024180 	.word	0x00024180
   16c44:	00014075 	.word	0x00014075
   16c48:	000130dd 	.word	0x000130dd
   16c4c:	200037f8 	.word	0x200037f8
   16c50:	0001efe9 	.word	0x0001efe9
   16c54:	00024b18 	.word	0x00024b18
   16c58:	00014091 	.word	0x00014091
   16c5c:	00024b28 	.word	0x00024b28
   16c60:	00024b38 	.word	0x00024b38
   16c64:	00024b44 	.word	0x00024b44
   16c68:	00024b54 	.word	0x00024b54
   16c6c:	00024b6c 	.word	0x00024b6c
   16c70:	00024bfc 	.word	0x00024bfc
   16c74:	40002800 	.word	0x40002800
   16c78:	40002880 	.word	0x40002880
   16c7c:	000139cd 	.word	0x000139cd
   16c80:	200047d0 	.word	0x200047d0
   16c84:	200042ac 	.word	0x200042ac
   16c88:	20001220 	.word	0x20001220
   16c8c:	0000be05 	.word	0x0000be05
   16c90:	e000e100 	.word	0xe000e100
   16c94:	50020100 	.word	0x50020100
   16c98:	50020200 	.word	0x50020200
   16c9c:	d0020000 	.word	0xd0020000
   16ca0:	0001277d 	.word	0x0001277d

00016ca4 <fn_menu_debug>:
void fn_menu_debug(void){
   16ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
   16ca6:	46ce      	mov	lr, r9
   16ca8:	4647      	mov	r7, r8
   16caa:	b580      	push	{r7, lr}
	if (state_change) {
   16cac:	4b5c      	ldr	r3, [pc, #368]	; (16e20 <fn_menu_debug+0x17c>)
void fn_menu_debug(void){
   16cae:	b083      	sub	sp, #12
	if (state_change) {
   16cb0:	781b      	ldrb	r3, [r3, #0]
   16cb2:	2b00      	cmp	r3, #0
   16cb4:	d000      	beq.n	16cb8 <fn_menu_debug+0x14>
   16cb6:	e078      	b.n	16daa <fn_menu_debug+0x106>
   16cb8:	4b5a      	ldr	r3, [pc, #360]	; (16e24 <fn_menu_debug+0x180>)
   16cba:	4699      	mov	r9, r3
	switch(last_input){
   16cbc:	4b5a      	ldr	r3, [pc, #360]	; (16e28 <fn_menu_debug+0x184>)
   16cbe:	781b      	ldrb	r3, [r3, #0]
   16cc0:	b2db      	uxtb	r3, r3
   16cc2:	2b02      	cmp	r3, #2
   16cc4:	d100      	bne.n	16cc8 <fn_menu_debug+0x24>
   16cc6:	e080      	b.n	16dca <fn_menu_debug+0x126>
   16cc8:	2b03      	cmp	r3, #3
   16cca:	d100      	bne.n	16cce <fn_menu_debug+0x2a>
   16ccc:	e095      	b.n	16dfa <fn_menu_debug+0x156>
   16cce:	2b01      	cmp	r3, #1
   16cd0:	d100      	bne.n	16cd4 <fn_menu_debug+0x30>
   16cd2:	e085      	b.n	16de0 <fn_menu_debug+0x13c>
	glcd_tiny_set_font(Font5x7,5,7,32,127);
   16cd4:	237f      	movs	r3, #127	; 0x7f
   16cd6:	2207      	movs	r2, #7
   16cd8:	9300      	str	r3, [sp, #0]
   16cda:	2105      	movs	r1, #5
   16cdc:	4853      	ldr	r0, [pc, #332]	; (16e2c <fn_menu_debug+0x188>)
   16cde:	3b5f      	subs	r3, #95	; 0x5f
   16ce0:	4c53      	ldr	r4, [pc, #332]	; (16e30 <fn_menu_debug+0x18c>)
   16ce2:	47a0      	blx	r4
	glcd_clear_buffer();
   16ce4:	4b53      	ldr	r3, [pc, #332]	; (16e34 <fn_menu_debug+0x190>)
   16ce6:	4798      	blx	r3
	sprintf(display_str,"Debug Menu:");
   16ce8:	4c53      	ldr	r4, [pc, #332]	; (16e38 <fn_menu_debug+0x194>)
   16cea:	4e54      	ldr	r6, [pc, #336]	; (16e3c <fn_menu_debug+0x198>)
   16cec:	220c      	movs	r2, #12
   16cee:	4954      	ldr	r1, [pc, #336]	; (16e40 <fn_menu_debug+0x19c>)
   16cf0:	0020      	movs	r0, r4
   16cf2:	47b0      	blx	r6
	glcd_tiny_draw_string(0,0,display_str);
   16cf4:	4d53      	ldr	r5, [pc, #332]	; (16e44 <fn_menu_debug+0x1a0>)
   16cf6:	0022      	movs	r2, r4
   16cf8:	2100      	movs	r1, #0
   16cfa:	2000      	movs	r0, #0
   16cfc:	47a8      	blx	r5
	sprintf(display_str, "Sensor Raw Data");
   16cfe:	2210      	movs	r2, #16
   16d00:	4951      	ldr	r1, [pc, #324]	; (16e48 <fn_menu_debug+0x1a4>)
   16d02:	0020      	movs	r0, r4
   16d04:	47b0      	blx	r6
	glcd_tiny_draw_string(20, 2, display_str);
   16d06:	0022      	movs	r2, r4
   16d08:	2102      	movs	r1, #2
   16d0a:	2014      	movs	r0, #20
   16d0c:	47a8      	blx	r5
	sprintf(display_str, "Backlight Manual");
   16d0e:	2211      	movs	r2, #17
   16d10:	494e      	ldr	r1, [pc, #312]	; (16e4c <fn_menu_debug+0x1a8>)
   16d12:	0020      	movs	r0, r4
   16d14:	47b0      	blx	r6
	glcd_tiny_draw_string(20, 3, display_str);
   16d16:	0022      	movs	r2, r4
   16d18:	2103      	movs	r1, #3
   16d1a:	2014      	movs	r0, #20
   16d1c:	47a8      	blx	r5
	sprintf(display_str, "Charger Info");
   16d1e:	220d      	movs	r2, #13
   16d20:	494b      	ldr	r1, [pc, #300]	; (16e50 <fn_menu_debug+0x1ac>)
   16d22:	0020      	movs	r0, r4
   16d24:	47b0      	blx	r6
	glcd_tiny_draw_string(20, 4, display_str);
   16d26:	0022      	movs	r2, r4
   16d28:	2104      	movs	r1, #4
   16d2a:	2014      	movs	r0, #20
   16d2c:	47a8      	blx	r5
			glcd_draw_line(116, 26, 120, 22, BLACK);
   16d2e:	2301      	movs	r3, #1
   16d30:	4698      	mov	r8, r3
   16d32:	4f48      	ldr	r7, [pc, #288]	; (16e54 <fn_menu_debug+0x1b0>)
   16d34:	9300      	str	r3, [sp, #0]
   16d36:	2278      	movs	r2, #120	; 0x78
   16d38:	3315      	adds	r3, #21
   16d3a:	211a      	movs	r1, #26
   16d3c:	2074      	movs	r0, #116	; 0x74
   16d3e:	47b8      	blx	r7
			glcd_draw_line(120, 22, 124, 26, BLACK);
   16d40:	4643      	mov	r3, r8
   16d42:	227c      	movs	r2, #124	; 0x7c
   16d44:	9300      	str	r3, [sp, #0]
   16d46:	2116      	movs	r1, #22
   16d48:	3319      	adds	r3, #25
   16d4a:	2078      	movs	r0, #120	; 0x78
   16d4c:	47b8      	blx	r7
			glcd_draw_line(116, 40, 120, 44, BLACK);
   16d4e:	4643      	mov	r3, r8
   16d50:	2278      	movs	r2, #120	; 0x78
   16d52:	9300      	str	r3, [sp, #0]
   16d54:	2128      	movs	r1, #40	; 0x28
   16d56:	332b      	adds	r3, #43	; 0x2b
   16d58:	2074      	movs	r0, #116	; 0x74
   16d5a:	47b8      	blx	r7
			glcd_draw_line(120, 44, 124, 40, BLACK);
   16d5c:	4643      	mov	r3, r8
   16d5e:	227c      	movs	r2, #124	; 0x7c
   16d60:	9300      	str	r3, [sp, #0]
   16d62:	212c      	movs	r1, #44	; 0x2c
   16d64:	3327      	adds	r3, #39	; 0x27
   16d66:	2078      	movs	r0, #120	; 0x78
   16d68:	47b8      	blx	r7
	sprintf(display_str, "Enter");
   16d6a:	2206      	movs	r2, #6
   16d6c:	493a      	ldr	r1, [pc, #232]	; (16e58 <fn_menu_debug+0x1b4>)
   16d6e:	0020      	movs	r0, r4
   16d70:	47b0      	blx	r6
	glcd_tiny_draw_string(96,0,display_str);
   16d72:	0022      	movs	r2, r4
   16d74:	2100      	movs	r1, #0
   16d76:	2060      	movs	r0, #96	; 0x60
   16d78:	47a8      	blx	r5
	sprintf(display_str, "Back");
   16d7a:	2205      	movs	r2, #5
   16d7c:	4937      	ldr	r1, [pc, #220]	; (16e5c <fn_menu_debug+0x1b8>)
   16d7e:	0020      	movs	r0, r4
   16d80:	47b0      	blx	r6
	glcd_tiny_draw_string(103,7,display_str);
   16d82:	0022      	movs	r2, r4
   16d84:	2107      	movs	r1, #7
   16d86:	2067      	movs	r0, #103	; 0x67
   16d88:	47a8      	blx	r5
	sprintf(display_str, ">");
   16d8a:	2202      	movs	r2, #2
   16d8c:	4934      	ldr	r1, [pc, #208]	; (16e60 <fn_menu_debug+0x1bc>)
   16d8e:	0020      	movs	r0, r4
   16d90:	47b0      	blx	r6
	glcd_tiny_draw_string(10, cur_Y,display_str);
   16d92:	464b      	mov	r3, r9
   16d94:	0022      	movs	r2, r4
   16d96:	7819      	ldrb	r1, [r3, #0]
   16d98:	200a      	movs	r0, #10
   16d9a:	47a8      	blx	r5
	glcd_write();
   16d9c:	4b31      	ldr	r3, [pc, #196]	; (16e64 <fn_menu_debug+0x1c0>)
   16d9e:	4798      	blx	r3
}
   16da0:	b003      	add	sp, #12
   16da2:	bc0c      	pop	{r2, r3}
   16da4:	4690      	mov	r8, r2
   16da6:	4699      	mov	r9, r3
   16da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		cur_Y = 2;
   16daa:	4b1e      	ldr	r3, [pc, #120]	; (16e24 <fn_menu_debug+0x180>)
   16dac:	4699      	mov	r9, r3
   16dae:	2302      	movs	r3, #2
   16db0:	464a      	mov	r2, r9
   16db2:	6013      	str	r3, [r2, #0]
		cur_Y_low = 2;
   16db4:	4a2c      	ldr	r2, [pc, #176]	; (16e68 <fn_menu_debug+0x1c4>)
   16db6:	6013      	str	r3, [r2, #0]
		cur_Y_high = 4;
   16db8:	2204      	movs	r2, #4
   16dba:	4b2c      	ldr	r3, [pc, #176]	; (16e6c <fn_menu_debug+0x1c8>)
   16dbc:	601a      	str	r2, [r3, #0]
	switch(last_input){
   16dbe:	4b1a      	ldr	r3, [pc, #104]	; (16e28 <fn_menu_debug+0x184>)
   16dc0:	781b      	ldrb	r3, [r3, #0]
   16dc2:	b2db      	uxtb	r3, r3
   16dc4:	2b02      	cmp	r3, #2
   16dc6:	d000      	beq.n	16dca <fn_menu_debug+0x126>
   16dc8:	e77e      	b.n	16cc8 <fn_menu_debug+0x24>
			if(cur_Y > cur_Y_low){--cur_Y; }
   16dca:	464b      	mov	r3, r9
   16dcc:	4a26      	ldr	r2, [pc, #152]	; (16e68 <fn_menu_debug+0x1c4>)
   16dce:	681b      	ldr	r3, [r3, #0]
   16dd0:	6812      	ldr	r2, [r2, #0]
   16dd2:	4293      	cmp	r3, r2
   16dd4:	dc00      	bgt.n	16dd8 <fn_menu_debug+0x134>
   16dd6:	e77d      	b.n	16cd4 <fn_menu_debug+0x30>
   16dd8:	464a      	mov	r2, r9
   16dda:	3b01      	subs	r3, #1
   16ddc:	6013      	str	r3, [r2, #0]
   16dde:	e779      	b.n	16cd4 <fn_menu_debug+0x30>
			if (cur_Y==2){
   16de0:	464b      	mov	r3, r9
   16de2:	681b      	ldr	r3, [r3, #0]
   16de4:	2b02      	cmp	r3, #2
   16de6:	d017      	beq.n	16e18 <fn_menu_debug+0x174>
			}else if(cur_Y == 3){
   16de8:	2b03      	cmp	r3, #3
   16dea:	d011      	beq.n	16e10 <fn_menu_debug+0x16c>
			} else if(cur_Y == 4){
   16dec:	2b04      	cmp	r3, #4
   16dee:	d000      	beq.n	16df2 <fn_menu_debug+0x14e>
   16df0:	e770      	b.n	16cd4 <fn_menu_debug+0x30>
				current_input = input_debug_charger;
   16df2:	2214      	movs	r2, #20
   16df4:	4b1e      	ldr	r3, [pc, #120]	; (16e70 <fn_menu_debug+0x1cc>)
   16df6:	701a      	strb	r2, [r3, #0]
   16df8:	e76c      	b.n	16cd4 <fn_menu_debug+0x30>
			if(cur_Y < cur_Y_high){++cur_Y; }
   16dfa:	464b      	mov	r3, r9
   16dfc:	4a1b      	ldr	r2, [pc, #108]	; (16e6c <fn_menu_debug+0x1c8>)
   16dfe:	681b      	ldr	r3, [r3, #0]
   16e00:	6812      	ldr	r2, [r2, #0]
   16e02:	4293      	cmp	r3, r2
   16e04:	db00      	blt.n	16e08 <fn_menu_debug+0x164>
   16e06:	e765      	b.n	16cd4 <fn_menu_debug+0x30>
   16e08:	464a      	mov	r2, r9
   16e0a:	3301      	adds	r3, #1
   16e0c:	6013      	str	r3, [r2, #0]
   16e0e:	e761      	b.n	16cd4 <fn_menu_debug+0x30>
				current_input = input_debug_backlight;
   16e10:	2213      	movs	r2, #19
   16e12:	4b17      	ldr	r3, [pc, #92]	; (16e70 <fn_menu_debug+0x1cc>)
   16e14:	701a      	strb	r2, [r3, #0]
   16e16:	e75d      	b.n	16cd4 <fn_menu_debug+0x30>
				current_input = input_debug_rawData;
   16e18:	2212      	movs	r2, #18
   16e1a:	4b15      	ldr	r3, [pc, #84]	; (16e70 <fn_menu_debug+0x1cc>)
   16e1c:	701a      	strb	r2, [r3, #0]
   16e1e:	e759      	b.n	16cd4 <fn_menu_debug+0x30>
   16e20:	200001d0 	.word	0x200001d0
   16e24:	2000375c 	.word	0x2000375c
   16e28:	200043f6 	.word	0x200043f6
   16e2c:	00024180 	.word	0x00024180
   16e30:	00014075 	.word	0x00014075
   16e34:	000130dd 	.word	0x000130dd
   16e38:	200037f8 	.word	0x200037f8
   16e3c:	0001efe9 	.word	0x0001efe9
   16e40:	000249bc 	.word	0x000249bc
   16e44:	00014091 	.word	0x00014091
   16e48:	000249c8 	.word	0x000249c8
   16e4c:	000249d8 	.word	0x000249d8
   16e50:	000249ec 	.word	0x000249ec
   16e54:	00013189 	.word	0x00013189
   16e58:	000249fc 	.word	0x000249fc
   16e5c:	00024b6c 	.word	0x00024b6c
   16e60:	00024bfc 	.word	0x00024bfc
   16e64:	000139cd 	.word	0x000139cd
   16e68:	200047d0 	.word	0x200047d0
   16e6c:	200042ac 	.word	0x200042ac
   16e70:	200043f4 	.word	0x200043f4

00016e74 <fn_menu_cal>:
void fn_menu_cal(void){
   16e74:	b5f0      	push	{r4, r5, r6, r7, lr}
   16e76:	46ce      	mov	lr, r9
   16e78:	4647      	mov	r7, r8
   16e7a:	b580      	push	{r7, lr}
	if (state_change) {
   16e7c:	4b63      	ldr	r3, [pc, #396]	; (1700c <fn_menu_cal+0x198>)
void fn_menu_cal(void){
   16e7e:	b083      	sub	sp, #12
	if (state_change) {
   16e80:	781b      	ldrb	r3, [r3, #0]
   16e82:	2b00      	cmp	r3, #0
   16e84:	d000      	beq.n	16e88 <fn_menu_cal+0x14>
   16e86:	e080      	b.n	16f8a <fn_menu_cal+0x116>
   16e88:	4b61      	ldr	r3, [pc, #388]	; (17010 <fn_menu_cal+0x19c>)
   16e8a:	4699      	mov	r9, r3
	switch(last_input){
   16e8c:	4b61      	ldr	r3, [pc, #388]	; (17014 <fn_menu_cal+0x1a0>)
   16e8e:	781b      	ldrb	r3, [r3, #0]
   16e90:	b2db      	uxtb	r3, r3
   16e92:	2b02      	cmp	r3, #2
   16e94:	d100      	bne.n	16e98 <fn_menu_cal+0x24>
   16e96:	e088      	b.n	16faa <fn_menu_cal+0x136>
   16e98:	2b03      	cmp	r3, #3
   16e9a:	d100      	bne.n	16e9e <fn_menu_cal+0x2a>
   16e9c:	e09f      	b.n	16fde <fn_menu_cal+0x16a>
   16e9e:	2b01      	cmp	r3, #1
   16ea0:	d100      	bne.n	16ea4 <fn_menu_cal+0x30>
   16ea2:	e08d      	b.n	16fc0 <fn_menu_cal+0x14c>
	glcd_tiny_set_font(Font5x7,5,7,32,127);
   16ea4:	237f      	movs	r3, #127	; 0x7f
   16ea6:	2207      	movs	r2, #7
   16ea8:	9300      	str	r3, [sp, #0]
   16eaa:	2105      	movs	r1, #5
   16eac:	485a      	ldr	r0, [pc, #360]	; (17018 <fn_menu_cal+0x1a4>)
   16eae:	3b5f      	subs	r3, #95	; 0x5f
   16eb0:	4c5a      	ldr	r4, [pc, #360]	; (1701c <fn_menu_cal+0x1a8>)
   16eb2:	47a0      	blx	r4
	glcd_clear_buffer();
   16eb4:	4b5a      	ldr	r3, [pc, #360]	; (17020 <fn_menu_cal+0x1ac>)
   16eb6:	4798      	blx	r3
	sprintf(display_str,"Calibration:");
   16eb8:	4c5a      	ldr	r4, [pc, #360]	; (17024 <fn_menu_cal+0x1b0>)
   16eba:	4e5b      	ldr	r6, [pc, #364]	; (17028 <fn_menu_cal+0x1b4>)
   16ebc:	220d      	movs	r2, #13
   16ebe:	495b      	ldr	r1, [pc, #364]	; (1702c <fn_menu_cal+0x1b8>)
   16ec0:	0020      	movs	r0, r4
   16ec2:	47b0      	blx	r6
	glcd_tiny_draw_string(0,0,display_str);
   16ec4:	4d5a      	ldr	r5, [pc, #360]	; (17030 <fn_menu_cal+0x1bc>)
   16ec6:	0022      	movs	r2, r4
   16ec8:	2100      	movs	r1, #0
   16eca:	2000      	movs	r0, #0
   16ecc:	47a8      	blx	r5
	sprintf(display_str, "Display Report");
   16ece:	220f      	movs	r2, #15
   16ed0:	4958      	ldr	r1, [pc, #352]	; (17034 <fn_menu_cal+0x1c0>)
   16ed2:	0020      	movs	r0, r4
   16ed4:	47b0      	blx	r6
	glcd_tiny_draw_string(20, 2, display_str);
   16ed6:	0022      	movs	r2, r4
   16ed8:	2102      	movs	r1, #2
   16eda:	2014      	movs	r0, #20
   16edc:	47a8      	blx	r5
	sprintf(display_str, "Cal Distance");
   16ede:	220d      	movs	r2, #13
   16ee0:	4955      	ldr	r1, [pc, #340]	; (17038 <fn_menu_cal+0x1c4>)
   16ee2:	0020      	movs	r0, r4
   16ee4:	47b0      	blx	r6
	glcd_tiny_draw_string(20, 3, display_str);
   16ee6:	0022      	movs	r2, r4
   16ee8:	2103      	movs	r1, #3
   16eea:	2014      	movs	r0, #20
   16eec:	47a8      	blx	r5
	sprintf(display_str, "Cal AZM & INCL");
   16eee:	220f      	movs	r2, #15
   16ef0:	4952      	ldr	r1, [pc, #328]	; (1703c <fn_menu_cal+0x1c8>)
   16ef2:	0020      	movs	r0, r4
   16ef4:	47b0      	blx	r6
	glcd_tiny_draw_string(20, 4, display_str);
   16ef6:	0022      	movs	r2, r4
   16ef8:	2104      	movs	r1, #4
   16efa:	2014      	movs	r0, #20
   16efc:	47a8      	blx	r5
	sprintf(display_str,"Loop Test");
   16efe:	220a      	movs	r2, #10
   16f00:	494f      	ldr	r1, [pc, #316]	; (17040 <fn_menu_cal+0x1cc>)
   16f02:	0020      	movs	r0, r4
   16f04:	47b0      	blx	r6
	glcd_tiny_draw_string(20, 5, display_str);
   16f06:	0022      	movs	r2, r4
   16f08:	2105      	movs	r1, #5
   16f0a:	2014      	movs	r0, #20
   16f0c:	47a8      	blx	r5
			glcd_draw_line(116, 26, 120, 22, BLACK);
   16f0e:	2301      	movs	r3, #1
   16f10:	4698      	mov	r8, r3
   16f12:	4f4c      	ldr	r7, [pc, #304]	; (17044 <fn_menu_cal+0x1d0>)
   16f14:	9300      	str	r3, [sp, #0]
   16f16:	2278      	movs	r2, #120	; 0x78
   16f18:	3315      	adds	r3, #21
   16f1a:	211a      	movs	r1, #26
   16f1c:	2074      	movs	r0, #116	; 0x74
   16f1e:	47b8      	blx	r7
			glcd_draw_line(120, 22, 124, 26, BLACK);
   16f20:	4643      	mov	r3, r8
   16f22:	227c      	movs	r2, #124	; 0x7c
   16f24:	9300      	str	r3, [sp, #0]
   16f26:	2116      	movs	r1, #22
   16f28:	3319      	adds	r3, #25
   16f2a:	2078      	movs	r0, #120	; 0x78
   16f2c:	47b8      	blx	r7
			glcd_draw_line(116, 40, 120, 44, BLACK);
   16f2e:	4643      	mov	r3, r8
   16f30:	2278      	movs	r2, #120	; 0x78
   16f32:	9300      	str	r3, [sp, #0]
   16f34:	2128      	movs	r1, #40	; 0x28
   16f36:	332b      	adds	r3, #43	; 0x2b
   16f38:	2074      	movs	r0, #116	; 0x74
   16f3a:	47b8      	blx	r7
			glcd_draw_line(120, 44, 124, 40, BLACK);
   16f3c:	4643      	mov	r3, r8
   16f3e:	227c      	movs	r2, #124	; 0x7c
   16f40:	9300      	str	r3, [sp, #0]
   16f42:	212c      	movs	r1, #44	; 0x2c
   16f44:	3327      	adds	r3, #39	; 0x27
   16f46:	2078      	movs	r0, #120	; 0x78
   16f48:	47b8      	blx	r7
	sprintf(display_str, "Enter");
   16f4a:	2206      	movs	r2, #6
   16f4c:	493e      	ldr	r1, [pc, #248]	; (17048 <fn_menu_cal+0x1d4>)
   16f4e:	0020      	movs	r0, r4
   16f50:	47b0      	blx	r6
	glcd_tiny_draw_string(96,0,display_str);
   16f52:	0022      	movs	r2, r4
   16f54:	2100      	movs	r1, #0
   16f56:	2060      	movs	r0, #96	; 0x60
   16f58:	47a8      	blx	r5
	sprintf(display_str, "Back");
   16f5a:	2205      	movs	r2, #5
   16f5c:	493b      	ldr	r1, [pc, #236]	; (1704c <fn_menu_cal+0x1d8>)
   16f5e:	0020      	movs	r0, r4
   16f60:	47b0      	blx	r6
	glcd_tiny_draw_string(103,7,display_str);
   16f62:	0022      	movs	r2, r4
   16f64:	2107      	movs	r1, #7
   16f66:	2067      	movs	r0, #103	; 0x67
   16f68:	47a8      	blx	r5
	sprintf(display_str, ">");
   16f6a:	2202      	movs	r2, #2
   16f6c:	4938      	ldr	r1, [pc, #224]	; (17050 <fn_menu_cal+0x1dc>)
   16f6e:	0020      	movs	r0, r4
   16f70:	47b0      	blx	r6
	glcd_tiny_draw_string(10, cur_Y,display_str);
   16f72:	464b      	mov	r3, r9
   16f74:	0022      	movs	r2, r4
   16f76:	7819      	ldrb	r1, [r3, #0]
   16f78:	200a      	movs	r0, #10
   16f7a:	47a8      	blx	r5
	glcd_write();
   16f7c:	4b35      	ldr	r3, [pc, #212]	; (17054 <fn_menu_cal+0x1e0>)
   16f7e:	4798      	blx	r3
}
   16f80:	b003      	add	sp, #12
   16f82:	bc0c      	pop	{r2, r3}
   16f84:	4690      	mov	r8, r2
   16f86:	4699      	mov	r9, r3
   16f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
		cur_Y = 2;
   16f8a:	4b21      	ldr	r3, [pc, #132]	; (17010 <fn_menu_cal+0x19c>)
   16f8c:	4699      	mov	r9, r3
   16f8e:	2302      	movs	r3, #2
   16f90:	464a      	mov	r2, r9
   16f92:	6013      	str	r3, [r2, #0]
		cur_Y_low = 2;
   16f94:	4a30      	ldr	r2, [pc, #192]	; (17058 <fn_menu_cal+0x1e4>)
   16f96:	6013      	str	r3, [r2, #0]
		cur_Y_high = 5;
   16f98:	2205      	movs	r2, #5
   16f9a:	4b30      	ldr	r3, [pc, #192]	; (1705c <fn_menu_cal+0x1e8>)
   16f9c:	601a      	str	r2, [r3, #0]
	switch(last_input){
   16f9e:	4b1d      	ldr	r3, [pc, #116]	; (17014 <fn_menu_cal+0x1a0>)
   16fa0:	781b      	ldrb	r3, [r3, #0]
   16fa2:	b2db      	uxtb	r3, r3
   16fa4:	2b02      	cmp	r3, #2
   16fa6:	d000      	beq.n	16faa <fn_menu_cal+0x136>
   16fa8:	e776      	b.n	16e98 <fn_menu_cal+0x24>
			if(cur_Y > cur_Y_low){--cur_Y; }
   16faa:	464b      	mov	r3, r9
   16fac:	4a2a      	ldr	r2, [pc, #168]	; (17058 <fn_menu_cal+0x1e4>)
   16fae:	681b      	ldr	r3, [r3, #0]
   16fb0:	6812      	ldr	r2, [r2, #0]
   16fb2:	4293      	cmp	r3, r2
   16fb4:	dc00      	bgt.n	16fb8 <fn_menu_cal+0x144>
   16fb6:	e775      	b.n	16ea4 <fn_menu_cal+0x30>
   16fb8:	464a      	mov	r2, r9
   16fba:	3b01      	subs	r3, #1
   16fbc:	6013      	str	r3, [r2, #0]
   16fbe:	e771      	b.n	16ea4 <fn_menu_cal+0x30>
			if (cur_Y==2){
   16fc0:	464b      	mov	r3, r9
   16fc2:	681b      	ldr	r3, [r3, #0]
   16fc4:	2b02      	cmp	r3, #2
   16fc6:	d019      	beq.n	16ffc <fn_menu_cal+0x188>
			}else if(cur_Y == 3){
   16fc8:	2b03      	cmp	r3, #3
   16fca:	d013      	beq.n	16ff4 <fn_menu_cal+0x180>
			} else if (cur_Y==4){
   16fcc:	2b04      	cmp	r3, #4
   16fce:	d019      	beq.n	17004 <fn_menu_cal+0x190>
			} else if (cur_Y==5){
   16fd0:	2b05      	cmp	r3, #5
   16fd2:	d000      	beq.n	16fd6 <fn_menu_cal+0x162>
   16fd4:	e766      	b.n	16ea4 <fn_menu_cal+0x30>
				current_input = input_loop_test;
   16fd6:	2211      	movs	r2, #17
   16fd8:	4b21      	ldr	r3, [pc, #132]	; (17060 <fn_menu_cal+0x1ec>)
   16fda:	701a      	strb	r2, [r3, #0]
   16fdc:	e762      	b.n	16ea4 <fn_menu_cal+0x30>
			if(cur_Y < cur_Y_high){++cur_Y; }
   16fde:	464b      	mov	r3, r9
   16fe0:	4a1e      	ldr	r2, [pc, #120]	; (1705c <fn_menu_cal+0x1e8>)
   16fe2:	681b      	ldr	r3, [r3, #0]
   16fe4:	6812      	ldr	r2, [r2, #0]
   16fe6:	4293      	cmp	r3, r2
   16fe8:	db00      	blt.n	16fec <fn_menu_cal+0x178>
   16fea:	e75b      	b.n	16ea4 <fn_menu_cal+0x30>
   16fec:	464a      	mov	r2, r9
   16fee:	3301      	adds	r3, #1
   16ff0:	6013      	str	r3, [r2, #0]
   16ff2:	e757      	b.n	16ea4 <fn_menu_cal+0x30>
				current_input = input_dist_calibration;
   16ff4:	220e      	movs	r2, #14
   16ff6:	4b1a      	ldr	r3, [pc, #104]	; (17060 <fn_menu_cal+0x1ec>)
   16ff8:	701a      	strb	r2, [r3, #0]
   16ffa:	e753      	b.n	16ea4 <fn_menu_cal+0x30>
				current_input = input_disp_cal_report;
   16ffc:	2210      	movs	r2, #16
   16ffe:	4b18      	ldr	r3, [pc, #96]	; (17060 <fn_menu_cal+0x1ec>)
   17000:	701a      	strb	r2, [r3, #0]
   17002:	e74f      	b.n	16ea4 <fn_menu_cal+0x30>
				current_input = input_acc_comp_calibration;
   17004:	220f      	movs	r2, #15
   17006:	4b16      	ldr	r3, [pc, #88]	; (17060 <fn_menu_cal+0x1ec>)
   17008:	701a      	strb	r2, [r3, #0]
   1700a:	e74b      	b.n	16ea4 <fn_menu_cal+0x30>
   1700c:	200001d0 	.word	0x200001d0
   17010:	2000375c 	.word	0x2000375c
   17014:	200043f6 	.word	0x200043f6
   17018:	00024180 	.word	0x00024180
   1701c:	00014075 	.word	0x00014075
   17020:	000130dd 	.word	0x000130dd
   17024:	200037f8 	.word	0x200037f8
   17028:	0001efe9 	.word	0x0001efe9
   1702c:	00024368 	.word	0x00024368
   17030:	00014091 	.word	0x00014091
   17034:	00024980 	.word	0x00024980
   17038:	00024990 	.word	0x00024990
   1703c:	000249a0 	.word	0x000249a0
   17040:	000249b0 	.word	0x000249b0
   17044:	00013189 	.word	0x00013189
   17048:	000249fc 	.word	0x000249fc
   1704c:	00024b6c 	.word	0x00024b6c
   17050:	00024bfc 	.word	0x00024bfc
   17054:	000139cd 	.word	0x000139cd
   17058:	200047d0 	.word	0x200047d0
   1705c:	200042ac 	.word	0x200042ac
   17060:	200043f4 	.word	0x200043f4

00017064 <fn_debug_backlight>:
void fn_debug_backlight(void){
   17064:	b5f0      	push	{r4, r5, r6, r7, lr}
   17066:	46d6      	mov	lr, sl
   17068:	464f      	mov	r7, r9
   1706a:	4646      	mov	r6, r8
   1706c:	b5c0      	push	{r6, r7, lr}
	if (state_change) {
   1706e:	4b74      	ldr	r3, [pc, #464]	; (17240 <fn_debug_backlight+0x1dc>)
void fn_debug_backlight(void){
   17070:	b082      	sub	sp, #8
	if (state_change) {
   17072:	781b      	ldrb	r3, [r3, #0]
   17074:	2b00      	cmp	r3, #0
   17076:	d000      	beq.n	1707a <fn_debug_backlight+0x16>
   17078:	e0bc      	b.n	171f4 <fn_debug_backlight+0x190>
   1707a:	4b72      	ldr	r3, [pc, #456]	; (17244 <fn_debug_backlight+0x1e0>)
   1707c:	4f72      	ldr	r7, [pc, #456]	; (17248 <fn_debug_backlight+0x1e4>)
   1707e:	4699      	mov	r9, r3
   17080:	4b72      	ldr	r3, [pc, #456]	; (1724c <fn_debug_backlight+0x1e8>)
   17082:	4698      	mov	r8, r3
	switch(cur_Y){
   17084:	464b      	mov	r3, r9
   17086:	681a      	ldr	r2, [r3, #0]
   17088:	2a03      	cmp	r2, #3
   1708a:	d100      	bne.n	1708e <fn_debug_backlight+0x2a>
   1708c:	e0ce      	b.n	1722c <fn_debug_backlight+0x1c8>
   1708e:	2a03      	cmp	r2, #3
   17090:	dc00      	bgt.n	17094 <fn_debug_backlight+0x30>
   17092:	e09b      	b.n	171cc <fn_debug_backlight+0x168>
   17094:	2a04      	cmp	r2, #4
   17096:	d100      	bne.n	1709a <fn_debug_backlight+0x36>
   17098:	e08a      	b.n	171b0 <fn_debug_backlight+0x14c>
			colorRef = 'L';
   1709a:	214c      	movs	r1, #76	; 0x4c
			break;
   1709c:	204c      	movs	r0, #76	; 0x4c
			colorRef = 'L';
   1709e:	4b6c      	ldr	r3, [pc, #432]	; (17250 <fn_debug_backlight+0x1ec>)
   170a0:	7019      	strb	r1, [r3, #0]
	switch(last_input){
   170a2:	4b6c      	ldr	r3, [pc, #432]	; (17254 <fn_debug_backlight+0x1f0>)
   170a4:	781b      	ldrb	r3, [r3, #0]
   170a6:	b2db      	uxtb	r3, r3
   170a8:	2b02      	cmp	r3, #2
   170aa:	d100      	bne.n	170ae <fn_debug_backlight+0x4a>
   170ac:	e08a      	b.n	171c4 <fn_debug_backlight+0x160>
   170ae:	2b02      	cmp	r3, #2
   170b0:	d800      	bhi.n	170b4 <fn_debug_backlight+0x50>
   170b2:	e093      	b.n	171dc <fn_debug_backlight+0x178>
   170b4:	2b03      	cmp	r3, #3
   170b6:	d100      	bne.n	170ba <fn_debug_backlight+0x56>
   170b8:	e0bd      	b.n	17236 <fn_debug_backlight+0x1d2>
   170ba:	2b04      	cmp	r3, #4
   170bc:	d106      	bne.n	170cc <fn_debug_backlight+0x68>
			if(cur_Y < cur_Y_high){++cur_Y; }
   170be:	4b66      	ldr	r3, [pc, #408]	; (17258 <fn_debug_backlight+0x1f4>)
   170c0:	681b      	ldr	r3, [r3, #0]
   170c2:	429a      	cmp	r2, r3
   170c4:	da02      	bge.n	170cc <fn_debug_backlight+0x68>
   170c6:	464b      	mov	r3, r9
   170c8:	3201      	adds	r2, #1
   170ca:	601a      	str	r2, [r3, #0]
	glcd_clear_buffer();
   170cc:	4b63      	ldr	r3, [pc, #396]	; (1725c <fn_debug_backlight+0x1f8>)
   170ce:	4798      	blx	r3
	sprintf(display_str,"Backlight Debug:");
   170d0:	4c63      	ldr	r4, [pc, #396]	; (17260 <fn_debug_backlight+0x1fc>)
   170d2:	4e64      	ldr	r6, [pc, #400]	; (17264 <fn_debug_backlight+0x200>)
   170d4:	2211      	movs	r2, #17
   170d6:	4964      	ldr	r1, [pc, #400]	; (17268 <fn_debug_backlight+0x204>)
   170d8:	0020      	movs	r0, r4
   170da:	47b0      	blx	r6
	glcd_tiny_draw_string(0,0,display_str);
   170dc:	4d63      	ldr	r5, [pc, #396]	; (1726c <fn_debug_backlight+0x208>)
   170de:	0022      	movs	r2, r4
   170e0:	2100      	movs	r1, #0
   170e2:	2000      	movs	r0, #0
   170e4:	47a8      	blx	r5
	sprintf(display_str, "Red:   %d", colorPtr->red);
   170e6:	683b      	ldr	r3, [r7, #0]
   170e8:	4961      	ldr	r1, [pc, #388]	; (17270 <fn_debug_backlight+0x20c>)
   170ea:	791a      	ldrb	r2, [r3, #4]
   170ec:	4b61      	ldr	r3, [pc, #388]	; (17274 <fn_debug_backlight+0x210>)
   170ee:	0020      	movs	r0, r4
   170f0:	469a      	mov	sl, r3
   170f2:	4798      	blx	r3
	glcd_tiny_draw_string(20, 2, display_str);
   170f4:	0022      	movs	r2, r4
   170f6:	2102      	movs	r1, #2
   170f8:	2014      	movs	r0, #20
   170fa:	47a8      	blx	r5
	sprintf(display_str, "Green: %d", colorPtr->green);
   170fc:	683b      	ldr	r3, [r7, #0]
   170fe:	495e      	ldr	r1, [pc, #376]	; (17278 <fn_debug_backlight+0x214>)
   17100:	799a      	ldrb	r2, [r3, #6]
   17102:	0020      	movs	r0, r4
   17104:	47d0      	blx	sl
	glcd_tiny_draw_string(20, 3, display_str);
   17106:	0022      	movs	r2, r4
   17108:	2103      	movs	r1, #3
   1710a:	2014      	movs	r0, #20
   1710c:	47a8      	blx	r5
	sprintf(display_str, "Blue:  %d", colorPtr->blue);
   1710e:	683b      	ldr	r3, [r7, #0]
   17110:	495a      	ldr	r1, [pc, #360]	; (1727c <fn_debug_backlight+0x218>)
   17112:	795a      	ldrb	r2, [r3, #5]
   17114:	0020      	movs	r0, r4
   17116:	47d0      	blx	sl
	glcd_tiny_draw_string(20, 4, display_str);
   17118:	0022      	movs	r2, r4
   1711a:	2104      	movs	r1, #4
   1711c:	2014      	movs	r0, #20
   1711e:	47a8      	blx	r5
	sprintf(display_str, "Light: %d", options.backlight_setting.brightness);
   17120:	4643      	mov	r3, r8
   17122:	4957      	ldr	r1, [pc, #348]	; (17280 <fn_debug_backlight+0x21c>)
   17124:	7b1a      	ldrb	r2, [r3, #12]
   17126:	0020      	movs	r0, r4
   17128:	47d0      	blx	sl
	glcd_tiny_draw_string(20, 5, display_str);
   1712a:	0022      	movs	r2, r4
   1712c:	2105      	movs	r1, #5
   1712e:	2014      	movs	r0, #20
   17130:	47a8      	blx	r5
			glcd_draw_line(116, 26, 120, 22, BLACK);
   17132:	2301      	movs	r3, #1
   17134:	4698      	mov	r8, r3
   17136:	4f53      	ldr	r7, [pc, #332]	; (17284 <fn_debug_backlight+0x220>)
   17138:	9300      	str	r3, [sp, #0]
   1713a:	2278      	movs	r2, #120	; 0x78
   1713c:	3315      	adds	r3, #21
   1713e:	211a      	movs	r1, #26
   17140:	2074      	movs	r0, #116	; 0x74
   17142:	47b8      	blx	r7
			glcd_draw_line(120, 22, 124, 26, BLACK);
   17144:	4643      	mov	r3, r8
   17146:	227c      	movs	r2, #124	; 0x7c
   17148:	9300      	str	r3, [sp, #0]
   1714a:	2116      	movs	r1, #22
   1714c:	3319      	adds	r3, #25
   1714e:	2078      	movs	r0, #120	; 0x78
   17150:	47b8      	blx	r7
			glcd_draw_line(116, 40, 120, 44, BLACK);
   17152:	4643      	mov	r3, r8
   17154:	2278      	movs	r2, #120	; 0x78
   17156:	9300      	str	r3, [sp, #0]
   17158:	2128      	movs	r1, #40	; 0x28
   1715a:	332b      	adds	r3, #43	; 0x2b
   1715c:	2074      	movs	r0, #116	; 0x74
   1715e:	47b8      	blx	r7
			glcd_draw_line(120, 44, 124, 40, BLACK);
   17160:	4643      	mov	r3, r8
   17162:	227c      	movs	r2, #124	; 0x7c
   17164:	9300      	str	r3, [sp, #0]
   17166:	212c      	movs	r1, #44	; 0x2c
   17168:	3327      	adds	r3, #39	; 0x27
   1716a:	2078      	movs	r0, #120	; 0x78
   1716c:	47b8      	blx	r7
	sprintf(display_str, "Up");
   1716e:	2203      	movs	r2, #3
   17170:	4945      	ldr	r1, [pc, #276]	; (17288 <fn_debug_backlight+0x224>)
   17172:	0020      	movs	r0, r4
   17174:	47b0      	blx	r6
	glcd_tiny_draw_string(96,0,display_str);
   17176:	0022      	movs	r2, r4
   17178:	2100      	movs	r1, #0
   1717a:	2060      	movs	r0, #96	; 0x60
   1717c:	47a8      	blx	r5
	sprintf(display_str, "Down");
   1717e:	2205      	movs	r2, #5
   17180:	4942      	ldr	r1, [pc, #264]	; (1728c <fn_debug_backlight+0x228>)
   17182:	0020      	movs	r0, r4
   17184:	47b0      	blx	r6
	glcd_tiny_draw_string(103,7,display_str);
   17186:	0022      	movs	r2, r4
   17188:	2107      	movs	r1, #7
   1718a:	2067      	movs	r0, #103	; 0x67
   1718c:	47a8      	blx	r5
	sprintf(display_str, ">");
   1718e:	2202      	movs	r2, #2
   17190:	493f      	ldr	r1, [pc, #252]	; (17290 <fn_debug_backlight+0x22c>)
   17192:	0020      	movs	r0, r4
   17194:	47b0      	blx	r6
	glcd_tiny_draw_string(10, cur_Y,display_str);
   17196:	464b      	mov	r3, r9
   17198:	0022      	movs	r2, r4
   1719a:	7819      	ldrb	r1, [r3, #0]
   1719c:	200a      	movs	r0, #10
   1719e:	47a8      	blx	r5
	glcd_write();
   171a0:	4b3c      	ldr	r3, [pc, #240]	; (17294 <fn_debug_backlight+0x230>)
   171a2:	4798      	blx	r3
}
   171a4:	b002      	add	sp, #8
   171a6:	bc1c      	pop	{r2, r3, r4}
   171a8:	4690      	mov	r8, r2
   171aa:	4699      	mov	r9, r3
   171ac:	46a2      	mov	sl, r4
   171ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
			colorRef = 'b';
   171b0:	2162      	movs	r1, #98	; 0x62
   171b2:	4b27      	ldr	r3, [pc, #156]	; (17250 <fn_debug_backlight+0x1ec>)
			break;
   171b4:	2062      	movs	r0, #98	; 0x62
			colorRef = 'b';
   171b6:	7019      	strb	r1, [r3, #0]
	switch(last_input){
   171b8:	4b26      	ldr	r3, [pc, #152]	; (17254 <fn_debug_backlight+0x1f0>)
   171ba:	781b      	ldrb	r3, [r3, #0]
   171bc:	b2db      	uxtb	r3, r3
   171be:	2b02      	cmp	r3, #2
   171c0:	d000      	beq.n	171c4 <fn_debug_backlight+0x160>
   171c2:	e774      	b.n	170ae <fn_debug_backlight+0x4a>
			backlightCustomAdjust(colorRef, 1);
   171c4:	2101      	movs	r1, #1
   171c6:	4b34      	ldr	r3, [pc, #208]	; (17298 <fn_debug_backlight+0x234>)
   171c8:	4798      	blx	r3
			break;
   171ca:	e77f      	b.n	170cc <fn_debug_backlight+0x68>
	switch(cur_Y){
   171cc:	2a02      	cmp	r2, #2
   171ce:	d000      	beq.n	171d2 <fn_debug_backlight+0x16e>
   171d0:	e763      	b.n	1709a <fn_debug_backlight+0x36>
			colorRef = 'r';
   171d2:	2172      	movs	r1, #114	; 0x72
   171d4:	4b1e      	ldr	r3, [pc, #120]	; (17250 <fn_debug_backlight+0x1ec>)
			break;
   171d6:	2072      	movs	r0, #114	; 0x72
			colorRef = 'r';
   171d8:	7019      	strb	r1, [r3, #0]
			break;
   171da:	e762      	b.n	170a2 <fn_debug_backlight+0x3e>
	switch(last_input){
   171dc:	2b01      	cmp	r3, #1
   171de:	d000      	beq.n	171e2 <fn_debug_backlight+0x17e>
   171e0:	e774      	b.n	170cc <fn_debug_backlight+0x68>
			if(cur_Y > cur_Y_low){--cur_Y; }
   171e2:	4b2e      	ldr	r3, [pc, #184]	; (1729c <fn_debug_backlight+0x238>)
   171e4:	681b      	ldr	r3, [r3, #0]
   171e6:	429a      	cmp	r2, r3
   171e8:	dc00      	bgt.n	171ec <fn_debug_backlight+0x188>
   171ea:	e76f      	b.n	170cc <fn_debug_backlight+0x68>
   171ec:	464b      	mov	r3, r9
   171ee:	3a01      	subs	r2, #1
   171f0:	601a      	str	r2, [r3, #0]
   171f2:	e76b      	b.n	170cc <fn_debug_backlight+0x68>
		cur_Y = 2;
   171f4:	4b13      	ldr	r3, [pc, #76]	; (17244 <fn_debug_backlight+0x1e0>)
   171f6:	4699      	mov	r9, r3
   171f8:	2302      	movs	r3, #2
   171fa:	464a      	mov	r2, r9
   171fc:	6013      	str	r3, [r2, #0]
		cur_Y_low = 2;
   171fe:	4a27      	ldr	r2, [pc, #156]	; (1729c <fn_debug_backlight+0x238>)
   17200:	6013      	str	r3, [r2, #0]
		cur_Y_high = 5;
   17202:	2205      	movs	r2, #5
   17204:	4b14      	ldr	r3, [pc, #80]	; (17258 <fn_debug_backlight+0x1f4>)
   17206:	601a      	str	r2, [r3, #0]
		options.backlight_setting.colorRef = 0;
   17208:	4b10      	ldr	r3, [pc, #64]	; (1724c <fn_debug_backlight+0x1e8>)
   1720a:	4698      	mov	r8, r3
   1720c:	2300      	movs	r3, #0
   1720e:	4642      	mov	r2, r8
   17210:	7493      	strb	r3, [r2, #18]
		backlightOn();
   17212:	4b23      	ldr	r3, [pc, #140]	; (172a0 <fn_debug_backlight+0x23c>)
   17214:	4798      	blx	r3
		colorPtr = backlightCustomAdjust(0, 0);
   17216:	4b20      	ldr	r3, [pc, #128]	; (17298 <fn_debug_backlight+0x234>)
   17218:	2100      	movs	r1, #0
   1721a:	2000      	movs	r0, #0
   1721c:	4798      	blx	r3
	switch(cur_Y){
   1721e:	464b      	mov	r3, r9
		colorPtr = backlightCustomAdjust(0, 0);
   17220:	4f09      	ldr	r7, [pc, #36]	; (17248 <fn_debug_backlight+0x1e4>)
	switch(cur_Y){
   17222:	681a      	ldr	r2, [r3, #0]
		colorPtr = backlightCustomAdjust(0, 0);
   17224:	6038      	str	r0, [r7, #0]
	switch(cur_Y){
   17226:	2a03      	cmp	r2, #3
   17228:	d000      	beq.n	1722c <fn_debug_backlight+0x1c8>
   1722a:	e730      	b.n	1708e <fn_debug_backlight+0x2a>
			colorRef = 'g';
   1722c:	2167      	movs	r1, #103	; 0x67
   1722e:	4b08      	ldr	r3, [pc, #32]	; (17250 <fn_debug_backlight+0x1ec>)
			break;
   17230:	2067      	movs	r0, #103	; 0x67
			colorRef = 'g';
   17232:	7019      	strb	r1, [r3, #0]
			break;
   17234:	e735      	b.n	170a2 <fn_debug_backlight+0x3e>
			backlightCustomAdjust(colorRef, -1);
   17236:	2101      	movs	r1, #1
   17238:	4b17      	ldr	r3, [pc, #92]	; (17298 <fn_debug_backlight+0x234>)
   1723a:	4249      	negs	r1, r1
   1723c:	4798      	blx	r3
			break;
   1723e:	e745      	b.n	170cc <fn_debug_backlight+0x68>
   17240:	200001d0 	.word	0x200001d0
   17244:	2000375c 	.word	0x2000375c
   17248:	20000f98 	.word	0x20000f98
   1724c:	20003770 	.word	0x20003770
   17250:	20000f9c 	.word	0x20000f9c
   17254:	200043f6 	.word	0x200043f6
   17258:	200042ac 	.word	0x200042ac
   1725c:	000130dd 	.word	0x000130dd
   17260:	200037f8 	.word	0x200037f8
   17264:	0001efe9 	.word	0x0001efe9
   17268:	00024564 	.word	0x00024564
   1726c:	00014091 	.word	0x00014091
   17270:	00024578 	.word	0x00024578
   17274:	0001f101 	.word	0x0001f101
   17278:	00024584 	.word	0x00024584
   1727c:	00024590 	.word	0x00024590
   17280:	0002459c 	.word	0x0002459c
   17284:	00013189 	.word	0x00013189
   17288:	000245a8 	.word	0x000245a8
   1728c:	000245ac 	.word	0x000245ac
   17290:	00024bfc 	.word	0x00024bfc
   17294:	000139cd 	.word	0x000139cd
   17298:	00006cd1 	.word	0x00006cd1
   1729c:	200047d0 	.word	0x200047d0
   172a0:	000072dd 	.word	0x000072dd

000172a4 <fn_menu1>:
void fn_menu1(void){
   172a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (state_change){
   172a6:	4b68      	ldr	r3, [pc, #416]	; (17448 <fn_menu1+0x1a4>)
void fn_menu1(void){
   172a8:	b083      	sub	sp, #12
	if (state_change){
   172aa:	781b      	ldrb	r3, [r3, #0]
		cur_Y=1;
   172ac:	4f67      	ldr	r7, [pc, #412]	; (1744c <fn_menu1+0x1a8>)
	if (state_change){
   172ae:	2b00      	cmp	r3, #0
   172b0:	d000      	beq.n	172b4 <fn_menu1+0x10>
   172b2:	e086      	b.n	173c2 <fn_menu1+0x11e>
   172b4:	4c66      	ldr	r4, [pc, #408]	; (17450 <fn_menu1+0x1ac>)
	glcd_tiny_set_font(Font5x7,5,7,32,127);
   172b6:	237f      	movs	r3, #127	; 0x7f
   172b8:	2207      	movs	r2, #7
   172ba:	9300      	str	r3, [sp, #0]
   172bc:	2105      	movs	r1, #5
   172be:	3b5f      	subs	r3, #95	; 0x5f
   172c0:	4864      	ldr	r0, [pc, #400]	; (17454 <fn_menu1+0x1b0>)
   172c2:	4d65      	ldr	r5, [pc, #404]	; (17458 <fn_menu1+0x1b4>)
   172c4:	47a8      	blx	r5
	glcd_clear_buffer();
   172c6:	4b65      	ldr	r3, [pc, #404]	; (1745c <fn_menu1+0x1b8>)
   172c8:	4798      	blx	r3
	switch(last_input){
   172ca:	7823      	ldrb	r3, [r4, #0]
   172cc:	b2db      	uxtb	r3, r3
   172ce:	2b02      	cmp	r3, #2
   172d0:	d100      	bne.n	172d4 <fn_menu1+0x30>
   172d2:	e09c      	b.n	1740e <fn_menu1+0x16a>
   172d4:	2b03      	cmp	r3, #3
   172d6:	d100      	bne.n	172da <fn_menu1+0x36>
   172d8:	e090      	b.n	173fc <fn_menu1+0x158>
   172da:	2b01      	cmp	r3, #1
   172dc:	d100      	bne.n	172e0 <fn_menu1+0x3c>
   172de:	e07b      	b.n	173d8 <fn_menu1+0x134>
			glcd_draw_line(116, 26, 120, 22, BLACK);
   172e0:	2501      	movs	r5, #1
   172e2:	4c5f      	ldr	r4, [pc, #380]	; (17460 <fn_menu1+0x1bc>)
   172e4:	9500      	str	r5, [sp, #0]
   172e6:	2316      	movs	r3, #22
   172e8:	2278      	movs	r2, #120	; 0x78
   172ea:	211a      	movs	r1, #26
   172ec:	2074      	movs	r0, #116	; 0x74
   172ee:	47a0      	blx	r4
			glcd_draw_line(120, 22, 124, 26, BLACK);
   172f0:	9500      	str	r5, [sp, #0]
   172f2:	231a      	movs	r3, #26
   172f4:	227c      	movs	r2, #124	; 0x7c
   172f6:	2116      	movs	r1, #22
   172f8:	2078      	movs	r0, #120	; 0x78
   172fa:	47a0      	blx	r4
			glcd_draw_line(116, 40, 120, 44, BLACK);
   172fc:	9500      	str	r5, [sp, #0]
   172fe:	232c      	movs	r3, #44	; 0x2c
   17300:	2278      	movs	r2, #120	; 0x78
   17302:	2128      	movs	r1, #40	; 0x28
   17304:	2074      	movs	r0, #116	; 0x74
   17306:	47a0      	blx	r4
			glcd_draw_line(120, 44, 124, 40, BLACK);
   17308:	2328      	movs	r3, #40	; 0x28
   1730a:	9500      	str	r5, [sp, #0]
   1730c:	227c      	movs	r2, #124	; 0x7c
   1730e:	212c      	movs	r1, #44	; 0x2c
   17310:	2078      	movs	r0, #120	; 0x78
   17312:	47a0      	blx	r4
	sprintf(display_str, "Menu:");
   17314:	4c53      	ldr	r4, [pc, #332]	; (17464 <fn_menu1+0x1c0>)
   17316:	4e54      	ldr	r6, [pc, #336]	; (17468 <fn_menu1+0x1c4>)
   17318:	2206      	movs	r2, #6
   1731a:	4954      	ldr	r1, [pc, #336]	; (1746c <fn_menu1+0x1c8>)
   1731c:	0020      	movs	r0, r4
   1731e:	47b0      	blx	r6
	glcd_tiny_draw_string(0,0,display_str);
   17320:	4d53      	ldr	r5, [pc, #332]	; (17470 <fn_menu1+0x1cc>)
   17322:	0022      	movs	r2, r4
   17324:	2100      	movs	r1, #0
   17326:	2000      	movs	r0, #0
   17328:	47a8      	blx	r5
	sprintf(display_str, "Enter");
   1732a:	2206      	movs	r2, #6
   1732c:	4951      	ldr	r1, [pc, #324]	; (17474 <fn_menu1+0x1d0>)
   1732e:	0020      	movs	r0, r4
   17330:	47b0      	blx	r6
	glcd_tiny_draw_string(96,0,display_str);
   17332:	0022      	movs	r2, r4
   17334:	2100      	movs	r1, #0
   17336:	2060      	movs	r0, #96	; 0x60
   17338:	47a8      	blx	r5
	sprintf(display_str, "Back");
   1733a:	2205      	movs	r2, #5
   1733c:	494e      	ldr	r1, [pc, #312]	; (17478 <fn_menu1+0x1d4>)
   1733e:	0020      	movs	r0, r4
   17340:	47b0      	blx	r6
	glcd_tiny_draw_string(100,7,display_str);
   17342:	0022      	movs	r2, r4
   17344:	2107      	movs	r1, #7
   17346:	2064      	movs	r0, #100	; 0x64
   17348:	47a8      	blx	r5
	sprintf(display_str, "Options");
   1734a:	2208      	movs	r2, #8
   1734c:	494b      	ldr	r1, [pc, #300]	; (1747c <fn_menu1+0x1d8>)
   1734e:	0020      	movs	r0, r4
   17350:	47b0      	blx	r6
	glcd_tiny_draw_string(10,1,display_str);
   17352:	0022      	movs	r2, r4
   17354:	2101      	movs	r1, #1
   17356:	200a      	movs	r0, #10
   17358:	47a8      	blx	r5
	sprintf(display_str, "Error Info");
   1735a:	220b      	movs	r2, #11
   1735c:	4948      	ldr	r1, [pc, #288]	; (17480 <fn_menu1+0x1dc>)
   1735e:	0020      	movs	r0, r4
   17360:	47b0      	blx	r6
	glcd_tiny_draw_string(10,2,display_str);
   17362:	0022      	movs	r2, r4
   17364:	2102      	movs	r1, #2
   17366:	200a      	movs	r0, #10
   17368:	47a8      	blx	r5
	sprintf(display_str, "Calibration");
   1736a:	220c      	movs	r2, #12
   1736c:	4945      	ldr	r1, [pc, #276]	; (17484 <fn_menu1+0x1e0>)
   1736e:	0020      	movs	r0, r4
   17370:	47b0      	blx	r6
	glcd_tiny_draw_string(10,3,display_str);
   17372:	0022      	movs	r2, r4
   17374:	2103      	movs	r1, #3
   17376:	200a      	movs	r0, #10
   17378:	47a8      	blx	r5
	sprintf(display_str, "Set Clock");
   1737a:	220a      	movs	r2, #10
   1737c:	4942      	ldr	r1, [pc, #264]	; (17488 <fn_menu1+0x1e4>)
   1737e:	0020      	movs	r0, r4
   17380:	47b0      	blx	r6
	glcd_tiny_draw_string(10,4,display_str);
   17382:	0022      	movs	r2, r4
   17384:	2104      	movs	r1, #4
   17386:	200a      	movs	r0, #10
   17388:	47a8      	blx	r5
	sprintf(display_str, "Bluetooth");
   1738a:	220a      	movs	r2, #10
   1738c:	493f      	ldr	r1, [pc, #252]	; (1748c <fn_menu1+0x1e8>)
   1738e:	0020      	movs	r0, r4
   17390:	47b0      	blx	r6
	glcd_tiny_draw_string(10,5,display_str);
   17392:	0022      	movs	r2, r4
   17394:	2105      	movs	r1, #5
   17396:	200a      	movs	r0, #10
   17398:	47a8      	blx	r5
	sprintf(display_str, "Debug Menu");
   1739a:	220b      	movs	r2, #11
   1739c:	493c      	ldr	r1, [pc, #240]	; (17490 <fn_menu1+0x1ec>)
   1739e:	0020      	movs	r0, r4
   173a0:	47b0      	blx	r6
	glcd_tiny_draw_string(10,6,display_str);
   173a2:	0022      	movs	r2, r4
   173a4:	2106      	movs	r1, #6
   173a6:	200a      	movs	r0, #10
   173a8:	47a8      	blx	r5
	sprintf(display_str, ">");
   173aa:	2202      	movs	r2, #2
   173ac:	4939      	ldr	r1, [pc, #228]	; (17494 <fn_menu1+0x1f0>)
   173ae:	0020      	movs	r0, r4
   173b0:	47b0      	blx	r6
	glcd_tiny_draw_string(3, cur_Y,display_str);
   173b2:	7839      	ldrb	r1, [r7, #0]
   173b4:	0022      	movs	r2, r4
   173b6:	2003      	movs	r0, #3
   173b8:	47a8      	blx	r5
	glcd_write();
   173ba:	4b37      	ldr	r3, [pc, #220]	; (17498 <fn_menu1+0x1f4>)
   173bc:	4798      	blx	r3
}
   173be:	b003      	add	sp, #12
   173c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		cur_Y=1;
   173c2:	2301      	movs	r3, #1
		cur_Y_low=1;
   173c4:	4a35      	ldr	r2, [pc, #212]	; (1749c <fn_menu1+0x1f8>)
		cur_Y=1;
   173c6:	603b      	str	r3, [r7, #0]
		cur_Y_low=1;
   173c8:	6013      	str	r3, [r2, #0]
		cur_Y_high=6;
   173ca:	2206      	movs	r2, #6
   173cc:	4b34      	ldr	r3, [pc, #208]	; (174a0 <fn_menu1+0x1fc>)
		last_input = input_none;
   173ce:	4c20      	ldr	r4, [pc, #128]	; (17450 <fn_menu1+0x1ac>)
		cur_Y_high=6;
   173d0:	601a      	str	r2, [r3, #0]
		last_input = input_none;
   173d2:	2300      	movs	r3, #0
   173d4:	7023      	strb	r3, [r4, #0]
   173d6:	e76e      	b.n	172b6 <fn_menu1+0x12>
			if(cur_Y == 1){ // Options
   173d8:	683b      	ldr	r3, [r7, #0]
   173da:	2b01      	cmp	r3, #1
   173dc:	d024      	beq.n	17428 <fn_menu1+0x184>
			} else if (cur_Y==2){// Error Info
   173de:	2b02      	cmp	r3, #2
   173e0:	d01e      	beq.n	17420 <fn_menu1+0x17c>
			} else if (cur_Y==3){ // Calibration
   173e2:	2b03      	cmp	r3, #3
   173e4:	d024      	beq.n	17430 <fn_menu1+0x18c>
			} else if (cur_Y==4){ // Set Clock
   173e6:	2b04      	cmp	r3, #4
   173e8:	d026      	beq.n	17438 <fn_menu1+0x194>
			} else if (cur_Y==5){ //  Bluetooth
   173ea:	2b05      	cmp	r3, #5
   173ec:	d028      	beq.n	17440 <fn_menu1+0x19c>
			} else if (cur_Y==6){ // Debug
   173ee:	2b06      	cmp	r3, #6
   173f0:	d000      	beq.n	173f4 <fn_menu1+0x150>
   173f2:	e775      	b.n	172e0 <fn_menu1+0x3c>
				current_input = input_menu_debug;
   173f4:	2217      	movs	r2, #23
   173f6:	4b2b      	ldr	r3, [pc, #172]	; (174a4 <fn_menu1+0x200>)
   173f8:	701a      	strb	r2, [r3, #0]
   173fa:	e771      	b.n	172e0 <fn_menu1+0x3c>
			if(cur_Y < cur_Y_high){++cur_Y; }
   173fc:	4a28      	ldr	r2, [pc, #160]	; (174a0 <fn_menu1+0x1fc>)
   173fe:	683b      	ldr	r3, [r7, #0]
   17400:	6812      	ldr	r2, [r2, #0]
   17402:	4293      	cmp	r3, r2
   17404:	db00      	blt.n	17408 <fn_menu1+0x164>
   17406:	e76b      	b.n	172e0 <fn_menu1+0x3c>
   17408:	3301      	adds	r3, #1
   1740a:	603b      	str	r3, [r7, #0]
   1740c:	e768      	b.n	172e0 <fn_menu1+0x3c>
			if(cur_Y > cur_Y_low){--cur_Y; }
   1740e:	4a23      	ldr	r2, [pc, #140]	; (1749c <fn_menu1+0x1f8>)
   17410:	683b      	ldr	r3, [r7, #0]
   17412:	6812      	ldr	r2, [r2, #0]
   17414:	4293      	cmp	r3, r2
   17416:	dc00      	bgt.n	1741a <fn_menu1+0x176>
   17418:	e762      	b.n	172e0 <fn_menu1+0x3c>
   1741a:	3b01      	subs	r3, #1
   1741c:	603b      	str	r3, [r7, #0]
   1741e:	e75f      	b.n	172e0 <fn_menu1+0x3c>
				current_input = input_error_info;
   17420:	220c      	movs	r2, #12
   17422:	4b20      	ldr	r3, [pc, #128]	; (174a4 <fn_menu1+0x200>)
   17424:	701a      	strb	r2, [r3, #0]
   17426:	e75b      	b.n	172e0 <fn_menu1+0x3c>
				current_input = input_set_units;
   17428:	220b      	movs	r2, #11
   1742a:	4b1e      	ldr	r3, [pc, #120]	; (174a4 <fn_menu1+0x200>)
   1742c:	701a      	strb	r2, [r3, #0]
   1742e:	e757      	b.n	172e0 <fn_menu1+0x3c>
				current_input = input_cal_menu;
   17430:	220d      	movs	r2, #13
   17432:	4b1c      	ldr	r3, [pc, #112]	; (174a4 <fn_menu1+0x200>)
   17434:	701a      	strb	r2, [r3, #0]
   17436:	e753      	b.n	172e0 <fn_menu1+0x3c>
				current_input = input_set_clock;
   17438:	2209      	movs	r2, #9
   1743a:	4b1a      	ldr	r3, [pc, #104]	; (174a4 <fn_menu1+0x200>)
   1743c:	701a      	strb	r2, [r3, #0]
   1743e:	e74f      	b.n	172e0 <fn_menu1+0x3c>
				current_input = input_set_bluetooth;
   17440:	220a      	movs	r2, #10
   17442:	4b18      	ldr	r3, [pc, #96]	; (174a4 <fn_menu1+0x200>)
   17444:	701a      	strb	r2, [r3, #0]
   17446:	e74b      	b.n	172e0 <fn_menu1+0x3c>
   17448:	200001d0 	.word	0x200001d0
   1744c:	2000375c 	.word	0x2000375c
   17450:	200043f6 	.word	0x200043f6
   17454:	00024180 	.word	0x00024180
   17458:	00014075 	.word	0x00014075
   1745c:	000130dd 	.word	0x000130dd
   17460:	00013189 	.word	0x00013189
   17464:	200037f8 	.word	0x200037f8
   17468:	0001efe9 	.word	0x0001efe9
   1746c:	00024934 	.word	0x00024934
   17470:	00014091 	.word	0x00014091
   17474:	000249fc 	.word	0x000249fc
   17478:	00024b6c 	.word	0x00024b6c
   1747c:	0002493c 	.word	0x0002493c
   17480:	00024944 	.word	0x00024944
   17484:	00024950 	.word	0x00024950
   17488:	0002495c 	.word	0x0002495c
   1748c:	00024968 	.word	0x00024968
   17490:	00024974 	.word	0x00024974
   17494:	00024bfc 	.word	0x00024bfc
   17498:	000139cd 	.word	0x000139cd
   1749c:	200047d0 	.word	0x200047d0
   174a0:	200042ac 	.word	0x200042ac
   174a4:	200043f4 	.word	0x200043f4

000174a8 <fn_set_options>:
void fn_set_options(void){
   174a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   174aa:	46ce      	mov	lr, r9
   174ac:	4647      	mov	r7, r8
   174ae:	b580      	push	{r7, lr}
	if (state_change) {
   174b0:	4b9b      	ldr	r3, [pc, #620]	; (17720 <fn_set_options+0x278>)
void fn_set_options(void){
   174b2:	b083      	sub	sp, #12
	if (state_change) {
   174b4:	781b      	ldrb	r3, [r3, #0]
   174b6:	2b00      	cmp	r3, #0
   174b8:	d100      	bne.n	174bc <fn_set_options+0x14>
   174ba:	e0b0      	b.n	1761e <fn_set_options+0x176>
		cur_Y = 1;
   174bc:	4b99      	ldr	r3, [pc, #612]	; (17724 <fn_set_options+0x27c>)
   174be:	4699      	mov	r9, r3
   174c0:	2301      	movs	r3, #1
   174c2:	464a      	mov	r2, r9
   174c4:	6013      	str	r3, [r2, #0]
		cur_Y_low = 1;
   174c6:	4a98      	ldr	r2, [pc, #608]	; (17728 <fn_set_options+0x280>)
   174c8:	6013      	str	r3, [r2, #0]
		cur_Y_high = 7;
   174ca:	4a98      	ldr	r2, [pc, #608]	; (1772c <fn_set_options+0x284>)
   174cc:	3306      	adds	r3, #6
   174ce:	6013      	str	r3, [r2, #0]
	switch(last_input){
   174d0:	4b97      	ldr	r3, [pc, #604]	; (17730 <fn_set_options+0x288>)
   174d2:	781b      	ldrb	r3, [r3, #0]
   174d4:	b2db      	uxtb	r3, r3
   174d6:	2b02      	cmp	r3, #2
   174d8:	d005      	beq.n	174e6 <fn_set_options+0x3e>
   174da:	2b03      	cmp	r3, #3
   174dc:	d100      	bne.n	174e0 <fn_set_options+0x38>
   174de:	e0c7      	b.n	17670 <fn_set_options+0x1c8>
   174e0:	2b01      	cmp	r3, #1
   174e2:	d100      	bne.n	174e6 <fn_set_options+0x3e>
   174e4:	e111      	b.n	1770a <fn_set_options+0x262>
   174e6:	4e93      	ldr	r6, [pc, #588]	; (17734 <fn_set_options+0x28c>)
	glcd_tiny_set_font(Font5x7,5,7,32,127);
   174e8:	237f      	movs	r3, #127	; 0x7f
   174ea:	2207      	movs	r2, #7
   174ec:	9300      	str	r3, [sp, #0]
   174ee:	2105      	movs	r1, #5
   174f0:	3b5f      	subs	r3, #95	; 0x5f
   174f2:	4891      	ldr	r0, [pc, #580]	; (17738 <fn_set_options+0x290>)
   174f4:	4c91      	ldr	r4, [pc, #580]	; (1773c <fn_set_options+0x294>)
   174f6:	47a0      	blx	r4
	glcd_clear_buffer();
   174f8:	4b91      	ldr	r3, [pc, #580]	; (17740 <fn_set_options+0x298>)
   174fa:	4798      	blx	r3
	if (options.current_unit_dist==feet){
   174fc:	7833      	ldrb	r3, [r6, #0]
		sprintf(display_str, "Distance:  Feet");
   174fe:	4c91      	ldr	r4, [pc, #580]	; (17744 <fn_set_options+0x29c>)
	if (options.current_unit_dist==feet){
   17500:	2b00      	cmp	r3, #0
   17502:	d000      	beq.n	17506 <fn_set_options+0x5e>
   17504:	e09e      	b.n	17644 <fn_set_options+0x19c>
		sprintf(display_str, "Distance:  Feet");
   17506:	2210      	movs	r2, #16
   17508:	498f      	ldr	r1, [pc, #572]	; (17748 <fn_set_options+0x2a0>)
   1750a:	0020      	movs	r0, r4
   1750c:	4f8f      	ldr	r7, [pc, #572]	; (1774c <fn_set_options+0x2a4>)
   1750e:	47b8      	blx	r7
	glcd_tiny_draw_string(5, 1, display_str);
   17510:	0022      	movs	r2, r4
   17512:	2101      	movs	r1, #1
   17514:	2005      	movs	r0, #5
   17516:	4d8e      	ldr	r5, [pc, #568]	; (17750 <fn_set_options+0x2a8>)
   17518:	47a8      	blx	r5
	if (options.current_unit_temp==fahrenheit){
   1751a:	7873      	ldrb	r3, [r6, #1]
   1751c:	2b05      	cmp	r3, #5
   1751e:	d100      	bne.n	17522 <fn_set_options+0x7a>
   17520:	e09e      	b.n	17660 <fn_set_options+0x1b8>
		sprintf(display_str, "Temp:  Celsius");
   17522:	220f      	movs	r2, #15
   17524:	498b      	ldr	r1, [pc, #556]	; (17754 <fn_set_options+0x2ac>)
   17526:	0020      	movs	r0, r4
   17528:	47b8      	blx	r7
	glcd_tiny_draw_string(5, 2, display_str);
   1752a:	0022      	movs	r2, r4
   1752c:	2102      	movs	r1, #2
   1752e:	2005      	movs	r0, #5
   17530:	47a8      	blx	r5
	sprintf(display_str,"Shot Delay: %d sec",options.shot_delay);
   17532:	4b89      	ldr	r3, [pc, #548]	; (17758 <fn_set_options+0x2b0>)
   17534:	78b2      	ldrb	r2, [r6, #2]
   17536:	4989      	ldr	r1, [pc, #548]	; (1775c <fn_set_options+0x2b4>)
   17538:	0020      	movs	r0, r4
   1753a:	4698      	mov	r8, r3
   1753c:	4798      	blx	r3
	glcd_tiny_draw_string(5, 3, display_str);
   1753e:	0022      	movs	r2, r4
   17540:	2103      	movs	r1, #3
   17542:	2005      	movs	r0, #5
   17544:	47a8      	blx	r5
	sprintf(display_str,"Charge Curr: %dmA",options.chargeCurrent);
   17546:	6872      	ldr	r2, [r6, #4]
   17548:	4985      	ldr	r1, [pc, #532]	; (17760 <fn_set_options+0x2b8>)
   1754a:	0020      	movs	r0, r4
   1754c:	47c0      	blx	r8
	glcd_tiny_draw_string(5, 4, display_str);
   1754e:	0022      	movs	r2, r4
   17550:	2104      	movs	r1, #4
   17552:	2005      	movs	r0, #5
   17554:	47a8      	blx	r5
	sprintf(display_str,"Err Sens: %0.2f deg", options.errorSensitivity);
   17556:	68b0      	ldr	r0, [r6, #8]
   17558:	4b82      	ldr	r3, [pc, #520]	; (17764 <fn_set_options+0x2bc>)
   1755a:	4798      	blx	r3
   1755c:	000b      	movs	r3, r1
   1755e:	0002      	movs	r2, r0
   17560:	4981      	ldr	r1, [pc, #516]	; (17768 <fn_set_options+0x2c0>)
   17562:	0020      	movs	r0, r4
   17564:	47c0      	blx	r8
	glcd_tiny_draw_string(5, 5, display_str);
   17566:	0022      	movs	r2, r4
   17568:	2105      	movs	r1, #5
   1756a:	2005      	movs	r0, #5
   1756c:	47a8      	blx	r5
	sprintf(display_str,"BL Color: %s", backlightGetCurrentColor());
   1756e:	4b7f      	ldr	r3, [pc, #508]	; (1776c <fn_set_options+0x2c4>)
   17570:	4798      	blx	r3
   17572:	497f      	ldr	r1, [pc, #508]	; (17770 <fn_set_options+0x2c8>)
   17574:	0002      	movs	r2, r0
   17576:	0020      	movs	r0, r4
   17578:	47c0      	blx	r8
	glcd_tiny_draw_string(5, 6, display_str);
   1757a:	0022      	movs	r2, r4
   1757c:	2106      	movs	r1, #6
   1757e:	2005      	movs	r0, #5
   17580:	47a8      	blx	r5
	sprintf(display_str,"BL Level: %d", options.backlight_setting.brightness);
   17582:	7b32      	ldrb	r2, [r6, #12]
   17584:	497b      	ldr	r1, [pc, #492]	; (17774 <fn_set_options+0x2cc>)
   17586:	0020      	movs	r0, r4
   17588:	47c0      	blx	r8
	glcd_tiny_draw_string(5, 7, display_str);
   1758a:	0022      	movs	r2, r4
   1758c:	2107      	movs	r1, #7
   1758e:	2005      	movs	r0, #5
   17590:	47a8      	blx	r5
	sprintf(display_str,"Options:");
   17592:	2209      	movs	r2, #9
   17594:	4978      	ldr	r1, [pc, #480]	; (17778 <fn_set_options+0x2d0>)
   17596:	0020      	movs	r0, r4
   17598:	47b8      	blx	r7
	glcd_tiny_draw_string(0,0,display_str);
   1759a:	0022      	movs	r2, r4
   1759c:	2100      	movs	r1, #0
   1759e:	2000      	movs	r0, #0
   175a0:	47a8      	blx	r5
			glcd_draw_line(116, 26, 120, 22, BLACK);
   175a2:	2301      	movs	r3, #1
   175a4:	4698      	mov	r8, r3
   175a6:	4e75      	ldr	r6, [pc, #468]	; (1777c <fn_set_options+0x2d4>)
   175a8:	9300      	str	r3, [sp, #0]
   175aa:	2278      	movs	r2, #120	; 0x78
   175ac:	3315      	adds	r3, #21
   175ae:	211a      	movs	r1, #26
   175b0:	2074      	movs	r0, #116	; 0x74
   175b2:	47b0      	blx	r6
			glcd_draw_line(120, 22, 124, 26, BLACK);
   175b4:	4643      	mov	r3, r8
   175b6:	227c      	movs	r2, #124	; 0x7c
   175b8:	9300      	str	r3, [sp, #0]
   175ba:	2116      	movs	r1, #22
   175bc:	3319      	adds	r3, #25
   175be:	2078      	movs	r0, #120	; 0x78
   175c0:	47b0      	blx	r6
			glcd_draw_line(116, 40, 120, 44, BLACK);
   175c2:	4643      	mov	r3, r8
   175c4:	2278      	movs	r2, #120	; 0x78
   175c6:	9300      	str	r3, [sp, #0]
   175c8:	2128      	movs	r1, #40	; 0x28
   175ca:	332b      	adds	r3, #43	; 0x2b
   175cc:	2074      	movs	r0, #116	; 0x74
   175ce:	47b0      	blx	r6
			glcd_draw_line(120, 44, 124, 40, BLACK);
   175d0:	4643      	mov	r3, r8
   175d2:	227c      	movs	r2, #124	; 0x7c
   175d4:	9300      	str	r3, [sp, #0]
   175d6:	212c      	movs	r1, #44	; 0x2c
   175d8:	3327      	adds	r3, #39	; 0x27
   175da:	2078      	movs	r0, #120	; 0x78
   175dc:	47b0      	blx	r6
	sprintf(display_str, "Adjust");
   175de:	2207      	movs	r2, #7
   175e0:	4967      	ldr	r1, [pc, #412]	; (17780 <fn_set_options+0x2d8>)
   175e2:	0020      	movs	r0, r4
   175e4:	47b8      	blx	r7
	glcd_tiny_draw_string(90,0,display_str);
   175e6:	0022      	movs	r2, r4
   175e8:	2100      	movs	r1, #0
   175ea:	205a      	movs	r0, #90	; 0x5a
   175ec:	47a8      	blx	r5
	sprintf(display_str, "Back");
   175ee:	2205      	movs	r2, #5
   175f0:	4964      	ldr	r1, [pc, #400]	; (17784 <fn_set_options+0x2dc>)
   175f2:	0020      	movs	r0, r4
   175f4:	47b8      	blx	r7
	glcd_tiny_draw_string(104,7,display_str);
   175f6:	0022      	movs	r2, r4
   175f8:	2107      	movs	r1, #7
   175fa:	2068      	movs	r0, #104	; 0x68
   175fc:	47a8      	blx	r5
	sprintf(display_str, ">");
   175fe:	2202      	movs	r2, #2
   17600:	4961      	ldr	r1, [pc, #388]	; (17788 <fn_set_options+0x2e0>)
   17602:	0020      	movs	r0, r4
   17604:	47b8      	blx	r7
	glcd_tiny_draw_string(0, cur_Y,display_str);
   17606:	464b      	mov	r3, r9
   17608:	0022      	movs	r2, r4
   1760a:	7819      	ldrb	r1, [r3, #0]
   1760c:	2000      	movs	r0, #0
   1760e:	47a8      	blx	r5
	glcd_write();
   17610:	4b5e      	ldr	r3, [pc, #376]	; (1778c <fn_set_options+0x2e4>)
   17612:	4798      	blx	r3
}
   17614:	b003      	add	sp, #12
   17616:	bc0c      	pop	{r2, r3}
   17618:	4690      	mov	r8, r2
   1761a:	4699      	mov	r9, r3
   1761c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch(last_input){
   1761e:	4b44      	ldr	r3, [pc, #272]	; (17730 <fn_set_options+0x288>)
   17620:	781b      	ldrb	r3, [r3, #0]
   17622:	b2db      	uxtb	r3, r3
   17624:	2b02      	cmp	r3, #2
   17626:	d032      	beq.n	1768e <fn_set_options+0x1e6>
   17628:	2b03      	cmp	r3, #3
   1762a:	d01e      	beq.n	1766a <fn_set_options+0x1c2>
   1762c:	2b01      	cmp	r3, #1
   1762e:	d12a      	bne.n	17686 <fn_set_options+0x1de>
			switch (cur_Y){
   17630:	4b3c      	ldr	r3, [pc, #240]	; (17724 <fn_set_options+0x27c>)
   17632:	4699      	mov	r9, r3
   17634:	681b      	ldr	r3, [r3, #0]
   17636:	2b07      	cmp	r3, #7
   17638:	d900      	bls.n	1763c <fn_set_options+0x194>
   1763a:	e754      	b.n	174e6 <fn_set_options+0x3e>
   1763c:	4a54      	ldr	r2, [pc, #336]	; (17790 <fn_set_options+0x2e8>)
   1763e:	009b      	lsls	r3, r3, #2
   17640:	58d3      	ldr	r3, [r2, r3]
   17642:	469f      	mov	pc, r3
		sprintf(display_str, "Distance:  Meters");
   17644:	2212      	movs	r2, #18
   17646:	4953      	ldr	r1, [pc, #332]	; (17794 <fn_set_options+0x2ec>)
   17648:	0020      	movs	r0, r4
   1764a:	4f40      	ldr	r7, [pc, #256]	; (1774c <fn_set_options+0x2a4>)
   1764c:	47b8      	blx	r7
	glcd_tiny_draw_string(5, 1, display_str);
   1764e:	0022      	movs	r2, r4
   17650:	2101      	movs	r1, #1
   17652:	2005      	movs	r0, #5
   17654:	4d3e      	ldr	r5, [pc, #248]	; (17750 <fn_set_options+0x2a8>)
   17656:	47a8      	blx	r5
	if (options.current_unit_temp==fahrenheit){
   17658:	7873      	ldrb	r3, [r6, #1]
   1765a:	2b05      	cmp	r3, #5
   1765c:	d000      	beq.n	17660 <fn_set_options+0x1b8>
   1765e:	e760      	b.n	17522 <fn_set_options+0x7a>
		sprintf(display_str, "Temp:  Fahrenheit");
   17660:	2212      	movs	r2, #18
   17662:	494d      	ldr	r1, [pc, #308]	; (17798 <fn_set_options+0x2f0>)
   17664:	0020      	movs	r0, r4
   17666:	47b8      	blx	r7
   17668:	e75f      	b.n	1752a <fn_set_options+0x82>
   1766a:	4b2e      	ldr	r3, [pc, #184]	; (17724 <fn_set_options+0x27c>)
   1766c:	4a2f      	ldr	r2, [pc, #188]	; (1772c <fn_set_options+0x284>)
   1766e:	4699      	mov	r9, r3
			if(cur_Y < cur_Y_high){++cur_Y; }
   17670:	464b      	mov	r3, r9
   17672:	6812      	ldr	r2, [r2, #0]
   17674:	681b      	ldr	r3, [r3, #0]
   17676:	4293      	cmp	r3, r2
   17678:	db00      	blt.n	1767c <fn_set_options+0x1d4>
   1767a:	e734      	b.n	174e6 <fn_set_options+0x3e>
   1767c:	464a      	mov	r2, r9
   1767e:	3301      	adds	r3, #1
   17680:	6013      	str	r3, [r2, #0]
   17682:	4e2c      	ldr	r6, [pc, #176]	; (17734 <fn_set_options+0x28c>)
   17684:	e730      	b.n	174e8 <fn_set_options+0x40>
   17686:	4b27      	ldr	r3, [pc, #156]	; (17724 <fn_set_options+0x27c>)
   17688:	4e2a      	ldr	r6, [pc, #168]	; (17734 <fn_set_options+0x28c>)
   1768a:	4699      	mov	r9, r3
   1768c:	e72c      	b.n	174e8 <fn_set_options+0x40>
   1768e:	4b25      	ldr	r3, [pc, #148]	; (17724 <fn_set_options+0x27c>)
			if(cur_Y > cur_Y_low){--cur_Y; }
   17690:	4a25      	ldr	r2, [pc, #148]	; (17728 <fn_set_options+0x280>)
   17692:	4699      	mov	r9, r3
   17694:	6812      	ldr	r2, [r2, #0]
   17696:	681b      	ldr	r3, [r3, #0]
   17698:	429a      	cmp	r2, r3
   1769a:	db00      	blt.n	1769e <fn_set_options+0x1f6>
   1769c:	e723      	b.n	174e6 <fn_set_options+0x3e>
   1769e:	464a      	mov	r2, r9
   176a0:	3b01      	subs	r3, #1
   176a2:	6013      	str	r3, [r2, #0]
   176a4:	4e23      	ldr	r6, [pc, #140]	; (17734 <fn_set_options+0x28c>)
   176a6:	e71f      	b.n	174e8 <fn_set_options+0x40>
					backlightLevelToggle();
   176a8:	4b3c      	ldr	r3, [pc, #240]	; (1779c <fn_set_options+0x2f4>)
   176aa:	4798      	blx	r3
					save_user_settings();
   176ac:	4b3c      	ldr	r3, [pc, #240]	; (177a0 <fn_set_options+0x2f8>)
   176ae:	4798      	blx	r3
   176b0:	e719      	b.n	174e6 <fn_set_options+0x3e>
					if (options.current_unit_temp == celsius){ options.current_unit_temp = fahrenheit;}
   176b2:	4e20      	ldr	r6, [pc, #128]	; (17734 <fn_set_options+0x28c>)
   176b4:	7873      	ldrb	r3, [r6, #1]
   176b6:	3b04      	subs	r3, #4
   176b8:	4259      	negs	r1, r3
   176ba:	4159      	adcs	r1, r3
   176bc:	1d0b      	adds	r3, r1, #4
   176be:	7073      	strb	r3, [r6, #1]
					save_user_settings();
   176c0:	4b37      	ldr	r3, [pc, #220]	; (177a0 <fn_set_options+0x2f8>)
   176c2:	4798      	blx	r3
					break;
   176c4:	e710      	b.n	174e8 <fn_set_options+0x40>
					options.shot_delay = options.shot_delay+1;
   176c6:	4e1b      	ldr	r6, [pc, #108]	; (17734 <fn_set_options+0x28c>)
   176c8:	78b3      	ldrb	r3, [r6, #2]
   176ca:	3301      	adds	r3, #1
   176cc:	b2db      	uxtb	r3, r3
					if (options.shot_delay>shot_delay_max){options.shot_delay = 0;}
   176ce:	2b05      	cmp	r3, #5
   176d0:	d900      	bls.n	176d4 <fn_set_options+0x22c>
   176d2:	2300      	movs	r3, #0
   176d4:	70b3      	strb	r3, [r6, #2]
   176d6:	e009      	b.n	176ec <fn_set_options+0x244>
					if (options.chargeCurrent == 500){ options.chargeCurrent = 100;}
   176d8:	23fa      	movs	r3, #250	; 0xfa
   176da:	4e16      	ldr	r6, [pc, #88]	; (17734 <fn_set_options+0x28c>)
   176dc:	005b      	lsls	r3, r3, #1
   176de:	6871      	ldr	r1, [r6, #4]
					else{options.chargeCurrent = 500;}
   176e0:	001a      	movs	r2, r3
					if (options.chargeCurrent == 500){ options.chargeCurrent = 100;}
   176e2:	4299      	cmp	r1, r3
   176e4:	d019      	beq.n	1771a <fn_set_options+0x272>
					setup_charger();
   176e6:	4b2f      	ldr	r3, [pc, #188]	; (177a4 <fn_set_options+0x2fc>)
   176e8:	6072      	str	r2, [r6, #4]
   176ea:	4798      	blx	r3
					save_user_settings();
   176ec:	4b2c      	ldr	r3, [pc, #176]	; (177a0 <fn_set_options+0x2f8>)
   176ee:	4798      	blx	r3
					break;
   176f0:	e6fa      	b.n	174e8 <fn_set_options+0x40>
					adjustErrorSensitivity();
   176f2:	4b2d      	ldr	r3, [pc, #180]	; (177a8 <fn_set_options+0x300>)
   176f4:	4798      	blx	r3
					save_user_settings();
   176f6:	4b2a      	ldr	r3, [pc, #168]	; (177a0 <fn_set_options+0x2f8>)
   176f8:	4798      	blx	r3
   176fa:	4e0e      	ldr	r6, [pc, #56]	; (17734 <fn_set_options+0x28c>)
					break;	
   176fc:	e6f4      	b.n	174e8 <fn_set_options+0x40>
					backlightColorToggle();					
   176fe:	4b2b      	ldr	r3, [pc, #172]	; (177ac <fn_set_options+0x304>)
   17700:	4798      	blx	r3
					save_user_settings();
   17702:	4b27      	ldr	r3, [pc, #156]	; (177a0 <fn_set_options+0x2f8>)
   17704:	4798      	blx	r3
   17706:	4e0b      	ldr	r6, [pc, #44]	; (17734 <fn_set_options+0x28c>)
					break;
   17708:	e6ee      	b.n	174e8 <fn_set_options+0x40>
   1770a:	4e0a      	ldr	r6, [pc, #40]	; (17734 <fn_set_options+0x28c>)
					if (options.current_unit_dist == feet){ options.current_unit_dist = meters;}
   1770c:	7832      	ldrb	r2, [r6, #0]
   1770e:	4253      	negs	r3, r2
   17710:	4153      	adcs	r3, r2
   17712:	7033      	strb	r3, [r6, #0]
					save_user_settings();
   17714:	4b22      	ldr	r3, [pc, #136]	; (177a0 <fn_set_options+0x2f8>)
   17716:	4798      	blx	r3
					break;
   17718:	e6e6      	b.n	174e8 <fn_set_options+0x40>
					if (options.chargeCurrent == 500){ options.chargeCurrent = 100;}
   1771a:	3a91      	subs	r2, #145	; 0x91
   1771c:	3aff      	subs	r2, #255	; 0xff
   1771e:	e7e2      	b.n	176e6 <fn_set_options+0x23e>
   17720:	200001d0 	.word	0x200001d0
   17724:	2000375c 	.word	0x2000375c
   17728:	200047d0 	.word	0x200047d0
   1772c:	200042ac 	.word	0x200042ac
   17730:	200043f6 	.word	0x200043f6
   17734:	20003770 	.word	0x20003770
   17738:	00024180 	.word	0x00024180
   1773c:	00014075 	.word	0x00014075
   17740:	000130dd 	.word	0x000130dd
   17744:	200037f8 	.word	0x200037f8
   17748:	00024c00 	.word	0x00024c00
   1774c:	0001efe9 	.word	0x0001efe9
   17750:	00014091 	.word	0x00014091
   17754:	00024c38 	.word	0x00024c38
   17758:	0001f101 	.word	0x0001f101
   1775c:	00024c48 	.word	0x00024c48
   17760:	00024c5c 	.word	0x00024c5c
   17764:	0001eddd 	.word	0x0001eddd
   17768:	00024c70 	.word	0x00024c70
   1776c:	000072c5 	.word	0x000072c5
   17770:	00024c84 	.word	0x00024c84
   17774:	00024c94 	.word	0x00024c94
   17778:	00024ca4 	.word	0x00024ca4
   1777c:	00013189 	.word	0x00013189
   17780:	00024cb0 	.word	0x00024cb0
   17784:	00024b6c 	.word	0x00024b6c
   17788:	00024bfc 	.word	0x00024bfc
   1778c:	000139cd 	.word	0x000139cd
   17790:	00024118 	.word	0x00024118
   17794:	00024c10 	.word	0x00024c10
   17798:	00024c24 	.word	0x00024c24
   1779c:	0000719d 	.word	0x0000719d
   177a0:	00007add 	.word	0x00007add
   177a4:	000075b5 	.word	0x000075b5
   177a8:	00008889 	.word	0x00008889
   177ac:	00006e4d 	.word	0x00006e4d

000177b0 <fn_error_info>:
void fn_error_info(void){
   177b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   177b2:	46de      	mov	lr, fp
   177b4:	4657      	mov	r7, sl
   177b6:	464e      	mov	r6, r9
   177b8:	4645      	mov	r5, r8
   177ba:	b5e0      	push	{r5, r6, r7, lr}
	if (state_change){ // Perform first time entering function
   177bc:	4bd4      	ldr	r3, [pc, #848]	; (17b10 <fn_error_info+0x360>)
void fn_error_info(void){
   177be:	b083      	sub	sp, #12
	if (state_change){ // Perform first time entering function
   177c0:	7819      	ldrb	r1, [r3, #0]
   177c2:	b2c9      	uxtb	r1, r1
   177c4:	2900      	cmp	r1, #0
   177c6:	d100      	bne.n	177ca <fn_error_info+0x1a>
   177c8:	e09a      	b.n	17900 <fn_error_info+0x150>
		shot_list_ind = 0;
   177ca:	2300      	movs	r3, #0
		nshots = 0;
   177cc:	4ad1      	ldr	r2, [pc, #836]	; (17b14 <fn_error_info+0x364>)
		shot_list_ind = 0;
   177ce:	4cd2      	ldr	r4, [pc, #840]	; (17b18 <fn_error_info+0x368>)
		nshots = 0;
   177d0:	7013      	strb	r3, [r2, #0]
   177d2:	4690      	mov	r8, r2
			if (data_buf[temp_buf_ind].num_errors>0){
   177d4:	22a8      	movs	r2, #168	; 0xa8
		shot_list_ind = 0;
   177d6:	7023      	strb	r3, [r4, #0]
		temp_buf_ind = data_buf_ind;
   177d8:	4bd0      	ldr	r3, [pc, #832]	; (17b1c <fn_error_info+0x36c>)
			if (data_buf[temp_buf_ind].num_errors>0){
   177da:	4ed1      	ldr	r6, [pc, #836]	; (17b20 <fn_error_info+0x370>)
		temp_buf_ind = data_buf_ind;
   177dc:	781b      	ldrb	r3, [r3, #0]
			if (data_buf[temp_buf_ind].num_errors>0){
   177de:	435a      	muls	r2, r3
   177e0:	18b2      	adds	r2, r6, r2
   177e2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
   177e4:	2a00      	cmp	r2, #0
   177e6:	d000      	beq.n	177ea <fn_error_info+0x3a>
   177e8:	e0de      	b.n	179a8 <fn_error_info+0x1f8>
   177ea:	2000      	movs	r0, #0
   177ec:	2200      	movs	r2, #0
			if (temp_buf_ind == 0){ temp_buf_ind = buf_length-1;}//  Buffer wrap-around
   177ee:	2b00      	cmp	r3, #0
   177f0:	d100      	bne.n	177f4 <fn_error_info+0x44>
   177f2:	e0e0      	b.n	179b6 <fn_error_info+0x206>
			if (data_buf[temp_buf_ind].num_errors>0){
   177f4:	25a8      	movs	r5, #168	; 0xa8
			else {temp_buf_ind--;}
   177f6:	3b01      	subs	r3, #1
   177f8:	b2db      	uxtb	r3, r3
			if (data_buf[temp_buf_ind].num_errors>0){
   177fa:	435d      	muls	r5, r3
   177fc:	1975      	adds	r5, r6, r5
   177fe:	6ded      	ldr	r5, [r5, #92]	; 0x5c
   17800:	2d00      	cmp	r5, #0
   17802:	d000      	beq.n	17806 <fn_error_info+0x56>
   17804:	e0dd      	b.n	179c2 <fn_error_info+0x212>
			if (temp_buf_ind == 0){ temp_buf_ind = buf_length-1;}//  Buffer wrap-around
   17806:	2b00      	cmp	r3, #0
   17808:	d000      	beq.n	1780c <fn_error_info+0x5c>
   1780a:	e0e2      	b.n	179d2 <fn_error_info+0x222>
			if (data_buf[temp_buf_ind].num_errors>0){
   1780c:	4bc5      	ldr	r3, [pc, #788]	; (17b24 <fn_error_info+0x374>)
   1780e:	58f3      	ldr	r3, [r6, r3]
   17810:	2b00      	cmp	r3, #0
   17812:	d100      	bne.n	17816 <fn_error_info+0x66>
   17814:	e13c      	b.n	17a90 <fn_error_info+0x2e0>
			if (temp_buf_ind == 0){ temp_buf_ind = buf_length-1;}//  Buffer wrap-around
   17816:	2309      	movs	r3, #9
				shot_list[shot_list_ind] = temp_buf_ind;
   17818:	48c3      	ldr	r0, [pc, #780]	; (17b28 <fn_error_info+0x378>)
   1781a:	5483      	strb	r3, [r0, r2]
				shot_list_ind++;
   1781c:	0008      	movs	r0, r1
   1781e:	3201      	adds	r2, #1
   17820:	b2d2      	uxtb	r2, r2
			if (temp_buf_ind == 0){ temp_buf_ind = buf_length-1;}//  Buffer wrap-around
   17822:	2b00      	cmp	r3, #0
   17824:	d000      	beq.n	17828 <fn_error_info+0x78>
   17826:	e134      	b.n	17a92 <fn_error_info+0x2e2>
			if (data_buf[temp_buf_ind].num_errors>0){
   17828:	4bbe      	ldr	r3, [pc, #760]	; (17b24 <fn_error_info+0x374>)
   1782a:	58f3      	ldr	r3, [r6, r3]
   1782c:	2b00      	cmp	r3, #0
   1782e:	d100      	bne.n	17832 <fn_error_info+0x82>
   17830:	e13e      	b.n	17ab0 <fn_error_info+0x300>
			if (temp_buf_ind == 0){ temp_buf_ind = buf_length-1;}//  Buffer wrap-around
   17832:	2309      	movs	r3, #9
				shot_list[shot_list_ind] = temp_buf_ind;
   17834:	48bc      	ldr	r0, [pc, #752]	; (17b28 <fn_error_info+0x378>)
   17836:	5483      	strb	r3, [r0, r2]
				shot_list_ind++;
   17838:	0008      	movs	r0, r1
   1783a:	3201      	adds	r2, #1
   1783c:	b2d2      	uxtb	r2, r2
			if (temp_buf_ind == 0){ temp_buf_ind = buf_length-1;}//  Buffer wrap-around
   1783e:	2b00      	cmp	r3, #0
   17840:	d000      	beq.n	17844 <fn_error_info+0x94>
   17842:	e136      	b.n	17ab2 <fn_error_info+0x302>
			if (data_buf[temp_buf_ind].num_errors>0){
   17844:	4bb7      	ldr	r3, [pc, #732]	; (17b24 <fn_error_info+0x374>)
   17846:	58f3      	ldr	r3, [r6, r3]
   17848:	2b00      	cmp	r3, #0
   1784a:	d100      	bne.n	1784e <fn_error_info+0x9e>
   1784c:	e140      	b.n	17ad0 <fn_error_info+0x320>
			if (temp_buf_ind == 0){ temp_buf_ind = buf_length-1;}//  Buffer wrap-around
   1784e:	2309      	movs	r3, #9
				shot_list[shot_list_ind] = temp_buf_ind;
   17850:	48b5      	ldr	r0, [pc, #724]	; (17b28 <fn_error_info+0x378>)
   17852:	5483      	strb	r3, [r0, r2]
				shot_list_ind++;
   17854:	0008      	movs	r0, r1
   17856:	3201      	adds	r2, #1
   17858:	b2d2      	uxtb	r2, r2
			if (temp_buf_ind == 0){ temp_buf_ind = buf_length-1;}//  Buffer wrap-around
   1785a:	2b00      	cmp	r3, #0
   1785c:	d000      	beq.n	17860 <fn_error_info+0xb0>
   1785e:	e138      	b.n	17ad2 <fn_error_info+0x322>
			if (data_buf[temp_buf_ind].num_errors>0){
   17860:	4bb0      	ldr	r3, [pc, #704]	; (17b24 <fn_error_info+0x374>)
   17862:	58f3      	ldr	r3, [r6, r3]
   17864:	2b00      	cmp	r3, #0
   17866:	d100      	bne.n	1786a <fn_error_info+0xba>
   17868:	e142      	b.n	17af0 <fn_error_info+0x340>
			if (temp_buf_ind == 0){ temp_buf_ind = buf_length-1;}//  Buffer wrap-around
   1786a:	2309      	movs	r3, #9
				shot_list[shot_list_ind] = temp_buf_ind;
   1786c:	48ae      	ldr	r0, [pc, #696]	; (17b28 <fn_error_info+0x378>)
   1786e:	5483      	strb	r3, [r0, r2]
				shot_list_ind++;
   17870:	0008      	movs	r0, r1
   17872:	3201      	adds	r2, #1
   17874:	b2d2      	uxtb	r2, r2
			if (temp_buf_ind == 0){ temp_buf_ind = buf_length-1;}//  Buffer wrap-around
   17876:	2b00      	cmp	r3, #0
   17878:	d000      	beq.n	1787c <fn_error_info+0xcc>
   1787a:	e13a      	b.n	17af2 <fn_error_info+0x342>
			if (data_buf[temp_buf_ind].num_errors>0){
   1787c:	4ba9      	ldr	r3, [pc, #676]	; (17b24 <fn_error_info+0x374>)
   1787e:	58f3      	ldr	r3, [r6, r3]
   17880:	2b00      	cmp	r3, #0
   17882:	d100      	bne.n	17886 <fn_error_info+0xd6>
   17884:	e174      	b.n	17b70 <fn_error_info+0x3c0>
			if (temp_buf_ind == 0){ temp_buf_ind = buf_length-1;}//  Buffer wrap-around
   17886:	2309      	movs	r3, #9
				shot_list[shot_list_ind] = temp_buf_ind;
   17888:	48a7      	ldr	r0, [pc, #668]	; (17b28 <fn_error_info+0x378>)
   1788a:	5483      	strb	r3, [r0, r2]
				shot_list_ind++;
   1788c:	0008      	movs	r0, r1
   1788e:	3201      	adds	r2, #1
   17890:	b2d2      	uxtb	r2, r2
			if (temp_buf_ind == 0){ temp_buf_ind = buf_length-1;}//  Buffer wrap-around
   17892:	2b00      	cmp	r3, #0
   17894:	d000      	beq.n	17898 <fn_error_info+0xe8>
   17896:	e16c      	b.n	17b72 <fn_error_info+0x3c2>
			if (data_buf[temp_buf_ind].num_errors>0){
   17898:	4ba2      	ldr	r3, [pc, #648]	; (17b24 <fn_error_info+0x374>)
   1789a:	58f3      	ldr	r3, [r6, r3]
   1789c:	2b00      	cmp	r3, #0
   1789e:	d100      	bne.n	178a2 <fn_error_info+0xf2>
   178a0:	e176      	b.n	17b90 <fn_error_info+0x3e0>
			if (temp_buf_ind == 0){ temp_buf_ind = buf_length-1;}//  Buffer wrap-around
   178a2:	2309      	movs	r3, #9
				shot_list[shot_list_ind] = temp_buf_ind;
   178a4:	48a0      	ldr	r0, [pc, #640]	; (17b28 <fn_error_info+0x378>)
   178a6:	5483      	strb	r3, [r0, r2]
				shot_list_ind++;
   178a8:	0008      	movs	r0, r1
   178aa:	3201      	adds	r2, #1
   178ac:	b2d2      	uxtb	r2, r2
			if (temp_buf_ind == 0){ temp_buf_ind = buf_length-1;}//  Buffer wrap-around
   178ae:	2b00      	cmp	r3, #0
   178b0:	d000      	beq.n	178b4 <fn_error_info+0x104>
   178b2:	e16e      	b.n	17b92 <fn_error_info+0x3e2>
			if (data_buf[temp_buf_ind].num_errors>0){
   178b4:	4b9b      	ldr	r3, [pc, #620]	; (17b24 <fn_error_info+0x374>)
   178b6:	58f3      	ldr	r3, [r6, r3]
   178b8:	2b00      	cmp	r3, #0
   178ba:	d100      	bne.n	178be <fn_error_info+0x10e>
   178bc:	e178      	b.n	17bb0 <fn_error_info+0x400>
			if (temp_buf_ind == 0){ temp_buf_ind = buf_length-1;}//  Buffer wrap-around
   178be:	2309      	movs	r3, #9
				shot_list[shot_list_ind] = temp_buf_ind;
   178c0:	4899      	ldr	r0, [pc, #612]	; (17b28 <fn_error_info+0x378>)
   178c2:	5483      	strb	r3, [r0, r2]
				shot_list_ind++;
   178c4:	0008      	movs	r0, r1
   178c6:	3201      	adds	r2, #1
   178c8:	b2d2      	uxtb	r2, r2
			if (temp_buf_ind == 0){ temp_buf_ind = buf_length-1;}//  Buffer wrap-around
   178ca:	2b00      	cmp	r3, #0
   178cc:	d000      	beq.n	178d0 <fn_error_info+0x120>
   178ce:	e170      	b.n	17bb2 <fn_error_info+0x402>
			if (data_buf[temp_buf_ind].num_errors>0){
   178d0:	4b94      	ldr	r3, [pc, #592]	; (17b24 <fn_error_info+0x374>)
   178d2:	58f3      	ldr	r3, [r6, r3]
   178d4:	2b00      	cmp	r3, #0
   178d6:	d000      	beq.n	178da <fn_error_info+0x12a>
   178d8:	e189      	b.n	17bee <fn_error_info+0x43e>
   178da:	0001      	movs	r1, r0
   178dc:	2900      	cmp	r1, #0
   178de:	d000      	beq.n	178e2 <fn_error_info+0x132>
   178e0:	e177      	b.n	17bd2 <fn_error_info+0x422>
		shot_list_ind = 0;
   178e2:	2200      	movs	r2, #0
		last_input = input_none;
   178e4:	4b91      	ldr	r3, [pc, #580]	; (17b2c <fn_error_info+0x37c>)
		shot_list_ind = 0;
   178e6:	7022      	strb	r2, [r4, #0]
		last_input = input_none;
   178e8:	701a      	strb	r2, [r3, #0]
	switch(last_input){
   178ea:	781b      	ldrb	r3, [r3, #0]
   178ec:	2b03      	cmp	r3, #3
   178ee:	d113      	bne.n	17918 <fn_error_info+0x168>
   178f0:	2300      	movs	r3, #0
			if(shot_list_ind<nshots){
   178f2:	4642      	mov	r2, r8
   178f4:	7812      	ldrb	r2, [r2, #0]
   178f6:	429a      	cmp	r2, r3
   178f8:	d90e      	bls.n	17918 <fn_error_info+0x168>
				shot_list_ind++;
   178fa:	3301      	adds	r3, #1
   178fc:	7023      	strb	r3, [r4, #0]
   178fe:	e00b      	b.n	17918 <fn_error_info+0x168>
	switch(last_input){
   17900:	4b8a      	ldr	r3, [pc, #552]	; (17b2c <fn_error_info+0x37c>)
			if(shot_list_ind>0){
   17902:	4c85      	ldr	r4, [pc, #532]	; (17b18 <fn_error_info+0x368>)
	switch(last_input){
   17904:	781b      	ldrb	r3, [r3, #0]
   17906:	b2db      	uxtb	r3, r3
   17908:	2b02      	cmp	r3, #2
   1790a:	d100      	bne.n	1790e <fn_error_info+0x15e>
   1790c:	e164      	b.n	17bd8 <fn_error_info+0x428>
   1790e:	2b03      	cmp	r3, #3
   17910:	d100      	bne.n	17914 <fn_error_info+0x164>
   17912:	e168      	b.n	17be6 <fn_error_info+0x436>
   17914:	4b7f      	ldr	r3, [pc, #508]	; (17b14 <fn_error_info+0x364>)
   17916:	4698      	mov	r8, r3
	glcd_tiny_set_font(Font5x7,5,7,32,127);
   17918:	237f      	movs	r3, #127	; 0x7f
   1791a:	2207      	movs	r2, #7
   1791c:	2105      	movs	r1, #5
   1791e:	4884      	ldr	r0, [pc, #528]	; (17b30 <fn_error_info+0x380>)
   17920:	9300      	str	r3, [sp, #0]
   17922:	4d84      	ldr	r5, [pc, #528]	; (17b34 <fn_error_info+0x384>)
   17924:	3b5f      	subs	r3, #95	; 0x5f
   17926:	47a8      	blx	r5
	glcd_clear_buffer();
   17928:	4b83      	ldr	r3, [pc, #524]	; (17b38 <fn_error_info+0x388>)
   1792a:	4798      	blx	r3
	sprintf(display_str,"Error Information:");
   1792c:	4d83      	ldr	r5, [pc, #524]	; (17b3c <fn_error_info+0x38c>)
   1792e:	4b84      	ldr	r3, [pc, #528]	; (17b40 <fn_error_info+0x390>)
   17930:	2213      	movs	r2, #19
   17932:	4984      	ldr	r1, [pc, #528]	; (17b44 <fn_error_info+0x394>)
   17934:	0028      	movs	r0, r5
   17936:	469b      	mov	fp, r3
   17938:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   1793a:	002a      	movs	r2, r5
   1793c:	2100      	movs	r1, #0
   1793e:	2000      	movs	r0, #0
   17940:	4f81      	ldr	r7, [pc, #516]	; (17b48 <fn_error_info+0x398>)
   17942:	47b8      	blx	r7
	sprintf(display_str, "Back");
   17944:	2205      	movs	r2, #5
   17946:	4981      	ldr	r1, [pc, #516]	; (17b4c <fn_error_info+0x39c>)
   17948:	0028      	movs	r0, r5
   1794a:	47d8      	blx	fp
	glcd_tiny_draw_string(90,7,display_str);
   1794c:	002a      	movs	r2, r5
   1794e:	2107      	movs	r1, #7
   17950:	205a      	movs	r0, #90	; 0x5a
   17952:	47b8      	blx	r7
	if(shot_list_ind>0){draw_arrows(2);}
   17954:	7823      	ldrb	r3, [r4, #0]
   17956:	2b00      	cmp	r3, #0
   17958:	d000      	beq.n	1795c <fn_error_info+0x1ac>
   1795a:	e087      	b.n	17a6c <fn_error_info+0x2bc>
	if(shot_list_ind<nshots){draw_arrows(3);}
   1795c:	4642      	mov	r2, r8
   1795e:	7812      	ldrb	r2, [r2, #0]
   17960:	429a      	cmp	r2, r3
   17962:	d845      	bhi.n	179f0 <fn_error_info+0x240>
		sprintf(display_str,"No Additional Errors");
   17964:	2215      	movs	r2, #21
   17966:	497a      	ldr	r1, [pc, #488]	; (17b50 <fn_error_info+0x3a0>)
   17968:	0028      	movs	r0, r5
   1796a:	47d8      	blx	fp
		glcd_tiny_draw_string(8,1,display_str);
   1796c:	002a      	movs	r2, r5
   1796e:	2101      	movs	r1, #1
   17970:	2008      	movs	r0, #8
   17972:	47b8      	blx	r7
		sprintf(display_str,"to Report in Last");
   17974:	2212      	movs	r2, #18
   17976:	4977      	ldr	r1, [pc, #476]	; (17b54 <fn_error_info+0x3a4>)
   17978:	0028      	movs	r0, r5
   1797a:	47d8      	blx	fp
		glcd_tiny_draw_string(8,2,display_str);
   1797c:	002a      	movs	r2, r5
   1797e:	2102      	movs	r1, #2
   17980:	2008      	movs	r0, #8
   17982:	47b8      	blx	r7
		sprintf(display_str,"%d Measurements", buf_length);
   17984:	220a      	movs	r2, #10
   17986:	4974      	ldr	r1, [pc, #464]	; (17b58 <fn_error_info+0x3a8>)
   17988:	0028      	movs	r0, r5
   1798a:	4b74      	ldr	r3, [pc, #464]	; (17b5c <fn_error_info+0x3ac>)
   1798c:	4798      	blx	r3
		glcd_tiny_draw_string(8,3,display_str);
   1798e:	002a      	movs	r2, r5
   17990:	2103      	movs	r1, #3
   17992:	2008      	movs	r0, #8
   17994:	47b8      	blx	r7
	glcd_write();
   17996:	4b72      	ldr	r3, [pc, #456]	; (17b60 <fn_error_info+0x3b0>)
   17998:	4798      	blx	r3
}
   1799a:	b003      	add	sp, #12
   1799c:	bc3c      	pop	{r2, r3, r4, r5}
   1799e:	4690      	mov	r8, r2
   179a0:	4699      	mov	r9, r3
   179a2:	46a2      	mov	sl, r4
   179a4:	46ab      	mov	fp, r5
   179a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				shot_list[shot_list_ind] = temp_buf_ind;
   179a8:	4a5f      	ldr	r2, [pc, #380]	; (17b28 <fn_error_info+0x378>)
   179aa:	0008      	movs	r0, r1
   179ac:	7013      	strb	r3, [r2, #0]
				shot_list_ind++;
   179ae:	2201      	movs	r2, #1
			if (temp_buf_ind == 0){ temp_buf_ind = buf_length-1;}//  Buffer wrap-around
   179b0:	2b00      	cmp	r3, #0
   179b2:	d000      	beq.n	179b6 <fn_error_info+0x206>
   179b4:	e71e      	b.n	177f4 <fn_error_info+0x44>
			if (data_buf[temp_buf_ind].num_errors>0){
   179b6:	4b5b      	ldr	r3, [pc, #364]	; (17b24 <fn_error_info+0x374>)
   179b8:	58f3      	ldr	r3, [r6, r3]
   179ba:	2b00      	cmp	r3, #0
   179bc:	d100      	bne.n	179c0 <fn_error_info+0x210>
   179be:	e11f      	b.n	17c00 <fn_error_info+0x450>
			if (temp_buf_ind == 0){ temp_buf_ind = buf_length-1;}//  Buffer wrap-around
   179c0:	2309      	movs	r3, #9
				shot_list[shot_list_ind] = temp_buf_ind;
   179c2:	4859      	ldr	r0, [pc, #356]	; (17b28 <fn_error_info+0x378>)
   179c4:	5483      	strb	r3, [r0, r2]
				shot_list_ind++;
   179c6:	3201      	adds	r2, #1
   179c8:	b2d2      	uxtb	r2, r2
   179ca:	0008      	movs	r0, r1
			if (temp_buf_ind == 0){ temp_buf_ind = buf_length-1;}//  Buffer wrap-around
   179cc:	2b00      	cmp	r3, #0
   179ce:	d100      	bne.n	179d2 <fn_error_info+0x222>
   179d0:	e71c      	b.n	1780c <fn_error_info+0x5c>
			if (data_buf[temp_buf_ind].num_errors>0){
   179d2:	25a8      	movs	r5, #168	; 0xa8
			else {temp_buf_ind--;}
   179d4:	3b01      	subs	r3, #1
   179d6:	b2db      	uxtb	r3, r3
			if (data_buf[temp_buf_ind].num_errors>0){
   179d8:	435d      	muls	r5, r3
   179da:	1975      	adds	r5, r6, r5
   179dc:	6ded      	ldr	r5, [r5, #92]	; 0x5c
   179de:	2d00      	cmp	r5, #0
   179e0:	d100      	bne.n	179e4 <fn_error_info+0x234>
   179e2:	e71e      	b.n	17822 <fn_error_info+0x72>
				shot_list[shot_list_ind] = temp_buf_ind;
   179e4:	4850      	ldr	r0, [pc, #320]	; (17b28 <fn_error_info+0x378>)
   179e6:	5483      	strb	r3, [r0, r2]
				shot_list_ind++;
   179e8:	3201      	adds	r2, #1
   179ea:	b2d2      	uxtb	r2, r2
   179ec:	0008      	movs	r0, r1
   179ee:	e718      	b.n	17822 <fn_error_info+0x72>
			glcd_draw_line(116, 40, 120, 44, BLACK);
   179f0:	2301      	movs	r3, #1
   179f2:	469a      	mov	sl, r3
   179f4:	9300      	str	r3, [sp, #0]
   179f6:	2278      	movs	r2, #120	; 0x78
   179f8:	332b      	adds	r3, #43	; 0x2b
   179fa:	2128      	movs	r1, #40	; 0x28
   179fc:	2074      	movs	r0, #116	; 0x74
   179fe:	4e59      	ldr	r6, [pc, #356]	; (17b64 <fn_error_info+0x3b4>)
   17a00:	47b0      	blx	r6
			glcd_draw_line(120, 44, 124, 40, BLACK);
   17a02:	4653      	mov	r3, sl
   17a04:	227c      	movs	r2, #124	; 0x7c
   17a06:	9300      	str	r3, [sp, #0]
   17a08:	212c      	movs	r1, #44	; 0x2c
   17a0a:	3327      	adds	r3, #39	; 0x27
   17a0c:	2078      	movs	r0, #120	; 0x78
   17a0e:	47b0      	blx	r6
	if(nshots<= shot_list_ind){//  display null message
   17a10:	4643      	mov	r3, r8
   17a12:	7822      	ldrb	r2, [r4, #0]
   17a14:	781b      	ldrb	r3, [r3, #0]
   17a16:	4293      	cmp	r3, r2
   17a18:	d9a4      	bls.n	17964 <fn_error_info+0x1b4>
		sprintf(display_str,"Measurement %d", data_buf[temp_buf_ind].index_ref);
   17a1a:	24a8      	movs	r4, #168	; 0xa8
		temp_buf_ind = shot_list[shot_list_ind];
   17a1c:	4b42      	ldr	r3, [pc, #264]	; (17b28 <fn_error_info+0x378>)
		sprintf(display_str,"Measurement %d", data_buf[temp_buf_ind].index_ref);
   17a1e:	4e40      	ldr	r6, [pc, #256]	; (17b20 <fn_error_info+0x370>)
		temp_buf_ind = shot_list[shot_list_ind];
   17a20:	5c9b      	ldrb	r3, [r3, r2]
		sprintf(display_str,"Measurement %d", data_buf[temp_buf_ind].index_ref);
   17a22:	4951      	ldr	r1, [pc, #324]	; (17b68 <fn_error_info+0x3b8>)
   17a24:	435c      	muls	r4, r3
   17a26:	0028      	movs	r0, r5
   17a28:	5932      	ldr	r2, [r6, r4]
   17a2a:	4b4c      	ldr	r3, [pc, #304]	; (17b5c <fn_error_info+0x3ac>)
   17a2c:	4798      	blx	r3
		for (i=0;i<min(5, data_buf[temp_buf_ind].num_errors); i++){
   17a2e:	1936      	adds	r6, r6, r4
		glcd_tiny_draw_string(0,1,display_str);
   17a30:	002a      	movs	r2, r5
   17a32:	2101      	movs	r1, #1
   17a34:	2000      	movs	r0, #0
   17a36:	47b8      	blx	r7
		for (i=0;i<min(5, data_buf[temp_buf_ind].num_errors); i++){
   17a38:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   17a3a:	2b00      	cmp	r3, #0
   17a3c:	d0ab      	beq.n	17996 <fn_error_info+0x1e6>
   17a3e:	4b4b      	ldr	r3, [pc, #300]	; (17b6c <fn_error_info+0x3bc>)
   17a40:	2400      	movs	r4, #0
   17a42:	4699      	mov	r9, r3
   17a44:	46b0      	mov	r8, r6
			gen_err_message(display_str, &data_buf[temp_buf_ind], i);
   17a46:	0022      	movs	r2, r4
   17a48:	0031      	movs	r1, r6
   17a4a:	0028      	movs	r0, r5
   17a4c:	47c8      	blx	r9
			glcd_tiny_draw_string(0,i+2,display_str);
   17a4e:	1ca1      	adds	r1, r4, #2
   17a50:	b2c9      	uxtb	r1, r1
   17a52:	002a      	movs	r2, r5
   17a54:	2000      	movs	r0, #0
   17a56:	47b8      	blx	r7
		for (i=0;i<min(5, data_buf[temp_buf_ind].num_errors); i++){
   17a58:	4643      	mov	r3, r8
   17a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   17a5c:	3401      	adds	r4, #1
   17a5e:	b2e4      	uxtb	r4, r4
   17a60:	2b05      	cmp	r3, #5
   17a62:	d900      	bls.n	17a66 <fn_error_info+0x2b6>
   17a64:	2305      	movs	r3, #5
   17a66:	429c      	cmp	r4, r3
   17a68:	d3ed      	bcc.n	17a46 <fn_error_info+0x296>
   17a6a:	e794      	b.n	17996 <fn_error_info+0x1e6>
			glcd_draw_line(116, 26, 120, 22, BLACK);
   17a6c:	2301      	movs	r3, #1
   17a6e:	469a      	mov	sl, r3
   17a70:	9300      	str	r3, [sp, #0]
   17a72:	2278      	movs	r2, #120	; 0x78
   17a74:	3315      	adds	r3, #21
   17a76:	211a      	movs	r1, #26
   17a78:	2074      	movs	r0, #116	; 0x74
   17a7a:	4e3a      	ldr	r6, [pc, #232]	; (17b64 <fn_error_info+0x3b4>)
   17a7c:	47b0      	blx	r6
			glcd_draw_line(120, 22, 124, 26, BLACK);
   17a7e:	4653      	mov	r3, sl
   17a80:	227c      	movs	r2, #124	; 0x7c
   17a82:	9300      	str	r3, [sp, #0]
   17a84:	2116      	movs	r1, #22
   17a86:	3319      	adds	r3, #25
   17a88:	2078      	movs	r0, #120	; 0x78
   17a8a:	47b0      	blx	r6
   17a8c:	7823      	ldrb	r3, [r4, #0]
   17a8e:	e765      	b.n	1795c <fn_error_info+0x1ac>
			if (temp_buf_ind == 0){ temp_buf_ind = buf_length-1;}//  Buffer wrap-around
   17a90:	3309      	adds	r3, #9
			if (data_buf[temp_buf_ind].num_errors>0){
   17a92:	25a8      	movs	r5, #168	; 0xa8
			else {temp_buf_ind--;}
   17a94:	3b01      	subs	r3, #1
   17a96:	b2db      	uxtb	r3, r3
			if (data_buf[temp_buf_ind].num_errors>0){
   17a98:	435d      	muls	r5, r3
   17a9a:	1975      	adds	r5, r6, r5
   17a9c:	6ded      	ldr	r5, [r5, #92]	; 0x5c
   17a9e:	2d00      	cmp	r5, #0
   17aa0:	d100      	bne.n	17aa4 <fn_error_info+0x2f4>
   17aa2:	e6cc      	b.n	1783e <fn_error_info+0x8e>
				shot_list[shot_list_ind] = temp_buf_ind;
   17aa4:	4820      	ldr	r0, [pc, #128]	; (17b28 <fn_error_info+0x378>)
   17aa6:	5483      	strb	r3, [r0, r2]
				shot_list_ind++;
   17aa8:	3201      	adds	r2, #1
   17aaa:	b2d2      	uxtb	r2, r2
   17aac:	0008      	movs	r0, r1
   17aae:	e6c6      	b.n	1783e <fn_error_info+0x8e>
			if (temp_buf_ind == 0){ temp_buf_ind = buf_length-1;}//  Buffer wrap-around
   17ab0:	3309      	adds	r3, #9
			if (data_buf[temp_buf_ind].num_errors>0){
   17ab2:	25a8      	movs	r5, #168	; 0xa8
			else {temp_buf_ind--;}
   17ab4:	3b01      	subs	r3, #1
   17ab6:	b2db      	uxtb	r3, r3
			if (data_buf[temp_buf_ind].num_errors>0){
   17ab8:	435d      	muls	r5, r3
   17aba:	1975      	adds	r5, r6, r5
   17abc:	6ded      	ldr	r5, [r5, #92]	; 0x5c
   17abe:	2d00      	cmp	r5, #0
   17ac0:	d100      	bne.n	17ac4 <fn_error_info+0x314>
   17ac2:	e6ca      	b.n	1785a <fn_error_info+0xaa>
				shot_list[shot_list_ind] = temp_buf_ind;
   17ac4:	4818      	ldr	r0, [pc, #96]	; (17b28 <fn_error_info+0x378>)
   17ac6:	5483      	strb	r3, [r0, r2]
				shot_list_ind++;
   17ac8:	3201      	adds	r2, #1
   17aca:	b2d2      	uxtb	r2, r2
   17acc:	0008      	movs	r0, r1
   17ace:	e6c4      	b.n	1785a <fn_error_info+0xaa>
			if (temp_buf_ind == 0){ temp_buf_ind = buf_length-1;}//  Buffer wrap-around
   17ad0:	3309      	adds	r3, #9
			if (data_buf[temp_buf_ind].num_errors>0){
   17ad2:	25a8      	movs	r5, #168	; 0xa8
			else {temp_buf_ind--;}
   17ad4:	3b01      	subs	r3, #1
   17ad6:	b2db      	uxtb	r3, r3
			if (data_buf[temp_buf_ind].num_errors>0){
   17ad8:	435d      	muls	r5, r3
   17ada:	1975      	adds	r5, r6, r5
   17adc:	6ded      	ldr	r5, [r5, #92]	; 0x5c
   17ade:	2d00      	cmp	r5, #0
   17ae0:	d100      	bne.n	17ae4 <fn_error_info+0x334>
   17ae2:	e6c8      	b.n	17876 <fn_error_info+0xc6>
				shot_list[shot_list_ind] = temp_buf_ind;
   17ae4:	4810      	ldr	r0, [pc, #64]	; (17b28 <fn_error_info+0x378>)
   17ae6:	5483      	strb	r3, [r0, r2]
				shot_list_ind++;
   17ae8:	3201      	adds	r2, #1
   17aea:	b2d2      	uxtb	r2, r2
   17aec:	0008      	movs	r0, r1
   17aee:	e6c2      	b.n	17876 <fn_error_info+0xc6>
			if (temp_buf_ind == 0){ temp_buf_ind = buf_length-1;}//  Buffer wrap-around
   17af0:	3309      	adds	r3, #9
			if (data_buf[temp_buf_ind].num_errors>0){
   17af2:	25a8      	movs	r5, #168	; 0xa8
			else {temp_buf_ind--;}
   17af4:	3b01      	subs	r3, #1
   17af6:	b2db      	uxtb	r3, r3
			if (data_buf[temp_buf_ind].num_errors>0){
   17af8:	435d      	muls	r5, r3
   17afa:	1975      	adds	r5, r6, r5
   17afc:	6ded      	ldr	r5, [r5, #92]	; 0x5c
   17afe:	2d00      	cmp	r5, #0
   17b00:	d100      	bne.n	17b04 <fn_error_info+0x354>
   17b02:	e6c6      	b.n	17892 <fn_error_info+0xe2>
				shot_list[shot_list_ind] = temp_buf_ind;
   17b04:	4808      	ldr	r0, [pc, #32]	; (17b28 <fn_error_info+0x378>)
   17b06:	5483      	strb	r3, [r0, r2]
				shot_list_ind++;
   17b08:	3201      	adds	r2, #1
   17b0a:	b2d2      	uxtb	r2, r2
   17b0c:	0008      	movs	r0, r1
   17b0e:	e6c0      	b.n	17892 <fn_error_info+0xe2>
   17b10:	200001d0 	.word	0x200001d0
   17b14:	20000fb1 	.word	0x20000fb1
   17b18:	20000fbf 	.word	0x20000fbf
   17b1c:	20000f9d 	.word	0x20000f9d
   17b20:	2000305c 	.word	0x2000305c
   17b24:	00000644 	.word	0x00000644
   17b28:	20000fb4 	.word	0x20000fb4
   17b2c:	200043f6 	.word	0x200043f6
   17b30:	00024180 	.word	0x00024180
   17b34:	00014075 	.word	0x00014075
   17b38:	000130dd 	.word	0x000130dd
   17b3c:	200037f8 	.word	0x200037f8
   17b40:	0001efe9 	.word	0x0001efe9
   17b44:	00024870 	.word	0x00024870
   17b48:	00014091 	.word	0x00014091
   17b4c:	00024b6c 	.word	0x00024b6c
   17b50:	00024884 	.word	0x00024884
   17b54:	0002489c 	.word	0x0002489c
   17b58:	000248b0 	.word	0x000248b0
   17b5c:	0001f101 	.word	0x0001f101
   17b60:	000139cd 	.word	0x000139cd
   17b64:	00013189 	.word	0x00013189
   17b68:	000248c0 	.word	0x000248c0
   17b6c:	00009305 	.word	0x00009305
			if (temp_buf_ind == 0){ temp_buf_ind = buf_length-1;}//  Buffer wrap-around
   17b70:	3309      	adds	r3, #9
			if (data_buf[temp_buf_ind].num_errors>0){
   17b72:	25a8      	movs	r5, #168	; 0xa8
			else {temp_buf_ind--;}
   17b74:	3b01      	subs	r3, #1
   17b76:	b2db      	uxtb	r3, r3
			if (data_buf[temp_buf_ind].num_errors>0){
   17b78:	435d      	muls	r5, r3
   17b7a:	1975      	adds	r5, r6, r5
   17b7c:	6ded      	ldr	r5, [r5, #92]	; 0x5c
   17b7e:	2d00      	cmp	r5, #0
   17b80:	d100      	bne.n	17b84 <fn_error_info+0x3d4>
   17b82:	e694      	b.n	178ae <fn_error_info+0xfe>
				shot_list[shot_list_ind] = temp_buf_ind;
   17b84:	4824      	ldr	r0, [pc, #144]	; (17c18 <fn_error_info+0x468>)
   17b86:	5483      	strb	r3, [r0, r2]
				shot_list_ind++;
   17b88:	3201      	adds	r2, #1
   17b8a:	b2d2      	uxtb	r2, r2
   17b8c:	0008      	movs	r0, r1
   17b8e:	e68e      	b.n	178ae <fn_error_info+0xfe>
			if (temp_buf_ind == 0){ temp_buf_ind = buf_length-1;}//  Buffer wrap-around
   17b90:	3309      	adds	r3, #9
			if (data_buf[temp_buf_ind].num_errors>0){
   17b92:	25a8      	movs	r5, #168	; 0xa8
			else {temp_buf_ind--;}
   17b94:	3b01      	subs	r3, #1
   17b96:	b2db      	uxtb	r3, r3
			if (data_buf[temp_buf_ind].num_errors>0){
   17b98:	435d      	muls	r5, r3
   17b9a:	1975      	adds	r5, r6, r5
   17b9c:	6ded      	ldr	r5, [r5, #92]	; 0x5c
   17b9e:	2d00      	cmp	r5, #0
   17ba0:	d100      	bne.n	17ba4 <fn_error_info+0x3f4>
   17ba2:	e692      	b.n	178ca <fn_error_info+0x11a>
				shot_list[shot_list_ind] = temp_buf_ind;
   17ba4:	481c      	ldr	r0, [pc, #112]	; (17c18 <fn_error_info+0x468>)
   17ba6:	5483      	strb	r3, [r0, r2]
				shot_list_ind++;
   17ba8:	3201      	adds	r2, #1
   17baa:	b2d2      	uxtb	r2, r2
   17bac:	0008      	movs	r0, r1
   17bae:	e68c      	b.n	178ca <fn_error_info+0x11a>
			if (temp_buf_ind == 0){ temp_buf_ind = buf_length-1;}//  Buffer wrap-around
   17bb0:	3309      	adds	r3, #9
			if (data_buf[temp_buf_ind].num_errors>0){
   17bb2:	25a8      	movs	r5, #168	; 0xa8
			else {temp_buf_ind--;}
   17bb4:	3b01      	subs	r3, #1
   17bb6:	b2db      	uxtb	r3, r3
			if (data_buf[temp_buf_ind].num_errors>0){
   17bb8:	435d      	muls	r5, r3
   17bba:	1976      	adds	r6, r6, r5
   17bbc:	6df5      	ldr	r5, [r6, #92]	; 0x5c
   17bbe:	2d00      	cmp	r5, #0
   17bc0:	d100      	bne.n	17bc4 <fn_error_info+0x414>
   17bc2:	e68a      	b.n	178da <fn_error_info+0x12a>
				shot_list[shot_list_ind] = temp_buf_ind;
   17bc4:	4814      	ldr	r0, [pc, #80]	; (17c18 <fn_error_info+0x468>)
   17bc6:	5483      	strb	r3, [r0, r2]
				shot_list_ind++;
   17bc8:	3201      	adds	r2, #1
   17bca:	b2d2      	uxtb	r2, r2
			if (temp_buf_ind == 0){ temp_buf_ind = buf_length-1;}//  Buffer wrap-around
   17bcc:	2b00      	cmp	r3, #0
   17bce:	d000      	beq.n	17bd2 <fn_error_info+0x422>
   17bd0:	e684      	b.n	178dc <fn_error_info+0x12c>
   17bd2:	4643      	mov	r3, r8
   17bd4:	701a      	strb	r2, [r3, #0]
   17bd6:	e684      	b.n	178e2 <fn_error_info+0x132>
			if(shot_list_ind>0){
   17bd8:	7823      	ldrb	r3, [r4, #0]
   17bda:	2b00      	cmp	r3, #0
   17bdc:	d100      	bne.n	17be0 <fn_error_info+0x430>
   17bde:	e699      	b.n	17914 <fn_error_info+0x164>
				shot_list_ind--;
   17be0:	3b01      	subs	r3, #1
   17be2:	7023      	strb	r3, [r4, #0]
   17be4:	e696      	b.n	17914 <fn_error_info+0x164>
   17be6:	4a0d      	ldr	r2, [pc, #52]	; (17c1c <fn_error_info+0x46c>)
   17be8:	7823      	ldrb	r3, [r4, #0]
   17bea:	4690      	mov	r8, r2
   17bec:	e681      	b.n	178f2 <fn_error_info+0x142>
			if (temp_buf_ind == 0){ temp_buf_ind = buf_length-1;}//  Buffer wrap-around
   17bee:	2309      	movs	r3, #9
				shot_list[shot_list_ind] = temp_buf_ind;
   17bf0:	4809      	ldr	r0, [pc, #36]	; (17c18 <fn_error_info+0x468>)
   17bf2:	5483      	strb	r3, [r0, r2]
				shot_list_ind++;
   17bf4:	3201      	adds	r2, #1
   17bf6:	b2d2      	uxtb	r2, r2
			if (temp_buf_ind == 0){ temp_buf_ind = buf_length-1;}//  Buffer wrap-around
   17bf8:	2b00      	cmp	r3, #0
   17bfa:	d000      	beq.n	17bfe <fn_error_info+0x44e>
   17bfc:	e66e      	b.n	178dc <fn_error_info+0x12c>
   17bfe:	e7e8      	b.n	17bd2 <fn_error_info+0x422>
			if (data_buf[temp_buf_ind].num_errors>0){
   17c00:	25a8      	movs	r5, #168	; 0xa8
			if (temp_buf_ind == 0){ temp_buf_ind = buf_length-1;}//  Buffer wrap-around
   17c02:	3309      	adds	r3, #9
			else {temp_buf_ind--;}
   17c04:	3b01      	subs	r3, #1
   17c06:	b2db      	uxtb	r3, r3
			if (data_buf[temp_buf_ind].num_errors>0){
   17c08:	435d      	muls	r5, r3
   17c0a:	1975      	adds	r5, r6, r5
   17c0c:	6ded      	ldr	r5, [r5, #92]	; 0x5c
   17c0e:	2d00      	cmp	r5, #0
   17c10:	d100      	bne.n	17c14 <fn_error_info+0x464>
   17c12:	e606      	b.n	17822 <fn_error_info+0x72>
   17c14:	e6e6      	b.n	179e4 <fn_error_info+0x234>
   17c16:	46c0      	nop			; (mov r8, r8)
   17c18:	20000fb4 	.word	0x20000fb4
   17c1c:	20000fb1 	.word	0x20000fb1

00017c20 <cal_disp_message>:
void cal_disp_message(void){
   17c20:	b5f0      	push	{r4, r5, r6, r7, lr}
	wdt_disable();
   17c22:	4b64      	ldr	r3, [pc, #400]	; (17db4 <cal_disp_message+0x194>)
void cal_disp_message(void){
   17c24:	b083      	sub	sp, #12
	wdt_disable();
   17c26:	4798      	blx	r3
	if (current_state==st_acc_comp_calibration){
   17c28:	4b63      	ldr	r3, [pc, #396]	; (17db8 <cal_disp_message+0x198>)
   17c2a:	781a      	ldrb	r2, [r3, #0]
   17c2c:	2a0b      	cmp	r2, #11
   17c2e:	d020      	beq.n	17c72 <cal_disp_message+0x52>
	}else if(current_state == st_dist_calibration){
   17c30:	781a      	ldrb	r2, [r3, #0]
   17c32:	2a0c      	cmp	r2, #12
   17c34:	d03b      	beq.n	17cae <cal_disp_message+0x8e>
	}else if(current_state == st_loop_test){
   17c36:	781b      	ldrb	r3, [r3, #0]
   17c38:	2b0f      	cmp	r3, #15
   17c3a:	d100      	bne.n	17c3e <cal_disp_message+0x1e>
   17c3c:	e07b      	b.n	17d36 <cal_disp_message+0x116>
   17c3e:	4c5f      	ldr	r4, [pc, #380]	; (17dbc <cal_disp_message+0x19c>)
   17c40:	4e5f      	ldr	r6, [pc, #380]	; (17dc0 <cal_disp_message+0x1a0>)
   17c42:	4d60      	ldr	r5, [pc, #384]	; (17dc4 <cal_disp_message+0x1a4>)
	sprintf(display_str, "Press any button...");
   17c44:	2214      	movs	r2, #20
   17c46:	4960      	ldr	r1, [pc, #384]	; (17dc8 <cal_disp_message+0x1a8>)
   17c48:	0020      	movs	r0, r4
   17c4a:	47b0      	blx	r6
	glcd_tiny_draw_string(10,7,display_str);
   17c4c:	0022      	movs	r2, r4
   17c4e:	2107      	movs	r1, #7
   17c50:	200a      	movs	r0, #10
   17c52:	47a8      	blx	r5
	glcd_write();
   17c54:	4b5d      	ldr	r3, [pc, #372]	; (17dcc <cal_disp_message+0x1ac>)
   17c56:	4798      	blx	r3
   17c58:	4a5d      	ldr	r2, [pc, #372]	; (17dd0 <cal_disp_message+0x1b0>)
	while((current_input == input_none) || (current_input == input_1sec));//hold here until an input
   17c5a:	7813      	ldrb	r3, [r2, #0]
   17c5c:	2b00      	cmp	r3, #0
   17c5e:	d0fc      	beq.n	17c5a <cal_disp_message+0x3a>
   17c60:	7813      	ldrb	r3, [r2, #0]
   17c62:	2b07      	cmp	r3, #7
   17c64:	d0f9      	beq.n	17c5a <cal_disp_message+0x3a>
	current_input = input_none;
   17c66:	2300      	movs	r3, #0
   17c68:	7013      	strb	r3, [r2, #0]
	wdt_enable();
   17c6a:	4b5a      	ldr	r3, [pc, #360]	; (17dd4 <cal_disp_message+0x1b4>)
   17c6c:	4798      	blx	r3
}
   17c6e:	b003      	add	sp, #12
   17c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
		glcd_tiny_set_font(Font5x7,5,7,32,127);
   17c72:	237f      	movs	r3, #127	; 0x7f
   17c74:	3a04      	subs	r2, #4
   17c76:	9300      	str	r3, [sp, #0]
   17c78:	2105      	movs	r1, #5
   17c7a:	4857      	ldr	r0, [pc, #348]	; (17dd8 <cal_disp_message+0x1b8>)
   17c7c:	3b5f      	subs	r3, #95	; 0x5f
   17c7e:	4c57      	ldr	r4, [pc, #348]	; (17ddc <cal_disp_message+0x1bc>)
   17c80:	47a0      	blx	r4
		glcd_clear_buffer();
   17c82:	4b57      	ldr	r3, [pc, #348]	; (17de0 <cal_disp_message+0x1c0>)
   17c84:	4798      	blx	r3
		sprintf(display_str, "Azm/Inc Calibration:");
   17c86:	4c4d      	ldr	r4, [pc, #308]	; (17dbc <cal_disp_message+0x19c>)
   17c88:	4e4d      	ldr	r6, [pc, #308]	; (17dc0 <cal_disp_message+0x1a0>)
   17c8a:	2215      	movs	r2, #21
   17c8c:	4955      	ldr	r1, [pc, #340]	; (17de4 <cal_disp_message+0x1c4>)
   17c8e:	0020      	movs	r0, r4
   17c90:	47b0      	blx	r6
		glcd_tiny_draw_string(0,0,display_str);
   17c92:	0022      	movs	r2, r4
   17c94:	2100      	movs	r1, #0
   17c96:	2000      	movs	r0, #0
   17c98:	4d4a      	ldr	r5, [pc, #296]	; (17dc4 <cal_disp_message+0x1a4>)
   17c9a:	47a8      	blx	r5
		sprintf(display_str, "Take Uni-Directional Groups of 4 Shots    while rotating       instrument. Only last4 shots of each groupwill be saved");
   17c9c:	2277      	movs	r2, #119	; 0x77
   17c9e:	4952      	ldr	r1, [pc, #328]	; (17de8 <cal_disp_message+0x1c8>)
   17ca0:	0020      	movs	r0, r4
   17ca2:	47b0      	blx	r6
		glcd_tiny_draw_string(0,1,display_str);		
   17ca4:	0022      	movs	r2, r4
   17ca6:	2101      	movs	r1, #1
   17ca8:	2000      	movs	r0, #0
   17caa:	47a8      	blx	r5
   17cac:	e7ca      	b.n	17c44 <cal_disp_message+0x24>
		glcd_tiny_set_font(Font5x7,5,7,32,127);
   17cae:	237f      	movs	r3, #127	; 0x7f
   17cb0:	3a05      	subs	r2, #5
   17cb2:	2105      	movs	r1, #5
   17cb4:	4848      	ldr	r0, [pc, #288]	; (17dd8 <cal_disp_message+0x1b8>)
   17cb6:	9300      	str	r3, [sp, #0]
   17cb8:	4c48      	ldr	r4, [pc, #288]	; (17ddc <cal_disp_message+0x1bc>)
   17cba:	3b5f      	subs	r3, #95	; 0x5f
   17cbc:	47a0      	blx	r4
		glcd_clear_buffer();
   17cbe:	4b48      	ldr	r3, [pc, #288]	; (17de0 <cal_disp_message+0x1c0>)
   17cc0:	4798      	blx	r3
		sprintf(display_str, "Distance Calibration:");
   17cc2:	4c3e      	ldr	r4, [pc, #248]	; (17dbc <cal_disp_message+0x19c>)
   17cc4:	2216      	movs	r2, #22
   17cc6:	4949      	ldr	r1, [pc, #292]	; (17dec <cal_disp_message+0x1cc>)
   17cc8:	4e3d      	ldr	r6, [pc, #244]	; (17dc0 <cal_disp_message+0x1a0>)
   17cca:	0020      	movs	r0, r4
   17ccc:	47b0      	blx	r6
		glcd_tiny_draw_string(0,0,display_str);
   17cce:	0022      	movs	r2, r4
   17cd0:	2100      	movs	r1, #0
   17cd2:	2000      	movs	r0, #0
   17cd4:	4d3b      	ldr	r5, [pc, #236]	; (17dc4 <cal_disp_message+0x1a4>)
   17cd6:	47a8      	blx	r5
		sprintf(display_str, "Place a target at");
   17cd8:	2212      	movs	r2, #18
   17cda:	4945      	ldr	r1, [pc, #276]	; (17df0 <cal_disp_message+0x1d0>)
   17cdc:	0020      	movs	r0, r4
   17cde:	47b0      	blx	r6
		glcd_tiny_draw_string(0,1,display_str);
   17ce0:	0022      	movs	r2, r4
   17ce2:	2101      	movs	r1, #1
   17ce4:	2000      	movs	r0, #0
   17ce6:	47a8      	blx	r5
		if (options.current_unit_dist == feet){
   17ce8:	4b42      	ldr	r3, [pc, #264]	; (17df4 <cal_disp_message+0x1d4>)
			sprintf(display_str, "  %.1f feet.",dist_cal_setpoint_ft);
   17cea:	2200      	movs	r2, #0
		if (options.current_unit_dist == feet){
   17cec:	781b      	ldrb	r3, [r3, #0]
   17cee:	2b00      	cmp	r3, #0
   17cf0:	d159      	bne.n	17da6 <cal_disp_message+0x186>
			sprintf(display_str, "  %.1f feet.",dist_cal_setpoint_ft);
   17cf2:	4b41      	ldr	r3, [pc, #260]	; (17df8 <cal_disp_message+0x1d8>)
   17cf4:	4941      	ldr	r1, [pc, #260]	; (17dfc <cal_disp_message+0x1dc>)
   17cf6:	0020      	movs	r0, r4
   17cf8:	4f41      	ldr	r7, [pc, #260]	; (17e00 <cal_disp_message+0x1e0>)
   17cfa:	47b8      	blx	r7
		glcd_tiny_draw_string(0,2,display_str);
   17cfc:	0022      	movs	r2, r4
   17cfe:	2102      	movs	r1, #2
   17d00:	2000      	movs	r0, #0
   17d02:	47a8      	blx	r5
		sprintf(display_str, "Take min. 4 shots in");
   17d04:	2215      	movs	r2, #21
   17d06:	493f      	ldr	r1, [pc, #252]	; (17e04 <cal_disp_message+0x1e4>)
   17d08:	0020      	movs	r0, r4
   17d0a:	47b0      	blx	r6
		glcd_tiny_draw_string(0,3,display_str);
   17d0c:	0022      	movs	r2, r4
   17d0e:	2103      	movs	r1, #3
   17d10:	2000      	movs	r0, #0
   17d12:	47a8      	blx	r5
		sprintf(display_str, "Multiple Orientations");
   17d14:	2216      	movs	r2, #22
   17d16:	493c      	ldr	r1, [pc, #240]	; (17e08 <cal_disp_message+0x1e8>)
   17d18:	0020      	movs	r0, r4
   17d1a:	47b0      	blx	r6
		glcd_tiny_draw_string(0,4,display_str);
   17d1c:	0022      	movs	r2, r4
   17d1e:	2104      	movs	r1, #4
   17d20:	2000      	movs	r0, #0
   17d22:	47a8      	blx	r5
		sprintf(display_str, "Only last 4 used.");
   17d24:	2212      	movs	r2, #18
   17d26:	4939      	ldr	r1, [pc, #228]	; (17e0c <cal_disp_message+0x1ec>)
		sprintf(display_str, "when complete.");
   17d28:	0020      	movs	r0, r4
   17d2a:	47b0      	blx	r6
		glcd_tiny_draw_string(0,5,display_str);
   17d2c:	0022      	movs	r2, r4
   17d2e:	2105      	movs	r1, #5
   17d30:	2000      	movs	r0, #0
   17d32:	47a8      	blx	r5
   17d34:	e786      	b.n	17c44 <cal_disp_message+0x24>
		glcd_tiny_set_font(Font5x7,5,7,32,127);
   17d36:	237f      	movs	r3, #127	; 0x7f
   17d38:	2207      	movs	r2, #7
   17d3a:	2105      	movs	r1, #5
   17d3c:	4826      	ldr	r0, [pc, #152]	; (17dd8 <cal_disp_message+0x1b8>)
   17d3e:	9300      	str	r3, [sp, #0]
   17d40:	4c26      	ldr	r4, [pc, #152]	; (17ddc <cal_disp_message+0x1bc>)
   17d42:	3b5f      	subs	r3, #95	; 0x5f
   17d44:	47a0      	blx	r4
		glcd_clear_buffer();
   17d46:	4b26      	ldr	r3, [pc, #152]	; (17de0 <cal_disp_message+0x1c0>)
   17d48:	4798      	blx	r3
		sprintf(display_str, "Loop Test:");
   17d4a:	4c1c      	ldr	r4, [pc, #112]	; (17dbc <cal_disp_message+0x19c>)
   17d4c:	4e1c      	ldr	r6, [pc, #112]	; (17dc0 <cal_disp_message+0x1a0>)
   17d4e:	220b      	movs	r2, #11
   17d50:	492f      	ldr	r1, [pc, #188]	; (17e10 <cal_disp_message+0x1f0>)
   17d52:	0020      	movs	r0, r4
   17d54:	47b0      	blx	r6
		glcd_tiny_draw_string(0,0,display_str);
   17d56:	4d1b      	ldr	r5, [pc, #108]	; (17dc4 <cal_disp_message+0x1a4>)
   17d58:	0022      	movs	r2, r4
   17d5a:	2100      	movs	r1, #0
   17d5c:	2000      	movs	r0, #0
   17d5e:	47a8      	blx	r5
		sprintf(display_str, "Take a series of");
   17d60:	2211      	movs	r2, #17
   17d62:	492c      	ldr	r1, [pc, #176]	; (17e14 <cal_disp_message+0x1f4>)
   17d64:	0020      	movs	r0, r4
   17d66:	47b0      	blx	r6
		glcd_tiny_draw_string(0,1,display_str);
   17d68:	0022      	movs	r2, r4
   17d6a:	2101      	movs	r1, #1
   17d6c:	2000      	movs	r0, #0
   17d6e:	47a8      	blx	r5
		sprintf(display_str, "measurements ending");
   17d70:	2214      	movs	r2, #20
   17d72:	4929      	ldr	r1, [pc, #164]	; (17e18 <cal_disp_message+0x1f8>)
   17d74:	0020      	movs	r0, r4
   17d76:	47b0      	blx	r6
		glcd_tiny_draw_string(0,2,display_str);
   17d78:	0022      	movs	r2, r4
   17d7a:	2102      	movs	r1, #2
   17d7c:	2000      	movs	r0, #0
   17d7e:	47a8      	blx	r5
		sprintf(display_str, "back at the first");
   17d80:	2212      	movs	r2, #18
   17d82:	4926      	ldr	r1, [pc, #152]	; (17e1c <cal_disp_message+0x1fc>)
   17d84:	0020      	movs	r0, r4
   17d86:	47b0      	blx	r6
		glcd_tiny_draw_string(0,3,display_str);
   17d88:	0022      	movs	r2, r4
   17d8a:	2103      	movs	r1, #3
   17d8c:	2000      	movs	r0, #0
   17d8e:	47a8      	blx	r5
		sprintf(display_str, "point.  Press 'Done'");
   17d90:	2215      	movs	r2, #21
   17d92:	4923      	ldr	r1, [pc, #140]	; (17e20 <cal_disp_message+0x200>)
   17d94:	0020      	movs	r0, r4
   17d96:	47b0      	blx	r6
		glcd_tiny_draw_string(0,4,display_str);
   17d98:	0022      	movs	r2, r4
   17d9a:	2104      	movs	r1, #4
   17d9c:	2000      	movs	r0, #0
   17d9e:	47a8      	blx	r5
		sprintf(display_str, "when complete.");
   17da0:	220f      	movs	r2, #15
   17da2:	4920      	ldr	r1, [pc, #128]	; (17e24 <cal_disp_message+0x204>)
   17da4:	e7c0      	b.n	17d28 <cal_disp_message+0x108>
			sprintf(display_str, "  %.1f meters.",dist_cal_setpoint_mt);
   17da6:	4b20      	ldr	r3, [pc, #128]	; (17e28 <cal_disp_message+0x208>)
   17da8:	4920      	ldr	r1, [pc, #128]	; (17e2c <cal_disp_message+0x20c>)
   17daa:	0020      	movs	r0, r4
   17dac:	4f14      	ldr	r7, [pc, #80]	; (17e00 <cal_disp_message+0x1e0>)
   17dae:	47b8      	blx	r7
   17db0:	e7a4      	b.n	17cfc <cal_disp_message+0xdc>
   17db2:	46c0      	nop			; (mov r8, r8)
   17db4:	00009625 	.word	0x00009625
   17db8:	20003058 	.word	0x20003058
   17dbc:	200037f8 	.word	0x200037f8
   17dc0:	0001efe9 	.word	0x0001efe9
   17dc4:	00014091 	.word	0x00014091
   17dc8:	000244f0 	.word	0x000244f0
   17dcc:	000139cd 	.word	0x000139cd
   17dd0:	200043f4 	.word	0x200043f4
   17dd4:	00009601 	.word	0x00009601
   17dd8:	00024180 	.word	0x00024180
   17ddc:	00014075 	.word	0x00014075
   17de0:	000130dd 	.word	0x000130dd
   17de4:	00024360 	.word	0x00024360
   17de8:	00024378 	.word	0x00024378
   17dec:	000243f0 	.word	0x000243f0
   17df0:	00024408 	.word	0x00024408
   17df4:	20003770 	.word	0x20003770
   17df8:	40080000 	.word	0x40080000
   17dfc:	0002441c 	.word	0x0002441c
   17e00:	0001f101 	.word	0x0001f101
   17e04:	0002443c 	.word	0x0002443c
   17e08:	00024454 	.word	0x00024454
   17e0c:	0002446c 	.word	0x0002446c
   17e10:	00024480 	.word	0x00024480
   17e14:	0002448c 	.word	0x0002448c
   17e18:	000244a0 	.word	0x000244a0
   17e1c:	000244b4 	.word	0x000244b4
   17e20:	000244c8 	.word	0x000244c8
   17e24:	000244e0 	.word	0x000244e0
   17e28:	3ff00000 	.word	0x3ff00000
   17e2c:	0002442c 	.word	0x0002442c

00017e30 <fn_acc_comp_calibration>:
void fn_acc_comp_calibration(void){
   17e30:	b5f0      	push	{r4, r5, r6, r7, lr}
   17e32:	4647      	mov	r7, r8
   17e34:	46ce      	mov	lr, r9
   17e36:	b580      	push	{r7, lr}
	if (buf_points>= group_size){disp_groups = n_groups+1;}
   17e38:	4b4f      	ldr	r3, [pc, #316]	; (17f78 <fn_acc_comp_calibration+0x148>)
void fn_acc_comp_calibration(void){
   17e3a:	b0ad      	sub	sp, #180	; 0xb4
	if (buf_points>= group_size){disp_groups = n_groups+1;}
   17e3c:	4698      	mov	r8, r3
   17e3e:	781b      	ldrb	r3, [r3, #0]
   17e40:	4f4e      	ldr	r7, [pc, #312]	; (17f7c <fn_acc_comp_calibration+0x14c>)
   17e42:	2b03      	cmp	r3, #3
   17e44:	d95a      	bls.n	17efc <fn_acc_comp_calibration+0xcc>
   17e46:	683b      	ldr	r3, [r7, #0]
   17e48:	1c5e      	adds	r6, r3, #1
	if (state_change){
   17e4a:	4b4d      	ldr	r3, [pc, #308]	; (17f80 <fn_acc_comp_calibration+0x150>)
	if (buf_points>= group_size){disp_groups = n_groups+1;}
   17e4c:	b2f6      	uxtb	r6, r6
	if (state_change){
   17e4e:	781b      	ldrb	r3, [r3, #0]
   17e50:	2b00      	cmp	r3, #0
   17e52:	d158      	bne.n	17f06 <fn_acc_comp_calibration+0xd6>
   17e54:	4c4b      	ldr	r4, [pc, #300]	; (17f84 <fn_acc_comp_calibration+0x154>)
	switch(last_input){
   17e56:	7823      	ldrb	r3, [r4, #0]
   17e58:	b2db      	uxtb	r3, r3
   17e5a:	2b01      	cmp	r3, #1
   17e5c:	d067      	beq.n	17f2e <fn_acc_comp_calibration+0xfe>
   17e5e:	2b05      	cmp	r3, #5
   17e60:	d100      	bne.n	17e64 <fn_acc_comp_calibration+0x34>
   17e62:	e071      	b.n	17f48 <fn_acc_comp_calibration+0x118>
	last_input = input_none;	
   17e64:	2300      	movs	r3, #0
   17e66:	7023      	strb	r3, [r4, #0]
	glcd_tiny_set_font(Font5x7,5,7,32,127);
   17e68:	337f      	adds	r3, #127	; 0x7f
   17e6a:	2207      	movs	r2, #7
   17e6c:	2105      	movs	r1, #5
   17e6e:	4846      	ldr	r0, [pc, #280]	; (17f88 <fn_acc_comp_calibration+0x158>)
   17e70:	9300      	str	r3, [sp, #0]
   17e72:	4c46      	ldr	r4, [pc, #280]	; (17f8c <fn_acc_comp_calibration+0x15c>)
   17e74:	3b5f      	subs	r3, #95	; 0x5f
   17e76:	47a0      	blx	r4
	glcd_clear_buffer();
   17e78:	4b45      	ldr	r3, [pc, #276]	; (17f90 <fn_acc_comp_calibration+0x160>)
   17e7a:	4798      	blx	r3
	sprintf(display_str, "Calibration Mode");
   17e7c:	4c45      	ldr	r4, [pc, #276]	; (17f94 <fn_acc_comp_calibration+0x164>)
   17e7e:	4b46      	ldr	r3, [pc, #280]	; (17f98 <fn_acc_comp_calibration+0x168>)
   17e80:	2211      	movs	r2, #17
   17e82:	4946      	ldr	r1, [pc, #280]	; (17f9c <fn_acc_comp_calibration+0x16c>)
   17e84:	0020      	movs	r0, r4
   17e86:	4699      	mov	r9, r3
   17e88:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   17e8a:	4d45      	ldr	r5, [pc, #276]	; (17fa0 <fn_acc_comp_calibration+0x170>)
   17e8c:	0022      	movs	r2, r4
   17e8e:	2100      	movs	r1, #0
   17e90:	2000      	movs	r0, #0
   17e92:	47a8      	blx	r5
	sprintf(display_str, "Current Group: %d", (n_groups+1));
   17e94:	683a      	ldr	r2, [r7, #0]
   17e96:	4943      	ldr	r1, [pc, #268]	; (17fa4 <fn_acc_comp_calibration+0x174>)
   17e98:	4f43      	ldr	r7, [pc, #268]	; (17fa8 <fn_acc_comp_calibration+0x178>)
   17e9a:	3201      	adds	r2, #1
   17e9c:	0020      	movs	r0, r4
   17e9e:	47b8      	blx	r7
	glcd_tiny_draw_string(0,2,display_str);
   17ea0:	0022      	movs	r2, r4
   17ea2:	2102      	movs	r1, #2
   17ea4:	2000      	movs	r0, #0
   17ea6:	47a8      	blx	r5
	sprintf(display_str, "Status: %d of 4", buf_points );
   17ea8:	4643      	mov	r3, r8
   17eaa:	4940      	ldr	r1, [pc, #256]	; (17fac <fn_acc_comp_calibration+0x17c>)
   17eac:	781a      	ldrb	r2, [r3, #0]
   17eae:	0020      	movs	r0, r4
   17eb0:	47b8      	blx	r7
	glcd_tiny_draw_string(0,3,display_str);
   17eb2:	0022      	movs	r2, r4
   17eb4:	2103      	movs	r1, #3
   17eb6:	2000      	movs	r0, #0
   17eb8:	47a8      	blx	r5
	sprintf(display_str, "Complete Groups: %d", disp_groups );
   17eba:	0032      	movs	r2, r6
   17ebc:	493c      	ldr	r1, [pc, #240]	; (17fb0 <fn_acc_comp_calibration+0x180>)
   17ebe:	0020      	movs	r0, r4
   17ec0:	47b8      	blx	r7
	glcd_tiny_draw_string(0,5,display_str);
   17ec2:	0022      	movs	r2, r4
   17ec4:	2105      	movs	r1, #5
   17ec6:	2000      	movs	r0, #0
   17ec8:	47a8      	blx	r5
	if (disp_groups >= min_groups){
   17eca:	2e08      	cmp	r6, #8
   17ecc:	d907      	bls.n	17ede <fn_acc_comp_calibration+0xae>
		sprintf(display_str, "Done");
   17ece:	2205      	movs	r2, #5
   17ed0:	4938      	ldr	r1, [pc, #224]	; (17fb4 <fn_acc_comp_calibration+0x184>)
   17ed2:	0020      	movs	r0, r4
   17ed4:	47c8      	blx	r9
		glcd_tiny_draw_string(100,0,display_str);
   17ed6:	0022      	movs	r2, r4
   17ed8:	2100      	movs	r1, #0
   17eda:	2064      	movs	r0, #100	; 0x64
   17edc:	47a8      	blx	r5
	sprintf(display_str, "Abort");
   17ede:	2206      	movs	r2, #6
   17ee0:	4935      	ldr	r1, [pc, #212]	; (17fb8 <fn_acc_comp_calibration+0x188>)
   17ee2:	0020      	movs	r0, r4
   17ee4:	47c8      	blx	r9
	glcd_tiny_draw_string(97,7,display_str);
   17ee6:	0022      	movs	r2, r4
   17ee8:	2107      	movs	r1, #7
   17eea:	2061      	movs	r0, #97	; 0x61
   17eec:	47a8      	blx	r5
	glcd_write();
   17eee:	4b33      	ldr	r3, [pc, #204]	; (17fbc <fn_acc_comp_calibration+0x18c>)
   17ef0:	4798      	blx	r3
}
   17ef2:	b02d      	add	sp, #180	; 0xb4
   17ef4:	bc0c      	pop	{r2, r3}
   17ef6:	4690      	mov	r8, r2
   17ef8:	4699      	mov	r9, r3
   17efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state_change){
   17efc:	4b20      	ldr	r3, [pc, #128]	; (17f80 <fn_acc_comp_calibration+0x150>)
	else{disp_groups = n_groups;}
   17efe:	783e      	ldrb	r6, [r7, #0]
	if (state_change){
   17f00:	781b      	ldrb	r3, [r3, #0]
   17f02:	2b00      	cmp	r3, #0
   17f04:	d0a6      	beq.n	17e54 <fn_acc_comp_calibration+0x24>
		cal_disp_message();
   17f06:	4b2e      	ldr	r3, [pc, #184]	; (17fc0 <fn_acc_comp_calibration+0x190>)
   17f08:	4798      	blx	r3
		n_groups = 0;
   17f0a:	2300      	movs	r3, #0
		n_points = 0;
   17f0c:	4a2d      	ldr	r2, [pc, #180]	; (17fc4 <fn_acc_comp_calibration+0x194>)
		last_input = input_none;
   17f0e:	4c1d      	ldr	r4, [pc, #116]	; (17f84 <fn_acc_comp_calibration+0x154>)
		n_points = 0;
   17f10:	6013      	str	r3, [r2, #0]
		ind_stack = 0;
   17f12:	4a2d      	ldr	r2, [pc, #180]	; (17fc8 <fn_acc_comp_calibration+0x198>)
		n_groups = 0;
   17f14:	603b      	str	r3, [r7, #0]
		ind_stack = 0;
   17f16:	7013      	strb	r3, [r2, #0]
		ind_buf = 0;
   17f18:	4a2c      	ldr	r2, [pc, #176]	; (17fcc <fn_acc_comp_calibration+0x19c>)
   17f1a:	7013      	strb	r3, [r2, #0]
		buf_points = 0;
   17f1c:	4642      	mov	r2, r8
   17f1e:	7013      	strb	r3, [r2, #0]
		laser_triggered =  false;
   17f20:	4a2b      	ldr	r2, [pc, #172]	; (17fd0 <fn_acc_comp_calibration+0x1a0>)
   17f22:	7013      	strb	r3, [r2, #0]
		last_input = input_none;
   17f24:	7023      	strb	r3, [r4, #0]
	switch(last_input){
   17f26:	7823      	ldrb	r3, [r4, #0]
   17f28:	b2db      	uxtb	r3, r3
   17f2a:	2b01      	cmp	r3, #1
   17f2c:	d197      	bne.n	17e5e <fn_acc_comp_calibration+0x2e>
			if (disp_groups>=min_groups){//  Requires min_groups to complete
   17f2e:	2e08      	cmp	r6, #8
   17f30:	d998      	bls.n	17e64 <fn_acc_comp_calibration+0x34>
				rangefinder_on_off(false);
   17f32:	2000      	movs	r0, #0
   17f34:	4b27      	ldr	r3, [pc, #156]	; (17fd4 <fn_acc_comp_calibration+0x1a4>)
   17f36:	4798      	blx	r3
				cal_add_datapoint(&temp_meas, true);
   17f38:	4b27      	ldr	r3, [pc, #156]	; (17fd8 <fn_acc_comp_calibration+0x1a8>)
   17f3a:	2101      	movs	r1, #1
   17f3c:	a802      	add	r0, sp, #8
   17f3e:	4798      	blx	r3
				current_input = input_state_complete;
   17f40:	2208      	movs	r2, #8
   17f42:	4b26      	ldr	r3, [pc, #152]	; (17fdc <fn_acc_comp_calibration+0x1ac>)
   17f44:	701a      	strb	r2, [r3, #0]
   17f46:	e78d      	b.n	17e64 <fn_acc_comp_calibration+0x34>
			if (!laser_triggered){
   17f48:	4b21      	ldr	r3, [pc, #132]	; (17fd0 <fn_acc_comp_calibration+0x1a0>)
   17f4a:	781b      	ldrb	r3, [r3, #0]
   17f4c:	2b00      	cmp	r3, #0
   17f4e:	d106      	bne.n	17f5e <fn_acc_comp_calibration+0x12e>
				rangefinder_on_off(true);
   17f50:	2001      	movs	r0, #1
   17f52:	4b20      	ldr	r3, [pc, #128]	; (17fd4 <fn_acc_comp_calibration+0x1a4>)
   17f54:	4798      	blx	r3
				laser_on_off(true);
   17f56:	2001      	movs	r0, #1
   17f58:	4b21      	ldr	r3, [pc, #132]	; (17fe0 <fn_acc_comp_calibration+0x1b0>)
   17f5a:	4798      	blx	r3
   17f5c:	e782      	b.n	17e64 <fn_acc_comp_calibration+0x34>
				full_measurement(&temp_meas, false);
   17f5e:	2100      	movs	r1, #0
   17f60:	a802      	add	r0, sp, #8
   17f62:	4b20      	ldr	r3, [pc, #128]	; (17fe4 <fn_acc_comp_calibration+0x1b4>)
   17f64:	4798      	blx	r3
				rangefinder_on_off(false);
   17f66:	2000      	movs	r0, #0
   17f68:	4b1a      	ldr	r3, [pc, #104]	; (17fd4 <fn_acc_comp_calibration+0x1a4>)
   17f6a:	4798      	blx	r3
				cal_add_datapoint(&temp_meas, false);
   17f6c:	2100      	movs	r1, #0
   17f6e:	a802      	add	r0, sp, #8
   17f70:	4b19      	ldr	r3, [pc, #100]	; (17fd8 <fn_acc_comp_calibration+0x1a8>)
   17f72:	4798      	blx	r3
   17f74:	e776      	b.n	17e64 <fn_acc_comp_calibration+0x34>
   17f76:	46c0      	nop			; (mov r8, r8)
   17f78:	2000213c 	.word	0x2000213c
   17f7c:	20002140 	.word	0x20002140
   17f80:	200001d0 	.word	0x200001d0
   17f84:	200043f6 	.word	0x200043f6
   17f88:	00024180 	.word	0x00024180
   17f8c:	00014075 	.word	0x00014075
   17f90:	000130dd 	.word	0x000130dd
   17f94:	200037f8 	.word	0x200037f8
   17f98:	0001efe9 	.word	0x0001efe9
   17f9c:	00024508 	.word	0x00024508
   17fa0:	00014091 	.word	0x00014091
   17fa4:	0002451c 	.word	0x0002451c
   17fa8:	0001f101 	.word	0x0001f101
   17fac:	00024530 	.word	0x00024530
   17fb0:	00024540 	.word	0x00024540
   17fb4:	00024554 	.word	0x00024554
   17fb8:	0002455c 	.word	0x0002455c
   17fbc:	000139cd 	.word	0x000139cd
   17fc0:	00017c21 	.word	0x00017c21
   17fc4:	20003054 	.word	0x20003054
   17fc8:	20002284 	.word	0x20002284
   17fcc:	20003cbc 	.word	0x20003cbc
   17fd0:	2000264c 	.word	0x2000264c
   17fd4:	0000834d 	.word	0x0000834d
   17fd8:	0000c891 	.word	0x0000c891
   17fdc:	200043f4 	.word	0x200043f4
   17fe0:	00008379 	.word	0x00008379
   17fe4:	00008fc9 	.word	0x00008fc9

00017fe8 <fn_loop_test>:
void fn_loop_test(void){
   17fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
   17fea:	46de      	mov	lr, fp
   17fec:	4657      	mov	r7, sl
   17fee:	464e      	mov	r6, r9
   17ff0:	4645      	mov	r5, r8
   17ff2:	b5e0      	push	{r5, r6, r7, lr}
	if (state_change){
   17ff4:	4b84      	ldr	r3, [pc, #528]	; (18208 <fn_loop_test+0x220>)
void fn_loop_test(void){
   17ff6:	b0af      	sub	sp, #188	; 0xbc
	if (state_change){
   17ff8:	781b      	ldrb	r3, [r3, #0]
   17ffa:	2b00      	cmp	r3, #0
   17ffc:	d000      	beq.n	18000 <fn_loop_test+0x18>
   17ffe:	e0cf      	b.n	181a0 <fn_loop_test+0x1b8>
   18000:	4b82      	ldr	r3, [pc, #520]	; (1820c <fn_loop_test+0x224>)
   18002:	4f83      	ldr	r7, [pc, #524]	; (18210 <fn_loop_test+0x228>)
   18004:	4699      	mov	r9, r3
   18006:	4b83      	ldr	r3, [pc, #524]	; (18214 <fn_loop_test+0x22c>)
   18008:	4c83      	ldr	r4, [pc, #524]	; (18218 <fn_loop_test+0x230>)
   1800a:	469b      	mov	fp, r3
   1800c:	4b83      	ldr	r3, [pc, #524]	; (1821c <fn_loop_test+0x234>)
   1800e:	9303      	str	r3, [sp, #12]
   18010:	4b83      	ldr	r3, [pc, #524]	; (18220 <fn_loop_test+0x238>)
   18012:	469a      	mov	sl, r3
	switch(last_input){
   18014:	7823      	ldrb	r3, [r4, #0]
   18016:	b2db      	uxtb	r3, r3
   18018:	2b01      	cmp	r3, #1
   1801a:	d100      	bne.n	1801e <fn_loop_test+0x36>
   1801c:	e0b9      	b.n	18192 <fn_loop_test+0x1aa>
   1801e:	2b05      	cmp	r3, #5
   18020:	d100      	bne.n	18024 <fn_loop_test+0x3c>
   18022:	e0a4      	b.n	1816e <fn_loop_test+0x186>
	last_input = input_none;
   18024:	2300      	movs	r3, #0
   18026:	7023      	strb	r3, [r4, #0]
	glcd_tiny_set_font(Font5x7,5,7,32,127);
   18028:	337f      	adds	r3, #127	; 0x7f
   1802a:	2207      	movs	r2, #7
   1802c:	2105      	movs	r1, #5
   1802e:	487d      	ldr	r0, [pc, #500]	; (18224 <fn_loop_test+0x23c>)
   18030:	9300      	str	r3, [sp, #0]
   18032:	4c7d      	ldr	r4, [pc, #500]	; (18228 <fn_loop_test+0x240>)
   18034:	3b5f      	subs	r3, #95	; 0x5f
   18036:	47a0      	blx	r4
	glcd_clear_buffer();
   18038:	4b7c      	ldr	r3, [pc, #496]	; (1822c <fn_loop_test+0x244>)
   1803a:	4798      	blx	r3
	sprintf(display_str, "Loop Test:");
   1803c:	4c7c      	ldr	r4, [pc, #496]	; (18230 <fn_loop_test+0x248>)
   1803e:	220b      	movs	r2, #11
   18040:	497c      	ldr	r1, [pc, #496]	; (18234 <fn_loop_test+0x24c>)
   18042:	0020      	movs	r0, r4
   18044:	4e7c      	ldr	r6, [pc, #496]	; (18238 <fn_loop_test+0x250>)
   18046:	47b0      	blx	r6
	glcd_tiny_draw_string(0,0,display_str);
   18048:	0022      	movs	r2, r4
   1804a:	2100      	movs	r1, #0
   1804c:	2000      	movs	r0, #0
   1804e:	4d7b      	ldr	r5, [pc, #492]	; (1823c <fn_loop_test+0x254>)
   18050:	47a8      	blx	r5
	sprintf(display_str, "Segments: %d", n_points);
   18052:	683a      	ldr	r2, [r7, #0]
   18054:	497a      	ldr	r1, [pc, #488]	; (18240 <fn_loop_test+0x258>)
   18056:	4f7b      	ldr	r7, [pc, #492]	; (18244 <fn_loop_test+0x25c>)
   18058:	0020      	movs	r0, r4
   1805a:	47b8      	blx	r7
	glcd_tiny_draw_string(0,2,display_str);
   1805c:	0022      	movs	r2, r4
   1805e:	2102      	movs	r1, #2
   18060:	2000      	movs	r0, #0
   18062:	47a8      	blx	r5
	sprintf(display_str, "Loop length: %.1f", loop_distance);
   18064:	4b78      	ldr	r3, [pc, #480]	; (18248 <fn_loop_test+0x260>)
   18066:	4698      	mov	r8, r3
   18068:	464b      	mov	r3, r9
   1806a:	6818      	ldr	r0, [r3, #0]
   1806c:	47c0      	blx	r8
   1806e:	000b      	movs	r3, r1
   18070:	0002      	movs	r2, r0
   18072:	4976      	ldr	r1, [pc, #472]	; (1824c <fn_loop_test+0x264>)
   18074:	0020      	movs	r0, r4
   18076:	47b8      	blx	r7
	if (options.current_unit_dist == feet){
   18078:	4b75      	ldr	r3, [pc, #468]	; (18250 <fn_loop_test+0x268>)
		strcat(display_str,"ft");
   1807a:	0020      	movs	r0, r4
	if (options.current_unit_dist == feet){
   1807c:	4699      	mov	r9, r3
   1807e:	781b      	ldrb	r3, [r3, #0]
   18080:	2b00      	cmp	r3, #0
   18082:	d165      	bne.n	18150 <fn_loop_test+0x168>
		strcat(display_str,"ft");
   18084:	4b73      	ldr	r3, [pc, #460]	; (18254 <fn_loop_test+0x26c>)
   18086:	9302      	str	r3, [sp, #8]
   18088:	4798      	blx	r3
   1808a:	2203      	movs	r2, #3
   1808c:	1820      	adds	r0, r4, r0
   1808e:	4972      	ldr	r1, [pc, #456]	; (18258 <fn_loop_test+0x270>)
   18090:	47b0      	blx	r6
	glcd_tiny_draw_string(0,3,display_str);
   18092:	0022      	movs	r2, r4
   18094:	2103      	movs	r1, #3
   18096:	2000      	movs	r0, #0
   18098:	47a8      	blx	r5
	sprintf(display_str, "Displacement from P1:");
   1809a:	2216      	movs	r2, #22
   1809c:	496f      	ldr	r1, [pc, #444]	; (1825c <fn_loop_test+0x274>)
   1809e:	0020      	movs	r0, r4
   180a0:	47b0      	blx	r6
	glcd_tiny_draw_string(0,4,display_str);
   180a2:	0022      	movs	r2, r4
   180a4:	2104      	movs	r1, #4
   180a6:	2000      	movs	r0, #0
   180a8:	47a8      	blx	r5
	sprintf(display_str, "Horizontal: %.1f", loop_horizontal);
   180aa:	465b      	mov	r3, fp
   180ac:	6818      	ldr	r0, [r3, #0]
   180ae:	47c0      	blx	r8
   180b0:	000b      	movs	r3, r1
   180b2:	0002      	movs	r2, r0
   180b4:	496a      	ldr	r1, [pc, #424]	; (18260 <fn_loop_test+0x278>)
   180b6:	0020      	movs	r0, r4
   180b8:	47b8      	blx	r7
	if (options.current_unit_dist == feet){
   180ba:	464b      	mov	r3, r9
   180bc:	781b      	ldrb	r3, [r3, #0]
		strcat(display_str,"ft");
   180be:	0020      	movs	r0, r4
	if (options.current_unit_dist == feet){
   180c0:	2b00      	cmp	r3, #0
   180c2:	d14d      	bne.n	18160 <fn_loop_test+0x178>
		strcat(display_str,"ft");
   180c4:	9b02      	ldr	r3, [sp, #8]
   180c6:	4798      	blx	r3
   180c8:	2203      	movs	r2, #3
   180ca:	1820      	adds	r0, r4, r0
   180cc:	4962      	ldr	r1, [pc, #392]	; (18258 <fn_loop_test+0x270>)
   180ce:	47b0      	blx	r6
	glcd_tiny_draw_string(0,5,display_str);
   180d0:	0022      	movs	r2, r4
   180d2:	2105      	movs	r1, #5
   180d4:	2000      	movs	r0, #0
   180d6:	47a8      	blx	r5
	sprintf(display_str, "Vertical: %.1f", loop_vertical);
   180d8:	9b03      	ldr	r3, [sp, #12]
   180da:	6818      	ldr	r0, [r3, #0]
   180dc:	47c0      	blx	r8
   180de:	000b      	movs	r3, r1
   180e0:	0002      	movs	r2, r0
   180e2:	4960      	ldr	r1, [pc, #384]	; (18264 <fn_loop_test+0x27c>)
   180e4:	0020      	movs	r0, r4
   180e6:	47b8      	blx	r7
	if (options.current_unit_dist == feet){
   180e8:	464b      	mov	r3, r9
   180ea:	781b      	ldrb	r3, [r3, #0]
		strcat(display_str,"ft");
   180ec:	0020      	movs	r0, r4
	if (options.current_unit_dist == feet){
   180ee:	2b00      	cmp	r3, #0
   180f0:	d048      	beq.n	18184 <fn_loop_test+0x19c>
		strcat(display_str,"m");
   180f2:	9b02      	ldr	r3, [sp, #8]
   180f4:	4798      	blx	r3
   180f6:	2202      	movs	r2, #2
   180f8:	1820      	adds	r0, r4, r0
   180fa:	495b      	ldr	r1, [pc, #364]	; (18268 <fn_loop_test+0x280>)
   180fc:	47b0      	blx	r6
	glcd_tiny_draw_string(0,6,display_str);
   180fe:	0022      	movs	r2, r4
   18100:	2106      	movs	r1, #6
   18102:	2000      	movs	r0, #0
   18104:	47a8      	blx	r5
	sprintf(display_str, "Azimuth: %.1f", loop_azimuth);
   18106:	4653      	mov	r3, sl
   18108:	6818      	ldr	r0, [r3, #0]
   1810a:	47c0      	blx	r8
   1810c:	000b      	movs	r3, r1
   1810e:	0002      	movs	r2, r0
   18110:	4956      	ldr	r1, [pc, #344]	; (1826c <fn_loop_test+0x284>)
   18112:	0020      	movs	r0, r4
   18114:	47b8      	blx	r7
	glcd_tiny_draw_string(0,7,display_str);
   18116:	0022      	movs	r2, r4
   18118:	2107      	movs	r1, #7
   1811a:	2000      	movs	r0, #0
   1811c:	47a8      	blx	r5
	sprintf(display_str, "Done");
   1811e:	2205      	movs	r2, #5
   18120:	4953      	ldr	r1, [pc, #332]	; (18270 <fn_loop_test+0x288>)
   18122:	0020      	movs	r0, r4
   18124:	47b0      	blx	r6
	glcd_tiny_draw_string(100,0,display_str);
   18126:	0022      	movs	r2, r4
   18128:	2100      	movs	r1, #0
   1812a:	2064      	movs	r0, #100	; 0x64
   1812c:	47a8      	blx	r5
	sprintf(display_str, "Abort");
   1812e:	2206      	movs	r2, #6
   18130:	4950      	ldr	r1, [pc, #320]	; (18274 <fn_loop_test+0x28c>)
   18132:	0020      	movs	r0, r4
   18134:	47b0      	blx	r6
	glcd_tiny_draw_string(97,7,display_str);
   18136:	0022      	movs	r2, r4
   18138:	2107      	movs	r1, #7
   1813a:	2061      	movs	r0, #97	; 0x61
   1813c:	47a8      	blx	r5
	glcd_write();
   1813e:	4b4e      	ldr	r3, [pc, #312]	; (18278 <fn_loop_test+0x290>)
   18140:	4798      	blx	r3
}
   18142:	b02f      	add	sp, #188	; 0xbc
   18144:	bc3c      	pop	{r2, r3, r4, r5}
   18146:	4690      	mov	r8, r2
   18148:	4699      	mov	r9, r3
   1814a:	46a2      	mov	sl, r4
   1814c:	46ab      	mov	fp, r5
   1814e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat(display_str,"m");
   18150:	4b40      	ldr	r3, [pc, #256]	; (18254 <fn_loop_test+0x26c>)
   18152:	9302      	str	r3, [sp, #8]
   18154:	4798      	blx	r3
   18156:	2202      	movs	r2, #2
   18158:	1820      	adds	r0, r4, r0
   1815a:	4943      	ldr	r1, [pc, #268]	; (18268 <fn_loop_test+0x280>)
   1815c:	47b0      	blx	r6
   1815e:	e798      	b.n	18092 <fn_loop_test+0xaa>
		strcat(display_str,"m");
   18160:	9b02      	ldr	r3, [sp, #8]
   18162:	4798      	blx	r3
   18164:	2202      	movs	r2, #2
   18166:	1820      	adds	r0, r4, r0
   18168:	493f      	ldr	r1, [pc, #252]	; (18268 <fn_loop_test+0x280>)
   1816a:	47b0      	blx	r6
   1816c:	e7b0      	b.n	180d0 <fn_loop_test+0xe8>
			if (!laser_triggered){
   1816e:	4b43      	ldr	r3, [pc, #268]	; (1827c <fn_loop_test+0x294>)
   18170:	781b      	ldrb	r3, [r3, #0]
   18172:	2b00      	cmp	r3, #0
   18174:	d13c      	bne.n	181f0 <fn_loop_test+0x208>
				rangefinder_on_off(true);
   18176:	2001      	movs	r0, #1
   18178:	4b41      	ldr	r3, [pc, #260]	; (18280 <fn_loop_test+0x298>)
   1817a:	4798      	blx	r3
				laser_on_off(true);
   1817c:	2001      	movs	r0, #1
   1817e:	4b41      	ldr	r3, [pc, #260]	; (18284 <fn_loop_test+0x29c>)
   18180:	4798      	blx	r3
   18182:	e74f      	b.n	18024 <fn_loop_test+0x3c>
		strcat(display_str,"ft");
   18184:	9b02      	ldr	r3, [sp, #8]
   18186:	4798      	blx	r3
   18188:	2203      	movs	r2, #3
   1818a:	1820      	adds	r0, r4, r0
   1818c:	4932      	ldr	r1, [pc, #200]	; (18258 <fn_loop_test+0x270>)
   1818e:	47b0      	blx	r6
   18190:	e7b5      	b.n	180fe <fn_loop_test+0x116>
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
   18192:	2204      	movs	r2, #4
   18194:	4b3c      	ldr	r3, [pc, #240]	; (18288 <fn_loop_test+0x2a0>)
   18196:	615a      	str	r2, [r3, #20]
			current_input = input_state_complete;
   18198:	4b3c      	ldr	r3, [pc, #240]	; (1828c <fn_loop_test+0x2a4>)
   1819a:	3204      	adds	r2, #4
   1819c:	701a      	strb	r2, [r3, #0]
			break;
   1819e:	e741      	b.n	18024 <fn_loop_test+0x3c>
		cal_disp_message();
   181a0:	4b3b      	ldr	r3, [pc, #236]	; (18290 <fn_loop_test+0x2a8>)
   181a2:	4798      	blx	r3
		loop_distance = 0;
   181a4:	4b19      	ldr	r3, [pc, #100]	; (1820c <fn_loop_test+0x224>)
		n_points = 0;
   181a6:	2500      	movs	r5, #0
		loop_distance = 0;
   181a8:	4699      	mov	r9, r3
   181aa:	2300      	movs	r3, #0
   181ac:	464a      	mov	r2, r9
   181ae:	6013      	str	r3, [r2, #0]
		loop_horizontal = 0;
   181b0:	4a18      	ldr	r2, [pc, #96]	; (18214 <fn_loop_test+0x22c>)
		n_points = 0;
   181b2:	4f17      	ldr	r7, [pc, #92]	; (18210 <fn_loop_test+0x228>)
		loop_horizontal = 0;
   181b4:	6013      	str	r3, [r2, #0]
   181b6:	4693      	mov	fp, r2
		loop_vertical = 0;
   181b8:	4a18      	ldr	r2, [pc, #96]	; (1821c <fn_loop_test+0x234>)
   181ba:	4c36      	ldr	r4, [pc, #216]	; (18294 <fn_loop_test+0x2ac>)
   181bc:	6013      	str	r3, [r2, #0]
   181be:	9203      	str	r2, [sp, #12]
		loop_azimuth = 0;
   181c0:	4a17      	ldr	r2, [pc, #92]	; (18220 <fn_loop_test+0x238>)
   181c2:	2100      	movs	r1, #0
   181c4:	6013      	str	r3, [r2, #0]
   181c6:	4692      	mov	sl, r2
   181c8:	22a0      	movs	r2, #160	; 0xa0
   181ca:	4833      	ldr	r0, [pc, #204]	; (18298 <fn_loop_test+0x2b0>)
   181cc:	0052      	lsls	r2, r2, #1
		n_points = 0;
   181ce:	603d      	str	r5, [r7, #0]
   181d0:	47a0      	blx	r4
   181d2:	22a0      	movs	r2, #160	; 0xa0
   181d4:	2100      	movs	r1, #0
   181d6:	0052      	lsls	r2, r2, #1
   181d8:	4830      	ldr	r0, [pc, #192]	; (1829c <fn_loop_test+0x2b4>)
   181da:	47a0      	blx	r4
   181dc:	22a0      	movs	r2, #160	; 0xa0
   181de:	2100      	movs	r1, #0
   181e0:	0052      	lsls	r2, r2, #1
   181e2:	482f      	ldr	r0, [pc, #188]	; (182a0 <fn_loop_test+0x2b8>)
   181e4:	47a0      	blx	r4
		laser_triggered =  false;
   181e6:	4b25      	ldr	r3, [pc, #148]	; (1827c <fn_loop_test+0x294>)
		last_input = input_none;
   181e8:	4c0b      	ldr	r4, [pc, #44]	; (18218 <fn_loop_test+0x230>)
		laser_triggered =  false;
   181ea:	701d      	strb	r5, [r3, #0]
		last_input = input_none;
   181ec:	7025      	strb	r5, [r4, #0]
   181ee:	e711      	b.n	18014 <fn_loop_test+0x2c>
				full_measurement(&temp_meas, true);
   181f0:	2101      	movs	r1, #1
   181f2:	a804      	add	r0, sp, #16
   181f4:	4b2b      	ldr	r3, [pc, #172]	; (182a4 <fn_loop_test+0x2bc>)
   181f6:	4798      	blx	r3
				rangefinder_on_off(false);
   181f8:	2000      	movs	r0, #0
   181fa:	4b21      	ldr	r3, [pc, #132]	; (18280 <fn_loop_test+0x298>)
   181fc:	4798      	blx	r3
				cal_loop_test(&temp_meas);
   181fe:	a804      	add	r0, sp, #16
   18200:	4b29      	ldr	r3, [pc, #164]	; (182a8 <fn_loop_test+0x2c0>)
   18202:	4798      	blx	r3
   18204:	e70e      	b.n	18024 <fn_loop_test+0x3c>
   18206:	46c0      	nop			; (mov r8, r8)
   18208:	200001d0 	.word	0x200001d0
   1820c:	2000376c 	.word	0x2000376c
   18210:	20003054 	.word	0x20003054
   18214:	200043f0 	.word	0x200043f0
   18218:	200043f6 	.word	0x200043f6
   1821c:	20003764 	.word	0x20003764
   18220:	200051f0 	.word	0x200051f0
   18224:	00024180 	.word	0x00024180
   18228:	00014075 	.word	0x00014075
   1822c:	000130dd 	.word	0x000130dd
   18230:	200037f8 	.word	0x200037f8
   18234:	00024480 	.word	0x00024480
   18238:	0001efe9 	.word	0x0001efe9
   1823c:	00014091 	.word	0x00014091
   18240:	00024798 	.word	0x00024798
   18244:	0001f101 	.word	0x0001f101
   18248:	0001eddd 	.word	0x0001eddd
   1824c:	000248d0 	.word	0x000248d0
   18250:	20003770 	.word	0x20003770
   18254:	0001f1e5 	.word	0x0001f1e5
   18258:	00024780 	.word	0x00024780
   1825c:	000248e8 	.word	0x000248e8
   18260:	00024900 	.word	0x00024900
   18264:	00024914 	.word	0x00024914
   18268:	000248e4 	.word	0x000248e4
   1826c:	00024924 	.word	0x00024924
   18270:	00024554 	.word	0x00024554
   18274:	0002455c 	.word	0x0002455c
   18278:	000139cd 	.word	0x000139cd
   1827c:	2000264c 	.word	0x2000264c
   18280:	0000834d 	.word	0x0000834d
   18284:	00008379 	.word	0x00008379
   18288:	40002800 	.word	0x40002800
   1828c:	200043f4 	.word	0x200043f4
   18290:	00017c21 	.word	0x00017c21
   18294:	0001f06d 	.word	0x0001f06d
   18298:	20002144 	.word	0x20002144
   1829c:	200042b0 	.word	0x200042b0
   182a0:	200047d8 	.word	0x200047d8
   182a4:	00008fc9 	.word	0x00008fc9
   182a8:	0000c601 	.word	0x0000c601

000182ac <fn_dist_calibration>:
void fn_dist_calibration(void){
   182ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   182ae:	46de      	mov	lr, fp
   182b0:	4657      	mov	r7, sl
   182b2:	464e      	mov	r6, r9
   182b4:	4645      	mov	r5, r8
   182b6:	b5e0      	push	{r5, r6, r7, lr}
	if (state_change){
   182b8:	4b67      	ldr	r3, [pc, #412]	; (18458 <fn_dist_calibration+0x1ac>)
void fn_dist_calibration(void){
   182ba:	b0af      	sub	sp, #188	; 0xbc
	if (state_change){
   182bc:	781b      	ldrb	r3, [r3, #0]
   182be:	2b00      	cmp	r3, #0
   182c0:	d000      	beq.n	182c4 <fn_dist_calibration+0x18>
   182c2:	e09a      	b.n	183fa <fn_dist_calibration+0x14e>
	switch(last_input){
   182c4:	4c65      	ldr	r4, [pc, #404]	; (1845c <fn_dist_calibration+0x1b0>)
   182c6:	7823      	ldrb	r3, [r4, #0]
   182c8:	b2db      	uxtb	r3, r3
   182ca:	2b01      	cmp	r3, #1
   182cc:	d100      	bne.n	182d0 <fn_dist_calibration+0x24>
   182ce:	e076      	b.n	183be <fn_dist_calibration+0x112>
   182d0:	2b05      	cmp	r3, #5
   182d2:	d100      	bne.n	182d6 <fn_dist_calibration+0x2a>
   182d4:	e0b2      	b.n	1843c <fn_dist_calibration+0x190>
   182d6:	4b62      	ldr	r3, [pc, #392]	; (18460 <fn_dist_calibration+0x1b4>)
   182d8:	9303      	str	r3, [sp, #12]
	last_input = input_none;
   182da:	2300      	movs	r3, #0
   182dc:	7023      	strb	r3, [r4, #0]
	glcd_tiny_set_font(Font5x7,5,7,32,127);
   182de:	337f      	adds	r3, #127	; 0x7f
   182e0:	2207      	movs	r2, #7
   182e2:	2105      	movs	r1, #5
   182e4:	485f      	ldr	r0, [pc, #380]	; (18464 <fn_dist_calibration+0x1b8>)
   182e6:	9300      	str	r3, [sp, #0]
   182e8:	4c5f      	ldr	r4, [pc, #380]	; (18468 <fn_dist_calibration+0x1bc>)
   182ea:	3b5f      	subs	r3, #95	; 0x5f
   182ec:	47a0      	blx	r4
	glcd_clear_buffer();
   182ee:	4b5f      	ldr	r3, [pc, #380]	; (1846c <fn_dist_calibration+0x1c0>)
   182f0:	4798      	blx	r3
	sprintf(display_str, "Calibration Mode");
   182f2:	4c5f      	ldr	r4, [pc, #380]	; (18470 <fn_dist_calibration+0x1c4>)
   182f4:	2211      	movs	r2, #17
   182f6:	495f      	ldr	r1, [pc, #380]	; (18474 <fn_dist_calibration+0x1c8>)
   182f8:	0020      	movs	r0, r4
   182fa:	4f5f      	ldr	r7, [pc, #380]	; (18478 <fn_dist_calibration+0x1cc>)
   182fc:	47b8      	blx	r7
	glcd_tiny_draw_string(0,0,display_str);
   182fe:	0022      	movs	r2, r4
   18300:	2100      	movs	r1, #0
   18302:	2000      	movs	r0, #0
   18304:	4e5d      	ldr	r6, [pc, #372]	; (1847c <fn_dist_calibration+0x1d0>)
   18306:	47b0      	blx	r6
	if (options.current_unit_dist == feet){
   18308:	4b5d      	ldr	r3, [pc, #372]	; (18480 <fn_dist_calibration+0x1d4>)
		sprintf(display_str, " Target %.1f feet",dist_cal_setpoint_ft);
   1830a:	2200      	movs	r2, #0
	if (options.current_unit_dist == feet){
   1830c:	469a      	mov	sl, r3
   1830e:	781b      	ldrb	r3, [r3, #0]
   18310:	2b00      	cmp	r3, #0
   18312:	d16b      	bne.n	183ec <fn_dist_calibration+0x140>
		sprintf(display_str, " Target %.1f feet",dist_cal_setpoint_ft);
   18314:	4d5b      	ldr	r5, [pc, #364]	; (18484 <fn_dist_calibration+0x1d8>)
   18316:	4b5c      	ldr	r3, [pc, #368]	; (18488 <fn_dist_calibration+0x1dc>)
   18318:	495c      	ldr	r1, [pc, #368]	; (1848c <fn_dist_calibration+0x1e0>)
   1831a:	0020      	movs	r0, r4
   1831c:	46a8      	mov	r8, r5
   1831e:	47a8      	blx	r5
	glcd_tiny_draw_string(0,1,display_str);
   18320:	0022      	movs	r2, r4
   18322:	2101      	movs	r1, #1
   18324:	2000      	movs	r0, #0
   18326:	47b0      	blx	r6
   18328:	4b59      	ldr	r3, [pc, #356]	; (18490 <fn_dist_calibration+0x1e4>)
   1832a:	2500      	movs	r5, #0
   1832c:	469b      	mov	fp, r3
   1832e:	4b59      	ldr	r3, [pc, #356]	; (18494 <fn_dist_calibration+0x1e8>)
   18330:	4699      	mov	r9, r3
		sprintf(display_str,"M%d: %2.4f ",k,dist_disp_buf[k]);
   18332:	4a59      	ldr	r2, [pc, #356]	; (18498 <fn_dist_calibration+0x1ec>)
   18334:	00ab      	lsls	r3, r5, #2
   18336:	58d0      	ldr	r0, [r2, r3]
   18338:	47c8      	blx	r9
   1833a:	002a      	movs	r2, r5
   1833c:	9000      	str	r0, [sp, #0]
   1833e:	9101      	str	r1, [sp, #4]
   18340:	4659      	mov	r1, fp
   18342:	0020      	movs	r0, r4
   18344:	47c0      	blx	r8
		if (options.current_unit_dist == feet){
   18346:	4653      	mov	r3, sl
   18348:	781b      	ldrb	r3, [r3, #0]
			strcat(display_str,"ft");
   1834a:	0020      	movs	r0, r4
		if (options.current_unit_dist == feet){
   1834c:	2b00      	cmp	r3, #0
   1834e:	d147      	bne.n	183e0 <fn_dist_calibration+0x134>
			strcat(display_str,"ft");
   18350:	4b52      	ldr	r3, [pc, #328]	; (1849c <fn_dist_calibration+0x1f0>)
   18352:	4798      	blx	r3
   18354:	2203      	movs	r2, #3
   18356:	4952      	ldr	r1, [pc, #328]	; (184a0 <fn_dist_calibration+0x1f4>)
   18358:	1820      	adds	r0, r4, r0
			strcat(display_str,"m");
   1835a:	47b8      	blx	r7
		glcd_tiny_draw_string(0,k+2,display_str);
   1835c:	1ca9      	adds	r1, r5, #2
   1835e:	b2c9      	uxtb	r1, r1
   18360:	0022      	movs	r2, r4
   18362:	2000      	movs	r0, #0
   18364:	3501      	adds	r5, #1
   18366:	47b0      	blx	r6
	for (k=0;k<4;k++){
   18368:	2d04      	cmp	r5, #4
   1836a:	d1e2      	bne.n	18332 <fn_dist_calibration+0x86>
	sprintf(display_str, "Offset: %f", temp_dist_offset);
   1836c:	4b4d      	ldr	r3, [pc, #308]	; (184a4 <fn_dist_calibration+0x1f8>)
   1836e:	6818      	ldr	r0, [r3, #0]
   18370:	47c8      	blx	r9
   18372:	000b      	movs	r3, r1
   18374:	0002      	movs	r2, r0
   18376:	494c      	ldr	r1, [pc, #304]	; (184a8 <fn_dist_calibration+0x1fc>)
   18378:	0020      	movs	r0, r4
   1837a:	47c0      	blx	r8
	glcd_tiny_draw_string(0,6,display_str);
   1837c:	0022      	movs	r2, r4
   1837e:	2106      	movs	r1, #6
   18380:	2000      	movs	r0, #0
   18382:	47b0      	blx	r6
	if (buf_points >= shot_size){
   18384:	9b03      	ldr	r3, [sp, #12]
   18386:	781b      	ldrb	r3, [r3, #0]
   18388:	2b03      	cmp	r3, #3
   1838a:	d907      	bls.n	1839c <fn_dist_calibration+0xf0>
		sprintf(display_str, "Calibration      Done");
   1838c:	2216      	movs	r2, #22
   1838e:	4947      	ldr	r1, [pc, #284]	; (184ac <fn_dist_calibration+0x200>)
   18390:	0020      	movs	r0, r4
   18392:	47b8      	blx	r7
		glcd_tiny_draw_string(0,0,display_str);
   18394:	0022      	movs	r2, r4
   18396:	2100      	movs	r1, #0
   18398:	2000      	movs	r0, #0
   1839a:	47b0      	blx	r6
	sprintf(display_str, "Abort");
   1839c:	2206      	movs	r2, #6
   1839e:	4944      	ldr	r1, [pc, #272]	; (184b0 <fn_dist_calibration+0x204>)
   183a0:	0020      	movs	r0, r4
   183a2:	47b8      	blx	r7
	glcd_tiny_draw_string(97,7,display_str);
   183a4:	0022      	movs	r2, r4
   183a6:	2107      	movs	r1, #7
   183a8:	2061      	movs	r0, #97	; 0x61
   183aa:	47b0      	blx	r6
	glcd_write();
   183ac:	4b41      	ldr	r3, [pc, #260]	; (184b4 <fn_dist_calibration+0x208>)
   183ae:	4798      	blx	r3
}
   183b0:	b02f      	add	sp, #188	; 0xbc
   183b2:	bc3c      	pop	{r2, r3, r4, r5}
   183b4:	4690      	mov	r8, r2
   183b6:	4699      	mov	r9, r3
   183b8:	46a2      	mov	sl, r4
   183ba:	46ab      	mov	fp, r5
   183bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (buf_points >= shot_size){
   183be:	4b28      	ldr	r3, [pc, #160]	; (18460 <fn_dist_calibration+0x1b4>)
   183c0:	9303      	str	r3, [sp, #12]
   183c2:	781b      	ldrb	r3, [r3, #0]
   183c4:	2b03      	cmp	r3, #3
   183c6:	d800      	bhi.n	183ca <fn_dist_calibration+0x11e>
   183c8:	e787      	b.n	182da <fn_dist_calibration+0x2e>
				rangefinder_on_off(false);
   183ca:	2000      	movs	r0, #0
   183cc:	4b3a      	ldr	r3, [pc, #232]	; (184b8 <fn_dist_calibration+0x20c>)
   183ce:	4798      	blx	r3
				cal_dist_process();
   183d0:	4b3a      	ldr	r3, [pc, #232]	; (184bc <fn_dist_calibration+0x210>)
   183d2:	4798      	blx	r3
				save_calibration();
   183d4:	4b3a      	ldr	r3, [pc, #232]	; (184c0 <fn_dist_calibration+0x214>)
   183d6:	4798      	blx	r3
				current_input = input_state_complete;
   183d8:	2208      	movs	r2, #8
   183da:	4b3a      	ldr	r3, [pc, #232]	; (184c4 <fn_dist_calibration+0x218>)
   183dc:	701a      	strb	r2, [r3, #0]
   183de:	e77c      	b.n	182da <fn_dist_calibration+0x2e>
			strcat(display_str,"m");
   183e0:	4b2e      	ldr	r3, [pc, #184]	; (1849c <fn_dist_calibration+0x1f0>)
   183e2:	4798      	blx	r3
   183e4:	2202      	movs	r2, #2
   183e6:	1820      	adds	r0, r4, r0
   183e8:	4937      	ldr	r1, [pc, #220]	; (184c8 <fn_dist_calibration+0x21c>)
   183ea:	e7b6      	b.n	1835a <fn_dist_calibration+0xae>
		sprintf(display_str, " Target %.1f meters.",dist_cal_setpoint_mt);
   183ec:	4d25      	ldr	r5, [pc, #148]	; (18484 <fn_dist_calibration+0x1d8>)
   183ee:	4b37      	ldr	r3, [pc, #220]	; (184cc <fn_dist_calibration+0x220>)
   183f0:	4937      	ldr	r1, [pc, #220]	; (184d0 <fn_dist_calibration+0x224>)
   183f2:	0020      	movs	r0, r4
   183f4:	46a8      	mov	r8, r5
   183f6:	47a8      	blx	r5
   183f8:	e792      	b.n	18320 <fn_dist_calibration+0x74>
		cal_disp_message();
   183fa:	4b36      	ldr	r3, [pc, #216]	; (184d4 <fn_dist_calibration+0x228>)
   183fc:	4798      	blx	r3
		buf_points = 0;
   183fe:	4b18      	ldr	r3, [pc, #96]	; (18460 <fn_dist_calibration+0x1b4>)
			dist_raw_buf[k] = 0;
   18400:	2100      	movs	r1, #0
		buf_points = 0;
   18402:	001a      	movs	r2, r3
   18404:	9303      	str	r3, [sp, #12]
   18406:	2300      	movs	r3, #0
   18408:	7013      	strb	r3, [r2, #0]
		ind_buf = 0;// Circular buffer
   1840a:	4a33      	ldr	r2, [pc, #204]	; (184d8 <fn_dist_calibration+0x22c>)
		last_input = input_none;
   1840c:	4c13      	ldr	r4, [pc, #76]	; (1845c <fn_dist_calibration+0x1b0>)
		ind_buf = 0;// Circular buffer
   1840e:	7013      	strb	r3, [r2, #0]
			dist_raw_buf[k] = 0;
   18410:	4a32      	ldr	r2, [pc, #200]	; (184dc <fn_dist_calibration+0x230>)
   18412:	6011      	str	r1, [r2, #0]
   18414:	6051      	str	r1, [r2, #4]
   18416:	6091      	str	r1, [r2, #8]
   18418:	60d1      	str	r1, [r2, #12]
		laser_triggered =  false;
   1841a:	4a31      	ldr	r2, [pc, #196]	; (184e0 <fn_dist_calibration+0x234>)
   1841c:	7013      	strb	r3, [r2, #0]
		last_input = input_none;
   1841e:	7023      	strb	r3, [r4, #0]
	switch(last_input){
   18420:	7823      	ldrb	r3, [r4, #0]
   18422:	2b05      	cmp	r3, #5
   18424:	d000      	beq.n	18428 <fn_dist_calibration+0x17c>
   18426:	e758      	b.n	182da <fn_dist_calibration+0x2e>
			if (!laser_triggered){
   18428:	7813      	ldrb	r3, [r2, #0]
   1842a:	2b00      	cmp	r3, #0
   1842c:	d10c      	bne.n	18448 <fn_dist_calibration+0x19c>
				rangefinder_on_off(true);
   1842e:	2001      	movs	r0, #1
   18430:	4b21      	ldr	r3, [pc, #132]	; (184b8 <fn_dist_calibration+0x20c>)
   18432:	4798      	blx	r3
				laser_on_off(true);
   18434:	2001      	movs	r0, #1
   18436:	4b2b      	ldr	r3, [pc, #172]	; (184e4 <fn_dist_calibration+0x238>)
   18438:	4798      	blx	r3
   1843a:	e74e      	b.n	182da <fn_dist_calibration+0x2e>
   1843c:	4b08      	ldr	r3, [pc, #32]	; (18460 <fn_dist_calibration+0x1b4>)
   1843e:	4a28      	ldr	r2, [pc, #160]	; (184e0 <fn_dist_calibration+0x234>)
   18440:	9303      	str	r3, [sp, #12]
			if (!laser_triggered){
   18442:	7813      	ldrb	r3, [r2, #0]
   18444:	2b00      	cmp	r3, #0
   18446:	d0f2      	beq.n	1842e <fn_dist_calibration+0x182>
				full_measurement(&temp_meas, false);
   18448:	a804      	add	r0, sp, #16
   1844a:	2100      	movs	r1, #0
   1844c:	4b26      	ldr	r3, [pc, #152]	; (184e8 <fn_dist_calibration+0x23c>)
   1844e:	4798      	blx	r3
				rangefinder_on_off(true);
   18450:	2001      	movs	r0, #1
   18452:	4b19      	ldr	r3, [pc, #100]	; (184b8 <fn_dist_calibration+0x20c>)
   18454:	4798      	blx	r3
   18456:	e740      	b.n	182da <fn_dist_calibration+0x2e>
   18458:	200001d0 	.word	0x200001d0
   1845c:	200043f6 	.word	0x200043f6
   18460:	2000213c 	.word	0x2000213c
   18464:	00024180 	.word	0x00024180
   18468:	00014075 	.word	0x00014075
   1846c:	000130dd 	.word	0x000130dd
   18470:	200037f8 	.word	0x200037f8
   18474:	00024508 	.word	0x00024508
   18478:	0001efe9 	.word	0x0001efe9
   1847c:	00014091 	.word	0x00014091
   18480:	20003770 	.word	0x20003770
   18484:	0001f101 	.word	0x0001f101
   18488:	40080000 	.word	0x40080000
   1848c:	00024814 	.word	0x00024814
   18490:	00024840 	.word	0x00024840
   18494:	0001eddd 	.word	0x0001eddd
   18498:	200036ec 	.word	0x200036ec
   1849c:	0001f1e5 	.word	0x0001f1e5
   184a0:	00024780 	.word	0x00024780
   184a4:	200042a8 	.word	0x200042a8
   184a8:	0002484c 	.word	0x0002484c
   184ac:	00024858 	.word	0x00024858
   184b0:	0002455c 	.word	0x0002455c
   184b4:	000139cd 	.word	0x000139cd
   184b8:	0000834d 	.word	0x0000834d
   184bc:	0000c83d 	.word	0x0000c83d
   184c0:	00007b39 	.word	0x00007b39
   184c4:	200043f4 	.word	0x200043f4
   184c8:	000248e4 	.word	0x000248e4
   184cc:	3ff00000 	.word	0x3ff00000
   184d0:	00024828 	.word	0x00024828
   184d4:	00017c21 	.word	0x00017c21
   184d8:	20003cbc 	.word	0x20003cbc
   184dc:	200043fc 	.word	0x200043fc
   184e0:	2000264c 	.word	0x2000264c
   184e4:	00008379 	.word	0x00008379
   184e8:	00008fc9 	.word	0x00008fc9

000184ec <save_measurement>:
FRESULT save_measurement(struct MEASUREMENT *meas_inst){
   184ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   184ee:	46de      	mov	lr, fp
   184f0:	4657      	mov	r7, sl
   184f2:	4645      	mov	r5, r8
   184f4:	464e      	mov	r6, r9
	sprintf(filename, "20%02x%02x%02x_datafile.csv", current_time.year, current_time.month, current_time.date);
   184f6:	4951      	ldr	r1, [pc, #324]	; (1863c <save_measurement+0x150>)
FRESULT save_measurement(struct MEASUREMENT *meas_inst){
   184f8:	b5e0      	push	{r5, r6, r7, lr}
	sprintf(filename, "20%02x%02x%02x_datafile.csv", current_time.year, current_time.month, current_time.date);
   184fa:	4689      	mov	r9, r1
FRESULT save_measurement(struct MEASUREMENT *meas_inst){
   184fc:	4c50      	ldr	r4, [pc, #320]	; (18640 <save_measurement+0x154>)
	sprintf(filename, "20%02x%02x%02x_datafile.csv", current_time.year, current_time.month, current_time.date);
   184fe:	4d51      	ldr	r5, [pc, #324]	; (18644 <save_measurement+0x158>)
FRESULT save_measurement(struct MEASUREMENT *meas_inst){
   18500:	44a5      	add	sp, r4
	sprintf(filename, "20%02x%02x%02x_datafile.csv", current_time.year, current_time.month, current_time.date);
   18502:	4c51      	ldr	r4, [pc, #324]	; (18648 <save_measurement+0x15c>)
FRESULT save_measurement(struct MEASUREMENT *meas_inst){
   18504:	4680      	mov	r8, r0
	sprintf(filename, "20%02x%02x%02x_datafile.csv", current_time.year, current_time.month, current_time.date);
   18506:	7921      	ldrb	r1, [r4, #4]
   18508:	7963      	ldrb	r3, [r4, #5]
   1850a:	79a2      	ldrb	r2, [r4, #6]
   1850c:	4648      	mov	r0, r9
   1850e:	9100      	str	r1, [sp, #0]
   18510:	494e      	ldr	r1, [pc, #312]	; (1864c <save_measurement+0x160>)
   18512:	47a8      	blx	r5
	fdebug1 = f_open(&file1, filename, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
   18514:	4d4e      	ldr	r5, [pc, #312]	; (18650 <save_measurement+0x164>)
   18516:	4b4f      	ldr	r3, [pc, #316]	; (18654 <save_measurement+0x168>)
   18518:	2203      	movs	r2, #3
   1851a:	4649      	mov	r1, r9
   1851c:	0028      	movs	r0, r5
   1851e:	469a      	mov	sl, r3
   18520:	4798      	blx	r3
   18522:	1e07      	subs	r7, r0, #0
	if ((fdebug1!=FR_OK) && (fdebug1!=FR_NO_FILE)){
   18524:	d166      	bne.n	185f4 <save_measurement+0x108>
   18526:	4b4c      	ldr	r3, [pc, #304]	; (18658 <save_measurement+0x16c>)
   18528:	af0a      	add	r7, sp, #40	; 0x28
   1852a:	469a      	mov	sl, r3
   1852c:	4b4b      	ldr	r3, [pc, #300]	; (1865c <save_measurement+0x170>)
   1852e:	9306      	str	r3, [sp, #24]
   18530:	ab09      	add	r3, sp, #36	; 0x24
   18532:	9307      	str	r3, [sp, #28]
   18534:	4b4a      	ldr	r3, [pc, #296]	; (18660 <save_measurement+0x174>)
   18536:	469b      	mov	fp, r3
	sprintf(write_string_full,"20%02x.%02x.%02x@%02x:%02x:%02x,",
   18538:	7821      	ldrb	r1, [r4, #0]
   1853a:	79a2      	ldrb	r2, [r4, #6]
   1853c:	7963      	ldrb	r3, [r4, #5]
   1853e:	9103      	str	r1, [sp, #12]
   18540:	7861      	ldrb	r1, [r4, #1]
   18542:	4e40      	ldr	r6, [pc, #256]	; (18644 <save_measurement+0x158>)
   18544:	9102      	str	r1, [sp, #8]
   18546:	78a1      	ldrb	r1, [r4, #2]
   18548:	a88a      	add	r0, sp, #552	; 0x228
   1854a:	9101      	str	r1, [sp, #4]
   1854c:	7921      	ldrb	r1, [r4, #4]
   1854e:	9100      	str	r1, [sp, #0]
   18550:	4944      	ldr	r1, [pc, #272]	; (18664 <save_measurement+0x178>)
   18552:	47b0      	blx	r6
	sprintf(write_string_temp," %d, %.3f, %.3f, %.3f,",
   18554:	4944      	ldr	r1, [pc, #272]	; (18668 <save_measurement+0x17c>)
   18556:	4643      	mov	r3, r8
   18558:	4689      	mov	r9, r1
   1855a:	4641      	mov	r1, r8
   1855c:	681b      	ldr	r3, [r3, #0]
   1855e:	6908      	ldr	r0, [r1, #16]
   18560:	001e      	movs	r6, r3
   18562:	47c8      	blx	r9
   18564:	9004      	str	r0, [sp, #16]
   18566:	9105      	str	r1, [sp, #20]
   18568:	4641      	mov	r1, r8
   1856a:	68c8      	ldr	r0, [r1, #12]
   1856c:	47c8      	blx	r9
   1856e:	9002      	str	r0, [sp, #8]
   18570:	9103      	str	r1, [sp, #12]
   18572:	4641      	mov	r1, r8
   18574:	69c8      	ldr	r0, [r1, #28]
   18576:	47c8      	blx	r9
   18578:	0032      	movs	r2, r6
   1857a:	9000      	str	r0, [sp, #0]
   1857c:	9101      	str	r1, [sp, #4]
   1857e:	4b31      	ldr	r3, [pc, #196]	; (18644 <save_measurement+0x158>)
   18580:	493a      	ldr	r1, [pc, #232]	; (1866c <save_measurement+0x180>)
   18582:	0038      	movs	r0, r7
   18584:	4798      	blx	r3
	strcat(write_string_full, write_string_temp);
   18586:	4b3a      	ldr	r3, [pc, #232]	; (18670 <save_measurement+0x184>)
   18588:	0039      	movs	r1, r7
   1858a:	a88a      	add	r0, sp, #552	; 0x228
   1858c:	4798      	blx	r3
	if (options.current_unit_dist == feet){
   1858e:	4653      	mov	r3, sl
   18590:	781b      	ldrb	r3, [r3, #0]
   18592:	2b00      	cmp	r3, #0
   18594:	d04b      	beq.n	1862e <save_measurement+0x142>
		sprintf(write_string_temp," %.3f,", current_time.temperatureC);
   18596:	68e0      	ldr	r0, [r4, #12]
   18598:	47c8      	blx	r9
   1859a:	4c2a      	ldr	r4, [pc, #168]	; (18644 <save_measurement+0x158>)
   1859c:	0002      	movs	r2, r0
   1859e:	000b      	movs	r3, r1
   185a0:	0038      	movs	r0, r7
   185a2:	4934      	ldr	r1, [pc, #208]	; (18674 <save_measurement+0x188>)
   185a4:	47a0      	blx	r4
   185a6:	4c34      	ldr	r4, [pc, #208]	; (18678 <save_measurement+0x18c>)
   185a8:	a88a      	add	r0, sp, #552	; 0x228
   185aa:	47a0      	blx	r4
	strcat(write_string_full, write_string_temp);
   185ac:	ab8a      	add	r3, sp, #552	; 0x228
   185ae:	469c      	mov	ip, r3
   185b0:	0039      	movs	r1, r7
   185b2:	4460      	add	r0, ip
   185b4:	4e31      	ldr	r6, [pc, #196]	; (1867c <save_measurement+0x190>)
   185b6:	47b0      	blx	r6
	strcat(write_string_full, write_string_temp);
   185b8:	0039      	movs	r1, r7
   185ba:	47b0      	blx	r6
	strcat(write_string_full, "\r\n");
   185bc:	2203      	movs	r2, #3
   185be:	4930      	ldr	r1, [pc, #192]	; (18680 <save_measurement+0x194>)
   185c0:	9b06      	ldr	r3, [sp, #24]
   185c2:	4798      	blx	r3
	fdebug2 = f_lseek(&file1, f_size(&file1));
   185c4:	68e9      	ldr	r1, [r5, #12]
   185c6:	4b2f      	ldr	r3, [pc, #188]	; (18684 <save_measurement+0x198>)
   185c8:	0028      	movs	r0, r5
   185ca:	4798      	blx	r3
	fdebug3 = f_write(&file1, write_string_full, strlen(write_string_full), pbw);
   185cc:	a88a      	add	r0, sp, #552	; 0x228
   185ce:	47a0      	blx	r4
   185d0:	9b07      	ldr	r3, [sp, #28]
   185d2:	0002      	movs	r2, r0
   185d4:	a98a      	add	r1, sp, #552	; 0x228
   185d6:	0028      	movs	r0, r5
   185d8:	47d8      	blx	fp
	f_close(&file1);
   185da:	4b2b      	ldr	r3, [pc, #172]	; (18688 <save_measurement+0x19c>)
	fdebug3 = f_write(&file1, write_string_full, strlen(write_string_full), pbw);
   185dc:	0007      	movs	r7, r0
	f_close(&file1);
   185de:	0028      	movs	r0, r5
   185e0:	4798      	blx	r3
}
   185e2:	0038      	movs	r0, r7
   185e4:	4b29      	ldr	r3, [pc, #164]	; (1868c <save_measurement+0x1a0>)
   185e6:	449d      	add	sp, r3
   185e8:	bc3c      	pop	{r2, r3, r4, r5}
   185ea:	4690      	mov	r8, r2
   185ec:	4699      	mov	r9, r3
   185ee:	46a2      	mov	sl, r4
   185f0:	46ab      	mov	fp, r5
   185f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((fdebug1!=FR_OK) && (fdebug1!=FR_NO_FILE)){
   185f4:	2804      	cmp	r0, #4
   185f6:	d1f4      	bne.n	185e2 <save_measurement+0xf6>
		fdebug2 = f_open(&file1, filename, FA_CREATE_NEW | FA_READ | FA_WRITE);
   185f8:	2207      	movs	r2, #7
   185fa:	4649      	mov	r1, r9
   185fc:	0028      	movs	r0, r5
   185fe:	47d0      	blx	sl
   18600:	1e07      	subs	r7, r0, #0
		if(fdebug2!=FR_OK){
   18602:	d118      	bne.n	18636 <save_measurement+0x14a>
		if (options.current_unit_dist == feet){	
   18604:	4b14      	ldr	r3, [pc, #80]	; (18658 <save_measurement+0x16c>)
			sprintf(write_string_temp, "Time-Stamp, Index, Distance (meters), Azimuth (degrees), Inclination (degrees), Temperature (Celsius),  Error Log\r\n");
   18606:	af0a      	add	r7, sp, #40	; 0x28
		if (options.current_unit_dist == feet){	
   18608:	469a      	mov	sl, r3
   1860a:	781b      	ldrb	r3, [r3, #0]
			sprintf(write_string_temp, "Time-Stamp, Index, Distance (meters), Azimuth (degrees), Inclination (degrees), Temperature (Celsius),  Error Log\r\n");
   1860c:	2274      	movs	r2, #116	; 0x74
		if (options.current_unit_dist == feet){	
   1860e:	2b00      	cmp	r3, #0
   18610:	d00f      	beq.n	18632 <save_measurement+0x146>
			sprintf(write_string_temp, "Time-Stamp, Index, Distance (feet), Azimuth (degrees), Inclination (degrees), Temperature (Fahrenheit), Error Log\r\n");
   18612:	491f      	ldr	r1, [pc, #124]	; (18690 <save_measurement+0x1a4>)
   18614:	4b11      	ldr	r3, [pc, #68]	; (1865c <save_measurement+0x170>)
   18616:	0038      	movs	r0, r7
   18618:	9306      	str	r3, [sp, #24]
   1861a:	4798      	blx	r3
			fdebug2 = f_write(&file1, write_string_temp, strlen(write_string_temp), pbw);
   1861c:	4e10      	ldr	r6, [pc, #64]	; (18660 <save_measurement+0x174>)
   1861e:	ab09      	add	r3, sp, #36	; 0x24
   18620:	2273      	movs	r2, #115	; 0x73
   18622:	0039      	movs	r1, r7
   18624:	0028      	movs	r0, r5
   18626:	9307      	str	r3, [sp, #28]
   18628:	46b3      	mov	fp, r6
   1862a:	47b0      	blx	r6
   1862c:	e784      	b.n	18538 <save_measurement+0x4c>
		sprintf(write_string_temp," %.3f,", current_time.temperatureF);
   1862e:	6920      	ldr	r0, [r4, #16]
   18630:	e7b2      	b.n	18598 <save_measurement+0xac>
			sprintf(write_string_temp, "Time-Stamp, Index, Distance (meters), Azimuth (degrees), Inclination (degrees), Temperature (Celsius),  Error Log\r\n");
   18632:	4918      	ldr	r1, [pc, #96]	; (18694 <save_measurement+0x1a8>)
   18634:	e7ee      	b.n	18614 <save_measurement+0x128>
			SD_status = fdebug2;
   18636:	4b18      	ldr	r3, [pc, #96]	; (18698 <save_measurement+0x1ac>)
   18638:	7018      	strb	r0, [r3, #0]
			return fdebug2;
   1863a:	e7d2      	b.n	185e2 <save_measurement+0xf6>
   1863c:	20003784 	.word	0x20003784
   18640:	fffffbd4 	.word	0xfffffbd4
   18644:	0001f101 	.word	0x0001f101
   18648:	200010cc 	.word	0x200010cc
   1864c:	00024d18 	.word	0x00024d18
   18650:	20004ba8 	.word	0x20004ba8
   18654:	00005f9d 	.word	0x00005f9d
   18658:	20003770 	.word	0x20003770
   1865c:	0001efe9 	.word	0x0001efe9
   18660:	00006629 	.word	0x00006629
   18664:	00024e1c 	.word	0x00024e1c
   18668:	0001eddd 	.word	0x0001eddd
   1866c:	00024e40 	.word	0x00024e40
   18670:	0001f189 	.word	0x0001f189
   18674:	00024e50 	.word	0x00024e50
   18678:	0001f1e5 	.word	0x0001f1e5
   1867c:	0001f145 	.word	0x0001f145
   18680:	00023d7c 	.word	0x00023d7c
   18684:	00006a7d 	.word	0x00006a7d
   18688:	00006929 	.word	0x00006929
   1868c:	0000042c 	.word	0x0000042c
   18690:	00024da8 	.word	0x00024da8
   18694:	00024d34 	.word	0x00024d34
   18698:	200043f5 	.word	0x200043f5

0001869c <fn_measure>:
void fn_measure(void){
   1869c:	b570      	push	{r4, r5, r6, lr}
	data_buf_ind = data_buf_ind+1;
   1869e:	4d15      	ldr	r5, [pc, #84]	; (186f4 <fn_measure+0x58>)
   186a0:	782b      	ldrb	r3, [r5, #0]
   186a2:	3301      	adds	r3, #1
   186a4:	b2db      	uxtb	r3, r3
	if (data_buf_ind >= buf_length){data_buf_ind = 0;}
   186a6:	2b09      	cmp	r3, #9
   186a8:	d81e      	bhi.n	186e8 <fn_measure+0x4c>
   186aa:	20a8      	movs	r0, #168	; 0xa8
   186ac:	4358      	muls	r0, r3
   186ae:	4c12      	ldr	r4, [pc, #72]	; (186f8 <fn_measure+0x5c>)
	data_buf_ind = data_buf_ind+1;
   186b0:	702b      	strb	r3, [r5, #0]
   186b2:	1820      	adds	r0, r4, r0
	data_ref = data_ref+1;
   186b4:	4911      	ldr	r1, [pc, #68]	; (186fc <fn_measure+0x60>)
	if (data_ref>= 999){data_ref = 1;}
   186b6:	4e12      	ldr	r6, [pc, #72]	; (18700 <fn_measure+0x64>)
	data_ref = data_ref+1;
   186b8:	680a      	ldr	r2, [r1, #0]
   186ba:	3201      	adds	r2, #1
	if (data_ref>= 999){data_ref = 1;}
   186bc:	42b2      	cmp	r2, r6
   186be:	d900      	bls.n	186c2 <fn_measure+0x26>
   186c0:	2201      	movs	r2, #1
	data_buf[data_buf_ind].index_ref = data_ref;
   186c2:	26a8      	movs	r6, #168	; 0xa8
   186c4:	4373      	muls	r3, r6
	if (data_ref>= 999){data_ref = 1;}
   186c6:	600a      	str	r2, [r1, #0]
	data_buf[data_buf_ind].index_ref = data_ref;
   186c8:	50e2      	str	r2, [r4, r3]
	full_measurement(&data_buf[data_buf_ind], true);
   186ca:	2101      	movs	r1, #1
   186cc:	4b0d      	ldr	r3, [pc, #52]	; (18704 <fn_measure+0x68>)
   186ce:	4798      	blx	r3
	save_measurement(&data_buf[data_buf_ind]);
   186d0:	7828      	ldrb	r0, [r5, #0]
   186d2:	4b0d      	ldr	r3, [pc, #52]	; (18708 <fn_measure+0x6c>)
   186d4:	4370      	muls	r0, r6
   186d6:	1820      	adds	r0, r4, r0
   186d8:	4798      	blx	r3
	rangefinder_on_off(false);
   186da:	2000      	movs	r0, #0
   186dc:	4b0b      	ldr	r3, [pc, #44]	; (1870c <fn_measure+0x70>)
   186de:	4798      	blx	r3
	current_input = input_state_complete;
   186e0:	2208      	movs	r2, #8
   186e2:	4b0b      	ldr	r3, [pc, #44]	; (18710 <fn_measure+0x74>)
   186e4:	701a      	strb	r2, [r3, #0]
}
   186e6:	bd70      	pop	{r4, r5, r6, pc}
	if (data_buf_ind >= buf_length){data_buf_ind = 0;}
   186e8:	2300      	movs	r3, #0
   186ea:	4c03      	ldr	r4, [pc, #12]	; (186f8 <fn_measure+0x5c>)
   186ec:	702b      	strb	r3, [r5, #0]
   186ee:	0020      	movs	r0, r4
   186f0:	e7e0      	b.n	186b4 <fn_measure+0x18>
   186f2:	46c0      	nop			; (mov r8, r8)
   186f4:	20000f9d 	.word	0x20000f9d
   186f8:	2000305c 	.word	0x2000305c
   186fc:	20000fa0 	.word	0x20000fa0
   18700:	000003e6 	.word	0x000003e6
   18704:	00008fc9 	.word	0x00008fc9
   18708:	000184ed 	.word	0x000184ed
   1870c:	0000834d 	.word	0x0000834d
   18710:	200043f4 	.word	0x200043f4

00018714 <configure_SD>:
FRESULT configure_SD(void){
   18714:	b510      	push	{r4, lr}
	sd_mmc_init();
   18716:	4b05      	ldr	r3, [pc, #20]	; (1872c <configure_SD+0x18>)
   18718:	4798      	blx	r3
	disk_status(0);	
   1871a:	4b05      	ldr	r3, [pc, #20]	; (18730 <configure_SD+0x1c>)
   1871c:	2000      	movs	r0, #0
   1871e:	4798      	blx	r3
	fdebug1 = f_mount(0, &FatFS);
   18720:	4904      	ldr	r1, [pc, #16]	; (18734 <configure_SD+0x20>)
   18722:	2000      	movs	r0, #0
   18724:	4b04      	ldr	r3, [pc, #16]	; (18738 <configure_SD+0x24>)
   18726:	4798      	blx	r3
}
   18728:	bd10      	pop	{r4, pc}
   1872a:	46c0      	nop			; (mov r8, r8)
   1872c:	00009a51 	.word	0x00009a51
   18730:	00003d1d 	.word	0x00003d1d
   18734:	20004918 	.word	0x20004918
   18738:	00005f75 	.word	0x00005f75

0001873c <print_data_screen>:
void print_data_screen(void){
   1873c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1873e:	46de      	mov	lr, fp
   18740:	4657      	mov	r7, sl
   18742:	464e      	mov	r6, r9
   18744:	4645      	mov	r5, r8
   18746:	b5e0      	push	{r5, r6, r7, lr}
	get_time();
   18748:	4bb9      	ldr	r3, [pc, #740]	; (18a30 <print_data_screen+0x2f4>)
void print_data_screen(void){
   1874a:	b089      	sub	sp, #36	; 0x24
	get_time();
   1874c:	4798      	blx	r3
	isCharging = getChargerStatus();
   1874e:	4bb9      	ldr	r3, [pc, #740]	; (18a34 <print_data_screen+0x2f8>)
   18750:	4798      	blx	r3
   18752:	1e43      	subs	r3, r0, #1
   18754:	4198      	sbcs	r0, r3
	glcd_tiny_set_font(Font5x7,5,7,32,127);
   18756:	237f      	movs	r3, #127	; 0x7f
	isCharging = getChargerStatus();
   18758:	4fb7      	ldr	r7, [pc, #732]	; (18a38 <print_data_screen+0x2fc>)
	glcd_tiny_set_font(Font5x7,5,7,32,127);
   1875a:	2207      	movs	r2, #7
	isCharging = getChargerStatus();
   1875c:	7038      	strb	r0, [r7, #0]
	glcd_tiny_set_font(Font5x7,5,7,32,127);
   1875e:	2105      	movs	r1, #5
   18760:	9300      	str	r3, [sp, #0]
   18762:	48b6      	ldr	r0, [pc, #728]	; (18a3c <print_data_screen+0x300>)
   18764:	3b5f      	subs	r3, #95	; 0x5f
   18766:	4cb6      	ldr	r4, [pc, #728]	; (18a40 <print_data_screen+0x304>)
   18768:	47a0      	blx	r4
	glcd_clear_buffer();
   1876a:	4bb6      	ldr	r3, [pc, #728]	; (18a44 <print_data_screen+0x308>)
   1876c:	4798      	blx	r3
	if (options.current_unit_temp == fahrenheit){
   1876e:	4bb6      	ldr	r3, [pc, #728]	; (18a48 <print_data_screen+0x30c>)
		sprintf(display_str,"T:%4.1fF", current_time.temperatureF);
   18770:	4cb6      	ldr	r4, [pc, #728]	; (18a4c <print_data_screen+0x310>)
	if (options.current_unit_temp == fahrenheit){
   18772:	785b      	ldrb	r3, [r3, #1]
   18774:	2b05      	cmp	r3, #5
   18776:	d100      	bne.n	1877a <print_data_screen+0x3e>
   18778:	e142      	b.n	18a00 <print_data_screen+0x2c4>
		sprintf(display_str,"T:%4.1fC", current_time.temperatureC);
   1877a:	4bb5      	ldr	r3, [pc, #724]	; (18a50 <print_data_screen+0x314>)
   1877c:	68e0      	ldr	r0, [r4, #12]
   1877e:	9305      	str	r3, [sp, #20]
   18780:	4798      	blx	r3
   18782:	4eb4      	ldr	r6, [pc, #720]	; (18a54 <print_data_screen+0x318>)
   18784:	4db4      	ldr	r5, [pc, #720]	; (18a58 <print_data_screen+0x31c>)
   18786:	0002      	movs	r2, r0
   18788:	000b      	movs	r3, r1
   1878a:	0030      	movs	r0, r6
   1878c:	49b3      	ldr	r1, [pc, #716]	; (18a5c <print_data_screen+0x320>)
   1878e:	9502      	str	r5, [sp, #8]
   18790:	47a8      	blx	r5
	glcd_tiny_draw_string(86,7,display_str);
   18792:	0032      	movs	r2, r6
   18794:	2107      	movs	r1, #7
   18796:	2056      	movs	r0, #86	; 0x56
   18798:	4db1      	ldr	r5, [pc, #708]	; (18a60 <print_data_screen+0x324>)
   1879a:	47a8      	blx	r5
	sprintf(display_str,"%02x:%02x:%02x", current_time.hours, current_time.minutes, current_time.seconds);
   1879c:	7821      	ldrb	r1, [r4, #0]
   1879e:	7863      	ldrb	r3, [r4, #1]
   187a0:	78a2      	ldrb	r2, [r4, #2]
   187a2:	0030      	movs	r0, r6
   187a4:	9100      	str	r1, [sp, #0]
   187a6:	9c02      	ldr	r4, [sp, #8]
   187a8:	49ae      	ldr	r1, [pc, #696]	; (18a64 <print_data_screen+0x328>)
   187aa:	47a0      	blx	r4
	glcd_tiny_draw_string(0,7,display_str);
   187ac:	0032      	movs	r2, r6
   187ae:	2107      	movs	r1, #7
   187b0:	2000      	movs	r0, #0
   187b2:	47a8      	blx	r5
	if (isCharging){
   187b4:	783b      	ldrb	r3, [r7, #0]
   187b6:	2b00      	cmp	r3, #0
   187b8:	d100      	bne.n	187bc <print_data_screen+0x80>
   187ba:	e115      	b.n	189e8 <print_data_screen+0x2ac>
		if (flipper){
   187bc:	2301      	movs	r3, #1
   187be:	2201      	movs	r2, #1
   187c0:	4698      	mov	r8, r3
   187c2:	4fa9      	ldr	r7, [pc, #676]	; (18a68 <print_data_screen+0x32c>)
		glcd_draw_line(49, 64, 49, 54, BLACK);
   187c4:	4ca9      	ldr	r4, [pc, #676]	; (18a6c <print_data_screen+0x330>)
		if (flipper){
   187c6:	783b      	ldrb	r3, [r7, #0]
		glcd_draw_line(49, 64, 49, 54, BLACK);
   187c8:	2140      	movs	r1, #64	; 0x40
		if (flipper){
   187ca:	4053      	eors	r3, r2
   187cc:	703b      	strb	r3, [r7, #0]
		glcd_draw_line(49, 64, 49, 54, BLACK);
   187ce:	4643      	mov	r3, r8
   187d0:	2231      	movs	r2, #49	; 0x31
   187d2:	9300      	str	r3, [sp, #0]
   187d4:	2031      	movs	r0, #49	; 0x31
   187d6:	3335      	adds	r3, #53	; 0x35
   187d8:	47a0      	blx	r4
		glcd_draw_line(49, 54, 83, 54, BLACK);
   187da:	4643      	mov	r3, r8
   187dc:	2253      	movs	r2, #83	; 0x53
   187de:	9300      	str	r3, [sp, #0]
   187e0:	2136      	movs	r1, #54	; 0x36
   187e2:	3335      	adds	r3, #53	; 0x35
   187e4:	2031      	movs	r0, #49	; 0x31
   187e6:	47a0      	blx	r4
		glcd_draw_line(83, 64, 83, 54, BLACK);
   187e8:	4643      	mov	r3, r8
   187ea:	2253      	movs	r2, #83	; 0x53
   187ec:	9300      	str	r3, [sp, #0]
   187ee:	2140      	movs	r1, #64	; 0x40
   187f0:	3335      	adds	r3, #53	; 0x35
   187f2:	2053      	movs	r0, #83	; 0x53
   187f4:	47a0      	blx	r4
	if (flipper){
   187f6:	783b      	ldrb	r3, [r7, #0]
   187f8:	2b00      	cmp	r3, #0
   187fa:	d000      	beq.n	187fe <print_data_screen+0xc2>
   187fc:	e0f8      	b.n	189f0 <print_data_screen+0x2b4>
		sprintf(display_str,"B:%02d", getBatteryLevel());
   187fe:	4b9c      	ldr	r3, [pc, #624]	; (18a70 <print_data_screen+0x334>)
   18800:	4798      	blx	r3
   18802:	499c      	ldr	r1, [pc, #624]	; (18a74 <print_data_screen+0x338>)
   18804:	0002      	movs	r2, r0
   18806:	9b02      	ldr	r3, [sp, #8]
   18808:	0030      	movs	r0, r6
   1880a:	4798      	blx	r3
	glcd_tiny_draw_string(51,7,display_str);
   1880c:	0032      	movs	r2, r6
   1880e:	2107      	movs	r1, #7
   18810:	2033      	movs	r0, #51	; 0x33
   18812:	47a8      	blx	r5
	sprintf(display_str,"REF");
   18814:	4d98      	ldr	r5, [pc, #608]	; (18a78 <print_data_screen+0x33c>)
   18816:	2204      	movs	r2, #4
   18818:	4998      	ldr	r1, [pc, #608]	; (18a7c <print_data_screen+0x340>)
   1881a:	0030      	movs	r0, r6
   1881c:	47a8      	blx	r5
	glcd_draw_string_xy(x1,y1, display_str);
   1881e:	4b98      	ldr	r3, [pc, #608]	; (18a80 <print_data_screen+0x344>)
   18820:	0032      	movs	r2, r6
   18822:	2100      	movs	r1, #0
   18824:	2000      	movs	r0, #0
   18826:	469a      	mov	sl, r3
   18828:	4798      	blx	r3
	sprintf(display_str,"DIST");
   1882a:	2205      	movs	r2, #5
   1882c:	4995      	ldr	r1, [pc, #596]	; (18a84 <print_data_screen+0x348>)
   1882e:	0030      	movs	r0, r6
   18830:	47a8      	blx	r5
	glcd_draw_string_xy(x2,y1,display_str);
   18832:	0032      	movs	r2, r6
   18834:	2100      	movs	r1, #0
   18836:	201c      	movs	r0, #28
   18838:	47d0      	blx	sl
	sprintf(display_str,"AZM");
   1883a:	2204      	movs	r2, #4
   1883c:	4992      	ldr	r1, [pc, #584]	; (18a88 <print_data_screen+0x34c>)
   1883e:	0030      	movs	r0, r6
   18840:	47a8      	blx	r5
	glcd_draw_string_xy(x3, y1, display_str);
   18842:	0032      	movs	r2, r6
   18844:	2100      	movs	r1, #0
   18846:	203f      	movs	r0, #63	; 0x3f
   18848:	47d0      	blx	sl
	glcd_draw_circle(x3+21, y1+2, 2, BLACK);
   1884a:	2301      	movs	r3, #1
   1884c:	4f8f      	ldr	r7, [pc, #572]	; (18a8c <print_data_screen+0x350>)
   1884e:	2202      	movs	r2, #2
   18850:	2102      	movs	r1, #2
   18852:	2054      	movs	r0, #84	; 0x54
   18854:	47b8      	blx	r7
	sprintf(display_str,"INCL");
   18856:	2205      	movs	r2, #5
   18858:	498d      	ldr	r1, [pc, #564]	; (18a90 <print_data_screen+0x354>)
   1885a:	0030      	movs	r0, r6
   1885c:	47a8      	blx	r5
	glcd_draw_line(0, y1+8, 128, y1+8, BLACK);
   1885e:	2501      	movs	r5, #1
	glcd_draw_string_xy(x4, y1, display_str);
   18860:	0032      	movs	r2, r6
   18862:	2100      	movs	r1, #0
   18864:	2062      	movs	r0, #98	; 0x62
   18866:	47d0      	blx	sl
	glcd_draw_circle(x4+26, y1+2, 2, BLACK);
   18868:	2301      	movs	r3, #1
   1886a:	2202      	movs	r2, #2
   1886c:	2102      	movs	r1, #2
   1886e:	207c      	movs	r0, #124	; 0x7c
   18870:	47b8      	blx	r7
	glcd_draw_line(0, y1+8, 128, y1+8, BLACK);
   18872:	2308      	movs	r3, #8
   18874:	2280      	movs	r2, #128	; 0x80
   18876:	2108      	movs	r1, #8
   18878:	2000      	movs	r0, #0
   1887a:	9500      	str	r5, [sp, #0]
   1887c:	47a0      	blx	r4
	glcd_draw_line(0, y2+8, 128, y2+8, BLACK);
   1887e:	2312      	movs	r3, #18
   18880:	2280      	movs	r2, #128	; 0x80
   18882:	2112      	movs	r1, #18
   18884:	2000      	movs	r0, #0
   18886:	9500      	str	r5, [sp, #0]
   18888:	47a0      	blx	r4
	glcd_draw_line(x2-2, 0, x2-2, 53, BLACK);
   1888a:	2335      	movs	r3, #53	; 0x35
   1888c:	221a      	movs	r2, #26
   1888e:	2100      	movs	r1, #0
   18890:	201a      	movs	r0, #26
   18892:	9500      	str	r5, [sp, #0]
   18894:	47a0      	blx	r4
	glcd_draw_line(x3-2, 0, x3-2, 53, BLACK);
   18896:	2335      	movs	r3, #53	; 0x35
   18898:	223d      	movs	r2, #61	; 0x3d
   1889a:	2100      	movs	r1, #0
   1889c:	203d      	movs	r0, #61	; 0x3d
   1889e:	9500      	str	r5, [sp, #0]
   188a0:	47a0      	blx	r4
	glcd_draw_line(x4-2, 0, x4-2, 53, BLACK);
   188a2:	2335      	movs	r3, #53	; 0x35
   188a4:	9500      	str	r5, [sp, #0]
   188a6:	2260      	movs	r2, #96	; 0x60
   188a8:	2100      	movs	r1, #0
   188aa:	2060      	movs	r0, #96	; 0x60
   188ac:	47a0      	blx	r4
   188ae:	230a      	movs	r3, #10
   188b0:	9303      	str	r3, [sp, #12]
   188b2:	9304      	str	r3, [sp, #16]
   188b4:	4b77      	ldr	r3, [pc, #476]	; (18a94 <print_data_screen+0x358>)
	for (i=0;i<num_lines;i++){
   188b6:	2700      	movs	r7, #0
   188b8:	469b      	mov	fp, r3
		temp_index=data_buf_ind-i;
   188ba:	4b77      	ldr	r3, [pc, #476]	; (18a98 <print_data_screen+0x35c>)
		if(current_state==st_aim){//bump everything down to display active reading
   188bc:	4a77      	ldr	r2, [pc, #476]	; (18a9c <print_data_screen+0x360>)
		temp_index=data_buf_ind-i;
   188be:	781c      	ldrb	r4, [r3, #0]
		temp_ref=data_ref-i;
   188c0:	465b      	mov	r3, fp
   188c2:	681b      	ldr	r3, [r3, #0]
		if(current_state==st_aim){//bump everything down to display active reading
   188c4:	7812      	ldrb	r2, [r2, #0]
		temp_index=data_buf_ind-i;
   188c6:	1be4      	subs	r4, r4, r7
		temp_ref=data_ref-i;
   188c8:	1bdb      	subs	r3, r3, r7
		temp_index=data_buf_ind-i;
   188ca:	b2a4      	uxth	r4, r4
		temp_ref=data_ref-i;
   188cc:	b29b      	uxth	r3, r3
		if(current_state==st_aim){//bump everything down to display active reading
   188ce:	2a00      	cmp	r2, #0
   188d0:	d100      	bne.n	188d4 <print_data_screen+0x198>
   188d2:	e077      	b.n	189c4 <print_data_screen+0x288>
		temp_index=data_buf_ind-i;
   188d4:	b224      	sxth	r4, r4
		temp_ref=data_ref-i;
   188d6:	b21b      	sxth	r3, r3
		if (temp_index<0){
   188d8:	2c00      	cmp	r4, #0
   188da:	da00      	bge.n	188de <print_data_screen+0x1a2>
   188dc:	e079      	b.n	189d2 <print_data_screen+0x296>
			}else if(temp_index>=buf_length){
   188de:	2c09      	cmp	r4, #9
   188e0:	dd01      	ble.n	188e6 <print_data_screen+0x1aa>
			temp_index = temp_index-buf_length;
   188e2:	3c0a      	subs	r4, #10
   188e4:	b224      	sxth	r4, r4
		if ((temp_ref)>0){
   188e6:	2b00      	cmp	r3, #0
   188e8:	dd57      	ble.n	1899a <print_data_screen+0x25e>
			else {y_temp=y2+9*i;	}
   188ea:	9b03      	ldr	r3, [sp, #12]
   188ec:	4698      	mov	r8, r3
			if(i<2){y_temp=y2+10*i;}
   188ee:	2f01      	cmp	r7, #1
   188f0:	d800      	bhi.n	188f4 <print_data_screen+0x1b8>
   188f2:	e076      	b.n	189e2 <print_data_screen+0x2a6>
			if((current_state==st_main_display)||(i>0)){//do not print reference and distance for active reading
   188f4:	4b69      	ldr	r3, [pc, #420]	; (18a9c <print_data_screen+0x360>)
   188f6:	781b      	ldrb	r3, [r3, #0]
   188f8:	2b02      	cmp	r3, #2
   188fa:	d002      	beq.n	18902 <print_data_screen+0x1c6>
   188fc:	2f00      	cmp	r7, #0
   188fe:	d100      	bne.n	18902 <print_data_screen+0x1c6>
   18900:	e08b      	b.n	18a1a <print_data_screen+0x2de>
				sprintf(display_str, "%d", data_buf[temp_index].index_ref);//reference
   18902:	25a8      	movs	r5, #168	; 0xa8
   18904:	4365      	muls	r5, r4
   18906:	4b66      	ldr	r3, [pc, #408]	; (18aa0 <print_data_screen+0x364>)
   18908:	4966      	ldr	r1, [pc, #408]	; (18aa4 <print_data_screen+0x368>)
   1890a:	9306      	str	r3, [sp, #24]
   1890c:	595b      	ldr	r3, [r3, r5]
   1890e:	0030      	movs	r0, r6
   18910:	001a      	movs	r2, r3
   18912:	9307      	str	r3, [sp, #28]
   18914:	9b02      	ldr	r3, [sp, #8]
   18916:	4798      	blx	r3
				glcd_draw_string_xy(x1, y_temp, display_str);
   18918:	4642      	mov	r2, r8
   1891a:	466b      	mov	r3, sp
   1891c:	771a      	strb	r2, [r3, #28]
   1891e:	b2d2      	uxtb	r2, r2
   18920:	4690      	mov	r8, r2
   18922:	2000      	movs	r0, #0
   18924:	0032      	movs	r2, r6
   18926:	4641      	mov	r1, r8
   18928:	47d0      	blx	sl
				sprintf(display_str, "%.1f", data_buf[temp_index].distance);//distance
   1892a:	4a5d      	ldr	r2, [pc, #372]	; (18aa0 <print_data_screen+0x364>)
   1892c:	002b      	movs	r3, r5
   1892e:	4694      	mov	ip, r2
   18930:	4463      	add	r3, ip
   18932:	69d8      	ldr	r0, [r3, #28]
   18934:	9a05      	ldr	r2, [sp, #20]
   18936:	9307      	str	r3, [sp, #28]
   18938:	4790      	blx	r2
   1893a:	000b      	movs	r3, r1
   1893c:	495a      	ldr	r1, [pc, #360]	; (18aa8 <print_data_screen+0x36c>)
   1893e:	0002      	movs	r2, r0
   18940:	9d02      	ldr	r5, [sp, #8]
   18942:	0030      	movs	r0, r6
   18944:	4689      	mov	r9, r1
   18946:	47a8      	blx	r5
				glcd_draw_string_xy(x2, y_temp, display_str);
   18948:	0032      	movs	r2, r6
   1894a:	4641      	mov	r1, r8
   1894c:	201c      	movs	r0, #28
   1894e:	47d0      	blx	sl
				if (data_buf[temp_index].num_errors!=0){
   18950:	9b07      	ldr	r3, [sp, #28]
   18952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   18954:	2b00      	cmp	r3, #0
   18956:	d13f      	bne.n	189d8 <print_data_screen+0x29c>
			sprintf(display_str, "%.1f", data_buf[temp_index].azimuth);//Azimuth
   18958:	23a8      	movs	r3, #168	; 0xa8
   1895a:	435c      	muls	r4, r3
   1895c:	9b06      	ldr	r3, [sp, #24]
   1895e:	9d05      	ldr	r5, [sp, #20]
   18960:	469c      	mov	ip, r3
   18962:	0023      	movs	r3, r4
   18964:	4463      	add	r3, ip
   18966:	68d8      	ldr	r0, [r3, #12]
   18968:	9306      	str	r3, [sp, #24]
   1896a:	47a8      	blx	r5
   1896c:	9c02      	ldr	r4, [sp, #8]
   1896e:	000b      	movs	r3, r1
   18970:	0002      	movs	r2, r0
   18972:	4649      	mov	r1, r9
   18974:	0030      	movs	r0, r6
   18976:	47a0      	blx	r4
			glcd_draw_string_xy(x3, y_temp, display_str);
   18978:	0032      	movs	r2, r6
   1897a:	4641      	mov	r1, r8
   1897c:	203f      	movs	r0, #63	; 0x3f
   1897e:	47d0      	blx	sl
			sprintf(display_str, "%.1f", data_buf[temp_index].inclination);//Inclination
   18980:	9b06      	ldr	r3, [sp, #24]
   18982:	6918      	ldr	r0, [r3, #16]
   18984:	47a8      	blx	r5
   18986:	9c02      	ldr	r4, [sp, #8]
   18988:	0002      	movs	r2, r0
   1898a:	000b      	movs	r3, r1
   1898c:	0030      	movs	r0, r6
   1898e:	4649      	mov	r1, r9
   18990:	47a0      	blx	r4
			glcd_draw_string_xy(x4, y_temp, display_str);
   18992:	0032      	movs	r2, r6
   18994:	4641      	mov	r1, r8
   18996:	2062      	movs	r0, #98	; 0x62
   18998:	47d0      	blx	sl
   1899a:	9b04      	ldr	r3, [sp, #16]
	for (i=0;i<num_lines;i++){
   1899c:	3701      	adds	r7, #1
   1899e:	330a      	adds	r3, #10
   189a0:	b29b      	uxth	r3, r3
   189a2:	9304      	str	r3, [sp, #16]
   189a4:	9b03      	ldr	r3, [sp, #12]
   189a6:	b2bf      	uxth	r7, r7
   189a8:	3309      	adds	r3, #9
   189aa:	b29b      	uxth	r3, r3
   189ac:	9303      	str	r3, [sp, #12]
   189ae:	2f05      	cmp	r7, #5
   189b0:	d183      	bne.n	188ba <print_data_screen+0x17e>
	glcd_write();
   189b2:	4b3e      	ldr	r3, [pc, #248]	; (18aac <print_data_screen+0x370>)
   189b4:	4798      	blx	r3
}
   189b6:	b009      	add	sp, #36	; 0x24
   189b8:	bc3c      	pop	{r2, r3, r4, r5}
   189ba:	4690      	mov	r8, r2
   189bc:	4699      	mov	r9, r3
   189be:	46a2      	mov	sl, r4
   189c0:	46ab      	mov	fp, r5
   189c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			temp_index=temp_index+1;
   189c4:	3401      	adds	r4, #1
			temp_ref=temp_ref+1;
   189c6:	3301      	adds	r3, #1
			temp_index=temp_index+1;
   189c8:	b224      	sxth	r4, r4
			temp_ref=temp_ref+1;
   189ca:	b21b      	sxth	r3, r3
		if (temp_index<0){
   189cc:	2c00      	cmp	r4, #0
   189ce:	db00      	blt.n	189d2 <print_data_screen+0x296>
   189d0:	e785      	b.n	188de <print_data_screen+0x1a2>
			temp_index = buf_length+temp_index;
   189d2:	340a      	adds	r4, #10
   189d4:	b224      	sxth	r4, r4
   189d6:	e786      	b.n	188e6 <print_data_screen+0x1aa>
					glcd_draw_string_xy(x1+18, y_temp, "E");				
   189d8:	4a35      	ldr	r2, [pc, #212]	; (18ab0 <print_data_screen+0x374>)
   189da:	4641      	mov	r1, r8
   189dc:	2012      	movs	r0, #18
   189de:	47d0      	blx	sl
   189e0:	e7ba      	b.n	18958 <print_data_screen+0x21c>
			if(i<2){y_temp=y2+10*i;}
   189e2:	9b04      	ldr	r3, [sp, #16]
   189e4:	4698      	mov	r8, r3
   189e6:	e785      	b.n	188f4 <print_data_screen+0x1b8>
		flipper = true;
   189e8:	2201      	movs	r2, #1
   189ea:	4b1f      	ldr	r3, [pc, #124]	; (18a68 <print_data_screen+0x32c>)
   189ec:	4c1f      	ldr	r4, [pc, #124]	; (18a6c <print_data_screen+0x330>)
   189ee:	701a      	strb	r2, [r3, #0]
		sprintf(display_str,"B:%02d%%", getBatteryLevel());		
   189f0:	4b1f      	ldr	r3, [pc, #124]	; (18a70 <print_data_screen+0x334>)
   189f2:	4798      	blx	r3
   189f4:	492f      	ldr	r1, [pc, #188]	; (18ab4 <print_data_screen+0x378>)
   189f6:	0002      	movs	r2, r0
   189f8:	9b02      	ldr	r3, [sp, #8]
   189fa:	0030      	movs	r0, r6
   189fc:	4798      	blx	r3
   189fe:	e705      	b.n	1880c <print_data_screen+0xd0>
		sprintf(display_str,"T:%4.1fF", current_time.temperatureF);
   18a00:	4b13      	ldr	r3, [pc, #76]	; (18a50 <print_data_screen+0x314>)
   18a02:	6920      	ldr	r0, [r4, #16]
   18a04:	9305      	str	r3, [sp, #20]
   18a06:	4798      	blx	r3
   18a08:	4e12      	ldr	r6, [pc, #72]	; (18a54 <print_data_screen+0x318>)
   18a0a:	4d13      	ldr	r5, [pc, #76]	; (18a58 <print_data_screen+0x31c>)
   18a0c:	0002      	movs	r2, r0
   18a0e:	000b      	movs	r3, r1
   18a10:	0030      	movs	r0, r6
   18a12:	4929      	ldr	r1, [pc, #164]	; (18ab8 <print_data_screen+0x37c>)
   18a14:	9502      	str	r5, [sp, #8]
   18a16:	47a8      	blx	r5
   18a18:	e6bb      	b.n	18792 <print_data_screen+0x56>
   18a1a:	4643      	mov	r3, r8
   18a1c:	466a      	mov	r2, sp
   18a1e:	7613      	strb	r3, [r2, #24]
   18a20:	7e13      	ldrb	r3, [r2, #24]
   18a22:	4698      	mov	r8, r3
   18a24:	4b1e      	ldr	r3, [pc, #120]	; (18aa0 <print_data_screen+0x364>)
   18a26:	9306      	str	r3, [sp, #24]
   18a28:	4b1f      	ldr	r3, [pc, #124]	; (18aa8 <print_data_screen+0x36c>)
   18a2a:	4699      	mov	r9, r3
   18a2c:	e794      	b.n	18958 <print_data_screen+0x21c>
   18a2e:	46c0      	nop			; (mov r8, r8)
   18a30:	0000772d 	.word	0x0000772d
   18a34:	000075e5 	.word	0x000075e5
   18a38:	20000fa5 	.word	0x20000fa5
   18a3c:	00024180 	.word	0x00024180
   18a40:	00014075 	.word	0x00014075
   18a44:	000130dd 	.word	0x000130dd
   18a48:	20003770 	.word	0x20003770
   18a4c:	200010cc 	.word	0x200010cc
   18a50:	0001eddd 	.word	0x0001eddd
   18a54:	200037f8 	.word	0x200037f8
   18a58:	0001f101 	.word	0x0001f101
   18a5c:	00024cc8 	.word	0x00024cc8
   18a60:	00014091 	.word	0x00014091
   18a64:	00024cd4 	.word	0x00024cd4
   18a68:	20000fa4 	.word	0x20000fa4
   18a6c:	00013189 	.word	0x00013189
   18a70:	00007565 	.word	0x00007565
   18a74:	00024cf0 	.word	0x00024cf0
   18a78:	0001efe9 	.word	0x0001efe9
   18a7c:	00024cf8 	.word	0x00024cf8
   18a80:	00014039 	.word	0x00014039
   18a84:	00024cfc 	.word	0x00024cfc
   18a88:	00024d04 	.word	0x00024d04
   18a8c:	0001334d 	.word	0x0001334d
   18a90:	00024d08 	.word	0x00024d08
   18a94:	20000fa0 	.word	0x20000fa0
   18a98:	20000f9d 	.word	0x20000f9d
   18a9c:	20003058 	.word	0x20003058
   18aa0:	2000305c 	.word	0x2000305c
   18aa4:	000246b0 	.word	0x000246b0
   18aa8:	0002490c 	.word	0x0002490c
   18aac:	000139cd 	.word	0x000139cd
   18ab0:	00024d10 	.word	0x00024d10
   18ab4:	00024ce4 	.word	0x00024ce4
   18ab8:	00024cbc 	.word	0x00024cbc

00018abc <fn_aim>:
void fn_aim(void){
   18abc:	b510      	push	{r4, lr}
	if (state_change) {
   18abe:	4b0d      	ldr	r3, [pc, #52]	; (18af4 <fn_aim+0x38>)
   18ac0:	781b      	ldrb	r3, [r3, #0]
   18ac2:	2b00      	cmp	r3, #0
   18ac4:	d10f      	bne.n	18ae6 <fn_aim+0x2a>
	temp_index = data_buf_ind+1;
   18ac6:	4b0c      	ldr	r3, [pc, #48]	; (18af8 <fn_aim+0x3c>)
   18ac8:	7818      	ldrb	r0, [r3, #0]
   18aca:	3001      	adds	r0, #1
	if(temp_index>=buf_length){temp_index = 0;}
   18acc:	2809      	cmp	r0, #9
   18ace:	d905      	bls.n	18adc <fn_aim+0x20>
   18ad0:	480a      	ldr	r0, [pc, #40]	; (18afc <fn_aim+0x40>)
	quick_measurement(&data_buf[temp_index]);
   18ad2:	4b0b      	ldr	r3, [pc, #44]	; (18b00 <fn_aim+0x44>)
   18ad4:	4798      	blx	r3
	print_data_screen();
   18ad6:	4b0b      	ldr	r3, [pc, #44]	; (18b04 <fn_aim+0x48>)
   18ad8:	4798      	blx	r3
}
   18ada:	bd10      	pop	{r4, pc}
   18adc:	23a8      	movs	r3, #168	; 0xa8
   18ade:	4358      	muls	r0, r3
   18ae0:	4b06      	ldr	r3, [pc, #24]	; (18afc <fn_aim+0x40>)
   18ae2:	18c0      	adds	r0, r0, r3
   18ae4:	e7f5      	b.n	18ad2 <fn_aim+0x16>
		rangefinder_on_off(true);
   18ae6:	2001      	movs	r0, #1
   18ae8:	4b07      	ldr	r3, [pc, #28]	; (18b08 <fn_aim+0x4c>)
   18aea:	4798      	blx	r3
		laser_on_off(true);
   18aec:	2001      	movs	r0, #1
   18aee:	4b07      	ldr	r3, [pc, #28]	; (18b0c <fn_aim+0x50>)
   18af0:	4798      	blx	r3
   18af2:	e7e8      	b.n	18ac6 <fn_aim+0xa>
   18af4:	200001d0 	.word	0x200001d0
   18af8:	20000f9d 	.word	0x20000f9d
   18afc:	2000305c 	.word	0x2000305c
   18b00:	00008701 	.word	0x00008701
   18b04:	0001873d 	.word	0x0001873d
   18b08:	0000834d 	.word	0x0000834d
   18b0c:	00008379 	.word	0x00008379

00018b10 <fn_main_display>:
	print_data_screen();
   18b10:	4b0a      	ldr	r3, [pc, #40]	; (18b3c <fn_main_display+0x2c>)
void fn_main_display(void){
   18b12:	b510      	push	{r4, lr}
	print_data_screen();
   18b14:	4798      	blx	r3
	if(last_input==input_button2){
   18b16:	4b0a      	ldr	r3, [pc, #40]	; (18b40 <fn_main_display+0x30>)
   18b18:	781a      	ldrb	r2, [r3, #0]
   18b1a:	2a02      	cmp	r2, #2
   18b1c:	d008      	beq.n	18b30 <fn_main_display+0x20>
	}else if(last_input==input_button3){
   18b1e:	781b      	ldrb	r3, [r3, #0]
   18b20:	2b03      	cmp	r3, #3
   18b22:	d000      	beq.n	18b26 <fn_main_display+0x16>
}
   18b24:	bd10      	pop	{r4, pc}
		backlightMinus();
   18b26:	4b07      	ldr	r3, [pc, #28]	; (18b44 <fn_main_display+0x34>)
   18b28:	4798      	blx	r3
			save_user_settings();
   18b2a:	4b07      	ldr	r3, [pc, #28]	; (18b48 <fn_main_display+0x38>)
   18b2c:	4798      	blx	r3
}
   18b2e:	e7f9      	b.n	18b24 <fn_main_display+0x14>
		backlightPlus();
   18b30:	4b06      	ldr	r3, [pc, #24]	; (18b4c <fn_main_display+0x3c>)
   18b32:	4798      	blx	r3
		save_user_settings();
   18b34:	4b04      	ldr	r3, [pc, #16]	; (18b48 <fn_main_display+0x38>)
   18b36:	4798      	blx	r3
   18b38:	e7f4      	b.n	18b24 <fn_main_display+0x14>
   18b3a:	46c0      	nop			; (mov r8, r8)
   18b3c:	0001873d 	.word	0x0001873d
   18b40:	200043f6 	.word	0x200043f6
   18b44:	0000707d 	.word	0x0000707d
   18b48:	00007add 	.word	0x00007add
   18b4c:	00006f5d 	.word	0x00006f5d

00018b50 <config_pins_powerup>:



void config_pins_powerup(void){
   18b50:	b5f0      	push	{r4, r5, r6, r7, lr}
   18b52:	46de      	mov	lr, fp
   18b54:	4657      	mov	r7, sl
   18b56:	464e      	mov	r6, r9
   18b58:	4645      	mov	r5, r8
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   18b5a:	2480      	movs	r4, #128	; 0x80
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   18b5c:	2049      	movs	r0, #73	; 0x49
   18b5e:	2202      	movs	r2, #2
   18b60:	b5e0      	push	{r5, r6, r7, lr}
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   18b62:	4973      	ldr	r1, [pc, #460]	; (18d30 <config_pins_powerup+0x1e0>)
   18b64:	00a4      	lsls	r4, r4, #2
   18b66:	604c      	str	r4, [r1, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   18b68:	5c0b      	ldrb	r3, [r1, r0]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   18b6a:	2510      	movs	r5, #16
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   18b6c:	4313      	orrs	r3, r2
   18b6e:	b2db      	uxtb	r3, r3
   18b70:	540b      	strb	r3, [r1, r0]
	base->WRCONFIG.reg =
   18b72:	4b70      	ldr	r3, [pc, #448]	; (18d34 <config_pins_powerup+0x1e4>)
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   18b74:	2644      	movs	r6, #68	; 0x44
	base->WRCONFIG.reg =
   18b76:	628b      	str	r3, [r1, #40]	; 0x28
	base->WRCONFIG.reg =
   18b78:	4b6f      	ldr	r3, [pc, #444]	; (18d38 <config_pins_powerup+0x1e8>)
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   18b7a:	2780      	movs	r7, #128	; 0x80
	base->WRCONFIG.reg =
   18b7c:	469a      	mov	sl, r3
   18b7e:	4650      	mov	r0, sl
   18b80:	628b      	str	r3, [r1, #40]	; 0x28
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   18b82:	4b6e      	ldr	r3, [pc, #440]	; (18d3c <config_pins_powerup+0x1ec>)
		base->OUTSET.reg = mask;
   18b84:	618c      	str	r4, [r1, #24]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   18b86:	605d      	str	r5, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   18b88:	5d9c      	ldrb	r4, [r3, r6]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   18b8a:	053f      	lsls	r7, r7, #20
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   18b8c:	4314      	orrs	r4, r2
   18b8e:	b2e4      	uxtb	r4, r4
   18b90:	559c      	strb	r4, [r3, r6]
	base->WRCONFIG.reg =
   18b92:	4c6b      	ldr	r4, [pc, #428]	; (18d40 <config_pins_powerup+0x1f0>)
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   18b94:	3602      	adds	r6, #2
	base->WRCONFIG.reg =
   18b96:	629c      	str	r4, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
   18b98:	6298      	str	r0, [r3, #40]	; 0x28
		base->OUTSET.reg = mask;
   18b9a:	619d      	str	r5, [r3, #24]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   18b9c:	3530      	adds	r5, #48	; 0x30
   18b9e:	605d      	str	r5, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   18ba0:	5d9c      	ldrb	r4, [r3, r6]
   18ba2:	b083      	sub	sp, #12
   18ba4:	4314      	orrs	r4, r2
   18ba6:	b2e4      	uxtb	r4, r4
   18ba8:	559c      	strb	r4, [r3, r6]
	base->WRCONFIG.reg =
   18baa:	4c66      	ldr	r4, [pc, #408]	; (18d44 <config_pins_powerup+0x1f4>)
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   18bac:	3601      	adds	r6, #1
	base->WRCONFIG.reg =
   18bae:	629c      	str	r4, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
   18bb0:	6298      	str	r0, [r3, #40]	; 0x28
		base->OUTSET.reg = mask;
   18bb2:	619d      	str	r5, [r3, #24]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   18bb4:	3540      	adds	r5, #64	; 0x40
   18bb6:	605d      	str	r5, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   18bb8:	5d9c      	ldrb	r4, [r3, r6]
   18bba:	4314      	orrs	r4, r2
   18bbc:	b2e4      	uxtb	r4, r4
   18bbe:	559c      	strb	r4, [r3, r6]
	base->WRCONFIG.reg =
   18bc0:	4c61      	ldr	r4, [pc, #388]	; (18d48 <config_pins_powerup+0x1f8>)
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   18bc2:	3e02      	subs	r6, #2
	base->WRCONFIG.reg =
   18bc4:	629c      	str	r4, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
   18bc6:	6298      	str	r0, [r3, #40]	; 0x28
		base->OUTSET.reg = mask;
   18bc8:	619d      	str	r5, [r3, #24]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   18bca:	3d60      	subs	r5, #96	; 0x60
   18bcc:	605d      	str	r5, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   18bce:	5d9c      	ldrb	r4, [r3, r6]
   18bd0:	4314      	orrs	r4, r2
   18bd2:	b2e4      	uxtb	r4, r4
   18bd4:	559c      	strb	r4, [r3, r6]
	base->WRCONFIG.reg =
   18bd6:	4c5d      	ldr	r4, [pc, #372]	; (18d4c <config_pins_powerup+0x1fc>)
   18bd8:	629c      	str	r4, [r3, #40]	; 0x28
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   18bda:	2480      	movs	r4, #128	; 0x80
	base->WRCONFIG.reg =
   18bdc:	6298      	str	r0, [r3, #40]	; 0x28
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   18bde:	205b      	movs	r0, #91	; 0x5b
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   18be0:	0424      	lsls	r4, r4, #16
		base->OUTSET.reg = mask;
   18be2:	619d      	str	r5, [r3, #24]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   18be4:	3537      	adds	r5, #55	; 0x37
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   18be6:	609c      	str	r4, [r3, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   18be8:	5d5e      	ldrb	r6, [r3, r5]
   18bea:	4316      	orrs	r6, r2
   18bec:	b2f6      	uxtb	r6, r6
   18bee:	555e      	strb	r6, [r3, r5]
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
   18bf0:	619c      	str	r4, [r3, #24]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   18bf2:	609f      	str	r7, [r3, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   18bf4:	5c1e      	ldrb	r6, [r3, r0]
   18bf6:	4316      	orrs	r6, r2
   18bf8:	b2f6      	uxtb	r6, r6
   18bfa:	541e      	strb	r6, [r3, r0]
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
   18bfc:	615f      	str	r7, [r3, #20]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   18bfe:	608c      	str	r4, [r1, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   18c00:	5d4e      	ldrb	r6, [r1, r5]
   18c02:	2742      	movs	r7, #66	; 0x42
   18c04:	4316      	orrs	r6, r2
   18c06:	b2f6      	uxtb	r6, r6
   18c08:	554e      	strb	r6, [r1, r5]
   18c0a:	466e      	mov	r6, sp
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   18c0c:	3857      	subs	r0, #87	; 0x57
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
   18c0e:	614c      	str	r4, [r1, #20]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   18c10:	6088      	str	r0, [r1, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   18c12:	5dc8      	ldrb	r0, [r1, r7]
   18c14:	4310      	orrs	r0, r2
   18c16:	71f0      	strb	r0, [r6, #7]
   18c18:	79f0      	ldrb	r0, [r6, #7]
   18c1a:	55c8      	strb	r0, [r1, r7]
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
   18c1c:	2004      	movs	r0, #4
   18c1e:	6188      	str	r0, [r1, #24]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   18c20:	609c      	str	r4, [r3, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   18c22:	5d58      	ldrb	r0, [r3, r5]
   18c24:	4310      	orrs	r0, r2
   18c26:	71f0      	strb	r0, [r6, #7]
   18c28:	79f0      	ldrb	r0, [r6, #7]
   18c2a:	5558      	strb	r0, [r3, r5]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   18c2c:	2580      	movs	r5, #128	; 0x80
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   18c2e:	2052      	movs	r0, #82	; 0x52
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   18c30:	02ed      	lsls	r5, r5, #11
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
   18c32:	619c      	str	r4, [r3, #24]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   18c34:	609d      	str	r5, [r3, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   18c36:	5c1c      	ldrb	r4, [r3, r0]
   18c38:	4314      	orrs	r4, r2
   18c3a:	b2e4      	uxtb	r4, r4
   18c3c:	541c      	strb	r4, [r3, r0]
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
   18c3e:	619d      	str	r5, [r3, #24]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   18c40:	2580      	movs	r5, #128	; 0x80
   18c42:	032d      	lsls	r5, r5, #12
   18c44:	609d      	str	r5, [r3, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   18c46:	3001      	adds	r0, #1
   18c48:	5c1c      	ldrb	r4, [r3, r0]
   18c4a:	4314      	orrs	r4, r2
   18c4c:	b2e4      	uxtb	r4, r4
   18c4e:	541c      	strb	r4, [r3, r0]
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
   18c50:	619d      	str	r5, [r3, #24]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   18c52:	2580      	movs	r5, #128	; 0x80
   18c54:	03ad      	lsls	r5, r5, #14
   18c56:	609d      	str	r5, [r3, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   18c58:	3002      	adds	r0, #2
   18c5a:	5c1c      	ldrb	r4, [r3, r0]
   18c5c:	4314      	orrs	r4, r2
   18c5e:	b2e4      	uxtb	r4, r4
   18c60:	541c      	strb	r4, [r3, r0]
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
   18c62:	619d      	str	r5, [r3, #24]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   18c64:	2580      	movs	r5, #128	; 0x80
   18c66:	036d      	lsls	r5, r5, #13
   18c68:	609d      	str	r5, [r3, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   18c6a:	3801      	subs	r0, #1
   18c6c:	5c1c      	ldrb	r4, [r3, r0]
   18c6e:	4314      	orrs	r4, r2
   18c70:	b2e4      	uxtb	r4, r4
   18c72:	541c      	strb	r4, [r3, r0]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   18c74:	2080      	movs	r0, #128	; 0x80
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
   18c76:	619d      	str	r5, [r3, #24]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   18c78:	254f      	movs	r5, #79	; 0x4f
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   18c7a:	0200      	lsls	r0, r0, #8
   18c7c:	4683      	mov	fp, r0
   18c7e:	6098      	str	r0, [r3, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   18c80:	5d58      	ldrb	r0, [r3, r5]
   18c82:	4310      	orrs	r0, r2
   18c84:	71f0      	strb	r0, [r6, #7]
   18c86:	79f0      	ldrb	r0, [r6, #7]
   18c88:	5558      	strb	r0, [r3, r5]
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
   18c8a:	4658      	mov	r0, fp
   18c8c:	6198      	str	r0, [r3, #24]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   18c8e:	2080      	movs	r0, #128	; 0x80
   18c90:	03c0      	lsls	r0, r0, #15
   18c92:	6098      	str	r0, [r3, #8]
   18c94:	4680      	mov	r8, r0
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   18c96:	2056      	movs	r0, #86	; 0x56
   18c98:	4681      	mov	r9, r0
   18c9a:	5c18      	ldrb	r0, [r3, r0]
   18c9c:	4310      	orrs	r0, r2
   18c9e:	71f0      	strb	r0, [r6, #7]
   18ca0:	79f0      	ldrb	r0, [r6, #7]
   18ca2:	4684      	mov	ip, r0
   18ca4:	4648      	mov	r0, r9
   18ca6:	4664      	mov	r4, ip
   18ca8:	541c      	strb	r4, [r3, r0]
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
   18caa:	4640      	mov	r0, r8
   18cac:	6198      	str	r0, [r3, #24]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   18cae:	6088      	str	r0, [r1, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   18cb0:	4648      	mov	r0, r9
   18cb2:	5c08      	ldrb	r0, [r1, r0]
   18cb4:	4310      	orrs	r0, r2
   18cb6:	71f0      	strb	r0, [r6, #7]
   18cb8:	79f0      	ldrb	r0, [r6, #7]
   18cba:	4684      	mov	ip, r0
   18cbc:	4648      	mov	r0, r9
   18cbe:	4664      	mov	r4, ip
   18cc0:	540c      	strb	r4, [r1, r0]
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
   18cc2:	4640      	mov	r0, r8
   18cc4:	6148      	str	r0, [r1, #20]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   18cc6:	2180      	movs	r1, #128	; 0x80
   18cc8:	01c9      	lsls	r1, r1, #7
   18cca:	6099      	str	r1, [r3, #8]
   18ccc:	468c      	mov	ip, r1
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   18cce:	214e      	movs	r1, #78	; 0x4e
   18cd0:	4688      	mov	r8, r1
   18cd2:	4640      	mov	r0, r8
   18cd4:	5c59      	ldrb	r1, [r3, r1]
   18cd6:	4311      	orrs	r1, r2
   18cd8:	b2c9      	uxtb	r1, r1
   18cda:	5419      	strb	r1, [r3, r0]
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
   18cdc:	4661      	mov	r1, ip
   18cde:	6199      	str	r1, [r3, #24]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   18ce0:	2108      	movs	r1, #8
   18ce2:	6099      	str	r1, [r3, #8]
   18ce4:	468c      	mov	ip, r1
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   18ce6:	313b      	adds	r1, #59	; 0x3b
   18ce8:	4688      	mov	r8, r1
   18cea:	4640      	mov	r0, r8
   18cec:	5c59      	ldrb	r1, [r3, r1]
   18cee:	4311      	orrs	r1, r2
   18cf0:	b2c9      	uxtb	r1, r1
   18cf2:	5419      	strb	r1, [r3, r0]
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
   18cf4:	4661      	mov	r1, ip
   18cf6:	6159      	str	r1, [r3, #20]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   18cf8:	3904      	subs	r1, #4
   18cfa:	6099      	str	r1, [r3, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   18cfc:	5dd9      	ldrb	r1, [r3, r7]
   18cfe:	4311      	orrs	r1, r2
   18d00:	b2c9      	uxtb	r1, r1
   18d02:	55d9      	strb	r1, [r3, r7]
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
   18d04:	2104      	movs	r1, #4
   18d06:	6159      	str	r1, [r3, #20]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   18d08:	4659      	mov	r1, fp
   18d0a:	6059      	str	r1, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   18d0c:	5d59      	ldrb	r1, [r3, r5]
   18d0e:	430a      	orrs	r2, r1
   18d10:	b2d2      	uxtb	r2, r2
   18d12:	555a      	strb	r2, [r3, r5]
	base->WRCONFIG.reg =
   18d14:	4a0e      	ldr	r2, [pc, #56]	; (18d50 <config_pins_powerup+0x200>)
   18d16:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
   18d18:	4652      	mov	r2, sl
   18d1a:	629a      	str	r2, [r3, #40]	; 0x28
		base->OUTSET.reg = mask;
   18d1c:	465a      	mov	r2, fp
   18d1e:	619a      	str	r2, [r3, #24]
	//miscellaneous
	ioport_set_pin_dir(laser_reset, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(laser_reset, false);
	ioport_set_pin_dir(SD_CS, IOPORT_DIR_INPUT);
	ioport_set_pin_mode(SD_CS, IOPORT_MODE_PULLUP);
}
   18d20:	b003      	add	sp, #12
   18d22:	bc3c      	pop	{r2, r3, r4, r5}
   18d24:	4690      	mov	r8, r2
   18d26:	4699      	mov	r9, r3
   18d28:	46a2      	mov	sl, r4
   18d2a:	46ab      	mov	fp, r5
   18d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18d2e:	46c0      	nop			; (mov r8, r8)
   18d30:	40002880 	.word	0x40002880
   18d34:	50060200 	.word	0x50060200
   18d38:	d0060000 	.word	0xd0060000
   18d3c:	40002800 	.word	0x40002800
   18d40:	50060010 	.word	0x50060010
   18d44:	50060040 	.word	0x50060040
   18d48:	50060080 	.word	0x50060080
   18d4c:	50060020 	.word	0x50060020
   18d50:	50068000 	.word	0x50068000

00018d54 <fn_powerup>:
	sleepmgr_sleep(SLEEPMGR_IDLE);
	//sleepmgr_enter_sleep();
	
}

void fn_powerup(void){
   18d54:	b5f0      	push	{r4, r5, r6, r7, lr}
   18d56:	46de      	mov	lr, fp
   18d58:	4657      	mov	r7, sl
   18d5a:	464e      	mov	r6, r9
   18d5c:	4645      	mov	r5, r8
   18d5e:	b5e0      	push	{r5, r6, r7, lr}
	config_pins_powerup();
   18d60:	4b6c      	ldr	r3, [pc, #432]	; (18f14 <fn_powerup+0x1c0>)
void fn_powerup(void){
   18d62:	b085      	sub	sp, #20
	config_pins_powerup();
   18d64:	4798      	blx	r3
	delay_ms(100);
   18d66:	4b6c      	ldr	r3, [pc, #432]	; (18f18 <fn_powerup+0x1c4>)
   18d68:	2064      	movs	r0, #100	; 0x64
   18d6a:	469b      	mov	fp, r3
   18d6c:	4798      	blx	r3
	
	//Debug////////////
	debugRTC = rtc_count_get_count(&rtc1);
   18d6e:	4f6b      	ldr	r7, [pc, #428]	; (18f1c <fn_powerup+0x1c8>)
   18d70:	4e6b      	ldr	r6, [pc, #428]	; (18f20 <fn_powerup+0x1cc>)
   18d72:	0038      	movs	r0, r7
   18d74:	47b0      	blx	r6
   18d76:	4d6b      	ldr	r5, [pc, #428]	; (18f24 <fn_powerup+0x1d0>)
	////////////////
	setup_spi();
   18d78:	4b6b      	ldr	r3, [pc, #428]	; (18f28 <fn_powerup+0x1d4>)
	debugRTC = rtc_count_get_count(&rtc1);
   18d7a:	6028      	str	r0, [r5, #0]
	setup_spi();
   18d7c:	4798      	blx	r3
	configure_i2c_master();
   18d7e:	4b6b      	ldr	r3, [pc, #428]	; (18f2c <fn_powerup+0x1d8>)
   18d80:	4798      	blx	r3
	configure_usart();
   18d82:	4b6b      	ldr	r3, [pc, #428]	; (18f30 <fn_powerup+0x1dc>)
   18d84:	4798      	blx	r3
	configure_usart_callbacks();	
   18d86:	4b6b      	ldr	r3, [pc, #428]	; (18f34 <fn_powerup+0x1e0>)
   18d88:	4798      	blx	r3
	//Debug////////////
	debugRTC = rtc_count_get_count(&rtc1);
   18d8a:	0038      	movs	r0, r7
   18d8c:	47b0      	blx	r6
	////////////////
	load_user_settings();//  Needed for backlight setting
   18d8e:	4b6a      	ldr	r3, [pc, #424]	; (18f38 <fn_powerup+0x1e4>)
	debugRTC = rtc_count_get_count(&rtc1);
   18d90:	6028      	str	r0, [r5, #0]
	load_user_settings();//  Needed for backlight setting
   18d92:	4798      	blx	r3
	backlightOn();
   18d94:	4b69      	ldr	r3, [pc, #420]	; (18f3c <fn_powerup+0x1e8>)
   18d96:	4798      	blx	r3
	extint_chan_get_config_defaults(&config_extint_chan);
   18d98:	4668      	mov	r0, sp
   18d9a:	4b69      	ldr	r3, [pc, #420]	; (18f40 <fn_powerup+0x1ec>)
   18d9c:	4798      	blx	r3
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
   18d9e:	466b      	mov	r3, sp
   18da0:	2201      	movs	r2, #1
	config_extint_chan.filter_input_signal  = false;
   18da2:	2400      	movs	r4, #0
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
   18da4:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   18da6:	466a      	mov	r2, sp
   18da8:	2302      	movs	r3, #2
	config_extint_chan.filter_input_signal  = false;
   18daa:	7294      	strb	r4, [r2, #10]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   18dac:	72d3      	strb	r3, [r2, #11]
	config_extint_chan.filter_input_signal  = false;
   18dae:	466b      	mov	r3, sp
	config_extint_chan.enable_async_edge_detection = true;
   18db0:	2201      	movs	r2, #1
   18db2:	725a      	strb	r2, [r3, #9]
	config_extint_chan.gpio_pin           = PIN_PA07A_EIC_EXTINT7;
   18db4:	2207      	movs	r2, #7
   18db6:	2300      	movs	r3, #0
   18db8:	9200      	str	r2, [sp, #0]
   18dba:	9301      	str	r3, [sp, #4]
	extint_chan_set_config(7, &config_extint_chan);
   18dbc:	4b61      	ldr	r3, [pc, #388]	; (18f44 <fn_powerup+0x1f0>)
   18dbe:	4669      	mov	r1, sp
   18dc0:	2007      	movs	r0, #7
   18dc2:	4698      	mov	r8, r3
   18dc4:	4798      	blx	r3
	config_extint_chan.gpio_pin           = PIN_PA06A_EIC_EXTINT6;
   18dc6:	2306      	movs	r3, #6
	extint_chan_set_config(6, &config_extint_chan);
   18dc8:	4669      	mov	r1, sp
   18dca:	2006      	movs	r0, #6
	config_extint_chan.gpio_pin           = PIN_PA06A_EIC_EXTINT6;
   18dcc:	9300      	str	r3, [sp, #0]
	config_extint_chan.gpio_pin_mux       = MUX_PA06A_EIC_EXTINT6;
   18dce:	9401      	str	r4, [sp, #4]
	extint_chan_set_config(6, &config_extint_chan);
   18dd0:	47c0      	blx	r8
	config_extint_chan.gpio_pin           = PIN_PA04A_EIC_EXTINT4;
   18dd2:	2304      	movs	r3, #4
	extint_chan_set_config(4, &config_extint_chan);
   18dd4:	4669      	mov	r1, sp
   18dd6:	2004      	movs	r0, #4
	config_extint_chan.gpio_pin           = PIN_PA04A_EIC_EXTINT4;
   18dd8:	9300      	str	r3, [sp, #0]
	config_extint_chan.gpio_pin_mux       = MUX_PA04A_EIC_EXTINT4;
   18dda:	9401      	str	r4, [sp, #4]
	extint_chan_set_config(4, &config_extint_chan);
   18ddc:	47c0      	blx	r8
	config_extint_chan.gpio_pin           = PIN_PB09A_EIC_EXTINT9;
   18dde:	2329      	movs	r3, #41	; 0x29
	extint_chan_set_config(9, &config_extint_chan);
   18de0:	4669      	mov	r1, sp
   18de2:	2009      	movs	r0, #9
	config_extint_chan.gpio_pin           = PIN_PB09A_EIC_EXTINT9;
   18de4:	9300      	str	r3, [sp, #0]
	config_extint_chan.gpio_pin_mux       = MUX_PB09A_EIC_EXTINT9;
   18de6:	9401      	str	r4, [sp, #4]
	extint_chan_set_config(9, &config_extint_chan);
   18de8:	47c0      	blx	r8
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
   18dea:	466a      	mov	r2, sp
   18dec:	2303      	movs	r3, #3
	extint_chan_set_config(5, &config_extint_chan);
   18dee:	4669      	mov	r1, sp
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
   18df0:	72d3      	strb	r3, [r2, #11]
	extint_chan_set_config(5, &config_extint_chan);
   18df2:	2005      	movs	r0, #5
	config_extint_chan.gpio_pin           = PIN_PA05A_EIC_EXTINT5;
   18df4:	3302      	adds	r3, #2
   18df6:	9300      	str	r3, [sp, #0]
	config_extint_chan.gpio_pin_mux       = MUX_PA05A_EIC_EXTINT5;
   18df8:	9401      	str	r4, [sp, #4]
	extint_chan_set_config(5, &config_extint_chan);
   18dfa:	47c0      	blx	r8
	extint_register_callback(extint_routine, 7,	EXTINT_CALLBACK_TYPE_DETECT);
   18dfc:	4b52      	ldr	r3, [pc, #328]	; (18f48 <fn_powerup+0x1f4>)
   18dfe:	2200      	movs	r2, #0
   18e00:	469a      	mov	sl, r3
   18e02:	0018      	movs	r0, r3
   18e04:	4b51      	ldr	r3, [pc, #324]	; (18f4c <fn_powerup+0x1f8>)
   18e06:	2107      	movs	r1, #7
   18e08:	4699      	mov	r9, r3
   18e0a:	4798      	blx	r3
	extint_chan_enable_callback(7,EXTINT_CALLBACK_TYPE_DETECT);
   18e0c:	4b50      	ldr	r3, [pc, #320]	; (18f50 <fn_powerup+0x1fc>)
   18e0e:	2100      	movs	r1, #0
   18e10:	2007      	movs	r0, #7
   18e12:	4698      	mov	r8, r3
   18e14:	4798      	blx	r3
	extint_register_callback(extint_routine, 6,	EXTINT_CALLBACK_TYPE_DETECT);
   18e16:	2200      	movs	r2, #0
   18e18:	2106      	movs	r1, #6
   18e1a:	4650      	mov	r0, sl
   18e1c:	47c8      	blx	r9
	extint_chan_enable_callback(6,EXTINT_CALLBACK_TYPE_DETECT);
   18e1e:	2100      	movs	r1, #0
   18e20:	2006      	movs	r0, #6
   18e22:	47c0      	blx	r8
	extint_register_callback(extint_routine, 4,	EXTINT_CALLBACK_TYPE_DETECT);
   18e24:	2200      	movs	r2, #0
   18e26:	2104      	movs	r1, #4
   18e28:	4650      	mov	r0, sl
   18e2a:	47c8      	blx	r9
	extint_chan_enable_callback(4,EXTINT_CALLBACK_TYPE_DETECT);
   18e2c:	2100      	movs	r1, #0
   18e2e:	2004      	movs	r0, #4
   18e30:	47c0      	blx	r8
	extint_register_callback(extint_routine, 9,	EXTINT_CALLBACK_TYPE_DETECT);
   18e32:	2200      	movs	r2, #0
   18e34:	2109      	movs	r1, #9
   18e36:	4650      	mov	r0, sl
   18e38:	47c8      	blx	r9
	extint_chan_enable_callback(9,EXTINT_CALLBACK_TYPE_DETECT);
   18e3a:	2100      	movs	r1, #0
   18e3c:	2009      	movs	r0, #9
   18e3e:	47c0      	blx	r8
	extint_register_callback(extint_routine, 5,	EXTINT_CALLBACK_TYPE_DETECT);
   18e40:	2200      	movs	r2, #0
   18e42:	2105      	movs	r1, #5
   18e44:	4650      	mov	r0, sl
   18e46:	47c8      	blx	r9
	extint_chan_enable_callback(5,EXTINT_CALLBACK_TYPE_DETECT);
   18e48:	2100      	movs	r1, #0
   18e4a:	2005      	movs	r0, #5
   18e4c:	47c0      	blx	r8
	configure_extint_channel();
	configure_extint_callbacks();
	setup_accel(&slave_acc1);
   18e4e:	4b41      	ldr	r3, [pc, #260]	; (18f54 <fn_powerup+0x200>)
   18e50:	4841      	ldr	r0, [pc, #260]	; (18f58 <fn_powerup+0x204>)
   18e52:	4698      	mov	r8, r3
   18e54:	4798      	blx	r3
	setup_accel(&slave_acc2);
   18e56:	4841      	ldr	r0, [pc, #260]	; (18f5c <fn_powerup+0x208>)
   18e58:	47c0      	blx	r8
	setup_mag(&slave_mag1);
   18e5a:	4b41      	ldr	r3, [pc, #260]	; (18f60 <fn_powerup+0x20c>)
   18e5c:	4841      	ldr	r0, [pc, #260]	; (18f64 <fn_powerup+0x210>)
   18e5e:	4698      	mov	r8, r3
   18e60:	4798      	blx	r3
	setup_mag(&slave_mag2);
   18e62:	4841      	ldr	r0, [pc, #260]	; (18f68 <fn_powerup+0x214>)
   18e64:	47c0      	blx	r8
	rangefinder_on_off(false);	
   18e66:	4b41      	ldr	r3, [pc, #260]	; (18f6c <fn_powerup+0x218>)
   18e68:	2000      	movs	r0, #0
   18e6a:	4798      	blx	r3
	//Debug////////////
	debugRTC = rtc_count_get_count(&rtc1);
   18e6c:	0038      	movs	r0, r7
   18e6e:	47b0      	blx	r6
	////////////////
	ext_osc_onoff(true);
   18e70:	4b3f      	ldr	r3, [pc, #252]	; (18f70 <fn_powerup+0x21c>)
	debugRTC = rtc_count_get_count(&rtc1);
   18e72:	6028      	str	r0, [r5, #0]
	ext_osc_onoff(true);
   18e74:	2001      	movs	r0, #1
   18e76:	4798      	blx	r3
	delay_ms(10);	
   18e78:	200a      	movs	r0, #10
   18e7a:	47d8      	blx	fp
	setup_XOSC32k();
   18e7c:	4b3d      	ldr	r3, [pc, #244]	; (18f74 <fn_powerup+0x220>)
   18e7e:	4798      	blx	r3
	clock_32k_source(clock_ext);	
   18e80:	2000      	movs	r0, #0
   18e82:	4b3d      	ldr	r3, [pc, #244]	; (18f78 <fn_powerup+0x224>)
   18e84:	4798      	blx	r3
	configure_timers(st_powerup);
   18e86:	4b3d      	ldr	r3, [pc, #244]	; (18f7c <fn_powerup+0x228>)
   18e88:	2005      	movs	r0, #5
   18e8a:	4798      	blx	r3
	delay_ms(10);
   18e8c:	200a      	movs	r0, #10
   18e8e:	47d8      	blx	fp
	//Debug////////////
	debugRTC = rtc_count_get_count(&rtc1);
   18e90:	0038      	movs	r0, r7
   18e92:	47b0      	blx	r6
	sd_mmc_init();
   18e94:	4b3a      	ldr	r3, [pc, #232]	; (18f80 <fn_powerup+0x22c>)
	debugRTC = rtc_count_get_count(&rtc1);
   18e96:	6028      	str	r0, [r5, #0]
	sd_mmc_init();
   18e98:	4798      	blx	r3
	disk_status(0);	
   18e9a:	4b3a      	ldr	r3, [pc, #232]	; (18f84 <fn_powerup+0x230>)
   18e9c:	2000      	movs	r0, #0
   18e9e:	4798      	blx	r3
	fdebug1 = f_mount(0, &FatFS);
   18ea0:	4939      	ldr	r1, [pc, #228]	; (18f88 <fn_powerup+0x234>)
   18ea2:	4b3a      	ldr	r3, [pc, #232]	; (18f8c <fn_powerup+0x238>)
   18ea4:	2000      	movs	r0, #0
   18ea6:	4798      	blx	r3
	base->WRCONFIG.reg =
   18ea8:	4b39      	ldr	r3, [pc, #228]	; (18f90 <fn_powerup+0x23c>)
   18eaa:	4a3a      	ldr	r2, [pc, #232]	; (18f94 <fn_powerup+0x240>)
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   18eac:	2056      	movs	r0, #86	; 0x56
	base->WRCONFIG.reg =
   18eae:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
   18eb0:	4a39      	ldr	r2, [pc, #228]	; (18f98 <fn_powerup+0x244>)
   18eb2:	629a      	str	r2, [r3, #40]	; 0x28
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   18eb4:	2280      	movs	r2, #128	; 0x80
   18eb6:	03d2      	lsls	r2, r2, #15
   18eb8:	609a      	str	r2, [r3, #8]
   18eba:	4691      	mov	r9, r2
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   18ebc:	5c1a      	ldrb	r2, [r3, r0]
   18ebe:	4690      	mov	r8, r2
   18ec0:	2202      	movs	r2, #2
   18ec2:	4641      	mov	r1, r8
   18ec4:	4311      	orrs	r1, r2
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
   18ec6:	464a      	mov	r2, r9
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   18ec8:	5419      	strb	r1, [r3, r0]
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
   18eca:	615a      	str	r2, [r3, #20]
	
	ioport_reset_pin_mode(BLE_ota);//  Needed to reset pin mode; set in some previous initialization
	ioport_set_pin_dir(BLE_ota, IOPORT_DIR_OUTPUT);//  Needed to reset pin mode; set in some previous initialization
	ioport_set_pin_level(BLE_ota, false);//  Needed to reset pin mode; set in some previous initialization
	
	wdt_enable();
   18ecc:	4b33      	ldr	r3, [pc, #204]	; (18f9c <fn_powerup+0x248>)
   18ece:	4798      	blx	r3
	
	delay_ms(500);
   18ed0:	20fa      	movs	r0, #250	; 0xfa
   18ed2:	0040      	lsls	r0, r0, #1
   18ed4:	47d8      	blx	fp
	//config_spi(LCD);
	glcd_init();
   18ed6:	4b32      	ldr	r3, [pc, #200]	; (18fa0 <fn_powerup+0x24c>)
   18ed8:	4798      	blx	r3
	buttonE_triggered=false;
	current_input = input_state_complete;
   18eda:	2208      	movs	r2, #8
	buttonE_triggered=false;
   18edc:	4b31      	ldr	r3, [pc, #196]	; (18fa4 <fn_powerup+0x250>)
	//Debug////////////
	debugRTC = rtc_count_get_count(&rtc1);
   18ede:	0038      	movs	r0, r7
	buttonE_triggered=false;
   18ee0:	701c      	strb	r4, [r3, #0]
	current_input = input_state_complete;
   18ee2:	4b31      	ldr	r3, [pc, #196]	; (18fa8 <fn_powerup+0x254>)
   18ee4:	701a      	strb	r2, [r3, #0]
	debugRTC = rtc_count_get_count(&rtc1);
   18ee6:	47b0      	blx	r6
	cpu_irq_enable();
   18ee8:	2201      	movs	r2, #1
   18eea:	4b30      	ldr	r3, [pc, #192]	; (18fac <fn_powerup+0x258>)
   18eec:	6028      	str	r0, [r5, #0]
   18eee:	701a      	strb	r2, [r3, #0]
   18ef0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   18ef4:	b662      	cpsie	i
	
	
	system_interrupt_enable_global();
	
	irq_initialize_vectors();
	cpu_irq_enable();
   18ef6:	2201      	movs	r2, #1
   18ef8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   18efa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   18efe:	b662      	cpsie	i
	udc_start();
   18f00:	4b2b      	ldr	r3, [pc, #172]	; (18fb0 <fn_powerup+0x25c>)
   18f02:	4798      	blx	r3
	
}
   18f04:	b005      	add	sp, #20
   18f06:	bc3c      	pop	{r2, r3, r4, r5}
   18f08:	4690      	mov	r8, r2
   18f0a:	4699      	mov	r9, r3
   18f0c:	46a2      	mov	sl, r4
   18f0e:	46ab      	mov	fp, r5
   18f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18f12:	46c0      	nop			; (mov r8, r8)
   18f14:	00018b51 	.word	0x00018b51
   18f18:	000151d9 	.word	0x000151d9
   18f1c:	200015b8 	.word	0x200015b8
   18f20:	0000b279 	.word	0x0000b279
   18f24:	20002288 	.word	0x20002288
   18f28:	00012575 	.word	0x00012575
   18f2c:	000129d5 	.word	0x000129d5
   18f30:	0001277d 	.word	0x0001277d
   18f34:	0001292d 	.word	0x0001292d
   18f38:	000079e1 	.word	0x000079e1
   18f3c:	000072dd 	.word	0x000072dd
   18f40:	0000b065 	.word	0x0000b065
   18f44:	0000b079 	.word	0x0000b079
   18f48:	00019475 	.word	0x00019475
   18f4c:	0000af5d 	.word	0x0000af5d
   18f50:	0000af85 	.word	0x0000af85
   18f54:	000084f1 	.word	0x000084f1
   18f58:	20001168 	.word	0x20001168
   18f5c:	200010e0 	.word	0x200010e0
   18f60:	0000879d 	.word	0x0000879d
   18f64:	2000116c 	.word	0x2000116c
   18f68:	200010c4 	.word	0x200010c4
   18f6c:	0000834d 	.word	0x0000834d
   18f70:	0000780d 	.word	0x0000780d
   18f74:	000076a9 	.word	0x000076a9
   18f78:	000076f9 	.word	0x000076f9
   18f7c:	00009975 	.word	0x00009975
   18f80:	00009a51 	.word	0x00009a51
   18f84:	00003d1d 	.word	0x00003d1d
   18f88:	20004918 	.word	0x20004918
   18f8c:	00005f75 	.word	0x00005f75
   18f90:	40002880 	.word	0x40002880
   18f94:	50020000 	.word	0x50020000
   18f98:	d0020040 	.word	0xd0020040
   18f9c:	00009601 	.word	0x00009601
   18fa0:	00012fa9 	.word	0x00012fa9
   18fa4:	20000f94 	.word	0x20000f94
   18fa8:	200043f4 	.word	0x200043f4
   18fac:	200000ca 	.word	0x200000ca
   18fb0:	0000114d 	.word	0x0000114d

00018fb4 <main>:
{
   18fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18fb6:	46de      	mov	lr, fp
   18fb8:	4657      	mov	r7, sl
   18fba:	464e      	mov	r6, r9
   18fbc:	4645      	mov	r5, r8
	config_pins_powerup();
   18fbe:	4b4d      	ldr	r3, [pc, #308]	; (190f4 <main+0x140>)
{
   18fc0:	b5e0      	push	{r5, r6, r7, lr}
	config_pins_powerup();
   18fc2:	4798      	blx	r3
	system_init();
   18fc4:	4b4c      	ldr	r3, [pc, #304]	; (190f8 <main+0x144>)
   18fc6:	4798      	blx	r3
	delay_init();
   18fc8:	4b4c      	ldr	r3, [pc, #304]	; (190fc <main+0x148>)
   18fca:	4798      	blx	r3
	board_init();
   18fcc:	4b4c      	ldr	r3, [pc, #304]	; (19100 <main+0x14c>)
   18fce:	4798      	blx	r3
	delay_ms(500);	
   18fd0:	20fa      	movs	r0, #250	; 0xfa
   18fd2:	4b4c      	ldr	r3, [pc, #304]	; (19104 <main+0x150>)
   18fd4:	0040      	lsls	r0, r0, #1
   18fd6:	4798      	blx	r3
	setup_rtc();	
   18fd8:	4b4b      	ldr	r3, [pc, #300]	; (19108 <main+0x154>)
   18fda:	4798      	blx	r3
	fn_powerup();
   18fdc:	4b4b      	ldr	r3, [pc, #300]	; (1910c <main+0x158>)
   18fde:	4798      	blx	r3
	debugRTC = rtc_count_get_count(&rtc1);	
   18fe0:	4b4b      	ldr	r3, [pc, #300]	; (19110 <main+0x15c>)
   18fe2:	484c      	ldr	r0, [pc, #304]	; (19114 <main+0x160>)
   18fe4:	4798      	blx	r3
   18fe6:	4b4c      	ldr	r3, [pc, #304]	; (19118 <main+0x164>)
	PM->SLEEPCFG.reg = sleep_mode;
   18fe8:	2680      	movs	r6, #128	; 0x80
   18fea:	6018      	str	r0, [r3, #0]
	setup_charger();
   18fec:	4b4b      	ldr	r3, [pc, #300]	; (1911c <main+0x168>)
   18fee:	4798      	blx	r3
	setup_batt();
   18ff0:	4b4b      	ldr	r3, [pc, #300]	; (19120 <main+0x16c>)
   18ff2:	4798      	blx	r3
		sleepmgr_locks[i] = 0;
   18ff4:	2200      	movs	r2, #0
   18ff6:	4b4b      	ldr	r3, [pc, #300]	; (19124 <main+0x170>)
   18ff8:	05f6      	lsls	r6, r6, #23
   18ffa:	701a      	strb	r2, [r3, #0]
   18ffc:	705a      	strb	r2, [r3, #1]
   18ffe:	709a      	strb	r2, [r3, #2]
   19000:	70da      	strb	r2, [r3, #3]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   19002:	3201      	adds	r2, #1
   19004:	711a      	strb	r2, [r3, #4]
	load_user_settings();
   19006:	4b48      	ldr	r3, [pc, #288]	; (19128 <main+0x174>)
   19008:	4798      	blx	r3
	load_calibration();
   1900a:	4b48      	ldr	r3, [pc, #288]	; (1912c <main+0x178>)
   1900c:	4798      	blx	r3
	current_state = st_main_display;
   1900e:	2302      	movs	r3, #2
   19010:	4c47      	ldr	r4, [pc, #284]	; (19130 <main+0x17c>)
	current_input = input_1sec;
   19012:	4f48      	ldr	r7, [pc, #288]	; (19134 <main+0x180>)
	current_state = st_main_display;
   19014:	7023      	strb	r3, [r4, #0]
	current_input = input_1sec;
   19016:	3305      	adds	r3, #5
   19018:	703b      	strb	r3, [r7, #0]
   1901a:	4b47      	ldr	r3, [pc, #284]	; (19138 <main+0x184>)
   1901c:	4d47      	ldr	r5, [pc, #284]	; (1913c <main+0x188>)
   1901e:	469a      	mov	sl, r3
   19020:	4b47      	ldr	r3, [pc, #284]	; (19140 <main+0x18c>)
   19022:	4698      	mov	r8, r3
   19024:	4b47      	ldr	r3, [pc, #284]	; (19144 <main+0x190>)
   19026:	469b      	mov	fp, r3
		state_change = false;
   19028:	2300      	movs	r3, #0
   1902a:	4699      	mov	r9, r3
		while ((current_input==input_none)){
   1902c:	783b      	ldrb	r3, [r7, #0]
   1902e:	2b00      	cmp	r3, #0
   19030:	d11f      	bne.n	19072 <main+0xbe>
			if (usb_transaction_requested){
   19032:	4653      	mov	r3, sl
   19034:	781b      	ldrb	r3, [r3, #0]
   19036:	2b00      	cmp	r3, #0
   19038:	d004      	beq.n	19044 <main+0x90>
				while(udi_msc_process_trans());
   1903a:	47a8      	blx	r5
   1903c:	2800      	cmp	r0, #0
   1903e:	d1fc      	bne.n	1903a <main+0x86>
				usb_transaction_requested = false;				
   19040:	4653      	mov	r3, sl
   19042:	7018      	strb	r0, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
   19044:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   19046:	f3bf 8f5f 	dmb	sy

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
   1904a:	4643      	mov	r3, r8
   1904c:	464a      	mov	r2, r9
   1904e:	701a      	strb	r2, [r3, #0]
   19050:	2302      	movs	r3, #2
   19052:	7073      	strb	r3, [r6, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
   19054:	7873      	ldrb	r3, [r6, #1]
   19056:	2b02      	cmp	r3, #2
   19058:	d1fc      	bne.n	19054 <main+0xa0>

	/* Enter the sleep mode. */
	switch (sleep_mode) {
	case SLEEPMGR_IDLE:
		system_set_sleepmode(SYSTEM_SLEEPMODE_IDLE);
		cpu_irq_enable();
   1905a:	4643      	mov	r3, r8
   1905c:	2201      	movs	r2, #1
   1905e:	701a      	strb	r2, [r3, #0]
   19060:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   19064:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   19066:	f3bf 8f4f 	dsb	sy
	__WFI();
   1906a:	bf30      	wfi
		while ((current_input==input_none)){
   1906c:	783b      	ldrb	r3, [r7, #0]
   1906e:	2b00      	cmp	r3, #0
   19070:	d0df      	beq.n	19032 <main+0x7e>
		wdt_reset_count();//******************debug
   19072:	4b35      	ldr	r3, [pc, #212]	; (19148 <main+0x194>)
   19074:	4798      	blx	r3
		debug2++;
   19076:	465b      	mov	r3, fp
   19078:	465a      	mov	r2, fp
   1907a:	681b      	ldr	r3, [r3, #0]
   1907c:	3301      	adds	r3, #1
   1907e:	6013      	str	r3, [r2, #0]
		idle_timeout();//Will produce input = input_powerdown if idle
   19080:	4b32      	ldr	r3, [pc, #200]	; (1914c <main+0x198>)
   19082:	4798      	blx	r3
		state_change = false;
   19084:	464a      	mov	r2, r9
   19086:	4b32      	ldr	r3, [pc, #200]	; (19150 <main+0x19c>)
   19088:	701a      	strb	r2, [r3, #0]
   1908a:	4b32      	ldr	r3, [pc, #200]	; (19154 <main+0x1a0>)
   1908c:	2200      	movs	r2, #0
   1908e:	e003      	b.n	19098 <main+0xe4>
   19090:	3201      	adds	r2, #1
   19092:	3303      	adds	r3, #3
		for (i=0; i<(sizeof(state_nextstate)/sizeof(STATE_NEXTSTATE));i++){
   19094:	2a57      	cmp	r2, #87	; 0x57
   19096:	d014      	beq.n	190c2 <main+0x10e>
			if((current_state==state_nextstate[i].current) && (current_input==state_nextstate[i].input)){
   19098:	7821      	ldrb	r1, [r4, #0]
   1909a:	7818      	ldrb	r0, [r3, #0]
   1909c:	4288      	cmp	r0, r1
   1909e:	d1f7      	bne.n	19090 <main+0xdc>
   190a0:	7839      	ldrb	r1, [r7, #0]
   190a2:	7858      	ldrb	r0, [r3, #1]
   190a4:	4288      	cmp	r0, r1
   190a6:	d1f3      	bne.n	19090 <main+0xdc>
				if(current_state!=state_nextstate[i].next){
   190a8:	0053      	lsls	r3, r2, #1
   190aa:	189a      	adds	r2, r3, r2
   190ac:	4b29      	ldr	r3, [pc, #164]	; (19154 <main+0x1a0>)
   190ae:	469c      	mov	ip, r3
   190b0:	4462      	add	r2, ip
   190b2:	7893      	ldrb	r3, [r2, #2]
   190b4:	7822      	ldrb	r2, [r4, #0]
   190b6:	4293      	cmp	r3, r2
   190b8:	d003      	beq.n	190c2 <main+0x10e>
					state_change = true;
   190ba:	2201      	movs	r2, #1
					current_state = state_nextstate[i].next;
   190bc:	7023      	strb	r3, [r4, #0]
					state_change = true;
   190be:	4b24      	ldr	r3, [pc, #144]	; (19150 <main+0x19c>)
   190c0:	701a      	strb	r2, [r3, #0]
		last_input = current_input;
   190c2:	783b      	ldrb	r3, [r7, #0]
   190c4:	4a24      	ldr	r2, [pc, #144]	; (19158 <main+0x1a4>)
   190c6:	b2db      	uxtb	r3, r3
   190c8:	7013      	strb	r3, [r2, #0]
		current_input = input_none;
   190ca:	464b      	mov	r3, r9
   190cc:	4a23      	ldr	r2, [pc, #140]	; (1915c <main+0x1a8>)
   190ce:	703b      	strb	r3, [r7, #0]
   190d0:	2300      	movs	r3, #0
   190d2:	e003      	b.n	190dc <main+0x128>
   190d4:	3301      	adds	r3, #1
   190d6:	3208      	adds	r2, #8
		for(i=0;i<(sizeof(state_functions)/sizeof(STATE_FUNCTIONS));i++){
   190d8:	2b16      	cmp	r3, #22
   190da:	d0a7      	beq.n	1902c <main+0x78>
			if(current_state==state_functions[i].current){
   190dc:	7821      	ldrb	r1, [r4, #0]
   190de:	7810      	ldrb	r0, [r2, #0]
   190e0:	4288      	cmp	r0, r1
   190e2:	d1f7      	bne.n	190d4 <main+0x120>
				state_functions[i].Function();				
   190e4:	4a1d      	ldr	r2, [pc, #116]	; (1915c <main+0x1a8>)
   190e6:	00db      	lsls	r3, r3, #3
   190e8:	4694      	mov	ip, r2
   190ea:	4463      	add	r3, ip
   190ec:	685b      	ldr	r3, [r3, #4]
   190ee:	4798      	blx	r3
				break;
   190f0:	e79c      	b.n	1902c <main+0x78>
   190f2:	46c0      	nop			; (mov r8, r8)
   190f4:	00018b51 	.word	0x00018b51
   190f8:	00015a35 	.word	0x00015a35
   190fc:	00015169 	.word	0x00015169
   19100:	00000115 	.word	0x00000115
   19104:	000151d9 	.word	0x000151d9
   19108:	000095b9 	.word	0x000095b9
   1910c:	00018d55 	.word	0x00018d55
   19110:	0000b279 	.word	0x0000b279
   19114:	200015b8 	.word	0x200015b8
   19118:	20002288 	.word	0x20002288
   1911c:	000075b5 	.word	0x000075b5
   19120:	00007521 	.word	0x00007521
   19124:	20001638 	.word	0x20001638
   19128:	000079e1 	.word	0x000079e1
   1912c:	00007ebd 	.word	0x00007ebd
   19130:	20003058 	.word	0x20003058
   19134:	200043f4 	.word	0x200043f4
   19138:	20000fc0 	.word	0x20000fc0
   1913c:	00000e29 	.word	0x00000e29
   19140:	200000ca 	.word	0x200000ca
   19144:	20003760 	.word	0x20003760
   19148:	00003c15 	.word	0x00003c15
   1914c:	00009645 	.word	0x00009645
   19150:	200001d0 	.word	0x200001d0
   19154:	20000284 	.word	0x20000284
   19158:	200043f6 	.word	0x200043f6
   1915c:	200001d4 	.word	0x200001d4

00019160 <config_pins_powerdown>:
void config_pins_powerdown(void){
   19160:	b5f0      	push	{r4, r5, r6, r7, lr}
   19162:	46c6      	mov	lr, r8
	base->WRCONFIG.reg =
   19164:	4967      	ldr	r1, [pc, #412]	; (19304 <config_pins_powerdown+0x1a4>)
   19166:	4b68      	ldr	r3, [pc, #416]	; (19308 <config_pins_powerdown+0x1a8>)
   19168:	b500      	push	{lr}
	base->WRCONFIG.reg =
   1916a:	4868      	ldr	r0, [pc, #416]	; (1930c <config_pins_powerdown+0x1ac>)
	base->WRCONFIG.reg =
   1916c:	628b      	str	r3, [r1, #40]	; 0x28
   1916e:	4f68      	ldr	r7, [pc, #416]	; (19310 <config_pins_powerdown+0x1b0>)
   19170:	4b68      	ldr	r3, [pc, #416]	; (19314 <config_pins_powerdown+0x1b4>)
	base->WRCONFIG.reg =
   19172:	6288      	str	r0, [r1, #40]	; 0x28
	base->WRCONFIG.reg =
   19174:	628f      	str	r7, [r1, #40]	; 0x28
	base->WRCONFIG.reg =
   19176:	6288      	str	r0, [r1, #40]	; 0x28
	base->WRCONFIG.reg =
   19178:	628b      	str	r3, [r1, #40]	; 0x28
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   1917a:	2380      	movs	r3, #128	; 0x80
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   1917c:	244a      	movs	r4, #74	; 0x4a
   1917e:	2202      	movs	r2, #2
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   19180:	00db      	lsls	r3, r3, #3
	base->WRCONFIG.reg =
   19182:	6288      	str	r0, [r1, #40]	; 0x28
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   19184:	604b      	str	r3, [r1, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   19186:	5d0b      	ldrb	r3, [r1, r4]
   19188:	2548      	movs	r5, #72	; 0x48
   1918a:	4313      	orrs	r3, r2
   1918c:	b2db      	uxtb	r3, r3
   1918e:	550b      	strb	r3, [r1, r4]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   19190:	2380      	movs	r3, #128	; 0x80
   19192:	005b      	lsls	r3, r3, #1
   19194:	604b      	str	r3, [r1, #4]
   19196:	4698      	mov	r8, r3
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   19198:	5d4b      	ldrb	r3, [r1, r5]
   1919a:	3401      	adds	r4, #1
   1919c:	4313      	orrs	r3, r2
   1919e:	b2db      	uxtb	r3, r3
   191a0:	554b      	strb	r3, [r1, r5]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   191a2:	2380      	movs	r3, #128	; 0x80
   191a4:	011b      	lsls	r3, r3, #4
   191a6:	604b      	str	r3, [r1, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   191a8:	5d0b      	ldrb	r3, [r1, r4]
   191aa:	4313      	orrs	r3, r2
   191ac:	b2db      	uxtb	r3, r3
   191ae:	550b      	strb	r3, [r1, r4]
	base->WRCONFIG.reg =
   191b0:	4b59      	ldr	r3, [pc, #356]	; (19318 <config_pins_powerdown+0x1b8>)
   191b2:	4c5a      	ldr	r4, [pc, #360]	; (1931c <config_pins_powerdown+0x1bc>)
   191b4:	629c      	str	r4, [r3, #40]	; 0x28
   191b6:	4c5a      	ldr	r4, [pc, #360]	; (19320 <config_pins_powerdown+0x1c0>)
	base->WRCONFIG.reg =
   191b8:	6298      	str	r0, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
   191ba:	629c      	str	r4, [r3, #40]	; 0x28
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   191bc:	2480      	movs	r4, #128	; 0x80
   191be:	0164      	lsls	r4, r4, #5
	base->WRCONFIG.reg =
   191c0:	6298      	str	r0, [r3, #40]	; 0x28
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   191c2:	605c      	str	r4, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   191c4:	244c      	movs	r4, #76	; 0x4c
   191c6:	46a4      	mov	ip, r4
   191c8:	4666      	mov	r6, ip
   191ca:	5d1c      	ldrb	r4, [r3, r4]
   191cc:	4314      	orrs	r4, r2
   191ce:	b2e4      	uxtb	r4, r4
   191d0:	559c      	strb	r4, [r3, r6]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   191d2:	2480      	movs	r4, #128	; 0x80
   191d4:	01a4      	lsls	r4, r4, #6
   191d6:	605c      	str	r4, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   191d8:	244d      	movs	r4, #77	; 0x4d
   191da:	46a4      	mov	ip, r4
   191dc:	4666      	mov	r6, ip
   191de:	5d1c      	ldrb	r4, [r3, r4]
   191e0:	4314      	orrs	r4, r2
   191e2:	b2e4      	uxtb	r4, r4
   191e4:	559c      	strb	r4, [r3, r6]
	base->WRCONFIG.reg =
   191e6:	629f      	str	r7, [r3, #40]	; 0x28
   191e8:	4c4e      	ldr	r4, [pc, #312]	; (19324 <config_pins_powerdown+0x1c4>)
	base->WRCONFIG.reg =
   191ea:	4f4f      	ldr	r7, [pc, #316]	; (19328 <config_pins_powerdown+0x1c8>)
   191ec:	6298      	str	r0, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
   191ee:	629c      	str	r4, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
   191f0:	629f      	str	r7, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
   191f2:	4f4e      	ldr	r7, [pc, #312]	; (1932c <config_pins_powerdown+0x1cc>)
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   191f4:	3605      	adds	r6, #5
	base->WRCONFIG.reg =
   191f6:	629f      	str	r7, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
   191f8:	6298      	str	r0, [r3, #40]	; 0x28
   191fa:	484d      	ldr	r0, [pc, #308]	; (19330 <config_pins_powerdown+0x1d0>)
	base->WRCONFIG.reg =
   191fc:	629c      	str	r4, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
   191fe:	6298      	str	r0, [r3, #40]	; 0x28
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   19200:	4640      	mov	r0, r8
   19202:	6058      	str	r0, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   19204:	5d58      	ldrb	r0, [r3, r5]
   19206:	2450      	movs	r4, #80	; 0x50
   19208:	4310      	orrs	r0, r2
   1920a:	b2c0      	uxtb	r0, r0
   1920c:	5558      	strb	r0, [r3, r5]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   1920e:	2080      	movs	r0, #128	; 0x80
   19210:	0240      	lsls	r0, r0, #9
   19212:	6058      	str	r0, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   19214:	5d18      	ldrb	r0, [r3, r4]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   19216:	2580      	movs	r5, #128	; 0x80
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   19218:	4310      	orrs	r0, r2
   1921a:	b2c0      	uxtb	r0, r0
   1921c:	5518      	strb	r0, [r3, r4]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   1921e:	2080      	movs	r0, #128	; 0x80
   19220:	0080      	lsls	r0, r0, #2
   19222:	6058      	str	r0, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   19224:	3c07      	subs	r4, #7
   19226:	5d18      	ldrb	r0, [r3, r4]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   19228:	042d      	lsls	r5, r5, #16
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   1922a:	4310      	orrs	r0, r2
   1922c:	b2c0      	uxtb	r0, r0
   1922e:	5518      	strb	r0, [r3, r4]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   19230:	2080      	movs	r0, #128	; 0x80
   19232:	0280      	lsls	r0, r0, #10
   19234:	6058      	str	r0, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   19236:	3408      	adds	r4, #8
   19238:	5d18      	ldrb	r0, [r3, r4]
   1923a:	4310      	orrs	r0, r2
   1923c:	b2c0      	uxtb	r0, r0
   1923e:	5518      	strb	r0, [r3, r4]
   19240:	2057      	movs	r0, #87	; 0x57
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   19242:	605d      	str	r5, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   19244:	5c1c      	ldrb	r4, [r3, r0]
   19246:	4314      	orrs	r4, r2
   19248:	b2e4      	uxtb	r4, r4
   1924a:	541c      	strb	r4, [r3, r0]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   1924c:	2480      	movs	r4, #128	; 0x80
   1924e:	02e4      	lsls	r4, r4, #11
   19250:	605c      	str	r4, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   19252:	5d9c      	ldrb	r4, [r3, r6]
   19254:	4314      	orrs	r4, r2
   19256:	b2e4      	uxtb	r4, r4
   19258:	559c      	strb	r4, [r3, r6]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   1925a:	2480      	movs	r4, #128	; 0x80
   1925c:	0324      	lsls	r4, r4, #12
   1925e:	605c      	str	r4, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   19260:	3601      	adds	r6, #1
   19262:	5d9c      	ldrb	r4, [r3, r6]
   19264:	4314      	orrs	r4, r2
   19266:	b2e4      	uxtb	r4, r4
   19268:	559c      	strb	r4, [r3, r6]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   1926a:	2480      	movs	r4, #128	; 0x80
   1926c:	03a4      	lsls	r4, r4, #14
   1926e:	605c      	str	r4, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   19270:	3602      	adds	r6, #2
   19272:	5d9c      	ldrb	r4, [r3, r6]
   19274:	4314      	orrs	r4, r2
   19276:	b2e4      	uxtb	r4, r4
   19278:	559c      	strb	r4, [r3, r6]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   1927a:	2480      	movs	r4, #128	; 0x80
   1927c:	0364      	lsls	r4, r4, #13
   1927e:	605c      	str	r4, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   19280:	3e01      	subs	r6, #1
   19282:	5d9c      	ldrb	r4, [r3, r6]
   19284:	4314      	orrs	r4, r2
   19286:	b2e4      	uxtb	r4, r4
   19288:	559c      	strb	r4, [r3, r6]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   1928a:	2480      	movs	r4, #128	; 0x80
   1928c:	0224      	lsls	r4, r4, #8
   1928e:	605c      	str	r4, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   19290:	3e05      	subs	r6, #5
   19292:	5d9c      	ldrb	r4, [r3, r6]
   19294:	4314      	orrs	r4, r2
   19296:	b2e4      	uxtb	r4, r4
   19298:	559c      	strb	r4, [r3, r6]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   1929a:	2404      	movs	r4, #4
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   1929c:	3e0d      	subs	r6, #13
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   1929e:	605c      	str	r4, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   192a0:	5d9c      	ldrb	r4, [r3, r6]
   192a2:	4314      	orrs	r4, r2
   192a4:	b2e4      	uxtb	r4, r4
   192a6:	559c      	strb	r4, [r3, r6]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   192a8:	605d      	str	r5, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   192aa:	5c1c      	ldrb	r4, [r3, r0]
   192ac:	3619      	adds	r6, #25
   192ae:	4314      	orrs	r4, r2
   192b0:	b2e4      	uxtb	r4, r4
   192b2:	541c      	strb	r4, [r3, r0]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   192b4:	2480      	movs	r4, #128	; 0x80
   192b6:	0524      	lsls	r4, r4, #20
   192b8:	605c      	str	r4, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   192ba:	5d9c      	ldrb	r4, [r3, r6]
   192bc:	4314      	orrs	r4, r2
   192be:	b2e4      	uxtb	r4, r4
   192c0:	559c      	strb	r4, [r3, r6]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   192c2:	604d      	str	r5, [r1, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   192c4:	5c0c      	ldrb	r4, [r1, r0]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   192c6:	2580      	movs	r5, #128	; 0x80
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   192c8:	4314      	orrs	r4, r2
   192ca:	b2e4      	uxtb	r4, r4
   192cc:	540c      	strb	r4, [r1, r0]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   192ce:	2080      	movs	r0, #128	; 0x80
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   192d0:	244e      	movs	r4, #78	; 0x4e
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   192d2:	01c0      	lsls	r0, r0, #7
   192d4:	6058      	str	r0, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   192d6:	5d18      	ldrb	r0, [r3, r4]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   192d8:	03ed      	lsls	r5, r5, #15
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   192da:	4310      	orrs	r0, r2
   192dc:	b2c0      	uxtb	r0, r0
   192de:	5518      	strb	r0, [r3, r4]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   192e0:	604d      	str	r5, [r1, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   192e2:	3408      	adds	r4, #8
   192e4:	5d08      	ldrb	r0, [r1, r4]
   192e6:	4310      	orrs	r0, r2
   192e8:	b2c0      	uxtb	r0, r0
   192ea:	5508      	strb	r0, [r1, r4]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   192ec:	605d      	str	r5, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   192ee:	5d19      	ldrb	r1, [r3, r4]
   192f0:	430a      	orrs	r2, r1
   192f2:	b2d2      	uxtb	r2, r2
   192f4:	551a      	strb	r2, [r3, r4]
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
   192f6:	2208      	movs	r2, #8
   192f8:	615a      	str	r2, [r3, #20]
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
   192fa:	619d      	str	r5, [r3, #24]
}
   192fc:	bc04      	pop	{r2}
   192fe:	4690      	mov	r8, r2
   19300:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19302:	46c0      	nop			; (mov r8, r8)
   19304:	40002880 	.word	0x40002880
   19308:	50020400 	.word	0x50020400
   1930c:	d0020000 	.word	0xd0020000
   19310:	50020100 	.word	0x50020100
   19314:	50020800 	.word	0x50020800
   19318:	40002800 	.word	0x40002800
   1931c:	50021000 	.word	0x50021000
   19320:	50022000 	.word	0x50022000
   19324:	50020000 	.word	0x50020000
   19328:	d0020001 	.word	0xd0020001
   1932c:	50020200 	.word	0x50020200
   19330:	d0020002 	.word	0xd0020002

00019334 <fn_powerdown>:
void fn_powerdown(void){
   19334:	b510      	push	{r4, lr}
	if (state_change){
   19336:	4b17      	ldr	r3, [pc, #92]	; (19394 <fn_powerdown+0x60>)
   19338:	781b      	ldrb	r3, [r3, #0]
   1933a:	2b00      	cmp	r3, #0
   1933c:	d011      	beq.n	19362 <fn_powerdown+0x2e>
		wdt_disable();
   1933e:	4b16      	ldr	r3, [pc, #88]	; (19398 <fn_powerdown+0x64>)
   19340:	4798      	blx	r3
		clock_32k_source(clock_int);
   19342:	2001      	movs	r0, #1
   19344:	4b15      	ldr	r3, [pc, #84]	; (1939c <fn_powerdown+0x68>)
   19346:	4798      	blx	r3
		ext_osc_onoff(false);
   19348:	2000      	movs	r0, #0
   1934a:	4b15      	ldr	r3, [pc, #84]	; (193a0 <fn_powerdown+0x6c>)
   1934c:	4798      	blx	r3
		disable_comms();
   1934e:	4b15      	ldr	r3, [pc, #84]	; (193a4 <fn_powerdown+0x70>)
   19350:	4798      	blx	r3
		config_pins_powerdown();		
   19352:	4b15      	ldr	r3, [pc, #84]	; (193a8 <fn_powerdown+0x74>)
   19354:	4798      	blx	r3
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
   19356:	2204      	movs	r2, #4
   19358:	4b14      	ldr	r3, [pc, #80]	; (193ac <fn_powerdown+0x78>)
		configure_timers(st_powerdown);//Disable TC	
   1935a:	2004      	movs	r0, #4
   1935c:	615a      	str	r2, [r3, #20]
   1935e:	4b14      	ldr	r3, [pc, #80]	; (193b0 <fn_powerdown+0x7c>)
   19360:	4798      	blx	r3
	udc_stop();// disable USB
   19362:	4b14      	ldr	r3, [pc, #80]	; (193b4 <fn_powerdown+0x80>)
   19364:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
   19366:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   19368:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   1936c:	2300      	movs	r3, #0
	PM->SLEEPCFG.reg = sleep_mode;
   1936e:	2280      	movs	r2, #128	; 0x80
   19370:	4911      	ldr	r1, [pc, #68]	; (193b8 <fn_powerdown+0x84>)
   19372:	05d2      	lsls	r2, r2, #23
   19374:	700b      	strb	r3, [r1, #0]
   19376:	3302      	adds	r3, #2
   19378:	7053      	strb	r3, [r2, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
   1937a:	7853      	ldrb	r3, [r2, #1]
   1937c:	2b02      	cmp	r3, #2
   1937e:	d1fc      	bne.n	1937a <fn_powerdown+0x46>
		cpu_irq_enable();
   19380:	3b01      	subs	r3, #1
   19382:	700b      	strb	r3, [r1, #0]
   19384:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   19388:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   1938a:	f3bf 8f4f 	dsb	sy
	__WFI();
   1938e:	bf30      	wfi
}
   19390:	bd10      	pop	{r4, pc}
   19392:	46c0      	nop			; (mov r8, r8)
   19394:	200001d0 	.word	0x200001d0
   19398:	00009625 	.word	0x00009625
   1939c:	000076f9 	.word	0x000076f9
   193a0:	0000780d 	.word	0x0000780d
   193a4:	000124bd 	.word	0x000124bd
   193a8:	00019161 	.word	0x00019161
   193ac:	40002880 	.word	0x40002880
   193b0:	00009975 	.word	0x00009975
   193b4:	00001159 	.word	0x00001159
   193b8:	200000ca 	.word	0x200000ca

000193bc <externalButtonRoutine>:
enum INPUT externalButtonRoutine(bool buttonOn){
   193bc:	b510      	push	{r4, lr}
	if (current_state == st_powerdown){
   193be:	4b24      	ldr	r3, [pc, #144]	; (19450 <externalButtonRoutine+0x94>)
   193c0:	781a      	ldrb	r2, [r3, #0]
   193c2:	2a04      	cmp	r2, #4
   193c4:	d025      	beq.n	19412 <externalButtonRoutine+0x56>
	if (current_state == st_powerup){
   193c6:	781b      	ldrb	r3, [r3, #0]
   193c8:	2b05      	cmp	r3, #5
   193ca:	d020      	beq.n	1940e <externalButtonRoutine+0x52>
		if(!buttonE_triggered){
   193cc:	4b21      	ldr	r3, [pc, #132]	; (19454 <externalButtonRoutine+0x98>)
	if (buttonOn){
   193ce:	2800      	cmp	r0, #0
   193d0:	d109      	bne.n	193e6 <externalButtonRoutine+0x2a>
		buttonE_triggered=false;
   193d2:	7018      	strb	r0, [r3, #0]
   193d4:	4b20      	ldr	r3, [pc, #128]	; (19458 <externalButtonRoutine+0x9c>)
   193d6:	681a      	ldr	r2, [r3, #0]
   193d8:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
   193da:	2b00      	cmp	r3, #0
   193dc:	d1fc      	bne.n	193d8 <externalButtonRoutine+0x1c>
		return input_buttonE;	
   193de:	2005      	movs	r0, #5
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_STOP_Val);
   193e0:	3340      	adds	r3, #64	; 0x40
   193e2:	7153      	strb	r3, [r2, #5]
}
   193e4:	bd10      	pop	{r4, pc}
		if(!buttonE_triggered){
   193e6:	781a      	ldrb	r2, [r3, #0]
   193e8:	2a00      	cmp	r2, #0
   193ea:	d110      	bne.n	1940e <externalButtonRoutine+0x52>
			tc_set_count_value(&timer1, 0);
   193ec:	4c1a      	ldr	r4, [pc, #104]	; (19458 <externalButtonRoutine+0x9c>)
			buttonE_triggered=true;
   193ee:	3201      	adds	r2, #1
   193f0:	701a      	strb	r2, [r3, #0]
			tc_set_count_value(&timer1, 0);
   193f2:	2100      	movs	r1, #0
   193f4:	4b19      	ldr	r3, [pc, #100]	; (1945c <externalButtonRoutine+0xa0>)
   193f6:	0020      	movs	r0, r4
   193f8:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
   193fa:	6823      	ldr	r3, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
   193fc:	691a      	ldr	r2, [r3, #16]
	while (tc_is_syncing(module_inst)) {
   193fe:	2a00      	cmp	r2, #0
   19400:	d1fc      	bne.n	193fc <externalButtonRoutine+0x40>
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
   19402:	711a      	strb	r2, [r3, #4]
	return (tc_module->SYNCBUSY.reg);
   19404:	691a      	ldr	r2, [r3, #16]
	while (tc_is_syncing(module_inst)) {
   19406:	2a00      	cmp	r2, #0
   19408:	d1fc      	bne.n	19404 <externalButtonRoutine+0x48>
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_RETRIGGER_Val);
   1940a:	3220      	adds	r2, #32
   1940c:	715a      	strb	r2, [r3, #5]
   1940e:	2000      	movs	r0, #0
   19410:	e7e8      	b.n	193e4 <externalButtonRoutine+0x28>
		if (buttonOn){//if external button is pressed
   19412:	2800      	cmp	r0, #0
   19414:	d107      	bne.n	19426 <externalButtonRoutine+0x6a>
   19416:	4a12      	ldr	r2, [pc, #72]	; (19460 <externalButtonRoutine+0xa4>)
   19418:	7813      	ldrb	r3, [r2, #0]
		if (click_counter>=3){
   1941a:	2b02      	cmp	r3, #2
   1941c:	d9f7      	bls.n	1940e <externalButtonRoutine+0x52>
			click_counter = 0;
   1941e:	2300      	movs	r3, #0
			return input_wakeup;
   19420:	2015      	movs	r0, #21
			click_counter = 0;
   19422:	7013      	strb	r3, [r2, #0]
			return input_wakeup;
   19424:	e7de      	b.n	193e4 <externalButtonRoutine+0x28>
			current_time_ms = rtc_count_get_count(&rtc1);
   19426:	4b0f      	ldr	r3, [pc, #60]	; (19464 <externalButtonRoutine+0xa8>)
   19428:	480f      	ldr	r0, [pc, #60]	; (19468 <externalButtonRoutine+0xac>)
   1942a:	4798      	blx	r3
			if(  ((current_time_ms-last_time_ms)<QUICK3_MS)&
   1942c:	490f      	ldr	r1, [pc, #60]	; (1946c <externalButtonRoutine+0xb0>)
   1942e:	4a10      	ldr	r2, [pc, #64]	; (19470 <externalButtonRoutine+0xb4>)
   19430:	680b      	ldr	r3, [r1, #0]
   19432:	1ac3      	subs	r3, r0, r3
   19434:	3b4c      	subs	r3, #76	; 0x4c
   19436:	4293      	cmp	r3, r2
   19438:	d904      	bls.n	19444 <externalButtonRoutine+0x88>
				click_counter = 1;
   1943a:	2301      	movs	r3, #1
   1943c:	4a08      	ldr	r2, [pc, #32]	; (19460 <externalButtonRoutine+0xa4>)
   1943e:	7013      	strb	r3, [r2, #0]
			last_time_ms = current_time_ms;
   19440:	6008      	str	r0, [r1, #0]
   19442:	e7ea      	b.n	1941a <externalButtonRoutine+0x5e>
				click_counter++;
   19444:	4a06      	ldr	r2, [pc, #24]	; (19460 <externalButtonRoutine+0xa4>)
   19446:	7813      	ldrb	r3, [r2, #0]
   19448:	3301      	adds	r3, #1
   1944a:	b2db      	uxtb	r3, r3
   1944c:	e7f7      	b.n	1943e <externalButtonRoutine+0x82>
   1944e:	46c0      	nop			; (mov r8, r8)
   19450:	20003058 	.word	0x20003058
   19454:	20000f94 	.word	0x20000f94
   19458:	200015f0 	.word	0x200015f0
   1945c:	0000c5d1 	.word	0x0000c5d1
   19460:	20000f95 	.word	0x20000f95
   19464:	0000b279 	.word	0x0000b279
   19468:	200015b8 	.word	0x200015b8
   1946c:	20000fac 	.word	0x20000fac
   19470:	0000058f 	.word	0x0000058f

00019474 <extint_routine>:
{
   19474:	b510      	push	{r4, lr}
	current_time_ms = rtc_count_get_count(&rtc1);
   19476:	4b15      	ldr	r3, [pc, #84]	; (194cc <extint_routine+0x58>)
   19478:	4815      	ldr	r0, [pc, #84]	; (194d0 <extint_routine+0x5c>)
   1947a:	4798      	blx	r3
	switch (extint_get_current_channel()){
   1947c:	4b15      	ldr	r3, [pc, #84]	; (194d4 <extint_routine+0x60>)
	current_time_ms = rtc_count_get_count(&rtc1);
   1947e:	0004      	movs	r4, r0
	switch (extint_get_current_channel()){
   19480:	4798      	blx	r3
   19482:	3804      	subs	r0, #4
   19484:	b2c0      	uxtb	r0, r0
   19486:	2805      	cmp	r0, #5
   19488:	d80e      	bhi.n	194a8 <extint_routine+0x34>
   1948a:	4b13      	ldr	r3, [pc, #76]	; (194d8 <extint_routine+0x64>)
   1948c:	0080      	lsls	r0, r0, #2
   1948e:	581b      	ldr	r3, [r3, r0]
   19490:	469f      	mov	pc, r3
			tempInput = input_button4;
   19492:	2004      	movs	r0, #4
		if((current_time_ms-last_time_ms)>DEBOUNCE_MS){
   19494:	2196      	movs	r1, #150	; 0x96
   19496:	4a11      	ldr	r2, [pc, #68]	; (194dc <extint_routine+0x68>)
   19498:	0049      	lsls	r1, r1, #1
   1949a:	6813      	ldr	r3, [r2, #0]
   1949c:	1ae3      	subs	r3, r4, r3
   1949e:	428b      	cmp	r3, r1
   194a0:	d902      	bls.n	194a8 <extint_routine+0x34>
			current_input = tempInput;
   194a2:	4b0f      	ldr	r3, [pc, #60]	; (194e0 <extint_routine+0x6c>)
			last_time_ms = current_time_ms;	
   194a4:	6014      	str	r4, [r2, #0]
			current_input = tempInput;
   194a6:	7018      	strb	r0, [r3, #0]
}
   194a8:	bd10      	pop	{r4, pc}
			tempInput = input_button1;
   194aa:	2001      	movs	r0, #1
			break;
   194ac:	e7f2      	b.n	19494 <extint_routine+0x20>
			tempInput = input_button2;
   194ae:	2002      	movs	r0, #2
			break;
   194b0:	e7f0      	b.n	19494 <extint_routine+0x20>
			tempInput = externalButtonRoutine(!ioport_get_pin_level(buttonE));
   194b2:	2001      	movs	r0, #1
	return arch_ioport_pin_to_base(pin)->IN.reg & arch_ioport_pin_to_mask(pin);
   194b4:	4b0b      	ldr	r3, [pc, #44]	; (194e4 <extint_routine+0x70>)
   194b6:	6a1b      	ldr	r3, [r3, #32]
   194b8:	095b      	lsrs	r3, r3, #5
   194ba:	4398      	bics	r0, r3
   194bc:	4b0a      	ldr	r3, [pc, #40]	; (194e8 <extint_routine+0x74>)
   194be:	4798      	blx	r3
	if(tempInput != input_none){
   194c0:	2800      	cmp	r0, #0
   194c2:	d0f1      	beq.n	194a8 <extint_routine+0x34>
   194c4:	e7e6      	b.n	19494 <extint_routine+0x20>
			tempInput = input_button3;
   194c6:	2003      	movs	r0, #3
   194c8:	e7e4      	b.n	19494 <extint_routine+0x20>
   194ca:	46c0      	nop			; (mov r8, r8)
   194cc:	0000b279 	.word	0x0000b279
   194d0:	200015b8 	.word	0x200015b8
   194d4:	0000afa9 	.word	0x0000afa9
   194d8:	00024138 	.word	0x00024138
   194dc:	20000fa8 	.word	0x20000fa8
   194e0:	200043f4 	.word	0x200043f4
   194e4:	40002800 	.word	0x40002800
   194e8:	000193bd 	.word	0x000193bd

000194ec <getDefaultOptions>:



void getDefaultOptions(struct OPTIONS *optionptr){
	
	optionptr->shot_delay = 0;//seconds
   194ec:	2300      	movs	r3, #0
   194ee:	7083      	strb	r3, [r0, #2]
	optionptr->current_unit_temp = celsius;
   194f0:	3304      	adds	r3, #4
   194f2:	7043      	strb	r3, [r0, #1]
	optionptr->current_unit_dist = meters;
   194f4:	3b03      	subs	r3, #3
   194f6:	7003      	strb	r3, [r0, #0]
	optionptr->chargeCurrent = 100;//mA
   194f8:	3363      	adds	r3, #99	; 0x63
   194fa:	6043      	str	r3, [r0, #4]
	optionptr->errorSensitivity = 1;
   194fc:	23fe      	movs	r3, #254	; 0xfe
   194fe:	059b      	lsls	r3, r3, #22
   19500:	6083      	str	r3, [r0, #8]
	optionptr->backlight_setting.colorRef = 1;//white
	optionptr->backlight_setting.brightness = 3;
   19502:	2303      	movs	r3, #3
   19504:	7303      	strb	r3, [r0, #12]
	optionptr->backlight_setting.maxColor = 30;
   19506:	4b01      	ldr	r3, [pc, #4]	; (1950c <getDefaultOptions+0x20>)
   19508:	6103      	str	r3, [r0, #16]
	optionptr->backlight_setting.maxBrightness = 5;
	
	optionptr->Settings_Initialized_Key = 0xC9;//  Indicator that settings have been initialized

	
}
   1950a:	4770      	bx	lr
   1950c:	c901051e 	.word	0xc901051e

00019510 <msc_notify_trans>:

void msc_notify_trans(void){
	
	//current_input=input_usb_transaction;
	usb_transaction_requested = true;
   19510:	2201      	movs	r2, #1
   19512:	4b01      	ldr	r3, [pc, #4]	; (19518 <msc_notify_trans+0x8>)
   19514:	701a      	strb	r2, [r3, #0]
}
   19516:	4770      	bx	lr
   19518:	20000fc0 	.word	0x20000fc0

0001951c <my_callback_msc_enable>:


bool my_callback_msc_enable(void)
{
	my_flag_autorize_msc_transfert = true;
   1951c:	2201      	movs	r2, #1
   1951e:	4b02      	ldr	r3, [pc, #8]	; (19528 <my_callback_msc_enable+0xc>)
	return true;
}
   19520:	2001      	movs	r0, #1
	my_flag_autorize_msc_transfert = true;
   19522:	701a      	strb	r2, [r3, #0]
}
   19524:	4770      	bx	lr
   19526:	46c0      	nop			; (mov r8, r8)
   19528:	20000fb0 	.word	0x20000fb0

0001952c <my_callback_msc_disable>:
void my_callback_msc_disable(void)
{
	my_flag_autorize_msc_transfert = false;
   1952c:	2200      	movs	r2, #0
   1952e:	4b01      	ldr	r3, [pc, #4]	; (19534 <my_callback_msc_disable+0x8>)
   19530:	701a      	strb	r2, [r3, #0]
}
   19532:	4770      	bx	lr
   19534:	20000fb0 	.word	0x20000fb0

00019538 <cos>:
   19538:	b530      	push	{r4, r5, lr}
   1953a:	4a20      	ldr	r2, [pc, #128]	; (195bc <cos+0x84>)
   1953c:	004b      	lsls	r3, r1, #1
   1953e:	b087      	sub	sp, #28
   19540:	085b      	lsrs	r3, r3, #1
   19542:	4293      	cmp	r3, r2
   19544:	dd1c      	ble.n	19580 <cos+0x48>
   19546:	4a1e      	ldr	r2, [pc, #120]	; (195c0 <cos+0x88>)
   19548:	4293      	cmp	r3, r2
   1954a:	dd05      	ble.n	19558 <cos+0x20>
   1954c:	0002      	movs	r2, r0
   1954e:	000b      	movs	r3, r1
   19550:	f005 f860 	bl	1e614 <__aeabi_dsub>
   19554:	b007      	add	sp, #28
   19556:	bd30      	pop	{r4, r5, pc}
   19558:	aa02      	add	r2, sp, #8
   1955a:	f001 f87d 	bl	1a658 <__ieee754_rem_pio2>
   1955e:	2303      	movs	r3, #3
   19560:	4018      	ands	r0, r3
   19562:	9a04      	ldr	r2, [sp, #16]
   19564:	9b05      	ldr	r3, [sp, #20]
   19566:	2801      	cmp	r0, #1
   19568:	d018      	beq.n	1959c <cos+0x64>
   1956a:	2802      	cmp	r0, #2
   1956c:	d00d      	beq.n	1958a <cos+0x52>
   1956e:	2800      	cmp	r0, #0
   19570:	d01e      	beq.n	195b0 <cos+0x78>
   19572:	9802      	ldr	r0, [sp, #8]
   19574:	9903      	ldr	r1, [sp, #12]
   19576:	2401      	movs	r4, #1
   19578:	9400      	str	r4, [sp, #0]
   1957a:	f002 f8fb 	bl	1b774 <__kernel_sin>
   1957e:	e7e9      	b.n	19554 <cos+0x1c>
   19580:	2200      	movs	r2, #0
   19582:	2300      	movs	r3, #0
   19584:	f001 fb60 	bl	1ac48 <__kernel_cos>
   19588:	e7e4      	b.n	19554 <cos+0x1c>
   1958a:	9802      	ldr	r0, [sp, #8]
   1958c:	9903      	ldr	r1, [sp, #12]
   1958e:	f001 fb5b 	bl	1ac48 <__kernel_cos>
   19592:	2380      	movs	r3, #128	; 0x80
   19594:	061b      	lsls	r3, r3, #24
   19596:	469c      	mov	ip, r3
   19598:	4461      	add	r1, ip
   1959a:	e7db      	b.n	19554 <cos+0x1c>
   1959c:	9000      	str	r0, [sp, #0]
   1959e:	9802      	ldr	r0, [sp, #8]
   195a0:	9903      	ldr	r1, [sp, #12]
   195a2:	f002 f8e7 	bl	1b774 <__kernel_sin>
   195a6:	2380      	movs	r3, #128	; 0x80
   195a8:	061b      	lsls	r3, r3, #24
   195aa:	469c      	mov	ip, r3
   195ac:	4461      	add	r1, ip
   195ae:	e7d1      	b.n	19554 <cos+0x1c>
   195b0:	9802      	ldr	r0, [sp, #8]
   195b2:	9903      	ldr	r1, [sp, #12]
   195b4:	f001 fb48 	bl	1ac48 <__kernel_cos>
   195b8:	e7cc      	b.n	19554 <cos+0x1c>
   195ba:	46c0      	nop			; (mov r8, r8)
   195bc:	3fe921fb 	.word	0x3fe921fb
   195c0:	7fefffff 	.word	0x7fefffff

000195c4 <sin>:
   195c4:	b530      	push	{r4, r5, lr}
   195c6:	4a21      	ldr	r2, [pc, #132]	; (1964c <sin+0x88>)
   195c8:	004b      	lsls	r3, r1, #1
   195ca:	b087      	sub	sp, #28
   195cc:	085b      	lsrs	r3, r3, #1
   195ce:	4293      	cmp	r3, r2
   195d0:	dd1e      	ble.n	19610 <sin+0x4c>
   195d2:	4a1f      	ldr	r2, [pc, #124]	; (19650 <sin+0x8c>)
   195d4:	4293      	cmp	r3, r2
   195d6:	dd05      	ble.n	195e4 <sin+0x20>
   195d8:	0002      	movs	r2, r0
   195da:	000b      	movs	r3, r1
   195dc:	f005 f81a 	bl	1e614 <__aeabi_dsub>
   195e0:	b007      	add	sp, #28
   195e2:	bd30      	pop	{r4, r5, pc}
   195e4:	aa02      	add	r2, sp, #8
   195e6:	f001 f837 	bl	1a658 <__ieee754_rem_pio2>
   195ea:	2303      	movs	r3, #3
   195ec:	4018      	ands	r0, r3
   195ee:	9a04      	ldr	r2, [sp, #16]
   195f0:	9b05      	ldr	r3, [sp, #20]
   195f2:	2801      	cmp	r0, #1
   195f4:	d01e      	beq.n	19634 <sin+0x70>
   195f6:	2802      	cmp	r0, #2
   195f8:	d011      	beq.n	1961e <sin+0x5a>
   195fa:	2800      	cmp	r0, #0
   195fc:	d01f      	beq.n	1963e <sin+0x7a>
   195fe:	9802      	ldr	r0, [sp, #8]
   19600:	9903      	ldr	r1, [sp, #12]
   19602:	f001 fb21 	bl	1ac48 <__kernel_cos>
   19606:	2380      	movs	r3, #128	; 0x80
   19608:	061b      	lsls	r3, r3, #24
   1960a:	469c      	mov	ip, r3
   1960c:	4461      	add	r1, ip
   1960e:	e7e7      	b.n	195e0 <sin+0x1c>
   19610:	2300      	movs	r3, #0
   19612:	2200      	movs	r2, #0
   19614:	9300      	str	r3, [sp, #0]
   19616:	2300      	movs	r3, #0
   19618:	f002 f8ac 	bl	1b774 <__kernel_sin>
   1961c:	e7e0      	b.n	195e0 <sin+0x1c>
   1961e:	2401      	movs	r4, #1
   19620:	9802      	ldr	r0, [sp, #8]
   19622:	9903      	ldr	r1, [sp, #12]
   19624:	9400      	str	r4, [sp, #0]
   19626:	f002 f8a5 	bl	1b774 <__kernel_sin>
   1962a:	2380      	movs	r3, #128	; 0x80
   1962c:	061b      	lsls	r3, r3, #24
   1962e:	469c      	mov	ip, r3
   19630:	4461      	add	r1, ip
   19632:	e7d5      	b.n	195e0 <sin+0x1c>
   19634:	9802      	ldr	r0, [sp, #8]
   19636:	9903      	ldr	r1, [sp, #12]
   19638:	f001 fb06 	bl	1ac48 <__kernel_cos>
   1963c:	e7d0      	b.n	195e0 <sin+0x1c>
   1963e:	2401      	movs	r4, #1
   19640:	9802      	ldr	r0, [sp, #8]
   19642:	9903      	ldr	r1, [sp, #12]
   19644:	9400      	str	r4, [sp, #0]
   19646:	f002 f895 	bl	1b774 <__kernel_sin>
   1964a:	e7c9      	b.n	195e0 <sin+0x1c>
   1964c:	3fe921fb 	.word	0x3fe921fb
   19650:	7fefffff 	.word	0x7fefffff

00019654 <atan2>:
   19654:	b510      	push	{r4, lr}
   19656:	f000 fa0d 	bl	19a74 <__ieee754_atan2>
   1965a:	bd10      	pop	{r4, pc}

0001965c <pow>:
   1965c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1965e:	4657      	mov	r7, sl
   19660:	464e      	mov	r6, r9
   19662:	46de      	mov	lr, fp
   19664:	4645      	mov	r5, r8
   19666:	b5e0      	push	{r5, r6, r7, lr}
   19668:	b08f      	sub	sp, #60	; 0x3c
   1966a:	001d      	movs	r5, r3
   1966c:	0006      	movs	r6, r0
   1966e:	000f      	movs	r7, r1
   19670:	0014      	movs	r4, r2
   19672:	f000 fabb 	bl	19bec <__ieee754_pow>
   19676:	4bc7      	ldr	r3, [pc, #796]	; (19994 <pow+0x338>)
   19678:	9000      	str	r0, [sp, #0]
   1967a:	9101      	str	r1, [sp, #4]
   1967c:	469a      	mov	sl, r3
   1967e:	781b      	ldrb	r3, [r3, #0]
   19680:	b25b      	sxtb	r3, r3
   19682:	4699      	mov	r9, r3
   19684:	3301      	adds	r3, #1
   19686:	d03e      	beq.n	19706 <pow+0xaa>
   19688:	0022      	movs	r2, r4
   1968a:	002b      	movs	r3, r5
   1968c:	0020      	movs	r0, r4
   1968e:	0029      	movs	r1, r5
   19690:	f005 fad6 	bl	1ec40 <__aeabi_dcmpun>
   19694:	4683      	mov	fp, r0
   19696:	2800      	cmp	r0, #0
   19698:	d135      	bne.n	19706 <pow+0xaa>
   1969a:	0032      	movs	r2, r6
   1969c:	003b      	movs	r3, r7
   1969e:	0030      	movs	r0, r6
   196a0:	0039      	movs	r1, r7
   196a2:	f005 facd 	bl	1ec40 <__aeabi_dcmpun>
   196a6:	2200      	movs	r2, #0
   196a8:	9003      	str	r0, [sp, #12]
   196aa:	2800      	cmp	r0, #0
   196ac:	d000      	beq.n	196b0 <pow+0x54>
   196ae:	e0b6      	b.n	1981e <pow+0x1c2>
   196b0:	2300      	movs	r3, #0
   196b2:	0030      	movs	r0, r6
   196b4:	0039      	movs	r1, r7
   196b6:	f002 fdef 	bl	1c298 <__aeabi_dcmpeq>
   196ba:	2800      	cmp	r0, #0
   196bc:	d02c      	beq.n	19718 <pow+0xbc>
   196be:	2200      	movs	r2, #0
   196c0:	2300      	movs	r3, #0
   196c2:	0020      	movs	r0, r4
   196c4:	0029      	movs	r1, r5
   196c6:	f002 fde7 	bl	1c298 <__aeabi_dcmpeq>
   196ca:	4683      	mov	fp, r0
   196cc:	2800      	cmp	r0, #0
   196ce:	d100      	bne.n	196d2 <pow+0x76>
   196d0:	e077      	b.n	197c2 <pow+0x166>
   196d2:	ab04      	add	r3, sp, #16
   196d4:	4698      	mov	r8, r3
   196d6:	2301      	movs	r3, #1
   196d8:	4642      	mov	r2, r8
   196da:	9304      	str	r3, [sp, #16]
   196dc:	4bae      	ldr	r3, [pc, #696]	; (19998 <pow+0x33c>)
   196de:	6053      	str	r3, [r2, #4]
   196e0:	4643      	mov	r3, r8
   196e2:	9a03      	ldr	r2, [sp, #12]
   196e4:	611c      	str	r4, [r3, #16]
   196e6:	615d      	str	r5, [r3, #20]
   196e8:	621a      	str	r2, [r3, #32]
   196ea:	609e      	str	r6, [r3, #8]
   196ec:	60df      	str	r7, [r3, #12]
   196ee:	4642      	mov	r2, r8
   196f0:	2300      	movs	r3, #0
   196f2:	2400      	movs	r4, #0
   196f4:	6193      	str	r3, [r2, #24]
   196f6:	61d4      	str	r4, [r2, #28]
   196f8:	464b      	mov	r3, r9
   196fa:	2b00      	cmp	r3, #0
   196fc:	d04d      	beq.n	1979a <pow+0x13e>
   196fe:	2300      	movs	r3, #0
   19700:	4ca6      	ldr	r4, [pc, #664]	; (1999c <pow+0x340>)
   19702:	9300      	str	r3, [sp, #0]
   19704:	9401      	str	r4, [sp, #4]
   19706:	9800      	ldr	r0, [sp, #0]
   19708:	9901      	ldr	r1, [sp, #4]
   1970a:	b00f      	add	sp, #60	; 0x3c
   1970c:	bc3c      	pop	{r2, r3, r4, r5}
   1970e:	4690      	mov	r8, r2
   19710:	4699      	mov	r9, r3
   19712:	46a2      	mov	sl, r4
   19714:	46ab      	mov	fp, r5
   19716:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19718:	9800      	ldr	r0, [sp, #0]
   1971a:	9901      	ldr	r1, [sp, #4]
   1971c:	f002 fa7a 	bl	1bc14 <finite>
   19720:	4681      	mov	r9, r0
   19722:	2800      	cmp	r0, #0
   19724:	d100      	bne.n	19728 <pow+0xcc>
   19726:	e09b      	b.n	19860 <pow+0x204>
   19728:	9800      	ldr	r0, [sp, #0]
   1972a:	9901      	ldr	r1, [sp, #4]
   1972c:	2200      	movs	r2, #0
   1972e:	2300      	movs	r3, #0
   19730:	f002 fdb2 	bl	1c298 <__aeabi_dcmpeq>
   19734:	2800      	cmp	r0, #0
   19736:	d0e6      	beq.n	19706 <pow+0xaa>
   19738:	0030      	movs	r0, r6
   1973a:	0039      	movs	r1, r7
   1973c:	f002 fa6a 	bl	1bc14 <finite>
   19740:	2800      	cmp	r0, #0
   19742:	d0e0      	beq.n	19706 <pow+0xaa>
   19744:	0020      	movs	r0, r4
   19746:	0029      	movs	r1, r5
   19748:	f002 fa64 	bl	1bc14 <finite>
   1974c:	2800      	cmp	r0, #0
   1974e:	d0da      	beq.n	19706 <pow+0xaa>
   19750:	ab04      	add	r3, sp, #16
   19752:	4698      	mov	r8, r3
   19754:	2304      	movs	r3, #4
   19756:	4642      	mov	r2, r8
   19758:	9304      	str	r3, [sp, #16]
   1975a:	4b8f      	ldr	r3, [pc, #572]	; (19998 <pow+0x33c>)
   1975c:	6114      	str	r4, [r2, #16]
   1975e:	6155      	str	r5, [r2, #20]
   19760:	6053      	str	r3, [r2, #4]
   19762:	2300      	movs	r3, #0
   19764:	2400      	movs	r4, #0
   19766:	6213      	str	r3, [r2, #32]
   19768:	2300      	movs	r3, #0
   1976a:	6193      	str	r3, [r2, #24]
   1976c:	61d4      	str	r4, [r2, #28]
   1976e:	4653      	mov	r3, sl
   19770:	781b      	ldrb	r3, [r3, #0]
   19772:	6096      	str	r6, [r2, #8]
   19774:	60d7      	str	r7, [r2, #12]
   19776:	b25b      	sxtb	r3, r3
   19778:	2b02      	cmp	r3, #2
   1977a:	d004      	beq.n	19786 <pow+0x12a>
   1977c:	4640      	mov	r0, r8
   1977e:	f002 faeb 	bl	1bd58 <matherr>
   19782:	2800      	cmp	r0, #0
   19784:	d10e      	bne.n	197a4 <pow+0x148>
   19786:	f005 fc05 	bl	1ef94 <__errno>
   1978a:	2322      	movs	r3, #34	; 0x22
   1978c:	6003      	str	r3, [r0, #0]
   1978e:	e009      	b.n	197a4 <pow+0x148>
   19790:	4642      	mov	r2, r8
   19792:	2300      	movs	r3, #0
   19794:	2400      	movs	r4, #0
   19796:	6193      	str	r3, [r2, #24]
   19798:	61d4      	str	r4, [r2, #28]
   1979a:	4640      	mov	r0, r8
   1979c:	f002 fadc 	bl	1bd58 <matherr>
   197a0:	2800      	cmp	r0, #0
   197a2:	d037      	beq.n	19814 <pow+0x1b8>
   197a4:	4643      	mov	r3, r8
   197a6:	6a1b      	ldr	r3, [r3, #32]
   197a8:	2b00      	cmp	r3, #0
   197aa:	d004      	beq.n	197b6 <pow+0x15a>
   197ac:	f005 fbf2 	bl	1ef94 <__errno>
   197b0:	4643      	mov	r3, r8
   197b2:	6a1b      	ldr	r3, [r3, #32]
   197b4:	6003      	str	r3, [r0, #0]
   197b6:	4643      	mov	r3, r8
   197b8:	69dc      	ldr	r4, [r3, #28]
   197ba:	699b      	ldr	r3, [r3, #24]
   197bc:	9300      	str	r3, [sp, #0]
   197be:	9401      	str	r4, [sp, #4]
   197c0:	e7a1      	b.n	19706 <pow+0xaa>
   197c2:	0020      	movs	r0, r4
   197c4:	0029      	movs	r1, r5
   197c6:	f002 fa25 	bl	1bc14 <finite>
   197ca:	2800      	cmp	r0, #0
   197cc:	d09b      	beq.n	19706 <pow+0xaa>
   197ce:	2200      	movs	r2, #0
   197d0:	2300      	movs	r3, #0
   197d2:	0020      	movs	r0, r4
   197d4:	0029      	movs	r1, r5
   197d6:	f002 fd65 	bl	1c2a4 <__aeabi_dcmplt>
   197da:	2800      	cmp	r0, #0
   197dc:	d100      	bne.n	197e0 <pow+0x184>
   197de:	e792      	b.n	19706 <pow+0xaa>
   197e0:	ab04      	add	r3, sp, #16
   197e2:	4698      	mov	r8, r3
   197e4:	2301      	movs	r3, #1
   197e6:	4642      	mov	r2, r8
   197e8:	9304      	str	r3, [sp, #16]
   197ea:	4b6b      	ldr	r3, [pc, #428]	; (19998 <pow+0x33c>)
   197ec:	6053      	str	r3, [r2, #4]
   197ee:	4643      	mov	r3, r8
   197f0:	465a      	mov	r2, fp
   197f2:	609e      	str	r6, [r3, #8]
   197f4:	60df      	str	r7, [r3, #12]
   197f6:	621a      	str	r2, [r3, #32]
   197f8:	611c      	str	r4, [r3, #16]
   197fa:	615d      	str	r5, [r3, #20]
   197fc:	4653      	mov	r3, sl
   197fe:	781b      	ldrb	r3, [r3, #0]
   19800:	b25b      	sxtb	r3, r3
   19802:	2b00      	cmp	r3, #0
   19804:	d0c4      	beq.n	19790 <pow+0x134>
   19806:	2000      	movs	r0, #0
   19808:	4642      	mov	r2, r8
   1980a:	4965      	ldr	r1, [pc, #404]	; (199a0 <pow+0x344>)
   1980c:	6190      	str	r0, [r2, #24]
   1980e:	61d1      	str	r1, [r2, #28]
   19810:	2b02      	cmp	r3, #2
   19812:	d1c2      	bne.n	1979a <pow+0x13e>
   19814:	f005 fbbe 	bl	1ef94 <__errno>
   19818:	2321      	movs	r3, #33	; 0x21
   1981a:	6003      	str	r3, [r0, #0]
   1981c:	e7c2      	b.n	197a4 <pow+0x148>
   1981e:	2300      	movs	r3, #0
   19820:	0020      	movs	r0, r4
   19822:	0029      	movs	r1, r5
   19824:	f002 fd38 	bl	1c298 <__aeabi_dcmpeq>
   19828:	2800      	cmp	r0, #0
   1982a:	d100      	bne.n	1982e <pow+0x1d2>
   1982c:	e76b      	b.n	19706 <pow+0xaa>
   1982e:	ab04      	add	r3, sp, #16
   19830:	4698      	mov	r8, r3
   19832:	2301      	movs	r3, #1
   19834:	4642      	mov	r2, r8
   19836:	9304      	str	r3, [sp, #16]
   19838:	4b57      	ldr	r3, [pc, #348]	; (19998 <pow+0x33c>)
   1983a:	4641      	mov	r1, r8
   1983c:	6053      	str	r3, [r2, #4]
   1983e:	4643      	mov	r3, r8
   19840:	465a      	mov	r2, fp
   19842:	621a      	str	r2, [r3, #32]
   19844:	2200      	movs	r2, #0
   19846:	609e      	str	r6, [r3, #8]
   19848:	60df      	str	r7, [r3, #12]
   1984a:	611c      	str	r4, [r3, #16]
   1984c:	615d      	str	r5, [r3, #20]
   1984e:	4b53      	ldr	r3, [pc, #332]	; (1999c <pow+0x340>)
   19850:	618a      	str	r2, [r1, #24]
   19852:	61cb      	str	r3, [r1, #28]
   19854:	9200      	str	r2, [sp, #0]
   19856:	9301      	str	r3, [sp, #4]
   19858:	464b      	mov	r3, r9
   1985a:	2b02      	cmp	r3, #2
   1985c:	d19d      	bne.n	1979a <pow+0x13e>
   1985e:	e752      	b.n	19706 <pow+0xaa>
   19860:	0030      	movs	r0, r6
   19862:	0039      	movs	r1, r7
   19864:	f002 f9d6 	bl	1bc14 <finite>
   19868:	2800      	cmp	r0, #0
   1986a:	d100      	bne.n	1986e <pow+0x212>
   1986c:	e75c      	b.n	19728 <pow+0xcc>
   1986e:	0020      	movs	r0, r4
   19870:	0029      	movs	r1, r5
   19872:	f002 f9cf 	bl	1bc14 <finite>
   19876:	2800      	cmp	r0, #0
   19878:	d100      	bne.n	1987c <pow+0x220>
   1987a:	e755      	b.n	19728 <pow+0xcc>
   1987c:	9800      	ldr	r0, [sp, #0]
   1987e:	9901      	ldr	r1, [sp, #4]
   19880:	000b      	movs	r3, r1
   19882:	0002      	movs	r2, r0
   19884:	f005 f9dc 	bl	1ec40 <__aeabi_dcmpun>
   19888:	ab04      	add	r3, sp, #16
   1988a:	4698      	mov	r8, r3
   1988c:	2800      	cmp	r0, #0
   1988e:	d161      	bne.n	19954 <pow+0x2f8>
   19890:	2303      	movs	r3, #3
   19892:	4642      	mov	r2, r8
   19894:	9304      	str	r3, [sp, #16]
   19896:	4b40      	ldr	r3, [pc, #256]	; (19998 <pow+0x33c>)
   19898:	6210      	str	r0, [r2, #32]
   1989a:	6053      	str	r3, [r2, #4]
   1989c:	4653      	mov	r3, sl
   1989e:	781b      	ldrb	r3, [r3, #0]
   198a0:	6096      	str	r6, [r2, #8]
   198a2:	60d7      	str	r7, [r2, #12]
   198a4:	b25b      	sxtb	r3, r3
   198a6:	6114      	str	r4, [r2, #16]
   198a8:	6155      	str	r5, [r2, #20]
   198aa:	4699      	mov	r9, r3
   198ac:	2b00      	cmp	r3, #0
   198ae:	d12f      	bne.n	19910 <pow+0x2b4>
   198b0:	22e0      	movs	r2, #224	; 0xe0
   198b2:	4641      	mov	r1, r8
   198b4:	4b3b      	ldr	r3, [pc, #236]	; (199a4 <pow+0x348>)
   198b6:	0612      	lsls	r2, r2, #24
   198b8:	618a      	str	r2, [r1, #24]
   198ba:	61cb      	str	r3, [r1, #28]
   198bc:	0030      	movs	r0, r6
   198be:	2200      	movs	r2, #0
   198c0:	2300      	movs	r3, #0
   198c2:	0039      	movs	r1, r7
   198c4:	f002 fcee 	bl	1c2a4 <__aeabi_dcmplt>
   198c8:	2800      	cmp	r0, #0
   198ca:	d100      	bne.n	198ce <pow+0x272>
   198cc:	e756      	b.n	1977c <pow+0x120>
   198ce:	2200      	movs	r2, #0
   198d0:	4b35      	ldr	r3, [pc, #212]	; (199a8 <pow+0x34c>)
   198d2:	0020      	movs	r0, r4
   198d4:	0029      	movs	r1, r5
   198d6:	f004 fc1d 	bl	1e114 <__aeabi_dmul>
   198da:	0004      	movs	r4, r0
   198dc:	000d      	movs	r5, r1
   198de:	f002 fa43 	bl	1bd68 <rint>
   198e2:	0002      	movs	r2, r0
   198e4:	000b      	movs	r3, r1
   198e6:	0020      	movs	r0, r4
   198e8:	0029      	movs	r1, r5
   198ea:	f002 fcd5 	bl	1c298 <__aeabi_dcmpeq>
   198ee:	2800      	cmp	r0, #0
   198f0:	d105      	bne.n	198fe <pow+0x2a2>
   198f2:	22e0      	movs	r2, #224	; 0xe0
   198f4:	4b2d      	ldr	r3, [pc, #180]	; (199ac <pow+0x350>)
   198f6:	0612      	lsls	r2, r2, #24
   198f8:	4641      	mov	r1, r8
   198fa:	618a      	str	r2, [r1, #24]
   198fc:	61cb      	str	r3, [r1, #28]
   198fe:	4653      	mov	r3, sl
   19900:	781b      	ldrb	r3, [r3, #0]
   19902:	b25b      	sxtb	r3, r3
   19904:	4699      	mov	r9, r3
   19906:	464b      	mov	r3, r9
   19908:	2b02      	cmp	r3, #2
   1990a:	d000      	beq.n	1990e <pow+0x2b2>
   1990c:	e736      	b.n	1977c <pow+0x120>
   1990e:	e73a      	b.n	19786 <pow+0x12a>
   19910:	2200      	movs	r2, #0
   19912:	4641      	mov	r1, r8
   19914:	4b26      	ldr	r3, [pc, #152]	; (199b0 <pow+0x354>)
   19916:	0030      	movs	r0, r6
   19918:	618a      	str	r2, [r1, #24]
   1991a:	61cb      	str	r3, [r1, #28]
   1991c:	2200      	movs	r2, #0
   1991e:	2300      	movs	r3, #0
   19920:	0039      	movs	r1, r7
   19922:	f002 fcbf 	bl	1c2a4 <__aeabi_dcmplt>
   19926:	2800      	cmp	r0, #0
   19928:	d0ed      	beq.n	19906 <pow+0x2aa>
   1992a:	2200      	movs	r2, #0
   1992c:	4b1e      	ldr	r3, [pc, #120]	; (199a8 <pow+0x34c>)
   1992e:	0020      	movs	r0, r4
   19930:	0029      	movs	r1, r5
   19932:	f004 fbef 	bl	1e114 <__aeabi_dmul>
   19936:	0004      	movs	r4, r0
   19938:	000d      	movs	r5, r1
   1993a:	f002 fa15 	bl	1bd68 <rint>
   1993e:	0002      	movs	r2, r0
   19940:	000b      	movs	r3, r1
   19942:	0020      	movs	r0, r4
   19944:	0029      	movs	r1, r5
   19946:	f002 fca7 	bl	1c298 <__aeabi_dcmpeq>
   1994a:	2800      	cmp	r0, #0
   1994c:	d1d7      	bne.n	198fe <pow+0x2a2>
   1994e:	2200      	movs	r2, #0
   19950:	4b13      	ldr	r3, [pc, #76]	; (199a0 <pow+0x344>)
   19952:	e7d1      	b.n	198f8 <pow+0x29c>
   19954:	2301      	movs	r3, #1
   19956:	4642      	mov	r2, r8
   19958:	9304      	str	r3, [sp, #16]
   1995a:	4b0f      	ldr	r3, [pc, #60]	; (19998 <pow+0x33c>)
   1995c:	6053      	str	r3, [r2, #4]
   1995e:	4643      	mov	r3, r8
   19960:	464a      	mov	r2, r9
   19962:	611c      	str	r4, [r3, #16]
   19964:	615d      	str	r5, [r3, #20]
   19966:	621a      	str	r2, [r3, #32]
   19968:	609e      	str	r6, [r3, #8]
   1996a:	60df      	str	r7, [r3, #12]
   1996c:	2400      	movs	r4, #0
   1996e:	4653      	mov	r3, sl
   19970:	571c      	ldrsb	r4, [r3, r4]
   19972:	2c00      	cmp	r4, #0
   19974:	d100      	bne.n	19978 <pow+0x31c>
   19976:	e70b      	b.n	19790 <pow+0x134>
   19978:	2300      	movs	r3, #0
   1997a:	2200      	movs	r2, #0
   1997c:	0019      	movs	r1, r3
   1997e:	0010      	movs	r0, r2
   19980:	f003 ff94 	bl	1d8ac <__aeabi_ddiv>
   19984:	4643      	mov	r3, r8
   19986:	6198      	str	r0, [r3, #24]
   19988:	61d9      	str	r1, [r3, #28]
   1998a:	2c02      	cmp	r4, #2
   1998c:	d100      	bne.n	19990 <pow+0x334>
   1998e:	e741      	b.n	19814 <pow+0x1b8>
   19990:	e703      	b.n	1979a <pow+0x13e>
   19992:	46c0      	nop			; (mov r8, r8)
   19994:	20000389 	.word	0x20000389
   19998:	00024e5c 	.word	0x00024e5c
   1999c:	3ff00000 	.word	0x3ff00000
   199a0:	fff00000 	.word	0xfff00000
   199a4:	47efffff 	.word	0x47efffff
   199a8:	3fe00000 	.word	0x3fe00000
   199ac:	c7efffff 	.word	0xc7efffff
   199b0:	7ff00000 	.word	0x7ff00000

000199b4 <sqrt>:
   199b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   199b6:	4647      	mov	r7, r8
   199b8:	46ce      	mov	lr, r9
   199ba:	b580      	push	{r7, lr}
   199bc:	b08d      	sub	sp, #52	; 0x34
   199be:	0004      	movs	r4, r0
   199c0:	000d      	movs	r5, r1
   199c2:	f001 f861 	bl	1aa88 <__ieee754_sqrt>
   199c6:	4b29      	ldr	r3, [pc, #164]	; (19a6c <sqrt+0xb8>)
   199c8:	0006      	movs	r6, r0
   199ca:	781b      	ldrb	r3, [r3, #0]
   199cc:	000f      	movs	r7, r1
   199ce:	b25b      	sxtb	r3, r3
   199d0:	4698      	mov	r8, r3
   199d2:	3301      	adds	r3, #1
   199d4:	d010      	beq.n	199f8 <sqrt+0x44>
   199d6:	0022      	movs	r2, r4
   199d8:	002b      	movs	r3, r5
   199da:	0020      	movs	r0, r4
   199dc:	0029      	movs	r1, r5
   199de:	f005 f92f 	bl	1ec40 <__aeabi_dcmpun>
   199e2:	4681      	mov	r9, r0
   199e4:	2800      	cmp	r0, #0
   199e6:	d107      	bne.n	199f8 <sqrt+0x44>
   199e8:	2200      	movs	r2, #0
   199ea:	2300      	movs	r3, #0
   199ec:	0020      	movs	r0, r4
   199ee:	0029      	movs	r1, r5
   199f0:	f002 fc58 	bl	1c2a4 <__aeabi_dcmplt>
   199f4:	2800      	cmp	r0, #0
   199f6:	d106      	bne.n	19a06 <sqrt+0x52>
   199f8:	0030      	movs	r0, r6
   199fa:	0039      	movs	r1, r7
   199fc:	b00d      	add	sp, #52	; 0x34
   199fe:	bc0c      	pop	{r2, r3}
   19a00:	4690      	mov	r8, r2
   19a02:	4699      	mov	r9, r3
   19a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19a06:	2301      	movs	r3, #1
   19a08:	9302      	str	r3, [sp, #8]
   19a0a:	4b19      	ldr	r3, [pc, #100]	; (19a70 <sqrt+0xbc>)
   19a0c:	9406      	str	r4, [sp, #24]
   19a0e:	9507      	str	r5, [sp, #28]
   19a10:	9303      	str	r3, [sp, #12]
   19a12:	464b      	mov	r3, r9
   19a14:	930a      	str	r3, [sp, #40]	; 0x28
   19a16:	4643      	mov	r3, r8
   19a18:	9404      	str	r4, [sp, #16]
   19a1a:	9505      	str	r5, [sp, #20]
   19a1c:	2b00      	cmp	r3, #0
   19a1e:	d015      	beq.n	19a4c <sqrt+0x98>
   19a20:	2300      	movs	r3, #0
   19a22:	2200      	movs	r2, #0
   19a24:	0019      	movs	r1, r3
   19a26:	0010      	movs	r0, r2
   19a28:	f003 ff40 	bl	1d8ac <__aeabi_ddiv>
   19a2c:	4643      	mov	r3, r8
   19a2e:	9008      	str	r0, [sp, #32]
   19a30:	9109      	str	r1, [sp, #36]	; 0x24
   19a32:	2b02      	cmp	r3, #2
   19a34:	d10e      	bne.n	19a54 <sqrt+0xa0>
   19a36:	f005 faad 	bl	1ef94 <__errno>
   19a3a:	2321      	movs	r3, #33	; 0x21
   19a3c:	6003      	str	r3, [r0, #0]
   19a3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19a40:	9301      	str	r3, [sp, #4]
   19a42:	2b00      	cmp	r3, #0
   19a44:	d10c      	bne.n	19a60 <sqrt+0xac>
   19a46:	9e08      	ldr	r6, [sp, #32]
   19a48:	9f09      	ldr	r7, [sp, #36]	; 0x24
   19a4a:	e7d5      	b.n	199f8 <sqrt+0x44>
   19a4c:	2300      	movs	r3, #0
   19a4e:	2400      	movs	r4, #0
   19a50:	9308      	str	r3, [sp, #32]
   19a52:	9409      	str	r4, [sp, #36]	; 0x24
   19a54:	a802      	add	r0, sp, #8
   19a56:	f002 f97f 	bl	1bd58 <matherr>
   19a5a:	2800      	cmp	r0, #0
   19a5c:	d1ef      	bne.n	19a3e <sqrt+0x8a>
   19a5e:	e7ea      	b.n	19a36 <sqrt+0x82>
   19a60:	f005 fa98 	bl	1ef94 <__errno>
   19a64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19a66:	9301      	str	r3, [sp, #4]
   19a68:	6003      	str	r3, [r0, #0]
   19a6a:	e7ec      	b.n	19a46 <sqrt+0x92>
   19a6c:	20000389 	.word	0x20000389
   19a70:	00024e60 	.word	0x00024e60

00019a74 <__ieee754_atan2>:
   19a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19a76:	0015      	movs	r5, r2
   19a78:	4647      	mov	r7, r8
   19a7a:	46ce      	mov	lr, r9
   19a7c:	005a      	lsls	r2, r3, #1
   19a7e:	001c      	movs	r4, r3
   19a80:	426b      	negs	r3, r5
   19a82:	b580      	push	{r7, lr}
   19a84:	432b      	orrs	r3, r5
   19a86:	4f4b      	ldr	r7, [pc, #300]	; (19bb4 <__ieee754_atan2+0x140>)
   19a88:	0852      	lsrs	r2, r2, #1
   19a8a:	0fdb      	lsrs	r3, r3, #31
   19a8c:	4688      	mov	r8, r1
   19a8e:	4313      	orrs	r3, r2
   19a90:	42bb      	cmp	r3, r7
   19a92:	d83a      	bhi.n	19b0a <__ieee754_atan2+0x96>
   19a94:	004b      	lsls	r3, r1, #1
   19a96:	085b      	lsrs	r3, r3, #1
   19a98:	4699      	mov	r9, r3
   19a9a:	464e      	mov	r6, r9
   19a9c:	4243      	negs	r3, r0
   19a9e:	4303      	orrs	r3, r0
   19aa0:	0fdb      	lsrs	r3, r3, #31
   19aa2:	4333      	orrs	r3, r6
   19aa4:	42bb      	cmp	r3, r7
   19aa6:	d830      	bhi.n	19b0a <__ieee754_atan2+0x96>
   19aa8:	4b43      	ldr	r3, [pc, #268]	; (19bb8 <__ieee754_atan2+0x144>)
   19aaa:	18e3      	adds	r3, r4, r3
   19aac:	432b      	orrs	r3, r5
   19aae:	d043      	beq.n	19b38 <__ieee754_atan2+0xc4>
   19ab0:	2602      	movs	r6, #2
   19ab2:	17a3      	asrs	r3, r4, #30
   19ab4:	401e      	ands	r6, r3
   19ab6:	0fcb      	lsrs	r3, r1, #31
   19ab8:	431e      	orrs	r6, r3
   19aba:	464b      	mov	r3, r9
   19abc:	4303      	orrs	r3, r0
   19abe:	d02e      	beq.n	19b1e <__ieee754_atan2+0xaa>
   19ac0:	0013      	movs	r3, r2
   19ac2:	432b      	orrs	r3, r5
   19ac4:	d032      	beq.n	19b2c <__ieee754_atan2+0xb8>
   19ac6:	42ba      	cmp	r2, r7
   19ac8:	d041      	beq.n	19b4e <__ieee754_atan2+0xda>
   19aca:	45b9      	cmp	r9, r7
   19acc:	d02e      	beq.n	19b2c <__ieee754_atan2+0xb8>
   19ace:	464b      	mov	r3, r9
   19ad0:	1a9a      	subs	r2, r3, r2
   19ad2:	1512      	asrs	r2, r2, #20
   19ad4:	2a3c      	cmp	r2, #60	; 0x3c
   19ad6:	dc32      	bgt.n	19b3e <__ieee754_atan2+0xca>
   19ad8:	2c00      	cmp	r4, #0
   19ada:	db55      	blt.n	19b88 <__ieee754_atan2+0x114>
   19adc:	002a      	movs	r2, r5
   19ade:	0023      	movs	r3, r4
   19ae0:	f003 fee4 	bl	1d8ac <__aeabi_ddiv>
   19ae4:	f002 f892 	bl	1bc0c <fabs>
   19ae8:	f001 fef4 	bl	1b8d4 <atan>
   19aec:	2e01      	cmp	r6, #1
   19aee:	d046      	beq.n	19b7e <__ieee754_atan2+0x10a>
   19af0:	2e02      	cmp	r6, #2
   19af2:	d039      	beq.n	19b68 <__ieee754_atan2+0xf4>
   19af4:	2e00      	cmp	r6, #0
   19af6:	d00e      	beq.n	19b16 <__ieee754_atan2+0xa2>
   19af8:	4a30      	ldr	r2, [pc, #192]	; (19bbc <__ieee754_atan2+0x148>)
   19afa:	4b31      	ldr	r3, [pc, #196]	; (19bc0 <__ieee754_atan2+0x14c>)
   19afc:	f004 fd8a 	bl	1e614 <__aeabi_dsub>
   19b00:	4a30      	ldr	r2, [pc, #192]	; (19bc4 <__ieee754_atan2+0x150>)
   19b02:	4b31      	ldr	r3, [pc, #196]	; (19bc8 <__ieee754_atan2+0x154>)
   19b04:	f004 fd86 	bl	1e614 <__aeabi_dsub>
   19b08:	e005      	b.n	19b16 <__ieee754_atan2+0xa2>
   19b0a:	0002      	movs	r2, r0
   19b0c:	000b      	movs	r3, r1
   19b0e:	0028      	movs	r0, r5
   19b10:	0021      	movs	r1, r4
   19b12:	f003 fbbb 	bl	1d28c <__aeabi_dadd>
   19b16:	bc0c      	pop	{r2, r3}
   19b18:	4690      	mov	r8, r2
   19b1a:	4699      	mov	r9, r3
   19b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19b1e:	2e02      	cmp	r6, #2
   19b20:	d010      	beq.n	19b44 <__ieee754_atan2+0xd0>
   19b22:	2e03      	cmp	r6, #3
   19b24:	d1f7      	bne.n	19b16 <__ieee754_atan2+0xa2>
   19b26:	4827      	ldr	r0, [pc, #156]	; (19bc4 <__ieee754_atan2+0x150>)
   19b28:	4928      	ldr	r1, [pc, #160]	; (19bcc <__ieee754_atan2+0x158>)
   19b2a:	e7f4      	b.n	19b16 <__ieee754_atan2+0xa2>
   19b2c:	4643      	mov	r3, r8
   19b2e:	4825      	ldr	r0, [pc, #148]	; (19bc4 <__ieee754_atan2+0x150>)
   19b30:	2b00      	cmp	r3, #0
   19b32:	db0a      	blt.n	19b4a <__ieee754_atan2+0xd6>
   19b34:	4926      	ldr	r1, [pc, #152]	; (19bd0 <__ieee754_atan2+0x15c>)
   19b36:	e7ee      	b.n	19b16 <__ieee754_atan2+0xa2>
   19b38:	f001 fecc 	bl	1b8d4 <atan>
   19b3c:	e7eb      	b.n	19b16 <__ieee754_atan2+0xa2>
   19b3e:	4821      	ldr	r0, [pc, #132]	; (19bc4 <__ieee754_atan2+0x150>)
   19b40:	4923      	ldr	r1, [pc, #140]	; (19bd0 <__ieee754_atan2+0x15c>)
   19b42:	e7d3      	b.n	19aec <__ieee754_atan2+0x78>
   19b44:	481f      	ldr	r0, [pc, #124]	; (19bc4 <__ieee754_atan2+0x150>)
   19b46:	4920      	ldr	r1, [pc, #128]	; (19bc8 <__ieee754_atan2+0x154>)
   19b48:	e7e5      	b.n	19b16 <__ieee754_atan2+0xa2>
   19b4a:	4922      	ldr	r1, [pc, #136]	; (19bd4 <__ieee754_atan2+0x160>)
   19b4c:	e7e3      	b.n	19b16 <__ieee754_atan2+0xa2>
   19b4e:	4591      	cmp	r9, r2
   19b50:	d01f      	beq.n	19b92 <__ieee754_atan2+0x11e>
   19b52:	2e02      	cmp	r6, #2
   19b54:	d0f6      	beq.n	19b44 <__ieee754_atan2+0xd0>
   19b56:	2e03      	cmp	r6, #3
   19b58:	d0e5      	beq.n	19b26 <__ieee754_atan2+0xb2>
   19b5a:	2000      	movs	r0, #0
   19b5c:	2100      	movs	r1, #0
   19b5e:	2e01      	cmp	r6, #1
   19b60:	d1d9      	bne.n	19b16 <__ieee754_atan2+0xa2>
   19b62:	2180      	movs	r1, #128	; 0x80
   19b64:	0609      	lsls	r1, r1, #24
   19b66:	e7d6      	b.n	19b16 <__ieee754_atan2+0xa2>
   19b68:	4a14      	ldr	r2, [pc, #80]	; (19bbc <__ieee754_atan2+0x148>)
   19b6a:	4b15      	ldr	r3, [pc, #84]	; (19bc0 <__ieee754_atan2+0x14c>)
   19b6c:	f004 fd52 	bl	1e614 <__aeabi_dsub>
   19b70:	0002      	movs	r2, r0
   19b72:	000b      	movs	r3, r1
   19b74:	4813      	ldr	r0, [pc, #76]	; (19bc4 <__ieee754_atan2+0x150>)
   19b76:	4914      	ldr	r1, [pc, #80]	; (19bc8 <__ieee754_atan2+0x154>)
   19b78:	f004 fd4c 	bl	1e614 <__aeabi_dsub>
   19b7c:	e7cb      	b.n	19b16 <__ieee754_atan2+0xa2>
   19b7e:	2480      	movs	r4, #128	; 0x80
   19b80:	0624      	lsls	r4, r4, #24
   19b82:	190b      	adds	r3, r1, r4
   19b84:	0019      	movs	r1, r3
   19b86:	e7c6      	b.n	19b16 <__ieee754_atan2+0xa2>
   19b88:	323c      	adds	r2, #60	; 0x3c
   19b8a:	daa7      	bge.n	19adc <__ieee754_atan2+0x68>
   19b8c:	2000      	movs	r0, #0
   19b8e:	2100      	movs	r1, #0
   19b90:	e7ac      	b.n	19aec <__ieee754_atan2+0x78>
   19b92:	2e02      	cmp	r6, #2
   19b94:	d006      	beq.n	19ba4 <__ieee754_atan2+0x130>
   19b96:	2e03      	cmp	r6, #3
   19b98:	d009      	beq.n	19bae <__ieee754_atan2+0x13a>
   19b9a:	480a      	ldr	r0, [pc, #40]	; (19bc4 <__ieee754_atan2+0x150>)
   19b9c:	2e01      	cmp	r6, #1
   19b9e:	d004      	beq.n	19baa <__ieee754_atan2+0x136>
   19ba0:	490d      	ldr	r1, [pc, #52]	; (19bd8 <__ieee754_atan2+0x164>)
   19ba2:	e7b8      	b.n	19b16 <__ieee754_atan2+0xa2>
   19ba4:	480d      	ldr	r0, [pc, #52]	; (19bdc <__ieee754_atan2+0x168>)
   19ba6:	490e      	ldr	r1, [pc, #56]	; (19be0 <__ieee754_atan2+0x16c>)
   19ba8:	e7b5      	b.n	19b16 <__ieee754_atan2+0xa2>
   19baa:	490e      	ldr	r1, [pc, #56]	; (19be4 <__ieee754_atan2+0x170>)
   19bac:	e7b3      	b.n	19b16 <__ieee754_atan2+0xa2>
   19bae:	480b      	ldr	r0, [pc, #44]	; (19bdc <__ieee754_atan2+0x168>)
   19bb0:	490d      	ldr	r1, [pc, #52]	; (19be8 <__ieee754_atan2+0x174>)
   19bb2:	e7b0      	b.n	19b16 <__ieee754_atan2+0xa2>
   19bb4:	7ff00000 	.word	0x7ff00000
   19bb8:	c0100000 	.word	0xc0100000
   19bbc:	33145c07 	.word	0x33145c07
   19bc0:	3ca1a626 	.word	0x3ca1a626
   19bc4:	54442d18 	.word	0x54442d18
   19bc8:	400921fb 	.word	0x400921fb
   19bcc:	c00921fb 	.word	0xc00921fb
   19bd0:	3ff921fb 	.word	0x3ff921fb
   19bd4:	bff921fb 	.word	0xbff921fb
   19bd8:	3fe921fb 	.word	0x3fe921fb
   19bdc:	7f3321d2 	.word	0x7f3321d2
   19be0:	4002d97c 	.word	0x4002d97c
   19be4:	bfe921fb 	.word	0xbfe921fb
   19be8:	c002d97c 	.word	0xc002d97c

00019bec <__ieee754_pow>:
   19bec:	b5f0      	push	{r4, r5, r6, r7, lr}
   19bee:	4657      	mov	r7, sl
   19bf0:	464e      	mov	r6, r9
   19bf2:	4645      	mov	r5, r8
   19bf4:	46de      	mov	lr, fp
   19bf6:	001c      	movs	r4, r3
   19bf8:	0013      	movs	r3, r2
   19bfa:	b5e0      	push	{r5, r6, r7, lr}
   19bfc:	0065      	lsls	r5, r4, #1
   19bfe:	b091      	sub	sp, #68	; 0x44
   19c00:	086d      	lsrs	r5, r5, #1
   19c02:	9300      	str	r3, [sp, #0]
   19c04:	9401      	str	r4, [sp, #4]
   19c06:	0007      	movs	r7, r0
   19c08:	000e      	movs	r6, r1
   19c0a:	4680      	mov	r8, r0
   19c0c:	4689      	mov	r9, r1
   19c0e:	46a2      	mov	sl, r4
   19c10:	432b      	orrs	r3, r5
   19c12:	d031      	beq.n	19c78 <__ieee754_pow+0x8c>
   19c14:	4b67      	ldr	r3, [pc, #412]	; (19db4 <__ieee754_pow+0x1c8>)
   19c16:	0074      	lsls	r4, r6, #1
   19c18:	0864      	lsrs	r4, r4, #1
   19c1a:	429c      	cmp	r4, r3
   19c1c:	dc27      	bgt.n	19c6e <__ieee754_pow+0x82>
   19c1e:	d024      	beq.n	19c6a <__ieee754_pow+0x7e>
   19c20:	429d      	cmp	r5, r3
   19c22:	dc24      	bgt.n	19c6e <__ieee754_pow+0x82>
   19c24:	4b63      	ldr	r3, [pc, #396]	; (19db4 <__ieee754_pow+0x1c8>)
   19c26:	429d      	cmp	r5, r3
   19c28:	d100      	bne.n	19c2c <__ieee754_pow+0x40>
   19c2a:	e081      	b.n	19d30 <__ieee754_pow+0x144>
   19c2c:	2300      	movs	r3, #0
   19c2e:	469b      	mov	fp, r3
   19c30:	464b      	mov	r3, r9
   19c32:	2b00      	cmp	r3, #0
   19c34:	da00      	bge.n	19c38 <__ieee754_pow+0x4c>
   19c36:	e07f      	b.n	19d38 <__ieee754_pow+0x14c>
   19c38:	2a00      	cmp	r2, #0
   19c3a:	d12c      	bne.n	19c96 <__ieee754_pow+0xaa>
   19c3c:	4b5d      	ldr	r3, [pc, #372]	; (19db4 <__ieee754_pow+0x1c8>)
   19c3e:	429d      	cmp	r5, r3
   19c40:	d100      	bne.n	19c44 <__ieee754_pow+0x58>
   19c42:	e097      	b.n	19d74 <__ieee754_pow+0x188>
   19c44:	4b5c      	ldr	r3, [pc, #368]	; (19db8 <__ieee754_pow+0x1cc>)
   19c46:	429d      	cmp	r5, r3
   19c48:	d066      	beq.n	19d18 <__ieee754_pow+0x12c>
   19c4a:	2380      	movs	r3, #128	; 0x80
   19c4c:	05db      	lsls	r3, r3, #23
   19c4e:	459a      	cmp	sl, r3
   19c50:	d100      	bne.n	19c54 <__ieee754_pow+0x68>
   19c52:	e3b9      	b.n	1a3c8 <__ieee754_pow+0x7dc>
   19c54:	4b59      	ldr	r3, [pc, #356]	; (19dbc <__ieee754_pow+0x1d0>)
   19c56:	459a      	cmp	sl, r3
   19c58:	d11d      	bne.n	19c96 <__ieee754_pow+0xaa>
   19c5a:	464b      	mov	r3, r9
   19c5c:	2b00      	cmp	r3, #0
   19c5e:	db1a      	blt.n	19c96 <__ieee754_pow+0xaa>
   19c60:	0038      	movs	r0, r7
   19c62:	0031      	movs	r1, r6
   19c64:	f000 ff10 	bl	1aa88 <__ieee754_sqrt>
   19c68:	e008      	b.n	19c7c <__ieee754_pow+0x90>
   19c6a:	2800      	cmp	r0, #0
   19c6c:	d00d      	beq.n	19c8a <__ieee754_pow+0x9e>
   19c6e:	4b54      	ldr	r3, [pc, #336]	; (19dc0 <__ieee754_pow+0x1d4>)
   19c70:	469c      	mov	ip, r3
   19c72:	4464      	add	r4, ip
   19c74:	4327      	orrs	r7, r4
   19c76:	d10a      	bne.n	19c8e <__ieee754_pow+0xa2>
   19c78:	2000      	movs	r0, #0
   19c7a:	494f      	ldr	r1, [pc, #316]	; (19db8 <__ieee754_pow+0x1cc>)
   19c7c:	b011      	add	sp, #68	; 0x44
   19c7e:	bc3c      	pop	{r2, r3, r4, r5}
   19c80:	4690      	mov	r8, r2
   19c82:	4699      	mov	r9, r3
   19c84:	46a2      	mov	sl, r4
   19c86:	46ab      	mov	fp, r5
   19c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19c8a:	42a5      	cmp	r5, r4
   19c8c:	ddca      	ble.n	19c24 <__ieee754_pow+0x38>
   19c8e:	484d      	ldr	r0, [pc, #308]	; (19dc4 <__ieee754_pow+0x1d8>)
   19c90:	f002 f864 	bl	1bd5c <nan>
   19c94:	e7f2      	b.n	19c7c <__ieee754_pow+0x90>
   19c96:	0038      	movs	r0, r7
   19c98:	0031      	movs	r1, r6
   19c9a:	f001 ffb7 	bl	1bc0c <fabs>
   19c9e:	4643      	mov	r3, r8
   19ca0:	2b00      	cmp	r3, #0
   19ca2:	d11d      	bne.n	19ce0 <__ieee754_pow+0xf4>
   19ca4:	2c00      	cmp	r4, #0
   19ca6:	d004      	beq.n	19cb2 <__ieee754_pow+0xc6>
   19ca8:	4a43      	ldr	r2, [pc, #268]	; (19db8 <__ieee754_pow+0x1cc>)
   19caa:	00b3      	lsls	r3, r6, #2
   19cac:	089b      	lsrs	r3, r3, #2
   19cae:	4293      	cmp	r3, r2
   19cb0:	d116      	bne.n	19ce0 <__ieee754_pow+0xf4>
   19cb2:	4653      	mov	r3, sl
   19cb4:	2b00      	cmp	r3, #0
   19cb6:	da00      	bge.n	19cba <__ieee754_pow+0xce>
   19cb8:	e3c5      	b.n	1a446 <__ieee754_pow+0x85a>
   19cba:	464b      	mov	r3, r9
   19cbc:	2b00      	cmp	r3, #0
   19cbe:	dadd      	bge.n	19c7c <__ieee754_pow+0x90>
   19cc0:	4b3f      	ldr	r3, [pc, #252]	; (19dc0 <__ieee754_pow+0x1d4>)
   19cc2:	469c      	mov	ip, r3
   19cc4:	465b      	mov	r3, fp
   19cc6:	4464      	add	r4, ip
   19cc8:	431c      	orrs	r4, r3
   19cca:	d101      	bne.n	19cd0 <__ieee754_pow+0xe4>
   19ccc:	f000 fc53 	bl	1a576 <__ieee754_pow+0x98a>
   19cd0:	465b      	mov	r3, fp
   19cd2:	2b01      	cmp	r3, #1
   19cd4:	d1d2      	bne.n	19c7c <__ieee754_pow+0x90>
   19cd6:	2480      	movs	r4, #128	; 0x80
   19cd8:	0624      	lsls	r4, r4, #24
   19cda:	190b      	adds	r3, r1, r4
   19cdc:	0019      	movs	r1, r3
   19cde:	e7cd      	b.n	19c7c <__ieee754_pow+0x90>
   19ce0:	0ff3      	lsrs	r3, r6, #31
   19ce2:	3b01      	subs	r3, #1
   19ce4:	4698      	mov	r8, r3
   19ce6:	465b      	mov	r3, fp
   19ce8:	4642      	mov	r2, r8
   19cea:	4313      	orrs	r3, r2
   19cec:	d057      	beq.n	19d9e <__ieee754_pow+0x1b2>
   19cee:	4b36      	ldr	r3, [pc, #216]	; (19dc8 <__ieee754_pow+0x1dc>)
   19cf0:	429d      	cmp	r5, r3
   19cf2:	dd77      	ble.n	19de4 <__ieee754_pow+0x1f8>
   19cf4:	4b35      	ldr	r3, [pc, #212]	; (19dcc <__ieee754_pow+0x1e0>)
   19cf6:	429d      	cmp	r5, r3
   19cf8:	dc00      	bgt.n	19cfc <__ieee754_pow+0x110>
   19cfa:	e3b1      	b.n	1a460 <__ieee754_pow+0x874>
   19cfc:	4b34      	ldr	r3, [pc, #208]	; (19dd0 <__ieee754_pow+0x1e4>)
   19cfe:	429c      	cmp	r4, r3
   19d00:	dc00      	bgt.n	19d04 <__ieee754_pow+0x118>
   19d02:	e3a8      	b.n	1a456 <__ieee754_pow+0x86a>
   19d04:	4653      	mov	r3, sl
   19d06:	2b00      	cmp	r3, #0
   19d08:	dd43      	ble.n	19d92 <__ieee754_pow+0x1a6>
   19d0a:	4a32      	ldr	r2, [pc, #200]	; (19dd4 <__ieee754_pow+0x1e8>)
   19d0c:	4b32      	ldr	r3, [pc, #200]	; (19dd8 <__ieee754_pow+0x1ec>)
   19d0e:	0010      	movs	r0, r2
   19d10:	0019      	movs	r1, r3
   19d12:	f004 f9ff 	bl	1e114 <__aeabi_dmul>
   19d16:	e7b1      	b.n	19c7c <__ieee754_pow+0x90>
   19d18:	4653      	mov	r3, sl
   19d1a:	0038      	movs	r0, r7
   19d1c:	0031      	movs	r1, r6
   19d1e:	2b00      	cmp	r3, #0
   19d20:	daac      	bge.n	19c7c <__ieee754_pow+0x90>
   19d22:	003a      	movs	r2, r7
   19d24:	0033      	movs	r3, r6
   19d26:	2000      	movs	r0, #0
   19d28:	4923      	ldr	r1, [pc, #140]	; (19db8 <__ieee754_pow+0x1cc>)
   19d2a:	f003 fdbf 	bl	1d8ac <__aeabi_ddiv>
   19d2e:	e7a5      	b.n	19c7c <__ieee754_pow+0x90>
   19d30:	2a00      	cmp	r2, #0
   19d32:	d100      	bne.n	19d36 <__ieee754_pow+0x14a>
   19d34:	e77a      	b.n	19c2c <__ieee754_pow+0x40>
   19d36:	e79a      	b.n	19c6e <__ieee754_pow+0x82>
   19d38:	4b28      	ldr	r3, [pc, #160]	; (19ddc <__ieee754_pow+0x1f0>)
   19d3a:	429d      	cmp	r5, r3
   19d3c:	dc2c      	bgt.n	19d98 <__ieee754_pow+0x1ac>
   19d3e:	4b24      	ldr	r3, [pc, #144]	; (19dd0 <__ieee754_pow+0x1e4>)
   19d40:	429d      	cmp	r5, r3
   19d42:	dc00      	bgt.n	19d46 <__ieee754_pow+0x15a>
   19d44:	e778      	b.n	19c38 <__ieee754_pow+0x4c>
   19d46:	4926      	ldr	r1, [pc, #152]	; (19de0 <__ieee754_pow+0x1f4>)
   19d48:	152b      	asrs	r3, r5, #20
   19d4a:	468c      	mov	ip, r1
   19d4c:	4463      	add	r3, ip
   19d4e:	2b14      	cmp	r3, #20
   19d50:	dc01      	bgt.n	19d56 <__ieee754_pow+0x16a>
   19d52:	f000 fbf3 	bl	1a53c <__ieee754_pow+0x950>
   19d56:	2134      	movs	r1, #52	; 0x34
   19d58:	1acb      	subs	r3, r1, r3
   19d5a:	9900      	ldr	r1, [sp, #0]
   19d5c:	40d9      	lsrs	r1, r3
   19d5e:	0008      	movs	r0, r1
   19d60:	4098      	lsls	r0, r3
   19d62:	4282      	cmp	r2, r0
   19d64:	d000      	beq.n	19d68 <__ieee754_pow+0x17c>
   19d66:	e767      	b.n	19c38 <__ieee754_pow+0x4c>
   19d68:	2301      	movs	r3, #1
   19d6a:	4019      	ands	r1, r3
   19d6c:	3301      	adds	r3, #1
   19d6e:	1a5b      	subs	r3, r3, r1
   19d70:	469b      	mov	fp, r3
   19d72:	e761      	b.n	19c38 <__ieee754_pow+0x4c>
   19d74:	4b12      	ldr	r3, [pc, #72]	; (19dc0 <__ieee754_pow+0x1d4>)
   19d76:	18e3      	adds	r3, r4, r3
   19d78:	431f      	orrs	r7, r3
   19d7a:	d100      	bne.n	19d7e <__ieee754_pow+0x192>
   19d7c:	e77c      	b.n	19c78 <__ieee754_pow+0x8c>
   19d7e:	4b14      	ldr	r3, [pc, #80]	; (19dd0 <__ieee754_pow+0x1e4>)
   19d80:	429c      	cmp	r4, r3
   19d82:	dc00      	bgt.n	19d86 <__ieee754_pow+0x19a>
   19d84:	e327      	b.n	1a3d6 <__ieee754_pow+0x7ea>
   19d86:	9800      	ldr	r0, [sp, #0]
   19d88:	9901      	ldr	r1, [sp, #4]
   19d8a:	4653      	mov	r3, sl
   19d8c:	2b00      	cmp	r3, #0
   19d8e:	db00      	blt.n	19d92 <__ieee754_pow+0x1a6>
   19d90:	e774      	b.n	19c7c <__ieee754_pow+0x90>
   19d92:	2000      	movs	r0, #0
   19d94:	2100      	movs	r1, #0
   19d96:	e771      	b.n	19c7c <__ieee754_pow+0x90>
   19d98:	2302      	movs	r3, #2
   19d9a:	469b      	mov	fp, r3
   19d9c:	e74c      	b.n	19c38 <__ieee754_pow+0x4c>
   19d9e:	003a      	movs	r2, r7
   19da0:	0033      	movs	r3, r6
   19da2:	0038      	movs	r0, r7
   19da4:	0031      	movs	r1, r6
   19da6:	f004 fc35 	bl	1e614 <__aeabi_dsub>
   19daa:	0002      	movs	r2, r0
   19dac:	000b      	movs	r3, r1
   19dae:	f003 fd7d 	bl	1d8ac <__aeabi_ddiv>
   19db2:	e763      	b.n	19c7c <__ieee754_pow+0x90>
   19db4:	7ff00000 	.word	0x7ff00000
   19db8:	3ff00000 	.word	0x3ff00000
   19dbc:	3fe00000 	.word	0x3fe00000
   19dc0:	c0100000 	.word	0xc0100000
   19dc4:	00023c1c 	.word	0x00023c1c
   19dc8:	41e00000 	.word	0x41e00000
   19dcc:	43f00000 	.word	0x43f00000
   19dd0:	3fefffff 	.word	0x3fefffff
   19dd4:	8800759c 	.word	0x8800759c
   19dd8:	7e37e43c 	.word	0x7e37e43c
   19ddc:	433fffff 	.word	0x433fffff
   19de0:	fffffc01 	.word	0xfffffc01
   19de4:	4be9      	ldr	r3, [pc, #932]	; (1a18c <__ieee754_pow+0x5a0>)
   19de6:	2200      	movs	r2, #0
   19de8:	429c      	cmp	r4, r3
   19dea:	dc06      	bgt.n	19dfa <__ieee754_pow+0x20e>
   19dec:	2200      	movs	r2, #0
   19dee:	4be8      	ldr	r3, [pc, #928]	; (1a190 <__ieee754_pow+0x5a4>)
   19df0:	f004 f990 	bl	1e114 <__aeabi_dmul>
   19df4:	2235      	movs	r2, #53	; 0x35
   19df6:	000c      	movs	r4, r1
   19df8:	4252      	negs	r2, r2
   19dfa:	4de6      	ldr	r5, [pc, #920]	; (1a194 <__ieee754_pow+0x5a8>)
   19dfc:	1523      	asrs	r3, r4, #20
   19dfe:	46ac      	mov	ip, r5
   19e00:	4463      	add	r3, ip
   19e02:	4699      	mov	r9, r3
   19e04:	0324      	lsls	r4, r4, #12
   19e06:	4de4      	ldr	r5, [pc, #912]	; (1a198 <__ieee754_pow+0x5ac>)
   19e08:	4be4      	ldr	r3, [pc, #912]	; (1a19c <__ieee754_pow+0x5b0>)
   19e0a:	0b24      	lsrs	r4, r4, #12
   19e0c:	4491      	add	r9, r2
   19e0e:	4325      	orrs	r5, r4
   19e10:	429c      	cmp	r4, r3
   19e12:	dd09      	ble.n	19e28 <__ieee754_pow+0x23c>
   19e14:	4be2      	ldr	r3, [pc, #904]	; (1a1a0 <__ieee754_pow+0x5b4>)
   19e16:	429c      	cmp	r4, r3
   19e18:	dc00      	bgt.n	19e1c <__ieee754_pow+0x230>
   19e1a:	e3b6      	b.n	1a58a <__ieee754_pow+0x99e>
   19e1c:	2301      	movs	r3, #1
   19e1e:	469c      	mov	ip, r3
   19e20:	4be0      	ldr	r3, [pc, #896]	; (1a1a4 <__ieee754_pow+0x5b8>)
   19e22:	44e1      	add	r9, ip
   19e24:	469c      	mov	ip, r3
   19e26:	4465      	add	r5, ip
   19e28:	2300      	movs	r3, #0
   19e2a:	2400      	movs	r4, #0
   19e2c:	2200      	movs	r2, #0
   19e2e:	9308      	str	r3, [sp, #32]
   19e30:	9409      	str	r4, [sp, #36]	; 0x24
   19e32:	930c      	str	r3, [sp, #48]	; 0x30
   19e34:	940d      	str	r4, [sp, #52]	; 0x34
   19e36:	2400      	movs	r4, #0
   19e38:	4bd7      	ldr	r3, [pc, #860]	; (1a198 <__ieee754_pow+0x5ac>)
   19e3a:	9206      	str	r2, [sp, #24]
   19e3c:	9307      	str	r3, [sp, #28]
   19e3e:	9a06      	ldr	r2, [sp, #24]
   19e40:	9b07      	ldr	r3, [sp, #28]
   19e42:	0029      	movs	r1, r5
   19e44:	900a      	str	r0, [sp, #40]	; 0x28
   19e46:	910b      	str	r1, [sp, #44]	; 0x2c
   19e48:	f004 fbe4 	bl	1e614 <__aeabi_dsub>
   19e4c:	9a06      	ldr	r2, [sp, #24]
   19e4e:	9b07      	ldr	r3, [sp, #28]
   19e50:	0006      	movs	r6, r0
   19e52:	000f      	movs	r7, r1
   19e54:	980a      	ldr	r0, [sp, #40]	; 0x28
   19e56:	990b      	ldr	r1, [sp, #44]	; 0x2c
   19e58:	f003 fa18 	bl	1d28c <__aeabi_dadd>
   19e5c:	0002      	movs	r2, r0
   19e5e:	000b      	movs	r3, r1
   19e60:	2000      	movs	r0, #0
   19e62:	49cd      	ldr	r1, [pc, #820]	; (1a198 <__ieee754_pow+0x5ac>)
   19e64:	f003 fd22 	bl	1d8ac <__aeabi_ddiv>
   19e68:	000a      	movs	r2, r1
   19e6a:	0001      	movs	r1, r0
   19e6c:	0013      	movs	r3, r2
   19e6e:	910e      	str	r1, [sp, #56]	; 0x38
   19e70:	920f      	str	r2, [sp, #60]	; 0x3c
   19e72:	0002      	movs	r2, r0
   19e74:	0039      	movs	r1, r7
   19e76:	0030      	movs	r0, r6
   19e78:	f004 f94c 	bl	1e114 <__aeabi_dmul>
   19e7c:	000a      	movs	r2, r1
   19e7e:	0001      	movs	r1, r0
   19e80:	2080      	movs	r0, #128	; 0x80
   19e82:	9104      	str	r1, [sp, #16]
   19e84:	9205      	str	r2, [sp, #20]
   19e86:	0013      	movs	r3, r2
   19e88:	2200      	movs	r2, #0
   19e8a:	1069      	asrs	r1, r5, #1
   19e8c:	2580      	movs	r5, #128	; 0x80
   19e8e:	0300      	lsls	r0, r0, #12
   19e90:	4684      	mov	ip, r0
   19e92:	9202      	str	r2, [sp, #8]
   19e94:	9303      	str	r3, [sp, #12]
   19e96:	2200      	movs	r2, #0
   19e98:	05ad      	lsls	r5, r5, #22
   19e9a:	430d      	orrs	r5, r1
   19e9c:	4465      	add	r5, ip
   19e9e:	192b      	adds	r3, r5, r4
   19ea0:	9802      	ldr	r0, [sp, #8]
   19ea2:	9903      	ldr	r1, [sp, #12]
   19ea4:	0014      	movs	r4, r2
   19ea6:	001d      	movs	r5, r3
   19ea8:	f004 f934 	bl	1e114 <__aeabi_dmul>
   19eac:	0002      	movs	r2, r0
   19eae:	000b      	movs	r3, r1
   19eb0:	0030      	movs	r0, r6
   19eb2:	0039      	movs	r1, r7
   19eb4:	f004 fbae 	bl	1e614 <__aeabi_dsub>
   19eb8:	9a06      	ldr	r2, [sp, #24]
   19eba:	9b07      	ldr	r3, [sp, #28]
   19ebc:	0006      	movs	r6, r0
   19ebe:	000f      	movs	r7, r1
   19ec0:	0020      	movs	r0, r4
   19ec2:	0029      	movs	r1, r5
   19ec4:	f004 fba6 	bl	1e614 <__aeabi_dsub>
   19ec8:	0002      	movs	r2, r0
   19eca:	000b      	movs	r3, r1
   19ecc:	980a      	ldr	r0, [sp, #40]	; 0x28
   19ece:	990b      	ldr	r1, [sp, #44]	; 0x2c
   19ed0:	f004 fba0 	bl	1e614 <__aeabi_dsub>
   19ed4:	9a02      	ldr	r2, [sp, #8]
   19ed6:	9b03      	ldr	r3, [sp, #12]
   19ed8:	f004 f91c 	bl	1e114 <__aeabi_dmul>
   19edc:	0002      	movs	r2, r0
   19ede:	000b      	movs	r3, r1
   19ee0:	0030      	movs	r0, r6
   19ee2:	0039      	movs	r1, r7
   19ee4:	f004 fb96 	bl	1e614 <__aeabi_dsub>
   19ee8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19eea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   19eec:	f004 f912 	bl	1e114 <__aeabi_dmul>
   19ef0:	9d04      	ldr	r5, [sp, #16]
   19ef2:	9e05      	ldr	r6, [sp, #20]
   19ef4:	9006      	str	r0, [sp, #24]
   19ef6:	9107      	str	r1, [sp, #28]
   19ef8:	002a      	movs	r2, r5
   19efa:	0033      	movs	r3, r6
   19efc:	0028      	movs	r0, r5
   19efe:	0031      	movs	r1, r6
   19f00:	f004 f908 	bl	1e114 <__aeabi_dmul>
   19f04:	0006      	movs	r6, r0
   19f06:	000f      	movs	r7, r1
   19f08:	4aa7      	ldr	r2, [pc, #668]	; (1a1a8 <__ieee754_pow+0x5bc>)
   19f0a:	4ba8      	ldr	r3, [pc, #672]	; (1a1ac <__ieee754_pow+0x5c0>)
   19f0c:	f004 f902 	bl	1e114 <__aeabi_dmul>
   19f10:	4aa7      	ldr	r2, [pc, #668]	; (1a1b0 <__ieee754_pow+0x5c4>)
   19f12:	4ba8      	ldr	r3, [pc, #672]	; (1a1b4 <__ieee754_pow+0x5c8>)
   19f14:	f003 f9ba 	bl	1d28c <__aeabi_dadd>
   19f18:	0032      	movs	r2, r6
   19f1a:	003b      	movs	r3, r7
   19f1c:	f004 f8fa 	bl	1e114 <__aeabi_dmul>
   19f20:	4aa5      	ldr	r2, [pc, #660]	; (1a1b8 <__ieee754_pow+0x5cc>)
   19f22:	4ba6      	ldr	r3, [pc, #664]	; (1a1bc <__ieee754_pow+0x5d0>)
   19f24:	f003 f9b2 	bl	1d28c <__aeabi_dadd>
   19f28:	0032      	movs	r2, r6
   19f2a:	003b      	movs	r3, r7
   19f2c:	f004 f8f2 	bl	1e114 <__aeabi_dmul>
   19f30:	4aa3      	ldr	r2, [pc, #652]	; (1a1c0 <__ieee754_pow+0x5d4>)
   19f32:	4ba4      	ldr	r3, [pc, #656]	; (1a1c4 <__ieee754_pow+0x5d8>)
   19f34:	f003 f9aa 	bl	1d28c <__aeabi_dadd>
   19f38:	0032      	movs	r2, r6
   19f3a:	003b      	movs	r3, r7
   19f3c:	f004 f8ea 	bl	1e114 <__aeabi_dmul>
   19f40:	4aa1      	ldr	r2, [pc, #644]	; (1a1c8 <__ieee754_pow+0x5dc>)
   19f42:	4ba2      	ldr	r3, [pc, #648]	; (1a1cc <__ieee754_pow+0x5e0>)
   19f44:	f003 f9a2 	bl	1d28c <__aeabi_dadd>
   19f48:	0032      	movs	r2, r6
   19f4a:	003b      	movs	r3, r7
   19f4c:	f004 f8e2 	bl	1e114 <__aeabi_dmul>
   19f50:	4a9f      	ldr	r2, [pc, #636]	; (1a1d0 <__ieee754_pow+0x5e4>)
   19f52:	4ba0      	ldr	r3, [pc, #640]	; (1a1d4 <__ieee754_pow+0x5e8>)
   19f54:	f003 f99a 	bl	1d28c <__aeabi_dadd>
   19f58:	0032      	movs	r2, r6
   19f5a:	0004      	movs	r4, r0
   19f5c:	000d      	movs	r5, r1
   19f5e:	003b      	movs	r3, r7
   19f60:	0030      	movs	r0, r6
   19f62:	0039      	movs	r1, r7
   19f64:	f004 f8d6 	bl	1e114 <__aeabi_dmul>
   19f68:	0002      	movs	r2, r0
   19f6a:	000b      	movs	r3, r1
   19f6c:	0020      	movs	r0, r4
   19f6e:	0029      	movs	r1, r5
   19f70:	f004 f8d0 	bl	1e114 <__aeabi_dmul>
   19f74:	9e02      	ldr	r6, [sp, #8]
   19f76:	9f03      	ldr	r7, [sp, #12]
   19f78:	0004      	movs	r4, r0
   19f7a:	000d      	movs	r5, r1
   19f7c:	9804      	ldr	r0, [sp, #16]
   19f7e:	9905      	ldr	r1, [sp, #20]
   19f80:	0032      	movs	r2, r6
   19f82:	003b      	movs	r3, r7
   19f84:	f003 f982 	bl	1d28c <__aeabi_dadd>
   19f88:	9a06      	ldr	r2, [sp, #24]
   19f8a:	9b07      	ldr	r3, [sp, #28]
   19f8c:	f004 f8c2 	bl	1e114 <__aeabi_dmul>
   19f90:	0022      	movs	r2, r4
   19f92:	002b      	movs	r3, r5
   19f94:	f003 f97a 	bl	1d28c <__aeabi_dadd>
   19f98:	0032      	movs	r2, r6
   19f9a:	900a      	str	r0, [sp, #40]	; 0x28
   19f9c:	910b      	str	r1, [sp, #44]	; 0x2c
   19f9e:	003b      	movs	r3, r7
   19fa0:	0030      	movs	r0, r6
   19fa2:	0039      	movs	r1, r7
   19fa4:	9602      	str	r6, [sp, #8]
   19fa6:	9703      	str	r7, [sp, #12]
   19fa8:	f004 f8b4 	bl	1e114 <__aeabi_dmul>
   19fac:	2200      	movs	r2, #0
   19fae:	4b8a      	ldr	r3, [pc, #552]	; (1a1d8 <__ieee754_pow+0x5ec>)
   19fb0:	0004      	movs	r4, r0
   19fb2:	000d      	movs	r5, r1
   19fb4:	f003 f96a 	bl	1d28c <__aeabi_dadd>
   19fb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   19fba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   19fbc:	f003 f966 	bl	1d28c <__aeabi_dadd>
   19fc0:	2600      	movs	r6, #0
   19fc2:	000f      	movs	r7, r1
   19fc4:	0032      	movs	r2, r6
   19fc6:	000b      	movs	r3, r1
   19fc8:	9802      	ldr	r0, [sp, #8]
   19fca:	9903      	ldr	r1, [sp, #12]
   19fcc:	f004 f8a2 	bl	1e114 <__aeabi_dmul>
   19fd0:	2200      	movs	r2, #0
   19fd2:	9002      	str	r0, [sp, #8]
   19fd4:	9103      	str	r1, [sp, #12]
   19fd6:	4b80      	ldr	r3, [pc, #512]	; (1a1d8 <__ieee754_pow+0x5ec>)
   19fd8:	0030      	movs	r0, r6
   19fda:	0039      	movs	r1, r7
   19fdc:	f004 fb1a 	bl	1e614 <__aeabi_dsub>
   19fe0:	0022      	movs	r2, r4
   19fe2:	002b      	movs	r3, r5
   19fe4:	f004 fb16 	bl	1e614 <__aeabi_dsub>
   19fe8:	0002      	movs	r2, r0
   19fea:	000b      	movs	r3, r1
   19fec:	980a      	ldr	r0, [sp, #40]	; 0x28
   19fee:	990b      	ldr	r1, [sp, #44]	; 0x2c
   19ff0:	f004 fb10 	bl	1e614 <__aeabi_dsub>
   19ff4:	9a04      	ldr	r2, [sp, #16]
   19ff6:	9b05      	ldr	r3, [sp, #20]
   19ff8:	f004 f88c 	bl	1e114 <__aeabi_dmul>
   19ffc:	0032      	movs	r2, r6
   19ffe:	0004      	movs	r4, r0
   1a000:	000d      	movs	r5, r1
   1a002:	9806      	ldr	r0, [sp, #24]
   1a004:	9907      	ldr	r1, [sp, #28]
   1a006:	003b      	movs	r3, r7
   1a008:	f004 f884 	bl	1e114 <__aeabi_dmul>
   1a00c:	0002      	movs	r2, r0
   1a00e:	000b      	movs	r3, r1
   1a010:	0020      	movs	r0, r4
   1a012:	0029      	movs	r1, r5
   1a014:	f003 f93a 	bl	1d28c <__aeabi_dadd>
   1a018:	0004      	movs	r4, r0
   1a01a:	000d      	movs	r5, r1
   1a01c:	0002      	movs	r2, r0
   1a01e:	000b      	movs	r3, r1
   1a020:	9802      	ldr	r0, [sp, #8]
   1a022:	9903      	ldr	r1, [sp, #12]
   1a024:	f003 f932 	bl	1d28c <__aeabi_dadd>
   1a028:	2600      	movs	r6, #0
   1a02a:	22e0      	movs	r2, #224	; 0xe0
   1a02c:	4b6b      	ldr	r3, [pc, #428]	; (1a1dc <__ieee754_pow+0x5f0>)
   1a02e:	0612      	lsls	r2, r2, #24
   1a030:	0030      	movs	r0, r6
   1a032:	000f      	movs	r7, r1
   1a034:	f004 f86e 	bl	1e114 <__aeabi_dmul>
   1a038:	9a02      	ldr	r2, [sp, #8]
   1a03a:	9b03      	ldr	r3, [sp, #12]
   1a03c:	9004      	str	r0, [sp, #16]
   1a03e:	9105      	str	r1, [sp, #20]
   1a040:	0030      	movs	r0, r6
   1a042:	0039      	movs	r1, r7
   1a044:	f004 fae6 	bl	1e614 <__aeabi_dsub>
   1a048:	0002      	movs	r2, r0
   1a04a:	000b      	movs	r3, r1
   1a04c:	0020      	movs	r0, r4
   1a04e:	0029      	movs	r1, r5
   1a050:	f004 fae0 	bl	1e614 <__aeabi_dsub>
   1a054:	4a62      	ldr	r2, [pc, #392]	; (1a1e0 <__ieee754_pow+0x5f4>)
   1a056:	4b61      	ldr	r3, [pc, #388]	; (1a1dc <__ieee754_pow+0x5f0>)
   1a058:	f004 f85c 	bl	1e114 <__aeabi_dmul>
   1a05c:	4a61      	ldr	r2, [pc, #388]	; (1a1e4 <__ieee754_pow+0x5f8>)
   1a05e:	0004      	movs	r4, r0
   1a060:	000d      	movs	r5, r1
   1a062:	4b61      	ldr	r3, [pc, #388]	; (1a1e8 <__ieee754_pow+0x5fc>)
   1a064:	0030      	movs	r0, r6
   1a066:	0039      	movs	r1, r7
   1a068:	f004 f854 	bl	1e114 <__aeabi_dmul>
   1a06c:	0002      	movs	r2, r0
   1a06e:	000b      	movs	r3, r1
   1a070:	0020      	movs	r0, r4
   1a072:	0029      	movs	r1, r5
   1a074:	f003 f90a 	bl	1d28c <__aeabi_dadd>
   1a078:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1a07a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1a07c:	f003 f906 	bl	1d28c <__aeabi_dadd>
   1a080:	0006      	movs	r6, r0
   1a082:	4648      	mov	r0, r9
   1a084:	000f      	movs	r7, r1
   1a086:	f004 fe2f 	bl	1ece8 <__aeabi_i2d>
   1a08a:	0004      	movs	r4, r0
   1a08c:	000d      	movs	r5, r1
   1a08e:	9804      	ldr	r0, [sp, #16]
   1a090:	9905      	ldr	r1, [sp, #20]
   1a092:	0032      	movs	r2, r6
   1a094:	003b      	movs	r3, r7
   1a096:	f003 f8f9 	bl	1d28c <__aeabi_dadd>
   1a09a:	9a08      	ldr	r2, [sp, #32]
   1a09c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a09e:	f003 f8f5 	bl	1d28c <__aeabi_dadd>
   1a0a2:	0022      	movs	r2, r4
   1a0a4:	002b      	movs	r3, r5
   1a0a6:	f003 f8f1 	bl	1d28c <__aeabi_dadd>
   1a0aa:	2000      	movs	r0, #0
   1a0ac:	0022      	movs	r2, r4
   1a0ae:	002b      	movs	r3, r5
   1a0b0:	9002      	str	r0, [sp, #8]
   1a0b2:	9103      	str	r1, [sp, #12]
   1a0b4:	f004 faae 	bl	1e614 <__aeabi_dsub>
   1a0b8:	9a08      	ldr	r2, [sp, #32]
   1a0ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a0bc:	f004 faaa 	bl	1e614 <__aeabi_dsub>
   1a0c0:	9a04      	ldr	r2, [sp, #16]
   1a0c2:	9b05      	ldr	r3, [sp, #20]
   1a0c4:	f004 faa6 	bl	1e614 <__aeabi_dsub>
   1a0c8:	0002      	movs	r2, r0
   1a0ca:	000b      	movs	r3, r1
   1a0cc:	0030      	movs	r0, r6
   1a0ce:	0039      	movs	r1, r7
   1a0d0:	f004 faa0 	bl	1e614 <__aeabi_dsub>
   1a0d4:	9004      	str	r0, [sp, #16]
   1a0d6:	9105      	str	r1, [sp, #20]
   1a0d8:	465b      	mov	r3, fp
   1a0da:	4642      	mov	r2, r8
   1a0dc:	3b01      	subs	r3, #1
   1a0de:	4313      	orrs	r3, r2
   1a0e0:	d100      	bne.n	1a0e4 <__ieee754_pow+0x4f8>
   1a0e2:	e1ab      	b.n	1a43c <__ieee754_pow+0x850>
   1a0e4:	2300      	movs	r3, #0
   1a0e6:	4c2c      	ldr	r4, [pc, #176]	; (1a198 <__ieee754_pow+0x5ac>)
   1a0e8:	9306      	str	r3, [sp, #24]
   1a0ea:	9407      	str	r4, [sp, #28]
   1a0ec:	9800      	ldr	r0, [sp, #0]
   1a0ee:	9901      	ldr	r1, [sp, #4]
   1a0f0:	2600      	movs	r6, #0
   1a0f2:	000b      	movs	r3, r1
   1a0f4:	0032      	movs	r2, r6
   1a0f6:	000f      	movs	r7, r1
   1a0f8:	f004 fa8c 	bl	1e614 <__aeabi_dsub>
   1a0fc:	9a02      	ldr	r2, [sp, #8]
   1a0fe:	9b03      	ldr	r3, [sp, #12]
   1a100:	f004 f808 	bl	1e114 <__aeabi_dmul>
   1a104:	9a00      	ldr	r2, [sp, #0]
   1a106:	9b01      	ldr	r3, [sp, #4]
   1a108:	0004      	movs	r4, r0
   1a10a:	000d      	movs	r5, r1
   1a10c:	9804      	ldr	r0, [sp, #16]
   1a10e:	9905      	ldr	r1, [sp, #20]
   1a110:	f004 f800 	bl	1e114 <__aeabi_dmul>
   1a114:	0002      	movs	r2, r0
   1a116:	000b      	movs	r3, r1
   1a118:	0020      	movs	r0, r4
   1a11a:	0029      	movs	r1, r5
   1a11c:	f003 f8b6 	bl	1d28c <__aeabi_dadd>
   1a120:	0004      	movs	r4, r0
   1a122:	000d      	movs	r5, r1
   1a124:	9802      	ldr	r0, [sp, #8]
   1a126:	9903      	ldr	r1, [sp, #12]
   1a128:	0032      	movs	r2, r6
   1a12a:	003b      	movs	r3, r7
   1a12c:	9400      	str	r4, [sp, #0]
   1a12e:	9501      	str	r5, [sp, #4]
   1a130:	f003 fff0 	bl	1e114 <__aeabi_dmul>
   1a134:	0002      	movs	r2, r0
   1a136:	000b      	movs	r3, r1
   1a138:	0006      	movs	r6, r0
   1a13a:	000f      	movs	r7, r1
   1a13c:	0020      	movs	r0, r4
   1a13e:	0029      	movs	r1, r5
   1a140:	f003 f8a4 	bl	1d28c <__aeabi_dadd>
   1a144:	4b29      	ldr	r3, [pc, #164]	; (1a1ec <__ieee754_pow+0x600>)
   1a146:	0004      	movs	r4, r0
   1a148:	000d      	movs	r5, r1
   1a14a:	0002      	movs	r2, r0
   1a14c:	468b      	mov	fp, r1
   1a14e:	4299      	cmp	r1, r3
   1a150:	dc00      	bgt.n	1a154 <__ieee754_pow+0x568>
   1a152:	e14f      	b.n	1a3f4 <__ieee754_pow+0x808>
   1a154:	4b26      	ldr	r3, [pc, #152]	; (1a1f0 <__ieee754_pow+0x604>)
   1a156:	18cb      	adds	r3, r1, r3
   1a158:	4303      	orrs	r3, r0
   1a15a:	d000      	beq.n	1a15e <__ieee754_pow+0x572>
   1a15c:	e1e2      	b.n	1a524 <__ieee754_pow+0x938>
   1a15e:	9800      	ldr	r0, [sp, #0]
   1a160:	9901      	ldr	r1, [sp, #4]
   1a162:	4a24      	ldr	r2, [pc, #144]	; (1a1f4 <__ieee754_pow+0x608>)
   1a164:	4b24      	ldr	r3, [pc, #144]	; (1a1f8 <__ieee754_pow+0x60c>)
   1a166:	f003 f891 	bl	1d28c <__aeabi_dadd>
   1a16a:	0032      	movs	r2, r6
   1a16c:	9002      	str	r0, [sp, #8]
   1a16e:	9103      	str	r1, [sp, #12]
   1a170:	003b      	movs	r3, r7
   1a172:	0020      	movs	r0, r4
   1a174:	0029      	movs	r1, r5
   1a176:	f004 fa4d 	bl	1e614 <__aeabi_dsub>
   1a17a:	0002      	movs	r2, r0
   1a17c:	000b      	movs	r3, r1
   1a17e:	9802      	ldr	r0, [sp, #8]
   1a180:	9903      	ldr	r1, [sp, #12]
   1a182:	f002 f8a3 	bl	1c2cc <__aeabi_dcmpgt>
   1a186:	46aa      	mov	sl, r5
   1a188:	e038      	b.n	1a1fc <__ieee754_pow+0x610>
   1a18a:	46c0      	nop			; (mov r8, r8)
   1a18c:	000fffff 	.word	0x000fffff
   1a190:	43400000 	.word	0x43400000
   1a194:	fffffc01 	.word	0xfffffc01
   1a198:	3ff00000 	.word	0x3ff00000
   1a19c:	0003988e 	.word	0x0003988e
   1a1a0:	000bb679 	.word	0x000bb679
   1a1a4:	fff00000 	.word	0xfff00000
   1a1a8:	4a454eef 	.word	0x4a454eef
   1a1ac:	3fca7e28 	.word	0x3fca7e28
   1a1b0:	93c9db65 	.word	0x93c9db65
   1a1b4:	3fcd864a 	.word	0x3fcd864a
   1a1b8:	a91d4101 	.word	0xa91d4101
   1a1bc:	3fd17460 	.word	0x3fd17460
   1a1c0:	518f264d 	.word	0x518f264d
   1a1c4:	3fd55555 	.word	0x3fd55555
   1a1c8:	db6fabff 	.word	0xdb6fabff
   1a1cc:	3fdb6db6 	.word	0x3fdb6db6
   1a1d0:	33333303 	.word	0x33333303
   1a1d4:	3fe33333 	.word	0x3fe33333
   1a1d8:	40080000 	.word	0x40080000
   1a1dc:	3feec709 	.word	0x3feec709
   1a1e0:	dc3a03fd 	.word	0xdc3a03fd
   1a1e4:	145b01f5 	.word	0x145b01f5
   1a1e8:	be3e2fe0 	.word	0xbe3e2fe0
   1a1ec:	408fffff 	.word	0x408fffff
   1a1f0:	bf700000 	.word	0xbf700000
   1a1f4:	652b82fe 	.word	0x652b82fe
   1a1f8:	3c971547 	.word	0x3c971547
   1a1fc:	2800      	cmp	r0, #0
   1a1fe:	d000      	beq.n	1a202 <__ieee754_pow+0x616>
   1a200:	e190      	b.n	1a524 <__ieee754_pow+0x938>
   1a202:	4aec      	ldr	r2, [pc, #944]	; (1a5b4 <__ieee754_pow+0x9c8>)
   1a204:	4653      	mov	r3, sl
   1a206:	4694      	mov	ip, r2
   1a208:	2280      	movs	r2, #128	; 0x80
   1a20a:	0352      	lsls	r2, r2, #13
   1a20c:	0011      	movs	r1, r2
   1a20e:	151b      	asrs	r3, r3, #20
   1a210:	4463      	add	r3, ip
   1a212:	4119      	asrs	r1, r3
   1a214:	000b      	movs	r3, r1
   1a216:	4690      	mov	r8, r2
   1a218:	4ae7      	ldr	r2, [pc, #924]	; (1a5b8 <__ieee754_pow+0x9cc>)
   1a21a:	445b      	add	r3, fp
   1a21c:	4694      	mov	ip, r2
   1a21e:	005c      	lsls	r4, r3, #1
   1a220:	0d64      	lsrs	r4, r4, #21
   1a222:	4de6      	ldr	r5, [pc, #920]	; (1a5bc <__ieee754_pow+0x9d0>)
   1a224:	4464      	add	r4, ip
   1a226:	4125      	asrs	r5, r4
   1a228:	001a      	movs	r2, r3
   1a22a:	43aa      	bics	r2, r5
   1a22c:	0011      	movs	r1, r2
   1a22e:	4642      	mov	r2, r8
   1a230:	031b      	lsls	r3, r3, #12
   1a232:	0b1b      	lsrs	r3, r3, #12
   1a234:	4313      	orrs	r3, r2
   1a236:	2214      	movs	r2, #20
   1a238:	1b14      	subs	r4, r2, r4
   1a23a:	4123      	asrs	r3, r4
   1a23c:	4699      	mov	r9, r3
   1a23e:	465b      	mov	r3, fp
   1a240:	2000      	movs	r0, #0
   1a242:	2b00      	cmp	r3, #0
   1a244:	da00      	bge.n	1a248 <__ieee754_pow+0x65c>
   1a246:	e1b0      	b.n	1a5aa <__ieee754_pow+0x9be>
   1a248:	0002      	movs	r2, r0
   1a24a:	000b      	movs	r3, r1
   1a24c:	0030      	movs	r0, r6
   1a24e:	0039      	movs	r1, r7
   1a250:	f004 f9e0 	bl	1e614 <__aeabi_dsub>
   1a254:	000b      	movs	r3, r1
   1a256:	0002      	movs	r2, r0
   1a258:	0006      	movs	r6, r0
   1a25a:	000f      	movs	r7, r1
   1a25c:	9800      	ldr	r0, [sp, #0]
   1a25e:	9901      	ldr	r1, [sp, #4]
   1a260:	f003 f814 	bl	1d28c <__aeabi_dadd>
   1a264:	464b      	mov	r3, r9
   1a266:	051b      	lsls	r3, r3, #20
   1a268:	000d      	movs	r5, r1
   1a26a:	4698      	mov	r8, r3
   1a26c:	2400      	movs	r4, #0
   1a26e:	2200      	movs	r2, #0
   1a270:	4bd3      	ldr	r3, [pc, #844]	; (1a5c0 <__ieee754_pow+0x9d4>)
   1a272:	0020      	movs	r0, r4
   1a274:	0029      	movs	r1, r5
   1a276:	f003 ff4d 	bl	1e114 <__aeabi_dmul>
   1a27a:	0032      	movs	r2, r6
   1a27c:	9002      	str	r0, [sp, #8]
   1a27e:	9103      	str	r1, [sp, #12]
   1a280:	003b      	movs	r3, r7
   1a282:	0020      	movs	r0, r4
   1a284:	0029      	movs	r1, r5
   1a286:	f004 f9c5 	bl	1e614 <__aeabi_dsub>
   1a28a:	0002      	movs	r2, r0
   1a28c:	000b      	movs	r3, r1
   1a28e:	9800      	ldr	r0, [sp, #0]
   1a290:	9901      	ldr	r1, [sp, #4]
   1a292:	f004 f9bf 	bl	1e614 <__aeabi_dsub>
   1a296:	4acb      	ldr	r2, [pc, #812]	; (1a5c4 <__ieee754_pow+0x9d8>)
   1a298:	4bcb      	ldr	r3, [pc, #812]	; (1a5c8 <__ieee754_pow+0x9dc>)
   1a29a:	f003 ff3b 	bl	1e114 <__aeabi_dmul>
   1a29e:	4acb      	ldr	r2, [pc, #812]	; (1a5cc <__ieee754_pow+0x9e0>)
   1a2a0:	0006      	movs	r6, r0
   1a2a2:	000f      	movs	r7, r1
   1a2a4:	4bca      	ldr	r3, [pc, #808]	; (1a5d0 <__ieee754_pow+0x9e4>)
   1a2a6:	0020      	movs	r0, r4
   1a2a8:	0029      	movs	r1, r5
   1a2aa:	f003 ff33 	bl	1e114 <__aeabi_dmul>
   1a2ae:	0002      	movs	r2, r0
   1a2b0:	000b      	movs	r3, r1
   1a2b2:	0030      	movs	r0, r6
   1a2b4:	0039      	movs	r1, r7
   1a2b6:	f002 ffe9 	bl	1d28c <__aeabi_dadd>
   1a2ba:	0004      	movs	r4, r0
   1a2bc:	000d      	movs	r5, r1
   1a2be:	0002      	movs	r2, r0
   1a2c0:	000b      	movs	r3, r1
   1a2c2:	9802      	ldr	r0, [sp, #8]
   1a2c4:	9903      	ldr	r1, [sp, #12]
   1a2c6:	f002 ffe1 	bl	1d28c <__aeabi_dadd>
   1a2ca:	9a02      	ldr	r2, [sp, #8]
   1a2cc:	9b03      	ldr	r3, [sp, #12]
   1a2ce:	0006      	movs	r6, r0
   1a2d0:	000f      	movs	r7, r1
   1a2d2:	f004 f99f 	bl	1e614 <__aeabi_dsub>
   1a2d6:	0002      	movs	r2, r0
   1a2d8:	000b      	movs	r3, r1
   1a2da:	0020      	movs	r0, r4
   1a2dc:	0029      	movs	r1, r5
   1a2de:	f004 f999 	bl	1e614 <__aeabi_dsub>
   1a2e2:	0032      	movs	r2, r6
   1a2e4:	9000      	str	r0, [sp, #0]
   1a2e6:	9101      	str	r1, [sp, #4]
   1a2e8:	003b      	movs	r3, r7
   1a2ea:	0030      	movs	r0, r6
   1a2ec:	0039      	movs	r1, r7
   1a2ee:	f003 ff11 	bl	1e114 <__aeabi_dmul>
   1a2f2:	0004      	movs	r4, r0
   1a2f4:	000d      	movs	r5, r1
   1a2f6:	4ab7      	ldr	r2, [pc, #732]	; (1a5d4 <__ieee754_pow+0x9e8>)
   1a2f8:	4bb7      	ldr	r3, [pc, #732]	; (1a5d8 <__ieee754_pow+0x9ec>)
   1a2fa:	f003 ff0b 	bl	1e114 <__aeabi_dmul>
   1a2fe:	4ab7      	ldr	r2, [pc, #732]	; (1a5dc <__ieee754_pow+0x9f0>)
   1a300:	4bb7      	ldr	r3, [pc, #732]	; (1a5e0 <__ieee754_pow+0x9f4>)
   1a302:	f004 f987 	bl	1e614 <__aeabi_dsub>
   1a306:	0022      	movs	r2, r4
   1a308:	002b      	movs	r3, r5
   1a30a:	f003 ff03 	bl	1e114 <__aeabi_dmul>
   1a30e:	4ab5      	ldr	r2, [pc, #724]	; (1a5e4 <__ieee754_pow+0x9f8>)
   1a310:	4bb5      	ldr	r3, [pc, #724]	; (1a5e8 <__ieee754_pow+0x9fc>)
   1a312:	f002 ffbb 	bl	1d28c <__aeabi_dadd>
   1a316:	0022      	movs	r2, r4
   1a318:	002b      	movs	r3, r5
   1a31a:	f003 fefb 	bl	1e114 <__aeabi_dmul>
   1a31e:	4ab3      	ldr	r2, [pc, #716]	; (1a5ec <__ieee754_pow+0xa00>)
   1a320:	4bb3      	ldr	r3, [pc, #716]	; (1a5f0 <__ieee754_pow+0xa04>)
   1a322:	f004 f977 	bl	1e614 <__aeabi_dsub>
   1a326:	0022      	movs	r2, r4
   1a328:	002b      	movs	r3, r5
   1a32a:	f003 fef3 	bl	1e114 <__aeabi_dmul>
   1a32e:	4ab1      	ldr	r2, [pc, #708]	; (1a5f4 <__ieee754_pow+0xa08>)
   1a330:	4bb1      	ldr	r3, [pc, #708]	; (1a5f8 <__ieee754_pow+0xa0c>)
   1a332:	f002 ffab 	bl	1d28c <__aeabi_dadd>
   1a336:	0022      	movs	r2, r4
   1a338:	002b      	movs	r3, r5
   1a33a:	f003 feeb 	bl	1e114 <__aeabi_dmul>
   1a33e:	0002      	movs	r2, r0
   1a340:	000b      	movs	r3, r1
   1a342:	0030      	movs	r0, r6
   1a344:	0039      	movs	r1, r7
   1a346:	f004 f965 	bl	1e614 <__aeabi_dsub>
   1a34a:	0004      	movs	r4, r0
   1a34c:	000d      	movs	r5, r1
   1a34e:	0002      	movs	r2, r0
   1a350:	000b      	movs	r3, r1
   1a352:	0030      	movs	r0, r6
   1a354:	0039      	movs	r1, r7
   1a356:	f003 fedd 	bl	1e114 <__aeabi_dmul>
   1a35a:	2380      	movs	r3, #128	; 0x80
   1a35c:	9002      	str	r0, [sp, #8]
   1a35e:	9103      	str	r1, [sp, #12]
   1a360:	2200      	movs	r2, #0
   1a362:	05db      	lsls	r3, r3, #23
   1a364:	0020      	movs	r0, r4
   1a366:	0029      	movs	r1, r5
   1a368:	f004 f954 	bl	1e614 <__aeabi_dsub>
   1a36c:	0002      	movs	r2, r0
   1a36e:	000b      	movs	r3, r1
   1a370:	9802      	ldr	r0, [sp, #8]
   1a372:	9903      	ldr	r1, [sp, #12]
   1a374:	f003 fa9a 	bl	1d8ac <__aeabi_ddiv>
   1a378:	9a00      	ldr	r2, [sp, #0]
   1a37a:	9b01      	ldr	r3, [sp, #4]
   1a37c:	0004      	movs	r4, r0
   1a37e:	000d      	movs	r5, r1
   1a380:	0030      	movs	r0, r6
   1a382:	0039      	movs	r1, r7
   1a384:	f003 fec6 	bl	1e114 <__aeabi_dmul>
   1a388:	9a00      	ldr	r2, [sp, #0]
   1a38a:	9b01      	ldr	r3, [sp, #4]
   1a38c:	f002 ff7e 	bl	1d28c <__aeabi_dadd>
   1a390:	0002      	movs	r2, r0
   1a392:	000b      	movs	r3, r1
   1a394:	0020      	movs	r0, r4
   1a396:	0029      	movs	r1, r5
   1a398:	f004 f93c 	bl	1e614 <__aeabi_dsub>
   1a39c:	0032      	movs	r2, r6
   1a39e:	003b      	movs	r3, r7
   1a3a0:	f004 f938 	bl	1e614 <__aeabi_dsub>
   1a3a4:	0002      	movs	r2, r0
   1a3a6:	000b      	movs	r3, r1
   1a3a8:	2000      	movs	r0, #0
   1a3aa:	4994      	ldr	r1, [pc, #592]	; (1a5fc <__ieee754_pow+0xa10>)
   1a3ac:	f004 f932 	bl	1e614 <__aeabi_dsub>
   1a3b0:	4643      	mov	r3, r8
   1a3b2:	185b      	adds	r3, r3, r1
   1a3b4:	151a      	asrs	r2, r3, #20
   1a3b6:	2a00      	cmp	r2, #0
   1a3b8:	dc00      	bgt.n	1a3bc <__ieee754_pow+0x7d0>
   1a3ba:	e149      	b.n	1a650 <__ieee754_pow+0xa64>
   1a3bc:	0019      	movs	r1, r3
   1a3be:	9a06      	ldr	r2, [sp, #24]
   1a3c0:	9b07      	ldr	r3, [sp, #28]
   1a3c2:	f003 fea7 	bl	1e114 <__aeabi_dmul>
   1a3c6:	e459      	b.n	19c7c <__ieee754_pow+0x90>
   1a3c8:	003a      	movs	r2, r7
   1a3ca:	0033      	movs	r3, r6
   1a3cc:	0038      	movs	r0, r7
   1a3ce:	0031      	movs	r1, r6
   1a3d0:	f003 fea0 	bl	1e114 <__aeabi_dmul>
   1a3d4:	e452      	b.n	19c7c <__ieee754_pow+0x90>
   1a3d6:	4653      	mov	r3, sl
   1a3d8:	2b00      	cmp	r3, #0
   1a3da:	db00      	blt.n	1a3de <__ieee754_pow+0x7f2>
   1a3dc:	e4d9      	b.n	19d92 <__ieee754_pow+0x1a6>
   1a3de:	9c00      	ldr	r4, [sp, #0]
   1a3e0:	9d01      	ldr	r5, [sp, #4]
   1a3e2:	2280      	movs	r2, #128	; 0x80
   1a3e4:	0612      	lsls	r2, r2, #24
   1a3e6:	002b      	movs	r3, r5
   1a3e8:	4694      	mov	ip, r2
   1a3ea:	4463      	add	r3, ip
   1a3ec:	0020      	movs	r0, r4
   1a3ee:	0019      	movs	r1, r3
   1a3f0:	f7ff fc44 	bl	19c7c <__ieee754_pow+0x90>
   1a3f4:	004b      	lsls	r3, r1, #1
   1a3f6:	085b      	lsrs	r3, r3, #1
   1a3f8:	469a      	mov	sl, r3
   1a3fa:	4b81      	ldr	r3, [pc, #516]	; (1a600 <__ieee754_pow+0xa14>)
   1a3fc:	459a      	cmp	sl, r3
   1a3fe:	dc00      	bgt.n	1a402 <__ieee754_pow+0x816>
   1a400:	e0b1      	b.n	1a566 <__ieee754_pow+0x97a>
   1a402:	4b80      	ldr	r3, [pc, #512]	; (1a604 <__ieee754_pow+0xa18>)
   1a404:	445b      	add	r3, fp
   1a406:	431a      	orrs	r2, r3
   1a408:	d10c      	bne.n	1a424 <__ieee754_pow+0x838>
   1a40a:	0032      	movs	r2, r6
   1a40c:	003b      	movs	r3, r7
   1a40e:	f004 f901 	bl	1e614 <__aeabi_dsub>
   1a412:	0002      	movs	r2, r0
   1a414:	000b      	movs	r3, r1
   1a416:	9800      	ldr	r0, [sp, #0]
   1a418:	9901      	ldr	r1, [sp, #4]
   1a41a:	f001 ff4d 	bl	1c2b8 <__aeabi_dcmple>
   1a41e:	2800      	cmp	r0, #0
   1a420:	d100      	bne.n	1a424 <__ieee754_pow+0x838>
   1a422:	e6ee      	b.n	1a202 <__ieee754_pow+0x616>
   1a424:	9806      	ldr	r0, [sp, #24]
   1a426:	9907      	ldr	r1, [sp, #28]
   1a428:	4a77      	ldr	r2, [pc, #476]	; (1a608 <__ieee754_pow+0xa1c>)
   1a42a:	4b78      	ldr	r3, [pc, #480]	; (1a60c <__ieee754_pow+0xa20>)
   1a42c:	f003 fe72 	bl	1e114 <__aeabi_dmul>
   1a430:	4a75      	ldr	r2, [pc, #468]	; (1a608 <__ieee754_pow+0xa1c>)
   1a432:	4b76      	ldr	r3, [pc, #472]	; (1a60c <__ieee754_pow+0xa20>)
   1a434:	f003 fe6e 	bl	1e114 <__aeabi_dmul>
   1a438:	f7ff fc20 	bl	19c7c <__ieee754_pow+0x90>
   1a43c:	2300      	movs	r3, #0
   1a43e:	4c74      	ldr	r4, [pc, #464]	; (1a610 <__ieee754_pow+0xa24>)
   1a440:	9306      	str	r3, [sp, #24]
   1a442:	9407      	str	r4, [sp, #28]
   1a444:	e652      	b.n	1a0ec <__ieee754_pow+0x500>
   1a446:	0002      	movs	r2, r0
   1a448:	000b      	movs	r3, r1
   1a44a:	2000      	movs	r0, #0
   1a44c:	496b      	ldr	r1, [pc, #428]	; (1a5fc <__ieee754_pow+0xa10>)
   1a44e:	f003 fa2d 	bl	1d8ac <__aeabi_ddiv>
   1a452:	f7ff fc32 	bl	19cba <__ieee754_pow+0xce>
   1a456:	4653      	mov	r3, sl
   1a458:	2b00      	cmp	r3, #0
   1a45a:	db00      	blt.n	1a45e <__ieee754_pow+0x872>
   1a45c:	e499      	b.n	19d92 <__ieee754_pow+0x1a6>
   1a45e:	e454      	b.n	19d0a <__ieee754_pow+0x11e>
   1a460:	4b6c      	ldr	r3, [pc, #432]	; (1a614 <__ieee754_pow+0xa28>)
   1a462:	429c      	cmp	r4, r3
   1a464:	ddf7      	ble.n	1a456 <__ieee754_pow+0x86a>
   1a466:	4b65      	ldr	r3, [pc, #404]	; (1a5fc <__ieee754_pow+0xa10>)
   1a468:	429c      	cmp	r4, r3
   1a46a:	dd00      	ble.n	1a46e <__ieee754_pow+0x882>
   1a46c:	e44a      	b.n	19d04 <__ieee754_pow+0x118>
   1a46e:	2200      	movs	r2, #0
   1a470:	4b62      	ldr	r3, [pc, #392]	; (1a5fc <__ieee754_pow+0xa10>)
   1a472:	f004 f8cf 	bl	1e614 <__aeabi_dsub>
   1a476:	22c0      	movs	r2, #192	; 0xc0
   1a478:	4b67      	ldr	r3, [pc, #412]	; (1a618 <__ieee754_pow+0xa2c>)
   1a47a:	05d2      	lsls	r2, r2, #23
   1a47c:	0004      	movs	r4, r0
   1a47e:	000d      	movs	r5, r1
   1a480:	f003 fe48 	bl	1e114 <__aeabi_dmul>
   1a484:	4a65      	ldr	r2, [pc, #404]	; (1a61c <__ieee754_pow+0xa30>)
   1a486:	0006      	movs	r6, r0
   1a488:	000f      	movs	r7, r1
   1a48a:	4b65      	ldr	r3, [pc, #404]	; (1a620 <__ieee754_pow+0xa34>)
   1a48c:	0020      	movs	r0, r4
   1a48e:	0029      	movs	r1, r5
   1a490:	f003 fe40 	bl	1e114 <__aeabi_dmul>
   1a494:	2200      	movs	r2, #0
   1a496:	9002      	str	r0, [sp, #8]
   1a498:	9103      	str	r1, [sp, #12]
   1a49a:	4b62      	ldr	r3, [pc, #392]	; (1a624 <__ieee754_pow+0xa38>)
   1a49c:	0020      	movs	r0, r4
   1a49e:	0029      	movs	r1, r5
   1a4a0:	f003 fe38 	bl	1e114 <__aeabi_dmul>
   1a4a4:	0002      	movs	r2, r0
   1a4a6:	000b      	movs	r3, r1
   1a4a8:	485f      	ldr	r0, [pc, #380]	; (1a628 <__ieee754_pow+0xa3c>)
   1a4aa:	4960      	ldr	r1, [pc, #384]	; (1a62c <__ieee754_pow+0xa40>)
   1a4ac:	f004 f8b2 	bl	1e614 <__aeabi_dsub>
   1a4b0:	0022      	movs	r2, r4
   1a4b2:	002b      	movs	r3, r5
   1a4b4:	f003 fe2e 	bl	1e114 <__aeabi_dmul>
   1a4b8:	0002      	movs	r2, r0
   1a4ba:	000b      	movs	r3, r1
   1a4bc:	2000      	movs	r0, #0
   1a4be:	495c      	ldr	r1, [pc, #368]	; (1a630 <__ieee754_pow+0xa44>)
   1a4c0:	f004 f8a8 	bl	1e614 <__aeabi_dsub>
   1a4c4:	0022      	movs	r2, r4
   1a4c6:	9004      	str	r0, [sp, #16]
   1a4c8:	9105      	str	r1, [sp, #20]
   1a4ca:	002b      	movs	r3, r5
   1a4cc:	0020      	movs	r0, r4
   1a4ce:	0029      	movs	r1, r5
   1a4d0:	f003 fe20 	bl	1e114 <__aeabi_dmul>
   1a4d4:	0002      	movs	r2, r0
   1a4d6:	000b      	movs	r3, r1
   1a4d8:	9804      	ldr	r0, [sp, #16]
   1a4da:	9905      	ldr	r1, [sp, #20]
   1a4dc:	f003 fe1a 	bl	1e114 <__aeabi_dmul>
   1a4e0:	4a54      	ldr	r2, [pc, #336]	; (1a634 <__ieee754_pow+0xa48>)
   1a4e2:	4b4d      	ldr	r3, [pc, #308]	; (1a618 <__ieee754_pow+0xa2c>)
   1a4e4:	f003 fe16 	bl	1e114 <__aeabi_dmul>
   1a4e8:	0002      	movs	r2, r0
   1a4ea:	000b      	movs	r3, r1
   1a4ec:	9802      	ldr	r0, [sp, #8]
   1a4ee:	9903      	ldr	r1, [sp, #12]
   1a4f0:	f004 f890 	bl	1e614 <__aeabi_dsub>
   1a4f4:	0002      	movs	r2, r0
   1a4f6:	000b      	movs	r3, r1
   1a4f8:	0004      	movs	r4, r0
   1a4fa:	000d      	movs	r5, r1
   1a4fc:	0030      	movs	r0, r6
   1a4fe:	0039      	movs	r1, r7
   1a500:	f002 fec4 	bl	1d28c <__aeabi_dadd>
   1a504:	2000      	movs	r0, #0
   1a506:	0032      	movs	r2, r6
   1a508:	003b      	movs	r3, r7
   1a50a:	9002      	str	r0, [sp, #8]
   1a50c:	9103      	str	r1, [sp, #12]
   1a50e:	f004 f881 	bl	1e614 <__aeabi_dsub>
   1a512:	0002      	movs	r2, r0
   1a514:	000b      	movs	r3, r1
   1a516:	0020      	movs	r0, r4
   1a518:	0029      	movs	r1, r5
   1a51a:	f004 f87b 	bl	1e614 <__aeabi_dsub>
   1a51e:	9004      	str	r0, [sp, #16]
   1a520:	9105      	str	r1, [sp, #20]
   1a522:	e5d9      	b.n	1a0d8 <__ieee754_pow+0x4ec>
   1a524:	4a44      	ldr	r2, [pc, #272]	; (1a638 <__ieee754_pow+0xa4c>)
   1a526:	4b45      	ldr	r3, [pc, #276]	; (1a63c <__ieee754_pow+0xa50>)
   1a528:	9806      	ldr	r0, [sp, #24]
   1a52a:	9907      	ldr	r1, [sp, #28]
   1a52c:	f003 fdf2 	bl	1e114 <__aeabi_dmul>
   1a530:	4a41      	ldr	r2, [pc, #260]	; (1a638 <__ieee754_pow+0xa4c>)
   1a532:	4b42      	ldr	r3, [pc, #264]	; (1a63c <__ieee754_pow+0xa50>)
   1a534:	f003 fdee 	bl	1e114 <__aeabi_dmul>
   1a538:	f7ff fba0 	bl	19c7c <__ieee754_pow+0x90>
   1a53c:	2a00      	cmp	r2, #0
   1a53e:	d001      	beq.n	1a544 <__ieee754_pow+0x958>
   1a540:	f7ff fba9 	bl	19c96 <__ieee754_pow+0xaa>
   1a544:	3214      	adds	r2, #20
   1a546:	1ad3      	subs	r3, r2, r3
   1a548:	002a      	movs	r2, r5
   1a54a:	411a      	asrs	r2, r3
   1a54c:	0011      	movs	r1, r2
   1a54e:	4099      	lsls	r1, r3
   1a550:	428d      	cmp	r5, r1
   1a552:	d001      	beq.n	1a558 <__ieee754_pow+0x96c>
   1a554:	f7ff fb76 	bl	19c44 <__ieee754_pow+0x58>
   1a558:	2301      	movs	r3, #1
   1a55a:	401a      	ands	r2, r3
   1a55c:	18db      	adds	r3, r3, r3
   1a55e:	1a9b      	subs	r3, r3, r2
   1a560:	469b      	mov	fp, r3
   1a562:	f7ff fb6f 	bl	19c44 <__ieee754_pow+0x58>
   1a566:	2200      	movs	r2, #0
   1a568:	4b31      	ldr	r3, [pc, #196]	; (1a630 <__ieee754_pow+0xa44>)
   1a56a:	4690      	mov	r8, r2
   1a56c:	4691      	mov	r9, r2
   1a56e:	459a      	cmp	sl, r3
   1a570:	dc00      	bgt.n	1a574 <__ieee754_pow+0x988>
   1a572:	e67b      	b.n	1a26c <__ieee754_pow+0x680>
   1a574:	e645      	b.n	1a202 <__ieee754_pow+0x616>
   1a576:	0002      	movs	r2, r0
   1a578:	000b      	movs	r3, r1
   1a57a:	f004 f84b 	bl	1e614 <__aeabi_dsub>
   1a57e:	0002      	movs	r2, r0
   1a580:	000b      	movs	r3, r1
   1a582:	f003 f993 	bl	1d8ac <__aeabi_ddiv>
   1a586:	f7ff fb79 	bl	19c7c <__ieee754_pow+0x90>
   1a58a:	2380      	movs	r3, #128	; 0x80
   1a58c:	4c2c      	ldr	r4, [pc, #176]	; (1a640 <__ieee754_pow+0xa54>)
   1a58e:	05db      	lsls	r3, r3, #23
   1a590:	9308      	str	r3, [sp, #32]
   1a592:	9409      	str	r4, [sp, #36]	; 0x24
   1a594:	4b2b      	ldr	r3, [pc, #172]	; (1a644 <__ieee754_pow+0xa58>)
   1a596:	4c2c      	ldr	r4, [pc, #176]	; (1a648 <__ieee754_pow+0xa5c>)
   1a598:	2200      	movs	r2, #0
   1a59a:	930c      	str	r3, [sp, #48]	; 0x30
   1a59c:	940d      	str	r4, [sp, #52]	; 0x34
   1a59e:	2480      	movs	r4, #128	; 0x80
   1a5a0:	4b2a      	ldr	r3, [pc, #168]	; (1a64c <__ieee754_pow+0xa60>)
   1a5a2:	02e4      	lsls	r4, r4, #11
   1a5a4:	9206      	str	r2, [sp, #24]
   1a5a6:	9307      	str	r3, [sp, #28]
   1a5a8:	e449      	b.n	19e3e <__ieee754_pow+0x252>
   1a5aa:	464b      	mov	r3, r9
   1a5ac:	425b      	negs	r3, r3
   1a5ae:	4699      	mov	r9, r3
   1a5b0:	e64a      	b.n	1a248 <__ieee754_pow+0x65c>
   1a5b2:	46c0      	nop			; (mov r8, r8)
   1a5b4:	fffffc02 	.word	0xfffffc02
   1a5b8:	fffffc01 	.word	0xfffffc01
   1a5bc:	000fffff 	.word	0x000fffff
   1a5c0:	3fe62e43 	.word	0x3fe62e43
   1a5c4:	fefa39ef 	.word	0xfefa39ef
   1a5c8:	3fe62e42 	.word	0x3fe62e42
   1a5cc:	0ca86c39 	.word	0x0ca86c39
   1a5d0:	be205c61 	.word	0xbe205c61
   1a5d4:	72bea4d0 	.word	0x72bea4d0
   1a5d8:	3e663769 	.word	0x3e663769
   1a5dc:	c5d26bf1 	.word	0xc5d26bf1
   1a5e0:	3ebbbd41 	.word	0x3ebbbd41
   1a5e4:	af25de2c 	.word	0xaf25de2c
   1a5e8:	3f11566a 	.word	0x3f11566a
   1a5ec:	16bebd93 	.word	0x16bebd93
   1a5f0:	3f66c16c 	.word	0x3f66c16c
   1a5f4:	5555553e 	.word	0x5555553e
   1a5f8:	3fc55555 	.word	0x3fc55555
   1a5fc:	3ff00000 	.word	0x3ff00000
   1a600:	4090cbff 	.word	0x4090cbff
   1a604:	3f6f3400 	.word	0x3f6f3400
   1a608:	c2f8f359 	.word	0xc2f8f359
   1a60c:	01a56e1f 	.word	0x01a56e1f
   1a610:	bff00000 	.word	0xbff00000
   1a614:	3feffffe 	.word	0x3feffffe
   1a618:	3ff71547 	.word	0x3ff71547
   1a61c:	f85ddf44 	.word	0xf85ddf44
   1a620:	3e54ae0b 	.word	0x3e54ae0b
   1a624:	3fd00000 	.word	0x3fd00000
   1a628:	55555555 	.word	0x55555555
   1a62c:	3fd55555 	.word	0x3fd55555
   1a630:	3fe00000 	.word	0x3fe00000
   1a634:	652b82fe 	.word	0x652b82fe
   1a638:	8800759c 	.word	0x8800759c
   1a63c:	7e37e43c 	.word	0x7e37e43c
   1a640:	3fe2b803 	.word	0x3fe2b803
   1a644:	43cfd006 	.word	0x43cfd006
   1a648:	3e4cfdeb 	.word	0x3e4cfdeb
   1a64c:	3ff80000 	.word	0x3ff80000
   1a650:	464a      	mov	r2, r9
   1a652:	f001 fc2b 	bl	1beac <scalbn>
   1a656:	e6b2      	b.n	1a3be <__ieee754_pow+0x7d2>

0001a658 <__ieee754_rem_pio2>:
   1a658:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a65a:	464e      	mov	r6, r9
   1a65c:	4645      	mov	r5, r8
   1a65e:	46de      	mov	lr, fp
   1a660:	4657      	mov	r7, sl
   1a662:	b5e0      	push	{r5, r6, r7, lr}
   1a664:	4bd4      	ldr	r3, [pc, #848]	; (1a9b8 <__ieee754_rem_pio2+0x360>)
   1a666:	004c      	lsls	r4, r1, #1
   1a668:	b08f      	sub	sp, #60	; 0x3c
   1a66a:	4690      	mov	r8, r2
   1a66c:	4689      	mov	r9, r1
   1a66e:	0864      	lsrs	r4, r4, #1
   1a670:	429c      	cmp	r4, r3
   1a672:	dc00      	bgt.n	1a676 <__ieee754_rem_pio2+0x1e>
   1a674:	e087      	b.n	1a786 <__ieee754_rem_pio2+0x12e>
   1a676:	4bd1      	ldr	r3, [pc, #836]	; (1a9bc <__ieee754_rem_pio2+0x364>)
   1a678:	429c      	cmp	r4, r3
   1a67a:	dc22      	bgt.n	1a6c2 <__ieee754_rem_pio2+0x6a>
   1a67c:	4ad0      	ldr	r2, [pc, #832]	; (1a9c0 <__ieee754_rem_pio2+0x368>)
   1a67e:	2900      	cmp	r1, #0
   1a680:	dc00      	bgt.n	1a684 <__ieee754_rem_pio2+0x2c>
   1a682:	e1bf      	b.n	1aa04 <__ieee754_rem_pio2+0x3ac>
   1a684:	4bcf      	ldr	r3, [pc, #828]	; (1a9c4 <__ieee754_rem_pio2+0x36c>)
   1a686:	f003 ffc5 	bl	1e614 <__aeabi_dsub>
   1a68a:	4bce      	ldr	r3, [pc, #824]	; (1a9c4 <__ieee754_rem_pio2+0x36c>)
   1a68c:	0006      	movs	r6, r0
   1a68e:	000f      	movs	r7, r1
   1a690:	429c      	cmp	r4, r3
   1a692:	d100      	bne.n	1a696 <__ieee754_rem_pio2+0x3e>
   1a694:	e094      	b.n	1a7c0 <__ieee754_rem_pio2+0x168>
   1a696:	4acc      	ldr	r2, [pc, #816]	; (1a9c8 <__ieee754_rem_pio2+0x370>)
   1a698:	4bcc      	ldr	r3, [pc, #816]	; (1a9cc <__ieee754_rem_pio2+0x374>)
   1a69a:	f003 ffbb 	bl	1e614 <__aeabi_dsub>
   1a69e:	0002      	movs	r2, r0
   1a6a0:	000b      	movs	r3, r1
   1a6a2:	4641      	mov	r1, r8
   1a6a4:	0030      	movs	r0, r6
   1a6a6:	600a      	str	r2, [r1, #0]
   1a6a8:	604b      	str	r3, [r1, #4]
   1a6aa:	0039      	movs	r1, r7
   1a6ac:	f003 ffb2 	bl	1e614 <__aeabi_dsub>
   1a6b0:	4bc6      	ldr	r3, [pc, #792]	; (1a9cc <__ieee754_rem_pio2+0x374>)
   1a6b2:	4ac5      	ldr	r2, [pc, #788]	; (1a9c8 <__ieee754_rem_pio2+0x370>)
   1a6b4:	f003 ffae 	bl	1e614 <__aeabi_dsub>
   1a6b8:	4643      	mov	r3, r8
   1a6ba:	2501      	movs	r5, #1
   1a6bc:	6098      	str	r0, [r3, #8]
   1a6be:	60d9      	str	r1, [r3, #12]
   1a6c0:	e06b      	b.n	1a79a <__ieee754_rem_pio2+0x142>
   1a6c2:	4bc3      	ldr	r3, [pc, #780]	; (1a9d0 <__ieee754_rem_pio2+0x378>)
   1a6c4:	429c      	cmp	r4, r3
   1a6c6:	dc00      	bgt.n	1a6ca <__ieee754_rem_pio2+0x72>
   1a6c8:	e097      	b.n	1a7fa <__ieee754_rem_pio2+0x1a2>
   1a6ca:	4bc2      	ldr	r3, [pc, #776]	; (1a9d4 <__ieee754_rem_pio2+0x37c>)
   1a6cc:	429c      	cmp	r4, r3
   1a6ce:	dc6c      	bgt.n	1a7aa <__ieee754_rem_pio2+0x152>
   1a6d0:	4ac1      	ldr	r2, [pc, #772]	; (1a9d8 <__ieee754_rem_pio2+0x380>)
   1a6d2:	1523      	asrs	r3, r4, #20
   1a6d4:	4692      	mov	sl, r2
   1a6d6:	449a      	add	sl, r3
   1a6d8:	4651      	mov	r1, sl
   1a6da:	0509      	lsls	r1, r1, #20
   1a6dc:	1a63      	subs	r3, r4, r1
   1a6de:	0019      	movs	r1, r3
   1a6e0:	001d      	movs	r5, r3
   1a6e2:	0004      	movs	r4, r0
   1a6e4:	f004 facc 	bl	1ec80 <__aeabi_d2iz>
   1a6e8:	f004 fafe 	bl	1ece8 <__aeabi_i2d>
   1a6ec:	0002      	movs	r2, r0
   1a6ee:	000b      	movs	r3, r1
   1a6f0:	0020      	movs	r0, r4
   1a6f2:	0029      	movs	r1, r5
   1a6f4:	9208      	str	r2, [sp, #32]
   1a6f6:	9309      	str	r3, [sp, #36]	; 0x24
   1a6f8:	f003 ff8c 	bl	1e614 <__aeabi_dsub>
   1a6fc:	2200      	movs	r2, #0
   1a6fe:	4bb7      	ldr	r3, [pc, #732]	; (1a9dc <__ieee754_rem_pio2+0x384>)
   1a700:	f003 fd08 	bl	1e114 <__aeabi_dmul>
   1a704:	000f      	movs	r7, r1
   1a706:	0006      	movs	r6, r0
   1a708:	f004 faba 	bl	1ec80 <__aeabi_d2iz>
   1a70c:	f004 faec 	bl	1ece8 <__aeabi_i2d>
   1a710:	0004      	movs	r4, r0
   1a712:	000d      	movs	r5, r1
   1a714:	0002      	movs	r2, r0
   1a716:	000b      	movs	r3, r1
   1a718:	0030      	movs	r0, r6
   1a71a:	0039      	movs	r1, r7
   1a71c:	940a      	str	r4, [sp, #40]	; 0x28
   1a71e:	950b      	str	r5, [sp, #44]	; 0x2c
   1a720:	f003 ff78 	bl	1e614 <__aeabi_dsub>
   1a724:	2200      	movs	r2, #0
   1a726:	4bad      	ldr	r3, [pc, #692]	; (1a9dc <__ieee754_rem_pio2+0x384>)
   1a728:	f003 fcf4 	bl	1e114 <__aeabi_dmul>
   1a72c:	2200      	movs	r2, #0
   1a72e:	2300      	movs	r3, #0
   1a730:	900c      	str	r0, [sp, #48]	; 0x30
   1a732:	910d      	str	r1, [sp, #52]	; 0x34
   1a734:	f001 fdb0 	bl	1c298 <__aeabi_dcmpeq>
   1a738:	2800      	cmp	r0, #0
   1a73a:	d100      	bne.n	1a73e <__ieee754_rem_pio2+0xe6>
   1a73c:	e181      	b.n	1aa42 <__ieee754_rem_pio2+0x3ea>
   1a73e:	2300      	movs	r3, #0
   1a740:	2200      	movs	r2, #0
   1a742:	0020      	movs	r0, r4
   1a744:	0029      	movs	r1, r5
   1a746:	f001 fda7 	bl	1c298 <__aeabi_dcmpeq>
   1a74a:	4243      	negs	r3, r0
   1a74c:	4143      	adcs	r3, r0
   1a74e:	3301      	adds	r3, #1
   1a750:	4aa3      	ldr	r2, [pc, #652]	; (1a9e0 <__ieee754_rem_pio2+0x388>)
   1a752:	4641      	mov	r1, r8
   1a754:	9201      	str	r2, [sp, #4]
   1a756:	2202      	movs	r2, #2
   1a758:	a808      	add	r0, sp, #32
   1a75a:	9200      	str	r2, [sp, #0]
   1a75c:	4652      	mov	r2, sl
   1a75e:	f000 fb8d 	bl	1ae7c <__kernel_rem_pio2>
   1a762:	464b      	mov	r3, r9
   1a764:	0005      	movs	r5, r0
   1a766:	2b00      	cmp	r3, #0
   1a768:	da17      	bge.n	1a79a <__ieee754_rem_pio2+0x142>
   1a76a:	2280      	movs	r2, #128	; 0x80
   1a76c:	4643      	mov	r3, r8
   1a76e:	0612      	lsls	r2, r2, #24
   1a770:	4694      	mov	ip, r2
   1a772:	4642      	mov	r2, r8
   1a774:	685b      	ldr	r3, [r3, #4]
   1a776:	4245      	negs	r5, r0
   1a778:	4463      	add	r3, ip
   1a77a:	6053      	str	r3, [r2, #4]
   1a77c:	68d3      	ldr	r3, [r2, #12]
   1a77e:	4642      	mov	r2, r8
   1a780:	4463      	add	r3, ip
   1a782:	60d3      	str	r3, [r2, #12]
   1a784:	e009      	b.n	1a79a <__ieee754_rem_pio2+0x142>
   1a786:	000b      	movs	r3, r1
   1a788:	0002      	movs	r2, r0
   1a78a:	4641      	mov	r1, r8
   1a78c:	600a      	str	r2, [r1, #0]
   1a78e:	604b      	str	r3, [r1, #4]
   1a790:	2200      	movs	r2, #0
   1a792:	2300      	movs	r3, #0
   1a794:	2500      	movs	r5, #0
   1a796:	608a      	str	r2, [r1, #8]
   1a798:	60cb      	str	r3, [r1, #12]
   1a79a:	0028      	movs	r0, r5
   1a79c:	b00f      	add	sp, #60	; 0x3c
   1a79e:	bc3c      	pop	{r2, r3, r4, r5}
   1a7a0:	4690      	mov	r8, r2
   1a7a2:	4699      	mov	r9, r3
   1a7a4:	46a2      	mov	sl, r4
   1a7a6:	46ab      	mov	fp, r5
   1a7a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a7aa:	000b      	movs	r3, r1
   1a7ac:	0002      	movs	r2, r0
   1a7ae:	f003 ff31 	bl	1e614 <__aeabi_dsub>
   1a7b2:	4643      	mov	r3, r8
   1a7b4:	2500      	movs	r5, #0
   1a7b6:	6098      	str	r0, [r3, #8]
   1a7b8:	60d9      	str	r1, [r3, #12]
   1a7ba:	6018      	str	r0, [r3, #0]
   1a7bc:	6059      	str	r1, [r3, #4]
   1a7be:	e7ec      	b.n	1a79a <__ieee754_rem_pio2+0x142>
   1a7c0:	22d3      	movs	r2, #211	; 0xd3
   1a7c2:	4b82      	ldr	r3, [pc, #520]	; (1a9cc <__ieee754_rem_pio2+0x374>)
   1a7c4:	0552      	lsls	r2, r2, #21
   1a7c6:	f003 ff25 	bl	1e614 <__aeabi_dsub>
   1a7ca:	4a86      	ldr	r2, [pc, #536]	; (1a9e4 <__ieee754_rem_pio2+0x38c>)
   1a7cc:	4b86      	ldr	r3, [pc, #536]	; (1a9e8 <__ieee754_rem_pio2+0x390>)
   1a7ce:	000d      	movs	r5, r1
   1a7d0:	0004      	movs	r4, r0
   1a7d2:	f003 ff1f 	bl	1e614 <__aeabi_dsub>
   1a7d6:	0002      	movs	r2, r0
   1a7d8:	000b      	movs	r3, r1
   1a7da:	4641      	mov	r1, r8
   1a7dc:	0020      	movs	r0, r4
   1a7de:	600a      	str	r2, [r1, #0]
   1a7e0:	604b      	str	r3, [r1, #4]
   1a7e2:	0029      	movs	r1, r5
   1a7e4:	f003 ff16 	bl	1e614 <__aeabi_dsub>
   1a7e8:	4b7f      	ldr	r3, [pc, #508]	; (1a9e8 <__ieee754_rem_pio2+0x390>)
   1a7ea:	4a7e      	ldr	r2, [pc, #504]	; (1a9e4 <__ieee754_rem_pio2+0x38c>)
   1a7ec:	f003 ff12 	bl	1e614 <__aeabi_dsub>
   1a7f0:	4643      	mov	r3, r8
   1a7f2:	2501      	movs	r5, #1
   1a7f4:	6098      	str	r0, [r3, #8]
   1a7f6:	60d9      	str	r1, [r3, #12]
   1a7f8:	e7cf      	b.n	1a79a <__ieee754_rem_pio2+0x142>
   1a7fa:	f001 fa07 	bl	1bc0c <fabs>
   1a7fe:	4a7b      	ldr	r2, [pc, #492]	; (1a9ec <__ieee754_rem_pio2+0x394>)
   1a800:	4b7b      	ldr	r3, [pc, #492]	; (1a9f0 <__ieee754_rem_pio2+0x398>)
   1a802:	0006      	movs	r6, r0
   1a804:	000f      	movs	r7, r1
   1a806:	f003 fc85 	bl	1e114 <__aeabi_dmul>
   1a80a:	2200      	movs	r2, #0
   1a80c:	4b79      	ldr	r3, [pc, #484]	; (1a9f4 <__ieee754_rem_pio2+0x39c>)
   1a80e:	f002 fd3d 	bl	1d28c <__aeabi_dadd>
   1a812:	f004 fa35 	bl	1ec80 <__aeabi_d2iz>
   1a816:	0005      	movs	r5, r0
   1a818:	f004 fa66 	bl	1ece8 <__aeabi_i2d>
   1a81c:	4a68      	ldr	r2, [pc, #416]	; (1a9c0 <__ieee754_rem_pio2+0x368>)
   1a81e:	4b69      	ldr	r3, [pc, #420]	; (1a9c4 <__ieee754_rem_pio2+0x36c>)
   1a820:	9004      	str	r0, [sp, #16]
   1a822:	9105      	str	r1, [sp, #20]
   1a824:	f003 fc76 	bl	1e114 <__aeabi_dmul>
   1a828:	0002      	movs	r2, r0
   1a82a:	000b      	movs	r3, r1
   1a82c:	0030      	movs	r0, r6
   1a82e:	0039      	movs	r1, r7
   1a830:	f003 fef0 	bl	1e614 <__aeabi_dsub>
   1a834:	4a64      	ldr	r2, [pc, #400]	; (1a9c8 <__ieee754_rem_pio2+0x370>)
   1a836:	0006      	movs	r6, r0
   1a838:	000f      	movs	r7, r1
   1a83a:	9804      	ldr	r0, [sp, #16]
   1a83c:	9905      	ldr	r1, [sp, #20]
   1a83e:	4b63      	ldr	r3, [pc, #396]	; (1a9cc <__ieee754_rem_pio2+0x374>)
   1a840:	f003 fc68 	bl	1e114 <__aeabi_dmul>
   1a844:	9002      	str	r0, [sp, #8]
   1a846:	9103      	str	r1, [sp, #12]
   1a848:	2d1f      	cmp	r5, #31
   1a84a:	dc33      	bgt.n	1a8b4 <__ieee754_rem_pio2+0x25c>
   1a84c:	1e6b      	subs	r3, r5, #1
   1a84e:	4a6a      	ldr	r2, [pc, #424]	; (1a9f8 <__ieee754_rem_pio2+0x3a0>)
   1a850:	009b      	lsls	r3, r3, #2
   1a852:	589b      	ldr	r3, [r3, r2]
   1a854:	429c      	cmp	r4, r3
   1a856:	d02d      	beq.n	1a8b4 <__ieee754_rem_pio2+0x25c>
   1a858:	0002      	movs	r2, r0
   1a85a:	000b      	movs	r3, r1
   1a85c:	0030      	movs	r0, r6
   1a85e:	0039      	movs	r1, r7
   1a860:	f003 fed8 	bl	1e614 <__aeabi_dsub>
   1a864:	000b      	movs	r3, r1
   1a866:	468a      	mov	sl, r1
   1a868:	0002      	movs	r2, r0
   1a86a:	4641      	mov	r1, r8
   1a86c:	4683      	mov	fp, r0
   1a86e:	600a      	str	r2, [r1, #0]
   1a870:	604b      	str	r3, [r1, #4]
   1a872:	465a      	mov	r2, fp
   1a874:	4653      	mov	r3, sl
   1a876:	0030      	movs	r0, r6
   1a878:	0039      	movs	r1, r7
   1a87a:	f003 fecb 	bl	1e614 <__aeabi_dsub>
   1a87e:	9a02      	ldr	r2, [sp, #8]
   1a880:	9b03      	ldr	r3, [sp, #12]
   1a882:	f003 fec7 	bl	1e614 <__aeabi_dsub>
   1a886:	4644      	mov	r4, r8
   1a888:	000b      	movs	r3, r1
   1a88a:	0002      	movs	r2, r0
   1a88c:	60a2      	str	r2, [r4, #8]
   1a88e:	60e3      	str	r3, [r4, #12]
   1a890:	464b      	mov	r3, r9
   1a892:	2b00      	cmp	r3, #0
   1a894:	db00      	blt.n	1a898 <__ieee754_rem_pio2+0x240>
   1a896:	e780      	b.n	1a79a <__ieee754_rem_pio2+0x142>
   1a898:	465b      	mov	r3, fp
   1a89a:	6023      	str	r3, [r4, #0]
   1a89c:	2380      	movs	r3, #128	; 0x80
   1a89e:	061b      	lsls	r3, r3, #24
   1a8a0:	4453      	add	r3, sl
   1a8a2:	6063      	str	r3, [r4, #4]
   1a8a4:	2380      	movs	r3, #128	; 0x80
   1a8a6:	061b      	lsls	r3, r3, #24
   1a8a8:	469c      	mov	ip, r3
   1a8aa:	4461      	add	r1, ip
   1a8ac:	60a0      	str	r0, [r4, #8]
   1a8ae:	60e1      	str	r1, [r4, #12]
   1a8b0:	426d      	negs	r5, r5
   1a8b2:	e772      	b.n	1a79a <__ieee754_rem_pio2+0x142>
   1a8b4:	9a02      	ldr	r2, [sp, #8]
   1a8b6:	9b03      	ldr	r3, [sp, #12]
   1a8b8:	0030      	movs	r0, r6
   1a8ba:	0039      	movs	r1, r7
   1a8bc:	f003 feaa 	bl	1e614 <__aeabi_dsub>
   1a8c0:	000b      	movs	r3, r1
   1a8c2:	468a      	mov	sl, r1
   1a8c4:	0002      	movs	r2, r0
   1a8c6:	4641      	mov	r1, r8
   1a8c8:	600a      	str	r2, [r1, #0]
   1a8ca:	604b      	str	r3, [r1, #4]
   1a8cc:	4653      	mov	r3, sl
   1a8ce:	005b      	lsls	r3, r3, #1
   1a8d0:	1524      	asrs	r4, r4, #20
   1a8d2:	0d5b      	lsrs	r3, r3, #21
   1a8d4:	4683      	mov	fp, r0
   1a8d6:	1ae3      	subs	r3, r4, r3
   1a8d8:	2b10      	cmp	r3, #16
   1a8da:	ddca      	ble.n	1a872 <__ieee754_rem_pio2+0x21a>
   1a8dc:	9804      	ldr	r0, [sp, #16]
   1a8de:	9905      	ldr	r1, [sp, #20]
   1a8e0:	22d3      	movs	r2, #211	; 0xd3
   1a8e2:	4b3a      	ldr	r3, [pc, #232]	; (1a9cc <__ieee754_rem_pio2+0x374>)
   1a8e4:	0552      	lsls	r2, r2, #21
   1a8e6:	f003 fc15 	bl	1e114 <__aeabi_dmul>
   1a8ea:	9002      	str	r0, [sp, #8]
   1a8ec:	9103      	str	r1, [sp, #12]
   1a8ee:	0002      	movs	r2, r0
   1a8f0:	000b      	movs	r3, r1
   1a8f2:	0030      	movs	r0, r6
   1a8f4:	0039      	movs	r1, r7
   1a8f6:	f003 fe8d 	bl	1e614 <__aeabi_dsub>
   1a8fa:	9006      	str	r0, [sp, #24]
   1a8fc:	9107      	str	r1, [sp, #28]
   1a8fe:	0002      	movs	r2, r0
   1a900:	000b      	movs	r3, r1
   1a902:	0030      	movs	r0, r6
   1a904:	0039      	movs	r1, r7
   1a906:	f003 fe85 	bl	1e614 <__aeabi_dsub>
   1a90a:	9a02      	ldr	r2, [sp, #8]
   1a90c:	9b03      	ldr	r3, [sp, #12]
   1a90e:	f003 fe81 	bl	1e614 <__aeabi_dsub>
   1a912:	0006      	movs	r6, r0
   1a914:	000f      	movs	r7, r1
   1a916:	9804      	ldr	r0, [sp, #16]
   1a918:	9905      	ldr	r1, [sp, #20]
   1a91a:	4a32      	ldr	r2, [pc, #200]	; (1a9e4 <__ieee754_rem_pio2+0x38c>)
   1a91c:	4b32      	ldr	r3, [pc, #200]	; (1a9e8 <__ieee754_rem_pio2+0x390>)
   1a91e:	f003 fbf9 	bl	1e114 <__aeabi_dmul>
   1a922:	0032      	movs	r2, r6
   1a924:	003b      	movs	r3, r7
   1a926:	f003 fe75 	bl	1e614 <__aeabi_dsub>
   1a92a:	9e06      	ldr	r6, [sp, #24]
   1a92c:	9f07      	ldr	r7, [sp, #28]
   1a92e:	0002      	movs	r2, r0
   1a930:	000b      	movs	r3, r1
   1a932:	0030      	movs	r0, r6
   1a934:	0039      	movs	r1, r7
   1a936:	9202      	str	r2, [sp, #8]
   1a938:	9303      	str	r3, [sp, #12]
   1a93a:	f003 fe6b 	bl	1e614 <__aeabi_dsub>
   1a93e:	000b      	movs	r3, r1
   1a940:	468a      	mov	sl, r1
   1a942:	0002      	movs	r2, r0
   1a944:	4641      	mov	r1, r8
   1a946:	600a      	str	r2, [r1, #0]
   1a948:	604b      	str	r3, [r1, #4]
   1a94a:	4653      	mov	r3, sl
   1a94c:	005b      	lsls	r3, r3, #1
   1a94e:	0d5b      	lsrs	r3, r3, #21
   1a950:	4683      	mov	fp, r0
   1a952:	1ae4      	subs	r4, r4, r3
   1a954:	9606      	str	r6, [sp, #24]
   1a956:	9707      	str	r7, [sp, #28]
   1a958:	2c31      	cmp	r4, #49	; 0x31
   1a95a:	dd8a      	ble.n	1a872 <__ieee754_rem_pio2+0x21a>
   1a95c:	9804      	ldr	r0, [sp, #16]
   1a95e:	9905      	ldr	r1, [sp, #20]
   1a960:	22b8      	movs	r2, #184	; 0xb8
   1a962:	4b21      	ldr	r3, [pc, #132]	; (1a9e8 <__ieee754_rem_pio2+0x390>)
   1a964:	0592      	lsls	r2, r2, #22
   1a966:	f003 fbd5 	bl	1e114 <__aeabi_dmul>
   1a96a:	0003      	movs	r3, r0
   1a96c:	000c      	movs	r4, r1
   1a96e:	0002      	movs	r2, r0
   1a970:	9302      	str	r3, [sp, #8]
   1a972:	9403      	str	r4, [sp, #12]
   1a974:	0030      	movs	r0, r6
   1a976:	000b      	movs	r3, r1
   1a978:	0039      	movs	r1, r7
   1a97a:	f003 fe4b 	bl	1e614 <__aeabi_dsub>
   1a97e:	0002      	movs	r2, r0
   1a980:	000b      	movs	r3, r1
   1a982:	0006      	movs	r6, r0
   1a984:	000f      	movs	r7, r1
   1a986:	9806      	ldr	r0, [sp, #24]
   1a988:	9907      	ldr	r1, [sp, #28]
   1a98a:	f003 fe43 	bl	1e614 <__aeabi_dsub>
   1a98e:	9a02      	ldr	r2, [sp, #8]
   1a990:	9b03      	ldr	r3, [sp, #12]
   1a992:	f003 fe3f 	bl	1e614 <__aeabi_dsub>
   1a996:	4a19      	ldr	r2, [pc, #100]	; (1a9fc <__ieee754_rem_pio2+0x3a4>)
   1a998:	9002      	str	r0, [sp, #8]
   1a99a:	9103      	str	r1, [sp, #12]
   1a99c:	9804      	ldr	r0, [sp, #16]
   1a99e:	9905      	ldr	r1, [sp, #20]
   1a9a0:	4b17      	ldr	r3, [pc, #92]	; (1aa00 <__ieee754_rem_pio2+0x3a8>)
   1a9a2:	f003 fbb7 	bl	1e114 <__aeabi_dmul>
   1a9a6:	9a02      	ldr	r2, [sp, #8]
   1a9a8:	9b03      	ldr	r3, [sp, #12]
   1a9aa:	f003 fe33 	bl	1e614 <__aeabi_dsub>
   1a9ae:	0002      	movs	r2, r0
   1a9b0:	000b      	movs	r3, r1
   1a9b2:	9202      	str	r2, [sp, #8]
   1a9b4:	9303      	str	r3, [sp, #12]
   1a9b6:	e751      	b.n	1a85c <__ieee754_rem_pio2+0x204>
   1a9b8:	3fe921fb 	.word	0x3fe921fb
   1a9bc:	4002d97b 	.word	0x4002d97b
   1a9c0:	54400000 	.word	0x54400000
   1a9c4:	3ff921fb 	.word	0x3ff921fb
   1a9c8:	1a626331 	.word	0x1a626331
   1a9cc:	3dd0b461 	.word	0x3dd0b461
   1a9d0:	413921fb 	.word	0x413921fb
   1a9d4:	7fefffff 	.word	0x7fefffff
   1a9d8:	fffffbea 	.word	0xfffffbea
   1a9dc:	41700000 	.word	0x41700000
   1a9e0:	00024ee8 	.word	0x00024ee8
   1a9e4:	2e037073 	.word	0x2e037073
   1a9e8:	3ba3198a 	.word	0x3ba3198a
   1a9ec:	6dc9c883 	.word	0x6dc9c883
   1a9f0:	3fe45f30 	.word	0x3fe45f30
   1a9f4:	3fe00000 	.word	0x3fe00000
   1a9f8:	00024e68 	.word	0x00024e68
   1a9fc:	252049c1 	.word	0x252049c1
   1aa00:	397b839a 	.word	0x397b839a
   1aa04:	4b1b      	ldr	r3, [pc, #108]	; (1aa74 <__ieee754_rem_pio2+0x41c>)
   1aa06:	f002 fc41 	bl	1d28c <__aeabi_dadd>
   1aa0a:	4b1a      	ldr	r3, [pc, #104]	; (1aa74 <__ieee754_rem_pio2+0x41c>)
   1aa0c:	0006      	movs	r6, r0
   1aa0e:	000f      	movs	r7, r1
   1aa10:	429c      	cmp	r4, r3
   1aa12:	d018      	beq.n	1aa46 <__ieee754_rem_pio2+0x3ee>
   1aa14:	4a18      	ldr	r2, [pc, #96]	; (1aa78 <__ieee754_rem_pio2+0x420>)
   1aa16:	4b19      	ldr	r3, [pc, #100]	; (1aa7c <__ieee754_rem_pio2+0x424>)
   1aa18:	f002 fc38 	bl	1d28c <__aeabi_dadd>
   1aa1c:	0002      	movs	r2, r0
   1aa1e:	000b      	movs	r3, r1
   1aa20:	4641      	mov	r1, r8
   1aa22:	0030      	movs	r0, r6
   1aa24:	600a      	str	r2, [r1, #0]
   1aa26:	604b      	str	r3, [r1, #4]
   1aa28:	0039      	movs	r1, r7
   1aa2a:	f003 fdf3 	bl	1e614 <__aeabi_dsub>
   1aa2e:	4a12      	ldr	r2, [pc, #72]	; (1aa78 <__ieee754_rem_pio2+0x420>)
   1aa30:	4b12      	ldr	r3, [pc, #72]	; (1aa7c <__ieee754_rem_pio2+0x424>)
   1aa32:	f002 fc2b 	bl	1d28c <__aeabi_dadd>
   1aa36:	2501      	movs	r5, #1
   1aa38:	4643      	mov	r3, r8
   1aa3a:	426d      	negs	r5, r5
   1aa3c:	6098      	str	r0, [r3, #8]
   1aa3e:	60d9      	str	r1, [r3, #12]
   1aa40:	e6ab      	b.n	1a79a <__ieee754_rem_pio2+0x142>
   1aa42:	2303      	movs	r3, #3
   1aa44:	e684      	b.n	1a750 <__ieee754_rem_pio2+0xf8>
   1aa46:	22d3      	movs	r2, #211	; 0xd3
   1aa48:	4b0c      	ldr	r3, [pc, #48]	; (1aa7c <__ieee754_rem_pio2+0x424>)
   1aa4a:	0552      	lsls	r2, r2, #21
   1aa4c:	f002 fc1e 	bl	1d28c <__aeabi_dadd>
   1aa50:	4a0b      	ldr	r2, [pc, #44]	; (1aa80 <__ieee754_rem_pio2+0x428>)
   1aa52:	4b0c      	ldr	r3, [pc, #48]	; (1aa84 <__ieee754_rem_pio2+0x42c>)
   1aa54:	0004      	movs	r4, r0
   1aa56:	000d      	movs	r5, r1
   1aa58:	f002 fc18 	bl	1d28c <__aeabi_dadd>
   1aa5c:	0002      	movs	r2, r0
   1aa5e:	000b      	movs	r3, r1
   1aa60:	4641      	mov	r1, r8
   1aa62:	0020      	movs	r0, r4
   1aa64:	600a      	str	r2, [r1, #0]
   1aa66:	604b      	str	r3, [r1, #4]
   1aa68:	0029      	movs	r1, r5
   1aa6a:	f003 fdd3 	bl	1e614 <__aeabi_dsub>
   1aa6e:	4a04      	ldr	r2, [pc, #16]	; (1aa80 <__ieee754_rem_pio2+0x428>)
   1aa70:	4b04      	ldr	r3, [pc, #16]	; (1aa84 <__ieee754_rem_pio2+0x42c>)
   1aa72:	e7de      	b.n	1aa32 <__ieee754_rem_pio2+0x3da>
   1aa74:	3ff921fb 	.word	0x3ff921fb
   1aa78:	1a626331 	.word	0x1a626331
   1aa7c:	3dd0b461 	.word	0x3dd0b461
   1aa80:	2e037073 	.word	0x2e037073
   1aa84:	3ba3198a 	.word	0x3ba3198a

0001aa88 <__ieee754_sqrt>:
   1aa88:	4b6c      	ldr	r3, [pc, #432]	; (1ac3c <__ieee754_sqrt+0x1b4>)
   1aa8a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aa8c:	000a      	movs	r2, r1
   1aa8e:	4646      	mov	r6, r8
   1aa90:	000d      	movs	r5, r1
   1aa92:	46d6      	mov	lr, sl
   1aa94:	464f      	mov	r7, r9
   1aa96:	0019      	movs	r1, r3
   1aa98:	b5c0      	push	{r6, r7, lr}
   1aa9a:	0004      	movs	r4, r0
   1aa9c:	0006      	movs	r6, r0
   1aa9e:	4029      	ands	r1, r5
   1aaa0:	4299      	cmp	r1, r3
   1aaa2:	d100      	bne.n	1aaa6 <__ieee754_sqrt+0x1e>
   1aaa4:	e0a7      	b.n	1abf6 <__ieee754_sqrt+0x16e>
   1aaa6:	2d00      	cmp	r5, #0
   1aaa8:	dc00      	bgt.n	1aaac <__ieee754_sqrt+0x24>
   1aaaa:	e081      	b.n	1abb0 <__ieee754_sqrt+0x128>
   1aaac:	152f      	asrs	r7, r5, #20
   1aaae:	d100      	bne.n	1aab2 <__ieee754_sqrt+0x2a>
   1aab0:	e08e      	b.n	1abd0 <__ieee754_sqrt+0x148>
   1aab2:	4b63      	ldr	r3, [pc, #396]	; (1ac40 <__ieee754_sqrt+0x1b8>)
   1aab4:	0312      	lsls	r2, r2, #12
   1aab6:	469c      	mov	ip, r3
   1aab8:	2380      	movs	r3, #128	; 0x80
   1aaba:	0b12      	lsrs	r2, r2, #12
   1aabc:	035b      	lsls	r3, r3, #13
   1aabe:	4467      	add	r7, ip
   1aac0:	431a      	orrs	r2, r3
   1aac2:	07fb      	lsls	r3, r7, #31
   1aac4:	d468      	bmi.n	1ab98 <__ieee754_sqrt+0x110>
   1aac6:	107b      	asrs	r3, r7, #1
   1aac8:	469c      	mov	ip, r3
   1aaca:	0fe3      	lsrs	r3, r4, #31
   1aacc:	189b      	adds	r3, r3, r2
   1aace:	189b      	adds	r3, r3, r2
   1aad0:	2280      	movs	r2, #128	; 0x80
   1aad2:	2116      	movs	r1, #22
   1aad4:	2600      	movs	r6, #0
   1aad6:	2500      	movs	r5, #0
   1aad8:	0064      	lsls	r4, r4, #1
   1aada:	0392      	lsls	r2, r2, #14
   1aadc:	18a8      	adds	r0, r5, r2
   1aade:	4298      	cmp	r0, r3
   1aae0:	dc02      	bgt.n	1aae8 <__ieee754_sqrt+0x60>
   1aae2:	1885      	adds	r5, r0, r2
   1aae4:	1a1b      	subs	r3, r3, r0
   1aae6:	18b6      	adds	r6, r6, r2
   1aae8:	0fe0      	lsrs	r0, r4, #31
   1aaea:	005b      	lsls	r3, r3, #1
   1aaec:	3901      	subs	r1, #1
   1aaee:	181b      	adds	r3, r3, r0
   1aaf0:	0064      	lsls	r4, r4, #1
   1aaf2:	0852      	lsrs	r2, r2, #1
   1aaf4:	2900      	cmp	r1, #0
   1aaf6:	d1f1      	bne.n	1aadc <__ieee754_sqrt+0x54>
   1aaf8:	2200      	movs	r2, #0
   1aafa:	4692      	mov	sl, r2
   1aafc:	4690      	mov	r8, r2
   1aafe:	2280      	movs	r2, #128	; 0x80
   1ab00:	2020      	movs	r0, #32
   1ab02:	0612      	lsls	r2, r2, #24
   1ab04:	e009      	b.n	1ab1a <__ieee754_sqrt+0x92>
   1ab06:	42ab      	cmp	r3, r5
   1ab08:	d038      	beq.n	1ab7c <__ieee754_sqrt+0xf4>
   1ab0a:	0fe1      	lsrs	r1, r4, #31
   1ab0c:	18c9      	adds	r1, r1, r3
   1ab0e:	3801      	subs	r0, #1
   1ab10:	18cb      	adds	r3, r1, r3
   1ab12:	0064      	lsls	r4, r4, #1
   1ab14:	0852      	lsrs	r2, r2, #1
   1ab16:	2800      	cmp	r0, #0
   1ab18:	d018      	beq.n	1ab4c <__ieee754_sqrt+0xc4>
   1ab1a:	4641      	mov	r1, r8
   1ab1c:	1851      	adds	r1, r2, r1
   1ab1e:	42ab      	cmp	r3, r5
   1ab20:	ddf1      	ble.n	1ab06 <__ieee754_sqrt+0x7e>
   1ab22:	188f      	adds	r7, r1, r2
   1ab24:	46b8      	mov	r8, r7
   1ab26:	46a9      	mov	r9, r5
   1ab28:	2900      	cmp	r1, #0
   1ab2a:	db30      	blt.n	1ab8e <__ieee754_sqrt+0x106>
   1ab2c:	1b5b      	subs	r3, r3, r5
   1ab2e:	428c      	cmp	r4, r1
   1ab30:	41ad      	sbcs	r5, r5
   1ab32:	426d      	negs	r5, r5
   1ab34:	1b5b      	subs	r3, r3, r5
   1ab36:	1a64      	subs	r4, r4, r1
   1ab38:	0fe1      	lsrs	r1, r4, #31
   1ab3a:	18c9      	adds	r1, r1, r3
   1ab3c:	3801      	subs	r0, #1
   1ab3e:	4492      	add	sl, r2
   1ab40:	464d      	mov	r5, r9
   1ab42:	18cb      	adds	r3, r1, r3
   1ab44:	0064      	lsls	r4, r4, #1
   1ab46:	0852      	lsrs	r2, r2, #1
   1ab48:	2800      	cmp	r0, #0
   1ab4a:	d1e6      	bne.n	1ab1a <__ieee754_sqrt+0x92>
   1ab4c:	4323      	orrs	r3, r4
   1ab4e:	d128      	bne.n	1aba2 <__ieee754_sqrt+0x11a>
   1ab50:	4653      	mov	r3, sl
   1ab52:	085b      	lsrs	r3, r3, #1
   1ab54:	493b      	ldr	r1, [pc, #236]	; (1ac44 <__ieee754_sqrt+0x1bc>)
   1ab56:	1072      	asrs	r2, r6, #1
   1ab58:	4688      	mov	r8, r1
   1ab5a:	4442      	add	r2, r8
   1ab5c:	07f1      	lsls	r1, r6, #31
   1ab5e:	d502      	bpl.n	1ab66 <__ieee754_sqrt+0xde>
   1ab60:	2180      	movs	r1, #128	; 0x80
   1ab62:	0609      	lsls	r1, r1, #24
   1ab64:	430b      	orrs	r3, r1
   1ab66:	4661      	mov	r1, ip
   1ab68:	001e      	movs	r6, r3
   1ab6a:	050f      	lsls	r7, r1, #20
   1ab6c:	18bd      	adds	r5, r7, r2
   1ab6e:	0030      	movs	r0, r6
   1ab70:	0029      	movs	r1, r5
   1ab72:	bc1c      	pop	{r2, r3, r4}
   1ab74:	4690      	mov	r8, r2
   1ab76:	4699      	mov	r9, r3
   1ab78:	46a2      	mov	sl, r4
   1ab7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ab7c:	42a1      	cmp	r1, r4
   1ab7e:	d8c4      	bhi.n	1ab0a <__ieee754_sqrt+0x82>
   1ab80:	188f      	adds	r7, r1, r2
   1ab82:	46b8      	mov	r8, r7
   1ab84:	2900      	cmp	r1, #0
   1ab86:	db42      	blt.n	1ac0e <__ieee754_sqrt+0x186>
   1ab88:	4699      	mov	r9, r3
   1ab8a:	2300      	movs	r3, #0
   1ab8c:	e7d3      	b.n	1ab36 <__ieee754_sqrt+0xae>
   1ab8e:	2f00      	cmp	r7, #0
   1ab90:	db2f      	blt.n	1abf2 <__ieee754_sqrt+0x16a>
   1ab92:	1c6f      	adds	r7, r5, #1
   1ab94:	46b9      	mov	r9, r7
   1ab96:	e7c9      	b.n	1ab2c <__ieee754_sqrt+0xa4>
   1ab98:	0fe1      	lsrs	r1, r4, #31
   1ab9a:	0052      	lsls	r2, r2, #1
   1ab9c:	188a      	adds	r2, r1, r2
   1ab9e:	0064      	lsls	r4, r4, #1
   1aba0:	e791      	b.n	1aac6 <__ieee754_sqrt+0x3e>
   1aba2:	4653      	mov	r3, sl
   1aba4:	3301      	adds	r3, #1
   1aba6:	d035      	beq.n	1ac14 <__ieee754_sqrt+0x18c>
   1aba8:	4653      	mov	r3, sl
   1abaa:	3301      	adds	r3, #1
   1abac:	085b      	lsrs	r3, r3, #1
   1abae:	e7d1      	b.n	1ab54 <__ieee754_sqrt+0xcc>
   1abb0:	006b      	lsls	r3, r5, #1
   1abb2:	085b      	lsrs	r3, r3, #1
   1abb4:	4303      	orrs	r3, r0
   1abb6:	d0da      	beq.n	1ab6e <__ieee754_sqrt+0xe6>
   1abb8:	2700      	movs	r7, #0
   1abba:	2d00      	cmp	r5, #0
   1abbc:	d132      	bne.n	1ac24 <__ieee754_sqrt+0x19c>
   1abbe:	0ae2      	lsrs	r2, r4, #11
   1abc0:	3f15      	subs	r7, #21
   1abc2:	0564      	lsls	r4, r4, #21
   1abc4:	2a00      	cmp	r2, #0
   1abc6:	d0fa      	beq.n	1abbe <__ieee754_sqrt+0x136>
   1abc8:	2380      	movs	r3, #128	; 0x80
   1abca:	035b      	lsls	r3, r3, #13
   1abcc:	421a      	tst	r2, r3
   1abce:	d124      	bne.n	1ac1a <__ieee754_sqrt+0x192>
   1abd0:	2080      	movs	r0, #128	; 0x80
   1abd2:	2300      	movs	r3, #0
   1abd4:	0340      	lsls	r0, r0, #13
   1abd6:	e000      	b.n	1abda <__ieee754_sqrt+0x152>
   1abd8:	000b      	movs	r3, r1
   1abda:	0052      	lsls	r2, r2, #1
   1abdc:	1c59      	adds	r1, r3, #1
   1abde:	4202      	tst	r2, r0
   1abe0:	d0fa      	beq.n	1abd8 <__ieee754_sqrt+0x150>
   1abe2:	2020      	movs	r0, #32
   1abe4:	1a40      	subs	r0, r0, r1
   1abe6:	1aff      	subs	r7, r7, r3
   1abe8:	0023      	movs	r3, r4
   1abea:	40c3      	lsrs	r3, r0
   1abec:	408c      	lsls	r4, r1
   1abee:	431a      	orrs	r2, r3
   1abf0:	e75f      	b.n	1aab2 <__ieee754_sqrt+0x2a>
   1abf2:	46a9      	mov	r9, r5
   1abf4:	e79a      	b.n	1ab2c <__ieee754_sqrt+0xa4>
   1abf6:	002b      	movs	r3, r5
   1abf8:	0002      	movs	r2, r0
   1abfa:	0029      	movs	r1, r5
   1abfc:	f003 fa8a 	bl	1e114 <__aeabi_dmul>
   1ac00:	0032      	movs	r2, r6
   1ac02:	002b      	movs	r3, r5
   1ac04:	f002 fb42 	bl	1d28c <__aeabi_dadd>
   1ac08:	0006      	movs	r6, r0
   1ac0a:	000d      	movs	r5, r1
   1ac0c:	e7af      	b.n	1ab6e <__ieee754_sqrt+0xe6>
   1ac0e:	2f00      	cmp	r7, #0
   1ac10:	dabf      	bge.n	1ab92 <__ieee754_sqrt+0x10a>
   1ac12:	e7b9      	b.n	1ab88 <__ieee754_sqrt+0x100>
   1ac14:	3601      	adds	r6, #1
   1ac16:	2300      	movs	r3, #0
   1ac18:	e79c      	b.n	1ab54 <__ieee754_sqrt+0xcc>
   1ac1a:	2301      	movs	r3, #1
   1ac1c:	2100      	movs	r1, #0
   1ac1e:	2020      	movs	r0, #32
   1ac20:	425b      	negs	r3, r3
   1ac22:	e7e0      	b.n	1abe6 <__ieee754_sqrt+0x15e>
   1ac24:	002b      	movs	r3, r5
   1ac26:	0002      	movs	r2, r0
   1ac28:	0029      	movs	r1, r5
   1ac2a:	f003 fcf3 	bl	1e614 <__aeabi_dsub>
   1ac2e:	0002      	movs	r2, r0
   1ac30:	000b      	movs	r3, r1
   1ac32:	f002 fe3b 	bl	1d8ac <__aeabi_ddiv>
   1ac36:	0006      	movs	r6, r0
   1ac38:	000d      	movs	r5, r1
   1ac3a:	e798      	b.n	1ab6e <__ieee754_sqrt+0xe6>
   1ac3c:	7ff00000 	.word	0x7ff00000
   1ac40:	fffffc01 	.word	0xfffffc01
   1ac44:	3fe00000 	.word	0x3fe00000

0001ac48 <__kernel_cos>:
   1ac48:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ac4a:	4647      	mov	r7, r8
   1ac4c:	46ce      	mov	lr, r9
   1ac4e:	b580      	push	{r7, lr}
   1ac50:	b087      	sub	sp, #28
   1ac52:	9200      	str	r2, [sp, #0]
   1ac54:	9301      	str	r3, [sp, #4]
   1ac56:	4b75      	ldr	r3, [pc, #468]	; (1ae2c <__kernel_cos+0x1e4>)
   1ac58:	004f      	lsls	r7, r1, #1
   1ac5a:	4681      	mov	r9, r0
   1ac5c:	4688      	mov	r8, r1
   1ac5e:	087f      	lsrs	r7, r7, #1
   1ac60:	429f      	cmp	r7, r3
   1ac62:	dc63      	bgt.n	1ad2c <__kernel_cos+0xe4>
   1ac64:	f004 f80c 	bl	1ec80 <__aeabi_d2iz>
   1ac68:	2800      	cmp	r0, #0
   1ac6a:	d100      	bne.n	1ac6e <__kernel_cos+0x26>
   1ac6c:	e0da      	b.n	1ae24 <__kernel_cos+0x1dc>
   1ac6e:	464a      	mov	r2, r9
   1ac70:	4643      	mov	r3, r8
   1ac72:	4648      	mov	r0, r9
   1ac74:	4641      	mov	r1, r8
   1ac76:	f003 fa4d 	bl	1e114 <__aeabi_dmul>
   1ac7a:	0004      	movs	r4, r0
   1ac7c:	000d      	movs	r5, r1
   1ac7e:	4a6c      	ldr	r2, [pc, #432]	; (1ae30 <__kernel_cos+0x1e8>)
   1ac80:	4b6c      	ldr	r3, [pc, #432]	; (1ae34 <__kernel_cos+0x1ec>)
   1ac82:	f003 fa47 	bl	1e114 <__aeabi_dmul>
   1ac86:	4a6c      	ldr	r2, [pc, #432]	; (1ae38 <__kernel_cos+0x1f0>)
   1ac88:	4b6c      	ldr	r3, [pc, #432]	; (1ae3c <__kernel_cos+0x1f4>)
   1ac8a:	f002 faff 	bl	1d28c <__aeabi_dadd>
   1ac8e:	0022      	movs	r2, r4
   1ac90:	002b      	movs	r3, r5
   1ac92:	f003 fa3f 	bl	1e114 <__aeabi_dmul>
   1ac96:	4a6a      	ldr	r2, [pc, #424]	; (1ae40 <__kernel_cos+0x1f8>)
   1ac98:	4b6a      	ldr	r3, [pc, #424]	; (1ae44 <__kernel_cos+0x1fc>)
   1ac9a:	f003 fcbb 	bl	1e614 <__aeabi_dsub>
   1ac9e:	0022      	movs	r2, r4
   1aca0:	002b      	movs	r3, r5
   1aca2:	f003 fa37 	bl	1e114 <__aeabi_dmul>
   1aca6:	4a68      	ldr	r2, [pc, #416]	; (1ae48 <__kernel_cos+0x200>)
   1aca8:	4b68      	ldr	r3, [pc, #416]	; (1ae4c <__kernel_cos+0x204>)
   1acaa:	f002 faef 	bl	1d28c <__aeabi_dadd>
   1acae:	0022      	movs	r2, r4
   1acb0:	002b      	movs	r3, r5
   1acb2:	f003 fa2f 	bl	1e114 <__aeabi_dmul>
   1acb6:	4a66      	ldr	r2, [pc, #408]	; (1ae50 <__kernel_cos+0x208>)
   1acb8:	4b66      	ldr	r3, [pc, #408]	; (1ae54 <__kernel_cos+0x20c>)
   1acba:	f003 fcab 	bl	1e614 <__aeabi_dsub>
   1acbe:	0022      	movs	r2, r4
   1acc0:	002b      	movs	r3, r5
   1acc2:	f003 fa27 	bl	1e114 <__aeabi_dmul>
   1acc6:	4a64      	ldr	r2, [pc, #400]	; (1ae58 <__kernel_cos+0x210>)
   1acc8:	4b64      	ldr	r3, [pc, #400]	; (1ae5c <__kernel_cos+0x214>)
   1acca:	f002 fadf 	bl	1d28c <__aeabi_dadd>
   1acce:	0022      	movs	r2, r4
   1acd0:	002b      	movs	r3, r5
   1acd2:	f003 fa1f 	bl	1e114 <__aeabi_dmul>
   1acd6:	9002      	str	r0, [sp, #8]
   1acd8:	9103      	str	r1, [sp, #12]
   1acda:	2200      	movs	r2, #0
   1acdc:	4b60      	ldr	r3, [pc, #384]	; (1ae60 <__kernel_cos+0x218>)
   1acde:	0020      	movs	r0, r4
   1ace0:	0029      	movs	r1, r5
   1ace2:	f003 fa17 	bl	1e114 <__aeabi_dmul>
   1ace6:	9a02      	ldr	r2, [sp, #8]
   1ace8:	9b03      	ldr	r3, [sp, #12]
   1acea:	0006      	movs	r6, r0
   1acec:	000f      	movs	r7, r1
   1acee:	0020      	movs	r0, r4
   1acf0:	0029      	movs	r1, r5
   1acf2:	f003 fa0f 	bl	1e114 <__aeabi_dmul>
   1acf6:	9a00      	ldr	r2, [sp, #0]
   1acf8:	9b01      	ldr	r3, [sp, #4]
   1acfa:	0004      	movs	r4, r0
   1acfc:	000d      	movs	r5, r1
   1acfe:	4648      	mov	r0, r9
   1ad00:	4641      	mov	r1, r8
   1ad02:	f003 fa07 	bl	1e114 <__aeabi_dmul>
   1ad06:	0002      	movs	r2, r0
   1ad08:	000b      	movs	r3, r1
   1ad0a:	0020      	movs	r0, r4
   1ad0c:	0029      	movs	r1, r5
   1ad0e:	f003 fc81 	bl	1e614 <__aeabi_dsub>
   1ad12:	0002      	movs	r2, r0
   1ad14:	000b      	movs	r3, r1
   1ad16:	0030      	movs	r0, r6
   1ad18:	0039      	movs	r1, r7
   1ad1a:	f003 fc7b 	bl	1e614 <__aeabi_dsub>
   1ad1e:	0002      	movs	r2, r0
   1ad20:	000b      	movs	r3, r1
   1ad22:	2000      	movs	r0, #0
   1ad24:	494f      	ldr	r1, [pc, #316]	; (1ae64 <__kernel_cos+0x21c>)
   1ad26:	f003 fc75 	bl	1e614 <__aeabi_dsub>
   1ad2a:	e070      	b.n	1ae0e <__kernel_cos+0x1c6>
   1ad2c:	0002      	movs	r2, r0
   1ad2e:	000b      	movs	r3, r1
   1ad30:	f003 f9f0 	bl	1e114 <__aeabi_dmul>
   1ad34:	0004      	movs	r4, r0
   1ad36:	000d      	movs	r5, r1
   1ad38:	4a3d      	ldr	r2, [pc, #244]	; (1ae30 <__kernel_cos+0x1e8>)
   1ad3a:	4b3e      	ldr	r3, [pc, #248]	; (1ae34 <__kernel_cos+0x1ec>)
   1ad3c:	f003 f9ea 	bl	1e114 <__aeabi_dmul>
   1ad40:	4a3d      	ldr	r2, [pc, #244]	; (1ae38 <__kernel_cos+0x1f0>)
   1ad42:	4b3e      	ldr	r3, [pc, #248]	; (1ae3c <__kernel_cos+0x1f4>)
   1ad44:	f002 faa2 	bl	1d28c <__aeabi_dadd>
   1ad48:	0022      	movs	r2, r4
   1ad4a:	002b      	movs	r3, r5
   1ad4c:	f003 f9e2 	bl	1e114 <__aeabi_dmul>
   1ad50:	4a3b      	ldr	r2, [pc, #236]	; (1ae40 <__kernel_cos+0x1f8>)
   1ad52:	4b3c      	ldr	r3, [pc, #240]	; (1ae44 <__kernel_cos+0x1fc>)
   1ad54:	f003 fc5e 	bl	1e614 <__aeabi_dsub>
   1ad58:	0022      	movs	r2, r4
   1ad5a:	002b      	movs	r3, r5
   1ad5c:	f003 f9da 	bl	1e114 <__aeabi_dmul>
   1ad60:	4a39      	ldr	r2, [pc, #228]	; (1ae48 <__kernel_cos+0x200>)
   1ad62:	4b3a      	ldr	r3, [pc, #232]	; (1ae4c <__kernel_cos+0x204>)
   1ad64:	f002 fa92 	bl	1d28c <__aeabi_dadd>
   1ad68:	0022      	movs	r2, r4
   1ad6a:	002b      	movs	r3, r5
   1ad6c:	f003 f9d2 	bl	1e114 <__aeabi_dmul>
   1ad70:	4a37      	ldr	r2, [pc, #220]	; (1ae50 <__kernel_cos+0x208>)
   1ad72:	4b38      	ldr	r3, [pc, #224]	; (1ae54 <__kernel_cos+0x20c>)
   1ad74:	f003 fc4e 	bl	1e614 <__aeabi_dsub>
   1ad78:	0022      	movs	r2, r4
   1ad7a:	002b      	movs	r3, r5
   1ad7c:	f003 f9ca 	bl	1e114 <__aeabi_dmul>
   1ad80:	4a35      	ldr	r2, [pc, #212]	; (1ae58 <__kernel_cos+0x210>)
   1ad82:	4b36      	ldr	r3, [pc, #216]	; (1ae5c <__kernel_cos+0x214>)
   1ad84:	f002 fa82 	bl	1d28c <__aeabi_dadd>
   1ad88:	002b      	movs	r3, r5
   1ad8a:	0022      	movs	r2, r4
   1ad8c:	f003 f9c2 	bl	1e114 <__aeabi_dmul>
   1ad90:	4b35      	ldr	r3, [pc, #212]	; (1ae68 <__kernel_cos+0x220>)
   1ad92:	9002      	str	r0, [sp, #8]
   1ad94:	9103      	str	r1, [sp, #12]
   1ad96:	429f      	cmp	r7, r3
   1ad98:	dd9f      	ble.n	1acda <__kernel_cos+0x92>
   1ad9a:	4b34      	ldr	r3, [pc, #208]	; (1ae6c <__kernel_cos+0x224>)
   1ad9c:	2200      	movs	r2, #0
   1ad9e:	429f      	cmp	r7, r3
   1ada0:	dc3a      	bgt.n	1ae18 <__kernel_cos+0x1d0>
   1ada2:	4933      	ldr	r1, [pc, #204]	; (1ae70 <__kernel_cos+0x228>)
   1ada4:	2000      	movs	r0, #0
   1ada6:	187b      	adds	r3, r7, r1
   1ada8:	492e      	ldr	r1, [pc, #184]	; (1ae64 <__kernel_cos+0x21c>)
   1adaa:	0016      	movs	r6, r2
   1adac:	001f      	movs	r7, r3
   1adae:	f003 fc31 	bl	1e614 <__aeabi_dsub>
   1adb2:	9004      	str	r0, [sp, #16]
   1adb4:	9105      	str	r1, [sp, #20]
   1adb6:	2200      	movs	r2, #0
   1adb8:	4b29      	ldr	r3, [pc, #164]	; (1ae60 <__kernel_cos+0x218>)
   1adba:	0020      	movs	r0, r4
   1adbc:	0029      	movs	r1, r5
   1adbe:	f003 f9a9 	bl	1e114 <__aeabi_dmul>
   1adc2:	0032      	movs	r2, r6
   1adc4:	003b      	movs	r3, r7
   1adc6:	f003 fc25 	bl	1e614 <__aeabi_dsub>
   1adca:	9a02      	ldr	r2, [sp, #8]
   1adcc:	9b03      	ldr	r3, [sp, #12]
   1adce:	0006      	movs	r6, r0
   1add0:	000f      	movs	r7, r1
   1add2:	0020      	movs	r0, r4
   1add4:	0029      	movs	r1, r5
   1add6:	f003 f99d 	bl	1e114 <__aeabi_dmul>
   1adda:	9a00      	ldr	r2, [sp, #0]
   1addc:	9b01      	ldr	r3, [sp, #4]
   1adde:	0004      	movs	r4, r0
   1ade0:	000d      	movs	r5, r1
   1ade2:	4648      	mov	r0, r9
   1ade4:	4641      	mov	r1, r8
   1ade6:	f003 f995 	bl	1e114 <__aeabi_dmul>
   1adea:	0002      	movs	r2, r0
   1adec:	000b      	movs	r3, r1
   1adee:	0020      	movs	r0, r4
   1adf0:	0029      	movs	r1, r5
   1adf2:	f003 fc0f 	bl	1e614 <__aeabi_dsub>
   1adf6:	0002      	movs	r2, r0
   1adf8:	000b      	movs	r3, r1
   1adfa:	0030      	movs	r0, r6
   1adfc:	0039      	movs	r1, r7
   1adfe:	f003 fc09 	bl	1e614 <__aeabi_dsub>
   1ae02:	0002      	movs	r2, r0
   1ae04:	000b      	movs	r3, r1
   1ae06:	9804      	ldr	r0, [sp, #16]
   1ae08:	9905      	ldr	r1, [sp, #20]
   1ae0a:	f003 fc03 	bl	1e614 <__aeabi_dsub>
   1ae0e:	b007      	add	sp, #28
   1ae10:	bc0c      	pop	{r2, r3}
   1ae12:	4690      	mov	r8, r2
   1ae14:	4699      	mov	r9, r3
   1ae16:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ae18:	4b16      	ldr	r3, [pc, #88]	; (1ae74 <__kernel_cos+0x22c>)
   1ae1a:	2600      	movs	r6, #0
   1ae1c:	9204      	str	r2, [sp, #16]
   1ae1e:	9305      	str	r3, [sp, #20]
   1ae20:	4f15      	ldr	r7, [pc, #84]	; (1ae78 <__kernel_cos+0x230>)
   1ae22:	e7c8      	b.n	1adb6 <__kernel_cos+0x16e>
   1ae24:	2000      	movs	r0, #0
   1ae26:	490f      	ldr	r1, [pc, #60]	; (1ae64 <__kernel_cos+0x21c>)
   1ae28:	e7f1      	b.n	1ae0e <__kernel_cos+0x1c6>
   1ae2a:	46c0      	nop			; (mov r8, r8)
   1ae2c:	3e3fffff 	.word	0x3e3fffff
   1ae30:	be8838d4 	.word	0xbe8838d4
   1ae34:	bda8fae9 	.word	0xbda8fae9
   1ae38:	bdb4b1c4 	.word	0xbdb4b1c4
   1ae3c:	3e21ee9e 	.word	0x3e21ee9e
   1ae40:	809c52ad 	.word	0x809c52ad
   1ae44:	3e927e4f 	.word	0x3e927e4f
   1ae48:	19cb1590 	.word	0x19cb1590
   1ae4c:	3efa01a0 	.word	0x3efa01a0
   1ae50:	16c15177 	.word	0x16c15177
   1ae54:	3f56c16c 	.word	0x3f56c16c
   1ae58:	5555554c 	.word	0x5555554c
   1ae5c:	3fa55555 	.word	0x3fa55555
   1ae60:	3fe00000 	.word	0x3fe00000
   1ae64:	3ff00000 	.word	0x3ff00000
   1ae68:	3fd33332 	.word	0x3fd33332
   1ae6c:	3fe90000 	.word	0x3fe90000
   1ae70:	ffe00000 	.word	0xffe00000
   1ae74:	3fe70000 	.word	0x3fe70000
   1ae78:	3fd20000 	.word	0x3fd20000

0001ae7c <__kernel_rem_pio2>:
   1ae7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ae7e:	46de      	mov	lr, fp
   1ae80:	464e      	mov	r6, r9
   1ae82:	4645      	mov	r5, r8
   1ae84:	4657      	mov	r7, sl
   1ae86:	b5e0      	push	{r5, r6, r7, lr}
   1ae88:	4ca3      	ldr	r4, [pc, #652]	; (1b118 <__kernel_rem_pio2+0x29c>)
   1ae8a:	44a5      	add	sp, r4
   1ae8c:	9107      	str	r1, [sp, #28]
   1ae8e:	0019      	movs	r1, r3
   1ae90:	0014      	movs	r4, r2
   1ae92:	9aa4      	ldr	r2, [sp, #656]	; 0x290
   1ae94:	9309      	str	r3, [sp, #36]	; 0x24
   1ae96:	4ba1      	ldr	r3, [pc, #644]	; (1b11c <__kernel_rem_pio2+0x2a0>)
   1ae98:	0092      	lsls	r2, r2, #2
   1ae9a:	58d2      	ldr	r2, [r2, r3]
   1ae9c:	000b      	movs	r3, r1
   1ae9e:	9003      	str	r0, [sp, #12]
   1aea0:	3b01      	subs	r3, #1
   1aea2:	1ee0      	subs	r0, r4, #3
   1aea4:	2118      	movs	r1, #24
   1aea6:	001d      	movs	r5, r3
   1aea8:	0016      	movs	r6, r2
   1aeaa:	9206      	str	r2, [sp, #24]
   1aeac:	9302      	str	r3, [sp, #8]
   1aeae:	f001 f8f7 	bl	1c0a0 <__divsi3>
   1aeb2:	43c3      	mvns	r3, r0
   1aeb4:	0002      	movs	r2, r0
   1aeb6:	17db      	asrs	r3, r3, #31
   1aeb8:	401a      	ands	r2, r3
   1aeba:	0013      	movs	r3, r2
   1aebc:	0011      	movs	r1, r2
   1aebe:	3301      	adds	r3, #1
   1aec0:	920b      	str	r2, [sp, #44]	; 0x2c
   1aec2:	009a      	lsls	r2, r3, #2
   1aec4:	1a9b      	subs	r3, r3, r2
   1aec6:	00db      	lsls	r3, r3, #3
   1aec8:	191b      	adds	r3, r3, r4
   1aeca:	9304      	str	r3, [sp, #16]
   1aecc:	1b4c      	subs	r4, r1, r5
   1aece:	1976      	adds	r6, r6, r5
   1aed0:	d418      	bmi.n	1af04 <__kernel_rem_pio2+0x88>
   1aed2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
   1aed4:	00a5      	lsls	r5, r4, #2
   1aed6:	469c      	mov	ip, r3
   1aed8:	1936      	adds	r6, r6, r4
   1aeda:	af22      	add	r7, sp, #136	; 0x88
   1aedc:	4465      	add	r5, ip
   1aede:	3601      	adds	r6, #1
   1aee0:	e007      	b.n	1aef2 <__kernel_rem_pio2+0x76>
   1aee2:	6828      	ldr	r0, [r5, #0]
   1aee4:	f003 ff00 	bl	1ece8 <__aeabi_i2d>
   1aee8:	3401      	adds	r4, #1
   1aeea:	c703      	stmia	r7!, {r0, r1}
   1aeec:	3504      	adds	r5, #4
   1aeee:	42b4      	cmp	r4, r6
   1aef0:	d008      	beq.n	1af04 <__kernel_rem_pio2+0x88>
   1aef2:	2c00      	cmp	r4, #0
   1aef4:	daf5      	bge.n	1aee2 <__kernel_rem_pio2+0x66>
   1aef6:	2000      	movs	r0, #0
   1aef8:	2100      	movs	r1, #0
   1aefa:	3401      	adds	r4, #1
   1aefc:	c703      	stmia	r7!, {r0, r1}
   1aefe:	3504      	adds	r5, #4
   1af00:	42b4      	cmp	r4, r6
   1af02:	d1f6      	bne.n	1aef2 <__kernel_rem_pio2+0x76>
   1af04:	9b06      	ldr	r3, [sp, #24]
   1af06:	2b00      	cmp	r3, #0
   1af08:	da01      	bge.n	1af0e <__kernel_rem_pio2+0x92>
   1af0a:	f000 fc01 	bl	1b710 <__kernel_rem_pio2+0x894>
   1af0e:	ab72      	add	r3, sp, #456	; 0x1c8
   1af10:	0019      	movs	r1, r3
   1af12:	468b      	mov	fp, r1
   1af14:	aa22      	add	r2, sp, #136	; 0x88
   1af16:	4691      	mov	r9, r2
   1af18:	9a06      	ldr	r2, [sp, #24]
   1af1a:	9308      	str	r3, [sp, #32]
   1af1c:	3201      	adds	r2, #1
   1af1e:	00d2      	lsls	r2, r2, #3
   1af20:	4493      	add	fp, r2
   1af22:	9a03      	ldr	r2, [sp, #12]
   1af24:	469a      	mov	sl, r3
   1af26:	4690      	mov	r8, r2
   1af28:	9b02      	ldr	r3, [sp, #8]
   1af2a:	00db      	lsls	r3, r3, #3
   1af2c:	4499      	add	r9, r3
   1af2e:	3308      	adds	r3, #8
   1af30:	4498      	add	r8, r3
   1af32:	9b02      	ldr	r3, [sp, #8]
   1af34:	2b00      	cmp	r3, #0
   1af36:	da00      	bge.n	1af3a <__kernel_rem_pio2+0xbe>
   1af38:	e28d      	b.n	1b456 <__kernel_rem_pio2+0x5da>
   1af3a:	464c      	mov	r4, r9
   1af3c:	2600      	movs	r6, #0
   1af3e:	2700      	movs	r7, #0
   1af40:	9d03      	ldr	r5, [sp, #12]
   1af42:	6822      	ldr	r2, [r4, #0]
   1af44:	6863      	ldr	r3, [r4, #4]
   1af46:	cd03      	ldmia	r5!, {r0, r1}
   1af48:	f003 f8e4 	bl	1e114 <__aeabi_dmul>
   1af4c:	0002      	movs	r2, r0
   1af4e:	000b      	movs	r3, r1
   1af50:	0030      	movs	r0, r6
   1af52:	0039      	movs	r1, r7
   1af54:	f002 f99a 	bl	1d28c <__aeabi_dadd>
   1af58:	3c08      	subs	r4, #8
   1af5a:	0006      	movs	r6, r0
   1af5c:	000f      	movs	r7, r1
   1af5e:	4545      	cmp	r5, r8
   1af60:	d1ef      	bne.n	1af42 <__kernel_rem_pio2+0xc6>
   1af62:	4653      	mov	r3, sl
   1af64:	c3c0      	stmia	r3!, {r6, r7}
   1af66:	469a      	mov	sl, r3
   1af68:	2308      	movs	r3, #8
   1af6a:	469c      	mov	ip, r3
   1af6c:	44e1      	add	r9, ip
   1af6e:	45da      	cmp	sl, fp
   1af70:	d1df      	bne.n	1af32 <__kernel_rem_pio2+0xb6>
   1af72:	9a06      	ldr	r2, [sp, #24]
   1af74:	496a      	ldr	r1, [pc, #424]	; (1b120 <__kernel_rem_pio2+0x2a4>)
   1af76:	0013      	movs	r3, r2
   1af78:	468c      	mov	ip, r1
   1af7a:	4463      	add	r3, ip
   1af7c:	009b      	lsls	r3, r3, #2
   1af7e:	a80e      	add	r0, sp, #56	; 0x38
   1af80:	0019      	movs	r1, r3
   1af82:	4684      	mov	ip, r0
   1af84:	4461      	add	r1, ip
   1af86:	910d      	str	r1, [sp, #52]	; 0x34
   1af88:	9903      	ldr	r1, [sp, #12]
   1af8a:	3b04      	subs	r3, #4
   1af8c:	468b      	mov	fp, r1
   1af8e:	4463      	add	r3, ip
   1af90:	930c      	str	r3, [sp, #48]	; 0x30
   1af92:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1af94:	9200      	str	r2, [sp, #0]
   1af96:	00db      	lsls	r3, r3, #3
   1af98:	449b      	add	fp, r3
   1af9a:	9a00      	ldr	r2, [sp, #0]
   1af9c:	9808      	ldr	r0, [sp, #32]
   1af9e:	00d3      	lsls	r3, r2, #3
   1afa0:	0019      	movs	r1, r3
   1afa2:	930a      	str	r3, [sp, #40]	; 0x28
   1afa4:	468c      	mov	ip, r1
   1afa6:	0003      	movs	r3, r0
   1afa8:	4463      	add	r3, ip
   1afaa:	681e      	ldr	r6, [r3, #0]
   1afac:	685f      	ldr	r7, [r3, #4]
   1afae:	2a00      	cmp	r2, #0
   1afb0:	dd34      	ble.n	1b01c <__kernel_rem_pio2+0x1a0>
   1afb2:	ab0e      	add	r3, sp, #56	; 0x38
   1afb4:	4699      	mov	r9, r3
   1afb6:	0013      	movs	r3, r2
   1afb8:	4a5a      	ldr	r2, [pc, #360]	; (1b124 <__kernel_rem_pio2+0x2a8>)
   1afba:	4680      	mov	r8, r0
   1afbc:	4694      	mov	ip, r2
   1afbe:	4463      	add	r3, ip
   1afc0:	00db      	lsls	r3, r3, #3
   1afc2:	4498      	add	r8, r3
   1afc4:	ab70      	add	r3, sp, #448	; 0x1c0
   1afc6:	469a      	mov	sl, r3
   1afc8:	2200      	movs	r2, #0
   1afca:	4b57      	ldr	r3, [pc, #348]	; (1b128 <__kernel_rem_pio2+0x2ac>)
   1afcc:	0030      	movs	r0, r6
   1afce:	0039      	movs	r1, r7
   1afd0:	f003 f8a0 	bl	1e114 <__aeabi_dmul>
   1afd4:	f003 fe54 	bl	1ec80 <__aeabi_d2iz>
   1afd8:	f003 fe86 	bl	1ece8 <__aeabi_i2d>
   1afdc:	2200      	movs	r2, #0
   1afde:	4b53      	ldr	r3, [pc, #332]	; (1b12c <__kernel_rem_pio2+0x2b0>)
   1afe0:	0004      	movs	r4, r0
   1afe2:	000d      	movs	r5, r1
   1afe4:	f003 f896 	bl	1e114 <__aeabi_dmul>
   1afe8:	0002      	movs	r2, r0
   1afea:	000b      	movs	r3, r1
   1afec:	0030      	movs	r0, r6
   1afee:	0039      	movs	r1, r7
   1aff0:	f003 fb10 	bl	1e614 <__aeabi_dsub>
   1aff4:	f003 fe44 	bl	1ec80 <__aeabi_d2iz>
   1aff8:	464b      	mov	r3, r9
   1affa:	c301      	stmia	r3!, {r0}
   1affc:	4699      	mov	r9, r3
   1affe:	4643      	mov	r3, r8
   1b000:	0020      	movs	r0, r4
   1b002:	681a      	ldr	r2, [r3, #0]
   1b004:	685b      	ldr	r3, [r3, #4]
   1b006:	0029      	movs	r1, r5
   1b008:	f002 f940 	bl	1d28c <__aeabi_dadd>
   1b00c:	2308      	movs	r3, #8
   1b00e:	425b      	negs	r3, r3
   1b010:	469c      	mov	ip, r3
   1b012:	44e0      	add	r8, ip
   1b014:	0006      	movs	r6, r0
   1b016:	000f      	movs	r7, r1
   1b018:	45d0      	cmp	r8, sl
   1b01a:	d1d5      	bne.n	1afc8 <__kernel_rem_pio2+0x14c>
   1b01c:	9b04      	ldr	r3, [sp, #16]
   1b01e:	0030      	movs	r0, r6
   1b020:	001a      	movs	r2, r3
   1b022:	0039      	movs	r1, r7
   1b024:	4699      	mov	r9, r3
   1b026:	f000 ff41 	bl	1beac <scalbn>
   1b02a:	23ff      	movs	r3, #255	; 0xff
   1b02c:	2200      	movs	r2, #0
   1b02e:	059b      	lsls	r3, r3, #22
   1b030:	0004      	movs	r4, r0
   1b032:	000d      	movs	r5, r1
   1b034:	f003 f86e 	bl	1e114 <__aeabi_dmul>
   1b038:	f000 fdf6 	bl	1bc28 <floor>
   1b03c:	2200      	movs	r2, #0
   1b03e:	4b3c      	ldr	r3, [pc, #240]	; (1b130 <__kernel_rem_pio2+0x2b4>)
   1b040:	f003 f868 	bl	1e114 <__aeabi_dmul>
   1b044:	0002      	movs	r2, r0
   1b046:	000b      	movs	r3, r1
   1b048:	0020      	movs	r0, r4
   1b04a:	0029      	movs	r1, r5
   1b04c:	f003 fae2 	bl	1e614 <__aeabi_dsub>
   1b050:	000d      	movs	r5, r1
   1b052:	0004      	movs	r4, r0
   1b054:	f003 fe14 	bl	1ec80 <__aeabi_d2iz>
   1b058:	4680      	mov	r8, r0
   1b05a:	f003 fe45 	bl	1ece8 <__aeabi_i2d>
   1b05e:	0002      	movs	r2, r0
   1b060:	000b      	movs	r3, r1
   1b062:	0020      	movs	r0, r4
   1b064:	0029      	movs	r1, r5
   1b066:	f003 fad5 	bl	1e614 <__aeabi_dsub>
   1b06a:	000f      	movs	r7, r1
   1b06c:	4649      	mov	r1, r9
   1b06e:	0006      	movs	r6, r0
   1b070:	2900      	cmp	r1, #0
   1b072:	dc00      	bgt.n	1b076 <__kernel_rem_pio2+0x1fa>
   1b074:	e110      	b.n	1b298 <__kernel_rem_pio2+0x41c>
   1b076:	9b00      	ldr	r3, [sp, #0]
   1b078:	2018      	movs	r0, #24
   1b07a:	1e5a      	subs	r2, r3, #1
   1b07c:	0092      	lsls	r2, r2, #2
   1b07e:	ab0e      	add	r3, sp, #56	; 0x38
   1b080:	589b      	ldr	r3, [r3, r2]
   1b082:	1a40      	subs	r0, r0, r1
   1b084:	001d      	movs	r5, r3
   1b086:	4105      	asrs	r5, r0
   1b088:	44a8      	add	r8, r5
   1b08a:	4085      	lsls	r5, r0
   1b08c:	1b5d      	subs	r5, r3, r5
   1b08e:	ab0e      	add	r3, sp, #56	; 0x38
   1b090:	509d      	str	r5, [r3, r2]
   1b092:	2217      	movs	r2, #23
   1b094:	1a52      	subs	r2, r2, r1
   1b096:	4115      	asrs	r5, r2
   1b098:	2d00      	cmp	r5, #0
   1b09a:	dc00      	bgt.n	1b09e <__kernel_rem_pio2+0x222>
   1b09c:	e07d      	b.n	1b19a <__kernel_rem_pio2+0x31e>
   1b09e:	2301      	movs	r3, #1
   1b0a0:	469c      	mov	ip, r3
   1b0a2:	9b00      	ldr	r3, [sp, #0]
   1b0a4:	44e0      	add	r8, ip
   1b0a6:	2b00      	cmp	r3, #0
   1b0a8:	dd48      	ble.n	1b13c <__kernel_rem_pio2+0x2c0>
   1b0aa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   1b0ac:	2c00      	cmp	r4, #0
   1b0ae:	d100      	bne.n	1b0b2 <__kernel_rem_pio2+0x236>
   1b0b0:	e34b      	b.n	1b74a <__kernel_rem_pio2+0x8ce>
   1b0b2:	2201      	movs	r2, #1
   1b0b4:	2300      	movs	r3, #0
   1b0b6:	2100      	movs	r1, #0
   1b0b8:	2080      	movs	r0, #128	; 0x80
   1b0ba:	0440      	lsls	r0, r0, #17
   1b0bc:	1b04      	subs	r4, r0, r4
   1b0be:	a80e      	add	r0, sp, #56	; 0x38
   1b0c0:	5044      	str	r4, [r0, r1]
   1b0c2:	9900      	ldr	r1, [sp, #0]
   1b0c4:	4291      	cmp	r1, r2
   1b0c6:	dd18      	ble.n	1b0fa <__kernel_rem_pio2+0x27e>
   1b0c8:	0092      	lsls	r2, r2, #2
   1b0ca:	a90e      	add	r1, sp, #56	; 0x38
   1b0cc:	5889      	ldr	r1, [r1, r2]
   1b0ce:	ac0e      	add	r4, sp, #56	; 0x38
   1b0d0:	9105      	str	r1, [sp, #20]
   1b0d2:	9805      	ldr	r0, [sp, #20]
   1b0d4:	4917      	ldr	r1, [pc, #92]	; (1b134 <__kernel_rem_pio2+0x2b8>)
   1b0d6:	3302      	adds	r3, #2
   1b0d8:	1a08      	subs	r0, r1, r0
   1b0da:	50a0      	str	r0, [r4, r2]
   1b0dc:	9a00      	ldr	r2, [sp, #0]
   1b0de:	429a      	cmp	r2, r3
   1b0e0:	dd0b      	ble.n	1b0fa <__kernel_rem_pio2+0x27e>
   1b0e2:	aa0e      	add	r2, sp, #56	; 0x38
   1b0e4:	4694      	mov	ip, r2
   1b0e6:	9a00      	ldr	r2, [sp, #0]
   1b0e8:	009b      	lsls	r3, r3, #2
   1b0ea:	0090      	lsls	r0, r2, #2
   1b0ec:	4463      	add	r3, ip
   1b0ee:	4460      	add	r0, ip
   1b0f0:	681a      	ldr	r2, [r3, #0]
   1b0f2:	1a8a      	subs	r2, r1, r2
   1b0f4:	c304      	stmia	r3!, {r2}
   1b0f6:	4283      	cmp	r3, r0
   1b0f8:	d1fa      	bne.n	1b0f0 <__kernel_rem_pio2+0x274>
   1b0fa:	9b04      	ldr	r3, [sp, #16]
   1b0fc:	2401      	movs	r4, #1
   1b0fe:	2b00      	cmp	r3, #0
   1b100:	dc21      	bgt.n	1b146 <__kernel_rem_pio2+0x2ca>
   1b102:	2d02      	cmp	r5, #2
   1b104:	d149      	bne.n	1b19a <__kernel_rem_pio2+0x31e>
   1b106:	0032      	movs	r2, r6
   1b108:	003b      	movs	r3, r7
   1b10a:	2000      	movs	r0, #0
   1b10c:	490a      	ldr	r1, [pc, #40]	; (1b138 <__kernel_rem_pio2+0x2bc>)
   1b10e:	f003 fa81 	bl	1e614 <__aeabi_dsub>
   1b112:	0006      	movs	r6, r0
   1b114:	000f      	movs	r7, r1
   1b116:	e032      	b.n	1b17e <__kernel_rem_pio2+0x302>
   1b118:	fffffd94 	.word	0xfffffd94
   1b11c:	00025030 	.word	0x00025030
   1b120:	3fffffff 	.word	0x3fffffff
   1b124:	1fffffff 	.word	0x1fffffff
   1b128:	3e700000 	.word	0x3e700000
   1b12c:	41700000 	.word	0x41700000
   1b130:	40200000 	.word	0x40200000
   1b134:	00ffffff 	.word	0x00ffffff
   1b138:	3ff00000 	.word	0x3ff00000
   1b13c:	9b04      	ldr	r3, [sp, #16]
   1b13e:	2400      	movs	r4, #0
   1b140:	2b00      	cmp	r3, #0
   1b142:	dc00      	bgt.n	1b146 <__kernel_rem_pio2+0x2ca>
   1b144:	e292      	b.n	1b66c <__kernel_rem_pio2+0x7f0>
   1b146:	9b04      	ldr	r3, [sp, #16]
   1b148:	2b01      	cmp	r3, #1
   1b14a:	d100      	bne.n	1b14e <__kernel_rem_pio2+0x2d2>
   1b14c:	e27b      	b.n	1b646 <__kernel_rem_pio2+0x7ca>
   1b14e:	2b02      	cmp	r3, #2
   1b150:	d109      	bne.n	1b166 <__kernel_rem_pio2+0x2ea>
   1b152:	9b00      	ldr	r3, [sp, #0]
   1b154:	a90e      	add	r1, sp, #56	; 0x38
   1b156:	1e5a      	subs	r2, r3, #1
   1b158:	0092      	lsls	r2, r2, #2
   1b15a:	ab0e      	add	r3, sp, #56	; 0x38
   1b15c:	589b      	ldr	r3, [r3, r2]
   1b15e:	9305      	str	r3, [sp, #20]
   1b160:	029b      	lsls	r3, r3, #10
   1b162:	0a9b      	lsrs	r3, r3, #10
   1b164:	508b      	str	r3, [r1, r2]
   1b166:	2d02      	cmp	r5, #2
   1b168:	d117      	bne.n	1b19a <__kernel_rem_pio2+0x31e>
   1b16a:	0032      	movs	r2, r6
   1b16c:	003b      	movs	r3, r7
   1b16e:	2000      	movs	r0, #0
   1b170:	49bf      	ldr	r1, [pc, #764]	; (1b470 <__kernel_rem_pio2+0x5f4>)
   1b172:	f003 fa4f 	bl	1e614 <__aeabi_dsub>
   1b176:	0006      	movs	r6, r0
   1b178:	000f      	movs	r7, r1
   1b17a:	2c00      	cmp	r4, #0
   1b17c:	d00d      	beq.n	1b19a <__kernel_rem_pio2+0x31e>
   1b17e:	9a04      	ldr	r2, [sp, #16]
   1b180:	2000      	movs	r0, #0
   1b182:	49bb      	ldr	r1, [pc, #748]	; (1b470 <__kernel_rem_pio2+0x5f4>)
   1b184:	f000 fe92 	bl	1beac <scalbn>
   1b188:	0002      	movs	r2, r0
   1b18a:	000b      	movs	r3, r1
   1b18c:	0030      	movs	r0, r6
   1b18e:	0039      	movs	r1, r7
   1b190:	f003 fa40 	bl	1e614 <__aeabi_dsub>
   1b194:	2502      	movs	r5, #2
   1b196:	0006      	movs	r6, r0
   1b198:	000f      	movs	r7, r1
   1b19a:	2300      	movs	r3, #0
   1b19c:	2200      	movs	r2, #0
   1b19e:	0030      	movs	r0, r6
   1b1a0:	0039      	movs	r1, r7
   1b1a2:	f001 f879 	bl	1c298 <__aeabi_dcmpeq>
   1b1a6:	9b00      	ldr	r3, [sp, #0]
   1b1a8:	2800      	cmp	r0, #0
   1b1aa:	d100      	bne.n	1b1ae <__kernel_rem_pio2+0x332>
   1b1ac:	e262      	b.n	1b674 <__kernel_rem_pio2+0x7f8>
   1b1ae:	9906      	ldr	r1, [sp, #24]
   1b1b0:	1e5a      	subs	r2, r3, #1
   1b1b2:	4291      	cmp	r1, r2
   1b1b4:	dc10      	bgt.n	1b1d8 <__kernel_rem_pio2+0x35c>
   1b1b6:	49af      	ldr	r1, [pc, #700]	; (1b474 <__kernel_rem_pio2+0x5f8>)
   1b1b8:	980d      	ldr	r0, [sp, #52]	; 0x34
   1b1ba:	468c      	mov	ip, r1
   1b1bc:	a90e      	add	r1, sp, #56	; 0x38
   1b1be:	4463      	add	r3, ip
   1b1c0:	468c      	mov	ip, r1
   1b1c2:	2100      	movs	r1, #0
   1b1c4:	009b      	lsls	r3, r3, #2
   1b1c6:	4463      	add	r3, ip
   1b1c8:	681c      	ldr	r4, [r3, #0]
   1b1ca:	3b04      	subs	r3, #4
   1b1cc:	4321      	orrs	r1, r4
   1b1ce:	4283      	cmp	r3, r0
   1b1d0:	d1fa      	bne.n	1b1c8 <__kernel_rem_pio2+0x34c>
   1b1d2:	2900      	cmp	r1, #0
   1b1d4:	d000      	beq.n	1b1d8 <__kernel_rem_pio2+0x35c>
   1b1d6:	e084      	b.n	1b2e2 <__kernel_rem_pio2+0x466>
   1b1d8:	9b06      	ldr	r3, [sp, #24]
   1b1da:	aa0e      	add	r2, sp, #56	; 0x38
   1b1dc:	3b01      	subs	r3, #1
   1b1de:	009b      	lsls	r3, r3, #2
   1b1e0:	58d3      	ldr	r3, [r2, r3]
   1b1e2:	2b00      	cmp	r3, #0
   1b1e4:	d000      	beq.n	1b1e8 <__kernel_rem_pio2+0x36c>
   1b1e6:	e27c      	b.n	1b6e2 <__kernel_rem_pio2+0x866>
   1b1e8:	2201      	movs	r2, #1
   1b1ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b1ec:	3b04      	subs	r3, #4
   1b1ee:	6859      	ldr	r1, [r3, #4]
   1b1f0:	3201      	adds	r2, #1
   1b1f2:	2900      	cmp	r1, #0
   1b1f4:	d0fa      	beq.n	1b1ec <__kernel_rem_pio2+0x370>
   1b1f6:	9900      	ldr	r1, [sp, #0]
   1b1f8:	000b      	movs	r3, r1
   1b1fa:	468c      	mov	ip, r1
   1b1fc:	3301      	adds	r3, #1
   1b1fe:	4462      	add	r2, ip
   1b200:	9205      	str	r2, [sp, #20]
   1b202:	4293      	cmp	r3, r2
   1b204:	dc42      	bgt.n	1b28c <__kernel_rem_pio2+0x410>
   1b206:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1b208:	4694      	mov	ip, r2
   1b20a:	9aa5      	ldr	r2, [sp, #660]	; 0x294
   1b20c:	4463      	add	r3, ip
   1b20e:	4692      	mov	sl, r2
   1b210:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1b212:	009b      	lsls	r3, r3, #2
   1b214:	4694      	mov	ip, r2
   1b216:	aa22      	add	r2, sp, #136	; 0x88
   1b218:	4690      	mov	r8, r2
   1b21a:	449a      	add	sl, r3
   1b21c:	9b00      	ldr	r3, [sp, #0]
   1b21e:	9a08      	ldr	r2, [sp, #32]
   1b220:	4463      	add	r3, ip
   1b222:	00db      	lsls	r3, r3, #3
   1b224:	4498      	add	r8, r3
   1b226:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b228:	4694      	mov	ip, r2
   1b22a:	4699      	mov	r9, r3
   1b22c:	9b05      	ldr	r3, [sp, #20]
   1b22e:	44e1      	add	r9, ip
   1b230:	00db      	lsls	r3, r3, #3
   1b232:	4463      	add	r3, ip
   1b234:	9300      	str	r3, [sp, #0]
   1b236:	4653      	mov	r3, sl
   1b238:	6818      	ldr	r0, [r3, #0]
   1b23a:	f003 fd55 	bl	1ece8 <__aeabi_i2d>
   1b23e:	4643      	mov	r3, r8
   1b240:	6018      	str	r0, [r3, #0]
   1b242:	6059      	str	r1, [r3, #4]
   1b244:	9b02      	ldr	r3, [sp, #8]
   1b246:	2b00      	cmp	r3, #0
   1b248:	db23      	blt.n	1b292 <__kernel_rem_pio2+0x416>
   1b24a:	4644      	mov	r4, r8
   1b24c:	2600      	movs	r6, #0
   1b24e:	2700      	movs	r7, #0
   1b250:	9d03      	ldr	r5, [sp, #12]
   1b252:	6822      	ldr	r2, [r4, #0]
   1b254:	6863      	ldr	r3, [r4, #4]
   1b256:	cd03      	ldmia	r5!, {r0, r1}
   1b258:	f002 ff5c 	bl	1e114 <__aeabi_dmul>
   1b25c:	0002      	movs	r2, r0
   1b25e:	000b      	movs	r3, r1
   1b260:	0030      	movs	r0, r6
   1b262:	0039      	movs	r1, r7
   1b264:	f002 f812 	bl	1d28c <__aeabi_dadd>
   1b268:	3c08      	subs	r4, #8
   1b26a:	0006      	movs	r6, r0
   1b26c:	000f      	movs	r7, r1
   1b26e:	455d      	cmp	r5, fp
   1b270:	d1ef      	bne.n	1b252 <__kernel_rem_pio2+0x3d6>
   1b272:	464b      	mov	r3, r9
   1b274:	609e      	str	r6, [r3, #8]
   1b276:	60df      	str	r7, [r3, #12]
   1b278:	2304      	movs	r3, #4
   1b27a:	469c      	mov	ip, r3
   1b27c:	3304      	adds	r3, #4
   1b27e:	44e2      	add	sl, ip
   1b280:	469c      	mov	ip, r3
   1b282:	9b00      	ldr	r3, [sp, #0]
   1b284:	44e1      	add	r9, ip
   1b286:	44e0      	add	r8, ip
   1b288:	4599      	cmp	r9, r3
   1b28a:	d1d4      	bne.n	1b236 <__kernel_rem_pio2+0x3ba>
   1b28c:	9b05      	ldr	r3, [sp, #20]
   1b28e:	9300      	str	r3, [sp, #0]
   1b290:	e683      	b.n	1af9a <__kernel_rem_pio2+0x11e>
   1b292:	2600      	movs	r6, #0
   1b294:	2700      	movs	r7, #0
   1b296:	e7ec      	b.n	1b272 <__kernel_rem_pio2+0x3f6>
   1b298:	9b04      	ldr	r3, [sp, #16]
   1b29a:	2b00      	cmp	r3, #0
   1b29c:	d106      	bne.n	1b2ac <__kernel_rem_pio2+0x430>
   1b29e:	9b00      	ldr	r3, [sp, #0]
   1b2a0:	aa0e      	add	r2, sp, #56	; 0x38
   1b2a2:	3b01      	subs	r3, #1
   1b2a4:	009b      	lsls	r3, r3, #2
   1b2a6:	58d5      	ldr	r5, [r2, r3]
   1b2a8:	15ed      	asrs	r5, r5, #23
   1b2aa:	e6f5      	b.n	1b098 <__kernel_rem_pio2+0x21c>
   1b2ac:	2200      	movs	r2, #0
   1b2ae:	4b72      	ldr	r3, [pc, #456]	; (1b478 <__kernel_rem_pio2+0x5fc>)
   1b2b0:	0030      	movs	r0, r6
   1b2b2:	0039      	movs	r1, r7
   1b2b4:	f001 f814 	bl	1c2e0 <__aeabi_dcmpge>
   1b2b8:	2500      	movs	r5, #0
   1b2ba:	2800      	cmp	r0, #0
   1b2bc:	d100      	bne.n	1b2c0 <__kernel_rem_pio2+0x444>
   1b2be:	e76c      	b.n	1b19a <__kernel_rem_pio2+0x31e>
   1b2c0:	2301      	movs	r3, #1
   1b2c2:	469c      	mov	ip, r3
   1b2c4:	9b00      	ldr	r3, [sp, #0]
   1b2c6:	44e0      	add	r8, ip
   1b2c8:	2502      	movs	r5, #2
   1b2ca:	2b00      	cmp	r3, #0
   1b2cc:	dd00      	ble.n	1b2d0 <__kernel_rem_pio2+0x454>
   1b2ce:	e6ec      	b.n	1b0aa <__kernel_rem_pio2+0x22e>
   1b2d0:	0032      	movs	r2, r6
   1b2d2:	003b      	movs	r3, r7
   1b2d4:	2000      	movs	r0, #0
   1b2d6:	4966      	ldr	r1, [pc, #408]	; (1b470 <__kernel_rem_pio2+0x5f4>)
   1b2d8:	f003 f99c 	bl	1e614 <__aeabi_dsub>
   1b2dc:	0006      	movs	r6, r0
   1b2de:	000f      	movs	r7, r1
   1b2e0:	e75b      	b.n	1b19a <__kernel_rem_pio2+0x31e>
   1b2e2:	4643      	mov	r3, r8
   1b2e4:	9309      	str	r3, [sp, #36]	; 0x24
   1b2e6:	9b04      	ldr	r3, [sp, #16]
   1b2e8:	a80e      	add	r0, sp, #56	; 0x38
   1b2ea:	3b18      	subs	r3, #24
   1b2ec:	0019      	movs	r1, r3
   1b2ee:	9304      	str	r3, [sp, #16]
   1b2f0:	0093      	lsls	r3, r2, #2
   1b2f2:	58c3      	ldr	r3, [r0, r3]
   1b2f4:	9503      	str	r5, [sp, #12]
   1b2f6:	9202      	str	r2, [sp, #8]
   1b2f8:	2b00      	cmp	r3, #0
   1b2fa:	d10f      	bne.n	1b31c <__kernel_rem_pio2+0x4a0>
   1b2fc:	485d      	ldr	r0, [pc, #372]	; (1b474 <__kernel_rem_pio2+0x5f8>)
   1b2fe:	0013      	movs	r3, r2
   1b300:	4684      	mov	ip, r0
   1b302:	a80e      	add	r0, sp, #56	; 0x38
   1b304:	4463      	add	r3, ip
   1b306:	4684      	mov	ip, r0
   1b308:	009b      	lsls	r3, r3, #2
   1b30a:	4463      	add	r3, ip
   1b30c:	3b04      	subs	r3, #4
   1b30e:	6858      	ldr	r0, [r3, #4]
   1b310:	3a01      	subs	r2, #1
   1b312:	3918      	subs	r1, #24
   1b314:	2800      	cmp	r0, #0
   1b316:	d0f9      	beq.n	1b30c <__kernel_rem_pio2+0x490>
   1b318:	9202      	str	r2, [sp, #8]
   1b31a:	9104      	str	r1, [sp, #16]
   1b31c:	9a04      	ldr	r2, [sp, #16]
   1b31e:	2000      	movs	r0, #0
   1b320:	4953      	ldr	r1, [pc, #332]	; (1b470 <__kernel_rem_pio2+0x5f4>)
   1b322:	f000 fdc3 	bl	1beac <scalbn>
   1b326:	9b02      	ldr	r3, [sp, #8]
   1b328:	0004      	movs	r4, r0
   1b32a:	000d      	movs	r5, r1
   1b32c:	2b00      	cmp	r3, #0
   1b32e:	da00      	bge.n	1b332 <__kernel_rem_pio2+0x4b6>
   1b330:	e1d9      	b.n	1b6e6 <__kernel_rem_pio2+0x86a>
   1b332:	aa0e      	add	r2, sp, #56	; 0x38
   1b334:	4694      	mov	ip, r2
   1b336:	009e      	lsls	r6, r3, #2
   1b338:	00db      	lsls	r3, r3, #3
   1b33a:	4466      	add	r6, ip
   1b33c:	469c      	mov	ip, r3
   1b33e:	9a08      	ldr	r2, [sp, #32]
   1b340:	46b0      	mov	r8, r6
   1b342:	4462      	add	r2, ip
   1b344:	0016      	movs	r6, r2
   1b346:	9304      	str	r3, [sp, #16]
   1b348:	9200      	str	r2, [sp, #0]
   1b34a:	af70      	add	r7, sp, #448	; 0x1c0
   1b34c:	4643      	mov	r3, r8
   1b34e:	6818      	ldr	r0, [r3, #0]
   1b350:	f003 fcca 	bl	1ece8 <__aeabi_i2d>
   1b354:	0022      	movs	r2, r4
   1b356:	002b      	movs	r3, r5
   1b358:	f002 fedc 	bl	1e114 <__aeabi_dmul>
   1b35c:	4b47      	ldr	r3, [pc, #284]	; (1b47c <__kernel_rem_pio2+0x600>)
   1b35e:	6030      	str	r0, [r6, #0]
   1b360:	6071      	str	r1, [r6, #4]
   1b362:	2200      	movs	r2, #0
   1b364:	0020      	movs	r0, r4
   1b366:	0029      	movs	r1, r5
   1b368:	f002 fed4 	bl	1e114 <__aeabi_dmul>
   1b36c:	2304      	movs	r3, #4
   1b36e:	425b      	negs	r3, r3
   1b370:	469c      	mov	ip, r3
   1b372:	3e08      	subs	r6, #8
   1b374:	0004      	movs	r4, r0
   1b376:	000d      	movs	r5, r1
   1b378:	44e0      	add	r8, ip
   1b37a:	42be      	cmp	r6, r7
   1b37c:	d1e6      	bne.n	1b34c <__kernel_rem_pio2+0x4d0>
   1b37e:	2300      	movs	r3, #0
   1b380:	469a      	mov	sl, r3
   1b382:	ab4a      	add	r3, sp, #296	; 0x128
   1b384:	4699      	mov	r9, r3
   1b386:	9b06      	ldr	r3, [sp, #24]
   1b388:	9605      	str	r6, [sp, #20]
   1b38a:	469b      	mov	fp, r3
   1b38c:	465b      	mov	r3, fp
   1b38e:	2600      	movs	r6, #0
   1b390:	2700      	movs	r7, #0
   1b392:	2b00      	cmp	r3, #0
   1b394:	db21      	blt.n	1b3da <__kernel_rem_pio2+0x55e>
   1b396:	2080      	movs	r0, #128	; 0x80
   1b398:	4b39      	ldr	r3, [pc, #228]	; (1b480 <__kernel_rem_pio2+0x604>)
   1b39a:	9d00      	ldr	r5, [sp, #0]
   1b39c:	4698      	mov	r8, r3
   1b39e:	05c0      	lsls	r0, r0, #23
   1b3a0:	4938      	ldr	r1, [pc, #224]	; (1b484 <__kernel_rem_pio2+0x608>)
   1b3a2:	2600      	movs	r6, #0
   1b3a4:	2700      	movs	r7, #0
   1b3a6:	2400      	movs	r4, #0
   1b3a8:	e008      	b.n	1b3bc <__kernel_rem_pio2+0x540>
   1b3aa:	2308      	movs	r3, #8
   1b3ac:	469c      	mov	ip, r3
   1b3ae:	3508      	adds	r5, #8
   1b3b0:	44e0      	add	r8, ip
   1b3b2:	4554      	cmp	r4, sl
   1b3b4:	dc11      	bgt.n	1b3da <__kernel_rem_pio2+0x55e>
   1b3b6:	4643      	mov	r3, r8
   1b3b8:	6818      	ldr	r0, [r3, #0]
   1b3ba:	6859      	ldr	r1, [r3, #4]
   1b3bc:	682a      	ldr	r2, [r5, #0]
   1b3be:	686b      	ldr	r3, [r5, #4]
   1b3c0:	f002 fea8 	bl	1e114 <__aeabi_dmul>
   1b3c4:	0002      	movs	r2, r0
   1b3c6:	000b      	movs	r3, r1
   1b3c8:	0030      	movs	r0, r6
   1b3ca:	0039      	movs	r1, r7
   1b3cc:	f001 ff5e 	bl	1d28c <__aeabi_dadd>
   1b3d0:	3401      	adds	r4, #1
   1b3d2:	0006      	movs	r6, r0
   1b3d4:	000f      	movs	r7, r1
   1b3d6:	45a3      	cmp	fp, r4
   1b3d8:	dae7      	bge.n	1b3aa <__kernel_rem_pio2+0x52e>
   1b3da:	4653      	mov	r3, sl
   1b3dc:	00db      	lsls	r3, r3, #3
   1b3de:	444b      	add	r3, r9
   1b3e0:	601e      	str	r6, [r3, #0]
   1b3e2:	605f      	str	r7, [r3, #4]
   1b3e4:	2301      	movs	r3, #1
   1b3e6:	469c      	mov	ip, r3
   1b3e8:	9b00      	ldr	r3, [sp, #0]
   1b3ea:	9a05      	ldr	r2, [sp, #20]
   1b3ec:	3b08      	subs	r3, #8
   1b3ee:	44e2      	add	sl, ip
   1b3f0:	9300      	str	r3, [sp, #0]
   1b3f2:	429a      	cmp	r2, r3
   1b3f4:	d1ca      	bne.n	1b38c <__kernel_rem_pio2+0x510>
   1b3f6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
   1b3f8:	2b02      	cmp	r3, #2
   1b3fa:	dd00      	ble.n	1b3fe <__kernel_rem_pio2+0x582>
   1b3fc:	e07a      	b.n	1b4f4 <__kernel_rem_pio2+0x678>
   1b3fe:	2b00      	cmp	r3, #0
   1b400:	dc42      	bgt.n	1b488 <__kernel_rem_pio2+0x60c>
   1b402:	d11c      	bne.n	1b43e <__kernel_rem_pio2+0x5c2>
   1b404:	9b04      	ldr	r3, [sp, #16]
   1b406:	2700      	movs	r7, #0
   1b408:	444b      	add	r3, r9
   1b40a:	001e      	movs	r6, r3
   1b40c:	2400      	movs	r4, #0
   1b40e:	ad48      	add	r5, sp, #288	; 0x120
   1b410:	6832      	ldr	r2, [r6, #0]
   1b412:	6873      	ldr	r3, [r6, #4]
   1b414:	0038      	movs	r0, r7
   1b416:	0021      	movs	r1, r4
   1b418:	f001 ff38 	bl	1d28c <__aeabi_dadd>
   1b41c:	3e08      	subs	r6, #8
   1b41e:	0007      	movs	r7, r0
   1b420:	000c      	movs	r4, r1
   1b422:	42b5      	cmp	r5, r6
   1b424:	d1f4      	bne.n	1b410 <__kernel_rem_pio2+0x594>
   1b426:	9b03      	ldr	r3, [sp, #12]
   1b428:	2b00      	cmp	r3, #0
   1b42a:	d003      	beq.n	1b434 <__kernel_rem_pio2+0x5b8>
   1b42c:	2380      	movs	r3, #128	; 0x80
   1b42e:	061b      	lsls	r3, r3, #24
   1b430:	469c      	mov	ip, r3
   1b432:	4464      	add	r4, ip
   1b434:	003a      	movs	r2, r7
   1b436:	0023      	movs	r3, r4
   1b438:	9907      	ldr	r1, [sp, #28]
   1b43a:	600a      	str	r2, [r1, #0]
   1b43c:	604b      	str	r3, [r1, #4]
   1b43e:	2007      	movs	r0, #7
   1b440:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b442:	4018      	ands	r0, r3
   1b444:	239b      	movs	r3, #155	; 0x9b
   1b446:	009b      	lsls	r3, r3, #2
   1b448:	449d      	add	sp, r3
   1b44a:	bc3c      	pop	{r2, r3, r4, r5}
   1b44c:	4690      	mov	r8, r2
   1b44e:	4699      	mov	r9, r3
   1b450:	46a2      	mov	sl, r4
   1b452:	46ab      	mov	fp, r5
   1b454:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b456:	4653      	mov	r3, sl
   1b458:	2600      	movs	r6, #0
   1b45a:	2700      	movs	r7, #0
   1b45c:	c3c0      	stmia	r3!, {r6, r7}
   1b45e:	469a      	mov	sl, r3
   1b460:	2308      	movs	r3, #8
   1b462:	469c      	mov	ip, r3
   1b464:	44e1      	add	r9, ip
   1b466:	45da      	cmp	sl, fp
   1b468:	d000      	beq.n	1b46c <__kernel_rem_pio2+0x5f0>
   1b46a:	e562      	b.n	1af32 <__kernel_rem_pio2+0xb6>
   1b46c:	e581      	b.n	1af72 <__kernel_rem_pio2+0xf6>
   1b46e:	46c0      	nop			; (mov r8, r8)
   1b470:	3ff00000 	.word	0x3ff00000
   1b474:	3fffffff 	.word	0x3fffffff
   1b478:	3fe00000 	.word	0x3fe00000
   1b47c:	3e700000 	.word	0x3e700000
   1b480:	00024ff0 	.word	0x00024ff0
   1b484:	3ff921fb 	.word	0x3ff921fb
   1b488:	9b04      	ldr	r3, [sp, #16]
   1b48a:	2000      	movs	r0, #0
   1b48c:	444b      	add	r3, r9
   1b48e:	001e      	movs	r6, r3
   1b490:	2100      	movs	r1, #0
   1b492:	af48      	add	r7, sp, #288	; 0x120
   1b494:	6832      	ldr	r2, [r6, #0]
   1b496:	6873      	ldr	r3, [r6, #4]
   1b498:	3e08      	subs	r6, #8
   1b49a:	f001 fef7 	bl	1d28c <__aeabi_dadd>
   1b49e:	42be      	cmp	r6, r7
   1b4a0:	d1f8      	bne.n	1b494 <__kernel_rem_pio2+0x618>
   1b4a2:	9b03      	ldr	r3, [sp, #12]
   1b4a4:	2b00      	cmp	r3, #0
   1b4a6:	d100      	bne.n	1b4aa <__kernel_rem_pio2+0x62e>
   1b4a8:	e0b8      	b.n	1b61c <__kernel_rem_pio2+0x7a0>
   1b4aa:	2380      	movs	r3, #128	; 0x80
   1b4ac:	9a07      	ldr	r2, [sp, #28]
   1b4ae:	061b      	lsls	r3, r3, #24
   1b4b0:	18cb      	adds	r3, r1, r3
   1b4b2:	6010      	str	r0, [r2, #0]
   1b4b4:	6053      	str	r3, [r2, #4]
   1b4b6:	000b      	movs	r3, r1
   1b4b8:	0002      	movs	r2, r0
   1b4ba:	984a      	ldr	r0, [sp, #296]	; 0x128
   1b4bc:	994b      	ldr	r1, [sp, #300]	; 0x12c
   1b4be:	f003 f8a9 	bl	1e614 <__aeabi_dsub>
   1b4c2:	9b02      	ldr	r3, [sp, #8]
   1b4c4:	2b00      	cmp	r3, #0
   1b4c6:	dd0b      	ble.n	1b4e0 <__kernel_rem_pio2+0x664>
   1b4c8:	2601      	movs	r6, #1
   1b4ca:	af4c      	add	r7, sp, #304	; 0x130
   1b4cc:	cf0c      	ldmia	r7!, {r2, r3}
   1b4ce:	f001 fedd 	bl	1d28c <__aeabi_dadd>
   1b4d2:	9b02      	ldr	r3, [sp, #8]
   1b4d4:	3601      	adds	r6, #1
   1b4d6:	42b3      	cmp	r3, r6
   1b4d8:	daf8      	bge.n	1b4cc <__kernel_rem_pio2+0x650>
   1b4da:	9b03      	ldr	r3, [sp, #12]
   1b4dc:	2b00      	cmp	r3, #0
   1b4de:	d003      	beq.n	1b4e8 <__kernel_rem_pio2+0x66c>
   1b4e0:	2380      	movs	r3, #128	; 0x80
   1b4e2:	061b      	lsls	r3, r3, #24
   1b4e4:	469c      	mov	ip, r3
   1b4e6:	4461      	add	r1, ip
   1b4e8:	000b      	movs	r3, r1
   1b4ea:	0002      	movs	r2, r0
   1b4ec:	9907      	ldr	r1, [sp, #28]
   1b4ee:	608a      	str	r2, [r1, #8]
   1b4f0:	60cb      	str	r3, [r1, #12]
   1b4f2:	e7a4      	b.n	1b43e <__kernel_rem_pio2+0x5c2>
   1b4f4:	9ba4      	ldr	r3, [sp, #656]	; 0x290
   1b4f6:	2b03      	cmp	r3, #3
   1b4f8:	d1a1      	bne.n	1b43e <__kernel_rem_pio2+0x5c2>
   1b4fa:	9b02      	ldr	r3, [sp, #8]
   1b4fc:	2b00      	cmp	r3, #0
   1b4fe:	dc00      	bgt.n	1b502 <__kernel_rem_pio2+0x686>
   1b500:	e120      	b.n	1b744 <__kernel_rem_pio2+0x8c8>
   1b502:	4a99      	ldr	r2, [pc, #612]	; (1b768 <__kernel_rem_pio2+0x8ec>)
   1b504:	9b04      	ldr	r3, [sp, #16]
   1b506:	4694      	mov	ip, r2
   1b508:	444b      	add	r3, r9
   1b50a:	681e      	ldr	r6, [r3, #0]
   1b50c:	685f      	ldr	r7, [r3, #4]
   1b50e:	9b02      	ldr	r3, [sp, #8]
   1b510:	4463      	add	r3, ip
   1b512:	469b      	mov	fp, r3
   1b514:	00db      	lsls	r3, r3, #3
   1b516:	444b      	add	r3, r9
   1b518:	4698      	mov	r8, r3
   1b51a:	ab48      	add	r3, sp, #288	; 0x120
   1b51c:	469a      	mov	sl, r3
   1b51e:	4643      	mov	r3, r8
   1b520:	685c      	ldr	r4, [r3, #4]
   1b522:	681b      	ldr	r3, [r3, #0]
   1b524:	0018      	movs	r0, r3
   1b526:	0021      	movs	r1, r4
   1b528:	0032      	movs	r2, r6
   1b52a:	003b      	movs	r3, r7
   1b52c:	9000      	str	r0, [sp, #0]
   1b52e:	9101      	str	r1, [sp, #4]
   1b530:	f001 feac 	bl	1d28c <__aeabi_dadd>
   1b534:	0004      	movs	r4, r0
   1b536:	000d      	movs	r5, r1
   1b538:	0002      	movs	r2, r0
   1b53a:	000b      	movs	r3, r1
   1b53c:	9800      	ldr	r0, [sp, #0]
   1b53e:	9901      	ldr	r1, [sp, #4]
   1b540:	f003 f868 	bl	1e614 <__aeabi_dsub>
   1b544:	003b      	movs	r3, r7
   1b546:	0032      	movs	r2, r6
   1b548:	f001 fea0 	bl	1d28c <__aeabi_dadd>
   1b54c:	4643      	mov	r3, r8
   1b54e:	6098      	str	r0, [r3, #8]
   1b550:	60d9      	str	r1, [r3, #12]
   1b552:	601c      	str	r4, [r3, #0]
   1b554:	605d      	str	r5, [r3, #4]
   1b556:	2308      	movs	r3, #8
   1b558:	425b      	negs	r3, r3
   1b55a:	469c      	mov	ip, r3
   1b55c:	44e0      	add	r8, ip
   1b55e:	0026      	movs	r6, r4
   1b560:	002f      	movs	r7, r5
   1b562:	45c2      	cmp	sl, r8
   1b564:	d1db      	bne.n	1b51e <__kernel_rem_pio2+0x6a2>
   1b566:	9b02      	ldr	r3, [sp, #8]
   1b568:	2b01      	cmp	r3, #1
   1b56a:	dc00      	bgt.n	1b56e <__kernel_rem_pio2+0x6f2>
   1b56c:	e0ea      	b.n	1b744 <__kernel_rem_pio2+0x8c8>
   1b56e:	9b04      	ldr	r3, [sp, #16]
   1b570:	46c8      	mov	r8, r9
   1b572:	444b      	add	r3, r9
   1b574:	681e      	ldr	r6, [r3, #0]
   1b576:	685f      	ldr	r7, [r3, #4]
   1b578:	465b      	mov	r3, fp
   1b57a:	00db      	lsls	r3, r3, #3
   1b57c:	469b      	mov	fp, r3
   1b57e:	44d8      	add	r8, fp
   1b580:	4643      	mov	r3, r8
   1b582:	685c      	ldr	r4, [r3, #4]
   1b584:	681b      	ldr	r3, [r3, #0]
   1b586:	0018      	movs	r0, r3
   1b588:	0021      	movs	r1, r4
   1b58a:	0032      	movs	r2, r6
   1b58c:	003b      	movs	r3, r7
   1b58e:	9000      	str	r0, [sp, #0]
   1b590:	9101      	str	r1, [sp, #4]
   1b592:	f001 fe7b 	bl	1d28c <__aeabi_dadd>
   1b596:	0004      	movs	r4, r0
   1b598:	000d      	movs	r5, r1
   1b59a:	0002      	movs	r2, r0
   1b59c:	000b      	movs	r3, r1
   1b59e:	9800      	ldr	r0, [sp, #0]
   1b5a0:	9901      	ldr	r1, [sp, #4]
   1b5a2:	f003 f837 	bl	1e614 <__aeabi_dsub>
   1b5a6:	003b      	movs	r3, r7
   1b5a8:	0032      	movs	r2, r6
   1b5aa:	f001 fe6f 	bl	1d28c <__aeabi_dadd>
   1b5ae:	4643      	mov	r3, r8
   1b5b0:	6098      	str	r0, [r3, #8]
   1b5b2:	60d9      	str	r1, [r3, #12]
   1b5b4:	601c      	str	r4, [r3, #0]
   1b5b6:	605d      	str	r5, [r3, #4]
   1b5b8:	2308      	movs	r3, #8
   1b5ba:	425b      	negs	r3, r3
   1b5bc:	469c      	mov	ip, r3
   1b5be:	44e0      	add	r8, ip
   1b5c0:	0026      	movs	r6, r4
   1b5c2:	002f      	movs	r7, r5
   1b5c4:	45c1      	cmp	r9, r8
   1b5c6:	d1db      	bne.n	1b580 <__kernel_rem_pio2+0x704>
   1b5c8:	465d      	mov	r5, fp
   1b5ca:	2700      	movs	r7, #0
   1b5cc:	2400      	movs	r4, #0
   1b5ce:	3508      	adds	r5, #8
   1b5d0:	444d      	add	r5, r9
   1b5d2:	ae4c      	add	r6, sp, #304	; 0x130
   1b5d4:	682a      	ldr	r2, [r5, #0]
   1b5d6:	686b      	ldr	r3, [r5, #4]
   1b5d8:	0038      	movs	r0, r7
   1b5da:	0021      	movs	r1, r4
   1b5dc:	f001 fe56 	bl	1d28c <__aeabi_dadd>
   1b5e0:	3d08      	subs	r5, #8
   1b5e2:	0007      	movs	r7, r0
   1b5e4:	000c      	movs	r4, r1
   1b5e6:	42ae      	cmp	r6, r5
   1b5e8:	d1f4      	bne.n	1b5d4 <__kernel_rem_pio2+0x758>
   1b5ea:	9b03      	ldr	r3, [sp, #12]
   1b5ec:	2b00      	cmp	r3, #0
   1b5ee:	d100      	bne.n	1b5f2 <__kernel_rem_pio2+0x776>
   1b5f0:	e091      	b.n	1b716 <__kernel_rem_pio2+0x89a>
   1b5f2:	2180      	movs	r1, #128	; 0x80
   1b5f4:	9a07      	ldr	r2, [sp, #28]
   1b5f6:	9b4a      	ldr	r3, [sp, #296]	; 0x128
   1b5f8:	0609      	lsls	r1, r1, #24
   1b5fa:	6013      	str	r3, [r2, #0]
   1b5fc:	464b      	mov	r3, r9
   1b5fe:	468c      	mov	ip, r1
   1b600:	685b      	ldr	r3, [r3, #4]
   1b602:	4464      	add	r4, ip
   1b604:	4463      	add	r3, ip
   1b606:	6053      	str	r3, [r2, #4]
   1b608:	464b      	mov	r3, r9
   1b60a:	689b      	ldr	r3, [r3, #8]
   1b60c:	6117      	str	r7, [r2, #16]
   1b60e:	6093      	str	r3, [r2, #8]
   1b610:	464b      	mov	r3, r9
   1b612:	68db      	ldr	r3, [r3, #12]
   1b614:	6154      	str	r4, [r2, #20]
   1b616:	4463      	add	r3, ip
   1b618:	60d3      	str	r3, [r2, #12]
   1b61a:	e710      	b.n	1b43e <__kernel_rem_pio2+0x5c2>
   1b61c:	0002      	movs	r2, r0
   1b61e:	000b      	movs	r3, r1
   1b620:	9c07      	ldr	r4, [sp, #28]
   1b622:	6022      	str	r2, [r4, #0]
   1b624:	6063      	str	r3, [r4, #4]
   1b626:	000b      	movs	r3, r1
   1b628:	0002      	movs	r2, r0
   1b62a:	984a      	ldr	r0, [sp, #296]	; 0x128
   1b62c:	994b      	ldr	r1, [sp, #300]	; 0x12c
   1b62e:	f002 fff1 	bl	1e614 <__aeabi_dsub>
   1b632:	9b02      	ldr	r3, [sp, #8]
   1b634:	2b00      	cmp	r3, #0
   1b636:	dd00      	ble.n	1b63a <__kernel_rem_pio2+0x7be>
   1b638:	e746      	b.n	1b4c8 <__kernel_rem_pio2+0x64c>
   1b63a:	000b      	movs	r3, r1
   1b63c:	0002      	movs	r2, r0
   1b63e:	9907      	ldr	r1, [sp, #28]
   1b640:	608a      	str	r2, [r1, #8]
   1b642:	60cb      	str	r3, [r1, #12]
   1b644:	e6fb      	b.n	1b43e <__kernel_rem_pio2+0x5c2>
   1b646:	9b00      	ldr	r3, [sp, #0]
   1b648:	a90e      	add	r1, sp, #56	; 0x38
   1b64a:	1e5a      	subs	r2, r3, #1
   1b64c:	0092      	lsls	r2, r2, #2
   1b64e:	ab0e      	add	r3, sp, #56	; 0x38
   1b650:	589b      	ldr	r3, [r3, r2]
   1b652:	9305      	str	r3, [sp, #20]
   1b654:	025b      	lsls	r3, r3, #9
   1b656:	0a5b      	lsrs	r3, r3, #9
   1b658:	508b      	str	r3, [r1, r2]
   1b65a:	e584      	b.n	1b166 <__kernel_rem_pio2+0x2ea>
   1b65c:	9a00      	ldr	r2, [sp, #0]
   1b65e:	3301      	adds	r3, #1
   1b660:	429a      	cmp	r2, r3
   1b662:	d176      	bne.n	1b752 <__kernel_rem_pio2+0x8d6>
   1b664:	9b04      	ldr	r3, [sp, #16]
   1b666:	2b00      	cmp	r3, #0
   1b668:	dd00      	ble.n	1b66c <__kernel_rem_pio2+0x7f0>
   1b66a:	e56c      	b.n	1b146 <__kernel_rem_pio2+0x2ca>
   1b66c:	2d02      	cmp	r5, #2
   1b66e:	d000      	beq.n	1b672 <__kernel_rem_pio2+0x7f6>
   1b670:	e593      	b.n	1b19a <__kernel_rem_pio2+0x31e>
   1b672:	e62d      	b.n	1b2d0 <__kernel_rem_pio2+0x454>
   1b674:	4699      	mov	r9, r3
   1b676:	4643      	mov	r3, r8
   1b678:	9309      	str	r3, [sp, #36]	; 0x24
   1b67a:	9b04      	ldr	r3, [sp, #16]
   1b67c:	0030      	movs	r0, r6
   1b67e:	425a      	negs	r2, r3
   1b680:	0039      	movs	r1, r7
   1b682:	9503      	str	r5, [sp, #12]
   1b684:	f000 fc12 	bl	1beac <scalbn>
   1b688:	2200      	movs	r2, #0
   1b68a:	4b38      	ldr	r3, [pc, #224]	; (1b76c <__kernel_rem_pio2+0x8f0>)
   1b68c:	0004      	movs	r4, r0
   1b68e:	000d      	movs	r5, r1
   1b690:	f000 fe26 	bl	1c2e0 <__aeabi_dcmpge>
   1b694:	2800      	cmp	r0, #0
   1b696:	d030      	beq.n	1b6fa <__kernel_rem_pio2+0x87e>
   1b698:	4b35      	ldr	r3, [pc, #212]	; (1b770 <__kernel_rem_pio2+0x8f4>)
   1b69a:	2200      	movs	r2, #0
   1b69c:	0020      	movs	r0, r4
   1b69e:	0029      	movs	r1, r5
   1b6a0:	f002 fd38 	bl	1e114 <__aeabi_dmul>
   1b6a4:	f003 faec 	bl	1ec80 <__aeabi_d2iz>
   1b6a8:	464a      	mov	r2, r9
   1b6aa:	0006      	movs	r6, r0
   1b6ac:	0097      	lsls	r7, r2, #2
   1b6ae:	f003 fb1b 	bl	1ece8 <__aeabi_i2d>
   1b6b2:	2200      	movs	r2, #0
   1b6b4:	4b2d      	ldr	r3, [pc, #180]	; (1b76c <__kernel_rem_pio2+0x8f0>)
   1b6b6:	f002 fd2d 	bl	1e114 <__aeabi_dmul>
   1b6ba:	0002      	movs	r2, r0
   1b6bc:	000b      	movs	r3, r1
   1b6be:	0020      	movs	r0, r4
   1b6c0:	0029      	movs	r1, r5
   1b6c2:	f002 ffa7 	bl	1e614 <__aeabi_dsub>
   1b6c6:	f003 fadb 	bl	1ec80 <__aeabi_d2iz>
   1b6ca:	aa0e      	add	r2, sp, #56	; 0x38
   1b6cc:	51d0      	str	r0, [r2, r7]
   1b6ce:	464a      	mov	r2, r9
   1b6d0:	9b04      	ldr	r3, [sp, #16]
   1b6d2:	3201      	adds	r2, #1
   1b6d4:	3318      	adds	r3, #24
   1b6d6:	9202      	str	r2, [sp, #8]
   1b6d8:	9304      	str	r3, [sp, #16]
   1b6da:	0093      	lsls	r3, r2, #2
   1b6dc:	aa0e      	add	r2, sp, #56	; 0x38
   1b6de:	50d6      	str	r6, [r2, r3]
   1b6e0:	e61c      	b.n	1b31c <__kernel_rem_pio2+0x4a0>
   1b6e2:	2201      	movs	r2, #1
   1b6e4:	e587      	b.n	1b1f6 <__kernel_rem_pio2+0x37a>
   1b6e6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
   1b6e8:	2b02      	cmp	r3, #2
   1b6ea:	dc25      	bgt.n	1b738 <__kernel_rem_pio2+0x8bc>
   1b6ec:	2b00      	cmp	r3, #0
   1b6ee:	dc38      	bgt.n	1b762 <__kernel_rem_pio2+0x8e6>
   1b6f0:	d000      	beq.n	1b6f4 <__kernel_rem_pio2+0x878>
   1b6f2:	e6a4      	b.n	1b43e <__kernel_rem_pio2+0x5c2>
   1b6f4:	2700      	movs	r7, #0
   1b6f6:	2400      	movs	r4, #0
   1b6f8:	e695      	b.n	1b426 <__kernel_rem_pio2+0x5aa>
   1b6fa:	464b      	mov	r3, r9
   1b6fc:	0020      	movs	r0, r4
   1b6fe:	0029      	movs	r1, r5
   1b700:	009e      	lsls	r6, r3, #2
   1b702:	f003 fabd 	bl	1ec80 <__aeabi_d2iz>
   1b706:	ab0e      	add	r3, sp, #56	; 0x38
   1b708:	5198      	str	r0, [r3, r6]
   1b70a:	464b      	mov	r3, r9
   1b70c:	9302      	str	r3, [sp, #8]
   1b70e:	e605      	b.n	1b31c <__kernel_rem_pio2+0x4a0>
   1b710:	ab72      	add	r3, sp, #456	; 0x1c8
   1b712:	9308      	str	r3, [sp, #32]
   1b714:	e42d      	b.n	1af72 <__kernel_rem_pio2+0xf6>
   1b716:	9907      	ldr	r1, [sp, #28]
   1b718:	9a4a      	ldr	r2, [sp, #296]	; 0x128
   1b71a:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
   1b71c:	600a      	str	r2, [r1, #0]
   1b71e:	604b      	str	r3, [r1, #4]
   1b720:	464b      	mov	r3, r9
   1b722:	689a      	ldr	r2, [r3, #8]
   1b724:	68db      	ldr	r3, [r3, #12]
   1b726:	9200      	str	r2, [sp, #0]
   1b728:	9301      	str	r3, [sp, #4]
   1b72a:	608a      	str	r2, [r1, #8]
   1b72c:	60cb      	str	r3, [r1, #12]
   1b72e:	003a      	movs	r2, r7
   1b730:	0023      	movs	r3, r4
   1b732:	610a      	str	r2, [r1, #16]
   1b734:	614b      	str	r3, [r1, #20]
   1b736:	e682      	b.n	1b43e <__kernel_rem_pio2+0x5c2>
   1b738:	ab4a      	add	r3, sp, #296	; 0x128
   1b73a:	4699      	mov	r9, r3
   1b73c:	9ba4      	ldr	r3, [sp, #656]	; 0x290
   1b73e:	2b03      	cmp	r3, #3
   1b740:	d000      	beq.n	1b744 <__kernel_rem_pio2+0x8c8>
   1b742:	e67c      	b.n	1b43e <__kernel_rem_pio2+0x5c2>
   1b744:	2700      	movs	r7, #0
   1b746:	2400      	movs	r4, #0
   1b748:	e74f      	b.n	1b5ea <__kernel_rem_pio2+0x76e>
   1b74a:	9a00      	ldr	r2, [sp, #0]
   1b74c:	2301      	movs	r3, #1
   1b74e:	2a01      	cmp	r2, #1
   1b750:	dd88      	ble.n	1b664 <__kernel_rem_pio2+0x7e8>
   1b752:	0099      	lsls	r1, r3, #2
   1b754:	aa0e      	add	r2, sp, #56	; 0x38
   1b756:	5854      	ldr	r4, [r2, r1]
   1b758:	2c00      	cmp	r4, #0
   1b75a:	d100      	bne.n	1b75e <__kernel_rem_pio2+0x8e2>
   1b75c:	e77e      	b.n	1b65c <__kernel_rem_pio2+0x7e0>
   1b75e:	1c5a      	adds	r2, r3, #1
   1b760:	e4aa      	b.n	1b0b8 <__kernel_rem_pio2+0x23c>
   1b762:	2000      	movs	r0, #0
   1b764:	2100      	movs	r1, #0
   1b766:	e69c      	b.n	1b4a2 <__kernel_rem_pio2+0x626>
   1b768:	1fffffff 	.word	0x1fffffff
   1b76c:	41700000 	.word	0x41700000
   1b770:	3e700000 	.word	0x3e700000

0001b774 <__kernel_sin>:
   1b774:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b776:	46ce      	mov	lr, r9
   1b778:	4647      	mov	r7, r8
   1b77a:	b580      	push	{r7, lr}
   1b77c:	b087      	sub	sp, #28
   1b77e:	9200      	str	r2, [sp, #0]
   1b780:	9301      	str	r3, [sp, #4]
   1b782:	4a46      	ldr	r2, [pc, #280]	; (1b89c <__kernel_sin+0x128>)
   1b784:	004b      	lsls	r3, r1, #1
   1b786:	4681      	mov	r9, r0
   1b788:	4688      	mov	r8, r1
   1b78a:	085b      	lsrs	r3, r3, #1
   1b78c:	4293      	cmp	r3, r2
   1b78e:	dc05      	bgt.n	1b79c <__kernel_sin+0x28>
   1b790:	f003 fa76 	bl	1ec80 <__aeabi_d2iz>
   1b794:	4641      	mov	r1, r8
   1b796:	1e03      	subs	r3, r0, #0
   1b798:	4648      	mov	r0, r9
   1b79a:	d066      	beq.n	1b86a <__kernel_sin+0xf6>
   1b79c:	464a      	mov	r2, r9
   1b79e:	4643      	mov	r3, r8
   1b7a0:	4648      	mov	r0, r9
   1b7a2:	4641      	mov	r1, r8
   1b7a4:	f002 fcb6 	bl	1e114 <__aeabi_dmul>
   1b7a8:	0004      	movs	r4, r0
   1b7aa:	000d      	movs	r5, r1
   1b7ac:	0002      	movs	r2, r0
   1b7ae:	000b      	movs	r3, r1
   1b7b0:	4648      	mov	r0, r9
   1b7b2:	4641      	mov	r1, r8
   1b7b4:	f002 fcae 	bl	1e114 <__aeabi_dmul>
   1b7b8:	4a39      	ldr	r2, [pc, #228]	; (1b8a0 <__kernel_sin+0x12c>)
   1b7ba:	4b3a      	ldr	r3, [pc, #232]	; (1b8a4 <__kernel_sin+0x130>)
   1b7bc:	0006      	movs	r6, r0
   1b7be:	000f      	movs	r7, r1
   1b7c0:	0020      	movs	r0, r4
   1b7c2:	0029      	movs	r1, r5
   1b7c4:	f002 fca6 	bl	1e114 <__aeabi_dmul>
   1b7c8:	4a37      	ldr	r2, [pc, #220]	; (1b8a8 <__kernel_sin+0x134>)
   1b7ca:	4b38      	ldr	r3, [pc, #224]	; (1b8ac <__kernel_sin+0x138>)
   1b7cc:	f002 ff22 	bl	1e614 <__aeabi_dsub>
   1b7d0:	0022      	movs	r2, r4
   1b7d2:	002b      	movs	r3, r5
   1b7d4:	f002 fc9e 	bl	1e114 <__aeabi_dmul>
   1b7d8:	4a35      	ldr	r2, [pc, #212]	; (1b8b0 <__kernel_sin+0x13c>)
   1b7da:	4b36      	ldr	r3, [pc, #216]	; (1b8b4 <__kernel_sin+0x140>)
   1b7dc:	f001 fd56 	bl	1d28c <__aeabi_dadd>
   1b7e0:	0022      	movs	r2, r4
   1b7e2:	002b      	movs	r3, r5
   1b7e4:	f002 fc96 	bl	1e114 <__aeabi_dmul>
   1b7e8:	4a33      	ldr	r2, [pc, #204]	; (1b8b8 <__kernel_sin+0x144>)
   1b7ea:	4b34      	ldr	r3, [pc, #208]	; (1b8bc <__kernel_sin+0x148>)
   1b7ec:	f002 ff12 	bl	1e614 <__aeabi_dsub>
   1b7f0:	0022      	movs	r2, r4
   1b7f2:	002b      	movs	r3, r5
   1b7f4:	f002 fc8e 	bl	1e114 <__aeabi_dmul>
   1b7f8:	4b31      	ldr	r3, [pc, #196]	; (1b8c0 <__kernel_sin+0x14c>)
   1b7fa:	4a32      	ldr	r2, [pc, #200]	; (1b8c4 <__kernel_sin+0x150>)
   1b7fc:	f001 fd46 	bl	1d28c <__aeabi_dadd>
   1b800:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b802:	9002      	str	r0, [sp, #8]
   1b804:	9103      	str	r1, [sp, #12]
   1b806:	2b00      	cmp	r3, #0
   1b808:	d034      	beq.n	1b874 <__kernel_sin+0x100>
   1b80a:	9800      	ldr	r0, [sp, #0]
   1b80c:	9901      	ldr	r1, [sp, #4]
   1b80e:	2200      	movs	r2, #0
   1b810:	4b2d      	ldr	r3, [pc, #180]	; (1b8c8 <__kernel_sin+0x154>)
   1b812:	f002 fc7f 	bl	1e114 <__aeabi_dmul>
   1b816:	9a02      	ldr	r2, [sp, #8]
   1b818:	9b03      	ldr	r3, [sp, #12]
   1b81a:	9004      	str	r0, [sp, #16]
   1b81c:	9105      	str	r1, [sp, #20]
   1b81e:	0030      	movs	r0, r6
   1b820:	0039      	movs	r1, r7
   1b822:	f002 fc77 	bl	1e114 <__aeabi_dmul>
   1b826:	0002      	movs	r2, r0
   1b828:	000b      	movs	r3, r1
   1b82a:	9804      	ldr	r0, [sp, #16]
   1b82c:	9905      	ldr	r1, [sp, #20]
   1b82e:	f002 fef1 	bl	1e614 <__aeabi_dsub>
   1b832:	0022      	movs	r2, r4
   1b834:	002b      	movs	r3, r5
   1b836:	f002 fc6d 	bl	1e114 <__aeabi_dmul>
   1b83a:	9a00      	ldr	r2, [sp, #0]
   1b83c:	9b01      	ldr	r3, [sp, #4]
   1b83e:	f002 fee9 	bl	1e614 <__aeabi_dsub>
   1b842:	4a22      	ldr	r2, [pc, #136]	; (1b8cc <__kernel_sin+0x158>)
   1b844:	0004      	movs	r4, r0
   1b846:	000d      	movs	r5, r1
   1b848:	4b21      	ldr	r3, [pc, #132]	; (1b8d0 <__kernel_sin+0x15c>)
   1b84a:	0030      	movs	r0, r6
   1b84c:	0039      	movs	r1, r7
   1b84e:	f002 fc61 	bl	1e114 <__aeabi_dmul>
   1b852:	0002      	movs	r2, r0
   1b854:	000b      	movs	r3, r1
   1b856:	0020      	movs	r0, r4
   1b858:	0029      	movs	r1, r5
   1b85a:	f001 fd17 	bl	1d28c <__aeabi_dadd>
   1b85e:	0002      	movs	r2, r0
   1b860:	000b      	movs	r3, r1
   1b862:	4648      	mov	r0, r9
   1b864:	4641      	mov	r1, r8
   1b866:	f002 fed5 	bl	1e614 <__aeabi_dsub>
   1b86a:	b007      	add	sp, #28
   1b86c:	bc0c      	pop	{r2, r3}
   1b86e:	4690      	mov	r8, r2
   1b870:	4699      	mov	r9, r3
   1b872:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b874:	0002      	movs	r2, r0
   1b876:	000b      	movs	r3, r1
   1b878:	0020      	movs	r0, r4
   1b87a:	0029      	movs	r1, r5
   1b87c:	f002 fc4a 	bl	1e114 <__aeabi_dmul>
   1b880:	4a12      	ldr	r2, [pc, #72]	; (1b8cc <__kernel_sin+0x158>)
   1b882:	4b13      	ldr	r3, [pc, #76]	; (1b8d0 <__kernel_sin+0x15c>)
   1b884:	f002 fec6 	bl	1e614 <__aeabi_dsub>
   1b888:	0032      	movs	r2, r6
   1b88a:	003b      	movs	r3, r7
   1b88c:	f002 fc42 	bl	1e114 <__aeabi_dmul>
   1b890:	464a      	mov	r2, r9
   1b892:	4643      	mov	r3, r8
   1b894:	f001 fcfa 	bl	1d28c <__aeabi_dadd>
   1b898:	e7e7      	b.n	1b86a <__kernel_sin+0xf6>
   1b89a:	46c0      	nop			; (mov r8, r8)
   1b89c:	3e3fffff 	.word	0x3e3fffff
   1b8a0:	5acfd57c 	.word	0x5acfd57c
   1b8a4:	3de5d93a 	.word	0x3de5d93a
   1b8a8:	8a2b9ceb 	.word	0x8a2b9ceb
   1b8ac:	3e5ae5e6 	.word	0x3e5ae5e6
   1b8b0:	57b1fe7d 	.word	0x57b1fe7d
   1b8b4:	3ec71de3 	.word	0x3ec71de3
   1b8b8:	19c161d5 	.word	0x19c161d5
   1b8bc:	3f2a01a0 	.word	0x3f2a01a0
   1b8c0:	3f811111 	.word	0x3f811111
   1b8c4:	1110f8a6 	.word	0x1110f8a6
   1b8c8:	3fe00000 	.word	0x3fe00000
   1b8cc:	55555549 	.word	0x55555549
   1b8d0:	3fc55555 	.word	0x3fc55555

0001b8d4 <atan>:
   1b8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b8d6:	464e      	mov	r6, r9
   1b8d8:	4657      	mov	r7, sl
   1b8da:	4645      	mov	r5, r8
   1b8dc:	46de      	mov	lr, fp
   1b8de:	4ba4      	ldr	r3, [pc, #656]	; (1bb70 <atan+0x29c>)
   1b8e0:	b5e0      	push	{r5, r6, r7, lr}
   1b8e2:	004e      	lsls	r6, r1, #1
   1b8e4:	4680      	mov	r8, r0
   1b8e6:	4689      	mov	r9, r1
   1b8e8:	468a      	mov	sl, r1
   1b8ea:	0876      	lsrs	r6, r6, #1
   1b8ec:	429e      	cmp	r6, r3
   1b8ee:	dd0c      	ble.n	1b90a <atan+0x36>
   1b8f0:	4ba0      	ldr	r3, [pc, #640]	; (1bb74 <atan+0x2a0>)
   1b8f2:	429e      	cmp	r6, r3
   1b8f4:	dd00      	ble.n	1b8f8 <atan+0x24>
   1b8f6:	e0a3      	b.n	1ba40 <atan+0x16c>
   1b8f8:	d100      	bne.n	1b8fc <atan+0x28>
   1b8fa:	e09e      	b.n	1ba3a <atan+0x166>
   1b8fc:	4653      	mov	r3, sl
   1b8fe:	2b00      	cmp	r3, #0
   1b900:	dc00      	bgt.n	1b904 <atan+0x30>
   1b902:	e0e1      	b.n	1bac8 <atan+0x1f4>
   1b904:	4b9c      	ldr	r3, [pc, #624]	; (1bb78 <atan+0x2a4>)
   1b906:	4a9d      	ldr	r2, [pc, #628]	; (1bb7c <atan+0x2a8>)
   1b908:	e0a2      	b.n	1ba50 <atan+0x17c>
   1b90a:	4b9d      	ldr	r3, [pc, #628]	; (1bb80 <atan+0x2ac>)
   1b90c:	429e      	cmp	r6, r3
   1b90e:	dd00      	ble.n	1b912 <atan+0x3e>
   1b910:	e0b4      	b.n	1ba7c <atan+0x1a8>
   1b912:	4b9c      	ldr	r3, [pc, #624]	; (1bb84 <atan+0x2b0>)
   1b914:	429e      	cmp	r6, r3
   1b916:	dc00      	bgt.n	1b91a <atan+0x46>
   1b918:	e0a2      	b.n	1ba60 <atan+0x18c>
   1b91a:	2301      	movs	r3, #1
   1b91c:	425b      	negs	r3, r3
   1b91e:	469b      	mov	fp, r3
   1b920:	4642      	mov	r2, r8
   1b922:	464b      	mov	r3, r9
   1b924:	4640      	mov	r0, r8
   1b926:	4649      	mov	r1, r9
   1b928:	f002 fbf4 	bl	1e114 <__aeabi_dmul>
   1b92c:	0002      	movs	r2, r0
   1b92e:	000b      	movs	r3, r1
   1b930:	0006      	movs	r6, r0
   1b932:	000f      	movs	r7, r1
   1b934:	f002 fbee 	bl	1e114 <__aeabi_dmul>
   1b938:	0004      	movs	r4, r0
   1b93a:	000d      	movs	r5, r1
   1b93c:	4a92      	ldr	r2, [pc, #584]	; (1bb88 <atan+0x2b4>)
   1b93e:	4b93      	ldr	r3, [pc, #588]	; (1bb8c <atan+0x2b8>)
   1b940:	f002 fbe8 	bl	1e114 <__aeabi_dmul>
   1b944:	4a92      	ldr	r2, [pc, #584]	; (1bb90 <atan+0x2bc>)
   1b946:	4b93      	ldr	r3, [pc, #588]	; (1bb94 <atan+0x2c0>)
   1b948:	f001 fca0 	bl	1d28c <__aeabi_dadd>
   1b94c:	0022      	movs	r2, r4
   1b94e:	002b      	movs	r3, r5
   1b950:	f002 fbe0 	bl	1e114 <__aeabi_dmul>
   1b954:	4a90      	ldr	r2, [pc, #576]	; (1bb98 <atan+0x2c4>)
   1b956:	4b91      	ldr	r3, [pc, #580]	; (1bb9c <atan+0x2c8>)
   1b958:	f001 fc98 	bl	1d28c <__aeabi_dadd>
   1b95c:	0022      	movs	r2, r4
   1b95e:	002b      	movs	r3, r5
   1b960:	f002 fbd8 	bl	1e114 <__aeabi_dmul>
   1b964:	4a8e      	ldr	r2, [pc, #568]	; (1bba0 <atan+0x2cc>)
   1b966:	4b8f      	ldr	r3, [pc, #572]	; (1bba4 <atan+0x2d0>)
   1b968:	f001 fc90 	bl	1d28c <__aeabi_dadd>
   1b96c:	0022      	movs	r2, r4
   1b96e:	002b      	movs	r3, r5
   1b970:	f002 fbd0 	bl	1e114 <__aeabi_dmul>
   1b974:	4a8c      	ldr	r2, [pc, #560]	; (1bba8 <atan+0x2d4>)
   1b976:	4b8d      	ldr	r3, [pc, #564]	; (1bbac <atan+0x2d8>)
   1b978:	f001 fc88 	bl	1d28c <__aeabi_dadd>
   1b97c:	0022      	movs	r2, r4
   1b97e:	002b      	movs	r3, r5
   1b980:	f002 fbc8 	bl	1e114 <__aeabi_dmul>
   1b984:	4a8a      	ldr	r2, [pc, #552]	; (1bbb0 <atan+0x2dc>)
   1b986:	4b8b      	ldr	r3, [pc, #556]	; (1bbb4 <atan+0x2e0>)
   1b988:	f001 fc80 	bl	1d28c <__aeabi_dadd>
   1b98c:	0032      	movs	r2, r6
   1b98e:	003b      	movs	r3, r7
   1b990:	f002 fbc0 	bl	1e114 <__aeabi_dmul>
   1b994:	4a88      	ldr	r2, [pc, #544]	; (1bbb8 <atan+0x2e4>)
   1b996:	4b89      	ldr	r3, [pc, #548]	; (1bbbc <atan+0x2e8>)
   1b998:	0006      	movs	r6, r0
   1b99a:	000f      	movs	r7, r1
   1b99c:	0020      	movs	r0, r4
   1b99e:	0029      	movs	r1, r5
   1b9a0:	f002 fbb8 	bl	1e114 <__aeabi_dmul>
   1b9a4:	4a86      	ldr	r2, [pc, #536]	; (1bbc0 <atan+0x2ec>)
   1b9a6:	4b87      	ldr	r3, [pc, #540]	; (1bbc4 <atan+0x2f0>)
   1b9a8:	f002 fe34 	bl	1e614 <__aeabi_dsub>
   1b9ac:	0022      	movs	r2, r4
   1b9ae:	002b      	movs	r3, r5
   1b9b0:	f002 fbb0 	bl	1e114 <__aeabi_dmul>
   1b9b4:	4a84      	ldr	r2, [pc, #528]	; (1bbc8 <atan+0x2f4>)
   1b9b6:	4b85      	ldr	r3, [pc, #532]	; (1bbcc <atan+0x2f8>)
   1b9b8:	f002 fe2c 	bl	1e614 <__aeabi_dsub>
   1b9bc:	0022      	movs	r2, r4
   1b9be:	002b      	movs	r3, r5
   1b9c0:	f002 fba8 	bl	1e114 <__aeabi_dmul>
   1b9c4:	4a82      	ldr	r2, [pc, #520]	; (1bbd0 <atan+0x2fc>)
   1b9c6:	4b83      	ldr	r3, [pc, #524]	; (1bbd4 <atan+0x300>)
   1b9c8:	f002 fe24 	bl	1e614 <__aeabi_dsub>
   1b9cc:	0022      	movs	r2, r4
   1b9ce:	002b      	movs	r3, r5
   1b9d0:	f002 fba0 	bl	1e114 <__aeabi_dmul>
   1b9d4:	4a80      	ldr	r2, [pc, #512]	; (1bbd8 <atan+0x304>)
   1b9d6:	4b81      	ldr	r3, [pc, #516]	; (1bbdc <atan+0x308>)
   1b9d8:	f002 fe1c 	bl	1e614 <__aeabi_dsub>
   1b9dc:	0022      	movs	r2, r4
   1b9de:	002b      	movs	r3, r5
   1b9e0:	f002 fb98 	bl	1e114 <__aeabi_dmul>
   1b9e4:	000b      	movs	r3, r1
   1b9e6:	4659      	mov	r1, fp
   1b9e8:	0002      	movs	r2, r0
   1b9ea:	3101      	adds	r1, #1
   1b9ec:	d100      	bne.n	1b9f0 <atan+0x11c>
   1b9ee:	e06e      	b.n	1bace <atan+0x1fa>
   1b9f0:	4659      	mov	r1, fp
   1b9f2:	0030      	movs	r0, r6
   1b9f4:	00cc      	lsls	r4, r1, #3
   1b9f6:	0039      	movs	r1, r7
   1b9f8:	f001 fc48 	bl	1d28c <__aeabi_dadd>
   1b9fc:	4642      	mov	r2, r8
   1b9fe:	464b      	mov	r3, r9
   1ba00:	f002 fb88 	bl	1e114 <__aeabi_dmul>
   1ba04:	4d76      	ldr	r5, [pc, #472]	; (1bbe0 <atan+0x30c>)
   1ba06:	4b77      	ldr	r3, [pc, #476]	; (1bbe4 <atan+0x310>)
   1ba08:	192d      	adds	r5, r5, r4
   1ba0a:	191c      	adds	r4, r3, r4
   1ba0c:	6822      	ldr	r2, [r4, #0]
   1ba0e:	6863      	ldr	r3, [r4, #4]
   1ba10:	f002 fe00 	bl	1e614 <__aeabi_dsub>
   1ba14:	4642      	mov	r2, r8
   1ba16:	464b      	mov	r3, r9
   1ba18:	f002 fdfc 	bl	1e614 <__aeabi_dsub>
   1ba1c:	0002      	movs	r2, r0
   1ba1e:	000b      	movs	r3, r1
   1ba20:	6828      	ldr	r0, [r5, #0]
   1ba22:	6869      	ldr	r1, [r5, #4]
   1ba24:	f002 fdf6 	bl	1e614 <__aeabi_dsub>
   1ba28:	0003      	movs	r3, r0
   1ba2a:	4650      	mov	r0, sl
   1ba2c:	000a      	movs	r2, r1
   1ba2e:	2800      	cmp	r0, #0
   1ba30:	da0e      	bge.n	1ba50 <atan+0x17c>
   1ba32:	2280      	movs	r2, #128	; 0x80
   1ba34:	0612      	lsls	r2, r2, #24
   1ba36:	188a      	adds	r2, r1, r2
   1ba38:	e00a      	b.n	1ba50 <atan+0x17c>
   1ba3a:	2800      	cmp	r0, #0
   1ba3c:	d100      	bne.n	1ba40 <atan+0x16c>
   1ba3e:	e75d      	b.n	1b8fc <atan+0x28>
   1ba40:	4642      	mov	r2, r8
   1ba42:	464b      	mov	r3, r9
   1ba44:	4640      	mov	r0, r8
   1ba46:	4649      	mov	r1, r9
   1ba48:	f001 fc20 	bl	1d28c <__aeabi_dadd>
   1ba4c:	0003      	movs	r3, r0
   1ba4e:	000a      	movs	r2, r1
   1ba50:	0018      	movs	r0, r3
   1ba52:	0011      	movs	r1, r2
   1ba54:	bc3c      	pop	{r2, r3, r4, r5}
   1ba56:	4690      	mov	r8, r2
   1ba58:	4699      	mov	r9, r3
   1ba5a:	46a2      	mov	sl, r4
   1ba5c:	46ab      	mov	fp, r5
   1ba5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ba60:	4a61      	ldr	r2, [pc, #388]	; (1bbe8 <atan+0x314>)
   1ba62:	4b62      	ldr	r3, [pc, #392]	; (1bbec <atan+0x318>)
   1ba64:	f001 fc12 	bl	1d28c <__aeabi_dadd>
   1ba68:	2200      	movs	r2, #0
   1ba6a:	4b61      	ldr	r3, [pc, #388]	; (1bbf0 <atan+0x31c>)
   1ba6c:	f000 fc2e 	bl	1c2cc <__aeabi_dcmpgt>
   1ba70:	2800      	cmp	r0, #0
   1ba72:	d100      	bne.n	1ba76 <atan+0x1a2>
   1ba74:	e751      	b.n	1b91a <atan+0x46>
   1ba76:	4643      	mov	r3, r8
   1ba78:	464a      	mov	r2, r9
   1ba7a:	e7e9      	b.n	1ba50 <atan+0x17c>
   1ba7c:	f000 f8c6 	bl	1bc0c <fabs>
   1ba80:	4b5c      	ldr	r3, [pc, #368]	; (1bbf4 <atan+0x320>)
   1ba82:	0004      	movs	r4, r0
   1ba84:	000d      	movs	r5, r1
   1ba86:	429e      	cmp	r6, r3
   1ba88:	dc32      	bgt.n	1baf0 <atan+0x21c>
   1ba8a:	4b5b      	ldr	r3, [pc, #364]	; (1bbf8 <atan+0x324>)
   1ba8c:	429e      	cmp	r6, r3
   1ba8e:	dc58      	bgt.n	1bb42 <atan+0x26e>
   1ba90:	0002      	movs	r2, r0
   1ba92:	000b      	movs	r3, r1
   1ba94:	f001 fbfa 	bl	1d28c <__aeabi_dadd>
   1ba98:	2200      	movs	r2, #0
   1ba9a:	4b55      	ldr	r3, [pc, #340]	; (1bbf0 <atan+0x31c>)
   1ba9c:	f002 fdba 	bl	1e614 <__aeabi_dsub>
   1baa0:	2380      	movs	r3, #128	; 0x80
   1baa2:	0006      	movs	r6, r0
   1baa4:	000f      	movs	r7, r1
   1baa6:	2200      	movs	r2, #0
   1baa8:	05db      	lsls	r3, r3, #23
   1baaa:	0020      	movs	r0, r4
   1baac:	0029      	movs	r1, r5
   1baae:	f001 fbed 	bl	1d28c <__aeabi_dadd>
   1bab2:	000b      	movs	r3, r1
   1bab4:	0002      	movs	r2, r0
   1bab6:	0039      	movs	r1, r7
   1bab8:	0030      	movs	r0, r6
   1baba:	f001 fef7 	bl	1d8ac <__aeabi_ddiv>
   1babe:	2300      	movs	r3, #0
   1bac0:	4680      	mov	r8, r0
   1bac2:	4689      	mov	r9, r1
   1bac4:	469b      	mov	fp, r3
   1bac6:	e72b      	b.n	1b920 <atan+0x4c>
   1bac8:	4b2b      	ldr	r3, [pc, #172]	; (1bb78 <atan+0x2a4>)
   1baca:	4a4c      	ldr	r2, [pc, #304]	; (1bbfc <atan+0x328>)
   1bacc:	e7c0      	b.n	1ba50 <atan+0x17c>
   1bace:	0030      	movs	r0, r6
   1bad0:	0039      	movs	r1, r7
   1bad2:	f001 fbdb 	bl	1d28c <__aeabi_dadd>
   1bad6:	4642      	mov	r2, r8
   1bad8:	464b      	mov	r3, r9
   1bada:	f002 fb1b 	bl	1e114 <__aeabi_dmul>
   1bade:	0002      	movs	r2, r0
   1bae0:	000b      	movs	r3, r1
   1bae2:	4640      	mov	r0, r8
   1bae4:	4649      	mov	r1, r9
   1bae6:	f002 fd95 	bl	1e614 <__aeabi_dsub>
   1baea:	0003      	movs	r3, r0
   1baec:	000a      	movs	r2, r1
   1baee:	e7af      	b.n	1ba50 <atan+0x17c>
   1baf0:	4b43      	ldr	r3, [pc, #268]	; (1bc00 <atan+0x32c>)
   1baf2:	429e      	cmp	r6, r3
   1baf4:	dc1a      	bgt.n	1bb2c <atan+0x258>
   1baf6:	2200      	movs	r2, #0
   1baf8:	4b42      	ldr	r3, [pc, #264]	; (1bc04 <atan+0x330>)
   1bafa:	f002 fd8b 	bl	1e614 <__aeabi_dsub>
   1bafe:	2200      	movs	r2, #0
   1bb00:	0006      	movs	r6, r0
   1bb02:	000f      	movs	r7, r1
   1bb04:	4b3f      	ldr	r3, [pc, #252]	; (1bc04 <atan+0x330>)
   1bb06:	0020      	movs	r0, r4
   1bb08:	0029      	movs	r1, r5
   1bb0a:	f002 fb03 	bl	1e114 <__aeabi_dmul>
   1bb0e:	2200      	movs	r2, #0
   1bb10:	4b37      	ldr	r3, [pc, #220]	; (1bbf0 <atan+0x31c>)
   1bb12:	f001 fbbb 	bl	1d28c <__aeabi_dadd>
   1bb16:	000b      	movs	r3, r1
   1bb18:	0002      	movs	r2, r0
   1bb1a:	0039      	movs	r1, r7
   1bb1c:	0030      	movs	r0, r6
   1bb1e:	f001 fec5 	bl	1d8ac <__aeabi_ddiv>
   1bb22:	2302      	movs	r3, #2
   1bb24:	4680      	mov	r8, r0
   1bb26:	4689      	mov	r9, r1
   1bb28:	469b      	mov	fp, r3
   1bb2a:	e6f9      	b.n	1b920 <atan+0x4c>
   1bb2c:	000b      	movs	r3, r1
   1bb2e:	0002      	movs	r2, r0
   1bb30:	4935      	ldr	r1, [pc, #212]	; (1bc08 <atan+0x334>)
   1bb32:	2000      	movs	r0, #0
   1bb34:	f001 feba 	bl	1d8ac <__aeabi_ddiv>
   1bb38:	2303      	movs	r3, #3
   1bb3a:	4680      	mov	r8, r0
   1bb3c:	4689      	mov	r9, r1
   1bb3e:	469b      	mov	fp, r3
   1bb40:	e6ee      	b.n	1b920 <atan+0x4c>
   1bb42:	2200      	movs	r2, #0
   1bb44:	4b2a      	ldr	r3, [pc, #168]	; (1bbf0 <atan+0x31c>)
   1bb46:	f002 fd65 	bl	1e614 <__aeabi_dsub>
   1bb4a:	2200      	movs	r2, #0
   1bb4c:	0006      	movs	r6, r0
   1bb4e:	000f      	movs	r7, r1
   1bb50:	4b27      	ldr	r3, [pc, #156]	; (1bbf0 <atan+0x31c>)
   1bb52:	0020      	movs	r0, r4
   1bb54:	0029      	movs	r1, r5
   1bb56:	f001 fb99 	bl	1d28c <__aeabi_dadd>
   1bb5a:	000b      	movs	r3, r1
   1bb5c:	0002      	movs	r2, r0
   1bb5e:	0039      	movs	r1, r7
   1bb60:	0030      	movs	r0, r6
   1bb62:	f001 fea3 	bl	1d8ac <__aeabi_ddiv>
   1bb66:	2301      	movs	r3, #1
   1bb68:	4680      	mov	r8, r0
   1bb6a:	4689      	mov	r9, r1
   1bb6c:	469b      	mov	fp, r3
   1bb6e:	e6d7      	b.n	1b920 <atan+0x4c>
   1bb70:	440fffff 	.word	0x440fffff
   1bb74:	7ff00000 	.word	0x7ff00000
   1bb78:	54442d18 	.word	0x54442d18
   1bb7c:	3ff921fb 	.word	0x3ff921fb
   1bb80:	3fdbffff 	.word	0x3fdbffff
   1bb84:	3e1fffff 	.word	0x3e1fffff
   1bb88:	e322da11 	.word	0xe322da11
   1bb8c:	3f90ad3a 	.word	0x3f90ad3a
   1bb90:	24760deb 	.word	0x24760deb
   1bb94:	3fa97b4b 	.word	0x3fa97b4b
   1bb98:	a0d03d51 	.word	0xa0d03d51
   1bb9c:	3fb10d66 	.word	0x3fb10d66
   1bba0:	c54c206e 	.word	0xc54c206e
   1bba4:	3fb745cd 	.word	0x3fb745cd
   1bba8:	920083ff 	.word	0x920083ff
   1bbac:	3fc24924 	.word	0x3fc24924
   1bbb0:	5555550d 	.word	0x5555550d
   1bbb4:	3fd55555 	.word	0x3fd55555
   1bbb8:	2c6a6c2f 	.word	0x2c6a6c2f
   1bbbc:	bfa2b444 	.word	0xbfa2b444
   1bbc0:	52defd9a 	.word	0x52defd9a
   1bbc4:	3fadde2d 	.word	0x3fadde2d
   1bbc8:	af749a6d 	.word	0xaf749a6d
   1bbcc:	3fb3b0f2 	.word	0x3fb3b0f2
   1bbd0:	fe231671 	.word	0xfe231671
   1bbd4:	3fbc71c6 	.word	0x3fbc71c6
   1bbd8:	9998ebc4 	.word	0x9998ebc4
   1bbdc:	3fc99999 	.word	0x3fc99999
   1bbe0:	00025040 	.word	0x00025040
   1bbe4:	00025060 	.word	0x00025060
   1bbe8:	8800759c 	.word	0x8800759c
   1bbec:	7e37e43c 	.word	0x7e37e43c
   1bbf0:	3ff00000 	.word	0x3ff00000
   1bbf4:	3ff2ffff 	.word	0x3ff2ffff
   1bbf8:	3fe5ffff 	.word	0x3fe5ffff
   1bbfc:	bff921fb 	.word	0xbff921fb
   1bc00:	40037fff 	.word	0x40037fff
   1bc04:	3ff80000 	.word	0x3ff80000
   1bc08:	bff00000 	.word	0xbff00000

0001bc0c <fabs>:
   1bc0c:	0049      	lsls	r1, r1, #1
   1bc0e:	084b      	lsrs	r3, r1, #1
   1bc10:	0019      	movs	r1, r3
   1bc12:	4770      	bx	lr

0001bc14 <finite>:
   1bc14:	4b03      	ldr	r3, [pc, #12]	; (1bc24 <finite+0x10>)
   1bc16:	0048      	lsls	r0, r1, #1
   1bc18:	469c      	mov	ip, r3
   1bc1a:	0840      	lsrs	r0, r0, #1
   1bc1c:	4460      	add	r0, ip
   1bc1e:	0fc0      	lsrs	r0, r0, #31
   1bc20:	4770      	bx	lr
   1bc22:	46c0      	nop			; (mov r8, r8)
   1bc24:	80100000 	.word	0x80100000

0001bc28 <floor>:
   1bc28:	4a45      	ldr	r2, [pc, #276]	; (1bd40 <floor+0x118>)
   1bc2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bc2c:	4657      	mov	r7, sl
   1bc2e:	4692      	mov	sl, r2
   1bc30:	004b      	lsls	r3, r1, #1
   1bc32:	0d5b      	lsrs	r3, r3, #21
   1bc34:	449a      	add	sl, r3
   1bc36:	464e      	mov	r6, r9
   1bc38:	4645      	mov	r5, r8
   1bc3a:	46de      	mov	lr, fp
   1bc3c:	4652      	mov	r2, sl
   1bc3e:	b5e0      	push	{r5, r6, r7, lr}
   1bc40:	000c      	movs	r4, r1
   1bc42:	0005      	movs	r5, r0
   1bc44:	000e      	movs	r6, r1
   1bc46:	4689      	mov	r9, r1
   1bc48:	0007      	movs	r7, r0
   1bc4a:	2a13      	cmp	r2, #19
   1bc4c:	dc22      	bgt.n	1bc94 <floor+0x6c>
   1bc4e:	2a00      	cmp	r2, #0
   1bc50:	db47      	blt.n	1bce2 <floor+0xba>
   1bc52:	4652      	mov	r2, sl
   1bc54:	4b3b      	ldr	r3, [pc, #236]	; (1bd44 <floor+0x11c>)
   1bc56:	4113      	asrs	r3, r2
   1bc58:	4698      	mov	r8, r3
   1bc5a:	000b      	movs	r3, r1
   1bc5c:	4642      	mov	r2, r8
   1bc5e:	4013      	ands	r3, r2
   1bc60:	4303      	orrs	r3, r0
   1bc62:	d011      	beq.n	1bc88 <floor+0x60>
   1bc64:	4a38      	ldr	r2, [pc, #224]	; (1bd48 <floor+0x120>)
   1bc66:	4b39      	ldr	r3, [pc, #228]	; (1bd4c <floor+0x124>)
   1bc68:	f001 fb10 	bl	1d28c <__aeabi_dadd>
   1bc6c:	2200      	movs	r2, #0
   1bc6e:	2300      	movs	r3, #0
   1bc70:	f000 fb2c 	bl	1c2cc <__aeabi_dcmpgt>
   1bc74:	2800      	cmp	r0, #0
   1bc76:	d005      	beq.n	1bc84 <floor+0x5c>
   1bc78:	2c00      	cmp	r4, #0
   1bc7a:	db41      	blt.n	1bd00 <floor+0xd8>
   1bc7c:	464e      	mov	r6, r9
   1bc7e:	4643      	mov	r3, r8
   1bc80:	2700      	movs	r7, #0
   1bc82:	439e      	bics	r6, r3
   1bc84:	0038      	movs	r0, r7
   1bc86:	0031      	movs	r1, r6
   1bc88:	bc3c      	pop	{r2, r3, r4, r5}
   1bc8a:	4690      	mov	r8, r2
   1bc8c:	4699      	mov	r9, r3
   1bc8e:	46a2      	mov	sl, r4
   1bc90:	46ab      	mov	fp, r5
   1bc92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bc94:	4652      	mov	r2, sl
   1bc96:	2a33      	cmp	r2, #51	; 0x33
   1bc98:	dd08      	ble.n	1bcac <floor+0x84>
   1bc9a:	2380      	movs	r3, #128	; 0x80
   1bc9c:	00db      	lsls	r3, r3, #3
   1bc9e:	459a      	cmp	sl, r3
   1bca0:	d1f2      	bne.n	1bc88 <floor+0x60>
   1bca2:	0002      	movs	r2, r0
   1bca4:	000b      	movs	r3, r1
   1bca6:	f001 faf1 	bl	1d28c <__aeabi_dadd>
   1bcaa:	e7ed      	b.n	1bc88 <floor+0x60>
   1bcac:	4a28      	ldr	r2, [pc, #160]	; (1bd50 <floor+0x128>)
   1bcae:	4694      	mov	ip, r2
   1bcb0:	2201      	movs	r2, #1
   1bcb2:	4463      	add	r3, ip
   1bcb4:	4252      	negs	r2, r2
   1bcb6:	40da      	lsrs	r2, r3
   1bcb8:	4693      	mov	fp, r2
   1bcba:	4202      	tst	r2, r0
   1bcbc:	d0e4      	beq.n	1bc88 <floor+0x60>
   1bcbe:	4a22      	ldr	r2, [pc, #136]	; (1bd48 <floor+0x120>)
   1bcc0:	4b22      	ldr	r3, [pc, #136]	; (1bd4c <floor+0x124>)
   1bcc2:	f001 fae3 	bl	1d28c <__aeabi_dadd>
   1bcc6:	2200      	movs	r2, #0
   1bcc8:	2300      	movs	r3, #0
   1bcca:	f000 faff 	bl	1c2cc <__aeabi_dcmpgt>
   1bcce:	2800      	cmp	r0, #0
   1bcd0:	d0d8      	beq.n	1bc84 <floor+0x5c>
   1bcd2:	2c00      	cmp	r4, #0
   1bcd4:	db1a      	blt.n	1bd0c <floor+0xe4>
   1bcd6:	465b      	mov	r3, fp
   1bcd8:	464e      	mov	r6, r9
   1bcda:	439f      	bics	r7, r3
   1bcdc:	0038      	movs	r0, r7
   1bcde:	0031      	movs	r1, r6
   1bce0:	e7d2      	b.n	1bc88 <floor+0x60>
   1bce2:	4a19      	ldr	r2, [pc, #100]	; (1bd48 <floor+0x120>)
   1bce4:	4b19      	ldr	r3, [pc, #100]	; (1bd4c <floor+0x124>)
   1bce6:	f001 fad1 	bl	1d28c <__aeabi_dadd>
   1bcea:	2200      	movs	r2, #0
   1bcec:	2300      	movs	r3, #0
   1bcee:	f000 faed 	bl	1c2cc <__aeabi_dcmpgt>
   1bcf2:	2800      	cmp	r0, #0
   1bcf4:	d0c6      	beq.n	1bc84 <floor+0x5c>
   1bcf6:	2c00      	cmp	r4, #0
   1bcf8:	db16      	blt.n	1bd28 <floor+0x100>
   1bcfa:	2700      	movs	r7, #0
   1bcfc:	2600      	movs	r6, #0
   1bcfe:	e7c1      	b.n	1bc84 <floor+0x5c>
   1bd00:	2380      	movs	r3, #128	; 0x80
   1bd02:	4652      	mov	r2, sl
   1bd04:	035b      	lsls	r3, r3, #13
   1bd06:	4113      	asrs	r3, r2
   1bd08:	4499      	add	r9, r3
   1bd0a:	e7b7      	b.n	1bc7c <floor+0x54>
   1bd0c:	4653      	mov	r3, sl
   1bd0e:	2b14      	cmp	r3, #20
   1bd10:	d012      	beq.n	1bd38 <floor+0x110>
   1bd12:	2334      	movs	r3, #52	; 0x34
   1bd14:	4652      	mov	r2, sl
   1bd16:	2701      	movs	r7, #1
   1bd18:	1a9b      	subs	r3, r3, r2
   1bd1a:	409f      	lsls	r7, r3
   1bd1c:	197f      	adds	r7, r7, r5
   1bd1e:	42af      	cmp	r7, r5
   1bd20:	419b      	sbcs	r3, r3
   1bd22:	425b      	negs	r3, r3
   1bd24:	4499      	add	r9, r3
   1bd26:	e7d6      	b.n	1bcd6 <floor+0xae>
   1bd28:	0064      	lsls	r4, r4, #1
   1bd2a:	0864      	lsrs	r4, r4, #1
   1bd2c:	4325      	orrs	r5, r4
   1bd2e:	2700      	movs	r7, #0
   1bd30:	2d00      	cmp	r5, #0
   1bd32:	d0a7      	beq.n	1bc84 <floor+0x5c>
   1bd34:	4e07      	ldr	r6, [pc, #28]	; (1bd54 <floor+0x12c>)
   1bd36:	e7a5      	b.n	1bc84 <floor+0x5c>
   1bd38:	3b13      	subs	r3, #19
   1bd3a:	469c      	mov	ip, r3
   1bd3c:	44e1      	add	r9, ip
   1bd3e:	e7ca      	b.n	1bcd6 <floor+0xae>
   1bd40:	fffffc01 	.word	0xfffffc01
   1bd44:	000fffff 	.word	0x000fffff
   1bd48:	8800759c 	.word	0x8800759c
   1bd4c:	7e37e43c 	.word	0x7e37e43c
   1bd50:	fffffbed 	.word	0xfffffbed
   1bd54:	bff00000 	.word	0xbff00000

0001bd58 <matherr>:
   1bd58:	2000      	movs	r0, #0
   1bd5a:	4770      	bx	lr

0001bd5c <nan>:
   1bd5c:	2000      	movs	r0, #0
   1bd5e:	4901      	ldr	r1, [pc, #4]	; (1bd64 <nan+0x8>)
   1bd60:	4770      	bx	lr
   1bd62:	46c0      	nop			; (mov r8, r8)
   1bd64:	7ff80000 	.word	0x7ff80000

0001bd68 <rint>:
   1bd68:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bd6a:	46c6      	mov	lr, r8
   1bd6c:	b500      	push	{lr}
   1bd6e:	0fcb      	lsrs	r3, r1, #31
   1bd70:	4698      	mov	r8, r3
   1bd72:	4c4a      	ldr	r4, [pc, #296]	; (1be9c <rint+0x134>)
   1bd74:	004b      	lsls	r3, r1, #1
   1bd76:	0d5b      	lsrs	r3, r3, #21
   1bd78:	191e      	adds	r6, r3, r4
   1bd7a:	b082      	sub	sp, #8
   1bd7c:	0007      	movs	r7, r0
   1bd7e:	000a      	movs	r2, r1
   1bd80:	2e13      	cmp	r6, #19
   1bd82:	dc35      	bgt.n	1bdf0 <rint+0x88>
   1bd84:	2e00      	cmp	r6, #0
   1bd86:	db57      	blt.n	1be38 <rint+0xd0>
   1bd88:	4b45      	ldr	r3, [pc, #276]	; (1bea0 <rint+0x138>)
   1bd8a:	0004      	movs	r4, r0
   1bd8c:	4133      	asrs	r3, r6
   1bd8e:	001f      	movs	r7, r3
   1bd90:	400f      	ands	r7, r1
   1bd92:	4307      	orrs	r7, r0
   1bd94:	000d      	movs	r5, r1
   1bd96:	2f00      	cmp	r7, #0
   1bd98:	d024      	beq.n	1bde4 <rint+0x7c>
   1bd9a:	085b      	lsrs	r3, r3, #1
   1bd9c:	001c      	movs	r4, r3
   1bd9e:	400c      	ands	r4, r1
   1bda0:	4320      	orrs	r0, r4
   1bda2:	2700      	movs	r7, #0
   1bda4:	2800      	cmp	r0, #0
   1bda6:	d007      	beq.n	1bdb8 <rint+0x50>
   1bda8:	2e13      	cmp	r6, #19
   1bdaa:	d100      	bne.n	1bdae <rint+0x46>
   1bdac:	e073      	b.n	1be96 <rint+0x12e>
   1bdae:	2280      	movs	r2, #128	; 0x80
   1bdb0:	02d2      	lsls	r2, r2, #11
   1bdb2:	4132      	asrs	r2, r6
   1bdb4:	4399      	bics	r1, r3
   1bdb6:	430a      	orrs	r2, r1
   1bdb8:	4643      	mov	r3, r8
   1bdba:	00de      	lsls	r6, r3, #3
   1bdbc:	4b39      	ldr	r3, [pc, #228]	; (1bea4 <rint+0x13c>)
   1bdbe:	0011      	movs	r1, r2
   1bdc0:	199e      	adds	r6, r3, r6
   1bdc2:	6834      	ldr	r4, [r6, #0]
   1bdc4:	6875      	ldr	r5, [r6, #4]
   1bdc6:	0038      	movs	r0, r7
   1bdc8:	0022      	movs	r2, r4
   1bdca:	002b      	movs	r3, r5
   1bdcc:	f001 fa5e 	bl	1d28c <__aeabi_dadd>
   1bdd0:	9000      	str	r0, [sp, #0]
   1bdd2:	9101      	str	r1, [sp, #4]
   1bdd4:	9800      	ldr	r0, [sp, #0]
   1bdd6:	9901      	ldr	r1, [sp, #4]
   1bdd8:	0022      	movs	r2, r4
   1bdda:	002b      	movs	r3, r5
   1bddc:	f002 fc1a 	bl	1e614 <__aeabi_dsub>
   1bde0:	0004      	movs	r4, r0
   1bde2:	000d      	movs	r5, r1
   1bde4:	0020      	movs	r0, r4
   1bde6:	0029      	movs	r1, r5
   1bde8:	b002      	add	sp, #8
   1bdea:	bc04      	pop	{r2}
   1bdec:	4690      	mov	r8, r2
   1bdee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bdf0:	2e33      	cmp	r6, #51	; 0x33
   1bdf2:	dd0c      	ble.n	1be0e <rint+0xa6>
   1bdf4:	2380      	movs	r3, #128	; 0x80
   1bdf6:	0004      	movs	r4, r0
   1bdf8:	00db      	lsls	r3, r3, #3
   1bdfa:	000d      	movs	r5, r1
   1bdfc:	429e      	cmp	r6, r3
   1bdfe:	d1f1      	bne.n	1bde4 <rint+0x7c>
   1be00:	0002      	movs	r2, r0
   1be02:	000b      	movs	r3, r1
   1be04:	f001 fa42 	bl	1d28c <__aeabi_dadd>
   1be08:	0004      	movs	r4, r0
   1be0a:	000d      	movs	r5, r1
   1be0c:	e7ea      	b.n	1bde4 <rint+0x7c>
   1be0e:	4c26      	ldr	r4, [pc, #152]	; (1bea8 <rint+0x140>)
   1be10:	000d      	movs	r5, r1
   1be12:	46a4      	mov	ip, r4
   1be14:	2401      	movs	r4, #1
   1be16:	4463      	add	r3, ip
   1be18:	4264      	negs	r4, r4
   1be1a:	40dc      	lsrs	r4, r3
   1be1c:	46a4      	mov	ip, r4
   1be1e:	4661      	mov	r1, ip
   1be20:	0004      	movs	r4, r0
   1be22:	4201      	tst	r1, r0
   1be24:	d0de      	beq.n	1bde4 <rint+0x7c>
   1be26:	0849      	lsrs	r1, r1, #1
   1be28:	4201      	tst	r1, r0
   1be2a:	d0c5      	beq.n	1bdb8 <rint+0x50>
   1be2c:	2780      	movs	r7, #128	; 0x80
   1be2e:	05ff      	lsls	r7, r7, #23
   1be30:	411f      	asrs	r7, r3
   1be32:	4388      	bics	r0, r1
   1be34:	4307      	orrs	r7, r0
   1be36:	e7bf      	b.n	1bdb8 <rint+0x50>
   1be38:	004b      	lsls	r3, r1, #1
   1be3a:	085b      	lsrs	r3, r3, #1
   1be3c:	4303      	orrs	r3, r0
   1be3e:	0004      	movs	r4, r0
   1be40:	000d      	movs	r5, r1
   1be42:	2b00      	cmp	r3, #0
   1be44:	d0ce      	beq.n	1bde4 <rint+0x7c>
   1be46:	030b      	lsls	r3, r1, #12
   1be48:	0b1b      	lsrs	r3, r3, #12
   1be4a:	4303      	orrs	r3, r0
   1be4c:	001a      	movs	r2, r3
   1be4e:	425b      	negs	r3, r3
   1be50:	4313      	orrs	r3, r2
   1be52:	2280      	movs	r2, #128	; 0x80
   1be54:	0b1b      	lsrs	r3, r3, #12
   1be56:	0312      	lsls	r2, r2, #12
   1be58:	4013      	ands	r3, r2
   1be5a:	0c4a      	lsrs	r2, r1, #17
   1be5c:	0452      	lsls	r2, r2, #17
   1be5e:	4313      	orrs	r3, r2
   1be60:	0019      	movs	r1, r3
   1be62:	4643      	mov	r3, r8
   1be64:	00da      	lsls	r2, r3, #3
   1be66:	4b0f      	ldr	r3, [pc, #60]	; (1bea4 <rint+0x13c>)
   1be68:	189b      	adds	r3, r3, r2
   1be6a:	681c      	ldr	r4, [r3, #0]
   1be6c:	685d      	ldr	r5, [r3, #4]
   1be6e:	0022      	movs	r2, r4
   1be70:	002b      	movs	r3, r5
   1be72:	f001 fa0b 	bl	1d28c <__aeabi_dadd>
   1be76:	9000      	str	r0, [sp, #0]
   1be78:	9101      	str	r1, [sp, #4]
   1be7a:	9800      	ldr	r0, [sp, #0]
   1be7c:	9901      	ldr	r1, [sp, #4]
   1be7e:	0022      	movs	r2, r4
   1be80:	002b      	movs	r3, r5
   1be82:	f002 fbc7 	bl	1e614 <__aeabi_dsub>
   1be86:	4642      	mov	r2, r8
   1be88:	004b      	lsls	r3, r1, #1
   1be8a:	085b      	lsrs	r3, r3, #1
   1be8c:	07d6      	lsls	r6, r2, #31
   1be8e:	4333      	orrs	r3, r6
   1be90:	0004      	movs	r4, r0
   1be92:	001d      	movs	r5, r3
   1be94:	e7a6      	b.n	1bde4 <rint+0x7c>
   1be96:	2780      	movs	r7, #128	; 0x80
   1be98:	063f      	lsls	r7, r7, #24
   1be9a:	e788      	b.n	1bdae <rint+0x46>
   1be9c:	fffffc01 	.word	0xfffffc01
   1bea0:	000fffff 	.word	0x000fffff
   1bea4:	00025080 	.word	0x00025080
   1bea8:	fffffbed 	.word	0xfffffbed

0001beac <scalbn>:
   1beac:	004b      	lsls	r3, r1, #1
   1beae:	b570      	push	{r4, r5, r6, lr}
   1beb0:	0d5b      	lsrs	r3, r3, #21
   1beb2:	0014      	movs	r4, r2
   1beb4:	000a      	movs	r2, r1
   1beb6:	2b00      	cmp	r3, #0
   1beb8:	d11a      	bne.n	1bef0 <scalbn+0x44>
   1beba:	004b      	lsls	r3, r1, #1
   1bebc:	085b      	lsrs	r3, r3, #1
   1bebe:	4303      	orrs	r3, r0
   1bec0:	d015      	beq.n	1beee <scalbn+0x42>
   1bec2:	2200      	movs	r2, #0
   1bec4:	4b22      	ldr	r3, [pc, #136]	; (1bf50 <scalbn+0xa4>)
   1bec6:	f002 f925 	bl	1e114 <__aeabi_dmul>
   1beca:	4b22      	ldr	r3, [pc, #136]	; (1bf54 <scalbn+0xa8>)
   1becc:	000a      	movs	r2, r1
   1bece:	429c      	cmp	r4, r3
   1bed0:	db22      	blt.n	1bf18 <scalbn+0x6c>
   1bed2:	004b      	lsls	r3, r1, #1
   1bed4:	0d5b      	lsrs	r3, r3, #21
   1bed6:	3b36      	subs	r3, #54	; 0x36
   1bed8:	4d1f      	ldr	r5, [pc, #124]	; (1bf58 <scalbn+0xac>)
   1beda:	18e3      	adds	r3, r4, r3
   1bedc:	42ab      	cmp	r3, r5
   1bede:	dc20      	bgt.n	1bf22 <scalbn+0x76>
   1bee0:	2b00      	cmp	r3, #0
   1bee2:	dd0d      	ble.n	1bf00 <scalbn+0x54>
   1bee4:	4c1d      	ldr	r4, [pc, #116]	; (1bf5c <scalbn+0xb0>)
   1bee6:	051b      	lsls	r3, r3, #20
   1bee8:	4022      	ands	r2, r4
   1beea:	431a      	orrs	r2, r3
   1beec:	0011      	movs	r1, r2
   1beee:	bd70      	pop	{r4, r5, r6, pc}
   1bef0:	4d1b      	ldr	r5, [pc, #108]	; (1bf60 <scalbn+0xb4>)
   1bef2:	42ab      	cmp	r3, r5
   1bef4:	d1f0      	bne.n	1bed8 <scalbn+0x2c>
   1bef6:	0002      	movs	r2, r0
   1bef8:	000b      	movs	r3, r1
   1befa:	f001 f9c7 	bl	1d28c <__aeabi_dadd>
   1befe:	e7f6      	b.n	1beee <scalbn+0x42>
   1bf00:	001d      	movs	r5, r3
   1bf02:	3535      	adds	r5, #53	; 0x35
   1bf04:	da18      	bge.n	1bf38 <scalbn+0x8c>
   1bf06:	4b17      	ldr	r3, [pc, #92]	; (1bf64 <scalbn+0xb8>)
   1bf08:	0002      	movs	r2, r0
   1bf0a:	429c      	cmp	r4, r3
   1bf0c:	dc0a      	bgt.n	1bf24 <scalbn+0x78>
   1bf0e:	000b      	movs	r3, r1
   1bf10:	4815      	ldr	r0, [pc, #84]	; (1bf68 <scalbn+0xbc>)
   1bf12:	4916      	ldr	r1, [pc, #88]	; (1bf6c <scalbn+0xc0>)
   1bf14:	f000 f832 	bl	1bf7c <copysign>
   1bf18:	4a13      	ldr	r2, [pc, #76]	; (1bf68 <scalbn+0xbc>)
   1bf1a:	4b14      	ldr	r3, [pc, #80]	; (1bf6c <scalbn+0xc0>)
   1bf1c:	f002 f8fa 	bl	1e114 <__aeabi_dmul>
   1bf20:	e7e5      	b.n	1beee <scalbn+0x42>
   1bf22:	0002      	movs	r2, r0
   1bf24:	000b      	movs	r3, r1
   1bf26:	4812      	ldr	r0, [pc, #72]	; (1bf70 <scalbn+0xc4>)
   1bf28:	4912      	ldr	r1, [pc, #72]	; (1bf74 <scalbn+0xc8>)
   1bf2a:	f000 f827 	bl	1bf7c <copysign>
   1bf2e:	4a10      	ldr	r2, [pc, #64]	; (1bf70 <scalbn+0xc4>)
   1bf30:	4b10      	ldr	r3, [pc, #64]	; (1bf74 <scalbn+0xc8>)
   1bf32:	f002 f8ef 	bl	1e114 <__aeabi_dmul>
   1bf36:	e7da      	b.n	1beee <scalbn+0x42>
   1bf38:	4c08      	ldr	r4, [pc, #32]	; (1bf5c <scalbn+0xb0>)
   1bf3a:	3336      	adds	r3, #54	; 0x36
   1bf3c:	4022      	ands	r2, r4
   1bf3e:	051b      	lsls	r3, r3, #20
   1bf40:	4313      	orrs	r3, r2
   1bf42:	0019      	movs	r1, r3
   1bf44:	2200      	movs	r2, #0
   1bf46:	4b0c      	ldr	r3, [pc, #48]	; (1bf78 <scalbn+0xcc>)
   1bf48:	f002 f8e4 	bl	1e114 <__aeabi_dmul>
   1bf4c:	e7cf      	b.n	1beee <scalbn+0x42>
   1bf4e:	46c0      	nop			; (mov r8, r8)
   1bf50:	43500000 	.word	0x43500000
   1bf54:	ffff3cb0 	.word	0xffff3cb0
   1bf58:	000007fe 	.word	0x000007fe
   1bf5c:	800fffff 	.word	0x800fffff
   1bf60:	000007ff 	.word	0x000007ff
   1bf64:	0000c350 	.word	0x0000c350
   1bf68:	c2f8f359 	.word	0xc2f8f359
   1bf6c:	01a56e1f 	.word	0x01a56e1f
   1bf70:	8800759c 	.word	0x8800759c
   1bf74:	7e37e43c 	.word	0x7e37e43c
   1bf78:	3c900000 	.word	0x3c900000

0001bf7c <copysign>:
   1bf7c:	b530      	push	{r4, r5, lr}
   1bf7e:	004a      	lsls	r2, r1, #1
   1bf80:	0fdb      	lsrs	r3, r3, #31
   1bf82:	07db      	lsls	r3, r3, #31
   1bf84:	0852      	lsrs	r2, r2, #1
   1bf86:	431a      	orrs	r2, r3
   1bf88:	0011      	movs	r1, r2
   1bf8a:	bd30      	pop	{r4, r5, pc}

0001bf8c <__udivsi3>:
   1bf8c:	2200      	movs	r2, #0
   1bf8e:	0843      	lsrs	r3, r0, #1
   1bf90:	428b      	cmp	r3, r1
   1bf92:	d374      	bcc.n	1c07e <__udivsi3+0xf2>
   1bf94:	0903      	lsrs	r3, r0, #4
   1bf96:	428b      	cmp	r3, r1
   1bf98:	d35f      	bcc.n	1c05a <__udivsi3+0xce>
   1bf9a:	0a03      	lsrs	r3, r0, #8
   1bf9c:	428b      	cmp	r3, r1
   1bf9e:	d344      	bcc.n	1c02a <__udivsi3+0x9e>
   1bfa0:	0b03      	lsrs	r3, r0, #12
   1bfa2:	428b      	cmp	r3, r1
   1bfa4:	d328      	bcc.n	1bff8 <__udivsi3+0x6c>
   1bfa6:	0c03      	lsrs	r3, r0, #16
   1bfa8:	428b      	cmp	r3, r1
   1bfaa:	d30d      	bcc.n	1bfc8 <__udivsi3+0x3c>
   1bfac:	22ff      	movs	r2, #255	; 0xff
   1bfae:	0209      	lsls	r1, r1, #8
   1bfb0:	ba12      	rev	r2, r2
   1bfb2:	0c03      	lsrs	r3, r0, #16
   1bfb4:	428b      	cmp	r3, r1
   1bfb6:	d302      	bcc.n	1bfbe <__udivsi3+0x32>
   1bfb8:	1212      	asrs	r2, r2, #8
   1bfba:	0209      	lsls	r1, r1, #8
   1bfbc:	d065      	beq.n	1c08a <__udivsi3+0xfe>
   1bfbe:	0b03      	lsrs	r3, r0, #12
   1bfc0:	428b      	cmp	r3, r1
   1bfc2:	d319      	bcc.n	1bff8 <__udivsi3+0x6c>
   1bfc4:	e000      	b.n	1bfc8 <__udivsi3+0x3c>
   1bfc6:	0a09      	lsrs	r1, r1, #8
   1bfc8:	0bc3      	lsrs	r3, r0, #15
   1bfca:	428b      	cmp	r3, r1
   1bfcc:	d301      	bcc.n	1bfd2 <__udivsi3+0x46>
   1bfce:	03cb      	lsls	r3, r1, #15
   1bfd0:	1ac0      	subs	r0, r0, r3
   1bfd2:	4152      	adcs	r2, r2
   1bfd4:	0b83      	lsrs	r3, r0, #14
   1bfd6:	428b      	cmp	r3, r1
   1bfd8:	d301      	bcc.n	1bfde <__udivsi3+0x52>
   1bfda:	038b      	lsls	r3, r1, #14
   1bfdc:	1ac0      	subs	r0, r0, r3
   1bfde:	4152      	adcs	r2, r2
   1bfe0:	0b43      	lsrs	r3, r0, #13
   1bfe2:	428b      	cmp	r3, r1
   1bfe4:	d301      	bcc.n	1bfea <__udivsi3+0x5e>
   1bfe6:	034b      	lsls	r3, r1, #13
   1bfe8:	1ac0      	subs	r0, r0, r3
   1bfea:	4152      	adcs	r2, r2
   1bfec:	0b03      	lsrs	r3, r0, #12
   1bfee:	428b      	cmp	r3, r1
   1bff0:	d301      	bcc.n	1bff6 <__udivsi3+0x6a>
   1bff2:	030b      	lsls	r3, r1, #12
   1bff4:	1ac0      	subs	r0, r0, r3
   1bff6:	4152      	adcs	r2, r2
   1bff8:	0ac3      	lsrs	r3, r0, #11
   1bffa:	428b      	cmp	r3, r1
   1bffc:	d301      	bcc.n	1c002 <__udivsi3+0x76>
   1bffe:	02cb      	lsls	r3, r1, #11
   1c000:	1ac0      	subs	r0, r0, r3
   1c002:	4152      	adcs	r2, r2
   1c004:	0a83      	lsrs	r3, r0, #10
   1c006:	428b      	cmp	r3, r1
   1c008:	d301      	bcc.n	1c00e <__udivsi3+0x82>
   1c00a:	028b      	lsls	r3, r1, #10
   1c00c:	1ac0      	subs	r0, r0, r3
   1c00e:	4152      	adcs	r2, r2
   1c010:	0a43      	lsrs	r3, r0, #9
   1c012:	428b      	cmp	r3, r1
   1c014:	d301      	bcc.n	1c01a <__udivsi3+0x8e>
   1c016:	024b      	lsls	r3, r1, #9
   1c018:	1ac0      	subs	r0, r0, r3
   1c01a:	4152      	adcs	r2, r2
   1c01c:	0a03      	lsrs	r3, r0, #8
   1c01e:	428b      	cmp	r3, r1
   1c020:	d301      	bcc.n	1c026 <__udivsi3+0x9a>
   1c022:	020b      	lsls	r3, r1, #8
   1c024:	1ac0      	subs	r0, r0, r3
   1c026:	4152      	adcs	r2, r2
   1c028:	d2cd      	bcs.n	1bfc6 <__udivsi3+0x3a>
   1c02a:	09c3      	lsrs	r3, r0, #7
   1c02c:	428b      	cmp	r3, r1
   1c02e:	d301      	bcc.n	1c034 <__udivsi3+0xa8>
   1c030:	01cb      	lsls	r3, r1, #7
   1c032:	1ac0      	subs	r0, r0, r3
   1c034:	4152      	adcs	r2, r2
   1c036:	0983      	lsrs	r3, r0, #6
   1c038:	428b      	cmp	r3, r1
   1c03a:	d301      	bcc.n	1c040 <__udivsi3+0xb4>
   1c03c:	018b      	lsls	r3, r1, #6
   1c03e:	1ac0      	subs	r0, r0, r3
   1c040:	4152      	adcs	r2, r2
   1c042:	0943      	lsrs	r3, r0, #5
   1c044:	428b      	cmp	r3, r1
   1c046:	d301      	bcc.n	1c04c <__udivsi3+0xc0>
   1c048:	014b      	lsls	r3, r1, #5
   1c04a:	1ac0      	subs	r0, r0, r3
   1c04c:	4152      	adcs	r2, r2
   1c04e:	0903      	lsrs	r3, r0, #4
   1c050:	428b      	cmp	r3, r1
   1c052:	d301      	bcc.n	1c058 <__udivsi3+0xcc>
   1c054:	010b      	lsls	r3, r1, #4
   1c056:	1ac0      	subs	r0, r0, r3
   1c058:	4152      	adcs	r2, r2
   1c05a:	08c3      	lsrs	r3, r0, #3
   1c05c:	428b      	cmp	r3, r1
   1c05e:	d301      	bcc.n	1c064 <__udivsi3+0xd8>
   1c060:	00cb      	lsls	r3, r1, #3
   1c062:	1ac0      	subs	r0, r0, r3
   1c064:	4152      	adcs	r2, r2
   1c066:	0883      	lsrs	r3, r0, #2
   1c068:	428b      	cmp	r3, r1
   1c06a:	d301      	bcc.n	1c070 <__udivsi3+0xe4>
   1c06c:	008b      	lsls	r3, r1, #2
   1c06e:	1ac0      	subs	r0, r0, r3
   1c070:	4152      	adcs	r2, r2
   1c072:	0843      	lsrs	r3, r0, #1
   1c074:	428b      	cmp	r3, r1
   1c076:	d301      	bcc.n	1c07c <__udivsi3+0xf0>
   1c078:	004b      	lsls	r3, r1, #1
   1c07a:	1ac0      	subs	r0, r0, r3
   1c07c:	4152      	adcs	r2, r2
   1c07e:	1a41      	subs	r1, r0, r1
   1c080:	d200      	bcs.n	1c084 <__udivsi3+0xf8>
   1c082:	4601      	mov	r1, r0
   1c084:	4152      	adcs	r2, r2
   1c086:	4610      	mov	r0, r2
   1c088:	4770      	bx	lr
   1c08a:	e7ff      	b.n	1c08c <__udivsi3+0x100>
   1c08c:	b501      	push	{r0, lr}
   1c08e:	2000      	movs	r0, #0
   1c090:	f000 f8f0 	bl	1c274 <__aeabi_idiv0>
   1c094:	bd02      	pop	{r1, pc}
   1c096:	46c0      	nop			; (mov r8, r8)

0001c098 <__aeabi_uidivmod>:
   1c098:	2900      	cmp	r1, #0
   1c09a:	d0f7      	beq.n	1c08c <__udivsi3+0x100>
   1c09c:	e776      	b.n	1bf8c <__udivsi3>
   1c09e:	4770      	bx	lr

0001c0a0 <__divsi3>:
   1c0a0:	4603      	mov	r3, r0
   1c0a2:	430b      	orrs	r3, r1
   1c0a4:	d47f      	bmi.n	1c1a6 <__divsi3+0x106>
   1c0a6:	2200      	movs	r2, #0
   1c0a8:	0843      	lsrs	r3, r0, #1
   1c0aa:	428b      	cmp	r3, r1
   1c0ac:	d374      	bcc.n	1c198 <__divsi3+0xf8>
   1c0ae:	0903      	lsrs	r3, r0, #4
   1c0b0:	428b      	cmp	r3, r1
   1c0b2:	d35f      	bcc.n	1c174 <__divsi3+0xd4>
   1c0b4:	0a03      	lsrs	r3, r0, #8
   1c0b6:	428b      	cmp	r3, r1
   1c0b8:	d344      	bcc.n	1c144 <__divsi3+0xa4>
   1c0ba:	0b03      	lsrs	r3, r0, #12
   1c0bc:	428b      	cmp	r3, r1
   1c0be:	d328      	bcc.n	1c112 <__divsi3+0x72>
   1c0c0:	0c03      	lsrs	r3, r0, #16
   1c0c2:	428b      	cmp	r3, r1
   1c0c4:	d30d      	bcc.n	1c0e2 <__divsi3+0x42>
   1c0c6:	22ff      	movs	r2, #255	; 0xff
   1c0c8:	0209      	lsls	r1, r1, #8
   1c0ca:	ba12      	rev	r2, r2
   1c0cc:	0c03      	lsrs	r3, r0, #16
   1c0ce:	428b      	cmp	r3, r1
   1c0d0:	d302      	bcc.n	1c0d8 <__divsi3+0x38>
   1c0d2:	1212      	asrs	r2, r2, #8
   1c0d4:	0209      	lsls	r1, r1, #8
   1c0d6:	d065      	beq.n	1c1a4 <__divsi3+0x104>
   1c0d8:	0b03      	lsrs	r3, r0, #12
   1c0da:	428b      	cmp	r3, r1
   1c0dc:	d319      	bcc.n	1c112 <__divsi3+0x72>
   1c0de:	e000      	b.n	1c0e2 <__divsi3+0x42>
   1c0e0:	0a09      	lsrs	r1, r1, #8
   1c0e2:	0bc3      	lsrs	r3, r0, #15
   1c0e4:	428b      	cmp	r3, r1
   1c0e6:	d301      	bcc.n	1c0ec <__divsi3+0x4c>
   1c0e8:	03cb      	lsls	r3, r1, #15
   1c0ea:	1ac0      	subs	r0, r0, r3
   1c0ec:	4152      	adcs	r2, r2
   1c0ee:	0b83      	lsrs	r3, r0, #14
   1c0f0:	428b      	cmp	r3, r1
   1c0f2:	d301      	bcc.n	1c0f8 <__divsi3+0x58>
   1c0f4:	038b      	lsls	r3, r1, #14
   1c0f6:	1ac0      	subs	r0, r0, r3
   1c0f8:	4152      	adcs	r2, r2
   1c0fa:	0b43      	lsrs	r3, r0, #13
   1c0fc:	428b      	cmp	r3, r1
   1c0fe:	d301      	bcc.n	1c104 <__divsi3+0x64>
   1c100:	034b      	lsls	r3, r1, #13
   1c102:	1ac0      	subs	r0, r0, r3
   1c104:	4152      	adcs	r2, r2
   1c106:	0b03      	lsrs	r3, r0, #12
   1c108:	428b      	cmp	r3, r1
   1c10a:	d301      	bcc.n	1c110 <__divsi3+0x70>
   1c10c:	030b      	lsls	r3, r1, #12
   1c10e:	1ac0      	subs	r0, r0, r3
   1c110:	4152      	adcs	r2, r2
   1c112:	0ac3      	lsrs	r3, r0, #11
   1c114:	428b      	cmp	r3, r1
   1c116:	d301      	bcc.n	1c11c <__divsi3+0x7c>
   1c118:	02cb      	lsls	r3, r1, #11
   1c11a:	1ac0      	subs	r0, r0, r3
   1c11c:	4152      	adcs	r2, r2
   1c11e:	0a83      	lsrs	r3, r0, #10
   1c120:	428b      	cmp	r3, r1
   1c122:	d301      	bcc.n	1c128 <__divsi3+0x88>
   1c124:	028b      	lsls	r3, r1, #10
   1c126:	1ac0      	subs	r0, r0, r3
   1c128:	4152      	adcs	r2, r2
   1c12a:	0a43      	lsrs	r3, r0, #9
   1c12c:	428b      	cmp	r3, r1
   1c12e:	d301      	bcc.n	1c134 <__divsi3+0x94>
   1c130:	024b      	lsls	r3, r1, #9
   1c132:	1ac0      	subs	r0, r0, r3
   1c134:	4152      	adcs	r2, r2
   1c136:	0a03      	lsrs	r3, r0, #8
   1c138:	428b      	cmp	r3, r1
   1c13a:	d301      	bcc.n	1c140 <__divsi3+0xa0>
   1c13c:	020b      	lsls	r3, r1, #8
   1c13e:	1ac0      	subs	r0, r0, r3
   1c140:	4152      	adcs	r2, r2
   1c142:	d2cd      	bcs.n	1c0e0 <__divsi3+0x40>
   1c144:	09c3      	lsrs	r3, r0, #7
   1c146:	428b      	cmp	r3, r1
   1c148:	d301      	bcc.n	1c14e <__divsi3+0xae>
   1c14a:	01cb      	lsls	r3, r1, #7
   1c14c:	1ac0      	subs	r0, r0, r3
   1c14e:	4152      	adcs	r2, r2
   1c150:	0983      	lsrs	r3, r0, #6
   1c152:	428b      	cmp	r3, r1
   1c154:	d301      	bcc.n	1c15a <__divsi3+0xba>
   1c156:	018b      	lsls	r3, r1, #6
   1c158:	1ac0      	subs	r0, r0, r3
   1c15a:	4152      	adcs	r2, r2
   1c15c:	0943      	lsrs	r3, r0, #5
   1c15e:	428b      	cmp	r3, r1
   1c160:	d301      	bcc.n	1c166 <__divsi3+0xc6>
   1c162:	014b      	lsls	r3, r1, #5
   1c164:	1ac0      	subs	r0, r0, r3
   1c166:	4152      	adcs	r2, r2
   1c168:	0903      	lsrs	r3, r0, #4
   1c16a:	428b      	cmp	r3, r1
   1c16c:	d301      	bcc.n	1c172 <__divsi3+0xd2>
   1c16e:	010b      	lsls	r3, r1, #4
   1c170:	1ac0      	subs	r0, r0, r3
   1c172:	4152      	adcs	r2, r2
   1c174:	08c3      	lsrs	r3, r0, #3
   1c176:	428b      	cmp	r3, r1
   1c178:	d301      	bcc.n	1c17e <__divsi3+0xde>
   1c17a:	00cb      	lsls	r3, r1, #3
   1c17c:	1ac0      	subs	r0, r0, r3
   1c17e:	4152      	adcs	r2, r2
   1c180:	0883      	lsrs	r3, r0, #2
   1c182:	428b      	cmp	r3, r1
   1c184:	d301      	bcc.n	1c18a <__divsi3+0xea>
   1c186:	008b      	lsls	r3, r1, #2
   1c188:	1ac0      	subs	r0, r0, r3
   1c18a:	4152      	adcs	r2, r2
   1c18c:	0843      	lsrs	r3, r0, #1
   1c18e:	428b      	cmp	r3, r1
   1c190:	d301      	bcc.n	1c196 <__divsi3+0xf6>
   1c192:	004b      	lsls	r3, r1, #1
   1c194:	1ac0      	subs	r0, r0, r3
   1c196:	4152      	adcs	r2, r2
   1c198:	1a41      	subs	r1, r0, r1
   1c19a:	d200      	bcs.n	1c19e <__divsi3+0xfe>
   1c19c:	4601      	mov	r1, r0
   1c19e:	4152      	adcs	r2, r2
   1c1a0:	4610      	mov	r0, r2
   1c1a2:	4770      	bx	lr
   1c1a4:	e05d      	b.n	1c262 <__divsi3+0x1c2>
   1c1a6:	0fca      	lsrs	r2, r1, #31
   1c1a8:	d000      	beq.n	1c1ac <__divsi3+0x10c>
   1c1aa:	4249      	negs	r1, r1
   1c1ac:	1003      	asrs	r3, r0, #32
   1c1ae:	d300      	bcc.n	1c1b2 <__divsi3+0x112>
   1c1b0:	4240      	negs	r0, r0
   1c1b2:	4053      	eors	r3, r2
   1c1b4:	2200      	movs	r2, #0
   1c1b6:	469c      	mov	ip, r3
   1c1b8:	0903      	lsrs	r3, r0, #4
   1c1ba:	428b      	cmp	r3, r1
   1c1bc:	d32d      	bcc.n	1c21a <__divsi3+0x17a>
   1c1be:	0a03      	lsrs	r3, r0, #8
   1c1c0:	428b      	cmp	r3, r1
   1c1c2:	d312      	bcc.n	1c1ea <__divsi3+0x14a>
   1c1c4:	22fc      	movs	r2, #252	; 0xfc
   1c1c6:	0189      	lsls	r1, r1, #6
   1c1c8:	ba12      	rev	r2, r2
   1c1ca:	0a03      	lsrs	r3, r0, #8
   1c1cc:	428b      	cmp	r3, r1
   1c1ce:	d30c      	bcc.n	1c1ea <__divsi3+0x14a>
   1c1d0:	0189      	lsls	r1, r1, #6
   1c1d2:	1192      	asrs	r2, r2, #6
   1c1d4:	428b      	cmp	r3, r1
   1c1d6:	d308      	bcc.n	1c1ea <__divsi3+0x14a>
   1c1d8:	0189      	lsls	r1, r1, #6
   1c1da:	1192      	asrs	r2, r2, #6
   1c1dc:	428b      	cmp	r3, r1
   1c1de:	d304      	bcc.n	1c1ea <__divsi3+0x14a>
   1c1e0:	0189      	lsls	r1, r1, #6
   1c1e2:	d03a      	beq.n	1c25a <__divsi3+0x1ba>
   1c1e4:	1192      	asrs	r2, r2, #6
   1c1e6:	e000      	b.n	1c1ea <__divsi3+0x14a>
   1c1e8:	0989      	lsrs	r1, r1, #6
   1c1ea:	09c3      	lsrs	r3, r0, #7
   1c1ec:	428b      	cmp	r3, r1
   1c1ee:	d301      	bcc.n	1c1f4 <__divsi3+0x154>
   1c1f0:	01cb      	lsls	r3, r1, #7
   1c1f2:	1ac0      	subs	r0, r0, r3
   1c1f4:	4152      	adcs	r2, r2
   1c1f6:	0983      	lsrs	r3, r0, #6
   1c1f8:	428b      	cmp	r3, r1
   1c1fa:	d301      	bcc.n	1c200 <__divsi3+0x160>
   1c1fc:	018b      	lsls	r3, r1, #6
   1c1fe:	1ac0      	subs	r0, r0, r3
   1c200:	4152      	adcs	r2, r2
   1c202:	0943      	lsrs	r3, r0, #5
   1c204:	428b      	cmp	r3, r1
   1c206:	d301      	bcc.n	1c20c <__divsi3+0x16c>
   1c208:	014b      	lsls	r3, r1, #5
   1c20a:	1ac0      	subs	r0, r0, r3
   1c20c:	4152      	adcs	r2, r2
   1c20e:	0903      	lsrs	r3, r0, #4
   1c210:	428b      	cmp	r3, r1
   1c212:	d301      	bcc.n	1c218 <__divsi3+0x178>
   1c214:	010b      	lsls	r3, r1, #4
   1c216:	1ac0      	subs	r0, r0, r3
   1c218:	4152      	adcs	r2, r2
   1c21a:	08c3      	lsrs	r3, r0, #3
   1c21c:	428b      	cmp	r3, r1
   1c21e:	d301      	bcc.n	1c224 <__divsi3+0x184>
   1c220:	00cb      	lsls	r3, r1, #3
   1c222:	1ac0      	subs	r0, r0, r3
   1c224:	4152      	adcs	r2, r2
   1c226:	0883      	lsrs	r3, r0, #2
   1c228:	428b      	cmp	r3, r1
   1c22a:	d301      	bcc.n	1c230 <__divsi3+0x190>
   1c22c:	008b      	lsls	r3, r1, #2
   1c22e:	1ac0      	subs	r0, r0, r3
   1c230:	4152      	adcs	r2, r2
   1c232:	d2d9      	bcs.n	1c1e8 <__divsi3+0x148>
   1c234:	0843      	lsrs	r3, r0, #1
   1c236:	428b      	cmp	r3, r1
   1c238:	d301      	bcc.n	1c23e <__divsi3+0x19e>
   1c23a:	004b      	lsls	r3, r1, #1
   1c23c:	1ac0      	subs	r0, r0, r3
   1c23e:	4152      	adcs	r2, r2
   1c240:	1a41      	subs	r1, r0, r1
   1c242:	d200      	bcs.n	1c246 <__divsi3+0x1a6>
   1c244:	4601      	mov	r1, r0
   1c246:	4663      	mov	r3, ip
   1c248:	4152      	adcs	r2, r2
   1c24a:	105b      	asrs	r3, r3, #1
   1c24c:	4610      	mov	r0, r2
   1c24e:	d301      	bcc.n	1c254 <__divsi3+0x1b4>
   1c250:	4240      	negs	r0, r0
   1c252:	2b00      	cmp	r3, #0
   1c254:	d500      	bpl.n	1c258 <__divsi3+0x1b8>
   1c256:	4249      	negs	r1, r1
   1c258:	4770      	bx	lr
   1c25a:	4663      	mov	r3, ip
   1c25c:	105b      	asrs	r3, r3, #1
   1c25e:	d300      	bcc.n	1c262 <__divsi3+0x1c2>
   1c260:	4240      	negs	r0, r0
   1c262:	b501      	push	{r0, lr}
   1c264:	2000      	movs	r0, #0
   1c266:	f000 f805 	bl	1c274 <__aeabi_idiv0>
   1c26a:	bd02      	pop	{r1, pc}

0001c26c <__aeabi_idivmod>:
   1c26c:	2900      	cmp	r1, #0
   1c26e:	d0f8      	beq.n	1c262 <__divsi3+0x1c2>
   1c270:	e716      	b.n	1c0a0 <__divsi3>
   1c272:	4770      	bx	lr

0001c274 <__aeabi_idiv0>:
   1c274:	4770      	bx	lr
   1c276:	46c0      	nop			; (mov r8, r8)

0001c278 <__aeabi_cdrcmple>:
   1c278:	4684      	mov	ip, r0
   1c27a:	1c10      	adds	r0, r2, #0
   1c27c:	4662      	mov	r2, ip
   1c27e:	468c      	mov	ip, r1
   1c280:	1c19      	adds	r1, r3, #0
   1c282:	4663      	mov	r3, ip
   1c284:	e000      	b.n	1c288 <__aeabi_cdcmpeq>
   1c286:	46c0      	nop			; (mov r8, r8)

0001c288 <__aeabi_cdcmpeq>:
   1c288:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1c28a:	f001 fee1 	bl	1e050 <__ledf2>
   1c28e:	2800      	cmp	r0, #0
   1c290:	d401      	bmi.n	1c296 <__aeabi_cdcmpeq+0xe>
   1c292:	2100      	movs	r1, #0
   1c294:	42c8      	cmn	r0, r1
   1c296:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0001c298 <__aeabi_dcmpeq>:
   1c298:	b510      	push	{r4, lr}
   1c29a:	f001 fe3b 	bl	1df14 <__eqdf2>
   1c29e:	4240      	negs	r0, r0
   1c2a0:	3001      	adds	r0, #1
   1c2a2:	bd10      	pop	{r4, pc}

0001c2a4 <__aeabi_dcmplt>:
   1c2a4:	b510      	push	{r4, lr}
   1c2a6:	f001 fed3 	bl	1e050 <__ledf2>
   1c2aa:	2800      	cmp	r0, #0
   1c2ac:	db01      	blt.n	1c2b2 <__aeabi_dcmplt+0xe>
   1c2ae:	2000      	movs	r0, #0
   1c2b0:	bd10      	pop	{r4, pc}
   1c2b2:	2001      	movs	r0, #1
   1c2b4:	bd10      	pop	{r4, pc}
   1c2b6:	46c0      	nop			; (mov r8, r8)

0001c2b8 <__aeabi_dcmple>:
   1c2b8:	b510      	push	{r4, lr}
   1c2ba:	f001 fec9 	bl	1e050 <__ledf2>
   1c2be:	2800      	cmp	r0, #0
   1c2c0:	dd01      	ble.n	1c2c6 <__aeabi_dcmple+0xe>
   1c2c2:	2000      	movs	r0, #0
   1c2c4:	bd10      	pop	{r4, pc}
   1c2c6:	2001      	movs	r0, #1
   1c2c8:	bd10      	pop	{r4, pc}
   1c2ca:	46c0      	nop			; (mov r8, r8)

0001c2cc <__aeabi_dcmpgt>:
   1c2cc:	b510      	push	{r4, lr}
   1c2ce:	f001 fe5b 	bl	1df88 <__gedf2>
   1c2d2:	2800      	cmp	r0, #0
   1c2d4:	dc01      	bgt.n	1c2da <__aeabi_dcmpgt+0xe>
   1c2d6:	2000      	movs	r0, #0
   1c2d8:	bd10      	pop	{r4, pc}
   1c2da:	2001      	movs	r0, #1
   1c2dc:	bd10      	pop	{r4, pc}
   1c2de:	46c0      	nop			; (mov r8, r8)

0001c2e0 <__aeabi_dcmpge>:
   1c2e0:	b510      	push	{r4, lr}
   1c2e2:	f001 fe51 	bl	1df88 <__gedf2>
   1c2e6:	2800      	cmp	r0, #0
   1c2e8:	da01      	bge.n	1c2ee <__aeabi_dcmpge+0xe>
   1c2ea:	2000      	movs	r0, #0
   1c2ec:	bd10      	pop	{r4, pc}
   1c2ee:	2001      	movs	r0, #1
   1c2f0:	bd10      	pop	{r4, pc}
   1c2f2:	46c0      	nop			; (mov r8, r8)

0001c2f4 <__aeabi_cfrcmple>:
   1c2f4:	4684      	mov	ip, r0
   1c2f6:	1c08      	adds	r0, r1, #0
   1c2f8:	4661      	mov	r1, ip
   1c2fa:	e7ff      	b.n	1c2fc <__aeabi_cfcmpeq>

0001c2fc <__aeabi_cfcmpeq>:
   1c2fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1c2fe:	f000 fc11 	bl	1cb24 <__lesf2>
   1c302:	2800      	cmp	r0, #0
   1c304:	d401      	bmi.n	1c30a <__aeabi_cfcmpeq+0xe>
   1c306:	2100      	movs	r1, #0
   1c308:	42c8      	cmn	r0, r1
   1c30a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0001c30c <__aeabi_fcmpeq>:
   1c30c:	b510      	push	{r4, lr}
   1c30e:	f000 fba3 	bl	1ca58 <__eqsf2>
   1c312:	4240      	negs	r0, r0
   1c314:	3001      	adds	r0, #1
   1c316:	bd10      	pop	{r4, pc}

0001c318 <__aeabi_fcmplt>:
   1c318:	b510      	push	{r4, lr}
   1c31a:	f000 fc03 	bl	1cb24 <__lesf2>
   1c31e:	2800      	cmp	r0, #0
   1c320:	db01      	blt.n	1c326 <__aeabi_fcmplt+0xe>
   1c322:	2000      	movs	r0, #0
   1c324:	bd10      	pop	{r4, pc}
   1c326:	2001      	movs	r0, #1
   1c328:	bd10      	pop	{r4, pc}
   1c32a:	46c0      	nop			; (mov r8, r8)

0001c32c <__aeabi_fcmple>:
   1c32c:	b510      	push	{r4, lr}
   1c32e:	f000 fbf9 	bl	1cb24 <__lesf2>
   1c332:	2800      	cmp	r0, #0
   1c334:	dd01      	ble.n	1c33a <__aeabi_fcmple+0xe>
   1c336:	2000      	movs	r0, #0
   1c338:	bd10      	pop	{r4, pc}
   1c33a:	2001      	movs	r0, #1
   1c33c:	bd10      	pop	{r4, pc}
   1c33e:	46c0      	nop			; (mov r8, r8)

0001c340 <__aeabi_fcmpgt>:
   1c340:	b510      	push	{r4, lr}
   1c342:	f000 fbaf 	bl	1caa4 <__gesf2>
   1c346:	2800      	cmp	r0, #0
   1c348:	dc01      	bgt.n	1c34e <__aeabi_fcmpgt+0xe>
   1c34a:	2000      	movs	r0, #0
   1c34c:	bd10      	pop	{r4, pc}
   1c34e:	2001      	movs	r0, #1
   1c350:	bd10      	pop	{r4, pc}
   1c352:	46c0      	nop			; (mov r8, r8)

0001c354 <__aeabi_fcmpge>:
   1c354:	b510      	push	{r4, lr}
   1c356:	f000 fba5 	bl	1caa4 <__gesf2>
   1c35a:	2800      	cmp	r0, #0
   1c35c:	da01      	bge.n	1c362 <__aeabi_fcmpge+0xe>
   1c35e:	2000      	movs	r0, #0
   1c360:	bd10      	pop	{r4, pc}
   1c362:	2001      	movs	r0, #1
   1c364:	bd10      	pop	{r4, pc}
   1c366:	46c0      	nop			; (mov r8, r8)

0001c368 <__clzsi2>:
   1c368:	211c      	movs	r1, #28
   1c36a:	2301      	movs	r3, #1
   1c36c:	041b      	lsls	r3, r3, #16
   1c36e:	4298      	cmp	r0, r3
   1c370:	d301      	bcc.n	1c376 <__clzsi2+0xe>
   1c372:	0c00      	lsrs	r0, r0, #16
   1c374:	3910      	subs	r1, #16
   1c376:	0a1b      	lsrs	r3, r3, #8
   1c378:	4298      	cmp	r0, r3
   1c37a:	d301      	bcc.n	1c380 <__clzsi2+0x18>
   1c37c:	0a00      	lsrs	r0, r0, #8
   1c37e:	3908      	subs	r1, #8
   1c380:	091b      	lsrs	r3, r3, #4
   1c382:	4298      	cmp	r0, r3
   1c384:	d301      	bcc.n	1c38a <__clzsi2+0x22>
   1c386:	0900      	lsrs	r0, r0, #4
   1c388:	3904      	subs	r1, #4
   1c38a:	a202      	add	r2, pc, #8	; (adr r2, 1c394 <__clzsi2+0x2c>)
   1c38c:	5c10      	ldrb	r0, [r2, r0]
   1c38e:	1840      	adds	r0, r0, r1
   1c390:	4770      	bx	lr
   1c392:	46c0      	nop			; (mov r8, r8)
   1c394:	02020304 	.word	0x02020304
   1c398:	01010101 	.word	0x01010101
	...

0001c3a4 <__ctzsi2>:
   1c3a4:	4241      	negs	r1, r0
   1c3a6:	4008      	ands	r0, r1
   1c3a8:	211c      	movs	r1, #28
   1c3aa:	2301      	movs	r3, #1
   1c3ac:	041b      	lsls	r3, r3, #16
   1c3ae:	4298      	cmp	r0, r3
   1c3b0:	d301      	bcc.n	1c3b6 <__ctzsi2+0x12>
   1c3b2:	0c00      	lsrs	r0, r0, #16
   1c3b4:	3910      	subs	r1, #16
   1c3b6:	0a1b      	lsrs	r3, r3, #8
   1c3b8:	4298      	cmp	r0, r3
   1c3ba:	d301      	bcc.n	1c3c0 <__ctzsi2+0x1c>
   1c3bc:	0a00      	lsrs	r0, r0, #8
   1c3be:	3908      	subs	r1, #8
   1c3c0:	091b      	lsrs	r3, r3, #4
   1c3c2:	4298      	cmp	r0, r3
   1c3c4:	d301      	bcc.n	1c3ca <__ctzsi2+0x26>
   1c3c6:	0900      	lsrs	r0, r0, #4
   1c3c8:	3904      	subs	r1, #4
   1c3ca:	a202      	add	r2, pc, #8	; (adr r2, 1c3d4 <__ctzsi2+0x30>)
   1c3cc:	5c10      	ldrb	r0, [r2, r0]
   1c3ce:	1a40      	subs	r0, r0, r1
   1c3d0:	4770      	bx	lr
   1c3d2:	46c0      	nop			; (mov r8, r8)
   1c3d4:	1d1d1c1b 	.word	0x1d1d1c1b
   1c3d8:	1e1e1e1e 	.word	0x1e1e1e1e
   1c3dc:	1f1f1f1f 	.word	0x1f1f1f1f
   1c3e0:	1f1f1f1f 	.word	0x1f1f1f1f

0001c3e4 <__aeabi_lmul>:
   1c3e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c3e6:	46ce      	mov	lr, r9
   1c3e8:	4647      	mov	r7, r8
   1c3ea:	0415      	lsls	r5, r2, #16
   1c3ec:	0c2d      	lsrs	r5, r5, #16
   1c3ee:	002e      	movs	r6, r5
   1c3f0:	b580      	push	{r7, lr}
   1c3f2:	0407      	lsls	r7, r0, #16
   1c3f4:	0c14      	lsrs	r4, r2, #16
   1c3f6:	0c3f      	lsrs	r7, r7, #16
   1c3f8:	4699      	mov	r9, r3
   1c3fa:	0c03      	lsrs	r3, r0, #16
   1c3fc:	437e      	muls	r6, r7
   1c3fe:	435d      	muls	r5, r3
   1c400:	4367      	muls	r7, r4
   1c402:	4363      	muls	r3, r4
   1c404:	197f      	adds	r7, r7, r5
   1c406:	0c34      	lsrs	r4, r6, #16
   1c408:	19e4      	adds	r4, r4, r7
   1c40a:	469c      	mov	ip, r3
   1c40c:	42a5      	cmp	r5, r4
   1c40e:	d903      	bls.n	1c418 <__aeabi_lmul+0x34>
   1c410:	2380      	movs	r3, #128	; 0x80
   1c412:	025b      	lsls	r3, r3, #9
   1c414:	4698      	mov	r8, r3
   1c416:	44c4      	add	ip, r8
   1c418:	464b      	mov	r3, r9
   1c41a:	4351      	muls	r1, r2
   1c41c:	4343      	muls	r3, r0
   1c41e:	0436      	lsls	r6, r6, #16
   1c420:	0c36      	lsrs	r6, r6, #16
   1c422:	0c25      	lsrs	r5, r4, #16
   1c424:	0424      	lsls	r4, r4, #16
   1c426:	4465      	add	r5, ip
   1c428:	19a4      	adds	r4, r4, r6
   1c42a:	1859      	adds	r1, r3, r1
   1c42c:	1949      	adds	r1, r1, r5
   1c42e:	0020      	movs	r0, r4
   1c430:	bc0c      	pop	{r2, r3}
   1c432:	4690      	mov	r8, r2
   1c434:	4699      	mov	r9, r3
   1c436:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001c438 <__aeabi_f2uiz>:
   1c438:	219e      	movs	r1, #158	; 0x9e
   1c43a:	b510      	push	{r4, lr}
   1c43c:	05c9      	lsls	r1, r1, #23
   1c43e:	1c04      	adds	r4, r0, #0
   1c440:	f7ff ff88 	bl	1c354 <__aeabi_fcmpge>
   1c444:	2800      	cmp	r0, #0
   1c446:	d103      	bne.n	1c450 <__aeabi_f2uiz+0x18>
   1c448:	1c20      	adds	r0, r4, #0
   1c44a:	f000 fe69 	bl	1d120 <__aeabi_f2iz>
   1c44e:	bd10      	pop	{r4, pc}
   1c450:	219e      	movs	r1, #158	; 0x9e
   1c452:	1c20      	adds	r0, r4, #0
   1c454:	05c9      	lsls	r1, r1, #23
   1c456:	f000 fcc7 	bl	1cde8 <__aeabi_fsub>
   1c45a:	f000 fe61 	bl	1d120 <__aeabi_f2iz>
   1c45e:	2380      	movs	r3, #128	; 0x80
   1c460:	061b      	lsls	r3, r3, #24
   1c462:	469c      	mov	ip, r3
   1c464:	4460      	add	r0, ip
   1c466:	e7f2      	b.n	1c44e <__aeabi_f2uiz+0x16>

0001c468 <__aeabi_d2uiz>:
   1c468:	b570      	push	{r4, r5, r6, lr}
   1c46a:	2200      	movs	r2, #0
   1c46c:	4b0c      	ldr	r3, [pc, #48]	; (1c4a0 <__aeabi_d2uiz+0x38>)
   1c46e:	0004      	movs	r4, r0
   1c470:	000d      	movs	r5, r1
   1c472:	f7ff ff35 	bl	1c2e0 <__aeabi_dcmpge>
   1c476:	2800      	cmp	r0, #0
   1c478:	d104      	bne.n	1c484 <__aeabi_d2uiz+0x1c>
   1c47a:	0020      	movs	r0, r4
   1c47c:	0029      	movs	r1, r5
   1c47e:	f002 fbff 	bl	1ec80 <__aeabi_d2iz>
   1c482:	bd70      	pop	{r4, r5, r6, pc}
   1c484:	4b06      	ldr	r3, [pc, #24]	; (1c4a0 <__aeabi_d2uiz+0x38>)
   1c486:	2200      	movs	r2, #0
   1c488:	0020      	movs	r0, r4
   1c48a:	0029      	movs	r1, r5
   1c48c:	f002 f8c2 	bl	1e614 <__aeabi_dsub>
   1c490:	f002 fbf6 	bl	1ec80 <__aeabi_d2iz>
   1c494:	2380      	movs	r3, #128	; 0x80
   1c496:	061b      	lsls	r3, r3, #24
   1c498:	469c      	mov	ip, r3
   1c49a:	4460      	add	r0, ip
   1c49c:	e7f1      	b.n	1c482 <__aeabi_d2uiz+0x1a>
   1c49e:	46c0      	nop			; (mov r8, r8)
   1c4a0:	41e00000 	.word	0x41e00000

0001c4a4 <__aeabi_fadd>:
   1c4a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c4a6:	46c6      	mov	lr, r8
   1c4a8:	024e      	lsls	r6, r1, #9
   1c4aa:	0247      	lsls	r7, r0, #9
   1c4ac:	0a76      	lsrs	r6, r6, #9
   1c4ae:	0a7b      	lsrs	r3, r7, #9
   1c4b0:	0044      	lsls	r4, r0, #1
   1c4b2:	0fc5      	lsrs	r5, r0, #31
   1c4b4:	00f7      	lsls	r7, r6, #3
   1c4b6:	0048      	lsls	r0, r1, #1
   1c4b8:	4698      	mov	r8, r3
   1c4ba:	b500      	push	{lr}
   1c4bc:	0e24      	lsrs	r4, r4, #24
   1c4be:	002a      	movs	r2, r5
   1c4c0:	00db      	lsls	r3, r3, #3
   1c4c2:	0e00      	lsrs	r0, r0, #24
   1c4c4:	0fc9      	lsrs	r1, r1, #31
   1c4c6:	46bc      	mov	ip, r7
   1c4c8:	428d      	cmp	r5, r1
   1c4ca:	d067      	beq.n	1c59c <__aeabi_fadd+0xf8>
   1c4cc:	1a22      	subs	r2, r4, r0
   1c4ce:	2a00      	cmp	r2, #0
   1c4d0:	dc00      	bgt.n	1c4d4 <__aeabi_fadd+0x30>
   1c4d2:	e0a5      	b.n	1c620 <__aeabi_fadd+0x17c>
   1c4d4:	2800      	cmp	r0, #0
   1c4d6:	d13a      	bne.n	1c54e <__aeabi_fadd+0xaa>
   1c4d8:	2f00      	cmp	r7, #0
   1c4da:	d100      	bne.n	1c4de <__aeabi_fadd+0x3a>
   1c4dc:	e093      	b.n	1c606 <__aeabi_fadd+0x162>
   1c4de:	1e51      	subs	r1, r2, #1
   1c4e0:	2900      	cmp	r1, #0
   1c4e2:	d000      	beq.n	1c4e6 <__aeabi_fadd+0x42>
   1c4e4:	e0bc      	b.n	1c660 <__aeabi_fadd+0x1bc>
   1c4e6:	2401      	movs	r4, #1
   1c4e8:	1bdb      	subs	r3, r3, r7
   1c4ea:	015a      	lsls	r2, r3, #5
   1c4ec:	d546      	bpl.n	1c57c <__aeabi_fadd+0xd8>
   1c4ee:	019b      	lsls	r3, r3, #6
   1c4f0:	099e      	lsrs	r6, r3, #6
   1c4f2:	0030      	movs	r0, r6
   1c4f4:	f7ff ff38 	bl	1c368 <__clzsi2>
   1c4f8:	3805      	subs	r0, #5
   1c4fa:	4086      	lsls	r6, r0
   1c4fc:	4284      	cmp	r4, r0
   1c4fe:	dd00      	ble.n	1c502 <__aeabi_fadd+0x5e>
   1c500:	e09d      	b.n	1c63e <__aeabi_fadd+0x19a>
   1c502:	1b04      	subs	r4, r0, r4
   1c504:	0032      	movs	r2, r6
   1c506:	2020      	movs	r0, #32
   1c508:	3401      	adds	r4, #1
   1c50a:	40e2      	lsrs	r2, r4
   1c50c:	1b04      	subs	r4, r0, r4
   1c50e:	40a6      	lsls	r6, r4
   1c510:	0033      	movs	r3, r6
   1c512:	1e5e      	subs	r6, r3, #1
   1c514:	41b3      	sbcs	r3, r6
   1c516:	2400      	movs	r4, #0
   1c518:	4313      	orrs	r3, r2
   1c51a:	075a      	lsls	r2, r3, #29
   1c51c:	d004      	beq.n	1c528 <__aeabi_fadd+0x84>
   1c51e:	220f      	movs	r2, #15
   1c520:	401a      	ands	r2, r3
   1c522:	2a04      	cmp	r2, #4
   1c524:	d000      	beq.n	1c528 <__aeabi_fadd+0x84>
   1c526:	3304      	adds	r3, #4
   1c528:	015a      	lsls	r2, r3, #5
   1c52a:	d529      	bpl.n	1c580 <__aeabi_fadd+0xdc>
   1c52c:	3401      	adds	r4, #1
   1c52e:	2cff      	cmp	r4, #255	; 0xff
   1c530:	d100      	bne.n	1c534 <__aeabi_fadd+0x90>
   1c532:	e081      	b.n	1c638 <__aeabi_fadd+0x194>
   1c534:	002a      	movs	r2, r5
   1c536:	019b      	lsls	r3, r3, #6
   1c538:	0a5b      	lsrs	r3, r3, #9
   1c53a:	b2e4      	uxtb	r4, r4
   1c53c:	025b      	lsls	r3, r3, #9
   1c53e:	05e4      	lsls	r4, r4, #23
   1c540:	0a58      	lsrs	r0, r3, #9
   1c542:	07d2      	lsls	r2, r2, #31
   1c544:	4320      	orrs	r0, r4
   1c546:	4310      	orrs	r0, r2
   1c548:	bc04      	pop	{r2}
   1c54a:	4690      	mov	r8, r2
   1c54c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c54e:	2cff      	cmp	r4, #255	; 0xff
   1c550:	d0e3      	beq.n	1c51a <__aeabi_fadd+0x76>
   1c552:	2180      	movs	r1, #128	; 0x80
   1c554:	0038      	movs	r0, r7
   1c556:	04c9      	lsls	r1, r1, #19
   1c558:	4308      	orrs	r0, r1
   1c55a:	4684      	mov	ip, r0
   1c55c:	2a1b      	cmp	r2, #27
   1c55e:	dd00      	ble.n	1c562 <__aeabi_fadd+0xbe>
   1c560:	e082      	b.n	1c668 <__aeabi_fadd+0x1c4>
   1c562:	2020      	movs	r0, #32
   1c564:	4661      	mov	r1, ip
   1c566:	40d1      	lsrs	r1, r2
   1c568:	1a82      	subs	r2, r0, r2
   1c56a:	4660      	mov	r0, ip
   1c56c:	4090      	lsls	r0, r2
   1c56e:	0002      	movs	r2, r0
   1c570:	1e50      	subs	r0, r2, #1
   1c572:	4182      	sbcs	r2, r0
   1c574:	430a      	orrs	r2, r1
   1c576:	1a9b      	subs	r3, r3, r2
   1c578:	015a      	lsls	r2, r3, #5
   1c57a:	d4b8      	bmi.n	1c4ee <__aeabi_fadd+0x4a>
   1c57c:	075a      	lsls	r2, r3, #29
   1c57e:	d1ce      	bne.n	1c51e <__aeabi_fadd+0x7a>
   1c580:	08de      	lsrs	r6, r3, #3
   1c582:	002a      	movs	r2, r5
   1c584:	2cff      	cmp	r4, #255	; 0xff
   1c586:	d13a      	bne.n	1c5fe <__aeabi_fadd+0x15a>
   1c588:	2e00      	cmp	r6, #0
   1c58a:	d100      	bne.n	1c58e <__aeabi_fadd+0xea>
   1c58c:	e0ae      	b.n	1c6ec <__aeabi_fadd+0x248>
   1c58e:	2380      	movs	r3, #128	; 0x80
   1c590:	03db      	lsls	r3, r3, #15
   1c592:	4333      	orrs	r3, r6
   1c594:	025b      	lsls	r3, r3, #9
   1c596:	0a5b      	lsrs	r3, r3, #9
   1c598:	24ff      	movs	r4, #255	; 0xff
   1c59a:	e7cf      	b.n	1c53c <__aeabi_fadd+0x98>
   1c59c:	1a21      	subs	r1, r4, r0
   1c59e:	2900      	cmp	r1, #0
   1c5a0:	dd52      	ble.n	1c648 <__aeabi_fadd+0x1a4>
   1c5a2:	2800      	cmp	r0, #0
   1c5a4:	d031      	beq.n	1c60a <__aeabi_fadd+0x166>
   1c5a6:	2cff      	cmp	r4, #255	; 0xff
   1c5a8:	d0b7      	beq.n	1c51a <__aeabi_fadd+0x76>
   1c5aa:	2080      	movs	r0, #128	; 0x80
   1c5ac:	003e      	movs	r6, r7
   1c5ae:	04c0      	lsls	r0, r0, #19
   1c5b0:	4306      	orrs	r6, r0
   1c5b2:	46b4      	mov	ip, r6
   1c5b4:	291b      	cmp	r1, #27
   1c5b6:	dd00      	ble.n	1c5ba <__aeabi_fadd+0x116>
   1c5b8:	e0aa      	b.n	1c710 <__aeabi_fadd+0x26c>
   1c5ba:	2620      	movs	r6, #32
   1c5bc:	4660      	mov	r0, ip
   1c5be:	40c8      	lsrs	r0, r1
   1c5c0:	1a71      	subs	r1, r6, r1
   1c5c2:	4666      	mov	r6, ip
   1c5c4:	408e      	lsls	r6, r1
   1c5c6:	0031      	movs	r1, r6
   1c5c8:	1e4e      	subs	r6, r1, #1
   1c5ca:	41b1      	sbcs	r1, r6
   1c5cc:	4301      	orrs	r1, r0
   1c5ce:	185b      	adds	r3, r3, r1
   1c5d0:	0159      	lsls	r1, r3, #5
   1c5d2:	d5d3      	bpl.n	1c57c <__aeabi_fadd+0xd8>
   1c5d4:	3401      	adds	r4, #1
   1c5d6:	2cff      	cmp	r4, #255	; 0xff
   1c5d8:	d100      	bne.n	1c5dc <__aeabi_fadd+0x138>
   1c5da:	e087      	b.n	1c6ec <__aeabi_fadd+0x248>
   1c5dc:	2201      	movs	r2, #1
   1c5de:	4978      	ldr	r1, [pc, #480]	; (1c7c0 <__aeabi_fadd+0x31c>)
   1c5e0:	401a      	ands	r2, r3
   1c5e2:	085b      	lsrs	r3, r3, #1
   1c5e4:	400b      	ands	r3, r1
   1c5e6:	4313      	orrs	r3, r2
   1c5e8:	e797      	b.n	1c51a <__aeabi_fadd+0x76>
   1c5ea:	2c00      	cmp	r4, #0
   1c5ec:	d000      	beq.n	1c5f0 <__aeabi_fadd+0x14c>
   1c5ee:	e0a7      	b.n	1c740 <__aeabi_fadd+0x29c>
   1c5f0:	2b00      	cmp	r3, #0
   1c5f2:	d000      	beq.n	1c5f6 <__aeabi_fadd+0x152>
   1c5f4:	e0b6      	b.n	1c764 <__aeabi_fadd+0x2c0>
   1c5f6:	1e3b      	subs	r3, r7, #0
   1c5f8:	d162      	bne.n	1c6c0 <__aeabi_fadd+0x21c>
   1c5fa:	2600      	movs	r6, #0
   1c5fc:	2200      	movs	r2, #0
   1c5fe:	0273      	lsls	r3, r6, #9
   1c600:	0a5b      	lsrs	r3, r3, #9
   1c602:	b2e4      	uxtb	r4, r4
   1c604:	e79a      	b.n	1c53c <__aeabi_fadd+0x98>
   1c606:	0014      	movs	r4, r2
   1c608:	e787      	b.n	1c51a <__aeabi_fadd+0x76>
   1c60a:	2f00      	cmp	r7, #0
   1c60c:	d04d      	beq.n	1c6aa <__aeabi_fadd+0x206>
   1c60e:	1e48      	subs	r0, r1, #1
   1c610:	2800      	cmp	r0, #0
   1c612:	d157      	bne.n	1c6c4 <__aeabi_fadd+0x220>
   1c614:	4463      	add	r3, ip
   1c616:	2401      	movs	r4, #1
   1c618:	015a      	lsls	r2, r3, #5
   1c61a:	d5af      	bpl.n	1c57c <__aeabi_fadd+0xd8>
   1c61c:	2402      	movs	r4, #2
   1c61e:	e7dd      	b.n	1c5dc <__aeabi_fadd+0x138>
   1c620:	2a00      	cmp	r2, #0
   1c622:	d124      	bne.n	1c66e <__aeabi_fadd+0x1ca>
   1c624:	1c62      	adds	r2, r4, #1
   1c626:	b2d2      	uxtb	r2, r2
   1c628:	2a01      	cmp	r2, #1
   1c62a:	ddde      	ble.n	1c5ea <__aeabi_fadd+0x146>
   1c62c:	1bde      	subs	r6, r3, r7
   1c62e:	0172      	lsls	r2, r6, #5
   1c630:	d535      	bpl.n	1c69e <__aeabi_fadd+0x1fa>
   1c632:	1afe      	subs	r6, r7, r3
   1c634:	000d      	movs	r5, r1
   1c636:	e75c      	b.n	1c4f2 <__aeabi_fadd+0x4e>
   1c638:	002a      	movs	r2, r5
   1c63a:	2300      	movs	r3, #0
   1c63c:	e77e      	b.n	1c53c <__aeabi_fadd+0x98>
   1c63e:	0033      	movs	r3, r6
   1c640:	4a60      	ldr	r2, [pc, #384]	; (1c7c4 <__aeabi_fadd+0x320>)
   1c642:	1a24      	subs	r4, r4, r0
   1c644:	4013      	ands	r3, r2
   1c646:	e768      	b.n	1c51a <__aeabi_fadd+0x76>
   1c648:	2900      	cmp	r1, #0
   1c64a:	d163      	bne.n	1c714 <__aeabi_fadd+0x270>
   1c64c:	1c61      	adds	r1, r4, #1
   1c64e:	b2c8      	uxtb	r0, r1
   1c650:	2801      	cmp	r0, #1
   1c652:	dd4e      	ble.n	1c6f2 <__aeabi_fadd+0x24e>
   1c654:	29ff      	cmp	r1, #255	; 0xff
   1c656:	d049      	beq.n	1c6ec <__aeabi_fadd+0x248>
   1c658:	4463      	add	r3, ip
   1c65a:	085b      	lsrs	r3, r3, #1
   1c65c:	000c      	movs	r4, r1
   1c65e:	e75c      	b.n	1c51a <__aeabi_fadd+0x76>
   1c660:	2aff      	cmp	r2, #255	; 0xff
   1c662:	d041      	beq.n	1c6e8 <__aeabi_fadd+0x244>
   1c664:	000a      	movs	r2, r1
   1c666:	e779      	b.n	1c55c <__aeabi_fadd+0xb8>
   1c668:	2201      	movs	r2, #1
   1c66a:	1a9b      	subs	r3, r3, r2
   1c66c:	e784      	b.n	1c578 <__aeabi_fadd+0xd4>
   1c66e:	2c00      	cmp	r4, #0
   1c670:	d01d      	beq.n	1c6ae <__aeabi_fadd+0x20a>
   1c672:	28ff      	cmp	r0, #255	; 0xff
   1c674:	d022      	beq.n	1c6bc <__aeabi_fadd+0x218>
   1c676:	2480      	movs	r4, #128	; 0x80
   1c678:	04e4      	lsls	r4, r4, #19
   1c67a:	4252      	negs	r2, r2
   1c67c:	4323      	orrs	r3, r4
   1c67e:	2a1b      	cmp	r2, #27
   1c680:	dd00      	ble.n	1c684 <__aeabi_fadd+0x1e0>
   1c682:	e08a      	b.n	1c79a <__aeabi_fadd+0x2f6>
   1c684:	001c      	movs	r4, r3
   1c686:	2520      	movs	r5, #32
   1c688:	40d4      	lsrs	r4, r2
   1c68a:	1aaa      	subs	r2, r5, r2
   1c68c:	4093      	lsls	r3, r2
   1c68e:	1e5a      	subs	r2, r3, #1
   1c690:	4193      	sbcs	r3, r2
   1c692:	4323      	orrs	r3, r4
   1c694:	4662      	mov	r2, ip
   1c696:	0004      	movs	r4, r0
   1c698:	1ad3      	subs	r3, r2, r3
   1c69a:	000d      	movs	r5, r1
   1c69c:	e725      	b.n	1c4ea <__aeabi_fadd+0x46>
   1c69e:	2e00      	cmp	r6, #0
   1c6a0:	d000      	beq.n	1c6a4 <__aeabi_fadd+0x200>
   1c6a2:	e726      	b.n	1c4f2 <__aeabi_fadd+0x4e>
   1c6a4:	2200      	movs	r2, #0
   1c6a6:	2400      	movs	r4, #0
   1c6a8:	e7a9      	b.n	1c5fe <__aeabi_fadd+0x15a>
   1c6aa:	000c      	movs	r4, r1
   1c6ac:	e735      	b.n	1c51a <__aeabi_fadd+0x76>
   1c6ae:	2b00      	cmp	r3, #0
   1c6b0:	d04d      	beq.n	1c74e <__aeabi_fadd+0x2aa>
   1c6b2:	43d2      	mvns	r2, r2
   1c6b4:	2a00      	cmp	r2, #0
   1c6b6:	d0ed      	beq.n	1c694 <__aeabi_fadd+0x1f0>
   1c6b8:	28ff      	cmp	r0, #255	; 0xff
   1c6ba:	d1e0      	bne.n	1c67e <__aeabi_fadd+0x1da>
   1c6bc:	4663      	mov	r3, ip
   1c6be:	24ff      	movs	r4, #255	; 0xff
   1c6c0:	000d      	movs	r5, r1
   1c6c2:	e72a      	b.n	1c51a <__aeabi_fadd+0x76>
   1c6c4:	29ff      	cmp	r1, #255	; 0xff
   1c6c6:	d00f      	beq.n	1c6e8 <__aeabi_fadd+0x244>
   1c6c8:	0001      	movs	r1, r0
   1c6ca:	e773      	b.n	1c5b4 <__aeabi_fadd+0x110>
   1c6cc:	2b00      	cmp	r3, #0
   1c6ce:	d061      	beq.n	1c794 <__aeabi_fadd+0x2f0>
   1c6d0:	24ff      	movs	r4, #255	; 0xff
   1c6d2:	2f00      	cmp	r7, #0
   1c6d4:	d100      	bne.n	1c6d8 <__aeabi_fadd+0x234>
   1c6d6:	e720      	b.n	1c51a <__aeabi_fadd+0x76>
   1c6d8:	2280      	movs	r2, #128	; 0x80
   1c6da:	4641      	mov	r1, r8
   1c6dc:	03d2      	lsls	r2, r2, #15
   1c6de:	4211      	tst	r1, r2
   1c6e0:	d002      	beq.n	1c6e8 <__aeabi_fadd+0x244>
   1c6e2:	4216      	tst	r6, r2
   1c6e4:	d100      	bne.n	1c6e8 <__aeabi_fadd+0x244>
   1c6e6:	003b      	movs	r3, r7
   1c6e8:	24ff      	movs	r4, #255	; 0xff
   1c6ea:	e716      	b.n	1c51a <__aeabi_fadd+0x76>
   1c6ec:	24ff      	movs	r4, #255	; 0xff
   1c6ee:	2300      	movs	r3, #0
   1c6f0:	e724      	b.n	1c53c <__aeabi_fadd+0x98>
   1c6f2:	2c00      	cmp	r4, #0
   1c6f4:	d1ea      	bne.n	1c6cc <__aeabi_fadd+0x228>
   1c6f6:	2b00      	cmp	r3, #0
   1c6f8:	d058      	beq.n	1c7ac <__aeabi_fadd+0x308>
   1c6fa:	2f00      	cmp	r7, #0
   1c6fc:	d100      	bne.n	1c700 <__aeabi_fadd+0x25c>
   1c6fe:	e70c      	b.n	1c51a <__aeabi_fadd+0x76>
   1c700:	4463      	add	r3, ip
   1c702:	015a      	lsls	r2, r3, #5
   1c704:	d400      	bmi.n	1c708 <__aeabi_fadd+0x264>
   1c706:	e739      	b.n	1c57c <__aeabi_fadd+0xd8>
   1c708:	4a2e      	ldr	r2, [pc, #184]	; (1c7c4 <__aeabi_fadd+0x320>)
   1c70a:	000c      	movs	r4, r1
   1c70c:	4013      	ands	r3, r2
   1c70e:	e704      	b.n	1c51a <__aeabi_fadd+0x76>
   1c710:	2101      	movs	r1, #1
   1c712:	e75c      	b.n	1c5ce <__aeabi_fadd+0x12a>
   1c714:	2c00      	cmp	r4, #0
   1c716:	d11e      	bne.n	1c756 <__aeabi_fadd+0x2b2>
   1c718:	2b00      	cmp	r3, #0
   1c71a:	d040      	beq.n	1c79e <__aeabi_fadd+0x2fa>
   1c71c:	43c9      	mvns	r1, r1
   1c71e:	2900      	cmp	r1, #0
   1c720:	d00b      	beq.n	1c73a <__aeabi_fadd+0x296>
   1c722:	28ff      	cmp	r0, #255	; 0xff
   1c724:	d036      	beq.n	1c794 <__aeabi_fadd+0x2f0>
   1c726:	291b      	cmp	r1, #27
   1c728:	dc47      	bgt.n	1c7ba <__aeabi_fadd+0x316>
   1c72a:	001c      	movs	r4, r3
   1c72c:	2620      	movs	r6, #32
   1c72e:	40cc      	lsrs	r4, r1
   1c730:	1a71      	subs	r1, r6, r1
   1c732:	408b      	lsls	r3, r1
   1c734:	1e59      	subs	r1, r3, #1
   1c736:	418b      	sbcs	r3, r1
   1c738:	4323      	orrs	r3, r4
   1c73a:	4463      	add	r3, ip
   1c73c:	0004      	movs	r4, r0
   1c73e:	e747      	b.n	1c5d0 <__aeabi_fadd+0x12c>
   1c740:	2b00      	cmp	r3, #0
   1c742:	d118      	bne.n	1c776 <__aeabi_fadd+0x2d2>
   1c744:	1e3b      	subs	r3, r7, #0
   1c746:	d02d      	beq.n	1c7a4 <__aeabi_fadd+0x300>
   1c748:	000d      	movs	r5, r1
   1c74a:	24ff      	movs	r4, #255	; 0xff
   1c74c:	e6e5      	b.n	1c51a <__aeabi_fadd+0x76>
   1c74e:	003b      	movs	r3, r7
   1c750:	0004      	movs	r4, r0
   1c752:	000d      	movs	r5, r1
   1c754:	e6e1      	b.n	1c51a <__aeabi_fadd+0x76>
   1c756:	28ff      	cmp	r0, #255	; 0xff
   1c758:	d01c      	beq.n	1c794 <__aeabi_fadd+0x2f0>
   1c75a:	2480      	movs	r4, #128	; 0x80
   1c75c:	04e4      	lsls	r4, r4, #19
   1c75e:	4249      	negs	r1, r1
   1c760:	4323      	orrs	r3, r4
   1c762:	e7e0      	b.n	1c726 <__aeabi_fadd+0x282>
   1c764:	2f00      	cmp	r7, #0
   1c766:	d100      	bne.n	1c76a <__aeabi_fadd+0x2c6>
   1c768:	e6d7      	b.n	1c51a <__aeabi_fadd+0x76>
   1c76a:	1bde      	subs	r6, r3, r7
   1c76c:	0172      	lsls	r2, r6, #5
   1c76e:	d51f      	bpl.n	1c7b0 <__aeabi_fadd+0x30c>
   1c770:	1afb      	subs	r3, r7, r3
   1c772:	000d      	movs	r5, r1
   1c774:	e6d1      	b.n	1c51a <__aeabi_fadd+0x76>
   1c776:	24ff      	movs	r4, #255	; 0xff
   1c778:	2f00      	cmp	r7, #0
   1c77a:	d100      	bne.n	1c77e <__aeabi_fadd+0x2da>
   1c77c:	e6cd      	b.n	1c51a <__aeabi_fadd+0x76>
   1c77e:	2280      	movs	r2, #128	; 0x80
   1c780:	4640      	mov	r0, r8
   1c782:	03d2      	lsls	r2, r2, #15
   1c784:	4210      	tst	r0, r2
   1c786:	d0af      	beq.n	1c6e8 <__aeabi_fadd+0x244>
   1c788:	4216      	tst	r6, r2
   1c78a:	d1ad      	bne.n	1c6e8 <__aeabi_fadd+0x244>
   1c78c:	003b      	movs	r3, r7
   1c78e:	000d      	movs	r5, r1
   1c790:	24ff      	movs	r4, #255	; 0xff
   1c792:	e6c2      	b.n	1c51a <__aeabi_fadd+0x76>
   1c794:	4663      	mov	r3, ip
   1c796:	24ff      	movs	r4, #255	; 0xff
   1c798:	e6bf      	b.n	1c51a <__aeabi_fadd+0x76>
   1c79a:	2301      	movs	r3, #1
   1c79c:	e77a      	b.n	1c694 <__aeabi_fadd+0x1f0>
   1c79e:	003b      	movs	r3, r7
   1c7a0:	0004      	movs	r4, r0
   1c7a2:	e6ba      	b.n	1c51a <__aeabi_fadd+0x76>
   1c7a4:	2680      	movs	r6, #128	; 0x80
   1c7a6:	2200      	movs	r2, #0
   1c7a8:	03f6      	lsls	r6, r6, #15
   1c7aa:	e6f0      	b.n	1c58e <__aeabi_fadd+0xea>
   1c7ac:	003b      	movs	r3, r7
   1c7ae:	e6b4      	b.n	1c51a <__aeabi_fadd+0x76>
   1c7b0:	1e33      	subs	r3, r6, #0
   1c7b2:	d000      	beq.n	1c7b6 <__aeabi_fadd+0x312>
   1c7b4:	e6e2      	b.n	1c57c <__aeabi_fadd+0xd8>
   1c7b6:	2200      	movs	r2, #0
   1c7b8:	e721      	b.n	1c5fe <__aeabi_fadd+0x15a>
   1c7ba:	2301      	movs	r3, #1
   1c7bc:	e7bd      	b.n	1c73a <__aeabi_fadd+0x296>
   1c7be:	46c0      	nop			; (mov r8, r8)
   1c7c0:	7dffffff 	.word	0x7dffffff
   1c7c4:	fbffffff 	.word	0xfbffffff

0001c7c8 <__aeabi_fdiv>:
   1c7c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c7ca:	4657      	mov	r7, sl
   1c7cc:	464e      	mov	r6, r9
   1c7ce:	46de      	mov	lr, fp
   1c7d0:	4645      	mov	r5, r8
   1c7d2:	b5e0      	push	{r5, r6, r7, lr}
   1c7d4:	0244      	lsls	r4, r0, #9
   1c7d6:	0043      	lsls	r3, r0, #1
   1c7d8:	0fc6      	lsrs	r6, r0, #31
   1c7da:	b083      	sub	sp, #12
   1c7dc:	1c0f      	adds	r7, r1, #0
   1c7de:	0a64      	lsrs	r4, r4, #9
   1c7e0:	0e1b      	lsrs	r3, r3, #24
   1c7e2:	46b2      	mov	sl, r6
   1c7e4:	d053      	beq.n	1c88e <__aeabi_fdiv+0xc6>
   1c7e6:	2bff      	cmp	r3, #255	; 0xff
   1c7e8:	d027      	beq.n	1c83a <__aeabi_fdiv+0x72>
   1c7ea:	2280      	movs	r2, #128	; 0x80
   1c7ec:	00e4      	lsls	r4, r4, #3
   1c7ee:	04d2      	lsls	r2, r2, #19
   1c7f0:	4314      	orrs	r4, r2
   1c7f2:	227f      	movs	r2, #127	; 0x7f
   1c7f4:	4252      	negs	r2, r2
   1c7f6:	4690      	mov	r8, r2
   1c7f8:	4498      	add	r8, r3
   1c7fa:	2300      	movs	r3, #0
   1c7fc:	4699      	mov	r9, r3
   1c7fe:	469b      	mov	fp, r3
   1c800:	027d      	lsls	r5, r7, #9
   1c802:	0078      	lsls	r0, r7, #1
   1c804:	0ffb      	lsrs	r3, r7, #31
   1c806:	0a6d      	lsrs	r5, r5, #9
   1c808:	0e00      	lsrs	r0, r0, #24
   1c80a:	9300      	str	r3, [sp, #0]
   1c80c:	d024      	beq.n	1c858 <__aeabi_fdiv+0x90>
   1c80e:	28ff      	cmp	r0, #255	; 0xff
   1c810:	d046      	beq.n	1c8a0 <__aeabi_fdiv+0xd8>
   1c812:	2380      	movs	r3, #128	; 0x80
   1c814:	2100      	movs	r1, #0
   1c816:	00ed      	lsls	r5, r5, #3
   1c818:	04db      	lsls	r3, r3, #19
   1c81a:	431d      	orrs	r5, r3
   1c81c:	387f      	subs	r0, #127	; 0x7f
   1c81e:	4647      	mov	r7, r8
   1c820:	1a38      	subs	r0, r7, r0
   1c822:	464f      	mov	r7, r9
   1c824:	430f      	orrs	r7, r1
   1c826:	00bf      	lsls	r7, r7, #2
   1c828:	46b9      	mov	r9, r7
   1c82a:	0033      	movs	r3, r6
   1c82c:	9a00      	ldr	r2, [sp, #0]
   1c82e:	4f87      	ldr	r7, [pc, #540]	; (1ca4c <__aeabi_fdiv+0x284>)
   1c830:	4053      	eors	r3, r2
   1c832:	464a      	mov	r2, r9
   1c834:	58ba      	ldr	r2, [r7, r2]
   1c836:	9301      	str	r3, [sp, #4]
   1c838:	4697      	mov	pc, r2
   1c83a:	2c00      	cmp	r4, #0
   1c83c:	d14e      	bne.n	1c8dc <__aeabi_fdiv+0x114>
   1c83e:	2308      	movs	r3, #8
   1c840:	4699      	mov	r9, r3
   1c842:	33f7      	adds	r3, #247	; 0xf7
   1c844:	4698      	mov	r8, r3
   1c846:	3bfd      	subs	r3, #253	; 0xfd
   1c848:	469b      	mov	fp, r3
   1c84a:	027d      	lsls	r5, r7, #9
   1c84c:	0078      	lsls	r0, r7, #1
   1c84e:	0ffb      	lsrs	r3, r7, #31
   1c850:	0a6d      	lsrs	r5, r5, #9
   1c852:	0e00      	lsrs	r0, r0, #24
   1c854:	9300      	str	r3, [sp, #0]
   1c856:	d1da      	bne.n	1c80e <__aeabi_fdiv+0x46>
   1c858:	2d00      	cmp	r5, #0
   1c85a:	d126      	bne.n	1c8aa <__aeabi_fdiv+0xe2>
   1c85c:	2000      	movs	r0, #0
   1c85e:	2101      	movs	r1, #1
   1c860:	0033      	movs	r3, r6
   1c862:	9a00      	ldr	r2, [sp, #0]
   1c864:	4f7a      	ldr	r7, [pc, #488]	; (1ca50 <__aeabi_fdiv+0x288>)
   1c866:	4053      	eors	r3, r2
   1c868:	4642      	mov	r2, r8
   1c86a:	1a10      	subs	r0, r2, r0
   1c86c:	464a      	mov	r2, r9
   1c86e:	430a      	orrs	r2, r1
   1c870:	0092      	lsls	r2, r2, #2
   1c872:	58ba      	ldr	r2, [r7, r2]
   1c874:	001d      	movs	r5, r3
   1c876:	4697      	mov	pc, r2
   1c878:	9b00      	ldr	r3, [sp, #0]
   1c87a:	002c      	movs	r4, r5
   1c87c:	469a      	mov	sl, r3
   1c87e:	468b      	mov	fp, r1
   1c880:	465b      	mov	r3, fp
   1c882:	2b02      	cmp	r3, #2
   1c884:	d131      	bne.n	1c8ea <__aeabi_fdiv+0x122>
   1c886:	4653      	mov	r3, sl
   1c888:	21ff      	movs	r1, #255	; 0xff
   1c88a:	2400      	movs	r4, #0
   1c88c:	e038      	b.n	1c900 <__aeabi_fdiv+0x138>
   1c88e:	2c00      	cmp	r4, #0
   1c890:	d117      	bne.n	1c8c2 <__aeabi_fdiv+0xfa>
   1c892:	2304      	movs	r3, #4
   1c894:	4699      	mov	r9, r3
   1c896:	2300      	movs	r3, #0
   1c898:	4698      	mov	r8, r3
   1c89a:	3301      	adds	r3, #1
   1c89c:	469b      	mov	fp, r3
   1c89e:	e7af      	b.n	1c800 <__aeabi_fdiv+0x38>
   1c8a0:	20ff      	movs	r0, #255	; 0xff
   1c8a2:	2d00      	cmp	r5, #0
   1c8a4:	d10b      	bne.n	1c8be <__aeabi_fdiv+0xf6>
   1c8a6:	2102      	movs	r1, #2
   1c8a8:	e7da      	b.n	1c860 <__aeabi_fdiv+0x98>
   1c8aa:	0028      	movs	r0, r5
   1c8ac:	f7ff fd5c 	bl	1c368 <__clzsi2>
   1c8b0:	1f43      	subs	r3, r0, #5
   1c8b2:	409d      	lsls	r5, r3
   1c8b4:	2376      	movs	r3, #118	; 0x76
   1c8b6:	425b      	negs	r3, r3
   1c8b8:	1a18      	subs	r0, r3, r0
   1c8ba:	2100      	movs	r1, #0
   1c8bc:	e7af      	b.n	1c81e <__aeabi_fdiv+0x56>
   1c8be:	2103      	movs	r1, #3
   1c8c0:	e7ad      	b.n	1c81e <__aeabi_fdiv+0x56>
   1c8c2:	0020      	movs	r0, r4
   1c8c4:	f7ff fd50 	bl	1c368 <__clzsi2>
   1c8c8:	1f43      	subs	r3, r0, #5
   1c8ca:	409c      	lsls	r4, r3
   1c8cc:	2376      	movs	r3, #118	; 0x76
   1c8ce:	425b      	negs	r3, r3
   1c8d0:	1a1b      	subs	r3, r3, r0
   1c8d2:	4698      	mov	r8, r3
   1c8d4:	2300      	movs	r3, #0
   1c8d6:	4699      	mov	r9, r3
   1c8d8:	469b      	mov	fp, r3
   1c8da:	e791      	b.n	1c800 <__aeabi_fdiv+0x38>
   1c8dc:	230c      	movs	r3, #12
   1c8de:	4699      	mov	r9, r3
   1c8e0:	33f3      	adds	r3, #243	; 0xf3
   1c8e2:	4698      	mov	r8, r3
   1c8e4:	3bfc      	subs	r3, #252	; 0xfc
   1c8e6:	469b      	mov	fp, r3
   1c8e8:	e78a      	b.n	1c800 <__aeabi_fdiv+0x38>
   1c8ea:	2b03      	cmp	r3, #3
   1c8ec:	d100      	bne.n	1c8f0 <__aeabi_fdiv+0x128>
   1c8ee:	e0a5      	b.n	1ca3c <__aeabi_fdiv+0x274>
   1c8f0:	4655      	mov	r5, sl
   1c8f2:	2b01      	cmp	r3, #1
   1c8f4:	d000      	beq.n	1c8f8 <__aeabi_fdiv+0x130>
   1c8f6:	e081      	b.n	1c9fc <__aeabi_fdiv+0x234>
   1c8f8:	2301      	movs	r3, #1
   1c8fa:	2100      	movs	r1, #0
   1c8fc:	2400      	movs	r4, #0
   1c8fe:	402b      	ands	r3, r5
   1c900:	0264      	lsls	r4, r4, #9
   1c902:	05c9      	lsls	r1, r1, #23
   1c904:	0a60      	lsrs	r0, r4, #9
   1c906:	07db      	lsls	r3, r3, #31
   1c908:	4308      	orrs	r0, r1
   1c90a:	4318      	orrs	r0, r3
   1c90c:	b003      	add	sp, #12
   1c90e:	bc3c      	pop	{r2, r3, r4, r5}
   1c910:	4690      	mov	r8, r2
   1c912:	4699      	mov	r9, r3
   1c914:	46a2      	mov	sl, r4
   1c916:	46ab      	mov	fp, r5
   1c918:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c91a:	2480      	movs	r4, #128	; 0x80
   1c91c:	2300      	movs	r3, #0
   1c91e:	03e4      	lsls	r4, r4, #15
   1c920:	21ff      	movs	r1, #255	; 0xff
   1c922:	e7ed      	b.n	1c900 <__aeabi_fdiv+0x138>
   1c924:	21ff      	movs	r1, #255	; 0xff
   1c926:	2400      	movs	r4, #0
   1c928:	e7ea      	b.n	1c900 <__aeabi_fdiv+0x138>
   1c92a:	2301      	movs	r3, #1
   1c92c:	1a59      	subs	r1, r3, r1
   1c92e:	291b      	cmp	r1, #27
   1c930:	dd66      	ble.n	1ca00 <__aeabi_fdiv+0x238>
   1c932:	9a01      	ldr	r2, [sp, #4]
   1c934:	4013      	ands	r3, r2
   1c936:	2100      	movs	r1, #0
   1c938:	2400      	movs	r4, #0
   1c93a:	e7e1      	b.n	1c900 <__aeabi_fdiv+0x138>
   1c93c:	2380      	movs	r3, #128	; 0x80
   1c93e:	03db      	lsls	r3, r3, #15
   1c940:	421c      	tst	r4, r3
   1c942:	d038      	beq.n	1c9b6 <__aeabi_fdiv+0x1ee>
   1c944:	421d      	tst	r5, r3
   1c946:	d051      	beq.n	1c9ec <__aeabi_fdiv+0x224>
   1c948:	431c      	orrs	r4, r3
   1c94a:	0264      	lsls	r4, r4, #9
   1c94c:	0a64      	lsrs	r4, r4, #9
   1c94e:	0033      	movs	r3, r6
   1c950:	21ff      	movs	r1, #255	; 0xff
   1c952:	e7d5      	b.n	1c900 <__aeabi_fdiv+0x138>
   1c954:	0163      	lsls	r3, r4, #5
   1c956:	016c      	lsls	r4, r5, #5
   1c958:	42a3      	cmp	r3, r4
   1c95a:	d23b      	bcs.n	1c9d4 <__aeabi_fdiv+0x20c>
   1c95c:	261b      	movs	r6, #27
   1c95e:	2100      	movs	r1, #0
   1c960:	3801      	subs	r0, #1
   1c962:	2501      	movs	r5, #1
   1c964:	001f      	movs	r7, r3
   1c966:	0049      	lsls	r1, r1, #1
   1c968:	005b      	lsls	r3, r3, #1
   1c96a:	2f00      	cmp	r7, #0
   1c96c:	db01      	blt.n	1c972 <__aeabi_fdiv+0x1aa>
   1c96e:	429c      	cmp	r4, r3
   1c970:	d801      	bhi.n	1c976 <__aeabi_fdiv+0x1ae>
   1c972:	1b1b      	subs	r3, r3, r4
   1c974:	4329      	orrs	r1, r5
   1c976:	3e01      	subs	r6, #1
   1c978:	2e00      	cmp	r6, #0
   1c97a:	d1f3      	bne.n	1c964 <__aeabi_fdiv+0x19c>
   1c97c:	001c      	movs	r4, r3
   1c97e:	1e63      	subs	r3, r4, #1
   1c980:	419c      	sbcs	r4, r3
   1c982:	430c      	orrs	r4, r1
   1c984:	0001      	movs	r1, r0
   1c986:	317f      	adds	r1, #127	; 0x7f
   1c988:	2900      	cmp	r1, #0
   1c98a:	ddce      	ble.n	1c92a <__aeabi_fdiv+0x162>
   1c98c:	0763      	lsls	r3, r4, #29
   1c98e:	d004      	beq.n	1c99a <__aeabi_fdiv+0x1d2>
   1c990:	230f      	movs	r3, #15
   1c992:	4023      	ands	r3, r4
   1c994:	2b04      	cmp	r3, #4
   1c996:	d000      	beq.n	1c99a <__aeabi_fdiv+0x1d2>
   1c998:	3404      	adds	r4, #4
   1c99a:	0123      	lsls	r3, r4, #4
   1c99c:	d503      	bpl.n	1c9a6 <__aeabi_fdiv+0x1de>
   1c99e:	0001      	movs	r1, r0
   1c9a0:	4b2c      	ldr	r3, [pc, #176]	; (1ca54 <__aeabi_fdiv+0x28c>)
   1c9a2:	3180      	adds	r1, #128	; 0x80
   1c9a4:	401c      	ands	r4, r3
   1c9a6:	29fe      	cmp	r1, #254	; 0xfe
   1c9a8:	dd0d      	ble.n	1c9c6 <__aeabi_fdiv+0x1fe>
   1c9aa:	2301      	movs	r3, #1
   1c9ac:	9a01      	ldr	r2, [sp, #4]
   1c9ae:	21ff      	movs	r1, #255	; 0xff
   1c9b0:	4013      	ands	r3, r2
   1c9b2:	2400      	movs	r4, #0
   1c9b4:	e7a4      	b.n	1c900 <__aeabi_fdiv+0x138>
   1c9b6:	2380      	movs	r3, #128	; 0x80
   1c9b8:	03db      	lsls	r3, r3, #15
   1c9ba:	431c      	orrs	r4, r3
   1c9bc:	0264      	lsls	r4, r4, #9
   1c9be:	0a64      	lsrs	r4, r4, #9
   1c9c0:	0033      	movs	r3, r6
   1c9c2:	21ff      	movs	r1, #255	; 0xff
   1c9c4:	e79c      	b.n	1c900 <__aeabi_fdiv+0x138>
   1c9c6:	2301      	movs	r3, #1
   1c9c8:	9a01      	ldr	r2, [sp, #4]
   1c9ca:	01a4      	lsls	r4, r4, #6
   1c9cc:	0a64      	lsrs	r4, r4, #9
   1c9ce:	b2c9      	uxtb	r1, r1
   1c9d0:	4013      	ands	r3, r2
   1c9d2:	e795      	b.n	1c900 <__aeabi_fdiv+0x138>
   1c9d4:	1b1b      	subs	r3, r3, r4
   1c9d6:	261a      	movs	r6, #26
   1c9d8:	2101      	movs	r1, #1
   1c9da:	e7c2      	b.n	1c962 <__aeabi_fdiv+0x19a>
   1c9dc:	9b00      	ldr	r3, [sp, #0]
   1c9de:	468b      	mov	fp, r1
   1c9e0:	469a      	mov	sl, r3
   1c9e2:	2400      	movs	r4, #0
   1c9e4:	e74c      	b.n	1c880 <__aeabi_fdiv+0xb8>
   1c9e6:	0263      	lsls	r3, r4, #9
   1c9e8:	d5e5      	bpl.n	1c9b6 <__aeabi_fdiv+0x1ee>
   1c9ea:	2500      	movs	r5, #0
   1c9ec:	2480      	movs	r4, #128	; 0x80
   1c9ee:	03e4      	lsls	r4, r4, #15
   1c9f0:	432c      	orrs	r4, r5
   1c9f2:	0264      	lsls	r4, r4, #9
   1c9f4:	0a64      	lsrs	r4, r4, #9
   1c9f6:	9b00      	ldr	r3, [sp, #0]
   1c9f8:	21ff      	movs	r1, #255	; 0xff
   1c9fa:	e781      	b.n	1c900 <__aeabi_fdiv+0x138>
   1c9fc:	9501      	str	r5, [sp, #4]
   1c9fe:	e7c1      	b.n	1c984 <__aeabi_fdiv+0x1bc>
   1ca00:	0023      	movs	r3, r4
   1ca02:	2020      	movs	r0, #32
   1ca04:	40cb      	lsrs	r3, r1
   1ca06:	1a41      	subs	r1, r0, r1
   1ca08:	408c      	lsls	r4, r1
   1ca0a:	1e61      	subs	r1, r4, #1
   1ca0c:	418c      	sbcs	r4, r1
   1ca0e:	431c      	orrs	r4, r3
   1ca10:	0763      	lsls	r3, r4, #29
   1ca12:	d004      	beq.n	1ca1e <__aeabi_fdiv+0x256>
   1ca14:	230f      	movs	r3, #15
   1ca16:	4023      	ands	r3, r4
   1ca18:	2b04      	cmp	r3, #4
   1ca1a:	d000      	beq.n	1ca1e <__aeabi_fdiv+0x256>
   1ca1c:	3404      	adds	r4, #4
   1ca1e:	0163      	lsls	r3, r4, #5
   1ca20:	d505      	bpl.n	1ca2e <__aeabi_fdiv+0x266>
   1ca22:	2301      	movs	r3, #1
   1ca24:	9a01      	ldr	r2, [sp, #4]
   1ca26:	2101      	movs	r1, #1
   1ca28:	4013      	ands	r3, r2
   1ca2a:	2400      	movs	r4, #0
   1ca2c:	e768      	b.n	1c900 <__aeabi_fdiv+0x138>
   1ca2e:	2301      	movs	r3, #1
   1ca30:	9a01      	ldr	r2, [sp, #4]
   1ca32:	01a4      	lsls	r4, r4, #6
   1ca34:	0a64      	lsrs	r4, r4, #9
   1ca36:	4013      	ands	r3, r2
   1ca38:	2100      	movs	r1, #0
   1ca3a:	e761      	b.n	1c900 <__aeabi_fdiv+0x138>
   1ca3c:	2380      	movs	r3, #128	; 0x80
   1ca3e:	03db      	lsls	r3, r3, #15
   1ca40:	431c      	orrs	r4, r3
   1ca42:	0264      	lsls	r4, r4, #9
   1ca44:	0a64      	lsrs	r4, r4, #9
   1ca46:	4653      	mov	r3, sl
   1ca48:	21ff      	movs	r1, #255	; 0xff
   1ca4a:	e759      	b.n	1c900 <__aeabi_fdiv+0x138>
   1ca4c:	00025090 	.word	0x00025090
   1ca50:	000250d0 	.word	0x000250d0
   1ca54:	f7ffffff 	.word	0xf7ffffff

0001ca58 <__eqsf2>:
   1ca58:	b570      	push	{r4, r5, r6, lr}
   1ca5a:	0042      	lsls	r2, r0, #1
   1ca5c:	0245      	lsls	r5, r0, #9
   1ca5e:	024e      	lsls	r6, r1, #9
   1ca60:	004c      	lsls	r4, r1, #1
   1ca62:	0fc3      	lsrs	r3, r0, #31
   1ca64:	0a6d      	lsrs	r5, r5, #9
   1ca66:	0e12      	lsrs	r2, r2, #24
   1ca68:	0a76      	lsrs	r6, r6, #9
   1ca6a:	0e24      	lsrs	r4, r4, #24
   1ca6c:	0fc9      	lsrs	r1, r1, #31
   1ca6e:	2001      	movs	r0, #1
   1ca70:	2aff      	cmp	r2, #255	; 0xff
   1ca72:	d006      	beq.n	1ca82 <__eqsf2+0x2a>
   1ca74:	2cff      	cmp	r4, #255	; 0xff
   1ca76:	d003      	beq.n	1ca80 <__eqsf2+0x28>
   1ca78:	42a2      	cmp	r2, r4
   1ca7a:	d101      	bne.n	1ca80 <__eqsf2+0x28>
   1ca7c:	42b5      	cmp	r5, r6
   1ca7e:	d006      	beq.n	1ca8e <__eqsf2+0x36>
   1ca80:	bd70      	pop	{r4, r5, r6, pc}
   1ca82:	2d00      	cmp	r5, #0
   1ca84:	d1fc      	bne.n	1ca80 <__eqsf2+0x28>
   1ca86:	2cff      	cmp	r4, #255	; 0xff
   1ca88:	d1fa      	bne.n	1ca80 <__eqsf2+0x28>
   1ca8a:	2e00      	cmp	r6, #0
   1ca8c:	d1f8      	bne.n	1ca80 <__eqsf2+0x28>
   1ca8e:	428b      	cmp	r3, r1
   1ca90:	d006      	beq.n	1caa0 <__eqsf2+0x48>
   1ca92:	2001      	movs	r0, #1
   1ca94:	2a00      	cmp	r2, #0
   1ca96:	d1f3      	bne.n	1ca80 <__eqsf2+0x28>
   1ca98:	0028      	movs	r0, r5
   1ca9a:	1e45      	subs	r5, r0, #1
   1ca9c:	41a8      	sbcs	r0, r5
   1ca9e:	e7ef      	b.n	1ca80 <__eqsf2+0x28>
   1caa0:	2000      	movs	r0, #0
   1caa2:	e7ed      	b.n	1ca80 <__eqsf2+0x28>

0001caa4 <__gesf2>:
   1caa4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1caa6:	0042      	lsls	r2, r0, #1
   1caa8:	0245      	lsls	r5, r0, #9
   1caaa:	024c      	lsls	r4, r1, #9
   1caac:	0fc3      	lsrs	r3, r0, #31
   1caae:	0048      	lsls	r0, r1, #1
   1cab0:	0a6d      	lsrs	r5, r5, #9
   1cab2:	0e12      	lsrs	r2, r2, #24
   1cab4:	0a64      	lsrs	r4, r4, #9
   1cab6:	0e00      	lsrs	r0, r0, #24
   1cab8:	0fc9      	lsrs	r1, r1, #31
   1caba:	2aff      	cmp	r2, #255	; 0xff
   1cabc:	d01e      	beq.n	1cafc <__gesf2+0x58>
   1cabe:	28ff      	cmp	r0, #255	; 0xff
   1cac0:	d021      	beq.n	1cb06 <__gesf2+0x62>
   1cac2:	2a00      	cmp	r2, #0
   1cac4:	d10a      	bne.n	1cadc <__gesf2+0x38>
   1cac6:	426e      	negs	r6, r5
   1cac8:	416e      	adcs	r6, r5
   1caca:	b2f6      	uxtb	r6, r6
   1cacc:	2800      	cmp	r0, #0
   1cace:	d10f      	bne.n	1caf0 <__gesf2+0x4c>
   1cad0:	2c00      	cmp	r4, #0
   1cad2:	d10d      	bne.n	1caf0 <__gesf2+0x4c>
   1cad4:	2000      	movs	r0, #0
   1cad6:	2d00      	cmp	r5, #0
   1cad8:	d009      	beq.n	1caee <__gesf2+0x4a>
   1cada:	e005      	b.n	1cae8 <__gesf2+0x44>
   1cadc:	2800      	cmp	r0, #0
   1cade:	d101      	bne.n	1cae4 <__gesf2+0x40>
   1cae0:	2c00      	cmp	r4, #0
   1cae2:	d001      	beq.n	1cae8 <__gesf2+0x44>
   1cae4:	428b      	cmp	r3, r1
   1cae6:	d011      	beq.n	1cb0c <__gesf2+0x68>
   1cae8:	2101      	movs	r1, #1
   1caea:	4258      	negs	r0, r3
   1caec:	4308      	orrs	r0, r1
   1caee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1caf0:	2e00      	cmp	r6, #0
   1caf2:	d0f7      	beq.n	1cae4 <__gesf2+0x40>
   1caf4:	2001      	movs	r0, #1
   1caf6:	3901      	subs	r1, #1
   1caf8:	4308      	orrs	r0, r1
   1cafa:	e7f8      	b.n	1caee <__gesf2+0x4a>
   1cafc:	2d00      	cmp	r5, #0
   1cafe:	d0de      	beq.n	1cabe <__gesf2+0x1a>
   1cb00:	2002      	movs	r0, #2
   1cb02:	4240      	negs	r0, r0
   1cb04:	e7f3      	b.n	1caee <__gesf2+0x4a>
   1cb06:	2c00      	cmp	r4, #0
   1cb08:	d0db      	beq.n	1cac2 <__gesf2+0x1e>
   1cb0a:	e7f9      	b.n	1cb00 <__gesf2+0x5c>
   1cb0c:	4282      	cmp	r2, r0
   1cb0e:	dceb      	bgt.n	1cae8 <__gesf2+0x44>
   1cb10:	db04      	blt.n	1cb1c <__gesf2+0x78>
   1cb12:	42a5      	cmp	r5, r4
   1cb14:	d8e8      	bhi.n	1cae8 <__gesf2+0x44>
   1cb16:	2000      	movs	r0, #0
   1cb18:	42a5      	cmp	r5, r4
   1cb1a:	d2e8      	bcs.n	1caee <__gesf2+0x4a>
   1cb1c:	2101      	movs	r1, #1
   1cb1e:	1e58      	subs	r0, r3, #1
   1cb20:	4308      	orrs	r0, r1
   1cb22:	e7e4      	b.n	1caee <__gesf2+0x4a>

0001cb24 <__lesf2>:
   1cb24:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cb26:	0042      	lsls	r2, r0, #1
   1cb28:	024d      	lsls	r5, r1, #9
   1cb2a:	004c      	lsls	r4, r1, #1
   1cb2c:	0246      	lsls	r6, r0, #9
   1cb2e:	0a76      	lsrs	r6, r6, #9
   1cb30:	0e12      	lsrs	r2, r2, #24
   1cb32:	0fc3      	lsrs	r3, r0, #31
   1cb34:	0a6d      	lsrs	r5, r5, #9
   1cb36:	0e24      	lsrs	r4, r4, #24
   1cb38:	0fc9      	lsrs	r1, r1, #31
   1cb3a:	2aff      	cmp	r2, #255	; 0xff
   1cb3c:	d016      	beq.n	1cb6c <__lesf2+0x48>
   1cb3e:	2cff      	cmp	r4, #255	; 0xff
   1cb40:	d018      	beq.n	1cb74 <__lesf2+0x50>
   1cb42:	2a00      	cmp	r2, #0
   1cb44:	d10a      	bne.n	1cb5c <__lesf2+0x38>
   1cb46:	4270      	negs	r0, r6
   1cb48:	4170      	adcs	r0, r6
   1cb4a:	b2c0      	uxtb	r0, r0
   1cb4c:	2c00      	cmp	r4, #0
   1cb4e:	d015      	beq.n	1cb7c <__lesf2+0x58>
   1cb50:	2800      	cmp	r0, #0
   1cb52:	d005      	beq.n	1cb60 <__lesf2+0x3c>
   1cb54:	2001      	movs	r0, #1
   1cb56:	3901      	subs	r1, #1
   1cb58:	4308      	orrs	r0, r1
   1cb5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cb5c:	2c00      	cmp	r4, #0
   1cb5e:	d013      	beq.n	1cb88 <__lesf2+0x64>
   1cb60:	4299      	cmp	r1, r3
   1cb62:	d014      	beq.n	1cb8e <__lesf2+0x6a>
   1cb64:	2001      	movs	r0, #1
   1cb66:	425b      	negs	r3, r3
   1cb68:	4318      	orrs	r0, r3
   1cb6a:	e7f6      	b.n	1cb5a <__lesf2+0x36>
   1cb6c:	2002      	movs	r0, #2
   1cb6e:	2e00      	cmp	r6, #0
   1cb70:	d1f3      	bne.n	1cb5a <__lesf2+0x36>
   1cb72:	e7e4      	b.n	1cb3e <__lesf2+0x1a>
   1cb74:	2002      	movs	r0, #2
   1cb76:	2d00      	cmp	r5, #0
   1cb78:	d1ef      	bne.n	1cb5a <__lesf2+0x36>
   1cb7a:	e7e2      	b.n	1cb42 <__lesf2+0x1e>
   1cb7c:	2d00      	cmp	r5, #0
   1cb7e:	d1e7      	bne.n	1cb50 <__lesf2+0x2c>
   1cb80:	2000      	movs	r0, #0
   1cb82:	2e00      	cmp	r6, #0
   1cb84:	d0e9      	beq.n	1cb5a <__lesf2+0x36>
   1cb86:	e7ed      	b.n	1cb64 <__lesf2+0x40>
   1cb88:	2d00      	cmp	r5, #0
   1cb8a:	d1e9      	bne.n	1cb60 <__lesf2+0x3c>
   1cb8c:	e7ea      	b.n	1cb64 <__lesf2+0x40>
   1cb8e:	42a2      	cmp	r2, r4
   1cb90:	dc06      	bgt.n	1cba0 <__lesf2+0x7c>
   1cb92:	dbdf      	blt.n	1cb54 <__lesf2+0x30>
   1cb94:	42ae      	cmp	r6, r5
   1cb96:	d803      	bhi.n	1cba0 <__lesf2+0x7c>
   1cb98:	2000      	movs	r0, #0
   1cb9a:	42ae      	cmp	r6, r5
   1cb9c:	d3da      	bcc.n	1cb54 <__lesf2+0x30>
   1cb9e:	e7dc      	b.n	1cb5a <__lesf2+0x36>
   1cba0:	2001      	movs	r0, #1
   1cba2:	4249      	negs	r1, r1
   1cba4:	4308      	orrs	r0, r1
   1cba6:	e7d8      	b.n	1cb5a <__lesf2+0x36>

0001cba8 <__aeabi_fmul>:
   1cba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cbaa:	4657      	mov	r7, sl
   1cbac:	464e      	mov	r6, r9
   1cbae:	4645      	mov	r5, r8
   1cbb0:	46de      	mov	lr, fp
   1cbb2:	b5e0      	push	{r5, r6, r7, lr}
   1cbb4:	0247      	lsls	r7, r0, #9
   1cbb6:	0046      	lsls	r6, r0, #1
   1cbb8:	4688      	mov	r8, r1
   1cbba:	0a7f      	lsrs	r7, r7, #9
   1cbbc:	0e36      	lsrs	r6, r6, #24
   1cbbe:	0fc4      	lsrs	r4, r0, #31
   1cbc0:	2e00      	cmp	r6, #0
   1cbc2:	d047      	beq.n	1cc54 <__aeabi_fmul+0xac>
   1cbc4:	2eff      	cmp	r6, #255	; 0xff
   1cbc6:	d024      	beq.n	1cc12 <__aeabi_fmul+0x6a>
   1cbc8:	00fb      	lsls	r3, r7, #3
   1cbca:	2780      	movs	r7, #128	; 0x80
   1cbcc:	04ff      	lsls	r7, r7, #19
   1cbce:	431f      	orrs	r7, r3
   1cbd0:	2300      	movs	r3, #0
   1cbd2:	4699      	mov	r9, r3
   1cbd4:	469a      	mov	sl, r3
   1cbd6:	3e7f      	subs	r6, #127	; 0x7f
   1cbd8:	4643      	mov	r3, r8
   1cbda:	025d      	lsls	r5, r3, #9
   1cbdc:	0058      	lsls	r0, r3, #1
   1cbde:	0fdb      	lsrs	r3, r3, #31
   1cbe0:	0a6d      	lsrs	r5, r5, #9
   1cbe2:	0e00      	lsrs	r0, r0, #24
   1cbe4:	4698      	mov	r8, r3
   1cbe6:	d043      	beq.n	1cc70 <__aeabi_fmul+0xc8>
   1cbe8:	28ff      	cmp	r0, #255	; 0xff
   1cbea:	d03b      	beq.n	1cc64 <__aeabi_fmul+0xbc>
   1cbec:	00eb      	lsls	r3, r5, #3
   1cbee:	2580      	movs	r5, #128	; 0x80
   1cbf0:	2200      	movs	r2, #0
   1cbf2:	04ed      	lsls	r5, r5, #19
   1cbf4:	431d      	orrs	r5, r3
   1cbf6:	387f      	subs	r0, #127	; 0x7f
   1cbf8:	1836      	adds	r6, r6, r0
   1cbfa:	1c73      	adds	r3, r6, #1
   1cbfc:	4641      	mov	r1, r8
   1cbfe:	469b      	mov	fp, r3
   1cc00:	464b      	mov	r3, r9
   1cc02:	4061      	eors	r1, r4
   1cc04:	4313      	orrs	r3, r2
   1cc06:	2b0f      	cmp	r3, #15
   1cc08:	d864      	bhi.n	1ccd4 <__aeabi_fmul+0x12c>
   1cc0a:	4875      	ldr	r0, [pc, #468]	; (1cde0 <__aeabi_fmul+0x238>)
   1cc0c:	009b      	lsls	r3, r3, #2
   1cc0e:	58c3      	ldr	r3, [r0, r3]
   1cc10:	469f      	mov	pc, r3
   1cc12:	2f00      	cmp	r7, #0
   1cc14:	d142      	bne.n	1cc9c <__aeabi_fmul+0xf4>
   1cc16:	2308      	movs	r3, #8
   1cc18:	4699      	mov	r9, r3
   1cc1a:	3b06      	subs	r3, #6
   1cc1c:	26ff      	movs	r6, #255	; 0xff
   1cc1e:	469a      	mov	sl, r3
   1cc20:	e7da      	b.n	1cbd8 <__aeabi_fmul+0x30>
   1cc22:	4641      	mov	r1, r8
   1cc24:	2a02      	cmp	r2, #2
   1cc26:	d028      	beq.n	1cc7a <__aeabi_fmul+0xd2>
   1cc28:	2a03      	cmp	r2, #3
   1cc2a:	d100      	bne.n	1cc2e <__aeabi_fmul+0x86>
   1cc2c:	e0ce      	b.n	1cdcc <__aeabi_fmul+0x224>
   1cc2e:	2a01      	cmp	r2, #1
   1cc30:	d000      	beq.n	1cc34 <__aeabi_fmul+0x8c>
   1cc32:	e0ac      	b.n	1cd8e <__aeabi_fmul+0x1e6>
   1cc34:	4011      	ands	r1, r2
   1cc36:	2000      	movs	r0, #0
   1cc38:	2200      	movs	r2, #0
   1cc3a:	b2cc      	uxtb	r4, r1
   1cc3c:	0240      	lsls	r0, r0, #9
   1cc3e:	05d2      	lsls	r2, r2, #23
   1cc40:	0a40      	lsrs	r0, r0, #9
   1cc42:	07e4      	lsls	r4, r4, #31
   1cc44:	4310      	orrs	r0, r2
   1cc46:	4320      	orrs	r0, r4
   1cc48:	bc3c      	pop	{r2, r3, r4, r5}
   1cc4a:	4690      	mov	r8, r2
   1cc4c:	4699      	mov	r9, r3
   1cc4e:	46a2      	mov	sl, r4
   1cc50:	46ab      	mov	fp, r5
   1cc52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1cc54:	2f00      	cmp	r7, #0
   1cc56:	d115      	bne.n	1cc84 <__aeabi_fmul+0xdc>
   1cc58:	2304      	movs	r3, #4
   1cc5a:	4699      	mov	r9, r3
   1cc5c:	3b03      	subs	r3, #3
   1cc5e:	2600      	movs	r6, #0
   1cc60:	469a      	mov	sl, r3
   1cc62:	e7b9      	b.n	1cbd8 <__aeabi_fmul+0x30>
   1cc64:	20ff      	movs	r0, #255	; 0xff
   1cc66:	2202      	movs	r2, #2
   1cc68:	2d00      	cmp	r5, #0
   1cc6a:	d0c5      	beq.n	1cbf8 <__aeabi_fmul+0x50>
   1cc6c:	2203      	movs	r2, #3
   1cc6e:	e7c3      	b.n	1cbf8 <__aeabi_fmul+0x50>
   1cc70:	2d00      	cmp	r5, #0
   1cc72:	d119      	bne.n	1cca8 <__aeabi_fmul+0x100>
   1cc74:	2000      	movs	r0, #0
   1cc76:	2201      	movs	r2, #1
   1cc78:	e7be      	b.n	1cbf8 <__aeabi_fmul+0x50>
   1cc7a:	2401      	movs	r4, #1
   1cc7c:	22ff      	movs	r2, #255	; 0xff
   1cc7e:	400c      	ands	r4, r1
   1cc80:	2000      	movs	r0, #0
   1cc82:	e7db      	b.n	1cc3c <__aeabi_fmul+0x94>
   1cc84:	0038      	movs	r0, r7
   1cc86:	f7ff fb6f 	bl	1c368 <__clzsi2>
   1cc8a:	2676      	movs	r6, #118	; 0x76
   1cc8c:	1f43      	subs	r3, r0, #5
   1cc8e:	409f      	lsls	r7, r3
   1cc90:	2300      	movs	r3, #0
   1cc92:	4276      	negs	r6, r6
   1cc94:	1a36      	subs	r6, r6, r0
   1cc96:	4699      	mov	r9, r3
   1cc98:	469a      	mov	sl, r3
   1cc9a:	e79d      	b.n	1cbd8 <__aeabi_fmul+0x30>
   1cc9c:	230c      	movs	r3, #12
   1cc9e:	4699      	mov	r9, r3
   1cca0:	3b09      	subs	r3, #9
   1cca2:	26ff      	movs	r6, #255	; 0xff
   1cca4:	469a      	mov	sl, r3
   1cca6:	e797      	b.n	1cbd8 <__aeabi_fmul+0x30>
   1cca8:	0028      	movs	r0, r5
   1ccaa:	f7ff fb5d 	bl	1c368 <__clzsi2>
   1ccae:	1f43      	subs	r3, r0, #5
   1ccb0:	409d      	lsls	r5, r3
   1ccb2:	2376      	movs	r3, #118	; 0x76
   1ccb4:	425b      	negs	r3, r3
   1ccb6:	1a18      	subs	r0, r3, r0
   1ccb8:	2200      	movs	r2, #0
   1ccba:	e79d      	b.n	1cbf8 <__aeabi_fmul+0x50>
   1ccbc:	2080      	movs	r0, #128	; 0x80
   1ccbe:	2400      	movs	r4, #0
   1ccc0:	03c0      	lsls	r0, r0, #15
   1ccc2:	22ff      	movs	r2, #255	; 0xff
   1ccc4:	e7ba      	b.n	1cc3c <__aeabi_fmul+0x94>
   1ccc6:	003d      	movs	r5, r7
   1ccc8:	4652      	mov	r2, sl
   1ccca:	e7ab      	b.n	1cc24 <__aeabi_fmul+0x7c>
   1cccc:	003d      	movs	r5, r7
   1ccce:	0021      	movs	r1, r4
   1ccd0:	4652      	mov	r2, sl
   1ccd2:	e7a7      	b.n	1cc24 <__aeabi_fmul+0x7c>
   1ccd4:	0c3b      	lsrs	r3, r7, #16
   1ccd6:	469c      	mov	ip, r3
   1ccd8:	042a      	lsls	r2, r5, #16
   1ccda:	0c12      	lsrs	r2, r2, #16
   1ccdc:	0c2b      	lsrs	r3, r5, #16
   1ccde:	0014      	movs	r4, r2
   1cce0:	4660      	mov	r0, ip
   1cce2:	4665      	mov	r5, ip
   1cce4:	043f      	lsls	r7, r7, #16
   1cce6:	0c3f      	lsrs	r7, r7, #16
   1cce8:	437c      	muls	r4, r7
   1ccea:	4342      	muls	r2, r0
   1ccec:	435d      	muls	r5, r3
   1ccee:	437b      	muls	r3, r7
   1ccf0:	0c27      	lsrs	r7, r4, #16
   1ccf2:	189b      	adds	r3, r3, r2
   1ccf4:	18ff      	adds	r7, r7, r3
   1ccf6:	42ba      	cmp	r2, r7
   1ccf8:	d903      	bls.n	1cd02 <__aeabi_fmul+0x15a>
   1ccfa:	2380      	movs	r3, #128	; 0x80
   1ccfc:	025b      	lsls	r3, r3, #9
   1ccfe:	469c      	mov	ip, r3
   1cd00:	4465      	add	r5, ip
   1cd02:	0424      	lsls	r4, r4, #16
   1cd04:	043a      	lsls	r2, r7, #16
   1cd06:	0c24      	lsrs	r4, r4, #16
   1cd08:	1912      	adds	r2, r2, r4
   1cd0a:	0193      	lsls	r3, r2, #6
   1cd0c:	1e5c      	subs	r4, r3, #1
   1cd0e:	41a3      	sbcs	r3, r4
   1cd10:	0c3f      	lsrs	r7, r7, #16
   1cd12:	0e92      	lsrs	r2, r2, #26
   1cd14:	197d      	adds	r5, r7, r5
   1cd16:	431a      	orrs	r2, r3
   1cd18:	01ad      	lsls	r5, r5, #6
   1cd1a:	4315      	orrs	r5, r2
   1cd1c:	012b      	lsls	r3, r5, #4
   1cd1e:	d504      	bpl.n	1cd2a <__aeabi_fmul+0x182>
   1cd20:	2301      	movs	r3, #1
   1cd22:	465e      	mov	r6, fp
   1cd24:	086a      	lsrs	r2, r5, #1
   1cd26:	401d      	ands	r5, r3
   1cd28:	4315      	orrs	r5, r2
   1cd2a:	0032      	movs	r2, r6
   1cd2c:	327f      	adds	r2, #127	; 0x7f
   1cd2e:	2a00      	cmp	r2, #0
   1cd30:	dd25      	ble.n	1cd7e <__aeabi_fmul+0x1d6>
   1cd32:	076b      	lsls	r3, r5, #29
   1cd34:	d004      	beq.n	1cd40 <__aeabi_fmul+0x198>
   1cd36:	230f      	movs	r3, #15
   1cd38:	402b      	ands	r3, r5
   1cd3a:	2b04      	cmp	r3, #4
   1cd3c:	d000      	beq.n	1cd40 <__aeabi_fmul+0x198>
   1cd3e:	3504      	adds	r5, #4
   1cd40:	012b      	lsls	r3, r5, #4
   1cd42:	d503      	bpl.n	1cd4c <__aeabi_fmul+0x1a4>
   1cd44:	0032      	movs	r2, r6
   1cd46:	4b27      	ldr	r3, [pc, #156]	; (1cde4 <__aeabi_fmul+0x23c>)
   1cd48:	3280      	adds	r2, #128	; 0x80
   1cd4a:	401d      	ands	r5, r3
   1cd4c:	2afe      	cmp	r2, #254	; 0xfe
   1cd4e:	dc94      	bgt.n	1cc7a <__aeabi_fmul+0xd2>
   1cd50:	2401      	movs	r4, #1
   1cd52:	01a8      	lsls	r0, r5, #6
   1cd54:	0a40      	lsrs	r0, r0, #9
   1cd56:	b2d2      	uxtb	r2, r2
   1cd58:	400c      	ands	r4, r1
   1cd5a:	e76f      	b.n	1cc3c <__aeabi_fmul+0x94>
   1cd5c:	2080      	movs	r0, #128	; 0x80
   1cd5e:	03c0      	lsls	r0, r0, #15
   1cd60:	4207      	tst	r7, r0
   1cd62:	d007      	beq.n	1cd74 <__aeabi_fmul+0x1cc>
   1cd64:	4205      	tst	r5, r0
   1cd66:	d105      	bne.n	1cd74 <__aeabi_fmul+0x1cc>
   1cd68:	4328      	orrs	r0, r5
   1cd6a:	0240      	lsls	r0, r0, #9
   1cd6c:	0a40      	lsrs	r0, r0, #9
   1cd6e:	4644      	mov	r4, r8
   1cd70:	22ff      	movs	r2, #255	; 0xff
   1cd72:	e763      	b.n	1cc3c <__aeabi_fmul+0x94>
   1cd74:	4338      	orrs	r0, r7
   1cd76:	0240      	lsls	r0, r0, #9
   1cd78:	0a40      	lsrs	r0, r0, #9
   1cd7a:	22ff      	movs	r2, #255	; 0xff
   1cd7c:	e75e      	b.n	1cc3c <__aeabi_fmul+0x94>
   1cd7e:	2401      	movs	r4, #1
   1cd80:	1aa3      	subs	r3, r4, r2
   1cd82:	2b1b      	cmp	r3, #27
   1cd84:	dd05      	ble.n	1cd92 <__aeabi_fmul+0x1ea>
   1cd86:	400c      	ands	r4, r1
   1cd88:	2200      	movs	r2, #0
   1cd8a:	2000      	movs	r0, #0
   1cd8c:	e756      	b.n	1cc3c <__aeabi_fmul+0x94>
   1cd8e:	465e      	mov	r6, fp
   1cd90:	e7cb      	b.n	1cd2a <__aeabi_fmul+0x182>
   1cd92:	002a      	movs	r2, r5
   1cd94:	2020      	movs	r0, #32
   1cd96:	40da      	lsrs	r2, r3
   1cd98:	1ac3      	subs	r3, r0, r3
   1cd9a:	409d      	lsls	r5, r3
   1cd9c:	002b      	movs	r3, r5
   1cd9e:	1e5d      	subs	r5, r3, #1
   1cda0:	41ab      	sbcs	r3, r5
   1cda2:	4313      	orrs	r3, r2
   1cda4:	075a      	lsls	r2, r3, #29
   1cda6:	d004      	beq.n	1cdb2 <__aeabi_fmul+0x20a>
   1cda8:	220f      	movs	r2, #15
   1cdaa:	401a      	ands	r2, r3
   1cdac:	2a04      	cmp	r2, #4
   1cdae:	d000      	beq.n	1cdb2 <__aeabi_fmul+0x20a>
   1cdb0:	3304      	adds	r3, #4
   1cdb2:	015a      	lsls	r2, r3, #5
   1cdb4:	d504      	bpl.n	1cdc0 <__aeabi_fmul+0x218>
   1cdb6:	2401      	movs	r4, #1
   1cdb8:	2201      	movs	r2, #1
   1cdba:	400c      	ands	r4, r1
   1cdbc:	2000      	movs	r0, #0
   1cdbe:	e73d      	b.n	1cc3c <__aeabi_fmul+0x94>
   1cdc0:	2401      	movs	r4, #1
   1cdc2:	019b      	lsls	r3, r3, #6
   1cdc4:	0a58      	lsrs	r0, r3, #9
   1cdc6:	400c      	ands	r4, r1
   1cdc8:	2200      	movs	r2, #0
   1cdca:	e737      	b.n	1cc3c <__aeabi_fmul+0x94>
   1cdcc:	2080      	movs	r0, #128	; 0x80
   1cdce:	2401      	movs	r4, #1
   1cdd0:	03c0      	lsls	r0, r0, #15
   1cdd2:	4328      	orrs	r0, r5
   1cdd4:	0240      	lsls	r0, r0, #9
   1cdd6:	0a40      	lsrs	r0, r0, #9
   1cdd8:	400c      	ands	r4, r1
   1cdda:	22ff      	movs	r2, #255	; 0xff
   1cddc:	e72e      	b.n	1cc3c <__aeabi_fmul+0x94>
   1cdde:	46c0      	nop			; (mov r8, r8)
   1cde0:	00025110 	.word	0x00025110
   1cde4:	f7ffffff 	.word	0xf7ffffff

0001cde8 <__aeabi_fsub>:
   1cde8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cdea:	464f      	mov	r7, r9
   1cdec:	46d6      	mov	lr, sl
   1cdee:	4646      	mov	r6, r8
   1cdf0:	0044      	lsls	r4, r0, #1
   1cdf2:	b5c0      	push	{r6, r7, lr}
   1cdf4:	0fc2      	lsrs	r2, r0, #31
   1cdf6:	0247      	lsls	r7, r0, #9
   1cdf8:	0248      	lsls	r0, r1, #9
   1cdfa:	0a40      	lsrs	r0, r0, #9
   1cdfc:	4684      	mov	ip, r0
   1cdfe:	4666      	mov	r6, ip
   1ce00:	0a7b      	lsrs	r3, r7, #9
   1ce02:	0048      	lsls	r0, r1, #1
   1ce04:	0fc9      	lsrs	r1, r1, #31
   1ce06:	469a      	mov	sl, r3
   1ce08:	0e24      	lsrs	r4, r4, #24
   1ce0a:	0015      	movs	r5, r2
   1ce0c:	00db      	lsls	r3, r3, #3
   1ce0e:	0e00      	lsrs	r0, r0, #24
   1ce10:	4689      	mov	r9, r1
   1ce12:	00f6      	lsls	r6, r6, #3
   1ce14:	28ff      	cmp	r0, #255	; 0xff
   1ce16:	d100      	bne.n	1ce1a <__aeabi_fsub+0x32>
   1ce18:	e08f      	b.n	1cf3a <__aeabi_fsub+0x152>
   1ce1a:	2101      	movs	r1, #1
   1ce1c:	464f      	mov	r7, r9
   1ce1e:	404f      	eors	r7, r1
   1ce20:	0039      	movs	r1, r7
   1ce22:	4291      	cmp	r1, r2
   1ce24:	d066      	beq.n	1cef4 <__aeabi_fsub+0x10c>
   1ce26:	1a22      	subs	r2, r4, r0
   1ce28:	2a00      	cmp	r2, #0
   1ce2a:	dc00      	bgt.n	1ce2e <__aeabi_fsub+0x46>
   1ce2c:	e09d      	b.n	1cf6a <__aeabi_fsub+0x182>
   1ce2e:	2800      	cmp	r0, #0
   1ce30:	d13d      	bne.n	1ceae <__aeabi_fsub+0xc6>
   1ce32:	2e00      	cmp	r6, #0
   1ce34:	d100      	bne.n	1ce38 <__aeabi_fsub+0x50>
   1ce36:	e08b      	b.n	1cf50 <__aeabi_fsub+0x168>
   1ce38:	1e51      	subs	r1, r2, #1
   1ce3a:	2900      	cmp	r1, #0
   1ce3c:	d000      	beq.n	1ce40 <__aeabi_fsub+0x58>
   1ce3e:	e0b5      	b.n	1cfac <__aeabi_fsub+0x1c4>
   1ce40:	2401      	movs	r4, #1
   1ce42:	1b9b      	subs	r3, r3, r6
   1ce44:	015a      	lsls	r2, r3, #5
   1ce46:	d544      	bpl.n	1ced2 <__aeabi_fsub+0xea>
   1ce48:	019b      	lsls	r3, r3, #6
   1ce4a:	099f      	lsrs	r7, r3, #6
   1ce4c:	0038      	movs	r0, r7
   1ce4e:	f7ff fa8b 	bl	1c368 <__clzsi2>
   1ce52:	3805      	subs	r0, #5
   1ce54:	4087      	lsls	r7, r0
   1ce56:	4284      	cmp	r4, r0
   1ce58:	dd00      	ble.n	1ce5c <__aeabi_fsub+0x74>
   1ce5a:	e096      	b.n	1cf8a <__aeabi_fsub+0x1a2>
   1ce5c:	1b04      	subs	r4, r0, r4
   1ce5e:	003a      	movs	r2, r7
   1ce60:	2020      	movs	r0, #32
   1ce62:	3401      	adds	r4, #1
   1ce64:	40e2      	lsrs	r2, r4
   1ce66:	1b04      	subs	r4, r0, r4
   1ce68:	40a7      	lsls	r7, r4
   1ce6a:	003b      	movs	r3, r7
   1ce6c:	1e5f      	subs	r7, r3, #1
   1ce6e:	41bb      	sbcs	r3, r7
   1ce70:	2400      	movs	r4, #0
   1ce72:	4313      	orrs	r3, r2
   1ce74:	075a      	lsls	r2, r3, #29
   1ce76:	d004      	beq.n	1ce82 <__aeabi_fsub+0x9a>
   1ce78:	220f      	movs	r2, #15
   1ce7a:	401a      	ands	r2, r3
   1ce7c:	2a04      	cmp	r2, #4
   1ce7e:	d000      	beq.n	1ce82 <__aeabi_fsub+0x9a>
   1ce80:	3304      	adds	r3, #4
   1ce82:	015a      	lsls	r2, r3, #5
   1ce84:	d527      	bpl.n	1ced6 <__aeabi_fsub+0xee>
   1ce86:	3401      	adds	r4, #1
   1ce88:	2cff      	cmp	r4, #255	; 0xff
   1ce8a:	d100      	bne.n	1ce8e <__aeabi_fsub+0xa6>
   1ce8c:	e079      	b.n	1cf82 <__aeabi_fsub+0x19a>
   1ce8e:	2201      	movs	r2, #1
   1ce90:	019b      	lsls	r3, r3, #6
   1ce92:	0a5b      	lsrs	r3, r3, #9
   1ce94:	b2e4      	uxtb	r4, r4
   1ce96:	402a      	ands	r2, r5
   1ce98:	025b      	lsls	r3, r3, #9
   1ce9a:	05e4      	lsls	r4, r4, #23
   1ce9c:	0a58      	lsrs	r0, r3, #9
   1ce9e:	07d2      	lsls	r2, r2, #31
   1cea0:	4320      	orrs	r0, r4
   1cea2:	4310      	orrs	r0, r2
   1cea4:	bc1c      	pop	{r2, r3, r4}
   1cea6:	4690      	mov	r8, r2
   1cea8:	4699      	mov	r9, r3
   1ceaa:	46a2      	mov	sl, r4
   1ceac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ceae:	2cff      	cmp	r4, #255	; 0xff
   1ceb0:	d0e0      	beq.n	1ce74 <__aeabi_fsub+0x8c>
   1ceb2:	2180      	movs	r1, #128	; 0x80
   1ceb4:	04c9      	lsls	r1, r1, #19
   1ceb6:	430e      	orrs	r6, r1
   1ceb8:	2a1b      	cmp	r2, #27
   1ceba:	dc7b      	bgt.n	1cfb4 <__aeabi_fsub+0x1cc>
   1cebc:	0031      	movs	r1, r6
   1cebe:	2020      	movs	r0, #32
   1cec0:	40d1      	lsrs	r1, r2
   1cec2:	1a82      	subs	r2, r0, r2
   1cec4:	4096      	lsls	r6, r2
   1cec6:	1e72      	subs	r2, r6, #1
   1cec8:	4196      	sbcs	r6, r2
   1ceca:	430e      	orrs	r6, r1
   1cecc:	1b9b      	subs	r3, r3, r6
   1cece:	015a      	lsls	r2, r3, #5
   1ced0:	d4ba      	bmi.n	1ce48 <__aeabi_fsub+0x60>
   1ced2:	075a      	lsls	r2, r3, #29
   1ced4:	d1d0      	bne.n	1ce78 <__aeabi_fsub+0x90>
   1ced6:	2201      	movs	r2, #1
   1ced8:	08df      	lsrs	r7, r3, #3
   1ceda:	402a      	ands	r2, r5
   1cedc:	2cff      	cmp	r4, #255	; 0xff
   1cede:	d133      	bne.n	1cf48 <__aeabi_fsub+0x160>
   1cee0:	2f00      	cmp	r7, #0
   1cee2:	d100      	bne.n	1cee6 <__aeabi_fsub+0xfe>
   1cee4:	e0a8      	b.n	1d038 <__aeabi_fsub+0x250>
   1cee6:	2380      	movs	r3, #128	; 0x80
   1cee8:	03db      	lsls	r3, r3, #15
   1ceea:	433b      	orrs	r3, r7
   1ceec:	025b      	lsls	r3, r3, #9
   1ceee:	0a5b      	lsrs	r3, r3, #9
   1cef0:	24ff      	movs	r4, #255	; 0xff
   1cef2:	e7d1      	b.n	1ce98 <__aeabi_fsub+0xb0>
   1cef4:	1a21      	subs	r1, r4, r0
   1cef6:	2900      	cmp	r1, #0
   1cef8:	dd4c      	ble.n	1cf94 <__aeabi_fsub+0x1ac>
   1cefa:	2800      	cmp	r0, #0
   1cefc:	d02a      	beq.n	1cf54 <__aeabi_fsub+0x16c>
   1cefe:	2cff      	cmp	r4, #255	; 0xff
   1cf00:	d0b8      	beq.n	1ce74 <__aeabi_fsub+0x8c>
   1cf02:	2080      	movs	r0, #128	; 0x80
   1cf04:	04c0      	lsls	r0, r0, #19
   1cf06:	4306      	orrs	r6, r0
   1cf08:	291b      	cmp	r1, #27
   1cf0a:	dd00      	ble.n	1cf0e <__aeabi_fsub+0x126>
   1cf0c:	e0af      	b.n	1d06e <__aeabi_fsub+0x286>
   1cf0e:	0030      	movs	r0, r6
   1cf10:	2720      	movs	r7, #32
   1cf12:	40c8      	lsrs	r0, r1
   1cf14:	1a79      	subs	r1, r7, r1
   1cf16:	408e      	lsls	r6, r1
   1cf18:	1e71      	subs	r1, r6, #1
   1cf1a:	418e      	sbcs	r6, r1
   1cf1c:	4306      	orrs	r6, r0
   1cf1e:	199b      	adds	r3, r3, r6
   1cf20:	0159      	lsls	r1, r3, #5
   1cf22:	d5d6      	bpl.n	1ced2 <__aeabi_fsub+0xea>
   1cf24:	3401      	adds	r4, #1
   1cf26:	2cff      	cmp	r4, #255	; 0xff
   1cf28:	d100      	bne.n	1cf2c <__aeabi_fsub+0x144>
   1cf2a:	e085      	b.n	1d038 <__aeabi_fsub+0x250>
   1cf2c:	2201      	movs	r2, #1
   1cf2e:	497a      	ldr	r1, [pc, #488]	; (1d118 <__aeabi_fsub+0x330>)
   1cf30:	401a      	ands	r2, r3
   1cf32:	085b      	lsrs	r3, r3, #1
   1cf34:	400b      	ands	r3, r1
   1cf36:	4313      	orrs	r3, r2
   1cf38:	e79c      	b.n	1ce74 <__aeabi_fsub+0x8c>
   1cf3a:	2e00      	cmp	r6, #0
   1cf3c:	d000      	beq.n	1cf40 <__aeabi_fsub+0x158>
   1cf3e:	e770      	b.n	1ce22 <__aeabi_fsub+0x3a>
   1cf40:	e76b      	b.n	1ce1a <__aeabi_fsub+0x32>
   1cf42:	1e3b      	subs	r3, r7, #0
   1cf44:	d1c5      	bne.n	1ced2 <__aeabi_fsub+0xea>
   1cf46:	2200      	movs	r2, #0
   1cf48:	027b      	lsls	r3, r7, #9
   1cf4a:	0a5b      	lsrs	r3, r3, #9
   1cf4c:	b2e4      	uxtb	r4, r4
   1cf4e:	e7a3      	b.n	1ce98 <__aeabi_fsub+0xb0>
   1cf50:	0014      	movs	r4, r2
   1cf52:	e78f      	b.n	1ce74 <__aeabi_fsub+0x8c>
   1cf54:	2e00      	cmp	r6, #0
   1cf56:	d04d      	beq.n	1cff4 <__aeabi_fsub+0x20c>
   1cf58:	1e48      	subs	r0, r1, #1
   1cf5a:	2800      	cmp	r0, #0
   1cf5c:	d157      	bne.n	1d00e <__aeabi_fsub+0x226>
   1cf5e:	199b      	adds	r3, r3, r6
   1cf60:	2401      	movs	r4, #1
   1cf62:	015a      	lsls	r2, r3, #5
   1cf64:	d5b5      	bpl.n	1ced2 <__aeabi_fsub+0xea>
   1cf66:	2402      	movs	r4, #2
   1cf68:	e7e0      	b.n	1cf2c <__aeabi_fsub+0x144>
   1cf6a:	2a00      	cmp	r2, #0
   1cf6c:	d125      	bne.n	1cfba <__aeabi_fsub+0x1d2>
   1cf6e:	1c62      	adds	r2, r4, #1
   1cf70:	b2d2      	uxtb	r2, r2
   1cf72:	2a01      	cmp	r2, #1
   1cf74:	dd72      	ble.n	1d05c <__aeabi_fsub+0x274>
   1cf76:	1b9f      	subs	r7, r3, r6
   1cf78:	017a      	lsls	r2, r7, #5
   1cf7a:	d535      	bpl.n	1cfe8 <__aeabi_fsub+0x200>
   1cf7c:	1af7      	subs	r7, r6, r3
   1cf7e:	000d      	movs	r5, r1
   1cf80:	e764      	b.n	1ce4c <__aeabi_fsub+0x64>
   1cf82:	2201      	movs	r2, #1
   1cf84:	2300      	movs	r3, #0
   1cf86:	402a      	ands	r2, r5
   1cf88:	e786      	b.n	1ce98 <__aeabi_fsub+0xb0>
   1cf8a:	003b      	movs	r3, r7
   1cf8c:	4a63      	ldr	r2, [pc, #396]	; (1d11c <__aeabi_fsub+0x334>)
   1cf8e:	1a24      	subs	r4, r4, r0
   1cf90:	4013      	ands	r3, r2
   1cf92:	e76f      	b.n	1ce74 <__aeabi_fsub+0x8c>
   1cf94:	2900      	cmp	r1, #0
   1cf96:	d16c      	bne.n	1d072 <__aeabi_fsub+0x28a>
   1cf98:	1c61      	adds	r1, r4, #1
   1cf9a:	b2c8      	uxtb	r0, r1
   1cf9c:	2801      	cmp	r0, #1
   1cf9e:	dd4e      	ble.n	1d03e <__aeabi_fsub+0x256>
   1cfa0:	29ff      	cmp	r1, #255	; 0xff
   1cfa2:	d049      	beq.n	1d038 <__aeabi_fsub+0x250>
   1cfa4:	199b      	adds	r3, r3, r6
   1cfa6:	085b      	lsrs	r3, r3, #1
   1cfa8:	000c      	movs	r4, r1
   1cfaa:	e763      	b.n	1ce74 <__aeabi_fsub+0x8c>
   1cfac:	2aff      	cmp	r2, #255	; 0xff
   1cfae:	d041      	beq.n	1d034 <__aeabi_fsub+0x24c>
   1cfb0:	000a      	movs	r2, r1
   1cfb2:	e781      	b.n	1ceb8 <__aeabi_fsub+0xd0>
   1cfb4:	2601      	movs	r6, #1
   1cfb6:	1b9b      	subs	r3, r3, r6
   1cfb8:	e789      	b.n	1cece <__aeabi_fsub+0xe6>
   1cfba:	2c00      	cmp	r4, #0
   1cfbc:	d01c      	beq.n	1cff8 <__aeabi_fsub+0x210>
   1cfbe:	28ff      	cmp	r0, #255	; 0xff
   1cfc0:	d021      	beq.n	1d006 <__aeabi_fsub+0x21e>
   1cfc2:	2480      	movs	r4, #128	; 0x80
   1cfc4:	04e4      	lsls	r4, r4, #19
   1cfc6:	4252      	negs	r2, r2
   1cfc8:	4323      	orrs	r3, r4
   1cfca:	2a1b      	cmp	r2, #27
   1cfcc:	dd00      	ble.n	1cfd0 <__aeabi_fsub+0x1e8>
   1cfce:	e096      	b.n	1d0fe <__aeabi_fsub+0x316>
   1cfd0:	001c      	movs	r4, r3
   1cfd2:	2520      	movs	r5, #32
   1cfd4:	40d4      	lsrs	r4, r2
   1cfd6:	1aaa      	subs	r2, r5, r2
   1cfd8:	4093      	lsls	r3, r2
   1cfda:	1e5a      	subs	r2, r3, #1
   1cfdc:	4193      	sbcs	r3, r2
   1cfde:	4323      	orrs	r3, r4
   1cfe0:	1af3      	subs	r3, r6, r3
   1cfe2:	0004      	movs	r4, r0
   1cfe4:	000d      	movs	r5, r1
   1cfe6:	e72d      	b.n	1ce44 <__aeabi_fsub+0x5c>
   1cfe8:	2f00      	cmp	r7, #0
   1cfea:	d000      	beq.n	1cfee <__aeabi_fsub+0x206>
   1cfec:	e72e      	b.n	1ce4c <__aeabi_fsub+0x64>
   1cfee:	2200      	movs	r2, #0
   1cff0:	2400      	movs	r4, #0
   1cff2:	e7a9      	b.n	1cf48 <__aeabi_fsub+0x160>
   1cff4:	000c      	movs	r4, r1
   1cff6:	e73d      	b.n	1ce74 <__aeabi_fsub+0x8c>
   1cff8:	2b00      	cmp	r3, #0
   1cffa:	d058      	beq.n	1d0ae <__aeabi_fsub+0x2c6>
   1cffc:	43d2      	mvns	r2, r2
   1cffe:	2a00      	cmp	r2, #0
   1d000:	d0ee      	beq.n	1cfe0 <__aeabi_fsub+0x1f8>
   1d002:	28ff      	cmp	r0, #255	; 0xff
   1d004:	d1e1      	bne.n	1cfca <__aeabi_fsub+0x1e2>
   1d006:	0033      	movs	r3, r6
   1d008:	24ff      	movs	r4, #255	; 0xff
   1d00a:	000d      	movs	r5, r1
   1d00c:	e732      	b.n	1ce74 <__aeabi_fsub+0x8c>
   1d00e:	29ff      	cmp	r1, #255	; 0xff
   1d010:	d010      	beq.n	1d034 <__aeabi_fsub+0x24c>
   1d012:	0001      	movs	r1, r0
   1d014:	e778      	b.n	1cf08 <__aeabi_fsub+0x120>
   1d016:	2b00      	cmp	r3, #0
   1d018:	d06e      	beq.n	1d0f8 <__aeabi_fsub+0x310>
   1d01a:	24ff      	movs	r4, #255	; 0xff
   1d01c:	2e00      	cmp	r6, #0
   1d01e:	d100      	bne.n	1d022 <__aeabi_fsub+0x23a>
   1d020:	e728      	b.n	1ce74 <__aeabi_fsub+0x8c>
   1d022:	2280      	movs	r2, #128	; 0x80
   1d024:	4651      	mov	r1, sl
   1d026:	03d2      	lsls	r2, r2, #15
   1d028:	4211      	tst	r1, r2
   1d02a:	d003      	beq.n	1d034 <__aeabi_fsub+0x24c>
   1d02c:	4661      	mov	r1, ip
   1d02e:	4211      	tst	r1, r2
   1d030:	d100      	bne.n	1d034 <__aeabi_fsub+0x24c>
   1d032:	0033      	movs	r3, r6
   1d034:	24ff      	movs	r4, #255	; 0xff
   1d036:	e71d      	b.n	1ce74 <__aeabi_fsub+0x8c>
   1d038:	24ff      	movs	r4, #255	; 0xff
   1d03a:	2300      	movs	r3, #0
   1d03c:	e72c      	b.n	1ce98 <__aeabi_fsub+0xb0>
   1d03e:	2c00      	cmp	r4, #0
   1d040:	d1e9      	bne.n	1d016 <__aeabi_fsub+0x22e>
   1d042:	2b00      	cmp	r3, #0
   1d044:	d063      	beq.n	1d10e <__aeabi_fsub+0x326>
   1d046:	2e00      	cmp	r6, #0
   1d048:	d100      	bne.n	1d04c <__aeabi_fsub+0x264>
   1d04a:	e713      	b.n	1ce74 <__aeabi_fsub+0x8c>
   1d04c:	199b      	adds	r3, r3, r6
   1d04e:	015a      	lsls	r2, r3, #5
   1d050:	d400      	bmi.n	1d054 <__aeabi_fsub+0x26c>
   1d052:	e73e      	b.n	1ced2 <__aeabi_fsub+0xea>
   1d054:	4a31      	ldr	r2, [pc, #196]	; (1d11c <__aeabi_fsub+0x334>)
   1d056:	000c      	movs	r4, r1
   1d058:	4013      	ands	r3, r2
   1d05a:	e70b      	b.n	1ce74 <__aeabi_fsub+0x8c>
   1d05c:	2c00      	cmp	r4, #0
   1d05e:	d11e      	bne.n	1d09e <__aeabi_fsub+0x2b6>
   1d060:	2b00      	cmp	r3, #0
   1d062:	d12f      	bne.n	1d0c4 <__aeabi_fsub+0x2dc>
   1d064:	2e00      	cmp	r6, #0
   1d066:	d04f      	beq.n	1d108 <__aeabi_fsub+0x320>
   1d068:	0033      	movs	r3, r6
   1d06a:	000d      	movs	r5, r1
   1d06c:	e702      	b.n	1ce74 <__aeabi_fsub+0x8c>
   1d06e:	2601      	movs	r6, #1
   1d070:	e755      	b.n	1cf1e <__aeabi_fsub+0x136>
   1d072:	2c00      	cmp	r4, #0
   1d074:	d11f      	bne.n	1d0b6 <__aeabi_fsub+0x2ce>
   1d076:	2b00      	cmp	r3, #0
   1d078:	d043      	beq.n	1d102 <__aeabi_fsub+0x31a>
   1d07a:	43c9      	mvns	r1, r1
   1d07c:	2900      	cmp	r1, #0
   1d07e:	d00b      	beq.n	1d098 <__aeabi_fsub+0x2b0>
   1d080:	28ff      	cmp	r0, #255	; 0xff
   1d082:	d039      	beq.n	1d0f8 <__aeabi_fsub+0x310>
   1d084:	291b      	cmp	r1, #27
   1d086:	dc44      	bgt.n	1d112 <__aeabi_fsub+0x32a>
   1d088:	001c      	movs	r4, r3
   1d08a:	2720      	movs	r7, #32
   1d08c:	40cc      	lsrs	r4, r1
   1d08e:	1a79      	subs	r1, r7, r1
   1d090:	408b      	lsls	r3, r1
   1d092:	1e59      	subs	r1, r3, #1
   1d094:	418b      	sbcs	r3, r1
   1d096:	4323      	orrs	r3, r4
   1d098:	199b      	adds	r3, r3, r6
   1d09a:	0004      	movs	r4, r0
   1d09c:	e740      	b.n	1cf20 <__aeabi_fsub+0x138>
   1d09e:	2b00      	cmp	r3, #0
   1d0a0:	d11a      	bne.n	1d0d8 <__aeabi_fsub+0x2f0>
   1d0a2:	2e00      	cmp	r6, #0
   1d0a4:	d124      	bne.n	1d0f0 <__aeabi_fsub+0x308>
   1d0a6:	2780      	movs	r7, #128	; 0x80
   1d0a8:	2200      	movs	r2, #0
   1d0aa:	03ff      	lsls	r7, r7, #15
   1d0ac:	e71b      	b.n	1cee6 <__aeabi_fsub+0xfe>
   1d0ae:	0033      	movs	r3, r6
   1d0b0:	0004      	movs	r4, r0
   1d0b2:	000d      	movs	r5, r1
   1d0b4:	e6de      	b.n	1ce74 <__aeabi_fsub+0x8c>
   1d0b6:	28ff      	cmp	r0, #255	; 0xff
   1d0b8:	d01e      	beq.n	1d0f8 <__aeabi_fsub+0x310>
   1d0ba:	2480      	movs	r4, #128	; 0x80
   1d0bc:	04e4      	lsls	r4, r4, #19
   1d0be:	4249      	negs	r1, r1
   1d0c0:	4323      	orrs	r3, r4
   1d0c2:	e7df      	b.n	1d084 <__aeabi_fsub+0x29c>
   1d0c4:	2e00      	cmp	r6, #0
   1d0c6:	d100      	bne.n	1d0ca <__aeabi_fsub+0x2e2>
   1d0c8:	e6d4      	b.n	1ce74 <__aeabi_fsub+0x8c>
   1d0ca:	1b9f      	subs	r7, r3, r6
   1d0cc:	017a      	lsls	r2, r7, #5
   1d0ce:	d400      	bmi.n	1d0d2 <__aeabi_fsub+0x2ea>
   1d0d0:	e737      	b.n	1cf42 <__aeabi_fsub+0x15a>
   1d0d2:	1af3      	subs	r3, r6, r3
   1d0d4:	000d      	movs	r5, r1
   1d0d6:	e6cd      	b.n	1ce74 <__aeabi_fsub+0x8c>
   1d0d8:	24ff      	movs	r4, #255	; 0xff
   1d0da:	2e00      	cmp	r6, #0
   1d0dc:	d100      	bne.n	1d0e0 <__aeabi_fsub+0x2f8>
   1d0de:	e6c9      	b.n	1ce74 <__aeabi_fsub+0x8c>
   1d0e0:	2280      	movs	r2, #128	; 0x80
   1d0e2:	4650      	mov	r0, sl
   1d0e4:	03d2      	lsls	r2, r2, #15
   1d0e6:	4210      	tst	r0, r2
   1d0e8:	d0a4      	beq.n	1d034 <__aeabi_fsub+0x24c>
   1d0ea:	4660      	mov	r0, ip
   1d0ec:	4210      	tst	r0, r2
   1d0ee:	d1a1      	bne.n	1d034 <__aeabi_fsub+0x24c>
   1d0f0:	0033      	movs	r3, r6
   1d0f2:	000d      	movs	r5, r1
   1d0f4:	24ff      	movs	r4, #255	; 0xff
   1d0f6:	e6bd      	b.n	1ce74 <__aeabi_fsub+0x8c>
   1d0f8:	0033      	movs	r3, r6
   1d0fa:	24ff      	movs	r4, #255	; 0xff
   1d0fc:	e6ba      	b.n	1ce74 <__aeabi_fsub+0x8c>
   1d0fe:	2301      	movs	r3, #1
   1d100:	e76e      	b.n	1cfe0 <__aeabi_fsub+0x1f8>
   1d102:	0033      	movs	r3, r6
   1d104:	0004      	movs	r4, r0
   1d106:	e6b5      	b.n	1ce74 <__aeabi_fsub+0x8c>
   1d108:	2700      	movs	r7, #0
   1d10a:	2200      	movs	r2, #0
   1d10c:	e71c      	b.n	1cf48 <__aeabi_fsub+0x160>
   1d10e:	0033      	movs	r3, r6
   1d110:	e6b0      	b.n	1ce74 <__aeabi_fsub+0x8c>
   1d112:	2301      	movs	r3, #1
   1d114:	e7c0      	b.n	1d098 <__aeabi_fsub+0x2b0>
   1d116:	46c0      	nop			; (mov r8, r8)
   1d118:	7dffffff 	.word	0x7dffffff
   1d11c:	fbffffff 	.word	0xfbffffff

0001d120 <__aeabi_f2iz>:
   1d120:	0241      	lsls	r1, r0, #9
   1d122:	0043      	lsls	r3, r0, #1
   1d124:	0fc2      	lsrs	r2, r0, #31
   1d126:	0a49      	lsrs	r1, r1, #9
   1d128:	0e1b      	lsrs	r3, r3, #24
   1d12a:	2000      	movs	r0, #0
   1d12c:	2b7e      	cmp	r3, #126	; 0x7e
   1d12e:	dd0d      	ble.n	1d14c <__aeabi_f2iz+0x2c>
   1d130:	2b9d      	cmp	r3, #157	; 0x9d
   1d132:	dc0c      	bgt.n	1d14e <__aeabi_f2iz+0x2e>
   1d134:	2080      	movs	r0, #128	; 0x80
   1d136:	0400      	lsls	r0, r0, #16
   1d138:	4301      	orrs	r1, r0
   1d13a:	2b95      	cmp	r3, #149	; 0x95
   1d13c:	dc0a      	bgt.n	1d154 <__aeabi_f2iz+0x34>
   1d13e:	2096      	movs	r0, #150	; 0x96
   1d140:	1ac3      	subs	r3, r0, r3
   1d142:	40d9      	lsrs	r1, r3
   1d144:	4248      	negs	r0, r1
   1d146:	2a00      	cmp	r2, #0
   1d148:	d100      	bne.n	1d14c <__aeabi_f2iz+0x2c>
   1d14a:	0008      	movs	r0, r1
   1d14c:	4770      	bx	lr
   1d14e:	4b03      	ldr	r3, [pc, #12]	; (1d15c <__aeabi_f2iz+0x3c>)
   1d150:	18d0      	adds	r0, r2, r3
   1d152:	e7fb      	b.n	1d14c <__aeabi_f2iz+0x2c>
   1d154:	3b96      	subs	r3, #150	; 0x96
   1d156:	4099      	lsls	r1, r3
   1d158:	e7f4      	b.n	1d144 <__aeabi_f2iz+0x24>
   1d15a:	46c0      	nop			; (mov r8, r8)
   1d15c:	7fffffff 	.word	0x7fffffff

0001d160 <__aeabi_i2f>:
   1d160:	b570      	push	{r4, r5, r6, lr}
   1d162:	2800      	cmp	r0, #0
   1d164:	d030      	beq.n	1d1c8 <__aeabi_i2f+0x68>
   1d166:	17c3      	asrs	r3, r0, #31
   1d168:	18c4      	adds	r4, r0, r3
   1d16a:	405c      	eors	r4, r3
   1d16c:	0fc5      	lsrs	r5, r0, #31
   1d16e:	0020      	movs	r0, r4
   1d170:	f7ff f8fa 	bl	1c368 <__clzsi2>
   1d174:	239e      	movs	r3, #158	; 0x9e
   1d176:	1a1b      	subs	r3, r3, r0
   1d178:	2b96      	cmp	r3, #150	; 0x96
   1d17a:	dc0d      	bgt.n	1d198 <__aeabi_i2f+0x38>
   1d17c:	2296      	movs	r2, #150	; 0x96
   1d17e:	1ad2      	subs	r2, r2, r3
   1d180:	4094      	lsls	r4, r2
   1d182:	002a      	movs	r2, r5
   1d184:	0264      	lsls	r4, r4, #9
   1d186:	0a64      	lsrs	r4, r4, #9
   1d188:	b2db      	uxtb	r3, r3
   1d18a:	0264      	lsls	r4, r4, #9
   1d18c:	05db      	lsls	r3, r3, #23
   1d18e:	0a60      	lsrs	r0, r4, #9
   1d190:	07d2      	lsls	r2, r2, #31
   1d192:	4318      	orrs	r0, r3
   1d194:	4310      	orrs	r0, r2
   1d196:	bd70      	pop	{r4, r5, r6, pc}
   1d198:	2b99      	cmp	r3, #153	; 0x99
   1d19a:	dc19      	bgt.n	1d1d0 <__aeabi_i2f+0x70>
   1d19c:	2299      	movs	r2, #153	; 0x99
   1d19e:	1ad2      	subs	r2, r2, r3
   1d1a0:	2a00      	cmp	r2, #0
   1d1a2:	dd29      	ble.n	1d1f8 <__aeabi_i2f+0x98>
   1d1a4:	4094      	lsls	r4, r2
   1d1a6:	0022      	movs	r2, r4
   1d1a8:	4c14      	ldr	r4, [pc, #80]	; (1d1fc <__aeabi_i2f+0x9c>)
   1d1aa:	4014      	ands	r4, r2
   1d1ac:	0751      	lsls	r1, r2, #29
   1d1ae:	d004      	beq.n	1d1ba <__aeabi_i2f+0x5a>
   1d1b0:	210f      	movs	r1, #15
   1d1b2:	400a      	ands	r2, r1
   1d1b4:	2a04      	cmp	r2, #4
   1d1b6:	d000      	beq.n	1d1ba <__aeabi_i2f+0x5a>
   1d1b8:	3404      	adds	r4, #4
   1d1ba:	0162      	lsls	r2, r4, #5
   1d1bc:	d413      	bmi.n	1d1e6 <__aeabi_i2f+0x86>
   1d1be:	01a4      	lsls	r4, r4, #6
   1d1c0:	0a64      	lsrs	r4, r4, #9
   1d1c2:	b2db      	uxtb	r3, r3
   1d1c4:	002a      	movs	r2, r5
   1d1c6:	e7e0      	b.n	1d18a <__aeabi_i2f+0x2a>
   1d1c8:	2200      	movs	r2, #0
   1d1ca:	2300      	movs	r3, #0
   1d1cc:	2400      	movs	r4, #0
   1d1ce:	e7dc      	b.n	1d18a <__aeabi_i2f+0x2a>
   1d1d0:	2205      	movs	r2, #5
   1d1d2:	0021      	movs	r1, r4
   1d1d4:	1a12      	subs	r2, r2, r0
   1d1d6:	40d1      	lsrs	r1, r2
   1d1d8:	22b9      	movs	r2, #185	; 0xb9
   1d1da:	1ad2      	subs	r2, r2, r3
   1d1dc:	4094      	lsls	r4, r2
   1d1de:	1e62      	subs	r2, r4, #1
   1d1e0:	4194      	sbcs	r4, r2
   1d1e2:	430c      	orrs	r4, r1
   1d1e4:	e7da      	b.n	1d19c <__aeabi_i2f+0x3c>
   1d1e6:	4b05      	ldr	r3, [pc, #20]	; (1d1fc <__aeabi_i2f+0x9c>)
   1d1e8:	002a      	movs	r2, r5
   1d1ea:	401c      	ands	r4, r3
   1d1ec:	239f      	movs	r3, #159	; 0x9f
   1d1ee:	01a4      	lsls	r4, r4, #6
   1d1f0:	1a1b      	subs	r3, r3, r0
   1d1f2:	0a64      	lsrs	r4, r4, #9
   1d1f4:	b2db      	uxtb	r3, r3
   1d1f6:	e7c8      	b.n	1d18a <__aeabi_i2f+0x2a>
   1d1f8:	0022      	movs	r2, r4
   1d1fa:	e7d5      	b.n	1d1a8 <__aeabi_i2f+0x48>
   1d1fc:	fbffffff 	.word	0xfbffffff

0001d200 <__aeabi_ui2f>:
   1d200:	b510      	push	{r4, lr}
   1d202:	1e04      	subs	r4, r0, #0
   1d204:	d027      	beq.n	1d256 <__aeabi_ui2f+0x56>
   1d206:	f7ff f8af 	bl	1c368 <__clzsi2>
   1d20a:	239e      	movs	r3, #158	; 0x9e
   1d20c:	1a1b      	subs	r3, r3, r0
   1d20e:	2b96      	cmp	r3, #150	; 0x96
   1d210:	dc0a      	bgt.n	1d228 <__aeabi_ui2f+0x28>
   1d212:	2296      	movs	r2, #150	; 0x96
   1d214:	1ad2      	subs	r2, r2, r3
   1d216:	4094      	lsls	r4, r2
   1d218:	0264      	lsls	r4, r4, #9
   1d21a:	0a64      	lsrs	r4, r4, #9
   1d21c:	b2db      	uxtb	r3, r3
   1d21e:	0264      	lsls	r4, r4, #9
   1d220:	05db      	lsls	r3, r3, #23
   1d222:	0a60      	lsrs	r0, r4, #9
   1d224:	4318      	orrs	r0, r3
   1d226:	bd10      	pop	{r4, pc}
   1d228:	2b99      	cmp	r3, #153	; 0x99
   1d22a:	dc17      	bgt.n	1d25c <__aeabi_ui2f+0x5c>
   1d22c:	2299      	movs	r2, #153	; 0x99
   1d22e:	1ad2      	subs	r2, r2, r3
   1d230:	2a00      	cmp	r2, #0
   1d232:	dd27      	ble.n	1d284 <__aeabi_ui2f+0x84>
   1d234:	4094      	lsls	r4, r2
   1d236:	0022      	movs	r2, r4
   1d238:	4c13      	ldr	r4, [pc, #76]	; (1d288 <__aeabi_ui2f+0x88>)
   1d23a:	4014      	ands	r4, r2
   1d23c:	0751      	lsls	r1, r2, #29
   1d23e:	d004      	beq.n	1d24a <__aeabi_ui2f+0x4a>
   1d240:	210f      	movs	r1, #15
   1d242:	400a      	ands	r2, r1
   1d244:	2a04      	cmp	r2, #4
   1d246:	d000      	beq.n	1d24a <__aeabi_ui2f+0x4a>
   1d248:	3404      	adds	r4, #4
   1d24a:	0162      	lsls	r2, r4, #5
   1d24c:	d412      	bmi.n	1d274 <__aeabi_ui2f+0x74>
   1d24e:	01a4      	lsls	r4, r4, #6
   1d250:	0a64      	lsrs	r4, r4, #9
   1d252:	b2db      	uxtb	r3, r3
   1d254:	e7e3      	b.n	1d21e <__aeabi_ui2f+0x1e>
   1d256:	2300      	movs	r3, #0
   1d258:	2400      	movs	r4, #0
   1d25a:	e7e0      	b.n	1d21e <__aeabi_ui2f+0x1e>
   1d25c:	22b9      	movs	r2, #185	; 0xb9
   1d25e:	0021      	movs	r1, r4
   1d260:	1ad2      	subs	r2, r2, r3
   1d262:	4091      	lsls	r1, r2
   1d264:	000a      	movs	r2, r1
   1d266:	1e51      	subs	r1, r2, #1
   1d268:	418a      	sbcs	r2, r1
   1d26a:	2105      	movs	r1, #5
   1d26c:	1a09      	subs	r1, r1, r0
   1d26e:	40cc      	lsrs	r4, r1
   1d270:	4314      	orrs	r4, r2
   1d272:	e7db      	b.n	1d22c <__aeabi_ui2f+0x2c>
   1d274:	4b04      	ldr	r3, [pc, #16]	; (1d288 <__aeabi_ui2f+0x88>)
   1d276:	401c      	ands	r4, r3
   1d278:	239f      	movs	r3, #159	; 0x9f
   1d27a:	01a4      	lsls	r4, r4, #6
   1d27c:	1a1b      	subs	r3, r3, r0
   1d27e:	0a64      	lsrs	r4, r4, #9
   1d280:	b2db      	uxtb	r3, r3
   1d282:	e7cc      	b.n	1d21e <__aeabi_ui2f+0x1e>
   1d284:	0022      	movs	r2, r4
   1d286:	e7d7      	b.n	1d238 <__aeabi_ui2f+0x38>
   1d288:	fbffffff 	.word	0xfbffffff

0001d28c <__aeabi_dadd>:
   1d28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d28e:	4645      	mov	r5, r8
   1d290:	46de      	mov	lr, fp
   1d292:	4657      	mov	r7, sl
   1d294:	464e      	mov	r6, r9
   1d296:	030c      	lsls	r4, r1, #12
   1d298:	b5e0      	push	{r5, r6, r7, lr}
   1d29a:	004e      	lsls	r6, r1, #1
   1d29c:	0fc9      	lsrs	r1, r1, #31
   1d29e:	4688      	mov	r8, r1
   1d2a0:	000d      	movs	r5, r1
   1d2a2:	0a61      	lsrs	r1, r4, #9
   1d2a4:	0f44      	lsrs	r4, r0, #29
   1d2a6:	430c      	orrs	r4, r1
   1d2a8:	00c7      	lsls	r7, r0, #3
   1d2aa:	0319      	lsls	r1, r3, #12
   1d2ac:	0058      	lsls	r0, r3, #1
   1d2ae:	0fdb      	lsrs	r3, r3, #31
   1d2b0:	469b      	mov	fp, r3
   1d2b2:	0a4b      	lsrs	r3, r1, #9
   1d2b4:	0f51      	lsrs	r1, r2, #29
   1d2b6:	430b      	orrs	r3, r1
   1d2b8:	0d76      	lsrs	r6, r6, #21
   1d2ba:	0d40      	lsrs	r0, r0, #21
   1d2bc:	0019      	movs	r1, r3
   1d2be:	00d2      	lsls	r2, r2, #3
   1d2c0:	45d8      	cmp	r8, fp
   1d2c2:	d100      	bne.n	1d2c6 <__aeabi_dadd+0x3a>
   1d2c4:	e0ae      	b.n	1d424 <__aeabi_dadd+0x198>
   1d2c6:	1a35      	subs	r5, r6, r0
   1d2c8:	2d00      	cmp	r5, #0
   1d2ca:	dc00      	bgt.n	1d2ce <__aeabi_dadd+0x42>
   1d2cc:	e0f6      	b.n	1d4bc <__aeabi_dadd+0x230>
   1d2ce:	2800      	cmp	r0, #0
   1d2d0:	d10f      	bne.n	1d2f2 <__aeabi_dadd+0x66>
   1d2d2:	4313      	orrs	r3, r2
   1d2d4:	d100      	bne.n	1d2d8 <__aeabi_dadd+0x4c>
   1d2d6:	e0db      	b.n	1d490 <__aeabi_dadd+0x204>
   1d2d8:	1e6b      	subs	r3, r5, #1
   1d2da:	2b00      	cmp	r3, #0
   1d2dc:	d000      	beq.n	1d2e0 <__aeabi_dadd+0x54>
   1d2de:	e137      	b.n	1d550 <__aeabi_dadd+0x2c4>
   1d2e0:	1aba      	subs	r2, r7, r2
   1d2e2:	4297      	cmp	r7, r2
   1d2e4:	41bf      	sbcs	r7, r7
   1d2e6:	1a64      	subs	r4, r4, r1
   1d2e8:	427f      	negs	r7, r7
   1d2ea:	1be4      	subs	r4, r4, r7
   1d2ec:	2601      	movs	r6, #1
   1d2ee:	0017      	movs	r7, r2
   1d2f0:	e024      	b.n	1d33c <__aeabi_dadd+0xb0>
   1d2f2:	4bc6      	ldr	r3, [pc, #792]	; (1d60c <__aeabi_dadd+0x380>)
   1d2f4:	429e      	cmp	r6, r3
   1d2f6:	d04d      	beq.n	1d394 <__aeabi_dadd+0x108>
   1d2f8:	2380      	movs	r3, #128	; 0x80
   1d2fa:	041b      	lsls	r3, r3, #16
   1d2fc:	4319      	orrs	r1, r3
   1d2fe:	2d38      	cmp	r5, #56	; 0x38
   1d300:	dd00      	ble.n	1d304 <__aeabi_dadd+0x78>
   1d302:	e107      	b.n	1d514 <__aeabi_dadd+0x288>
   1d304:	2d1f      	cmp	r5, #31
   1d306:	dd00      	ble.n	1d30a <__aeabi_dadd+0x7e>
   1d308:	e138      	b.n	1d57c <__aeabi_dadd+0x2f0>
   1d30a:	2020      	movs	r0, #32
   1d30c:	1b43      	subs	r3, r0, r5
   1d30e:	469a      	mov	sl, r3
   1d310:	000b      	movs	r3, r1
   1d312:	4650      	mov	r0, sl
   1d314:	4083      	lsls	r3, r0
   1d316:	4699      	mov	r9, r3
   1d318:	0013      	movs	r3, r2
   1d31a:	4648      	mov	r0, r9
   1d31c:	40eb      	lsrs	r3, r5
   1d31e:	4318      	orrs	r0, r3
   1d320:	0003      	movs	r3, r0
   1d322:	4650      	mov	r0, sl
   1d324:	4082      	lsls	r2, r0
   1d326:	1e50      	subs	r0, r2, #1
   1d328:	4182      	sbcs	r2, r0
   1d32a:	40e9      	lsrs	r1, r5
   1d32c:	431a      	orrs	r2, r3
   1d32e:	1aba      	subs	r2, r7, r2
   1d330:	1a61      	subs	r1, r4, r1
   1d332:	4297      	cmp	r7, r2
   1d334:	41a4      	sbcs	r4, r4
   1d336:	0017      	movs	r7, r2
   1d338:	4264      	negs	r4, r4
   1d33a:	1b0c      	subs	r4, r1, r4
   1d33c:	0223      	lsls	r3, r4, #8
   1d33e:	d562      	bpl.n	1d406 <__aeabi_dadd+0x17a>
   1d340:	0264      	lsls	r4, r4, #9
   1d342:	0a65      	lsrs	r5, r4, #9
   1d344:	2d00      	cmp	r5, #0
   1d346:	d100      	bne.n	1d34a <__aeabi_dadd+0xbe>
   1d348:	e0df      	b.n	1d50a <__aeabi_dadd+0x27e>
   1d34a:	0028      	movs	r0, r5
   1d34c:	f7ff f80c 	bl	1c368 <__clzsi2>
   1d350:	0003      	movs	r3, r0
   1d352:	3b08      	subs	r3, #8
   1d354:	2b1f      	cmp	r3, #31
   1d356:	dd00      	ble.n	1d35a <__aeabi_dadd+0xce>
   1d358:	e0d2      	b.n	1d500 <__aeabi_dadd+0x274>
   1d35a:	2220      	movs	r2, #32
   1d35c:	003c      	movs	r4, r7
   1d35e:	1ad2      	subs	r2, r2, r3
   1d360:	409d      	lsls	r5, r3
   1d362:	40d4      	lsrs	r4, r2
   1d364:	409f      	lsls	r7, r3
   1d366:	4325      	orrs	r5, r4
   1d368:	429e      	cmp	r6, r3
   1d36a:	dd00      	ble.n	1d36e <__aeabi_dadd+0xe2>
   1d36c:	e0c4      	b.n	1d4f8 <__aeabi_dadd+0x26c>
   1d36e:	1b9e      	subs	r6, r3, r6
   1d370:	1c73      	adds	r3, r6, #1
   1d372:	2b1f      	cmp	r3, #31
   1d374:	dd00      	ble.n	1d378 <__aeabi_dadd+0xec>
   1d376:	e0f1      	b.n	1d55c <__aeabi_dadd+0x2d0>
   1d378:	2220      	movs	r2, #32
   1d37a:	0038      	movs	r0, r7
   1d37c:	0029      	movs	r1, r5
   1d37e:	1ad2      	subs	r2, r2, r3
   1d380:	40d8      	lsrs	r0, r3
   1d382:	4091      	lsls	r1, r2
   1d384:	4097      	lsls	r7, r2
   1d386:	002c      	movs	r4, r5
   1d388:	4301      	orrs	r1, r0
   1d38a:	1e78      	subs	r0, r7, #1
   1d38c:	4187      	sbcs	r7, r0
   1d38e:	40dc      	lsrs	r4, r3
   1d390:	2600      	movs	r6, #0
   1d392:	430f      	orrs	r7, r1
   1d394:	077b      	lsls	r3, r7, #29
   1d396:	d009      	beq.n	1d3ac <__aeabi_dadd+0x120>
   1d398:	230f      	movs	r3, #15
   1d39a:	403b      	ands	r3, r7
   1d39c:	2b04      	cmp	r3, #4
   1d39e:	d005      	beq.n	1d3ac <__aeabi_dadd+0x120>
   1d3a0:	1d3b      	adds	r3, r7, #4
   1d3a2:	42bb      	cmp	r3, r7
   1d3a4:	41bf      	sbcs	r7, r7
   1d3a6:	427f      	negs	r7, r7
   1d3a8:	19e4      	adds	r4, r4, r7
   1d3aa:	001f      	movs	r7, r3
   1d3ac:	0223      	lsls	r3, r4, #8
   1d3ae:	d52c      	bpl.n	1d40a <__aeabi_dadd+0x17e>
   1d3b0:	4b96      	ldr	r3, [pc, #600]	; (1d60c <__aeabi_dadd+0x380>)
   1d3b2:	3601      	adds	r6, #1
   1d3b4:	429e      	cmp	r6, r3
   1d3b6:	d100      	bne.n	1d3ba <__aeabi_dadd+0x12e>
   1d3b8:	e09a      	b.n	1d4f0 <__aeabi_dadd+0x264>
   1d3ba:	4645      	mov	r5, r8
   1d3bc:	4b94      	ldr	r3, [pc, #592]	; (1d610 <__aeabi_dadd+0x384>)
   1d3be:	08ff      	lsrs	r7, r7, #3
   1d3c0:	401c      	ands	r4, r3
   1d3c2:	0760      	lsls	r0, r4, #29
   1d3c4:	0576      	lsls	r6, r6, #21
   1d3c6:	0264      	lsls	r4, r4, #9
   1d3c8:	4307      	orrs	r7, r0
   1d3ca:	0b24      	lsrs	r4, r4, #12
   1d3cc:	0d76      	lsrs	r6, r6, #21
   1d3ce:	2100      	movs	r1, #0
   1d3d0:	0324      	lsls	r4, r4, #12
   1d3d2:	0b23      	lsrs	r3, r4, #12
   1d3d4:	0d0c      	lsrs	r4, r1, #20
   1d3d6:	4a8f      	ldr	r2, [pc, #572]	; (1d614 <__aeabi_dadd+0x388>)
   1d3d8:	0524      	lsls	r4, r4, #20
   1d3da:	431c      	orrs	r4, r3
   1d3dc:	4014      	ands	r4, r2
   1d3de:	0533      	lsls	r3, r6, #20
   1d3e0:	4323      	orrs	r3, r4
   1d3e2:	005b      	lsls	r3, r3, #1
   1d3e4:	07ed      	lsls	r5, r5, #31
   1d3e6:	085b      	lsrs	r3, r3, #1
   1d3e8:	432b      	orrs	r3, r5
   1d3ea:	0038      	movs	r0, r7
   1d3ec:	0019      	movs	r1, r3
   1d3ee:	bc3c      	pop	{r2, r3, r4, r5}
   1d3f0:	4690      	mov	r8, r2
   1d3f2:	4699      	mov	r9, r3
   1d3f4:	46a2      	mov	sl, r4
   1d3f6:	46ab      	mov	fp, r5
   1d3f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d3fa:	4664      	mov	r4, ip
   1d3fc:	4304      	orrs	r4, r0
   1d3fe:	d100      	bne.n	1d402 <__aeabi_dadd+0x176>
   1d400:	e211      	b.n	1d826 <__aeabi_dadd+0x59a>
   1d402:	0004      	movs	r4, r0
   1d404:	4667      	mov	r7, ip
   1d406:	077b      	lsls	r3, r7, #29
   1d408:	d1c6      	bne.n	1d398 <__aeabi_dadd+0x10c>
   1d40a:	4645      	mov	r5, r8
   1d40c:	0760      	lsls	r0, r4, #29
   1d40e:	08ff      	lsrs	r7, r7, #3
   1d410:	4307      	orrs	r7, r0
   1d412:	08e4      	lsrs	r4, r4, #3
   1d414:	4b7d      	ldr	r3, [pc, #500]	; (1d60c <__aeabi_dadd+0x380>)
   1d416:	429e      	cmp	r6, r3
   1d418:	d030      	beq.n	1d47c <__aeabi_dadd+0x1f0>
   1d41a:	0324      	lsls	r4, r4, #12
   1d41c:	0576      	lsls	r6, r6, #21
   1d41e:	0b24      	lsrs	r4, r4, #12
   1d420:	0d76      	lsrs	r6, r6, #21
   1d422:	e7d4      	b.n	1d3ce <__aeabi_dadd+0x142>
   1d424:	1a33      	subs	r3, r6, r0
   1d426:	469a      	mov	sl, r3
   1d428:	2b00      	cmp	r3, #0
   1d42a:	dd78      	ble.n	1d51e <__aeabi_dadd+0x292>
   1d42c:	2800      	cmp	r0, #0
   1d42e:	d031      	beq.n	1d494 <__aeabi_dadd+0x208>
   1d430:	4876      	ldr	r0, [pc, #472]	; (1d60c <__aeabi_dadd+0x380>)
   1d432:	4286      	cmp	r6, r0
   1d434:	d0ae      	beq.n	1d394 <__aeabi_dadd+0x108>
   1d436:	2080      	movs	r0, #128	; 0x80
   1d438:	0400      	lsls	r0, r0, #16
   1d43a:	4301      	orrs	r1, r0
   1d43c:	4653      	mov	r3, sl
   1d43e:	2b38      	cmp	r3, #56	; 0x38
   1d440:	dc00      	bgt.n	1d444 <__aeabi_dadd+0x1b8>
   1d442:	e0e9      	b.n	1d618 <__aeabi_dadd+0x38c>
   1d444:	430a      	orrs	r2, r1
   1d446:	1e51      	subs	r1, r2, #1
   1d448:	418a      	sbcs	r2, r1
   1d44a:	2100      	movs	r1, #0
   1d44c:	19d2      	adds	r2, r2, r7
   1d44e:	42ba      	cmp	r2, r7
   1d450:	41bf      	sbcs	r7, r7
   1d452:	1909      	adds	r1, r1, r4
   1d454:	427c      	negs	r4, r7
   1d456:	0017      	movs	r7, r2
   1d458:	190c      	adds	r4, r1, r4
   1d45a:	0223      	lsls	r3, r4, #8
   1d45c:	d5d3      	bpl.n	1d406 <__aeabi_dadd+0x17a>
   1d45e:	4b6b      	ldr	r3, [pc, #428]	; (1d60c <__aeabi_dadd+0x380>)
   1d460:	3601      	adds	r6, #1
   1d462:	429e      	cmp	r6, r3
   1d464:	d100      	bne.n	1d468 <__aeabi_dadd+0x1dc>
   1d466:	e13a      	b.n	1d6de <__aeabi_dadd+0x452>
   1d468:	2001      	movs	r0, #1
   1d46a:	4b69      	ldr	r3, [pc, #420]	; (1d610 <__aeabi_dadd+0x384>)
   1d46c:	401c      	ands	r4, r3
   1d46e:	087b      	lsrs	r3, r7, #1
   1d470:	4007      	ands	r7, r0
   1d472:	431f      	orrs	r7, r3
   1d474:	07e0      	lsls	r0, r4, #31
   1d476:	4307      	orrs	r7, r0
   1d478:	0864      	lsrs	r4, r4, #1
   1d47a:	e78b      	b.n	1d394 <__aeabi_dadd+0x108>
   1d47c:	0023      	movs	r3, r4
   1d47e:	433b      	orrs	r3, r7
   1d480:	d100      	bne.n	1d484 <__aeabi_dadd+0x1f8>
   1d482:	e1cb      	b.n	1d81c <__aeabi_dadd+0x590>
   1d484:	2280      	movs	r2, #128	; 0x80
   1d486:	0312      	lsls	r2, r2, #12
   1d488:	4314      	orrs	r4, r2
   1d48a:	0324      	lsls	r4, r4, #12
   1d48c:	0b24      	lsrs	r4, r4, #12
   1d48e:	e79e      	b.n	1d3ce <__aeabi_dadd+0x142>
   1d490:	002e      	movs	r6, r5
   1d492:	e77f      	b.n	1d394 <__aeabi_dadd+0x108>
   1d494:	0008      	movs	r0, r1
   1d496:	4310      	orrs	r0, r2
   1d498:	d100      	bne.n	1d49c <__aeabi_dadd+0x210>
   1d49a:	e0b4      	b.n	1d606 <__aeabi_dadd+0x37a>
   1d49c:	1e58      	subs	r0, r3, #1
   1d49e:	2800      	cmp	r0, #0
   1d4a0:	d000      	beq.n	1d4a4 <__aeabi_dadd+0x218>
   1d4a2:	e0de      	b.n	1d662 <__aeabi_dadd+0x3d6>
   1d4a4:	18ba      	adds	r2, r7, r2
   1d4a6:	42ba      	cmp	r2, r7
   1d4a8:	419b      	sbcs	r3, r3
   1d4aa:	1864      	adds	r4, r4, r1
   1d4ac:	425b      	negs	r3, r3
   1d4ae:	18e4      	adds	r4, r4, r3
   1d4b0:	0017      	movs	r7, r2
   1d4b2:	2601      	movs	r6, #1
   1d4b4:	0223      	lsls	r3, r4, #8
   1d4b6:	d5a6      	bpl.n	1d406 <__aeabi_dadd+0x17a>
   1d4b8:	2602      	movs	r6, #2
   1d4ba:	e7d5      	b.n	1d468 <__aeabi_dadd+0x1dc>
   1d4bc:	2d00      	cmp	r5, #0
   1d4be:	d16e      	bne.n	1d59e <__aeabi_dadd+0x312>
   1d4c0:	1c70      	adds	r0, r6, #1
   1d4c2:	0540      	lsls	r0, r0, #21
   1d4c4:	0d40      	lsrs	r0, r0, #21
   1d4c6:	2801      	cmp	r0, #1
   1d4c8:	dc00      	bgt.n	1d4cc <__aeabi_dadd+0x240>
   1d4ca:	e0f9      	b.n	1d6c0 <__aeabi_dadd+0x434>
   1d4cc:	1ab8      	subs	r0, r7, r2
   1d4ce:	4684      	mov	ip, r0
   1d4d0:	4287      	cmp	r7, r0
   1d4d2:	4180      	sbcs	r0, r0
   1d4d4:	1ae5      	subs	r5, r4, r3
   1d4d6:	4240      	negs	r0, r0
   1d4d8:	1a2d      	subs	r5, r5, r0
   1d4da:	0228      	lsls	r0, r5, #8
   1d4dc:	d400      	bmi.n	1d4e0 <__aeabi_dadd+0x254>
   1d4de:	e089      	b.n	1d5f4 <__aeabi_dadd+0x368>
   1d4e0:	1bd7      	subs	r7, r2, r7
   1d4e2:	42ba      	cmp	r2, r7
   1d4e4:	4192      	sbcs	r2, r2
   1d4e6:	1b1c      	subs	r4, r3, r4
   1d4e8:	4252      	negs	r2, r2
   1d4ea:	1aa5      	subs	r5, r4, r2
   1d4ec:	46d8      	mov	r8, fp
   1d4ee:	e729      	b.n	1d344 <__aeabi_dadd+0xb8>
   1d4f0:	4645      	mov	r5, r8
   1d4f2:	2400      	movs	r4, #0
   1d4f4:	2700      	movs	r7, #0
   1d4f6:	e76a      	b.n	1d3ce <__aeabi_dadd+0x142>
   1d4f8:	4c45      	ldr	r4, [pc, #276]	; (1d610 <__aeabi_dadd+0x384>)
   1d4fa:	1af6      	subs	r6, r6, r3
   1d4fc:	402c      	ands	r4, r5
   1d4fe:	e749      	b.n	1d394 <__aeabi_dadd+0x108>
   1d500:	003d      	movs	r5, r7
   1d502:	3828      	subs	r0, #40	; 0x28
   1d504:	4085      	lsls	r5, r0
   1d506:	2700      	movs	r7, #0
   1d508:	e72e      	b.n	1d368 <__aeabi_dadd+0xdc>
   1d50a:	0038      	movs	r0, r7
   1d50c:	f7fe ff2c 	bl	1c368 <__clzsi2>
   1d510:	3020      	adds	r0, #32
   1d512:	e71d      	b.n	1d350 <__aeabi_dadd+0xc4>
   1d514:	430a      	orrs	r2, r1
   1d516:	1e51      	subs	r1, r2, #1
   1d518:	418a      	sbcs	r2, r1
   1d51a:	2100      	movs	r1, #0
   1d51c:	e707      	b.n	1d32e <__aeabi_dadd+0xa2>
   1d51e:	2b00      	cmp	r3, #0
   1d520:	d000      	beq.n	1d524 <__aeabi_dadd+0x298>
   1d522:	e0f3      	b.n	1d70c <__aeabi_dadd+0x480>
   1d524:	1c70      	adds	r0, r6, #1
   1d526:	0543      	lsls	r3, r0, #21
   1d528:	0d5b      	lsrs	r3, r3, #21
   1d52a:	2b01      	cmp	r3, #1
   1d52c:	dc00      	bgt.n	1d530 <__aeabi_dadd+0x2a4>
   1d52e:	e0ad      	b.n	1d68c <__aeabi_dadd+0x400>
   1d530:	4b36      	ldr	r3, [pc, #216]	; (1d60c <__aeabi_dadd+0x380>)
   1d532:	4298      	cmp	r0, r3
   1d534:	d100      	bne.n	1d538 <__aeabi_dadd+0x2ac>
   1d536:	e0d1      	b.n	1d6dc <__aeabi_dadd+0x450>
   1d538:	18ba      	adds	r2, r7, r2
   1d53a:	42ba      	cmp	r2, r7
   1d53c:	41bf      	sbcs	r7, r7
   1d53e:	1864      	adds	r4, r4, r1
   1d540:	427f      	negs	r7, r7
   1d542:	19e4      	adds	r4, r4, r7
   1d544:	07e7      	lsls	r7, r4, #31
   1d546:	0852      	lsrs	r2, r2, #1
   1d548:	4317      	orrs	r7, r2
   1d54a:	0864      	lsrs	r4, r4, #1
   1d54c:	0006      	movs	r6, r0
   1d54e:	e721      	b.n	1d394 <__aeabi_dadd+0x108>
   1d550:	482e      	ldr	r0, [pc, #184]	; (1d60c <__aeabi_dadd+0x380>)
   1d552:	4285      	cmp	r5, r0
   1d554:	d100      	bne.n	1d558 <__aeabi_dadd+0x2cc>
   1d556:	e093      	b.n	1d680 <__aeabi_dadd+0x3f4>
   1d558:	001d      	movs	r5, r3
   1d55a:	e6d0      	b.n	1d2fe <__aeabi_dadd+0x72>
   1d55c:	0029      	movs	r1, r5
   1d55e:	3e1f      	subs	r6, #31
   1d560:	40f1      	lsrs	r1, r6
   1d562:	2b20      	cmp	r3, #32
   1d564:	d100      	bne.n	1d568 <__aeabi_dadd+0x2dc>
   1d566:	e08d      	b.n	1d684 <__aeabi_dadd+0x3f8>
   1d568:	2240      	movs	r2, #64	; 0x40
   1d56a:	1ad3      	subs	r3, r2, r3
   1d56c:	409d      	lsls	r5, r3
   1d56e:	432f      	orrs	r7, r5
   1d570:	1e7d      	subs	r5, r7, #1
   1d572:	41af      	sbcs	r7, r5
   1d574:	2400      	movs	r4, #0
   1d576:	430f      	orrs	r7, r1
   1d578:	2600      	movs	r6, #0
   1d57a:	e744      	b.n	1d406 <__aeabi_dadd+0x17a>
   1d57c:	002b      	movs	r3, r5
   1d57e:	0008      	movs	r0, r1
   1d580:	3b20      	subs	r3, #32
   1d582:	40d8      	lsrs	r0, r3
   1d584:	0003      	movs	r3, r0
   1d586:	2d20      	cmp	r5, #32
   1d588:	d100      	bne.n	1d58c <__aeabi_dadd+0x300>
   1d58a:	e07d      	b.n	1d688 <__aeabi_dadd+0x3fc>
   1d58c:	2040      	movs	r0, #64	; 0x40
   1d58e:	1b45      	subs	r5, r0, r5
   1d590:	40a9      	lsls	r1, r5
   1d592:	430a      	orrs	r2, r1
   1d594:	1e51      	subs	r1, r2, #1
   1d596:	418a      	sbcs	r2, r1
   1d598:	2100      	movs	r1, #0
   1d59a:	431a      	orrs	r2, r3
   1d59c:	e6c7      	b.n	1d32e <__aeabi_dadd+0xa2>
   1d59e:	2e00      	cmp	r6, #0
   1d5a0:	d050      	beq.n	1d644 <__aeabi_dadd+0x3b8>
   1d5a2:	4e1a      	ldr	r6, [pc, #104]	; (1d60c <__aeabi_dadd+0x380>)
   1d5a4:	42b0      	cmp	r0, r6
   1d5a6:	d057      	beq.n	1d658 <__aeabi_dadd+0x3cc>
   1d5a8:	2680      	movs	r6, #128	; 0x80
   1d5aa:	426b      	negs	r3, r5
   1d5ac:	4699      	mov	r9, r3
   1d5ae:	0436      	lsls	r6, r6, #16
   1d5b0:	4334      	orrs	r4, r6
   1d5b2:	464b      	mov	r3, r9
   1d5b4:	2b38      	cmp	r3, #56	; 0x38
   1d5b6:	dd00      	ble.n	1d5ba <__aeabi_dadd+0x32e>
   1d5b8:	e0d6      	b.n	1d768 <__aeabi_dadd+0x4dc>
   1d5ba:	2b1f      	cmp	r3, #31
   1d5bc:	dd00      	ble.n	1d5c0 <__aeabi_dadd+0x334>
   1d5be:	e135      	b.n	1d82c <__aeabi_dadd+0x5a0>
   1d5c0:	2620      	movs	r6, #32
   1d5c2:	1af5      	subs	r5, r6, r3
   1d5c4:	0026      	movs	r6, r4
   1d5c6:	40ae      	lsls	r6, r5
   1d5c8:	46b2      	mov	sl, r6
   1d5ca:	003e      	movs	r6, r7
   1d5cc:	40de      	lsrs	r6, r3
   1d5ce:	46ac      	mov	ip, r5
   1d5d0:	0035      	movs	r5, r6
   1d5d2:	4656      	mov	r6, sl
   1d5d4:	432e      	orrs	r6, r5
   1d5d6:	4665      	mov	r5, ip
   1d5d8:	40af      	lsls	r7, r5
   1d5da:	1e7d      	subs	r5, r7, #1
   1d5dc:	41af      	sbcs	r7, r5
   1d5de:	40dc      	lsrs	r4, r3
   1d5e0:	4337      	orrs	r7, r6
   1d5e2:	1bd7      	subs	r7, r2, r7
   1d5e4:	42ba      	cmp	r2, r7
   1d5e6:	4192      	sbcs	r2, r2
   1d5e8:	1b0c      	subs	r4, r1, r4
   1d5ea:	4252      	negs	r2, r2
   1d5ec:	1aa4      	subs	r4, r4, r2
   1d5ee:	0006      	movs	r6, r0
   1d5f0:	46d8      	mov	r8, fp
   1d5f2:	e6a3      	b.n	1d33c <__aeabi_dadd+0xb0>
   1d5f4:	4664      	mov	r4, ip
   1d5f6:	4667      	mov	r7, ip
   1d5f8:	432c      	orrs	r4, r5
   1d5fa:	d000      	beq.n	1d5fe <__aeabi_dadd+0x372>
   1d5fc:	e6a2      	b.n	1d344 <__aeabi_dadd+0xb8>
   1d5fe:	2500      	movs	r5, #0
   1d600:	2600      	movs	r6, #0
   1d602:	2700      	movs	r7, #0
   1d604:	e706      	b.n	1d414 <__aeabi_dadd+0x188>
   1d606:	001e      	movs	r6, r3
   1d608:	e6c4      	b.n	1d394 <__aeabi_dadd+0x108>
   1d60a:	46c0      	nop			; (mov r8, r8)
   1d60c:	000007ff 	.word	0x000007ff
   1d610:	ff7fffff 	.word	0xff7fffff
   1d614:	800fffff 	.word	0x800fffff
   1d618:	2b1f      	cmp	r3, #31
   1d61a:	dc63      	bgt.n	1d6e4 <__aeabi_dadd+0x458>
   1d61c:	2020      	movs	r0, #32
   1d61e:	1ac3      	subs	r3, r0, r3
   1d620:	0008      	movs	r0, r1
   1d622:	4098      	lsls	r0, r3
   1d624:	469c      	mov	ip, r3
   1d626:	4683      	mov	fp, r0
   1d628:	4653      	mov	r3, sl
   1d62a:	0010      	movs	r0, r2
   1d62c:	40d8      	lsrs	r0, r3
   1d62e:	0003      	movs	r3, r0
   1d630:	4658      	mov	r0, fp
   1d632:	4318      	orrs	r0, r3
   1d634:	4663      	mov	r3, ip
   1d636:	409a      	lsls	r2, r3
   1d638:	1e53      	subs	r3, r2, #1
   1d63a:	419a      	sbcs	r2, r3
   1d63c:	4653      	mov	r3, sl
   1d63e:	4302      	orrs	r2, r0
   1d640:	40d9      	lsrs	r1, r3
   1d642:	e703      	b.n	1d44c <__aeabi_dadd+0x1c0>
   1d644:	0026      	movs	r6, r4
   1d646:	433e      	orrs	r6, r7
   1d648:	d006      	beq.n	1d658 <__aeabi_dadd+0x3cc>
   1d64a:	43eb      	mvns	r3, r5
   1d64c:	4699      	mov	r9, r3
   1d64e:	2b00      	cmp	r3, #0
   1d650:	d0c7      	beq.n	1d5e2 <__aeabi_dadd+0x356>
   1d652:	4e94      	ldr	r6, [pc, #592]	; (1d8a4 <__aeabi_dadd+0x618>)
   1d654:	42b0      	cmp	r0, r6
   1d656:	d1ac      	bne.n	1d5b2 <__aeabi_dadd+0x326>
   1d658:	000c      	movs	r4, r1
   1d65a:	0017      	movs	r7, r2
   1d65c:	0006      	movs	r6, r0
   1d65e:	46d8      	mov	r8, fp
   1d660:	e698      	b.n	1d394 <__aeabi_dadd+0x108>
   1d662:	4b90      	ldr	r3, [pc, #576]	; (1d8a4 <__aeabi_dadd+0x618>)
   1d664:	459a      	cmp	sl, r3
   1d666:	d00b      	beq.n	1d680 <__aeabi_dadd+0x3f4>
   1d668:	4682      	mov	sl, r0
   1d66a:	e6e7      	b.n	1d43c <__aeabi_dadd+0x1b0>
   1d66c:	2800      	cmp	r0, #0
   1d66e:	d000      	beq.n	1d672 <__aeabi_dadd+0x3e6>
   1d670:	e09e      	b.n	1d7b0 <__aeabi_dadd+0x524>
   1d672:	0018      	movs	r0, r3
   1d674:	4310      	orrs	r0, r2
   1d676:	d100      	bne.n	1d67a <__aeabi_dadd+0x3ee>
   1d678:	e0e9      	b.n	1d84e <__aeabi_dadd+0x5c2>
   1d67a:	001c      	movs	r4, r3
   1d67c:	0017      	movs	r7, r2
   1d67e:	46d8      	mov	r8, fp
   1d680:	4e88      	ldr	r6, [pc, #544]	; (1d8a4 <__aeabi_dadd+0x618>)
   1d682:	e687      	b.n	1d394 <__aeabi_dadd+0x108>
   1d684:	2500      	movs	r5, #0
   1d686:	e772      	b.n	1d56e <__aeabi_dadd+0x2e2>
   1d688:	2100      	movs	r1, #0
   1d68a:	e782      	b.n	1d592 <__aeabi_dadd+0x306>
   1d68c:	0023      	movs	r3, r4
   1d68e:	433b      	orrs	r3, r7
   1d690:	2e00      	cmp	r6, #0
   1d692:	d000      	beq.n	1d696 <__aeabi_dadd+0x40a>
   1d694:	e0ab      	b.n	1d7ee <__aeabi_dadd+0x562>
   1d696:	2b00      	cmp	r3, #0
   1d698:	d100      	bne.n	1d69c <__aeabi_dadd+0x410>
   1d69a:	e0e7      	b.n	1d86c <__aeabi_dadd+0x5e0>
   1d69c:	000b      	movs	r3, r1
   1d69e:	4313      	orrs	r3, r2
   1d6a0:	d100      	bne.n	1d6a4 <__aeabi_dadd+0x418>
   1d6a2:	e677      	b.n	1d394 <__aeabi_dadd+0x108>
   1d6a4:	18ba      	adds	r2, r7, r2
   1d6a6:	42ba      	cmp	r2, r7
   1d6a8:	41bf      	sbcs	r7, r7
   1d6aa:	1864      	adds	r4, r4, r1
   1d6ac:	427f      	negs	r7, r7
   1d6ae:	19e4      	adds	r4, r4, r7
   1d6b0:	0223      	lsls	r3, r4, #8
   1d6b2:	d400      	bmi.n	1d6b6 <__aeabi_dadd+0x42a>
   1d6b4:	e0f2      	b.n	1d89c <__aeabi_dadd+0x610>
   1d6b6:	4b7c      	ldr	r3, [pc, #496]	; (1d8a8 <__aeabi_dadd+0x61c>)
   1d6b8:	0017      	movs	r7, r2
   1d6ba:	401c      	ands	r4, r3
   1d6bc:	0006      	movs	r6, r0
   1d6be:	e669      	b.n	1d394 <__aeabi_dadd+0x108>
   1d6c0:	0020      	movs	r0, r4
   1d6c2:	4338      	orrs	r0, r7
   1d6c4:	2e00      	cmp	r6, #0
   1d6c6:	d1d1      	bne.n	1d66c <__aeabi_dadd+0x3e0>
   1d6c8:	2800      	cmp	r0, #0
   1d6ca:	d15b      	bne.n	1d784 <__aeabi_dadd+0x4f8>
   1d6cc:	001c      	movs	r4, r3
   1d6ce:	4314      	orrs	r4, r2
   1d6d0:	d100      	bne.n	1d6d4 <__aeabi_dadd+0x448>
   1d6d2:	e0a8      	b.n	1d826 <__aeabi_dadd+0x59a>
   1d6d4:	001c      	movs	r4, r3
   1d6d6:	0017      	movs	r7, r2
   1d6d8:	46d8      	mov	r8, fp
   1d6da:	e65b      	b.n	1d394 <__aeabi_dadd+0x108>
   1d6dc:	0006      	movs	r6, r0
   1d6de:	2400      	movs	r4, #0
   1d6e0:	2700      	movs	r7, #0
   1d6e2:	e697      	b.n	1d414 <__aeabi_dadd+0x188>
   1d6e4:	4650      	mov	r0, sl
   1d6e6:	000b      	movs	r3, r1
   1d6e8:	3820      	subs	r0, #32
   1d6ea:	40c3      	lsrs	r3, r0
   1d6ec:	4699      	mov	r9, r3
   1d6ee:	4653      	mov	r3, sl
   1d6f0:	2b20      	cmp	r3, #32
   1d6f2:	d100      	bne.n	1d6f6 <__aeabi_dadd+0x46a>
   1d6f4:	e095      	b.n	1d822 <__aeabi_dadd+0x596>
   1d6f6:	2340      	movs	r3, #64	; 0x40
   1d6f8:	4650      	mov	r0, sl
   1d6fa:	1a1b      	subs	r3, r3, r0
   1d6fc:	4099      	lsls	r1, r3
   1d6fe:	430a      	orrs	r2, r1
   1d700:	1e51      	subs	r1, r2, #1
   1d702:	418a      	sbcs	r2, r1
   1d704:	464b      	mov	r3, r9
   1d706:	2100      	movs	r1, #0
   1d708:	431a      	orrs	r2, r3
   1d70a:	e69f      	b.n	1d44c <__aeabi_dadd+0x1c0>
   1d70c:	2e00      	cmp	r6, #0
   1d70e:	d130      	bne.n	1d772 <__aeabi_dadd+0x4e6>
   1d710:	0026      	movs	r6, r4
   1d712:	433e      	orrs	r6, r7
   1d714:	d067      	beq.n	1d7e6 <__aeabi_dadd+0x55a>
   1d716:	43db      	mvns	r3, r3
   1d718:	469a      	mov	sl, r3
   1d71a:	2b00      	cmp	r3, #0
   1d71c:	d01c      	beq.n	1d758 <__aeabi_dadd+0x4cc>
   1d71e:	4e61      	ldr	r6, [pc, #388]	; (1d8a4 <__aeabi_dadd+0x618>)
   1d720:	42b0      	cmp	r0, r6
   1d722:	d060      	beq.n	1d7e6 <__aeabi_dadd+0x55a>
   1d724:	4653      	mov	r3, sl
   1d726:	2b38      	cmp	r3, #56	; 0x38
   1d728:	dd00      	ble.n	1d72c <__aeabi_dadd+0x4a0>
   1d72a:	e096      	b.n	1d85a <__aeabi_dadd+0x5ce>
   1d72c:	2b1f      	cmp	r3, #31
   1d72e:	dd00      	ble.n	1d732 <__aeabi_dadd+0x4a6>
   1d730:	e09f      	b.n	1d872 <__aeabi_dadd+0x5e6>
   1d732:	2620      	movs	r6, #32
   1d734:	1af3      	subs	r3, r6, r3
   1d736:	0026      	movs	r6, r4
   1d738:	409e      	lsls	r6, r3
   1d73a:	469c      	mov	ip, r3
   1d73c:	46b3      	mov	fp, r6
   1d73e:	4653      	mov	r3, sl
   1d740:	003e      	movs	r6, r7
   1d742:	40de      	lsrs	r6, r3
   1d744:	0033      	movs	r3, r6
   1d746:	465e      	mov	r6, fp
   1d748:	431e      	orrs	r6, r3
   1d74a:	4663      	mov	r3, ip
   1d74c:	409f      	lsls	r7, r3
   1d74e:	1e7b      	subs	r3, r7, #1
   1d750:	419f      	sbcs	r7, r3
   1d752:	4653      	mov	r3, sl
   1d754:	40dc      	lsrs	r4, r3
   1d756:	4337      	orrs	r7, r6
   1d758:	18bf      	adds	r7, r7, r2
   1d75a:	4297      	cmp	r7, r2
   1d75c:	4192      	sbcs	r2, r2
   1d75e:	1864      	adds	r4, r4, r1
   1d760:	4252      	negs	r2, r2
   1d762:	18a4      	adds	r4, r4, r2
   1d764:	0006      	movs	r6, r0
   1d766:	e678      	b.n	1d45a <__aeabi_dadd+0x1ce>
   1d768:	4327      	orrs	r7, r4
   1d76a:	1e7c      	subs	r4, r7, #1
   1d76c:	41a7      	sbcs	r7, r4
   1d76e:	2400      	movs	r4, #0
   1d770:	e737      	b.n	1d5e2 <__aeabi_dadd+0x356>
   1d772:	4e4c      	ldr	r6, [pc, #304]	; (1d8a4 <__aeabi_dadd+0x618>)
   1d774:	42b0      	cmp	r0, r6
   1d776:	d036      	beq.n	1d7e6 <__aeabi_dadd+0x55a>
   1d778:	2680      	movs	r6, #128	; 0x80
   1d77a:	425b      	negs	r3, r3
   1d77c:	0436      	lsls	r6, r6, #16
   1d77e:	469a      	mov	sl, r3
   1d780:	4334      	orrs	r4, r6
   1d782:	e7cf      	b.n	1d724 <__aeabi_dadd+0x498>
   1d784:	0018      	movs	r0, r3
   1d786:	4310      	orrs	r0, r2
   1d788:	d100      	bne.n	1d78c <__aeabi_dadd+0x500>
   1d78a:	e603      	b.n	1d394 <__aeabi_dadd+0x108>
   1d78c:	1ab8      	subs	r0, r7, r2
   1d78e:	4684      	mov	ip, r0
   1d790:	4567      	cmp	r7, ip
   1d792:	41ad      	sbcs	r5, r5
   1d794:	1ae0      	subs	r0, r4, r3
   1d796:	426d      	negs	r5, r5
   1d798:	1b40      	subs	r0, r0, r5
   1d79a:	0205      	lsls	r5, r0, #8
   1d79c:	d400      	bmi.n	1d7a0 <__aeabi_dadd+0x514>
   1d79e:	e62c      	b.n	1d3fa <__aeabi_dadd+0x16e>
   1d7a0:	1bd7      	subs	r7, r2, r7
   1d7a2:	42ba      	cmp	r2, r7
   1d7a4:	4192      	sbcs	r2, r2
   1d7a6:	1b1c      	subs	r4, r3, r4
   1d7a8:	4252      	negs	r2, r2
   1d7aa:	1aa4      	subs	r4, r4, r2
   1d7ac:	46d8      	mov	r8, fp
   1d7ae:	e5f1      	b.n	1d394 <__aeabi_dadd+0x108>
   1d7b0:	0018      	movs	r0, r3
   1d7b2:	4310      	orrs	r0, r2
   1d7b4:	d100      	bne.n	1d7b8 <__aeabi_dadd+0x52c>
   1d7b6:	e763      	b.n	1d680 <__aeabi_dadd+0x3f4>
   1d7b8:	08f8      	lsrs	r0, r7, #3
   1d7ba:	0767      	lsls	r7, r4, #29
   1d7bc:	4307      	orrs	r7, r0
   1d7be:	2080      	movs	r0, #128	; 0x80
   1d7c0:	08e4      	lsrs	r4, r4, #3
   1d7c2:	0300      	lsls	r0, r0, #12
   1d7c4:	4204      	tst	r4, r0
   1d7c6:	d008      	beq.n	1d7da <__aeabi_dadd+0x54e>
   1d7c8:	08dd      	lsrs	r5, r3, #3
   1d7ca:	4205      	tst	r5, r0
   1d7cc:	d105      	bne.n	1d7da <__aeabi_dadd+0x54e>
   1d7ce:	08d2      	lsrs	r2, r2, #3
   1d7d0:	0759      	lsls	r1, r3, #29
   1d7d2:	4311      	orrs	r1, r2
   1d7d4:	000f      	movs	r7, r1
   1d7d6:	002c      	movs	r4, r5
   1d7d8:	46d8      	mov	r8, fp
   1d7da:	0f7b      	lsrs	r3, r7, #29
   1d7dc:	00e4      	lsls	r4, r4, #3
   1d7de:	431c      	orrs	r4, r3
   1d7e0:	00ff      	lsls	r7, r7, #3
   1d7e2:	4e30      	ldr	r6, [pc, #192]	; (1d8a4 <__aeabi_dadd+0x618>)
   1d7e4:	e5d6      	b.n	1d394 <__aeabi_dadd+0x108>
   1d7e6:	000c      	movs	r4, r1
   1d7e8:	0017      	movs	r7, r2
   1d7ea:	0006      	movs	r6, r0
   1d7ec:	e5d2      	b.n	1d394 <__aeabi_dadd+0x108>
   1d7ee:	2b00      	cmp	r3, #0
   1d7f0:	d038      	beq.n	1d864 <__aeabi_dadd+0x5d8>
   1d7f2:	000b      	movs	r3, r1
   1d7f4:	4313      	orrs	r3, r2
   1d7f6:	d100      	bne.n	1d7fa <__aeabi_dadd+0x56e>
   1d7f8:	e742      	b.n	1d680 <__aeabi_dadd+0x3f4>
   1d7fa:	08f8      	lsrs	r0, r7, #3
   1d7fc:	0767      	lsls	r7, r4, #29
   1d7fe:	4307      	orrs	r7, r0
   1d800:	2080      	movs	r0, #128	; 0x80
   1d802:	08e4      	lsrs	r4, r4, #3
   1d804:	0300      	lsls	r0, r0, #12
   1d806:	4204      	tst	r4, r0
   1d808:	d0e7      	beq.n	1d7da <__aeabi_dadd+0x54e>
   1d80a:	08cb      	lsrs	r3, r1, #3
   1d80c:	4203      	tst	r3, r0
   1d80e:	d1e4      	bne.n	1d7da <__aeabi_dadd+0x54e>
   1d810:	08d2      	lsrs	r2, r2, #3
   1d812:	0749      	lsls	r1, r1, #29
   1d814:	4311      	orrs	r1, r2
   1d816:	000f      	movs	r7, r1
   1d818:	001c      	movs	r4, r3
   1d81a:	e7de      	b.n	1d7da <__aeabi_dadd+0x54e>
   1d81c:	2700      	movs	r7, #0
   1d81e:	2400      	movs	r4, #0
   1d820:	e5d5      	b.n	1d3ce <__aeabi_dadd+0x142>
   1d822:	2100      	movs	r1, #0
   1d824:	e76b      	b.n	1d6fe <__aeabi_dadd+0x472>
   1d826:	2500      	movs	r5, #0
   1d828:	2700      	movs	r7, #0
   1d82a:	e5f3      	b.n	1d414 <__aeabi_dadd+0x188>
   1d82c:	464e      	mov	r6, r9
   1d82e:	0025      	movs	r5, r4
   1d830:	3e20      	subs	r6, #32
   1d832:	40f5      	lsrs	r5, r6
   1d834:	464b      	mov	r3, r9
   1d836:	002e      	movs	r6, r5
   1d838:	2b20      	cmp	r3, #32
   1d83a:	d02d      	beq.n	1d898 <__aeabi_dadd+0x60c>
   1d83c:	2540      	movs	r5, #64	; 0x40
   1d83e:	1aed      	subs	r5, r5, r3
   1d840:	40ac      	lsls	r4, r5
   1d842:	4327      	orrs	r7, r4
   1d844:	1e7c      	subs	r4, r7, #1
   1d846:	41a7      	sbcs	r7, r4
   1d848:	2400      	movs	r4, #0
   1d84a:	4337      	orrs	r7, r6
   1d84c:	e6c9      	b.n	1d5e2 <__aeabi_dadd+0x356>
   1d84e:	2480      	movs	r4, #128	; 0x80
   1d850:	2500      	movs	r5, #0
   1d852:	0324      	lsls	r4, r4, #12
   1d854:	4e13      	ldr	r6, [pc, #76]	; (1d8a4 <__aeabi_dadd+0x618>)
   1d856:	2700      	movs	r7, #0
   1d858:	e5dc      	b.n	1d414 <__aeabi_dadd+0x188>
   1d85a:	4327      	orrs	r7, r4
   1d85c:	1e7c      	subs	r4, r7, #1
   1d85e:	41a7      	sbcs	r7, r4
   1d860:	2400      	movs	r4, #0
   1d862:	e779      	b.n	1d758 <__aeabi_dadd+0x4cc>
   1d864:	000c      	movs	r4, r1
   1d866:	0017      	movs	r7, r2
   1d868:	4e0e      	ldr	r6, [pc, #56]	; (1d8a4 <__aeabi_dadd+0x618>)
   1d86a:	e593      	b.n	1d394 <__aeabi_dadd+0x108>
   1d86c:	000c      	movs	r4, r1
   1d86e:	0017      	movs	r7, r2
   1d870:	e590      	b.n	1d394 <__aeabi_dadd+0x108>
   1d872:	4656      	mov	r6, sl
   1d874:	0023      	movs	r3, r4
   1d876:	3e20      	subs	r6, #32
   1d878:	40f3      	lsrs	r3, r6
   1d87a:	4699      	mov	r9, r3
   1d87c:	4653      	mov	r3, sl
   1d87e:	2b20      	cmp	r3, #32
   1d880:	d00e      	beq.n	1d8a0 <__aeabi_dadd+0x614>
   1d882:	2340      	movs	r3, #64	; 0x40
   1d884:	4656      	mov	r6, sl
   1d886:	1b9b      	subs	r3, r3, r6
   1d888:	409c      	lsls	r4, r3
   1d88a:	4327      	orrs	r7, r4
   1d88c:	1e7c      	subs	r4, r7, #1
   1d88e:	41a7      	sbcs	r7, r4
   1d890:	464b      	mov	r3, r9
   1d892:	2400      	movs	r4, #0
   1d894:	431f      	orrs	r7, r3
   1d896:	e75f      	b.n	1d758 <__aeabi_dadd+0x4cc>
   1d898:	2400      	movs	r4, #0
   1d89a:	e7d2      	b.n	1d842 <__aeabi_dadd+0x5b6>
   1d89c:	0017      	movs	r7, r2
   1d89e:	e5b2      	b.n	1d406 <__aeabi_dadd+0x17a>
   1d8a0:	2400      	movs	r4, #0
   1d8a2:	e7f2      	b.n	1d88a <__aeabi_dadd+0x5fe>
   1d8a4:	000007ff 	.word	0x000007ff
   1d8a8:	ff7fffff 	.word	0xff7fffff

0001d8ac <__aeabi_ddiv>:
   1d8ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d8ae:	4657      	mov	r7, sl
   1d8b0:	4645      	mov	r5, r8
   1d8b2:	46de      	mov	lr, fp
   1d8b4:	464e      	mov	r6, r9
   1d8b6:	b5e0      	push	{r5, r6, r7, lr}
   1d8b8:	004c      	lsls	r4, r1, #1
   1d8ba:	030e      	lsls	r6, r1, #12
   1d8bc:	b087      	sub	sp, #28
   1d8be:	4683      	mov	fp, r0
   1d8c0:	4692      	mov	sl, r2
   1d8c2:	001d      	movs	r5, r3
   1d8c4:	4680      	mov	r8, r0
   1d8c6:	0b36      	lsrs	r6, r6, #12
   1d8c8:	0d64      	lsrs	r4, r4, #21
   1d8ca:	0fcf      	lsrs	r7, r1, #31
   1d8cc:	2c00      	cmp	r4, #0
   1d8ce:	d04f      	beq.n	1d970 <__aeabi_ddiv+0xc4>
   1d8d0:	4b6f      	ldr	r3, [pc, #444]	; (1da90 <__aeabi_ddiv+0x1e4>)
   1d8d2:	429c      	cmp	r4, r3
   1d8d4:	d035      	beq.n	1d942 <__aeabi_ddiv+0x96>
   1d8d6:	2380      	movs	r3, #128	; 0x80
   1d8d8:	0f42      	lsrs	r2, r0, #29
   1d8da:	041b      	lsls	r3, r3, #16
   1d8dc:	00f6      	lsls	r6, r6, #3
   1d8de:	4313      	orrs	r3, r2
   1d8e0:	4333      	orrs	r3, r6
   1d8e2:	4699      	mov	r9, r3
   1d8e4:	00c3      	lsls	r3, r0, #3
   1d8e6:	4698      	mov	r8, r3
   1d8e8:	4b6a      	ldr	r3, [pc, #424]	; (1da94 <__aeabi_ddiv+0x1e8>)
   1d8ea:	2600      	movs	r6, #0
   1d8ec:	469c      	mov	ip, r3
   1d8ee:	2300      	movs	r3, #0
   1d8f0:	4464      	add	r4, ip
   1d8f2:	9303      	str	r3, [sp, #12]
   1d8f4:	032b      	lsls	r3, r5, #12
   1d8f6:	0b1b      	lsrs	r3, r3, #12
   1d8f8:	469b      	mov	fp, r3
   1d8fa:	006b      	lsls	r3, r5, #1
   1d8fc:	0fed      	lsrs	r5, r5, #31
   1d8fe:	4650      	mov	r0, sl
   1d900:	0d5b      	lsrs	r3, r3, #21
   1d902:	9501      	str	r5, [sp, #4]
   1d904:	d05e      	beq.n	1d9c4 <__aeabi_ddiv+0x118>
   1d906:	4a62      	ldr	r2, [pc, #392]	; (1da90 <__aeabi_ddiv+0x1e4>)
   1d908:	4293      	cmp	r3, r2
   1d90a:	d053      	beq.n	1d9b4 <__aeabi_ddiv+0x108>
   1d90c:	465a      	mov	r2, fp
   1d90e:	00d1      	lsls	r1, r2, #3
   1d910:	2280      	movs	r2, #128	; 0x80
   1d912:	0f40      	lsrs	r0, r0, #29
   1d914:	0412      	lsls	r2, r2, #16
   1d916:	4302      	orrs	r2, r0
   1d918:	430a      	orrs	r2, r1
   1d91a:	4693      	mov	fp, r2
   1d91c:	4652      	mov	r2, sl
   1d91e:	00d1      	lsls	r1, r2, #3
   1d920:	4a5c      	ldr	r2, [pc, #368]	; (1da94 <__aeabi_ddiv+0x1e8>)
   1d922:	4694      	mov	ip, r2
   1d924:	2200      	movs	r2, #0
   1d926:	4463      	add	r3, ip
   1d928:	0038      	movs	r0, r7
   1d92a:	4068      	eors	r0, r5
   1d92c:	4684      	mov	ip, r0
   1d92e:	9002      	str	r0, [sp, #8]
   1d930:	1ae4      	subs	r4, r4, r3
   1d932:	4316      	orrs	r6, r2
   1d934:	2e0f      	cmp	r6, #15
   1d936:	d900      	bls.n	1d93a <__aeabi_ddiv+0x8e>
   1d938:	e0b4      	b.n	1daa4 <__aeabi_ddiv+0x1f8>
   1d93a:	4b57      	ldr	r3, [pc, #348]	; (1da98 <__aeabi_ddiv+0x1ec>)
   1d93c:	00b6      	lsls	r6, r6, #2
   1d93e:	599b      	ldr	r3, [r3, r6]
   1d940:	469f      	mov	pc, r3
   1d942:	0003      	movs	r3, r0
   1d944:	4333      	orrs	r3, r6
   1d946:	4699      	mov	r9, r3
   1d948:	d16c      	bne.n	1da24 <__aeabi_ddiv+0x178>
   1d94a:	2300      	movs	r3, #0
   1d94c:	4698      	mov	r8, r3
   1d94e:	3302      	adds	r3, #2
   1d950:	2608      	movs	r6, #8
   1d952:	9303      	str	r3, [sp, #12]
   1d954:	e7ce      	b.n	1d8f4 <__aeabi_ddiv+0x48>
   1d956:	46cb      	mov	fp, r9
   1d958:	4641      	mov	r1, r8
   1d95a:	9a03      	ldr	r2, [sp, #12]
   1d95c:	9701      	str	r7, [sp, #4]
   1d95e:	2a02      	cmp	r2, #2
   1d960:	d165      	bne.n	1da2e <__aeabi_ddiv+0x182>
   1d962:	9b01      	ldr	r3, [sp, #4]
   1d964:	4c4a      	ldr	r4, [pc, #296]	; (1da90 <__aeabi_ddiv+0x1e4>)
   1d966:	469c      	mov	ip, r3
   1d968:	2300      	movs	r3, #0
   1d96a:	2200      	movs	r2, #0
   1d96c:	4698      	mov	r8, r3
   1d96e:	e06b      	b.n	1da48 <__aeabi_ddiv+0x19c>
   1d970:	0003      	movs	r3, r0
   1d972:	4333      	orrs	r3, r6
   1d974:	4699      	mov	r9, r3
   1d976:	d04e      	beq.n	1da16 <__aeabi_ddiv+0x16a>
   1d978:	2e00      	cmp	r6, #0
   1d97a:	d100      	bne.n	1d97e <__aeabi_ddiv+0xd2>
   1d97c:	e1bc      	b.n	1dcf8 <__aeabi_ddiv+0x44c>
   1d97e:	0030      	movs	r0, r6
   1d980:	f7fe fcf2 	bl	1c368 <__clzsi2>
   1d984:	0003      	movs	r3, r0
   1d986:	3b0b      	subs	r3, #11
   1d988:	2b1c      	cmp	r3, #28
   1d98a:	dd00      	ble.n	1d98e <__aeabi_ddiv+0xe2>
   1d98c:	e1ac      	b.n	1dce8 <__aeabi_ddiv+0x43c>
   1d98e:	221d      	movs	r2, #29
   1d990:	1ad3      	subs	r3, r2, r3
   1d992:	465a      	mov	r2, fp
   1d994:	0001      	movs	r1, r0
   1d996:	40da      	lsrs	r2, r3
   1d998:	3908      	subs	r1, #8
   1d99a:	408e      	lsls	r6, r1
   1d99c:	0013      	movs	r3, r2
   1d99e:	4333      	orrs	r3, r6
   1d9a0:	4699      	mov	r9, r3
   1d9a2:	465b      	mov	r3, fp
   1d9a4:	408b      	lsls	r3, r1
   1d9a6:	4698      	mov	r8, r3
   1d9a8:	2300      	movs	r3, #0
   1d9aa:	4c3c      	ldr	r4, [pc, #240]	; (1da9c <__aeabi_ddiv+0x1f0>)
   1d9ac:	2600      	movs	r6, #0
   1d9ae:	1a24      	subs	r4, r4, r0
   1d9b0:	9303      	str	r3, [sp, #12]
   1d9b2:	e79f      	b.n	1d8f4 <__aeabi_ddiv+0x48>
   1d9b4:	4651      	mov	r1, sl
   1d9b6:	465a      	mov	r2, fp
   1d9b8:	4311      	orrs	r1, r2
   1d9ba:	d129      	bne.n	1da10 <__aeabi_ddiv+0x164>
   1d9bc:	2200      	movs	r2, #0
   1d9be:	4693      	mov	fp, r2
   1d9c0:	3202      	adds	r2, #2
   1d9c2:	e7b1      	b.n	1d928 <__aeabi_ddiv+0x7c>
   1d9c4:	4659      	mov	r1, fp
   1d9c6:	4301      	orrs	r1, r0
   1d9c8:	d01e      	beq.n	1da08 <__aeabi_ddiv+0x15c>
   1d9ca:	465b      	mov	r3, fp
   1d9cc:	2b00      	cmp	r3, #0
   1d9ce:	d100      	bne.n	1d9d2 <__aeabi_ddiv+0x126>
   1d9d0:	e19e      	b.n	1dd10 <__aeabi_ddiv+0x464>
   1d9d2:	4658      	mov	r0, fp
   1d9d4:	f7fe fcc8 	bl	1c368 <__clzsi2>
   1d9d8:	0003      	movs	r3, r0
   1d9da:	3b0b      	subs	r3, #11
   1d9dc:	2b1c      	cmp	r3, #28
   1d9de:	dd00      	ble.n	1d9e2 <__aeabi_ddiv+0x136>
   1d9e0:	e18f      	b.n	1dd02 <__aeabi_ddiv+0x456>
   1d9e2:	0002      	movs	r2, r0
   1d9e4:	4659      	mov	r1, fp
   1d9e6:	3a08      	subs	r2, #8
   1d9e8:	4091      	lsls	r1, r2
   1d9ea:	468b      	mov	fp, r1
   1d9ec:	211d      	movs	r1, #29
   1d9ee:	1acb      	subs	r3, r1, r3
   1d9f0:	4651      	mov	r1, sl
   1d9f2:	40d9      	lsrs	r1, r3
   1d9f4:	000b      	movs	r3, r1
   1d9f6:	4659      	mov	r1, fp
   1d9f8:	430b      	orrs	r3, r1
   1d9fa:	4651      	mov	r1, sl
   1d9fc:	469b      	mov	fp, r3
   1d9fe:	4091      	lsls	r1, r2
   1da00:	4b26      	ldr	r3, [pc, #152]	; (1da9c <__aeabi_ddiv+0x1f0>)
   1da02:	2200      	movs	r2, #0
   1da04:	1a1b      	subs	r3, r3, r0
   1da06:	e78f      	b.n	1d928 <__aeabi_ddiv+0x7c>
   1da08:	2300      	movs	r3, #0
   1da0a:	2201      	movs	r2, #1
   1da0c:	469b      	mov	fp, r3
   1da0e:	e78b      	b.n	1d928 <__aeabi_ddiv+0x7c>
   1da10:	4651      	mov	r1, sl
   1da12:	2203      	movs	r2, #3
   1da14:	e788      	b.n	1d928 <__aeabi_ddiv+0x7c>
   1da16:	2300      	movs	r3, #0
   1da18:	4698      	mov	r8, r3
   1da1a:	3301      	adds	r3, #1
   1da1c:	2604      	movs	r6, #4
   1da1e:	2400      	movs	r4, #0
   1da20:	9303      	str	r3, [sp, #12]
   1da22:	e767      	b.n	1d8f4 <__aeabi_ddiv+0x48>
   1da24:	2303      	movs	r3, #3
   1da26:	46b1      	mov	r9, r6
   1da28:	9303      	str	r3, [sp, #12]
   1da2a:	260c      	movs	r6, #12
   1da2c:	e762      	b.n	1d8f4 <__aeabi_ddiv+0x48>
   1da2e:	2a03      	cmp	r2, #3
   1da30:	d100      	bne.n	1da34 <__aeabi_ddiv+0x188>
   1da32:	e25c      	b.n	1deee <__aeabi_ddiv+0x642>
   1da34:	9b01      	ldr	r3, [sp, #4]
   1da36:	2a01      	cmp	r2, #1
   1da38:	d000      	beq.n	1da3c <__aeabi_ddiv+0x190>
   1da3a:	e1e4      	b.n	1de06 <__aeabi_ddiv+0x55a>
   1da3c:	4013      	ands	r3, r2
   1da3e:	469c      	mov	ip, r3
   1da40:	2300      	movs	r3, #0
   1da42:	2400      	movs	r4, #0
   1da44:	2200      	movs	r2, #0
   1da46:	4698      	mov	r8, r3
   1da48:	2100      	movs	r1, #0
   1da4a:	0312      	lsls	r2, r2, #12
   1da4c:	0b13      	lsrs	r3, r2, #12
   1da4e:	0d0a      	lsrs	r2, r1, #20
   1da50:	0512      	lsls	r2, r2, #20
   1da52:	431a      	orrs	r2, r3
   1da54:	0523      	lsls	r3, r4, #20
   1da56:	4c12      	ldr	r4, [pc, #72]	; (1daa0 <__aeabi_ddiv+0x1f4>)
   1da58:	4640      	mov	r0, r8
   1da5a:	4022      	ands	r2, r4
   1da5c:	4313      	orrs	r3, r2
   1da5e:	4662      	mov	r2, ip
   1da60:	005b      	lsls	r3, r3, #1
   1da62:	07d2      	lsls	r2, r2, #31
   1da64:	085b      	lsrs	r3, r3, #1
   1da66:	4313      	orrs	r3, r2
   1da68:	0019      	movs	r1, r3
   1da6a:	b007      	add	sp, #28
   1da6c:	bc3c      	pop	{r2, r3, r4, r5}
   1da6e:	4690      	mov	r8, r2
   1da70:	4699      	mov	r9, r3
   1da72:	46a2      	mov	sl, r4
   1da74:	46ab      	mov	fp, r5
   1da76:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1da78:	2300      	movs	r3, #0
   1da7a:	2280      	movs	r2, #128	; 0x80
   1da7c:	469c      	mov	ip, r3
   1da7e:	0312      	lsls	r2, r2, #12
   1da80:	4698      	mov	r8, r3
   1da82:	4c03      	ldr	r4, [pc, #12]	; (1da90 <__aeabi_ddiv+0x1e4>)
   1da84:	e7e0      	b.n	1da48 <__aeabi_ddiv+0x19c>
   1da86:	2300      	movs	r3, #0
   1da88:	4c01      	ldr	r4, [pc, #4]	; (1da90 <__aeabi_ddiv+0x1e4>)
   1da8a:	2200      	movs	r2, #0
   1da8c:	4698      	mov	r8, r3
   1da8e:	e7db      	b.n	1da48 <__aeabi_ddiv+0x19c>
   1da90:	000007ff 	.word	0x000007ff
   1da94:	fffffc01 	.word	0xfffffc01
   1da98:	00025150 	.word	0x00025150
   1da9c:	fffffc0d 	.word	0xfffffc0d
   1daa0:	800fffff 	.word	0x800fffff
   1daa4:	45d9      	cmp	r9, fp
   1daa6:	d900      	bls.n	1daaa <__aeabi_ddiv+0x1fe>
   1daa8:	e139      	b.n	1dd1e <__aeabi_ddiv+0x472>
   1daaa:	d100      	bne.n	1daae <__aeabi_ddiv+0x202>
   1daac:	e134      	b.n	1dd18 <__aeabi_ddiv+0x46c>
   1daae:	2300      	movs	r3, #0
   1dab0:	4646      	mov	r6, r8
   1dab2:	464d      	mov	r5, r9
   1dab4:	469a      	mov	sl, r3
   1dab6:	3c01      	subs	r4, #1
   1dab8:	465b      	mov	r3, fp
   1daba:	0e0a      	lsrs	r2, r1, #24
   1dabc:	021b      	lsls	r3, r3, #8
   1dabe:	431a      	orrs	r2, r3
   1dac0:	020b      	lsls	r3, r1, #8
   1dac2:	0c17      	lsrs	r7, r2, #16
   1dac4:	9303      	str	r3, [sp, #12]
   1dac6:	0413      	lsls	r3, r2, #16
   1dac8:	0c1b      	lsrs	r3, r3, #16
   1daca:	0039      	movs	r1, r7
   1dacc:	0028      	movs	r0, r5
   1dace:	4690      	mov	r8, r2
   1dad0:	9301      	str	r3, [sp, #4]
   1dad2:	f7fe fa5b 	bl	1bf8c <__udivsi3>
   1dad6:	0002      	movs	r2, r0
   1dad8:	9b01      	ldr	r3, [sp, #4]
   1dada:	4683      	mov	fp, r0
   1dadc:	435a      	muls	r2, r3
   1dade:	0028      	movs	r0, r5
   1dae0:	0039      	movs	r1, r7
   1dae2:	4691      	mov	r9, r2
   1dae4:	f7fe fad8 	bl	1c098 <__aeabi_uidivmod>
   1dae8:	0c35      	lsrs	r5, r6, #16
   1daea:	0409      	lsls	r1, r1, #16
   1daec:	430d      	orrs	r5, r1
   1daee:	45a9      	cmp	r9, r5
   1daf0:	d90d      	bls.n	1db0e <__aeabi_ddiv+0x262>
   1daf2:	465b      	mov	r3, fp
   1daf4:	4445      	add	r5, r8
   1daf6:	3b01      	subs	r3, #1
   1daf8:	45a8      	cmp	r8, r5
   1dafa:	d900      	bls.n	1dafe <__aeabi_ddiv+0x252>
   1dafc:	e13a      	b.n	1dd74 <__aeabi_ddiv+0x4c8>
   1dafe:	45a9      	cmp	r9, r5
   1db00:	d800      	bhi.n	1db04 <__aeabi_ddiv+0x258>
   1db02:	e137      	b.n	1dd74 <__aeabi_ddiv+0x4c8>
   1db04:	2302      	movs	r3, #2
   1db06:	425b      	negs	r3, r3
   1db08:	469c      	mov	ip, r3
   1db0a:	4445      	add	r5, r8
   1db0c:	44e3      	add	fp, ip
   1db0e:	464b      	mov	r3, r9
   1db10:	1aeb      	subs	r3, r5, r3
   1db12:	0039      	movs	r1, r7
   1db14:	0018      	movs	r0, r3
   1db16:	9304      	str	r3, [sp, #16]
   1db18:	f7fe fa38 	bl	1bf8c <__udivsi3>
   1db1c:	9b01      	ldr	r3, [sp, #4]
   1db1e:	0005      	movs	r5, r0
   1db20:	4343      	muls	r3, r0
   1db22:	0039      	movs	r1, r7
   1db24:	9804      	ldr	r0, [sp, #16]
   1db26:	4699      	mov	r9, r3
   1db28:	f7fe fab6 	bl	1c098 <__aeabi_uidivmod>
   1db2c:	0433      	lsls	r3, r6, #16
   1db2e:	0409      	lsls	r1, r1, #16
   1db30:	0c1b      	lsrs	r3, r3, #16
   1db32:	430b      	orrs	r3, r1
   1db34:	4599      	cmp	r9, r3
   1db36:	d909      	bls.n	1db4c <__aeabi_ddiv+0x2a0>
   1db38:	4443      	add	r3, r8
   1db3a:	1e6a      	subs	r2, r5, #1
   1db3c:	4598      	cmp	r8, r3
   1db3e:	d900      	bls.n	1db42 <__aeabi_ddiv+0x296>
   1db40:	e11a      	b.n	1dd78 <__aeabi_ddiv+0x4cc>
   1db42:	4599      	cmp	r9, r3
   1db44:	d800      	bhi.n	1db48 <__aeabi_ddiv+0x29c>
   1db46:	e117      	b.n	1dd78 <__aeabi_ddiv+0x4cc>
   1db48:	3d02      	subs	r5, #2
   1db4a:	4443      	add	r3, r8
   1db4c:	464a      	mov	r2, r9
   1db4e:	1a9b      	subs	r3, r3, r2
   1db50:	465a      	mov	r2, fp
   1db52:	0412      	lsls	r2, r2, #16
   1db54:	432a      	orrs	r2, r5
   1db56:	9903      	ldr	r1, [sp, #12]
   1db58:	4693      	mov	fp, r2
   1db5a:	0c10      	lsrs	r0, r2, #16
   1db5c:	0c0a      	lsrs	r2, r1, #16
   1db5e:	4691      	mov	r9, r2
   1db60:	0409      	lsls	r1, r1, #16
   1db62:	465a      	mov	r2, fp
   1db64:	0c09      	lsrs	r1, r1, #16
   1db66:	464e      	mov	r6, r9
   1db68:	000d      	movs	r5, r1
   1db6a:	0412      	lsls	r2, r2, #16
   1db6c:	0c12      	lsrs	r2, r2, #16
   1db6e:	4345      	muls	r5, r0
   1db70:	9105      	str	r1, [sp, #20]
   1db72:	4351      	muls	r1, r2
   1db74:	4372      	muls	r2, r6
   1db76:	4370      	muls	r0, r6
   1db78:	1952      	adds	r2, r2, r5
   1db7a:	0c0e      	lsrs	r6, r1, #16
   1db7c:	18b2      	adds	r2, r6, r2
   1db7e:	4295      	cmp	r5, r2
   1db80:	d903      	bls.n	1db8a <__aeabi_ddiv+0x2de>
   1db82:	2580      	movs	r5, #128	; 0x80
   1db84:	026d      	lsls	r5, r5, #9
   1db86:	46ac      	mov	ip, r5
   1db88:	4460      	add	r0, ip
   1db8a:	0c15      	lsrs	r5, r2, #16
   1db8c:	0409      	lsls	r1, r1, #16
   1db8e:	0412      	lsls	r2, r2, #16
   1db90:	0c09      	lsrs	r1, r1, #16
   1db92:	1828      	adds	r0, r5, r0
   1db94:	1852      	adds	r2, r2, r1
   1db96:	4283      	cmp	r3, r0
   1db98:	d200      	bcs.n	1db9c <__aeabi_ddiv+0x2f0>
   1db9a:	e0ce      	b.n	1dd3a <__aeabi_ddiv+0x48e>
   1db9c:	d100      	bne.n	1dba0 <__aeabi_ddiv+0x2f4>
   1db9e:	e0c8      	b.n	1dd32 <__aeabi_ddiv+0x486>
   1dba0:	1a1d      	subs	r5, r3, r0
   1dba2:	4653      	mov	r3, sl
   1dba4:	1a9e      	subs	r6, r3, r2
   1dba6:	45b2      	cmp	sl, r6
   1dba8:	4192      	sbcs	r2, r2
   1dbaa:	4252      	negs	r2, r2
   1dbac:	1aab      	subs	r3, r5, r2
   1dbae:	469a      	mov	sl, r3
   1dbb0:	4598      	cmp	r8, r3
   1dbb2:	d100      	bne.n	1dbb6 <__aeabi_ddiv+0x30a>
   1dbb4:	e117      	b.n	1dde6 <__aeabi_ddiv+0x53a>
   1dbb6:	0039      	movs	r1, r7
   1dbb8:	0018      	movs	r0, r3
   1dbba:	f7fe f9e7 	bl	1bf8c <__udivsi3>
   1dbbe:	9b01      	ldr	r3, [sp, #4]
   1dbc0:	0005      	movs	r5, r0
   1dbc2:	4343      	muls	r3, r0
   1dbc4:	0039      	movs	r1, r7
   1dbc6:	4650      	mov	r0, sl
   1dbc8:	9304      	str	r3, [sp, #16]
   1dbca:	f7fe fa65 	bl	1c098 <__aeabi_uidivmod>
   1dbce:	9804      	ldr	r0, [sp, #16]
   1dbd0:	040b      	lsls	r3, r1, #16
   1dbd2:	0c31      	lsrs	r1, r6, #16
   1dbd4:	4319      	orrs	r1, r3
   1dbd6:	4288      	cmp	r0, r1
   1dbd8:	d909      	bls.n	1dbee <__aeabi_ddiv+0x342>
   1dbda:	4441      	add	r1, r8
   1dbdc:	1e6b      	subs	r3, r5, #1
   1dbde:	4588      	cmp	r8, r1
   1dbe0:	d900      	bls.n	1dbe4 <__aeabi_ddiv+0x338>
   1dbe2:	e107      	b.n	1ddf4 <__aeabi_ddiv+0x548>
   1dbe4:	4288      	cmp	r0, r1
   1dbe6:	d800      	bhi.n	1dbea <__aeabi_ddiv+0x33e>
   1dbe8:	e104      	b.n	1ddf4 <__aeabi_ddiv+0x548>
   1dbea:	3d02      	subs	r5, #2
   1dbec:	4441      	add	r1, r8
   1dbee:	9b04      	ldr	r3, [sp, #16]
   1dbf0:	1acb      	subs	r3, r1, r3
   1dbf2:	0018      	movs	r0, r3
   1dbf4:	0039      	movs	r1, r7
   1dbf6:	9304      	str	r3, [sp, #16]
   1dbf8:	f7fe f9c8 	bl	1bf8c <__udivsi3>
   1dbfc:	9b01      	ldr	r3, [sp, #4]
   1dbfe:	4682      	mov	sl, r0
   1dc00:	4343      	muls	r3, r0
   1dc02:	0039      	movs	r1, r7
   1dc04:	9804      	ldr	r0, [sp, #16]
   1dc06:	9301      	str	r3, [sp, #4]
   1dc08:	f7fe fa46 	bl	1c098 <__aeabi_uidivmod>
   1dc0c:	9801      	ldr	r0, [sp, #4]
   1dc0e:	040b      	lsls	r3, r1, #16
   1dc10:	0431      	lsls	r1, r6, #16
   1dc12:	0c09      	lsrs	r1, r1, #16
   1dc14:	4319      	orrs	r1, r3
   1dc16:	4288      	cmp	r0, r1
   1dc18:	d90d      	bls.n	1dc36 <__aeabi_ddiv+0x38a>
   1dc1a:	4653      	mov	r3, sl
   1dc1c:	4441      	add	r1, r8
   1dc1e:	3b01      	subs	r3, #1
   1dc20:	4588      	cmp	r8, r1
   1dc22:	d900      	bls.n	1dc26 <__aeabi_ddiv+0x37a>
   1dc24:	e0e8      	b.n	1ddf8 <__aeabi_ddiv+0x54c>
   1dc26:	4288      	cmp	r0, r1
   1dc28:	d800      	bhi.n	1dc2c <__aeabi_ddiv+0x380>
   1dc2a:	e0e5      	b.n	1ddf8 <__aeabi_ddiv+0x54c>
   1dc2c:	2302      	movs	r3, #2
   1dc2e:	425b      	negs	r3, r3
   1dc30:	469c      	mov	ip, r3
   1dc32:	4441      	add	r1, r8
   1dc34:	44e2      	add	sl, ip
   1dc36:	9b01      	ldr	r3, [sp, #4]
   1dc38:	042d      	lsls	r5, r5, #16
   1dc3a:	1ace      	subs	r6, r1, r3
   1dc3c:	4651      	mov	r1, sl
   1dc3e:	4329      	orrs	r1, r5
   1dc40:	9d05      	ldr	r5, [sp, #20]
   1dc42:	464f      	mov	r7, r9
   1dc44:	002a      	movs	r2, r5
   1dc46:	040b      	lsls	r3, r1, #16
   1dc48:	0c08      	lsrs	r0, r1, #16
   1dc4a:	0c1b      	lsrs	r3, r3, #16
   1dc4c:	435a      	muls	r2, r3
   1dc4e:	4345      	muls	r5, r0
   1dc50:	437b      	muls	r3, r7
   1dc52:	4378      	muls	r0, r7
   1dc54:	195b      	adds	r3, r3, r5
   1dc56:	0c17      	lsrs	r7, r2, #16
   1dc58:	18fb      	adds	r3, r7, r3
   1dc5a:	429d      	cmp	r5, r3
   1dc5c:	d903      	bls.n	1dc66 <__aeabi_ddiv+0x3ba>
   1dc5e:	2580      	movs	r5, #128	; 0x80
   1dc60:	026d      	lsls	r5, r5, #9
   1dc62:	46ac      	mov	ip, r5
   1dc64:	4460      	add	r0, ip
   1dc66:	0c1d      	lsrs	r5, r3, #16
   1dc68:	0412      	lsls	r2, r2, #16
   1dc6a:	041b      	lsls	r3, r3, #16
   1dc6c:	0c12      	lsrs	r2, r2, #16
   1dc6e:	1828      	adds	r0, r5, r0
   1dc70:	189b      	adds	r3, r3, r2
   1dc72:	4286      	cmp	r6, r0
   1dc74:	d200      	bcs.n	1dc78 <__aeabi_ddiv+0x3cc>
   1dc76:	e093      	b.n	1dda0 <__aeabi_ddiv+0x4f4>
   1dc78:	d100      	bne.n	1dc7c <__aeabi_ddiv+0x3d0>
   1dc7a:	e08e      	b.n	1dd9a <__aeabi_ddiv+0x4ee>
   1dc7c:	2301      	movs	r3, #1
   1dc7e:	4319      	orrs	r1, r3
   1dc80:	4ba0      	ldr	r3, [pc, #640]	; (1df04 <__aeabi_ddiv+0x658>)
   1dc82:	18e3      	adds	r3, r4, r3
   1dc84:	2b00      	cmp	r3, #0
   1dc86:	dc00      	bgt.n	1dc8a <__aeabi_ddiv+0x3de>
   1dc88:	e099      	b.n	1ddbe <__aeabi_ddiv+0x512>
   1dc8a:	074a      	lsls	r2, r1, #29
   1dc8c:	d000      	beq.n	1dc90 <__aeabi_ddiv+0x3e4>
   1dc8e:	e09e      	b.n	1ddce <__aeabi_ddiv+0x522>
   1dc90:	465a      	mov	r2, fp
   1dc92:	01d2      	lsls	r2, r2, #7
   1dc94:	d506      	bpl.n	1dca4 <__aeabi_ddiv+0x3f8>
   1dc96:	465a      	mov	r2, fp
   1dc98:	4b9b      	ldr	r3, [pc, #620]	; (1df08 <__aeabi_ddiv+0x65c>)
   1dc9a:	401a      	ands	r2, r3
   1dc9c:	2380      	movs	r3, #128	; 0x80
   1dc9e:	4693      	mov	fp, r2
   1dca0:	00db      	lsls	r3, r3, #3
   1dca2:	18e3      	adds	r3, r4, r3
   1dca4:	4a99      	ldr	r2, [pc, #612]	; (1df0c <__aeabi_ddiv+0x660>)
   1dca6:	4293      	cmp	r3, r2
   1dca8:	dd68      	ble.n	1dd7c <__aeabi_ddiv+0x4d0>
   1dcaa:	2301      	movs	r3, #1
   1dcac:	9a02      	ldr	r2, [sp, #8]
   1dcae:	4c98      	ldr	r4, [pc, #608]	; (1df10 <__aeabi_ddiv+0x664>)
   1dcb0:	401a      	ands	r2, r3
   1dcb2:	2300      	movs	r3, #0
   1dcb4:	4694      	mov	ip, r2
   1dcb6:	4698      	mov	r8, r3
   1dcb8:	2200      	movs	r2, #0
   1dcba:	e6c5      	b.n	1da48 <__aeabi_ddiv+0x19c>
   1dcbc:	2280      	movs	r2, #128	; 0x80
   1dcbe:	464b      	mov	r3, r9
   1dcc0:	0312      	lsls	r2, r2, #12
   1dcc2:	4213      	tst	r3, r2
   1dcc4:	d00a      	beq.n	1dcdc <__aeabi_ddiv+0x430>
   1dcc6:	465b      	mov	r3, fp
   1dcc8:	4213      	tst	r3, r2
   1dcca:	d106      	bne.n	1dcda <__aeabi_ddiv+0x42e>
   1dccc:	431a      	orrs	r2, r3
   1dcce:	0312      	lsls	r2, r2, #12
   1dcd0:	0b12      	lsrs	r2, r2, #12
   1dcd2:	46ac      	mov	ip, r5
   1dcd4:	4688      	mov	r8, r1
   1dcd6:	4c8e      	ldr	r4, [pc, #568]	; (1df10 <__aeabi_ddiv+0x664>)
   1dcd8:	e6b6      	b.n	1da48 <__aeabi_ddiv+0x19c>
   1dcda:	464b      	mov	r3, r9
   1dcdc:	431a      	orrs	r2, r3
   1dcde:	0312      	lsls	r2, r2, #12
   1dce0:	0b12      	lsrs	r2, r2, #12
   1dce2:	46bc      	mov	ip, r7
   1dce4:	4c8a      	ldr	r4, [pc, #552]	; (1df10 <__aeabi_ddiv+0x664>)
   1dce6:	e6af      	b.n	1da48 <__aeabi_ddiv+0x19c>
   1dce8:	0003      	movs	r3, r0
   1dcea:	465a      	mov	r2, fp
   1dcec:	3b28      	subs	r3, #40	; 0x28
   1dcee:	409a      	lsls	r2, r3
   1dcf0:	2300      	movs	r3, #0
   1dcf2:	4691      	mov	r9, r2
   1dcf4:	4698      	mov	r8, r3
   1dcf6:	e657      	b.n	1d9a8 <__aeabi_ddiv+0xfc>
   1dcf8:	4658      	mov	r0, fp
   1dcfa:	f7fe fb35 	bl	1c368 <__clzsi2>
   1dcfe:	3020      	adds	r0, #32
   1dd00:	e640      	b.n	1d984 <__aeabi_ddiv+0xd8>
   1dd02:	0003      	movs	r3, r0
   1dd04:	4652      	mov	r2, sl
   1dd06:	3b28      	subs	r3, #40	; 0x28
   1dd08:	409a      	lsls	r2, r3
   1dd0a:	2100      	movs	r1, #0
   1dd0c:	4693      	mov	fp, r2
   1dd0e:	e677      	b.n	1da00 <__aeabi_ddiv+0x154>
   1dd10:	f7fe fb2a 	bl	1c368 <__clzsi2>
   1dd14:	3020      	adds	r0, #32
   1dd16:	e65f      	b.n	1d9d8 <__aeabi_ddiv+0x12c>
   1dd18:	4588      	cmp	r8, r1
   1dd1a:	d200      	bcs.n	1dd1e <__aeabi_ddiv+0x472>
   1dd1c:	e6c7      	b.n	1daae <__aeabi_ddiv+0x202>
   1dd1e:	464b      	mov	r3, r9
   1dd20:	07de      	lsls	r6, r3, #31
   1dd22:	085d      	lsrs	r5, r3, #1
   1dd24:	4643      	mov	r3, r8
   1dd26:	085b      	lsrs	r3, r3, #1
   1dd28:	431e      	orrs	r6, r3
   1dd2a:	4643      	mov	r3, r8
   1dd2c:	07db      	lsls	r3, r3, #31
   1dd2e:	469a      	mov	sl, r3
   1dd30:	e6c2      	b.n	1dab8 <__aeabi_ddiv+0x20c>
   1dd32:	2500      	movs	r5, #0
   1dd34:	4592      	cmp	sl, r2
   1dd36:	d300      	bcc.n	1dd3a <__aeabi_ddiv+0x48e>
   1dd38:	e733      	b.n	1dba2 <__aeabi_ddiv+0x2f6>
   1dd3a:	9e03      	ldr	r6, [sp, #12]
   1dd3c:	4659      	mov	r1, fp
   1dd3e:	46b4      	mov	ip, r6
   1dd40:	44e2      	add	sl, ip
   1dd42:	45b2      	cmp	sl, r6
   1dd44:	41ad      	sbcs	r5, r5
   1dd46:	426d      	negs	r5, r5
   1dd48:	4445      	add	r5, r8
   1dd4a:	18eb      	adds	r3, r5, r3
   1dd4c:	3901      	subs	r1, #1
   1dd4e:	4598      	cmp	r8, r3
   1dd50:	d207      	bcs.n	1dd62 <__aeabi_ddiv+0x4b6>
   1dd52:	4298      	cmp	r0, r3
   1dd54:	d900      	bls.n	1dd58 <__aeabi_ddiv+0x4ac>
   1dd56:	e07f      	b.n	1de58 <__aeabi_ddiv+0x5ac>
   1dd58:	d100      	bne.n	1dd5c <__aeabi_ddiv+0x4b0>
   1dd5a:	e0bc      	b.n	1ded6 <__aeabi_ddiv+0x62a>
   1dd5c:	1a1d      	subs	r5, r3, r0
   1dd5e:	468b      	mov	fp, r1
   1dd60:	e71f      	b.n	1dba2 <__aeabi_ddiv+0x2f6>
   1dd62:	4598      	cmp	r8, r3
   1dd64:	d1fa      	bne.n	1dd5c <__aeabi_ddiv+0x4b0>
   1dd66:	9d03      	ldr	r5, [sp, #12]
   1dd68:	4555      	cmp	r5, sl
   1dd6a:	d9f2      	bls.n	1dd52 <__aeabi_ddiv+0x4a6>
   1dd6c:	4643      	mov	r3, r8
   1dd6e:	468b      	mov	fp, r1
   1dd70:	1a1d      	subs	r5, r3, r0
   1dd72:	e716      	b.n	1dba2 <__aeabi_ddiv+0x2f6>
   1dd74:	469b      	mov	fp, r3
   1dd76:	e6ca      	b.n	1db0e <__aeabi_ddiv+0x262>
   1dd78:	0015      	movs	r5, r2
   1dd7a:	e6e7      	b.n	1db4c <__aeabi_ddiv+0x2a0>
   1dd7c:	465a      	mov	r2, fp
   1dd7e:	08c9      	lsrs	r1, r1, #3
   1dd80:	0752      	lsls	r2, r2, #29
   1dd82:	430a      	orrs	r2, r1
   1dd84:	055b      	lsls	r3, r3, #21
   1dd86:	4690      	mov	r8, r2
   1dd88:	0d5c      	lsrs	r4, r3, #21
   1dd8a:	465a      	mov	r2, fp
   1dd8c:	2301      	movs	r3, #1
   1dd8e:	9902      	ldr	r1, [sp, #8]
   1dd90:	0252      	lsls	r2, r2, #9
   1dd92:	4019      	ands	r1, r3
   1dd94:	0b12      	lsrs	r2, r2, #12
   1dd96:	468c      	mov	ip, r1
   1dd98:	e656      	b.n	1da48 <__aeabi_ddiv+0x19c>
   1dd9a:	2b00      	cmp	r3, #0
   1dd9c:	d100      	bne.n	1dda0 <__aeabi_ddiv+0x4f4>
   1dd9e:	e76f      	b.n	1dc80 <__aeabi_ddiv+0x3d4>
   1dda0:	4446      	add	r6, r8
   1dda2:	1e4a      	subs	r2, r1, #1
   1dda4:	45b0      	cmp	r8, r6
   1dda6:	d929      	bls.n	1ddfc <__aeabi_ddiv+0x550>
   1dda8:	0011      	movs	r1, r2
   1ddaa:	4286      	cmp	r6, r0
   1ddac:	d000      	beq.n	1ddb0 <__aeabi_ddiv+0x504>
   1ddae:	e765      	b.n	1dc7c <__aeabi_ddiv+0x3d0>
   1ddb0:	9a03      	ldr	r2, [sp, #12]
   1ddb2:	4293      	cmp	r3, r2
   1ddb4:	d000      	beq.n	1ddb8 <__aeabi_ddiv+0x50c>
   1ddb6:	e761      	b.n	1dc7c <__aeabi_ddiv+0x3d0>
   1ddb8:	e762      	b.n	1dc80 <__aeabi_ddiv+0x3d4>
   1ddba:	2101      	movs	r1, #1
   1ddbc:	4249      	negs	r1, r1
   1ddbe:	2001      	movs	r0, #1
   1ddc0:	1ac2      	subs	r2, r0, r3
   1ddc2:	2a38      	cmp	r2, #56	; 0x38
   1ddc4:	dd21      	ble.n	1de0a <__aeabi_ddiv+0x55e>
   1ddc6:	9b02      	ldr	r3, [sp, #8]
   1ddc8:	4003      	ands	r3, r0
   1ddca:	469c      	mov	ip, r3
   1ddcc:	e638      	b.n	1da40 <__aeabi_ddiv+0x194>
   1ddce:	220f      	movs	r2, #15
   1ddd0:	400a      	ands	r2, r1
   1ddd2:	2a04      	cmp	r2, #4
   1ddd4:	d100      	bne.n	1ddd8 <__aeabi_ddiv+0x52c>
   1ddd6:	e75b      	b.n	1dc90 <__aeabi_ddiv+0x3e4>
   1ddd8:	000a      	movs	r2, r1
   1ddda:	1d11      	adds	r1, r2, #4
   1dddc:	4291      	cmp	r1, r2
   1ddde:	4192      	sbcs	r2, r2
   1dde0:	4252      	negs	r2, r2
   1dde2:	4493      	add	fp, r2
   1dde4:	e754      	b.n	1dc90 <__aeabi_ddiv+0x3e4>
   1dde6:	4b47      	ldr	r3, [pc, #284]	; (1df04 <__aeabi_ddiv+0x658>)
   1dde8:	18e3      	adds	r3, r4, r3
   1ddea:	2b00      	cmp	r3, #0
   1ddec:	dde5      	ble.n	1ddba <__aeabi_ddiv+0x50e>
   1ddee:	2201      	movs	r2, #1
   1ddf0:	4252      	negs	r2, r2
   1ddf2:	e7f2      	b.n	1ddda <__aeabi_ddiv+0x52e>
   1ddf4:	001d      	movs	r5, r3
   1ddf6:	e6fa      	b.n	1dbee <__aeabi_ddiv+0x342>
   1ddf8:	469a      	mov	sl, r3
   1ddfa:	e71c      	b.n	1dc36 <__aeabi_ddiv+0x38a>
   1ddfc:	42b0      	cmp	r0, r6
   1ddfe:	d839      	bhi.n	1de74 <__aeabi_ddiv+0x5c8>
   1de00:	d06e      	beq.n	1dee0 <__aeabi_ddiv+0x634>
   1de02:	0011      	movs	r1, r2
   1de04:	e73a      	b.n	1dc7c <__aeabi_ddiv+0x3d0>
   1de06:	9302      	str	r3, [sp, #8]
   1de08:	e73a      	b.n	1dc80 <__aeabi_ddiv+0x3d4>
   1de0a:	2a1f      	cmp	r2, #31
   1de0c:	dc3c      	bgt.n	1de88 <__aeabi_ddiv+0x5dc>
   1de0e:	2320      	movs	r3, #32
   1de10:	1a9b      	subs	r3, r3, r2
   1de12:	000c      	movs	r4, r1
   1de14:	4658      	mov	r0, fp
   1de16:	4099      	lsls	r1, r3
   1de18:	4098      	lsls	r0, r3
   1de1a:	1e4b      	subs	r3, r1, #1
   1de1c:	4199      	sbcs	r1, r3
   1de1e:	465b      	mov	r3, fp
   1de20:	40d4      	lsrs	r4, r2
   1de22:	40d3      	lsrs	r3, r2
   1de24:	4320      	orrs	r0, r4
   1de26:	4308      	orrs	r0, r1
   1de28:	001a      	movs	r2, r3
   1de2a:	0743      	lsls	r3, r0, #29
   1de2c:	d009      	beq.n	1de42 <__aeabi_ddiv+0x596>
   1de2e:	230f      	movs	r3, #15
   1de30:	4003      	ands	r3, r0
   1de32:	2b04      	cmp	r3, #4
   1de34:	d005      	beq.n	1de42 <__aeabi_ddiv+0x596>
   1de36:	0001      	movs	r1, r0
   1de38:	1d08      	adds	r0, r1, #4
   1de3a:	4288      	cmp	r0, r1
   1de3c:	419b      	sbcs	r3, r3
   1de3e:	425b      	negs	r3, r3
   1de40:	18d2      	adds	r2, r2, r3
   1de42:	0213      	lsls	r3, r2, #8
   1de44:	d53a      	bpl.n	1debc <__aeabi_ddiv+0x610>
   1de46:	2301      	movs	r3, #1
   1de48:	9a02      	ldr	r2, [sp, #8]
   1de4a:	2401      	movs	r4, #1
   1de4c:	401a      	ands	r2, r3
   1de4e:	2300      	movs	r3, #0
   1de50:	4694      	mov	ip, r2
   1de52:	4698      	mov	r8, r3
   1de54:	2200      	movs	r2, #0
   1de56:	e5f7      	b.n	1da48 <__aeabi_ddiv+0x19c>
   1de58:	2102      	movs	r1, #2
   1de5a:	4249      	negs	r1, r1
   1de5c:	468c      	mov	ip, r1
   1de5e:	9d03      	ldr	r5, [sp, #12]
   1de60:	44e3      	add	fp, ip
   1de62:	46ac      	mov	ip, r5
   1de64:	44e2      	add	sl, ip
   1de66:	45aa      	cmp	sl, r5
   1de68:	41ad      	sbcs	r5, r5
   1de6a:	426d      	negs	r5, r5
   1de6c:	4445      	add	r5, r8
   1de6e:	18ed      	adds	r5, r5, r3
   1de70:	1a2d      	subs	r5, r5, r0
   1de72:	e696      	b.n	1dba2 <__aeabi_ddiv+0x2f6>
   1de74:	1e8a      	subs	r2, r1, #2
   1de76:	9903      	ldr	r1, [sp, #12]
   1de78:	004d      	lsls	r5, r1, #1
   1de7a:	428d      	cmp	r5, r1
   1de7c:	4189      	sbcs	r1, r1
   1de7e:	4249      	negs	r1, r1
   1de80:	4441      	add	r1, r8
   1de82:	1876      	adds	r6, r6, r1
   1de84:	9503      	str	r5, [sp, #12]
   1de86:	e78f      	b.n	1dda8 <__aeabi_ddiv+0x4fc>
   1de88:	201f      	movs	r0, #31
   1de8a:	4240      	negs	r0, r0
   1de8c:	1ac3      	subs	r3, r0, r3
   1de8e:	4658      	mov	r0, fp
   1de90:	40d8      	lsrs	r0, r3
   1de92:	0003      	movs	r3, r0
   1de94:	2a20      	cmp	r2, #32
   1de96:	d028      	beq.n	1deea <__aeabi_ddiv+0x63e>
   1de98:	2040      	movs	r0, #64	; 0x40
   1de9a:	465d      	mov	r5, fp
   1de9c:	1a82      	subs	r2, r0, r2
   1de9e:	4095      	lsls	r5, r2
   1dea0:	4329      	orrs	r1, r5
   1dea2:	1e4a      	subs	r2, r1, #1
   1dea4:	4191      	sbcs	r1, r2
   1dea6:	4319      	orrs	r1, r3
   1dea8:	2307      	movs	r3, #7
   1deaa:	2200      	movs	r2, #0
   1deac:	400b      	ands	r3, r1
   1deae:	d009      	beq.n	1dec4 <__aeabi_ddiv+0x618>
   1deb0:	230f      	movs	r3, #15
   1deb2:	2200      	movs	r2, #0
   1deb4:	400b      	ands	r3, r1
   1deb6:	0008      	movs	r0, r1
   1deb8:	2b04      	cmp	r3, #4
   1deba:	d1bd      	bne.n	1de38 <__aeabi_ddiv+0x58c>
   1debc:	0001      	movs	r1, r0
   1debe:	0753      	lsls	r3, r2, #29
   1dec0:	0252      	lsls	r2, r2, #9
   1dec2:	0b12      	lsrs	r2, r2, #12
   1dec4:	08c9      	lsrs	r1, r1, #3
   1dec6:	4319      	orrs	r1, r3
   1dec8:	2301      	movs	r3, #1
   1deca:	4688      	mov	r8, r1
   1decc:	9902      	ldr	r1, [sp, #8]
   1dece:	2400      	movs	r4, #0
   1ded0:	4019      	ands	r1, r3
   1ded2:	468c      	mov	ip, r1
   1ded4:	e5b8      	b.n	1da48 <__aeabi_ddiv+0x19c>
   1ded6:	4552      	cmp	r2, sl
   1ded8:	d8be      	bhi.n	1de58 <__aeabi_ddiv+0x5ac>
   1deda:	468b      	mov	fp, r1
   1dedc:	2500      	movs	r5, #0
   1dede:	e660      	b.n	1dba2 <__aeabi_ddiv+0x2f6>
   1dee0:	9d03      	ldr	r5, [sp, #12]
   1dee2:	429d      	cmp	r5, r3
   1dee4:	d3c6      	bcc.n	1de74 <__aeabi_ddiv+0x5c8>
   1dee6:	0011      	movs	r1, r2
   1dee8:	e762      	b.n	1ddb0 <__aeabi_ddiv+0x504>
   1deea:	2500      	movs	r5, #0
   1deec:	e7d8      	b.n	1dea0 <__aeabi_ddiv+0x5f4>
   1deee:	2280      	movs	r2, #128	; 0x80
   1def0:	465b      	mov	r3, fp
   1def2:	0312      	lsls	r2, r2, #12
   1def4:	431a      	orrs	r2, r3
   1def6:	9b01      	ldr	r3, [sp, #4]
   1def8:	0312      	lsls	r2, r2, #12
   1defa:	0b12      	lsrs	r2, r2, #12
   1defc:	469c      	mov	ip, r3
   1defe:	4688      	mov	r8, r1
   1df00:	4c03      	ldr	r4, [pc, #12]	; (1df10 <__aeabi_ddiv+0x664>)
   1df02:	e5a1      	b.n	1da48 <__aeabi_ddiv+0x19c>
   1df04:	000003ff 	.word	0x000003ff
   1df08:	feffffff 	.word	0xfeffffff
   1df0c:	000007fe 	.word	0x000007fe
   1df10:	000007ff 	.word	0x000007ff

0001df14 <__eqdf2>:
   1df14:	b5f0      	push	{r4, r5, r6, r7, lr}
   1df16:	464f      	mov	r7, r9
   1df18:	4646      	mov	r6, r8
   1df1a:	46d6      	mov	lr, sl
   1df1c:	005c      	lsls	r4, r3, #1
   1df1e:	b5c0      	push	{r6, r7, lr}
   1df20:	031f      	lsls	r7, r3, #12
   1df22:	0fdb      	lsrs	r3, r3, #31
   1df24:	469a      	mov	sl, r3
   1df26:	4b17      	ldr	r3, [pc, #92]	; (1df84 <__eqdf2+0x70>)
   1df28:	030e      	lsls	r6, r1, #12
   1df2a:	004d      	lsls	r5, r1, #1
   1df2c:	4684      	mov	ip, r0
   1df2e:	4680      	mov	r8, r0
   1df30:	0b36      	lsrs	r6, r6, #12
   1df32:	0d6d      	lsrs	r5, r5, #21
   1df34:	0fc9      	lsrs	r1, r1, #31
   1df36:	4691      	mov	r9, r2
   1df38:	0b3f      	lsrs	r7, r7, #12
   1df3a:	0d64      	lsrs	r4, r4, #21
   1df3c:	2001      	movs	r0, #1
   1df3e:	429d      	cmp	r5, r3
   1df40:	d008      	beq.n	1df54 <__eqdf2+0x40>
   1df42:	429c      	cmp	r4, r3
   1df44:	d001      	beq.n	1df4a <__eqdf2+0x36>
   1df46:	42a5      	cmp	r5, r4
   1df48:	d00b      	beq.n	1df62 <__eqdf2+0x4e>
   1df4a:	bc1c      	pop	{r2, r3, r4}
   1df4c:	4690      	mov	r8, r2
   1df4e:	4699      	mov	r9, r3
   1df50:	46a2      	mov	sl, r4
   1df52:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1df54:	4663      	mov	r3, ip
   1df56:	4333      	orrs	r3, r6
   1df58:	d1f7      	bne.n	1df4a <__eqdf2+0x36>
   1df5a:	42ac      	cmp	r4, r5
   1df5c:	d1f5      	bne.n	1df4a <__eqdf2+0x36>
   1df5e:	433a      	orrs	r2, r7
   1df60:	d1f3      	bne.n	1df4a <__eqdf2+0x36>
   1df62:	2001      	movs	r0, #1
   1df64:	42be      	cmp	r6, r7
   1df66:	d1f0      	bne.n	1df4a <__eqdf2+0x36>
   1df68:	45c8      	cmp	r8, r9
   1df6a:	d1ee      	bne.n	1df4a <__eqdf2+0x36>
   1df6c:	4551      	cmp	r1, sl
   1df6e:	d007      	beq.n	1df80 <__eqdf2+0x6c>
   1df70:	2d00      	cmp	r5, #0
   1df72:	d1ea      	bne.n	1df4a <__eqdf2+0x36>
   1df74:	4663      	mov	r3, ip
   1df76:	431e      	orrs	r6, r3
   1df78:	0030      	movs	r0, r6
   1df7a:	1e46      	subs	r6, r0, #1
   1df7c:	41b0      	sbcs	r0, r6
   1df7e:	e7e4      	b.n	1df4a <__eqdf2+0x36>
   1df80:	2000      	movs	r0, #0
   1df82:	e7e2      	b.n	1df4a <__eqdf2+0x36>
   1df84:	000007ff 	.word	0x000007ff

0001df88 <__gedf2>:
   1df88:	b5f0      	push	{r4, r5, r6, r7, lr}
   1df8a:	4645      	mov	r5, r8
   1df8c:	46de      	mov	lr, fp
   1df8e:	4657      	mov	r7, sl
   1df90:	464e      	mov	r6, r9
   1df92:	b5e0      	push	{r5, r6, r7, lr}
   1df94:	031f      	lsls	r7, r3, #12
   1df96:	0b3d      	lsrs	r5, r7, #12
   1df98:	4f2c      	ldr	r7, [pc, #176]	; (1e04c <__gedf2+0xc4>)
   1df9a:	030e      	lsls	r6, r1, #12
   1df9c:	004c      	lsls	r4, r1, #1
   1df9e:	46ab      	mov	fp, r5
   1dfa0:	005d      	lsls	r5, r3, #1
   1dfa2:	4684      	mov	ip, r0
   1dfa4:	0b36      	lsrs	r6, r6, #12
   1dfa6:	0d64      	lsrs	r4, r4, #21
   1dfa8:	0fc9      	lsrs	r1, r1, #31
   1dfaa:	4690      	mov	r8, r2
   1dfac:	0d6d      	lsrs	r5, r5, #21
   1dfae:	0fdb      	lsrs	r3, r3, #31
   1dfb0:	42bc      	cmp	r4, r7
   1dfb2:	d02a      	beq.n	1e00a <__gedf2+0x82>
   1dfb4:	4f25      	ldr	r7, [pc, #148]	; (1e04c <__gedf2+0xc4>)
   1dfb6:	42bd      	cmp	r5, r7
   1dfb8:	d02d      	beq.n	1e016 <__gedf2+0x8e>
   1dfba:	2c00      	cmp	r4, #0
   1dfbc:	d10f      	bne.n	1dfde <__gedf2+0x56>
   1dfbe:	4330      	orrs	r0, r6
   1dfc0:	0007      	movs	r7, r0
   1dfc2:	4681      	mov	r9, r0
   1dfc4:	4278      	negs	r0, r7
   1dfc6:	4178      	adcs	r0, r7
   1dfc8:	b2c0      	uxtb	r0, r0
   1dfca:	2d00      	cmp	r5, #0
   1dfcc:	d117      	bne.n	1dffe <__gedf2+0x76>
   1dfce:	465f      	mov	r7, fp
   1dfd0:	433a      	orrs	r2, r7
   1dfd2:	d114      	bne.n	1dffe <__gedf2+0x76>
   1dfd4:	464b      	mov	r3, r9
   1dfd6:	2000      	movs	r0, #0
   1dfd8:	2b00      	cmp	r3, #0
   1dfda:	d00a      	beq.n	1dff2 <__gedf2+0x6a>
   1dfdc:	e006      	b.n	1dfec <__gedf2+0x64>
   1dfde:	2d00      	cmp	r5, #0
   1dfe0:	d102      	bne.n	1dfe8 <__gedf2+0x60>
   1dfe2:	4658      	mov	r0, fp
   1dfe4:	4302      	orrs	r2, r0
   1dfe6:	d001      	beq.n	1dfec <__gedf2+0x64>
   1dfe8:	4299      	cmp	r1, r3
   1dfea:	d018      	beq.n	1e01e <__gedf2+0x96>
   1dfec:	4248      	negs	r0, r1
   1dfee:	2101      	movs	r1, #1
   1dff0:	4308      	orrs	r0, r1
   1dff2:	bc3c      	pop	{r2, r3, r4, r5}
   1dff4:	4690      	mov	r8, r2
   1dff6:	4699      	mov	r9, r3
   1dff8:	46a2      	mov	sl, r4
   1dffa:	46ab      	mov	fp, r5
   1dffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1dffe:	2800      	cmp	r0, #0
   1e000:	d0f2      	beq.n	1dfe8 <__gedf2+0x60>
   1e002:	2001      	movs	r0, #1
   1e004:	3b01      	subs	r3, #1
   1e006:	4318      	orrs	r0, r3
   1e008:	e7f3      	b.n	1dff2 <__gedf2+0x6a>
   1e00a:	0037      	movs	r7, r6
   1e00c:	4307      	orrs	r7, r0
   1e00e:	d0d1      	beq.n	1dfb4 <__gedf2+0x2c>
   1e010:	2002      	movs	r0, #2
   1e012:	4240      	negs	r0, r0
   1e014:	e7ed      	b.n	1dff2 <__gedf2+0x6a>
   1e016:	465f      	mov	r7, fp
   1e018:	4317      	orrs	r7, r2
   1e01a:	d0ce      	beq.n	1dfba <__gedf2+0x32>
   1e01c:	e7f8      	b.n	1e010 <__gedf2+0x88>
   1e01e:	42ac      	cmp	r4, r5
   1e020:	dce4      	bgt.n	1dfec <__gedf2+0x64>
   1e022:	da03      	bge.n	1e02c <__gedf2+0xa4>
   1e024:	1e48      	subs	r0, r1, #1
   1e026:	2101      	movs	r1, #1
   1e028:	4308      	orrs	r0, r1
   1e02a:	e7e2      	b.n	1dff2 <__gedf2+0x6a>
   1e02c:	455e      	cmp	r6, fp
   1e02e:	d8dd      	bhi.n	1dfec <__gedf2+0x64>
   1e030:	d006      	beq.n	1e040 <__gedf2+0xb8>
   1e032:	2000      	movs	r0, #0
   1e034:	455e      	cmp	r6, fp
   1e036:	d2dc      	bcs.n	1dff2 <__gedf2+0x6a>
   1e038:	2301      	movs	r3, #1
   1e03a:	1e48      	subs	r0, r1, #1
   1e03c:	4318      	orrs	r0, r3
   1e03e:	e7d8      	b.n	1dff2 <__gedf2+0x6a>
   1e040:	45c4      	cmp	ip, r8
   1e042:	d8d3      	bhi.n	1dfec <__gedf2+0x64>
   1e044:	2000      	movs	r0, #0
   1e046:	45c4      	cmp	ip, r8
   1e048:	d3f6      	bcc.n	1e038 <__gedf2+0xb0>
   1e04a:	e7d2      	b.n	1dff2 <__gedf2+0x6a>
   1e04c:	000007ff 	.word	0x000007ff

0001e050 <__ledf2>:
   1e050:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e052:	464e      	mov	r6, r9
   1e054:	4645      	mov	r5, r8
   1e056:	46de      	mov	lr, fp
   1e058:	4657      	mov	r7, sl
   1e05a:	005c      	lsls	r4, r3, #1
   1e05c:	b5e0      	push	{r5, r6, r7, lr}
   1e05e:	031f      	lsls	r7, r3, #12
   1e060:	0fdb      	lsrs	r3, r3, #31
   1e062:	4699      	mov	r9, r3
   1e064:	4b2a      	ldr	r3, [pc, #168]	; (1e110 <__ledf2+0xc0>)
   1e066:	030e      	lsls	r6, r1, #12
   1e068:	004d      	lsls	r5, r1, #1
   1e06a:	0fc9      	lsrs	r1, r1, #31
   1e06c:	4684      	mov	ip, r0
   1e06e:	0b36      	lsrs	r6, r6, #12
   1e070:	0d6d      	lsrs	r5, r5, #21
   1e072:	468b      	mov	fp, r1
   1e074:	4690      	mov	r8, r2
   1e076:	0b3f      	lsrs	r7, r7, #12
   1e078:	0d64      	lsrs	r4, r4, #21
   1e07a:	429d      	cmp	r5, r3
   1e07c:	d020      	beq.n	1e0c0 <__ledf2+0x70>
   1e07e:	4b24      	ldr	r3, [pc, #144]	; (1e110 <__ledf2+0xc0>)
   1e080:	429c      	cmp	r4, r3
   1e082:	d022      	beq.n	1e0ca <__ledf2+0x7a>
   1e084:	2d00      	cmp	r5, #0
   1e086:	d112      	bne.n	1e0ae <__ledf2+0x5e>
   1e088:	4330      	orrs	r0, r6
   1e08a:	4243      	negs	r3, r0
   1e08c:	4143      	adcs	r3, r0
   1e08e:	b2db      	uxtb	r3, r3
   1e090:	2c00      	cmp	r4, #0
   1e092:	d01f      	beq.n	1e0d4 <__ledf2+0x84>
   1e094:	2b00      	cmp	r3, #0
   1e096:	d00c      	beq.n	1e0b2 <__ledf2+0x62>
   1e098:	464b      	mov	r3, r9
   1e09a:	2001      	movs	r0, #1
   1e09c:	3b01      	subs	r3, #1
   1e09e:	4303      	orrs	r3, r0
   1e0a0:	0018      	movs	r0, r3
   1e0a2:	bc3c      	pop	{r2, r3, r4, r5}
   1e0a4:	4690      	mov	r8, r2
   1e0a6:	4699      	mov	r9, r3
   1e0a8:	46a2      	mov	sl, r4
   1e0aa:	46ab      	mov	fp, r5
   1e0ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e0ae:	2c00      	cmp	r4, #0
   1e0b0:	d016      	beq.n	1e0e0 <__ledf2+0x90>
   1e0b2:	45cb      	cmp	fp, r9
   1e0b4:	d017      	beq.n	1e0e6 <__ledf2+0x96>
   1e0b6:	465b      	mov	r3, fp
   1e0b8:	4259      	negs	r1, r3
   1e0ba:	2301      	movs	r3, #1
   1e0bc:	430b      	orrs	r3, r1
   1e0be:	e7ef      	b.n	1e0a0 <__ledf2+0x50>
   1e0c0:	0031      	movs	r1, r6
   1e0c2:	2302      	movs	r3, #2
   1e0c4:	4301      	orrs	r1, r0
   1e0c6:	d1eb      	bne.n	1e0a0 <__ledf2+0x50>
   1e0c8:	e7d9      	b.n	1e07e <__ledf2+0x2e>
   1e0ca:	0039      	movs	r1, r7
   1e0cc:	2302      	movs	r3, #2
   1e0ce:	4311      	orrs	r1, r2
   1e0d0:	d1e6      	bne.n	1e0a0 <__ledf2+0x50>
   1e0d2:	e7d7      	b.n	1e084 <__ledf2+0x34>
   1e0d4:	433a      	orrs	r2, r7
   1e0d6:	d1dd      	bne.n	1e094 <__ledf2+0x44>
   1e0d8:	2300      	movs	r3, #0
   1e0da:	2800      	cmp	r0, #0
   1e0dc:	d0e0      	beq.n	1e0a0 <__ledf2+0x50>
   1e0de:	e7ea      	b.n	1e0b6 <__ledf2+0x66>
   1e0e0:	433a      	orrs	r2, r7
   1e0e2:	d1e6      	bne.n	1e0b2 <__ledf2+0x62>
   1e0e4:	e7e7      	b.n	1e0b6 <__ledf2+0x66>
   1e0e6:	42a5      	cmp	r5, r4
   1e0e8:	dce5      	bgt.n	1e0b6 <__ledf2+0x66>
   1e0ea:	db05      	blt.n	1e0f8 <__ledf2+0xa8>
   1e0ec:	42be      	cmp	r6, r7
   1e0ee:	d8e2      	bhi.n	1e0b6 <__ledf2+0x66>
   1e0f0:	d007      	beq.n	1e102 <__ledf2+0xb2>
   1e0f2:	2300      	movs	r3, #0
   1e0f4:	42be      	cmp	r6, r7
   1e0f6:	d2d3      	bcs.n	1e0a0 <__ledf2+0x50>
   1e0f8:	4659      	mov	r1, fp
   1e0fa:	2301      	movs	r3, #1
   1e0fc:	3901      	subs	r1, #1
   1e0fe:	430b      	orrs	r3, r1
   1e100:	e7ce      	b.n	1e0a0 <__ledf2+0x50>
   1e102:	45c4      	cmp	ip, r8
   1e104:	d8d7      	bhi.n	1e0b6 <__ledf2+0x66>
   1e106:	2300      	movs	r3, #0
   1e108:	45c4      	cmp	ip, r8
   1e10a:	d3f5      	bcc.n	1e0f8 <__ledf2+0xa8>
   1e10c:	e7c8      	b.n	1e0a0 <__ledf2+0x50>
   1e10e:	46c0      	nop			; (mov r8, r8)
   1e110:	000007ff 	.word	0x000007ff

0001e114 <__aeabi_dmul>:
   1e114:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e116:	4657      	mov	r7, sl
   1e118:	4645      	mov	r5, r8
   1e11a:	46de      	mov	lr, fp
   1e11c:	464e      	mov	r6, r9
   1e11e:	b5e0      	push	{r5, r6, r7, lr}
   1e120:	030c      	lsls	r4, r1, #12
   1e122:	4698      	mov	r8, r3
   1e124:	004e      	lsls	r6, r1, #1
   1e126:	0b23      	lsrs	r3, r4, #12
   1e128:	b087      	sub	sp, #28
   1e12a:	0007      	movs	r7, r0
   1e12c:	4692      	mov	sl, r2
   1e12e:	469b      	mov	fp, r3
   1e130:	0d76      	lsrs	r6, r6, #21
   1e132:	0fcd      	lsrs	r5, r1, #31
   1e134:	2e00      	cmp	r6, #0
   1e136:	d06b      	beq.n	1e210 <__aeabi_dmul+0xfc>
   1e138:	4b6d      	ldr	r3, [pc, #436]	; (1e2f0 <__aeabi_dmul+0x1dc>)
   1e13a:	429e      	cmp	r6, r3
   1e13c:	d035      	beq.n	1e1aa <__aeabi_dmul+0x96>
   1e13e:	2480      	movs	r4, #128	; 0x80
   1e140:	465b      	mov	r3, fp
   1e142:	0f42      	lsrs	r2, r0, #29
   1e144:	0424      	lsls	r4, r4, #16
   1e146:	00db      	lsls	r3, r3, #3
   1e148:	4314      	orrs	r4, r2
   1e14a:	431c      	orrs	r4, r3
   1e14c:	00c3      	lsls	r3, r0, #3
   1e14e:	4699      	mov	r9, r3
   1e150:	4b68      	ldr	r3, [pc, #416]	; (1e2f4 <__aeabi_dmul+0x1e0>)
   1e152:	46a3      	mov	fp, r4
   1e154:	469c      	mov	ip, r3
   1e156:	2300      	movs	r3, #0
   1e158:	2700      	movs	r7, #0
   1e15a:	4466      	add	r6, ip
   1e15c:	9302      	str	r3, [sp, #8]
   1e15e:	4643      	mov	r3, r8
   1e160:	031c      	lsls	r4, r3, #12
   1e162:	005a      	lsls	r2, r3, #1
   1e164:	0fdb      	lsrs	r3, r3, #31
   1e166:	4650      	mov	r0, sl
   1e168:	0b24      	lsrs	r4, r4, #12
   1e16a:	0d52      	lsrs	r2, r2, #21
   1e16c:	4698      	mov	r8, r3
   1e16e:	d100      	bne.n	1e172 <__aeabi_dmul+0x5e>
   1e170:	e076      	b.n	1e260 <__aeabi_dmul+0x14c>
   1e172:	4b5f      	ldr	r3, [pc, #380]	; (1e2f0 <__aeabi_dmul+0x1dc>)
   1e174:	429a      	cmp	r2, r3
   1e176:	d06d      	beq.n	1e254 <__aeabi_dmul+0x140>
   1e178:	2380      	movs	r3, #128	; 0x80
   1e17a:	0f41      	lsrs	r1, r0, #29
   1e17c:	041b      	lsls	r3, r3, #16
   1e17e:	430b      	orrs	r3, r1
   1e180:	495c      	ldr	r1, [pc, #368]	; (1e2f4 <__aeabi_dmul+0x1e0>)
   1e182:	00e4      	lsls	r4, r4, #3
   1e184:	468c      	mov	ip, r1
   1e186:	431c      	orrs	r4, r3
   1e188:	00c3      	lsls	r3, r0, #3
   1e18a:	2000      	movs	r0, #0
   1e18c:	4462      	add	r2, ip
   1e18e:	4641      	mov	r1, r8
   1e190:	18b6      	adds	r6, r6, r2
   1e192:	4069      	eors	r1, r5
   1e194:	1c72      	adds	r2, r6, #1
   1e196:	9101      	str	r1, [sp, #4]
   1e198:	4694      	mov	ip, r2
   1e19a:	4307      	orrs	r7, r0
   1e19c:	2f0f      	cmp	r7, #15
   1e19e:	d900      	bls.n	1e1a2 <__aeabi_dmul+0x8e>
   1e1a0:	e0b0      	b.n	1e304 <__aeabi_dmul+0x1f0>
   1e1a2:	4a55      	ldr	r2, [pc, #340]	; (1e2f8 <__aeabi_dmul+0x1e4>)
   1e1a4:	00bf      	lsls	r7, r7, #2
   1e1a6:	59d2      	ldr	r2, [r2, r7]
   1e1a8:	4697      	mov	pc, r2
   1e1aa:	465b      	mov	r3, fp
   1e1ac:	4303      	orrs	r3, r0
   1e1ae:	4699      	mov	r9, r3
   1e1b0:	d000      	beq.n	1e1b4 <__aeabi_dmul+0xa0>
   1e1b2:	e087      	b.n	1e2c4 <__aeabi_dmul+0x1b0>
   1e1b4:	2300      	movs	r3, #0
   1e1b6:	469b      	mov	fp, r3
   1e1b8:	3302      	adds	r3, #2
   1e1ba:	2708      	movs	r7, #8
   1e1bc:	9302      	str	r3, [sp, #8]
   1e1be:	e7ce      	b.n	1e15e <__aeabi_dmul+0x4a>
   1e1c0:	4642      	mov	r2, r8
   1e1c2:	9201      	str	r2, [sp, #4]
   1e1c4:	2802      	cmp	r0, #2
   1e1c6:	d067      	beq.n	1e298 <__aeabi_dmul+0x184>
   1e1c8:	2803      	cmp	r0, #3
   1e1ca:	d100      	bne.n	1e1ce <__aeabi_dmul+0xba>
   1e1cc:	e20e      	b.n	1e5ec <__aeabi_dmul+0x4d8>
   1e1ce:	2801      	cmp	r0, #1
   1e1d0:	d000      	beq.n	1e1d4 <__aeabi_dmul+0xc0>
   1e1d2:	e162      	b.n	1e49a <__aeabi_dmul+0x386>
   1e1d4:	2300      	movs	r3, #0
   1e1d6:	2400      	movs	r4, #0
   1e1d8:	2200      	movs	r2, #0
   1e1da:	4699      	mov	r9, r3
   1e1dc:	9901      	ldr	r1, [sp, #4]
   1e1de:	4001      	ands	r1, r0
   1e1e0:	b2cd      	uxtb	r5, r1
   1e1e2:	2100      	movs	r1, #0
   1e1e4:	0312      	lsls	r2, r2, #12
   1e1e6:	0d0b      	lsrs	r3, r1, #20
   1e1e8:	0b12      	lsrs	r2, r2, #12
   1e1ea:	051b      	lsls	r3, r3, #20
   1e1ec:	4313      	orrs	r3, r2
   1e1ee:	4a43      	ldr	r2, [pc, #268]	; (1e2fc <__aeabi_dmul+0x1e8>)
   1e1f0:	0524      	lsls	r4, r4, #20
   1e1f2:	4013      	ands	r3, r2
   1e1f4:	431c      	orrs	r4, r3
   1e1f6:	0064      	lsls	r4, r4, #1
   1e1f8:	07ed      	lsls	r5, r5, #31
   1e1fa:	0864      	lsrs	r4, r4, #1
   1e1fc:	432c      	orrs	r4, r5
   1e1fe:	4648      	mov	r0, r9
   1e200:	0021      	movs	r1, r4
   1e202:	b007      	add	sp, #28
   1e204:	bc3c      	pop	{r2, r3, r4, r5}
   1e206:	4690      	mov	r8, r2
   1e208:	4699      	mov	r9, r3
   1e20a:	46a2      	mov	sl, r4
   1e20c:	46ab      	mov	fp, r5
   1e20e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e210:	4303      	orrs	r3, r0
   1e212:	4699      	mov	r9, r3
   1e214:	d04f      	beq.n	1e2b6 <__aeabi_dmul+0x1a2>
   1e216:	465b      	mov	r3, fp
   1e218:	2b00      	cmp	r3, #0
   1e21a:	d100      	bne.n	1e21e <__aeabi_dmul+0x10a>
   1e21c:	e189      	b.n	1e532 <__aeabi_dmul+0x41e>
   1e21e:	4658      	mov	r0, fp
   1e220:	f7fe f8a2 	bl	1c368 <__clzsi2>
   1e224:	0003      	movs	r3, r0
   1e226:	3b0b      	subs	r3, #11
   1e228:	2b1c      	cmp	r3, #28
   1e22a:	dd00      	ble.n	1e22e <__aeabi_dmul+0x11a>
   1e22c:	e17a      	b.n	1e524 <__aeabi_dmul+0x410>
   1e22e:	221d      	movs	r2, #29
   1e230:	1ad3      	subs	r3, r2, r3
   1e232:	003a      	movs	r2, r7
   1e234:	0001      	movs	r1, r0
   1e236:	465c      	mov	r4, fp
   1e238:	40da      	lsrs	r2, r3
   1e23a:	3908      	subs	r1, #8
   1e23c:	408c      	lsls	r4, r1
   1e23e:	0013      	movs	r3, r2
   1e240:	408f      	lsls	r7, r1
   1e242:	4323      	orrs	r3, r4
   1e244:	469b      	mov	fp, r3
   1e246:	46b9      	mov	r9, r7
   1e248:	2300      	movs	r3, #0
   1e24a:	4e2d      	ldr	r6, [pc, #180]	; (1e300 <__aeabi_dmul+0x1ec>)
   1e24c:	2700      	movs	r7, #0
   1e24e:	1a36      	subs	r6, r6, r0
   1e250:	9302      	str	r3, [sp, #8]
   1e252:	e784      	b.n	1e15e <__aeabi_dmul+0x4a>
   1e254:	4653      	mov	r3, sl
   1e256:	4323      	orrs	r3, r4
   1e258:	d12a      	bne.n	1e2b0 <__aeabi_dmul+0x19c>
   1e25a:	2400      	movs	r4, #0
   1e25c:	2002      	movs	r0, #2
   1e25e:	e796      	b.n	1e18e <__aeabi_dmul+0x7a>
   1e260:	4653      	mov	r3, sl
   1e262:	4323      	orrs	r3, r4
   1e264:	d020      	beq.n	1e2a8 <__aeabi_dmul+0x194>
   1e266:	2c00      	cmp	r4, #0
   1e268:	d100      	bne.n	1e26c <__aeabi_dmul+0x158>
   1e26a:	e157      	b.n	1e51c <__aeabi_dmul+0x408>
   1e26c:	0020      	movs	r0, r4
   1e26e:	f7fe f87b 	bl	1c368 <__clzsi2>
   1e272:	0003      	movs	r3, r0
   1e274:	3b0b      	subs	r3, #11
   1e276:	2b1c      	cmp	r3, #28
   1e278:	dd00      	ble.n	1e27c <__aeabi_dmul+0x168>
   1e27a:	e149      	b.n	1e510 <__aeabi_dmul+0x3fc>
   1e27c:	211d      	movs	r1, #29
   1e27e:	1acb      	subs	r3, r1, r3
   1e280:	4651      	mov	r1, sl
   1e282:	0002      	movs	r2, r0
   1e284:	40d9      	lsrs	r1, r3
   1e286:	4653      	mov	r3, sl
   1e288:	3a08      	subs	r2, #8
   1e28a:	4094      	lsls	r4, r2
   1e28c:	4093      	lsls	r3, r2
   1e28e:	430c      	orrs	r4, r1
   1e290:	4a1b      	ldr	r2, [pc, #108]	; (1e300 <__aeabi_dmul+0x1ec>)
   1e292:	1a12      	subs	r2, r2, r0
   1e294:	2000      	movs	r0, #0
   1e296:	e77a      	b.n	1e18e <__aeabi_dmul+0x7a>
   1e298:	2501      	movs	r5, #1
   1e29a:	9b01      	ldr	r3, [sp, #4]
   1e29c:	4c14      	ldr	r4, [pc, #80]	; (1e2f0 <__aeabi_dmul+0x1dc>)
   1e29e:	401d      	ands	r5, r3
   1e2a0:	2300      	movs	r3, #0
   1e2a2:	2200      	movs	r2, #0
   1e2a4:	4699      	mov	r9, r3
   1e2a6:	e79c      	b.n	1e1e2 <__aeabi_dmul+0xce>
   1e2a8:	2400      	movs	r4, #0
   1e2aa:	2200      	movs	r2, #0
   1e2ac:	2001      	movs	r0, #1
   1e2ae:	e76e      	b.n	1e18e <__aeabi_dmul+0x7a>
   1e2b0:	4653      	mov	r3, sl
   1e2b2:	2003      	movs	r0, #3
   1e2b4:	e76b      	b.n	1e18e <__aeabi_dmul+0x7a>
   1e2b6:	2300      	movs	r3, #0
   1e2b8:	469b      	mov	fp, r3
   1e2ba:	3301      	adds	r3, #1
   1e2bc:	2704      	movs	r7, #4
   1e2be:	2600      	movs	r6, #0
   1e2c0:	9302      	str	r3, [sp, #8]
   1e2c2:	e74c      	b.n	1e15e <__aeabi_dmul+0x4a>
   1e2c4:	2303      	movs	r3, #3
   1e2c6:	4681      	mov	r9, r0
   1e2c8:	270c      	movs	r7, #12
   1e2ca:	9302      	str	r3, [sp, #8]
   1e2cc:	e747      	b.n	1e15e <__aeabi_dmul+0x4a>
   1e2ce:	2280      	movs	r2, #128	; 0x80
   1e2d0:	2300      	movs	r3, #0
   1e2d2:	2500      	movs	r5, #0
   1e2d4:	0312      	lsls	r2, r2, #12
   1e2d6:	4699      	mov	r9, r3
   1e2d8:	4c05      	ldr	r4, [pc, #20]	; (1e2f0 <__aeabi_dmul+0x1dc>)
   1e2da:	e782      	b.n	1e1e2 <__aeabi_dmul+0xce>
   1e2dc:	465c      	mov	r4, fp
   1e2de:	464b      	mov	r3, r9
   1e2e0:	9802      	ldr	r0, [sp, #8]
   1e2e2:	e76f      	b.n	1e1c4 <__aeabi_dmul+0xb0>
   1e2e4:	465c      	mov	r4, fp
   1e2e6:	464b      	mov	r3, r9
   1e2e8:	9501      	str	r5, [sp, #4]
   1e2ea:	9802      	ldr	r0, [sp, #8]
   1e2ec:	e76a      	b.n	1e1c4 <__aeabi_dmul+0xb0>
   1e2ee:	46c0      	nop			; (mov r8, r8)
   1e2f0:	000007ff 	.word	0x000007ff
   1e2f4:	fffffc01 	.word	0xfffffc01
   1e2f8:	00025190 	.word	0x00025190
   1e2fc:	800fffff 	.word	0x800fffff
   1e300:	fffffc0d 	.word	0xfffffc0d
   1e304:	464a      	mov	r2, r9
   1e306:	4649      	mov	r1, r9
   1e308:	0c17      	lsrs	r7, r2, #16
   1e30a:	0c1a      	lsrs	r2, r3, #16
   1e30c:	041b      	lsls	r3, r3, #16
   1e30e:	0c1b      	lsrs	r3, r3, #16
   1e310:	0408      	lsls	r0, r1, #16
   1e312:	0019      	movs	r1, r3
   1e314:	0c00      	lsrs	r0, r0, #16
   1e316:	4341      	muls	r1, r0
   1e318:	0015      	movs	r5, r2
   1e31a:	4688      	mov	r8, r1
   1e31c:	0019      	movs	r1, r3
   1e31e:	437d      	muls	r5, r7
   1e320:	4379      	muls	r1, r7
   1e322:	9503      	str	r5, [sp, #12]
   1e324:	4689      	mov	r9, r1
   1e326:	0029      	movs	r1, r5
   1e328:	0015      	movs	r5, r2
   1e32a:	4345      	muls	r5, r0
   1e32c:	444d      	add	r5, r9
   1e32e:	9502      	str	r5, [sp, #8]
   1e330:	4645      	mov	r5, r8
   1e332:	0c2d      	lsrs	r5, r5, #16
   1e334:	46aa      	mov	sl, r5
   1e336:	9d02      	ldr	r5, [sp, #8]
   1e338:	4455      	add	r5, sl
   1e33a:	45a9      	cmp	r9, r5
   1e33c:	d906      	bls.n	1e34c <__aeabi_dmul+0x238>
   1e33e:	468a      	mov	sl, r1
   1e340:	2180      	movs	r1, #128	; 0x80
   1e342:	0249      	lsls	r1, r1, #9
   1e344:	4689      	mov	r9, r1
   1e346:	44ca      	add	sl, r9
   1e348:	4651      	mov	r1, sl
   1e34a:	9103      	str	r1, [sp, #12]
   1e34c:	0c29      	lsrs	r1, r5, #16
   1e34e:	9104      	str	r1, [sp, #16]
   1e350:	4641      	mov	r1, r8
   1e352:	0409      	lsls	r1, r1, #16
   1e354:	042d      	lsls	r5, r5, #16
   1e356:	0c09      	lsrs	r1, r1, #16
   1e358:	4688      	mov	r8, r1
   1e35a:	0029      	movs	r1, r5
   1e35c:	0c25      	lsrs	r5, r4, #16
   1e35e:	0424      	lsls	r4, r4, #16
   1e360:	4441      	add	r1, r8
   1e362:	0c24      	lsrs	r4, r4, #16
   1e364:	9105      	str	r1, [sp, #20]
   1e366:	0021      	movs	r1, r4
   1e368:	4341      	muls	r1, r0
   1e36a:	4688      	mov	r8, r1
   1e36c:	0021      	movs	r1, r4
   1e36e:	4379      	muls	r1, r7
   1e370:	468a      	mov	sl, r1
   1e372:	4368      	muls	r0, r5
   1e374:	4641      	mov	r1, r8
   1e376:	4450      	add	r0, sl
   1e378:	4681      	mov	r9, r0
   1e37a:	0c08      	lsrs	r0, r1, #16
   1e37c:	4448      	add	r0, r9
   1e37e:	436f      	muls	r7, r5
   1e380:	4582      	cmp	sl, r0
   1e382:	d903      	bls.n	1e38c <__aeabi_dmul+0x278>
   1e384:	2180      	movs	r1, #128	; 0x80
   1e386:	0249      	lsls	r1, r1, #9
   1e388:	4689      	mov	r9, r1
   1e38a:	444f      	add	r7, r9
   1e38c:	0c01      	lsrs	r1, r0, #16
   1e38e:	4689      	mov	r9, r1
   1e390:	0039      	movs	r1, r7
   1e392:	4449      	add	r1, r9
   1e394:	9102      	str	r1, [sp, #8]
   1e396:	4641      	mov	r1, r8
   1e398:	040f      	lsls	r7, r1, #16
   1e39a:	9904      	ldr	r1, [sp, #16]
   1e39c:	0c3f      	lsrs	r7, r7, #16
   1e39e:	4688      	mov	r8, r1
   1e3a0:	0400      	lsls	r0, r0, #16
   1e3a2:	19c0      	adds	r0, r0, r7
   1e3a4:	4480      	add	r8, r0
   1e3a6:	4641      	mov	r1, r8
   1e3a8:	9104      	str	r1, [sp, #16]
   1e3aa:	4659      	mov	r1, fp
   1e3ac:	0c0f      	lsrs	r7, r1, #16
   1e3ae:	0409      	lsls	r1, r1, #16
   1e3b0:	0c09      	lsrs	r1, r1, #16
   1e3b2:	4688      	mov	r8, r1
   1e3b4:	4359      	muls	r1, r3
   1e3b6:	468a      	mov	sl, r1
   1e3b8:	0039      	movs	r1, r7
   1e3ba:	4351      	muls	r1, r2
   1e3bc:	4689      	mov	r9, r1
   1e3be:	4641      	mov	r1, r8
   1e3c0:	434a      	muls	r2, r1
   1e3c2:	4651      	mov	r1, sl
   1e3c4:	0c09      	lsrs	r1, r1, #16
   1e3c6:	468b      	mov	fp, r1
   1e3c8:	437b      	muls	r3, r7
   1e3ca:	18d2      	adds	r2, r2, r3
   1e3cc:	445a      	add	r2, fp
   1e3ce:	4293      	cmp	r3, r2
   1e3d0:	d903      	bls.n	1e3da <__aeabi_dmul+0x2c6>
   1e3d2:	2380      	movs	r3, #128	; 0x80
   1e3d4:	025b      	lsls	r3, r3, #9
   1e3d6:	469b      	mov	fp, r3
   1e3d8:	44d9      	add	r9, fp
   1e3da:	4651      	mov	r1, sl
   1e3dc:	0409      	lsls	r1, r1, #16
   1e3de:	0c09      	lsrs	r1, r1, #16
   1e3e0:	468a      	mov	sl, r1
   1e3e2:	4641      	mov	r1, r8
   1e3e4:	4361      	muls	r1, r4
   1e3e6:	437c      	muls	r4, r7
   1e3e8:	0c13      	lsrs	r3, r2, #16
   1e3ea:	0412      	lsls	r2, r2, #16
   1e3ec:	444b      	add	r3, r9
   1e3ee:	4452      	add	r2, sl
   1e3f0:	46a1      	mov	r9, r4
   1e3f2:	468a      	mov	sl, r1
   1e3f4:	003c      	movs	r4, r7
   1e3f6:	4641      	mov	r1, r8
   1e3f8:	436c      	muls	r4, r5
   1e3fa:	434d      	muls	r5, r1
   1e3fc:	4651      	mov	r1, sl
   1e3fe:	444d      	add	r5, r9
   1e400:	0c0f      	lsrs	r7, r1, #16
   1e402:	197d      	adds	r5, r7, r5
   1e404:	45a9      	cmp	r9, r5
   1e406:	d903      	bls.n	1e410 <__aeabi_dmul+0x2fc>
   1e408:	2180      	movs	r1, #128	; 0x80
   1e40a:	0249      	lsls	r1, r1, #9
   1e40c:	4688      	mov	r8, r1
   1e40e:	4444      	add	r4, r8
   1e410:	9f04      	ldr	r7, [sp, #16]
   1e412:	9903      	ldr	r1, [sp, #12]
   1e414:	46b8      	mov	r8, r7
   1e416:	4441      	add	r1, r8
   1e418:	468b      	mov	fp, r1
   1e41a:	4583      	cmp	fp, r0
   1e41c:	4180      	sbcs	r0, r0
   1e41e:	4241      	negs	r1, r0
   1e420:	4688      	mov	r8, r1
   1e422:	4651      	mov	r1, sl
   1e424:	0408      	lsls	r0, r1, #16
   1e426:	042f      	lsls	r7, r5, #16
   1e428:	0c00      	lsrs	r0, r0, #16
   1e42a:	183f      	adds	r7, r7, r0
   1e42c:	4658      	mov	r0, fp
   1e42e:	9902      	ldr	r1, [sp, #8]
   1e430:	1810      	adds	r0, r2, r0
   1e432:	4689      	mov	r9, r1
   1e434:	4290      	cmp	r0, r2
   1e436:	4192      	sbcs	r2, r2
   1e438:	444f      	add	r7, r9
   1e43a:	46ba      	mov	sl, r7
   1e43c:	4252      	negs	r2, r2
   1e43e:	4699      	mov	r9, r3
   1e440:	4693      	mov	fp, r2
   1e442:	44c2      	add	sl, r8
   1e444:	44d1      	add	r9, sl
   1e446:	44cb      	add	fp, r9
   1e448:	428f      	cmp	r7, r1
   1e44a:	41bf      	sbcs	r7, r7
   1e44c:	45c2      	cmp	sl, r8
   1e44e:	4189      	sbcs	r1, r1
   1e450:	4599      	cmp	r9, r3
   1e452:	419b      	sbcs	r3, r3
   1e454:	4593      	cmp	fp, r2
   1e456:	4192      	sbcs	r2, r2
   1e458:	427f      	negs	r7, r7
   1e45a:	4249      	negs	r1, r1
   1e45c:	0c2d      	lsrs	r5, r5, #16
   1e45e:	4252      	negs	r2, r2
   1e460:	430f      	orrs	r7, r1
   1e462:	425b      	negs	r3, r3
   1e464:	4313      	orrs	r3, r2
   1e466:	197f      	adds	r7, r7, r5
   1e468:	18ff      	adds	r7, r7, r3
   1e46a:	465b      	mov	r3, fp
   1e46c:	193c      	adds	r4, r7, r4
   1e46e:	0ddb      	lsrs	r3, r3, #23
   1e470:	9a05      	ldr	r2, [sp, #20]
   1e472:	0264      	lsls	r4, r4, #9
   1e474:	431c      	orrs	r4, r3
   1e476:	0243      	lsls	r3, r0, #9
   1e478:	4313      	orrs	r3, r2
   1e47a:	1e5d      	subs	r5, r3, #1
   1e47c:	41ab      	sbcs	r3, r5
   1e47e:	465a      	mov	r2, fp
   1e480:	0dc0      	lsrs	r0, r0, #23
   1e482:	4303      	orrs	r3, r0
   1e484:	0252      	lsls	r2, r2, #9
   1e486:	4313      	orrs	r3, r2
   1e488:	01e2      	lsls	r2, r4, #7
   1e48a:	d556      	bpl.n	1e53a <__aeabi_dmul+0x426>
   1e48c:	2001      	movs	r0, #1
   1e48e:	085a      	lsrs	r2, r3, #1
   1e490:	4003      	ands	r3, r0
   1e492:	4313      	orrs	r3, r2
   1e494:	07e2      	lsls	r2, r4, #31
   1e496:	4313      	orrs	r3, r2
   1e498:	0864      	lsrs	r4, r4, #1
   1e49a:	485a      	ldr	r0, [pc, #360]	; (1e604 <__aeabi_dmul+0x4f0>)
   1e49c:	4460      	add	r0, ip
   1e49e:	2800      	cmp	r0, #0
   1e4a0:	dd4d      	ble.n	1e53e <__aeabi_dmul+0x42a>
   1e4a2:	075a      	lsls	r2, r3, #29
   1e4a4:	d009      	beq.n	1e4ba <__aeabi_dmul+0x3a6>
   1e4a6:	220f      	movs	r2, #15
   1e4a8:	401a      	ands	r2, r3
   1e4aa:	2a04      	cmp	r2, #4
   1e4ac:	d005      	beq.n	1e4ba <__aeabi_dmul+0x3a6>
   1e4ae:	1d1a      	adds	r2, r3, #4
   1e4b0:	429a      	cmp	r2, r3
   1e4b2:	419b      	sbcs	r3, r3
   1e4b4:	425b      	negs	r3, r3
   1e4b6:	18e4      	adds	r4, r4, r3
   1e4b8:	0013      	movs	r3, r2
   1e4ba:	01e2      	lsls	r2, r4, #7
   1e4bc:	d504      	bpl.n	1e4c8 <__aeabi_dmul+0x3b4>
   1e4be:	2080      	movs	r0, #128	; 0x80
   1e4c0:	4a51      	ldr	r2, [pc, #324]	; (1e608 <__aeabi_dmul+0x4f4>)
   1e4c2:	00c0      	lsls	r0, r0, #3
   1e4c4:	4014      	ands	r4, r2
   1e4c6:	4460      	add	r0, ip
   1e4c8:	4a50      	ldr	r2, [pc, #320]	; (1e60c <__aeabi_dmul+0x4f8>)
   1e4ca:	4290      	cmp	r0, r2
   1e4cc:	dd00      	ble.n	1e4d0 <__aeabi_dmul+0x3bc>
   1e4ce:	e6e3      	b.n	1e298 <__aeabi_dmul+0x184>
   1e4d0:	2501      	movs	r5, #1
   1e4d2:	08db      	lsrs	r3, r3, #3
   1e4d4:	0762      	lsls	r2, r4, #29
   1e4d6:	431a      	orrs	r2, r3
   1e4d8:	0264      	lsls	r4, r4, #9
   1e4da:	9b01      	ldr	r3, [sp, #4]
   1e4dc:	4691      	mov	r9, r2
   1e4de:	0b22      	lsrs	r2, r4, #12
   1e4e0:	0544      	lsls	r4, r0, #21
   1e4e2:	0d64      	lsrs	r4, r4, #21
   1e4e4:	401d      	ands	r5, r3
   1e4e6:	e67c      	b.n	1e1e2 <__aeabi_dmul+0xce>
   1e4e8:	2280      	movs	r2, #128	; 0x80
   1e4ea:	4659      	mov	r1, fp
   1e4ec:	0312      	lsls	r2, r2, #12
   1e4ee:	4211      	tst	r1, r2
   1e4f0:	d008      	beq.n	1e504 <__aeabi_dmul+0x3f0>
   1e4f2:	4214      	tst	r4, r2
   1e4f4:	d106      	bne.n	1e504 <__aeabi_dmul+0x3f0>
   1e4f6:	4322      	orrs	r2, r4
   1e4f8:	0312      	lsls	r2, r2, #12
   1e4fa:	0b12      	lsrs	r2, r2, #12
   1e4fc:	4645      	mov	r5, r8
   1e4fe:	4699      	mov	r9, r3
   1e500:	4c43      	ldr	r4, [pc, #268]	; (1e610 <__aeabi_dmul+0x4fc>)
   1e502:	e66e      	b.n	1e1e2 <__aeabi_dmul+0xce>
   1e504:	465b      	mov	r3, fp
   1e506:	431a      	orrs	r2, r3
   1e508:	0312      	lsls	r2, r2, #12
   1e50a:	0b12      	lsrs	r2, r2, #12
   1e50c:	4c40      	ldr	r4, [pc, #256]	; (1e610 <__aeabi_dmul+0x4fc>)
   1e50e:	e668      	b.n	1e1e2 <__aeabi_dmul+0xce>
   1e510:	0003      	movs	r3, r0
   1e512:	4654      	mov	r4, sl
   1e514:	3b28      	subs	r3, #40	; 0x28
   1e516:	409c      	lsls	r4, r3
   1e518:	2300      	movs	r3, #0
   1e51a:	e6b9      	b.n	1e290 <__aeabi_dmul+0x17c>
   1e51c:	f7fd ff24 	bl	1c368 <__clzsi2>
   1e520:	3020      	adds	r0, #32
   1e522:	e6a6      	b.n	1e272 <__aeabi_dmul+0x15e>
   1e524:	0003      	movs	r3, r0
   1e526:	3b28      	subs	r3, #40	; 0x28
   1e528:	409f      	lsls	r7, r3
   1e52a:	2300      	movs	r3, #0
   1e52c:	46bb      	mov	fp, r7
   1e52e:	4699      	mov	r9, r3
   1e530:	e68a      	b.n	1e248 <__aeabi_dmul+0x134>
   1e532:	f7fd ff19 	bl	1c368 <__clzsi2>
   1e536:	3020      	adds	r0, #32
   1e538:	e674      	b.n	1e224 <__aeabi_dmul+0x110>
   1e53a:	46b4      	mov	ip, r6
   1e53c:	e7ad      	b.n	1e49a <__aeabi_dmul+0x386>
   1e53e:	2501      	movs	r5, #1
   1e540:	1a2a      	subs	r2, r5, r0
   1e542:	2a38      	cmp	r2, #56	; 0x38
   1e544:	dd06      	ble.n	1e554 <__aeabi_dmul+0x440>
   1e546:	9b01      	ldr	r3, [sp, #4]
   1e548:	2400      	movs	r4, #0
   1e54a:	401d      	ands	r5, r3
   1e54c:	2300      	movs	r3, #0
   1e54e:	2200      	movs	r2, #0
   1e550:	4699      	mov	r9, r3
   1e552:	e646      	b.n	1e1e2 <__aeabi_dmul+0xce>
   1e554:	2a1f      	cmp	r2, #31
   1e556:	dc21      	bgt.n	1e59c <__aeabi_dmul+0x488>
   1e558:	2520      	movs	r5, #32
   1e55a:	0020      	movs	r0, r4
   1e55c:	1aad      	subs	r5, r5, r2
   1e55e:	001e      	movs	r6, r3
   1e560:	40ab      	lsls	r3, r5
   1e562:	40a8      	lsls	r0, r5
   1e564:	40d6      	lsrs	r6, r2
   1e566:	1e5d      	subs	r5, r3, #1
   1e568:	41ab      	sbcs	r3, r5
   1e56a:	4330      	orrs	r0, r6
   1e56c:	4318      	orrs	r0, r3
   1e56e:	40d4      	lsrs	r4, r2
   1e570:	0743      	lsls	r3, r0, #29
   1e572:	d009      	beq.n	1e588 <__aeabi_dmul+0x474>
   1e574:	230f      	movs	r3, #15
   1e576:	4003      	ands	r3, r0
   1e578:	2b04      	cmp	r3, #4
   1e57a:	d005      	beq.n	1e588 <__aeabi_dmul+0x474>
   1e57c:	0003      	movs	r3, r0
   1e57e:	1d18      	adds	r0, r3, #4
   1e580:	4298      	cmp	r0, r3
   1e582:	419b      	sbcs	r3, r3
   1e584:	425b      	negs	r3, r3
   1e586:	18e4      	adds	r4, r4, r3
   1e588:	0223      	lsls	r3, r4, #8
   1e58a:	d521      	bpl.n	1e5d0 <__aeabi_dmul+0x4bc>
   1e58c:	2501      	movs	r5, #1
   1e58e:	9b01      	ldr	r3, [sp, #4]
   1e590:	2401      	movs	r4, #1
   1e592:	401d      	ands	r5, r3
   1e594:	2300      	movs	r3, #0
   1e596:	2200      	movs	r2, #0
   1e598:	4699      	mov	r9, r3
   1e59a:	e622      	b.n	1e1e2 <__aeabi_dmul+0xce>
   1e59c:	251f      	movs	r5, #31
   1e59e:	0021      	movs	r1, r4
   1e5a0:	426d      	negs	r5, r5
   1e5a2:	1a28      	subs	r0, r5, r0
   1e5a4:	40c1      	lsrs	r1, r0
   1e5a6:	0008      	movs	r0, r1
   1e5a8:	2a20      	cmp	r2, #32
   1e5aa:	d01d      	beq.n	1e5e8 <__aeabi_dmul+0x4d4>
   1e5ac:	355f      	adds	r5, #95	; 0x5f
   1e5ae:	1aaa      	subs	r2, r5, r2
   1e5b0:	4094      	lsls	r4, r2
   1e5b2:	4323      	orrs	r3, r4
   1e5b4:	1e5c      	subs	r4, r3, #1
   1e5b6:	41a3      	sbcs	r3, r4
   1e5b8:	2507      	movs	r5, #7
   1e5ba:	4303      	orrs	r3, r0
   1e5bc:	401d      	ands	r5, r3
   1e5be:	2200      	movs	r2, #0
   1e5c0:	2d00      	cmp	r5, #0
   1e5c2:	d009      	beq.n	1e5d8 <__aeabi_dmul+0x4c4>
   1e5c4:	220f      	movs	r2, #15
   1e5c6:	2400      	movs	r4, #0
   1e5c8:	401a      	ands	r2, r3
   1e5ca:	0018      	movs	r0, r3
   1e5cc:	2a04      	cmp	r2, #4
   1e5ce:	d1d6      	bne.n	1e57e <__aeabi_dmul+0x46a>
   1e5d0:	0003      	movs	r3, r0
   1e5d2:	0765      	lsls	r5, r4, #29
   1e5d4:	0264      	lsls	r4, r4, #9
   1e5d6:	0b22      	lsrs	r2, r4, #12
   1e5d8:	08db      	lsrs	r3, r3, #3
   1e5da:	432b      	orrs	r3, r5
   1e5dc:	2501      	movs	r5, #1
   1e5de:	4699      	mov	r9, r3
   1e5e0:	9b01      	ldr	r3, [sp, #4]
   1e5e2:	2400      	movs	r4, #0
   1e5e4:	401d      	ands	r5, r3
   1e5e6:	e5fc      	b.n	1e1e2 <__aeabi_dmul+0xce>
   1e5e8:	2400      	movs	r4, #0
   1e5ea:	e7e2      	b.n	1e5b2 <__aeabi_dmul+0x49e>
   1e5ec:	2280      	movs	r2, #128	; 0x80
   1e5ee:	2501      	movs	r5, #1
   1e5f0:	0312      	lsls	r2, r2, #12
   1e5f2:	4322      	orrs	r2, r4
   1e5f4:	9901      	ldr	r1, [sp, #4]
   1e5f6:	0312      	lsls	r2, r2, #12
   1e5f8:	0b12      	lsrs	r2, r2, #12
   1e5fa:	400d      	ands	r5, r1
   1e5fc:	4699      	mov	r9, r3
   1e5fe:	4c04      	ldr	r4, [pc, #16]	; (1e610 <__aeabi_dmul+0x4fc>)
   1e600:	e5ef      	b.n	1e1e2 <__aeabi_dmul+0xce>
   1e602:	46c0      	nop			; (mov r8, r8)
   1e604:	000003ff 	.word	0x000003ff
   1e608:	feffffff 	.word	0xfeffffff
   1e60c:	000007fe 	.word	0x000007fe
   1e610:	000007ff 	.word	0x000007ff

0001e614 <__aeabi_dsub>:
   1e614:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e616:	4646      	mov	r6, r8
   1e618:	46d6      	mov	lr, sl
   1e61a:	464f      	mov	r7, r9
   1e61c:	030c      	lsls	r4, r1, #12
   1e61e:	b5c0      	push	{r6, r7, lr}
   1e620:	0fcd      	lsrs	r5, r1, #31
   1e622:	004e      	lsls	r6, r1, #1
   1e624:	0a61      	lsrs	r1, r4, #9
   1e626:	0f44      	lsrs	r4, r0, #29
   1e628:	430c      	orrs	r4, r1
   1e62a:	00c1      	lsls	r1, r0, #3
   1e62c:	0058      	lsls	r0, r3, #1
   1e62e:	0d40      	lsrs	r0, r0, #21
   1e630:	4684      	mov	ip, r0
   1e632:	468a      	mov	sl, r1
   1e634:	000f      	movs	r7, r1
   1e636:	0319      	lsls	r1, r3, #12
   1e638:	0f50      	lsrs	r0, r2, #29
   1e63a:	0a49      	lsrs	r1, r1, #9
   1e63c:	4301      	orrs	r1, r0
   1e63e:	48c6      	ldr	r0, [pc, #792]	; (1e958 <__aeabi_dsub+0x344>)
   1e640:	0d76      	lsrs	r6, r6, #21
   1e642:	46a8      	mov	r8, r5
   1e644:	0fdb      	lsrs	r3, r3, #31
   1e646:	00d2      	lsls	r2, r2, #3
   1e648:	4584      	cmp	ip, r0
   1e64a:	d100      	bne.n	1e64e <__aeabi_dsub+0x3a>
   1e64c:	e0d8      	b.n	1e800 <__aeabi_dsub+0x1ec>
   1e64e:	2001      	movs	r0, #1
   1e650:	4043      	eors	r3, r0
   1e652:	42ab      	cmp	r3, r5
   1e654:	d100      	bne.n	1e658 <__aeabi_dsub+0x44>
   1e656:	e0a6      	b.n	1e7a6 <__aeabi_dsub+0x192>
   1e658:	4660      	mov	r0, ip
   1e65a:	1a35      	subs	r5, r6, r0
   1e65c:	2d00      	cmp	r5, #0
   1e65e:	dc00      	bgt.n	1e662 <__aeabi_dsub+0x4e>
   1e660:	e105      	b.n	1e86e <__aeabi_dsub+0x25a>
   1e662:	2800      	cmp	r0, #0
   1e664:	d110      	bne.n	1e688 <__aeabi_dsub+0x74>
   1e666:	000b      	movs	r3, r1
   1e668:	4313      	orrs	r3, r2
   1e66a:	d100      	bne.n	1e66e <__aeabi_dsub+0x5a>
   1e66c:	e0d7      	b.n	1e81e <__aeabi_dsub+0x20a>
   1e66e:	1e6b      	subs	r3, r5, #1
   1e670:	2b00      	cmp	r3, #0
   1e672:	d000      	beq.n	1e676 <__aeabi_dsub+0x62>
   1e674:	e14b      	b.n	1e90e <__aeabi_dsub+0x2fa>
   1e676:	4653      	mov	r3, sl
   1e678:	1a9f      	subs	r7, r3, r2
   1e67a:	45ba      	cmp	sl, r7
   1e67c:	4180      	sbcs	r0, r0
   1e67e:	1a64      	subs	r4, r4, r1
   1e680:	4240      	negs	r0, r0
   1e682:	1a24      	subs	r4, r4, r0
   1e684:	2601      	movs	r6, #1
   1e686:	e01e      	b.n	1e6c6 <__aeabi_dsub+0xb2>
   1e688:	4bb3      	ldr	r3, [pc, #716]	; (1e958 <__aeabi_dsub+0x344>)
   1e68a:	429e      	cmp	r6, r3
   1e68c:	d048      	beq.n	1e720 <__aeabi_dsub+0x10c>
   1e68e:	2380      	movs	r3, #128	; 0x80
   1e690:	041b      	lsls	r3, r3, #16
   1e692:	4319      	orrs	r1, r3
   1e694:	2d38      	cmp	r5, #56	; 0x38
   1e696:	dd00      	ble.n	1e69a <__aeabi_dsub+0x86>
   1e698:	e119      	b.n	1e8ce <__aeabi_dsub+0x2ba>
   1e69a:	2d1f      	cmp	r5, #31
   1e69c:	dd00      	ble.n	1e6a0 <__aeabi_dsub+0x8c>
   1e69e:	e14c      	b.n	1e93a <__aeabi_dsub+0x326>
   1e6a0:	2320      	movs	r3, #32
   1e6a2:	000f      	movs	r7, r1
   1e6a4:	1b5b      	subs	r3, r3, r5
   1e6a6:	0010      	movs	r0, r2
   1e6a8:	409a      	lsls	r2, r3
   1e6aa:	409f      	lsls	r7, r3
   1e6ac:	40e8      	lsrs	r0, r5
   1e6ae:	1e53      	subs	r3, r2, #1
   1e6b0:	419a      	sbcs	r2, r3
   1e6b2:	40e9      	lsrs	r1, r5
   1e6b4:	4307      	orrs	r7, r0
   1e6b6:	4317      	orrs	r7, r2
   1e6b8:	4653      	mov	r3, sl
   1e6ba:	1bdf      	subs	r7, r3, r7
   1e6bc:	1a61      	subs	r1, r4, r1
   1e6be:	45ba      	cmp	sl, r7
   1e6c0:	41a4      	sbcs	r4, r4
   1e6c2:	4264      	negs	r4, r4
   1e6c4:	1b0c      	subs	r4, r1, r4
   1e6c6:	0223      	lsls	r3, r4, #8
   1e6c8:	d400      	bmi.n	1e6cc <__aeabi_dsub+0xb8>
   1e6ca:	e0c5      	b.n	1e858 <__aeabi_dsub+0x244>
   1e6cc:	0264      	lsls	r4, r4, #9
   1e6ce:	0a65      	lsrs	r5, r4, #9
   1e6d0:	2d00      	cmp	r5, #0
   1e6d2:	d100      	bne.n	1e6d6 <__aeabi_dsub+0xc2>
   1e6d4:	e0f6      	b.n	1e8c4 <__aeabi_dsub+0x2b0>
   1e6d6:	0028      	movs	r0, r5
   1e6d8:	f7fd fe46 	bl	1c368 <__clzsi2>
   1e6dc:	0003      	movs	r3, r0
   1e6de:	3b08      	subs	r3, #8
   1e6e0:	2b1f      	cmp	r3, #31
   1e6e2:	dd00      	ble.n	1e6e6 <__aeabi_dsub+0xd2>
   1e6e4:	e0e9      	b.n	1e8ba <__aeabi_dsub+0x2a6>
   1e6e6:	2220      	movs	r2, #32
   1e6e8:	003c      	movs	r4, r7
   1e6ea:	1ad2      	subs	r2, r2, r3
   1e6ec:	409d      	lsls	r5, r3
   1e6ee:	40d4      	lsrs	r4, r2
   1e6f0:	409f      	lsls	r7, r3
   1e6f2:	4325      	orrs	r5, r4
   1e6f4:	429e      	cmp	r6, r3
   1e6f6:	dd00      	ble.n	1e6fa <__aeabi_dsub+0xe6>
   1e6f8:	e0db      	b.n	1e8b2 <__aeabi_dsub+0x29e>
   1e6fa:	1b9e      	subs	r6, r3, r6
   1e6fc:	1c73      	adds	r3, r6, #1
   1e6fe:	2b1f      	cmp	r3, #31
   1e700:	dd00      	ble.n	1e704 <__aeabi_dsub+0xf0>
   1e702:	e10a      	b.n	1e91a <__aeabi_dsub+0x306>
   1e704:	2220      	movs	r2, #32
   1e706:	0038      	movs	r0, r7
   1e708:	1ad2      	subs	r2, r2, r3
   1e70a:	0029      	movs	r1, r5
   1e70c:	4097      	lsls	r7, r2
   1e70e:	002c      	movs	r4, r5
   1e710:	4091      	lsls	r1, r2
   1e712:	40d8      	lsrs	r0, r3
   1e714:	1e7a      	subs	r2, r7, #1
   1e716:	4197      	sbcs	r7, r2
   1e718:	40dc      	lsrs	r4, r3
   1e71a:	2600      	movs	r6, #0
   1e71c:	4301      	orrs	r1, r0
   1e71e:	430f      	orrs	r7, r1
   1e720:	077b      	lsls	r3, r7, #29
   1e722:	d009      	beq.n	1e738 <__aeabi_dsub+0x124>
   1e724:	230f      	movs	r3, #15
   1e726:	403b      	ands	r3, r7
   1e728:	2b04      	cmp	r3, #4
   1e72a:	d005      	beq.n	1e738 <__aeabi_dsub+0x124>
   1e72c:	1d3b      	adds	r3, r7, #4
   1e72e:	42bb      	cmp	r3, r7
   1e730:	41bf      	sbcs	r7, r7
   1e732:	427f      	negs	r7, r7
   1e734:	19e4      	adds	r4, r4, r7
   1e736:	001f      	movs	r7, r3
   1e738:	0223      	lsls	r3, r4, #8
   1e73a:	d525      	bpl.n	1e788 <__aeabi_dsub+0x174>
   1e73c:	4b86      	ldr	r3, [pc, #536]	; (1e958 <__aeabi_dsub+0x344>)
   1e73e:	3601      	adds	r6, #1
   1e740:	429e      	cmp	r6, r3
   1e742:	d100      	bne.n	1e746 <__aeabi_dsub+0x132>
   1e744:	e0af      	b.n	1e8a6 <__aeabi_dsub+0x292>
   1e746:	4b85      	ldr	r3, [pc, #532]	; (1e95c <__aeabi_dsub+0x348>)
   1e748:	2501      	movs	r5, #1
   1e74a:	401c      	ands	r4, r3
   1e74c:	4643      	mov	r3, r8
   1e74e:	0762      	lsls	r2, r4, #29
   1e750:	08ff      	lsrs	r7, r7, #3
   1e752:	0264      	lsls	r4, r4, #9
   1e754:	0576      	lsls	r6, r6, #21
   1e756:	4317      	orrs	r7, r2
   1e758:	0b24      	lsrs	r4, r4, #12
   1e75a:	0d76      	lsrs	r6, r6, #21
   1e75c:	401d      	ands	r5, r3
   1e75e:	2100      	movs	r1, #0
   1e760:	0324      	lsls	r4, r4, #12
   1e762:	0b23      	lsrs	r3, r4, #12
   1e764:	0d0c      	lsrs	r4, r1, #20
   1e766:	4a7e      	ldr	r2, [pc, #504]	; (1e960 <__aeabi_dsub+0x34c>)
   1e768:	0524      	lsls	r4, r4, #20
   1e76a:	431c      	orrs	r4, r3
   1e76c:	4014      	ands	r4, r2
   1e76e:	0533      	lsls	r3, r6, #20
   1e770:	4323      	orrs	r3, r4
   1e772:	005b      	lsls	r3, r3, #1
   1e774:	07ed      	lsls	r5, r5, #31
   1e776:	085b      	lsrs	r3, r3, #1
   1e778:	432b      	orrs	r3, r5
   1e77a:	0038      	movs	r0, r7
   1e77c:	0019      	movs	r1, r3
   1e77e:	bc1c      	pop	{r2, r3, r4}
   1e780:	4690      	mov	r8, r2
   1e782:	4699      	mov	r9, r3
   1e784:	46a2      	mov	sl, r4
   1e786:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e788:	2501      	movs	r5, #1
   1e78a:	4643      	mov	r3, r8
   1e78c:	0762      	lsls	r2, r4, #29
   1e78e:	08ff      	lsrs	r7, r7, #3
   1e790:	4317      	orrs	r7, r2
   1e792:	08e4      	lsrs	r4, r4, #3
   1e794:	401d      	ands	r5, r3
   1e796:	4b70      	ldr	r3, [pc, #448]	; (1e958 <__aeabi_dsub+0x344>)
   1e798:	429e      	cmp	r6, r3
   1e79a:	d036      	beq.n	1e80a <__aeabi_dsub+0x1f6>
   1e79c:	0324      	lsls	r4, r4, #12
   1e79e:	0576      	lsls	r6, r6, #21
   1e7a0:	0b24      	lsrs	r4, r4, #12
   1e7a2:	0d76      	lsrs	r6, r6, #21
   1e7a4:	e7db      	b.n	1e75e <__aeabi_dsub+0x14a>
   1e7a6:	4663      	mov	r3, ip
   1e7a8:	1af3      	subs	r3, r6, r3
   1e7aa:	2b00      	cmp	r3, #0
   1e7ac:	dc00      	bgt.n	1e7b0 <__aeabi_dsub+0x19c>
   1e7ae:	e094      	b.n	1e8da <__aeabi_dsub+0x2c6>
   1e7b0:	4660      	mov	r0, ip
   1e7b2:	2800      	cmp	r0, #0
   1e7b4:	d035      	beq.n	1e822 <__aeabi_dsub+0x20e>
   1e7b6:	4868      	ldr	r0, [pc, #416]	; (1e958 <__aeabi_dsub+0x344>)
   1e7b8:	4286      	cmp	r6, r0
   1e7ba:	d0b1      	beq.n	1e720 <__aeabi_dsub+0x10c>
   1e7bc:	2780      	movs	r7, #128	; 0x80
   1e7be:	043f      	lsls	r7, r7, #16
   1e7c0:	4339      	orrs	r1, r7
   1e7c2:	2b38      	cmp	r3, #56	; 0x38
   1e7c4:	dc00      	bgt.n	1e7c8 <__aeabi_dsub+0x1b4>
   1e7c6:	e0fd      	b.n	1e9c4 <__aeabi_dsub+0x3b0>
   1e7c8:	430a      	orrs	r2, r1
   1e7ca:	0017      	movs	r7, r2
   1e7cc:	2100      	movs	r1, #0
   1e7ce:	1e7a      	subs	r2, r7, #1
   1e7d0:	4197      	sbcs	r7, r2
   1e7d2:	4457      	add	r7, sl
   1e7d4:	4557      	cmp	r7, sl
   1e7d6:	4180      	sbcs	r0, r0
   1e7d8:	1909      	adds	r1, r1, r4
   1e7da:	4244      	negs	r4, r0
   1e7dc:	190c      	adds	r4, r1, r4
   1e7de:	0223      	lsls	r3, r4, #8
   1e7e0:	d53a      	bpl.n	1e858 <__aeabi_dsub+0x244>
   1e7e2:	4b5d      	ldr	r3, [pc, #372]	; (1e958 <__aeabi_dsub+0x344>)
   1e7e4:	3601      	adds	r6, #1
   1e7e6:	429e      	cmp	r6, r3
   1e7e8:	d100      	bne.n	1e7ec <__aeabi_dsub+0x1d8>
   1e7ea:	e14b      	b.n	1ea84 <__aeabi_dsub+0x470>
   1e7ec:	2201      	movs	r2, #1
   1e7ee:	4b5b      	ldr	r3, [pc, #364]	; (1e95c <__aeabi_dsub+0x348>)
   1e7f0:	401c      	ands	r4, r3
   1e7f2:	087b      	lsrs	r3, r7, #1
   1e7f4:	4017      	ands	r7, r2
   1e7f6:	431f      	orrs	r7, r3
   1e7f8:	07e2      	lsls	r2, r4, #31
   1e7fa:	4317      	orrs	r7, r2
   1e7fc:	0864      	lsrs	r4, r4, #1
   1e7fe:	e78f      	b.n	1e720 <__aeabi_dsub+0x10c>
   1e800:	0008      	movs	r0, r1
   1e802:	4310      	orrs	r0, r2
   1e804:	d000      	beq.n	1e808 <__aeabi_dsub+0x1f4>
   1e806:	e724      	b.n	1e652 <__aeabi_dsub+0x3e>
   1e808:	e721      	b.n	1e64e <__aeabi_dsub+0x3a>
   1e80a:	0023      	movs	r3, r4
   1e80c:	433b      	orrs	r3, r7
   1e80e:	d100      	bne.n	1e812 <__aeabi_dsub+0x1fe>
   1e810:	e1b9      	b.n	1eb86 <__aeabi_dsub+0x572>
   1e812:	2280      	movs	r2, #128	; 0x80
   1e814:	0312      	lsls	r2, r2, #12
   1e816:	4314      	orrs	r4, r2
   1e818:	0324      	lsls	r4, r4, #12
   1e81a:	0b24      	lsrs	r4, r4, #12
   1e81c:	e79f      	b.n	1e75e <__aeabi_dsub+0x14a>
   1e81e:	002e      	movs	r6, r5
   1e820:	e77e      	b.n	1e720 <__aeabi_dsub+0x10c>
   1e822:	0008      	movs	r0, r1
   1e824:	4310      	orrs	r0, r2
   1e826:	d100      	bne.n	1e82a <__aeabi_dsub+0x216>
   1e828:	e0ca      	b.n	1e9c0 <__aeabi_dsub+0x3ac>
   1e82a:	1e58      	subs	r0, r3, #1
   1e82c:	4684      	mov	ip, r0
   1e82e:	2800      	cmp	r0, #0
   1e830:	d000      	beq.n	1e834 <__aeabi_dsub+0x220>
   1e832:	e0e7      	b.n	1ea04 <__aeabi_dsub+0x3f0>
   1e834:	4452      	add	r2, sl
   1e836:	4552      	cmp	r2, sl
   1e838:	4180      	sbcs	r0, r0
   1e83a:	1864      	adds	r4, r4, r1
   1e83c:	4240      	negs	r0, r0
   1e83e:	1824      	adds	r4, r4, r0
   1e840:	0017      	movs	r7, r2
   1e842:	2601      	movs	r6, #1
   1e844:	0223      	lsls	r3, r4, #8
   1e846:	d507      	bpl.n	1e858 <__aeabi_dsub+0x244>
   1e848:	2602      	movs	r6, #2
   1e84a:	e7cf      	b.n	1e7ec <__aeabi_dsub+0x1d8>
   1e84c:	4664      	mov	r4, ip
   1e84e:	432c      	orrs	r4, r5
   1e850:	d100      	bne.n	1e854 <__aeabi_dsub+0x240>
   1e852:	e1b3      	b.n	1ebbc <__aeabi_dsub+0x5a8>
   1e854:	002c      	movs	r4, r5
   1e856:	4667      	mov	r7, ip
   1e858:	077b      	lsls	r3, r7, #29
   1e85a:	d000      	beq.n	1e85e <__aeabi_dsub+0x24a>
   1e85c:	e762      	b.n	1e724 <__aeabi_dsub+0x110>
   1e85e:	0763      	lsls	r3, r4, #29
   1e860:	08ff      	lsrs	r7, r7, #3
   1e862:	431f      	orrs	r7, r3
   1e864:	2501      	movs	r5, #1
   1e866:	4643      	mov	r3, r8
   1e868:	08e4      	lsrs	r4, r4, #3
   1e86a:	401d      	ands	r5, r3
   1e86c:	e793      	b.n	1e796 <__aeabi_dsub+0x182>
   1e86e:	2d00      	cmp	r5, #0
   1e870:	d178      	bne.n	1e964 <__aeabi_dsub+0x350>
   1e872:	1c75      	adds	r5, r6, #1
   1e874:	056d      	lsls	r5, r5, #21
   1e876:	0d6d      	lsrs	r5, r5, #21
   1e878:	2d01      	cmp	r5, #1
   1e87a:	dc00      	bgt.n	1e87e <__aeabi_dsub+0x26a>
   1e87c:	e0f2      	b.n	1ea64 <__aeabi_dsub+0x450>
   1e87e:	4650      	mov	r0, sl
   1e880:	1a80      	subs	r0, r0, r2
   1e882:	4582      	cmp	sl, r0
   1e884:	41bf      	sbcs	r7, r7
   1e886:	1a65      	subs	r5, r4, r1
   1e888:	427f      	negs	r7, r7
   1e88a:	1bed      	subs	r5, r5, r7
   1e88c:	4684      	mov	ip, r0
   1e88e:	0228      	lsls	r0, r5, #8
   1e890:	d400      	bmi.n	1e894 <__aeabi_dsub+0x280>
   1e892:	e08c      	b.n	1e9ae <__aeabi_dsub+0x39a>
   1e894:	4650      	mov	r0, sl
   1e896:	1a17      	subs	r7, r2, r0
   1e898:	42ba      	cmp	r2, r7
   1e89a:	4192      	sbcs	r2, r2
   1e89c:	1b0c      	subs	r4, r1, r4
   1e89e:	4255      	negs	r5, r2
   1e8a0:	1b65      	subs	r5, r4, r5
   1e8a2:	4698      	mov	r8, r3
   1e8a4:	e714      	b.n	1e6d0 <__aeabi_dsub+0xbc>
   1e8a6:	2501      	movs	r5, #1
   1e8a8:	4643      	mov	r3, r8
   1e8aa:	2400      	movs	r4, #0
   1e8ac:	401d      	ands	r5, r3
   1e8ae:	2700      	movs	r7, #0
   1e8b0:	e755      	b.n	1e75e <__aeabi_dsub+0x14a>
   1e8b2:	4c2a      	ldr	r4, [pc, #168]	; (1e95c <__aeabi_dsub+0x348>)
   1e8b4:	1af6      	subs	r6, r6, r3
   1e8b6:	402c      	ands	r4, r5
   1e8b8:	e732      	b.n	1e720 <__aeabi_dsub+0x10c>
   1e8ba:	003d      	movs	r5, r7
   1e8bc:	3828      	subs	r0, #40	; 0x28
   1e8be:	4085      	lsls	r5, r0
   1e8c0:	2700      	movs	r7, #0
   1e8c2:	e717      	b.n	1e6f4 <__aeabi_dsub+0xe0>
   1e8c4:	0038      	movs	r0, r7
   1e8c6:	f7fd fd4f 	bl	1c368 <__clzsi2>
   1e8ca:	3020      	adds	r0, #32
   1e8cc:	e706      	b.n	1e6dc <__aeabi_dsub+0xc8>
   1e8ce:	430a      	orrs	r2, r1
   1e8d0:	0017      	movs	r7, r2
   1e8d2:	2100      	movs	r1, #0
   1e8d4:	1e7a      	subs	r2, r7, #1
   1e8d6:	4197      	sbcs	r7, r2
   1e8d8:	e6ee      	b.n	1e6b8 <__aeabi_dsub+0xa4>
   1e8da:	2b00      	cmp	r3, #0
   1e8dc:	d000      	beq.n	1e8e0 <__aeabi_dsub+0x2cc>
   1e8de:	e0e5      	b.n	1eaac <__aeabi_dsub+0x498>
   1e8e0:	1c73      	adds	r3, r6, #1
   1e8e2:	469c      	mov	ip, r3
   1e8e4:	055b      	lsls	r3, r3, #21
   1e8e6:	0d5b      	lsrs	r3, r3, #21
   1e8e8:	2b01      	cmp	r3, #1
   1e8ea:	dc00      	bgt.n	1e8ee <__aeabi_dsub+0x2da>
   1e8ec:	e09f      	b.n	1ea2e <__aeabi_dsub+0x41a>
   1e8ee:	4b1a      	ldr	r3, [pc, #104]	; (1e958 <__aeabi_dsub+0x344>)
   1e8f0:	459c      	cmp	ip, r3
   1e8f2:	d100      	bne.n	1e8f6 <__aeabi_dsub+0x2e2>
   1e8f4:	e0c5      	b.n	1ea82 <__aeabi_dsub+0x46e>
   1e8f6:	4452      	add	r2, sl
   1e8f8:	4552      	cmp	r2, sl
   1e8fa:	4180      	sbcs	r0, r0
   1e8fc:	1864      	adds	r4, r4, r1
   1e8fe:	4240      	negs	r0, r0
   1e900:	1824      	adds	r4, r4, r0
   1e902:	07e7      	lsls	r7, r4, #31
   1e904:	0852      	lsrs	r2, r2, #1
   1e906:	4317      	orrs	r7, r2
   1e908:	0864      	lsrs	r4, r4, #1
   1e90a:	4666      	mov	r6, ip
   1e90c:	e708      	b.n	1e720 <__aeabi_dsub+0x10c>
   1e90e:	4812      	ldr	r0, [pc, #72]	; (1e958 <__aeabi_dsub+0x344>)
   1e910:	4285      	cmp	r5, r0
   1e912:	d100      	bne.n	1e916 <__aeabi_dsub+0x302>
   1e914:	e085      	b.n	1ea22 <__aeabi_dsub+0x40e>
   1e916:	001d      	movs	r5, r3
   1e918:	e6bc      	b.n	1e694 <__aeabi_dsub+0x80>
   1e91a:	0029      	movs	r1, r5
   1e91c:	3e1f      	subs	r6, #31
   1e91e:	40f1      	lsrs	r1, r6
   1e920:	2b20      	cmp	r3, #32
   1e922:	d100      	bne.n	1e926 <__aeabi_dsub+0x312>
   1e924:	e07f      	b.n	1ea26 <__aeabi_dsub+0x412>
   1e926:	2240      	movs	r2, #64	; 0x40
   1e928:	1ad3      	subs	r3, r2, r3
   1e92a:	409d      	lsls	r5, r3
   1e92c:	432f      	orrs	r7, r5
   1e92e:	1e7d      	subs	r5, r7, #1
   1e930:	41af      	sbcs	r7, r5
   1e932:	2400      	movs	r4, #0
   1e934:	430f      	orrs	r7, r1
   1e936:	2600      	movs	r6, #0
   1e938:	e78e      	b.n	1e858 <__aeabi_dsub+0x244>
   1e93a:	002b      	movs	r3, r5
   1e93c:	000f      	movs	r7, r1
   1e93e:	3b20      	subs	r3, #32
   1e940:	40df      	lsrs	r7, r3
   1e942:	2d20      	cmp	r5, #32
   1e944:	d071      	beq.n	1ea2a <__aeabi_dsub+0x416>
   1e946:	2340      	movs	r3, #64	; 0x40
   1e948:	1b5d      	subs	r5, r3, r5
   1e94a:	40a9      	lsls	r1, r5
   1e94c:	430a      	orrs	r2, r1
   1e94e:	1e51      	subs	r1, r2, #1
   1e950:	418a      	sbcs	r2, r1
   1e952:	2100      	movs	r1, #0
   1e954:	4317      	orrs	r7, r2
   1e956:	e6af      	b.n	1e6b8 <__aeabi_dsub+0xa4>
   1e958:	000007ff 	.word	0x000007ff
   1e95c:	ff7fffff 	.word	0xff7fffff
   1e960:	800fffff 	.word	0x800fffff
   1e964:	2e00      	cmp	r6, #0
   1e966:	d03e      	beq.n	1e9e6 <__aeabi_dsub+0x3d2>
   1e968:	4eb3      	ldr	r6, [pc, #716]	; (1ec38 <__aeabi_dsub+0x624>)
   1e96a:	45b4      	cmp	ip, r6
   1e96c:	d045      	beq.n	1e9fa <__aeabi_dsub+0x3e6>
   1e96e:	2680      	movs	r6, #128	; 0x80
   1e970:	0436      	lsls	r6, r6, #16
   1e972:	426d      	negs	r5, r5
   1e974:	4334      	orrs	r4, r6
   1e976:	2d38      	cmp	r5, #56	; 0x38
   1e978:	dd00      	ble.n	1e97c <__aeabi_dsub+0x368>
   1e97a:	e0a8      	b.n	1eace <__aeabi_dsub+0x4ba>
   1e97c:	2d1f      	cmp	r5, #31
   1e97e:	dd00      	ble.n	1e982 <__aeabi_dsub+0x36e>
   1e980:	e11f      	b.n	1ebc2 <__aeabi_dsub+0x5ae>
   1e982:	2620      	movs	r6, #32
   1e984:	0027      	movs	r7, r4
   1e986:	4650      	mov	r0, sl
   1e988:	1b76      	subs	r6, r6, r5
   1e98a:	40b7      	lsls	r7, r6
   1e98c:	40e8      	lsrs	r0, r5
   1e98e:	4307      	orrs	r7, r0
   1e990:	4650      	mov	r0, sl
   1e992:	40b0      	lsls	r0, r6
   1e994:	1e46      	subs	r6, r0, #1
   1e996:	41b0      	sbcs	r0, r6
   1e998:	40ec      	lsrs	r4, r5
   1e99a:	4338      	orrs	r0, r7
   1e99c:	1a17      	subs	r7, r2, r0
   1e99e:	42ba      	cmp	r2, r7
   1e9a0:	4192      	sbcs	r2, r2
   1e9a2:	1b0c      	subs	r4, r1, r4
   1e9a4:	4252      	negs	r2, r2
   1e9a6:	1aa4      	subs	r4, r4, r2
   1e9a8:	4666      	mov	r6, ip
   1e9aa:	4698      	mov	r8, r3
   1e9ac:	e68b      	b.n	1e6c6 <__aeabi_dsub+0xb2>
   1e9ae:	4664      	mov	r4, ip
   1e9b0:	4667      	mov	r7, ip
   1e9b2:	432c      	orrs	r4, r5
   1e9b4:	d000      	beq.n	1e9b8 <__aeabi_dsub+0x3a4>
   1e9b6:	e68b      	b.n	1e6d0 <__aeabi_dsub+0xbc>
   1e9b8:	2500      	movs	r5, #0
   1e9ba:	2600      	movs	r6, #0
   1e9bc:	2700      	movs	r7, #0
   1e9be:	e6ea      	b.n	1e796 <__aeabi_dsub+0x182>
   1e9c0:	001e      	movs	r6, r3
   1e9c2:	e6ad      	b.n	1e720 <__aeabi_dsub+0x10c>
   1e9c4:	2b1f      	cmp	r3, #31
   1e9c6:	dc60      	bgt.n	1ea8a <__aeabi_dsub+0x476>
   1e9c8:	2720      	movs	r7, #32
   1e9ca:	1af8      	subs	r0, r7, r3
   1e9cc:	000f      	movs	r7, r1
   1e9ce:	4684      	mov	ip, r0
   1e9d0:	4087      	lsls	r7, r0
   1e9d2:	0010      	movs	r0, r2
   1e9d4:	40d8      	lsrs	r0, r3
   1e9d6:	4307      	orrs	r7, r0
   1e9d8:	4660      	mov	r0, ip
   1e9da:	4082      	lsls	r2, r0
   1e9dc:	1e50      	subs	r0, r2, #1
   1e9de:	4182      	sbcs	r2, r0
   1e9e0:	40d9      	lsrs	r1, r3
   1e9e2:	4317      	orrs	r7, r2
   1e9e4:	e6f5      	b.n	1e7d2 <__aeabi_dsub+0x1be>
   1e9e6:	0026      	movs	r6, r4
   1e9e8:	4650      	mov	r0, sl
   1e9ea:	4306      	orrs	r6, r0
   1e9ec:	d005      	beq.n	1e9fa <__aeabi_dsub+0x3e6>
   1e9ee:	43ed      	mvns	r5, r5
   1e9f0:	2d00      	cmp	r5, #0
   1e9f2:	d0d3      	beq.n	1e99c <__aeabi_dsub+0x388>
   1e9f4:	4e90      	ldr	r6, [pc, #576]	; (1ec38 <__aeabi_dsub+0x624>)
   1e9f6:	45b4      	cmp	ip, r6
   1e9f8:	d1bd      	bne.n	1e976 <__aeabi_dsub+0x362>
   1e9fa:	000c      	movs	r4, r1
   1e9fc:	0017      	movs	r7, r2
   1e9fe:	4666      	mov	r6, ip
   1ea00:	4698      	mov	r8, r3
   1ea02:	e68d      	b.n	1e720 <__aeabi_dsub+0x10c>
   1ea04:	488c      	ldr	r0, [pc, #560]	; (1ec38 <__aeabi_dsub+0x624>)
   1ea06:	4283      	cmp	r3, r0
   1ea08:	d00b      	beq.n	1ea22 <__aeabi_dsub+0x40e>
   1ea0a:	4663      	mov	r3, ip
   1ea0c:	e6d9      	b.n	1e7c2 <__aeabi_dsub+0x1ae>
   1ea0e:	2d00      	cmp	r5, #0
   1ea10:	d000      	beq.n	1ea14 <__aeabi_dsub+0x400>
   1ea12:	e096      	b.n	1eb42 <__aeabi_dsub+0x52e>
   1ea14:	0008      	movs	r0, r1
   1ea16:	4310      	orrs	r0, r2
   1ea18:	d100      	bne.n	1ea1c <__aeabi_dsub+0x408>
   1ea1a:	e0e2      	b.n	1ebe2 <__aeabi_dsub+0x5ce>
   1ea1c:	000c      	movs	r4, r1
   1ea1e:	0017      	movs	r7, r2
   1ea20:	4698      	mov	r8, r3
   1ea22:	4e85      	ldr	r6, [pc, #532]	; (1ec38 <__aeabi_dsub+0x624>)
   1ea24:	e67c      	b.n	1e720 <__aeabi_dsub+0x10c>
   1ea26:	2500      	movs	r5, #0
   1ea28:	e780      	b.n	1e92c <__aeabi_dsub+0x318>
   1ea2a:	2100      	movs	r1, #0
   1ea2c:	e78e      	b.n	1e94c <__aeabi_dsub+0x338>
   1ea2e:	0023      	movs	r3, r4
   1ea30:	4650      	mov	r0, sl
   1ea32:	4303      	orrs	r3, r0
   1ea34:	2e00      	cmp	r6, #0
   1ea36:	d000      	beq.n	1ea3a <__aeabi_dsub+0x426>
   1ea38:	e0a8      	b.n	1eb8c <__aeabi_dsub+0x578>
   1ea3a:	2b00      	cmp	r3, #0
   1ea3c:	d100      	bne.n	1ea40 <__aeabi_dsub+0x42c>
   1ea3e:	e0de      	b.n	1ebfe <__aeabi_dsub+0x5ea>
   1ea40:	000b      	movs	r3, r1
   1ea42:	4313      	orrs	r3, r2
   1ea44:	d100      	bne.n	1ea48 <__aeabi_dsub+0x434>
   1ea46:	e66b      	b.n	1e720 <__aeabi_dsub+0x10c>
   1ea48:	4452      	add	r2, sl
   1ea4a:	4552      	cmp	r2, sl
   1ea4c:	4180      	sbcs	r0, r0
   1ea4e:	1864      	adds	r4, r4, r1
   1ea50:	4240      	negs	r0, r0
   1ea52:	1824      	adds	r4, r4, r0
   1ea54:	0017      	movs	r7, r2
   1ea56:	0223      	lsls	r3, r4, #8
   1ea58:	d400      	bmi.n	1ea5c <__aeabi_dsub+0x448>
   1ea5a:	e6fd      	b.n	1e858 <__aeabi_dsub+0x244>
   1ea5c:	4b77      	ldr	r3, [pc, #476]	; (1ec3c <__aeabi_dsub+0x628>)
   1ea5e:	4666      	mov	r6, ip
   1ea60:	401c      	ands	r4, r3
   1ea62:	e65d      	b.n	1e720 <__aeabi_dsub+0x10c>
   1ea64:	0025      	movs	r5, r4
   1ea66:	4650      	mov	r0, sl
   1ea68:	4305      	orrs	r5, r0
   1ea6a:	2e00      	cmp	r6, #0
   1ea6c:	d1cf      	bne.n	1ea0e <__aeabi_dsub+0x3fa>
   1ea6e:	2d00      	cmp	r5, #0
   1ea70:	d14f      	bne.n	1eb12 <__aeabi_dsub+0x4fe>
   1ea72:	000c      	movs	r4, r1
   1ea74:	4314      	orrs	r4, r2
   1ea76:	d100      	bne.n	1ea7a <__aeabi_dsub+0x466>
   1ea78:	e0a0      	b.n	1ebbc <__aeabi_dsub+0x5a8>
   1ea7a:	000c      	movs	r4, r1
   1ea7c:	0017      	movs	r7, r2
   1ea7e:	4698      	mov	r8, r3
   1ea80:	e64e      	b.n	1e720 <__aeabi_dsub+0x10c>
   1ea82:	4666      	mov	r6, ip
   1ea84:	2400      	movs	r4, #0
   1ea86:	2700      	movs	r7, #0
   1ea88:	e685      	b.n	1e796 <__aeabi_dsub+0x182>
   1ea8a:	001f      	movs	r7, r3
   1ea8c:	0008      	movs	r0, r1
   1ea8e:	3f20      	subs	r7, #32
   1ea90:	40f8      	lsrs	r0, r7
   1ea92:	0007      	movs	r7, r0
   1ea94:	2b20      	cmp	r3, #32
   1ea96:	d100      	bne.n	1ea9a <__aeabi_dsub+0x486>
   1ea98:	e08e      	b.n	1ebb8 <__aeabi_dsub+0x5a4>
   1ea9a:	2040      	movs	r0, #64	; 0x40
   1ea9c:	1ac3      	subs	r3, r0, r3
   1ea9e:	4099      	lsls	r1, r3
   1eaa0:	430a      	orrs	r2, r1
   1eaa2:	1e51      	subs	r1, r2, #1
   1eaa4:	418a      	sbcs	r2, r1
   1eaa6:	2100      	movs	r1, #0
   1eaa8:	4317      	orrs	r7, r2
   1eaaa:	e692      	b.n	1e7d2 <__aeabi_dsub+0x1be>
   1eaac:	2e00      	cmp	r6, #0
   1eaae:	d114      	bne.n	1eada <__aeabi_dsub+0x4c6>
   1eab0:	0026      	movs	r6, r4
   1eab2:	4650      	mov	r0, sl
   1eab4:	4306      	orrs	r6, r0
   1eab6:	d062      	beq.n	1eb7e <__aeabi_dsub+0x56a>
   1eab8:	43db      	mvns	r3, r3
   1eaba:	2b00      	cmp	r3, #0
   1eabc:	d15c      	bne.n	1eb78 <__aeabi_dsub+0x564>
   1eabe:	1887      	adds	r7, r0, r2
   1eac0:	4297      	cmp	r7, r2
   1eac2:	4192      	sbcs	r2, r2
   1eac4:	1864      	adds	r4, r4, r1
   1eac6:	4252      	negs	r2, r2
   1eac8:	18a4      	adds	r4, r4, r2
   1eaca:	4666      	mov	r6, ip
   1eacc:	e687      	b.n	1e7de <__aeabi_dsub+0x1ca>
   1eace:	4650      	mov	r0, sl
   1ead0:	4320      	orrs	r0, r4
   1ead2:	1e44      	subs	r4, r0, #1
   1ead4:	41a0      	sbcs	r0, r4
   1ead6:	2400      	movs	r4, #0
   1ead8:	e760      	b.n	1e99c <__aeabi_dsub+0x388>
   1eada:	4e57      	ldr	r6, [pc, #348]	; (1ec38 <__aeabi_dsub+0x624>)
   1eadc:	45b4      	cmp	ip, r6
   1eade:	d04e      	beq.n	1eb7e <__aeabi_dsub+0x56a>
   1eae0:	2680      	movs	r6, #128	; 0x80
   1eae2:	0436      	lsls	r6, r6, #16
   1eae4:	425b      	negs	r3, r3
   1eae6:	4334      	orrs	r4, r6
   1eae8:	2b38      	cmp	r3, #56	; 0x38
   1eaea:	dd00      	ble.n	1eaee <__aeabi_dsub+0x4da>
   1eaec:	e07f      	b.n	1ebee <__aeabi_dsub+0x5da>
   1eaee:	2b1f      	cmp	r3, #31
   1eaf0:	dd00      	ble.n	1eaf4 <__aeabi_dsub+0x4e0>
   1eaf2:	e08b      	b.n	1ec0c <__aeabi_dsub+0x5f8>
   1eaf4:	2620      	movs	r6, #32
   1eaf6:	0027      	movs	r7, r4
   1eaf8:	4650      	mov	r0, sl
   1eafa:	1af6      	subs	r6, r6, r3
   1eafc:	40b7      	lsls	r7, r6
   1eafe:	40d8      	lsrs	r0, r3
   1eb00:	4307      	orrs	r7, r0
   1eb02:	4650      	mov	r0, sl
   1eb04:	40b0      	lsls	r0, r6
   1eb06:	1e46      	subs	r6, r0, #1
   1eb08:	41b0      	sbcs	r0, r6
   1eb0a:	4307      	orrs	r7, r0
   1eb0c:	40dc      	lsrs	r4, r3
   1eb0e:	18bf      	adds	r7, r7, r2
   1eb10:	e7d6      	b.n	1eac0 <__aeabi_dsub+0x4ac>
   1eb12:	000d      	movs	r5, r1
   1eb14:	4315      	orrs	r5, r2
   1eb16:	d100      	bne.n	1eb1a <__aeabi_dsub+0x506>
   1eb18:	e602      	b.n	1e720 <__aeabi_dsub+0x10c>
   1eb1a:	4650      	mov	r0, sl
   1eb1c:	1a80      	subs	r0, r0, r2
   1eb1e:	4582      	cmp	sl, r0
   1eb20:	41bf      	sbcs	r7, r7
   1eb22:	1a65      	subs	r5, r4, r1
   1eb24:	427f      	negs	r7, r7
   1eb26:	1bed      	subs	r5, r5, r7
   1eb28:	4684      	mov	ip, r0
   1eb2a:	0228      	lsls	r0, r5, #8
   1eb2c:	d400      	bmi.n	1eb30 <__aeabi_dsub+0x51c>
   1eb2e:	e68d      	b.n	1e84c <__aeabi_dsub+0x238>
   1eb30:	4650      	mov	r0, sl
   1eb32:	1a17      	subs	r7, r2, r0
   1eb34:	42ba      	cmp	r2, r7
   1eb36:	4192      	sbcs	r2, r2
   1eb38:	1b0c      	subs	r4, r1, r4
   1eb3a:	4252      	negs	r2, r2
   1eb3c:	1aa4      	subs	r4, r4, r2
   1eb3e:	4698      	mov	r8, r3
   1eb40:	e5ee      	b.n	1e720 <__aeabi_dsub+0x10c>
   1eb42:	000d      	movs	r5, r1
   1eb44:	4315      	orrs	r5, r2
   1eb46:	d100      	bne.n	1eb4a <__aeabi_dsub+0x536>
   1eb48:	e76b      	b.n	1ea22 <__aeabi_dsub+0x40e>
   1eb4a:	4650      	mov	r0, sl
   1eb4c:	0767      	lsls	r7, r4, #29
   1eb4e:	08c0      	lsrs	r0, r0, #3
   1eb50:	4307      	orrs	r7, r0
   1eb52:	2080      	movs	r0, #128	; 0x80
   1eb54:	08e4      	lsrs	r4, r4, #3
   1eb56:	0300      	lsls	r0, r0, #12
   1eb58:	4204      	tst	r4, r0
   1eb5a:	d007      	beq.n	1eb6c <__aeabi_dsub+0x558>
   1eb5c:	08cd      	lsrs	r5, r1, #3
   1eb5e:	4205      	tst	r5, r0
   1eb60:	d104      	bne.n	1eb6c <__aeabi_dsub+0x558>
   1eb62:	002c      	movs	r4, r5
   1eb64:	4698      	mov	r8, r3
   1eb66:	08d7      	lsrs	r7, r2, #3
   1eb68:	0749      	lsls	r1, r1, #29
   1eb6a:	430f      	orrs	r7, r1
   1eb6c:	0f7b      	lsrs	r3, r7, #29
   1eb6e:	00e4      	lsls	r4, r4, #3
   1eb70:	431c      	orrs	r4, r3
   1eb72:	00ff      	lsls	r7, r7, #3
   1eb74:	4e30      	ldr	r6, [pc, #192]	; (1ec38 <__aeabi_dsub+0x624>)
   1eb76:	e5d3      	b.n	1e720 <__aeabi_dsub+0x10c>
   1eb78:	4e2f      	ldr	r6, [pc, #188]	; (1ec38 <__aeabi_dsub+0x624>)
   1eb7a:	45b4      	cmp	ip, r6
   1eb7c:	d1b4      	bne.n	1eae8 <__aeabi_dsub+0x4d4>
   1eb7e:	000c      	movs	r4, r1
   1eb80:	0017      	movs	r7, r2
   1eb82:	4666      	mov	r6, ip
   1eb84:	e5cc      	b.n	1e720 <__aeabi_dsub+0x10c>
   1eb86:	2700      	movs	r7, #0
   1eb88:	2400      	movs	r4, #0
   1eb8a:	e5e8      	b.n	1e75e <__aeabi_dsub+0x14a>
   1eb8c:	2b00      	cmp	r3, #0
   1eb8e:	d039      	beq.n	1ec04 <__aeabi_dsub+0x5f0>
   1eb90:	000b      	movs	r3, r1
   1eb92:	4313      	orrs	r3, r2
   1eb94:	d100      	bne.n	1eb98 <__aeabi_dsub+0x584>
   1eb96:	e744      	b.n	1ea22 <__aeabi_dsub+0x40e>
   1eb98:	08c0      	lsrs	r0, r0, #3
   1eb9a:	0767      	lsls	r7, r4, #29
   1eb9c:	4307      	orrs	r7, r0
   1eb9e:	2080      	movs	r0, #128	; 0x80
   1eba0:	08e4      	lsrs	r4, r4, #3
   1eba2:	0300      	lsls	r0, r0, #12
   1eba4:	4204      	tst	r4, r0
   1eba6:	d0e1      	beq.n	1eb6c <__aeabi_dsub+0x558>
   1eba8:	08cb      	lsrs	r3, r1, #3
   1ebaa:	4203      	tst	r3, r0
   1ebac:	d1de      	bne.n	1eb6c <__aeabi_dsub+0x558>
   1ebae:	08d7      	lsrs	r7, r2, #3
   1ebb0:	0749      	lsls	r1, r1, #29
   1ebb2:	430f      	orrs	r7, r1
   1ebb4:	001c      	movs	r4, r3
   1ebb6:	e7d9      	b.n	1eb6c <__aeabi_dsub+0x558>
   1ebb8:	2100      	movs	r1, #0
   1ebba:	e771      	b.n	1eaa0 <__aeabi_dsub+0x48c>
   1ebbc:	2500      	movs	r5, #0
   1ebbe:	2700      	movs	r7, #0
   1ebc0:	e5e9      	b.n	1e796 <__aeabi_dsub+0x182>
   1ebc2:	002e      	movs	r6, r5
   1ebc4:	0027      	movs	r7, r4
   1ebc6:	3e20      	subs	r6, #32
   1ebc8:	40f7      	lsrs	r7, r6
   1ebca:	2d20      	cmp	r5, #32
   1ebcc:	d02f      	beq.n	1ec2e <__aeabi_dsub+0x61a>
   1ebce:	2640      	movs	r6, #64	; 0x40
   1ebd0:	1b75      	subs	r5, r6, r5
   1ebd2:	40ac      	lsls	r4, r5
   1ebd4:	4650      	mov	r0, sl
   1ebd6:	4320      	orrs	r0, r4
   1ebd8:	1e44      	subs	r4, r0, #1
   1ebda:	41a0      	sbcs	r0, r4
   1ebdc:	2400      	movs	r4, #0
   1ebde:	4338      	orrs	r0, r7
   1ebe0:	e6dc      	b.n	1e99c <__aeabi_dsub+0x388>
   1ebe2:	2480      	movs	r4, #128	; 0x80
   1ebe4:	2500      	movs	r5, #0
   1ebe6:	0324      	lsls	r4, r4, #12
   1ebe8:	4e13      	ldr	r6, [pc, #76]	; (1ec38 <__aeabi_dsub+0x624>)
   1ebea:	2700      	movs	r7, #0
   1ebec:	e5d3      	b.n	1e796 <__aeabi_dsub+0x182>
   1ebee:	4650      	mov	r0, sl
   1ebf0:	4320      	orrs	r0, r4
   1ebf2:	0007      	movs	r7, r0
   1ebf4:	1e78      	subs	r0, r7, #1
   1ebf6:	4187      	sbcs	r7, r0
   1ebf8:	2400      	movs	r4, #0
   1ebfa:	18bf      	adds	r7, r7, r2
   1ebfc:	e760      	b.n	1eac0 <__aeabi_dsub+0x4ac>
   1ebfe:	000c      	movs	r4, r1
   1ec00:	0017      	movs	r7, r2
   1ec02:	e58d      	b.n	1e720 <__aeabi_dsub+0x10c>
   1ec04:	000c      	movs	r4, r1
   1ec06:	0017      	movs	r7, r2
   1ec08:	4e0b      	ldr	r6, [pc, #44]	; (1ec38 <__aeabi_dsub+0x624>)
   1ec0a:	e589      	b.n	1e720 <__aeabi_dsub+0x10c>
   1ec0c:	001e      	movs	r6, r3
   1ec0e:	0027      	movs	r7, r4
   1ec10:	3e20      	subs	r6, #32
   1ec12:	40f7      	lsrs	r7, r6
   1ec14:	2b20      	cmp	r3, #32
   1ec16:	d00c      	beq.n	1ec32 <__aeabi_dsub+0x61e>
   1ec18:	2640      	movs	r6, #64	; 0x40
   1ec1a:	1af3      	subs	r3, r6, r3
   1ec1c:	409c      	lsls	r4, r3
   1ec1e:	4650      	mov	r0, sl
   1ec20:	4320      	orrs	r0, r4
   1ec22:	1e44      	subs	r4, r0, #1
   1ec24:	41a0      	sbcs	r0, r4
   1ec26:	4307      	orrs	r7, r0
   1ec28:	2400      	movs	r4, #0
   1ec2a:	18bf      	adds	r7, r7, r2
   1ec2c:	e748      	b.n	1eac0 <__aeabi_dsub+0x4ac>
   1ec2e:	2400      	movs	r4, #0
   1ec30:	e7d0      	b.n	1ebd4 <__aeabi_dsub+0x5c0>
   1ec32:	2400      	movs	r4, #0
   1ec34:	e7f3      	b.n	1ec1e <__aeabi_dsub+0x60a>
   1ec36:	46c0      	nop			; (mov r8, r8)
   1ec38:	000007ff 	.word	0x000007ff
   1ec3c:	ff7fffff 	.word	0xff7fffff

0001ec40 <__aeabi_dcmpun>:
   1ec40:	b570      	push	{r4, r5, r6, lr}
   1ec42:	4e0e      	ldr	r6, [pc, #56]	; (1ec7c <__aeabi_dcmpun+0x3c>)
   1ec44:	030d      	lsls	r5, r1, #12
   1ec46:	031c      	lsls	r4, r3, #12
   1ec48:	0049      	lsls	r1, r1, #1
   1ec4a:	005b      	lsls	r3, r3, #1
   1ec4c:	0b2d      	lsrs	r5, r5, #12
   1ec4e:	0d49      	lsrs	r1, r1, #21
   1ec50:	0b24      	lsrs	r4, r4, #12
   1ec52:	0d5b      	lsrs	r3, r3, #21
   1ec54:	42b1      	cmp	r1, r6
   1ec56:	d004      	beq.n	1ec62 <__aeabi_dcmpun+0x22>
   1ec58:	4908      	ldr	r1, [pc, #32]	; (1ec7c <__aeabi_dcmpun+0x3c>)
   1ec5a:	2000      	movs	r0, #0
   1ec5c:	428b      	cmp	r3, r1
   1ec5e:	d008      	beq.n	1ec72 <__aeabi_dcmpun+0x32>
   1ec60:	bd70      	pop	{r4, r5, r6, pc}
   1ec62:	4305      	orrs	r5, r0
   1ec64:	2001      	movs	r0, #1
   1ec66:	2d00      	cmp	r5, #0
   1ec68:	d1fa      	bne.n	1ec60 <__aeabi_dcmpun+0x20>
   1ec6a:	4904      	ldr	r1, [pc, #16]	; (1ec7c <__aeabi_dcmpun+0x3c>)
   1ec6c:	2000      	movs	r0, #0
   1ec6e:	428b      	cmp	r3, r1
   1ec70:	d1f6      	bne.n	1ec60 <__aeabi_dcmpun+0x20>
   1ec72:	4314      	orrs	r4, r2
   1ec74:	0020      	movs	r0, r4
   1ec76:	1e44      	subs	r4, r0, #1
   1ec78:	41a0      	sbcs	r0, r4
   1ec7a:	e7f1      	b.n	1ec60 <__aeabi_dcmpun+0x20>
   1ec7c:	000007ff 	.word	0x000007ff

0001ec80 <__aeabi_d2iz>:
   1ec80:	b530      	push	{r4, r5, lr}
   1ec82:	4d13      	ldr	r5, [pc, #76]	; (1ecd0 <__aeabi_d2iz+0x50>)
   1ec84:	030a      	lsls	r2, r1, #12
   1ec86:	004b      	lsls	r3, r1, #1
   1ec88:	0b12      	lsrs	r2, r2, #12
   1ec8a:	0d5b      	lsrs	r3, r3, #21
   1ec8c:	0fc9      	lsrs	r1, r1, #31
   1ec8e:	2400      	movs	r4, #0
   1ec90:	42ab      	cmp	r3, r5
   1ec92:	dd10      	ble.n	1ecb6 <__aeabi_d2iz+0x36>
   1ec94:	4c0f      	ldr	r4, [pc, #60]	; (1ecd4 <__aeabi_d2iz+0x54>)
   1ec96:	42a3      	cmp	r3, r4
   1ec98:	dc0f      	bgt.n	1ecba <__aeabi_d2iz+0x3a>
   1ec9a:	2480      	movs	r4, #128	; 0x80
   1ec9c:	4d0e      	ldr	r5, [pc, #56]	; (1ecd8 <__aeabi_d2iz+0x58>)
   1ec9e:	0364      	lsls	r4, r4, #13
   1eca0:	4322      	orrs	r2, r4
   1eca2:	1aed      	subs	r5, r5, r3
   1eca4:	2d1f      	cmp	r5, #31
   1eca6:	dd0b      	ble.n	1ecc0 <__aeabi_d2iz+0x40>
   1eca8:	480c      	ldr	r0, [pc, #48]	; (1ecdc <__aeabi_d2iz+0x5c>)
   1ecaa:	1ac3      	subs	r3, r0, r3
   1ecac:	40da      	lsrs	r2, r3
   1ecae:	4254      	negs	r4, r2
   1ecb0:	2900      	cmp	r1, #0
   1ecb2:	d100      	bne.n	1ecb6 <__aeabi_d2iz+0x36>
   1ecb4:	0014      	movs	r4, r2
   1ecb6:	0020      	movs	r0, r4
   1ecb8:	bd30      	pop	{r4, r5, pc}
   1ecba:	4b09      	ldr	r3, [pc, #36]	; (1ece0 <__aeabi_d2iz+0x60>)
   1ecbc:	18cc      	adds	r4, r1, r3
   1ecbe:	e7fa      	b.n	1ecb6 <__aeabi_d2iz+0x36>
   1ecc0:	4c08      	ldr	r4, [pc, #32]	; (1ece4 <__aeabi_d2iz+0x64>)
   1ecc2:	40e8      	lsrs	r0, r5
   1ecc4:	46a4      	mov	ip, r4
   1ecc6:	4463      	add	r3, ip
   1ecc8:	409a      	lsls	r2, r3
   1ecca:	4302      	orrs	r2, r0
   1eccc:	e7ef      	b.n	1ecae <__aeabi_d2iz+0x2e>
   1ecce:	46c0      	nop			; (mov r8, r8)
   1ecd0:	000003fe 	.word	0x000003fe
   1ecd4:	0000041d 	.word	0x0000041d
   1ecd8:	00000433 	.word	0x00000433
   1ecdc:	00000413 	.word	0x00000413
   1ece0:	7fffffff 	.word	0x7fffffff
   1ece4:	fffffbed 	.word	0xfffffbed

0001ece8 <__aeabi_i2d>:
   1ece8:	b570      	push	{r4, r5, r6, lr}
   1ecea:	2800      	cmp	r0, #0
   1ecec:	d030      	beq.n	1ed50 <__aeabi_i2d+0x68>
   1ecee:	17c3      	asrs	r3, r0, #31
   1ecf0:	18c4      	adds	r4, r0, r3
   1ecf2:	405c      	eors	r4, r3
   1ecf4:	0fc5      	lsrs	r5, r0, #31
   1ecf6:	0020      	movs	r0, r4
   1ecf8:	f7fd fb36 	bl	1c368 <__clzsi2>
   1ecfc:	4b17      	ldr	r3, [pc, #92]	; (1ed5c <__aeabi_i2d+0x74>)
   1ecfe:	4a18      	ldr	r2, [pc, #96]	; (1ed60 <__aeabi_i2d+0x78>)
   1ed00:	1a1b      	subs	r3, r3, r0
   1ed02:	1ad2      	subs	r2, r2, r3
   1ed04:	2a1f      	cmp	r2, #31
   1ed06:	dd18      	ble.n	1ed3a <__aeabi_i2d+0x52>
   1ed08:	4a16      	ldr	r2, [pc, #88]	; (1ed64 <__aeabi_i2d+0x7c>)
   1ed0a:	1ad2      	subs	r2, r2, r3
   1ed0c:	4094      	lsls	r4, r2
   1ed0e:	2200      	movs	r2, #0
   1ed10:	0324      	lsls	r4, r4, #12
   1ed12:	055b      	lsls	r3, r3, #21
   1ed14:	0b24      	lsrs	r4, r4, #12
   1ed16:	0d5b      	lsrs	r3, r3, #21
   1ed18:	2100      	movs	r1, #0
   1ed1a:	0010      	movs	r0, r2
   1ed1c:	0324      	lsls	r4, r4, #12
   1ed1e:	0d0a      	lsrs	r2, r1, #20
   1ed20:	0b24      	lsrs	r4, r4, #12
   1ed22:	0512      	lsls	r2, r2, #20
   1ed24:	4322      	orrs	r2, r4
   1ed26:	4c10      	ldr	r4, [pc, #64]	; (1ed68 <__aeabi_i2d+0x80>)
   1ed28:	051b      	lsls	r3, r3, #20
   1ed2a:	4022      	ands	r2, r4
   1ed2c:	4313      	orrs	r3, r2
   1ed2e:	005b      	lsls	r3, r3, #1
   1ed30:	07ed      	lsls	r5, r5, #31
   1ed32:	085b      	lsrs	r3, r3, #1
   1ed34:	432b      	orrs	r3, r5
   1ed36:	0019      	movs	r1, r3
   1ed38:	bd70      	pop	{r4, r5, r6, pc}
   1ed3a:	0021      	movs	r1, r4
   1ed3c:	4091      	lsls	r1, r2
   1ed3e:	000a      	movs	r2, r1
   1ed40:	210b      	movs	r1, #11
   1ed42:	1a08      	subs	r0, r1, r0
   1ed44:	40c4      	lsrs	r4, r0
   1ed46:	055b      	lsls	r3, r3, #21
   1ed48:	0324      	lsls	r4, r4, #12
   1ed4a:	0b24      	lsrs	r4, r4, #12
   1ed4c:	0d5b      	lsrs	r3, r3, #21
   1ed4e:	e7e3      	b.n	1ed18 <__aeabi_i2d+0x30>
   1ed50:	2500      	movs	r5, #0
   1ed52:	2300      	movs	r3, #0
   1ed54:	2400      	movs	r4, #0
   1ed56:	2200      	movs	r2, #0
   1ed58:	e7de      	b.n	1ed18 <__aeabi_i2d+0x30>
   1ed5a:	46c0      	nop			; (mov r8, r8)
   1ed5c:	0000041e 	.word	0x0000041e
   1ed60:	00000433 	.word	0x00000433
   1ed64:	00000413 	.word	0x00000413
   1ed68:	800fffff 	.word	0x800fffff

0001ed6c <__aeabi_ui2d>:
   1ed6c:	b510      	push	{r4, lr}
   1ed6e:	1e04      	subs	r4, r0, #0
   1ed70:	d028      	beq.n	1edc4 <__aeabi_ui2d+0x58>
   1ed72:	f7fd faf9 	bl	1c368 <__clzsi2>
   1ed76:	4b15      	ldr	r3, [pc, #84]	; (1edcc <__aeabi_ui2d+0x60>)
   1ed78:	4a15      	ldr	r2, [pc, #84]	; (1edd0 <__aeabi_ui2d+0x64>)
   1ed7a:	1a1b      	subs	r3, r3, r0
   1ed7c:	1ad2      	subs	r2, r2, r3
   1ed7e:	2a1f      	cmp	r2, #31
   1ed80:	dd15      	ble.n	1edae <__aeabi_ui2d+0x42>
   1ed82:	4a14      	ldr	r2, [pc, #80]	; (1edd4 <__aeabi_ui2d+0x68>)
   1ed84:	1ad2      	subs	r2, r2, r3
   1ed86:	4094      	lsls	r4, r2
   1ed88:	2200      	movs	r2, #0
   1ed8a:	0324      	lsls	r4, r4, #12
   1ed8c:	055b      	lsls	r3, r3, #21
   1ed8e:	0b24      	lsrs	r4, r4, #12
   1ed90:	0d5b      	lsrs	r3, r3, #21
   1ed92:	2100      	movs	r1, #0
   1ed94:	0010      	movs	r0, r2
   1ed96:	0324      	lsls	r4, r4, #12
   1ed98:	0d0a      	lsrs	r2, r1, #20
   1ed9a:	0b24      	lsrs	r4, r4, #12
   1ed9c:	0512      	lsls	r2, r2, #20
   1ed9e:	4322      	orrs	r2, r4
   1eda0:	4c0d      	ldr	r4, [pc, #52]	; (1edd8 <__aeabi_ui2d+0x6c>)
   1eda2:	051b      	lsls	r3, r3, #20
   1eda4:	4022      	ands	r2, r4
   1eda6:	4313      	orrs	r3, r2
   1eda8:	005b      	lsls	r3, r3, #1
   1edaa:	0859      	lsrs	r1, r3, #1
   1edac:	bd10      	pop	{r4, pc}
   1edae:	0021      	movs	r1, r4
   1edb0:	4091      	lsls	r1, r2
   1edb2:	000a      	movs	r2, r1
   1edb4:	210b      	movs	r1, #11
   1edb6:	1a08      	subs	r0, r1, r0
   1edb8:	40c4      	lsrs	r4, r0
   1edba:	055b      	lsls	r3, r3, #21
   1edbc:	0324      	lsls	r4, r4, #12
   1edbe:	0b24      	lsrs	r4, r4, #12
   1edc0:	0d5b      	lsrs	r3, r3, #21
   1edc2:	e7e6      	b.n	1ed92 <__aeabi_ui2d+0x26>
   1edc4:	2300      	movs	r3, #0
   1edc6:	2400      	movs	r4, #0
   1edc8:	2200      	movs	r2, #0
   1edca:	e7e2      	b.n	1ed92 <__aeabi_ui2d+0x26>
   1edcc:	0000041e 	.word	0x0000041e
   1edd0:	00000433 	.word	0x00000433
   1edd4:	00000413 	.word	0x00000413
   1edd8:	800fffff 	.word	0x800fffff

0001eddc <__aeabi_f2d>:
   1eddc:	0041      	lsls	r1, r0, #1
   1edde:	0e09      	lsrs	r1, r1, #24
   1ede0:	1c4b      	adds	r3, r1, #1
   1ede2:	b570      	push	{r4, r5, r6, lr}
   1ede4:	b2db      	uxtb	r3, r3
   1ede6:	0246      	lsls	r6, r0, #9
   1ede8:	0a75      	lsrs	r5, r6, #9
   1edea:	0fc4      	lsrs	r4, r0, #31
   1edec:	2b01      	cmp	r3, #1
   1edee:	dd14      	ble.n	1ee1a <__aeabi_f2d+0x3e>
   1edf0:	23e0      	movs	r3, #224	; 0xe0
   1edf2:	009b      	lsls	r3, r3, #2
   1edf4:	076d      	lsls	r5, r5, #29
   1edf6:	0b36      	lsrs	r6, r6, #12
   1edf8:	18cb      	adds	r3, r1, r3
   1edfa:	2100      	movs	r1, #0
   1edfc:	0d0a      	lsrs	r2, r1, #20
   1edfe:	0028      	movs	r0, r5
   1ee00:	0512      	lsls	r2, r2, #20
   1ee02:	4d1c      	ldr	r5, [pc, #112]	; (1ee74 <__aeabi_f2d+0x98>)
   1ee04:	4332      	orrs	r2, r6
   1ee06:	055b      	lsls	r3, r3, #21
   1ee08:	402a      	ands	r2, r5
   1ee0a:	085b      	lsrs	r3, r3, #1
   1ee0c:	4313      	orrs	r3, r2
   1ee0e:	005b      	lsls	r3, r3, #1
   1ee10:	07e4      	lsls	r4, r4, #31
   1ee12:	085b      	lsrs	r3, r3, #1
   1ee14:	4323      	orrs	r3, r4
   1ee16:	0019      	movs	r1, r3
   1ee18:	bd70      	pop	{r4, r5, r6, pc}
   1ee1a:	2900      	cmp	r1, #0
   1ee1c:	d114      	bne.n	1ee48 <__aeabi_f2d+0x6c>
   1ee1e:	2d00      	cmp	r5, #0
   1ee20:	d01e      	beq.n	1ee60 <__aeabi_f2d+0x84>
   1ee22:	0028      	movs	r0, r5
   1ee24:	f7fd faa0 	bl	1c368 <__clzsi2>
   1ee28:	280a      	cmp	r0, #10
   1ee2a:	dc1c      	bgt.n	1ee66 <__aeabi_f2d+0x8a>
   1ee2c:	230b      	movs	r3, #11
   1ee2e:	002a      	movs	r2, r5
   1ee30:	1a1b      	subs	r3, r3, r0
   1ee32:	40da      	lsrs	r2, r3
   1ee34:	0003      	movs	r3, r0
   1ee36:	3315      	adds	r3, #21
   1ee38:	409d      	lsls	r5, r3
   1ee3a:	4b0f      	ldr	r3, [pc, #60]	; (1ee78 <__aeabi_f2d+0x9c>)
   1ee3c:	0312      	lsls	r2, r2, #12
   1ee3e:	1a1b      	subs	r3, r3, r0
   1ee40:	055b      	lsls	r3, r3, #21
   1ee42:	0b16      	lsrs	r6, r2, #12
   1ee44:	0d5b      	lsrs	r3, r3, #21
   1ee46:	e7d8      	b.n	1edfa <__aeabi_f2d+0x1e>
   1ee48:	2d00      	cmp	r5, #0
   1ee4a:	d006      	beq.n	1ee5a <__aeabi_f2d+0x7e>
   1ee4c:	0b32      	lsrs	r2, r6, #12
   1ee4e:	2680      	movs	r6, #128	; 0x80
   1ee50:	0336      	lsls	r6, r6, #12
   1ee52:	076d      	lsls	r5, r5, #29
   1ee54:	4316      	orrs	r6, r2
   1ee56:	4b09      	ldr	r3, [pc, #36]	; (1ee7c <__aeabi_f2d+0xa0>)
   1ee58:	e7cf      	b.n	1edfa <__aeabi_f2d+0x1e>
   1ee5a:	4b08      	ldr	r3, [pc, #32]	; (1ee7c <__aeabi_f2d+0xa0>)
   1ee5c:	2600      	movs	r6, #0
   1ee5e:	e7cc      	b.n	1edfa <__aeabi_f2d+0x1e>
   1ee60:	2300      	movs	r3, #0
   1ee62:	2600      	movs	r6, #0
   1ee64:	e7c9      	b.n	1edfa <__aeabi_f2d+0x1e>
   1ee66:	0003      	movs	r3, r0
   1ee68:	002a      	movs	r2, r5
   1ee6a:	3b0b      	subs	r3, #11
   1ee6c:	409a      	lsls	r2, r3
   1ee6e:	2500      	movs	r5, #0
   1ee70:	e7e3      	b.n	1ee3a <__aeabi_f2d+0x5e>
   1ee72:	46c0      	nop			; (mov r8, r8)
   1ee74:	800fffff 	.word	0x800fffff
   1ee78:	00000389 	.word	0x00000389
   1ee7c:	000007ff 	.word	0x000007ff

0001ee80 <__aeabi_d2f>:
   1ee80:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ee82:	004c      	lsls	r4, r1, #1
   1ee84:	0d64      	lsrs	r4, r4, #21
   1ee86:	030b      	lsls	r3, r1, #12
   1ee88:	1c62      	adds	r2, r4, #1
   1ee8a:	0f45      	lsrs	r5, r0, #29
   1ee8c:	0a5b      	lsrs	r3, r3, #9
   1ee8e:	0552      	lsls	r2, r2, #21
   1ee90:	432b      	orrs	r3, r5
   1ee92:	0fc9      	lsrs	r1, r1, #31
   1ee94:	00c5      	lsls	r5, r0, #3
   1ee96:	0d52      	lsrs	r2, r2, #21
   1ee98:	2a01      	cmp	r2, #1
   1ee9a:	dd28      	ble.n	1eeee <__aeabi_d2f+0x6e>
   1ee9c:	4a3a      	ldr	r2, [pc, #232]	; (1ef88 <__aeabi_d2f+0x108>)
   1ee9e:	18a6      	adds	r6, r4, r2
   1eea0:	2efe      	cmp	r6, #254	; 0xfe
   1eea2:	dc1b      	bgt.n	1eedc <__aeabi_d2f+0x5c>
   1eea4:	2e00      	cmp	r6, #0
   1eea6:	dd3e      	ble.n	1ef26 <__aeabi_d2f+0xa6>
   1eea8:	0180      	lsls	r0, r0, #6
   1eeaa:	0002      	movs	r2, r0
   1eeac:	1e50      	subs	r0, r2, #1
   1eeae:	4182      	sbcs	r2, r0
   1eeb0:	0f6d      	lsrs	r5, r5, #29
   1eeb2:	432a      	orrs	r2, r5
   1eeb4:	00db      	lsls	r3, r3, #3
   1eeb6:	4313      	orrs	r3, r2
   1eeb8:	075a      	lsls	r2, r3, #29
   1eeba:	d004      	beq.n	1eec6 <__aeabi_d2f+0x46>
   1eebc:	220f      	movs	r2, #15
   1eebe:	401a      	ands	r2, r3
   1eec0:	2a04      	cmp	r2, #4
   1eec2:	d000      	beq.n	1eec6 <__aeabi_d2f+0x46>
   1eec4:	3304      	adds	r3, #4
   1eec6:	2280      	movs	r2, #128	; 0x80
   1eec8:	04d2      	lsls	r2, r2, #19
   1eeca:	401a      	ands	r2, r3
   1eecc:	d05a      	beq.n	1ef84 <__aeabi_d2f+0x104>
   1eece:	3601      	adds	r6, #1
   1eed0:	2eff      	cmp	r6, #255	; 0xff
   1eed2:	d003      	beq.n	1eedc <__aeabi_d2f+0x5c>
   1eed4:	019b      	lsls	r3, r3, #6
   1eed6:	0a5b      	lsrs	r3, r3, #9
   1eed8:	b2f4      	uxtb	r4, r6
   1eeda:	e001      	b.n	1eee0 <__aeabi_d2f+0x60>
   1eedc:	24ff      	movs	r4, #255	; 0xff
   1eede:	2300      	movs	r3, #0
   1eee0:	0258      	lsls	r0, r3, #9
   1eee2:	05e4      	lsls	r4, r4, #23
   1eee4:	0a40      	lsrs	r0, r0, #9
   1eee6:	07c9      	lsls	r1, r1, #31
   1eee8:	4320      	orrs	r0, r4
   1eeea:	4308      	orrs	r0, r1
   1eeec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1eeee:	2c00      	cmp	r4, #0
   1eef0:	d007      	beq.n	1ef02 <__aeabi_d2f+0x82>
   1eef2:	431d      	orrs	r5, r3
   1eef4:	d0f2      	beq.n	1eedc <__aeabi_d2f+0x5c>
   1eef6:	2080      	movs	r0, #128	; 0x80
   1eef8:	00db      	lsls	r3, r3, #3
   1eefa:	0480      	lsls	r0, r0, #18
   1eefc:	4303      	orrs	r3, r0
   1eefe:	26ff      	movs	r6, #255	; 0xff
   1ef00:	e7da      	b.n	1eeb8 <__aeabi_d2f+0x38>
   1ef02:	432b      	orrs	r3, r5
   1ef04:	d003      	beq.n	1ef0e <__aeabi_d2f+0x8e>
   1ef06:	2305      	movs	r3, #5
   1ef08:	08db      	lsrs	r3, r3, #3
   1ef0a:	2cff      	cmp	r4, #255	; 0xff
   1ef0c:	d003      	beq.n	1ef16 <__aeabi_d2f+0x96>
   1ef0e:	025b      	lsls	r3, r3, #9
   1ef10:	0a5b      	lsrs	r3, r3, #9
   1ef12:	b2e4      	uxtb	r4, r4
   1ef14:	e7e4      	b.n	1eee0 <__aeabi_d2f+0x60>
   1ef16:	2b00      	cmp	r3, #0
   1ef18:	d032      	beq.n	1ef80 <__aeabi_d2f+0x100>
   1ef1a:	2080      	movs	r0, #128	; 0x80
   1ef1c:	03c0      	lsls	r0, r0, #15
   1ef1e:	4303      	orrs	r3, r0
   1ef20:	025b      	lsls	r3, r3, #9
   1ef22:	0a5b      	lsrs	r3, r3, #9
   1ef24:	e7dc      	b.n	1eee0 <__aeabi_d2f+0x60>
   1ef26:	0032      	movs	r2, r6
   1ef28:	3217      	adds	r2, #23
   1ef2a:	db14      	blt.n	1ef56 <__aeabi_d2f+0xd6>
   1ef2c:	2280      	movs	r2, #128	; 0x80
   1ef2e:	271e      	movs	r7, #30
   1ef30:	0412      	lsls	r2, r2, #16
   1ef32:	4313      	orrs	r3, r2
   1ef34:	1bbf      	subs	r7, r7, r6
   1ef36:	2f1f      	cmp	r7, #31
   1ef38:	dc0f      	bgt.n	1ef5a <__aeabi_d2f+0xda>
   1ef3a:	4a14      	ldr	r2, [pc, #80]	; (1ef8c <__aeabi_d2f+0x10c>)
   1ef3c:	4694      	mov	ip, r2
   1ef3e:	4464      	add	r4, ip
   1ef40:	002a      	movs	r2, r5
   1ef42:	40a5      	lsls	r5, r4
   1ef44:	002e      	movs	r6, r5
   1ef46:	40a3      	lsls	r3, r4
   1ef48:	1e75      	subs	r5, r6, #1
   1ef4a:	41ae      	sbcs	r6, r5
   1ef4c:	40fa      	lsrs	r2, r7
   1ef4e:	4333      	orrs	r3, r6
   1ef50:	4313      	orrs	r3, r2
   1ef52:	2600      	movs	r6, #0
   1ef54:	e7b0      	b.n	1eeb8 <__aeabi_d2f+0x38>
   1ef56:	2400      	movs	r4, #0
   1ef58:	e7d5      	b.n	1ef06 <__aeabi_d2f+0x86>
   1ef5a:	2202      	movs	r2, #2
   1ef5c:	4252      	negs	r2, r2
   1ef5e:	1b96      	subs	r6, r2, r6
   1ef60:	001a      	movs	r2, r3
   1ef62:	40f2      	lsrs	r2, r6
   1ef64:	2f20      	cmp	r7, #32
   1ef66:	d009      	beq.n	1ef7c <__aeabi_d2f+0xfc>
   1ef68:	4809      	ldr	r0, [pc, #36]	; (1ef90 <__aeabi_d2f+0x110>)
   1ef6a:	4684      	mov	ip, r0
   1ef6c:	4464      	add	r4, ip
   1ef6e:	40a3      	lsls	r3, r4
   1ef70:	432b      	orrs	r3, r5
   1ef72:	1e5d      	subs	r5, r3, #1
   1ef74:	41ab      	sbcs	r3, r5
   1ef76:	2600      	movs	r6, #0
   1ef78:	4313      	orrs	r3, r2
   1ef7a:	e79d      	b.n	1eeb8 <__aeabi_d2f+0x38>
   1ef7c:	2300      	movs	r3, #0
   1ef7e:	e7f7      	b.n	1ef70 <__aeabi_d2f+0xf0>
   1ef80:	2300      	movs	r3, #0
   1ef82:	e7ad      	b.n	1eee0 <__aeabi_d2f+0x60>
   1ef84:	0034      	movs	r4, r6
   1ef86:	e7bf      	b.n	1ef08 <__aeabi_d2f+0x88>
   1ef88:	fffffc80 	.word	0xfffffc80
   1ef8c:	fffffc82 	.word	0xfffffc82
   1ef90:	fffffca2 	.word	0xfffffca2

0001ef94 <__errno>:
   1ef94:	4b01      	ldr	r3, [pc, #4]	; (1ef9c <__errno+0x8>)
   1ef96:	6818      	ldr	r0, [r3, #0]
   1ef98:	4770      	bx	lr
   1ef9a:	46c0      	nop			; (mov r8, r8)
   1ef9c:	2000038c 	.word	0x2000038c

0001efa0 <__libc_init_array>:
   1efa0:	b570      	push	{r4, r5, r6, lr}
   1efa2:	4e0d      	ldr	r6, [pc, #52]	; (1efd8 <__libc_init_array+0x38>)
   1efa4:	4d0d      	ldr	r5, [pc, #52]	; (1efdc <__libc_init_array+0x3c>)
   1efa6:	2400      	movs	r4, #0
   1efa8:	1bad      	subs	r5, r5, r6
   1efaa:	10ad      	asrs	r5, r5, #2
   1efac:	d005      	beq.n	1efba <__libc_init_array+0x1a>
   1efae:	00a3      	lsls	r3, r4, #2
   1efb0:	58f3      	ldr	r3, [r6, r3]
   1efb2:	3401      	adds	r4, #1
   1efb4:	4798      	blx	r3
   1efb6:	42a5      	cmp	r5, r4
   1efb8:	d1f9      	bne.n	1efae <__libc_init_array+0xe>
   1efba:	f006 faff 	bl	255bc <_init>
   1efbe:	4e08      	ldr	r6, [pc, #32]	; (1efe0 <__libc_init_array+0x40>)
   1efc0:	4d08      	ldr	r5, [pc, #32]	; (1efe4 <__libc_init_array+0x44>)
   1efc2:	2400      	movs	r4, #0
   1efc4:	1bad      	subs	r5, r5, r6
   1efc6:	10ad      	asrs	r5, r5, #2
   1efc8:	d005      	beq.n	1efd6 <__libc_init_array+0x36>
   1efca:	00a3      	lsls	r3, r4, #2
   1efcc:	58f3      	ldr	r3, [r6, r3]
   1efce:	3401      	adds	r4, #1
   1efd0:	4798      	blx	r3
   1efd2:	42a5      	cmp	r5, r4
   1efd4:	d1f9      	bne.n	1efca <__libc_init_array+0x2a>
   1efd6:	bd70      	pop	{r4, r5, r6, pc}
   1efd8:	000255c8 	.word	0x000255c8
   1efdc:	000255c8 	.word	0x000255c8
   1efe0:	000255c8 	.word	0x000255c8
   1efe4:	000255d0 	.word	0x000255d0

0001efe8 <memcpy>:
   1efe8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1efea:	0005      	movs	r5, r0
   1efec:	2a0f      	cmp	r2, #15
   1efee:	d92f      	bls.n	1f050 <memcpy+0x68>
   1eff0:	000b      	movs	r3, r1
   1eff2:	4303      	orrs	r3, r0
   1eff4:	079b      	lsls	r3, r3, #30
   1eff6:	d134      	bne.n	1f062 <memcpy+0x7a>
   1eff8:	0016      	movs	r6, r2
   1effa:	000c      	movs	r4, r1
   1effc:	0003      	movs	r3, r0
   1effe:	3e10      	subs	r6, #16
   1f000:	0935      	lsrs	r5, r6, #4
   1f002:	3501      	adds	r5, #1
   1f004:	012d      	lsls	r5, r5, #4
   1f006:	1945      	adds	r5, r0, r5
   1f008:	6827      	ldr	r7, [r4, #0]
   1f00a:	601f      	str	r7, [r3, #0]
   1f00c:	6867      	ldr	r7, [r4, #4]
   1f00e:	605f      	str	r7, [r3, #4]
   1f010:	68a7      	ldr	r7, [r4, #8]
   1f012:	609f      	str	r7, [r3, #8]
   1f014:	68e7      	ldr	r7, [r4, #12]
   1f016:	3410      	adds	r4, #16
   1f018:	60df      	str	r7, [r3, #12]
   1f01a:	3310      	adds	r3, #16
   1f01c:	429d      	cmp	r5, r3
   1f01e:	d1f3      	bne.n	1f008 <memcpy+0x20>
   1f020:	230f      	movs	r3, #15
   1f022:	439e      	bics	r6, r3
   1f024:	3610      	adds	r6, #16
   1f026:	1985      	adds	r5, r0, r6
   1f028:	1989      	adds	r1, r1, r6
   1f02a:	4013      	ands	r3, r2
   1f02c:	2b03      	cmp	r3, #3
   1f02e:	d91a      	bls.n	1f066 <memcpy+0x7e>
   1f030:	1f1e      	subs	r6, r3, #4
   1f032:	2300      	movs	r3, #0
   1f034:	08b4      	lsrs	r4, r6, #2
   1f036:	3401      	adds	r4, #1
   1f038:	00a4      	lsls	r4, r4, #2
   1f03a:	58cf      	ldr	r7, [r1, r3]
   1f03c:	50ef      	str	r7, [r5, r3]
   1f03e:	3304      	adds	r3, #4
   1f040:	42a3      	cmp	r3, r4
   1f042:	d1fa      	bne.n	1f03a <memcpy+0x52>
   1f044:	2403      	movs	r4, #3
   1f046:	43a6      	bics	r6, r4
   1f048:	1d33      	adds	r3, r6, #4
   1f04a:	4022      	ands	r2, r4
   1f04c:	18c9      	adds	r1, r1, r3
   1f04e:	18ed      	adds	r5, r5, r3
   1f050:	2a00      	cmp	r2, #0
   1f052:	d005      	beq.n	1f060 <memcpy+0x78>
   1f054:	2300      	movs	r3, #0
   1f056:	5ccc      	ldrb	r4, [r1, r3]
   1f058:	54ec      	strb	r4, [r5, r3]
   1f05a:	3301      	adds	r3, #1
   1f05c:	4293      	cmp	r3, r2
   1f05e:	d1fa      	bne.n	1f056 <memcpy+0x6e>
   1f060:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f062:	0005      	movs	r5, r0
   1f064:	e7f6      	b.n	1f054 <memcpy+0x6c>
   1f066:	001a      	movs	r2, r3
   1f068:	e7f2      	b.n	1f050 <memcpy+0x68>
   1f06a:	46c0      	nop			; (mov r8, r8)

0001f06c <memset>:
   1f06c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f06e:	0783      	lsls	r3, r0, #30
   1f070:	d043      	beq.n	1f0fa <memset+0x8e>
   1f072:	1e54      	subs	r4, r2, #1
   1f074:	2a00      	cmp	r2, #0
   1f076:	d03f      	beq.n	1f0f8 <memset+0x8c>
   1f078:	b2ce      	uxtb	r6, r1
   1f07a:	0002      	movs	r2, r0
   1f07c:	2503      	movs	r5, #3
   1f07e:	e002      	b.n	1f086 <memset+0x1a>
   1f080:	001a      	movs	r2, r3
   1f082:	3c01      	subs	r4, #1
   1f084:	d338      	bcc.n	1f0f8 <memset+0x8c>
   1f086:	1c53      	adds	r3, r2, #1
   1f088:	7016      	strb	r6, [r2, #0]
   1f08a:	422b      	tst	r3, r5
   1f08c:	d1f8      	bne.n	1f080 <memset+0x14>
   1f08e:	2c03      	cmp	r4, #3
   1f090:	d92a      	bls.n	1f0e8 <memset+0x7c>
   1f092:	22ff      	movs	r2, #255	; 0xff
   1f094:	400a      	ands	r2, r1
   1f096:	0215      	lsls	r5, r2, #8
   1f098:	4315      	orrs	r5, r2
   1f09a:	042a      	lsls	r2, r5, #16
   1f09c:	4315      	orrs	r5, r2
   1f09e:	2c0f      	cmp	r4, #15
   1f0a0:	d914      	bls.n	1f0cc <memset+0x60>
   1f0a2:	0027      	movs	r7, r4
   1f0a4:	001a      	movs	r2, r3
   1f0a6:	3f10      	subs	r7, #16
   1f0a8:	093e      	lsrs	r6, r7, #4
   1f0aa:	3601      	adds	r6, #1
   1f0ac:	0136      	lsls	r6, r6, #4
   1f0ae:	199e      	adds	r6, r3, r6
   1f0b0:	6015      	str	r5, [r2, #0]
   1f0b2:	6055      	str	r5, [r2, #4]
   1f0b4:	6095      	str	r5, [r2, #8]
   1f0b6:	60d5      	str	r5, [r2, #12]
   1f0b8:	3210      	adds	r2, #16
   1f0ba:	4296      	cmp	r6, r2
   1f0bc:	d1f8      	bne.n	1f0b0 <memset+0x44>
   1f0be:	220f      	movs	r2, #15
   1f0c0:	4397      	bics	r7, r2
   1f0c2:	3710      	adds	r7, #16
   1f0c4:	19db      	adds	r3, r3, r7
   1f0c6:	4014      	ands	r4, r2
   1f0c8:	2c03      	cmp	r4, #3
   1f0ca:	d90d      	bls.n	1f0e8 <memset+0x7c>
   1f0cc:	001a      	movs	r2, r3
   1f0ce:	1f27      	subs	r7, r4, #4
   1f0d0:	08be      	lsrs	r6, r7, #2
   1f0d2:	3601      	adds	r6, #1
   1f0d4:	00b6      	lsls	r6, r6, #2
   1f0d6:	199e      	adds	r6, r3, r6
   1f0d8:	c220      	stmia	r2!, {r5}
   1f0da:	42b2      	cmp	r2, r6
   1f0dc:	d1fc      	bne.n	1f0d8 <memset+0x6c>
   1f0de:	2203      	movs	r2, #3
   1f0e0:	4397      	bics	r7, r2
   1f0e2:	3704      	adds	r7, #4
   1f0e4:	19db      	adds	r3, r3, r7
   1f0e6:	4014      	ands	r4, r2
   1f0e8:	2c00      	cmp	r4, #0
   1f0ea:	d005      	beq.n	1f0f8 <memset+0x8c>
   1f0ec:	b2c9      	uxtb	r1, r1
   1f0ee:	191c      	adds	r4, r3, r4
   1f0f0:	7019      	strb	r1, [r3, #0]
   1f0f2:	3301      	adds	r3, #1
   1f0f4:	429c      	cmp	r4, r3
   1f0f6:	d1fb      	bne.n	1f0f0 <memset+0x84>
   1f0f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f0fa:	0014      	movs	r4, r2
   1f0fc:	0003      	movs	r3, r0
   1f0fe:	e7c6      	b.n	1f08e <memset+0x22>

0001f100 <sprintf>:
   1f100:	b40e      	push	{r1, r2, r3}
   1f102:	b510      	push	{r4, lr}
   1f104:	b09d      	sub	sp, #116	; 0x74
   1f106:	a902      	add	r1, sp, #8
   1f108:	9002      	str	r0, [sp, #8]
   1f10a:	6108      	str	r0, [r1, #16]
   1f10c:	480b      	ldr	r0, [pc, #44]	; (1f13c <sprintf+0x3c>)
   1f10e:	2482      	movs	r4, #130	; 0x82
   1f110:	6088      	str	r0, [r1, #8]
   1f112:	6148      	str	r0, [r1, #20]
   1f114:	2001      	movs	r0, #1
   1f116:	4240      	negs	r0, r0
   1f118:	ab1f      	add	r3, sp, #124	; 0x7c
   1f11a:	81c8      	strh	r0, [r1, #14]
   1f11c:	4808      	ldr	r0, [pc, #32]	; (1f140 <sprintf+0x40>)
   1f11e:	cb04      	ldmia	r3!, {r2}
   1f120:	00a4      	lsls	r4, r4, #2
   1f122:	6800      	ldr	r0, [r0, #0]
   1f124:	9301      	str	r3, [sp, #4]
   1f126:	818c      	strh	r4, [r1, #12]
   1f128:	f000 f88e 	bl	1f248 <_svfprintf_r>
   1f12c:	2300      	movs	r3, #0
   1f12e:	9a02      	ldr	r2, [sp, #8]
   1f130:	7013      	strb	r3, [r2, #0]
   1f132:	b01d      	add	sp, #116	; 0x74
   1f134:	bc10      	pop	{r4}
   1f136:	bc08      	pop	{r3}
   1f138:	b003      	add	sp, #12
   1f13a:	4718      	bx	r3
   1f13c:	7fffffff 	.word	0x7fffffff
   1f140:	2000038c 	.word	0x2000038c

0001f144 <stpcpy>:
   1f144:	000b      	movs	r3, r1
   1f146:	4303      	orrs	r3, r0
   1f148:	b510      	push	{r4, lr}
   1f14a:	079b      	lsls	r3, r3, #30
   1f14c:	d10f      	bne.n	1f16e <stpcpy+0x2a>
   1f14e:	680b      	ldr	r3, [r1, #0]
   1f150:	4a0b      	ldr	r2, [pc, #44]	; (1f180 <stpcpy+0x3c>)
   1f152:	4c0c      	ldr	r4, [pc, #48]	; (1f184 <stpcpy+0x40>)
   1f154:	189a      	adds	r2, r3, r2
   1f156:	439a      	bics	r2, r3
   1f158:	4222      	tst	r2, r4
   1f15a:	d108      	bne.n	1f16e <stpcpy+0x2a>
   1f15c:	3104      	adds	r1, #4
   1f15e:	6003      	str	r3, [r0, #0]
   1f160:	4a07      	ldr	r2, [pc, #28]	; (1f180 <stpcpy+0x3c>)
   1f162:	680b      	ldr	r3, [r1, #0]
   1f164:	3004      	adds	r0, #4
   1f166:	189a      	adds	r2, r3, r2
   1f168:	439a      	bics	r2, r3
   1f16a:	4222      	tst	r2, r4
   1f16c:	d0f6      	beq.n	1f15c <stpcpy+0x18>
   1f16e:	0003      	movs	r3, r0
   1f170:	780a      	ldrb	r2, [r1, #0]
   1f172:	0018      	movs	r0, r3
   1f174:	701a      	strb	r2, [r3, #0]
   1f176:	3101      	adds	r1, #1
   1f178:	3301      	adds	r3, #1
   1f17a:	2a00      	cmp	r2, #0
   1f17c:	d1f8      	bne.n	1f170 <stpcpy+0x2c>
   1f17e:	bd10      	pop	{r4, pc}
   1f180:	fefefeff 	.word	0xfefefeff
   1f184:	80808080 	.word	0x80808080

0001f188 <strcat>:
   1f188:	b570      	push	{r4, r5, r6, lr}
   1f18a:	0005      	movs	r5, r0
   1f18c:	0783      	lsls	r3, r0, #30
   1f18e:	d116      	bne.n	1f1be <strcat+0x36>
   1f190:	6802      	ldr	r2, [r0, #0]
   1f192:	4b0e      	ldr	r3, [pc, #56]	; (1f1cc <strcat+0x44>)
   1f194:	4c0e      	ldr	r4, [pc, #56]	; (1f1d0 <strcat+0x48>)
   1f196:	18d3      	adds	r3, r2, r3
   1f198:	4393      	bics	r3, r2
   1f19a:	4223      	tst	r3, r4
   1f19c:	d10f      	bne.n	1f1be <strcat+0x36>
   1f19e:	3004      	adds	r0, #4
   1f1a0:	6802      	ldr	r2, [r0, #0]
   1f1a2:	4b0a      	ldr	r3, [pc, #40]	; (1f1cc <strcat+0x44>)
   1f1a4:	18d3      	adds	r3, r2, r3
   1f1a6:	4393      	bics	r3, r2
   1f1a8:	4223      	tst	r3, r4
   1f1aa:	d108      	bne.n	1f1be <strcat+0x36>
   1f1ac:	3004      	adds	r0, #4
   1f1ae:	6802      	ldr	r2, [r0, #0]
   1f1b0:	4b06      	ldr	r3, [pc, #24]	; (1f1cc <strcat+0x44>)
   1f1b2:	18d3      	adds	r3, r2, r3
   1f1b4:	4393      	bics	r3, r2
   1f1b6:	4223      	tst	r3, r4
   1f1b8:	d0f1      	beq.n	1f19e <strcat+0x16>
   1f1ba:	e000      	b.n	1f1be <strcat+0x36>
   1f1bc:	3001      	adds	r0, #1
   1f1be:	7803      	ldrb	r3, [r0, #0]
   1f1c0:	2b00      	cmp	r3, #0
   1f1c2:	d1fb      	bne.n	1f1bc <strcat+0x34>
   1f1c4:	f000 f806 	bl	1f1d4 <strcpy>
   1f1c8:	0028      	movs	r0, r5
   1f1ca:	bd70      	pop	{r4, r5, r6, pc}
   1f1cc:	fefefeff 	.word	0xfefefeff
   1f1d0:	80808080 	.word	0x80808080

0001f1d4 <strcpy>:
   1f1d4:	1c03      	adds	r3, r0, #0
   1f1d6:	780a      	ldrb	r2, [r1, #0]
   1f1d8:	3101      	adds	r1, #1
   1f1da:	701a      	strb	r2, [r3, #0]
   1f1dc:	3301      	adds	r3, #1
   1f1de:	2a00      	cmp	r2, #0
   1f1e0:	d1f9      	bne.n	1f1d6 <strcpy+0x2>
   1f1e2:	4770      	bx	lr

0001f1e4 <strlen>:
   1f1e4:	b510      	push	{r4, lr}
   1f1e6:	0783      	lsls	r3, r0, #30
   1f1e8:	d025      	beq.n	1f236 <strlen+0x52>
   1f1ea:	7803      	ldrb	r3, [r0, #0]
   1f1ec:	2b00      	cmp	r3, #0
   1f1ee:	d024      	beq.n	1f23a <strlen+0x56>
   1f1f0:	0003      	movs	r3, r0
   1f1f2:	2103      	movs	r1, #3
   1f1f4:	e002      	b.n	1f1fc <strlen+0x18>
   1f1f6:	781a      	ldrb	r2, [r3, #0]
   1f1f8:	2a00      	cmp	r2, #0
   1f1fa:	d01a      	beq.n	1f232 <strlen+0x4e>
   1f1fc:	3301      	adds	r3, #1
   1f1fe:	420b      	tst	r3, r1
   1f200:	d1f9      	bne.n	1f1f6 <strlen+0x12>
   1f202:	6819      	ldr	r1, [r3, #0]
   1f204:	4a0e      	ldr	r2, [pc, #56]	; (1f240 <strlen+0x5c>)
   1f206:	4c0f      	ldr	r4, [pc, #60]	; (1f244 <strlen+0x60>)
   1f208:	188a      	adds	r2, r1, r2
   1f20a:	438a      	bics	r2, r1
   1f20c:	4222      	tst	r2, r4
   1f20e:	d106      	bne.n	1f21e <strlen+0x3a>
   1f210:	3304      	adds	r3, #4
   1f212:	6819      	ldr	r1, [r3, #0]
   1f214:	4a0a      	ldr	r2, [pc, #40]	; (1f240 <strlen+0x5c>)
   1f216:	188a      	adds	r2, r1, r2
   1f218:	438a      	bics	r2, r1
   1f21a:	4222      	tst	r2, r4
   1f21c:	d0f8      	beq.n	1f210 <strlen+0x2c>
   1f21e:	001a      	movs	r2, r3
   1f220:	781b      	ldrb	r3, [r3, #0]
   1f222:	2b00      	cmp	r3, #0
   1f224:	d003      	beq.n	1f22e <strlen+0x4a>
   1f226:	3201      	adds	r2, #1
   1f228:	7811      	ldrb	r1, [r2, #0]
   1f22a:	2900      	cmp	r1, #0
   1f22c:	d1fb      	bne.n	1f226 <strlen+0x42>
   1f22e:	1a10      	subs	r0, r2, r0
   1f230:	bd10      	pop	{r4, pc}
   1f232:	1a18      	subs	r0, r3, r0
   1f234:	e7fc      	b.n	1f230 <strlen+0x4c>
   1f236:	0003      	movs	r3, r0
   1f238:	e7e3      	b.n	1f202 <strlen+0x1e>
   1f23a:	2000      	movs	r0, #0
   1f23c:	e7f8      	b.n	1f230 <strlen+0x4c>
   1f23e:	46c0      	nop			; (mov r8, r8)
   1f240:	fefefeff 	.word	0xfefefeff
   1f244:	80808080 	.word	0x80808080

0001f248 <_svfprintf_r>:
   1f248:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f24a:	46de      	mov	lr, fp
   1f24c:	4645      	mov	r5, r8
   1f24e:	4657      	mov	r7, sl
   1f250:	464e      	mov	r6, r9
   1f252:	b5e0      	push	{r5, r6, r7, lr}
   1f254:	b0c3      	sub	sp, #268	; 0x10c
   1f256:	000d      	movs	r5, r1
   1f258:	9106      	str	r1, [sp, #24]
   1f25a:	0014      	movs	r4, r2
   1f25c:	930f      	str	r3, [sp, #60]	; 0x3c
   1f25e:	9009      	str	r0, [sp, #36]	; 0x24
   1f260:	f002 fb92 	bl	21988 <_localeconv_r>
   1f264:	6803      	ldr	r3, [r0, #0]
   1f266:	0018      	movs	r0, r3
   1f268:	9319      	str	r3, [sp, #100]	; 0x64
   1f26a:	f7ff ffbb 	bl	1f1e4 <strlen>
   1f26e:	9018      	str	r0, [sp, #96]	; 0x60
   1f270:	89ab      	ldrh	r3, [r5, #12]
   1f272:	061b      	lsls	r3, r3, #24
   1f274:	d505      	bpl.n	1f282 <_svfprintf_r+0x3a>
   1f276:	692b      	ldr	r3, [r5, #16]
   1f278:	9307      	str	r3, [sp, #28]
   1f27a:	2b00      	cmp	r3, #0
   1f27c:	d101      	bne.n	1f282 <_svfprintf_r+0x3a>
   1f27e:	f001 f863 	bl	20348 <_svfprintf_r+0x1100>
   1f282:	ab32      	add	r3, sp, #200	; 0xc8
   1f284:	9325      	str	r3, [sp, #148]	; 0x94
   1f286:	2300      	movs	r3, #0
   1f288:	46a3      	mov	fp, r4
   1f28a:	af25      	add	r7, sp, #148	; 0x94
   1f28c:	60bb      	str	r3, [r7, #8]
   1f28e:	607b      	str	r3, [r7, #4]
   1f290:	9314      	str	r3, [sp, #80]	; 0x50
   1f292:	9316      	str	r3, [sp, #88]	; 0x58
   1f294:	9315      	str	r3, [sp, #84]	; 0x54
   1f296:	ae32      	add	r6, sp, #200	; 0xc8
   1f298:	9317      	str	r3, [sp, #92]	; 0x5c
   1f29a:	931a      	str	r3, [sp, #104]	; 0x68
   1f29c:	930a      	str	r3, [sp, #40]	; 0x28
   1f29e:	465b      	mov	r3, fp
   1f2a0:	781b      	ldrb	r3, [r3, #0]
   1f2a2:	465c      	mov	r4, fp
   1f2a4:	2b00      	cmp	r3, #0
   1f2a6:	d01c      	beq.n	1f2e2 <_svfprintf_r+0x9a>
   1f2a8:	2b25      	cmp	r3, #37	; 0x25
   1f2aa:	d102      	bne.n	1f2b2 <_svfprintf_r+0x6a>
   1f2ac:	e019      	b.n	1f2e2 <_svfprintf_r+0x9a>
   1f2ae:	2b25      	cmp	r3, #37	; 0x25
   1f2b0:	d003      	beq.n	1f2ba <_svfprintf_r+0x72>
   1f2b2:	3401      	adds	r4, #1
   1f2b4:	7823      	ldrb	r3, [r4, #0]
   1f2b6:	2b00      	cmp	r3, #0
   1f2b8:	d1f9      	bne.n	1f2ae <_svfprintf_r+0x66>
   1f2ba:	465b      	mov	r3, fp
   1f2bc:	1ae5      	subs	r5, r4, r3
   1f2be:	d010      	beq.n	1f2e2 <_svfprintf_r+0x9a>
   1f2c0:	465b      	mov	r3, fp
   1f2c2:	6033      	str	r3, [r6, #0]
   1f2c4:	68bb      	ldr	r3, [r7, #8]
   1f2c6:	6075      	str	r5, [r6, #4]
   1f2c8:	195b      	adds	r3, r3, r5
   1f2ca:	60bb      	str	r3, [r7, #8]
   1f2cc:	687b      	ldr	r3, [r7, #4]
   1f2ce:	3301      	adds	r3, #1
   1f2d0:	607b      	str	r3, [r7, #4]
   1f2d2:	2b07      	cmp	r3, #7
   1f2d4:	dc2e      	bgt.n	1f334 <_svfprintf_r+0xec>
   1f2d6:	3608      	adds	r6, #8
   1f2d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1f2da:	469c      	mov	ip, r3
   1f2dc:	44ac      	add	ip, r5
   1f2de:	4663      	mov	r3, ip
   1f2e0:	930a      	str	r3, [sp, #40]	; 0x28
   1f2e2:	7823      	ldrb	r3, [r4, #0]
   1f2e4:	2b00      	cmp	r3, #0
   1f2e6:	d02e      	beq.n	1f346 <_svfprintf_r+0xfe>
   1f2e8:	1c63      	adds	r3, r4, #1
   1f2ea:	469b      	mov	fp, r3
   1f2ec:	2300      	movs	r3, #0
   1f2ee:	aa16      	add	r2, sp, #88	; 0x58
   1f2f0:	77d3      	strb	r3, [r2, #31]
   1f2f2:	2201      	movs	r2, #1
   1f2f4:	4252      	negs	r2, r2
   1f2f6:	4692      	mov	sl, r2
   1f2f8:	2200      	movs	r2, #0
   1f2fa:	2100      	movs	r1, #0
   1f2fc:	920b      	str	r2, [sp, #44]	; 0x2c
   1f2fe:	3220      	adds	r2, #32
   1f300:	4691      	mov	r9, r2
   1f302:	3220      	adds	r2, #32
   1f304:	7863      	ldrb	r3, [r4, #1]
   1f306:	4688      	mov	r8, r1
   1f308:	2000      	movs	r0, #0
   1f30a:	2400      	movs	r4, #0
   1f30c:	4694      	mov	ip, r2
   1f30e:	4659      	mov	r1, fp
   1f310:	3101      	adds	r1, #1
   1f312:	001a      	movs	r2, r3
   1f314:	3a20      	subs	r2, #32
   1f316:	2a58      	cmp	r2, #88	; 0x58
   1f318:	d900      	bls.n	1f31c <_svfprintf_r+0xd4>
   1f31a:	e2fd      	b.n	1f918 <_svfprintf_r+0x6d0>
   1f31c:	4dd7      	ldr	r5, [pc, #860]	; (1f67c <_svfprintf_r+0x434>)
   1f31e:	0092      	lsls	r2, r2, #2
   1f320:	58aa      	ldr	r2, [r5, r2]
   1f322:	4697      	mov	pc, r2
   1f324:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1f326:	920f      	str	r2, [sp, #60]	; 0x3c
   1f328:	425b      	negs	r3, r3
   1f32a:	930b      	str	r3, [sp, #44]	; 0x2c
   1f32c:	2304      	movs	r3, #4
   1f32e:	431c      	orrs	r4, r3
   1f330:	780b      	ldrb	r3, [r1, #0]
   1f332:	e7ed      	b.n	1f310 <_svfprintf_r+0xc8>
   1f334:	003a      	movs	r2, r7
   1f336:	9906      	ldr	r1, [sp, #24]
   1f338:	9809      	ldr	r0, [sp, #36]	; 0x24
   1f33a:	f003 f995 	bl	22668 <__ssprint_r>
   1f33e:	2800      	cmp	r0, #0
   1f340:	d109      	bne.n	1f356 <_svfprintf_r+0x10e>
   1f342:	ae32      	add	r6, sp, #200	; 0xc8
   1f344:	e7c8      	b.n	1f2d8 <_svfprintf_r+0x90>
   1f346:	68bb      	ldr	r3, [r7, #8]
   1f348:	2b00      	cmp	r3, #0
   1f34a:	d004      	beq.n	1f356 <_svfprintf_r+0x10e>
   1f34c:	003a      	movs	r2, r7
   1f34e:	9906      	ldr	r1, [sp, #24]
   1f350:	9809      	ldr	r0, [sp, #36]	; 0x24
   1f352:	f003 f989 	bl	22668 <__ssprint_r>
   1f356:	9b06      	ldr	r3, [sp, #24]
   1f358:	899b      	ldrh	r3, [r3, #12]
   1f35a:	065b      	lsls	r3, r3, #25
   1f35c:	d501      	bpl.n	1f362 <_svfprintf_r+0x11a>
   1f35e:	f001 f8ce 	bl	204fe <_svfprintf_r+0x12b6>
   1f362:	980a      	ldr	r0, [sp, #40]	; 0x28
   1f364:	b043      	add	sp, #268	; 0x10c
   1f366:	bc3c      	pop	{r2, r3, r4, r5}
   1f368:	4690      	mov	r8, r2
   1f36a:	4699      	mov	r9, r3
   1f36c:	46a2      	mov	sl, r4
   1f36e:	46ab      	mov	fp, r5
   1f370:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f372:	2201      	movs	r2, #1
   1f374:	780b      	ldrb	r3, [r1, #0]
   1f376:	4690      	mov	r8, r2
   1f378:	202b      	movs	r0, #43	; 0x2b
   1f37a:	e7c9      	b.n	1f310 <_svfprintf_r+0xc8>
   1f37c:	1c4b      	adds	r3, r1, #1
   1f37e:	469b      	mov	fp, r3
   1f380:	780b      	ldrb	r3, [r1, #0]
   1f382:	2b2a      	cmp	r3, #42	; 0x2a
   1f384:	d101      	bne.n	1f38a <_svfprintf_r+0x142>
   1f386:	f001 fa1b 	bl	207c0 <_svfprintf_r+0x1578>
   1f38a:	001a      	movs	r2, r3
   1f38c:	2100      	movs	r1, #0
   1f38e:	3a30      	subs	r2, #48	; 0x30
   1f390:	468a      	mov	sl, r1
   1f392:	4659      	mov	r1, fp
   1f394:	2a09      	cmp	r2, #9
   1f396:	d8bc      	bhi.n	1f312 <_svfprintf_r+0xca>
   1f398:	0003      	movs	r3, r0
   1f39a:	0011      	movs	r1, r2
   1f39c:	4650      	mov	r0, sl
   1f39e:	465a      	mov	r2, fp
   1f3a0:	469a      	mov	sl, r3
   1f3a2:	46a3      	mov	fp, r4
   1f3a4:	0083      	lsls	r3, r0, #2
   1f3a6:	181b      	adds	r3, r3, r0
   1f3a8:	7814      	ldrb	r4, [r2, #0]
   1f3aa:	005b      	lsls	r3, r3, #1
   1f3ac:	1858      	adds	r0, r3, r1
   1f3ae:	0021      	movs	r1, r4
   1f3b0:	1c53      	adds	r3, r2, #1
   1f3b2:	3930      	subs	r1, #48	; 0x30
   1f3b4:	001a      	movs	r2, r3
   1f3b6:	2909      	cmp	r1, #9
   1f3b8:	d9f4      	bls.n	1f3a4 <_svfprintf_r+0x15c>
   1f3ba:	4652      	mov	r2, sl
   1f3bc:	0019      	movs	r1, r3
   1f3be:	4682      	mov	sl, r0
   1f3c0:	0023      	movs	r3, r4
   1f3c2:	0010      	movs	r0, r2
   1f3c4:	465c      	mov	r4, fp
   1f3c6:	e7a4      	b.n	1f312 <_svfprintf_r+0xca>
   1f3c8:	2380      	movs	r3, #128	; 0x80
   1f3ca:	431c      	orrs	r4, r3
   1f3cc:	780b      	ldrb	r3, [r1, #0]
   1f3ce:	e79f      	b.n	1f310 <_svfprintf_r+0xc8>
   1f3d0:	468b      	mov	fp, r1
   1f3d2:	4641      	mov	r1, r8
   1f3d4:	9312      	str	r3, [sp, #72]	; 0x48
   1f3d6:	2900      	cmp	r1, #0
   1f3d8:	d001      	beq.n	1f3de <_svfprintf_r+0x196>
   1f3da:	f001 fa1f 	bl	2081c <_svfprintf_r+0x15d4>
   1f3de:	2310      	movs	r3, #16
   1f3e0:	431c      	orrs	r4, r3
   1f3e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1f3e4:	06a3      	lsls	r3, r4, #26
   1f3e6:	d501      	bpl.n	1f3ec <_svfprintf_r+0x1a4>
   1f3e8:	f000 fe88 	bl	200fc <_svfprintf_r+0xeb4>
   1f3ec:	06e3      	lsls	r3, r4, #27
   1f3ee:	d501      	bpl.n	1f3f4 <_svfprintf_r+0x1ac>
   1f3f0:	f000 fd80 	bl	1fef4 <_svfprintf_r+0xcac>
   1f3f4:	0663      	lsls	r3, r4, #25
   1f3f6:	d401      	bmi.n	1f3fc <_svfprintf_r+0x1b4>
   1f3f8:	f000 fd7c 	bl	1fef4 <_svfprintf_r+0xcac>
   1f3fc:	2100      	movs	r1, #0
   1f3fe:	5e53      	ldrsh	r3, [r2, r1]
   1f400:	930c      	str	r3, [sp, #48]	; 0x30
   1f402:	3204      	adds	r2, #4
   1f404:	17db      	asrs	r3, r3, #31
   1f406:	930d      	str	r3, [sp, #52]	; 0x34
   1f408:	920f      	str	r2, [sp, #60]	; 0x3c
   1f40a:	d501      	bpl.n	1f410 <_svfprintf_r+0x1c8>
   1f40c:	f000 fe86 	bl	2011c <_svfprintf_r+0xed4>
   1f410:	990c      	ldr	r1, [sp, #48]	; 0x30
   1f412:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1f414:	0008      	movs	r0, r1
   1f416:	ab16      	add	r3, sp, #88	; 0x58
   1f418:	7fdb      	ldrb	r3, [r3, #31]
   1f41a:	4310      	orrs	r0, r2
   1f41c:	4698      	mov	r8, r3
   1f41e:	0002      	movs	r2, r0
   1f420:	2301      	movs	r3, #1
   1f422:	4651      	mov	r1, sl
   1f424:	3101      	adds	r1, #1
   1f426:	d100      	bne.n	1f42a <_svfprintf_r+0x1e2>
   1f428:	e0ff      	b.n	1f62a <_svfprintf_r+0x3e2>
   1f42a:	2180      	movs	r1, #128	; 0x80
   1f42c:	0020      	movs	r0, r4
   1f42e:	4388      	bics	r0, r1
   1f430:	9008      	str	r0, [sp, #32]
   1f432:	2a00      	cmp	r2, #0
   1f434:	d000      	beq.n	1f438 <_svfprintf_r+0x1f0>
   1f436:	e0fc      	b.n	1f632 <_svfprintf_r+0x3ea>
   1f438:	4652      	mov	r2, sl
   1f43a:	2a00      	cmp	r2, #0
   1f43c:	d001      	beq.n	1f442 <_svfprintf_r+0x1fa>
   1f43e:	f000 fc2c 	bl	1fc9a <_svfprintf_r+0xa52>
   1f442:	2b00      	cmp	r3, #0
   1f444:	d001      	beq.n	1f44a <_svfprintf_r+0x202>
   1f446:	f000 fd04 	bl	1fe52 <_svfprintf_r+0xc0a>
   1f44a:	2001      	movs	r0, #1
   1f44c:	ab32      	add	r3, sp, #200	; 0xc8
   1f44e:	4020      	ands	r0, r4
   1f450:	900e      	str	r0, [sp, #56]	; 0x38
   1f452:	9311      	str	r3, [sp, #68]	; 0x44
   1f454:	d008      	beq.n	1f468 <_svfprintf_r+0x220>
   1f456:	2327      	movs	r3, #39	; 0x27
   1f458:	2130      	movs	r1, #48	; 0x30
   1f45a:	aa28      	add	r2, sp, #160	; 0xa0
   1f45c:	54d1      	strb	r1, [r2, r3]
   1f45e:	aa16      	add	r2, sp, #88	; 0x58
   1f460:	4694      	mov	ip, r2
   1f462:	3348      	adds	r3, #72	; 0x48
   1f464:	4463      	add	r3, ip
   1f466:	9311      	str	r3, [sp, #68]	; 0x44
   1f468:	4653      	mov	r3, sl
   1f46a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1f46c:	9307      	str	r3, [sp, #28]
   1f46e:	4592      	cmp	sl, r2
   1f470:	da00      	bge.n	1f474 <_svfprintf_r+0x22c>
   1f472:	9207      	str	r2, [sp, #28]
   1f474:	2300      	movs	r3, #0
   1f476:	9313      	str	r3, [sp, #76]	; 0x4c
   1f478:	4643      	mov	r3, r8
   1f47a:	2b00      	cmp	r3, #0
   1f47c:	d002      	beq.n	1f484 <_svfprintf_r+0x23c>
   1f47e:	9b07      	ldr	r3, [sp, #28]
   1f480:	3301      	adds	r3, #1
   1f482:	9307      	str	r3, [sp, #28]
   1f484:	2302      	movs	r3, #2
   1f486:	9a08      	ldr	r2, [sp, #32]
   1f488:	401a      	ands	r2, r3
   1f48a:	4691      	mov	r9, r2
   1f48c:	d002      	beq.n	1f494 <_svfprintf_r+0x24c>
   1f48e:	9b07      	ldr	r3, [sp, #28]
   1f490:	3302      	adds	r3, #2
   1f492:	9307      	str	r3, [sp, #28]
   1f494:	2384      	movs	r3, #132	; 0x84
   1f496:	9a08      	ldr	r2, [sp, #32]
   1f498:	401a      	ands	r2, r3
   1f49a:	9210      	str	r2, [sp, #64]	; 0x40
   1f49c:	d000      	beq.n	1f4a0 <_svfprintf_r+0x258>
   1f49e:	e24d      	b.n	1f93c <_svfprintf_r+0x6f4>
   1f4a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1f4a2:	9a07      	ldr	r2, [sp, #28]
   1f4a4:	1a9c      	subs	r4, r3, r2
   1f4a6:	2c00      	cmp	r4, #0
   1f4a8:	dc00      	bgt.n	1f4ac <_svfprintf_r+0x264>
   1f4aa:	e247      	b.n	1f93c <_svfprintf_r+0x6f4>
   1f4ac:	4974      	ldr	r1, [pc, #464]	; (1f680 <_svfprintf_r+0x438>)
   1f4ae:	68ba      	ldr	r2, [r7, #8]
   1f4b0:	687b      	ldr	r3, [r7, #4]
   1f4b2:	4688      	mov	r8, r1
   1f4b4:	2c10      	cmp	r4, #16
   1f4b6:	dd1f      	ble.n	1f4f8 <_svfprintf_r+0x2b0>
   1f4b8:	0031      	movs	r1, r6
   1f4ba:	2510      	movs	r5, #16
   1f4bc:	4646      	mov	r6, r8
   1f4be:	e003      	b.n	1f4c8 <_svfprintf_r+0x280>
   1f4c0:	3c10      	subs	r4, #16
   1f4c2:	3108      	adds	r1, #8
   1f4c4:	2c10      	cmp	r4, #16
   1f4c6:	dd15      	ble.n	1f4f4 <_svfprintf_r+0x2ac>
   1f4c8:	3210      	adds	r2, #16
   1f4ca:	3301      	adds	r3, #1
   1f4cc:	600e      	str	r6, [r1, #0]
   1f4ce:	604d      	str	r5, [r1, #4]
   1f4d0:	60ba      	str	r2, [r7, #8]
   1f4d2:	607b      	str	r3, [r7, #4]
   1f4d4:	2b07      	cmp	r3, #7
   1f4d6:	ddf3      	ble.n	1f4c0 <_svfprintf_r+0x278>
   1f4d8:	003a      	movs	r2, r7
   1f4da:	9906      	ldr	r1, [sp, #24]
   1f4dc:	9809      	ldr	r0, [sp, #36]	; 0x24
   1f4de:	f003 f8c3 	bl	22668 <__ssprint_r>
   1f4e2:	2800      	cmp	r0, #0
   1f4e4:	d000      	beq.n	1f4e8 <_svfprintf_r+0x2a0>
   1f4e6:	e736      	b.n	1f356 <_svfprintf_r+0x10e>
   1f4e8:	3c10      	subs	r4, #16
   1f4ea:	68ba      	ldr	r2, [r7, #8]
   1f4ec:	687b      	ldr	r3, [r7, #4]
   1f4ee:	a932      	add	r1, sp, #200	; 0xc8
   1f4f0:	2c10      	cmp	r4, #16
   1f4f2:	dce9      	bgt.n	1f4c8 <_svfprintf_r+0x280>
   1f4f4:	46b0      	mov	r8, r6
   1f4f6:	000e      	movs	r6, r1
   1f4f8:	4641      	mov	r1, r8
   1f4fa:	6074      	str	r4, [r6, #4]
   1f4fc:	3301      	adds	r3, #1
   1f4fe:	18a4      	adds	r4, r4, r2
   1f500:	6031      	str	r1, [r6, #0]
   1f502:	60bc      	str	r4, [r7, #8]
   1f504:	607b      	str	r3, [r7, #4]
   1f506:	2b07      	cmp	r3, #7
   1f508:	dd01      	ble.n	1f50e <_svfprintf_r+0x2c6>
   1f50a:	f000 fca8 	bl	1fe5e <_svfprintf_r+0xc16>
   1f50e:	ab16      	add	r3, sp, #88	; 0x58
   1f510:	7fdb      	ldrb	r3, [r3, #31]
   1f512:	3608      	adds	r6, #8
   1f514:	4698      	mov	r8, r3
   1f516:	e212      	b.n	1f93e <_svfprintf_r+0x6f6>
   1f518:	468b      	mov	fp, r1
   1f51a:	4641      	mov	r1, r8
   1f51c:	9312      	str	r3, [sp, #72]	; 0x48
   1f51e:	2900      	cmp	r1, #0
   1f520:	d001      	beq.n	1f526 <_svfprintf_r+0x2de>
   1f522:	f001 f977 	bl	20814 <_svfprintf_r+0x15cc>
   1f526:	2207      	movs	r2, #7
   1f528:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1f52a:	3307      	adds	r3, #7
   1f52c:	4393      	bics	r3, r2
   1f52e:	3201      	adds	r2, #1
   1f530:	4694      	mov	ip, r2
   1f532:	449c      	add	ip, r3
   1f534:	4662      	mov	r2, ip
   1f536:	920f      	str	r2, [sp, #60]	; 0x3c
   1f538:	681a      	ldr	r2, [r3, #0]
   1f53a:	9216      	str	r2, [sp, #88]	; 0x58
   1f53c:	685b      	ldr	r3, [r3, #4]
   1f53e:	2201      	movs	r2, #1
   1f540:	9315      	str	r3, [sp, #84]	; 0x54
   1f542:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1f544:	9d16      	ldr	r5, [sp, #88]	; 0x58
   1f546:	005b      	lsls	r3, r3, #1
   1f548:	085b      	lsrs	r3, r3, #1
   1f54a:	4698      	mov	r8, r3
   1f54c:	4252      	negs	r2, r2
   1f54e:	4b4d      	ldr	r3, [pc, #308]	; (1f684 <_svfprintf_r+0x43c>)
   1f550:	0028      	movs	r0, r5
   1f552:	4641      	mov	r1, r8
   1f554:	f7ff fb74 	bl	1ec40 <__aeabi_dcmpun>
   1f558:	2800      	cmp	r0, #0
   1f55a:	d001      	beq.n	1f560 <_svfprintf_r+0x318>
   1f55c:	f000 fdfd 	bl	2015a <_svfprintf_r+0xf12>
   1f560:	2201      	movs	r2, #1
   1f562:	4b48      	ldr	r3, [pc, #288]	; (1f684 <_svfprintf_r+0x43c>)
   1f564:	4252      	negs	r2, r2
   1f566:	0028      	movs	r0, r5
   1f568:	4641      	mov	r1, r8
   1f56a:	f7fc fea5 	bl	1c2b8 <__aeabi_dcmple>
   1f56e:	2800      	cmp	r0, #0
   1f570:	d001      	beq.n	1f576 <_svfprintf_r+0x32e>
   1f572:	f000 fdf2 	bl	2015a <_svfprintf_r+0xf12>
   1f576:	2200      	movs	r2, #0
   1f578:	2300      	movs	r3, #0
   1f57a:	9816      	ldr	r0, [sp, #88]	; 0x58
   1f57c:	9915      	ldr	r1, [sp, #84]	; 0x54
   1f57e:	f7fc fe91 	bl	1c2a4 <__aeabi_dcmplt>
   1f582:	2800      	cmp	r0, #0
   1f584:	d001      	beq.n	1f58a <_svfprintf_r+0x342>
   1f586:	f001 f822 	bl	205ce <_svfprintf_r+0x1386>
   1f58a:	ab16      	add	r3, sp, #88	; 0x58
   1f58c:	7fdb      	ldrb	r3, [r3, #31]
   1f58e:	4698      	mov	r8, r3
   1f590:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1f592:	2b47      	cmp	r3, #71	; 0x47
   1f594:	dd01      	ble.n	1f59a <_svfprintf_r+0x352>
   1f596:	f000 fec7 	bl	20328 <_svfprintf_r+0x10e0>
   1f59a:	4b3b      	ldr	r3, [pc, #236]	; (1f688 <_svfprintf_r+0x440>)
   1f59c:	9311      	str	r3, [sp, #68]	; 0x44
   1f59e:	2380      	movs	r3, #128	; 0x80
   1f5a0:	439c      	bics	r4, r3
   1f5a2:	3b7d      	subs	r3, #125	; 0x7d
   1f5a4:	9307      	str	r3, [sp, #28]
   1f5a6:	930e      	str	r3, [sp, #56]	; 0x38
   1f5a8:	2300      	movs	r3, #0
   1f5aa:	9408      	str	r4, [sp, #32]
   1f5ac:	469a      	mov	sl, r3
   1f5ae:	9313      	str	r3, [sp, #76]	; 0x4c
   1f5b0:	e762      	b.n	1f478 <_svfprintf_r+0x230>
   1f5b2:	2200      	movs	r2, #0
   1f5b4:	3b30      	subs	r3, #48	; 0x30
   1f5b6:	0015      	movs	r5, r2
   1f5b8:	001a      	movs	r2, r3
   1f5ba:	0003      	movs	r3, r0
   1f5bc:	9407      	str	r4, [sp, #28]
   1f5be:	0008      	movs	r0, r1
   1f5c0:	002c      	movs	r4, r5
   1f5c2:	469b      	mov	fp, r3
   1f5c4:	00a3      	lsls	r3, r4, #2
   1f5c6:	191c      	adds	r4, r3, r4
   1f5c8:	7803      	ldrb	r3, [r0, #0]
   1f5ca:	0064      	lsls	r4, r4, #1
   1f5cc:	1914      	adds	r4, r2, r4
   1f5ce:	001a      	movs	r2, r3
   1f5d0:	3101      	adds	r1, #1
   1f5d2:	3a30      	subs	r2, #48	; 0x30
   1f5d4:	0008      	movs	r0, r1
   1f5d6:	2a09      	cmp	r2, #9
   1f5d8:	d9f4      	bls.n	1f5c4 <_svfprintf_r+0x37c>
   1f5da:	940b      	str	r4, [sp, #44]	; 0x2c
   1f5dc:	4658      	mov	r0, fp
   1f5de:	9c07      	ldr	r4, [sp, #28]
   1f5e0:	e697      	b.n	1f312 <_svfprintf_r+0xca>
   1f5e2:	2308      	movs	r3, #8
   1f5e4:	431c      	orrs	r4, r3
   1f5e6:	780b      	ldrb	r3, [r1, #0]
   1f5e8:	e692      	b.n	1f310 <_svfprintf_r+0xc8>
   1f5ea:	9312      	str	r3, [sp, #72]	; 0x48
   1f5ec:	2310      	movs	r3, #16
   1f5ee:	431c      	orrs	r4, r3
   1f5f0:	468b      	mov	fp, r1
   1f5f2:	06a3      	lsls	r3, r4, #26
   1f5f4:	d500      	bpl.n	1f5f8 <_svfprintf_r+0x3b0>
   1f5f6:	e17b      	b.n	1f8f0 <_svfprintf_r+0x6a8>
   1f5f8:	06e3      	lsls	r3, r4, #27
   1f5fa:	d501      	bpl.n	1f600 <_svfprintf_r+0x3b8>
   1f5fc:	f000 fc7e 	bl	1fefc <_svfprintf_r+0xcb4>
   1f600:	0663      	lsls	r3, r4, #25
   1f602:	d401      	bmi.n	1f608 <_svfprintf_r+0x3c0>
   1f604:	f000 fc7a 	bl	1fefc <_svfprintf_r+0xcb4>
   1f608:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1f60a:	881a      	ldrh	r2, [r3, #0]
   1f60c:	920c      	str	r2, [sp, #48]	; 0x30
   1f60e:	2200      	movs	r2, #0
   1f610:	3304      	adds	r3, #4
   1f612:	930f      	str	r3, [sp, #60]	; 0x3c
   1f614:	2300      	movs	r3, #0
   1f616:	920d      	str	r2, [sp, #52]	; 0x34
   1f618:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1f61a:	2100      	movs	r1, #0
   1f61c:	a816      	add	r0, sp, #88	; 0x58
   1f61e:	77c1      	strb	r1, [r0, #31]
   1f620:	4688      	mov	r8, r1
   1f622:	4651      	mov	r1, sl
   1f624:	3101      	adds	r1, #1
   1f626:	d000      	beq.n	1f62a <_svfprintf_r+0x3e2>
   1f628:	e6ff      	b.n	1f42a <_svfprintf_r+0x1e2>
   1f62a:	2a00      	cmp	r2, #0
   1f62c:	d100      	bne.n	1f630 <_svfprintf_r+0x3e8>
   1f62e:	e335      	b.n	1fc9c <_svfprintf_r+0xa54>
   1f630:	9408      	str	r4, [sp, #32]
   1f632:	2b01      	cmp	r3, #1
   1f634:	d100      	bne.n	1f638 <_svfprintf_r+0x3f0>
   1f636:	e3e5      	b.n	1fe04 <_svfprintf_r+0xbbc>
   1f638:	2b02      	cmp	r3, #2
   1f63a:	d000      	beq.n	1f63e <_svfprintf_r+0x3f6>
   1f63c:	e362      	b.n	1fd04 <_svfprintf_r+0xabc>
   1f63e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   1f640:	200f      	movs	r0, #15
   1f642:	46a1      	mov	r9, r4
   1f644:	46b4      	mov	ip, r6
   1f646:	ab32      	add	r3, sp, #200	; 0xc8
   1f648:	0019      	movs	r1, r3
   1f64a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1f64c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1f64e:	0004      	movs	r4, r0
   1f650:	464d      	mov	r5, r9
   1f652:	4014      	ands	r4, r2
   1f654:	5d2c      	ldrb	r4, [r5, r4]
   1f656:	071e      	lsls	r6, r3, #28
   1f658:	0915      	lsrs	r5, r2, #4
   1f65a:	3901      	subs	r1, #1
   1f65c:	432e      	orrs	r6, r5
   1f65e:	700c      	strb	r4, [r1, #0]
   1f660:	091c      	lsrs	r4, r3, #4
   1f662:	0023      	movs	r3, r4
   1f664:	0034      	movs	r4, r6
   1f666:	0032      	movs	r2, r6
   1f668:	431c      	orrs	r4, r3
   1f66a:	d1f0      	bne.n	1f64e <_svfprintf_r+0x406>
   1f66c:	920c      	str	r2, [sp, #48]	; 0x30
   1f66e:	930d      	str	r3, [sp, #52]	; 0x34
   1f670:	ab32      	add	r3, sp, #200	; 0xc8
   1f672:	1a5b      	subs	r3, r3, r1
   1f674:	9111      	str	r1, [sp, #68]	; 0x44
   1f676:	4666      	mov	r6, ip
   1f678:	930e      	str	r3, [sp, #56]	; 0x38
   1f67a:	e6f5      	b.n	1f468 <_svfprintf_r+0x220>
   1f67c:	000251d4 	.word	0x000251d4
   1f680:	0002537c 	.word	0x0002537c
   1f684:	7fefffff 	.word	0x7fefffff
   1f688:	00025338 	.word	0x00025338
   1f68c:	9312      	str	r3, [sp, #72]	; 0x48
   1f68e:	2310      	movs	r3, #16
   1f690:	431c      	orrs	r4, r3
   1f692:	468b      	mov	fp, r1
   1f694:	06a3      	lsls	r3, r4, #26
   1f696:	d500      	bpl.n	1f69a <_svfprintf_r+0x452>
   1f698:	e111      	b.n	1f8be <_svfprintf_r+0x676>
   1f69a:	06e3      	lsls	r3, r4, #27
   1f69c:	d501      	bpl.n	1f6a2 <_svfprintf_r+0x45a>
   1f69e:	f000 fc31 	bl	1ff04 <_svfprintf_r+0xcbc>
   1f6a2:	0663      	lsls	r3, r4, #25
   1f6a4:	d401      	bmi.n	1f6aa <_svfprintf_r+0x462>
   1f6a6:	f000 fc2d 	bl	1ff04 <_svfprintf_r+0xcbc>
   1f6aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1f6ac:	881a      	ldrh	r2, [r3, #0]
   1f6ae:	920c      	str	r2, [sp, #48]	; 0x30
   1f6b0:	2200      	movs	r2, #0
   1f6b2:	3304      	adds	r3, #4
   1f6b4:	920d      	str	r2, [sp, #52]	; 0x34
   1f6b6:	930f      	str	r3, [sp, #60]	; 0x3c
   1f6b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1f6ba:	2301      	movs	r3, #1
   1f6bc:	e7ad      	b.n	1f61a <_svfprintf_r+0x3d2>
   1f6be:	468b      	mov	fp, r1
   1f6c0:	4641      	mov	r1, r8
   1f6c2:	9312      	str	r3, [sp, #72]	; 0x48
   1f6c4:	2900      	cmp	r1, #0
   1f6c6:	d001      	beq.n	1f6cc <_svfprintf_r+0x484>
   1f6c8:	f001 f890 	bl	207ec <_svfprintf_r+0x15a4>
   1f6cc:	4bb8      	ldr	r3, [pc, #736]	; (1f9b0 <_svfprintf_r+0x768>)
   1f6ce:	9317      	str	r3, [sp, #92]	; 0x5c
   1f6d0:	06a3      	lsls	r3, r4, #26
   1f6d2:	d500      	bpl.n	1f6d6 <_svfprintf_r+0x48e>
   1f6d4:	e0ab      	b.n	1f82e <_svfprintf_r+0x5e6>
   1f6d6:	06e3      	lsls	r3, r4, #27
   1f6d8:	d501      	bpl.n	1f6de <_svfprintf_r+0x496>
   1f6da:	f000 fc07 	bl	1feec <_svfprintf_r+0xca4>
   1f6de:	0663      	lsls	r3, r4, #25
   1f6e0:	d401      	bmi.n	1f6e6 <_svfprintf_r+0x49e>
   1f6e2:	f000 fc03 	bl	1feec <_svfprintf_r+0xca4>
   1f6e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1f6e8:	881a      	ldrh	r2, [r3, #0]
   1f6ea:	920c      	str	r2, [sp, #48]	; 0x30
   1f6ec:	2200      	movs	r2, #0
   1f6ee:	3304      	adds	r3, #4
   1f6f0:	920d      	str	r2, [sp, #52]	; 0x34
   1f6f2:	930f      	str	r3, [sp, #60]	; 0x3c
   1f6f4:	07e3      	lsls	r3, r4, #31
   1f6f6:	d400      	bmi.n	1f6fa <_svfprintf_r+0x4b2>
   1f6f8:	e0a9      	b.n	1f84e <_svfprintf_r+0x606>
   1f6fa:	990c      	ldr	r1, [sp, #48]	; 0x30
   1f6fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1f6fe:	000b      	movs	r3, r1
   1f700:	4313      	orrs	r3, r2
   1f702:	001a      	movs	r2, r3
   1f704:	2302      	movs	r3, #2
   1f706:	2a00      	cmp	r2, #0
   1f708:	d100      	bne.n	1f70c <_svfprintf_r+0x4c4>
   1f70a:	e786      	b.n	1f61a <_svfprintf_r+0x3d2>
   1f70c:	2030      	movs	r0, #48	; 0x30
   1f70e:	a91e      	add	r1, sp, #120	; 0x78
   1f710:	7008      	strb	r0, [r1, #0]
   1f712:	2548      	movs	r5, #72	; 0x48
   1f714:	4668      	mov	r0, sp
   1f716:	1940      	adds	r0, r0, r5
   1f718:	7800      	ldrb	r0, [r0, #0]
   1f71a:	431c      	orrs	r4, r3
   1f71c:	7048      	strb	r0, [r1, #1]
   1f71e:	e77c      	b.n	1f61a <_svfprintf_r+0x3d2>
   1f720:	468b      	mov	fp, r1
   1f722:	4641      	mov	r1, r8
   1f724:	2900      	cmp	r1, #0
   1f726:	d001      	beq.n	1f72c <_svfprintf_r+0x4e4>
   1f728:	f001 f883 	bl	20832 <_svfprintf_r+0x15ea>
   1f72c:	06a3      	lsls	r3, r4, #26
   1f72e:	d501      	bpl.n	1f734 <_svfprintf_r+0x4ec>
   1f730:	f000 fde9 	bl	20306 <_svfprintf_r+0x10be>
   1f734:	06e3      	lsls	r3, r4, #27
   1f736:	d501      	bpl.n	1f73c <_svfprintf_r+0x4f4>
   1f738:	f000 fd9b 	bl	20272 <_svfprintf_r+0x102a>
   1f73c:	0663      	lsls	r3, r4, #25
   1f73e:	d401      	bmi.n	1f744 <_svfprintf_r+0x4fc>
   1f740:	f000 fd97 	bl	20272 <_svfprintf_r+0x102a>
   1f744:	4669      	mov	r1, sp
   1f746:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1f748:	8d09      	ldrh	r1, [r1, #40]	; 0x28
   1f74a:	681a      	ldr	r2, [r3, #0]
   1f74c:	3304      	adds	r3, #4
   1f74e:	9207      	str	r2, [sp, #28]
   1f750:	8011      	strh	r1, [r2, #0]
   1f752:	930f      	str	r3, [sp, #60]	; 0x3c
   1f754:	e5a3      	b.n	1f29e <_svfprintf_r+0x56>
   1f756:	464b      	mov	r3, r9
   1f758:	431c      	orrs	r4, r3
   1f75a:	780b      	ldrb	r3, [r1, #0]
   1f75c:	e5d8      	b.n	1f310 <_svfprintf_r+0xc8>
   1f75e:	9312      	str	r3, [sp, #72]	; 0x48
   1f760:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1f762:	468b      	mov	fp, r1
   1f764:	1d1d      	adds	r5, r3, #4
   1f766:	681b      	ldr	r3, [r3, #0]
   1f768:	a916      	add	r1, sp, #88	; 0x58
   1f76a:	001a      	movs	r2, r3
   1f76c:	9311      	str	r3, [sp, #68]	; 0x44
   1f76e:	2300      	movs	r3, #0
   1f770:	77cb      	strb	r3, [r1, #31]
   1f772:	2a00      	cmp	r2, #0
   1f774:	d101      	bne.n	1f77a <_svfprintf_r+0x532>
   1f776:	f000 fefb 	bl	20570 <_svfprintf_r+0x1328>
   1f77a:	4653      	mov	r3, sl
   1f77c:	3301      	adds	r3, #1
   1f77e:	d101      	bne.n	1f784 <_svfprintf_r+0x53c>
   1f780:	f000 fe38 	bl	203f4 <_svfprintf_r+0x11ac>
   1f784:	4652      	mov	r2, sl
   1f786:	2100      	movs	r1, #0
   1f788:	9811      	ldr	r0, [sp, #68]	; 0x44
   1f78a:	f002 fbc3 	bl	21f14 <memchr>
   1f78e:	2800      	cmp	r0, #0
   1f790:	d101      	bne.n	1f796 <_svfprintf_r+0x54e>
   1f792:	f000 ff54 	bl	2063e <_svfprintf_r+0x13f6>
   1f796:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1f798:	1ac3      	subs	r3, r0, r3
   1f79a:	001a      	movs	r2, r3
   1f79c:	930e      	str	r3, [sp, #56]	; 0x38
   1f79e:	43db      	mvns	r3, r3
   1f7a0:	17db      	asrs	r3, r3, #31
   1f7a2:	401a      	ands	r2, r3
   1f7a4:	ab16      	add	r3, sp, #88	; 0x58
   1f7a6:	7fdb      	ldrb	r3, [r3, #31]
   1f7a8:	9207      	str	r2, [sp, #28]
   1f7aa:	4698      	mov	r8, r3
   1f7ac:	2300      	movs	r3, #0
   1f7ae:	950f      	str	r5, [sp, #60]	; 0x3c
   1f7b0:	9408      	str	r4, [sp, #32]
   1f7b2:	469a      	mov	sl, r3
   1f7b4:	9313      	str	r3, [sp, #76]	; 0x4c
   1f7b6:	e65f      	b.n	1f478 <_svfprintf_r+0x230>
   1f7b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1f7ba:	9312      	str	r3, [sp, #72]	; 0x48
   1f7bc:	6813      	ldr	r3, [r2, #0]
   1f7be:	ad28      	add	r5, sp, #160	; 0xa0
   1f7c0:	9307      	str	r3, [sp, #28]
   1f7c2:	466b      	mov	r3, sp
   1f7c4:	7f1b      	ldrb	r3, [r3, #28]
   1f7c6:	468b      	mov	fp, r1
   1f7c8:	702b      	strb	r3, [r5, #0]
   1f7ca:	2300      	movs	r3, #0
   1f7cc:	a916      	add	r1, sp, #88	; 0x58
   1f7ce:	77cb      	strb	r3, [r1, #31]
   1f7d0:	0013      	movs	r3, r2
   1f7d2:	3304      	adds	r3, #4
   1f7d4:	930f      	str	r3, [sp, #60]	; 0x3c
   1f7d6:	2300      	movs	r3, #0
   1f7d8:	9408      	str	r4, [sp, #32]
   1f7da:	4698      	mov	r8, r3
   1f7dc:	3301      	adds	r3, #1
   1f7de:	9307      	str	r3, [sp, #28]
   1f7e0:	930e      	str	r3, [sp, #56]	; 0x38
   1f7e2:	2300      	movs	r3, #0
   1f7e4:	9511      	str	r5, [sp, #68]	; 0x44
   1f7e6:	469a      	mov	sl, r3
   1f7e8:	9313      	str	r3, [sp, #76]	; 0x4c
   1f7ea:	e64b      	b.n	1f484 <_svfprintf_r+0x23c>
   1f7ec:	468b      	mov	fp, r1
   1f7ee:	4641      	mov	r1, r8
   1f7f0:	9312      	str	r3, [sp, #72]	; 0x48
   1f7f2:	2900      	cmp	r1, #0
   1f7f4:	d100      	bne.n	1f7f8 <_svfprintf_r+0x5b0>
   1f7f6:	e5f4      	b.n	1f3e2 <_svfprintf_r+0x19a>
   1f7f8:	ab16      	add	r3, sp, #88	; 0x58
   1f7fa:	77d8      	strb	r0, [r3, #31]
   1f7fc:	e5f1      	b.n	1f3e2 <_svfprintf_r+0x19a>
   1f7fe:	4663      	mov	r3, ip
   1f800:	431c      	orrs	r4, r3
   1f802:	780b      	ldrb	r3, [r1, #0]
   1f804:	e584      	b.n	1f310 <_svfprintf_r+0xc8>
   1f806:	780b      	ldrb	r3, [r1, #0]
   1f808:	2b6c      	cmp	r3, #108	; 0x6c
   1f80a:	d101      	bne.n	1f810 <_svfprintf_r+0x5c8>
   1f80c:	f000 fd86 	bl	2031c <_svfprintf_r+0x10d4>
   1f810:	2210      	movs	r2, #16
   1f812:	4314      	orrs	r4, r2
   1f814:	e57c      	b.n	1f310 <_svfprintf_r+0xc8>
   1f816:	468b      	mov	fp, r1
   1f818:	4641      	mov	r1, r8
   1f81a:	9312      	str	r3, [sp, #72]	; 0x48
   1f81c:	2900      	cmp	r1, #0
   1f81e:	d001      	beq.n	1f824 <_svfprintf_r+0x5dc>
   1f820:	f000 ffe8 	bl	207f4 <_svfprintf_r+0x15ac>
   1f824:	4b63      	ldr	r3, [pc, #396]	; (1f9b4 <_svfprintf_r+0x76c>)
   1f826:	9317      	str	r3, [sp, #92]	; 0x5c
   1f828:	06a3      	lsls	r3, r4, #26
   1f82a:	d400      	bmi.n	1f82e <_svfprintf_r+0x5e6>
   1f82c:	e753      	b.n	1f6d6 <_svfprintf_r+0x48e>
   1f82e:	2207      	movs	r2, #7
   1f830:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1f832:	3307      	adds	r3, #7
   1f834:	4393      	bics	r3, r2
   1f836:	3201      	adds	r2, #1
   1f838:	4694      	mov	ip, r2
   1f83a:	449c      	add	ip, r3
   1f83c:	4662      	mov	r2, ip
   1f83e:	920f      	str	r2, [sp, #60]	; 0x3c
   1f840:	681a      	ldr	r2, [r3, #0]
   1f842:	685b      	ldr	r3, [r3, #4]
   1f844:	920c      	str	r2, [sp, #48]	; 0x30
   1f846:	930d      	str	r3, [sp, #52]	; 0x34
   1f848:	07e3      	lsls	r3, r4, #31
   1f84a:	d500      	bpl.n	1f84e <_svfprintf_r+0x606>
   1f84c:	e755      	b.n	1f6fa <_svfprintf_r+0x4b2>
   1f84e:	990c      	ldr	r1, [sp, #48]	; 0x30
   1f850:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1f852:	0008      	movs	r0, r1
   1f854:	4310      	orrs	r0, r2
   1f856:	2302      	movs	r3, #2
   1f858:	0002      	movs	r2, r0
   1f85a:	e6de      	b.n	1f61a <_svfprintf_r+0x3d2>
   1f85c:	468b      	mov	fp, r1
   1f85e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1f860:	2230      	movs	r2, #48	; 0x30
   1f862:	680b      	ldr	r3, [r1, #0]
   1f864:	930c      	str	r3, [sp, #48]	; 0x30
   1f866:	2300      	movs	r3, #0
   1f868:	930d      	str	r3, [sp, #52]	; 0x34
   1f86a:	3302      	adds	r3, #2
   1f86c:	431c      	orrs	r4, r3
   1f86e:	ab1e      	add	r3, sp, #120	; 0x78
   1f870:	701a      	strb	r2, [r3, #0]
   1f872:	3248      	adds	r2, #72	; 0x48
   1f874:	705a      	strb	r2, [r3, #1]
   1f876:	000b      	movs	r3, r1
   1f878:	3304      	adds	r3, #4
   1f87a:	930f      	str	r3, [sp, #60]	; 0x3c
   1f87c:	4b4d      	ldr	r3, [pc, #308]	; (1f9b4 <_svfprintf_r+0x76c>)
   1f87e:	9212      	str	r2, [sp, #72]	; 0x48
   1f880:	9317      	str	r3, [sp, #92]	; 0x5c
   1f882:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1f884:	2302      	movs	r3, #2
   1f886:	e6c8      	b.n	1f61a <_svfprintf_r+0x3d2>
   1f888:	2301      	movs	r3, #1
   1f88a:	431c      	orrs	r4, r3
   1f88c:	780b      	ldrb	r3, [r1, #0]
   1f88e:	e53f      	b.n	1f310 <_svfprintf_r+0xc8>
   1f890:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1f892:	1d1a      	adds	r2, r3, #4
   1f894:	681b      	ldr	r3, [r3, #0]
   1f896:	930b      	str	r3, [sp, #44]	; 0x2c
   1f898:	2b00      	cmp	r3, #0
   1f89a:	da00      	bge.n	1f89e <_svfprintf_r+0x656>
   1f89c:	e542      	b.n	1f324 <_svfprintf_r+0xdc>
   1f89e:	780b      	ldrb	r3, [r1, #0]
   1f8a0:	920f      	str	r2, [sp, #60]	; 0x3c
   1f8a2:	e535      	b.n	1f310 <_svfprintf_r+0xc8>
   1f8a4:	780b      	ldrb	r3, [r1, #0]
   1f8a6:	2800      	cmp	r0, #0
   1f8a8:	d000      	beq.n	1f8ac <_svfprintf_r+0x664>
   1f8aa:	e531      	b.n	1f310 <_svfprintf_r+0xc8>
   1f8ac:	2201      	movs	r2, #1
   1f8ae:	3020      	adds	r0, #32
   1f8b0:	4690      	mov	r8, r2
   1f8b2:	e52d      	b.n	1f310 <_svfprintf_r+0xc8>
   1f8b4:	468b      	mov	fp, r1
   1f8b6:	9312      	str	r3, [sp, #72]	; 0x48
   1f8b8:	06a3      	lsls	r3, r4, #26
   1f8ba:	d400      	bmi.n	1f8be <_svfprintf_r+0x676>
   1f8bc:	e6ed      	b.n	1f69a <_svfprintf_r+0x452>
   1f8be:	2207      	movs	r2, #7
   1f8c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1f8c2:	3307      	adds	r3, #7
   1f8c4:	4393      	bics	r3, r2
   1f8c6:	3201      	adds	r2, #1
   1f8c8:	4694      	mov	ip, r2
   1f8ca:	449c      	add	ip, r3
   1f8cc:	4662      	mov	r2, ip
   1f8ce:	920f      	str	r2, [sp, #60]	; 0x3c
   1f8d0:	681a      	ldr	r2, [r3, #0]
   1f8d2:	685b      	ldr	r3, [r3, #4]
   1f8d4:	0011      	movs	r1, r2
   1f8d6:	001a      	movs	r2, r3
   1f8d8:	0008      	movs	r0, r1
   1f8da:	4310      	orrs	r0, r2
   1f8dc:	910c      	str	r1, [sp, #48]	; 0x30
   1f8de:	920d      	str	r2, [sp, #52]	; 0x34
   1f8e0:	2301      	movs	r3, #1
   1f8e2:	0002      	movs	r2, r0
   1f8e4:	e699      	b.n	1f61a <_svfprintf_r+0x3d2>
   1f8e6:	468b      	mov	fp, r1
   1f8e8:	9312      	str	r3, [sp, #72]	; 0x48
   1f8ea:	06a3      	lsls	r3, r4, #26
   1f8ec:	d400      	bmi.n	1f8f0 <_svfprintf_r+0x6a8>
   1f8ee:	e683      	b.n	1f5f8 <_svfprintf_r+0x3b0>
   1f8f0:	2207      	movs	r2, #7
   1f8f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1f8f4:	3307      	adds	r3, #7
   1f8f6:	4393      	bics	r3, r2
   1f8f8:	3201      	adds	r2, #1
   1f8fa:	4694      	mov	ip, r2
   1f8fc:	449c      	add	ip, r3
   1f8fe:	4662      	mov	r2, ip
   1f900:	920f      	str	r2, [sp, #60]	; 0x3c
   1f902:	681a      	ldr	r2, [r3, #0]
   1f904:	685b      	ldr	r3, [r3, #4]
   1f906:	0011      	movs	r1, r2
   1f908:	001a      	movs	r2, r3
   1f90a:	0008      	movs	r0, r1
   1f90c:	4310      	orrs	r0, r2
   1f90e:	910c      	str	r1, [sp, #48]	; 0x30
   1f910:	920d      	str	r2, [sp, #52]	; 0x34
   1f912:	2300      	movs	r3, #0
   1f914:	0002      	movs	r2, r0
   1f916:	e680      	b.n	1f61a <_svfprintf_r+0x3d2>
   1f918:	468b      	mov	fp, r1
   1f91a:	4641      	mov	r1, r8
   1f91c:	9312      	str	r3, [sp, #72]	; 0x48
   1f91e:	2900      	cmp	r1, #0
   1f920:	d001      	beq.n	1f926 <_svfprintf_r+0x6de>
   1f922:	f000 ff7f 	bl	20824 <_svfprintf_r+0x15dc>
   1f926:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1f928:	2b00      	cmp	r3, #0
   1f92a:	d100      	bne.n	1f92e <_svfprintf_r+0x6e6>
   1f92c:	e50b      	b.n	1f346 <_svfprintf_r+0xfe>
   1f92e:	ad28      	add	r5, sp, #160	; 0xa0
   1f930:	702b      	strb	r3, [r5, #0]
   1f932:	2300      	movs	r3, #0
   1f934:	aa16      	add	r2, sp, #88	; 0x58
   1f936:	77d3      	strb	r3, [r2, #31]
   1f938:	9408      	str	r4, [sp, #32]
   1f93a:	e74e      	b.n	1f7da <_svfprintf_r+0x592>
   1f93c:	68bc      	ldr	r4, [r7, #8]
   1f93e:	4643      	mov	r3, r8
   1f940:	2b00      	cmp	r3, #0
   1f942:	d00f      	beq.n	1f964 <_svfprintf_r+0x71c>
   1f944:	aa16      	add	r2, sp, #88	; 0x58
   1f946:	231f      	movs	r3, #31
   1f948:	4694      	mov	ip, r2
   1f94a:	4463      	add	r3, ip
   1f94c:	6033      	str	r3, [r6, #0]
   1f94e:	2301      	movs	r3, #1
   1f950:	6073      	str	r3, [r6, #4]
   1f952:	687b      	ldr	r3, [r7, #4]
   1f954:	3401      	adds	r4, #1
   1f956:	3301      	adds	r3, #1
   1f958:	60bc      	str	r4, [r7, #8]
   1f95a:	607b      	str	r3, [r7, #4]
   1f95c:	2b07      	cmp	r3, #7
   1f95e:	dd00      	ble.n	1f962 <_svfprintf_r+0x71a>
   1f960:	e1b3      	b.n	1fcca <_svfprintf_r+0xa82>
   1f962:	3608      	adds	r6, #8
   1f964:	464b      	mov	r3, r9
   1f966:	2b00      	cmp	r3, #0
   1f968:	d00c      	beq.n	1f984 <_svfprintf_r+0x73c>
   1f96a:	ab1e      	add	r3, sp, #120	; 0x78
   1f96c:	6033      	str	r3, [r6, #0]
   1f96e:	2302      	movs	r3, #2
   1f970:	6073      	str	r3, [r6, #4]
   1f972:	687b      	ldr	r3, [r7, #4]
   1f974:	3402      	adds	r4, #2
   1f976:	3301      	adds	r3, #1
   1f978:	60bc      	str	r4, [r7, #8]
   1f97a:	607b      	str	r3, [r7, #4]
   1f97c:	2b07      	cmp	r3, #7
   1f97e:	dd00      	ble.n	1f982 <_svfprintf_r+0x73a>
   1f980:	e1af      	b.n	1fce2 <_svfprintf_r+0xa9a>
   1f982:	3608      	adds	r6, #8
   1f984:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1f986:	2b80      	cmp	r3, #128	; 0x80
   1f988:	d100      	bne.n	1f98c <_svfprintf_r+0x744>
   1f98a:	e120      	b.n	1fbce <_svfprintf_r+0x986>
   1f98c:	4653      	mov	r3, sl
   1f98e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1f990:	1a9d      	subs	r5, r3, r2
   1f992:	2d00      	cmp	r5, #0
   1f994:	dd3c      	ble.n	1fa10 <_svfprintf_r+0x7c8>
   1f996:	4a08      	ldr	r2, [pc, #32]	; (1f9b8 <_svfprintf_r+0x770>)
   1f998:	687b      	ldr	r3, [r7, #4]
   1f99a:	4691      	mov	r9, r2
   1f99c:	2d10      	cmp	r5, #16
   1f99e:	dd2c      	ble.n	1f9fa <_svfprintf_r+0x7b2>
   1f9a0:	2210      	movs	r2, #16
   1f9a2:	0021      	movs	r1, r4
   1f9a4:	4692      	mov	sl, r2
   1f9a6:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1f9a8:	0032      	movs	r2, r6
   1f9aa:	002e      	movs	r6, r5
   1f9ac:	464d      	mov	r5, r9
   1f9ae:	e009      	b.n	1f9c4 <_svfprintf_r+0x77c>
   1f9b0:	00025348 	.word	0x00025348
   1f9b4:	0002535c 	.word	0x0002535c
   1f9b8:	0002538c 	.word	0x0002538c
   1f9bc:	3e10      	subs	r6, #16
   1f9be:	3208      	adds	r2, #8
   1f9c0:	2e10      	cmp	r6, #16
   1f9c2:	dd16      	ble.n	1f9f2 <_svfprintf_r+0x7aa>
   1f9c4:	4650      	mov	r0, sl
   1f9c6:	3110      	adds	r1, #16
   1f9c8:	3301      	adds	r3, #1
   1f9ca:	6015      	str	r5, [r2, #0]
   1f9cc:	6050      	str	r0, [r2, #4]
   1f9ce:	60b9      	str	r1, [r7, #8]
   1f9d0:	607b      	str	r3, [r7, #4]
   1f9d2:	2b07      	cmp	r3, #7
   1f9d4:	ddf2      	ble.n	1f9bc <_svfprintf_r+0x774>
   1f9d6:	003a      	movs	r2, r7
   1f9d8:	9906      	ldr	r1, [sp, #24]
   1f9da:	0020      	movs	r0, r4
   1f9dc:	f002 fe44 	bl	22668 <__ssprint_r>
   1f9e0:	2800      	cmp	r0, #0
   1f9e2:	d000      	beq.n	1f9e6 <_svfprintf_r+0x79e>
   1f9e4:	e4b7      	b.n	1f356 <_svfprintf_r+0x10e>
   1f9e6:	3e10      	subs	r6, #16
   1f9e8:	68b9      	ldr	r1, [r7, #8]
   1f9ea:	687b      	ldr	r3, [r7, #4]
   1f9ec:	aa32      	add	r2, sp, #200	; 0xc8
   1f9ee:	2e10      	cmp	r6, #16
   1f9f0:	dce8      	bgt.n	1f9c4 <_svfprintf_r+0x77c>
   1f9f2:	46a9      	mov	r9, r5
   1f9f4:	000c      	movs	r4, r1
   1f9f6:	0035      	movs	r5, r6
   1f9f8:	0016      	movs	r6, r2
   1f9fa:	464a      	mov	r2, r9
   1f9fc:	1964      	adds	r4, r4, r5
   1f9fe:	3301      	adds	r3, #1
   1fa00:	6032      	str	r2, [r6, #0]
   1fa02:	6075      	str	r5, [r6, #4]
   1fa04:	60bc      	str	r4, [r7, #8]
   1fa06:	607b      	str	r3, [r7, #4]
   1fa08:	2b07      	cmp	r3, #7
   1fa0a:	dd00      	ble.n	1fa0e <_svfprintf_r+0x7c6>
   1fa0c:	e151      	b.n	1fcb2 <_svfprintf_r+0xa6a>
   1fa0e:	3608      	adds	r6, #8
   1fa10:	9b08      	ldr	r3, [sp, #32]
   1fa12:	05db      	lsls	r3, r3, #23
   1fa14:	d500      	bpl.n	1fa18 <_svfprintf_r+0x7d0>
   1fa16:	e0b6      	b.n	1fb86 <_svfprintf_r+0x93e>
   1fa18:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1fa1a:	6033      	str	r3, [r6, #0]
   1fa1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1fa1e:	469c      	mov	ip, r3
   1fa20:	6073      	str	r3, [r6, #4]
   1fa22:	687b      	ldr	r3, [r7, #4]
   1fa24:	4464      	add	r4, ip
   1fa26:	3301      	adds	r3, #1
   1fa28:	60bc      	str	r4, [r7, #8]
   1fa2a:	607b      	str	r3, [r7, #4]
   1fa2c:	2b07      	cmp	r3, #7
   1fa2e:	dd00      	ble.n	1fa32 <_svfprintf_r+0x7ea>
   1fa30:	e09d      	b.n	1fb6e <_svfprintf_r+0x926>
   1fa32:	3608      	adds	r6, #8
   1fa34:	9b08      	ldr	r3, [sp, #32]
   1fa36:	075b      	lsls	r3, r3, #29
   1fa38:	d541      	bpl.n	1fabe <_svfprintf_r+0x876>
   1fa3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1fa3c:	9a07      	ldr	r2, [sp, #28]
   1fa3e:	1a9d      	subs	r5, r3, r2
   1fa40:	2d00      	cmp	r5, #0
   1fa42:	dd3c      	ble.n	1fabe <_svfprintf_r+0x876>
   1fa44:	4ac4      	ldr	r2, [pc, #784]	; (1fd58 <_svfprintf_r+0xb10>)
   1fa46:	687b      	ldr	r3, [r7, #4]
   1fa48:	4690      	mov	r8, r2
   1fa4a:	2d10      	cmp	r5, #16
   1fa4c:	dd26      	ble.n	1fa9c <_svfprintf_r+0x854>
   1fa4e:	2210      	movs	r2, #16
   1fa50:	0021      	movs	r1, r4
   1fa52:	4691      	mov	r9, r2
   1fa54:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1fa56:	0032      	movs	r2, r6
   1fa58:	002e      	movs	r6, r5
   1fa5a:	9d06      	ldr	r5, [sp, #24]
   1fa5c:	e003      	b.n	1fa66 <_svfprintf_r+0x81e>
   1fa5e:	3e10      	subs	r6, #16
   1fa60:	3208      	adds	r2, #8
   1fa62:	2e10      	cmp	r6, #16
   1fa64:	dd17      	ble.n	1fa96 <_svfprintf_r+0x84e>
   1fa66:	48bc      	ldr	r0, [pc, #752]	; (1fd58 <_svfprintf_r+0xb10>)
   1fa68:	3110      	adds	r1, #16
   1fa6a:	6010      	str	r0, [r2, #0]
   1fa6c:	4648      	mov	r0, r9
   1fa6e:	3301      	adds	r3, #1
   1fa70:	6050      	str	r0, [r2, #4]
   1fa72:	60b9      	str	r1, [r7, #8]
   1fa74:	607b      	str	r3, [r7, #4]
   1fa76:	2b07      	cmp	r3, #7
   1fa78:	ddf1      	ble.n	1fa5e <_svfprintf_r+0x816>
   1fa7a:	003a      	movs	r2, r7
   1fa7c:	0029      	movs	r1, r5
   1fa7e:	0020      	movs	r0, r4
   1fa80:	f002 fdf2 	bl	22668 <__ssprint_r>
   1fa84:	2800      	cmp	r0, #0
   1fa86:	d000      	beq.n	1fa8a <_svfprintf_r+0x842>
   1fa88:	e465      	b.n	1f356 <_svfprintf_r+0x10e>
   1fa8a:	3e10      	subs	r6, #16
   1fa8c:	68b9      	ldr	r1, [r7, #8]
   1fa8e:	687b      	ldr	r3, [r7, #4]
   1fa90:	aa32      	add	r2, sp, #200	; 0xc8
   1fa92:	2e10      	cmp	r6, #16
   1fa94:	dce7      	bgt.n	1fa66 <_svfprintf_r+0x81e>
   1fa96:	0035      	movs	r5, r6
   1fa98:	000c      	movs	r4, r1
   1fa9a:	0016      	movs	r6, r2
   1fa9c:	4642      	mov	r2, r8
   1fa9e:	1964      	adds	r4, r4, r5
   1faa0:	3301      	adds	r3, #1
   1faa2:	c624      	stmia	r6!, {r2, r5}
   1faa4:	60bc      	str	r4, [r7, #8]
   1faa6:	607b      	str	r3, [r7, #4]
   1faa8:	2b07      	cmp	r3, #7
   1faaa:	dd08      	ble.n	1fabe <_svfprintf_r+0x876>
   1faac:	003a      	movs	r2, r7
   1faae:	9906      	ldr	r1, [sp, #24]
   1fab0:	9809      	ldr	r0, [sp, #36]	; 0x24
   1fab2:	f002 fdd9 	bl	22668 <__ssprint_r>
   1fab6:	2800      	cmp	r0, #0
   1fab8:	d000      	beq.n	1fabc <_svfprintf_r+0x874>
   1faba:	e44c      	b.n	1f356 <_svfprintf_r+0x10e>
   1fabc:	68bc      	ldr	r4, [r7, #8]
   1fabe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1fac0:	9907      	ldr	r1, [sp, #28]
   1fac2:	428b      	cmp	r3, r1
   1fac4:	da00      	bge.n	1fac8 <_svfprintf_r+0x880>
   1fac6:	000b      	movs	r3, r1
   1fac8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1faca:	4694      	mov	ip, r2
   1facc:	449c      	add	ip, r3
   1face:	4663      	mov	r3, ip
   1fad0:	930a      	str	r3, [sp, #40]	; 0x28
   1fad2:	2c00      	cmp	r4, #0
   1fad4:	d000      	beq.n	1fad8 <_svfprintf_r+0x890>
   1fad6:	e0d6      	b.n	1fc86 <_svfprintf_r+0xa3e>
   1fad8:	2300      	movs	r3, #0
   1fada:	ae32      	add	r6, sp, #200	; 0xc8
   1fadc:	607b      	str	r3, [r7, #4]
   1fade:	f7ff fbde 	bl	1f29e <_svfprintf_r+0x56>
   1fae2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1fae4:	2b01      	cmp	r3, #1
   1fae6:	dc00      	bgt.n	1faea <_svfprintf_r+0x8a2>
   1fae8:	e0ae      	b.n	1fc48 <_svfprintf_r+0xa00>
   1faea:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1faec:	3401      	adds	r4, #1
   1faee:	6033      	str	r3, [r6, #0]
   1faf0:	2301      	movs	r3, #1
   1faf2:	6073      	str	r3, [r6, #4]
   1faf4:	687b      	ldr	r3, [r7, #4]
   1faf6:	60bc      	str	r4, [r7, #8]
   1faf8:	3301      	adds	r3, #1
   1fafa:	607b      	str	r3, [r7, #4]
   1fafc:	2b07      	cmp	r3, #7
   1fafe:	dd00      	ble.n	1fb02 <_svfprintf_r+0x8ba>
   1fb00:	e2df      	b.n	200c2 <_svfprintf_r+0xe7a>
   1fb02:	3608      	adds	r6, #8
   1fb04:	9a19      	ldr	r2, [sp, #100]	; 0x64
   1fb06:	3301      	adds	r3, #1
   1fb08:	6032      	str	r2, [r6, #0]
   1fb0a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1fb0c:	4698      	mov	r8, r3
   1fb0e:	4694      	mov	ip, r2
   1fb10:	4464      	add	r4, ip
   1fb12:	6072      	str	r2, [r6, #4]
   1fb14:	60bc      	str	r4, [r7, #8]
   1fb16:	607b      	str	r3, [r7, #4]
   1fb18:	2b07      	cmp	r3, #7
   1fb1a:	dd00      	ble.n	1fb1e <_svfprintf_r+0x8d6>
   1fb1c:	e2de      	b.n	200dc <_svfprintf_r+0xe94>
   1fb1e:	3608      	adds	r6, #8
   1fb20:	2200      	movs	r2, #0
   1fb22:	2300      	movs	r3, #0
   1fb24:	9816      	ldr	r0, [sp, #88]	; 0x58
   1fb26:	9915      	ldr	r1, [sp, #84]	; 0x54
   1fb28:	f7fc fbb6 	bl	1c298 <__aeabi_dcmpeq>
   1fb2c:	2800      	cmp	r0, #0
   1fb2e:	d000      	beq.n	1fb32 <_svfprintf_r+0x8ea>
   1fb30:	e1a4      	b.n	1fe7c <_svfprintf_r+0xc34>
   1fb32:	9d11      	ldr	r5, [sp, #68]	; 0x44
   1fb34:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1fb36:	3501      	adds	r5, #1
   1fb38:	3b01      	subs	r3, #1
   1fb3a:	6035      	str	r5, [r6, #0]
   1fb3c:	6073      	str	r3, [r6, #4]
   1fb3e:	18e4      	adds	r4, r4, r3
   1fb40:	2301      	movs	r3, #1
   1fb42:	469c      	mov	ip, r3
   1fb44:	44e0      	add	r8, ip
   1fb46:	4643      	mov	r3, r8
   1fb48:	60bc      	str	r4, [r7, #8]
   1fb4a:	607b      	str	r3, [r7, #4]
   1fb4c:	2b07      	cmp	r3, #7
   1fb4e:	dd00      	ble.n	1fb52 <_svfprintf_r+0x90a>
   1fb50:	e08b      	b.n	1fc6a <_svfprintf_r+0xa22>
   1fb52:	3608      	adds	r6, #8
   1fb54:	ab21      	add	r3, sp, #132	; 0x84
   1fb56:	6033      	str	r3, [r6, #0]
   1fb58:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1fb5a:	469c      	mov	ip, r3
   1fb5c:	6073      	str	r3, [r6, #4]
   1fb5e:	4643      	mov	r3, r8
   1fb60:	4464      	add	r4, ip
   1fb62:	3301      	adds	r3, #1
   1fb64:	60bc      	str	r4, [r7, #8]
   1fb66:	607b      	str	r3, [r7, #4]
   1fb68:	2b07      	cmp	r3, #7
   1fb6a:	dc00      	bgt.n	1fb6e <_svfprintf_r+0x926>
   1fb6c:	e761      	b.n	1fa32 <_svfprintf_r+0x7ea>
   1fb6e:	003a      	movs	r2, r7
   1fb70:	9906      	ldr	r1, [sp, #24]
   1fb72:	9809      	ldr	r0, [sp, #36]	; 0x24
   1fb74:	f002 fd78 	bl	22668 <__ssprint_r>
   1fb78:	2800      	cmp	r0, #0
   1fb7a:	d001      	beq.n	1fb80 <_svfprintf_r+0x938>
   1fb7c:	f7ff fbeb 	bl	1f356 <_svfprintf_r+0x10e>
   1fb80:	68bc      	ldr	r4, [r7, #8]
   1fb82:	ae32      	add	r6, sp, #200	; 0xc8
   1fb84:	e756      	b.n	1fa34 <_svfprintf_r+0x7ec>
   1fb86:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1fb88:	2b65      	cmp	r3, #101	; 0x65
   1fb8a:	ddaa      	ble.n	1fae2 <_svfprintf_r+0x89a>
   1fb8c:	2200      	movs	r2, #0
   1fb8e:	2300      	movs	r3, #0
   1fb90:	9816      	ldr	r0, [sp, #88]	; 0x58
   1fb92:	9915      	ldr	r1, [sp, #84]	; 0x54
   1fb94:	f7fc fb80 	bl	1c298 <__aeabi_dcmpeq>
   1fb98:	2800      	cmp	r0, #0
   1fb9a:	d100      	bne.n	1fb9e <_svfprintf_r+0x956>
   1fb9c:	e0e2      	b.n	1fd64 <_svfprintf_r+0xb1c>
   1fb9e:	4b6f      	ldr	r3, [pc, #444]	; (1fd5c <_svfprintf_r+0xb14>)
   1fba0:	3401      	adds	r4, #1
   1fba2:	6033      	str	r3, [r6, #0]
   1fba4:	2301      	movs	r3, #1
   1fba6:	6073      	str	r3, [r6, #4]
   1fba8:	687b      	ldr	r3, [r7, #4]
   1fbaa:	60bc      	str	r4, [r7, #8]
   1fbac:	3301      	adds	r3, #1
   1fbae:	607b      	str	r3, [r7, #4]
   1fbb0:	2b07      	cmp	r3, #7
   1fbb2:	dd00      	ble.n	1fbb6 <_svfprintf_r+0x96e>
   1fbb4:	e366      	b.n	20284 <_svfprintf_r+0x103c>
   1fbb6:	3608      	adds	r6, #8
   1fbb8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1fbba:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1fbbc:	4293      	cmp	r3, r2
   1fbbe:	da00      	bge.n	1fbc2 <_svfprintf_r+0x97a>
   1fbc0:	e1a4      	b.n	1ff0c <_svfprintf_r+0xcc4>
   1fbc2:	9b08      	ldr	r3, [sp, #32]
   1fbc4:	07db      	lsls	r3, r3, #31
   1fbc6:	d500      	bpl.n	1fbca <_svfprintf_r+0x982>
   1fbc8:	e1a0      	b.n	1ff0c <_svfprintf_r+0xcc4>
   1fbca:	68bc      	ldr	r4, [r7, #8]
   1fbcc:	e732      	b.n	1fa34 <_svfprintf_r+0x7ec>
   1fbce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1fbd0:	9a07      	ldr	r2, [sp, #28]
   1fbd2:	1a9d      	subs	r5, r3, r2
   1fbd4:	2d00      	cmp	r5, #0
   1fbd6:	dc00      	bgt.n	1fbda <_svfprintf_r+0x992>
   1fbd8:	e6d8      	b.n	1f98c <_svfprintf_r+0x744>
   1fbda:	4a61      	ldr	r2, [pc, #388]	; (1fd60 <_svfprintf_r+0xb18>)
   1fbdc:	687b      	ldr	r3, [r7, #4]
   1fbde:	4691      	mov	r9, r2
   1fbe0:	2d10      	cmp	r5, #16
   1fbe2:	dd25      	ble.n	1fc30 <_svfprintf_r+0x9e8>
   1fbe4:	2210      	movs	r2, #16
   1fbe6:	0021      	movs	r1, r4
   1fbe8:	4690      	mov	r8, r2
   1fbea:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1fbec:	0032      	movs	r2, r6
   1fbee:	464e      	mov	r6, r9
   1fbf0:	e003      	b.n	1fbfa <_svfprintf_r+0x9b2>
   1fbf2:	3d10      	subs	r5, #16
   1fbf4:	3208      	adds	r2, #8
   1fbf6:	2d10      	cmp	r5, #16
   1fbf8:	dd17      	ble.n	1fc2a <_svfprintf_r+0x9e2>
   1fbfa:	4640      	mov	r0, r8
   1fbfc:	3110      	adds	r1, #16
   1fbfe:	3301      	adds	r3, #1
   1fc00:	6016      	str	r6, [r2, #0]
   1fc02:	6050      	str	r0, [r2, #4]
   1fc04:	60b9      	str	r1, [r7, #8]
   1fc06:	607b      	str	r3, [r7, #4]
   1fc08:	2b07      	cmp	r3, #7
   1fc0a:	ddf2      	ble.n	1fbf2 <_svfprintf_r+0x9aa>
   1fc0c:	003a      	movs	r2, r7
   1fc0e:	9906      	ldr	r1, [sp, #24]
   1fc10:	0020      	movs	r0, r4
   1fc12:	f002 fd29 	bl	22668 <__ssprint_r>
   1fc16:	2800      	cmp	r0, #0
   1fc18:	d001      	beq.n	1fc1e <_svfprintf_r+0x9d6>
   1fc1a:	f7ff fb9c 	bl	1f356 <_svfprintf_r+0x10e>
   1fc1e:	3d10      	subs	r5, #16
   1fc20:	68b9      	ldr	r1, [r7, #8]
   1fc22:	687b      	ldr	r3, [r7, #4]
   1fc24:	aa32      	add	r2, sp, #200	; 0xc8
   1fc26:	2d10      	cmp	r5, #16
   1fc28:	dce7      	bgt.n	1fbfa <_svfprintf_r+0x9b2>
   1fc2a:	46b1      	mov	r9, r6
   1fc2c:	000c      	movs	r4, r1
   1fc2e:	0016      	movs	r6, r2
   1fc30:	464a      	mov	r2, r9
   1fc32:	1964      	adds	r4, r4, r5
   1fc34:	3301      	adds	r3, #1
   1fc36:	6032      	str	r2, [r6, #0]
   1fc38:	6075      	str	r5, [r6, #4]
   1fc3a:	60bc      	str	r4, [r7, #8]
   1fc3c:	607b      	str	r3, [r7, #4]
   1fc3e:	2b07      	cmp	r3, #7
   1fc40:	dd00      	ble.n	1fc44 <_svfprintf_r+0x9fc>
   1fc42:	e27e      	b.n	20142 <_svfprintf_r+0xefa>
   1fc44:	3608      	adds	r6, #8
   1fc46:	e6a1      	b.n	1f98c <_svfprintf_r+0x744>
   1fc48:	2301      	movs	r3, #1
   1fc4a:	9a08      	ldr	r2, [sp, #32]
   1fc4c:	4213      	tst	r3, r2
   1fc4e:	d000      	beq.n	1fc52 <_svfprintf_r+0xa0a>
   1fc50:	e74b      	b.n	1faea <_svfprintf_r+0x8a2>
   1fc52:	6073      	str	r3, [r6, #4]
   1fc54:	687b      	ldr	r3, [r7, #4]
   1fc56:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1fc58:	3301      	adds	r3, #1
   1fc5a:	3401      	adds	r4, #1
   1fc5c:	6032      	str	r2, [r6, #0]
   1fc5e:	60bc      	str	r4, [r7, #8]
   1fc60:	4698      	mov	r8, r3
   1fc62:	607b      	str	r3, [r7, #4]
   1fc64:	2b07      	cmp	r3, #7
   1fc66:	dc00      	bgt.n	1fc6a <_svfprintf_r+0xa22>
   1fc68:	e773      	b.n	1fb52 <_svfprintf_r+0x90a>
   1fc6a:	003a      	movs	r2, r7
   1fc6c:	9906      	ldr	r1, [sp, #24]
   1fc6e:	9809      	ldr	r0, [sp, #36]	; 0x24
   1fc70:	f002 fcfa 	bl	22668 <__ssprint_r>
   1fc74:	2800      	cmp	r0, #0
   1fc76:	d001      	beq.n	1fc7c <_svfprintf_r+0xa34>
   1fc78:	f7ff fb6d 	bl	1f356 <_svfprintf_r+0x10e>
   1fc7c:	687b      	ldr	r3, [r7, #4]
   1fc7e:	68bc      	ldr	r4, [r7, #8]
   1fc80:	4698      	mov	r8, r3
   1fc82:	ae32      	add	r6, sp, #200	; 0xc8
   1fc84:	e766      	b.n	1fb54 <_svfprintf_r+0x90c>
   1fc86:	003a      	movs	r2, r7
   1fc88:	9906      	ldr	r1, [sp, #24]
   1fc8a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1fc8c:	f002 fcec 	bl	22668 <__ssprint_r>
   1fc90:	2800      	cmp	r0, #0
   1fc92:	d100      	bne.n	1fc96 <_svfprintf_r+0xa4e>
   1fc94:	e720      	b.n	1fad8 <_svfprintf_r+0x890>
   1fc96:	f7ff fb5e 	bl	1f356 <_svfprintf_r+0x10e>
   1fc9a:	9c08      	ldr	r4, [sp, #32]
   1fc9c:	2b01      	cmp	r3, #1
   1fc9e:	d100      	bne.n	1fca2 <_svfprintf_r+0xa5a>
   1fca0:	e184      	b.n	1ffac <_svfprintf_r+0xd64>
   1fca2:	2b02      	cmp	r3, #2
   1fca4:	d129      	bne.n	1fcfa <_svfprintf_r+0xab2>
   1fca6:	9408      	str	r4, [sp, #32]
   1fca8:	2300      	movs	r3, #0
   1fcaa:	2400      	movs	r4, #0
   1fcac:	930c      	str	r3, [sp, #48]	; 0x30
   1fcae:	940d      	str	r4, [sp, #52]	; 0x34
   1fcb0:	e4c5      	b.n	1f63e <_svfprintf_r+0x3f6>
   1fcb2:	003a      	movs	r2, r7
   1fcb4:	9906      	ldr	r1, [sp, #24]
   1fcb6:	9809      	ldr	r0, [sp, #36]	; 0x24
   1fcb8:	f002 fcd6 	bl	22668 <__ssprint_r>
   1fcbc:	2800      	cmp	r0, #0
   1fcbe:	d001      	beq.n	1fcc4 <_svfprintf_r+0xa7c>
   1fcc0:	f7ff fb49 	bl	1f356 <_svfprintf_r+0x10e>
   1fcc4:	68bc      	ldr	r4, [r7, #8]
   1fcc6:	ae32      	add	r6, sp, #200	; 0xc8
   1fcc8:	e6a2      	b.n	1fa10 <_svfprintf_r+0x7c8>
   1fcca:	003a      	movs	r2, r7
   1fccc:	9906      	ldr	r1, [sp, #24]
   1fcce:	9809      	ldr	r0, [sp, #36]	; 0x24
   1fcd0:	f002 fcca 	bl	22668 <__ssprint_r>
   1fcd4:	2800      	cmp	r0, #0
   1fcd6:	d001      	beq.n	1fcdc <_svfprintf_r+0xa94>
   1fcd8:	f7ff fb3d 	bl	1f356 <_svfprintf_r+0x10e>
   1fcdc:	68bc      	ldr	r4, [r7, #8]
   1fcde:	ae32      	add	r6, sp, #200	; 0xc8
   1fce0:	e640      	b.n	1f964 <_svfprintf_r+0x71c>
   1fce2:	003a      	movs	r2, r7
   1fce4:	9906      	ldr	r1, [sp, #24]
   1fce6:	9809      	ldr	r0, [sp, #36]	; 0x24
   1fce8:	f002 fcbe 	bl	22668 <__ssprint_r>
   1fcec:	2800      	cmp	r0, #0
   1fcee:	d001      	beq.n	1fcf4 <_svfprintf_r+0xaac>
   1fcf0:	f7ff fb31 	bl	1f356 <_svfprintf_r+0x10e>
   1fcf4:	68bc      	ldr	r4, [r7, #8]
   1fcf6:	ae32      	add	r6, sp, #200	; 0xc8
   1fcf8:	e644      	b.n	1f984 <_svfprintf_r+0x73c>
   1fcfa:	9408      	str	r4, [sp, #32]
   1fcfc:	2300      	movs	r3, #0
   1fcfe:	2400      	movs	r4, #0
   1fd00:	930c      	str	r3, [sp, #48]	; 0x30
   1fd02:	940d      	str	r4, [sp, #52]	; 0x34
   1fd04:	980c      	ldr	r0, [sp, #48]	; 0x30
   1fd06:	990d      	ldr	r1, [sp, #52]	; 0x34
   1fd08:	465b      	mov	r3, fp
   1fd0a:	aa32      	add	r2, sp, #200	; 0xc8
   1fd0c:	9307      	str	r3, [sp, #28]
   1fd0e:	4691      	mov	r9, r2
   1fd10:	46b3      	mov	fp, r6
   1fd12:	e000      	b.n	1fd16 <_svfprintf_r+0xace>
   1fd14:	46a1      	mov	r9, r4
   1fd16:	074a      	lsls	r2, r1, #29
   1fd18:	4694      	mov	ip, r2
   1fd1a:	464b      	mov	r3, r9
   1fd1c:	4665      	mov	r5, ip
   1fd1e:	1e5c      	subs	r4, r3, #1
   1fd20:	08c6      	lsrs	r6, r0, #3
   1fd22:	2307      	movs	r3, #7
   1fd24:	08ca      	lsrs	r2, r1, #3
   1fd26:	4335      	orrs	r5, r6
   1fd28:	0011      	movs	r1, r2
   1fd2a:	002a      	movs	r2, r5
   1fd2c:	4003      	ands	r3, r0
   1fd2e:	3330      	adds	r3, #48	; 0x30
   1fd30:	7023      	strb	r3, [r4, #0]
   1fd32:	0028      	movs	r0, r5
   1fd34:	430a      	orrs	r2, r1
   1fd36:	d1ed      	bne.n	1fd14 <_svfprintf_r+0xacc>
   1fd38:	900c      	str	r0, [sp, #48]	; 0x30
   1fd3a:	910d      	str	r1, [sp, #52]	; 0x34
   1fd3c:	9907      	ldr	r1, [sp, #28]
   1fd3e:	465e      	mov	r6, fp
   1fd40:	468b      	mov	fp, r1
   1fd42:	9908      	ldr	r1, [sp, #32]
   1fd44:	464a      	mov	r2, r9
   1fd46:	9411      	str	r4, [sp, #68]	; 0x44
   1fd48:	07c9      	lsls	r1, r1, #31
   1fd4a:	d500      	bpl.n	1fd4e <_svfprintf_r+0xb06>
   1fd4c:	e13d      	b.n	1ffca <_svfprintf_r+0xd82>
   1fd4e:	ab32      	add	r3, sp, #200	; 0xc8
   1fd50:	1b1b      	subs	r3, r3, r4
   1fd52:	930e      	str	r3, [sp, #56]	; 0x38
   1fd54:	f7ff fb88 	bl	1f468 <_svfprintf_r+0x220>
   1fd58:	0002537c 	.word	0x0002537c
   1fd5c:	00025378 	.word	0x00025378
   1fd60:	0002538c 	.word	0x0002538c
   1fd64:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1fd66:	2800      	cmp	r0, #0
   1fd68:	dc00      	bgt.n	1fd6c <_svfprintf_r+0xb24>
   1fd6a:	e296      	b.n	2029a <_svfprintf_r+0x1052>
   1fd6c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1fd6e:	9914      	ldr	r1, [sp, #80]	; 0x50
   1fd70:	0013      	movs	r3, r2
   1fd72:	4690      	mov	r8, r2
   1fd74:	428b      	cmp	r3, r1
   1fd76:	dd00      	ble.n	1fd7a <_svfprintf_r+0xb32>
   1fd78:	4688      	mov	r8, r1
   1fd7a:	4643      	mov	r3, r8
   1fd7c:	2b00      	cmp	r3, #0
   1fd7e:	dd0c      	ble.n	1fd9a <_svfprintf_r+0xb52>
   1fd80:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1fd82:	4444      	add	r4, r8
   1fd84:	6033      	str	r3, [r6, #0]
   1fd86:	4643      	mov	r3, r8
   1fd88:	6073      	str	r3, [r6, #4]
   1fd8a:	687b      	ldr	r3, [r7, #4]
   1fd8c:	60bc      	str	r4, [r7, #8]
   1fd8e:	3301      	adds	r3, #1
   1fd90:	607b      	str	r3, [r7, #4]
   1fd92:	2b07      	cmp	r3, #7
   1fd94:	dd00      	ble.n	1fd98 <_svfprintf_r+0xb50>
   1fd96:	e3b7      	b.n	20508 <_svfprintf_r+0x12c0>
   1fd98:	3608      	adds	r6, #8
   1fd9a:	4643      	mov	r3, r8
   1fd9c:	43db      	mvns	r3, r3
   1fd9e:	4642      	mov	r2, r8
   1fda0:	17db      	asrs	r3, r3, #31
   1fda2:	4013      	ands	r3, r2
   1fda4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1fda6:	1ad3      	subs	r3, r2, r3
   1fda8:	4698      	mov	r8, r3
   1fdaa:	2b00      	cmp	r3, #0
   1fdac:	dc00      	bgt.n	1fdb0 <_svfprintf_r+0xb68>
   1fdae:	e128      	b.n	20002 <_svfprintf_r+0xdba>
   1fdb0:	2b10      	cmp	r3, #16
   1fdb2:	dc01      	bgt.n	1fdb8 <_svfprintf_r+0xb70>
   1fdb4:	f000 fce7 	bl	20786 <_svfprintf_r+0x153e>
   1fdb8:	4acf      	ldr	r2, [pc, #828]	; (200f8 <_svfprintf_r+0xeb0>)
   1fdba:	0021      	movs	r1, r4
   1fdbc:	4691      	mov	r9, r2
   1fdbe:	2210      	movs	r2, #16
   1fdc0:	687b      	ldr	r3, [r7, #4]
   1fdc2:	4692      	mov	sl, r2
   1fdc4:	9d09      	ldr	r5, [sp, #36]	; 0x24
   1fdc6:	0032      	movs	r2, r6
   1fdc8:	464c      	mov	r4, r9
   1fdca:	4646      	mov	r6, r8
   1fdcc:	e004      	b.n	1fdd8 <_svfprintf_r+0xb90>
   1fdce:	3208      	adds	r2, #8
   1fdd0:	3e10      	subs	r6, #16
   1fdd2:	2e10      	cmp	r6, #16
   1fdd4:	dc00      	bgt.n	1fdd8 <_svfprintf_r+0xb90>
   1fdd6:	e104      	b.n	1ffe2 <_svfprintf_r+0xd9a>
   1fdd8:	4650      	mov	r0, sl
   1fdda:	3110      	adds	r1, #16
   1fddc:	3301      	adds	r3, #1
   1fdde:	6014      	str	r4, [r2, #0]
   1fde0:	6050      	str	r0, [r2, #4]
   1fde2:	60b9      	str	r1, [r7, #8]
   1fde4:	607b      	str	r3, [r7, #4]
   1fde6:	2b07      	cmp	r3, #7
   1fde8:	ddf1      	ble.n	1fdce <_svfprintf_r+0xb86>
   1fdea:	003a      	movs	r2, r7
   1fdec:	9906      	ldr	r1, [sp, #24]
   1fdee:	0028      	movs	r0, r5
   1fdf0:	f002 fc3a 	bl	22668 <__ssprint_r>
   1fdf4:	2800      	cmp	r0, #0
   1fdf6:	d001      	beq.n	1fdfc <_svfprintf_r+0xbb4>
   1fdf8:	f7ff faad 	bl	1f356 <_svfprintf_r+0x10e>
   1fdfc:	68b9      	ldr	r1, [r7, #8]
   1fdfe:	687b      	ldr	r3, [r7, #4]
   1fe00:	aa32      	add	r2, sp, #200	; 0xc8
   1fe02:	e7e5      	b.n	1fdd0 <_svfprintf_r+0xb88>
   1fe04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fe06:	2b00      	cmp	r3, #0
   1fe08:	d100      	bne.n	1fe0c <_svfprintf_r+0xbc4>
   1fe0a:	e0ca      	b.n	1ffa2 <_svfprintf_r+0xd5a>
   1fe0c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1fe0e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1fe10:	ab32      	add	r3, sp, #200	; 0xc8
   1fe12:	46b1      	mov	r9, r6
   1fe14:	001e      	movs	r6, r3
   1fe16:	0020      	movs	r0, r4
   1fe18:	0029      	movs	r1, r5
   1fe1a:	220a      	movs	r2, #10
   1fe1c:	2300      	movs	r3, #0
   1fe1e:	f003 f8b9 	bl	22f94 <__aeabi_uldivmod>
   1fe22:	3e01      	subs	r6, #1
   1fe24:	3230      	adds	r2, #48	; 0x30
   1fe26:	7032      	strb	r2, [r6, #0]
   1fe28:	2300      	movs	r3, #0
   1fe2a:	0020      	movs	r0, r4
   1fe2c:	0029      	movs	r1, r5
   1fe2e:	220a      	movs	r2, #10
   1fe30:	f003 f8b0 	bl	22f94 <__aeabi_uldivmod>
   1fe34:	0003      	movs	r3, r0
   1fe36:	0004      	movs	r4, r0
   1fe38:	000d      	movs	r5, r1
   1fe3a:	430b      	orrs	r3, r1
   1fe3c:	d1eb      	bne.n	1fe16 <_svfprintf_r+0xbce>
   1fe3e:	0032      	movs	r2, r6
   1fe40:	ab32      	add	r3, sp, #200	; 0xc8
   1fe42:	1a9b      	subs	r3, r3, r2
   1fe44:	9611      	str	r6, [sp, #68]	; 0x44
   1fe46:	940c      	str	r4, [sp, #48]	; 0x30
   1fe48:	950d      	str	r5, [sp, #52]	; 0x34
   1fe4a:	464e      	mov	r6, r9
   1fe4c:	930e      	str	r3, [sp, #56]	; 0x38
   1fe4e:	f7ff fb0b 	bl	1f468 <_svfprintf_r+0x220>
   1fe52:	2300      	movs	r3, #0
   1fe54:	930e      	str	r3, [sp, #56]	; 0x38
   1fe56:	ab32      	add	r3, sp, #200	; 0xc8
   1fe58:	9311      	str	r3, [sp, #68]	; 0x44
   1fe5a:	f7ff fb05 	bl	1f468 <_svfprintf_r+0x220>
   1fe5e:	003a      	movs	r2, r7
   1fe60:	9906      	ldr	r1, [sp, #24]
   1fe62:	9809      	ldr	r0, [sp, #36]	; 0x24
   1fe64:	f002 fc00 	bl	22668 <__ssprint_r>
   1fe68:	2800      	cmp	r0, #0
   1fe6a:	d001      	beq.n	1fe70 <_svfprintf_r+0xc28>
   1fe6c:	f7ff fa73 	bl	1f356 <_svfprintf_r+0x10e>
   1fe70:	ab16      	add	r3, sp, #88	; 0x58
   1fe72:	7fdb      	ldrb	r3, [r3, #31]
   1fe74:	68bc      	ldr	r4, [r7, #8]
   1fe76:	4698      	mov	r8, r3
   1fe78:	ae32      	add	r6, sp, #200	; 0xc8
   1fe7a:	e560      	b.n	1f93e <_svfprintf_r+0x6f6>
   1fe7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1fe7e:	1e5d      	subs	r5, r3, #1
   1fe80:	2d00      	cmp	r5, #0
   1fe82:	dc00      	bgt.n	1fe86 <_svfprintf_r+0xc3e>
   1fe84:	e666      	b.n	1fb54 <_svfprintf_r+0x90c>
   1fe86:	4b9c      	ldr	r3, [pc, #624]	; (200f8 <_svfprintf_r+0xeb0>)
   1fe88:	4699      	mov	r9, r3
   1fe8a:	2d10      	cmp	r5, #16
   1fe8c:	dd29      	ble.n	1fee2 <_svfprintf_r+0xc9a>
   1fe8e:	2310      	movs	r3, #16
   1fe90:	0032      	movs	r2, r6
   1fe92:	469a      	mov	sl, r3
   1fe94:	002e      	movs	r6, r5
   1fe96:	0021      	movs	r1, r4
   1fe98:	4643      	mov	r3, r8
   1fe9a:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1fe9c:	464d      	mov	r5, r9
   1fe9e:	e003      	b.n	1fea8 <_svfprintf_r+0xc60>
   1fea0:	3e10      	subs	r6, #16
   1fea2:	3208      	adds	r2, #8
   1fea4:	2e10      	cmp	r6, #16
   1fea6:	dd17      	ble.n	1fed8 <_svfprintf_r+0xc90>
   1fea8:	4650      	mov	r0, sl
   1feaa:	3110      	adds	r1, #16
   1feac:	3301      	adds	r3, #1
   1feae:	6015      	str	r5, [r2, #0]
   1feb0:	6050      	str	r0, [r2, #4]
   1feb2:	60b9      	str	r1, [r7, #8]
   1feb4:	607b      	str	r3, [r7, #4]
   1feb6:	2b07      	cmp	r3, #7
   1feb8:	ddf2      	ble.n	1fea0 <_svfprintf_r+0xc58>
   1feba:	003a      	movs	r2, r7
   1febc:	9906      	ldr	r1, [sp, #24]
   1febe:	0020      	movs	r0, r4
   1fec0:	f002 fbd2 	bl	22668 <__ssprint_r>
   1fec4:	2800      	cmp	r0, #0
   1fec6:	d001      	beq.n	1fecc <_svfprintf_r+0xc84>
   1fec8:	f7ff fa45 	bl	1f356 <_svfprintf_r+0x10e>
   1fecc:	3e10      	subs	r6, #16
   1fece:	68b9      	ldr	r1, [r7, #8]
   1fed0:	687b      	ldr	r3, [r7, #4]
   1fed2:	aa32      	add	r2, sp, #200	; 0xc8
   1fed4:	2e10      	cmp	r6, #16
   1fed6:	dce7      	bgt.n	1fea8 <_svfprintf_r+0xc60>
   1fed8:	46a9      	mov	r9, r5
   1feda:	000c      	movs	r4, r1
   1fedc:	0035      	movs	r5, r6
   1fede:	4698      	mov	r8, r3
   1fee0:	0016      	movs	r6, r2
   1fee2:	464b      	mov	r3, r9
   1fee4:	6075      	str	r5, [r6, #4]
   1fee6:	6033      	str	r3, [r6, #0]
   1fee8:	1964      	adds	r4, r4, r5
   1feea:	e629      	b.n	1fb40 <_svfprintf_r+0x8f8>
   1feec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1feee:	681a      	ldr	r2, [r3, #0]
   1fef0:	f7ff fbfb 	bl	1f6ea <_svfprintf_r+0x4a2>
   1fef4:	6813      	ldr	r3, [r2, #0]
   1fef6:	9307      	str	r3, [sp, #28]
   1fef8:	f7ff fa82 	bl	1f400 <_svfprintf_r+0x1b8>
   1fefc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1fefe:	681a      	ldr	r2, [r3, #0]
   1ff00:	f7ff fb84 	bl	1f60c <_svfprintf_r+0x3c4>
   1ff04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ff06:	681a      	ldr	r2, [r3, #0]
   1ff08:	f7ff fbd1 	bl	1f6ae <_svfprintf_r+0x466>
   1ff0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1ff0e:	68ba      	ldr	r2, [r7, #8]
   1ff10:	6033      	str	r3, [r6, #0]
   1ff12:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1ff14:	469c      	mov	ip, r3
   1ff16:	6073      	str	r3, [r6, #4]
   1ff18:	687b      	ldr	r3, [r7, #4]
   1ff1a:	4462      	add	r2, ip
   1ff1c:	3301      	adds	r3, #1
   1ff1e:	0014      	movs	r4, r2
   1ff20:	60ba      	str	r2, [r7, #8]
   1ff22:	607b      	str	r3, [r7, #4]
   1ff24:	2b07      	cmp	r3, #7
   1ff26:	dd00      	ble.n	1ff2a <_svfprintf_r+0xce2>
   1ff28:	e202      	b.n	20330 <_svfprintf_r+0x10e8>
   1ff2a:	3608      	adds	r6, #8
   1ff2c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1ff2e:	1e5d      	subs	r5, r3, #1
   1ff30:	2d00      	cmp	r5, #0
   1ff32:	dc00      	bgt.n	1ff36 <_svfprintf_r+0xcee>
   1ff34:	e57e      	b.n	1fa34 <_svfprintf_r+0x7ec>
   1ff36:	4a70      	ldr	r2, [pc, #448]	; (200f8 <_svfprintf_r+0xeb0>)
   1ff38:	687b      	ldr	r3, [r7, #4]
   1ff3a:	4691      	mov	r9, r2
   1ff3c:	2d10      	cmp	r5, #16
   1ff3e:	dd25      	ble.n	1ff8c <_svfprintf_r+0xd44>
   1ff40:	2210      	movs	r2, #16
   1ff42:	0021      	movs	r1, r4
   1ff44:	4690      	mov	r8, r2
   1ff46:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1ff48:	0032      	movs	r2, r6
   1ff4a:	002e      	movs	r6, r5
   1ff4c:	464d      	mov	r5, r9
   1ff4e:	e003      	b.n	1ff58 <_svfprintf_r+0xd10>
   1ff50:	3208      	adds	r2, #8
   1ff52:	3e10      	subs	r6, #16
   1ff54:	2e10      	cmp	r6, #16
   1ff56:	dd15      	ble.n	1ff84 <_svfprintf_r+0xd3c>
   1ff58:	4640      	mov	r0, r8
   1ff5a:	3110      	adds	r1, #16
   1ff5c:	3301      	adds	r3, #1
   1ff5e:	6015      	str	r5, [r2, #0]
   1ff60:	6050      	str	r0, [r2, #4]
   1ff62:	60b9      	str	r1, [r7, #8]
   1ff64:	607b      	str	r3, [r7, #4]
   1ff66:	2b07      	cmp	r3, #7
   1ff68:	ddf2      	ble.n	1ff50 <_svfprintf_r+0xd08>
   1ff6a:	003a      	movs	r2, r7
   1ff6c:	9906      	ldr	r1, [sp, #24]
   1ff6e:	0020      	movs	r0, r4
   1ff70:	f002 fb7a 	bl	22668 <__ssprint_r>
   1ff74:	2800      	cmp	r0, #0
   1ff76:	d001      	beq.n	1ff7c <_svfprintf_r+0xd34>
   1ff78:	f7ff f9ed 	bl	1f356 <_svfprintf_r+0x10e>
   1ff7c:	68b9      	ldr	r1, [r7, #8]
   1ff7e:	687b      	ldr	r3, [r7, #4]
   1ff80:	aa32      	add	r2, sp, #200	; 0xc8
   1ff82:	e7e6      	b.n	1ff52 <_svfprintf_r+0xd0a>
   1ff84:	46a9      	mov	r9, r5
   1ff86:	000c      	movs	r4, r1
   1ff88:	0035      	movs	r5, r6
   1ff8a:	0016      	movs	r6, r2
   1ff8c:	464a      	mov	r2, r9
   1ff8e:	1964      	adds	r4, r4, r5
   1ff90:	3301      	adds	r3, #1
   1ff92:	6032      	str	r2, [r6, #0]
   1ff94:	6075      	str	r5, [r6, #4]
   1ff96:	60bc      	str	r4, [r7, #8]
   1ff98:	607b      	str	r3, [r7, #4]
   1ff9a:	2b07      	cmp	r3, #7
   1ff9c:	dc00      	bgt.n	1ffa0 <_svfprintf_r+0xd58>
   1ff9e:	e548      	b.n	1fa32 <_svfprintf_r+0x7ea>
   1ffa0:	e5e5      	b.n	1fb6e <_svfprintf_r+0x926>
   1ffa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1ffa4:	2b09      	cmp	r3, #9
   1ffa6:	d900      	bls.n	1ffaa <_svfprintf_r+0xd62>
   1ffa8:	e730      	b.n	1fe0c <_svfprintf_r+0xbc4>
   1ffaa:	9c08      	ldr	r4, [sp, #32]
   1ffac:	2227      	movs	r2, #39	; 0x27
   1ffae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1ffb0:	a928      	add	r1, sp, #160	; 0xa0
   1ffb2:	3330      	adds	r3, #48	; 0x30
   1ffb4:	548b      	strb	r3, [r1, r2]
   1ffb6:	2301      	movs	r3, #1
   1ffb8:	aa16      	add	r2, sp, #88	; 0x58
   1ffba:	4694      	mov	ip, r2
   1ffbc:	930e      	str	r3, [sp, #56]	; 0x38
   1ffbe:	336e      	adds	r3, #110	; 0x6e
   1ffc0:	4463      	add	r3, ip
   1ffc2:	9408      	str	r4, [sp, #32]
   1ffc4:	9311      	str	r3, [sp, #68]	; 0x44
   1ffc6:	f7ff fa4f 	bl	1f468 <_svfprintf_r+0x220>
   1ffca:	2b30      	cmp	r3, #48	; 0x30
   1ffcc:	d100      	bne.n	1ffd0 <_svfprintf_r+0xd88>
   1ffce:	e20b      	b.n	203e8 <_svfprintf_r+0x11a0>
   1ffd0:	2330      	movs	r3, #48	; 0x30
   1ffd2:	3a02      	subs	r2, #2
   1ffd4:	7013      	strb	r3, [r2, #0]
   1ffd6:	ab32      	add	r3, sp, #200	; 0xc8
   1ffd8:	1a9b      	subs	r3, r3, r2
   1ffda:	930e      	str	r3, [sp, #56]	; 0x38
   1ffdc:	9211      	str	r2, [sp, #68]	; 0x44
   1ffde:	f7ff fa43 	bl	1f468 <_svfprintf_r+0x220>
   1ffe2:	46b0      	mov	r8, r6
   1ffe4:	46a1      	mov	r9, r4
   1ffe6:	0016      	movs	r6, r2
   1ffe8:	000c      	movs	r4, r1
   1ffea:	464a      	mov	r2, r9
   1ffec:	6032      	str	r2, [r6, #0]
   1ffee:	4642      	mov	r2, r8
   1fff0:	4444      	add	r4, r8
   1fff2:	3301      	adds	r3, #1
   1fff4:	6072      	str	r2, [r6, #4]
   1fff6:	60bc      	str	r4, [r7, #8]
   1fff8:	607b      	str	r3, [r7, #4]
   1fffa:	2b07      	cmp	r3, #7
   1fffc:	dd00      	ble.n	20000 <_svfprintf_r+0xdb8>
   1fffe:	e29c      	b.n	2053a <_svfprintf_r+0x12f2>
   20000:	3608      	adds	r6, #8
   20002:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   20004:	9a14      	ldr	r2, [sp, #80]	; 0x50
   20006:	4293      	cmp	r3, r2
   20008:	db4c      	blt.n	200a4 <_svfprintf_r+0xe5c>
   2000a:	9a08      	ldr	r2, [sp, #32]
   2000c:	07d2      	lsls	r2, r2, #31
   2000e:	d449      	bmi.n	200a4 <_svfprintf_r+0xe5c>
   20010:	9a14      	ldr	r2, [sp, #80]	; 0x50
   20012:	9913      	ldr	r1, [sp, #76]	; 0x4c
   20014:	1ad3      	subs	r3, r2, r3
   20016:	1a52      	subs	r2, r2, r1
   20018:	4690      	mov	r8, r2
   2001a:	429a      	cmp	r2, r3
   2001c:	dd00      	ble.n	20020 <_svfprintf_r+0xdd8>
   2001e:	4698      	mov	r8, r3
   20020:	4642      	mov	r2, r8
   20022:	2a00      	cmp	r2, #0
   20024:	dd0f      	ble.n	20046 <_svfprintf_r+0xdfe>
   20026:	9913      	ldr	r1, [sp, #76]	; 0x4c
   20028:	9a11      	ldr	r2, [sp, #68]	; 0x44
   2002a:	468c      	mov	ip, r1
   2002c:	4462      	add	r2, ip
   2002e:	6032      	str	r2, [r6, #0]
   20030:	4642      	mov	r2, r8
   20032:	6072      	str	r2, [r6, #4]
   20034:	687a      	ldr	r2, [r7, #4]
   20036:	4444      	add	r4, r8
   20038:	3201      	adds	r2, #1
   2003a:	60bc      	str	r4, [r7, #8]
   2003c:	607a      	str	r2, [r7, #4]
   2003e:	2a07      	cmp	r2, #7
   20040:	dd00      	ble.n	20044 <_svfprintf_r+0xdfc>
   20042:	e286      	b.n	20552 <_svfprintf_r+0x130a>
   20044:	3608      	adds	r6, #8
   20046:	4642      	mov	r2, r8
   20048:	43d5      	mvns	r5, r2
   2004a:	17ed      	asrs	r5, r5, #31
   2004c:	4015      	ands	r5, r2
   2004e:	1b5d      	subs	r5, r3, r5
   20050:	2d00      	cmp	r5, #0
   20052:	dc00      	bgt.n	20056 <_svfprintf_r+0xe0e>
   20054:	e4ee      	b.n	1fa34 <_svfprintf_r+0x7ec>
   20056:	4a28      	ldr	r2, [pc, #160]	; (200f8 <_svfprintf_r+0xeb0>)
   20058:	687b      	ldr	r3, [r7, #4]
   2005a:	4691      	mov	r9, r2
   2005c:	2d10      	cmp	r5, #16
   2005e:	dd95      	ble.n	1ff8c <_svfprintf_r+0xd44>
   20060:	2210      	movs	r2, #16
   20062:	0021      	movs	r1, r4
   20064:	4690      	mov	r8, r2
   20066:	9c09      	ldr	r4, [sp, #36]	; 0x24
   20068:	0032      	movs	r2, r6
   2006a:	002e      	movs	r6, r5
   2006c:	464d      	mov	r5, r9
   2006e:	e003      	b.n	20078 <_svfprintf_r+0xe30>
   20070:	3208      	adds	r2, #8
   20072:	3e10      	subs	r6, #16
   20074:	2e10      	cmp	r6, #16
   20076:	dd85      	ble.n	1ff84 <_svfprintf_r+0xd3c>
   20078:	4640      	mov	r0, r8
   2007a:	3110      	adds	r1, #16
   2007c:	3301      	adds	r3, #1
   2007e:	6015      	str	r5, [r2, #0]
   20080:	6050      	str	r0, [r2, #4]
   20082:	60b9      	str	r1, [r7, #8]
   20084:	607b      	str	r3, [r7, #4]
   20086:	2b07      	cmp	r3, #7
   20088:	ddf2      	ble.n	20070 <_svfprintf_r+0xe28>
   2008a:	003a      	movs	r2, r7
   2008c:	9906      	ldr	r1, [sp, #24]
   2008e:	0020      	movs	r0, r4
   20090:	f002 faea 	bl	22668 <__ssprint_r>
   20094:	2800      	cmp	r0, #0
   20096:	d001      	beq.n	2009c <_svfprintf_r+0xe54>
   20098:	f7ff f95d 	bl	1f356 <_svfprintf_r+0x10e>
   2009c:	68b9      	ldr	r1, [r7, #8]
   2009e:	687b      	ldr	r3, [r7, #4]
   200a0:	aa32      	add	r2, sp, #200	; 0xc8
   200a2:	e7e6      	b.n	20072 <_svfprintf_r+0xe2a>
   200a4:	9a19      	ldr	r2, [sp, #100]	; 0x64
   200a6:	6032      	str	r2, [r6, #0]
   200a8:	9a18      	ldr	r2, [sp, #96]	; 0x60
   200aa:	4694      	mov	ip, r2
   200ac:	6072      	str	r2, [r6, #4]
   200ae:	687a      	ldr	r2, [r7, #4]
   200b0:	4464      	add	r4, ip
   200b2:	3201      	adds	r2, #1
   200b4:	60bc      	str	r4, [r7, #8]
   200b6:	607a      	str	r2, [r7, #4]
   200b8:	2a07      	cmp	r2, #7
   200ba:	dd00      	ble.n	200be <_svfprintf_r+0xe76>
   200bc:	e230      	b.n	20520 <_svfprintf_r+0x12d8>
   200be:	3608      	adds	r6, #8
   200c0:	e7a6      	b.n	20010 <_svfprintf_r+0xdc8>
   200c2:	003a      	movs	r2, r7
   200c4:	9906      	ldr	r1, [sp, #24]
   200c6:	9809      	ldr	r0, [sp, #36]	; 0x24
   200c8:	f002 face 	bl	22668 <__ssprint_r>
   200cc:	2800      	cmp	r0, #0
   200ce:	d001      	beq.n	200d4 <_svfprintf_r+0xe8c>
   200d0:	f7ff f941 	bl	1f356 <_svfprintf_r+0x10e>
   200d4:	68bc      	ldr	r4, [r7, #8]
   200d6:	687b      	ldr	r3, [r7, #4]
   200d8:	ae32      	add	r6, sp, #200	; 0xc8
   200da:	e513      	b.n	1fb04 <_svfprintf_r+0x8bc>
   200dc:	003a      	movs	r2, r7
   200de:	9906      	ldr	r1, [sp, #24]
   200e0:	9809      	ldr	r0, [sp, #36]	; 0x24
   200e2:	f002 fac1 	bl	22668 <__ssprint_r>
   200e6:	2800      	cmp	r0, #0
   200e8:	d001      	beq.n	200ee <_svfprintf_r+0xea6>
   200ea:	f7ff f934 	bl	1f356 <_svfprintf_r+0x10e>
   200ee:	687b      	ldr	r3, [r7, #4]
   200f0:	68bc      	ldr	r4, [r7, #8]
   200f2:	4698      	mov	r8, r3
   200f4:	ae32      	add	r6, sp, #200	; 0xc8
   200f6:	e513      	b.n	1fb20 <_svfprintf_r+0x8d8>
   200f8:	0002538c 	.word	0x0002538c
   200fc:	2307      	movs	r3, #7
   200fe:	3207      	adds	r2, #7
   20100:	439a      	bics	r2, r3
   20102:	3301      	adds	r3, #1
   20104:	469c      	mov	ip, r3
   20106:	4494      	add	ip, r2
   20108:	4663      	mov	r3, ip
   2010a:	930f      	str	r3, [sp, #60]	; 0x3c
   2010c:	6853      	ldr	r3, [r2, #4]
   2010e:	6812      	ldr	r2, [r2, #0]
   20110:	930d      	str	r3, [sp, #52]	; 0x34
   20112:	920c      	str	r2, [sp, #48]	; 0x30
   20114:	2b00      	cmp	r3, #0
   20116:	db01      	blt.n	2011c <_svfprintf_r+0xed4>
   20118:	f7ff f97a 	bl	1f410 <_svfprintf_r+0x1c8>
   2011c:	980c      	ldr	r0, [sp, #48]	; 0x30
   2011e:	990d      	ldr	r1, [sp, #52]	; 0x34
   20120:	2300      	movs	r3, #0
   20122:	4242      	negs	r2, r0
   20124:	418b      	sbcs	r3, r1
   20126:	0011      	movs	r1, r2
   20128:	001a      	movs	r2, r3
   2012a:	232d      	movs	r3, #45	; 0x2d
   2012c:	a816      	add	r0, sp, #88	; 0x58
   2012e:	77c3      	strb	r3, [r0, #31]
   20130:	0008      	movs	r0, r1
   20132:	4310      	orrs	r0, r2
   20134:	910c      	str	r1, [sp, #48]	; 0x30
   20136:	920d      	str	r2, [sp, #52]	; 0x34
   20138:	4698      	mov	r8, r3
   2013a:	0002      	movs	r2, r0
   2013c:	3b2c      	subs	r3, #44	; 0x2c
   2013e:	f7ff f970 	bl	1f422 <_svfprintf_r+0x1da>
   20142:	003a      	movs	r2, r7
   20144:	9906      	ldr	r1, [sp, #24]
   20146:	9809      	ldr	r0, [sp, #36]	; 0x24
   20148:	f002 fa8e 	bl	22668 <__ssprint_r>
   2014c:	2800      	cmp	r0, #0
   2014e:	d001      	beq.n	20154 <_svfprintf_r+0xf0c>
   20150:	f7ff f901 	bl	1f356 <_svfprintf_r+0x10e>
   20154:	68bc      	ldr	r4, [r7, #8]
   20156:	ae32      	add	r6, sp, #200	; 0xc8
   20158:	e418      	b.n	1f98c <_svfprintf_r+0x744>
   2015a:	9916      	ldr	r1, [sp, #88]	; 0x58
   2015c:	9d15      	ldr	r5, [sp, #84]	; 0x54
   2015e:	000a      	movs	r2, r1
   20160:	0008      	movs	r0, r1
   20162:	002b      	movs	r3, r5
   20164:	0029      	movs	r1, r5
   20166:	f7fe fd6b 	bl	1ec40 <__aeabi_dcmpun>
   2016a:	2800      	cmp	r0, #0
   2016c:	d000      	beq.n	20170 <_svfprintf_r+0xf28>
   2016e:	e2e6      	b.n	2073e <_svfprintf_r+0x14f6>
   20170:	4653      	mov	r3, sl
   20172:	3301      	adds	r3, #1
   20174:	d100      	bne.n	20178 <_svfprintf_r+0xf30>
   20176:	e20d      	b.n	20594 <_svfprintf_r+0x134c>
   20178:	2320      	movs	r3, #32
   2017a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2017c:	439a      	bics	r2, r3
   2017e:	920e      	str	r2, [sp, #56]	; 0x38
   20180:	2a47      	cmp	r2, #71	; 0x47
   20182:	d100      	bne.n	20186 <_svfprintf_r+0xf3e>
   20184:	e11c      	b.n	203c0 <_svfprintf_r+0x1178>
   20186:	2380      	movs	r3, #128	; 0x80
   20188:	005b      	lsls	r3, r3, #1
   2018a:	4323      	orrs	r3, r4
   2018c:	9308      	str	r3, [sp, #32]
   2018e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   20190:	2b00      	cmp	r3, #0
   20192:	da00      	bge.n	20196 <_svfprintf_r+0xf4e>
   20194:	e221      	b.n	205da <_svfprintf_r+0x1392>
   20196:	9a16      	ldr	r2, [sp, #88]	; 0x58
   20198:	9307      	str	r3, [sp, #28]
   2019a:	2300      	movs	r3, #0
   2019c:	4691      	mov	r9, r2
   2019e:	9310      	str	r3, [sp, #64]	; 0x40
   201a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   201a2:	2b66      	cmp	r3, #102	; 0x66
   201a4:	d100      	bne.n	201a8 <_svfprintf_r+0xf60>
   201a6:	e1fc      	b.n	205a2 <_svfprintf_r+0x135a>
   201a8:	2b46      	cmp	r3, #70	; 0x46
   201aa:	d100      	bne.n	201ae <_svfprintf_r+0xf66>
   201ac:	e0db      	b.n	20366 <_svfprintf_r+0x111e>
   201ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   201b0:	9809      	ldr	r0, [sp, #36]	; 0x24
   201b2:	3a45      	subs	r2, #69	; 0x45
   201b4:	0013      	movs	r3, r2
   201b6:	4259      	negs	r1, r3
   201b8:	4159      	adcs	r1, r3
   201ba:	ab20      	add	r3, sp, #128	; 0x80
   201bc:	000d      	movs	r5, r1
   201be:	9303      	str	r3, [sp, #12]
   201c0:	ab1f      	add	r3, sp, #124	; 0x7c
   201c2:	9302      	str	r3, [sp, #8]
   201c4:	2302      	movs	r3, #2
   201c6:	aa23      	add	r2, sp, #140	; 0x8c
   201c8:	4455      	add	r5, sl
   201ca:	921b      	str	r2, [sp, #108]	; 0x6c
   201cc:	9204      	str	r2, [sp, #16]
   201ce:	9300      	str	r3, [sp, #0]
   201d0:	9501      	str	r5, [sp, #4]
   201d2:	9b07      	ldr	r3, [sp, #28]
   201d4:	464a      	mov	r2, r9
   201d6:	f000 fbf9 	bl	209cc <_dtoa_r>
   201da:	9b12      	ldr	r3, [sp, #72]	; 0x48
   201dc:	9011      	str	r0, [sp, #68]	; 0x44
   201de:	2b67      	cmp	r3, #103	; 0x67
   201e0:	d000      	beq.n	201e4 <_svfprintf_r+0xf9c>
   201e2:	e239      	b.n	20658 <_svfprintf_r+0x1410>
   201e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   201e6:	4698      	mov	r8, r3
   201e8:	44a8      	add	r8, r5
   201ea:	07e3      	lsls	r3, r4, #31
   201ec:	d400      	bmi.n	201f0 <_svfprintf_r+0xfa8>
   201ee:	e28b      	b.n	20708 <_svfprintf_r+0x14c0>
   201f0:	2300      	movs	r3, #0
   201f2:	2200      	movs	r2, #0
   201f4:	4648      	mov	r0, r9
   201f6:	9907      	ldr	r1, [sp, #28]
   201f8:	f7fc f84e 	bl	1c298 <__aeabi_dcmpeq>
   201fc:	4643      	mov	r3, r8
   201fe:	2800      	cmp	r0, #0
   20200:	d10a      	bne.n	20218 <_svfprintf_r+0xfd0>
   20202:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   20204:	4543      	cmp	r3, r8
   20206:	d207      	bcs.n	20218 <_svfprintf_r+0xfd0>
   20208:	2130      	movs	r1, #48	; 0x30
   2020a:	4640      	mov	r0, r8
   2020c:	1c5a      	adds	r2, r3, #1
   2020e:	9223      	str	r2, [sp, #140]	; 0x8c
   20210:	7019      	strb	r1, [r3, #0]
   20212:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   20214:	4298      	cmp	r0, r3
   20216:	d8f9      	bhi.n	2020c <_svfprintf_r+0xfc4>
   20218:	9a11      	ldr	r2, [sp, #68]	; 0x44
   2021a:	1a9b      	subs	r3, r3, r2
   2021c:	9314      	str	r3, [sp, #80]	; 0x50
   2021e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20220:	2b47      	cmp	r3, #71	; 0x47
   20222:	d100      	bne.n	20226 <_svfprintf_r+0xfde>
   20224:	e0f6      	b.n	20414 <_svfprintf_r+0x11cc>
   20226:	9b12      	ldr	r3, [sp, #72]	; 0x48
   20228:	2b65      	cmp	r3, #101	; 0x65
   2022a:	dc00      	bgt.n	2022e <_svfprintf_r+0xfe6>
   2022c:	e226      	b.n	2067c <_svfprintf_r+0x1434>
   2022e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   20230:	2b66      	cmp	r3, #102	; 0x66
   20232:	d100      	bne.n	20236 <_svfprintf_r+0xfee>
   20234:	e1f4      	b.n	20620 <_svfprintf_r+0x13d8>
   20236:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   20238:	9313      	str	r3, [sp, #76]	; 0x4c
   2023a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2023c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2023e:	0019      	movs	r1, r3
   20240:	4291      	cmp	r1, r2
   20242:	dd00      	ble.n	20246 <_svfprintf_r+0xffe>
   20244:	e1d4      	b.n	205f0 <_svfprintf_r+0x13a8>
   20246:	07e3      	lsls	r3, r4, #31
   20248:	d500      	bpl.n	2024c <_svfprintf_r+0x1004>
   2024a:	e249      	b.n	206e0 <_svfprintf_r+0x1498>
   2024c:	43d3      	mvns	r3, r2
   2024e:	17db      	asrs	r3, r3, #31
   20250:	0011      	movs	r1, r2
   20252:	401a      	ands	r2, r3
   20254:	2367      	movs	r3, #103	; 0x67
   20256:	9207      	str	r2, [sp, #28]
   20258:	910e      	str	r1, [sp, #56]	; 0x38
   2025a:	9312      	str	r3, [sp, #72]	; 0x48
   2025c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2025e:	2b00      	cmp	r3, #0
   20260:	d000      	beq.n	20264 <_svfprintf_r+0x101c>
   20262:	e0cf      	b.n	20404 <_svfprintf_r+0x11bc>
   20264:	ab16      	add	r3, sp, #88	; 0x58
   20266:	7fdb      	ldrb	r3, [r3, #31]
   20268:	4698      	mov	r8, r3
   2026a:	2300      	movs	r3, #0
   2026c:	469a      	mov	sl, r3
   2026e:	f7ff f903 	bl	1f478 <_svfprintf_r+0x230>
   20272:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   20274:	990a      	ldr	r1, [sp, #40]	; 0x28
   20276:	6813      	ldr	r3, [r2, #0]
   20278:	6019      	str	r1, [r3, #0]
   2027a:	0013      	movs	r3, r2
   2027c:	3304      	adds	r3, #4
   2027e:	930f      	str	r3, [sp, #60]	; 0x3c
   20280:	f7ff f80d 	bl	1f29e <_svfprintf_r+0x56>
   20284:	003a      	movs	r2, r7
   20286:	9906      	ldr	r1, [sp, #24]
   20288:	9809      	ldr	r0, [sp, #36]	; 0x24
   2028a:	f002 f9ed 	bl	22668 <__ssprint_r>
   2028e:	2800      	cmp	r0, #0
   20290:	d001      	beq.n	20296 <_svfprintf_r+0x104e>
   20292:	f7ff f860 	bl	1f356 <_svfprintf_r+0x10e>
   20296:	ae32      	add	r6, sp, #200	; 0xc8
   20298:	e48e      	b.n	1fbb8 <_svfprintf_r+0x970>
   2029a:	4bde      	ldr	r3, [pc, #888]	; (20614 <_svfprintf_r+0x13cc>)
   2029c:	3401      	adds	r4, #1
   2029e:	6033      	str	r3, [r6, #0]
   202a0:	2301      	movs	r3, #1
   202a2:	6073      	str	r3, [r6, #4]
   202a4:	687b      	ldr	r3, [r7, #4]
   202a6:	60bc      	str	r4, [r7, #8]
   202a8:	3301      	adds	r3, #1
   202aa:	607b      	str	r3, [r7, #4]
   202ac:	2b07      	cmp	r3, #7
   202ae:	dc7a      	bgt.n	203a6 <_svfprintf_r+0x115e>
   202b0:	3608      	adds	r6, #8
   202b2:	2800      	cmp	r0, #0
   202b4:	d107      	bne.n	202c6 <_svfprintf_r+0x107e>
   202b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   202b8:	2b00      	cmp	r3, #0
   202ba:	d104      	bne.n	202c6 <_svfprintf_r+0x107e>
   202bc:	9b08      	ldr	r3, [sp, #32]
   202be:	07db      	lsls	r3, r3, #31
   202c0:	d401      	bmi.n	202c6 <_svfprintf_r+0x107e>
   202c2:	f7ff fbb7 	bl	1fa34 <_svfprintf_r+0x7ec>
   202c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
   202c8:	6033      	str	r3, [r6, #0]
   202ca:	9b18      	ldr	r3, [sp, #96]	; 0x60
   202cc:	1919      	adds	r1, r3, r4
   202ce:	6073      	str	r3, [r6, #4]
   202d0:	687b      	ldr	r3, [r7, #4]
   202d2:	60b9      	str	r1, [r7, #8]
   202d4:	3301      	adds	r3, #1
   202d6:	607b      	str	r3, [r7, #4]
   202d8:	2b07      	cmp	r3, #7
   202da:	dd00      	ble.n	202de <_svfprintf_r+0x1096>
   202dc:	e1f2      	b.n	206c4 <_svfprintf_r+0x147c>
   202de:	0032      	movs	r2, r6
   202e0:	3208      	adds	r2, #8
   202e2:	2800      	cmp	r0, #0
   202e4:	da00      	bge.n	202e8 <_svfprintf_r+0x10a0>
   202e6:	e1cc      	b.n	20682 <_svfprintf_r+0x143a>
   202e8:	9811      	ldr	r0, [sp, #68]	; 0x44
   202ea:	3301      	adds	r3, #1
   202ec:	6010      	str	r0, [r2, #0]
   202ee:	9814      	ldr	r0, [sp, #80]	; 0x50
   202f0:	607b      	str	r3, [r7, #4]
   202f2:	1844      	adds	r4, r0, r1
   202f4:	6050      	str	r0, [r2, #4]
   202f6:	60bc      	str	r4, [r7, #8]
   202f8:	2b07      	cmp	r3, #7
   202fa:	dd00      	ble.n	202fe <_svfprintf_r+0x10b6>
   202fc:	e437      	b.n	1fb6e <_svfprintf_r+0x926>
   202fe:	3208      	adds	r2, #8
   20300:	0016      	movs	r6, r2
   20302:	f7ff fb97 	bl	1fa34 <_svfprintf_r+0x7ec>
   20306:	990f      	ldr	r1, [sp, #60]	; 0x3c
   20308:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2030a:	680b      	ldr	r3, [r1, #0]
   2030c:	601a      	str	r2, [r3, #0]
   2030e:	17d2      	asrs	r2, r2, #31
   20310:	605a      	str	r2, [r3, #4]
   20312:	000b      	movs	r3, r1
   20314:	3304      	adds	r3, #4
   20316:	930f      	str	r3, [sp, #60]	; 0x3c
   20318:	f7fe ffc1 	bl	1f29e <_svfprintf_r+0x56>
   2031c:	464b      	mov	r3, r9
   2031e:	3101      	adds	r1, #1
   20320:	431c      	orrs	r4, r3
   20322:	780b      	ldrb	r3, [r1, #0]
   20324:	f7fe fff4 	bl	1f310 <_svfprintf_r+0xc8>
   20328:	4bbb      	ldr	r3, [pc, #748]	; (20618 <_svfprintf_r+0x13d0>)
   2032a:	9311      	str	r3, [sp, #68]	; 0x44
   2032c:	f7ff f937 	bl	1f59e <_svfprintf_r+0x356>
   20330:	003a      	movs	r2, r7
   20332:	9906      	ldr	r1, [sp, #24]
   20334:	9809      	ldr	r0, [sp, #36]	; 0x24
   20336:	f002 f997 	bl	22668 <__ssprint_r>
   2033a:	2800      	cmp	r0, #0
   2033c:	d001      	beq.n	20342 <_svfprintf_r+0x10fa>
   2033e:	f7ff f80a 	bl	1f356 <_svfprintf_r+0x10e>
   20342:	68bc      	ldr	r4, [r7, #8]
   20344:	ae32      	add	r6, sp, #200	; 0xc8
   20346:	e5f1      	b.n	1ff2c <_svfprintf_r+0xce4>
   20348:	2140      	movs	r1, #64	; 0x40
   2034a:	9809      	ldr	r0, [sp, #36]	; 0x24
   2034c:	f001 fb2e 	bl	219ac <_malloc_r>
   20350:	9b06      	ldr	r3, [sp, #24]
   20352:	6018      	str	r0, [r3, #0]
   20354:	6118      	str	r0, [r3, #16]
   20356:	2800      	cmp	r0, #0
   20358:	d100      	bne.n	2035c <_svfprintf_r+0x1114>
   2035a:	e24f      	b.n	207fc <_svfprintf_r+0x15b4>
   2035c:	2340      	movs	r3, #64	; 0x40
   2035e:	9a06      	ldr	r2, [sp, #24]
   20360:	6153      	str	r3, [r2, #20]
   20362:	f7fe ff8e 	bl	1f282 <_svfprintf_r+0x3a>
   20366:	ab23      	add	r3, sp, #140	; 0x8c
   20368:	931b      	str	r3, [sp, #108]	; 0x6c
   2036a:	9304      	str	r3, [sp, #16]
   2036c:	ab20      	add	r3, sp, #128	; 0x80
   2036e:	9303      	str	r3, [sp, #12]
   20370:	ab1f      	add	r3, sp, #124	; 0x7c
   20372:	9302      	str	r3, [sp, #8]
   20374:	4653      	mov	r3, sl
   20376:	9301      	str	r3, [sp, #4]
   20378:	2303      	movs	r3, #3
   2037a:	464a      	mov	r2, r9
   2037c:	9300      	str	r3, [sp, #0]
   2037e:	9809      	ldr	r0, [sp, #36]	; 0x24
   20380:	9b07      	ldr	r3, [sp, #28]
   20382:	f000 fb23 	bl	209cc <_dtoa_r>
   20386:	4655      	mov	r5, sl
   20388:	9011      	str	r0, [sp, #68]	; 0x44
   2038a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2038c:	4698      	mov	r8, r3
   2038e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   20390:	44a8      	add	r8, r5
   20392:	2b46      	cmp	r3, #70	; 0x46
   20394:	d000      	beq.n	20398 <_svfprintf_r+0x1150>
   20396:	e72b      	b.n	201f0 <_svfprintf_r+0xfa8>
   20398:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2039a:	781b      	ldrb	r3, [r3, #0]
   2039c:	2b30      	cmp	r3, #48	; 0x30
   2039e:	d016      	beq.n	203ce <_svfprintf_r+0x1186>
   203a0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   203a2:	4498      	add	r8, r3
   203a4:	e724      	b.n	201f0 <_svfprintf_r+0xfa8>
   203a6:	003a      	movs	r2, r7
   203a8:	9906      	ldr	r1, [sp, #24]
   203aa:	9809      	ldr	r0, [sp, #36]	; 0x24
   203ac:	f002 f95c 	bl	22668 <__ssprint_r>
   203b0:	2800      	cmp	r0, #0
   203b2:	d001      	beq.n	203b8 <_svfprintf_r+0x1170>
   203b4:	f7fe ffcf 	bl	1f356 <_svfprintf_r+0x10e>
   203b8:	981f      	ldr	r0, [sp, #124]	; 0x7c
   203ba:	68bc      	ldr	r4, [r7, #8]
   203bc:	ae32      	add	r6, sp, #200	; 0xc8
   203be:	e778      	b.n	202b2 <_svfprintf_r+0x106a>
   203c0:	4653      	mov	r3, sl
   203c2:	2b00      	cmp	r3, #0
   203c4:	d000      	beq.n	203c8 <_svfprintf_r+0x1180>
   203c6:	e6de      	b.n	20186 <_svfprintf_r+0xf3e>
   203c8:	3301      	adds	r3, #1
   203ca:	469a      	mov	sl, r3
   203cc:	e6db      	b.n	20186 <_svfprintf_r+0xf3e>
   203ce:	2200      	movs	r2, #0
   203d0:	2300      	movs	r3, #0
   203d2:	4648      	mov	r0, r9
   203d4:	9907      	ldr	r1, [sp, #28]
   203d6:	f7fb ff5f 	bl	1c298 <__aeabi_dcmpeq>
   203da:	2800      	cmp	r0, #0
   203dc:	d1e0      	bne.n	203a0 <_svfprintf_r+0x1158>
   203de:	2301      	movs	r3, #1
   203e0:	1b5b      	subs	r3, r3, r5
   203e2:	931f      	str	r3, [sp, #124]	; 0x7c
   203e4:	4498      	add	r8, r3
   203e6:	e703      	b.n	201f0 <_svfprintf_r+0xfa8>
   203e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   203ea:	ab32      	add	r3, sp, #200	; 0xc8
   203ec:	1a9b      	subs	r3, r3, r2
   203ee:	930e      	str	r3, [sp, #56]	; 0x38
   203f0:	f7ff f83a 	bl	1f468 <_svfprintf_r+0x220>
   203f4:	9811      	ldr	r0, [sp, #68]	; 0x44
   203f6:	f7fe fef5 	bl	1f1e4 <strlen>
   203fa:	0002      	movs	r2, r0
   203fc:	900e      	str	r0, [sp, #56]	; 0x38
   203fe:	0003      	movs	r3, r0
   20400:	f7ff f9cd 	bl	1f79e <_svfprintf_r+0x556>
   20404:	232d      	movs	r3, #45	; 0x2d
   20406:	aa16      	add	r2, sp, #88	; 0x58
   20408:	77d3      	strb	r3, [r2, #31]
   2040a:	4698      	mov	r8, r3
   2040c:	2300      	movs	r3, #0
   2040e:	469a      	mov	sl, r3
   20410:	f7ff f835 	bl	1f47e <_svfprintf_r+0x236>
   20414:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   20416:	9313      	str	r3, [sp, #76]	; 0x4c
   20418:	1cda      	adds	r2, r3, #3
   2041a:	db02      	blt.n	20422 <_svfprintf_r+0x11da>
   2041c:	459a      	cmp	sl, r3
   2041e:	db00      	blt.n	20422 <_svfprintf_r+0x11da>
   20420:	e70b      	b.n	2023a <_svfprintf_r+0xff2>
   20422:	9b12      	ldr	r3, [sp, #72]	; 0x48
   20424:	3b02      	subs	r3, #2
   20426:	9312      	str	r3, [sp, #72]	; 0x48
   20428:	222c      	movs	r2, #44	; 0x2c
   2042a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2042c:	2148      	movs	r1, #72	; 0x48
   2042e:	1e5d      	subs	r5, r3, #1
   20430:	ab16      	add	r3, sp, #88	; 0x58
   20432:	189b      	adds	r3, r3, r2
   20434:	466a      	mov	r2, sp
   20436:	1852      	adds	r2, r2, r1
   20438:	7812      	ldrb	r2, [r2, #0]
   2043a:	951f      	str	r5, [sp, #124]	; 0x7c
   2043c:	701a      	strb	r2, [r3, #0]
   2043e:	2d00      	cmp	r5, #0
   20440:	da00      	bge.n	20444 <_svfprintf_r+0x11fc>
   20442:	e1a4      	b.n	2078e <_svfprintf_r+0x1546>
   20444:	212d      	movs	r1, #45	; 0x2d
   20446:	232b      	movs	r3, #43	; 0x2b
   20448:	aa16      	add	r2, sp, #88	; 0x58
   2044a:	1852      	adds	r2, r2, r1
   2044c:	7013      	strb	r3, [r2, #0]
   2044e:	2d09      	cmp	r5, #9
   20450:	dc00      	bgt.n	20454 <_svfprintf_r+0x120c>
   20452:	e14c      	b.n	206ee <_svfprintf_r+0x14a6>
   20454:	aa16      	add	r2, sp, #88	; 0x58
   20456:	233b      	movs	r3, #59	; 0x3b
   20458:	4694      	mov	ip, r2
   2045a:	4463      	add	r3, ip
   2045c:	469a      	mov	sl, r3
   2045e:	46b1      	mov	r9, r6
   20460:	46a0      	mov	r8, r4
   20462:	4656      	mov	r6, sl
   20464:	e000      	b.n	20468 <_svfprintf_r+0x1220>
   20466:	0026      	movs	r6, r4
   20468:	0028      	movs	r0, r5
   2046a:	210a      	movs	r1, #10
   2046c:	f7fb fefe 	bl	1c26c <__aeabi_idivmod>
   20470:	1e74      	subs	r4, r6, #1
   20472:	3130      	adds	r1, #48	; 0x30
   20474:	7021      	strb	r1, [r4, #0]
   20476:	0028      	movs	r0, r5
   20478:	210a      	movs	r1, #10
   2047a:	f7fb fe11 	bl	1c0a0 <__divsi3>
   2047e:	0005      	movs	r5, r0
   20480:	2809      	cmp	r0, #9
   20482:	dcf0      	bgt.n	20466 <_svfprintf_r+0x121e>
   20484:	0023      	movs	r3, r4
   20486:	4644      	mov	r4, r8
   20488:	46b0      	mov	r8, r6
   2048a:	464e      	mov	r6, r9
   2048c:	4699      	mov	r9, r3
   2048e:	0003      	movs	r3, r0
   20490:	3330      	adds	r3, #48	; 0x30
   20492:	b2d8      	uxtb	r0, r3
   20494:	4643      	mov	r3, r8
   20496:	3b02      	subs	r3, #2
   20498:	7018      	strb	r0, [r3, #0]
   2049a:	459a      	cmp	sl, r3
   2049c:	d800      	bhi.n	204a0 <_svfprintf_r+0x1258>
   2049e:	e1b4      	b.n	2080a <_svfprintf_r+0x15c2>
   204a0:	4642      	mov	r2, r8
   204a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   204a4:	4645      	mov	r5, r8
   204a6:	1a99      	subs	r1, r3, r2
   204a8:	2301      	movs	r3, #1
   204aa:	3107      	adds	r1, #7
   204ac:	425b      	negs	r3, r3
   204ae:	e001      	b.n	204b4 <_svfprintf_r+0x126c>
   204b0:	5ce8      	ldrb	r0, [r5, r3]
   204b2:	3301      	adds	r3, #1
   204b4:	aa21      	add	r2, sp, #132	; 0x84
   204b6:	18d2      	adds	r2, r2, r3
   204b8:	70d0      	strb	r0, [r2, #3]
   204ba:	428b      	cmp	r3, r1
   204bc:	d1f8      	bne.n	204b0 <_svfprintf_r+0x1268>
   204be:	a916      	add	r1, sp, #88	; 0x58
   204c0:	468c      	mov	ip, r1
   204c2:	222e      	movs	r2, #46	; 0x2e
   204c4:	464b      	mov	r3, r9
   204c6:	4462      	add	r2, ip
   204c8:	4694      	mov	ip, r2
   204ca:	1afb      	subs	r3, r7, r3
   204cc:	4463      	add	r3, ip
   204ce:	aa21      	add	r2, sp, #132	; 0x84
   204d0:	9914      	ldr	r1, [sp, #80]	; 0x50
   204d2:	1a9b      	subs	r3, r3, r2
   204d4:	469c      	mov	ip, r3
   204d6:	000a      	movs	r2, r1
   204d8:	4462      	add	r2, ip
   204da:	931a      	str	r3, [sp, #104]	; 0x68
   204dc:	920e      	str	r2, [sp, #56]	; 0x38
   204de:	2901      	cmp	r1, #1
   204e0:	dc00      	bgt.n	204e4 <_svfprintf_r+0x129c>
   204e2:	e145      	b.n	20770 <_svfprintf_r+0x1528>
   204e4:	9a18      	ldr	r2, [sp, #96]	; 0x60
   204e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   204e8:	4694      	mov	ip, r2
   204ea:	4463      	add	r3, ip
   204ec:	001a      	movs	r2, r3
   204ee:	930e      	str	r3, [sp, #56]	; 0x38
   204f0:	43db      	mvns	r3, r3
   204f2:	17db      	asrs	r3, r3, #31
   204f4:	401a      	ands	r2, r3
   204f6:	2300      	movs	r3, #0
   204f8:	9207      	str	r2, [sp, #28]
   204fa:	9313      	str	r3, [sp, #76]	; 0x4c
   204fc:	e6ae      	b.n	2025c <_svfprintf_r+0x1014>
   204fe:	2301      	movs	r3, #1
   20500:	425b      	negs	r3, r3
   20502:	930a      	str	r3, [sp, #40]	; 0x28
   20504:	f7fe ff2d 	bl	1f362 <_svfprintf_r+0x11a>
   20508:	003a      	movs	r2, r7
   2050a:	9906      	ldr	r1, [sp, #24]
   2050c:	9809      	ldr	r0, [sp, #36]	; 0x24
   2050e:	f002 f8ab 	bl	22668 <__ssprint_r>
   20512:	2800      	cmp	r0, #0
   20514:	d001      	beq.n	2051a <_svfprintf_r+0x12d2>
   20516:	f7fe ff1e 	bl	1f356 <_svfprintf_r+0x10e>
   2051a:	68bc      	ldr	r4, [r7, #8]
   2051c:	ae32      	add	r6, sp, #200	; 0xc8
   2051e:	e43c      	b.n	1fd9a <_svfprintf_r+0xb52>
   20520:	003a      	movs	r2, r7
   20522:	9906      	ldr	r1, [sp, #24]
   20524:	9809      	ldr	r0, [sp, #36]	; 0x24
   20526:	f002 f89f 	bl	22668 <__ssprint_r>
   2052a:	2800      	cmp	r0, #0
   2052c:	d001      	beq.n	20532 <_svfprintf_r+0x12ea>
   2052e:	f7fe ff12 	bl	1f356 <_svfprintf_r+0x10e>
   20532:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   20534:	68bc      	ldr	r4, [r7, #8]
   20536:	ae32      	add	r6, sp, #200	; 0xc8
   20538:	e56a      	b.n	20010 <_svfprintf_r+0xdc8>
   2053a:	003a      	movs	r2, r7
   2053c:	9906      	ldr	r1, [sp, #24]
   2053e:	9809      	ldr	r0, [sp, #36]	; 0x24
   20540:	f002 f892 	bl	22668 <__ssprint_r>
   20544:	2800      	cmp	r0, #0
   20546:	d001      	beq.n	2054c <_svfprintf_r+0x1304>
   20548:	f7fe ff05 	bl	1f356 <_svfprintf_r+0x10e>
   2054c:	68bc      	ldr	r4, [r7, #8]
   2054e:	ae32      	add	r6, sp, #200	; 0xc8
   20550:	e557      	b.n	20002 <_svfprintf_r+0xdba>
   20552:	003a      	movs	r2, r7
   20554:	9906      	ldr	r1, [sp, #24]
   20556:	9809      	ldr	r0, [sp, #36]	; 0x24
   20558:	f002 f886 	bl	22668 <__ssprint_r>
   2055c:	2800      	cmp	r0, #0
   2055e:	d001      	beq.n	20564 <_svfprintf_r+0x131c>
   20560:	f7fe fef9 	bl	1f356 <_svfprintf_r+0x10e>
   20564:	9b14      	ldr	r3, [sp, #80]	; 0x50
   20566:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   20568:	68bc      	ldr	r4, [r7, #8]
   2056a:	1a9b      	subs	r3, r3, r2
   2056c:	ae32      	add	r6, sp, #200	; 0xc8
   2056e:	e56a      	b.n	20046 <_svfprintf_r+0xdfe>
   20570:	4653      	mov	r3, sl
   20572:	9307      	str	r3, [sp, #28]
   20574:	2b06      	cmp	r3, #6
   20576:	d901      	bls.n	2057c <_svfprintf_r+0x1334>
   20578:	2306      	movs	r3, #6
   2057a:	9307      	str	r3, [sp, #28]
   2057c:	9b07      	ldr	r3, [sp, #28]
   2057e:	950f      	str	r5, [sp, #60]	; 0x3c
   20580:	930e      	str	r3, [sp, #56]	; 0x38
   20582:	2300      	movs	r3, #0
   20584:	4698      	mov	r8, r3
   20586:	469a      	mov	sl, r3
   20588:	9313      	str	r3, [sp, #76]	; 0x4c
   2058a:	4b24      	ldr	r3, [pc, #144]	; (2061c <_svfprintf_r+0x13d4>)
   2058c:	9408      	str	r4, [sp, #32]
   2058e:	9311      	str	r3, [sp, #68]	; 0x44
   20590:	f7fe ff78 	bl	1f484 <_svfprintf_r+0x23c>
   20594:	2320      	movs	r3, #32
   20596:	9a12      	ldr	r2, [sp, #72]	; 0x48
   20598:	439a      	bics	r2, r3
   2059a:	3b1a      	subs	r3, #26
   2059c:	920e      	str	r2, [sp, #56]	; 0x38
   2059e:	469a      	mov	sl, r3
   205a0:	e5f1      	b.n	20186 <_svfprintf_r+0xf3e>
   205a2:	ab23      	add	r3, sp, #140	; 0x8c
   205a4:	931b      	str	r3, [sp, #108]	; 0x6c
   205a6:	9304      	str	r3, [sp, #16]
   205a8:	ab20      	add	r3, sp, #128	; 0x80
   205aa:	9303      	str	r3, [sp, #12]
   205ac:	ab1f      	add	r3, sp, #124	; 0x7c
   205ae:	9302      	str	r3, [sp, #8]
   205b0:	4653      	mov	r3, sl
   205b2:	9301      	str	r3, [sp, #4]
   205b4:	2303      	movs	r3, #3
   205b6:	464a      	mov	r2, r9
   205b8:	9300      	str	r3, [sp, #0]
   205ba:	9809      	ldr	r0, [sp, #36]	; 0x24
   205bc:	9b07      	ldr	r3, [sp, #28]
   205be:	f000 fa05 	bl	209cc <_dtoa_r>
   205c2:	0003      	movs	r3, r0
   205c4:	4453      	add	r3, sl
   205c6:	9011      	str	r0, [sp, #68]	; 0x44
   205c8:	4698      	mov	r8, r3
   205ca:	4655      	mov	r5, sl
   205cc:	e6e4      	b.n	20398 <_svfprintf_r+0x1150>
   205ce:	232d      	movs	r3, #45	; 0x2d
   205d0:	aa16      	add	r2, sp, #88	; 0x58
   205d2:	77d3      	strb	r3, [r2, #31]
   205d4:	4698      	mov	r8, r3
   205d6:	f7fe ffdb 	bl	1f590 <_svfprintf_r+0x348>
   205da:	2280      	movs	r2, #128	; 0x80
   205dc:	0612      	lsls	r2, r2, #24
   205de:	4694      	mov	ip, r2
   205e0:	9b16      	ldr	r3, [sp, #88]	; 0x58
   205e2:	4699      	mov	r9, r3
   205e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   205e6:	4463      	add	r3, ip
   205e8:	9307      	str	r3, [sp, #28]
   205ea:	232d      	movs	r3, #45	; 0x2d
   205ec:	9310      	str	r3, [sp, #64]	; 0x40
   205ee:	e5d7      	b.n	201a0 <_svfprintf_r+0xf58>
   205f0:	9a18      	ldr	r2, [sp, #96]	; 0x60
   205f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   205f4:	4694      	mov	ip, r2
   205f6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   205f8:	4463      	add	r3, ip
   205fa:	930e      	str	r3, [sp, #56]	; 0x38
   205fc:	2a00      	cmp	r2, #0
   205fe:	dc00      	bgt.n	20602 <_svfprintf_r+0x13ba>
   20600:	e0ce      	b.n	207a0 <_svfprintf_r+0x1558>
   20602:	001a      	movs	r2, r3
   20604:	43db      	mvns	r3, r3
   20606:	17db      	asrs	r3, r3, #31
   20608:	401a      	ands	r2, r3
   2060a:	2367      	movs	r3, #103	; 0x67
   2060c:	9207      	str	r2, [sp, #28]
   2060e:	9312      	str	r3, [sp, #72]	; 0x48
   20610:	e624      	b.n	2025c <_svfprintf_r+0x1014>
   20612:	46c0      	nop			; (mov r8, r8)
   20614:	00025378 	.word	0x00025378
   20618:	0002533c 	.word	0x0002533c
   2061c:	00025370 	.word	0x00025370
   20620:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   20622:	9313      	str	r3, [sp, #76]	; 0x4c
   20624:	2b00      	cmp	r3, #0
   20626:	dc00      	bgt.n	2062a <_svfprintf_r+0x13e2>
   20628:	e0d5      	b.n	207d6 <_svfprintf_r+0x158e>
   2062a:	4652      	mov	r2, sl
   2062c:	2a00      	cmp	r2, #0
   2062e:	d000      	beq.n	20632 <_svfprintf_r+0x13ea>
   20630:	e092      	b.n	20758 <_svfprintf_r+0x1510>
   20632:	07e2      	lsls	r2, r4, #31
   20634:	d500      	bpl.n	20638 <_svfprintf_r+0x13f0>
   20636:	e08f      	b.n	20758 <_svfprintf_r+0x1510>
   20638:	9307      	str	r3, [sp, #28]
   2063a:	930e      	str	r3, [sp, #56]	; 0x38
   2063c:	e60e      	b.n	2025c <_svfprintf_r+0x1014>
   2063e:	ab16      	add	r3, sp, #88	; 0x58
   20640:	7fdb      	ldrb	r3, [r3, #31]
   20642:	950f      	str	r5, [sp, #60]	; 0x3c
   20644:	4698      	mov	r8, r3
   20646:	4653      	mov	r3, sl
   20648:	9307      	str	r3, [sp, #28]
   2064a:	930e      	str	r3, [sp, #56]	; 0x38
   2064c:	2300      	movs	r3, #0
   2064e:	9408      	str	r4, [sp, #32]
   20650:	469a      	mov	sl, r3
   20652:	9313      	str	r3, [sp, #76]	; 0x4c
   20654:	f7fe ff10 	bl	1f478 <_svfprintf_r+0x230>
   20658:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2065a:	4698      	mov	r8, r3
   2065c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2065e:	44a8      	add	r8, r5
   20660:	2b47      	cmp	r3, #71	; 0x47
   20662:	d000      	beq.n	20666 <_svfprintf_r+0x141e>
   20664:	e5c4      	b.n	201f0 <_svfprintf_r+0xfa8>
   20666:	07e3      	lsls	r3, r4, #31
   20668:	d500      	bpl.n	2066c <_svfprintf_r+0x1424>
   2066a:	e68e      	b.n	2038a <_svfprintf_r+0x1142>
   2066c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2066e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   20670:	1a9b      	subs	r3, r3, r2
   20672:	9314      	str	r3, [sp, #80]	; 0x50
   20674:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20676:	2b47      	cmp	r3, #71	; 0x47
   20678:	d100      	bne.n	2067c <_svfprintf_r+0x1434>
   2067a:	e6cb      	b.n	20414 <_svfprintf_r+0x11cc>
   2067c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2067e:	9313      	str	r3, [sp, #76]	; 0x4c
   20680:	e6d2      	b.n	20428 <_svfprintf_r+0x11e0>
   20682:	4244      	negs	r4, r0
   20684:	3010      	adds	r0, #16
   20686:	db00      	blt.n	2068a <_svfprintf_r+0x1442>
   20688:	e0d0      	b.n	2082c <_svfprintf_r+0x15e4>
   2068a:	486e      	ldr	r0, [pc, #440]	; (20844 <_svfprintf_r+0x15fc>)
   2068c:	2610      	movs	r6, #16
   2068e:	0005      	movs	r5, r0
   20690:	e003      	b.n	2069a <_svfprintf_r+0x1452>
   20692:	3208      	adds	r2, #8
   20694:	3c10      	subs	r4, #16
   20696:	2c10      	cmp	r4, #16
   20698:	dd38      	ble.n	2070c <_svfprintf_r+0x14c4>
   2069a:	3110      	adds	r1, #16
   2069c:	3301      	adds	r3, #1
   2069e:	6015      	str	r5, [r2, #0]
   206a0:	6056      	str	r6, [r2, #4]
   206a2:	60b9      	str	r1, [r7, #8]
   206a4:	607b      	str	r3, [r7, #4]
   206a6:	2b07      	cmp	r3, #7
   206a8:	ddf3      	ble.n	20692 <_svfprintf_r+0x144a>
   206aa:	003a      	movs	r2, r7
   206ac:	9906      	ldr	r1, [sp, #24]
   206ae:	9809      	ldr	r0, [sp, #36]	; 0x24
   206b0:	f001 ffda 	bl	22668 <__ssprint_r>
   206b4:	2800      	cmp	r0, #0
   206b6:	d001      	beq.n	206bc <_svfprintf_r+0x1474>
   206b8:	f7fe fe4d 	bl	1f356 <_svfprintf_r+0x10e>
   206bc:	68b9      	ldr	r1, [r7, #8]
   206be:	687b      	ldr	r3, [r7, #4]
   206c0:	aa32      	add	r2, sp, #200	; 0xc8
   206c2:	e7e7      	b.n	20694 <_svfprintf_r+0x144c>
   206c4:	003a      	movs	r2, r7
   206c6:	9906      	ldr	r1, [sp, #24]
   206c8:	9809      	ldr	r0, [sp, #36]	; 0x24
   206ca:	f001 ffcd 	bl	22668 <__ssprint_r>
   206ce:	2800      	cmp	r0, #0
   206d0:	d001      	beq.n	206d6 <_svfprintf_r+0x148e>
   206d2:	f7fe fe40 	bl	1f356 <_svfprintf_r+0x10e>
   206d6:	981f      	ldr	r0, [sp, #124]	; 0x7c
   206d8:	68b9      	ldr	r1, [r7, #8]
   206da:	687b      	ldr	r3, [r7, #4]
   206dc:	aa32      	add	r2, sp, #200	; 0xc8
   206de:	e600      	b.n	202e2 <_svfprintf_r+0x109a>
   206e0:	9a18      	ldr	r2, [sp, #96]	; 0x60
   206e2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   206e4:	4694      	mov	ip, r2
   206e6:	4463      	add	r3, ip
   206e8:	001a      	movs	r2, r3
   206ea:	930e      	str	r3, [sp, #56]	; 0x38
   206ec:	e78a      	b.n	20604 <_svfprintf_r+0x13bc>
   206ee:	212e      	movs	r1, #46	; 0x2e
   206f0:	2330      	movs	r3, #48	; 0x30
   206f2:	aa16      	add	r2, sp, #88	; 0x58
   206f4:	1852      	adds	r2, r2, r1
   206f6:	7013      	strb	r3, [r2, #0]
   206f8:	002b      	movs	r3, r5
   206fa:	aa16      	add	r2, sp, #88	; 0x58
   206fc:	3101      	adds	r1, #1
   206fe:	3330      	adds	r3, #48	; 0x30
   20700:	1852      	adds	r2, r2, r1
   20702:	7013      	strb	r3, [r2, #0]
   20704:	ab22      	add	r3, sp, #136	; 0x88
   20706:	e6e2      	b.n	204ce <_svfprintf_r+0x1286>
   20708:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2070a:	e585      	b.n	20218 <_svfprintf_r+0xfd0>
   2070c:	46a9      	mov	r9, r5
   2070e:	4648      	mov	r0, r9
   20710:	1909      	adds	r1, r1, r4
   20712:	3301      	adds	r3, #1
   20714:	6010      	str	r0, [r2, #0]
   20716:	6054      	str	r4, [r2, #4]
   20718:	60b9      	str	r1, [r7, #8]
   2071a:	3208      	adds	r2, #8
   2071c:	607b      	str	r3, [r7, #4]
   2071e:	2b07      	cmp	r3, #7
   20720:	dc00      	bgt.n	20724 <_svfprintf_r+0x14dc>
   20722:	e5e1      	b.n	202e8 <_svfprintf_r+0x10a0>
   20724:	003a      	movs	r2, r7
   20726:	9906      	ldr	r1, [sp, #24]
   20728:	9809      	ldr	r0, [sp, #36]	; 0x24
   2072a:	f001 ff9d 	bl	22668 <__ssprint_r>
   2072e:	2800      	cmp	r0, #0
   20730:	d001      	beq.n	20736 <_svfprintf_r+0x14ee>
   20732:	f7fe fe10 	bl	1f356 <_svfprintf_r+0x10e>
   20736:	68b9      	ldr	r1, [r7, #8]
   20738:	687b      	ldr	r3, [r7, #4]
   2073a:	aa32      	add	r2, sp, #200	; 0xc8
   2073c:	e5d4      	b.n	202e8 <_svfprintf_r+0x10a0>
   2073e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   20740:	2b00      	cmp	r3, #0
   20742:	db38      	blt.n	207b6 <_svfprintf_r+0x156e>
   20744:	ab16      	add	r3, sp, #88	; 0x58
   20746:	7fdb      	ldrb	r3, [r3, #31]
   20748:	4698      	mov	r8, r3
   2074a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2074c:	2b47      	cmp	r3, #71	; 0x47
   2074e:	dc2e      	bgt.n	207ae <_svfprintf_r+0x1566>
   20750:	4b3d      	ldr	r3, [pc, #244]	; (20848 <_svfprintf_r+0x1600>)
   20752:	9311      	str	r3, [sp, #68]	; 0x44
   20754:	f7fe ff23 	bl	1f59e <_svfprintf_r+0x356>
   20758:	9a18      	ldr	r2, [sp, #96]	; 0x60
   2075a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2075c:	4694      	mov	ip, r2
   2075e:	4463      	add	r3, ip
   20760:	4453      	add	r3, sl
   20762:	001a      	movs	r2, r3
   20764:	930e      	str	r3, [sp, #56]	; 0x38
   20766:	43db      	mvns	r3, r3
   20768:	17db      	asrs	r3, r3, #31
   2076a:	401a      	ands	r2, r3
   2076c:	9207      	str	r2, [sp, #28]
   2076e:	e575      	b.n	2025c <_svfprintf_r+0x1014>
   20770:	2301      	movs	r3, #1
   20772:	4023      	ands	r3, r4
   20774:	9313      	str	r3, [sp, #76]	; 0x4c
   20776:	d000      	beq.n	2077a <_svfprintf_r+0x1532>
   20778:	e6b4      	b.n	204e4 <_svfprintf_r+0x129c>
   2077a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2077c:	43d3      	mvns	r3, r2
   2077e:	17db      	asrs	r3, r3, #31
   20780:	401a      	ands	r2, r3
   20782:	9207      	str	r2, [sp, #28]
   20784:	e56a      	b.n	2025c <_svfprintf_r+0x1014>
   20786:	4a2f      	ldr	r2, [pc, #188]	; (20844 <_svfprintf_r+0x15fc>)
   20788:	687b      	ldr	r3, [r7, #4]
   2078a:	4691      	mov	r9, r2
   2078c:	e42d      	b.n	1ffea <_svfprintf_r+0xda2>
   2078e:	2301      	movs	r3, #1
   20790:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   20792:	391b      	subs	r1, #27
   20794:	1a9d      	subs	r5, r3, r2
   20796:	aa16      	add	r2, sp, #88	; 0x58
   20798:	332c      	adds	r3, #44	; 0x2c
   2079a:	1852      	adds	r2, r2, r1
   2079c:	7013      	strb	r3, [r2, #0]
   2079e:	e656      	b.n	2044e <_svfprintf_r+0x1206>
   207a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   207a2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   207a4:	1a98      	subs	r0, r3, r2
   207a6:	1c43      	adds	r3, r0, #1
   207a8:	001a      	movs	r2, r3
   207aa:	930e      	str	r3, [sp, #56]	; 0x38
   207ac:	e72a      	b.n	20604 <_svfprintf_r+0x13bc>
   207ae:	4b27      	ldr	r3, [pc, #156]	; (2084c <_svfprintf_r+0x1604>)
   207b0:	9311      	str	r3, [sp, #68]	; 0x44
   207b2:	f7fe fef4 	bl	1f59e <_svfprintf_r+0x356>
   207b6:	232d      	movs	r3, #45	; 0x2d
   207b8:	aa16      	add	r2, sp, #88	; 0x58
   207ba:	77d3      	strb	r3, [r2, #31]
   207bc:	4698      	mov	r8, r3
   207be:	e7c4      	b.n	2074a <_svfprintf_r+0x1502>
   207c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   207c2:	1d1a      	adds	r2, r3, #4
   207c4:	681b      	ldr	r3, [r3, #0]
   207c6:	469a      	mov	sl, r3
   207c8:	2b00      	cmp	r3, #0
   207ca:	db36      	blt.n	2083a <_svfprintf_r+0x15f2>
   207cc:	784b      	ldrb	r3, [r1, #1]
   207ce:	920f      	str	r2, [sp, #60]	; 0x3c
   207d0:	4659      	mov	r1, fp
   207d2:	f7fe fd9d 	bl	1f310 <_svfprintf_r+0xc8>
   207d6:	4653      	mov	r3, sl
   207d8:	2b00      	cmp	r3, #0
   207da:	d101      	bne.n	207e0 <_svfprintf_r+0x1598>
   207dc:	07e3      	lsls	r3, r4, #31
   207de:	d503      	bpl.n	207e8 <_svfprintf_r+0x15a0>
   207e0:	9b18      	ldr	r3, [sp, #96]	; 0x60
   207e2:	1c58      	adds	r0, r3, #1
   207e4:	0003      	movs	r3, r0
   207e6:	e7bb      	b.n	20760 <_svfprintf_r+0x1518>
   207e8:	2301      	movs	r3, #1
   207ea:	e725      	b.n	20638 <_svfprintf_r+0x13f0>
   207ec:	ab16      	add	r3, sp, #88	; 0x58
   207ee:	77d8      	strb	r0, [r3, #31]
   207f0:	f7fe ff6c 	bl	1f6cc <_svfprintf_r+0x484>
   207f4:	ab16      	add	r3, sp, #88	; 0x58
   207f6:	77d8      	strb	r0, [r3, #31]
   207f8:	f7ff f814 	bl	1f824 <_svfprintf_r+0x5dc>
   207fc:	230c      	movs	r3, #12
   207fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
   20800:	6013      	str	r3, [r2, #0]
   20802:	3b0d      	subs	r3, #13
   20804:	930a      	str	r3, [sp, #40]	; 0x28
   20806:	f7fe fdac 	bl	1f362 <_svfprintf_r+0x11a>
   2080a:	aa16      	add	r2, sp, #88	; 0x58
   2080c:	232e      	movs	r3, #46	; 0x2e
   2080e:	4694      	mov	ip, r2
   20810:	4463      	add	r3, ip
   20812:	e65c      	b.n	204ce <_svfprintf_r+0x1286>
   20814:	ab16      	add	r3, sp, #88	; 0x58
   20816:	77d8      	strb	r0, [r3, #31]
   20818:	f7fe fe85 	bl	1f526 <_svfprintf_r+0x2de>
   2081c:	ab16      	add	r3, sp, #88	; 0x58
   2081e:	77d8      	strb	r0, [r3, #31]
   20820:	f7fe fddd 	bl	1f3de <_svfprintf_r+0x196>
   20824:	ab16      	add	r3, sp, #88	; 0x58
   20826:	77d8      	strb	r0, [r3, #31]
   20828:	f7ff f87d 	bl	1f926 <_svfprintf_r+0x6de>
   2082c:	4805      	ldr	r0, [pc, #20]	; (20844 <_svfprintf_r+0x15fc>)
   2082e:	4681      	mov	r9, r0
   20830:	e76d      	b.n	2070e <_svfprintf_r+0x14c6>
   20832:	ab16      	add	r3, sp, #88	; 0x58
   20834:	77d8      	strb	r0, [r3, #31]
   20836:	f7fe ff79 	bl	1f72c <_svfprintf_r+0x4e4>
   2083a:	2301      	movs	r3, #1
   2083c:	425b      	negs	r3, r3
   2083e:	469a      	mov	sl, r3
   20840:	e7c4      	b.n	207cc <_svfprintf_r+0x1584>
   20842:	46c0      	nop			; (mov r8, r8)
   20844:	0002538c 	.word	0x0002538c
   20848:	00025340 	.word	0x00025340
   2084c:	00025344 	.word	0x00025344

00020850 <register_fini>:
   20850:	4b03      	ldr	r3, [pc, #12]	; (20860 <register_fini+0x10>)
   20852:	b510      	push	{r4, lr}
   20854:	2b00      	cmp	r3, #0
   20856:	d002      	beq.n	2085e <register_fini+0xe>
   20858:	4802      	ldr	r0, [pc, #8]	; (20864 <register_fini+0x14>)
   2085a:	f000 f805 	bl	20868 <atexit>
   2085e:	bd10      	pop	{r4, pc}
   20860:	00000000 	.word	0x00000000
   20864:	00021955 	.word	0x00021955

00020868 <atexit>:
   20868:	b510      	push	{r4, lr}
   2086a:	0001      	movs	r1, r0
   2086c:	2300      	movs	r3, #0
   2086e:	2200      	movs	r2, #0
   20870:	2000      	movs	r0, #0
   20872:	f001 ff89 	bl	22788 <__register_exitproc>
   20876:	bd10      	pop	{r4, pc}

00020878 <quorem>:
   20878:	b5f0      	push	{r4, r5, r6, r7, lr}
   2087a:	4645      	mov	r5, r8
   2087c:	4680      	mov	r8, r0
   2087e:	46de      	mov	lr, fp
   20880:	4657      	mov	r7, sl
   20882:	464e      	mov	r6, r9
   20884:	4642      	mov	r2, r8
   20886:	b5e0      	push	{r5, r6, r7, lr}
   20888:	690c      	ldr	r4, [r1, #16]
   2088a:	6912      	ldr	r2, [r2, #16]
   2088c:	b085      	sub	sp, #20
   2088e:	000b      	movs	r3, r1
   20890:	9102      	str	r1, [sp, #8]
   20892:	2000      	movs	r0, #0
   20894:	4294      	cmp	r4, r2
   20896:	dd00      	ble.n	2089a <quorem+0x22>
   20898:	e090      	b.n	209bc <quorem+0x144>
   2089a:	2214      	movs	r2, #20
   2089c:	4694      	mov	ip, r2
   2089e:	4463      	add	r3, ip
   208a0:	4699      	mov	r9, r3
   208a2:	464a      	mov	r2, r9
   208a4:	3c01      	subs	r4, #1
   208a6:	00a3      	lsls	r3, r4, #2
   208a8:	18d6      	adds	r6, r2, r3
   208aa:	2214      	movs	r2, #20
   208ac:	4442      	add	r2, r8
   208ae:	4693      	mov	fp, r2
   208b0:	449b      	add	fp, r3
   208b2:	6833      	ldr	r3, [r6, #0]
   208b4:	0015      	movs	r5, r2
   208b6:	1c59      	adds	r1, r3, #1
   208b8:	465b      	mov	r3, fp
   208ba:	6818      	ldr	r0, [r3, #0]
   208bc:	9201      	str	r2, [sp, #4]
   208be:	f7fb fb65 	bl	1bf8c <__udivsi3>
   208c2:	1e03      	subs	r3, r0, #0
   208c4:	9000      	str	r0, [sp, #0]
   208c6:	d042      	beq.n	2094e <quorem+0xd6>
   208c8:	0029      	movs	r1, r5
   208ca:	2700      	movs	r7, #0
   208cc:	464d      	mov	r5, r9
   208ce:	2000      	movs	r0, #0
   208d0:	46b1      	mov	r9, r6
   208d2:	46a2      	mov	sl, r4
   208d4:	003e      	movs	r6, r7
   208d6:	0004      	movs	r4, r0
   208d8:	469c      	mov	ip, r3
   208da:	002f      	movs	r7, r5
   208dc:	0008      	movs	r0, r1
   208de:	9503      	str	r5, [sp, #12]
   208e0:	4663      	mov	r3, ip
   208e2:	cf04      	ldmia	r7!, {r2}
   208e4:	0415      	lsls	r5, r2, #16
   208e6:	0c2d      	lsrs	r5, r5, #16
   208e8:	435d      	muls	r5, r3
   208ea:	0c12      	lsrs	r2, r2, #16
   208ec:	435a      	muls	r2, r3
   208ee:	19ad      	adds	r5, r5, r6
   208f0:	0c2b      	lsrs	r3, r5, #16
   208f2:	18d2      	adds	r2, r2, r3
   208f4:	6803      	ldr	r3, [r0, #0]
   208f6:	042d      	lsls	r5, r5, #16
   208f8:	0419      	lsls	r1, r3, #16
   208fa:	0c09      	lsrs	r1, r1, #16
   208fc:	1909      	adds	r1, r1, r4
   208fe:	0c16      	lsrs	r6, r2, #16
   20900:	0c2d      	lsrs	r5, r5, #16
   20902:	0412      	lsls	r2, r2, #16
   20904:	1b49      	subs	r1, r1, r5
   20906:	0c12      	lsrs	r2, r2, #16
   20908:	0c1b      	lsrs	r3, r3, #16
   2090a:	1a9b      	subs	r3, r3, r2
   2090c:	140a      	asrs	r2, r1, #16
   2090e:	189b      	adds	r3, r3, r2
   20910:	0409      	lsls	r1, r1, #16
   20912:	141c      	asrs	r4, r3, #16
   20914:	0c09      	lsrs	r1, r1, #16
   20916:	041b      	lsls	r3, r3, #16
   20918:	4319      	orrs	r1, r3
   2091a:	c002      	stmia	r0!, {r1}
   2091c:	45b9      	cmp	r9, r7
   2091e:	d2df      	bcs.n	208e0 <quorem+0x68>
   20920:	9b03      	ldr	r3, [sp, #12]
   20922:	464e      	mov	r6, r9
   20924:	4699      	mov	r9, r3
   20926:	465b      	mov	r3, fp
   20928:	681b      	ldr	r3, [r3, #0]
   2092a:	4654      	mov	r4, sl
   2092c:	2b00      	cmp	r3, #0
   2092e:	d10e      	bne.n	2094e <quorem+0xd6>
   20930:	465b      	mov	r3, fp
   20932:	9a01      	ldr	r2, [sp, #4]
   20934:	3b04      	subs	r3, #4
   20936:	429a      	cmp	r2, r3
   20938:	d304      	bcc.n	20944 <quorem+0xcc>
   2093a:	e006      	b.n	2094a <quorem+0xd2>
   2093c:	3b04      	subs	r3, #4
   2093e:	3c01      	subs	r4, #1
   20940:	429a      	cmp	r2, r3
   20942:	d202      	bcs.n	2094a <quorem+0xd2>
   20944:	6819      	ldr	r1, [r3, #0]
   20946:	2900      	cmp	r1, #0
   20948:	d0f8      	beq.n	2093c <quorem+0xc4>
   2094a:	4643      	mov	r3, r8
   2094c:	611c      	str	r4, [r3, #16]
   2094e:	9902      	ldr	r1, [sp, #8]
   20950:	4640      	mov	r0, r8
   20952:	f001 fd63 	bl	2241c <__mcmp>
   20956:	2800      	cmp	r0, #0
   20958:	db2f      	blt.n	209ba <quorem+0x142>
   2095a:	464f      	mov	r7, r9
   2095c:	2000      	movs	r0, #0
   2095e:	9b00      	ldr	r3, [sp, #0]
   20960:	9d01      	ldr	r5, [sp, #4]
   20962:	3301      	adds	r3, #1
   20964:	9300      	str	r3, [sp, #0]
   20966:	682b      	ldr	r3, [r5, #0]
   20968:	cf02      	ldmia	r7!, {r1}
   2096a:	041a      	lsls	r2, r3, #16
   2096c:	0c12      	lsrs	r2, r2, #16
   2096e:	1810      	adds	r0, r2, r0
   20970:	040a      	lsls	r2, r1, #16
   20972:	0c12      	lsrs	r2, r2, #16
   20974:	1a82      	subs	r2, r0, r2
   20976:	0c09      	lsrs	r1, r1, #16
   20978:	0c1b      	lsrs	r3, r3, #16
   2097a:	1a5b      	subs	r3, r3, r1
   2097c:	1411      	asrs	r1, r2, #16
   2097e:	185b      	adds	r3, r3, r1
   20980:	0412      	lsls	r2, r2, #16
   20982:	1418      	asrs	r0, r3, #16
   20984:	0c12      	lsrs	r2, r2, #16
   20986:	041b      	lsls	r3, r3, #16
   20988:	4313      	orrs	r3, r2
   2098a:	c508      	stmia	r5!, {r3}
   2098c:	42be      	cmp	r6, r7
   2098e:	d2ea      	bcs.n	20966 <quorem+0xee>
   20990:	9901      	ldr	r1, [sp, #4]
   20992:	00a3      	lsls	r3, r4, #2
   20994:	468c      	mov	ip, r1
   20996:	4463      	add	r3, ip
   20998:	681a      	ldr	r2, [r3, #0]
   2099a:	2a00      	cmp	r2, #0
   2099c:	d10d      	bne.n	209ba <quorem+0x142>
   2099e:	3b04      	subs	r3, #4
   209a0:	000a      	movs	r2, r1
   209a2:	4299      	cmp	r1, r3
   209a4:	d304      	bcc.n	209b0 <quorem+0x138>
   209a6:	e006      	b.n	209b6 <quorem+0x13e>
   209a8:	3b04      	subs	r3, #4
   209aa:	3c01      	subs	r4, #1
   209ac:	429a      	cmp	r2, r3
   209ae:	d202      	bcs.n	209b6 <quorem+0x13e>
   209b0:	6819      	ldr	r1, [r3, #0]
   209b2:	2900      	cmp	r1, #0
   209b4:	d0f8      	beq.n	209a8 <quorem+0x130>
   209b6:	4643      	mov	r3, r8
   209b8:	611c      	str	r4, [r3, #16]
   209ba:	9800      	ldr	r0, [sp, #0]
   209bc:	b005      	add	sp, #20
   209be:	bc3c      	pop	{r2, r3, r4, r5}
   209c0:	4690      	mov	r8, r2
   209c2:	4699      	mov	r9, r3
   209c4:	46a2      	mov	sl, r4
   209c6:	46ab      	mov	fp, r5
   209c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   209ca:	46c0      	nop			; (mov r8, r8)

000209cc <_dtoa_r>:
   209cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   209ce:	4657      	mov	r7, sl
   209d0:	464e      	mov	r6, r9
   209d2:	4645      	mov	r5, r8
   209d4:	46de      	mov	lr, fp
   209d6:	b5e0      	push	{r5, r6, r7, lr}
   209d8:	6c01      	ldr	r1, [r0, #64]	; 0x40
   209da:	b099      	sub	sp, #100	; 0x64
   209dc:	4682      	mov	sl, r0
   209de:	001d      	movs	r5, r3
   209e0:	0016      	movs	r6, r2
   209e2:	001f      	movs	r7, r3
   209e4:	2900      	cmp	r1, #0
   209e6:	d009      	beq.n	209fc <_dtoa_r+0x30>
   209e8:	2301      	movs	r3, #1
   209ea:	6c42      	ldr	r2, [r0, #68]	; 0x44
   209ec:	4093      	lsls	r3, r2
   209ee:	604a      	str	r2, [r1, #4]
   209f0:	608b      	str	r3, [r1, #8]
   209f2:	f001 fb07 	bl	22004 <_Bfree>
   209f6:	2300      	movs	r3, #0
   209f8:	4652      	mov	r2, sl
   209fa:	6413      	str	r3, [r2, #64]	; 0x40
   209fc:	46b8      	mov	r8, r7
   209fe:	2f00      	cmp	r7, #0
   20a00:	db37      	blt.n	20a72 <_dtoa_r+0xa6>
   20a02:	2300      	movs	r3, #0
   20a04:	9a25      	ldr	r2, [sp, #148]	; 0x94
   20a06:	6013      	str	r3, [r2, #0]
   20a08:	4642      	mov	r2, r8
   20a0a:	4bd6      	ldr	r3, [pc, #856]	; (20d64 <_dtoa_r+0x398>)
   20a0c:	401a      	ands	r2, r3
   20a0e:	429a      	cmp	r2, r3
   20a10:	d018      	beq.n	20a44 <_dtoa_r+0x78>
   20a12:	2200      	movs	r2, #0
   20a14:	2300      	movs	r3, #0
   20a16:	0030      	movs	r0, r6
   20a18:	0039      	movs	r1, r7
   20a1a:	f7fb fc3d 	bl	1c298 <__aeabi_dcmpeq>
   20a1e:	2800      	cmp	r0, #0
   20a20:	d02f      	beq.n	20a82 <_dtoa_r+0xb6>
   20a22:	2301      	movs	r3, #1
   20a24:	9a24      	ldr	r2, [sp, #144]	; 0x90
   20a26:	6013      	str	r3, [r2, #0]
   20a28:	9b26      	ldr	r3, [sp, #152]	; 0x98
   20a2a:	2b00      	cmp	r3, #0
   20a2c:	d100      	bne.n	20a30 <_dtoa_r+0x64>
   20a2e:	e22a      	b.n	20e86 <_dtoa_r+0x4ba>
   20a30:	48cd      	ldr	r0, [pc, #820]	; (20d68 <_dtoa_r+0x39c>)
   20a32:	6018      	str	r0, [r3, #0]
   20a34:	3801      	subs	r0, #1
   20a36:	b019      	add	sp, #100	; 0x64
   20a38:	bc3c      	pop	{r2, r3, r4, r5}
   20a3a:	4690      	mov	r8, r2
   20a3c:	4699      	mov	r9, r3
   20a3e:	46a2      	mov	sl, r4
   20a40:	46ab      	mov	fp, r5
   20a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20a44:	4bc9      	ldr	r3, [pc, #804]	; (20d6c <_dtoa_r+0x3a0>)
   20a46:	9a24      	ldr	r2, [sp, #144]	; 0x90
   20a48:	6013      	str	r3, [r2, #0]
   20a4a:	2e00      	cmp	r6, #0
   20a4c:	d10b      	bne.n	20a66 <_dtoa_r+0x9a>
   20a4e:	4643      	mov	r3, r8
   20a50:	0318      	lsls	r0, r3, #12
   20a52:	d108      	bne.n	20a66 <_dtoa_r+0x9a>
   20a54:	9b26      	ldr	r3, [sp, #152]	; 0x98
   20a56:	48c6      	ldr	r0, [pc, #792]	; (20d70 <_dtoa_r+0x3a4>)
   20a58:	2b00      	cmp	r3, #0
   20a5a:	d0ec      	beq.n	20a36 <_dtoa_r+0x6a>
   20a5c:	0003      	movs	r3, r0
   20a5e:	3308      	adds	r3, #8
   20a60:	9a26      	ldr	r2, [sp, #152]	; 0x98
   20a62:	6013      	str	r3, [r2, #0]
   20a64:	e7e7      	b.n	20a36 <_dtoa_r+0x6a>
   20a66:	9b26      	ldr	r3, [sp, #152]	; 0x98
   20a68:	48c2      	ldr	r0, [pc, #776]	; (20d74 <_dtoa_r+0x3a8>)
   20a6a:	2b00      	cmp	r3, #0
   20a6c:	d0e3      	beq.n	20a36 <_dtoa_r+0x6a>
   20a6e:	1cc3      	adds	r3, r0, #3
   20a70:	e7f6      	b.n	20a60 <_dtoa_r+0x94>
   20a72:	2301      	movs	r3, #1
   20a74:	9a25      	ldr	r2, [sp, #148]	; 0x94
   20a76:	0068      	lsls	r0, r5, #1
   20a78:	6013      	str	r3, [r2, #0]
   20a7a:	0843      	lsrs	r3, r0, #1
   20a7c:	4698      	mov	r8, r3
   20a7e:	001f      	movs	r7, r3
   20a80:	e7c2      	b.n	20a08 <_dtoa_r+0x3c>
   20a82:	ab16      	add	r3, sp, #88	; 0x58
   20a84:	9301      	str	r3, [sp, #4]
   20a86:	ab17      	add	r3, sp, #92	; 0x5c
   20a88:	9300      	str	r3, [sp, #0]
   20a8a:	0032      	movs	r2, r6
   20a8c:	003b      	movs	r3, r7
   20a8e:	4650      	mov	r0, sl
   20a90:	f001 fd7a 	bl	22588 <__d2b>
   20a94:	4643      	mov	r3, r8
   20a96:	4683      	mov	fp, r0
   20a98:	0d1a      	lsrs	r2, r3, #20
   20a9a:	d100      	bne.n	20a9e <_dtoa_r+0xd2>
   20a9c:	e1d6      	b.n	20e4c <_dtoa_r+0x480>
   20a9e:	033b      	lsls	r3, r7, #12
   20aa0:	4cb5      	ldr	r4, [pc, #724]	; (20d78 <_dtoa_r+0x3ac>)
   20aa2:	0b1b      	lsrs	r3, r3, #12
   20aa4:	431c      	orrs	r4, r3
   20aa6:	4bb5      	ldr	r3, [pc, #724]	; (20d7c <_dtoa_r+0x3b0>)
   20aa8:	0030      	movs	r0, r6
   20aaa:	4698      	mov	r8, r3
   20aac:	9b16      	ldr	r3, [sp, #88]	; 0x58
   20aae:	0021      	movs	r1, r4
   20ab0:	4699      	mov	r9, r3
   20ab2:	2300      	movs	r3, #0
   20ab4:	4490      	add	r8, r2
   20ab6:	930f      	str	r3, [sp, #60]	; 0x3c
   20ab8:	2200      	movs	r2, #0
   20aba:	4bb1      	ldr	r3, [pc, #708]	; (20d80 <_dtoa_r+0x3b4>)
   20abc:	f7fd fdaa 	bl	1e614 <__aeabi_dsub>
   20ac0:	4ab0      	ldr	r2, [pc, #704]	; (20d84 <_dtoa_r+0x3b8>)
   20ac2:	4bb1      	ldr	r3, [pc, #708]	; (20d88 <_dtoa_r+0x3bc>)
   20ac4:	f7fd fb26 	bl	1e114 <__aeabi_dmul>
   20ac8:	4ab0      	ldr	r2, [pc, #704]	; (20d8c <_dtoa_r+0x3c0>)
   20aca:	4bb1      	ldr	r3, [pc, #708]	; (20d90 <_dtoa_r+0x3c4>)
   20acc:	f7fc fbde 	bl	1d28c <__aeabi_dadd>
   20ad0:	0004      	movs	r4, r0
   20ad2:	4640      	mov	r0, r8
   20ad4:	000d      	movs	r5, r1
   20ad6:	f7fe f907 	bl	1ece8 <__aeabi_i2d>
   20ada:	4aae      	ldr	r2, [pc, #696]	; (20d94 <_dtoa_r+0x3c8>)
   20adc:	4bae      	ldr	r3, [pc, #696]	; (20d98 <_dtoa_r+0x3cc>)
   20ade:	f7fd fb19 	bl	1e114 <__aeabi_dmul>
   20ae2:	0002      	movs	r2, r0
   20ae4:	000b      	movs	r3, r1
   20ae6:	0020      	movs	r0, r4
   20ae8:	0029      	movs	r1, r5
   20aea:	f7fc fbcf 	bl	1d28c <__aeabi_dadd>
   20aee:	0004      	movs	r4, r0
   20af0:	000d      	movs	r5, r1
   20af2:	f7fe f8c5 	bl	1ec80 <__aeabi_d2iz>
   20af6:	2200      	movs	r2, #0
   20af8:	9003      	str	r0, [sp, #12]
   20afa:	2300      	movs	r3, #0
   20afc:	0020      	movs	r0, r4
   20afe:	0029      	movs	r1, r5
   20b00:	f7fb fbd0 	bl	1c2a4 <__aeabi_dcmplt>
   20b04:	2800      	cmp	r0, #0
   20b06:	d000      	beq.n	20b0a <_dtoa_r+0x13e>
   20b08:	e2b1      	b.n	2106e <_dtoa_r+0x6a2>
   20b0a:	2301      	movs	r3, #1
   20b0c:	9c03      	ldr	r4, [sp, #12]
   20b0e:	930c      	str	r3, [sp, #48]	; 0x30
   20b10:	2c16      	cmp	r4, #22
   20b12:	d810      	bhi.n	20b36 <_dtoa_r+0x16a>
   20b14:	49a1      	ldr	r1, [pc, #644]	; (20d9c <_dtoa_r+0x3d0>)
   20b16:	00e3      	lsls	r3, r4, #3
   20b18:	18c9      	adds	r1, r1, r3
   20b1a:	0032      	movs	r2, r6
   20b1c:	6808      	ldr	r0, [r1, #0]
   20b1e:	6849      	ldr	r1, [r1, #4]
   20b20:	003b      	movs	r3, r7
   20b22:	f7fb fbd3 	bl	1c2cc <__aeabi_dcmpgt>
   20b26:	2800      	cmp	r0, #0
   20b28:	d100      	bne.n	20b2c <_dtoa_r+0x160>
   20b2a:	e31d      	b.n	21168 <_dtoa_r+0x79c>
   20b2c:	0023      	movs	r3, r4
   20b2e:	3b01      	subs	r3, #1
   20b30:	9303      	str	r3, [sp, #12]
   20b32:	2300      	movs	r3, #0
   20b34:	930c      	str	r3, [sp, #48]	; 0x30
   20b36:	464b      	mov	r3, r9
   20b38:	4642      	mov	r2, r8
   20b3a:	1a9a      	subs	r2, r3, r2
   20b3c:	2300      	movs	r3, #0
   20b3e:	9306      	str	r3, [sp, #24]
   20b40:	0013      	movs	r3, r2
   20b42:	3b01      	subs	r3, #1
   20b44:	9304      	str	r3, [sp, #16]
   20b46:	d500      	bpl.n	20b4a <_dtoa_r+0x17e>
   20b48:	e2a1      	b.n	2108e <_dtoa_r+0x6c2>
   20b4a:	9b03      	ldr	r3, [sp, #12]
   20b4c:	2b00      	cmp	r3, #0
   20b4e:	da00      	bge.n	20b52 <_dtoa_r+0x186>
   20b50:	e284      	b.n	2105c <_dtoa_r+0x690>
   20b52:	469c      	mov	ip, r3
   20b54:	930d      	str	r3, [sp, #52]	; 0x34
   20b56:	2300      	movs	r3, #0
   20b58:	9a04      	ldr	r2, [sp, #16]
   20b5a:	4699      	mov	r9, r3
   20b5c:	0011      	movs	r1, r2
   20b5e:	4461      	add	r1, ip
   20b60:	9104      	str	r1, [sp, #16]
   20b62:	9b22      	ldr	r3, [sp, #136]	; 0x88
   20b64:	2b09      	cmp	r3, #9
   20b66:	d900      	bls.n	20b6a <_dtoa_r+0x19e>
   20b68:	e18f      	b.n	20e8a <_dtoa_r+0x4be>
   20b6a:	2401      	movs	r4, #1
   20b6c:	2b05      	cmp	r3, #5
   20b6e:	dd02      	ble.n	20b76 <_dtoa_r+0x1aa>
   20b70:	2400      	movs	r4, #0
   20b72:	3b04      	subs	r3, #4
   20b74:	9322      	str	r3, [sp, #136]	; 0x88
   20b76:	9b22      	ldr	r3, [sp, #136]	; 0x88
   20b78:	2b03      	cmp	r3, #3
   20b7a:	d101      	bne.n	20b80 <_dtoa_r+0x1b4>
   20b7c:	f000 fcce 	bl	2151c <_dtoa_r+0xb50>
   20b80:	dc01      	bgt.n	20b86 <_dtoa_r+0x1ba>
   20b82:	f000 fc92 	bl	214aa <_dtoa_r+0xade>
   20b86:	9b22      	ldr	r3, [sp, #136]	; 0x88
   20b88:	2b04      	cmp	r3, #4
   20b8a:	d101      	bne.n	20b90 <_dtoa_r+0x1c4>
   20b8c:	f000 fc40 	bl	21410 <_dtoa_r+0xa44>
   20b90:	2301      	movs	r3, #1
   20b92:	930b      	str	r3, [sp, #44]	; 0x2c
   20b94:	9b22      	ldr	r3, [sp, #136]	; 0x88
   20b96:	2b05      	cmp	r3, #5
   20b98:	d001      	beq.n	20b9e <_dtoa_r+0x1d2>
   20b9a:	f000 fc8b 	bl	214b4 <_dtoa_r+0xae8>
   20b9e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   20ba0:	9b03      	ldr	r3, [sp, #12]
   20ba2:	4694      	mov	ip, r2
   20ba4:	4463      	add	r3, ip
   20ba6:	930e      	str	r3, [sp, #56]	; 0x38
   20ba8:	3301      	adds	r3, #1
   20baa:	9307      	str	r3, [sp, #28]
   20bac:	1e1d      	subs	r5, r3, #0
   20bae:	dc01      	bgt.n	20bb4 <_dtoa_r+0x1e8>
   20bb0:	f000 fd49 	bl	21646 <_dtoa_r+0xc7a>
   20bb4:	9b07      	ldr	r3, [sp, #28]
   20bb6:	4698      	mov	r8, r3
   20bb8:	2300      	movs	r3, #0
   20bba:	4652      	mov	r2, sl
   20bbc:	2100      	movs	r1, #0
   20bbe:	6453      	str	r3, [r2, #68]	; 0x44
   20bc0:	2d17      	cmp	r5, #23
   20bc2:	d90a      	bls.n	20bda <_dtoa_r+0x20e>
   20bc4:	2201      	movs	r2, #1
   20bc6:	3304      	adds	r3, #4
   20bc8:	005b      	lsls	r3, r3, #1
   20bca:	0018      	movs	r0, r3
   20bcc:	3014      	adds	r0, #20
   20bce:	0011      	movs	r1, r2
   20bd0:	3201      	adds	r2, #1
   20bd2:	4285      	cmp	r5, r0
   20bd4:	d2f8      	bcs.n	20bc8 <_dtoa_r+0x1fc>
   20bd6:	4653      	mov	r3, sl
   20bd8:	6459      	str	r1, [r3, #68]	; 0x44
   20bda:	4650      	mov	r0, sl
   20bdc:	f001 f9ea 	bl	21fb4 <_Balloc>
   20be0:	4653      	mov	r3, sl
   20be2:	6418      	str	r0, [r3, #64]	; 0x40
   20be4:	4643      	mov	r3, r8
   20be6:	900a      	str	r0, [sp, #40]	; 0x28
   20be8:	2b0e      	cmp	r3, #14
   20bea:	d900      	bls.n	20bee <_dtoa_r+0x222>
   20bec:	e161      	b.n	20eb2 <_dtoa_r+0x4e6>
   20bee:	2c00      	cmp	r4, #0
   20bf0:	d100      	bne.n	20bf4 <_dtoa_r+0x228>
   20bf2:	e15e      	b.n	20eb2 <_dtoa_r+0x4e6>
   20bf4:	9610      	str	r6, [sp, #64]	; 0x40
   20bf6:	9711      	str	r7, [sp, #68]	; 0x44
   20bf8:	9e03      	ldr	r6, [sp, #12]
   20bfa:	2e00      	cmp	r6, #0
   20bfc:	dc01      	bgt.n	20c02 <_dtoa_r+0x236>
   20bfe:	f000 fd25 	bl	2164c <_dtoa_r+0xc80>
   20c02:	0032      	movs	r2, r6
   20c04:	210f      	movs	r1, #15
   20c06:	4b65      	ldr	r3, [pc, #404]	; (20d9c <_dtoa_r+0x3d0>)
   20c08:	400a      	ands	r2, r1
   20c0a:	00d2      	lsls	r2, r2, #3
   20c0c:	189b      	adds	r3, r3, r2
   20c0e:	1136      	asrs	r6, r6, #4
   20c10:	681c      	ldr	r4, [r3, #0]
   20c12:	685d      	ldr	r5, [r3, #4]
   20c14:	06f3      	lsls	r3, r6, #27
   20c16:	d401      	bmi.n	20c1c <_dtoa_r+0x250>
   20c18:	f000 fcca 	bl	215b0 <_dtoa_r+0xbe4>
   20c1c:	4b60      	ldr	r3, [pc, #384]	; (20da0 <_dtoa_r+0x3d4>)
   20c1e:	400e      	ands	r6, r1
   20c20:	6a1a      	ldr	r2, [r3, #32]
   20c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   20c24:	9810      	ldr	r0, [sp, #64]	; 0x40
   20c26:	9911      	ldr	r1, [sp, #68]	; 0x44
   20c28:	f7fc fe40 	bl	1d8ac <__aeabi_ddiv>
   20c2c:	2303      	movs	r3, #3
   20c2e:	4698      	mov	r8, r3
   20c30:	9008      	str	r0, [sp, #32]
   20c32:	9109      	str	r1, [sp, #36]	; 0x24
   20c34:	2e00      	cmp	r6, #0
   20c36:	d011      	beq.n	20c5c <_dtoa_r+0x290>
   20c38:	4f59      	ldr	r7, [pc, #356]	; (20da0 <_dtoa_r+0x3d4>)
   20c3a:	2301      	movs	r3, #1
   20c3c:	4233      	tst	r3, r6
   20c3e:	d009      	beq.n	20c54 <_dtoa_r+0x288>
   20c40:	469c      	mov	ip, r3
   20c42:	683a      	ldr	r2, [r7, #0]
   20c44:	687b      	ldr	r3, [r7, #4]
   20c46:	0020      	movs	r0, r4
   20c48:	0029      	movs	r1, r5
   20c4a:	44e0      	add	r8, ip
   20c4c:	f7fd fa62 	bl	1e114 <__aeabi_dmul>
   20c50:	0004      	movs	r4, r0
   20c52:	000d      	movs	r5, r1
   20c54:	1076      	asrs	r6, r6, #1
   20c56:	3708      	adds	r7, #8
   20c58:	2e00      	cmp	r6, #0
   20c5a:	d1ee      	bne.n	20c3a <_dtoa_r+0x26e>
   20c5c:	0022      	movs	r2, r4
   20c5e:	9808      	ldr	r0, [sp, #32]
   20c60:	9909      	ldr	r1, [sp, #36]	; 0x24
   20c62:	002b      	movs	r3, r5
   20c64:	f7fc fe22 	bl	1d8ac <__aeabi_ddiv>
   20c68:	0006      	movs	r6, r0
   20c6a:	000f      	movs	r7, r1
   20c6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   20c6e:	2b00      	cmp	r3, #0
   20c70:	d009      	beq.n	20c86 <_dtoa_r+0x2ba>
   20c72:	2200      	movs	r2, #0
   20c74:	4b40      	ldr	r3, [pc, #256]	; (20d78 <_dtoa_r+0x3ac>)
   20c76:	0030      	movs	r0, r6
   20c78:	0039      	movs	r1, r7
   20c7a:	f7fb fb13 	bl	1c2a4 <__aeabi_dcmplt>
   20c7e:	2800      	cmp	r0, #0
   20c80:	d001      	beq.n	20c86 <_dtoa_r+0x2ba>
   20c82:	f000 fdc2 	bl	2180a <_dtoa_r+0xe3e>
   20c86:	4640      	mov	r0, r8
   20c88:	f7fe f82e 	bl	1ece8 <__aeabi_i2d>
   20c8c:	0032      	movs	r2, r6
   20c8e:	003b      	movs	r3, r7
   20c90:	f7fd fa40 	bl	1e114 <__aeabi_dmul>
   20c94:	2200      	movs	r2, #0
   20c96:	4b43      	ldr	r3, [pc, #268]	; (20da4 <_dtoa_r+0x3d8>)
   20c98:	f7fc faf8 	bl	1d28c <__aeabi_dadd>
   20c9c:	4a42      	ldr	r2, [pc, #264]	; (20da8 <_dtoa_r+0x3dc>)
   20c9e:	000b      	movs	r3, r1
   20ca0:	4694      	mov	ip, r2
   20ca2:	4463      	add	r3, ip
   20ca4:	9008      	str	r0, [sp, #32]
   20ca6:	9109      	str	r1, [sp, #36]	; 0x24
   20ca8:	9309      	str	r3, [sp, #36]	; 0x24
   20caa:	9b07      	ldr	r3, [sp, #28]
   20cac:	2b00      	cmp	r3, #0
   20cae:	d101      	bne.n	20cb4 <_dtoa_r+0x2e8>
   20cb0:	f000 fc50 	bl	21554 <_dtoa_r+0xb88>
   20cb4:	9b03      	ldr	r3, [sp, #12]
   20cb6:	9313      	str	r3, [sp, #76]	; 0x4c
   20cb8:	9b07      	ldr	r3, [sp, #28]
   20cba:	9312      	str	r3, [sp, #72]	; 0x48
   20cbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   20cbe:	2b00      	cmp	r3, #0
   20cc0:	d101      	bne.n	20cc6 <_dtoa_r+0x2fa>
   20cc2:	f000 fd1d 	bl	21700 <_dtoa_r+0xd34>
   20cc6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   20cc8:	2000      	movs	r0, #0
   20cca:	1e5a      	subs	r2, r3, #1
   20ccc:	4b33      	ldr	r3, [pc, #204]	; (20d9c <_dtoa_r+0x3d0>)
   20cce:	00d2      	lsls	r2, r2, #3
   20cd0:	189b      	adds	r3, r3, r2
   20cd2:	681a      	ldr	r2, [r3, #0]
   20cd4:	685b      	ldr	r3, [r3, #4]
   20cd6:	4935      	ldr	r1, [pc, #212]	; (20dac <_dtoa_r+0x3e0>)
   20cd8:	f7fc fde8 	bl	1d8ac <__aeabi_ddiv>
   20cdc:	9a08      	ldr	r2, [sp, #32]
   20cde:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20ce0:	f7fd fc98 	bl	1e614 <__aeabi_dsub>
   20ce4:	9008      	str	r0, [sp, #32]
   20ce6:	9109      	str	r1, [sp, #36]	; 0x24
   20ce8:	0039      	movs	r1, r7
   20cea:	0030      	movs	r0, r6
   20cec:	f7fd ffc8 	bl	1ec80 <__aeabi_d2iz>
   20cf0:	0004      	movs	r4, r0
   20cf2:	f7fd fff9 	bl	1ece8 <__aeabi_i2d>
   20cf6:	0002      	movs	r2, r0
   20cf8:	000b      	movs	r3, r1
   20cfa:	0030      	movs	r0, r6
   20cfc:	0039      	movs	r1, r7
   20cfe:	f7fd fc89 	bl	1e614 <__aeabi_dsub>
   20d02:	0005      	movs	r5, r0
   20d04:	000e      	movs	r6, r1
   20d06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   20d08:	3430      	adds	r4, #48	; 0x30
   20d0a:	1c51      	adds	r1, r2, #1
   20d0c:	b2e7      	uxtb	r7, r4
   20d0e:	9114      	str	r1, [sp, #80]	; 0x50
   20d10:	7017      	strb	r7, [r2, #0]
   20d12:	0033      	movs	r3, r6
   20d14:	9808      	ldr	r0, [sp, #32]
   20d16:	9909      	ldr	r1, [sp, #36]	; 0x24
   20d18:	002a      	movs	r2, r5
   20d1a:	f7fb fad7 	bl	1c2cc <__aeabi_dcmpgt>
   20d1e:	2800      	cmp	r0, #0
   20d20:	d001      	beq.n	20d26 <_dtoa_r+0x35a>
   20d22:	f000 fdfe 	bl	21922 <_dtoa_r+0xf56>
   20d26:	002a      	movs	r2, r5
   20d28:	0033      	movs	r3, r6
   20d2a:	2000      	movs	r0, #0
   20d2c:	4912      	ldr	r1, [pc, #72]	; (20d78 <_dtoa_r+0x3ac>)
   20d2e:	f7fd fc71 	bl	1e614 <__aeabi_dsub>
   20d32:	0002      	movs	r2, r0
   20d34:	000b      	movs	r3, r1
   20d36:	9808      	ldr	r0, [sp, #32]
   20d38:	9909      	ldr	r1, [sp, #36]	; 0x24
   20d3a:	f7fb fac7 	bl	1c2cc <__aeabi_dcmpgt>
   20d3e:	2800      	cmp	r0, #0
   20d40:	d001      	beq.n	20d46 <_dtoa_r+0x37a>
   20d42:	f000 fde7 	bl	21914 <_dtoa_r+0xf48>
   20d46:	9b12      	ldr	r3, [sp, #72]	; 0x48
   20d48:	2b01      	cmp	r3, #1
   20d4a:	d101      	bne.n	20d50 <_dtoa_r+0x384>
   20d4c:	f000 fc78 	bl	21640 <_dtoa_r+0xc74>
   20d50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   20d52:	9b12      	ldr	r3, [sp, #72]	; 0x48
   20d54:	4694      	mov	ip, r2
   20d56:	4463      	add	r3, ip
   20d58:	4698      	mov	r8, r3
   20d5a:	464b      	mov	r3, r9
   20d5c:	9312      	str	r3, [sp, #72]	; 0x48
   20d5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   20d60:	4699      	mov	r9, r3
   20d62:	e038      	b.n	20dd6 <_dtoa_r+0x40a>
   20d64:	7ff00000 	.word	0x7ff00000
   20d68:	00025379 	.word	0x00025379
   20d6c:	0000270f 	.word	0x0000270f
   20d70:	0002539c 	.word	0x0002539c
   20d74:	000253a8 	.word	0x000253a8
   20d78:	3ff00000 	.word	0x3ff00000
   20d7c:	fffffc01 	.word	0xfffffc01
   20d80:	3ff80000 	.word	0x3ff80000
   20d84:	636f4361 	.word	0x636f4361
   20d88:	3fd287a7 	.word	0x3fd287a7
   20d8c:	8b60c8b3 	.word	0x8b60c8b3
   20d90:	3fc68a28 	.word	0x3fc68a28
   20d94:	509f79fb 	.word	0x509f79fb
   20d98:	3fd34413 	.word	0x3fd34413
   20d9c:	000253d8 	.word	0x000253d8
   20da0:	000253b0 	.word	0x000253b0
   20da4:	401c0000 	.word	0x401c0000
   20da8:	fcc00000 	.word	0xfcc00000
   20dac:	3fe00000 	.word	0x3fe00000
   20db0:	002a      	movs	r2, r5
   20db2:	0033      	movs	r3, r6
   20db4:	2000      	movs	r0, #0
   20db6:	49b9      	ldr	r1, [pc, #740]	; (2109c <_dtoa_r+0x6d0>)
   20db8:	f7fd fc2c 	bl	1e614 <__aeabi_dsub>
   20dbc:	9a08      	ldr	r2, [sp, #32]
   20dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20dc0:	f7fb fa70 	bl	1c2a4 <__aeabi_dcmplt>
   20dc4:	2800      	cmp	r0, #0
   20dc6:	d001      	beq.n	20dcc <_dtoa_r+0x400>
   20dc8:	f000 fd74 	bl	218b4 <_dtoa_r+0xee8>
   20dcc:	46a1      	mov	r9, r4
   20dce:	4544      	cmp	r4, r8
   20dd0:	d101      	bne.n	20dd6 <_dtoa_r+0x40a>
   20dd2:	f000 fc33 	bl	2163c <_dtoa_r+0xc70>
   20dd6:	9808      	ldr	r0, [sp, #32]
   20dd8:	9909      	ldr	r1, [sp, #36]	; 0x24
   20dda:	2200      	movs	r2, #0
   20ddc:	4bb0      	ldr	r3, [pc, #704]	; (210a0 <_dtoa_r+0x6d4>)
   20dde:	f7fd f999 	bl	1e114 <__aeabi_dmul>
   20de2:	2200      	movs	r2, #0
   20de4:	4bae      	ldr	r3, [pc, #696]	; (210a0 <_dtoa_r+0x6d4>)
   20de6:	9008      	str	r0, [sp, #32]
   20de8:	9109      	str	r1, [sp, #36]	; 0x24
   20dea:	0028      	movs	r0, r5
   20dec:	0031      	movs	r1, r6
   20dee:	f7fd f991 	bl	1e114 <__aeabi_dmul>
   20df2:	000d      	movs	r5, r1
   20df4:	0004      	movs	r4, r0
   20df6:	f7fd ff43 	bl	1ec80 <__aeabi_d2iz>
   20dfa:	0007      	movs	r7, r0
   20dfc:	f7fd ff74 	bl	1ece8 <__aeabi_i2d>
   20e00:	0002      	movs	r2, r0
   20e02:	000b      	movs	r3, r1
   20e04:	0020      	movs	r0, r4
   20e06:	0029      	movs	r1, r5
   20e08:	f7fd fc04 	bl	1e614 <__aeabi_dsub>
   20e0c:	464b      	mov	r3, r9
   20e0e:	3730      	adds	r7, #48	; 0x30
   20e10:	b2ff      	uxtb	r7, r7
   20e12:	1c5c      	adds	r4, r3, #1
   20e14:	701f      	strb	r7, [r3, #0]
   20e16:	9a08      	ldr	r2, [sp, #32]
   20e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20e1a:	0005      	movs	r5, r0
   20e1c:	000e      	movs	r6, r1
   20e1e:	f7fb fa41 	bl	1c2a4 <__aeabi_dcmplt>
   20e22:	2800      	cmp	r0, #0
   20e24:	d0c4      	beq.n	20db0 <_dtoa_r+0x3e4>
   20e26:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   20e28:	9303      	str	r3, [sp, #12]
   20e2a:	4659      	mov	r1, fp
   20e2c:	4650      	mov	r0, sl
   20e2e:	f001 f8e9 	bl	22004 <_Bfree>
   20e32:	2300      	movs	r3, #0
   20e34:	7023      	strb	r3, [r4, #0]
   20e36:	9b03      	ldr	r3, [sp, #12]
   20e38:	9a24      	ldr	r2, [sp, #144]	; 0x90
   20e3a:	3301      	adds	r3, #1
   20e3c:	6013      	str	r3, [r2, #0]
   20e3e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   20e40:	2b00      	cmp	r3, #0
   20e42:	d100      	bne.n	20e46 <_dtoa_r+0x47a>
   20e44:	e3a8      	b.n	21598 <_dtoa_r+0xbcc>
   20e46:	601c      	str	r4, [r3, #0]
   20e48:	980a      	ldr	r0, [sp, #40]	; 0x28
   20e4a:	e5f4      	b.n	20a36 <_dtoa_r+0x6a>
   20e4c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   20e4e:	4699      	mov	r9, r3
   20e50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   20e52:	444b      	add	r3, r9
   20e54:	001c      	movs	r4, r3
   20e56:	4b93      	ldr	r3, [pc, #588]	; (210a4 <_dtoa_r+0x6d8>)
   20e58:	18e3      	adds	r3, r4, r3
   20e5a:	2b20      	cmp	r3, #32
   20e5c:	dc00      	bgt.n	20e60 <_dtoa_r+0x494>
   20e5e:	e17e      	b.n	2115e <_dtoa_r+0x792>
   20e60:	0031      	movs	r1, r6
   20e62:	4a91      	ldr	r2, [pc, #580]	; (210a8 <_dtoa_r+0x6dc>)
   20e64:	4640      	mov	r0, r8
   20e66:	18a2      	adds	r2, r4, r2
   20e68:	40d1      	lsrs	r1, r2
   20e6a:	000a      	movs	r2, r1
   20e6c:	2140      	movs	r1, #64	; 0x40
   20e6e:	1acb      	subs	r3, r1, r3
   20e70:	4098      	lsls	r0, r3
   20e72:	4310      	orrs	r0, r2
   20e74:	f7fd ff7a 	bl	1ed6c <__aeabi_ui2d>
   20e78:	1e63      	subs	r3, r4, #1
   20e7a:	4698      	mov	r8, r3
   20e7c:	2301      	movs	r3, #1
   20e7e:	4d8b      	ldr	r5, [pc, #556]	; (210ac <_dtoa_r+0x6e0>)
   20e80:	930f      	str	r3, [sp, #60]	; 0x3c
   20e82:	1949      	adds	r1, r1, r5
   20e84:	e618      	b.n	20ab8 <_dtoa_r+0xec>
   20e86:	488a      	ldr	r0, [pc, #552]	; (210b0 <_dtoa_r+0x6e4>)
   20e88:	e5d5      	b.n	20a36 <_dtoa_r+0x6a>
   20e8a:	2300      	movs	r3, #0
   20e8c:	4652      	mov	r2, sl
   20e8e:	2100      	movs	r1, #0
   20e90:	6453      	str	r3, [r2, #68]	; 0x44
   20e92:	4650      	mov	r0, sl
   20e94:	f001 f88e 	bl	21fb4 <_Balloc>
   20e98:	4653      	mov	r3, sl
   20e9a:	6418      	str	r0, [r3, #64]	; 0x40
   20e9c:	2301      	movs	r3, #1
   20e9e:	425b      	negs	r3, r3
   20ea0:	9307      	str	r3, [sp, #28]
   20ea2:	930e      	str	r3, [sp, #56]	; 0x38
   20ea4:	3302      	adds	r3, #2
   20ea6:	2200      	movs	r2, #0
   20ea8:	930b      	str	r3, [sp, #44]	; 0x2c
   20eaa:	2300      	movs	r3, #0
   20eac:	900a      	str	r0, [sp, #40]	; 0x28
   20eae:	9223      	str	r2, [sp, #140]	; 0x8c
   20eb0:	9322      	str	r3, [sp, #136]	; 0x88
   20eb2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   20eb4:	2b00      	cmp	r3, #0
   20eb6:	da00      	bge.n	20eba <_dtoa_r+0x4ee>
   20eb8:	e0ab      	b.n	21012 <_dtoa_r+0x646>
   20eba:	9a03      	ldr	r2, [sp, #12]
   20ebc:	2a0e      	cmp	r2, #14
   20ebe:	dd00      	ble.n	20ec2 <_dtoa_r+0x4f6>
   20ec0:	e0a7      	b.n	21012 <_dtoa_r+0x646>
   20ec2:	4b7c      	ldr	r3, [pc, #496]	; (210b4 <_dtoa_r+0x6e8>)
   20ec4:	00d2      	lsls	r2, r2, #3
   20ec6:	189b      	adds	r3, r3, r2
   20ec8:	685c      	ldr	r4, [r3, #4]
   20eca:	681b      	ldr	r3, [r3, #0]
   20ecc:	9304      	str	r3, [sp, #16]
   20ece:	9405      	str	r4, [sp, #20]
   20ed0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   20ed2:	2b00      	cmp	r3, #0
   20ed4:	da00      	bge.n	20ed8 <_dtoa_r+0x50c>
   20ed6:	e2a7      	b.n	21428 <_dtoa_r+0xa5c>
   20ed8:	9c04      	ldr	r4, [sp, #16]
   20eda:	9d05      	ldr	r5, [sp, #20]
   20edc:	0030      	movs	r0, r6
   20ede:	0022      	movs	r2, r4
   20ee0:	002b      	movs	r3, r5
   20ee2:	0039      	movs	r1, r7
   20ee4:	f7fc fce2 	bl	1d8ac <__aeabi_ddiv>
   20ee8:	f7fd feca 	bl	1ec80 <__aeabi_d2iz>
   20eec:	4680      	mov	r8, r0
   20eee:	f7fd fefb 	bl	1ece8 <__aeabi_i2d>
   20ef2:	0022      	movs	r2, r4
   20ef4:	002b      	movs	r3, r5
   20ef6:	f7fd f90d 	bl	1e114 <__aeabi_dmul>
   20efa:	0002      	movs	r2, r0
   20efc:	000b      	movs	r3, r1
   20efe:	0030      	movs	r0, r6
   20f00:	0039      	movs	r1, r7
   20f02:	f7fd fb87 	bl	1e614 <__aeabi_dsub>
   20f06:	4643      	mov	r3, r8
   20f08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   20f0a:	3330      	adds	r3, #48	; 0x30
   20f0c:	7013      	strb	r3, [r2, #0]
   20f0e:	9b07      	ldr	r3, [sp, #28]
   20f10:	0006      	movs	r6, r0
   20f12:	000f      	movs	r7, r1
   20f14:	1c54      	adds	r4, r2, #1
   20f16:	2b01      	cmp	r3, #1
   20f18:	d04e      	beq.n	20fb8 <_dtoa_r+0x5ec>
   20f1a:	2200      	movs	r2, #0
   20f1c:	4b60      	ldr	r3, [pc, #384]	; (210a0 <_dtoa_r+0x6d4>)
   20f1e:	f7fd f8f9 	bl	1e114 <__aeabi_dmul>
   20f22:	2200      	movs	r2, #0
   20f24:	2300      	movs	r3, #0
   20f26:	0006      	movs	r6, r0
   20f28:	000f      	movs	r7, r1
   20f2a:	f7fb f9b5 	bl	1c298 <__aeabi_dcmpeq>
   20f2e:	2800      	cmp	r0, #0
   20f30:	d000      	beq.n	20f34 <_dtoa_r+0x568>
   20f32:	e77a      	b.n	20e2a <_dtoa_r+0x45e>
   20f34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20f36:	9a07      	ldr	r2, [sp, #28]
   20f38:	1c9d      	adds	r5, r3, #2
   20f3a:	469c      	mov	ip, r3
   20f3c:	465b      	mov	r3, fp
   20f3e:	9306      	str	r3, [sp, #24]
   20f40:	4653      	mov	r3, sl
   20f42:	4462      	add	r2, ip
   20f44:	46aa      	mov	sl, r5
   20f46:	9c04      	ldr	r4, [sp, #16]
   20f48:	9d05      	ldr	r5, [sp, #20]
   20f4a:	4691      	mov	r9, r2
   20f4c:	9307      	str	r3, [sp, #28]
   20f4e:	e00f      	b.n	20f70 <_dtoa_r+0x5a4>
   20f50:	2200      	movs	r2, #0
   20f52:	4b53      	ldr	r3, [pc, #332]	; (210a0 <_dtoa_r+0x6d4>)
   20f54:	f7fd f8de 	bl	1e114 <__aeabi_dmul>
   20f58:	2301      	movs	r3, #1
   20f5a:	469c      	mov	ip, r3
   20f5c:	2200      	movs	r2, #0
   20f5e:	2300      	movs	r3, #0
   20f60:	0006      	movs	r6, r0
   20f62:	000f      	movs	r7, r1
   20f64:	44e2      	add	sl, ip
   20f66:	f7fb f997 	bl	1c298 <__aeabi_dcmpeq>
   20f6a:	2800      	cmp	r0, #0
   20f6c:	d000      	beq.n	20f70 <_dtoa_r+0x5a4>
   20f6e:	e2d9      	b.n	21524 <_dtoa_r+0xb58>
   20f70:	0022      	movs	r2, r4
   20f72:	002b      	movs	r3, r5
   20f74:	0030      	movs	r0, r6
   20f76:	0039      	movs	r1, r7
   20f78:	f7fc fc98 	bl	1d8ac <__aeabi_ddiv>
   20f7c:	f7fd fe80 	bl	1ec80 <__aeabi_d2iz>
   20f80:	4680      	mov	r8, r0
   20f82:	f7fd feb1 	bl	1ece8 <__aeabi_i2d>
   20f86:	0022      	movs	r2, r4
   20f88:	002b      	movs	r3, r5
   20f8a:	f7fd f8c3 	bl	1e114 <__aeabi_dmul>
   20f8e:	0002      	movs	r2, r0
   20f90:	000b      	movs	r3, r1
   20f92:	0030      	movs	r0, r6
   20f94:	0039      	movs	r1, r7
   20f96:	f7fd fb3d 	bl	1e614 <__aeabi_dsub>
   20f9a:	4653      	mov	r3, sl
   20f9c:	4642      	mov	r2, r8
   20f9e:	3b01      	subs	r3, #1
   20fa0:	3230      	adds	r2, #48	; 0x30
   20fa2:	0006      	movs	r6, r0
   20fa4:	000f      	movs	r7, r1
   20fa6:	46d3      	mov	fp, sl
   20fa8:	701a      	strb	r2, [r3, #0]
   20faa:	45d1      	cmp	r9, sl
   20fac:	d1d0      	bne.n	20f50 <_dtoa_r+0x584>
   20fae:	9b06      	ldr	r3, [sp, #24]
   20fb0:	4654      	mov	r4, sl
   20fb2:	469b      	mov	fp, r3
   20fb4:	9b07      	ldr	r3, [sp, #28]
   20fb6:	469a      	mov	sl, r3
   20fb8:	0032      	movs	r2, r6
   20fba:	003b      	movs	r3, r7
   20fbc:	0030      	movs	r0, r6
   20fbe:	0039      	movs	r1, r7
   20fc0:	f7fc f964 	bl	1d28c <__aeabi_dadd>
   20fc4:	0006      	movs	r6, r0
   20fc6:	000f      	movs	r7, r1
   20fc8:	0002      	movs	r2, r0
   20fca:	000b      	movs	r3, r1
   20fcc:	9804      	ldr	r0, [sp, #16]
   20fce:	9905      	ldr	r1, [sp, #20]
   20fd0:	f7fb f968 	bl	1c2a4 <__aeabi_dcmplt>
   20fd4:	2800      	cmp	r0, #0
   20fd6:	d10c      	bne.n	20ff2 <_dtoa_r+0x626>
   20fd8:	9804      	ldr	r0, [sp, #16]
   20fda:	9905      	ldr	r1, [sp, #20]
   20fdc:	0032      	movs	r2, r6
   20fde:	003b      	movs	r3, r7
   20fe0:	f7fb f95a 	bl	1c298 <__aeabi_dcmpeq>
   20fe4:	2800      	cmp	r0, #0
   20fe6:	d100      	bne.n	20fea <_dtoa_r+0x61e>
   20fe8:	e71f      	b.n	20e2a <_dtoa_r+0x45e>
   20fea:	4643      	mov	r3, r8
   20fec:	07db      	lsls	r3, r3, #31
   20fee:	d400      	bmi.n	20ff2 <_dtoa_r+0x626>
   20ff0:	e71b      	b.n	20e2a <_dtoa_r+0x45e>
   20ff2:	1e65      	subs	r5, r4, #1
   20ff4:	782f      	ldrb	r7, [r5, #0]
   20ff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20ff8:	e006      	b.n	21008 <_dtoa_r+0x63c>
   20ffa:	429d      	cmp	r5, r3
   20ffc:	d100      	bne.n	21000 <_dtoa_r+0x634>
   20ffe:	e351      	b.n	216a4 <_dtoa_r+0xcd8>
   21000:	3c02      	subs	r4, #2
   21002:	7827      	ldrb	r7, [r4, #0]
   21004:	002c      	movs	r4, r5
   21006:	3d01      	subs	r5, #1
   21008:	2f39      	cmp	r7, #57	; 0x39
   2100a:	d0f6      	beq.n	20ffa <_dtoa_r+0x62e>
   2100c:	3701      	adds	r7, #1
   2100e:	702f      	strb	r7, [r5, #0]
   21010:	e70b      	b.n	20e2a <_dtoa_r+0x45e>
   21012:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   21014:	2a00      	cmp	r2, #0
   21016:	d04f      	beq.n	210b8 <_dtoa_r+0x6ec>
   21018:	9a22      	ldr	r2, [sp, #136]	; 0x88
   2101a:	2a01      	cmp	r2, #1
   2101c:	dc00      	bgt.n	21020 <_dtoa_r+0x654>
   2101e:	e22c      	b.n	2147a <_dtoa_r+0xaae>
   21020:	9b07      	ldr	r3, [sp, #28]
   21022:	1e5c      	subs	r4, r3, #1
   21024:	464b      	mov	r3, r9
   21026:	45a1      	cmp	r9, r4
   21028:	da00      	bge.n	2102c <_dtoa_r+0x660>
   2102a:	e2b8      	b.n	2159e <_dtoa_r+0xbd2>
   2102c:	1b1c      	subs	r4, r3, r4
   2102e:	9b07      	ldr	r3, [sp, #28]
   21030:	2b00      	cmp	r3, #0
   21032:	da00      	bge.n	21036 <_dtoa_r+0x66a>
   21034:	e3d4      	b.n	217e0 <_dtoa_r+0xe14>
   21036:	9b06      	ldr	r3, [sp, #24]
   21038:	9308      	str	r3, [sp, #32]
   2103a:	9b07      	ldr	r3, [sp, #28]
   2103c:	9a06      	ldr	r2, [sp, #24]
   2103e:	2101      	movs	r1, #1
   21040:	4694      	mov	ip, r2
   21042:	449c      	add	ip, r3
   21044:	4662      	mov	r2, ip
   21046:	9206      	str	r2, [sp, #24]
   21048:	9a04      	ldr	r2, [sp, #16]
   2104a:	4650      	mov	r0, sl
   2104c:	4694      	mov	ip, r2
   2104e:	449c      	add	ip, r3
   21050:	4663      	mov	r3, ip
   21052:	9304      	str	r3, [sp, #16]
   21054:	f001 f86e 	bl	22134 <__i2b>
   21058:	4680      	mov	r8, r0
   2105a:	e032      	b.n	210c2 <_dtoa_r+0x6f6>
   2105c:	9a06      	ldr	r2, [sp, #24]
   2105e:	9b03      	ldr	r3, [sp, #12]
   21060:	1ad2      	subs	r2, r2, r3
   21062:	425b      	negs	r3, r3
   21064:	4699      	mov	r9, r3
   21066:	2300      	movs	r3, #0
   21068:	9206      	str	r2, [sp, #24]
   2106a:	930d      	str	r3, [sp, #52]	; 0x34
   2106c:	e579      	b.n	20b62 <_dtoa_r+0x196>
   2106e:	9803      	ldr	r0, [sp, #12]
   21070:	f7fd fe3a 	bl	1ece8 <__aeabi_i2d>
   21074:	000b      	movs	r3, r1
   21076:	0002      	movs	r2, r0
   21078:	0029      	movs	r1, r5
   2107a:	0020      	movs	r0, r4
   2107c:	f7fb f90c 	bl	1c298 <__aeabi_dcmpeq>
   21080:	0002      	movs	r2, r0
   21082:	4250      	negs	r0, r2
   21084:	4150      	adcs	r0, r2
   21086:	9b03      	ldr	r3, [sp, #12]
   21088:	1a1b      	subs	r3, r3, r0
   2108a:	9303      	str	r3, [sp, #12]
   2108c:	e53d      	b.n	20b0a <_dtoa_r+0x13e>
   2108e:	2301      	movs	r3, #1
   21090:	1a9b      	subs	r3, r3, r2
   21092:	9306      	str	r3, [sp, #24]
   21094:	2300      	movs	r3, #0
   21096:	9304      	str	r3, [sp, #16]
   21098:	e557      	b.n	20b4a <_dtoa_r+0x17e>
   2109a:	46c0      	nop			; (mov r8, r8)
   2109c:	3ff00000 	.word	0x3ff00000
   210a0:	40240000 	.word	0x40240000
   210a4:	00000432 	.word	0x00000432
   210a8:	00000412 	.word	0x00000412
   210ac:	fe100000 	.word	0xfe100000
   210b0:	00025378 	.word	0x00025378
   210b4:	000253d8 	.word	0x000253d8
   210b8:	9b06      	ldr	r3, [sp, #24]
   210ba:	464c      	mov	r4, r9
   210bc:	9308      	str	r3, [sp, #32]
   210be:	2300      	movs	r3, #0
   210c0:	4698      	mov	r8, r3
   210c2:	9908      	ldr	r1, [sp, #32]
   210c4:	1e0b      	subs	r3, r1, #0
   210c6:	dd0e      	ble.n	210e6 <_dtoa_r+0x71a>
   210c8:	9a04      	ldr	r2, [sp, #16]
   210ca:	2a00      	cmp	r2, #0
   210cc:	dd0b      	ble.n	210e6 <_dtoa_r+0x71a>
   210ce:	4293      	cmp	r3, r2
   210d0:	dd00      	ble.n	210d4 <_dtoa_r+0x708>
   210d2:	e187      	b.n	213e4 <_dtoa_r+0xa18>
   210d4:	9a06      	ldr	r2, [sp, #24]
   210d6:	1ad2      	subs	r2, r2, r3
   210d8:	9206      	str	r2, [sp, #24]
   210da:	9a08      	ldr	r2, [sp, #32]
   210dc:	1ad2      	subs	r2, r2, r3
   210de:	9208      	str	r2, [sp, #32]
   210e0:	9a04      	ldr	r2, [sp, #16]
   210e2:	1ad3      	subs	r3, r2, r3
   210e4:	9304      	str	r3, [sp, #16]
   210e6:	464b      	mov	r3, r9
   210e8:	2b00      	cmp	r3, #0
   210ea:	d01a      	beq.n	21122 <_dtoa_r+0x756>
   210ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   210ee:	2b00      	cmp	r3, #0
   210f0:	d100      	bne.n	210f4 <_dtoa_r+0x728>
   210f2:	e1bb      	b.n	2146c <_dtoa_r+0xaa0>
   210f4:	2c00      	cmp	r4, #0
   210f6:	dd10      	ble.n	2111a <_dtoa_r+0x74e>
   210f8:	4641      	mov	r1, r8
   210fa:	0022      	movs	r2, r4
   210fc:	4650      	mov	r0, sl
   210fe:	f001 f8cd 	bl	2229c <__pow5mult>
   21102:	465a      	mov	r2, fp
   21104:	0001      	movs	r1, r0
   21106:	4680      	mov	r8, r0
   21108:	4650      	mov	r0, sl
   2110a:	f001 f81d 	bl	22148 <__multiply>
   2110e:	0005      	movs	r5, r0
   21110:	4659      	mov	r1, fp
   21112:	4650      	mov	r0, sl
   21114:	f000 ff76 	bl	22004 <_Bfree>
   21118:	46ab      	mov	fp, r5
   2111a:	464b      	mov	r3, r9
   2111c:	1b1a      	subs	r2, r3, r4
   2111e:	d000      	beq.n	21122 <_dtoa_r+0x756>
   21120:	e1a5      	b.n	2146e <_dtoa_r+0xaa2>
   21122:	2101      	movs	r1, #1
   21124:	4650      	mov	r0, sl
   21126:	f001 f805 	bl	22134 <__i2b>
   2112a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2112c:	4681      	mov	r9, r0
   2112e:	2b00      	cmp	r3, #0
   21130:	dd1d      	ble.n	2116e <_dtoa_r+0x7a2>
   21132:	001a      	movs	r2, r3
   21134:	0001      	movs	r1, r0
   21136:	4650      	mov	r0, sl
   21138:	f001 f8b0 	bl	2229c <__pow5mult>
   2113c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2113e:	4681      	mov	r9, r0
   21140:	2b01      	cmp	r3, #1
   21142:	dc00      	bgt.n	21146 <_dtoa_r+0x77a>
   21144:	e150      	b.n	213e8 <_dtoa_r+0xa1c>
   21146:	2400      	movs	r4, #0
   21148:	464b      	mov	r3, r9
   2114a:	691b      	ldr	r3, [r3, #16]
   2114c:	3303      	adds	r3, #3
   2114e:	009b      	lsls	r3, r3, #2
   21150:	444b      	add	r3, r9
   21152:	6858      	ldr	r0, [r3, #4]
   21154:	f000 ffa6 	bl	220a4 <__hi0bits>
   21158:	2320      	movs	r3, #32
   2115a:	1a1b      	subs	r3, r3, r0
   2115c:	e010      	b.n	21180 <_dtoa_r+0x7b4>
   2115e:	2220      	movs	r2, #32
   21160:	0030      	movs	r0, r6
   21162:	1ad3      	subs	r3, r2, r3
   21164:	4098      	lsls	r0, r3
   21166:	e685      	b.n	20e74 <_dtoa_r+0x4a8>
   21168:	2300      	movs	r3, #0
   2116a:	930c      	str	r3, [sp, #48]	; 0x30
   2116c:	e4e3      	b.n	20b36 <_dtoa_r+0x16a>
   2116e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   21170:	2400      	movs	r4, #0
   21172:	2b01      	cmp	r3, #1
   21174:	dc00      	bgt.n	21178 <_dtoa_r+0x7ac>
   21176:	e18b      	b.n	21490 <_dtoa_r+0xac4>
   21178:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2117a:	2301      	movs	r3, #1
   2117c:	2a00      	cmp	r2, #0
   2117e:	d1e3      	bne.n	21148 <_dtoa_r+0x77c>
   21180:	9904      	ldr	r1, [sp, #16]
   21182:	201f      	movs	r0, #31
   21184:	468c      	mov	ip, r1
   21186:	4463      	add	r3, ip
   21188:	4018      	ands	r0, r3
   2118a:	d100      	bne.n	2118e <_dtoa_r+0x7c2>
   2118c:	e0ae      	b.n	212ec <_dtoa_r+0x920>
   2118e:	2320      	movs	r3, #32
   21190:	1a1b      	subs	r3, r3, r0
   21192:	2b04      	cmp	r3, #4
   21194:	dc00      	bgt.n	21198 <_dtoa_r+0x7cc>
   21196:	e3cc      	b.n	21932 <_dtoa_r+0xf66>
   21198:	231c      	movs	r3, #28
   2119a:	1a18      	subs	r0, r3, r0
   2119c:	9b06      	ldr	r3, [sp, #24]
   2119e:	469c      	mov	ip, r3
   211a0:	4484      	add	ip, r0
   211a2:	4663      	mov	r3, ip
   211a4:	9306      	str	r3, [sp, #24]
   211a6:	9b08      	ldr	r3, [sp, #32]
   211a8:	469c      	mov	ip, r3
   211aa:	4484      	add	ip, r0
   211ac:	4663      	mov	r3, ip
   211ae:	468c      	mov	ip, r1
   211b0:	4484      	add	ip, r0
   211b2:	9308      	str	r3, [sp, #32]
   211b4:	4663      	mov	r3, ip
   211b6:	9304      	str	r3, [sp, #16]
   211b8:	9b06      	ldr	r3, [sp, #24]
   211ba:	2b00      	cmp	r3, #0
   211bc:	dd05      	ble.n	211ca <_dtoa_r+0x7fe>
   211be:	4659      	mov	r1, fp
   211c0:	001a      	movs	r2, r3
   211c2:	4650      	mov	r0, sl
   211c4:	f001 f8ca 	bl	2235c <__lshift>
   211c8:	4683      	mov	fp, r0
   211ca:	9b04      	ldr	r3, [sp, #16]
   211cc:	2b00      	cmp	r3, #0
   211ce:	dd05      	ble.n	211dc <_dtoa_r+0x810>
   211d0:	4649      	mov	r1, r9
   211d2:	001a      	movs	r2, r3
   211d4:	4650      	mov	r0, sl
   211d6:	f001 f8c1 	bl	2235c <__lshift>
   211da:	4681      	mov	r9, r0
   211dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   211de:	2b00      	cmp	r3, #0
   211e0:	d000      	beq.n	211e4 <_dtoa_r+0x818>
   211e2:	e094      	b.n	2130e <_dtoa_r+0x942>
   211e4:	9b07      	ldr	r3, [sp, #28]
   211e6:	2b00      	cmp	r3, #0
   211e8:	dc00      	bgt.n	211ec <_dtoa_r+0x820>
   211ea:	e175      	b.n	214d8 <_dtoa_r+0xb0c>
   211ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   211ee:	2b00      	cmp	r3, #0
   211f0:	d100      	bne.n	211f4 <_dtoa_r+0x828>
   211f2:	e0a6      	b.n	21342 <_dtoa_r+0x976>
   211f4:	9b08      	ldr	r3, [sp, #32]
   211f6:	2b00      	cmp	r3, #0
   211f8:	dd05      	ble.n	21206 <_dtoa_r+0x83a>
   211fa:	4641      	mov	r1, r8
   211fc:	001a      	movs	r2, r3
   211fe:	4650      	mov	r0, sl
   21200:	f001 f8ac 	bl	2235c <__lshift>
   21204:	4680      	mov	r8, r0
   21206:	4643      	mov	r3, r8
   21208:	930c      	str	r3, [sp, #48]	; 0x30
   2120a:	2c00      	cmp	r4, #0
   2120c:	d000      	beq.n	21210 <_dtoa_r+0x844>
   2120e:	e250      	b.n	216b2 <_dtoa_r+0xce6>
   21210:	9c07      	ldr	r4, [sp, #28]
   21212:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   21214:	3c01      	subs	r4, #1
   21216:	0023      	movs	r3, r4
   21218:	4694      	mov	ip, r2
   2121a:	4463      	add	r3, ip
   2121c:	9308      	str	r3, [sp, #32]
   2121e:	2301      	movs	r3, #1
   21220:	4033      	ands	r3, r6
   21222:	9307      	str	r3, [sp, #28]
   21224:	464b      	mov	r3, r9
   21226:	9306      	str	r3, [sp, #24]
   21228:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2122a:	4657      	mov	r7, sl
   2122c:	4645      	mov	r5, r8
   2122e:	465e      	mov	r6, fp
   21230:	4692      	mov	sl, r2
   21232:	4698      	mov	r8, r3
   21234:	9b06      	ldr	r3, [sp, #24]
   21236:	0030      	movs	r0, r6
   21238:	0019      	movs	r1, r3
   2123a:	4699      	mov	r9, r3
   2123c:	f7ff fb1c 	bl	20878 <quorem>
   21240:	0003      	movs	r3, r0
   21242:	900b      	str	r0, [sp, #44]	; 0x2c
   21244:	3330      	adds	r3, #48	; 0x30
   21246:	0029      	movs	r1, r5
   21248:	0030      	movs	r0, r6
   2124a:	9304      	str	r3, [sp, #16]
   2124c:	f001 f8e6 	bl	2241c <__mcmp>
   21250:	4649      	mov	r1, r9
   21252:	0004      	movs	r4, r0
   21254:	4642      	mov	r2, r8
   21256:	0038      	movs	r0, r7
   21258:	f001 f8fa 	bl	22450 <__mdiff>
   2125c:	68c3      	ldr	r3, [r0, #12]
   2125e:	4681      	mov	r9, r0
   21260:	2b00      	cmp	r3, #0
   21262:	d000      	beq.n	21266 <_dtoa_r+0x89a>
   21264:	e11e      	b.n	214a4 <_dtoa_r+0xad8>
   21266:	0001      	movs	r1, r0
   21268:	0030      	movs	r0, r6
   2126a:	f001 f8d7 	bl	2241c <__mcmp>
   2126e:	4683      	mov	fp, r0
   21270:	4649      	mov	r1, r9
   21272:	0038      	movs	r0, r7
   21274:	f000 fec6 	bl	22004 <_Bfree>
   21278:	465b      	mov	r3, fp
   2127a:	9a22      	ldr	r2, [sp, #136]	; 0x88
   2127c:	4313      	orrs	r3, r2
   2127e:	d103      	bne.n	21288 <_dtoa_r+0x8bc>
   21280:	9b07      	ldr	r3, [sp, #28]
   21282:	2b00      	cmp	r3, #0
   21284:	d100      	bne.n	21288 <_dtoa_r+0x8bc>
   21286:	e306      	b.n	21896 <_dtoa_r+0xeca>
   21288:	2c00      	cmp	r4, #0
   2128a:	da00      	bge.n	2128e <_dtoa_r+0x8c2>
   2128c:	e1a8      	b.n	215e0 <_dtoa_r+0xc14>
   2128e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   21290:	431c      	orrs	r4, r3
   21292:	d103      	bne.n	2129c <_dtoa_r+0x8d0>
   21294:	9b07      	ldr	r3, [sp, #28]
   21296:	2b00      	cmp	r3, #0
   21298:	d100      	bne.n	2129c <_dtoa_r+0x8d0>
   2129a:	e1a1      	b.n	215e0 <_dtoa_r+0xc14>
   2129c:	465b      	mov	r3, fp
   2129e:	2b00      	cmp	r3, #0
   212a0:	dd00      	ble.n	212a4 <_dtoa_r+0x8d8>
   212a2:	e282      	b.n	217aa <_dtoa_r+0xdde>
   212a4:	4669      	mov	r1, sp
   212a6:	4652      	mov	r2, sl
   212a8:	4653      	mov	r3, sl
   212aa:	7c09      	ldrb	r1, [r1, #16]
   212ac:	1c5c      	adds	r4, r3, #1
   212ae:	7011      	strb	r1, [r2, #0]
   212b0:	9a08      	ldr	r2, [sp, #32]
   212b2:	4552      	cmp	r2, sl
   212b4:	d100      	bne.n	212b8 <_dtoa_r+0x8ec>
   212b6:	e28a      	b.n	217ce <_dtoa_r+0xe02>
   212b8:	0031      	movs	r1, r6
   212ba:	2300      	movs	r3, #0
   212bc:	220a      	movs	r2, #10
   212be:	0038      	movs	r0, r7
   212c0:	f000 feaa 	bl	22018 <__multadd>
   212c4:	2300      	movs	r3, #0
   212c6:	0006      	movs	r6, r0
   212c8:	220a      	movs	r2, #10
   212ca:	0029      	movs	r1, r5
   212cc:	0038      	movs	r0, r7
   212ce:	4545      	cmp	r5, r8
   212d0:	d100      	bne.n	212d4 <_dtoa_r+0x908>
   212d2:	e0e1      	b.n	21498 <_dtoa_r+0xacc>
   212d4:	f000 fea0 	bl	22018 <__multadd>
   212d8:	4641      	mov	r1, r8
   212da:	0005      	movs	r5, r0
   212dc:	2300      	movs	r3, #0
   212de:	220a      	movs	r2, #10
   212e0:	0038      	movs	r0, r7
   212e2:	f000 fe99 	bl	22018 <__multadd>
   212e6:	46a2      	mov	sl, r4
   212e8:	4680      	mov	r8, r0
   212ea:	e7a3      	b.n	21234 <_dtoa_r+0x868>
   212ec:	201c      	movs	r0, #28
   212ee:	9b06      	ldr	r3, [sp, #24]
   212f0:	469c      	mov	ip, r3
   212f2:	4484      	add	ip, r0
   212f4:	4663      	mov	r3, ip
   212f6:	9306      	str	r3, [sp, #24]
   212f8:	9b08      	ldr	r3, [sp, #32]
   212fa:	469c      	mov	ip, r3
   212fc:	4484      	add	ip, r0
   212fe:	4663      	mov	r3, ip
   21300:	9308      	str	r3, [sp, #32]
   21302:	9b04      	ldr	r3, [sp, #16]
   21304:	469c      	mov	ip, r3
   21306:	4484      	add	ip, r0
   21308:	4663      	mov	r3, ip
   2130a:	9304      	str	r3, [sp, #16]
   2130c:	e754      	b.n	211b8 <_dtoa_r+0x7ec>
   2130e:	4649      	mov	r1, r9
   21310:	4658      	mov	r0, fp
   21312:	f001 f883 	bl	2241c <__mcmp>
   21316:	2800      	cmp	r0, #0
   21318:	db00      	blt.n	2131c <_dtoa_r+0x950>
   2131a:	e763      	b.n	211e4 <_dtoa_r+0x818>
   2131c:	9b03      	ldr	r3, [sp, #12]
   2131e:	4659      	mov	r1, fp
   21320:	3b01      	subs	r3, #1
   21322:	9303      	str	r3, [sp, #12]
   21324:	220a      	movs	r2, #10
   21326:	2300      	movs	r3, #0
   21328:	4650      	mov	r0, sl
   2132a:	f000 fe75 	bl	22018 <__multadd>
   2132e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   21330:	4683      	mov	fp, r0
   21332:	2b00      	cmp	r3, #0
   21334:	d000      	beq.n	21338 <_dtoa_r+0x96c>
   21336:	e2ca      	b.n	218ce <_dtoa_r+0xf02>
   21338:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2133a:	2b00      	cmp	r3, #0
   2133c:	dc00      	bgt.n	21340 <_dtoa_r+0x974>
   2133e:	e2d8      	b.n	218f2 <_dtoa_r+0xf26>
   21340:	9307      	str	r3, [sp, #28]
   21342:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21344:	465d      	mov	r5, fp
   21346:	2400      	movs	r4, #0
   21348:	9f07      	ldr	r7, [sp, #28]
   2134a:	469b      	mov	fp, r3
   2134c:	e006      	b.n	2135c <_dtoa_r+0x990>
   2134e:	0029      	movs	r1, r5
   21350:	2300      	movs	r3, #0
   21352:	220a      	movs	r2, #10
   21354:	4650      	mov	r0, sl
   21356:	f000 fe5f 	bl	22018 <__multadd>
   2135a:	0005      	movs	r5, r0
   2135c:	4649      	mov	r1, r9
   2135e:	0028      	movs	r0, r5
   21360:	f7ff fa8a 	bl	20878 <quorem>
   21364:	465b      	mov	r3, fp
   21366:	3030      	adds	r0, #48	; 0x30
   21368:	5518      	strb	r0, [r3, r4]
   2136a:	3401      	adds	r4, #1
   2136c:	42bc      	cmp	r4, r7
   2136e:	dbee      	blt.n	2134e <_dtoa_r+0x982>
   21370:	46ab      	mov	fp, r5
   21372:	0006      	movs	r6, r0
   21374:	9c07      	ldr	r4, [sp, #28]
   21376:	2c00      	cmp	r4, #0
   21378:	dc00      	bgt.n	2137c <_dtoa_r+0x9b0>
   2137a:	e237      	b.n	217ec <_dtoa_r+0xe20>
   2137c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2137e:	2700      	movs	r7, #0
   21380:	469c      	mov	ip, r3
   21382:	4464      	add	r4, ip
   21384:	4659      	mov	r1, fp
   21386:	2201      	movs	r2, #1
   21388:	4650      	mov	r0, sl
   2138a:	f000 ffe7 	bl	2235c <__lshift>
   2138e:	4649      	mov	r1, r9
   21390:	4683      	mov	fp, r0
   21392:	f001 f843 	bl	2241c <__mcmp>
   21396:	2800      	cmp	r0, #0
   21398:	dc00      	bgt.n	2139c <_dtoa_r+0x9d0>
   2139a:	e144      	b.n	21626 <_dtoa_r+0xc5a>
   2139c:	1e65      	subs	r5, r4, #1
   2139e:	782b      	ldrb	r3, [r5, #0]
   213a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   213a2:	e006      	b.n	213b2 <_dtoa_r+0x9e6>
   213a4:	4295      	cmp	r5, r2
   213a6:	d100      	bne.n	213aa <_dtoa_r+0x9de>
   213a8:	e0b1      	b.n	2150e <_dtoa_r+0xb42>
   213aa:	3c02      	subs	r4, #2
   213ac:	7823      	ldrb	r3, [r4, #0]
   213ae:	002c      	movs	r4, r5
   213b0:	3d01      	subs	r5, #1
   213b2:	2b39      	cmp	r3, #57	; 0x39
   213b4:	d0f6      	beq.n	213a4 <_dtoa_r+0x9d8>
   213b6:	3301      	adds	r3, #1
   213b8:	702b      	strb	r3, [r5, #0]
   213ba:	4649      	mov	r1, r9
   213bc:	4650      	mov	r0, sl
   213be:	f000 fe21 	bl	22004 <_Bfree>
   213c2:	4643      	mov	r3, r8
   213c4:	2b00      	cmp	r3, #0
   213c6:	d100      	bne.n	213ca <_dtoa_r+0x9fe>
   213c8:	e52f      	b.n	20e2a <_dtoa_r+0x45e>
   213ca:	2f00      	cmp	r7, #0
   213cc:	d005      	beq.n	213da <_dtoa_r+0xa0e>
   213ce:	4547      	cmp	r7, r8
   213d0:	d003      	beq.n	213da <_dtoa_r+0xa0e>
   213d2:	0039      	movs	r1, r7
   213d4:	4650      	mov	r0, sl
   213d6:	f000 fe15 	bl	22004 <_Bfree>
   213da:	4641      	mov	r1, r8
   213dc:	4650      	mov	r0, sl
   213de:	f000 fe11 	bl	22004 <_Bfree>
   213e2:	e522      	b.n	20e2a <_dtoa_r+0x45e>
   213e4:	0013      	movs	r3, r2
   213e6:	e675      	b.n	210d4 <_dtoa_r+0x708>
   213e8:	2e00      	cmp	r6, #0
   213ea:	d000      	beq.n	213ee <_dtoa_r+0xa22>
   213ec:	e6ab      	b.n	21146 <_dtoa_r+0x77a>
   213ee:	033b      	lsls	r3, r7, #12
   213f0:	2400      	movs	r4, #0
   213f2:	2b00      	cmp	r3, #0
   213f4:	d000      	beq.n	213f8 <_dtoa_r+0xa2c>
   213f6:	e6bf      	b.n	21178 <_dtoa_r+0x7ac>
   213f8:	4bba      	ldr	r3, [pc, #744]	; (216e4 <_dtoa_r+0xd18>)
   213fa:	423b      	tst	r3, r7
   213fc:	d100      	bne.n	21400 <_dtoa_r+0xa34>
   213fe:	e6bb      	b.n	21178 <_dtoa_r+0x7ac>
   21400:	9b06      	ldr	r3, [sp, #24]
   21402:	3401      	adds	r4, #1
   21404:	3301      	adds	r3, #1
   21406:	9306      	str	r3, [sp, #24]
   21408:	9b04      	ldr	r3, [sp, #16]
   2140a:	3301      	adds	r3, #1
   2140c:	9304      	str	r3, [sp, #16]
   2140e:	e6b3      	b.n	21178 <_dtoa_r+0x7ac>
   21410:	2301      	movs	r3, #1
   21412:	930b      	str	r3, [sp, #44]	; 0x2c
   21414:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   21416:	2b00      	cmp	r3, #0
   21418:	dc00      	bgt.n	2141c <_dtoa_r+0xa50>
   2141a:	e0d1      	b.n	215c0 <_dtoa_r+0xbf4>
   2141c:	001d      	movs	r5, r3
   2141e:	4698      	mov	r8, r3
   21420:	930e      	str	r3, [sp, #56]	; 0x38
   21422:	9307      	str	r3, [sp, #28]
   21424:	f7ff fbc8 	bl	20bb8 <_dtoa_r+0x1ec>
   21428:	9b07      	ldr	r3, [sp, #28]
   2142a:	2b00      	cmp	r3, #0
   2142c:	dd00      	ble.n	21430 <_dtoa_r+0xa64>
   2142e:	e553      	b.n	20ed8 <_dtoa_r+0x50c>
   21430:	d000      	beq.n	21434 <_dtoa_r+0xa68>
   21432:	e0ad      	b.n	21590 <_dtoa_r+0xbc4>
   21434:	9804      	ldr	r0, [sp, #16]
   21436:	9905      	ldr	r1, [sp, #20]
   21438:	2200      	movs	r2, #0
   2143a:	4bab      	ldr	r3, [pc, #684]	; (216e8 <_dtoa_r+0xd1c>)
   2143c:	f7fc fe6a 	bl	1e114 <__aeabi_dmul>
   21440:	003b      	movs	r3, r7
   21442:	0032      	movs	r2, r6
   21444:	f7fa ff4c 	bl	1c2e0 <__aeabi_dcmpge>
   21448:	2300      	movs	r3, #0
   2144a:	4699      	mov	r9, r3
   2144c:	4698      	mov	r8, r3
   2144e:	2800      	cmp	r0, #0
   21450:	d055      	beq.n	214fe <_dtoa_r+0xb32>
   21452:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   21454:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   21456:	43db      	mvns	r3, r3
   21458:	9303      	str	r3, [sp, #12]
   2145a:	4649      	mov	r1, r9
   2145c:	4650      	mov	r0, sl
   2145e:	f000 fdd1 	bl	22004 <_Bfree>
   21462:	4643      	mov	r3, r8
   21464:	2b00      	cmp	r3, #0
   21466:	d100      	bne.n	2146a <_dtoa_r+0xa9e>
   21468:	e4df      	b.n	20e2a <_dtoa_r+0x45e>
   2146a:	e7b6      	b.n	213da <_dtoa_r+0xa0e>
   2146c:	464a      	mov	r2, r9
   2146e:	4659      	mov	r1, fp
   21470:	4650      	mov	r0, sl
   21472:	f000 ff13 	bl	2229c <__pow5mult>
   21476:	4683      	mov	fp, r0
   21478:	e653      	b.n	21122 <_dtoa_r+0x756>
   2147a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2147c:	2a00      	cmp	r2, #0
   2147e:	d100      	bne.n	21482 <_dtoa_r+0xab6>
   21480:	e1b6      	b.n	217f0 <_dtoa_r+0xe24>
   21482:	4a9a      	ldr	r2, [pc, #616]	; (216ec <_dtoa_r+0xd20>)
   21484:	464c      	mov	r4, r9
   21486:	4694      	mov	ip, r2
   21488:	9a06      	ldr	r2, [sp, #24]
   2148a:	4463      	add	r3, ip
   2148c:	9208      	str	r2, [sp, #32]
   2148e:	e5d5      	b.n	2103c <_dtoa_r+0x670>
   21490:	2e00      	cmp	r6, #0
   21492:	d000      	beq.n	21496 <_dtoa_r+0xaca>
   21494:	e670      	b.n	21178 <_dtoa_r+0x7ac>
   21496:	e7aa      	b.n	213ee <_dtoa_r+0xa22>
   21498:	f000 fdbe 	bl	22018 <__multadd>
   2149c:	46a2      	mov	sl, r4
   2149e:	0005      	movs	r5, r0
   214a0:	4680      	mov	r8, r0
   214a2:	e6c7      	b.n	21234 <_dtoa_r+0x868>
   214a4:	2301      	movs	r3, #1
   214a6:	469b      	mov	fp, r3
   214a8:	e6e2      	b.n	21270 <_dtoa_r+0x8a4>
   214aa:	2300      	movs	r3, #0
   214ac:	930b      	str	r3, [sp, #44]	; 0x2c
   214ae:	9b22      	ldr	r3, [sp, #136]	; 0x88
   214b0:	2b02      	cmp	r3, #2
   214b2:	d0af      	beq.n	21414 <_dtoa_r+0xa48>
   214b4:	2400      	movs	r4, #0
   214b6:	4653      	mov	r3, sl
   214b8:	0021      	movs	r1, r4
   214ba:	645c      	str	r4, [r3, #68]	; 0x44
   214bc:	4650      	mov	r0, sl
   214be:	f000 fd79 	bl	21fb4 <_Balloc>
   214c2:	4653      	mov	r3, sl
   214c4:	6418      	str	r0, [r3, #64]	; 0x40
   214c6:	2301      	movs	r3, #1
   214c8:	425b      	negs	r3, r3
   214ca:	9307      	str	r3, [sp, #28]
   214cc:	930e      	str	r3, [sp, #56]	; 0x38
   214ce:	3302      	adds	r3, #2
   214d0:	900a      	str	r0, [sp, #40]	; 0x28
   214d2:	9423      	str	r4, [sp, #140]	; 0x8c
   214d4:	930b      	str	r3, [sp, #44]	; 0x2c
   214d6:	e4ec      	b.n	20eb2 <_dtoa_r+0x4e6>
   214d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   214da:	2b02      	cmp	r3, #2
   214dc:	dc00      	bgt.n	214e0 <_dtoa_r+0xb14>
   214de:	e685      	b.n	211ec <_dtoa_r+0x820>
   214e0:	9b07      	ldr	r3, [sp, #28]
   214e2:	2b00      	cmp	r3, #0
   214e4:	d1b5      	bne.n	21452 <_dtoa_r+0xa86>
   214e6:	4649      	mov	r1, r9
   214e8:	2205      	movs	r2, #5
   214ea:	4650      	mov	r0, sl
   214ec:	f000 fd94 	bl	22018 <__multadd>
   214f0:	4681      	mov	r9, r0
   214f2:	0001      	movs	r1, r0
   214f4:	4658      	mov	r0, fp
   214f6:	f000 ff91 	bl	2241c <__mcmp>
   214fa:	2800      	cmp	r0, #0
   214fc:	dda9      	ble.n	21452 <_dtoa_r+0xa86>
   214fe:	2331      	movs	r3, #49	; 0x31
   21500:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   21502:	7013      	strb	r3, [r2, #0]
   21504:	9b03      	ldr	r3, [sp, #12]
   21506:	1c54      	adds	r4, r2, #1
   21508:	3301      	adds	r3, #1
   2150a:	9303      	str	r3, [sp, #12]
   2150c:	e7a5      	b.n	2145a <_dtoa_r+0xa8e>
   2150e:	9b03      	ldr	r3, [sp, #12]
   21510:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   21512:	3301      	adds	r3, #1
   21514:	9303      	str	r3, [sp, #12]
   21516:	2331      	movs	r3, #49	; 0x31
   21518:	7013      	strb	r3, [r2, #0]
   2151a:	e74e      	b.n	213ba <_dtoa_r+0x9ee>
   2151c:	2300      	movs	r3, #0
   2151e:	930b      	str	r3, [sp, #44]	; 0x2c
   21520:	f7ff fb3d 	bl	20b9e <_dtoa_r+0x1d2>
   21524:	9b06      	ldr	r3, [sp, #24]
   21526:	465c      	mov	r4, fp
   21528:	469b      	mov	fp, r3
   2152a:	9b07      	ldr	r3, [sp, #28]
   2152c:	469a      	mov	sl, r3
   2152e:	e47c      	b.n	20e2a <_dtoa_r+0x45e>
   21530:	4640      	mov	r0, r8
   21532:	f7fd fbd9 	bl	1ece8 <__aeabi_i2d>
   21536:	0032      	movs	r2, r6
   21538:	003b      	movs	r3, r7
   2153a:	f7fc fdeb 	bl	1e114 <__aeabi_dmul>
   2153e:	2200      	movs	r2, #0
   21540:	4b6b      	ldr	r3, [pc, #428]	; (216f0 <_dtoa_r+0xd24>)
   21542:	f7fb fea3 	bl	1d28c <__aeabi_dadd>
   21546:	4a6b      	ldr	r2, [pc, #428]	; (216f4 <_dtoa_r+0xd28>)
   21548:	000b      	movs	r3, r1
   2154a:	4694      	mov	ip, r2
   2154c:	4463      	add	r3, ip
   2154e:	9008      	str	r0, [sp, #32]
   21550:	9109      	str	r1, [sp, #36]	; 0x24
   21552:	9309      	str	r3, [sp, #36]	; 0x24
   21554:	2200      	movs	r2, #0
   21556:	4b64      	ldr	r3, [pc, #400]	; (216e8 <_dtoa_r+0xd1c>)
   21558:	0030      	movs	r0, r6
   2155a:	0039      	movs	r1, r7
   2155c:	f7fd f85a 	bl	1e614 <__aeabi_dsub>
   21560:	9e08      	ldr	r6, [sp, #32]
   21562:	9f09      	ldr	r7, [sp, #36]	; 0x24
   21564:	0032      	movs	r2, r6
   21566:	003b      	movs	r3, r7
   21568:	0004      	movs	r4, r0
   2156a:	000d      	movs	r5, r1
   2156c:	f7fa feae 	bl	1c2cc <__aeabi_dcmpgt>
   21570:	2800      	cmp	r0, #0
   21572:	d000      	beq.n	21576 <_dtoa_r+0xbaa>
   21574:	e0b2      	b.n	216dc <_dtoa_r+0xd10>
   21576:	2080      	movs	r0, #128	; 0x80
   21578:	0600      	lsls	r0, r0, #24
   2157a:	4684      	mov	ip, r0
   2157c:	0039      	movs	r1, r7
   2157e:	4461      	add	r1, ip
   21580:	000b      	movs	r3, r1
   21582:	0032      	movs	r2, r6
   21584:	0020      	movs	r0, r4
   21586:	0029      	movs	r1, r5
   21588:	f7fa fe8c 	bl	1c2a4 <__aeabi_dcmplt>
   2158c:	2800      	cmp	r0, #0
   2158e:	d057      	beq.n	21640 <_dtoa_r+0xc74>
   21590:	2300      	movs	r3, #0
   21592:	4699      	mov	r9, r3
   21594:	4698      	mov	r8, r3
   21596:	e75c      	b.n	21452 <_dtoa_r+0xa86>
   21598:	980a      	ldr	r0, [sp, #40]	; 0x28
   2159a:	f7ff fa4c 	bl	20a36 <_dtoa_r+0x6a>
   2159e:	1ae2      	subs	r2, r4, r3
   215a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   215a2:	46a1      	mov	r9, r4
   215a4:	469c      	mov	ip, r3
   215a6:	4494      	add	ip, r2
   215a8:	4663      	mov	r3, ip
   215aa:	2400      	movs	r4, #0
   215ac:	930d      	str	r3, [sp, #52]	; 0x34
   215ae:	e53e      	b.n	2102e <_dtoa_r+0x662>
   215b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
   215b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   215b4:	9208      	str	r2, [sp, #32]
   215b6:	9309      	str	r3, [sp, #36]	; 0x24
   215b8:	2302      	movs	r3, #2
   215ba:	4698      	mov	r8, r3
   215bc:	f7ff fb3a 	bl	20c34 <_dtoa_r+0x268>
   215c0:	2300      	movs	r3, #0
   215c2:	4652      	mov	r2, sl
   215c4:	2100      	movs	r1, #0
   215c6:	6453      	str	r3, [r2, #68]	; 0x44
   215c8:	4650      	mov	r0, sl
   215ca:	f000 fcf3 	bl	21fb4 <_Balloc>
   215ce:	4653      	mov	r3, sl
   215d0:	6418      	str	r0, [r3, #64]	; 0x40
   215d2:	2301      	movs	r3, #1
   215d4:	900a      	str	r0, [sp, #40]	; 0x28
   215d6:	9307      	str	r3, [sp, #28]
   215d8:	9323      	str	r3, [sp, #140]	; 0x8c
   215da:	930e      	str	r3, [sp, #56]	; 0x38
   215dc:	f7ff fb07 	bl	20bee <_dtoa_r+0x222>
   215e0:	4643      	mov	r3, r8
   215e2:	930c      	str	r3, [sp, #48]	; 0x30
   215e4:	465b      	mov	r3, fp
   215e6:	9a06      	ldr	r2, [sp, #24]
   215e8:	46a8      	mov	r8, r5
   215ea:	46b3      	mov	fp, r6
   215ec:	4655      	mov	r5, sl
   215ee:	9e04      	ldr	r6, [sp, #16]
   215f0:	4691      	mov	r9, r2
   215f2:	46ba      	mov	sl, r7
   215f4:	2b00      	cmp	r3, #0
   215f6:	dd10      	ble.n	2161a <_dtoa_r+0xc4e>
   215f8:	4659      	mov	r1, fp
   215fa:	2201      	movs	r2, #1
   215fc:	0038      	movs	r0, r7
   215fe:	f000 fead 	bl	2235c <__lshift>
   21602:	4649      	mov	r1, r9
   21604:	4683      	mov	fp, r0
   21606:	f000 ff09 	bl	2241c <__mcmp>
   2160a:	2800      	cmp	r0, #0
   2160c:	dc00      	bgt.n	21610 <_dtoa_r+0xc44>
   2160e:	e157      	b.n	218c0 <_dtoa_r+0xef4>
   21610:	2e39      	cmp	r6, #57	; 0x39
   21612:	d100      	bne.n	21616 <_dtoa_r+0xc4a>
   21614:	e122      	b.n	2185c <_dtoa_r+0xe90>
   21616:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   21618:	3631      	adds	r6, #49	; 0x31
   2161a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2161c:	4647      	mov	r7, r8
   2161e:	1c6c      	adds	r4, r5, #1
   21620:	702e      	strb	r6, [r5, #0]
   21622:	4698      	mov	r8, r3
   21624:	e6c9      	b.n	213ba <_dtoa_r+0x9ee>
   21626:	2800      	cmp	r0, #0
   21628:	d103      	bne.n	21632 <_dtoa_r+0xc66>
   2162a:	07f3      	lsls	r3, r6, #31
   2162c:	d501      	bpl.n	21632 <_dtoa_r+0xc66>
   2162e:	e6b5      	b.n	2139c <_dtoa_r+0x9d0>
   21630:	001c      	movs	r4, r3
   21632:	1e63      	subs	r3, r4, #1
   21634:	781a      	ldrb	r2, [r3, #0]
   21636:	2a30      	cmp	r2, #48	; 0x30
   21638:	d0fa      	beq.n	21630 <_dtoa_r+0xc64>
   2163a:	e6be      	b.n	213ba <_dtoa_r+0x9ee>
   2163c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2163e:	4699      	mov	r9, r3
   21640:	9e10      	ldr	r6, [sp, #64]	; 0x40
   21642:	9f11      	ldr	r7, [sp, #68]	; 0x44
   21644:	e435      	b.n	20eb2 <_dtoa_r+0x4e6>
   21646:	2501      	movs	r5, #1
   21648:	f7ff fab4 	bl	20bb4 <_dtoa_r+0x1e8>
   2164c:	9b03      	ldr	r3, [sp, #12]
   2164e:	2b00      	cmp	r3, #0
   21650:	d100      	bne.n	21654 <_dtoa_r+0xc88>
   21652:	e0d4      	b.n	217fe <_dtoa_r+0xe32>
   21654:	9810      	ldr	r0, [sp, #64]	; 0x40
   21656:	9911      	ldr	r1, [sp, #68]	; 0x44
   21658:	425c      	negs	r4, r3
   2165a:	230f      	movs	r3, #15
   2165c:	4a26      	ldr	r2, [pc, #152]	; (216f8 <_dtoa_r+0xd2c>)
   2165e:	4023      	ands	r3, r4
   21660:	00db      	lsls	r3, r3, #3
   21662:	18d3      	adds	r3, r2, r3
   21664:	681a      	ldr	r2, [r3, #0]
   21666:	685b      	ldr	r3, [r3, #4]
   21668:	f7fc fd54 	bl	1e114 <__aeabi_dmul>
   2166c:	1124      	asrs	r4, r4, #4
   2166e:	0006      	movs	r6, r0
   21670:	000f      	movs	r7, r1
   21672:	2c00      	cmp	r4, #0
   21674:	d100      	bne.n	21678 <_dtoa_r+0xcac>
   21676:	e149      	b.n	2190c <_dtoa_r+0xf40>
   21678:	2302      	movs	r3, #2
   2167a:	4698      	mov	r8, r3
   2167c:	4d1f      	ldr	r5, [pc, #124]	; (216fc <_dtoa_r+0xd30>)
   2167e:	2301      	movs	r3, #1
   21680:	4223      	tst	r3, r4
   21682:	d009      	beq.n	21698 <_dtoa_r+0xccc>
   21684:	469c      	mov	ip, r3
   21686:	682a      	ldr	r2, [r5, #0]
   21688:	686b      	ldr	r3, [r5, #4]
   2168a:	0030      	movs	r0, r6
   2168c:	0039      	movs	r1, r7
   2168e:	44e0      	add	r8, ip
   21690:	f7fc fd40 	bl	1e114 <__aeabi_dmul>
   21694:	0006      	movs	r6, r0
   21696:	000f      	movs	r7, r1
   21698:	1064      	asrs	r4, r4, #1
   2169a:	3508      	adds	r5, #8
   2169c:	2c00      	cmp	r4, #0
   2169e:	d1ee      	bne.n	2167e <_dtoa_r+0xcb2>
   216a0:	f7ff fae4 	bl	20c6c <_dtoa_r+0x2a0>
   216a4:	9b03      	ldr	r3, [sp, #12]
   216a6:	2730      	movs	r7, #48	; 0x30
   216a8:	3301      	adds	r3, #1
   216aa:	9303      	str	r3, [sp, #12]
   216ac:	2330      	movs	r3, #48	; 0x30
   216ae:	702b      	strb	r3, [r5, #0]
   216b0:	e4ac      	b.n	2100c <_dtoa_r+0x640>
   216b2:	6859      	ldr	r1, [r3, #4]
   216b4:	4650      	mov	r0, sl
   216b6:	f000 fc7d 	bl	21fb4 <_Balloc>
   216ba:	4643      	mov	r3, r8
   216bc:	4641      	mov	r1, r8
   216be:	0004      	movs	r4, r0
   216c0:	691b      	ldr	r3, [r3, #16]
   216c2:	310c      	adds	r1, #12
   216c4:	1c9a      	adds	r2, r3, #2
   216c6:	0092      	lsls	r2, r2, #2
   216c8:	300c      	adds	r0, #12
   216ca:	f7fd fc8d 	bl	1efe8 <memcpy>
   216ce:	2201      	movs	r2, #1
   216d0:	0021      	movs	r1, r4
   216d2:	4650      	mov	r0, sl
   216d4:	f000 fe42 	bl	2235c <__lshift>
   216d8:	900c      	str	r0, [sp, #48]	; 0x30
   216da:	e599      	b.n	21210 <_dtoa_r+0x844>
   216dc:	2300      	movs	r3, #0
   216de:	4699      	mov	r9, r3
   216e0:	4698      	mov	r8, r3
   216e2:	e70c      	b.n	214fe <_dtoa_r+0xb32>
   216e4:	7ff00000 	.word	0x7ff00000
   216e8:	40140000 	.word	0x40140000
   216ec:	00000433 	.word	0x00000433
   216f0:	401c0000 	.word	0x401c0000
   216f4:	fcc00000 	.word	0xfcc00000
   216f8:	000253d8 	.word	0x000253d8
   216fc:	000253b0 	.word	0x000253b0
   21700:	9b12      	ldr	r3, [sp, #72]	; 0x48
   21702:	498f      	ldr	r1, [pc, #572]	; (21940 <_dtoa_r+0xf74>)
   21704:	3b01      	subs	r3, #1
   21706:	00db      	lsls	r3, r3, #3
   21708:	18c9      	adds	r1, r1, r3
   2170a:	6808      	ldr	r0, [r1, #0]
   2170c:	6849      	ldr	r1, [r1, #4]
   2170e:	9a08      	ldr	r2, [sp, #32]
   21710:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21712:	f7fc fcff 	bl	1e114 <__aeabi_dmul>
   21716:	9014      	str	r0, [sp, #80]	; 0x50
   21718:	9115      	str	r1, [sp, #84]	; 0x54
   2171a:	0039      	movs	r1, r7
   2171c:	0030      	movs	r0, r6
   2171e:	f7fd faaf 	bl	1ec80 <__aeabi_d2iz>
   21722:	0005      	movs	r5, r0
   21724:	f7fd fae0 	bl	1ece8 <__aeabi_i2d>
   21728:	0002      	movs	r2, r0
   2172a:	000b      	movs	r3, r1
   2172c:	0030      	movs	r0, r6
   2172e:	0039      	movs	r1, r7
   21730:	f7fc ff70 	bl	1e614 <__aeabi_dsub>
   21734:	9b12      	ldr	r3, [sp, #72]	; 0x48
   21736:	9008      	str	r0, [sp, #32]
   21738:	9109      	str	r1, [sp, #36]	; 0x24
   2173a:	990a      	ldr	r1, [sp, #40]	; 0x28
   2173c:	001a      	movs	r2, r3
   2173e:	468c      	mov	ip, r1
   21740:	3530      	adds	r5, #48	; 0x30
   21742:	4462      	add	r2, ip
   21744:	1c4c      	adds	r4, r1, #1
   21746:	700d      	strb	r5, [r1, #0]
   21748:	4690      	mov	r8, r2
   2174a:	2b01      	cmp	r3, #1
   2174c:	d01b      	beq.n	21786 <_dtoa_r+0xdba>
   2174e:	9808      	ldr	r0, [sp, #32]
   21750:	9909      	ldr	r1, [sp, #36]	; 0x24
   21752:	0025      	movs	r5, r4
   21754:	2200      	movs	r2, #0
   21756:	4b7b      	ldr	r3, [pc, #492]	; (21944 <_dtoa_r+0xf78>)
   21758:	f7fc fcdc 	bl	1e114 <__aeabi_dmul>
   2175c:	000f      	movs	r7, r1
   2175e:	0006      	movs	r6, r0
   21760:	f7fd fa8e 	bl	1ec80 <__aeabi_d2iz>
   21764:	0004      	movs	r4, r0
   21766:	f7fd fabf 	bl	1ece8 <__aeabi_i2d>
   2176a:	3430      	adds	r4, #48	; 0x30
   2176c:	0002      	movs	r2, r0
   2176e:	000b      	movs	r3, r1
   21770:	0030      	movs	r0, r6
   21772:	0039      	movs	r1, r7
   21774:	f7fc ff4e 	bl	1e614 <__aeabi_dsub>
   21778:	702c      	strb	r4, [r5, #0]
   2177a:	3501      	adds	r5, #1
   2177c:	45a8      	cmp	r8, r5
   2177e:	d1e9      	bne.n	21754 <_dtoa_r+0xd88>
   21780:	4644      	mov	r4, r8
   21782:	9008      	str	r0, [sp, #32]
   21784:	9109      	str	r1, [sp, #36]	; 0x24
   21786:	9814      	ldr	r0, [sp, #80]	; 0x50
   21788:	9915      	ldr	r1, [sp, #84]	; 0x54
   2178a:	2200      	movs	r2, #0
   2178c:	4b6e      	ldr	r3, [pc, #440]	; (21948 <_dtoa_r+0xf7c>)
   2178e:	f7fb fd7d 	bl	1d28c <__aeabi_dadd>
   21792:	9a08      	ldr	r2, [sp, #32]
   21794:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21796:	f7fa fd85 	bl	1c2a4 <__aeabi_dcmplt>
   2179a:	2800      	cmp	r0, #0
   2179c:	d067      	beq.n	2186e <_dtoa_r+0xea2>
   2179e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   217a0:	1e65      	subs	r5, r4, #1
   217a2:	9303      	str	r3, [sp, #12]
   217a4:	782f      	ldrb	r7, [r5, #0]
   217a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   217a8:	e42e      	b.n	21008 <_dtoa_r+0x63c>
   217aa:	4643      	mov	r3, r8
   217ac:	46b3      	mov	fp, r6
   217ae:	930c      	str	r3, [sp, #48]	; 0x30
   217b0:	9e04      	ldr	r6, [sp, #16]
   217b2:	9b06      	ldr	r3, [sp, #24]
   217b4:	46a8      	mov	r8, r5
   217b6:	4699      	mov	r9, r3
   217b8:	4655      	mov	r5, sl
   217ba:	46ba      	mov	sl, r7
   217bc:	2e39      	cmp	r6, #57	; 0x39
   217be:	d04d      	beq.n	2185c <_dtoa_r+0xe90>
   217c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   217c2:	3601      	adds	r6, #1
   217c4:	4647      	mov	r7, r8
   217c6:	1c6c      	adds	r4, r5, #1
   217c8:	702e      	strb	r6, [r5, #0]
   217ca:	4698      	mov	r8, r3
   217cc:	e5f5      	b.n	213ba <_dtoa_r+0x9ee>
   217ce:	4642      	mov	r2, r8
   217d0:	9b06      	ldr	r3, [sp, #24]
   217d2:	46b3      	mov	fp, r6
   217d4:	46ba      	mov	sl, r7
   217d6:	9e04      	ldr	r6, [sp, #16]
   217d8:	4699      	mov	r9, r3
   217da:	002f      	movs	r7, r5
   217dc:	4690      	mov	r8, r2
   217de:	e5d1      	b.n	21384 <_dtoa_r+0x9b8>
   217e0:	9b06      	ldr	r3, [sp, #24]
   217e2:	9a07      	ldr	r2, [sp, #28]
   217e4:	1a9b      	subs	r3, r3, r2
   217e6:	9308      	str	r3, [sp, #32]
   217e8:	2300      	movs	r3, #0
   217ea:	e427      	b.n	2103c <_dtoa_r+0x670>
   217ec:	2401      	movs	r4, #1
   217ee:	e5c5      	b.n	2137c <_dtoa_r+0x9b0>
   217f0:	2336      	movs	r3, #54	; 0x36
   217f2:	9a16      	ldr	r2, [sp, #88]	; 0x58
   217f4:	464c      	mov	r4, r9
   217f6:	1a9b      	subs	r3, r3, r2
   217f8:	9a06      	ldr	r2, [sp, #24]
   217fa:	9208      	str	r2, [sp, #32]
   217fc:	e41e      	b.n	2103c <_dtoa_r+0x670>
   217fe:	2302      	movs	r3, #2
   21800:	9e10      	ldr	r6, [sp, #64]	; 0x40
   21802:	9f11      	ldr	r7, [sp, #68]	; 0x44
   21804:	4698      	mov	r8, r3
   21806:	f7ff fa31 	bl	20c6c <_dtoa_r+0x2a0>
   2180a:	9b07      	ldr	r3, [sp, #28]
   2180c:	2b00      	cmp	r3, #0
   2180e:	d100      	bne.n	21812 <_dtoa_r+0xe46>
   21810:	e68e      	b.n	21530 <_dtoa_r+0xb64>
   21812:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   21814:	2c00      	cmp	r4, #0
   21816:	dc00      	bgt.n	2181a <_dtoa_r+0xe4e>
   21818:	e712      	b.n	21640 <_dtoa_r+0xc74>
   2181a:	9b03      	ldr	r3, [sp, #12]
   2181c:	2200      	movs	r2, #0
   2181e:	3b01      	subs	r3, #1
   21820:	9313      	str	r3, [sp, #76]	; 0x4c
   21822:	0030      	movs	r0, r6
   21824:	4b47      	ldr	r3, [pc, #284]	; (21944 <_dtoa_r+0xf78>)
   21826:	0039      	movs	r1, r7
   21828:	f7fc fc74 	bl	1e114 <__aeabi_dmul>
   2182c:	0006      	movs	r6, r0
   2182e:	4640      	mov	r0, r8
   21830:	000f      	movs	r7, r1
   21832:	3001      	adds	r0, #1
   21834:	f7fd fa58 	bl	1ece8 <__aeabi_i2d>
   21838:	0032      	movs	r2, r6
   2183a:	003b      	movs	r3, r7
   2183c:	f7fc fc6a 	bl	1e114 <__aeabi_dmul>
   21840:	2200      	movs	r2, #0
   21842:	4b42      	ldr	r3, [pc, #264]	; (2194c <_dtoa_r+0xf80>)
   21844:	f7fb fd22 	bl	1d28c <__aeabi_dadd>
   21848:	4a41      	ldr	r2, [pc, #260]	; (21950 <_dtoa_r+0xf84>)
   2184a:	000b      	movs	r3, r1
   2184c:	4694      	mov	ip, r2
   2184e:	4463      	add	r3, ip
   21850:	9008      	str	r0, [sp, #32]
   21852:	9109      	str	r1, [sp, #36]	; 0x24
   21854:	9412      	str	r4, [sp, #72]	; 0x48
   21856:	9309      	str	r3, [sp, #36]	; 0x24
   21858:	f7ff fa30 	bl	20cbc <_dtoa_r+0x2f0>
   2185c:	2339      	movs	r3, #57	; 0x39
   2185e:	702b      	strb	r3, [r5, #0]
   21860:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   21862:	4647      	mov	r7, r8
   21864:	1c6c      	adds	r4, r5, #1
   21866:	4698      	mov	r8, r3
   21868:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2186a:	2339      	movs	r3, #57	; 0x39
   2186c:	e5a1      	b.n	213b2 <_dtoa_r+0x9e6>
   2186e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   21870:	9b15      	ldr	r3, [sp, #84]	; 0x54
   21872:	2000      	movs	r0, #0
   21874:	4934      	ldr	r1, [pc, #208]	; (21948 <_dtoa_r+0xf7c>)
   21876:	f7fc fecd 	bl	1e614 <__aeabi_dsub>
   2187a:	9a08      	ldr	r2, [sp, #32]
   2187c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2187e:	f7fa fd25 	bl	1c2cc <__aeabi_dcmpgt>
   21882:	2800      	cmp	r0, #0
   21884:	d101      	bne.n	2188a <_dtoa_r+0xebe>
   21886:	e6db      	b.n	21640 <_dtoa_r+0xc74>
   21888:	001c      	movs	r4, r3
   2188a:	1e63      	subs	r3, r4, #1
   2188c:	781a      	ldrb	r2, [r3, #0]
   2188e:	2a30      	cmp	r2, #48	; 0x30
   21890:	d0fa      	beq.n	21888 <_dtoa_r+0xebc>
   21892:	f7ff fac8 	bl	20e26 <_dtoa_r+0x45a>
   21896:	4643      	mov	r3, r8
   21898:	46b3      	mov	fp, r6
   2189a:	930c      	str	r3, [sp, #48]	; 0x30
   2189c:	9e04      	ldr	r6, [sp, #16]
   2189e:	9b06      	ldr	r3, [sp, #24]
   218a0:	46a8      	mov	r8, r5
   218a2:	4699      	mov	r9, r3
   218a4:	4655      	mov	r5, sl
   218a6:	46ba      	mov	sl, r7
   218a8:	2e39      	cmp	r6, #57	; 0x39
   218aa:	d0d7      	beq.n	2185c <_dtoa_r+0xe90>
   218ac:	2c00      	cmp	r4, #0
   218ae:	dd00      	ble.n	218b2 <_dtoa_r+0xee6>
   218b0:	e6b1      	b.n	21616 <_dtoa_r+0xc4a>
   218b2:	e6b2      	b.n	2161a <_dtoa_r+0xc4e>
   218b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   218b6:	464d      	mov	r5, r9
   218b8:	9203      	str	r2, [sp, #12]
   218ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   218bc:	f7ff fba4 	bl	21008 <_dtoa_r+0x63c>
   218c0:	2800      	cmp	r0, #0
   218c2:	d000      	beq.n	218c6 <_dtoa_r+0xefa>
   218c4:	e6a9      	b.n	2161a <_dtoa_r+0xc4e>
   218c6:	07f3      	lsls	r3, r6, #31
   218c8:	d400      	bmi.n	218cc <_dtoa_r+0xf00>
   218ca:	e6a6      	b.n	2161a <_dtoa_r+0xc4e>
   218cc:	e6a0      	b.n	21610 <_dtoa_r+0xc44>
   218ce:	2300      	movs	r3, #0
   218d0:	4641      	mov	r1, r8
   218d2:	220a      	movs	r2, #10
   218d4:	4650      	mov	r0, sl
   218d6:	f000 fb9f 	bl	22018 <__multadd>
   218da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   218dc:	4680      	mov	r8, r0
   218de:	2b00      	cmp	r3, #0
   218e0:	dd01      	ble.n	218e6 <_dtoa_r+0xf1a>
   218e2:	9307      	str	r3, [sp, #28]
   218e4:	e486      	b.n	211f4 <_dtoa_r+0x828>
   218e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
   218e8:	2b02      	cmp	r3, #2
   218ea:	dc1f      	bgt.n	2192c <_dtoa_r+0xf60>
   218ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   218ee:	9307      	str	r3, [sp, #28]
   218f0:	e480      	b.n	211f4 <_dtoa_r+0x828>
   218f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   218f4:	2b02      	cmp	r3, #2
   218f6:	dc19      	bgt.n	2192c <_dtoa_r+0xf60>
   218f8:	4649      	mov	r1, r9
   218fa:	f7fe ffbd 	bl	20878 <quorem>
   218fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21900:	3030      	adds	r0, #48	; 0x30
   21902:	7018      	strb	r0, [r3, #0]
   21904:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21906:	0006      	movs	r6, r0
   21908:	9307      	str	r3, [sp, #28]
   2190a:	e533      	b.n	21374 <_dtoa_r+0x9a8>
   2190c:	2302      	movs	r3, #2
   2190e:	4698      	mov	r8, r3
   21910:	f7ff f9ac 	bl	20c6c <_dtoa_r+0x2a0>
   21914:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   21916:	9c14      	ldr	r4, [sp, #80]	; 0x50
   21918:	9303      	str	r3, [sp, #12]
   2191a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2191c:	001d      	movs	r5, r3
   2191e:	f7ff fb73 	bl	21008 <_dtoa_r+0x63c>
   21922:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   21924:	9c14      	ldr	r4, [sp, #80]	; 0x50
   21926:	9303      	str	r3, [sp, #12]
   21928:	f7ff fa7f 	bl	20e2a <_dtoa_r+0x45e>
   2192c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2192e:	9307      	str	r3, [sp, #28]
   21930:	e5d6      	b.n	214e0 <_dtoa_r+0xb14>
   21932:	2b04      	cmp	r3, #4
   21934:	d100      	bne.n	21938 <_dtoa_r+0xf6c>
   21936:	e43f      	b.n	211b8 <_dtoa_r+0x7ec>
   21938:	233c      	movs	r3, #60	; 0x3c
   2193a:	1a18      	subs	r0, r3, r0
   2193c:	e4d7      	b.n	212ee <_dtoa_r+0x922>
   2193e:	46c0      	nop			; (mov r8, r8)
   21940:	000253d8 	.word	0x000253d8
   21944:	40240000 	.word	0x40240000
   21948:	3fe00000 	.word	0x3fe00000
   2194c:	401c0000 	.word	0x401c0000
   21950:	fcc00000 	.word	0xfcc00000

00021954 <__libc_fini_array>:
   21954:	b570      	push	{r4, r5, r6, lr}
   21956:	4b09      	ldr	r3, [pc, #36]	; (2197c <__libc_fini_array+0x28>)
   21958:	4c09      	ldr	r4, [pc, #36]	; (21980 <__libc_fini_array+0x2c>)
   2195a:	1ae4      	subs	r4, r4, r3
   2195c:	10a4      	asrs	r4, r4, #2
   2195e:	d009      	beq.n	21974 <__libc_fini_array+0x20>
   21960:	4a08      	ldr	r2, [pc, #32]	; (21984 <__libc_fini_array+0x30>)
   21962:	18a5      	adds	r5, r4, r2
   21964:	00ad      	lsls	r5, r5, #2
   21966:	18ed      	adds	r5, r5, r3
   21968:	682b      	ldr	r3, [r5, #0]
   2196a:	3c01      	subs	r4, #1
   2196c:	4798      	blx	r3
   2196e:	3d04      	subs	r5, #4
   21970:	2c00      	cmp	r4, #0
   21972:	d1f9      	bne.n	21968 <__libc_fini_array+0x14>
   21974:	f003 fe2c 	bl	255d0 <_fini>
   21978:	bd70      	pop	{r4, r5, r6, pc}
   2197a:	46c0      	nop			; (mov r8, r8)
   2197c:	000255dc 	.word	0x000255dc
   21980:	000255e0 	.word	0x000255e0
   21984:	3fffffff 	.word	0x3fffffff

00021988 <_localeconv_r>:
   21988:	4b04      	ldr	r3, [pc, #16]	; (2199c <_localeconv_r+0x14>)
   2198a:	681b      	ldr	r3, [r3, #0]
   2198c:	6b58      	ldr	r0, [r3, #52]	; 0x34
   2198e:	2800      	cmp	r0, #0
   21990:	d001      	beq.n	21996 <_localeconv_r+0xe>
   21992:	30f0      	adds	r0, #240	; 0xf0
   21994:	4770      	bx	lr
   21996:	4802      	ldr	r0, [pc, #8]	; (219a0 <_localeconv_r+0x18>)
   21998:	e7fb      	b.n	21992 <_localeconv_r+0xa>
   2199a:	46c0      	nop			; (mov r8, r8)
   2199c:	2000038c 	.word	0x2000038c
   219a0:	20000bcc 	.word	0x20000bcc

000219a4 <__retarget_lock_acquire_recursive>:
   219a4:	4770      	bx	lr
   219a6:	46c0      	nop			; (mov r8, r8)

000219a8 <__retarget_lock_release_recursive>:
   219a8:	4770      	bx	lr
   219aa:	46c0      	nop			; (mov r8, r8)

000219ac <_malloc_r>:
   219ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   219ae:	4657      	mov	r7, sl
   219b0:	4645      	mov	r5, r8
   219b2:	46de      	mov	lr, fp
   219b4:	464e      	mov	r6, r9
   219b6:	b5e0      	push	{r5, r6, r7, lr}
   219b8:	000d      	movs	r5, r1
   219ba:	350b      	adds	r5, #11
   219bc:	b083      	sub	sp, #12
   219be:	0007      	movs	r7, r0
   219c0:	2d16      	cmp	r5, #22
   219c2:	d800      	bhi.n	219c6 <_malloc_r+0x1a>
   219c4:	e09f      	b.n	21b06 <_malloc_r+0x15a>
   219c6:	2307      	movs	r3, #7
   219c8:	439d      	bics	r5, r3
   219ca:	d500      	bpl.n	219ce <_malloc_r+0x22>
   219cc:	e0c4      	b.n	21b58 <_malloc_r+0x1ac>
   219ce:	42a9      	cmp	r1, r5
   219d0:	d900      	bls.n	219d4 <_malloc_r+0x28>
   219d2:	e0c1      	b.n	21b58 <_malloc_r+0x1ac>
   219d4:	f000 fade 	bl	21f94 <__malloc_lock>
   219d8:	23f8      	movs	r3, #248	; 0xf8
   219da:	33ff      	adds	r3, #255	; 0xff
   219dc:	429d      	cmp	r5, r3
   219de:	d800      	bhi.n	219e2 <_malloc_r+0x36>
   219e0:	e28f      	b.n	21f02 <_malloc_r+0x556>
   219e2:	0a68      	lsrs	r0, r5, #9
   219e4:	d100      	bne.n	219e8 <_malloc_r+0x3c>
   219e6:	e0bb      	b.n	21b60 <_malloc_r+0x1b4>
   219e8:	2804      	cmp	r0, #4
   219ea:	d900      	bls.n	219ee <_malloc_r+0x42>
   219ec:	e162      	b.n	21cb4 <_malloc_r+0x308>
   219ee:	2338      	movs	r3, #56	; 0x38
   219f0:	4698      	mov	r8, r3
   219f2:	09a8      	lsrs	r0, r5, #6
   219f4:	4480      	add	r8, r0
   219f6:	3039      	adds	r0, #57	; 0x39
   219f8:	00c1      	lsls	r1, r0, #3
   219fa:	4ed2      	ldr	r6, [pc, #840]	; (21d44 <_malloc_r+0x398>)
   219fc:	1871      	adds	r1, r6, r1
   219fe:	3908      	subs	r1, #8
   21a00:	68cc      	ldr	r4, [r1, #12]
   21a02:	42a1      	cmp	r1, r4
   21a04:	d019      	beq.n	21a3a <_malloc_r+0x8e>
   21a06:	2303      	movs	r3, #3
   21a08:	6862      	ldr	r2, [r4, #4]
   21a0a:	439a      	bics	r2, r3
   21a0c:	0013      	movs	r3, r2
   21a0e:	1b52      	subs	r2, r2, r5
   21a10:	2a0f      	cmp	r2, #15
   21a12:	dd00      	ble.n	21a16 <_malloc_r+0x6a>
   21a14:	e0aa      	b.n	21b6c <_malloc_r+0x1c0>
   21a16:	2a00      	cmp	r2, #0
   21a18:	db00      	blt.n	21a1c <_malloc_r+0x70>
   21a1a:	e088      	b.n	21b2e <_malloc_r+0x182>
   21a1c:	2303      	movs	r3, #3
   21a1e:	469c      	mov	ip, r3
   21a20:	e008      	b.n	21a34 <_malloc_r+0x88>
   21a22:	4662      	mov	r2, ip
   21a24:	6863      	ldr	r3, [r4, #4]
   21a26:	4393      	bics	r3, r2
   21a28:	1b5a      	subs	r2, r3, r5
   21a2a:	2a0f      	cmp	r2, #15
   21a2c:	dd00      	ble.n	21a30 <_malloc_r+0x84>
   21a2e:	e09d      	b.n	21b6c <_malloc_r+0x1c0>
   21a30:	2a00      	cmp	r2, #0
   21a32:	da7c      	bge.n	21b2e <_malloc_r+0x182>
   21a34:	68e4      	ldr	r4, [r4, #12]
   21a36:	42a1      	cmp	r1, r4
   21a38:	d1f3      	bne.n	21a22 <_malloc_r+0x76>
   21a3a:	0032      	movs	r2, r6
   21a3c:	6934      	ldr	r4, [r6, #16]
   21a3e:	3208      	adds	r2, #8
   21a40:	4294      	cmp	r4, r2
   21a42:	d100      	bne.n	21a46 <_malloc_r+0x9a>
   21a44:	e190      	b.n	21d68 <_malloc_r+0x3bc>
   21a46:	2303      	movs	r3, #3
   21a48:	6861      	ldr	r1, [r4, #4]
   21a4a:	4399      	bics	r1, r3
   21a4c:	4689      	mov	r9, r1
   21a4e:	1b49      	subs	r1, r1, r5
   21a50:	290f      	cmp	r1, #15
   21a52:	dd00      	ble.n	21a56 <_malloc_r+0xaa>
   21a54:	e162      	b.n	21d1c <_malloc_r+0x370>
   21a56:	6172      	str	r2, [r6, #20]
   21a58:	6132      	str	r2, [r6, #16]
   21a5a:	2900      	cmp	r1, #0
   21a5c:	db00      	blt.n	21a60 <_malloc_r+0xb4>
   21a5e:	e087      	b.n	21b70 <_malloc_r+0x1c4>
   21a60:	4ab9      	ldr	r2, [pc, #740]	; (21d48 <_malloc_r+0x39c>)
   21a62:	464b      	mov	r3, r9
   21a64:	4591      	cmp	r9, r2
   21a66:	d900      	bls.n	21a6a <_malloc_r+0xbe>
   21a68:	e130      	b.n	21ccc <_malloc_r+0x320>
   21a6a:	08db      	lsrs	r3, r3, #3
   21a6c:	3aff      	subs	r2, #255	; 0xff
   21a6e:	1099      	asrs	r1, r3, #2
   21a70:	3aff      	subs	r2, #255	; 0xff
   21a72:	408a      	lsls	r2, r1
   21a74:	00db      	lsls	r3, r3, #3
   21a76:	6871      	ldr	r1, [r6, #4]
   21a78:	199b      	adds	r3, r3, r6
   21a7a:	430a      	orrs	r2, r1
   21a7c:	6899      	ldr	r1, [r3, #8]
   21a7e:	6072      	str	r2, [r6, #4]
   21a80:	60e3      	str	r3, [r4, #12]
   21a82:	60a1      	str	r1, [r4, #8]
   21a84:	609c      	str	r4, [r3, #8]
   21a86:	0013      	movs	r3, r2
   21a88:	60cc      	str	r4, [r1, #12]
   21a8a:	2101      	movs	r1, #1
   21a8c:	1082      	asrs	r2, r0, #2
   21a8e:	4091      	lsls	r1, r2
   21a90:	4299      	cmp	r1, r3
   21a92:	d86f      	bhi.n	21b74 <_malloc_r+0x1c8>
   21a94:	420b      	tst	r3, r1
   21a96:	d105      	bne.n	21aa4 <_malloc_r+0xf8>
   21a98:	2203      	movs	r2, #3
   21a9a:	4390      	bics	r0, r2
   21a9c:	0049      	lsls	r1, r1, #1
   21a9e:	3004      	adds	r0, #4
   21aa0:	420b      	tst	r3, r1
   21aa2:	d0fb      	beq.n	21a9c <_malloc_r+0xf0>
   21aa4:	2303      	movs	r3, #3
   21aa6:	4698      	mov	r8, r3
   21aa8:	00c3      	lsls	r3, r0, #3
   21aaa:	4699      	mov	r9, r3
   21aac:	44b1      	add	r9, r6
   21aae:	46cc      	mov	ip, r9
   21ab0:	4682      	mov	sl, r0
   21ab2:	4663      	mov	r3, ip
   21ab4:	68dc      	ldr	r4, [r3, #12]
   21ab6:	45a4      	cmp	ip, r4
   21ab8:	d107      	bne.n	21aca <_malloc_r+0x11e>
   21aba:	e157      	b.n	21d6c <_malloc_r+0x3c0>
   21abc:	2a00      	cmp	r2, #0
   21abe:	db00      	blt.n	21ac2 <_malloc_r+0x116>
   21ac0:	e166      	b.n	21d90 <_malloc_r+0x3e4>
   21ac2:	68e4      	ldr	r4, [r4, #12]
   21ac4:	45a4      	cmp	ip, r4
   21ac6:	d100      	bne.n	21aca <_malloc_r+0x11e>
   21ac8:	e150      	b.n	21d6c <_malloc_r+0x3c0>
   21aca:	4642      	mov	r2, r8
   21acc:	6863      	ldr	r3, [r4, #4]
   21ace:	4393      	bics	r3, r2
   21ad0:	1b5a      	subs	r2, r3, r5
   21ad2:	2a0f      	cmp	r2, #15
   21ad4:	ddf2      	ble.n	21abc <_malloc_r+0x110>
   21ad6:	2001      	movs	r0, #1
   21ad8:	4680      	mov	r8, r0
   21ada:	1961      	adds	r1, r4, r5
   21adc:	4305      	orrs	r5, r0
   21ade:	6065      	str	r5, [r4, #4]
   21ae0:	68a0      	ldr	r0, [r4, #8]
   21ae2:	68e5      	ldr	r5, [r4, #12]
   21ae4:	3608      	adds	r6, #8
   21ae6:	60c5      	str	r5, [r0, #12]
   21ae8:	60a8      	str	r0, [r5, #8]
   21aea:	4640      	mov	r0, r8
   21aec:	60f1      	str	r1, [r6, #12]
   21aee:	60b1      	str	r1, [r6, #8]
   21af0:	4310      	orrs	r0, r2
   21af2:	6048      	str	r0, [r1, #4]
   21af4:	60ce      	str	r6, [r1, #12]
   21af6:	608e      	str	r6, [r1, #8]
   21af8:	0038      	movs	r0, r7
   21afa:	50e2      	str	r2, [r4, r3]
   21afc:	f000 fa52 	bl	21fa4 <__malloc_unlock>
   21b00:	0020      	movs	r0, r4
   21b02:	3008      	adds	r0, #8
   21b04:	e021      	b.n	21b4a <_malloc_r+0x19e>
   21b06:	2910      	cmp	r1, #16
   21b08:	d826      	bhi.n	21b58 <_malloc_r+0x1ac>
   21b0a:	0038      	movs	r0, r7
   21b0c:	f000 fa42 	bl	21f94 <__malloc_lock>
   21b10:	2510      	movs	r5, #16
   21b12:	2318      	movs	r3, #24
   21b14:	2002      	movs	r0, #2
   21b16:	4e8b      	ldr	r6, [pc, #556]	; (21d44 <_malloc_r+0x398>)
   21b18:	18f3      	adds	r3, r6, r3
   21b1a:	001a      	movs	r2, r3
   21b1c:	685c      	ldr	r4, [r3, #4]
   21b1e:	3a08      	subs	r2, #8
   21b20:	4294      	cmp	r4, r2
   21b22:	d100      	bne.n	21b26 <_malloc_r+0x17a>
   21b24:	e12e      	b.n	21d84 <_malloc_r+0x3d8>
   21b26:	2303      	movs	r3, #3
   21b28:	6862      	ldr	r2, [r4, #4]
   21b2a:	439a      	bics	r2, r3
   21b2c:	0013      	movs	r3, r2
   21b2e:	68e2      	ldr	r2, [r4, #12]
   21b30:	68a1      	ldr	r1, [r4, #8]
   21b32:	60ca      	str	r2, [r1, #12]
   21b34:	6091      	str	r1, [r2, #8]
   21b36:	2201      	movs	r2, #1
   21b38:	18e3      	adds	r3, r4, r3
   21b3a:	6859      	ldr	r1, [r3, #4]
   21b3c:	0038      	movs	r0, r7
   21b3e:	430a      	orrs	r2, r1
   21b40:	605a      	str	r2, [r3, #4]
   21b42:	f000 fa2f 	bl	21fa4 <__malloc_unlock>
   21b46:	0020      	movs	r0, r4
   21b48:	3008      	adds	r0, #8
   21b4a:	b003      	add	sp, #12
   21b4c:	bc3c      	pop	{r2, r3, r4, r5}
   21b4e:	4690      	mov	r8, r2
   21b50:	4699      	mov	r9, r3
   21b52:	46a2      	mov	sl, r4
   21b54:	46ab      	mov	fp, r5
   21b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21b58:	230c      	movs	r3, #12
   21b5a:	2000      	movs	r0, #0
   21b5c:	603b      	str	r3, [r7, #0]
   21b5e:	e7f4      	b.n	21b4a <_malloc_r+0x19e>
   21b60:	2180      	movs	r1, #128	; 0x80
   21b62:	233f      	movs	r3, #63	; 0x3f
   21b64:	2040      	movs	r0, #64	; 0x40
   21b66:	0089      	lsls	r1, r1, #2
   21b68:	4698      	mov	r8, r3
   21b6a:	e746      	b.n	219fa <_malloc_r+0x4e>
   21b6c:	4640      	mov	r0, r8
   21b6e:	e764      	b.n	21a3a <_malloc_r+0x8e>
   21b70:	464b      	mov	r3, r9
   21b72:	e7e0      	b.n	21b36 <_malloc_r+0x18a>
   21b74:	2303      	movs	r3, #3
   21b76:	68b4      	ldr	r4, [r6, #8]
   21b78:	6862      	ldr	r2, [r4, #4]
   21b7a:	439a      	bics	r2, r3
   21b7c:	4690      	mov	r8, r2
   21b7e:	42aa      	cmp	r2, r5
   21b80:	d303      	bcc.n	21b8a <_malloc_r+0x1de>
   21b82:	1b53      	subs	r3, r2, r5
   21b84:	2b0f      	cmp	r3, #15
   21b86:	dd00      	ble.n	21b8a <_malloc_r+0x1de>
   21b88:	e086      	b.n	21c98 <_malloc_r+0x2ec>
   21b8a:	0023      	movs	r3, r4
   21b8c:	4443      	add	r3, r8
   21b8e:	4a6f      	ldr	r2, [pc, #444]	; (21d4c <_malloc_r+0x3a0>)
   21b90:	9301      	str	r3, [sp, #4]
   21b92:	4b6f      	ldr	r3, [pc, #444]	; (21d50 <_malloc_r+0x3a4>)
   21b94:	4693      	mov	fp, r2
   21b96:	681b      	ldr	r3, [r3, #0]
   21b98:	6812      	ldr	r2, [r2, #0]
   21b9a:	18eb      	adds	r3, r5, r3
   21b9c:	3201      	adds	r2, #1
   21b9e:	d100      	bne.n	21ba2 <_malloc_r+0x1f6>
   21ba0:	e168      	b.n	21e74 <_malloc_r+0x4c8>
   21ba2:	4a6c      	ldr	r2, [pc, #432]	; (21d54 <_malloc_r+0x3a8>)
   21ba4:	4694      	mov	ip, r2
   21ba6:	4463      	add	r3, ip
   21ba8:	0b1b      	lsrs	r3, r3, #12
   21baa:	031b      	lsls	r3, r3, #12
   21bac:	9300      	str	r3, [sp, #0]
   21bae:	9900      	ldr	r1, [sp, #0]
   21bb0:	0038      	movs	r0, r7
   21bb2:	f000 fd47 	bl	22644 <_sbrk_r>
   21bb6:	0003      	movs	r3, r0
   21bb8:	4681      	mov	r9, r0
   21bba:	3301      	adds	r3, #1
   21bbc:	d061      	beq.n	21c82 <_malloc_r+0x2d6>
   21bbe:	9b01      	ldr	r3, [sp, #4]
   21bc0:	4283      	cmp	r3, r0
   21bc2:	d900      	bls.n	21bc6 <_malloc_r+0x21a>
   21bc4:	e0ff      	b.n	21dc6 <_malloc_r+0x41a>
   21bc6:	4b64      	ldr	r3, [pc, #400]	; (21d58 <_malloc_r+0x3ac>)
   21bc8:	9a00      	ldr	r2, [sp, #0]
   21bca:	469a      	mov	sl, r3
   21bcc:	681b      	ldr	r3, [r3, #0]
   21bce:	469c      	mov	ip, r3
   21bd0:	4653      	mov	r3, sl
   21bd2:	4462      	add	r2, ip
   21bd4:	601a      	str	r2, [r3, #0]
   21bd6:	9b01      	ldr	r3, [sp, #4]
   21bd8:	0011      	movs	r1, r2
   21bda:	4283      	cmp	r3, r0
   21bdc:	d100      	bne.n	21be0 <_malloc_r+0x234>
   21bde:	e155      	b.n	21e8c <_malloc_r+0x4e0>
   21be0:	465b      	mov	r3, fp
   21be2:	681b      	ldr	r3, [r3, #0]
   21be4:	3301      	adds	r3, #1
   21be6:	d100      	bne.n	21bea <_malloc_r+0x23e>
   21be8:	e16c      	b.n	21ec4 <_malloc_r+0x518>
   21bea:	464b      	mov	r3, r9
   21bec:	9a01      	ldr	r2, [sp, #4]
   21bee:	1a9b      	subs	r3, r3, r2
   21bf0:	1859      	adds	r1, r3, r1
   21bf2:	4653      	mov	r3, sl
   21bf4:	6019      	str	r1, [r3, #0]
   21bf6:	2307      	movs	r3, #7
   21bf8:	464a      	mov	r2, r9
   21bfa:	4013      	ands	r3, r2
   21bfc:	d100      	bne.n	21c00 <_malloc_r+0x254>
   21bfe:	e124      	b.n	21e4a <_malloc_r+0x49e>
   21c00:	2108      	movs	r1, #8
   21c02:	4689      	mov	r9, r1
   21c04:	4955      	ldr	r1, [pc, #340]	; (21d5c <_malloc_r+0x3b0>)
   21c06:	1ad2      	subs	r2, r2, r3
   21c08:	4491      	add	r9, r2
   21c0a:	1acb      	subs	r3, r1, r3
   21c0c:	9a00      	ldr	r2, [sp, #0]
   21c0e:	0038      	movs	r0, r7
   21c10:	444a      	add	r2, r9
   21c12:	0511      	lsls	r1, r2, #20
   21c14:	0d09      	lsrs	r1, r1, #20
   21c16:	1a5b      	subs	r3, r3, r1
   21c18:	0019      	movs	r1, r3
   21c1a:	469b      	mov	fp, r3
   21c1c:	f000 fd12 	bl	22644 <_sbrk_r>
   21c20:	1c43      	adds	r3, r0, #1
   21c22:	d100      	bne.n	21c26 <_malloc_r+0x27a>
   21c24:	e142      	b.n	21eac <_malloc_r+0x500>
   21c26:	464b      	mov	r3, r9
   21c28:	1ac0      	subs	r0, r0, r3
   21c2a:	2301      	movs	r3, #1
   21c2c:	4458      	add	r0, fp
   21c2e:	4318      	orrs	r0, r3
   21c30:	4653      	mov	r3, sl
   21c32:	681b      	ldr	r3, [r3, #0]
   21c34:	445b      	add	r3, fp
   21c36:	0019      	movs	r1, r3
   21c38:	4653      	mov	r3, sl
   21c3a:	6019      	str	r1, [r3, #0]
   21c3c:	464b      	mov	r3, r9
   21c3e:	60b3      	str	r3, [r6, #8]
   21c40:	6058      	str	r0, [r3, #4]
   21c42:	42b4      	cmp	r4, r6
   21c44:	d013      	beq.n	21c6e <_malloc_r+0x2c2>
   21c46:	4643      	mov	r3, r8
   21c48:	2b0f      	cmp	r3, #15
   21c4a:	d800      	bhi.n	21c4e <_malloc_r+0x2a2>
   21c4c:	e0e8      	b.n	21e20 <_malloc_r+0x474>
   21c4e:	4643      	mov	r3, r8
   21c50:	2207      	movs	r2, #7
   21c52:	6860      	ldr	r0, [r4, #4]
   21c54:	3b0c      	subs	r3, #12
   21c56:	4393      	bics	r3, r2
   21c58:	3a06      	subs	r2, #6
   21c5a:	4002      	ands	r2, r0
   21c5c:	2005      	movs	r0, #5
   21c5e:	431a      	orrs	r2, r3
   21c60:	6062      	str	r2, [r4, #4]
   21c62:	18e2      	adds	r2, r4, r3
   21c64:	6050      	str	r0, [r2, #4]
   21c66:	6090      	str	r0, [r2, #8]
   21c68:	2b0f      	cmp	r3, #15
   21c6a:	d900      	bls.n	21c6e <_malloc_r+0x2c2>
   21c6c:	e122      	b.n	21eb4 <_malloc_r+0x508>
   21c6e:	4b3c      	ldr	r3, [pc, #240]	; (21d60 <_malloc_r+0x3b4>)
   21c70:	681a      	ldr	r2, [r3, #0]
   21c72:	4291      	cmp	r1, r2
   21c74:	d900      	bls.n	21c78 <_malloc_r+0x2cc>
   21c76:	6019      	str	r1, [r3, #0]
   21c78:	4b3a      	ldr	r3, [pc, #232]	; (21d64 <_malloc_r+0x3b8>)
   21c7a:	681a      	ldr	r2, [r3, #0]
   21c7c:	4291      	cmp	r1, r2
   21c7e:	d900      	bls.n	21c82 <_malloc_r+0x2d6>
   21c80:	6019      	str	r1, [r3, #0]
   21c82:	2303      	movs	r3, #3
   21c84:	68b4      	ldr	r4, [r6, #8]
   21c86:	6862      	ldr	r2, [r4, #4]
   21c88:	439a      	bics	r2, r3
   21c8a:	1b53      	subs	r3, r2, r5
   21c8c:	4295      	cmp	r5, r2
   21c8e:	d900      	bls.n	21c92 <_malloc_r+0x2e6>
   21c90:	e0c9      	b.n	21e26 <_malloc_r+0x47a>
   21c92:	2b0f      	cmp	r3, #15
   21c94:	dc00      	bgt.n	21c98 <_malloc_r+0x2ec>
   21c96:	e0c6      	b.n	21e26 <_malloc_r+0x47a>
   21c98:	2201      	movs	r2, #1
   21c9a:	0029      	movs	r1, r5
   21c9c:	4313      	orrs	r3, r2
   21c9e:	4311      	orrs	r1, r2
   21ca0:	1965      	adds	r5, r4, r5
   21ca2:	6061      	str	r1, [r4, #4]
   21ca4:	0038      	movs	r0, r7
   21ca6:	60b5      	str	r5, [r6, #8]
   21ca8:	606b      	str	r3, [r5, #4]
   21caa:	f000 f97b 	bl	21fa4 <__malloc_unlock>
   21cae:	0020      	movs	r0, r4
   21cb0:	3008      	adds	r0, #8
   21cb2:	e74a      	b.n	21b4a <_malloc_r+0x19e>
   21cb4:	2814      	cmp	r0, #20
   21cb6:	d97a      	bls.n	21dae <_malloc_r+0x402>
   21cb8:	2854      	cmp	r0, #84	; 0x54
   21cba:	d900      	bls.n	21cbe <_malloc_r+0x312>
   21cbc:	e0ba      	b.n	21e34 <_malloc_r+0x488>
   21cbe:	236e      	movs	r3, #110	; 0x6e
   21cc0:	4698      	mov	r8, r3
   21cc2:	0b28      	lsrs	r0, r5, #12
   21cc4:	4480      	add	r8, r0
   21cc6:	306f      	adds	r0, #111	; 0x6f
   21cc8:	00c1      	lsls	r1, r0, #3
   21cca:	e696      	b.n	219fa <_malloc_r+0x4e>
   21ccc:	0a5a      	lsrs	r2, r3, #9
   21cce:	2a04      	cmp	r2, #4
   21cd0:	d973      	bls.n	21dba <_malloc_r+0x40e>
   21cd2:	2a14      	cmp	r2, #20
   21cd4:	d900      	bls.n	21cd8 <_malloc_r+0x32c>
   21cd6:	e0d0      	b.n	21e7a <_malloc_r+0x4ce>
   21cd8:	0011      	movs	r1, r2
   21cda:	325c      	adds	r2, #92	; 0x5c
   21cdc:	315b      	adds	r1, #91	; 0x5b
   21cde:	00d2      	lsls	r2, r2, #3
   21ce0:	2308      	movs	r3, #8
   21ce2:	425b      	negs	r3, r3
   21ce4:	469c      	mov	ip, r3
   21ce6:	18b2      	adds	r2, r6, r2
   21ce8:	4494      	add	ip, r2
   21cea:	4663      	mov	r3, ip
   21cec:	689a      	ldr	r2, [r3, #8]
   21cee:	2303      	movs	r3, #3
   21cf0:	4698      	mov	r8, r3
   21cf2:	4594      	cmp	ip, r2
   21cf4:	d100      	bne.n	21cf8 <_malloc_r+0x34c>
   21cf6:	e0ab      	b.n	21e50 <_malloc_r+0x4a4>
   21cf8:	4643      	mov	r3, r8
   21cfa:	6851      	ldr	r1, [r2, #4]
   21cfc:	4399      	bics	r1, r3
   21cfe:	4589      	cmp	r9, r1
   21d00:	d300      	bcc.n	21d04 <_malloc_r+0x358>
   21d02:	e095      	b.n	21e30 <_malloc_r+0x484>
   21d04:	6892      	ldr	r2, [r2, #8]
   21d06:	4594      	cmp	ip, r2
   21d08:	d1f6      	bne.n	21cf8 <_malloc_r+0x34c>
   21d0a:	4663      	mov	r3, ip
   21d0c:	68da      	ldr	r2, [r3, #12]
   21d0e:	6873      	ldr	r3, [r6, #4]
   21d10:	4661      	mov	r1, ip
   21d12:	60e2      	str	r2, [r4, #12]
   21d14:	60a1      	str	r1, [r4, #8]
   21d16:	6094      	str	r4, [r2, #8]
   21d18:	60cc      	str	r4, [r1, #12]
   21d1a:	e6b6      	b.n	21a8a <_malloc_r+0xde>
   21d1c:	2301      	movs	r3, #1
   21d1e:	1960      	adds	r0, r4, r5
   21d20:	431d      	orrs	r5, r3
   21d22:	6065      	str	r5, [r4, #4]
   21d24:	6170      	str	r0, [r6, #20]
   21d26:	6130      	str	r0, [r6, #16]
   21d28:	60c2      	str	r2, [r0, #12]
   21d2a:	6082      	str	r2, [r0, #8]
   21d2c:	001a      	movs	r2, r3
   21d2e:	464b      	mov	r3, r9
   21d30:	430a      	orrs	r2, r1
   21d32:	6042      	str	r2, [r0, #4]
   21d34:	0038      	movs	r0, r7
   21d36:	50e1      	str	r1, [r4, r3]
   21d38:	f000 f934 	bl	21fa4 <__malloc_unlock>
   21d3c:	0020      	movs	r0, r4
   21d3e:	3008      	adds	r0, #8
   21d40:	e703      	b.n	21b4a <_malloc_r+0x19e>
   21d42:	46c0      	nop			; (mov r8, r8)
   21d44:	200007bc 	.word	0x200007bc
   21d48:	000001ff 	.word	0x000001ff
   21d4c:	20000bc4 	.word	0x20000bc4
   21d50:	20000ff4 	.word	0x20000ff4
   21d54:	0000100f 	.word	0x0000100f
   21d58:	20000fc4 	.word	0x20000fc4
   21d5c:	00001008 	.word	0x00001008
   21d60:	20000fec 	.word	0x20000fec
   21d64:	20000ff0 	.word	0x20000ff0
   21d68:	6873      	ldr	r3, [r6, #4]
   21d6a:	e68e      	b.n	21a8a <_malloc_r+0xde>
   21d6c:	2308      	movs	r3, #8
   21d6e:	469b      	mov	fp, r3
   21d70:	3b07      	subs	r3, #7
   21d72:	44dc      	add	ip, fp
   21d74:	469b      	mov	fp, r3
   21d76:	44da      	add	sl, fp
   21d78:	4643      	mov	r3, r8
   21d7a:	4652      	mov	r2, sl
   21d7c:	4213      	tst	r3, r2
   21d7e:	d000      	beq.n	21d82 <_malloc_r+0x3d6>
   21d80:	e697      	b.n	21ab2 <_malloc_r+0x106>
   21d82:	e037      	b.n	21df4 <_malloc_r+0x448>
   21d84:	68dc      	ldr	r4, [r3, #12]
   21d86:	3002      	adds	r0, #2
   21d88:	42a3      	cmp	r3, r4
   21d8a:	d100      	bne.n	21d8e <_malloc_r+0x3e2>
   21d8c:	e655      	b.n	21a3a <_malloc_r+0x8e>
   21d8e:	e6ca      	b.n	21b26 <_malloc_r+0x17a>
   21d90:	2201      	movs	r2, #1
   21d92:	18e3      	adds	r3, r4, r3
   21d94:	6859      	ldr	r1, [r3, #4]
   21d96:	0038      	movs	r0, r7
   21d98:	430a      	orrs	r2, r1
   21d9a:	605a      	str	r2, [r3, #4]
   21d9c:	68e3      	ldr	r3, [r4, #12]
   21d9e:	68a2      	ldr	r2, [r4, #8]
   21da0:	60d3      	str	r3, [r2, #12]
   21da2:	609a      	str	r2, [r3, #8]
   21da4:	f000 f8fe 	bl	21fa4 <__malloc_unlock>
   21da8:	0020      	movs	r0, r4
   21daa:	3008      	adds	r0, #8
   21dac:	e6cd      	b.n	21b4a <_malloc_r+0x19e>
   21dae:	235b      	movs	r3, #91	; 0x5b
   21db0:	4698      	mov	r8, r3
   21db2:	4480      	add	r8, r0
   21db4:	305c      	adds	r0, #92	; 0x5c
   21db6:	00c1      	lsls	r1, r0, #3
   21db8:	e61f      	b.n	219fa <_malloc_r+0x4e>
   21dba:	099a      	lsrs	r2, r3, #6
   21dbc:	0011      	movs	r1, r2
   21dbe:	3239      	adds	r2, #57	; 0x39
   21dc0:	3138      	adds	r1, #56	; 0x38
   21dc2:	00d2      	lsls	r2, r2, #3
   21dc4:	e78c      	b.n	21ce0 <_malloc_r+0x334>
   21dc6:	42b4      	cmp	r4, r6
   21dc8:	d000      	beq.n	21dcc <_malloc_r+0x420>
   21dca:	e75a      	b.n	21c82 <_malloc_r+0x2d6>
   21dcc:	4b4f      	ldr	r3, [pc, #316]	; (21f0c <_malloc_r+0x560>)
   21dce:	9a00      	ldr	r2, [sp, #0]
   21dd0:	469a      	mov	sl, r3
   21dd2:	681b      	ldr	r3, [r3, #0]
   21dd4:	469c      	mov	ip, r3
   21dd6:	4653      	mov	r3, sl
   21dd8:	4462      	add	r2, ip
   21dda:	0011      	movs	r1, r2
   21ddc:	601a      	str	r2, [r3, #0]
   21dde:	e6ff      	b.n	21be0 <_malloc_r+0x234>
   21de0:	2308      	movs	r3, #8
   21de2:	425b      	negs	r3, r3
   21de4:	469c      	mov	ip, r3
   21de6:	44e1      	add	r9, ip
   21de8:	464b      	mov	r3, r9
   21dea:	689b      	ldr	r3, [r3, #8]
   21dec:	3801      	subs	r0, #1
   21dee:	4599      	cmp	r9, r3
   21df0:	d000      	beq.n	21df4 <_malloc_r+0x448>
   21df2:	e084      	b.n	21efe <_malloc_r+0x552>
   21df4:	4643      	mov	r3, r8
   21df6:	4203      	tst	r3, r0
   21df8:	d1f2      	bne.n	21de0 <_malloc_r+0x434>
   21dfa:	6873      	ldr	r3, [r6, #4]
   21dfc:	438b      	bics	r3, r1
   21dfe:	6073      	str	r3, [r6, #4]
   21e00:	0049      	lsls	r1, r1, #1
   21e02:	4299      	cmp	r1, r3
   21e04:	d900      	bls.n	21e08 <_malloc_r+0x45c>
   21e06:	e6b5      	b.n	21b74 <_malloc_r+0x1c8>
   21e08:	2900      	cmp	r1, #0
   21e0a:	d100      	bne.n	21e0e <_malloc_r+0x462>
   21e0c:	e6b2      	b.n	21b74 <_malloc_r+0x1c8>
   21e0e:	4650      	mov	r0, sl
   21e10:	420b      	tst	r3, r1
   21e12:	d000      	beq.n	21e16 <_malloc_r+0x46a>
   21e14:	e648      	b.n	21aa8 <_malloc_r+0xfc>
   21e16:	0049      	lsls	r1, r1, #1
   21e18:	3004      	adds	r0, #4
   21e1a:	420b      	tst	r3, r1
   21e1c:	d0fb      	beq.n	21e16 <_malloc_r+0x46a>
   21e1e:	e643      	b.n	21aa8 <_malloc_r+0xfc>
   21e20:	2301      	movs	r3, #1
   21e22:	464a      	mov	r2, r9
   21e24:	6053      	str	r3, [r2, #4]
   21e26:	0038      	movs	r0, r7
   21e28:	f000 f8bc 	bl	21fa4 <__malloc_unlock>
   21e2c:	2000      	movs	r0, #0
   21e2e:	e68c      	b.n	21b4a <_malloc_r+0x19e>
   21e30:	4694      	mov	ip, r2
   21e32:	e76a      	b.n	21d0a <_malloc_r+0x35e>
   21e34:	23aa      	movs	r3, #170	; 0xaa
   21e36:	005b      	lsls	r3, r3, #1
   21e38:	4298      	cmp	r0, r3
   21e3a:	d811      	bhi.n	21e60 <_malloc_r+0x4b4>
   21e3c:	3bdd      	subs	r3, #221	; 0xdd
   21e3e:	4698      	mov	r8, r3
   21e40:	0be8      	lsrs	r0, r5, #15
   21e42:	4480      	add	r8, r0
   21e44:	3078      	adds	r0, #120	; 0x78
   21e46:	00c1      	lsls	r1, r0, #3
   21e48:	e5d7      	b.n	219fa <_malloc_r+0x4e>
   21e4a:	2380      	movs	r3, #128	; 0x80
   21e4c:	015b      	lsls	r3, r3, #5
   21e4e:	e6dd      	b.n	21c0c <_malloc_r+0x260>
   21e50:	1089      	asrs	r1, r1, #2
   21e52:	3b02      	subs	r3, #2
   21e54:	408b      	lsls	r3, r1
   21e56:	6872      	ldr	r2, [r6, #4]
   21e58:	4313      	orrs	r3, r2
   21e5a:	6073      	str	r3, [r6, #4]
   21e5c:	4662      	mov	r2, ip
   21e5e:	e757      	b.n	21d10 <_malloc_r+0x364>
   21e60:	4b2b      	ldr	r3, [pc, #172]	; (21f10 <_malloc_r+0x564>)
   21e62:	4298      	cmp	r0, r3
   21e64:	d81c      	bhi.n	21ea0 <_malloc_r+0x4f4>
   21e66:	237c      	movs	r3, #124	; 0x7c
   21e68:	4698      	mov	r8, r3
   21e6a:	0ca8      	lsrs	r0, r5, #18
   21e6c:	4480      	add	r8, r0
   21e6e:	307d      	adds	r0, #125	; 0x7d
   21e70:	00c1      	lsls	r1, r0, #3
   21e72:	e5c2      	b.n	219fa <_malloc_r+0x4e>
   21e74:	3310      	adds	r3, #16
   21e76:	9300      	str	r3, [sp, #0]
   21e78:	e699      	b.n	21bae <_malloc_r+0x202>
   21e7a:	2a54      	cmp	r2, #84	; 0x54
   21e7c:	d826      	bhi.n	21ecc <_malloc_r+0x520>
   21e7e:	464b      	mov	r3, r9
   21e80:	0b1a      	lsrs	r2, r3, #12
   21e82:	0011      	movs	r1, r2
   21e84:	326f      	adds	r2, #111	; 0x6f
   21e86:	316e      	adds	r1, #110	; 0x6e
   21e88:	00d2      	lsls	r2, r2, #3
   21e8a:	e729      	b.n	21ce0 <_malloc_r+0x334>
   21e8c:	051b      	lsls	r3, r3, #20
   21e8e:	d000      	beq.n	21e92 <_malloc_r+0x4e6>
   21e90:	e6a6      	b.n	21be0 <_malloc_r+0x234>
   21e92:	2001      	movs	r0, #1
   21e94:	9b00      	ldr	r3, [sp, #0]
   21e96:	68b2      	ldr	r2, [r6, #8]
   21e98:	4443      	add	r3, r8
   21e9a:	4303      	orrs	r3, r0
   21e9c:	6053      	str	r3, [r2, #4]
   21e9e:	e6e6      	b.n	21c6e <_malloc_r+0x2c2>
   21ea0:	21fe      	movs	r1, #254	; 0xfe
   21ea2:	237e      	movs	r3, #126	; 0x7e
   21ea4:	207f      	movs	r0, #127	; 0x7f
   21ea6:	0089      	lsls	r1, r1, #2
   21ea8:	4698      	mov	r8, r3
   21eaa:	e5a6      	b.n	219fa <_malloc_r+0x4e>
   21eac:	2300      	movs	r3, #0
   21eae:	2001      	movs	r0, #1
   21eb0:	469b      	mov	fp, r3
   21eb2:	e6bd      	b.n	21c30 <_malloc_r+0x284>
   21eb4:	0021      	movs	r1, r4
   21eb6:	0038      	movs	r0, r7
   21eb8:	3108      	adds	r1, #8
   21eba:	f000 fd5b 	bl	22974 <_free_r>
   21ebe:	4653      	mov	r3, sl
   21ec0:	6819      	ldr	r1, [r3, #0]
   21ec2:	e6d4      	b.n	21c6e <_malloc_r+0x2c2>
   21ec4:	465b      	mov	r3, fp
   21ec6:	464a      	mov	r2, r9
   21ec8:	601a      	str	r2, [r3, #0]
   21eca:	e694      	b.n	21bf6 <_malloc_r+0x24a>
   21ecc:	21aa      	movs	r1, #170	; 0xaa
   21ece:	0049      	lsls	r1, r1, #1
   21ed0:	428a      	cmp	r2, r1
   21ed2:	d806      	bhi.n	21ee2 <_malloc_r+0x536>
   21ed4:	464b      	mov	r3, r9
   21ed6:	0bda      	lsrs	r2, r3, #15
   21ed8:	0011      	movs	r1, r2
   21eda:	3278      	adds	r2, #120	; 0x78
   21edc:	3177      	adds	r1, #119	; 0x77
   21ede:	00d2      	lsls	r2, r2, #3
   21ee0:	e6fe      	b.n	21ce0 <_malloc_r+0x334>
   21ee2:	490b      	ldr	r1, [pc, #44]	; (21f10 <_malloc_r+0x564>)
   21ee4:	428a      	cmp	r2, r1
   21ee6:	d806      	bhi.n	21ef6 <_malloc_r+0x54a>
   21ee8:	464b      	mov	r3, r9
   21eea:	0c9a      	lsrs	r2, r3, #18
   21eec:	0011      	movs	r1, r2
   21eee:	327d      	adds	r2, #125	; 0x7d
   21ef0:	317c      	adds	r1, #124	; 0x7c
   21ef2:	00d2      	lsls	r2, r2, #3
   21ef4:	e6f4      	b.n	21ce0 <_malloc_r+0x334>
   21ef6:	22fe      	movs	r2, #254	; 0xfe
   21ef8:	217e      	movs	r1, #126	; 0x7e
   21efa:	0092      	lsls	r2, r2, #2
   21efc:	e6f0      	b.n	21ce0 <_malloc_r+0x334>
   21efe:	6873      	ldr	r3, [r6, #4]
   21f00:	e77e      	b.n	21e00 <_malloc_r+0x454>
   21f02:	002b      	movs	r3, r5
   21f04:	08e8      	lsrs	r0, r5, #3
   21f06:	3308      	adds	r3, #8
   21f08:	e605      	b.n	21b16 <_malloc_r+0x16a>
   21f0a:	46c0      	nop			; (mov r8, r8)
   21f0c:	20000fc4 	.word	0x20000fc4
   21f10:	00000554 	.word	0x00000554

00021f14 <memchr>:
   21f14:	b570      	push	{r4, r5, r6, lr}
   21f16:	b2cd      	uxtb	r5, r1
   21f18:	0783      	lsls	r3, r0, #30
   21f1a:	d034      	beq.n	21f86 <memchr+0x72>
   21f1c:	1e54      	subs	r4, r2, #1
   21f1e:	2a00      	cmp	r2, #0
   21f20:	d01b      	beq.n	21f5a <memchr+0x46>
   21f22:	7803      	ldrb	r3, [r0, #0]
   21f24:	42ab      	cmp	r3, r5
   21f26:	d019      	beq.n	21f5c <memchr+0x48>
   21f28:	2203      	movs	r2, #3
   21f2a:	e004      	b.n	21f36 <memchr+0x22>
   21f2c:	3c01      	subs	r4, #1
   21f2e:	d314      	bcc.n	21f5a <memchr+0x46>
   21f30:	7803      	ldrb	r3, [r0, #0]
   21f32:	42ab      	cmp	r3, r5
   21f34:	d012      	beq.n	21f5c <memchr+0x48>
   21f36:	3001      	adds	r0, #1
   21f38:	4210      	tst	r0, r2
   21f3a:	d1f7      	bne.n	21f2c <memchr+0x18>
   21f3c:	2c03      	cmp	r4, #3
   21f3e:	d80e      	bhi.n	21f5e <memchr+0x4a>
   21f40:	2c00      	cmp	r4, #0
   21f42:	d00a      	beq.n	21f5a <memchr+0x46>
   21f44:	7803      	ldrb	r3, [r0, #0]
   21f46:	42ab      	cmp	r3, r5
   21f48:	d008      	beq.n	21f5c <memchr+0x48>
   21f4a:	1904      	adds	r4, r0, r4
   21f4c:	e002      	b.n	21f54 <memchr+0x40>
   21f4e:	7803      	ldrb	r3, [r0, #0]
   21f50:	42ab      	cmp	r3, r5
   21f52:	d003      	beq.n	21f5c <memchr+0x48>
   21f54:	3001      	adds	r0, #1
   21f56:	4284      	cmp	r4, r0
   21f58:	d1f9      	bne.n	21f4e <memchr+0x3a>
   21f5a:	2000      	movs	r0, #0
   21f5c:	bd70      	pop	{r4, r5, r6, pc}
   21f5e:	22ff      	movs	r2, #255	; 0xff
   21f60:	060b      	lsls	r3, r1, #24
   21f62:	0c1b      	lsrs	r3, r3, #16
   21f64:	4011      	ands	r1, r2
   21f66:	4319      	orrs	r1, r3
   21f68:	040b      	lsls	r3, r1, #16
   21f6a:	4e08      	ldr	r6, [pc, #32]	; (21f8c <memchr+0x78>)
   21f6c:	4319      	orrs	r1, r3
   21f6e:	6803      	ldr	r3, [r0, #0]
   21f70:	4a07      	ldr	r2, [pc, #28]	; (21f90 <memchr+0x7c>)
   21f72:	404b      	eors	r3, r1
   21f74:	189a      	adds	r2, r3, r2
   21f76:	439a      	bics	r2, r3
   21f78:	4232      	tst	r2, r6
   21f7a:	d1e3      	bne.n	21f44 <memchr+0x30>
   21f7c:	3c04      	subs	r4, #4
   21f7e:	3004      	adds	r0, #4
   21f80:	2c03      	cmp	r4, #3
   21f82:	d8f4      	bhi.n	21f6e <memchr+0x5a>
   21f84:	e7dc      	b.n	21f40 <memchr+0x2c>
   21f86:	0014      	movs	r4, r2
   21f88:	e7d8      	b.n	21f3c <memchr+0x28>
   21f8a:	46c0      	nop			; (mov r8, r8)
   21f8c:	80808080 	.word	0x80808080
   21f90:	fefefeff 	.word	0xfefefeff

00021f94 <__malloc_lock>:
   21f94:	b510      	push	{r4, lr}
   21f96:	4802      	ldr	r0, [pc, #8]	; (21fa0 <__malloc_lock+0xc>)
   21f98:	f7ff fd04 	bl	219a4 <__retarget_lock_acquire_recursive>
   21f9c:	bd10      	pop	{r4, pc}
   21f9e:	46c0      	nop			; (mov r8, r8)
   21fa0:	20005628 	.word	0x20005628

00021fa4 <__malloc_unlock>:
   21fa4:	b510      	push	{r4, lr}
   21fa6:	4802      	ldr	r0, [pc, #8]	; (21fb0 <__malloc_unlock+0xc>)
   21fa8:	f7ff fcfe 	bl	219a8 <__retarget_lock_release_recursive>
   21fac:	bd10      	pop	{r4, pc}
   21fae:	46c0      	nop			; (mov r8, r8)
   21fb0:	20005628 	.word	0x20005628

00021fb4 <_Balloc>:
   21fb4:	b570      	push	{r4, r5, r6, lr}
   21fb6:	0004      	movs	r4, r0
   21fb8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   21fba:	000d      	movs	r5, r1
   21fbc:	2800      	cmp	r0, #0
   21fbe:	d00a      	beq.n	21fd6 <_Balloc+0x22>
   21fc0:	00ab      	lsls	r3, r5, #2
   21fc2:	18c3      	adds	r3, r0, r3
   21fc4:	6818      	ldr	r0, [r3, #0]
   21fc6:	2800      	cmp	r0, #0
   21fc8:	d00f      	beq.n	21fea <_Balloc+0x36>
   21fca:	6802      	ldr	r2, [r0, #0]
   21fcc:	601a      	str	r2, [r3, #0]
   21fce:	2300      	movs	r3, #0
   21fd0:	6103      	str	r3, [r0, #16]
   21fd2:	60c3      	str	r3, [r0, #12]
   21fd4:	bd70      	pop	{r4, r5, r6, pc}
   21fd6:	2221      	movs	r2, #33	; 0x21
   21fd8:	2104      	movs	r1, #4
   21fda:	0020      	movs	r0, r4
   21fdc:	f000 fc4e 	bl	2287c <_calloc_r>
   21fe0:	64e0      	str	r0, [r4, #76]	; 0x4c
   21fe2:	2800      	cmp	r0, #0
   21fe4:	d1ec      	bne.n	21fc0 <_Balloc+0xc>
   21fe6:	2000      	movs	r0, #0
   21fe8:	e7f4      	b.n	21fd4 <_Balloc+0x20>
   21fea:	2601      	movs	r6, #1
   21fec:	40ae      	lsls	r6, r5
   21fee:	1d72      	adds	r2, r6, #5
   21ff0:	0092      	lsls	r2, r2, #2
   21ff2:	2101      	movs	r1, #1
   21ff4:	0020      	movs	r0, r4
   21ff6:	f000 fc41 	bl	2287c <_calloc_r>
   21ffa:	2800      	cmp	r0, #0
   21ffc:	d0f3      	beq.n	21fe6 <_Balloc+0x32>
   21ffe:	6045      	str	r5, [r0, #4]
   22000:	6086      	str	r6, [r0, #8]
   22002:	e7e4      	b.n	21fce <_Balloc+0x1a>

00022004 <_Bfree>:
   22004:	2900      	cmp	r1, #0
   22006:	d006      	beq.n	22016 <_Bfree+0x12>
   22008:	684b      	ldr	r3, [r1, #4]
   2200a:	009a      	lsls	r2, r3, #2
   2200c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   2200e:	189b      	adds	r3, r3, r2
   22010:	681a      	ldr	r2, [r3, #0]
   22012:	600a      	str	r2, [r1, #0]
   22014:	6019      	str	r1, [r3, #0]
   22016:	4770      	bx	lr

00022018 <__multadd>:
   22018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2201a:	46ce      	mov	lr, r9
   2201c:	4647      	mov	r7, r8
   2201e:	4681      	mov	r9, r0
   22020:	0008      	movs	r0, r1
   22022:	b580      	push	{r7, lr}
   22024:	000d      	movs	r5, r1
   22026:	690c      	ldr	r4, [r1, #16]
   22028:	001f      	movs	r7, r3
   2202a:	2100      	movs	r1, #0
   2202c:	3014      	adds	r0, #20
   2202e:	6803      	ldr	r3, [r0, #0]
   22030:	3101      	adds	r1, #1
   22032:	041e      	lsls	r6, r3, #16
   22034:	0c36      	lsrs	r6, r6, #16
   22036:	4356      	muls	r6, r2
   22038:	0c1b      	lsrs	r3, r3, #16
   2203a:	4353      	muls	r3, r2
   2203c:	19f6      	adds	r6, r6, r7
   2203e:	0c37      	lsrs	r7, r6, #16
   22040:	19db      	adds	r3, r3, r7
   22042:	0436      	lsls	r6, r6, #16
   22044:	0c1f      	lsrs	r7, r3, #16
   22046:	0c36      	lsrs	r6, r6, #16
   22048:	041b      	lsls	r3, r3, #16
   2204a:	199b      	adds	r3, r3, r6
   2204c:	c008      	stmia	r0!, {r3}
   2204e:	428c      	cmp	r4, r1
   22050:	dced      	bgt.n	2202e <__multadd+0x16>
   22052:	2f00      	cmp	r7, #0
   22054:	d008      	beq.n	22068 <__multadd+0x50>
   22056:	68ab      	ldr	r3, [r5, #8]
   22058:	429c      	cmp	r4, r3
   2205a:	da0a      	bge.n	22072 <__multadd+0x5a>
   2205c:	1d23      	adds	r3, r4, #4
   2205e:	009b      	lsls	r3, r3, #2
   22060:	18eb      	adds	r3, r5, r3
   22062:	3401      	adds	r4, #1
   22064:	605f      	str	r7, [r3, #4]
   22066:	612c      	str	r4, [r5, #16]
   22068:	0028      	movs	r0, r5
   2206a:	bc0c      	pop	{r2, r3}
   2206c:	4690      	mov	r8, r2
   2206e:	4699      	mov	r9, r3
   22070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22072:	686b      	ldr	r3, [r5, #4]
   22074:	4648      	mov	r0, r9
   22076:	1c59      	adds	r1, r3, #1
   22078:	f7ff ff9c 	bl	21fb4 <_Balloc>
   2207c:	0029      	movs	r1, r5
   2207e:	692b      	ldr	r3, [r5, #16]
   22080:	4680      	mov	r8, r0
   22082:	1c9a      	adds	r2, r3, #2
   22084:	0092      	lsls	r2, r2, #2
   22086:	310c      	adds	r1, #12
   22088:	300c      	adds	r0, #12
   2208a:	f7fc ffad 	bl	1efe8 <memcpy>
   2208e:	686b      	ldr	r3, [r5, #4]
   22090:	009a      	lsls	r2, r3, #2
   22092:	464b      	mov	r3, r9
   22094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   22096:	189b      	adds	r3, r3, r2
   22098:	681a      	ldr	r2, [r3, #0]
   2209a:	602a      	str	r2, [r5, #0]
   2209c:	601d      	str	r5, [r3, #0]
   2209e:	4645      	mov	r5, r8
   220a0:	e7dc      	b.n	2205c <__multadd+0x44>
   220a2:	46c0      	nop			; (mov r8, r8)

000220a4 <__hi0bits>:
   220a4:	0003      	movs	r3, r0
   220a6:	0c02      	lsrs	r2, r0, #16
   220a8:	2000      	movs	r0, #0
   220aa:	2a00      	cmp	r2, #0
   220ac:	d101      	bne.n	220b2 <__hi0bits+0xe>
   220ae:	041b      	lsls	r3, r3, #16
   220b0:	3010      	adds	r0, #16
   220b2:	0e1a      	lsrs	r2, r3, #24
   220b4:	d101      	bne.n	220ba <__hi0bits+0x16>
   220b6:	3008      	adds	r0, #8
   220b8:	021b      	lsls	r3, r3, #8
   220ba:	0f1a      	lsrs	r2, r3, #28
   220bc:	d101      	bne.n	220c2 <__hi0bits+0x1e>
   220be:	3004      	adds	r0, #4
   220c0:	011b      	lsls	r3, r3, #4
   220c2:	0f9a      	lsrs	r2, r3, #30
   220c4:	d101      	bne.n	220ca <__hi0bits+0x26>
   220c6:	3002      	adds	r0, #2
   220c8:	009b      	lsls	r3, r3, #2
   220ca:	2b00      	cmp	r3, #0
   220cc:	db03      	blt.n	220d6 <__hi0bits+0x32>
   220ce:	3001      	adds	r0, #1
   220d0:	005b      	lsls	r3, r3, #1
   220d2:	d400      	bmi.n	220d6 <__hi0bits+0x32>
   220d4:	2020      	movs	r0, #32
   220d6:	4770      	bx	lr

000220d8 <__lo0bits>:
   220d8:	6803      	ldr	r3, [r0, #0]
   220da:	075a      	lsls	r2, r3, #29
   220dc:	d009      	beq.n	220f2 <__lo0bits+0x1a>
   220de:	2200      	movs	r2, #0
   220e0:	07d9      	lsls	r1, r3, #31
   220e2:	d404      	bmi.n	220ee <__lo0bits+0x16>
   220e4:	079a      	lsls	r2, r3, #30
   220e6:	d420      	bmi.n	2212a <__lo0bits+0x52>
   220e8:	2202      	movs	r2, #2
   220ea:	089b      	lsrs	r3, r3, #2
   220ec:	6003      	str	r3, [r0, #0]
   220ee:	0010      	movs	r0, r2
   220f0:	4770      	bx	lr
   220f2:	0419      	lsls	r1, r3, #16
   220f4:	2200      	movs	r2, #0
   220f6:	2900      	cmp	r1, #0
   220f8:	d101      	bne.n	220fe <__lo0bits+0x26>
   220fa:	0c1b      	lsrs	r3, r3, #16
   220fc:	3210      	adds	r2, #16
   220fe:	21ff      	movs	r1, #255	; 0xff
   22100:	4219      	tst	r1, r3
   22102:	d101      	bne.n	22108 <__lo0bits+0x30>
   22104:	3208      	adds	r2, #8
   22106:	0a1b      	lsrs	r3, r3, #8
   22108:	0719      	lsls	r1, r3, #28
   2210a:	d101      	bne.n	22110 <__lo0bits+0x38>
   2210c:	3204      	adds	r2, #4
   2210e:	091b      	lsrs	r3, r3, #4
   22110:	0799      	lsls	r1, r3, #30
   22112:	d101      	bne.n	22118 <__lo0bits+0x40>
   22114:	3202      	adds	r2, #2
   22116:	089b      	lsrs	r3, r3, #2
   22118:	07d9      	lsls	r1, r3, #31
   2211a:	d404      	bmi.n	22126 <__lo0bits+0x4e>
   2211c:	085b      	lsrs	r3, r3, #1
   2211e:	d101      	bne.n	22124 <__lo0bits+0x4c>
   22120:	2220      	movs	r2, #32
   22122:	e7e4      	b.n	220ee <__lo0bits+0x16>
   22124:	3201      	adds	r2, #1
   22126:	6003      	str	r3, [r0, #0]
   22128:	e7e1      	b.n	220ee <__lo0bits+0x16>
   2212a:	085b      	lsrs	r3, r3, #1
   2212c:	6003      	str	r3, [r0, #0]
   2212e:	2201      	movs	r2, #1
   22130:	e7dd      	b.n	220ee <__lo0bits+0x16>
   22132:	46c0      	nop			; (mov r8, r8)

00022134 <__i2b>:
   22134:	b510      	push	{r4, lr}
   22136:	000c      	movs	r4, r1
   22138:	2101      	movs	r1, #1
   2213a:	f7ff ff3b 	bl	21fb4 <_Balloc>
   2213e:	2301      	movs	r3, #1
   22140:	6144      	str	r4, [r0, #20]
   22142:	6103      	str	r3, [r0, #16]
   22144:	bd10      	pop	{r4, pc}
   22146:	46c0      	nop			; (mov r8, r8)

00022148 <__multiply>:
   22148:	b5f0      	push	{r4, r5, r6, r7, lr}
   2214a:	4657      	mov	r7, sl
   2214c:	464e      	mov	r6, r9
   2214e:	4645      	mov	r5, r8
   22150:	46de      	mov	lr, fp
   22152:	b5e0      	push	{r5, r6, r7, lr}
   22154:	6914      	ldr	r4, [r2, #16]
   22156:	690e      	ldr	r6, [r1, #16]
   22158:	b085      	sub	sp, #20
   2215a:	000f      	movs	r7, r1
   2215c:	0015      	movs	r5, r2
   2215e:	42a6      	cmp	r6, r4
   22160:	da04      	bge.n	2216c <__multiply+0x24>
   22162:	0033      	movs	r3, r6
   22164:	0017      	movs	r7, r2
   22166:	0026      	movs	r6, r4
   22168:	000d      	movs	r5, r1
   2216a:	001c      	movs	r4, r3
   2216c:	1933      	adds	r3, r6, r4
   2216e:	4698      	mov	r8, r3
   22170:	68bb      	ldr	r3, [r7, #8]
   22172:	6879      	ldr	r1, [r7, #4]
   22174:	4598      	cmp	r8, r3
   22176:	dd00      	ble.n	2217a <__multiply+0x32>
   22178:	3101      	adds	r1, #1
   2217a:	f7ff ff1b 	bl	21fb4 <_Balloc>
   2217e:	2214      	movs	r2, #20
   22180:	0003      	movs	r3, r0
   22182:	4694      	mov	ip, r2
   22184:	4463      	add	r3, ip
   22186:	469b      	mov	fp, r3
   22188:	4643      	mov	r3, r8
   2218a:	009b      	lsls	r3, r3, #2
   2218c:	445b      	add	r3, fp
   2218e:	0019      	movs	r1, r3
   22190:	9302      	str	r3, [sp, #8]
   22192:	9003      	str	r0, [sp, #12]
   22194:	465b      	mov	r3, fp
   22196:	2200      	movs	r2, #0
   22198:	458b      	cmp	fp, r1
   2219a:	d203      	bcs.n	221a4 <__multiply+0x5c>
   2219c:	9902      	ldr	r1, [sp, #8]
   2219e:	c304      	stmia	r3!, {r2}
   221a0:	4299      	cmp	r1, r3
   221a2:	d8fc      	bhi.n	2219e <__multiply+0x56>
   221a4:	2314      	movs	r3, #20
   221a6:	00a4      	lsls	r4, r4, #2
   221a8:	469a      	mov	sl, r3
   221aa:	3714      	adds	r7, #20
   221ac:	0023      	movs	r3, r4
   221ae:	46bc      	mov	ip, r7
   221b0:	44aa      	add	sl, r5
   221b2:	00b6      	lsls	r6, r6, #2
   221b4:	4453      	add	r3, sl
   221b6:	9700      	str	r7, [sp, #0]
   221b8:	44b4      	add	ip, r6
   221ba:	9301      	str	r3, [sp, #4]
   221bc:	459a      	cmp	sl, r3
   221be:	d24f      	bcs.n	22260 <__multiply+0x118>
   221c0:	4653      	mov	r3, sl
   221c2:	681b      	ldr	r3, [r3, #0]
   221c4:	041e      	lsls	r6, r3, #16
   221c6:	0c36      	lsrs	r6, r6, #16
   221c8:	d020      	beq.n	2220c <__multiply+0xc4>
   221ca:	465c      	mov	r4, fp
   221cc:	2700      	movs	r7, #0
   221ce:	9d00      	ldr	r5, [sp, #0]
   221d0:	0021      	movs	r1, r4
   221d2:	cc08      	ldmia	r4!, {r3}
   221d4:	cd04      	ldmia	r5!, {r2}
   221d6:	4699      	mov	r9, r3
   221d8:	4648      	mov	r0, r9
   221da:	0413      	lsls	r3, r2, #16
   221dc:	0c1b      	lsrs	r3, r3, #16
   221de:	4373      	muls	r3, r6
   221e0:	0400      	lsls	r0, r0, #16
   221e2:	0c00      	lsrs	r0, r0, #16
   221e4:	181b      	adds	r3, r3, r0
   221e6:	19d8      	adds	r0, r3, r7
   221e8:	0c13      	lsrs	r3, r2, #16
   221ea:	464a      	mov	r2, r9
   221ec:	4373      	muls	r3, r6
   221ee:	0c12      	lsrs	r2, r2, #16
   221f0:	189b      	adds	r3, r3, r2
   221f2:	0c02      	lsrs	r2, r0, #16
   221f4:	189b      	adds	r3, r3, r2
   221f6:	0402      	lsls	r2, r0, #16
   221f8:	0c1f      	lsrs	r7, r3, #16
   221fa:	0c12      	lsrs	r2, r2, #16
   221fc:	041b      	lsls	r3, r3, #16
   221fe:	4313      	orrs	r3, r2
   22200:	600b      	str	r3, [r1, #0]
   22202:	45ac      	cmp	ip, r5
   22204:	d8e4      	bhi.n	221d0 <__multiply+0x88>
   22206:	4653      	mov	r3, sl
   22208:	6027      	str	r7, [r4, #0]
   2220a:	681b      	ldr	r3, [r3, #0]
   2220c:	0c1e      	lsrs	r6, r3, #16
   2220e:	d020      	beq.n	22252 <__multiply+0x10a>
   22210:	465b      	mov	r3, fp
   22212:	2100      	movs	r1, #0
   22214:	681b      	ldr	r3, [r3, #0]
   22216:	465c      	mov	r4, fp
   22218:	0018      	movs	r0, r3
   2221a:	000f      	movs	r7, r1
   2221c:	4662      	mov	r2, ip
   2221e:	9d00      	ldr	r5, [sp, #0]
   22220:	8829      	ldrh	r1, [r5, #0]
   22222:	0c00      	lsrs	r0, r0, #16
   22224:	4371      	muls	r1, r6
   22226:	1809      	adds	r1, r1, r0
   22228:	19c9      	adds	r1, r1, r7
   2222a:	041b      	lsls	r3, r3, #16
   2222c:	0408      	lsls	r0, r1, #16
   2222e:	0c1b      	lsrs	r3, r3, #16
   22230:	4303      	orrs	r3, r0
   22232:	6023      	str	r3, [r4, #0]
   22234:	cd08      	ldmia	r5!, {r3}
   22236:	6860      	ldr	r0, [r4, #4]
   22238:	0c1b      	lsrs	r3, r3, #16
   2223a:	4373      	muls	r3, r6
   2223c:	0407      	lsls	r7, r0, #16
   2223e:	0c3f      	lsrs	r7, r7, #16
   22240:	19db      	adds	r3, r3, r7
   22242:	0c09      	lsrs	r1, r1, #16
   22244:	185b      	adds	r3, r3, r1
   22246:	0c1f      	lsrs	r7, r3, #16
   22248:	3404      	adds	r4, #4
   2224a:	42aa      	cmp	r2, r5
   2224c:	d8e8      	bhi.n	22220 <__multiply+0xd8>
   2224e:	4694      	mov	ip, r2
   22250:	6023      	str	r3, [r4, #0]
   22252:	2304      	movs	r3, #4
   22254:	4699      	mov	r9, r3
   22256:	9b01      	ldr	r3, [sp, #4]
   22258:	44ca      	add	sl, r9
   2225a:	44cb      	add	fp, r9
   2225c:	4553      	cmp	r3, sl
   2225e:	d8af      	bhi.n	221c0 <__multiply+0x78>
   22260:	4643      	mov	r3, r8
   22262:	2b00      	cmp	r3, #0
   22264:	dd0e      	ble.n	22284 <__multiply+0x13c>
   22266:	9b02      	ldr	r3, [sp, #8]
   22268:	3b04      	subs	r3, #4
   2226a:	681a      	ldr	r2, [r3, #0]
   2226c:	2a00      	cmp	r2, #0
   2226e:	d109      	bne.n	22284 <__multiply+0x13c>
   22270:	4642      	mov	r2, r8
   22272:	e003      	b.n	2227c <__multiply+0x134>
   22274:	3b04      	subs	r3, #4
   22276:	6819      	ldr	r1, [r3, #0]
   22278:	2900      	cmp	r1, #0
   2227a:	d102      	bne.n	22282 <__multiply+0x13a>
   2227c:	3a01      	subs	r2, #1
   2227e:	2a00      	cmp	r2, #0
   22280:	d1f8      	bne.n	22274 <__multiply+0x12c>
   22282:	4690      	mov	r8, r2
   22284:	9b03      	ldr	r3, [sp, #12]
   22286:	4642      	mov	r2, r8
   22288:	0018      	movs	r0, r3
   2228a:	611a      	str	r2, [r3, #16]
   2228c:	b005      	add	sp, #20
   2228e:	bc3c      	pop	{r2, r3, r4, r5}
   22290:	4690      	mov	r8, r2
   22292:	4699      	mov	r9, r3
   22294:	46a2      	mov	sl, r4
   22296:	46ab      	mov	fp, r5
   22298:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2229a:	46c0      	nop			; (mov r8, r8)

0002229c <__pow5mult>:
   2229c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2229e:	4647      	mov	r7, r8
   222a0:	46ce      	mov	lr, r9
   222a2:	2303      	movs	r3, #3
   222a4:	b580      	push	{r7, lr}
   222a6:	4680      	mov	r8, r0
   222a8:	000f      	movs	r7, r1
   222aa:	0014      	movs	r4, r2
   222ac:	4013      	ands	r3, r2
   222ae:	d13a      	bne.n	22326 <__pow5mult+0x8a>
   222b0:	10a4      	asrs	r4, r4, #2
   222b2:	003e      	movs	r6, r7
   222b4:	2c00      	cmp	r4, #0
   222b6:	d025      	beq.n	22304 <__pow5mult+0x68>
   222b8:	4643      	mov	r3, r8
   222ba:	6c9d      	ldr	r5, [r3, #72]	; 0x48
   222bc:	2d00      	cmp	r5, #0
   222be:	d03b      	beq.n	22338 <__pow5mult+0x9c>
   222c0:	003e      	movs	r6, r7
   222c2:	2300      	movs	r3, #0
   222c4:	2701      	movs	r7, #1
   222c6:	4699      	mov	r9, r3
   222c8:	4227      	tst	r7, r4
   222ca:	d107      	bne.n	222dc <__pow5mult+0x40>
   222cc:	1064      	asrs	r4, r4, #1
   222ce:	d019      	beq.n	22304 <__pow5mult+0x68>
   222d0:	6828      	ldr	r0, [r5, #0]
   222d2:	2800      	cmp	r0, #0
   222d4:	d01b      	beq.n	2230e <__pow5mult+0x72>
   222d6:	0005      	movs	r5, r0
   222d8:	4227      	tst	r7, r4
   222da:	d0f7      	beq.n	222cc <__pow5mult+0x30>
   222dc:	002a      	movs	r2, r5
   222de:	0031      	movs	r1, r6
   222e0:	4640      	mov	r0, r8
   222e2:	f7ff ff31 	bl	22148 <__multiply>
   222e6:	2e00      	cmp	r6, #0
   222e8:	d01b      	beq.n	22322 <__pow5mult+0x86>
   222ea:	4642      	mov	r2, r8
   222ec:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   222ee:	6873      	ldr	r3, [r6, #4]
   222f0:	4694      	mov	ip, r2
   222f2:	009b      	lsls	r3, r3, #2
   222f4:	4463      	add	r3, ip
   222f6:	681a      	ldr	r2, [r3, #0]
   222f8:	1064      	asrs	r4, r4, #1
   222fa:	6032      	str	r2, [r6, #0]
   222fc:	601e      	str	r6, [r3, #0]
   222fe:	0006      	movs	r6, r0
   22300:	2c00      	cmp	r4, #0
   22302:	d1e5      	bne.n	222d0 <__pow5mult+0x34>
   22304:	0030      	movs	r0, r6
   22306:	bc0c      	pop	{r2, r3}
   22308:	4690      	mov	r8, r2
   2230a:	4699      	mov	r9, r3
   2230c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2230e:	002a      	movs	r2, r5
   22310:	0029      	movs	r1, r5
   22312:	4640      	mov	r0, r8
   22314:	f7ff ff18 	bl	22148 <__multiply>
   22318:	464b      	mov	r3, r9
   2231a:	6028      	str	r0, [r5, #0]
   2231c:	6003      	str	r3, [r0, #0]
   2231e:	0005      	movs	r5, r0
   22320:	e7da      	b.n	222d8 <__pow5mult+0x3c>
   22322:	0006      	movs	r6, r0
   22324:	e7d2      	b.n	222cc <__pow5mult+0x30>
   22326:	4a0b      	ldr	r2, [pc, #44]	; (22354 <__pow5mult+0xb8>)
   22328:	3b01      	subs	r3, #1
   2232a:	009b      	lsls	r3, r3, #2
   2232c:	589a      	ldr	r2, [r3, r2]
   2232e:	2300      	movs	r3, #0
   22330:	f7ff fe72 	bl	22018 <__multadd>
   22334:	0007      	movs	r7, r0
   22336:	e7bb      	b.n	222b0 <__pow5mult+0x14>
   22338:	2101      	movs	r1, #1
   2233a:	4640      	mov	r0, r8
   2233c:	f7ff fe3a 	bl	21fb4 <_Balloc>
   22340:	4b05      	ldr	r3, [pc, #20]	; (22358 <__pow5mult+0xbc>)
   22342:	0005      	movs	r5, r0
   22344:	6143      	str	r3, [r0, #20]
   22346:	2301      	movs	r3, #1
   22348:	6103      	str	r3, [r0, #16]
   2234a:	4643      	mov	r3, r8
   2234c:	6498      	str	r0, [r3, #72]	; 0x48
   2234e:	2300      	movs	r3, #0
   22350:	6003      	str	r3, [r0, #0]
   22352:	e7b5      	b.n	222c0 <__pow5mult+0x24>
   22354:	000254a0 	.word	0x000254a0
   22358:	00000271 	.word	0x00000271

0002235c <__lshift>:
   2235c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2235e:	464e      	mov	r6, r9
   22360:	4645      	mov	r5, r8
   22362:	46de      	mov	lr, fp
   22364:	4657      	mov	r7, sl
   22366:	b5e0      	push	{r5, r6, r7, lr}
   22368:	000e      	movs	r6, r1
   2236a:	6933      	ldr	r3, [r6, #16]
   2236c:	1154      	asrs	r4, r2, #5
   2236e:	4698      	mov	r8, r3
   22370:	44a0      	add	r8, r4
   22372:	4643      	mov	r3, r8
   22374:	1c5d      	adds	r5, r3, #1
   22376:	68b3      	ldr	r3, [r6, #8]
   22378:	4683      	mov	fp, r0
   2237a:	4691      	mov	r9, r2
   2237c:	6849      	ldr	r1, [r1, #4]
   2237e:	429d      	cmp	r5, r3
   22380:	dd03      	ble.n	2238a <__lshift+0x2e>
   22382:	3101      	adds	r1, #1
   22384:	005b      	lsls	r3, r3, #1
   22386:	429d      	cmp	r5, r3
   22388:	dcfb      	bgt.n	22382 <__lshift+0x26>
   2238a:	4658      	mov	r0, fp
   2238c:	f7ff fe12 	bl	21fb4 <_Balloc>
   22390:	0003      	movs	r3, r0
   22392:	4684      	mov	ip, r0
   22394:	3314      	adds	r3, #20
   22396:	2c00      	cmp	r4, #0
   22398:	dd06      	ble.n	223a8 <__lshift+0x4c>
   2239a:	2100      	movs	r1, #0
   2239c:	00a4      	lsls	r4, r4, #2
   2239e:	001a      	movs	r2, r3
   223a0:	191b      	adds	r3, r3, r4
   223a2:	c202      	stmia	r2!, {r1}
   223a4:	4293      	cmp	r3, r2
   223a6:	d1fc      	bne.n	223a2 <__lshift+0x46>
   223a8:	6932      	ldr	r2, [r6, #16]
   223aa:	4648      	mov	r0, r9
   223ac:	0097      	lsls	r7, r2, #2
   223ae:	0031      	movs	r1, r6
   223b0:	221f      	movs	r2, #31
   223b2:	3114      	adds	r1, #20
   223b4:	4010      	ands	r0, r2
   223b6:	19cf      	adds	r7, r1, r7
   223b8:	4681      	mov	r9, r0
   223ba:	2800      	cmp	r0, #0
   223bc:	d025      	beq.n	2240a <__lshift+0xae>
   223be:	2220      	movs	r2, #32
   223c0:	1a12      	subs	r2, r2, r0
   223c2:	4692      	mov	sl, r2
   223c4:	2200      	movs	r2, #0
   223c6:	4648      	mov	r0, r9
   223c8:	680c      	ldr	r4, [r1, #0]
   223ca:	4084      	lsls	r4, r0
   223cc:	4650      	mov	r0, sl
   223ce:	4314      	orrs	r4, r2
   223d0:	601c      	str	r4, [r3, #0]
   223d2:	c904      	ldmia	r1!, {r2}
   223d4:	3304      	adds	r3, #4
   223d6:	40c2      	lsrs	r2, r0
   223d8:	428f      	cmp	r7, r1
   223da:	d8f4      	bhi.n	223c6 <__lshift+0x6a>
   223dc:	601a      	str	r2, [r3, #0]
   223de:	2a00      	cmp	r2, #0
   223e0:	d001      	beq.n	223e6 <__lshift+0x8a>
   223e2:	4645      	mov	r5, r8
   223e4:	3502      	adds	r5, #2
   223e6:	4663      	mov	r3, ip
   223e8:	3d01      	subs	r5, #1
   223ea:	611d      	str	r5, [r3, #16]
   223ec:	6873      	ldr	r3, [r6, #4]
   223ee:	4660      	mov	r0, ip
   223f0:	009a      	lsls	r2, r3, #2
   223f2:	465b      	mov	r3, fp
   223f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   223f6:	189b      	adds	r3, r3, r2
   223f8:	681a      	ldr	r2, [r3, #0]
   223fa:	6032      	str	r2, [r6, #0]
   223fc:	601e      	str	r6, [r3, #0]
   223fe:	bc3c      	pop	{r2, r3, r4, r5}
   22400:	4690      	mov	r8, r2
   22402:	4699      	mov	r9, r3
   22404:	46a2      	mov	sl, r4
   22406:	46ab      	mov	fp, r5
   22408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2240a:	c904      	ldmia	r1!, {r2}
   2240c:	c304      	stmia	r3!, {r2}
   2240e:	428f      	cmp	r7, r1
   22410:	d9e9      	bls.n	223e6 <__lshift+0x8a>
   22412:	c904      	ldmia	r1!, {r2}
   22414:	c304      	stmia	r3!, {r2}
   22416:	428f      	cmp	r7, r1
   22418:	d8f7      	bhi.n	2240a <__lshift+0xae>
   2241a:	e7e4      	b.n	223e6 <__lshift+0x8a>

0002241c <__mcmp>:
   2241c:	690a      	ldr	r2, [r1, #16]
   2241e:	6903      	ldr	r3, [r0, #16]
   22420:	b530      	push	{r4, r5, lr}
   22422:	0005      	movs	r5, r0
   22424:	1a98      	subs	r0, r3, r2
   22426:	d111      	bne.n	2244c <__mcmp+0x30>
   22428:	0092      	lsls	r2, r2, #2
   2242a:	3514      	adds	r5, #20
   2242c:	3114      	adds	r1, #20
   2242e:	18ab      	adds	r3, r5, r2
   22430:	1889      	adds	r1, r1, r2
   22432:	e001      	b.n	22438 <__mcmp+0x1c>
   22434:	429d      	cmp	r5, r3
   22436:	d209      	bcs.n	2244c <__mcmp+0x30>
   22438:	3b04      	subs	r3, #4
   2243a:	3904      	subs	r1, #4
   2243c:	681c      	ldr	r4, [r3, #0]
   2243e:	680a      	ldr	r2, [r1, #0]
   22440:	4294      	cmp	r4, r2
   22442:	d0f7      	beq.n	22434 <__mcmp+0x18>
   22444:	4294      	cmp	r4, r2
   22446:	4180      	sbcs	r0, r0
   22448:	2201      	movs	r2, #1
   2244a:	4310      	orrs	r0, r2
   2244c:	bd30      	pop	{r4, r5, pc}
   2244e:	46c0      	nop			; (mov r8, r8)

00022450 <__mdiff>:
   22450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22452:	4645      	mov	r5, r8
   22454:	46de      	mov	lr, fp
   22456:	4657      	mov	r7, sl
   22458:	464e      	mov	r6, r9
   2245a:	0014      	movs	r4, r2
   2245c:	690b      	ldr	r3, [r1, #16]
   2245e:	6912      	ldr	r2, [r2, #16]
   22460:	b5e0      	push	{r5, r6, r7, lr}
   22462:	4688      	mov	r8, r1
   22464:	1a9d      	subs	r5, r3, r2
   22466:	d11a      	bne.n	2249e <__mdiff+0x4e>
   22468:	000f      	movs	r7, r1
   2246a:	2114      	movs	r1, #20
   2246c:	468c      	mov	ip, r1
   2246e:	0092      	lsls	r2, r2, #2
   22470:	3714      	adds	r7, #20
   22472:	44a4      	add	ip, r4
   22474:	18bb      	adds	r3, r7, r2
   22476:	4462      	add	r2, ip
   22478:	e002      	b.n	22480 <__mdiff+0x30>
   2247a:	429f      	cmp	r7, r3
   2247c:	d300      	bcc.n	22480 <__mdiff+0x30>
   2247e:	e070      	b.n	22562 <__mdiff+0x112>
   22480:	3b04      	subs	r3, #4
   22482:	3a04      	subs	r2, #4
   22484:	681e      	ldr	r6, [r3, #0]
   22486:	6811      	ldr	r1, [r2, #0]
   22488:	428e      	cmp	r6, r1
   2248a:	d0f6      	beq.n	2247a <__mdiff+0x2a>
   2248c:	d300      	bcc.n	22490 <__mdiff+0x40>
   2248e:	e071      	b.n	22574 <__mdiff+0x124>
   22490:	4643      	mov	r3, r8
   22492:	003e      	movs	r6, r7
   22494:	46a0      	mov	r8, r4
   22496:	4667      	mov	r7, ip
   22498:	001c      	movs	r4, r3
   2249a:	2501      	movs	r5, #1
   2249c:	e006      	b.n	224ac <__mdiff+0x5c>
   2249e:	2d00      	cmp	r5, #0
   224a0:	db6a      	blt.n	22578 <__mdiff+0x128>
   224a2:	4647      	mov	r7, r8
   224a4:	0026      	movs	r6, r4
   224a6:	2500      	movs	r5, #0
   224a8:	3714      	adds	r7, #20
   224aa:	3614      	adds	r6, #20
   224ac:	4643      	mov	r3, r8
   224ae:	6859      	ldr	r1, [r3, #4]
   224b0:	f7ff fd80 	bl	21fb4 <_Balloc>
   224b4:	4643      	mov	r3, r8
   224b6:	4681      	mov	r9, r0
   224b8:	60c5      	str	r5, [r0, #12]
   224ba:	6918      	ldr	r0, [r3, #16]
   224bc:	464d      	mov	r5, r9
   224be:	0083      	lsls	r3, r0, #2
   224c0:	469c      	mov	ip, r3
   224c2:	6923      	ldr	r3, [r4, #16]
   224c4:	44bc      	add	ip, r7
   224c6:	009b      	lsls	r3, r3, #2
   224c8:	4698      	mov	r8, r3
   224ca:	2300      	movs	r3, #0
   224cc:	44b0      	add	r8, r6
   224ce:	3514      	adds	r5, #20
   224d0:	469a      	mov	sl, r3
   224d2:	e000      	b.n	224d6 <__mdiff+0x86>
   224d4:	0027      	movs	r7, r4
   224d6:	ce04      	ldmia	r6!, {r2}
   224d8:	003c      	movs	r4, r7
   224da:	4693      	mov	fp, r2
   224dc:	4659      	mov	r1, fp
   224de:	cc08      	ldmia	r4!, {r3}
   224e0:	0409      	lsls	r1, r1, #16
   224e2:	041a      	lsls	r2, r3, #16
   224e4:	0c12      	lsrs	r2, r2, #16
   224e6:	4452      	add	r2, sl
   224e8:	0c09      	lsrs	r1, r1, #16
   224ea:	1a52      	subs	r2, r2, r1
   224ec:	0c19      	lsrs	r1, r3, #16
   224ee:	465b      	mov	r3, fp
   224f0:	0c1b      	lsrs	r3, r3, #16
   224f2:	1acb      	subs	r3, r1, r3
   224f4:	1411      	asrs	r1, r2, #16
   224f6:	185b      	adds	r3, r3, r1
   224f8:	0412      	lsls	r2, r2, #16
   224fa:	1419      	asrs	r1, r3, #16
   224fc:	0c12      	lsrs	r2, r2, #16
   224fe:	041b      	lsls	r3, r3, #16
   22500:	468a      	mov	sl, r1
   22502:	4313      	orrs	r3, r2
   22504:	1d29      	adds	r1, r5, #4
   22506:	602b      	str	r3, [r5, #0]
   22508:	000d      	movs	r5, r1
   2250a:	45b0      	cmp	r8, r6
   2250c:	d8e2      	bhi.n	224d4 <__mdiff+0x84>
   2250e:	45a4      	cmp	ip, r4
   22510:	d916      	bls.n	22540 <__mdiff+0xf0>
   22512:	cc08      	ldmia	r4!, {r3}
   22514:	041a      	lsls	r2, r3, #16
   22516:	0c12      	lsrs	r2, r2, #16
   22518:	4452      	add	r2, sl
   2251a:	1416      	asrs	r6, r2, #16
   2251c:	0c1b      	lsrs	r3, r3, #16
   2251e:	199b      	adds	r3, r3, r6
   22520:	0412      	lsls	r2, r2, #16
   22522:	141e      	asrs	r6, r3, #16
   22524:	0c12      	lsrs	r2, r2, #16
   22526:	041b      	lsls	r3, r3, #16
   22528:	4313      	orrs	r3, r2
   2252a:	46b2      	mov	sl, r6
   2252c:	c508      	stmia	r5!, {r3}
   2252e:	45a4      	cmp	ip, r4
   22530:	d8ef      	bhi.n	22512 <__mdiff+0xc2>
   22532:	4662      	mov	r2, ip
   22534:	2403      	movs	r4, #3
   22536:	1bd2      	subs	r2, r2, r7
   22538:	3a05      	subs	r2, #5
   2253a:	43a2      	bics	r2, r4
   2253c:	3204      	adds	r2, #4
   2253e:	1889      	adds	r1, r1, r2
   22540:	3904      	subs	r1, #4
   22542:	2b00      	cmp	r3, #0
   22544:	d104      	bne.n	22550 <__mdiff+0x100>
   22546:	3904      	subs	r1, #4
   22548:	680b      	ldr	r3, [r1, #0]
   2254a:	3801      	subs	r0, #1
   2254c:	2b00      	cmp	r3, #0
   2254e:	d0fa      	beq.n	22546 <__mdiff+0xf6>
   22550:	464b      	mov	r3, r9
   22552:	6118      	str	r0, [r3, #16]
   22554:	4648      	mov	r0, r9
   22556:	bc3c      	pop	{r2, r3, r4, r5}
   22558:	4690      	mov	r8, r2
   2255a:	4699      	mov	r9, r3
   2255c:	46a2      	mov	sl, r4
   2255e:	46ab      	mov	fp, r5
   22560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22562:	2100      	movs	r1, #0
   22564:	f7ff fd26 	bl	21fb4 <_Balloc>
   22568:	2301      	movs	r3, #1
   2256a:	6103      	str	r3, [r0, #16]
   2256c:	2300      	movs	r3, #0
   2256e:	4681      	mov	r9, r0
   22570:	6143      	str	r3, [r0, #20]
   22572:	e7ef      	b.n	22554 <__mdiff+0x104>
   22574:	4666      	mov	r6, ip
   22576:	e799      	b.n	224ac <__mdiff+0x5c>
   22578:	0027      	movs	r7, r4
   2257a:	000e      	movs	r6, r1
   2257c:	46a0      	mov	r8, r4
   2257e:	3714      	adds	r7, #20
   22580:	3614      	adds	r6, #20
   22582:	000c      	movs	r4, r1
   22584:	2501      	movs	r5, #1
   22586:	e791      	b.n	224ac <__mdiff+0x5c>

00022588 <__d2b>:
   22588:	b5f0      	push	{r4, r5, r6, r7, lr}
   2258a:	2101      	movs	r1, #1
   2258c:	001c      	movs	r4, r3
   2258e:	b083      	sub	sp, #12
   22590:	9e08      	ldr	r6, [sp, #32]
   22592:	0015      	movs	r5, r2
   22594:	f7ff fd0e 	bl	21fb4 <_Balloc>
   22598:	0323      	lsls	r3, r4, #12
   2259a:	0064      	lsls	r4, r4, #1
   2259c:	0007      	movs	r7, r0
   2259e:	0b1b      	lsrs	r3, r3, #12
   225a0:	0d64      	lsrs	r4, r4, #21
   225a2:	d002      	beq.n	225aa <__d2b+0x22>
   225a4:	2280      	movs	r2, #128	; 0x80
   225a6:	0352      	lsls	r2, r2, #13
   225a8:	4313      	orrs	r3, r2
   225aa:	9301      	str	r3, [sp, #4]
   225ac:	2d00      	cmp	r5, #0
   225ae:	d019      	beq.n	225e4 <__d2b+0x5c>
   225b0:	4668      	mov	r0, sp
   225b2:	9500      	str	r5, [sp, #0]
   225b4:	f7ff fd90 	bl	220d8 <__lo0bits>
   225b8:	2800      	cmp	r0, #0
   225ba:	d130      	bne.n	2261e <__d2b+0x96>
   225bc:	9b00      	ldr	r3, [sp, #0]
   225be:	617b      	str	r3, [r7, #20]
   225c0:	9b01      	ldr	r3, [sp, #4]
   225c2:	61bb      	str	r3, [r7, #24]
   225c4:	1e5a      	subs	r2, r3, #1
   225c6:	4193      	sbcs	r3, r2
   225c8:	1c5d      	adds	r5, r3, #1
   225ca:	613d      	str	r5, [r7, #16]
   225cc:	2c00      	cmp	r4, #0
   225ce:	d014      	beq.n	225fa <__d2b+0x72>
   225d0:	4b19      	ldr	r3, [pc, #100]	; (22638 <__d2b+0xb0>)
   225d2:	469c      	mov	ip, r3
   225d4:	2335      	movs	r3, #53	; 0x35
   225d6:	4464      	add	r4, ip
   225d8:	1824      	adds	r4, r4, r0
   225da:	1a18      	subs	r0, r3, r0
   225dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   225de:	6034      	str	r4, [r6, #0]
   225e0:	6018      	str	r0, [r3, #0]
   225e2:	e019      	b.n	22618 <__d2b+0x90>
   225e4:	a801      	add	r0, sp, #4
   225e6:	f7ff fd77 	bl	220d8 <__lo0bits>
   225ea:	9b01      	ldr	r3, [sp, #4]
   225ec:	3020      	adds	r0, #32
   225ee:	617b      	str	r3, [r7, #20]
   225f0:	2301      	movs	r3, #1
   225f2:	2501      	movs	r5, #1
   225f4:	613b      	str	r3, [r7, #16]
   225f6:	2c00      	cmp	r4, #0
   225f8:	d1ea      	bne.n	225d0 <__d2b+0x48>
   225fa:	4b10      	ldr	r3, [pc, #64]	; (2263c <__d2b+0xb4>)
   225fc:	469c      	mov	ip, r3
   225fe:	4b10      	ldr	r3, [pc, #64]	; (22640 <__d2b+0xb8>)
   22600:	4460      	add	r0, ip
   22602:	18eb      	adds	r3, r5, r3
   22604:	009b      	lsls	r3, r3, #2
   22606:	18fb      	adds	r3, r7, r3
   22608:	6030      	str	r0, [r6, #0]
   2260a:	6958      	ldr	r0, [r3, #20]
   2260c:	f7ff fd4a 	bl	220a4 <__hi0bits>
   22610:	016b      	lsls	r3, r5, #5
   22612:	1a18      	subs	r0, r3, r0
   22614:	9b09      	ldr	r3, [sp, #36]	; 0x24
   22616:	6018      	str	r0, [r3, #0]
   22618:	0038      	movs	r0, r7
   2261a:	b003      	add	sp, #12
   2261c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2261e:	9b01      	ldr	r3, [sp, #4]
   22620:	2220      	movs	r2, #32
   22622:	0019      	movs	r1, r3
   22624:	1a12      	subs	r2, r2, r0
   22626:	4091      	lsls	r1, r2
   22628:	000a      	movs	r2, r1
   2262a:	40c3      	lsrs	r3, r0
   2262c:	9900      	ldr	r1, [sp, #0]
   2262e:	9301      	str	r3, [sp, #4]
   22630:	430a      	orrs	r2, r1
   22632:	617a      	str	r2, [r7, #20]
   22634:	e7c5      	b.n	225c2 <__d2b+0x3a>
   22636:	46c0      	nop			; (mov r8, r8)
   22638:	fffffbcd 	.word	0xfffffbcd
   2263c:	fffffbce 	.word	0xfffffbce
   22640:	3fffffff 	.word	0x3fffffff

00022644 <_sbrk_r>:
   22644:	2300      	movs	r3, #0
   22646:	b570      	push	{r4, r5, r6, lr}
   22648:	4c06      	ldr	r4, [pc, #24]	; (22664 <_sbrk_r+0x20>)
   2264a:	0005      	movs	r5, r0
   2264c:	0008      	movs	r0, r1
   2264e:	6023      	str	r3, [r4, #0]
   22650:	f7e1 fb3c 	bl	3ccc <_sbrk>
   22654:	1c43      	adds	r3, r0, #1
   22656:	d000      	beq.n	2265a <_sbrk_r+0x16>
   22658:	bd70      	pop	{r4, r5, r6, pc}
   2265a:	6823      	ldr	r3, [r4, #0]
   2265c:	2b00      	cmp	r3, #0
   2265e:	d0fb      	beq.n	22658 <_sbrk_r+0x14>
   22660:	602b      	str	r3, [r5, #0]
   22662:	e7f9      	b.n	22658 <_sbrk_r+0x14>
   22664:	2000563c 	.word	0x2000563c

00022668 <__ssprint_r>:
   22668:	b5f0      	push	{r4, r5, r6, r7, lr}
   2266a:	4657      	mov	r7, sl
   2266c:	464e      	mov	r6, r9
   2266e:	46de      	mov	lr, fp
   22670:	4645      	mov	r5, r8
   22672:	b5e0      	push	{r5, r6, r7, lr}
   22674:	6893      	ldr	r3, [r2, #8]
   22676:	b083      	sub	sp, #12
   22678:	9001      	str	r0, [sp, #4]
   2267a:	000e      	movs	r6, r1
   2267c:	4692      	mov	sl, r2
   2267e:	2b00      	cmp	r3, #0
   22680:	d070      	beq.n	22764 <__ssprint_r+0xfc>
   22682:	688d      	ldr	r5, [r1, #8]
   22684:	6813      	ldr	r3, [r2, #0]
   22686:	002c      	movs	r4, r5
   22688:	6808      	ldr	r0, [r1, #0]
   2268a:	001d      	movs	r5, r3
   2268c:	e046      	b.n	2271c <__ssprint_r+0xb4>
   2268e:	2290      	movs	r2, #144	; 0x90
   22690:	89b3      	ldrh	r3, [r6, #12]
   22692:	00d2      	lsls	r2, r2, #3
   22694:	4213      	tst	r3, r2
   22696:	d030      	beq.n	226fa <__ssprint_r+0x92>
   22698:	6931      	ldr	r1, [r6, #16]
   2269a:	1a42      	subs	r2, r0, r1
   2269c:	4693      	mov	fp, r2
   2269e:	6970      	ldr	r0, [r6, #20]
   226a0:	0042      	lsls	r2, r0, #1
   226a2:	1812      	adds	r2, r2, r0
   226a4:	0fd0      	lsrs	r0, r2, #31
   226a6:	1882      	adds	r2, r0, r2
   226a8:	1052      	asrs	r2, r2, #1
   226aa:	4690      	mov	r8, r2
   226ac:	465a      	mov	r2, fp
   226ae:	1c50      	adds	r0, r2, #1
   226b0:	19c0      	adds	r0, r0, r7
   226b2:	4642      	mov	r2, r8
   226b4:	4540      	cmp	r0, r8
   226b6:	d901      	bls.n	226bc <__ssprint_r+0x54>
   226b8:	4680      	mov	r8, r0
   226ba:	0002      	movs	r2, r0
   226bc:	2080      	movs	r0, #128	; 0x80
   226be:	00c0      	lsls	r0, r0, #3
   226c0:	4203      	tst	r3, r0
   226c2:	d038      	beq.n	22736 <__ssprint_r+0xce>
   226c4:	0011      	movs	r1, r2
   226c6:	9801      	ldr	r0, [sp, #4]
   226c8:	f7ff f970 	bl	219ac <_malloc_r>
   226cc:	1e04      	subs	r4, r0, #0
   226ce:	d054      	beq.n	2277a <__ssprint_r+0x112>
   226d0:	465a      	mov	r2, fp
   226d2:	6931      	ldr	r1, [r6, #16]
   226d4:	f7fc fc88 	bl	1efe8 <memcpy>
   226d8:	89b3      	ldrh	r3, [r6, #12]
   226da:	4a2a      	ldr	r2, [pc, #168]	; (22784 <__ssprint_r+0x11c>)
   226dc:	4013      	ands	r3, r2
   226de:	2280      	movs	r2, #128	; 0x80
   226e0:	4313      	orrs	r3, r2
   226e2:	81b3      	strh	r3, [r6, #12]
   226e4:	4643      	mov	r3, r8
   226e6:	0020      	movs	r0, r4
   226e8:	465a      	mov	r2, fp
   226ea:	6134      	str	r4, [r6, #16]
   226ec:	46b8      	mov	r8, r7
   226ee:	003c      	movs	r4, r7
   226f0:	4458      	add	r0, fp
   226f2:	6173      	str	r3, [r6, #20]
   226f4:	1a9b      	subs	r3, r3, r2
   226f6:	6030      	str	r0, [r6, #0]
   226f8:	60b3      	str	r3, [r6, #8]
   226fa:	4642      	mov	r2, r8
   226fc:	4649      	mov	r1, r9
   226fe:	f000 fa2d 	bl	22b5c <memmove>
   22702:	68b3      	ldr	r3, [r6, #8]
   22704:	1b1c      	subs	r4, r3, r4
   22706:	6833      	ldr	r3, [r6, #0]
   22708:	60b4      	str	r4, [r6, #8]
   2270a:	4443      	add	r3, r8
   2270c:	6033      	str	r3, [r6, #0]
   2270e:	0018      	movs	r0, r3
   22710:	4653      	mov	r3, sl
   22712:	689b      	ldr	r3, [r3, #8]
   22714:	1bdf      	subs	r7, r3, r7
   22716:	4653      	mov	r3, sl
   22718:	609f      	str	r7, [r3, #8]
   2271a:	d023      	beq.n	22764 <__ssprint_r+0xfc>
   2271c:	686f      	ldr	r7, [r5, #4]
   2271e:	002b      	movs	r3, r5
   22720:	3508      	adds	r5, #8
   22722:	2f00      	cmp	r7, #0
   22724:	d0fa      	beq.n	2271c <__ssprint_r+0xb4>
   22726:	681b      	ldr	r3, [r3, #0]
   22728:	46a0      	mov	r8, r4
   2272a:	4699      	mov	r9, r3
   2272c:	42a7      	cmp	r7, r4
   2272e:	d2ae      	bcs.n	2268e <__ssprint_r+0x26>
   22730:	003c      	movs	r4, r7
   22732:	46b8      	mov	r8, r7
   22734:	e7e1      	b.n	226fa <__ssprint_r+0x92>
   22736:	9801      	ldr	r0, [sp, #4]
   22738:	f000 fa60 	bl	22bfc <_realloc_r>
   2273c:	1e04      	subs	r4, r0, #0
   2273e:	d1d1      	bne.n	226e4 <__ssprint_r+0x7c>
   22740:	9c01      	ldr	r4, [sp, #4]
   22742:	6931      	ldr	r1, [r6, #16]
   22744:	0020      	movs	r0, r4
   22746:	f000 f915 	bl	22974 <_free_r>
   2274a:	230c      	movs	r3, #12
   2274c:	6023      	str	r3, [r4, #0]
   2274e:	2240      	movs	r2, #64	; 0x40
   22750:	89b3      	ldrh	r3, [r6, #12]
   22752:	2001      	movs	r0, #1
   22754:	4313      	orrs	r3, r2
   22756:	81b3      	strh	r3, [r6, #12]
   22758:	4652      	mov	r2, sl
   2275a:	2300      	movs	r3, #0
   2275c:	4240      	negs	r0, r0
   2275e:	6093      	str	r3, [r2, #8]
   22760:	6053      	str	r3, [r2, #4]
   22762:	e003      	b.n	2276c <__ssprint_r+0x104>
   22764:	2300      	movs	r3, #0
   22766:	4652      	mov	r2, sl
   22768:	2000      	movs	r0, #0
   2276a:	6053      	str	r3, [r2, #4]
   2276c:	b003      	add	sp, #12
   2276e:	bc3c      	pop	{r2, r3, r4, r5}
   22770:	4690      	mov	r8, r2
   22772:	4699      	mov	r9, r3
   22774:	46a2      	mov	sl, r4
   22776:	46ab      	mov	fp, r5
   22778:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2277a:	230c      	movs	r3, #12
   2277c:	9a01      	ldr	r2, [sp, #4]
   2277e:	6013      	str	r3, [r2, #0]
   22780:	e7e5      	b.n	2274e <__ssprint_r+0xe6>
   22782:	46c0      	nop			; (mov r8, r8)
   22784:	fffffb7f 	.word	0xfffffb7f

00022788 <__register_exitproc>:
   22788:	b5f0      	push	{r4, r5, r6, r7, lr}
   2278a:	464e      	mov	r6, r9
   2278c:	4645      	mov	r5, r8
   2278e:	46de      	mov	lr, fp
   22790:	4657      	mov	r7, sl
   22792:	b5e0      	push	{r5, r6, r7, lr}
   22794:	4d36      	ldr	r5, [pc, #216]	; (22870 <__register_exitproc+0xe8>)
   22796:	b083      	sub	sp, #12
   22798:	0006      	movs	r6, r0
   2279a:	6828      	ldr	r0, [r5, #0]
   2279c:	4698      	mov	r8, r3
   2279e:	000f      	movs	r7, r1
   227a0:	4691      	mov	r9, r2
   227a2:	f7ff f8ff 	bl	219a4 <__retarget_lock_acquire_recursive>
   227a6:	4b33      	ldr	r3, [pc, #204]	; (22874 <__register_exitproc+0xec>)
   227a8:	681c      	ldr	r4, [r3, #0]
   227aa:	23a4      	movs	r3, #164	; 0xa4
   227ac:	005b      	lsls	r3, r3, #1
   227ae:	58e0      	ldr	r0, [r4, r3]
   227b0:	2800      	cmp	r0, #0
   227b2:	d052      	beq.n	2285a <__register_exitproc+0xd2>
   227b4:	6843      	ldr	r3, [r0, #4]
   227b6:	2b1f      	cmp	r3, #31
   227b8:	dc13      	bgt.n	227e2 <__register_exitproc+0x5a>
   227ba:	1c5a      	adds	r2, r3, #1
   227bc:	9201      	str	r2, [sp, #4]
   227be:	2e00      	cmp	r6, #0
   227c0:	d128      	bne.n	22814 <__register_exitproc+0x8c>
   227c2:	9a01      	ldr	r2, [sp, #4]
   227c4:	3302      	adds	r3, #2
   227c6:	009b      	lsls	r3, r3, #2
   227c8:	6042      	str	r2, [r0, #4]
   227ca:	501f      	str	r7, [r3, r0]
   227cc:	6828      	ldr	r0, [r5, #0]
   227ce:	f7ff f8eb 	bl	219a8 <__retarget_lock_release_recursive>
   227d2:	2000      	movs	r0, #0
   227d4:	b003      	add	sp, #12
   227d6:	bc3c      	pop	{r2, r3, r4, r5}
   227d8:	4690      	mov	r8, r2
   227da:	4699      	mov	r9, r3
   227dc:	46a2      	mov	sl, r4
   227de:	46ab      	mov	fp, r5
   227e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   227e2:	4b25      	ldr	r3, [pc, #148]	; (22878 <__register_exitproc+0xf0>)
   227e4:	2b00      	cmp	r3, #0
   227e6:	d03d      	beq.n	22864 <__register_exitproc+0xdc>
   227e8:	20c8      	movs	r0, #200	; 0xc8
   227ea:	0040      	lsls	r0, r0, #1
   227ec:	e000      	b.n	227f0 <__register_exitproc+0x68>
   227ee:	bf00      	nop
   227f0:	2800      	cmp	r0, #0
   227f2:	d037      	beq.n	22864 <__register_exitproc+0xdc>
   227f4:	22a4      	movs	r2, #164	; 0xa4
   227f6:	2300      	movs	r3, #0
   227f8:	0052      	lsls	r2, r2, #1
   227fa:	58a1      	ldr	r1, [r4, r2]
   227fc:	6043      	str	r3, [r0, #4]
   227fe:	6001      	str	r1, [r0, #0]
   22800:	50a0      	str	r0, [r4, r2]
   22802:	3240      	adds	r2, #64	; 0x40
   22804:	5083      	str	r3, [r0, r2]
   22806:	3204      	adds	r2, #4
   22808:	5083      	str	r3, [r0, r2]
   2280a:	3301      	adds	r3, #1
   2280c:	9301      	str	r3, [sp, #4]
   2280e:	2300      	movs	r3, #0
   22810:	2e00      	cmp	r6, #0
   22812:	d0d6      	beq.n	227c2 <__register_exitproc+0x3a>
   22814:	009a      	lsls	r2, r3, #2
   22816:	4692      	mov	sl, r2
   22818:	4482      	add	sl, r0
   2281a:	464a      	mov	r2, r9
   2281c:	2188      	movs	r1, #136	; 0x88
   2281e:	4654      	mov	r4, sl
   22820:	5062      	str	r2, [r4, r1]
   22822:	22c4      	movs	r2, #196	; 0xc4
   22824:	0052      	lsls	r2, r2, #1
   22826:	4691      	mov	r9, r2
   22828:	4481      	add	r9, r0
   2282a:	464a      	mov	r2, r9
   2282c:	3987      	subs	r1, #135	; 0x87
   2282e:	4099      	lsls	r1, r3
   22830:	6812      	ldr	r2, [r2, #0]
   22832:	468b      	mov	fp, r1
   22834:	430a      	orrs	r2, r1
   22836:	4694      	mov	ip, r2
   22838:	464a      	mov	r2, r9
   2283a:	4661      	mov	r1, ip
   2283c:	6011      	str	r1, [r2, #0]
   2283e:	2284      	movs	r2, #132	; 0x84
   22840:	4641      	mov	r1, r8
   22842:	0052      	lsls	r2, r2, #1
   22844:	50a1      	str	r1, [r4, r2]
   22846:	2e02      	cmp	r6, #2
   22848:	d1bb      	bne.n	227c2 <__register_exitproc+0x3a>
   2284a:	0002      	movs	r2, r0
   2284c:	465c      	mov	r4, fp
   2284e:	328d      	adds	r2, #141	; 0x8d
   22850:	32ff      	adds	r2, #255	; 0xff
   22852:	6811      	ldr	r1, [r2, #0]
   22854:	430c      	orrs	r4, r1
   22856:	6014      	str	r4, [r2, #0]
   22858:	e7b3      	b.n	227c2 <__register_exitproc+0x3a>
   2285a:	0020      	movs	r0, r4
   2285c:	304d      	adds	r0, #77	; 0x4d
   2285e:	30ff      	adds	r0, #255	; 0xff
   22860:	50e0      	str	r0, [r4, r3]
   22862:	e7a7      	b.n	227b4 <__register_exitproc+0x2c>
   22864:	6828      	ldr	r0, [r5, #0]
   22866:	f7ff f89f 	bl	219a8 <__retarget_lock_release_recursive>
   2286a:	2001      	movs	r0, #1
   2286c:	4240      	negs	r0, r0
   2286e:	e7b1      	b.n	227d4 <__register_exitproc+0x4c>
   22870:	200007b8 	.word	0x200007b8
   22874:	000251d0 	.word	0x000251d0
   22878:	00000000 	.word	0x00000000

0002287c <_calloc_r>:
   2287c:	b510      	push	{r4, lr}
   2287e:	4351      	muls	r1, r2
   22880:	f7ff f894 	bl	219ac <_malloc_r>
   22884:	1e04      	subs	r4, r0, #0
   22886:	d01c      	beq.n	228c2 <_calloc_r+0x46>
   22888:	0003      	movs	r3, r0
   2288a:	3b08      	subs	r3, #8
   2288c:	685a      	ldr	r2, [r3, #4]
   2288e:	2303      	movs	r3, #3
   22890:	439a      	bics	r2, r3
   22892:	3a04      	subs	r2, #4
   22894:	2a24      	cmp	r2, #36	; 0x24
   22896:	d816      	bhi.n	228c6 <_calloc_r+0x4a>
   22898:	0003      	movs	r3, r0
   2289a:	2a13      	cmp	r2, #19
   2289c:	d90d      	bls.n	228ba <_calloc_r+0x3e>
   2289e:	2100      	movs	r1, #0
   228a0:	3308      	adds	r3, #8
   228a2:	6001      	str	r1, [r0, #0]
   228a4:	6041      	str	r1, [r0, #4]
   228a6:	2a1b      	cmp	r2, #27
   228a8:	d907      	bls.n	228ba <_calloc_r+0x3e>
   228aa:	6081      	str	r1, [r0, #8]
   228ac:	60c1      	str	r1, [r0, #12]
   228ae:	2a24      	cmp	r2, #36	; 0x24
   228b0:	d10d      	bne.n	228ce <_calloc_r+0x52>
   228b2:	0003      	movs	r3, r0
   228b4:	6101      	str	r1, [r0, #16]
   228b6:	3318      	adds	r3, #24
   228b8:	6141      	str	r1, [r0, #20]
   228ba:	2200      	movs	r2, #0
   228bc:	601a      	str	r2, [r3, #0]
   228be:	605a      	str	r2, [r3, #4]
   228c0:	609a      	str	r2, [r3, #8]
   228c2:	0020      	movs	r0, r4
   228c4:	bd10      	pop	{r4, pc}
   228c6:	2100      	movs	r1, #0
   228c8:	f7fc fbd0 	bl	1f06c <memset>
   228cc:	e7f9      	b.n	228c2 <_calloc_r+0x46>
   228ce:	0003      	movs	r3, r0
   228d0:	3310      	adds	r3, #16
   228d2:	e7f2      	b.n	228ba <_calloc_r+0x3e>

000228d4 <_malloc_trim_r>:
   228d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   228d6:	000c      	movs	r4, r1
   228d8:	0006      	movs	r6, r0
   228da:	f7ff fb5b 	bl	21f94 <__malloc_lock>
   228de:	4f20      	ldr	r7, [pc, #128]	; (22960 <_malloc_trim_r+0x8c>)
   228e0:	68bb      	ldr	r3, [r7, #8]
   228e2:	685d      	ldr	r5, [r3, #4]
   228e4:	2303      	movs	r3, #3
   228e6:	439d      	bics	r5, r3
   228e8:	4b1e      	ldr	r3, [pc, #120]	; (22964 <_malloc_trim_r+0x90>)
   228ea:	1b2c      	subs	r4, r5, r4
   228ec:	469c      	mov	ip, r3
   228ee:	4464      	add	r4, ip
   228f0:	0b24      	lsrs	r4, r4, #12
   228f2:	4b1d      	ldr	r3, [pc, #116]	; (22968 <_malloc_trim_r+0x94>)
   228f4:	3c01      	subs	r4, #1
   228f6:	0324      	lsls	r4, r4, #12
   228f8:	429c      	cmp	r4, r3
   228fa:	dd07      	ble.n	2290c <_malloc_trim_r+0x38>
   228fc:	2100      	movs	r1, #0
   228fe:	0030      	movs	r0, r6
   22900:	f7ff fea0 	bl	22644 <_sbrk_r>
   22904:	68bb      	ldr	r3, [r7, #8]
   22906:	195b      	adds	r3, r3, r5
   22908:	4298      	cmp	r0, r3
   2290a:	d004      	beq.n	22916 <_malloc_trim_r+0x42>
   2290c:	0030      	movs	r0, r6
   2290e:	f7ff fb49 	bl	21fa4 <__malloc_unlock>
   22912:	2000      	movs	r0, #0
   22914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22916:	4261      	negs	r1, r4
   22918:	0030      	movs	r0, r6
   2291a:	f7ff fe93 	bl	22644 <_sbrk_r>
   2291e:	1c43      	adds	r3, r0, #1
   22920:	d00d      	beq.n	2293e <_malloc_trim_r+0x6a>
   22922:	2201      	movs	r2, #1
   22924:	68bb      	ldr	r3, [r7, #8]
   22926:	1b2d      	subs	r5, r5, r4
   22928:	4315      	orrs	r5, r2
   2292a:	605d      	str	r5, [r3, #4]
   2292c:	4b0f      	ldr	r3, [pc, #60]	; (2296c <_malloc_trim_r+0x98>)
   2292e:	0030      	movs	r0, r6
   22930:	681a      	ldr	r2, [r3, #0]
   22932:	1b14      	subs	r4, r2, r4
   22934:	601c      	str	r4, [r3, #0]
   22936:	f7ff fb35 	bl	21fa4 <__malloc_unlock>
   2293a:	2001      	movs	r0, #1
   2293c:	e7ea      	b.n	22914 <_malloc_trim_r+0x40>
   2293e:	2100      	movs	r1, #0
   22940:	0030      	movs	r0, r6
   22942:	f7ff fe7f 	bl	22644 <_sbrk_r>
   22946:	68ba      	ldr	r2, [r7, #8]
   22948:	1a83      	subs	r3, r0, r2
   2294a:	2b0f      	cmp	r3, #15
   2294c:	ddde      	ble.n	2290c <_malloc_trim_r+0x38>
   2294e:	4908      	ldr	r1, [pc, #32]	; (22970 <_malloc_trim_r+0x9c>)
   22950:	6809      	ldr	r1, [r1, #0]
   22952:	1a40      	subs	r0, r0, r1
   22954:	4905      	ldr	r1, [pc, #20]	; (2296c <_malloc_trim_r+0x98>)
   22956:	6008      	str	r0, [r1, #0]
   22958:	2101      	movs	r1, #1
   2295a:	430b      	orrs	r3, r1
   2295c:	6053      	str	r3, [r2, #4]
   2295e:	e7d5      	b.n	2290c <_malloc_trim_r+0x38>
   22960:	200007bc 	.word	0x200007bc
   22964:	00000fef 	.word	0x00000fef
   22968:	00000fff 	.word	0x00000fff
   2296c:	20000fc4 	.word	0x20000fc4
   22970:	20000bc4 	.word	0x20000bc4

00022974 <_free_r>:
   22974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22976:	0004      	movs	r4, r0
   22978:	1e0d      	subs	r5, r1, #0
   2297a:	d03c      	beq.n	229f6 <_free_r+0x82>
   2297c:	f7ff fb0a 	bl	21f94 <__malloc_lock>
   22980:	0029      	movs	r1, r5
   22982:	3908      	subs	r1, #8
   22984:	6848      	ldr	r0, [r1, #4]
   22986:	2301      	movs	r3, #1
   22988:	0005      	movs	r5, r0
   2298a:	2603      	movs	r6, #3
   2298c:	439d      	bics	r5, r3
   2298e:	194a      	adds	r2, r1, r5
   22990:	469c      	mov	ip, r3
   22992:	4f61      	ldr	r7, [pc, #388]	; (22b18 <_free_r+0x1a4>)
   22994:	6853      	ldr	r3, [r2, #4]
   22996:	43b3      	bics	r3, r6
   22998:	68be      	ldr	r6, [r7, #8]
   2299a:	42b2      	cmp	r2, r6
   2299c:	d056      	beq.n	22a4c <_free_r+0xd8>
   2299e:	4666      	mov	r6, ip
   229a0:	6053      	str	r3, [r2, #4]
   229a2:	4206      	tst	r6, r0
   229a4:	d10a      	bne.n	229bc <_free_r+0x48>
   229a6:	003e      	movs	r6, r7
   229a8:	6808      	ldr	r0, [r1, #0]
   229aa:	3608      	adds	r6, #8
   229ac:	1a09      	subs	r1, r1, r0
   229ae:	182d      	adds	r5, r5, r0
   229b0:	6888      	ldr	r0, [r1, #8]
   229b2:	42b0      	cmp	r0, r6
   229b4:	d065      	beq.n	22a82 <_free_r+0x10e>
   229b6:	68ce      	ldr	r6, [r1, #12]
   229b8:	60c6      	str	r6, [r0, #12]
   229ba:	60b0      	str	r0, [r6, #8]
   229bc:	2001      	movs	r0, #1
   229be:	18d6      	adds	r6, r2, r3
   229c0:	6876      	ldr	r6, [r6, #4]
   229c2:	4206      	tst	r6, r0
   229c4:	d033      	beq.n	22a2e <_free_r+0xba>
   229c6:	4b55      	ldr	r3, [pc, #340]	; (22b1c <_free_r+0x1a8>)
   229c8:	4328      	orrs	r0, r5
   229ca:	6048      	str	r0, [r1, #4]
   229cc:	514d      	str	r5, [r1, r5]
   229ce:	429d      	cmp	r5, r3
   229d0:	d812      	bhi.n	229f8 <_free_r+0x84>
   229d2:	08ed      	lsrs	r5, r5, #3
   229d4:	3bff      	subs	r3, #255	; 0xff
   229d6:	10aa      	asrs	r2, r5, #2
   229d8:	3bff      	subs	r3, #255	; 0xff
   229da:	4093      	lsls	r3, r2
   229dc:	687a      	ldr	r2, [r7, #4]
   229de:	00ed      	lsls	r5, r5, #3
   229e0:	4313      	orrs	r3, r2
   229e2:	607b      	str	r3, [r7, #4]
   229e4:	19ef      	adds	r7, r5, r7
   229e6:	68bb      	ldr	r3, [r7, #8]
   229e8:	60cf      	str	r7, [r1, #12]
   229ea:	608b      	str	r3, [r1, #8]
   229ec:	60b9      	str	r1, [r7, #8]
   229ee:	60d9      	str	r1, [r3, #12]
   229f0:	0020      	movs	r0, r4
   229f2:	f7ff fad7 	bl	21fa4 <__malloc_unlock>
   229f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   229f8:	0a68      	lsrs	r0, r5, #9
   229fa:	2804      	cmp	r0, #4
   229fc:	d850      	bhi.n	22aa0 <_free_r+0x12c>
   229fe:	09a8      	lsrs	r0, r5, #6
   22a00:	0002      	movs	r2, r0
   22a02:	3039      	adds	r0, #57	; 0x39
   22a04:	3238      	adds	r2, #56	; 0x38
   22a06:	00c0      	lsls	r0, r0, #3
   22a08:	1838      	adds	r0, r7, r0
   22a0a:	3808      	subs	r0, #8
   22a0c:	6883      	ldr	r3, [r0, #8]
   22a0e:	2603      	movs	r6, #3
   22a10:	4298      	cmp	r0, r3
   22a12:	d04c      	beq.n	22aae <_free_r+0x13a>
   22a14:	685a      	ldr	r2, [r3, #4]
   22a16:	43b2      	bics	r2, r6
   22a18:	4295      	cmp	r5, r2
   22a1a:	d230      	bcs.n	22a7e <_free_r+0x10a>
   22a1c:	689b      	ldr	r3, [r3, #8]
   22a1e:	4298      	cmp	r0, r3
   22a20:	d1f8      	bne.n	22a14 <_free_r+0xa0>
   22a22:	68c3      	ldr	r3, [r0, #12]
   22a24:	60cb      	str	r3, [r1, #12]
   22a26:	6088      	str	r0, [r1, #8]
   22a28:	6099      	str	r1, [r3, #8]
   22a2a:	60c1      	str	r1, [r0, #12]
   22a2c:	e7e0      	b.n	229f0 <_free_r+0x7c>
   22a2e:	18ed      	adds	r5, r5, r3
   22a30:	4e3b      	ldr	r6, [pc, #236]	; (22b20 <_free_r+0x1ac>)
   22a32:	6893      	ldr	r3, [r2, #8]
   22a34:	42b3      	cmp	r3, r6
   22a36:	d042      	beq.n	22abe <_free_r+0x14a>
   22a38:	68d2      	ldr	r2, [r2, #12]
   22a3a:	4328      	orrs	r0, r5
   22a3c:	60da      	str	r2, [r3, #12]
   22a3e:	6093      	str	r3, [r2, #8]
   22a40:	4b36      	ldr	r3, [pc, #216]	; (22b1c <_free_r+0x1a8>)
   22a42:	6048      	str	r0, [r1, #4]
   22a44:	514d      	str	r5, [r1, r5]
   22a46:	429d      	cmp	r5, r3
   22a48:	d8d6      	bhi.n	229f8 <_free_r+0x84>
   22a4a:	e7c2      	b.n	229d2 <_free_r+0x5e>
   22a4c:	4662      	mov	r2, ip
   22a4e:	18eb      	adds	r3, r5, r3
   22a50:	4202      	tst	r2, r0
   22a52:	d106      	bne.n	22a62 <_free_r+0xee>
   22a54:	680a      	ldr	r2, [r1, #0]
   22a56:	1a89      	subs	r1, r1, r2
   22a58:	6888      	ldr	r0, [r1, #8]
   22a5a:	189b      	adds	r3, r3, r2
   22a5c:	68ca      	ldr	r2, [r1, #12]
   22a5e:	60c2      	str	r2, [r0, #12]
   22a60:	6090      	str	r0, [r2, #8]
   22a62:	2201      	movs	r2, #1
   22a64:	431a      	orrs	r2, r3
   22a66:	604a      	str	r2, [r1, #4]
   22a68:	4a2e      	ldr	r2, [pc, #184]	; (22b24 <_free_r+0x1b0>)
   22a6a:	60b9      	str	r1, [r7, #8]
   22a6c:	6812      	ldr	r2, [r2, #0]
   22a6e:	4293      	cmp	r3, r2
   22a70:	d3be      	bcc.n	229f0 <_free_r+0x7c>
   22a72:	4b2d      	ldr	r3, [pc, #180]	; (22b28 <_free_r+0x1b4>)
   22a74:	0020      	movs	r0, r4
   22a76:	6819      	ldr	r1, [r3, #0]
   22a78:	f7ff ff2c 	bl	228d4 <_malloc_trim_r>
   22a7c:	e7b8      	b.n	229f0 <_free_r+0x7c>
   22a7e:	0018      	movs	r0, r3
   22a80:	e7cf      	b.n	22a22 <_free_r+0xae>
   22a82:	4666      	mov	r6, ip
   22a84:	18d0      	adds	r0, r2, r3
   22a86:	6840      	ldr	r0, [r0, #4]
   22a88:	4230      	tst	r0, r6
   22a8a:	d13f      	bne.n	22b0c <_free_r+0x198>
   22a8c:	6890      	ldr	r0, [r2, #8]
   22a8e:	195d      	adds	r5, r3, r5
   22a90:	68d3      	ldr	r3, [r2, #12]
   22a92:	60c3      	str	r3, [r0, #12]
   22a94:	6098      	str	r0, [r3, #8]
   22a96:	4663      	mov	r3, ip
   22a98:	432b      	orrs	r3, r5
   22a9a:	604b      	str	r3, [r1, #4]
   22a9c:	514d      	str	r5, [r1, r5]
   22a9e:	e7a7      	b.n	229f0 <_free_r+0x7c>
   22aa0:	2814      	cmp	r0, #20
   22aa2:	d814      	bhi.n	22ace <_free_r+0x15a>
   22aa4:	0002      	movs	r2, r0
   22aa6:	305c      	adds	r0, #92	; 0x5c
   22aa8:	325b      	adds	r2, #91	; 0x5b
   22aaa:	00c0      	lsls	r0, r0, #3
   22aac:	e7ac      	b.n	22a08 <_free_r+0x94>
   22aae:	2301      	movs	r3, #1
   22ab0:	1092      	asrs	r2, r2, #2
   22ab2:	4093      	lsls	r3, r2
   22ab4:	687a      	ldr	r2, [r7, #4]
   22ab6:	4313      	orrs	r3, r2
   22ab8:	607b      	str	r3, [r7, #4]
   22aba:	0003      	movs	r3, r0
   22abc:	e7b2      	b.n	22a24 <_free_r+0xb0>
   22abe:	4328      	orrs	r0, r5
   22ac0:	60d9      	str	r1, [r3, #12]
   22ac2:	6099      	str	r1, [r3, #8]
   22ac4:	60cb      	str	r3, [r1, #12]
   22ac6:	608b      	str	r3, [r1, #8]
   22ac8:	6048      	str	r0, [r1, #4]
   22aca:	514d      	str	r5, [r1, r5]
   22acc:	e790      	b.n	229f0 <_free_r+0x7c>
   22ace:	2854      	cmp	r0, #84	; 0x54
   22ad0:	d805      	bhi.n	22ade <_free_r+0x16a>
   22ad2:	0b28      	lsrs	r0, r5, #12
   22ad4:	0002      	movs	r2, r0
   22ad6:	306f      	adds	r0, #111	; 0x6f
   22ad8:	326e      	adds	r2, #110	; 0x6e
   22ada:	00c0      	lsls	r0, r0, #3
   22adc:	e794      	b.n	22a08 <_free_r+0x94>
   22ade:	22aa      	movs	r2, #170	; 0xaa
   22ae0:	0052      	lsls	r2, r2, #1
   22ae2:	4290      	cmp	r0, r2
   22ae4:	d805      	bhi.n	22af2 <_free_r+0x17e>
   22ae6:	0be8      	lsrs	r0, r5, #15
   22ae8:	0002      	movs	r2, r0
   22aea:	3078      	adds	r0, #120	; 0x78
   22aec:	3277      	adds	r2, #119	; 0x77
   22aee:	00c0      	lsls	r0, r0, #3
   22af0:	e78a      	b.n	22a08 <_free_r+0x94>
   22af2:	4a0e      	ldr	r2, [pc, #56]	; (22b2c <_free_r+0x1b8>)
   22af4:	4290      	cmp	r0, r2
   22af6:	d805      	bhi.n	22b04 <_free_r+0x190>
   22af8:	0ca8      	lsrs	r0, r5, #18
   22afa:	0002      	movs	r2, r0
   22afc:	307d      	adds	r0, #125	; 0x7d
   22afe:	327c      	adds	r2, #124	; 0x7c
   22b00:	00c0      	lsls	r0, r0, #3
   22b02:	e781      	b.n	22a08 <_free_r+0x94>
   22b04:	20fe      	movs	r0, #254	; 0xfe
   22b06:	227e      	movs	r2, #126	; 0x7e
   22b08:	0080      	lsls	r0, r0, #2
   22b0a:	e77d      	b.n	22a08 <_free_r+0x94>
   22b0c:	4663      	mov	r3, ip
   22b0e:	432b      	orrs	r3, r5
   22b10:	604b      	str	r3, [r1, #4]
   22b12:	6015      	str	r5, [r2, #0]
   22b14:	e76c      	b.n	229f0 <_free_r+0x7c>
   22b16:	46c0      	nop			; (mov r8, r8)
   22b18:	200007bc 	.word	0x200007bc
   22b1c:	000001ff 	.word	0x000001ff
   22b20:	200007c4 	.word	0x200007c4
   22b24:	20000bc8 	.word	0x20000bc8
   22b28:	20000ff4 	.word	0x20000ff4
   22b2c:	00000554 	.word	0x00000554

00022b30 <__ascii_mbtowc>:
   22b30:	b082      	sub	sp, #8
   22b32:	2900      	cmp	r1, #0
   22b34:	d00a      	beq.n	22b4c <__ascii_mbtowc+0x1c>
   22b36:	2a00      	cmp	r2, #0
   22b38:	d00b      	beq.n	22b52 <__ascii_mbtowc+0x22>
   22b3a:	2b00      	cmp	r3, #0
   22b3c:	d00b      	beq.n	22b56 <__ascii_mbtowc+0x26>
   22b3e:	7813      	ldrb	r3, [r2, #0]
   22b40:	600b      	str	r3, [r1, #0]
   22b42:	7810      	ldrb	r0, [r2, #0]
   22b44:	1e43      	subs	r3, r0, #1
   22b46:	4198      	sbcs	r0, r3
   22b48:	b002      	add	sp, #8
   22b4a:	4770      	bx	lr
   22b4c:	a901      	add	r1, sp, #4
   22b4e:	2a00      	cmp	r2, #0
   22b50:	d1f3      	bne.n	22b3a <__ascii_mbtowc+0xa>
   22b52:	2000      	movs	r0, #0
   22b54:	e7f8      	b.n	22b48 <__ascii_mbtowc+0x18>
   22b56:	2002      	movs	r0, #2
   22b58:	4240      	negs	r0, r0
   22b5a:	e7f5      	b.n	22b48 <__ascii_mbtowc+0x18>

00022b5c <memmove>:
   22b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   22b5e:	4288      	cmp	r0, r1
   22b60:	d90a      	bls.n	22b78 <memmove+0x1c>
   22b62:	188b      	adds	r3, r1, r2
   22b64:	4298      	cmp	r0, r3
   22b66:	d207      	bcs.n	22b78 <memmove+0x1c>
   22b68:	1e53      	subs	r3, r2, #1
   22b6a:	2a00      	cmp	r2, #0
   22b6c:	d003      	beq.n	22b76 <memmove+0x1a>
   22b6e:	5cca      	ldrb	r2, [r1, r3]
   22b70:	54c2      	strb	r2, [r0, r3]
   22b72:	3b01      	subs	r3, #1
   22b74:	d2fb      	bcs.n	22b6e <memmove+0x12>
   22b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22b78:	0005      	movs	r5, r0
   22b7a:	2a0f      	cmp	r2, #15
   22b7c:	d808      	bhi.n	22b90 <memmove+0x34>
   22b7e:	2a00      	cmp	r2, #0
   22b80:	d0f9      	beq.n	22b76 <memmove+0x1a>
   22b82:	2300      	movs	r3, #0
   22b84:	5ccc      	ldrb	r4, [r1, r3]
   22b86:	54ec      	strb	r4, [r5, r3]
   22b88:	3301      	adds	r3, #1
   22b8a:	4293      	cmp	r3, r2
   22b8c:	d1fa      	bne.n	22b84 <memmove+0x28>
   22b8e:	e7f2      	b.n	22b76 <memmove+0x1a>
   22b90:	000b      	movs	r3, r1
   22b92:	4303      	orrs	r3, r0
   22b94:	079b      	lsls	r3, r3, #30
   22b96:	d12d      	bne.n	22bf4 <memmove+0x98>
   22b98:	0015      	movs	r5, r2
   22b9a:	000c      	movs	r4, r1
   22b9c:	0003      	movs	r3, r0
   22b9e:	3d10      	subs	r5, #16
   22ba0:	092f      	lsrs	r7, r5, #4
   22ba2:	3701      	adds	r7, #1
   22ba4:	013f      	lsls	r7, r7, #4
   22ba6:	19c7      	adds	r7, r0, r7
   22ba8:	6826      	ldr	r6, [r4, #0]
   22baa:	601e      	str	r6, [r3, #0]
   22bac:	6866      	ldr	r6, [r4, #4]
   22bae:	605e      	str	r6, [r3, #4]
   22bb0:	68a6      	ldr	r6, [r4, #8]
   22bb2:	609e      	str	r6, [r3, #8]
   22bb4:	68e6      	ldr	r6, [r4, #12]
   22bb6:	3410      	adds	r4, #16
   22bb8:	60de      	str	r6, [r3, #12]
   22bba:	3310      	adds	r3, #16
   22bbc:	429f      	cmp	r7, r3
   22bbe:	d1f3      	bne.n	22ba8 <memmove+0x4c>
   22bc0:	240f      	movs	r4, #15
   22bc2:	43a5      	bics	r5, r4
   22bc4:	3510      	adds	r5, #16
   22bc6:	1949      	adds	r1, r1, r5
   22bc8:	4014      	ands	r4, r2
   22bca:	1945      	adds	r5, r0, r5
   22bcc:	2c03      	cmp	r4, #3
   22bce:	d913      	bls.n	22bf8 <memmove+0x9c>
   22bd0:	2300      	movs	r3, #0
   22bd2:	1f27      	subs	r7, r4, #4
   22bd4:	08be      	lsrs	r6, r7, #2
   22bd6:	3601      	adds	r6, #1
   22bd8:	00b6      	lsls	r6, r6, #2
   22bda:	58cc      	ldr	r4, [r1, r3]
   22bdc:	50ec      	str	r4, [r5, r3]
   22bde:	3304      	adds	r3, #4
   22be0:	42b3      	cmp	r3, r6
   22be2:	d1fa      	bne.n	22bda <memmove+0x7e>
   22be4:	2603      	movs	r6, #3
   22be6:	43b7      	bics	r7, r6
   22be8:	1d3c      	adds	r4, r7, #4
   22bea:	1909      	adds	r1, r1, r4
   22bec:	192d      	adds	r5, r5, r4
   22bee:	4032      	ands	r2, r6
   22bf0:	d1c7      	bne.n	22b82 <memmove+0x26>
   22bf2:	e7c0      	b.n	22b76 <memmove+0x1a>
   22bf4:	0005      	movs	r5, r0
   22bf6:	e7c4      	b.n	22b82 <memmove+0x26>
   22bf8:	0022      	movs	r2, r4
   22bfa:	e7c0      	b.n	22b7e <memmove+0x22>

00022bfc <_realloc_r>:
   22bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
   22bfe:	464e      	mov	r6, r9
   22c00:	4645      	mov	r5, r8
   22c02:	46de      	mov	lr, fp
   22c04:	4657      	mov	r7, sl
   22c06:	b5e0      	push	{r5, r6, r7, lr}
   22c08:	b085      	sub	sp, #20
   22c0a:	9001      	str	r0, [sp, #4]
   22c0c:	000e      	movs	r6, r1
   22c0e:	0015      	movs	r5, r2
   22c10:	2900      	cmp	r1, #0
   22c12:	d100      	bne.n	22c16 <_realloc_r+0x1a>
   22c14:	e09e      	b.n	22d54 <_realloc_r+0x158>
   22c16:	0037      	movs	r7, r6
   22c18:	9801      	ldr	r0, [sp, #4]
   22c1a:	3f08      	subs	r7, #8
   22c1c:	f7ff f9ba 	bl	21f94 <__malloc_lock>
   22c20:	687a      	ldr	r2, [r7, #4]
   22c22:	2303      	movs	r3, #3
   22c24:	0014      	movs	r4, r2
   22c26:	439c      	bics	r4, r3
   22c28:	002b      	movs	r3, r5
   22c2a:	330b      	adds	r3, #11
   22c2c:	46b9      	mov	r9, r7
   22c2e:	2b16      	cmp	r3, #22
   22c30:	d847      	bhi.n	22cc2 <_realloc_r+0xc6>
   22c32:	2110      	movs	r1, #16
   22c34:	2310      	movs	r3, #16
   22c36:	4688      	mov	r8, r1
   22c38:	4545      	cmp	r5, r8
   22c3a:	d846      	bhi.n	22cca <_realloc_r+0xce>
   22c3c:	429c      	cmp	r4, r3
   22c3e:	da49      	bge.n	22cd4 <_realloc_r+0xd8>
   22c40:	49cc      	ldr	r1, [pc, #816]	; (22f74 <_realloc_r+0x378>)
   22c42:	1938      	adds	r0, r7, r4
   22c44:	468b      	mov	fp, r1
   22c46:	6889      	ldr	r1, [r1, #8]
   22c48:	9002      	str	r0, [sp, #8]
   22c4a:	4288      	cmp	r0, r1
   22c4c:	d100      	bne.n	22c50 <_realloc_r+0x54>
   22c4e:	e0c2      	b.n	22dd6 <_realloc_r+0x1da>
   22c50:	2101      	movs	r1, #1
   22c52:	468a      	mov	sl, r1
   22c54:	6840      	ldr	r0, [r0, #4]
   22c56:	0001      	movs	r1, r0
   22c58:	9003      	str	r0, [sp, #12]
   22c5a:	4650      	mov	r0, sl
   22c5c:	4381      	bics	r1, r0
   22c5e:	468c      	mov	ip, r1
   22c60:	9902      	ldr	r1, [sp, #8]
   22c62:	468b      	mov	fp, r1
   22c64:	44dc      	add	ip, fp
   22c66:	4661      	mov	r1, ip
   22c68:	6849      	ldr	r1, [r1, #4]
   22c6a:	4201      	tst	r1, r0
   22c6c:	d04d      	beq.n	22d0a <_realloc_r+0x10e>
   22c6e:	4210      	tst	r0, r2
   22c70:	d100      	bne.n	22c74 <_realloc_r+0x78>
   22c72:	e0a2      	b.n	22dba <_realloc_r+0x1be>
   22c74:	0029      	movs	r1, r5
   22c76:	9801      	ldr	r0, [sp, #4]
   22c78:	f7fe fe98 	bl	219ac <_malloc_r>
   22c7c:	1e05      	subs	r5, r0, #0
   22c7e:	d039      	beq.n	22cf4 <_realloc_r+0xf8>
   22c80:	2301      	movs	r3, #1
   22c82:	0002      	movs	r2, r0
   22c84:	6879      	ldr	r1, [r7, #4]
   22c86:	3a08      	subs	r2, #8
   22c88:	4399      	bics	r1, r3
   22c8a:	187f      	adds	r7, r7, r1
   22c8c:	42ba      	cmp	r2, r7
   22c8e:	d100      	bne.n	22c92 <_realloc_r+0x96>
   22c90:	e12e      	b.n	22ef0 <_realloc_r+0x2f4>
   22c92:	1f22      	subs	r2, r4, #4
   22c94:	2a24      	cmp	r2, #36	; 0x24
   22c96:	d900      	bls.n	22c9a <_realloc_r+0x9e>
   22c98:	e114      	b.n	22ec4 <_realloc_r+0x2c8>
   22c9a:	2a13      	cmp	r2, #19
   22c9c:	d900      	bls.n	22ca0 <_realloc_r+0xa4>
   22c9e:	e0e8      	b.n	22e72 <_realloc_r+0x276>
   22ca0:	0003      	movs	r3, r0
   22ca2:	0032      	movs	r2, r6
   22ca4:	6811      	ldr	r1, [r2, #0]
   22ca6:	6019      	str	r1, [r3, #0]
   22ca8:	6851      	ldr	r1, [r2, #4]
   22caa:	6059      	str	r1, [r3, #4]
   22cac:	6892      	ldr	r2, [r2, #8]
   22cae:	609a      	str	r2, [r3, #8]
   22cb0:	9c01      	ldr	r4, [sp, #4]
   22cb2:	0031      	movs	r1, r6
   22cb4:	0020      	movs	r0, r4
   22cb6:	f7ff fe5d 	bl	22974 <_free_r>
   22cba:	0020      	movs	r0, r4
   22cbc:	f7ff f972 	bl	21fa4 <__malloc_unlock>
   22cc0:	e01b      	b.n	22cfa <_realloc_r+0xfe>
   22cc2:	2107      	movs	r1, #7
   22cc4:	438b      	bics	r3, r1
   22cc6:	4698      	mov	r8, r3
   22cc8:	d5b6      	bpl.n	22c38 <_realloc_r+0x3c>
   22cca:	230c      	movs	r3, #12
   22ccc:	9a01      	ldr	r2, [sp, #4]
   22cce:	2500      	movs	r5, #0
   22cd0:	6013      	str	r3, [r2, #0]
   22cd2:	e012      	b.n	22cfa <_realloc_r+0xfe>
   22cd4:	0035      	movs	r5, r6
   22cd6:	4643      	mov	r3, r8
   22cd8:	1ae3      	subs	r3, r4, r3
   22cda:	2b0f      	cmp	r3, #15
   22cdc:	d825      	bhi.n	22d2a <_realloc_r+0x12e>
   22cde:	464b      	mov	r3, r9
   22ce0:	2201      	movs	r2, #1
   22ce2:	4649      	mov	r1, r9
   22ce4:	685b      	ldr	r3, [r3, #4]
   22ce6:	4013      	ands	r3, r2
   22ce8:	4323      	orrs	r3, r4
   22cea:	604b      	str	r3, [r1, #4]
   22cec:	444c      	add	r4, r9
   22cee:	6863      	ldr	r3, [r4, #4]
   22cf0:	431a      	orrs	r2, r3
   22cf2:	6062      	str	r2, [r4, #4]
   22cf4:	9801      	ldr	r0, [sp, #4]
   22cf6:	f7ff f955 	bl	21fa4 <__malloc_unlock>
   22cfa:	0028      	movs	r0, r5
   22cfc:	b005      	add	sp, #20
   22cfe:	bc3c      	pop	{r2, r3, r4, r5}
   22d00:	4690      	mov	r8, r2
   22d02:	4699      	mov	r9, r3
   22d04:	46a2      	mov	sl, r4
   22d06:	46ab      	mov	fp, r5
   22d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22d0a:	2103      	movs	r1, #3
   22d0c:	9803      	ldr	r0, [sp, #12]
   22d0e:	468c      	mov	ip, r1
   22d10:	4388      	bics	r0, r1
   22d12:	1821      	adds	r1, r4, r0
   22d14:	468b      	mov	fp, r1
   22d16:	4299      	cmp	r1, r3
   22d18:	db21      	blt.n	22d5e <_realloc_r+0x162>
   22d1a:	9a02      	ldr	r2, [sp, #8]
   22d1c:	0035      	movs	r5, r6
   22d1e:	68d3      	ldr	r3, [r2, #12]
   22d20:	6892      	ldr	r2, [r2, #8]
   22d22:	465c      	mov	r4, fp
   22d24:	60d3      	str	r3, [r2, #12]
   22d26:	609a      	str	r2, [r3, #8]
   22d28:	e7d5      	b.n	22cd6 <_realloc_r+0xda>
   22d2a:	464a      	mov	r2, r9
   22d2c:	2001      	movs	r0, #1
   22d2e:	4646      	mov	r6, r8
   22d30:	6852      	ldr	r2, [r2, #4]
   22d32:	4649      	mov	r1, r9
   22d34:	4002      	ands	r2, r0
   22d36:	4332      	orrs	r2, r6
   22d38:	464e      	mov	r6, r9
   22d3a:	4441      	add	r1, r8
   22d3c:	4303      	orrs	r3, r0
   22d3e:	6072      	str	r2, [r6, #4]
   22d40:	444c      	add	r4, r9
   22d42:	604b      	str	r3, [r1, #4]
   22d44:	6863      	ldr	r3, [r4, #4]
   22d46:	3108      	adds	r1, #8
   22d48:	4318      	orrs	r0, r3
   22d4a:	6060      	str	r0, [r4, #4]
   22d4c:	9801      	ldr	r0, [sp, #4]
   22d4e:	f7ff fe11 	bl	22974 <_free_r>
   22d52:	e7cf      	b.n	22cf4 <_realloc_r+0xf8>
   22d54:	0011      	movs	r1, r2
   22d56:	f7fe fe29 	bl	219ac <_malloc_r>
   22d5a:	0005      	movs	r5, r0
   22d5c:	e7cd      	b.n	22cfa <_realloc_r+0xfe>
   22d5e:	4651      	mov	r1, sl
   22d60:	4211      	tst	r1, r2
   22d62:	d000      	beq.n	22d66 <_realloc_r+0x16a>
   22d64:	e786      	b.n	22c74 <_realloc_r+0x78>
   22d66:	4661      	mov	r1, ip
   22d68:	683a      	ldr	r2, [r7, #0]
   22d6a:	1aba      	subs	r2, r7, r2
   22d6c:	4692      	mov	sl, r2
   22d6e:	6852      	ldr	r2, [r2, #4]
   22d70:	438a      	bics	r2, r1
   22d72:	1880      	adds	r0, r0, r2
   22d74:	4683      	mov	fp, r0
   22d76:	44a3      	add	fp, r4
   22d78:	459b      	cmp	fp, r3
   22d7a:	db26      	blt.n	22dca <_realloc_r+0x1ce>
   22d7c:	9a02      	ldr	r2, [sp, #8]
   22d7e:	68d3      	ldr	r3, [r2, #12]
   22d80:	6892      	ldr	r2, [r2, #8]
   22d82:	60d3      	str	r3, [r2, #12]
   22d84:	609a      	str	r2, [r3, #8]
   22d86:	4653      	mov	r3, sl
   22d88:	4652      	mov	r2, sl
   22d8a:	4655      	mov	r5, sl
   22d8c:	6892      	ldr	r2, [r2, #8]
   22d8e:	68db      	ldr	r3, [r3, #12]
   22d90:	3508      	adds	r5, #8
   22d92:	60d3      	str	r3, [r2, #12]
   22d94:	609a      	str	r2, [r3, #8]
   22d96:	1f22      	subs	r2, r4, #4
   22d98:	2a24      	cmp	r2, #36	; 0x24
   22d9a:	d900      	bls.n	22d9e <_realloc_r+0x1a2>
   22d9c:	e096      	b.n	22ecc <_realloc_r+0x2d0>
   22d9e:	2a13      	cmp	r2, #19
   22da0:	d972      	bls.n	22e88 <_realloc_r+0x28c>
   22da2:	4653      	mov	r3, sl
   22da4:	6831      	ldr	r1, [r6, #0]
   22da6:	6099      	str	r1, [r3, #8]
   22da8:	6871      	ldr	r1, [r6, #4]
   22daa:	60d9      	str	r1, [r3, #12]
   22dac:	2a1b      	cmp	r2, #27
   22dae:	d900      	bls.n	22db2 <_realloc_r+0x1b6>
   22db0:	e0a4      	b.n	22efc <_realloc_r+0x300>
   22db2:	0032      	movs	r2, r6
   22db4:	3310      	adds	r3, #16
   22db6:	3208      	adds	r2, #8
   22db8:	e068      	b.n	22e8c <_realloc_r+0x290>
   22dba:	683a      	ldr	r2, [r7, #0]
   22dbc:	1aba      	subs	r2, r7, r2
   22dbe:	4692      	mov	sl, r2
   22dc0:	4651      	mov	r1, sl
   22dc2:	2203      	movs	r2, #3
   22dc4:	6849      	ldr	r1, [r1, #4]
   22dc6:	4391      	bics	r1, r2
   22dc8:	000a      	movs	r2, r1
   22dca:	4693      	mov	fp, r2
   22dcc:	44a3      	add	fp, r4
   22dce:	459b      	cmp	fp, r3
   22dd0:	da00      	bge.n	22dd4 <_realloc_r+0x1d8>
   22dd2:	e74f      	b.n	22c74 <_realloc_r+0x78>
   22dd4:	e7d7      	b.n	22d86 <_realloc_r+0x18a>
   22dd6:	2003      	movs	r0, #3
   22dd8:	9902      	ldr	r1, [sp, #8]
   22dda:	4684      	mov	ip, r0
   22ddc:	6849      	ldr	r1, [r1, #4]
   22dde:	4381      	bics	r1, r0
   22de0:	4640      	mov	r0, r8
   22de2:	1909      	adds	r1, r1, r4
   22de4:	3010      	adds	r0, #16
   22de6:	9002      	str	r0, [sp, #8]
   22de8:	4281      	cmp	r1, r0
   22dea:	da58      	bge.n	22e9e <_realloc_r+0x2a2>
   22dec:	07d2      	lsls	r2, r2, #31
   22dee:	d500      	bpl.n	22df2 <_realloc_r+0x1f6>
   22df0:	e740      	b.n	22c74 <_realloc_r+0x78>
   22df2:	4660      	mov	r0, ip
   22df4:	683a      	ldr	r2, [r7, #0]
   22df6:	1aba      	subs	r2, r7, r2
   22df8:	4692      	mov	sl, r2
   22dfa:	6852      	ldr	r2, [r2, #4]
   22dfc:	4382      	bics	r2, r0
   22dfe:	9802      	ldr	r0, [sp, #8]
   22e00:	1851      	adds	r1, r2, r1
   22e02:	9103      	str	r1, [sp, #12]
   22e04:	4288      	cmp	r0, r1
   22e06:	dce0      	bgt.n	22dca <_realloc_r+0x1ce>
   22e08:	4653      	mov	r3, sl
   22e0a:	4652      	mov	r2, sl
   22e0c:	4655      	mov	r5, sl
   22e0e:	6892      	ldr	r2, [r2, #8]
   22e10:	68db      	ldr	r3, [r3, #12]
   22e12:	3508      	adds	r5, #8
   22e14:	60d3      	str	r3, [r2, #12]
   22e16:	609a      	str	r2, [r3, #8]
   22e18:	1f22      	subs	r2, r4, #4
   22e1a:	2a24      	cmp	r2, #36	; 0x24
   22e1c:	d900      	bls.n	22e20 <_realloc_r+0x224>
   22e1e:	e08e      	b.n	22f3e <_realloc_r+0x342>
   22e20:	2a13      	cmp	r2, #19
   22e22:	d800      	bhi.n	22e26 <_realloc_r+0x22a>
   22e24:	e088      	b.n	22f38 <_realloc_r+0x33c>
   22e26:	4653      	mov	r3, sl
   22e28:	6831      	ldr	r1, [r6, #0]
   22e2a:	6099      	str	r1, [r3, #8]
   22e2c:	6871      	ldr	r1, [r6, #4]
   22e2e:	60d9      	str	r1, [r3, #12]
   22e30:	2a1b      	cmp	r2, #27
   22e32:	d900      	bls.n	22e36 <_realloc_r+0x23a>
   22e34:	e088      	b.n	22f48 <_realloc_r+0x34c>
   22e36:	0032      	movs	r2, r6
   22e38:	3310      	adds	r3, #16
   22e3a:	3208      	adds	r2, #8
   22e3c:	6811      	ldr	r1, [r2, #0]
   22e3e:	6019      	str	r1, [r3, #0]
   22e40:	6851      	ldr	r1, [r2, #4]
   22e42:	6059      	str	r1, [r3, #4]
   22e44:	6892      	ldr	r2, [r2, #8]
   22e46:	609a      	str	r2, [r3, #8]
   22e48:	4651      	mov	r1, sl
   22e4a:	465b      	mov	r3, fp
   22e4c:	4642      	mov	r2, r8
   22e4e:	4441      	add	r1, r8
   22e50:	6099      	str	r1, [r3, #8]
   22e52:	9b03      	ldr	r3, [sp, #12]
   22e54:	9801      	ldr	r0, [sp, #4]
   22e56:	1a9a      	subs	r2, r3, r2
   22e58:	2301      	movs	r3, #1
   22e5a:	431a      	orrs	r2, r3
   22e5c:	604a      	str	r2, [r1, #4]
   22e5e:	4652      	mov	r2, sl
   22e60:	6852      	ldr	r2, [r2, #4]
   22e62:	4013      	ands	r3, r2
   22e64:	4642      	mov	r2, r8
   22e66:	4313      	orrs	r3, r2
   22e68:	4652      	mov	r2, sl
   22e6a:	6053      	str	r3, [r2, #4]
   22e6c:	f7ff f89a 	bl	21fa4 <__malloc_unlock>
   22e70:	e743      	b.n	22cfa <_realloc_r+0xfe>
   22e72:	6833      	ldr	r3, [r6, #0]
   22e74:	6003      	str	r3, [r0, #0]
   22e76:	6873      	ldr	r3, [r6, #4]
   22e78:	6043      	str	r3, [r0, #4]
   22e7a:	2a1b      	cmp	r2, #27
   22e7c:	d82d      	bhi.n	22eda <_realloc_r+0x2de>
   22e7e:	0003      	movs	r3, r0
   22e80:	0032      	movs	r2, r6
   22e82:	3308      	adds	r3, #8
   22e84:	3208      	adds	r2, #8
   22e86:	e70d      	b.n	22ca4 <_realloc_r+0xa8>
   22e88:	002b      	movs	r3, r5
   22e8a:	0032      	movs	r2, r6
   22e8c:	6811      	ldr	r1, [r2, #0]
   22e8e:	465c      	mov	r4, fp
   22e90:	6019      	str	r1, [r3, #0]
   22e92:	6851      	ldr	r1, [r2, #4]
   22e94:	46d1      	mov	r9, sl
   22e96:	6059      	str	r1, [r3, #4]
   22e98:	6892      	ldr	r2, [r2, #8]
   22e9a:	609a      	str	r2, [r3, #8]
   22e9c:	e71b      	b.n	22cd6 <_realloc_r+0xda>
   22e9e:	4643      	mov	r3, r8
   22ea0:	18fa      	adds	r2, r7, r3
   22ea2:	465b      	mov	r3, fp
   22ea4:	609a      	str	r2, [r3, #8]
   22ea6:	4643      	mov	r3, r8
   22ea8:	1ac9      	subs	r1, r1, r3
   22eaa:	2301      	movs	r3, #1
   22eac:	4319      	orrs	r1, r3
   22eae:	6051      	str	r1, [r2, #4]
   22eb0:	687a      	ldr	r2, [r7, #4]
   22eb2:	9801      	ldr	r0, [sp, #4]
   22eb4:	4013      	ands	r3, r2
   22eb6:	4642      	mov	r2, r8
   22eb8:	4313      	orrs	r3, r2
   22eba:	607b      	str	r3, [r7, #4]
   22ebc:	f7ff f872 	bl	21fa4 <__malloc_unlock>
   22ec0:	0035      	movs	r5, r6
   22ec2:	e71a      	b.n	22cfa <_realloc_r+0xfe>
   22ec4:	0031      	movs	r1, r6
   22ec6:	f7ff fe49 	bl	22b5c <memmove>
   22eca:	e6f1      	b.n	22cb0 <_realloc_r+0xb4>
   22ecc:	0031      	movs	r1, r6
   22ece:	0028      	movs	r0, r5
   22ed0:	f7ff fe44 	bl	22b5c <memmove>
   22ed4:	465c      	mov	r4, fp
   22ed6:	46d1      	mov	r9, sl
   22ed8:	e6fd      	b.n	22cd6 <_realloc_r+0xda>
   22eda:	68b3      	ldr	r3, [r6, #8]
   22edc:	6083      	str	r3, [r0, #8]
   22ede:	68f3      	ldr	r3, [r6, #12]
   22ee0:	60c3      	str	r3, [r0, #12]
   22ee2:	2a24      	cmp	r2, #36	; 0x24
   22ee4:	d015      	beq.n	22f12 <_realloc_r+0x316>
   22ee6:	0003      	movs	r3, r0
   22ee8:	0032      	movs	r2, r6
   22eea:	3310      	adds	r3, #16
   22eec:	3210      	adds	r2, #16
   22eee:	e6d9      	b.n	22ca4 <_realloc_r+0xa8>
   22ef0:	6853      	ldr	r3, [r2, #4]
   22ef2:	2203      	movs	r2, #3
   22ef4:	4393      	bics	r3, r2
   22ef6:	18e4      	adds	r4, r4, r3
   22ef8:	0035      	movs	r5, r6
   22efa:	e6ec      	b.n	22cd6 <_realloc_r+0xda>
   22efc:	4653      	mov	r3, sl
   22efe:	68b1      	ldr	r1, [r6, #8]
   22f00:	6119      	str	r1, [r3, #16]
   22f02:	68f1      	ldr	r1, [r6, #12]
   22f04:	6159      	str	r1, [r3, #20]
   22f06:	2a24      	cmp	r2, #36	; 0x24
   22f08:	d00c      	beq.n	22f24 <_realloc_r+0x328>
   22f0a:	0032      	movs	r2, r6
   22f0c:	3318      	adds	r3, #24
   22f0e:	3210      	adds	r2, #16
   22f10:	e7bc      	b.n	22e8c <_realloc_r+0x290>
   22f12:	6933      	ldr	r3, [r6, #16]
   22f14:	0032      	movs	r2, r6
   22f16:	6103      	str	r3, [r0, #16]
   22f18:	0003      	movs	r3, r0
   22f1a:	6971      	ldr	r1, [r6, #20]
   22f1c:	3318      	adds	r3, #24
   22f1e:	3218      	adds	r2, #24
   22f20:	6141      	str	r1, [r0, #20]
   22f22:	e6bf      	b.n	22ca4 <_realloc_r+0xa8>
   22f24:	4653      	mov	r3, sl
   22f26:	6932      	ldr	r2, [r6, #16]
   22f28:	4651      	mov	r1, sl
   22f2a:	619a      	str	r2, [r3, #24]
   22f2c:	0032      	movs	r2, r6
   22f2e:	6970      	ldr	r0, [r6, #20]
   22f30:	3320      	adds	r3, #32
   22f32:	3218      	adds	r2, #24
   22f34:	61c8      	str	r0, [r1, #28]
   22f36:	e7a9      	b.n	22e8c <_realloc_r+0x290>
   22f38:	002b      	movs	r3, r5
   22f3a:	0032      	movs	r2, r6
   22f3c:	e77e      	b.n	22e3c <_realloc_r+0x240>
   22f3e:	0031      	movs	r1, r6
   22f40:	0028      	movs	r0, r5
   22f42:	f7ff fe0b 	bl	22b5c <memmove>
   22f46:	e77f      	b.n	22e48 <_realloc_r+0x24c>
   22f48:	4653      	mov	r3, sl
   22f4a:	68b1      	ldr	r1, [r6, #8]
   22f4c:	6119      	str	r1, [r3, #16]
   22f4e:	68f1      	ldr	r1, [r6, #12]
   22f50:	6159      	str	r1, [r3, #20]
   22f52:	2a24      	cmp	r2, #36	; 0x24
   22f54:	d003      	beq.n	22f5e <_realloc_r+0x362>
   22f56:	0032      	movs	r2, r6
   22f58:	3318      	adds	r3, #24
   22f5a:	3210      	adds	r2, #16
   22f5c:	e76e      	b.n	22e3c <_realloc_r+0x240>
   22f5e:	4653      	mov	r3, sl
   22f60:	6932      	ldr	r2, [r6, #16]
   22f62:	4651      	mov	r1, sl
   22f64:	619a      	str	r2, [r3, #24]
   22f66:	0032      	movs	r2, r6
   22f68:	6970      	ldr	r0, [r6, #20]
   22f6a:	3320      	adds	r3, #32
   22f6c:	3218      	adds	r2, #24
   22f6e:	61c8      	str	r0, [r1, #28]
   22f70:	e764      	b.n	22e3c <_realloc_r+0x240>
   22f72:	46c0      	nop			; (mov r8, r8)
   22f74:	200007bc 	.word	0x200007bc

00022f78 <__ascii_wctomb>:
   22f78:	2900      	cmp	r1, #0
   22f7a:	d004      	beq.n	22f86 <__ascii_wctomb+0xe>
   22f7c:	2aff      	cmp	r2, #255	; 0xff
   22f7e:	d804      	bhi.n	22f8a <__ascii_wctomb+0x12>
   22f80:	2001      	movs	r0, #1
   22f82:	700a      	strb	r2, [r1, #0]
   22f84:	4770      	bx	lr
   22f86:	2000      	movs	r0, #0
   22f88:	e7fc      	b.n	22f84 <__ascii_wctomb+0xc>
   22f8a:	238a      	movs	r3, #138	; 0x8a
   22f8c:	6003      	str	r3, [r0, #0]
   22f8e:	2001      	movs	r0, #1
   22f90:	4240      	negs	r0, r0
   22f92:	e7f7      	b.n	22f84 <__ascii_wctomb+0xc>

00022f94 <__aeabi_uldivmod>:
   22f94:	2b00      	cmp	r3, #0
   22f96:	d111      	bne.n	22fbc <__aeabi_uldivmod+0x28>
   22f98:	2a00      	cmp	r2, #0
   22f9a:	d10f      	bne.n	22fbc <__aeabi_uldivmod+0x28>
   22f9c:	2900      	cmp	r1, #0
   22f9e:	d100      	bne.n	22fa2 <__aeabi_uldivmod+0xe>
   22fa0:	2800      	cmp	r0, #0
   22fa2:	d002      	beq.n	22faa <__aeabi_uldivmod+0x16>
   22fa4:	2100      	movs	r1, #0
   22fa6:	43c9      	mvns	r1, r1
   22fa8:	1c08      	adds	r0, r1, #0
   22faa:	b407      	push	{r0, r1, r2}
   22fac:	4802      	ldr	r0, [pc, #8]	; (22fb8 <__aeabi_uldivmod+0x24>)
   22fae:	a102      	add	r1, pc, #8	; (adr r1, 22fb8 <__aeabi_uldivmod+0x24>)
   22fb0:	1840      	adds	r0, r0, r1
   22fb2:	9002      	str	r0, [sp, #8]
   22fb4:	bd03      	pop	{r0, r1, pc}
   22fb6:	46c0      	nop			; (mov r8, r8)
   22fb8:	ffff92bd 	.word	0xffff92bd
   22fbc:	b403      	push	{r0, r1}
   22fbe:	4668      	mov	r0, sp
   22fc0:	b501      	push	{r0, lr}
   22fc2:	9802      	ldr	r0, [sp, #8]
   22fc4:	f000 f806 	bl	22fd4 <__udivmoddi4>
   22fc8:	9b01      	ldr	r3, [sp, #4]
   22fca:	469e      	mov	lr, r3
   22fcc:	b002      	add	sp, #8
   22fce:	bc0c      	pop	{r2, r3}
   22fd0:	4770      	bx	lr
   22fd2:	46c0      	nop			; (mov r8, r8)

00022fd4 <__udivmoddi4>:
   22fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
   22fd6:	4657      	mov	r7, sl
   22fd8:	464e      	mov	r6, r9
   22fda:	4645      	mov	r5, r8
   22fdc:	46de      	mov	lr, fp
   22fde:	b5e0      	push	{r5, r6, r7, lr}
   22fe0:	0004      	movs	r4, r0
   22fe2:	b083      	sub	sp, #12
   22fe4:	000d      	movs	r5, r1
   22fe6:	4692      	mov	sl, r2
   22fe8:	4699      	mov	r9, r3
   22fea:	428b      	cmp	r3, r1
   22fec:	d82f      	bhi.n	2304e <__udivmoddi4+0x7a>
   22fee:	d02c      	beq.n	2304a <__udivmoddi4+0x76>
   22ff0:	4649      	mov	r1, r9
   22ff2:	4650      	mov	r0, sl
   22ff4:	f000 f8ae 	bl	23154 <__clzdi2>
   22ff8:	0029      	movs	r1, r5
   22ffa:	0006      	movs	r6, r0
   22ffc:	0020      	movs	r0, r4
   22ffe:	f000 f8a9 	bl	23154 <__clzdi2>
   23002:	1a33      	subs	r3, r6, r0
   23004:	4698      	mov	r8, r3
   23006:	3b20      	subs	r3, #32
   23008:	469b      	mov	fp, r3
   2300a:	d500      	bpl.n	2300e <__udivmoddi4+0x3a>
   2300c:	e074      	b.n	230f8 <__udivmoddi4+0x124>
   2300e:	4653      	mov	r3, sl
   23010:	465a      	mov	r2, fp
   23012:	4093      	lsls	r3, r2
   23014:	001f      	movs	r7, r3
   23016:	4653      	mov	r3, sl
   23018:	4642      	mov	r2, r8
   2301a:	4093      	lsls	r3, r2
   2301c:	001e      	movs	r6, r3
   2301e:	42af      	cmp	r7, r5
   23020:	d829      	bhi.n	23076 <__udivmoddi4+0xa2>
   23022:	d026      	beq.n	23072 <__udivmoddi4+0x9e>
   23024:	465b      	mov	r3, fp
   23026:	1ba4      	subs	r4, r4, r6
   23028:	41bd      	sbcs	r5, r7
   2302a:	2b00      	cmp	r3, #0
   2302c:	da00      	bge.n	23030 <__udivmoddi4+0x5c>
   2302e:	e079      	b.n	23124 <__udivmoddi4+0x150>
   23030:	2200      	movs	r2, #0
   23032:	2300      	movs	r3, #0
   23034:	9200      	str	r2, [sp, #0]
   23036:	9301      	str	r3, [sp, #4]
   23038:	2301      	movs	r3, #1
   2303a:	465a      	mov	r2, fp
   2303c:	4093      	lsls	r3, r2
   2303e:	9301      	str	r3, [sp, #4]
   23040:	2301      	movs	r3, #1
   23042:	4642      	mov	r2, r8
   23044:	4093      	lsls	r3, r2
   23046:	9300      	str	r3, [sp, #0]
   23048:	e019      	b.n	2307e <__udivmoddi4+0xaa>
   2304a:	4282      	cmp	r2, r0
   2304c:	d9d0      	bls.n	22ff0 <__udivmoddi4+0x1c>
   2304e:	2200      	movs	r2, #0
   23050:	2300      	movs	r3, #0
   23052:	9200      	str	r2, [sp, #0]
   23054:	9301      	str	r3, [sp, #4]
   23056:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   23058:	2b00      	cmp	r3, #0
   2305a:	d001      	beq.n	23060 <__udivmoddi4+0x8c>
   2305c:	601c      	str	r4, [r3, #0]
   2305e:	605d      	str	r5, [r3, #4]
   23060:	9800      	ldr	r0, [sp, #0]
   23062:	9901      	ldr	r1, [sp, #4]
   23064:	b003      	add	sp, #12
   23066:	bc3c      	pop	{r2, r3, r4, r5}
   23068:	4690      	mov	r8, r2
   2306a:	4699      	mov	r9, r3
   2306c:	46a2      	mov	sl, r4
   2306e:	46ab      	mov	fp, r5
   23070:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23072:	42a3      	cmp	r3, r4
   23074:	d9d6      	bls.n	23024 <__udivmoddi4+0x50>
   23076:	2200      	movs	r2, #0
   23078:	2300      	movs	r3, #0
   2307a:	9200      	str	r2, [sp, #0]
   2307c:	9301      	str	r3, [sp, #4]
   2307e:	4643      	mov	r3, r8
   23080:	2b00      	cmp	r3, #0
   23082:	d0e8      	beq.n	23056 <__udivmoddi4+0x82>
   23084:	07fb      	lsls	r3, r7, #31
   23086:	0872      	lsrs	r2, r6, #1
   23088:	431a      	orrs	r2, r3
   2308a:	4646      	mov	r6, r8
   2308c:	087b      	lsrs	r3, r7, #1
   2308e:	e00e      	b.n	230ae <__udivmoddi4+0xda>
   23090:	42ab      	cmp	r3, r5
   23092:	d101      	bne.n	23098 <__udivmoddi4+0xc4>
   23094:	42a2      	cmp	r2, r4
   23096:	d80c      	bhi.n	230b2 <__udivmoddi4+0xde>
   23098:	1aa4      	subs	r4, r4, r2
   2309a:	419d      	sbcs	r5, r3
   2309c:	2001      	movs	r0, #1
   2309e:	1924      	adds	r4, r4, r4
   230a0:	416d      	adcs	r5, r5
   230a2:	2100      	movs	r1, #0
   230a4:	3e01      	subs	r6, #1
   230a6:	1824      	adds	r4, r4, r0
   230a8:	414d      	adcs	r5, r1
   230aa:	2e00      	cmp	r6, #0
   230ac:	d006      	beq.n	230bc <__udivmoddi4+0xe8>
   230ae:	42ab      	cmp	r3, r5
   230b0:	d9ee      	bls.n	23090 <__udivmoddi4+0xbc>
   230b2:	3e01      	subs	r6, #1
   230b4:	1924      	adds	r4, r4, r4
   230b6:	416d      	adcs	r5, r5
   230b8:	2e00      	cmp	r6, #0
   230ba:	d1f8      	bne.n	230ae <__udivmoddi4+0xda>
   230bc:	465b      	mov	r3, fp
   230be:	9800      	ldr	r0, [sp, #0]
   230c0:	9901      	ldr	r1, [sp, #4]
   230c2:	1900      	adds	r0, r0, r4
   230c4:	4169      	adcs	r1, r5
   230c6:	2b00      	cmp	r3, #0
   230c8:	db22      	blt.n	23110 <__udivmoddi4+0x13c>
   230ca:	002b      	movs	r3, r5
   230cc:	465a      	mov	r2, fp
   230ce:	40d3      	lsrs	r3, r2
   230d0:	002a      	movs	r2, r5
   230d2:	4644      	mov	r4, r8
   230d4:	40e2      	lsrs	r2, r4
   230d6:	001c      	movs	r4, r3
   230d8:	465b      	mov	r3, fp
   230da:	0015      	movs	r5, r2
   230dc:	2b00      	cmp	r3, #0
   230de:	db2c      	blt.n	2313a <__udivmoddi4+0x166>
   230e0:	0026      	movs	r6, r4
   230e2:	409e      	lsls	r6, r3
   230e4:	0033      	movs	r3, r6
   230e6:	0026      	movs	r6, r4
   230e8:	4647      	mov	r7, r8
   230ea:	40be      	lsls	r6, r7
   230ec:	0032      	movs	r2, r6
   230ee:	1a80      	subs	r0, r0, r2
   230f0:	4199      	sbcs	r1, r3
   230f2:	9000      	str	r0, [sp, #0]
   230f4:	9101      	str	r1, [sp, #4]
   230f6:	e7ae      	b.n	23056 <__udivmoddi4+0x82>
   230f8:	4642      	mov	r2, r8
   230fa:	2320      	movs	r3, #32
   230fc:	1a9b      	subs	r3, r3, r2
   230fe:	4652      	mov	r2, sl
   23100:	40da      	lsrs	r2, r3
   23102:	4641      	mov	r1, r8
   23104:	0013      	movs	r3, r2
   23106:	464a      	mov	r2, r9
   23108:	408a      	lsls	r2, r1
   2310a:	0017      	movs	r7, r2
   2310c:	431f      	orrs	r7, r3
   2310e:	e782      	b.n	23016 <__udivmoddi4+0x42>
   23110:	4642      	mov	r2, r8
   23112:	2320      	movs	r3, #32
   23114:	1a9b      	subs	r3, r3, r2
   23116:	002a      	movs	r2, r5
   23118:	4646      	mov	r6, r8
   2311a:	409a      	lsls	r2, r3
   2311c:	0023      	movs	r3, r4
   2311e:	40f3      	lsrs	r3, r6
   23120:	4313      	orrs	r3, r2
   23122:	e7d5      	b.n	230d0 <__udivmoddi4+0xfc>
   23124:	4642      	mov	r2, r8
   23126:	2320      	movs	r3, #32
   23128:	2100      	movs	r1, #0
   2312a:	1a9b      	subs	r3, r3, r2
   2312c:	2200      	movs	r2, #0
   2312e:	9100      	str	r1, [sp, #0]
   23130:	9201      	str	r2, [sp, #4]
   23132:	2201      	movs	r2, #1
   23134:	40da      	lsrs	r2, r3
   23136:	9201      	str	r2, [sp, #4]
   23138:	e782      	b.n	23040 <__udivmoddi4+0x6c>
   2313a:	4642      	mov	r2, r8
   2313c:	2320      	movs	r3, #32
   2313e:	0026      	movs	r6, r4
   23140:	1a9b      	subs	r3, r3, r2
   23142:	40de      	lsrs	r6, r3
   23144:	002f      	movs	r7, r5
   23146:	46b4      	mov	ip, r6
   23148:	4097      	lsls	r7, r2
   2314a:	4666      	mov	r6, ip
   2314c:	003b      	movs	r3, r7
   2314e:	4333      	orrs	r3, r6
   23150:	e7c9      	b.n	230e6 <__udivmoddi4+0x112>
   23152:	46c0      	nop			; (mov r8, r8)

00023154 <__clzdi2>:
   23154:	b510      	push	{r4, lr}
   23156:	2900      	cmp	r1, #0
   23158:	d103      	bne.n	23162 <__clzdi2+0xe>
   2315a:	f7f9 f905 	bl	1c368 <__clzsi2>
   2315e:	3020      	adds	r0, #32
   23160:	e002      	b.n	23168 <__clzdi2+0x14>
   23162:	1c08      	adds	r0, r1, #0
   23164:	f7f9 f900 	bl	1c368 <__clzsi2>
   23168:	bd10      	pop	{r4, pc}
   2316a:	46c0      	nop			; (mov r8, r8)
   2316c:	00000900 	.word	0x00000900
   23170:	000009c4 	.word	0x000009c4
   23174:	000009c4 	.word	0x000009c4
   23178:	0000099a 	.word	0x0000099a
   2317c:	000009c4 	.word	0x000009c4
   23180:	000009c4 	.word	0x000009c4
   23184:	000009c4 	.word	0x000009c4
   23188:	000009c4 	.word	0x000009c4
   2318c:	000009c4 	.word	0x000009c4
   23190:	000009c4 	.word	0x000009c4
   23194:	000009c4 	.word	0x000009c4
   23198:	000009c4 	.word	0x000009c4
   2319c:	000009c4 	.word	0x000009c4
   231a0:	000009c4 	.word	0x000009c4
   231a4:	000009c4 	.word	0x000009c4
   231a8:	000009c4 	.word	0x000009c4
   231ac:	000009c4 	.word	0x000009c4
   231b0:	000009c4 	.word	0x000009c4
   231b4:	00000932 	.word	0x00000932
   231b8:	000009c4 	.word	0x000009c4
   231bc:	000009c4 	.word	0x000009c4
   231c0:	000009c4 	.word	0x000009c4
   231c4:	000009c4 	.word	0x000009c4
   231c8:	000009c4 	.word	0x000009c4
   231cc:	000009c4 	.word	0x000009c4
   231d0:	000009c4 	.word	0x000009c4
   231d4:	000009bc 	.word	0x000009bc
   231d8:	00000798 	.word	0x00000798
   231dc:	000009c4 	.word	0x000009c4
   231e0:	000009c4 	.word	0x000009c4
   231e4:	000008d0 	.word	0x000008d0
   231e8:	000009c4 	.word	0x000009c4
   231ec:	000009c4 	.word	0x000009c4
   231f0:	000009c4 	.word	0x000009c4
   231f4:	000009c4 	.word	0x000009c4
   231f8:	000009c4 	.word	0x000009c4
   231fc:	000009c4 	.word	0x000009c4
   23200:	00000896 	.word	0x00000896
   23204:	000009c4 	.word	0x000009c4
   23208:	000009c4 	.word	0x000009c4
   2320c:	00000854 	.word	0x00000854
   23210:	000009c4 	.word	0x000009c4
   23214:	000007f4 	.word	0x000007f4
   23218:	000009c4 	.word	0x000009c4
   2321c:	000009c4 	.word	0x000009c4
   23220:	000009c4 	.word	0x000009c4
   23224:	000009c4 	.word	0x000009c4
   23228:	000007a8 	.word	0x000007a8
   2322c:	000009c4 	.word	0x000009c4
   23230:	000009c4 	.word	0x000009c4
   23234:	000009c4 	.word	0x000009c4
   23238:	000009c4 	.word	0x000009c4
   2323c:	000009c4 	.word	0x000009c4
   23240:	000009c4 	.word	0x000009c4
   23244:	000009c4 	.word	0x000009c4
   23248:	000009c4 	.word	0x000009c4
   2324c:	000009c4 	.word	0x000009c4
   23250:	000009c4 	.word	0x000009c4
   23254:	000009c4 	.word	0x000009c4
   23258:	000009c4 	.word	0x000009c4
   2325c:	000009c4 	.word	0x000009c4
   23260:	000009c4 	.word	0x000009c4
   23264:	000009c4 	.word	0x000009c4
   23268:	000009c4 	.word	0x000009c4
   2326c:	000009c4 	.word	0x000009c4
   23270:	000009c4 	.word	0x000009c4
   23274:	000009c4 	.word	0x000009c4
   23278:	000009c4 	.word	0x000009c4
   2327c:	000009c4 	.word	0x000009c4
   23280:	000009c4 	.word	0x000009c4
   23284:	000009c4 	.word	0x000009c4
   23288:	000009c4 	.word	0x000009c4
   2328c:	000009c4 	.word	0x000009c4
   23290:	000009c4 	.word	0x000009c4
   23294:	000009c4 	.word	0x000009c4
   23298:	000009c4 	.word	0x000009c4
   2329c:	000009c4 	.word	0x000009c4
   232a0:	000009c4 	.word	0x000009c4
   232a4:	000009c4 	.word	0x000009c4
   232a8:	000009c4 	.word	0x000009c4
   232ac:	000009c4 	.word	0x000009c4
   232b0:	000009c4 	.word	0x000009c4
   232b4:	000009c4 	.word	0x000009c4
   232b8:	000009c4 	.word	0x000009c4
   232bc:	000009c4 	.word	0x000009c4
   232c0:	000009c4 	.word	0x000009c4
   232c4:	000009c4 	.word	0x000009c4
   232c8:	000009c4 	.word	0x000009c4
   232cc:	000009c4 	.word	0x000009c4
   232d0:	000009c4 	.word	0x000009c4
   232d4:	0000092a 	.word	0x0000092a
   232d8:	31333231 	.word	0x31333231
   232dc:	32313332 	.word	0x32313332
   232e0:	33323133 	.word	0x33323133
   232e4:	00000000 	.word	0x00000000
   232e8:	00002e60 	.word	0x00002e60
   232ec:	00002e6e 	.word	0x00002e6e
   232f0:	00002ee6 	.word	0x00002ee6
   232f4:	00002e22 	.word	0x00002e22
   232f8:	00002e42 	.word	0x00002e42

000232fc <_usb_device_irq_bits>:
   232fc:	00080004 00800070 01000001 00000200     ....p...........

0002330c <_usb_endpoint_irq_bits>:
   2330c:	60100c03                                ...`

00023310 <LfnOfs>:
   23310:	07050301 12100e09 1c181614 0000001e     ................

00023320 <excvt.4559>:
   23320:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
   23330:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
   23340:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
   23350:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
   23360:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
   23370:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
   23380:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
   23390:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................
   233a0:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
   233b0:	00005d5b                                []..

000233b4 <Tbl>:
   233b4:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
   233c4:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
   233d4:	00e600c9 00f400c6 00f200f6 00f900fb     ................
   233e4:	00d600ff 00f800dc 00d800a3 019200d7     ................
   233f4:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
   23404:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
   23414:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
   23424:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
   23434:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
   23444:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
   23454:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
   23464:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
   23474:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
   23484:	00da00de 00d900db 00dd00fd 00b400af     ................
   23494:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
   234a4:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

000234b4 <tbl_lower.4309>:
   234b4:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
   234c4:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
   234d4:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
   234e4:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
   234f4:	00e100e0 00e300e2 00e500e4 00e700e6     ................
   23504:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
   23514:	00f100f0 00f300f2 00f500f4 00f800f6     ................
   23524:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
   23534:	01050103 01090107 010d010b 0111010f     ................
   23544:	01150113 01190117 011d011b 0121011f     ..............!.
   23554:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
   23564:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
   23574:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
   23584:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
   23594:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
   235a4:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
   235b4:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
   235c4:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
   235d4:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
   235e4:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
   235f4:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
   23604:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
   23614:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
   23624:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
   23634:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
   23644:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
   23654:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
   23664:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
   23674:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
   23684:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

00023694 <tbl_upper.4310>:
   23694:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
   236a4:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
   236b4:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
   236c4:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
   236d4:	00c100c0 00c300c2 00c500c4 00c700c6     ................
   236e4:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
   236f4:	00d100d0 00d300d2 00d500d4 00d800d6     ................
   23704:	00da00d9 00dc00db 00de00dd 01000178     ............x...
   23714:	01040102 01080106 010c010a 0110010e     ................
   23724:	01140112 01180116 011c011a 0120011e     .............. .
   23734:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
   23744:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
   23754:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
   23764:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
   23774:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
   23784:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
   23794:	03940393 03960395 03980397 039a0399     ................
   237a4:	039c039b 039e039d 03a0039f 03a303a1     ................
   237b4:	03a503a4 03a703a6 03a903a8 041003aa     ................
   237c4:	04120411 04140413 04160415 04180417     ................
   237d4:	041a0419 041c041b 041e041d 0420041f     .............. .
   237e4:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
   237f4:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
   23804:	04030402 04050404 04070406 04090408     ................
   23814:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
   23824:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
   23834:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
   23844:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
   23854:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
   23864:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
   23874:	000000e1 00009472 00009352 00009376     ....r...R...v...
   23884:	0000939a 000093bc 000093de 000093fa     ................
   23894:	00009416 00009422 0000942e 00009472     ....".......r...
   238a4:	0000943a 00009446 00009452 0000945e     :...F...R...^...
   238b4:	00009338 31636341 67694820 25203a68     8...Acc1 High: %
   238c4:	66342e30 00000000 31636341 776f4c20     0.4f....Acc1 Low
   238d4:	3025203a 0066342e 32636341 67694820     : %0.4f.Acc2 Hig
   238e4:	25203a68 66342e30 00000000 32636341     h: %0.4f....Acc2
   238f4:	776f4c20 3025203a 0066342e 706d6f43      Low: %0.4f.Comp
   23904:	69482031 203a6867 342e3025 00000066     1 High: %0.4f...
   23914:	706d6f43 6f4c2031 25203a77 66342e30     Comp1 Low: %0.4f
   23924:	00000000 706d6f43 69482032 203a6867     ....Comp2 High: 
   23934:	342e3025 00000066 706d6f43 6f4c2032     %0.4f...Comp2 Lo
   23944:	25203a77 66342e30 00000000 20636341     w: %0.4f....Acc 
   23954:	746c6564 78612061 203a6425 332e3025     delta ax%d: %0.3
   23964:	00252566 20706d43 746c6564 78612061     f%%.Cmp delta ax
   23974:	203a6425 332e3025 00252566 20636e49     %d: %0.3f%%.Inc 
   23984:	746c6544 25203a61 66332e30 67656420     Delta: %0.3f deg
   23994:	00000000 206d7a41 746c6544 25203a61     ....Azm Delta: %
   239a4:	66332e30 67656420 00000000 6573616c     0.3f deg....lase
   239b4:	61632072 6520636c 726f7272 00000000     r calc error....
   239c4:	6573616c 65772072 73206b61 616e6769     laser weak signa
   239d4:	0000006c 6573616c 74732072 676e6f72     l...laser strong
   239e4:	67697320 006c616e 6573616c 6f632072      signal.laser co
   239f4:	74206d6d 6f656d69 00007475 6573616c     mm timeout..lase
   23a04:	72652072 2c726f72 6b6e7520 6e776f6e     r error, unknown
   23a14:	00000000 6573616c 72772072 20676e6f     ....laser wrong 
   23a24:	7373656d 00656761 65726e75 6e676f63     message.unrecogn
   23a34:	64657a69 72726520 0000726f              ized error..

00023a40 <tc_interrupt_vectors.15667>:
   23a40:	00151211                                ....

00023a44 <mmc_trans_multipliers>:
   23a44:	00000000 0000000a 0000000c 0000000d     ................
   23a54:	0000000f 00000014 0000001a 0000001e     ................
   23a64:	00000023 00000028 0000002d 00000034     #...(...-...4...
   23a74:	00000037 0000003c 00000046 00000050     7...<...F...P...

00023a84 <sd_mmc_trans_units>:
   23a84:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

00023aa0 <sd_trans_multipliers>:
   23aa0:	00000000 0000000a 0000000c 0000000d     ................
   23ab0:	0000000f 00000014 00000019 0000001e     ................
   23ac0:	00000023 00000028 0000002d 00000032     #...(...-...2...
   23ad0:	00000037 0000003c 00000046 00000050     7...<...F...P...
   23ae0:	2f445322 20434d4d 64726143 6f6c5320     "SD/MMC Card Slo
   23af0:	22302074 00000000 0000c4ea 0000c4e0     t 0"............
   23b00:	0000c4d6 0000c352 0000c4f4 0000c5c0     ....R...........
   23b10:	0000c594 0000c58a 0000c580 0000c576     ............v...
   23b20:	42002000 42002400 43000800 00000002     . .B.$.B...C....
   23b30:	00000100 00000002 00000200 00000003     ................
   23b40:	00000004 30253032 30257832 30257832     ....20%02x%02x%0
   23b50:	255f7832 25783230 25783230 5f783230     2x_%02x%02x%02x_
   23b60:	696c6163 74617262 5f6e6f69 6f706572     calibration_repo
   23b70:	742e7472 00007478 696c6143 74617262     rt.txt..Calibrat
   23b80:	206e6f69 6f706552 0a0d7472 61440a0d     ion Report....Da
   23b90:	61206574 5420646e 3a656d69 59590a0d     te and Time:..YY
   23ba0:	4d2e5959 44442e4d 3a484840 733a6d6d     YY.MM.DD@HH:mm:s
   23bb0:	320a0d73 32302530 30252e78 252e7832     s..20%02x.%02x.%
   23bc0:	40783230 78323025 3230253a 30253a78     02x@%02x:%02x:%0
   23bd0:	0a0d7832 00000a0d 74666f53 65726177     2x......Software
   23be0:	72655620 6e6f6973 3125203a 0d66312e      Version: %1.1f.
   23bf0:	000a0d0a 7361654d 6d657275 73746e65     ....Measurements
   23c00:	6425203a 2d340a0d 6e696f50 72472074     : %d..4-Point Gr
   23c10:	7370756f 6425203a 0a0d0a0d 00000000     oups: %d........
   23c20:	6c676e41 72452065 20726f72 6e617453     Angle Error Stan
   23c30:	64726164 76654420 69746169 0d3a6e6f     dard Deviation:.
   23c40:	4120200a 756d697a 203a6874 362e3325     .  Azimuth: %3.6
   23c50:	65642066 65657267 200a0d73 636e4920     f degrees..  Inc
   23c60:	616e696c 6e6f6974 3325203a 2066362e     lination: %3.6f 
   23c70:	72676564 0d736565 0000000a 6e67614d     degrees.....Magn
   23c80:	64757469 72452065 20726f72 6e617453     itude Error Stan
   23c90:	64726164 76654420 69746169 0d3a6e6f     dard Deviation:.
   23ca0:	4120200a 6c656363 6d6f7265 72657465     .  Accelerometer
   23cb0:	203a3120 362e3325 25252066 20200a0d      1: %3.6f %%..  
   23cc0:	65636341 6f72656c 6574656d 3a322072     Accelerometer 2:
   23cd0:	2e332520 25206636 200a0d25 6d6f4320      %3.6f %%..  Com
   23ce0:	73736170 203a3120 362e3325 25252066     pass 1: %3.6f %%
   23cf0:	20200a0d 706d6f43 20737361 25203a32     ..  Compass 2: %
   23d00:	66362e33 0d252520 0000000a 73697841     3.6f %%.....Axis
   23d10:	73694420 69726170 0d3a7974 4120200a      Disparity:..  A
   23d20:	6c656363 6d6f7265 72657465 2d58203a     ccelerometer: X-
   23d30:	362e3325 20252566 33252d59 2566362e     %3.6f%% Y-%3.6f%
   23d40:	2d5a2025 362e3325 0d252566 0000000a     % Z-%3.6f%%.....
   23d50:	6f432020 7361706d 58203a73 2e33252d       Compass: X-%3.
   23d60:	25256636 252d5920 66362e33 5a202525     6f%% Y-%3.6f%% Z
   23d70:	2e33252d 25256636 0a0d0a0d 00000a0d     -%3.6f%%........
   23d80:	6c636e49 6d6f6e69 72657465 43203120     Inclinometer 1 C
   23d90:	62696c61 69746172 0d3a6e6f 0000000a     alibration:.....
   23da0:	6c636e49 6d6f6e69 72657465 43203220     Inclinometer 2 C
   23db0:	62696c61 69746172 0d3a6e6f 0000000a     alibration:.....
   23dc0:	706d6f43 20737361 61432031 7262696c     Compass 1 Calibr
   23dd0:	6f697461 0a0d3a6e 00000000 706d6f43     ation:......Comp
   23de0:	20737361 61432032 7262696c 6f697461     ass 2 Calibratio
   23df0:	0a0d3a6e 00000000 61472020 58206e69     n:......  Gain X
   23e00:	2e25203a 0a0d6636 61472020 59206e69     : %.6f..  Gain Y
   23e10:	2e25203a 0a0d6636 61472020 3a5a6e69     : %.6f..  GainZ:
   23e20:	362e2520 000a0d66 664f2020 74657366      %.6f...  Offset
   23e30:	203a5820 66362e25 20200a0d 7366664f      X: %.6f..  Offs
   23e40:	59207465 2e25203a 0a0d6636 664f2020     et Y: %.6f..  Of
   23e50:	74657366 203a5a20 66362e25 00000a0d     fset Z: %.6f....
   23e60:	78412020 4d207369 6c617369 6d6e6769       Axis Misalignm
   23e70:	2c746e65 582d5920 2e25203a 64206636     ent, Y-X: %.6f d
   23e80:	0a0d6765 78412020 4d207369 6c617369     eg..  Axis Misal
   23e90:	6d6e6769 2c746e65 582d5a20 2e25203a     ignment, Z-X: %.
   23ea0:	64206636 0a0d6765 78412020 4d207369     6f deg..  Axis M
   23eb0:	6c617369 6d6e6769 2c746e65 592d5a20     isalignment, Z-Y
   23ec0:	2e25203a 64206636 0a0d6765 00000000     : %.6f deg......
   23ed0:	61502020 67616b63 694d2065 696c6173       Package Misali
   23ee0:	656d6e67 4120746e 74756f62 203a5820     gnment About X: 
   23ef0:	66332e25 67656420 20200a0d 6b636150     %.3f deg..  Pack
   23f00:	20656761 6173694d 6e67696c 746e656d     age Misalignment
   23f10:	6f624120 59207475 2e25203a 64206633      About Y: %.3f d
   23f20:	0a0d6765 61502020 67616b63 694d2065     eg..  Package Mi
   23f30:	696c6173 656d6e67 4120746e 74756f62     salignment About
   23f40:	203a5a20 66332e25 67656420 0a0d0a0d      Z: %.3f deg....
   23f50:	00000000 61430a0d 7262696c 6f697461     ......Calibratio
   23f60:	654d206e 72757361 6e656d65 0d3a7374     n Measurements:.
   23f70:	0000000a 20202020 20202020 20202020     ....            
   23f80:	20202020 61636e55 7262696c 64657461         Uncalibrated
   23f90:	20202020 20202020 20202020 20202020                     
   23fa0:	20202020 6c614320 61726269 0d646574          Calibrated.
   23fb0:	0000000a 756f7247 50202c70 746e696f     ....Group, Point
   23fc0:	2020202c 6d697a41 2c687475 6e492020     ,   Azimuth,  In
   23fd0:	6e696c63 6f697461 52202c6e 2c6c6c6f     clination, Roll,
   23fe0:	20202020 697a4120 6874756d 4920202c          Azimuth,  I
   23ff0:	696c636e 6974616e 202c6e6f 6c6c6f52     nclination, Roll
   24000:	00000a0d 64322d25 2020202c 322d2520     ....%-2d,    %-2
   24010:	20202c64 20202020 2e333025 202c6632     d,      %03.2f, 
   24020:	30252020 66322e33 2020202c 25202020       %03.2f,      %
   24030:	322e3330 20202c66 33302520 2c66322e     03.2f,   %03.2f,
   24040:	25202020 322e3330 20202c66 20202020        %03.2f,      
   24050:	2e333025 0a0d6632 00000000 30253032     %03.2f......20%0
   24060:	30257832 30257832 255f7832 25783230     2x%02x%02x_%02x%
   24070:	25783230 5f783230 696c6163 74617262     02x%02x_calibrat
   24080:	5f6e6f69 5f776172 61746164 6e69622e     ion_raw_data.bin
   24090:	00000000 42000000 42000400 42000800     .......B...B...B
   240a0:	42000c00 42001000 43000400 00015276     ...B...B...CvR..
   240b0:	0001528e 0001528e 0001523a 0001523a     .R...R..:R..:R..
   240c0:	00015240 00015246 00015256 0001527c     @R..FR..VR..|R..
   240d0:	000153fe 0001547e 0001547e 000153fa     .S..~T..~T...S..
   240e0:	0001540c 0001541a 00015428 00015436     .T...T..(T..6T..
   240f0:	000153e4 000154ee 000154f8 000154f8     .S...T...T...T..
   24100:	000154a0 000154a4 000154ae 000154b8     .T...T...T...T..
   24110:	000154c2 000154da 000174e6 0001770a     .T...T...t...w..
   24120:	000176b2 000176c6 000176d8 000176f2     .v...v...v...v..
   24130:	000176fe 000176a8 000194ae 000194b2     .v...v..........
   24140:	000194c6 00019492 000194a8 000194aa     ................
   24150:	00630001 20001122 000c0102 20001121     ..c.".. ....!.. 
   24160:	001f0103 20001120 00180004 2000111e     .... .. ....... 
   24170:	003b0005 2000111d 003b0006 2000111c     ..;.... ..;.... 

00024180 <Font5x7>:
   24180:	00000000 5f000000 07000000 14000700     ......._........
   24190:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
   241a0:	00502255 00000305 41221c00 22410000     U"P......."A..A"
   241b0:	2a08001c 08082a1c 08083e08 00305000     ...*.*...>...P0.
   241c0:	08080800 60000808 20000060 02040810     .......``.. ....
   241d0:	4549513e 7f42003e 61420040 21464951     >QIE>.B.@.BaQIF!
   241e0:	314b4541 7f121418 45452710 4a3c3945     AEK1.....'EEE9<J
   241f0:	01304949 03050971 49494936 49490636     II0.q...6III6.II
   24200:	36001e29 00000036 00003656 22140800     )..66...V6....."
   24210:	14141441 22411414 02000814 06095101     A.....A".....Q..
   24220:	41794932 11117e3e 497f7e11 3e364949     2IyA>~...~.III6>
   24230:	22414141 2241417f 49497f1c 097f4149     AAA".AA"..IIIA..
   24240:	3e010109 32514141 0808087f 7f41007f     ...>AAQ2......A.
   24250:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
   24260:	04027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
   24270:	0909097f 51413e06 097f5e21 46462919     .....>AQ!^...)FF
   24280:	31494949 017f0101 40403f01 201f3f40     III1.....?@@@?. 
   24290:	7f1f2040 7f201820 14081463 78040363     @ .. . .c...c..x
   242a0:	51610304 00434549 41417f00 10080402     ..aQIEC...AA....
   242b0:	7f414120 02040000 40040201 40404040      AA........@@@@@
   242c0:	04020100 54542000 487f7854 38384444     ..... TTTx.HDD88
   242d0:	20444444 48444438 5454387f 7e081854     DDD 8DDH.8TTT..~
   242e0:	08020109 3c545414 0404087f 7d440078     .....TT<....x.D}
   242f0:	40200040 00003d44 4428107f 407f4100     @. @D=....(D.A.@
   24300:	18047c00 087c7804 38780404 38444444     .|...x|...x8DDD8
   24310:	1414147c 14140808 087c7c18 48080404     |........||....H
   24320:	20545454 40443f04 40403c20 201c7c20     TTT .?D@ <@@ |. 
   24330:	3c1c2040 3c403040 28102844 50500c44     @ .<@0@<D(.(D.PP
   24340:	64443c50 00444c54 00413608 007f0000     P<DdTLD..6A.....
   24350:	36410000 08080008 08081c2a 08082a1c     ..A6....*....*..
   24360:	2f6d7a41 20636e49 696c6143 74617262     Azm/Inc Calibrat
   24370:	3a6e6f69 00000000 656b6154 696e5520     ion:....Take Uni
   24380:	7269442d 69746365 6c616e6f 6f724720     -Directional Gro
   24390:	20737075 3420666f 6f685320 20207374     ups of 4 Shots  
   243a0:	68772020 20656c69 61746f72 676e6974       while rotating
   243b0:	20202020 69202020 7274736e 6e656d75            instrumen
   243c0:	4f202e74 20796c6e 7473616c 68732034     t. Only last4 sh
   243d0:	2073746f 6520666f 20686361 756f7267     ots of each grou
   243e0:	6c697770 6562206c 76617320 00006465     pwill be saved..
   243f0:	74736944 65636e61 6c614320 61726269     Distance Calibra
   24400:	6e6f6974 0000003a 63616c50 20612065     tion:...Place a 
   24410:	67726174 61207465 00000074 2e252020     target at...  %.
   24420:	66206631 2e746565 00000000 2e252020     1f feet.....  %.
   24430:	6d206631 72657465 00002e73 656b6154     1f meters...Take
   24440:	6e696d20 2034202e 746f6873 6e692073      min. 4 shots in
   24450:	00000000 746c754d 656c7069 69724f20     ....Multiple Ori
   24460:	61746e65 6e6f6974 00000073 796c6e4f     entations...Only
   24470:	73616c20 20342074 64657375 0000002e      last 4 used....
   24480:	706f6f4c 73655420 00003a74 656b6154     Loop Test:..Take
   24490:	73206120 65697265 666f2073 00000000      a series of....
   244a0:	7361656d 6d657275 73746e65 646e6520     measurements end
   244b0:	00676e69 6b636162 20746120 20656874     ing.back at the 
   244c0:	73726966 00000074 6e696f70 20202e74     first...point.  
   244d0:	73657250 44272073 27656e6f 00000000     Press 'Done'....
   244e0:	6e656877 6d6f6320 74656c70 00002e65     when complete...
   244f0:	73657250 6e612073 75622079 6e6f7474     Press any button
   24500:	002e2e2e                                ....

00024504 <deg2rad>:
   24504:	3c8efa35 696c6143 74617262 206e6f69     5..<Calibration 
   24514:	65646f4d 00000000 72727543 20746e65     Mode....Current 
   24524:	756f7247 25203a70 00000064 74617453     Group: %d...Stat
   24534:	203a7375 6f206425 00342066 706d6f43     us: %d of 4.Comp
   24544:	6574656c 6f724720 3a737075 00642520     lete Groups: %d.
   24554:	656e6f44 00000000 726f6241 00000074     Done....Abort...
   24564:	6b636142 6867696c 65442074 3a677562     Backlight Debug:
   24574:	00000000 3a646552 25202020 00000064     ....Red:   %d...
   24584:	65657247 25203a6e 00000064 65756c42     Green: %d...Blue
   24594:	2520203a 00000064 6867694c 25203a74     :  %d...Light: %
   245a4:	00000064 00007055 6e776f44 00000000     d...Up..Down....
   245b4:	72616843 20726567 75626544 00003a67     Charger Debug:..
   245c4:	3a646441 78323025 25203d20 00000073     Add:%02x = %s...
   245d4:	20636341 20202031 63412020 20322063     Acc 1     Acc 2 
   245e4:	6e6f4420 00000065 25203a58 332e302b      Done...X: %+0.3
   245f4:	2b252066 66332e30 00000000 25203a59     f %+0.3f....Y: %
   24604:	332e302b 2b252066 66332e30 00000000     +0.3f %+0.3f....
   24614:	25203a5a 332e302b 2b252066 66332e30     Z: %+0.3f %+0.3f
   24624:	00000000 706d6f43 20203120 6f432020     ....Comp 1    Co
   24634:	3220706d 00002020 25203a5a 332e302b     mp 2  ..Z: %+0.3
   24644:	2b252066 66332e30 69784520 00000074     f %+0.3f Exit...
   24654:	696c6143 74617262 206e6f69 6f706552     Calibration Repo
   24664:	003a7472 6d697a41 20687475 6e492026     rt:.Azimuth & In
   24674:	6e696c63 6f697461 0000006e 30253032     clination...20%0
   24684:	252e7832 2e783230 78323025 32302540     2x.%02x.%02x@%02
   24694:	30253a78 253a7832 00783230 6f502d34     x:%02x:%02x.4-Po
   246a4:	20746e69 756f7247 203a7370 00006425     int Groups: %d..
   246b4:	206d7a41 65647453 25203a76 0066332e     Azm Stdev: %.3f.
   246c4:	20636e49 65647453 25203a76 0066332e     Inc Stdev: %.3f.
   246d4:	736e6553 4420726f 61746c65 592c5820     Sensor Delta X,Y
   246e4:	25255a2c 00000000 2e253a41 252c6633     ,Z%%....A:%.3f,%
   246f4:	2c66332e 66332e25 00000000 2e253a43     .3f,%.3f....C:%.
   24704:	252c6633 2c66332e 66332e25 00000000     3f,%.3f,%.3f....
   24714:	6e67614d 64757469 72452065 20726f72     Magnitude Error 
   24724:	00002525 253a3141 2066332e 253a3241     %%..A1:%.3f A2:%
   24734:	0066332e 253a3143 2066332e 253a3243     .3f.C1:%.3f C2:%
   24744:	0066332e 676e6152 6e696665 20726564     .3f.Rangefinder 
   24754:	7366664f 003a7465 2e252020 6d206634     Offset:.  %.4f m
   24764:	72657465 00000073 2e252020 66206634     eters...  %.4f f
   24774:	00746565 74697845 00000000 00007466     eet.Exit....ft..
   24784:	706f6f4c 73655420 65522074 74726f70     Loop Test Report
   24794:	0000003a 6d676553 73746e65 6425203a     :...Segments: %d
   247a4:	00000000 61746f54 654c206c 6874676e     ....Total Length
   247b4:	2e25203a 25206631 00000073 7a726f48     : %.1f %s...Horz
   247c4:	72724520 2e25203a 25206633 00000073      Err: %.3f %s...
   247d4:	74726556 72724520 2e25203a 25206633     Vert Err: %.3f %
   247e4:	00000073 7a412020 45206d69 203a7272     s...  Azim Err: 
   247f4:	66312e25 67656420 00000000 706f6f4c     %.1f deg....Loop
   24804:	72724520 2e25203a 25256633 00000020      Err: %.3f%% ...
   24814:	72615420 20746567 66312e25 65656620      Target %.1f fee
   24824:	00000074 72615420 20746567 66312e25     t... Target %.1f
   24834:	74656d20 2e737265 00000000 3a64254d      meters.....M%d:
   24844:	2e322520 00206634 7366664f 203a7465      %2.4f .Offset: 
   24854:	00006625 696c6143 74617262 206e6f69     %f..Calibration 
   24864:	20202020 6e6f4420 00000065 6f727245          Done...Erro
   24874:	6e492072 6d726f66 6f697461 00003a6e     r Information:..
   24884:	41206f4e 74696464 616e6f69 7245206c     No Additional Er
   24894:	73726f72 00000000 52206f74 726f7065     rors....to Repor
   248a4:	6e692074 73614c20 00000074 4d206425     t in Last...%d M
   248b4:	75736165 656d6572 0073746e 7361654d     easurements.Meas
   248c4:	6d657275 20746e65 00006425 706f6f4c     urement %d..Loop
   248d4:	6e656c20 3a687467 312e2520 00000066      length: %.1f...
   248e4:	0000006d 70736944 6563616c 746e656d     m...Displacement
   248f4:	6f726620 3150206d 0000003a 69726f48      from P1:...Hori
   24904:	746e6f7a 203a6c61 66312e25 00000000     zontal: %.1f....
   24914:	74726556 6c616369 2e25203a 00006631     Vertical: %.1f..
   24924:	6d697a41 3a687475 312e2520 00000066     Azimuth: %.1f...
   24934:	756e654d 0000003a 6974704f 00736e6f     Menu:...Options.
   24944:	6f727245 6e492072 00006f66 696c6143     Error Info..Cali
   24954:	74617262 006e6f69 20746553 636f6c43     bration.Set Cloc
   24964:	0000006b 65756c42 746f6f74 00000068     k...Bluetooth...
   24974:	75626544 654d2067 0000756e 70736944     Debug Menu..Disp
   24984:	2079616c 6f706552 00007472 206c6143     lay Report..Cal 
   24994:	74736944 65636e61 00000000 206c6143     Distance....Cal 
   249a4:	204d5a41 4e492026 00004c43 706f6f4c     AZM & INCL..Loop
   249b4:	73655420 00000074 75626544 654d2067      Test...Debug Me
   249c4:	003a756e 736e6553 5220726f 44207761     nu:.Sensor Raw D
   249d4:	00617461 6b636142 6867696c 614d2074     ata.Backlight Ma
   249e4:	6c61756e 00000000 72616843 20726567     nual....Charger 
   249f4:	6f666e49 00000000 65746e45 00000072     Info....Enter...
   24a04:	636f7250 69737365 4420676e 2e617461     Processing Data.
   24a14:	00002e2e 6e696147 646e6120 66664f20     ....Gain and Off
   24a24:	20746573 006c6143 65636341 6f72656c     set Cal.Accelero
   24a34:	6574656d 20312072 20202020 00000020     meter 1      ...
   24a44:	65636341 6f72656c 6574656d 20322072     Accelerometer 2 
   24a54:	20202020 00000020 706d6f43 20737361          ...Compass 
   24a64:	20202031 20202020 20202020 00000020     1            ...
   24a74:	706d6f43 20737361 20202032 20202020     Compass 2       
   24a84:	20202020 00000020 6173694d 6e67696c          ...Misalign
   24a94:	746e656d 6c614320 5a59202c 00000000     ment Cal, YZ....
   24aa4:	72657449 6f697461 25203a6e 666f2064     Iteration: %d of
   24ab4:	20203320 00002020 6173694d 6e67696c      3    ..Misalign
   24ac4:	746e656d 6c614320 0058202c 6c617645     ment Cal, X.Eval
   24ad4:	69746175 5220676e 6c757365 20207374     uating Results  
   24ae4:	00000020 74697257 20676e69 6f706552      ...Writing Repo
   24af4:	20207472 20202020 00000020 696c6143     rt       ...Cali
   24b04:	74617262 206e6f69 706d6f43 6574656c     bration Complete
   24b14:	00000021 6f747541 206e7552 4f2f6e4f     !...AutoRun On/O
   24b24:	00006666 65736552 6e4f2074 66664f2f     ff..Reset On/Off
   24b34:	00000000 2041544f 4f2f6e4f 00006666     ....OTA On/Off..
   24b44:	5520434d 20545241 4f2f6e4f 00006666     MC UART On/Off..
   24b54:	65756c42 746f6f74 20203a68 41202020     Bluetooth:     A
   24b64:	73756a64 00000074 6b636142 00000000     djust...Back....
   24b74:	00006e4f 20746553 636f6c43 00003a6b     On..Set Clock:..
   24b84:	72616559 2020203a 30253032 00007832     Year:   20%02x..
   24b94:	746e6f4d 20203a68 78323025 00000000     Month:  %02x....
   24ba4:	65746144 2020203a 78323025 00000000     Date:   %02x....
   24bb4:	72756f48 2020203a 78323025 00000000     Hour:   %02x....
   24bc4:	756e694d 203a6574 78323025 00000000     Minute: %02x....
   24bd4:	6f636553 203a646e 78323025 00000000     Second: %02x....
   24be4:	0000002b 0000002d 7478654e 00000000     +...-...Next....
   24bf4:	636e6143 00006c65 0000003e 74736944     Cancel..>...Dist
   24c04:	65636e61 4620203a 00746565 74736944     ance:  Feet.Dist
   24c14:	65636e61 4d20203a 72657465 00000073     ance:  Meters...
   24c24:	706d6554 4620203a 65726861 6965686e     Temp:  Fahrenhei
   24c34:	00000074 706d6554 4320203a 69736c65     t...Temp:  Celsi
   24c44:	00007375 746f6853 6c654420 203a7961     us..Shot Delay: 
   24c54:	73206425 00006365 72616843 43206567     %d sec..Charge C
   24c64:	3a727275 6d642520 00000041 20727245     urr: %dmA...Err 
   24c74:	736e6553 3025203a 2066322e 00676564     Sens: %0.2f deg.
   24c84:	43204c42 726f6c6f 7325203a 00000000     BL Color: %s....
   24c94:	4c204c42 6c657665 6425203a 00000000     BL Level: %d....
   24ca4:	6974704f 3a736e6f 00000000 756a6441     Options:....Adju
   24cb4:	00007473                                st..

00024cb8 <mt2ft>:
   24cb8:	4051f948 34253a54 4666312e 00000000     H.Q@T:%4.1fF....
   24cc8:	34253a54 4366312e 00000000 78323025     T:%4.1fC....%02x
   24cd8:	3230253a 30253a78 00007832 30253a42     :%02x:%02x..B:%0
   24ce8:	25256432 00000000 30253a42 00006432     2d%%....B:%02d..
   24cf8:	00464552 54534944 00000000 004d5a41     REF.DIST....AZM.
   24d08:	4c434e49 00000000 00000045              INCL....E...

00024d14 <rad2deg>:
   24d14:	42652ee1 30253032 30257832 30257832     ..eB20%02x%02x%0
   24d24:	645f7832 66617461 2e656c69 00767363     2x_datafile.csv.
   24d34:	656d6954 6174532d 202c706d 65646e49     Time-Stamp, Inde
   24d44:	44202c78 61747369 2065636e 74656d28     x, Distance (met
   24d54:	29737265 7a41202c 74756d69 64282068     ers), Azimuth (d
   24d64:	65726765 2c297365 636e4920 616e696c     egrees), Inclina
   24d74:	6e6f6974 65642820 65657267 202c2973     tion (degrees), 
   24d84:	706d6554 74617265 20657275 6c654328     Temperature (Cel
   24d94:	73756973 20202c29 6f727245 6f4c2072     sius),  Error Lo
   24da4:	000a0d67 656d6954 6174532d 202c706d     g...Time-Stamp, 
   24db4:	65646e49 44202c78 61747369 2065636e     Index, Distance 
   24dc4:	65656628 202c2974 6d697a41 20687475     (feet), Azimuth 
   24dd4:	67656428 73656572 49202c29 696c636e     (degrees), Incli
   24de4:	6974616e 28206e6f 72676564 29736565     nation (degrees)
   24df4:	6554202c 7265706d 72757461 46282065     , Temperature (F
   24e04:	65726861 6965686e 202c2974 6f727245     ahrenheit), Erro
   24e14:	6f4c2072 000a0d67 30253032 252e7832     r Log...20%02x.%
   24e24:	2e783230 78323025 32302540 30253a78     02x.%02x@%02x:%0
   24e34:	253a7832 2c783230 00000000 2c642520     2x:%02x,.... %d,
   24e44:	332e2520 25202c66 2c66332e 332e2520      %.3f, %.3f, %.3
   24e54:	00002c66                                f,..

00024e58 <software_version>:
   24e58:	40800000 00776f70 74727173 00000000     ...@pow.sqrt....

00024e68 <npio2_hw>:
   24e68:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
   24e78:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
   24e88:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
   24e98:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
   24ea8:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
   24eb8:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
   24ec8:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
   24ed8:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

00024ee8 <two_over_pi>:
   24ee8:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
   24ef8:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
   24f08:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
   24f18:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
   24f28:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
   24f38:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
   24f48:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
   24f58:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
   24f68:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
   24f78:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
   24f88:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
   24f98:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
   24fa8:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
   24fb8:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
   24fc8:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
   24fd8:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
   24fe8:	0060e27b 00c08c6b                       {.`.k...

00024ff0 <PIo2>:
   24ff0:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
   25000:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
   25010:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
   25020:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

00025030 <init_jk>:
   25030:	00000002 00000003 00000004 00000006     ................

00025040 <atanhi>:
   25040:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
   25050:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?

00025060 <atanlo>:
   25060:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
   25070:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

00025080 <TWO52>:
   25080:	00000000 43300000 00000000 c3300000     ......0C......0.
   25090:	0001c954 0001c924 0001c936 0001c878     T...$...6...x...
   250a0:	0001c936 0001c91a 0001c936 0001c878     6.......6...x...
   250b0:	0001c924 0001c924 0001c91a 0001c878     $...$.......x...
   250c0:	0001c880 0001c880 0001c880 0001c93c     ............<...
   250d0:	0001c924 0001c924 0001c8f8 0001c9dc     $...$...........
   250e0:	0001c8f8 0001c91a 0001c8f8 0001c9dc     ................
   250f0:	0001c924 0001c924 0001c91a 0001c9dc     $...$...........
   25100:	0001c880 0001c880 0001c880 0001c9e6     ................
   25110:	0001ccd4 0001cc24 0001cc24 0001cc22     ....$...$..."...
   25120:	0001ccc6 0001ccc6 0001ccbc 0001cc22     ............"...
   25130:	0001ccc6 0001ccbc 0001ccc6 0001cc22     ............"...
   25140:	0001cccc 0001cccc 0001cccc 0001cd5c     ............\...
   25150:	0001daa4 0001da86 0001da40 0001d95e     ........@...^...
   25160:	0001da40 0001da78 0001da40 0001d95e     @...x...@...^...
   25170:	0001da86 0001da86 0001da78 0001d95e     ........x...^...
   25180:	0001d956 0001d956 0001d956 0001dcbc     V...V...V.......
   25190:	0001e304 0001e1c4 0001e1c4 0001e1c0     ................
   251a0:	0001e2dc 0001e2dc 0001e2ce 0001e1c0     ................
   251b0:	0001e2dc 0001e2ce 0001e2dc 0001e1c0     ................
   251c0:	0001e2e4 0001e2e4 0001e2e4 0001e4e8     ................

000251d0 <_global_impure_ptr>:
   251d0:	20000390 0001f8a4 0001f918 0001f918     ... ............
   251e0:	0001f888 0001f918 0001f918 0001f918     ................
   251f0:	0001f918 0001f918 0001f918 0001f890     ................
   25200:	0001f372 0001f918 0001f32c 0001f37c     r.......,...|...
   25210:	0001f918 0001f3c8 0001f5b2 0001f5b2     ................
   25220:	0001f5b2 0001f5b2 0001f5b2 0001f5b2     ................
   25230:	0001f5b2 0001f5b2 0001f5b2 0001f918     ................
   25240:	0001f918 0001f918 0001f918 0001f918     ................
   25250:	0001f918 0001f918 0001f918 0001f918     ................
   25260:	0001f918 0001f3d0 0001f518 0001f918     ................
   25270:	0001f518 0001f918 0001f918 0001f918     ................
   25280:	0001f918 0001f5e2 0001f918 0001f918     ................
   25290:	0001f5ea 0001f918 0001f918 0001f918     ................
   252a0:	0001f918 0001f918 0001f68c 0001f918     ................
   252b0:	0001f918 0001f6be 0001f918 0001f918     ................
   252c0:	0001f918 0001f918 0001f918 0001f918     ................
   252d0:	0001f918 0001f918 0001f918 0001f918     ................
   252e0:	0001f7b8 0001f7ec 0001f518 0001f518     ................
   252f0:	0001f518 0001f7fe 0001f7ec 0001f918     ................
   25300:	0001f918 0001f806 0001f918 0001f720     ............ ...
   25310:	0001f8e6 0001f85c 0001f756 0001f918     ....\...V.......
   25320:	0001f75e 0001f918 0001f8b4 0001f918     ^...............
   25330:	0001f918 0001f816 00464e49 00666e69     ........INF.inf.
   25340:	004e414e 006e616e 33323130 37363534     NAN.nan.01234567
   25350:	42413938 46454443 00000000 33323130     89ABCDEF....0123
   25360:	37363534 62613938 66656463 00000000     456789abcdef....
   25370:	6c756e28 0000296c 00000030              (null)..0...

0002537c <blanks.7223>:
   2537c:	20202020 20202020 20202020 20202020                     

0002538c <zeroes.7224>:
   2538c:	30303030 30303030 30303030 30303030     0000000000000000
   2539c:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   253ac:	00000000                                ....

000253b0 <__mprec_bigtens>:
   253b0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   253c0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   253d0:	7f73bf3c 75154fdd                       <.s..O.u

000253d8 <__mprec_tens>:
   253d8:	00000000 3ff00000 00000000 40240000     .......?......$@
   253e8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   253f8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   25408:	00000000 412e8480 00000000 416312d0     .......A......cA
   25418:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   25428:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   25438:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   25448:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   25458:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   25468:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   25478:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   25488:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   25498:	79d99db4 44ea7843                       ...yCx.D

000254a0 <p05.6055>:
   254a0:	00000005 00000019 0000007d 00000043     ........}...C...
   254b0:	49534f50 00000058                       POSIX...

000254b8 <_ctype_>:
   254b8:	20202000 20202020 28282020 20282828     .         ((((( 
   254c8:	20202020 20202020 20202020 20202020                     
   254d8:	10108820 10101010 10101010 10101010      ...............
   254e8:	04040410 04040404 10040404 10101010     ................
   254f8:	41411010 41414141 01010101 01010101     ..AAAAAA........
   25508:	01010101 01010101 01010101 10101010     ................
   25518:	42421010 42424242 02020202 02020202     ..BBBBBB........
   25528:	02020202 02020202 02020202 10101010     ................
   25538:	00000020 00000000 00000000 00000000      ...............
	...

000255bc <_init>:
   255bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   255be:	46c0      	nop			; (mov r8, r8)
   255c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   255c2:	bc08      	pop	{r3}
   255c4:	469e      	mov	lr, r3
   255c6:	4770      	bx	lr

000255c8 <__init_array_start>:
   255c8:	00020851 	.word	0x00020851

000255cc <__frame_dummy_init_array_entry>:
   255cc:	000000dd                                ....

000255d0 <_fini>:
   255d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   255d2:	46c0      	nop			; (mov r8, r8)
   255d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   255d6:	bc08      	pop	{r3}
   255d8:	469e      	mov	lr, r3
   255da:	4770      	bx	lr

000255dc <__fini_array_start>:
   255dc:	000000b5 	.word	0x000000b5
