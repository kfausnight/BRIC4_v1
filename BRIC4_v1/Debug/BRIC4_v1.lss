
BRIC4_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000272e4  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000272e4  000272e4  000372e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000c78  20000000  000272ec  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .lpram        00000000  30000000  30000000  00040c78  2**0
                  CONTENTS
  4 .bss          00004150  20000c78  00027f64  00040c78  2**2
                  ALLOC
  5 .stack        00002000  20004dc8  0002c0b4  00040c78  2**0
                  ALLOC
  6 .ARM.attributes 00000028  00000000  00000000  00040c78  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00040ca0  2**0
                  CONTENTS, READONLY
  8 .debug_info   000a0865  00000000  00000000  00040cf9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00009ccb  00000000  00000000  000e155e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000afd4  00000000  00000000  000eb229  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001e58  00000000  00000000  000f61fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001b90  00000000  00000000  000f8055  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00018396  00000000  00000000  000f9be5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00030ad9  00000000  00000000  00111f7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000aa953  00000000  00000000  00142a54  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00007c64  00000000  00000000  001ed3a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were given
 */
static enum status_code _rtc_count_set_config(
		struct rtc_module *const module,
		const struct rtc_count_config *const config)
{
       0:	c8 6d 00 20 15 71 00 00 a9 71 00 00 a9 71 00 00     .m. .q...q...q..
	...
	rtc_module->MODE0.CTRLA.reg = RTC_MODE0_CTRLA_MODE(0) | config->prescaler
			| (config->enable_read_sync << RTC_MODE0_CTRLA_COUNTSYNC_Pos);
#endif

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
      2c:	a9 71 00 00 00 00 00 00 00 00 00 00 a9 71 00 00     .q...........q..
		case RTC_COUNT_MODE_32BIT:
			/* Set 32-bit mode and clear on match if applicable. */
			rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MODE(0);

			/* Check if clear on compare match should be set. */
			if (config->clear_on_match) {
      3c:	a9 71 00 00 a9 71 00 00 51 12 00 00 01 52 00 00     .q...q..Q....R..
				/* Set clear on match. */
				rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MATCHCLR;
      4c:	bd 4b 00 00 a9 71 00 00 a9 71 00 00 d5 0f 00 00     .K...q...q......
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_COMP32_NUM; i++) {
      5c:	a9 71 00 00 c5 63 00 00 dd 63 00 00 f5 63 00 00     .q...c...c...c..
				rtc_count_set_compare(module, config->compare_values[i],
      6c:	0d 64 00 00 25 64 00 00 3d 64 00 00 a9 71 00 00     .d..%d..=d...q..
			for (uint8_t i = 0; i < RTC_COMP32_NUM; i++) {
      7c:	a9 71 00 00 a9 71 00 00 fd 69 00 00 11 6a 00 00     .q...q...i...j..
	...
			}
			break;

		case RTC_COUNT_MODE_16BIT:
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRLA.reg |= RTC_MODE1_CTRLA_MODE(1);
      94:	25 6a 00 00 a9 71 00 00 a9 71 00 00 a9 71 00 00     %j...q...q...q..

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
      a4:	a9 71 00 00 a9 71 00 00 a9 71 00 00 00 00 00 00     .q...q...q......

000000b4 <__do_global_dtors_aux>:
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
				rtc_count_set_compare(module, config->compare_values[i],
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000c78 	.word	0x20000c78
      d4:	00000000 	.word	0x00000000
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
      d8:	000272ec 	.word	0x000272ec

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
						(enum rtc_count_compare)i);
			}
			break;
      ee:	6803      	ldr	r3, [r0, #0]
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
	}

	/* Return status OK if everything was configured. */
	return STATUS_OK;
      f4:	bd10      	pop	{r4, pc}
}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000c7c 	.word	0x20000c7c
     108:	000272ec 	.word	0x000272ec
     10c:	000272ec 	.word	0x000272ec
     110:	00000000 	.word	0x00000000

00000114 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
     114:	b580      	push	{r7, lr}
     116:	b084      	sub	sp, #16
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	681b      	ldr	r3, [r3, #0]
     120:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
     122:	687b      	ldr	r3, [r7, #4]
     124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     126:	781b      	ldrb	r3, [r3, #0]
     128:	b2da      	uxtb	r2, r3
     12a:	230e      	movs	r3, #14
     12c:	18fb      	adds	r3, r7, r3
     12e:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
     130:	687b      	ldr	r3, [r7, #4]
     132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     134:	1c5a      	adds	r2, r3, #1
     136:	687b      	ldr	r3, [r7, #4]
     138:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     13a:	687b      	ldr	r3, [r7, #4]
     13c:	799b      	ldrb	r3, [r3, #6]
     13e:	2b01      	cmp	r3, #1
     140:	d113      	bne.n	16a <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
     142:	687b      	ldr	r3, [r7, #4]
     144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     146:	781b      	ldrb	r3, [r3, #0]
     148:	b2db      	uxtb	r3, r3
     14a:	021b      	lsls	r3, r3, #8
     14c:	b21a      	sxth	r2, r3
     14e:	230e      	movs	r3, #14
     150:	18fb      	adds	r3, r7, r3
     152:	2100      	movs	r1, #0
     154:	5e5b      	ldrsh	r3, [r3, r1]
     156:	4313      	orrs	r3, r2
     158:	b21a      	sxth	r2, r3
     15a:	230e      	movs	r3, #14
     15c:	18fb      	adds	r3, r7, r3
     15e:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
     160:	687b      	ldr	r3, [r7, #4]
     162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     164:	1c5a      	adds	r2, r3, #1
     166:	687b      	ldr	r3, [r7, #4]
     168:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
     16a:	230e      	movs	r3, #14
     16c:	18fb      	adds	r3, r7, r3
     16e:	881b      	ldrh	r3, [r3, #0]
     170:	05db      	lsls	r3, r3, #23
     172:	0dda      	lsrs	r2, r3, #23
     174:	68bb      	ldr	r3, [r7, #8]
     176:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
     178:	687b      	ldr	r3, [r7, #4]
     17a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
     17c:	b29b      	uxth	r3, r3
     17e:	3b01      	subs	r3, #1
     180:	b29a      	uxth	r2, r3
     182:	687b      	ldr	r3, [r7, #4]
     184:	869a      	strh	r2, [r3, #52]	; 0x34
}
     186:	46c0      	nop			; (mov r8, r8)
     188:	46bd      	mov	sp, r7
     18a:	b004      	add	sp, #16
     18c:	bd80      	pop	{r7, pc}
	...

00000190 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
     190:	b580      	push	{r7, lr}
     192:	b084      	sub	sp, #16
     194:	af00      	add	r7, sp, #0
     196:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     198:	687b      	ldr	r3, [r7, #4]
     19a:	681b      	ldr	r3, [r3, #0]
     19c:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
     19e:	4b08      	ldr	r3, [pc, #32]	; (1c0 <_spi_write_dummy+0x30>)
     1a0:	881b      	ldrh	r3, [r3, #0]
     1a2:	001a      	movs	r2, r3
     1a4:	68fb      	ldr	r3, [r7, #12]
     1a6:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
     1a8:	687b      	ldr	r3, [r7, #4]
     1aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
     1ac:	b29b      	uxth	r3, r3
     1ae:	3b01      	subs	r3, #1
     1b0:	b29a      	uxth	r2, r3
     1b2:	687b      	ldr	r3, [r7, #4]
     1b4:	865a      	strh	r2, [r3, #50]	; 0x32
}
     1b6:	46c0      	nop			; (mov r8, r8)
     1b8:	46bd      	mov	sp, r7
     1ba:	b004      	add	sp, #16
     1bc:	bd80      	pop	{r7, pc}
     1be:	46c0      	nop			; (mov r8, r8)
     1c0:	20000e48 	.word	0x20000e48

000001c4 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
     1c4:	b580      	push	{r7, lr}
     1c6:	b084      	sub	sp, #16
     1c8:	af00      	add	r7, sp, #0
     1ca:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     1cc:	687b      	ldr	r3, [r7, #4]
     1ce:	681b      	ldr	r3, [r3, #0]
     1d0:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
     1d2:	230a      	movs	r3, #10
     1d4:	18fb      	adds	r3, r7, r3
     1d6:	2200      	movs	r2, #0
     1d8:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
     1da:	68fb      	ldr	r3, [r7, #12]
     1dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     1de:	230a      	movs	r3, #10
     1e0:	18fb      	adds	r3, r7, r3
     1e2:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
     1e4:	687b      	ldr	r3, [r7, #4]
     1e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
     1e8:	b29b      	uxth	r3, r3
     1ea:	3b01      	subs	r3, #1
     1ec:	b29a      	uxth	r2, r3
     1ee:	687b      	ldr	r3, [r7, #4]
     1f0:	865a      	strh	r2, [r3, #50]	; 0x32
}
     1f2:	46c0      	nop			; (mov r8, r8)
     1f4:	46bd      	mov	sp, r7
     1f6:	b004      	add	sp, #16
     1f8:	bd80      	pop	{r7, pc}

000001fa <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
     1fa:	b580      	push	{r7, lr}
     1fc:	b084      	sub	sp, #16
     1fe:	af00      	add	r7, sp, #0
     200:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     202:	687b      	ldr	r3, [r7, #4]
     204:	681b      	ldr	r3, [r3, #0]
     206:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
     208:	68fb      	ldr	r3, [r7, #12]
     20a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     20c:	b29a      	uxth	r2, r3
     20e:	230a      	movs	r3, #10
     210:	18fb      	adds	r3, r7, r3
     212:	05d2      	lsls	r2, r2, #23
     214:	0dd2      	lsrs	r2, r2, #23
     216:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
     218:	687b      	ldr	r3, [r7, #4]
     21a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     21c:	220a      	movs	r2, #10
     21e:	18ba      	adds	r2, r7, r2
     220:	8812      	ldrh	r2, [r2, #0]
     222:	b2d2      	uxtb	r2, r2
     224:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
     226:	687b      	ldr	r3, [r7, #4]
     228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     22a:	1c5a      	adds	r2, r3, #1
     22c:	687b      	ldr	r3, [r7, #4]
     22e:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     230:	687b      	ldr	r3, [r7, #4]
     232:	799b      	ldrb	r3, [r3, #6]
     234:	2b01      	cmp	r3, #1
     236:	d10d      	bne.n	254 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
     238:	687b      	ldr	r3, [r7, #4]
     23a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     23c:	220a      	movs	r2, #10
     23e:	18ba      	adds	r2, r7, r2
     240:	8812      	ldrh	r2, [r2, #0]
     242:	0a12      	lsrs	r2, r2, #8
     244:	b292      	uxth	r2, r2
     246:	b2d2      	uxtb	r2, r2
     248:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
     24a:	687b      	ldr	r3, [r7, #4]
     24c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     24e:	1c5a      	adds	r2, r3, #1
     250:	687b      	ldr	r3, [r7, #4]
     252:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
     254:	687b      	ldr	r3, [r7, #4]
     256:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
     258:	b29b      	uxth	r3, r3
     25a:	3b01      	subs	r3, #1
     25c:	b29a      	uxth	r2, r3
     25e:	687b      	ldr	r3, [r7, #4]
     260:	861a      	strh	r2, [r3, #48]	; 0x30
}
     262:	46c0      	nop			; (mov r8, r8)
     264:	46bd      	mov	sp, r7
     266:	b004      	add	sp, #16
     268:	bd80      	pop	{r7, pc}
	...

0000026c <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
     26c:	b580      	push	{r7, lr}
     26e:	b086      	sub	sp, #24
     270:	af00      	add	r7, sp, #0
     272:	0002      	movs	r2, r0
     274:	1dfb      	adds	r3, r7, #7
     276:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
     278:	1dfb      	adds	r3, r7, #7
     27a:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
     27c:	4bb9      	ldr	r3, [pc, #740]	; (564 <_spi_interrupt_handler+0x2f8>)
     27e:	0092      	lsls	r2, r2, #2
     280:	58d3      	ldr	r3, [r2, r3]
     282:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     284:	697b      	ldr	r3, [r7, #20]
     286:	681b      	ldr	r3, [r3, #0]
     288:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
     28a:	697b      	ldr	r3, [r7, #20]
     28c:	2237      	movs	r2, #55	; 0x37
     28e:	5c9a      	ldrb	r2, [r3, r2]
     290:	697b      	ldr	r3, [r7, #20]
     292:	2136      	movs	r1, #54	; 0x36
     294:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
     296:	230f      	movs	r3, #15
     298:	18fb      	adds	r3, r7, r3
     29a:	400a      	ands	r2, r1
     29c:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
     29e:	693b      	ldr	r3, [r7, #16]
     2a0:	7e1b      	ldrb	r3, [r3, #24]
     2a2:	b2da      	uxtb	r2, r3
     2a4:	230c      	movs	r3, #12
     2a6:	18fb      	adds	r3, r7, r3
     2a8:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
     2aa:	693b      	ldr	r3, [r7, #16]
     2ac:	7d9b      	ldrb	r3, [r3, #22]
     2ae:	b2db      	uxtb	r3, r3
     2b0:	b29a      	uxth	r2, r3
     2b2:	230c      	movs	r3, #12
     2b4:	18fb      	adds	r3, r7, r3
     2b6:	210c      	movs	r1, #12
     2b8:	1879      	adds	r1, r7, r1
     2ba:	8809      	ldrh	r1, [r1, #0]
     2bc:	400a      	ands	r2, r1
     2be:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
     2c0:	230c      	movs	r3, #12
     2c2:	18fb      	adds	r3, r7, r3
     2c4:	881b      	ldrh	r3, [r3, #0]
     2c6:	2201      	movs	r2, #1
     2c8:	4013      	ands	r3, r2
     2ca:	d041      	beq.n	350 <_spi_interrupt_handler+0xe4>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     2cc:	697b      	ldr	r3, [r7, #20]
     2ce:	795b      	ldrb	r3, [r3, #5]
     2d0:	2b01      	cmp	r3, #1
     2d2:	d110      	bne.n	2f6 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
     2d4:	697b      	ldr	r3, [r7, #20]
     2d6:	7a5b      	ldrb	r3, [r3, #9]
     2d8:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
     2da:	2b00      	cmp	r3, #0
     2dc:	d10b      	bne.n	2f6 <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
     2de:	697b      	ldr	r3, [r7, #20]
     2e0:	0018      	movs	r0, r3
     2e2:	4ba1      	ldr	r3, [pc, #644]	; (568 <_spi_interrupt_handler+0x2fc>)
     2e4:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
     2e6:	697b      	ldr	r3, [r7, #20]
     2e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
     2ea:	b29b      	uxth	r3, r3
     2ec:	2b00      	cmp	r3, #0
     2ee:	d102      	bne.n	2f6 <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     2f0:	693b      	ldr	r3, [r7, #16]
     2f2:	2201      	movs	r2, #1
     2f4:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
     2f6:	697b      	ldr	r3, [r7, #20]
     2f8:	795b      	ldrb	r3, [r3, #5]
		if (0
     2fa:	2b01      	cmp	r3, #1
     2fc:	d104      	bne.n	308 <_spi_interrupt_handler+0x9c>
			(module->dir != SPI_DIRECTION_READ))
     2fe:	697b      	ldr	r3, [r7, #20]
     300:	7a5b      	ldrb	r3, [r3, #9]
     302:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
     304:	2b00      	cmp	r3, #0
     306:	d108      	bne.n	31a <_spi_interrupt_handler+0xae>
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
     308:	697b      	ldr	r3, [r7, #20]
     30a:	795b      	ldrb	r3, [r3, #5]
     30c:	2b00      	cmp	r3, #0
     30e:	d11f      	bne.n	350 <_spi_interrupt_handler+0xe4>
			(module->dir != SPI_DIRECTION_READ))
     310:	697b      	ldr	r3, [r7, #20]
     312:	7a5b      	ldrb	r3, [r3, #9]
     314:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_SLAVE) &&
     316:	2b00      	cmp	r3, #0
     318:	d01a      	beq.n	350 <_spi_interrupt_handler+0xe4>
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
     31a:	697b      	ldr	r3, [r7, #20]
     31c:	0018      	movs	r0, r3
     31e:	4b93      	ldr	r3, [pc, #588]	; (56c <_spi_interrupt_handler+0x300>)
     320:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
     322:	697b      	ldr	r3, [r7, #20]
     324:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
     326:	b29b      	uxth	r3, r3
     328:	2b00      	cmp	r3, #0
     32a:	d111      	bne.n	350 <_spi_interrupt_handler+0xe4>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     32c:	693b      	ldr	r3, [r7, #16]
     32e:	2201      	movs	r2, #1
     330:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
     332:	697b      	ldr	r3, [r7, #20]
     334:	7a5b      	ldrb	r3, [r3, #9]
     336:	b2db      	uxtb	r3, r3
     338:	2b01      	cmp	r3, #1
     33a:	d109      	bne.n	350 <_spi_interrupt_handler+0xe4>
						!(module->receiver_enabled)) {
     33c:	697b      	ldr	r3, [r7, #20]
     33e:	79db      	ldrb	r3, [r3, #7]
     340:	2201      	movs	r2, #1
     342:	4053      	eors	r3, r2
     344:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
     346:	2b00      	cmp	r3, #0
     348:	d002      	beq.n	350 <_spi_interrupt_handler+0xe4>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     34a:	693b      	ldr	r3, [r7, #16]
     34c:	2202      	movs	r2, #2
     34e:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
     350:	230c      	movs	r3, #12
     352:	18fb      	adds	r3, r7, r3
     354:	881b      	ldrh	r3, [r3, #0]
     356:	2204      	movs	r2, #4
     358:	4013      	ands	r3, r2
     35a:	d100      	bne.n	35e <_spi_interrupt_handler+0xf2>
     35c:	e07e      	b.n	45c <_spi_interrupt_handler+0x1f0>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     35e:	693b      	ldr	r3, [r7, #16]
     360:	8b5b      	ldrh	r3, [r3, #26]
     362:	b29b      	uxth	r3, r3
     364:	001a      	movs	r2, r3
     366:	2304      	movs	r3, #4
     368:	4013      	ands	r3, r2
     36a:	d022      	beq.n	3b2 <_spi_interrupt_handler+0x146>
			if (module->dir != SPI_DIRECTION_WRITE) {
     36c:	697b      	ldr	r3, [r7, #20]
     36e:	7a5b      	ldrb	r3, [r3, #9]
     370:	b2db      	uxtb	r3, r3
     372:	2b01      	cmp	r3, #1
     374:	d014      	beq.n	3a0 <_spi_interrupt_handler+0x134>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
     376:	697b      	ldr	r3, [r7, #20]
     378:	2238      	movs	r2, #56	; 0x38
     37a:	211e      	movs	r1, #30
     37c:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
     37e:	697b      	ldr	r3, [r7, #20]
     380:	2203      	movs	r2, #3
     382:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
     384:	693b      	ldr	r3, [r7, #16]
     386:	2205      	movs	r2, #5
     388:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
     38a:	230f      	movs	r3, #15
     38c:	18fb      	adds	r3, r7, r3
     38e:	781b      	ldrb	r3, [r3, #0]
     390:	2208      	movs	r2, #8
     392:	4013      	ands	r3, r2
     394:	d004      	beq.n	3a0 <_spi_interrupt_handler+0x134>
					(module->callback[SPI_CALLBACK_ERROR])(module);
     396:	697b      	ldr	r3, [r7, #20]
     398:	699b      	ldr	r3, [r3, #24]
     39a:	697a      	ldr	r2, [r7, #20]
     39c:	0010      	movs	r0, r2
     39e:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
     3a0:	693b      	ldr	r3, [r7, #16]
     3a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     3a4:	230a      	movs	r3, #10
     3a6:	18fb      	adds	r3, r7, r3
     3a8:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     3aa:	693b      	ldr	r3, [r7, #16]
     3ac:	2204      	movs	r2, #4
     3ae:	835a      	strh	r2, [r3, #26]
     3b0:	e054      	b.n	45c <_spi_interrupt_handler+0x1f0>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
     3b2:	697b      	ldr	r3, [r7, #20]
     3b4:	7a5b      	ldrb	r3, [r3, #9]
     3b6:	b2db      	uxtb	r3, r3
     3b8:	2b01      	cmp	r3, #1
     3ba:	d11e      	bne.n	3fa <_spi_interrupt_handler+0x18e>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
     3bc:	697b      	ldr	r3, [r7, #20]
     3be:	0018      	movs	r0, r3
     3c0:	4b6b      	ldr	r3, [pc, #428]	; (570 <_spi_interrupt_handler+0x304>)
     3c2:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
     3c4:	697b      	ldr	r3, [r7, #20]
     3c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
     3c8:	b29b      	uxth	r3, r3
     3ca:	2b00      	cmp	r3, #0
     3cc:	d146      	bne.n	45c <_spi_interrupt_handler+0x1f0>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
     3ce:	693b      	ldr	r3, [r7, #16]
     3d0:	2204      	movs	r2, #4
     3d2:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
     3d4:	697b      	ldr	r3, [r7, #20]
     3d6:	2238      	movs	r2, #56	; 0x38
     3d8:	2100      	movs	r1, #0
     3da:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
     3dc:	697b      	ldr	r3, [r7, #20]
     3de:	2203      	movs	r2, #3
     3e0:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
     3e2:	230f      	movs	r3, #15
     3e4:	18fb      	adds	r3, r7, r3
     3e6:	781b      	ldrb	r3, [r3, #0]
     3e8:	2201      	movs	r2, #1
     3ea:	4013      	ands	r3, r2
     3ec:	d036      	beq.n	45c <_spi_interrupt_handler+0x1f0>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
     3ee:	697b      	ldr	r3, [r7, #20]
     3f0:	68db      	ldr	r3, [r3, #12]
     3f2:	697a      	ldr	r2, [r7, #20]
     3f4:	0010      	movs	r0, r2
     3f6:	4798      	blx	r3
     3f8:	e030      	b.n	45c <_spi_interrupt_handler+0x1f0>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
     3fa:	697b      	ldr	r3, [r7, #20]
     3fc:	0018      	movs	r0, r3
     3fe:	4b5d      	ldr	r3, [pc, #372]	; (574 <_spi_interrupt_handler+0x308>)
     400:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
     402:	697b      	ldr	r3, [r7, #20]
     404:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
     406:	b29b      	uxth	r3, r3
     408:	2b00      	cmp	r3, #0
     40a:	d127      	bne.n	45c <_spi_interrupt_handler+0x1f0>
					module->status = STATUS_OK;
     40c:	697b      	ldr	r3, [r7, #20]
     40e:	2238      	movs	r2, #56	; 0x38
     410:	2100      	movs	r1, #0
     412:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
     414:	693b      	ldr	r3, [r7, #16]
     416:	2204      	movs	r2, #4
     418:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
     41a:	697b      	ldr	r3, [r7, #20]
     41c:	7a5b      	ldrb	r3, [r3, #9]
     41e:	b2db      	uxtb	r3, r3
     420:	2b02      	cmp	r3, #2
     422:	d10b      	bne.n	43c <_spi_interrupt_handler+0x1d0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
     424:	230f      	movs	r3, #15
     426:	18fb      	adds	r3, r7, r3
     428:	781b      	ldrb	r3, [r3, #0]
     42a:	2204      	movs	r2, #4
     42c:	4013      	ands	r3, r2
     42e:	d015      	beq.n	45c <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
     430:	697b      	ldr	r3, [r7, #20]
     432:	695b      	ldr	r3, [r3, #20]
     434:	697a      	ldr	r2, [r7, #20]
     436:	0010      	movs	r0, r2
     438:	4798      	blx	r3
     43a:	e00f      	b.n	45c <_spi_interrupt_handler+0x1f0>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
     43c:	697b      	ldr	r3, [r7, #20]
     43e:	7a5b      	ldrb	r3, [r3, #9]
     440:	b2db      	uxtb	r3, r3
     442:	2b00      	cmp	r3, #0
     444:	d10a      	bne.n	45c <_spi_interrupt_handler+0x1f0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
     446:	230f      	movs	r3, #15
     448:	18fb      	adds	r3, r7, r3
     44a:	781b      	ldrb	r3, [r3, #0]
     44c:	2202      	movs	r2, #2
     44e:	4013      	ands	r3, r2
     450:	d004      	beq.n	45c <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
     452:	697b      	ldr	r3, [r7, #20]
     454:	691b      	ldr	r3, [r3, #16]
     456:	697a      	ldr	r2, [r7, #20]
     458:	0010      	movs	r0, r2
     45a:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
     45c:	230c      	movs	r3, #12
     45e:	18fb      	adds	r3, r7, r3
     460:	881b      	ldrh	r3, [r3, #0]
     462:	2202      	movs	r2, #2
     464:	4013      	ands	r3, r2
     466:	d046      	beq.n	4f6 <_spi_interrupt_handler+0x28a>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
     468:	697b      	ldr	r3, [r7, #20]
     46a:	795b      	ldrb	r3, [r3, #5]
     46c:	2b00      	cmp	r3, #0
     46e:	d11d      	bne.n	4ac <_spi_interrupt_handler+0x240>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
     470:	693b      	ldr	r3, [r7, #16]
     472:	2207      	movs	r2, #7
     474:	751a      	strb	r2, [r3, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     476:	693b      	ldr	r3, [r7, #16]
     478:	2202      	movs	r2, #2
     47a:	761a      	strb	r2, [r3, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
     47c:	697b      	ldr	r3, [r7, #20]
     47e:	2203      	movs	r2, #3
     480:	725a      	strb	r2, [r3, #9]
			module->remaining_tx_buffer_length = 0;
     482:	697b      	ldr	r3, [r7, #20]
     484:	2200      	movs	r2, #0
     486:	869a      	strh	r2, [r3, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
     488:	697b      	ldr	r3, [r7, #20]
     48a:	2200      	movs	r2, #0
     48c:	861a      	strh	r2, [r3, #48]	; 0x30
			module->status = STATUS_OK;
     48e:	697b      	ldr	r3, [r7, #20]
     490:	2238      	movs	r2, #56	; 0x38
     492:	2100      	movs	r1, #0
     494:	5499      	strb	r1, [r3, r2]

			if (callback_mask &
     496:	230f      	movs	r3, #15
     498:	18fb      	adds	r3, r7, r3
     49a:	781b      	ldrb	r3, [r3, #0]
     49c:	2210      	movs	r2, #16
     49e:	4013      	ands	r3, r2
     4a0:	d004      	beq.n	4ac <_spi_interrupt_handler+0x240>
					(1 << SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE)) {
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
     4a2:	697b      	ldr	r3, [r7, #20]
     4a4:	69db      	ldr	r3, [r3, #28]
     4a6:	697a      	ldr	r2, [r7, #20]
     4a8:	0010      	movs	r0, r2
     4aa:	4798      	blx	r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     4ac:	697b      	ldr	r3, [r7, #20]
     4ae:	795b      	ldrb	r3, [r3, #5]
     4b0:	2b01      	cmp	r3, #1
     4b2:	d120      	bne.n	4f6 <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
     4b4:	697b      	ldr	r3, [r7, #20]
     4b6:	7a5b      	ldrb	r3, [r3, #9]
     4b8:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
     4ba:	2b01      	cmp	r3, #1
     4bc:	d11b      	bne.n	4f6 <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
     4be:	697b      	ldr	r3, [r7, #20]
     4c0:	79db      	ldrb	r3, [r3, #7]
     4c2:	2201      	movs	r2, #1
     4c4:	4053      	eors	r3, r2
     4c6:	b2db      	uxtb	r3, r3
     4c8:	2b00      	cmp	r3, #0
     4ca:	d014      	beq.n	4f6 <_spi_interrupt_handler+0x28a>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
     4cc:	693b      	ldr	r3, [r7, #16]
     4ce:	2202      	movs	r2, #2
     4d0:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
     4d2:	697b      	ldr	r3, [r7, #20]
     4d4:	2203      	movs	r2, #3
     4d6:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
     4d8:	697b      	ldr	r3, [r7, #20]
     4da:	2238      	movs	r2, #56	; 0x38
     4dc:	2100      	movs	r1, #0
     4de:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
     4e0:	230f      	movs	r3, #15
     4e2:	18fb      	adds	r3, r7, r3
     4e4:	781b      	ldrb	r3, [r3, #0]
     4e6:	2201      	movs	r2, #1
     4e8:	4013      	ands	r3, r2
     4ea:	d004      	beq.n	4f6 <_spi_interrupt_handler+0x28a>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
     4ec:	697b      	ldr	r3, [r7, #20]
     4ee:	68db      	ldr	r3, [r3, #12]
     4f0:	697a      	ldr	r2, [r7, #20]
     4f2:	0010      	movs	r0, r2
     4f4:	4798      	blx	r3
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
     4f6:	230c      	movs	r3, #12
     4f8:	18fb      	adds	r3, r7, r3
     4fa:	881b      	ldrh	r3, [r3, #0]
     4fc:	2208      	movs	r2, #8
     4fe:	4013      	ands	r3, r2
     500:	d014      	beq.n	52c <_spi_interrupt_handler+0x2c0>
			if (module->mode == SPI_MODE_SLAVE) {
     502:	697b      	ldr	r3, [r7, #20]
     504:	795b      	ldrb	r3, [r3, #5]
     506:	2b00      	cmp	r3, #0
     508:	d110      	bne.n	52c <_spi_interrupt_handler+0x2c0>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
     50a:	693b      	ldr	r3, [r7, #16]
     50c:	2208      	movs	r2, #8
     50e:	751a      	strb	r2, [r3, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
     510:	693b      	ldr	r3, [r7, #16]
     512:	2208      	movs	r2, #8
     514:	761a      	strb	r2, [r3, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
     516:	230f      	movs	r3, #15
     518:	18fb      	adds	r3, r7, r3
     51a:	781b      	ldrb	r3, [r3, #0]
     51c:	2220      	movs	r2, #32
     51e:	4013      	ands	r3, r2
     520:	d004      	beq.n	52c <_spi_interrupt_handler+0x2c0>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
     522:	697b      	ldr	r3, [r7, #20]
     524:	6a1b      	ldr	r3, [r3, #32]
     526:	697a      	ldr	r2, [r7, #20]
     528:	0010      	movs	r0, r2
     52a:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
     52c:	230c      	movs	r3, #12
     52e:	18fb      	adds	r3, r7, r3
     530:	881b      	ldrh	r3, [r3, #0]
     532:	2280      	movs	r2, #128	; 0x80
     534:	4013      	ands	r3, r2
     536:	d010      	beq.n	55a <_spi_interrupt_handler+0x2ee>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
     538:	693b      	ldr	r3, [r7, #16]
     53a:	2280      	movs	r2, #128	; 0x80
     53c:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
     53e:	693b      	ldr	r3, [r7, #16]
     540:	2280      	movs	r2, #128	; 0x80
     542:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
     544:	230f      	movs	r3, #15
     546:	18fb      	adds	r3, r7, r3
     548:	781b      	ldrb	r3, [r3, #0]
     54a:	2240      	movs	r2, #64	; 0x40
     54c:	4013      	ands	r3, r2
     54e:	d004      	beq.n	55a <_spi_interrupt_handler+0x2ee>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
     550:	697b      	ldr	r3, [r7, #20]
     552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     554:	697a      	ldr	r2, [r7, #20]
     556:	0010      	movs	r0, r2
     558:	4798      	blx	r3
		}
	}
#  endif
}
     55a:	46c0      	nop			; (mov r8, r8)
     55c:	46bd      	mov	sp, r7
     55e:	b006      	add	sp, #24
     560:	bd80      	pop	{r7, pc}
     562:	46c0      	nop			; (mov r8, r8)
     564:	20001224 	.word	0x20001224
     568:	00000191 	.word	0x00000191
     56c:	00000115 	.word	0x00000115
     570:	000001c5 	.word	0x000001c5
     574:	000001fb 	.word	0x000001fb

00000578 <_usb_host_interrupt_handler>:
 *   (Device dis/connection, SOF, reset, resume, wakeup, error)
 * - Pipe events
 *   (End of data transfer, setup, stall, error)
 */
static void _usb_host_interrupt_handler(void)
{
     578:	b580      	push	{r7, lr}
     57a:	b082      	sub	sp, #8
     57c:	af00      	add	r7, sp, #0
	uint32_t pipe_int;
	uint32_t flags;

	/* Manage pipe interrupts */
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
     57e:	4bc0      	ldr	r3, [pc, #768]	; (880 <_usb_host_interrupt_handler+0x308>)
     580:	681b      	ldr	r3, [r3, #0]
     582:	681b      	ldr	r3, [r3, #0]
     584:	8c1b      	ldrh	r3, [r3, #32]
     586:	b29b      	uxth	r3, r3
     588:	2b00      	cmp	r3, #0
     58a:	d00a      	beq.n	5a2 <_usb_host_interrupt_handler+0x2a>
     58c:	4bbc      	ldr	r3, [pc, #752]	; (880 <_usb_host_interrupt_handler+0x308>)
     58e:	681b      	ldr	r3, [r3, #0]
     590:	681b      	ldr	r3, [r3, #0]
     592:	8c1b      	ldrh	r3, [r3, #32]
     594:	b29b      	uxth	r3, r3
     596:	001a      	movs	r2, r3
     598:	4bba      	ldr	r3, [pc, #744]	; (884 <_usb_host_interrupt_handler+0x30c>)
     59a:	0010      	movs	r0, r2
     59c:	4798      	blx	r3
     59e:	0003      	movs	r3, r0
     5a0:	e000      	b.n	5a4 <_usb_host_interrupt_handler+0x2c>
     5a2:	2320      	movs	r3, #32
     5a4:	607b      	str	r3, [r7, #4]
	if (pipe_int < 32) {
     5a6:	687b      	ldr	r3, [r7, #4]
     5a8:	2b1f      	cmp	r3, #31
     5aa:	d900      	bls.n	5ae <_usb_host_interrupt_handler+0x36>
     5ac:	e174      	b.n	898 <_usb_host_interrupt_handler+0x320>
		/* pipe interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
     5ae:	4bb4      	ldr	r3, [pc, #720]	; (880 <_usb_host_interrupt_handler+0x308>)
     5b0:	681b      	ldr	r3, [r3, #0]
     5b2:	681a      	ldr	r2, [r3, #0]
     5b4:	687b      	ldr	r3, [r7, #4]
     5b6:	3308      	adds	r3, #8
     5b8:	015b      	lsls	r3, r3, #5
     5ba:	18d3      	adds	r3, r2, r3
     5bc:	3307      	adds	r3, #7
     5be:	781b      	ldrb	r3, [r3, #0]
     5c0:	b2db      	uxtb	r3, r3
     5c2:	603b      	str	r3, [r7, #0]

		/* host pipe transfer complete interrupt */
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
     5c4:	683b      	ldr	r3, [r7, #0]
     5c6:	2203      	movs	r2, #3
     5c8:	4013      	ands	r3, r2
     5ca:	d100      	bne.n	5ce <_usb_host_interrupt_handler+0x56>
     5cc:	e088      	b.n	6e0 <_usb_host_interrupt_handler+0x168>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
     5ce:	2201      	movs	r2, #1
     5d0:	687b      	ldr	r3, [r7, #4]
     5d2:	409a      	lsls	r2, r3
     5d4:	0013      	movs	r3, r2
     5d6:	43db      	mvns	r3, r3
     5d8:	001a      	movs	r2, r3
     5da:	4bab      	ldr	r3, [pc, #684]	; (888 <_usb_host_interrupt_handler+0x310>)
     5dc:	681b      	ldr	r3, [r3, #0]
     5de:	401a      	ands	r2, r3
     5e0:	4ba9      	ldr	r3, [pc, #676]	; (888 <_usb_host_interrupt_handler+0x310>)
     5e2:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
     5e4:	4ba6      	ldr	r3, [pc, #664]	; (880 <_usb_host_interrupt_handler+0x308>)
     5e6:	681b      	ldr	r3, [r3, #0]
     5e8:	681a      	ldr	r2, [r3, #0]
     5ea:	687b      	ldr	r3, [r7, #4]
     5ec:	3308      	adds	r3, #8
     5ee:	015b      	lsls	r3, r3, #5
     5f0:	18d3      	adds	r3, r2, r3
     5f2:	3307      	adds	r3, #7
     5f4:	2203      	movs	r2, #3
     5f6:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_TRCPT_Msk;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
     5f8:	4ba1      	ldr	r3, [pc, #644]	; (880 <_usb_host_interrupt_handler+0x308>)
     5fa:	681a      	ldr	r2, [r3, #0]
     5fc:	21ae      	movs	r1, #174	; 0xae
     5fe:	687b      	ldr	r3, [r7, #4]
     600:	18d3      	adds	r3, r2, r3
     602:	185b      	adds	r3, r3, r1
     604:	781b      	ldrb	r3, [r3, #0]
     606:	001a      	movs	r2, r3
     608:	2301      	movs	r3, #1
     60a:	4013      	ands	r3, r2
     60c:	d068      	beq.n	6e0 <_usb_host_interrupt_handler+0x168>
					(1 << USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE)) {
				pipe_callback_para.pipe_num = pipe_int;
     60e:	687b      	ldr	r3, [r7, #4]
     610:	b2da      	uxtb	r2, r3
     612:	4b9e      	ldr	r3, [pc, #632]	; (88c <_usb_host_interrupt_handler+0x314>)
     614:	701a      	strb	r2, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
     616:	4b9a      	ldr	r3, [pc, #616]	; (880 <_usb_host_interrupt_handler+0x308>)
     618:	681b      	ldr	r3, [r3, #0]
     61a:	681b      	ldr	r3, [r3, #0]
     61c:	687a      	ldr	r2, [r7, #4]
     61e:	3208      	adds	r2, #8
     620:	0152      	lsls	r2, r2, #5
     622:	5cd3      	ldrb	r3, [r2, r3]
     624:	079b      	lsls	r3, r3, #30
     626:	0f9b      	lsrs	r3, r3, #30
     628:	b2db      	uxtb	r3, r3
     62a:	2b01      	cmp	r3, #1
     62c:	d11e      	bne.n	66c <_usb_host_interrupt_handler+0xf4>
							USB_HOST_PIPE_TOKEN_IN) {
					/* in  */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
     62e:	4a98      	ldr	r2, [pc, #608]	; (890 <_usb_host_interrupt_handler+0x318>)
     630:	687b      	ldr	r3, [r7, #4]
     632:	015b      	lsls	r3, r3, #5
     634:	18d3      	adds	r3, r2, r3
     636:	685b      	ldr	r3, [r3, #4]
     638:	049b      	lsls	r3, r3, #18
     63a:	0c9b      	lsrs	r3, r3, #18
     63c:	b29b      	uxth	r3, r3
     63e:	001a      	movs	r2, r3
     640:	4b92      	ldr	r3, [pc, #584]	; (88c <_usb_host_interrupt_handler+0x314>)
     642:	805a      	strh	r2, [r3, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
     644:	4a92      	ldr	r2, [pc, #584]	; (890 <_usb_host_interrupt_handler+0x318>)
     646:	687b      	ldr	r3, [r7, #4]
     648:	015b      	lsls	r3, r3, #5
     64a:	18d3      	adds	r3, r2, r3
     64c:	685b      	ldr	r3, [r3, #4]
     64e:	011b      	lsls	r3, r3, #4
     650:	0c9b      	lsrs	r3, r3, #18
     652:	b29b      	uxth	r3, r3
     654:	001a      	movs	r2, r3
     656:	4b8d      	ldr	r3, [pc, #564]	; (88c <_usb_host_interrupt_handler+0x314>)
     658:	809a      	strh	r2, [r3, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
     65a:	4a8d      	ldr	r2, [pc, #564]	; (890 <_usb_host_interrupt_handler+0x318>)
     65c:	687b      	ldr	r3, [r7, #4]
     65e:	015b      	lsls	r3, r3, #5
     660:	18d3      	adds	r3, r2, r3
     662:	685a      	ldr	r2, [r3, #4]
     664:	0b92      	lsrs	r2, r2, #14
     666:	0392      	lsls	r2, r2, #14
     668:	605a      	str	r2, [r3, #4]
     66a:	e02c      	b.n	6c6 <_usb_host_interrupt_handler+0x14e>
				} else {
					/* out */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
     66c:	4a88      	ldr	r2, [pc, #544]	; (890 <_usb_host_interrupt_handler+0x318>)
     66e:	687b      	ldr	r3, [r7, #4]
     670:	015b      	lsls	r3, r3, #5
     672:	18d3      	adds	r3, r2, r3
     674:	685b      	ldr	r3, [r3, #4]
     676:	011b      	lsls	r3, r3, #4
     678:	0c9b      	lsrs	r3, r3, #18
     67a:	b29b      	uxth	r3, r3
     67c:	001a      	movs	r2, r3
     67e:	4b83      	ldr	r3, [pc, #524]	; (88c <_usb_host_interrupt_handler+0x314>)
     680:	805a      	strh	r2, [r3, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
     682:	4a83      	ldr	r2, [pc, #524]	; (890 <_usb_host_interrupt_handler+0x318>)
     684:	687b      	ldr	r3, [r7, #4]
     686:	015b      	lsls	r3, r3, #5
     688:	18d3      	adds	r3, r2, r3
     68a:	685b      	ldr	r3, [r3, #4]
     68c:	049b      	lsls	r3, r3, #18
     68e:	0c9b      	lsrs	r3, r3, #18
     690:	b29b      	uxth	r3, r3
     692:	001a      	movs	r2, r3
     694:	4b7d      	ldr	r3, [pc, #500]	; (88c <_usb_host_interrupt_handler+0x314>)
     696:	809a      	strh	r2, [r3, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
     698:	4a7d      	ldr	r2, [pc, #500]	; (890 <_usb_host_interrupt_handler+0x318>)
     69a:	687b      	ldr	r3, [r7, #4]
     69c:	015b      	lsls	r3, r3, #5
     69e:	18d3      	adds	r3, r2, r3
     6a0:	685a      	ldr	r2, [r3, #4]
     6a2:	497c      	ldr	r1, [pc, #496]	; (894 <_usb_host_interrupt_handler+0x31c>)
     6a4:	400a      	ands	r2, r1
     6a6:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
     6a8:	4b78      	ldr	r3, [pc, #480]	; (88c <_usb_host_interrupt_handler+0x314>)
     6aa:	885b      	ldrh	r3, [r3, #2]
     6ac:	2b00      	cmp	r3, #0
     6ae:	d10a      	bne.n	6c6 <_usb_host_interrupt_handler+0x14e>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
     6b0:	4a77      	ldr	r2, [pc, #476]	; (890 <_usb_host_interrupt_handler+0x318>)
     6b2:	687b      	ldr	r3, [r7, #4]
     6b4:	015b      	lsls	r3, r3, #5
     6b6:	18d3      	adds	r3, r2, r3
     6b8:	685b      	ldr	r3, [r3, #4]
     6ba:	049b      	lsls	r3, r3, #18
     6bc:	0c9b      	lsrs	r3, r3, #18
     6be:	b29b      	uxth	r3, r3
     6c0:	001a      	movs	r2, r3
     6c2:	4b72      	ldr	r3, [pc, #456]	; (88c <_usb_host_interrupt_handler+0x314>)
     6c4:	805a      	strh	r2, [r3, #2]
					}
				}
				(_usb_instances->host_pipe_callback[pipe_int]
     6c6:	4b6e      	ldr	r3, [pc, #440]	; (880 <_usb_host_interrupt_handler+0x308>)
     6c8:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
     6ca:	687b      	ldr	r3, [r7, #4]
     6cc:	3302      	adds	r3, #2
     6ce:	011b      	lsls	r3, r3, #4
     6d0:	18d3      	adds	r3, r2, r3
     6d2:	3304      	adds	r3, #4
     6d4:	681a      	ldr	r2, [r3, #0]
     6d6:	4b6a      	ldr	r3, [pc, #424]	; (880 <_usb_host_interrupt_handler+0x308>)
     6d8:	681b      	ldr	r3, [r3, #0]
     6da:	496c      	ldr	r1, [pc, #432]	; (88c <_usb_host_interrupt_handler+0x314>)
     6dc:	0018      	movs	r0, r3
     6de:	4790      	blx	r2
			}
		}

		/* host pipe transfer fail interrupt */
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
     6e0:	683b      	ldr	r3, [r7, #0]
     6e2:	2204      	movs	r2, #4
     6e4:	4013      	ands	r3, r2
     6e6:	d014      	beq.n	712 <_usb_host_interrupt_handler+0x19a>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
     6e8:	2201      	movs	r2, #1
     6ea:	687b      	ldr	r3, [r7, #4]
     6ec:	409a      	lsls	r2, r3
     6ee:	0013      	movs	r3, r2
     6f0:	43db      	mvns	r3, r3
     6f2:	001a      	movs	r2, r3
     6f4:	4b64      	ldr	r3, [pc, #400]	; (888 <_usb_host_interrupt_handler+0x310>)
     6f6:	681b      	ldr	r3, [r3, #0]
     6f8:	401a      	ands	r2, r3
     6fa:	4b63      	ldr	r3, [pc, #396]	; (888 <_usb_host_interrupt_handler+0x310>)
     6fc:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
     6fe:	4b60      	ldr	r3, [pc, #384]	; (880 <_usb_host_interrupt_handler+0x308>)
     700:	681b      	ldr	r3, [r3, #0]
     702:	681a      	ldr	r2, [r3, #0]
     704:	687b      	ldr	r3, [r7, #4]
     706:	3308      	adds	r3, #8
     708:	015b      	lsls	r3, r3, #5
     70a:	18d3      	adds	r3, r2, r3
     70c:	3307      	adds	r3, #7
     70e:	2204      	movs	r2, #4
     710:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_TRFAIL;
		}

		/* host pipe error interrupt */
		if (flags & USB_HOST_PINTFLAG_PERR) {
     712:	683b      	ldr	r3, [r7, #0]
     714:	2208      	movs	r2, #8
     716:	4013      	ands	r3, r2
     718:	d03c      	beq.n	794 <_usb_host_interrupt_handler+0x21c>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
     71a:	2201      	movs	r2, #1
     71c:	687b      	ldr	r3, [r7, #4]
     71e:	409a      	lsls	r2, r3
     720:	0013      	movs	r3, r2
     722:	43db      	mvns	r3, r3
     724:	001a      	movs	r2, r3
     726:	4b58      	ldr	r3, [pc, #352]	; (888 <_usb_host_interrupt_handler+0x310>)
     728:	681b      	ldr	r3, [r3, #0]
     72a:	401a      	ands	r2, r3
     72c:	4b56      	ldr	r3, [pc, #344]	; (888 <_usb_host_interrupt_handler+0x310>)
     72e:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
     730:	4b53      	ldr	r3, [pc, #332]	; (880 <_usb_host_interrupt_handler+0x308>)
     732:	681b      	ldr	r3, [r3, #0]
     734:	681a      	ldr	r2, [r3, #0]
     736:	687b      	ldr	r3, [r7, #4]
     738:	3308      	adds	r3, #8
     73a:	015b      	lsls	r3, r3, #5
     73c:	18d3      	adds	r3, r2, r3
     73e:	3307      	adds	r3, #7
     740:	2208      	movs	r2, #8
     742:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
     744:	4b4e      	ldr	r3, [pc, #312]	; (880 <_usb_host_interrupt_handler+0x308>)
     746:	681a      	ldr	r2, [r3, #0]
     748:	21ae      	movs	r1, #174	; 0xae
     74a:	687b      	ldr	r3, [r7, #4]
     74c:	18d3      	adds	r3, r2, r3
     74e:	185b      	adds	r3, r3, r1
     750:	781b      	ldrb	r3, [r3, #0]
     752:	001a      	movs	r2, r3
     754:	2302      	movs	r3, #2
     756:	4013      	ands	r3, r2
     758:	d01c      	beq.n	794 <_usb_host_interrupt_handler+0x21c>
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
     75a:	687b      	ldr	r3, [r7, #4]
     75c:	b2da      	uxtb	r2, r3
     75e:	4b4b      	ldr	r3, [pc, #300]	; (88c <_usb_host_interrupt_handler+0x314>)
     760:	701a      	strb	r2, [r3, #0]
				pipe_callback_para.pipe_error_status =
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
     762:	4a4b      	ldr	r2, [pc, #300]	; (890 <_usb_host_interrupt_handler+0x318>)
     764:	687b      	ldr	r3, [r7, #4]
     766:	015b      	lsls	r3, r3, #5
     768:	18d3      	adds	r3, r2, r3
     76a:	330e      	adds	r3, #14
     76c:	881b      	ldrh	r3, [r3, #0]
     76e:	b29b      	uxth	r3, r3
     770:	b2db      	uxtb	r3, r3
     772:	221f      	movs	r2, #31
     774:	4013      	ands	r3, r2
     776:	b2da      	uxtb	r2, r3
				pipe_callback_para.pipe_error_status =
     778:	4b44      	ldr	r3, [pc, #272]	; (88c <_usb_host_interrupt_handler+0x314>)
     77a:	705a      	strb	r2, [r3, #1]
				(_usb_instances->host_pipe_callback[pipe_int]
     77c:	4b40      	ldr	r3, [pc, #256]	; (880 <_usb_host_interrupt_handler+0x308>)
     77e:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
     780:	687b      	ldr	r3, [r7, #4]
     782:	011b      	lsls	r3, r3, #4
     784:	18d3      	adds	r3, r2, r3
     786:	3328      	adds	r3, #40	; 0x28
     788:	681a      	ldr	r2, [r3, #0]
     78a:	4b3d      	ldr	r3, [pc, #244]	; (880 <_usb_host_interrupt_handler+0x308>)
     78c:	681b      	ldr	r3, [r3, #0]
     78e:	493f      	ldr	r1, [pc, #252]	; (88c <_usb_host_interrupt_handler+0x314>)
     790:	0018      	movs	r0, r3
     792:	4790      	blx	r2
			}
		}

		/* host pipe transmitted setup interrupt */
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
     794:	683b      	ldr	r3, [r7, #0]
     796:	2210      	movs	r2, #16
     798:	4013      	ands	r3, r2
     79a:	d03a      	beq.n	812 <_usb_host_interrupt_handler+0x29a>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
     79c:	2201      	movs	r2, #1
     79e:	687b      	ldr	r3, [r7, #4]
     7a0:	409a      	lsls	r2, r3
     7a2:	0013      	movs	r3, r2
     7a4:	43db      	mvns	r3, r3
     7a6:	001a      	movs	r2, r3
     7a8:	4b37      	ldr	r3, [pc, #220]	; (888 <_usb_host_interrupt_handler+0x310>)
     7aa:	681b      	ldr	r3, [r3, #0]
     7ac:	401a      	ands	r2, r3
     7ae:	4b36      	ldr	r3, [pc, #216]	; (888 <_usb_host_interrupt_handler+0x310>)
     7b0:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
     7b2:	4b33      	ldr	r3, [pc, #204]	; (880 <_usb_host_interrupt_handler+0x308>)
     7b4:	681b      	ldr	r3, [r3, #0]
     7b6:	681a      	ldr	r2, [r3, #0]
     7b8:	687b      	ldr	r3, [r7, #4]
     7ba:	3308      	adds	r3, #8
     7bc:	015b      	lsls	r3, r3, #5
     7be:	18d3      	adds	r3, r2, r3
     7c0:	3307      	adds	r3, #7
     7c2:	2210      	movs	r2, #16
     7c4:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_TXSTP;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
     7c6:	4b2e      	ldr	r3, [pc, #184]	; (880 <_usb_host_interrupt_handler+0x308>)
     7c8:	681a      	ldr	r2, [r3, #0]
     7ca:	21ae      	movs	r1, #174	; 0xae
     7cc:	687b      	ldr	r3, [r7, #4]
     7ce:	18d3      	adds	r3, r2, r3
     7d0:	185b      	adds	r3, r3, r1
     7d2:	781b      	ldrb	r3, [r3, #0]
     7d4:	001a      	movs	r2, r3
     7d6:	2304      	movs	r3, #4
     7d8:	4013      	ands	r3, r2
     7da:	d01a      	beq.n	812 <_usb_host_interrupt_handler+0x29a>
					(1 << USB_HOST_PIPE_CALLBACK_SETUP)) {
				pipe_callback_para.pipe_num = pipe_int;
     7dc:	687b      	ldr	r3, [r7, #4]
     7de:	b2da      	uxtb	r2, r3
     7e0:	4b2a      	ldr	r3, [pc, #168]	; (88c <_usb_host_interrupt_handler+0x314>)
     7e2:	701a      	strb	r2, [r3, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
     7e4:	4a2a      	ldr	r2, [pc, #168]	; (890 <_usb_host_interrupt_handler+0x318>)
     7e6:	687b      	ldr	r3, [r7, #4]
     7e8:	015b      	lsls	r3, r3, #5
     7ea:	18d3      	adds	r3, r2, r3
     7ec:	685b      	ldr	r3, [r3, #4]
     7ee:	011b      	lsls	r3, r3, #4
     7f0:	0c9b      	lsrs	r3, r3, #18
     7f2:	b29b      	uxth	r3, r3
     7f4:	001a      	movs	r2, r3
     7f6:	4b25      	ldr	r3, [pc, #148]	; (88c <_usb_host_interrupt_handler+0x314>)
     7f8:	805a      	strh	r2, [r3, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
     7fa:	4b21      	ldr	r3, [pc, #132]	; (880 <_usb_host_interrupt_handler+0x308>)
     7fc:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
     7fe:	687b      	ldr	r3, [r7, #4]
     800:	011b      	lsls	r3, r3, #4
     802:	18d3      	adds	r3, r2, r3
     804:	332c      	adds	r3, #44	; 0x2c
     806:	681a      	ldr	r2, [r3, #0]
     808:	4b1d      	ldr	r3, [pc, #116]	; (880 <_usb_host_interrupt_handler+0x308>)
     80a:	681b      	ldr	r3, [r3, #0]
     80c:	2100      	movs	r1, #0
     80e:	0018      	movs	r0, r3
     810:	4790      	blx	r2
			}
		}

		/* host pipe stall interrupt */
		if (flags & USB_HOST_PINTFLAG_STALL) {
     812:	683b      	ldr	r3, [r7, #0]
     814:	2220      	movs	r2, #32
     816:	4013      	ands	r3, r2
     818:	d100      	bne.n	81c <_usb_host_interrupt_handler+0x2a4>
     81a:	e112      	b.n	a42 <_usb_host_interrupt_handler+0x4ca>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
     81c:	2201      	movs	r2, #1
     81e:	687b      	ldr	r3, [r7, #4]
     820:	409a      	lsls	r2, r3
     822:	0013      	movs	r3, r2
     824:	43db      	mvns	r3, r3
     826:	001a      	movs	r2, r3
     828:	4b17      	ldr	r3, [pc, #92]	; (888 <_usb_host_interrupt_handler+0x310>)
     82a:	681b      	ldr	r3, [r3, #0]
     82c:	401a      	ands	r2, r3
     82e:	4b16      	ldr	r3, [pc, #88]	; (888 <_usb_host_interrupt_handler+0x310>)
     830:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
     832:	4b13      	ldr	r3, [pc, #76]	; (880 <_usb_host_interrupt_handler+0x308>)
     834:	681b      	ldr	r3, [r3, #0]
     836:	681a      	ldr	r2, [r3, #0]
     838:	687b      	ldr	r3, [r7, #4]
     83a:	3308      	adds	r3, #8
     83c:	015b      	lsls	r3, r3, #5
     83e:	18d3      	adds	r3, r2, r3
     840:	3307      	adds	r3, #7
     842:	2220      	movs	r2, #32
     844:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_STALL;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
     846:	4b0e      	ldr	r3, [pc, #56]	; (880 <_usb_host_interrupt_handler+0x308>)
     848:	681a      	ldr	r2, [r3, #0]
     84a:	21ae      	movs	r1, #174	; 0xae
     84c:	687b      	ldr	r3, [r7, #4]
     84e:	18d3      	adds	r3, r2, r3
     850:	185b      	adds	r3, r3, r1
     852:	781b      	ldrb	r3, [r3, #0]
     854:	001a      	movs	r2, r3
     856:	2308      	movs	r3, #8
     858:	4013      	ands	r3, r2
     85a:	d100      	bne.n	85e <_usb_host_interrupt_handler+0x2e6>
     85c:	e0f1      	b.n	a42 <_usb_host_interrupt_handler+0x4ca>
					(1 << USB_HOST_PIPE_CALLBACK_STALL)) {
				pipe_callback_para.pipe_num = pipe_int;
     85e:	687b      	ldr	r3, [r7, #4]
     860:	b2da      	uxtb	r2, r3
     862:	4b0a      	ldr	r3, [pc, #40]	; (88c <_usb_host_interrupt_handler+0x314>)
     864:	701a      	strb	r2, [r3, #0]
				(_usb_instances->host_pipe_callback[pipe_int]
     866:	4b06      	ldr	r3, [pc, #24]	; (880 <_usb_host_interrupt_handler+0x308>)
     868:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
     86a:	687b      	ldr	r3, [r7, #4]
     86c:	011b      	lsls	r3, r3, #4
     86e:	18d3      	adds	r3, r2, r3
     870:	3330      	adds	r3, #48	; 0x30
     872:	681a      	ldr	r2, [r3, #0]
     874:	4b02      	ldr	r3, [pc, #8]	; (880 <_usb_host_interrupt_handler+0x308>)
     876:	681b      	ldr	r3, [r3, #0]
     878:	4904      	ldr	r1, [pc, #16]	; (88c <_usb_host_interrupt_handler+0x314>)
     87a:	0018      	movs	r0, r3
     87c:	4790      	blx	r2
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
			}
		}

	}
}
     87e:	e0e0      	b.n	a42 <_usb_host_interrupt_handler+0x4ca>
     880:	20000c94 	.word	0x20000c94
     884:	0001e361 	.word	0x0001e361
     888:	20000cac 	.word	0x20000cac
     88c:	20000c98 	.word	0x20000c98
     890:	20000e4c 	.word	0x20000e4c
     894:	f0003fff 	.word	0xf0003fff
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
     898:	4b6c      	ldr	r3, [pc, #432]	; (a4c <_usb_host_interrupt_handler+0x4d4>)
     89a:	681b      	ldr	r3, [r3, #0]
     89c:	681b      	ldr	r3, [r3, #0]
     89e:	8b9b      	ldrh	r3, [r3, #28]
     8a0:	b29b      	uxth	r3, r3
     8a2:	603b      	str	r3, [r7, #0]
		if (flags & USB_HOST_INTFLAG_HSOF) {
     8a4:	683b      	ldr	r3, [r7, #0]
     8a6:	2204      	movs	r2, #4
     8a8:	4013      	ands	r3, r2
     8aa:	d013      	beq.n	8d4 <_usb_host_interrupt_handler+0x35c>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
     8ac:	4b67      	ldr	r3, [pc, #412]	; (a4c <_usb_host_interrupt_handler+0x4d4>)
     8ae:	681b      	ldr	r3, [r3, #0]
     8b0:	681b      	ldr	r3, [r3, #0]
     8b2:	2204      	movs	r2, #4
     8b4:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
     8b6:	4b65      	ldr	r3, [pc, #404]	; (a4c <_usb_host_interrupt_handler+0x4d4>)
     8b8:	681b      	ldr	r3, [r3, #0]
     8ba:	22a5      	movs	r2, #165	; 0xa5
     8bc:	5c9b      	ldrb	r3, [r3, r2]
     8be:	001a      	movs	r2, r3
     8c0:	2301      	movs	r3, #1
     8c2:	4013      	ands	r3, r2
     8c4:	d006      	beq.n	8d4 <_usb_host_interrupt_handler+0x35c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
     8c6:	4b61      	ldr	r3, [pc, #388]	; (a4c <_usb_host_interrupt_handler+0x4d4>)
     8c8:	681b      	ldr	r3, [r3, #0]
     8ca:	685a      	ldr	r2, [r3, #4]
     8cc:	4b5f      	ldr	r3, [pc, #380]	; (a4c <_usb_host_interrupt_handler+0x4d4>)
     8ce:	681b      	ldr	r3, [r3, #0]
     8d0:	0018      	movs	r0, r3
     8d2:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_RST) {
     8d4:	683b      	ldr	r3, [r7, #0]
     8d6:	2208      	movs	r2, #8
     8d8:	4013      	ands	r3, r2
     8da:	d016      	beq.n	90a <_usb_host_interrupt_handler+0x392>
			host_pipe_job_busy_status = 0;
     8dc:	4b5c      	ldr	r3, [pc, #368]	; (a50 <_usb_host_interrupt_handler+0x4d8>)
     8de:	2200      	movs	r2, #0
     8e0:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
     8e2:	4b5a      	ldr	r3, [pc, #360]	; (a4c <_usb_host_interrupt_handler+0x4d4>)
     8e4:	681b      	ldr	r3, [r3, #0]
     8e6:	681b      	ldr	r3, [r3, #0]
     8e8:	2208      	movs	r2, #8
     8ea:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
     8ec:	4b57      	ldr	r3, [pc, #348]	; (a4c <_usb_host_interrupt_handler+0x4d4>)
     8ee:	681b      	ldr	r3, [r3, #0]
     8f0:	22a5      	movs	r2, #165	; 0xa5
     8f2:	5c9b      	ldrb	r3, [r3, r2]
     8f4:	001a      	movs	r2, r3
     8f6:	2302      	movs	r3, #2
     8f8:	4013      	ands	r3, r2
     8fa:	d006      	beq.n	90a <_usb_host_interrupt_handler+0x392>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
     8fc:	4b53      	ldr	r3, [pc, #332]	; (a4c <_usb_host_interrupt_handler+0x4d4>)
     8fe:	681b      	ldr	r3, [r3, #0]
     900:	689a      	ldr	r2, [r3, #8]
     902:	4b52      	ldr	r3, [pc, #328]	; (a4c <_usb_host_interrupt_handler+0x4d4>)
     904:	681b      	ldr	r3, [r3, #0]
     906:	0018      	movs	r0, r3
     908:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_UPRSM) {
     90a:	683b      	ldr	r3, [r7, #0]
     90c:	2240      	movs	r2, #64	; 0x40
     90e:	4013      	ands	r3, r2
     910:	d013      	beq.n	93a <_usb_host_interrupt_handler+0x3c2>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
     912:	4b4e      	ldr	r3, [pc, #312]	; (a4c <_usb_host_interrupt_handler+0x4d4>)
     914:	681b      	ldr	r3, [r3, #0]
     916:	681b      	ldr	r3, [r3, #0]
     918:	2240      	movs	r2, #64	; 0x40
     91a:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
     91c:	4b4b      	ldr	r3, [pc, #300]	; (a4c <_usb_host_interrupt_handler+0x4d4>)
     91e:	681b      	ldr	r3, [r3, #0]
     920:	22a5      	movs	r2, #165	; 0xa5
     922:	5c9b      	ldrb	r3, [r3, r2]
     924:	001a      	movs	r2, r3
     926:	2310      	movs	r3, #16
     928:	4013      	ands	r3, r2
     92a:	d006      	beq.n	93a <_usb_host_interrupt_handler+0x3c2>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
     92c:	4b47      	ldr	r3, [pc, #284]	; (a4c <_usb_host_interrupt_handler+0x4d4>)
     92e:	681b      	ldr	r3, [r3, #0]
     930:	695a      	ldr	r2, [r3, #20]
     932:	4b46      	ldr	r3, [pc, #280]	; (a4c <_usb_host_interrupt_handler+0x4d4>)
     934:	681b      	ldr	r3, [r3, #0]
     936:	0018      	movs	r0, r3
     938:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_DNRSM) {
     93a:	683b      	ldr	r3, [r7, #0]
     93c:	2220      	movs	r2, #32
     93e:	4013      	ands	r3, r2
     940:	d013      	beq.n	96a <_usb_host_interrupt_handler+0x3f2>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
     942:	4b42      	ldr	r3, [pc, #264]	; (a4c <_usb_host_interrupt_handler+0x4d4>)
     944:	681b      	ldr	r3, [r3, #0]
     946:	681b      	ldr	r3, [r3, #0]
     948:	2220      	movs	r2, #32
     94a:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
     94c:	4b3f      	ldr	r3, [pc, #252]	; (a4c <_usb_host_interrupt_handler+0x4d4>)
     94e:	681b      	ldr	r3, [r3, #0]
     950:	22a5      	movs	r2, #165	; 0xa5
     952:	5c9b      	ldrb	r3, [r3, r2]
     954:	001a      	movs	r2, r3
     956:	2308      	movs	r3, #8
     958:	4013      	ands	r3, r2
     95a:	d006      	beq.n	96a <_usb_host_interrupt_handler+0x3f2>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
     95c:	4b3b      	ldr	r3, [pc, #236]	; (a4c <_usb_host_interrupt_handler+0x4d4>)
     95e:	681b      	ldr	r3, [r3, #0]
     960:	691a      	ldr	r2, [r3, #16]
     962:	4b3a      	ldr	r3, [pc, #232]	; (a4c <_usb_host_interrupt_handler+0x4d4>)
     964:	681b      	ldr	r3, [r3, #0]
     966:	0018      	movs	r0, r3
     968:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
     96a:	683b      	ldr	r3, [r7, #0]
     96c:	2210      	movs	r2, #16
     96e:	4013      	ands	r3, r2
     970:	d013      	beq.n	99a <_usb_host_interrupt_handler+0x422>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
     972:	4b36      	ldr	r3, [pc, #216]	; (a4c <_usb_host_interrupt_handler+0x4d4>)
     974:	681b      	ldr	r3, [r3, #0]
     976:	681b      	ldr	r3, [r3, #0]
     978:	2210      	movs	r2, #16
     97a:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
     97c:	4b33      	ldr	r3, [pc, #204]	; (a4c <_usb_host_interrupt_handler+0x4d4>)
     97e:	681b      	ldr	r3, [r3, #0]
     980:	22a5      	movs	r2, #165	; 0xa5
     982:	5c9b      	ldrb	r3, [r3, r2]
     984:	001a      	movs	r2, r3
     986:	2304      	movs	r3, #4
     988:	4013      	ands	r3, r2
     98a:	d006      	beq.n	99a <_usb_host_interrupt_handler+0x422>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
     98c:	4b2f      	ldr	r3, [pc, #188]	; (a4c <_usb_host_interrupt_handler+0x4d4>)
     98e:	681b      	ldr	r3, [r3, #0]
     990:	68da      	ldr	r2, [r3, #12]
     992:	4b2e      	ldr	r3, [pc, #184]	; (a4c <_usb_host_interrupt_handler+0x4d4>)
     994:	681b      	ldr	r3, [r3, #0]
     996:	0018      	movs	r0, r3
     998:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_RAMACER) {
     99a:	683b      	ldr	r3, [r7, #0]
     99c:	2280      	movs	r2, #128	; 0x80
     99e:	4013      	ands	r3, r2
     9a0:	d016      	beq.n	9d0 <_usb_host_interrupt_handler+0x458>
			host_pipe_job_busy_status = 0;
     9a2:	4b2b      	ldr	r3, [pc, #172]	; (a50 <_usb_host_interrupt_handler+0x4d8>)
     9a4:	2200      	movs	r2, #0
     9a6:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
     9a8:	4b28      	ldr	r3, [pc, #160]	; (a4c <_usb_host_interrupt_handler+0x4d4>)
     9aa:	681b      	ldr	r3, [r3, #0]
     9ac:	681b      	ldr	r3, [r3, #0]
     9ae:	2280      	movs	r2, #128	; 0x80
     9b0:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
     9b2:	4b26      	ldr	r3, [pc, #152]	; (a4c <_usb_host_interrupt_handler+0x4d4>)
     9b4:	681b      	ldr	r3, [r3, #0]
     9b6:	22a5      	movs	r2, #165	; 0xa5
     9b8:	5c9b      	ldrb	r3, [r3, r2]
     9ba:	001a      	movs	r2, r3
     9bc:	2320      	movs	r3, #32
     9be:	4013      	ands	r3, r2
     9c0:	d006      	beq.n	9d0 <_usb_host_interrupt_handler+0x458>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
     9c2:	4b22      	ldr	r3, [pc, #136]	; (a4c <_usb_host_interrupt_handler+0x4d4>)
     9c4:	681b      	ldr	r3, [r3, #0]
     9c6:	699a      	ldr	r2, [r3, #24]
     9c8:	4b20      	ldr	r3, [pc, #128]	; (a4c <_usb_host_interrupt_handler+0x4d4>)
     9ca:	681b      	ldr	r3, [r3, #0]
     9cc:	0018      	movs	r0, r3
     9ce:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_DCONN) {
     9d0:	683a      	ldr	r2, [r7, #0]
     9d2:	2380      	movs	r3, #128	; 0x80
     9d4:	005b      	lsls	r3, r3, #1
     9d6:	4013      	ands	r3, r2
     9d8:	d017      	beq.n	a0a <_usb_host_interrupt_handler+0x492>
			host_pipe_job_busy_status = 0;
     9da:	4b1d      	ldr	r3, [pc, #116]	; (a50 <_usb_host_interrupt_handler+0x4d8>)
     9dc:	2200      	movs	r2, #0
     9de:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
     9e0:	4b1a      	ldr	r3, [pc, #104]	; (a4c <_usb_host_interrupt_handler+0x4d4>)
     9e2:	681b      	ldr	r3, [r3, #0]
     9e4:	681b      	ldr	r3, [r3, #0]
     9e6:	2280      	movs	r2, #128	; 0x80
     9e8:	0052      	lsls	r2, r2, #1
     9ea:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
     9ec:	4b17      	ldr	r3, [pc, #92]	; (a4c <_usb_host_interrupt_handler+0x4d4>)
     9ee:	681b      	ldr	r3, [r3, #0]
     9f0:	22a5      	movs	r2, #165	; 0xa5
     9f2:	5c9b      	ldrb	r3, [r3, r2]
     9f4:	001a      	movs	r2, r3
     9f6:	2340      	movs	r3, #64	; 0x40
     9f8:	4013      	ands	r3, r2
     9fa:	d006      	beq.n	a0a <_usb_host_interrupt_handler+0x492>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
     9fc:	4b13      	ldr	r3, [pc, #76]	; (a4c <_usb_host_interrupt_handler+0x4d4>)
     9fe:	681b      	ldr	r3, [r3, #0]
     a00:	69da      	ldr	r2, [r3, #28]
     a02:	4b12      	ldr	r3, [pc, #72]	; (a4c <_usb_host_interrupt_handler+0x4d4>)
     a04:	681b      	ldr	r3, [r3, #0]
     a06:	0018      	movs	r0, r3
     a08:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_DDISC) {
     a0a:	683a      	ldr	r2, [r7, #0]
     a0c:	2380      	movs	r3, #128	; 0x80
     a0e:	009b      	lsls	r3, r3, #2
     a10:	4013      	ands	r3, r2
     a12:	d016      	beq.n	a42 <_usb_host_interrupt_handler+0x4ca>
			host_pipe_job_busy_status = 0;
     a14:	4b0e      	ldr	r3, [pc, #56]	; (a50 <_usb_host_interrupt_handler+0x4d8>)
     a16:	2200      	movs	r2, #0
     a18:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
     a1a:	4b0c      	ldr	r3, [pc, #48]	; (a4c <_usb_host_interrupt_handler+0x4d4>)
     a1c:	681b      	ldr	r3, [r3, #0]
     a1e:	681b      	ldr	r3, [r3, #0]
     a20:	2280      	movs	r2, #128	; 0x80
     a22:	0092      	lsls	r2, r2, #2
     a24:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
     a26:	4b09      	ldr	r3, [pc, #36]	; (a4c <_usb_host_interrupt_handler+0x4d4>)
     a28:	681b      	ldr	r3, [r3, #0]
     a2a:	22a5      	movs	r2, #165	; 0xa5
     a2c:	5c9b      	ldrb	r3, [r3, r2]
     a2e:	b25b      	sxtb	r3, r3
     a30:	2b00      	cmp	r3, #0
     a32:	da06      	bge.n	a42 <_usb_host_interrupt_handler+0x4ca>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
     a34:	4b05      	ldr	r3, [pc, #20]	; (a4c <_usb_host_interrupt_handler+0x4d4>)
     a36:	681b      	ldr	r3, [r3, #0]
     a38:	6a1a      	ldr	r2, [r3, #32]
     a3a:	4b04      	ldr	r3, [pc, #16]	; (a4c <_usb_host_interrupt_handler+0x4d4>)
     a3c:	681b      	ldr	r3, [r3, #0]
     a3e:	0018      	movs	r0, r3
     a40:	4790      	blx	r2
}
     a42:	46c0      	nop			; (mov r8, r8)
     a44:	46bd      	mov	sp, r7
     a46:	b002      	add	sp, #8
     a48:	bd80      	pop	{r7, pc}
     a4a:	46c0      	nop			; (mov r8, r8)
     a4c:	20000c94 	.word	0x20000c94
     a50:	20000cac 	.word	0x20000cac

00000a54 <_usb_device_interrupt_handler>:

	return STATUS_OK;
}

static void _usb_device_interrupt_handler(void)
{
     a54:	b580      	push	{r7, lr}
     a56:	b084      	sub	sp, #16
     a58:	af00      	add	r7, sp, #0
	uint16_t ep_inst;
	uint16_t flags, flags_run;
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
     a5a:	4bbd      	ldr	r3, [pc, #756]	; (d50 <_usb_device_interrupt_handler+0x2fc>)
     a5c:	681b      	ldr	r3, [r3, #0]
     a5e:	681a      	ldr	r2, [r3, #0]
     a60:	2308      	movs	r3, #8
     a62:	18fb      	adds	r3, r7, r3
     a64:	8c12      	ldrh	r2, [r2, #32]
     a66:	801a      	strh	r2, [r3, #0]

	/* device interrupt */
	if (0 == ep_inst) {
     a68:	2308      	movs	r3, #8
     a6a:	18fb      	adds	r3, r7, r3
     a6c:	881b      	ldrh	r3, [r3, #0]
     a6e:	2b00      	cmp	r3, #0
     a70:	d155      	bne.n	b1e <_usb_device_interrupt_handler+0xca>
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
     a72:	4bb7      	ldr	r3, [pc, #732]	; (d50 <_usb_device_interrupt_handler+0x2fc>)
     a74:	681b      	ldr	r3, [r3, #0]
     a76:	681a      	ldr	r2, [r3, #0]
     a78:	1dbb      	adds	r3, r7, #6
     a7a:	8b92      	ldrh	r2, [r2, #28]
     a7c:	801a      	strh	r2, [r3, #0]
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
     a7e:	4bb4      	ldr	r3, [pc, #720]	; (d50 <_usb_device_interrupt_handler+0x2fc>)
     a80:	681a      	ldr	r2, [r3, #0]
     a82:	23ab      	movs	r3, #171	; 0xab
     a84:	005b      	lsls	r3, r3, #1
     a86:	5ad3      	ldrh	r3, [r2, r3]
		flags_run = flags &
     a88:	1dba      	adds	r2, r7, #6
     a8a:	8812      	ldrh	r2, [r2, #0]
     a8c:	4013      	ands	r3, r2
     a8e:	b29a      	uxth	r2, r3
				_usb_instances->device_registered_callback_mask;
     a90:	4baf      	ldr	r3, [pc, #700]	; (d50 <_usb_device_interrupt_handler+0x2fc>)
     a92:	6819      	ldr	r1, [r3, #0]
     a94:	23aa      	movs	r3, #170	; 0xaa
     a96:	005b      	lsls	r3, r3, #1
     a98:	5ac9      	ldrh	r1, [r1, r3]
		flags_run = flags &
     a9a:	1d3b      	adds	r3, r7, #4
     a9c:	400a      	ands	r2, r1
     a9e:	801a      	strh	r2, [r3, #0]

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
     aa0:	2300      	movs	r3, #0
     aa2:	60fb      	str	r3, [r7, #12]
     aa4:	e037      	b.n	b16 <_usb_device_interrupt_handler+0xc2>
			if (flags & _usb_device_irq_bits[i]) {
     aa6:	4bab      	ldr	r3, [pc, #684]	; (d54 <_usb_device_interrupt_handler+0x300>)
     aa8:	68fa      	ldr	r2, [r7, #12]
     aaa:	0052      	lsls	r2, r2, #1
     aac:	5ad3      	ldrh	r3, [r2, r3]
     aae:	1dba      	adds	r2, r7, #6
     ab0:	8812      	ldrh	r2, [r2, #0]
     ab2:	4013      	ands	r3, r2
     ab4:	b29b      	uxth	r3, r3
     ab6:	2b00      	cmp	r3, #0
     ab8:	d007      	beq.n	aca <_usb_device_interrupt_handler+0x76>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
     aba:	4ba5      	ldr	r3, [pc, #660]	; (d50 <_usb_device_interrupt_handler+0x2fc>)
     abc:	681b      	ldr	r3, [r3, #0]
     abe:	681b      	ldr	r3, [r3, #0]
						_usb_device_irq_bits[i];
     ac0:	4aa4      	ldr	r2, [pc, #656]	; (d54 <_usb_device_interrupt_handler+0x300>)
     ac2:	68f9      	ldr	r1, [r7, #12]
     ac4:	0049      	lsls	r1, r1, #1
     ac6:	5a8a      	ldrh	r2, [r1, r2]
				_usb_instances->hw->DEVICE.INTFLAG.reg =
     ac8:	839a      	strh	r2, [r3, #28]
			}
			if (flags_run & _usb_device_irq_bits[i]) {
     aca:	4ba2      	ldr	r3, [pc, #648]	; (d54 <_usb_device_interrupt_handler+0x300>)
     acc:	68fa      	ldr	r2, [r7, #12]
     ace:	0052      	lsls	r2, r2, #1
     ad0:	5ad3      	ldrh	r3, [r2, r3]
     ad2:	1d3a      	adds	r2, r7, #4
     ad4:	8812      	ldrh	r2, [r2, #0]
     ad6:	4013      	ands	r3, r2
     ad8:	b29b      	uxth	r3, r3
     ada:	2b00      	cmp	r3, #0
     adc:	d018      	beq.n	b10 <_usb_device_interrupt_handler+0xbc>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
     ade:	68fb      	ldr	r3, [r7, #12]
     ae0:	2b06      	cmp	r3, #6
     ae2:	d10a      	bne.n	afa <_usb_device_interrupt_handler+0xa6>
					device_callback_lpm_wakeup_enable =
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
     ae4:	4b9c      	ldr	r3, [pc, #624]	; (d58 <_usb_device_interrupt_handler+0x304>)
     ae6:	891b      	ldrh	r3, [r3, #8]
     ae8:	045b      	lsls	r3, r3, #17
     aea:	0d5b      	lsrs	r3, r3, #21
     aec:	b29b      	uxth	r3, r3
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
     aee:	001a      	movs	r2, r3
     af0:	2380      	movs	r3, #128	; 0x80
     af2:	005b      	lsls	r3, r3, #1
     af4:	401a      	ands	r2, r3
					device_callback_lpm_wakeup_enable =
     af6:	4b99      	ldr	r3, [pc, #612]	; (d5c <_usb_device_interrupt_handler+0x308>)
     af8:	601a      	str	r2, [r3, #0]
				}
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
     afa:	4b95      	ldr	r3, [pc, #596]	; (d50 <_usb_device_interrupt_handler+0x2fc>)
     afc:	681b      	ldr	r3, [r3, #0]
     afe:	68fa      	ldr	r2, [r7, #12]
     b00:	322e      	adds	r2, #46	; 0x2e
     b02:	0092      	lsls	r2, r2, #2
     b04:	58d2      	ldr	r2, [r2, r3]
     b06:	4b92      	ldr	r3, [pc, #584]	; (d50 <_usb_device_interrupt_handler+0x2fc>)
     b08:	681b      	ldr	r3, [r3, #0]
     b0a:	4994      	ldr	r1, [pc, #592]	; (d5c <_usb_device_interrupt_handler+0x308>)
     b0c:	0018      	movs	r0, r3
     b0e:	4790      	blx	r2
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
     b10:	68fb      	ldr	r3, [r7, #12]
     b12:	3301      	adds	r3, #1
     b14:	60fb      	str	r3, [r7, #12]
     b16:	68fb      	ldr	r3, [r7, #12]
     b18:	2b06      	cmp	r3, #6
     b1a:	ddc4      	ble.n	aa6 <_usb_device_interrupt_handler+0x52>
     b1c:	e250      	b.n	fc0 <_usb_device_interrupt_handler+0x56c>
		}

	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
     b1e:	230b      	movs	r3, #11
     b20:	18fb      	adds	r3, r7, r3
     b22:	2200      	movs	r2, #0
     b24:	701a      	strb	r2, [r3, #0]
     b26:	e23b      	b.n	fa0 <_usb_device_interrupt_handler+0x54c>

			if (ep_inst & (1 << i)) {
     b28:	2308      	movs	r3, #8
     b2a:	18fb      	adds	r3, r7, r3
     b2c:	881a      	ldrh	r2, [r3, #0]
     b2e:	230b      	movs	r3, #11
     b30:	18fb      	adds	r3, r7, r3
     b32:	781b      	ldrb	r3, [r3, #0]
     b34:	411a      	asrs	r2, r3
     b36:	0013      	movs	r3, r2
     b38:	2201      	movs	r2, #1
     b3a:	4013      	ands	r3, r2
     b3c:	d100      	bne.n	b40 <_usb_device_interrupt_handler+0xec>
     b3e:	e228      	b.n	f92 <_usb_device_interrupt_handler+0x53e>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
     b40:	4b83      	ldr	r3, [pc, #524]	; (d50 <_usb_device_interrupt_handler+0x2fc>)
     b42:	681b      	ldr	r3, [r3, #0]
     b44:	681a      	ldr	r2, [r3, #0]
     b46:	230b      	movs	r3, #11
     b48:	18fb      	adds	r3, r7, r3
     b4a:	781b      	ldrb	r3, [r3, #0]
     b4c:	3308      	adds	r3, #8
     b4e:	015b      	lsls	r3, r3, #5
     b50:	18d3      	adds	r3, r2, r3
     b52:	3307      	adds	r3, #7
     b54:	781b      	ldrb	r3, [r3, #0]
     b56:	b2da      	uxtb	r2, r3
     b58:	1dbb      	adds	r3, r7, #6
     b5a:	801a      	strh	r2, [r3, #0]
				flags_run = flags &
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
     b5c:	4b7c      	ldr	r3, [pc, #496]	; (d50 <_usb_device_interrupt_handler+0x2fc>)
     b5e:	6819      	ldr	r1, [r3, #0]
     b60:	230b      	movs	r3, #11
     b62:	18fb      	adds	r3, r7, r3
     b64:	781a      	ldrb	r2, [r3, #0]
     b66:	23b0      	movs	r3, #176	; 0xb0
     b68:	005b      	lsls	r3, r3, #1
     b6a:	188a      	adds	r2, r1, r2
     b6c:	18d3      	adds	r3, r2, r3
     b6e:	781b      	ldrb	r3, [r3, #0]
     b70:	b29b      	uxth	r3, r3
				flags_run = flags &
     b72:	1dba      	adds	r2, r7, #6
     b74:	8812      	ldrh	r2, [r2, #0]
     b76:	4013      	ands	r3, r2
     b78:	b29b      	uxth	r3, r3
     b7a:	b21a      	sxth	r2, r3
						_usb_instances->device_endpoint_registered_callback_mask[i];
     b7c:	4b74      	ldr	r3, [pc, #464]	; (d50 <_usb_device_interrupt_handler+0x2fc>)
     b7e:	6818      	ldr	r0, [r3, #0]
     b80:	230b      	movs	r3, #11
     b82:	18fb      	adds	r3, r7, r3
     b84:	7819      	ldrb	r1, [r3, #0]
     b86:	23ac      	movs	r3, #172	; 0xac
     b88:	005b      	lsls	r3, r3, #1
     b8a:	1841      	adds	r1, r0, r1
     b8c:	18cb      	adds	r3, r1, r3
     b8e:	781b      	ldrb	r3, [r3, #0]
     b90:	b21b      	sxth	r3, r3
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
     b92:	4013      	ands	r3, r2
     b94:	b21a      	sxth	r2, r3
				flags_run = flags &
     b96:	1d3b      	adds	r3, r7, #4
     b98:	801a      	strh	r2, [r3, #0]

				// endpoint transfer stall interrupt
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
     b9a:	1dbb      	adds	r3, r7, #6
     b9c:	881b      	ldrh	r3, [r3, #0]
     b9e:	2260      	movs	r2, #96	; 0x60
     ba0:	4013      	ands	r3, r2
     ba2:	d05c      	beq.n	c5e <_usb_device_interrupt_handler+0x20a>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
     ba4:	4b6a      	ldr	r3, [pc, #424]	; (d50 <_usb_device_interrupt_handler+0x2fc>)
     ba6:	681b      	ldr	r3, [r3, #0]
     ba8:	681a      	ldr	r2, [r3, #0]
     baa:	230b      	movs	r3, #11
     bac:	18fb      	adds	r3, r7, r3
     bae:	781b      	ldrb	r3, [r3, #0]
     bb0:	3308      	adds	r3, #8
     bb2:	015b      	lsls	r3, r3, #5
     bb4:	18d3      	adds	r3, r2, r3
     bb6:	3307      	adds	r3, #7
     bb8:	781b      	ldrb	r3, [r3, #0]
     bba:	b2db      	uxtb	r3, r3
     bbc:	001a      	movs	r2, r3
     bbe:	2340      	movs	r3, #64	; 0x40
     bc0:	4013      	ands	r3, r2
     bc2:	d015      	beq.n	bf0 <_usb_device_interrupt_handler+0x19c>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
     bc4:	4b62      	ldr	r3, [pc, #392]	; (d50 <_usb_device_interrupt_handler+0x2fc>)
     bc6:	681b      	ldr	r3, [r3, #0]
     bc8:	681a      	ldr	r2, [r3, #0]
     bca:	230b      	movs	r3, #11
     bcc:	18fb      	adds	r3, r7, r3
     bce:	781b      	ldrb	r3, [r3, #0]
     bd0:	3308      	adds	r3, #8
     bd2:	015b      	lsls	r3, r3, #5
     bd4:	18d3      	adds	r3, r2, r3
     bd6:	3307      	adds	r3, #7
     bd8:	2240      	movs	r2, #64	; 0x40
     bda:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
     bdc:	230b      	movs	r3, #11
     bde:	18fb      	adds	r3, r7, r3
     be0:	781b      	ldrb	r3, [r3, #0]
     be2:	2280      	movs	r2, #128	; 0x80
     be4:	4252      	negs	r2, r2
     be6:	4313      	orrs	r3, r2
     be8:	b2da      	uxtb	r2, r3
     bea:	4b5d      	ldr	r3, [pc, #372]	; (d60 <_usb_device_interrupt_handler+0x30c>)
     bec:	719a      	strb	r2, [r3, #6]
     bee:	e020      	b.n	c32 <_usb_device_interrupt_handler+0x1de>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
     bf0:	4b57      	ldr	r3, [pc, #348]	; (d50 <_usb_device_interrupt_handler+0x2fc>)
     bf2:	681b      	ldr	r3, [r3, #0]
     bf4:	681a      	ldr	r2, [r3, #0]
     bf6:	230b      	movs	r3, #11
     bf8:	18fb      	adds	r3, r7, r3
     bfa:	781b      	ldrb	r3, [r3, #0]
     bfc:	3308      	adds	r3, #8
     bfe:	015b      	lsls	r3, r3, #5
     c00:	18d3      	adds	r3, r2, r3
     c02:	3307      	adds	r3, #7
     c04:	781b      	ldrb	r3, [r3, #0]
     c06:	b2db      	uxtb	r3, r3
     c08:	001a      	movs	r2, r3
     c0a:	2320      	movs	r3, #32
     c0c:	4013      	ands	r3, r2
     c0e:	d010      	beq.n	c32 <_usb_device_interrupt_handler+0x1de>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
     c10:	4b4f      	ldr	r3, [pc, #316]	; (d50 <_usb_device_interrupt_handler+0x2fc>)
     c12:	681b      	ldr	r3, [r3, #0]
     c14:	681a      	ldr	r2, [r3, #0]
     c16:	230b      	movs	r3, #11
     c18:	18fb      	adds	r3, r7, r3
     c1a:	781b      	ldrb	r3, [r3, #0]
     c1c:	3308      	adds	r3, #8
     c1e:	015b      	lsls	r3, r3, #5
     c20:	18d3      	adds	r3, r2, r3
     c22:	3307      	adds	r3, #7
     c24:	2220      	movs	r2, #32
     c26:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
     c28:	4b4d      	ldr	r3, [pc, #308]	; (d60 <_usb_device_interrupt_handler+0x30c>)
     c2a:	220b      	movs	r2, #11
     c2c:	18ba      	adds	r2, r7, r2
     c2e:	7812      	ldrb	r2, [r2, #0]
     c30:	719a      	strb	r2, [r3, #6]
					}

					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
     c32:	1d3b      	adds	r3, r7, #4
     c34:	881b      	ldrh	r3, [r3, #0]
     c36:	2260      	movs	r2, #96	; 0x60
     c38:	4013      	ands	r3, r2
     c3a:	d100      	bne.n	c3e <_usb_device_interrupt_handler+0x1ea>
     c3c:	e1b7      	b.n	fae <_usb_device_interrupt_handler+0x55a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
     c3e:	4b44      	ldr	r3, [pc, #272]	; (d50 <_usb_device_interrupt_handler+0x2fc>)
     c40:	681a      	ldr	r2, [r3, #0]
     c42:	230b      	movs	r3, #11
     c44:	18fb      	adds	r3, r7, r3
     c46:	781b      	ldrb	r3, [r3, #0]
     c48:	21e0      	movs	r1, #224	; 0xe0
     c4a:	011b      	lsls	r3, r3, #4
     c4c:	18d3      	adds	r3, r2, r3
     c4e:	185b      	adds	r3, r3, r1
     c50:	681a      	ldr	r2, [r3, #0]
     c52:	4b3f      	ldr	r3, [pc, #252]	; (d50 <_usb_device_interrupt_handler+0x2fc>)
     c54:	681b      	ldr	r3, [r3, #0]
     c56:	4942      	ldr	r1, [pc, #264]	; (d60 <_usb_device_interrupt_handler+0x30c>)
     c58:	0018      	movs	r0, r3
     c5a:	4790      	blx	r2
					}
					return;
     c5c:	e1a7      	b.n	fae <_usb_device_interrupt_handler+0x55a>
				}

				// endpoint received setup interrupt
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
     c5e:	1dbb      	adds	r3, r7, #6
     c60:	881b      	ldrh	r3, [r3, #0]
     c62:	2210      	movs	r2, #16
     c64:	4013      	ands	r3, r2
     c66:	d038      	beq.n	cda <_usb_device_interrupt_handler+0x286>
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
     c68:	4b39      	ldr	r3, [pc, #228]	; (d50 <_usb_device_interrupt_handler+0x2fc>)
     c6a:	681b      	ldr	r3, [r3, #0]
     c6c:	681a      	ldr	r2, [r3, #0]
     c6e:	230b      	movs	r3, #11
     c70:	18fb      	adds	r3, r7, r3
     c72:	781b      	ldrb	r3, [r3, #0]
     c74:	3308      	adds	r3, #8
     c76:	015b      	lsls	r3, r3, #5
     c78:	18d3      	adds	r3, r2, r3
     c7a:	3307      	adds	r3, #7
     c7c:	2210      	movs	r2, #16
     c7e:	701a      	strb	r2, [r3, #0]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
     c80:	4b33      	ldr	r3, [pc, #204]	; (d50 <_usb_device_interrupt_handler+0x2fc>)
     c82:	6819      	ldr	r1, [r3, #0]
     c84:	230b      	movs	r3, #11
     c86:	18fb      	adds	r3, r7, r3
     c88:	781a      	ldrb	r2, [r3, #0]
     c8a:	23b0      	movs	r3, #176	; 0xb0
     c8c:	005b      	lsls	r3, r3, #1
     c8e:	188a      	adds	r2, r1, r2
     c90:	18d3      	adds	r3, r2, r3
     c92:	781b      	ldrb	r3, [r3, #0]
     c94:	2210      	movs	r2, #16
     c96:	4013      	ands	r3, r2
     c98:	b2db      	uxtb	r3, r3
     c9a:	2b00      	cmp	r3, #0
     c9c:	d100      	bne.n	ca0 <_usb_device_interrupt_handler+0x24c>
     c9e:	e188      	b.n	fb2 <_usb_device_interrupt_handler+0x55e>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
     ca0:	230b      	movs	r3, #11
     ca2:	18fb      	adds	r3, r7, r3
     ca4:	781b      	ldrb	r3, [r3, #0]
     ca6:	4a2c      	ldr	r2, [pc, #176]	; (d58 <_usb_device_interrupt_handler+0x304>)
     ca8:	015b      	lsls	r3, r3, #5
     caa:	18d3      	adds	r3, r2, r3
     cac:	685b      	ldr	r3, [r3, #4]
     cae:	049b      	lsls	r3, r3, #18
     cb0:	0c9b      	lsrs	r3, r3, #18
     cb2:	b29b      	uxth	r3, r3
     cb4:	001a      	movs	r2, r3
     cb6:	4b2a      	ldr	r3, [pc, #168]	; (d60 <_usb_device_interrupt_handler+0x30c>)
     cb8:	801a      	strh	r2, [r3, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
     cba:	4b25      	ldr	r3, [pc, #148]	; (d50 <_usb_device_interrupt_handler+0x2fc>)
     cbc:	681a      	ldr	r2, [r3, #0]
     cbe:	230b      	movs	r3, #11
     cc0:	18fb      	adds	r3, r7, r3
     cc2:	781b      	ldrb	r3, [r3, #0]
     cc4:	21dc      	movs	r1, #220	; 0xdc
     cc6:	011b      	lsls	r3, r3, #4
     cc8:	18d3      	adds	r3, r2, r3
     cca:	185b      	adds	r3, r3, r1
     ccc:	681a      	ldr	r2, [r3, #0]
     cce:	4b20      	ldr	r3, [pc, #128]	; (d50 <_usb_device_interrupt_handler+0x2fc>)
     cd0:	681b      	ldr	r3, [r3, #0]
     cd2:	4923      	ldr	r1, [pc, #140]	; (d60 <_usb_device_interrupt_handler+0x30c>)
     cd4:	0018      	movs	r0, r3
     cd6:	4790      	blx	r2
					}
					return;
     cd8:	e16b      	b.n	fb2 <_usb_device_interrupt_handler+0x55e>
				}

				// endpoint transfer complete interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
     cda:	1dbb      	adds	r3, r7, #6
     cdc:	881b      	ldrh	r3, [r3, #0]
     cde:	2203      	movs	r2, #3
     ce0:	4013      	ands	r3, r2
     ce2:	d100      	bne.n	ce6 <_usb_device_interrupt_handler+0x292>
     ce4:	e08f      	b.n	e06 <_usb_device_interrupt_handler+0x3b2>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
     ce6:	4b1a      	ldr	r3, [pc, #104]	; (d50 <_usb_device_interrupt_handler+0x2fc>)
     ce8:	681b      	ldr	r3, [r3, #0]
     cea:	681a      	ldr	r2, [r3, #0]
     cec:	230b      	movs	r3, #11
     cee:	18fb      	adds	r3, r7, r3
     cf0:	781b      	ldrb	r3, [r3, #0]
     cf2:	3308      	adds	r3, #8
     cf4:	015b      	lsls	r3, r3, #5
     cf6:	18d3      	adds	r3, r2, r3
     cf8:	3307      	adds	r3, #7
     cfa:	781b      	ldrb	r3, [r3, #0]
     cfc:	b2db      	uxtb	r3, r3
     cfe:	001a      	movs	r2, r3
     d00:	2302      	movs	r3, #2
     d02:	4013      	ands	r3, r2
     d04:	d02e      	beq.n	d64 <_usb_device_interrupt_handler+0x310>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
     d06:	4b12      	ldr	r3, [pc, #72]	; (d50 <_usb_device_interrupt_handler+0x2fc>)
     d08:	681b      	ldr	r3, [r3, #0]
     d0a:	681a      	ldr	r2, [r3, #0]
     d0c:	230b      	movs	r3, #11
     d0e:	18fb      	adds	r3, r7, r3
     d10:	781b      	ldrb	r3, [r3, #0]
     d12:	3308      	adds	r3, #8
     d14:	015b      	lsls	r3, r3, #5
     d16:	18d3      	adds	r3, r2, r3
     d18:	3307      	adds	r3, #7
     d1a:	2202      	movs	r2, #2
     d1c:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
     d1e:	230b      	movs	r3, #11
     d20:	18fb      	adds	r3, r7, r3
     d22:	781b      	ldrb	r3, [r3, #0]
     d24:	2280      	movs	r2, #128	; 0x80
     d26:	4252      	negs	r2, r2
     d28:	4313      	orrs	r3, r2
     d2a:	b2da      	uxtb	r2, r3
     d2c:	4b0c      	ldr	r3, [pc, #48]	; (d60 <_usb_device_interrupt_handler+0x30c>)
     d2e:	719a      	strb	r2, [r3, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
     d30:	230b      	movs	r3, #11
     d32:	18fb      	adds	r3, r7, r3
     d34:	781b      	ldrb	r3, [r3, #0]
     d36:	4a08      	ldr	r2, [pc, #32]	; (d58 <_usb_device_interrupt_handler+0x304>)
     d38:	015b      	lsls	r3, r3, #5
     d3a:	18d3      	adds	r3, r2, r3
     d3c:	3310      	adds	r3, #16
     d3e:	685b      	ldr	r3, [r3, #4]
     d40:	049b      	lsls	r3, r3, #18
     d42:	0c9b      	lsrs	r3, r3, #18
     d44:	b29b      	uxth	r3, r3
     d46:	001a      	movs	r2, r3
     d48:	4b05      	ldr	r3, [pc, #20]	; (d60 <_usb_device_interrupt_handler+0x30c>)
     d4a:	805a      	strh	r2, [r3, #2]
     d4c:	e045      	b.n	dda <_usb_device_interrupt_handler+0x386>
     d4e:	46c0      	nop			; (mov r8, r8)
     d50:	20000c94 	.word	0x20000c94
     d54:	000250e4 	.word	0x000250e4
     d58:	20000e4c 	.word	0x20000e4c
     d5c:	20000ca0 	.word	0x20000ca0
     d60:	20000ca4 	.word	0x20000ca4

					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
     d64:	4b98      	ldr	r3, [pc, #608]	; (fc8 <_usb_device_interrupt_handler+0x574>)
     d66:	681b      	ldr	r3, [r3, #0]
     d68:	681a      	ldr	r2, [r3, #0]
     d6a:	230b      	movs	r3, #11
     d6c:	18fb      	adds	r3, r7, r3
     d6e:	781b      	ldrb	r3, [r3, #0]
     d70:	3308      	adds	r3, #8
     d72:	015b      	lsls	r3, r3, #5
     d74:	18d3      	adds	r3, r2, r3
     d76:	3307      	adds	r3, #7
     d78:	781b      	ldrb	r3, [r3, #0]
     d7a:	b2db      	uxtb	r3, r3
     d7c:	001a      	movs	r2, r3
     d7e:	2301      	movs	r3, #1
     d80:	4013      	ands	r3, r2
     d82:	d02a      	beq.n	dda <_usb_device_interrupt_handler+0x386>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
     d84:	4b90      	ldr	r3, [pc, #576]	; (fc8 <_usb_device_interrupt_handler+0x574>)
     d86:	681b      	ldr	r3, [r3, #0]
     d88:	681a      	ldr	r2, [r3, #0]
     d8a:	230b      	movs	r3, #11
     d8c:	18fb      	adds	r3, r7, r3
     d8e:	781b      	ldrb	r3, [r3, #0]
     d90:	3308      	adds	r3, #8
     d92:	015b      	lsls	r3, r3, #5
     d94:	18d3      	adds	r3, r2, r3
     d96:	3307      	adds	r3, #7
     d98:	2201      	movs	r2, #1
     d9a:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
     d9c:	4b8b      	ldr	r3, [pc, #556]	; (fcc <_usb_device_interrupt_handler+0x578>)
     d9e:	220b      	movs	r2, #11
     da0:	18ba      	adds	r2, r7, r2
     da2:	7812      	ldrb	r2, [r2, #0]
     da4:	719a      	strb	r2, [r3, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
     da6:	230b      	movs	r3, #11
     da8:	18fb      	adds	r3, r7, r3
     daa:	781b      	ldrb	r3, [r3, #0]
     dac:	4a88      	ldr	r2, [pc, #544]	; (fd0 <_usb_device_interrupt_handler+0x57c>)
     dae:	015b      	lsls	r3, r3, #5
     db0:	18d3      	adds	r3, r2, r3
     db2:	685b      	ldr	r3, [r3, #4]
     db4:	049b      	lsls	r3, r3, #18
     db6:	0c9b      	lsrs	r3, r3, #18
     db8:	b29b      	uxth	r3, r3
     dba:	001a      	movs	r2, r3
     dbc:	4b83      	ldr	r3, [pc, #524]	; (fcc <_usb_device_interrupt_handler+0x578>)
     dbe:	801a      	strh	r2, [r3, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
     dc0:	230b      	movs	r3, #11
     dc2:	18fb      	adds	r3, r7, r3
     dc4:	781b      	ldrb	r3, [r3, #0]
     dc6:	4a82      	ldr	r2, [pc, #520]	; (fd0 <_usb_device_interrupt_handler+0x57c>)
     dc8:	015b      	lsls	r3, r3, #5
     dca:	18d3      	adds	r3, r2, r3
     dcc:	685b      	ldr	r3, [r3, #4]
     dce:	011b      	lsls	r3, r3, #4
     dd0:	0c9b      	lsrs	r3, r3, #18
     dd2:	b29b      	uxth	r3, r3
     dd4:	001a      	movs	r2, r3
     dd6:	4b7d      	ldr	r3, [pc, #500]	; (fcc <_usb_device_interrupt_handler+0x578>)
     dd8:	809a      	strh	r2, [r3, #4]
					}
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
     dda:	1d3b      	adds	r3, r7, #4
     ddc:	881b      	ldrh	r3, [r3, #0]
     dde:	2203      	movs	r2, #3
     de0:	4013      	ands	r3, r2
     de2:	d100      	bne.n	de6 <_usb_device_interrupt_handler+0x392>
     de4:	e0e7      	b.n	fb6 <_usb_device_interrupt_handler+0x562>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
     de6:	4b78      	ldr	r3, [pc, #480]	; (fc8 <_usb_device_interrupt_handler+0x574>)
     de8:	681a      	ldr	r2, [r3, #0]
     dea:	230b      	movs	r3, #11
     dec:	18fb      	adds	r3, r7, r3
     dee:	781b      	ldrb	r3, [r3, #0]
     df0:	330d      	adds	r3, #13
     df2:	011b      	lsls	r3, r3, #4
     df4:	18d3      	adds	r3, r2, r3
     df6:	3304      	adds	r3, #4
     df8:	681a      	ldr	r2, [r3, #0]
     dfa:	4b73      	ldr	r3, [pc, #460]	; (fc8 <_usb_device_interrupt_handler+0x574>)
     dfc:	681b      	ldr	r3, [r3, #0]
     dfe:	4973      	ldr	r1, [pc, #460]	; (fcc <_usb_device_interrupt_handler+0x578>)
     e00:	0018      	movs	r0, r3
     e02:	4790      	blx	r2
					}
					return;
     e04:	e0d7      	b.n	fb6 <_usb_device_interrupt_handler+0x562>
				}

				// endpoint transfer fail interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
     e06:	1dbb      	adds	r3, r7, #6
     e08:	881b      	ldrh	r3, [r3, #0]
     e0a:	220c      	movs	r2, #12
     e0c:	4013      	ands	r3, r2
     e0e:	d100      	bne.n	e12 <_usb_device_interrupt_handler+0x3be>
     e10:	e0bf      	b.n	f92 <_usb_device_interrupt_handler+0x53e>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
     e12:	4b6d      	ldr	r3, [pc, #436]	; (fc8 <_usb_device_interrupt_handler+0x574>)
     e14:	681b      	ldr	r3, [r3, #0]
     e16:	681a      	ldr	r2, [r3, #0]
     e18:	230b      	movs	r3, #11
     e1a:	18fb      	adds	r3, r7, r3
     e1c:	781b      	ldrb	r3, [r3, #0]
     e1e:	3308      	adds	r3, #8
     e20:	015b      	lsls	r3, r3, #5
     e22:	18d3      	adds	r3, r2, r3
     e24:	3307      	adds	r3, #7
     e26:	781b      	ldrb	r3, [r3, #0]
     e28:	b2db      	uxtb	r3, r3
     e2a:	001a      	movs	r2, r3
     e2c:	2308      	movs	r3, #8
     e2e:	4013      	ands	r3, r2
     e30:	d047      	beq.n	ec2 <_usb_device_interrupt_handler+0x46e>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
     e32:	4b65      	ldr	r3, [pc, #404]	; (fc8 <_usb_device_interrupt_handler+0x574>)
     e34:	681b      	ldr	r3, [r3, #0]
     e36:	681a      	ldr	r2, [r3, #0]
     e38:	230b      	movs	r3, #11
     e3a:	18fb      	adds	r3, r7, r3
     e3c:	781b      	ldrb	r3, [r3, #0]
     e3e:	3308      	adds	r3, #8
     e40:	015b      	lsls	r3, r3, #5
     e42:	18d3      	adds	r3, r2, r3
     e44:	3307      	adds	r3, #7
     e46:	2208      	movs	r2, #8
     e48:	701a      	strb	r2, [r3, #0]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
     e4a:	230b      	movs	r3, #11
     e4c:	18fb      	adds	r3, r7, r3
     e4e:	781b      	ldrb	r3, [r3, #0]
     e50:	4a5f      	ldr	r2, [pc, #380]	; (fd0 <_usb_device_interrupt_handler+0x57c>)
     e52:	015b      	lsls	r3, r3, #5
     e54:	18d3      	adds	r3, r2, r3
     e56:	331a      	adds	r3, #26
     e58:	781b      	ldrb	r3, [r3, #0]
     e5a:	b2db      	uxtb	r3, r3
     e5c:	001a      	movs	r2, r3
     e5e:	2302      	movs	r3, #2
     e60:	4013      	ands	r3, r2
     e62:	d014      	beq.n	e8e <_usb_device_interrupt_handler+0x43a>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
     e64:	230b      	movs	r3, #11
     e66:	18fb      	adds	r3, r7, r3
     e68:	781b      	ldrb	r3, [r3, #0]
     e6a:	220b      	movs	r2, #11
     e6c:	18ba      	adds	r2, r7, r2
     e6e:	7812      	ldrb	r2, [r2, #0]
     e70:	4957      	ldr	r1, [pc, #348]	; (fd0 <_usb_device_interrupt_handler+0x57c>)
     e72:	0152      	lsls	r2, r2, #5
     e74:	188a      	adds	r2, r1, r2
     e76:	321a      	adds	r2, #26
     e78:	7812      	ldrb	r2, [r2, #0]
     e7a:	b2d2      	uxtb	r2, r2
     e7c:	2102      	movs	r1, #2
     e7e:	438a      	bics	r2, r1
     e80:	b2d1      	uxtb	r1, r2
     e82:	4a53      	ldr	r2, [pc, #332]	; (fd0 <_usb_device_interrupt_handler+0x57c>)
     e84:	015b      	lsls	r3, r3, #5
     e86:	18d3      	adds	r3, r2, r3
     e88:	331a      	adds	r3, #26
     e8a:	1c0a      	adds	r2, r1, #0
     e8c:	701a      	strb	r2, [r3, #0]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
     e8e:	230b      	movs	r3, #11
     e90:	18fb      	adds	r3, r7, r3
     e92:	781b      	ldrb	r3, [r3, #0]
     e94:	2280      	movs	r2, #128	; 0x80
     e96:	4252      	negs	r2, r2
     e98:	4313      	orrs	r3, r2
     e9a:	b2da      	uxtb	r2, r3
     e9c:	4b4b      	ldr	r3, [pc, #300]	; (fcc <_usb_device_interrupt_handler+0x578>)
     e9e:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
     ea0:	4b49      	ldr	r3, [pc, #292]	; (fc8 <_usb_device_interrupt_handler+0x574>)
     ea2:	681b      	ldr	r3, [r3, #0]
     ea4:	681a      	ldr	r2, [r3, #0]
     ea6:	230b      	movs	r3, #11
     ea8:	18fb      	adds	r3, r7, r3
     eaa:	781b      	ldrb	r3, [r3, #0]
     eac:	3308      	adds	r3, #8
     eae:	015b      	lsls	r3, r3, #5
     eb0:	18d3      	adds	r3, r2, r3
     eb2:	3307      	adds	r3, #7
     eb4:	781b      	ldrb	r3, [r3, #0]
     eb6:	b2db      	uxtb	r3, r3
     eb8:	001a      	movs	r2, r3
     eba:	2302      	movs	r3, #2
     ebc:	4013      	ands	r3, r2
     ebe:	d053      	beq.n	f68 <_usb_device_interrupt_handler+0x514>
							return;
     ec0:	e07e      	b.n	fc0 <_usb_device_interrupt_handler+0x56c>
						}
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
     ec2:	4b41      	ldr	r3, [pc, #260]	; (fc8 <_usb_device_interrupt_handler+0x574>)
     ec4:	681b      	ldr	r3, [r3, #0]
     ec6:	681a      	ldr	r2, [r3, #0]
     ec8:	230b      	movs	r3, #11
     eca:	18fb      	adds	r3, r7, r3
     ecc:	781b      	ldrb	r3, [r3, #0]
     ece:	3308      	adds	r3, #8
     ed0:	015b      	lsls	r3, r3, #5
     ed2:	18d3      	adds	r3, r2, r3
     ed4:	3307      	adds	r3, #7
     ed6:	781b      	ldrb	r3, [r3, #0]
     ed8:	b2db      	uxtb	r3, r3
     eda:	001a      	movs	r2, r3
     edc:	2304      	movs	r3, #4
     ede:	4013      	ands	r3, r2
     ee0:	d042      	beq.n	f68 <_usb_device_interrupt_handler+0x514>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
     ee2:	4b39      	ldr	r3, [pc, #228]	; (fc8 <_usb_device_interrupt_handler+0x574>)
     ee4:	681b      	ldr	r3, [r3, #0]
     ee6:	681a      	ldr	r2, [r3, #0]
     ee8:	230b      	movs	r3, #11
     eea:	18fb      	adds	r3, r7, r3
     eec:	781b      	ldrb	r3, [r3, #0]
     eee:	3308      	adds	r3, #8
     ef0:	015b      	lsls	r3, r3, #5
     ef2:	18d3      	adds	r3, r2, r3
     ef4:	3307      	adds	r3, #7
     ef6:	2204      	movs	r2, #4
     ef8:	701a      	strb	r2, [r3, #0]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
     efa:	230b      	movs	r3, #11
     efc:	18fb      	adds	r3, r7, r3
     efe:	781b      	ldrb	r3, [r3, #0]
     f00:	4a33      	ldr	r2, [pc, #204]	; (fd0 <_usb_device_interrupt_handler+0x57c>)
     f02:	015b      	lsls	r3, r3, #5
     f04:	18d3      	adds	r3, r2, r3
     f06:	330a      	adds	r3, #10
     f08:	781b      	ldrb	r3, [r3, #0]
     f0a:	b2db      	uxtb	r3, r3
     f0c:	001a      	movs	r2, r3
     f0e:	2302      	movs	r3, #2
     f10:	4013      	ands	r3, r2
     f12:	d014      	beq.n	f3e <_usb_device_interrupt_handler+0x4ea>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
     f14:	230b      	movs	r3, #11
     f16:	18fb      	adds	r3, r7, r3
     f18:	781b      	ldrb	r3, [r3, #0]
     f1a:	220b      	movs	r2, #11
     f1c:	18ba      	adds	r2, r7, r2
     f1e:	7812      	ldrb	r2, [r2, #0]
     f20:	492b      	ldr	r1, [pc, #172]	; (fd0 <_usb_device_interrupt_handler+0x57c>)
     f22:	0152      	lsls	r2, r2, #5
     f24:	188a      	adds	r2, r1, r2
     f26:	320a      	adds	r2, #10
     f28:	7812      	ldrb	r2, [r2, #0]
     f2a:	b2d2      	uxtb	r2, r2
     f2c:	2102      	movs	r1, #2
     f2e:	438a      	bics	r2, r1
     f30:	b2d1      	uxtb	r1, r2
     f32:	4a27      	ldr	r2, [pc, #156]	; (fd0 <_usb_device_interrupt_handler+0x57c>)
     f34:	015b      	lsls	r3, r3, #5
     f36:	18d3      	adds	r3, r2, r3
     f38:	330a      	adds	r3, #10
     f3a:	1c0a      	adds	r2, r1, #0
     f3c:	701a      	strb	r2, [r3, #0]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
     f3e:	4b23      	ldr	r3, [pc, #140]	; (fcc <_usb_device_interrupt_handler+0x578>)
     f40:	220b      	movs	r2, #11
     f42:	18ba      	adds	r2, r7, r2
     f44:	7812      	ldrb	r2, [r2, #0]
     f46:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
     f48:	4b1f      	ldr	r3, [pc, #124]	; (fc8 <_usb_device_interrupt_handler+0x574>)
     f4a:	681b      	ldr	r3, [r3, #0]
     f4c:	681a      	ldr	r2, [r3, #0]
     f4e:	230b      	movs	r3, #11
     f50:	18fb      	adds	r3, r7, r3
     f52:	781b      	ldrb	r3, [r3, #0]
     f54:	3308      	adds	r3, #8
     f56:	015b      	lsls	r3, r3, #5
     f58:	18d3      	adds	r3, r2, r3
     f5a:	3307      	adds	r3, #7
     f5c:	781b      	ldrb	r3, [r3, #0]
     f5e:	b2db      	uxtb	r3, r3
     f60:	001a      	movs	r2, r3
     f62:	2301      	movs	r3, #1
     f64:	4013      	ands	r3, r2
     f66:	d128      	bne.n	fba <_usb_device_interrupt_handler+0x566>
							return;
						}
					}

					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
     f68:	1d3b      	adds	r3, r7, #4
     f6a:	881b      	ldrh	r3, [r3, #0]
     f6c:	220c      	movs	r2, #12
     f6e:	4013      	ands	r3, r2
     f70:	d025      	beq.n	fbe <_usb_device_interrupt_handler+0x56a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
     f72:	4b15      	ldr	r3, [pc, #84]	; (fc8 <_usb_device_interrupt_handler+0x574>)
     f74:	681a      	ldr	r2, [r3, #0]
     f76:	230b      	movs	r3, #11
     f78:	18fb      	adds	r3, r7, r3
     f7a:	781b      	ldrb	r3, [r3, #0]
     f7c:	21d8      	movs	r1, #216	; 0xd8
     f7e:	011b      	lsls	r3, r3, #4
     f80:	18d3      	adds	r3, r2, r3
     f82:	185b      	adds	r3, r3, r1
     f84:	681a      	ldr	r2, [r3, #0]
     f86:	4b10      	ldr	r3, [pc, #64]	; (fc8 <_usb_device_interrupt_handler+0x574>)
     f88:	681b      	ldr	r3, [r3, #0]
     f8a:	4910      	ldr	r1, [pc, #64]	; (fcc <_usb_device_interrupt_handler+0x578>)
     f8c:	0018      	movs	r0, r3
     f8e:	4790      	blx	r2
					}
					return;
     f90:	e015      	b.n	fbe <_usb_device_interrupt_handler+0x56a>
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
     f92:	230b      	movs	r3, #11
     f94:	18fb      	adds	r3, r7, r3
     f96:	781a      	ldrb	r2, [r3, #0]
     f98:	230b      	movs	r3, #11
     f9a:	18fb      	adds	r3, r7, r3
     f9c:	3201      	adds	r2, #1
     f9e:	701a      	strb	r2, [r3, #0]
     fa0:	230b      	movs	r3, #11
     fa2:	18fb      	adds	r3, r7, r3
     fa4:	781b      	ldrb	r3, [r3, #0]
     fa6:	2b07      	cmp	r3, #7
     fa8:	d800      	bhi.n	fac <_usb_device_interrupt_handler+0x558>
     faa:	e5bd      	b.n	b28 <_usb_device_interrupt_handler+0xd4>
     fac:	e008      	b.n	fc0 <_usb_device_interrupt_handler+0x56c>
					return;
     fae:	46c0      	nop			; (mov r8, r8)
     fb0:	e006      	b.n	fc0 <_usb_device_interrupt_handler+0x56c>
					return;
     fb2:	46c0      	nop			; (mov r8, r8)
     fb4:	e004      	b.n	fc0 <_usb_device_interrupt_handler+0x56c>
					return;
     fb6:	46c0      	nop			; (mov r8, r8)
     fb8:	e002      	b.n	fc0 <_usb_device_interrupt_handler+0x56c>
							return;
     fba:	46c0      	nop			; (mov r8, r8)
     fbc:	e000      	b.n	fc0 <_usb_device_interrupt_handler+0x56c>
					return;
     fbe:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}
}
     fc0:	46bd      	mov	sp, r7
     fc2:	b004      	add	sp, #16
     fc4:	bd80      	pop	{r7, pc}
     fc6:	46c0      	nop			; (mov r8, r8)
     fc8:	20000c94 	.word	0x20000c94
     fcc:	20000ca4 	.word	0x20000ca4
     fd0:	20000e4c 	.word	0x20000e4c

00000fd4 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
     fd4:	b580      	push	{r7, lr}
     fd6:	af00      	add	r7, sp, #0
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
     fd8:	4b08      	ldr	r3, [pc, #32]	; (ffc <USB_Handler+0x28>)
     fda:	681b      	ldr	r3, [r3, #0]
     fdc:	681b      	ldr	r3, [r3, #0]
     fde:	781b      	ldrb	r3, [r3, #0]
     fe0:	061b      	lsls	r3, r3, #24
     fe2:	0fdb      	lsrs	r3, r3, #31
     fe4:	b2db      	uxtb	r3, r3
     fe6:	2b00      	cmp	r3, #0
     fe8:	d002      	beq.n	ff0 <USB_Handler+0x1c>
#if !SAML22
		/*host mode ISR */
		_usb_host_interrupt_handler();
     fea:	4b05      	ldr	r3, [pc, #20]	; (1000 <USB_Handler+0x2c>)
     fec:	4798      	blx	r3
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
     fee:	e001      	b.n	ff4 <USB_Handler+0x20>
		_usb_device_interrupt_handler();
     ff0:	4b04      	ldr	r3, [pc, #16]	; (1004 <USB_Handler+0x30>)
     ff2:	4798      	blx	r3
}
     ff4:	46c0      	nop			; (mov r8, r8)
     ff6:	46bd      	mov	sp, r7
     ff8:	bd80      	pop	{r7, pc}
     ffa:	46c0      	nop			; (mov r8, r8)
     ffc:	20000c94 	.word	0x20000c94
    1000:	00000579 	.word	0x00000579
    1004:	00000a55 	.word	0x00000a55

00001008 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    1008:	b580      	push	{r7, lr}
    100a:	b082      	sub	sp, #8
    100c:	af00      	add	r7, sp, #0
    100e:	0002      	movs	r2, r0
    1010:	6039      	str	r1, [r7, #0]
    1012:	1dfb      	adds	r3, r7, #7
    1014:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1016:	1dfb      	adds	r3, r7, #7
    1018:	781b      	ldrb	r3, [r3, #0]
    101a:	2b04      	cmp	r3, #4
    101c:	d827      	bhi.n	106e <system_apb_clock_set_mask+0x66>
    101e:	009a      	lsls	r2, r3, #2
    1020:	4b16      	ldr	r3, [pc, #88]	; (107c <system_apb_clock_set_mask+0x74>)
    1022:	18d3      	adds	r3, r2, r3
    1024:	681b      	ldr	r3, [r3, #0]
    1026:	469f      	mov	pc, r3
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    1028:	4b15      	ldr	r3, [pc, #84]	; (1080 <system_apb_clock_set_mask+0x78>)
    102a:	4a15      	ldr	r2, [pc, #84]	; (1080 <system_apb_clock_set_mask+0x78>)
    102c:	6951      	ldr	r1, [r2, #20]
    102e:	683a      	ldr	r2, [r7, #0]
    1030:	430a      	orrs	r2, r1
    1032:	615a      	str	r2, [r3, #20]
			break;
    1034:	e01d      	b.n	1072 <system_apb_clock_set_mask+0x6a>

		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
    1036:	4b12      	ldr	r3, [pc, #72]	; (1080 <system_apb_clock_set_mask+0x78>)
    1038:	4a11      	ldr	r2, [pc, #68]	; (1080 <system_apb_clock_set_mask+0x78>)
    103a:	6991      	ldr	r1, [r2, #24]
    103c:	683a      	ldr	r2, [r7, #0]
    103e:	430a      	orrs	r2, r1
    1040:	619a      	str	r2, [r3, #24]
			break;
    1042:	e016      	b.n	1072 <system_apb_clock_set_mask+0x6a>

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    1044:	4b0e      	ldr	r3, [pc, #56]	; (1080 <system_apb_clock_set_mask+0x78>)
    1046:	4a0e      	ldr	r2, [pc, #56]	; (1080 <system_apb_clock_set_mask+0x78>)
    1048:	69d1      	ldr	r1, [r2, #28]
    104a:	683a      	ldr	r2, [r7, #0]
    104c:	430a      	orrs	r2, r1
    104e:	61da      	str	r2, [r3, #28]
			break;
    1050:	e00f      	b.n	1072 <system_apb_clock_set_mask+0x6a>
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    1052:	4b0b      	ldr	r3, [pc, #44]	; (1080 <system_apb_clock_set_mask+0x78>)
    1054:	4a0a      	ldr	r2, [pc, #40]	; (1080 <system_apb_clock_set_mask+0x78>)
    1056:	6a11      	ldr	r1, [r2, #32]
    1058:	683a      	ldr	r2, [r7, #0]
    105a:	430a      	orrs	r2, r1
    105c:	621a      	str	r2, [r3, #32]
			break;
    105e:	e008      	b.n	1072 <system_apb_clock_set_mask+0x6a>
		case SYSTEM_CLOCK_APB_APBE:
			MCLK->APBEMASK.reg |= mask;
    1060:	4b07      	ldr	r3, [pc, #28]	; (1080 <system_apb_clock_set_mask+0x78>)
    1062:	4a07      	ldr	r2, [pc, #28]	; (1080 <system_apb_clock_set_mask+0x78>)
    1064:	6a51      	ldr	r1, [r2, #36]	; 0x24
    1066:	683a      	ldr	r2, [r7, #0]
    1068:	430a      	orrs	r2, r1
    106a:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    106c:	e001      	b.n	1072 <system_apb_clock_set_mask+0x6a>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    106e:	2317      	movs	r3, #23
    1070:	e000      	b.n	1074 <system_apb_clock_set_mask+0x6c>

	}

	return STATUS_OK;
    1072:	2300      	movs	r3, #0
}
    1074:	0018      	movs	r0, r3
    1076:	46bd      	mov	sp, r7
    1078:	b002      	add	sp, #8
    107a:	bd80      	pop	{r7, pc}
    107c:	000250f4 	.word	0x000250f4
    1080:	40000400 	.word	0x40000400

00001084 <wdt_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool wdt_is_syncing(void)
{
    1084:	b580      	push	{r7, lr}
    1086:	b082      	sub	sp, #8
    1088:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    108a:	4b06      	ldr	r3, [pc, #24]	; (10a4 <wdt_is_syncing+0x20>)
    108c:	607b      	str	r3, [r7, #4]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	if (WDT_module->SYNCBUSY.reg) {
    108e:	687b      	ldr	r3, [r7, #4]
    1090:	689b      	ldr	r3, [r3, #8]
    1092:	2b00      	cmp	r3, #0
    1094:	d001      	beq.n	109a <wdt_is_syncing+0x16>
#else
	if (WDT_module->STATUS.reg & WDT_STATUS_SYNCBUSY) {
#endif
		return true;
    1096:	2301      	movs	r3, #1
    1098:	e000      	b.n	109c <wdt_is_syncing+0x18>
	}

	return false;
    109a:	2300      	movs	r3, #0
}
    109c:	0018      	movs	r0, r3
    109e:	46bd      	mov	sp, r7
    10a0:	b002      	add	sp, #8
    10a2:	bd80      	pop	{r7, pc}
    10a4:	40001c00 	.word	0x40001c00

000010a8 <wdt_is_locked>:
 *  it cannot be disabled or otherwise reconfigured.
 *
 *  \return Current Watchdog lock state.
 */
static inline bool wdt_is_locked(void)
{
    10a8:	b580      	push	{r7, lr}
    10aa:	b082      	sub	sp, #8
    10ac:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    10ae:	4b07      	ldr	r3, [pc, #28]	; (10cc <wdt_is_locked+0x24>)
    10b0:	607b      	str	r3, [r7, #4]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (WDT_module->CTRLA.reg & WDT_CTRLA_ALWAYSON);
    10b2:	687b      	ldr	r3, [r7, #4]
    10b4:	781b      	ldrb	r3, [r3, #0]
    10b6:	b2db      	uxtb	r3, r3
    10b8:	001a      	movs	r2, r3
    10ba:	2380      	movs	r3, #128	; 0x80
    10bc:	4013      	ands	r3, r2
    10be:	1e5a      	subs	r2, r3, #1
    10c0:	4193      	sbcs	r3, r2
    10c2:	b2db      	uxtb	r3, r3
#else
	return (WDT_module->CTRL.reg & WDT_CTRL_ALWAYSON);
#endif
}
    10c4:	0018      	movs	r0, r3
    10c6:	46bd      	mov	sp, r7
    10c8:	b002      	add	sp, #8
    10ca:	bd80      	pop	{r7, pc}
    10cc:	40001c00 	.word	0x40001c00

000010d0 <wdt_set_config>:
 * \retval STATUS_ERR_IO  If the Watchdog module is locked to be always on
 */
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
enum status_code wdt_set_config(
		const struct wdt_conf *const config)
{
    10d0:	b580      	push	{r7, lr}
    10d2:	b084      	sub	sp, #16
    10d4:	af00      	add	r7, sp, #0
    10d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	Wdt *const WDT_module = WDT;
    10d8:	4b47      	ldr	r3, [pc, #284]	; (11f8 <wdt_set_config+0x128>)
    10da:	60bb      	str	r3, [r7, #8]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_WDT);
    10dc:	2180      	movs	r1, #128	; 0x80
    10de:	2000      	movs	r0, #0
    10e0:	4b46      	ldr	r3, [pc, #280]	; (11fc <wdt_set_config+0x12c>)
    10e2:	4798      	blx	r3

	/* Check of the Watchdog has been locked to be always on, if so, abort */
	if (wdt_is_locked()) {
    10e4:	4b46      	ldr	r3, [pc, #280]	; (1200 <wdt_set_config+0x130>)
    10e6:	4798      	blx	r3
    10e8:	1e03      	subs	r3, r0, #0
    10ea:	d001      	beq.n	10f0 <wdt_set_config+0x20>
		return STATUS_ERR_IO;
    10ec:	2310      	movs	r3, #16
    10ee:	e07e      	b.n	11ee <wdt_set_config+0x11e>
	}

	/* Check for an invalid timeout period, abort if found */
	if (config->timeout_period == WDT_PERIOD_NONE) {
    10f0:	687b      	ldr	r3, [r7, #4]
    10f2:	789b      	ldrb	r3, [r3, #2]
    10f4:	2b00      	cmp	r3, #0
    10f6:	d101      	bne.n	10fc <wdt_set_config+0x2c>
		return STATUS_ERR_INVALID_ARG;
    10f8:	2317      	movs	r3, #23
    10fa:	e078      	b.n	11ee <wdt_set_config+0x11e>
	}

	/* Make sure the Window and Early Warning periods are not more than the
	 * reset period, abort if either is invalid */
	if ((config->timeout_period < config->window_period) ||
    10fc:	687b      	ldr	r3, [r7, #4]
    10fe:	789a      	ldrb	r2, [r3, #2]
    1100:	687b      	ldr	r3, [r7, #4]
    1102:	78db      	ldrb	r3, [r3, #3]
    1104:	429a      	cmp	r2, r3
    1106:	d305      	bcc.n	1114 <wdt_set_config+0x44>
			(config->timeout_period < config->early_warning_period)) {
    1108:	687b      	ldr	r3, [r7, #4]
    110a:	789a      	ldrb	r2, [r3, #2]
    110c:	687b      	ldr	r3, [r7, #4]
    110e:	791b      	ldrb	r3, [r3, #4]
	if ((config->timeout_period < config->window_period) ||
    1110:	429a      	cmp	r2, r3
    1112:	d201      	bcs.n	1118 <wdt_set_config+0x48>
		return STATUS_ERR_INVALID_ARG;
    1114:	2317      	movs	r3, #23
    1116:	e06a      	b.n	11ee <wdt_set_config+0x11e>
	}

	/* Disable the Watchdog module */
	WDT_module->CTRLA.reg &= ~WDT_CTRLA_ENABLE;
    1118:	68bb      	ldr	r3, [r7, #8]
    111a:	781b      	ldrb	r3, [r3, #0]
    111c:	b2db      	uxtb	r3, r3
    111e:	2202      	movs	r2, #2
    1120:	4393      	bics	r3, r2
    1122:	b2da      	uxtb	r2, r3
    1124:	68bb      	ldr	r3, [r7, #8]
    1126:	701a      	strb	r2, [r3, #0]

	while (wdt_is_syncing()) {
    1128:	46c0      	nop			; (mov r8, r8)
    112a:	4b36      	ldr	r3, [pc, #216]	; (1204 <wdt_set_config+0x134>)
    112c:	4798      	blx	r3
    112e:	1e03      	subs	r3, r0, #0
    1130:	d1fb      	bne.n	112a <wdt_set_config+0x5a>
		/* Wait for all hardware modules to complete synchronization */
	}

	if(config->enable == false) {
    1132:	687b      	ldr	r3, [r7, #4]
    1134:	785b      	ldrb	r3, [r3, #1]
    1136:	2201      	movs	r2, #1
    1138:	4053      	eors	r3, r2
    113a:	b2db      	uxtb	r3, r3
    113c:	2b00      	cmp	r3, #0
    113e:	d001      	beq.n	1144 <wdt_set_config+0x74>
		return STATUS_OK;
    1140:	2300      	movs	r3, #0
    1142:	e054      	b.n	11ee <wdt_set_config+0x11e>
	}

	uint32_t new_config = 0;
    1144:	2300      	movs	r3, #0
    1146:	60fb      	str	r3, [r7, #12]

	/* Update the timeout period value with the requested period */
	new_config |= (config->timeout_period - 1) << WDT_CONFIG_PER_Pos;
    1148:	687b      	ldr	r3, [r7, #4]
    114a:	789b      	ldrb	r3, [r3, #2]
    114c:	3b01      	subs	r3, #1
    114e:	001a      	movs	r2, r3
    1150:	68fb      	ldr	r3, [r7, #12]
    1152:	4313      	orrs	r3, r2
    1154:	60fb      	str	r3, [r7, #12]

	/* Check if the user has requested a reset window period */
	if (config->window_period != WDT_PERIOD_NONE) {
    1156:	687b      	ldr	r3, [r7, #4]
    1158:	78db      	ldrb	r3, [r3, #3]
    115a:	2b00      	cmp	r3, #0
    115c:	d010      	beq.n	1180 <wdt_set_config+0xb0>
		WDT_module->CTRLA.reg |= WDT_CTRLA_WEN;
    115e:	68bb      	ldr	r3, [r7, #8]
    1160:	781b      	ldrb	r3, [r3, #0]
    1162:	b2db      	uxtb	r3, r3
    1164:	2204      	movs	r2, #4
    1166:	4313      	orrs	r3, r2
    1168:	b2da      	uxtb	r2, r3
    116a:	68bb      	ldr	r3, [r7, #8]
    116c:	701a      	strb	r2, [r3, #0]

		/* Update and enable the timeout period value */
		new_config |= (config->window_period - 1) << WDT_CONFIG_WINDOW_Pos;
    116e:	687b      	ldr	r3, [r7, #4]
    1170:	78db      	ldrb	r3, [r3, #3]
    1172:	3b01      	subs	r3, #1
    1174:	011b      	lsls	r3, r3, #4
    1176:	001a      	movs	r2, r3
    1178:	68fb      	ldr	r3, [r7, #12]
    117a:	4313      	orrs	r3, r2
    117c:	60fb      	str	r3, [r7, #12]
    117e:	e007      	b.n	1190 <wdt_set_config+0xc0>
	} else {
		/* Ensure the window enable control flag is cleared */
		WDT_module->CTRLA.reg &= ~WDT_CTRLA_WEN;
    1180:	68bb      	ldr	r3, [r7, #8]
    1182:	781b      	ldrb	r3, [r3, #0]
    1184:	b2db      	uxtb	r3, r3
    1186:	2204      	movs	r2, #4
    1188:	4393      	bics	r3, r2
    118a:	b2da      	uxtb	r2, r3
    118c:	68bb      	ldr	r3, [r7, #8]
    118e:	701a      	strb	r2, [r3, #0]
	}

	while (wdt_is_syncing()) {
    1190:	46c0      	nop			; (mov r8, r8)
    1192:	4b1c      	ldr	r3, [pc, #112]	; (1204 <wdt_set_config+0x134>)
    1194:	4798      	blx	r3
    1196:	1e03      	subs	r3, r0, #0
    1198:	d1fb      	bne.n	1192 <wdt_set_config+0xc2>
		/* Wait for all hardware modules to complete synchronization */
	}

	/* Write the new Watchdog configuration */
	WDT_module->CONFIG.reg = new_config;
    119a:	68fb      	ldr	r3, [r7, #12]
    119c:	b2da      	uxtb	r2, r3
    119e:	68bb      	ldr	r3, [r7, #8]
    11a0:	705a      	strb	r2, [r3, #1]

	/* Check if the user has requested an early warning period */
	if (config->early_warning_period != WDT_PERIOD_NONE) {
    11a2:	687b      	ldr	r3, [r7, #4]
    11a4:	791b      	ldrb	r3, [r3, #4]
    11a6:	2b00      	cmp	r3, #0
    11a8:	d005      	beq.n	11b6 <wdt_set_config+0xe6>
		/* Set the Early Warning period */
		WDT_module->EWCTRL.reg
			= (config->early_warning_period - 1) << WDT_EWCTRL_EWOFFSET_Pos;
    11aa:	687b      	ldr	r3, [r7, #4]
    11ac:	791b      	ldrb	r3, [r3, #4]
    11ae:	3b01      	subs	r3, #1
    11b0:	b2da      	uxtb	r2, r3
    11b2:	68bb      	ldr	r3, [r7, #8]
    11b4:	709a      	strb	r2, [r3, #2]
	}

	/* Either enable or lock-enable the Watchdog timer depending on the user
	 * settings */
	if (config->always_on) {
    11b6:	687b      	ldr	r3, [r7, #4]
    11b8:	781b      	ldrb	r3, [r3, #0]
    11ba:	2b00      	cmp	r3, #0
    11bc:	d009      	beq.n	11d2 <wdt_set_config+0x102>
		WDT_module->CTRLA.reg |= WDT_CTRLA_ALWAYSON;
    11be:	68bb      	ldr	r3, [r7, #8]
    11c0:	781b      	ldrb	r3, [r3, #0]
    11c2:	b2db      	uxtb	r3, r3
    11c4:	2280      	movs	r2, #128	; 0x80
    11c6:	4252      	negs	r2, r2
    11c8:	4313      	orrs	r3, r2
    11ca:	b2da      	uxtb	r2, r3
    11cc:	68bb      	ldr	r3, [r7, #8]
    11ce:	701a      	strb	r2, [r3, #0]
    11d0:	e007      	b.n	11e2 <wdt_set_config+0x112>
	} else {
		WDT_module->CTRLA.reg |= WDT_CTRLA_ENABLE;
    11d2:	68bb      	ldr	r3, [r7, #8]
    11d4:	781b      	ldrb	r3, [r3, #0]
    11d6:	b2db      	uxtb	r3, r3
    11d8:	2202      	movs	r2, #2
    11da:	4313      	orrs	r3, r2
    11dc:	b2da      	uxtb	r2, r3
    11de:	68bb      	ldr	r3, [r7, #8]
    11e0:	701a      	strb	r2, [r3, #0]
	}

	while (wdt_is_syncing()) {
    11e2:	46c0      	nop			; (mov r8, r8)
    11e4:	4b07      	ldr	r3, [pc, #28]	; (1204 <wdt_set_config+0x134>)
    11e6:	4798      	blx	r3
    11e8:	1e03      	subs	r3, r0, #0
    11ea:	d1fb      	bne.n	11e4 <wdt_set_config+0x114>
		/* Wait for all hardware modules to complete synchronization */
	}

	return STATUS_OK;
    11ec:	2300      	movs	r3, #0
}
    11ee:	0018      	movs	r0, r3
    11f0:	46bd      	mov	sp, r7
    11f2:	b004      	add	sp, #16
    11f4:	bd80      	pop	{r7, pc}
    11f6:	46c0      	nop			; (mov r8, r8)
    11f8:	40001c00 	.word	0x40001c00
    11fc:	00001009 	.word	0x00001009
    1200:	000010a9 	.word	0x000010a9
    1204:	00001085 	.word	0x00001085

00001208 <wdt_reset_count>:
 * period count elapsed. This function should be called after the window
 * period (if one was set in the module configuration) but before the timeout
 * period to prevent a reset of the system.
 */
void wdt_reset_count(void)
{
    1208:	b580      	push	{r7, lr}
    120a:	b082      	sub	sp, #8
    120c:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    120e:	4b07      	ldr	r3, [pc, #28]	; (122c <wdt_reset_count+0x24>)
    1210:	607b      	str	r3, [r7, #4]

	/* Disable the Watchdog module */
	WDT_module->CLEAR.reg = WDT_CLEAR_CLEAR_KEY;
    1212:	687b      	ldr	r3, [r7, #4]
    1214:	22a5      	movs	r2, #165	; 0xa5
    1216:	731a      	strb	r2, [r3, #12]

	while (wdt_is_syncing()) {
    1218:	46c0      	nop			; (mov r8, r8)
    121a:	4b05      	ldr	r3, [pc, #20]	; (1230 <wdt_reset_count+0x28>)
    121c:	4798      	blx	r3
    121e:	1e03      	subs	r3, r0, #0
    1220:	d1fb      	bne.n	121a <wdt_reset_count+0x12>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    1222:	46c0      	nop			; (mov r8, r8)
    1224:	46bd      	mov	sp, r7
    1226:	b002      	add	sp, #8
    1228:	bd80      	pop	{r7, pc}
    122a:	46c0      	nop			; (mov r8, r8)
    122c:	40001c00 	.word	0x40001c00
    1230:	00001085 	.word	0x00001085

00001234 <wdt_clear_early_warning>:
 *
 *  Clears the Watchdog timer early warning period elapsed flag, so that a new
 *  early warning period can be detected.
 */
static inline void wdt_clear_early_warning(void)
{
    1234:	b580      	push	{r7, lr}
    1236:	b082      	sub	sp, #8
    1238:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    123a:	4b04      	ldr	r3, [pc, #16]	; (124c <wdt_clear_early_warning+0x18>)
    123c:	607b      	str	r3, [r7, #4]

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
    123e:	687b      	ldr	r3, [r7, #4]
    1240:	2201      	movs	r2, #1
    1242:	719a      	strb	r2, [r3, #6]
}
    1244:	46c0      	nop			; (mov r8, r8)
    1246:	46bd      	mov	sp, r7
    1248:	b002      	add	sp, #8
    124a:	bd80      	pop	{r7, pc}
    124c:	40001c00 	.word	0x40001c00

00001250 <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
    1250:	b580      	push	{r7, lr}
    1252:	af00      	add	r7, sp, #0
	wdt_clear_early_warning();
    1254:	4b05      	ldr	r3, [pc, #20]	; (126c <WDT_Handler+0x1c>)
    1256:	4798      	blx	r3

	if (wdt_early_warning_callback) {
    1258:	4b05      	ldr	r3, [pc, #20]	; (1270 <WDT_Handler+0x20>)
    125a:	681b      	ldr	r3, [r3, #0]
    125c:	2b00      	cmp	r3, #0
    125e:	d002      	beq.n	1266 <WDT_Handler+0x16>
		wdt_early_warning_callback();
    1260:	4b03      	ldr	r3, [pc, #12]	; (1270 <WDT_Handler+0x20>)
    1262:	681b      	ldr	r3, [r3, #0]
    1264:	4798      	blx	r3
	}
}
    1266:	46c0      	nop			; (mov r8, r8)
    1268:	46bd      	mov	sp, r7
    126a:	bd80      	pop	{r7, pc}
    126c:	00001235 	.word	0x00001235
    1270:	20000f4c 	.word	0x20000f4c

00001274 <backlightCustomAdjust>:
//Backlight Settings
#define LED_MAX 225 //93%; limited by driver current limit per datasheet



struct BACKLIGHTCOLOR * backlightCustomAdjust(char refColor, int8_t adjustment){
    1274:	b580      	push	{r7, lr}
    1276:	b084      	sub	sp, #16
    1278:	af00      	add	r7, sp, #0
    127a:	0002      	movs	r2, r0
    127c:	1dfb      	adds	r3, r7, #7
    127e:	701a      	strb	r2, [r3, #0]
    1280:	1dbb      	adds	r3, r7, #6
    1282:	1c0a      	adds	r2, r1, #0
    1284:	701a      	strb	r2, [r3, #0]
	uint8_t * colorPtr;
	uint8_t maxRef;
	
	switch (refColor){
    1286:	1dfb      	adds	r3, r7, #7
    1288:	781b      	ldrb	r3, [r3, #0]
    128a:	2b62      	cmp	r3, #98	; 0x62
    128c:	d00f      	beq.n	12ae <backlightCustomAdjust+0x3a>
    128e:	dc02      	bgt.n	1296 <backlightCustomAdjust+0x22>
    1290:	2b4c      	cmp	r3, #76	; 0x4c
    1292:	d01c      	beq.n	12ce <backlightCustomAdjust+0x5a>
    1294:	e023      	b.n	12de <backlightCustomAdjust+0x6a>
    1296:	2b67      	cmp	r3, #103	; 0x67
    1298:	d011      	beq.n	12be <backlightCustomAdjust+0x4a>
    129a:	2b72      	cmp	r3, #114	; 0x72
    129c:	d11f      	bne.n	12de <backlightCustomAdjust+0x6a>
		case 'r':
			colorPtr = &colorCustom.red;
    129e:	4b29      	ldr	r3, [pc, #164]	; (1344 <backlightCustomAdjust+0xd0>)
    12a0:	60fb      	str	r3, [r7, #12]
			maxRef = options.backlight_setting.maxColor;
    12a2:	230b      	movs	r3, #11
    12a4:	18fb      	adds	r3, r7, r3
    12a6:	4a28      	ldr	r2, [pc, #160]	; (1348 <backlightCustomAdjust+0xd4>)
    12a8:	7c12      	ldrb	r2, [r2, #16]
    12aa:	701a      	strb	r2, [r3, #0]
			break;
    12ac:	e01e      	b.n	12ec <backlightCustomAdjust+0x78>
		case 'b':
			colorPtr = &colorCustom.blue;
    12ae:	4b27      	ldr	r3, [pc, #156]	; (134c <backlightCustomAdjust+0xd8>)
    12b0:	60fb      	str	r3, [r7, #12]
			maxRef = options.backlight_setting.maxColor;
    12b2:	230b      	movs	r3, #11
    12b4:	18fb      	adds	r3, r7, r3
    12b6:	4a24      	ldr	r2, [pc, #144]	; (1348 <backlightCustomAdjust+0xd4>)
    12b8:	7c12      	ldrb	r2, [r2, #16]
    12ba:	701a      	strb	r2, [r3, #0]
			break;
    12bc:	e016      	b.n	12ec <backlightCustomAdjust+0x78>
		case 'g':
			colorPtr = &colorCustom.green;
    12be:	4b24      	ldr	r3, [pc, #144]	; (1350 <backlightCustomAdjust+0xdc>)
    12c0:	60fb      	str	r3, [r7, #12]
			maxRef = options.backlight_setting.maxColor;
    12c2:	230b      	movs	r3, #11
    12c4:	18fb      	adds	r3, r7, r3
    12c6:	4a20      	ldr	r2, [pc, #128]	; (1348 <backlightCustomAdjust+0xd4>)
    12c8:	7c12      	ldrb	r2, [r2, #16]
    12ca:	701a      	strb	r2, [r3, #0]
			break;	
    12cc:	e00e      	b.n	12ec <backlightCustomAdjust+0x78>
		case 'L':
			colorPtr = &options.backlight_setting.brightness;
    12ce:	4b21      	ldr	r3, [pc, #132]	; (1354 <backlightCustomAdjust+0xe0>)
    12d0:	60fb      	str	r3, [r7, #12]
			maxRef = options.backlight_setting.maxBrightness;
    12d2:	230b      	movs	r3, #11
    12d4:	18fb      	adds	r3, r7, r3
    12d6:	4a1c      	ldr	r2, [pc, #112]	; (1348 <backlightCustomAdjust+0xd4>)
    12d8:	7c52      	ldrb	r2, [r2, #17]
    12da:	701a      	strb	r2, [r3, #0]
			break;
    12dc:	e006      	b.n	12ec <backlightCustomAdjust+0x78>
		default:
			colorPtr = &options.backlight_setting.brightness;
    12de:	4b1d      	ldr	r3, [pc, #116]	; (1354 <backlightCustomAdjust+0xe0>)
    12e0:	60fb      	str	r3, [r7, #12]
			maxRef = options.backlight_setting.maxBrightness;
    12e2:	230b      	movs	r3, #11
    12e4:	18fb      	adds	r3, r7, r3
    12e6:	4a18      	ldr	r2, [pc, #96]	; (1348 <backlightCustomAdjust+0xd4>)
    12e8:	7c52      	ldrb	r2, [r2, #17]
    12ea:	701a      	strb	r2, [r3, #0]
	}
	
	if (adjustment>0){
    12ec:	1dbb      	adds	r3, r7, #6
    12ee:	781b      	ldrb	r3, [r3, #0]
    12f0:	b25b      	sxtb	r3, r3
    12f2:	2b00      	cmp	r3, #0
    12f4:	dd0f      	ble.n	1316 <backlightCustomAdjust+0xa2>
		if (*colorPtr<maxRef){
    12f6:	68fb      	ldr	r3, [r7, #12]
    12f8:	781b      	ldrb	r3, [r3, #0]
    12fa:	220b      	movs	r2, #11
    12fc:	18ba      	adds	r2, r7, r2
    12fe:	7812      	ldrb	r2, [r2, #0]
    1300:	429a      	cmp	r2, r3
    1302:	d918      	bls.n	1336 <backlightCustomAdjust+0xc2>
			*colorPtr = *colorPtr+adjustment;
    1304:	68fb      	ldr	r3, [r7, #12]
    1306:	781a      	ldrb	r2, [r3, #0]
    1308:	1dbb      	adds	r3, r7, #6
    130a:	781b      	ldrb	r3, [r3, #0]
    130c:	18d3      	adds	r3, r2, r3
    130e:	b2da      	uxtb	r2, r3
    1310:	68fb      	ldr	r3, [r7, #12]
    1312:	701a      	strb	r2, [r3, #0]
    1314:	e00f      	b.n	1336 <backlightCustomAdjust+0xc2>
		}
	}else if (adjustment<0){
    1316:	1dbb      	adds	r3, r7, #6
    1318:	781b      	ldrb	r3, [r3, #0]
    131a:	2b7f      	cmp	r3, #127	; 0x7f
    131c:	d90b      	bls.n	1336 <backlightCustomAdjust+0xc2>
		if (*colorPtr>0){
    131e:	68fb      	ldr	r3, [r7, #12]
    1320:	781b      	ldrb	r3, [r3, #0]
    1322:	2b00      	cmp	r3, #0
    1324:	d007      	beq.n	1336 <backlightCustomAdjust+0xc2>
			*colorPtr = *colorPtr+adjustment;
    1326:	68fb      	ldr	r3, [r7, #12]
    1328:	781a      	ldrb	r2, [r3, #0]
    132a:	1dbb      	adds	r3, r7, #6
    132c:	781b      	ldrb	r3, [r3, #0]
    132e:	18d3      	adds	r3, r2, r3
    1330:	b2da      	uxtb	r2, r3
    1332:	68fb      	ldr	r3, [r7, #12]
    1334:	701a      	strb	r2, [r3, #0]
		}
	}
	
	backlightOn();
    1336:	4b08      	ldr	r3, [pc, #32]	; (1358 <backlightCustomAdjust+0xe4>)
    1338:	4798      	blx	r3
	
	return &colorCustom;
    133a:	4b08      	ldr	r3, [pc, #32]	; (135c <backlightCustomAdjust+0xe8>)
	
}
    133c:	0018      	movs	r0, r3
    133e:	46bd      	mov	sp, r7
    1340:	b004      	add	sp, #16
    1342:	bd80      	pop	{r7, pc}
    1344:	2000003c 	.word	0x2000003c
    1348:	20002eec 	.word	0x20002eec
    134c:	2000003d 	.word	0x2000003d
    1350:	2000003e 	.word	0x2000003e
    1354:	20002ef8 	.word	0x20002ef8
    1358:	00001441 	.word	0x00001441
    135c:	20000038 	.word	0x20000038

00001360 <backlightColorToggle>:


void backlightColorToggle(void){
    1360:	b580      	push	{r7, lr}
    1362:	af00      	add	r7, sp, #0
	options.backlight_setting.colorRef++;
    1364:	4b08      	ldr	r3, [pc, #32]	; (1388 <backlightColorToggle+0x28>)
    1366:	7c9b      	ldrb	r3, [r3, #18]
    1368:	3301      	adds	r3, #1
    136a:	b2da      	uxtb	r2, r3
    136c:	4b06      	ldr	r3, [pc, #24]	; (1388 <backlightColorToggle+0x28>)
    136e:	749a      	strb	r2, [r3, #18]
	if (options.backlight_setting.colorRef>=(sizeof(colorOptions)/sizeof(&colorCustom))){
    1370:	4b05      	ldr	r3, [pc, #20]	; (1388 <backlightColorToggle+0x28>)
    1372:	7c9b      	ldrb	r3, [r3, #18]
    1374:	2b06      	cmp	r3, #6
    1376:	d902      	bls.n	137e <backlightColorToggle+0x1e>
		options.backlight_setting.colorRef = 1;
    1378:	4b03      	ldr	r3, [pc, #12]	; (1388 <backlightColorToggle+0x28>)
    137a:	2201      	movs	r2, #1
    137c:	749a      	strb	r2, [r3, #18]
	}
	backlightOn();
    137e:	4b03      	ldr	r3, [pc, #12]	; (138c <backlightColorToggle+0x2c>)
    1380:	4798      	blx	r3
	
}
    1382:	46c0      	nop			; (mov r8, r8)
    1384:	46bd      	mov	sp, r7
    1386:	bd80      	pop	{r7, pc}
    1388:	20002eec 	.word	0x20002eec
    138c:	00001441 	.word	0x00001441

00001390 <backlightPlus>:

void backlightPlus(void){
    1390:	b580      	push	{r7, lr}
    1392:	af00      	add	r7, sp, #0
	if (options.backlight_setting.brightness<options.backlight_setting.maxBrightness){
    1394:	4b08      	ldr	r3, [pc, #32]	; (13b8 <backlightPlus+0x28>)
    1396:	7b1a      	ldrb	r2, [r3, #12]
    1398:	4b07      	ldr	r3, [pc, #28]	; (13b8 <backlightPlus+0x28>)
    139a:	7c5b      	ldrb	r3, [r3, #17]
    139c:	429a      	cmp	r2, r3
    139e:	d205      	bcs.n	13ac <backlightPlus+0x1c>
		options.backlight_setting.brightness = options.backlight_setting.brightness+1;
    13a0:	4b05      	ldr	r3, [pc, #20]	; (13b8 <backlightPlus+0x28>)
    13a2:	7b1b      	ldrb	r3, [r3, #12]
    13a4:	3301      	adds	r3, #1
    13a6:	b2da      	uxtb	r2, r3
    13a8:	4b03      	ldr	r3, [pc, #12]	; (13b8 <backlightPlus+0x28>)
    13aa:	731a      	strb	r2, [r3, #12]
	}	
	backlightOn();
    13ac:	4b03      	ldr	r3, [pc, #12]	; (13bc <backlightPlus+0x2c>)
    13ae:	4798      	blx	r3
}
    13b0:	46c0      	nop			; (mov r8, r8)
    13b2:	46bd      	mov	sp, r7
    13b4:	bd80      	pop	{r7, pc}
    13b6:	46c0      	nop			; (mov r8, r8)
    13b8:	20002eec 	.word	0x20002eec
    13bc:	00001441 	.word	0x00001441

000013c0 <backlightMinus>:

void backlightMinus(void){	
    13c0:	b580      	push	{r7, lr}
    13c2:	af00      	add	r7, sp, #0
	if (options.backlight_setting.brightness>0){
    13c4:	4b07      	ldr	r3, [pc, #28]	; (13e4 <backlightMinus+0x24>)
    13c6:	7b1b      	ldrb	r3, [r3, #12]
    13c8:	2b00      	cmp	r3, #0
    13ca:	d005      	beq.n	13d8 <backlightMinus+0x18>
		options.backlight_setting.brightness = options.backlight_setting.brightness-1;
    13cc:	4b05      	ldr	r3, [pc, #20]	; (13e4 <backlightMinus+0x24>)
    13ce:	7b1b      	ldrb	r3, [r3, #12]
    13d0:	3b01      	subs	r3, #1
    13d2:	b2da      	uxtb	r2, r3
    13d4:	4b03      	ldr	r3, [pc, #12]	; (13e4 <backlightMinus+0x24>)
    13d6:	731a      	strb	r2, [r3, #12]
	}
	backlightOn();
    13d8:	4b03      	ldr	r3, [pc, #12]	; (13e8 <backlightMinus+0x28>)
    13da:	4798      	blx	r3
	
}
    13dc:	46c0      	nop			; (mov r8, r8)
    13de:	46bd      	mov	sp, r7
    13e0:	bd80      	pop	{r7, pc}
    13e2:	46c0      	nop			; (mov r8, r8)
    13e4:	20002eec 	.word	0x20002eec
    13e8:	00001441 	.word	0x00001441

000013ec <backlightLevelToggle>:

void backlightLevelToggle(void){
    13ec:	b580      	push	{r7, lr}
    13ee:	af00      	add	r7, sp, #0
	options.backlight_setting.brightness = options.backlight_setting.brightness+1;
    13f0:	4b09      	ldr	r3, [pc, #36]	; (1418 <backlightLevelToggle+0x2c>)
    13f2:	7b1b      	ldrb	r3, [r3, #12]
    13f4:	3301      	adds	r3, #1
    13f6:	b2da      	uxtb	r2, r3
    13f8:	4b07      	ldr	r3, [pc, #28]	; (1418 <backlightLevelToggle+0x2c>)
    13fa:	731a      	strb	r2, [r3, #12]
	
	if (options.backlight_setting.brightness>options.backlight_setting.maxBrightness){
    13fc:	4b06      	ldr	r3, [pc, #24]	; (1418 <backlightLevelToggle+0x2c>)
    13fe:	7b1a      	ldrb	r2, [r3, #12]
    1400:	4b05      	ldr	r3, [pc, #20]	; (1418 <backlightLevelToggle+0x2c>)
    1402:	7c5b      	ldrb	r3, [r3, #17]
    1404:	429a      	cmp	r2, r3
    1406:	d902      	bls.n	140e <backlightLevelToggle+0x22>
		options.backlight_setting.brightness = 0;
    1408:	4b03      	ldr	r3, [pc, #12]	; (1418 <backlightLevelToggle+0x2c>)
    140a:	2200      	movs	r2, #0
    140c:	731a      	strb	r2, [r3, #12]
	}
	backlightOn();
    140e:	4b03      	ldr	r3, [pc, #12]	; (141c <backlightLevelToggle+0x30>)
    1410:	4798      	blx	r3
	
}
    1412:	46c0      	nop			; (mov r8, r8)
    1414:	46bd      	mov	sp, r7
    1416:	bd80      	pop	{r7, pc}
    1418:	20002eec 	.word	0x20002eec
    141c:	00001441 	.word	0x00001441

00001420 <backlightGetCurrentColor>:

char* backlightGetCurrentColor(void){
    1420:	b580      	push	{r7, lr}
    1422:	af00      	add	r7, sp, #0
	return colorOptions[options.backlight_setting.colorRef]->colorStringPtr;	
    1424:	4b04      	ldr	r3, [pc, #16]	; (1438 <backlightGetCurrentColor+0x18>)
    1426:	7c9b      	ldrb	r3, [r3, #18]
    1428:	001a      	movs	r2, r3
    142a:	4b04      	ldr	r3, [pc, #16]	; (143c <backlightGetCurrentColor+0x1c>)
    142c:	0092      	lsls	r2, r2, #2
    142e:	58d3      	ldr	r3, [r2, r3]
    1430:	681b      	ldr	r3, [r3, #0]
}
    1432:	0018      	movs	r0, r3
    1434:	46bd      	mov	sp, r7
    1436:	bd80      	pop	{r7, pc}
    1438:	20002eec 	.word	0x20002eec
    143c:	20000070 	.word	0x20000070

00001440 <backlightOn>:

void backlightOn(void){
    1440:	b580      	push	{r7, lr}
    1442:	af00      	add	r7, sp, #0
	backlight_level(&options.backlight_setting);	
    1444:	4b03      	ldr	r3, [pc, #12]	; (1454 <backlightOn+0x14>)
    1446:	0018      	movs	r0, r3
    1448:	4b03      	ldr	r3, [pc, #12]	; (1458 <backlightOn+0x18>)
    144a:	4798      	blx	r3
}
    144c:	46c0      	nop			; (mov r8, r8)
    144e:	46bd      	mov	sp, r7
    1450:	bd80      	pop	{r7, pc}
    1452:	46c0      	nop			; (mov r8, r8)
    1454:	20002ef8 	.word	0x20002ef8
    1458:	0000145d 	.word	0x0000145d

0000145c <backlight_level>:


void backlight_level(struct BACKLIGHT_SETTING *blset){
    145c:	b5f0      	push	{r4, r5, r6, r7, lr}
    145e:	b091      	sub	sp, #68	; 0x44
    1460:	af00      	add	r7, sp, #0
    1462:	61f8      	str	r0, [r7, #28]
    1464:	466b      	mov	r3, sp
    1466:	61bb      	str	r3, [r7, #24]
	uint8_t u8blue, u8green, u8red;
	float fred, fblue, fgreen;
	float scale;
	
	fred = colorOptions[blset->colorRef]->red;
    1468:	69fb      	ldr	r3, [r7, #28]
    146a:	799b      	ldrb	r3, [r3, #6]
    146c:	001a      	movs	r2, r3
    146e:	4b97      	ldr	r3, [pc, #604]	; (16cc <backlight_level+0x270>)
    1470:	0092      	lsls	r2, r2, #2
    1472:	58d3      	ldr	r3, [r2, r3]
    1474:	791a      	ldrb	r2, [r3, #4]
    1476:	4b96      	ldr	r3, [pc, #600]	; (16d0 <backlight_level+0x274>)
    1478:	0010      	movs	r0, r2
    147a:	4798      	blx	r3
    147c:	1c03      	adds	r3, r0, #0
    147e:	63bb      	str	r3, [r7, #56]	; 0x38
	fgreen = colorOptions[blset->colorRef]->green;
    1480:	69fb      	ldr	r3, [r7, #28]
    1482:	799b      	ldrb	r3, [r3, #6]
    1484:	001a      	movs	r2, r3
    1486:	4b91      	ldr	r3, [pc, #580]	; (16cc <backlight_level+0x270>)
    1488:	0092      	lsls	r2, r2, #2
    148a:	58d3      	ldr	r3, [r2, r3]
    148c:	799a      	ldrb	r2, [r3, #6]
    148e:	4b90      	ldr	r3, [pc, #576]	; (16d0 <backlight_level+0x274>)
    1490:	0010      	movs	r0, r2
    1492:	4798      	blx	r3
    1494:	1c03      	adds	r3, r0, #0
    1496:	637b      	str	r3, [r7, #52]	; 0x34
	fblue = colorOptions[blset->colorRef]->blue;
    1498:	69fb      	ldr	r3, [r7, #28]
    149a:	799b      	ldrb	r3, [r3, #6]
    149c:	001a      	movs	r2, r3
    149e:	4b8b      	ldr	r3, [pc, #556]	; (16cc <backlight_level+0x270>)
    14a0:	0092      	lsls	r2, r2, #2
    14a2:	58d3      	ldr	r3, [r2, r3]
    14a4:	795a      	ldrb	r2, [r3, #5]
    14a6:	4b8a      	ldr	r3, [pc, #552]	; (16d0 <backlight_level+0x274>)
    14a8:	0010      	movs	r0, r2
    14aa:	4798      	blx	r3
    14ac:	1c03      	adds	r3, r0, #0
    14ae:	633b      	str	r3, [r7, #48]	; 0x30
	
	
	
	scale = 1/(fred+fgreen+fblue);
    14b0:	4b88      	ldr	r3, [pc, #544]	; (16d4 <backlight_level+0x278>)
    14b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
    14b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    14b6:	4798      	blx	r3
    14b8:	1c03      	adds	r3, r0, #0
    14ba:	1c1a      	adds	r2, r3, #0
    14bc:	4b85      	ldr	r3, [pc, #532]	; (16d4 <backlight_level+0x278>)
    14be:	6b39      	ldr	r1, [r7, #48]	; 0x30
    14c0:	1c10      	adds	r0, r2, #0
    14c2:	4798      	blx	r3
    14c4:	1c03      	adds	r3, r0, #0
    14c6:	1c1a      	adds	r2, r3, #0
    14c8:	4b83      	ldr	r3, [pc, #524]	; (16d8 <backlight_level+0x27c>)
    14ca:	1c11      	adds	r1, r2, #0
    14cc:	20fe      	movs	r0, #254	; 0xfe
    14ce:	0580      	lsls	r0, r0, #22
    14d0:	4798      	blx	r3
    14d2:	1c03      	adds	r3, r0, #0
    14d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	scale = scale*blset->brightness/blset->maxBrightness;
    14d6:	69fb      	ldr	r3, [r7, #28]
    14d8:	781b      	ldrb	r3, [r3, #0]
    14da:	001a      	movs	r2, r3
    14dc:	4b7f      	ldr	r3, [pc, #508]	; (16dc <backlight_level+0x280>)
    14de:	0010      	movs	r0, r2
    14e0:	4798      	blx	r3
    14e2:	1c02      	adds	r2, r0, #0
    14e4:	4b7e      	ldr	r3, [pc, #504]	; (16e0 <backlight_level+0x284>)
    14e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    14e8:	1c10      	adds	r0, r2, #0
    14ea:	4798      	blx	r3
    14ec:	1c03      	adds	r3, r0, #0
    14ee:	1c1c      	adds	r4, r3, #0
    14f0:	69fb      	ldr	r3, [r7, #28]
    14f2:	795b      	ldrb	r3, [r3, #5]
    14f4:	001a      	movs	r2, r3
    14f6:	4b79      	ldr	r3, [pc, #484]	; (16dc <backlight_level+0x280>)
    14f8:	0010      	movs	r0, r2
    14fa:	4798      	blx	r3
    14fc:	1c02      	adds	r2, r0, #0
    14fe:	4b76      	ldr	r3, [pc, #472]	; (16d8 <backlight_level+0x27c>)
    1500:	1c11      	adds	r1, r2, #0
    1502:	1c20      	adds	r0, r4, #0
    1504:	4798      	blx	r3
    1506:	1c03      	adds	r3, r0, #0
    1508:	62fb      	str	r3, [r7, #44]	; 0x2c
	fred = scale*fred;
    150a:	4b75      	ldr	r3, [pc, #468]	; (16e0 <backlight_level+0x284>)
    150c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    150e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    1510:	4798      	blx	r3
    1512:	1c03      	adds	r3, r0, #0
    1514:	63bb      	str	r3, [r7, #56]	; 0x38
	fblue = scale*fblue;
    1516:	4b72      	ldr	r3, [pc, #456]	; (16e0 <backlight_level+0x284>)
    1518:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    151a:	6b38      	ldr	r0, [r7, #48]	; 0x30
    151c:	4798      	blx	r3
    151e:	1c03      	adds	r3, r0, #0
    1520:	633b      	str	r3, [r7, #48]	; 0x30
	fgreen = scale*fgreen;
    1522:	4b6f      	ldr	r3, [pc, #444]	; (16e0 <backlight_level+0x284>)
    1524:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    1526:	6b78      	ldr	r0, [r7, #52]	; 0x34
    1528:	4798      	blx	r3
    152a:	1c03      	adds	r3, r0, #0
    152c:	637b      	str	r3, [r7, #52]	; 0x34
	
	u8red = fred*LED_MAX;
    152e:	4b6c      	ldr	r3, [pc, #432]	; (16e0 <backlight_level+0x284>)
    1530:	496c      	ldr	r1, [pc, #432]	; (16e4 <backlight_level+0x288>)
    1532:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    1534:	4798      	blx	r3
    1536:	1c03      	adds	r3, r0, #0
    1538:	1c1a      	adds	r2, r3, #0
    153a:	2326      	movs	r3, #38	; 0x26
    153c:	2118      	movs	r1, #24
    153e:	1879      	adds	r1, r7, r1
    1540:	18cc      	adds	r4, r1, r3
    1542:	4b69      	ldr	r3, [pc, #420]	; (16e8 <backlight_level+0x28c>)
    1544:	1c10      	adds	r0, r2, #0
    1546:	4798      	blx	r3
    1548:	0003      	movs	r3, r0
    154a:	7023      	strb	r3, [r4, #0]
	u8blue = fblue*LED_MAX;
    154c:	4b64      	ldr	r3, [pc, #400]	; (16e0 <backlight_level+0x284>)
    154e:	4965      	ldr	r1, [pc, #404]	; (16e4 <backlight_level+0x288>)
    1550:	6b38      	ldr	r0, [r7, #48]	; 0x30
    1552:	4798      	blx	r3
    1554:	1c03      	adds	r3, r0, #0
    1556:	1c1a      	adds	r2, r3, #0
    1558:	2327      	movs	r3, #39	; 0x27
    155a:	2118      	movs	r1, #24
    155c:	1879      	adds	r1, r7, r1
    155e:	18cc      	adds	r4, r1, r3
    1560:	4b61      	ldr	r3, [pc, #388]	; (16e8 <backlight_level+0x28c>)
    1562:	1c10      	adds	r0, r2, #0
    1564:	4798      	blx	r3
    1566:	0003      	movs	r3, r0
    1568:	7023      	strb	r3, [r4, #0]
	u8green = fgreen*LED_MAX;
    156a:	4b5d      	ldr	r3, [pc, #372]	; (16e0 <backlight_level+0x284>)
    156c:	495d      	ldr	r1, [pc, #372]	; (16e4 <backlight_level+0x288>)
    156e:	6b78      	ldr	r0, [r7, #52]	; 0x34
    1570:	4798      	blx	r3
    1572:	1c03      	adds	r3, r0, #0
    1574:	1c1a      	adds	r2, r3, #0
    1576:	2313      	movs	r3, #19
    1578:	2118      	movs	r1, #24
    157a:	1879      	adds	r1, r7, r1
    157c:	18cc      	adds	r4, r1, r3
    157e:	4b5a      	ldr	r3, [pc, #360]	; (16e8 <backlight_level+0x28c>)
    1580:	1c10      	adds	r0, r2, #0
    1582:	4798      	blx	r3
    1584:	0003      	movs	r3, r0
    1586:	7023      	strb	r3, [r4, #0]
	
	// Precaution to not put too much current through PWM driver
	if (u8red>LED_MAX){u8red = LED_MAX;}
    1588:	2326      	movs	r3, #38	; 0x26
    158a:	2218      	movs	r2, #24
    158c:	4694      	mov	ip, r2
    158e:	44bc      	add	ip, r7
    1590:	4463      	add	r3, ip
    1592:	781b      	ldrb	r3, [r3, #0]
    1594:	2be1      	cmp	r3, #225	; 0xe1
    1596:	d906      	bls.n	15a6 <backlight_level+0x14a>
    1598:	2326      	movs	r3, #38	; 0x26
    159a:	2218      	movs	r2, #24
    159c:	4694      	mov	ip, r2
    159e:	44bc      	add	ip, r7
    15a0:	4463      	add	r3, ip
    15a2:	22e1      	movs	r2, #225	; 0xe1
    15a4:	701a      	strb	r2, [r3, #0]
	if (u8blue>LED_MAX){u8blue = LED_MAX;}
    15a6:	2327      	movs	r3, #39	; 0x27
    15a8:	2218      	movs	r2, #24
    15aa:	4694      	mov	ip, r2
    15ac:	44bc      	add	ip, r7
    15ae:	4463      	add	r3, ip
    15b0:	781b      	ldrb	r3, [r3, #0]
    15b2:	2be1      	cmp	r3, #225	; 0xe1
    15b4:	d906      	bls.n	15c4 <backlight_level+0x168>
    15b6:	2327      	movs	r3, #39	; 0x27
    15b8:	2218      	movs	r2, #24
    15ba:	4694      	mov	ip, r2
    15bc:	44bc      	add	ip, r7
    15be:	4463      	add	r3, ip
    15c0:	22e1      	movs	r2, #225	; 0xe1
    15c2:	701a      	strb	r2, [r3, #0]
	if (u8blue>LED_MAX){u8blue = LED_MAX;}
    15c4:	2327      	movs	r3, #39	; 0x27
    15c6:	2218      	movs	r2, #24
    15c8:	4694      	mov	ip, r2
    15ca:	44bc      	add	ip, r7
    15cc:	4463      	add	r3, ip
    15ce:	781b      	ldrb	r3, [r3, #0]
    15d0:	2be1      	cmp	r3, #225	; 0xe1
    15d2:	d906      	bls.n	15e2 <backlight_level+0x186>
    15d4:	2327      	movs	r3, #39	; 0x27
    15d6:	2218      	movs	r2, #24
    15d8:	4694      	mov	ip, r2
    15da:	44bc      	add	ip, r7
    15dc:	4463      	add	r3, ip
    15de:	22e1      	movs	r2, #225	; 0xe1
    15e0:	701a      	strb	r2, [r3, #0]
	
	uint16_t mes_len = 10;
    15e2:	2310      	movs	r3, #16
    15e4:	2218      	movs	r2, #24
    15e6:	4694      	mov	ip, r2
    15e8:	44bc      	add	ip, r7
    15ea:	4463      	add	r3, ip
    15ec:	220a      	movs	r2, #10
    15ee:	801a      	strh	r2, [r3, #0]
	uint8_t temp_buf[mes_len];
    15f0:	2310      	movs	r3, #16
    15f2:	2218      	movs	r2, #24
    15f4:	4694      	mov	ip, r2
    15f6:	44bc      	add	ip, r7
    15f8:	4463      	add	r3, ip
    15fa:	881b      	ldrh	r3, [r3, #0]
    15fc:	001a      	movs	r2, r3
    15fe:	3a01      	subs	r2, #1
    1600:	627a      	str	r2, [r7, #36]	; 0x24
    1602:	60bb      	str	r3, [r7, #8]
    1604:	2200      	movs	r2, #0
    1606:	60fa      	str	r2, [r7, #12]
    1608:	68b8      	ldr	r0, [r7, #8]
    160a:	68f9      	ldr	r1, [r7, #12]
    160c:	0002      	movs	r2, r0
    160e:	0f52      	lsrs	r2, r2, #29
    1610:	000c      	movs	r4, r1
    1612:	00e4      	lsls	r4, r4, #3
    1614:	617c      	str	r4, [r7, #20]
    1616:	697c      	ldr	r4, [r7, #20]
    1618:	4314      	orrs	r4, r2
    161a:	617c      	str	r4, [r7, #20]
    161c:	0002      	movs	r2, r0
    161e:	00d2      	lsls	r2, r2, #3
    1620:	613a      	str	r2, [r7, #16]
    1622:	603b      	str	r3, [r7, #0]
    1624:	2200      	movs	r2, #0
    1626:	607a      	str	r2, [r7, #4]
    1628:	6838      	ldr	r0, [r7, #0]
    162a:	6879      	ldr	r1, [r7, #4]
    162c:	0002      	movs	r2, r0
    162e:	0f52      	lsrs	r2, r2, #29
    1630:	000c      	movs	r4, r1
    1632:	00e6      	lsls	r6, r4, #3
    1634:	4316      	orrs	r6, r2
    1636:	0002      	movs	r2, r0
    1638:	00d5      	lsls	r5, r2, #3
    163a:	3307      	adds	r3, #7
    163c:	08db      	lsrs	r3, r3, #3
    163e:	00db      	lsls	r3, r3, #3
    1640:	466a      	mov	r2, sp
    1642:	1ad3      	subs	r3, r2, r3
    1644:	469d      	mov	sp, r3
    1646:	466b      	mov	r3, sp
    1648:	3300      	adds	r3, #0
    164a:	623b      	str	r3, [r7, #32]
	temp_buf[0]= 0x80;  //control register 0b10000000
    164c:	6a3b      	ldr	r3, [r7, #32]
    164e:	2280      	movs	r2, #128	; 0x80
    1650:	701a      	strb	r2, [r3, #0]
	temp_buf[1]= 0x80; //Mode1: 0b10000000
    1652:	6a3b      	ldr	r3, [r7, #32]
    1654:	2280      	movs	r2, #128	; 0x80
    1656:	705a      	strb	r2, [r3, #1]
	temp_buf[2]= 0x08; //Mode2: 0b00001000
    1658:	6a3b      	ldr	r3, [r7, #32]
    165a:	2208      	movs	r2, #8
    165c:	709a      	strb	r2, [r3, #2]
	temp_buf[3]= u8blue; //PWM0 - blue
    165e:	6a3b      	ldr	r3, [r7, #32]
    1660:	2227      	movs	r2, #39	; 0x27
    1662:	2118      	movs	r1, #24
    1664:	468c      	mov	ip, r1
    1666:	44bc      	add	ip, r7
    1668:	4462      	add	r2, ip
    166a:	7812      	ldrb	r2, [r2, #0]
    166c:	70da      	strb	r2, [r3, #3]
	temp_buf[4]= u8green; //PWM1 - green
    166e:	6a3b      	ldr	r3, [r7, #32]
    1670:	2213      	movs	r2, #19
    1672:	2118      	movs	r1, #24
    1674:	468c      	mov	ip, r1
    1676:	44bc      	add	ip, r7
    1678:	4462      	add	r2, ip
    167a:	7812      	ldrb	r2, [r2, #0]
    167c:	711a      	strb	r2, [r3, #4]
	temp_buf[5]= u8red; //PWM2 - red
    167e:	6a3b      	ldr	r3, [r7, #32]
    1680:	2226      	movs	r2, #38	; 0x26
    1682:	2118      	movs	r1, #24
    1684:	468c      	mov	ip, r1
    1686:	44bc      	add	ip, r7
    1688:	4462      	add	r2, ip
    168a:	7812      	ldrb	r2, [r2, #0]
    168c:	715a      	strb	r2, [r3, #5]
	temp_buf[6]= 0x00; //PWM3
    168e:	6a3b      	ldr	r3, [r7, #32]
    1690:	2200      	movs	r2, #0
    1692:	719a      	strb	r2, [r3, #6]
	temp_buf[7]= 0x00; //GRPPWM
    1694:	6a3b      	ldr	r3, [r7, #32]
    1696:	2200      	movs	r2, #0
    1698:	71da      	strb	r2, [r3, #7]
	temp_buf[8]= 0x00; //FRPFREQ
    169a:	6a3b      	ldr	r3, [r7, #32]
    169c:	2200      	movs	r2, #0
    169e:	721a      	strb	r2, [r3, #8]
	temp_buf[9]= 0x2A; //LEDOUT: 0b00101010
    16a0:	6a3b      	ldr	r3, [r7, #32]
    16a2:	222a      	movs	r2, #42	; 0x2a
    16a4:	725a      	strb	r2, [r3, #9]
	
	i2c_read_write(writep, led_add,temp_buf, mes_len);
    16a6:	6a3a      	ldr	r2, [r7, #32]
    16a8:	2310      	movs	r3, #16
    16aa:	2118      	movs	r1, #24
    16ac:	468c      	mov	ip, r1
    16ae:	44bc      	add	ip, r7
    16b0:	4463      	add	r3, ip
    16b2:	881b      	ldrh	r3, [r3, #0]
    16b4:	b2db      	uxtb	r3, r3
    16b6:	2162      	movs	r1, #98	; 0x62
    16b8:	2001      	movs	r0, #1
    16ba:	4c0c      	ldr	r4, [pc, #48]	; (16ec <backlight_level+0x290>)
    16bc:	47a0      	blx	r4
    16be:	69bb      	ldr	r3, [r7, #24]
    16c0:	469d      	mov	sp, r3
	

}
    16c2:	46c0      	nop			; (mov r8, r8)
    16c4:	46bd      	mov	sp, r7
    16c6:	b011      	add	sp, #68	; 0x44
    16c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    16ca:	46c0      	nop			; (mov r8, r8)
    16cc:	20000070 	.word	0x20000070
    16d0:	0001f1bd 	.word	0x0001f1bd
    16d4:	0001e461 	.word	0x0001e461
    16d8:	0001e785 	.word	0x0001e785
    16dc:	0001f11d 	.word	0x0001f11d
    16e0:	0001eb65 	.word	0x0001eb65
    16e4:	43610000 	.word	0x43610000
    16e8:	0001e3f5 	.word	0x0001e3f5
    16ec:	0000e41d 	.word	0x0000e41d

000016f0 <backlightOff>:


void backlightOff(void){
    16f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    16f2:	46c6      	mov	lr, r8
    16f4:	b500      	push	{lr}
    16f6:	b08a      	sub	sp, #40	; 0x28
    16f8:	af00      	add	r7, sp, #0
    16fa:	4668      	mov	r0, sp
    16fc:	6078      	str	r0, [r7, #4]
		
	uint16_t mes_len = 10;
    16fe:	200e      	movs	r0, #14
    1700:	2318      	movs	r3, #24
    1702:	469c      	mov	ip, r3
    1704:	44bc      	add	ip, r7
    1706:	4460      	add	r0, ip
    1708:	230a      	movs	r3, #10
    170a:	469c      	mov	ip, r3
    170c:	4663      	mov	r3, ip
    170e:	8003      	strh	r3, [r0, #0]
	uint8_t temp_buf[mes_len];
    1710:	230e      	movs	r3, #14
    1712:	2018      	movs	r0, #24
    1714:	1838      	adds	r0, r7, r0
    1716:	18c0      	adds	r0, r0, r3
    1718:	8800      	ldrh	r0, [r0, #0]
    171a:	4684      	mov	ip, r0
    171c:	2301      	movs	r3, #1
    171e:	425b      	negs	r3, r3
    1720:	4698      	mov	r8, r3
    1722:	44c4      	add	ip, r8
    1724:	4663      	mov	r3, ip
    1726:	623b      	str	r3, [r7, #32]
    1728:	6138      	str	r0, [r7, #16]
    172a:	2300      	movs	r3, #0
    172c:	617b      	str	r3, [r7, #20]
    172e:	693b      	ldr	r3, [r7, #16]
    1730:	0f5b      	lsrs	r3, r3, #29
    1732:	469c      	mov	ip, r3
    1734:	697b      	ldr	r3, [r7, #20]
    1736:	00da      	lsls	r2, r3, #3
    1738:	4663      	mov	r3, ip
    173a:	431a      	orrs	r2, r3
    173c:	693b      	ldr	r3, [r7, #16]
    173e:	00d9      	lsls	r1, r3, #3
    1740:	0005      	movs	r5, r0
    1742:	2200      	movs	r2, #0
    1744:	0016      	movs	r6, r2
    1746:	0f6a      	lsrs	r2, r5, #29
    1748:	00f3      	lsls	r3, r6, #3
    174a:	60fb      	str	r3, [r7, #12]
    174c:	68fb      	ldr	r3, [r7, #12]
    174e:	4313      	orrs	r3, r2
    1750:	60fb      	str	r3, [r7, #12]
    1752:	00eb      	lsls	r3, r5, #3
    1754:	60bb      	str	r3, [r7, #8]
    1756:	0003      	movs	r3, r0
    1758:	3307      	adds	r3, #7
    175a:	08db      	lsrs	r3, r3, #3
    175c:	00db      	lsls	r3, r3, #3
    175e:	466a      	mov	r2, sp
    1760:	1ad3      	subs	r3, r2, r3
    1762:	469d      	mov	sp, r3
    1764:	466b      	mov	r3, sp
    1766:	3300      	adds	r3, #0
    1768:	61fb      	str	r3, [r7, #28]
	temp_buf[0]= 0x80;  //control register 0b10000000
    176a:	69fb      	ldr	r3, [r7, #28]
    176c:	2280      	movs	r2, #128	; 0x80
    176e:	701a      	strb	r2, [r3, #0]
	temp_buf[1]= 0x80; //Mode1: 0b10000000
    1770:	69fb      	ldr	r3, [r7, #28]
    1772:	2280      	movs	r2, #128	; 0x80
    1774:	705a      	strb	r2, [r3, #1]
	temp_buf[2]= 0x08; //Mode2: 0b00001000
    1776:	69fb      	ldr	r3, [r7, #28]
    1778:	2208      	movs	r2, #8
    177a:	709a      	strb	r2, [r3, #2]
	temp_buf[3]= 0x00; //PWM0 - blue
    177c:	69fb      	ldr	r3, [r7, #28]
    177e:	2200      	movs	r2, #0
    1780:	70da      	strb	r2, [r3, #3]
	temp_buf[4]= 0x00; //PWM1 - green
    1782:	69fb      	ldr	r3, [r7, #28]
    1784:	2200      	movs	r2, #0
    1786:	711a      	strb	r2, [r3, #4]
	temp_buf[5]= 0x00; //PWM2 - red
    1788:	69fb      	ldr	r3, [r7, #28]
    178a:	2200      	movs	r2, #0
    178c:	715a      	strb	r2, [r3, #5]
	temp_buf[6]= 0x00; //PWM3
    178e:	69fb      	ldr	r3, [r7, #28]
    1790:	2200      	movs	r2, #0
    1792:	719a      	strb	r2, [r3, #6]
	temp_buf[7]= 0x00; //GRPPWM
    1794:	69fb      	ldr	r3, [r7, #28]
    1796:	2200      	movs	r2, #0
    1798:	71da      	strb	r2, [r3, #7]
	temp_buf[8]= 0x00; //FRPFREQ
    179a:	69fb      	ldr	r3, [r7, #28]
    179c:	2200      	movs	r2, #0
    179e:	721a      	strb	r2, [r3, #8]
	temp_buf[9]= 0x2A; //LEDOUT: 0b00101010
    17a0:	69fb      	ldr	r3, [r7, #28]
    17a2:	222a      	movs	r2, #42	; 0x2a
    17a4:	725a      	strb	r2, [r3, #9]
	
	i2c_read_write(writep, led_add,temp_buf, mes_len);
    17a6:	69fa      	ldr	r2, [r7, #28]
    17a8:	230e      	movs	r3, #14
    17aa:	2118      	movs	r1, #24
    17ac:	468c      	mov	ip, r1
    17ae:	44bc      	add	ip, r7
    17b0:	4463      	add	r3, ip
    17b2:	881b      	ldrh	r3, [r3, #0]
    17b4:	b2db      	uxtb	r3, r3
    17b6:	2162      	movs	r1, #98	; 0x62
    17b8:	2001      	movs	r0, #1
    17ba:	4c05      	ldr	r4, [pc, #20]	; (17d0 <backlightOff+0xe0>)
    17bc:	47a0      	blx	r4
    17be:	687b      	ldr	r3, [r7, #4]
    17c0:	469d      	mov	sp, r3
	
}
    17c2:	46c0      	nop			; (mov r8, r8)
    17c4:	46bd      	mov	sp, r7
    17c6:	b00a      	add	sp, #40	; 0x28
    17c8:	bc04      	pop	{r2}
    17ca:	4690      	mov	r8, r2
    17cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    17ce:	46c0      	nop			; (mov r8, r8)
    17d0:	0000e41d 	.word	0x0000e41d

000017d4 <setup_batt>:
extern uint32_t chargeCurrent;

//  Global Variables
extern struct OPTIONS options;

void setup_batt(void){
    17d4:	b580      	push	{r7, lr}
    17d6:	b082      	sub	sp, #8
    17d8:	af00      	add	r7, sp, #0
	uint16_t data1;
	
	//Read POR (powerup reset) status
	max17055_reg_read_write(readp, 0x00, &data1);
    17da:	1dbb      	adds	r3, r7, #6
    17dc:	001a      	movs	r2, r3
    17de:	2100      	movs	r1, #0
    17e0:	2000      	movs	r0, #0
    17e2:	4b13      	ldr	r3, [pc, #76]	; (1830 <setup_batt+0x5c>)
    17e4:	4798      	blx	r3
	data1=data1 & 0x0002;//bit two is POR
    17e6:	1dbb      	adds	r3, r7, #6
    17e8:	881b      	ldrh	r3, [r3, #0]
    17ea:	2202      	movs	r2, #2
    17ec:	4013      	ands	r3, r2
    17ee:	b29a      	uxth	r2, r3
    17f0:	1dbb      	adds	r3, r7, #6
    17f2:	801a      	strh	r2, [r3, #0]
	if (data1){
    17f4:	1dbb      	adds	r3, r7, #6
    17f6:	881b      	ldrh	r3, [r3, #0]
    17f8:	2b00      	cmp	r3, #0
    17fa:	d001      	beq.n	1800 <setup_batt+0x2c>
		config_batt();
    17fc:	4b0d      	ldr	r3, [pc, #52]	; (1834 <setup_batt+0x60>)
    17fe:	4798      	blx	r3
	}
	max17055_reg_read_write(readp, 0x00, &data1);
    1800:	1dbb      	adds	r3, r7, #6
    1802:	001a      	movs	r2, r3
    1804:	2100      	movs	r1, #0
    1806:	2000      	movs	r0, #0
    1808:	4b09      	ldr	r3, [pc, #36]	; (1830 <setup_batt+0x5c>)
    180a:	4798      	blx	r3
	data1=data1 & 0xFFFD;//clear POR bit
    180c:	1dbb      	adds	r3, r7, #6
    180e:	881b      	ldrh	r3, [r3, #0]
    1810:	2202      	movs	r2, #2
    1812:	4393      	bics	r3, r2
    1814:	b29a      	uxth	r2, r3
    1816:	1dbb      	adds	r3, r7, #6
    1818:	801a      	strh	r2, [r3, #0]
	max17055_reg_read_write(writep ,0x00, &data1);
    181a:	1dbb      	adds	r3, r7, #6
    181c:	001a      	movs	r2, r3
    181e:	2100      	movs	r1, #0
    1820:	2001      	movs	r0, #1
    1822:	4b03      	ldr	r3, [pc, #12]	; (1830 <setup_batt+0x5c>)
    1824:	4798      	blx	r3
	
}
    1826:	46c0      	nop			; (mov r8, r8)
    1828:	46bd      	mov	sp, r7
    182a:	b002      	add	sp, #8
    182c:	bd80      	pop	{r7, pc}
    182e:	46c0      	nop			; (mov r8, r8)
    1830:	0000e55d 	.word	0x0000e55d
    1834:	00001839 	.word	0x00001839

00001838 <config_batt>:

void config_batt(void){
    1838:	b580      	push	{r7, lr}
    183a:	b082      	sub	sp, #8
    183c:	af00      	add	r7, sp, #0
	uint16_t data1;
	max17055_reg_read_write(readp, 0x3D, &data1);//check DNR bit 0x3D bit 1
    183e:	1dbb      	adds	r3, r7, #6
    1840:	001a      	movs	r2, r3
    1842:	213d      	movs	r1, #61	; 0x3d
    1844:	2000      	movs	r0, #0
    1846:	4b4d      	ldr	r3, [pc, #308]	; (197c <config_batt+0x144>)
    1848:	4798      	blx	r3
	while(data1 & 0x0001){
    184a:	e008      	b.n	185e <config_batt+0x26>
		delay_ms(10);
    184c:	200a      	movs	r0, #10
    184e:	4b4c      	ldr	r3, [pc, #304]	; (1980 <config_batt+0x148>)
    1850:	4798      	blx	r3
		max17055_reg_read_write(readp, 0x3D, &data1);
    1852:	1dbb      	adds	r3, r7, #6
    1854:	001a      	movs	r2, r3
    1856:	213d      	movs	r1, #61	; 0x3d
    1858:	2000      	movs	r0, #0
    185a:	4b48      	ldr	r3, [pc, #288]	; (197c <config_batt+0x144>)
    185c:	4798      	blx	r3
	while(data1 & 0x0001){
    185e:	1dbb      	adds	r3, r7, #6
    1860:	881b      	ldrh	r3, [r3, #0]
    1862:	001a      	movs	r2, r3
    1864:	2301      	movs	r3, #1
    1866:	4013      	ands	r3, r2
    1868:	d1f0      	bne.n	184c <config_batt+0x14>
	}
	max17055_reg_read_write(writep, 0x18, &DesignCap);//Write design capacity register 0x18
    186a:	4b46      	ldr	r3, [pc, #280]	; (1984 <config_batt+0x14c>)
    186c:	001a      	movs	r2, r3
    186e:	2118      	movs	r1, #24
    1870:	2001      	movs	r0, #1
    1872:	4b42      	ldr	r3, [pc, #264]	; (197c <config_batt+0x144>)
    1874:	4798      	blx	r3
	data1=DesignCap/32;
    1876:	4b43      	ldr	r3, [pc, #268]	; (1984 <config_batt+0x14c>)
    1878:	881b      	ldrh	r3, [r3, #0]
    187a:	095b      	lsrs	r3, r3, #5
    187c:	b29a      	uxth	r2, r3
    187e:	1dbb      	adds	r3, r7, #6
    1880:	801a      	strh	r2, [r3, #0]
	max17055_reg_read_write(writep, 0x45, &data1);//write dQacc register 0x45
    1882:	1dbb      	adds	r3, r7, #6
    1884:	001a      	movs	r2, r3
    1886:	2145      	movs	r1, #69	; 0x45
    1888:	2001      	movs	r0, #1
    188a:	4b3c      	ldr	r3, [pc, #240]	; (197c <config_batt+0x144>)
    188c:	4798      	blx	r3
	max17055_reg_read_write(writep, 0x1E, &IchgTerm);//Write termination charge register 0x1E
    188e:	4b3e      	ldr	r3, [pc, #248]	; (1988 <config_batt+0x150>)
    1890:	001a      	movs	r2, r3
    1892:	211e      	movs	r1, #30
    1894:	2001      	movs	r0, #1
    1896:	4b39      	ldr	r3, [pc, #228]	; (197c <config_batt+0x144>)
    1898:	4798      	blx	r3
	max17055_reg_read_write(writep, 0x3A, &VEmpty);//Write empty voltage, register 0x3A
    189a:	4b3c      	ldr	r3, [pc, #240]	; (198c <config_batt+0x154>)
    189c:	001a      	movs	r2, r3
    189e:	213a      	movs	r1, #58	; 0x3a
    18a0:	2001      	movs	r0, #1
    18a2:	4b36      	ldr	r3, [pc, #216]	; (197c <config_batt+0x144>)
    18a4:	4798      	blx	r3
	max17055_reg_read_write(readp, 0xBA, &HibCFG);//Save hibernation configuration
    18a6:	4b3a      	ldr	r3, [pc, #232]	; (1990 <config_batt+0x158>)
    18a8:	001a      	movs	r2, r3
    18aa:	21ba      	movs	r1, #186	; 0xba
    18ac:	2000      	movs	r0, #0
    18ae:	4b33      	ldr	r3, [pc, #204]	; (197c <config_batt+0x144>)
    18b0:	4798      	blx	r3
	data1=0x90;
    18b2:	1dbb      	adds	r3, r7, #6
    18b4:	2290      	movs	r2, #144	; 0x90
    18b6:	801a      	strh	r2, [r3, #0]
	max17055_reg_read_write(writep, 0x60, &data1);//Exit hibernate mode step 1
    18b8:	1dbb      	adds	r3, r7, #6
    18ba:	001a      	movs	r2, r3
    18bc:	2160      	movs	r1, #96	; 0x60
    18be:	2001      	movs	r0, #1
    18c0:	4b2e      	ldr	r3, [pc, #184]	; (197c <config_batt+0x144>)
    18c2:	4798      	blx	r3
	data1=0x00;
    18c4:	1dbb      	adds	r3, r7, #6
    18c6:	2200      	movs	r2, #0
    18c8:	801a      	strh	r2, [r3, #0]
	max17055_reg_read_write(writep,0xBA, &data1);//exit hibernate mode step 2
    18ca:	1dbb      	adds	r3, r7, #6
    18cc:	001a      	movs	r2, r3
    18ce:	21ba      	movs	r1, #186	; 0xba
    18d0:	2001      	movs	r0, #1
    18d2:	4b2a      	ldr	r3, [pc, #168]	; (197c <config_batt+0x144>)
    18d4:	4798      	blx	r3
	data1=0x00;
    18d6:	1dbb      	adds	r3, r7, #6
    18d8:	2200      	movs	r2, #0
    18da:	801a      	strh	r2, [r3, #0]
	max17055_reg_read_write(writep, 0x60, &data1);//exit hibernate mode step 3
    18dc:	1dbb      	adds	r3, r7, #6
    18de:	001a      	movs	r2, r3
    18e0:	2160      	movs	r1, #96	; 0x60
    18e2:	2001      	movs	r0, #1
    18e4:	4b25      	ldr	r3, [pc, #148]	; (197c <config_batt+0x144>)
    18e6:	4798      	blx	r3
	data1=DesignCap/32;
    18e8:	4b26      	ldr	r3, [pc, #152]	; (1984 <config_batt+0x14c>)
    18ea:	881b      	ldrh	r3, [r3, #0]
    18ec:	095b      	lsrs	r3, r3, #5
    18ee:	b29a      	uxth	r2, r3
    18f0:	1dbb      	adds	r3, r7, #6
    18f2:	801a      	strh	r2, [r3, #0]
	data1=data1*44138;
    18f4:	1dbb      	adds	r3, r7, #6
    18f6:	881b      	ldrh	r3, [r3, #0]
    18f8:	4a26      	ldr	r2, [pc, #152]	; (1994 <config_batt+0x15c>)
    18fa:	4353      	muls	r3, r2
    18fc:	b29a      	uxth	r2, r3
    18fe:	1dbb      	adds	r3, r7, #6
    1900:	801a      	strh	r2, [r3, #0]
	data1=data1/DesignCap;
    1902:	1dbb      	adds	r3, r7, #6
    1904:	881a      	ldrh	r2, [r3, #0]
    1906:	4b1f      	ldr	r3, [pc, #124]	; (1984 <config_batt+0x14c>)
    1908:	8819      	ldrh	r1, [r3, #0]
    190a:	4b23      	ldr	r3, [pc, #140]	; (1998 <config_batt+0x160>)
    190c:	0010      	movs	r0, r2
    190e:	4798      	blx	r3
    1910:	0003      	movs	r3, r0
    1912:	b29a      	uxth	r2, r3
    1914:	1dbb      	adds	r3, r7, #6
    1916:	801a      	strh	r2, [r3, #0]
	max17055_reg_read_write(writep, 0x46, &data1);//write dPAcc register 0x46
    1918:	1dbb      	adds	r3, r7, #6
    191a:	001a      	movs	r2, r3
    191c:	2146      	movs	r1, #70	; 0x46
    191e:	2001      	movs	r0, #1
    1920:	4b16      	ldr	r3, [pc, #88]	; (197c <config_batt+0x144>)
    1922:	4798      	blx	r3
	data1=0x8000;//model 0
    1924:	1dbb      	adds	r3, r7, #6
    1926:	4a1d      	ldr	r2, [pc, #116]	; (199c <config_batt+0x164>)
    1928:	801a      	strh	r2, [r3, #0]
	max17055_reg_read_write(writep, 0xD8, &data1);//write model configuration at register D8
    192a:	1dbb      	adds	r3, r7, #6
    192c:	001a      	movs	r2, r3
    192e:	21d8      	movs	r1, #216	; 0xd8
    1930:	2001      	movs	r0, #1
    1932:	4b12      	ldr	r3, [pc, #72]	; (197c <config_batt+0x144>)
    1934:	4798      	blx	r3
	//wait for model to refresh
	data1=0x0000;
    1936:	1dbb      	adds	r3, r7, #6
    1938:	2200      	movs	r2, #0
    193a:	801a      	strh	r2, [r3, #0]
	while(!data1){
    193c:	e00f      	b.n	195e <config_batt+0x126>
		delay_ms(10);
    193e:	200a      	movs	r0, #10
    1940:	4b0f      	ldr	r3, [pc, #60]	; (1980 <config_batt+0x148>)
    1942:	4798      	blx	r3
		max17055_reg_read_write(readp,0xD8,&data1);
    1944:	1dbb      	adds	r3, r7, #6
    1946:	001a      	movs	r2, r3
    1948:	21d8      	movs	r1, #216	; 0xd8
    194a:	2000      	movs	r0, #0
    194c:	4b0b      	ldr	r3, [pc, #44]	; (197c <config_batt+0x144>)
    194e:	4798      	blx	r3
		data1=data1 & 0x8000;
    1950:	1dbb      	adds	r3, r7, #6
    1952:	881b      	ldrh	r3, [r3, #0]
    1954:	0bdb      	lsrs	r3, r3, #15
    1956:	03db      	lsls	r3, r3, #15
    1958:	b29a      	uxth	r2, r3
    195a:	1dbb      	adds	r3, r7, #6
    195c:	801a      	strh	r2, [r3, #0]
	while(!data1){
    195e:	1dbb      	adds	r3, r7, #6
    1960:	881b      	ldrh	r3, [r3, #0]
    1962:	2b00      	cmp	r3, #0
    1964:	d0eb      	beq.n	193e <config_batt+0x106>
	}
	max17055_reg_read_write(writep, 0xBA, &HibCFG);//restore hiberation configuration at register 0xBA
    1966:	4b0a      	ldr	r3, [pc, #40]	; (1990 <config_batt+0x158>)
    1968:	001a      	movs	r2, r3
    196a:	21ba      	movs	r1, #186	; 0xba
    196c:	2001      	movs	r0, #1
    196e:	4b03      	ldr	r3, [pc, #12]	; (197c <config_batt+0x144>)
    1970:	4798      	blx	r3
}
    1972:	46c0      	nop			; (mov r8, r8)
    1974:	46bd      	mov	sp, r7
    1976:	b002      	add	sp, #8
    1978:	bd80      	pop	{r7, pc}
    197a:	46c0      	nop			; (mov r8, r8)
    197c:	0000e55d 	.word	0x0000e55d
    1980:	00015545 	.word	0x00015545
    1984:	2000008c 	.word	0x2000008c
    1988:	2000008e 	.word	0x2000008e
    198c:	20000090 	.word	0x20000090
    1990:	200011cc 	.word	0x200011cc
    1994:	ffffac6a 	.word	0xffffac6a
    1998:	0001df49 	.word	0x0001df49
    199c:	ffff8000 	.word	0xffff8000

000019a0 <getBatteryLevel>:

uint16_t getBatteryLevel(void){
    19a0:	b590      	push	{r4, r7, lr}
    19a2:	b083      	sub	sp, #12
    19a4:	af00      	add	r7, sp, #0
	//  Reads back battery state of charge in %, 0-100
	uint16_t batt_SOC;
	max17055_reg_read_write(readp, 0x06, &batt_SOC);
    19a6:	1dbb      	adds	r3, r7, #6
    19a8:	001a      	movs	r2, r3
    19aa:	2106      	movs	r1, #6
    19ac:	2000      	movs	r0, #0
    19ae:	4b15      	ldr	r3, [pc, #84]	; (1a04 <getBatteryLevel+0x64>)
    19b0:	4798      	blx	r3
	batt_SOC=batt_SOC>>8;
    19b2:	1dbb      	adds	r3, r7, #6
    19b4:	881b      	ldrh	r3, [r3, #0]
    19b6:	0a1b      	lsrs	r3, r3, #8
    19b8:	b29a      	uxth	r2, r3
    19ba:	1dbb      	adds	r3, r7, #6
    19bc:	801a      	strh	r2, [r3, #0]
	//  Add margin to show topped-off battery
	batt_SOC = batt_SOC*1.03;  
    19be:	1dbb      	adds	r3, r7, #6
    19c0:	881b      	ldrh	r3, [r3, #0]
    19c2:	001a      	movs	r2, r3
    19c4:	4b10      	ldr	r3, [pc, #64]	; (1a08 <getBatteryLevel+0x68>)
    19c6:	0010      	movs	r0, r2
    19c8:	4798      	blx	r3
    19ca:	4c10      	ldr	r4, [pc, #64]	; (1a0c <getBatteryLevel+0x6c>)
    19cc:	4a10      	ldr	r2, [pc, #64]	; (1a10 <getBatteryLevel+0x70>)
    19ce:	4b11      	ldr	r3, [pc, #68]	; (1a14 <getBatteryLevel+0x74>)
    19d0:	47a0      	blx	r4
    19d2:	0003      	movs	r3, r0
    19d4:	000c      	movs	r4, r1
    19d6:	0019      	movs	r1, r3
    19d8:	0022      	movs	r2, r4
    19da:	4b0f      	ldr	r3, [pc, #60]	; (1a18 <getBatteryLevel+0x78>)
    19dc:	0008      	movs	r0, r1
    19de:	0011      	movs	r1, r2
    19e0:	4798      	blx	r3
    19e2:	0003      	movs	r3, r0
    19e4:	b29a      	uxth	r2, r3
    19e6:	1dbb      	adds	r3, r7, #6
    19e8:	801a      	strh	r2, [r3, #0]
	if (batt_SOC>100){
    19ea:	1dbb      	adds	r3, r7, #6
    19ec:	881b      	ldrh	r3, [r3, #0]
    19ee:	2b64      	cmp	r3, #100	; 0x64
    19f0:	d902      	bls.n	19f8 <getBatteryLevel+0x58>
		batt_SOC = 100;
    19f2:	1dbb      	adds	r3, r7, #6
    19f4:	2264      	movs	r2, #100	; 0x64
    19f6:	801a      	strh	r2, [r3, #0]
	}
	
	return batt_SOC;
    19f8:	1dbb      	adds	r3, r7, #6
    19fa:	881b      	ldrh	r3, [r3, #0]
}
    19fc:	0018      	movs	r0, r3
    19fe:	46bd      	mov	sp, r7
    1a00:	b003      	add	sp, #12
    1a02:	bd90      	pop	{r4, r7, pc}
    1a04:	0000e55d 	.word	0x0000e55d
    1a08:	00020ca5 	.word	0x00020ca5
    1a0c:	000200d1 	.word	0x000200d1
    1a10:	47ae147b 	.word	0x47ae147b
    1a14:	3ff07ae1 	.word	0x3ff07ae1
    1a18:	0001e425 	.word	0x0001e425

00001a1c <setup_charger>:


void setup_charger(void){
    1a1c:	b580      	push	{r7, lr}
    1a1e:	b082      	sub	sp, #8
    1a20:	af00      	add	r7, sp, #0
	// ILIM is lower 3 bits of addr 0x02
	uint8_t data;
	if (options.chargeCurrent==500){
    1a22:	4b0b      	ldr	r3, [pc, #44]	; (1a50 <setup_charger+0x34>)
    1a24:	685a      	ldr	r2, [r3, #4]
    1a26:	23fa      	movs	r3, #250	; 0xfa
    1a28:	005b      	lsls	r3, r3, #1
    1a2a:	429a      	cmp	r2, r3
    1a2c:	d103      	bne.n	1a36 <setup_charger+0x1a>
		data = 0x06;
    1a2e:	1dfb      	adds	r3, r7, #7
    1a30:	2206      	movs	r2, #6
    1a32:	701a      	strb	r2, [r3, #0]
    1a34:	e002      	b.n	1a3c <setup_charger+0x20>
		}else{
		data = 0x00;
    1a36:	1dfb      	adds	r3, r7, #7
    1a38:	2200      	movs	r2, #0
    1a3a:	701a      	strb	r2, [r3, #0]
	}
	adp5062_reg_read_write(writep, 0x02, &data);
    1a3c:	1dfb      	adds	r3, r7, #7
    1a3e:	001a      	movs	r2, r3
    1a40:	2102      	movs	r1, #2
    1a42:	2001      	movs	r0, #1
    1a44:	4b03      	ldr	r3, [pc, #12]	; (1a54 <setup_charger+0x38>)
    1a46:	4798      	blx	r3
	
	
	
}
    1a48:	46c0      	nop			; (mov r8, r8)
    1a4a:	46bd      	mov	sp, r7
    1a4c:	b002      	add	sp, #8
    1a4e:	bd80      	pop	{r7, pc}
    1a50:	20002eec 	.word	0x20002eec
    1a54:	0000e61d 	.word	0x0000e61d

00001a58 <getChargerStatus>:

uint8_t getChargerStatus(void){
    1a58:	b590      	push	{r4, r7, lr}
    1a5a:	b083      	sub	sp, #12
    1a5c:	af00      	add	r7, sp, #0
	uint8_t status;
	// Read Charge Status 1 (add 0x0B)
	status = getChargerRegister(0x0B);
    1a5e:	1dfc      	adds	r4, r7, #7
    1a60:	200b      	movs	r0, #11
    1a62:	4b08      	ldr	r3, [pc, #32]	; (1a84 <getChargerStatus+0x2c>)
    1a64:	4798      	blx	r3
    1a66:	0003      	movs	r3, r0
    1a68:	7023      	strb	r3, [r4, #0]
	
	status = status & 0x07;
    1a6a:	1dfb      	adds	r3, r7, #7
    1a6c:	1dfa      	adds	r2, r7, #7
    1a6e:	7812      	ldrb	r2, [r2, #0]
    1a70:	2107      	movs	r1, #7
    1a72:	400a      	ands	r2, r1
    1a74:	701a      	strb	r2, [r3, #0]
	
	return status;
    1a76:	1dfb      	adds	r3, r7, #7
    1a78:	781b      	ldrb	r3, [r3, #0]
}
    1a7a:	0018      	movs	r0, r3
    1a7c:	46bd      	mov	sp, r7
    1a7e:	b003      	add	sp, #12
    1a80:	bd90      	pop	{r4, r7, pc}
    1a82:	46c0      	nop			; (mov r8, r8)
    1a84:	00001a89 	.word	0x00001a89

00001a88 <getChargerRegister>:


uint8_t getChargerRegister(uint8_t address){
    1a88:	b580      	push	{r7, lr}
    1a8a:	b084      	sub	sp, #16
    1a8c:	af00      	add	r7, sp, #0
    1a8e:	0002      	movs	r2, r0
    1a90:	1dfb      	adds	r3, r7, #7
    1a92:	701a      	strb	r2, [r3, #0]
	//  Read data from address on Charger
	uint8_t registerData;
	
	adp5062_reg_read_write(readp, address, &registerData); 
    1a94:	230f      	movs	r3, #15
    1a96:	18fa      	adds	r2, r7, r3
    1a98:	1dfb      	adds	r3, r7, #7
    1a9a:	781b      	ldrb	r3, [r3, #0]
    1a9c:	0019      	movs	r1, r3
    1a9e:	2000      	movs	r0, #0
    1aa0:	4b04      	ldr	r3, [pc, #16]	; (1ab4 <getChargerRegister+0x2c>)
    1aa2:	4798      	blx	r3
	
	return registerData;
    1aa4:	230f      	movs	r3, #15
    1aa6:	18fb      	adds	r3, r7, r3
    1aa8:	781b      	ldrb	r3, [r3, #0]
}
    1aaa:	0018      	movs	r0, r3
    1aac:	46bd      	mov	sp, r7
    1aae:	b004      	add	sp, #16
    1ab0:	bd80      	pop	{r7, pc}
    1ab2:	46c0      	nop			; (mov r8, r8)
    1ab4:	0000e61d 	.word	0x0000e61d

00001ab8 <bin2str>:



void  bin2str(uint8_t data, char *strPtr){
    1ab8:	b580      	push	{r7, lr}
    1aba:	b084      	sub	sp, #16
    1abc:	af00      	add	r7, sp, #0
    1abe:	0002      	movs	r2, r0
    1ac0:	6039      	str	r1, [r7, #0]
    1ac2:	1dfb      	adds	r3, r7, #7
    1ac4:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	uint8_t shifter = 128;
    1ac6:	230e      	movs	r3, #14
    1ac8:	18fb      	adds	r3, r7, r3
    1aca:	2280      	movs	r2, #128	; 0x80
    1acc:	701a      	strb	r2, [r3, #0]
	
	for (i=0;i<8;i++){
    1ace:	230f      	movs	r3, #15
    1ad0:	18fb      	adds	r3, r7, r3
    1ad2:	2200      	movs	r2, #0
    1ad4:	701a      	strb	r2, [r3, #0]
    1ad6:	e025      	b.n	1b24 <bin2str+0x6c>
		if (data&shifter){
    1ad8:	1dfb      	adds	r3, r7, #7
    1ada:	220e      	movs	r2, #14
    1adc:	18ba      	adds	r2, r7, r2
    1ade:	781b      	ldrb	r3, [r3, #0]
    1ae0:	7812      	ldrb	r2, [r2, #0]
    1ae2:	4013      	ands	r3, r2
    1ae4:	b2db      	uxtb	r3, r3
    1ae6:	2b00      	cmp	r3, #0
    1ae8:	d007      	beq.n	1afa <bin2str+0x42>
			strPtr[i] = '1';
    1aea:	230f      	movs	r3, #15
    1aec:	18fb      	adds	r3, r7, r3
    1aee:	781b      	ldrb	r3, [r3, #0]
    1af0:	683a      	ldr	r2, [r7, #0]
    1af2:	18d3      	adds	r3, r2, r3
    1af4:	2231      	movs	r2, #49	; 0x31
    1af6:	701a      	strb	r2, [r3, #0]
    1af8:	e006      	b.n	1b08 <bin2str+0x50>
		}else{
			strPtr[i] = '0';
    1afa:	230f      	movs	r3, #15
    1afc:	18fb      	adds	r3, r7, r3
    1afe:	781b      	ldrb	r3, [r3, #0]
    1b00:	683a      	ldr	r2, [r7, #0]
    1b02:	18d3      	adds	r3, r2, r3
    1b04:	2230      	movs	r2, #48	; 0x30
    1b06:	701a      	strb	r2, [r3, #0]
		}
		shifter = shifter>>1;
    1b08:	230e      	movs	r3, #14
    1b0a:	18fb      	adds	r3, r7, r3
    1b0c:	220e      	movs	r2, #14
    1b0e:	18ba      	adds	r2, r7, r2
    1b10:	7812      	ldrb	r2, [r2, #0]
    1b12:	0852      	lsrs	r2, r2, #1
    1b14:	701a      	strb	r2, [r3, #0]
	for (i=0;i<8;i++){
    1b16:	230f      	movs	r3, #15
    1b18:	18fb      	adds	r3, r7, r3
    1b1a:	781a      	ldrb	r2, [r3, #0]
    1b1c:	230f      	movs	r3, #15
    1b1e:	18fb      	adds	r3, r7, r3
    1b20:	3201      	adds	r2, #1
    1b22:	701a      	strb	r2, [r3, #0]
    1b24:	230f      	movs	r3, #15
    1b26:	18fb      	adds	r3, r7, r3
    1b28:	781b      	ldrb	r3, [r3, #0]
    1b2a:	2b07      	cmp	r3, #7
    1b2c:	d9d4      	bls.n	1ad8 <bin2str+0x20>
	}
	strPtr[8] = '\0';
    1b2e:	683b      	ldr	r3, [r7, #0]
    1b30:	3308      	adds	r3, #8
    1b32:	2200      	movs	r2, #0
    1b34:	701a      	strb	r2, [r3, #0]
	
}
    1b36:	46c0      	nop			; (mov r8, r8)
    1b38:	46bd      	mov	sp, r7
    1b3a:	b004      	add	sp, #16
    1b3c:	bd80      	pop	{r7, pc}
	...

00001b40 <load_user_settings>:
extern struct BACKLIGHT_SETTING backlight_setting;




void load_user_settings(void){
    1b40:	b580      	push	{r7, lr}
    1b42:	b086      	sub	sp, #24
    1b44:	af00      	add	r7, sp, #0
	
	//  Load example options structure to find initialized key
	struct OPTIONS tempOptions;
	getDefaultOptions(&tempOptions);
    1b46:	1d3b      	adds	r3, r7, #4
    1b48:	0018      	movs	r0, r3
    1b4a:	4b0c      	ldr	r3, [pc, #48]	; (1b7c <load_user_settings+0x3c>)
    1b4c:	4798      	blx	r3
	
	//  Read options structure from EEPROM
	EEPROM_read(add_options, &options, sizeof(options));
    1b4e:	490c      	ldr	r1, [pc, #48]	; (1b80 <load_user_settings+0x40>)
    1b50:	2381      	movs	r3, #129	; 0x81
    1b52:	005b      	lsls	r3, r3, #1
    1b54:	2214      	movs	r2, #20
    1b56:	0018      	movs	r0, r3
    1b58:	4b0a      	ldr	r3, [pc, #40]	; (1b84 <load_user_settings+0x44>)
    1b5a:	4798      	blx	r3
	
	if (options.Settings_Initialized_Key != tempOptions.Settings_Initialized_Key){
    1b5c:	4b08      	ldr	r3, [pc, #32]	; (1b80 <load_user_settings+0x40>)
    1b5e:	7cda      	ldrb	r2, [r3, #19]
    1b60:	1d3b      	adds	r3, r7, #4
    1b62:	7cdb      	ldrb	r3, [r3, #19]
    1b64:	429a      	cmp	r2, r3
    1b66:	d005      	beq.n	1b74 <load_user_settings+0x34>
		// Settings in EEPROM not initialized or are out of date
		//  Reload default settings into 
		getDefaultOptions(&options);
    1b68:	4b05      	ldr	r3, [pc, #20]	; (1b80 <load_user_settings+0x40>)
    1b6a:	0018      	movs	r0, r3
    1b6c:	4b03      	ldr	r3, [pc, #12]	; (1b7c <load_user_settings+0x3c>)
    1b6e:	4798      	blx	r3
		//  Save into EEPROM
		save_user_settings();
    1b70:	4b05      	ldr	r3, [pc, #20]	; (1b88 <load_user_settings+0x48>)
    1b72:	4798      	blx	r3
	}
	
	
}
    1b74:	46c0      	nop			; (mov r8, r8)
    1b76:	46bd      	mov	sp, r7
    1b78:	b006      	add	sp, #24
    1b7a:	bd80      	pop	{r7, pc}
    1b7c:	0001b4a5 	.word	0x0001b4a5
    1b80:	20002eec 	.word	0x20002eec
    1b84:	00001d31 	.word	0x00001d31
    1b88:	00001b8d 	.word	0x00001b8d

00001b8c <save_user_settings>:

void save_user_settings(void){
    1b8c:	b580      	push	{r7, lr}
    1b8e:	af00      	add	r7, sp, #0

	// Save User Options
	EEPROM_write(add_options, &options, sizeof(options));
    1b90:	4904      	ldr	r1, [pc, #16]	; (1ba4 <save_user_settings+0x18>)
    1b92:	2381      	movs	r3, #129	; 0x81
    1b94:	005b      	lsls	r3, r3, #1
    1b96:	2214      	movs	r2, #20
    1b98:	0018      	movs	r0, r3
    1b9a:	4b03      	ldr	r3, [pc, #12]	; (1ba8 <save_user_settings+0x1c>)
    1b9c:	4798      	blx	r3
	
}
    1b9e:	46c0      	nop			; (mov r8, r8)
    1ba0:	46bd      	mov	sp, r7
    1ba2:	bd80      	pop	{r7, pc}
    1ba4:	20002eec 	.word	0x20002eec
    1ba8:	00001e39 	.word	0x00001e39

00001bac <load_calibration>:


void load_calibration(void){
    1bac:	b580      	push	{r7, lr}
    1bae:	b098      	sub	sp, #96	; 0x60
    1bb0:	af00      	add	r7, sp, #0
	
	//  Create example calibration structure to find initialization key
	struct INST_CAL tempCal;	
	cal_init_struct(&tempCal);
    1bb2:	003b      	movs	r3, r7
    1bb4:	0018      	movs	r0, r3
    1bb6:	4b29      	ldr	r3, [pc, #164]	; (1c5c <load_calibration+0xb0>)
    1bb8:	4798      	blx	r3
	//  Read All  calibration structure back	
	EEPROM_read(add_a1_calst, &a1_calst, sizeof(a1_calst)); 
    1bba:	4929      	ldr	r1, [pc, #164]	; (1c60 <load_calibration+0xb4>)
    1bbc:	23c0      	movs	r3, #192	; 0xc0
    1bbe:	009b      	lsls	r3, r3, #2
    1bc0:	2260      	movs	r2, #96	; 0x60
    1bc2:	0018      	movs	r0, r3
    1bc4:	4b27      	ldr	r3, [pc, #156]	; (1c64 <load_calibration+0xb8>)
    1bc6:	4798      	blx	r3
	EEPROM_read(add_a2_calst, &a2_calst, sizeof(a1_calst));
    1bc8:	4927      	ldr	r1, [pc, #156]	; (1c68 <load_calibration+0xbc>)
    1bca:	2380      	movs	r3, #128	; 0x80
    1bcc:	00db      	lsls	r3, r3, #3
    1bce:	2260      	movs	r2, #96	; 0x60
    1bd0:	0018      	movs	r0, r3
    1bd2:	4b24      	ldr	r3, [pc, #144]	; (1c64 <load_calibration+0xb8>)
    1bd4:	4798      	blx	r3
	EEPROM_read(add_c1_calst, &c1_calst, sizeof(a1_calst));
    1bd6:	4925      	ldr	r1, [pc, #148]	; (1c6c <load_calibration+0xc0>)
    1bd8:	23a0      	movs	r3, #160	; 0xa0
    1bda:	00db      	lsls	r3, r3, #3
    1bdc:	2260      	movs	r2, #96	; 0x60
    1bde:	0018      	movs	r0, r3
    1be0:	4b20      	ldr	r3, [pc, #128]	; (1c64 <load_calibration+0xb8>)
    1be2:	4798      	blx	r3
	EEPROM_read(add_c2_calst, &c2_calst, sizeof(a1_calst));
    1be4:	4922      	ldr	r1, [pc, #136]	; (1c70 <load_calibration+0xc4>)
    1be6:	23c0      	movs	r3, #192	; 0xc0
    1be8:	00db      	lsls	r3, r3, #3
    1bea:	2260      	movs	r2, #96	; 0x60
    1bec:	0018      	movs	r0, r3
    1bee:	4b1d      	ldr	r3, [pc, #116]	; (1c64 <load_calibration+0xb8>)
    1bf0:	4798      	blx	r3
	EEPROM_read(add_dist_calst, &dist_calst, sizeof(a1_calst));
    1bf2:	4920      	ldr	r1, [pc, #128]	; (1c74 <load_calibration+0xc8>)
    1bf4:	23e0      	movs	r3, #224	; 0xe0
    1bf6:	00db      	lsls	r3, r3, #3
    1bf8:	2260      	movs	r2, #96	; 0x60
    1bfa:	0018      	movs	r0, r3
    1bfc:	4b19      	ldr	r3, [pc, #100]	; (1c64 <load_calibration+0xb8>)
    1bfe:	4798      	blx	r3
	EEPROM_read(add_cal_report_azm_inc, &cal_report_azm_inc, sizeof(cal_report_azm_inc));
    1c00:	491d      	ldr	r1, [pc, #116]	; (1c78 <load_calibration+0xcc>)
    1c02:	2380      	movs	r3, #128	; 0x80
    1c04:	011b      	lsls	r3, r3, #4
    1c06:	2254      	movs	r2, #84	; 0x54
    1c08:	0018      	movs	r0, r3
    1c0a:	4b16      	ldr	r3, [pc, #88]	; (1c64 <load_calibration+0xb8>)
    1c0c:	4798      	blx	r3
	EEPROM_read(add_cal_report_dist, &cal_report_dist, sizeof(cal_report_azm_inc));
    1c0e:	491b      	ldr	r1, [pc, #108]	; (1c7c <load_calibration+0xd0>)
    1c10:	2390      	movs	r3, #144	; 0x90
    1c12:	011b      	lsls	r3, r3, #4
    1c14:	2254      	movs	r2, #84	; 0x54
    1c16:	0018      	movs	r0, r3
    1c18:	4b12      	ldr	r3, [pc, #72]	; (1c64 <load_calibration+0xb8>)
    1c1a:	4798      	blx	r3
	
	// assume first struct is representative of remainder
	if(tempCal.Cal_Initialized_Key != a1_calst.Cal_Initialized_Key){
    1c1c:	003b      	movs	r3, r7
    1c1e:	781a      	ldrb	r2, [r3, #0]
    1c20:	4b0f      	ldr	r3, [pc, #60]	; (1c60 <load_calibration+0xb4>)
    1c22:	781b      	ldrb	r3, [r3, #0]
    1c24:	429a      	cmp	r2, r3
    1c26:	d015      	beq.n	1c54 <load_calibration+0xa8>
		//  EEPROM data has not been initialized or is out of date
		cal_init_struct(&a1_calst);
    1c28:	4b0d      	ldr	r3, [pc, #52]	; (1c60 <load_calibration+0xb4>)
    1c2a:	0018      	movs	r0, r3
    1c2c:	4b0b      	ldr	r3, [pc, #44]	; (1c5c <load_calibration+0xb0>)
    1c2e:	4798      	blx	r3
		cal_init_struct(&a2_calst);
    1c30:	4b0d      	ldr	r3, [pc, #52]	; (1c68 <load_calibration+0xbc>)
    1c32:	0018      	movs	r0, r3
    1c34:	4b09      	ldr	r3, [pc, #36]	; (1c5c <load_calibration+0xb0>)
    1c36:	4798      	blx	r3
		cal_init_struct(&c1_calst);
    1c38:	4b0c      	ldr	r3, [pc, #48]	; (1c6c <load_calibration+0xc0>)
    1c3a:	0018      	movs	r0, r3
    1c3c:	4b07      	ldr	r3, [pc, #28]	; (1c5c <load_calibration+0xb0>)
    1c3e:	4798      	blx	r3
		cal_init_struct(&c2_calst);
    1c40:	4b0b      	ldr	r3, [pc, #44]	; (1c70 <load_calibration+0xc4>)
    1c42:	0018      	movs	r0, r3
    1c44:	4b05      	ldr	r3, [pc, #20]	; (1c5c <load_calibration+0xb0>)
    1c46:	4798      	blx	r3
		cal_init_struct(&dist_calst);
    1c48:	4b0a      	ldr	r3, [pc, #40]	; (1c74 <load_calibration+0xc8>)
    1c4a:	0018      	movs	r0, r3
    1c4c:	4b03      	ldr	r3, [pc, #12]	; (1c5c <load_calibration+0xb0>)
    1c4e:	4798      	blx	r3
		save_calibration();		
    1c50:	4b0b      	ldr	r3, [pc, #44]	; (1c80 <load_calibration+0xd4>)
    1c52:	4798      	blx	r3
	}
		
	
	
}
    1c54:	46c0      	nop			; (mov r8, r8)
    1c56:	46bd      	mov	sp, r7
    1c58:	b018      	add	sp, #96	; 0x60
    1c5a:	bd80      	pop	{r7, pc}
    1c5c:	0000c119 	.word	0x0000c119
    1c60:	2000497c 	.word	0x2000497c
    1c64:	00001d31 	.word	0x00001d31
    1c68:	20004558 	.word	0x20004558
    1c6c:	20002e78 	.word	0x20002e78
    1c70:	20001df0 	.word	0x20001df0
    1c74:	200042cc 	.word	0x200042cc
    1c78:	2000188c 	.word	0x2000188c
    1c7c:	20002f20 	.word	0x20002f20
    1c80:	00001c85 	.word	0x00001c85

00001c84 <save_calibration>:

void save_calibration(void){
    1c84:	b580      	push	{r7, lr}
    1c86:	b082      	sub	sp, #8
    1c88:	af00      	add	r7, sp, #0

	uint8_t bytes_calst, bytes_report;
	
	bytes_report = sizeof(cal_report_azm_inc);
    1c8a:	1dfb      	adds	r3, r7, #7
    1c8c:	2254      	movs	r2, #84	; 0x54
    1c8e:	701a      	strb	r2, [r3, #0]
	bytes_calst = sizeof(a1_calst);
    1c90:	1dbb      	adds	r3, r7, #6
    1c92:	2260      	movs	r2, #96	; 0x60
    1c94:	701a      	strb	r2, [r3, #0]
	
	// Save calibration structures
	EEPROM_write(add_a1_calst, &a1_calst, bytes_calst);
    1c96:	1dbb      	adds	r3, r7, #6
    1c98:	781a      	ldrb	r2, [r3, #0]
    1c9a:	491d      	ldr	r1, [pc, #116]	; (1d10 <save_calibration+0x8c>)
    1c9c:	23c0      	movs	r3, #192	; 0xc0
    1c9e:	009b      	lsls	r3, r3, #2
    1ca0:	0018      	movs	r0, r3
    1ca2:	4b1c      	ldr	r3, [pc, #112]	; (1d14 <save_calibration+0x90>)
    1ca4:	4798      	blx	r3
	EEPROM_write(add_a2_calst, &a2_calst, bytes_calst);
    1ca6:	1dbb      	adds	r3, r7, #6
    1ca8:	781a      	ldrb	r2, [r3, #0]
    1caa:	491b      	ldr	r1, [pc, #108]	; (1d18 <save_calibration+0x94>)
    1cac:	2380      	movs	r3, #128	; 0x80
    1cae:	00db      	lsls	r3, r3, #3
    1cb0:	0018      	movs	r0, r3
    1cb2:	4b18      	ldr	r3, [pc, #96]	; (1d14 <save_calibration+0x90>)
    1cb4:	4798      	blx	r3
	EEPROM_write(add_c1_calst, &c1_calst, bytes_calst);
    1cb6:	1dbb      	adds	r3, r7, #6
    1cb8:	781a      	ldrb	r2, [r3, #0]
    1cba:	4918      	ldr	r1, [pc, #96]	; (1d1c <save_calibration+0x98>)
    1cbc:	23a0      	movs	r3, #160	; 0xa0
    1cbe:	00db      	lsls	r3, r3, #3
    1cc0:	0018      	movs	r0, r3
    1cc2:	4b14      	ldr	r3, [pc, #80]	; (1d14 <save_calibration+0x90>)
    1cc4:	4798      	blx	r3
	EEPROM_write(add_c2_calst, &c2_calst, bytes_calst);
    1cc6:	1dbb      	adds	r3, r7, #6
    1cc8:	781a      	ldrb	r2, [r3, #0]
    1cca:	4915      	ldr	r1, [pc, #84]	; (1d20 <save_calibration+0x9c>)
    1ccc:	23c0      	movs	r3, #192	; 0xc0
    1cce:	00db      	lsls	r3, r3, #3
    1cd0:	0018      	movs	r0, r3
    1cd2:	4b10      	ldr	r3, [pc, #64]	; (1d14 <save_calibration+0x90>)
    1cd4:	4798      	blx	r3
	EEPROM_write(add_dist_calst, &dist_calst, bytes_calst);
    1cd6:	1dbb      	adds	r3, r7, #6
    1cd8:	781a      	ldrb	r2, [r3, #0]
    1cda:	4912      	ldr	r1, [pc, #72]	; (1d24 <save_calibration+0xa0>)
    1cdc:	23e0      	movs	r3, #224	; 0xe0
    1cde:	00db      	lsls	r3, r3, #3
    1ce0:	0018      	movs	r0, r3
    1ce2:	4b0c      	ldr	r3, [pc, #48]	; (1d14 <save_calibration+0x90>)
    1ce4:	4798      	blx	r3
		
	// Save Calibration Report
	EEPROM_write(add_cal_report_azm_inc, &cal_report_azm_inc, bytes_report);
    1ce6:	1dfb      	adds	r3, r7, #7
    1ce8:	781a      	ldrb	r2, [r3, #0]
    1cea:	490f      	ldr	r1, [pc, #60]	; (1d28 <save_calibration+0xa4>)
    1cec:	2380      	movs	r3, #128	; 0x80
    1cee:	011b      	lsls	r3, r3, #4
    1cf0:	0018      	movs	r0, r3
    1cf2:	4b08      	ldr	r3, [pc, #32]	; (1d14 <save_calibration+0x90>)
    1cf4:	4798      	blx	r3
	EEPROM_write(add_cal_report_dist, &cal_report_dist, bytes_report);
    1cf6:	1dfb      	adds	r3, r7, #7
    1cf8:	781a      	ldrb	r2, [r3, #0]
    1cfa:	490c      	ldr	r1, [pc, #48]	; (1d2c <save_calibration+0xa8>)
    1cfc:	2390      	movs	r3, #144	; 0x90
    1cfe:	011b      	lsls	r3, r3, #4
    1d00:	0018      	movs	r0, r3
    1d02:	4b04      	ldr	r3, [pc, #16]	; (1d14 <save_calibration+0x90>)
    1d04:	4798      	blx	r3
	
	
}
    1d06:	46c0      	nop			; (mov r8, r8)
    1d08:	46bd      	mov	sp, r7
    1d0a:	b002      	add	sp, #8
    1d0c:	bd80      	pop	{r7, pc}
    1d0e:	46c0      	nop			; (mov r8, r8)
    1d10:	2000497c 	.word	0x2000497c
    1d14:	00001e39 	.word	0x00001e39
    1d18:	20004558 	.word	0x20004558
    1d1c:	20002e78 	.word	0x20002e78
    1d20:	20001df0 	.word	0x20001df0
    1d24:	200042cc 	.word	0x200042cc
    1d28:	2000188c 	.word	0x2000188c
    1d2c:	20002f20 	.word	0x20002f20

00001d30 <EEPROM_read>:





void EEPROM_read(uint16_t data_address, uint8_t data_buf[], uint8_t bytes_to_read){
    1d30:	b580      	push	{r7, lr}
    1d32:	b088      	sub	sp, #32
    1d34:	af00      	add	r7, sp, #0
    1d36:	6039      	str	r1, [r7, #0]
    1d38:	0011      	movs	r1, r2
    1d3a:	1dbb      	adds	r3, r7, #6
    1d3c:	1c02      	adds	r2, r0, #0
    1d3e:	801a      	strh	r2, [r3, #0]
    1d40:	1d7b      	adds	r3, r7, #5
    1d42:	1c0a      	adds	r2, r1, #0
    1d44:	701a      	strb	r2, [r3, #0]
	uint16_t limit=20;
    1d46:	231c      	movs	r3, #28
    1d48:	18fb      	adds	r3, r7, r3
    1d4a:	2214      	movs	r2, #20
    1d4c:	801a      	strh	r2, [r3, #0]
	uint16_t timeout;
	struct i2c_master_packet packet = {
    1d4e:	2310      	movs	r3, #16
    1d50:	18fb      	adds	r3, r7, r3
    1d52:	0018      	movs	r0, r3
    1d54:	230c      	movs	r3, #12
    1d56:	001a      	movs	r2, r3
    1d58:	2100      	movs	r1, #0
    1d5a:	4b33      	ldr	r3, [pc, #204]	; (1e28 <EEPROM_read+0xf8>)
    1d5c:	4798      	blx	r3
    1d5e:	2310      	movs	r3, #16
    1d60:	18fb      	adds	r3, r7, r3
    1d62:	2257      	movs	r2, #87	; 0x57
    1d64:	801a      	strh	r2, [r3, #0]
    1d66:	2310      	movs	r3, #16
    1d68:	18fb      	adds	r3, r7, r3
    1d6a:	683a      	ldr	r2, [r7, #0]
    1d6c:	605a      	str	r2, [r3, #4]
	
	
	//  Write 16bit read address
	//  Set Up packet
	uint8_t add_buf[2];
	add_buf[0] = data_address>>8;//high byte
    1d6e:	1dbb      	adds	r3, r7, #6
    1d70:	881b      	ldrh	r3, [r3, #0]
    1d72:	0a1b      	lsrs	r3, r3, #8
    1d74:	b29b      	uxth	r3, r3
    1d76:	b2da      	uxtb	r2, r3
    1d78:	230c      	movs	r3, #12
    1d7a:	18fb      	adds	r3, r7, r3
    1d7c:	701a      	strb	r2, [r3, #0]
	add_buf[1] = data_address & 0xff;//low byte
    1d7e:	1dbb      	adds	r3, r7, #6
    1d80:	881b      	ldrh	r3, [r3, #0]
    1d82:	b2da      	uxtb	r2, r3
    1d84:	230c      	movs	r3, #12
    1d86:	18fb      	adds	r3, r7, r3
    1d88:	705a      	strb	r2, [r3, #1]
	packet.data = add_buf;
    1d8a:	2310      	movs	r3, #16
    1d8c:	18fb      	adds	r3, r7, r3
    1d8e:	220c      	movs	r2, #12
    1d90:	18ba      	adds	r2, r7, r2
    1d92:	605a      	str	r2, [r3, #4]
	packet.data_length=2;
    1d94:	2310      	movs	r3, #16
    1d96:	18fb      	adds	r3, r7, r3
    1d98:	2202      	movs	r2, #2
    1d9a:	805a      	strh	r2, [r3, #2]
	timeout=0;
    1d9c:	231e      	movs	r3, #30
    1d9e:	18fb      	adds	r3, r7, r3
    1da0:	2200      	movs	r2, #0
    1da2:	801a      	strh	r2, [r3, #0]
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    1da4:	e00b      	b.n	1dbe <EEPROM_read+0x8e>
		if (timeout++ == limit) {   break;   }
    1da6:	231e      	movs	r3, #30
    1da8:	18fb      	adds	r3, r7, r3
    1daa:	881b      	ldrh	r3, [r3, #0]
    1dac:	221e      	movs	r2, #30
    1dae:	18ba      	adds	r2, r7, r2
    1db0:	1c59      	adds	r1, r3, #1
    1db2:	8011      	strh	r1, [r2, #0]
    1db4:	221c      	movs	r2, #28
    1db6:	18ba      	adds	r2, r7, r2
    1db8:	8812      	ldrh	r2, [r2, #0]
    1dba:	429a      	cmp	r2, r3
    1dbc:	d009      	beq.n	1dd2 <EEPROM_read+0xa2>
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    1dbe:	2310      	movs	r3, #16
    1dc0:	18fa      	adds	r2, r7, r3
    1dc2:	4b1a      	ldr	r3, [pc, #104]	; (1e2c <EEPROM_read+0xfc>)
    1dc4:	0011      	movs	r1, r2
    1dc6:	0018      	movs	r0, r3
    1dc8:	4b19      	ldr	r3, [pc, #100]	; (1e30 <EEPROM_read+0x100>)
    1dca:	4798      	blx	r3
    1dcc:	1e03      	subs	r3, r0, #0
    1dce:	d1ea      	bne.n	1da6 <EEPROM_read+0x76>
    1dd0:	e000      	b.n	1dd4 <EEPROM_read+0xa4>
		if (timeout++ == limit) {   break;   }
    1dd2:	46c0      	nop			; (mov r8, r8)
	}
	//  Send read request to eeprom chip
	packet.data = data_buf;
    1dd4:	2310      	movs	r3, #16
    1dd6:	18fb      	adds	r3, r7, r3
    1dd8:	683a      	ldr	r2, [r7, #0]
    1dda:	605a      	str	r2, [r3, #4]
	packet.data_length=bytes_to_read;
    1ddc:	1d7b      	adds	r3, r7, #5
    1dde:	781b      	ldrb	r3, [r3, #0]
    1de0:	b29a      	uxth	r2, r3
    1de2:	2310      	movs	r3, #16
    1de4:	18fb      	adds	r3, r7, r3
    1de6:	805a      	strh	r2, [r3, #2]
	timeout=0;
    1de8:	231e      	movs	r3, #30
    1dea:	18fb      	adds	r3, r7, r3
    1dec:	2200      	movs	r2, #0
    1dee:	801a      	strh	r2, [r3, #0]
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    1df0:	e00b      	b.n	1e0a <EEPROM_read+0xda>
		if (timeout++ == limit) {   break;   }
    1df2:	231e      	movs	r3, #30
    1df4:	18fb      	adds	r3, r7, r3
    1df6:	881b      	ldrh	r3, [r3, #0]
    1df8:	221e      	movs	r2, #30
    1dfa:	18ba      	adds	r2, r7, r2
    1dfc:	1c59      	adds	r1, r3, #1
    1dfe:	8011      	strh	r1, [r2, #0]
    1e00:	221c      	movs	r2, #28
    1e02:	18ba      	adds	r2, r7, r2
    1e04:	8812      	ldrh	r2, [r2, #0]
    1e06:	429a      	cmp	r2, r3
    1e08:	d009      	beq.n	1e1e <EEPROM_read+0xee>
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    1e0a:	2310      	movs	r3, #16
    1e0c:	18fa      	adds	r2, r7, r3
    1e0e:	4b07      	ldr	r3, [pc, #28]	; (1e2c <EEPROM_read+0xfc>)
    1e10:	0011      	movs	r1, r2
    1e12:	0018      	movs	r0, r3
    1e14:	4b07      	ldr	r3, [pc, #28]	; (1e34 <EEPROM_read+0x104>)
    1e16:	4798      	blx	r3
    1e18:	1e03      	subs	r3, r0, #0
    1e1a:	d1ea      	bne.n	1df2 <EEPROM_read+0xc2>
	}
	
	
	
	
}
    1e1c:	e000      	b.n	1e20 <EEPROM_read+0xf0>
		if (timeout++ == limit) {   break;   }
    1e1e:	46c0      	nop			; (mov r8, r8)
}
    1e20:	46c0      	nop			; (mov r8, r8)
    1e22:	46bd      	mov	sp, r7
    1e24:	b008      	add	sp, #32
    1e26:	bd80      	pop	{r7, pc}
    1e28:	00021029 	.word	0x00021029
    1e2c:	200010e0 	.word	0x200010e0
    1e30:	00005ddd 	.word	0x00005ddd
    1e34:	00005c25 	.word	0x00005c25

00001e38 <EEPROM_write>:

void EEPROM_write(uint16_t address_init, uint8_t data_buf[], uint8_t bytes_to_write){
    1e38:	b590      	push	{r4, r7, lr}
    1e3a:	b093      	sub	sp, #76	; 0x4c
    1e3c:	af00      	add	r7, sp, #0
    1e3e:	6039      	str	r1, [r7, #0]
    1e40:	0011      	movs	r1, r2
    1e42:	1dbb      	adds	r3, r7, #6
    1e44:	1c02      	adds	r2, r0, #0
    1e46:	801a      	strh	r2, [r3, #0]
    1e48:	1d7b      	adds	r3, r7, #5
    1e4a:	1c0a      	adds	r2, r1, #0
    1e4c:	701a      	strb	r2, [r3, #0]
	uint8_t send_buf[page_size+2];
	uint8_t bytes_packet;
	uint16_t address_packet;
	struct i2c_master_packet packet;
	
	uint16_t limit=200;
    1e4e:	2340      	movs	r3, #64	; 0x40
    1e50:	18fb      	adds	r3, r7, r3
    1e52:	22c8      	movs	r2, #200	; 0xc8
    1e54:	801a      	strh	r2, [r3, #0]
	uint16_t timeout;
	//  Packet template
	packet.data = send_buf;
    1e56:	230c      	movs	r3, #12
    1e58:	18fb      	adds	r3, r7, r3
    1e5a:	2218      	movs	r2, #24
    1e5c:	18ba      	adds	r2, r7, r2
    1e5e:	605a      	str	r2, [r3, #4]
	packet.ten_bit_address = false;
    1e60:	230c      	movs	r3, #12
    1e62:	18fb      	adds	r3, r7, r3
    1e64:	2200      	movs	r2, #0
    1e66:	721a      	strb	r2, [r3, #8]
	packet.high_speed = false;
    1e68:	230c      	movs	r3, #12
    1e6a:	18fb      	adds	r3, r7, r3
    1e6c:	2200      	movs	r2, #0
    1e6e:	725a      	strb	r2, [r3, #9]
	packet.hs_master_code = 0x0;
    1e70:	230c      	movs	r3, #12
    1e72:	18fb      	adds	r3, r7, r3
    1e74:	2200      	movs	r2, #0
    1e76:	729a      	strb	r2, [r3, #10]
	packet.address = EEPROM_add;
    1e78:	230c      	movs	r3, #12
    1e7a:	18fb      	adds	r3, r7, r3
    1e7c:	2257      	movs	r2, #87	; 0x57
    1e7e:	801a      	strh	r2, [r3, #0]
	//  Determine number of packets
	packets = floor(bytes_to_write/page_size)+1;
    1e80:	1d7b      	adds	r3, r7, #5
    1e82:	781b      	ldrb	r3, [r3, #0]
    1e84:	095b      	lsrs	r3, r3, #5
    1e86:	b2db      	uxtb	r3, r3
    1e88:	001a      	movs	r2, r3
    1e8a:	4b56      	ldr	r3, [pc, #344]	; (1fe4 <EEPROM_write+0x1ac>)
    1e8c:	0010      	movs	r0, r2
    1e8e:	4798      	blx	r3
    1e90:	0003      	movs	r3, r0
    1e92:	000c      	movs	r4, r1
    1e94:	0018      	movs	r0, r3
    1e96:	0021      	movs	r1, r4
    1e98:	4b53      	ldr	r3, [pc, #332]	; (1fe8 <EEPROM_write+0x1b0>)
    1e9a:	4798      	blx	r3
    1e9c:	4c53      	ldr	r4, [pc, #332]	; (1fec <EEPROM_write+0x1b4>)
    1e9e:	2200      	movs	r2, #0
    1ea0:	4b53      	ldr	r3, [pc, #332]	; (1ff0 <EEPROM_write+0x1b8>)
    1ea2:	47a0      	blx	r4
    1ea4:	0003      	movs	r3, r0
    1ea6:	000c      	movs	r4, r1
    1ea8:	0019      	movs	r1, r3
    1eaa:	0022      	movs	r2, r4
    1eac:	233f      	movs	r3, #63	; 0x3f
    1eae:	18fc      	adds	r4, r7, r3
    1eb0:	4b50      	ldr	r3, [pc, #320]	; (1ff4 <EEPROM_write+0x1bc>)
    1eb2:	0008      	movs	r0, r1
    1eb4:	0011      	movs	r1, r2
    1eb6:	4798      	blx	r3
    1eb8:	0003      	movs	r3, r0
    1eba:	7023      	strb	r3, [r4, #0]

	//  Iterate through packets
	for (p=0;p<packets;p++){
    1ebc:	2346      	movs	r3, #70	; 0x46
    1ebe:	18fb      	adds	r3, r7, r3
    1ec0:	2200      	movs	r2, #0
    1ec2:	701a      	strb	r2, [r3, #0]
    1ec4:	e081      	b.n	1fca <EEPROM_write+0x192>
		//  Determine bytes to write in packet
		if (bytes_to_write>page_size){
    1ec6:	1d7b      	adds	r3, r7, #5
    1ec8:	781b      	ldrb	r3, [r3, #0]
    1eca:	2b20      	cmp	r3, #32
    1ecc:	d909      	bls.n	1ee2 <EEPROM_write+0xaa>
			bytes_packet = page_size;
    1ece:	2345      	movs	r3, #69	; 0x45
    1ed0:	18fb      	adds	r3, r7, r3
    1ed2:	2220      	movs	r2, #32
    1ed4:	701a      	strb	r2, [r3, #0]
			bytes_to_write = bytes_to_write-page_size;
    1ed6:	1d7b      	adds	r3, r7, #5
    1ed8:	1d7a      	adds	r2, r7, #5
    1eda:	7812      	ldrb	r2, [r2, #0]
    1edc:	3a20      	subs	r2, #32
    1ede:	701a      	strb	r2, [r3, #0]
    1ee0:	e004      	b.n	1eec <EEPROM_write+0xb4>
			}else{
			bytes_packet = bytes_to_write;
    1ee2:	2345      	movs	r3, #69	; 0x45
    1ee4:	18fb      	adds	r3, r7, r3
    1ee6:	1d7a      	adds	r2, r7, #5
    1ee8:	7812      	ldrb	r2, [r2, #0]
    1eea:	701a      	strb	r2, [r3, #0]
		}
		packet.data_length = bytes_packet + 2;// Include 16-bit address
    1eec:	2345      	movs	r3, #69	; 0x45
    1eee:	18fb      	adds	r3, r7, r3
    1ef0:	781b      	ldrb	r3, [r3, #0]
    1ef2:	b29b      	uxth	r3, r3
    1ef4:	3302      	adds	r3, #2
    1ef6:	b29a      	uxth	r2, r3
    1ef8:	230c      	movs	r3, #12
    1efa:	18fb      	adds	r3, r7, r3
    1efc:	805a      	strh	r2, [r3, #2]
		//  Set address
		address_packet = address_init + p*page_size;
    1efe:	2346      	movs	r3, #70	; 0x46
    1f00:	18fb      	adds	r3, r7, r3
    1f02:	781b      	ldrb	r3, [r3, #0]
    1f04:	b29b      	uxth	r3, r3
    1f06:	015b      	lsls	r3, r3, #5
    1f08:	b299      	uxth	r1, r3
    1f0a:	233c      	movs	r3, #60	; 0x3c
    1f0c:	18fb      	adds	r3, r7, r3
    1f0e:	1dba      	adds	r2, r7, #6
    1f10:	8812      	ldrh	r2, [r2, #0]
    1f12:	188a      	adds	r2, r1, r2
    1f14:	801a      	strh	r2, [r3, #0]
		send_buf[0] = address_packet>>8;//high byte
    1f16:	233c      	movs	r3, #60	; 0x3c
    1f18:	18fb      	adds	r3, r7, r3
    1f1a:	881b      	ldrh	r3, [r3, #0]
    1f1c:	0a1b      	lsrs	r3, r3, #8
    1f1e:	b29b      	uxth	r3, r3
    1f20:	b2da      	uxtb	r2, r3
    1f22:	2318      	movs	r3, #24
    1f24:	18fb      	adds	r3, r7, r3
    1f26:	701a      	strb	r2, [r3, #0]
		send_buf[1] = address_packet & 0x00FF;// low byte
    1f28:	233c      	movs	r3, #60	; 0x3c
    1f2a:	18fb      	adds	r3, r7, r3
    1f2c:	881b      	ldrh	r3, [r3, #0]
    1f2e:	b2da      	uxtb	r2, r3
    1f30:	2318      	movs	r3, #24
    1f32:	18fb      	adds	r3, r7, r3
    1f34:	705a      	strb	r2, [r3, #1]
		//  Copy data to buffer
		for (k=0;k<bytes_packet;k++){
    1f36:	2347      	movs	r3, #71	; 0x47
    1f38:	18fb      	adds	r3, r7, r3
    1f3a:	2200      	movs	r2, #0
    1f3c:	701a      	strb	r2, [r3, #0]
    1f3e:	e019      	b.n	1f74 <EEPROM_write+0x13c>
			send_buf[k+2] = data_buf[p*page_size+k];
    1f40:	2347      	movs	r3, #71	; 0x47
    1f42:	18fb      	adds	r3, r7, r3
    1f44:	781b      	ldrb	r3, [r3, #0]
    1f46:	3302      	adds	r3, #2
    1f48:	2246      	movs	r2, #70	; 0x46
    1f4a:	18ba      	adds	r2, r7, r2
    1f4c:	7812      	ldrb	r2, [r2, #0]
    1f4e:	0151      	lsls	r1, r2, #5
    1f50:	2247      	movs	r2, #71	; 0x47
    1f52:	18ba      	adds	r2, r7, r2
    1f54:	7812      	ldrb	r2, [r2, #0]
    1f56:	188a      	adds	r2, r1, r2
    1f58:	0011      	movs	r1, r2
    1f5a:	683a      	ldr	r2, [r7, #0]
    1f5c:	1852      	adds	r2, r2, r1
    1f5e:	7811      	ldrb	r1, [r2, #0]
    1f60:	2218      	movs	r2, #24
    1f62:	18ba      	adds	r2, r7, r2
    1f64:	54d1      	strb	r1, [r2, r3]
		for (k=0;k<bytes_packet;k++){
    1f66:	2347      	movs	r3, #71	; 0x47
    1f68:	18fb      	adds	r3, r7, r3
    1f6a:	781a      	ldrb	r2, [r3, #0]
    1f6c:	2347      	movs	r3, #71	; 0x47
    1f6e:	18fb      	adds	r3, r7, r3
    1f70:	3201      	adds	r2, #1
    1f72:	701a      	strb	r2, [r3, #0]
    1f74:	2347      	movs	r3, #71	; 0x47
    1f76:	18fa      	adds	r2, r7, r3
    1f78:	2345      	movs	r3, #69	; 0x45
    1f7a:	18fb      	adds	r3, r7, r3
    1f7c:	7812      	ldrb	r2, [r2, #0]
    1f7e:	781b      	ldrb	r3, [r3, #0]
    1f80:	429a      	cmp	r2, r3
    1f82:	d3dd      	bcc.n	1f40 <EEPROM_write+0x108>
		}
		// Send Packet
		timeout=0;
    1f84:	2342      	movs	r3, #66	; 0x42
    1f86:	18fb      	adds	r3, r7, r3
    1f88:	2200      	movs	r2, #0
    1f8a:	801a      	strh	r2, [r3, #0]
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    1f8c:	e00b      	b.n	1fa6 <EEPROM_write+0x16e>
			if (timeout++ == limit) {   break;   }
    1f8e:	2342      	movs	r3, #66	; 0x42
    1f90:	18fb      	adds	r3, r7, r3
    1f92:	881b      	ldrh	r3, [r3, #0]
    1f94:	2242      	movs	r2, #66	; 0x42
    1f96:	18ba      	adds	r2, r7, r2
    1f98:	1c59      	adds	r1, r3, #1
    1f9a:	8011      	strh	r1, [r2, #0]
    1f9c:	2240      	movs	r2, #64	; 0x40
    1f9e:	18ba      	adds	r2, r7, r2
    1fa0:	8812      	ldrh	r2, [r2, #0]
    1fa2:	429a      	cmp	r2, r3
    1fa4:	d009      	beq.n	1fba <EEPROM_write+0x182>
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    1fa6:	230c      	movs	r3, #12
    1fa8:	18fa      	adds	r2, r7, r3
    1faa:	4b13      	ldr	r3, [pc, #76]	; (1ff8 <EEPROM_write+0x1c0>)
    1fac:	0011      	movs	r1, r2
    1fae:	0018      	movs	r0, r3
    1fb0:	4b12      	ldr	r3, [pc, #72]	; (1ffc <EEPROM_write+0x1c4>)
    1fb2:	4798      	blx	r3
    1fb4:	1e03      	subs	r3, r0, #0
    1fb6:	d1ea      	bne.n	1f8e <EEPROM_write+0x156>
    1fb8:	e000      	b.n	1fbc <EEPROM_write+0x184>
			if (timeout++ == limit) {   break;   }
    1fba:	46c0      	nop			; (mov r8, r8)
	for (p=0;p<packets;p++){
    1fbc:	2346      	movs	r3, #70	; 0x46
    1fbe:	18fb      	adds	r3, r7, r3
    1fc0:	781a      	ldrb	r2, [r3, #0]
    1fc2:	2346      	movs	r3, #70	; 0x46
    1fc4:	18fb      	adds	r3, r7, r3
    1fc6:	3201      	adds	r2, #1
    1fc8:	701a      	strb	r2, [r3, #0]
    1fca:	2346      	movs	r3, #70	; 0x46
    1fcc:	18fa      	adds	r2, r7, r3
    1fce:	233f      	movs	r3, #63	; 0x3f
    1fd0:	18fb      	adds	r3, r7, r3
    1fd2:	7812      	ldrb	r2, [r2, #0]
    1fd4:	781b      	ldrb	r3, [r3, #0]
    1fd6:	429a      	cmp	r2, r3
    1fd8:	d200      	bcs.n	1fdc <EEPROM_write+0x1a4>
    1fda:	e774      	b.n	1ec6 <EEPROM_write+0x8e>
		}
		
	}
	
}
    1fdc:	46c0      	nop			; (mov r8, r8)
    1fde:	46bd      	mov	sp, r7
    1fe0:	b013      	add	sp, #76	; 0x4c
    1fe2:	bd90      	pop	{r4, r7, pc}
    1fe4:	00020ca5 	.word	0x00020ca5
    1fe8:	0001b581 	.word	0x0001b581
    1fec:	0001f249 	.word	0x0001f249
    1ff0:	3ff00000 	.word	0x3ff00000
    1ff4:	0001e425 	.word	0x0001e425
    1ff8:	200010e0 	.word	0x200010e0
    1ffc:	00005ddd 	.word	0x00005ddd

00002000 <arch_ioport_pin_to_port_id>:
typedef uint32_t ioport_pin_t;
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
    2000:	b580      	push	{r7, lr}
    2002:	b082      	sub	sp, #8
    2004:	af00      	add	r7, sp, #0
    2006:	6078      	str	r0, [r7, #4]
	return pin >> 5;
    2008:	687b      	ldr	r3, [r7, #4]
    200a:	095b      	lsrs	r3, r3, #5
}
    200c:	0018      	movs	r0, r3
    200e:	46bd      	mov	sp, r7
    2010:	b002      	add	sp, #8
    2012:	bd80      	pop	{r7, pc}

00002014 <arch_ioport_port_to_base>:

inline static PortGroup *arch_ioport_port_to_base(
		ioport_port_t port)
{
    2014:	b580      	push	{r7, lr}
    2016:	b082      	sub	sp, #8
    2018:	af00      	add	r7, sp, #0
    201a:	6078      	str	r0, [r7, #4]
	return &PORT->Group[port];
    201c:	687b      	ldr	r3, [r7, #4]
    201e:	01db      	lsls	r3, r3, #7
    2020:	4a03      	ldr	r2, [pc, #12]	; (2030 <arch_ioport_port_to_base+0x1c>)
    2022:	4694      	mov	ip, r2
    2024:	4463      	add	r3, ip
}
    2026:	0018      	movs	r0, r3
    2028:	46bd      	mov	sp, r7
    202a:	b002      	add	sp, #8
    202c:	bd80      	pop	{r7, pc}
    202e:	46c0      	nop			; (mov r8, r8)
    2030:	40002800 	.word	0x40002800

00002034 <arch_ioport_pin_to_base>:

inline static PortGroup *arch_ioport_pin_to_base(ioport_pin_t pin)
{
    2034:	b580      	push	{r7, lr}
    2036:	b082      	sub	sp, #8
    2038:	af00      	add	r7, sp, #0
    203a:	6078      	str	r0, [r7, #4]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
    203c:	687b      	ldr	r3, [r7, #4]
    203e:	0018      	movs	r0, r3
    2040:	4b05      	ldr	r3, [pc, #20]	; (2058 <arch_ioport_pin_to_base+0x24>)
    2042:	4798      	blx	r3
    2044:	0003      	movs	r3, r0
    2046:	0018      	movs	r0, r3
    2048:	4b04      	ldr	r3, [pc, #16]	; (205c <arch_ioport_pin_to_base+0x28>)
    204a:	4798      	blx	r3
    204c:	0003      	movs	r3, r0
}
    204e:	0018      	movs	r0, r3
    2050:	46bd      	mov	sp, r7
    2052:	b002      	add	sp, #8
    2054:	bd80      	pop	{r7, pc}
    2056:	46c0      	nop			; (mov r8, r8)
    2058:	00002001 	.word	0x00002001
    205c:	00002015 	.word	0x00002015

00002060 <arch_ioport_pin_to_mask>:

inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
    2060:	b580      	push	{r7, lr}
    2062:	b082      	sub	sp, #8
    2064:	af00      	add	r7, sp, #0
    2066:	6078      	str	r0, [r7, #4]
	return 1U << (pin & 0x1F);
    2068:	687b      	ldr	r3, [r7, #4]
    206a:	221f      	movs	r2, #31
    206c:	4013      	ands	r3, r2
    206e:	2201      	movs	r2, #1
    2070:	409a      	lsls	r2, r3
    2072:	0013      	movs	r3, r2
}
    2074:	0018      	movs	r0, r3
    2076:	46bd      	mov	sp, r7
    2078:	b002      	add	sp, #8
    207a:	bd80      	pop	{r7, pc}

0000207c <arch_ioport_set_pin_level>:
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
}

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
    207c:	b590      	push	{r4, r7, lr}
    207e:	b083      	sub	sp, #12
    2080:	af00      	add	r7, sp, #0
    2082:	6078      	str	r0, [r7, #4]
    2084:	000a      	movs	r2, r1
    2086:	1cfb      	adds	r3, r7, #3
    2088:	701a      	strb	r2, [r3, #0]
	if (level) {
    208a:	1cfb      	adds	r3, r7, #3
    208c:	781b      	ldrb	r3, [r3, #0]
    208e:	2b00      	cmp	r3, #0
    2090:	d00b      	beq.n	20aa <arch_ioport_set_pin_level+0x2e>
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    2092:	687b      	ldr	r3, [r7, #4]
    2094:	0018      	movs	r0, r3
    2096:	4b0c      	ldr	r3, [pc, #48]	; (20c8 <arch_ioport_set_pin_level+0x4c>)
    2098:	4798      	blx	r3
    209a:	0004      	movs	r4, r0
    209c:	687b      	ldr	r3, [r7, #4]
    209e:	0018      	movs	r0, r3
    20a0:	4b0a      	ldr	r3, [pc, #40]	; (20cc <arch_ioport_set_pin_level+0x50>)
    20a2:	4798      	blx	r3
    20a4:	0003      	movs	r3, r0
    20a6:	61a3      	str	r3, [r4, #24]
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
	}
}
    20a8:	e00a      	b.n	20c0 <arch_ioport_set_pin_level+0x44>
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    20aa:	687b      	ldr	r3, [r7, #4]
    20ac:	0018      	movs	r0, r3
    20ae:	4b06      	ldr	r3, [pc, #24]	; (20c8 <arch_ioport_set_pin_level+0x4c>)
    20b0:	4798      	blx	r3
    20b2:	0004      	movs	r4, r0
    20b4:	687b      	ldr	r3, [r7, #4]
    20b6:	0018      	movs	r0, r3
    20b8:	4b04      	ldr	r3, [pc, #16]	; (20cc <arch_ioport_set_pin_level+0x50>)
    20ba:	4798      	blx	r3
    20bc:	0003      	movs	r3, r0
    20be:	6163      	str	r3, [r4, #20]
}
    20c0:	46c0      	nop			; (mov r8, r8)
    20c2:	46bd      	mov	sp, r7
    20c4:	b003      	add	sp, #12
    20c6:	bd90      	pop	{r4, r7, pc}
    20c8:	00002035 	.word	0x00002035
    20cc:	00002061 	.word	0x00002061

000020d0 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
    20d0:	b580      	push	{r7, lr}
    20d2:	b082      	sub	sp, #8
    20d4:	af00      	add	r7, sp, #0
    20d6:	6078      	str	r0, [r7, #4]
    20d8:	000a      	movs	r2, r1
    20da:	1cfb      	adds	r3, r7, #3
    20dc:	701a      	strb	r2, [r3, #0]
	arch_ioport_set_pin_level(pin, level);
    20de:	1cfb      	adds	r3, r7, #3
    20e0:	781a      	ldrb	r2, [r3, #0]
    20e2:	687b      	ldr	r3, [r7, #4]
    20e4:	0011      	movs	r1, r2
    20e6:	0018      	movs	r0, r3
    20e8:	4b02      	ldr	r3, [pc, #8]	; (20f4 <ioport_set_pin_level+0x24>)
    20ea:	4798      	blx	r3
}
    20ec:	46c0      	nop			; (mov r8, r8)
    20ee:	46bd      	mov	sp, r7
    20f0:	b002      	add	sp, #8
    20f2:	bd80      	pop	{r7, pc}
    20f4:	0000207d 	.word	0x0000207d

000020f8 <calc_magnitude>:





float calc_magnitude(float xyz[3]){
    20f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    20fa:	b085      	sub	sp, #20
    20fc:	af00      	add	r7, sp, #0
    20fe:	6078      	str	r0, [r7, #4]
	float magnitude;
	magnitude = sqrt(pow(xyz[0],2)+pow(xyz[1],2)+pow(xyz[2],2));
    2100:	687b      	ldr	r3, [r7, #4]
    2102:	681a      	ldr	r2, [r3, #0]
    2104:	4b24      	ldr	r3, [pc, #144]	; (2198 <calc_magnitude+0xa0>)
    2106:	1c10      	adds	r0, r2, #0
    2108:	4798      	blx	r3
    210a:	2300      	movs	r3, #0
    210c:	2480      	movs	r4, #128	; 0x80
    210e:	05e4      	lsls	r4, r4, #23
    2110:	001a      	movs	r2, r3
    2112:	0023      	movs	r3, r4
    2114:	4c21      	ldr	r4, [pc, #132]	; (219c <calc_magnitude+0xa4>)
    2116:	47a0      	blx	r4
    2118:	0005      	movs	r5, r0
    211a:	000e      	movs	r6, r1
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	3304      	adds	r3, #4
    2120:	681a      	ldr	r2, [r3, #0]
    2122:	4b1d      	ldr	r3, [pc, #116]	; (2198 <calc_magnitude+0xa0>)
    2124:	1c10      	adds	r0, r2, #0
    2126:	4798      	blx	r3
    2128:	2300      	movs	r3, #0
    212a:	2480      	movs	r4, #128	; 0x80
    212c:	05e4      	lsls	r4, r4, #23
    212e:	001a      	movs	r2, r3
    2130:	0023      	movs	r3, r4
    2132:	4c1a      	ldr	r4, [pc, #104]	; (219c <calc_magnitude+0xa4>)
    2134:	47a0      	blx	r4
    2136:	0002      	movs	r2, r0
    2138:	000b      	movs	r3, r1
    213a:	4c19      	ldr	r4, [pc, #100]	; (21a0 <calc_magnitude+0xa8>)
    213c:	0028      	movs	r0, r5
    213e:	0031      	movs	r1, r6
    2140:	47a0      	blx	r4
    2142:	0003      	movs	r3, r0
    2144:	000c      	movs	r4, r1
    2146:	001d      	movs	r5, r3
    2148:	0026      	movs	r6, r4
    214a:	687b      	ldr	r3, [r7, #4]
    214c:	3308      	adds	r3, #8
    214e:	681a      	ldr	r2, [r3, #0]
    2150:	4b11      	ldr	r3, [pc, #68]	; (2198 <calc_magnitude+0xa0>)
    2152:	1c10      	adds	r0, r2, #0
    2154:	4798      	blx	r3
    2156:	2300      	movs	r3, #0
    2158:	2480      	movs	r4, #128	; 0x80
    215a:	05e4      	lsls	r4, r4, #23
    215c:	001a      	movs	r2, r3
    215e:	0023      	movs	r3, r4
    2160:	4c0e      	ldr	r4, [pc, #56]	; (219c <calc_magnitude+0xa4>)
    2162:	47a0      	blx	r4
    2164:	0002      	movs	r2, r0
    2166:	000b      	movs	r3, r1
    2168:	4c0d      	ldr	r4, [pc, #52]	; (21a0 <calc_magnitude+0xa8>)
    216a:	0028      	movs	r0, r5
    216c:	0031      	movs	r1, r6
    216e:	47a0      	blx	r4
    2170:	0003      	movs	r3, r0
    2172:	000c      	movs	r4, r1
    2174:	0018      	movs	r0, r3
    2176:	0021      	movs	r1, r4
    2178:	4b0a      	ldr	r3, [pc, #40]	; (21a4 <calc_magnitude+0xac>)
    217a:	4798      	blx	r3
    217c:	000a      	movs	r2, r1
    217e:	0001      	movs	r1, r0
    2180:	4b09      	ldr	r3, [pc, #36]	; (21a8 <calc_magnitude+0xb0>)
    2182:	0008      	movs	r0, r1
    2184:	0011      	movs	r1, r2
    2186:	4798      	blx	r3
    2188:	1c03      	adds	r3, r0, #0
    218a:	60fb      	str	r3, [r7, #12]
	return magnitude;	
    218c:	68fb      	ldr	r3, [r7, #12]
}
    218e:	1c18      	adds	r0, r3, #0
    2190:	46bd      	mov	sp, r7
    2192:	b005      	add	sp, #20
    2194:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2196:	46c0      	nop			; (mov r8, r8)
    2198:	00020d99 	.word	0x00020d99
    219c:	0001b749 	.word	0x0001b749
    21a0:	0001f249 	.word	0x0001f249
    21a4:	0001baa1 	.word	0x0001baa1
    21a8:	00020e3d 	.word	0x00020e3d

000021ac <quick_measurement>:

void quick_measurement(struct MEASUREMENT *meas_inst){
    21ac:	b580      	push	{r7, lr}
    21ae:	b082      	sub	sp, #8
    21b0:	af00      	add	r7, sp, #0
    21b2:	6078      	str	r0, [r7, #4]

	
	config_spi(sensors);
    21b4:	2001      	movs	r0, #1
    21b6:	4b16      	ldr	r3, [pc, #88]	; (2210 <quick_measurement+0x64>)
    21b8:	4798      	blx	r3
	
	read_accel(&slave_acc1, meas_inst->a1xyz);
    21ba:	687b      	ldr	r3, [r7, #4]
    21bc:	3320      	adds	r3, #32
    21be:	001a      	movs	r2, r3
    21c0:	4b14      	ldr	r3, [pc, #80]	; (2214 <quick_measurement+0x68>)
    21c2:	0011      	movs	r1, r2
    21c4:	0018      	movs	r0, r3
    21c6:	4b14      	ldr	r3, [pc, #80]	; (2218 <quick_measurement+0x6c>)
    21c8:	4798      	blx	r3
	read_accel(&slave_acc2, meas_inst->a2xyz);
    21ca:	687b      	ldr	r3, [r7, #4]
    21cc:	332c      	adds	r3, #44	; 0x2c
    21ce:	001a      	movs	r2, r3
    21d0:	4b12      	ldr	r3, [pc, #72]	; (221c <quick_measurement+0x70>)
    21d2:	0011      	movs	r1, r2
    21d4:	0018      	movs	r0, r3
    21d6:	4b10      	ldr	r3, [pc, #64]	; (2218 <quick_measurement+0x6c>)
    21d8:	4798      	blx	r3
	read_mag(&slave_mag1, meas_inst->c1xyz);
    21da:	687b      	ldr	r3, [r7, #4]
    21dc:	3338      	adds	r3, #56	; 0x38
    21de:	001a      	movs	r2, r3
    21e0:	4b0f      	ldr	r3, [pc, #60]	; (2220 <quick_measurement+0x74>)
    21e2:	0011      	movs	r1, r2
    21e4:	0018      	movs	r0, r3
    21e6:	4b0f      	ldr	r3, [pc, #60]	; (2224 <quick_measurement+0x78>)
    21e8:	4798      	blx	r3
	read_mag(&slave_mag2, meas_inst->c2xyz);
    21ea:	687b      	ldr	r3, [r7, #4]
    21ec:	3344      	adds	r3, #68	; 0x44
    21ee:	001a      	movs	r2, r3
    21f0:	4b0d      	ldr	r3, [pc, #52]	; (2228 <quick_measurement+0x7c>)
    21f2:	0011      	movs	r1, r2
    21f4:	0018      	movs	r0, r3
    21f6:	4b0b      	ldr	r3, [pc, #44]	; (2224 <quick_measurement+0x78>)
    21f8:	4798      	blx	r3
	config_spi(LCD);
    21fa:	2000      	movs	r0, #0
    21fc:	4b04      	ldr	r3, [pc, #16]	; (2210 <quick_measurement+0x64>)
    21fe:	4798      	blx	r3
	
	calc_orientation(meas_inst);
    2200:	687b      	ldr	r3, [r7, #4]
    2202:	0018      	movs	r0, r3
    2204:	4b09      	ldr	r3, [pc, #36]	; (222c <quick_measurement+0x80>)
    2206:	4798      	blx	r3
		
}
    2208:	46c0      	nop			; (mov r8, r8)
    220a:	46bd      	mov	sp, r7
    220c:	b002      	add	sp, #8
    220e:	bd80      	pop	{r7, pc}
    2210:	0000df9d 	.word	0x0000df9d
    2214:	20001124 	.word	0x20001124
    2218:	00002b55 	.word	0x00002b55
    221c:	20001050 	.word	0x20001050
    2220:	20001128 	.word	0x20001128
    2224:	00002dbd 	.word	0x00002dbd
    2228:	20001018 	.word	0x20001018
    222c:	00009e35 	.word	0x00009e35

00002230 <full_measurement>:





void full_measurement(struct MEASUREMENT *meas_inst, bool calibrate_data){
    2230:	b5b0      	push	{r4, r5, r7, lr}
    2232:	b090      	sub	sp, #64	; 0x40
    2234:	af00      	add	r7, sp, #0
    2236:	6078      	str	r0, [r7, #4]
    2238:	000a      	movs	r2, r1
    223a:	1cfb      	adds	r3, r7, #3
    223c:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	enum LASER_MESSAGE_TYPE debugLM;
	float a1temp[3], a2temp[3], c1temp[3], c2temp[3];
	
	//Delay
	laser_delay(options.shot_delay);//  Beep then delay for 1 second
    223e:	4ba0      	ldr	r3, [pc, #640]	; (24c0 <full_measurement+0x290>)
    2240:	789b      	ldrb	r3, [r3, #2]
    2242:	0018      	movs	r0, r3
    2244:	4b9f      	ldr	r3, [pc, #636]	; (24c4 <full_measurement+0x294>)
    2246:	4798      	blx	r3
	laser_beep();
    2248:	4b9f      	ldr	r3, [pc, #636]	; (24c8 <full_measurement+0x298>)
    224a:	4798      	blx	r3
	delay_ms(100);//  Avoids cutting off the beep too quickly with another command
    224c:	2064      	movs	r0, #100	; 0x64
    224e:	4b9f      	ldr	r3, [pc, #636]	; (24cc <full_measurement+0x29c>)
    2250:	4798      	blx	r3
	
	//  Turn off backlight
	backlightOff();
    2252:	4b9f      	ldr	r3, [pc, #636]	; (24d0 <full_measurement+0x2a0>)
    2254:	4798      	blx	r3
	
	//  Configure SPI to talk to sensors
	config_spi(sensors);
    2256:	2001      	movs	r0, #1
    2258:	4b9e      	ldr	r3, [pc, #632]	; (24d4 <full_measurement+0x2a4>)
    225a:	4798      	blx	r3
		
	// Initialize structure
	for (i=0;i<3;i++){
    225c:	233f      	movs	r3, #63	; 0x3f
    225e:	18fb      	adds	r3, r7, r3
    2260:	2200      	movs	r2, #0
    2262:	701a      	strb	r2, [r3, #0]
    2264:	e02a      	b.n	22bc <full_measurement+0x8c>
		meas_inst->a1xyz[i] = 0;
    2266:	233f      	movs	r3, #63	; 0x3f
    2268:	18fb      	adds	r3, r7, r3
    226a:	781a      	ldrb	r2, [r3, #0]
    226c:	687b      	ldr	r3, [r7, #4]
    226e:	3208      	adds	r2, #8
    2270:	0092      	lsls	r2, r2, #2
    2272:	2100      	movs	r1, #0
    2274:	50d1      	str	r1, [r2, r3]
		meas_inst->a2xyz[i] = 0;
    2276:	233f      	movs	r3, #63	; 0x3f
    2278:	18fb      	adds	r3, r7, r3
    227a:	781b      	ldrb	r3, [r3, #0]
    227c:	687a      	ldr	r2, [r7, #4]
    227e:	330a      	adds	r3, #10
    2280:	009b      	lsls	r3, r3, #2
    2282:	18d3      	adds	r3, r2, r3
    2284:	3304      	adds	r3, #4
    2286:	2200      	movs	r2, #0
    2288:	601a      	str	r2, [r3, #0]
		meas_inst->c1xyz[i] = 0;
    228a:	233f      	movs	r3, #63	; 0x3f
    228c:	18fb      	adds	r3, r7, r3
    228e:	781a      	ldrb	r2, [r3, #0]
    2290:	687b      	ldr	r3, [r7, #4]
    2292:	320e      	adds	r2, #14
    2294:	0092      	lsls	r2, r2, #2
    2296:	2100      	movs	r1, #0
    2298:	50d1      	str	r1, [r2, r3]
		meas_inst->c2xyz[i] = 0;
    229a:	233f      	movs	r3, #63	; 0x3f
    229c:	18fb      	adds	r3, r7, r3
    229e:	781b      	ldrb	r3, [r3, #0]
    22a0:	687a      	ldr	r2, [r7, #4]
    22a2:	3310      	adds	r3, #16
    22a4:	009b      	lsls	r3, r3, #2
    22a6:	18d3      	adds	r3, r2, r3
    22a8:	3304      	adds	r3, #4
    22aa:	2200      	movs	r2, #0
    22ac:	601a      	str	r2, [r3, #0]
	for (i=0;i<3;i++){
    22ae:	233f      	movs	r3, #63	; 0x3f
    22b0:	18fb      	adds	r3, r7, r3
    22b2:	781a      	ldrb	r2, [r3, #0]
    22b4:	233f      	movs	r3, #63	; 0x3f
    22b6:	18fb      	adds	r3, r7, r3
    22b8:	3201      	adds	r2, #1
    22ba:	701a      	strb	r2, [r3, #0]
    22bc:	233f      	movs	r3, #63	; 0x3f
    22be:	18fb      	adds	r3, r7, r3
    22c0:	781b      	ldrb	r3, [r3, #0]
    22c2:	2b02      	cmp	r3, #2
    22c4:	d9cf      	bls.n	2266 <full_measurement+0x36>
	}
	meas_inst->num_errors = 0;
    22c6:	687b      	ldr	r3, [r7, #4]
    22c8:	2200      	movs	r2, #0
    22ca:	659a      	str	r2, [r3, #88]	; 0x58
	meas_inst->samples = 0;
    22cc:	687b      	ldr	r3, [r7, #4]
    22ce:	2200      	movs	r2, #0
    22d0:	651a      	str	r2, [r3, #80]	; 0x50
	
	//Initiate Laser Measurement	
	rxBufferLaserClear();
    22d2:	4b81      	ldr	r3, [pc, #516]	; (24d8 <full_measurement+0x2a8>)
    22d4:	4798      	blx	r3
	writeLaser(cmd_laser_single, sizeof(cmd_laser_single));
    22d6:	4b81      	ldr	r3, [pc, #516]	; (24dc <full_measurement+0x2ac>)
    22d8:	2105      	movs	r1, #5
    22da:	0018      	movs	r0, r3
    22dc:	4b80      	ldr	r3, [pc, #512]	; (24e0 <full_measurement+0x2b0>)
    22de:	4798      	blx	r3
	while(1){
		//Take measurements while laser is responding
		read_accel(&slave_acc1,a1temp);
    22e0:	2330      	movs	r3, #48	; 0x30
    22e2:	18fa      	adds	r2, r7, r3
    22e4:	4b7f      	ldr	r3, [pc, #508]	; (24e4 <full_measurement+0x2b4>)
    22e6:	0011      	movs	r1, r2
    22e8:	0018      	movs	r0, r3
    22ea:	4b7f      	ldr	r3, [pc, #508]	; (24e8 <full_measurement+0x2b8>)
    22ec:	4798      	blx	r3
		read_accel(&slave_acc2, a2temp);
    22ee:	2324      	movs	r3, #36	; 0x24
    22f0:	18fa      	adds	r2, r7, r3
    22f2:	4b7e      	ldr	r3, [pc, #504]	; (24ec <full_measurement+0x2bc>)
    22f4:	0011      	movs	r1, r2
    22f6:	0018      	movs	r0, r3
    22f8:	4b7b      	ldr	r3, [pc, #492]	; (24e8 <full_measurement+0x2b8>)
    22fa:	4798      	blx	r3
		read_mag(&slave_mag1, c1temp);
    22fc:	2318      	movs	r3, #24
    22fe:	18fa      	adds	r2, r7, r3
    2300:	4b7b      	ldr	r3, [pc, #492]	; (24f0 <full_measurement+0x2c0>)
    2302:	0011      	movs	r1, r2
    2304:	0018      	movs	r0, r3
    2306:	4b7b      	ldr	r3, [pc, #492]	; (24f4 <full_measurement+0x2c4>)
    2308:	4798      	blx	r3
		read_mag(&slave_mag2, c2temp);
    230a:	230c      	movs	r3, #12
    230c:	18fa      	adds	r2, r7, r3
    230e:	4b7a      	ldr	r3, [pc, #488]	; (24f8 <full_measurement+0x2c8>)
    2310:	0011      	movs	r1, r2
    2312:	0018      	movs	r0, r3
    2314:	4b77      	ldr	r3, [pc, #476]	; (24f4 <full_measurement+0x2c4>)
    2316:	4798      	blx	r3
		for (i=0;i<3;i++){
    2318:	233f      	movs	r3, #63	; 0x3f
    231a:	18fb      	adds	r3, r7, r3
    231c:	2200      	movs	r2, #0
    231e:	701a      	strb	r2, [r3, #0]
    2320:	e07a      	b.n	2418 <full_measurement+0x1e8>
			meas_inst->a1xyz[i] += a1temp[i];
    2322:	233f      	movs	r3, #63	; 0x3f
    2324:	18fb      	adds	r3, r7, r3
    2326:	781c      	ldrb	r4, [r3, #0]
    2328:	233f      	movs	r3, #63	; 0x3f
    232a:	18fb      	adds	r3, r7, r3
    232c:	781a      	ldrb	r2, [r3, #0]
    232e:	687b      	ldr	r3, [r7, #4]
    2330:	3208      	adds	r2, #8
    2332:	0092      	lsls	r2, r2, #2
    2334:	58d0      	ldr	r0, [r2, r3]
    2336:	233f      	movs	r3, #63	; 0x3f
    2338:	18fb      	adds	r3, r7, r3
    233a:	781a      	ldrb	r2, [r3, #0]
    233c:	2330      	movs	r3, #48	; 0x30
    233e:	18fb      	adds	r3, r7, r3
    2340:	0092      	lsls	r2, r2, #2
    2342:	58d2      	ldr	r2, [r2, r3]
    2344:	4b6d      	ldr	r3, [pc, #436]	; (24fc <full_measurement+0x2cc>)
    2346:	1c11      	adds	r1, r2, #0
    2348:	4798      	blx	r3
    234a:	1c03      	adds	r3, r0, #0
    234c:	1c19      	adds	r1, r3, #0
    234e:	687b      	ldr	r3, [r7, #4]
    2350:	0022      	movs	r2, r4
    2352:	3208      	adds	r2, #8
    2354:	0092      	lsls	r2, r2, #2
    2356:	50d1      	str	r1, [r2, r3]
			meas_inst->a2xyz[i] += a2temp[i];
    2358:	233f      	movs	r3, #63	; 0x3f
    235a:	18fb      	adds	r3, r7, r3
    235c:	781c      	ldrb	r4, [r3, #0]
    235e:	233f      	movs	r3, #63	; 0x3f
    2360:	18fb      	adds	r3, r7, r3
    2362:	781b      	ldrb	r3, [r3, #0]
    2364:	687a      	ldr	r2, [r7, #4]
    2366:	330a      	adds	r3, #10
    2368:	009b      	lsls	r3, r3, #2
    236a:	18d3      	adds	r3, r2, r3
    236c:	3304      	adds	r3, #4
    236e:	6818      	ldr	r0, [r3, #0]
    2370:	233f      	movs	r3, #63	; 0x3f
    2372:	18fb      	adds	r3, r7, r3
    2374:	781a      	ldrb	r2, [r3, #0]
    2376:	2324      	movs	r3, #36	; 0x24
    2378:	18fb      	adds	r3, r7, r3
    237a:	0092      	lsls	r2, r2, #2
    237c:	58d2      	ldr	r2, [r2, r3]
    237e:	4b5f      	ldr	r3, [pc, #380]	; (24fc <full_measurement+0x2cc>)
    2380:	1c11      	adds	r1, r2, #0
    2382:	4798      	blx	r3
    2384:	1c03      	adds	r3, r0, #0
    2386:	1c19      	adds	r1, r3, #0
    2388:	687a      	ldr	r2, [r7, #4]
    238a:	0023      	movs	r3, r4
    238c:	330a      	adds	r3, #10
    238e:	009b      	lsls	r3, r3, #2
    2390:	18d3      	adds	r3, r2, r3
    2392:	3304      	adds	r3, #4
    2394:	6019      	str	r1, [r3, #0]
			meas_inst->c1xyz[i] += c1temp[i];
    2396:	233f      	movs	r3, #63	; 0x3f
    2398:	18fb      	adds	r3, r7, r3
    239a:	781c      	ldrb	r4, [r3, #0]
    239c:	233f      	movs	r3, #63	; 0x3f
    239e:	18fb      	adds	r3, r7, r3
    23a0:	781a      	ldrb	r2, [r3, #0]
    23a2:	687b      	ldr	r3, [r7, #4]
    23a4:	320e      	adds	r2, #14
    23a6:	0092      	lsls	r2, r2, #2
    23a8:	58d0      	ldr	r0, [r2, r3]
    23aa:	233f      	movs	r3, #63	; 0x3f
    23ac:	18fb      	adds	r3, r7, r3
    23ae:	781a      	ldrb	r2, [r3, #0]
    23b0:	2318      	movs	r3, #24
    23b2:	18fb      	adds	r3, r7, r3
    23b4:	0092      	lsls	r2, r2, #2
    23b6:	58d2      	ldr	r2, [r2, r3]
    23b8:	4b50      	ldr	r3, [pc, #320]	; (24fc <full_measurement+0x2cc>)
    23ba:	1c11      	adds	r1, r2, #0
    23bc:	4798      	blx	r3
    23be:	1c03      	adds	r3, r0, #0
    23c0:	1c19      	adds	r1, r3, #0
    23c2:	687b      	ldr	r3, [r7, #4]
    23c4:	0022      	movs	r2, r4
    23c6:	320e      	adds	r2, #14
    23c8:	0092      	lsls	r2, r2, #2
    23ca:	50d1      	str	r1, [r2, r3]
			meas_inst->c2xyz[i] += c2temp[i];
    23cc:	233f      	movs	r3, #63	; 0x3f
    23ce:	18fb      	adds	r3, r7, r3
    23d0:	781c      	ldrb	r4, [r3, #0]
    23d2:	233f      	movs	r3, #63	; 0x3f
    23d4:	18fb      	adds	r3, r7, r3
    23d6:	781b      	ldrb	r3, [r3, #0]
    23d8:	687a      	ldr	r2, [r7, #4]
    23da:	3310      	adds	r3, #16
    23dc:	009b      	lsls	r3, r3, #2
    23de:	18d3      	adds	r3, r2, r3
    23e0:	3304      	adds	r3, #4
    23e2:	6818      	ldr	r0, [r3, #0]
    23e4:	233f      	movs	r3, #63	; 0x3f
    23e6:	18fb      	adds	r3, r7, r3
    23e8:	781a      	ldrb	r2, [r3, #0]
    23ea:	230c      	movs	r3, #12
    23ec:	18fb      	adds	r3, r7, r3
    23ee:	0092      	lsls	r2, r2, #2
    23f0:	58d2      	ldr	r2, [r2, r3]
    23f2:	4b42      	ldr	r3, [pc, #264]	; (24fc <full_measurement+0x2cc>)
    23f4:	1c11      	adds	r1, r2, #0
    23f6:	4798      	blx	r3
    23f8:	1c03      	adds	r3, r0, #0
    23fa:	1c19      	adds	r1, r3, #0
    23fc:	687a      	ldr	r2, [r7, #4]
    23fe:	0023      	movs	r3, r4
    2400:	3310      	adds	r3, #16
    2402:	009b      	lsls	r3, r3, #2
    2404:	18d3      	adds	r3, r2, r3
    2406:	3304      	adds	r3, #4
    2408:	6019      	str	r1, [r3, #0]
		for (i=0;i<3;i++){
    240a:	233f      	movs	r3, #63	; 0x3f
    240c:	18fb      	adds	r3, r7, r3
    240e:	781a      	ldrb	r2, [r3, #0]
    2410:	233f      	movs	r3, #63	; 0x3f
    2412:	18fb      	adds	r3, r7, r3
    2414:	3201      	adds	r2, #1
    2416:	701a      	strb	r2, [r3, #0]
    2418:	233f      	movs	r3, #63	; 0x3f
    241a:	18fb      	adds	r3, r7, r3
    241c:	781b      	ldrb	r3, [r3, #0]
    241e:	2b02      	cmp	r3, #2
    2420:	d800      	bhi.n	2424 <full_measurement+0x1f4>
    2422:	e77e      	b.n	2322 <full_measurement+0xf2>
		}
		meas_inst->samples += 1;
    2424:	687b      	ldr	r3, [r7, #4]
    2426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    2428:	1c5a      	adds	r2, r3, #1
    242a:	687b      	ldr	r3, [r7, #4]
    242c:	651a      	str	r2, [r3, #80]	; 0x50
		
		if (meas_inst->samples > max_samples){
    242e:	687b      	ldr	r3, [r7, #4]
    2430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    2432:	2b64      	cmp	r3, #100	; 0x64
    2434:	d810      	bhi.n	2458 <full_measurement+0x228>
			//usart_abort_job(&usart_laser, USART_TRANSCEIVER_RX);
			break;
		}
		if (isLaserReceiveComplete()){
    2436:	4b32      	ldr	r3, [pc, #200]	; (2500 <full_measurement+0x2d0>)
    2438:	4798      	blx	r3
    243a:	1e03      	subs	r3, r0, #0
    243c:	d100      	bne.n	2440 <full_measurement+0x210>
    243e:	e74f      	b.n	22e0 <full_measurement+0xb0>
			debugLM = laserMessageType();
    2440:	233e      	movs	r3, #62	; 0x3e
    2442:	18fc      	adds	r4, r7, r3
    2444:	4b2f      	ldr	r3, [pc, #188]	; (2504 <full_measurement+0x2d4>)
    2446:	4798      	blx	r3
    2448:	0003      	movs	r3, r0
    244a:	7023      	strb	r3, [r4, #0]
			if(laserMessageType()==SINGLE_MEASUREMENT){
    244c:	4b2d      	ldr	r3, [pc, #180]	; (2504 <full_measurement+0x2d4>)
    244e:	4798      	blx	r3
    2450:	0003      	movs	r3, r0
    2452:	2b44      	cmp	r3, #68	; 0x44
    2454:	d002      	beq.n	245c <full_measurement+0x22c>
		read_accel(&slave_acc1,a1temp);
    2456:	e743      	b.n	22e0 <full_measurement+0xb0>
			break;
    2458:	46c0      	nop			; (mov r8, r8)
    245a:	e000      	b.n	245e <full_measurement+0x22e>
				break;
    245c:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	
	// Parse Laser rangefinder data and populate measurement structure
	laser_parse_buffer(meas_inst);
    245e:	687b      	ldr	r3, [r7, #4]
    2460:	0018      	movs	r0, r3
    2462:	4b29      	ldr	r3, [pc, #164]	; (2508 <full_measurement+0x2d8>)
    2464:	4798      	blx	r3
	if (calibrate_data){
    2466:	1cfb      	adds	r3, r7, #3
    2468:	781b      	ldrb	r3, [r3, #0]
    246a:	2b00      	cmp	r3, #0
    246c:	d00a      	beq.n	2484 <full_measurement+0x254>
		// Note:  Laser rangefinder results always in meters
		//  distance offset is in meters
		meas_inst->distance = meas_inst->distance+dist_calst.dist_offset;
    246e:	687b      	ldr	r3, [r7, #4]
    2470:	69da      	ldr	r2, [r3, #28]
    2472:	4b26      	ldr	r3, [pc, #152]	; (250c <full_measurement+0x2dc>)
    2474:	6d99      	ldr	r1, [r3, #88]	; 0x58
    2476:	4b21      	ldr	r3, [pc, #132]	; (24fc <full_measurement+0x2cc>)
    2478:	1c10      	adds	r0, r2, #0
    247a:	4798      	blx	r3
    247c:	1c03      	adds	r3, r0, #0
    247e:	1c1a      	adds	r2, r3, #0
    2480:	687b      	ldr	r3, [r7, #4]
    2482:	61da      	str	r2, [r3, #28]
	}
	if (options.current_unit_dist == feet){
    2484:	4b0e      	ldr	r3, [pc, #56]	; (24c0 <full_measurement+0x290>)
    2486:	781b      	ldrb	r3, [r3, #0]
    2488:	2b00      	cmp	r3, #0
    248a:	d10f      	bne.n	24ac <full_measurement+0x27c>
		meas_inst->distance = meas_inst->distance * mt2ft;//convert from meters to feet
    248c:	687b      	ldr	r3, [r7, #4]
    248e:	69da      	ldr	r2, [r3, #28]
    2490:	4b1f      	ldr	r3, [pc, #124]	; (2510 <full_measurement+0x2e0>)
    2492:	6819      	ldr	r1, [r3, #0]
    2494:	4b1f      	ldr	r3, [pc, #124]	; (2514 <full_measurement+0x2e4>)
    2496:	1c10      	adds	r0, r2, #0
    2498:	4798      	blx	r3
    249a:	1c03      	adds	r3, r0, #0
    249c:	1c1a      	adds	r2, r3, #0
    249e:	687b      	ldr	r3, [r7, #4]
    24a0:	61da      	str	r2, [r3, #28]
		meas_inst->distance_units = feet;
    24a2:	687b      	ldr	r3, [r7, #4]
    24a4:	2254      	movs	r2, #84	; 0x54
    24a6:	2100      	movs	r1, #0
    24a8:	5499      	strb	r1, [r3, r2]
    24aa:	e003      	b.n	24b4 <full_measurement+0x284>
	}else{
		meas_inst->distance_units = meters;
    24ac:	687b      	ldr	r3, [r7, #4]
    24ae:	2254      	movs	r2, #84	; 0x54
    24b0:	2101      	movs	r1, #1
    24b2:	5499      	strb	r1, [r3, r2]
	}
	
	// Divide measurements by samples for average.
	for (i=0;i<3;i++){
    24b4:	233f      	movs	r3, #63	; 0x3f
    24b6:	18fb      	adds	r3, r7, r3
    24b8:	2200      	movs	r2, #0
    24ba:	701a      	strb	r2, [r3, #0]
    24bc:	e0a7      	b.n	260e <full_measurement+0x3de>
    24be:	46c0      	nop			; (mov r8, r8)
    24c0:	20002eec 	.word	0x20002eec
    24c4:	0000270d 	.word	0x0000270d
    24c8:	00002765 	.word	0x00002765
    24cc:	00015545 	.word	0x00015545
    24d0:	000016f1 	.word	0x000016f1
    24d4:	0000df9d 	.word	0x0000df9d
    24d8:	0000e351 	.word	0x0000e351
    24dc:	200000c0 	.word	0x200000c0
    24e0:	0000e2e5 	.word	0x0000e2e5
    24e4:	20001124 	.word	0x20001124
    24e8:	00002b55 	.word	0x00002b55
    24ec:	20001050 	.word	0x20001050
    24f0:	20001128 	.word	0x20001128
    24f4:	00002dbd 	.word	0x00002dbd
    24f8:	20001018 	.word	0x20001018
    24fc:	0001e461 	.word	0x0001e461
    2500:	0000e33d 	.word	0x0000e33d
    2504:	0000e379 	.word	0x0000e379
    2508:	000027a1 	.word	0x000027a1
    250c:	200042cc 	.word	0x200042cc
    2510:	00025fbc 	.word	0x00025fbc
    2514:	0001eb65 	.word	0x0001eb65
		meas_inst->a1xyz[i] =meas_inst->a1xyz[i] / meas_inst->samples;
    2518:	233f      	movs	r3, #63	; 0x3f
    251a:	18fb      	adds	r3, r7, r3
    251c:	781c      	ldrb	r4, [r3, #0]
    251e:	233f      	movs	r3, #63	; 0x3f
    2520:	18fb      	adds	r3, r7, r3
    2522:	781a      	ldrb	r2, [r3, #0]
    2524:	687b      	ldr	r3, [r7, #4]
    2526:	3208      	adds	r2, #8
    2528:	0092      	lsls	r2, r2, #2
    252a:	58d5      	ldr	r5, [r2, r3]
    252c:	687b      	ldr	r3, [r7, #4]
    252e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    2530:	4b67      	ldr	r3, [pc, #412]	; (26d0 <full_measurement+0x4a0>)
    2532:	0010      	movs	r0, r2
    2534:	4798      	blx	r3
    2536:	1c02      	adds	r2, r0, #0
    2538:	4b66      	ldr	r3, [pc, #408]	; (26d4 <full_measurement+0x4a4>)
    253a:	1c11      	adds	r1, r2, #0
    253c:	1c28      	adds	r0, r5, #0
    253e:	4798      	blx	r3
    2540:	1c03      	adds	r3, r0, #0
    2542:	1c19      	adds	r1, r3, #0
    2544:	687b      	ldr	r3, [r7, #4]
    2546:	0022      	movs	r2, r4
    2548:	3208      	adds	r2, #8
    254a:	0092      	lsls	r2, r2, #2
    254c:	50d1      	str	r1, [r2, r3]
		meas_inst->a2xyz[i] =meas_inst->a2xyz[i] / meas_inst->samples;
    254e:	233f      	movs	r3, #63	; 0x3f
    2550:	18fb      	adds	r3, r7, r3
    2552:	781c      	ldrb	r4, [r3, #0]
    2554:	233f      	movs	r3, #63	; 0x3f
    2556:	18fb      	adds	r3, r7, r3
    2558:	781b      	ldrb	r3, [r3, #0]
    255a:	687a      	ldr	r2, [r7, #4]
    255c:	330a      	adds	r3, #10
    255e:	009b      	lsls	r3, r3, #2
    2560:	18d3      	adds	r3, r2, r3
    2562:	3304      	adds	r3, #4
    2564:	681d      	ldr	r5, [r3, #0]
    2566:	687b      	ldr	r3, [r7, #4]
    2568:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    256a:	4b59      	ldr	r3, [pc, #356]	; (26d0 <full_measurement+0x4a0>)
    256c:	0010      	movs	r0, r2
    256e:	4798      	blx	r3
    2570:	1c02      	adds	r2, r0, #0
    2572:	4b58      	ldr	r3, [pc, #352]	; (26d4 <full_measurement+0x4a4>)
    2574:	1c11      	adds	r1, r2, #0
    2576:	1c28      	adds	r0, r5, #0
    2578:	4798      	blx	r3
    257a:	1c03      	adds	r3, r0, #0
    257c:	1c19      	adds	r1, r3, #0
    257e:	687a      	ldr	r2, [r7, #4]
    2580:	0023      	movs	r3, r4
    2582:	330a      	adds	r3, #10
    2584:	009b      	lsls	r3, r3, #2
    2586:	18d3      	adds	r3, r2, r3
    2588:	3304      	adds	r3, #4
    258a:	6019      	str	r1, [r3, #0]
		meas_inst->c1xyz[i] =meas_inst->c1xyz[i] / meas_inst->samples;
    258c:	233f      	movs	r3, #63	; 0x3f
    258e:	18fb      	adds	r3, r7, r3
    2590:	781c      	ldrb	r4, [r3, #0]
    2592:	233f      	movs	r3, #63	; 0x3f
    2594:	18fb      	adds	r3, r7, r3
    2596:	781a      	ldrb	r2, [r3, #0]
    2598:	687b      	ldr	r3, [r7, #4]
    259a:	320e      	adds	r2, #14
    259c:	0092      	lsls	r2, r2, #2
    259e:	58d5      	ldr	r5, [r2, r3]
    25a0:	687b      	ldr	r3, [r7, #4]
    25a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    25a4:	4b4a      	ldr	r3, [pc, #296]	; (26d0 <full_measurement+0x4a0>)
    25a6:	0010      	movs	r0, r2
    25a8:	4798      	blx	r3
    25aa:	1c02      	adds	r2, r0, #0
    25ac:	4b49      	ldr	r3, [pc, #292]	; (26d4 <full_measurement+0x4a4>)
    25ae:	1c11      	adds	r1, r2, #0
    25b0:	1c28      	adds	r0, r5, #0
    25b2:	4798      	blx	r3
    25b4:	1c03      	adds	r3, r0, #0
    25b6:	1c19      	adds	r1, r3, #0
    25b8:	687b      	ldr	r3, [r7, #4]
    25ba:	0022      	movs	r2, r4
    25bc:	320e      	adds	r2, #14
    25be:	0092      	lsls	r2, r2, #2
    25c0:	50d1      	str	r1, [r2, r3]
		meas_inst->c2xyz[i] =meas_inst->c2xyz[i] / meas_inst->samples;
    25c2:	233f      	movs	r3, #63	; 0x3f
    25c4:	18fb      	adds	r3, r7, r3
    25c6:	781c      	ldrb	r4, [r3, #0]
    25c8:	233f      	movs	r3, #63	; 0x3f
    25ca:	18fb      	adds	r3, r7, r3
    25cc:	781b      	ldrb	r3, [r3, #0]
    25ce:	687a      	ldr	r2, [r7, #4]
    25d0:	3310      	adds	r3, #16
    25d2:	009b      	lsls	r3, r3, #2
    25d4:	18d3      	adds	r3, r2, r3
    25d6:	3304      	adds	r3, #4
    25d8:	681d      	ldr	r5, [r3, #0]
    25da:	687b      	ldr	r3, [r7, #4]
    25dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    25de:	4b3c      	ldr	r3, [pc, #240]	; (26d0 <full_measurement+0x4a0>)
    25e0:	0010      	movs	r0, r2
    25e2:	4798      	blx	r3
    25e4:	1c02      	adds	r2, r0, #0
    25e6:	4b3b      	ldr	r3, [pc, #236]	; (26d4 <full_measurement+0x4a4>)
    25e8:	1c11      	adds	r1, r2, #0
    25ea:	1c28      	adds	r0, r5, #0
    25ec:	4798      	blx	r3
    25ee:	1c03      	adds	r3, r0, #0
    25f0:	1c19      	adds	r1, r3, #0
    25f2:	687a      	ldr	r2, [r7, #4]
    25f4:	0023      	movs	r3, r4
    25f6:	3310      	adds	r3, #16
    25f8:	009b      	lsls	r3, r3, #2
    25fa:	18d3      	adds	r3, r2, r3
    25fc:	3304      	adds	r3, #4
    25fe:	6019      	str	r1, [r3, #0]
	for (i=0;i<3;i++){
    2600:	233f      	movs	r3, #63	; 0x3f
    2602:	18fb      	adds	r3, r7, r3
    2604:	781a      	ldrb	r2, [r3, #0]
    2606:	233f      	movs	r3, #63	; 0x3f
    2608:	18fb      	adds	r3, r7, r3
    260a:	3201      	adds	r2, #1
    260c:	701a      	strb	r2, [r3, #0]
    260e:	233f      	movs	r3, #63	; 0x3f
    2610:	18fb      	adds	r3, r7, r3
    2612:	781b      	ldrb	r3, [r3, #0]
    2614:	2b02      	cmp	r3, #2
    2616:	d800      	bhi.n	261a <full_measurement+0x3ea>
    2618:	e77e      	b.n	2518 <full_measurement+0x2e8>
	}
	//  Calibrate Results
	if (calibrate_data){
    261a:	1cfb      	adds	r3, r7, #3
    261c:	781b      	ldrb	r3, [r3, #0]
    261e:	2b00      	cmp	r3, #0
    2620:	d023      	beq.n	266a <full_measurement+0x43a>
		cal_apply_cal(meas_inst->a1xyz, meas_inst->a1xyz, &a1_calst);
    2622:	687b      	ldr	r3, [r7, #4]
    2624:	3320      	adds	r3, #32
    2626:	0018      	movs	r0, r3
    2628:	687b      	ldr	r3, [r7, #4]
    262a:	3320      	adds	r3, #32
    262c:	4a2a      	ldr	r2, [pc, #168]	; (26d8 <full_measurement+0x4a8>)
    262e:	0019      	movs	r1, r3
    2630:	4b2a      	ldr	r3, [pc, #168]	; (26dc <full_measurement+0x4ac>)
    2632:	4798      	blx	r3
		cal_apply_cal(meas_inst->a2xyz, meas_inst->a2xyz, &a2_calst);
    2634:	687b      	ldr	r3, [r7, #4]
    2636:	332c      	adds	r3, #44	; 0x2c
    2638:	0018      	movs	r0, r3
    263a:	687b      	ldr	r3, [r7, #4]
    263c:	332c      	adds	r3, #44	; 0x2c
    263e:	4a28      	ldr	r2, [pc, #160]	; (26e0 <full_measurement+0x4b0>)
    2640:	0019      	movs	r1, r3
    2642:	4b26      	ldr	r3, [pc, #152]	; (26dc <full_measurement+0x4ac>)
    2644:	4798      	blx	r3
		cal_apply_cal(meas_inst->c1xyz, meas_inst->c1xyz, &c1_calst);
    2646:	687b      	ldr	r3, [r7, #4]
    2648:	3338      	adds	r3, #56	; 0x38
    264a:	0018      	movs	r0, r3
    264c:	687b      	ldr	r3, [r7, #4]
    264e:	3338      	adds	r3, #56	; 0x38
    2650:	4a24      	ldr	r2, [pc, #144]	; (26e4 <full_measurement+0x4b4>)
    2652:	0019      	movs	r1, r3
    2654:	4b21      	ldr	r3, [pc, #132]	; (26dc <full_measurement+0x4ac>)
    2656:	4798      	blx	r3
		cal_apply_cal(meas_inst->c2xyz, meas_inst->c2xyz, &c2_calst);
    2658:	687b      	ldr	r3, [r7, #4]
    265a:	3344      	adds	r3, #68	; 0x44
    265c:	0018      	movs	r0, r3
    265e:	687b      	ldr	r3, [r7, #4]
    2660:	3344      	adds	r3, #68	; 0x44
    2662:	4a21      	ldr	r2, [pc, #132]	; (26e8 <full_measurement+0x4b8>)
    2664:	0019      	movs	r1, r3
    2666:	4b1d      	ldr	r3, [pc, #116]	; (26dc <full_measurement+0x4ac>)
    2668:	4798      	blx	r3
		
	}	
	// Calculate inclination and compass readings
	calc_orientation(meas_inst);
    266a:	687b      	ldr	r3, [r7, #4]
    266c:	0018      	movs	r0, r3
    266e:	4b1f      	ldr	r3, [pc, #124]	; (26ec <full_measurement+0x4bc>)
    2670:	4798      	blx	r3
	
	// Perform Error Checking
	if (calibrate_data){//  Only perform error checking if data is calibrated
    2672:	1cfb      	adds	r3, r7, #3
    2674:	781b      	ldrb	r3, [r3, #0]
    2676:	2b00      	cmp	r3, #0
    2678:	d003      	beq.n	2682 <full_measurement+0x452>
		error_check(meas_inst);
    267a:	687b      	ldr	r3, [r7, #4]
    267c:	0018      	movs	r0, r3
    267e:	4b1c      	ldr	r3, [pc, #112]	; (26f0 <full_measurement+0x4c0>)
    2680:	4798      	blx	r3
	}
	
	
	// Add Time-Stamp
	get_time();
    2682:	4b1c      	ldr	r3, [pc, #112]	; (26f4 <full_measurement+0x4c4>)
    2684:	4798      	blx	r3
	meas_inst->posix_time = gen_posix_time(&current_time);// Save POSIX time
    2686:	4b1c      	ldr	r3, [pc, #112]	; (26f8 <full_measurement+0x4c8>)
    2688:	0018      	movs	r0, r3
    268a:	4b1c      	ldr	r3, [pc, #112]	; (26fc <full_measurement+0x4cc>)
    268c:	4798      	blx	r3
    268e:	0002      	movs	r2, r0
    2690:	687b      	ldr	r3, [r7, #4]
    2692:	605a      	str	r2, [r3, #4]
	
	//  Add Temperature
	if (options.current_unit_temp == celsius){
    2694:	4b1a      	ldr	r3, [pc, #104]	; (2700 <full_measurement+0x4d0>)
    2696:	785b      	ldrb	r3, [r3, #1]
    2698:	2b04      	cmp	r3, #4
    269a:	d108      	bne.n	26ae <full_measurement+0x47e>
		meas_inst->temperature = current_time.temperatureC;
    269c:	4b16      	ldr	r3, [pc, #88]	; (26f8 <full_measurement+0x4c8>)
    269e:	68da      	ldr	r2, [r3, #12]
    26a0:	687b      	ldr	r3, [r7, #4]
    26a2:	609a      	str	r2, [r3, #8]
		meas_inst->temp_units = celsius;
    26a4:	687b      	ldr	r3, [r7, #4]
    26a6:	2255      	movs	r2, #85	; 0x55
    26a8:	2104      	movs	r1, #4
    26aa:	5499      	strb	r1, [r3, r2]
    26ac:	e007      	b.n	26be <full_measurement+0x48e>
	}else{
		meas_inst->temperature = current_time.temperatureF;
    26ae:	4b12      	ldr	r3, [pc, #72]	; (26f8 <full_measurement+0x4c8>)
    26b0:	691a      	ldr	r2, [r3, #16]
    26b2:	687b      	ldr	r3, [r7, #4]
    26b4:	609a      	str	r2, [r3, #8]
		meas_inst->temp_units = fahrenheit;
    26b6:	687b      	ldr	r3, [r7, #4]
    26b8:	2255      	movs	r2, #85	; 0x55
    26ba:	2105      	movs	r1, #5
    26bc:	5499      	strb	r1, [r3, r2]
	}	
	
	//  Turn backlight back on
	backlightOn();
    26be:	4b11      	ldr	r3, [pc, #68]	; (2704 <full_measurement+0x4d4>)
    26c0:	4798      	blx	r3
	//  Configure SPI to speak to LCD	
	config_spi(LCD);	
    26c2:	2000      	movs	r0, #0
    26c4:	4b10      	ldr	r3, [pc, #64]	; (2708 <full_measurement+0x4d8>)
    26c6:	4798      	blx	r3
}
    26c8:	46c0      	nop			; (mov r8, r8)
    26ca:	46bd      	mov	sp, r7
    26cc:	b010      	add	sp, #64	; 0x40
    26ce:	bdb0      	pop	{r4, r5, r7, pc}
    26d0:	0001f1bd 	.word	0x0001f1bd
    26d4:	0001e785 	.word	0x0001e785
    26d8:	2000497c 	.word	0x2000497c
    26dc:	0000bfe9 	.word	0x0000bfe9
    26e0:	20004558 	.word	0x20004558
    26e4:	20002e78 	.word	0x20002e78
    26e8:	20001df0 	.word	0x20001df0
    26ec:	00009e35 	.word	0x00009e35
    26f0:	000031f9 	.word	0x000031f9
    26f4:	0000e6e5 	.word	0x0000e6e5
    26f8:	2000103c 	.word	0x2000103c
    26fc:	0000e8b9 	.word	0x0000e8b9
    2700:	20002eec 	.word	0x20002eec
    2704:	00001441 	.word	0x00001441
    2708:	0000df9d 	.word	0x0000df9d

0000270c <laser_delay>:


void laser_delay(uint8_t shot_delay){
    270c:	b580      	push	{r7, lr}
    270e:	b084      	sub	sp, #16
    2710:	af00      	add	r7, sp, #0
    2712:	0002      	movs	r2, r0
    2714:	1dfb      	adds	r3, r7, #7
    2716:	701a      	strb	r2, [r3, #0]
	uint8_t delay_count = 0;
    2718:	230f      	movs	r3, #15
    271a:	18fb      	adds	r3, r7, r3
    271c:	2200      	movs	r2, #0
    271e:	701a      	strb	r2, [r3, #0]
	for (delay_count=0;delay_count<shot_delay;delay_count ++){
    2720:	230f      	movs	r3, #15
    2722:	18fb      	adds	r3, r7, r3
    2724:	2200      	movs	r2, #0
    2726:	701a      	strb	r2, [r3, #0]
    2728:	e00d      	b.n	2746 <laser_delay+0x3a>
		laser_beep();
    272a:	4b0c      	ldr	r3, [pc, #48]	; (275c <laser_delay+0x50>)
    272c:	4798      	blx	r3
		delay_ms(900);
    272e:	23e1      	movs	r3, #225	; 0xe1
    2730:	009b      	lsls	r3, r3, #2
    2732:	0018      	movs	r0, r3
    2734:	4b0a      	ldr	r3, [pc, #40]	; (2760 <laser_delay+0x54>)
    2736:	4798      	blx	r3
	for (delay_count=0;delay_count<shot_delay;delay_count ++){
    2738:	230f      	movs	r3, #15
    273a:	18fb      	adds	r3, r7, r3
    273c:	781a      	ldrb	r2, [r3, #0]
    273e:	230f      	movs	r3, #15
    2740:	18fb      	adds	r3, r7, r3
    2742:	3201      	adds	r2, #1
    2744:	701a      	strb	r2, [r3, #0]
    2746:	230f      	movs	r3, #15
    2748:	18fa      	adds	r2, r7, r3
    274a:	1dfb      	adds	r3, r7, #7
    274c:	7812      	ldrb	r2, [r2, #0]
    274e:	781b      	ldrb	r3, [r3, #0]
    2750:	429a      	cmp	r2, r3
    2752:	d3ea      	bcc.n	272a <laser_delay+0x1e>
	}
	

}
    2754:	46c0      	nop			; (mov r8, r8)
    2756:	46bd      	mov	sp, r7
    2758:	b004      	add	sp, #16
    275a:	bd80      	pop	{r7, pc}
    275c:	00002765 	.word	0x00002765
    2760:	00015545 	.word	0x00015545

00002764 <laser_beep>:

void laser_beep(void){
    2764:	b580      	push	{r7, lr}
    2766:	af00      	add	r7, sp, #0
	
	rxBufferLaserClear();
    2768:	4b09      	ldr	r3, [pc, #36]	; (2790 <laser_beep+0x2c>)
    276a:	4798      	blx	r3
	writeLaser(cmd_beep_on, sizeof(cmd_beep_on));
    276c:	4b09      	ldr	r3, [pc, #36]	; (2794 <laser_beep+0x30>)
    276e:	2106      	movs	r1, #6
    2770:	0018      	movs	r0, r3
    2772:	4b09      	ldr	r3, [pc, #36]	; (2798 <laser_beep+0x34>)
    2774:	4798      	blx	r3
	//  Wait for laser to finish sending beep response .
	while(!isLaserReceiveComplete());
    2776:	46c0      	nop			; (mov r8, r8)
    2778:	4b08      	ldr	r3, [pc, #32]	; (279c <laser_beep+0x38>)
    277a:	4798      	blx	r3
    277c:	0003      	movs	r3, r0
    277e:	001a      	movs	r2, r3
    2780:	2301      	movs	r3, #1
    2782:	4053      	eors	r3, r2
    2784:	b2db      	uxtb	r3, r3
    2786:	2b00      	cmp	r3, #0
    2788:	d1f6      	bne.n	2778 <laser_beep+0x14>
}
    278a:	46c0      	nop			; (mov r8, r8)
    278c:	46bd      	mov	sp, r7
    278e:	bd80      	pop	{r7, pc}
    2790:	0000e351 	.word	0x0000e351
    2794:	200000c8 	.word	0x200000c8
    2798:	0000e2e5 	.word	0x0000e2e5
    279c:	0000e33d 	.word	0x0000e33d

000027a0 <laser_parse_buffer>:




void laser_parse_buffer(struct MEASUREMENT *meas_inst){
    27a0:	b590      	push	{r4, r7, lr}
    27a2:	b087      	sub	sp, #28
    27a4:	af00      	add	r7, sp, #0
    27a6:	6078      	str	r0, [r7, #4]
	uint32_t mult, temp1, temp_err;
	uint8_t mask = 0x0F;
    27a8:	230d      	movs	r3, #13
    27aa:	18fb      	adds	r3, r7, r3
    27ac:	220f      	movs	r2, #15
    27ae:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	uint8_t AA_index;
	
	
	AA_index=0;
    27b0:	230e      	movs	r3, #14
    27b2:	18fb      	adds	r3, r7, r3
    27b4:	2200      	movs	r2, #0
    27b6:	701a      	strb	r2, [r3, #0]
	for (i=0; i<sizeof(rxBufferLaser); i++){
    27b8:	230f      	movs	r3, #15
    27ba:	18fb      	adds	r3, r7, r3
    27bc:	2200      	movs	r2, #0
    27be:	701a      	strb	r2, [r3, #0]
    27c0:	e015      	b.n	27ee <laser_parse_buffer+0x4e>
		if(rxBufferLaser[i]==0xAA){
    27c2:	230f      	movs	r3, #15
    27c4:	18fb      	adds	r3, r7, r3
    27c6:	781b      	ldrb	r3, [r3, #0]
    27c8:	4aa5      	ldr	r2, [pc, #660]	; (2a60 <laser_parse_buffer+0x2c0>)
    27ca:	5cd3      	ldrb	r3, [r2, r3]
    27cc:	b2db      	uxtb	r3, r3
    27ce:	2baa      	cmp	r3, #170	; 0xaa
    27d0:	d106      	bne.n	27e0 <laser_parse_buffer+0x40>
			AA_index=i;
    27d2:	230e      	movs	r3, #14
    27d4:	18fb      	adds	r3, r7, r3
    27d6:	220f      	movs	r2, #15
    27d8:	18ba      	adds	r2, r7, r2
    27da:	7812      	ldrb	r2, [r2, #0]
    27dc:	701a      	strb	r2, [r3, #0]
			break;
    27de:	e00b      	b.n	27f8 <laser_parse_buffer+0x58>
	for (i=0; i<sizeof(rxBufferLaser); i++){
    27e0:	230f      	movs	r3, #15
    27e2:	18fb      	adds	r3, r7, r3
    27e4:	781a      	ldrb	r2, [r3, #0]
    27e6:	230f      	movs	r3, #15
    27e8:	18fb      	adds	r3, r7, r3
    27ea:	3201      	adds	r2, #1
    27ec:	701a      	strb	r2, [r3, #0]
    27ee:	230f      	movs	r3, #15
    27f0:	18fb      	adds	r3, r7, r3
    27f2:	781b      	ldrb	r3, [r3, #0]
    27f4:	2b13      	cmp	r3, #19
    27f6:	d9e4      	bls.n	27c2 <laser_parse_buffer+0x22>
		}
	}
	
	//parse data
	if(i==sizeof(rxBufferLaser)){//No 0xAA initiate message, pattern error
    27f8:	230f      	movs	r3, #15
    27fa:	18fb      	adds	r3, r7, r3
    27fc:	781b      	ldrb	r3, [r3, #0]
    27fe:	2b14      	cmp	r3, #20
    2800:	d118      	bne.n	2834 <laser_parse_buffer+0x94>
		meas_inst->measurement_error[meas_inst->num_errors] = laser_pattern_error; 		
    2802:	687b      	ldr	r3, [r7, #4]
    2804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    2806:	687a      	ldr	r2, [r7, #4]
    2808:	215c      	movs	r1, #92	; 0x5c
    280a:	18d3      	adds	r3, r2, r3
    280c:	185b      	adds	r3, r3, r1
    280e:	220a      	movs	r2, #10
    2810:	701a      	strb	r2, [r3, #0]
		meas_inst->measurement_error_data1[meas_inst->num_errors] = 0;
    2812:	687b      	ldr	r3, [r7, #4]
    2814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    2816:	687a      	ldr	r2, [r7, #4]
    2818:	3318      	adds	r3, #24
    281a:	009b      	lsls	r3, r3, #2
    281c:	18d3      	adds	r3, r2, r3
    281e:	3304      	adds	r3, #4
    2820:	2200      	movs	r2, #0
    2822:	601a      	str	r2, [r3, #0]
		increment_error_count(meas_inst);
    2824:	687b      	ldr	r3, [r7, #4]
    2826:	0018      	movs	r0, r3
    2828:	4b8e      	ldr	r3, [pc, #568]	; (2a64 <laser_parse_buffer+0x2c4>)
    282a:	4798      	blx	r3
		meas_inst->distance = 0;
    282c:	687b      	ldr	r3, [r7, #4]
    282e:	2200      	movs	r2, #0
    2830:	61da      	str	r2, [r3, #28]
		return;
    2832:	e111      	b.n	2a58 <laser_parse_buffer+0x2b8>
	}else if(meas_inst->samples > max_samples){//timeout error
    2834:	687b      	ldr	r3, [r7, #4]
    2836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    2838:	2b64      	cmp	r3, #100	; 0x64
    283a:	d91e      	bls.n	287a <laser_parse_buffer+0xda>
		meas_inst->measurement_error[meas_inst->num_errors] = laser_response_timeout;
    283c:	687b      	ldr	r3, [r7, #4]
    283e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    2840:	687a      	ldr	r2, [r7, #4]
    2842:	215c      	movs	r1, #92	; 0x5c
    2844:	18d3      	adds	r3, r2, r3
    2846:	185b      	adds	r3, r3, r1
    2848:	220b      	movs	r2, #11
    284a:	701a      	strb	r2, [r3, #0]
		meas_inst->measurement_error_data1[meas_inst->num_errors] = meas_inst->samples;
    284c:	687b      	ldr	r3, [r7, #4]
    284e:	6d9c      	ldr	r4, [r3, #88]	; 0x58
    2850:	687b      	ldr	r3, [r7, #4]
    2852:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    2854:	4b84      	ldr	r3, [pc, #528]	; (2a68 <laser_parse_buffer+0x2c8>)
    2856:	0010      	movs	r0, r2
    2858:	4798      	blx	r3
    285a:	1c01      	adds	r1, r0, #0
    285c:	687a      	ldr	r2, [r7, #4]
    285e:	0023      	movs	r3, r4
    2860:	3318      	adds	r3, #24
    2862:	009b      	lsls	r3, r3, #2
    2864:	18d3      	adds	r3, r2, r3
    2866:	3304      	adds	r3, #4
    2868:	6019      	str	r1, [r3, #0]
		increment_error_count(meas_inst);
    286a:	687b      	ldr	r3, [r7, #4]
    286c:	0018      	movs	r0, r3
    286e:	4b7d      	ldr	r3, [pc, #500]	; (2a64 <laser_parse_buffer+0x2c4>)
    2870:	4798      	blx	r3
		meas_inst->distance = 0;
    2872:	687b      	ldr	r3, [r7, #4]
    2874:	2200      	movs	r2, #0
    2876:	61da      	str	r2, [r3, #28]
		return;
    2878:	e0ee      	b.n	2a58 <laser_parse_buffer+0x2b8>
	}else if(rxBufferLaser[AA_index+2]!=0x44){
    287a:	230e      	movs	r3, #14
    287c:	18fb      	adds	r3, r7, r3
    287e:	781b      	ldrb	r3, [r3, #0]
    2880:	3302      	adds	r3, #2
    2882:	4a77      	ldr	r2, [pc, #476]	; (2a60 <laser_parse_buffer+0x2c0>)
    2884:	5cd3      	ldrb	r3, [r2, r3]
    2886:	b2db      	uxtb	r3, r3
    2888:	2b44      	cmp	r3, #68	; 0x44
    288a:	d023      	beq.n	28d4 <laser_parse_buffer+0x134>
		meas_inst->measurement_error[meas_inst->num_errors] = laser_wrong_message;
    288c:	687b      	ldr	r3, [r7, #4]
    288e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    2890:	687a      	ldr	r2, [r7, #4]
    2892:	215c      	movs	r1, #92	; 0x5c
    2894:	18d3      	adds	r3, r2, r3
    2896:	185b      	adds	r3, r3, r1
    2898:	220d      	movs	r2, #13
    289a:	701a      	strb	r2, [r3, #0]
		meas_inst->measurement_error_data1[meas_inst->num_errors] = rxBufferLaser[AA_index+2];
    289c:	687b      	ldr	r3, [r7, #4]
    289e:	6d9c      	ldr	r4, [r3, #88]	; 0x58
    28a0:	230e      	movs	r3, #14
    28a2:	18fb      	adds	r3, r7, r3
    28a4:	781b      	ldrb	r3, [r3, #0]
    28a6:	3302      	adds	r3, #2
    28a8:	4a6d      	ldr	r2, [pc, #436]	; (2a60 <laser_parse_buffer+0x2c0>)
    28aa:	5cd3      	ldrb	r3, [r2, r3]
    28ac:	b2da      	uxtb	r2, r3
    28ae:	4b6e      	ldr	r3, [pc, #440]	; (2a68 <laser_parse_buffer+0x2c8>)
    28b0:	0010      	movs	r0, r2
    28b2:	4798      	blx	r3
    28b4:	1c01      	adds	r1, r0, #0
    28b6:	687a      	ldr	r2, [r7, #4]
    28b8:	0023      	movs	r3, r4
    28ba:	3318      	adds	r3, #24
    28bc:	009b      	lsls	r3, r3, #2
    28be:	18d3      	adds	r3, r2, r3
    28c0:	3304      	adds	r3, #4
    28c2:	6019      	str	r1, [r3, #0]
		increment_error_count(meas_inst);
    28c4:	687b      	ldr	r3, [r7, #4]
    28c6:	0018      	movs	r0, r3
    28c8:	4b66      	ldr	r3, [pc, #408]	; (2a64 <laser_parse_buffer+0x2c4>)
    28ca:	4798      	blx	r3
		meas_inst->distance = 0;
    28cc:	687b      	ldr	r3, [r7, #4]
    28ce:	2200      	movs	r2, #0
    28d0:	61da      	str	r2, [r3, #28]
		return;		
    28d2:	e0c1      	b.n	2a58 <laser_parse_buffer+0x2b8>
	}else if (rxBufferLaser[AA_index+3]=='E'){//rangefinder generated error
    28d4:	230e      	movs	r3, #14
    28d6:	18fb      	adds	r3, r7, r3
    28d8:	781b      	ldrb	r3, [r3, #0]
    28da:	3303      	adds	r3, #3
    28dc:	4a60      	ldr	r2, [pc, #384]	; (2a60 <laser_parse_buffer+0x2c0>)
    28de:	5cd3      	ldrb	r3, [r2, r3]
    28e0:	b2db      	uxtb	r3, r3
    28e2:	2b45      	cmp	r3, #69	; 0x45
    28e4:	d16e      	bne.n	29c4 <laser_parse_buffer+0x224>
		temp_err = 0;
    28e6:	2300      	movs	r3, #0
    28e8:	613b      	str	r3, [r7, #16]
		mult=100;
    28ea:	2364      	movs	r3, #100	; 0x64
    28ec:	617b      	str	r3, [r7, #20]
		for(i=6; i<9; i++){
    28ee:	230f      	movs	r3, #15
    28f0:	18fb      	adds	r3, r7, r3
    28f2:	2206      	movs	r2, #6
    28f4:	701a      	strb	r2, [r3, #0]
    28f6:	e023      	b.n	2940 <laser_parse_buffer+0x1a0>
			temp1 = rxBufferLaser[AA_index+i] & mask;
    28f8:	230e      	movs	r3, #14
    28fa:	18fb      	adds	r3, r7, r3
    28fc:	781a      	ldrb	r2, [r3, #0]
    28fe:	230f      	movs	r3, #15
    2900:	18fb      	adds	r3, r7, r3
    2902:	781b      	ldrb	r3, [r3, #0]
    2904:	18d3      	adds	r3, r2, r3
    2906:	4a56      	ldr	r2, [pc, #344]	; (2a60 <laser_parse_buffer+0x2c0>)
    2908:	5cd3      	ldrb	r3, [r2, r3]
    290a:	b2db      	uxtb	r3, r3
    290c:	220d      	movs	r2, #13
    290e:	18ba      	adds	r2, r7, r2
    2910:	7812      	ldrb	r2, [r2, #0]
    2912:	4013      	ands	r3, r2
    2914:	b2db      	uxtb	r3, r3
    2916:	60bb      	str	r3, [r7, #8]
			temp_err = temp_err + temp1*mult;
    2918:	68bb      	ldr	r3, [r7, #8]
    291a:	697a      	ldr	r2, [r7, #20]
    291c:	4353      	muls	r3, r2
    291e:	693a      	ldr	r2, [r7, #16]
    2920:	18d3      	adds	r3, r2, r3
    2922:	613b      	str	r3, [r7, #16]
			mult=mult/10;
    2924:	697a      	ldr	r2, [r7, #20]
    2926:	4b51      	ldr	r3, [pc, #324]	; (2a6c <laser_parse_buffer+0x2cc>)
    2928:	210a      	movs	r1, #10
    292a:	0010      	movs	r0, r2
    292c:	4798      	blx	r3
    292e:	0003      	movs	r3, r0
    2930:	617b      	str	r3, [r7, #20]
		for(i=6; i<9; i++){
    2932:	230f      	movs	r3, #15
    2934:	18fb      	adds	r3, r7, r3
    2936:	781a      	ldrb	r2, [r3, #0]
    2938:	230f      	movs	r3, #15
    293a:	18fb      	adds	r3, r7, r3
    293c:	3201      	adds	r2, #1
    293e:	701a      	strb	r2, [r3, #0]
    2940:	230f      	movs	r3, #15
    2942:	18fb      	adds	r3, r7, r3
    2944:	781b      	ldrb	r3, [r3, #0]
    2946:	2b08      	cmp	r3, #8
    2948:	d9d6      	bls.n	28f8 <laser_parse_buffer+0x158>
		}
		switch (temp_err){
    294a:	693b      	ldr	r3, [r7, #16]
    294c:	2bff      	cmp	r3, #255	; 0xff
    294e:	d00e      	beq.n	296e <laser_parse_buffer+0x1ce>
    2950:	2280      	movs	r2, #128	; 0x80
    2952:	0052      	lsls	r2, r2, #1
    2954:	4293      	cmp	r3, r2
    2956:	d013      	beq.n	2980 <laser_parse_buffer+0x1e0>
    2958:	2bcc      	cmp	r3, #204	; 0xcc
    295a:	d11a      	bne.n	2992 <laser_parse_buffer+0x1f2>
			case 204:
				meas_inst->measurement_error[meas_inst->num_errors] = laser_calc_err;
    295c:	687b      	ldr	r3, [r7, #4]
    295e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    2960:	687a      	ldr	r2, [r7, #4]
    2962:	215c      	movs	r1, #92	; 0x5c
    2964:	18d3      	adds	r3, r2, r3
    2966:	185b      	adds	r3, r3, r1
    2968:	2207      	movs	r2, #7
    296a:	701a      	strb	r2, [r3, #0]
			break;
    296c:	e019      	b.n	29a2 <laser_parse_buffer+0x202>
			case 255:
				meas_inst->measurement_error[meas_inst->num_errors] = laser_weak_signal;
    296e:	687b      	ldr	r3, [r7, #4]
    2970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    2972:	687a      	ldr	r2, [r7, #4]
    2974:	215c      	movs	r1, #92	; 0x5c
    2976:	18d3      	adds	r3, r2, r3
    2978:	185b      	adds	r3, r3, r1
    297a:	2208      	movs	r2, #8
    297c:	701a      	strb	r2, [r3, #0]
			break;
    297e:	e010      	b.n	29a2 <laser_parse_buffer+0x202>
			case 256:
				meas_inst->measurement_error[meas_inst->num_errors] = laser_strong_signal;
    2980:	687b      	ldr	r3, [r7, #4]
    2982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    2984:	687a      	ldr	r2, [r7, #4]
    2986:	215c      	movs	r1, #92	; 0x5c
    2988:	18d3      	adds	r3, r2, r3
    298a:	185b      	adds	r3, r3, r1
    298c:	2209      	movs	r2, #9
    298e:	701a      	strb	r2, [r3, #0]
			break;
    2990:	e007      	b.n	29a2 <laser_parse_buffer+0x202>
			default:
				meas_inst->measurement_error[meas_inst->num_errors] = laser_unknown;
    2992:	687b      	ldr	r3, [r7, #4]
    2994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    2996:	687a      	ldr	r2, [r7, #4]
    2998:	215c      	movs	r1, #92	; 0x5c
    299a:	18d3      	adds	r3, r2, r3
    299c:	185b      	adds	r3, r3, r1
    299e:	220c      	movs	r2, #12
    29a0:	701a      	strb	r2, [r3, #0]
		}
		meas_inst->measurement_error_data1[meas_inst->num_errors] = 0;
    29a2:	687b      	ldr	r3, [r7, #4]
    29a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    29a6:	687a      	ldr	r2, [r7, #4]
    29a8:	3318      	adds	r3, #24
    29aa:	009b      	lsls	r3, r3, #2
    29ac:	18d3      	adds	r3, r2, r3
    29ae:	3304      	adds	r3, #4
    29b0:	2200      	movs	r2, #0
    29b2:	601a      	str	r2, [r3, #0]
		increment_error_count(meas_inst);
    29b4:	687b      	ldr	r3, [r7, #4]
    29b6:	0018      	movs	r0, r3
    29b8:	4b2a      	ldr	r3, [pc, #168]	; (2a64 <laser_parse_buffer+0x2c4>)
    29ba:	4798      	blx	r3
		meas_inst->distance = 0;
    29bc:	687b      	ldr	r3, [r7, #4]
    29be:	2200      	movs	r2, #0
    29c0:	61da      	str	r2, [r3, #28]
		return;
    29c2:	e049      	b.n	2a58 <laser_parse_buffer+0x2b8>
	}else{
		//  No error, proceed with parsing string into distance measurement
		mult = 100000;
    29c4:	4b2a      	ldr	r3, [pc, #168]	; (2a70 <laser_parse_buffer+0x2d0>)
    29c6:	617b      	str	r3, [r7, #20]
		temp1=0;
    29c8:	2300      	movs	r3, #0
    29ca:	60bb      	str	r3, [r7, #8]
		meas_inst->distance = 0;
    29cc:	687b      	ldr	r3, [r7, #4]
    29ce:	2200      	movs	r2, #0
    29d0:	61da      	str	r2, [r3, #28]
		for(i=3; i<9; i++){
    29d2:	230f      	movs	r3, #15
    29d4:	18fb      	adds	r3, r7, r3
    29d6:	2203      	movs	r2, #3
    29d8:	701a      	strb	r2, [r3, #0]
    29da:	e02e      	b.n	2a3a <laser_parse_buffer+0x29a>
			temp1=rxBufferLaser[AA_index+i] & mask;
    29dc:	230e      	movs	r3, #14
    29de:	18fb      	adds	r3, r7, r3
    29e0:	781a      	ldrb	r2, [r3, #0]
    29e2:	230f      	movs	r3, #15
    29e4:	18fb      	adds	r3, r7, r3
    29e6:	781b      	ldrb	r3, [r3, #0]
    29e8:	18d3      	adds	r3, r2, r3
    29ea:	4a1d      	ldr	r2, [pc, #116]	; (2a60 <laser_parse_buffer+0x2c0>)
    29ec:	5cd3      	ldrb	r3, [r2, r3]
    29ee:	b2db      	uxtb	r3, r3
    29f0:	220d      	movs	r2, #13
    29f2:	18ba      	adds	r2, r7, r2
    29f4:	7812      	ldrb	r2, [r2, #0]
    29f6:	4013      	ands	r3, r2
    29f8:	b2db      	uxtb	r3, r3
    29fa:	60bb      	str	r3, [r7, #8]
			meas_inst->distance=meas_inst->distance + temp1*mult;
    29fc:	687b      	ldr	r3, [r7, #4]
    29fe:	69dc      	ldr	r4, [r3, #28]
    2a00:	68bb      	ldr	r3, [r7, #8]
    2a02:	697a      	ldr	r2, [r7, #20]
    2a04:	435a      	muls	r2, r3
    2a06:	4b18      	ldr	r3, [pc, #96]	; (2a68 <laser_parse_buffer+0x2c8>)
    2a08:	0010      	movs	r0, r2
    2a0a:	4798      	blx	r3
    2a0c:	1c02      	adds	r2, r0, #0
    2a0e:	4b19      	ldr	r3, [pc, #100]	; (2a74 <laser_parse_buffer+0x2d4>)
    2a10:	1c11      	adds	r1, r2, #0
    2a12:	1c20      	adds	r0, r4, #0
    2a14:	4798      	blx	r3
    2a16:	1c03      	adds	r3, r0, #0
    2a18:	1c1a      	adds	r2, r3, #0
    2a1a:	687b      	ldr	r3, [r7, #4]
    2a1c:	61da      	str	r2, [r3, #28]
			mult=mult/10;
    2a1e:	697a      	ldr	r2, [r7, #20]
    2a20:	4b12      	ldr	r3, [pc, #72]	; (2a6c <laser_parse_buffer+0x2cc>)
    2a22:	210a      	movs	r1, #10
    2a24:	0010      	movs	r0, r2
    2a26:	4798      	blx	r3
    2a28:	0003      	movs	r3, r0
    2a2a:	617b      	str	r3, [r7, #20]
		for(i=3; i<9; i++){
    2a2c:	230f      	movs	r3, #15
    2a2e:	18fb      	adds	r3, r7, r3
    2a30:	781a      	ldrb	r2, [r3, #0]
    2a32:	230f      	movs	r3, #15
    2a34:	18fb      	adds	r3, r7, r3
    2a36:	3201      	adds	r2, #1
    2a38:	701a      	strb	r2, [r3, #0]
    2a3a:	230f      	movs	r3, #15
    2a3c:	18fb      	adds	r3, r7, r3
    2a3e:	781b      	ldrb	r3, [r3, #0]
    2a40:	2b08      	cmp	r3, #8
    2a42:	d9cb      	bls.n	29dc <laser_parse_buffer+0x23c>
		}
		meas_inst->distance=meas_inst->distance/1000;
    2a44:	687b      	ldr	r3, [r7, #4]
    2a46:	69da      	ldr	r2, [r3, #28]
    2a48:	4b0b      	ldr	r3, [pc, #44]	; (2a78 <laser_parse_buffer+0x2d8>)
    2a4a:	490c      	ldr	r1, [pc, #48]	; (2a7c <laser_parse_buffer+0x2dc>)
    2a4c:	1c10      	adds	r0, r2, #0
    2a4e:	4798      	blx	r3
    2a50:	1c03      	adds	r3, r0, #0
    2a52:	1c1a      	adds	r2, r3, #0
    2a54:	687b      	ldr	r3, [r7, #4]
    2a56:	61da      	str	r2, [r3, #28]
	}
}
    2a58:	46bd      	mov	sp, r7
    2a5a:	b007      	add	sp, #28
    2a5c:	bd90      	pop	{r4, r7, pc}
    2a5e:	46c0      	nop			; (mov r8, r8)
    2a60:	2000112c 	.word	0x2000112c
    2a64:	000031b5 	.word	0x000031b5
    2a68:	0001f1bd 	.word	0x0001f1bd
    2a6c:	0001df49 	.word	0x0001df49
    2a70:	000186a0 	.word	0x000186a0
    2a74:	0001e461 	.word	0x0001e461
    2a78:	0001e785 	.word	0x0001e785
    2a7c:	447a0000 	.word	0x447a0000

00002a80 <rangefinder_on_off>:
		writeLaser(cmd_beep_off, sizeof(cmd_beep_off));
		//while(!write_complete);
	}
}

void rangefinder_on_off(bool on_off){
    2a80:	b580      	push	{r7, lr}
    2a82:	b082      	sub	sp, #8
    2a84:	af00      	add	r7, sp, #0
    2a86:	0002      	movs	r2, r0
    2a88:	1dfb      	adds	r3, r7, #7
    2a8a:	701a      	strb	r2, [r3, #0]
	if (on_off){
    2a8c:	1dfb      	adds	r3, r7, #7
    2a8e:	781b      	ldrb	r3, [r3, #0]
    2a90:	2b00      	cmp	r3, #0
    2a92:	d007      	beq.n	2aa4 <rangefinder_on_off+0x24>
		ioport_set_pin_level(laser_reset, true);
    2a94:	2101      	movs	r1, #1
    2a96:	2002      	movs	r0, #2
    2a98:	4b08      	ldr	r3, [pc, #32]	; (2abc <rangefinder_on_off+0x3c>)
    2a9a:	4798      	blx	r3
		delay_ms(100);
    2a9c:	2064      	movs	r0, #100	; 0x64
    2a9e:	4b08      	ldr	r3, [pc, #32]	; (2ac0 <rangefinder_on_off+0x40>)
    2aa0:	4798      	blx	r3
    2aa2:	e003      	b.n	2aac <rangefinder_on_off+0x2c>
	}else{
		ioport_set_pin_level(laser_reset, false);
    2aa4:	2100      	movs	r1, #0
    2aa6:	2002      	movs	r0, #2
    2aa8:	4b04      	ldr	r3, [pc, #16]	; (2abc <rangefinder_on_off+0x3c>)
    2aaa:	4798      	blx	r3
	}

	laser_triggered = false;
    2aac:	4b05      	ldr	r3, [pc, #20]	; (2ac4 <rangefinder_on_off+0x44>)
    2aae:	2200      	movs	r2, #0
    2ab0:	701a      	strb	r2, [r3, #0]

}
    2ab2:	46c0      	nop			; (mov r8, r8)
    2ab4:	46bd      	mov	sp, r7
    2ab6:	b002      	add	sp, #8
    2ab8:	bd80      	pop	{r7, pc}
    2aba:	46c0      	nop			; (mov r8, r8)
    2abc:	000020d1 	.word	0x000020d1
    2ac0:	00015545 	.word	0x00015545
    2ac4:	20001dec 	.word	0x20001dec

00002ac8 <laser_on_off>:


void laser_on_off(bool on_off){
    2ac8:	b580      	push	{r7, lr}
    2aca:	b082      	sub	sp, #8
    2acc:	af00      	add	r7, sp, #0
    2ace:	0002      	movs	r2, r0
    2ad0:	1dfb      	adds	r3, r7, #7
    2ad2:	701a      	strb	r2, [r3, #0]
	//write_complete = false;
	if(on_off){
    2ad4:	1dfb      	adds	r3, r7, #7
    2ad6:	781b      	ldrb	r3, [r3, #0]
    2ad8:	2b00      	cmp	r3, #0
    2ada:	d015      	beq.n	2b08 <laser_on_off+0x40>
		writeLaser(cmd_laser_on, sizeof(cmd_laser_on));
    2adc:	4b17      	ldr	r3, [pc, #92]	; (2b3c <laser_on_off+0x74>)
    2ade:	2105      	movs	r1, #5
    2ae0:	0018      	movs	r0, r3
    2ae2:	4b17      	ldr	r3, [pc, #92]	; (2b40 <laser_on_off+0x78>)
    2ae4:	4798      	blx	r3
		while(!isLaserTransmitComplete());
    2ae6:	46c0      	nop			; (mov r8, r8)
    2ae8:	4b16      	ldr	r3, [pc, #88]	; (2b44 <laser_on_off+0x7c>)
    2aea:	4798      	blx	r3
    2aec:	0003      	movs	r3, r0
    2aee:	001a      	movs	r2, r3
    2af0:	2301      	movs	r3, #1
    2af2:	4053      	eors	r3, r2
    2af4:	b2db      	uxtb	r3, r3
    2af6:	2b00      	cmp	r3, #0
    2af8:	d1f6      	bne.n	2ae8 <laser_on_off+0x20>
		laser_triggered = true;
    2afa:	4b13      	ldr	r3, [pc, #76]	; (2b48 <laser_on_off+0x80>)
    2afc:	2201      	movs	r2, #1
    2afe:	701a      	strb	r2, [r3, #0]
		laser_timeout_timer(true);
    2b00:	2001      	movs	r0, #1
    2b02:	4b12      	ldr	r3, [pc, #72]	; (2b4c <laser_on_off+0x84>)
    2b04:	4798      	blx	r3
		while(!isLaserTransmitComplete());
		laser_triggered = false;
		laser_timeout_timer(false);
	}
	
}
    2b06:	e014      	b.n	2b32 <laser_on_off+0x6a>
		writeLaser(cmd_laser_off, sizeof(cmd_laser_off));
    2b08:	4b11      	ldr	r3, [pc, #68]	; (2b50 <laser_on_off+0x88>)
    2b0a:	2105      	movs	r1, #5
    2b0c:	0018      	movs	r0, r3
    2b0e:	4b0c      	ldr	r3, [pc, #48]	; (2b40 <laser_on_off+0x78>)
    2b10:	4798      	blx	r3
		while(!isLaserTransmitComplete());
    2b12:	46c0      	nop			; (mov r8, r8)
    2b14:	4b0b      	ldr	r3, [pc, #44]	; (2b44 <laser_on_off+0x7c>)
    2b16:	4798      	blx	r3
    2b18:	0003      	movs	r3, r0
    2b1a:	001a      	movs	r2, r3
    2b1c:	2301      	movs	r3, #1
    2b1e:	4053      	eors	r3, r2
    2b20:	b2db      	uxtb	r3, r3
    2b22:	2b00      	cmp	r3, #0
    2b24:	d1f6      	bne.n	2b14 <laser_on_off+0x4c>
		laser_triggered = false;
    2b26:	4b08      	ldr	r3, [pc, #32]	; (2b48 <laser_on_off+0x80>)
    2b28:	2200      	movs	r2, #0
    2b2a:	701a      	strb	r2, [r3, #0]
		laser_timeout_timer(false);
    2b2c:	2000      	movs	r0, #0
    2b2e:	4b07      	ldr	r3, [pc, #28]	; (2b4c <laser_on_off+0x84>)
    2b30:	4798      	blx	r3
}
    2b32:	46c0      	nop			; (mov r8, r8)
    2b34:	46bd      	mov	sp, r7
    2b36:	b002      	add	sp, #8
    2b38:	bd80      	pop	{r7, pc}
    2b3a:	46c0      	nop			; (mov r8, r8)
    2b3c:	200000b0 	.word	0x200000b0
    2b40:	0000e2e5 	.word	0x0000e2e5
    2b44:	0000e329 	.word	0x0000e329
    2b48:	20001dec 	.word	0x20001dec
    2b4c:	000044a9 	.word	0x000044a9
    2b50:	200000b8 	.word	0x200000b8

00002b54 <read_accel>:




void read_accel(struct spi_slave_inst *const sensor, float vector[3]){
    2b54:	b590      	push	{r4, r7, lr}
    2b56:	b087      	sub	sp, #28
    2b58:	af00      	add	r7, sp, #0
    2b5a:	6078      	str	r0, [r7, #4]
    2b5c:	6039      	str	r1, [r7, #0]
	uint8_t read_buffer[4];
	uint8_t i;
	float temp;
	//select acc1 chip
	// Assumes SPI already setup for sensors
	spi_select_slave(&spi_main, sensor, true);
    2b5e:	6879      	ldr	r1, [r7, #4]
    2b60:	4b4e      	ldr	r3, [pc, #312]	; (2c9c <read_accel+0x148>)
    2b62:	2201      	movs	r2, #1
    2b64:	0018      	movs	r0, r3
    2b66:	4b4e      	ldr	r3, [pc, #312]	; (2ca0 <read_accel+0x14c>)
    2b68:	4798      	blx	r3
	//clear out receive buffer
	spi_clear();
    2b6a:	4b4e      	ldr	r3, [pc, #312]	; (2ca4 <read_accel+0x150>)
    2b6c:	4798      	blx	r3
	//Send Read X command
	spi_transceive_buffer_wait(&spi_main, read_x, read_buffer, 4);
    2b6e:	230c      	movs	r3, #12
    2b70:	18fa      	adds	r2, r7, r3
    2b72:	494d      	ldr	r1, [pc, #308]	; (2ca8 <read_accel+0x154>)
    2b74:	4849      	ldr	r0, [pc, #292]	; (2c9c <read_accel+0x148>)
    2b76:	2304      	movs	r3, #4
    2b78:	4c4c      	ldr	r4, [pc, #304]	; (2cac <read_accel+0x158>)
    2b7a:	47a0      	blx	r4
	spi_select_slave(&spi_main, sensor, false);
    2b7c:	6879      	ldr	r1, [r7, #4]
    2b7e:	4b47      	ldr	r3, [pc, #284]	; (2c9c <read_accel+0x148>)
    2b80:	2200      	movs	r2, #0
    2b82:	0018      	movs	r0, r3
    2b84:	4b46      	ldr	r3, [pc, #280]	; (2ca0 <read_accel+0x14c>)
    2b86:	4798      	blx	r3
	//Send Read Y command, Read X
	spi_select_slave(&spi_main, sensor, true);
    2b88:	6879      	ldr	r1, [r7, #4]
    2b8a:	4b44      	ldr	r3, [pc, #272]	; (2c9c <read_accel+0x148>)
    2b8c:	2201      	movs	r2, #1
    2b8e:	0018      	movs	r0, r3
    2b90:	4b43      	ldr	r3, [pc, #268]	; (2ca0 <read_accel+0x14c>)
    2b92:	4798      	blx	r3
	spi_transceive_buffer_wait(&spi_main, read_y, read_buffer, 4);
    2b94:	230c      	movs	r3, #12
    2b96:	18fa      	adds	r2, r7, r3
    2b98:	4945      	ldr	r1, [pc, #276]	; (2cb0 <read_accel+0x15c>)
    2b9a:	4840      	ldr	r0, [pc, #256]	; (2c9c <read_accel+0x148>)
    2b9c:	2304      	movs	r3, #4
    2b9e:	4c43      	ldr	r4, [pc, #268]	; (2cac <read_accel+0x158>)
    2ba0:	47a0      	blx	r4
	spi_select_slave(&spi_main, sensor, false);
    2ba2:	6879      	ldr	r1, [r7, #4]
    2ba4:	4b3d      	ldr	r3, [pc, #244]	; (2c9c <read_accel+0x148>)
    2ba6:	2200      	movs	r2, #0
    2ba8:	0018      	movs	r0, r3
    2baa:	4b3d      	ldr	r3, [pc, #244]	; (2ca0 <read_accel+0x14c>)
    2bac:	4798      	blx	r3
	//Parse X data
	vector[0]=parse_acc_data(read_buffer);
    2bae:	230c      	movs	r3, #12
    2bb0:	18fb      	adds	r3, r7, r3
    2bb2:	0018      	movs	r0, r3
    2bb4:	4b3f      	ldr	r3, [pc, #252]	; (2cb4 <read_accel+0x160>)
    2bb6:	4798      	blx	r3
    2bb8:	1c02      	adds	r2, r0, #0
    2bba:	683b      	ldr	r3, [r7, #0]
    2bbc:	601a      	str	r2, [r3, #0]
	//Send Read Z command, Read Y
	spi_select_slave(&spi_main, sensor, true);
    2bbe:	6879      	ldr	r1, [r7, #4]
    2bc0:	4b36      	ldr	r3, [pc, #216]	; (2c9c <read_accel+0x148>)
    2bc2:	2201      	movs	r2, #1
    2bc4:	0018      	movs	r0, r3
    2bc6:	4b36      	ldr	r3, [pc, #216]	; (2ca0 <read_accel+0x14c>)
    2bc8:	4798      	blx	r3
	spi_transceive_buffer_wait(&spi_main, read_z, read_buffer, 4);
    2bca:	230c      	movs	r3, #12
    2bcc:	18fa      	adds	r2, r7, r3
    2bce:	493a      	ldr	r1, [pc, #232]	; (2cb8 <read_accel+0x164>)
    2bd0:	4832      	ldr	r0, [pc, #200]	; (2c9c <read_accel+0x148>)
    2bd2:	2304      	movs	r3, #4
    2bd4:	4c35      	ldr	r4, [pc, #212]	; (2cac <read_accel+0x158>)
    2bd6:	47a0      	blx	r4
	spi_select_slave(&spi_main, sensor, false);
    2bd8:	6879      	ldr	r1, [r7, #4]
    2bda:	4b30      	ldr	r3, [pc, #192]	; (2c9c <read_accel+0x148>)
    2bdc:	2200      	movs	r2, #0
    2bde:	0018      	movs	r0, r3
    2be0:	4b2f      	ldr	r3, [pc, #188]	; (2ca0 <read_accel+0x14c>)
    2be2:	4798      	blx	r3
	//Parse Y data
	vector[1]=parse_acc_data(read_buffer);
    2be4:	683b      	ldr	r3, [r7, #0]
    2be6:	1d1c      	adds	r4, r3, #4
    2be8:	230c      	movs	r3, #12
    2bea:	18fb      	adds	r3, r7, r3
    2bec:	0018      	movs	r0, r3
    2bee:	4b31      	ldr	r3, [pc, #196]	; (2cb4 <read_accel+0x160>)
    2bf0:	4798      	blx	r3
    2bf2:	1c03      	adds	r3, r0, #0
    2bf4:	6023      	str	r3, [r4, #0]
	//Send read status command (not used), read Z
	spi_select_slave(&spi_main, sensor, true);
    2bf6:	6879      	ldr	r1, [r7, #4]
    2bf8:	4b28      	ldr	r3, [pc, #160]	; (2c9c <read_accel+0x148>)
    2bfa:	2201      	movs	r2, #1
    2bfc:	0018      	movs	r0, r3
    2bfe:	4b28      	ldr	r3, [pc, #160]	; (2ca0 <read_accel+0x14c>)
    2c00:	4798      	blx	r3
	spi_transceive_buffer_wait(&spi_main, read_status, read_buffer, 4);
    2c02:	230c      	movs	r3, #12
    2c04:	18fa      	adds	r2, r7, r3
    2c06:	492d      	ldr	r1, [pc, #180]	; (2cbc <read_accel+0x168>)
    2c08:	4824      	ldr	r0, [pc, #144]	; (2c9c <read_accel+0x148>)
    2c0a:	2304      	movs	r3, #4
    2c0c:	4c27      	ldr	r4, [pc, #156]	; (2cac <read_accel+0x158>)
    2c0e:	47a0      	blx	r4
	spi_select_slave(&spi_main, sensor, false);
    2c10:	6879      	ldr	r1, [r7, #4]
    2c12:	4b22      	ldr	r3, [pc, #136]	; (2c9c <read_accel+0x148>)
    2c14:	2200      	movs	r2, #0
    2c16:	0018      	movs	r0, r3
    2c18:	4b21      	ldr	r3, [pc, #132]	; (2ca0 <read_accel+0x14c>)
    2c1a:	4798      	blx	r3
	//Parse Z data
	vector[2]=parse_acc_data(read_buffer);
    2c1c:	683b      	ldr	r3, [r7, #0]
    2c1e:	3308      	adds	r3, #8
    2c20:	001c      	movs	r4, r3
    2c22:	230c      	movs	r3, #12
    2c24:	18fb      	adds	r3, r7, r3
    2c26:	0018      	movs	r0, r3
    2c28:	4b22      	ldr	r3, [pc, #136]	; (2cb4 <read_accel+0x160>)
    2c2a:	4798      	blx	r3
    2c2c:	1c03      	adds	r3, r0, #0
    2c2e:	6023      	str	r3, [r4, #0]
	//Correct for sensor orientation
	temp=vector[1];
    2c30:	683b      	ldr	r3, [r7, #0]
    2c32:	685b      	ldr	r3, [r3, #4]
    2c34:	613b      	str	r3, [r7, #16]
	vector[1]=vector[0];
    2c36:	683b      	ldr	r3, [r7, #0]
    2c38:	3304      	adds	r3, #4
    2c3a:	683a      	ldr	r2, [r7, #0]
    2c3c:	6812      	ldr	r2, [r2, #0]
    2c3e:	601a      	str	r2, [r3, #0]
	vector[0]=-1*temp;
    2c40:	693b      	ldr	r3, [r7, #16]
    2c42:	2280      	movs	r2, #128	; 0x80
    2c44:	0612      	lsls	r2, r2, #24
    2c46:	405a      	eors	r2, r3
    2c48:	683b      	ldr	r3, [r7, #0]
    2c4a:	601a      	str	r2, [r3, #0]
	
	for (i=0;i<3;i++){
    2c4c:	2317      	movs	r3, #23
    2c4e:	18fb      	adds	r3, r7, r3
    2c50:	2200      	movs	r2, #0
    2c52:	701a      	strb	r2, [r3, #0]
    2c54:	e019      	b.n	2c8a <read_accel+0x136>
		vector[i] = vector[i]/a_coarse_gain;
    2c56:	2317      	movs	r3, #23
    2c58:	18fb      	adds	r3, r7, r3
    2c5a:	781b      	ldrb	r3, [r3, #0]
    2c5c:	009b      	lsls	r3, r3, #2
    2c5e:	683a      	ldr	r2, [r7, #0]
    2c60:	18d4      	adds	r4, r2, r3
    2c62:	2317      	movs	r3, #23
    2c64:	18fb      	adds	r3, r7, r3
    2c66:	781b      	ldrb	r3, [r3, #0]
    2c68:	009b      	lsls	r3, r3, #2
    2c6a:	683a      	ldr	r2, [r7, #0]
    2c6c:	18d3      	adds	r3, r2, r3
    2c6e:	681a      	ldr	r2, [r3, #0]
    2c70:	4b13      	ldr	r3, [pc, #76]	; (2cc0 <read_accel+0x16c>)
    2c72:	4914      	ldr	r1, [pc, #80]	; (2cc4 <read_accel+0x170>)
    2c74:	1c10      	adds	r0, r2, #0
    2c76:	4798      	blx	r3
    2c78:	1c03      	adds	r3, r0, #0
    2c7a:	6023      	str	r3, [r4, #0]
	for (i=0;i<3;i++){
    2c7c:	2317      	movs	r3, #23
    2c7e:	18fb      	adds	r3, r7, r3
    2c80:	781a      	ldrb	r2, [r3, #0]
    2c82:	2317      	movs	r3, #23
    2c84:	18fb      	adds	r3, r7, r3
    2c86:	3201      	adds	r2, #1
    2c88:	701a      	strb	r2, [r3, #0]
    2c8a:	2317      	movs	r3, #23
    2c8c:	18fb      	adds	r3, r7, r3
    2c8e:	781b      	ldrb	r3, [r3, #0]
    2c90:	2b02      	cmp	r3, #2
    2c92:	d9e0      	bls.n	2c56 <read_accel+0x102>
	}
	
	
}
    2c94:	46c0      	nop			; (mov r8, r8)
    2c96:	46bd      	mov	sp, r7
    2c98:	b007      	add	sp, #28
    2c9a:	bd90      	pop	{r4, r7, pc}
    2c9c:	200010a4 	.word	0x200010a4
    2ca0:	000146b5 	.word	0x000146b5
    2ca4:	0000e005 	.word	0x0000e005
    2ca8:	20000094 	.word	0x20000094
    2cac:	00014ac9 	.word	0x00014ac9
    2cb0:	20000098 	.word	0x20000098
    2cb4:	00002cc9 	.word	0x00002cc9
    2cb8:	2000009c 	.word	0x2000009c
    2cbc:	200000a0 	.word	0x200000a0
    2cc0:	0001e785 	.word	0x0001e785
    2cc4:	459c4000 	.word	0x459c4000

00002cc8 <parse_acc_data>:




float parse_acc_data(uint8_t buffer[4]){
    2cc8:	b580      	push	{r7, lr}
    2cca:	b084      	sub	sp, #16
    2ccc:	af00      	add	r7, sp, #0
    2cce:	6078      	str	r0, [r7, #4]
	float result=0;
    2cd0:	2300      	movs	r3, #0
    2cd2:	60fb      	str	r3, [r7, #12]
	int16_t var16;
	var16= buffer[1];
    2cd4:	687b      	ldr	r3, [r7, #4]
    2cd6:	3301      	adds	r3, #1
    2cd8:	781a      	ldrb	r2, [r3, #0]
    2cda:	230a      	movs	r3, #10
    2cdc:	18fb      	adds	r3, r7, r3
    2cde:	801a      	strh	r2, [r3, #0]
	var16=var16<<8;
    2ce0:	230a      	movs	r3, #10
    2ce2:	18fb      	adds	r3, r7, r3
    2ce4:	2200      	movs	r2, #0
    2ce6:	5e9b      	ldrsh	r3, [r3, r2]
    2ce8:	021a      	lsls	r2, r3, #8
    2cea:	230a      	movs	r3, #10
    2cec:	18fb      	adds	r3, r7, r3
    2cee:	801a      	strh	r2, [r3, #0]
	var16=var16+buffer[2];
    2cf0:	687b      	ldr	r3, [r7, #4]
    2cf2:	3302      	adds	r3, #2
    2cf4:	781b      	ldrb	r3, [r3, #0]
    2cf6:	b29a      	uxth	r2, r3
    2cf8:	230a      	movs	r3, #10
    2cfa:	18fb      	adds	r3, r7, r3
    2cfc:	881b      	ldrh	r3, [r3, #0]
    2cfe:	18d3      	adds	r3, r2, r3
    2d00:	b29a      	uxth	r2, r3
    2d02:	230a      	movs	r3, #10
    2d04:	18fb      	adds	r3, r7, r3
    2d06:	801a      	strh	r2, [r3, #0]
	result=var16;
    2d08:	230a      	movs	r3, #10
    2d0a:	18fb      	adds	r3, r7, r3
    2d0c:	2200      	movs	r2, #0
    2d0e:	5e9a      	ldrsh	r2, [r3, r2]
    2d10:	4b04      	ldr	r3, [pc, #16]	; (2d24 <parse_acc_data+0x5c>)
    2d12:	0010      	movs	r0, r2
    2d14:	4798      	blx	r3
    2d16:	1c03      	adds	r3, r0, #0
    2d18:	60fb      	str	r3, [r7, #12]
	return result;
    2d1a:	68fb      	ldr	r3, [r7, #12]
}
    2d1c:	1c18      	adds	r0, r3, #0
    2d1e:	46bd      	mov	sp, r7
    2d20:	b004      	add	sp, #16
    2d22:	bd80      	pop	{r7, pc}
    2d24:	0001f11d 	.word	0x0001f11d

00002d28 <setup_accel>:


void setup_accel(struct spi_slave_inst *const sensor){
    2d28:	b590      	push	{r4, r7, lr}
    2d2a:	b085      	sub	sp, #20
    2d2c:	af00      	add	r7, sp, #0
    2d2e:	6078      	str	r0, [r7, #4]
	uint8_t read_buffer[4];
	
	//select acc1 chip
	config_spi(sensors);
    2d30:	2001      	movs	r0, #1
    2d32:	4b1a      	ldr	r3, [pc, #104]	; (2d9c <setup_accel+0x74>)
    2d34:	4798      	blx	r3
	
	spi_select_slave(&spi_main, sensor, true);
    2d36:	6879      	ldr	r1, [r7, #4]
    2d38:	4b19      	ldr	r3, [pc, #100]	; (2da0 <setup_accel+0x78>)
    2d3a:	2201      	movs	r2, #1
    2d3c:	0018      	movs	r0, r3
    2d3e:	4b19      	ldr	r3, [pc, #100]	; (2da4 <setup_accel+0x7c>)
    2d40:	4798      	blx	r3
	spi_clear();
    2d42:	4b19      	ldr	r3, [pc, #100]	; (2da8 <setup_accel+0x80>)
    2d44:	4798      	blx	r3
	//sw reset
	spi_transceive_buffer_wait(&spi_main, sw_reset, read_buffer, 4);
    2d46:	230c      	movs	r3, #12
    2d48:	18fa      	adds	r2, r7, r3
    2d4a:	4918      	ldr	r1, [pc, #96]	; (2dac <setup_accel+0x84>)
    2d4c:	4814      	ldr	r0, [pc, #80]	; (2da0 <setup_accel+0x78>)
    2d4e:	2304      	movs	r3, #4
    2d50:	4c17      	ldr	r4, [pc, #92]	; (2db0 <setup_accel+0x88>)
    2d52:	47a0      	blx	r4
	//toggle CS line
	spi_select_slave(&spi_main, sensor, false);
    2d54:	6879      	ldr	r1, [r7, #4]
    2d56:	4b12      	ldr	r3, [pc, #72]	; (2da0 <setup_accel+0x78>)
    2d58:	2200      	movs	r2, #0
    2d5a:	0018      	movs	r0, r3
    2d5c:	4b11      	ldr	r3, [pc, #68]	; (2da4 <setup_accel+0x7c>)
    2d5e:	4798      	blx	r3
	delay_ms(10);
    2d60:	200a      	movs	r0, #10
    2d62:	4b14      	ldr	r3, [pc, #80]	; (2db4 <setup_accel+0x8c>)
    2d64:	4798      	blx	r3
	spi_select_slave(&spi_main, sensor, true);
    2d66:	6879      	ldr	r1, [r7, #4]
    2d68:	4b0d      	ldr	r3, [pc, #52]	; (2da0 <setup_accel+0x78>)
    2d6a:	2201      	movs	r2, #1
    2d6c:	0018      	movs	r0, r3
    2d6e:	4b0d      	ldr	r3, [pc, #52]	; (2da4 <setup_accel+0x7c>)
    2d70:	4798      	blx	r3
	//set mode
	spi_transceive_buffer_wait(&spi_main, set_mode4, read_buffer, 4);
    2d72:	230c      	movs	r3, #12
    2d74:	18fa      	adds	r2, r7, r3
    2d76:	4910      	ldr	r1, [pc, #64]	; (2db8 <setup_accel+0x90>)
    2d78:	4809      	ldr	r0, [pc, #36]	; (2da0 <setup_accel+0x78>)
    2d7a:	2304      	movs	r3, #4
    2d7c:	4c0c      	ldr	r4, [pc, #48]	; (2db0 <setup_accel+0x88>)
    2d7e:	47a0      	blx	r4
	//toggle CS line
	spi_select_slave(&spi_main, sensor, false);
    2d80:	6879      	ldr	r1, [r7, #4]
    2d82:	4b07      	ldr	r3, [pc, #28]	; (2da0 <setup_accel+0x78>)
    2d84:	2200      	movs	r2, #0
    2d86:	0018      	movs	r0, r3
    2d88:	4b06      	ldr	r3, [pc, #24]	; (2da4 <setup_accel+0x7c>)
    2d8a:	4798      	blx	r3
	config_spi(LCD);
    2d8c:	2000      	movs	r0, #0
    2d8e:	4b03      	ldr	r3, [pc, #12]	; (2d9c <setup_accel+0x74>)
    2d90:	4798      	blx	r3
	
}
    2d92:	46c0      	nop			; (mov r8, r8)
    2d94:	46bd      	mov	sp, r7
    2d96:	b005      	add	sp, #20
    2d98:	bd90      	pop	{r4, r7, pc}
    2d9a:	46c0      	nop			; (mov r8, r8)
    2d9c:	0000df9d 	.word	0x0000df9d
    2da0:	200010a4 	.word	0x200010a4
    2da4:	000146b5 	.word	0x000146b5
    2da8:	0000e005 	.word	0x0000e005
    2dac:	200000a8 	.word	0x200000a8
    2db0:	00014ac9 	.word	0x00014ac9
    2db4:	00015545 	.word	0x00015545
    2db8:	200000a4 	.word	0x200000a4

00002dbc <read_mag>:




uint8_t read_mag(struct spi_slave_inst *const sensor, float vector[3]){
    2dbc:	b590      	push	{r4, r7, lr}
    2dbe:	b089      	sub	sp, #36	; 0x24
    2dc0:	af00      	add	r7, sp, #0
    2dc2:	6078      	str	r0, [r7, #4]
    2dc4:	6039      	str	r1, [r7, #0]
	uint8_t data_ready;
	uint8_t counter1;
	uint8_t i;
	//select sensor
	// Assumes SPI already set up for sensors
	spi_select_slave(&spi_main, sensor, true);
    2dc6:	6879      	ldr	r1, [r7, #4]
    2dc8:	4b69      	ldr	r3, [pc, #420]	; (2f70 <read_mag+0x1b4>)
    2dca:	2201      	movs	r2, #1
    2dcc:	0018      	movs	r0, r3
    2dce:	4b69      	ldr	r3, [pc, #420]	; (2f74 <read_mag+0x1b8>)
    2dd0:	4798      	blx	r3
	spi_clear();
    2dd2:	4b69      	ldr	r3, [pc, #420]	; (2f78 <read_mag+0x1bc>)
    2dd4:	4798      	blx	r3
	//Send Send Poll command to 0x00
	write_buffer[0]=0x00; //poll register
    2dd6:	2318      	movs	r3, #24
    2dd8:	18fb      	adds	r3, r7, r3
    2dda:	2200      	movs	r2, #0
    2ddc:	701a      	strb	r2, [r3, #0]
	write_buffer[1]=0x70; //set to poll X,Y,Z
    2dde:	2318      	movs	r3, #24
    2de0:	18fb      	adds	r3, r7, r3
    2de2:	2270      	movs	r2, #112	; 0x70
    2de4:	705a      	strb	r2, [r3, #1]
	spi_write_buffer_wait(&spi_main, write_buffer, 2);
    2de6:	2318      	movs	r3, #24
    2de8:	18f9      	adds	r1, r7, r3
    2dea:	4b61      	ldr	r3, [pc, #388]	; (2f70 <read_mag+0x1b4>)
    2dec:	2202      	movs	r2, #2
    2dee:	0018      	movs	r0, r3
    2df0:	4b62      	ldr	r3, [pc, #392]	; (2f7c <read_mag+0x1c0>)
    2df2:	4798      	blx	r3
	spi_select_slave(&spi_main, sensor, false);
    2df4:	6879      	ldr	r1, [r7, #4]
    2df6:	4b5e      	ldr	r3, [pc, #376]	; (2f70 <read_mag+0x1b4>)
    2df8:	2200      	movs	r2, #0
    2dfa:	0018      	movs	r0, r3
    2dfc:	4b5d      	ldr	r3, [pc, #372]	; (2f74 <read_mag+0x1b8>)
    2dfe:	4798      	blx	r3
	delay_us(1);
    2e00:	2001      	movs	r0, #1
    2e02:	4b5f      	ldr	r3, [pc, #380]	; (2f80 <read_mag+0x1c4>)
    2e04:	4798      	blx	r3
	data_ready=0x00;
    2e06:	231f      	movs	r3, #31
    2e08:	18fb      	adds	r3, r7, r3
    2e0a:	2200      	movs	r2, #0
    2e0c:	701a      	strb	r2, [r3, #0]
	counter1 = 0x00;
    2e0e:	231e      	movs	r3, #30
    2e10:	18fb      	adds	r3, r7, r3
    2e12:	2200      	movs	r2, #0
    2e14:	701a      	strb	r2, [r3, #0]
	while(!data_ready){
    2e16:	e038      	b.n	2e8a <read_mag+0xce>
		spi_select_slave(&spi_main, sensor, true);
    2e18:	6879      	ldr	r1, [r7, #4]
    2e1a:	4b55      	ldr	r3, [pc, #340]	; (2f70 <read_mag+0x1b4>)
    2e1c:	2201      	movs	r2, #1
    2e1e:	0018      	movs	r0, r3
    2e20:	4b54      	ldr	r3, [pc, #336]	; (2f74 <read_mag+0x1b8>)
    2e22:	4798      	blx	r3
		write_buffer[0]=0xB4;
    2e24:	2318      	movs	r3, #24
    2e26:	18fb      	adds	r3, r7, r3
    2e28:	22b4      	movs	r2, #180	; 0xb4
    2e2a:	701a      	strb	r2, [r3, #0]
		write_buffer[1]=0xFF;
    2e2c:	2318      	movs	r3, #24
    2e2e:	18fb      	adds	r3, r7, r3
    2e30:	22ff      	movs	r2, #255	; 0xff
    2e32:	705a      	strb	r2, [r3, #1]
		spi_transceive_buffer_wait(&spi_main, write_buffer, read_buffer, 2);
    2e34:	230c      	movs	r3, #12
    2e36:	18fa      	adds	r2, r7, r3
    2e38:	2318      	movs	r3, #24
    2e3a:	18f9      	adds	r1, r7, r3
    2e3c:	484c      	ldr	r0, [pc, #304]	; (2f70 <read_mag+0x1b4>)
    2e3e:	2302      	movs	r3, #2
    2e40:	4c50      	ldr	r4, [pc, #320]	; (2f84 <read_mag+0x1c8>)
    2e42:	47a0      	blx	r4
		data_ready=read_buffer[1];
    2e44:	231f      	movs	r3, #31
    2e46:	18fb      	adds	r3, r7, r3
    2e48:	220c      	movs	r2, #12
    2e4a:	18ba      	adds	r2, r7, r2
    2e4c:	7852      	ldrb	r2, [r2, #1]
    2e4e:	701a      	strb	r2, [r3, #0]
		data_ready=data_ready & 0x80;
    2e50:	231f      	movs	r3, #31
    2e52:	18fb      	adds	r3, r7, r3
    2e54:	221f      	movs	r2, #31
    2e56:	18ba      	adds	r2, r7, r2
    2e58:	7812      	ldrb	r2, [r2, #0]
    2e5a:	217f      	movs	r1, #127	; 0x7f
    2e5c:	438a      	bics	r2, r1
    2e5e:	701a      	strb	r2, [r3, #0]
		counter1=counter1+1;
    2e60:	231e      	movs	r3, #30
    2e62:	18fb      	adds	r3, r7, r3
    2e64:	221e      	movs	r2, #30
    2e66:	18ba      	adds	r2, r7, r2
    2e68:	7812      	ldrb	r2, [r2, #0]
    2e6a:	3201      	adds	r2, #1
    2e6c:	701a      	strb	r2, [r3, #0]
		spi_select_slave(&spi_main, sensor, false);
    2e6e:	6879      	ldr	r1, [r7, #4]
    2e70:	4b3f      	ldr	r3, [pc, #252]	; (2f70 <read_mag+0x1b4>)
    2e72:	2200      	movs	r2, #0
    2e74:	0018      	movs	r0, r3
    2e76:	4b3f      	ldr	r3, [pc, #252]	; (2f74 <read_mag+0x1b8>)
    2e78:	4798      	blx	r3
		delay_us(1);
    2e7a:	2001      	movs	r0, #1
    2e7c:	4b40      	ldr	r3, [pc, #256]	; (2f80 <read_mag+0x1c4>)
    2e7e:	4798      	blx	r3
		if(counter1==0xFF){break;}
    2e80:	231e      	movs	r3, #30
    2e82:	18fb      	adds	r3, r7, r3
    2e84:	781b      	ldrb	r3, [r3, #0]
    2e86:	2bff      	cmp	r3, #255	; 0xff
    2e88:	d005      	beq.n	2e96 <read_mag+0xda>
	while(!data_ready){
    2e8a:	231f      	movs	r3, #31
    2e8c:	18fb      	adds	r3, r7, r3
    2e8e:	781b      	ldrb	r3, [r3, #0]
    2e90:	2b00      	cmp	r3, #0
    2e92:	d0c1      	beq.n	2e18 <read_mag+0x5c>
    2e94:	e000      	b.n	2e98 <read_mag+0xdc>
		if(counter1==0xFF){break;}
    2e96:	46c0      	nop			; (mov r8, r8)
	}
	spi_select_slave(&spi_main, sensor, true);
    2e98:	6879      	ldr	r1, [r7, #4]
    2e9a:	4b35      	ldr	r3, [pc, #212]	; (2f70 <read_mag+0x1b4>)
    2e9c:	2201      	movs	r2, #1
    2e9e:	0018      	movs	r0, r3
    2ea0:	4b34      	ldr	r3, [pc, #208]	; (2f74 <read_mag+0x1b8>)
    2ea2:	4798      	blx	r3
	write_buffer[0]=0xA4;
    2ea4:	2318      	movs	r3, #24
    2ea6:	18fb      	adds	r3, r7, r3
    2ea8:	22a4      	movs	r2, #164	; 0xa4
    2eaa:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&spi_main, write_buffer, 1);
    2eac:	2318      	movs	r3, #24
    2eae:	18f9      	adds	r1, r7, r3
    2eb0:	4b2f      	ldr	r3, [pc, #188]	; (2f70 <read_mag+0x1b4>)
    2eb2:	2201      	movs	r2, #1
    2eb4:	0018      	movs	r0, r3
    2eb6:	4b31      	ldr	r3, [pc, #196]	; (2f7c <read_mag+0x1c0>)
    2eb8:	4798      	blx	r3
	spi_read_buffer_wait(&spi_main, read_buffer, 9, 0xFF);
    2eba:	230c      	movs	r3, #12
    2ebc:	18f9      	adds	r1, r7, r3
    2ebe:	482c      	ldr	r0, [pc, #176]	; (2f70 <read_mag+0x1b4>)
    2ec0:	23ff      	movs	r3, #255	; 0xff
    2ec2:	2209      	movs	r2, #9
    2ec4:	4c30      	ldr	r4, [pc, #192]	; (2f88 <read_mag+0x1cc>)
    2ec6:	47a0      	blx	r4
	spi_select_slave(&spi_main, sensor, false);
    2ec8:	6879      	ldr	r1, [r7, #4]
    2eca:	4b29      	ldr	r3, [pc, #164]	; (2f70 <read_mag+0x1b4>)
    2ecc:	2200      	movs	r2, #0
    2ece:	0018      	movs	r0, r3
    2ed0:	4b28      	ldr	r3, [pc, #160]	; (2f74 <read_mag+0x1b8>)
    2ed2:	4798      	blx	r3
	delay_us(1);
    2ed4:	2001      	movs	r0, #1
    2ed6:	4b2a      	ldr	r3, [pc, #168]	; (2f80 <read_mag+0x1c4>)
    2ed8:	4798      	blx	r3
	
	vector[0]=parse_mag_data(&read_buffer[0]);
    2eda:	230c      	movs	r3, #12
    2edc:	18fb      	adds	r3, r7, r3
    2ede:	0018      	movs	r0, r3
    2ee0:	4b2a      	ldr	r3, [pc, #168]	; (2f8c <read_mag+0x1d0>)
    2ee2:	4798      	blx	r3
    2ee4:	1c02      	adds	r2, r0, #0
    2ee6:	683b      	ldr	r3, [r7, #0]
    2ee8:	601a      	str	r2, [r3, #0]
	vector[1]=parse_mag_data(&read_buffer[3]);
    2eea:	683b      	ldr	r3, [r7, #0]
    2eec:	1d1c      	adds	r4, r3, #4
    2eee:	230c      	movs	r3, #12
    2ef0:	18fb      	adds	r3, r7, r3
    2ef2:	3303      	adds	r3, #3
    2ef4:	0018      	movs	r0, r3
    2ef6:	4b25      	ldr	r3, [pc, #148]	; (2f8c <read_mag+0x1d0>)
    2ef8:	4798      	blx	r3
    2efa:	1c03      	adds	r3, r0, #0
    2efc:	6023      	str	r3, [r4, #0]
	vector[2]=-1* parse_mag_data(&read_buffer[6]);//Z axis inverted
    2efe:	683b      	ldr	r3, [r7, #0]
    2f00:	3308      	adds	r3, #8
    2f02:	001c      	movs	r4, r3
    2f04:	230c      	movs	r3, #12
    2f06:	18fb      	adds	r3, r7, r3
    2f08:	3306      	adds	r3, #6
    2f0a:	0018      	movs	r0, r3
    2f0c:	4b1f      	ldr	r3, [pc, #124]	; (2f8c <read_mag+0x1d0>)
    2f0e:	4798      	blx	r3
    2f10:	1c02      	adds	r2, r0, #0
    2f12:	2380      	movs	r3, #128	; 0x80
    2f14:	061b      	lsls	r3, r3, #24
    2f16:	4053      	eors	r3, r2
    2f18:	6023      	str	r3, [r4, #0]
	
	for (i=0;i<3;i++){
    2f1a:	231d      	movs	r3, #29
    2f1c:	18fb      	adds	r3, r7, r3
    2f1e:	2200      	movs	r2, #0
    2f20:	701a      	strb	r2, [r3, #0]
    2f22:	e019      	b.n	2f58 <read_mag+0x19c>
		vector[i] = vector[i]/c_coarse_gain;
    2f24:	231d      	movs	r3, #29
    2f26:	18fb      	adds	r3, r7, r3
    2f28:	781b      	ldrb	r3, [r3, #0]
    2f2a:	009b      	lsls	r3, r3, #2
    2f2c:	683a      	ldr	r2, [r7, #0]
    2f2e:	18d4      	adds	r4, r2, r3
    2f30:	231d      	movs	r3, #29
    2f32:	18fb      	adds	r3, r7, r3
    2f34:	781b      	ldrb	r3, [r3, #0]
    2f36:	009b      	lsls	r3, r3, #2
    2f38:	683a      	ldr	r2, [r7, #0]
    2f3a:	18d3      	adds	r3, r2, r3
    2f3c:	681a      	ldr	r2, [r3, #0]
    2f3e:	4b14      	ldr	r3, [pc, #80]	; (2f90 <read_mag+0x1d4>)
    2f40:	4914      	ldr	r1, [pc, #80]	; (2f94 <read_mag+0x1d8>)
    2f42:	1c10      	adds	r0, r2, #0
    2f44:	4798      	blx	r3
    2f46:	1c03      	adds	r3, r0, #0
    2f48:	6023      	str	r3, [r4, #0]
	for (i=0;i<3;i++){
    2f4a:	231d      	movs	r3, #29
    2f4c:	18fb      	adds	r3, r7, r3
    2f4e:	781a      	ldrb	r2, [r3, #0]
    2f50:	231d      	movs	r3, #29
    2f52:	18fb      	adds	r3, r7, r3
    2f54:	3201      	adds	r2, #1
    2f56:	701a      	strb	r2, [r3, #0]
    2f58:	231d      	movs	r3, #29
    2f5a:	18fb      	adds	r3, r7, r3
    2f5c:	781b      	ldrb	r3, [r3, #0]
    2f5e:	2b02      	cmp	r3, #2
    2f60:	d9e0      	bls.n	2f24 <read_mag+0x168>
	}
	
	return counter1;
    2f62:	231e      	movs	r3, #30
    2f64:	18fb      	adds	r3, r7, r3
    2f66:	781b      	ldrb	r3, [r3, #0]
}
    2f68:	0018      	movs	r0, r3
    2f6a:	46bd      	mov	sp, r7
    2f6c:	b009      	add	sp, #36	; 0x24
    2f6e:	bd90      	pop	{r4, r7, pc}
    2f70:	200010a4 	.word	0x200010a4
    2f74:	000146b5 	.word	0x000146b5
    2f78:	0000e005 	.word	0x0000e005
    2f7c:	000147a5 	.word	0x000147a5
    2f80:	00015515 	.word	0x00015515
    2f84:	00014ac9 	.word	0x00014ac9
    2f88:	000144f9 	.word	0x000144f9
    2f8c:	00002f99 	.word	0x00002f99
    2f90:	0001e785 	.word	0x0001e785
    2f94:	45dac000 	.word	0x45dac000

00002f98 <parse_mag_data>:

float parse_mag_data(uint8_t data[3]){
    2f98:	b580      	push	{r7, lr}
    2f9a:	b084      	sub	sp, #16
    2f9c:	af00      	add	r7, sp, #0
    2f9e:	6078      	str	r0, [r7, #4]
	float result;
	int32_t temp=0x00000000;
    2fa0:	2300      	movs	r3, #0
    2fa2:	60fb      	str	r3, [r7, #12]
	if(data[0] & 0x80){//negative number
    2fa4:	687b      	ldr	r3, [r7, #4]
    2fa6:	781b      	ldrb	r3, [r3, #0]
    2fa8:	b25b      	sxtb	r3, r3
    2faa:	2b00      	cmp	r3, #0
    2fac:	da04      	bge.n	2fb8 <parse_mag_data+0x20>
		temp=0xff;
    2fae:	23ff      	movs	r3, #255	; 0xff
    2fb0:	60fb      	str	r3, [r7, #12]
		temp=temp<<8;
    2fb2:	68fb      	ldr	r3, [r7, #12]
    2fb4:	021b      	lsls	r3, r3, #8
    2fb6:	60fb      	str	r3, [r7, #12]
	}
	temp=temp+data[0];
    2fb8:	687b      	ldr	r3, [r7, #4]
    2fba:	781b      	ldrb	r3, [r3, #0]
    2fbc:	001a      	movs	r2, r3
    2fbe:	68fb      	ldr	r3, [r7, #12]
    2fc0:	189b      	adds	r3, r3, r2
    2fc2:	60fb      	str	r3, [r7, #12]
	temp=temp<<8;
    2fc4:	68fb      	ldr	r3, [r7, #12]
    2fc6:	021b      	lsls	r3, r3, #8
    2fc8:	60fb      	str	r3, [r7, #12]
	temp=temp+data[1];
    2fca:	687b      	ldr	r3, [r7, #4]
    2fcc:	3301      	adds	r3, #1
    2fce:	781b      	ldrb	r3, [r3, #0]
    2fd0:	001a      	movs	r2, r3
    2fd2:	68fb      	ldr	r3, [r7, #12]
    2fd4:	189b      	adds	r3, r3, r2
    2fd6:	60fb      	str	r3, [r7, #12]
	temp=temp<<8;
    2fd8:	68fb      	ldr	r3, [r7, #12]
    2fda:	021b      	lsls	r3, r3, #8
    2fdc:	60fb      	str	r3, [r7, #12]
	temp=temp+data[2];
    2fde:	687b      	ldr	r3, [r7, #4]
    2fe0:	3302      	adds	r3, #2
    2fe2:	781b      	ldrb	r3, [r3, #0]
    2fe4:	001a      	movs	r2, r3
    2fe6:	68fb      	ldr	r3, [r7, #12]
    2fe8:	189b      	adds	r3, r3, r2
    2fea:	60fb      	str	r3, [r7, #12]
	result=temp;
    2fec:	4b04      	ldr	r3, [pc, #16]	; (3000 <parse_mag_data+0x68>)
    2fee:	68f8      	ldr	r0, [r7, #12]
    2ff0:	4798      	blx	r3
    2ff2:	1c03      	adds	r3, r0, #0
    2ff4:	60bb      	str	r3, [r7, #8]
	return result;
    2ff6:	68bb      	ldr	r3, [r7, #8]
}
    2ff8:	1c18      	adds	r0, r3, #0
    2ffa:	46bd      	mov	sp, r7
    2ffc:	b004      	add	sp, #16
    2ffe:	bd80      	pop	{r7, pc}
    3000:	0001f11d 	.word	0x0001f11d

00003004 <setup_mag>:

void setup_mag(struct spi_slave_inst *const sensor){
    3004:	b580      	push	{r7, lr}
    3006:	b084      	sub	sp, #16
    3008:	af00      	add	r7, sp, #0
    300a:	6078      	str	r0, [r7, #4]
	uint8_t write_buffer[7];
	//select sensor
	config_spi(sensors);
    300c:	2001      	movs	r0, #1
    300e:	4b4d      	ldr	r3, [pc, #308]	; (3144 <setup_mag+0x140>)
    3010:	4798      	blx	r3
	spi_select_slave(&spi_main, sensor, true);
    3012:	6879      	ldr	r1, [r7, #4]
    3014:	4b4c      	ldr	r3, [pc, #304]	; (3148 <setup_mag+0x144>)
    3016:	2201      	movs	r2, #1
    3018:	0018      	movs	r0, r3
    301a:	4b4c      	ldr	r3, [pc, #304]	; (314c <setup_mag+0x148>)
    301c:	4798      	blx	r3
	spi_clear();
    301e:	4b4c      	ldr	r3, [pc, #304]	; (3150 <setup_mag+0x14c>)
    3020:	4798      	blx	r3
	//Set cycle count registers
	write_buffer[0]=0x04;//location of first write count register
    3022:	2308      	movs	r3, #8
    3024:	18fb      	adds	r3, r7, r3
    3026:	2204      	movs	r2, #4
    3028:	701a      	strb	r2, [r3, #0]
	write_buffer[1]=cycle_count1;
    302a:	4b4a      	ldr	r3, [pc, #296]	; (3154 <setup_mag+0x150>)
    302c:	781a      	ldrb	r2, [r3, #0]
    302e:	2308      	movs	r3, #8
    3030:	18fb      	adds	r3, r7, r3
    3032:	705a      	strb	r2, [r3, #1]
	write_buffer[2]=cycle_count2;
    3034:	4b48      	ldr	r3, [pc, #288]	; (3158 <setup_mag+0x154>)
    3036:	781a      	ldrb	r2, [r3, #0]
    3038:	2308      	movs	r3, #8
    303a:	18fb      	adds	r3, r7, r3
    303c:	709a      	strb	r2, [r3, #2]
	write_buffer[3]=cycle_count1;
    303e:	4b45      	ldr	r3, [pc, #276]	; (3154 <setup_mag+0x150>)
    3040:	781a      	ldrb	r2, [r3, #0]
    3042:	2308      	movs	r3, #8
    3044:	18fb      	adds	r3, r7, r3
    3046:	70da      	strb	r2, [r3, #3]
	write_buffer[4]=cycle_count2;
    3048:	4b43      	ldr	r3, [pc, #268]	; (3158 <setup_mag+0x154>)
    304a:	781a      	ldrb	r2, [r3, #0]
    304c:	2308      	movs	r3, #8
    304e:	18fb      	adds	r3, r7, r3
    3050:	711a      	strb	r2, [r3, #4]
	write_buffer[5]=cycle_count1;
    3052:	4b40      	ldr	r3, [pc, #256]	; (3154 <setup_mag+0x150>)
    3054:	781a      	ldrb	r2, [r3, #0]
    3056:	2308      	movs	r3, #8
    3058:	18fb      	adds	r3, r7, r3
    305a:	715a      	strb	r2, [r3, #5]
	write_buffer[6]=cycle_count2;
    305c:	4b3e      	ldr	r3, [pc, #248]	; (3158 <setup_mag+0x154>)
    305e:	781a      	ldrb	r2, [r3, #0]
    3060:	2308      	movs	r3, #8
    3062:	18fb      	adds	r3, r7, r3
    3064:	719a      	strb	r2, [r3, #6]
	spi_write_buffer_wait(&spi_main, write_buffer, 7);
    3066:	2308      	movs	r3, #8
    3068:	18f9      	adds	r1, r7, r3
    306a:	4b37      	ldr	r3, [pc, #220]	; (3148 <setup_mag+0x144>)
    306c:	2207      	movs	r2, #7
    306e:	0018      	movs	r0, r3
    3070:	4b3a      	ldr	r3, [pc, #232]	; (315c <setup_mag+0x158>)
    3072:	4798      	blx	r3
	spi_select_slave(&spi_main, sensor, false);
    3074:	6879      	ldr	r1, [r7, #4]
    3076:	4b34      	ldr	r3, [pc, #208]	; (3148 <setup_mag+0x144>)
    3078:	2200      	movs	r2, #0
    307a:	0018      	movs	r0, r3
    307c:	4b33      	ldr	r3, [pc, #204]	; (314c <setup_mag+0x148>)
    307e:	4798      	blx	r3
	//Turn off continuous read mode
	delay_ms(10);
    3080:	200a      	movs	r0, #10
    3082:	4b37      	ldr	r3, [pc, #220]	; (3160 <setup_mag+0x15c>)
    3084:	4798      	blx	r3
	write_buffer[0]=0x01;//location of CRM register
    3086:	2308      	movs	r3, #8
    3088:	18fb      	adds	r3, r7, r3
    308a:	2201      	movs	r2, #1
    308c:	701a      	strb	r2, [r3, #0]
	write_buffer[1]=0x00;
    308e:	2308      	movs	r3, #8
    3090:	18fb      	adds	r3, r7, r3
    3092:	2200      	movs	r2, #0
    3094:	705a      	strb	r2, [r3, #1]
	spi_select_slave(&spi_main, sensor, true);
    3096:	6879      	ldr	r1, [r7, #4]
    3098:	4b2b      	ldr	r3, [pc, #172]	; (3148 <setup_mag+0x144>)
    309a:	2201      	movs	r2, #1
    309c:	0018      	movs	r0, r3
    309e:	4b2b      	ldr	r3, [pc, #172]	; (314c <setup_mag+0x148>)
    30a0:	4798      	blx	r3
	spi_write_buffer_wait(&spi_main, write_buffer, 2);
    30a2:	2308      	movs	r3, #8
    30a4:	18f9      	adds	r1, r7, r3
    30a6:	4b28      	ldr	r3, [pc, #160]	; (3148 <setup_mag+0x144>)
    30a8:	2202      	movs	r2, #2
    30aa:	0018      	movs	r0, r3
    30ac:	4b2b      	ldr	r3, [pc, #172]	; (315c <setup_mag+0x158>)
    30ae:	4798      	blx	r3
	spi_select_slave(&spi_main, sensor, false);
    30b0:	6879      	ldr	r1, [r7, #4]
    30b2:	4b25      	ldr	r3, [pc, #148]	; (3148 <setup_mag+0x144>)
    30b4:	2200      	movs	r2, #0
    30b6:	0018      	movs	r0, r3
    30b8:	4b24      	ldr	r3, [pc, #144]	; (314c <setup_mag+0x148>)
    30ba:	4798      	blx	r3
	//Set BIST register
	delay_us(1);
    30bc:	2001      	movs	r0, #1
    30be:	4b29      	ldr	r3, [pc, #164]	; (3164 <setup_mag+0x160>)
    30c0:	4798      	blx	r3
	write_buffer[0]=0x33;//location of BIST register
    30c2:	2308      	movs	r3, #8
    30c4:	18fb      	adds	r3, r7, r3
    30c6:	2233      	movs	r2, #51	; 0x33
    30c8:	701a      	strb	r2, [r3, #0]
	write_buffer[1]=0x00;	//default value
    30ca:	2308      	movs	r3, #8
    30cc:	18fb      	adds	r3, r7, r3
    30ce:	2200      	movs	r2, #0
    30d0:	705a      	strb	r2, [r3, #1]
	spi_select_slave(&spi_main, sensor, true);
    30d2:	6879      	ldr	r1, [r7, #4]
    30d4:	4b1c      	ldr	r3, [pc, #112]	; (3148 <setup_mag+0x144>)
    30d6:	2201      	movs	r2, #1
    30d8:	0018      	movs	r0, r3
    30da:	4b1c      	ldr	r3, [pc, #112]	; (314c <setup_mag+0x148>)
    30dc:	4798      	blx	r3
	spi_write_buffer_wait(&spi_main, write_buffer, 2);
    30de:	2308      	movs	r3, #8
    30e0:	18f9      	adds	r1, r7, r3
    30e2:	4b19      	ldr	r3, [pc, #100]	; (3148 <setup_mag+0x144>)
    30e4:	2202      	movs	r2, #2
    30e6:	0018      	movs	r0, r3
    30e8:	4b1c      	ldr	r3, [pc, #112]	; (315c <setup_mag+0x158>)
    30ea:	4798      	blx	r3
	spi_select_slave(&spi_main, sensor, false);
    30ec:	6879      	ldr	r1, [r7, #4]
    30ee:	4b16      	ldr	r3, [pc, #88]	; (3148 <setup_mag+0x144>)
    30f0:	2200      	movs	r2, #0
    30f2:	0018      	movs	r0, r3
    30f4:	4b15      	ldr	r3, [pc, #84]	; (314c <setup_mag+0x148>)
    30f6:	4798      	blx	r3
	//SET HSHAKe register
	delay_us(1);
    30f8:	2001      	movs	r0, #1
    30fa:	4b1a      	ldr	r3, [pc, #104]	; (3164 <setup_mag+0x160>)
    30fc:	4798      	blx	r3
	write_buffer[0]=0x35;//location of HSHAKE register
    30fe:	2308      	movs	r3, #8
    3100:	18fb      	adds	r3, r7, r3
    3102:	2235      	movs	r2, #53	; 0x35
    3104:	701a      	strb	r2, [r3, #0]
	write_buffer[1]=0x1B;//default value
    3106:	2308      	movs	r3, #8
    3108:	18fb      	adds	r3, r7, r3
    310a:	221b      	movs	r2, #27
    310c:	705a      	strb	r2, [r3, #1]
	spi_select_slave(&spi_main, sensor, true);
    310e:	6879      	ldr	r1, [r7, #4]
    3110:	4b0d      	ldr	r3, [pc, #52]	; (3148 <setup_mag+0x144>)
    3112:	2201      	movs	r2, #1
    3114:	0018      	movs	r0, r3
    3116:	4b0d      	ldr	r3, [pc, #52]	; (314c <setup_mag+0x148>)
    3118:	4798      	blx	r3
	spi_write_buffer_wait(&spi_main, write_buffer, 2);
    311a:	2308      	movs	r3, #8
    311c:	18f9      	adds	r1, r7, r3
    311e:	4b0a      	ldr	r3, [pc, #40]	; (3148 <setup_mag+0x144>)
    3120:	2202      	movs	r2, #2
    3122:	0018      	movs	r0, r3
    3124:	4b0d      	ldr	r3, [pc, #52]	; (315c <setup_mag+0x158>)
    3126:	4798      	blx	r3
	spi_select_slave(&spi_main, sensor, false);
    3128:	6879      	ldr	r1, [r7, #4]
    312a:	4b07      	ldr	r3, [pc, #28]	; (3148 <setup_mag+0x144>)
    312c:	2200      	movs	r2, #0
    312e:	0018      	movs	r0, r3
    3130:	4b06      	ldr	r3, [pc, #24]	; (314c <setup_mag+0x148>)
    3132:	4798      	blx	r3
	config_spi(LCD);
    3134:	2000      	movs	r0, #0
    3136:	4b03      	ldr	r3, [pc, #12]	; (3144 <setup_mag+0x140>)
    3138:	4798      	blx	r3
}
    313a:	46c0      	nop			; (mov r8, r8)
    313c:	46bd      	mov	sp, r7
    313e:	b004      	add	sp, #16
    3140:	bd80      	pop	{r7, pc}
    3142:	46c0      	nop			; (mov r8, r8)
    3144:	0000df9d 	.word	0x0000df9d
    3148:	200010a4 	.word	0x200010a4
    314c:	000146b5 	.word	0x000146b5
    3150:	0000e005 	.word	0x0000e005
    3154:	200000ac 	.word	0x200000ac
    3158:	200000ad 	.word	0x200000ad
    315c:	000147a5 	.word	0x000147a5
    3160:	00015545 	.word	0x00015545
    3164:	00015515 	.word	0x00015515

00003168 <adjustErrorSensitivity>:




void adjustErrorSensitivity(void){
    3168:	b580      	push	{r7, lr}
    316a:	af00      	add	r7, sp, #0
	options.errorSensitivity = options.errorSensitivity+errorSensitivityAdjustmentIncrement;
    316c:	4b0d      	ldr	r3, [pc, #52]	; (31a4 <adjustErrorSensitivity+0x3c>)
    316e:	689a      	ldr	r2, [r3, #8]
    3170:	4b0d      	ldr	r3, [pc, #52]	; (31a8 <adjustErrorSensitivity+0x40>)
    3172:	21fa      	movs	r1, #250	; 0xfa
    3174:	0589      	lsls	r1, r1, #22
    3176:	1c10      	adds	r0, r2, #0
    3178:	4798      	blx	r3
    317a:	1c03      	adds	r3, r0, #0
    317c:	1c1a      	adds	r2, r3, #0
    317e:	4b09      	ldr	r3, [pc, #36]	; (31a4 <adjustErrorSensitivity+0x3c>)
    3180:	609a      	str	r2, [r3, #8]
	
	if (options.errorSensitivity>errorSensitivityAdjustmentMax){
    3182:	4b08      	ldr	r3, [pc, #32]	; (31a4 <adjustErrorSensitivity+0x3c>)
    3184:	689a      	ldr	r2, [r3, #8]
    3186:	4b09      	ldr	r3, [pc, #36]	; (31ac <adjustErrorSensitivity+0x44>)
    3188:	4909      	ldr	r1, [pc, #36]	; (31b0 <adjustErrorSensitivity+0x48>)
    318a:	1c10      	adds	r0, r2, #0
    318c:	4798      	blx	r3
    318e:	1e03      	subs	r3, r0, #0
    3190:	d100      	bne.n	3194 <adjustErrorSensitivity+0x2c>
		options.errorSensitivity = errorSensitivityAdjustmentMin;
		
	}
	
}
    3192:	e003      	b.n	319c <adjustErrorSensitivity+0x34>
		options.errorSensitivity = errorSensitivityAdjustmentMin;
    3194:	4b03      	ldr	r3, [pc, #12]	; (31a4 <adjustErrorSensitivity+0x3c>)
    3196:	22fc      	movs	r2, #252	; 0xfc
    3198:	0592      	lsls	r2, r2, #22
    319a:	609a      	str	r2, [r3, #8]
}
    319c:	46c0      	nop			; (mov r8, r8)
    319e:	46bd      	mov	sp, r7
    31a0:	bd80      	pop	{r7, pc}
    31a2:	46c0      	nop			; (mov r8, r8)
    31a4:	20002eec 	.word	0x20002eec
    31a8:	0001e461 	.word	0x0001e461
    31ac:	0001e2fd 	.word	0x0001e2fd
    31b0:	40400000 	.word	0x40400000

000031b4 <increment_error_count>:

bool increment_error_count(struct MEASUREMENT *meas_inst)
{
    31b4:	b580      	push	{r7, lr}
    31b6:	b084      	sub	sp, #16
    31b8:	af00      	add	r7, sp, #0
    31ba:	6078      	str	r0, [r7, #4]
	uint32_t array_max;
	bool error_incremented;
	array_max = sizeof(meas_inst->measurement_error)/sizeof(meas_inst->measurement_error[0]);
    31bc:	2308      	movs	r3, #8
    31be:	60bb      	str	r3, [r7, #8]
	if 	((meas_inst->num_errors+1)<array_max){
    31c0:	687b      	ldr	r3, [r7, #4]
    31c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    31c4:	1c5a      	adds	r2, r3, #1
    31c6:	68bb      	ldr	r3, [r7, #8]
    31c8:	429a      	cmp	r2, r3
    31ca:	d209      	bcs.n	31e0 <increment_error_count+0x2c>
		meas_inst->num_errors++;
    31cc:	687b      	ldr	r3, [r7, #4]
    31ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    31d0:	1c5a      	adds	r2, r3, #1
    31d2:	687b      	ldr	r3, [r7, #4]
    31d4:	659a      	str	r2, [r3, #88]	; 0x58
		error_incremented = true;
    31d6:	230f      	movs	r3, #15
    31d8:	18fb      	adds	r3, r7, r3
    31da:	2201      	movs	r2, #1
    31dc:	701a      	strb	r2, [r3, #0]
    31de:	e003      	b.n	31e8 <increment_error_count+0x34>
	}else{
		error_incremented = false;
    31e0:	230f      	movs	r3, #15
    31e2:	18fb      	adds	r3, r7, r3
    31e4:	2200      	movs	r2, #0
    31e6:	701a      	strb	r2, [r3, #0]
	}
	return error_incremented;
    31e8:	230f      	movs	r3, #15
    31ea:	18fb      	adds	r3, r7, r3
    31ec:	781b      	ldrb	r3, [r3, #0]
}
    31ee:	0018      	movs	r0, r3
    31f0:	46bd      	mov	sp, r7
    31f2:	b004      	add	sp, #16
    31f4:	bd80      	pop	{r7, pc}
	...

000031f8 <error_check>:

void error_check(struct MEASUREMENT *meas_inst){
    31f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    31fa:	b099      	sub	sp, #100	; 0x64
    31fc:	af02      	add	r7, sp, #8
    31fe:	6078      	str	r0, [r7, #4]
	float foo1, foo2;
	uint8_t i;
	#define errlim_mag 200 // number of stdev's
	#define errlim_disp 200 // number of stdev's
	
	accel_err_limit = errlim_mag*max(cal_report_azm_inc.mag_stdev_a1, cal_report_azm_inc.mag_stdev_a2);
    3200:	4bc9      	ldr	r3, [pc, #804]	; (3528 <error_check+0x330>)
    3202:	699a      	ldr	r2, [r3, #24]
    3204:	4bc8      	ldr	r3, [pc, #800]	; (3528 <error_check+0x330>)
    3206:	69d9      	ldr	r1, [r3, #28]
    3208:	4bc8      	ldr	r3, [pc, #800]	; (352c <error_check+0x334>)
    320a:	1c10      	adds	r0, r2, #0
    320c:	4798      	blx	r3
    320e:	1e03      	subs	r3, r0, #0
    3210:	d007      	beq.n	3222 <error_check+0x2a>
    3212:	4bc5      	ldr	r3, [pc, #788]	; (3528 <error_check+0x330>)
    3214:	699a      	ldr	r2, [r3, #24]
    3216:	4bc6      	ldr	r3, [pc, #792]	; (3530 <error_check+0x338>)
    3218:	49c6      	ldr	r1, [pc, #792]	; (3534 <error_check+0x33c>)
    321a:	1c10      	adds	r0, r2, #0
    321c:	4798      	blx	r3
    321e:	1c03      	adds	r3, r0, #0
    3220:	e006      	b.n	3230 <error_check+0x38>
    3222:	4bc1      	ldr	r3, [pc, #772]	; (3528 <error_check+0x330>)
    3224:	69da      	ldr	r2, [r3, #28]
    3226:	4bc2      	ldr	r3, [pc, #776]	; (3530 <error_check+0x338>)
    3228:	49c2      	ldr	r1, [pc, #776]	; (3534 <error_check+0x33c>)
    322a:	1c10      	adds	r0, r2, #0
    322c:	4798      	blx	r3
    322e:	1c03      	adds	r3, r0, #0
    3230:	64bb      	str	r3, [r7, #72]	; 0x48
	comp_err_limit  = errlim_mag*max(cal_report_azm_inc.mag_stdev_c1, cal_report_azm_inc.mag_stdev_c2);
    3232:	4bbd      	ldr	r3, [pc, #756]	; (3528 <error_check+0x330>)
    3234:	6a1a      	ldr	r2, [r3, #32]
    3236:	4bbc      	ldr	r3, [pc, #752]	; (3528 <error_check+0x330>)
    3238:	6a59      	ldr	r1, [r3, #36]	; 0x24
    323a:	4bbc      	ldr	r3, [pc, #752]	; (352c <error_check+0x334>)
    323c:	1c10      	adds	r0, r2, #0
    323e:	4798      	blx	r3
    3240:	1e03      	subs	r3, r0, #0
    3242:	d007      	beq.n	3254 <error_check+0x5c>
    3244:	4bb8      	ldr	r3, [pc, #736]	; (3528 <error_check+0x330>)
    3246:	6a1a      	ldr	r2, [r3, #32]
    3248:	4bb9      	ldr	r3, [pc, #740]	; (3530 <error_check+0x338>)
    324a:	49ba      	ldr	r1, [pc, #744]	; (3534 <error_check+0x33c>)
    324c:	1c10      	adds	r0, r2, #0
    324e:	4798      	blx	r3
    3250:	1c03      	adds	r3, r0, #0
    3252:	e006      	b.n	3262 <error_check+0x6a>
    3254:	4bb4      	ldr	r3, [pc, #720]	; (3528 <error_check+0x330>)
    3256:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    3258:	4bb5      	ldr	r3, [pc, #724]	; (3530 <error_check+0x338>)
    325a:	49b6      	ldr	r1, [pc, #728]	; (3534 <error_check+0x33c>)
    325c:	1c10      	adds	r0, r2, #0
    325e:	4798      	blx	r3
    3260:	1c03      	adds	r3, r0, #0
    3262:	647b      	str	r3, [r7, #68]	; 0x44
	
	accel_err_limit = 0.5;
    3264:	23fc      	movs	r3, #252	; 0xfc
    3266:	059b      	lsls	r3, r3, #22
    3268:	64bb      	str	r3, [r7, #72]	; 0x48
	comp_err_limit  = 0.5;
    326a:	23fc      	movs	r3, #252	; 0xfc
    326c:	059b      	lsls	r3, r3, #22
    326e:	647b      	str	r3, [r7, #68]	; 0x44
	
	maga1 = calc_magnitude(meas_inst->a1xyz);
    3270:	687b      	ldr	r3, [r7, #4]
    3272:	3320      	adds	r3, #32
    3274:	0018      	movs	r0, r3
    3276:	4bb0      	ldr	r3, [pc, #704]	; (3538 <error_check+0x340>)
    3278:	4798      	blx	r3
    327a:	1c03      	adds	r3, r0, #0
    327c:	643b      	str	r3, [r7, #64]	; 0x40
	maga2 = calc_magnitude(meas_inst->a2xyz);
    327e:	687b      	ldr	r3, [r7, #4]
    3280:	332c      	adds	r3, #44	; 0x2c
    3282:	0018      	movs	r0, r3
    3284:	4bac      	ldr	r3, [pc, #688]	; (3538 <error_check+0x340>)
    3286:	4798      	blx	r3
    3288:	1c03      	adds	r3, r0, #0
    328a:	63fb      	str	r3, [r7, #60]	; 0x3c
	magc1 = calc_magnitude(meas_inst->c1xyz);
    328c:	687b      	ldr	r3, [r7, #4]
    328e:	3338      	adds	r3, #56	; 0x38
    3290:	0018      	movs	r0, r3
    3292:	4ba9      	ldr	r3, [pc, #676]	; (3538 <error_check+0x340>)
    3294:	4798      	blx	r3
    3296:	1c03      	adds	r3, r0, #0
    3298:	63bb      	str	r3, [r7, #56]	; 0x38
	magc2 = calc_magnitude(meas_inst->c2xyz);
    329a:	687b      	ldr	r3, [r7, #4]
    329c:	3344      	adds	r3, #68	; 0x44
    329e:	0018      	movs	r0, r3
    32a0:	4ba5      	ldr	r3, [pc, #660]	; (3538 <error_check+0x340>)
    32a2:	4798      	blx	r3
    32a4:	1c03      	adds	r3, r0, #0
    32a6:	637b      	str	r3, [r7, #52]	; 0x34
		
	//  Magnitude Check accelerometer 1
	//mag = calc_magnitude(meas_inst->a1xyz);
	delta = fabs(maga1-1);
    32a8:	4ba4      	ldr	r3, [pc, #656]	; (353c <error_check+0x344>)
    32aa:	21fe      	movs	r1, #254	; 0xfe
    32ac:	0589      	lsls	r1, r1, #22
    32ae:	6c38      	ldr	r0, [r7, #64]	; 0x40
    32b0:	4798      	blx	r3
    32b2:	1c03      	adds	r3, r0, #0
    32b4:	005b      	lsls	r3, r3, #1
    32b6:	085b      	lsrs	r3, r3, #1
    32b8:	633b      	str	r3, [r7, #48]	; 0x30
	if (fabs(maga1-1)>accel_err_limit)
    32ba:	4ba0      	ldr	r3, [pc, #640]	; (353c <error_check+0x344>)
    32bc:	21fe      	movs	r1, #254	; 0xfe
    32be:	0589      	lsls	r1, r1, #22
    32c0:	6c38      	ldr	r0, [r7, #64]	; 0x40
    32c2:	4798      	blx	r3
    32c4:	1c03      	adds	r3, r0, #0
    32c6:	005b      	lsls	r3, r3, #1
    32c8:	085a      	lsrs	r2, r3, #1
    32ca:	4b98      	ldr	r3, [pc, #608]	; (352c <error_check+0x334>)
    32cc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    32ce:	1c10      	adds	r0, r2, #0
    32d0:	4798      	blx	r3
    32d2:	1e03      	subs	r3, r0, #0
    32d4:	d014      	beq.n	3300 <error_check+0x108>
	{
		meas_inst->measurement_error[meas_inst->num_errors] = accel1_mag_err;
    32d6:	687b      	ldr	r3, [r7, #4]
    32d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    32da:	687a      	ldr	r2, [r7, #4]
    32dc:	215c      	movs	r1, #92	; 0x5c
    32de:	18d3      	adds	r3, r2, r3
    32e0:	185b      	adds	r3, r3, r1
    32e2:	2201      	movs	r2, #1
    32e4:	701a      	strb	r2, [r3, #0]
		meas_inst->measurement_error_data1[meas_inst->num_errors] = maga1;
    32e6:	687b      	ldr	r3, [r7, #4]
    32e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    32ea:	687a      	ldr	r2, [r7, #4]
    32ec:	3318      	adds	r3, #24
    32ee:	009b      	lsls	r3, r3, #2
    32f0:	18d3      	adds	r3, r2, r3
    32f2:	3304      	adds	r3, #4
    32f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    32f6:	601a      	str	r2, [r3, #0]
		increment_error_count(meas_inst);
    32f8:	687b      	ldr	r3, [r7, #4]
    32fa:	0018      	movs	r0, r3
    32fc:	4b90      	ldr	r3, [pc, #576]	; (3540 <error_check+0x348>)
    32fe:	4798      	blx	r3
	}
	//  Magnitude Check accelerometer 2
	//mag = calc_magnitude(meas_inst->a2xyz);
	delta = fabs(maga2-1);
    3300:	4b8e      	ldr	r3, [pc, #568]	; (353c <error_check+0x344>)
    3302:	21fe      	movs	r1, #254	; 0xfe
    3304:	0589      	lsls	r1, r1, #22
    3306:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    3308:	4798      	blx	r3
    330a:	1c03      	adds	r3, r0, #0
    330c:	005b      	lsls	r3, r3, #1
    330e:	085b      	lsrs	r3, r3, #1
    3310:	633b      	str	r3, [r7, #48]	; 0x30
	if (delta>accel_err_limit)
    3312:	4b86      	ldr	r3, [pc, #536]	; (352c <error_check+0x334>)
    3314:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    3316:	6b38      	ldr	r0, [r7, #48]	; 0x30
    3318:	4798      	blx	r3
    331a:	1e03      	subs	r3, r0, #0
    331c:	d014      	beq.n	3348 <error_check+0x150>
	{
		meas_inst->measurement_error[meas_inst->num_errors] = accel2_mag_err;
    331e:	687b      	ldr	r3, [r7, #4]
    3320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    3322:	687a      	ldr	r2, [r7, #4]
    3324:	215c      	movs	r1, #92	; 0x5c
    3326:	18d3      	adds	r3, r2, r3
    3328:	185b      	adds	r3, r3, r1
    332a:	2202      	movs	r2, #2
    332c:	701a      	strb	r2, [r3, #0]
		meas_inst->measurement_error_data1[meas_inst->num_errors] = maga2;
    332e:	687b      	ldr	r3, [r7, #4]
    3330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    3332:	687a      	ldr	r2, [r7, #4]
    3334:	3318      	adds	r3, #24
    3336:	009b      	lsls	r3, r3, #2
    3338:	18d3      	adds	r3, r2, r3
    333a:	3304      	adds	r3, #4
    333c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    333e:	601a      	str	r2, [r3, #0]
		increment_error_count(meas_inst);
    3340:	687b      	ldr	r3, [r7, #4]
    3342:	0018      	movs	r0, r3
    3344:	4b7e      	ldr	r3, [pc, #504]	; (3540 <error_check+0x348>)
    3346:	4798      	blx	r3
	}
	//  Magnitude Check Compass 1
	//mag = calc_magnitude(meas_inst->c1xyz);
	delta = fabs(magc1-1);
    3348:	4b7c      	ldr	r3, [pc, #496]	; (353c <error_check+0x344>)
    334a:	21fe      	movs	r1, #254	; 0xfe
    334c:	0589      	lsls	r1, r1, #22
    334e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3350:	4798      	blx	r3
    3352:	1c03      	adds	r3, r0, #0
    3354:	005b      	lsls	r3, r3, #1
    3356:	085b      	lsrs	r3, r3, #1
    3358:	633b      	str	r3, [r7, #48]	; 0x30
 	if (delta>comp_err_limit)
    335a:	4b74      	ldr	r3, [pc, #464]	; (352c <error_check+0x334>)
    335c:	6c79      	ldr	r1, [r7, #68]	; 0x44
    335e:	6b38      	ldr	r0, [r7, #48]	; 0x30
    3360:	4798      	blx	r3
    3362:	1e03      	subs	r3, r0, #0
    3364:	d014      	beq.n	3390 <error_check+0x198>
	{
		meas_inst->measurement_error[meas_inst->num_errors] = comp1_mag_err;
    3366:	687b      	ldr	r3, [r7, #4]
    3368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    336a:	687a      	ldr	r2, [r7, #4]
    336c:	215c      	movs	r1, #92	; 0x5c
    336e:	18d3      	adds	r3, r2, r3
    3370:	185b      	adds	r3, r3, r1
    3372:	2203      	movs	r2, #3
    3374:	701a      	strb	r2, [r3, #0]
		meas_inst->measurement_error_data1[meas_inst->num_errors] = magc1;
    3376:	687b      	ldr	r3, [r7, #4]
    3378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    337a:	687a      	ldr	r2, [r7, #4]
    337c:	3318      	adds	r3, #24
    337e:	009b      	lsls	r3, r3, #2
    3380:	18d3      	adds	r3, r2, r3
    3382:	3304      	adds	r3, #4
    3384:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3386:	601a      	str	r2, [r3, #0]
		increment_error_count(meas_inst);
    3388:	687b      	ldr	r3, [r7, #4]
    338a:	0018      	movs	r0, r3
    338c:	4b6c      	ldr	r3, [pc, #432]	; (3540 <error_check+0x348>)
    338e:	4798      	blx	r3

	}
	//  Magnitude Check Compass 2
	//mag = calc_magnitude(meas_inst->c2xyz);
	delta = fabs(magc2-1);
    3390:	4b6a      	ldr	r3, [pc, #424]	; (353c <error_check+0x344>)
    3392:	21fe      	movs	r1, #254	; 0xfe
    3394:	0589      	lsls	r1, r1, #22
    3396:	6b78      	ldr	r0, [r7, #52]	; 0x34
    3398:	4798      	blx	r3
    339a:	1c03      	adds	r3, r0, #0
    339c:	005b      	lsls	r3, r3, #1
    339e:	085b      	lsrs	r3, r3, #1
    33a0:	633b      	str	r3, [r7, #48]	; 0x30
	if (delta>comp_err_limit)
    33a2:	4b62      	ldr	r3, [pc, #392]	; (352c <error_check+0x334>)
    33a4:	6c79      	ldr	r1, [r7, #68]	; 0x44
    33a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
    33a8:	4798      	blx	r3
    33aa:	1e03      	subs	r3, r0, #0
    33ac:	d014      	beq.n	33d8 <error_check+0x1e0>
	{
		meas_inst->measurement_error[meas_inst->num_errors] = comp2_mag_err;
    33ae:	687b      	ldr	r3, [r7, #4]
    33b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    33b2:	687a      	ldr	r2, [r7, #4]
    33b4:	215c      	movs	r1, #92	; 0x5c
    33b6:	18d3      	adds	r3, r2, r3
    33b8:	185b      	adds	r3, r3, r1
    33ba:	2204      	movs	r2, #4
    33bc:	701a      	strb	r2, [r3, #0]
		meas_inst->measurement_error_data1[meas_inst->num_errors] = magc2;
    33be:	687b      	ldr	r3, [r7, #4]
    33c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    33c2:	687a      	ldr	r2, [r7, #4]
    33c4:	3318      	adds	r3, #24
    33c6:	009b      	lsls	r3, r3, #2
    33c8:	18d3      	adds	r3, r2, r3
    33ca:	3304      	adds	r3, #4
    33cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    33ce:	601a      	str	r2, [r3, #0]
		increment_error_count(meas_inst);
    33d0:	687b      	ldr	r3, [r7, #4]
    33d2:	0018      	movs	r0, r3
    33d4:	4b5a      	ldr	r3, [pc, #360]	; (3540 <error_check+0x348>)
    33d6:	4798      	blx	r3

	}
	
	accel_err_limit = errlim_disp*max(cal_report_azm_inc.mag_stdev_a1, cal_report_azm_inc.mag_stdev_a2);
    33d8:	4b53      	ldr	r3, [pc, #332]	; (3528 <error_check+0x330>)
    33da:	699a      	ldr	r2, [r3, #24]
    33dc:	4b52      	ldr	r3, [pc, #328]	; (3528 <error_check+0x330>)
    33de:	69d9      	ldr	r1, [r3, #28]
    33e0:	4b52      	ldr	r3, [pc, #328]	; (352c <error_check+0x334>)
    33e2:	1c10      	adds	r0, r2, #0
    33e4:	4798      	blx	r3
    33e6:	1e03      	subs	r3, r0, #0
    33e8:	d007      	beq.n	33fa <error_check+0x202>
    33ea:	4b4f      	ldr	r3, [pc, #316]	; (3528 <error_check+0x330>)
    33ec:	699a      	ldr	r2, [r3, #24]
    33ee:	4b50      	ldr	r3, [pc, #320]	; (3530 <error_check+0x338>)
    33f0:	4950      	ldr	r1, [pc, #320]	; (3534 <error_check+0x33c>)
    33f2:	1c10      	adds	r0, r2, #0
    33f4:	4798      	blx	r3
    33f6:	1c03      	adds	r3, r0, #0
    33f8:	e006      	b.n	3408 <error_check+0x210>
    33fa:	4b4b      	ldr	r3, [pc, #300]	; (3528 <error_check+0x330>)
    33fc:	69da      	ldr	r2, [r3, #28]
    33fe:	4b4c      	ldr	r3, [pc, #304]	; (3530 <error_check+0x338>)
    3400:	494c      	ldr	r1, [pc, #304]	; (3534 <error_check+0x33c>)
    3402:	1c10      	adds	r0, r2, #0
    3404:	4798      	blx	r3
    3406:	1c03      	adds	r3, r0, #0
    3408:	64bb      	str	r3, [r7, #72]	; 0x48
	comp_err_limit  = errlim_disp*max(cal_report_azm_inc.mag_stdev_c1, cal_report_azm_inc.mag_stdev_c2);
    340a:	4b47      	ldr	r3, [pc, #284]	; (3528 <error_check+0x330>)
    340c:	6a1a      	ldr	r2, [r3, #32]
    340e:	4b46      	ldr	r3, [pc, #280]	; (3528 <error_check+0x330>)
    3410:	6a59      	ldr	r1, [r3, #36]	; 0x24
    3412:	4b46      	ldr	r3, [pc, #280]	; (352c <error_check+0x334>)
    3414:	1c10      	adds	r0, r2, #0
    3416:	4798      	blx	r3
    3418:	1e03      	subs	r3, r0, #0
    341a:	d007      	beq.n	342c <error_check+0x234>
    341c:	4b42      	ldr	r3, [pc, #264]	; (3528 <error_check+0x330>)
    341e:	6a1a      	ldr	r2, [r3, #32]
    3420:	4b43      	ldr	r3, [pc, #268]	; (3530 <error_check+0x338>)
    3422:	4944      	ldr	r1, [pc, #272]	; (3534 <error_check+0x33c>)
    3424:	1c10      	adds	r0, r2, #0
    3426:	4798      	blx	r3
    3428:	1c03      	adds	r3, r0, #0
    342a:	e006      	b.n	343a <error_check+0x242>
    342c:	4b3e      	ldr	r3, [pc, #248]	; (3528 <error_check+0x330>)
    342e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    3430:	4b3f      	ldr	r3, [pc, #252]	; (3530 <error_check+0x338>)
    3432:	4940      	ldr	r1, [pc, #256]	; (3534 <error_check+0x33c>)
    3434:	1c10      	adds	r0, r2, #0
    3436:	4798      	blx	r3
    3438:	1c03      	adds	r3, r0, #0
    343a:	647b      	str	r3, [r7, #68]	; 0x44
	
	
	
	// Axis check, Accelerometer
	for (i=0;i<3;i++){
    343c:	234f      	movs	r3, #79	; 0x4f
    343e:	18fb      	adds	r3, r7, r3
    3440:	2200      	movs	r2, #0
    3442:	701a      	strb	r2, [r3, #0]
    3444:	e066      	b.n	3514 <error_check+0x31c>
		//  Cycle through all 3 axis
		delta = fabs((meas_inst->a1xyz[i]/maga1) - (meas_inst->a2xyz[i]/maga2));
    3446:	234f      	movs	r3, #79	; 0x4f
    3448:	18fb      	adds	r3, r7, r3
    344a:	781a      	ldrb	r2, [r3, #0]
    344c:	687b      	ldr	r3, [r7, #4]
    344e:	3208      	adds	r2, #8
    3450:	0092      	lsls	r2, r2, #2
    3452:	58d2      	ldr	r2, [r2, r3]
    3454:	4b3b      	ldr	r3, [pc, #236]	; (3544 <error_check+0x34c>)
    3456:	6c39      	ldr	r1, [r7, #64]	; 0x40
    3458:	1c10      	adds	r0, r2, #0
    345a:	4798      	blx	r3
    345c:	1c03      	adds	r3, r0, #0
    345e:	1c1c      	adds	r4, r3, #0
    3460:	234f      	movs	r3, #79	; 0x4f
    3462:	18fb      	adds	r3, r7, r3
    3464:	781b      	ldrb	r3, [r3, #0]
    3466:	687a      	ldr	r2, [r7, #4]
    3468:	330a      	adds	r3, #10
    346a:	009b      	lsls	r3, r3, #2
    346c:	18d3      	adds	r3, r2, r3
    346e:	3304      	adds	r3, #4
    3470:	681a      	ldr	r2, [r3, #0]
    3472:	4b34      	ldr	r3, [pc, #208]	; (3544 <error_check+0x34c>)
    3474:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3476:	1c10      	adds	r0, r2, #0
    3478:	4798      	blx	r3
    347a:	1c03      	adds	r3, r0, #0
    347c:	1c1a      	adds	r2, r3, #0
    347e:	4b2f      	ldr	r3, [pc, #188]	; (353c <error_check+0x344>)
    3480:	1c11      	adds	r1, r2, #0
    3482:	1c20      	adds	r0, r4, #0
    3484:	4798      	blx	r3
    3486:	1c03      	adds	r3, r0, #0
    3488:	005b      	lsls	r3, r3, #1
    348a:	085b      	lsrs	r3, r3, #1
    348c:	633b      	str	r3, [r7, #48]	; 0x30
		accel_err_limit = errlim_disp*cal_report_azm_inc.disp_stdev_acc[i];
    348e:	234f      	movs	r3, #79	; 0x4f
    3490:	18fb      	adds	r3, r7, r3
    3492:	781a      	ldrb	r2, [r3, #0]
    3494:	4b24      	ldr	r3, [pc, #144]	; (3528 <error_check+0x330>)
    3496:	320a      	adds	r2, #10
    3498:	0092      	lsls	r2, r2, #2
    349a:	58d2      	ldr	r2, [r2, r3]
    349c:	4b24      	ldr	r3, [pc, #144]	; (3530 <error_check+0x338>)
    349e:	4925      	ldr	r1, [pc, #148]	; (3534 <error_check+0x33c>)
    34a0:	1c10      	adds	r0, r2, #0
    34a2:	4798      	blx	r3
    34a4:	1c03      	adds	r3, r0, #0
    34a6:	64bb      	str	r3, [r7, #72]	; 0x48
		accel_err_limit = 0.5;
    34a8:	23fc      	movs	r3, #252	; 0xfc
    34aa:	059b      	lsls	r3, r3, #22
    34ac:	64bb      	str	r3, [r7, #72]	; 0x48
		if (delta>accel_err_limit){
    34ae:	4b1f      	ldr	r3, [pc, #124]	; (352c <error_check+0x334>)
    34b0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    34b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
    34b4:	4798      	blx	r3
    34b6:	1e03      	subs	r3, r0, #0
    34b8:	d025      	beq.n	3506 <error_check+0x30e>
			meas_inst->measurement_error[meas_inst->num_errors] = accel_disp_err;
    34ba:	687b      	ldr	r3, [r7, #4]
    34bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    34be:	687a      	ldr	r2, [r7, #4]
    34c0:	215c      	movs	r1, #92	; 0x5c
    34c2:	18d3      	adds	r3, r2, r3
    34c4:	185b      	adds	r3, r3, r1
    34c6:	2205      	movs	r2, #5
    34c8:	701a      	strb	r2, [r3, #0]
			meas_inst->measurement_error_data1[meas_inst->num_errors] = delta;
    34ca:	687b      	ldr	r3, [r7, #4]
    34cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    34ce:	687a      	ldr	r2, [r7, #4]
    34d0:	3318      	adds	r3, #24
    34d2:	009b      	lsls	r3, r3, #2
    34d4:	18d3      	adds	r3, r2, r3
    34d6:	3304      	adds	r3, #4
    34d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    34da:	601a      	str	r2, [r3, #0]
			meas_inst->measurement_error_data2[meas_inst->num_errors] = i+1;
    34dc:	687b      	ldr	r3, [r7, #4]
    34de:	6d9c      	ldr	r4, [r3, #88]	; 0x58
    34e0:	234f      	movs	r3, #79	; 0x4f
    34e2:	18fb      	adds	r3, r7, r3
    34e4:	781b      	ldrb	r3, [r3, #0]
    34e6:	1c5a      	adds	r2, r3, #1
    34e8:	4b17      	ldr	r3, [pc, #92]	; (3548 <error_check+0x350>)
    34ea:	0010      	movs	r0, r2
    34ec:	4798      	blx	r3
    34ee:	1c01      	adds	r1, r0, #0
    34f0:	687a      	ldr	r2, [r7, #4]
    34f2:	0023      	movs	r3, r4
    34f4:	3320      	adds	r3, #32
    34f6:	009b      	lsls	r3, r3, #2
    34f8:	18d3      	adds	r3, r2, r3
    34fa:	3304      	adds	r3, #4
    34fc:	6019      	str	r1, [r3, #0]
			increment_error_count(meas_inst);
    34fe:	687b      	ldr	r3, [r7, #4]
    3500:	0018      	movs	r0, r3
    3502:	4b0f      	ldr	r3, [pc, #60]	; (3540 <error_check+0x348>)
    3504:	4798      	blx	r3
	for (i=0;i<3;i++){
    3506:	234f      	movs	r3, #79	; 0x4f
    3508:	18fb      	adds	r3, r7, r3
    350a:	781a      	ldrb	r2, [r3, #0]
    350c:	234f      	movs	r3, #79	; 0x4f
    350e:	18fb      	adds	r3, r7, r3
    3510:	3201      	adds	r2, #1
    3512:	701a      	strb	r2, [r3, #0]
    3514:	234f      	movs	r3, #79	; 0x4f
    3516:	18fb      	adds	r3, r7, r3
    3518:	781b      	ldrb	r3, [r3, #0]
    351a:	2b02      	cmp	r3, #2
    351c:	d993      	bls.n	3446 <error_check+0x24e>
		}
		
	}
	
	// Axis check, Accelerometer
	for (i=0;i<3;i++){
    351e:	234f      	movs	r3, #79	; 0x4f
    3520:	18fb      	adds	r3, r7, r3
    3522:	2200      	movs	r2, #0
    3524:	701a      	strb	r2, [r3, #0]
    3526:	e07a      	b.n	361e <error_check+0x426>
    3528:	2000188c 	.word	0x2000188c
    352c:	0001e2fd 	.word	0x0001e2fd
    3530:	0001eb65 	.word	0x0001eb65
    3534:	43480000 	.word	0x43480000
    3538:	000020f9 	.word	0x000020f9
    353c:	0001eda5 	.word	0x0001eda5
    3540:	000031b5 	.word	0x000031b5
    3544:	0001e785 	.word	0x0001e785
    3548:	0001f11d 	.word	0x0001f11d
		delta = fabs((meas_inst->c1xyz[i]/magc1) - (meas_inst->c2xyz[i]/magc2));
    354c:	234f      	movs	r3, #79	; 0x4f
    354e:	18fb      	adds	r3, r7, r3
    3550:	781a      	ldrb	r2, [r3, #0]
    3552:	687b      	ldr	r3, [r7, #4]
    3554:	320e      	adds	r2, #14
    3556:	0092      	lsls	r2, r2, #2
    3558:	58d2      	ldr	r2, [r2, r3]
    355a:	4bdb      	ldr	r3, [pc, #876]	; (38c8 <error_check+0x6d0>)
    355c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    355e:	1c10      	adds	r0, r2, #0
    3560:	4798      	blx	r3
    3562:	1c03      	adds	r3, r0, #0
    3564:	1c1c      	adds	r4, r3, #0
    3566:	234f      	movs	r3, #79	; 0x4f
    3568:	18fb      	adds	r3, r7, r3
    356a:	781b      	ldrb	r3, [r3, #0]
    356c:	687a      	ldr	r2, [r7, #4]
    356e:	3310      	adds	r3, #16
    3570:	009b      	lsls	r3, r3, #2
    3572:	18d3      	adds	r3, r2, r3
    3574:	3304      	adds	r3, #4
    3576:	681a      	ldr	r2, [r3, #0]
    3578:	4bd3      	ldr	r3, [pc, #844]	; (38c8 <error_check+0x6d0>)
    357a:	6b79      	ldr	r1, [r7, #52]	; 0x34
    357c:	1c10      	adds	r0, r2, #0
    357e:	4798      	blx	r3
    3580:	1c03      	adds	r3, r0, #0
    3582:	1c1a      	adds	r2, r3, #0
    3584:	4bd1      	ldr	r3, [pc, #836]	; (38cc <error_check+0x6d4>)
    3586:	1c11      	adds	r1, r2, #0
    3588:	1c20      	adds	r0, r4, #0
    358a:	4798      	blx	r3
    358c:	1c03      	adds	r3, r0, #0
    358e:	005b      	lsls	r3, r3, #1
    3590:	085b      	lsrs	r3, r3, #1
    3592:	633b      	str	r3, [r7, #48]	; 0x30
		comp_err_limit = errlim_mag*cal_report_azm_inc.disp_stdev_comp[i];
    3594:	234f      	movs	r3, #79	; 0x4f
    3596:	18fb      	adds	r3, r7, r3
    3598:	781b      	ldrb	r3, [r3, #0]
    359a:	4acd      	ldr	r2, [pc, #820]	; (38d0 <error_check+0x6d8>)
    359c:	330c      	adds	r3, #12
    359e:	009b      	lsls	r3, r3, #2
    35a0:	18d3      	adds	r3, r2, r3
    35a2:	3304      	adds	r3, #4
    35a4:	681a      	ldr	r2, [r3, #0]
    35a6:	4bcb      	ldr	r3, [pc, #812]	; (38d4 <error_check+0x6dc>)
    35a8:	49cb      	ldr	r1, [pc, #812]	; (38d8 <error_check+0x6e0>)
    35aa:	1c10      	adds	r0, r2, #0
    35ac:	4798      	blx	r3
    35ae:	1c03      	adds	r3, r0, #0
    35b0:	647b      	str	r3, [r7, #68]	; 0x44
		comp_err_limit  = 0.5;
    35b2:	23fc      	movs	r3, #252	; 0xfc
    35b4:	059b      	lsls	r3, r3, #22
    35b6:	647b      	str	r3, [r7, #68]	; 0x44
		if (delta>comp_err_limit){
    35b8:	4bc8      	ldr	r3, [pc, #800]	; (38dc <error_check+0x6e4>)
    35ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
    35bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
    35be:	4798      	blx	r3
    35c0:	1e03      	subs	r3, r0, #0
    35c2:	d025      	beq.n	3610 <error_check+0x418>
			meas_inst->measurement_error[meas_inst->num_errors] = comp_disp_err;
    35c4:	687b      	ldr	r3, [r7, #4]
    35c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    35c8:	687a      	ldr	r2, [r7, #4]
    35ca:	215c      	movs	r1, #92	; 0x5c
    35cc:	18d3      	adds	r3, r2, r3
    35ce:	185b      	adds	r3, r3, r1
    35d0:	2206      	movs	r2, #6
    35d2:	701a      	strb	r2, [r3, #0]
			meas_inst->measurement_error_data1[meas_inst->num_errors] = delta;
    35d4:	687b      	ldr	r3, [r7, #4]
    35d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    35d8:	687a      	ldr	r2, [r7, #4]
    35da:	3318      	adds	r3, #24
    35dc:	009b      	lsls	r3, r3, #2
    35de:	18d3      	adds	r3, r2, r3
    35e0:	3304      	adds	r3, #4
    35e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    35e4:	601a      	str	r2, [r3, #0]
			meas_inst->measurement_error_data2[meas_inst->num_errors] = i+1;
    35e6:	687b      	ldr	r3, [r7, #4]
    35e8:	6d9c      	ldr	r4, [r3, #88]	; 0x58
    35ea:	234f      	movs	r3, #79	; 0x4f
    35ec:	18fb      	adds	r3, r7, r3
    35ee:	781b      	ldrb	r3, [r3, #0]
    35f0:	1c5a      	adds	r2, r3, #1
    35f2:	4bbb      	ldr	r3, [pc, #748]	; (38e0 <error_check+0x6e8>)
    35f4:	0010      	movs	r0, r2
    35f6:	4798      	blx	r3
    35f8:	1c01      	adds	r1, r0, #0
    35fa:	687a      	ldr	r2, [r7, #4]
    35fc:	0023      	movs	r3, r4
    35fe:	3320      	adds	r3, #32
    3600:	009b      	lsls	r3, r3, #2
    3602:	18d3      	adds	r3, r2, r3
    3604:	3304      	adds	r3, #4
    3606:	6019      	str	r1, [r3, #0]
			increment_error_count(meas_inst);
    3608:	687b      	ldr	r3, [r7, #4]
    360a:	0018      	movs	r0, r3
    360c:	4bb5      	ldr	r3, [pc, #724]	; (38e4 <error_check+0x6ec>)
    360e:	4798      	blx	r3
	for (i=0;i<3;i++){
    3610:	234f      	movs	r3, #79	; 0x4f
    3612:	18fb      	adds	r3, r7, r3
    3614:	781a      	ldrb	r2, [r3, #0]
    3616:	234f      	movs	r3, #79	; 0x4f
    3618:	18fb      	adds	r3, r7, r3
    361a:	3201      	adds	r2, #1
    361c:	701a      	strb	r2, [r3, #0]
    361e:	234f      	movs	r3, #79	; 0x4f
    3620:	18fb      	adds	r3, r7, r3
    3622:	781b      	ldrb	r3, [r3, #0]
    3624:	2b02      	cmp	r3, #2
    3626:	d991      	bls.n	354c <error_check+0x354>
	}
	
	
	
	//  Check Angle Disparity
	calc_azm_inc_roll_dec(meas_inst->a1xyz, meas_inst->c1xyz, &azm_arr[0], &inc_arr[0], &foo1, &foo2);
    3628:	687b      	ldr	r3, [r7, #4]
    362a:	3320      	adds	r3, #32
    362c:	0018      	movs	r0, r3
    362e:	687b      	ldr	r3, [r7, #4]
    3630:	3338      	adds	r3, #56	; 0x38
    3632:	0019      	movs	r1, r3
    3634:	2310      	movs	r3, #16
    3636:	18fc      	adds	r4, r7, r3
    3638:	2320      	movs	r3, #32
    363a:	18fa      	adds	r2, r7, r3
    363c:	2308      	movs	r3, #8
    363e:	18fb      	adds	r3, r7, r3
    3640:	9301      	str	r3, [sp, #4]
    3642:	230c      	movs	r3, #12
    3644:	18fb      	adds	r3, r7, r3
    3646:	9300      	str	r3, [sp, #0]
    3648:	0023      	movs	r3, r4
    364a:	4ca7      	ldr	r4, [pc, #668]	; (38e8 <error_check+0x6f0>)
    364c:	47a0      	blx	r4
	calc_azm_inc_roll_dec(meas_inst->a2xyz, meas_inst->c1xyz, &azm_arr[1], &inc_arr[1], &foo1, &foo2);
    364e:	687b      	ldr	r3, [r7, #4]
    3650:	332c      	adds	r3, #44	; 0x2c
    3652:	0018      	movs	r0, r3
    3654:	687b      	ldr	r3, [r7, #4]
    3656:	3338      	adds	r3, #56	; 0x38
    3658:	0019      	movs	r1, r3
    365a:	2310      	movs	r3, #16
    365c:	18fb      	adds	r3, r7, r3
    365e:	1d1c      	adds	r4, r3, #4
    3660:	2320      	movs	r3, #32
    3662:	18fb      	adds	r3, r7, r3
    3664:	1d1a      	adds	r2, r3, #4
    3666:	2308      	movs	r3, #8
    3668:	18fb      	adds	r3, r7, r3
    366a:	9301      	str	r3, [sp, #4]
    366c:	230c      	movs	r3, #12
    366e:	18fb      	adds	r3, r7, r3
    3670:	9300      	str	r3, [sp, #0]
    3672:	0023      	movs	r3, r4
    3674:	4c9c      	ldr	r4, [pc, #624]	; (38e8 <error_check+0x6f0>)
    3676:	47a0      	blx	r4
	calc_azm_inc_roll_dec(meas_inst->a1xyz, meas_inst->c2xyz, &azm_arr[2], &inc_arr[2], &foo1, &foo2);
    3678:	687b      	ldr	r3, [r7, #4]
    367a:	3320      	adds	r3, #32
    367c:	0018      	movs	r0, r3
    367e:	687b      	ldr	r3, [r7, #4]
    3680:	3344      	adds	r3, #68	; 0x44
    3682:	0019      	movs	r1, r3
    3684:	2310      	movs	r3, #16
    3686:	18fb      	adds	r3, r7, r3
    3688:	3308      	adds	r3, #8
    368a:	001c      	movs	r4, r3
    368c:	2320      	movs	r3, #32
    368e:	18fb      	adds	r3, r7, r3
    3690:	3308      	adds	r3, #8
    3692:	001a      	movs	r2, r3
    3694:	2308      	movs	r3, #8
    3696:	18fb      	adds	r3, r7, r3
    3698:	9301      	str	r3, [sp, #4]
    369a:	230c      	movs	r3, #12
    369c:	18fb      	adds	r3, r7, r3
    369e:	9300      	str	r3, [sp, #0]
    36a0:	0023      	movs	r3, r4
    36a2:	4c91      	ldr	r4, [pc, #580]	; (38e8 <error_check+0x6f0>)
    36a4:	47a0      	blx	r4
	calc_azm_inc_roll_dec(meas_inst->a2xyz, meas_inst->c2xyz, &azm_arr[3], &inc_arr[3], &foo1, &foo2);
    36a6:	687b      	ldr	r3, [r7, #4]
    36a8:	332c      	adds	r3, #44	; 0x2c
    36aa:	0018      	movs	r0, r3
    36ac:	687b      	ldr	r3, [r7, #4]
    36ae:	3344      	adds	r3, #68	; 0x44
    36b0:	0019      	movs	r1, r3
    36b2:	2310      	movs	r3, #16
    36b4:	18fb      	adds	r3, r7, r3
    36b6:	330c      	adds	r3, #12
    36b8:	001c      	movs	r4, r3
    36ba:	2320      	movs	r3, #32
    36bc:	18fb      	adds	r3, r7, r3
    36be:	330c      	adds	r3, #12
    36c0:	001a      	movs	r2, r3
    36c2:	2308      	movs	r3, #8
    36c4:	18fb      	adds	r3, r7, r3
    36c6:	9301      	str	r3, [sp, #4]
    36c8:	230c      	movs	r3, #12
    36ca:	18fb      	adds	r3, r7, r3
    36cc:	9300      	str	r3, [sp, #0]
    36ce:	0023      	movs	r3, r4
    36d0:	4c85      	ldr	r4, [pc, #532]	; (38e8 <error_check+0x6f0>)
    36d2:	47a0      	blx	r4
	//  Check Inclinometer
	angMin = inc_arr[0]; angMax = inc_arr[0];
    36d4:	2310      	movs	r3, #16
    36d6:	18fb      	adds	r3, r7, r3
    36d8:	681b      	ldr	r3, [r3, #0]
    36da:	653b      	str	r3, [r7, #80]	; 0x50
    36dc:	2310      	movs	r3, #16
    36de:	18fb      	adds	r3, r7, r3
    36e0:	681b      	ldr	r3, [r3, #0]
    36e2:	657b      	str	r3, [r7, #84]	; 0x54
	for (i=1;i<4;i++){
    36e4:	234f      	movs	r3, #79	; 0x4f
    36e6:	18fb      	adds	r3, r7, r3
    36e8:	2201      	movs	r2, #1
    36ea:	701a      	strb	r2, [r3, #0]
    36ec:	e034      	b.n	3758 <error_check+0x560>
		angMin = min(angMin, inc_arr[i]);
    36ee:	234f      	movs	r3, #79	; 0x4f
    36f0:	18fb      	adds	r3, r7, r3
    36f2:	781a      	ldrb	r2, [r3, #0]
    36f4:	2310      	movs	r3, #16
    36f6:	18fb      	adds	r3, r7, r3
    36f8:	0092      	lsls	r2, r2, #2
    36fa:	58d2      	ldr	r2, [r2, r3]
    36fc:	4b77      	ldr	r3, [pc, #476]	; (38dc <error_check+0x6e4>)
    36fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
    3700:	1c10      	adds	r0, r2, #0
    3702:	4798      	blx	r3
    3704:	1e03      	subs	r3, r0, #0
    3706:	d001      	beq.n	370c <error_check+0x514>
    3708:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    370a:	e006      	b.n	371a <error_check+0x522>
    370c:	234f      	movs	r3, #79	; 0x4f
    370e:	18fb      	adds	r3, r7, r3
    3710:	781a      	ldrb	r2, [r3, #0]
    3712:	2310      	movs	r3, #16
    3714:	18fb      	adds	r3, r7, r3
    3716:	0092      	lsls	r2, r2, #2
    3718:	58d3      	ldr	r3, [r2, r3]
    371a:	653b      	str	r3, [r7, #80]	; 0x50
		angMax = max(angMax, inc_arr[i]);
    371c:	234f      	movs	r3, #79	; 0x4f
    371e:	18fb      	adds	r3, r7, r3
    3720:	781a      	ldrb	r2, [r3, #0]
    3722:	2310      	movs	r3, #16
    3724:	18fb      	adds	r3, r7, r3
    3726:	0092      	lsls	r2, r2, #2
    3728:	58d2      	ldr	r2, [r2, r3]
    372a:	4b70      	ldr	r3, [pc, #448]	; (38ec <error_check+0x6f4>)
    372c:	6d79      	ldr	r1, [r7, #84]	; 0x54
    372e:	1c10      	adds	r0, r2, #0
    3730:	4798      	blx	r3
    3732:	1e03      	subs	r3, r0, #0
    3734:	d001      	beq.n	373a <error_check+0x542>
    3736:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3738:	e006      	b.n	3748 <error_check+0x550>
    373a:	234f      	movs	r3, #79	; 0x4f
    373c:	18fb      	adds	r3, r7, r3
    373e:	781a      	ldrb	r2, [r3, #0]
    3740:	2310      	movs	r3, #16
    3742:	18fb      	adds	r3, r7, r3
    3744:	0092      	lsls	r2, r2, #2
    3746:	58d3      	ldr	r3, [r2, r3]
    3748:	657b      	str	r3, [r7, #84]	; 0x54
	for (i=1;i<4;i++){
    374a:	234f      	movs	r3, #79	; 0x4f
    374c:	18fb      	adds	r3, r7, r3
    374e:	781a      	ldrb	r2, [r3, #0]
    3750:	234f      	movs	r3, #79	; 0x4f
    3752:	18fb      	adds	r3, r7, r3
    3754:	3201      	adds	r2, #1
    3756:	701a      	strb	r2, [r3, #0]
    3758:	234f      	movs	r3, #79	; 0x4f
    375a:	18fb      	adds	r3, r7, r3
    375c:	781b      	ldrb	r3, [r3, #0]
    375e:	2b03      	cmp	r3, #3
    3760:	d9c5      	bls.n	36ee <error_check+0x4f6>
	}	
	delta = angMax-angMin;
    3762:	4b5a      	ldr	r3, [pc, #360]	; (38cc <error_check+0x6d4>)
    3764:	6d39      	ldr	r1, [r7, #80]	; 0x50
    3766:	6d78      	ldr	r0, [r7, #84]	; 0x54
    3768:	4798      	blx	r3
    376a:	1c03      	adds	r3, r0, #0
    376c:	633b      	str	r3, [r7, #48]	; 0x30
	if (delta>options.errorSensitivity){
    376e:	4b60      	ldr	r3, [pc, #384]	; (38f0 <error_check+0x6f8>)
    3770:	689a      	ldr	r2, [r3, #8]
    3772:	4b5e      	ldr	r3, [pc, #376]	; (38ec <error_check+0x6f4>)
    3774:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3776:	1c10      	adds	r0, r2, #0
    3778:	4798      	blx	r3
    377a:	1e03      	subs	r3, r0, #0
    377c:	d014      	beq.n	37a8 <error_check+0x5b0>
		meas_inst->measurement_error[meas_inst->num_errors] = inc_ang_err;
    377e:	687b      	ldr	r3, [r7, #4]
    3780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    3782:	687a      	ldr	r2, [r7, #4]
    3784:	215c      	movs	r1, #92	; 0x5c
    3786:	18d3      	adds	r3, r2, r3
    3788:	185b      	adds	r3, r3, r1
    378a:	220e      	movs	r2, #14
    378c:	701a      	strb	r2, [r3, #0]
		meas_inst->measurement_error_data1[meas_inst->num_errors] = delta;
    378e:	687b      	ldr	r3, [r7, #4]
    3790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    3792:	687a      	ldr	r2, [r7, #4]
    3794:	3318      	adds	r3, #24
    3796:	009b      	lsls	r3, r3, #2
    3798:	18d3      	adds	r3, r2, r3
    379a:	3304      	adds	r3, #4
    379c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    379e:	601a      	str	r2, [r3, #0]
		increment_error_count(meas_inst);
    37a0:	687b      	ldr	r3, [r7, #4]
    37a2:	0018      	movs	r0, r3
    37a4:	4b4f      	ldr	r3, [pc, #316]	; (38e4 <error_check+0x6ec>)
    37a6:	4798      	blx	r3
	}
	// Check Compass
	//  Check for possible angle wrap-around
	bool wrapFlag = false;
    37a8:	234e      	movs	r3, #78	; 0x4e
    37aa:	18fb      	adds	r3, r7, r3
    37ac:	2200      	movs	r2, #0
    37ae:	701a      	strb	r2, [r3, #0]
	for (i=0;i<4;i++){
    37b0:	234f      	movs	r3, #79	; 0x4f
    37b2:	18fb      	adds	r3, r7, r3
    37b4:	2200      	movs	r2, #0
    37b6:	701a      	strb	r2, [r3, #0]
    37b8:	e017      	b.n	37ea <error_check+0x5f2>
		if (azm_arr[i]<90){ wrapFlag = true;}
    37ba:	234f      	movs	r3, #79	; 0x4f
    37bc:	18fb      	adds	r3, r7, r3
    37be:	781a      	ldrb	r2, [r3, #0]
    37c0:	2320      	movs	r3, #32
    37c2:	18fb      	adds	r3, r7, r3
    37c4:	0092      	lsls	r2, r2, #2
    37c6:	58d2      	ldr	r2, [r2, r3]
    37c8:	4b48      	ldr	r3, [pc, #288]	; (38ec <error_check+0x6f4>)
    37ca:	494a      	ldr	r1, [pc, #296]	; (38f4 <error_check+0x6fc>)
    37cc:	1c10      	adds	r0, r2, #0
    37ce:	4798      	blx	r3
    37d0:	1e03      	subs	r3, r0, #0
    37d2:	d003      	beq.n	37dc <error_check+0x5e4>
    37d4:	234e      	movs	r3, #78	; 0x4e
    37d6:	18fb      	adds	r3, r7, r3
    37d8:	2201      	movs	r2, #1
    37da:	701a      	strb	r2, [r3, #0]
	for (i=0;i<4;i++){
    37dc:	234f      	movs	r3, #79	; 0x4f
    37de:	18fb      	adds	r3, r7, r3
    37e0:	781a      	ldrb	r2, [r3, #0]
    37e2:	234f      	movs	r3, #79	; 0x4f
    37e4:	18fb      	adds	r3, r7, r3
    37e6:	3201      	adds	r2, #1
    37e8:	701a      	strb	r2, [r3, #0]
    37ea:	234f      	movs	r3, #79	; 0x4f
    37ec:	18fb      	adds	r3, r7, r3
    37ee:	781b      	ldrb	r3, [r3, #0]
    37f0:	2b03      	cmp	r3, #3
    37f2:	d9e2      	bls.n	37ba <error_check+0x5c2>
	}
	if (wrapFlag){
    37f4:	234e      	movs	r3, #78	; 0x4e
    37f6:	18fb      	adds	r3, r7, r3
    37f8:	781b      	ldrb	r3, [r3, #0]
    37fa:	2b00      	cmp	r3, #0
    37fc:	d031      	beq.n	3862 <error_check+0x66a>
		for (i=0;i<4;i++){
    37fe:	234f      	movs	r3, #79	; 0x4f
    3800:	18fb      	adds	r3, r7, r3
    3802:	2200      	movs	r2, #0
    3804:	701a      	strb	r2, [r3, #0]
    3806:	e027      	b.n	3858 <error_check+0x660>
			if (azm_arr[i]>270){ azm_arr[i]= azm_arr[i]-360;}
    3808:	234f      	movs	r3, #79	; 0x4f
    380a:	18fb      	adds	r3, r7, r3
    380c:	781a      	ldrb	r2, [r3, #0]
    380e:	2320      	movs	r3, #32
    3810:	18fb      	adds	r3, r7, r3
    3812:	0092      	lsls	r2, r2, #2
    3814:	58d2      	ldr	r2, [r2, r3]
    3816:	4b31      	ldr	r3, [pc, #196]	; (38dc <error_check+0x6e4>)
    3818:	4937      	ldr	r1, [pc, #220]	; (38f8 <error_check+0x700>)
    381a:	1c10      	adds	r0, r2, #0
    381c:	4798      	blx	r3
    381e:	1e03      	subs	r3, r0, #0
    3820:	d013      	beq.n	384a <error_check+0x652>
    3822:	234f      	movs	r3, #79	; 0x4f
    3824:	18fb      	adds	r3, r7, r3
    3826:	781c      	ldrb	r4, [r3, #0]
    3828:	234f      	movs	r3, #79	; 0x4f
    382a:	18fb      	adds	r3, r7, r3
    382c:	781a      	ldrb	r2, [r3, #0]
    382e:	2320      	movs	r3, #32
    3830:	18fb      	adds	r3, r7, r3
    3832:	0092      	lsls	r2, r2, #2
    3834:	58d2      	ldr	r2, [r2, r3]
    3836:	4b25      	ldr	r3, [pc, #148]	; (38cc <error_check+0x6d4>)
    3838:	4930      	ldr	r1, [pc, #192]	; (38fc <error_check+0x704>)
    383a:	1c10      	adds	r0, r2, #0
    383c:	4798      	blx	r3
    383e:	1c03      	adds	r3, r0, #0
    3840:	1c19      	adds	r1, r3, #0
    3842:	2320      	movs	r3, #32
    3844:	18fb      	adds	r3, r7, r3
    3846:	00a2      	lsls	r2, r4, #2
    3848:	50d1      	str	r1, [r2, r3]
		for (i=0;i<4;i++){
    384a:	234f      	movs	r3, #79	; 0x4f
    384c:	18fb      	adds	r3, r7, r3
    384e:	781a      	ldrb	r2, [r3, #0]
    3850:	234f      	movs	r3, #79	; 0x4f
    3852:	18fb      	adds	r3, r7, r3
    3854:	3201      	adds	r2, #1
    3856:	701a      	strb	r2, [r3, #0]
    3858:	234f      	movs	r3, #79	; 0x4f
    385a:	18fb      	adds	r3, r7, r3
    385c:	781b      	ldrb	r3, [r3, #0]
    385e:	2b03      	cmp	r3, #3
    3860:	d9d2      	bls.n	3808 <error_check+0x610>
		}
	}	
	angMin = azm_arr[0]; angMax = azm_arr[0]; 
    3862:	2320      	movs	r3, #32
    3864:	18fb      	adds	r3, r7, r3
    3866:	681b      	ldr	r3, [r3, #0]
    3868:	653b      	str	r3, [r7, #80]	; 0x50
    386a:	2320      	movs	r3, #32
    386c:	18fb      	adds	r3, r7, r3
    386e:	681b      	ldr	r3, [r3, #0]
    3870:	657b      	str	r3, [r7, #84]	; 0x54
	for (i=1;i<4;i++){
    3872:	234f      	movs	r3, #79	; 0x4f
    3874:	18fb      	adds	r3, r7, r3
    3876:	2201      	movs	r2, #1
    3878:	701a      	strb	r2, [r3, #0]
    387a:	e050      	b.n	391e <error_check+0x726>
		angMin = min(angMin, azm_arr[i]);
    387c:	234f      	movs	r3, #79	; 0x4f
    387e:	18fb      	adds	r3, r7, r3
    3880:	781a      	ldrb	r2, [r3, #0]
    3882:	2320      	movs	r3, #32
    3884:	18fb      	adds	r3, r7, r3
    3886:	0092      	lsls	r2, r2, #2
    3888:	58d2      	ldr	r2, [r2, r3]
    388a:	4b14      	ldr	r3, [pc, #80]	; (38dc <error_check+0x6e4>)
    388c:	6d39      	ldr	r1, [r7, #80]	; 0x50
    388e:	1c10      	adds	r0, r2, #0
    3890:	4798      	blx	r3
    3892:	1e03      	subs	r3, r0, #0
    3894:	d001      	beq.n	389a <error_check+0x6a2>
    3896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3898:	e006      	b.n	38a8 <error_check+0x6b0>
    389a:	234f      	movs	r3, #79	; 0x4f
    389c:	18fb      	adds	r3, r7, r3
    389e:	781a      	ldrb	r2, [r3, #0]
    38a0:	2320      	movs	r3, #32
    38a2:	18fb      	adds	r3, r7, r3
    38a4:	0092      	lsls	r2, r2, #2
    38a6:	58d3      	ldr	r3, [r2, r3]
    38a8:	653b      	str	r3, [r7, #80]	; 0x50
		angMax = max(angMax, azm_arr[i]);
    38aa:	234f      	movs	r3, #79	; 0x4f
    38ac:	18fb      	adds	r3, r7, r3
    38ae:	781a      	ldrb	r2, [r3, #0]
    38b0:	2320      	movs	r3, #32
    38b2:	18fb      	adds	r3, r7, r3
    38b4:	0092      	lsls	r2, r2, #2
    38b6:	58d2      	ldr	r2, [r2, r3]
    38b8:	4b0c      	ldr	r3, [pc, #48]	; (38ec <error_check+0x6f4>)
    38ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
    38bc:	1c10      	adds	r0, r2, #0
    38be:	4798      	blx	r3
    38c0:	1e03      	subs	r3, r0, #0
    38c2:	d01d      	beq.n	3900 <error_check+0x708>
    38c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    38c6:	e022      	b.n	390e <error_check+0x716>
    38c8:	0001e785 	.word	0x0001e785
    38cc:	0001eda5 	.word	0x0001eda5
    38d0:	2000188c 	.word	0x2000188c
    38d4:	0001eb65 	.word	0x0001eb65
    38d8:	43480000 	.word	0x43480000
    38dc:	0001e2fd 	.word	0x0001e2fd
    38e0:	0001f11d 	.word	0x0001f11d
    38e4:	000031b5 	.word	0x000031b5
    38e8:	0000a239 	.word	0x0000a239
    38ec:	0001e2d5 	.word	0x0001e2d5
    38f0:	20002eec 	.word	0x20002eec
    38f4:	42b40000 	.word	0x42b40000
    38f8:	43870000 	.word	0x43870000
    38fc:	43b40000 	.word	0x43b40000
    3900:	234f      	movs	r3, #79	; 0x4f
    3902:	18fb      	adds	r3, r7, r3
    3904:	781a      	ldrb	r2, [r3, #0]
    3906:	2320      	movs	r3, #32
    3908:	18fb      	adds	r3, r7, r3
    390a:	0092      	lsls	r2, r2, #2
    390c:	58d3      	ldr	r3, [r2, r3]
    390e:	657b      	str	r3, [r7, #84]	; 0x54
	for (i=1;i<4;i++){
    3910:	234f      	movs	r3, #79	; 0x4f
    3912:	18fb      	adds	r3, r7, r3
    3914:	781a      	ldrb	r2, [r3, #0]
    3916:	234f      	movs	r3, #79	; 0x4f
    3918:	18fb      	adds	r3, r7, r3
    391a:	3201      	adds	r2, #1
    391c:	701a      	strb	r2, [r3, #0]
    391e:	234f      	movs	r3, #79	; 0x4f
    3920:	18fb      	adds	r3, r7, r3
    3922:	781b      	ldrb	r3, [r3, #0]
    3924:	2b03      	cmp	r3, #3
    3926:	d9a9      	bls.n	387c <error_check+0x684>
	}
	delta = (angMax-angMin)*cos(meas_inst->inclination*deg2rad); //  Adjust for high angle shots
    3928:	4b27      	ldr	r3, [pc, #156]	; (39c8 <error_check+0x7d0>)
    392a:	6d39      	ldr	r1, [r7, #80]	; 0x50
    392c:	6d78      	ldr	r0, [r7, #84]	; 0x54
    392e:	4798      	blx	r3
    3930:	1c03      	adds	r3, r0, #0
    3932:	1c1a      	adds	r2, r3, #0
    3934:	4b25      	ldr	r3, [pc, #148]	; (39cc <error_check+0x7d4>)
    3936:	1c10      	adds	r0, r2, #0
    3938:	4798      	blx	r3
    393a:	0005      	movs	r5, r0
    393c:	000e      	movs	r6, r1
    393e:	687b      	ldr	r3, [r7, #4]
    3940:	691a      	ldr	r2, [r3, #16]
    3942:	4b23      	ldr	r3, [pc, #140]	; (39d0 <error_check+0x7d8>)
    3944:	6819      	ldr	r1, [r3, #0]
    3946:	4b23      	ldr	r3, [pc, #140]	; (39d4 <error_check+0x7dc>)
    3948:	1c10      	adds	r0, r2, #0
    394a:	4798      	blx	r3
    394c:	1c03      	adds	r3, r0, #0
    394e:	1c1a      	adds	r2, r3, #0
    3950:	4b1e      	ldr	r3, [pc, #120]	; (39cc <error_check+0x7d4>)
    3952:	1c10      	adds	r0, r2, #0
    3954:	4798      	blx	r3
    3956:	0003      	movs	r3, r0
    3958:	000c      	movs	r4, r1
    395a:	0018      	movs	r0, r3
    395c:	0021      	movs	r1, r4
    395e:	4b1e      	ldr	r3, [pc, #120]	; (39d8 <error_check+0x7e0>)
    3960:	4798      	blx	r3
    3962:	0002      	movs	r2, r0
    3964:	000b      	movs	r3, r1
    3966:	4c1d      	ldr	r4, [pc, #116]	; (39dc <error_check+0x7e4>)
    3968:	0028      	movs	r0, r5
    396a:	0031      	movs	r1, r6
    396c:	47a0      	blx	r4
    396e:	0003      	movs	r3, r0
    3970:	000c      	movs	r4, r1
    3972:	0019      	movs	r1, r3
    3974:	0022      	movs	r2, r4
    3976:	4b1a      	ldr	r3, [pc, #104]	; (39e0 <error_check+0x7e8>)
    3978:	0008      	movs	r0, r1
    397a:	0011      	movs	r1, r2
    397c:	4798      	blx	r3
    397e:	1c03      	adds	r3, r0, #0
    3980:	633b      	str	r3, [r7, #48]	; 0x30
	if (delta>options.errorSensitivity){
    3982:	4b18      	ldr	r3, [pc, #96]	; (39e4 <error_check+0x7ec>)
    3984:	689a      	ldr	r2, [r3, #8]
    3986:	4b18      	ldr	r3, [pc, #96]	; (39e8 <error_check+0x7f0>)
    3988:	6b39      	ldr	r1, [r7, #48]	; 0x30
    398a:	1c10      	adds	r0, r2, #0
    398c:	4798      	blx	r3
    398e:	1e03      	subs	r3, r0, #0
    3990:	d100      	bne.n	3994 <error_check+0x79c>
	}
	
	
	
	
}
    3992:	e014      	b.n	39be <error_check+0x7c6>
		meas_inst->measurement_error[meas_inst->num_errors] = azm_ang_err;
    3994:	687b      	ldr	r3, [r7, #4]
    3996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    3998:	687a      	ldr	r2, [r7, #4]
    399a:	215c      	movs	r1, #92	; 0x5c
    399c:	18d3      	adds	r3, r2, r3
    399e:	185b      	adds	r3, r3, r1
    39a0:	220f      	movs	r2, #15
    39a2:	701a      	strb	r2, [r3, #0]
		meas_inst->measurement_error_data1[meas_inst->num_errors] = delta;
    39a4:	687b      	ldr	r3, [r7, #4]
    39a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    39a8:	687a      	ldr	r2, [r7, #4]
    39aa:	3318      	adds	r3, #24
    39ac:	009b      	lsls	r3, r3, #2
    39ae:	18d3      	adds	r3, r2, r3
    39b0:	3304      	adds	r3, #4
    39b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    39b4:	601a      	str	r2, [r3, #0]
		increment_error_count(meas_inst);
    39b6:	687b      	ldr	r3, [r7, #4]
    39b8:	0018      	movs	r0, r3
    39ba:	4b0c      	ldr	r3, [pc, #48]	; (39ec <error_check+0x7f4>)
    39bc:	4798      	blx	r3
}
    39be:	46c0      	nop			; (mov r8, r8)
    39c0:	46bd      	mov	sp, r7
    39c2:	b017      	add	sp, #92	; 0x5c
    39c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    39c6:	46c0      	nop			; (mov r8, r8)
    39c8:	0001eda5 	.word	0x0001eda5
    39cc:	00020d99 	.word	0x00020d99
    39d0:	00025fb8 	.word	0x00025fb8
    39d4:	0001eb65 	.word	0x0001eb65
    39d8:	0001b4f5 	.word	0x0001b4f5
    39dc:	000200d1 	.word	0x000200d1
    39e0:	00020e3d 	.word	0x00020e3d
    39e4:	20002eec 	.word	0x20002eec
    39e8:	0001e2d5 	.word	0x0001e2d5
    39ec:	000031b5 	.word	0x000031b5

000039f0 <gen_err_message>:



void gen_err_message(char *err_str, struct MEASUREMENT *meas_inst, uint8_t errN){
    39f0:	b5b0      	push	{r4, r5, r7, lr}
    39f2:	b08a      	sub	sp, #40	; 0x28
    39f4:	af02      	add	r7, sp, #8
    39f6:	60f8      	str	r0, [r7, #12]
    39f8:	60b9      	str	r1, [r7, #8]
    39fa:	1dfb      	adds	r3, r7, #7
    39fc:	701a      	strb	r2, [r3, #0]
	float data1, data2;
	uint8_t axis;
	data1 = meas_inst->measurement_error_data1[errN];
    39fe:	1dfb      	adds	r3, r7, #7
    3a00:	781b      	ldrb	r3, [r3, #0]
    3a02:	68ba      	ldr	r2, [r7, #8]
    3a04:	3318      	adds	r3, #24
    3a06:	009b      	lsls	r3, r3, #2
    3a08:	18d3      	adds	r3, r2, r3
    3a0a:	3304      	adds	r3, #4
    3a0c:	681b      	ldr	r3, [r3, #0]
    3a0e:	61fb      	str	r3, [r7, #28]
	data2 = meas_inst->measurement_error_data2[errN];
    3a10:	1dfb      	adds	r3, r7, #7
    3a12:	781b      	ldrb	r3, [r3, #0]
    3a14:	68ba      	ldr	r2, [r7, #8]
    3a16:	3320      	adds	r3, #32
    3a18:	009b      	lsls	r3, r3, #2
    3a1a:	18d3      	adds	r3, r2, r3
    3a1c:	3304      	adds	r3, #4
    3a1e:	681b      	ldr	r3, [r3, #0]
    3a20:	61bb      	str	r3, [r7, #24]
	axis = data2;
    3a22:	2317      	movs	r3, #23
    3a24:	18fc      	adds	r4, r7, r3
    3a26:	4b8b      	ldr	r3, [pc, #556]	; (3c54 <gen_err_message+0x264>)
    3a28:	69b8      	ldr	r0, [r7, #24]
    3a2a:	4798      	blx	r3
    3a2c:	0003      	movs	r3, r0
    3a2e:	7023      	strb	r3, [r4, #0]
	
	switch(meas_inst->measurement_error[errN]){
    3a30:	1dfb      	adds	r3, r7, #7
    3a32:	781b      	ldrb	r3, [r3, #0]
    3a34:	68ba      	ldr	r2, [r7, #8]
    3a36:	215c      	movs	r1, #92	; 0x5c
    3a38:	18d3      	adds	r3, r2, r3
    3a3a:	185b      	adds	r3, r3, r1
    3a3c:	781b      	ldrb	r3, [r3, #0]
    3a3e:	2b0f      	cmp	r3, #15
    3a40:	d900      	bls.n	3a44 <gen_err_message+0x54>
    3a42:	e0fa      	b.n	3c3a <gen_err_message+0x24a>
    3a44:	009a      	lsls	r2, r3, #2
    3a46:	4b84      	ldr	r3, [pc, #528]	; (3c58 <gen_err_message+0x268>)
    3a48:	18d3      	adds	r3, r2, r3
    3a4a:	681b      	ldr	r3, [r3, #0]
    3a4c:	469f      	mov	pc, r3
		case accel1_mag_err:
			if (data1>1){sprintf(err_str,"Acc1 High: %0.4f", data1);}
    3a4e:	4b83      	ldr	r3, [pc, #524]	; (3c5c <gen_err_message+0x26c>)
    3a50:	21fe      	movs	r1, #254	; 0xfe
    3a52:	0589      	lsls	r1, r1, #22
    3a54:	69f8      	ldr	r0, [r7, #28]
    3a56:	4798      	blx	r3
    3a58:	1e03      	subs	r3, r0, #0
    3a5a:	d00b      	beq.n	3a74 <gen_err_message+0x84>
    3a5c:	4b80      	ldr	r3, [pc, #512]	; (3c60 <gen_err_message+0x270>)
    3a5e:	69f8      	ldr	r0, [r7, #28]
    3a60:	4798      	blx	r3
    3a62:	0003      	movs	r3, r0
    3a64:	000c      	movs	r4, r1
    3a66:	497f      	ldr	r1, [pc, #508]	; (3c64 <gen_err_message+0x274>)
    3a68:	68f8      	ldr	r0, [r7, #12]
    3a6a:	001a      	movs	r2, r3
    3a6c:	0023      	movs	r3, r4
    3a6e:	4c7e      	ldr	r4, [pc, #504]	; (3c68 <gen_err_message+0x278>)
    3a70:	47a0      	blx	r4
			else{sprintf(err_str,"Acc1 Low: %0.4f", data1);}
			break;
    3a72:	e0ea      	b.n	3c4a <gen_err_message+0x25a>
			else{sprintf(err_str,"Acc1 Low: %0.4f", data1);}
    3a74:	4b7a      	ldr	r3, [pc, #488]	; (3c60 <gen_err_message+0x270>)
    3a76:	69f8      	ldr	r0, [r7, #28]
    3a78:	4798      	blx	r3
    3a7a:	0003      	movs	r3, r0
    3a7c:	000c      	movs	r4, r1
    3a7e:	497b      	ldr	r1, [pc, #492]	; (3c6c <gen_err_message+0x27c>)
    3a80:	68f8      	ldr	r0, [r7, #12]
    3a82:	001a      	movs	r2, r3
    3a84:	0023      	movs	r3, r4
    3a86:	4c78      	ldr	r4, [pc, #480]	; (3c68 <gen_err_message+0x278>)
    3a88:	47a0      	blx	r4
			break;
    3a8a:	e0de      	b.n	3c4a <gen_err_message+0x25a>
		case accel2_mag_err:
			if (data1>1){sprintf(err_str,"Acc2 High: %0.4f", data1);}
    3a8c:	4b73      	ldr	r3, [pc, #460]	; (3c5c <gen_err_message+0x26c>)
    3a8e:	21fe      	movs	r1, #254	; 0xfe
    3a90:	0589      	lsls	r1, r1, #22
    3a92:	69f8      	ldr	r0, [r7, #28]
    3a94:	4798      	blx	r3
    3a96:	1e03      	subs	r3, r0, #0
    3a98:	d00b      	beq.n	3ab2 <gen_err_message+0xc2>
    3a9a:	4b71      	ldr	r3, [pc, #452]	; (3c60 <gen_err_message+0x270>)
    3a9c:	69f8      	ldr	r0, [r7, #28]
    3a9e:	4798      	blx	r3
    3aa0:	0003      	movs	r3, r0
    3aa2:	000c      	movs	r4, r1
    3aa4:	4972      	ldr	r1, [pc, #456]	; (3c70 <gen_err_message+0x280>)
    3aa6:	68f8      	ldr	r0, [r7, #12]
    3aa8:	001a      	movs	r2, r3
    3aaa:	0023      	movs	r3, r4
    3aac:	4c6e      	ldr	r4, [pc, #440]	; (3c68 <gen_err_message+0x278>)
    3aae:	47a0      	blx	r4
			else{sprintf(err_str,"Acc2 Low: %0.4f", data1);}
			break;
    3ab0:	e0cb      	b.n	3c4a <gen_err_message+0x25a>
			else{sprintf(err_str,"Acc2 Low: %0.4f", data1);}
    3ab2:	4b6b      	ldr	r3, [pc, #428]	; (3c60 <gen_err_message+0x270>)
    3ab4:	69f8      	ldr	r0, [r7, #28]
    3ab6:	4798      	blx	r3
    3ab8:	0003      	movs	r3, r0
    3aba:	000c      	movs	r4, r1
    3abc:	496d      	ldr	r1, [pc, #436]	; (3c74 <gen_err_message+0x284>)
    3abe:	68f8      	ldr	r0, [r7, #12]
    3ac0:	001a      	movs	r2, r3
    3ac2:	0023      	movs	r3, r4
    3ac4:	4c68      	ldr	r4, [pc, #416]	; (3c68 <gen_err_message+0x278>)
    3ac6:	47a0      	blx	r4
			break;
    3ac8:	e0bf      	b.n	3c4a <gen_err_message+0x25a>
		case comp1_mag_err:
			if (data1>1){sprintf(err_str,"Comp1 High: %0.4f", data1);}
    3aca:	4b64      	ldr	r3, [pc, #400]	; (3c5c <gen_err_message+0x26c>)
    3acc:	21fe      	movs	r1, #254	; 0xfe
    3ace:	0589      	lsls	r1, r1, #22
    3ad0:	69f8      	ldr	r0, [r7, #28]
    3ad2:	4798      	blx	r3
    3ad4:	1e03      	subs	r3, r0, #0
    3ad6:	d00b      	beq.n	3af0 <gen_err_message+0x100>
    3ad8:	4b61      	ldr	r3, [pc, #388]	; (3c60 <gen_err_message+0x270>)
    3ada:	69f8      	ldr	r0, [r7, #28]
    3adc:	4798      	blx	r3
    3ade:	0003      	movs	r3, r0
    3ae0:	000c      	movs	r4, r1
    3ae2:	4965      	ldr	r1, [pc, #404]	; (3c78 <gen_err_message+0x288>)
    3ae4:	68f8      	ldr	r0, [r7, #12]
    3ae6:	001a      	movs	r2, r3
    3ae8:	0023      	movs	r3, r4
    3aea:	4c5f      	ldr	r4, [pc, #380]	; (3c68 <gen_err_message+0x278>)
    3aec:	47a0      	blx	r4
			else{sprintf(err_str,"Comp1 Low: %0.4f", data1);}
			break;
    3aee:	e0ac      	b.n	3c4a <gen_err_message+0x25a>
			else{sprintf(err_str,"Comp1 Low: %0.4f", data1);}
    3af0:	4b5b      	ldr	r3, [pc, #364]	; (3c60 <gen_err_message+0x270>)
    3af2:	69f8      	ldr	r0, [r7, #28]
    3af4:	4798      	blx	r3
    3af6:	0003      	movs	r3, r0
    3af8:	000c      	movs	r4, r1
    3afa:	4960      	ldr	r1, [pc, #384]	; (3c7c <gen_err_message+0x28c>)
    3afc:	68f8      	ldr	r0, [r7, #12]
    3afe:	001a      	movs	r2, r3
    3b00:	0023      	movs	r3, r4
    3b02:	4c59      	ldr	r4, [pc, #356]	; (3c68 <gen_err_message+0x278>)
    3b04:	47a0      	blx	r4
			break;
    3b06:	e0a0      	b.n	3c4a <gen_err_message+0x25a>
		case comp2_mag_err:
			if (data1>1){sprintf(err_str,"Comp2 High: %0.4f", data1);}
    3b08:	4b54      	ldr	r3, [pc, #336]	; (3c5c <gen_err_message+0x26c>)
    3b0a:	21fe      	movs	r1, #254	; 0xfe
    3b0c:	0589      	lsls	r1, r1, #22
    3b0e:	69f8      	ldr	r0, [r7, #28]
    3b10:	4798      	blx	r3
    3b12:	1e03      	subs	r3, r0, #0
    3b14:	d00b      	beq.n	3b2e <gen_err_message+0x13e>
    3b16:	4b52      	ldr	r3, [pc, #328]	; (3c60 <gen_err_message+0x270>)
    3b18:	69f8      	ldr	r0, [r7, #28]
    3b1a:	4798      	blx	r3
    3b1c:	0003      	movs	r3, r0
    3b1e:	000c      	movs	r4, r1
    3b20:	4957      	ldr	r1, [pc, #348]	; (3c80 <gen_err_message+0x290>)
    3b22:	68f8      	ldr	r0, [r7, #12]
    3b24:	001a      	movs	r2, r3
    3b26:	0023      	movs	r3, r4
    3b28:	4c4f      	ldr	r4, [pc, #316]	; (3c68 <gen_err_message+0x278>)
    3b2a:	47a0      	blx	r4
			else{sprintf(err_str,"Comp2 Low: %0.4f", data1);}
			break;
    3b2c:	e08d      	b.n	3c4a <gen_err_message+0x25a>
			else{sprintf(err_str,"Comp2 Low: %0.4f", data1);}
    3b2e:	4b4c      	ldr	r3, [pc, #304]	; (3c60 <gen_err_message+0x270>)
    3b30:	69f8      	ldr	r0, [r7, #28]
    3b32:	4798      	blx	r3
    3b34:	0003      	movs	r3, r0
    3b36:	000c      	movs	r4, r1
    3b38:	4952      	ldr	r1, [pc, #328]	; (3c84 <gen_err_message+0x294>)
    3b3a:	68f8      	ldr	r0, [r7, #12]
    3b3c:	001a      	movs	r2, r3
    3b3e:	0023      	movs	r3, r4
    3b40:	4c49      	ldr	r4, [pc, #292]	; (3c68 <gen_err_message+0x278>)
    3b42:	47a0      	blx	r4
			break;
    3b44:	e081      	b.n	3c4a <gen_err_message+0x25a>
		case accel_disp_err:
			sprintf(err_str,"Acc delta ax%d: %0.3f%%", axis, 100*data1);
    3b46:	2317      	movs	r3, #23
    3b48:	18fb      	adds	r3, r7, r3
    3b4a:	781d      	ldrb	r5, [r3, #0]
    3b4c:	4b4e      	ldr	r3, [pc, #312]	; (3c88 <gen_err_message+0x298>)
    3b4e:	494f      	ldr	r1, [pc, #316]	; (3c8c <gen_err_message+0x29c>)
    3b50:	69f8      	ldr	r0, [r7, #28]
    3b52:	4798      	blx	r3
    3b54:	1c03      	adds	r3, r0, #0
    3b56:	1c1a      	adds	r2, r3, #0
    3b58:	4b41      	ldr	r3, [pc, #260]	; (3c60 <gen_err_message+0x270>)
    3b5a:	1c10      	adds	r0, r2, #0
    3b5c:	4798      	blx	r3
    3b5e:	0003      	movs	r3, r0
    3b60:	000c      	movs	r4, r1
    3b62:	494b      	ldr	r1, [pc, #300]	; (3c90 <gen_err_message+0x2a0>)
    3b64:	68f8      	ldr	r0, [r7, #12]
    3b66:	9300      	str	r3, [sp, #0]
    3b68:	9401      	str	r4, [sp, #4]
    3b6a:	002a      	movs	r2, r5
    3b6c:	4b3e      	ldr	r3, [pc, #248]	; (3c68 <gen_err_message+0x278>)
    3b6e:	4798      	blx	r3
			break;
    3b70:	e06b      	b.n	3c4a <gen_err_message+0x25a>
		case comp_disp_err:
			sprintf(err_str,"Cmp delta ax%d: %0.3f%%", axis, 100*data1);
    3b72:	2317      	movs	r3, #23
    3b74:	18fb      	adds	r3, r7, r3
    3b76:	781d      	ldrb	r5, [r3, #0]
    3b78:	4b43      	ldr	r3, [pc, #268]	; (3c88 <gen_err_message+0x298>)
    3b7a:	4944      	ldr	r1, [pc, #272]	; (3c8c <gen_err_message+0x29c>)
    3b7c:	69f8      	ldr	r0, [r7, #28]
    3b7e:	4798      	blx	r3
    3b80:	1c03      	adds	r3, r0, #0
    3b82:	1c1a      	adds	r2, r3, #0
    3b84:	4b36      	ldr	r3, [pc, #216]	; (3c60 <gen_err_message+0x270>)
    3b86:	1c10      	adds	r0, r2, #0
    3b88:	4798      	blx	r3
    3b8a:	0003      	movs	r3, r0
    3b8c:	000c      	movs	r4, r1
    3b8e:	4941      	ldr	r1, [pc, #260]	; (3c94 <gen_err_message+0x2a4>)
    3b90:	68f8      	ldr	r0, [r7, #12]
    3b92:	9300      	str	r3, [sp, #0]
    3b94:	9401      	str	r4, [sp, #4]
    3b96:	002a      	movs	r2, r5
    3b98:	4b33      	ldr	r3, [pc, #204]	; (3c68 <gen_err_message+0x278>)
    3b9a:	4798      	blx	r3
			break;
    3b9c:	e055      	b.n	3c4a <gen_err_message+0x25a>
		case inc_ang_err:
			sprintf(err_str,"Inc Delta: %0.3f deg", data1);
    3b9e:	4b30      	ldr	r3, [pc, #192]	; (3c60 <gen_err_message+0x270>)
    3ba0:	69f8      	ldr	r0, [r7, #28]
    3ba2:	4798      	blx	r3
    3ba4:	0003      	movs	r3, r0
    3ba6:	000c      	movs	r4, r1
    3ba8:	493b      	ldr	r1, [pc, #236]	; (3c98 <gen_err_message+0x2a8>)
    3baa:	68f8      	ldr	r0, [r7, #12]
    3bac:	001a      	movs	r2, r3
    3bae:	0023      	movs	r3, r4
    3bb0:	4c2d      	ldr	r4, [pc, #180]	; (3c68 <gen_err_message+0x278>)
    3bb2:	47a0      	blx	r4
			break;
    3bb4:	e049      	b.n	3c4a <gen_err_message+0x25a>
		case azm_ang_err:
			sprintf(err_str,"Azm Delta: %0.3f deg", data1);
    3bb6:	4b2a      	ldr	r3, [pc, #168]	; (3c60 <gen_err_message+0x270>)
    3bb8:	69f8      	ldr	r0, [r7, #28]
    3bba:	4798      	blx	r3
    3bbc:	0003      	movs	r3, r0
    3bbe:	000c      	movs	r4, r1
    3bc0:	4936      	ldr	r1, [pc, #216]	; (3c9c <gen_err_message+0x2ac>)
    3bc2:	68f8      	ldr	r0, [r7, #12]
    3bc4:	001a      	movs	r2, r3
    3bc6:	0023      	movs	r3, r4
    3bc8:	4c27      	ldr	r4, [pc, #156]	; (3c68 <gen_err_message+0x278>)
    3bca:	47a0      	blx	r4
			break;
    3bcc:	e03d      	b.n	3c4a <gen_err_message+0x25a>
		case laser_calc_err:
			sprintf(err_str,"laser calc error");
    3bce:	68fa      	ldr	r2, [r7, #12]
    3bd0:	4b33      	ldr	r3, [pc, #204]	; (3ca0 <gen_err_message+0x2b0>)
    3bd2:	0010      	movs	r0, r2
    3bd4:	0019      	movs	r1, r3
    3bd6:	2311      	movs	r3, #17
    3bd8:	001a      	movs	r2, r3
    3bda:	4b32      	ldr	r3, [pc, #200]	; (3ca4 <gen_err_message+0x2b4>)
    3bdc:	4798      	blx	r3
			break;
    3bde:	e034      	b.n	3c4a <gen_err_message+0x25a>
		case laser_weak_signal:
			sprintf(err_str,"laser weak signal");
    3be0:	68fa      	ldr	r2, [r7, #12]
    3be2:	4b31      	ldr	r3, [pc, #196]	; (3ca8 <gen_err_message+0x2b8>)
    3be4:	0010      	movs	r0, r2
    3be6:	0019      	movs	r1, r3
    3be8:	2312      	movs	r3, #18
    3bea:	001a      	movs	r2, r3
    3bec:	4b2d      	ldr	r3, [pc, #180]	; (3ca4 <gen_err_message+0x2b4>)
    3bee:	4798      	blx	r3
			break;
    3bf0:	e02b      	b.n	3c4a <gen_err_message+0x25a>
		case laser_strong_signal:
			sprintf(err_str,"laser strong signal");
    3bf2:	68fa      	ldr	r2, [r7, #12]
    3bf4:	4b2d      	ldr	r3, [pc, #180]	; (3cac <gen_err_message+0x2bc>)
    3bf6:	0010      	movs	r0, r2
    3bf8:	0019      	movs	r1, r3
    3bfa:	2314      	movs	r3, #20
    3bfc:	001a      	movs	r2, r3
    3bfe:	4b29      	ldr	r3, [pc, #164]	; (3ca4 <gen_err_message+0x2b4>)
    3c00:	4798      	blx	r3
			break;
    3c02:	e022      	b.n	3c4a <gen_err_message+0x25a>
		case laser_response_timeout:
			sprintf(err_str,"laser comm timeout");
    3c04:	68fa      	ldr	r2, [r7, #12]
    3c06:	4b2a      	ldr	r3, [pc, #168]	; (3cb0 <gen_err_message+0x2c0>)
    3c08:	0010      	movs	r0, r2
    3c0a:	0019      	movs	r1, r3
    3c0c:	2313      	movs	r3, #19
    3c0e:	001a      	movs	r2, r3
    3c10:	4b24      	ldr	r3, [pc, #144]	; (3ca4 <gen_err_message+0x2b4>)
    3c12:	4798      	blx	r3
			break;
    3c14:	e019      	b.n	3c4a <gen_err_message+0x25a>
		case laser_unknown:
			sprintf(err_str,"laser error, unknown");
    3c16:	68fa      	ldr	r2, [r7, #12]
    3c18:	4b26      	ldr	r3, [pc, #152]	; (3cb4 <gen_err_message+0x2c4>)
    3c1a:	0010      	movs	r0, r2
    3c1c:	0019      	movs	r1, r3
    3c1e:	2315      	movs	r3, #21
    3c20:	001a      	movs	r2, r3
    3c22:	4b20      	ldr	r3, [pc, #128]	; (3ca4 <gen_err_message+0x2b4>)
    3c24:	4798      	blx	r3
			break;
    3c26:	e010      	b.n	3c4a <gen_err_message+0x25a>
		case laser_wrong_message:
			sprintf(err_str,"laser wrong message");
    3c28:	68fa      	ldr	r2, [r7, #12]
    3c2a:	4b23      	ldr	r3, [pc, #140]	; (3cb8 <gen_err_message+0x2c8>)
    3c2c:	0010      	movs	r0, r2
    3c2e:	0019      	movs	r1, r3
    3c30:	2314      	movs	r3, #20
    3c32:	001a      	movs	r2, r3
    3c34:	4b1b      	ldr	r3, [pc, #108]	; (3ca4 <gen_err_message+0x2b4>)
    3c36:	4798      	blx	r3
			break;
    3c38:	e007      	b.n	3c4a <gen_err_message+0x25a>
		default:
			sprintf(err_str,"unrecognized error");	
    3c3a:	68fa      	ldr	r2, [r7, #12]
    3c3c:	4b1f      	ldr	r3, [pc, #124]	; (3cbc <gen_err_message+0x2cc>)
    3c3e:	0010      	movs	r0, r2
    3c40:	0019      	movs	r1, r3
    3c42:	2313      	movs	r3, #19
    3c44:	001a      	movs	r2, r3
    3c46:	4b17      	ldr	r3, [pc, #92]	; (3ca4 <gen_err_message+0x2b4>)
    3c48:	4798      	blx	r3
	};
	
	
	
	
}
    3c4a:	46c0      	nop			; (mov r8, r8)
    3c4c:	46bd      	mov	sp, r7
    3c4e:	b008      	add	sp, #32
    3c50:	bdb0      	pop	{r4, r5, r7, pc}
    3c52:	46c0      	nop			; (mov r8, r8)
    3c54:	0001e3f5 	.word	0x0001e3f5
    3c58:	00025290 	.word	0x00025290
    3c5c:	0001e2fd 	.word	0x0001e2fd
    3c60:	00020d99 	.word	0x00020d99
    3c64:	00025108 	.word	0x00025108
    3c68:	000210bd 	.word	0x000210bd
    3c6c:	0002511c 	.word	0x0002511c
    3c70:	0002512c 	.word	0x0002512c
    3c74:	00025140 	.word	0x00025140
    3c78:	00025150 	.word	0x00025150
    3c7c:	00025164 	.word	0x00025164
    3c80:	00025178 	.word	0x00025178
    3c84:	0002518c 	.word	0x0002518c
    3c88:	0001eb65 	.word	0x0001eb65
    3c8c:	42c80000 	.word	0x42c80000
    3c90:	000251a0 	.word	0x000251a0
    3c94:	000251b8 	.word	0x000251b8
    3c98:	000251d0 	.word	0x000251d0
    3c9c:	000251e8 	.word	0x000251e8
    3ca0:	00025200 	.word	0x00025200
    3ca4:	00020fa5 	.word	0x00020fa5
    3ca8:	00025214 	.word	0x00025214
    3cac:	00025228 	.word	0x00025228
    3cb0:	0002523c 	.word	0x0002523c
    3cb4:	00025250 	.word	0x00025250
    3cb8:	00025268 	.word	0x00025268
    3cbc:	0002527c 	.word	0x0002527c

00003cc0 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    3cc0:	b580      	push	{r7, lr}
    3cc2:	b082      	sub	sp, #8
    3cc4:	af00      	add	r7, sp, #0
    3cc6:	0002      	movs	r2, r0
    3cc8:	1dfb      	adds	r3, r7, #7
    3cca:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3ccc:	4b06      	ldr	r3, [pc, #24]	; (3ce8 <system_interrupt_enable+0x28>)
    3cce:	1dfa      	adds	r2, r7, #7
    3cd0:	7812      	ldrb	r2, [r2, #0]
    3cd2:	0011      	movs	r1, r2
    3cd4:	221f      	movs	r2, #31
    3cd6:	400a      	ands	r2, r1
    3cd8:	2101      	movs	r1, #1
    3cda:	4091      	lsls	r1, r2
    3cdc:	000a      	movs	r2, r1
    3cde:	601a      	str	r2, [r3, #0]
}
    3ce0:	46c0      	nop			; (mov r8, r8)
    3ce2:	46bd      	mov	sp, r7
    3ce4:	b002      	add	sp, #8
    3ce6:	bd80      	pop	{r7, pc}
    3ce8:	e000e100 	.word	0xe000e100

00003cec <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
    3cec:	b580      	push	{r7, lr}
    3cee:	b084      	sub	sp, #16
    3cf0:	af00      	add	r7, sp, #0
    3cf2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3cf4:	687b      	ldr	r3, [r7, #4]
    3cf6:	681b      	ldr	r3, [r3, #0]
    3cf8:	60fb      	str	r3, [r7, #12]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    3cfa:	68fb      	ldr	r3, [r7, #12]
    3cfc:	691b      	ldr	r3, [r3, #16]
    3cfe:	1e5a      	subs	r2, r3, #1
    3d00:	4193      	sbcs	r3, r2
    3d02:	b2db      	uxtb	r3, r3
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
#endif
}
    3d04:	0018      	movs	r0, r3
    3d06:	46bd      	mov	sp, r7
    3d08:	b004      	add	sp, #16
    3d0a:	bd80      	pop	{r7, pc}

00003d0c <tc_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a TC module configuration structure to set
 */
static inline void tc_get_config_defaults(
		struct tc_config *const config)
{
    3d0c:	b580      	push	{r7, lr}
    3d0e:	b082      	sub	sp, #8
    3d10:	af00      	add	r7, sp, #0
    3d12:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    3d14:	687b      	ldr	r3, [r7, #4]
    3d16:	2200      	movs	r2, #0
    3d18:	701a      	strb	r2, [r3, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    3d1a:	687b      	ldr	r3, [r7, #4]
    3d1c:	2200      	movs	r2, #0
    3d1e:	70da      	strb	r2, [r3, #3]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    3d20:	687b      	ldr	r3, [r7, #4]
    3d22:	2200      	movs	r2, #0
    3d24:	809a      	strh	r2, [r3, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    3d26:	687b      	ldr	r3, [r7, #4]
    3d28:	2200      	movs	r2, #0
    3d2a:	719a      	strb	r2, [r3, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    3d2c:	687b      	ldr	r3, [r7, #4]
    3d2e:	2200      	movs	r2, #0
    3d30:	71da      	strb	r2, [r3, #7]
	config->run_in_standby             = false;
    3d32:	687b      	ldr	r3, [r7, #4]
    3d34:	2200      	movs	r2, #0
    3d36:	705a      	strb	r2, [r3, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
    3d38:	687b      	ldr	r3, [r7, #4]
    3d3a:	2200      	movs	r2, #0
    3d3c:	709a      	strb	r2, [r3, #2]
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    3d3e:	687b      	ldr	r3, [r7, #4]
    3d40:	2200      	movs	r2, #0
    3d42:	721a      	strb	r2, [r3, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    3d44:	687b      	ldr	r3, [r7, #4]
    3d46:	2200      	movs	r2, #0
    3d48:	725a      	strb	r2, [r3, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    3d4a:	687b      	ldr	r3, [r7, #4]
    3d4c:	2200      	movs	r2, #0
    3d4e:	729a      	strb	r2, [r3, #10]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    3d50:	687b      	ldr	r3, [r7, #4]
    3d52:	2200      	movs	r2, #0
    3d54:	72da      	strb	r2, [r3, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    3d56:	687b      	ldr	r3, [r7, #4]
    3d58:	2200      	movs	r2, #0
    3d5a:	731a      	strb	r2, [r3, #12]
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    3d5c:	687b      	ldr	r3, [r7, #4]
    3d5e:	2200      	movs	r2, #0
    3d60:	739a      	strb	r2, [r3, #14]
	config->oneshot                    = false;
    3d62:	687b      	ldr	r3, [r7, #4]
    3d64:	2200      	movs	r2, #0
    3d66:	735a      	strb	r2, [r3, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    3d68:	687b      	ldr	r3, [r7, #4]
    3d6a:	2200      	movs	r2, #0
    3d6c:	741a      	strb	r2, [r3, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    3d6e:	687b      	ldr	r3, [r7, #4]
    3d70:	2200      	movs	r2, #0
    3d72:	615a      	str	r2, [r3, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    3d74:	687b      	ldr	r3, [r7, #4]
    3d76:	2200      	movs	r2, #0
    3d78:	619a      	str	r2, [r3, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    3d7a:	687b      	ldr	r3, [r7, #4]
    3d7c:	2200      	movs	r2, #0
    3d7e:	771a      	strb	r2, [r3, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    3d80:	687b      	ldr	r3, [r7, #4]
    3d82:	2200      	movs	r2, #0
    3d84:	621a      	str	r2, [r3, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    3d86:	687b      	ldr	r3, [r7, #4]
    3d88:	2200      	movs	r2, #0
    3d8a:	625a      	str	r2, [r3, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    3d8c:	687b      	ldr	r3, [r7, #4]
    3d8e:	2200      	movs	r2, #0
    3d90:	851a      	strh	r2, [r3, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    3d92:	687b      	ldr	r3, [r7, #4]
    3d94:	2200      	movs	r2, #0
    3d96:	855a      	strh	r2, [r3, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    3d98:	687b      	ldr	r3, [r7, #4]
    3d9a:	2200      	movs	r2, #0
    3d9c:	859a      	strh	r2, [r3, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
    3d9e:	687b      	ldr	r3, [r7, #4]
    3da0:	2234      	movs	r2, #52	; 0x34
    3da2:	2100      	movs	r1, #0
    3da4:	5499      	strb	r1, [r3, r2]
#endif

}
    3da6:	46c0      	nop			; (mov r8, r8)
    3da8:	46bd      	mov	sp, r7
    3daa:	b002      	add	sp, #8
    3dac:	bd80      	pop	{r7, pc}
	...

00003db0 <tc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_enable(
		const struct tc_module *const module_inst)
{
    3db0:	b580      	push	{r7, lr}
    3db2:	b084      	sub	sp, #16
    3db4:	af00      	add	r7, sp, #0
    3db6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3db8:	687b      	ldr	r3, [r7, #4]
    3dba:	681b      	ldr	r3, [r3, #0]
    3dbc:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    3dbe:	46c0      	nop			; (mov r8, r8)
    3dc0:	687b      	ldr	r3, [r7, #4]
    3dc2:	0018      	movs	r0, r3
    3dc4:	4b06      	ldr	r3, [pc, #24]	; (3de0 <tc_enable+0x30>)
    3dc6:	4798      	blx	r3
    3dc8:	1e03      	subs	r3, r0, #0
    3dca:	d1f9      	bne.n	3dc0 <tc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    3dcc:	68fb      	ldr	r3, [r7, #12]
    3dce:	681b      	ldr	r3, [r3, #0]
    3dd0:	2202      	movs	r2, #2
    3dd2:	431a      	orrs	r2, r3
    3dd4:	68fb      	ldr	r3, [r7, #12]
    3dd6:	601a      	str	r2, [r3, #0]
}
    3dd8:	46c0      	nop			; (mov r8, r8)
    3dda:	46bd      	mov	sp, r7
    3ddc:	b004      	add	sp, #16
    3dde:	bd80      	pop	{r7, pc}
    3de0:	00003ced 	.word	0x00003ced

00003de4 <tc_disable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_disable(
		const struct tc_module *const module_inst)
{
    3de4:	b580      	push	{r7, lr}
    3de6:	b084      	sub	sp, #16
    3de8:	af00      	add	r7, sp, #0
    3dea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3dec:	687b      	ldr	r3, [r7, #4]
    3dee:	681b      	ldr	r3, [r3, #0]
    3df0:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    3df2:	46c0      	nop			; (mov r8, r8)
    3df4:	687b      	ldr	r3, [r7, #4]
    3df6:	0018      	movs	r0, r3
    3df8:	4b0a      	ldr	r3, [pc, #40]	; (3e24 <tc_disable+0x40>)
    3dfa:	4798      	blx	r3
    3dfc:	1e03      	subs	r3, r0, #0
    3dfe:	d1f9      	bne.n	3df4 <tc_disable+0x10>
		/* Wait for sync */
	}

	/* Disbale interrupt */
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    3e00:	68fb      	ldr	r3, [r7, #12]
    3e02:	2233      	movs	r2, #51	; 0x33
    3e04:	721a      	strb	r2, [r3, #8]
	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
    3e06:	68fb      	ldr	r3, [r7, #12]
    3e08:	2233      	movs	r2, #51	; 0x33
    3e0a:	729a      	strb	r2, [r3, #10]

	/* Disable TC module */
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    3e0c:	68fb      	ldr	r3, [r7, #12]
    3e0e:	681b      	ldr	r3, [r3, #0]
    3e10:	2202      	movs	r2, #2
    3e12:	4393      	bics	r3, r2
    3e14:	001a      	movs	r2, r3
    3e16:	68fb      	ldr	r3, [r7, #12]
    3e18:	601a      	str	r2, [r3, #0]
}
    3e1a:	46c0      	nop			; (mov r8, r8)
    3e1c:	46bd      	mov	sp, r7
    3e1e:	b004      	add	sp, #16
    3e20:	bd80      	pop	{r7, pc}
    3e22:	46c0      	nop			; (mov r8, r8)
    3e24:	00003ced 	.word	0x00003ced

00003e28 <tc_stop_counter>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_stop_counter(
		const struct tc_module *const module_inst)
{
    3e28:	b580      	push	{r7, lr}
    3e2a:	b084      	sub	sp, #16
    3e2c:	af00      	add	r7, sp, #0
    3e2e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3e30:	687b      	ldr	r3, [r7, #4]
    3e32:	681b      	ldr	r3, [r3, #0]
    3e34:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    3e36:	46c0      	nop			; (mov r8, r8)
    3e38:	687b      	ldr	r3, [r7, #4]
    3e3a:	0018      	movs	r0, r3
    3e3c:	4b05      	ldr	r3, [pc, #20]	; (3e54 <tc_stop_counter+0x2c>)
    3e3e:	4798      	blx	r3
    3e40:	1e03      	subs	r3, r0, #0
    3e42:	d1f9      	bne.n	3e38 <tc_stop_counter+0x10>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_STOP_Val);
    3e44:	68fb      	ldr	r3, [r7, #12]
    3e46:	2240      	movs	r2, #64	; 0x40
    3e48:	715a      	strb	r2, [r3, #5]
}
    3e4a:	46c0      	nop			; (mov r8, r8)
    3e4c:	46bd      	mov	sp, r7
    3e4e:	b004      	add	sp, #16
    3e50:	bd80      	pop	{r7, pc}
    3e52:	46c0      	nop			; (mov r8, r8)
    3e54:	00003ced 	.word	0x00003ced

00003e58 <tc_start_counter>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_start_counter(
		const struct tc_module *const module_inst)
{
    3e58:	b580      	push	{r7, lr}
    3e5a:	b084      	sub	sp, #16
    3e5c:	af00      	add	r7, sp, #0
    3e5e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3e60:	687b      	ldr	r3, [r7, #4]
    3e62:	681b      	ldr	r3, [r3, #0]
    3e64:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    3e66:	46c0      	nop			; (mov r8, r8)
    3e68:	687b      	ldr	r3, [r7, #4]
    3e6a:	0018      	movs	r0, r3
    3e6c:	4b0a      	ldr	r3, [pc, #40]	; (3e98 <tc_start_counter+0x40>)
    3e6e:	4798      	blx	r3
    3e70:	1e03      	subs	r3, r0, #0
    3e72:	d1f9      	bne.n	3e68 <tc_start_counter+0x10>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    3e74:	68fb      	ldr	r3, [r7, #12]
    3e76:	2200      	movs	r2, #0
    3e78:	711a      	strb	r2, [r3, #4]

	while (tc_is_syncing(module_inst)) {
    3e7a:	46c0      	nop			; (mov r8, r8)
    3e7c:	687b      	ldr	r3, [r7, #4]
    3e7e:	0018      	movs	r0, r3
    3e80:	4b05      	ldr	r3, [pc, #20]	; (3e98 <tc_start_counter+0x40>)
    3e82:	4798      	blx	r3
    3e84:	1e03      	subs	r3, r0, #0
    3e86:	d1f9      	bne.n	3e7c <tc_start_counter+0x24>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_RETRIGGER_Val);
    3e88:	68fb      	ldr	r3, [r7, #12]
    3e8a:	2220      	movs	r2, #32
    3e8c:	715a      	strb	r2, [r3, #5]
}
    3e8e:	46c0      	nop			; (mov r8, r8)
    3e90:	46bd      	mov	sp, r7
    3e92:	b004      	add	sp, #16
    3e94:	bd80      	pop	{r7, pc}
    3e96:	46c0      	nop			; (mov r8, r8)
    3e98:	00003ced 	.word	0x00003ced

00003e9c <_tc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TC module instance.
 */
static enum system_interrupt_vector _tc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
    3e9c:	b580      	push	{r7, lr}
    3e9e:	b082      	sub	sp, #8
    3ea0:	af00      	add	r7, sp, #0
    3ea2:	6078      	str	r0, [r7, #4]
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    3ea4:	4a04      	ldr	r2, [pc, #16]	; (3eb8 <_tc_interrupt_get_interrupt_vector+0x1c>)
    3ea6:	687b      	ldr	r3, [r7, #4]
    3ea8:	18d3      	adds	r3, r2, r3
    3eaa:	781b      	ldrb	r3, [r3, #0]
    3eac:	b25b      	sxtb	r3, r3
}
    3eae:	0018      	movs	r0, r3
    3eb0:	46bd      	mov	sp, r7
    3eb2:	b002      	add	sp, #8
    3eb4:	bd80      	pop	{r7, pc}
    3eb6:	46c0      	nop			; (mov r8, r8)
    3eb8:	200000d0 	.word	0x200000d0

00003ebc <tc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
static inline void tc_enable_callback(
		struct tc_module *const module,
		const enum tc_callback callback_type)
{
    3ebc:	b580      	push	{r7, lr}
    3ebe:	b082      	sub	sp, #8
    3ec0:	af00      	add	r7, sp, #0
    3ec2:	6078      	str	r0, [r7, #4]
    3ec4:	000a      	movs	r2, r1
    3ec6:	1cfb      	adds	r3, r7, #3
    3ec8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    3eca:	687b      	ldr	r3, [r7, #4]
    3ecc:	681b      	ldr	r3, [r3, #0]
    3ece:	0018      	movs	r0, r3
    3ed0:	4b22      	ldr	r3, [pc, #136]	; (3f5c <tc_enable_callback+0xa0>)
    3ed2:	4798      	blx	r3
    3ed4:	0003      	movs	r3, r0
    3ed6:	0018      	movs	r0, r3
    3ed8:	4b21      	ldr	r3, [pc, #132]	; (3f60 <tc_enable_callback+0xa4>)
    3eda:	4798      	blx	r3
    3edc:	0003      	movs	r3, r0
    3ede:	0018      	movs	r0, r3
    3ee0:	4b20      	ldr	r3, [pc, #128]	; (3f64 <tc_enable_callback+0xa8>)
    3ee2:	4798      	blx	r3

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    3ee4:	1cfb      	adds	r3, r7, #3
    3ee6:	781b      	ldrb	r3, [r3, #0]
    3ee8:	2b02      	cmp	r3, #2
    3eea:	d10b      	bne.n	3f04 <tc_enable_callback+0x48>
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    3eec:	687b      	ldr	r3, [r7, #4]
    3eee:	7e5b      	ldrb	r3, [r3, #25]
    3ef0:	2210      	movs	r2, #16
    3ef2:	4313      	orrs	r3, r2
    3ef4:	b2da      	uxtb	r2, r3
    3ef6:	687b      	ldr	r3, [r7, #4]
    3ef8:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    3efa:	687b      	ldr	r3, [r7, #4]
    3efc:	681b      	ldr	r3, [r3, #0]
    3efe:	2210      	movs	r2, #16
    3f00:	725a      	strb	r2, [r3, #9]
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
	}
}
    3f02:	e026      	b.n	3f52 <tc_enable_callback+0x96>
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    3f04:	1cfb      	adds	r3, r7, #3
    3f06:	781b      	ldrb	r3, [r3, #0]
    3f08:	2b03      	cmp	r3, #3
    3f0a:	d10b      	bne.n	3f24 <tc_enable_callback+0x68>
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
    3f0c:	687b      	ldr	r3, [r7, #4]
    3f0e:	7e5b      	ldrb	r3, [r3, #25]
    3f10:	2220      	movs	r2, #32
    3f12:	4313      	orrs	r3, r2
    3f14:	b2da      	uxtb	r2, r3
    3f16:	687b      	ldr	r3, [r7, #4]
    3f18:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
    3f1a:	687b      	ldr	r3, [r7, #4]
    3f1c:	681b      	ldr	r3, [r3, #0]
    3f1e:	2220      	movs	r2, #32
    3f20:	725a      	strb	r2, [r3, #9]
}
    3f22:	e016      	b.n	3f52 <tc_enable_callback+0x96>
		module->enable_callback_mask |= (1 << callback_type);
    3f24:	687b      	ldr	r3, [r7, #4]
    3f26:	7e5b      	ldrb	r3, [r3, #25]
    3f28:	b25a      	sxtb	r2, r3
    3f2a:	1cfb      	adds	r3, r7, #3
    3f2c:	781b      	ldrb	r3, [r3, #0]
    3f2e:	2101      	movs	r1, #1
    3f30:	4099      	lsls	r1, r3
    3f32:	000b      	movs	r3, r1
    3f34:	b25b      	sxtb	r3, r3
    3f36:	4313      	orrs	r3, r2
    3f38:	b25b      	sxtb	r3, r3
    3f3a:	b2da      	uxtb	r2, r3
    3f3c:	687b      	ldr	r3, [r7, #4]
    3f3e:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    3f40:	687b      	ldr	r3, [r7, #4]
    3f42:	681b      	ldr	r3, [r3, #0]
    3f44:	1cfa      	adds	r2, r7, #3
    3f46:	7812      	ldrb	r2, [r2, #0]
    3f48:	2101      	movs	r1, #1
    3f4a:	4091      	lsls	r1, r2
    3f4c:	000a      	movs	r2, r1
    3f4e:	b2d2      	uxtb	r2, r2
    3f50:	725a      	strb	r2, [r3, #9]
}
    3f52:	46c0      	nop			; (mov r8, r8)
    3f54:	46bd      	mov	sp, r7
    3f56:	b002      	add	sp, #8
    3f58:	bd80      	pop	{r7, pc}
    3f5a:	46c0      	nop			; (mov r8, r8)
    3f5c:	00006bcd 	.word	0x00006bcd
    3f60:	00003e9d 	.word	0x00003e9d
    3f64:	00003cc1 	.word	0x00003cc1

00003f68 <wdt_get_config_defaults>:
{
    3f68:	b580      	push	{r7, lr}
    3f6a:	b082      	sub	sp, #8
    3f6c:	af00      	add	r7, sp, #0
    3f6e:	6078      	str	r0, [r7, #4]
	config->always_on            = false;
    3f70:	687b      	ldr	r3, [r7, #4]
    3f72:	2200      	movs	r2, #0
    3f74:	701a      	strb	r2, [r3, #0]
	config->enable               = true;
    3f76:	687b      	ldr	r3, [r7, #4]
    3f78:	2201      	movs	r2, #1
    3f7a:	705a      	strb	r2, [r3, #1]
	config->timeout_period       = WDT_PERIOD_16384CLK;
    3f7c:	687b      	ldr	r3, [r7, #4]
    3f7e:	220c      	movs	r2, #12
    3f80:	709a      	strb	r2, [r3, #2]
	config->window_period        = WDT_PERIOD_NONE;
    3f82:	687b      	ldr	r3, [r7, #4]
    3f84:	2200      	movs	r2, #0
    3f86:	70da      	strb	r2, [r3, #3]
	config->early_warning_period = WDT_PERIOD_NONE;
    3f88:	687b      	ldr	r3, [r7, #4]
    3f8a:	2200      	movs	r2, #0
    3f8c:	711a      	strb	r2, [r3, #4]
}
    3f8e:	46c0      	nop			; (mov r8, r8)
    3f90:	46bd      	mov	sp, r7
    3f92:	b002      	add	sp, #8
    3f94:	bd80      	pop	{r7, pc}
	...

00003f98 <wdt_enable>:
#define off_hold_time 96  // 32k, div1024 prescaler;  32 counts/second
#define idle_seconds_max 60 // seconds



void wdt_enable(void){
    3f98:	b580      	push	{r7, lr}
    3f9a:	af00      	add	r7, sp, #0
	wdt_get_config_defaults(&wdt_configuration);
    3f9c:	4b06      	ldr	r3, [pc, #24]	; (3fb8 <wdt_enable+0x20>)
    3f9e:	0018      	movs	r0, r3
    3fa0:	4b06      	ldr	r3, [pc, #24]	; (3fbc <wdt_enable+0x24>)
    3fa2:	4798      	blx	r3
	// Uses internal 1khz clock
	wdt_configuration.timeout_period = WDT_PERIOD_16384CLK;
    3fa4:	4b04      	ldr	r3, [pc, #16]	; (3fb8 <wdt_enable+0x20>)
    3fa6:	220c      	movs	r2, #12
    3fa8:	709a      	strb	r2, [r3, #2]
	wdt_set_config(&wdt_configuration);
    3faa:	4b03      	ldr	r3, [pc, #12]	; (3fb8 <wdt_enable+0x20>)
    3fac:	0018      	movs	r0, r3
    3fae:	4b04      	ldr	r3, [pc, #16]	; (3fc0 <wdt_enable+0x28>)
    3fb0:	4798      	blx	r3
	
	
}
    3fb2:	46c0      	nop			; (mov r8, r8)
    3fb4:	46bd      	mov	sp, r7
    3fb6:	bd80      	pop	{r7, pc}
    3fb8:	200011d0 	.word	0x200011d0
    3fbc:	00003f69 	.word	0x00003f69
    3fc0:	000010d1 	.word	0x000010d1

00003fc4 <wdt_disable>:

void wdt_disable(void){
    3fc4:	b580      	push	{r7, lr}
    3fc6:	af00      	add	r7, sp, #0
	wdt_get_config_defaults(&wdt_configuration);
    3fc8:	4b06      	ldr	r3, [pc, #24]	; (3fe4 <wdt_disable+0x20>)
    3fca:	0018      	movs	r0, r3
    3fcc:	4b06      	ldr	r3, [pc, #24]	; (3fe8 <wdt_disable+0x24>)
    3fce:	4798      	blx	r3
	//wdt_configuration.clock_source = GCLK_GENERATOR_2;// Uses internal 1khz clock
	wdt_configuration.enable = false;
    3fd0:	4b04      	ldr	r3, [pc, #16]	; (3fe4 <wdt_disable+0x20>)
    3fd2:	2200      	movs	r2, #0
    3fd4:	705a      	strb	r2, [r3, #1]
	wdt_set_config(&wdt_configuration);
    3fd6:	4b03      	ldr	r3, [pc, #12]	; (3fe4 <wdt_disable+0x20>)
    3fd8:	0018      	movs	r0, r3
    3fda:	4b04      	ldr	r3, [pc, #16]	; (3fec <wdt_disable+0x28>)
    3fdc:	4798      	blx	r3
	
	
}
    3fde:	46c0      	nop			; (mov r8, r8)
    3fe0:	46bd      	mov	sp, r7
    3fe2:	bd80      	pop	{r7, pc}
    3fe4:	200011d0 	.word	0x200011d0
    3fe8:	00003f69 	.word	0x00003f69
    3fec:	000010d1 	.word	0x000010d1

00003ff0 <idle_timeout>:


void idle_timeout(void){
    3ff0:	b580      	push	{r7, lr}
    3ff2:	af00      	add	r7, sp, #0
	static uint32_t idle_seconds = 0;
	
	if (current_input == input_1sec){
    3ff4:	4b0d      	ldr	r3, [pc, #52]	; (402c <idle_timeout+0x3c>)
    3ff6:	781b      	ldrb	r3, [r3, #0]
    3ff8:	b2db      	uxtb	r3, r3
    3ffa:	2b07      	cmp	r3, #7
    3ffc:	d105      	bne.n	400a <idle_timeout+0x1a>
		idle_seconds++;
    3ffe:	4b0c      	ldr	r3, [pc, #48]	; (4030 <idle_timeout+0x40>)
    4000:	681b      	ldr	r3, [r3, #0]
    4002:	1c5a      	adds	r2, r3, #1
    4004:	4b0a      	ldr	r3, [pc, #40]	; (4030 <idle_timeout+0x40>)
    4006:	601a      	str	r2, [r3, #0]
    4008:	e002      	b.n	4010 <idle_timeout+0x20>
	}else{
		idle_seconds = 0;
    400a:	4b09      	ldr	r3, [pc, #36]	; (4030 <idle_timeout+0x40>)
    400c:	2200      	movs	r2, #0
    400e:	601a      	str	r2, [r3, #0]
	}
	
	if (idle_seconds>idle_seconds_max){
    4010:	4b07      	ldr	r3, [pc, #28]	; (4030 <idle_timeout+0x40>)
    4012:	681b      	ldr	r3, [r3, #0]
    4014:	2b3c      	cmp	r3, #60	; 0x3c
    4016:	d905      	bls.n	4024 <idle_timeout+0x34>
		current_input = input_powerdown;
    4018:	4b04      	ldr	r3, [pc, #16]	; (402c <idle_timeout+0x3c>)
    401a:	2206      	movs	r2, #6
    401c:	701a      	strb	r2, [r3, #0]
		idle_seconds = 0;
    401e:	4b04      	ldr	r3, [pc, #16]	; (4030 <idle_timeout+0x40>)
    4020:	2200      	movs	r2, #0
    4022:	601a      	str	r2, [r3, #0]
	}
	
	
	
	
};
    4024:	46c0      	nop			; (mov r8, r8)
    4026:	46bd      	mov	sp, r7
    4028:	bd80      	pop	{r7, pc}
    402a:	46c0      	nop			; (mov r8, r8)
    402c:	20003b78 	.word	0x20003b78
    4030:	20000cb4 	.word	0x20000cb4

00004034 <configure_timers>:

void configure_timers(enum STATE timer_state){
    4034:	b580      	push	{r7, lr}
    4036:	b082      	sub	sp, #8
    4038:	af00      	add	r7, sp, #0
    403a:	0002      	movs	r2, r0
    403c:	1dfb      	adds	r3, r7, #7
    403e:	701a      	strb	r2, [r3, #0]
	
	switch (timer_state)
    4040:	1dfb      	adds	r3, r7, #7
    4042:	781b      	ldrb	r3, [r3, #0]
    4044:	2b04      	cmp	r3, #4
    4046:	d009      	beq.n	405c <configure_timers+0x28>
    4048:	2b05      	cmp	r3, #5
    404a:	d000      	beq.n	404e <configure_timers+0x1a>
			configure_timer_quick3();
		

			break;
		default:
			break;
    404c:	e01e      	b.n	408c <configure_timers+0x58>
			configure_timer_1s();
    404e:	4b11      	ldr	r3, [pc, #68]	; (4094 <configure_timers+0x60>)
    4050:	4798      	blx	r3
			configure_timer_laser_timeout();
    4052:	4b11      	ldr	r3, [pc, #68]	; (4098 <configure_timers+0x64>)
    4054:	4798      	blx	r3
			configure_timer_longbutton();			
    4056:	4b11      	ldr	r3, [pc, #68]	; (409c <configure_timers+0x68>)
    4058:	4798      	blx	r3
			break;
    405a:	e017      	b.n	408c <configure_timers+0x58>
			tc_disable(&timer1);
    405c:	4b10      	ldr	r3, [pc, #64]	; (40a0 <configure_timers+0x6c>)
    405e:	0018      	movs	r0, r3
    4060:	4b10      	ldr	r3, [pc, #64]	; (40a4 <configure_timers+0x70>)
    4062:	4798      	blx	r3
			timer1_on_off = false;
    4064:	4b10      	ldr	r3, [pc, #64]	; (40a8 <configure_timers+0x74>)
    4066:	2200      	movs	r2, #0
    4068:	701a      	strb	r2, [r3, #0]
			tc_disable(&timer2);
    406a:	4b10      	ldr	r3, [pc, #64]	; (40ac <configure_timers+0x78>)
    406c:	0018      	movs	r0, r3
    406e:	4b0d      	ldr	r3, [pc, #52]	; (40a4 <configure_timers+0x70>)
    4070:	4798      	blx	r3
			timer2_on_off = false;
    4072:	4b0f      	ldr	r3, [pc, #60]	; (40b0 <configure_timers+0x7c>)
    4074:	2200      	movs	r2, #0
    4076:	701a      	strb	r2, [r3, #0]
			tc_disable(&timer3);
    4078:	4b0e      	ldr	r3, [pc, #56]	; (40b4 <configure_timers+0x80>)
    407a:	0018      	movs	r0, r3
    407c:	4b09      	ldr	r3, [pc, #36]	; (40a4 <configure_timers+0x70>)
    407e:	4798      	blx	r3
			timer3_on_off = false;
    4080:	4b0d      	ldr	r3, [pc, #52]	; (40b8 <configure_timers+0x84>)
    4082:	2200      	movs	r2, #0
    4084:	701a      	strb	r2, [r3, #0]
			configure_timer_quick3();
    4086:	4b0d      	ldr	r3, [pc, #52]	; (40bc <configure_timers+0x88>)
    4088:	4798      	blx	r3
			break;
    408a:	46c0      	nop			; (mov r8, r8)
	}


}
    408c:	46c0      	nop			; (mov r8, r8)
    408e:	46bd      	mov	sp, r7
    4090:	b002      	add	sp, #8
    4092:	bd80      	pop	{r7, pc}
    4094:	000040c1 	.word	0x000040c1
    4098:	00004179 	.word	0x00004179
    409c:	0000423d 	.word	0x0000423d
    40a0:	20001108 	.word	0x20001108
    40a4:	00003de5 	.word	0x00003de5
    40a8:	20000cb0 	.word	0x20000cb0
    40ac:	20001020 	.word	0x20001020
    40b0:	20000cb1 	.word	0x20000cb1
    40b4:	20001178 	.word	0x20001178
    40b8:	20000cb2 	.word	0x20000cb2
    40bc:	00004305 	.word	0x00004305

000040c0 <configure_timer_1s>:

void configure_timer_1s(void){
    40c0:	b580      	push	{r7, lr}
    40c2:	b08e      	sub	sp, #56	; 0x38
    40c4:	af00      	add	r7, sp, #0
	//  Timer setup for 1 second refresh
	struct tc_config config_tc;
	
	//  Configure Timer
	tc_get_config_defaults(&config_tc);
    40c6:	003b      	movs	r3, r7
    40c8:	0018      	movs	r0, r3
    40ca:	4b20      	ldr	r3, [pc, #128]	; (414c <configure_timer_1s+0x8c>)
    40cc:	4798      	blx	r3
	config_tc.counter_size    = TC_COUNTER_SIZE_8BIT;
    40ce:	003b      	movs	r3, r7
    40d0:	2204      	movs	r2, #4
    40d2:	70da      	strb	r2, [r3, #3]
	config_tc.clock_prescaler =     TC_CLOCK_PRESCALER_DIV1024 ;//  TC_CLOCK_PRESCALER_DIV1024;
    40d4:	003b      	movs	r3, r7
    40d6:	22e0      	movs	r2, #224	; 0xe0
    40d8:	00d2      	lsls	r2, r2, #3
    40da:	809a      	strh	r2, [r3, #4]
	config_tc.clock_source = GCLK_GENERATOR_2;
    40dc:	003b      	movs	r3, r7
    40de:	2202      	movs	r2, #2
    40e0:	701a      	strb	r2, [r3, #0]
	config_tc.count_direction =  TC_COUNT_DIRECTION_UP;// TC_COUNT_DIRECTION_DOWN;
    40e2:	003b      	movs	r3, r7
    40e4:	2200      	movs	r2, #0
    40e6:	739a      	strb	r2, [r3, #14]
	config_tc.reload_action =  TC_RELOAD_ACTION_PRESC;
    40e8:	003b      	movs	r3, r7
    40ea:	2210      	movs	r2, #16
    40ec:	71da      	strb	r2, [r3, #7]
	config_tc.counter_8_bit.period = 0x1F;//0x1F = 31d, 1 second exactly on counter
    40ee:	003b      	movs	r3, r7
    40f0:	2229      	movs	r2, #41	; 0x29
    40f2:	211f      	movs	r1, #31
    40f4:	5499      	strb	r1, [r3, r2]
	if(timer2_on_off){
    40f6:	4b16      	ldr	r3, [pc, #88]	; (4150 <configure_timer_1s+0x90>)
    40f8:	781b      	ldrb	r3, [r3, #0]
    40fa:	2b00      	cmp	r3, #0
    40fc:	d006      	beq.n	410c <configure_timer_1s+0x4c>
		tc_disable(&timer2);
    40fe:	4b15      	ldr	r3, [pc, #84]	; (4154 <configure_timer_1s+0x94>)
    4100:	0018      	movs	r0, r3
    4102:	4b15      	ldr	r3, [pc, #84]	; (4158 <configure_timer_1s+0x98>)
    4104:	4798      	blx	r3
		timer2_on_off = false;
    4106:	4b12      	ldr	r3, [pc, #72]	; (4150 <configure_timer_1s+0x90>)
    4108:	2200      	movs	r2, #0
    410a:	701a      	strb	r2, [r3, #0]
	}
	tc_init(&timer2, TC1, &config_tc);
    410c:	003a      	movs	r2, r7
    410e:	4913      	ldr	r1, [pc, #76]	; (415c <configure_timer_1s+0x9c>)
    4110:	4b10      	ldr	r3, [pc, #64]	; (4154 <configure_timer_1s+0x94>)
    4112:	0018      	movs	r0, r3
    4114:	4b12      	ldr	r3, [pc, #72]	; (4160 <configure_timer_1s+0xa0>)
    4116:	4798      	blx	r3
	tc_enable(&timer2);
    4118:	4b0e      	ldr	r3, [pc, #56]	; (4154 <configure_timer_1s+0x94>)
    411a:	0018      	movs	r0, r3
    411c:	4b11      	ldr	r3, [pc, #68]	; (4164 <configure_timer_1s+0xa4>)
    411e:	4798      	blx	r3
	timer2_on_off = true;
    4120:	4b0b      	ldr	r3, [pc, #44]	; (4150 <configure_timer_1s+0x90>)
    4122:	2201      	movs	r2, #1
    4124:	701a      	strb	r2, [r3, #0]
	tc_start_counter(&timer2);
    4126:	4b0b      	ldr	r3, [pc, #44]	; (4154 <configure_timer_1s+0x94>)
    4128:	0018      	movs	r0, r3
    412a:	4b0f      	ldr	r3, [pc, #60]	; (4168 <configure_timer_1s+0xa8>)
    412c:	4798      	blx	r3

	//  Configure Callbacks
	//1 second refresh
	tc_register_callback(
    412e:	490f      	ldr	r1, [pc, #60]	; (416c <configure_timer_1s+0xac>)
    4130:	4b08      	ldr	r3, [pc, #32]	; (4154 <configure_timer_1s+0x94>)
    4132:	2200      	movs	r2, #0
    4134:	0018      	movs	r0, r3
    4136:	4b0e      	ldr	r3, [pc, #56]	; (4170 <configure_timer_1s+0xb0>)
    4138:	4798      	blx	r3
	&timer2,
	timer_callback_1s,
	TC_CALLBACK_OVERFLOW);
	tc_enable_callback(&timer2, TC_CALLBACK_OVERFLOW);
    413a:	4b06      	ldr	r3, [pc, #24]	; (4154 <configure_timer_1s+0x94>)
    413c:	2100      	movs	r1, #0
    413e:	0018      	movs	r0, r3
    4140:	4b0c      	ldr	r3, [pc, #48]	; (4174 <configure_timer_1s+0xb4>)
    4142:	4798      	blx	r3

}
    4144:	46c0      	nop			; (mov r8, r8)
    4146:	46bd      	mov	sp, r7
    4148:	b00e      	add	sp, #56	; 0x38
    414a:	bd80      	pop	{r7, pc}
    414c:	00003d0d 	.word	0x00003d0d
    4150:	20000cb1 	.word	0x20000cb1
    4154:	20001020 	.word	0x20001020
    4158:	00003de5 	.word	0x00003de5
    415c:	42002400 	.word	0x42002400
    4160:	00006c15 	.word	0x00006c15
    4164:	00003db1 	.word	0x00003db1
    4168:	00003e59 	.word	0x00003e59
    416c:	000043d5 	.word	0x000043d5
    4170:	00006989 	.word	0x00006989
    4174:	00003ebd 	.word	0x00003ebd

00004178 <configure_timer_laser_timeout>:


void configure_timer_laser_timeout(void){
    4178:	b580      	push	{r7, lr}
    417a:	b08e      	sub	sp, #56	; 0x38
    417c:	af00      	add	r7, sp, #0
	//  Timer setup for laser time-out
	struct tc_config config_tc;

	//Timer for laser timeout
	tc_get_config_defaults(&config_tc);
    417e:	003b      	movs	r3, r7
    4180:	0018      	movs	r0, r3
    4182:	4b22      	ldr	r3, [pc, #136]	; (420c <configure_timer_laser_timeout+0x94>)
    4184:	4798      	blx	r3
	//config_tc.counter_size    = TC_COUNTER_SIZE_8BIT;
	config_tc.counter_size    = TC_COUNTER_SIZE_16BIT;
    4186:	003b      	movs	r3, r7
    4188:	2200      	movs	r2, #0
    418a:	70da      	strb	r2, [r3, #3]
	config_tc.clock_prescaler =     TC_CLOCK_PRESCALER_DIV1024 ;//  TC_CLOCK_PRESCALER_DIV1024;
    418c:	003b      	movs	r3, r7
    418e:	22e0      	movs	r2, #224	; 0xe0
    4190:	00d2      	lsls	r2, r2, #3
    4192:	809a      	strh	r2, [r3, #4]
	config_tc.clock_source = GCLK_GENERATOR_2;
    4194:	003b      	movs	r3, r7
    4196:	2202      	movs	r2, #2
    4198:	701a      	strb	r2, [r3, #0]
	config_tc.count_direction =  TC_COUNT_DIRECTION_DOWN;
    419a:	003b      	movs	r3, r7
    419c:	2201      	movs	r2, #1
    419e:	739a      	strb	r2, [r3, #14]
	config_tc.reload_action =  TC_RELOAD_ACTION_PRESC;
    41a0:	003b      	movs	r3, r7
    41a2:	2210      	movs	r2, #16
    41a4:	71da      	strb	r2, [r3, #7]
	//config_tc.counter_16_bit.compare_capture_channel = 5;
	//config_tc.counter_8_bit.period = 100;
	if(timer3_on_off){
    41a6:	4b1a      	ldr	r3, [pc, #104]	; (4210 <configure_timer_laser_timeout+0x98>)
    41a8:	781b      	ldrb	r3, [r3, #0]
    41aa:	2b00      	cmp	r3, #0
    41ac:	d006      	beq.n	41bc <configure_timer_laser_timeout+0x44>
		tc_disable(&timer3);
    41ae:	4b19      	ldr	r3, [pc, #100]	; (4214 <configure_timer_laser_timeout+0x9c>)
    41b0:	0018      	movs	r0, r3
    41b2:	4b19      	ldr	r3, [pc, #100]	; (4218 <configure_timer_laser_timeout+0xa0>)
    41b4:	4798      	blx	r3
		timer3_on_off = false;
    41b6:	4b16      	ldr	r3, [pc, #88]	; (4210 <configure_timer_laser_timeout+0x98>)
    41b8:	2200      	movs	r2, #0
    41ba:	701a      	strb	r2, [r3, #0]
	}
	tc_init(&timer3, TC4, &config_tc);
    41bc:	003a      	movs	r2, r7
    41be:	4917      	ldr	r1, [pc, #92]	; (421c <configure_timer_laser_timeout+0xa4>)
    41c0:	4b14      	ldr	r3, [pc, #80]	; (4214 <configure_timer_laser_timeout+0x9c>)
    41c2:	0018      	movs	r0, r3
    41c4:	4b16      	ldr	r3, [pc, #88]	; (4220 <configure_timer_laser_timeout+0xa8>)
    41c6:	4798      	blx	r3
	tc_enable(&timer3);
    41c8:	4b12      	ldr	r3, [pc, #72]	; (4214 <configure_timer_laser_timeout+0x9c>)
    41ca:	0018      	movs	r0, r3
    41cc:	4b15      	ldr	r3, [pc, #84]	; (4224 <configure_timer_laser_timeout+0xac>)
    41ce:	4798      	blx	r3
	timer3_on_off = true;
    41d0:	4b0f      	ldr	r3, [pc, #60]	; (4210 <configure_timer_laser_timeout+0x98>)
    41d2:	2201      	movs	r2, #1
    41d4:	701a      	strb	r2, [r3, #0]
	tc_stop_counter(&timer3);
    41d6:	4b0f      	ldr	r3, [pc, #60]	; (4214 <configure_timer_laser_timeout+0x9c>)
    41d8:	0018      	movs	r0, r3
    41da:	4b13      	ldr	r3, [pc, #76]	; (4228 <configure_timer_laser_timeout+0xb0>)
    41dc:	4798      	blx	r3
	tc_set_count_value(&timer3, laser_timeout);
    41de:	23e1      	movs	r3, #225	; 0xe1
    41e0:	009a      	lsls	r2, r3, #2
    41e2:	4b0c      	ldr	r3, [pc, #48]	; (4214 <configure_timer_laser_timeout+0x9c>)
    41e4:	0011      	movs	r1, r2
    41e6:	0018      	movs	r0, r3
    41e8:	4b10      	ldr	r3, [pc, #64]	; (422c <configure_timer_laser_timeout+0xb4>)
    41ea:	4798      	blx	r3

	//  Configure callbacks
	//laser Timeout
	tc_register_callback(
    41ec:	4910      	ldr	r1, [pc, #64]	; (4230 <configure_timer_laser_timeout+0xb8>)
    41ee:	4b09      	ldr	r3, [pc, #36]	; (4214 <configure_timer_laser_timeout+0x9c>)
    41f0:	2200      	movs	r2, #0
    41f2:	0018      	movs	r0, r3
    41f4:	4b0f      	ldr	r3, [pc, #60]	; (4234 <configure_timer_laser_timeout+0xbc>)
    41f6:	4798      	blx	r3
	&timer3,
	timer_callback_laser_timeout,
	TC_CALLBACK_OVERFLOW);
	tc_enable_callback(&timer3, TC_CALLBACK_OVERFLOW);
    41f8:	4b06      	ldr	r3, [pc, #24]	; (4214 <configure_timer_laser_timeout+0x9c>)
    41fa:	2100      	movs	r1, #0
    41fc:	0018      	movs	r0, r3
    41fe:	4b0e      	ldr	r3, [pc, #56]	; (4238 <configure_timer_laser_timeout+0xc0>)
    4200:	4798      	blx	r3

}
    4202:	46c0      	nop			; (mov r8, r8)
    4204:	46bd      	mov	sp, r7
    4206:	b00e      	add	sp, #56	; 0x38
    4208:	bd80      	pop	{r7, pc}
    420a:	46c0      	nop			; (mov r8, r8)
    420c:	00003d0d 	.word	0x00003d0d
    4210:	20000cb2 	.word	0x20000cb2
    4214:	20001178 	.word	0x20001178
    4218:	00003de5 	.word	0x00003de5
    421c:	43000800 	.word	0x43000800
    4220:	00006c15 	.word	0x00006c15
    4224:	00003db1 	.word	0x00003db1
    4228:	00003e29 	.word	0x00003e29
    422c:	000070b5 	.word	0x000070b5
    4230:	000043f1 	.word	0x000043f1
    4234:	00006989 	.word	0x00006989
    4238:	00003ebd 	.word	0x00003ebd

0000423c <configure_timer_longbutton>:


void configure_timer_longbutton(void){
    423c:	b580      	push	{r7, lr}
    423e:	b08e      	sub	sp, #56	; 0x38
    4240:	af00      	add	r7, sp, #0
	//  Timer Setup for external button long-press
	struct tc_config config_tc;

	//Timer for long button press
	tc_get_config_defaults(&config_tc);
    4242:	003b      	movs	r3, r7
    4244:	0018      	movs	r0, r3
    4246:	4b23      	ldr	r3, [pc, #140]	; (42d4 <configure_timer_longbutton+0x98>)
    4248:	4798      	blx	r3
	config_tc.counter_size    = TC_COUNTER_SIZE_8BIT;
    424a:	003b      	movs	r3, r7
    424c:	2204      	movs	r2, #4
    424e:	70da      	strb	r2, [r3, #3]
	config_tc.clock_prescaler =    TC_CLOCK_PRESCALER_DIV1024;//  TC_CLOCK_PRESCALER_DIV1024;
    4250:	003b      	movs	r3, r7
    4252:	22e0      	movs	r2, #224	; 0xe0
    4254:	00d2      	lsls	r2, r2, #3
    4256:	809a      	strh	r2, [r3, #4]
	config_tc.clock_source = GCLK_GENERATOR_2;
    4258:	003b      	movs	r3, r7
    425a:	2202      	movs	r2, #2
    425c:	701a      	strb	r2, [r3, #0]
	config_tc.count_direction = TC_COUNT_DIRECTION_UP;
    425e:	003b      	movs	r3, r7
    4260:	2200      	movs	r2, #0
    4262:	739a      	strb	r2, [r3, #14]
	config_tc.reload_action = TC_RELOAD_ACTION_PRESC;
    4264:	003b      	movs	r3, r7
    4266:	2210      	movs	r2, #16
    4268:	71da      	strb	r2, [r3, #7]
	//config_tc.counter_8_bit.value=0;
	config_tc.counter_8_bit.period = off_hold_time;
    426a:	003b      	movs	r3, r7
    426c:	2229      	movs	r2, #41	; 0x29
    426e:	2160      	movs	r1, #96	; 0x60
    4270:	5499      	strb	r1, [r3, r2]
	if(timer1_on_off){
    4272:	4b19      	ldr	r3, [pc, #100]	; (42d8 <configure_timer_longbutton+0x9c>)
    4274:	781b      	ldrb	r3, [r3, #0]
    4276:	2b00      	cmp	r3, #0
    4278:	d006      	beq.n	4288 <configure_timer_longbutton+0x4c>
		tc_disable(&timer1);
    427a:	4b18      	ldr	r3, [pc, #96]	; (42dc <configure_timer_longbutton+0xa0>)
    427c:	0018      	movs	r0, r3
    427e:	4b18      	ldr	r3, [pc, #96]	; (42e0 <configure_timer_longbutton+0xa4>)
    4280:	4798      	blx	r3
		timer1_on_off = false;
    4282:	4b15      	ldr	r3, [pc, #84]	; (42d8 <configure_timer_longbutton+0x9c>)
    4284:	2200      	movs	r2, #0
    4286:	701a      	strb	r2, [r3, #0]
	}
	tc_init(&timer1, TC0, &config_tc);
    4288:	003a      	movs	r2, r7
    428a:	4916      	ldr	r1, [pc, #88]	; (42e4 <configure_timer_longbutton+0xa8>)
    428c:	4b13      	ldr	r3, [pc, #76]	; (42dc <configure_timer_longbutton+0xa0>)
    428e:	0018      	movs	r0, r3
    4290:	4b15      	ldr	r3, [pc, #84]	; (42e8 <configure_timer_longbutton+0xac>)
    4292:	4798      	blx	r3
	tc_enable(&timer1);
    4294:	4b11      	ldr	r3, [pc, #68]	; (42dc <configure_timer_longbutton+0xa0>)
    4296:	0018      	movs	r0, r3
    4298:	4b14      	ldr	r3, [pc, #80]	; (42ec <configure_timer_longbutton+0xb0>)
    429a:	4798      	blx	r3
	timer1_on_off = true;
    429c:	4b0e      	ldr	r3, [pc, #56]	; (42d8 <configure_timer_longbutton+0x9c>)
    429e:	2201      	movs	r2, #1
    42a0:	701a      	strb	r2, [r3, #0]
	tc_stop_counter(&timer1);//enable starts timer, stop immediately
    42a2:	4b0e      	ldr	r3, [pc, #56]	; (42dc <configure_timer_longbutton+0xa0>)
    42a4:	0018      	movs	r0, r3
    42a6:	4b12      	ldr	r3, [pc, #72]	; (42f0 <configure_timer_longbutton+0xb4>)
    42a8:	4798      	blx	r3
	tc_set_count_value(&timer1, 0);
    42aa:	4b0c      	ldr	r3, [pc, #48]	; (42dc <configure_timer_longbutton+0xa0>)
    42ac:	2100      	movs	r1, #0
    42ae:	0018      	movs	r0, r3
    42b0:	4b10      	ldr	r3, [pc, #64]	; (42f4 <configure_timer_longbutton+0xb8>)
    42b2:	4798      	blx	r3

	// Configure callback
	//Long button press
	tc_register_callback(
    42b4:	4910      	ldr	r1, [pc, #64]	; (42f8 <configure_timer_longbutton+0xbc>)
    42b6:	4b09      	ldr	r3, [pc, #36]	; (42dc <configure_timer_longbutton+0xa0>)
    42b8:	2200      	movs	r2, #0
    42ba:	0018      	movs	r0, r3
    42bc:	4b0f      	ldr	r3, [pc, #60]	; (42fc <configure_timer_longbutton+0xc0>)
    42be:	4798      	blx	r3
	&timer1,
	timer_callback_longbutton,
	TC_CALLBACK_OVERFLOW);
	tc_enable_callback(&timer1, TC_CALLBACK_OVERFLOW);
    42c0:	4b06      	ldr	r3, [pc, #24]	; (42dc <configure_timer_longbutton+0xa0>)
    42c2:	2100      	movs	r1, #0
    42c4:	0018      	movs	r0, r3
    42c6:	4b0e      	ldr	r3, [pc, #56]	; (4300 <configure_timer_longbutton+0xc4>)
    42c8:	4798      	blx	r3



}
    42ca:	46c0      	nop			; (mov r8, r8)
    42cc:	46bd      	mov	sp, r7
    42ce:	b00e      	add	sp, #56	; 0x38
    42d0:	bd80      	pop	{r7, pc}
    42d2:	46c0      	nop			; (mov r8, r8)
    42d4:	00003d0d 	.word	0x00003d0d
    42d8:	20000cb0 	.word	0x20000cb0
    42dc:	20001108 	.word	0x20001108
    42e0:	00003de5 	.word	0x00003de5
    42e4:	42002000 	.word	0x42002000
    42e8:	00006c15 	.word	0x00006c15
    42ec:	00003db1 	.word	0x00003db1
    42f0:	00003e29 	.word	0x00003e29
    42f4:	000070b5 	.word	0x000070b5
    42f8:	00004439 	.word	0x00004439
    42fc:	00006989 	.word	0x00006989
    4300:	00003ebd 	.word	0x00003ebd

00004304 <configure_timer_quick3>:

//
void configure_timer_quick3(void)
{
    4304:	b580      	push	{r7, lr}
    4306:	b08e      	sub	sp, #56	; 0x38
    4308:	af00      	add	r7, sp, #0
	//  Timer setup for external button 3-quick presses to be used during power down
	//  Re-uses 1 second refresh timer
	struct tc_config config_tc;

	//  Configure Timer
	tc_get_config_defaults(&config_tc);
    430a:	003b      	movs	r3, r7
    430c:	0018      	movs	r0, r3
    430e:	4b24      	ldr	r3, [pc, #144]	; (43a0 <configure_timer_quick3+0x9c>)
    4310:	4798      	blx	r3
	config_tc.counter_size    = TC_COUNTER_SIZE_8BIT;
    4312:	003b      	movs	r3, r7
    4314:	2204      	movs	r2, #4
    4316:	70da      	strb	r2, [r3, #3]
	config_tc.clock_prescaler =     TC_CLOCK_PRESCALER_DIV1024 ;//  TC_CLOCK_PRESCALER_DIV1024;
    4318:	003b      	movs	r3, r7
    431a:	22e0      	movs	r2, #224	; 0xe0
    431c:	00d2      	lsls	r2, r2, #3
    431e:	809a      	strh	r2, [r3, #4]
	config_tc.clock_source = GCLK_GENERATOR_2;
    4320:	003b      	movs	r3, r7
    4322:	2202      	movs	r2, #2
    4324:	701a      	strb	r2, [r3, #0]
	config_tc.count_direction =  TC_COUNT_DIRECTION_UP;// TC_COUNT_DIRECTION_DOWN;
    4326:	003b      	movs	r3, r7
    4328:	2200      	movs	r2, #0
    432a:	739a      	strb	r2, [r3, #14]
	config_tc.reload_action =  TC_RELOAD_ACTION_PRESC;
    432c:	003b      	movs	r3, r7
    432e:	2210      	movs	r2, #16
    4330:	71da      	strb	r2, [r3, #7]
	config_tc.counter_8_bit.period = quick_click_time;
    4332:	003b      	movs	r3, r7
    4334:	2229      	movs	r2, #41	; 0x29
    4336:	2110      	movs	r1, #16
    4338:	5499      	strb	r1, [r3, r2]
	if(timer2_on_off){
    433a:	4b1a      	ldr	r3, [pc, #104]	; (43a4 <configure_timer_quick3+0xa0>)
    433c:	781b      	ldrb	r3, [r3, #0]
    433e:	2b00      	cmp	r3, #0
    4340:	d006      	beq.n	4350 <configure_timer_quick3+0x4c>
		tc_disable(&timer2);
    4342:	4b19      	ldr	r3, [pc, #100]	; (43a8 <configure_timer_quick3+0xa4>)
    4344:	0018      	movs	r0, r3
    4346:	4b19      	ldr	r3, [pc, #100]	; (43ac <configure_timer_quick3+0xa8>)
    4348:	4798      	blx	r3
		timer2_on_off = false;
    434a:	4b16      	ldr	r3, [pc, #88]	; (43a4 <configure_timer_quick3+0xa0>)
    434c:	2200      	movs	r2, #0
    434e:	701a      	strb	r2, [r3, #0]
	}
	tc_init(&timer2, TC1, &config_tc);
    4350:	003a      	movs	r2, r7
    4352:	4917      	ldr	r1, [pc, #92]	; (43b0 <configure_timer_quick3+0xac>)
    4354:	4b14      	ldr	r3, [pc, #80]	; (43a8 <configure_timer_quick3+0xa4>)
    4356:	0018      	movs	r0, r3
    4358:	4b16      	ldr	r3, [pc, #88]	; (43b4 <configure_timer_quick3+0xb0>)
    435a:	4798      	blx	r3
	tc_enable(&timer2);
    435c:	4b12      	ldr	r3, [pc, #72]	; (43a8 <configure_timer_quick3+0xa4>)
    435e:	0018      	movs	r0, r3
    4360:	4b15      	ldr	r3, [pc, #84]	; (43b8 <configure_timer_quick3+0xb4>)
    4362:	4798      	blx	r3
	timer2_on_off = true;
    4364:	4b0f      	ldr	r3, [pc, #60]	; (43a4 <configure_timer_quick3+0xa0>)
    4366:	2201      	movs	r2, #1
    4368:	701a      	strb	r2, [r3, #0]
	tc_stop_counter(&timer2);
    436a:	4b0f      	ldr	r3, [pc, #60]	; (43a8 <configure_timer_quick3+0xa4>)
    436c:	0018      	movs	r0, r3
    436e:	4b13      	ldr	r3, [pc, #76]	; (43bc <configure_timer_quick3+0xb8>)
    4370:	4798      	blx	r3
	tc_set_count_value(&timer2, 0);
    4372:	4b0d      	ldr	r3, [pc, #52]	; (43a8 <configure_timer_quick3+0xa4>)
    4374:	2100      	movs	r1, #0
    4376:	0018      	movs	r0, r3
    4378:	4b11      	ldr	r3, [pc, #68]	; (43c0 <configure_timer_quick3+0xbc>)
    437a:	4798      	blx	r3

	//  Configure Callbacks
	//1 second refresh
	tc_register_callback(
    437c:	4911      	ldr	r1, [pc, #68]	; (43c4 <configure_timer_quick3+0xc0>)
    437e:	4b0a      	ldr	r3, [pc, #40]	; (43a8 <configure_timer_quick3+0xa4>)
    4380:	2200      	movs	r2, #0
    4382:	0018      	movs	r0, r3
    4384:	4b10      	ldr	r3, [pc, #64]	; (43c8 <configure_timer_quick3+0xc4>)
    4386:	4798      	blx	r3
	&timer2,
	timer_callback_quick3,
	TC_CALLBACK_OVERFLOW);
	tc_enable_callback(&timer2, TC_CALLBACK_OVERFLOW);
    4388:	4b07      	ldr	r3, [pc, #28]	; (43a8 <configure_timer_quick3+0xa4>)
    438a:	2100      	movs	r1, #0
    438c:	0018      	movs	r0, r3
    438e:	4b0f      	ldr	r3, [pc, #60]	; (43cc <configure_timer_quick3+0xc8>)
    4390:	4798      	blx	r3

	click_counter = 0;
    4392:	4b0f      	ldr	r3, [pc, #60]	; (43d0 <configure_timer_quick3+0xcc>)
    4394:	2200      	movs	r2, #0
    4396:	701a      	strb	r2, [r3, #0]

}
    4398:	46c0      	nop			; (mov r8, r8)
    439a:	46bd      	mov	sp, r7
    439c:	b00e      	add	sp, #56	; 0x38
    439e:	bd80      	pop	{r7, pc}
    43a0:	00003d0d 	.word	0x00003d0d
    43a4:	20000cb1 	.word	0x20000cb1
    43a8:	20001020 	.word	0x20001020
    43ac:	00003de5 	.word	0x00003de5
    43b0:	42002400 	.word	0x42002400
    43b4:	00006c15 	.word	0x00006c15
    43b8:	00003db1 	.word	0x00003db1
    43bc:	00003e29 	.word	0x00003e29
    43c0:	000070b5 	.word	0x000070b5
    43c4:	00004471 	.word	0x00004471
    43c8:	00006989 	.word	0x00006989
    43cc:	00003ebd 	.word	0x00003ebd
    43d0:	20002f74 	.word	0x20002f74

000043d4 <timer_callback_1s>:


void timer_callback_1s(struct tc_module *const module_inst)
{
    43d4:	b580      	push	{r7, lr}
    43d6:	b082      	sub	sp, #8
    43d8:	af00      	add	r7, sp, #0
    43da:	6078      	str	r0, [r7, #4]

	
	current_input=input_1sec;
    43dc:	4b03      	ldr	r3, [pc, #12]	; (43ec <timer_callback_1s+0x18>)
    43de:	2207      	movs	r2, #7
    43e0:	701a      	strb	r2, [r3, #0]
	//debug1++;

}
    43e2:	46c0      	nop			; (mov r8, r8)
    43e4:	46bd      	mov	sp, r7
    43e6:	b002      	add	sp, #8
    43e8:	bd80      	pop	{r7, pc}
    43ea:	46c0      	nop			; (mov r8, r8)
    43ec:	20003b78 	.word	0x20003b78

000043f0 <timer_callback_laser_timeout>:

void timer_callback_laser_timeout(struct tc_module *const module_inst)
{
    43f0:	b580      	push	{r7, lr}
    43f2:	b082      	sub	sp, #8
    43f4:	af00      	add	r7, sp, #0
    43f6:	6078      	str	r0, [r7, #4]

	tc_stop_counter(&timer3);
    43f8:	4b0a      	ldr	r3, [pc, #40]	; (4424 <timer_callback_laser_timeout+0x34>)
    43fa:	0018      	movs	r0, r3
    43fc:	4b0a      	ldr	r3, [pc, #40]	; (4428 <timer_callback_laser_timeout+0x38>)
    43fe:	4798      	blx	r3
	tc_set_count_value(&timer3, laser_timeout);
    4400:	23e1      	movs	r3, #225	; 0xe1
    4402:	009a      	lsls	r2, r3, #2
    4404:	4b07      	ldr	r3, [pc, #28]	; (4424 <timer_callback_laser_timeout+0x34>)
    4406:	0011      	movs	r1, r2
    4408:	0018      	movs	r0, r3
    440a:	4b08      	ldr	r3, [pc, #32]	; (442c <timer_callback_laser_timeout+0x3c>)
    440c:	4798      	blx	r3
	rangefinder_on_off(false);
    440e:	2000      	movs	r0, #0
    4410:	4b07      	ldr	r3, [pc, #28]	; (4430 <timer_callback_laser_timeout+0x40>)
    4412:	4798      	blx	r3
	current_input = input_laser_timeout;
    4414:	4b07      	ldr	r3, [pc, #28]	; (4434 <timer_callback_laser_timeout+0x44>)
    4416:	2216      	movs	r2, #22
    4418:	701a      	strb	r2, [r3, #0]
}
    441a:	46c0      	nop			; (mov r8, r8)
    441c:	46bd      	mov	sp, r7
    441e:	b002      	add	sp, #8
    4420:	bd80      	pop	{r7, pc}
    4422:	46c0      	nop			; (mov r8, r8)
    4424:	20001178 	.word	0x20001178
    4428:	00003e29 	.word	0x00003e29
    442c:	000070b5 	.word	0x000070b5
    4430:	00002a81 	.word	0x00002a81
    4434:	20003b78 	.word	0x20003b78

00004438 <timer_callback_longbutton>:




void timer_callback_longbutton(struct tc_module *const module_inst)
{
    4438:	b580      	push	{r7, lr}
    443a:	b082      	sub	sp, #8
    443c:	af00      	add	r7, sp, #0
    443e:	6078      	str	r0, [r7, #4]
	current_input=input_powerdown;
    4440:	4b07      	ldr	r3, [pc, #28]	; (4460 <timer_callback_longbutton+0x28>)
    4442:	2206      	movs	r2, #6
    4444:	701a      	strb	r2, [r3, #0]
	tc_stop_counter(&timer1);
    4446:	4b07      	ldr	r3, [pc, #28]	; (4464 <timer_callback_longbutton+0x2c>)
    4448:	0018      	movs	r0, r3
    444a:	4b07      	ldr	r3, [pc, #28]	; (4468 <timer_callback_longbutton+0x30>)
    444c:	4798      	blx	r3
	tc_set_count_value(&timer1, 0);
    444e:	4b05      	ldr	r3, [pc, #20]	; (4464 <timer_callback_longbutton+0x2c>)
    4450:	2100      	movs	r1, #0
    4452:	0018      	movs	r0, r3
    4454:	4b05      	ldr	r3, [pc, #20]	; (446c <timer_callback_longbutton+0x34>)
    4456:	4798      	blx	r3
}
    4458:	46c0      	nop			; (mov r8, r8)
    445a:	46bd      	mov	sp, r7
    445c:	b002      	add	sp, #8
    445e:	bd80      	pop	{r7, pc}
    4460:	20003b78 	.word	0x20003b78
    4464:	20001108 	.word	0x20001108
    4468:	00003e29 	.word	0x00003e29
    446c:	000070b5 	.word	0x000070b5

00004470 <timer_callback_quick3>:



void timer_callback_quick3(struct tc_module *const module_inst)
{
    4470:	b580      	push	{r7, lr}
    4472:	b082      	sub	sp, #8
    4474:	af00      	add	r7, sp, #0
    4476:	6078      	str	r0, [r7, #4]
	tc_stop_counter(&timer2);
    4478:	4b07      	ldr	r3, [pc, #28]	; (4498 <timer_callback_quick3+0x28>)
    447a:	0018      	movs	r0, r3
    447c:	4b07      	ldr	r3, [pc, #28]	; (449c <timer_callback_quick3+0x2c>)
    447e:	4798      	blx	r3
	tc_set_count_value(&timer2, 0);
    4480:	4b05      	ldr	r3, [pc, #20]	; (4498 <timer_callback_quick3+0x28>)
    4482:	2100      	movs	r1, #0
    4484:	0018      	movs	r0, r3
    4486:	4b06      	ldr	r3, [pc, #24]	; (44a0 <timer_callback_quick3+0x30>)
    4488:	4798      	blx	r3
	click_counter = 0;
    448a:	4b06      	ldr	r3, [pc, #24]	; (44a4 <timer_callback_quick3+0x34>)
    448c:	2200      	movs	r2, #0
    448e:	701a      	strb	r2, [r3, #0]

}
    4490:	46c0      	nop			; (mov r8, r8)
    4492:	46bd      	mov	sp, r7
    4494:	b002      	add	sp, #8
    4496:	bd80      	pop	{r7, pc}
    4498:	20001020 	.word	0x20001020
    449c:	00003e29 	.word	0x00003e29
    44a0:	000070b5 	.word	0x000070b5
    44a4:	20002f74 	.word	0x20002f74

000044a8 <laser_timeout_timer>:



//*******************************
void laser_timeout_timer(bool on_off)
{
    44a8:	b580      	push	{r7, lr}
    44aa:	b082      	sub	sp, #8
    44ac:	af00      	add	r7, sp, #0
    44ae:	0002      	movs	r2, r0
    44b0:	1dfb      	adds	r3, r7, #7
    44b2:	701a      	strb	r2, [r3, #0]
	if (on_off){
    44b4:	1dfb      	adds	r3, r7, #7
    44b6:	781b      	ldrb	r3, [r3, #0]
    44b8:	2b00      	cmp	r3, #0
    44ba:	d00b      	beq.n	44d4 <laser_timeout_timer+0x2c>
		tc_set_count_value(&timer3, laser_timeout);
    44bc:	23e1      	movs	r3, #225	; 0xe1
    44be:	009a      	lsls	r2, r3, #2
    44c0:	4b0c      	ldr	r3, [pc, #48]	; (44f4 <laser_timeout_timer+0x4c>)
    44c2:	0011      	movs	r1, r2
    44c4:	0018      	movs	r0, r3
    44c6:	4b0c      	ldr	r3, [pc, #48]	; (44f8 <laser_timeout_timer+0x50>)
    44c8:	4798      	blx	r3
		tc_start_counter(&timer3);
    44ca:	4b0a      	ldr	r3, [pc, #40]	; (44f4 <laser_timeout_timer+0x4c>)
    44cc:	0018      	movs	r0, r3
    44ce:	4b0b      	ldr	r3, [pc, #44]	; (44fc <laser_timeout_timer+0x54>)
    44d0:	4798      	blx	r3
		tc_set_count_value(&timer3, laser_timeout);
	
	}


}
    44d2:	e00a      	b.n	44ea <laser_timeout_timer+0x42>
		tc_stop_counter(&timer3);
    44d4:	4b07      	ldr	r3, [pc, #28]	; (44f4 <laser_timeout_timer+0x4c>)
    44d6:	0018      	movs	r0, r3
    44d8:	4b09      	ldr	r3, [pc, #36]	; (4500 <laser_timeout_timer+0x58>)
    44da:	4798      	blx	r3
		tc_set_count_value(&timer3, laser_timeout);
    44dc:	23e1      	movs	r3, #225	; 0xe1
    44de:	009a      	lsls	r2, r3, #2
    44e0:	4b04      	ldr	r3, [pc, #16]	; (44f4 <laser_timeout_timer+0x4c>)
    44e2:	0011      	movs	r1, r2
    44e4:	0018      	movs	r0, r3
    44e6:	4b04      	ldr	r3, [pc, #16]	; (44f8 <laser_timeout_timer+0x50>)
    44e8:	4798      	blx	r3
}
    44ea:	46c0      	nop			; (mov r8, r8)
    44ec:	46bd      	mov	sp, r7
    44ee:	b002      	add	sp, #8
    44f0:	bd80      	pop	{r7, pc}
    44f2:	46c0      	nop			; (mov r8, r8)
    44f4:	20001178 	.word	0x20001178
    44f8:	000070b5 	.word	0x000070b5
    44fc:	00003e59 	.word	0x00003e59
    4500:	00003e29 	.word	0x00003e29

00004504 <quick3_timer>:


void quick3_timer(bool on_off)
{
    4504:	b580      	push	{r7, lr}
    4506:	b082      	sub	sp, #8
    4508:	af00      	add	r7, sp, #0
    450a:	0002      	movs	r2, r0
    450c:	1dfb      	adds	r3, r7, #7
    450e:	701a      	strb	r2, [r3, #0]
	if (on_off){
    4510:	1dfb      	adds	r3, r7, #7
    4512:	781b      	ldrb	r3, [r3, #0]
    4514:	2b00      	cmp	r3, #0
    4516:	d009      	beq.n	452c <quick3_timer+0x28>
		tc_set_count_value(&timer2, 0);
    4518:	4b0b      	ldr	r3, [pc, #44]	; (4548 <quick3_timer+0x44>)
    451a:	2100      	movs	r1, #0
    451c:	0018      	movs	r0, r3
    451e:	4b0b      	ldr	r3, [pc, #44]	; (454c <quick3_timer+0x48>)
    4520:	4798      	blx	r3
		tc_start_counter(&timer2);
    4522:	4b09      	ldr	r3, [pc, #36]	; (4548 <quick3_timer+0x44>)
    4524:	0018      	movs	r0, r3
    4526:	4b0a      	ldr	r3, [pc, #40]	; (4550 <quick3_timer+0x4c>)
    4528:	4798      	blx	r3
		tc_stop_counter(&timer2);
		tc_set_count_value(&timer2, 0);
		
	}

    452a:	e008      	b.n	453e <quick3_timer+0x3a>
		tc_stop_counter(&timer2);
    452c:	4b06      	ldr	r3, [pc, #24]	; (4548 <quick3_timer+0x44>)
    452e:	0018      	movs	r0, r3
    4530:	4b08      	ldr	r3, [pc, #32]	; (4554 <quick3_timer+0x50>)
    4532:	4798      	blx	r3
		tc_set_count_value(&timer2, 0);
    4534:	4b04      	ldr	r3, [pc, #16]	; (4548 <quick3_timer+0x44>)
    4536:	2100      	movs	r1, #0
    4538:	0018      	movs	r0, r3
    453a:	4b04      	ldr	r3, [pc, #16]	; (454c <quick3_timer+0x48>)
    453c:	4798      	blx	r3
    453e:	46c0      	nop			; (mov r8, r8)
    4540:	46bd      	mov	sp, r7
    4542:	b002      	add	sp, #8
    4544:	bd80      	pop	{r7, pc}
    4546:	46c0      	nop			; (mov r8, r8)
    4548:	20001020 	.word	0x20001020
    454c:	000070b5 	.word	0x000070b5
    4550:	00003e59 	.word	0x00003e59
    4554:	00003e29 	.word	0x00003e29

00004558 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    4558:	b580      	push	{r7, lr}
    455a:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    455c:	46c0      	nop			; (mov r8, r8)
    455e:	46bd      	mov	sp, r7
    4560:	bd80      	pop	{r7, pc}
	...

00004564 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
    4564:	b580      	push	{r7, lr}
    4566:	b082      	sub	sp, #8
    4568:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
    456a:	1dfb      	adds	r3, r7, #7
    456c:	2200      	movs	r2, #0
    456e:	701a      	strb	r2, [r3, #0]
    4570:	e00c      	b.n	458c <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    4572:	1dfb      	adds	r3, r7, #7
    4574:	781b      	ldrb	r3, [r3, #0]
    4576:	4a0c      	ldr	r2, [pc, #48]	; (45a8 <sd_mmc_init+0x44>)
    4578:	015b      	lsls	r3, r3, #5
    457a:	18d3      	adds	r3, r2, r3
    457c:	330a      	adds	r3, #10
    457e:	2204      	movs	r2, #4
    4580:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
    4582:	1dfb      	adds	r3, r7, #7
    4584:	781a      	ldrb	r2, [r3, #0]
    4586:	1dfb      	adds	r3, r7, #7
    4588:	3201      	adds	r2, #1
    458a:	701a      	strb	r2, [r3, #0]
    458c:	1dfb      	adds	r3, r7, #7
    458e:	781b      	ldrb	r3, [r3, #0]
    4590:	2b00      	cmp	r3, #0
    4592:	d0ee      	beq.n	4572 <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
    4594:	4b05      	ldr	r3, [pc, #20]	; (45ac <sd_mmc_init+0x48>)
    4596:	22ff      	movs	r2, #255	; 0xff
    4598:	701a      	strb	r2, [r3, #0]
	driver_init();
    459a:	4b05      	ldr	r3, [pc, #20]	; (45b0 <sd_mmc_init+0x4c>)
    459c:	4798      	blx	r3
}
    459e:	46c0      	nop			; (mov r8, r8)
    45a0:	46bd      	mov	sp, r7
    45a2:	b002      	add	sp, #8
    45a4:	bd80      	pop	{r7, pc}
    45a6:	46c0      	nop			; (mov r8, r8)
    45a8:	20000cb8 	.word	0x20000cb8
    45ac:	20000cd8 	.word	0x20000cd8
    45b0:	00004859 	.word	0x00004859

000045b4 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    45b4:	b580      	push	{r7, lr}
    45b6:	b084      	sub	sp, #16
    45b8:	af00      	add	r7, sp, #0
    45ba:	0002      	movs	r2, r0
    45bc:	1dfb      	adds	r3, r7, #7
    45be:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    45c0:	230f      	movs	r3, #15
    45c2:	18fb      	adds	r3, r7, r3
    45c4:	1dfa      	adds	r2, r7, #7
    45c6:	7812      	ldrb	r2, [r2, #0]
    45c8:	09d2      	lsrs	r2, r2, #7
    45ca:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    45cc:	230e      	movs	r3, #14
    45ce:	18fb      	adds	r3, r7, r3
    45d0:	1dfa      	adds	r2, r7, #7
    45d2:	7812      	ldrb	r2, [r2, #0]
    45d4:	0952      	lsrs	r2, r2, #5
    45d6:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    45d8:	4b0d      	ldr	r3, [pc, #52]	; (4610 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    45da:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    45dc:	230f      	movs	r3, #15
    45de:	18fb      	adds	r3, r7, r3
    45e0:	781b      	ldrb	r3, [r3, #0]
    45e2:	2b00      	cmp	r3, #0
    45e4:	d10f      	bne.n	4606 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    45e6:	230f      	movs	r3, #15
    45e8:	18fb      	adds	r3, r7, r3
    45ea:	781b      	ldrb	r3, [r3, #0]
    45ec:	009b      	lsls	r3, r3, #2
    45ee:	2210      	movs	r2, #16
    45f0:	4694      	mov	ip, r2
    45f2:	44bc      	add	ip, r7
    45f4:	4463      	add	r3, ip
    45f6:	3b08      	subs	r3, #8
    45f8:	681a      	ldr	r2, [r3, #0]
    45fa:	230e      	movs	r3, #14
    45fc:	18fb      	adds	r3, r7, r3
    45fe:	781b      	ldrb	r3, [r3, #0]
    4600:	01db      	lsls	r3, r3, #7
    4602:	18d3      	adds	r3, r2, r3
    4604:	e000      	b.n	4608 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    4606:	2300      	movs	r3, #0
	}
}
    4608:	0018      	movs	r0, r3
    460a:	46bd      	mov	sp, r7
    460c:	b004      	add	sp, #16
    460e:	bd80      	pop	{r7, pc}
    4610:	40002800 	.word	0x40002800

00004614 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4614:	b580      	push	{r7, lr}
    4616:	b082      	sub	sp, #8
    4618:	af00      	add	r7, sp, #0
    461a:	0002      	movs	r2, r0
    461c:	1dfb      	adds	r3, r7, #7
    461e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    4620:	1dfb      	adds	r3, r7, #7
    4622:	781b      	ldrb	r3, [r3, #0]
    4624:	0018      	movs	r0, r3
    4626:	4b03      	ldr	r3, [pc, #12]	; (4634 <port_get_group_from_gpio_pin+0x20>)
    4628:	4798      	blx	r3
    462a:	0003      	movs	r3, r0
}
    462c:	0018      	movs	r0, r3
    462e:	46bd      	mov	sp, r7
    4630:	b002      	add	sp, #8
    4632:	bd80      	pop	{r7, pc}
    4634:	000045b5 	.word	0x000045b5

00004638 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    4638:	b580      	push	{r7, lr}
    463a:	b082      	sub	sp, #8
    463c:	af00      	add	r7, sp, #0
    463e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    4640:	687b      	ldr	r3, [r7, #4]
    4642:	2200      	movs	r2, #0
    4644:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    4646:	687b      	ldr	r3, [r7, #4]
    4648:	2201      	movs	r2, #1
    464a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    464c:	687b      	ldr	r3, [r7, #4]
    464e:	2200      	movs	r2, #0
    4650:	709a      	strb	r2, [r3, #2]
}
    4652:	46c0      	nop			; (mov r8, r8)
    4654:	46bd      	mov	sp, r7
    4656:	b002      	add	sp, #8
    4658:	bd80      	pop	{r7, pc}
	...

0000465c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    465c:	b580      	push	{r7, lr}
    465e:	b084      	sub	sp, #16
    4660:	af00      	add	r7, sp, #0
    4662:	0002      	movs	r2, r0
    4664:	1dfb      	adds	r3, r7, #7
    4666:	701a      	strb	r2, [r3, #0]
    4668:	1dbb      	adds	r3, r7, #6
    466a:	1c0a      	adds	r2, r1, #0
    466c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    466e:	1dfb      	adds	r3, r7, #7
    4670:	781b      	ldrb	r3, [r3, #0]
    4672:	0018      	movs	r0, r3
    4674:	4b0d      	ldr	r3, [pc, #52]	; (46ac <port_pin_set_output_level+0x50>)
    4676:	4798      	blx	r3
    4678:	0003      	movs	r3, r0
    467a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    467c:	1dfb      	adds	r3, r7, #7
    467e:	781b      	ldrb	r3, [r3, #0]
    4680:	221f      	movs	r2, #31
    4682:	4013      	ands	r3, r2
    4684:	2201      	movs	r2, #1
    4686:	409a      	lsls	r2, r3
    4688:	0013      	movs	r3, r2
    468a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    468c:	1dbb      	adds	r3, r7, #6
    468e:	781b      	ldrb	r3, [r3, #0]
    4690:	2b00      	cmp	r3, #0
    4692:	d003      	beq.n	469c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    4694:	68fb      	ldr	r3, [r7, #12]
    4696:	68ba      	ldr	r2, [r7, #8]
    4698:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    469a:	e002      	b.n	46a2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    469c:	68fb      	ldr	r3, [r7, #12]
    469e:	68ba      	ldr	r2, [r7, #8]
    46a0:	615a      	str	r2, [r3, #20]
}
    46a2:	46c0      	nop			; (mov r8, r8)
    46a4:	46bd      	mov	sp, r7
    46a6:	b004      	add	sp, #16
    46a8:	bd80      	pop	{r7, pc}
    46aa:	46c0      	nop			; (mov r8, r8)
    46ac:	00004615 	.word	0x00004615

000046b0 <system_interrupt_enable>:
{
    46b0:	b580      	push	{r7, lr}
    46b2:	b082      	sub	sp, #8
    46b4:	af00      	add	r7, sp, #0
    46b6:	0002      	movs	r2, r0
    46b8:	1dfb      	adds	r3, r7, #7
    46ba:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    46bc:	4b06      	ldr	r3, [pc, #24]	; (46d8 <system_interrupt_enable+0x28>)
    46be:	1dfa      	adds	r2, r7, #7
    46c0:	7812      	ldrb	r2, [r2, #0]
    46c2:	0011      	movs	r1, r2
    46c4:	221f      	movs	r2, #31
    46c6:	400a      	ands	r2, r1
    46c8:	2101      	movs	r1, #1
    46ca:	4091      	lsls	r1, r2
    46cc:	000a      	movs	r2, r1
    46ce:	601a      	str	r2, [r3, #0]
}
    46d0:	46c0      	nop			; (mov r8, r8)
    46d2:	46bd      	mov	sp, r7
    46d4:	b002      	add	sp, #8
    46d6:	bd80      	pop	{r7, pc}
    46d8:	e000e100 	.word	0xe000e100

000046dc <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    46dc:	b580      	push	{r7, lr}
    46de:	b084      	sub	sp, #16
    46e0:	af00      	add	r7, sp, #0
    46e2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    46e4:	687b      	ldr	r3, [r7, #4]
    46e6:	681b      	ldr	r3, [r3, #0]
    46e8:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    46ea:	68fb      	ldr	r3, [r7, #12]
    46ec:	69db      	ldr	r3, [r3, #28]
    46ee:	1e5a      	subs	r2, r3, #1
    46f0:	4193      	sbcs	r3, r2
    46f2:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    46f4:	0018      	movs	r0, r3
    46f6:	46bd      	mov	sp, r7
    46f8:	b004      	add	sp, #16
    46fa:	bd80      	pop	{r7, pc}

000046fc <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    46fc:	b580      	push	{r7, lr}
    46fe:	b082      	sub	sp, #8
    4700:	af00      	add	r7, sp, #0
    4702:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    4704:	687b      	ldr	r3, [r7, #4]
    4706:	2201      	movs	r2, #1
    4708:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    470a:	687b      	ldr	r3, [r7, #4]
    470c:	2200      	movs	r2, #0
    470e:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    4710:	687b      	ldr	r3, [r7, #4]
    4712:	2200      	movs	r2, #0
    4714:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    4716:	687b      	ldr	r3, [r7, #4]
    4718:	22c0      	movs	r2, #192	; 0xc0
    471a:	0392      	lsls	r2, r2, #14
    471c:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    471e:	687b      	ldr	r3, [r7, #4]
    4720:	2200      	movs	r2, #0
    4722:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    4724:	687b      	ldr	r3, [r7, #4]
    4726:	2200      	movs	r2, #0
    4728:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    472a:	687b      	ldr	r3, [r7, #4]
    472c:	2201      	movs	r2, #1
    472e:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    4730:	687b      	ldr	r3, [r7, #4]
    4732:	2201      	movs	r2, #1
    4734:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    4736:	687b      	ldr	r3, [r7, #4]
    4738:	2200      	movs	r2, #0
    473a:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    473c:	687b      	ldr	r3, [r7, #4]
    473e:	2224      	movs	r2, #36	; 0x24
    4740:	2100      	movs	r1, #0
    4742:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    4744:	687b      	ldr	r3, [r7, #4]
    4746:	3318      	adds	r3, #24
    4748:	220c      	movs	r2, #12
    474a:	2100      	movs	r1, #0
    474c:	0018      	movs	r0, r3
    474e:	4b0a      	ldr	r3, [pc, #40]	; (4778 <spi_get_config_defaults+0x7c>)
    4750:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    4752:	687b      	ldr	r3, [r7, #4]
    4754:	4a09      	ldr	r2, [pc, #36]	; (477c <spi_get_config_defaults+0x80>)
    4756:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    4758:	687b      	ldr	r3, [r7, #4]
    475a:	2200      	movs	r2, #0
    475c:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    475e:	687b      	ldr	r3, [r7, #4]
    4760:	2200      	movs	r2, #0
    4762:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    4764:	687b      	ldr	r3, [r7, #4]
    4766:	2200      	movs	r2, #0
    4768:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    476a:	687b      	ldr	r3, [r7, #4]
    476c:	2200      	movs	r2, #0
    476e:	635a      	str	r2, [r3, #52]	; 0x34

};
    4770:	46c0      	nop			; (mov r8, r8)
    4772:	46bd      	mov	sp, r7
    4774:	b002      	add	sp, #8
    4776:	bd80      	pop	{r7, pc}
    4778:	00021029 	.word	0x00021029
    477c:	000186a0 	.word	0x000186a0

00004780 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    4780:	b580      	push	{r7, lr}
    4782:	b082      	sub	sp, #8
    4784:	af00      	add	r7, sp, #0
    4786:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    4788:	687b      	ldr	r3, [r7, #4]
    478a:	220a      	movs	r2, #10
    478c:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    478e:	687b      	ldr	r3, [r7, #4]
    4790:	2200      	movs	r2, #0
    4792:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    4794:	687b      	ldr	r3, [r7, #4]
    4796:	2200      	movs	r2, #0
    4798:	709a      	strb	r2, [r3, #2]
}
    479a:	46c0      	nop			; (mov r8, r8)
    479c:	46bd      	mov	sp, r7
    479e:	b002      	add	sp, #8
    47a0:	bd80      	pop	{r7, pc}
	...

000047a4 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    47a4:	b580      	push	{r7, lr}
    47a6:	b084      	sub	sp, #16
    47a8:	af00      	add	r7, sp, #0
    47aa:	6078      	str	r0, [r7, #4]
    47ac:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    47ae:	683b      	ldr	r3, [r7, #0]
    47b0:	781a      	ldrb	r2, [r3, #0]
    47b2:	687b      	ldr	r3, [r7, #4]
    47b4:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    47b6:	683b      	ldr	r3, [r7, #0]
    47b8:	785a      	ldrb	r2, [r3, #1]
    47ba:	687b      	ldr	r3, [r7, #4]
    47bc:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    47be:	683b      	ldr	r3, [r7, #0]
    47c0:	789a      	ldrb	r2, [r3, #2]
    47c2:	687b      	ldr	r3, [r7, #4]
    47c4:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    47c6:	230c      	movs	r3, #12
    47c8:	18fb      	adds	r3, r7, r3
    47ca:	0018      	movs	r0, r3
    47cc:	4b0b      	ldr	r3, [pc, #44]	; (47fc <spi_attach_slave+0x58>)
    47ce:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    47d0:	230c      	movs	r3, #12
    47d2:	18fb      	adds	r3, r7, r3
    47d4:	2201      	movs	r2, #1
    47d6:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    47d8:	687b      	ldr	r3, [r7, #4]
    47da:	781b      	ldrb	r3, [r3, #0]
    47dc:	220c      	movs	r2, #12
    47de:	18ba      	adds	r2, r7, r2
    47e0:	0011      	movs	r1, r2
    47e2:	0018      	movs	r0, r3
    47e4:	4b06      	ldr	r3, [pc, #24]	; (4800 <spi_attach_slave+0x5c>)
    47e6:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    47e8:	687b      	ldr	r3, [r7, #4]
    47ea:	781b      	ldrb	r3, [r3, #0]
    47ec:	2101      	movs	r1, #1
    47ee:	0018      	movs	r0, r3
    47f0:	4b04      	ldr	r3, [pc, #16]	; (4804 <spi_attach_slave+0x60>)
    47f2:	4798      	blx	r3
}
    47f4:	46c0      	nop			; (mov r8, r8)
    47f6:	46bd      	mov	sp, r7
    47f8:	b004      	add	sp, #16
    47fa:	bd80      	pop	{r7, pc}
    47fc:	00004639 	.word	0x00004639
    4800:	0001559d 	.word	0x0001559d
    4804:	0000465d 	.word	0x0000465d

00004808 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    4808:	b580      	push	{r7, lr}
    480a:	b084      	sub	sp, #16
    480c:	af00      	add	r7, sp, #0
    480e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4810:	687b      	ldr	r3, [r7, #4]
    4812:	681b      	ldr	r3, [r3, #0]
    4814:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    4816:	687b      	ldr	r3, [r7, #4]
    4818:	681b      	ldr	r3, [r3, #0]
    481a:	0018      	movs	r0, r3
    481c:	4b0b      	ldr	r3, [pc, #44]	; (484c <spi_enable+0x44>)
    481e:	4798      	blx	r3
    4820:	0003      	movs	r3, r0
    4822:	0018      	movs	r0, r3
    4824:	4b0a      	ldr	r3, [pc, #40]	; (4850 <spi_enable+0x48>)
    4826:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    4828:	46c0      	nop			; (mov r8, r8)
    482a:	687b      	ldr	r3, [r7, #4]
    482c:	0018      	movs	r0, r3
    482e:	4b09      	ldr	r3, [pc, #36]	; (4854 <spi_enable+0x4c>)
    4830:	4798      	blx	r3
    4832:	1e03      	subs	r3, r0, #0
    4834:	d1f9      	bne.n	482a <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    4836:	68fb      	ldr	r3, [r7, #12]
    4838:	681b      	ldr	r3, [r3, #0]
    483a:	2202      	movs	r2, #2
    483c:	431a      	orrs	r2, r3
    483e:	68fb      	ldr	r3, [r7, #12]
    4840:	601a      	str	r2, [r3, #0]
}
    4842:	46c0      	nop			; (mov r8, r8)
    4844:	46bd      	mov	sp, r7
    4846:	b004      	add	sp, #16
    4848:	bd80      	pop	{r7, pc}
    484a:	46c0      	nop			; (mov r8, r8)
    484c:	00006381 	.word	0x00006381
    4850:	000046b1 	.word	0x000046b1
    4854:	000046dd 	.word	0x000046dd

00004858 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
    4858:	b580      	push	{r7, lr}
    485a:	b08e      	sub	sp, #56	; 0x38
    485c:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    485e:	4b1d      	ldr	r3, [pc, #116]	; (48d4 <sd_mmc_spi_init+0x7c>)
    4860:	2200      	movs	r2, #0
    4862:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
#endif  //Added Kfausnight 11/24/2018

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
    4864:	003b      	movs	r3, r7
    4866:	0018      	movs	r0, r3
    4868:	4b1b      	ldr	r3, [pc, #108]	; (48d8 <sd_mmc_spi_init+0x80>)
    486a:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    486c:	003b      	movs	r3, r7
    486e:	2280      	movs	r2, #128	; 0x80
    4870:	0252      	lsls	r2, r2, #9
    4872:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    4874:	003b      	movs	r3, r7
    4876:	4a19      	ldr	r2, [pc, #100]	; (48dc <sd_mmc_spi_init+0x84>)
    4878:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    487a:	003b      	movs	r3, r7
    487c:	2200      	movs	r2, #0
    487e:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    4880:	003b      	movs	r3, r7
    4882:	4a17      	ldr	r2, [pc, #92]	; (48e0 <sd_mmc_spi_init+0x88>)
    4884:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    4886:	003b      	movs	r3, r7
    4888:	4a16      	ldr	r2, [pc, #88]	; (48e4 <sd_mmc_spi_init+0x8c>)
    488a:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
    488c:	003b      	movs	r3, r7
    488e:	2224      	movs	r2, #36	; 0x24
    4890:	2100      	movs	r1, #0
    4892:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    4894:	003b      	movs	r3, r7
    4896:	4a14      	ldr	r2, [pc, #80]	; (48e8 <sd_mmc_spi_init+0x90>)
    4898:	619a      	str	r2, [r3, #24]

	spi_init(&spi_main, SD_MMC_SPI, &config);
    489a:	003a      	movs	r2, r7
    489c:	4913      	ldr	r1, [pc, #76]	; (48ec <sd_mmc_spi_init+0x94>)
    489e:	4b14      	ldr	r3, [pc, #80]	; (48f0 <sd_mmc_spi_init+0x98>)
    48a0:	0018      	movs	r0, r3
    48a2:	4b14      	ldr	r3, [pc, #80]	; (48f4 <sd_mmc_spi_init+0x9c>)
    48a4:	4798      	blx	r3
	spi_enable(&spi_main);
    48a6:	4b12      	ldr	r3, [pc, #72]	; (48f0 <sd_mmc_spi_init+0x98>)
    48a8:	0018      	movs	r0, r3
    48aa:	4b13      	ldr	r3, [pc, #76]	; (48f8 <sd_mmc_spi_init+0xa0>)
    48ac:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
    48ae:	4b13      	ldr	r3, [pc, #76]	; (48fc <sd_mmc_spi_init+0xa4>)
    48b0:	0018      	movs	r0, r3
    48b2:	4b13      	ldr	r3, [pc, #76]	; (4900 <sd_mmc_spi_init+0xa8>)
    48b4:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
    48b6:	4b13      	ldr	r3, [pc, #76]	; (4904 <sd_mmc_spi_init+0xac>)
    48b8:	781a      	ldrb	r2, [r3, #0]
    48ba:	4b10      	ldr	r3, [pc, #64]	; (48fc <sd_mmc_spi_init+0xa4>)
    48bc:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
    48be:	4a0f      	ldr	r2, [pc, #60]	; (48fc <sd_mmc_spi_init+0xa4>)
    48c0:	4b11      	ldr	r3, [pc, #68]	; (4908 <sd_mmc_spi_init+0xb0>)
    48c2:	0011      	movs	r1, r2
    48c4:	0018      	movs	r0, r3
    48c6:	4b11      	ldr	r3, [pc, #68]	; (490c <sd_mmc_spi_init+0xb4>)
    48c8:	4798      	blx	r3
}
    48ca:	46c0      	nop			; (mov r8, r8)
    48cc:	46bd      	mov	sp, r7
    48ce:	b00e      	add	sp, #56	; 0x38
    48d0:	bd80      	pop	{r7, pc}
    48d2:	46c0      	nop			; (mov r8, r8)
    48d4:	20000ce3 	.word	0x20000ce3
    48d8:	000046fd 	.word	0x000046fd
    48dc:	00280003 	.word	0x00280003
    48e0:	002a0003 	.word	0x002a0003
    48e4:	002b0003 	.word	0x002b0003
    48e8:	00061a80 	.word	0x00061a80
    48ec:	42001000 	.word	0x42001000
    48f0:	200010a4 	.word	0x200010a4
    48f4:	0001432d 	.word	0x0001432d
    48f8:	00004809 	.word	0x00004809
    48fc:	20000ce0 	.word	0x20000ce0
    4900:	00004781 	.word	0x00004781
    4904:	200000d4 	.word	0x200000d4
    4908:	20000cdc 	.word	0x20000cdc
    490c:	000047a5 	.word	0x000047a5

00004910 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    4910:	b580      	push	{r7, lr}
    4912:	b084      	sub	sp, #16
    4914:	af00      	add	r7, sp, #0
    4916:	0002      	movs	r2, r0
    4918:	1dfb      	adds	r3, r7, #7
    491a:	701a      	strb	r2, [r3, #0]
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
    491c:	230f      	movs	r3, #15
    491e:	18fb      	adds	r3, r7, r3
    4920:	2201      	movs	r2, #1
    4922:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
    4924:	230f      	movs	r3, #15
    4926:	18fb      	adds	r3, r7, r3
    4928:	781b      	ldrb	r3, [r3, #0]
}
    492a:	0018      	movs	r0, r3
    492c:	46bd      	mov	sp, r7
    492e:	b004      	add	sp, #16
    4930:	bd80      	pop	{r7, pc}

00004932 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    4932:	b580      	push	{r7, lr}
    4934:	b084      	sub	sp, #16
    4936:	af00      	add	r7, sp, #0
    4938:	0002      	movs	r2, r0
    493a:	6039      	str	r1, [r7, #0]
    493c:	1dfb      	adds	r3, r7, #7
    493e:	701a      	strb	r2, [r3, #0]
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
    4940:	230f      	movs	r3, #15
    4942:	18fb      	adds	r3, r7, r3
    4944:	2201      	movs	r2, #1
    4946:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
    4948:	230f      	movs	r3, #15
    494a:	18fb      	adds	r3, r7, r3
    494c:	781b      	ldrb	r3, [r3, #0]
}
    494e:	0018      	movs	r0, r3
    4950:	46bd      	mov	sp, r7
    4952:	b004      	add	sp, #16
    4954:	bd80      	pop	{r7, pc}

00004956 <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
    4956:	b580      	push	{r7, lr}
    4958:	b084      	sub	sp, #16
    495a:	af00      	add	r7, sp, #0
    495c:	0002      	movs	r2, r0
    495e:	1dfb      	adds	r3, r7, #7
    4960:	701a      	strb	r2, [r3, #0]
  U8 sector_size;

  if (!Ctrl_access_lock()) return 0;

  sector_size =
    4962:	230f      	movs	r3, #15
    4964:	18fb      	adds	r3, r7, r3
    4966:	2200      	movs	r2, #0
    4968:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
    496a:	230f      	movs	r3, #15
    496c:	18fb      	adds	r3, r7, r3
    496e:	781b      	ldrb	r3, [r3, #0]
}
    4970:	0018      	movs	r0, r3
    4972:	46bd      	mov	sp, r7
    4974:	b004      	add	sp, #16
    4976:	bd80      	pop	{r7, pc}

00004978 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
    4978:	b580      	push	{r7, lr}
    497a:	b084      	sub	sp, #16
    497c:	af00      	add	r7, sp, #0
    497e:	0002      	movs	r2, r0
    4980:	1dfb      	adds	r3, r7, #7
    4982:	701a      	strb	r2, [r3, #0]
  bool wr_protect;

  if (!Ctrl_access_lock()) return true;

  wr_protect =
    4984:	230f      	movs	r3, #15
    4986:	18fb      	adds	r3, r7, r3
    4988:	2201      	movs	r2, #1
    498a:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
    498c:	230f      	movs	r3, #15
    498e:	18fb      	adds	r3, r7, r3
    4990:	781b      	ldrb	r3, [r3, #0]
}
    4992:	0018      	movs	r0, r3
    4994:	46bd      	mov	sp, r7
    4996:	b004      	add	sp, #16
    4998:	bd80      	pop	{r7, pc}
	...

0000499c <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    499c:	b580      	push	{r7, lr}
    499e:	b082      	sub	sp, #8
    49a0:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    49a2:	4b10      	ldr	r3, [pc, #64]	; (49e4 <cpu_irq_enter_critical+0x48>)
    49a4:	681b      	ldr	r3, [r3, #0]
    49a6:	2b00      	cmp	r3, #0
    49a8:	d112      	bne.n	49d0 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    49aa:	f3ef 8310 	mrs	r3, PRIMASK
    49ae:	607b      	str	r3, [r7, #4]
  return(result);
    49b0:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    49b2:	2b00      	cmp	r3, #0
    49b4:	d109      	bne.n	49ca <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    49b6:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    49b8:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    49bc:	4b0a      	ldr	r3, [pc, #40]	; (49e8 <cpu_irq_enter_critical+0x4c>)
    49be:	2200      	movs	r2, #0
    49c0:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    49c2:	4b0a      	ldr	r3, [pc, #40]	; (49ec <cpu_irq_enter_critical+0x50>)
    49c4:	2201      	movs	r2, #1
    49c6:	701a      	strb	r2, [r3, #0]
    49c8:	e002      	b.n	49d0 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    49ca:	4b08      	ldr	r3, [pc, #32]	; (49ec <cpu_irq_enter_critical+0x50>)
    49cc:	2200      	movs	r2, #0
    49ce:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    49d0:	4b04      	ldr	r3, [pc, #16]	; (49e4 <cpu_irq_enter_critical+0x48>)
    49d2:	681b      	ldr	r3, [r3, #0]
    49d4:	1c5a      	adds	r2, r3, #1
    49d6:	4b03      	ldr	r3, [pc, #12]	; (49e4 <cpu_irq_enter_critical+0x48>)
    49d8:	601a      	str	r2, [r3, #0]
}
    49da:	46c0      	nop			; (mov r8, r8)
    49dc:	46bd      	mov	sp, r7
    49de:	b002      	add	sp, #8
    49e0:	bd80      	pop	{r7, pc}
    49e2:	46c0      	nop			; (mov r8, r8)
    49e4:	20000ce4 	.word	0x20000ce4
    49e8:	200000d5 	.word	0x200000d5
    49ec:	20000ce8 	.word	0x20000ce8

000049f0 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    49f0:	b580      	push	{r7, lr}
    49f2:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    49f4:	4b0b      	ldr	r3, [pc, #44]	; (4a24 <cpu_irq_leave_critical+0x34>)
    49f6:	681b      	ldr	r3, [r3, #0]
    49f8:	1e5a      	subs	r2, r3, #1
    49fa:	4b0a      	ldr	r3, [pc, #40]	; (4a24 <cpu_irq_leave_critical+0x34>)
    49fc:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    49fe:	4b09      	ldr	r3, [pc, #36]	; (4a24 <cpu_irq_leave_critical+0x34>)
    4a00:	681b      	ldr	r3, [r3, #0]
    4a02:	2b00      	cmp	r3, #0
    4a04:	d10a      	bne.n	4a1c <cpu_irq_leave_critical+0x2c>
    4a06:	4b08      	ldr	r3, [pc, #32]	; (4a28 <cpu_irq_leave_critical+0x38>)
    4a08:	781b      	ldrb	r3, [r3, #0]
    4a0a:	b2db      	uxtb	r3, r3
    4a0c:	2b00      	cmp	r3, #0
    4a0e:	d005      	beq.n	4a1c <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    4a10:	4b06      	ldr	r3, [pc, #24]	; (4a2c <cpu_irq_leave_critical+0x3c>)
    4a12:	2201      	movs	r2, #1
    4a14:	701a      	strb	r2, [r3, #0]
    4a16:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4a1a:	b662      	cpsie	i
	}
}
    4a1c:	46c0      	nop			; (mov r8, r8)
    4a1e:	46bd      	mov	sp, r7
    4a20:	bd80      	pop	{r7, pc}
    4a22:	46c0      	nop			; (mov r8, r8)
    4a24:	20000ce4 	.word	0x20000ce4
    4a28:	20000ce8 	.word	0x20000ce8
    4a2c:	200000d5 	.word	0x200000d5

00004a30 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    4a30:	b580      	push	{r7, lr}
    4a32:	b084      	sub	sp, #16
    4a34:	af00      	add	r7, sp, #0
    4a36:	0002      	movs	r2, r0
    4a38:	1dfb      	adds	r3, r7, #7
    4a3a:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    4a3c:	230f      	movs	r3, #15
    4a3e:	18fb      	adds	r3, r7, r3
    4a40:	1dfa      	adds	r2, r7, #7
    4a42:	7812      	ldrb	r2, [r2, #0]
    4a44:	0952      	lsrs	r2, r2, #5
    4a46:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    4a48:	230f      	movs	r3, #15
    4a4a:	18fb      	adds	r3, r7, r3
    4a4c:	781b      	ldrb	r3, [r3, #0]
    4a4e:	2b00      	cmp	r3, #0
    4a50:	d10c      	bne.n	4a6c <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    4a52:	4b09      	ldr	r3, [pc, #36]	; (4a78 <_extint_get_eic_from_channel+0x48>)
    4a54:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    4a56:	230f      	movs	r3, #15
    4a58:	18fb      	adds	r3, r7, r3
    4a5a:	781b      	ldrb	r3, [r3, #0]
    4a5c:	009b      	lsls	r3, r3, #2
    4a5e:	2210      	movs	r2, #16
    4a60:	4694      	mov	ip, r2
    4a62:	44bc      	add	ip, r7
    4a64:	4463      	add	r3, ip
    4a66:	3b08      	subs	r3, #8
    4a68:	681b      	ldr	r3, [r3, #0]
    4a6a:	e000      	b.n	4a6e <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    4a6c:	2300      	movs	r3, #0
	}
}
    4a6e:	0018      	movs	r0, r3
    4a70:	46bd      	mov	sp, r7
    4a72:	b004      	add	sp, #16
    4a74:	bd80      	pop	{r7, pc}
    4a76:	46c0      	nop			; (mov r8, r8)
    4a78:	40002400 	.word	0x40002400

00004a7c <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    4a7c:	b580      	push	{r7, lr}
    4a7e:	b084      	sub	sp, #16
    4a80:	af00      	add	r7, sp, #0
    4a82:	0002      	movs	r2, r0
    4a84:	1dfb      	adds	r3, r7, #7
    4a86:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    4a88:	1dfb      	adds	r3, r7, #7
    4a8a:	781b      	ldrb	r3, [r3, #0]
    4a8c:	0018      	movs	r0, r3
    4a8e:	4b0b      	ldr	r3, [pc, #44]	; (4abc <extint_chan_is_detected+0x40>)
    4a90:	4798      	blx	r3
    4a92:	0003      	movs	r3, r0
    4a94:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    4a96:	1dfb      	adds	r3, r7, #7
    4a98:	781b      	ldrb	r3, [r3, #0]
    4a9a:	221f      	movs	r2, #31
    4a9c:	4013      	ands	r3, r2
    4a9e:	2201      	movs	r2, #1
    4aa0:	409a      	lsls	r2, r3
    4aa2:	0013      	movs	r3, r2
    4aa4:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    4aa6:	68fb      	ldr	r3, [r7, #12]
    4aa8:	695b      	ldr	r3, [r3, #20]
    4aaa:	68ba      	ldr	r2, [r7, #8]
    4aac:	4013      	ands	r3, r2
    4aae:	1e5a      	subs	r2, r3, #1
    4ab0:	4193      	sbcs	r3, r2
    4ab2:	b2db      	uxtb	r3, r3
}
    4ab4:	0018      	movs	r0, r3
    4ab6:	46bd      	mov	sp, r7
    4ab8:	b004      	add	sp, #16
    4aba:	bd80      	pop	{r7, pc}
    4abc:	00004a31 	.word	0x00004a31

00004ac0 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    4ac0:	b580      	push	{r7, lr}
    4ac2:	b084      	sub	sp, #16
    4ac4:	af00      	add	r7, sp, #0
    4ac6:	0002      	movs	r2, r0
    4ac8:	1dfb      	adds	r3, r7, #7
    4aca:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    4acc:	1dfb      	adds	r3, r7, #7
    4ace:	781b      	ldrb	r3, [r3, #0]
    4ad0:	0018      	movs	r0, r3
    4ad2:	4b09      	ldr	r3, [pc, #36]	; (4af8 <extint_chan_clear_detected+0x38>)
    4ad4:	4798      	blx	r3
    4ad6:	0003      	movs	r3, r0
    4ad8:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    4ada:	1dfb      	adds	r3, r7, #7
    4adc:	781b      	ldrb	r3, [r3, #0]
    4ade:	221f      	movs	r2, #31
    4ae0:	4013      	ands	r3, r2
    4ae2:	2201      	movs	r2, #1
    4ae4:	409a      	lsls	r2, r3
    4ae6:	0013      	movs	r3, r2
    4ae8:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    4aea:	68fb      	ldr	r3, [r7, #12]
    4aec:	68ba      	ldr	r2, [r7, #8]
    4aee:	615a      	str	r2, [r3, #20]
}
    4af0:	46c0      	nop			; (mov r8, r8)
    4af2:	46bd      	mov	sp, r7
    4af4:	b004      	add	sp, #16
    4af6:	bd80      	pop	{r7, pc}
    4af8:	00004a31 	.word	0x00004a31

00004afc <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
    4afc:	b580      	push	{r7, lr}
    4afe:	b082      	sub	sp, #8
    4b00:	af00      	add	r7, sp, #0
    4b02:	6078      	str	r0, [r7, #4]
    4b04:	0008      	movs	r0, r1
    4b06:	0011      	movs	r1, r2
    4b08:	1cfb      	adds	r3, r7, #3
    4b0a:	1c02      	adds	r2, r0, #0
    4b0c:	701a      	strb	r2, [r3, #0]
    4b0e:	1cbb      	adds	r3, r7, #2
    4b10:	1c0a      	adds	r2, r1, #0
    4b12:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    4b14:	1cbb      	adds	r3, r7, #2
    4b16:	781b      	ldrb	r3, [r3, #0]
    4b18:	2b00      	cmp	r3, #0
    4b1a:	d001      	beq.n	4b20 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4b1c:	2317      	movs	r3, #23
    4b1e:	e019      	b.n	4b54 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    4b20:	1cfb      	adds	r3, r7, #3
    4b22:	781a      	ldrb	r2, [r3, #0]
    4b24:	4b0d      	ldr	r3, [pc, #52]	; (4b5c <extint_register_callback+0x60>)
    4b26:	0092      	lsls	r2, r2, #2
    4b28:	58d3      	ldr	r3, [r2, r3]
    4b2a:	2b00      	cmp	r3, #0
    4b2c:	d107      	bne.n	4b3e <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
    4b2e:	1cfb      	adds	r3, r7, #3
    4b30:	781a      	ldrb	r2, [r3, #0]
    4b32:	4b0a      	ldr	r3, [pc, #40]	; (4b5c <extint_register_callback+0x60>)
    4b34:	0092      	lsls	r2, r2, #2
    4b36:	6879      	ldr	r1, [r7, #4]
    4b38:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    4b3a:	2300      	movs	r3, #0
    4b3c:	e00a      	b.n	4b54 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
    4b3e:	1cfb      	adds	r3, r7, #3
    4b40:	781a      	ldrb	r2, [r3, #0]
    4b42:	4b06      	ldr	r3, [pc, #24]	; (4b5c <extint_register_callback+0x60>)
    4b44:	0092      	lsls	r2, r2, #2
    4b46:	58d2      	ldr	r2, [r2, r3]
    4b48:	687b      	ldr	r3, [r7, #4]
    4b4a:	429a      	cmp	r2, r3
    4b4c:	d101      	bne.n	4b52 <extint_register_callback+0x56>
		return STATUS_OK;
    4b4e:	2300      	movs	r3, #0
    4b50:	e000      	b.n	4b54 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    4b52:	231d      	movs	r3, #29
}
    4b54:	0018      	movs	r0, r3
    4b56:	46bd      	mov	sp, r7
    4b58:	b002      	add	sp, #8
    4b5a:	bd80      	pop	{r7, pc}
    4b5c:	200011e0 	.word	0x200011e0

00004b60 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    4b60:	b580      	push	{r7, lr}
    4b62:	b084      	sub	sp, #16
    4b64:	af00      	add	r7, sp, #0
    4b66:	0002      	movs	r2, r0
    4b68:	1dfb      	adds	r3, r7, #7
    4b6a:	701a      	strb	r2, [r3, #0]
    4b6c:	1dbb      	adds	r3, r7, #6
    4b6e:	1c0a      	adds	r2, r1, #0
    4b70:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    4b72:	1dbb      	adds	r3, r7, #6
    4b74:	781b      	ldrb	r3, [r3, #0]
    4b76:	2b00      	cmp	r3, #0
    4b78:	d10e      	bne.n	4b98 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    4b7a:	1dfb      	adds	r3, r7, #7
    4b7c:	781b      	ldrb	r3, [r3, #0]
    4b7e:	0018      	movs	r0, r3
    4b80:	4b08      	ldr	r3, [pc, #32]	; (4ba4 <extint_chan_enable_callback+0x44>)
    4b82:	4798      	blx	r3
    4b84:	0003      	movs	r3, r0
    4b86:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
    4b88:	1dfb      	adds	r3, r7, #7
    4b8a:	781b      	ldrb	r3, [r3, #0]
    4b8c:	2201      	movs	r2, #1
    4b8e:	409a      	lsls	r2, r3
    4b90:	68fb      	ldr	r3, [r7, #12]
    4b92:	611a      	str	r2, [r3, #16]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4b94:	2300      	movs	r3, #0
    4b96:	e000      	b.n	4b9a <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
    4b98:	2317      	movs	r3, #23
}
    4b9a:	0018      	movs	r0, r3
    4b9c:	46bd      	mov	sp, r7
    4b9e:	b004      	add	sp, #16
    4ba0:	bd80      	pop	{r7, pc}
    4ba2:	46c0      	nop			; (mov r8, r8)
    4ba4:	00004a31 	.word	0x00004a31

00004ba8 <extint_get_current_channel>:
 * the callback in case the same callback is used by multiple channels.
 *
 * \return Channel number.
 */
uint8_t extint_get_current_channel(void)
{
    4ba8:	b580      	push	{r7, lr}
    4baa:	af00      	add	r7, sp, #0
	return _current_channel;
    4bac:	4b02      	ldr	r3, [pc, #8]	; (4bb8 <extint_get_current_channel+0x10>)
    4bae:	781b      	ldrb	r3, [r3, #0]
}
    4bb0:	0018      	movs	r0, r3
    4bb2:	46bd      	mov	sp, r7
    4bb4:	bd80      	pop	{r7, pc}
    4bb6:	46c0      	nop			; (mov r8, r8)
    4bb8:	200011dd 	.word	0x200011dd

00004bbc <EIC_Handler>:

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    4bbc:	b580      	push	{r7, lr}
    4bbe:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4bc0:	4b15      	ldr	r3, [pc, #84]	; (4c18 <EIC_Handler+0x5c>)
    4bc2:	2200      	movs	r2, #0
    4bc4:	701a      	strb	r2, [r3, #0]
    4bc6:	e020      	b.n	4c0a <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
    4bc8:	4b13      	ldr	r3, [pc, #76]	; (4c18 <EIC_Handler+0x5c>)
    4bca:	781b      	ldrb	r3, [r3, #0]
    4bcc:	0018      	movs	r0, r3
    4bce:	4b13      	ldr	r3, [pc, #76]	; (4c1c <EIC_Handler+0x60>)
    4bd0:	4798      	blx	r3
    4bd2:	1e03      	subs	r3, r0, #0
    4bd4:	d013      	beq.n	4bfe <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    4bd6:	4b10      	ldr	r3, [pc, #64]	; (4c18 <EIC_Handler+0x5c>)
    4bd8:	781b      	ldrb	r3, [r3, #0]
    4bda:	0018      	movs	r0, r3
    4bdc:	4b10      	ldr	r3, [pc, #64]	; (4c20 <EIC_Handler+0x64>)
    4bde:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    4be0:	4b0d      	ldr	r3, [pc, #52]	; (4c18 <EIC_Handler+0x5c>)
    4be2:	781b      	ldrb	r3, [r3, #0]
    4be4:	001a      	movs	r2, r3
    4be6:	4b0f      	ldr	r3, [pc, #60]	; (4c24 <EIC_Handler+0x68>)
    4be8:	0092      	lsls	r2, r2, #2
    4bea:	58d3      	ldr	r3, [r2, r3]
    4bec:	2b00      	cmp	r3, #0
    4bee:	d006      	beq.n	4bfe <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    4bf0:	4b09      	ldr	r3, [pc, #36]	; (4c18 <EIC_Handler+0x5c>)
    4bf2:	781b      	ldrb	r3, [r3, #0]
    4bf4:	001a      	movs	r2, r3
    4bf6:	4b0b      	ldr	r3, [pc, #44]	; (4c24 <EIC_Handler+0x68>)
    4bf8:	0092      	lsls	r2, r2, #2
    4bfa:	58d3      	ldr	r3, [r2, r3]
    4bfc:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4bfe:	4b06      	ldr	r3, [pc, #24]	; (4c18 <EIC_Handler+0x5c>)
    4c00:	781b      	ldrb	r3, [r3, #0]
    4c02:	3301      	adds	r3, #1
    4c04:	b2da      	uxtb	r2, r3
    4c06:	4b04      	ldr	r3, [pc, #16]	; (4c18 <EIC_Handler+0x5c>)
    4c08:	701a      	strb	r2, [r3, #0]
    4c0a:	4b03      	ldr	r3, [pc, #12]	; (4c18 <EIC_Handler+0x5c>)
    4c0c:	781b      	ldrb	r3, [r3, #0]
    4c0e:	2b0f      	cmp	r3, #15
    4c10:	d9da      	bls.n	4bc8 <EIC_Handler+0xc>
			}
		}
	}
}
    4c12:	46c0      	nop			; (mov r8, r8)
    4c14:	46bd      	mov	sp, r7
    4c16:	bd80      	pop	{r7, pc}
    4c18:	200011dd 	.word	0x200011dd
    4c1c:	00004a7d 	.word	0x00004a7d
    4c20:	00004ac1 	.word	0x00004ac1
    4c24:	200011e0 	.word	0x200011e0

00004c28 <system_apb_clock_set_mask>:
{
    4c28:	b580      	push	{r7, lr}
    4c2a:	b082      	sub	sp, #8
    4c2c:	af00      	add	r7, sp, #0
    4c2e:	0002      	movs	r2, r0
    4c30:	6039      	str	r1, [r7, #0]
    4c32:	1dfb      	adds	r3, r7, #7
    4c34:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4c36:	1dfb      	adds	r3, r7, #7
    4c38:	781b      	ldrb	r3, [r3, #0]
    4c3a:	2b04      	cmp	r3, #4
    4c3c:	d827      	bhi.n	4c8e <system_apb_clock_set_mask+0x66>
    4c3e:	009a      	lsls	r2, r3, #2
    4c40:	4b16      	ldr	r3, [pc, #88]	; (4c9c <system_apb_clock_set_mask+0x74>)
    4c42:	18d3      	adds	r3, r2, r3
    4c44:	681b      	ldr	r3, [r3, #0]
    4c46:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    4c48:	4b15      	ldr	r3, [pc, #84]	; (4ca0 <system_apb_clock_set_mask+0x78>)
    4c4a:	4a15      	ldr	r2, [pc, #84]	; (4ca0 <system_apb_clock_set_mask+0x78>)
    4c4c:	6951      	ldr	r1, [r2, #20]
    4c4e:	683a      	ldr	r2, [r7, #0]
    4c50:	430a      	orrs	r2, r1
    4c52:	615a      	str	r2, [r3, #20]
			break;
    4c54:	e01d      	b.n	4c92 <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
    4c56:	4b12      	ldr	r3, [pc, #72]	; (4ca0 <system_apb_clock_set_mask+0x78>)
    4c58:	4a11      	ldr	r2, [pc, #68]	; (4ca0 <system_apb_clock_set_mask+0x78>)
    4c5a:	6991      	ldr	r1, [r2, #24]
    4c5c:	683a      	ldr	r2, [r7, #0]
    4c5e:	430a      	orrs	r2, r1
    4c60:	619a      	str	r2, [r3, #24]
			break;
    4c62:	e016      	b.n	4c92 <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
    4c64:	4b0e      	ldr	r3, [pc, #56]	; (4ca0 <system_apb_clock_set_mask+0x78>)
    4c66:	4a0e      	ldr	r2, [pc, #56]	; (4ca0 <system_apb_clock_set_mask+0x78>)
    4c68:	69d1      	ldr	r1, [r2, #28]
    4c6a:	683a      	ldr	r2, [r7, #0]
    4c6c:	430a      	orrs	r2, r1
    4c6e:	61da      	str	r2, [r3, #28]
			break;
    4c70:	e00f      	b.n	4c92 <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
    4c72:	4b0b      	ldr	r3, [pc, #44]	; (4ca0 <system_apb_clock_set_mask+0x78>)
    4c74:	4a0a      	ldr	r2, [pc, #40]	; (4ca0 <system_apb_clock_set_mask+0x78>)
    4c76:	6a11      	ldr	r1, [r2, #32]
    4c78:	683a      	ldr	r2, [r7, #0]
    4c7a:	430a      	orrs	r2, r1
    4c7c:	621a      	str	r2, [r3, #32]
			break;
    4c7e:	e008      	b.n	4c92 <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
    4c80:	4b07      	ldr	r3, [pc, #28]	; (4ca0 <system_apb_clock_set_mask+0x78>)
    4c82:	4a07      	ldr	r2, [pc, #28]	; (4ca0 <system_apb_clock_set_mask+0x78>)
    4c84:	6a51      	ldr	r1, [r2, #36]	; 0x24
    4c86:	683a      	ldr	r2, [r7, #0]
    4c88:	430a      	orrs	r2, r1
    4c8a:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    4c8c:	e001      	b.n	4c92 <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
    4c8e:	2317      	movs	r3, #23
    4c90:	e000      	b.n	4c94 <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
    4c92:	2300      	movs	r3, #0
}
    4c94:	0018      	movs	r0, r3
    4c96:	46bd      	mov	sp, r7
    4c98:	b002      	add	sp, #8
    4c9a:	bd80      	pop	{r7, pc}
    4c9c:	000252d0 	.word	0x000252d0
    4ca0:	40000400 	.word	0x40000400

00004ca4 <system_pinmux_get_config_defaults>:
{
    4ca4:	b580      	push	{r7, lr}
    4ca6:	b082      	sub	sp, #8
    4ca8:	af00      	add	r7, sp, #0
    4caa:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4cac:	687b      	ldr	r3, [r7, #4]
    4cae:	2280      	movs	r2, #128	; 0x80
    4cb0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4cb2:	687b      	ldr	r3, [r7, #4]
    4cb4:	2200      	movs	r2, #0
    4cb6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4cb8:	687b      	ldr	r3, [r7, #4]
    4cba:	2201      	movs	r2, #1
    4cbc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4cbe:	687b      	ldr	r3, [r7, #4]
    4cc0:	2200      	movs	r2, #0
    4cc2:	70da      	strb	r2, [r3, #3]
}
    4cc4:	46c0      	nop			; (mov r8, r8)
    4cc6:	46bd      	mov	sp, r7
    4cc8:	b002      	add	sp, #8
    4cca:	bd80      	pop	{r7, pc}

00004ccc <system_interrupt_enable>:
{
    4ccc:	b580      	push	{r7, lr}
    4cce:	b082      	sub	sp, #8
    4cd0:	af00      	add	r7, sp, #0
    4cd2:	0002      	movs	r2, r0
    4cd4:	1dfb      	adds	r3, r7, #7
    4cd6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4cd8:	4b06      	ldr	r3, [pc, #24]	; (4cf4 <system_interrupt_enable+0x28>)
    4cda:	1dfa      	adds	r2, r7, #7
    4cdc:	7812      	ldrb	r2, [r2, #0]
    4cde:	0011      	movs	r1, r2
    4ce0:	221f      	movs	r2, #31
    4ce2:	400a      	ands	r2, r1
    4ce4:	2101      	movs	r1, #1
    4ce6:	4091      	lsls	r1, r2
    4ce8:	000a      	movs	r2, r1
    4cea:	601a      	str	r2, [r3, #0]
}
    4cec:	46c0      	nop			; (mov r8, r8)
    4cee:	46bd      	mov	sp, r7
    4cf0:	b002      	add	sp, #8
    4cf2:	bd80      	pop	{r7, pc}
    4cf4:	e000e100 	.word	0xe000e100

00004cf8 <_extint_get_eic_from_channel>:
{
    4cf8:	b580      	push	{r7, lr}
    4cfa:	b084      	sub	sp, #16
    4cfc:	af00      	add	r7, sp, #0
    4cfe:	0002      	movs	r2, r0
    4d00:	1dfb      	adds	r3, r7, #7
    4d02:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    4d04:	230f      	movs	r3, #15
    4d06:	18fb      	adds	r3, r7, r3
    4d08:	1dfa      	adds	r2, r7, #7
    4d0a:	7812      	ldrb	r2, [r2, #0]
    4d0c:	0952      	lsrs	r2, r2, #5
    4d0e:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
    4d10:	230f      	movs	r3, #15
    4d12:	18fb      	adds	r3, r7, r3
    4d14:	781b      	ldrb	r3, [r3, #0]
    4d16:	2b00      	cmp	r3, #0
    4d18:	d10c      	bne.n	4d34 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    4d1a:	4b09      	ldr	r3, [pc, #36]	; (4d40 <_extint_get_eic_from_channel+0x48>)
    4d1c:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
    4d1e:	230f      	movs	r3, #15
    4d20:	18fb      	adds	r3, r7, r3
    4d22:	781b      	ldrb	r3, [r3, #0]
    4d24:	009b      	lsls	r3, r3, #2
    4d26:	2210      	movs	r2, #16
    4d28:	4694      	mov	ip, r2
    4d2a:	44bc      	add	ip, r7
    4d2c:	4463      	add	r3, ip
    4d2e:	3b08      	subs	r3, #8
    4d30:	681b      	ldr	r3, [r3, #0]
    4d32:	e000      	b.n	4d36 <_extint_get_eic_from_channel+0x3e>
		return NULL;
    4d34:	2300      	movs	r3, #0
}
    4d36:	0018      	movs	r0, r3
    4d38:	46bd      	mov	sp, r7
    4d3a:	b004      	add	sp, #16
    4d3c:	bd80      	pop	{r7, pc}
    4d3e:	46c0      	nop			; (mov r8, r8)
    4d40:	40002400 	.word	0x40002400

00004d44 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    4d44:	b580      	push	{r7, lr}
    4d46:	b082      	sub	sp, #8
    4d48:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    4d4a:	4b15      	ldr	r3, [pc, #84]	; (4da0 <extint_is_syncing+0x5c>)
    4d4c:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    4d4e:	2300      	movs	r3, #0
    4d50:	607b      	str	r3, [r7, #4]
    4d52:	e01c      	b.n	4d8e <extint_is_syncing+0x4a>
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    4d54:	687b      	ldr	r3, [r7, #4]
    4d56:	009b      	lsls	r3, r3, #2
    4d58:	2208      	movs	r2, #8
    4d5a:	4694      	mov	ip, r2
    4d5c:	44bc      	add	ip, r7
    4d5e:	4463      	add	r3, ip
    4d60:	3b08      	subs	r3, #8
    4d62:	681b      	ldr	r3, [r3, #0]
    4d64:	685b      	ldr	r3, [r3, #4]
    4d66:	2202      	movs	r2, #2
    4d68:	4013      	ands	r3, r2
    4d6a:	d10b      	bne.n	4d84 <extint_is_syncing+0x40>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4d6c:	687b      	ldr	r3, [r7, #4]
    4d6e:	009b      	lsls	r3, r3, #2
    4d70:	2208      	movs	r2, #8
    4d72:	4694      	mov	ip, r2
    4d74:	44bc      	add	ip, r7
    4d76:	4463      	add	r3, ip
    4d78:	3b08      	subs	r3, #8
    4d7a:	681b      	ldr	r3, [r3, #0]
    4d7c:	685b      	ldr	r3, [r3, #4]
    4d7e:	2201      	movs	r2, #1
    4d80:	4013      	ands	r3, r2
    4d82:	d001      	beq.n	4d88 <extint_is_syncing+0x44>
			return true;
    4d84:	2301      	movs	r3, #1
    4d86:	e006      	b.n	4d96 <extint_is_syncing+0x52>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    4d88:	687b      	ldr	r3, [r7, #4]
    4d8a:	3301      	adds	r3, #1
    4d8c:	607b      	str	r3, [r7, #4]
    4d8e:	687b      	ldr	r3, [r7, #4]
    4d90:	2b00      	cmp	r3, #0
    4d92:	d0df      	beq.n	4d54 <extint_is_syncing+0x10>
		}
	}
	return false;
    4d94:	2300      	movs	r3, #0
}
    4d96:	0018      	movs	r0, r3
    4d98:	46bd      	mov	sp, r7
    4d9a:	b002      	add	sp, #8
    4d9c:	bd80      	pop	{r7, pc}
    4d9e:	46c0      	nop			; (mov r8, r8)
    4da0:	40002400 	.word	0x40002400

00004da4 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    4da4:	b580      	push	{r7, lr}
    4da6:	b084      	sub	sp, #16
    4da8:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    4daa:	4b2e      	ldr	r3, [pc, #184]	; (4e64 <_system_extint_init+0xc0>)
    4dac:	603b      	str	r3, [r7, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_EIC);
    4dae:	2380      	movs	r3, #128	; 0x80
    4db0:	009b      	lsls	r3, r3, #2
    4db2:	0019      	movs	r1, r3
    4db4:	2000      	movs	r0, #0
    4db6:	4b2c      	ldr	r3, [pc, #176]	; (4e68 <_system_extint_init+0xc4>)
    4db8:	4798      	blx	r3
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
#endif

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    4dba:	2300      	movs	r3, #0
    4dbc:	60fb      	str	r3, [r7, #12]
    4dbe:	e018      	b.n	4df2 <_system_extint_init+0x4e>
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
    4dc0:	68fb      	ldr	r3, [r7, #12]
    4dc2:	009b      	lsls	r3, r3, #2
    4dc4:	2210      	movs	r2, #16
    4dc6:	4694      	mov	ip, r2
    4dc8:	44bc      	add	ip, r7
    4dca:	4463      	add	r3, ip
    4dcc:	3b10      	subs	r3, #16
    4dce:	681a      	ldr	r2, [r3, #0]
    4dd0:	68fb      	ldr	r3, [r7, #12]
    4dd2:	009b      	lsls	r3, r3, #2
    4dd4:	2110      	movs	r1, #16
    4dd6:	468c      	mov	ip, r1
    4dd8:	44bc      	add	ip, r7
    4dda:	4463      	add	r3, ip
    4ddc:	3b10      	subs	r3, #16
    4dde:	681b      	ldr	r3, [r3, #0]
    4de0:	781b      	ldrb	r3, [r3, #0]
    4de2:	b2db      	uxtb	r3, r3
    4de4:	2101      	movs	r1, #1
    4de6:	430b      	orrs	r3, r1
    4de8:	b2db      	uxtb	r3, r3
    4dea:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    4dec:	68fb      	ldr	r3, [r7, #12]
    4dee:	3301      	adds	r3, #1
    4df0:	60fb      	str	r3, [r7, #12]
    4df2:	68fb      	ldr	r3, [r7, #12]
    4df4:	2b00      	cmp	r3, #0
    4df6:	d0e3      	beq.n	4dc0 <_system_extint_init+0x1c>
	}

	while (extint_is_syncing()) {
    4df8:	46c0      	nop			; (mov r8, r8)
    4dfa:	4b1c      	ldr	r3, [pc, #112]	; (4e6c <_system_extint_init+0xc8>)
    4dfc:	4798      	blx	r3
    4dfe:	1e03      	subs	r3, r0, #0
    4e00:	d1fb      	bne.n	4dfa <_system_extint_init+0x56>
#if (EXTINT_CLOCK_SELECTION == EXTINT_CLK_GCLK)
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_GCLK;
	}
#else
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    4e02:	2300      	movs	r3, #0
    4e04:	60bb      	str	r3, [r7, #8]
    4e06:	e00e      	b.n	4e26 <_system_extint_init+0x82>
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_ULP32K;
    4e08:	68bb      	ldr	r3, [r7, #8]
    4e0a:	009b      	lsls	r3, r3, #2
    4e0c:	2210      	movs	r2, #16
    4e0e:	4694      	mov	ip, r2
    4e10:	44bc      	add	ip, r7
    4e12:	4463      	add	r3, ip
    4e14:	3b10      	subs	r3, #16
    4e16:	681a      	ldr	r2, [r3, #0]
    4e18:	7813      	ldrb	r3, [r2, #0]
    4e1a:	2110      	movs	r1, #16
    4e1c:	430b      	orrs	r3, r1
    4e1e:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    4e20:	68bb      	ldr	r3, [r7, #8]
    4e22:	3301      	adds	r3, #1
    4e24:	60bb      	str	r3, [r7, #8]
    4e26:	68bb      	ldr	r3, [r7, #8]
    4e28:	2b00      	cmp	r3, #0
    4e2a:	d0ed      	beq.n	4e08 <_system_extint_init+0x64>
#endif

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    4e2c:	1dfb      	adds	r3, r7, #7
    4e2e:	2200      	movs	r2, #0
    4e30:	701a      	strb	r2, [r3, #0]
    4e32:	e00a      	b.n	4e4a <_system_extint_init+0xa6>
		_extint_dev.callbacks[j] = NULL;
    4e34:	1dfb      	adds	r3, r7, #7
    4e36:	781a      	ldrb	r2, [r3, #0]
    4e38:	4b0d      	ldr	r3, [pc, #52]	; (4e70 <_system_extint_init+0xcc>)
    4e3a:	0092      	lsls	r2, r2, #2
    4e3c:	2100      	movs	r1, #0
    4e3e:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    4e40:	1dfb      	adds	r3, r7, #7
    4e42:	781a      	ldrb	r2, [r3, #0]
    4e44:	1dfb      	adds	r3, r7, #7
    4e46:	3201      	adds	r2, #1
    4e48:	701a      	strb	r2, [r3, #0]
    4e4a:	1dfb      	adds	r3, r7, #7
    4e4c:	781b      	ldrb	r3, [r3, #0]
    4e4e:	2b0f      	cmp	r3, #15
    4e50:	d9f0      	bls.n	4e34 <_system_extint_init+0x90>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    4e52:	2003      	movs	r0, #3
    4e54:	4b07      	ldr	r3, [pc, #28]	; (4e74 <_system_extint_init+0xd0>)
    4e56:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    4e58:	4b07      	ldr	r3, [pc, #28]	; (4e78 <_system_extint_init+0xd4>)
    4e5a:	4798      	blx	r3
}
    4e5c:	46c0      	nop			; (mov r8, r8)
    4e5e:	46bd      	mov	sp, r7
    4e60:	b004      	add	sp, #16
    4e62:	bd80      	pop	{r7, pc}
    4e64:	40002400 	.word	0x40002400
    4e68:	00004c29 	.word	0x00004c29
    4e6c:	00004d45 	.word	0x00004d45
    4e70:	200011e0 	.word	0x200011e0
    4e74:	00004ccd 	.word	0x00004ccd
    4e78:	00004e7d 	.word	0x00004e7d

00004e7c <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    4e7c:	b580      	push	{r7, lr}
    4e7e:	b082      	sub	sp, #8
    4e80:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    4e82:	4b15      	ldr	r3, [pc, #84]	; (4ed8 <_extint_enable+0x5c>)
    4e84:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    4e86:	2300      	movs	r3, #0
    4e88:	607b      	str	r3, [r7, #4]
    4e8a:	e018      	b.n	4ebe <_extint_enable+0x42>
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
    4e8c:	687b      	ldr	r3, [r7, #4]
    4e8e:	009b      	lsls	r3, r3, #2
    4e90:	2208      	movs	r2, #8
    4e92:	4694      	mov	ip, r2
    4e94:	44bc      	add	ip, r7
    4e96:	4463      	add	r3, ip
    4e98:	3b08      	subs	r3, #8
    4e9a:	681a      	ldr	r2, [r3, #0]
    4e9c:	687b      	ldr	r3, [r7, #4]
    4e9e:	009b      	lsls	r3, r3, #2
    4ea0:	2108      	movs	r1, #8
    4ea2:	468c      	mov	ip, r1
    4ea4:	44bc      	add	ip, r7
    4ea6:	4463      	add	r3, ip
    4ea8:	3b08      	subs	r3, #8
    4eaa:	681b      	ldr	r3, [r3, #0]
    4eac:	781b      	ldrb	r3, [r3, #0]
    4eae:	b2db      	uxtb	r3, r3
    4eb0:	2102      	movs	r1, #2
    4eb2:	430b      	orrs	r3, r1
    4eb4:	b2db      	uxtb	r3, r3
    4eb6:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    4eb8:	687b      	ldr	r3, [r7, #4]
    4eba:	3301      	adds	r3, #1
    4ebc:	607b      	str	r3, [r7, #4]
    4ebe:	687b      	ldr	r3, [r7, #4]
    4ec0:	2b00      	cmp	r3, #0
    4ec2:	d0e3      	beq.n	4e8c <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
    4ec4:	46c0      	nop			; (mov r8, r8)
    4ec6:	4b05      	ldr	r3, [pc, #20]	; (4edc <_extint_enable+0x60>)
    4ec8:	4798      	blx	r3
    4eca:	1e03      	subs	r3, r0, #0
    4ecc:	d1fb      	bne.n	4ec6 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    4ece:	46c0      	nop			; (mov r8, r8)
    4ed0:	46bd      	mov	sp, r7
    4ed2:	b002      	add	sp, #8
    4ed4:	bd80      	pop	{r7, pc}
    4ed6:	46c0      	nop			; (mov r8, r8)
    4ed8:	40002400 	.word	0x40002400
    4edc:	00004d45 	.word	0x00004d45

00004ee0 <_extint_disable>:
 * Disables EIC modules that were previously started via a call to
 * \ref _extint_enable().
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_disable(void)
{
    4ee0:	b580      	push	{r7, lr}
    4ee2:	b082      	sub	sp, #8
    4ee4:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    4ee6:	4b15      	ldr	r3, [pc, #84]	; (4f3c <_extint_disable+0x5c>)
    4ee8:	603b      	str	r3, [r7, #0]

	/* Disable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    4eea:	2300      	movs	r3, #0
    4eec:	607b      	str	r3, [r7, #4]
    4eee:	e018      	b.n	4f22 <_extint_disable+0x42>
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    4ef0:	687b      	ldr	r3, [r7, #4]
    4ef2:	009b      	lsls	r3, r3, #2
    4ef4:	2208      	movs	r2, #8
    4ef6:	4694      	mov	ip, r2
    4ef8:	44bc      	add	ip, r7
    4efa:	4463      	add	r3, ip
    4efc:	3b08      	subs	r3, #8
    4efe:	681a      	ldr	r2, [r3, #0]
    4f00:	687b      	ldr	r3, [r7, #4]
    4f02:	009b      	lsls	r3, r3, #2
    4f04:	2108      	movs	r1, #8
    4f06:	468c      	mov	ip, r1
    4f08:	44bc      	add	ip, r7
    4f0a:	4463      	add	r3, ip
    4f0c:	3b08      	subs	r3, #8
    4f0e:	681b      	ldr	r3, [r3, #0]
    4f10:	781b      	ldrb	r3, [r3, #0]
    4f12:	b2db      	uxtb	r3, r3
    4f14:	2102      	movs	r1, #2
    4f16:	438b      	bics	r3, r1
    4f18:	b2db      	uxtb	r3, r3
    4f1a:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    4f1c:	687b      	ldr	r3, [r7, #4]
    4f1e:	3301      	adds	r3, #1
    4f20:	607b      	str	r3, [r7, #4]
    4f22:	687b      	ldr	r3, [r7, #4]
    4f24:	2b00      	cmp	r3, #0
    4f26:	d0e3      	beq.n	4ef0 <_extint_disable+0x10>
	}

	while (extint_is_syncing()) {
    4f28:	46c0      	nop			; (mov r8, r8)
    4f2a:	4b05      	ldr	r3, [pc, #20]	; (4f40 <_extint_disable+0x60>)
    4f2c:	4798      	blx	r3
    4f2e:	1e03      	subs	r3, r0, #0
    4f30:	d1fb      	bne.n	4f2a <_extint_disable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    4f32:	46c0      	nop			; (mov r8, r8)
    4f34:	46bd      	mov	sp, r7
    4f36:	b002      	add	sp, #8
    4f38:	bd80      	pop	{r7, pc}
    4f3a:	46c0      	nop			; (mov r8, r8)
    4f3c:	40002400 	.word	0x40002400
    4f40:	00004d45 	.word	0x00004d45

00004f44 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    4f44:	b580      	push	{r7, lr}
    4f46:	b082      	sub	sp, #8
    4f48:	af00      	add	r7, sp, #0
    4f4a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    4f4c:	687b      	ldr	r3, [r7, #4]
    4f4e:	2200      	movs	r2, #0
    4f50:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    4f52:	687b      	ldr	r3, [r7, #4]
    4f54:	2200      	movs	r2, #0
    4f56:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    4f58:	687b      	ldr	r3, [r7, #4]
    4f5a:	2201      	movs	r2, #1
    4f5c:	721a      	strb	r2, [r3, #8]
	config->filter_input_signal = false;
    4f5e:	687b      	ldr	r3, [r7, #4]
    4f60:	2200      	movs	r2, #0
    4f62:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    4f64:	687b      	ldr	r3, [r7, #4]
    4f66:	2202      	movs	r2, #2
    4f68:	72da      	strb	r2, [r3, #11]
	config->enable_async_edge_detection = false;
    4f6a:	687b      	ldr	r3, [r7, #4]
    4f6c:	2200      	movs	r2, #0
    4f6e:	725a      	strb	r2, [r3, #9]
}
    4f70:	46c0      	nop			; (mov r8, r8)
    4f72:	46bd      	mov	sp, r7
    4f74:	b002      	add	sp, #8
    4f76:	bd80      	pop	{r7, pc}

00004f78 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    4f78:	b580      	push	{r7, lr}
    4f7a:	b086      	sub	sp, #24
    4f7c:	af00      	add	r7, sp, #0
    4f7e:	0002      	movs	r2, r0
    4f80:	6039      	str	r1, [r7, #0]
    4f82:	1dfb      	adds	r3, r7, #7
    4f84:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);
	_extint_disable();
    4f86:	4b3c      	ldr	r3, [pc, #240]	; (5078 <extint_chan_set_config+0x100>)
    4f88:	4798      	blx	r3
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));
#endif
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    4f8a:	2308      	movs	r3, #8
    4f8c:	18fb      	adds	r3, r7, r3
    4f8e:	0018      	movs	r0, r3
    4f90:	4b3a      	ldr	r3, [pc, #232]	; (507c <extint_chan_set_config+0x104>)
    4f92:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
    4f94:	683b      	ldr	r3, [r7, #0]
    4f96:	685b      	ldr	r3, [r3, #4]
    4f98:	b2da      	uxtb	r2, r3
    4f9a:	2308      	movs	r3, #8
    4f9c:	18fb      	adds	r3, r7, r3
    4f9e:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4fa0:	2308      	movs	r3, #8
    4fa2:	18fb      	adds	r3, r7, r3
    4fa4:	2200      	movs	r2, #0
    4fa6:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    4fa8:	683b      	ldr	r3, [r7, #0]
    4faa:	7a1a      	ldrb	r2, [r3, #8]
    4fac:	2308      	movs	r3, #8
    4fae:	18fb      	adds	r3, r7, r3
    4fb0:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    4fb2:	683b      	ldr	r3, [r7, #0]
    4fb4:	681b      	ldr	r3, [r3, #0]
    4fb6:	b2db      	uxtb	r3, r3
    4fb8:	2208      	movs	r2, #8
    4fba:	18ba      	adds	r2, r7, r2
    4fbc:	0011      	movs	r1, r2
    4fbe:	0018      	movs	r0, r3
    4fc0:	4b2f      	ldr	r3, [pc, #188]	; (5080 <extint_chan_set_config+0x108>)
    4fc2:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
    4fc4:	1dfb      	adds	r3, r7, #7
    4fc6:	781b      	ldrb	r3, [r3, #0]
    4fc8:	0018      	movs	r0, r3
    4fca:	4b2e      	ldr	r3, [pc, #184]	; (5084 <extint_chan_set_config+0x10c>)
    4fcc:	4798      	blx	r3
    4fce:	0003      	movs	r3, r0
    4fd0:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
    4fd2:	1dfb      	adds	r3, r7, #7
    4fd4:	781b      	ldrb	r3, [r3, #0]
    4fd6:	2207      	movs	r2, #7
    4fd8:	4013      	ands	r3, r2
    4fda:	009b      	lsls	r3, r3, #2
    4fdc:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    4fde:	683b      	ldr	r3, [r7, #0]
    4fe0:	7adb      	ldrb	r3, [r3, #11]
    4fe2:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    4fe4:	683b      	ldr	r3, [r7, #0]
    4fe6:	7a9b      	ldrb	r3, [r3, #10]
    4fe8:	2b00      	cmp	r3, #0
    4fea:	d003      	beq.n	4ff4 <extint_chan_set_config+0x7c>
		new_config |= EIC_CONFIG_FILTEN0;
    4fec:	697b      	ldr	r3, [r7, #20]
    4fee:	2208      	movs	r2, #8
    4ff0:	4313      	orrs	r3, r2
    4ff2:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    4ff4:	1dfb      	adds	r3, r7, #7
    4ff6:	781b      	ldrb	r3, [r3, #0]
    4ff8:	08db      	lsrs	r3, r3, #3
    4ffa:	b2db      	uxtb	r3, r3
    4ffc:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    4ffe:	1dfb      	adds	r3, r7, #7
    5000:	781b      	ldrb	r3, [r3, #0]
    5002:	08db      	lsrs	r3, r3, #3
    5004:	b2db      	uxtb	r3, r3
    5006:	693a      	ldr	r2, [r7, #16]
    5008:	3306      	adds	r3, #6
    500a:	009b      	lsls	r3, r3, #2
    500c:	18d3      	adds	r3, r2, r3
    500e:	3304      	adds	r3, #4
    5010:	681b      	ldr	r3, [r3, #0]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    5012:	210f      	movs	r1, #15
    5014:	68fa      	ldr	r2, [r7, #12]
    5016:	4091      	lsls	r1, r2
    5018:	000a      	movs	r2, r1
    501a:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    501c:	401a      	ands	r2, r3
			(new_config << config_pos);
    501e:	6979      	ldr	r1, [r7, #20]
    5020:	68fb      	ldr	r3, [r7, #12]
    5022:	4099      	lsls	r1, r3
    5024:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    5026:	431a      	orrs	r2, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    5028:	6939      	ldr	r1, [r7, #16]
    502a:	1d83      	adds	r3, r0, #6
    502c:	009b      	lsls	r3, r3, #2
    502e:	18cb      	adds	r3, r1, r3
    5030:	3304      	adds	r3, #4
    5032:	601a      	str	r2, [r3, #0]
#if (SAML22) || (SAML21XXXB) || (SAMC20) || (SAMR30)
	/* Config asynchronous edge detection */
	if (config->enable_async_edge_detection) {
    5034:	683b      	ldr	r3, [r7, #0]
    5036:	7a5b      	ldrb	r3, [r3, #9]
    5038:	2b00      	cmp	r3, #0
    503a:	d00a      	beq.n	5052 <extint_chan_set_config+0xda>
		EIC_module->ASYNCH.reg |= (1UL << channel);
    503c:	693b      	ldr	r3, [r7, #16]
    503e:	699a      	ldr	r2, [r3, #24]
    5040:	1dfb      	adds	r3, r7, #7
    5042:	781b      	ldrb	r3, [r3, #0]
    5044:	2101      	movs	r1, #1
    5046:	4099      	lsls	r1, r3
    5048:	000b      	movs	r3, r1
    504a:	431a      	orrs	r2, r3
    504c:	693b      	ldr	r3, [r7, #16]
    504e:	619a      	str	r2, [r3, #24]
    5050:	e00c      	b.n	506c <extint_chan_set_config+0xf4>
	} else {
		EIC_module->ASYNCH.reg &= (EIC_ASYNCH_MASK & (~(1UL << channel)));
    5052:	693b      	ldr	r3, [r7, #16]
    5054:	699b      	ldr	r3, [r3, #24]
    5056:	1dfa      	adds	r2, r7, #7
    5058:	7812      	ldrb	r2, [r2, #0]
    505a:	2101      	movs	r1, #1
    505c:	4091      	lsls	r1, r2
    505e:	000a      	movs	r2, r1
    5060:	43d2      	mvns	r2, r2
    5062:	4013      	ands	r3, r2
    5064:	041b      	lsls	r3, r3, #16
    5066:	0c1a      	lsrs	r2, r3, #16
    5068:	693b      	ldr	r3, [r7, #16]
    506a:	619a      	str	r2, [r3, #24]
		EIC_module->EIC_ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->EIC_ASYNCH.reg &= (EIC_EIC_ASYNCH_MASK & (~(1UL << channel)));
	}
#endif
	_extint_enable();
    506c:	4b06      	ldr	r3, [pc, #24]	; (5088 <extint_chan_set_config+0x110>)
    506e:	4798      	blx	r3
}
    5070:	46c0      	nop			; (mov r8, r8)
    5072:	46bd      	mov	sp, r7
    5074:	b006      	add	sp, #24
    5076:	bd80      	pop	{r7, pc}
    5078:	00004ee1 	.word	0x00004ee1
    507c:	00004ca5 	.word	0x00004ca5
    5080:	00016235 	.word	0x00016235
    5084:	00004cf9 	.word	0x00004cf9
    5088:	00004e7d 	.word	0x00004e7d

0000508c <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
    508c:	b580      	push	{r7, lr}
    508e:	b086      	sub	sp, #24
    5090:	af00      	add	r7, sp, #0
    5092:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
    5094:	4b58      	ldr	r3, [pc, #352]	; (51f8 <_rtc_interrupt_handler+0x16c>)
    5096:	687a      	ldr	r2, [r7, #4]
    5098:	0092      	lsls	r2, r2, #2
    509a:	58d3      	ldr	r3, [r2, r3]
    509c:	613b      	str	r3, [r7, #16]

	Rtc *const rtc_module = module->hw;
    509e:	693b      	ldr	r3, [r7, #16]
    50a0:	681b      	ldr	r3, [r3, #0]
    50a2:	60fb      	str	r3, [r7, #12]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
    50a4:	230a      	movs	r3, #10
    50a6:	18fb      	adds	r3, r7, r3
    50a8:	693a      	ldr	r2, [r7, #16]
    50aa:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
    50ac:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    50ae:	693b      	ldr	r3, [r7, #16]
    50b0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    50b2:	b29a      	uxth	r2, r3
    50b4:	230a      	movs	r3, #10
    50b6:	18fb      	adds	r3, r7, r3
    50b8:	210a      	movs	r1, #10
    50ba:	1879      	adds	r1, r7, r1
    50bc:	8809      	ldrh	r1, [r1, #0]
    50be:	400a      	ands	r2, r1
    50c0:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
    50c2:	2308      	movs	r3, #8
    50c4:	18fb      	adds	r3, r7, r3
    50c6:	68fa      	ldr	r2, [r7, #12]
    50c8:	8992      	ldrh	r2, [r2, #12]
    50ca:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
    50cc:	68fb      	ldr	r3, [r7, #12]
    50ce:	895b      	ldrh	r3, [r3, #10]
    50d0:	b29a      	uxth	r2, r3
    50d2:	2308      	movs	r3, #8
    50d4:	18fb      	adds	r3, r7, r3
    50d6:	2108      	movs	r1, #8
    50d8:	1879      	adds	r1, r7, r1
    50da:	8809      	ldrh	r1, [r1, #0]
    50dc:	400a      	ands	r2, r1
    50de:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
    50e0:	2308      	movs	r3, #8
    50e2:	18fb      	adds	r3, r7, r3
    50e4:	2200      	movs	r2, #0
    50e6:	5e9b      	ldrsh	r3, [r3, r2]
    50e8:	2b00      	cmp	r3, #0
    50ea:	da0d      	bge.n	5108 <_rtc_interrupt_handler+0x7c>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
    50ec:	230a      	movs	r3, #10
    50ee:	18fb      	adds	r3, r7, r3
    50f0:	881a      	ldrh	r2, [r3, #0]
    50f2:	2380      	movs	r3, #128	; 0x80
    50f4:	00db      	lsls	r3, r3, #3
    50f6:	4013      	ands	r3, r2
    50f8:	d002      	beq.n	5100 <_rtc_interrupt_handler+0x74>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
    50fa:	693b      	ldr	r3, [r7, #16]
    50fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    50fe:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
    5100:	68fb      	ldr	r3, [r7, #12]
    5102:	4a3e      	ldr	r2, [pc, #248]	; (51fc <_rtc_interrupt_handler+0x170>)
    5104:	819a      	strh	r2, [r3, #12]
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 5);
		#endif
	}
}
    5106:	e072      	b.n	51ee <_rtc_interrupt_handler+0x162>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_PER(0xff)) {
    5108:	2308      	movs	r3, #8
    510a:	18fb      	adds	r3, r7, r3
    510c:	881b      	ldrh	r3, [r3, #0]
    510e:	22ff      	movs	r2, #255	; 0xff
    5110:	4013      	ands	r3, r2
    5112:	d041      	beq.n	5198 <_rtc_interrupt_handler+0x10c>
		uint8_t i  = 0;
    5114:	2317      	movs	r3, #23
    5116:	18fb      	adds	r3, r7, r3
    5118:	2200      	movs	r2, #0
    511a:	701a      	strb	r2, [r3, #0]
		for ( i = 0;i < RTC_PER_NUM;i++) {
    511c:	2317      	movs	r3, #23
    511e:	18fb      	adds	r3, r7, r3
    5120:	2200      	movs	r2, #0
    5122:	701a      	strb	r2, [r3, #0]
    5124:	e032      	b.n	518c <_rtc_interrupt_handler+0x100>
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    5126:	2308      	movs	r3, #8
    5128:	18fb      	adds	r3, r7, r3
    512a:	881b      	ldrh	r3, [r3, #0]
    512c:	2217      	movs	r2, #23
    512e:	18ba      	adds	r2, r7, r2
    5130:	7812      	ldrb	r2, [r2, #0]
    5132:	2101      	movs	r1, #1
    5134:	4091      	lsls	r1, r2
    5136:	000a      	movs	r2, r1
    5138:	4013      	ands	r3, r2
    513a:	22ff      	movs	r2, #255	; 0xff
    513c:	4013      	ands	r3, r2
    513e:	d012      	beq.n	5166 <_rtc_interrupt_handler+0xda>
			  && (callback_mask & (1 << i))) {
    5140:	230a      	movs	r3, #10
    5142:	18fb      	adds	r3, r7, r3
    5144:	881a      	ldrh	r2, [r3, #0]
    5146:	2317      	movs	r3, #23
    5148:	18fb      	adds	r3, r7, r3
    514a:	781b      	ldrb	r3, [r3, #0]
    514c:	411a      	asrs	r2, r3
    514e:	0013      	movs	r3, r2
    5150:	2201      	movs	r2, #1
    5152:	4013      	ands	r3, r2
    5154:	d007      	beq.n	5166 <_rtc_interrupt_handler+0xda>
				module->callbacks[i]();
    5156:	2317      	movs	r3, #23
    5158:	18fb      	adds	r3, r7, r3
    515a:	781a      	ldrb	r2, [r3, #0]
    515c:	693b      	ldr	r3, [r7, #16]
    515e:	3202      	adds	r2, #2
    5160:	0092      	lsls	r2, r2, #2
    5162:	58d3      	ldr	r3, [r2, r3]
    5164:	4798      	blx	r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    5166:	2317      	movs	r3, #23
    5168:	18fb      	adds	r3, r7, r3
    516a:	781b      	ldrb	r3, [r3, #0]
    516c:	2201      	movs	r2, #1
    516e:	409a      	lsls	r2, r3
    5170:	0013      	movs	r3, r2
    5172:	b29b      	uxth	r3, r3
    5174:	22ff      	movs	r2, #255	; 0xff
    5176:	4013      	ands	r3, r2
    5178:	b29a      	uxth	r2, r3
    517a:	68fb      	ldr	r3, [r7, #12]
    517c:	819a      	strh	r2, [r3, #12]
		for ( i = 0;i < RTC_PER_NUM;i++) {
    517e:	2317      	movs	r3, #23
    5180:	18fb      	adds	r3, r7, r3
    5182:	781a      	ldrb	r2, [r3, #0]
    5184:	2317      	movs	r3, #23
    5186:	18fb      	adds	r3, r7, r3
    5188:	3201      	adds	r2, #1
    518a:	701a      	strb	r2, [r3, #0]
    518c:	2317      	movs	r3, #23
    518e:	18fb      	adds	r3, r7, r3
    5190:	781b      	ldrb	r3, [r3, #0]
    5192:	2b07      	cmp	r3, #7
    5194:	d9c7      	bls.n	5126 <_rtc_interrupt_handler+0x9a>
}
    5196:	e02a      	b.n	51ee <_rtc_interrupt_handler+0x162>
	}else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
    5198:	2308      	movs	r3, #8
    519a:	18fb      	adds	r3, r7, r3
    519c:	881a      	ldrh	r2, [r3, #0]
    519e:	2380      	movs	r3, #128	; 0x80
    51a0:	005b      	lsls	r3, r3, #1
    51a2:	4013      	ands	r3, r2
    51a4:	d00e      	beq.n	51c4 <_rtc_interrupt_handler+0x138>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
    51a6:	230a      	movs	r3, #10
    51a8:	18fb      	adds	r3, r7, r3
    51aa:	881a      	ldrh	r2, [r3, #0]
    51ac:	2380      	movs	r3, #128	; 0x80
    51ae:	005b      	lsls	r3, r3, #1
    51b0:	4013      	ands	r3, r2
    51b2:	d002      	beq.n	51ba <_rtc_interrupt_handler+0x12e>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
    51b4:	693b      	ldr	r3, [r7, #16]
    51b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    51b8:	4798      	blx	r3
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
    51ba:	68fb      	ldr	r3, [r7, #12]
    51bc:	2280      	movs	r2, #128	; 0x80
    51be:	0052      	lsls	r2, r2, #1
    51c0:	819a      	strh	r2, [r3, #12]
}
    51c2:	e014      	b.n	51ee <_rtc_interrupt_handler+0x162>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
    51c4:	2308      	movs	r3, #8
    51c6:	18fb      	adds	r3, r7, r3
    51c8:	881a      	ldrh	r2, [r3, #0]
    51ca:	2380      	movs	r3, #128	; 0x80
    51cc:	009b      	lsls	r3, r3, #2
    51ce:	4013      	ands	r3, r2
    51d0:	d00d      	beq.n	51ee <_rtc_interrupt_handler+0x162>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
    51d2:	230a      	movs	r3, #10
    51d4:	18fb      	adds	r3, r7, r3
    51d6:	881a      	ldrh	r2, [r3, #0]
    51d8:	2380      	movs	r3, #128	; 0x80
    51da:	009b      	lsls	r3, r3, #2
    51dc:	4013      	ands	r3, r2
    51de:	d002      	beq.n	51e6 <_rtc_interrupt_handler+0x15a>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
    51e0:	693b      	ldr	r3, [r7, #16]
    51e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    51e4:	4798      	blx	r3
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
    51e6:	68fb      	ldr	r3, [r7, #12]
    51e8:	2280      	movs	r2, #128	; 0x80
    51ea:	0092      	lsls	r2, r2, #2
    51ec:	819a      	strh	r2, [r3, #12]
}
    51ee:	46c0      	nop			; (mov r8, r8)
    51f0:	46bd      	mov	sp, r7
    51f2:	b006      	add	sp, #24
    51f4:	bd80      	pop	{r7, pc}
    51f6:	46c0      	nop			; (mov r8, r8)
    51f8:	20001220 	.word	0x20001220
    51fc:	ffff8000 	.word	0xffff8000

00005200 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    5200:	b580      	push	{r7, lr}
    5202:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
    5204:	2000      	movs	r0, #0
    5206:	4b02      	ldr	r3, [pc, #8]	; (5210 <RTC_Handler+0x10>)
    5208:	4798      	blx	r3
}
    520a:	46c0      	nop			; (mov r8, r8)
    520c:	46bd      	mov	sp, r7
    520e:	bd80      	pop	{r7, pc}
    5210:	0000508d 	.word	0x0000508d

00005214 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    5214:	b580      	push	{r7, lr}
    5216:	b082      	sub	sp, #8
    5218:	af00      	add	r7, sp, #0
    521a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    521c:	687b      	ldr	r3, [r7, #4]
    521e:	2200      	movs	r2, #0
    5220:	701a      	strb	r2, [r3, #0]
}
    5222:	46c0      	nop			; (mov r8, r8)
    5224:	46bd      	mov	sp, r7
    5226:	b002      	add	sp, #8
    5228:	bd80      	pop	{r7, pc}
	...

0000522c <system_apb_clock_set_mask>:
{
    522c:	b580      	push	{r7, lr}
    522e:	b082      	sub	sp, #8
    5230:	af00      	add	r7, sp, #0
    5232:	0002      	movs	r2, r0
    5234:	6039      	str	r1, [r7, #0]
    5236:	1dfb      	adds	r3, r7, #7
    5238:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    523a:	1dfb      	adds	r3, r7, #7
    523c:	781b      	ldrb	r3, [r3, #0]
    523e:	2b04      	cmp	r3, #4
    5240:	d827      	bhi.n	5292 <system_apb_clock_set_mask+0x66>
    5242:	009a      	lsls	r2, r3, #2
    5244:	4b16      	ldr	r3, [pc, #88]	; (52a0 <system_apb_clock_set_mask+0x74>)
    5246:	18d3      	adds	r3, r2, r3
    5248:	681b      	ldr	r3, [r3, #0]
    524a:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    524c:	4b15      	ldr	r3, [pc, #84]	; (52a4 <system_apb_clock_set_mask+0x78>)
    524e:	4a15      	ldr	r2, [pc, #84]	; (52a4 <system_apb_clock_set_mask+0x78>)
    5250:	6951      	ldr	r1, [r2, #20]
    5252:	683a      	ldr	r2, [r7, #0]
    5254:	430a      	orrs	r2, r1
    5256:	615a      	str	r2, [r3, #20]
			break;
    5258:	e01d      	b.n	5296 <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
    525a:	4b12      	ldr	r3, [pc, #72]	; (52a4 <system_apb_clock_set_mask+0x78>)
    525c:	4a11      	ldr	r2, [pc, #68]	; (52a4 <system_apb_clock_set_mask+0x78>)
    525e:	6991      	ldr	r1, [r2, #24]
    5260:	683a      	ldr	r2, [r7, #0]
    5262:	430a      	orrs	r2, r1
    5264:	619a      	str	r2, [r3, #24]
			break;
    5266:	e016      	b.n	5296 <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
    5268:	4b0e      	ldr	r3, [pc, #56]	; (52a4 <system_apb_clock_set_mask+0x78>)
    526a:	4a0e      	ldr	r2, [pc, #56]	; (52a4 <system_apb_clock_set_mask+0x78>)
    526c:	69d1      	ldr	r1, [r2, #28]
    526e:	683a      	ldr	r2, [r7, #0]
    5270:	430a      	orrs	r2, r1
    5272:	61da      	str	r2, [r3, #28]
			break;
    5274:	e00f      	b.n	5296 <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
    5276:	4b0b      	ldr	r3, [pc, #44]	; (52a4 <system_apb_clock_set_mask+0x78>)
    5278:	4a0a      	ldr	r2, [pc, #40]	; (52a4 <system_apb_clock_set_mask+0x78>)
    527a:	6a11      	ldr	r1, [r2, #32]
    527c:	683a      	ldr	r2, [r7, #0]
    527e:	430a      	orrs	r2, r1
    5280:	621a      	str	r2, [r3, #32]
			break;
    5282:	e008      	b.n	5296 <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
    5284:	4b07      	ldr	r3, [pc, #28]	; (52a4 <system_apb_clock_set_mask+0x78>)
    5286:	4a07      	ldr	r2, [pc, #28]	; (52a4 <system_apb_clock_set_mask+0x78>)
    5288:	6a51      	ldr	r1, [r2, #36]	; 0x24
    528a:	683a      	ldr	r2, [r7, #0]
    528c:	430a      	orrs	r2, r1
    528e:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    5290:	e001      	b.n	5296 <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
    5292:	2317      	movs	r3, #23
    5294:	e000      	b.n	5298 <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
    5296:	2300      	movs	r3, #0
}
    5298:	0018      	movs	r0, r3
    529a:	46bd      	mov	sp, r7
    529c:	b002      	add	sp, #8
    529e:	bd80      	pop	{r7, pc}
    52a0:	000252e4 	.word	0x000252e4
    52a4:	40000400 	.word	0x40000400

000052a8 <system_pinmux_get_config_defaults>:
{
    52a8:	b580      	push	{r7, lr}
    52aa:	b082      	sub	sp, #8
    52ac:	af00      	add	r7, sp, #0
    52ae:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    52b0:	687b      	ldr	r3, [r7, #4]
    52b2:	2280      	movs	r2, #128	; 0x80
    52b4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    52b6:	687b      	ldr	r3, [r7, #4]
    52b8:	2200      	movs	r2, #0
    52ba:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    52bc:	687b      	ldr	r3, [r7, #4]
    52be:	2201      	movs	r2, #1
    52c0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    52c2:	687b      	ldr	r3, [r7, #4]
    52c4:	2200      	movs	r2, #0
    52c6:	70da      	strb	r2, [r3, #3]
}
    52c8:	46c0      	nop			; (mov r8, r8)
    52ca:	46bd      	mov	sp, r7
    52cc:	b002      	add	sp, #8
    52ce:	bd80      	pop	{r7, pc}

000052d0 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    52d0:	b580      	push	{r7, lr}
    52d2:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    52d4:	4b05      	ldr	r3, [pc, #20]	; (52ec <system_is_debugger_present+0x1c>)
    52d6:	789b      	ldrb	r3, [r3, #2]
    52d8:	b2db      	uxtb	r3, r3
    52da:	001a      	movs	r2, r3
    52dc:	2302      	movs	r3, #2
    52de:	4013      	ands	r3, r2
    52e0:	1e5a      	subs	r2, r3, #1
    52e2:	4193      	sbcs	r3, r2
    52e4:	b2db      	uxtb	r3, r3
}
    52e6:	0018      	movs	r0, r3
    52e8:	46bd      	mov	sp, r7
    52ea:	bd80      	pop	{r7, pc}
    52ec:	41002000 	.word	0x41002000

000052f0 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    52f0:	b580      	push	{r7, lr}
    52f2:	b084      	sub	sp, #16
    52f4:	af00      	add	r7, sp, #0
    52f6:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    52f8:	687b      	ldr	r3, [r7, #4]
    52fa:	681b      	ldr	r3, [r3, #0]
    52fc:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    52fe:	68fb      	ldr	r3, [r7, #12]
    5300:	69db      	ldr	r3, [r3, #28]
    5302:	2207      	movs	r2, #7
    5304:	4013      	ands	r3, r2
    5306:	1e5a      	subs	r2, r3, #1
    5308:	4193      	sbcs	r3, r2
    530a:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    530c:	0018      	movs	r0, r3
    530e:	46bd      	mov	sp, r7
    5310:	b004      	add	sp, #16
    5312:	bd80      	pop	{r7, pc}

00005314 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    5314:	b580      	push	{r7, lr}
    5316:	b082      	sub	sp, #8
    5318:	af00      	add	r7, sp, #0
    531a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    531c:	46c0      	nop			; (mov r8, r8)
    531e:	687b      	ldr	r3, [r7, #4]
    5320:	0018      	movs	r0, r3
    5322:	4b04      	ldr	r3, [pc, #16]	; (5334 <_i2c_master_wait_for_sync+0x20>)
    5324:	4798      	blx	r3
    5326:	1e03      	subs	r3, r0, #0
    5328:	d1f9      	bne.n	531e <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    532a:	46c0      	nop			; (mov r8, r8)
    532c:	46bd      	mov	sp, r7
    532e:	b002      	add	sp, #8
    5330:	bd80      	pop	{r7, pc}
    5332:	46c0      	nop			; (mov r8, r8)
    5334:	000052f1 	.word	0x000052f1

00005338 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
    5338:	b5f0      	push	{r4, r5, r6, r7, lr}
    533a:	b097      	sub	sp, #92	; 0x5c
    533c:	af00      	add	r7, sp, #0
    533e:	6178      	str	r0, [r7, #20]
    5340:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
    5342:	2300      	movs	r3, #0
    5344:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
    5346:	2300      	movs	r3, #0
    5348:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
    534a:	2300      	movs	r3, #0
    534c:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
    534e:	233b      	movs	r3, #59	; 0x3b
    5350:	2210      	movs	r2, #16
    5352:	4694      	mov	ip, r2
    5354:	44bc      	add	ip, r7
    5356:	4463      	add	r3, ip
    5358:	2200      	movs	r2, #0
    535a:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    535c:	697b      	ldr	r3, [r7, #20]
    535e:	681b      	ldr	r3, [r3, #0]
    5360:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
    5362:	697b      	ldr	r3, [r7, #20]
    5364:	681b      	ldr	r3, [r3, #0]
    5366:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    5368:	2323      	movs	r3, #35	; 0x23
    536a:	2210      	movs	r2, #16
    536c:	18ba      	adds	r2, r7, r2
    536e:	18d4      	adds	r4, r2, r3
    5370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5372:	0018      	movs	r0, r3
    5374:	4bc0      	ldr	r3, [pc, #768]	; (5678 <_i2c_master_set_config+0x340>)
    5376:	4798      	blx	r3
    5378:	0003      	movs	r3, r0
    537a:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    537c:	230c      	movs	r3, #12
    537e:	2210      	movs	r2, #16
    5380:	4694      	mov	ip, r2
    5382:	44bc      	add	ip, r7
    5384:	4463      	add	r3, ip
    5386:	0018      	movs	r0, r3
    5388:	4bbc      	ldr	r3, [pc, #752]	; (567c <_i2c_master_set_config+0x344>)
    538a:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
    538c:	693b      	ldr	r3, [r7, #16]
    538e:	69db      	ldr	r3, [r3, #28]
    5390:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
    5392:	693b      	ldr	r3, [r7, #16]
    5394:	6a1b      	ldr	r3, [r3, #32]
    5396:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
    5398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    539a:	2b00      	cmp	r3, #0
    539c:	d106      	bne.n	53ac <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    539e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    53a0:	2100      	movs	r1, #0
    53a2:	0018      	movs	r0, r3
    53a4:	4bb6      	ldr	r3, [pc, #728]	; (5680 <_i2c_master_set_config+0x348>)
    53a6:	4798      	blx	r3
    53a8:	0003      	movs	r3, r0
    53aa:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
    53ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    53ae:	b2da      	uxtb	r2, r3
    53b0:	230c      	movs	r3, #12
    53b2:	2110      	movs	r1, #16
    53b4:	468c      	mov	ip, r1
    53b6:	44bc      	add	ip, r7
    53b8:	4463      	add	r3, ip
    53ba:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    53bc:	230c      	movs	r3, #12
    53be:	2210      	movs	r2, #16
    53c0:	4694      	mov	ip, r2
    53c2:	44bc      	add	ip, r7
    53c4:	4463      	add	r3, ip
    53c6:	2202      	movs	r2, #2
    53c8:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    53ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    53cc:	0c1b      	lsrs	r3, r3, #16
    53ce:	b2db      	uxtb	r3, r3
    53d0:	220c      	movs	r2, #12
    53d2:	2110      	movs	r1, #16
    53d4:	468c      	mov	ip, r1
    53d6:	44bc      	add	ip, r7
    53d8:	4462      	add	r2, ip
    53da:	0011      	movs	r1, r2
    53dc:	0018      	movs	r0, r3
    53de:	4ba9      	ldr	r3, [pc, #676]	; (5684 <_i2c_master_set_config+0x34c>)
    53e0:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
    53e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    53e4:	2b00      	cmp	r3, #0
    53e6:	d106      	bne.n	53f6 <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    53e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    53ea:	2101      	movs	r1, #1
    53ec:	0018      	movs	r0, r3
    53ee:	4ba4      	ldr	r3, [pc, #656]	; (5680 <_i2c_master_set_config+0x348>)
    53f0:	4798      	blx	r3
    53f2:	0003      	movs	r3, r0
    53f4:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
    53f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    53f8:	b2da      	uxtb	r2, r3
    53fa:	230c      	movs	r3, #12
    53fc:	2110      	movs	r1, #16
    53fe:	468c      	mov	ip, r1
    5400:	44bc      	add	ip, r7
    5402:	4463      	add	r3, ip
    5404:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    5406:	230c      	movs	r3, #12
    5408:	2210      	movs	r2, #16
    540a:	4694      	mov	ip, r2
    540c:	44bc      	add	ip, r7
    540e:	4463      	add	r3, ip
    5410:	2202      	movs	r2, #2
    5412:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    5414:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5416:	0c1b      	lsrs	r3, r3, #16
    5418:	b2db      	uxtb	r3, r3
    541a:	220c      	movs	r2, #12
    541c:	2110      	movs	r1, #16
    541e:	468c      	mov	ip, r1
    5420:	44bc      	add	ip, r7
    5422:	4462      	add	r2, ip
    5424:	0011      	movs	r1, r2
    5426:	0018      	movs	r0, r3
    5428:	4b96      	ldr	r3, [pc, #600]	; (5684 <_i2c_master_set_config+0x34c>)
    542a:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    542c:	693b      	ldr	r3, [r7, #16]
    542e:	8a9a      	ldrh	r2, [r3, #20]
    5430:	697b      	ldr	r3, [r7, #20]
    5432:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
    5434:	693b      	ldr	r3, [r7, #16]
    5436:	8ada      	ldrh	r2, [r3, #22]
    5438:	697b      	ldr	r3, [r7, #20]
    543a:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    543c:	693b      	ldr	r3, [r7, #16]
    543e:	7e1b      	ldrb	r3, [r3, #24]
    5440:	2b00      	cmp	r3, #0
    5442:	d103      	bne.n	544c <_i2c_master_set_config+0x114>
    5444:	4b90      	ldr	r3, [pc, #576]	; (5688 <_i2c_master_set_config+0x350>)
    5446:	4798      	blx	r3
    5448:	1e03      	subs	r3, r0, #0
    544a:	d002      	beq.n	5452 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    544c:	2380      	movs	r3, #128	; 0x80
    544e:	657b      	str	r3, [r7, #84]	; 0x54
    5450:	e001      	b.n	5456 <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
    5452:	2300      	movs	r3, #0
    5454:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
    5456:	693b      	ldr	r3, [r7, #16]
    5458:	691b      	ldr	r3, [r3, #16]
    545a:	2b00      	cmp	r3, #0
    545c:	d004      	beq.n	5468 <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
    545e:	693b      	ldr	r3, [r7, #16]
    5460:	691b      	ldr	r3, [r3, #16]
    5462:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    5464:	4313      	orrs	r3, r2
    5466:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
    5468:	693b      	ldr	r3, [r7, #16]
    546a:	689b      	ldr	r3, [r3, #8]
    546c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    546e:	4313      	orrs	r3, r2
    5470:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
    5472:	693b      	ldr	r3, [r7, #16]
    5474:	2224      	movs	r2, #36	; 0x24
    5476:	5c9b      	ldrb	r3, [r3, r2]
    5478:	2b00      	cmp	r3, #0
    547a:	d004      	beq.n	5486 <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    547c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    547e:	2280      	movs	r2, #128	; 0x80
    5480:	05d2      	lsls	r2, r2, #23
    5482:	4313      	orrs	r3, r2
    5484:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
    5486:	693b      	ldr	r3, [r7, #16]
    5488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    548a:	2b00      	cmp	r3, #0
    548c:	d004      	beq.n	5498 <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
    548e:	693b      	ldr	r3, [r7, #16]
    5490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5492:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    5494:	4313      	orrs	r3, r2
    5496:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    5498:	693b      	ldr	r3, [r7, #16]
    549a:	222c      	movs	r2, #44	; 0x2c
    549c:	5c9b      	ldrb	r3, [r3, r2]
    549e:	2b00      	cmp	r3, #0
    54a0:	d105      	bne.n	54ae <_i2c_master_set_config+0x176>
    54a2:	693b      	ldr	r3, [r7, #16]
    54a4:	689a      	ldr	r2, [r3, #8]
    54a6:	2380      	movs	r3, #128	; 0x80
    54a8:	049b      	lsls	r3, r3, #18
    54aa:	429a      	cmp	r2, r3
    54ac:	d104      	bne.n	54b8 <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    54ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    54b0:	2280      	movs	r2, #128	; 0x80
    54b2:	0512      	lsls	r2, r2, #20
    54b4:	4313      	orrs	r3, r2
    54b6:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
    54b8:	693b      	ldr	r3, [r7, #16]
    54ba:	222d      	movs	r2, #45	; 0x2d
    54bc:	5c9b      	ldrb	r3, [r3, r2]
    54be:	2b00      	cmp	r3, #0
    54c0:	d004      	beq.n	54cc <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    54c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    54c4:	2280      	movs	r2, #128	; 0x80
    54c6:	0412      	lsls	r2, r2, #16
    54c8:	4313      	orrs	r3, r2
    54ca:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
    54cc:	693b      	ldr	r3, [r7, #16]
    54ce:	222e      	movs	r2, #46	; 0x2e
    54d0:	5c9b      	ldrb	r3, [r3, r2]
    54d2:	2b00      	cmp	r3, #0
    54d4:	d004      	beq.n	54e0 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    54d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    54d8:	2280      	movs	r2, #128	; 0x80
    54da:	03d2      	lsls	r2, r2, #15
    54dc:	4313      	orrs	r3, r2
    54de:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
    54e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    54e2:	681a      	ldr	r2, [r3, #0]
    54e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    54e6:	431a      	orrs	r2, r3
    54e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    54ea:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    54ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    54ee:	2280      	movs	r2, #128	; 0x80
    54f0:	0052      	lsls	r2, r2, #1
    54f2:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    54f4:	2323      	movs	r3, #35	; 0x23
    54f6:	2210      	movs	r2, #16
    54f8:	4694      	mov	ip, r2
    54fa:	44bc      	add	ip, r7
    54fc:	4463      	add	r3, ip
    54fe:	781b      	ldrb	r3, [r3, #0]
    5500:	3312      	adds	r3, #18
    5502:	b2db      	uxtb	r3, r3
    5504:	0018      	movs	r0, r3
    5506:	4b61      	ldr	r3, [pc, #388]	; (568c <_i2c_master_set_config+0x354>)
    5508:	4798      	blx	r3
    550a:	0003      	movs	r3, r0
    550c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
    550e:	693b      	ldr	r3, [r7, #16]
    5510:	681b      	ldr	r3, [r3, #0]
    5512:	22fa      	movs	r2, #250	; 0xfa
    5514:	0092      	lsls	r2, r2, #2
    5516:	4353      	muls	r3, r2
    5518:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    551a:	693b      	ldr	r3, [r7, #16]
    551c:	685b      	ldr	r3, [r3, #4]
    551e:	22fa      	movs	r2, #250	; 0xfa
    5520:	0092      	lsls	r2, r2, #2
    5522:	4353      	muls	r3, r2
    5524:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
    5526:	693b      	ldr	r3, [r7, #16]
    5528:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    552a:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
    552c:	4b58      	ldr	r3, [pc, #352]	; (5690 <_i2c_master_set_config+0x358>)
    552e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    5530:	4798      	blx	r3
    5532:	0005      	movs	r5, r0
    5534:	000e      	movs	r6, r1
    5536:	4b56      	ldr	r3, [pc, #344]	; (5690 <_i2c_master_set_config+0x358>)
    5538:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    553a:	4798      	blx	r3
    553c:	60b8      	str	r0, [r7, #8]
    553e:	60f9      	str	r1, [r7, #12]
    5540:	4b53      	ldr	r3, [pc, #332]	; (5690 <_i2c_master_set_config+0x358>)
    5542:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    5544:	4798      	blx	r3
    5546:	4c53      	ldr	r4, [pc, #332]	; (5694 <_i2c_master_set_config+0x35c>)
    5548:	4a53      	ldr	r2, [pc, #332]	; (5698 <_i2c_master_set_config+0x360>)
    554a:	4b54      	ldr	r3, [pc, #336]	; (569c <_i2c_master_set_config+0x364>)
    554c:	47a0      	blx	r4
    554e:	0003      	movs	r3, r0
    5550:	000c      	movs	r4, r1
    5552:	603b      	str	r3, [r7, #0]
    5554:	607c      	str	r4, [r7, #4]
    5556:	4b4e      	ldr	r3, [pc, #312]	; (5690 <_i2c_master_set_config+0x358>)
    5558:	6a38      	ldr	r0, [r7, #32]
    555a:	4798      	blx	r3
    555c:	0002      	movs	r2, r0
    555e:	000b      	movs	r3, r1
    5560:	4c4c      	ldr	r4, [pc, #304]	; (5694 <_i2c_master_set_config+0x35c>)
    5562:	6838      	ldr	r0, [r7, #0]
    5564:	6879      	ldr	r1, [r7, #4]
    5566:	47a0      	blx	r4
    5568:	0003      	movs	r3, r0
    556a:	000c      	movs	r4, r1
    556c:	0018      	movs	r0, r3
    556e:	0021      	movs	r1, r4
    5570:	4c4b      	ldr	r4, [pc, #300]	; (56a0 <_i2c_master_set_config+0x368>)
    5572:	2200      	movs	r2, #0
    5574:	4b4b      	ldr	r3, [pc, #300]	; (56a4 <_i2c_master_set_config+0x36c>)
    5576:	47a0      	blx	r4
    5578:	0003      	movs	r3, r0
    557a:	000c      	movs	r4, r1
    557c:	001a      	movs	r2, r3
    557e:	0023      	movs	r3, r4
    5580:	4c44      	ldr	r4, [pc, #272]	; (5694 <_i2c_master_set_config+0x35c>)
    5582:	68b8      	ldr	r0, [r7, #8]
    5584:	68f9      	ldr	r1, [r7, #12]
    5586:	47a0      	blx	r4
    5588:	0003      	movs	r3, r0
    558a:	000c      	movs	r4, r1
    558c:	001a      	movs	r2, r3
    558e:	0023      	movs	r3, r4
    5590:	4c45      	ldr	r4, [pc, #276]	; (56a8 <_i2c_master_set_config+0x370>)
    5592:	0028      	movs	r0, r5
    5594:	0031      	movs	r1, r6
    5596:	47a0      	blx	r4
    5598:	0003      	movs	r3, r0
    559a:	000c      	movs	r4, r1
    559c:	001d      	movs	r5, r3
    559e:	0026      	movs	r6, r4
    55a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    55a2:	005a      	lsls	r2, r3, #1
    55a4:	4b3a      	ldr	r3, [pc, #232]	; (5690 <_i2c_master_set_config+0x358>)
    55a6:	0010      	movs	r0, r2
    55a8:	4798      	blx	r3
    55aa:	0002      	movs	r2, r0
    55ac:	000b      	movs	r3, r1
    55ae:	4c3c      	ldr	r4, [pc, #240]	; (56a0 <_i2c_master_set_config+0x368>)
    55b0:	0028      	movs	r0, r5
    55b2:	0031      	movs	r1, r6
    55b4:	47a0      	blx	r4
    55b6:	0003      	movs	r3, r0
    55b8:	000c      	movs	r4, r1
    55ba:	0018      	movs	r0, r3
    55bc:	0021      	movs	r1, r4
    55be:	4c3a      	ldr	r4, [pc, #232]	; (56a8 <_i2c_master_set_config+0x370>)
    55c0:	2200      	movs	r2, #0
    55c2:	4b3a      	ldr	r3, [pc, #232]	; (56ac <_i2c_master_set_config+0x374>)
    55c4:	47a0      	blx	r4
    55c6:	0003      	movs	r3, r0
    55c8:	000c      	movs	r4, r1
    55ca:	001d      	movs	r5, r3
    55cc:	0026      	movs	r6, r4
    55ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
    55d0:	005a      	lsls	r2, r3, #1
    55d2:	4b2f      	ldr	r3, [pc, #188]	; (5690 <_i2c_master_set_config+0x358>)
    55d4:	0010      	movs	r0, r2
    55d6:	4798      	blx	r3
    55d8:	0002      	movs	r2, r0
    55da:	000b      	movs	r3, r1
    55dc:	4c34      	ldr	r4, [pc, #208]	; (56b0 <_i2c_master_set_config+0x378>)
    55de:	0028      	movs	r0, r5
    55e0:	0031      	movs	r1, r6
    55e2:	47a0      	blx	r4
    55e4:	0003      	movs	r3, r0
    55e6:	000c      	movs	r4, r1
    55e8:	0019      	movs	r1, r3
    55ea:	0022      	movs	r2, r4
    55ec:	4b31      	ldr	r3, [pc, #196]	; (56b4 <_i2c_master_set_config+0x37c>)
    55ee:	0008      	movs	r0, r1
    55f0:	0011      	movs	r1, r2
    55f2:	4798      	blx	r3
    55f4:	0003      	movs	r3, r0
    55f6:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    55f8:	693b      	ldr	r3, [r7, #16]
    55fa:	689a      	ldr	r2, [r3, #8]
    55fc:	2380      	movs	r3, #128	; 0x80
    55fe:	049b      	lsls	r3, r3, #18
    5600:	429a      	cmp	r2, r3
    5602:	d16a      	bne.n	56da <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    5604:	4b22      	ldr	r3, [pc, #136]	; (5690 <_i2c_master_set_config+0x358>)
    5606:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    5608:	4798      	blx	r3
    560a:	4c25      	ldr	r4, [pc, #148]	; (56a0 <_i2c_master_set_config+0x368>)
    560c:	0002      	movs	r2, r0
    560e:	000b      	movs	r3, r1
    5610:	47a0      	blx	r4
    5612:	0003      	movs	r3, r0
    5614:	000c      	movs	r4, r1
    5616:	001d      	movs	r5, r3
    5618:	0026      	movs	r6, r4
    561a:	4b1d      	ldr	r3, [pc, #116]	; (5690 <_i2c_master_set_config+0x358>)
    561c:	6a78      	ldr	r0, [r7, #36]	; 0x24
    561e:	4798      	blx	r3
    5620:	4c1c      	ldr	r4, [pc, #112]	; (5694 <_i2c_master_set_config+0x35c>)
    5622:	2200      	movs	r2, #0
    5624:	4b24      	ldr	r3, [pc, #144]	; (56b8 <_i2c_master_set_config+0x380>)
    5626:	47a0      	blx	r4
    5628:	0003      	movs	r3, r0
    562a:	000c      	movs	r4, r1
    562c:	001a      	movs	r2, r3
    562e:	0023      	movs	r3, r4
    5630:	4c1f      	ldr	r4, [pc, #124]	; (56b0 <_i2c_master_set_config+0x378>)
    5632:	0028      	movs	r0, r5
    5634:	0031      	movs	r1, r6
    5636:	47a0      	blx	r4
    5638:	0003      	movs	r3, r0
    563a:	000c      	movs	r4, r1
    563c:	0018      	movs	r0, r3
    563e:	0021      	movs	r1, r4
    5640:	4c19      	ldr	r4, [pc, #100]	; (56a8 <_i2c_master_set_config+0x370>)
    5642:	2200      	movs	r2, #0
    5644:	4b19      	ldr	r3, [pc, #100]	; (56ac <_i2c_master_set_config+0x374>)
    5646:	47a0      	blx	r4
    5648:	0003      	movs	r3, r0
    564a:	000c      	movs	r4, r1
    564c:	0019      	movs	r1, r3
    564e:	0022      	movs	r2, r4
    5650:	4b18      	ldr	r3, [pc, #96]	; (56b4 <_i2c_master_set_config+0x37c>)
    5652:	0008      	movs	r0, r1
    5654:	0011      	movs	r1, r2
    5656:	4798      	blx	r3
    5658:	0003      	movs	r3, r0
    565a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
    565c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    565e:	2b00      	cmp	r3, #0
    5660:	d02e      	beq.n	56c0 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    5662:	4b16      	ldr	r3, [pc, #88]	; (56bc <_i2c_master_set_config+0x384>)
    5664:	6a79      	ldr	r1, [r7, #36]	; 0x24
    5666:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    5668:	4798      	blx	r3
    566a:	0003      	movs	r3, r0
    566c:	1e9a      	subs	r2, r3, #2
    566e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5670:	1ad3      	subs	r3, r2, r3
    5672:	653b      	str	r3, [r7, #80]	; 0x50
    5674:	e031      	b.n	56da <_i2c_master_set_config+0x3a2>
    5676:	46c0      	nop			; (mov r8, r8)
    5678:	00015439 	.word	0x00015439
    567c:	000052a9 	.word	0x000052a9
    5680:	0001527d 	.word	0x0001527d
    5684:	00016235 	.word	0x00016235
    5688:	000052d1 	.word	0x000052d1
    568c:	00016071 	.word	0x00016071
    5690:	00020d29 	.word	0x00020d29
    5694:	000200d1 	.word	0x000200d1
    5698:	e826d695 	.word	0xe826d695
    569c:	3e112e0b 	.word	0x3e112e0b
    56a0:	0001f249 	.word	0x0001f249
    56a4:	40240000 	.word	0x40240000
    56a8:	000205d1 	.word	0x000205d1
    56ac:	3ff00000 	.word	0x3ff00000
    56b0:	0001f869 	.word	0x0001f869
    56b4:	00020c3d 	.word	0x00020c3d
    56b8:	40080000 	.word	0x40080000
    56bc:	0001df49 	.word	0x0001df49
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    56c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    56c2:	005a      	lsls	r2, r3, #1
    56c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    56c6:	18d3      	adds	r3, r2, r3
    56c8:	1e5a      	subs	r2, r3, #1
    56ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    56cc:	0059      	lsls	r1, r3, #1
    56ce:	4b1d      	ldr	r3, [pc, #116]	; (5744 <_i2c_master_set_config+0x40c>)
    56d0:	0010      	movs	r0, r2
    56d2:	4798      	blx	r3
    56d4:	0003      	movs	r3, r0
    56d6:	3b01      	subs	r3, #1
    56d8:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    56da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    56dc:	2bff      	cmp	r3, #255	; 0xff
    56de:	dc08      	bgt.n	56f2 <_i2c_master_set_config+0x3ba>
    56e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    56e2:	2b00      	cmp	r3, #0
    56e4:	db05      	blt.n	56f2 <_i2c_master_set_config+0x3ba>
    56e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    56e8:	2bff      	cmp	r3, #255	; 0xff
    56ea:	dc02      	bgt.n	56f2 <_i2c_master_set_config+0x3ba>
    56ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    56ee:	2b00      	cmp	r3, #0
    56f0:	da06      	bge.n	5700 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
    56f2:	233b      	movs	r3, #59	; 0x3b
    56f4:	2210      	movs	r2, #16
    56f6:	4694      	mov	ip, r2
    56f8:	44bc      	add	ip, r7
    56fa:	4463      	add	r3, ip
    56fc:	2240      	movs	r2, #64	; 0x40
    56fe:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
    5700:	233b      	movs	r3, #59	; 0x3b
    5702:	2210      	movs	r2, #16
    5704:	4694      	mov	ip, r2
    5706:	44bc      	add	ip, r7
    5708:	4463      	add	r3, ip
    570a:	781b      	ldrb	r3, [r3, #0]
    570c:	2b40      	cmp	r3, #64	; 0x40
    570e:	d00e      	beq.n	572e <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    5710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5712:	22ff      	movs	r2, #255	; 0xff
    5714:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    5716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    5718:	041b      	lsls	r3, r3, #16
    571a:	0019      	movs	r1, r3
    571c:	23ff      	movs	r3, #255	; 0xff
    571e:	041b      	lsls	r3, r3, #16
    5720:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    5722:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    5724:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    5726:	0612      	lsls	r2, r2, #24
    5728:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    572a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    572c:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
    572e:	233b      	movs	r3, #59	; 0x3b
    5730:	2210      	movs	r2, #16
    5732:	4694      	mov	ip, r2
    5734:	44bc      	add	ip, r7
    5736:	4463      	add	r3, ip
    5738:	781b      	ldrb	r3, [r3, #0]
}
    573a:	0018      	movs	r0, r3
    573c:	46bd      	mov	sp, r7
    573e:	b017      	add	sp, #92	; 0x5c
    5740:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5742:	46c0      	nop			; (mov r8, r8)
    5744:	0001df49 	.word	0x0001df49

00005748 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    5748:	b590      	push	{r4, r7, lr}
    574a:	b08b      	sub	sp, #44	; 0x2c
    574c:	af00      	add	r7, sp, #0
    574e:	60f8      	str	r0, [r7, #12]
    5750:	60b9      	str	r1, [r7, #8]
    5752:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    5754:	68fb      	ldr	r3, [r7, #12]
    5756:	68ba      	ldr	r2, [r7, #8]
    5758:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    575a:	68fb      	ldr	r3, [r7, #12]
    575c:	681b      	ldr	r3, [r3, #0]
    575e:	61fb      	str	r3, [r7, #28]

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5760:	68fb      	ldr	r3, [r7, #12]
    5762:	681b      	ldr	r3, [r3, #0]
    5764:	0018      	movs	r0, r3
    5766:	4b44      	ldr	r3, [pc, #272]	; (5878 <i2c_master_init+0x130>)
    5768:	4798      	blx	r3
    576a:	0003      	movs	r3, r0
    576c:	61bb      	str	r3, [r7, #24]

#if (SAML22) || (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
    576e:	69bb      	ldr	r3, [r7, #24]
    5770:	2b05      	cmp	r3, #5
    5772:	d104      	bne.n	577e <i2c_master_init+0x36>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    5774:	2301      	movs	r3, #1
    5776:	627b      	str	r3, [r7, #36]	; 0x24
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    5778:	2318      	movs	r3, #24
    577a:	623b      	str	r3, [r7, #32]
    577c:	e004      	b.n	5788 <i2c_master_init+0x40>
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    577e:	69bb      	ldr	r3, [r7, #24]
    5780:	627b      	str	r3, [r7, #36]	; 0x24
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5782:	69bb      	ldr	r3, [r7, #24]
    5784:	3312      	adds	r3, #18
    5786:	623b      	str	r3, [r7, #32]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	/* Turn on module in PM */
#if (SAML21) || (SAMR30)
	if (sercom_index == 5) {
    5788:	69bb      	ldr	r3, [r7, #24]
    578a:	2b05      	cmp	r3, #5
    578c:	d108      	bne.n	57a0 <i2c_master_init+0x58>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    578e:	2201      	movs	r2, #1
    5790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5792:	409a      	lsls	r2, r3
    5794:	0013      	movs	r3, r2
    5796:	0019      	movs	r1, r3
    5798:	2003      	movs	r0, #3
    579a:	4b38      	ldr	r3, [pc, #224]	; (587c <i2c_master_init+0x134>)
    579c:	4798      	blx	r3
    579e:	e007      	b.n	57b0 <i2c_master_init+0x68>
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    57a0:	2201      	movs	r2, #1
    57a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    57a4:	409a      	lsls	r2, r3
    57a6:	0013      	movs	r3, r2
    57a8:	0019      	movs	r1, r3
    57aa:	2002      	movs	r0, #2
    57ac:	4b33      	ldr	r3, [pc, #204]	; (587c <i2c_master_init+0x134>)
    57ae:	4798      	blx	r3
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    57b0:	2314      	movs	r3, #20
    57b2:	18fb      	adds	r3, r7, r3
    57b4:	0018      	movs	r0, r3
    57b6:	4b32      	ldr	r3, [pc, #200]	; (5880 <i2c_master_init+0x138>)
    57b8:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    57ba:	687b      	ldr	r3, [r7, #4]
    57bc:	7b1a      	ldrb	r2, [r3, #12]
    57be:	2314      	movs	r3, #20
    57c0:	18fb      	adds	r3, r7, r3
    57c2:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    57c4:	6a3b      	ldr	r3, [r7, #32]
    57c6:	b2db      	uxtb	r3, r3
    57c8:	2214      	movs	r2, #20
    57ca:	18ba      	adds	r2, r7, r2
    57cc:	0011      	movs	r1, r2
    57ce:	0018      	movs	r0, r3
    57d0:	4b2c      	ldr	r3, [pc, #176]	; (5884 <i2c_master_init+0x13c>)
    57d2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    57d4:	6a3b      	ldr	r3, [r7, #32]
    57d6:	b2db      	uxtb	r3, r3
    57d8:	0018      	movs	r0, r3
    57da:	4b2b      	ldr	r3, [pc, #172]	; (5888 <i2c_master_init+0x140>)
    57dc:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    57de:	687b      	ldr	r3, [r7, #4]
    57e0:	7b1b      	ldrb	r3, [r3, #12]
    57e2:	2100      	movs	r1, #0
    57e4:	0018      	movs	r0, r3
    57e6:	4b29      	ldr	r3, [pc, #164]	; (588c <i2c_master_init+0x144>)
    57e8:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    57ea:	69fb      	ldr	r3, [r7, #28]
    57ec:	681b      	ldr	r3, [r3, #0]
    57ee:	2202      	movs	r2, #2
    57f0:	4013      	ands	r3, r2
    57f2:	d001      	beq.n	57f8 <i2c_master_init+0xb0>
		return STATUS_ERR_DENIED;
    57f4:	231c      	movs	r3, #28
    57f6:	e03b      	b.n	5870 <i2c_master_init+0x128>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    57f8:	69fb      	ldr	r3, [r7, #28]
    57fa:	681b      	ldr	r3, [r3, #0]
    57fc:	2201      	movs	r2, #1
    57fe:	4013      	ands	r3, r2
    5800:	d001      	beq.n	5806 <i2c_master_init+0xbe>
		return STATUS_BUSY;
    5802:	2305      	movs	r3, #5
    5804:	e034      	b.n	5870 <i2c_master_init+0x128>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    5806:	68fb      	ldr	r3, [r7, #12]
    5808:	681b      	ldr	r3, [r3, #0]
    580a:	2217      	movs	r2, #23
    580c:	18bc      	adds	r4, r7, r2
    580e:	0018      	movs	r0, r3
    5810:	4b19      	ldr	r3, [pc, #100]	; (5878 <i2c_master_init+0x130>)
    5812:	4798      	blx	r3
    5814:	0003      	movs	r3, r0
    5816:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    5818:	4a1d      	ldr	r2, [pc, #116]	; (5890 <i2c_master_init+0x148>)
    581a:	2317      	movs	r3, #23
    581c:	18fb      	adds	r3, r7, r3
    581e:	781b      	ldrb	r3, [r3, #0]
    5820:	0011      	movs	r1, r2
    5822:	0018      	movs	r0, r3
    5824:	4b1b      	ldr	r3, [pc, #108]	; (5894 <i2c_master_init+0x14c>)
    5826:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    5828:	2317      	movs	r3, #23
    582a:	18fb      	adds	r3, r7, r3
    582c:	781a      	ldrb	r2, [r3, #0]
    582e:	4b1a      	ldr	r3, [pc, #104]	; (5898 <i2c_master_init+0x150>)
    5830:	0092      	lsls	r2, r2, #2
    5832:	68f9      	ldr	r1, [r7, #12]
    5834:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
    5836:	68fb      	ldr	r3, [r7, #12]
    5838:	2200      	movs	r2, #0
    583a:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
    583c:	68fb      	ldr	r3, [r7, #12]
    583e:	2200      	movs	r2, #0
    5840:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
    5842:	68fb      	ldr	r3, [r7, #12]
    5844:	2200      	movs	r2, #0
    5846:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
    5848:	68fb      	ldr	r3, [r7, #12]
    584a:	2200      	movs	r2, #0
    584c:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
    584e:	68fb      	ldr	r3, [r7, #12]
    5850:	2225      	movs	r2, #37	; 0x25
    5852:	2100      	movs	r1, #0
    5854:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
    5856:	68fb      	ldr	r3, [r7, #12]
    5858:	2200      	movs	r2, #0
    585a:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    585c:	69fb      	ldr	r3, [r7, #28]
    585e:	2214      	movs	r2, #20
    5860:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
    5862:	687a      	ldr	r2, [r7, #4]
    5864:	68fb      	ldr	r3, [r7, #12]
    5866:	0011      	movs	r1, r2
    5868:	0018      	movs	r0, r3
    586a:	4b0c      	ldr	r3, [pc, #48]	; (589c <i2c_master_init+0x154>)
    586c:	4798      	blx	r3
    586e:	0003      	movs	r3, r0
}
    5870:	0018      	movs	r0, r3
    5872:	46bd      	mov	sp, r7
    5874:	b00b      	add	sp, #44	; 0x2c
    5876:	bd90      	pop	{r4, r7, pc}
    5878:	00015439 	.word	0x00015439
    587c:	0000522d 	.word	0x0000522d
    5880:	00005215 	.word	0x00005215
    5884:	00015f81 	.word	0x00015f81
    5888:	00015fc1 	.word	0x00015fc1
    588c:	000151f1 	.word	0x000151f1
    5890:	0000608d 	.word	0x0000608d
    5894:	00006315 	.word	0x00006315
    5898:	20001224 	.word	0x20001224
    589c:	00005339 	.word	0x00005339

000058a0 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
    58a0:	b580      	push	{r7, lr}
    58a2:	b084      	sub	sp, #16
    58a4:	af00      	add	r7, sp, #0
    58a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    58a8:	687b      	ldr	r3, [r7, #4]
    58aa:	681b      	ldr	r3, [r3, #0]
    58ac:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    58ae:	68fb      	ldr	r3, [r7, #12]
    58b0:	7e1b      	ldrb	r3, [r3, #24]
    58b2:	b2db      	uxtb	r3, r3
    58b4:	001a      	movs	r2, r3
    58b6:	2302      	movs	r3, #2
    58b8:	4013      	ands	r3, r2
    58ba:	d00b      	beq.n	58d4 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    58bc:	68fb      	ldr	r3, [r7, #12]
    58be:	2202      	movs	r2, #2
    58c0:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    58c2:	68fb      	ldr	r3, [r7, #12]
    58c4:	8b5b      	ldrh	r3, [r3, #26]
    58c6:	b29b      	uxth	r3, r3
    58c8:	001a      	movs	r2, r3
    58ca:	2302      	movs	r3, #2
    58cc:	4013      	ands	r3, r2
    58ce:	d011      	beq.n	58f4 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    58d0:	2341      	movs	r3, #65	; 0x41
    58d2:	e010      	b.n	58f6 <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    58d4:	68fb      	ldr	r3, [r7, #12]
    58d6:	8b5b      	ldrh	r3, [r3, #26]
    58d8:	b29b      	uxth	r3, r3
    58da:	001a      	movs	r2, r3
    58dc:	2304      	movs	r3, #4
    58de:	4013      	ands	r3, r2
    58e0:	d008      	beq.n	58f4 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    58e2:	68fb      	ldr	r3, [r7, #12]
    58e4:	685b      	ldr	r3, [r3, #4]
    58e6:	22c0      	movs	r2, #192	; 0xc0
    58e8:	0292      	lsls	r2, r2, #10
    58ea:	431a      	orrs	r2, r3
    58ec:	68fb      	ldr	r3, [r7, #12]
    58ee:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
    58f0:	2318      	movs	r3, #24
    58f2:	e000      	b.n	58f6 <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
    58f4:	2300      	movs	r3, #0
}
    58f6:	0018      	movs	r0, r3
    58f8:	46bd      	mov	sp, r7
    58fa:	b004      	add	sp, #16
    58fc:	bd80      	pop	{r7, pc}

000058fe <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    58fe:	b580      	push	{r7, lr}
    5900:	b084      	sub	sp, #16
    5902:	af00      	add	r7, sp, #0
    5904:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5906:	687b      	ldr	r3, [r7, #4]
    5908:	681b      	ldr	r3, [r3, #0]
    590a:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    590c:	230e      	movs	r3, #14
    590e:	18fb      	adds	r3, r7, r3
    5910:	2200      	movs	r2, #0
    5912:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    5914:	e00f      	b.n	5936 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    5916:	230e      	movs	r3, #14
    5918:	18fb      	adds	r3, r7, r3
    591a:	220e      	movs	r2, #14
    591c:	18ba      	adds	r2, r7, r2
    591e:	8812      	ldrh	r2, [r2, #0]
    5920:	3201      	adds	r2, #1
    5922:	801a      	strh	r2, [r3, #0]
    5924:	687b      	ldr	r3, [r7, #4]
    5926:	891b      	ldrh	r3, [r3, #8]
    5928:	220e      	movs	r2, #14
    592a:	18ba      	adds	r2, r7, r2
    592c:	8812      	ldrh	r2, [r2, #0]
    592e:	429a      	cmp	r2, r3
    5930:	d301      	bcc.n	5936 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
    5932:	2312      	movs	r3, #18
    5934:	e00e      	b.n	5954 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    5936:	68bb      	ldr	r3, [r7, #8]
    5938:	7e1b      	ldrb	r3, [r3, #24]
    593a:	b2db      	uxtb	r3, r3
    593c:	001a      	movs	r2, r3
    593e:	2301      	movs	r3, #1
    5940:	4013      	ands	r3, r2
    5942:	d106      	bne.n	5952 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    5944:	68bb      	ldr	r3, [r7, #8]
    5946:	7e1b      	ldrb	r3, [r3, #24]
    5948:	b2db      	uxtb	r3, r3
    594a:	001a      	movs	r2, r3
    594c:	2302      	movs	r3, #2
    594e:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    5950:	d0e1      	beq.n	5916 <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
    5952:	2300      	movs	r3, #0
}
    5954:	0018      	movs	r0, r3
    5956:	46bd      	mov	sp, r7
    5958:	b004      	add	sp, #16
    595a:	bd80      	pop	{r7, pc}

0000595c <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    595c:	b590      	push	{r4, r7, lr}
    595e:	b085      	sub	sp, #20
    5960:	af00      	add	r7, sp, #0
    5962:	6078      	str	r0, [r7, #4]
    5964:	000a      	movs	r2, r1
    5966:	1cfb      	adds	r3, r7, #3
    5968:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    596a:	687b      	ldr	r3, [r7, #4]
    596c:	681b      	ldr	r3, [r3, #0]
    596e:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5970:	68fb      	ldr	r3, [r7, #12]
    5972:	685b      	ldr	r3, [r3, #4]
    5974:	2280      	movs	r2, #128	; 0x80
    5976:	02d2      	lsls	r2, r2, #11
    5978:	431a      	orrs	r2, r3
    597a:	68fb      	ldr	r3, [r7, #12]
    597c:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    597e:	1cfb      	adds	r3, r7, #3
    5980:	781a      	ldrb	r2, [r3, #0]
    5982:	68fb      	ldr	r3, [r7, #12]
    5984:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    5986:	230b      	movs	r3, #11
    5988:	18fc      	adds	r4, r7, r3
    598a:	687b      	ldr	r3, [r7, #4]
    598c:	0018      	movs	r0, r3
    598e:	4b07      	ldr	r3, [pc, #28]	; (59ac <_i2c_master_send_hs_master_code+0x50>)
    5990:	4798      	blx	r3
    5992:	0003      	movs	r3, r0
    5994:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    5996:	68fb      	ldr	r3, [r7, #12]
    5998:	2201      	movs	r2, #1
    599a:	761a      	strb	r2, [r3, #24]

	return tmp_status;
    599c:	230b      	movs	r3, #11
    599e:	18fb      	adds	r3, r7, r3
    59a0:	781b      	ldrb	r3, [r3, #0]
}
    59a2:	0018      	movs	r0, r3
    59a4:	46bd      	mov	sp, r7
    59a6:	b005      	add	sp, #20
    59a8:	bd90      	pop	{r4, r7, pc}
    59aa:	46c0      	nop			; (mov r8, r8)
    59ac:	000058ff 	.word	0x000058ff

000059b0 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    59b0:	b590      	push	{r4, r7, lr}
    59b2:	b087      	sub	sp, #28
    59b4:	af00      	add	r7, sp, #0
    59b6:	6078      	str	r0, [r7, #4]
    59b8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    59ba:	687b      	ldr	r3, [r7, #4]
    59bc:	681b      	ldr	r3, [r3, #0]
    59be:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    59c0:	2314      	movs	r3, #20
    59c2:	18fb      	adds	r3, r7, r3
    59c4:	683a      	ldr	r2, [r7, #0]
    59c6:	8852      	ldrh	r2, [r2, #2]
    59c8:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
    59ca:	2312      	movs	r3, #18
    59cc:	18fb      	adds	r3, r7, r3
    59ce:	2200      	movs	r2, #0
    59d0:	801a      	strh	r2, [r3, #0]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    59d2:	68fb      	ldr	r3, [r7, #12]
    59d4:	681b      	ldr	r3, [r3, #0]
    59d6:	011b      	lsls	r3, r3, #4
    59d8:	0fdb      	lsrs	r3, r3, #31
    59da:	b2db      	uxtb	r3, r3
    59dc:	001a      	movs	r2, r3
    59de:	230b      	movs	r3, #11
    59e0:	18fb      	adds	r3, r7, r3
    59e2:	1e51      	subs	r1, r2, #1
    59e4:	418a      	sbcs	r2, r1
    59e6:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    59e8:	683b      	ldr	r3, [r7, #0]
    59ea:	7a5b      	ldrb	r3, [r3, #9]
    59ec:	2b00      	cmp	r3, #0
    59ee:	d006      	beq.n	59fe <_i2c_master_read_packet+0x4e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    59f0:	683b      	ldr	r3, [r7, #0]
    59f2:	7a9a      	ldrb	r2, [r3, #10]
    59f4:	687b      	ldr	r3, [r7, #4]
    59f6:	0011      	movs	r1, r2
    59f8:	0018      	movs	r0, r3
    59fa:	4b85      	ldr	r3, [pc, #532]	; (5c10 <_i2c_master_read_packet+0x260>)
    59fc:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    59fe:	68fb      	ldr	r3, [r7, #12]
    5a00:	685b      	ldr	r3, [r3, #4]
    5a02:	4a84      	ldr	r2, [pc, #528]	; (5c14 <_i2c_master_read_packet+0x264>)
    5a04:	401a      	ands	r2, r3
    5a06:	68fb      	ldr	r3, [r7, #12]
    5a08:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    5a0a:	683b      	ldr	r3, [r7, #0]
    5a0c:	7a1b      	ldrb	r3, [r3, #8]
    5a0e:	2b00      	cmp	r3, #0
    5a10:	d042      	beq.n	5a98 <_i2c_master_read_packet+0xe8>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    5a12:	683b      	ldr	r3, [r7, #0]
    5a14:	881b      	ldrh	r3, [r3, #0]
    5a16:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    5a18:	683b      	ldr	r3, [r7, #0]
    5a1a:	7a5b      	ldrb	r3, [r3, #9]
    5a1c:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    5a1e:	4313      	orrs	r3, r2
    5a20:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    5a22:	2380      	movs	r3, #128	; 0x80
    5a24:	021b      	lsls	r3, r3, #8
    5a26:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
    5a28:	68fb      	ldr	r3, [r7, #12]
    5a2a:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    5a2c:	2317      	movs	r3, #23
    5a2e:	18fc      	adds	r4, r7, r3
    5a30:	687b      	ldr	r3, [r7, #4]
    5a32:	0018      	movs	r0, r3
    5a34:	4b78      	ldr	r3, [pc, #480]	; (5c18 <_i2c_master_read_packet+0x268>)
    5a36:	4798      	blx	r3
    5a38:	0003      	movs	r3, r0
    5a3a:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    5a3c:	68fb      	ldr	r3, [r7, #12]
    5a3e:	685b      	ldr	r3, [r3, #4]
    5a40:	4a74      	ldr	r2, [pc, #464]	; (5c14 <_i2c_master_read_packet+0x264>)
    5a42:	401a      	ands	r2, r3
    5a44:	68fb      	ldr	r3, [r7, #12]
    5a46:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
    5a48:	2317      	movs	r3, #23
    5a4a:	18fb      	adds	r3, r7, r3
    5a4c:	781b      	ldrb	r3, [r3, #0]
    5a4e:	2b00      	cmp	r3, #0
    5a50:	d107      	bne.n	5a62 <_i2c_master_read_packet+0xb2>
			tmp_status = _i2c_master_address_response(module);
    5a52:	2317      	movs	r3, #23
    5a54:	18fc      	adds	r4, r7, r3
    5a56:	687b      	ldr	r3, [r7, #4]
    5a58:	0018      	movs	r0, r3
    5a5a:	4b70      	ldr	r3, [pc, #448]	; (5c1c <_i2c_master_read_packet+0x26c>)
    5a5c:	4798      	blx	r3
    5a5e:	0003      	movs	r3, r0
    5a60:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
    5a62:	2317      	movs	r3, #23
    5a64:	18fb      	adds	r3, r7, r3
    5a66:	781b      	ldrb	r3, [r3, #0]
    5a68:	2b00      	cmp	r3, #0
    5a6a:	d111      	bne.n	5a90 <_i2c_master_read_packet+0xe0>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    5a6c:	683b      	ldr	r3, [r7, #0]
    5a6e:	881b      	ldrh	r3, [r3, #0]
    5a70:	0a1b      	lsrs	r3, r3, #8
    5a72:	b29b      	uxth	r3, r3
    5a74:	2278      	movs	r2, #120	; 0x78
    5a76:	4313      	orrs	r3, r2
    5a78:	b29b      	uxth	r3, r3
    5a7a:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    5a7c:	683b      	ldr	r3, [r7, #0]
    5a7e:	7a5b      	ldrb	r3, [r3, #9]
    5a80:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    5a82:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    5a84:	2201      	movs	r2, #1
    5a86:	4313      	orrs	r3, r2
    5a88:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    5a8a:	68fb      	ldr	r3, [r7, #12]
    5a8c:	625a      	str	r2, [r3, #36]	; 0x24
    5a8e:	e00f      	b.n	5ab0 <_i2c_master_read_packet+0x100>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
    5a90:	2317      	movs	r3, #23
    5a92:	18fb      	adds	r3, r7, r3
    5a94:	781b      	ldrb	r3, [r3, #0]
    5a96:	e0b6      	b.n	5c06 <_i2c_master_read_packet+0x256>
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    5a98:	683b      	ldr	r3, [r7, #0]
    5a9a:	881b      	ldrh	r3, [r3, #0]
    5a9c:	005b      	lsls	r3, r3, #1
    5a9e:	2201      	movs	r2, #1
    5aa0:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    5aa2:	683b      	ldr	r3, [r7, #0]
    5aa4:	7a5b      	ldrb	r3, [r3, #9]
    5aa6:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    5aa8:	4313      	orrs	r3, r2
    5aaa:	001a      	movs	r2, r3
    5aac:	68fb      	ldr	r3, [r7, #12]
    5aae:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    5ab0:	2317      	movs	r3, #23
    5ab2:	18fc      	adds	r4, r7, r3
    5ab4:	687b      	ldr	r3, [r7, #4]
    5ab6:	0018      	movs	r0, r3
    5ab8:	4b57      	ldr	r3, [pc, #348]	; (5c18 <_i2c_master_read_packet+0x268>)
    5aba:	4798      	blx	r3
    5abc:	0003      	movs	r3, r0
    5abe:	7023      	strb	r3, [r4, #0]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    5ac0:	230b      	movs	r3, #11
    5ac2:	18fb      	adds	r3, r7, r3
    5ac4:	781b      	ldrb	r3, [r3, #0]
    5ac6:	2b00      	cmp	r3, #0
    5ac8:	d00b      	beq.n	5ae2 <_i2c_master_read_packet+0x132>
    5aca:	683b      	ldr	r3, [r7, #0]
    5acc:	885b      	ldrh	r3, [r3, #2]
    5ace:	2b01      	cmp	r3, #1
    5ad0:	d107      	bne.n	5ae2 <_i2c_master_read_packet+0x132>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5ad2:	68fb      	ldr	r3, [r7, #12]
    5ad4:	685b      	ldr	r3, [r3, #4]
    5ad6:	2280      	movs	r2, #128	; 0x80
    5ad8:	02d2      	lsls	r2, r2, #11
    5ada:	431a      	orrs	r2, r3
    5adc:	68fb      	ldr	r3, [r7, #12]
    5ade:	605a      	str	r2, [r3, #4]
    5ae0:	e005      	b.n	5aee <_i2c_master_read_packet+0x13e>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    5ae2:	68fb      	ldr	r3, [r7, #12]
    5ae4:	685b      	ldr	r3, [r3, #4]
    5ae6:	4a4b      	ldr	r2, [pc, #300]	; (5c14 <_i2c_master_read_packet+0x264>)
    5ae8:	401a      	ands	r2, r3
    5aea:	68fb      	ldr	r3, [r7, #12]
    5aec:	605a      	str	r2, [r3, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    5aee:	2317      	movs	r3, #23
    5af0:	18fb      	adds	r3, r7, r3
    5af2:	781b      	ldrb	r3, [r3, #0]
    5af4:	2b00      	cmp	r3, #0
    5af6:	d107      	bne.n	5b08 <_i2c_master_read_packet+0x158>
		tmp_status = _i2c_master_address_response(module);
    5af8:	2317      	movs	r3, #23
    5afa:	18fc      	adds	r4, r7, r3
    5afc:	687b      	ldr	r3, [r7, #4]
    5afe:	0018      	movs	r0, r3
    5b00:	4b46      	ldr	r3, [pc, #280]	; (5c1c <_i2c_master_read_packet+0x26c>)
    5b02:	4798      	blx	r3
    5b04:	0003      	movs	r3, r0
    5b06:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    5b08:	2317      	movs	r3, #23
    5b0a:	18fb      	adds	r3, r7, r3
    5b0c:	781b      	ldrb	r3, [r3, #0]
    5b0e:	2b00      	cmp	r3, #0
    5b10:	d000      	beq.n	5b14 <_i2c_master_read_packet+0x164>
    5b12:	e075      	b.n	5c00 <_i2c_master_read_packet+0x250>
		/* Read data buffer. */
		while (tmp_data_length--) {
    5b14:	e04b      	b.n	5bae <_i2c_master_read_packet+0x1fe>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    5b16:	68fb      	ldr	r3, [r7, #12]
    5b18:	8b5b      	ldrh	r3, [r3, #26]
    5b1a:	b29b      	uxth	r3, r3
    5b1c:	001a      	movs	r2, r3
    5b1e:	2320      	movs	r3, #32
    5b20:	4013      	ands	r3, r2
    5b22:	d101      	bne.n	5b28 <_i2c_master_read_packet+0x178>
				return STATUS_ERR_PACKET_COLLISION;
    5b24:	2341      	movs	r3, #65	; 0x41
    5b26:	e06e      	b.n	5c06 <_i2c_master_read_packet+0x256>
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    5b28:	687b      	ldr	r3, [r7, #4]
    5b2a:	7adb      	ldrb	r3, [r3, #11]
    5b2c:	2b00      	cmp	r3, #0
    5b2e:	d01e      	beq.n	5b6e <_i2c_master_read_packet+0x1be>
    5b30:	230b      	movs	r3, #11
    5b32:	18fb      	adds	r3, r7, r3
    5b34:	781b      	ldrb	r3, [r3, #0]
    5b36:	2201      	movs	r2, #1
    5b38:	4053      	eors	r3, r2
    5b3a:	b2db      	uxtb	r3, r3
    5b3c:	2b00      	cmp	r3, #0
    5b3e:	d004      	beq.n	5b4a <_i2c_master_read_packet+0x19a>
    5b40:	2314      	movs	r3, #20
    5b42:	18fb      	adds	r3, r7, r3
    5b44:	881b      	ldrh	r3, [r3, #0]
    5b46:	2b00      	cmp	r3, #0
    5b48:	d009      	beq.n	5b5e <_i2c_master_read_packet+0x1ae>
    5b4a:	230b      	movs	r3, #11
    5b4c:	18fb      	adds	r3, r7, r3
    5b4e:	781b      	ldrb	r3, [r3, #0]
    5b50:	2b00      	cmp	r3, #0
    5b52:	d00c      	beq.n	5b6e <_i2c_master_read_packet+0x1be>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    5b54:	2314      	movs	r3, #20
    5b56:	18fb      	adds	r3, r7, r3
    5b58:	881b      	ldrh	r3, [r3, #0]
    5b5a:	2b01      	cmp	r3, #1
    5b5c:	d107      	bne.n	5b6e <_i2c_master_read_packet+0x1be>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5b5e:	68fb      	ldr	r3, [r7, #12]
    5b60:	685b      	ldr	r3, [r3, #4]
    5b62:	2280      	movs	r2, #128	; 0x80
    5b64:	02d2      	lsls	r2, r2, #11
    5b66:	431a      	orrs	r2, r3
    5b68:	68fb      	ldr	r3, [r7, #12]
    5b6a:	605a      	str	r2, [r3, #4]
    5b6c:	e01a      	b.n	5ba4 <_i2c_master_read_packet+0x1f4>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
    5b6e:	687b      	ldr	r3, [r7, #4]
    5b70:	0018      	movs	r0, r3
    5b72:	4b2b      	ldr	r3, [pc, #172]	; (5c20 <_i2c_master_read_packet+0x270>)
    5b74:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    5b76:	683b      	ldr	r3, [r7, #0]
    5b78:	685a      	ldr	r2, [r3, #4]
    5b7a:	2312      	movs	r3, #18
    5b7c:	18fb      	adds	r3, r7, r3
    5b7e:	881b      	ldrh	r3, [r3, #0]
    5b80:	2112      	movs	r1, #18
    5b82:	1879      	adds	r1, r7, r1
    5b84:	1c58      	adds	r0, r3, #1
    5b86:	8008      	strh	r0, [r1, #0]
    5b88:	18d3      	adds	r3, r2, r3
    5b8a:	68fa      	ldr	r2, [r7, #12]
    5b8c:	2128      	movs	r1, #40	; 0x28
    5b8e:	5c52      	ldrb	r2, [r2, r1]
    5b90:	b2d2      	uxtb	r2, r2
    5b92:	701a      	strb	r2, [r3, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
    5b94:	2317      	movs	r3, #23
    5b96:	18fc      	adds	r4, r7, r3
    5b98:	687b      	ldr	r3, [r7, #4]
    5b9a:	0018      	movs	r0, r3
    5b9c:	4b1e      	ldr	r3, [pc, #120]	; (5c18 <_i2c_master_read_packet+0x268>)
    5b9e:	4798      	blx	r3
    5ba0:	0003      	movs	r3, r0
    5ba2:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    5ba4:	2317      	movs	r3, #23
    5ba6:	18fb      	adds	r3, r7, r3
    5ba8:	781b      	ldrb	r3, [r3, #0]
    5baa:	2b00      	cmp	r3, #0
    5bac:	d109      	bne.n	5bc2 <_i2c_master_read_packet+0x212>
		while (tmp_data_length--) {
    5bae:	2314      	movs	r3, #20
    5bb0:	18fb      	adds	r3, r7, r3
    5bb2:	881b      	ldrh	r3, [r3, #0]
    5bb4:	2214      	movs	r2, #20
    5bb6:	18ba      	adds	r2, r7, r2
    5bb8:	1e59      	subs	r1, r3, #1
    5bba:	8011      	strh	r1, [r2, #0]
    5bbc:	2b00      	cmp	r3, #0
    5bbe:	d1aa      	bne.n	5b16 <_i2c_master_read_packet+0x166>
    5bc0:	e000      	b.n	5bc4 <_i2c_master_read_packet+0x214>
				break;
    5bc2:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    5bc4:	687b      	ldr	r3, [r7, #4]
    5bc6:	7a9b      	ldrb	r3, [r3, #10]
    5bc8:	2b00      	cmp	r3, #0
    5bca:	d00a      	beq.n	5be2 <_i2c_master_read_packet+0x232>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
    5bcc:	687b      	ldr	r3, [r7, #4]
    5bce:	0018      	movs	r0, r3
    5bd0:	4b13      	ldr	r3, [pc, #76]	; (5c20 <_i2c_master_read_packet+0x270>)
    5bd2:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    5bd4:	68fb      	ldr	r3, [r7, #12]
    5bd6:	685b      	ldr	r3, [r3, #4]
    5bd8:	22c0      	movs	r2, #192	; 0xc0
    5bda:	0292      	lsls	r2, r2, #10
    5bdc:	431a      	orrs	r2, r3
    5bde:	68fb      	ldr	r3, [r7, #12]
    5be0:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
    5be2:	687b      	ldr	r3, [r7, #4]
    5be4:	0018      	movs	r0, r3
    5be6:	4b0e      	ldr	r3, [pc, #56]	; (5c20 <_i2c_master_read_packet+0x270>)
    5be8:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    5bea:	683b      	ldr	r3, [r7, #0]
    5bec:	685a      	ldr	r2, [r3, #4]
    5bee:	2312      	movs	r3, #18
    5bf0:	18fb      	adds	r3, r7, r3
    5bf2:	881b      	ldrh	r3, [r3, #0]
    5bf4:	18d3      	adds	r3, r2, r3
    5bf6:	68fa      	ldr	r2, [r7, #12]
    5bf8:	2128      	movs	r1, #40	; 0x28
    5bfa:	5c52      	ldrb	r2, [r2, r1]
    5bfc:	b2d2      	uxtb	r2, r2
    5bfe:	701a      	strb	r2, [r3, #0]
	}

	return tmp_status;
    5c00:	2317      	movs	r3, #23
    5c02:	18fb      	adds	r3, r7, r3
    5c04:	781b      	ldrb	r3, [r3, #0]
}
    5c06:	0018      	movs	r0, r3
    5c08:	46bd      	mov	sp, r7
    5c0a:	b007      	add	sp, #28
    5c0c:	bd90      	pop	{r4, r7, pc}
    5c0e:	46c0      	nop			; (mov r8, r8)
    5c10:	0000595d 	.word	0x0000595d
    5c14:	fffbffff 	.word	0xfffbffff
    5c18:	000058ff 	.word	0x000058ff
    5c1c:	000058a1 	.word	0x000058a1
    5c20:	00005315 	.word	0x00005315

00005c24 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    5c24:	b580      	push	{r7, lr}
    5c26:	b082      	sub	sp, #8
    5c28:	af00      	add	r7, sp, #0
    5c2a:	6078      	str	r0, [r7, #4]
    5c2c:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
    5c2e:	687b      	ldr	r3, [r7, #4]
    5c30:	8b9b      	ldrh	r3, [r3, #28]
    5c32:	b29b      	uxth	r3, r3
    5c34:	2b00      	cmp	r3, #0
    5c36:	d001      	beq.n	5c3c <i2c_master_read_packet_wait+0x18>
		return STATUS_BUSY;
    5c38:	2305      	movs	r3, #5
    5c3a:	e00c      	b.n	5c56 <i2c_master_read_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
    5c3c:	687b      	ldr	r3, [r7, #4]
    5c3e:	2201      	movs	r2, #1
    5c40:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    5c42:	687b      	ldr	r3, [r7, #4]
    5c44:	2201      	movs	r2, #1
    5c46:	72da      	strb	r2, [r3, #11]

	return _i2c_master_read_packet(module, packet);
    5c48:	683a      	ldr	r2, [r7, #0]
    5c4a:	687b      	ldr	r3, [r7, #4]
    5c4c:	0011      	movs	r1, r2
    5c4e:	0018      	movs	r0, r3
    5c50:	4b03      	ldr	r3, [pc, #12]	; (5c60 <i2c_master_read_packet_wait+0x3c>)
    5c52:	4798      	blx	r3
    5c54:	0003      	movs	r3, r0
}
    5c56:	0018      	movs	r0, r3
    5c58:	46bd      	mov	sp, r7
    5c5a:	b002      	add	sp, #8
    5c5c:	bd80      	pop	{r7, pc}
    5c5e:	46c0      	nop			; (mov r8, r8)
    5c60:	000059b1 	.word	0x000059b1

00005c64 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    5c64:	b590      	push	{r4, r7, lr}
    5c66:	b087      	sub	sp, #28
    5c68:	af00      	add	r7, sp, #0
    5c6a:	6078      	str	r0, [r7, #4]
    5c6c:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5c6e:	687b      	ldr	r3, [r7, #4]
    5c70:	681b      	ldr	r3, [r3, #0]
    5c72:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    5c74:	2314      	movs	r3, #20
    5c76:	18fb      	adds	r3, r7, r3
    5c78:	683a      	ldr	r2, [r7, #0]
    5c7a:	8852      	ldrh	r2, [r2, #2]
    5c7c:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
    5c7e:	687b      	ldr	r3, [r7, #4]
    5c80:	0018      	movs	r0, r3
    5c82:	4b51      	ldr	r3, [pc, #324]	; (5dc8 <_i2c_master_write_packet+0x164>)
    5c84:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    5c86:	683b      	ldr	r3, [r7, #0]
    5c88:	7a5b      	ldrb	r3, [r3, #9]
    5c8a:	2b00      	cmp	r3, #0
    5c8c:	d006      	beq.n	5c9c <_i2c_master_write_packet+0x38>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    5c8e:	683b      	ldr	r3, [r7, #0]
    5c90:	7a9a      	ldrb	r2, [r3, #10]
    5c92:	687b      	ldr	r3, [r7, #4]
    5c94:	0011      	movs	r1, r2
    5c96:	0018      	movs	r0, r3
    5c98:	4b4c      	ldr	r3, [pc, #304]	; (5dcc <_i2c_master_write_packet+0x168>)
    5c9a:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    5c9c:	68fb      	ldr	r3, [r7, #12]
    5c9e:	685b      	ldr	r3, [r3, #4]
    5ca0:	4a4b      	ldr	r2, [pc, #300]	; (5dd0 <_i2c_master_write_packet+0x16c>)
    5ca2:	401a      	ands	r2, r3
    5ca4:	68fb      	ldr	r3, [r7, #12]
    5ca6:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    5ca8:	683b      	ldr	r3, [r7, #0]
    5caa:	7a1b      	ldrb	r3, [r3, #8]
    5cac:	2b00      	cmp	r3, #0
    5cae:	d00d      	beq.n	5ccc <_i2c_master_write_packet+0x68>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    5cb0:	683b      	ldr	r3, [r7, #0]
    5cb2:	881b      	ldrh	r3, [r3, #0]
    5cb4:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    5cb6:	683b      	ldr	r3, [r7, #0]
    5cb8:	7a5b      	ldrb	r3, [r3, #9]
    5cba:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    5cbc:	4313      	orrs	r3, r2
    5cbe:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    5cc0:	2380      	movs	r3, #128	; 0x80
    5cc2:	021b      	lsls	r3, r3, #8
    5cc4:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    5cc6:	68fb      	ldr	r3, [r7, #12]
    5cc8:	625a      	str	r2, [r3, #36]	; 0x24
    5cca:	e009      	b.n	5ce0 <_i2c_master_write_packet+0x7c>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    5ccc:	683b      	ldr	r3, [r7, #0]
    5cce:	881b      	ldrh	r3, [r3, #0]
    5cd0:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    5cd2:	683b      	ldr	r3, [r7, #0]
    5cd4:	7a5b      	ldrb	r3, [r3, #9]
    5cd6:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    5cd8:	4313      	orrs	r3, r2
    5cda:	001a      	movs	r2, r3
    5cdc:	68fb      	ldr	r3, [r7, #12]
    5cde:	625a      	str	r2, [r3, #36]	; 0x24
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    5ce0:	2317      	movs	r3, #23
    5ce2:	18fc      	adds	r4, r7, r3
    5ce4:	687b      	ldr	r3, [r7, #4]
    5ce6:	0018      	movs	r0, r3
    5ce8:	4b3a      	ldr	r3, [pc, #232]	; (5dd4 <_i2c_master_write_packet+0x170>)
    5cea:	4798      	blx	r3
    5cec:	0003      	movs	r3, r0
    5cee:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    5cf0:	2317      	movs	r3, #23
    5cf2:	18fb      	adds	r3, r7, r3
    5cf4:	781b      	ldrb	r3, [r3, #0]
    5cf6:	2b00      	cmp	r3, #0
    5cf8:	d107      	bne.n	5d0a <_i2c_master_write_packet+0xa6>
		tmp_status = _i2c_master_address_response(module);
    5cfa:	2317      	movs	r3, #23
    5cfc:	18fc      	adds	r4, r7, r3
    5cfe:	687b      	ldr	r3, [r7, #4]
    5d00:	0018      	movs	r0, r3
    5d02:	4b35      	ldr	r3, [pc, #212]	; (5dd8 <_i2c_master_write_packet+0x174>)
    5d04:	4798      	blx	r3
    5d06:	0003      	movs	r3, r0
    5d08:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    5d0a:	2317      	movs	r3, #23
    5d0c:	18fb      	adds	r3, r7, r3
    5d0e:	781b      	ldrb	r3, [r3, #0]
    5d10:	2b00      	cmp	r3, #0
    5d12:	d152      	bne.n	5dba <_i2c_master_write_packet+0x156>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
    5d14:	2312      	movs	r3, #18
    5d16:	18fb      	adds	r3, r7, r3
    5d18:	2200      	movs	r2, #0
    5d1a:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
    5d1c:	e033      	b.n	5d86 <_i2c_master_write_packet+0x122>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    5d1e:	68fb      	ldr	r3, [r7, #12]
    5d20:	8b5b      	ldrh	r3, [r3, #26]
    5d22:	b29b      	uxth	r3, r3
    5d24:	001a      	movs	r2, r3
    5d26:	2320      	movs	r3, #32
    5d28:	4013      	ands	r3, r2
    5d2a:	d101      	bne.n	5d30 <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
    5d2c:	2341      	movs	r3, #65	; 0x41
    5d2e:	e047      	b.n	5dc0 <_i2c_master_write_packet+0x15c>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
    5d30:	687b      	ldr	r3, [r7, #4]
    5d32:	0018      	movs	r0, r3
    5d34:	4b24      	ldr	r3, [pc, #144]	; (5dc8 <_i2c_master_write_packet+0x164>)
    5d36:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    5d38:	683b      	ldr	r3, [r7, #0]
    5d3a:	685a      	ldr	r2, [r3, #4]
    5d3c:	2312      	movs	r3, #18
    5d3e:	18fb      	adds	r3, r7, r3
    5d40:	881b      	ldrh	r3, [r3, #0]
    5d42:	2112      	movs	r1, #18
    5d44:	1879      	adds	r1, r7, r1
    5d46:	1c58      	adds	r0, r3, #1
    5d48:	8008      	strh	r0, [r1, #0]
    5d4a:	18d3      	adds	r3, r2, r3
    5d4c:	7819      	ldrb	r1, [r3, #0]
    5d4e:	68fb      	ldr	r3, [r7, #12]
    5d50:	2228      	movs	r2, #40	; 0x28
    5d52:	5499      	strb	r1, [r3, r2]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    5d54:	2317      	movs	r3, #23
    5d56:	18fc      	adds	r4, r7, r3
    5d58:	687b      	ldr	r3, [r7, #4]
    5d5a:	0018      	movs	r0, r3
    5d5c:	4b1d      	ldr	r3, [pc, #116]	; (5dd4 <_i2c_master_write_packet+0x170>)
    5d5e:	4798      	blx	r3
    5d60:	0003      	movs	r3, r0
    5d62:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    5d64:	2317      	movs	r3, #23
    5d66:	18fb      	adds	r3, r7, r3
    5d68:	781b      	ldrb	r3, [r3, #0]
    5d6a:	2b00      	cmp	r3, #0
    5d6c:	d115      	bne.n	5d9a <_i2c_master_write_packet+0x136>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    5d6e:	68fb      	ldr	r3, [r7, #12]
    5d70:	8b5b      	ldrh	r3, [r3, #26]
    5d72:	b29b      	uxth	r3, r3
    5d74:	001a      	movs	r2, r3
    5d76:	2304      	movs	r3, #4
    5d78:	4013      	ands	r3, r2
    5d7a:	d004      	beq.n	5d86 <_i2c_master_write_packet+0x122>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
    5d7c:	2317      	movs	r3, #23
    5d7e:	18fb      	adds	r3, r7, r3
    5d80:	221e      	movs	r2, #30
    5d82:	701a      	strb	r2, [r3, #0]
				break;
    5d84:	e00a      	b.n	5d9c <_i2c_master_write_packet+0x138>
		while (tmp_data_length--) {
    5d86:	2314      	movs	r3, #20
    5d88:	18fb      	adds	r3, r7, r3
    5d8a:	881b      	ldrh	r3, [r3, #0]
    5d8c:	2214      	movs	r2, #20
    5d8e:	18ba      	adds	r2, r7, r2
    5d90:	1e59      	subs	r1, r3, #1
    5d92:	8011      	strh	r1, [r2, #0]
    5d94:	2b00      	cmp	r3, #0
    5d96:	d1c2      	bne.n	5d1e <_i2c_master_write_packet+0xba>
    5d98:	e000      	b.n	5d9c <_i2c_master_write_packet+0x138>
				break;
    5d9a:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    5d9c:	687b      	ldr	r3, [r7, #4]
    5d9e:	7a9b      	ldrb	r3, [r3, #10]
    5da0:	2b00      	cmp	r3, #0
    5da2:	d00a      	beq.n	5dba <_i2c_master_write_packet+0x156>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
    5da4:	687b      	ldr	r3, [r7, #4]
    5da6:	0018      	movs	r0, r3
    5da8:	4b07      	ldr	r3, [pc, #28]	; (5dc8 <_i2c_master_write_packet+0x164>)
    5daa:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    5dac:	68fb      	ldr	r3, [r7, #12]
    5dae:	685b      	ldr	r3, [r3, #4]
    5db0:	22c0      	movs	r2, #192	; 0xc0
    5db2:	0292      	lsls	r2, r2, #10
    5db4:	431a      	orrs	r2, r3
    5db6:	68fb      	ldr	r3, [r7, #12]
    5db8:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
    5dba:	2317      	movs	r3, #23
    5dbc:	18fb      	adds	r3, r7, r3
    5dbe:	781b      	ldrb	r3, [r3, #0]
}
    5dc0:	0018      	movs	r0, r3
    5dc2:	46bd      	mov	sp, r7
    5dc4:	b007      	add	sp, #28
    5dc6:	bd90      	pop	{r4, r7, pc}
    5dc8:	00005315 	.word	0x00005315
    5dcc:	0000595d 	.word	0x0000595d
    5dd0:	fffbffff 	.word	0xfffbffff
    5dd4:	000058ff 	.word	0x000058ff
    5dd8:	000058a1 	.word	0x000058a1

00005ddc <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    5ddc:	b580      	push	{r7, lr}
    5dde:	b082      	sub	sp, #8
    5de0:	af00      	add	r7, sp, #0
    5de2:	6078      	str	r0, [r7, #4]
    5de4:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    5de6:	687b      	ldr	r3, [r7, #4]
    5de8:	8b9b      	ldrh	r3, [r3, #28]
    5dea:	b29b      	uxth	r3, r3
    5dec:	2b00      	cmp	r3, #0
    5dee:	d001      	beq.n	5df4 <i2c_master_write_packet_wait+0x18>
		return STATUS_BUSY;
    5df0:	2305      	movs	r3, #5
    5df2:	e00c      	b.n	5e0e <i2c_master_write_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
    5df4:	687b      	ldr	r3, [r7, #4]
    5df6:	2201      	movs	r2, #1
    5df8:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    5dfa:	687b      	ldr	r3, [r7, #4]
    5dfc:	2201      	movs	r2, #1
    5dfe:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
    5e00:	683a      	ldr	r2, [r7, #0]
    5e02:	687b      	ldr	r3, [r7, #4]
    5e04:	0011      	movs	r1, r2
    5e06:	0018      	movs	r0, r3
    5e08:	4b03      	ldr	r3, [pc, #12]	; (5e18 <i2c_master_write_packet_wait+0x3c>)
    5e0a:	4798      	blx	r3
    5e0c:	0003      	movs	r3, r0
}
    5e0e:	0018      	movs	r0, r3
    5e10:	46bd      	mov	sp, r7
    5e12:	b002      	add	sp, #8
    5e14:	bd80      	pop	{r7, pc}
    5e16:	46c0      	nop			; (mov r8, r8)
    5e18:	00005c65 	.word	0x00005c65

00005e1c <i2c_master_is_syncing>:
{
    5e1c:	b580      	push	{r7, lr}
    5e1e:	b084      	sub	sp, #16
    5e20:	af00      	add	r7, sp, #0
    5e22:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    5e24:	687b      	ldr	r3, [r7, #4]
    5e26:	681b      	ldr	r3, [r3, #0]
    5e28:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    5e2a:	68fb      	ldr	r3, [r7, #12]
    5e2c:	69db      	ldr	r3, [r3, #28]
    5e2e:	2207      	movs	r2, #7
    5e30:	4013      	ands	r3, r2
    5e32:	1e5a      	subs	r2, r3, #1
    5e34:	4193      	sbcs	r3, r2
    5e36:	b2db      	uxtb	r3, r3
}
    5e38:	0018      	movs	r0, r3
    5e3a:	46bd      	mov	sp, r7
    5e3c:	b004      	add	sp, #16
    5e3e:	bd80      	pop	{r7, pc}

00005e40 <_i2c_master_wait_for_sync>:
{
    5e40:	b580      	push	{r7, lr}
    5e42:	b082      	sub	sp, #8
    5e44:	af00      	add	r7, sp, #0
    5e46:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    5e48:	46c0      	nop			; (mov r8, r8)
    5e4a:	687b      	ldr	r3, [r7, #4]
    5e4c:	0018      	movs	r0, r3
    5e4e:	4b04      	ldr	r3, [pc, #16]	; (5e60 <_i2c_master_wait_for_sync+0x20>)
    5e50:	4798      	blx	r3
    5e52:	1e03      	subs	r3, r0, #0
    5e54:	d1f9      	bne.n	5e4a <_i2c_master_wait_for_sync+0xa>
}
    5e56:	46c0      	nop			; (mov r8, r8)
    5e58:	46bd      	mov	sp, r7
    5e5a:	b002      	add	sp, #8
    5e5c:	bd80      	pop	{r7, pc}
    5e5e:	46c0      	nop			; (mov r8, r8)
    5e60:	00005e1d 	.word	0x00005e1d

00005e64 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    5e64:	b580      	push	{r7, lr}
    5e66:	b084      	sub	sp, #16
    5e68:	af00      	add	r7, sp, #0
    5e6a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5e6c:	687b      	ldr	r3, [r7, #4]
    5e6e:	681b      	ldr	r3, [r3, #0]
    5e70:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    5e72:	68fb      	ldr	r3, [r7, #12]
    5e74:	681b      	ldr	r3, [r3, #0]
    5e76:	011b      	lsls	r3, r3, #4
    5e78:	0fdb      	lsrs	r3, r3, #31
    5e7a:	b2db      	uxtb	r3, r3
    5e7c:	001a      	movs	r2, r3
    5e7e:	230b      	movs	r3, #11
    5e80:	18fb      	adds	r3, r7, r3
    5e82:	1e51      	subs	r1, r2, #1
    5e84:	418a      	sbcs	r2, r1
    5e86:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    5e88:	2308      	movs	r3, #8
    5e8a:	18fb      	adds	r3, r7, r3
    5e8c:	687a      	ldr	r2, [r7, #4]
    5e8e:	8b52      	ldrh	r2, [r2, #26]
    5e90:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    5e92:	687b      	ldr	r3, [r7, #4]
    5e94:	8b9b      	ldrh	r3, [r3, #28]
    5e96:	b29a      	uxth	r2, r3
    5e98:	2308      	movs	r3, #8
    5e9a:	18fb      	adds	r3, r7, r3
    5e9c:	2108      	movs	r1, #8
    5e9e:	1879      	adds	r1, r7, r1
    5ea0:	8809      	ldrh	r1, [r1, #0]
    5ea2:	1a8a      	subs	r2, r1, r2
    5ea4:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    5ea6:	687b      	ldr	r3, [r7, #4]
    5ea8:	8b9b      	ldrh	r3, [r3, #28]
    5eaa:	b29b      	uxth	r3, r3
    5eac:	3b01      	subs	r3, #1
    5eae:	b29a      	uxth	r2, r3
    5eb0:	687b      	ldr	r3, [r7, #4]
    5eb2:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
    5eb4:	230b      	movs	r3, #11
    5eb6:	18fb      	adds	r3, r7, r3
    5eb8:	781b      	ldrb	r3, [r3, #0]
    5eba:	2b00      	cmp	r3, #0
    5ebc:	d010      	beq.n	5ee0 <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
    5ebe:	687b      	ldr	r3, [r7, #4]
    5ec0:	7adb      	ldrb	r3, [r3, #11]
    5ec2:	2b00      	cmp	r3, #0
    5ec4:	d01c      	beq.n	5f00 <_i2c_master_read+0x9c>
    5ec6:	687b      	ldr	r3, [r7, #4]
    5ec8:	8b9b      	ldrh	r3, [r3, #28]
    5eca:	b29b      	uxth	r3, r3
    5ecc:	2b01      	cmp	r3, #1
    5ece:	d117      	bne.n	5f00 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5ed0:	68fb      	ldr	r3, [r7, #12]
    5ed2:	685b      	ldr	r3, [r3, #4]
    5ed4:	2280      	movs	r2, #128	; 0x80
    5ed6:	02d2      	lsls	r2, r2, #11
    5ed8:	431a      	orrs	r2, r3
    5eda:	68fb      	ldr	r3, [r7, #12]
    5edc:	605a      	str	r2, [r3, #4]
    5ede:	e00f      	b.n	5f00 <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
    5ee0:	687b      	ldr	r3, [r7, #4]
    5ee2:	7adb      	ldrb	r3, [r3, #11]
    5ee4:	2b00      	cmp	r3, #0
    5ee6:	d00b      	beq.n	5f00 <_i2c_master_read+0x9c>
    5ee8:	687b      	ldr	r3, [r7, #4]
    5eea:	8b9b      	ldrh	r3, [r3, #28]
    5eec:	b29b      	uxth	r3, r3
    5eee:	2b00      	cmp	r3, #0
    5ef0:	d106      	bne.n	5f00 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5ef2:	68fb      	ldr	r3, [r7, #12]
    5ef4:	685b      	ldr	r3, [r3, #4]
    5ef6:	2280      	movs	r2, #128	; 0x80
    5ef8:	02d2      	lsls	r2, r2, #11
    5efa:	431a      	orrs	r2, r3
    5efc:	68fb      	ldr	r3, [r7, #12]
    5efe:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
    5f00:	687b      	ldr	r3, [r7, #4]
    5f02:	8b9b      	ldrh	r3, [r3, #28]
    5f04:	b29b      	uxth	r3, r3
    5f06:	2b00      	cmp	r3, #0
    5f08:	d10e      	bne.n	5f28 <_i2c_master_read+0xc4>
		if (module->send_stop) {
    5f0a:	687b      	ldr	r3, [r7, #4]
    5f0c:	7a9b      	ldrb	r3, [r3, #10]
    5f0e:	2b00      	cmp	r3, #0
    5f10:	d00a      	beq.n	5f28 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    5f12:	687b      	ldr	r3, [r7, #4]
    5f14:	0018      	movs	r0, r3
    5f16:	4b0e      	ldr	r3, [pc, #56]	; (5f50 <_i2c_master_read+0xec>)
    5f18:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    5f1a:	68fb      	ldr	r3, [r7, #12]
    5f1c:	685b      	ldr	r3, [r3, #4]
    5f1e:	22c0      	movs	r2, #192	; 0xc0
    5f20:	0292      	lsls	r2, r2, #10
    5f22:	431a      	orrs	r2, r3
    5f24:	68fb      	ldr	r3, [r7, #12]
    5f26:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    5f28:	687b      	ldr	r3, [r7, #4]
    5f2a:	0018      	movs	r0, r3
    5f2c:	4b08      	ldr	r3, [pc, #32]	; (5f50 <_i2c_master_read+0xec>)
    5f2e:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    5f30:	687b      	ldr	r3, [r7, #4]
    5f32:	6a1a      	ldr	r2, [r3, #32]
    5f34:	2308      	movs	r3, #8
    5f36:	18fb      	adds	r3, r7, r3
    5f38:	881b      	ldrh	r3, [r3, #0]
    5f3a:	18d3      	adds	r3, r2, r3
    5f3c:	68fa      	ldr	r2, [r7, #12]
    5f3e:	2128      	movs	r1, #40	; 0x28
    5f40:	5c52      	ldrb	r2, [r2, r1]
    5f42:	b2d2      	uxtb	r2, r2
    5f44:	701a      	strb	r2, [r3, #0]
}
    5f46:	46c0      	nop			; (mov r8, r8)
    5f48:	46bd      	mov	sp, r7
    5f4a:	b004      	add	sp, #16
    5f4c:	bd80      	pop	{r7, pc}
    5f4e:	46c0      	nop			; (mov r8, r8)
    5f50:	00005e41 	.word	0x00005e41

00005f54 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    5f54:	b580      	push	{r7, lr}
    5f56:	b084      	sub	sp, #16
    5f58:	af00      	add	r7, sp, #0
    5f5a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5f5c:	687b      	ldr	r3, [r7, #4]
    5f5e:	681b      	ldr	r3, [r3, #0]
    5f60:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    5f62:	68fb      	ldr	r3, [r7, #12]
    5f64:	8b5b      	ldrh	r3, [r3, #26]
    5f66:	b29b      	uxth	r3, r3
    5f68:	001a      	movs	r2, r3
    5f6a:	2304      	movs	r3, #4
    5f6c:	4013      	ands	r3, r2
    5f6e:	d004      	beq.n	5f7a <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    5f70:	687b      	ldr	r3, [r7, #4]
    5f72:	2225      	movs	r2, #37	; 0x25
    5f74:	211e      	movs	r1, #30
    5f76:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
    5f78:	e024      	b.n	5fc4 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
    5f7a:	230a      	movs	r3, #10
    5f7c:	18fb      	adds	r3, r7, r3
    5f7e:	687a      	ldr	r2, [r7, #4]
    5f80:	8b52      	ldrh	r2, [r2, #26]
    5f82:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    5f84:	687b      	ldr	r3, [r7, #4]
    5f86:	8b9b      	ldrh	r3, [r3, #28]
    5f88:	b29a      	uxth	r2, r3
    5f8a:	230a      	movs	r3, #10
    5f8c:	18fb      	adds	r3, r7, r3
    5f8e:	210a      	movs	r1, #10
    5f90:	1879      	adds	r1, r7, r1
    5f92:	8809      	ldrh	r1, [r1, #0]
    5f94:	1a8a      	subs	r2, r1, r2
    5f96:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    5f98:	687b      	ldr	r3, [r7, #4]
    5f9a:	8b9b      	ldrh	r3, [r3, #28]
    5f9c:	b29b      	uxth	r3, r3
    5f9e:	3b01      	subs	r3, #1
    5fa0:	b29a      	uxth	r2, r3
    5fa2:	687b      	ldr	r3, [r7, #4]
    5fa4:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
    5fa6:	687b      	ldr	r3, [r7, #4]
    5fa8:	0018      	movs	r0, r3
    5faa:	4b08      	ldr	r3, [pc, #32]	; (5fcc <_i2c_master_write+0x78>)
    5fac:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    5fae:	687b      	ldr	r3, [r7, #4]
    5fb0:	6a1a      	ldr	r2, [r3, #32]
    5fb2:	230a      	movs	r3, #10
    5fb4:	18fb      	adds	r3, r7, r3
    5fb6:	881b      	ldrh	r3, [r3, #0]
    5fb8:	18d3      	adds	r3, r2, r3
    5fba:	781b      	ldrb	r3, [r3, #0]
    5fbc:	b2d9      	uxtb	r1, r3
    5fbe:	68fb      	ldr	r3, [r7, #12]
    5fc0:	2228      	movs	r2, #40	; 0x28
    5fc2:	5499      	strb	r1, [r3, r2]
}
    5fc4:	46bd      	mov	sp, r7
    5fc6:	b004      	add	sp, #16
    5fc8:	bd80      	pop	{r7, pc}
    5fca:	46c0      	nop			; (mov r8, r8)
    5fcc:	00005e41 	.word	0x00005e41

00005fd0 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
    5fd0:	b580      	push	{r7, lr}
    5fd2:	b084      	sub	sp, #16
    5fd4:	af00      	add	r7, sp, #0
    5fd6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5fd8:	687b      	ldr	r3, [r7, #4]
    5fda:	681b      	ldr	r3, [r3, #0]
    5fdc:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    5fde:	68fb      	ldr	r3, [r7, #12]
    5fe0:	7e1b      	ldrb	r3, [r3, #24]
    5fe2:	b2db      	uxtb	r3, r3
    5fe4:	001a      	movs	r2, r3
    5fe6:	2301      	movs	r3, #1
    5fe8:	4013      	ands	r3, r2
    5fea:	d02b      	beq.n	6044 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    5fec:	68fb      	ldr	r3, [r7, #12]
    5fee:	2201      	movs	r2, #1
    5ff0:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    5ff2:	68fb      	ldr	r3, [r7, #12]
    5ff4:	8b5b      	ldrh	r3, [r3, #26]
    5ff6:	b29b      	uxth	r3, r3
    5ff8:	001a      	movs	r2, r3
    5ffa:	2302      	movs	r3, #2
    5ffc:	4013      	ands	r3, r2
    5ffe:	d004      	beq.n	600a <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
    6000:	687b      	ldr	r3, [r7, #4]
    6002:	2225      	movs	r2, #37	; 0x25
    6004:	2141      	movs	r1, #65	; 0x41
    6006:	5499      	strb	r1, [r3, r2]
    6008:	e01c      	b.n	6044 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    600a:	68fb      	ldr	r3, [r7, #12]
    600c:	8b5b      	ldrh	r3, [r3, #26]
    600e:	b29b      	uxth	r3, r3
    6010:	001a      	movs	r2, r3
    6012:	2304      	movs	r3, #4
    6014:	4013      	ands	r3, r2
    6016:	d015      	beq.n	6044 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    6018:	687b      	ldr	r3, [r7, #4]
    601a:	2225      	movs	r2, #37	; 0x25
    601c:	2118      	movs	r1, #24
    601e:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
    6020:	687b      	ldr	r3, [r7, #4]
    6022:	2200      	movs	r2, #0
    6024:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
    6026:	687b      	ldr	r3, [r7, #4]
    6028:	7a9b      	ldrb	r3, [r3, #10]
    602a:	2b00      	cmp	r3, #0
    602c:	d00a      	beq.n	6044 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
    602e:	687b      	ldr	r3, [r7, #4]
    6030:	0018      	movs	r0, r3
    6032:	4b13      	ldr	r3, [pc, #76]	; (6080 <_i2c_master_async_address_response+0xb0>)
    6034:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    6036:	68fb      	ldr	r3, [r7, #12]
    6038:	685b      	ldr	r3, [r3, #4]
    603a:	22c0      	movs	r2, #192	; 0xc0
    603c:	0292      	lsls	r2, r2, #10
    603e:	431a      	orrs	r2, r3
    6040:	68fb      	ldr	r3, [r7, #12]
    6042:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
    6044:	687b      	ldr	r3, [r7, #4]
    6046:	8b9b      	ldrh	r3, [r3, #28]
    6048:	b29a      	uxth	r2, r3
    604a:	687b      	ldr	r3, [r7, #4]
    604c:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
    604e:	687b      	ldr	r3, [r7, #4]
    6050:	2225      	movs	r2, #37	; 0x25
    6052:	5c9b      	ldrb	r3, [r3, r2]
    6054:	b2db      	uxtb	r3, r3
    6056:	2b05      	cmp	r3, #5
    6058:	d10e      	bne.n	6078 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    605a:	687b      	ldr	r3, [r7, #4]
    605c:	2224      	movs	r2, #36	; 0x24
    605e:	5c9b      	ldrb	r3, [r3, r2]
    6060:	b2db      	uxtb	r3, r3
    6062:	2b00      	cmp	r3, #0
    6064:	d104      	bne.n	6070 <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
    6066:	687b      	ldr	r3, [r7, #4]
    6068:	0018      	movs	r0, r3
    606a:	4b06      	ldr	r3, [pc, #24]	; (6084 <_i2c_master_async_address_response+0xb4>)
    606c:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
    606e:	e003      	b.n	6078 <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
    6070:	687b      	ldr	r3, [r7, #4]
    6072:	0018      	movs	r0, r3
    6074:	4b04      	ldr	r3, [pc, #16]	; (6088 <_i2c_master_async_address_response+0xb8>)
    6076:	4798      	blx	r3
}
    6078:	46c0      	nop			; (mov r8, r8)
    607a:	46bd      	mov	sp, r7
    607c:	b004      	add	sp, #16
    607e:	bd80      	pop	{r7, pc}
    6080:	00005e41 	.word	0x00005e41
    6084:	00005f55 	.word	0x00005f55
    6088:	00005e65 	.word	0x00005e65

0000608c <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    608c:	b580      	push	{r7, lr}
    608e:	b086      	sub	sp, #24
    6090:	af00      	add	r7, sp, #0
    6092:	0002      	movs	r2, r0
    6094:	1dfb      	adds	r3, r7, #7
    6096:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
    6098:	1dfb      	adds	r3, r7, #7
    609a:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
    609c:	4b93      	ldr	r3, [pc, #588]	; (62ec <_i2c_master_interrupt_handler+0x260>)
    609e:	0092      	lsls	r2, r2, #2
    60a0:	58d3      	ldr	r3, [r2, r3]
    60a2:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    60a4:	697b      	ldr	r3, [r7, #20]
    60a6:	681b      	ldr	r3, [r3, #0]
    60a8:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    60aa:	693b      	ldr	r3, [r7, #16]
    60ac:	681b      	ldr	r3, [r3, #0]
    60ae:	011b      	lsls	r3, r3, #4
    60b0:	0fdb      	lsrs	r3, r3, #31
    60b2:	b2db      	uxtb	r3, r3
    60b4:	001a      	movs	r2, r3
    60b6:	230f      	movs	r3, #15
    60b8:	18fb      	adds	r3, r7, r3
    60ba:	1e51      	subs	r1, r2, #1
    60bc:	418a      	sbcs	r2, r1
    60be:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    60c0:	230e      	movs	r3, #14
    60c2:	18fb      	adds	r3, r7, r3
    60c4:	697a      	ldr	r2, [r7, #20]
    60c6:	7e52      	ldrb	r2, [r2, #25]
    60c8:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    60ca:	697b      	ldr	r3, [r7, #20]
    60cc:	7e1b      	ldrb	r3, [r3, #24]
    60ce:	b2da      	uxtb	r2, r3
    60d0:	230e      	movs	r3, #14
    60d2:	18fb      	adds	r3, r7, r3
    60d4:	210e      	movs	r1, #14
    60d6:	1879      	adds	r1, r7, r1
    60d8:	7809      	ldrb	r1, [r1, #0]
    60da:	400a      	ands	r2, r1
    60dc:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    60de:	697b      	ldr	r3, [r7, #20]
    60e0:	8b5b      	ldrh	r3, [r3, #26]
    60e2:	b29b      	uxth	r3, r3
    60e4:	2b00      	cmp	r3, #0
    60e6:	d109      	bne.n	60fc <_i2c_master_interrupt_handler+0x70>
    60e8:	697b      	ldr	r3, [r7, #20]
    60ea:	8b9b      	ldrh	r3, [r3, #28]
    60ec:	b29b      	uxth	r3, r3
    60ee:	2b00      	cmp	r3, #0
    60f0:	d004      	beq.n	60fc <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
    60f2:	697b      	ldr	r3, [r7, #20]
    60f4:	0018      	movs	r0, r3
    60f6:	4b7e      	ldr	r3, [pc, #504]	; (62f0 <_i2c_master_interrupt_handler+0x264>)
    60f8:	4798      	blx	r3
    60fa:	e070      	b.n	61de <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    60fc:	697b      	ldr	r3, [r7, #20]
    60fe:	8b5b      	ldrh	r3, [r3, #26]
    6100:	b29b      	uxth	r3, r3
    6102:	2b00      	cmp	r3, #0
    6104:	d039      	beq.n	617a <_i2c_master_interrupt_handler+0xee>
    6106:	697b      	ldr	r3, [r7, #20]
    6108:	8b9b      	ldrh	r3, [r3, #28]
    610a:	b29b      	uxth	r3, r3
    610c:	2b00      	cmp	r3, #0
    610e:	d134      	bne.n	617a <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
    6110:	697b      	ldr	r3, [r7, #20]
    6112:	2225      	movs	r2, #37	; 0x25
    6114:	5c9b      	ldrb	r3, [r3, r2]
    6116:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    6118:	2b05      	cmp	r3, #5
    611a:	d12e      	bne.n	617a <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    611c:	697b      	ldr	r3, [r7, #20]
    611e:	2224      	movs	r2, #36	; 0x24
    6120:	5c9b      	ldrb	r3, [r3, r2]
    6122:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    6124:	2b00      	cmp	r3, #0
    6126:	d128      	bne.n	617a <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    6128:	693b      	ldr	r3, [r7, #16]
    612a:	2203      	movs	r2, #3
    612c:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    612e:	697b      	ldr	r3, [r7, #20]
    6130:	2200      	movs	r2, #0
    6132:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    6134:	697b      	ldr	r3, [r7, #20]
    6136:	2225      	movs	r2, #37	; 0x25
    6138:	2100      	movs	r1, #0
    613a:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
    613c:	697b      	ldr	r3, [r7, #20]
    613e:	7a9b      	ldrb	r3, [r3, #10]
    6140:	2b00      	cmp	r3, #0
    6142:	d00b      	beq.n	615c <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    6144:	697b      	ldr	r3, [r7, #20]
    6146:	0018      	movs	r0, r3
    6148:	4b6a      	ldr	r3, [pc, #424]	; (62f4 <_i2c_master_interrupt_handler+0x268>)
    614a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    614c:	693b      	ldr	r3, [r7, #16]
    614e:	685b      	ldr	r3, [r3, #4]
    6150:	22c0      	movs	r2, #192	; 0xc0
    6152:	0292      	lsls	r2, r2, #10
    6154:	431a      	orrs	r2, r3
    6156:	693b      	ldr	r3, [r7, #16]
    6158:	605a      	str	r2, [r3, #4]
    615a:	e002      	b.n	6162 <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    615c:	693b      	ldr	r3, [r7, #16]
    615e:	2201      	movs	r2, #1
    6160:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    6162:	230e      	movs	r3, #14
    6164:	18fb      	adds	r3, r7, r3
    6166:	781b      	ldrb	r3, [r3, #0]
    6168:	2201      	movs	r2, #1
    616a:	4013      	ands	r3, r2
    616c:	d037      	beq.n	61de <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    616e:	697b      	ldr	r3, [r7, #20]
    6170:	68db      	ldr	r3, [r3, #12]
    6172:	697a      	ldr	r2, [r7, #20]
    6174:	0010      	movs	r0, r2
    6176:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    6178:	e031      	b.n	61de <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    617a:	697b      	ldr	r3, [r7, #20]
    617c:	8b5b      	ldrh	r3, [r3, #26]
    617e:	b29b      	uxth	r3, r3
    6180:	2b00      	cmp	r3, #0
    6182:	d02c      	beq.n	61de <_i2c_master_interrupt_handler+0x152>
    6184:	697b      	ldr	r3, [r7, #20]
    6186:	8b9b      	ldrh	r3, [r3, #28]
    6188:	b29b      	uxth	r3, r3
    618a:	2b00      	cmp	r3, #0
    618c:	d027      	beq.n	61de <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    618e:	693b      	ldr	r3, [r7, #16]
    6190:	8b5b      	ldrh	r3, [r3, #26]
    6192:	b29b      	uxth	r3, r3
    6194:	001a      	movs	r2, r3
    6196:	2320      	movs	r3, #32
    6198:	4013      	ands	r3, r2
    619a:	d111      	bne.n	61c0 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    619c:	230f      	movs	r3, #15
    619e:	18fb      	adds	r3, r7, r3
    61a0:	781b      	ldrb	r3, [r3, #0]
    61a2:	2201      	movs	r2, #1
    61a4:	4053      	eors	r3, r2
    61a6:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    61a8:	2b00      	cmp	r3, #0
    61aa:	d104      	bne.n	61b6 <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    61ac:	697b      	ldr	r3, [r7, #20]
    61ae:	8b9b      	ldrh	r3, [r3, #28]
    61b0:	b29b      	uxth	r3, r3
    61b2:	2b01      	cmp	r3, #1
    61b4:	d004      	beq.n	61c0 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
    61b6:	697b      	ldr	r3, [r7, #20]
    61b8:	2225      	movs	r2, #37	; 0x25
    61ba:	2141      	movs	r1, #65	; 0x41
    61bc:	5499      	strb	r1, [r3, r2]
    61be:	e00e      	b.n	61de <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    61c0:	697b      	ldr	r3, [r7, #20]
    61c2:	2224      	movs	r2, #36	; 0x24
    61c4:	5c9b      	ldrb	r3, [r3, r2]
    61c6:	b2db      	uxtb	r3, r3
    61c8:	2b00      	cmp	r3, #0
    61ca:	d104      	bne.n	61d6 <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
    61cc:	697b      	ldr	r3, [r7, #20]
    61ce:	0018      	movs	r0, r3
    61d0:	4b49      	ldr	r3, [pc, #292]	; (62f8 <_i2c_master_interrupt_handler+0x26c>)
    61d2:	4798      	blx	r3
    61d4:	e003      	b.n	61de <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
    61d6:	697b      	ldr	r3, [r7, #20]
    61d8:	0018      	movs	r0, r3
    61da:	4b48      	ldr	r3, [pc, #288]	; (62fc <_i2c_master_interrupt_handler+0x270>)
    61dc:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    61de:	697b      	ldr	r3, [r7, #20]
    61e0:	8b5b      	ldrh	r3, [r3, #26]
    61e2:	b29b      	uxth	r3, r3
    61e4:	2b00      	cmp	r3, #0
    61e6:	d047      	beq.n	6278 <_i2c_master_interrupt_handler+0x1ec>
    61e8:	697b      	ldr	r3, [r7, #20]
    61ea:	8b9b      	ldrh	r3, [r3, #28]
    61ec:	b29b      	uxth	r3, r3
    61ee:	2b00      	cmp	r3, #0
    61f0:	d142      	bne.n	6278 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
    61f2:	697b      	ldr	r3, [r7, #20]
    61f4:	2225      	movs	r2, #37	; 0x25
    61f6:	5c9b      	ldrb	r3, [r3, r2]
    61f8:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    61fa:	2b05      	cmp	r3, #5
    61fc:	d13c      	bne.n	6278 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    61fe:	697b      	ldr	r3, [r7, #20]
    6200:	2224      	movs	r2, #36	; 0x24
    6202:	5c9b      	ldrb	r3, [r3, r2]
    6204:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    6206:	2b01      	cmp	r3, #1
    6208:	d136      	bne.n	6278 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    620a:	693b      	ldr	r3, [r7, #16]
    620c:	7e1b      	ldrb	r3, [r3, #24]
    620e:	b2db      	uxtb	r3, r3
    6210:	001a      	movs	r2, r3
    6212:	2302      	movs	r3, #2
    6214:	4013      	ands	r3, r2
    6216:	d002      	beq.n	621e <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    6218:	693b      	ldr	r3, [r7, #16]
    621a:	2202      	movs	r2, #2
    621c:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    621e:	693b      	ldr	r3, [r7, #16]
    6220:	2203      	movs	r2, #3
    6222:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
    6224:	697b      	ldr	r3, [r7, #20]
    6226:	2200      	movs	r2, #0
    6228:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    622a:	697b      	ldr	r3, [r7, #20]
    622c:	2225      	movs	r2, #37	; 0x25
    622e:	2100      	movs	r1, #0
    6230:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    6232:	230e      	movs	r3, #14
    6234:	18fb      	adds	r3, r7, r3
    6236:	781b      	ldrb	r3, [r3, #0]
    6238:	2202      	movs	r2, #2
    623a:	4013      	ands	r3, r2
    623c:	d00b      	beq.n	6256 <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    623e:	697b      	ldr	r3, [r7, #20]
    6240:	2224      	movs	r2, #36	; 0x24
    6242:	5c9b      	ldrb	r3, [r3, r2]
    6244:	b2db      	uxtb	r3, r3
    6246:	2b01      	cmp	r3, #1
    6248:	d105      	bne.n	6256 <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    624a:	697b      	ldr	r3, [r7, #20]
    624c:	691b      	ldr	r3, [r3, #16]
    624e:	697a      	ldr	r2, [r7, #20]
    6250:	0010      	movs	r0, r2
    6252:	4798      	blx	r3
    6254:	e010      	b.n	6278 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    6256:	230e      	movs	r3, #14
    6258:	18fb      	adds	r3, r7, r3
    625a:	781b      	ldrb	r3, [r3, #0]
    625c:	2201      	movs	r2, #1
    625e:	4013      	ands	r3, r2
    6260:	d00a      	beq.n	6278 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    6262:	697b      	ldr	r3, [r7, #20]
    6264:	2224      	movs	r2, #36	; 0x24
    6266:	5c9b      	ldrb	r3, [r3, r2]
    6268:	b2db      	uxtb	r3, r3
    626a:	2b00      	cmp	r3, #0
    626c:	d104      	bne.n	6278 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    626e:	697b      	ldr	r3, [r7, #20]
    6270:	68db      	ldr	r3, [r3, #12]
    6272:	697a      	ldr	r2, [r7, #20]
    6274:	0010      	movs	r0, r2
    6276:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    6278:	697b      	ldr	r3, [r7, #20]
    627a:	2225      	movs	r2, #37	; 0x25
    627c:	5c9b      	ldrb	r3, [r3, r2]
    627e:	b2db      	uxtb	r3, r3
    6280:	2b05      	cmp	r3, #5
    6282:	d02e      	beq.n	62e2 <_i2c_master_interrupt_handler+0x256>
    6284:	697b      	ldr	r3, [r7, #20]
    6286:	2225      	movs	r2, #37	; 0x25
    6288:	5c9b      	ldrb	r3, [r3, r2]
    628a:	b2db      	uxtb	r3, r3
    628c:	2b00      	cmp	r3, #0
    628e:	d028      	beq.n	62e2 <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    6290:	693b      	ldr	r3, [r7, #16]
    6292:	2203      	movs	r2, #3
    6294:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    6296:	697b      	ldr	r3, [r7, #20]
    6298:	2200      	movs	r2, #0
    629a:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
    629c:	697b      	ldr	r3, [r7, #20]
    629e:	2200      	movs	r2, #0
    62a0:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    62a2:	697b      	ldr	r3, [r7, #20]
    62a4:	2225      	movs	r2, #37	; 0x25
    62a6:	5c9b      	ldrb	r3, [r3, r2]
    62a8:	b2db      	uxtb	r3, r3
    62aa:	2b41      	cmp	r3, #65	; 0x41
    62ac:	d00e      	beq.n	62cc <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
    62ae:	697b      	ldr	r3, [r7, #20]
    62b0:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    62b2:	2b00      	cmp	r3, #0
    62b4:	d00a      	beq.n	62cc <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
    62b6:	697b      	ldr	r3, [r7, #20]
    62b8:	0018      	movs	r0, r3
    62ba:	4b0e      	ldr	r3, [pc, #56]	; (62f4 <_i2c_master_interrupt_handler+0x268>)
    62bc:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    62be:	693b      	ldr	r3, [r7, #16]
    62c0:	685b      	ldr	r3, [r3, #4]
    62c2:	22e0      	movs	r2, #224	; 0xe0
    62c4:	02d2      	lsls	r2, r2, #11
    62c6:	431a      	orrs	r2, r3
    62c8:	693b      	ldr	r3, [r7, #16]
    62ca:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    62cc:	230e      	movs	r3, #14
    62ce:	18fb      	adds	r3, r7, r3
    62d0:	781b      	ldrb	r3, [r3, #0]
    62d2:	2204      	movs	r2, #4
    62d4:	4013      	ands	r3, r2
    62d6:	d004      	beq.n	62e2 <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    62d8:	697b      	ldr	r3, [r7, #20]
    62da:	695b      	ldr	r3, [r3, #20]
    62dc:	697a      	ldr	r2, [r7, #20]
    62de:	0010      	movs	r0, r2
    62e0:	4798      	blx	r3
		}
	}
}
    62e2:	46c0      	nop			; (mov r8, r8)
    62e4:	46bd      	mov	sp, r7
    62e6:	b006      	add	sp, #24
    62e8:	bd80      	pop	{r7, pc}
    62ea:	46c0      	nop			; (mov r8, r8)
    62ec:	20001224 	.word	0x20001224
    62f0:	00005fd1 	.word	0x00005fd1
    62f4:	00005e41 	.word	0x00005e41
    62f8:	00005f55 	.word	0x00005f55
    62fc:	00005e65 	.word	0x00005e65

00006300 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    6300:	b580      	push	{r7, lr}
    6302:	b082      	sub	sp, #8
    6304:	af00      	add	r7, sp, #0
    6306:	0002      	movs	r2, r0
    6308:	1dfb      	adds	r3, r7, #7
    630a:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    630c:	46c0      	nop			; (mov r8, r8)
    630e:	46bd      	mov	sp, r7
    6310:	b002      	add	sp, #8
    6312:	bd80      	pop	{r7, pc}

00006314 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    6314:	b580      	push	{r7, lr}
    6316:	b084      	sub	sp, #16
    6318:	af00      	add	r7, sp, #0
    631a:	0002      	movs	r2, r0
    631c:	6039      	str	r1, [r7, #0]
    631e:	1dfb      	adds	r3, r7, #7
    6320:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    6322:	4b13      	ldr	r3, [pc, #76]	; (6370 <_sercom_set_handler+0x5c>)
    6324:	781b      	ldrb	r3, [r3, #0]
    6326:	2201      	movs	r2, #1
    6328:	4053      	eors	r3, r2
    632a:	b2db      	uxtb	r3, r3
    632c:	2b00      	cmp	r3, #0
    632e:	d015      	beq.n	635c <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6330:	2300      	movs	r3, #0
    6332:	60fb      	str	r3, [r7, #12]
    6334:	e00c      	b.n	6350 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    6336:	4b0f      	ldr	r3, [pc, #60]	; (6374 <_sercom_set_handler+0x60>)
    6338:	68fa      	ldr	r2, [r7, #12]
    633a:	0092      	lsls	r2, r2, #2
    633c:	490e      	ldr	r1, [pc, #56]	; (6378 <_sercom_set_handler+0x64>)
    633e:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    6340:	4b0e      	ldr	r3, [pc, #56]	; (637c <_sercom_set_handler+0x68>)
    6342:	68fa      	ldr	r2, [r7, #12]
    6344:	0092      	lsls	r2, r2, #2
    6346:	2100      	movs	r1, #0
    6348:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    634a:	68fb      	ldr	r3, [r7, #12]
    634c:	3301      	adds	r3, #1
    634e:	60fb      	str	r3, [r7, #12]
    6350:	68fb      	ldr	r3, [r7, #12]
    6352:	2b05      	cmp	r3, #5
    6354:	d9ef      	bls.n	6336 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    6356:	4b06      	ldr	r3, [pc, #24]	; (6370 <_sercom_set_handler+0x5c>)
    6358:	2201      	movs	r2, #1
    635a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    635c:	1dfb      	adds	r3, r7, #7
    635e:	781a      	ldrb	r2, [r3, #0]
    6360:	4b04      	ldr	r3, [pc, #16]	; (6374 <_sercom_set_handler+0x60>)
    6362:	0092      	lsls	r2, r2, #2
    6364:	6839      	ldr	r1, [r7, #0]
    6366:	50d1      	str	r1, [r2, r3]
}
    6368:	46c0      	nop			; (mov r8, r8)
    636a:	46bd      	mov	sp, r7
    636c:	b004      	add	sp, #16
    636e:	bd80      	pop	{r7, pc}
    6370:	20000ce9 	.word	0x20000ce9
    6374:	20000cec 	.word	0x20000cec
    6378:	00006301 	.word	0x00006301
    637c:	20001224 	.word	0x20001224

00006380 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    6380:	b590      	push	{r4, r7, lr}
    6382:	b085      	sub	sp, #20
    6384:	af00      	add	r7, sp, #0
    6386:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    6388:	2308      	movs	r3, #8
    638a:	18fb      	adds	r3, r7, r3
    638c:	4a0b      	ldr	r2, [pc, #44]	; (63bc <_sercom_get_interrupt_vector+0x3c>)
    638e:	6811      	ldr	r1, [r2, #0]
    6390:	6019      	str	r1, [r3, #0]
    6392:	8892      	ldrh	r2, [r2, #4]
    6394:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    6396:	230f      	movs	r3, #15
    6398:	18fc      	adds	r4, r7, r3
    639a:	687b      	ldr	r3, [r7, #4]
    639c:	0018      	movs	r0, r3
    639e:	4b08      	ldr	r3, [pc, #32]	; (63c0 <_sercom_get_interrupt_vector+0x40>)
    63a0:	4798      	blx	r3
    63a2:	0003      	movs	r3, r0
    63a4:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    63a6:	230f      	movs	r3, #15
    63a8:	18fb      	adds	r3, r7, r3
    63aa:	781b      	ldrb	r3, [r3, #0]
    63ac:	2208      	movs	r2, #8
    63ae:	18ba      	adds	r2, r7, r2
    63b0:	5cd3      	ldrb	r3, [r2, r3]
    63b2:	b25b      	sxtb	r3, r3
}
    63b4:	0018      	movs	r0, r3
    63b6:	46bd      	mov	sp, r7
    63b8:	b005      	add	sp, #20
    63ba:	bd90      	pop	{r4, r7, pc}
    63bc:	000252f8 	.word	0x000252f8
    63c0:	00015439 	.word	0x00015439

000063c4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    63c4:	b580      	push	{r7, lr}
    63c6:	af00      	add	r7, sp, #0
    63c8:	4b03      	ldr	r3, [pc, #12]	; (63d8 <SERCOM0_Handler+0x14>)
    63ca:	681b      	ldr	r3, [r3, #0]
    63cc:	2000      	movs	r0, #0
    63ce:	4798      	blx	r3
    63d0:	46c0      	nop			; (mov r8, r8)
    63d2:	46bd      	mov	sp, r7
    63d4:	bd80      	pop	{r7, pc}
    63d6:	46c0      	nop			; (mov r8, r8)
    63d8:	20000cec 	.word	0x20000cec

000063dc <SERCOM1_Handler>:
    63dc:	b580      	push	{r7, lr}
    63de:	af00      	add	r7, sp, #0
    63e0:	4b03      	ldr	r3, [pc, #12]	; (63f0 <SERCOM1_Handler+0x14>)
    63e2:	685b      	ldr	r3, [r3, #4]
    63e4:	2001      	movs	r0, #1
    63e6:	4798      	blx	r3
    63e8:	46c0      	nop			; (mov r8, r8)
    63ea:	46bd      	mov	sp, r7
    63ec:	bd80      	pop	{r7, pc}
    63ee:	46c0      	nop			; (mov r8, r8)
    63f0:	20000cec 	.word	0x20000cec

000063f4 <SERCOM2_Handler>:
    63f4:	b580      	push	{r7, lr}
    63f6:	af00      	add	r7, sp, #0
    63f8:	4b03      	ldr	r3, [pc, #12]	; (6408 <SERCOM2_Handler+0x14>)
    63fa:	689b      	ldr	r3, [r3, #8]
    63fc:	2002      	movs	r0, #2
    63fe:	4798      	blx	r3
    6400:	46c0      	nop			; (mov r8, r8)
    6402:	46bd      	mov	sp, r7
    6404:	bd80      	pop	{r7, pc}
    6406:	46c0      	nop			; (mov r8, r8)
    6408:	20000cec 	.word	0x20000cec

0000640c <SERCOM3_Handler>:
    640c:	b580      	push	{r7, lr}
    640e:	af00      	add	r7, sp, #0
    6410:	4b03      	ldr	r3, [pc, #12]	; (6420 <SERCOM3_Handler+0x14>)
    6412:	68db      	ldr	r3, [r3, #12]
    6414:	2003      	movs	r0, #3
    6416:	4798      	blx	r3
    6418:	46c0      	nop			; (mov r8, r8)
    641a:	46bd      	mov	sp, r7
    641c:	bd80      	pop	{r7, pc}
    641e:	46c0      	nop			; (mov r8, r8)
    6420:	20000cec 	.word	0x20000cec

00006424 <SERCOM4_Handler>:
    6424:	b580      	push	{r7, lr}
    6426:	af00      	add	r7, sp, #0
    6428:	4b03      	ldr	r3, [pc, #12]	; (6438 <SERCOM4_Handler+0x14>)
    642a:	691b      	ldr	r3, [r3, #16]
    642c:	2004      	movs	r0, #4
    642e:	4798      	blx	r3
    6430:	46c0      	nop			; (mov r8, r8)
    6432:	46bd      	mov	sp, r7
    6434:	bd80      	pop	{r7, pc}
    6436:	46c0      	nop			; (mov r8, r8)
    6438:	20000cec 	.word	0x20000cec

0000643c <SERCOM5_Handler>:
    643c:	b580      	push	{r7, lr}
    643e:	af00      	add	r7, sp, #0
    6440:	4b03      	ldr	r3, [pc, #12]	; (6450 <SERCOM5_Handler+0x14>)
    6442:	695b      	ldr	r3, [r3, #20]
    6444:	2005      	movs	r0, #5
    6446:	4798      	blx	r3
    6448:	46c0      	nop			; (mov r8, r8)
    644a:	46bd      	mov	sp, r7
    644c:	bd80      	pop	{r7, pc}
    644e:	46c0      	nop			; (mov r8, r8)
    6450:	20000cec 	.word	0x20000cec

00006454 <system_interrupt_enter_critical_section>:
{
    6454:	b580      	push	{r7, lr}
    6456:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    6458:	4b02      	ldr	r3, [pc, #8]	; (6464 <system_interrupt_enter_critical_section+0x10>)
    645a:	4798      	blx	r3
}
    645c:	46c0      	nop			; (mov r8, r8)
    645e:	46bd      	mov	sp, r7
    6460:	bd80      	pop	{r7, pc}
    6462:	46c0      	nop			; (mov r8, r8)
    6464:	0000499d 	.word	0x0000499d

00006468 <system_interrupt_leave_critical_section>:
{
    6468:	b580      	push	{r7, lr}
    646a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    646c:	4b02      	ldr	r3, [pc, #8]	; (6478 <system_interrupt_leave_critical_section+0x10>)
    646e:	4798      	blx	r3
}
    6470:	46c0      	nop			; (mov r8, r8)
    6472:	46bd      	mov	sp, r7
    6474:	bd80      	pop	{r7, pc}
    6476:	46c0      	nop			; (mov r8, r8)
    6478:	000049f1 	.word	0x000049f1

0000647c <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    647c:	b580      	push	{r7, lr}
    647e:	b084      	sub	sp, #16
    6480:	af00      	add	r7, sp, #0
    6482:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    6484:	687b      	ldr	r3, [r7, #4]
    6486:	681b      	ldr	r3, [r3, #0]
    6488:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    648a:	68fb      	ldr	r3, [r7, #12]
    648c:	69db      	ldr	r3, [r3, #28]
    648e:	1e5a      	subs	r2, r3, #1
    6490:	4193      	sbcs	r3, r2
    6492:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    6494:	0018      	movs	r0, r3
    6496:	46bd      	mov	sp, r7
    6498:	b004      	add	sp, #16
    649a:	bd80      	pop	{r7, pc}

0000649c <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    649c:	b580      	push	{r7, lr}
    649e:	b082      	sub	sp, #8
    64a0:	af00      	add	r7, sp, #0
    64a2:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    64a4:	46c0      	nop			; (mov r8, r8)
    64a6:	687b      	ldr	r3, [r7, #4]
    64a8:	0018      	movs	r0, r3
    64aa:	4b04      	ldr	r3, [pc, #16]	; (64bc <_usart_wait_for_sync+0x20>)
    64ac:	4798      	blx	r3
    64ae:	1e03      	subs	r3, r0, #0
    64b0:	d1f9      	bne.n	64a6 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    64b2:	46c0      	nop			; (mov r8, r8)
    64b4:	46bd      	mov	sp, r7
    64b6:	b002      	add	sp, #8
    64b8:	bd80      	pop	{r7, pc}
    64ba:	46c0      	nop			; (mov r8, r8)
    64bc:	0000647d 	.word	0x0000647d

000064c0 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    64c0:	b580      	push	{r7, lr}
    64c2:	b086      	sub	sp, #24
    64c4:	af00      	add	r7, sp, #0
    64c6:	60f8      	str	r0, [r7, #12]
    64c8:	60b9      	str	r1, [r7, #8]
    64ca:	1dbb      	adds	r3, r7, #6
    64cc:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    64ce:	68fb      	ldr	r3, [r7, #12]
    64d0:	681b      	ldr	r3, [r3, #0]
    64d2:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    64d4:	4b0f      	ldr	r3, [pc, #60]	; (6514 <_usart_write_buffer+0x54>)
    64d6:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    64d8:	68fb      	ldr	r3, [r7, #12]
    64da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    64dc:	b29b      	uxth	r3, r3
    64de:	2b00      	cmp	r3, #0
    64e0:	d003      	beq.n	64ea <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
    64e2:	4b0d      	ldr	r3, [pc, #52]	; (6518 <_usart_write_buffer+0x58>)
    64e4:	4798      	blx	r3
		return STATUS_BUSY;
    64e6:	2305      	movs	r3, #5
    64e8:	e010      	b.n	650c <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
    64ea:	68fb      	ldr	r3, [r7, #12]
    64ec:	1dba      	adds	r2, r7, #6
    64ee:	8812      	ldrh	r2, [r2, #0]
    64f0:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
    64f2:	4b09      	ldr	r3, [pc, #36]	; (6518 <_usart_write_buffer+0x58>)
    64f4:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
    64f6:	68fb      	ldr	r3, [r7, #12]
    64f8:	68ba      	ldr	r2, [r7, #8]
    64fa:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    64fc:	68fb      	ldr	r3, [r7, #12]
    64fe:	2233      	movs	r2, #51	; 0x33
    6500:	2105      	movs	r1, #5
    6502:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    6504:	697b      	ldr	r3, [r7, #20]
    6506:	2201      	movs	r2, #1
    6508:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
    650a:	2300      	movs	r3, #0
}
    650c:	0018      	movs	r0, r3
    650e:	46bd      	mov	sp, r7
    6510:	b006      	add	sp, #24
    6512:	bd80      	pop	{r7, pc}
    6514:	00006455 	.word	0x00006455
    6518:	00006469 	.word	0x00006469

0000651c <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    651c:	b580      	push	{r7, lr}
    651e:	b086      	sub	sp, #24
    6520:	af00      	add	r7, sp, #0
    6522:	60f8      	str	r0, [r7, #12]
    6524:	60b9      	str	r1, [r7, #8]
    6526:	1dbb      	adds	r3, r7, #6
    6528:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    652a:	68fb      	ldr	r3, [r7, #12]
    652c:	681b      	ldr	r3, [r3, #0]
    652e:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    6530:	4b16      	ldr	r3, [pc, #88]	; (658c <_usart_read_buffer+0x70>)
    6532:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    6534:	68fb      	ldr	r3, [r7, #12]
    6536:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    6538:	b29b      	uxth	r3, r3
    653a:	2b00      	cmp	r3, #0
    653c:	d003      	beq.n	6546 <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
    653e:	4b14      	ldr	r3, [pc, #80]	; (6590 <_usart_read_buffer+0x74>)
    6540:	4798      	blx	r3
		return STATUS_BUSY;
    6542:	2305      	movs	r3, #5
    6544:	e01e      	b.n	6584 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    6546:	68fb      	ldr	r3, [r7, #12]
    6548:	1dba      	adds	r2, r7, #6
    654a:	8812      	ldrh	r2, [r2, #0]
    654c:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
    654e:	4b10      	ldr	r3, [pc, #64]	; (6590 <_usart_read_buffer+0x74>)
    6550:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
    6552:	68fb      	ldr	r3, [r7, #12]
    6554:	68ba      	ldr	r2, [r7, #8]
    6556:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    6558:	68fb      	ldr	r3, [r7, #12]
    655a:	2232      	movs	r2, #50	; 0x32
    655c:	2105      	movs	r1, #5
    655e:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    6560:	697b      	ldr	r3, [r7, #20]
    6562:	2204      	movs	r2, #4
    6564:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
    6566:	68fb      	ldr	r3, [r7, #12]
    6568:	7a1b      	ldrb	r3, [r3, #8]
    656a:	2b00      	cmp	r3, #0
    656c:	d002      	beq.n	6574 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    656e:	697b      	ldr	r3, [r7, #20]
    6570:	2220      	movs	r2, #32
    6572:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    6574:	68fb      	ldr	r3, [r7, #12]
    6576:	7a5b      	ldrb	r3, [r3, #9]
    6578:	2b00      	cmp	r3, #0
    657a:	d002      	beq.n	6582 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    657c:	697b      	ldr	r3, [r7, #20]
    657e:	2208      	movs	r2, #8
    6580:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
    6582:	2300      	movs	r3, #0
}
    6584:	0018      	movs	r0, r3
    6586:	46bd      	mov	sp, r7
    6588:	b006      	add	sp, #24
    658a:	bd80      	pop	{r7, pc}
    658c:	00006455 	.word	0x00006455
    6590:	00006469 	.word	0x00006469

00006594 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
    6594:	b580      	push	{r7, lr}
    6596:	b084      	sub	sp, #16
    6598:	af00      	add	r7, sp, #0
    659a:	60f8      	str	r0, [r7, #12]
    659c:	60b9      	str	r1, [r7, #8]
    659e:	1dfb      	adds	r3, r7, #7
    65a0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    65a2:	1dfb      	adds	r3, r7, #7
    65a4:	781b      	ldrb	r3, [r3, #0]
    65a6:	68fa      	ldr	r2, [r7, #12]
    65a8:	3302      	adds	r3, #2
    65aa:	009b      	lsls	r3, r3, #2
    65ac:	18d3      	adds	r3, r2, r3
    65ae:	3304      	adds	r3, #4
    65b0:	68ba      	ldr	r2, [r7, #8]
    65b2:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    65b4:	68fb      	ldr	r3, [r7, #12]
    65b6:	2230      	movs	r2, #48	; 0x30
    65b8:	5c9b      	ldrb	r3, [r3, r2]
    65ba:	b25a      	sxtb	r2, r3
    65bc:	1dfb      	adds	r3, r7, #7
    65be:	781b      	ldrb	r3, [r3, #0]
    65c0:	2101      	movs	r1, #1
    65c2:	4099      	lsls	r1, r3
    65c4:	000b      	movs	r3, r1
    65c6:	b25b      	sxtb	r3, r3
    65c8:	4313      	orrs	r3, r2
    65ca:	b25b      	sxtb	r3, r3
    65cc:	b2d9      	uxtb	r1, r3
    65ce:	68fb      	ldr	r3, [r7, #12]
    65d0:	2230      	movs	r2, #48	; 0x30
    65d2:	5499      	strb	r1, [r3, r2]
}
    65d4:	46c0      	nop			; (mov r8, r8)
    65d6:	46bd      	mov	sp, r7
    65d8:	b004      	add	sp, #16
    65da:	bd80      	pop	{r7, pc}

000065dc <usart_read_job>:
 * \retval  STATUS_BUSY  If operation was not completed
 */
enum status_code usart_read_job(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    65dc:	b580      	push	{r7, lr}
    65de:	b082      	sub	sp, #8
    65e0:	af00      	add	r7, sp, #0
    65e2:	6078      	str	r0, [r7, #4]
    65e4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	/* Call internal read buffer function with length 1 */
	return _usart_read_buffer(module, (uint8_t *)rx_data, 1);
    65e6:	6839      	ldr	r1, [r7, #0]
    65e8:	687b      	ldr	r3, [r7, #4]
    65ea:	2201      	movs	r2, #1
    65ec:	0018      	movs	r0, r3
    65ee:	4b03      	ldr	r3, [pc, #12]	; (65fc <usart_read_job+0x20>)
    65f0:	4798      	blx	r3
    65f2:	0003      	movs	r3, r0
}
    65f4:	0018      	movs	r0, r3
    65f6:	46bd      	mov	sp, r7
    65f8:	b002      	add	sp, #8
    65fa:	bd80      	pop	{r7, pc}
    65fc:	0000651d 	.word	0x0000651d

00006600 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    6600:	b580      	push	{r7, lr}
    6602:	b084      	sub	sp, #16
    6604:	af00      	add	r7, sp, #0
    6606:	60f8      	str	r0, [r7, #12]
    6608:	60b9      	str	r1, [r7, #8]
    660a:	1dbb      	adds	r3, r7, #6
    660c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
    660e:	1dbb      	adds	r3, r7, #6
    6610:	881b      	ldrh	r3, [r3, #0]
    6612:	2b00      	cmp	r3, #0
    6614:	d101      	bne.n	661a <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    6616:	2317      	movs	r3, #23
    6618:	e010      	b.n	663c <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    661a:	68fb      	ldr	r3, [r7, #12]
    661c:	79db      	ldrb	r3, [r3, #7]
    661e:	2201      	movs	r2, #1
    6620:	4053      	eors	r3, r2
    6622:	b2db      	uxtb	r3, r3
    6624:	2b00      	cmp	r3, #0
    6626:	d001      	beq.n	662c <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    6628:	231c      	movs	r3, #28
    662a:	e007      	b.n	663c <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
    662c:	1dbb      	adds	r3, r7, #6
    662e:	881a      	ldrh	r2, [r3, #0]
    6630:	68b9      	ldr	r1, [r7, #8]
    6632:	68fb      	ldr	r3, [r7, #12]
    6634:	0018      	movs	r0, r3
    6636:	4b03      	ldr	r3, [pc, #12]	; (6644 <usart_write_buffer_job+0x44>)
    6638:	4798      	blx	r3
    663a:	0003      	movs	r3, r0
}
    663c:	0018      	movs	r0, r3
    663e:	46bd      	mov	sp, r7
    6640:	b004      	add	sp, #16
    6642:	bd80      	pop	{r7, pc}
    6644:	000064c1 	.word	0x000064c1

00006648 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    6648:	b580      	push	{r7, lr}
    664a:	b088      	sub	sp, #32
    664c:	af00      	add	r7, sp, #0
    664e:	0002      	movs	r2, r0
    6650:	1dfb      	adds	r3, r7, #7
    6652:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    6654:	1dfb      	adds	r3, r7, #7
    6656:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    6658:	4ba3      	ldr	r3, [pc, #652]	; (68e8 <_usart_interrupt_handler+0x2a0>)
    665a:	0092      	lsls	r2, r2, #2
    665c:	58d3      	ldr	r3, [r2, r3]
    665e:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    6660:	69bb      	ldr	r3, [r7, #24]
    6662:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    6664:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    6666:	69bb      	ldr	r3, [r7, #24]
    6668:	0018      	movs	r0, r3
    666a:	4ba0      	ldr	r3, [pc, #640]	; (68ec <_usart_interrupt_handler+0x2a4>)
    666c:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    666e:	697b      	ldr	r3, [r7, #20]
    6670:	7e1b      	ldrb	r3, [r3, #24]
    6672:	b2da      	uxtb	r2, r3
    6674:	2312      	movs	r3, #18
    6676:	18fb      	adds	r3, r7, r3
    6678:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    667a:	697b      	ldr	r3, [r7, #20]
    667c:	7d9b      	ldrb	r3, [r3, #22]
    667e:	b2db      	uxtb	r3, r3
    6680:	b29a      	uxth	r2, r3
    6682:	2312      	movs	r3, #18
    6684:	18fb      	adds	r3, r7, r3
    6686:	2112      	movs	r1, #18
    6688:	1879      	adds	r1, r7, r1
    668a:	8809      	ldrh	r1, [r1, #0]
    668c:	400a      	ands	r2, r1
    668e:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    6690:	69bb      	ldr	r3, [r7, #24]
    6692:	2230      	movs	r2, #48	; 0x30
    6694:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    6696:	69ba      	ldr	r2, [r7, #24]
    6698:	2131      	movs	r1, #49	; 0x31
    669a:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    669c:	4013      	ands	r3, r2
    669e:	b2da      	uxtb	r2, r3
    66a0:	2310      	movs	r3, #16
    66a2:	18fb      	adds	r3, r7, r3
    66a4:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    66a6:	2312      	movs	r3, #18
    66a8:	18fb      	adds	r3, r7, r3
    66aa:	881b      	ldrh	r3, [r3, #0]
    66ac:	2201      	movs	r2, #1
    66ae:	4013      	ands	r3, r2
    66b0:	d044      	beq.n	673c <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    66b2:	69bb      	ldr	r3, [r7, #24]
    66b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    66b6:	b29b      	uxth	r3, r3
    66b8:	2b00      	cmp	r3, #0
    66ba:	d03c      	beq.n	6736 <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    66bc:	69bb      	ldr	r3, [r7, #24]
    66be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    66c0:	781b      	ldrb	r3, [r3, #0]
    66c2:	b2da      	uxtb	r2, r3
    66c4:	231c      	movs	r3, #28
    66c6:	18fb      	adds	r3, r7, r3
    66c8:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    66ca:	69bb      	ldr	r3, [r7, #24]
    66cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    66ce:	1c5a      	adds	r2, r3, #1
    66d0:	69bb      	ldr	r3, [r7, #24]
    66d2:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    66d4:	69bb      	ldr	r3, [r7, #24]
    66d6:	795b      	ldrb	r3, [r3, #5]
    66d8:	2b01      	cmp	r3, #1
    66da:	d113      	bne.n	6704 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    66dc:	69bb      	ldr	r3, [r7, #24]
    66de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    66e0:	781b      	ldrb	r3, [r3, #0]
    66e2:	b2db      	uxtb	r3, r3
    66e4:	021b      	lsls	r3, r3, #8
    66e6:	b21a      	sxth	r2, r3
    66e8:	231c      	movs	r3, #28
    66ea:	18fb      	adds	r3, r7, r3
    66ec:	2100      	movs	r1, #0
    66ee:	5e5b      	ldrsh	r3, [r3, r1]
    66f0:	4313      	orrs	r3, r2
    66f2:	b21a      	sxth	r2, r3
    66f4:	231c      	movs	r3, #28
    66f6:	18fb      	adds	r3, r7, r3
    66f8:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    66fa:	69bb      	ldr	r3, [r7, #24]
    66fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    66fe:	1c5a      	adds	r2, r3, #1
    6700:	69bb      	ldr	r3, [r7, #24]
    6702:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    6704:	231c      	movs	r3, #28
    6706:	18fb      	adds	r3, r7, r3
    6708:	881b      	ldrh	r3, [r3, #0]
    670a:	05db      	lsls	r3, r3, #23
    670c:	0ddb      	lsrs	r3, r3, #23
    670e:	b29a      	uxth	r2, r3
    6710:	697b      	ldr	r3, [r7, #20]
    6712:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    6714:	69bb      	ldr	r3, [r7, #24]
    6716:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    6718:	b29b      	uxth	r3, r3
    671a:	3b01      	subs	r3, #1
    671c:	b29b      	uxth	r3, r3
    671e:	69ba      	ldr	r2, [r7, #24]
    6720:	1c19      	adds	r1, r3, #0
    6722:	85d1      	strh	r1, [r2, #46]	; 0x2e
    6724:	2b00      	cmp	r3, #0
    6726:	d109      	bne.n	673c <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    6728:	697b      	ldr	r3, [r7, #20]
    672a:	2201      	movs	r2, #1
    672c:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    672e:	697b      	ldr	r3, [r7, #20]
    6730:	2202      	movs	r2, #2
    6732:	759a      	strb	r2, [r3, #22]
    6734:	e002      	b.n	673c <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    6736:	697b      	ldr	r3, [r7, #20]
    6738:	2201      	movs	r2, #1
    673a:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    673c:	2312      	movs	r3, #18
    673e:	18fb      	adds	r3, r7, r3
    6740:	881b      	ldrh	r3, [r3, #0]
    6742:	2202      	movs	r2, #2
    6744:	4013      	ands	r3, r2
    6746:	d011      	beq.n	676c <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    6748:	697b      	ldr	r3, [r7, #20]
    674a:	2202      	movs	r2, #2
    674c:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    674e:	69bb      	ldr	r3, [r7, #24]
    6750:	2233      	movs	r2, #51	; 0x33
    6752:	2100      	movs	r1, #0
    6754:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    6756:	2310      	movs	r3, #16
    6758:	18fb      	adds	r3, r7, r3
    675a:	881b      	ldrh	r3, [r3, #0]
    675c:	2201      	movs	r2, #1
    675e:	4013      	ands	r3, r2
    6760:	d004      	beq.n	676c <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    6762:	69bb      	ldr	r3, [r7, #24]
    6764:	68db      	ldr	r3, [r3, #12]
    6766:	69ba      	ldr	r2, [r7, #24]
    6768:	0010      	movs	r0, r2
    676a:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    676c:	2312      	movs	r3, #18
    676e:	18fb      	adds	r3, r7, r3
    6770:	881b      	ldrh	r3, [r3, #0]
    6772:	2204      	movs	r2, #4
    6774:	4013      	ands	r3, r2
    6776:	d100      	bne.n	677a <_usart_interrupt_handler+0x132>
    6778:	e0bd      	b.n	68f6 <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    677a:	69bb      	ldr	r3, [r7, #24]
    677c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    677e:	b29b      	uxth	r3, r3
    6780:	2b00      	cmp	r3, #0
    6782:	d100      	bne.n	6786 <_usart_interrupt_handler+0x13e>
    6784:	e0b4      	b.n	68f0 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    6786:	697b      	ldr	r3, [r7, #20]
    6788:	8b5b      	ldrh	r3, [r3, #26]
    678a:	b29b      	uxth	r3, r3
    678c:	b2da      	uxtb	r2, r3
    678e:	231f      	movs	r3, #31
    6790:	18fb      	adds	r3, r7, r3
    6792:	213f      	movs	r1, #63	; 0x3f
    6794:	400a      	ands	r2, r1
    6796:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    6798:	231f      	movs	r3, #31
    679a:	18fb      	adds	r3, r7, r3
    679c:	781b      	ldrb	r3, [r3, #0]
    679e:	2208      	movs	r2, #8
    67a0:	4013      	ands	r3, r2
    67a2:	d007      	beq.n	67b4 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    67a4:	231f      	movs	r3, #31
    67a6:	18fb      	adds	r3, r7, r3
    67a8:	221f      	movs	r2, #31
    67aa:	18ba      	adds	r2, r7, r2
    67ac:	7812      	ldrb	r2, [r2, #0]
    67ae:	2108      	movs	r1, #8
    67b0:	438a      	bics	r2, r1
    67b2:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    67b4:	231f      	movs	r3, #31
    67b6:	18fb      	adds	r3, r7, r3
    67b8:	781b      	ldrb	r3, [r3, #0]
    67ba:	2b00      	cmp	r3, #0
    67bc:	d050      	beq.n	6860 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    67be:	231f      	movs	r3, #31
    67c0:	18fb      	adds	r3, r7, r3
    67c2:	781b      	ldrb	r3, [r3, #0]
    67c4:	2202      	movs	r2, #2
    67c6:	4013      	ands	r3, r2
    67c8:	d007      	beq.n	67da <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    67ca:	69bb      	ldr	r3, [r7, #24]
    67cc:	2232      	movs	r2, #50	; 0x32
    67ce:	211a      	movs	r1, #26
    67d0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    67d2:	697b      	ldr	r3, [r7, #20]
    67d4:	2202      	movs	r2, #2
    67d6:	835a      	strh	r2, [r3, #26]
    67d8:	e036      	b.n	6848 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    67da:	231f      	movs	r3, #31
    67dc:	18fb      	adds	r3, r7, r3
    67de:	781b      	ldrb	r3, [r3, #0]
    67e0:	2204      	movs	r2, #4
    67e2:	4013      	ands	r3, r2
    67e4:	d007      	beq.n	67f6 <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    67e6:	69bb      	ldr	r3, [r7, #24]
    67e8:	2232      	movs	r2, #50	; 0x32
    67ea:	211e      	movs	r1, #30
    67ec:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    67ee:	697b      	ldr	r3, [r7, #20]
    67f0:	2204      	movs	r2, #4
    67f2:	835a      	strh	r2, [r3, #26]
    67f4:	e028      	b.n	6848 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    67f6:	231f      	movs	r3, #31
    67f8:	18fb      	adds	r3, r7, r3
    67fa:	781b      	ldrb	r3, [r3, #0]
    67fc:	2201      	movs	r2, #1
    67fe:	4013      	ands	r3, r2
    6800:	d007      	beq.n	6812 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    6802:	69bb      	ldr	r3, [r7, #24]
    6804:	2232      	movs	r2, #50	; 0x32
    6806:	2113      	movs	r1, #19
    6808:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    680a:	697b      	ldr	r3, [r7, #20]
    680c:	2201      	movs	r2, #1
    680e:	835a      	strh	r2, [r3, #26]
    6810:	e01a      	b.n	6848 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    6812:	231f      	movs	r3, #31
    6814:	18fb      	adds	r3, r7, r3
    6816:	781b      	ldrb	r3, [r3, #0]
    6818:	2210      	movs	r2, #16
    681a:	4013      	ands	r3, r2
    681c:	d007      	beq.n	682e <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    681e:	69bb      	ldr	r3, [r7, #24]
    6820:	2232      	movs	r2, #50	; 0x32
    6822:	2142      	movs	r1, #66	; 0x42
    6824:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    6826:	697b      	ldr	r3, [r7, #20]
    6828:	2210      	movs	r2, #16
    682a:	835a      	strh	r2, [r3, #26]
    682c:	e00c      	b.n	6848 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    682e:	231f      	movs	r3, #31
    6830:	18fb      	adds	r3, r7, r3
    6832:	781b      	ldrb	r3, [r3, #0]
    6834:	2220      	movs	r2, #32
    6836:	4013      	ands	r3, r2
    6838:	d006      	beq.n	6848 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    683a:	69bb      	ldr	r3, [r7, #24]
    683c:	2232      	movs	r2, #50	; 0x32
    683e:	2141      	movs	r1, #65	; 0x41
    6840:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    6842:	697b      	ldr	r3, [r7, #20]
    6844:	2220      	movs	r2, #32
    6846:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    6848:	2310      	movs	r3, #16
    684a:	18fb      	adds	r3, r7, r3
    684c:	881b      	ldrh	r3, [r3, #0]
    684e:	2204      	movs	r2, #4
    6850:	4013      	ands	r3, r2
				if (callback_status
    6852:	d050      	beq.n	68f6 <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    6854:	69bb      	ldr	r3, [r7, #24]
    6856:	695b      	ldr	r3, [r3, #20]
    6858:	69ba      	ldr	r2, [r7, #24]
    685a:	0010      	movs	r0, r2
    685c:	4798      	blx	r3
    685e:	e04a      	b.n	68f6 <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    6860:	697b      	ldr	r3, [r7, #20]
    6862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    6864:	b29a      	uxth	r2, r3
    6866:	230e      	movs	r3, #14
    6868:	18fb      	adds	r3, r7, r3
    686a:	05d2      	lsls	r2, r2, #23
    686c:	0dd2      	lsrs	r2, r2, #23
    686e:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    6870:	69bb      	ldr	r3, [r7, #24]
    6872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6874:	220e      	movs	r2, #14
    6876:	18ba      	adds	r2, r7, r2
    6878:	8812      	ldrh	r2, [r2, #0]
    687a:	b2d2      	uxtb	r2, r2
    687c:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    687e:	69bb      	ldr	r3, [r7, #24]
    6880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6882:	1c5a      	adds	r2, r3, #1
    6884:	69bb      	ldr	r3, [r7, #24]
    6886:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    6888:	69bb      	ldr	r3, [r7, #24]
    688a:	795b      	ldrb	r3, [r3, #5]
    688c:	2b01      	cmp	r3, #1
    688e:	d10d      	bne.n	68ac <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    6890:	69bb      	ldr	r3, [r7, #24]
    6892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6894:	220e      	movs	r2, #14
    6896:	18ba      	adds	r2, r7, r2
    6898:	8812      	ldrh	r2, [r2, #0]
    689a:	0a12      	lsrs	r2, r2, #8
    689c:	b292      	uxth	r2, r2
    689e:	b2d2      	uxtb	r2, r2
    68a0:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    68a2:	69bb      	ldr	r3, [r7, #24]
    68a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    68a6:	1c5a      	adds	r2, r3, #1
    68a8:	69bb      	ldr	r3, [r7, #24]
    68aa:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    68ac:	69bb      	ldr	r3, [r7, #24]
    68ae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    68b0:	b29b      	uxth	r3, r3
    68b2:	3b01      	subs	r3, #1
    68b4:	b29b      	uxth	r3, r3
    68b6:	69ba      	ldr	r2, [r7, #24]
    68b8:	1c19      	adds	r1, r3, #0
    68ba:	8591      	strh	r1, [r2, #44]	; 0x2c
    68bc:	2b00      	cmp	r3, #0
    68be:	d11a      	bne.n	68f6 <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    68c0:	697b      	ldr	r3, [r7, #20]
    68c2:	2204      	movs	r2, #4
    68c4:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    68c6:	69bb      	ldr	r3, [r7, #24]
    68c8:	2232      	movs	r2, #50	; 0x32
    68ca:	2100      	movs	r1, #0
    68cc:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    68ce:	2310      	movs	r3, #16
    68d0:	18fb      	adds	r3, r7, r3
    68d2:	881b      	ldrh	r3, [r3, #0]
    68d4:	2202      	movs	r2, #2
    68d6:	4013      	ands	r3, r2
					if (callback_status
    68d8:	d00d      	beq.n	68f6 <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    68da:	69bb      	ldr	r3, [r7, #24]
    68dc:	691b      	ldr	r3, [r3, #16]
    68de:	69ba      	ldr	r2, [r7, #24]
    68e0:	0010      	movs	r0, r2
    68e2:	4798      	blx	r3
    68e4:	e007      	b.n	68f6 <_usart_interrupt_handler+0x2ae>
    68e6:	46c0      	nop			; (mov r8, r8)
    68e8:	20001224 	.word	0x20001224
    68ec:	0000649d 	.word	0x0000649d
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    68f0:	697b      	ldr	r3, [r7, #20]
    68f2:	2204      	movs	r2, #4
    68f4:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    68f6:	2312      	movs	r3, #18
    68f8:	18fb      	adds	r3, r7, r3
    68fa:	881b      	ldrh	r3, [r3, #0]
    68fc:	2210      	movs	r2, #16
    68fe:	4013      	ands	r3, r2
    6900:	d010      	beq.n	6924 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    6902:	697b      	ldr	r3, [r7, #20]
    6904:	2210      	movs	r2, #16
    6906:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    6908:	697b      	ldr	r3, [r7, #20]
    690a:	2210      	movs	r2, #16
    690c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    690e:	2310      	movs	r3, #16
    6910:	18fb      	adds	r3, r7, r3
    6912:	881b      	ldrh	r3, [r3, #0]
    6914:	2210      	movs	r2, #16
    6916:	4013      	ands	r3, r2
    6918:	d004      	beq.n	6924 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    691a:	69bb      	ldr	r3, [r7, #24]
    691c:	69db      	ldr	r3, [r3, #28]
    691e:	69ba      	ldr	r2, [r7, #24]
    6920:	0010      	movs	r0, r2
    6922:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    6924:	2312      	movs	r3, #18
    6926:	18fb      	adds	r3, r7, r3
    6928:	881b      	ldrh	r3, [r3, #0]
    692a:	2220      	movs	r2, #32
    692c:	4013      	ands	r3, r2
    692e:	d010      	beq.n	6952 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    6930:	697b      	ldr	r3, [r7, #20]
    6932:	2220      	movs	r2, #32
    6934:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    6936:	697b      	ldr	r3, [r7, #20]
    6938:	2220      	movs	r2, #32
    693a:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    693c:	2310      	movs	r3, #16
    693e:	18fb      	adds	r3, r7, r3
    6940:	881b      	ldrh	r3, [r3, #0]
    6942:	2208      	movs	r2, #8
    6944:	4013      	ands	r3, r2
    6946:	d004      	beq.n	6952 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    6948:	69bb      	ldr	r3, [r7, #24]
    694a:	699b      	ldr	r3, [r3, #24]
    694c:	69ba      	ldr	r2, [r7, #24]
    694e:	0010      	movs	r0, r2
    6950:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    6952:	2312      	movs	r3, #18
    6954:	18fb      	adds	r3, r7, r3
    6956:	881b      	ldrh	r3, [r3, #0]
    6958:	2208      	movs	r2, #8
    695a:	4013      	ands	r3, r2
    695c:	d010      	beq.n	6980 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    695e:	697b      	ldr	r3, [r7, #20]
    6960:	2208      	movs	r2, #8
    6962:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    6964:	697b      	ldr	r3, [r7, #20]
    6966:	2208      	movs	r2, #8
    6968:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    696a:	2310      	movs	r3, #16
    696c:	18fb      	adds	r3, r7, r3
    696e:	881b      	ldrh	r3, [r3, #0]
    6970:	2220      	movs	r2, #32
    6972:	4013      	ands	r3, r2
    6974:	d004      	beq.n	6980 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    6976:	69bb      	ldr	r3, [r7, #24]
    6978:	6a1b      	ldr	r3, [r3, #32]
    697a:	69ba      	ldr	r2, [r7, #24]
    697c:	0010      	movs	r0, r2
    697e:	4798      	blx	r3
		}
	}
#endif
}
    6980:	46c0      	nop			; (mov r8, r8)
    6982:	46bd      	mov	sp, r7
    6984:	b008      	add	sp, #32
    6986:	bd80      	pop	{r7, pc}

00006988 <tc_register_callback>:
 */
enum status_code tc_register_callback(
		struct tc_module *const module,
		tc_callback_t callback_func,
		const enum tc_callback callback_type)
{
    6988:	b580      	push	{r7, lr}
    698a:	b084      	sub	sp, #16
    698c:	af00      	add	r7, sp, #0
    698e:	60f8      	str	r0, [r7, #12]
    6990:	60b9      	str	r1, [r7, #8]
    6992:	1dfb      	adds	r3, r7, #7
    6994:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    6996:	1dfb      	adds	r3, r7, #7
    6998:	781a      	ldrb	r2, [r3, #0]
    699a:	68fb      	ldr	r3, [r7, #12]
    699c:	3202      	adds	r2, #2
    699e:	0092      	lsls	r2, r2, #2
    69a0:	68b9      	ldr	r1, [r7, #8]
    69a2:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    69a4:	1dfb      	adds	r3, r7, #7
    69a6:	781b      	ldrb	r3, [r3, #0]
    69a8:	2b02      	cmp	r3, #2
    69aa:	d107      	bne.n	69bc <tc_register_callback+0x34>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    69ac:	68fb      	ldr	r3, [r7, #12]
    69ae:	7e1b      	ldrb	r3, [r3, #24]
    69b0:	2210      	movs	r2, #16
    69b2:	4313      	orrs	r3, r2
    69b4:	b2da      	uxtb	r2, r3
    69b6:	68fb      	ldr	r3, [r7, #12]
    69b8:	761a      	strb	r2, [r3, #24]
    69ba:	e019      	b.n	69f0 <tc_register_callback+0x68>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    69bc:	1dfb      	adds	r3, r7, #7
    69be:	781b      	ldrb	r3, [r3, #0]
    69c0:	2b03      	cmp	r3, #3
    69c2:	d107      	bne.n	69d4 <tc_register_callback+0x4c>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    69c4:	68fb      	ldr	r3, [r7, #12]
    69c6:	7e1b      	ldrb	r3, [r3, #24]
    69c8:	2220      	movs	r2, #32
    69ca:	4313      	orrs	r3, r2
    69cc:	b2da      	uxtb	r2, r3
    69ce:	68fb      	ldr	r3, [r7, #12]
    69d0:	761a      	strb	r2, [r3, #24]
    69d2:	e00d      	b.n	69f0 <tc_register_callback+0x68>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    69d4:	68fb      	ldr	r3, [r7, #12]
    69d6:	7e1b      	ldrb	r3, [r3, #24]
    69d8:	b25a      	sxtb	r2, r3
    69da:	1dfb      	adds	r3, r7, #7
    69dc:	781b      	ldrb	r3, [r3, #0]
    69de:	2101      	movs	r1, #1
    69e0:	4099      	lsls	r1, r3
    69e2:	000b      	movs	r3, r1
    69e4:	b25b      	sxtb	r3, r3
    69e6:	4313      	orrs	r3, r2
    69e8:	b25b      	sxtb	r3, r3
    69ea:	b2da      	uxtb	r2, r3
    69ec:	68fb      	ldr	r3, [r7, #12]
    69ee:	761a      	strb	r2, [r3, #24]
	}
	return STATUS_OK;
    69f0:	2300      	movs	r3, #0
}
    69f2:	0018      	movs	r0, r3
    69f4:	46bd      	mov	sp, r7
    69f6:	b004      	add	sp, #16
    69f8:	bd80      	pop	{r7, pc}
	...

000069fc <TC0_Handler>:
		{ \
			_tc_interrupt_handler(m); \
		}

#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
    69fc:	b580      	push	{r7, lr}
    69fe:	af00      	add	r7, sp, #0
    6a00:	2000      	movs	r0, #0
    6a02:	4b02      	ldr	r3, [pc, #8]	; (6a0c <TC0_Handler+0x10>)
    6a04:	4798      	blx	r3
    6a06:	46c0      	nop			; (mov r8, r8)
    6a08:	46bd      	mov	sp, r7
    6a0a:	bd80      	pop	{r7, pc}
    6a0c:	00006a39 	.word	0x00006a39

00006a10 <TC1_Handler>:
	_TC_INTERRUPT_HANDLER(1,1)
    6a10:	b580      	push	{r7, lr}
    6a12:	af00      	add	r7, sp, #0
    6a14:	2001      	movs	r0, #1
    6a16:	4b02      	ldr	r3, [pc, #8]	; (6a20 <TC1_Handler+0x10>)
    6a18:	4798      	blx	r3
    6a1a:	46c0      	nop			; (mov r8, r8)
    6a1c:	46bd      	mov	sp, r7
    6a1e:	bd80      	pop	{r7, pc}
    6a20:	00006a39 	.word	0x00006a39

00006a24 <TC4_Handler>:
	_TC_INTERRUPT_HANDLER(4,2)
    6a24:	b580      	push	{r7, lr}
    6a26:	af00      	add	r7, sp, #0
    6a28:	2002      	movs	r0, #2
    6a2a:	4b02      	ldr	r3, [pc, #8]	; (6a34 <TC4_Handler+0x10>)
    6a2c:	4798      	blx	r3
    6a2e:	46c0      	nop			; (mov r8, r8)
    6a30:	46bd      	mov	sp, r7
    6a32:	bd80      	pop	{r7, pc}
    6a34:	00006a39 	.word	0x00006a39

00006a38 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    6a38:	b580      	push	{r7, lr}
    6a3a:	b084      	sub	sp, #16
    6a3c:	af00      	add	r7, sp, #0
    6a3e:	0002      	movs	r2, r0
    6a40:	1dfb      	adds	r3, r7, #7
    6a42:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
    6a44:	1dfb      	adds	r3, r7, #7
    6a46:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
    6a48:	4b28      	ldr	r3, [pc, #160]	; (6aec <_tc_interrupt_handler+0xb4>)
    6a4a:	0092      	lsls	r2, r2, #2
    6a4c:	58d3      	ldr	r3, [r2, r3]
    6a4e:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    6a50:	68fb      	ldr	r3, [r7, #12]
    6a52:	681b      	ldr	r3, [r3, #0]
    6a54:	7a9b      	ldrb	r3, [r3, #10]
    6a56:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
    6a58:	68fa      	ldr	r2, [r7, #12]
    6a5a:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    6a5c:	4013      	ands	r3, r2
    6a5e:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
    6a60:	68fb      	ldr	r3, [r7, #12]
    6a62:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    6a64:	230b      	movs	r3, #11
    6a66:	18fb      	adds	r3, r7, r3
    6a68:	400a      	ands	r2, r1
    6a6a:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    6a6c:	230b      	movs	r3, #11
    6a6e:	18fb      	adds	r3, r7, r3
    6a70:	781b      	ldrb	r3, [r3, #0]
    6a72:	2201      	movs	r2, #1
    6a74:	4013      	ands	r3, r2
    6a76:	d008      	beq.n	6a8a <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    6a78:	68fb      	ldr	r3, [r7, #12]
    6a7a:	689b      	ldr	r3, [r3, #8]
    6a7c:	68fa      	ldr	r2, [r7, #12]
    6a7e:	0010      	movs	r0, r2
    6a80:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    6a82:	68fb      	ldr	r3, [r7, #12]
    6a84:	681b      	ldr	r3, [r3, #0]
    6a86:	2201      	movs	r2, #1
    6a88:	729a      	strb	r2, [r3, #10]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    6a8a:	230b      	movs	r3, #11
    6a8c:	18fb      	adds	r3, r7, r3
    6a8e:	781b      	ldrb	r3, [r3, #0]
    6a90:	2202      	movs	r2, #2
    6a92:	4013      	ands	r3, r2
    6a94:	d008      	beq.n	6aa8 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    6a96:	68fb      	ldr	r3, [r7, #12]
    6a98:	68db      	ldr	r3, [r3, #12]
    6a9a:	68fa      	ldr	r2, [r7, #12]
    6a9c:	0010      	movs	r0, r2
    6a9e:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    6aa0:	68fb      	ldr	r3, [r7, #12]
    6aa2:	681b      	ldr	r3, [r3, #0]
    6aa4:	2202      	movs	r2, #2
    6aa6:	729a      	strb	r2, [r3, #10]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    6aa8:	230b      	movs	r3, #11
    6aaa:	18fb      	adds	r3, r7, r3
    6aac:	781b      	ldrb	r3, [r3, #0]
    6aae:	2210      	movs	r2, #16
    6ab0:	4013      	ands	r3, r2
    6ab2:	d008      	beq.n	6ac6 <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    6ab4:	68fb      	ldr	r3, [r7, #12]
    6ab6:	691b      	ldr	r3, [r3, #16]
    6ab8:	68fa      	ldr	r2, [r7, #12]
    6aba:	0010      	movs	r0, r2
    6abc:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    6abe:	68fb      	ldr	r3, [r7, #12]
    6ac0:	681b      	ldr	r3, [r3, #0]
    6ac2:	2210      	movs	r2, #16
    6ac4:	729a      	strb	r2, [r3, #10]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    6ac6:	230b      	movs	r3, #11
    6ac8:	18fb      	adds	r3, r7, r3
    6aca:	781b      	ldrb	r3, [r3, #0]
    6acc:	2220      	movs	r2, #32
    6ace:	4013      	ands	r3, r2
    6ad0:	d008      	beq.n	6ae4 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    6ad2:	68fb      	ldr	r3, [r7, #12]
    6ad4:	695b      	ldr	r3, [r3, #20]
    6ad6:	68fa      	ldr	r2, [r7, #12]
    6ad8:	0010      	movs	r0, r2
    6ada:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    6adc:	68fb      	ldr	r3, [r7, #12]
    6ade:	681b      	ldr	r3, [r3, #0]
    6ae0:	2220      	movs	r2, #32
    6ae2:	729a      	strb	r2, [r3, #10]
	}
}
    6ae4:	46c0      	nop			; (mov r8, r8)
    6ae6:	46bd      	mov	sp, r7
    6ae8:	b004      	add	sp, #16
    6aea:	bd80      	pop	{r7, pc}
    6aec:	2000123c 	.word	0x2000123c

00006af0 <system_gclk_chan_get_config_defaults>:
{
    6af0:	b580      	push	{r7, lr}
    6af2:	b082      	sub	sp, #8
    6af4:	af00      	add	r7, sp, #0
    6af6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    6af8:	687b      	ldr	r3, [r7, #4]
    6afa:	2200      	movs	r2, #0
    6afc:	701a      	strb	r2, [r3, #0]
}
    6afe:	46c0      	nop			; (mov r8, r8)
    6b00:	46bd      	mov	sp, r7
    6b02:	b002      	add	sp, #8
    6b04:	bd80      	pop	{r7, pc}
	...

00006b08 <system_apb_clock_set_mask>:
{
    6b08:	b580      	push	{r7, lr}
    6b0a:	b082      	sub	sp, #8
    6b0c:	af00      	add	r7, sp, #0
    6b0e:	0002      	movs	r2, r0
    6b10:	6039      	str	r1, [r7, #0]
    6b12:	1dfb      	adds	r3, r7, #7
    6b14:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    6b16:	1dfb      	adds	r3, r7, #7
    6b18:	781b      	ldrb	r3, [r3, #0]
    6b1a:	2b04      	cmp	r3, #4
    6b1c:	d827      	bhi.n	6b6e <system_apb_clock_set_mask+0x66>
    6b1e:	009a      	lsls	r2, r3, #2
    6b20:	4b16      	ldr	r3, [pc, #88]	; (6b7c <system_apb_clock_set_mask+0x74>)
    6b22:	18d3      	adds	r3, r2, r3
    6b24:	681b      	ldr	r3, [r3, #0]
    6b26:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    6b28:	4b15      	ldr	r3, [pc, #84]	; (6b80 <system_apb_clock_set_mask+0x78>)
    6b2a:	4a15      	ldr	r2, [pc, #84]	; (6b80 <system_apb_clock_set_mask+0x78>)
    6b2c:	6951      	ldr	r1, [r2, #20]
    6b2e:	683a      	ldr	r2, [r7, #0]
    6b30:	430a      	orrs	r2, r1
    6b32:	615a      	str	r2, [r3, #20]
			break;
    6b34:	e01d      	b.n	6b72 <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
    6b36:	4b12      	ldr	r3, [pc, #72]	; (6b80 <system_apb_clock_set_mask+0x78>)
    6b38:	4a11      	ldr	r2, [pc, #68]	; (6b80 <system_apb_clock_set_mask+0x78>)
    6b3a:	6991      	ldr	r1, [r2, #24]
    6b3c:	683a      	ldr	r2, [r7, #0]
    6b3e:	430a      	orrs	r2, r1
    6b40:	619a      	str	r2, [r3, #24]
			break;
    6b42:	e016      	b.n	6b72 <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
    6b44:	4b0e      	ldr	r3, [pc, #56]	; (6b80 <system_apb_clock_set_mask+0x78>)
    6b46:	4a0e      	ldr	r2, [pc, #56]	; (6b80 <system_apb_clock_set_mask+0x78>)
    6b48:	69d1      	ldr	r1, [r2, #28]
    6b4a:	683a      	ldr	r2, [r7, #0]
    6b4c:	430a      	orrs	r2, r1
    6b4e:	61da      	str	r2, [r3, #28]
			break;
    6b50:	e00f      	b.n	6b72 <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
    6b52:	4b0b      	ldr	r3, [pc, #44]	; (6b80 <system_apb_clock_set_mask+0x78>)
    6b54:	4a0a      	ldr	r2, [pc, #40]	; (6b80 <system_apb_clock_set_mask+0x78>)
    6b56:	6a11      	ldr	r1, [r2, #32]
    6b58:	683a      	ldr	r2, [r7, #0]
    6b5a:	430a      	orrs	r2, r1
    6b5c:	621a      	str	r2, [r3, #32]
			break;
    6b5e:	e008      	b.n	6b72 <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
    6b60:	4b07      	ldr	r3, [pc, #28]	; (6b80 <system_apb_clock_set_mask+0x78>)
    6b62:	4a07      	ldr	r2, [pc, #28]	; (6b80 <system_apb_clock_set_mask+0x78>)
    6b64:	6a51      	ldr	r1, [r2, #36]	; 0x24
    6b66:	683a      	ldr	r2, [r7, #0]
    6b68:	430a      	orrs	r2, r1
    6b6a:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    6b6c:	e001      	b.n	6b72 <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
    6b6e:	2317      	movs	r3, #23
    6b70:	e000      	b.n	6b74 <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
    6b72:	2300      	movs	r3, #0
}
    6b74:	0018      	movs	r0, r3
    6b76:	46bd      	mov	sp, r7
    6b78:	b002      	add	sp, #8
    6b7a:	bd80      	pop	{r7, pc}
    6b7c:	00025300 	.word	0x00025300
    6b80:	40000400 	.word	0x40000400

00006b84 <system_pinmux_get_config_defaults>:
{
    6b84:	b580      	push	{r7, lr}
    6b86:	b082      	sub	sp, #8
    6b88:	af00      	add	r7, sp, #0
    6b8a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    6b8c:	687b      	ldr	r3, [r7, #4]
    6b8e:	2280      	movs	r2, #128	; 0x80
    6b90:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6b92:	687b      	ldr	r3, [r7, #4]
    6b94:	2200      	movs	r2, #0
    6b96:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6b98:	687b      	ldr	r3, [r7, #4]
    6b9a:	2201      	movs	r2, #1
    6b9c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    6b9e:	687b      	ldr	r3, [r7, #4]
    6ba0:	2200      	movs	r2, #0
    6ba2:	70da      	strb	r2, [r3, #3]
}
    6ba4:	46c0      	nop			; (mov r8, r8)
    6ba6:	46bd      	mov	sp, r7
    6ba8:	b002      	add	sp, #8
    6baa:	bd80      	pop	{r7, pc}

00006bac <tc_is_syncing>:
{
    6bac:	b580      	push	{r7, lr}
    6bae:	b084      	sub	sp, #16
    6bb0:	af00      	add	r7, sp, #0
    6bb2:	6078      	str	r0, [r7, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6bb4:	687b      	ldr	r3, [r7, #4]
    6bb6:	681b      	ldr	r3, [r3, #0]
    6bb8:	60fb      	str	r3, [r7, #12]
	return (tc_module->SYNCBUSY.reg);
    6bba:	68fb      	ldr	r3, [r7, #12]
    6bbc:	691b      	ldr	r3, [r3, #16]
    6bbe:	1e5a      	subs	r2, r3, #1
    6bc0:	4193      	sbcs	r3, r2
    6bc2:	b2db      	uxtb	r3, r3
}
    6bc4:	0018      	movs	r0, r3
    6bc6:	46bd      	mov	sp, r7
    6bc8:	b004      	add	sp, #16
    6bca:	bd80      	pop	{r7, pc}

00006bcc <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    6bcc:	b590      	push	{r4, r7, lr}
    6bce:	b087      	sub	sp, #28
    6bd0:	af00      	add	r7, sp, #0
    6bd2:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    6bd4:	2308      	movs	r3, #8
    6bd6:	18fb      	adds	r3, r7, r3
    6bd8:	4a0d      	ldr	r2, [pc, #52]	; (6c10 <_tc_get_inst_index+0x44>)
    6bda:	ca13      	ldmia	r2!, {r0, r1, r4}
    6bdc:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    6bde:	2300      	movs	r3, #0
    6be0:	617b      	str	r3, [r7, #20]
    6be2:	e00d      	b.n	6c00 <_tc_get_inst_index+0x34>
		if (hw == tc_modules[i]) {
    6be4:	2308      	movs	r3, #8
    6be6:	18fb      	adds	r3, r7, r3
    6be8:	697a      	ldr	r2, [r7, #20]
    6bea:	0092      	lsls	r2, r2, #2
    6bec:	58d2      	ldr	r2, [r2, r3]
    6bee:	687b      	ldr	r3, [r7, #4]
    6bf0:	429a      	cmp	r2, r3
    6bf2:	d102      	bne.n	6bfa <_tc_get_inst_index+0x2e>
			return i;
    6bf4:	697b      	ldr	r3, [r7, #20]
    6bf6:	b2db      	uxtb	r3, r3
    6bf8:	e006      	b.n	6c08 <_tc_get_inst_index+0x3c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    6bfa:	697b      	ldr	r3, [r7, #20]
    6bfc:	3301      	adds	r3, #1
    6bfe:	617b      	str	r3, [r7, #20]
    6c00:	697b      	ldr	r3, [r7, #20]
    6c02:	2b02      	cmp	r3, #2
    6c04:	d9ee      	bls.n	6be4 <_tc_get_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    6c06:	2300      	movs	r3, #0
}
    6c08:	0018      	movs	r0, r3
    6c0a:	46bd      	mov	sp, r7
    6c0c:	b007      	add	sp, #28
    6c0e:	bd90      	pop	{r4, r7, pc}
    6c10:	00025314 	.word	0x00025314

00006c14 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    6c14:	b590      	push	{r4, r7, lr}
    6c16:	b091      	sub	sp, #68	; 0x44
    6c18:	af00      	add	r7, sp, #0
    6c1a:	60f8      	str	r0, [r7, #12]
    6c1c:	60b9      	str	r1, [r7, #8]
    6c1e:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(config);

	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint32_t ctrla_tmp = 0;
    6c20:	2300      	movs	r3, #0
    6c22:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
    6c24:	233b      	movs	r3, #59	; 0x3b
    6c26:	18fb      	adds	r3, r7, r3
    6c28:	2200      	movs	r2, #0
    6c2a:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    6c2c:	2337      	movs	r3, #55	; 0x37
    6c2e:	18fc      	adds	r4, r7, r3
    6c30:	68bb      	ldr	r3, [r7, #8]
    6c32:	0018      	movs	r0, r3
    6c34:	4bd4      	ldr	r3, [pc, #848]	; (6f88 <tc_init+0x374>)
    6c36:	4798      	blx	r3
    6c38:	0003      	movs	r3, r0
    6c3a:	7023      	strb	r3, [r4, #0]
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC1,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC2,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC3};
#else
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC4_GCLK_ID};
    6c3c:	2334      	movs	r3, #52	; 0x34
    6c3e:	18fb      	adds	r3, r7, r3
    6c40:	4ad2      	ldr	r2, [pc, #840]	; (6f8c <tc_init+0x378>)
    6c42:	8811      	ldrh	r1, [r2, #0]
    6c44:	8019      	strh	r1, [r3, #0]
    6c46:	7892      	ldrb	r2, [r2, #2]
    6c48:	709a      	strb	r2, [r3, #2]
	/* Array of PM APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
    6c4a:	231c      	movs	r3, #28
    6c4c:	18fb      	adds	r3, r7, r3
    6c4e:	4ad0      	ldr	r2, [pc, #832]	; (6f90 <tc_init+0x37c>)
    6c50:	ca13      	ldmia	r2!, {r0, r1, r4}
    6c52:	c313      	stmia	r3!, {r0, r1, r4}
    6c54:	ca13      	ldmia	r2!, {r0, r1, r4}
    6c56:	c313      	stmia	r3!, {r0, r1, r4}
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    6c58:	233a      	movs	r3, #58	; 0x3a
    6c5a:	18fb      	adds	r3, r7, r3
    6c5c:	2200      	movs	r2, #0
    6c5e:	701a      	strb	r2, [r3, #0]
    6c60:	e00e      	b.n	6c80 <tc_init+0x6c>
		module_inst->callback[i]        = NULL;
    6c62:	233a      	movs	r3, #58	; 0x3a
    6c64:	18fb      	adds	r3, r7, r3
    6c66:	781a      	ldrb	r2, [r3, #0]
    6c68:	68fb      	ldr	r3, [r7, #12]
    6c6a:	3202      	adds	r2, #2
    6c6c:	0092      	lsls	r2, r2, #2
    6c6e:	2100      	movs	r1, #0
    6c70:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    6c72:	233a      	movs	r3, #58	; 0x3a
    6c74:	18fb      	adds	r3, r7, r3
    6c76:	781a      	ldrb	r2, [r3, #0]
    6c78:	233a      	movs	r3, #58	; 0x3a
    6c7a:	18fb      	adds	r3, r7, r3
    6c7c:	3201      	adds	r2, #1
    6c7e:	701a      	strb	r2, [r3, #0]
    6c80:	233a      	movs	r3, #58	; 0x3a
    6c82:	18fb      	adds	r3, r7, r3
    6c84:	781b      	ldrb	r3, [r3, #0]
    6c86:	2b03      	cmp	r3, #3
    6c88:	d9eb      	bls.n	6c62 <tc_init+0x4e>
	}
	module_inst->register_callback_mask     = 0x00;
    6c8a:	68fb      	ldr	r3, [r7, #12]
    6c8c:	2200      	movs	r2, #0
    6c8e:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask       = 0x00;
    6c90:	68fb      	ldr	r3, [r7, #12]
    6c92:	2200      	movs	r2, #0
    6c94:	765a      	strb	r2, [r3, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    6c96:	2337      	movs	r3, #55	; 0x37
    6c98:	18fb      	adds	r3, r7, r3
    6c9a:	781a      	ldrb	r2, [r3, #0]
    6c9c:	4bbd      	ldr	r3, [pc, #756]	; (6f94 <tc_init+0x380>)
    6c9e:	0092      	lsls	r2, r2, #2
    6ca0:	68f9      	ldr	r1, [r7, #12]
    6ca2:	50d1      	str	r1, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    6ca4:	68fb      	ldr	r3, [r7, #12]
    6ca6:	68ba      	ldr	r2, [r7, #8]
    6ca8:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    6caa:	687b      	ldr	r3, [r7, #4]
    6cac:	2234      	movs	r2, #52	; 0x34
    6cae:	5c9a      	ldrb	r2, [r3, r2]
    6cb0:	68fb      	ldr	r3, [r7, #12]
    6cb2:	769a      	strb	r2, [r3, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    6cb4:	687b      	ldr	r3, [r7, #4]
    6cb6:	78db      	ldrb	r3, [r3, #3]
    6cb8:	2b08      	cmp	r3, #8
    6cba:	d107      	bne.n	6ccc <tc_init+0xb8>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
    6cbc:	2337      	movs	r3, #55	; 0x37
    6cbe:	18fb      	adds	r3, r7, r3
    6cc0:	781b      	ldrb	r3, [r3, #0]
    6cc2:	2201      	movs	r2, #1
    6cc4:	4013      	ands	r3, r2
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    6cc6:	d001      	beq.n	6ccc <tc_init+0xb8>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    6cc8:	2317      	movs	r3, #23
    6cca:	e1ec      	b.n	70a6 <tc_init+0x492>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    6ccc:	687b      	ldr	r3, [r7, #4]
    6cce:	78da      	ldrb	r2, [r3, #3]
    6cd0:	68fb      	ldr	r3, [r7, #12]
    6cd2:	711a      	strb	r2, [r3, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    6cd4:	68bb      	ldr	r3, [r7, #8]
    6cd6:	681b      	ldr	r3, [r3, #0]
    6cd8:	2201      	movs	r2, #1
    6cda:	4013      	ands	r3, r2
    6cdc:	d001      	beq.n	6ce2 <tc_init+0xce>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    6cde:	2305      	movs	r3, #5
    6ce0:	e1e1      	b.n	70a6 <tc_init+0x492>
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    6ce2:	68bb      	ldr	r3, [r7, #8]
    6ce4:	7adb      	ldrb	r3, [r3, #11]
    6ce6:	b2db      	uxtb	r3, r3
    6ce8:	001a      	movs	r2, r3
    6cea:	2302      	movs	r3, #2
    6cec:	4013      	ands	r3, r2
    6cee:	d001      	beq.n	6cf4 <tc_init+0xe0>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    6cf0:	231c      	movs	r3, #28
    6cf2:	e1d8      	b.n	70a6 <tc_init+0x492>
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    6cf4:	68bb      	ldr	r3, [r7, #8]
    6cf6:	681b      	ldr	r3, [r3, #0]
    6cf8:	2202      	movs	r2, #2
    6cfa:	4013      	ands	r3, r2
    6cfc:	d001      	beq.n	6d02 <tc_init+0xee>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    6cfe:	231c      	movs	r3, #28
    6d00:	e1d1      	b.n	70a6 <tc_init+0x492>
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    6d02:	687b      	ldr	r3, [r7, #4]
    6d04:	7c1b      	ldrb	r3, [r3, #16]
    6d06:	2b00      	cmp	r3, #0
    6d08:	d017      	beq.n	6d3a <tc_init+0x126>
		system_pinmux_get_config_defaults(&pin_config);
    6d0a:	2318      	movs	r3, #24
    6d0c:	18fb      	adds	r3, r7, r3
    6d0e:	0018      	movs	r0, r3
    6d10:	4ba1      	ldr	r3, [pc, #644]	; (6f98 <tc_init+0x384>)
    6d12:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    6d14:	687b      	ldr	r3, [r7, #4]
    6d16:	699b      	ldr	r3, [r3, #24]
    6d18:	b2da      	uxtb	r2, r3
    6d1a:	2318      	movs	r3, #24
    6d1c:	18fb      	adds	r3, r7, r3
    6d1e:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    6d20:	2318      	movs	r3, #24
    6d22:	18fb      	adds	r3, r7, r3
    6d24:	2201      	movs	r2, #1
    6d26:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[0].pin_out, &pin_config);
    6d28:	687b      	ldr	r3, [r7, #4]
    6d2a:	695b      	ldr	r3, [r3, #20]
		system_pinmux_pin_set_config(
    6d2c:	b2db      	uxtb	r3, r3
    6d2e:	2218      	movs	r2, #24
    6d30:	18ba      	adds	r2, r7, r2
    6d32:	0011      	movs	r1, r2
    6d34:	0018      	movs	r0, r3
    6d36:	4b99      	ldr	r3, [pc, #612]	; (6f9c <tc_init+0x388>)
    6d38:	4798      	blx	r3
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    6d3a:	687b      	ldr	r3, [r7, #4]
    6d3c:	7f1b      	ldrb	r3, [r3, #28]
    6d3e:	2b00      	cmp	r3, #0
    6d40:	d017      	beq.n	6d72 <tc_init+0x15e>
		system_pinmux_get_config_defaults(&pin_config);
    6d42:	2318      	movs	r3, #24
    6d44:	18fb      	adds	r3, r7, r3
    6d46:	0018      	movs	r0, r3
    6d48:	4b93      	ldr	r3, [pc, #588]	; (6f98 <tc_init+0x384>)
    6d4a:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    6d4c:	687b      	ldr	r3, [r7, #4]
    6d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6d50:	b2da      	uxtb	r2, r3
    6d52:	2318      	movs	r3, #24
    6d54:	18fb      	adds	r3, r7, r3
    6d56:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    6d58:	2318      	movs	r3, #24
    6d5a:	18fb      	adds	r3, r7, r3
    6d5c:	2201      	movs	r2, #1
    6d5e:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
    6d60:	687b      	ldr	r3, [r7, #4]
    6d62:	6a1b      	ldr	r3, [r3, #32]
		system_pinmux_pin_set_config(
    6d64:	b2db      	uxtb	r3, r3
    6d66:	2218      	movs	r2, #24
    6d68:	18ba      	adds	r2, r7, r2
    6d6a:	0011      	movs	r1, r2
    6d6c:	0018      	movs	r0, r3
    6d6e:	4b8b      	ldr	r3, [pc, #556]	; (6f9c <tc_init+0x388>)
    6d70:	4798      	blx	r3
	}

	/* Enable the user interface clock in the MCLK */
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    6d72:	2337      	movs	r3, #55	; 0x37
    6d74:	18fb      	adds	r3, r7, r3
    6d76:	781b      	ldrb	r3, [r3, #0]
    6d78:	005a      	lsls	r2, r3, #1
    6d7a:	231c      	movs	r3, #28
    6d7c:	18fb      	adds	r3, r7, r3
    6d7e:	0092      	lsls	r2, r2, #2
    6d80:	58d3      	ldr	r3, [r2, r3]
    6d82:	b2d8      	uxtb	r0, r3
			inst_mclk_apbmask[2*instance+1]);
    6d84:	2337      	movs	r3, #55	; 0x37
    6d86:	18fb      	adds	r3, r7, r3
    6d88:	781b      	ldrb	r3, [r3, #0]
    6d8a:	005b      	lsls	r3, r3, #1
    6d8c:	1c5a      	adds	r2, r3, #1
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    6d8e:	231c      	movs	r3, #28
    6d90:	18fb      	adds	r3, r7, r3
    6d92:	0092      	lsls	r2, r2, #2
    6d94:	58d3      	ldr	r3, [r2, r3]
    6d96:	0019      	movs	r1, r3
    6d98:	4b81      	ldr	r3, [pc, #516]	; (6fa0 <tc_init+0x38c>)
    6d9a:	4798      	blx	r3

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    6d9c:	687b      	ldr	r3, [r7, #4]
    6d9e:	78db      	ldrb	r3, [r3, #3]
    6da0:	2b08      	cmp	r3, #8
    6da2:	d11c      	bne.n	6dde <tc_init+0x1ca>
    6da4:	2337      	movs	r3, #55	; 0x37
    6da6:	18fb      	adds	r3, r7, r3
    6da8:	781b      	ldrb	r3, [r3, #0]
    6daa:	3301      	adds	r3, #1
    6dac:	2b02      	cmp	r3, #2
    6dae:	dc16      	bgt.n	6dde <tc_init+0x1ca>
	{
		/* Enable the user interface clock in the MCLK */
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    6db0:	2337      	movs	r3, #55	; 0x37
    6db2:	18fb      	adds	r3, r7, r3
    6db4:	781b      	ldrb	r3, [r3, #0]
    6db6:	3301      	adds	r3, #1
    6db8:	005a      	lsls	r2, r3, #1
    6dba:	231c      	movs	r3, #28
    6dbc:	18fb      	adds	r3, r7, r3
    6dbe:	0092      	lsls	r2, r2, #2
    6dc0:	58d3      	ldr	r3, [r2, r3]
    6dc2:	b2d8      	uxtb	r0, r3
				inst_mclk_apbmask[(instance+1)*2+1]);
    6dc4:	2337      	movs	r3, #55	; 0x37
    6dc6:	18fb      	adds	r3, r7, r3
    6dc8:	781b      	ldrb	r3, [r3, #0]
    6dca:	3301      	adds	r3, #1
    6dcc:	005b      	lsls	r3, r3, #1
    6dce:	1c5a      	adds	r2, r3, #1
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    6dd0:	231c      	movs	r3, #28
    6dd2:	18fb      	adds	r3, r7, r3
    6dd4:	0092      	lsls	r2, r2, #2
    6dd6:	58d3      	ldr	r3, [r2, r3]
    6dd8:	0019      	movs	r1, r3
    6dda:	4b71      	ldr	r3, [pc, #452]	; (6fa0 <tc_init+0x38c>)
    6ddc:	4798      	blx	r3
	}


	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    6dde:	2314      	movs	r3, #20
    6de0:	18fb      	adds	r3, r7, r3
    6de2:	0018      	movs	r0, r3
    6de4:	4b6f      	ldr	r3, [pc, #444]	; (6fa4 <tc_init+0x390>)
    6de6:	4798      	blx	r3
	gclk_chan_config.source_generator = config->clock_source;
    6de8:	687b      	ldr	r3, [r7, #4]
    6dea:	781a      	ldrb	r2, [r3, #0]
    6dec:	2314      	movs	r3, #20
    6dee:	18fb      	adds	r3, r7, r3
    6df0:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    6df2:	2337      	movs	r3, #55	; 0x37
    6df4:	18fb      	adds	r3, r7, r3
    6df6:	781b      	ldrb	r3, [r3, #0]
    6df8:	2234      	movs	r2, #52	; 0x34
    6dfa:	18ba      	adds	r2, r7, r2
    6dfc:	5cd3      	ldrb	r3, [r2, r3]
    6dfe:	2214      	movs	r2, #20
    6e00:	18ba      	adds	r2, r7, r2
    6e02:	0011      	movs	r1, r2
    6e04:	0018      	movs	r0, r3
    6e06:	4b68      	ldr	r3, [pc, #416]	; (6fa8 <tc_init+0x394>)
    6e08:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    6e0a:	2337      	movs	r3, #55	; 0x37
    6e0c:	18fb      	adds	r3, r7, r3
    6e0e:	781b      	ldrb	r3, [r3, #0]
    6e10:	2234      	movs	r2, #52	; 0x34
    6e12:	18ba      	adds	r2, r7, r2
    6e14:	5cd3      	ldrb	r3, [r2, r3]
    6e16:	0018      	movs	r0, r3
    6e18:	4b64      	ldr	r3, [pc, #400]	; (6fac <tc_init+0x398>)
    6e1a:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
			(uint32_t)config->counter_size |
    6e1c:	687b      	ldr	r3, [r7, #4]
    6e1e:	78da      	ldrb	r2, [r3, #3]
			(uint32_t)config->reload_action |
    6e20:	687b      	ldr	r3, [r7, #4]
    6e22:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->counter_size |
    6e24:	4313      	orrs	r3, r2
    6e26:	b2db      	uxtb	r3, r3
    6e28:	001a      	movs	r2, r3
			(uint32_t)config->clock_prescaler;
    6e2a:	687b      	ldr	r3, [r7, #4]
    6e2c:	889b      	ldrh	r3, [r3, #4]
	ctrla_tmp =
    6e2e:	4313      	orrs	r3, r2
    6e30:	63fb      	str	r3, [r7, #60]	; 0x3c

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    6e32:	2339      	movs	r3, #57	; 0x39
    6e34:	18fb      	adds	r3, r7, r3
    6e36:	2200      	movs	r2, #0
    6e38:	701a      	strb	r2, [r3, #0]
    6e3a:	e018      	b.n	6e6e <tc_init+0x25a>
		if (config->enable_capture_on_channel[i] == true) {
    6e3c:	2339      	movs	r3, #57	; 0x39
    6e3e:	18fb      	adds	r3, r7, r3
    6e40:	781b      	ldrb	r3, [r3, #0]
    6e42:	687a      	ldr	r2, [r7, #4]
    6e44:	18d3      	adds	r3, r2, r3
    6e46:	7a5b      	ldrb	r3, [r3, #9]
    6e48:	2b00      	cmp	r3, #0
    6e4a:	d009      	beq.n	6e60 <tc_init+0x24c>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    6e4c:	2339      	movs	r3, #57	; 0x39
    6e4e:	18fb      	adds	r3, r7, r3
    6e50:	781b      	ldrb	r3, [r3, #0]
    6e52:	2280      	movs	r2, #128	; 0x80
    6e54:	0252      	lsls	r2, r2, #9
    6e56:	409a      	lsls	r2, r3
    6e58:	0013      	movs	r3, r2
    6e5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    6e5c:	4313      	orrs	r3, r2
    6e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    6e60:	2339      	movs	r3, #57	; 0x39
    6e62:	18fb      	adds	r3, r7, r3
    6e64:	781a      	ldrb	r2, [r3, #0]
    6e66:	2339      	movs	r3, #57	; 0x39
    6e68:	18fb      	adds	r3, r7, r3
    6e6a:	3201      	adds	r2, #1
    6e6c:	701a      	strb	r2, [r3, #0]
    6e6e:	2339      	movs	r3, #57	; 0x39
    6e70:	18fb      	adds	r3, r7, r3
    6e72:	781b      	ldrb	r3, [r3, #0]
    6e74:	2b01      	cmp	r3, #1
    6e76:	d9e1      	bls.n	6e3c <tc_init+0x228>
		}
	}

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    6e78:	2338      	movs	r3, #56	; 0x38
    6e7a:	18fb      	adds	r3, r7, r3
    6e7c:	2200      	movs	r2, #0
    6e7e:	701a      	strb	r2, [r3, #0]
    6e80:	e018      	b.n	6eb4 <tc_init+0x2a0>
		if (config->enable_capture_on_IO[i] == true) {
    6e82:	2338      	movs	r3, #56	; 0x38
    6e84:	18fb      	adds	r3, r7, r3
    6e86:	781b      	ldrb	r3, [r3, #0]
    6e88:	687a      	ldr	r2, [r7, #4]
    6e8a:	18d3      	adds	r3, r2, r3
    6e8c:	7adb      	ldrb	r3, [r3, #11]
    6e8e:	2b00      	cmp	r3, #0
    6e90:	d009      	beq.n	6ea6 <tc_init+0x292>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    6e92:	2338      	movs	r3, #56	; 0x38
    6e94:	18fb      	adds	r3, r7, r3
    6e96:	781b      	ldrb	r3, [r3, #0]
    6e98:	2280      	movs	r2, #128	; 0x80
    6e9a:	0352      	lsls	r2, r2, #13
    6e9c:	409a      	lsls	r2, r3
    6e9e:	0013      	movs	r3, r2
    6ea0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    6ea2:	4313      	orrs	r3, r2
    6ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    6ea6:	2338      	movs	r3, #56	; 0x38
    6ea8:	18fb      	adds	r3, r7, r3
    6eaa:	781a      	ldrb	r2, [r3, #0]
    6eac:	2338      	movs	r3, #56	; 0x38
    6eae:	18fb      	adds	r3, r7, r3
    6eb0:	3201      	adds	r2, #1
    6eb2:	701a      	strb	r2, [r3, #0]
    6eb4:	2338      	movs	r3, #56	; 0x38
    6eb6:	18fb      	adds	r3, r7, r3
    6eb8:	781b      	ldrb	r3, [r3, #0]
    6eba:	2b01      	cmp	r3, #1
    6ebc:	d9e1      	bls.n	6e82 <tc_init+0x26e>
		}
	}

	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    6ebe:	687b      	ldr	r3, [r7, #4]
    6ec0:	785b      	ldrb	r3, [r3, #1]
    6ec2:	019a      	lsls	r2, r3, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
    6ec4:	687b      	ldr	r3, [r7, #4]
    6ec6:	789b      	ldrb	r3, [r3, #2]
    6ec8:	01db      	lsls	r3, r3, #7
    6eca:	4313      	orrs	r3, r2
    6ecc:	001a      	movs	r2, r3
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    6ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6ed0:	4313      	orrs	r3, r2
    6ed2:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    6ed4:	46c0      	nop			; (mov r8, r8)
    6ed6:	68fb      	ldr	r3, [r7, #12]
    6ed8:	0018      	movs	r0, r3
    6eda:	4b35      	ldr	r3, [pc, #212]	; (6fb0 <tc_init+0x39c>)
    6edc:	4798      	blx	r3
    6ede:	1e03      	subs	r3, r0, #0
    6ee0:	d1f9      	bne.n	6ed6 <tc_init+0x2c2>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    6ee2:	68bb      	ldr	r3, [r7, #8]
    6ee4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    6ee6:	601a      	str	r2, [r3, #0]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    6ee8:	46c0      	nop			; (mov r8, r8)
    6eea:	68fb      	ldr	r3, [r7, #12]
    6eec:	0018      	movs	r0, r3
    6eee:	4b30      	ldr	r3, [pc, #192]	; (6fb0 <tc_init+0x39c>)
    6ef0:	4798      	blx	r3
    6ef2:	1e03      	subs	r3, r0, #0
    6ef4:	d1f9      	bne.n	6eea <tc_init+0x2d6>
		/* Wait for sync */
	}
	hw->COUNT8.WAVE.reg = config->wave_generation;
    6ef6:	687b      	ldr	r3, [r7, #4]
    6ef8:	799a      	ldrb	r2, [r3, #6]
    6efa:	68bb      	ldr	r3, [r7, #8]
    6efc:	731a      	strb	r2, [r3, #12]

	/* Set ctrlb register */
	if (config->oneshot) {
    6efe:	687b      	ldr	r3, [r7, #4]
    6f00:	7b5b      	ldrb	r3, [r3, #13]
    6f02:	2b00      	cmp	r3, #0
    6f04:	d003      	beq.n	6f0e <tc_init+0x2fa>
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    6f06:	233b      	movs	r3, #59	; 0x3b
    6f08:	18fb      	adds	r3, r7, r3
    6f0a:	2204      	movs	r2, #4
    6f0c:	701a      	strb	r2, [r3, #0]
	}

	if (config->count_direction) {
    6f0e:	687b      	ldr	r3, [r7, #4]
    6f10:	7b9b      	ldrb	r3, [r3, #14]
    6f12:	2b00      	cmp	r3, #0
    6f14:	d007      	beq.n	6f26 <tc_init+0x312>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    6f16:	233b      	movs	r3, #59	; 0x3b
    6f18:	18fb      	adds	r3, r7, r3
    6f1a:	223b      	movs	r2, #59	; 0x3b
    6f1c:	18ba      	adds	r2, r7, r2
    6f1e:	7812      	ldrb	r2, [r2, #0]
    6f20:	2101      	movs	r1, #1
    6f22:	430a      	orrs	r2, r1
    6f24:	701a      	strb	r2, [r3, #0]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    6f26:	46c0      	nop			; (mov r8, r8)
    6f28:	68fb      	ldr	r3, [r7, #12]
    6f2a:	0018      	movs	r0, r3
    6f2c:	4b20      	ldr	r3, [pc, #128]	; (6fb0 <tc_init+0x39c>)
    6f2e:	4798      	blx	r3
    6f30:	1e03      	subs	r3, r0, #0
    6f32:	d1f9      	bne.n	6f28 <tc_init+0x314>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    6f34:	68bb      	ldr	r3, [r7, #8]
    6f36:	22ff      	movs	r2, #255	; 0xff
    6f38:	711a      	strb	r2, [r3, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    6f3a:	233b      	movs	r3, #59	; 0x3b
    6f3c:	18fb      	adds	r3, r7, r3
    6f3e:	781b      	ldrb	r3, [r3, #0]
    6f40:	2b00      	cmp	r3, #0
    6f42:	d00b      	beq.n	6f5c <tc_init+0x348>
		while (tc_is_syncing(module_inst)) {
    6f44:	46c0      	nop			; (mov r8, r8)
    6f46:	68fb      	ldr	r3, [r7, #12]
    6f48:	0018      	movs	r0, r3
    6f4a:	4b19      	ldr	r3, [pc, #100]	; (6fb0 <tc_init+0x39c>)
    6f4c:	4798      	blx	r3
    6f4e:	1e03      	subs	r3, r0, #0
    6f50:	d1f9      	bne.n	6f46 <tc_init+0x332>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    6f52:	68bb      	ldr	r3, [r7, #8]
    6f54:	223b      	movs	r2, #59	; 0x3b
    6f56:	18ba      	adds	r2, r7, r2
    6f58:	7812      	ldrb	r2, [r2, #0]
    6f5a:	715a      	strb	r2, [r3, #5]
	}

	/* Set drvvtrl register*/
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
    6f5c:	687b      	ldr	r3, [r7, #4]
    6f5e:	7a1a      	ldrb	r2, [r3, #8]
    6f60:	68bb      	ldr	r3, [r7, #8]
    6f62:	735a      	strb	r2, [r3, #13]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    6f64:	46c0      	nop			; (mov r8, r8)
    6f66:	68fb      	ldr	r3, [r7, #12]
    6f68:	0018      	movs	r0, r3
    6f6a:	4b11      	ldr	r3, [pc, #68]	; (6fb0 <tc_init+0x39c>)
    6f6c:	4798      	blx	r3
    6f6e:	1e03      	subs	r3, r0, #0
    6f70:	d1f9      	bne.n	6f66 <tc_init+0x352>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    6f72:	68fb      	ldr	r3, [r7, #12]
    6f74:	791b      	ldrb	r3, [r3, #4]
    6f76:	2b04      	cmp	r3, #4
    6f78:	d01c      	beq.n	6fb4 <tc_init+0x3a0>
    6f7a:	2b08      	cmp	r3, #8
    6f7c:	d100      	bne.n	6f80 <tc_init+0x36c>
    6f7e:	e06e      	b.n	705e <tc_init+0x44a>
    6f80:	2b00      	cmp	r3, #0
    6f82:	d049      	beq.n	7018 <tc_init+0x404>
    6f84:	e08e      	b.n	70a4 <tc_init+0x490>
    6f86:	46c0      	nop			; (mov r8, r8)
    6f88:	00006bcd 	.word	0x00006bcd
    6f8c:	00025320 	.word	0x00025320
    6f90:	00025324 	.word	0x00025324
    6f94:	2000123c 	.word	0x2000123c
    6f98:	00006b85 	.word	0x00006b85
    6f9c:	00016235 	.word	0x00016235
    6fa0:	00006b09 	.word	0x00006b09
    6fa4:	00006af1 	.word	0x00006af1
    6fa8:	00015f81 	.word	0x00015f81
    6fac:	00015fc1 	.word	0x00015fc1
    6fb0:	00006bad 	.word	0x00006bad
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    6fb4:	46c0      	nop			; (mov r8, r8)
    6fb6:	68fb      	ldr	r3, [r7, #12]
    6fb8:	0018      	movs	r0, r3
    6fba:	4b3d      	ldr	r3, [pc, #244]	; (70b0 <tc_init+0x49c>)
    6fbc:	4798      	blx	r3
    6fbe:	1e03      	subs	r3, r0, #0
    6fc0:	d1f9      	bne.n	6fb6 <tc_init+0x3a2>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    6fc2:	687b      	ldr	r3, [r7, #4]
    6fc4:	2228      	movs	r2, #40	; 0x28
    6fc6:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.COUNT.reg =
    6fc8:	68bb      	ldr	r3, [r7, #8]
    6fca:	751a      	strb	r2, [r3, #20]


			while (tc_is_syncing(module_inst)) {
    6fcc:	46c0      	nop			; (mov r8, r8)
    6fce:	68fb      	ldr	r3, [r7, #12]
    6fd0:	0018      	movs	r0, r3
    6fd2:	4b37      	ldr	r3, [pc, #220]	; (70b0 <tc_init+0x49c>)
    6fd4:	4798      	blx	r3
    6fd6:	1e03      	subs	r3, r0, #0
    6fd8:	d1f9      	bne.n	6fce <tc_init+0x3ba>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    6fda:	687b      	ldr	r3, [r7, #4]
    6fdc:	2229      	movs	r2, #41	; 0x29
    6fde:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.PER.reg =
    6fe0:	68bb      	ldr	r3, [r7, #8]
    6fe2:	76da      	strb	r2, [r3, #27]

			while (tc_is_syncing(module_inst)) {
    6fe4:	46c0      	nop			; (mov r8, r8)
    6fe6:	68fb      	ldr	r3, [r7, #12]
    6fe8:	0018      	movs	r0, r3
    6fea:	4b31      	ldr	r3, [pc, #196]	; (70b0 <tc_init+0x49c>)
    6fec:	4798      	blx	r3
    6fee:	1e03      	subs	r3, r0, #0
    6ff0:	d1f9      	bne.n	6fe6 <tc_init+0x3d2>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    6ff2:	687b      	ldr	r3, [r7, #4]
    6ff4:	222a      	movs	r2, #42	; 0x2a
    6ff6:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.CC[0].reg =
    6ff8:	68bb      	ldr	r3, [r7, #8]
    6ffa:	771a      	strb	r2, [r3, #28]

			while (tc_is_syncing(module_inst)) {
    6ffc:	46c0      	nop			; (mov r8, r8)
    6ffe:	68fb      	ldr	r3, [r7, #12]
    7000:	0018      	movs	r0, r3
    7002:	4b2b      	ldr	r3, [pc, #172]	; (70b0 <tc_init+0x49c>)
    7004:	4798      	blx	r3
    7006:	1e03      	subs	r3, r0, #0
    7008:	d1f9      	bne.n	6ffe <tc_init+0x3ea>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    700a:	687b      	ldr	r3, [r7, #4]
    700c:	222b      	movs	r2, #43	; 0x2b
    700e:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.CC[1].reg =
    7010:	68bb      	ldr	r3, [r7, #8]
    7012:	775a      	strb	r2, [r3, #29]

			return STATUS_OK;
    7014:	2300      	movs	r3, #0
    7016:	e046      	b.n	70a6 <tc_init+0x492>

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    7018:	46c0      	nop			; (mov r8, r8)
    701a:	68fb      	ldr	r3, [r7, #12]
    701c:	0018      	movs	r0, r3
    701e:	4b24      	ldr	r3, [pc, #144]	; (70b0 <tc_init+0x49c>)
    7020:	4798      	blx	r3
    7022:	1e03      	subs	r3, r0, #0
    7024:	d1f9      	bne.n	701a <tc_init+0x406>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    7026:	687b      	ldr	r3, [r7, #4]
    7028:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    702a:	68bb      	ldr	r3, [r7, #8]
    702c:	829a      	strh	r2, [r3, #20]

			while (tc_is_syncing(module_inst)) {
    702e:	46c0      	nop			; (mov r8, r8)
    7030:	68fb      	ldr	r3, [r7, #12]
    7032:	0018      	movs	r0, r3
    7034:	4b1e      	ldr	r3, [pc, #120]	; (70b0 <tc_init+0x49c>)
    7036:	4798      	blx	r3
    7038:	1e03      	subs	r3, r0, #0
    703a:	d1f9      	bne.n	7030 <tc_init+0x41c>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    703c:	687b      	ldr	r3, [r7, #4]
    703e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    7040:	68bb      	ldr	r3, [r7, #8]
    7042:	839a      	strh	r2, [r3, #28]

			while (tc_is_syncing(module_inst)) {
    7044:	46c0      	nop			; (mov r8, r8)
    7046:	68fb      	ldr	r3, [r7, #12]
    7048:	0018      	movs	r0, r3
    704a:	4b19      	ldr	r3, [pc, #100]	; (70b0 <tc_init+0x49c>)
    704c:	4798      	blx	r3
    704e:	1e03      	subs	r3, r0, #0
    7050:	d1f9      	bne.n	7046 <tc_init+0x432>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    7052:	687b      	ldr	r3, [r7, #4]
    7054:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    7056:	68bb      	ldr	r3, [r7, #8]
    7058:	83da      	strh	r2, [r3, #30]

			return STATUS_OK;
    705a:	2300      	movs	r3, #0
    705c:	e023      	b.n	70a6 <tc_init+0x492>

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    705e:	46c0      	nop			; (mov r8, r8)
    7060:	68fb      	ldr	r3, [r7, #12]
    7062:	0018      	movs	r0, r3
    7064:	4b12      	ldr	r3, [pc, #72]	; (70b0 <tc_init+0x49c>)
    7066:	4798      	blx	r3
    7068:	1e03      	subs	r3, r0, #0
    706a:	d1f9      	bne.n	7060 <tc_init+0x44c>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    706c:	687b      	ldr	r3, [r7, #4]
    706e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    7070:	68bb      	ldr	r3, [r7, #8]
    7072:	615a      	str	r2, [r3, #20]

			while (tc_is_syncing(module_inst)) {
    7074:	46c0      	nop			; (mov r8, r8)
    7076:	68fb      	ldr	r3, [r7, #12]
    7078:	0018      	movs	r0, r3
    707a:	4b0d      	ldr	r3, [pc, #52]	; (70b0 <tc_init+0x49c>)
    707c:	4798      	blx	r3
    707e:	1e03      	subs	r3, r0, #0
    7080:	d1f9      	bne.n	7076 <tc_init+0x462>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
					config->counter_32_bit.compare_capture_channel[0];
    7082:	687b      	ldr	r3, [r7, #4]
    7084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			hw->COUNT32.CC[0].reg =
    7086:	68bb      	ldr	r3, [r7, #8]
    7088:	61da      	str	r2, [r3, #28]

			while (tc_is_syncing(module_inst)) {
    708a:	46c0      	nop			; (mov r8, r8)
    708c:	68fb      	ldr	r3, [r7, #12]
    708e:	0018      	movs	r0, r3
    7090:	4b07      	ldr	r3, [pc, #28]	; (70b0 <tc_init+0x49c>)
    7092:	4798      	blx	r3
    7094:	1e03      	subs	r3, r0, #0
    7096:	d1f9      	bne.n	708c <tc_init+0x478>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    7098:	687b      	ldr	r3, [r7, #4]
    709a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    709c:	68bb      	ldr	r3, [r7, #8]
    709e:	621a      	str	r2, [r3, #32]

			return STATUS_OK;
    70a0:	2300      	movs	r3, #0
    70a2:	e000      	b.n	70a6 <tc_init+0x492>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    70a4:	2317      	movs	r3, #23
}
    70a6:	0018      	movs	r0, r3
    70a8:	46bd      	mov	sp, r7
    70aa:	b011      	add	sp, #68	; 0x44
    70ac:	bd90      	pop	{r4, r7, pc}
    70ae:	46c0      	nop			; (mov r8, r8)
    70b0:	00006bad 	.word	0x00006bad

000070b4 <tc_set_count_value>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid timer counter size was specified
 */
enum status_code tc_set_count_value(
		const struct tc_module *const module_inst,
		const uint32_t count)
{
    70b4:	b580      	push	{r7, lr}
    70b6:	b084      	sub	sp, #16
    70b8:	af00      	add	r7, sp, #0
    70ba:	6078      	str	r0, [r7, #4]
    70bc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance*/
	Tc *const tc_module = module_inst->hw;
    70be:	687b      	ldr	r3, [r7, #4]
    70c0:	681b      	ldr	r3, [r3, #0]
    70c2:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    70c4:	46c0      	nop			; (mov r8, r8)
    70c6:	687b      	ldr	r3, [r7, #4]
    70c8:	0018      	movs	r0, r3
    70ca:	4b11      	ldr	r3, [pc, #68]	; (7110 <tc_set_count_value+0x5c>)
    70cc:	4798      	blx	r3
    70ce:	1e03      	subs	r3, r0, #0
    70d0:	d1f9      	bne.n	70c6 <tc_set_count_value+0x12>
		/* Wait for sync */
	}

	/* Write to based on the TC counter_size */
	switch (module_inst->counter_size) {
    70d2:	687b      	ldr	r3, [r7, #4]
    70d4:	791b      	ldrb	r3, [r3, #4]
    70d6:	2b04      	cmp	r3, #4
    70d8:	d004      	beq.n	70e4 <tc_set_count_value+0x30>
    70da:	2b08      	cmp	r3, #8
    70dc:	d00e      	beq.n	70fc <tc_set_count_value+0x48>
    70de:	2b00      	cmp	r3, #0
    70e0:	d006      	beq.n	70f0 <tc_set_count_value+0x3c>
    70e2:	e010      	b.n	7106 <tc_set_count_value+0x52>
		case TC_COUNTER_SIZE_8BIT:
			tc_module->COUNT8.COUNT.reg  = (uint8_t)count;
    70e4:	683b      	ldr	r3, [r7, #0]
    70e6:	b2da      	uxtb	r2, r3
    70e8:	68fb      	ldr	r3, [r7, #12]
    70ea:	751a      	strb	r2, [r3, #20]
			return STATUS_OK;
    70ec:	2300      	movs	r3, #0
    70ee:	e00b      	b.n	7108 <tc_set_count_value+0x54>

		case TC_COUNTER_SIZE_16BIT:
			tc_module->COUNT16.COUNT.reg = (uint16_t)count;
    70f0:	683b      	ldr	r3, [r7, #0]
    70f2:	b29a      	uxth	r2, r3
    70f4:	68fb      	ldr	r3, [r7, #12]
    70f6:	829a      	strh	r2, [r3, #20]
			return STATUS_OK;
    70f8:	2300      	movs	r3, #0
    70fa:	e005      	b.n	7108 <tc_set_count_value+0x54>

		case TC_COUNTER_SIZE_32BIT:
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
    70fc:	68fb      	ldr	r3, [r7, #12]
    70fe:	683a      	ldr	r2, [r7, #0]
    7100:	615a      	str	r2, [r3, #20]
			return STATUS_OK;
    7102:	2300      	movs	r3, #0
    7104:	e000      	b.n	7108 <tc_set_count_value+0x54>

		default:
			return STATUS_ERR_INVALID_ARG;
    7106:	2317      	movs	r3, #23
	}
}
    7108:	0018      	movs	r0, r3
    710a:	46bd      	mov	sp, r7
    710c:	b004      	add	sp, #16
    710e:	bd80      	pop	{r7, pc}
    7110:	00006bad 	.word	0x00006bad

00007114 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    7114:	b580      	push	{r7, lr}
    7116:	b082      	sub	sp, #8
    7118:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    711a:	4b19      	ldr	r3, [pc, #100]	; (7180 <Reset_Handler+0x6c>)
    711c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    711e:	4b19      	ldr	r3, [pc, #100]	; (7184 <Reset_Handler+0x70>)
    7120:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    7122:	687a      	ldr	r2, [r7, #4]
    7124:	683b      	ldr	r3, [r7, #0]
    7126:	429a      	cmp	r2, r3
    7128:	d00c      	beq.n	7144 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    712a:	e007      	b.n	713c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    712c:	683b      	ldr	r3, [r7, #0]
    712e:	1d1a      	adds	r2, r3, #4
    7130:	603a      	str	r2, [r7, #0]
    7132:	687a      	ldr	r2, [r7, #4]
    7134:	1d11      	adds	r1, r2, #4
    7136:	6079      	str	r1, [r7, #4]
    7138:	6812      	ldr	r2, [r2, #0]
    713a:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    713c:	683a      	ldr	r2, [r7, #0]
    713e:	4b12      	ldr	r3, [pc, #72]	; (7188 <Reset_Handler+0x74>)
    7140:	429a      	cmp	r2, r3
    7142:	d3f3      	bcc.n	712c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    7144:	4b11      	ldr	r3, [pc, #68]	; (718c <Reset_Handler+0x78>)
    7146:	603b      	str	r3, [r7, #0]
    7148:	e004      	b.n	7154 <Reset_Handler+0x40>
                *pDest++ = 0;
    714a:	683b      	ldr	r3, [r7, #0]
    714c:	1d1a      	adds	r2, r3, #4
    714e:	603a      	str	r2, [r7, #0]
    7150:	2200      	movs	r2, #0
    7152:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    7154:	683a      	ldr	r2, [r7, #0]
    7156:	4b0e      	ldr	r3, [pc, #56]	; (7190 <Reset_Handler+0x7c>)
    7158:	429a      	cmp	r2, r3
    715a:	d3f6      	bcc.n	714a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    715c:	4b0d      	ldr	r3, [pc, #52]	; (7194 <Reset_Handler+0x80>)
    715e:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    7160:	4b0d      	ldr	r3, [pc, #52]	; (7198 <Reset_Handler+0x84>)
    7162:	687a      	ldr	r2, [r7, #4]
    7164:	21ff      	movs	r1, #255	; 0xff
    7166:	438a      	bics	r2, r1
    7168:	609a      	str	r2, [r3, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    716a:	4a0c      	ldr	r2, [pc, #48]	; (719c <Reset_Handler+0x88>)
    716c:	6853      	ldr	r3, [r2, #4]
    716e:	2180      	movs	r1, #128	; 0x80
    7170:	430b      	orrs	r3, r1
    7172:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    7174:	4b0a      	ldr	r3, [pc, #40]	; (71a0 <Reset_Handler+0x8c>)
    7176:	4798      	blx	r3

        /* Branch to main function */
        main();
    7178:	4b0a      	ldr	r3, [pc, #40]	; (71a4 <Reset_Handler+0x90>)
    717a:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    717c:	e7fe      	b.n	717c <Reset_Handler+0x68>
    717e:	46c0      	nop			; (mov r8, r8)
    7180:	000272ec 	.word	0x000272ec
    7184:	20000000 	.word	0x20000000
    7188:	20000c78 	.word	0x20000c78
    718c:	20000c78 	.word	0x20000c78
    7190:	20004dc8 	.word	0x20004dc8
    7194:	00000000 	.word	0x00000000
    7198:	e000ed00 	.word	0xe000ed00
    719c:	41004000 	.word	0x41004000
    71a0:	00020f5d 	.word	0x00020f5d
    71a4:	00016a4d 	.word	0x00016a4d

000071a8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    71a8:	b580      	push	{r7, lr}
    71aa:	af00      	add	r7, sp, #0
        while (1) {
    71ac:	e7fe      	b.n	71ac <Dummy_Handler+0x4>
	...

000071b0 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    71b0:	b580      	push	{r7, lr}
    71b2:	b084      	sub	sp, #16
    71b4:	af00      	add	r7, sp, #0
    71b6:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    71b8:	4b0a      	ldr	r3, [pc, #40]	; (71e4 <_sbrk+0x34>)
    71ba:	681b      	ldr	r3, [r3, #0]
    71bc:	2b00      	cmp	r3, #0
    71be:	d102      	bne.n	71c6 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    71c0:	4b08      	ldr	r3, [pc, #32]	; (71e4 <_sbrk+0x34>)
    71c2:	4a09      	ldr	r2, [pc, #36]	; (71e8 <_sbrk+0x38>)
    71c4:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    71c6:	4b07      	ldr	r3, [pc, #28]	; (71e4 <_sbrk+0x34>)
    71c8:	681b      	ldr	r3, [r3, #0]
    71ca:	60fb      	str	r3, [r7, #12]

	heap += incr;
    71cc:	4b05      	ldr	r3, [pc, #20]	; (71e4 <_sbrk+0x34>)
    71ce:	681a      	ldr	r2, [r3, #0]
    71d0:	687b      	ldr	r3, [r7, #4]
    71d2:	18d2      	adds	r2, r2, r3
    71d4:	4b03      	ldr	r3, [pc, #12]	; (71e4 <_sbrk+0x34>)
    71d6:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    71d8:	68fb      	ldr	r3, [r7, #12]
}
    71da:	0018      	movs	r0, r3
    71dc:	46bd      	mov	sp, r7
    71de:	b004      	add	sp, #16
    71e0:	bd80      	pop	{r7, pc}
    71e2:	46c0      	nop			; (mov r8, r8)
    71e4:	20000d04 	.word	0x20000d04
    71e8:	20006dc8 	.word	0x20006dc8

000071ec <cal_loop_test>:
extern FRESULT SD_status;
extern FIL file_cal_report, file_cal_raw;

extern struct OPTIONS options;

void cal_loop_test(struct MEASUREMENT *meas_inst){
    71ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    71ee:	b08d      	sub	sp, #52	; 0x34
    71f0:	af00      	add	r7, sp, #0
    71f2:	60f8      	str	r0, [r7, #12]
	float dN1, dE1, dD1;
	float delta_horizontal;
	
	
	// increment distance and point counter
	n_points = n_points+1;
    71f4:	4bd7      	ldr	r3, [pc, #860]	; (7554 <cal_loop_test+0x368>)
    71f6:	681b      	ldr	r3, [r3, #0]
    71f8:	1c5a      	adds	r2, r3, #1
    71fa:	4bd6      	ldr	r3, [pc, #856]	; (7554 <cal_loop_test+0x368>)
    71fc:	601a      	str	r2, [r3, #0]
	loop_distance = loop_distance + meas_inst->distance;
    71fe:	68fb      	ldr	r3, [r7, #12]
    7200:	69da      	ldr	r2, [r3, #28]
    7202:	4bd5      	ldr	r3, [pc, #852]	; (7558 <cal_loop_test+0x36c>)
    7204:	6819      	ldr	r1, [r3, #0]
    7206:	4bd5      	ldr	r3, [pc, #852]	; (755c <cal_loop_test+0x370>)
    7208:	1c10      	adds	r0, r2, #0
    720a:	4798      	blx	r3
    720c:	1c03      	adds	r3, r0, #0
    720e:	1c1a      	adds	r2, r3, #0
    7210:	4bd1      	ldr	r3, [pc, #836]	; (7558 <cal_loop_test+0x36c>)
    7212:	601a      	str	r2, [r3, #0]
	// find current position
	N1 = loop_horizontal*cos(deg2rad*loop_azimuth);
    7214:	4bd2      	ldr	r3, [pc, #840]	; (7560 <cal_loop_test+0x374>)
    7216:	681a      	ldr	r2, [r3, #0]
    7218:	4bd2      	ldr	r3, [pc, #840]	; (7564 <cal_loop_test+0x378>)
    721a:	1c10      	adds	r0, r2, #0
    721c:	4798      	blx	r3
    721e:	0005      	movs	r5, r0
    7220:	000e      	movs	r6, r1
    7222:	4bd1      	ldr	r3, [pc, #836]	; (7568 <cal_loop_test+0x37c>)
    7224:	681a      	ldr	r2, [r3, #0]
    7226:	4bd1      	ldr	r3, [pc, #836]	; (756c <cal_loop_test+0x380>)
    7228:	6819      	ldr	r1, [r3, #0]
    722a:	4bd1      	ldr	r3, [pc, #836]	; (7570 <cal_loop_test+0x384>)
    722c:	1c10      	adds	r0, r2, #0
    722e:	4798      	blx	r3
    7230:	1c03      	adds	r3, r0, #0
    7232:	1c1a      	adds	r2, r3, #0
    7234:	4bcb      	ldr	r3, [pc, #812]	; (7564 <cal_loop_test+0x378>)
    7236:	1c10      	adds	r0, r2, #0
    7238:	4798      	blx	r3
    723a:	0003      	movs	r3, r0
    723c:	000c      	movs	r4, r1
    723e:	0018      	movs	r0, r3
    7240:	0021      	movs	r1, r4
    7242:	4bcc      	ldr	r3, [pc, #816]	; (7574 <cal_loop_test+0x388>)
    7244:	4798      	blx	r3
    7246:	0002      	movs	r2, r0
    7248:	000b      	movs	r3, r1
    724a:	4ccb      	ldr	r4, [pc, #812]	; (7578 <cal_loop_test+0x38c>)
    724c:	0028      	movs	r0, r5
    724e:	0031      	movs	r1, r6
    7250:	47a0      	blx	r4
    7252:	0003      	movs	r3, r0
    7254:	000c      	movs	r4, r1
    7256:	0019      	movs	r1, r3
    7258:	0022      	movs	r2, r4
    725a:	4bc8      	ldr	r3, [pc, #800]	; (757c <cal_loop_test+0x390>)
    725c:	0008      	movs	r0, r1
    725e:	0011      	movs	r1, r2
    7260:	4798      	blx	r3
    7262:	1c03      	adds	r3, r0, #0
    7264:	62fb      	str	r3, [r7, #44]	; 0x2c
	E1 = loop_horizontal*sin(deg2rad*loop_azimuth);
    7266:	4bbe      	ldr	r3, [pc, #760]	; (7560 <cal_loop_test+0x374>)
    7268:	681a      	ldr	r2, [r3, #0]
    726a:	4bbe      	ldr	r3, [pc, #760]	; (7564 <cal_loop_test+0x378>)
    726c:	1c10      	adds	r0, r2, #0
    726e:	4798      	blx	r3
    7270:	0005      	movs	r5, r0
    7272:	000e      	movs	r6, r1
    7274:	4bbc      	ldr	r3, [pc, #752]	; (7568 <cal_loop_test+0x37c>)
    7276:	681a      	ldr	r2, [r3, #0]
    7278:	4bbc      	ldr	r3, [pc, #752]	; (756c <cal_loop_test+0x380>)
    727a:	6819      	ldr	r1, [r3, #0]
    727c:	4bbc      	ldr	r3, [pc, #752]	; (7570 <cal_loop_test+0x384>)
    727e:	1c10      	adds	r0, r2, #0
    7280:	4798      	blx	r3
    7282:	1c03      	adds	r3, r0, #0
    7284:	1c1a      	adds	r2, r3, #0
    7286:	4bb7      	ldr	r3, [pc, #732]	; (7564 <cal_loop_test+0x378>)
    7288:	1c10      	adds	r0, r2, #0
    728a:	4798      	blx	r3
    728c:	0003      	movs	r3, r0
    728e:	000c      	movs	r4, r1
    7290:	0018      	movs	r0, r3
    7292:	0021      	movs	r1, r4
    7294:	4bba      	ldr	r3, [pc, #744]	; (7580 <cal_loop_test+0x394>)
    7296:	4798      	blx	r3
    7298:	0002      	movs	r2, r0
    729a:	000b      	movs	r3, r1
    729c:	4cb6      	ldr	r4, [pc, #728]	; (7578 <cal_loop_test+0x38c>)
    729e:	0028      	movs	r0, r5
    72a0:	0031      	movs	r1, r6
    72a2:	47a0      	blx	r4
    72a4:	0003      	movs	r3, r0
    72a6:	000c      	movs	r4, r1
    72a8:	0019      	movs	r1, r3
    72aa:	0022      	movs	r2, r4
    72ac:	4bb3      	ldr	r3, [pc, #716]	; (757c <cal_loop_test+0x390>)
    72ae:	0008      	movs	r0, r1
    72b0:	0011      	movs	r1, r2
    72b2:	4798      	blx	r3
    72b4:	1c03      	adds	r3, r0, #0
    72b6:	62bb      	str	r3, [r7, #40]	; 0x28
	D1 = loop_vertical;
    72b8:	4bb2      	ldr	r3, [pc, #712]	; (7584 <cal_loop_test+0x398>)
    72ba:	681b      	ldr	r3, [r3, #0]
    72bc:	627b      	str	r3, [r7, #36]	; 0x24
	// find difference in position
	delta_horizontal = meas_inst->distance*cos(deg2rad*meas_inst->inclination);
    72be:	68fb      	ldr	r3, [r7, #12]
    72c0:	69da      	ldr	r2, [r3, #28]
    72c2:	4ba8      	ldr	r3, [pc, #672]	; (7564 <cal_loop_test+0x378>)
    72c4:	1c10      	adds	r0, r2, #0
    72c6:	4798      	blx	r3
    72c8:	0005      	movs	r5, r0
    72ca:	000e      	movs	r6, r1
    72cc:	68fb      	ldr	r3, [r7, #12]
    72ce:	691a      	ldr	r2, [r3, #16]
    72d0:	4ba5      	ldr	r3, [pc, #660]	; (7568 <cal_loop_test+0x37c>)
    72d2:	6819      	ldr	r1, [r3, #0]
    72d4:	4ba6      	ldr	r3, [pc, #664]	; (7570 <cal_loop_test+0x384>)
    72d6:	1c10      	adds	r0, r2, #0
    72d8:	4798      	blx	r3
    72da:	1c03      	adds	r3, r0, #0
    72dc:	1c1a      	adds	r2, r3, #0
    72de:	4ba1      	ldr	r3, [pc, #644]	; (7564 <cal_loop_test+0x378>)
    72e0:	1c10      	adds	r0, r2, #0
    72e2:	4798      	blx	r3
    72e4:	0003      	movs	r3, r0
    72e6:	000c      	movs	r4, r1
    72e8:	0018      	movs	r0, r3
    72ea:	0021      	movs	r1, r4
    72ec:	4ba1      	ldr	r3, [pc, #644]	; (7574 <cal_loop_test+0x388>)
    72ee:	4798      	blx	r3
    72f0:	0002      	movs	r2, r0
    72f2:	000b      	movs	r3, r1
    72f4:	4ca0      	ldr	r4, [pc, #640]	; (7578 <cal_loop_test+0x38c>)
    72f6:	0028      	movs	r0, r5
    72f8:	0031      	movs	r1, r6
    72fa:	47a0      	blx	r4
    72fc:	0003      	movs	r3, r0
    72fe:	000c      	movs	r4, r1
    7300:	0019      	movs	r1, r3
    7302:	0022      	movs	r2, r4
    7304:	4b9d      	ldr	r3, [pc, #628]	; (757c <cal_loop_test+0x390>)
    7306:	0008      	movs	r0, r1
    7308:	0011      	movs	r1, r2
    730a:	4798      	blx	r3
    730c:	1c03      	adds	r3, r0, #0
    730e:	623b      	str	r3, [r7, #32]
	dN1 = delta_horizontal*cos(deg2rad*meas_inst->azimuth);
    7310:	4b94      	ldr	r3, [pc, #592]	; (7564 <cal_loop_test+0x378>)
    7312:	6a38      	ldr	r0, [r7, #32]
    7314:	4798      	blx	r3
    7316:	0005      	movs	r5, r0
    7318:	000e      	movs	r6, r1
    731a:	68fb      	ldr	r3, [r7, #12]
    731c:	68da      	ldr	r2, [r3, #12]
    731e:	4b92      	ldr	r3, [pc, #584]	; (7568 <cal_loop_test+0x37c>)
    7320:	6819      	ldr	r1, [r3, #0]
    7322:	4b93      	ldr	r3, [pc, #588]	; (7570 <cal_loop_test+0x384>)
    7324:	1c10      	adds	r0, r2, #0
    7326:	4798      	blx	r3
    7328:	1c03      	adds	r3, r0, #0
    732a:	1c1a      	adds	r2, r3, #0
    732c:	4b8d      	ldr	r3, [pc, #564]	; (7564 <cal_loop_test+0x378>)
    732e:	1c10      	adds	r0, r2, #0
    7330:	4798      	blx	r3
    7332:	0003      	movs	r3, r0
    7334:	000c      	movs	r4, r1
    7336:	0018      	movs	r0, r3
    7338:	0021      	movs	r1, r4
    733a:	4b8e      	ldr	r3, [pc, #568]	; (7574 <cal_loop_test+0x388>)
    733c:	4798      	blx	r3
    733e:	0002      	movs	r2, r0
    7340:	000b      	movs	r3, r1
    7342:	4c8d      	ldr	r4, [pc, #564]	; (7578 <cal_loop_test+0x38c>)
    7344:	0028      	movs	r0, r5
    7346:	0031      	movs	r1, r6
    7348:	47a0      	blx	r4
    734a:	0003      	movs	r3, r0
    734c:	000c      	movs	r4, r1
    734e:	0019      	movs	r1, r3
    7350:	0022      	movs	r2, r4
    7352:	4b8a      	ldr	r3, [pc, #552]	; (757c <cal_loop_test+0x390>)
    7354:	0008      	movs	r0, r1
    7356:	0011      	movs	r1, r2
    7358:	4798      	blx	r3
    735a:	1c03      	adds	r3, r0, #0
    735c:	61fb      	str	r3, [r7, #28]
	dE1 = delta_horizontal*sin(deg2rad*meas_inst->azimuth);
    735e:	4b81      	ldr	r3, [pc, #516]	; (7564 <cal_loop_test+0x378>)
    7360:	6a38      	ldr	r0, [r7, #32]
    7362:	4798      	blx	r3
    7364:	0005      	movs	r5, r0
    7366:	000e      	movs	r6, r1
    7368:	68fb      	ldr	r3, [r7, #12]
    736a:	68da      	ldr	r2, [r3, #12]
    736c:	4b7e      	ldr	r3, [pc, #504]	; (7568 <cal_loop_test+0x37c>)
    736e:	6819      	ldr	r1, [r3, #0]
    7370:	4b7f      	ldr	r3, [pc, #508]	; (7570 <cal_loop_test+0x384>)
    7372:	1c10      	adds	r0, r2, #0
    7374:	4798      	blx	r3
    7376:	1c03      	adds	r3, r0, #0
    7378:	1c1a      	adds	r2, r3, #0
    737a:	4b7a      	ldr	r3, [pc, #488]	; (7564 <cal_loop_test+0x378>)
    737c:	1c10      	adds	r0, r2, #0
    737e:	4798      	blx	r3
    7380:	0003      	movs	r3, r0
    7382:	000c      	movs	r4, r1
    7384:	0018      	movs	r0, r3
    7386:	0021      	movs	r1, r4
    7388:	4b7d      	ldr	r3, [pc, #500]	; (7580 <cal_loop_test+0x394>)
    738a:	4798      	blx	r3
    738c:	0002      	movs	r2, r0
    738e:	000b      	movs	r3, r1
    7390:	4c79      	ldr	r4, [pc, #484]	; (7578 <cal_loop_test+0x38c>)
    7392:	0028      	movs	r0, r5
    7394:	0031      	movs	r1, r6
    7396:	47a0      	blx	r4
    7398:	0003      	movs	r3, r0
    739a:	000c      	movs	r4, r1
    739c:	0019      	movs	r1, r3
    739e:	0022      	movs	r2, r4
    73a0:	4b76      	ldr	r3, [pc, #472]	; (757c <cal_loop_test+0x390>)
    73a2:	0008      	movs	r0, r1
    73a4:	0011      	movs	r1, r2
    73a6:	4798      	blx	r3
    73a8:	1c03      	adds	r3, r0, #0
    73aa:	61bb      	str	r3, [r7, #24]
	dD1 = meas_inst->distance*sin(deg2rad*meas_inst->inclination);
    73ac:	68fb      	ldr	r3, [r7, #12]
    73ae:	69da      	ldr	r2, [r3, #28]
    73b0:	4b6c      	ldr	r3, [pc, #432]	; (7564 <cal_loop_test+0x378>)
    73b2:	1c10      	adds	r0, r2, #0
    73b4:	4798      	blx	r3
    73b6:	0005      	movs	r5, r0
    73b8:	000e      	movs	r6, r1
    73ba:	68fb      	ldr	r3, [r7, #12]
    73bc:	691a      	ldr	r2, [r3, #16]
    73be:	4b6a      	ldr	r3, [pc, #424]	; (7568 <cal_loop_test+0x37c>)
    73c0:	6819      	ldr	r1, [r3, #0]
    73c2:	4b6b      	ldr	r3, [pc, #428]	; (7570 <cal_loop_test+0x384>)
    73c4:	1c10      	adds	r0, r2, #0
    73c6:	4798      	blx	r3
    73c8:	1c03      	adds	r3, r0, #0
    73ca:	1c1a      	adds	r2, r3, #0
    73cc:	4b65      	ldr	r3, [pc, #404]	; (7564 <cal_loop_test+0x378>)
    73ce:	1c10      	adds	r0, r2, #0
    73d0:	4798      	blx	r3
    73d2:	0003      	movs	r3, r0
    73d4:	000c      	movs	r4, r1
    73d6:	0018      	movs	r0, r3
    73d8:	0021      	movs	r1, r4
    73da:	4b69      	ldr	r3, [pc, #420]	; (7580 <cal_loop_test+0x394>)
    73dc:	4798      	blx	r3
    73de:	0002      	movs	r2, r0
    73e0:	000b      	movs	r3, r1
    73e2:	4c65      	ldr	r4, [pc, #404]	; (7578 <cal_loop_test+0x38c>)
    73e4:	0028      	movs	r0, r5
    73e6:	0031      	movs	r1, r6
    73e8:	47a0      	blx	r4
    73ea:	0003      	movs	r3, r0
    73ec:	000c      	movs	r4, r1
    73ee:	0019      	movs	r1, r3
    73f0:	0022      	movs	r2, r4
    73f2:	4b62      	ldr	r3, [pc, #392]	; (757c <cal_loop_test+0x390>)
    73f4:	0008      	movs	r0, r1
    73f6:	0011      	movs	r1, r2
    73f8:	4798      	blx	r3
    73fa:	1c03      	adds	r3, r0, #0
    73fc:	617b      	str	r3, [r7, #20]
	//  add  new offsets
	N1 = N1 + dN1;
    73fe:	4b57      	ldr	r3, [pc, #348]	; (755c <cal_loop_test+0x370>)
    7400:	69f9      	ldr	r1, [r7, #28]
    7402:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    7404:	4798      	blx	r3
    7406:	1c03      	adds	r3, r0, #0
    7408:	62fb      	str	r3, [r7, #44]	; 0x2c
	E1 = E1 + dE1;
    740a:	4b54      	ldr	r3, [pc, #336]	; (755c <cal_loop_test+0x370>)
    740c:	69b9      	ldr	r1, [r7, #24]
    740e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    7410:	4798      	blx	r3
    7412:	1c03      	adds	r3, r0, #0
    7414:	62bb      	str	r3, [r7, #40]	; 0x28
	D1 = D1 + dD1;
    7416:	4b51      	ldr	r3, [pc, #324]	; (755c <cal_loop_test+0x370>)
    7418:	6979      	ldr	r1, [r7, #20]
    741a:	6a78      	ldr	r0, [r7, #36]	; 0x24
    741c:	4798      	blx	r3
    741e:	1c03      	adds	r3, r0, #0
    7420:	627b      	str	r3, [r7, #36]	; 0x24
	//  Calculate new horizontal, vertical, azimuth
	loop_horizontal = sqrt(pow(N1,2)+pow(E1,2));
    7422:	4b50      	ldr	r3, [pc, #320]	; (7564 <cal_loop_test+0x378>)
    7424:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    7426:	4798      	blx	r3
    7428:	2300      	movs	r3, #0
    742a:	2480      	movs	r4, #128	; 0x80
    742c:	05e4      	lsls	r4, r4, #23
    742e:	001a      	movs	r2, r3
    7430:	0023      	movs	r3, r4
    7432:	4c55      	ldr	r4, [pc, #340]	; (7588 <cal_loop_test+0x39c>)
    7434:	47a0      	blx	r4
    7436:	0005      	movs	r5, r0
    7438:	000e      	movs	r6, r1
    743a:	4b4a      	ldr	r3, [pc, #296]	; (7564 <cal_loop_test+0x378>)
    743c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    743e:	4798      	blx	r3
    7440:	2300      	movs	r3, #0
    7442:	2480      	movs	r4, #128	; 0x80
    7444:	05e4      	lsls	r4, r4, #23
    7446:	001a      	movs	r2, r3
    7448:	0023      	movs	r3, r4
    744a:	4c4f      	ldr	r4, [pc, #316]	; (7588 <cal_loop_test+0x39c>)
    744c:	47a0      	blx	r4
    744e:	0002      	movs	r2, r0
    7450:	000b      	movs	r3, r1
    7452:	4c4e      	ldr	r4, [pc, #312]	; (758c <cal_loop_test+0x3a0>)
    7454:	0028      	movs	r0, r5
    7456:	0031      	movs	r1, r6
    7458:	47a0      	blx	r4
    745a:	0003      	movs	r3, r0
    745c:	000c      	movs	r4, r1
    745e:	0018      	movs	r0, r3
    7460:	0021      	movs	r1, r4
    7462:	4b4b      	ldr	r3, [pc, #300]	; (7590 <cal_loop_test+0x3a4>)
    7464:	4798      	blx	r3
    7466:	000a      	movs	r2, r1
    7468:	0001      	movs	r1, r0
    746a:	4b44      	ldr	r3, [pc, #272]	; (757c <cal_loop_test+0x390>)
    746c:	0008      	movs	r0, r1
    746e:	0011      	movs	r1, r2
    7470:	4798      	blx	r3
    7472:	1c02      	adds	r2, r0, #0
    7474:	4b3a      	ldr	r3, [pc, #232]	; (7560 <cal_loop_test+0x374>)
    7476:	601a      	str	r2, [r3, #0]
	loop_vertical = D1;
    7478:	4b42      	ldr	r3, [pc, #264]	; (7584 <cal_loop_test+0x398>)
    747a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    747c:	601a      	str	r2, [r3, #0]
	loop_azimuth = rad2deg*atan2(E1, N1);
    747e:	4b45      	ldr	r3, [pc, #276]	; (7594 <cal_loop_test+0x3a8>)
    7480:	681a      	ldr	r2, [r3, #0]
    7482:	4b38      	ldr	r3, [pc, #224]	; (7564 <cal_loop_test+0x378>)
    7484:	1c10      	adds	r0, r2, #0
    7486:	4798      	blx	r3
    7488:	0005      	movs	r5, r0
    748a:	000e      	movs	r6, r1
    748c:	4b35      	ldr	r3, [pc, #212]	; (7564 <cal_loop_test+0x378>)
    748e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    7490:	4798      	blx	r3
    7492:	6038      	str	r0, [r7, #0]
    7494:	6079      	str	r1, [r7, #4]
    7496:	4b33      	ldr	r3, [pc, #204]	; (7564 <cal_loop_test+0x378>)
    7498:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    749a:	4798      	blx	r3
    749c:	0003      	movs	r3, r0
    749e:	000c      	movs	r4, r1
    74a0:	001a      	movs	r2, r3
    74a2:	0023      	movs	r3, r4
    74a4:	6838      	ldr	r0, [r7, #0]
    74a6:	6879      	ldr	r1, [r7, #4]
    74a8:	4c3b      	ldr	r4, [pc, #236]	; (7598 <cal_loop_test+0x3ac>)
    74aa:	47a0      	blx	r4
    74ac:	0002      	movs	r2, r0
    74ae:	000b      	movs	r3, r1
    74b0:	4c31      	ldr	r4, [pc, #196]	; (7578 <cal_loop_test+0x38c>)
    74b2:	0028      	movs	r0, r5
    74b4:	0031      	movs	r1, r6
    74b6:	47a0      	blx	r4
    74b8:	0003      	movs	r3, r0
    74ba:	000c      	movs	r4, r1
    74bc:	0019      	movs	r1, r3
    74be:	0022      	movs	r2, r4
    74c0:	4b2e      	ldr	r3, [pc, #184]	; (757c <cal_loop_test+0x390>)
    74c2:	0008      	movs	r0, r1
    74c4:	0011      	movs	r1, r2
    74c6:	4798      	blx	r3
    74c8:	1c02      	adds	r2, r0, #0
    74ca:	4b28      	ldr	r3, [pc, #160]	; (756c <cal_loop_test+0x380>)
    74cc:	601a      	str	r2, [r3, #0]
	
	loop_error = sqrt(pow(loop_horizontal,2) + pow(loop_vertical,2))/loop_distance;
    74ce:	4b24      	ldr	r3, [pc, #144]	; (7560 <cal_loop_test+0x374>)
    74d0:	681a      	ldr	r2, [r3, #0]
    74d2:	4b24      	ldr	r3, [pc, #144]	; (7564 <cal_loop_test+0x378>)
    74d4:	1c10      	adds	r0, r2, #0
    74d6:	4798      	blx	r3
    74d8:	2300      	movs	r3, #0
    74da:	2480      	movs	r4, #128	; 0x80
    74dc:	05e4      	lsls	r4, r4, #23
    74de:	001a      	movs	r2, r3
    74e0:	0023      	movs	r3, r4
    74e2:	4c29      	ldr	r4, [pc, #164]	; (7588 <cal_loop_test+0x39c>)
    74e4:	47a0      	blx	r4
    74e6:	0005      	movs	r5, r0
    74e8:	000e      	movs	r6, r1
    74ea:	4b26      	ldr	r3, [pc, #152]	; (7584 <cal_loop_test+0x398>)
    74ec:	681a      	ldr	r2, [r3, #0]
    74ee:	4b1d      	ldr	r3, [pc, #116]	; (7564 <cal_loop_test+0x378>)
    74f0:	1c10      	adds	r0, r2, #0
    74f2:	4798      	blx	r3
    74f4:	2300      	movs	r3, #0
    74f6:	2480      	movs	r4, #128	; 0x80
    74f8:	05e4      	lsls	r4, r4, #23
    74fa:	001a      	movs	r2, r3
    74fc:	0023      	movs	r3, r4
    74fe:	4c22      	ldr	r4, [pc, #136]	; (7588 <cal_loop_test+0x39c>)
    7500:	47a0      	blx	r4
    7502:	0002      	movs	r2, r0
    7504:	000b      	movs	r3, r1
    7506:	4c21      	ldr	r4, [pc, #132]	; (758c <cal_loop_test+0x3a0>)
    7508:	0028      	movs	r0, r5
    750a:	0031      	movs	r1, r6
    750c:	47a0      	blx	r4
    750e:	0003      	movs	r3, r0
    7510:	000c      	movs	r4, r1
    7512:	0018      	movs	r0, r3
    7514:	0021      	movs	r1, r4
    7516:	4b1e      	ldr	r3, [pc, #120]	; (7590 <cal_loop_test+0x3a4>)
    7518:	4798      	blx	r3
    751a:	0005      	movs	r5, r0
    751c:	000e      	movs	r6, r1
    751e:	4b0e      	ldr	r3, [pc, #56]	; (7558 <cal_loop_test+0x36c>)
    7520:	681a      	ldr	r2, [r3, #0]
    7522:	4b10      	ldr	r3, [pc, #64]	; (7564 <cal_loop_test+0x378>)
    7524:	1c10      	adds	r0, r2, #0
    7526:	4798      	blx	r3
    7528:	0002      	movs	r2, r0
    752a:	000b      	movs	r3, r1
    752c:	4c1b      	ldr	r4, [pc, #108]	; (759c <cal_loop_test+0x3b0>)
    752e:	0028      	movs	r0, r5
    7530:	0031      	movs	r1, r6
    7532:	47a0      	blx	r4
    7534:	0003      	movs	r3, r0
    7536:	000c      	movs	r4, r1
    7538:	0019      	movs	r1, r3
    753a:	0022      	movs	r2, r4
    753c:	4b0f      	ldr	r3, [pc, #60]	; (757c <cal_loop_test+0x390>)
    753e:	0008      	movs	r0, r1
    7540:	0011      	movs	r1, r2
    7542:	4798      	blx	r3
    7544:	1c02      	adds	r2, r0, #0
    7546:	4b16      	ldr	r3, [pc, #88]	; (75a0 <cal_loop_test+0x3b4>)
    7548:	601a      	str	r2, [r3, #0]
	
}
    754a:	46c0      	nop			; (mov r8, r8)
    754c:	46bd      	mov	sp, r7
    754e:	b00d      	add	sp, #52	; 0x34
    7550:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7552:	46c0      	nop			; (mov r8, r8)
    7554:	200027f8 	.word	0x200027f8
    7558:	20002ee8 	.word	0x20002ee8
    755c:	0001e461 	.word	0x0001e461
    7560:	20003b74 	.word	0x20003b74
    7564:	00020d99 	.word	0x00020d99
    7568:	00025fb8 	.word	0x00025fb8
    756c:	20004978 	.word	0x20004978
    7570:	0001eb65 	.word	0x0001eb65
    7574:	0001b4f5 	.word	0x0001b4f5
    7578:	000200d1 	.word	0x000200d1
    757c:	00020e3d 	.word	0x00020e3d
    7580:	0001b6b1 	.word	0x0001b6b1
    7584:	20002ee0 	.word	0x20002ee0
    7588:	0001b749 	.word	0x0001b749
    758c:	0001f249 	.word	0x0001f249
    7590:	0001baa1 	.word	0x0001baa1
    7594:	00025fb4 	.word	0x00025fb4
    7598:	0001b741 	.word	0x0001b741
    759c:	0001f869 	.word	0x0001f869
    75a0:	20004554 	.word	0x20004554

000075a4 <cal_dist_process>:

void cal_dist_process(void){
    75a4:	b5b0      	push	{r4, r5, r7, lr}
    75a6:	af00      	add	r7, sp, #0
	
	
	//  Fill Out data for report structure
	get_time();//  Get current time
    75a8:	4b0f      	ldr	r3, [pc, #60]	; (75e8 <cal_dist_process+0x44>)
    75aa:	4798      	blx	r3
	cal_report_dist.timestamp = gen_posix_time(&current_time);
    75ac:	4b0f      	ldr	r3, [pc, #60]	; (75ec <cal_dist_process+0x48>)
    75ae:	0018      	movs	r0, r3
    75b0:	4b0f      	ldr	r3, [pc, #60]	; (75f0 <cal_dist_process+0x4c>)
    75b2:	4798      	blx	r3
    75b4:	0002      	movs	r2, r0
    75b6:	4b0f      	ldr	r3, [pc, #60]	; (75f4 <cal_dist_process+0x50>)
    75b8:	60da      	str	r2, [r3, #12]
	cal_report_dist.software_version = software_version;
    75ba:	4b0f      	ldr	r3, [pc, #60]	; (75f8 <cal_dist_process+0x54>)
    75bc:	681a      	ldr	r2, [r3, #0]
    75be:	4b0d      	ldr	r3, [pc, #52]	; (75f4 <cal_dist_process+0x50>)
    75c0:	601a      	str	r2, [r3, #0]
	cal_report_dist.points = buf_points;
    75c2:	4b0e      	ldr	r3, [pc, #56]	; (75fc <cal_dist_process+0x58>)
    75c4:	781b      	ldrb	r3, [r3, #0]
    75c6:	001a      	movs	r2, r3
    75c8:	4b0a      	ldr	r3, [pc, #40]	; (75f4 <cal_dist_process+0x50>)
    75ca:	609a      	str	r2, [r3, #8]
	memcpy(&cal_report_dist.time_struct,&current_time,sizeof(current_time));
    75cc:	4b09      	ldr	r3, [pc, #36]	; (75f4 <cal_dist_process+0x50>)
    75ce:	4a07      	ldr	r2, [pc, #28]	; (75ec <cal_dist_process+0x48>)
    75d0:	3340      	adds	r3, #64	; 0x40
    75d2:	ca13      	ldmia	r2!, {r0, r1, r4}
    75d4:	c313      	stmia	r3!, {r0, r1, r4}
    75d6:	ca03      	ldmia	r2!, {r0, r1}
    75d8:	c303      	stmia	r3!, {r0, r1}
	
	dist_calst.dist_offset = temp_dist_offset;
    75da:	4b09      	ldr	r3, [pc, #36]	; (7600 <cal_dist_process+0x5c>)
    75dc:	681a      	ldr	r2, [r3, #0]
    75de:	4b09      	ldr	r3, [pc, #36]	; (7604 <cal_dist_process+0x60>)
    75e0:	659a      	str	r2, [r3, #88]	; 0x58
}
    75e2:	46c0      	nop			; (mov r8, r8)
    75e4:	46bd      	mov	sp, r7
    75e6:	bdb0      	pop	{r4, r5, r7, pc}
    75e8:	0000e6e5 	.word	0x0000e6e5
    75ec:	2000103c 	.word	0x2000103c
    75f0:	0000e8b9 	.word	0x0000e8b9
    75f4:	20002f20 	.word	0x20002f20
    75f8:	00025fb0 	.word	0x00025fb0
    75fc:	200018e0 	.word	0x200018e0
    7600:	20003a2c 	.word	0x20003a2c
    7604:	200042cc 	.word	0x200042cc

00007608 <cal_write_report>:





FRESULT cal_write_report(void){
    7608:	b5f0      	push	{r4, r5, r6, r7, lr}
    760a:	46d6      	mov	lr, sl
    760c:	464f      	mov	r7, r9
    760e:	4646      	mov	r6, r8
    7610:	b5c0      	push	{r6, r7, lr}
    7612:	4c7e      	ldr	r4, [pc, #504]	; (780c <cal_write_report+0x204>)
    7614:	44a5      	add	sp, r4
    7616:	af0c      	add	r7, sp, #48	; 0x30
	char file_name[250];
	char write_str1[600];
	char write_str2[600];
	FRESULT fdebug1, fdebug2, fdebug3;
	DSTATUS diskio_status;
	pbw = &bw;
    7618:	4b7d      	ldr	r3, [pc, #500]	; (7810 <cal_write_report+0x208>)
    761a:	2220      	movs	r2, #32
    761c:	4694      	mov	ip, r2
    761e:	2208      	movs	r2, #8
    7620:	4690      	mov	r8, r2
    7622:	2208      	movs	r2, #8
    7624:	4691      	mov	r9, r2
    7626:	44b9      	add	r9, r7
    7628:	44c8      	add	r8, r9
    762a:	44c4      	add	ip, r8
    762c:	4463      	add	r3, ip
    762e:	22d5      	movs	r2, #213	; 0xd5
    7630:	00d2      	lsls	r2, r2, #3
    7632:	2120      	movs	r1, #32
    7634:	468c      	mov	ip, r1
    7636:	2108      	movs	r1, #8
    7638:	4688      	mov	r8, r1
    763a:	2108      	movs	r1, #8
    763c:	4689      	mov	r9, r1
    763e:	44b9      	add	r9, r7
    7640:	44c8      	add	r8, r9
    7642:	44c4      	add	ip, r8
    7644:	4462      	add	r2, ip
    7646:	6013      	str	r3, [r2, #0]
	struct MEASUREMENT temp_meas;
	float azm_raw, inc_raw, roll_raw;
	float azm_cal, inc_cal, roll_cal;
	
	//  Set up SD card
	config_spi(SD_card);
    7648:	2002      	movs	r0, #2
    764a:	4b72      	ldr	r3, [pc, #456]	; (7814 <cal_write_report+0x20c>)
    764c:	4798      	blx	r3
	spi_select_slave(&spi_main, &slave_SD, true);
    764e:	4972      	ldr	r1, [pc, #456]	; (7818 <cal_write_report+0x210>)
    7650:	4b72      	ldr	r3, [pc, #456]	; (781c <cal_write_report+0x214>)
    7652:	2201      	movs	r2, #1
    7654:	0018      	movs	r0, r3
    7656:	4b72      	ldr	r3, [pc, #456]	; (7820 <cal_write_report+0x218>)
    7658:	4798      	blx	r3

	diskio_status = disk_status(0);
    765a:	4b72      	ldr	r3, [pc, #456]	; (7824 <cal_write_report+0x21c>)
    765c:	2220      	movs	r2, #32
    765e:	2108      	movs	r1, #8
    7660:	468c      	mov	ip, r1
    7662:	2108      	movs	r1, #8
    7664:	4688      	mov	r8, r1
    7666:	44b8      	add	r8, r7
    7668:	44c4      	add	ip, r8
    766a:	4462      	add	r2, ip
    766c:	18d4      	adds	r4, r2, r3
    766e:	2000      	movs	r0, #0
    7670:	4b6d      	ldr	r3, [pc, #436]	; (7828 <cal_write_report+0x220>)
    7672:	4798      	blx	r3
    7674:	0003      	movs	r3, r0
    7676:	7023      	strb	r3, [r4, #0]

	if(diskio_status){
    7678:	4b6a      	ldr	r3, [pc, #424]	; (7824 <cal_write_report+0x21c>)
    767a:	2220      	movs	r2, #32
    767c:	4694      	mov	ip, r2
    767e:	2208      	movs	r2, #8
    7680:	4690      	mov	r8, r2
    7682:	2208      	movs	r2, #8
    7684:	4691      	mov	r9, r2
    7686:	44b9      	add	r9, r7
    7688:	44c8      	add	r8, r9
    768a:	44c4      	add	ip, r8
    768c:	4463      	add	r3, ip
    768e:	781b      	ldrb	r3, [r3, #0]
    7690:	2b00      	cmp	r3, #0
    7692:	d04a      	beq.n	772a <cal_write_report+0x122>
		//Possibly card not initialized
		configure_SD();
    7694:	4b65      	ldr	r3, [pc, #404]	; (782c <cal_write_report+0x224>)
    7696:	4798      	blx	r3
		diskio_status = disk_status(0);
    7698:	4b62      	ldr	r3, [pc, #392]	; (7824 <cal_write_report+0x21c>)
    769a:	2220      	movs	r2, #32
    769c:	2108      	movs	r1, #8
    769e:	468c      	mov	ip, r1
    76a0:	2108      	movs	r1, #8
    76a2:	4688      	mov	r8, r1
    76a4:	44b8      	add	r8, r7
    76a6:	44c4      	add	ip, r8
    76a8:	4462      	add	r2, ip
    76aa:	18d4      	adds	r4, r2, r3
    76ac:	2000      	movs	r0, #0
    76ae:	4b5e      	ldr	r3, [pc, #376]	; (7828 <cal_write_report+0x220>)
    76b0:	4798      	blx	r3
    76b2:	0003      	movs	r3, r0
    76b4:	7023      	strb	r3, [r4, #0]
		if(diskio_status){
    76b6:	4b5b      	ldr	r3, [pc, #364]	; (7824 <cal_write_report+0x21c>)
    76b8:	2220      	movs	r2, #32
    76ba:	4694      	mov	ip, r2
    76bc:	2208      	movs	r2, #8
    76be:	4690      	mov	r8, r2
    76c0:	2208      	movs	r2, #8
    76c2:	4691      	mov	r9, r2
    76c4:	44b9      	add	r9, r7
    76c6:	44c8      	add	r8, r9
    76c8:	44c4      	add	ip, r8
    76ca:	4463      	add	r3, ip
    76cc:	781b      	ldrb	r3, [r3, #0]
    76ce:	2b00      	cmp	r3, #0
    76d0:	d02b      	beq.n	772a <cal_write_report+0x122>
			fdebug1 = FR_NOT_READY;
    76d2:	4b57      	ldr	r3, [pc, #348]	; (7830 <cal_write_report+0x228>)
    76d4:	2220      	movs	r2, #32
    76d6:	4694      	mov	ip, r2
    76d8:	2208      	movs	r2, #8
    76da:	4690      	mov	r8, r2
    76dc:	2208      	movs	r2, #8
    76de:	4691      	mov	r9, r2
    76e0:	44b9      	add	r9, r7
    76e2:	44c8      	add	r8, r9
    76e4:	44c4      	add	ip, r8
    76e6:	4463      	add	r3, ip
    76e8:	2203      	movs	r2, #3
    76ea:	701a      	strb	r2, [r3, #0]
			SD_status = fdebug1;
    76ec:	4b51      	ldr	r3, [pc, #324]	; (7834 <cal_write_report+0x22c>)
    76ee:	4a50      	ldr	r2, [pc, #320]	; (7830 <cal_write_report+0x228>)
    76f0:	2120      	movs	r1, #32
    76f2:	468c      	mov	ip, r1
    76f4:	2108      	movs	r1, #8
    76f6:	4688      	mov	r8, r1
    76f8:	2108      	movs	r1, #8
    76fa:	4689      	mov	r9, r1
    76fc:	44b9      	add	r9, r7
    76fe:	44c8      	add	r8, r9
    7700:	44c4      	add	ip, r8
    7702:	4462      	add	r2, ip
    7704:	7812      	ldrb	r2, [r2, #0]
    7706:	701a      	strb	r2, [r3, #0]
			config_spi(LCD);
    7708:	2000      	movs	r0, #0
    770a:	4b42      	ldr	r3, [pc, #264]	; (7814 <cal_write_report+0x20c>)
    770c:	4798      	blx	r3
			return fdebug1;
    770e:	4b48      	ldr	r3, [pc, #288]	; (7830 <cal_write_report+0x228>)
    7710:	2220      	movs	r2, #32
    7712:	4694      	mov	ip, r2
    7714:	2208      	movs	r2, #8
    7716:	4690      	mov	r8, r2
    7718:	2208      	movs	r2, #8
    771a:	4691      	mov	r9, r2
    771c:	44b9      	add	r9, r7
    771e:	44c8      	add	r8, r9
    7720:	44c4      	add	ip, r8
    7722:	4463      	add	r3, ip
    7724:	781b      	ldrb	r3, [r3, #0]
    7726:	f001 fe06 	bl	9336 <cal_write_report+0x1d2e>
	
	}	
	
	
	
	sprintf(file_name, "20%02x%02x%02x_%02x%02x%02x_calibration_report.txt", current_time.year, current_time.month, current_time.date,
    772a:	4b43      	ldr	r3, [pc, #268]	; (7838 <cal_write_report+0x230>)
    772c:	799b      	ldrb	r3, [r3, #6]
    772e:	001e      	movs	r6, r3
    7730:	4b41      	ldr	r3, [pc, #260]	; (7838 <cal_write_report+0x230>)
    7732:	795b      	ldrb	r3, [r3, #5]
    7734:	62bb      	str	r3, [r7, #40]	; 0x28
    7736:	4b40      	ldr	r3, [pc, #256]	; (7838 <cal_write_report+0x230>)
    7738:	791b      	ldrb	r3, [r3, #4]
    773a:	001a      	movs	r2, r3
							current_time.hours, current_time.minutes, current_time.seconds);
    773c:	4b3e      	ldr	r3, [pc, #248]	; (7838 <cal_write_report+0x230>)
    773e:	789b      	ldrb	r3, [r3, #2]
	sprintf(file_name, "20%02x%02x%02x_%02x%02x%02x_calibration_report.txt", current_time.year, current_time.month, current_time.date,
    7740:	001c      	movs	r4, r3
							current_time.hours, current_time.minutes, current_time.seconds);
    7742:	4b3d      	ldr	r3, [pc, #244]	; (7838 <cal_write_report+0x230>)
    7744:	785b      	ldrb	r3, [r3, #1]
	sprintf(file_name, "20%02x%02x%02x_%02x%02x%02x_calibration_report.txt", current_time.year, current_time.month, current_time.date,
    7746:	001d      	movs	r5, r3
							current_time.hours, current_time.minutes, current_time.seconds);
    7748:	4b3b      	ldr	r3, [pc, #236]	; (7838 <cal_write_report+0x230>)
    774a:	781b      	ldrb	r3, [r3, #0]
	sprintf(file_name, "20%02x%02x%02x_%02x%02x%02x_calibration_report.txt", current_time.year, current_time.month, current_time.date,
    774c:	4698      	mov	r8, r3
    774e:	493b      	ldr	r1, [pc, #236]	; (783c <cal_write_report+0x234>)
    7750:	20b1      	movs	r0, #177	; 0xb1
    7752:	00c0      	lsls	r0, r0, #3
    7754:	2320      	movs	r3, #32
    7756:	469c      	mov	ip, r3
    7758:	2308      	movs	r3, #8
    775a:	4699      	mov	r9, r3
    775c:	2308      	movs	r3, #8
    775e:	469a      	mov	sl, r3
    7760:	44ba      	add	sl, r7
    7762:	44d1      	add	r9, sl
    7764:	44cc      	add	ip, r9
    7766:	4460      	add	r0, ip
    7768:	4643      	mov	r3, r8
    776a:	9303      	str	r3, [sp, #12]
    776c:	9502      	str	r5, [sp, #8]
    776e:	9401      	str	r4, [sp, #4]
    7770:	9200      	str	r2, [sp, #0]
    7772:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7774:	0032      	movs	r2, r6
    7776:	4c32      	ldr	r4, [pc, #200]	; (7840 <cal_write_report+0x238>)
    7778:	47a0      	blx	r4
	fdebug2 = f_open(&file_cal_report, file_name, FA_CREATE_NEW | FA_READ | FA_WRITE);						
    777a:	4b32      	ldr	r3, [pc, #200]	; (7844 <cal_write_report+0x23c>)
    777c:	2220      	movs	r2, #32
    777e:	2108      	movs	r1, #8
    7780:	468c      	mov	ip, r1
    7782:	2108      	movs	r1, #8
    7784:	4688      	mov	r8, r1
    7786:	44b8      	add	r8, r7
    7788:	44c4      	add	ip, r8
    778a:	4462      	add	r2, ip
    778c:	18d4      	adds	r4, r2, r3
    778e:	23b1      	movs	r3, #177	; 0xb1
    7790:	00db      	lsls	r3, r3, #3
    7792:	2220      	movs	r2, #32
    7794:	2108      	movs	r1, #8
    7796:	468c      	mov	ip, r1
    7798:	2108      	movs	r1, #8
    779a:	4688      	mov	r8, r1
    779c:	44b8      	add	r8, r7
    779e:	44c4      	add	ip, r8
    77a0:	4462      	add	r2, ip
    77a2:	18d1      	adds	r1, r2, r3
    77a4:	4b28      	ldr	r3, [pc, #160]	; (7848 <cal_write_report+0x240>)
    77a6:	2207      	movs	r2, #7
    77a8:	0018      	movs	r0, r3
    77aa:	4b28      	ldr	r3, [pc, #160]	; (784c <cal_write_report+0x244>)
    77ac:	4798      	blx	r3
    77ae:	0003      	movs	r3, r0
    77b0:	7023      	strb	r3, [r4, #0]
	if(fdebug2!=FR_OK){
    77b2:	4b24      	ldr	r3, [pc, #144]	; (7844 <cal_write_report+0x23c>)
    77b4:	2220      	movs	r2, #32
    77b6:	4694      	mov	ip, r2
    77b8:	2208      	movs	r2, #8
    77ba:	4690      	mov	r8, r2
    77bc:	2208      	movs	r2, #8
    77be:	4691      	mov	r9, r2
    77c0:	44b9      	add	r9, r7
    77c2:	44c8      	add	r8, r9
    77c4:	44c4      	add	ip, r8
    77c6:	4463      	add	r3, ip
    77c8:	781b      	ldrb	r3, [r3, #0]
    77ca:	2b00      	cmp	r3, #0
    77cc:	d040      	beq.n	7850 <cal_write_report+0x248>
		SD_status = fdebug2;
    77ce:	4b19      	ldr	r3, [pc, #100]	; (7834 <cal_write_report+0x22c>)
    77d0:	4a1c      	ldr	r2, [pc, #112]	; (7844 <cal_write_report+0x23c>)
    77d2:	2120      	movs	r1, #32
    77d4:	468c      	mov	ip, r1
    77d6:	2108      	movs	r1, #8
    77d8:	4688      	mov	r8, r1
    77da:	2108      	movs	r1, #8
    77dc:	4689      	mov	r9, r1
    77de:	44b9      	add	r9, r7
    77e0:	44c8      	add	r8, r9
    77e2:	44c4      	add	ip, r8
    77e4:	4462      	add	r2, ip
    77e6:	7812      	ldrb	r2, [r2, #0]
    77e8:	701a      	strb	r2, [r3, #0]
		config_spi(LCD);
    77ea:	2000      	movs	r0, #0
    77ec:	4b09      	ldr	r3, [pc, #36]	; (7814 <cal_write_report+0x20c>)
    77ee:	4798      	blx	r3
		return fdebug2;
    77f0:	4b14      	ldr	r3, [pc, #80]	; (7844 <cal_write_report+0x23c>)
    77f2:	2220      	movs	r2, #32
    77f4:	4694      	mov	ip, r2
    77f6:	2208      	movs	r2, #8
    77f8:	4690      	mov	r8, r2
    77fa:	2208      	movs	r2, #8
    77fc:	4691      	mov	r9, r2
    77fe:	44b9      	add	r9, r7
    7800:	44c8      	add	r8, r9
    7802:	44c4      	add	ip, r8
    7804:	4463      	add	r3, ip
    7806:	781b      	ldrb	r3, [r3, #0]
    7808:	f001 fd95 	bl	9336 <cal_write_report+0x1d2e>
    780c:	fffff8e0 	.word	0xfffff8e0
    7810:	00000684 	.word	0x00000684
    7814:	0000df9d 	.word	0x0000df9d
    7818:	20001088 	.word	0x20001088
    781c:	200010a4 	.word	0x200010a4
    7820:	000146b5 	.word	0x000146b5
    7824:	000006a7 	.word	0x000006a7
    7828:	0000ea91 	.word	0x0000ea91
    782c:	0001905d 	.word	0x0001905d
    7830:	000006a6 	.word	0x000006a6
    7834:	20003b79 	.word	0x20003b79
    7838:	2000103c 	.word	0x2000103c
    783c:	0002533c 	.word	0x0002533c
    7840:	000210bd 	.word	0x000210bd
    7844:	000006a5 	.word	0x000006a5
    7848:	200025d0 	.word	0x200025d0
    784c:	000111cd 	.word	0x000111cd
	}
	
	
	//  Write Header
	sprintf(write_str1,"Calibration Report\r\n\r\nDate and Time:\r\nYYYY.MM.DD@HH:mm:ss\r\n20%02x.%02x.%02x@%02x:%02x:%02x\r\n\r\n",
				cal_report_azm_inc.time_struct.year, cal_report_azm_inc.time_struct.month, cal_report_azm_inc.time_struct.date,
    7850:	4bfc      	ldr	r3, [pc, #1008]	; (7c44 <cal_write_report+0x63c>)
    7852:	2246      	movs	r2, #70	; 0x46
    7854:	5c9b      	ldrb	r3, [r3, r2]
	sprintf(write_str1,"Calibration Report\r\n\r\nDate and Time:\r\nYYYY.MM.DD@HH:mm:ss\r\n20%02x.%02x.%02x@%02x:%02x:%02x\r\n\r\n",
    7856:	62bb      	str	r3, [r7, #40]	; 0x28
				cal_report_azm_inc.time_struct.year, cal_report_azm_inc.time_struct.month, cal_report_azm_inc.time_struct.date,
    7858:	4bfa      	ldr	r3, [pc, #1000]	; (7c44 <cal_write_report+0x63c>)
    785a:	2245      	movs	r2, #69	; 0x45
    785c:	5c9b      	ldrb	r3, [r3, r2]
	sprintf(write_str1,"Calibration Report\r\n\r\nDate and Time:\r\nYYYY.MM.DD@HH:mm:ss\r\n20%02x.%02x.%02x@%02x:%02x:%02x\r\n\r\n",
    785e:	623b      	str	r3, [r7, #32]
				cal_report_azm_inc.time_struct.year, cal_report_azm_inc.time_struct.month, cal_report_azm_inc.time_struct.date,
    7860:	4bf8      	ldr	r3, [pc, #992]	; (7c44 <cal_write_report+0x63c>)
    7862:	2244      	movs	r2, #68	; 0x44
    7864:	5c9b      	ldrb	r3, [r3, r2]
	sprintf(write_str1,"Calibration Report\r\n\r\nDate and Time:\r\nYYYY.MM.DD@HH:mm:ss\r\n20%02x.%02x.%02x@%02x:%02x:%02x\r\n\r\n",
    7866:	001c      	movs	r4, r3
				cal_report_azm_inc.time_struct.hours, cal_report_azm_inc.time_struct.minutes, cal_report_azm_inc.time_struct.seconds);
    7868:	4bf6      	ldr	r3, [pc, #984]	; (7c44 <cal_write_report+0x63c>)
    786a:	2242      	movs	r2, #66	; 0x42
    786c:	5c9b      	ldrb	r3, [r3, r2]
	sprintf(write_str1,"Calibration Report\r\n\r\nDate and Time:\r\nYYYY.MM.DD@HH:mm:ss\r\n20%02x.%02x.%02x@%02x:%02x:%02x\r\n\r\n",
    786e:	001d      	movs	r5, r3
				cal_report_azm_inc.time_struct.hours, cal_report_azm_inc.time_struct.minutes, cal_report_azm_inc.time_struct.seconds);
    7870:	4bf4      	ldr	r3, [pc, #976]	; (7c44 <cal_write_report+0x63c>)
    7872:	2241      	movs	r2, #65	; 0x41
    7874:	5c9b      	ldrb	r3, [r3, r2]
	sprintf(write_str1,"Calibration Report\r\n\r\nDate and Time:\r\nYYYY.MM.DD@HH:mm:ss\r\n20%02x.%02x.%02x@%02x:%02x:%02x\r\n\r\n",
    7876:	001e      	movs	r6, r3
				cal_report_azm_inc.time_struct.hours, cal_report_azm_inc.time_struct.minutes, cal_report_azm_inc.time_struct.seconds);
    7878:	4bf2      	ldr	r3, [pc, #968]	; (7c44 <cal_write_report+0x63c>)
    787a:	2240      	movs	r2, #64	; 0x40
    787c:	5c9b      	ldrb	r3, [r3, r2]
	sprintf(write_str1,"Calibration Report\r\n\r\nDate and Time:\r\nYYYY.MM.DD@HH:mm:ss\r\n20%02x.%02x.%02x@%02x:%02x:%02x\r\n\r\n",
    787e:	49f2      	ldr	r1, [pc, #968]	; (7c48 <cal_write_report+0x640>)
    7880:	20cc      	movs	r0, #204	; 0xcc
    7882:	0080      	lsls	r0, r0, #2
    7884:	2220      	movs	r2, #32
    7886:	4694      	mov	ip, r2
    7888:	2208      	movs	r2, #8
    788a:	4690      	mov	r8, r2
    788c:	2208      	movs	r2, #8
    788e:	4691      	mov	r9, r2
    7890:	44b9      	add	r9, r7
    7892:	44c8      	add	r8, r9
    7894:	44c4      	add	ip, r8
    7896:	4460      	add	r0, ip
    7898:	9303      	str	r3, [sp, #12]
    789a:	9602      	str	r6, [sp, #8]
    789c:	9501      	str	r5, [sp, #4]
    789e:	9400      	str	r4, [sp, #0]
    78a0:	6a3b      	ldr	r3, [r7, #32]
    78a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    78a4:	4ce9      	ldr	r4, [pc, #932]	; (7c4c <cal_write_report+0x644>)
    78a6:	47a0      	blx	r4
	fdebug3 = f_write(&file_cal_report, write_str1, strlen(write_str1), pbw);
    78a8:	23cc      	movs	r3, #204	; 0xcc
    78aa:	009b      	lsls	r3, r3, #2
    78ac:	2220      	movs	r2, #32
    78ae:	4694      	mov	ip, r2
    78b0:	2208      	movs	r2, #8
    78b2:	4690      	mov	r8, r2
    78b4:	2208      	movs	r2, #8
    78b6:	4691      	mov	r9, r2
    78b8:	44b9      	add	r9, r7
    78ba:	44c8      	add	r8, r9
    78bc:	44c4      	add	ip, r8
    78be:	4463      	add	r3, ip
    78c0:	0018      	movs	r0, r3
    78c2:	4be3      	ldr	r3, [pc, #908]	; (7c50 <cal_write_report+0x648>)
    78c4:	4798      	blx	r3
    78c6:	0002      	movs	r2, r0
    78c8:	4be2      	ldr	r3, [pc, #904]	; (7c54 <cal_write_report+0x64c>)
    78ca:	2120      	movs	r1, #32
    78cc:	2008      	movs	r0, #8
    78ce:	4684      	mov	ip, r0
    78d0:	2008      	movs	r0, #8
    78d2:	4680      	mov	r8, r0
    78d4:	44b8      	add	r8, r7
    78d6:	44c4      	add	ip, r8
    78d8:	4461      	add	r1, ip
    78da:	18cc      	adds	r4, r1, r3
    78dc:	23d5      	movs	r3, #213	; 0xd5
    78de:	00db      	lsls	r3, r3, #3
    78e0:	2120      	movs	r1, #32
    78e2:	468c      	mov	ip, r1
    78e4:	2108      	movs	r1, #8
    78e6:	4688      	mov	r8, r1
    78e8:	2108      	movs	r1, #8
    78ea:	4689      	mov	r9, r1
    78ec:	44b9      	add	r9, r7
    78ee:	44c8      	add	r8, r9
    78f0:	44c4      	add	ip, r8
    78f2:	4463      	add	r3, ip
    78f4:	681b      	ldr	r3, [r3, #0]
    78f6:	21cc      	movs	r1, #204	; 0xcc
    78f8:	0089      	lsls	r1, r1, #2
    78fa:	2020      	movs	r0, #32
    78fc:	4684      	mov	ip, r0
    78fe:	2008      	movs	r0, #8
    7900:	4680      	mov	r8, r0
    7902:	2008      	movs	r0, #8
    7904:	4681      	mov	r9, r0
    7906:	44b9      	add	r9, r7
    7908:	44c8      	add	r8, r9
    790a:	44c4      	add	ip, r8
    790c:	4461      	add	r1, ip
    790e:	48d2      	ldr	r0, [pc, #840]	; (7c58 <cal_write_report+0x650>)
    7910:	4dd2      	ldr	r5, [pc, #840]	; (7c5c <cal_write_report+0x654>)
    7912:	47a8      	blx	r5
    7914:	0003      	movs	r3, r0
    7916:	7023      	strb	r3, [r4, #0]
	
	//  Write Version
	sprintf(write_str1,"Software Version: %1.1f\r\n\r\n", cal_report_azm_inc.software_version);
    7918:	4bca      	ldr	r3, [pc, #808]	; (7c44 <cal_write_report+0x63c>)
    791a:	681a      	ldr	r2, [r3, #0]
    791c:	4bd0      	ldr	r3, [pc, #832]	; (7c60 <cal_write_report+0x658>)
    791e:	1c10      	adds	r0, r2, #0
    7920:	4798      	blx	r3
    7922:	0003      	movs	r3, r0
    7924:	000c      	movs	r4, r1
    7926:	49cf      	ldr	r1, [pc, #828]	; (7c64 <cal_write_report+0x65c>)
    7928:	22cc      	movs	r2, #204	; 0xcc
    792a:	0092      	lsls	r2, r2, #2
    792c:	2020      	movs	r0, #32
    792e:	2508      	movs	r5, #8
    7930:	46ac      	mov	ip, r5
    7932:	2508      	movs	r5, #8
    7934:	46a8      	mov	r8, r5
    7936:	44b8      	add	r8, r7
    7938:	44c4      	add	ip, r8
    793a:	4460      	add	r0, ip
    793c:	1880      	adds	r0, r0, r2
    793e:	001a      	movs	r2, r3
    7940:	0023      	movs	r3, r4
    7942:	4cc2      	ldr	r4, [pc, #776]	; (7c4c <cal_write_report+0x644>)
    7944:	47a0      	blx	r4
	fdebug3 = f_write(&file_cal_report, write_str1, strlen(write_str1), pbw);
    7946:	23cc      	movs	r3, #204	; 0xcc
    7948:	009b      	lsls	r3, r3, #2
    794a:	2220      	movs	r2, #32
    794c:	4694      	mov	ip, r2
    794e:	2208      	movs	r2, #8
    7950:	4690      	mov	r8, r2
    7952:	2208      	movs	r2, #8
    7954:	4691      	mov	r9, r2
    7956:	44b9      	add	r9, r7
    7958:	44c8      	add	r8, r9
    795a:	44c4      	add	ip, r8
    795c:	4463      	add	r3, ip
    795e:	0018      	movs	r0, r3
    7960:	4bbb      	ldr	r3, [pc, #748]	; (7c50 <cal_write_report+0x648>)
    7962:	4798      	blx	r3
    7964:	0002      	movs	r2, r0
    7966:	4bbb      	ldr	r3, [pc, #748]	; (7c54 <cal_write_report+0x64c>)
    7968:	2120      	movs	r1, #32
    796a:	2008      	movs	r0, #8
    796c:	4684      	mov	ip, r0
    796e:	2008      	movs	r0, #8
    7970:	4680      	mov	r8, r0
    7972:	44b8      	add	r8, r7
    7974:	44c4      	add	ip, r8
    7976:	4461      	add	r1, ip
    7978:	18cc      	adds	r4, r1, r3
    797a:	23d5      	movs	r3, #213	; 0xd5
    797c:	00db      	lsls	r3, r3, #3
    797e:	2120      	movs	r1, #32
    7980:	468c      	mov	ip, r1
    7982:	2108      	movs	r1, #8
    7984:	4688      	mov	r8, r1
    7986:	2108      	movs	r1, #8
    7988:	4689      	mov	r9, r1
    798a:	44b9      	add	r9, r7
    798c:	44c8      	add	r8, r9
    798e:	44c4      	add	ip, r8
    7990:	4463      	add	r3, ip
    7992:	681b      	ldr	r3, [r3, #0]
    7994:	21cc      	movs	r1, #204	; 0xcc
    7996:	0089      	lsls	r1, r1, #2
    7998:	2020      	movs	r0, #32
    799a:	4684      	mov	ip, r0
    799c:	2008      	movs	r0, #8
    799e:	4680      	mov	r8, r0
    79a0:	2008      	movs	r0, #8
    79a2:	4681      	mov	r9, r0
    79a4:	44b9      	add	r9, r7
    79a6:	44c8      	add	r8, r9
    79a8:	44c4      	add	ip, r8
    79aa:	4461      	add	r1, ip
    79ac:	48aa      	ldr	r0, [pc, #680]	; (7c58 <cal_write_report+0x650>)
    79ae:	4dab      	ldr	r5, [pc, #684]	; (7c5c <cal_write_report+0x654>)
    79b0:	47a8      	blx	r5
    79b2:	0003      	movs	r3, r0
    79b4:	7023      	strb	r3, [r4, #0]
	
	//  Write Metrics
	// groups and points
	sprintf(write_str1,"Measurements: %d\r\n4-Point Groups: %d\r\n\r\n", 
    79b6:	4ba3      	ldr	r3, [pc, #652]	; (7c44 <cal_write_report+0x63c>)
    79b8:	689a      	ldr	r2, [r3, #8]
    79ba:	4ba2      	ldr	r3, [pc, #648]	; (7c44 <cal_write_report+0x63c>)
    79bc:	685b      	ldr	r3, [r3, #4]
    79be:	49aa      	ldr	r1, [pc, #680]	; (7c68 <cal_write_report+0x660>)
    79c0:	20cc      	movs	r0, #204	; 0xcc
    79c2:	0080      	lsls	r0, r0, #2
    79c4:	2420      	movs	r4, #32
    79c6:	46a4      	mov	ip, r4
    79c8:	2408      	movs	r4, #8
    79ca:	46a0      	mov	r8, r4
    79cc:	2408      	movs	r4, #8
    79ce:	46a1      	mov	r9, r4
    79d0:	44b9      	add	r9, r7
    79d2:	44c8      	add	r8, r9
    79d4:	44c4      	add	ip, r8
    79d6:	4460      	add	r0, ip
    79d8:	4c9c      	ldr	r4, [pc, #624]	; (7c4c <cal_write_report+0x644>)
    79da:	47a0      	blx	r4
				cal_report_azm_inc.points, cal_report_azm_inc.groups);
	fdebug3 = f_write(&file_cal_report, write_str1, strlen(write_str1), pbw);
    79dc:	23cc      	movs	r3, #204	; 0xcc
    79de:	009b      	lsls	r3, r3, #2
    79e0:	2220      	movs	r2, #32
    79e2:	4694      	mov	ip, r2
    79e4:	2208      	movs	r2, #8
    79e6:	4690      	mov	r8, r2
    79e8:	2208      	movs	r2, #8
    79ea:	4691      	mov	r9, r2
    79ec:	44b9      	add	r9, r7
    79ee:	44c8      	add	r8, r9
    79f0:	44c4      	add	ip, r8
    79f2:	4463      	add	r3, ip
    79f4:	0018      	movs	r0, r3
    79f6:	4b96      	ldr	r3, [pc, #600]	; (7c50 <cal_write_report+0x648>)
    79f8:	4798      	blx	r3
    79fa:	0002      	movs	r2, r0
    79fc:	4b95      	ldr	r3, [pc, #596]	; (7c54 <cal_write_report+0x64c>)
    79fe:	2120      	movs	r1, #32
    7a00:	2008      	movs	r0, #8
    7a02:	4684      	mov	ip, r0
    7a04:	2008      	movs	r0, #8
    7a06:	4680      	mov	r8, r0
    7a08:	44b8      	add	r8, r7
    7a0a:	44c4      	add	ip, r8
    7a0c:	4461      	add	r1, ip
    7a0e:	18cc      	adds	r4, r1, r3
    7a10:	23d5      	movs	r3, #213	; 0xd5
    7a12:	00db      	lsls	r3, r3, #3
    7a14:	2120      	movs	r1, #32
    7a16:	468c      	mov	ip, r1
    7a18:	2108      	movs	r1, #8
    7a1a:	4688      	mov	r8, r1
    7a1c:	2108      	movs	r1, #8
    7a1e:	4689      	mov	r9, r1
    7a20:	44b9      	add	r9, r7
    7a22:	44c8      	add	r8, r9
    7a24:	44c4      	add	ip, r8
    7a26:	4463      	add	r3, ip
    7a28:	681b      	ldr	r3, [r3, #0]
    7a2a:	21cc      	movs	r1, #204	; 0xcc
    7a2c:	0089      	lsls	r1, r1, #2
    7a2e:	2020      	movs	r0, #32
    7a30:	4684      	mov	ip, r0
    7a32:	2008      	movs	r0, #8
    7a34:	4680      	mov	r8, r0
    7a36:	2008      	movs	r0, #8
    7a38:	4681      	mov	r9, r0
    7a3a:	44b9      	add	r9, r7
    7a3c:	44c8      	add	r8, r9
    7a3e:	44c4      	add	ip, r8
    7a40:	4461      	add	r1, ip
    7a42:	4885      	ldr	r0, [pc, #532]	; (7c58 <cal_write_report+0x650>)
    7a44:	4d85      	ldr	r5, [pc, #532]	; (7c5c <cal_write_report+0x654>)
    7a46:	47a8      	blx	r5
    7a48:	0003      	movs	r3, r0
    7a4a:	7023      	strb	r3, [r4, #0]
	// angle error
	sprintf(write_str1,"Angle Error Standard Deviation:\r\n  Azimuth: %3.6f degrees\r\n  Inclination: %3.6f degrees\r\n",
				cal_report_azm_inc.azm_angle_err, cal_report_azm_inc.inc_angle_err);				
    7a4c:	4b7d      	ldr	r3, [pc, #500]	; (7c44 <cal_write_report+0x63c>)
    7a4e:	695a      	ldr	r2, [r3, #20]
	sprintf(write_str1,"Angle Error Standard Deviation:\r\n  Azimuth: %3.6f degrees\r\n  Inclination: %3.6f degrees\r\n",
    7a50:	4b83      	ldr	r3, [pc, #524]	; (7c60 <cal_write_report+0x658>)
    7a52:	1c10      	adds	r0, r2, #0
    7a54:	4798      	blx	r3
    7a56:	0005      	movs	r5, r0
    7a58:	000e      	movs	r6, r1
				cal_report_azm_inc.azm_angle_err, cal_report_azm_inc.inc_angle_err);				
    7a5a:	4b7a      	ldr	r3, [pc, #488]	; (7c44 <cal_write_report+0x63c>)
    7a5c:	691a      	ldr	r2, [r3, #16]
	sprintf(write_str1,"Angle Error Standard Deviation:\r\n  Azimuth: %3.6f degrees\r\n  Inclination: %3.6f degrees\r\n",
    7a5e:	4b80      	ldr	r3, [pc, #512]	; (7c60 <cal_write_report+0x658>)
    7a60:	1c10      	adds	r0, r2, #0
    7a62:	4798      	blx	r3
    7a64:	6038      	str	r0, [r7, #0]
    7a66:	6079      	str	r1, [r7, #4]
    7a68:	4980      	ldr	r1, [pc, #512]	; (7c6c <cal_write_report+0x664>)
    7a6a:	22cc      	movs	r2, #204	; 0xcc
    7a6c:	0092      	lsls	r2, r2, #2
    7a6e:	2020      	movs	r0, #32
    7a70:	2308      	movs	r3, #8
    7a72:	469c      	mov	ip, r3
    7a74:	2308      	movs	r3, #8
    7a76:	4698      	mov	r8, r3
    7a78:	44b8      	add	r8, r7
    7a7a:	44c4      	add	ip, r8
    7a7c:	4460      	add	r0, ip
    7a7e:	1880      	adds	r0, r0, r2
    7a80:	683b      	ldr	r3, [r7, #0]
    7a82:	687c      	ldr	r4, [r7, #4]
    7a84:	9300      	str	r3, [sp, #0]
    7a86:	9401      	str	r4, [sp, #4]
    7a88:	002a      	movs	r2, r5
    7a8a:	0033      	movs	r3, r6
    7a8c:	4c6f      	ldr	r4, [pc, #444]	; (7c4c <cal_write_report+0x644>)
    7a8e:	47a0      	blx	r4
	fdebug3 = f_write(&file_cal_report, write_str1, strlen(write_str1), pbw);
    7a90:	23cc      	movs	r3, #204	; 0xcc
    7a92:	009b      	lsls	r3, r3, #2
    7a94:	2220      	movs	r2, #32
    7a96:	4694      	mov	ip, r2
    7a98:	2208      	movs	r2, #8
    7a9a:	4690      	mov	r8, r2
    7a9c:	2208      	movs	r2, #8
    7a9e:	4691      	mov	r9, r2
    7aa0:	44b9      	add	r9, r7
    7aa2:	44c8      	add	r8, r9
    7aa4:	44c4      	add	ip, r8
    7aa6:	4463      	add	r3, ip
    7aa8:	0018      	movs	r0, r3
    7aaa:	4b69      	ldr	r3, [pc, #420]	; (7c50 <cal_write_report+0x648>)
    7aac:	4798      	blx	r3
    7aae:	0002      	movs	r2, r0
    7ab0:	4b68      	ldr	r3, [pc, #416]	; (7c54 <cal_write_report+0x64c>)
    7ab2:	2120      	movs	r1, #32
    7ab4:	2008      	movs	r0, #8
    7ab6:	4684      	mov	ip, r0
    7ab8:	2008      	movs	r0, #8
    7aba:	4680      	mov	r8, r0
    7abc:	44b8      	add	r8, r7
    7abe:	44c4      	add	ip, r8
    7ac0:	4461      	add	r1, ip
    7ac2:	18cc      	adds	r4, r1, r3
    7ac4:	23d5      	movs	r3, #213	; 0xd5
    7ac6:	00db      	lsls	r3, r3, #3
    7ac8:	2120      	movs	r1, #32
    7aca:	468c      	mov	ip, r1
    7acc:	2108      	movs	r1, #8
    7ace:	4688      	mov	r8, r1
    7ad0:	2108      	movs	r1, #8
    7ad2:	4689      	mov	r9, r1
    7ad4:	44b9      	add	r9, r7
    7ad6:	44c8      	add	r8, r9
    7ad8:	44c4      	add	ip, r8
    7ada:	4463      	add	r3, ip
    7adc:	681b      	ldr	r3, [r3, #0]
    7ade:	21cc      	movs	r1, #204	; 0xcc
    7ae0:	0089      	lsls	r1, r1, #2
    7ae2:	2020      	movs	r0, #32
    7ae4:	4684      	mov	ip, r0
    7ae6:	2008      	movs	r0, #8
    7ae8:	4680      	mov	r8, r0
    7aea:	2008      	movs	r0, #8
    7aec:	4681      	mov	r9, r0
    7aee:	44b9      	add	r9, r7
    7af0:	44c8      	add	r8, r9
    7af2:	44c4      	add	ip, r8
    7af4:	4461      	add	r1, ip
    7af6:	4858      	ldr	r0, [pc, #352]	; (7c58 <cal_write_report+0x650>)
    7af8:	4d58      	ldr	r5, [pc, #352]	; (7c5c <cal_write_report+0x654>)
    7afa:	47a8      	blx	r5
    7afc:	0003      	movs	r3, r0
    7afe:	7023      	strb	r3, [r4, #0]
	// Magnitude Error Standard Deviation
	sprintf(write_str1,"Magnitude Error Standard Deviation:\r\n  Accelerometer 1: %3.6f %%\r\n  Accelerometer 2: %3.6f %%\r\n  Compass 1: %3.6f %%\r\n  Compass 2: %3.6f %%\r\n",
				cal_report_azm_inc.mag_stdev_a1*100, cal_report_azm_inc.mag_stdev_a2*100,cal_report_azm_inc.mag_stdev_c1*100, cal_report_azm_inc.mag_stdev_c2*100);
    7b00:	4b50      	ldr	r3, [pc, #320]	; (7c44 <cal_write_report+0x63c>)
    7b02:	699a      	ldr	r2, [r3, #24]
    7b04:	4b5a      	ldr	r3, [pc, #360]	; (7c70 <cal_write_report+0x668>)
    7b06:	495b      	ldr	r1, [pc, #364]	; (7c74 <cal_write_report+0x66c>)
    7b08:	1c10      	adds	r0, r2, #0
    7b0a:	4798      	blx	r3
    7b0c:	1c03      	adds	r3, r0, #0
    7b0e:	1c1a      	adds	r2, r3, #0
	sprintf(write_str1,"Magnitude Error Standard Deviation:\r\n  Accelerometer 1: %3.6f %%\r\n  Accelerometer 2: %3.6f %%\r\n  Compass 1: %3.6f %%\r\n  Compass 2: %3.6f %%\r\n",
    7b10:	4b53      	ldr	r3, [pc, #332]	; (7c60 <cal_write_report+0x658>)
    7b12:	1c10      	adds	r0, r2, #0
    7b14:	4798      	blx	r3
    7b16:	62b8      	str	r0, [r7, #40]	; 0x28
    7b18:	62f9      	str	r1, [r7, #44]	; 0x2c
				cal_report_azm_inc.mag_stdev_a1*100, cal_report_azm_inc.mag_stdev_a2*100,cal_report_azm_inc.mag_stdev_c1*100, cal_report_azm_inc.mag_stdev_c2*100);
    7b1a:	4b4a      	ldr	r3, [pc, #296]	; (7c44 <cal_write_report+0x63c>)
    7b1c:	69da      	ldr	r2, [r3, #28]
    7b1e:	4b54      	ldr	r3, [pc, #336]	; (7c70 <cal_write_report+0x668>)
    7b20:	4954      	ldr	r1, [pc, #336]	; (7c74 <cal_write_report+0x66c>)
    7b22:	1c10      	adds	r0, r2, #0
    7b24:	4798      	blx	r3
    7b26:	1c03      	adds	r3, r0, #0
    7b28:	1c1a      	adds	r2, r3, #0
	sprintf(write_str1,"Magnitude Error Standard Deviation:\r\n  Accelerometer 1: %3.6f %%\r\n  Accelerometer 2: %3.6f %%\r\n  Compass 1: %3.6f %%\r\n  Compass 2: %3.6f %%\r\n",
    7b2a:	4b4d      	ldr	r3, [pc, #308]	; (7c60 <cal_write_report+0x658>)
    7b2c:	1c10      	adds	r0, r2, #0
    7b2e:	4798      	blx	r3
    7b30:	0004      	movs	r4, r0
    7b32:	000d      	movs	r5, r1
				cal_report_azm_inc.mag_stdev_a1*100, cal_report_azm_inc.mag_stdev_a2*100,cal_report_azm_inc.mag_stdev_c1*100, cal_report_azm_inc.mag_stdev_c2*100);
    7b34:	4b43      	ldr	r3, [pc, #268]	; (7c44 <cal_write_report+0x63c>)
    7b36:	6a1a      	ldr	r2, [r3, #32]
    7b38:	4b4d      	ldr	r3, [pc, #308]	; (7c70 <cal_write_report+0x668>)
    7b3a:	494e      	ldr	r1, [pc, #312]	; (7c74 <cal_write_report+0x66c>)
    7b3c:	1c10      	adds	r0, r2, #0
    7b3e:	4798      	blx	r3
    7b40:	1c03      	adds	r3, r0, #0
    7b42:	1c1a      	adds	r2, r3, #0
	sprintf(write_str1,"Magnitude Error Standard Deviation:\r\n  Accelerometer 1: %3.6f %%\r\n  Accelerometer 2: %3.6f %%\r\n  Compass 1: %3.6f %%\r\n  Compass 2: %3.6f %%\r\n",
    7b44:	4b46      	ldr	r3, [pc, #280]	; (7c60 <cal_write_report+0x658>)
    7b46:	1c10      	adds	r0, r2, #0
    7b48:	4798      	blx	r3
    7b4a:	6238      	str	r0, [r7, #32]
    7b4c:	6279      	str	r1, [r7, #36]	; 0x24
				cal_report_azm_inc.mag_stdev_a1*100, cal_report_azm_inc.mag_stdev_a2*100,cal_report_azm_inc.mag_stdev_c1*100, cal_report_azm_inc.mag_stdev_c2*100);
    7b4e:	4b3d      	ldr	r3, [pc, #244]	; (7c44 <cal_write_report+0x63c>)
    7b50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    7b52:	4b47      	ldr	r3, [pc, #284]	; (7c70 <cal_write_report+0x668>)
    7b54:	4947      	ldr	r1, [pc, #284]	; (7c74 <cal_write_report+0x66c>)
    7b56:	1c10      	adds	r0, r2, #0
    7b58:	4798      	blx	r3
    7b5a:	1c03      	adds	r3, r0, #0
    7b5c:	1c1a      	adds	r2, r3, #0
	sprintf(write_str1,"Magnitude Error Standard Deviation:\r\n  Accelerometer 1: %3.6f %%\r\n  Accelerometer 2: %3.6f %%\r\n  Compass 1: %3.6f %%\r\n  Compass 2: %3.6f %%\r\n",
    7b5e:	4b40      	ldr	r3, [pc, #256]	; (7c60 <cal_write_report+0x658>)
    7b60:	1c10      	adds	r0, r2, #0
    7b62:	4798      	blx	r3
    7b64:	6038      	str	r0, [r7, #0]
    7b66:	6079      	str	r1, [r7, #4]
    7b68:	4943      	ldr	r1, [pc, #268]	; (7c78 <cal_write_report+0x670>)
    7b6a:	26cc      	movs	r6, #204	; 0xcc
    7b6c:	00b6      	lsls	r6, r6, #2
    7b6e:	2020      	movs	r0, #32
    7b70:	2308      	movs	r3, #8
    7b72:	469c      	mov	ip, r3
    7b74:	2308      	movs	r3, #8
    7b76:	4698      	mov	r8, r3
    7b78:	44b8      	add	r8, r7
    7b7a:	44c4      	add	ip, r8
    7b7c:	4460      	add	r0, ip
    7b7e:	1980      	adds	r0, r0, r6
    7b80:	683a      	ldr	r2, [r7, #0]
    7b82:	687b      	ldr	r3, [r7, #4]
    7b84:	9204      	str	r2, [sp, #16]
    7b86:	9305      	str	r3, [sp, #20]
    7b88:	6a3a      	ldr	r2, [r7, #32]
    7b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7b8c:	9202      	str	r2, [sp, #8]
    7b8e:	9303      	str	r3, [sp, #12]
    7b90:	9400      	str	r4, [sp, #0]
    7b92:	9501      	str	r5, [sp, #4]
    7b94:	6aba      	ldr	r2, [r7, #40]	; 0x28
    7b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7b98:	4c2c      	ldr	r4, [pc, #176]	; (7c4c <cal_write_report+0x644>)
    7b9a:	47a0      	blx	r4
	// Axis Disparity
	fdebug3 = f_write(&file_cal_report, write_str1, strlen(write_str1), pbw);
    7b9c:	23cc      	movs	r3, #204	; 0xcc
    7b9e:	009b      	lsls	r3, r3, #2
    7ba0:	2220      	movs	r2, #32
    7ba2:	4694      	mov	ip, r2
    7ba4:	2208      	movs	r2, #8
    7ba6:	4690      	mov	r8, r2
    7ba8:	2208      	movs	r2, #8
    7baa:	4691      	mov	r9, r2
    7bac:	44b9      	add	r9, r7
    7bae:	44c8      	add	r8, r9
    7bb0:	44c4      	add	ip, r8
    7bb2:	4463      	add	r3, ip
    7bb4:	0018      	movs	r0, r3
    7bb6:	4b26      	ldr	r3, [pc, #152]	; (7c50 <cal_write_report+0x648>)
    7bb8:	4798      	blx	r3
    7bba:	0002      	movs	r2, r0
    7bbc:	4b25      	ldr	r3, [pc, #148]	; (7c54 <cal_write_report+0x64c>)
    7bbe:	2120      	movs	r1, #32
    7bc0:	2008      	movs	r0, #8
    7bc2:	4684      	mov	ip, r0
    7bc4:	2008      	movs	r0, #8
    7bc6:	4680      	mov	r8, r0
    7bc8:	44b8      	add	r8, r7
    7bca:	44c4      	add	ip, r8
    7bcc:	4461      	add	r1, ip
    7bce:	18cc      	adds	r4, r1, r3
    7bd0:	23d5      	movs	r3, #213	; 0xd5
    7bd2:	00db      	lsls	r3, r3, #3
    7bd4:	2120      	movs	r1, #32
    7bd6:	468c      	mov	ip, r1
    7bd8:	2108      	movs	r1, #8
    7bda:	4688      	mov	r8, r1
    7bdc:	2108      	movs	r1, #8
    7bde:	4689      	mov	r9, r1
    7be0:	44b9      	add	r9, r7
    7be2:	44c8      	add	r8, r9
    7be4:	44c4      	add	ip, r8
    7be6:	4463      	add	r3, ip
    7be8:	681b      	ldr	r3, [r3, #0]
    7bea:	21cc      	movs	r1, #204	; 0xcc
    7bec:	0089      	lsls	r1, r1, #2
    7bee:	2020      	movs	r0, #32
    7bf0:	4684      	mov	ip, r0
    7bf2:	2008      	movs	r0, #8
    7bf4:	4680      	mov	r8, r0
    7bf6:	2008      	movs	r0, #8
    7bf8:	4681      	mov	r9, r0
    7bfa:	44b9      	add	r9, r7
    7bfc:	44c8      	add	r8, r9
    7bfe:	44c4      	add	ip, r8
    7c00:	4461      	add	r1, ip
    7c02:	4815      	ldr	r0, [pc, #84]	; (7c58 <cal_write_report+0x650>)
    7c04:	4d15      	ldr	r5, [pc, #84]	; (7c5c <cal_write_report+0x654>)
    7c06:	47a8      	blx	r5
    7c08:	0003      	movs	r3, r0
    7c0a:	7023      	strb	r3, [r4, #0]
	sprintf(write_str1,"Axis Disparity:\r\n  Accelerometer: X-%3.6f%% Y-%3.6f%% Z-%3.6f%%\r\n",
		cal_report_azm_inc.disp_stdev_acc[0]*100, cal_report_azm_inc.disp_stdev_acc[1]*100,cal_report_azm_inc.disp_stdev_acc[2]*100);
    7c0c:	4b0d      	ldr	r3, [pc, #52]	; (7c44 <cal_write_report+0x63c>)
    7c0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    7c10:	4b17      	ldr	r3, [pc, #92]	; (7c70 <cal_write_report+0x668>)
    7c12:	4918      	ldr	r1, [pc, #96]	; (7c74 <cal_write_report+0x66c>)
    7c14:	1c10      	adds	r0, r2, #0
    7c16:	4798      	blx	r3
    7c18:	1c03      	adds	r3, r0, #0
    7c1a:	1c1a      	adds	r2, r3, #0
	sprintf(write_str1,"Axis Disparity:\r\n  Accelerometer: X-%3.6f%% Y-%3.6f%% Z-%3.6f%%\r\n",
    7c1c:	4b10      	ldr	r3, [pc, #64]	; (7c60 <cal_write_report+0x658>)
    7c1e:	1c10      	adds	r0, r2, #0
    7c20:	4798      	blx	r3
    7c22:	62b8      	str	r0, [r7, #40]	; 0x28
    7c24:	62f9      	str	r1, [r7, #44]	; 0x2c
		cal_report_azm_inc.disp_stdev_acc[0]*100, cal_report_azm_inc.disp_stdev_acc[1]*100,cal_report_azm_inc.disp_stdev_acc[2]*100);
    7c26:	4b07      	ldr	r3, [pc, #28]	; (7c44 <cal_write_report+0x63c>)
    7c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7c2a:	4b11      	ldr	r3, [pc, #68]	; (7c70 <cal_write_report+0x668>)
    7c2c:	4911      	ldr	r1, [pc, #68]	; (7c74 <cal_write_report+0x66c>)
    7c2e:	1c10      	adds	r0, r2, #0
    7c30:	4798      	blx	r3
    7c32:	1c03      	adds	r3, r0, #0
    7c34:	1c1a      	adds	r2, r3, #0
	sprintf(write_str1,"Axis Disparity:\r\n  Accelerometer: X-%3.6f%% Y-%3.6f%% Z-%3.6f%%\r\n",
    7c36:	4b0a      	ldr	r3, [pc, #40]	; (7c60 <cal_write_report+0x658>)
    7c38:	1c10      	adds	r0, r2, #0
    7c3a:	4798      	blx	r3
    7c3c:	0004      	movs	r4, r0
    7c3e:	000d      	movs	r5, r1
    7c40:	e01c      	b.n	7c7c <cal_write_report+0x674>
    7c42:	46c0      	nop			; (mov r8, r8)
    7c44:	2000188c 	.word	0x2000188c
    7c48:	00025370 	.word	0x00025370
    7c4c:	000210bd 	.word	0x000210bd
    7c50:	0002115d 	.word	0x0002115d
    7c54:	000006b3 	.word	0x000006b3
    7c58:	200025d0 	.word	0x200025d0
    7c5c:	00011769 	.word	0x00011769
    7c60:	00020d99 	.word	0x00020d99
    7c64:	000253d0 	.word	0x000253d0
    7c68:	000253ec 	.word	0x000253ec
    7c6c:	00025418 	.word	0x00025418
    7c70:	0001eb65 	.word	0x0001eb65
    7c74:	42c80000 	.word	0x42c80000
    7c78:	00025474 	.word	0x00025474
		cal_report_azm_inc.disp_stdev_acc[0]*100, cal_report_azm_inc.disp_stdev_acc[1]*100,cal_report_azm_inc.disp_stdev_acc[2]*100);
    7c7c:	4bac      	ldr	r3, [pc, #688]	; (7f30 <cal_write_report+0x928>)
    7c7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    7c80:	4bac      	ldr	r3, [pc, #688]	; (7f34 <cal_write_report+0x92c>)
    7c82:	49ad      	ldr	r1, [pc, #692]	; (7f38 <cal_write_report+0x930>)
    7c84:	1c10      	adds	r0, r2, #0
    7c86:	4798      	blx	r3
    7c88:	1c03      	adds	r3, r0, #0
    7c8a:	1c1a      	adds	r2, r3, #0
	sprintf(write_str1,"Axis Disparity:\r\n  Accelerometer: X-%3.6f%% Y-%3.6f%% Z-%3.6f%%\r\n",
    7c8c:	4bab      	ldr	r3, [pc, #684]	; (7f3c <cal_write_report+0x934>)
    7c8e:	1c10      	adds	r0, r2, #0
    7c90:	4798      	blx	r3
    7c92:	6038      	str	r0, [r7, #0]
    7c94:	6079      	str	r1, [r7, #4]
    7c96:	49aa      	ldr	r1, [pc, #680]	; (7f40 <cal_write_report+0x938>)
    7c98:	26cc      	movs	r6, #204	; 0xcc
    7c9a:	00b6      	lsls	r6, r6, #2
    7c9c:	2020      	movs	r0, #32
    7c9e:	2308      	movs	r3, #8
    7ca0:	469c      	mov	ip, r3
    7ca2:	2308      	movs	r3, #8
    7ca4:	4698      	mov	r8, r3
    7ca6:	44b8      	add	r8, r7
    7ca8:	44c4      	add	ip, r8
    7caa:	4460      	add	r0, ip
    7cac:	1980      	adds	r0, r0, r6
    7cae:	683a      	ldr	r2, [r7, #0]
    7cb0:	687b      	ldr	r3, [r7, #4]
    7cb2:	9202      	str	r2, [sp, #8]
    7cb4:	9303      	str	r3, [sp, #12]
    7cb6:	9400      	str	r4, [sp, #0]
    7cb8:	9501      	str	r5, [sp, #4]
    7cba:	6aba      	ldr	r2, [r7, #40]	; 0x28
    7cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7cbe:	4ca1      	ldr	r4, [pc, #644]	; (7f44 <cal_write_report+0x93c>)
    7cc0:	47a0      	blx	r4
	fdebug3 = f_write(&file_cal_report, write_str1, strlen(write_str1), pbw);	
    7cc2:	23cc      	movs	r3, #204	; 0xcc
    7cc4:	009b      	lsls	r3, r3, #2
    7cc6:	2220      	movs	r2, #32
    7cc8:	4694      	mov	ip, r2
    7cca:	2208      	movs	r2, #8
    7ccc:	4690      	mov	r8, r2
    7cce:	2208      	movs	r2, #8
    7cd0:	4691      	mov	r9, r2
    7cd2:	44b9      	add	r9, r7
    7cd4:	44c8      	add	r8, r9
    7cd6:	44c4      	add	ip, r8
    7cd8:	4463      	add	r3, ip
    7cda:	0018      	movs	r0, r3
    7cdc:	4b9a      	ldr	r3, [pc, #616]	; (7f48 <cal_write_report+0x940>)
    7cde:	4798      	blx	r3
    7ce0:	0002      	movs	r2, r0
    7ce2:	4b9a      	ldr	r3, [pc, #616]	; (7f4c <cal_write_report+0x944>)
    7ce4:	2120      	movs	r1, #32
    7ce6:	2008      	movs	r0, #8
    7ce8:	4684      	mov	ip, r0
    7cea:	2008      	movs	r0, #8
    7cec:	4680      	mov	r8, r0
    7cee:	44b8      	add	r8, r7
    7cf0:	44c4      	add	ip, r8
    7cf2:	4461      	add	r1, ip
    7cf4:	18cc      	adds	r4, r1, r3
    7cf6:	23d5      	movs	r3, #213	; 0xd5
    7cf8:	00db      	lsls	r3, r3, #3
    7cfa:	2120      	movs	r1, #32
    7cfc:	468c      	mov	ip, r1
    7cfe:	2108      	movs	r1, #8
    7d00:	4688      	mov	r8, r1
    7d02:	2108      	movs	r1, #8
    7d04:	4689      	mov	r9, r1
    7d06:	44b9      	add	r9, r7
    7d08:	44c8      	add	r8, r9
    7d0a:	44c4      	add	ip, r8
    7d0c:	4463      	add	r3, ip
    7d0e:	681b      	ldr	r3, [r3, #0]
    7d10:	21cc      	movs	r1, #204	; 0xcc
    7d12:	0089      	lsls	r1, r1, #2
    7d14:	2020      	movs	r0, #32
    7d16:	4684      	mov	ip, r0
    7d18:	2008      	movs	r0, #8
    7d1a:	4680      	mov	r8, r0
    7d1c:	2008      	movs	r0, #8
    7d1e:	4681      	mov	r9, r0
    7d20:	44b9      	add	r9, r7
    7d22:	44c8      	add	r8, r9
    7d24:	44c4      	add	ip, r8
    7d26:	4461      	add	r1, ip
    7d28:	4889      	ldr	r0, [pc, #548]	; (7f50 <cal_write_report+0x948>)
    7d2a:	4d8a      	ldr	r5, [pc, #552]	; (7f54 <cal_write_report+0x94c>)
    7d2c:	47a8      	blx	r5
    7d2e:	0003      	movs	r3, r0
    7d30:	7023      	strb	r3, [r4, #0]
	sprintf(write_str1,"  Compass: X-%3.6f%% Y-%3.6f%% Z-%3.6f%%\r\n\r\n\r\n",
		cal_report_azm_inc.disp_stdev_comp[0]*100, cal_report_azm_inc.disp_stdev_comp[1]*100,cal_report_azm_inc.disp_stdev_comp[2]*100);
    7d32:	4b7f      	ldr	r3, [pc, #508]	; (7f30 <cal_write_report+0x928>)
    7d34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    7d36:	4b7f      	ldr	r3, [pc, #508]	; (7f34 <cal_write_report+0x92c>)
    7d38:	497f      	ldr	r1, [pc, #508]	; (7f38 <cal_write_report+0x930>)
    7d3a:	1c10      	adds	r0, r2, #0
    7d3c:	4798      	blx	r3
    7d3e:	1c03      	adds	r3, r0, #0
    7d40:	1c1a      	adds	r2, r3, #0
	sprintf(write_str1,"  Compass: X-%3.6f%% Y-%3.6f%% Z-%3.6f%%\r\n\r\n\r\n",
    7d42:	4b7e      	ldr	r3, [pc, #504]	; (7f3c <cal_write_report+0x934>)
    7d44:	1c10      	adds	r0, r2, #0
    7d46:	4798      	blx	r3
    7d48:	62b8      	str	r0, [r7, #40]	; 0x28
    7d4a:	62f9      	str	r1, [r7, #44]	; 0x2c
		cal_report_azm_inc.disp_stdev_comp[0]*100, cal_report_azm_inc.disp_stdev_comp[1]*100,cal_report_azm_inc.disp_stdev_comp[2]*100);
    7d4c:	4b78      	ldr	r3, [pc, #480]	; (7f30 <cal_write_report+0x928>)
    7d4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    7d50:	4b78      	ldr	r3, [pc, #480]	; (7f34 <cal_write_report+0x92c>)
    7d52:	4979      	ldr	r1, [pc, #484]	; (7f38 <cal_write_report+0x930>)
    7d54:	1c10      	adds	r0, r2, #0
    7d56:	4798      	blx	r3
    7d58:	1c03      	adds	r3, r0, #0
    7d5a:	1c1a      	adds	r2, r3, #0
	sprintf(write_str1,"  Compass: X-%3.6f%% Y-%3.6f%% Z-%3.6f%%\r\n\r\n\r\n",
    7d5c:	4b77      	ldr	r3, [pc, #476]	; (7f3c <cal_write_report+0x934>)
    7d5e:	1c10      	adds	r0, r2, #0
    7d60:	4798      	blx	r3
    7d62:	0004      	movs	r4, r0
    7d64:	000d      	movs	r5, r1
		cal_report_azm_inc.disp_stdev_comp[0]*100, cal_report_azm_inc.disp_stdev_comp[1]*100,cal_report_azm_inc.disp_stdev_comp[2]*100);
    7d66:	4b72      	ldr	r3, [pc, #456]	; (7f30 <cal_write_report+0x928>)
    7d68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    7d6a:	4b72      	ldr	r3, [pc, #456]	; (7f34 <cal_write_report+0x92c>)
    7d6c:	4972      	ldr	r1, [pc, #456]	; (7f38 <cal_write_report+0x930>)
    7d6e:	1c10      	adds	r0, r2, #0
    7d70:	4798      	blx	r3
    7d72:	1c03      	adds	r3, r0, #0
    7d74:	1c1a      	adds	r2, r3, #0
	sprintf(write_str1,"  Compass: X-%3.6f%% Y-%3.6f%% Z-%3.6f%%\r\n\r\n\r\n",
    7d76:	4b71      	ldr	r3, [pc, #452]	; (7f3c <cal_write_report+0x934>)
    7d78:	1c10      	adds	r0, r2, #0
    7d7a:	4798      	blx	r3
    7d7c:	6038      	str	r0, [r7, #0]
    7d7e:	6079      	str	r1, [r7, #4]
    7d80:	4975      	ldr	r1, [pc, #468]	; (7f58 <cal_write_report+0x950>)
    7d82:	26cc      	movs	r6, #204	; 0xcc
    7d84:	00b6      	lsls	r6, r6, #2
    7d86:	2020      	movs	r0, #32
    7d88:	2308      	movs	r3, #8
    7d8a:	469c      	mov	ip, r3
    7d8c:	2308      	movs	r3, #8
    7d8e:	4698      	mov	r8, r3
    7d90:	44b8      	add	r8, r7
    7d92:	44c4      	add	ip, r8
    7d94:	4460      	add	r0, ip
    7d96:	1980      	adds	r0, r0, r6
    7d98:	683a      	ldr	r2, [r7, #0]
    7d9a:	687b      	ldr	r3, [r7, #4]
    7d9c:	9202      	str	r2, [sp, #8]
    7d9e:	9303      	str	r3, [sp, #12]
    7da0:	9400      	str	r4, [sp, #0]
    7da2:	9501      	str	r5, [sp, #4]
    7da4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    7da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7da8:	4c66      	ldr	r4, [pc, #408]	; (7f44 <cal_write_report+0x93c>)
    7daa:	47a0      	blx	r4
	fdebug3 = f_write(&file_cal_report, write_str1, strlen(write_str1), pbw);
    7dac:	23cc      	movs	r3, #204	; 0xcc
    7dae:	009b      	lsls	r3, r3, #2
    7db0:	2220      	movs	r2, #32
    7db2:	4694      	mov	ip, r2
    7db4:	2208      	movs	r2, #8
    7db6:	4690      	mov	r8, r2
    7db8:	2208      	movs	r2, #8
    7dba:	4691      	mov	r9, r2
    7dbc:	44b9      	add	r9, r7
    7dbe:	44c8      	add	r8, r9
    7dc0:	44c4      	add	ip, r8
    7dc2:	4463      	add	r3, ip
    7dc4:	0018      	movs	r0, r3
    7dc6:	4b60      	ldr	r3, [pc, #384]	; (7f48 <cal_write_report+0x940>)
    7dc8:	4798      	blx	r3
    7dca:	0002      	movs	r2, r0
    7dcc:	4b5f      	ldr	r3, [pc, #380]	; (7f4c <cal_write_report+0x944>)
    7dce:	2120      	movs	r1, #32
    7dd0:	2008      	movs	r0, #8
    7dd2:	4684      	mov	ip, r0
    7dd4:	2008      	movs	r0, #8
    7dd6:	4680      	mov	r8, r0
    7dd8:	44b8      	add	r8, r7
    7dda:	44c4      	add	ip, r8
    7ddc:	4461      	add	r1, ip
    7dde:	18cc      	adds	r4, r1, r3
    7de0:	23d5      	movs	r3, #213	; 0xd5
    7de2:	00db      	lsls	r3, r3, #3
    7de4:	2120      	movs	r1, #32
    7de6:	468c      	mov	ip, r1
    7de8:	2108      	movs	r1, #8
    7dea:	4688      	mov	r8, r1
    7dec:	2108      	movs	r1, #8
    7dee:	4689      	mov	r9, r1
    7df0:	44b9      	add	r9, r7
    7df2:	44c8      	add	r8, r9
    7df4:	44c4      	add	ip, r8
    7df6:	4463      	add	r3, ip
    7df8:	681b      	ldr	r3, [r3, #0]
    7dfa:	21cc      	movs	r1, #204	; 0xcc
    7dfc:	0089      	lsls	r1, r1, #2
    7dfe:	2020      	movs	r0, #32
    7e00:	4684      	mov	ip, r0
    7e02:	2008      	movs	r0, #8
    7e04:	4680      	mov	r8, r0
    7e06:	2008      	movs	r0, #8
    7e08:	4681      	mov	r9, r0
    7e0a:	44b9      	add	r9, r7
    7e0c:	44c8      	add	r8, r9
    7e0e:	44c4      	add	ip, r8
    7e10:	4461      	add	r1, ip
    7e12:	484f      	ldr	r0, [pc, #316]	; (7f50 <cal_write_report+0x948>)
    7e14:	4d4f      	ldr	r5, [pc, #316]	; (7f54 <cal_write_report+0x94c>)
    7e16:	47a8      	blx	r5
    7e18:	0003      	movs	r3, r0
    7e1a:	7023      	strb	r3, [r4, #0]

	
	//  Write Calibration Values
	for (i=0;i<4;i++){
    7e1c:	2300      	movs	r3, #0
    7e1e:	4a4f      	ldr	r2, [pc, #316]	; (7f5c <cal_write_report+0x954>)
    7e20:	2120      	movs	r1, #32
    7e22:	468c      	mov	ip, r1
    7e24:	2108      	movs	r1, #8
    7e26:	4688      	mov	r8, r1
    7e28:	2108      	movs	r1, #8
    7e2a:	4689      	mov	r9, r1
    7e2c:	44b9      	add	r9, r7
    7e2e:	44c8      	add	r8, r9
    7e30:	44c4      	add	ip, r8
    7e32:	4462      	add	r2, ip
    7e34:	6013      	str	r3, [r2, #0]
    7e36:	e2d9      	b.n	83ec <cal_write_report+0xde4>
		switch(i){
    7e38:	4b48      	ldr	r3, [pc, #288]	; (7f5c <cal_write_report+0x954>)
    7e3a:	2220      	movs	r2, #32
    7e3c:	4694      	mov	ip, r2
    7e3e:	2208      	movs	r2, #8
    7e40:	4690      	mov	r8, r2
    7e42:	2208      	movs	r2, #8
    7e44:	4691      	mov	r9, r2
    7e46:	44b9      	add	r9, r7
    7e48:	44c8      	add	r8, r9
    7e4a:	44c4      	add	ip, r8
    7e4c:	4463      	add	r3, ip
    7e4e:	681b      	ldr	r3, [r3, #0]
    7e50:	2b01      	cmp	r3, #1
    7e52:	d029      	beq.n	7ea8 <cal_write_report+0x8a0>
    7e54:	d305      	bcc.n	7e62 <cal_write_report+0x85a>
    7e56:	2b02      	cmp	r3, #2
    7e58:	d049      	beq.n	7eee <cal_write_report+0x8e6>
    7e5a:	2b03      	cmp	r3, #3
    7e5c:	d100      	bne.n	7e60 <cal_write_report+0x858>
    7e5e:	e08d      	b.n	7f7c <cal_write_report+0x974>
    7e60:	e0ad      	b.n	7fbe <cal_write_report+0x9b6>
			case 0:
				pcal_struct = &a1_calst;
    7e62:	4b3f      	ldr	r3, [pc, #252]	; (7f60 <cal_write_report+0x958>)
    7e64:	4a3f      	ldr	r2, [pc, #252]	; (7f64 <cal_write_report+0x95c>)
    7e66:	2120      	movs	r1, #32
    7e68:	468c      	mov	ip, r1
    7e6a:	2108      	movs	r1, #8
    7e6c:	4688      	mov	r8, r1
    7e6e:	2108      	movs	r1, #8
    7e70:	4689      	mov	r9, r1
    7e72:	44b9      	add	r9, r7
    7e74:	44c8      	add	r8, r9
    7e76:	44c4      	add	ip, r8
    7e78:	4462      	add	r2, ip
    7e7a:	6013      	str	r3, [r2, #0]
				sprintf(write_str1,"Inclinometer 1 Calibration:\r\n");
    7e7c:	23cc      	movs	r3, #204	; 0xcc
    7e7e:	009b      	lsls	r3, r3, #2
    7e80:	2220      	movs	r2, #32
    7e82:	4694      	mov	ip, r2
    7e84:	2208      	movs	r2, #8
    7e86:	4690      	mov	r8, r2
    7e88:	2208      	movs	r2, #8
    7e8a:	4691      	mov	r9, r2
    7e8c:	44b9      	add	r9, r7
    7e8e:	44c8      	add	r8, r9
    7e90:	44c4      	add	ip, r8
    7e92:	4463      	add	r3, ip
    7e94:	4a34      	ldr	r2, [pc, #208]	; (7f68 <cal_write_report+0x960>)
    7e96:	ca13      	ldmia	r2!, {r0, r1, r4}
    7e98:	c313      	stmia	r3!, {r0, r1, r4}
    7e9a:	ca13      	ldmia	r2!, {r0, r1, r4}
    7e9c:	c313      	stmia	r3!, {r0, r1, r4}
    7e9e:	6811      	ldr	r1, [r2, #0]
    7ea0:	6019      	str	r1, [r3, #0]
    7ea2:	8892      	ldrh	r2, [r2, #4]
    7ea4:	809a      	strh	r2, [r3, #4]
				break;
    7ea6:	e08a      	b.n	7fbe <cal_write_report+0x9b6>
			case 1:
				pcal_struct = &a2_calst;
    7ea8:	4b30      	ldr	r3, [pc, #192]	; (7f6c <cal_write_report+0x964>)
    7eaa:	4a2e      	ldr	r2, [pc, #184]	; (7f64 <cal_write_report+0x95c>)
    7eac:	2120      	movs	r1, #32
    7eae:	468c      	mov	ip, r1
    7eb0:	2108      	movs	r1, #8
    7eb2:	4688      	mov	r8, r1
    7eb4:	2108      	movs	r1, #8
    7eb6:	4689      	mov	r9, r1
    7eb8:	44b9      	add	r9, r7
    7eba:	44c8      	add	r8, r9
    7ebc:	44c4      	add	ip, r8
    7ebe:	4462      	add	r2, ip
    7ec0:	6013      	str	r3, [r2, #0]
				sprintf(write_str1,"Inclinometer 2 Calibration:\r\n");
    7ec2:	23cc      	movs	r3, #204	; 0xcc
    7ec4:	009b      	lsls	r3, r3, #2
    7ec6:	2220      	movs	r2, #32
    7ec8:	4694      	mov	ip, r2
    7eca:	2208      	movs	r2, #8
    7ecc:	4690      	mov	r8, r2
    7ece:	2208      	movs	r2, #8
    7ed0:	4691      	mov	r9, r2
    7ed2:	44b9      	add	r9, r7
    7ed4:	44c8      	add	r8, r9
    7ed6:	44c4      	add	ip, r8
    7ed8:	4463      	add	r3, ip
    7eda:	4a25      	ldr	r2, [pc, #148]	; (7f70 <cal_write_report+0x968>)
    7edc:	ca13      	ldmia	r2!, {r0, r1, r4}
    7ede:	c313      	stmia	r3!, {r0, r1, r4}
    7ee0:	ca13      	ldmia	r2!, {r0, r1, r4}
    7ee2:	c313      	stmia	r3!, {r0, r1, r4}
    7ee4:	6811      	ldr	r1, [r2, #0]
    7ee6:	6019      	str	r1, [r3, #0]
    7ee8:	8892      	ldrh	r2, [r2, #4]
    7eea:	809a      	strh	r2, [r3, #4]
				break;
    7eec:	e067      	b.n	7fbe <cal_write_report+0x9b6>
			case 2:
				pcal_struct = &c1_calst;
    7eee:	4b21      	ldr	r3, [pc, #132]	; (7f74 <cal_write_report+0x96c>)
    7ef0:	4a1c      	ldr	r2, [pc, #112]	; (7f64 <cal_write_report+0x95c>)
    7ef2:	2120      	movs	r1, #32
    7ef4:	468c      	mov	ip, r1
    7ef6:	2108      	movs	r1, #8
    7ef8:	4688      	mov	r8, r1
    7efa:	2108      	movs	r1, #8
    7efc:	4689      	mov	r9, r1
    7efe:	44b9      	add	r9, r7
    7f00:	44c8      	add	r8, r9
    7f02:	44c4      	add	ip, r8
    7f04:	4462      	add	r2, ip
    7f06:	6013      	str	r3, [r2, #0]
				sprintf(write_str1,"Compass 1 Calibration:\r\n");
    7f08:	23cc      	movs	r3, #204	; 0xcc
    7f0a:	009b      	lsls	r3, r3, #2
    7f0c:	2220      	movs	r2, #32
    7f0e:	4694      	mov	ip, r2
    7f10:	2208      	movs	r2, #8
    7f12:	4690      	mov	r8, r2
    7f14:	2208      	movs	r2, #8
    7f16:	4691      	mov	r9, r2
    7f18:	44b9      	add	r9, r7
    7f1a:	44c8      	add	r8, r9
    7f1c:	44c4      	add	ip, r8
    7f1e:	4463      	add	r3, ip
    7f20:	4a15      	ldr	r2, [pc, #84]	; (7f78 <cal_write_report+0x970>)
    7f22:	ca13      	ldmia	r2!, {r0, r1, r4}
    7f24:	c313      	stmia	r3!, {r0, r1, r4}
    7f26:	ca13      	ldmia	r2!, {r0, r1, r4}
    7f28:	c313      	stmia	r3!, {r0, r1, r4}
    7f2a:	7812      	ldrb	r2, [r2, #0]
    7f2c:	701a      	strb	r2, [r3, #0]
				break;
    7f2e:	e046      	b.n	7fbe <cal_write_report+0x9b6>
    7f30:	2000188c 	.word	0x2000188c
    7f34:	0001eb65 	.word	0x0001eb65
    7f38:	42c80000 	.word	0x42c80000
    7f3c:	00020d99 	.word	0x00020d99
    7f40:	00025504 	.word	0x00025504
    7f44:	000210bd 	.word	0x000210bd
    7f48:	0002115d 	.word	0x0002115d
    7f4c:	000006b3 	.word	0x000006b3
    7f50:	200025d0 	.word	0x200025d0
    7f54:	00011769 	.word	0x00011769
    7f58:	00025548 	.word	0x00025548
    7f5c:	000006bc 	.word	0x000006bc
    7f60:	2000497c 	.word	0x2000497c
    7f64:	000006ac 	.word	0x000006ac
    7f68:	00025578 	.word	0x00025578
    7f6c:	20004558 	.word	0x20004558
    7f70:	00025598 	.word	0x00025598
    7f74:	20002e78 	.word	0x20002e78
    7f78:	000255b8 	.word	0x000255b8
			case 3:
				pcal_struct = &c2_calst;
    7f7c:	4bf9      	ldr	r3, [pc, #996]	; (8364 <cal_write_report+0xd5c>)
    7f7e:	4afa      	ldr	r2, [pc, #1000]	; (8368 <cal_write_report+0xd60>)
    7f80:	2120      	movs	r1, #32
    7f82:	468c      	mov	ip, r1
    7f84:	2108      	movs	r1, #8
    7f86:	4688      	mov	r8, r1
    7f88:	2108      	movs	r1, #8
    7f8a:	4689      	mov	r9, r1
    7f8c:	44b9      	add	r9, r7
    7f8e:	44c8      	add	r8, r9
    7f90:	44c4      	add	ip, r8
    7f92:	4462      	add	r2, ip
    7f94:	6013      	str	r3, [r2, #0]
				sprintf(write_str1,"Compass 2 Calibration:\r\n");
    7f96:	23cc      	movs	r3, #204	; 0xcc
    7f98:	009b      	lsls	r3, r3, #2
    7f9a:	2220      	movs	r2, #32
    7f9c:	4694      	mov	ip, r2
    7f9e:	2208      	movs	r2, #8
    7fa0:	4690      	mov	r8, r2
    7fa2:	2208      	movs	r2, #8
    7fa4:	4691      	mov	r9, r2
    7fa6:	44b9      	add	r9, r7
    7fa8:	44c8      	add	r8, r9
    7faa:	44c4      	add	ip, r8
    7fac:	4463      	add	r3, ip
    7fae:	4aef      	ldr	r2, [pc, #956]	; (836c <cal_write_report+0xd64>)
    7fb0:	ca13      	ldmia	r2!, {r0, r1, r4}
    7fb2:	c313      	stmia	r3!, {r0, r1, r4}
    7fb4:	ca13      	ldmia	r2!, {r0, r1, r4}
    7fb6:	c313      	stmia	r3!, {r0, r1, r4}
    7fb8:	7812      	ldrb	r2, [r2, #0]
    7fba:	701a      	strb	r2, [r3, #0]
				break;
    7fbc:	46c0      	nop			; (mov r8, r8)
		}
		sprintf(write_str2,"  Gain X: %.6f\r\n  Gain Y: %.6f\r\n  GainZ: %.6f\r\n", pcal_struct->gain[0], pcal_struct->gain[1], pcal_struct->gain[2]);
    7fbe:	4bea      	ldr	r3, [pc, #936]	; (8368 <cal_write_report+0xd60>)
    7fc0:	2220      	movs	r2, #32
    7fc2:	4694      	mov	ip, r2
    7fc4:	2208      	movs	r2, #8
    7fc6:	4690      	mov	r8, r2
    7fc8:	2208      	movs	r2, #8
    7fca:	4691      	mov	r9, r2
    7fcc:	44b9      	add	r9, r7
    7fce:	44c8      	add	r8, r9
    7fd0:	44c4      	add	ip, r8
    7fd2:	4463      	add	r3, ip
    7fd4:	681b      	ldr	r3, [r3, #0]
    7fd6:	691a      	ldr	r2, [r3, #16]
    7fd8:	4be5      	ldr	r3, [pc, #916]	; (8370 <cal_write_report+0xd68>)
    7fda:	1c10      	adds	r0, r2, #0
    7fdc:	4798      	blx	r3
    7fde:	62b8      	str	r0, [r7, #40]	; 0x28
    7fe0:	62f9      	str	r1, [r7, #44]	; 0x2c
    7fe2:	4be1      	ldr	r3, [pc, #900]	; (8368 <cal_write_report+0xd60>)
    7fe4:	2220      	movs	r2, #32
    7fe6:	4694      	mov	ip, r2
    7fe8:	2208      	movs	r2, #8
    7fea:	4690      	mov	r8, r2
    7fec:	2208      	movs	r2, #8
    7fee:	4691      	mov	r9, r2
    7ff0:	44b9      	add	r9, r7
    7ff2:	44c8      	add	r8, r9
    7ff4:	44c4      	add	ip, r8
    7ff6:	4463      	add	r3, ip
    7ff8:	681b      	ldr	r3, [r3, #0]
    7ffa:	695a      	ldr	r2, [r3, #20]
    7ffc:	4bdc      	ldr	r3, [pc, #880]	; (8370 <cal_write_report+0xd68>)
    7ffe:	1c10      	adds	r0, r2, #0
    8000:	4798      	blx	r3
    8002:	0004      	movs	r4, r0
    8004:	000d      	movs	r5, r1
    8006:	4bd8      	ldr	r3, [pc, #864]	; (8368 <cal_write_report+0xd60>)
    8008:	2220      	movs	r2, #32
    800a:	4694      	mov	ip, r2
    800c:	2208      	movs	r2, #8
    800e:	4690      	mov	r8, r2
    8010:	2208      	movs	r2, #8
    8012:	4691      	mov	r9, r2
    8014:	44b9      	add	r9, r7
    8016:	44c8      	add	r8, r9
    8018:	44c4      	add	ip, r8
    801a:	4463      	add	r3, ip
    801c:	681b      	ldr	r3, [r3, #0]
    801e:	699a      	ldr	r2, [r3, #24]
    8020:	4bd3      	ldr	r3, [pc, #844]	; (8370 <cal_write_report+0xd68>)
    8022:	1c10      	adds	r0, r2, #0
    8024:	4798      	blx	r3
    8026:	6038      	str	r0, [r7, #0]
    8028:	6079      	str	r1, [r7, #4]
    802a:	49d2      	ldr	r1, [pc, #840]	; (8374 <cal_write_report+0xd6c>)
    802c:	26d8      	movs	r6, #216	; 0xd8
    802e:	2020      	movs	r0, #32
    8030:	2308      	movs	r3, #8
    8032:	469c      	mov	ip, r3
    8034:	2308      	movs	r3, #8
    8036:	4698      	mov	r8, r3
    8038:	44b8      	add	r8, r7
    803a:	44c4      	add	ip, r8
    803c:	4460      	add	r0, ip
    803e:	1980      	adds	r0, r0, r6
    8040:	683a      	ldr	r2, [r7, #0]
    8042:	687b      	ldr	r3, [r7, #4]
    8044:	9202      	str	r2, [sp, #8]
    8046:	9303      	str	r3, [sp, #12]
    8048:	9400      	str	r4, [sp, #0]
    804a:	9501      	str	r5, [sp, #4]
    804c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    804e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8050:	4cc9      	ldr	r4, [pc, #804]	; (8378 <cal_write_report+0xd70>)
    8052:	47a0      	blx	r4
		strcat(write_str1, write_str2);
    8054:	23d8      	movs	r3, #216	; 0xd8
    8056:	2220      	movs	r2, #32
    8058:	2108      	movs	r1, #8
    805a:	468c      	mov	ip, r1
    805c:	2108      	movs	r1, #8
    805e:	4688      	mov	r8, r1
    8060:	44b8      	add	r8, r7
    8062:	44c4      	add	ip, r8
    8064:	4462      	add	r2, ip
    8066:	18d2      	adds	r2, r2, r3
    8068:	23cc      	movs	r3, #204	; 0xcc
    806a:	009b      	lsls	r3, r3, #2
    806c:	2120      	movs	r1, #32
    806e:	468c      	mov	ip, r1
    8070:	2108      	movs	r1, #8
    8072:	4688      	mov	r8, r1
    8074:	2108      	movs	r1, #8
    8076:	4689      	mov	r9, r1
    8078:	44b9      	add	r9, r7
    807a:	44c8      	add	r8, r9
    807c:	44c4      	add	ip, r8
    807e:	4463      	add	r3, ip
    8080:	0011      	movs	r1, r2
    8082:	0018      	movs	r0, r3
    8084:	4bbd      	ldr	r3, [pc, #756]	; (837c <cal_write_report+0xd74>)
    8086:	4798      	blx	r3
		sprintf(write_str2,"  Offset X: %.6f\r\n  Offset Y: %.6f\r\n  Offset Z: %.6f\r\n", pcal_struct->offset[0], pcal_struct->offset[1], pcal_struct->offset[2]);
    8088:	4bb7      	ldr	r3, [pc, #732]	; (8368 <cal_write_report+0xd60>)
    808a:	2220      	movs	r2, #32
    808c:	4694      	mov	ip, r2
    808e:	2208      	movs	r2, #8
    8090:	4690      	mov	r8, r2
    8092:	2208      	movs	r2, #8
    8094:	4691      	mov	r9, r2
    8096:	44b9      	add	r9, r7
    8098:	44c8      	add	r8, r9
    809a:	44c4      	add	ip, r8
    809c:	4463      	add	r3, ip
    809e:	681b      	ldr	r3, [r3, #0]
    80a0:	685a      	ldr	r2, [r3, #4]
    80a2:	4bb3      	ldr	r3, [pc, #716]	; (8370 <cal_write_report+0xd68>)
    80a4:	1c10      	adds	r0, r2, #0
    80a6:	4798      	blx	r3
    80a8:	62b8      	str	r0, [r7, #40]	; 0x28
    80aa:	62f9      	str	r1, [r7, #44]	; 0x2c
    80ac:	4bae      	ldr	r3, [pc, #696]	; (8368 <cal_write_report+0xd60>)
    80ae:	2220      	movs	r2, #32
    80b0:	4694      	mov	ip, r2
    80b2:	2208      	movs	r2, #8
    80b4:	4690      	mov	r8, r2
    80b6:	2208      	movs	r2, #8
    80b8:	4691      	mov	r9, r2
    80ba:	44b9      	add	r9, r7
    80bc:	44c8      	add	r8, r9
    80be:	44c4      	add	ip, r8
    80c0:	4463      	add	r3, ip
    80c2:	681b      	ldr	r3, [r3, #0]
    80c4:	689a      	ldr	r2, [r3, #8]
    80c6:	4baa      	ldr	r3, [pc, #680]	; (8370 <cal_write_report+0xd68>)
    80c8:	1c10      	adds	r0, r2, #0
    80ca:	4798      	blx	r3
    80cc:	0004      	movs	r4, r0
    80ce:	000d      	movs	r5, r1
    80d0:	4ba5      	ldr	r3, [pc, #660]	; (8368 <cal_write_report+0xd60>)
    80d2:	2220      	movs	r2, #32
    80d4:	4694      	mov	ip, r2
    80d6:	2208      	movs	r2, #8
    80d8:	4690      	mov	r8, r2
    80da:	2208      	movs	r2, #8
    80dc:	4691      	mov	r9, r2
    80de:	44b9      	add	r9, r7
    80e0:	44c8      	add	r8, r9
    80e2:	44c4      	add	ip, r8
    80e4:	4463      	add	r3, ip
    80e6:	681b      	ldr	r3, [r3, #0]
    80e8:	68da      	ldr	r2, [r3, #12]
    80ea:	4ba1      	ldr	r3, [pc, #644]	; (8370 <cal_write_report+0xd68>)
    80ec:	1c10      	adds	r0, r2, #0
    80ee:	4798      	blx	r3
    80f0:	6038      	str	r0, [r7, #0]
    80f2:	6079      	str	r1, [r7, #4]
    80f4:	49a2      	ldr	r1, [pc, #648]	; (8380 <cal_write_report+0xd78>)
    80f6:	26d8      	movs	r6, #216	; 0xd8
    80f8:	2020      	movs	r0, #32
    80fa:	2308      	movs	r3, #8
    80fc:	469c      	mov	ip, r3
    80fe:	2308      	movs	r3, #8
    8100:	4698      	mov	r8, r3
    8102:	44b8      	add	r8, r7
    8104:	44c4      	add	ip, r8
    8106:	4460      	add	r0, ip
    8108:	1980      	adds	r0, r0, r6
    810a:	683a      	ldr	r2, [r7, #0]
    810c:	687b      	ldr	r3, [r7, #4]
    810e:	9202      	str	r2, [sp, #8]
    8110:	9303      	str	r3, [sp, #12]
    8112:	9400      	str	r4, [sp, #0]
    8114:	9501      	str	r5, [sp, #4]
    8116:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    811a:	4c97      	ldr	r4, [pc, #604]	; (8378 <cal_write_report+0xd70>)
    811c:	47a0      	blx	r4
		strcat(write_str1, write_str2);
    811e:	23d8      	movs	r3, #216	; 0xd8
    8120:	2220      	movs	r2, #32
    8122:	2108      	movs	r1, #8
    8124:	468c      	mov	ip, r1
    8126:	2108      	movs	r1, #8
    8128:	4688      	mov	r8, r1
    812a:	44b8      	add	r8, r7
    812c:	44c4      	add	ip, r8
    812e:	4462      	add	r2, ip
    8130:	18d2      	adds	r2, r2, r3
    8132:	23cc      	movs	r3, #204	; 0xcc
    8134:	009b      	lsls	r3, r3, #2
    8136:	2120      	movs	r1, #32
    8138:	468c      	mov	ip, r1
    813a:	2108      	movs	r1, #8
    813c:	4688      	mov	r8, r1
    813e:	2108      	movs	r1, #8
    8140:	4689      	mov	r9, r1
    8142:	44b9      	add	r9, r7
    8144:	44c8      	add	r8, r9
    8146:	44c4      	add	ip, r8
    8148:	4463      	add	r3, ip
    814a:	0011      	movs	r1, r2
    814c:	0018      	movs	r0, r3
    814e:	4b8b      	ldr	r3, [pc, #556]	; (837c <cal_write_report+0xd74>)
    8150:	4798      	blx	r3
		sprintf(write_str2,"  Axis Misalignment, Y-X: %.6f deg\r\n  Axis Misalignment, Z-X: %.6f deg\r\n  Axis Misalignment, Z-Y: %.6f deg\r\n", 
				rad2deg*pcal_struct->axmYX, rad2deg*pcal_struct->axmZX, rad2deg*pcal_struct->axmZY);
    8152:	4b85      	ldr	r3, [pc, #532]	; (8368 <cal_write_report+0xd60>)
    8154:	2220      	movs	r2, #32
    8156:	4694      	mov	ip, r2
    8158:	2208      	movs	r2, #8
    815a:	4690      	mov	r8, r2
    815c:	2208      	movs	r2, #8
    815e:	4691      	mov	r9, r2
    8160:	44b9      	add	r9, r7
    8162:	44c8      	add	r8, r9
    8164:	44c4      	add	ip, r8
    8166:	4463      	add	r3, ip
    8168:	681b      	ldr	r3, [r3, #0]
    816a:	69da      	ldr	r2, [r3, #28]
    816c:	4b85      	ldr	r3, [pc, #532]	; (8384 <cal_write_report+0xd7c>)
    816e:	6819      	ldr	r1, [r3, #0]
    8170:	4b85      	ldr	r3, [pc, #532]	; (8388 <cal_write_report+0xd80>)
    8172:	1c10      	adds	r0, r2, #0
    8174:	4798      	blx	r3
    8176:	1c03      	adds	r3, r0, #0
    8178:	1c1a      	adds	r2, r3, #0
		sprintf(write_str2,"  Axis Misalignment, Y-X: %.6f deg\r\n  Axis Misalignment, Z-X: %.6f deg\r\n  Axis Misalignment, Z-Y: %.6f deg\r\n", 
    817a:	4b7d      	ldr	r3, [pc, #500]	; (8370 <cal_write_report+0xd68>)
    817c:	1c10      	adds	r0, r2, #0
    817e:	4798      	blx	r3
    8180:	62b8      	str	r0, [r7, #40]	; 0x28
    8182:	62f9      	str	r1, [r7, #44]	; 0x2c
				rad2deg*pcal_struct->axmYX, rad2deg*pcal_struct->axmZX, rad2deg*pcal_struct->axmZY);
    8184:	4b78      	ldr	r3, [pc, #480]	; (8368 <cal_write_report+0xd60>)
    8186:	2220      	movs	r2, #32
    8188:	4694      	mov	ip, r2
    818a:	2208      	movs	r2, #8
    818c:	4690      	mov	r8, r2
    818e:	2208      	movs	r2, #8
    8190:	4691      	mov	r9, r2
    8192:	44b9      	add	r9, r7
    8194:	44c8      	add	r8, r9
    8196:	44c4      	add	ip, r8
    8198:	4463      	add	r3, ip
    819a:	681b      	ldr	r3, [r3, #0]
    819c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    819e:	4b79      	ldr	r3, [pc, #484]	; (8384 <cal_write_report+0xd7c>)
    81a0:	6819      	ldr	r1, [r3, #0]
    81a2:	4b79      	ldr	r3, [pc, #484]	; (8388 <cal_write_report+0xd80>)
    81a4:	1c10      	adds	r0, r2, #0
    81a6:	4798      	blx	r3
    81a8:	1c03      	adds	r3, r0, #0
    81aa:	1c1a      	adds	r2, r3, #0
		sprintf(write_str2,"  Axis Misalignment, Y-X: %.6f deg\r\n  Axis Misalignment, Z-X: %.6f deg\r\n  Axis Misalignment, Z-Y: %.6f deg\r\n", 
    81ac:	4b70      	ldr	r3, [pc, #448]	; (8370 <cal_write_report+0xd68>)
    81ae:	1c10      	adds	r0, r2, #0
    81b0:	4798      	blx	r3
    81b2:	0004      	movs	r4, r0
    81b4:	000d      	movs	r5, r1
				rad2deg*pcal_struct->axmYX, rad2deg*pcal_struct->axmZX, rad2deg*pcal_struct->axmZY);
    81b6:	4b6c      	ldr	r3, [pc, #432]	; (8368 <cal_write_report+0xd60>)
    81b8:	2220      	movs	r2, #32
    81ba:	4694      	mov	ip, r2
    81bc:	2208      	movs	r2, #8
    81be:	4690      	mov	r8, r2
    81c0:	2208      	movs	r2, #8
    81c2:	4691      	mov	r9, r2
    81c4:	44b9      	add	r9, r7
    81c6:	44c8      	add	r8, r9
    81c8:	44c4      	add	ip, r8
    81ca:	4463      	add	r3, ip
    81cc:	681b      	ldr	r3, [r3, #0]
    81ce:	6a1a      	ldr	r2, [r3, #32]
    81d0:	4b6c      	ldr	r3, [pc, #432]	; (8384 <cal_write_report+0xd7c>)
    81d2:	6819      	ldr	r1, [r3, #0]
    81d4:	4b6c      	ldr	r3, [pc, #432]	; (8388 <cal_write_report+0xd80>)
    81d6:	1c10      	adds	r0, r2, #0
    81d8:	4798      	blx	r3
    81da:	1c03      	adds	r3, r0, #0
    81dc:	1c1a      	adds	r2, r3, #0
		sprintf(write_str2,"  Axis Misalignment, Y-X: %.6f deg\r\n  Axis Misalignment, Z-X: %.6f deg\r\n  Axis Misalignment, Z-Y: %.6f deg\r\n", 
    81de:	4b64      	ldr	r3, [pc, #400]	; (8370 <cal_write_report+0xd68>)
    81e0:	1c10      	adds	r0, r2, #0
    81e2:	4798      	blx	r3
    81e4:	6038      	str	r0, [r7, #0]
    81e6:	6079      	str	r1, [r7, #4]
    81e8:	4968      	ldr	r1, [pc, #416]	; (838c <cal_write_report+0xd84>)
    81ea:	26d8      	movs	r6, #216	; 0xd8
    81ec:	2020      	movs	r0, #32
    81ee:	2308      	movs	r3, #8
    81f0:	469c      	mov	ip, r3
    81f2:	2308      	movs	r3, #8
    81f4:	4698      	mov	r8, r3
    81f6:	44b8      	add	r8, r7
    81f8:	44c4      	add	ip, r8
    81fa:	4460      	add	r0, ip
    81fc:	1980      	adds	r0, r0, r6
    81fe:	683a      	ldr	r2, [r7, #0]
    8200:	687b      	ldr	r3, [r7, #4]
    8202:	9202      	str	r2, [sp, #8]
    8204:	9303      	str	r3, [sp, #12]
    8206:	9400      	str	r4, [sp, #0]
    8208:	9501      	str	r5, [sp, #4]
    820a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    820c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    820e:	4c5a      	ldr	r4, [pc, #360]	; (8378 <cal_write_report+0xd70>)
    8210:	47a0      	blx	r4
		strcat(write_str1, write_str2);
    8212:	23d8      	movs	r3, #216	; 0xd8
    8214:	2220      	movs	r2, #32
    8216:	2108      	movs	r1, #8
    8218:	468c      	mov	ip, r1
    821a:	2108      	movs	r1, #8
    821c:	4688      	mov	r8, r1
    821e:	44b8      	add	r8, r7
    8220:	44c4      	add	ip, r8
    8222:	4462      	add	r2, ip
    8224:	18d2      	adds	r2, r2, r3
    8226:	23cc      	movs	r3, #204	; 0xcc
    8228:	009b      	lsls	r3, r3, #2
    822a:	2120      	movs	r1, #32
    822c:	468c      	mov	ip, r1
    822e:	2108      	movs	r1, #8
    8230:	4688      	mov	r8, r1
    8232:	2108      	movs	r1, #8
    8234:	4689      	mov	r9, r1
    8236:	44b9      	add	r9, r7
    8238:	44c8      	add	r8, r9
    823a:	44c4      	add	ip, r8
    823c:	4463      	add	r3, ip
    823e:	0011      	movs	r1, r2
    8240:	0018      	movs	r0, r3
    8242:	4b4e      	ldr	r3, [pc, #312]	; (837c <cal_write_report+0xd74>)
    8244:	4798      	blx	r3
		
		
		
		sprintf(write_str2,"  Package Misalignment About X: %.3f deg\r\n  Package Misalignment About Y: %.3f deg\r\n  Package Misalignment About Z: %.3f deg\r\n\r\n", 
			pcal_struct->thetaX, pcal_struct->thetaY, pcal_struct->thetaZ);
    8246:	4b48      	ldr	r3, [pc, #288]	; (8368 <cal_write_report+0xd60>)
    8248:	2220      	movs	r2, #32
    824a:	4694      	mov	ip, r2
    824c:	2208      	movs	r2, #8
    824e:	4690      	mov	r8, r2
    8250:	2208      	movs	r2, #8
    8252:	4691      	mov	r9, r2
    8254:	44b9      	add	r9, r7
    8256:	44c8      	add	r8, r9
    8258:	44c4      	add	ip, r8
    825a:	4463      	add	r3, ip
    825c:	681b      	ldr	r3, [r3, #0]
    825e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		sprintf(write_str2,"  Package Misalignment About X: %.3f deg\r\n  Package Misalignment About Y: %.3f deg\r\n  Package Misalignment About Z: %.3f deg\r\n\r\n", 
    8260:	4b43      	ldr	r3, [pc, #268]	; (8370 <cal_write_report+0xd68>)
    8262:	1c10      	adds	r0, r2, #0
    8264:	4798      	blx	r3
    8266:	62b8      	str	r0, [r7, #40]	; 0x28
    8268:	62f9      	str	r1, [r7, #44]	; 0x2c
			pcal_struct->thetaX, pcal_struct->thetaY, pcal_struct->thetaZ);
    826a:	4b3f      	ldr	r3, [pc, #252]	; (8368 <cal_write_report+0xd60>)
    826c:	2220      	movs	r2, #32
    826e:	4694      	mov	ip, r2
    8270:	2208      	movs	r2, #8
    8272:	4690      	mov	r8, r2
    8274:	2208      	movs	r2, #8
    8276:	4691      	mov	r9, r2
    8278:	44b9      	add	r9, r7
    827a:	44c8      	add	r8, r9
    827c:	44c4      	add	ip, r8
    827e:	4463      	add	r3, ip
    8280:	681b      	ldr	r3, [r3, #0]
    8282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		sprintf(write_str2,"  Package Misalignment About X: %.3f deg\r\n  Package Misalignment About Y: %.3f deg\r\n  Package Misalignment About Z: %.3f deg\r\n\r\n", 
    8284:	4b3a      	ldr	r3, [pc, #232]	; (8370 <cal_write_report+0xd68>)
    8286:	1c10      	adds	r0, r2, #0
    8288:	4798      	blx	r3
    828a:	0004      	movs	r4, r0
    828c:	000d      	movs	r5, r1
			pcal_struct->thetaX, pcal_struct->thetaY, pcal_struct->thetaZ);
    828e:	4b36      	ldr	r3, [pc, #216]	; (8368 <cal_write_report+0xd60>)
    8290:	2220      	movs	r2, #32
    8292:	4694      	mov	ip, r2
    8294:	2208      	movs	r2, #8
    8296:	4690      	mov	r8, r2
    8298:	2208      	movs	r2, #8
    829a:	4691      	mov	r9, r2
    829c:	44b9      	add	r9, r7
    829e:	44c8      	add	r8, r9
    82a0:	44c4      	add	ip, r8
    82a2:	4463      	add	r3, ip
    82a4:	681b      	ldr	r3, [r3, #0]
    82a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		sprintf(write_str2,"  Package Misalignment About X: %.3f deg\r\n  Package Misalignment About Y: %.3f deg\r\n  Package Misalignment About Z: %.3f deg\r\n\r\n", 
    82a8:	4b31      	ldr	r3, [pc, #196]	; (8370 <cal_write_report+0xd68>)
    82aa:	1c10      	adds	r0, r2, #0
    82ac:	4798      	blx	r3
    82ae:	6038      	str	r0, [r7, #0]
    82b0:	6079      	str	r1, [r7, #4]
    82b2:	4937      	ldr	r1, [pc, #220]	; (8390 <cal_write_report+0xd88>)
    82b4:	26d8      	movs	r6, #216	; 0xd8
    82b6:	2020      	movs	r0, #32
    82b8:	2308      	movs	r3, #8
    82ba:	469c      	mov	ip, r3
    82bc:	2308      	movs	r3, #8
    82be:	4698      	mov	r8, r3
    82c0:	44b8      	add	r8, r7
    82c2:	44c4      	add	ip, r8
    82c4:	4460      	add	r0, ip
    82c6:	1980      	adds	r0, r0, r6
    82c8:	683a      	ldr	r2, [r7, #0]
    82ca:	687b      	ldr	r3, [r7, #4]
    82cc:	9202      	str	r2, [sp, #8]
    82ce:	9303      	str	r3, [sp, #12]
    82d0:	9400      	str	r4, [sp, #0]
    82d2:	9501      	str	r5, [sp, #4]
    82d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    82d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    82d8:	4c27      	ldr	r4, [pc, #156]	; (8378 <cal_write_report+0xd70>)
    82da:	47a0      	blx	r4
		strcat(write_str1, write_str2);
    82dc:	23d8      	movs	r3, #216	; 0xd8
    82de:	2220      	movs	r2, #32
    82e0:	2108      	movs	r1, #8
    82e2:	468c      	mov	ip, r1
    82e4:	2108      	movs	r1, #8
    82e6:	4688      	mov	r8, r1
    82e8:	44b8      	add	r8, r7
    82ea:	44c4      	add	ip, r8
    82ec:	4462      	add	r2, ip
    82ee:	18d2      	adds	r2, r2, r3
    82f0:	23cc      	movs	r3, #204	; 0xcc
    82f2:	009b      	lsls	r3, r3, #2
    82f4:	2120      	movs	r1, #32
    82f6:	468c      	mov	ip, r1
    82f8:	2108      	movs	r1, #8
    82fa:	4688      	mov	r8, r1
    82fc:	2108      	movs	r1, #8
    82fe:	4689      	mov	r9, r1
    8300:	44b9      	add	r9, r7
    8302:	44c8      	add	r8, r9
    8304:	44c4      	add	ip, r8
    8306:	4463      	add	r3, ip
    8308:	0011      	movs	r1, r2
    830a:	0018      	movs	r0, r3
    830c:	4b1b      	ldr	r3, [pc, #108]	; (837c <cal_write_report+0xd74>)
    830e:	4798      	blx	r3
		//fdebug2 = f_lseek(&file_cal, f_size(&file_cal));
		fdebug3 = f_write(&file_cal_report, write_str1, strlen(write_str1), pbw);
    8310:	23cc      	movs	r3, #204	; 0xcc
    8312:	009b      	lsls	r3, r3, #2
    8314:	2220      	movs	r2, #32
    8316:	4694      	mov	ip, r2
    8318:	2208      	movs	r2, #8
    831a:	4690      	mov	r8, r2
    831c:	2208      	movs	r2, #8
    831e:	4691      	mov	r9, r2
    8320:	44b9      	add	r9, r7
    8322:	44c8      	add	r8, r9
    8324:	44c4      	add	ip, r8
    8326:	4463      	add	r3, ip
    8328:	0018      	movs	r0, r3
    832a:	4b1a      	ldr	r3, [pc, #104]	; (8394 <cal_write_report+0xd8c>)
    832c:	4798      	blx	r3
    832e:	0002      	movs	r2, r0
    8330:	4b19      	ldr	r3, [pc, #100]	; (8398 <cal_write_report+0xd90>)
    8332:	2120      	movs	r1, #32
    8334:	2008      	movs	r0, #8
    8336:	4684      	mov	ip, r0
    8338:	2008      	movs	r0, #8
    833a:	4680      	mov	r8, r0
    833c:	44b8      	add	r8, r7
    833e:	44c4      	add	ip, r8
    8340:	4461      	add	r1, ip
    8342:	18cc      	adds	r4, r1, r3
    8344:	23d5      	movs	r3, #213	; 0xd5
    8346:	00db      	lsls	r3, r3, #3
    8348:	2120      	movs	r1, #32
    834a:	468c      	mov	ip, r1
    834c:	2108      	movs	r1, #8
    834e:	4688      	mov	r8, r1
    8350:	2108      	movs	r1, #8
    8352:	4689      	mov	r9, r1
    8354:	44b9      	add	r9, r7
    8356:	44c8      	add	r8, r9
    8358:	44c4      	add	ip, r8
    835a:	4463      	add	r3, ip
    835c:	681b      	ldr	r3, [r3, #0]
    835e:	21cc      	movs	r1, #204	; 0xcc
    8360:	0089      	lsls	r1, r1, #2
    8362:	e01b      	b.n	839c <cal_write_report+0xd94>
    8364:	20001df0 	.word	0x20001df0
    8368:	000006ac 	.word	0x000006ac
    836c:	000255d4 	.word	0x000255d4
    8370:	00020d99 	.word	0x00020d99
    8374:	000255f0 	.word	0x000255f0
    8378:	000210bd 	.word	0x000210bd
    837c:	00021101 	.word	0x00021101
    8380:	00025620 	.word	0x00025620
    8384:	00025fb4 	.word	0x00025fb4
    8388:	0001eb65 	.word	0x0001eb65
    838c:	00025658 	.word	0x00025658
    8390:	000256c8 	.word	0x000256c8
    8394:	0002115d 	.word	0x0002115d
    8398:	000006b3 	.word	0x000006b3
    839c:	2020      	movs	r0, #32
    839e:	4684      	mov	ip, r0
    83a0:	2008      	movs	r0, #8
    83a2:	4680      	mov	r8, r0
    83a4:	2008      	movs	r0, #8
    83a6:	4681      	mov	r9, r0
    83a8:	44b9      	add	r9, r7
    83aa:	44c8      	add	r8, r9
    83ac:	44c4      	add	ip, r8
    83ae:	4461      	add	r1, ip
    83b0:	4876      	ldr	r0, [pc, #472]	; (858c <cal_write_report+0xf84>)
    83b2:	4d77      	ldr	r5, [pc, #476]	; (8590 <cal_write_report+0xf88>)
    83b4:	47a8      	blx	r5
    83b6:	0003      	movs	r3, r0
    83b8:	7023      	strb	r3, [r4, #0]
	for (i=0;i<4;i++){
    83ba:	4b76      	ldr	r3, [pc, #472]	; (8594 <cal_write_report+0xf8c>)
    83bc:	2220      	movs	r2, #32
    83be:	4694      	mov	ip, r2
    83c0:	2208      	movs	r2, #8
    83c2:	4690      	mov	r8, r2
    83c4:	2208      	movs	r2, #8
    83c6:	4691      	mov	r9, r2
    83c8:	44b9      	add	r9, r7
    83ca:	44c8      	add	r8, r9
    83cc:	44c4      	add	ip, r8
    83ce:	4463      	add	r3, ip
    83d0:	681b      	ldr	r3, [r3, #0]
    83d2:	3301      	adds	r3, #1
    83d4:	4a6f      	ldr	r2, [pc, #444]	; (8594 <cal_write_report+0xf8c>)
    83d6:	2120      	movs	r1, #32
    83d8:	468c      	mov	ip, r1
    83da:	2108      	movs	r1, #8
    83dc:	4688      	mov	r8, r1
    83de:	2108      	movs	r1, #8
    83e0:	4689      	mov	r9, r1
    83e2:	44b9      	add	r9, r7
    83e4:	44c8      	add	r8, r9
    83e6:	44c4      	add	ip, r8
    83e8:	4462      	add	r2, ip
    83ea:	6013      	str	r3, [r2, #0]
    83ec:	4b69      	ldr	r3, [pc, #420]	; (8594 <cal_write_report+0xf8c>)
    83ee:	2220      	movs	r2, #32
    83f0:	4694      	mov	ip, r2
    83f2:	2208      	movs	r2, #8
    83f4:	4690      	mov	r8, r2
    83f6:	2208      	movs	r2, #8
    83f8:	4691      	mov	r9, r2
    83fa:	44b9      	add	r9, r7
    83fc:	44c8      	add	r8, r9
    83fe:	44c4      	add	ip, r8
    8400:	4463      	add	r3, ip
    8402:	681b      	ldr	r3, [r3, #0]
    8404:	2b03      	cmp	r3, #3
    8406:	d800      	bhi.n	840a <cal_write_report+0xe02>
    8408:	e516      	b.n	7e38 <cal_write_report+0x830>
	}
	
	
	// Write Compass/Incl/Roll Data
	sprintf(write_str1,"\r\nCalibration Measurements:\r\n");
    840a:	23cc      	movs	r3, #204	; 0xcc
    840c:	009b      	lsls	r3, r3, #2
    840e:	2220      	movs	r2, #32
    8410:	4694      	mov	ip, r2
    8412:	2208      	movs	r2, #8
    8414:	4690      	mov	r8, r2
    8416:	2208      	movs	r2, #8
    8418:	4691      	mov	r9, r2
    841a:	44b9      	add	r9, r7
    841c:	44c8      	add	r8, r9
    841e:	44c4      	add	ip, r8
    8420:	4463      	add	r3, ip
    8422:	4a5d      	ldr	r2, [pc, #372]	; (8598 <cal_write_report+0xf90>)
    8424:	ca13      	ldmia	r2!, {r0, r1, r4}
    8426:	c313      	stmia	r3!, {r0, r1, r4}
    8428:	ca13      	ldmia	r2!, {r0, r1, r4}
    842a:	c313      	stmia	r3!, {r0, r1, r4}
    842c:	6811      	ldr	r1, [r2, #0]
    842e:	6019      	str	r1, [r3, #0]
    8430:	8892      	ldrh	r2, [r2, #4]
    8432:	809a      	strh	r2, [r3, #4]
	sprintf(write_str2,"                Uncalibrated                     Calibrated\r\n");
    8434:	23d8      	movs	r3, #216	; 0xd8
    8436:	2220      	movs	r2, #32
    8438:	2108      	movs	r1, #8
    843a:	468c      	mov	ip, r1
    843c:	2108      	movs	r1, #8
    843e:	4688      	mov	r8, r1
    8440:	44b8      	add	r8, r7
    8442:	44c4      	add	ip, r8
    8444:	4462      	add	r2, ip
    8446:	18d2      	adds	r2, r2, r3
    8448:	4b54      	ldr	r3, [pc, #336]	; (859c <cal_write_report+0xf94>)
    844a:	0010      	movs	r0, r2
    844c:	0019      	movs	r1, r3
    844e:	233e      	movs	r3, #62	; 0x3e
    8450:	001a      	movs	r2, r3
    8452:	4b53      	ldr	r3, [pc, #332]	; (85a0 <cal_write_report+0xf98>)
    8454:	4798      	blx	r3
	strcat(write_str1, write_str2);
    8456:	23d8      	movs	r3, #216	; 0xd8
    8458:	2220      	movs	r2, #32
    845a:	2108      	movs	r1, #8
    845c:	468c      	mov	ip, r1
    845e:	2108      	movs	r1, #8
    8460:	4688      	mov	r8, r1
    8462:	44b8      	add	r8, r7
    8464:	44c4      	add	ip, r8
    8466:	4462      	add	r2, ip
    8468:	18d2      	adds	r2, r2, r3
    846a:	23cc      	movs	r3, #204	; 0xcc
    846c:	009b      	lsls	r3, r3, #2
    846e:	2120      	movs	r1, #32
    8470:	468c      	mov	ip, r1
    8472:	2108      	movs	r1, #8
    8474:	4688      	mov	r8, r1
    8476:	2108      	movs	r1, #8
    8478:	4689      	mov	r9, r1
    847a:	44b9      	add	r9, r7
    847c:	44c8      	add	r8, r9
    847e:	44c4      	add	ip, r8
    8480:	4463      	add	r3, ip
    8482:	0011      	movs	r1, r2
    8484:	0018      	movs	r0, r3
    8486:	4b47      	ldr	r3, [pc, #284]	; (85a4 <cal_write_report+0xf9c>)
    8488:	4798      	blx	r3
	sprintf(write_str2,"Group, Point,   Azimuth,  Inclination, Roll,     Azimuth,  Inclination, Roll\r\n");
    848a:	23d8      	movs	r3, #216	; 0xd8
    848c:	2220      	movs	r2, #32
    848e:	2108      	movs	r1, #8
    8490:	468c      	mov	ip, r1
    8492:	2108      	movs	r1, #8
    8494:	4688      	mov	r8, r1
    8496:	44b8      	add	r8, r7
    8498:	44c4      	add	ip, r8
    849a:	4462      	add	r2, ip
    849c:	18d2      	adds	r2, r2, r3
    849e:	4b42      	ldr	r3, [pc, #264]	; (85a8 <cal_write_report+0xfa0>)
    84a0:	0010      	movs	r0, r2
    84a2:	0019      	movs	r1, r3
    84a4:	234f      	movs	r3, #79	; 0x4f
    84a6:	001a      	movs	r2, r3
    84a8:	4b3d      	ldr	r3, [pc, #244]	; (85a0 <cal_write_report+0xf98>)
    84aa:	4798      	blx	r3
	strcat(write_str1, write_str2);
    84ac:	23d8      	movs	r3, #216	; 0xd8
    84ae:	2220      	movs	r2, #32
    84b0:	2108      	movs	r1, #8
    84b2:	468c      	mov	ip, r1
    84b4:	2108      	movs	r1, #8
    84b6:	4688      	mov	r8, r1
    84b8:	44b8      	add	r8, r7
    84ba:	44c4      	add	ip, r8
    84bc:	4462      	add	r2, ip
    84be:	18d2      	adds	r2, r2, r3
    84c0:	23cc      	movs	r3, #204	; 0xcc
    84c2:	009b      	lsls	r3, r3, #2
    84c4:	2120      	movs	r1, #32
    84c6:	468c      	mov	ip, r1
    84c8:	2108      	movs	r1, #8
    84ca:	4688      	mov	r8, r1
    84cc:	2108      	movs	r1, #8
    84ce:	4689      	mov	r9, r1
    84d0:	44b9      	add	r9, r7
    84d2:	44c8      	add	r8, r9
    84d4:	44c4      	add	ip, r8
    84d6:	4463      	add	r3, ip
    84d8:	0011      	movs	r1, r2
    84da:	0018      	movs	r0, r3
    84dc:	4b31      	ldr	r3, [pc, #196]	; (85a4 <cal_write_report+0xf9c>)
    84de:	4798      	blx	r3
	fdebug3 = f_write(&file_cal_report, write_str1, strlen(write_str1), pbw);
    84e0:	23cc      	movs	r3, #204	; 0xcc
    84e2:	009b      	lsls	r3, r3, #2
    84e4:	2220      	movs	r2, #32
    84e6:	4694      	mov	ip, r2
    84e8:	2208      	movs	r2, #8
    84ea:	4690      	mov	r8, r2
    84ec:	2208      	movs	r2, #8
    84ee:	4691      	mov	r9, r2
    84f0:	44b9      	add	r9, r7
    84f2:	44c8      	add	r8, r9
    84f4:	44c4      	add	ip, r8
    84f6:	4463      	add	r3, ip
    84f8:	0018      	movs	r0, r3
    84fa:	4b2c      	ldr	r3, [pc, #176]	; (85ac <cal_write_report+0xfa4>)
    84fc:	4798      	blx	r3
    84fe:	0002      	movs	r2, r0
    8500:	4b2b      	ldr	r3, [pc, #172]	; (85b0 <cal_write_report+0xfa8>)
    8502:	2120      	movs	r1, #32
    8504:	2008      	movs	r0, #8
    8506:	4684      	mov	ip, r0
    8508:	2008      	movs	r0, #8
    850a:	4680      	mov	r8, r0
    850c:	44b8      	add	r8, r7
    850e:	44c4      	add	ip, r8
    8510:	4461      	add	r1, ip
    8512:	18cc      	adds	r4, r1, r3
    8514:	23d5      	movs	r3, #213	; 0xd5
    8516:	00db      	lsls	r3, r3, #3
    8518:	2120      	movs	r1, #32
    851a:	468c      	mov	ip, r1
    851c:	2108      	movs	r1, #8
    851e:	4688      	mov	r8, r1
    8520:	2108      	movs	r1, #8
    8522:	4689      	mov	r9, r1
    8524:	44b9      	add	r9, r7
    8526:	44c8      	add	r8, r9
    8528:	44c4      	add	ip, r8
    852a:	4463      	add	r3, ip
    852c:	681b      	ldr	r3, [r3, #0]
    852e:	21cc      	movs	r1, #204	; 0xcc
    8530:	0089      	lsls	r1, r1, #2
    8532:	2020      	movs	r0, #32
    8534:	4684      	mov	ip, r0
    8536:	2008      	movs	r0, #8
    8538:	4680      	mov	r8, r0
    853a:	2008      	movs	r0, #8
    853c:	4681      	mov	r9, r0
    853e:	44b9      	add	r9, r7
    8540:	44c8      	add	r8, r9
    8542:	44c4      	add	ip, r8
    8544:	4461      	add	r1, ip
    8546:	4811      	ldr	r0, [pc, #68]	; (858c <cal_write_report+0xf84>)
    8548:	4d11      	ldr	r5, [pc, #68]	; (8590 <cal_write_report+0xf88>)
    854a:	47a8      	blx	r5
    854c:	0003      	movs	r3, r0
    854e:	7023      	strb	r3, [r4, #0]
	for (i=0;i<n_points;i++){
    8550:	2300      	movs	r3, #0
    8552:	4a10      	ldr	r2, [pc, #64]	; (8594 <cal_write_report+0xf8c>)
    8554:	2120      	movs	r1, #32
    8556:	468c      	mov	ip, r1
    8558:	2108      	movs	r1, #8
    855a:	4688      	mov	r8, r1
    855c:	2108      	movs	r1, #8
    855e:	4689      	mov	r9, r1
    8560:	44b9      	add	r9, r7
    8562:	44c8      	add	r8, r9
    8564:	44c4      	add	ip, r8
    8566:	4462      	add	r2, ip
    8568:	6013      	str	r3, [r2, #0]
    856a:	f000 fc9c 	bl	8ea6 <cal_write_report+0x189e>
		//  Fist Measure uncalibrated raw data
		for (j=0;j<3;j++){
    856e:	2300      	movs	r3, #0
    8570:	22d7      	movs	r2, #215	; 0xd7
    8572:	00d2      	lsls	r2, r2, #3
    8574:	2120      	movs	r1, #32
    8576:	468c      	mov	ip, r1
    8578:	2108      	movs	r1, #8
    857a:	4688      	mov	r8, r1
    857c:	2108      	movs	r1, #8
    857e:	4689      	mov	r9, r1
    8580:	44b9      	add	r9, r7
    8582:	44c8      	add	r8, r9
    8584:	44c4      	add	ip, r8
    8586:	4462      	add	r2, ip
    8588:	6013      	str	r3, [r2, #0]
    858a:	e12c      	b.n	87e6 <cal_write_report+0x11de>
    858c:	200025d0 	.word	0x200025d0
    8590:	00011769 	.word	0x00011769
    8594:	000006bc 	.word	0x000006bc
    8598:	0002574c 	.word	0x0002574c
    859c:	0002576c 	.word	0x0002576c
    85a0:	00020fa5 	.word	0x00020fa5
    85a4:	00021101 	.word	0x00021101
    85a8:	000257ac 	.word	0x000257ac
    85ac:	0002115d 	.word	0x0002115d
    85b0:	000006b3 	.word	0x000006b3
			temp_meas.a1xyz[j] = a1raw[i][j];
    85b4:	49cc      	ldr	r1, [pc, #816]	; (88e8 <cal_write_report+0x12e0>)
    85b6:	4bcd      	ldr	r3, [pc, #820]	; (88ec <cal_write_report+0x12e4>)
    85b8:	2220      	movs	r2, #32
    85ba:	4694      	mov	ip, r2
    85bc:	2208      	movs	r2, #8
    85be:	4690      	mov	r8, r2
    85c0:	2208      	movs	r2, #8
    85c2:	4691      	mov	r9, r2
    85c4:	44b9      	add	r9, r7
    85c6:	44c8      	add	r8, r9
    85c8:	44c4      	add	ip, r8
    85ca:	4463      	add	r3, ip
    85cc:	681a      	ldr	r2, [r3, #0]
    85ce:	0013      	movs	r3, r2
    85d0:	005b      	lsls	r3, r3, #1
    85d2:	189b      	adds	r3, r3, r2
    85d4:	22d7      	movs	r2, #215	; 0xd7
    85d6:	00d2      	lsls	r2, r2, #3
    85d8:	2020      	movs	r0, #32
    85da:	4684      	mov	ip, r0
    85dc:	2008      	movs	r0, #8
    85de:	4680      	mov	r8, r0
    85e0:	2008      	movs	r0, #8
    85e2:	4681      	mov	r9, r0
    85e4:	44b9      	add	r9, r7
    85e6:	44c8      	add	r8, r9
    85e8:	44c4      	add	ip, r8
    85ea:	4462      	add	r2, ip
    85ec:	6812      	ldr	r2, [r2, #0]
    85ee:	189b      	adds	r3, r3, r2
    85f0:	009b      	lsls	r3, r3, #2
    85f2:	5859      	ldr	r1, [r3, r1]
    85f4:	4bbe      	ldr	r3, [pc, #760]	; (88f0 <cal_write_report+0x12e8>)
    85f6:	22d8      	movs	r2, #216	; 0xd8
    85f8:	00d2      	lsls	r2, r2, #3
    85fa:	4694      	mov	ip, r2
    85fc:	2220      	movs	r2, #32
    85fe:	4690      	mov	r8, r2
    8600:	2208      	movs	r2, #8
    8602:	4691      	mov	r9, r2
    8604:	2208      	movs	r2, #8
    8606:	4692      	mov	sl, r2
    8608:	44ba      	add	sl, r7
    860a:	44d1      	add	r9, sl
    860c:	44c8      	add	r8, r9
    860e:	44c4      	add	ip, r8
    8610:	4463      	add	r3, ip
    8612:	22d7      	movs	r2, #215	; 0xd7
    8614:	00d2      	lsls	r2, r2, #3
    8616:	2020      	movs	r0, #32
    8618:	4684      	mov	ip, r0
    861a:	2008      	movs	r0, #8
    861c:	4680      	mov	r8, r0
    861e:	2008      	movs	r0, #8
    8620:	4681      	mov	r9, r0
    8622:	44b9      	add	r9, r7
    8624:	44c8      	add	r8, r9
    8626:	44c4      	add	ip, r8
    8628:	4462      	add	r2, ip
    862a:	6812      	ldr	r2, [r2, #0]
    862c:	3208      	adds	r2, #8
    862e:	0092      	lsls	r2, r2, #2
    8630:	50d1      	str	r1, [r2, r3]
			temp_meas.a2xyz[j] = a2raw[i][j];
    8632:	49b0      	ldr	r1, [pc, #704]	; (88f4 <cal_write_report+0x12ec>)
    8634:	4bad      	ldr	r3, [pc, #692]	; (88ec <cal_write_report+0x12e4>)
    8636:	2220      	movs	r2, #32
    8638:	4694      	mov	ip, r2
    863a:	2208      	movs	r2, #8
    863c:	4690      	mov	r8, r2
    863e:	2208      	movs	r2, #8
    8640:	4691      	mov	r9, r2
    8642:	44b9      	add	r9, r7
    8644:	44c8      	add	r8, r9
    8646:	44c4      	add	ip, r8
    8648:	4463      	add	r3, ip
    864a:	681a      	ldr	r2, [r3, #0]
    864c:	0013      	movs	r3, r2
    864e:	005b      	lsls	r3, r3, #1
    8650:	189b      	adds	r3, r3, r2
    8652:	22d7      	movs	r2, #215	; 0xd7
    8654:	00d2      	lsls	r2, r2, #3
    8656:	2020      	movs	r0, #32
    8658:	4684      	mov	ip, r0
    865a:	2008      	movs	r0, #8
    865c:	4680      	mov	r8, r0
    865e:	2008      	movs	r0, #8
    8660:	4681      	mov	r9, r0
    8662:	44b9      	add	r9, r7
    8664:	44c8      	add	r8, r9
    8666:	44c4      	add	ip, r8
    8668:	4462      	add	r2, ip
    866a:	6812      	ldr	r2, [r2, #0]
    866c:	189b      	adds	r3, r3, r2
    866e:	009b      	lsls	r3, r3, #2
    8670:	585a      	ldr	r2, [r3, r1]
    8672:	4b9f      	ldr	r3, [pc, #636]	; (88f0 <cal_write_report+0x12e8>)
    8674:	21d8      	movs	r1, #216	; 0xd8
    8676:	00c9      	lsls	r1, r1, #3
    8678:	2020      	movs	r0, #32
    867a:	4684      	mov	ip, r0
    867c:	2008      	movs	r0, #8
    867e:	4680      	mov	r8, r0
    8680:	2008      	movs	r0, #8
    8682:	4681      	mov	r9, r0
    8684:	44b9      	add	r9, r7
    8686:	44c8      	add	r8, r9
    8688:	44c4      	add	ip, r8
    868a:	4461      	add	r1, ip
    868c:	18c9      	adds	r1, r1, r3
    868e:	23d7      	movs	r3, #215	; 0xd7
    8690:	00db      	lsls	r3, r3, #3
    8692:	2020      	movs	r0, #32
    8694:	4684      	mov	ip, r0
    8696:	2008      	movs	r0, #8
    8698:	4680      	mov	r8, r0
    869a:	2008      	movs	r0, #8
    869c:	4681      	mov	r9, r0
    869e:	44b9      	add	r9, r7
    86a0:	44c8      	add	r8, r9
    86a2:	44c4      	add	ip, r8
    86a4:	4463      	add	r3, ip
    86a6:	681b      	ldr	r3, [r3, #0]
    86a8:	330a      	adds	r3, #10
    86aa:	009b      	lsls	r3, r3, #2
    86ac:	18cb      	adds	r3, r1, r3
    86ae:	3304      	adds	r3, #4
    86b0:	601a      	str	r2, [r3, #0]
			temp_meas.c1xyz[j] = c1raw[i][j];
    86b2:	4991      	ldr	r1, [pc, #580]	; (88f8 <cal_write_report+0x12f0>)
    86b4:	4b8d      	ldr	r3, [pc, #564]	; (88ec <cal_write_report+0x12e4>)
    86b6:	2220      	movs	r2, #32
    86b8:	4694      	mov	ip, r2
    86ba:	2208      	movs	r2, #8
    86bc:	4690      	mov	r8, r2
    86be:	2208      	movs	r2, #8
    86c0:	4691      	mov	r9, r2
    86c2:	44b9      	add	r9, r7
    86c4:	44c8      	add	r8, r9
    86c6:	44c4      	add	ip, r8
    86c8:	4463      	add	r3, ip
    86ca:	681a      	ldr	r2, [r3, #0]
    86cc:	0013      	movs	r3, r2
    86ce:	005b      	lsls	r3, r3, #1
    86d0:	189b      	adds	r3, r3, r2
    86d2:	22d7      	movs	r2, #215	; 0xd7
    86d4:	00d2      	lsls	r2, r2, #3
    86d6:	2020      	movs	r0, #32
    86d8:	4684      	mov	ip, r0
    86da:	2008      	movs	r0, #8
    86dc:	4680      	mov	r8, r0
    86de:	2008      	movs	r0, #8
    86e0:	4681      	mov	r9, r0
    86e2:	44b9      	add	r9, r7
    86e4:	44c8      	add	r8, r9
    86e6:	44c4      	add	ip, r8
    86e8:	4462      	add	r2, ip
    86ea:	6812      	ldr	r2, [r2, #0]
    86ec:	189b      	adds	r3, r3, r2
    86ee:	009b      	lsls	r3, r3, #2
    86f0:	5859      	ldr	r1, [r3, r1]
    86f2:	4b7f      	ldr	r3, [pc, #508]	; (88f0 <cal_write_report+0x12e8>)
    86f4:	22d8      	movs	r2, #216	; 0xd8
    86f6:	00d2      	lsls	r2, r2, #3
    86f8:	4694      	mov	ip, r2
    86fa:	2220      	movs	r2, #32
    86fc:	4690      	mov	r8, r2
    86fe:	2208      	movs	r2, #8
    8700:	4691      	mov	r9, r2
    8702:	2208      	movs	r2, #8
    8704:	4692      	mov	sl, r2
    8706:	44ba      	add	sl, r7
    8708:	44d1      	add	r9, sl
    870a:	44c8      	add	r8, r9
    870c:	44c4      	add	ip, r8
    870e:	4463      	add	r3, ip
    8710:	22d7      	movs	r2, #215	; 0xd7
    8712:	00d2      	lsls	r2, r2, #3
    8714:	2020      	movs	r0, #32
    8716:	4684      	mov	ip, r0
    8718:	2008      	movs	r0, #8
    871a:	4680      	mov	r8, r0
    871c:	2008      	movs	r0, #8
    871e:	4681      	mov	r9, r0
    8720:	44b9      	add	r9, r7
    8722:	44c8      	add	r8, r9
    8724:	44c4      	add	ip, r8
    8726:	4462      	add	r2, ip
    8728:	6812      	ldr	r2, [r2, #0]
    872a:	320e      	adds	r2, #14
    872c:	0092      	lsls	r2, r2, #2
    872e:	50d1      	str	r1, [r2, r3]
			temp_meas.c2xyz[j] = c2raw[i][j];
    8730:	4972      	ldr	r1, [pc, #456]	; (88fc <cal_write_report+0x12f4>)
    8732:	4b6e      	ldr	r3, [pc, #440]	; (88ec <cal_write_report+0x12e4>)
    8734:	2220      	movs	r2, #32
    8736:	4694      	mov	ip, r2
    8738:	2208      	movs	r2, #8
    873a:	4690      	mov	r8, r2
    873c:	2208      	movs	r2, #8
    873e:	4691      	mov	r9, r2
    8740:	44b9      	add	r9, r7
    8742:	44c8      	add	r8, r9
    8744:	44c4      	add	ip, r8
    8746:	4463      	add	r3, ip
    8748:	681a      	ldr	r2, [r3, #0]
    874a:	0013      	movs	r3, r2
    874c:	005b      	lsls	r3, r3, #1
    874e:	189b      	adds	r3, r3, r2
    8750:	22d7      	movs	r2, #215	; 0xd7
    8752:	00d2      	lsls	r2, r2, #3
    8754:	2020      	movs	r0, #32
    8756:	4684      	mov	ip, r0
    8758:	2008      	movs	r0, #8
    875a:	4680      	mov	r8, r0
    875c:	2008      	movs	r0, #8
    875e:	4681      	mov	r9, r0
    8760:	44b9      	add	r9, r7
    8762:	44c8      	add	r8, r9
    8764:	44c4      	add	ip, r8
    8766:	4462      	add	r2, ip
    8768:	6812      	ldr	r2, [r2, #0]
    876a:	189b      	adds	r3, r3, r2
    876c:	009b      	lsls	r3, r3, #2
    876e:	585a      	ldr	r2, [r3, r1]
    8770:	4b5f      	ldr	r3, [pc, #380]	; (88f0 <cal_write_report+0x12e8>)
    8772:	21d8      	movs	r1, #216	; 0xd8
    8774:	00c9      	lsls	r1, r1, #3
    8776:	2020      	movs	r0, #32
    8778:	4684      	mov	ip, r0
    877a:	2008      	movs	r0, #8
    877c:	4680      	mov	r8, r0
    877e:	2008      	movs	r0, #8
    8780:	4681      	mov	r9, r0
    8782:	44b9      	add	r9, r7
    8784:	44c8      	add	r8, r9
    8786:	44c4      	add	ip, r8
    8788:	4461      	add	r1, ip
    878a:	18c9      	adds	r1, r1, r3
    878c:	23d7      	movs	r3, #215	; 0xd7
    878e:	00db      	lsls	r3, r3, #3
    8790:	2020      	movs	r0, #32
    8792:	4684      	mov	ip, r0
    8794:	2008      	movs	r0, #8
    8796:	4680      	mov	r8, r0
    8798:	2008      	movs	r0, #8
    879a:	4681      	mov	r9, r0
    879c:	44b9      	add	r9, r7
    879e:	44c8      	add	r8, r9
    87a0:	44c4      	add	ip, r8
    87a2:	4463      	add	r3, ip
    87a4:	681b      	ldr	r3, [r3, #0]
    87a6:	3310      	adds	r3, #16
    87a8:	009b      	lsls	r3, r3, #2
    87aa:	18cb      	adds	r3, r1, r3
    87ac:	3304      	adds	r3, #4
    87ae:	601a      	str	r2, [r3, #0]
		for (j=0;j<3;j++){
    87b0:	23d7      	movs	r3, #215	; 0xd7
    87b2:	00db      	lsls	r3, r3, #3
    87b4:	2220      	movs	r2, #32
    87b6:	4694      	mov	ip, r2
    87b8:	2208      	movs	r2, #8
    87ba:	4690      	mov	r8, r2
    87bc:	2208      	movs	r2, #8
    87be:	4691      	mov	r9, r2
    87c0:	44b9      	add	r9, r7
    87c2:	44c8      	add	r8, r9
    87c4:	44c4      	add	ip, r8
    87c6:	4463      	add	r3, ip
    87c8:	681b      	ldr	r3, [r3, #0]
    87ca:	3301      	adds	r3, #1
    87cc:	22d7      	movs	r2, #215	; 0xd7
    87ce:	00d2      	lsls	r2, r2, #3
    87d0:	2120      	movs	r1, #32
    87d2:	468c      	mov	ip, r1
    87d4:	2108      	movs	r1, #8
    87d6:	4688      	mov	r8, r1
    87d8:	2108      	movs	r1, #8
    87da:	4689      	mov	r9, r1
    87dc:	44b9      	add	r9, r7
    87de:	44c8      	add	r8, r9
    87e0:	44c4      	add	ip, r8
    87e2:	4462      	add	r2, ip
    87e4:	6013      	str	r3, [r2, #0]
    87e6:	23d7      	movs	r3, #215	; 0xd7
    87e8:	00db      	lsls	r3, r3, #3
    87ea:	2220      	movs	r2, #32
    87ec:	4694      	mov	ip, r2
    87ee:	2208      	movs	r2, #8
    87f0:	4690      	mov	r8, r2
    87f2:	2208      	movs	r2, #8
    87f4:	4691      	mov	r9, r2
    87f6:	44b9      	add	r9, r7
    87f8:	44c8      	add	r8, r9
    87fa:	44c4      	add	ip, r8
    87fc:	4463      	add	r3, ip
    87fe:	681b      	ldr	r3, [r3, #0]
    8800:	2b02      	cmp	r3, #2
    8802:	d800      	bhi.n	8806 <cal_write_report+0x11fe>
    8804:	e6d6      	b.n	85b4 <cal_write_report+0xfac>
		}
		calc_orientation(&temp_meas);
    8806:	2324      	movs	r3, #36	; 0x24
    8808:	2208      	movs	r2, #8
    880a:	4694      	mov	ip, r2
    880c:	2208      	movs	r2, #8
    880e:	4690      	mov	r8, r2
    8810:	44b8      	add	r8, r7
    8812:	44c4      	add	ip, r8
    8814:	4463      	add	r3, ip
    8816:	0018      	movs	r0, r3
    8818:	4b39      	ldr	r3, [pc, #228]	; (8900 <cal_write_report+0x12f8>)
    881a:	4798      	blx	r3
		azm_raw = temp_meas.azimuth;
    881c:	4b34      	ldr	r3, [pc, #208]	; (88f0 <cal_write_report+0x12e8>)
    881e:	22d8      	movs	r2, #216	; 0xd8
    8820:	00d2      	lsls	r2, r2, #3
    8822:	4694      	mov	ip, r2
    8824:	2220      	movs	r2, #32
    8826:	4690      	mov	r8, r2
    8828:	2208      	movs	r2, #8
    882a:	4691      	mov	r9, r2
    882c:	2208      	movs	r2, #8
    882e:	4692      	mov	sl, r2
    8830:	44ba      	add	sl, r7
    8832:	44d1      	add	r9, sl
    8834:	44c8      	add	r8, r9
    8836:	44c4      	add	ip, r8
    8838:	4463      	add	r3, ip
    883a:	68db      	ldr	r3, [r3, #12]
    883c:	22d4      	movs	r2, #212	; 0xd4
    883e:	00d2      	lsls	r2, r2, #3
    8840:	2120      	movs	r1, #32
    8842:	468c      	mov	ip, r1
    8844:	2108      	movs	r1, #8
    8846:	4688      	mov	r8, r1
    8848:	2108      	movs	r1, #8
    884a:	4689      	mov	r9, r1
    884c:	44b9      	add	r9, r7
    884e:	44c8      	add	r8, r9
    8850:	44c4      	add	ip, r8
    8852:	4462      	add	r2, ip
    8854:	6013      	str	r3, [r2, #0]
		inc_raw = temp_meas.inclination;
    8856:	4b26      	ldr	r3, [pc, #152]	; (88f0 <cal_write_report+0x12e8>)
    8858:	22d8      	movs	r2, #216	; 0xd8
    885a:	00d2      	lsls	r2, r2, #3
    885c:	4694      	mov	ip, r2
    885e:	2220      	movs	r2, #32
    8860:	4690      	mov	r8, r2
    8862:	2208      	movs	r2, #8
    8864:	4691      	mov	r9, r2
    8866:	2208      	movs	r2, #8
    8868:	4692      	mov	sl, r2
    886a:	44ba      	add	sl, r7
    886c:	44d1      	add	r9, sl
    886e:	44c8      	add	r8, r9
    8870:	44c4      	add	ip, r8
    8872:	4463      	add	r3, ip
    8874:	691b      	ldr	r3, [r3, #16]
    8876:	4a23      	ldr	r2, [pc, #140]	; (8904 <cal_write_report+0x12fc>)
    8878:	2120      	movs	r1, #32
    887a:	468c      	mov	ip, r1
    887c:	2108      	movs	r1, #8
    887e:	4688      	mov	r8, r1
    8880:	2108      	movs	r1, #8
    8882:	4689      	mov	r9, r1
    8884:	44b9      	add	r9, r7
    8886:	44c8      	add	r8, r9
    8888:	44c4      	add	ip, r8
    888a:	4462      	add	r2, ip
    888c:	6013      	str	r3, [r2, #0]
		roll_raw = temp_meas.roll;
    888e:	4b18      	ldr	r3, [pc, #96]	; (88f0 <cal_write_report+0x12e8>)
    8890:	22d8      	movs	r2, #216	; 0xd8
    8892:	00d2      	lsls	r2, r2, #3
    8894:	4694      	mov	ip, r2
    8896:	2220      	movs	r2, #32
    8898:	4690      	mov	r8, r2
    889a:	2208      	movs	r2, #8
    889c:	4691      	mov	r9, r2
    889e:	2208      	movs	r2, #8
    88a0:	4692      	mov	sl, r2
    88a2:	44ba      	add	sl, r7
    88a4:	44d1      	add	r9, sl
    88a6:	44c8      	add	r8, r9
    88a8:	44c4      	add	ip, r8
    88aa:	4463      	add	r3, ip
    88ac:	695b      	ldr	r3, [r3, #20]
    88ae:	22d3      	movs	r2, #211	; 0xd3
    88b0:	00d2      	lsls	r2, r2, #3
    88b2:	2120      	movs	r1, #32
    88b4:	468c      	mov	ip, r1
    88b6:	2108      	movs	r1, #8
    88b8:	4688      	mov	r8, r1
    88ba:	2108      	movs	r1, #8
    88bc:	4689      	mov	r9, r1
    88be:	44b9      	add	r9, r7
    88c0:	44c8      	add	r8, r9
    88c2:	44c4      	add	ip, r8
    88c4:	4462      	add	r2, ip
    88c6:	6013      	str	r3, [r2, #0]
		//  Next Measure calibrated data
		for (j=0;j<3;j++){
    88c8:	2300      	movs	r3, #0
    88ca:	22d7      	movs	r2, #215	; 0xd7
    88cc:	00d2      	lsls	r2, r2, #3
    88ce:	2120      	movs	r1, #32
    88d0:	468c      	mov	ip, r1
    88d2:	2108      	movs	r1, #8
    88d4:	4688      	mov	r8, r1
    88d6:	2108      	movs	r1, #8
    88d8:	4689      	mov	r9, r1
    88da:	44b9      	add	r9, r7
    88dc:	44c8      	add	r8, r9
    88de:	44c4      	add	ip, r8
    88e0:	4462      	add	r2, ip
    88e2:	6013      	str	r3, [r2, #0]
    88e4:	e129      	b.n	8b3a <cal_write_report+0x1532>
    88e6:	46c0      	nop			; (mov r8, r8)
    88e8:	200049dc 	.word	0x200049dc
    88ec:	000006bc 	.word	0x000006bc
    88f0:	fffff944 	.word	0xfffff944
    88f4:	20003b90 	.word	0x20003b90
    88f8:	20001a2c 	.word	0x20001a2c
    88fc:	20001e50 	.word	0x20001e50
    8900:	00009e35 	.word	0x00009e35
    8904:	0000069c 	.word	0x0000069c
			temp_meas.a1xyz[j] = a1cal[i][j];
    8908:	49fc      	ldr	r1, [pc, #1008]	; (8cfc <cal_write_report+0x16f4>)
    890a:	4bfd      	ldr	r3, [pc, #1012]	; (8d00 <cal_write_report+0x16f8>)
    890c:	2220      	movs	r2, #32
    890e:	4694      	mov	ip, r2
    8910:	2208      	movs	r2, #8
    8912:	4690      	mov	r8, r2
    8914:	2208      	movs	r2, #8
    8916:	4691      	mov	r9, r2
    8918:	44b9      	add	r9, r7
    891a:	44c8      	add	r8, r9
    891c:	44c4      	add	ip, r8
    891e:	4463      	add	r3, ip
    8920:	681a      	ldr	r2, [r3, #0]
    8922:	0013      	movs	r3, r2
    8924:	005b      	lsls	r3, r3, #1
    8926:	189b      	adds	r3, r3, r2
    8928:	22d7      	movs	r2, #215	; 0xd7
    892a:	00d2      	lsls	r2, r2, #3
    892c:	2020      	movs	r0, #32
    892e:	4684      	mov	ip, r0
    8930:	2008      	movs	r0, #8
    8932:	4680      	mov	r8, r0
    8934:	2008      	movs	r0, #8
    8936:	4681      	mov	r9, r0
    8938:	44b9      	add	r9, r7
    893a:	44c8      	add	r8, r9
    893c:	44c4      	add	ip, r8
    893e:	4462      	add	r2, ip
    8940:	6812      	ldr	r2, [r2, #0]
    8942:	189b      	adds	r3, r3, r2
    8944:	009b      	lsls	r3, r3, #2
    8946:	5859      	ldr	r1, [r3, r1]
    8948:	4bee      	ldr	r3, [pc, #952]	; (8d04 <cal_write_report+0x16fc>)
    894a:	22d8      	movs	r2, #216	; 0xd8
    894c:	00d2      	lsls	r2, r2, #3
    894e:	4694      	mov	ip, r2
    8950:	2220      	movs	r2, #32
    8952:	4690      	mov	r8, r2
    8954:	2208      	movs	r2, #8
    8956:	4691      	mov	r9, r2
    8958:	2208      	movs	r2, #8
    895a:	4692      	mov	sl, r2
    895c:	44ba      	add	sl, r7
    895e:	44d1      	add	r9, sl
    8960:	44c8      	add	r8, r9
    8962:	44c4      	add	ip, r8
    8964:	4463      	add	r3, ip
    8966:	22d7      	movs	r2, #215	; 0xd7
    8968:	00d2      	lsls	r2, r2, #3
    896a:	2020      	movs	r0, #32
    896c:	4684      	mov	ip, r0
    896e:	2008      	movs	r0, #8
    8970:	4680      	mov	r8, r0
    8972:	2008      	movs	r0, #8
    8974:	4681      	mov	r9, r0
    8976:	44b9      	add	r9, r7
    8978:	44c8      	add	r8, r9
    897a:	44c4      	add	ip, r8
    897c:	4462      	add	r2, ip
    897e:	6812      	ldr	r2, [r2, #0]
    8980:	3208      	adds	r2, #8
    8982:	0092      	lsls	r2, r2, #2
    8984:	50d1      	str	r1, [r2, r3]
			temp_meas.a2xyz[j] = a2cal[i][j];
    8986:	49e0      	ldr	r1, [pc, #896]	; (8d08 <cal_write_report+0x1700>)
    8988:	4bdd      	ldr	r3, [pc, #884]	; (8d00 <cal_write_report+0x16f8>)
    898a:	2220      	movs	r2, #32
    898c:	4694      	mov	ip, r2
    898e:	2208      	movs	r2, #8
    8990:	4690      	mov	r8, r2
    8992:	2208      	movs	r2, #8
    8994:	4691      	mov	r9, r2
    8996:	44b9      	add	r9, r7
    8998:	44c8      	add	r8, r9
    899a:	44c4      	add	ip, r8
    899c:	4463      	add	r3, ip
    899e:	681a      	ldr	r2, [r3, #0]
    89a0:	0013      	movs	r3, r2
    89a2:	005b      	lsls	r3, r3, #1
    89a4:	189b      	adds	r3, r3, r2
    89a6:	22d7      	movs	r2, #215	; 0xd7
    89a8:	00d2      	lsls	r2, r2, #3
    89aa:	2020      	movs	r0, #32
    89ac:	4684      	mov	ip, r0
    89ae:	2008      	movs	r0, #8
    89b0:	4680      	mov	r8, r0
    89b2:	2008      	movs	r0, #8
    89b4:	4681      	mov	r9, r0
    89b6:	44b9      	add	r9, r7
    89b8:	44c8      	add	r8, r9
    89ba:	44c4      	add	ip, r8
    89bc:	4462      	add	r2, ip
    89be:	6812      	ldr	r2, [r2, #0]
    89c0:	189b      	adds	r3, r3, r2
    89c2:	009b      	lsls	r3, r3, #2
    89c4:	585a      	ldr	r2, [r3, r1]
    89c6:	4bcf      	ldr	r3, [pc, #828]	; (8d04 <cal_write_report+0x16fc>)
    89c8:	21d8      	movs	r1, #216	; 0xd8
    89ca:	00c9      	lsls	r1, r1, #3
    89cc:	2020      	movs	r0, #32
    89ce:	4684      	mov	ip, r0
    89d0:	2008      	movs	r0, #8
    89d2:	4680      	mov	r8, r0
    89d4:	2008      	movs	r0, #8
    89d6:	4681      	mov	r9, r0
    89d8:	44b9      	add	r9, r7
    89da:	44c8      	add	r8, r9
    89dc:	44c4      	add	ip, r8
    89de:	4461      	add	r1, ip
    89e0:	18c9      	adds	r1, r1, r3
    89e2:	23d7      	movs	r3, #215	; 0xd7
    89e4:	00db      	lsls	r3, r3, #3
    89e6:	2020      	movs	r0, #32
    89e8:	4684      	mov	ip, r0
    89ea:	2008      	movs	r0, #8
    89ec:	4680      	mov	r8, r0
    89ee:	2008      	movs	r0, #8
    89f0:	4681      	mov	r9, r0
    89f2:	44b9      	add	r9, r7
    89f4:	44c8      	add	r8, r9
    89f6:	44c4      	add	ip, r8
    89f8:	4463      	add	r3, ip
    89fa:	681b      	ldr	r3, [r3, #0]
    89fc:	330a      	adds	r3, #10
    89fe:	009b      	lsls	r3, r3, #2
    8a00:	18cb      	adds	r3, r1, r3
    8a02:	3304      	adds	r3, #4
    8a04:	601a      	str	r2, [r3, #0]
			temp_meas.c1xyz[j] = c1cal[i][j];
    8a06:	49c1      	ldr	r1, [pc, #772]	; (8d0c <cal_write_report+0x1704>)
    8a08:	4bbd      	ldr	r3, [pc, #756]	; (8d00 <cal_write_report+0x16f8>)
    8a0a:	2220      	movs	r2, #32
    8a0c:	4694      	mov	ip, r2
    8a0e:	2208      	movs	r2, #8
    8a10:	4690      	mov	r8, r2
    8a12:	2208      	movs	r2, #8
    8a14:	4691      	mov	r9, r2
    8a16:	44b9      	add	r9, r7
    8a18:	44c8      	add	r8, r9
    8a1a:	44c4      	add	ip, r8
    8a1c:	4463      	add	r3, ip
    8a1e:	681a      	ldr	r2, [r3, #0]
    8a20:	0013      	movs	r3, r2
    8a22:	005b      	lsls	r3, r3, #1
    8a24:	189b      	adds	r3, r3, r2
    8a26:	22d7      	movs	r2, #215	; 0xd7
    8a28:	00d2      	lsls	r2, r2, #3
    8a2a:	2020      	movs	r0, #32
    8a2c:	4684      	mov	ip, r0
    8a2e:	2008      	movs	r0, #8
    8a30:	4680      	mov	r8, r0
    8a32:	2008      	movs	r0, #8
    8a34:	4681      	mov	r9, r0
    8a36:	44b9      	add	r9, r7
    8a38:	44c8      	add	r8, r9
    8a3a:	44c4      	add	ip, r8
    8a3c:	4462      	add	r2, ip
    8a3e:	6812      	ldr	r2, [r2, #0]
    8a40:	189b      	adds	r3, r3, r2
    8a42:	009b      	lsls	r3, r3, #2
    8a44:	5859      	ldr	r1, [r3, r1]
    8a46:	4baf      	ldr	r3, [pc, #700]	; (8d04 <cal_write_report+0x16fc>)
    8a48:	22d8      	movs	r2, #216	; 0xd8
    8a4a:	00d2      	lsls	r2, r2, #3
    8a4c:	4694      	mov	ip, r2
    8a4e:	2220      	movs	r2, #32
    8a50:	4690      	mov	r8, r2
    8a52:	2208      	movs	r2, #8
    8a54:	4691      	mov	r9, r2
    8a56:	2208      	movs	r2, #8
    8a58:	4692      	mov	sl, r2
    8a5a:	44ba      	add	sl, r7
    8a5c:	44d1      	add	r9, sl
    8a5e:	44c8      	add	r8, r9
    8a60:	44c4      	add	ip, r8
    8a62:	4463      	add	r3, ip
    8a64:	22d7      	movs	r2, #215	; 0xd7
    8a66:	00d2      	lsls	r2, r2, #3
    8a68:	2020      	movs	r0, #32
    8a6a:	4684      	mov	ip, r0
    8a6c:	2008      	movs	r0, #8
    8a6e:	4680      	mov	r8, r0
    8a70:	2008      	movs	r0, #8
    8a72:	4681      	mov	r9, r0
    8a74:	44b9      	add	r9, r7
    8a76:	44c8      	add	r8, r9
    8a78:	44c4      	add	ip, r8
    8a7a:	4462      	add	r2, ip
    8a7c:	6812      	ldr	r2, [r2, #0]
    8a7e:	320e      	adds	r2, #14
    8a80:	0092      	lsls	r2, r2, #2
    8a82:	50d1      	str	r1, [r2, r3]
			temp_meas.c2xyz[j] = c2cal[i][j];
    8a84:	49a2      	ldr	r1, [pc, #648]	; (8d10 <cal_write_report+0x1708>)
    8a86:	4b9e      	ldr	r3, [pc, #632]	; (8d00 <cal_write_report+0x16f8>)
    8a88:	2220      	movs	r2, #32
    8a8a:	4694      	mov	ip, r2
    8a8c:	2208      	movs	r2, #8
    8a8e:	4690      	mov	r8, r2
    8a90:	2208      	movs	r2, #8
    8a92:	4691      	mov	r9, r2
    8a94:	44b9      	add	r9, r7
    8a96:	44c8      	add	r8, r9
    8a98:	44c4      	add	ip, r8
    8a9a:	4463      	add	r3, ip
    8a9c:	681a      	ldr	r2, [r3, #0]
    8a9e:	0013      	movs	r3, r2
    8aa0:	005b      	lsls	r3, r3, #1
    8aa2:	189b      	adds	r3, r3, r2
    8aa4:	22d7      	movs	r2, #215	; 0xd7
    8aa6:	00d2      	lsls	r2, r2, #3
    8aa8:	2020      	movs	r0, #32
    8aaa:	4684      	mov	ip, r0
    8aac:	2008      	movs	r0, #8
    8aae:	4680      	mov	r8, r0
    8ab0:	2008      	movs	r0, #8
    8ab2:	4681      	mov	r9, r0
    8ab4:	44b9      	add	r9, r7
    8ab6:	44c8      	add	r8, r9
    8ab8:	44c4      	add	ip, r8
    8aba:	4462      	add	r2, ip
    8abc:	6812      	ldr	r2, [r2, #0]
    8abe:	189b      	adds	r3, r3, r2
    8ac0:	009b      	lsls	r3, r3, #2
    8ac2:	585a      	ldr	r2, [r3, r1]
    8ac4:	4b8f      	ldr	r3, [pc, #572]	; (8d04 <cal_write_report+0x16fc>)
    8ac6:	21d8      	movs	r1, #216	; 0xd8
    8ac8:	00c9      	lsls	r1, r1, #3
    8aca:	2020      	movs	r0, #32
    8acc:	4684      	mov	ip, r0
    8ace:	2008      	movs	r0, #8
    8ad0:	4680      	mov	r8, r0
    8ad2:	2008      	movs	r0, #8
    8ad4:	4681      	mov	r9, r0
    8ad6:	44b9      	add	r9, r7
    8ad8:	44c8      	add	r8, r9
    8ada:	44c4      	add	ip, r8
    8adc:	4461      	add	r1, ip
    8ade:	18c9      	adds	r1, r1, r3
    8ae0:	23d7      	movs	r3, #215	; 0xd7
    8ae2:	00db      	lsls	r3, r3, #3
    8ae4:	2020      	movs	r0, #32
    8ae6:	4684      	mov	ip, r0
    8ae8:	2008      	movs	r0, #8
    8aea:	4680      	mov	r8, r0
    8aec:	2008      	movs	r0, #8
    8aee:	4681      	mov	r9, r0
    8af0:	44b9      	add	r9, r7
    8af2:	44c8      	add	r8, r9
    8af4:	44c4      	add	ip, r8
    8af6:	4463      	add	r3, ip
    8af8:	681b      	ldr	r3, [r3, #0]
    8afa:	3310      	adds	r3, #16
    8afc:	009b      	lsls	r3, r3, #2
    8afe:	18cb      	adds	r3, r1, r3
    8b00:	3304      	adds	r3, #4
    8b02:	601a      	str	r2, [r3, #0]
		for (j=0;j<3;j++){
    8b04:	23d7      	movs	r3, #215	; 0xd7
    8b06:	00db      	lsls	r3, r3, #3
    8b08:	2220      	movs	r2, #32
    8b0a:	4694      	mov	ip, r2
    8b0c:	2208      	movs	r2, #8
    8b0e:	4690      	mov	r8, r2
    8b10:	2208      	movs	r2, #8
    8b12:	4691      	mov	r9, r2
    8b14:	44b9      	add	r9, r7
    8b16:	44c8      	add	r8, r9
    8b18:	44c4      	add	ip, r8
    8b1a:	4463      	add	r3, ip
    8b1c:	681b      	ldr	r3, [r3, #0]
    8b1e:	3301      	adds	r3, #1
    8b20:	22d7      	movs	r2, #215	; 0xd7
    8b22:	00d2      	lsls	r2, r2, #3
    8b24:	2120      	movs	r1, #32
    8b26:	468c      	mov	ip, r1
    8b28:	2108      	movs	r1, #8
    8b2a:	4688      	mov	r8, r1
    8b2c:	2108      	movs	r1, #8
    8b2e:	4689      	mov	r9, r1
    8b30:	44b9      	add	r9, r7
    8b32:	44c8      	add	r8, r9
    8b34:	44c4      	add	ip, r8
    8b36:	4462      	add	r2, ip
    8b38:	6013      	str	r3, [r2, #0]
    8b3a:	23d7      	movs	r3, #215	; 0xd7
    8b3c:	00db      	lsls	r3, r3, #3
    8b3e:	2220      	movs	r2, #32
    8b40:	4694      	mov	ip, r2
    8b42:	2208      	movs	r2, #8
    8b44:	4690      	mov	r8, r2
    8b46:	2208      	movs	r2, #8
    8b48:	4691      	mov	r9, r2
    8b4a:	44b9      	add	r9, r7
    8b4c:	44c8      	add	r8, r9
    8b4e:	44c4      	add	ip, r8
    8b50:	4463      	add	r3, ip
    8b52:	681b      	ldr	r3, [r3, #0]
    8b54:	2b02      	cmp	r3, #2
    8b56:	d800      	bhi.n	8b5a <cal_write_report+0x1552>
    8b58:	e6d6      	b.n	8908 <cal_write_report+0x1300>
		}
		calc_orientation(&temp_meas);
    8b5a:	2324      	movs	r3, #36	; 0x24
    8b5c:	2208      	movs	r2, #8
    8b5e:	4694      	mov	ip, r2
    8b60:	2208      	movs	r2, #8
    8b62:	4690      	mov	r8, r2
    8b64:	44b8      	add	r8, r7
    8b66:	44c4      	add	ip, r8
    8b68:	4463      	add	r3, ip
    8b6a:	0018      	movs	r0, r3
    8b6c:	4b69      	ldr	r3, [pc, #420]	; (8d14 <cal_write_report+0x170c>)
    8b6e:	4798      	blx	r3
		azm_cal = temp_meas.azimuth;
    8b70:	4b64      	ldr	r3, [pc, #400]	; (8d04 <cal_write_report+0x16fc>)
    8b72:	22d8      	movs	r2, #216	; 0xd8
    8b74:	00d2      	lsls	r2, r2, #3
    8b76:	4694      	mov	ip, r2
    8b78:	2220      	movs	r2, #32
    8b7a:	4690      	mov	r8, r2
    8b7c:	2208      	movs	r2, #8
    8b7e:	4691      	mov	r9, r2
    8b80:	2208      	movs	r2, #8
    8b82:	4692      	mov	sl, r2
    8b84:	44ba      	add	sl, r7
    8b86:	44d1      	add	r9, sl
    8b88:	44c8      	add	r8, r9
    8b8a:	44c4      	add	ip, r8
    8b8c:	4463      	add	r3, ip
    8b8e:	68db      	ldr	r3, [r3, #12]
    8b90:	4a61      	ldr	r2, [pc, #388]	; (8d18 <cal_write_report+0x1710>)
    8b92:	2120      	movs	r1, #32
    8b94:	468c      	mov	ip, r1
    8b96:	2108      	movs	r1, #8
    8b98:	4688      	mov	r8, r1
    8b9a:	2108      	movs	r1, #8
    8b9c:	4689      	mov	r9, r1
    8b9e:	44b9      	add	r9, r7
    8ba0:	44c8      	add	r8, r9
    8ba2:	44c4      	add	ip, r8
    8ba4:	4462      	add	r2, ip
    8ba6:	6013      	str	r3, [r2, #0]
		inc_cal = temp_meas.inclination;
    8ba8:	4b56      	ldr	r3, [pc, #344]	; (8d04 <cal_write_report+0x16fc>)
    8baa:	22d8      	movs	r2, #216	; 0xd8
    8bac:	00d2      	lsls	r2, r2, #3
    8bae:	4694      	mov	ip, r2
    8bb0:	2220      	movs	r2, #32
    8bb2:	4690      	mov	r8, r2
    8bb4:	2208      	movs	r2, #8
    8bb6:	4691      	mov	r9, r2
    8bb8:	2208      	movs	r2, #8
    8bba:	4692      	mov	sl, r2
    8bbc:	44ba      	add	sl, r7
    8bbe:	44d1      	add	r9, sl
    8bc0:	44c8      	add	r8, r9
    8bc2:	44c4      	add	ip, r8
    8bc4:	4463      	add	r3, ip
    8bc6:	691b      	ldr	r3, [r3, #16]
    8bc8:	22d2      	movs	r2, #210	; 0xd2
    8bca:	00d2      	lsls	r2, r2, #3
    8bcc:	2120      	movs	r1, #32
    8bce:	468c      	mov	ip, r1
    8bd0:	2108      	movs	r1, #8
    8bd2:	4688      	mov	r8, r1
    8bd4:	2108      	movs	r1, #8
    8bd6:	4689      	mov	r9, r1
    8bd8:	44b9      	add	r9, r7
    8bda:	44c8      	add	r8, r9
    8bdc:	44c4      	add	ip, r8
    8bde:	4462      	add	r2, ip
    8be0:	6013      	str	r3, [r2, #0]
		roll_cal = temp_meas.roll;
    8be2:	4b48      	ldr	r3, [pc, #288]	; (8d04 <cal_write_report+0x16fc>)
    8be4:	22d8      	movs	r2, #216	; 0xd8
    8be6:	00d2      	lsls	r2, r2, #3
    8be8:	4694      	mov	ip, r2
    8bea:	2220      	movs	r2, #32
    8bec:	4690      	mov	r8, r2
    8bee:	2208      	movs	r2, #8
    8bf0:	4691      	mov	r9, r2
    8bf2:	2208      	movs	r2, #8
    8bf4:	4692      	mov	sl, r2
    8bf6:	44ba      	add	sl, r7
    8bf8:	44d1      	add	r9, sl
    8bfa:	44c8      	add	r8, r9
    8bfc:	44c4      	add	ip, r8
    8bfe:	4463      	add	r3, ip
    8c00:	695b      	ldr	r3, [r3, #20]
    8c02:	4a46      	ldr	r2, [pc, #280]	; (8d1c <cal_write_report+0x1714>)
    8c04:	2120      	movs	r1, #32
    8c06:	468c      	mov	ip, r1
    8c08:	2108      	movs	r1, #8
    8c0a:	4688      	mov	r8, r1
    8c0c:	2108      	movs	r1, #8
    8c0e:	4689      	mov	r9, r1
    8c10:	44b9      	add	r9, r7
    8c12:	44c8      	add	r8, r9
    8c14:	44c4      	add	ip, r8
    8c16:	4462      	add	r2, ip
    8c18:	6013      	str	r3, [r2, #0]
		group_current = floor(i/group_size)+1;
    8c1a:	4b39      	ldr	r3, [pc, #228]	; (8d00 <cal_write_report+0x16f8>)
    8c1c:	2220      	movs	r2, #32
    8c1e:	4694      	mov	ip, r2
    8c20:	2208      	movs	r2, #8
    8c22:	4690      	mov	r8, r2
    8c24:	2208      	movs	r2, #8
    8c26:	4691      	mov	r9, r2
    8c28:	44b9      	add	r9, r7
    8c2a:	44c8      	add	r8, r9
    8c2c:	44c4      	add	ip, r8
    8c2e:	4463      	add	r3, ip
    8c30:	681b      	ldr	r3, [r3, #0]
    8c32:	089a      	lsrs	r2, r3, #2
    8c34:	4b3a      	ldr	r3, [pc, #232]	; (8d20 <cal_write_report+0x1718>)
    8c36:	0010      	movs	r0, r2
    8c38:	4798      	blx	r3
    8c3a:	0003      	movs	r3, r0
    8c3c:	000c      	movs	r4, r1
    8c3e:	0018      	movs	r0, r3
    8c40:	0021      	movs	r1, r4
    8c42:	4b38      	ldr	r3, [pc, #224]	; (8d24 <cal_write_report+0x171c>)
    8c44:	4798      	blx	r3
    8c46:	4c38      	ldr	r4, [pc, #224]	; (8d28 <cal_write_report+0x1720>)
    8c48:	2200      	movs	r2, #0
    8c4a:	4b38      	ldr	r3, [pc, #224]	; (8d2c <cal_write_report+0x1724>)
    8c4c:	47a0      	blx	r4
    8c4e:	0003      	movs	r3, r0
    8c50:	000c      	movs	r4, r1
    8c52:	0019      	movs	r1, r3
    8c54:	0022      	movs	r2, r4
    8c56:	4b36      	ldr	r3, [pc, #216]	; (8d30 <cal_write_report+0x1728>)
    8c58:	0008      	movs	r0, r1
    8c5a:	0011      	movs	r1, r2
    8c5c:	4798      	blx	r3
    8c5e:	0003      	movs	r3, r0
    8c60:	22d1      	movs	r2, #209	; 0xd1
    8c62:	00d2      	lsls	r2, r2, #3
    8c64:	2120      	movs	r1, #32
    8c66:	468c      	mov	ip, r1
    8c68:	2108      	movs	r1, #8
    8c6a:	4688      	mov	r8, r1
    8c6c:	2108      	movs	r1, #8
    8c6e:	4689      	mov	r9, r1
    8c70:	44b9      	add	r9, r7
    8c72:	44c8      	add	r8, r9
    8c74:	44c4      	add	ip, r8
    8c76:	4462      	add	r2, ip
    8c78:	6013      	str	r3, [r2, #0]
		sprintf(write_str1,"%-2d,    %-2d,      %03.2f,   %03.2f,      %03.2f,   %03.2f,   %03.2f,      %03.2f\r\n",
    8c7a:	4b21      	ldr	r3, [pc, #132]	; (8d00 <cal_write_report+0x16f8>)
    8c7c:	2220      	movs	r2, #32
    8c7e:	4694      	mov	ip, r2
    8c80:	2208      	movs	r2, #8
    8c82:	4690      	mov	r8, r2
    8c84:	2208      	movs	r2, #8
    8c86:	4691      	mov	r9, r2
    8c88:	44b9      	add	r9, r7
    8c8a:	44c8      	add	r8, r9
    8c8c:	44c4      	add	ip, r8
    8c8e:	4463      	add	r3, ip
    8c90:	681b      	ldr	r3, [r3, #0]
    8c92:	3301      	adds	r3, #1
    8c94:	4698      	mov	r8, r3
    8c96:	4b27      	ldr	r3, [pc, #156]	; (8d34 <cal_write_report+0x172c>)
    8c98:	22d4      	movs	r2, #212	; 0xd4
    8c9a:	00d2      	lsls	r2, r2, #3
    8c9c:	2120      	movs	r1, #32
    8c9e:	468c      	mov	ip, r1
    8ca0:	2108      	movs	r1, #8
    8ca2:	4689      	mov	r9, r1
    8ca4:	2108      	movs	r1, #8
    8ca6:	468a      	mov	sl, r1
    8ca8:	44ba      	add	sl, r7
    8caa:	44d1      	add	r9, sl
    8cac:	44cc      	add	ip, r9
    8cae:	4462      	add	r2, ip
    8cb0:	6810      	ldr	r0, [r2, #0]
    8cb2:	4798      	blx	r3
    8cb4:	0005      	movs	r5, r0
    8cb6:	000e      	movs	r6, r1
    8cb8:	4b1e      	ldr	r3, [pc, #120]	; (8d34 <cal_write_report+0x172c>)
    8cba:	4a1f      	ldr	r2, [pc, #124]	; (8d38 <cal_write_report+0x1730>)
    8cbc:	2120      	movs	r1, #32
    8cbe:	468c      	mov	ip, r1
    8cc0:	2108      	movs	r1, #8
    8cc2:	4689      	mov	r9, r1
    8cc4:	2108      	movs	r1, #8
    8cc6:	468a      	mov	sl, r1
    8cc8:	44ba      	add	sl, r7
    8cca:	44d1      	add	r9, sl
    8ccc:	44cc      	add	ip, r9
    8cce:	4462      	add	r2, ip
    8cd0:	6810      	ldr	r0, [r2, #0]
    8cd2:	4798      	blx	r3
    8cd4:	62b8      	str	r0, [r7, #40]	; 0x28
    8cd6:	62f9      	str	r1, [r7, #44]	; 0x2c
    8cd8:	4b16      	ldr	r3, [pc, #88]	; (8d34 <cal_write_report+0x172c>)
    8cda:	22d3      	movs	r2, #211	; 0xd3
    8cdc:	00d2      	lsls	r2, r2, #3
    8cde:	2120      	movs	r1, #32
    8ce0:	468c      	mov	ip, r1
    8ce2:	2108      	movs	r1, #8
    8ce4:	4689      	mov	r9, r1
    8ce6:	2108      	movs	r1, #8
    8ce8:	468a      	mov	sl, r1
    8cea:	44ba      	add	sl, r7
    8cec:	44d1      	add	r9, sl
    8cee:	44cc      	add	ip, r9
    8cf0:	4462      	add	r2, ip
    8cf2:	6810      	ldr	r0, [r2, #0]
    8cf4:	4798      	blx	r3
    8cf6:	6238      	str	r0, [r7, #32]
    8cf8:	6279      	str	r1, [r7, #36]	; 0x24
    8cfa:	e01f      	b.n	8d3c <cal_write_report+0x1734>
    8cfc:	20003440 	.word	0x20003440
    8d00:	000006bc 	.word	0x000006bc
    8d04:	fffff944 	.word	0xfffff944
    8d08:	200045b8 	.word	0x200045b8
    8d0c:	20002210 	.word	0x20002210
    8d10:	20003078 	.word	0x20003078
    8d14:	00009e35 	.word	0x00009e35
    8d18:	00000694 	.word	0x00000694
    8d1c:	0000068c 	.word	0x0000068c
    8d20:	00020d29 	.word	0x00020d29
    8d24:	0001b581 	.word	0x0001b581
    8d28:	0001f249 	.word	0x0001f249
    8d2c:	3ff00000 	.word	0x3ff00000
    8d30:	0001e425 	.word	0x0001e425
    8d34:	00020d99 	.word	0x00020d99
    8d38:	0000069c 	.word	0x0000069c
    8d3c:	4bab      	ldr	r3, [pc, #684]	; (8fec <cal_write_report+0x19e4>)
    8d3e:	4aac      	ldr	r2, [pc, #688]	; (8ff0 <cal_write_report+0x19e8>)
    8d40:	2120      	movs	r1, #32
    8d42:	468c      	mov	ip, r1
    8d44:	2108      	movs	r1, #8
    8d46:	4689      	mov	r9, r1
    8d48:	2108      	movs	r1, #8
    8d4a:	468a      	mov	sl, r1
    8d4c:	44ba      	add	sl, r7
    8d4e:	44d1      	add	r9, sl
    8d50:	44cc      	add	ip, r9
    8d52:	4462      	add	r2, ip
    8d54:	6810      	ldr	r0, [r2, #0]
    8d56:	4798      	blx	r3
    8d58:	61b8      	str	r0, [r7, #24]
    8d5a:	61f9      	str	r1, [r7, #28]
    8d5c:	4ba3      	ldr	r3, [pc, #652]	; (8fec <cal_write_report+0x19e4>)
    8d5e:	22d2      	movs	r2, #210	; 0xd2
    8d60:	00d2      	lsls	r2, r2, #3
    8d62:	2120      	movs	r1, #32
    8d64:	468c      	mov	ip, r1
    8d66:	2108      	movs	r1, #8
    8d68:	4689      	mov	r9, r1
    8d6a:	2108      	movs	r1, #8
    8d6c:	468a      	mov	sl, r1
    8d6e:	44ba      	add	sl, r7
    8d70:	44d1      	add	r9, sl
    8d72:	44cc      	add	ip, r9
    8d74:	4462      	add	r2, ip
    8d76:	6810      	ldr	r0, [r2, #0]
    8d78:	4798      	blx	r3
    8d7a:	6138      	str	r0, [r7, #16]
    8d7c:	6179      	str	r1, [r7, #20]
    8d7e:	4b9b      	ldr	r3, [pc, #620]	; (8fec <cal_write_report+0x19e4>)
    8d80:	4a9c      	ldr	r2, [pc, #624]	; (8ff4 <cal_write_report+0x19ec>)
    8d82:	2120      	movs	r1, #32
    8d84:	468c      	mov	ip, r1
    8d86:	2108      	movs	r1, #8
    8d88:	4689      	mov	r9, r1
    8d8a:	2108      	movs	r1, #8
    8d8c:	468a      	mov	sl, r1
    8d8e:	44ba      	add	sl, r7
    8d90:	44d1      	add	r9, sl
    8d92:	44cc      	add	ip, r9
    8d94:	4462      	add	r2, ip
    8d96:	6810      	ldr	r0, [r2, #0]
    8d98:	4798      	blx	r3
    8d9a:	60b8      	str	r0, [r7, #8]
    8d9c:	60f9      	str	r1, [r7, #12]
    8d9e:	22d1      	movs	r2, #209	; 0xd1
    8da0:	00d2      	lsls	r2, r2, #3
    8da2:	2120      	movs	r1, #32
    8da4:	468c      	mov	ip, r1
    8da6:	2308      	movs	r3, #8
    8da8:	4699      	mov	r9, r3
    8daa:	2308      	movs	r3, #8
    8dac:	469a      	mov	sl, r3
    8dae:	44ba      	add	sl, r7
    8db0:	44d1      	add	r9, sl
    8db2:	44cc      	add	ip, r9
    8db4:	4462      	add	r2, ip
    8db6:	6812      	ldr	r2, [r2, #0]
    8db8:	498f      	ldr	r1, [pc, #572]	; (8ff8 <cal_write_report+0x19f0>)
    8dba:	20cc      	movs	r0, #204	; 0xcc
    8dbc:	0080      	lsls	r0, r0, #2
    8dbe:	2320      	movs	r3, #32
    8dc0:	469c      	mov	ip, r3
    8dc2:	2308      	movs	r3, #8
    8dc4:	4699      	mov	r9, r3
    8dc6:	2308      	movs	r3, #8
    8dc8:	469a      	mov	sl, r3
    8dca:	44ba      	add	sl, r7
    8dcc:	44d1      	add	r9, sl
    8dce:	44cc      	add	ip, r9
    8dd0:	4460      	add	r0, ip
    8dd2:	68bb      	ldr	r3, [r7, #8]
    8dd4:	68fc      	ldr	r4, [r7, #12]
    8dd6:	930a      	str	r3, [sp, #40]	; 0x28
    8dd8:	940b      	str	r4, [sp, #44]	; 0x2c
    8dda:	693b      	ldr	r3, [r7, #16]
    8ddc:	697c      	ldr	r4, [r7, #20]
    8dde:	9308      	str	r3, [sp, #32]
    8de0:	9409      	str	r4, [sp, #36]	; 0x24
    8de2:	69bb      	ldr	r3, [r7, #24]
    8de4:	69fc      	ldr	r4, [r7, #28]
    8de6:	9306      	str	r3, [sp, #24]
    8de8:	9407      	str	r4, [sp, #28]
    8dea:	6a3b      	ldr	r3, [r7, #32]
    8dec:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    8dee:	9304      	str	r3, [sp, #16]
    8df0:	9405      	str	r4, [sp, #20]
    8df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8df4:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    8df6:	9302      	str	r3, [sp, #8]
    8df8:	9403      	str	r4, [sp, #12]
    8dfa:	9500      	str	r5, [sp, #0]
    8dfc:	9601      	str	r6, [sp, #4]
    8dfe:	4643      	mov	r3, r8
    8e00:	4c7e      	ldr	r4, [pc, #504]	; (8ffc <cal_write_report+0x19f4>)
    8e02:	47a0      	blx	r4
			group_current, i+1,  azm_raw, inc_raw, roll_raw, azm_cal, inc_cal, roll_cal);
			
		fdebug3 = f_write(&file_cal_report, write_str1, strlen(write_str1), pbw);
    8e04:	23cc      	movs	r3, #204	; 0xcc
    8e06:	009b      	lsls	r3, r3, #2
    8e08:	2220      	movs	r2, #32
    8e0a:	4694      	mov	ip, r2
    8e0c:	2208      	movs	r2, #8
    8e0e:	4690      	mov	r8, r2
    8e10:	2208      	movs	r2, #8
    8e12:	4691      	mov	r9, r2
    8e14:	44b9      	add	r9, r7
    8e16:	44c8      	add	r8, r9
    8e18:	44c4      	add	ip, r8
    8e1a:	4463      	add	r3, ip
    8e1c:	0018      	movs	r0, r3
    8e1e:	4b78      	ldr	r3, [pc, #480]	; (9000 <cal_write_report+0x19f8>)
    8e20:	4798      	blx	r3
    8e22:	0002      	movs	r2, r0
    8e24:	4b77      	ldr	r3, [pc, #476]	; (9004 <cal_write_report+0x19fc>)
    8e26:	2120      	movs	r1, #32
    8e28:	2008      	movs	r0, #8
    8e2a:	4684      	mov	ip, r0
    8e2c:	2008      	movs	r0, #8
    8e2e:	4680      	mov	r8, r0
    8e30:	44b8      	add	r8, r7
    8e32:	44c4      	add	ip, r8
    8e34:	4461      	add	r1, ip
    8e36:	18cc      	adds	r4, r1, r3
    8e38:	23d5      	movs	r3, #213	; 0xd5
    8e3a:	00db      	lsls	r3, r3, #3
    8e3c:	2120      	movs	r1, #32
    8e3e:	468c      	mov	ip, r1
    8e40:	2108      	movs	r1, #8
    8e42:	4688      	mov	r8, r1
    8e44:	2108      	movs	r1, #8
    8e46:	4689      	mov	r9, r1
    8e48:	44b9      	add	r9, r7
    8e4a:	44c8      	add	r8, r9
    8e4c:	44c4      	add	ip, r8
    8e4e:	4463      	add	r3, ip
    8e50:	681b      	ldr	r3, [r3, #0]
    8e52:	21cc      	movs	r1, #204	; 0xcc
    8e54:	0089      	lsls	r1, r1, #2
    8e56:	2020      	movs	r0, #32
    8e58:	4684      	mov	ip, r0
    8e5a:	2008      	movs	r0, #8
    8e5c:	4680      	mov	r8, r0
    8e5e:	2008      	movs	r0, #8
    8e60:	4681      	mov	r9, r0
    8e62:	44b9      	add	r9, r7
    8e64:	44c8      	add	r8, r9
    8e66:	44c4      	add	ip, r8
    8e68:	4461      	add	r1, ip
    8e6a:	4867      	ldr	r0, [pc, #412]	; (9008 <cal_write_report+0x1a00>)
    8e6c:	4d67      	ldr	r5, [pc, #412]	; (900c <cal_write_report+0x1a04>)
    8e6e:	47a8      	blx	r5
    8e70:	0003      	movs	r3, r0
    8e72:	7023      	strb	r3, [r4, #0]
	for (i=0;i<n_points;i++){
    8e74:	4b66      	ldr	r3, [pc, #408]	; (9010 <cal_write_report+0x1a08>)
    8e76:	2220      	movs	r2, #32
    8e78:	4694      	mov	ip, r2
    8e7a:	2208      	movs	r2, #8
    8e7c:	4690      	mov	r8, r2
    8e7e:	2208      	movs	r2, #8
    8e80:	4691      	mov	r9, r2
    8e82:	44b9      	add	r9, r7
    8e84:	44c8      	add	r8, r9
    8e86:	44c4      	add	ip, r8
    8e88:	4463      	add	r3, ip
    8e8a:	681b      	ldr	r3, [r3, #0]
    8e8c:	3301      	adds	r3, #1
    8e8e:	4a60      	ldr	r2, [pc, #384]	; (9010 <cal_write_report+0x1a08>)
    8e90:	2120      	movs	r1, #32
    8e92:	468c      	mov	ip, r1
    8e94:	2108      	movs	r1, #8
    8e96:	4688      	mov	r8, r1
    8e98:	2108      	movs	r1, #8
    8e9a:	4689      	mov	r9, r1
    8e9c:	44b9      	add	r9, r7
    8e9e:	44c8      	add	r8, r9
    8ea0:	44c4      	add	ip, r8
    8ea2:	4462      	add	r2, ip
    8ea4:	6013      	str	r3, [r2, #0]
    8ea6:	4b5b      	ldr	r3, [pc, #364]	; (9014 <cal_write_report+0x1a0c>)
    8ea8:	681b      	ldr	r3, [r3, #0]
    8eaa:	4a59      	ldr	r2, [pc, #356]	; (9010 <cal_write_report+0x1a08>)
    8eac:	2120      	movs	r1, #32
    8eae:	468c      	mov	ip, r1
    8eb0:	2108      	movs	r1, #8
    8eb2:	4688      	mov	r8, r1
    8eb4:	2108      	movs	r1, #8
    8eb6:	4689      	mov	r9, r1
    8eb8:	44b9      	add	r9, r7
    8eba:	44c8      	add	r8, r9
    8ebc:	44c4      	add	ip, r8
    8ebe:	4462      	add	r2, ip
    8ec0:	6812      	ldr	r2, [r2, #0]
    8ec2:	429a      	cmp	r2, r3
    8ec4:	d201      	bcs.n	8eca <cal_write_report+0x18c2>
    8ec6:	f7ff fb52 	bl	856e <cal_write_report+0xf66>
		
	}
	
	
	f_close(&file_cal_report);
    8eca:	4b4f      	ldr	r3, [pc, #316]	; (9008 <cal_write_report+0x1a00>)
    8ecc:	0018      	movs	r0, r3
    8ece:	4b52      	ldr	r3, [pc, #328]	; (9018 <cal_write_report+0x1a10>)
    8ed0:	4798      	blx	r3
	
	
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	//write raw data file
	sprintf(file_name, "20%02x%02x%02x_%02x%02x%02x_calibration_raw_data.bin", current_time.year, current_time.month, current_time.date,
    8ed2:	4b52      	ldr	r3, [pc, #328]	; (901c <cal_write_report+0x1a14>)
    8ed4:	799b      	ldrb	r3, [r3, #6]
    8ed6:	001e      	movs	r6, r3
    8ed8:	4b50      	ldr	r3, [pc, #320]	; (901c <cal_write_report+0x1a14>)
    8eda:	795b      	ldrb	r3, [r3, #5]
    8edc:	62bb      	str	r3, [r7, #40]	; 0x28
    8ede:	4b4f      	ldr	r3, [pc, #316]	; (901c <cal_write_report+0x1a14>)
    8ee0:	791b      	ldrb	r3, [r3, #4]
    8ee2:	001a      	movs	r2, r3
	current_time.hours, current_time.minutes, current_time.seconds);
    8ee4:	4b4d      	ldr	r3, [pc, #308]	; (901c <cal_write_report+0x1a14>)
    8ee6:	789b      	ldrb	r3, [r3, #2]
	sprintf(file_name, "20%02x%02x%02x_%02x%02x%02x_calibration_raw_data.bin", current_time.year, current_time.month, current_time.date,
    8ee8:	001c      	movs	r4, r3
	current_time.hours, current_time.minutes, current_time.seconds);
    8eea:	4b4c      	ldr	r3, [pc, #304]	; (901c <cal_write_report+0x1a14>)
    8eec:	785b      	ldrb	r3, [r3, #1]
	sprintf(file_name, "20%02x%02x%02x_%02x%02x%02x_calibration_raw_data.bin", current_time.year, current_time.month, current_time.date,
    8eee:	001d      	movs	r5, r3
	current_time.hours, current_time.minutes, current_time.seconds);
    8ef0:	4b4a      	ldr	r3, [pc, #296]	; (901c <cal_write_report+0x1a14>)
    8ef2:	781b      	ldrb	r3, [r3, #0]
	sprintf(file_name, "20%02x%02x%02x_%02x%02x%02x_calibration_raw_data.bin", current_time.year, current_time.month, current_time.date,
    8ef4:	4698      	mov	r8, r3
    8ef6:	494a      	ldr	r1, [pc, #296]	; (9020 <cal_write_report+0x1a18>)
    8ef8:	20b1      	movs	r0, #177	; 0xb1
    8efa:	00c0      	lsls	r0, r0, #3
    8efc:	2320      	movs	r3, #32
    8efe:	469c      	mov	ip, r3
    8f00:	2308      	movs	r3, #8
    8f02:	4699      	mov	r9, r3
    8f04:	2308      	movs	r3, #8
    8f06:	469a      	mov	sl, r3
    8f08:	44ba      	add	sl, r7
    8f0a:	44d1      	add	r9, sl
    8f0c:	44cc      	add	ip, r9
    8f0e:	4460      	add	r0, ip
    8f10:	4643      	mov	r3, r8
    8f12:	9303      	str	r3, [sp, #12]
    8f14:	9502      	str	r5, [sp, #8]
    8f16:	9401      	str	r4, [sp, #4]
    8f18:	9200      	str	r2, [sp, #0]
    8f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8f1c:	0032      	movs	r2, r6
    8f1e:	4c37      	ldr	r4, [pc, #220]	; (8ffc <cal_write_report+0x19f4>)
    8f20:	47a0      	blx	r4
	
	fdebug2 = f_open(&file_cal_raw, file_name, FA_CREATE_NEW | FA_READ | FA_WRITE);
    8f22:	4b40      	ldr	r3, [pc, #256]	; (9024 <cal_write_report+0x1a1c>)
    8f24:	2220      	movs	r2, #32
    8f26:	2108      	movs	r1, #8
    8f28:	468c      	mov	ip, r1
    8f2a:	2108      	movs	r1, #8
    8f2c:	4688      	mov	r8, r1
    8f2e:	44b8      	add	r8, r7
    8f30:	44c4      	add	ip, r8
    8f32:	4462      	add	r2, ip
    8f34:	18d4      	adds	r4, r2, r3
    8f36:	23b1      	movs	r3, #177	; 0xb1
    8f38:	00db      	lsls	r3, r3, #3
    8f3a:	2220      	movs	r2, #32
    8f3c:	2108      	movs	r1, #8
    8f3e:	468c      	mov	ip, r1
    8f40:	2108      	movs	r1, #8
    8f42:	4688      	mov	r8, r1
    8f44:	44b8      	add	r8, r7
    8f46:	44c4      	add	ip, r8
    8f48:	4462      	add	r2, ip
    8f4a:	18d1      	adds	r1, r2, r3
    8f4c:	4b36      	ldr	r3, [pc, #216]	; (9028 <cal_write_report+0x1a20>)
    8f4e:	2207      	movs	r2, #7
    8f50:	0018      	movs	r0, r3
    8f52:	4b36      	ldr	r3, [pc, #216]	; (902c <cal_write_report+0x1a24>)
    8f54:	4798      	blx	r3
    8f56:	0003      	movs	r3, r0
    8f58:	7023      	strb	r3, [r4, #0]
	if(fdebug2 != FR_OK){
    8f5a:	4b32      	ldr	r3, [pc, #200]	; (9024 <cal_write_report+0x1a1c>)
    8f5c:	2220      	movs	r2, #32
    8f5e:	4694      	mov	ip, r2
    8f60:	2208      	movs	r2, #8
    8f62:	4690      	mov	r8, r2
    8f64:	2208      	movs	r2, #8
    8f66:	4691      	mov	r9, r2
    8f68:	44b9      	add	r9, r7
    8f6a:	44c8      	add	r8, r9
    8f6c:	44c4      	add	ip, r8
    8f6e:	4463      	add	r3, ip
    8f70:	781b      	ldrb	r3, [r3, #0]
    8f72:	2b00      	cmp	r3, #0
    8f74:	d01d      	beq.n	8fb2 <cal_write_report+0x19aa>
		// Some other SD card error
		SD_status = fdebug2;
    8f76:	4b2e      	ldr	r3, [pc, #184]	; (9030 <cal_write_report+0x1a28>)
    8f78:	4a2a      	ldr	r2, [pc, #168]	; (9024 <cal_write_report+0x1a1c>)
    8f7a:	2120      	movs	r1, #32
    8f7c:	468c      	mov	ip, r1
    8f7e:	2108      	movs	r1, #8
    8f80:	4688      	mov	r8, r1
    8f82:	2108      	movs	r1, #8
    8f84:	4689      	mov	r9, r1
    8f86:	44b9      	add	r9, r7
    8f88:	44c8      	add	r8, r9
    8f8a:	44c4      	add	ip, r8
    8f8c:	4462      	add	r2, ip
    8f8e:	7812      	ldrb	r2, [r2, #0]
    8f90:	701a      	strb	r2, [r3, #0]
		config_spi(LCD);
    8f92:	2000      	movs	r0, #0
    8f94:	4b27      	ldr	r3, [pc, #156]	; (9034 <cal_write_report+0x1a2c>)
    8f96:	4798      	blx	r3
		return fdebug2;
    8f98:	4b22      	ldr	r3, [pc, #136]	; (9024 <cal_write_report+0x1a1c>)
    8f9a:	2220      	movs	r2, #32
    8f9c:	4694      	mov	ip, r2
    8f9e:	2208      	movs	r2, #8
    8fa0:	4690      	mov	r8, r2
    8fa2:	2208      	movs	r2, #8
    8fa4:	4691      	mov	r9, r2
    8fa6:	44b9      	add	r9, r7
    8fa8:	44c8      	add	r8, r9
    8faa:	44c4      	add	ip, r8
    8fac:	4463      	add	r3, ip
    8fae:	781b      	ldrb	r3, [r3, #0]
    8fb0:	e1c1      	b.n	9336 <cal_write_report+0x1d2e>
	}
	
	
	// Write File
	for (i=0;i<n_points;i++){
    8fb2:	2300      	movs	r3, #0
    8fb4:	4a16      	ldr	r2, [pc, #88]	; (9010 <cal_write_report+0x1a08>)
    8fb6:	2120      	movs	r1, #32
    8fb8:	468c      	mov	ip, r1
    8fba:	2108      	movs	r1, #8
    8fbc:	4688      	mov	r8, r1
    8fbe:	2108      	movs	r1, #8
    8fc0:	4689      	mov	r9, r1
    8fc2:	44b9      	add	r9, r7
    8fc4:	44c8      	add	r8, r9
    8fc6:	44c4      	add	ip, r8
    8fc8:	4462      	add	r2, ip
    8fca:	6013      	str	r3, [r2, #0]
    8fcc:	e192      	b.n	92f4 <cal_write_report+0x1cec>
		for (k=0;k<3;k++){
    8fce:	2300      	movs	r3, #0
    8fd0:	4a19      	ldr	r2, [pc, #100]	; (9038 <cal_write_report+0x1a30>)
    8fd2:	2120      	movs	r1, #32
    8fd4:	468c      	mov	ip, r1
    8fd6:	2108      	movs	r1, #8
    8fd8:	4688      	mov	r8, r1
    8fda:	2108      	movs	r1, #8
    8fdc:	4689      	mov	r9, r1
    8fde:	44b9      	add	r9, r7
    8fe0:	44c8      	add	r8, r9
    8fe2:	44c4      	add	ip, r8
    8fe4:	4462      	add	r2, ip
    8fe6:	6013      	str	r3, [r2, #0]
    8fe8:	e135      	b.n	9256 <cal_write_report+0x1c4e>
    8fea:	46c0      	nop			; (mov r8, r8)
    8fec:	00020d99 	.word	0x00020d99
    8ff0:	00000694 	.word	0x00000694
    8ff4:	0000068c 	.word	0x0000068c
    8ff8:	000257fc 	.word	0x000257fc
    8ffc:	000210bd 	.word	0x000210bd
    9000:	0002115d 	.word	0x0002115d
    9004:	000006b3 	.word	0x000006b3
    9008:	200025d0 	.word	0x200025d0
    900c:	00011769 	.word	0x00011769
    9010:	000006bc 	.word	0x000006bc
    9014:	200027f8 	.word	0x200027f8
    9018:	00011b99 	.word	0x00011b99
    901c:	2000103c 	.word	0x2000103c
    9020:	00025854 	.word	0x00025854
    9024:	000006a5 	.word	0x000006a5
    9028:	20003800 	.word	0x20003800
    902c:	000111cd 	.word	0x000111cd
    9030:	20003b79 	.word	0x20003b79
    9034:	0000df9d 	.word	0x0000df9d
    9038:	000006b4 	.word	0x000006b4
			raw_data_entry[k] = a1raw[i][k];
    903c:	49c3      	ldr	r1, [pc, #780]	; (934c <cal_write_report+0x1d44>)
    903e:	4bc4      	ldr	r3, [pc, #784]	; (9350 <cal_write_report+0x1d48>)
    9040:	2220      	movs	r2, #32
    9042:	4694      	mov	ip, r2
    9044:	2208      	movs	r2, #8
    9046:	4690      	mov	r8, r2
    9048:	2208      	movs	r2, #8
    904a:	4691      	mov	r9, r2
    904c:	44b9      	add	r9, r7
    904e:	44c8      	add	r8, r9
    9050:	44c4      	add	ip, r8
    9052:	4463      	add	r3, ip
    9054:	681a      	ldr	r2, [r3, #0]
    9056:	0013      	movs	r3, r2
    9058:	005b      	lsls	r3, r3, #1
    905a:	189b      	adds	r3, r3, r2
    905c:	4abd      	ldr	r2, [pc, #756]	; (9354 <cal_write_report+0x1d4c>)
    905e:	2020      	movs	r0, #32
    9060:	4684      	mov	ip, r0
    9062:	2008      	movs	r0, #8
    9064:	4680      	mov	r8, r0
    9066:	2008      	movs	r0, #8
    9068:	4681      	mov	r9, r0
    906a:	44b9      	add	r9, r7
    906c:	44c8      	add	r8, r9
    906e:	44c4      	add	ip, r8
    9070:	4462      	add	r2, ip
    9072:	6812      	ldr	r2, [r2, #0]
    9074:	189b      	adds	r3, r3, r2
    9076:	009b      	lsls	r3, r3, #2
    9078:	5859      	ldr	r1, [r3, r1]
    907a:	4bb7      	ldr	r3, [pc, #732]	; (9358 <cal_write_report+0x1d50>)
    907c:	22d8      	movs	r2, #216	; 0xd8
    907e:	00d2      	lsls	r2, r2, #3
    9080:	4694      	mov	ip, r2
    9082:	2220      	movs	r2, #32
    9084:	4690      	mov	r8, r2
    9086:	2208      	movs	r2, #8
    9088:	4691      	mov	r9, r2
    908a:	2208      	movs	r2, #8
    908c:	4692      	mov	sl, r2
    908e:	44ba      	add	sl, r7
    9090:	44d1      	add	r9, sl
    9092:	44c8      	add	r8, r9
    9094:	44c4      	add	ip, r8
    9096:	4463      	add	r3, ip
    9098:	4aae      	ldr	r2, [pc, #696]	; (9354 <cal_write_report+0x1d4c>)
    909a:	2020      	movs	r0, #32
    909c:	4684      	mov	ip, r0
    909e:	2008      	movs	r0, #8
    90a0:	4680      	mov	r8, r0
    90a2:	2008      	movs	r0, #8
    90a4:	4681      	mov	r9, r0
    90a6:	44b9      	add	r9, r7
    90a8:	44c8      	add	r8, r9
    90aa:	44c4      	add	ip, r8
    90ac:	4462      	add	r2, ip
    90ae:	6812      	ldr	r2, [r2, #0]
    90b0:	0092      	lsls	r2, r2, #2
    90b2:	50d1      	str	r1, [r2, r3]
			raw_data_entry[k+3] = a2raw[i][k];
    90b4:	4ba7      	ldr	r3, [pc, #668]	; (9354 <cal_write_report+0x1d4c>)
    90b6:	2220      	movs	r2, #32
    90b8:	4694      	mov	ip, r2
    90ba:	2208      	movs	r2, #8
    90bc:	4690      	mov	r8, r2
    90be:	2208      	movs	r2, #8
    90c0:	4691      	mov	r9, r2
    90c2:	44b9      	add	r9, r7
    90c4:	44c8      	add	r8, r9
    90c6:	44c4      	add	ip, r8
    90c8:	4463      	add	r3, ip
    90ca:	681b      	ldr	r3, [r3, #0]
    90cc:	1cd8      	adds	r0, r3, #3
    90ce:	49a3      	ldr	r1, [pc, #652]	; (935c <cal_write_report+0x1d54>)
    90d0:	4b9f      	ldr	r3, [pc, #636]	; (9350 <cal_write_report+0x1d48>)
    90d2:	2220      	movs	r2, #32
    90d4:	4694      	mov	ip, r2
    90d6:	2208      	movs	r2, #8
    90d8:	4690      	mov	r8, r2
    90da:	2208      	movs	r2, #8
    90dc:	4691      	mov	r9, r2
    90de:	44b9      	add	r9, r7
    90e0:	44c8      	add	r8, r9
    90e2:	44c4      	add	ip, r8
    90e4:	4463      	add	r3, ip
    90e6:	681a      	ldr	r2, [r3, #0]
    90e8:	0013      	movs	r3, r2
    90ea:	005b      	lsls	r3, r3, #1
    90ec:	189b      	adds	r3, r3, r2
    90ee:	4a99      	ldr	r2, [pc, #612]	; (9354 <cal_write_report+0x1d4c>)
    90f0:	2420      	movs	r4, #32
    90f2:	46a4      	mov	ip, r4
    90f4:	2408      	movs	r4, #8
    90f6:	46a0      	mov	r8, r4
    90f8:	2408      	movs	r4, #8
    90fa:	46a1      	mov	r9, r4
    90fc:	44b9      	add	r9, r7
    90fe:	44c8      	add	r8, r9
    9100:	44c4      	add	ip, r8
    9102:	4462      	add	r2, ip
    9104:	6812      	ldr	r2, [r2, #0]
    9106:	189b      	adds	r3, r3, r2
    9108:	009b      	lsls	r3, r3, #2
    910a:	5859      	ldr	r1, [r3, r1]
    910c:	4b92      	ldr	r3, [pc, #584]	; (9358 <cal_write_report+0x1d50>)
    910e:	22d8      	movs	r2, #216	; 0xd8
    9110:	00d2      	lsls	r2, r2, #3
    9112:	4694      	mov	ip, r2
    9114:	2220      	movs	r2, #32
    9116:	4690      	mov	r8, r2
    9118:	2208      	movs	r2, #8
    911a:	4691      	mov	r9, r2
    911c:	2208      	movs	r2, #8
    911e:	4692      	mov	sl, r2
    9120:	44ba      	add	sl, r7
    9122:	44d1      	add	r9, sl
    9124:	44c8      	add	r8, r9
    9126:	44c4      	add	ip, r8
    9128:	4463      	add	r3, ip
    912a:	0082      	lsls	r2, r0, #2
    912c:	50d1      	str	r1, [r2, r3]
			raw_data_entry[k+6] = c1raw[i][k];
    912e:	4b89      	ldr	r3, [pc, #548]	; (9354 <cal_write_report+0x1d4c>)
    9130:	2220      	movs	r2, #32
    9132:	4694      	mov	ip, r2
    9134:	2208      	movs	r2, #8
    9136:	4690      	mov	r8, r2
    9138:	2208      	movs	r2, #8
    913a:	4691      	mov	r9, r2
    913c:	44b9      	add	r9, r7
    913e:	44c8      	add	r8, r9
    9140:	44c4      	add	ip, r8
    9142:	4463      	add	r3, ip
    9144:	681b      	ldr	r3, [r3, #0]
    9146:	1d98      	adds	r0, r3, #6
    9148:	4985      	ldr	r1, [pc, #532]	; (9360 <cal_write_report+0x1d58>)
    914a:	4b81      	ldr	r3, [pc, #516]	; (9350 <cal_write_report+0x1d48>)
    914c:	2220      	movs	r2, #32
    914e:	4694      	mov	ip, r2
    9150:	2208      	movs	r2, #8
    9152:	4690      	mov	r8, r2
    9154:	2208      	movs	r2, #8
    9156:	4691      	mov	r9, r2
    9158:	44b9      	add	r9, r7
    915a:	44c8      	add	r8, r9
    915c:	44c4      	add	ip, r8
    915e:	4463      	add	r3, ip
    9160:	681a      	ldr	r2, [r3, #0]
    9162:	0013      	movs	r3, r2
    9164:	005b      	lsls	r3, r3, #1
    9166:	189b      	adds	r3, r3, r2
    9168:	4a7a      	ldr	r2, [pc, #488]	; (9354 <cal_write_report+0x1d4c>)
    916a:	2420      	movs	r4, #32
    916c:	46a4      	mov	ip, r4
    916e:	2408      	movs	r4, #8
    9170:	46a0      	mov	r8, r4
    9172:	2408      	movs	r4, #8
    9174:	46a1      	mov	r9, r4
    9176:	44b9      	add	r9, r7
    9178:	44c8      	add	r8, r9
    917a:	44c4      	add	ip, r8
    917c:	4462      	add	r2, ip
    917e:	6812      	ldr	r2, [r2, #0]
    9180:	189b      	adds	r3, r3, r2
    9182:	009b      	lsls	r3, r3, #2
    9184:	5859      	ldr	r1, [r3, r1]
    9186:	4b74      	ldr	r3, [pc, #464]	; (9358 <cal_write_report+0x1d50>)
    9188:	22d8      	movs	r2, #216	; 0xd8
    918a:	00d2      	lsls	r2, r2, #3
    918c:	4694      	mov	ip, r2
    918e:	2220      	movs	r2, #32
    9190:	4690      	mov	r8, r2
    9192:	2208      	movs	r2, #8
    9194:	4691      	mov	r9, r2
    9196:	2208      	movs	r2, #8
    9198:	4692      	mov	sl, r2
    919a:	44ba      	add	sl, r7
    919c:	44d1      	add	r9, sl
    919e:	44c8      	add	r8, r9
    91a0:	44c4      	add	ip, r8
    91a2:	4463      	add	r3, ip
    91a4:	0082      	lsls	r2, r0, #2
    91a6:	50d1      	str	r1, [r2, r3]
			raw_data_entry[k+9] = c2raw[i][k];
    91a8:	4b6a      	ldr	r3, [pc, #424]	; (9354 <cal_write_report+0x1d4c>)
    91aa:	2220      	movs	r2, #32
    91ac:	4694      	mov	ip, r2
    91ae:	2208      	movs	r2, #8
    91b0:	4690      	mov	r8, r2
    91b2:	2208      	movs	r2, #8
    91b4:	4691      	mov	r9, r2
    91b6:	44b9      	add	r9, r7
    91b8:	44c8      	add	r8, r9
    91ba:	44c4      	add	ip, r8
    91bc:	4463      	add	r3, ip
    91be:	681b      	ldr	r3, [r3, #0]
    91c0:	3309      	adds	r3, #9
    91c2:	0018      	movs	r0, r3
    91c4:	4967      	ldr	r1, [pc, #412]	; (9364 <cal_write_report+0x1d5c>)
    91c6:	4b62      	ldr	r3, [pc, #392]	; (9350 <cal_write_report+0x1d48>)
    91c8:	2220      	movs	r2, #32
    91ca:	4694      	mov	ip, r2
    91cc:	2208      	movs	r2, #8
    91ce:	4690      	mov	r8, r2
    91d0:	2208      	movs	r2, #8
    91d2:	4691      	mov	r9, r2
    91d4:	44b9      	add	r9, r7
    91d6:	44c8      	add	r8, r9
    91d8:	44c4      	add	ip, r8
    91da:	4463      	add	r3, ip
    91dc:	681a      	ldr	r2, [r3, #0]
    91de:	0013      	movs	r3, r2
    91e0:	005b      	lsls	r3, r3, #1
    91e2:	189b      	adds	r3, r3, r2
    91e4:	4a5b      	ldr	r2, [pc, #364]	; (9354 <cal_write_report+0x1d4c>)
    91e6:	2420      	movs	r4, #32
    91e8:	46a4      	mov	ip, r4
    91ea:	2408      	movs	r4, #8
    91ec:	46a0      	mov	r8, r4
    91ee:	2408      	movs	r4, #8
    91f0:	46a1      	mov	r9, r4
    91f2:	44b9      	add	r9, r7
    91f4:	44c8      	add	r8, r9
    91f6:	44c4      	add	ip, r8
    91f8:	4462      	add	r2, ip
    91fa:	6812      	ldr	r2, [r2, #0]
    91fc:	189b      	adds	r3, r3, r2
    91fe:	009b      	lsls	r3, r3, #2
    9200:	5859      	ldr	r1, [r3, r1]
    9202:	4b55      	ldr	r3, [pc, #340]	; (9358 <cal_write_report+0x1d50>)
    9204:	22d8      	movs	r2, #216	; 0xd8
    9206:	00d2      	lsls	r2, r2, #3
    9208:	4694      	mov	ip, r2
    920a:	2220      	movs	r2, #32
    920c:	4690      	mov	r8, r2
    920e:	2208      	movs	r2, #8
    9210:	4691      	mov	r9, r2
    9212:	2208      	movs	r2, #8
    9214:	4692      	mov	sl, r2
    9216:	44ba      	add	sl, r7
    9218:	44d1      	add	r9, sl
    921a:	44c8      	add	r8, r9
    921c:	44c4      	add	ip, r8
    921e:	4463      	add	r3, ip
    9220:	0082      	lsls	r2, r0, #2
    9222:	50d1      	str	r1, [r2, r3]
		for (k=0;k<3;k++){
    9224:	4b4b      	ldr	r3, [pc, #300]	; (9354 <cal_write_report+0x1d4c>)
    9226:	2220      	movs	r2, #32
    9228:	4694      	mov	ip, r2
    922a:	2208      	movs	r2, #8
    922c:	4690      	mov	r8, r2
    922e:	2208      	movs	r2, #8
    9230:	4691      	mov	r9, r2
    9232:	44b9      	add	r9, r7
    9234:	44c8      	add	r8, r9
    9236:	44c4      	add	ip, r8
    9238:	4463      	add	r3, ip
    923a:	681b      	ldr	r3, [r3, #0]
    923c:	3301      	adds	r3, #1
    923e:	4a45      	ldr	r2, [pc, #276]	; (9354 <cal_write_report+0x1d4c>)
    9240:	2120      	movs	r1, #32
    9242:	468c      	mov	ip, r1
    9244:	2108      	movs	r1, #8
    9246:	4688      	mov	r8, r1
    9248:	2108      	movs	r1, #8
    924a:	4689      	mov	r9, r1
    924c:	44b9      	add	r9, r7
    924e:	44c8      	add	r8, r9
    9250:	44c4      	add	ip, r8
    9252:	4462      	add	r2, ip
    9254:	6013      	str	r3, [r2, #0]
    9256:	4b3f      	ldr	r3, [pc, #252]	; (9354 <cal_write_report+0x1d4c>)
    9258:	2220      	movs	r2, #32
    925a:	4694      	mov	ip, r2
    925c:	2208      	movs	r2, #8
    925e:	4690      	mov	r8, r2
    9260:	2208      	movs	r2, #8
    9262:	4691      	mov	r9, r2
    9264:	44b9      	add	r9, r7
    9266:	44c8      	add	r8, r9
    9268:	44c4      	add	ip, r8
    926a:	4463      	add	r3, ip
    926c:	681b      	ldr	r3, [r3, #0]
    926e:	2b02      	cmp	r3, #2
    9270:	d800      	bhi.n	9274 <cal_write_report+0x1c6c>
    9272:	e6e3      	b.n	903c <cal_write_report+0x1a34>
			
		}
		//fdebug2 = f_lseek(&file_cal, f_size(&file_cal));
		fdebug3 = f_write(&file_cal_raw, raw_data_entry, sizeof(raw_data_entry), pbw);
    9274:	4b3c      	ldr	r3, [pc, #240]	; (9368 <cal_write_report+0x1d60>)
    9276:	2220      	movs	r2, #32
    9278:	2108      	movs	r1, #8
    927a:	468c      	mov	ip, r1
    927c:	2108      	movs	r1, #8
    927e:	4688      	mov	r8, r1
    9280:	44b8      	add	r8, r7
    9282:	44c4      	add	ip, r8
    9284:	4462      	add	r2, ip
    9286:	18d4      	adds	r4, r2, r3
    9288:	23d5      	movs	r3, #213	; 0xd5
    928a:	00db      	lsls	r3, r3, #3
    928c:	2220      	movs	r2, #32
    928e:	4694      	mov	ip, r2
    9290:	2208      	movs	r2, #8
    9292:	4690      	mov	r8, r2
    9294:	2208      	movs	r2, #8
    9296:	4691      	mov	r9, r2
    9298:	44b9      	add	r9, r7
    929a:	44c8      	add	r8, r9
    929c:	44c4      	add	ip, r8
    929e:	4463      	add	r3, ip
    92a0:	681b      	ldr	r3, [r3, #0]
    92a2:	22a8      	movs	r2, #168	; 0xa8
    92a4:	2120      	movs	r1, #32
    92a6:	2008      	movs	r0, #8
    92a8:	4684      	mov	ip, r0
    92aa:	2008      	movs	r0, #8
    92ac:	4680      	mov	r8, r0
    92ae:	44b8      	add	r8, r7
    92b0:	44c4      	add	ip, r8
    92b2:	4461      	add	r1, ip
    92b4:	1889      	adds	r1, r1, r2
    92b6:	482d      	ldr	r0, [pc, #180]	; (936c <cal_write_report+0x1d64>)
    92b8:	2230      	movs	r2, #48	; 0x30
    92ba:	4d2d      	ldr	r5, [pc, #180]	; (9370 <cal_write_report+0x1d68>)
    92bc:	47a8      	blx	r5
    92be:	0003      	movs	r3, r0
    92c0:	7023      	strb	r3, [r4, #0]
	for (i=0;i<n_points;i++){
    92c2:	4b23      	ldr	r3, [pc, #140]	; (9350 <cal_write_report+0x1d48>)
    92c4:	2220      	movs	r2, #32
    92c6:	4694      	mov	ip, r2
    92c8:	2208      	movs	r2, #8
    92ca:	4690      	mov	r8, r2
    92cc:	2208      	movs	r2, #8
    92ce:	4691      	mov	r9, r2
    92d0:	44b9      	add	r9, r7
    92d2:	44c8      	add	r8, r9
    92d4:	44c4      	add	ip, r8
    92d6:	4463      	add	r3, ip
    92d8:	681b      	ldr	r3, [r3, #0]
    92da:	3301      	adds	r3, #1
    92dc:	4a1c      	ldr	r2, [pc, #112]	; (9350 <cal_write_report+0x1d48>)
    92de:	2120      	movs	r1, #32
    92e0:	468c      	mov	ip, r1
    92e2:	2108      	movs	r1, #8
    92e4:	4688      	mov	r8, r1
    92e6:	2108      	movs	r1, #8
    92e8:	4689      	mov	r9, r1
    92ea:	44b9      	add	r9, r7
    92ec:	44c8      	add	r8, r9
    92ee:	44c4      	add	ip, r8
    92f0:	4462      	add	r2, ip
    92f2:	6013      	str	r3, [r2, #0]
    92f4:	4b1f      	ldr	r3, [pc, #124]	; (9374 <cal_write_report+0x1d6c>)
    92f6:	681b      	ldr	r3, [r3, #0]
    92f8:	4a15      	ldr	r2, [pc, #84]	; (9350 <cal_write_report+0x1d48>)
    92fa:	2120      	movs	r1, #32
    92fc:	468c      	mov	ip, r1
    92fe:	2108      	movs	r1, #8
    9300:	4688      	mov	r8, r1
    9302:	2108      	movs	r1, #8
    9304:	4689      	mov	r9, r1
    9306:	44b9      	add	r9, r7
    9308:	44c8      	add	r8, r9
    930a:	44c4      	add	ip, r8
    930c:	4462      	add	r2, ip
    930e:	6812      	ldr	r2, [r2, #0]
    9310:	429a      	cmp	r2, r3
    9312:	d200      	bcs.n	9316 <cal_write_report+0x1d0e>
    9314:	e65b      	b.n	8fce <cal_write_report+0x19c6>
	}
	
	//fdebug3 = f_write(&file2, write_string_full, strlen(write_string_full), bw);
	f_close(&file_cal_raw);
    9316:	4b15      	ldr	r3, [pc, #84]	; (936c <cal_write_report+0x1d64>)
    9318:	0018      	movs	r0, r3
    931a:	4b17      	ldr	r3, [pc, #92]	; (9378 <cal_write_report+0x1d70>)
    931c:	4798      	blx	r3
	
	
	return fdebug3;
    931e:	4b12      	ldr	r3, [pc, #72]	; (9368 <cal_write_report+0x1d60>)
    9320:	2220      	movs	r2, #32
    9322:	4694      	mov	ip, r2
    9324:	2208      	movs	r2, #8
    9326:	4690      	mov	r8, r2
    9328:	2208      	movs	r2, #8
    932a:	4691      	mov	r9, r2
    932c:	44b9      	add	r9, r7
    932e:	44c8      	add	r8, r9
    9330:	44c4      	add	ip, r8
    9332:	4463      	add	r3, ip
    9334:	781b      	ldrb	r3, [r3, #0]
	
}
    9336:	0018      	movs	r0, r3
    9338:	46bd      	mov	sp, r7
    933a:	23de      	movs	r3, #222	; 0xde
    933c:	00db      	lsls	r3, r3, #3
    933e:	449d      	add	sp, r3
    9340:	bc1c      	pop	{r2, r3, r4}
    9342:	4690      	mov	r8, r2
    9344:	4699      	mov	r9, r3
    9346:	46a2      	mov	sl, r4
    9348:	bdf0      	pop	{r4, r5, r6, r7, pc}
    934a:	46c0      	nop			; (mov r8, r8)
    934c:	200049dc 	.word	0x200049dc
    9350:	000006bc 	.word	0x000006bc
    9354:	000006b4 	.word	0x000006b4
    9358:	fffff9e8 	.word	0xfffff9e8
    935c:	20003b90 	.word	0x20003b90
    9360:	20001a2c 	.word	0x20001a2c
    9364:	20001e50 	.word	0x20001e50
    9368:	000006b3 	.word	0x000006b3
    936c:	20003800 	.word	0x20003800
    9370:	00011769 	.word	0x00011769
    9374:	200027f8 	.word	0x200027f8
    9378:	00011b99 	.word	0x00011b99

0000937c <cal_evaluate>:





void cal_evaluate(void){
    937c:	b5f0      	push	{r4, r5, r6, r7, lr}
    937e:	4cc6      	ldr	r4, [pc, #792]	; (9698 <cal_evaluate+0x31c>)
    9380:	44a5      	add	sp, r4
    9382:	af00      	add	r7, sp, #0
	float inc_avg, azm_avg;
	float inc_err_array[nbuf];
	float azm_err_array[nbuf];
	
	//  Fill Out data for report structure
	get_time();//  Get current time
    9384:	4bc5      	ldr	r3, [pc, #788]	; (969c <cal_evaluate+0x320>)
    9386:	4798      	blx	r3
	cal_report_azm_inc.timestamp = gen_posix_time(&current_time);
    9388:	4bc5      	ldr	r3, [pc, #788]	; (96a0 <cal_evaluate+0x324>)
    938a:	0018      	movs	r0, r3
    938c:	4bc5      	ldr	r3, [pc, #788]	; (96a4 <cal_evaluate+0x328>)
    938e:	4798      	blx	r3
    9390:	0002      	movs	r2, r0
    9392:	4bc5      	ldr	r3, [pc, #788]	; (96a8 <cal_evaluate+0x32c>)
    9394:	60da      	str	r2, [r3, #12]
	cal_report_azm_inc.software_version = software_version;
    9396:	4bc5      	ldr	r3, [pc, #788]	; (96ac <cal_evaluate+0x330>)
    9398:	681a      	ldr	r2, [r3, #0]
    939a:	4bc3      	ldr	r3, [pc, #780]	; (96a8 <cal_evaluate+0x32c>)
    939c:	601a      	str	r2, [r3, #0]
	cal_report_azm_inc.points = n_points;
    939e:	4bc4      	ldr	r3, [pc, #784]	; (96b0 <cal_evaluate+0x334>)
    93a0:	681a      	ldr	r2, [r3, #0]
    93a2:	4bc1      	ldr	r3, [pc, #772]	; (96a8 <cal_evaluate+0x32c>)
    93a4:	609a      	str	r2, [r3, #8]
	cal_report_azm_inc.groups = n_groups;
    93a6:	4bc3      	ldr	r3, [pc, #780]	; (96b4 <cal_evaluate+0x338>)
    93a8:	681a      	ldr	r2, [r3, #0]
    93aa:	4bbf      	ldr	r3, [pc, #764]	; (96a8 <cal_evaluate+0x32c>)
    93ac:	605a      	str	r2, [r3, #4]
	memcpy(&cal_report_azm_inc.time_struct,&current_time,sizeof(current_time));
    93ae:	4bbe      	ldr	r3, [pc, #760]	; (96a8 <cal_evaluate+0x32c>)
    93b0:	4abb      	ldr	r2, [pc, #748]	; (96a0 <cal_evaluate+0x324>)
    93b2:	3340      	adds	r3, #64	; 0x40
    93b4:	ca13      	ldmia	r2!, {r0, r1, r4}
    93b6:	c313      	stmia	r3!, {r0, r1, r4}
    93b8:	ca03      	ldmia	r2!, {r0, r1}
    93ba:	c303      	stmia	r3!, {r0, r1}

	//  Calculate azimuth, incination, and roll for all data
	for (p=0;p<n_points;p++){
    93bc:	2300      	movs	r3, #0
    93be:	22d8      	movs	r2, #216	; 0xd8
    93c0:	0092      	lsls	r2, r2, #2
    93c2:	18ba      	adds	r2, r7, r2
    93c4:	6013      	str	r3, [r2, #0]
    93c6:	e0ac      	b.n	9522 <cal_evaluate+0x1a6>
		for (i=0;i<3;i++){
    93c8:	2300      	movs	r3, #0
    93ca:	22d9      	movs	r2, #217	; 0xd9
    93cc:	0092      	lsls	r2, r2, #2
    93ce:	18ba      	adds	r2, r7, r2
    93d0:	6013      	str	r3, [r2, #0]
    93d2:	e070      	b.n	94b6 <cal_evaluate+0x13a>
			temp_meas.a1xyz[i] = a1cal[p][i];
    93d4:	49b8      	ldr	r1, [pc, #736]	; (96b8 <cal_evaluate+0x33c>)
    93d6:	23d8      	movs	r3, #216	; 0xd8
    93d8:	009b      	lsls	r3, r3, #2
    93da:	18fb      	adds	r3, r7, r3
    93dc:	681a      	ldr	r2, [r3, #0]
    93de:	0013      	movs	r3, r2
    93e0:	005b      	lsls	r3, r3, #1
    93e2:	189b      	adds	r3, r3, r2
    93e4:	22d9      	movs	r2, #217	; 0xd9
    93e6:	0092      	lsls	r2, r2, #2
    93e8:	18ba      	adds	r2, r7, r2
    93ea:	6812      	ldr	r2, [r2, #0]
    93ec:	189b      	adds	r3, r3, r2
    93ee:	009b      	lsls	r3, r3, #2
    93f0:	5859      	ldr	r1, [r3, r1]
    93f2:	23a9      	movs	r3, #169	; 0xa9
    93f4:	009b      	lsls	r3, r3, #2
    93f6:	18fb      	adds	r3, r7, r3
    93f8:	22d9      	movs	r2, #217	; 0xd9
    93fa:	0092      	lsls	r2, r2, #2
    93fc:	18ba      	adds	r2, r7, r2
    93fe:	6812      	ldr	r2, [r2, #0]
    9400:	3208      	adds	r2, #8
    9402:	0092      	lsls	r2, r2, #2
    9404:	50d1      	str	r1, [r2, r3]
			temp_meas.a2xyz[i] = a2cal[p][i];
    9406:	49ad      	ldr	r1, [pc, #692]	; (96bc <cal_evaluate+0x340>)
    9408:	23d8      	movs	r3, #216	; 0xd8
    940a:	009b      	lsls	r3, r3, #2
    940c:	18fb      	adds	r3, r7, r3
    940e:	681a      	ldr	r2, [r3, #0]
    9410:	0013      	movs	r3, r2
    9412:	005b      	lsls	r3, r3, #1
    9414:	189b      	adds	r3, r3, r2
    9416:	22d9      	movs	r2, #217	; 0xd9
    9418:	0092      	lsls	r2, r2, #2
    941a:	18ba      	adds	r2, r7, r2
    941c:	6812      	ldr	r2, [r2, #0]
    941e:	189b      	adds	r3, r3, r2
    9420:	009b      	lsls	r3, r3, #2
    9422:	585a      	ldr	r2, [r3, r1]
    9424:	23a9      	movs	r3, #169	; 0xa9
    9426:	009b      	lsls	r3, r3, #2
    9428:	18f9      	adds	r1, r7, r3
    942a:	23d9      	movs	r3, #217	; 0xd9
    942c:	009b      	lsls	r3, r3, #2
    942e:	18fb      	adds	r3, r7, r3
    9430:	681b      	ldr	r3, [r3, #0]
    9432:	330a      	adds	r3, #10
    9434:	009b      	lsls	r3, r3, #2
    9436:	18cb      	adds	r3, r1, r3
    9438:	3304      	adds	r3, #4
    943a:	601a      	str	r2, [r3, #0]
			temp_meas.c1xyz[i] = c1cal[p][i];
    943c:	49a0      	ldr	r1, [pc, #640]	; (96c0 <cal_evaluate+0x344>)
    943e:	23d8      	movs	r3, #216	; 0xd8
    9440:	009b      	lsls	r3, r3, #2
    9442:	18fb      	adds	r3, r7, r3
    9444:	681a      	ldr	r2, [r3, #0]
    9446:	0013      	movs	r3, r2
    9448:	005b      	lsls	r3, r3, #1
    944a:	189b      	adds	r3, r3, r2
    944c:	22d9      	movs	r2, #217	; 0xd9
    944e:	0092      	lsls	r2, r2, #2
    9450:	18ba      	adds	r2, r7, r2
    9452:	6812      	ldr	r2, [r2, #0]
    9454:	189b      	adds	r3, r3, r2
    9456:	009b      	lsls	r3, r3, #2
    9458:	5859      	ldr	r1, [r3, r1]
    945a:	23a9      	movs	r3, #169	; 0xa9
    945c:	009b      	lsls	r3, r3, #2
    945e:	18fb      	adds	r3, r7, r3
    9460:	22d9      	movs	r2, #217	; 0xd9
    9462:	0092      	lsls	r2, r2, #2
    9464:	18ba      	adds	r2, r7, r2
    9466:	6812      	ldr	r2, [r2, #0]
    9468:	320e      	adds	r2, #14
    946a:	0092      	lsls	r2, r2, #2
    946c:	50d1      	str	r1, [r2, r3]
			temp_meas.c2xyz[i] = c2cal[p][i];
    946e:	4995      	ldr	r1, [pc, #596]	; (96c4 <cal_evaluate+0x348>)
    9470:	23d8      	movs	r3, #216	; 0xd8
    9472:	009b      	lsls	r3, r3, #2
    9474:	18fb      	adds	r3, r7, r3
    9476:	681a      	ldr	r2, [r3, #0]
    9478:	0013      	movs	r3, r2
    947a:	005b      	lsls	r3, r3, #1
    947c:	189b      	adds	r3, r3, r2
    947e:	22d9      	movs	r2, #217	; 0xd9
    9480:	0092      	lsls	r2, r2, #2
    9482:	18ba      	adds	r2, r7, r2
    9484:	6812      	ldr	r2, [r2, #0]
    9486:	189b      	adds	r3, r3, r2
    9488:	009b      	lsls	r3, r3, #2
    948a:	585a      	ldr	r2, [r3, r1]
    948c:	23a9      	movs	r3, #169	; 0xa9
    948e:	009b      	lsls	r3, r3, #2
    9490:	18f9      	adds	r1, r7, r3
    9492:	23d9      	movs	r3, #217	; 0xd9
    9494:	009b      	lsls	r3, r3, #2
    9496:	18fb      	adds	r3, r7, r3
    9498:	681b      	ldr	r3, [r3, #0]
    949a:	3310      	adds	r3, #16
    949c:	009b      	lsls	r3, r3, #2
    949e:	18cb      	adds	r3, r1, r3
    94a0:	3304      	adds	r3, #4
    94a2:	601a      	str	r2, [r3, #0]
		for (i=0;i<3;i++){
    94a4:	23d9      	movs	r3, #217	; 0xd9
    94a6:	009b      	lsls	r3, r3, #2
    94a8:	18fb      	adds	r3, r7, r3
    94aa:	681b      	ldr	r3, [r3, #0]
    94ac:	3301      	adds	r3, #1
    94ae:	22d9      	movs	r2, #217	; 0xd9
    94b0:	0092      	lsls	r2, r2, #2
    94b2:	18ba      	adds	r2, r7, r2
    94b4:	6013      	str	r3, [r2, #0]
    94b6:	23d9      	movs	r3, #217	; 0xd9
    94b8:	009b      	lsls	r3, r3, #2
    94ba:	18fb      	adds	r3, r7, r3
    94bc:	681b      	ldr	r3, [r3, #0]
    94be:	2b02      	cmp	r3, #2
    94c0:	d988      	bls.n	93d4 <cal_evaluate+0x58>
		}
		calc_orientation(&temp_meas);
    94c2:	23a9      	movs	r3, #169	; 0xa9
    94c4:	009b      	lsls	r3, r3, #2
    94c6:	18fb      	adds	r3, r7, r3
    94c8:	0018      	movs	r0, r3
    94ca:	4b7f      	ldr	r3, [pc, #508]	; (96c8 <cal_evaluate+0x34c>)
    94cc:	4798      	blx	r3
		azimuth[p] = temp_meas.azimuth;
    94ce:	23a9      	movs	r3, #169	; 0xa9
    94d0:	009b      	lsls	r3, r3, #2
    94d2:	18fb      	adds	r3, r7, r3
    94d4:	68d9      	ldr	r1, [r3, #12]
    94d6:	4b7d      	ldr	r3, [pc, #500]	; (96cc <cal_evaluate+0x350>)
    94d8:	22d8      	movs	r2, #216	; 0xd8
    94da:	0092      	lsls	r2, r2, #2
    94dc:	18ba      	adds	r2, r7, r2
    94de:	6812      	ldr	r2, [r2, #0]
    94e0:	0092      	lsls	r2, r2, #2
    94e2:	50d1      	str	r1, [r2, r3]
		inclination[p] = temp_meas.inclination;
    94e4:	23a9      	movs	r3, #169	; 0xa9
    94e6:	009b      	lsls	r3, r3, #2
    94e8:	18fb      	adds	r3, r7, r3
    94ea:	6919      	ldr	r1, [r3, #16]
    94ec:	4b78      	ldr	r3, [pc, #480]	; (96d0 <cal_evaluate+0x354>)
    94ee:	22d8      	movs	r2, #216	; 0xd8
    94f0:	0092      	lsls	r2, r2, #2
    94f2:	18ba      	adds	r2, r7, r2
    94f4:	6812      	ldr	r2, [r2, #0]
    94f6:	0092      	lsls	r2, r2, #2
    94f8:	50d1      	str	r1, [r2, r3]
		roll[p] = temp_meas.roll;
    94fa:	23a9      	movs	r3, #169	; 0xa9
    94fc:	009b      	lsls	r3, r3, #2
    94fe:	18fb      	adds	r3, r7, r3
    9500:	6959      	ldr	r1, [r3, #20]
    9502:	4b74      	ldr	r3, [pc, #464]	; (96d4 <cal_evaluate+0x358>)
    9504:	22d8      	movs	r2, #216	; 0xd8
    9506:	0092      	lsls	r2, r2, #2
    9508:	18ba      	adds	r2, r7, r2
    950a:	6812      	ldr	r2, [r2, #0]
    950c:	0092      	lsls	r2, r2, #2
    950e:	50d1      	str	r1, [r2, r3]
	for (p=0;p<n_points;p++){
    9510:	23d8      	movs	r3, #216	; 0xd8
    9512:	009b      	lsls	r3, r3, #2
    9514:	18fb      	adds	r3, r7, r3
    9516:	681b      	ldr	r3, [r3, #0]
    9518:	3301      	adds	r3, #1
    951a:	22d8      	movs	r2, #216	; 0xd8
    951c:	0092      	lsls	r2, r2, #2
    951e:	18ba      	adds	r2, r7, r2
    9520:	6013      	str	r3, [r2, #0]
    9522:	4b63      	ldr	r3, [pc, #396]	; (96b0 <cal_evaluate+0x334>)
    9524:	681b      	ldr	r3, [r3, #0]
    9526:	22d8      	movs	r2, #216	; 0xd8
    9528:	0092      	lsls	r2, r2, #2
    952a:	18ba      	adds	r2, r7, r2
    952c:	6812      	ldr	r2, [r2, #0]
    952e:	429a      	cmp	r2, r3
    9530:	d200      	bcs.n	9534 <cal_evaluate+0x1b8>
    9532:	e749      	b.n	93c8 <cal_evaluate+0x4c>
	}
	
	//  evaluate metrics of calibration
	for (g=0;g<n_groups;g++){
    9534:	2300      	movs	r3, #0
    9536:	22d7      	movs	r2, #215	; 0xd7
    9538:	0092      	lsls	r2, r2, #2
    953a:	18ba      	adds	r2, r7, r2
    953c:	6013      	str	r3, [r2, #0]
    953e:	e1bd      	b.n	98bc <cal_evaluate+0x540>
		
		//  Create group of shots
		wrap_around = 0;
    9540:	4b65      	ldr	r3, [pc, #404]	; (96d8 <cal_evaluate+0x35c>)
    9542:	18fb      	adds	r3, r7, r3
    9544:	2200      	movs	r2, #0
    9546:	701a      	strb	r2, [r3, #0]
		for (k=0;k<group_size;k++){
    9548:	2300      	movs	r3, #0
    954a:	22d6      	movs	r2, #214	; 0xd6
    954c:	0092      	lsls	r2, r2, #2
    954e:	18ba      	adds	r2, r7, r2
    9550:	6013      	str	r3, [r2, #0]
    9552:	e049      	b.n	95e8 <cal_evaluate+0x26c>
			ind1 = g*group_size+k;
    9554:	23d7      	movs	r3, #215	; 0xd7
    9556:	009b      	lsls	r3, r3, #2
    9558:	18fb      	adds	r3, r7, r3
    955a:	681b      	ldr	r3, [r3, #0]
    955c:	009a      	lsls	r2, r3, #2
    955e:	23d6      	movs	r3, #214	; 0xd6
    9560:	009b      	lsls	r3, r3, #2
    9562:	18fb      	adds	r3, r7, r3
    9564:	681b      	ldr	r3, [r3, #0]
    9566:	18d3      	adds	r3, r2, r3
    9568:	22d2      	movs	r2, #210	; 0xd2
    956a:	0092      	lsls	r2, r2, #2
    956c:	18ba      	adds	r2, r7, r2
    956e:	6013      	str	r3, [r2, #0]
			inc_group[k] = inclination[ind1];
    9570:	4b57      	ldr	r3, [pc, #348]	; (96d0 <cal_evaluate+0x354>)
    9572:	22d2      	movs	r2, #210	; 0xd2
    9574:	0092      	lsls	r2, r2, #2
    9576:	18ba      	adds	r2, r7, r2
    9578:	6812      	ldr	r2, [r2, #0]
    957a:	0092      	lsls	r2, r2, #2
    957c:	58d1      	ldr	r1, [r2, r3]
    957e:	23a5      	movs	r3, #165	; 0xa5
    9580:	009b      	lsls	r3, r3, #2
    9582:	18fb      	adds	r3, r7, r3
    9584:	22d6      	movs	r2, #214	; 0xd6
    9586:	0092      	lsls	r2, r2, #2
    9588:	18ba      	adds	r2, r7, r2
    958a:	6812      	ldr	r2, [r2, #0]
    958c:	0092      	lsls	r2, r2, #2
    958e:	50d1      	str	r1, [r2, r3]
			azm_group[k] = azimuth[ind1];
    9590:	4b4e      	ldr	r3, [pc, #312]	; (96cc <cal_evaluate+0x350>)
    9592:	22d2      	movs	r2, #210	; 0xd2
    9594:	0092      	lsls	r2, r2, #2
    9596:	18ba      	adds	r2, r7, r2
    9598:	6812      	ldr	r2, [r2, #0]
    959a:	0092      	lsls	r2, r2, #2
    959c:	58d1      	ldr	r1, [r2, r3]
    959e:	23a1      	movs	r3, #161	; 0xa1
    95a0:	009b      	lsls	r3, r3, #2
    95a2:	18fb      	adds	r3, r7, r3
    95a4:	22d6      	movs	r2, #214	; 0xd6
    95a6:	0092      	lsls	r2, r2, #2
    95a8:	18ba      	adds	r2, r7, r2
    95aa:	6812      	ldr	r2, [r2, #0]
    95ac:	0092      	lsls	r2, r2, #2
    95ae:	50d1      	str	r1, [r2, r3]
			if (azm_group[k]>340){
    95b0:	23a1      	movs	r3, #161	; 0xa1
    95b2:	009b      	lsls	r3, r3, #2
    95b4:	18fb      	adds	r3, r7, r3
    95b6:	22d6      	movs	r2, #214	; 0xd6
    95b8:	0092      	lsls	r2, r2, #2
    95ba:	18ba      	adds	r2, r7, r2
    95bc:	6812      	ldr	r2, [r2, #0]
    95be:	0092      	lsls	r2, r2, #2
    95c0:	58d2      	ldr	r2, [r2, r3]
    95c2:	4b46      	ldr	r3, [pc, #280]	; (96dc <cal_evaluate+0x360>)
    95c4:	4946      	ldr	r1, [pc, #280]	; (96e0 <cal_evaluate+0x364>)
    95c6:	1c10      	adds	r0, r2, #0
    95c8:	4798      	blx	r3
    95ca:	1e03      	subs	r3, r0, #0
    95cc:	d003      	beq.n	95d6 <cal_evaluate+0x25a>
				wrap_around = 1;//  Possible wrap-around on azimuth
    95ce:	4b42      	ldr	r3, [pc, #264]	; (96d8 <cal_evaluate+0x35c>)
    95d0:	18fb      	adds	r3, r7, r3
    95d2:	2201      	movs	r2, #1
    95d4:	701a      	strb	r2, [r3, #0]
		for (k=0;k<group_size;k++){
    95d6:	23d6      	movs	r3, #214	; 0xd6
    95d8:	009b      	lsls	r3, r3, #2
    95da:	18fb      	adds	r3, r7, r3
    95dc:	681b      	ldr	r3, [r3, #0]
    95de:	3301      	adds	r3, #1
    95e0:	22d6      	movs	r2, #214	; 0xd6
    95e2:	0092      	lsls	r2, r2, #2
    95e4:	18ba      	adds	r2, r7, r2
    95e6:	6013      	str	r3, [r2, #0]
    95e8:	23d6      	movs	r3, #214	; 0xd6
    95ea:	009b      	lsls	r3, r3, #2
    95ec:	18fb      	adds	r3, r7, r3
    95ee:	681b      	ldr	r3, [r3, #0]
    95f0:	2b03      	cmp	r3, #3
    95f2:	d9af      	bls.n	9554 <cal_evaluate+0x1d8>
			}
		}
		
		//  Adjust for angle wrap-around
		if (wrap_around){
    95f4:	4b38      	ldr	r3, [pc, #224]	; (96d8 <cal_evaluate+0x35c>)
    95f6:	18fb      	adds	r3, r7, r3
    95f8:	781b      	ldrb	r3, [r3, #0]
    95fa:	2b00      	cmp	r3, #0
    95fc:	d03b      	beq.n	9676 <cal_evaluate+0x2fa>
			for (k=0;k<group_size;k++){
    95fe:	2300      	movs	r3, #0
    9600:	22d6      	movs	r2, #214	; 0xd6
    9602:	0092      	lsls	r2, r2, #2
    9604:	18ba      	adds	r2, r7, r2
    9606:	6013      	str	r3, [r2, #0]
    9608:	e02f      	b.n	966a <cal_evaluate+0x2ee>
				if (azm_group[k]<20){
    960a:	23a1      	movs	r3, #161	; 0xa1
    960c:	009b      	lsls	r3, r3, #2
    960e:	18fb      	adds	r3, r7, r3
    9610:	22d6      	movs	r2, #214	; 0xd6
    9612:	0092      	lsls	r2, r2, #2
    9614:	18ba      	adds	r2, r7, r2
    9616:	6812      	ldr	r2, [r2, #0]
    9618:	0092      	lsls	r2, r2, #2
    961a:	58d2      	ldr	r2, [r2, r3]
    961c:	4b31      	ldr	r3, [pc, #196]	; (96e4 <cal_evaluate+0x368>)
    961e:	4932      	ldr	r1, [pc, #200]	; (96e8 <cal_evaluate+0x36c>)
    9620:	1c10      	adds	r0, r2, #0
    9622:	4798      	blx	r3
    9624:	1e03      	subs	r3, r0, #0
    9626:	d017      	beq.n	9658 <cal_evaluate+0x2dc>
					azm_group[k] = azm_group[k]+360;
    9628:	23a1      	movs	r3, #161	; 0xa1
    962a:	009b      	lsls	r3, r3, #2
    962c:	18fb      	adds	r3, r7, r3
    962e:	22d6      	movs	r2, #214	; 0xd6
    9630:	0092      	lsls	r2, r2, #2
    9632:	18ba      	adds	r2, r7, r2
    9634:	6812      	ldr	r2, [r2, #0]
    9636:	0092      	lsls	r2, r2, #2
    9638:	58d2      	ldr	r2, [r2, r3]
    963a:	4b2c      	ldr	r3, [pc, #176]	; (96ec <cal_evaluate+0x370>)
    963c:	492c      	ldr	r1, [pc, #176]	; (96f0 <cal_evaluate+0x374>)
    963e:	1c10      	adds	r0, r2, #0
    9640:	4798      	blx	r3
    9642:	1c03      	adds	r3, r0, #0
    9644:	1c19      	adds	r1, r3, #0
    9646:	23a1      	movs	r3, #161	; 0xa1
    9648:	009b      	lsls	r3, r3, #2
    964a:	18fb      	adds	r3, r7, r3
    964c:	22d6      	movs	r2, #214	; 0xd6
    964e:	0092      	lsls	r2, r2, #2
    9650:	18ba      	adds	r2, r7, r2
    9652:	6812      	ldr	r2, [r2, #0]
    9654:	0092      	lsls	r2, r2, #2
    9656:	50d1      	str	r1, [r2, r3]
			for (k=0;k<group_size;k++){
    9658:	23d6      	movs	r3, #214	; 0xd6
    965a:	009b      	lsls	r3, r3, #2
    965c:	18fb      	adds	r3, r7, r3
    965e:	681b      	ldr	r3, [r3, #0]
    9660:	3301      	adds	r3, #1
    9662:	22d6      	movs	r2, #214	; 0xd6
    9664:	0092      	lsls	r2, r2, #2
    9666:	18ba      	adds	r2, r7, r2
    9668:	6013      	str	r3, [r2, #0]
    966a:	23d6      	movs	r3, #214	; 0xd6
    966c:	009b      	lsls	r3, r3, #2
    966e:	18fb      	adds	r3, r7, r3
    9670:	681b      	ldr	r3, [r3, #0]
    9672:	2b03      	cmp	r3, #3
    9674:	d9c9      	bls.n	960a <cal_evaluate+0x28e>
				}
			}
		}
		
		//  Find group average
		inc_avg = 0;
    9676:	2300      	movs	r3, #0
    9678:	22d4      	movs	r2, #212	; 0xd4
    967a:	0092      	lsls	r2, r2, #2
    967c:	18ba      	adds	r2, r7, r2
    967e:	6013      	str	r3, [r2, #0]
		azm_avg = 0;
    9680:	2300      	movs	r3, #0
    9682:	22d3      	movs	r2, #211	; 0xd3
    9684:	0092      	lsls	r2, r2, #2
    9686:	18ba      	adds	r2, r7, r2
    9688:	6013      	str	r3, [r2, #0]
		for (k=0;k<group_size;k++){
    968a:	2300      	movs	r3, #0
    968c:	22d6      	movs	r2, #214	; 0xd6
    968e:	0092      	lsls	r2, r2, #2
    9690:	18ba      	adds	r2, r7, r2
    9692:	6013      	str	r3, [r2, #0]
    9694:	e061      	b.n	975a <cal_evaluate+0x3de>
    9696:	46c0      	nop			; (mov r8, r8)
    9698:	fffffc94 	.word	0xfffffc94
    969c:	0000e6e5 	.word	0x0000e6e5
    96a0:	2000103c 	.word	0x2000103c
    96a4:	0000e8b9 	.word	0x0000e8b9
    96a8:	2000188c 	.word	0x2000188c
    96ac:	00025fb0 	.word	0x00025fb0
    96b0:	200027f8 	.word	0x200027f8
    96b4:	200018e4 	.word	0x200018e4
    96b8:	20003440 	.word	0x20003440
    96bc:	200045b8 	.word	0x200045b8
    96c0:	20002210 	.word	0x20002210
    96c4:	20003078 	.word	0x20003078
    96c8:	00009e35 	.word	0x00009e35
    96cc:	200018e8 	.word	0x200018e8
    96d0:	20003a34 	.word	0x20003a34
    96d4:	20003f58 	.word	0x20003f58
    96d8:	00000357 	.word	0x00000357
    96dc:	0001e2fd 	.word	0x0001e2fd
    96e0:	43aa0000 	.word	0x43aa0000
    96e4:	0001e2d5 	.word	0x0001e2d5
    96e8:	41a00000 	.word	0x41a00000
    96ec:	0001e461 	.word	0x0001e461
    96f0:	43b40000 	.word	0x43b40000
			inc_avg = inc_avg + inc_group[k];
    96f4:	23a5      	movs	r3, #165	; 0xa5
    96f6:	009b      	lsls	r3, r3, #2
    96f8:	18fb      	adds	r3, r7, r3
    96fa:	22d6      	movs	r2, #214	; 0xd6
    96fc:	0092      	lsls	r2, r2, #2
    96fe:	18ba      	adds	r2, r7, r2
    9700:	6812      	ldr	r2, [r2, #0]
    9702:	0092      	lsls	r2, r2, #2
    9704:	58d2      	ldr	r2, [r2, r3]
    9706:	4bac      	ldr	r3, [pc, #688]	; (99b8 <cal_evaluate+0x63c>)
    9708:	1c11      	adds	r1, r2, #0
    970a:	22d4      	movs	r2, #212	; 0xd4
    970c:	0092      	lsls	r2, r2, #2
    970e:	18ba      	adds	r2, r7, r2
    9710:	6810      	ldr	r0, [r2, #0]
    9712:	4798      	blx	r3
    9714:	1c03      	adds	r3, r0, #0
    9716:	22d4      	movs	r2, #212	; 0xd4
    9718:	0092      	lsls	r2, r2, #2
    971a:	18ba      	adds	r2, r7, r2
    971c:	6013      	str	r3, [r2, #0]
			azm_avg = azm_avg + azm_group[k];
    971e:	23a1      	movs	r3, #161	; 0xa1
    9720:	009b      	lsls	r3, r3, #2
    9722:	18fb      	adds	r3, r7, r3
    9724:	22d6      	movs	r2, #214	; 0xd6
    9726:	0092      	lsls	r2, r2, #2
    9728:	18ba      	adds	r2, r7, r2
    972a:	6812      	ldr	r2, [r2, #0]
    972c:	0092      	lsls	r2, r2, #2
    972e:	58d2      	ldr	r2, [r2, r3]
    9730:	4ba1      	ldr	r3, [pc, #644]	; (99b8 <cal_evaluate+0x63c>)
    9732:	1c11      	adds	r1, r2, #0
    9734:	22d3      	movs	r2, #211	; 0xd3
    9736:	0092      	lsls	r2, r2, #2
    9738:	18ba      	adds	r2, r7, r2
    973a:	6810      	ldr	r0, [r2, #0]
    973c:	4798      	blx	r3
    973e:	1c03      	adds	r3, r0, #0
    9740:	22d3      	movs	r2, #211	; 0xd3
    9742:	0092      	lsls	r2, r2, #2
    9744:	18ba      	adds	r2, r7, r2
    9746:	6013      	str	r3, [r2, #0]
		for (k=0;k<group_size;k++){
    9748:	23d6      	movs	r3, #214	; 0xd6
    974a:	009b      	lsls	r3, r3, #2
    974c:	18fb      	adds	r3, r7, r3
    974e:	681b      	ldr	r3, [r3, #0]
    9750:	3301      	adds	r3, #1
    9752:	22d6      	movs	r2, #214	; 0xd6
    9754:	0092      	lsls	r2, r2, #2
    9756:	18ba      	adds	r2, r7, r2
    9758:	6013      	str	r3, [r2, #0]
    975a:	23d6      	movs	r3, #214	; 0xd6
    975c:	009b      	lsls	r3, r3, #2
    975e:	18fb      	adds	r3, r7, r3
    9760:	681b      	ldr	r3, [r3, #0]
    9762:	2b03      	cmp	r3, #3
    9764:	d9c6      	bls.n	96f4 <cal_evaluate+0x378>
		}
		inc_avg = inc_avg/group_size;
    9766:	4b95      	ldr	r3, [pc, #596]	; (99bc <cal_evaluate+0x640>)
    9768:	2181      	movs	r1, #129	; 0x81
    976a:	05c9      	lsls	r1, r1, #23
    976c:	22d4      	movs	r2, #212	; 0xd4
    976e:	0092      	lsls	r2, r2, #2
    9770:	18ba      	adds	r2, r7, r2
    9772:	6810      	ldr	r0, [r2, #0]
    9774:	4798      	blx	r3
    9776:	1c03      	adds	r3, r0, #0
    9778:	22d4      	movs	r2, #212	; 0xd4
    977a:	0092      	lsls	r2, r2, #2
    977c:	18ba      	adds	r2, r7, r2
    977e:	6013      	str	r3, [r2, #0]
		azm_avg = azm_avg/group_size;
    9780:	4b8e      	ldr	r3, [pc, #568]	; (99bc <cal_evaluate+0x640>)
    9782:	2181      	movs	r1, #129	; 0x81
    9784:	05c9      	lsls	r1, r1, #23
    9786:	22d3      	movs	r2, #211	; 0xd3
    9788:	0092      	lsls	r2, r2, #2
    978a:	18ba      	adds	r2, r7, r2
    978c:	6810      	ldr	r0, [r2, #0]
    978e:	4798      	blx	r3
    9790:	1c03      	adds	r3, r0, #0
    9792:	22d3      	movs	r2, #211	; 0xd3
    9794:	0092      	lsls	r2, r2, #2
    9796:	18ba      	adds	r2, r7, r2
    9798:	6013      	str	r3, [r2, #0]
		
		//  Calculate errors
		for (k=0;k<group_size;k++){
    979a:	2300      	movs	r3, #0
    979c:	22d6      	movs	r2, #214	; 0xd6
    979e:	0092      	lsls	r2, r2, #2
    97a0:	18ba      	adds	r2, r7, r2
    97a2:	6013      	str	r3, [r2, #0]
    97a4:	e07a      	b.n	989c <cal_evaluate+0x520>
			ind1 = g*group_size+k;
    97a6:	23d7      	movs	r3, #215	; 0xd7
    97a8:	009b      	lsls	r3, r3, #2
    97aa:	18fb      	adds	r3, r7, r3
    97ac:	681b      	ldr	r3, [r3, #0]
    97ae:	009a      	lsls	r2, r3, #2
    97b0:	23d6      	movs	r3, #214	; 0xd6
    97b2:	009b      	lsls	r3, r3, #2
    97b4:	18fb      	adds	r3, r7, r3
    97b6:	681b      	ldr	r3, [r3, #0]
    97b8:	18d3      	adds	r3, r2, r3
    97ba:	22d2      	movs	r2, #210	; 0xd2
    97bc:	0092      	lsls	r2, r2, #2
    97be:	18ba      	adds	r2, r7, r2
    97c0:	6013      	str	r3, [r2, #0]
			inc_err_array[ind1] = inc_group[k]-inc_avg;
    97c2:	23a5      	movs	r3, #165	; 0xa5
    97c4:	009b      	lsls	r3, r3, #2
    97c6:	18fb      	adds	r3, r7, r3
    97c8:	22d6      	movs	r2, #214	; 0xd6
    97ca:	0092      	lsls	r2, r2, #2
    97cc:	18ba      	adds	r2, r7, r2
    97ce:	6812      	ldr	r2, [r2, #0]
    97d0:	0092      	lsls	r2, r2, #2
    97d2:	58d2      	ldr	r2, [r2, r3]
    97d4:	4b7a      	ldr	r3, [pc, #488]	; (99c0 <cal_evaluate+0x644>)
    97d6:	21d4      	movs	r1, #212	; 0xd4
    97d8:	0089      	lsls	r1, r1, #2
    97da:	1879      	adds	r1, r7, r1
    97dc:	6809      	ldr	r1, [r1, #0]
    97de:	1c10      	adds	r0, r2, #0
    97e0:	4798      	blx	r3
    97e2:	1c03      	adds	r3, r0, #0
    97e4:	1c19      	adds	r1, r3, #0
    97e6:	4b77      	ldr	r3, [pc, #476]	; (99c4 <cal_evaluate+0x648>)
    97e8:	22da      	movs	r2, #218	; 0xda
    97ea:	0092      	lsls	r2, r2, #2
    97ec:	4694      	mov	ip, r2
    97ee:	44bc      	add	ip, r7
    97f0:	4463      	add	r3, ip
    97f2:	22d2      	movs	r2, #210	; 0xd2
    97f4:	0092      	lsls	r2, r2, #2
    97f6:	18ba      	adds	r2, r7, r2
    97f8:	6812      	ldr	r2, [r2, #0]
    97fa:	0092      	lsls	r2, r2, #2
    97fc:	50d1      	str	r1, [r2, r3]
			azm_err_array[ind1] = (azm_group[k]-azm_avg)*cos(inc_avg*deg2rad);
    97fe:	23a1      	movs	r3, #161	; 0xa1
    9800:	009b      	lsls	r3, r3, #2
    9802:	18fb      	adds	r3, r7, r3
    9804:	22d6      	movs	r2, #214	; 0xd6
    9806:	0092      	lsls	r2, r2, #2
    9808:	18ba      	adds	r2, r7, r2
    980a:	6812      	ldr	r2, [r2, #0]
    980c:	0092      	lsls	r2, r2, #2
    980e:	58d2      	ldr	r2, [r2, r3]
    9810:	4b6b      	ldr	r3, [pc, #428]	; (99c0 <cal_evaluate+0x644>)
    9812:	21d3      	movs	r1, #211	; 0xd3
    9814:	0089      	lsls	r1, r1, #2
    9816:	1879      	adds	r1, r7, r1
    9818:	6809      	ldr	r1, [r1, #0]
    981a:	1c10      	adds	r0, r2, #0
    981c:	4798      	blx	r3
    981e:	1c03      	adds	r3, r0, #0
    9820:	1c1a      	adds	r2, r3, #0
    9822:	4b69      	ldr	r3, [pc, #420]	; (99c8 <cal_evaluate+0x64c>)
    9824:	1c10      	adds	r0, r2, #0
    9826:	4798      	blx	r3
    9828:	0005      	movs	r5, r0
    982a:	000e      	movs	r6, r1
    982c:	4b67      	ldr	r3, [pc, #412]	; (99cc <cal_evaluate+0x650>)
    982e:	681a      	ldr	r2, [r3, #0]
    9830:	4b67      	ldr	r3, [pc, #412]	; (99d0 <cal_evaluate+0x654>)
    9832:	21d4      	movs	r1, #212	; 0xd4
    9834:	0089      	lsls	r1, r1, #2
    9836:	1879      	adds	r1, r7, r1
    9838:	6809      	ldr	r1, [r1, #0]
    983a:	1c10      	adds	r0, r2, #0
    983c:	4798      	blx	r3
    983e:	1c03      	adds	r3, r0, #0
    9840:	1c1a      	adds	r2, r3, #0
    9842:	4b61      	ldr	r3, [pc, #388]	; (99c8 <cal_evaluate+0x64c>)
    9844:	1c10      	adds	r0, r2, #0
    9846:	4798      	blx	r3
    9848:	0003      	movs	r3, r0
    984a:	000c      	movs	r4, r1
    984c:	0018      	movs	r0, r3
    984e:	0021      	movs	r1, r4
    9850:	4b60      	ldr	r3, [pc, #384]	; (99d4 <cal_evaluate+0x658>)
    9852:	4798      	blx	r3
    9854:	0002      	movs	r2, r0
    9856:	000b      	movs	r3, r1
    9858:	4c5f      	ldr	r4, [pc, #380]	; (99d8 <cal_evaluate+0x65c>)
    985a:	0028      	movs	r0, r5
    985c:	0031      	movs	r1, r6
    985e:	47a0      	blx	r4
    9860:	0003      	movs	r3, r0
    9862:	000c      	movs	r4, r1
    9864:	0019      	movs	r1, r3
    9866:	0022      	movs	r2, r4
    9868:	4b5c      	ldr	r3, [pc, #368]	; (99dc <cal_evaluate+0x660>)
    986a:	0008      	movs	r0, r1
    986c:	0011      	movs	r1, r2
    986e:	4798      	blx	r3
    9870:	1c01      	adds	r1, r0, #0
    9872:	4b5b      	ldr	r3, [pc, #364]	; (99e0 <cal_evaluate+0x664>)
    9874:	22da      	movs	r2, #218	; 0xda
    9876:	0092      	lsls	r2, r2, #2
    9878:	4694      	mov	ip, r2
    987a:	44bc      	add	ip, r7
    987c:	4463      	add	r3, ip
    987e:	22d2      	movs	r2, #210	; 0xd2
    9880:	0092      	lsls	r2, r2, #2
    9882:	18ba      	adds	r2, r7, r2
    9884:	6812      	ldr	r2, [r2, #0]
    9886:	0092      	lsls	r2, r2, #2
    9888:	50d1      	str	r1, [r2, r3]
		for (k=0;k<group_size;k++){
    988a:	23d6      	movs	r3, #214	; 0xd6
    988c:	009b      	lsls	r3, r3, #2
    988e:	18fb      	adds	r3, r7, r3
    9890:	681b      	ldr	r3, [r3, #0]
    9892:	3301      	adds	r3, #1
    9894:	22d6      	movs	r2, #214	; 0xd6
    9896:	0092      	lsls	r2, r2, #2
    9898:	18ba      	adds	r2, r7, r2
    989a:	6013      	str	r3, [r2, #0]
    989c:	23d6      	movs	r3, #214	; 0xd6
    989e:	009b      	lsls	r3, r3, #2
    98a0:	18fb      	adds	r3, r7, r3
    98a2:	681b      	ldr	r3, [r3, #0]
    98a4:	2b03      	cmp	r3, #3
    98a6:	d800      	bhi.n	98aa <cal_evaluate+0x52e>
    98a8:	e77d      	b.n	97a6 <cal_evaluate+0x42a>
	for (g=0;g<n_groups;g++){
    98aa:	23d7      	movs	r3, #215	; 0xd7
    98ac:	009b      	lsls	r3, r3, #2
    98ae:	18fb      	adds	r3, r7, r3
    98b0:	681b      	ldr	r3, [r3, #0]
    98b2:	3301      	adds	r3, #1
    98b4:	22d7      	movs	r2, #215	; 0xd7
    98b6:	0092      	lsls	r2, r2, #2
    98b8:	18ba      	adds	r2, r7, r2
    98ba:	6013      	str	r3, [r2, #0]
    98bc:	4b49      	ldr	r3, [pc, #292]	; (99e4 <cal_evaluate+0x668>)
    98be:	681b      	ldr	r3, [r3, #0]
    98c0:	22d7      	movs	r2, #215	; 0xd7
    98c2:	0092      	lsls	r2, r2, #2
    98c4:	18ba      	adds	r2, r7, r2
    98c6:	6812      	ldr	r2, [r2, #0]
    98c8:	429a      	cmp	r2, r3
    98ca:	d200      	bcs.n	98ce <cal_evaluate+0x552>
    98cc:	e638      	b.n	9540 <cal_evaluate+0x1c4>
		
		
	}
	
	//  Calculate standard deviation of angle errors
	cal_report_azm_inc.inc_angle_err = stdev(inc_err_array, n_points);	 
    98ce:	4b46      	ldr	r3, [pc, #280]	; (99e8 <cal_evaluate+0x66c>)
    98d0:	681a      	ldr	r2, [r3, #0]
    98d2:	23a2      	movs	r3, #162	; 0xa2
    98d4:	005b      	lsls	r3, r3, #1
    98d6:	18fb      	adds	r3, r7, r3
    98d8:	0011      	movs	r1, r2
    98da:	0018      	movs	r0, r3
    98dc:	4b43      	ldr	r3, [pc, #268]	; (99ec <cal_evaluate+0x670>)
    98de:	4798      	blx	r3
    98e0:	1c02      	adds	r2, r0, #0
    98e2:	4b43      	ldr	r3, [pc, #268]	; (99f0 <cal_evaluate+0x674>)
    98e4:	611a      	str	r2, [r3, #16]
	cal_report_azm_inc.azm_angle_err = stdev(azm_err_array, n_points);
    98e6:	4b40      	ldr	r3, [pc, #256]	; (99e8 <cal_evaluate+0x66c>)
    98e8:	681a      	ldr	r2, [r3, #0]
    98ea:	1d3b      	adds	r3, r7, #4
    98ec:	0011      	movs	r1, r2
    98ee:	0018      	movs	r0, r3
    98f0:	4b3e      	ldr	r3, [pc, #248]	; (99ec <cal_evaluate+0x670>)
    98f2:	4798      	blx	r3
    98f4:	1c02      	adds	r2, r0, #0
    98f6:	4b3e      	ldr	r3, [pc, #248]	; (99f0 <cal_evaluate+0x674>)
    98f8:	615a      	str	r2, [r3, #20]
	
	//  Evaluate magnitude error Standard Deviation
	cal_report_azm_inc.mag_stdev_a1 = calc_mag_stdev(a1cal);
    98fa:	4b3e      	ldr	r3, [pc, #248]	; (99f4 <cal_evaluate+0x678>)
    98fc:	0018      	movs	r0, r3
    98fe:	4b3e      	ldr	r3, [pc, #248]	; (99f8 <cal_evaluate+0x67c>)
    9900:	4798      	blx	r3
    9902:	1c02      	adds	r2, r0, #0
    9904:	4b3a      	ldr	r3, [pc, #232]	; (99f0 <cal_evaluate+0x674>)
    9906:	619a      	str	r2, [r3, #24]
	cal_report_azm_inc.mag_stdev_a2 = calc_mag_stdev(a2cal);
    9908:	4b3c      	ldr	r3, [pc, #240]	; (99fc <cal_evaluate+0x680>)
    990a:	0018      	movs	r0, r3
    990c:	4b3a      	ldr	r3, [pc, #232]	; (99f8 <cal_evaluate+0x67c>)
    990e:	4798      	blx	r3
    9910:	1c02      	adds	r2, r0, #0
    9912:	4b37      	ldr	r3, [pc, #220]	; (99f0 <cal_evaluate+0x674>)
    9914:	61da      	str	r2, [r3, #28]
	cal_report_azm_inc.mag_stdev_c1 = calc_mag_stdev(c1cal);
    9916:	4b3a      	ldr	r3, [pc, #232]	; (9a00 <cal_evaluate+0x684>)
    9918:	0018      	movs	r0, r3
    991a:	4b37      	ldr	r3, [pc, #220]	; (99f8 <cal_evaluate+0x67c>)
    991c:	4798      	blx	r3
    991e:	1c02      	adds	r2, r0, #0
    9920:	4b33      	ldr	r3, [pc, #204]	; (99f0 <cal_evaluate+0x674>)
    9922:	621a      	str	r2, [r3, #32]
	cal_report_azm_inc.mag_stdev_c2 = calc_mag_stdev(c2cal);
    9924:	4b37      	ldr	r3, [pc, #220]	; (9a04 <cal_evaluate+0x688>)
    9926:	0018      	movs	r0, r3
    9928:	4b33      	ldr	r3, [pc, #204]	; (99f8 <cal_evaluate+0x67c>)
    992a:	4798      	blx	r3
    992c:	1c02      	adds	r2, r0, #0
    992e:	4b30      	ldr	r3, [pc, #192]	; (99f0 <cal_evaluate+0x674>)
    9930:	625a      	str	r2, [r3, #36]	; 0x24
	
	//  Evaluate Axis Disparity Standard Deviation
	for (i=0;i<3;i++){
    9932:	2300      	movs	r3, #0
    9934:	22d9      	movs	r2, #217	; 0xd9
    9936:	0092      	lsls	r2, r2, #2
    9938:	18ba      	adds	r2, r7, r2
    993a:	6013      	str	r3, [r2, #0]
    993c:	e030      	b.n	99a0 <cal_evaluate+0x624>
		cal_report_azm_inc.disp_stdev_acc[i]  = calc_disp_stdev(a1cal, a2cal, i);
    993e:	23d9      	movs	r3, #217	; 0xd9
    9940:	009b      	lsls	r3, r3, #2
    9942:	18fb      	adds	r3, r7, r3
    9944:	681b      	ldr	r3, [r3, #0]
    9946:	b2da      	uxtb	r2, r3
    9948:	492c      	ldr	r1, [pc, #176]	; (99fc <cal_evaluate+0x680>)
    994a:	4b2a      	ldr	r3, [pc, #168]	; (99f4 <cal_evaluate+0x678>)
    994c:	0018      	movs	r0, r3
    994e:	4b2e      	ldr	r3, [pc, #184]	; (9a08 <cal_evaluate+0x68c>)
    9950:	4798      	blx	r3
    9952:	1c01      	adds	r1, r0, #0
    9954:	4b26      	ldr	r3, [pc, #152]	; (99f0 <cal_evaluate+0x674>)
    9956:	22d9      	movs	r2, #217	; 0xd9
    9958:	0092      	lsls	r2, r2, #2
    995a:	18ba      	adds	r2, r7, r2
    995c:	6812      	ldr	r2, [r2, #0]
    995e:	320a      	adds	r2, #10
    9960:	0092      	lsls	r2, r2, #2
    9962:	50d1      	str	r1, [r2, r3]
		cal_report_azm_inc.disp_stdev_comp[i] = calc_disp_stdev(c1cal, c2cal, i);
    9964:	23d9      	movs	r3, #217	; 0xd9
    9966:	009b      	lsls	r3, r3, #2
    9968:	18fb      	adds	r3, r7, r3
    996a:	681b      	ldr	r3, [r3, #0]
    996c:	b2da      	uxtb	r2, r3
    996e:	4925      	ldr	r1, [pc, #148]	; (9a04 <cal_evaluate+0x688>)
    9970:	4b23      	ldr	r3, [pc, #140]	; (9a00 <cal_evaluate+0x684>)
    9972:	0018      	movs	r0, r3
    9974:	4b24      	ldr	r3, [pc, #144]	; (9a08 <cal_evaluate+0x68c>)
    9976:	4798      	blx	r3
    9978:	1c01      	adds	r1, r0, #0
    997a:	4a1d      	ldr	r2, [pc, #116]	; (99f0 <cal_evaluate+0x674>)
    997c:	23d9      	movs	r3, #217	; 0xd9
    997e:	009b      	lsls	r3, r3, #2
    9980:	18fb      	adds	r3, r7, r3
    9982:	681b      	ldr	r3, [r3, #0]
    9984:	330c      	adds	r3, #12
    9986:	009b      	lsls	r3, r3, #2
    9988:	18d3      	adds	r3, r2, r3
    998a:	3304      	adds	r3, #4
    998c:	6019      	str	r1, [r3, #0]
	for (i=0;i<3;i++){
    998e:	23d9      	movs	r3, #217	; 0xd9
    9990:	009b      	lsls	r3, r3, #2
    9992:	18fb      	adds	r3, r7, r3
    9994:	681b      	ldr	r3, [r3, #0]
    9996:	3301      	adds	r3, #1
    9998:	22d9      	movs	r2, #217	; 0xd9
    999a:	0092      	lsls	r2, r2, #2
    999c:	18ba      	adds	r2, r7, r2
    999e:	6013      	str	r3, [r2, #0]
    99a0:	23d9      	movs	r3, #217	; 0xd9
    99a2:	009b      	lsls	r3, r3, #2
    99a4:	18fb      	adds	r3, r7, r3
    99a6:	681b      	ldr	r3, [r3, #0]
    99a8:	2b02      	cmp	r3, #2
    99aa:	d9c8      	bls.n	993e <cal_evaluate+0x5c2>
	}
		
	
}
    99ac:	46c0      	nop			; (mov r8, r8)
    99ae:	46bd      	mov	sp, r7
    99b0:	23db      	movs	r3, #219	; 0xdb
    99b2:	009b      	lsls	r3, r3, #2
    99b4:	449d      	add	sp, r3
    99b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    99b8:	0001e461 	.word	0x0001e461
    99bc:	0001e785 	.word	0x0001e785
    99c0:	0001eda5 	.word	0x0001eda5
    99c4:	fffffddc 	.word	0xfffffddc
    99c8:	00020d99 	.word	0x00020d99
    99cc:	00025fb8 	.word	0x00025fb8
    99d0:	0001eb65 	.word	0x0001eb65
    99d4:	0001b4f5 	.word	0x0001b4f5
    99d8:	000200d1 	.word	0x000200d1
    99dc:	00020e3d 	.word	0x00020e3d
    99e0:	fffffc9c 	.word	0xfffffc9c
    99e4:	200018e4 	.word	0x200018e4
    99e8:	200027f8 	.word	0x200027f8
    99ec:	0000a57d 	.word	0x0000a57d
    99f0:	2000188c 	.word	0x2000188c
    99f4:	20003440 	.word	0x20003440
    99f8:	0000a6cd 	.word	0x0000a6cd
    99fc:	200045b8 	.word	0x200045b8
    9a00:	20002210 	.word	0x20002210
    9a04:	20003078 	.word	0x20003078
    9a08:	0000a849 	.word	0x0000a849

00009a0c <cal_add_datapoint>:

void cal_add_datapoint(struct MEASUREMENT *meas_inst, bool last_shot){
    9a0c:	b5b0      	push	{r4, r5, r7, lr}
    9a0e:	b08e      	sub	sp, #56	; 0x38
    9a10:	af00      	add	r7, sp, #0
    9a12:	6078      	str	r0, [r7, #4]
    9a14:	000a      	movs	r2, r1
    9a16:	1cfb      	adds	r3, r7, #3
    9a18:	701a      	strb	r2, [r3, #0]
	float aXYZ[3], cXYZ[3];
	uint8_t j, k;
	
	
	//  If this is the first point, initialize reference angles
	if ((ind_stack==0) && (ind_buf==0) && (buf_points == 0)){
    9a1a:	4bae      	ldr	r3, [pc, #696]	; (9cd4 <cal_add_datapoint+0x2c8>)
    9a1c:	781b      	ldrb	r3, [r3, #0]
    9a1e:	2b00      	cmp	r3, #0
    9a20:	d10d      	bne.n	9a3e <cal_add_datapoint+0x32>
    9a22:	4bad      	ldr	r3, [pc, #692]	; (9cd8 <cal_add_datapoint+0x2cc>)
    9a24:	781b      	ldrb	r3, [r3, #0]
    9a26:	2b00      	cmp	r3, #0
    9a28:	d109      	bne.n	9a3e <cal_add_datapoint+0x32>
    9a2a:	4bac      	ldr	r3, [pc, #688]	; (9cdc <cal_add_datapoint+0x2d0>)
    9a2c:	781b      	ldrb	r3, [r3, #0]
    9a2e:	2b00      	cmp	r3, #0
    9a30:	d105      	bne.n	9a3e <cal_add_datapoint+0x32>
		aX_ang_ref = 200;//  Ensures delta will fail on first iteration
    9a32:	4bab      	ldr	r3, [pc, #684]	; (9ce0 <cal_add_datapoint+0x2d4>)
    9a34:	4aab      	ldr	r2, [pc, #684]	; (9ce4 <cal_add_datapoint+0x2d8>)
    9a36:	601a      	str	r2, [r3, #0]
		cX_ang_ref = 200;//  Ensures delta will fail on first iteration
    9a38:	4bab      	ldr	r3, [pc, #684]	; (9ce8 <cal_add_datapoint+0x2dc>)
    9a3a:	4aaa      	ldr	r2, [pc, #680]	; (9ce4 <cal_add_datapoint+0x2d8>)
    9a3c:	601a      	str	r2, [r3, #0]
	}

	
	//  Filter and sort into groups
	for (j=0;j<3;j++){
    9a3e:	2337      	movs	r3, #55	; 0x37
    9a40:	18fb      	adds	r3, r7, r3
    9a42:	2200      	movs	r2, #0
    9a44:	701a      	strb	r2, [r3, #0]
    9a46:	e04c      	b.n	9ae2 <cal_add_datapoint+0xd6>
		aXYZ[j] = 0.5*(meas_inst->a1xyz[j]+meas_inst->a2xyz[j]);
    9a48:	2337      	movs	r3, #55	; 0x37
    9a4a:	18fb      	adds	r3, r7, r3
    9a4c:	781c      	ldrb	r4, [r3, #0]
    9a4e:	2337      	movs	r3, #55	; 0x37
    9a50:	18fb      	adds	r3, r7, r3
    9a52:	781a      	ldrb	r2, [r3, #0]
    9a54:	687b      	ldr	r3, [r7, #4]
    9a56:	3208      	adds	r2, #8
    9a58:	0092      	lsls	r2, r2, #2
    9a5a:	58d0      	ldr	r0, [r2, r3]
    9a5c:	2337      	movs	r3, #55	; 0x37
    9a5e:	18fb      	adds	r3, r7, r3
    9a60:	781b      	ldrb	r3, [r3, #0]
    9a62:	687a      	ldr	r2, [r7, #4]
    9a64:	330a      	adds	r3, #10
    9a66:	009b      	lsls	r3, r3, #2
    9a68:	18d3      	adds	r3, r2, r3
    9a6a:	3304      	adds	r3, #4
    9a6c:	681a      	ldr	r2, [r3, #0]
    9a6e:	4b9f      	ldr	r3, [pc, #636]	; (9cec <cal_add_datapoint+0x2e0>)
    9a70:	1c11      	adds	r1, r2, #0
    9a72:	4798      	blx	r3
    9a74:	1c03      	adds	r3, r0, #0
    9a76:	1c1a      	adds	r2, r3, #0
    9a78:	4b9d      	ldr	r3, [pc, #628]	; (9cf0 <cal_add_datapoint+0x2e4>)
    9a7a:	21fc      	movs	r1, #252	; 0xfc
    9a7c:	0589      	lsls	r1, r1, #22
    9a7e:	1c10      	adds	r0, r2, #0
    9a80:	4798      	blx	r3
    9a82:	1c03      	adds	r3, r0, #0
    9a84:	1c19      	adds	r1, r3, #0
    9a86:	2314      	movs	r3, #20
    9a88:	18fb      	adds	r3, r7, r3
    9a8a:	00a2      	lsls	r2, r4, #2
    9a8c:	50d1      	str	r1, [r2, r3]
		cXYZ[j] = 0.5*(meas_inst->c1xyz[j]+meas_inst->c2xyz[j]);
    9a8e:	2337      	movs	r3, #55	; 0x37
    9a90:	18fb      	adds	r3, r7, r3
    9a92:	781c      	ldrb	r4, [r3, #0]
    9a94:	2337      	movs	r3, #55	; 0x37
    9a96:	18fb      	adds	r3, r7, r3
    9a98:	781a      	ldrb	r2, [r3, #0]
    9a9a:	687b      	ldr	r3, [r7, #4]
    9a9c:	320e      	adds	r2, #14
    9a9e:	0092      	lsls	r2, r2, #2
    9aa0:	58d0      	ldr	r0, [r2, r3]
    9aa2:	2337      	movs	r3, #55	; 0x37
    9aa4:	18fb      	adds	r3, r7, r3
    9aa6:	781b      	ldrb	r3, [r3, #0]
    9aa8:	687a      	ldr	r2, [r7, #4]
    9aaa:	3310      	adds	r3, #16
    9aac:	009b      	lsls	r3, r3, #2
    9aae:	18d3      	adds	r3, r2, r3
    9ab0:	3304      	adds	r3, #4
    9ab2:	681a      	ldr	r2, [r3, #0]
    9ab4:	4b8d      	ldr	r3, [pc, #564]	; (9cec <cal_add_datapoint+0x2e0>)
    9ab6:	1c11      	adds	r1, r2, #0
    9ab8:	4798      	blx	r3
    9aba:	1c03      	adds	r3, r0, #0
    9abc:	1c1a      	adds	r2, r3, #0
    9abe:	4b8c      	ldr	r3, [pc, #560]	; (9cf0 <cal_add_datapoint+0x2e4>)
    9ac0:	21fc      	movs	r1, #252	; 0xfc
    9ac2:	0589      	lsls	r1, r1, #22
    9ac4:	1c10      	adds	r0, r2, #0
    9ac6:	4798      	blx	r3
    9ac8:	1c03      	adds	r3, r0, #0
    9aca:	1c19      	adds	r1, r3, #0
    9acc:	2308      	movs	r3, #8
    9ace:	18fb      	adds	r3, r7, r3
    9ad0:	00a2      	lsls	r2, r4, #2
    9ad2:	50d1      	str	r1, [r2, r3]
	for (j=0;j<3;j++){
    9ad4:	2337      	movs	r3, #55	; 0x37
    9ad6:	18fb      	adds	r3, r7, r3
    9ad8:	781a      	ldrb	r2, [r3, #0]
    9ada:	2337      	movs	r3, #55	; 0x37
    9adc:	18fb      	adds	r3, r7, r3
    9ade:	3201      	adds	r2, #1
    9ae0:	701a      	strb	r2, [r3, #0]
    9ae2:	2337      	movs	r3, #55	; 0x37
    9ae4:	18fb      	adds	r3, r7, r3
    9ae6:	781b      	ldrb	r3, [r3, #0]
    9ae8:	2b02      	cmp	r3, #2
    9aea:	d9ad      	bls.n	9a48 <cal_add_datapoint+0x3c>
	}
	calc_theta_XY(aXYZ, &foo, &aX_ang);
    9aec:	2328      	movs	r3, #40	; 0x28
    9aee:	18fa      	adds	r2, r7, r3
    9af0:	2320      	movs	r3, #32
    9af2:	18f9      	adds	r1, r7, r3
    9af4:	2314      	movs	r3, #20
    9af6:	18fb      	adds	r3, r7, r3
    9af8:	0018      	movs	r0, r3
    9afa:	4b7e      	ldr	r3, [pc, #504]	; (9cf4 <cal_add_datapoint+0x2e8>)
    9afc:	4798      	blx	r3
	calc_theta_XY(cXYZ, &foo, &cX_ang);
    9afe:	2324      	movs	r3, #36	; 0x24
    9b00:	18fa      	adds	r2, r7, r3
    9b02:	2320      	movs	r3, #32
    9b04:	18f9      	adds	r1, r7, r3
    9b06:	2308      	movs	r3, #8
    9b08:	18fb      	adds	r3, r7, r3
    9b0a:	0018      	movs	r0, r3
    9b0c:	4b79      	ldr	r3, [pc, #484]	; (9cf4 <cal_add_datapoint+0x2e8>)
    9b0e:	4798      	blx	r3
	aDelta = fabs(aX_ang - aX_ang_ref);
    9b10:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9b12:	4b73      	ldr	r3, [pc, #460]	; (9ce0 <cal_add_datapoint+0x2d4>)
    9b14:	6819      	ldr	r1, [r3, #0]
    9b16:	4b78      	ldr	r3, [pc, #480]	; (9cf8 <cal_add_datapoint+0x2ec>)
    9b18:	1c10      	adds	r0, r2, #0
    9b1a:	4798      	blx	r3
    9b1c:	1c03      	adds	r3, r0, #0
    9b1e:	005b      	lsls	r3, r3, #1
    9b20:	085b      	lsrs	r3, r3, #1
    9b22:	633b      	str	r3, [r7, #48]	; 0x30
	cDelta = fabs(cX_ang - cX_ang_ref);
    9b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    9b26:	4b70      	ldr	r3, [pc, #448]	; (9ce8 <cal_add_datapoint+0x2dc>)
    9b28:	6819      	ldr	r1, [r3, #0]
    9b2a:	4b73      	ldr	r3, [pc, #460]	; (9cf8 <cal_add_datapoint+0x2ec>)
    9b2c:	1c10      	adds	r0, r2, #0
    9b2e:	4798      	blx	r3
    9b30:	1c03      	adds	r3, r0, #0
    9b32:	005b      	lsls	r3, r3, #1
    9b34:	085b      	lsrs	r3, r3, #1
    9b36:	62fb      	str	r3, [r7, #44]	; 0x2c
	if ((aDelta>delta_min)||(cDelta>delta_min)||last_shot){
    9b38:	4b70      	ldr	r3, [pc, #448]	; (9cfc <cal_add_datapoint+0x2f0>)
    9b3a:	4971      	ldr	r1, [pc, #452]	; (9d00 <cal_add_datapoint+0x2f4>)
    9b3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
    9b3e:	4798      	blx	r3
    9b40:	1e03      	subs	r3, r0, #0
    9b42:	d10a      	bne.n	9b5a <cal_add_datapoint+0x14e>
    9b44:	4b6d      	ldr	r3, [pc, #436]	; (9cfc <cal_add_datapoint+0x2f0>)
    9b46:	496e      	ldr	r1, [pc, #440]	; (9d00 <cal_add_datapoint+0x2f4>)
    9b48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    9b4a:	4798      	blx	r3
    9b4c:	1e03      	subs	r3, r0, #0
    9b4e:	d104      	bne.n	9b5a <cal_add_datapoint+0x14e>
    9b50:	1cfb      	adds	r3, r7, #3
    9b52:	781b      	ldrb	r3, [r3, #0]
    9b54:	2b00      	cmp	r3, #0
    9b56:	d100      	bne.n	9b5a <cal_add_datapoint+0x14e>
    9b58:	e0b6      	b.n	9cc8 <cal_add_datapoint+0x2bc>
		// New Orientation Encountered
		if ((buf_points>= group_size)&&(ind_stack<(nbuf-buf_points))){//  Prevent buffer overflow
    9b5a:	4b60      	ldr	r3, [pc, #384]	; (9cdc <cal_add_datapoint+0x2d0>)
    9b5c:	781b      	ldrb	r3, [r3, #0]
    9b5e:	2b03      	cmp	r3, #3
    9b60:	d800      	bhi.n	9b64 <cal_add_datapoint+0x158>
    9b62:	e0a5      	b.n	9cb0 <cal_add_datapoint+0x2a4>
    9b64:	4b5b      	ldr	r3, [pc, #364]	; (9cd4 <cal_add_datapoint+0x2c8>)
    9b66:	781b      	ldrb	r3, [r3, #0]
    9b68:	001a      	movs	r2, r3
    9b6a:	4b5c      	ldr	r3, [pc, #368]	; (9cdc <cal_add_datapoint+0x2d0>)
    9b6c:	781b      	ldrb	r3, [r3, #0]
    9b6e:	0019      	movs	r1, r3
    9b70:	2350      	movs	r3, #80	; 0x50
    9b72:	1a5b      	subs	r3, r3, r1
    9b74:	429a      	cmp	r2, r3
    9b76:	db00      	blt.n	9b7a <cal_add_datapoint+0x16e>
    9b78:	e09a      	b.n	9cb0 <cal_add_datapoint+0x2a4>
			//  Enough points for new group, add to stack
			n_groups = n_groups+1;
    9b7a:	4b62      	ldr	r3, [pc, #392]	; (9d04 <cal_add_datapoint+0x2f8>)
    9b7c:	681b      	ldr	r3, [r3, #0]
    9b7e:	1c5a      	adds	r2, r3, #1
    9b80:	4b60      	ldr	r3, [pc, #384]	; (9d04 <cal_add_datapoint+0x2f8>)
    9b82:	601a      	str	r2, [r3, #0]
			n_points = n_points+group_size;
    9b84:	4b60      	ldr	r3, [pc, #384]	; (9d08 <cal_add_datapoint+0x2fc>)
    9b86:	681b      	ldr	r3, [r3, #0]
    9b88:	1d1a      	adds	r2, r3, #4
    9b8a:	4b5f      	ldr	r3, [pc, #380]	; (9d08 <cal_add_datapoint+0x2fc>)
    9b8c:	601a      	str	r2, [r3, #0]
			for (k=0; k<group_size;k++){
    9b8e:	2336      	movs	r3, #54	; 0x36
    9b90:	18fb      	adds	r3, r7, r3
    9b92:	2200      	movs	r2, #0
    9b94:	701a      	strb	r2, [r3, #0]
    9b96:	e085      	b.n	9ca4 <cal_add_datapoint+0x298>
				for (j=0;j<3;j++){
    9b98:	2337      	movs	r3, #55	; 0x37
    9b9a:	18fb      	adds	r3, r7, r3
    9b9c:	2200      	movs	r2, #0
    9b9e:	701a      	strb	r2, [r3, #0]
    9ba0:	e06e      	b.n	9c80 <cal_add_datapoint+0x274>
					a1raw[ind_stack][j] = a1buf[k][j];
    9ba2:	4b4c      	ldr	r3, [pc, #304]	; (9cd4 <cal_add_datapoint+0x2c8>)
    9ba4:	781b      	ldrb	r3, [r3, #0]
    9ba6:	001d      	movs	r5, r3
    9ba8:	2337      	movs	r3, #55	; 0x37
    9baa:	18fb      	adds	r3, r7, r3
    9bac:	7818      	ldrb	r0, [r3, #0]
    9bae:	2336      	movs	r3, #54	; 0x36
    9bb0:	18fb      	adds	r3, r7, r3
    9bb2:	781a      	ldrb	r2, [r3, #0]
    9bb4:	2337      	movs	r3, #55	; 0x37
    9bb6:	18fb      	adds	r3, r7, r3
    9bb8:	781c      	ldrb	r4, [r3, #0]
    9bba:	4954      	ldr	r1, [pc, #336]	; (9d0c <cal_add_datapoint+0x300>)
    9bbc:	0013      	movs	r3, r2
    9bbe:	005b      	lsls	r3, r3, #1
    9bc0:	189b      	adds	r3, r3, r2
    9bc2:	191b      	adds	r3, r3, r4
    9bc4:	009b      	lsls	r3, r3, #2
    9bc6:	5859      	ldr	r1, [r3, r1]
    9bc8:	4a51      	ldr	r2, [pc, #324]	; (9d10 <cal_add_datapoint+0x304>)
    9bca:	002b      	movs	r3, r5
    9bcc:	005b      	lsls	r3, r3, #1
    9bce:	195b      	adds	r3, r3, r5
    9bd0:	181b      	adds	r3, r3, r0
    9bd2:	009b      	lsls	r3, r3, #2
    9bd4:	5099      	str	r1, [r3, r2]
					a2raw[ind_stack][j] = a2buf[k][j];
    9bd6:	4b3f      	ldr	r3, [pc, #252]	; (9cd4 <cal_add_datapoint+0x2c8>)
    9bd8:	781b      	ldrb	r3, [r3, #0]
    9bda:	001d      	movs	r5, r3
    9bdc:	2337      	movs	r3, #55	; 0x37
    9bde:	18fb      	adds	r3, r7, r3
    9be0:	7818      	ldrb	r0, [r3, #0]
    9be2:	2336      	movs	r3, #54	; 0x36
    9be4:	18fb      	adds	r3, r7, r3
    9be6:	781a      	ldrb	r2, [r3, #0]
    9be8:	2337      	movs	r3, #55	; 0x37
    9bea:	18fb      	adds	r3, r7, r3
    9bec:	781c      	ldrb	r4, [r3, #0]
    9bee:	4949      	ldr	r1, [pc, #292]	; (9d14 <cal_add_datapoint+0x308>)
    9bf0:	0013      	movs	r3, r2
    9bf2:	005b      	lsls	r3, r3, #1
    9bf4:	189b      	adds	r3, r3, r2
    9bf6:	191b      	adds	r3, r3, r4
    9bf8:	009b      	lsls	r3, r3, #2
    9bfa:	5859      	ldr	r1, [r3, r1]
    9bfc:	4a46      	ldr	r2, [pc, #280]	; (9d18 <cal_add_datapoint+0x30c>)
    9bfe:	002b      	movs	r3, r5
    9c00:	005b      	lsls	r3, r3, #1
    9c02:	195b      	adds	r3, r3, r5
    9c04:	181b      	adds	r3, r3, r0
    9c06:	009b      	lsls	r3, r3, #2
    9c08:	5099      	str	r1, [r3, r2]
					c1raw[ind_stack][j] = c1buf[k][j];
    9c0a:	4b32      	ldr	r3, [pc, #200]	; (9cd4 <cal_add_datapoint+0x2c8>)
    9c0c:	781b      	ldrb	r3, [r3, #0]
    9c0e:	001d      	movs	r5, r3
    9c10:	2337      	movs	r3, #55	; 0x37
    9c12:	18fb      	adds	r3, r7, r3
    9c14:	7818      	ldrb	r0, [r3, #0]
    9c16:	2336      	movs	r3, #54	; 0x36
    9c18:	18fb      	adds	r3, r7, r3
    9c1a:	781a      	ldrb	r2, [r3, #0]
    9c1c:	2337      	movs	r3, #55	; 0x37
    9c1e:	18fb      	adds	r3, r7, r3
    9c20:	781c      	ldrb	r4, [r3, #0]
    9c22:	493e      	ldr	r1, [pc, #248]	; (9d1c <cal_add_datapoint+0x310>)
    9c24:	0013      	movs	r3, r2
    9c26:	005b      	lsls	r3, r3, #1
    9c28:	189b      	adds	r3, r3, r2
    9c2a:	191b      	adds	r3, r3, r4
    9c2c:	009b      	lsls	r3, r3, #2
    9c2e:	5859      	ldr	r1, [r3, r1]
    9c30:	4a3b      	ldr	r2, [pc, #236]	; (9d20 <cal_add_datapoint+0x314>)
    9c32:	002b      	movs	r3, r5
    9c34:	005b      	lsls	r3, r3, #1
    9c36:	195b      	adds	r3, r3, r5
    9c38:	181b      	adds	r3, r3, r0
    9c3a:	009b      	lsls	r3, r3, #2
    9c3c:	5099      	str	r1, [r3, r2]
					c2raw[ind_stack][j] = c2buf[k][j];
    9c3e:	4b25      	ldr	r3, [pc, #148]	; (9cd4 <cal_add_datapoint+0x2c8>)
    9c40:	781b      	ldrb	r3, [r3, #0]
    9c42:	001d      	movs	r5, r3
    9c44:	2337      	movs	r3, #55	; 0x37
    9c46:	18fb      	adds	r3, r7, r3
    9c48:	7818      	ldrb	r0, [r3, #0]
    9c4a:	2336      	movs	r3, #54	; 0x36
    9c4c:	18fb      	adds	r3, r7, r3
    9c4e:	781a      	ldrb	r2, [r3, #0]
    9c50:	2337      	movs	r3, #55	; 0x37
    9c52:	18fb      	adds	r3, r7, r3
    9c54:	781c      	ldrb	r4, [r3, #0]
    9c56:	4933      	ldr	r1, [pc, #204]	; (9d24 <cal_add_datapoint+0x318>)
    9c58:	0013      	movs	r3, r2
    9c5a:	005b      	lsls	r3, r3, #1
    9c5c:	189b      	adds	r3, r3, r2
    9c5e:	191b      	adds	r3, r3, r4
    9c60:	009b      	lsls	r3, r3, #2
    9c62:	5859      	ldr	r1, [r3, r1]
    9c64:	4a30      	ldr	r2, [pc, #192]	; (9d28 <cal_add_datapoint+0x31c>)
    9c66:	002b      	movs	r3, r5
    9c68:	005b      	lsls	r3, r3, #1
    9c6a:	195b      	adds	r3, r3, r5
    9c6c:	181b      	adds	r3, r3, r0
    9c6e:	009b      	lsls	r3, r3, #2
    9c70:	5099      	str	r1, [r3, r2]
				for (j=0;j<3;j++){
    9c72:	2337      	movs	r3, #55	; 0x37
    9c74:	18fb      	adds	r3, r7, r3
    9c76:	781a      	ldrb	r2, [r3, #0]
    9c78:	2337      	movs	r3, #55	; 0x37
    9c7a:	18fb      	adds	r3, r7, r3
    9c7c:	3201      	adds	r2, #1
    9c7e:	701a      	strb	r2, [r3, #0]
    9c80:	2337      	movs	r3, #55	; 0x37
    9c82:	18fb      	adds	r3, r7, r3
    9c84:	781b      	ldrb	r3, [r3, #0]
    9c86:	2b02      	cmp	r3, #2
    9c88:	d98b      	bls.n	9ba2 <cal_add_datapoint+0x196>
				}
				ind_stack = ind_stack+1;
    9c8a:	4b12      	ldr	r3, [pc, #72]	; (9cd4 <cal_add_datapoint+0x2c8>)
    9c8c:	781b      	ldrb	r3, [r3, #0]
    9c8e:	3301      	adds	r3, #1
    9c90:	b2da      	uxtb	r2, r3
    9c92:	4b10      	ldr	r3, [pc, #64]	; (9cd4 <cal_add_datapoint+0x2c8>)
    9c94:	701a      	strb	r2, [r3, #0]
			for (k=0; k<group_size;k++){
    9c96:	2336      	movs	r3, #54	; 0x36
    9c98:	18fb      	adds	r3, r7, r3
    9c9a:	781a      	ldrb	r2, [r3, #0]
    9c9c:	2336      	movs	r3, #54	; 0x36
    9c9e:	18fb      	adds	r3, r7, r3
    9ca0:	3201      	adds	r2, #1
    9ca2:	701a      	strb	r2, [r3, #0]
    9ca4:	2336      	movs	r3, #54	; 0x36
    9ca6:	18fb      	adds	r3, r7, r3
    9ca8:	781b      	ldrb	r3, [r3, #0]
    9caa:	2b03      	cmp	r3, #3
    9cac:	d800      	bhi.n	9cb0 <cal_add_datapoint+0x2a4>
    9cae:	e773      	b.n	9b98 <cal_add_datapoint+0x18c>
			}
		}
		ind_buf = 0;
    9cb0:	4b09      	ldr	r3, [pc, #36]	; (9cd8 <cal_add_datapoint+0x2cc>)
    9cb2:	2200      	movs	r2, #0
    9cb4:	701a      	strb	r2, [r3, #0]
		buf_points = 0;
    9cb6:	4b09      	ldr	r3, [pc, #36]	; (9cdc <cal_add_datapoint+0x2d0>)
    9cb8:	2200      	movs	r2, #0
    9cba:	701a      	strb	r2, [r3, #0]
		aX_ang_ref = aX_ang;
    9cbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9cbe:	4b08      	ldr	r3, [pc, #32]	; (9ce0 <cal_add_datapoint+0x2d4>)
    9cc0:	601a      	str	r2, [r3, #0]
		cX_ang_ref = cX_ang;
    9cc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    9cc4:	4b08      	ldr	r3, [pc, #32]	; (9ce8 <cal_add_datapoint+0x2dc>)
    9cc6:	601a      	str	r2, [r3, #0]
	}
	for (j=0;j<3;j++){
    9cc8:	2337      	movs	r3, #55	; 0x37
    9cca:	18fb      	adds	r3, r7, r3
    9ccc:	2200      	movs	r2, #0
    9cce:	701a      	strb	r2, [r3, #0]
    9cd0:	e087      	b.n	9de2 <cal_add_datapoint+0x3d6>
    9cd2:	46c0      	nop			; (mov r8, r8)
    9cd4:	20001a28 	.word	0x20001a28
    9cd8:	2000343c 	.word	0x2000343c
    9cdc:	200018e0 	.word	0x200018e0
    9ce0:	20000d08 	.word	0x20000d08
    9ce4:	43480000 	.word	0x43480000
    9ce8:	20000d0c 	.word	0x20000d0c
    9cec:	0001e461 	.word	0x0001e461
    9cf0:	0001eb65 	.word	0x0001eb65
    9cf4:	0000a425 	.word	0x0000a425
    9cf8:	0001eda5 	.word	0x0001eda5
    9cfc:	0001e2fd 	.word	0x0001e2fd
    9d00:	41200000 	.word	0x41200000
    9d04:	200018e4 	.word	0x200018e4
    9d08:	200027f8 	.word	0x200027f8
    9d0c:	20000d10 	.word	0x20000d10
    9d10:	200049dc 	.word	0x200049dc
    9d14:	20000d40 	.word	0x20000d40
    9d18:	20003b90 	.word	0x20003b90
    9d1c:	20000d70 	.word	0x20000d70
    9d20:	20001a2c 	.word	0x20001a2c
    9d24:	20000da0 	.word	0x20000da0
    9d28:	20001e50 	.word	0x20001e50
		a1buf[ind_buf][j] = meas_inst->a1xyz[j];
    9d2c:	4b3b      	ldr	r3, [pc, #236]	; (9e1c <cal_add_datapoint+0x410>)
    9d2e:	781b      	ldrb	r3, [r3, #0]
    9d30:	001c      	movs	r4, r3
    9d32:	2337      	movs	r3, #55	; 0x37
    9d34:	18fb      	adds	r3, r7, r3
    9d36:	7818      	ldrb	r0, [r3, #0]
    9d38:	2337      	movs	r3, #55	; 0x37
    9d3a:	18fb      	adds	r3, r7, r3
    9d3c:	781a      	ldrb	r2, [r3, #0]
    9d3e:	687b      	ldr	r3, [r7, #4]
    9d40:	3208      	adds	r2, #8
    9d42:	0092      	lsls	r2, r2, #2
    9d44:	58d1      	ldr	r1, [r2, r3]
    9d46:	4a36      	ldr	r2, [pc, #216]	; (9e20 <cal_add_datapoint+0x414>)
    9d48:	0023      	movs	r3, r4
    9d4a:	005b      	lsls	r3, r3, #1
    9d4c:	191b      	adds	r3, r3, r4
    9d4e:	181b      	adds	r3, r3, r0
    9d50:	009b      	lsls	r3, r3, #2
    9d52:	5099      	str	r1, [r3, r2]
		a2buf[ind_buf][j] = meas_inst->a2xyz[j];
    9d54:	4b31      	ldr	r3, [pc, #196]	; (9e1c <cal_add_datapoint+0x410>)
    9d56:	781b      	ldrb	r3, [r3, #0]
    9d58:	001c      	movs	r4, r3
    9d5a:	2337      	movs	r3, #55	; 0x37
    9d5c:	18fb      	adds	r3, r7, r3
    9d5e:	7818      	ldrb	r0, [r3, #0]
    9d60:	2337      	movs	r3, #55	; 0x37
    9d62:	18fb      	adds	r3, r7, r3
    9d64:	781b      	ldrb	r3, [r3, #0]
    9d66:	687a      	ldr	r2, [r7, #4]
    9d68:	330a      	adds	r3, #10
    9d6a:	009b      	lsls	r3, r3, #2
    9d6c:	18d3      	adds	r3, r2, r3
    9d6e:	3304      	adds	r3, #4
    9d70:	6819      	ldr	r1, [r3, #0]
    9d72:	4a2c      	ldr	r2, [pc, #176]	; (9e24 <cal_add_datapoint+0x418>)
    9d74:	0023      	movs	r3, r4
    9d76:	005b      	lsls	r3, r3, #1
    9d78:	191b      	adds	r3, r3, r4
    9d7a:	181b      	adds	r3, r3, r0
    9d7c:	009b      	lsls	r3, r3, #2
    9d7e:	5099      	str	r1, [r3, r2]
		c1buf[ind_buf][j] = meas_inst->c1xyz[j];
    9d80:	4b26      	ldr	r3, [pc, #152]	; (9e1c <cal_add_datapoint+0x410>)
    9d82:	781b      	ldrb	r3, [r3, #0]
    9d84:	001c      	movs	r4, r3
    9d86:	2337      	movs	r3, #55	; 0x37
    9d88:	18fb      	adds	r3, r7, r3
    9d8a:	7818      	ldrb	r0, [r3, #0]
    9d8c:	2337      	movs	r3, #55	; 0x37
    9d8e:	18fb      	adds	r3, r7, r3
    9d90:	781a      	ldrb	r2, [r3, #0]
    9d92:	687b      	ldr	r3, [r7, #4]
    9d94:	320e      	adds	r2, #14
    9d96:	0092      	lsls	r2, r2, #2
    9d98:	58d1      	ldr	r1, [r2, r3]
    9d9a:	4a23      	ldr	r2, [pc, #140]	; (9e28 <cal_add_datapoint+0x41c>)
    9d9c:	0023      	movs	r3, r4
    9d9e:	005b      	lsls	r3, r3, #1
    9da0:	191b      	adds	r3, r3, r4
    9da2:	181b      	adds	r3, r3, r0
    9da4:	009b      	lsls	r3, r3, #2
    9da6:	5099      	str	r1, [r3, r2]
		c2buf[ind_buf][j] = meas_inst->c2xyz[j];
    9da8:	4b1c      	ldr	r3, [pc, #112]	; (9e1c <cal_add_datapoint+0x410>)
    9daa:	781b      	ldrb	r3, [r3, #0]
    9dac:	001c      	movs	r4, r3
    9dae:	2337      	movs	r3, #55	; 0x37
    9db0:	18fb      	adds	r3, r7, r3
    9db2:	7818      	ldrb	r0, [r3, #0]
    9db4:	2337      	movs	r3, #55	; 0x37
    9db6:	18fb      	adds	r3, r7, r3
    9db8:	781b      	ldrb	r3, [r3, #0]
    9dba:	687a      	ldr	r2, [r7, #4]
    9dbc:	3310      	adds	r3, #16
    9dbe:	009b      	lsls	r3, r3, #2
    9dc0:	18d3      	adds	r3, r2, r3
    9dc2:	3304      	adds	r3, #4
    9dc4:	6819      	ldr	r1, [r3, #0]
    9dc6:	4a19      	ldr	r2, [pc, #100]	; (9e2c <cal_add_datapoint+0x420>)
    9dc8:	0023      	movs	r3, r4
    9dca:	005b      	lsls	r3, r3, #1
    9dcc:	191b      	adds	r3, r3, r4
    9dce:	181b      	adds	r3, r3, r0
    9dd0:	009b      	lsls	r3, r3, #2
    9dd2:	5099      	str	r1, [r3, r2]
	for (j=0;j<3;j++){
    9dd4:	2337      	movs	r3, #55	; 0x37
    9dd6:	18fb      	adds	r3, r7, r3
    9dd8:	781a      	ldrb	r2, [r3, #0]
    9dda:	2337      	movs	r3, #55	; 0x37
    9ddc:	18fb      	adds	r3, r7, r3
    9dde:	3201      	adds	r2, #1
    9de0:	701a      	strb	r2, [r3, #0]
    9de2:	2337      	movs	r3, #55	; 0x37
    9de4:	18fb      	adds	r3, r7, r3
    9de6:	781b      	ldrb	r3, [r3, #0]
    9de8:	2b02      	cmp	r3, #2
    9dea:	d99f      	bls.n	9d2c <cal_add_datapoint+0x320>
	}
	buf_points = buf_points+1;
    9dec:	4b10      	ldr	r3, [pc, #64]	; (9e30 <cal_add_datapoint+0x424>)
    9dee:	781b      	ldrb	r3, [r3, #0]
    9df0:	3301      	adds	r3, #1
    9df2:	b2da      	uxtb	r2, r3
    9df4:	4b0e      	ldr	r3, [pc, #56]	; (9e30 <cal_add_datapoint+0x424>)
    9df6:	701a      	strb	r2, [r3, #0]
	ind_buf = ind_buf+1;
    9df8:	4b08      	ldr	r3, [pc, #32]	; (9e1c <cal_add_datapoint+0x410>)
    9dfa:	781b      	ldrb	r3, [r3, #0]
    9dfc:	3301      	adds	r3, #1
    9dfe:	b2da      	uxtb	r2, r3
    9e00:	4b06      	ldr	r3, [pc, #24]	; (9e1c <cal_add_datapoint+0x410>)
    9e02:	701a      	strb	r2, [r3, #0]
	if (ind_buf>=group_size){
    9e04:	4b05      	ldr	r3, [pc, #20]	; (9e1c <cal_add_datapoint+0x410>)
    9e06:	781b      	ldrb	r3, [r3, #0]
    9e08:	2b03      	cmp	r3, #3
    9e0a:	d902      	bls.n	9e12 <cal_add_datapoint+0x406>
		ind_buf = 0;
    9e0c:	4b03      	ldr	r3, [pc, #12]	; (9e1c <cal_add_datapoint+0x410>)
    9e0e:	2200      	movs	r2, #0
    9e10:	701a      	strb	r2, [r3, #0]
	}
}
    9e12:	46c0      	nop			; (mov r8, r8)
    9e14:	46bd      	mov	sp, r7
    9e16:	b00e      	add	sp, #56	; 0x38
    9e18:	bdb0      	pop	{r4, r5, r7, pc}
    9e1a:	46c0      	nop			; (mov r8, r8)
    9e1c:	2000343c 	.word	0x2000343c
    9e20:	20000d10 	.word	0x20000d10
    9e24:	20000d40 	.word	0x20000d40
    9e28:	20000d70 	.word	0x20000d70
    9e2c:	20000da0 	.word	0x20000da0
    9e30:	200018e0 	.word	0x200018e0

00009e34 <calc_orientation>:


void calc_orientation(struct MEASUREMENT *meas_inst){
    9e34:	b5b0      	push	{r4, r5, r7, lr}
    9e36:	b08c      	sub	sp, #48	; 0x30
    9e38:	af02      	add	r7, sp, #8
    9e3a:	6078      	str	r0, [r7, #4]
	uint8_t i;
	float aXYZ[3], cXYZ[3];
	
	//  Take average reading from both sensors for each axis
	for (i=0;i<3;i++){
    9e3c:	2327      	movs	r3, #39	; 0x27
    9e3e:	18fb      	adds	r3, r7, r3
    9e40:	2200      	movs	r2, #0
    9e42:	701a      	strb	r2, [r3, #0]
    9e44:	e04c      	b.n	9ee0 <calc_orientation+0xac>
		aXYZ[i] = 0.5*(meas_inst->a1xyz[i]+meas_inst->a2xyz[i]);
    9e46:	2327      	movs	r3, #39	; 0x27
    9e48:	18fb      	adds	r3, r7, r3
    9e4a:	781c      	ldrb	r4, [r3, #0]
    9e4c:	2327      	movs	r3, #39	; 0x27
    9e4e:	18fb      	adds	r3, r7, r3
    9e50:	781a      	ldrb	r2, [r3, #0]
    9e52:	687b      	ldr	r3, [r7, #4]
    9e54:	3208      	adds	r2, #8
    9e56:	0092      	lsls	r2, r2, #2
    9e58:	58d0      	ldr	r0, [r2, r3]
    9e5a:	2327      	movs	r3, #39	; 0x27
    9e5c:	18fb      	adds	r3, r7, r3
    9e5e:	781b      	ldrb	r3, [r3, #0]
    9e60:	687a      	ldr	r2, [r7, #4]
    9e62:	330a      	adds	r3, #10
    9e64:	009b      	lsls	r3, r3, #2
    9e66:	18d3      	adds	r3, r2, r3
    9e68:	3304      	adds	r3, #4
    9e6a:	681a      	ldr	r2, [r3, #0]
    9e6c:	4b2b      	ldr	r3, [pc, #172]	; (9f1c <calc_orientation+0xe8>)
    9e6e:	1c11      	adds	r1, r2, #0
    9e70:	4798      	blx	r3
    9e72:	1c03      	adds	r3, r0, #0
    9e74:	1c1a      	adds	r2, r3, #0
    9e76:	4b2a      	ldr	r3, [pc, #168]	; (9f20 <calc_orientation+0xec>)
    9e78:	21fc      	movs	r1, #252	; 0xfc
    9e7a:	0589      	lsls	r1, r1, #22
    9e7c:	1c10      	adds	r0, r2, #0
    9e7e:	4798      	blx	r3
    9e80:	1c03      	adds	r3, r0, #0
    9e82:	1c19      	adds	r1, r3, #0
    9e84:	2318      	movs	r3, #24
    9e86:	18fb      	adds	r3, r7, r3
    9e88:	00a2      	lsls	r2, r4, #2
    9e8a:	50d1      	str	r1, [r2, r3]
		cXYZ[i] = 0.5*(meas_inst->c1xyz[i]+meas_inst->c2xyz[i]);
    9e8c:	2327      	movs	r3, #39	; 0x27
    9e8e:	18fb      	adds	r3, r7, r3
    9e90:	781c      	ldrb	r4, [r3, #0]
    9e92:	2327      	movs	r3, #39	; 0x27
    9e94:	18fb      	adds	r3, r7, r3
    9e96:	781a      	ldrb	r2, [r3, #0]
    9e98:	687b      	ldr	r3, [r7, #4]
    9e9a:	320e      	adds	r2, #14
    9e9c:	0092      	lsls	r2, r2, #2
    9e9e:	58d0      	ldr	r0, [r2, r3]
    9ea0:	2327      	movs	r3, #39	; 0x27
    9ea2:	18fb      	adds	r3, r7, r3
    9ea4:	781b      	ldrb	r3, [r3, #0]
    9ea6:	687a      	ldr	r2, [r7, #4]
    9ea8:	3310      	adds	r3, #16
    9eaa:	009b      	lsls	r3, r3, #2
    9eac:	18d3      	adds	r3, r2, r3
    9eae:	3304      	adds	r3, #4
    9eb0:	681a      	ldr	r2, [r3, #0]
    9eb2:	4b1a      	ldr	r3, [pc, #104]	; (9f1c <calc_orientation+0xe8>)
    9eb4:	1c11      	adds	r1, r2, #0
    9eb6:	4798      	blx	r3
    9eb8:	1c03      	adds	r3, r0, #0
    9eba:	1c1a      	adds	r2, r3, #0
    9ebc:	4b18      	ldr	r3, [pc, #96]	; (9f20 <calc_orientation+0xec>)
    9ebe:	21fc      	movs	r1, #252	; 0xfc
    9ec0:	0589      	lsls	r1, r1, #22
    9ec2:	1c10      	adds	r0, r2, #0
    9ec4:	4798      	blx	r3
    9ec6:	1c03      	adds	r3, r0, #0
    9ec8:	1c19      	adds	r1, r3, #0
    9eca:	230c      	movs	r3, #12
    9ecc:	18fb      	adds	r3, r7, r3
    9ece:	00a2      	lsls	r2, r4, #2
    9ed0:	50d1      	str	r1, [r2, r3]
	for (i=0;i<3;i++){
    9ed2:	2327      	movs	r3, #39	; 0x27
    9ed4:	18fb      	adds	r3, r7, r3
    9ed6:	781a      	ldrb	r2, [r3, #0]
    9ed8:	2327      	movs	r3, #39	; 0x27
    9eda:	18fb      	adds	r3, r7, r3
    9edc:	3201      	adds	r2, #1
    9ede:	701a      	strb	r2, [r3, #0]
    9ee0:	2327      	movs	r3, #39	; 0x27
    9ee2:	18fb      	adds	r3, r7, r3
    9ee4:	781b      	ldrb	r3, [r3, #0]
    9ee6:	2b02      	cmp	r3, #2
    9ee8:	d9ad      	bls.n	9e46 <calc_orientation+0x12>
	}
	
	//  Calculate Aximuth, Inclination, and Roll
	calc_azm_inc_roll_dec(aXYZ, cXYZ,
    9eea:	687b      	ldr	r3, [r7, #4]
    9eec:	330c      	adds	r3, #12
    9eee:	001c      	movs	r4, r3
    9ef0:	687b      	ldr	r3, [r7, #4]
    9ef2:	3310      	adds	r3, #16
    9ef4:	001d      	movs	r5, r3
    9ef6:	687b      	ldr	r3, [r7, #4]
    9ef8:	3314      	adds	r3, #20
    9efa:	687a      	ldr	r2, [r7, #4]
    9efc:	3218      	adds	r2, #24
    9efe:	210c      	movs	r1, #12
    9f00:	1879      	adds	r1, r7, r1
    9f02:	2018      	movs	r0, #24
    9f04:	1838      	adds	r0, r7, r0
    9f06:	9201      	str	r2, [sp, #4]
    9f08:	9300      	str	r3, [sp, #0]
    9f0a:	002b      	movs	r3, r5
    9f0c:	0022      	movs	r2, r4
    9f0e:	4c05      	ldr	r4, [pc, #20]	; (9f24 <calc_orientation+0xf0>)
    9f10:	47a0      	blx	r4
		&meas_inst->azimuth,		&meas_inst->inclination,
		&meas_inst->roll,		&meas_inst->declination);
	
	
}
    9f12:	46c0      	nop			; (mov r8, r8)
    9f14:	46bd      	mov	sp, r7
    9f16:	b00a      	add	sp, #40	; 0x28
    9f18:	bdb0      	pop	{r4, r5, r7, pc}
    9f1a:	46c0      	nop			; (mov r8, r8)
    9f1c:	0001e461 	.word	0x0001e461
    9f20:	0001eb65 	.word	0x0001eb65
    9f24:	0000a239 	.word	0x0000a239

00009f28 <rotvec_theta_XY>:
	mat_mult_33_31(rotM, rotXYZ, rotXYZ);
	
	
}

void rotvec_theta_XY(float XYZ[3], float rotXYZ[3], float *thetaX, float *thetaY){
    9f28:	b590      	push	{r4, r7, lr}
    9f2a:	b091      	sub	sp, #68	; 0x44
    9f2c:	af00      	add	r7, sp, #0
    9f2e:	60f8      	str	r0, [r7, #12]
    9f30:	60b9      	str	r1, [r7, #8]
    9f32:	607a      	str	r2, [r7, #4]
    9f34:	603b      	str	r3, [r7, #0]
	float rotM[3][3];
	float rthetaX;
	float rthetaY;
	
	rthetaX = *thetaX*deg2rad;
    9f36:	687b      	ldr	r3, [r7, #4]
    9f38:	681a      	ldr	r2, [r3, #0]
    9f3a:	4b75      	ldr	r3, [pc, #468]	; (a110 <rotvec_theta_XY+0x1e8>)
    9f3c:	6819      	ldr	r1, [r3, #0]
    9f3e:	4b75      	ldr	r3, [pc, #468]	; (a114 <rotvec_theta_XY+0x1ec>)
    9f40:	1c10      	adds	r0, r2, #0
    9f42:	4798      	blx	r3
    9f44:	1c03      	adds	r3, r0, #0
    9f46:	63fb      	str	r3, [r7, #60]	; 0x3c
	rthetaY = *thetaY*deg2rad;
    9f48:	683b      	ldr	r3, [r7, #0]
    9f4a:	681a      	ldr	r2, [r3, #0]
    9f4c:	4b70      	ldr	r3, [pc, #448]	; (a110 <rotvec_theta_XY+0x1e8>)
    9f4e:	6819      	ldr	r1, [r3, #0]
    9f50:	4b70      	ldr	r3, [pc, #448]	; (a114 <rotvec_theta_XY+0x1ec>)
    9f52:	1c10      	adds	r0, r2, #0
    9f54:	4798      	blx	r3
    9f56:	1c03      	adds	r3, r0, #0
    9f58:	63bb      	str	r3, [r7, #56]	; 0x38
	
	// Product of two rotation matrixes, R(thetaX)*R(thetaY)
	//  Rotate around X axis
	rotM[0][0] = 1;
    9f5a:	2314      	movs	r3, #20
    9f5c:	18fb      	adds	r3, r7, r3
    9f5e:	22fe      	movs	r2, #254	; 0xfe
    9f60:	0592      	lsls	r2, r2, #22
    9f62:	601a      	str	r2, [r3, #0]
	rotM[0][1] = 0;
    9f64:	2314      	movs	r3, #20
    9f66:	18fb      	adds	r3, r7, r3
    9f68:	2200      	movs	r2, #0
    9f6a:	605a      	str	r2, [r3, #4]
	rotM[0][2] = 0;
    9f6c:	2314      	movs	r3, #20
    9f6e:	18fb      	adds	r3, r7, r3
    9f70:	2200      	movs	r2, #0
    9f72:	609a      	str	r2, [r3, #8]
	rotM[1][0] = 0;
    9f74:	2314      	movs	r3, #20
    9f76:	18fb      	adds	r3, r7, r3
    9f78:	2200      	movs	r2, #0
    9f7a:	60da      	str	r2, [r3, #12]
	rotM[1][1] = cos(rthetaX);
    9f7c:	4b66      	ldr	r3, [pc, #408]	; (a118 <rotvec_theta_XY+0x1f0>)
    9f7e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    9f80:	4798      	blx	r3
    9f82:	0003      	movs	r3, r0
    9f84:	000c      	movs	r4, r1
    9f86:	0018      	movs	r0, r3
    9f88:	0021      	movs	r1, r4
    9f8a:	4b64      	ldr	r3, [pc, #400]	; (a11c <rotvec_theta_XY+0x1f4>)
    9f8c:	4798      	blx	r3
    9f8e:	000a      	movs	r2, r1
    9f90:	0001      	movs	r1, r0
    9f92:	4b63      	ldr	r3, [pc, #396]	; (a120 <rotvec_theta_XY+0x1f8>)
    9f94:	0008      	movs	r0, r1
    9f96:	0011      	movs	r1, r2
    9f98:	4798      	blx	r3
    9f9a:	1c02      	adds	r2, r0, #0
    9f9c:	2314      	movs	r3, #20
    9f9e:	18fb      	adds	r3, r7, r3
    9fa0:	611a      	str	r2, [r3, #16]
	rotM[1][2] = -1*sin(rthetaX);
    9fa2:	4b5d      	ldr	r3, [pc, #372]	; (a118 <rotvec_theta_XY+0x1f0>)
    9fa4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    9fa6:	4798      	blx	r3
    9fa8:	0003      	movs	r3, r0
    9faa:	000c      	movs	r4, r1
    9fac:	0018      	movs	r0, r3
    9fae:	0021      	movs	r1, r4
    9fb0:	4b5c      	ldr	r3, [pc, #368]	; (a124 <rotvec_theta_XY+0x1fc>)
    9fb2:	4798      	blx	r3
    9fb4:	000a      	movs	r2, r1
    9fb6:	0001      	movs	r1, r0
    9fb8:	4b59      	ldr	r3, [pc, #356]	; (a120 <rotvec_theta_XY+0x1f8>)
    9fba:	0008      	movs	r0, r1
    9fbc:	0011      	movs	r1, r2
    9fbe:	4798      	blx	r3
    9fc0:	1c02      	adds	r2, r0, #0
    9fc2:	2380      	movs	r3, #128	; 0x80
    9fc4:	061b      	lsls	r3, r3, #24
    9fc6:	405a      	eors	r2, r3
    9fc8:	2314      	movs	r3, #20
    9fca:	18fb      	adds	r3, r7, r3
    9fcc:	615a      	str	r2, [r3, #20]
	rotM[2][0] = 0;
    9fce:	2314      	movs	r3, #20
    9fd0:	18fb      	adds	r3, r7, r3
    9fd2:	2200      	movs	r2, #0
    9fd4:	619a      	str	r2, [r3, #24]
	rotM[2][1] = sin(rthetaX);
    9fd6:	4b50      	ldr	r3, [pc, #320]	; (a118 <rotvec_theta_XY+0x1f0>)
    9fd8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    9fda:	4798      	blx	r3
    9fdc:	0003      	movs	r3, r0
    9fde:	000c      	movs	r4, r1
    9fe0:	0018      	movs	r0, r3
    9fe2:	0021      	movs	r1, r4
    9fe4:	4b4f      	ldr	r3, [pc, #316]	; (a124 <rotvec_theta_XY+0x1fc>)
    9fe6:	4798      	blx	r3
    9fe8:	000a      	movs	r2, r1
    9fea:	0001      	movs	r1, r0
    9fec:	4b4c      	ldr	r3, [pc, #304]	; (a120 <rotvec_theta_XY+0x1f8>)
    9fee:	0008      	movs	r0, r1
    9ff0:	0011      	movs	r1, r2
    9ff2:	4798      	blx	r3
    9ff4:	1c02      	adds	r2, r0, #0
    9ff6:	2314      	movs	r3, #20
    9ff8:	18fb      	adds	r3, r7, r3
    9ffa:	61da      	str	r2, [r3, #28]
	rotM[2][2] = cos(rthetaX);
    9ffc:	4b46      	ldr	r3, [pc, #280]	; (a118 <rotvec_theta_XY+0x1f0>)
    9ffe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    a000:	4798      	blx	r3
    a002:	0003      	movs	r3, r0
    a004:	000c      	movs	r4, r1
    a006:	0018      	movs	r0, r3
    a008:	0021      	movs	r1, r4
    a00a:	4b44      	ldr	r3, [pc, #272]	; (a11c <rotvec_theta_XY+0x1f4>)
    a00c:	4798      	blx	r3
    a00e:	000a      	movs	r2, r1
    a010:	0001      	movs	r1, r0
    a012:	4b43      	ldr	r3, [pc, #268]	; (a120 <rotvec_theta_XY+0x1f8>)
    a014:	0008      	movs	r0, r1
    a016:	0011      	movs	r1, r2
    a018:	4798      	blx	r3
    a01a:	1c02      	adds	r2, r0, #0
    a01c:	2314      	movs	r3, #20
    a01e:	18fb      	adds	r3, r7, r3
    a020:	621a      	str	r2, [r3, #32]
	mat_mult_33_31(rotM, XYZ, rotXYZ);
    a022:	68ba      	ldr	r2, [r7, #8]
    a024:	68f9      	ldr	r1, [r7, #12]
    a026:	2314      	movs	r3, #20
    a028:	18fb      	adds	r3, r7, r3
    a02a:	0018      	movs	r0, r3
    a02c:	4b3e      	ldr	r3, [pc, #248]	; (a128 <rotvec_theta_XY+0x200>)
    a02e:	4798      	blx	r3
	
	//  Rotate about Y axis
	rotM[0][0] = cos(rthetaY);
    a030:	4b39      	ldr	r3, [pc, #228]	; (a118 <rotvec_theta_XY+0x1f0>)
    a032:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    a034:	4798      	blx	r3
    a036:	0003      	movs	r3, r0
    a038:	000c      	movs	r4, r1
    a03a:	0018      	movs	r0, r3
    a03c:	0021      	movs	r1, r4
    a03e:	4b37      	ldr	r3, [pc, #220]	; (a11c <rotvec_theta_XY+0x1f4>)
    a040:	4798      	blx	r3
    a042:	000a      	movs	r2, r1
    a044:	0001      	movs	r1, r0
    a046:	4b36      	ldr	r3, [pc, #216]	; (a120 <rotvec_theta_XY+0x1f8>)
    a048:	0008      	movs	r0, r1
    a04a:	0011      	movs	r1, r2
    a04c:	4798      	blx	r3
    a04e:	1c02      	adds	r2, r0, #0
    a050:	2314      	movs	r3, #20
    a052:	18fb      	adds	r3, r7, r3
    a054:	601a      	str	r2, [r3, #0]
	rotM[0][1] = 0;
    a056:	2314      	movs	r3, #20
    a058:	18fb      	adds	r3, r7, r3
    a05a:	2200      	movs	r2, #0
    a05c:	605a      	str	r2, [r3, #4]
	rotM[0][2] = sin(rthetaY);
    a05e:	4b2e      	ldr	r3, [pc, #184]	; (a118 <rotvec_theta_XY+0x1f0>)
    a060:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    a062:	4798      	blx	r3
    a064:	0003      	movs	r3, r0
    a066:	000c      	movs	r4, r1
    a068:	0018      	movs	r0, r3
    a06a:	0021      	movs	r1, r4
    a06c:	4b2d      	ldr	r3, [pc, #180]	; (a124 <rotvec_theta_XY+0x1fc>)
    a06e:	4798      	blx	r3
    a070:	000a      	movs	r2, r1
    a072:	0001      	movs	r1, r0
    a074:	4b2a      	ldr	r3, [pc, #168]	; (a120 <rotvec_theta_XY+0x1f8>)
    a076:	0008      	movs	r0, r1
    a078:	0011      	movs	r1, r2
    a07a:	4798      	blx	r3
    a07c:	1c02      	adds	r2, r0, #0
    a07e:	2314      	movs	r3, #20
    a080:	18fb      	adds	r3, r7, r3
    a082:	609a      	str	r2, [r3, #8]
	rotM[1][0] = 0;
    a084:	2314      	movs	r3, #20
    a086:	18fb      	adds	r3, r7, r3
    a088:	2200      	movs	r2, #0
    a08a:	60da      	str	r2, [r3, #12]
	rotM[1][1] = 1;
    a08c:	2314      	movs	r3, #20
    a08e:	18fb      	adds	r3, r7, r3
    a090:	22fe      	movs	r2, #254	; 0xfe
    a092:	0592      	lsls	r2, r2, #22
    a094:	611a      	str	r2, [r3, #16]
	rotM[1][2] = 0;
    a096:	2314      	movs	r3, #20
    a098:	18fb      	adds	r3, r7, r3
    a09a:	2200      	movs	r2, #0
    a09c:	615a      	str	r2, [r3, #20]
	rotM[2][0] = -1*sin(rthetaY);
    a09e:	4b1e      	ldr	r3, [pc, #120]	; (a118 <rotvec_theta_XY+0x1f0>)
    a0a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    a0a2:	4798      	blx	r3
    a0a4:	0003      	movs	r3, r0
    a0a6:	000c      	movs	r4, r1
    a0a8:	0018      	movs	r0, r3
    a0aa:	0021      	movs	r1, r4
    a0ac:	4b1d      	ldr	r3, [pc, #116]	; (a124 <rotvec_theta_XY+0x1fc>)
    a0ae:	4798      	blx	r3
    a0b0:	000a      	movs	r2, r1
    a0b2:	0001      	movs	r1, r0
    a0b4:	4b1a      	ldr	r3, [pc, #104]	; (a120 <rotvec_theta_XY+0x1f8>)
    a0b6:	0008      	movs	r0, r1
    a0b8:	0011      	movs	r1, r2
    a0ba:	4798      	blx	r3
    a0bc:	1c02      	adds	r2, r0, #0
    a0be:	2380      	movs	r3, #128	; 0x80
    a0c0:	061b      	lsls	r3, r3, #24
    a0c2:	405a      	eors	r2, r3
    a0c4:	2314      	movs	r3, #20
    a0c6:	18fb      	adds	r3, r7, r3
    a0c8:	619a      	str	r2, [r3, #24]
	rotM[2][1] = 0;
    a0ca:	2314      	movs	r3, #20
    a0cc:	18fb      	adds	r3, r7, r3
    a0ce:	2200      	movs	r2, #0
    a0d0:	61da      	str	r2, [r3, #28]
	rotM[2][2] = cos(rthetaY);
    a0d2:	4b11      	ldr	r3, [pc, #68]	; (a118 <rotvec_theta_XY+0x1f0>)
    a0d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    a0d6:	4798      	blx	r3
    a0d8:	0003      	movs	r3, r0
    a0da:	000c      	movs	r4, r1
    a0dc:	0018      	movs	r0, r3
    a0de:	0021      	movs	r1, r4
    a0e0:	4b0e      	ldr	r3, [pc, #56]	; (a11c <rotvec_theta_XY+0x1f4>)
    a0e2:	4798      	blx	r3
    a0e4:	000a      	movs	r2, r1
    a0e6:	0001      	movs	r1, r0
    a0e8:	4b0d      	ldr	r3, [pc, #52]	; (a120 <rotvec_theta_XY+0x1f8>)
    a0ea:	0008      	movs	r0, r1
    a0ec:	0011      	movs	r1, r2
    a0ee:	4798      	blx	r3
    a0f0:	1c02      	adds	r2, r0, #0
    a0f2:	2314      	movs	r3, #20
    a0f4:	18fb      	adds	r3, r7, r3
    a0f6:	621a      	str	r2, [r3, #32]
	mat_mult_33_31(rotM, rotXYZ, rotXYZ);
    a0f8:	68ba      	ldr	r2, [r7, #8]
    a0fa:	68b9      	ldr	r1, [r7, #8]
    a0fc:	2314      	movs	r3, #20
    a0fe:	18fb      	adds	r3, r7, r3
    a100:	0018      	movs	r0, r3
    a102:	4b09      	ldr	r3, [pc, #36]	; (a128 <rotvec_theta_XY+0x200>)
    a104:	4798      	blx	r3


}
    a106:	46c0      	nop			; (mov r8, r8)
    a108:	46bd      	mov	sp, r7
    a10a:	b011      	add	sp, #68	; 0x44
    a10c:	bd90      	pop	{r4, r7, pc}
    a10e:	46c0      	nop			; (mov r8, r8)
    a110:	00025fb8 	.word	0x00025fb8
    a114:	0001eb65 	.word	0x0001eb65
    a118:	00020d99 	.word	0x00020d99
    a11c:	0001b4f5 	.word	0x0001b4f5
    a120:	00020e3d 	.word	0x00020e3d
    a124:	0001b6b1 	.word	0x0001b6b1
    a128:	0000a12d 	.word	0x0000a12d

0000a12c <mat_mult_33_31>:


void mat_mult_33_31(float mat33[3][3], float mat3[3], float ret3[3]){
    a12c:	b5b0      	push	{r4, r5, r7, lr}
    a12e:	b088      	sub	sp, #32
    a130:	af00      	add	r7, sp, #0
    a132:	60f8      	str	r0, [r7, #12]
    a134:	60b9      	str	r1, [r7, #8]
    a136:	607a      	str	r2, [r7, #4]
	uint8_t i, j;
	float temp[3];
	
	//  Multiply 3x3 mat33 matrix by 3x1 mat3 matrix
	for(i=0;i<3;i++){
    a138:	231f      	movs	r3, #31
    a13a:	18fb      	adds	r3, r7, r3
    a13c:	2200      	movs	r2, #0
    a13e:	701a      	strb	r2, [r3, #0]
    a140:	e04e      	b.n	a1e0 <mat_mult_33_31+0xb4>
		temp[i] = 0;
    a142:	231f      	movs	r3, #31
    a144:	18fb      	adds	r3, r7, r3
    a146:	781a      	ldrb	r2, [r3, #0]
    a148:	2310      	movs	r3, #16
    a14a:	18fb      	adds	r3, r7, r3
    a14c:	0092      	lsls	r2, r2, #2
    a14e:	2100      	movs	r1, #0
    a150:	50d1      	str	r1, [r2, r3]
		for (j=0;j<3;j++){
    a152:	231e      	movs	r3, #30
    a154:	18fb      	adds	r3, r7, r3
    a156:	2200      	movs	r2, #0
    a158:	701a      	strb	r2, [r3, #0]
    a15a:	e035      	b.n	a1c8 <mat_mult_33_31+0x9c>
			temp[i] = temp[i]+mat33[i][j]*mat3[j];
    a15c:	231f      	movs	r3, #31
    a15e:	18fb      	adds	r3, r7, r3
    a160:	781c      	ldrb	r4, [r3, #0]
    a162:	231f      	movs	r3, #31
    a164:	18fb      	adds	r3, r7, r3
    a166:	781a      	ldrb	r2, [r3, #0]
    a168:	2310      	movs	r3, #16
    a16a:	18fb      	adds	r3, r7, r3
    a16c:	0092      	lsls	r2, r2, #2
    a16e:	58d5      	ldr	r5, [r2, r3]
    a170:	231f      	movs	r3, #31
    a172:	18fb      	adds	r3, r7, r3
    a174:	781a      	ldrb	r2, [r3, #0]
    a176:	0013      	movs	r3, r2
    a178:	005b      	lsls	r3, r3, #1
    a17a:	189b      	adds	r3, r3, r2
    a17c:	009b      	lsls	r3, r3, #2
    a17e:	001a      	movs	r2, r3
    a180:	68fb      	ldr	r3, [r7, #12]
    a182:	189b      	adds	r3, r3, r2
    a184:	221e      	movs	r2, #30
    a186:	18ba      	adds	r2, r7, r2
    a188:	7812      	ldrb	r2, [r2, #0]
    a18a:	0092      	lsls	r2, r2, #2
    a18c:	58d0      	ldr	r0, [r2, r3]
    a18e:	231e      	movs	r3, #30
    a190:	18fb      	adds	r3, r7, r3
    a192:	781b      	ldrb	r3, [r3, #0]
    a194:	009b      	lsls	r3, r3, #2
    a196:	68ba      	ldr	r2, [r7, #8]
    a198:	18d3      	adds	r3, r2, r3
    a19a:	681a      	ldr	r2, [r3, #0]
    a19c:	4b24      	ldr	r3, [pc, #144]	; (a230 <mat_mult_33_31+0x104>)
    a19e:	1c11      	adds	r1, r2, #0
    a1a0:	4798      	blx	r3
    a1a2:	1c03      	adds	r3, r0, #0
    a1a4:	1c1a      	adds	r2, r3, #0
    a1a6:	4b23      	ldr	r3, [pc, #140]	; (a234 <mat_mult_33_31+0x108>)
    a1a8:	1c11      	adds	r1, r2, #0
    a1aa:	1c28      	adds	r0, r5, #0
    a1ac:	4798      	blx	r3
    a1ae:	1c03      	adds	r3, r0, #0
    a1b0:	1c19      	adds	r1, r3, #0
    a1b2:	2310      	movs	r3, #16
    a1b4:	18fb      	adds	r3, r7, r3
    a1b6:	00a2      	lsls	r2, r4, #2
    a1b8:	50d1      	str	r1, [r2, r3]
		for (j=0;j<3;j++){
    a1ba:	231e      	movs	r3, #30
    a1bc:	18fb      	adds	r3, r7, r3
    a1be:	781a      	ldrb	r2, [r3, #0]
    a1c0:	231e      	movs	r3, #30
    a1c2:	18fb      	adds	r3, r7, r3
    a1c4:	3201      	adds	r2, #1
    a1c6:	701a      	strb	r2, [r3, #0]
    a1c8:	231e      	movs	r3, #30
    a1ca:	18fb      	adds	r3, r7, r3
    a1cc:	781b      	ldrb	r3, [r3, #0]
    a1ce:	2b02      	cmp	r3, #2
    a1d0:	d9c4      	bls.n	a15c <mat_mult_33_31+0x30>
	for(i=0;i<3;i++){
    a1d2:	231f      	movs	r3, #31
    a1d4:	18fb      	adds	r3, r7, r3
    a1d6:	781a      	ldrb	r2, [r3, #0]
    a1d8:	231f      	movs	r3, #31
    a1da:	18fb      	adds	r3, r7, r3
    a1dc:	3201      	adds	r2, #1
    a1de:	701a      	strb	r2, [r3, #0]
    a1e0:	231f      	movs	r3, #31
    a1e2:	18fb      	adds	r3, r7, r3
    a1e4:	781b      	ldrb	r3, [r3, #0]
    a1e6:	2b02      	cmp	r3, #2
    a1e8:	d9ab      	bls.n	a142 <mat_mult_33_31+0x16>
		}

	}
	//  Copy temp matrix back into ret3 matrix
	for(i=0;i<3;i++){
    a1ea:	231f      	movs	r3, #31
    a1ec:	18fb      	adds	r3, r7, r3
    a1ee:	2200      	movs	r2, #0
    a1f0:	701a      	strb	r2, [r3, #0]
    a1f2:	e014      	b.n	a21e <mat_mult_33_31+0xf2>
		ret3[i] = temp[i];
    a1f4:	231f      	movs	r3, #31
    a1f6:	18fb      	adds	r3, r7, r3
    a1f8:	781b      	ldrb	r3, [r3, #0]
    a1fa:	009b      	lsls	r3, r3, #2
    a1fc:	687a      	ldr	r2, [r7, #4]
    a1fe:	18d3      	adds	r3, r2, r3
    a200:	221f      	movs	r2, #31
    a202:	18ba      	adds	r2, r7, r2
    a204:	7811      	ldrb	r1, [r2, #0]
    a206:	2210      	movs	r2, #16
    a208:	18ba      	adds	r2, r7, r2
    a20a:	0089      	lsls	r1, r1, #2
    a20c:	588a      	ldr	r2, [r1, r2]
    a20e:	601a      	str	r2, [r3, #0]
	for(i=0;i<3;i++){
    a210:	231f      	movs	r3, #31
    a212:	18fb      	adds	r3, r7, r3
    a214:	781a      	ldrb	r2, [r3, #0]
    a216:	231f      	movs	r3, #31
    a218:	18fb      	adds	r3, r7, r3
    a21a:	3201      	adds	r2, #1
    a21c:	701a      	strb	r2, [r3, #0]
    a21e:	231f      	movs	r3, #31
    a220:	18fb      	adds	r3, r7, r3
    a222:	781b      	ldrb	r3, [r3, #0]
    a224:	2b02      	cmp	r3, #2
    a226:	d9e5      	bls.n	a1f4 <mat_mult_33_31+0xc8>
	}
	
}
    a228:	46c0      	nop			; (mov r8, r8)
    a22a:	46bd      	mov	sp, r7
    a22c:	b008      	add	sp, #32
    a22e:	bdb0      	pop	{r4, r5, r7, pc}
    a230:	0001eb65 	.word	0x0001eb65
    a234:	0001e461 	.word	0x0001e461

0000a238 <calc_azm_inc_roll_dec>:

void calc_azm_inc_roll_dec(float aXYZ[3], float cXYZ[3], float *azimuthP, float *inclinationP, float *rollP, float *declinationP){
    a238:	b5f0      	push	{r4, r5, r6, r7, lr}
    a23a:	b08d      	sub	sp, #52	; 0x34
    a23c:	af00      	add	r7, sp, #0
    a23e:	6178      	str	r0, [r7, #20]
    a240:	6139      	str	r1, [r7, #16]
    a242:	60fa      	str	r2, [r7, #12]
    a244:	60bb      	str	r3, [r7, #8]
	
	float crotXYZ[3];
	float thetaX, thetaY, crxy;
	
	//  Calculate Inclination and Roll
	calc_theta_XY( aXYZ , &thetaX, &thetaY);
    a246:	2310      	movs	r3, #16
    a248:	2208      	movs	r2, #8
    a24a:	18ba      	adds	r2, r7, r2
    a24c:	18d2      	adds	r2, r2, r3
    a24e:	2314      	movs	r3, #20
    a250:	2108      	movs	r1, #8
    a252:	1879      	adds	r1, r7, r1
    a254:	18c9      	adds	r1, r1, r3
    a256:	697b      	ldr	r3, [r7, #20]
    a258:	0018      	movs	r0, r3
    a25a:	4b65      	ldr	r3, [pc, #404]	; (a3f0 <calc_azm_inc_roll_dec+0x1b8>)
    a25c:	4798      	blx	r3
	*inclinationP = -1*thetaY;
    a25e:	69bb      	ldr	r3, [r7, #24]
    a260:	2280      	movs	r2, #128	; 0x80
    a262:	0612      	lsls	r2, r2, #24
    a264:	405a      	eors	r2, r3
    a266:	68bb      	ldr	r3, [r7, #8]
    a268:	601a      	str	r2, [r3, #0]
	*rollP = thetaX;
    a26a:	69fa      	ldr	r2, [r7, #28]
    a26c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a26e:	601a      	str	r2, [r3, #0]
	
	//  Calculate Azimuth
	rotvec_theta_XY(cXYZ, crotXYZ, &thetaX, &thetaY);
    a270:	2310      	movs	r3, #16
    a272:	2208      	movs	r2, #8
    a274:	4694      	mov	ip, r2
    a276:	44bc      	add	ip, r7
    a278:	4463      	add	r3, ip
    a27a:	2214      	movs	r2, #20
    a27c:	2108      	movs	r1, #8
    a27e:	468c      	mov	ip, r1
    a280:	44bc      	add	ip, r7
    a282:	4462      	add	r2, ip
    a284:	2118      	movs	r1, #24
    a286:	2008      	movs	r0, #8
    a288:	4684      	mov	ip, r0
    a28a:	44bc      	add	ip, r7
    a28c:	4461      	add	r1, ip
    a28e:	6938      	ldr	r0, [r7, #16]
    a290:	4c58      	ldr	r4, [pc, #352]	; (a3f4 <calc_azm_inc_roll_dec+0x1bc>)
    a292:	47a0      	blx	r4
	*azimuthP = rad2deg*atan2(crotXYZ[1], crotXYZ[0]);
    a294:	4b58      	ldr	r3, [pc, #352]	; (a3f8 <calc_azm_inc_roll_dec+0x1c0>)
    a296:	681a      	ldr	r2, [r3, #0]
    a298:	4b58      	ldr	r3, [pc, #352]	; (a3fc <calc_azm_inc_roll_dec+0x1c4>)
    a29a:	1c10      	adds	r0, r2, #0
    a29c:	4798      	blx	r3
    a29e:	0005      	movs	r5, r0
    a2a0:	000e      	movs	r6, r1
    a2a2:	2318      	movs	r3, #24
    a2a4:	2208      	movs	r2, #8
    a2a6:	4694      	mov	ip, r2
    a2a8:	44bc      	add	ip, r7
    a2aa:	4463      	add	r3, ip
    a2ac:	685a      	ldr	r2, [r3, #4]
    a2ae:	4b53      	ldr	r3, [pc, #332]	; (a3fc <calc_azm_inc_roll_dec+0x1c4>)
    a2b0:	1c10      	adds	r0, r2, #0
    a2b2:	4798      	blx	r3
    a2b4:	6038      	str	r0, [r7, #0]
    a2b6:	6079      	str	r1, [r7, #4]
    a2b8:	2318      	movs	r3, #24
    a2ba:	2208      	movs	r2, #8
    a2bc:	4694      	mov	ip, r2
    a2be:	44bc      	add	ip, r7
    a2c0:	4463      	add	r3, ip
    a2c2:	681a      	ldr	r2, [r3, #0]
    a2c4:	4b4d      	ldr	r3, [pc, #308]	; (a3fc <calc_azm_inc_roll_dec+0x1c4>)
    a2c6:	1c10      	adds	r0, r2, #0
    a2c8:	4798      	blx	r3
    a2ca:	0003      	movs	r3, r0
    a2cc:	000c      	movs	r4, r1
    a2ce:	001a      	movs	r2, r3
    a2d0:	0023      	movs	r3, r4
    a2d2:	6838      	ldr	r0, [r7, #0]
    a2d4:	6879      	ldr	r1, [r7, #4]
    a2d6:	4c4a      	ldr	r4, [pc, #296]	; (a400 <calc_azm_inc_roll_dec+0x1c8>)
    a2d8:	47a0      	blx	r4
    a2da:	0002      	movs	r2, r0
    a2dc:	000b      	movs	r3, r1
    a2de:	4c49      	ldr	r4, [pc, #292]	; (a404 <calc_azm_inc_roll_dec+0x1cc>)
    a2e0:	0028      	movs	r0, r5
    a2e2:	0031      	movs	r1, r6
    a2e4:	47a0      	blx	r4
    a2e6:	0003      	movs	r3, r0
    a2e8:	000c      	movs	r4, r1
    a2ea:	0019      	movs	r1, r3
    a2ec:	0022      	movs	r2, r4
    a2ee:	4b46      	ldr	r3, [pc, #280]	; (a408 <calc_azm_inc_roll_dec+0x1d0>)
    a2f0:	0008      	movs	r0, r1
    a2f2:	0011      	movs	r1, r2
    a2f4:	4798      	blx	r3
    a2f6:	1c02      	adds	r2, r0, #0
    a2f8:	68fb      	ldr	r3, [r7, #12]
    a2fa:	601a      	str	r2, [r3, #0]
	if ((*azimuthP)<0){
    a2fc:	68fb      	ldr	r3, [r7, #12]
    a2fe:	681a      	ldr	r2, [r3, #0]
    a300:	4b42      	ldr	r3, [pc, #264]	; (a40c <calc_azm_inc_roll_dec+0x1d4>)
    a302:	2100      	movs	r1, #0
    a304:	1c10      	adds	r0, r2, #0
    a306:	4798      	blx	r3
    a308:	1e03      	subs	r3, r0, #0
    a30a:	d009      	beq.n	a320 <calc_azm_inc_roll_dec+0xe8>
		//  Result is -180 to +180; Compass must be 0-360
		*azimuthP = *azimuthP+360;
    a30c:	68fb      	ldr	r3, [r7, #12]
    a30e:	681a      	ldr	r2, [r3, #0]
    a310:	4b3f      	ldr	r3, [pc, #252]	; (a410 <calc_azm_inc_roll_dec+0x1d8>)
    a312:	4940      	ldr	r1, [pc, #256]	; (a414 <calc_azm_inc_roll_dec+0x1dc>)
    a314:	1c10      	adds	r0, r2, #0
    a316:	4798      	blx	r3
    a318:	1c03      	adds	r3, r0, #0
    a31a:	1c1a      	adds	r2, r3, #0
    a31c:	68fb      	ldr	r3, [r7, #12]
    a31e:	601a      	str	r2, [r3, #0]
	}
	
	//  Calculate declination
	crxy= sqrt(pow(crotXYZ[0],2)+pow(crotXYZ[1],2));
    a320:	2318      	movs	r3, #24
    a322:	2208      	movs	r2, #8
    a324:	4694      	mov	ip, r2
    a326:	44bc      	add	ip, r7
    a328:	4463      	add	r3, ip
    a32a:	681a      	ldr	r2, [r3, #0]
    a32c:	4b33      	ldr	r3, [pc, #204]	; (a3fc <calc_azm_inc_roll_dec+0x1c4>)
    a32e:	1c10      	adds	r0, r2, #0
    a330:	4798      	blx	r3
    a332:	2300      	movs	r3, #0
    a334:	2480      	movs	r4, #128	; 0x80
    a336:	05e4      	lsls	r4, r4, #23
    a338:	001a      	movs	r2, r3
    a33a:	0023      	movs	r3, r4
    a33c:	4c36      	ldr	r4, [pc, #216]	; (a418 <calc_azm_inc_roll_dec+0x1e0>)
    a33e:	47a0      	blx	r4
    a340:	0005      	movs	r5, r0
    a342:	000e      	movs	r6, r1
    a344:	2318      	movs	r3, #24
    a346:	2208      	movs	r2, #8
    a348:	4694      	mov	ip, r2
    a34a:	44bc      	add	ip, r7
    a34c:	4463      	add	r3, ip
    a34e:	685a      	ldr	r2, [r3, #4]
    a350:	4b2a      	ldr	r3, [pc, #168]	; (a3fc <calc_azm_inc_roll_dec+0x1c4>)
    a352:	1c10      	adds	r0, r2, #0
    a354:	4798      	blx	r3
    a356:	2300      	movs	r3, #0
    a358:	2480      	movs	r4, #128	; 0x80
    a35a:	05e4      	lsls	r4, r4, #23
    a35c:	001a      	movs	r2, r3
    a35e:	0023      	movs	r3, r4
    a360:	4c2d      	ldr	r4, [pc, #180]	; (a418 <calc_azm_inc_roll_dec+0x1e0>)
    a362:	47a0      	blx	r4
    a364:	0002      	movs	r2, r0
    a366:	000b      	movs	r3, r1
    a368:	4c2c      	ldr	r4, [pc, #176]	; (a41c <calc_azm_inc_roll_dec+0x1e4>)
    a36a:	0028      	movs	r0, r5
    a36c:	0031      	movs	r1, r6
    a36e:	47a0      	blx	r4
    a370:	0003      	movs	r3, r0
    a372:	000c      	movs	r4, r1
    a374:	0018      	movs	r0, r3
    a376:	0021      	movs	r1, r4
    a378:	4b29      	ldr	r3, [pc, #164]	; (a420 <calc_azm_inc_roll_dec+0x1e8>)
    a37a:	4798      	blx	r3
    a37c:	000a      	movs	r2, r1
    a37e:	0001      	movs	r1, r0
    a380:	4b21      	ldr	r3, [pc, #132]	; (a408 <calc_azm_inc_roll_dec+0x1d0>)
    a382:	0008      	movs	r0, r1
    a384:	0011      	movs	r1, r2
    a386:	4798      	blx	r3
    a388:	1c03      	adds	r3, r0, #0
    a38a:	62fb      	str	r3, [r7, #44]	; 0x2c
	*declinationP = rad2deg*atan2(crotXYZ[2], crxy);
    a38c:	4b1a      	ldr	r3, [pc, #104]	; (a3f8 <calc_azm_inc_roll_dec+0x1c0>)
    a38e:	681a      	ldr	r2, [r3, #0]
    a390:	4b1a      	ldr	r3, [pc, #104]	; (a3fc <calc_azm_inc_roll_dec+0x1c4>)
    a392:	1c10      	adds	r0, r2, #0
    a394:	4798      	blx	r3
    a396:	0005      	movs	r5, r0
    a398:	000e      	movs	r6, r1
    a39a:	2318      	movs	r3, #24
    a39c:	2208      	movs	r2, #8
    a39e:	4694      	mov	ip, r2
    a3a0:	44bc      	add	ip, r7
    a3a2:	4463      	add	r3, ip
    a3a4:	689a      	ldr	r2, [r3, #8]
    a3a6:	4b15      	ldr	r3, [pc, #84]	; (a3fc <calc_azm_inc_roll_dec+0x1c4>)
    a3a8:	1c10      	adds	r0, r2, #0
    a3aa:	4798      	blx	r3
    a3ac:	6038      	str	r0, [r7, #0]
    a3ae:	6079      	str	r1, [r7, #4]
    a3b0:	4b12      	ldr	r3, [pc, #72]	; (a3fc <calc_azm_inc_roll_dec+0x1c4>)
    a3b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    a3b4:	4798      	blx	r3
    a3b6:	0003      	movs	r3, r0
    a3b8:	000c      	movs	r4, r1
    a3ba:	001a      	movs	r2, r3
    a3bc:	0023      	movs	r3, r4
    a3be:	6838      	ldr	r0, [r7, #0]
    a3c0:	6879      	ldr	r1, [r7, #4]
    a3c2:	4c0f      	ldr	r4, [pc, #60]	; (a400 <calc_azm_inc_roll_dec+0x1c8>)
    a3c4:	47a0      	blx	r4
    a3c6:	0002      	movs	r2, r0
    a3c8:	000b      	movs	r3, r1
    a3ca:	4c0e      	ldr	r4, [pc, #56]	; (a404 <calc_azm_inc_roll_dec+0x1cc>)
    a3cc:	0028      	movs	r0, r5
    a3ce:	0031      	movs	r1, r6
    a3d0:	47a0      	blx	r4
    a3d2:	0003      	movs	r3, r0
    a3d4:	000c      	movs	r4, r1
    a3d6:	0019      	movs	r1, r3
    a3d8:	0022      	movs	r2, r4
    a3da:	4b0b      	ldr	r3, [pc, #44]	; (a408 <calc_azm_inc_roll_dec+0x1d0>)
    a3dc:	0008      	movs	r0, r1
    a3de:	0011      	movs	r1, r2
    a3e0:	4798      	blx	r3
    a3e2:	1c02      	adds	r2, r0, #0
    a3e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    a3e6:	601a      	str	r2, [r3, #0]
	
		
}
    a3e8:	46c0      	nop			; (mov r8, r8)
    a3ea:	46bd      	mov	sp, r7
    a3ec:	b00d      	add	sp, #52	; 0x34
    a3ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a3f0:	0000a425 	.word	0x0000a425
    a3f4:	00009f29 	.word	0x00009f29
    a3f8:	00025fb4 	.word	0x00025fb4
    a3fc:	00020d99 	.word	0x00020d99
    a400:	0001b741 	.word	0x0001b741
    a404:	000200d1 	.word	0x000200d1
    a408:	00020e3d 	.word	0x00020e3d
    a40c:	0001e2d5 	.word	0x0001e2d5
    a410:	0001e461 	.word	0x0001e461
    a414:	43b40000 	.word	0x43b40000
    a418:	0001b749 	.word	0x0001b749
    a41c:	0001f249 	.word	0x0001f249
    a420:	0001baa1 	.word	0x0001baa1

0000a424 <calc_theta_XY>:


void calc_theta_XY(float XYZ[3], float *thetaX, float *thetaY){
    a424:	b5f0      	push	{r4, r5, r6, r7, lr}
    a426:	b089      	sub	sp, #36	; 0x24
    a428:	af00      	add	r7, sp, #0
    a42a:	6178      	str	r0, [r7, #20]
    a42c:	6139      	str	r1, [r7, #16]
    a42e:	60fa      	str	r2, [r7, #12]
	float ryz;
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
    a430:	697b      	ldr	r3, [r7, #20]
    a432:	3304      	adds	r3, #4
    a434:	681a      	ldr	r2, [r3, #0]
    a436:	4b48      	ldr	r3, [pc, #288]	; (a558 <calc_theta_XY+0x134>)
    a438:	1c10      	adds	r0, r2, #0
    a43a:	4798      	blx	r3
    a43c:	2300      	movs	r3, #0
    a43e:	2480      	movs	r4, #128	; 0x80
    a440:	05e4      	lsls	r4, r4, #23
    a442:	001a      	movs	r2, r3
    a444:	0023      	movs	r3, r4
    a446:	4c45      	ldr	r4, [pc, #276]	; (a55c <calc_theta_XY+0x138>)
    a448:	47a0      	blx	r4
    a44a:	0005      	movs	r5, r0
    a44c:	000e      	movs	r6, r1
    a44e:	697b      	ldr	r3, [r7, #20]
    a450:	3308      	adds	r3, #8
    a452:	681a      	ldr	r2, [r3, #0]
    a454:	4b40      	ldr	r3, [pc, #256]	; (a558 <calc_theta_XY+0x134>)
    a456:	1c10      	adds	r0, r2, #0
    a458:	4798      	blx	r3
    a45a:	2300      	movs	r3, #0
    a45c:	2480      	movs	r4, #128	; 0x80
    a45e:	05e4      	lsls	r4, r4, #23
    a460:	001a      	movs	r2, r3
    a462:	0023      	movs	r3, r4
    a464:	4c3d      	ldr	r4, [pc, #244]	; (a55c <calc_theta_XY+0x138>)
    a466:	47a0      	blx	r4
    a468:	0002      	movs	r2, r0
    a46a:	000b      	movs	r3, r1
    a46c:	4c3c      	ldr	r4, [pc, #240]	; (a560 <calc_theta_XY+0x13c>)
    a46e:	0028      	movs	r0, r5
    a470:	0031      	movs	r1, r6
    a472:	47a0      	blx	r4
    a474:	0003      	movs	r3, r0
    a476:	000c      	movs	r4, r1
    a478:	0018      	movs	r0, r3
    a47a:	0021      	movs	r1, r4
    a47c:	4b39      	ldr	r3, [pc, #228]	; (a564 <calc_theta_XY+0x140>)
    a47e:	4798      	blx	r3
    a480:	000a      	movs	r2, r1
    a482:	0001      	movs	r1, r0
    a484:	4b38      	ldr	r3, [pc, #224]	; (a568 <calc_theta_XY+0x144>)
    a486:	0008      	movs	r0, r1
    a488:	0011      	movs	r1, r2
    a48a:	4798      	blx	r3
    a48c:	1c03      	adds	r3, r0, #0
    a48e:	61fb      	str	r3, [r7, #28]
	
	*thetaX = rad2deg*atan2(XYZ[1], XYZ[2]) + 180;
    a490:	4b36      	ldr	r3, [pc, #216]	; (a56c <calc_theta_XY+0x148>)
    a492:	681a      	ldr	r2, [r3, #0]
    a494:	4b30      	ldr	r3, [pc, #192]	; (a558 <calc_theta_XY+0x134>)
    a496:	1c10      	adds	r0, r2, #0
    a498:	4798      	blx	r3
    a49a:	0005      	movs	r5, r0
    a49c:	000e      	movs	r6, r1
    a49e:	697b      	ldr	r3, [r7, #20]
    a4a0:	3304      	adds	r3, #4
    a4a2:	681a      	ldr	r2, [r3, #0]
    a4a4:	4b2c      	ldr	r3, [pc, #176]	; (a558 <calc_theta_XY+0x134>)
    a4a6:	1c10      	adds	r0, r2, #0
    a4a8:	4798      	blx	r3
    a4aa:	6038      	str	r0, [r7, #0]
    a4ac:	6079      	str	r1, [r7, #4]
    a4ae:	697b      	ldr	r3, [r7, #20]
    a4b0:	3308      	adds	r3, #8
    a4b2:	681a      	ldr	r2, [r3, #0]
    a4b4:	4b28      	ldr	r3, [pc, #160]	; (a558 <calc_theta_XY+0x134>)
    a4b6:	1c10      	adds	r0, r2, #0
    a4b8:	4798      	blx	r3
    a4ba:	0003      	movs	r3, r0
    a4bc:	000c      	movs	r4, r1
    a4be:	001a      	movs	r2, r3
    a4c0:	0023      	movs	r3, r4
    a4c2:	6838      	ldr	r0, [r7, #0]
    a4c4:	6879      	ldr	r1, [r7, #4]
    a4c6:	4c2a      	ldr	r4, [pc, #168]	; (a570 <calc_theta_XY+0x14c>)
    a4c8:	47a0      	blx	r4
    a4ca:	0002      	movs	r2, r0
    a4cc:	000b      	movs	r3, r1
    a4ce:	4c29      	ldr	r4, [pc, #164]	; (a574 <calc_theta_XY+0x150>)
    a4d0:	0028      	movs	r0, r5
    a4d2:	0031      	movs	r1, r6
    a4d4:	47a0      	blx	r4
    a4d6:	0003      	movs	r3, r0
    a4d8:	000c      	movs	r4, r1
    a4da:	0018      	movs	r0, r3
    a4dc:	0021      	movs	r1, r4
    a4de:	4c20      	ldr	r4, [pc, #128]	; (a560 <calc_theta_XY+0x13c>)
    a4e0:	2200      	movs	r2, #0
    a4e2:	4b25      	ldr	r3, [pc, #148]	; (a578 <calc_theta_XY+0x154>)
    a4e4:	47a0      	blx	r4
    a4e6:	0003      	movs	r3, r0
    a4e8:	000c      	movs	r4, r1
    a4ea:	0019      	movs	r1, r3
    a4ec:	0022      	movs	r2, r4
    a4ee:	4b1e      	ldr	r3, [pc, #120]	; (a568 <calc_theta_XY+0x144>)
    a4f0:	0008      	movs	r0, r1
    a4f2:	0011      	movs	r1, r2
    a4f4:	4798      	blx	r3
    a4f6:	1c02      	adds	r2, r0, #0
    a4f8:	693b      	ldr	r3, [r7, #16]
    a4fa:	601a      	str	r2, [r3, #0]
	*thetaY = rad2deg*atan2(XYZ[0], ryz);
    a4fc:	4b1b      	ldr	r3, [pc, #108]	; (a56c <calc_theta_XY+0x148>)
    a4fe:	681a      	ldr	r2, [r3, #0]
    a500:	4b15      	ldr	r3, [pc, #84]	; (a558 <calc_theta_XY+0x134>)
    a502:	1c10      	adds	r0, r2, #0
    a504:	4798      	blx	r3
    a506:	0005      	movs	r5, r0
    a508:	000e      	movs	r6, r1
    a50a:	697b      	ldr	r3, [r7, #20]
    a50c:	681a      	ldr	r2, [r3, #0]
    a50e:	4b12      	ldr	r3, [pc, #72]	; (a558 <calc_theta_XY+0x134>)
    a510:	1c10      	adds	r0, r2, #0
    a512:	4798      	blx	r3
    a514:	6038      	str	r0, [r7, #0]
    a516:	6079      	str	r1, [r7, #4]
    a518:	4b0f      	ldr	r3, [pc, #60]	; (a558 <calc_theta_XY+0x134>)
    a51a:	69f8      	ldr	r0, [r7, #28]
    a51c:	4798      	blx	r3
    a51e:	0003      	movs	r3, r0
    a520:	000c      	movs	r4, r1
    a522:	001a      	movs	r2, r3
    a524:	0023      	movs	r3, r4
    a526:	6838      	ldr	r0, [r7, #0]
    a528:	6879      	ldr	r1, [r7, #4]
    a52a:	4c11      	ldr	r4, [pc, #68]	; (a570 <calc_theta_XY+0x14c>)
    a52c:	47a0      	blx	r4
    a52e:	0002      	movs	r2, r0
    a530:	000b      	movs	r3, r1
    a532:	4c10      	ldr	r4, [pc, #64]	; (a574 <calc_theta_XY+0x150>)
    a534:	0028      	movs	r0, r5
    a536:	0031      	movs	r1, r6
    a538:	47a0      	blx	r4
    a53a:	0003      	movs	r3, r0
    a53c:	000c      	movs	r4, r1
    a53e:	0019      	movs	r1, r3
    a540:	0022      	movs	r2, r4
    a542:	4b09      	ldr	r3, [pc, #36]	; (a568 <calc_theta_XY+0x144>)
    a544:	0008      	movs	r0, r1
    a546:	0011      	movs	r1, r2
    a548:	4798      	blx	r3
    a54a:	1c02      	adds	r2, r0, #0
    a54c:	68fb      	ldr	r3, [r7, #12]
    a54e:	601a      	str	r2, [r3, #0]
	
}
    a550:	46c0      	nop			; (mov r8, r8)
    a552:	46bd      	mov	sp, r7
    a554:	b009      	add	sp, #36	; 0x24
    a556:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a558:	00020d99 	.word	0x00020d99
    a55c:	0001b749 	.word	0x0001b749
    a560:	0001f249 	.word	0x0001f249
    a564:	0001baa1 	.word	0x0001baa1
    a568:	00020e3d 	.word	0x00020e3d
    a56c:	00025fb4 	.word	0x00025fb4
    a570:	0001b741 	.word	0x0001b741
    a574:	000200d1 	.word	0x000200d1
    a578:	40668000 	.word	0x40668000

0000a57c <stdev>:


float stdev(float data[nbuf], uint32_t n_meas){
    a57c:	b590      	push	{r4, r7, lr}
    a57e:	b089      	sub	sp, #36	; 0x24
    a580:	af00      	add	r7, sp, #0
    a582:	6078      	str	r0, [r7, #4]
    a584:	6039      	str	r1, [r7, #0]
	uint8_t i;
	double mean, sumsq;
	
	mean = 0;
    a586:	2300      	movs	r3, #0
    a588:	2400      	movs	r4, #0
    a58a:	613b      	str	r3, [r7, #16]
    a58c:	617c      	str	r4, [r7, #20]
	for (i=0;i<n_meas;i++){
    a58e:	231f      	movs	r3, #31
    a590:	18fb      	adds	r3, r7, r3
    a592:	2200      	movs	r2, #0
    a594:	701a      	strb	r2, [r3, #0]
    a596:	e01a      	b.n	a5ce <stdev+0x52>
		mean = mean+data[i];
    a598:	231f      	movs	r3, #31
    a59a:	18fb      	adds	r3, r7, r3
    a59c:	781b      	ldrb	r3, [r3, #0]
    a59e:	009b      	lsls	r3, r3, #2
    a5a0:	687a      	ldr	r2, [r7, #4]
    a5a2:	18d3      	adds	r3, r2, r3
    a5a4:	681a      	ldr	r2, [r3, #0]
    a5a6:	4b41      	ldr	r3, [pc, #260]	; (a6ac <stdev+0x130>)
    a5a8:	1c10      	adds	r0, r2, #0
    a5aa:	4798      	blx	r3
    a5ac:	0002      	movs	r2, r0
    a5ae:	000b      	movs	r3, r1
    a5b0:	4c3f      	ldr	r4, [pc, #252]	; (a6b0 <stdev+0x134>)
    a5b2:	6938      	ldr	r0, [r7, #16]
    a5b4:	6979      	ldr	r1, [r7, #20]
    a5b6:	47a0      	blx	r4
    a5b8:	0003      	movs	r3, r0
    a5ba:	000c      	movs	r4, r1
    a5bc:	613b      	str	r3, [r7, #16]
    a5be:	617c      	str	r4, [r7, #20]
	for (i=0;i<n_meas;i++){
    a5c0:	231f      	movs	r3, #31
    a5c2:	18fb      	adds	r3, r7, r3
    a5c4:	781a      	ldrb	r2, [r3, #0]
    a5c6:	231f      	movs	r3, #31
    a5c8:	18fb      	adds	r3, r7, r3
    a5ca:	3201      	adds	r2, #1
    a5cc:	701a      	strb	r2, [r3, #0]
    a5ce:	231f      	movs	r3, #31
    a5d0:	18fb      	adds	r3, r7, r3
    a5d2:	781a      	ldrb	r2, [r3, #0]
    a5d4:	683b      	ldr	r3, [r7, #0]
    a5d6:	429a      	cmp	r2, r3
    a5d8:	d3de      	bcc.n	a598 <stdev+0x1c>
	}
	mean = mean/n_meas;
    a5da:	4b36      	ldr	r3, [pc, #216]	; (a6b4 <stdev+0x138>)
    a5dc:	6838      	ldr	r0, [r7, #0]
    a5de:	4798      	blx	r3
    a5e0:	0002      	movs	r2, r0
    a5e2:	000b      	movs	r3, r1
    a5e4:	4c34      	ldr	r4, [pc, #208]	; (a6b8 <stdev+0x13c>)
    a5e6:	6938      	ldr	r0, [r7, #16]
    a5e8:	6979      	ldr	r1, [r7, #20]
    a5ea:	47a0      	blx	r4
    a5ec:	0003      	movs	r3, r0
    a5ee:	000c      	movs	r4, r1
    a5f0:	613b      	str	r3, [r7, #16]
    a5f2:	617c      	str	r4, [r7, #20]
	
	sumsq = 0;
    a5f4:	2300      	movs	r3, #0
    a5f6:	2400      	movs	r4, #0
    a5f8:	60bb      	str	r3, [r7, #8]
    a5fa:	60fc      	str	r4, [r7, #12]
	for (i=0;i<n_meas;i++){
    a5fc:	231f      	movs	r3, #31
    a5fe:	18fb      	adds	r3, r7, r3
    a600:	2200      	movs	r2, #0
    a602:	701a      	strb	r2, [r3, #0]
    a604:	e029      	b.n	a65a <stdev+0xde>
		sumsq = sumsq+pow((data[i]-mean),2);
    a606:	231f      	movs	r3, #31
    a608:	18fb      	adds	r3, r7, r3
    a60a:	781b      	ldrb	r3, [r3, #0]
    a60c:	009b      	lsls	r3, r3, #2
    a60e:	687a      	ldr	r2, [r7, #4]
    a610:	18d3      	adds	r3, r2, r3
    a612:	681a      	ldr	r2, [r3, #0]
    a614:	4b25      	ldr	r3, [pc, #148]	; (a6ac <stdev+0x130>)
    a616:	1c10      	adds	r0, r2, #0
    a618:	4798      	blx	r3
    a61a:	4c28      	ldr	r4, [pc, #160]	; (a6bc <stdev+0x140>)
    a61c:	693a      	ldr	r2, [r7, #16]
    a61e:	697b      	ldr	r3, [r7, #20]
    a620:	47a0      	blx	r4
    a622:	0003      	movs	r3, r0
    a624:	000c      	movs	r4, r1
    a626:	0018      	movs	r0, r3
    a628:	0021      	movs	r1, r4
    a62a:	2300      	movs	r3, #0
    a62c:	2480      	movs	r4, #128	; 0x80
    a62e:	05e4      	lsls	r4, r4, #23
    a630:	001a      	movs	r2, r3
    a632:	0023      	movs	r3, r4
    a634:	4c22      	ldr	r4, [pc, #136]	; (a6c0 <stdev+0x144>)
    a636:	47a0      	blx	r4
    a638:	0002      	movs	r2, r0
    a63a:	000b      	movs	r3, r1
    a63c:	4c1c      	ldr	r4, [pc, #112]	; (a6b0 <stdev+0x134>)
    a63e:	68b8      	ldr	r0, [r7, #8]
    a640:	68f9      	ldr	r1, [r7, #12]
    a642:	47a0      	blx	r4
    a644:	0003      	movs	r3, r0
    a646:	000c      	movs	r4, r1
    a648:	60bb      	str	r3, [r7, #8]
    a64a:	60fc      	str	r4, [r7, #12]
	for (i=0;i<n_meas;i++){
    a64c:	231f      	movs	r3, #31
    a64e:	18fb      	adds	r3, r7, r3
    a650:	781a      	ldrb	r2, [r3, #0]
    a652:	231f      	movs	r3, #31
    a654:	18fb      	adds	r3, r7, r3
    a656:	3201      	adds	r2, #1
    a658:	701a      	strb	r2, [r3, #0]
    a65a:	231f      	movs	r3, #31
    a65c:	18fb      	adds	r3, r7, r3
    a65e:	781a      	ldrb	r2, [r3, #0]
    a660:	683b      	ldr	r3, [r7, #0]
    a662:	429a      	cmp	r2, r3
    a664:	d3cf      	bcc.n	a606 <stdev+0x8a>
	}
	sumsq = sumsq/(n_meas-1);
    a666:	683b      	ldr	r3, [r7, #0]
    a668:	1e5a      	subs	r2, r3, #1
    a66a:	4b12      	ldr	r3, [pc, #72]	; (a6b4 <stdev+0x138>)
    a66c:	0010      	movs	r0, r2
    a66e:	4798      	blx	r3
    a670:	0002      	movs	r2, r0
    a672:	000b      	movs	r3, r1
    a674:	4c10      	ldr	r4, [pc, #64]	; (a6b8 <stdev+0x13c>)
    a676:	68b8      	ldr	r0, [r7, #8]
    a678:	68f9      	ldr	r1, [r7, #12]
    a67a:	47a0      	blx	r4
    a67c:	0003      	movs	r3, r0
    a67e:	000c      	movs	r4, r1
    a680:	60bb      	str	r3, [r7, #8]
    a682:	60fc      	str	r4, [r7, #12]
	sumsq = sqrt(sumsq);
    a684:	68bb      	ldr	r3, [r7, #8]
    a686:	68fc      	ldr	r4, [r7, #12]
    a688:	0018      	movs	r0, r3
    a68a:	0021      	movs	r1, r4
    a68c:	4b0d      	ldr	r3, [pc, #52]	; (a6c4 <stdev+0x148>)
    a68e:	4798      	blx	r3
    a690:	0003      	movs	r3, r0
    a692:	000c      	movs	r4, r1
    a694:	60bb      	str	r3, [r7, #8]
    a696:	60fc      	str	r4, [r7, #12]
	
	return sumsq;
    a698:	4b0b      	ldr	r3, [pc, #44]	; (a6c8 <stdev+0x14c>)
    a69a:	68b8      	ldr	r0, [r7, #8]
    a69c:	68f9      	ldr	r1, [r7, #12]
    a69e:	4798      	blx	r3
    a6a0:	1c03      	adds	r3, r0, #0
}
    a6a2:	1c18      	adds	r0, r3, #0
    a6a4:	46bd      	mov	sp, r7
    a6a6:	b009      	add	sp, #36	; 0x24
    a6a8:	bd90      	pop	{r4, r7, pc}
    a6aa:	46c0      	nop			; (mov r8, r8)
    a6ac:	00020d99 	.word	0x00020d99
    a6b0:	0001f249 	.word	0x0001f249
    a6b4:	00020d29 	.word	0x00020d29
    a6b8:	0001f869 	.word	0x0001f869
    a6bc:	000205d1 	.word	0x000205d1
    a6c0:	0001b749 	.word	0x0001b749
    a6c4:	0001baa1 	.word	0x0001baa1
    a6c8:	00020e3d 	.word	0x00020e3d

0000a6cc <calc_mag_stdev>:

float calc_mag_stdev(float XYZ[nbuf][3]){
    a6cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    a6ce:	b0d5      	sub	sp, #340	; 0x154
    a6d0:	af00      	add	r7, sp, #0
    a6d2:	6078      	str	r0, [r7, #4]
	float err_mag[nbuf];
	uint32_t p;
	float temp1;
	
	for (p=0;p<n_points;p++){
    a6d4:	2300      	movs	r3, #0
    a6d6:	22a6      	movs	r2, #166	; 0xa6
    a6d8:	0052      	lsls	r2, r2, #1
    a6da:	18ba      	adds	r2, r7, r2
    a6dc:	6013      	str	r3, [r2, #0]
    a6de:	e083      	b.n	a7e8 <calc_mag_stdev+0x11c>
		temp1 = sqrt(pow(XYZ[p][0],2)+pow(XYZ[p][1],2)+pow(XYZ[p][2],2));
    a6e0:	23a6      	movs	r3, #166	; 0xa6
    a6e2:	005b      	lsls	r3, r3, #1
    a6e4:	18fb      	adds	r3, r7, r3
    a6e6:	681a      	ldr	r2, [r3, #0]
    a6e8:	0013      	movs	r3, r2
    a6ea:	005b      	lsls	r3, r3, #1
    a6ec:	189b      	adds	r3, r3, r2
    a6ee:	009b      	lsls	r3, r3, #2
    a6f0:	001a      	movs	r2, r3
    a6f2:	687b      	ldr	r3, [r7, #4]
    a6f4:	189b      	adds	r3, r3, r2
    a6f6:	681a      	ldr	r2, [r3, #0]
    a6f8:	4b4a      	ldr	r3, [pc, #296]	; (a824 <calc_mag_stdev+0x158>)
    a6fa:	1c10      	adds	r0, r2, #0
    a6fc:	4798      	blx	r3
    a6fe:	2300      	movs	r3, #0
    a700:	2480      	movs	r4, #128	; 0x80
    a702:	05e4      	lsls	r4, r4, #23
    a704:	001a      	movs	r2, r3
    a706:	0023      	movs	r3, r4
    a708:	4c47      	ldr	r4, [pc, #284]	; (a828 <calc_mag_stdev+0x15c>)
    a70a:	47a0      	blx	r4
    a70c:	0005      	movs	r5, r0
    a70e:	000e      	movs	r6, r1
    a710:	23a6      	movs	r3, #166	; 0xa6
    a712:	005b      	lsls	r3, r3, #1
    a714:	18fb      	adds	r3, r7, r3
    a716:	681a      	ldr	r2, [r3, #0]
    a718:	0013      	movs	r3, r2
    a71a:	005b      	lsls	r3, r3, #1
    a71c:	189b      	adds	r3, r3, r2
    a71e:	009b      	lsls	r3, r3, #2
    a720:	001a      	movs	r2, r3
    a722:	687b      	ldr	r3, [r7, #4]
    a724:	189b      	adds	r3, r3, r2
    a726:	685a      	ldr	r2, [r3, #4]
    a728:	4b3e      	ldr	r3, [pc, #248]	; (a824 <calc_mag_stdev+0x158>)
    a72a:	1c10      	adds	r0, r2, #0
    a72c:	4798      	blx	r3
    a72e:	2300      	movs	r3, #0
    a730:	2480      	movs	r4, #128	; 0x80
    a732:	05e4      	lsls	r4, r4, #23
    a734:	001a      	movs	r2, r3
    a736:	0023      	movs	r3, r4
    a738:	4c3b      	ldr	r4, [pc, #236]	; (a828 <calc_mag_stdev+0x15c>)
    a73a:	47a0      	blx	r4
    a73c:	0002      	movs	r2, r0
    a73e:	000b      	movs	r3, r1
    a740:	4c3a      	ldr	r4, [pc, #232]	; (a82c <calc_mag_stdev+0x160>)
    a742:	0028      	movs	r0, r5
    a744:	0031      	movs	r1, r6
    a746:	47a0      	blx	r4
    a748:	0003      	movs	r3, r0
    a74a:	000c      	movs	r4, r1
    a74c:	001d      	movs	r5, r3
    a74e:	0026      	movs	r6, r4
    a750:	23a6      	movs	r3, #166	; 0xa6
    a752:	005b      	lsls	r3, r3, #1
    a754:	18fb      	adds	r3, r7, r3
    a756:	681a      	ldr	r2, [r3, #0]
    a758:	0013      	movs	r3, r2
    a75a:	005b      	lsls	r3, r3, #1
    a75c:	189b      	adds	r3, r3, r2
    a75e:	009b      	lsls	r3, r3, #2
    a760:	001a      	movs	r2, r3
    a762:	687b      	ldr	r3, [r7, #4]
    a764:	189b      	adds	r3, r3, r2
    a766:	689a      	ldr	r2, [r3, #8]
    a768:	4b2e      	ldr	r3, [pc, #184]	; (a824 <calc_mag_stdev+0x158>)
    a76a:	1c10      	adds	r0, r2, #0
    a76c:	4798      	blx	r3
    a76e:	2300      	movs	r3, #0
    a770:	2480      	movs	r4, #128	; 0x80
    a772:	05e4      	lsls	r4, r4, #23
    a774:	001a      	movs	r2, r3
    a776:	0023      	movs	r3, r4
    a778:	4c2b      	ldr	r4, [pc, #172]	; (a828 <calc_mag_stdev+0x15c>)
    a77a:	47a0      	blx	r4
    a77c:	0002      	movs	r2, r0
    a77e:	000b      	movs	r3, r1
    a780:	4c2a      	ldr	r4, [pc, #168]	; (a82c <calc_mag_stdev+0x160>)
    a782:	0028      	movs	r0, r5
    a784:	0031      	movs	r1, r6
    a786:	47a0      	blx	r4
    a788:	0003      	movs	r3, r0
    a78a:	000c      	movs	r4, r1
    a78c:	0018      	movs	r0, r3
    a78e:	0021      	movs	r1, r4
    a790:	4b27      	ldr	r3, [pc, #156]	; (a830 <calc_mag_stdev+0x164>)
    a792:	4798      	blx	r3
    a794:	000a      	movs	r2, r1
    a796:	0001      	movs	r1, r0
    a798:	4b26      	ldr	r3, [pc, #152]	; (a834 <calc_mag_stdev+0x168>)
    a79a:	0008      	movs	r0, r1
    a79c:	0011      	movs	r1, r2
    a79e:	4798      	blx	r3
    a7a0:	1c03      	adds	r3, r0, #0
    a7a2:	22a4      	movs	r2, #164	; 0xa4
    a7a4:	0052      	lsls	r2, r2, #1
    a7a6:	18ba      	adds	r2, r7, r2
    a7a8:	6013      	str	r3, [r2, #0]
		err_mag[p] = temp1-1;
    a7aa:	4b23      	ldr	r3, [pc, #140]	; (a838 <calc_mag_stdev+0x16c>)
    a7ac:	21fe      	movs	r1, #254	; 0xfe
    a7ae:	0589      	lsls	r1, r1, #22
    a7b0:	22a4      	movs	r2, #164	; 0xa4
    a7b2:	0052      	lsls	r2, r2, #1
    a7b4:	18ba      	adds	r2, r7, r2
    a7b6:	6810      	ldr	r0, [r2, #0]
    a7b8:	4798      	blx	r3
    a7ba:	1c03      	adds	r3, r0, #0
    a7bc:	1c19      	adds	r1, r3, #0
    a7be:	4b1f      	ldr	r3, [pc, #124]	; (a83c <calc_mag_stdev+0x170>)
    a7c0:	22a8      	movs	r2, #168	; 0xa8
    a7c2:	0052      	lsls	r2, r2, #1
    a7c4:	4694      	mov	ip, r2
    a7c6:	44bc      	add	ip, r7
    a7c8:	4463      	add	r3, ip
    a7ca:	22a6      	movs	r2, #166	; 0xa6
    a7cc:	0052      	lsls	r2, r2, #1
    a7ce:	18ba      	adds	r2, r7, r2
    a7d0:	6812      	ldr	r2, [r2, #0]
    a7d2:	0092      	lsls	r2, r2, #2
    a7d4:	50d1      	str	r1, [r2, r3]
	for (p=0;p<n_points;p++){
    a7d6:	23a6      	movs	r3, #166	; 0xa6
    a7d8:	005b      	lsls	r3, r3, #1
    a7da:	18fb      	adds	r3, r7, r3
    a7dc:	681b      	ldr	r3, [r3, #0]
    a7de:	3301      	adds	r3, #1
    a7e0:	22a6      	movs	r2, #166	; 0xa6
    a7e2:	0052      	lsls	r2, r2, #1
    a7e4:	18ba      	adds	r2, r7, r2
    a7e6:	6013      	str	r3, [r2, #0]
    a7e8:	4b15      	ldr	r3, [pc, #84]	; (a840 <calc_mag_stdev+0x174>)
    a7ea:	681b      	ldr	r3, [r3, #0]
    a7ec:	22a6      	movs	r2, #166	; 0xa6
    a7ee:	0052      	lsls	r2, r2, #1
    a7f0:	18ba      	adds	r2, r7, r2
    a7f2:	6812      	ldr	r2, [r2, #0]
    a7f4:	429a      	cmp	r2, r3
    a7f6:	d200      	bcs.n	a7fa <calc_mag_stdev+0x12e>
    a7f8:	e772      	b.n	a6e0 <calc_mag_stdev+0x14>
	}
	temp1 = stdev(err_mag, n_points);
    a7fa:	4b11      	ldr	r3, [pc, #68]	; (a840 <calc_mag_stdev+0x174>)
    a7fc:	681a      	ldr	r2, [r3, #0]
    a7fe:	2308      	movs	r3, #8
    a800:	18fb      	adds	r3, r7, r3
    a802:	0011      	movs	r1, r2
    a804:	0018      	movs	r0, r3
    a806:	4b0f      	ldr	r3, [pc, #60]	; (a844 <calc_mag_stdev+0x178>)
    a808:	4798      	blx	r3
    a80a:	1c03      	adds	r3, r0, #0
    a80c:	22a4      	movs	r2, #164	; 0xa4
    a80e:	0052      	lsls	r2, r2, #1
    a810:	18ba      	adds	r2, r7, r2
    a812:	6013      	str	r3, [r2, #0]
	
	return temp1;
    a814:	23a4      	movs	r3, #164	; 0xa4
    a816:	005b      	lsls	r3, r3, #1
    a818:	18fb      	adds	r3, r7, r3
    a81a:	681b      	ldr	r3, [r3, #0]
}
    a81c:	1c18      	adds	r0, r3, #0
    a81e:	46bd      	mov	sp, r7
    a820:	b055      	add	sp, #340	; 0x154
    a822:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a824:	00020d99 	.word	0x00020d99
    a828:	0001b749 	.word	0x0001b749
    a82c:	0001f249 	.word	0x0001f249
    a830:	0001baa1 	.word	0x0001baa1
    a834:	00020e3d 	.word	0x00020e3d
    a838:	0001eda5 	.word	0x0001eda5
    a83c:	fffffeb8 	.word	0xfffffeb8
    a840:	200027f8 	.word	0x200027f8
    a844:	0000a57d 	.word	0x0000a57d

0000a848 <calc_disp_stdev>:

float calc_disp_stdev(float XYZ1[nbuf][3], float XYZ2[nbuf][3], uint8_t axis){
    a848:	b580      	push	{r7, lr}
    a84a:	b0d6      	sub	sp, #344	; 0x158
    a84c:	af00      	add	r7, sp, #0
    a84e:	60f8      	str	r0, [r7, #12]
    a850:	60b9      	str	r1, [r7, #8]
    a852:	4b32      	ldr	r3, [pc, #200]	; (a91c <calc_disp_stdev+0xd4>)
    a854:	21ac      	movs	r1, #172	; 0xac
    a856:	0049      	lsls	r1, r1, #1
    a858:	468c      	mov	ip, r1
    a85a:	44bc      	add	ip, r7
    a85c:	4463      	add	r3, ip
    a85e:	701a      	strb	r2, [r3, #0]
	float err_disp[nbuf];
	uint32_t p;
	for (p=0;p<n_points;p++){
    a860:	2300      	movs	r3, #0
    a862:	22aa      	movs	r2, #170	; 0xaa
    a864:	0052      	lsls	r2, r2, #1
    a866:	18ba      	adds	r2, r7, r2
    a868:	6013      	str	r3, [r2, #0]
    a86a:	e041      	b.n	a8f0 <calc_disp_stdev+0xa8>
		err_disp[p] =  XYZ1[p][axis]-XYZ2[p][axis];
    a86c:	23aa      	movs	r3, #170	; 0xaa
    a86e:	005b      	lsls	r3, r3, #1
    a870:	18fb      	adds	r3, r7, r3
    a872:	681a      	ldr	r2, [r3, #0]
    a874:	0013      	movs	r3, r2
    a876:	005b      	lsls	r3, r3, #1
    a878:	189b      	adds	r3, r3, r2
    a87a:	009b      	lsls	r3, r3, #2
    a87c:	001a      	movs	r2, r3
    a87e:	68fb      	ldr	r3, [r7, #12]
    a880:	189b      	adds	r3, r3, r2
    a882:	4a26      	ldr	r2, [pc, #152]	; (a91c <calc_disp_stdev+0xd4>)
    a884:	21ac      	movs	r1, #172	; 0xac
    a886:	0049      	lsls	r1, r1, #1
    a888:	468c      	mov	ip, r1
    a88a:	44bc      	add	ip, r7
    a88c:	4462      	add	r2, ip
    a88e:	7812      	ldrb	r2, [r2, #0]
    a890:	0092      	lsls	r2, r2, #2
    a892:	58d0      	ldr	r0, [r2, r3]
    a894:	23aa      	movs	r3, #170	; 0xaa
    a896:	005b      	lsls	r3, r3, #1
    a898:	18fb      	adds	r3, r7, r3
    a89a:	681a      	ldr	r2, [r3, #0]
    a89c:	0013      	movs	r3, r2
    a89e:	005b      	lsls	r3, r3, #1
    a8a0:	189b      	adds	r3, r3, r2
    a8a2:	009b      	lsls	r3, r3, #2
    a8a4:	001a      	movs	r2, r3
    a8a6:	68bb      	ldr	r3, [r7, #8]
    a8a8:	189b      	adds	r3, r3, r2
    a8aa:	4a1c      	ldr	r2, [pc, #112]	; (a91c <calc_disp_stdev+0xd4>)
    a8ac:	21ac      	movs	r1, #172	; 0xac
    a8ae:	0049      	lsls	r1, r1, #1
    a8b0:	468c      	mov	ip, r1
    a8b2:	44bc      	add	ip, r7
    a8b4:	4462      	add	r2, ip
    a8b6:	7812      	ldrb	r2, [r2, #0]
    a8b8:	0092      	lsls	r2, r2, #2
    a8ba:	58d2      	ldr	r2, [r2, r3]
    a8bc:	4b18      	ldr	r3, [pc, #96]	; (a920 <calc_disp_stdev+0xd8>)
    a8be:	1c11      	adds	r1, r2, #0
    a8c0:	4798      	blx	r3
    a8c2:	1c03      	adds	r3, r0, #0
    a8c4:	1c19      	adds	r1, r3, #0
    a8c6:	4b17      	ldr	r3, [pc, #92]	; (a924 <calc_disp_stdev+0xdc>)
    a8c8:	22ac      	movs	r2, #172	; 0xac
    a8ca:	0052      	lsls	r2, r2, #1
    a8cc:	4694      	mov	ip, r2
    a8ce:	44bc      	add	ip, r7
    a8d0:	4463      	add	r3, ip
    a8d2:	22aa      	movs	r2, #170	; 0xaa
    a8d4:	0052      	lsls	r2, r2, #1
    a8d6:	18ba      	adds	r2, r7, r2
    a8d8:	6812      	ldr	r2, [r2, #0]
    a8da:	0092      	lsls	r2, r2, #2
    a8dc:	50d1      	str	r1, [r2, r3]
	for (p=0;p<n_points;p++){
    a8de:	23aa      	movs	r3, #170	; 0xaa
    a8e0:	005b      	lsls	r3, r3, #1
    a8e2:	18fb      	adds	r3, r7, r3
    a8e4:	681b      	ldr	r3, [r3, #0]
    a8e6:	3301      	adds	r3, #1
    a8e8:	22aa      	movs	r2, #170	; 0xaa
    a8ea:	0052      	lsls	r2, r2, #1
    a8ec:	18ba      	adds	r2, r7, r2
    a8ee:	6013      	str	r3, [r2, #0]
    a8f0:	4b0d      	ldr	r3, [pc, #52]	; (a928 <calc_disp_stdev+0xe0>)
    a8f2:	681b      	ldr	r3, [r3, #0]
    a8f4:	22aa      	movs	r2, #170	; 0xaa
    a8f6:	0052      	lsls	r2, r2, #1
    a8f8:	18ba      	adds	r2, r7, r2
    a8fa:	6812      	ldr	r2, [r2, #0]
    a8fc:	429a      	cmp	r2, r3
    a8fe:	d3b5      	bcc.n	a86c <calc_disp_stdev+0x24>
		
	}
	
	return stdev(err_disp, n_points);
    a900:	4b09      	ldr	r3, [pc, #36]	; (a928 <calc_disp_stdev+0xe0>)
    a902:	681a      	ldr	r2, [r3, #0]
    a904:	2314      	movs	r3, #20
    a906:	18fb      	adds	r3, r7, r3
    a908:	0011      	movs	r1, r2
    a90a:	0018      	movs	r0, r3
    a90c:	4b07      	ldr	r3, [pc, #28]	; (a92c <calc_disp_stdev+0xe4>)
    a90e:	4798      	blx	r3
    a910:	1c03      	adds	r3, r0, #0
	
}
    a912:	1c18      	adds	r0, r3, #0
    a914:	46bd      	mov	sp, r7
    a916:	b056      	add	sp, #344	; 0x158
    a918:	bd80      	pop	{r7, pc}
    a91a:	46c0      	nop			; (mov r8, r8)
    a91c:	fffffeaf 	.word	0xfffffeaf
    a920:	0001eda5 	.word	0x0001eda5
    a924:	fffffebc 	.word	0xfffffebc
    a928:	200027f8 	.word	0x200027f8
    a92c:	0000a57d 	.word	0x0000a57d

0000a930 <cal_axis_misalignments>:

void cal_axis_misalignments(float XYZ[nbuf][3], struct INST_CAL *cal_struct){
    a930:	b5f0      	push	{r4, r5, r6, r7, lr}
    a932:	4ce6      	ldr	r4, [pc, #920]	; (accc <cal_axis_misalignments+0x39c>)
    a934:	44a5      	add	sp, r4
    a936:	af00      	add	r7, sp, #0
    a938:	6078      	str	r0, [r7, #4]
    a93a:	6039      	str	r1, [r7, #0]
	//  D'D*Res = D'*V;
	// inv(D'D)*D'D*Res = Res = inv(D'D)*(D'*V);
	
	
	// Create D
	for (k=0;k<n_points;k++){
    a93c:	2300      	movs	r3, #0
    a93e:	4ae4      	ldr	r2, [pc, #912]	; (acd0 <cal_axis_misalignments+0x3a0>)
    a940:	18ba      	adds	r2, r7, r2
    a942:	6013      	str	r3, [r2, #0]
    a944:	e102      	b.n	ab4c <cal_axis_misalignments+0x21c>
		D[k][0] = 1;
    a946:	4be3      	ldr	r3, [pc, #908]	; (acd4 <cal_axis_misalignments+0x3a4>)
    a948:	22e1      	movs	r2, #225	; 0xe1
    a94a:	00d2      	lsls	r2, r2, #3
    a94c:	4694      	mov	ip, r2
    a94e:	44bc      	add	ip, r7
    a950:	4463      	add	r3, ip
    a952:	4adf      	ldr	r2, [pc, #892]	; (acd0 <cal_axis_misalignments+0x3a0>)
    a954:	18ba      	adds	r2, r7, r2
    a956:	6812      	ldr	r2, [r2, #0]
    a958:	0112      	lsls	r2, r2, #4
    a95a:	21fe      	movs	r1, #254	; 0xfe
    a95c:	0589      	lsls	r1, r1, #22
    a95e:	50d1      	str	r1, [r2, r3]
		D[k][1] = -2*XYZ[k][0]*XYZ[k][1];
    a960:	4bdb      	ldr	r3, [pc, #876]	; (acd0 <cal_axis_misalignments+0x3a0>)
    a962:	18fb      	adds	r3, r7, r3
    a964:	681a      	ldr	r2, [r3, #0]
    a966:	0013      	movs	r3, r2
    a968:	005b      	lsls	r3, r3, #1
    a96a:	189b      	adds	r3, r3, r2
    a96c:	009b      	lsls	r3, r3, #2
    a96e:	001a      	movs	r2, r3
    a970:	687b      	ldr	r3, [r7, #4]
    a972:	189b      	adds	r3, r3, r2
    a974:	681a      	ldr	r2, [r3, #0]
    a976:	4bd8      	ldr	r3, [pc, #864]	; (acd8 <cal_axis_misalignments+0x3a8>)
    a978:	21c0      	movs	r1, #192	; 0xc0
    a97a:	0609      	lsls	r1, r1, #24
    a97c:	1c10      	adds	r0, r2, #0
    a97e:	4798      	blx	r3
    a980:	1c03      	adds	r3, r0, #0
    a982:	1c18      	adds	r0, r3, #0
    a984:	4bd2      	ldr	r3, [pc, #840]	; (acd0 <cal_axis_misalignments+0x3a0>)
    a986:	18fb      	adds	r3, r7, r3
    a988:	681a      	ldr	r2, [r3, #0]
    a98a:	0013      	movs	r3, r2
    a98c:	005b      	lsls	r3, r3, #1
    a98e:	189b      	adds	r3, r3, r2
    a990:	009b      	lsls	r3, r3, #2
    a992:	001a      	movs	r2, r3
    a994:	687b      	ldr	r3, [r7, #4]
    a996:	189b      	adds	r3, r3, r2
    a998:	685a      	ldr	r2, [r3, #4]
    a99a:	4bcf      	ldr	r3, [pc, #828]	; (acd8 <cal_axis_misalignments+0x3a8>)
    a99c:	1c11      	adds	r1, r2, #0
    a99e:	4798      	blx	r3
    a9a0:	1c03      	adds	r3, r0, #0
    a9a2:	1c19      	adds	r1, r3, #0
    a9a4:	4bcb      	ldr	r3, [pc, #812]	; (acd4 <cal_axis_misalignments+0x3a4>)
    a9a6:	22e1      	movs	r2, #225	; 0xe1
    a9a8:	00d2      	lsls	r2, r2, #3
    a9aa:	18ba      	adds	r2, r7, r2
    a9ac:	18d2      	adds	r2, r2, r3
    a9ae:	4bc8      	ldr	r3, [pc, #800]	; (acd0 <cal_axis_misalignments+0x3a0>)
    a9b0:	18fb      	adds	r3, r7, r3
    a9b2:	681b      	ldr	r3, [r3, #0]
    a9b4:	011b      	lsls	r3, r3, #4
    a9b6:	18d3      	adds	r3, r2, r3
    a9b8:	3304      	adds	r3, #4
    a9ba:	6019      	str	r1, [r3, #0]
		D[k][2] = -2*XYZ[k][1]*XYZ[k][2];
    a9bc:	4bc4      	ldr	r3, [pc, #784]	; (acd0 <cal_axis_misalignments+0x3a0>)
    a9be:	18fb      	adds	r3, r7, r3
    a9c0:	681a      	ldr	r2, [r3, #0]
    a9c2:	0013      	movs	r3, r2
    a9c4:	005b      	lsls	r3, r3, #1
    a9c6:	189b      	adds	r3, r3, r2
    a9c8:	009b      	lsls	r3, r3, #2
    a9ca:	001a      	movs	r2, r3
    a9cc:	687b      	ldr	r3, [r7, #4]
    a9ce:	189b      	adds	r3, r3, r2
    a9d0:	685a      	ldr	r2, [r3, #4]
    a9d2:	4bc1      	ldr	r3, [pc, #772]	; (acd8 <cal_axis_misalignments+0x3a8>)
    a9d4:	21c0      	movs	r1, #192	; 0xc0
    a9d6:	0609      	lsls	r1, r1, #24
    a9d8:	1c10      	adds	r0, r2, #0
    a9da:	4798      	blx	r3
    a9dc:	1c03      	adds	r3, r0, #0
    a9de:	1c18      	adds	r0, r3, #0
    a9e0:	4bbb      	ldr	r3, [pc, #748]	; (acd0 <cal_axis_misalignments+0x3a0>)
    a9e2:	18fb      	adds	r3, r7, r3
    a9e4:	681a      	ldr	r2, [r3, #0]
    a9e6:	0013      	movs	r3, r2
    a9e8:	005b      	lsls	r3, r3, #1
    a9ea:	189b      	adds	r3, r3, r2
    a9ec:	009b      	lsls	r3, r3, #2
    a9ee:	001a      	movs	r2, r3
    a9f0:	687b      	ldr	r3, [r7, #4]
    a9f2:	189b      	adds	r3, r3, r2
    a9f4:	689a      	ldr	r2, [r3, #8]
    a9f6:	4bb8      	ldr	r3, [pc, #736]	; (acd8 <cal_axis_misalignments+0x3a8>)
    a9f8:	1c11      	adds	r1, r2, #0
    a9fa:	4798      	blx	r3
    a9fc:	1c03      	adds	r3, r0, #0
    a9fe:	1c19      	adds	r1, r3, #0
    aa00:	4bb4      	ldr	r3, [pc, #720]	; (acd4 <cal_axis_misalignments+0x3a4>)
    aa02:	22e1      	movs	r2, #225	; 0xe1
    aa04:	00d2      	lsls	r2, r2, #3
    aa06:	18ba      	adds	r2, r7, r2
    aa08:	18d2      	adds	r2, r2, r3
    aa0a:	4bb1      	ldr	r3, [pc, #708]	; (acd0 <cal_axis_misalignments+0x3a0>)
    aa0c:	18fb      	adds	r3, r7, r3
    aa0e:	681b      	ldr	r3, [r3, #0]
    aa10:	011b      	lsls	r3, r3, #4
    aa12:	18d3      	adds	r3, r2, r3
    aa14:	3308      	adds	r3, #8
    aa16:	6019      	str	r1, [r3, #0]
		D[k][3] = -2*XYZ[k][0]*XYZ[k][2];
    aa18:	4bad      	ldr	r3, [pc, #692]	; (acd0 <cal_axis_misalignments+0x3a0>)
    aa1a:	18fb      	adds	r3, r7, r3
    aa1c:	681a      	ldr	r2, [r3, #0]
    aa1e:	0013      	movs	r3, r2
    aa20:	005b      	lsls	r3, r3, #1
    aa22:	189b      	adds	r3, r3, r2
    aa24:	009b      	lsls	r3, r3, #2
    aa26:	001a      	movs	r2, r3
    aa28:	687b      	ldr	r3, [r7, #4]
    aa2a:	189b      	adds	r3, r3, r2
    aa2c:	681a      	ldr	r2, [r3, #0]
    aa2e:	4baa      	ldr	r3, [pc, #680]	; (acd8 <cal_axis_misalignments+0x3a8>)
    aa30:	21c0      	movs	r1, #192	; 0xc0
    aa32:	0609      	lsls	r1, r1, #24
    aa34:	1c10      	adds	r0, r2, #0
    aa36:	4798      	blx	r3
    aa38:	1c03      	adds	r3, r0, #0
    aa3a:	1c18      	adds	r0, r3, #0
    aa3c:	4ba4      	ldr	r3, [pc, #656]	; (acd0 <cal_axis_misalignments+0x3a0>)
    aa3e:	18fb      	adds	r3, r7, r3
    aa40:	681a      	ldr	r2, [r3, #0]
    aa42:	0013      	movs	r3, r2
    aa44:	005b      	lsls	r3, r3, #1
    aa46:	189b      	adds	r3, r3, r2
    aa48:	009b      	lsls	r3, r3, #2
    aa4a:	001a      	movs	r2, r3
    aa4c:	687b      	ldr	r3, [r7, #4]
    aa4e:	189b      	adds	r3, r3, r2
    aa50:	689a      	ldr	r2, [r3, #8]
    aa52:	4ba1      	ldr	r3, [pc, #644]	; (acd8 <cal_axis_misalignments+0x3a8>)
    aa54:	1c11      	adds	r1, r2, #0
    aa56:	4798      	blx	r3
    aa58:	1c03      	adds	r3, r0, #0
    aa5a:	1c19      	adds	r1, r3, #0
    aa5c:	4b9d      	ldr	r3, [pc, #628]	; (acd4 <cal_axis_misalignments+0x3a4>)
    aa5e:	22e1      	movs	r2, #225	; 0xe1
    aa60:	00d2      	lsls	r2, r2, #3
    aa62:	18ba      	adds	r2, r7, r2
    aa64:	18d2      	adds	r2, r2, r3
    aa66:	4b9a      	ldr	r3, [pc, #616]	; (acd0 <cal_axis_misalignments+0x3a0>)
    aa68:	18fb      	adds	r3, r7, r3
    aa6a:	681b      	ldr	r3, [r3, #0]
    aa6c:	011b      	lsls	r3, r3, #4
    aa6e:	18d3      	adds	r3, r2, r3
    aa70:	330c      	adds	r3, #12
    aa72:	6019      	str	r1, [r3, #0]
		
		V[k] = pow(XYZ[k][0],2)+pow(XYZ[k][1],2)+pow(XYZ[k][2],2);
    aa74:	4b96      	ldr	r3, [pc, #600]	; (acd0 <cal_axis_misalignments+0x3a0>)
    aa76:	18fb      	adds	r3, r7, r3
    aa78:	681a      	ldr	r2, [r3, #0]
    aa7a:	0013      	movs	r3, r2
    aa7c:	005b      	lsls	r3, r3, #1
    aa7e:	189b      	adds	r3, r3, r2
    aa80:	009b      	lsls	r3, r3, #2
    aa82:	001a      	movs	r2, r3
    aa84:	687b      	ldr	r3, [r7, #4]
    aa86:	189b      	adds	r3, r3, r2
    aa88:	681a      	ldr	r2, [r3, #0]
    aa8a:	4b94      	ldr	r3, [pc, #592]	; (acdc <cal_axis_misalignments+0x3ac>)
    aa8c:	1c10      	adds	r0, r2, #0
    aa8e:	4798      	blx	r3
    aa90:	2300      	movs	r3, #0
    aa92:	2480      	movs	r4, #128	; 0x80
    aa94:	05e4      	lsls	r4, r4, #23
    aa96:	001a      	movs	r2, r3
    aa98:	0023      	movs	r3, r4
    aa9a:	4c91      	ldr	r4, [pc, #580]	; (ace0 <cal_axis_misalignments+0x3b0>)
    aa9c:	47a0      	blx	r4
    aa9e:	0005      	movs	r5, r0
    aaa0:	000e      	movs	r6, r1
    aaa2:	4b8b      	ldr	r3, [pc, #556]	; (acd0 <cal_axis_misalignments+0x3a0>)
    aaa4:	18fb      	adds	r3, r7, r3
    aaa6:	681a      	ldr	r2, [r3, #0]
    aaa8:	0013      	movs	r3, r2
    aaaa:	005b      	lsls	r3, r3, #1
    aaac:	189b      	adds	r3, r3, r2
    aaae:	009b      	lsls	r3, r3, #2
    aab0:	001a      	movs	r2, r3
    aab2:	687b      	ldr	r3, [r7, #4]
    aab4:	189b      	adds	r3, r3, r2
    aab6:	685a      	ldr	r2, [r3, #4]
    aab8:	4b88      	ldr	r3, [pc, #544]	; (acdc <cal_axis_misalignments+0x3ac>)
    aaba:	1c10      	adds	r0, r2, #0
    aabc:	4798      	blx	r3
    aabe:	2300      	movs	r3, #0
    aac0:	2480      	movs	r4, #128	; 0x80
    aac2:	05e4      	lsls	r4, r4, #23
    aac4:	001a      	movs	r2, r3
    aac6:	0023      	movs	r3, r4
    aac8:	4c85      	ldr	r4, [pc, #532]	; (ace0 <cal_axis_misalignments+0x3b0>)
    aaca:	47a0      	blx	r4
    aacc:	0002      	movs	r2, r0
    aace:	000b      	movs	r3, r1
    aad0:	4c84      	ldr	r4, [pc, #528]	; (ace4 <cal_axis_misalignments+0x3b4>)
    aad2:	0028      	movs	r0, r5
    aad4:	0031      	movs	r1, r6
    aad6:	47a0      	blx	r4
    aad8:	0003      	movs	r3, r0
    aada:	000c      	movs	r4, r1
    aadc:	001d      	movs	r5, r3
    aade:	0026      	movs	r6, r4
    aae0:	4b7b      	ldr	r3, [pc, #492]	; (acd0 <cal_axis_misalignments+0x3a0>)
    aae2:	18fb      	adds	r3, r7, r3
    aae4:	681a      	ldr	r2, [r3, #0]
    aae6:	0013      	movs	r3, r2
    aae8:	005b      	lsls	r3, r3, #1
    aaea:	189b      	adds	r3, r3, r2
    aaec:	009b      	lsls	r3, r3, #2
    aaee:	001a      	movs	r2, r3
    aaf0:	687b      	ldr	r3, [r7, #4]
    aaf2:	189b      	adds	r3, r3, r2
    aaf4:	689a      	ldr	r2, [r3, #8]
    aaf6:	4b79      	ldr	r3, [pc, #484]	; (acdc <cal_axis_misalignments+0x3ac>)
    aaf8:	1c10      	adds	r0, r2, #0
    aafa:	4798      	blx	r3
    aafc:	2300      	movs	r3, #0
    aafe:	2480      	movs	r4, #128	; 0x80
    ab00:	05e4      	lsls	r4, r4, #23
    ab02:	001a      	movs	r2, r3
    ab04:	0023      	movs	r3, r4
    ab06:	4c76      	ldr	r4, [pc, #472]	; (ace0 <cal_axis_misalignments+0x3b0>)
    ab08:	47a0      	blx	r4
    ab0a:	0002      	movs	r2, r0
    ab0c:	000b      	movs	r3, r1
    ab0e:	4c75      	ldr	r4, [pc, #468]	; (ace4 <cal_axis_misalignments+0x3b4>)
    ab10:	0028      	movs	r0, r5
    ab12:	0031      	movs	r1, r6
    ab14:	47a0      	blx	r4
    ab16:	0003      	movs	r3, r0
    ab18:	000c      	movs	r4, r1
    ab1a:	0019      	movs	r1, r3
    ab1c:	0022      	movs	r2, r4
    ab1e:	4b72      	ldr	r3, [pc, #456]	; (ace8 <cal_axis_misalignments+0x3b8>)
    ab20:	0008      	movs	r0, r1
    ab22:	0011      	movs	r1, r2
    ab24:	4798      	blx	r3
    ab26:	1c01      	adds	r1, r0, #0
    ab28:	4b70      	ldr	r3, [pc, #448]	; (acec <cal_axis_misalignments+0x3bc>)
    ab2a:	22e1      	movs	r2, #225	; 0xe1
    ab2c:	00d2      	lsls	r2, r2, #3
    ab2e:	4694      	mov	ip, r2
    ab30:	44bc      	add	ip, r7
    ab32:	4463      	add	r3, ip
    ab34:	4a66      	ldr	r2, [pc, #408]	; (acd0 <cal_axis_misalignments+0x3a0>)
    ab36:	18ba      	adds	r2, r7, r2
    ab38:	6812      	ldr	r2, [r2, #0]
    ab3a:	0092      	lsls	r2, r2, #2
    ab3c:	50d1      	str	r1, [r2, r3]
	for (k=0;k<n_points;k++){
    ab3e:	4b64      	ldr	r3, [pc, #400]	; (acd0 <cal_axis_misalignments+0x3a0>)
    ab40:	18fb      	adds	r3, r7, r3
    ab42:	681b      	ldr	r3, [r3, #0]
    ab44:	3301      	adds	r3, #1
    ab46:	4a62      	ldr	r2, [pc, #392]	; (acd0 <cal_axis_misalignments+0x3a0>)
    ab48:	18ba      	adds	r2, r7, r2
    ab4a:	6013      	str	r3, [r2, #0]
    ab4c:	4b68      	ldr	r3, [pc, #416]	; (acf0 <cal_axis_misalignments+0x3c0>)
    ab4e:	681b      	ldr	r3, [r3, #0]
    ab50:	4a5f      	ldr	r2, [pc, #380]	; (acd0 <cal_axis_misalignments+0x3a0>)
    ab52:	18ba      	adds	r2, r7, r2
    ab54:	6812      	ldr	r2, [r2, #0]
    ab56:	429a      	cmp	r2, r3
    ab58:	d200      	bcs.n	ab5c <cal_axis_misalignments+0x22c>
    ab5a:	e6f4      	b.n	a946 <cal_axis_misalignments+0x16>
	}
	//printf("\n\nD Matrix:\n");
	//print_matrix(D, n_points, 4);
	//D'*D
	for (i=0;i<4;i++){
    ab5c:	2300      	movs	r3, #0
    ab5e:	4a65      	ldr	r2, [pc, #404]	; (acf4 <cal_axis_misalignments+0x3c4>)
    ab60:	18ba      	adds	r2, r7, r2
    ab62:	6013      	str	r3, [r2, #0]
    ab64:	e095      	b.n	ac92 <cal_axis_misalignments+0x362>
		for (j=0;j<4;j++){
    ab66:	2300      	movs	r3, #0
    ab68:	22e0      	movs	r2, #224	; 0xe0
    ab6a:	00d2      	lsls	r2, r2, #3
    ab6c:	18ba      	adds	r2, r7, r2
    ab6e:	6013      	str	r3, [r2, #0]
    ab70:	e081      	b.n	ac76 <cal_axis_misalignments+0x346>
			DtD[i][j] = 0;
    ab72:	4b61      	ldr	r3, [pc, #388]	; (acf8 <cal_axis_misalignments+0x3c8>)
    ab74:	22e1      	movs	r2, #225	; 0xe1
    ab76:	00d2      	lsls	r2, r2, #3
    ab78:	18ba      	adds	r2, r7, r2
    ab7a:	18d1      	adds	r1, r2, r3
    ab7c:	4b5d      	ldr	r3, [pc, #372]	; (acf4 <cal_axis_misalignments+0x3c4>)
    ab7e:	18fb      	adds	r3, r7, r3
    ab80:	681a      	ldr	r2, [r3, #0]
    ab82:	0013      	movs	r3, r2
    ab84:	005b      	lsls	r3, r3, #1
    ab86:	189b      	adds	r3, r3, r2
    ab88:	005b      	lsls	r3, r3, #1
    ab8a:	22e0      	movs	r2, #224	; 0xe0
    ab8c:	00d2      	lsls	r2, r2, #3
    ab8e:	18ba      	adds	r2, r7, r2
    ab90:	6812      	ldr	r2, [r2, #0]
    ab92:	189b      	adds	r3, r3, r2
    ab94:	009b      	lsls	r3, r3, #2
    ab96:	2200      	movs	r2, #0
    ab98:	505a      	str	r2, [r3, r1]
			for (k=0;k<n_points;k++){
    ab9a:	2300      	movs	r3, #0
    ab9c:	4a4c      	ldr	r2, [pc, #304]	; (acd0 <cal_axis_misalignments+0x3a0>)
    ab9e:	18ba      	adds	r2, r7, r2
    aba0:	6013      	str	r3, [r2, #0]
    aba2:	e058      	b.n	ac56 <cal_axis_misalignments+0x326>
				DtD[i][j] = DtD[i][j] + D[k][i]*D[k][j];
    aba4:	4b54      	ldr	r3, [pc, #336]	; (acf8 <cal_axis_misalignments+0x3c8>)
    aba6:	22e1      	movs	r2, #225	; 0xe1
    aba8:	00d2      	lsls	r2, r2, #3
    abaa:	18ba      	adds	r2, r7, r2
    abac:	18d1      	adds	r1, r2, r3
    abae:	4b51      	ldr	r3, [pc, #324]	; (acf4 <cal_axis_misalignments+0x3c4>)
    abb0:	18fb      	adds	r3, r7, r3
    abb2:	681a      	ldr	r2, [r3, #0]
    abb4:	0013      	movs	r3, r2
    abb6:	005b      	lsls	r3, r3, #1
    abb8:	189b      	adds	r3, r3, r2
    abba:	005b      	lsls	r3, r3, #1
    abbc:	22e0      	movs	r2, #224	; 0xe0
    abbe:	00d2      	lsls	r2, r2, #3
    abc0:	18ba      	adds	r2, r7, r2
    abc2:	6812      	ldr	r2, [r2, #0]
    abc4:	189b      	adds	r3, r3, r2
    abc6:	009b      	lsls	r3, r3, #2
    abc8:	585c      	ldr	r4, [r3, r1]
    abca:	4b42      	ldr	r3, [pc, #264]	; (acd4 <cal_axis_misalignments+0x3a4>)
    abcc:	22e1      	movs	r2, #225	; 0xe1
    abce:	00d2      	lsls	r2, r2, #3
    abd0:	4694      	mov	ip, r2
    abd2:	44bc      	add	ip, r7
    abd4:	4463      	add	r3, ip
    abd6:	4a3e      	ldr	r2, [pc, #248]	; (acd0 <cal_axis_misalignments+0x3a0>)
    abd8:	18ba      	adds	r2, r7, r2
    abda:	6812      	ldr	r2, [r2, #0]
    abdc:	0091      	lsls	r1, r2, #2
    abde:	4a45      	ldr	r2, [pc, #276]	; (acf4 <cal_axis_misalignments+0x3c4>)
    abe0:	18ba      	adds	r2, r7, r2
    abe2:	6812      	ldr	r2, [r2, #0]
    abe4:	188a      	adds	r2, r1, r2
    abe6:	0092      	lsls	r2, r2, #2
    abe8:	58d0      	ldr	r0, [r2, r3]
    abea:	4b3a      	ldr	r3, [pc, #232]	; (acd4 <cal_axis_misalignments+0x3a4>)
    abec:	22e1      	movs	r2, #225	; 0xe1
    abee:	00d2      	lsls	r2, r2, #3
    abf0:	4694      	mov	ip, r2
    abf2:	44bc      	add	ip, r7
    abf4:	4463      	add	r3, ip
    abf6:	4a36      	ldr	r2, [pc, #216]	; (acd0 <cal_axis_misalignments+0x3a0>)
    abf8:	18ba      	adds	r2, r7, r2
    abfa:	6812      	ldr	r2, [r2, #0]
    abfc:	0091      	lsls	r1, r2, #2
    abfe:	22e0      	movs	r2, #224	; 0xe0
    ac00:	00d2      	lsls	r2, r2, #3
    ac02:	18ba      	adds	r2, r7, r2
    ac04:	6812      	ldr	r2, [r2, #0]
    ac06:	188a      	adds	r2, r1, r2
    ac08:	0092      	lsls	r2, r2, #2
    ac0a:	58d2      	ldr	r2, [r2, r3]
    ac0c:	4b32      	ldr	r3, [pc, #200]	; (acd8 <cal_axis_misalignments+0x3a8>)
    ac0e:	1c11      	adds	r1, r2, #0
    ac10:	4798      	blx	r3
    ac12:	1c03      	adds	r3, r0, #0
    ac14:	1c1a      	adds	r2, r3, #0
    ac16:	4b39      	ldr	r3, [pc, #228]	; (acfc <cal_axis_misalignments+0x3cc>)
    ac18:	1c11      	adds	r1, r2, #0
    ac1a:	1c20      	adds	r0, r4, #0
    ac1c:	4798      	blx	r3
    ac1e:	1c03      	adds	r3, r0, #0
    ac20:	1c18      	adds	r0, r3, #0
    ac22:	4b35      	ldr	r3, [pc, #212]	; (acf8 <cal_axis_misalignments+0x3c8>)
    ac24:	22e1      	movs	r2, #225	; 0xe1
    ac26:	00d2      	lsls	r2, r2, #3
    ac28:	18ba      	adds	r2, r7, r2
    ac2a:	18d1      	adds	r1, r2, r3
    ac2c:	4b31      	ldr	r3, [pc, #196]	; (acf4 <cal_axis_misalignments+0x3c4>)
    ac2e:	18fb      	adds	r3, r7, r3
    ac30:	681a      	ldr	r2, [r3, #0]
    ac32:	0013      	movs	r3, r2
    ac34:	005b      	lsls	r3, r3, #1
    ac36:	189b      	adds	r3, r3, r2
    ac38:	005b      	lsls	r3, r3, #1
    ac3a:	22e0      	movs	r2, #224	; 0xe0
    ac3c:	00d2      	lsls	r2, r2, #3
    ac3e:	18ba      	adds	r2, r7, r2
    ac40:	6812      	ldr	r2, [r2, #0]
    ac42:	189b      	adds	r3, r3, r2
    ac44:	009b      	lsls	r3, r3, #2
    ac46:	5058      	str	r0, [r3, r1]
			for (k=0;k<n_points;k++){
    ac48:	4b21      	ldr	r3, [pc, #132]	; (acd0 <cal_axis_misalignments+0x3a0>)
    ac4a:	18fb      	adds	r3, r7, r3
    ac4c:	681b      	ldr	r3, [r3, #0]
    ac4e:	3301      	adds	r3, #1
    ac50:	4a1f      	ldr	r2, [pc, #124]	; (acd0 <cal_axis_misalignments+0x3a0>)
    ac52:	18ba      	adds	r2, r7, r2
    ac54:	6013      	str	r3, [r2, #0]
    ac56:	4b26      	ldr	r3, [pc, #152]	; (acf0 <cal_axis_misalignments+0x3c0>)
    ac58:	681b      	ldr	r3, [r3, #0]
    ac5a:	4a1d      	ldr	r2, [pc, #116]	; (acd0 <cal_axis_misalignments+0x3a0>)
    ac5c:	18ba      	adds	r2, r7, r2
    ac5e:	6812      	ldr	r2, [r2, #0]
    ac60:	429a      	cmp	r2, r3
    ac62:	d39f      	bcc.n	aba4 <cal_axis_misalignments+0x274>
		for (j=0;j<4;j++){
    ac64:	23e0      	movs	r3, #224	; 0xe0
    ac66:	00db      	lsls	r3, r3, #3
    ac68:	18fb      	adds	r3, r7, r3
    ac6a:	681b      	ldr	r3, [r3, #0]
    ac6c:	3301      	adds	r3, #1
    ac6e:	22e0      	movs	r2, #224	; 0xe0
    ac70:	00d2      	lsls	r2, r2, #3
    ac72:	18ba      	adds	r2, r7, r2
    ac74:	6013      	str	r3, [r2, #0]
    ac76:	23e0      	movs	r3, #224	; 0xe0
    ac78:	00db      	lsls	r3, r3, #3
    ac7a:	18fb      	adds	r3, r7, r3
    ac7c:	681b      	ldr	r3, [r3, #0]
    ac7e:	2b03      	cmp	r3, #3
    ac80:	d800      	bhi.n	ac84 <cal_axis_misalignments+0x354>
    ac82:	e776      	b.n	ab72 <cal_axis_misalignments+0x242>
	for (i=0;i<4;i++){
    ac84:	4b1b      	ldr	r3, [pc, #108]	; (acf4 <cal_axis_misalignments+0x3c4>)
    ac86:	18fb      	adds	r3, r7, r3
    ac88:	681b      	ldr	r3, [r3, #0]
    ac8a:	3301      	adds	r3, #1
    ac8c:	4a19      	ldr	r2, [pc, #100]	; (acf4 <cal_axis_misalignments+0x3c4>)
    ac8e:	18ba      	adds	r2, r7, r2
    ac90:	6013      	str	r3, [r2, #0]
    ac92:	4b18      	ldr	r3, [pc, #96]	; (acf4 <cal_axis_misalignments+0x3c4>)
    ac94:	18fb      	adds	r3, r7, r3
    ac96:	681b      	ldr	r3, [r3, #0]
    ac98:	2b03      	cmp	r3, #3
    ac9a:	d800      	bhi.n	ac9e <cal_axis_misalignments+0x36e>
    ac9c:	e763      	b.n	ab66 <cal_axis_misalignments+0x236>
	}
	//printf("\n\nDtD Matrix:\n");
	//print_matrix(DtD, 6, 6);
	
	// Dt*V
	for (i=0;i<4;i++){
    ac9e:	2300      	movs	r3, #0
    aca0:	4a14      	ldr	r2, [pc, #80]	; (acf4 <cal_axis_misalignments+0x3c4>)
    aca2:	18ba      	adds	r2, r7, r2
    aca4:	6013      	str	r3, [r2, #0]
    aca6:	e07e      	b.n	ada6 <cal_axis_misalignments+0x476>
		DtV[i] = 0;
    aca8:	4b15      	ldr	r3, [pc, #84]	; (ad00 <cal_axis_misalignments+0x3d0>)
    acaa:	22e1      	movs	r2, #225	; 0xe1
    acac:	00d2      	lsls	r2, r2, #3
    acae:	4694      	mov	ip, r2
    acb0:	44bc      	add	ip, r7
    acb2:	4463      	add	r3, ip
    acb4:	4a0f      	ldr	r2, [pc, #60]	; (acf4 <cal_axis_misalignments+0x3c4>)
    acb6:	18ba      	adds	r2, r7, r2
    acb8:	6812      	ldr	r2, [r2, #0]
    acba:	0092      	lsls	r2, r2, #2
    acbc:	2100      	movs	r1, #0
    acbe:	50d1      	str	r1, [r2, r3]
		for (k=0;k<n_points;k++){
    acc0:	2300      	movs	r3, #0
    acc2:	4a03      	ldr	r2, [pc, #12]	; (acd0 <cal_axis_misalignments+0x3a0>)
    acc4:	18ba      	adds	r2, r7, r2
    acc6:	6013      	str	r3, [r2, #0]
    acc8:	e05f      	b.n	ad8a <cal_axis_misalignments+0x45a>
    acca:	46c0      	nop			; (mov r8, r8)
    accc:	fffff8f4 	.word	0xfffff8f4
    acd0:	000006fc 	.word	0x000006fc
    acd4:	fffffaf4 	.word	0xfffffaf4
    acd8:	0001eb65 	.word	0x0001eb65
    acdc:	00020d99 	.word	0x00020d99
    ace0:	0001b749 	.word	0x0001b749
    ace4:	0001f249 	.word	0x0001f249
    ace8:	00020e3d 	.word	0x00020e3d
    acec:	fffff9b4 	.word	0xfffff9b4
    acf0:	200027f8 	.word	0x200027f8
    acf4:	00000704 	.word	0x00000704
    acf8:	fffff924 	.word	0xfffff924
    acfc:	0001e461 	.word	0x0001e461
    ad00:	fffff914 	.word	0xfffff914
			DtV[i] = DtV[i]+D[k][i]*V[k];
    ad04:	4b78      	ldr	r3, [pc, #480]	; (aee8 <cal_axis_misalignments+0x5b8>)
    ad06:	22e1      	movs	r2, #225	; 0xe1
    ad08:	00d2      	lsls	r2, r2, #3
    ad0a:	4694      	mov	ip, r2
    ad0c:	44bc      	add	ip, r7
    ad0e:	4463      	add	r3, ip
    ad10:	4a76      	ldr	r2, [pc, #472]	; (aeec <cal_axis_misalignments+0x5bc>)
    ad12:	18ba      	adds	r2, r7, r2
    ad14:	6812      	ldr	r2, [r2, #0]
    ad16:	0092      	lsls	r2, r2, #2
    ad18:	58d4      	ldr	r4, [r2, r3]
    ad1a:	4b75      	ldr	r3, [pc, #468]	; (aef0 <cal_axis_misalignments+0x5c0>)
    ad1c:	22e1      	movs	r2, #225	; 0xe1
    ad1e:	00d2      	lsls	r2, r2, #3
    ad20:	4694      	mov	ip, r2
    ad22:	44bc      	add	ip, r7
    ad24:	4463      	add	r3, ip
    ad26:	4a73      	ldr	r2, [pc, #460]	; (aef4 <cal_axis_misalignments+0x5c4>)
    ad28:	18ba      	adds	r2, r7, r2
    ad2a:	6812      	ldr	r2, [r2, #0]
    ad2c:	0091      	lsls	r1, r2, #2
    ad2e:	4a6f      	ldr	r2, [pc, #444]	; (aeec <cal_axis_misalignments+0x5bc>)
    ad30:	18ba      	adds	r2, r7, r2
    ad32:	6812      	ldr	r2, [r2, #0]
    ad34:	188a      	adds	r2, r1, r2
    ad36:	0092      	lsls	r2, r2, #2
    ad38:	58d0      	ldr	r0, [r2, r3]
    ad3a:	4b6f      	ldr	r3, [pc, #444]	; (aef8 <cal_axis_misalignments+0x5c8>)
    ad3c:	22e1      	movs	r2, #225	; 0xe1
    ad3e:	00d2      	lsls	r2, r2, #3
    ad40:	4694      	mov	ip, r2
    ad42:	44bc      	add	ip, r7
    ad44:	4463      	add	r3, ip
    ad46:	4a6b      	ldr	r2, [pc, #428]	; (aef4 <cal_axis_misalignments+0x5c4>)
    ad48:	18ba      	adds	r2, r7, r2
    ad4a:	6812      	ldr	r2, [r2, #0]
    ad4c:	0092      	lsls	r2, r2, #2
    ad4e:	58d2      	ldr	r2, [r2, r3]
    ad50:	4b6a      	ldr	r3, [pc, #424]	; (aefc <cal_axis_misalignments+0x5cc>)
    ad52:	1c11      	adds	r1, r2, #0
    ad54:	4798      	blx	r3
    ad56:	1c03      	adds	r3, r0, #0
    ad58:	1c1a      	adds	r2, r3, #0
    ad5a:	4b69      	ldr	r3, [pc, #420]	; (af00 <cal_axis_misalignments+0x5d0>)
    ad5c:	1c11      	adds	r1, r2, #0
    ad5e:	1c20      	adds	r0, r4, #0
    ad60:	4798      	blx	r3
    ad62:	1c03      	adds	r3, r0, #0
    ad64:	1c19      	adds	r1, r3, #0
    ad66:	4b60      	ldr	r3, [pc, #384]	; (aee8 <cal_axis_misalignments+0x5b8>)
    ad68:	22e1      	movs	r2, #225	; 0xe1
    ad6a:	00d2      	lsls	r2, r2, #3
    ad6c:	4694      	mov	ip, r2
    ad6e:	44bc      	add	ip, r7
    ad70:	4463      	add	r3, ip
    ad72:	4a5e      	ldr	r2, [pc, #376]	; (aeec <cal_axis_misalignments+0x5bc>)
    ad74:	18ba      	adds	r2, r7, r2
    ad76:	6812      	ldr	r2, [r2, #0]
    ad78:	0092      	lsls	r2, r2, #2
    ad7a:	50d1      	str	r1, [r2, r3]
		for (k=0;k<n_points;k++){
    ad7c:	4b5d      	ldr	r3, [pc, #372]	; (aef4 <cal_axis_misalignments+0x5c4>)
    ad7e:	18fb      	adds	r3, r7, r3
    ad80:	681b      	ldr	r3, [r3, #0]
    ad82:	3301      	adds	r3, #1
    ad84:	4a5b      	ldr	r2, [pc, #364]	; (aef4 <cal_axis_misalignments+0x5c4>)
    ad86:	18ba      	adds	r2, r7, r2
    ad88:	6013      	str	r3, [r2, #0]
    ad8a:	4b5e      	ldr	r3, [pc, #376]	; (af04 <cal_axis_misalignments+0x5d4>)
    ad8c:	681b      	ldr	r3, [r3, #0]
    ad8e:	4a59      	ldr	r2, [pc, #356]	; (aef4 <cal_axis_misalignments+0x5c4>)
    ad90:	18ba      	adds	r2, r7, r2
    ad92:	6812      	ldr	r2, [r2, #0]
    ad94:	429a      	cmp	r2, r3
    ad96:	d3b5      	bcc.n	ad04 <cal_axis_misalignments+0x3d4>
	for (i=0;i<4;i++){
    ad98:	4b54      	ldr	r3, [pc, #336]	; (aeec <cal_axis_misalignments+0x5bc>)
    ad9a:	18fb      	adds	r3, r7, r3
    ad9c:	681b      	ldr	r3, [r3, #0]
    ad9e:	3301      	adds	r3, #1
    ada0:	4a52      	ldr	r2, [pc, #328]	; (aeec <cal_axis_misalignments+0x5bc>)
    ada2:	18ba      	adds	r2, r7, r2
    ada4:	6013      	str	r3, [r2, #0]
    ada6:	4b51      	ldr	r3, [pc, #324]	; (aeec <cal_axis_misalignments+0x5bc>)
    ada8:	18fb      	adds	r3, r7, r3
    adaa:	681b      	ldr	r3, [r3, #0]
    adac:	2b03      	cmp	r3, #3
    adae:	d800      	bhi.n	adb2 <cal_axis_misalignments+0x482>
    adb0:	e77a      	b.n	aca8 <cal_axis_misalignments+0x378>
	}
	//printf("\n\nDtV Matrix:\n");
	//print_matrix(DtV, 4, 1);
	
	//  Inv(D'D)
	inverse(DtD, DtD, 4);
    adb2:	232c      	movs	r3, #44	; 0x2c
    adb4:	18f9      	adds	r1, r7, r3
    adb6:	232c      	movs	r3, #44	; 0x2c
    adb8:	18fb      	adds	r3, r7, r3
    adba:	2204      	movs	r2, #4
    adbc:	0018      	movs	r0, r3
    adbe:	4b52      	ldr	r3, [pc, #328]	; (af08 <cal_axis_misalignments+0x5d8>)
    adc0:	4798      	blx	r3
	//printf("\n\ninverse DtD Matrix:\n");
	//print_matrix(DtD, 6, 6);
	//  Find result
	for (i=0;i<4;i++){
    adc2:	2300      	movs	r3, #0
    adc4:	4a49      	ldr	r2, [pc, #292]	; (aeec <cal_axis_misalignments+0x5bc>)
    adc6:	18ba      	adds	r2, r7, r2
    adc8:	6013      	str	r3, [r2, #0]
    adca:	e067      	b.n	ae9c <cal_axis_misalignments+0x56c>
		Res[i] = 0;
    adcc:	4b4f      	ldr	r3, [pc, #316]	; (af0c <cal_axis_misalignments+0x5dc>)
    adce:	22e1      	movs	r2, #225	; 0xe1
    add0:	00d2      	lsls	r2, r2, #3
    add2:	4694      	mov	ip, r2
    add4:	44bc      	add	ip, r7
    add6:	4463      	add	r3, ip
    add8:	4a44      	ldr	r2, [pc, #272]	; (aeec <cal_axis_misalignments+0x5bc>)
    adda:	18ba      	adds	r2, r7, r2
    addc:	6812      	ldr	r2, [r2, #0]
    adde:	0092      	lsls	r2, r2, #2
    ade0:	2100      	movs	r1, #0
    ade2:	50d1      	str	r1, [r2, r3]
		for (j=0;j<4;j++){
    ade4:	2300      	movs	r3, #0
    ade6:	22e0      	movs	r2, #224	; 0xe0
    ade8:	00d2      	lsls	r2, r2, #3
    adea:	18ba      	adds	r2, r7, r2
    adec:	6013      	str	r3, [r2, #0]
    adee:	e048      	b.n	ae82 <cal_axis_misalignments+0x552>
			Res[i] = Res[i]+DtD[i][j]*DtV[j];
    adf0:	4b46      	ldr	r3, [pc, #280]	; (af0c <cal_axis_misalignments+0x5dc>)
    adf2:	22e1      	movs	r2, #225	; 0xe1
    adf4:	00d2      	lsls	r2, r2, #3
    adf6:	4694      	mov	ip, r2
    adf8:	44bc      	add	ip, r7
    adfa:	4463      	add	r3, ip
    adfc:	4a3b      	ldr	r2, [pc, #236]	; (aeec <cal_axis_misalignments+0x5bc>)
    adfe:	18ba      	adds	r2, r7, r2
    ae00:	6812      	ldr	r2, [r2, #0]
    ae02:	0092      	lsls	r2, r2, #2
    ae04:	58d4      	ldr	r4, [r2, r3]
    ae06:	4b42      	ldr	r3, [pc, #264]	; (af10 <cal_axis_misalignments+0x5e0>)
    ae08:	22e1      	movs	r2, #225	; 0xe1
    ae0a:	00d2      	lsls	r2, r2, #3
    ae0c:	18ba      	adds	r2, r7, r2
    ae0e:	18d1      	adds	r1, r2, r3
    ae10:	4b36      	ldr	r3, [pc, #216]	; (aeec <cal_axis_misalignments+0x5bc>)
    ae12:	18fb      	adds	r3, r7, r3
    ae14:	681a      	ldr	r2, [r3, #0]
    ae16:	0013      	movs	r3, r2
    ae18:	005b      	lsls	r3, r3, #1
    ae1a:	189b      	adds	r3, r3, r2
    ae1c:	005b      	lsls	r3, r3, #1
    ae1e:	22e0      	movs	r2, #224	; 0xe0
    ae20:	00d2      	lsls	r2, r2, #3
    ae22:	18ba      	adds	r2, r7, r2
    ae24:	6812      	ldr	r2, [r2, #0]
    ae26:	189b      	adds	r3, r3, r2
    ae28:	009b      	lsls	r3, r3, #2
    ae2a:	5858      	ldr	r0, [r3, r1]
    ae2c:	4b2e      	ldr	r3, [pc, #184]	; (aee8 <cal_axis_misalignments+0x5b8>)
    ae2e:	22e1      	movs	r2, #225	; 0xe1
    ae30:	00d2      	lsls	r2, r2, #3
    ae32:	4694      	mov	ip, r2
    ae34:	44bc      	add	ip, r7
    ae36:	4463      	add	r3, ip
    ae38:	22e0      	movs	r2, #224	; 0xe0
    ae3a:	00d2      	lsls	r2, r2, #3
    ae3c:	18ba      	adds	r2, r7, r2
    ae3e:	6812      	ldr	r2, [r2, #0]
    ae40:	0092      	lsls	r2, r2, #2
    ae42:	58d2      	ldr	r2, [r2, r3]
    ae44:	4b2d      	ldr	r3, [pc, #180]	; (aefc <cal_axis_misalignments+0x5cc>)
    ae46:	1c11      	adds	r1, r2, #0
    ae48:	4798      	blx	r3
    ae4a:	1c03      	adds	r3, r0, #0
    ae4c:	1c1a      	adds	r2, r3, #0
    ae4e:	4b2c      	ldr	r3, [pc, #176]	; (af00 <cal_axis_misalignments+0x5d0>)
    ae50:	1c11      	adds	r1, r2, #0
    ae52:	1c20      	adds	r0, r4, #0
    ae54:	4798      	blx	r3
    ae56:	1c03      	adds	r3, r0, #0
    ae58:	1c19      	adds	r1, r3, #0
    ae5a:	4b2c      	ldr	r3, [pc, #176]	; (af0c <cal_axis_misalignments+0x5dc>)
    ae5c:	22e1      	movs	r2, #225	; 0xe1
    ae5e:	00d2      	lsls	r2, r2, #3
    ae60:	4694      	mov	ip, r2
    ae62:	44bc      	add	ip, r7
    ae64:	4463      	add	r3, ip
    ae66:	4a21      	ldr	r2, [pc, #132]	; (aeec <cal_axis_misalignments+0x5bc>)
    ae68:	18ba      	adds	r2, r7, r2
    ae6a:	6812      	ldr	r2, [r2, #0]
    ae6c:	0092      	lsls	r2, r2, #2
    ae6e:	50d1      	str	r1, [r2, r3]
		for (j=0;j<4;j++){
    ae70:	23e0      	movs	r3, #224	; 0xe0
    ae72:	00db      	lsls	r3, r3, #3
    ae74:	18fb      	adds	r3, r7, r3
    ae76:	681b      	ldr	r3, [r3, #0]
    ae78:	3301      	adds	r3, #1
    ae7a:	22e0      	movs	r2, #224	; 0xe0
    ae7c:	00d2      	lsls	r2, r2, #3
    ae7e:	18ba      	adds	r2, r7, r2
    ae80:	6013      	str	r3, [r2, #0]
    ae82:	23e0      	movs	r3, #224	; 0xe0
    ae84:	00db      	lsls	r3, r3, #3
    ae86:	18fb      	adds	r3, r7, r3
    ae88:	681b      	ldr	r3, [r3, #0]
    ae8a:	2b03      	cmp	r3, #3
    ae8c:	d9b0      	bls.n	adf0 <cal_axis_misalignments+0x4c0>
	for (i=0;i<4;i++){
    ae8e:	4b17      	ldr	r3, [pc, #92]	; (aeec <cal_axis_misalignments+0x5bc>)
    ae90:	18fb      	adds	r3, r7, r3
    ae92:	681b      	ldr	r3, [r3, #0]
    ae94:	3301      	adds	r3, #1
    ae96:	4a15      	ldr	r2, [pc, #84]	; (aeec <cal_axis_misalignments+0x5bc>)
    ae98:	18ba      	adds	r2, r7, r2
    ae9a:	6013      	str	r3, [r2, #0]
    ae9c:	4b13      	ldr	r3, [pc, #76]	; (aeec <cal_axis_misalignments+0x5bc>)
    ae9e:	18fb      	adds	r3, r7, r3
    aea0:	681b      	ldr	r3, [r3, #0]
    aea2:	2b03      	cmp	r3, #3
    aea4:	d992      	bls.n	adcc <cal_axis_misalignments+0x49c>
			
		}
	}
	
	
	cal_struct->axmYX = Res[1];
    aea6:	4b19      	ldr	r3, [pc, #100]	; (af0c <cal_axis_misalignments+0x5dc>)
    aea8:	22e1      	movs	r2, #225	; 0xe1
    aeaa:	00d2      	lsls	r2, r2, #3
    aeac:	4694      	mov	ip, r2
    aeae:	44bc      	add	ip, r7
    aeb0:	4463      	add	r3, ip
    aeb2:	685a      	ldr	r2, [r3, #4]
    aeb4:	683b      	ldr	r3, [r7, #0]
    aeb6:	61da      	str	r2, [r3, #28]
	cal_struct->axmZY = Res[2];
    aeb8:	4b14      	ldr	r3, [pc, #80]	; (af0c <cal_axis_misalignments+0x5dc>)
    aeba:	22e1      	movs	r2, #225	; 0xe1
    aebc:	00d2      	lsls	r2, r2, #3
    aebe:	4694      	mov	ip, r2
    aec0:	44bc      	add	ip, r7
    aec2:	4463      	add	r3, ip
    aec4:	689a      	ldr	r2, [r3, #8]
    aec6:	683b      	ldr	r3, [r7, #0]
    aec8:	621a      	str	r2, [r3, #32]
	cal_struct->axmZX = Res[3];
    aeca:	4b10      	ldr	r3, [pc, #64]	; (af0c <cal_axis_misalignments+0x5dc>)
    aecc:	22e1      	movs	r2, #225	; 0xe1
    aece:	00d2      	lsls	r2, r2, #3
    aed0:	4694      	mov	ip, r2
    aed2:	44bc      	add	ip, r7
    aed4:	4463      	add	r3, ip
    aed6:	68da      	ldr	r2, [r3, #12]
    aed8:	683b      	ldr	r3, [r7, #0]
    aeda:	625a      	str	r2, [r3, #36]	; 0x24
	//printf("\n\naxmYX:%f, axmZY: %f, axmZX: %f\n",
	//   cal_struct->axmYX, cal_struct->axmZY, cal_struct->axmZX);
	//print_matrix(DtD, 6, 6);
}
    aedc:	46c0      	nop			; (mov r8, r8)
    aede:	46bd      	mov	sp, r7
    aee0:	4b0c      	ldr	r3, [pc, #48]	; (af14 <cal_axis_misalignments+0x5e4>)
    aee2:	449d      	add	sp, r3
    aee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    aee6:	46c0      	nop			; (mov r8, r8)
    aee8:	fffff914 	.word	0xfffff914
    aeec:	00000704 	.word	0x00000704
    aef0:	fffffaf4 	.word	0xfffffaf4
    aef4:	000006fc 	.word	0x000006fc
    aef8:	fffff9b4 	.word	0xfffff9b4
    aefc:	0001eb65 	.word	0x0001eb65
    af00:	0001e461 	.word	0x0001e461
    af04:	200027f8 	.word	0x200027f8
    af08:	0000cfad 	.word	0x0000cfad
    af0c:	fffff904 	.word	0xfffff904
    af10:	fffff924 	.word	0xfffff924
    af14:	0000070c 	.word	0x0000070c

0000af18 <cal_angleX>:




void cal_angleX(float XYZ1[][3], float XYZ2[][3], struct INST_CAL *cal_struct){
    af18:	b5f0      	push	{r4, r5, r6, r7, lr}
    af1a:	4caa      	ldr	r4, [pc, #680]	; (b1c4 <cal_angleX+0x2ac>)
    af1c:	44a5      	add	sp, r4
    af1e:	af00      	add	r7, sp, #0
    af20:	60f8      	str	r0, [r7, #12]
    af22:	60b9      	str	r1, [r7, #8]
    af24:	607a      	str	r2, [r7, #4]
	float DtD, DtV, Res;
	uint32_t i;
	
	// D = Y2-Z2
	// V = Y2-Y1 + Z2-Z1;
	for (i=0;i<n_points;i++){
    af26:	2300      	movs	r3, #0
    af28:	22a5      	movs	r2, #165	; 0xa5
    af2a:	0092      	lsls	r2, r2, #2
    af2c:	18ba      	adds	r2, r7, r2
    af2e:	6013      	str	r3, [r2, #0]
    af30:	e07c      	b.n	b02c <cal_angleX+0x114>
		D[i] = XYZ2[i][1]-XYZ2[i][2];
    af32:	23a5      	movs	r3, #165	; 0xa5
    af34:	009b      	lsls	r3, r3, #2
    af36:	18fb      	adds	r3, r7, r3
    af38:	681a      	ldr	r2, [r3, #0]
    af3a:	0013      	movs	r3, r2
    af3c:	005b      	lsls	r3, r3, #1
    af3e:	189b      	adds	r3, r3, r2
    af40:	009b      	lsls	r3, r3, #2
    af42:	001a      	movs	r2, r3
    af44:	68bb      	ldr	r3, [r7, #8]
    af46:	189b      	adds	r3, r3, r2
    af48:	6858      	ldr	r0, [r3, #4]
    af4a:	23a5      	movs	r3, #165	; 0xa5
    af4c:	009b      	lsls	r3, r3, #2
    af4e:	18fb      	adds	r3, r7, r3
    af50:	681a      	ldr	r2, [r3, #0]
    af52:	0013      	movs	r3, r2
    af54:	005b      	lsls	r3, r3, #1
    af56:	189b      	adds	r3, r3, r2
    af58:	009b      	lsls	r3, r3, #2
    af5a:	001a      	movs	r2, r3
    af5c:	68bb      	ldr	r3, [r7, #8]
    af5e:	189b      	adds	r3, r3, r2
    af60:	689a      	ldr	r2, [r3, #8]
    af62:	4b99      	ldr	r3, [pc, #612]	; (b1c8 <cal_angleX+0x2b0>)
    af64:	1c11      	adds	r1, r2, #0
    af66:	4798      	blx	r3
    af68:	1c03      	adds	r3, r0, #0
    af6a:	1c19      	adds	r1, r3, #0
    af6c:	4b97      	ldr	r3, [pc, #604]	; (b1cc <cal_angleX+0x2b4>)
    af6e:	22a8      	movs	r2, #168	; 0xa8
    af70:	0092      	lsls	r2, r2, #2
    af72:	4694      	mov	ip, r2
    af74:	44bc      	add	ip, r7
    af76:	4463      	add	r3, ip
    af78:	22a5      	movs	r2, #165	; 0xa5
    af7a:	0092      	lsls	r2, r2, #2
    af7c:	18ba      	adds	r2, r7, r2
    af7e:	6812      	ldr	r2, [r2, #0]
    af80:	0092      	lsls	r2, r2, #2
    af82:	50d1      	str	r1, [r2, r3]
		V[i] = XYZ2[i][1]-XYZ1[i][1]+XYZ2[i][2]-XYZ1[i][2];
    af84:	23a5      	movs	r3, #165	; 0xa5
    af86:	009b      	lsls	r3, r3, #2
    af88:	18fb      	adds	r3, r7, r3
    af8a:	681a      	ldr	r2, [r3, #0]
    af8c:	0013      	movs	r3, r2
    af8e:	005b      	lsls	r3, r3, #1
    af90:	189b      	adds	r3, r3, r2
    af92:	009b      	lsls	r3, r3, #2
    af94:	001a      	movs	r2, r3
    af96:	68bb      	ldr	r3, [r7, #8]
    af98:	189b      	adds	r3, r3, r2
    af9a:	6858      	ldr	r0, [r3, #4]
    af9c:	23a5      	movs	r3, #165	; 0xa5
    af9e:	009b      	lsls	r3, r3, #2
    afa0:	18fb      	adds	r3, r7, r3
    afa2:	681a      	ldr	r2, [r3, #0]
    afa4:	0013      	movs	r3, r2
    afa6:	005b      	lsls	r3, r3, #1
    afa8:	189b      	adds	r3, r3, r2
    afaa:	009b      	lsls	r3, r3, #2
    afac:	001a      	movs	r2, r3
    afae:	68fb      	ldr	r3, [r7, #12]
    afb0:	189b      	adds	r3, r3, r2
    afb2:	685a      	ldr	r2, [r3, #4]
    afb4:	4b84      	ldr	r3, [pc, #528]	; (b1c8 <cal_angleX+0x2b0>)
    afb6:	1c11      	adds	r1, r2, #0
    afb8:	4798      	blx	r3
    afba:	1c03      	adds	r3, r0, #0
    afbc:	1c18      	adds	r0, r3, #0
    afbe:	23a5      	movs	r3, #165	; 0xa5
    afc0:	009b      	lsls	r3, r3, #2
    afc2:	18fb      	adds	r3, r7, r3
    afc4:	681a      	ldr	r2, [r3, #0]
    afc6:	0013      	movs	r3, r2
    afc8:	005b      	lsls	r3, r3, #1
    afca:	189b      	adds	r3, r3, r2
    afcc:	009b      	lsls	r3, r3, #2
    afce:	001a      	movs	r2, r3
    afd0:	68bb      	ldr	r3, [r7, #8]
    afd2:	189b      	adds	r3, r3, r2
    afd4:	689a      	ldr	r2, [r3, #8]
    afd6:	4b7e      	ldr	r3, [pc, #504]	; (b1d0 <cal_angleX+0x2b8>)
    afd8:	1c11      	adds	r1, r2, #0
    afda:	4798      	blx	r3
    afdc:	1c03      	adds	r3, r0, #0
    afde:	1c18      	adds	r0, r3, #0
    afe0:	23a5      	movs	r3, #165	; 0xa5
    afe2:	009b      	lsls	r3, r3, #2
    afe4:	18fb      	adds	r3, r7, r3
    afe6:	681a      	ldr	r2, [r3, #0]
    afe8:	0013      	movs	r3, r2
    afea:	005b      	lsls	r3, r3, #1
    afec:	189b      	adds	r3, r3, r2
    afee:	009b      	lsls	r3, r3, #2
    aff0:	001a      	movs	r2, r3
    aff2:	68fb      	ldr	r3, [r7, #12]
    aff4:	189b      	adds	r3, r3, r2
    aff6:	689a      	ldr	r2, [r3, #8]
    aff8:	4b73      	ldr	r3, [pc, #460]	; (b1c8 <cal_angleX+0x2b0>)
    affa:	1c11      	adds	r1, r2, #0
    affc:	4798      	blx	r3
    affe:	1c03      	adds	r3, r0, #0
    b000:	1c19      	adds	r1, r3, #0
    b002:	4b74      	ldr	r3, [pc, #464]	; (b1d4 <cal_angleX+0x2bc>)
    b004:	22a8      	movs	r2, #168	; 0xa8
    b006:	0092      	lsls	r2, r2, #2
    b008:	4694      	mov	ip, r2
    b00a:	44bc      	add	ip, r7
    b00c:	4463      	add	r3, ip
    b00e:	22a5      	movs	r2, #165	; 0xa5
    b010:	0092      	lsls	r2, r2, #2
    b012:	18ba      	adds	r2, r7, r2
    b014:	6812      	ldr	r2, [r2, #0]
    b016:	0092      	lsls	r2, r2, #2
    b018:	50d1      	str	r1, [r2, r3]
	for (i=0;i<n_points;i++){
    b01a:	23a5      	movs	r3, #165	; 0xa5
    b01c:	009b      	lsls	r3, r3, #2
    b01e:	18fb      	adds	r3, r7, r3
    b020:	681b      	ldr	r3, [r3, #0]
    b022:	3301      	adds	r3, #1
    b024:	22a5      	movs	r2, #165	; 0xa5
    b026:	0092      	lsls	r2, r2, #2
    b028:	18ba      	adds	r2, r7, r2
    b02a:	6013      	str	r3, [r2, #0]
    b02c:	4b6a      	ldr	r3, [pc, #424]	; (b1d8 <cal_angleX+0x2c0>)
    b02e:	681b      	ldr	r3, [r3, #0]
    b030:	22a5      	movs	r2, #165	; 0xa5
    b032:	0092      	lsls	r2, r2, #2
    b034:	18ba      	adds	r2, r7, r2
    b036:	6812      	ldr	r2, [r2, #0]
    b038:	429a      	cmp	r2, r3
    b03a:	d200      	bcs.n	b03e <cal_angleX+0x126>
    b03c:	e779      	b.n	af32 <cal_angleX+0x1a>
	}
	
	// DtD = D'*D;
	DtD = 0;
    b03e:	2300      	movs	r3, #0
    b040:	22a7      	movs	r2, #167	; 0xa7
    b042:	0092      	lsls	r2, r2, #2
    b044:	18ba      	adds	r2, r7, r2
    b046:	6013      	str	r3, [r2, #0]
	for (i=0;i<n_points;i++){
    b048:	2300      	movs	r3, #0
    b04a:	22a5      	movs	r2, #165	; 0xa5
    b04c:	0092      	lsls	r2, r2, #2
    b04e:	18ba      	adds	r2, r7, r2
    b050:	6013      	str	r3, [r2, #0]
    b052:	e039      	b.n	b0c8 <cal_angleX+0x1b0>
		DtD = DtD + pow(D[i],2);
    b054:	4b61      	ldr	r3, [pc, #388]	; (b1dc <cal_angleX+0x2c4>)
    b056:	22a7      	movs	r2, #167	; 0xa7
    b058:	0092      	lsls	r2, r2, #2
    b05a:	18ba      	adds	r2, r7, r2
    b05c:	6810      	ldr	r0, [r2, #0]
    b05e:	4798      	blx	r3
    b060:	0005      	movs	r5, r0
    b062:	000e      	movs	r6, r1
    b064:	4b59      	ldr	r3, [pc, #356]	; (b1cc <cal_angleX+0x2b4>)
    b066:	22a8      	movs	r2, #168	; 0xa8
    b068:	0092      	lsls	r2, r2, #2
    b06a:	4694      	mov	ip, r2
    b06c:	44bc      	add	ip, r7
    b06e:	4463      	add	r3, ip
    b070:	22a5      	movs	r2, #165	; 0xa5
    b072:	0092      	lsls	r2, r2, #2
    b074:	18ba      	adds	r2, r7, r2
    b076:	6812      	ldr	r2, [r2, #0]
    b078:	0092      	lsls	r2, r2, #2
    b07a:	58d2      	ldr	r2, [r2, r3]
    b07c:	4b57      	ldr	r3, [pc, #348]	; (b1dc <cal_angleX+0x2c4>)
    b07e:	1c10      	adds	r0, r2, #0
    b080:	4798      	blx	r3
    b082:	2300      	movs	r3, #0
    b084:	2480      	movs	r4, #128	; 0x80
    b086:	05e4      	lsls	r4, r4, #23
    b088:	001a      	movs	r2, r3
    b08a:	0023      	movs	r3, r4
    b08c:	4c54      	ldr	r4, [pc, #336]	; (b1e0 <cal_angleX+0x2c8>)
    b08e:	47a0      	blx	r4
    b090:	0002      	movs	r2, r0
    b092:	000b      	movs	r3, r1
    b094:	4c53      	ldr	r4, [pc, #332]	; (b1e4 <cal_angleX+0x2cc>)
    b096:	0028      	movs	r0, r5
    b098:	0031      	movs	r1, r6
    b09a:	47a0      	blx	r4
    b09c:	0003      	movs	r3, r0
    b09e:	000c      	movs	r4, r1
    b0a0:	0019      	movs	r1, r3
    b0a2:	0022      	movs	r2, r4
    b0a4:	4b50      	ldr	r3, [pc, #320]	; (b1e8 <cal_angleX+0x2d0>)
    b0a6:	0008      	movs	r0, r1
    b0a8:	0011      	movs	r1, r2
    b0aa:	4798      	blx	r3
    b0ac:	1c03      	adds	r3, r0, #0
    b0ae:	22a7      	movs	r2, #167	; 0xa7
    b0b0:	0092      	lsls	r2, r2, #2
    b0b2:	18ba      	adds	r2, r7, r2
    b0b4:	6013      	str	r3, [r2, #0]
	for (i=0;i<n_points;i++){
    b0b6:	23a5      	movs	r3, #165	; 0xa5
    b0b8:	009b      	lsls	r3, r3, #2
    b0ba:	18fb      	adds	r3, r7, r3
    b0bc:	681b      	ldr	r3, [r3, #0]
    b0be:	3301      	adds	r3, #1
    b0c0:	22a5      	movs	r2, #165	; 0xa5
    b0c2:	0092      	lsls	r2, r2, #2
    b0c4:	18ba      	adds	r2, r7, r2
    b0c6:	6013      	str	r3, [r2, #0]
    b0c8:	4b43      	ldr	r3, [pc, #268]	; (b1d8 <cal_angleX+0x2c0>)
    b0ca:	681b      	ldr	r3, [r3, #0]
    b0cc:	22a5      	movs	r2, #165	; 0xa5
    b0ce:	0092      	lsls	r2, r2, #2
    b0d0:	18ba      	adds	r2, r7, r2
    b0d2:	6812      	ldr	r2, [r2, #0]
    b0d4:	429a      	cmp	r2, r3
    b0d6:	d3bd      	bcc.n	b054 <cal_angleX+0x13c>
	}
	// DtV = D'*V;
	DtV = 0;
    b0d8:	2300      	movs	r3, #0
    b0da:	22a6      	movs	r2, #166	; 0xa6
    b0dc:	0092      	lsls	r2, r2, #2
    b0de:	18ba      	adds	r2, r7, r2
    b0e0:	6013      	str	r3, [r2, #0]
	for (i=0;i<n_points;i++){
    b0e2:	2300      	movs	r3, #0
    b0e4:	22a5      	movs	r2, #165	; 0xa5
    b0e6:	0092      	lsls	r2, r2, #2
    b0e8:	18ba      	adds	r2, r7, r2
    b0ea:	6013      	str	r3, [r2, #0]
    b0ec:	e031      	b.n	b152 <cal_angleX+0x23a>
		DtV = DtV + D[i]*V[i];
    b0ee:	4b37      	ldr	r3, [pc, #220]	; (b1cc <cal_angleX+0x2b4>)
    b0f0:	22a8      	movs	r2, #168	; 0xa8
    b0f2:	0092      	lsls	r2, r2, #2
    b0f4:	4694      	mov	ip, r2
    b0f6:	44bc      	add	ip, r7
    b0f8:	4463      	add	r3, ip
    b0fa:	22a5      	movs	r2, #165	; 0xa5
    b0fc:	0092      	lsls	r2, r2, #2
    b0fe:	18ba      	adds	r2, r7, r2
    b100:	6812      	ldr	r2, [r2, #0]
    b102:	0092      	lsls	r2, r2, #2
    b104:	58d0      	ldr	r0, [r2, r3]
    b106:	4b33      	ldr	r3, [pc, #204]	; (b1d4 <cal_angleX+0x2bc>)
    b108:	22a8      	movs	r2, #168	; 0xa8
    b10a:	0092      	lsls	r2, r2, #2
    b10c:	4694      	mov	ip, r2
    b10e:	44bc      	add	ip, r7
    b110:	4463      	add	r3, ip
    b112:	22a5      	movs	r2, #165	; 0xa5
    b114:	0092      	lsls	r2, r2, #2
    b116:	18ba      	adds	r2, r7, r2
    b118:	6812      	ldr	r2, [r2, #0]
    b11a:	0092      	lsls	r2, r2, #2
    b11c:	58d2      	ldr	r2, [r2, r3]
    b11e:	4b33      	ldr	r3, [pc, #204]	; (b1ec <cal_angleX+0x2d4>)
    b120:	1c11      	adds	r1, r2, #0
    b122:	4798      	blx	r3
    b124:	1c03      	adds	r3, r0, #0
    b126:	1c1a      	adds	r2, r3, #0
    b128:	4b29      	ldr	r3, [pc, #164]	; (b1d0 <cal_angleX+0x2b8>)
    b12a:	1c11      	adds	r1, r2, #0
    b12c:	22a6      	movs	r2, #166	; 0xa6
    b12e:	0092      	lsls	r2, r2, #2
    b130:	18ba      	adds	r2, r7, r2
    b132:	6810      	ldr	r0, [r2, #0]
    b134:	4798      	blx	r3
    b136:	1c03      	adds	r3, r0, #0
    b138:	22a6      	movs	r2, #166	; 0xa6
    b13a:	0092      	lsls	r2, r2, #2
    b13c:	18ba      	adds	r2, r7, r2
    b13e:	6013      	str	r3, [r2, #0]
	for (i=0;i<n_points;i++){
    b140:	23a5      	movs	r3, #165	; 0xa5
    b142:	009b      	lsls	r3, r3, #2
    b144:	18fb      	adds	r3, r7, r3
    b146:	681b      	ldr	r3, [r3, #0]
    b148:	3301      	adds	r3, #1
    b14a:	22a5      	movs	r2, #165	; 0xa5
    b14c:	0092      	lsls	r2, r2, #2
    b14e:	18ba      	adds	r2, r7, r2
    b150:	6013      	str	r3, [r2, #0]
    b152:	4b21      	ldr	r3, [pc, #132]	; (b1d8 <cal_angleX+0x2c0>)
    b154:	681b      	ldr	r3, [r3, #0]
    b156:	22a5      	movs	r2, #165	; 0xa5
    b158:	0092      	lsls	r2, r2, #2
    b15a:	18ba      	adds	r2, r7, r2
    b15c:	6812      	ldr	r2, [r2, #0]
    b15e:	429a      	cmp	r2, r3
    b160:	d3c5      	bcc.n	b0ee <cal_angleX+0x1d6>
	}
	
	// Res = (1/DtD)*DtV;
	Res = (1/DtD)*DtV;
    b162:	4b23      	ldr	r3, [pc, #140]	; (b1f0 <cal_angleX+0x2d8>)
    b164:	22a7      	movs	r2, #167	; 0xa7
    b166:	0092      	lsls	r2, r2, #2
    b168:	18ba      	adds	r2, r7, r2
    b16a:	6811      	ldr	r1, [r2, #0]
    b16c:	20fe      	movs	r0, #254	; 0xfe
    b16e:	0580      	lsls	r0, r0, #22
    b170:	4798      	blx	r3
    b172:	1c03      	adds	r3, r0, #0
    b174:	1c1a      	adds	r2, r3, #0
    b176:	4b1d      	ldr	r3, [pc, #116]	; (b1ec <cal_angleX+0x2d4>)
    b178:	21a6      	movs	r1, #166	; 0xa6
    b17a:	0089      	lsls	r1, r1, #2
    b17c:	1879      	adds	r1, r7, r1
    b17e:	6809      	ldr	r1, [r1, #0]
    b180:	1c10      	adds	r0, r2, #0
    b182:	4798      	blx	r3
    b184:	1c03      	adds	r3, r0, #0
    b186:	22a4      	movs	r2, #164	; 0xa4
    b188:	0092      	lsls	r2, r2, #2
    b18a:	18ba      	adds	r2, r7, r2
    b18c:	6013      	str	r3, [r2, #0]
	
	cal_struct->thetaX = -1*rad2deg*Res;
    b18e:	4b19      	ldr	r3, [pc, #100]	; (b1f4 <cal_angleX+0x2dc>)
    b190:	681b      	ldr	r3, [r3, #0]
    b192:	2280      	movs	r2, #128	; 0x80
    b194:	0612      	lsls	r2, r2, #24
    b196:	405a      	eors	r2, r3
    b198:	4b14      	ldr	r3, [pc, #80]	; (b1ec <cal_angleX+0x2d4>)
    b19a:	21a4      	movs	r1, #164	; 0xa4
    b19c:	0089      	lsls	r1, r1, #2
    b19e:	1879      	adds	r1, r7, r1
    b1a0:	6809      	ldr	r1, [r1, #0]
    b1a2:	1c10      	adds	r0, r2, #0
    b1a4:	4798      	blx	r3
    b1a6:	1c03      	adds	r3, r0, #0
    b1a8:	1c1a      	adds	r2, r3, #0
    b1aa:	687b      	ldr	r3, [r7, #4]
    b1ac:	629a      	str	r2, [r3, #40]	; 0x28

	// Create rotation matrix
	gen_RotM(cal_struct);
    b1ae:	687b      	ldr	r3, [r7, #4]
    b1b0:	0018      	movs	r0, r3
    b1b2:	4b11      	ldr	r3, [pc, #68]	; (b1f8 <cal_angleX+0x2e0>)
    b1b4:	4798      	blx	r3
	
}
    b1b6:	46c0      	nop			; (mov r8, r8)
    b1b8:	46bd      	mov	sp, r7
    b1ba:	23a9      	movs	r3, #169	; 0xa9
    b1bc:	009b      	lsls	r3, r3, #2
    b1be:	449d      	add	sp, r3
    b1c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b1c2:	46c0      	nop			; (mov r8, r8)
    b1c4:	fffffd5c 	.word	0xfffffd5c
    b1c8:	0001eda5 	.word	0x0001eda5
    b1cc:	fffffeb0 	.word	0xfffffeb0
    b1d0:	0001e461 	.word	0x0001e461
    b1d4:	fffffd70 	.word	0xfffffd70
    b1d8:	200027f8 	.word	0x200027f8
    b1dc:	00020d99 	.word	0x00020d99
    b1e0:	0001b749 	.word	0x0001b749
    b1e4:	0001f249 	.word	0x0001f249
    b1e8:	00020e3d 	.word	0x00020e3d
    b1ec:	0001eb65 	.word	0x0001eb65
    b1f0:	0001e785 	.word	0x0001e785
    b1f4:	00025fb4 	.word	0x00025fb4
    b1f8:	0000c211 	.word	0x0000c211

0000b1fc <cal_angleYZ>:




void cal_angleYZ(float XYZ[][3], struct INST_CAL *cal_struct){
    b1fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    b1fe:	46ce      	mov	lr, r9
    b200:	4647      	mov	r7, r8
    b202:	b580      	push	{r7, lr}
    b204:	4ce8      	ldr	r4, [pc, #928]	; (b5a8 <cal_angleYZ+0x3ac>)
    b206:	44a5      	add	sp, r4
    b208:	af00      	add	r7, sp, #0
    b20a:	6178      	str	r0, [r7, #20]
    b20c:	6139      	str	r1, [r7, #16]
	float detX;
	float X[nbuf][2];
	float tempX1[2][2], tempX2[2][2], tempX3[2], B[2];
	
	//  Initialize A and B for group average
	B1_init = cal_struct->thetaY;
    b20e:	693b      	ldr	r3, [r7, #16]
    b210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    b212:	4ae6      	ldr	r2, [pc, #920]	; (b5ac <cal_angleYZ+0x3b0>)
    b214:	2110      	movs	r1, #16
    b216:	468c      	mov	ip, r1
    b218:	44bc      	add	ip, r7
    b21a:	4462      	add	r2, ip
    b21c:	6013      	str	r3, [r2, #0]
	B2_init = -1*cal_struct->thetaZ;
    b21e:	693b      	ldr	r3, [r7, #16]
    b220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    b222:	2280      	movs	r2, #128	; 0x80
    b224:	0612      	lsls	r2, r2, #24
    b226:	4053      	eors	r3, r2
    b228:	22a9      	movs	r2, #169	; 0xa9
    b22a:	00d2      	lsls	r2, r2, #3
    b22c:	2110      	movs	r1, #16
    b22e:	468c      	mov	ip, r1
    b230:	44bc      	add	ip, r7
    b232:	4462      	add	r2, ip
    b234:	6013      	str	r3, [r2, #0]
	
	// Create shifted x_ang array
	for (k=0;k< n_groups;k++){
    b236:	4bde      	ldr	r3, [pc, #888]	; (b5b0 <cal_angleYZ+0x3b4>)
    b238:	2210      	movs	r2, #16
    b23a:	4694      	mov	ip, r2
    b23c:	44bc      	add	ip, r7
    b23e:	4463      	add	r3, ip
    b240:	2200      	movs	r2, #0
    b242:	701a      	strb	r2, [r3, #0]
    b244:	e19c      	b.n	b580 <cal_angleYZ+0x384>
		group_avg = 0;
    b246:	2300      	movs	r3, #0
    b248:	22aa      	movs	r2, #170	; 0xaa
    b24a:	00d2      	lsls	r2, r2, #3
    b24c:	2110      	movs	r1, #16
    b24e:	468c      	mov	ip, r1
    b250:	44bc      	add	ip, r7
    b252:	4462      	add	r2, ip
    b254:	6013      	str	r3, [r2, #0]
		for (j=0;j<group_size;j++){
    b256:	4bd7      	ldr	r3, [pc, #860]	; (b5b4 <cal_angleYZ+0x3b8>)
    b258:	2210      	movs	r2, #16
    b25a:	4694      	mov	ip, r2
    b25c:	44bc      	add	ip, r7
    b25e:	4463      	add	r3, ip
    b260:	2200      	movs	r2, #0
    b262:	701a      	strb	r2, [r3, #0]
    b264:	e103      	b.n	b46e <cal_angleYZ+0x272>
			ind = k*group_size + j;
    b266:	4bd2      	ldr	r3, [pc, #840]	; (b5b0 <cal_angleYZ+0x3b4>)
    b268:	2210      	movs	r2, #16
    b26a:	4694      	mov	ip, r2
    b26c:	44bc      	add	ip, r7
    b26e:	4463      	add	r3, ip
    b270:	781b      	ldrb	r3, [r3, #0]
    b272:	009b      	lsls	r3, r3, #2
    b274:	b2d9      	uxtb	r1, r3
    b276:	4bd0      	ldr	r3, [pc, #832]	; (b5b8 <cal_angleYZ+0x3bc>)
    b278:	2210      	movs	r2, #16
    b27a:	4694      	mov	ip, r2
    b27c:	44bc      	add	ip, r7
    b27e:	4463      	add	r3, ip
    b280:	4acc      	ldr	r2, [pc, #816]	; (b5b4 <cal_angleYZ+0x3b8>)
    b282:	2010      	movs	r0, #16
    b284:	4684      	mov	ip, r0
    b286:	44bc      	add	ip, r7
    b288:	4462      	add	r2, ip
    b28a:	7812      	ldrb	r2, [r2, #0]
    b28c:	188a      	adds	r2, r1, r2
    b28e:	701a      	strb	r2, [r3, #0]
			calc_theta_XY(&XYZ[ind][0], &roll_ang[ind], &x_ang_shift[ind]);
    b290:	4bc9      	ldr	r3, [pc, #804]	; (b5b8 <cal_angleYZ+0x3bc>)
    b292:	2210      	movs	r2, #16
    b294:	4694      	mov	ip, r2
    b296:	44bc      	add	ip, r7
    b298:	4463      	add	r3, ip
    b29a:	781a      	ldrb	r2, [r3, #0]
    b29c:	0013      	movs	r3, r2
    b29e:	005b      	lsls	r3, r3, #1
    b2a0:	189b      	adds	r3, r3, r2
    b2a2:	009b      	lsls	r3, r3, #2
    b2a4:	001a      	movs	r2, r3
    b2a6:	697b      	ldr	r3, [r7, #20]
    b2a8:	189b      	adds	r3, r3, r2
    b2aa:	0018      	movs	r0, r3
    b2ac:	4bc2      	ldr	r3, [pc, #776]	; (b5b8 <cal_angleYZ+0x3bc>)
    b2ae:	2210      	movs	r2, #16
    b2b0:	4694      	mov	ip, r2
    b2b2:	44bc      	add	ip, r7
    b2b4:	4463      	add	r3, ip
    b2b6:	781b      	ldrb	r3, [r3, #0]
    b2b8:	22ff      	movs	r2, #255	; 0xff
    b2ba:	0092      	lsls	r2, r2, #2
    b2bc:	2110      	movs	r1, #16
    b2be:	468c      	mov	ip, r1
    b2c0:	44bc      	add	ip, r7
    b2c2:	4462      	add	r2, ip
    b2c4:	009b      	lsls	r3, r3, #2
    b2c6:	18d1      	adds	r1, r2, r3
    b2c8:	4bbb      	ldr	r3, [pc, #748]	; (b5b8 <cal_angleYZ+0x3bc>)
    b2ca:	2210      	movs	r2, #16
    b2cc:	4694      	mov	ip, r2
    b2ce:	44bc      	add	ip, r7
    b2d0:	4463      	add	r3, ip
    b2d2:	781b      	ldrb	r3, [r3, #0]
    b2d4:	22af      	movs	r2, #175	; 0xaf
    b2d6:	0092      	lsls	r2, r2, #2
    b2d8:	2410      	movs	r4, #16
    b2da:	46a4      	mov	ip, r4
    b2dc:	44bc      	add	ip, r7
    b2de:	4462      	add	r2, ip
    b2e0:	009b      	lsls	r3, r3, #2
    b2e2:	18d3      	adds	r3, r2, r3
    b2e4:	001a      	movs	r2, r3
    b2e6:	4bb5      	ldr	r3, [pc, #724]	; (b5bc <cal_angleYZ+0x3c0>)
    b2e8:	4798      	blx	r3
			x_ang_comp  = x_ang_shift[ind]
    b2ea:	4bb3      	ldr	r3, [pc, #716]	; (b5b8 <cal_angleYZ+0x3bc>)
    b2ec:	2210      	movs	r2, #16
    b2ee:	4694      	mov	ip, r2
    b2f0:	44bc      	add	ip, r7
    b2f2:	4463      	add	r3, ip
    b2f4:	781a      	ldrb	r2, [r3, #0]
    b2f6:	4bb2      	ldr	r3, [pc, #712]	; (b5c0 <cal_angleYZ+0x3c4>)
    b2f8:	21ab      	movs	r1, #171	; 0xab
    b2fa:	00c9      	lsls	r1, r1, #3
    b2fc:	468c      	mov	ip, r1
    b2fe:	2110      	movs	r1, #16
    b300:	4688      	mov	r8, r1
    b302:	44b8      	add	r8, r7
    b304:	44c4      	add	ip, r8
    b306:	4463      	add	r3, ip
    b308:	0092      	lsls	r2, r2, #2
    b30a:	58d2      	ldr	r2, [r2, r3]
    b30c:	4bad      	ldr	r3, [pc, #692]	; (b5c4 <cal_angleYZ+0x3c8>)
    b30e:	1c10      	adds	r0, r2, #0
    b310:	4798      	blx	r3
    b312:	0005      	movs	r5, r0
    b314:	000e      	movs	r6, r1
			- B1_init*cos(deg2rad*roll_ang[ind])
    b316:	4bab      	ldr	r3, [pc, #684]	; (b5c4 <cal_angleYZ+0x3c8>)
    b318:	4aa4      	ldr	r2, [pc, #656]	; (b5ac <cal_angleYZ+0x3b0>)
    b31a:	2110      	movs	r1, #16
    b31c:	468c      	mov	ip, r1
    b31e:	44bc      	add	ip, r7
    b320:	4462      	add	r2, ip
    b322:	6810      	ldr	r0, [r2, #0]
    b324:	4798      	blx	r3
    b326:	60b8      	str	r0, [r7, #8]
    b328:	60f9      	str	r1, [r7, #12]
    b32a:	4ba3      	ldr	r3, [pc, #652]	; (b5b8 <cal_angleYZ+0x3bc>)
    b32c:	2210      	movs	r2, #16
    b32e:	4694      	mov	ip, r2
    b330:	44bc      	add	ip, r7
    b332:	4463      	add	r3, ip
    b334:	781a      	ldrb	r2, [r3, #0]
    b336:	4ba4      	ldr	r3, [pc, #656]	; (b5c8 <cal_angleYZ+0x3cc>)
    b338:	21ab      	movs	r1, #171	; 0xab
    b33a:	00c9      	lsls	r1, r1, #3
    b33c:	468c      	mov	ip, r1
    b33e:	2110      	movs	r1, #16
    b340:	4688      	mov	r8, r1
    b342:	44b8      	add	r8, r7
    b344:	44c4      	add	ip, r8
    b346:	4463      	add	r3, ip
    b348:	0092      	lsls	r2, r2, #2
    b34a:	58d2      	ldr	r2, [r2, r3]
    b34c:	4b9f      	ldr	r3, [pc, #636]	; (b5cc <cal_angleYZ+0x3d0>)
    b34e:	6819      	ldr	r1, [r3, #0]
    b350:	4b9f      	ldr	r3, [pc, #636]	; (b5d0 <cal_angleYZ+0x3d4>)
    b352:	1c10      	adds	r0, r2, #0
    b354:	4798      	blx	r3
    b356:	1c03      	adds	r3, r0, #0
    b358:	1c1a      	adds	r2, r3, #0
    b35a:	4b9a      	ldr	r3, [pc, #616]	; (b5c4 <cal_angleYZ+0x3c8>)
    b35c:	1c10      	adds	r0, r2, #0
    b35e:	4798      	blx	r3
    b360:	0003      	movs	r3, r0
    b362:	000c      	movs	r4, r1
    b364:	0018      	movs	r0, r3
    b366:	0021      	movs	r1, r4
    b368:	4b9a      	ldr	r3, [pc, #616]	; (b5d4 <cal_angleYZ+0x3d8>)
    b36a:	4798      	blx	r3
    b36c:	0002      	movs	r2, r0
    b36e:	000b      	movs	r3, r1
    b370:	4c99      	ldr	r4, [pc, #612]	; (b5d8 <cal_angleYZ+0x3dc>)
    b372:	68b8      	ldr	r0, [r7, #8]
    b374:	68f9      	ldr	r1, [r7, #12]
    b376:	47a0      	blx	r4
    b378:	0003      	movs	r3, r0
    b37a:	000c      	movs	r4, r1
    b37c:	001a      	movs	r2, r3
    b37e:	0023      	movs	r3, r4
    b380:	4c96      	ldr	r4, [pc, #600]	; (b5dc <cal_angleYZ+0x3e0>)
    b382:	0028      	movs	r0, r5
    b384:	0031      	movs	r1, r6
    b386:	47a0      	blx	r4
    b388:	0003      	movs	r3, r0
    b38a:	000c      	movs	r4, r1
    b38c:	001d      	movs	r5, r3
    b38e:	0026      	movs	r6, r4
			- B2_init*sin(deg2rad*roll_ang[ind]);
    b390:	4b8c      	ldr	r3, [pc, #560]	; (b5c4 <cal_angleYZ+0x3c8>)
    b392:	22a9      	movs	r2, #169	; 0xa9
    b394:	00d2      	lsls	r2, r2, #3
    b396:	2110      	movs	r1, #16
    b398:	468c      	mov	ip, r1
    b39a:	44bc      	add	ip, r7
    b39c:	4462      	add	r2, ip
    b39e:	6810      	ldr	r0, [r2, #0]
    b3a0:	4798      	blx	r3
    b3a2:	60b8      	str	r0, [r7, #8]
    b3a4:	60f9      	str	r1, [r7, #12]
    b3a6:	4b84      	ldr	r3, [pc, #528]	; (b5b8 <cal_angleYZ+0x3bc>)
    b3a8:	2210      	movs	r2, #16
    b3aa:	4694      	mov	ip, r2
    b3ac:	44bc      	add	ip, r7
    b3ae:	4463      	add	r3, ip
    b3b0:	781a      	ldrb	r2, [r3, #0]
    b3b2:	4b85      	ldr	r3, [pc, #532]	; (b5c8 <cal_angleYZ+0x3cc>)
    b3b4:	21ab      	movs	r1, #171	; 0xab
    b3b6:	00c9      	lsls	r1, r1, #3
    b3b8:	468c      	mov	ip, r1
    b3ba:	2110      	movs	r1, #16
    b3bc:	4688      	mov	r8, r1
    b3be:	44b8      	add	r8, r7
    b3c0:	44c4      	add	ip, r8
    b3c2:	4463      	add	r3, ip
    b3c4:	0092      	lsls	r2, r2, #2
    b3c6:	58d2      	ldr	r2, [r2, r3]
    b3c8:	4b80      	ldr	r3, [pc, #512]	; (b5cc <cal_angleYZ+0x3d0>)
    b3ca:	6819      	ldr	r1, [r3, #0]
    b3cc:	4b80      	ldr	r3, [pc, #512]	; (b5d0 <cal_angleYZ+0x3d4>)
    b3ce:	1c10      	adds	r0, r2, #0
    b3d0:	4798      	blx	r3
    b3d2:	1c03      	adds	r3, r0, #0
    b3d4:	1c1a      	adds	r2, r3, #0
    b3d6:	4b7b      	ldr	r3, [pc, #492]	; (b5c4 <cal_angleYZ+0x3c8>)
    b3d8:	1c10      	adds	r0, r2, #0
    b3da:	4798      	blx	r3
    b3dc:	0003      	movs	r3, r0
    b3de:	000c      	movs	r4, r1
    b3e0:	0018      	movs	r0, r3
    b3e2:	0021      	movs	r1, r4
    b3e4:	4b7e      	ldr	r3, [pc, #504]	; (b5e0 <cal_angleYZ+0x3e4>)
    b3e6:	4798      	blx	r3
    b3e8:	0002      	movs	r2, r0
    b3ea:	000b      	movs	r3, r1
    b3ec:	4c7a      	ldr	r4, [pc, #488]	; (b5d8 <cal_angleYZ+0x3dc>)
    b3ee:	68b8      	ldr	r0, [r7, #8]
    b3f0:	68f9      	ldr	r1, [r7, #12]
    b3f2:	47a0      	blx	r4
    b3f4:	0003      	movs	r3, r0
    b3f6:	000c      	movs	r4, r1
    b3f8:	001a      	movs	r2, r3
    b3fa:	0023      	movs	r3, r4
    b3fc:	4c77      	ldr	r4, [pc, #476]	; (b5dc <cal_angleYZ+0x3e0>)
    b3fe:	0028      	movs	r0, r5
    b400:	0031      	movs	r1, r6
    b402:	47a0      	blx	r4
    b404:	0003      	movs	r3, r0
    b406:	000c      	movs	r4, r1
    b408:	0019      	movs	r1, r3
    b40a:	0022      	movs	r2, r4
			x_ang_comp  = x_ang_shift[ind]
    b40c:	4b75      	ldr	r3, [pc, #468]	; (b5e4 <cal_angleYZ+0x3e8>)
    b40e:	0008      	movs	r0, r1
    b410:	0011      	movs	r1, r2
    b412:	4798      	blx	r3
    b414:	1c03      	adds	r3, r0, #0
    b416:	22a8      	movs	r2, #168	; 0xa8
    b418:	00d2      	lsls	r2, r2, #3
    b41a:	2110      	movs	r1, #16
    b41c:	468c      	mov	ip, r1
    b41e:	44bc      	add	ip, r7
    b420:	4462      	add	r2, ip
    b422:	6013      	str	r3, [r2, #0]
			group_avg = group_avg+x_ang_comp;
    b424:	4b70      	ldr	r3, [pc, #448]	; (b5e8 <cal_angleYZ+0x3ec>)
    b426:	22a8      	movs	r2, #168	; 0xa8
    b428:	00d2      	lsls	r2, r2, #3
    b42a:	2110      	movs	r1, #16
    b42c:	468c      	mov	ip, r1
    b42e:	44bc      	add	ip, r7
    b430:	4462      	add	r2, ip
    b432:	6811      	ldr	r1, [r2, #0]
    b434:	22aa      	movs	r2, #170	; 0xaa
    b436:	00d2      	lsls	r2, r2, #3
    b438:	2010      	movs	r0, #16
    b43a:	4684      	mov	ip, r0
    b43c:	44bc      	add	ip, r7
    b43e:	4462      	add	r2, ip
    b440:	6810      	ldr	r0, [r2, #0]
    b442:	4798      	blx	r3
    b444:	1c03      	adds	r3, r0, #0
    b446:	22aa      	movs	r2, #170	; 0xaa
    b448:	00d2      	lsls	r2, r2, #3
    b44a:	2110      	movs	r1, #16
    b44c:	468c      	mov	ip, r1
    b44e:	44bc      	add	ip, r7
    b450:	4462      	add	r2, ip
    b452:	6013      	str	r3, [r2, #0]
		for (j=0;j<group_size;j++){
    b454:	4b57      	ldr	r3, [pc, #348]	; (b5b4 <cal_angleYZ+0x3b8>)
    b456:	2210      	movs	r2, #16
    b458:	4694      	mov	ip, r2
    b45a:	44bc      	add	ip, r7
    b45c:	4463      	add	r3, ip
    b45e:	781a      	ldrb	r2, [r3, #0]
    b460:	4b54      	ldr	r3, [pc, #336]	; (b5b4 <cal_angleYZ+0x3b8>)
    b462:	2110      	movs	r1, #16
    b464:	468c      	mov	ip, r1
    b466:	44bc      	add	ip, r7
    b468:	4463      	add	r3, ip
    b46a:	3201      	adds	r2, #1
    b46c:	701a      	strb	r2, [r3, #0]
    b46e:	4b51      	ldr	r3, [pc, #324]	; (b5b4 <cal_angleYZ+0x3b8>)
    b470:	2210      	movs	r2, #16
    b472:	4694      	mov	ip, r2
    b474:	44bc      	add	ip, r7
    b476:	4463      	add	r3, ip
    b478:	781b      	ldrb	r3, [r3, #0]
    b47a:	2b03      	cmp	r3, #3
    b47c:	d800      	bhi.n	b480 <cal_angleYZ+0x284>
    b47e:	e6f2      	b.n	b266 <cal_angleYZ+0x6a>
		}
		group_avg = group_avg/group_size;
    b480:	4b5a      	ldr	r3, [pc, #360]	; (b5ec <cal_angleYZ+0x3f0>)
    b482:	2181      	movs	r1, #129	; 0x81
    b484:	05c9      	lsls	r1, r1, #23
    b486:	22aa      	movs	r2, #170	; 0xaa
    b488:	00d2      	lsls	r2, r2, #3
    b48a:	2010      	movs	r0, #16
    b48c:	4684      	mov	ip, r0
    b48e:	44bc      	add	ip, r7
    b490:	4462      	add	r2, ip
    b492:	6810      	ldr	r0, [r2, #0]
    b494:	4798      	blx	r3
    b496:	1c03      	adds	r3, r0, #0
    b498:	22aa      	movs	r2, #170	; 0xaa
    b49a:	00d2      	lsls	r2, r2, #3
    b49c:	2110      	movs	r1, #16
    b49e:	468c      	mov	ip, r1
    b4a0:	44bc      	add	ip, r7
    b4a2:	4462      	add	r2, ip
    b4a4:	6013      	str	r3, [r2, #0]
		for (j=0;j<group_size;j++){
    b4a6:	4b43      	ldr	r3, [pc, #268]	; (b5b4 <cal_angleYZ+0x3b8>)
    b4a8:	2210      	movs	r2, #16
    b4aa:	4694      	mov	ip, r2
    b4ac:	44bc      	add	ip, r7
    b4ae:	4463      	add	r3, ip
    b4b0:	2200      	movs	r2, #0
    b4b2:	701a      	strb	r2, [r3, #0]
    b4b4:	e04f      	b.n	b556 <cal_angleYZ+0x35a>
			ind = k*group_size + j;
    b4b6:	4b3e      	ldr	r3, [pc, #248]	; (b5b0 <cal_angleYZ+0x3b4>)
    b4b8:	2210      	movs	r2, #16
    b4ba:	4694      	mov	ip, r2
    b4bc:	44bc      	add	ip, r7
    b4be:	4463      	add	r3, ip
    b4c0:	781b      	ldrb	r3, [r3, #0]
    b4c2:	009b      	lsls	r3, r3, #2
    b4c4:	b2d9      	uxtb	r1, r3
    b4c6:	4b3c      	ldr	r3, [pc, #240]	; (b5b8 <cal_angleYZ+0x3bc>)
    b4c8:	2210      	movs	r2, #16
    b4ca:	4694      	mov	ip, r2
    b4cc:	44bc      	add	ip, r7
    b4ce:	4463      	add	r3, ip
    b4d0:	4a38      	ldr	r2, [pc, #224]	; (b5b4 <cal_angleYZ+0x3b8>)
    b4d2:	2010      	movs	r0, #16
    b4d4:	4684      	mov	ip, r0
    b4d6:	44bc      	add	ip, r7
    b4d8:	4462      	add	r2, ip
    b4da:	7812      	ldrb	r2, [r2, #0]
    b4dc:	188a      	adds	r2, r1, r2
    b4de:	701a      	strb	r2, [r3, #0]
			x_ang_shift[ind] = x_ang_shift[ind]-group_avg;
    b4e0:	4b35      	ldr	r3, [pc, #212]	; (b5b8 <cal_angleYZ+0x3bc>)
    b4e2:	2210      	movs	r2, #16
    b4e4:	4694      	mov	ip, r2
    b4e6:	44bc      	add	ip, r7
    b4e8:	4463      	add	r3, ip
    b4ea:	781c      	ldrb	r4, [r3, #0]
    b4ec:	4b32      	ldr	r3, [pc, #200]	; (b5b8 <cal_angleYZ+0x3bc>)
    b4ee:	2210      	movs	r2, #16
    b4f0:	4694      	mov	ip, r2
    b4f2:	44bc      	add	ip, r7
    b4f4:	4463      	add	r3, ip
    b4f6:	781a      	ldrb	r2, [r3, #0]
    b4f8:	4b31      	ldr	r3, [pc, #196]	; (b5c0 <cal_angleYZ+0x3c4>)
    b4fa:	21ab      	movs	r1, #171	; 0xab
    b4fc:	00c9      	lsls	r1, r1, #3
    b4fe:	468c      	mov	ip, r1
    b500:	2110      	movs	r1, #16
    b502:	4688      	mov	r8, r1
    b504:	44b8      	add	r8, r7
    b506:	44c4      	add	ip, r8
    b508:	4463      	add	r3, ip
    b50a:	0092      	lsls	r2, r2, #2
    b50c:	58d2      	ldr	r2, [r2, r3]
    b50e:	4b38      	ldr	r3, [pc, #224]	; (b5f0 <cal_angleYZ+0x3f4>)
    b510:	21aa      	movs	r1, #170	; 0xaa
    b512:	00c9      	lsls	r1, r1, #3
    b514:	2010      	movs	r0, #16
    b516:	4684      	mov	ip, r0
    b518:	44bc      	add	ip, r7
    b51a:	4461      	add	r1, ip
    b51c:	6809      	ldr	r1, [r1, #0]
    b51e:	1c10      	adds	r0, r2, #0
    b520:	4798      	blx	r3
    b522:	1c03      	adds	r3, r0, #0
    b524:	1c19      	adds	r1, r3, #0
    b526:	4b26      	ldr	r3, [pc, #152]	; (b5c0 <cal_angleYZ+0x3c4>)
    b528:	22ab      	movs	r2, #171	; 0xab
    b52a:	00d2      	lsls	r2, r2, #3
    b52c:	4694      	mov	ip, r2
    b52e:	2210      	movs	r2, #16
    b530:	4690      	mov	r8, r2
    b532:	44b8      	add	r8, r7
    b534:	44c4      	add	ip, r8
    b536:	4463      	add	r3, ip
    b538:	00a2      	lsls	r2, r4, #2
    b53a:	50d1      	str	r1, [r2, r3]
		for (j=0;j<group_size;j++){
    b53c:	4b1d      	ldr	r3, [pc, #116]	; (b5b4 <cal_angleYZ+0x3b8>)
    b53e:	2210      	movs	r2, #16
    b540:	4694      	mov	ip, r2
    b542:	44bc      	add	ip, r7
    b544:	4463      	add	r3, ip
    b546:	781a      	ldrb	r2, [r3, #0]
    b548:	4b1a      	ldr	r3, [pc, #104]	; (b5b4 <cal_angleYZ+0x3b8>)
    b54a:	2110      	movs	r1, #16
    b54c:	468c      	mov	ip, r1
    b54e:	44bc      	add	ip, r7
    b550:	4463      	add	r3, ip
    b552:	3201      	adds	r2, #1
    b554:	701a      	strb	r2, [r3, #0]
    b556:	4b17      	ldr	r3, [pc, #92]	; (b5b4 <cal_angleYZ+0x3b8>)
    b558:	2210      	movs	r2, #16
    b55a:	4694      	mov	ip, r2
    b55c:	44bc      	add	ip, r7
    b55e:	4463      	add	r3, ip
    b560:	781b      	ldrb	r3, [r3, #0]
    b562:	2b03      	cmp	r3, #3
    b564:	d9a7      	bls.n	b4b6 <cal_angleYZ+0x2ba>
	for (k=0;k< n_groups;k++){
    b566:	4b12      	ldr	r3, [pc, #72]	; (b5b0 <cal_angleYZ+0x3b4>)
    b568:	2210      	movs	r2, #16
    b56a:	4694      	mov	ip, r2
    b56c:	44bc      	add	ip, r7
    b56e:	4463      	add	r3, ip
    b570:	781a      	ldrb	r2, [r3, #0]
    b572:	4b0f      	ldr	r3, [pc, #60]	; (b5b0 <cal_angleYZ+0x3b4>)
    b574:	2110      	movs	r1, #16
    b576:	468c      	mov	ip, r1
    b578:	44bc      	add	ip, r7
    b57a:	4463      	add	r3, ip
    b57c:	3201      	adds	r2, #1
    b57e:	701a      	strb	r2, [r3, #0]
    b580:	4b0b      	ldr	r3, [pc, #44]	; (b5b0 <cal_angleYZ+0x3b4>)
    b582:	2210      	movs	r2, #16
    b584:	4694      	mov	ip, r2
    b586:	44bc      	add	ip, r7
    b588:	4463      	add	r3, ip
    b58a:	781a      	ldrb	r2, [r3, #0]
    b58c:	4b19      	ldr	r3, [pc, #100]	; (b5f4 <cal_angleYZ+0x3f8>)
    b58e:	681b      	ldr	r3, [r3, #0]
    b590:	429a      	cmp	r2, r3
    b592:	d200      	bcs.n	b596 <cal_angleYZ+0x39a>
    b594:	e657      	b.n	b246 <cal_angleYZ+0x4a>
		
	}

	
	//  X = [cosd(roll_fit), sind(roll_fit)]
	for (np=0;np<n_points;np++){
    b596:	4b18      	ldr	r3, [pc, #96]	; (b5f8 <cal_angleYZ+0x3fc>)
    b598:	2210      	movs	r2, #16
    b59a:	4694      	mov	ip, r2
    b59c:	44bc      	add	ip, r7
    b59e:	4463      	add	r3, ip
    b5a0:	2200      	movs	r2, #0
    b5a2:	701a      	strb	r2, [r3, #0]
    b5a4:	e0aa      	b.n	b6fc <cal_angleYZ+0x500>
    b5a6:	46c0      	nop			; (mov r8, r8)
    b5a8:	fffffa94 	.word	0xfffffa94
    b5ac:	0000054c 	.word	0x0000054c
    b5b0:	00000555 	.word	0x00000555
    b5b4:	00000556 	.word	0x00000556
    b5b8:	00000547 	.word	0x00000547
    b5bc:	0000a425 	.word	0x0000a425
    b5c0:	fffffd64 	.word	0xfffffd64
    b5c4:	00020d99 	.word	0x00020d99
    b5c8:	fffffea4 	.word	0xfffffea4
    b5cc:	00025fb8 	.word	0x00025fb8
    b5d0:	0001eb65 	.word	0x0001eb65
    b5d4:	0001b4f5 	.word	0x0001b4f5
    b5d8:	000200d1 	.word	0x000200d1
    b5dc:	000205d1 	.word	0x000205d1
    b5e0:	0001b6b1 	.word	0x0001b6b1
    b5e4:	00020e3d 	.word	0x00020e3d
    b5e8:	0001e461 	.word	0x0001e461
    b5ec:	0001e785 	.word	0x0001e785
    b5f0:	0001eda5 	.word	0x0001eda5
    b5f4:	200018e4 	.word	0x200018e4
    b5f8:	00000554 	.word	0x00000554
		X[np][0] = cos(deg2rad*roll_ang[np]);
    b5fc:	4b5e      	ldr	r3, [pc, #376]	; (b778 <cal_angleYZ+0x57c>)
    b5fe:	2210      	movs	r2, #16
    b600:	4694      	mov	ip, r2
    b602:	44bc      	add	ip, r7
    b604:	4463      	add	r3, ip
    b606:	781c      	ldrb	r4, [r3, #0]
    b608:	4b5b      	ldr	r3, [pc, #364]	; (b778 <cal_angleYZ+0x57c>)
    b60a:	2210      	movs	r2, #16
    b60c:	4694      	mov	ip, r2
    b60e:	44bc      	add	ip, r7
    b610:	4463      	add	r3, ip
    b612:	781a      	ldrb	r2, [r3, #0]
    b614:	4b59      	ldr	r3, [pc, #356]	; (b77c <cal_angleYZ+0x580>)
    b616:	21ab      	movs	r1, #171	; 0xab
    b618:	00c9      	lsls	r1, r1, #3
    b61a:	468c      	mov	ip, r1
    b61c:	2110      	movs	r1, #16
    b61e:	4688      	mov	r8, r1
    b620:	44b8      	add	r8, r7
    b622:	44c4      	add	ip, r8
    b624:	4463      	add	r3, ip
    b626:	0092      	lsls	r2, r2, #2
    b628:	58d2      	ldr	r2, [r2, r3]
    b62a:	4b55      	ldr	r3, [pc, #340]	; (b780 <cal_angleYZ+0x584>)
    b62c:	6819      	ldr	r1, [r3, #0]
    b62e:	4b55      	ldr	r3, [pc, #340]	; (b784 <cal_angleYZ+0x588>)
    b630:	1c10      	adds	r0, r2, #0
    b632:	4798      	blx	r3
    b634:	1c03      	adds	r3, r0, #0
    b636:	1c1a      	adds	r2, r3, #0
    b638:	4b53      	ldr	r3, [pc, #332]	; (b788 <cal_angleYZ+0x58c>)
    b63a:	1c10      	adds	r0, r2, #0
    b63c:	4798      	blx	r3
    b63e:	0002      	movs	r2, r0
    b640:	000b      	movs	r3, r1
    b642:	0010      	movs	r0, r2
    b644:	0019      	movs	r1, r3
    b646:	4b51      	ldr	r3, [pc, #324]	; (b78c <cal_angleYZ+0x590>)
    b648:	4798      	blx	r3
    b64a:	000a      	movs	r2, r1
    b64c:	0001      	movs	r1, r0
    b64e:	4b50      	ldr	r3, [pc, #320]	; (b790 <cal_angleYZ+0x594>)
    b650:	0008      	movs	r0, r1
    b652:	0011      	movs	r1, r2
    b654:	4798      	blx	r3
    b656:	1c01      	adds	r1, r0, #0
    b658:	4b4e      	ldr	r3, [pc, #312]	; (b794 <cal_angleYZ+0x598>)
    b65a:	22ab      	movs	r2, #171	; 0xab
    b65c:	00d2      	lsls	r2, r2, #3
    b65e:	4694      	mov	ip, r2
    b660:	2210      	movs	r2, #16
    b662:	4690      	mov	r8, r2
    b664:	44b8      	add	r8, r7
    b666:	44c4      	add	ip, r8
    b668:	4463      	add	r3, ip
    b66a:	00e2      	lsls	r2, r4, #3
    b66c:	50d1      	str	r1, [r2, r3]
		X[np][1] = sin(deg2rad*roll_ang[np]);
    b66e:	4b42      	ldr	r3, [pc, #264]	; (b778 <cal_angleYZ+0x57c>)
    b670:	2210      	movs	r2, #16
    b672:	4694      	mov	ip, r2
    b674:	44bc      	add	ip, r7
    b676:	4463      	add	r3, ip
    b678:	781c      	ldrb	r4, [r3, #0]
    b67a:	4b3f      	ldr	r3, [pc, #252]	; (b778 <cal_angleYZ+0x57c>)
    b67c:	2210      	movs	r2, #16
    b67e:	4694      	mov	ip, r2
    b680:	44bc      	add	ip, r7
    b682:	4463      	add	r3, ip
    b684:	781a      	ldrb	r2, [r3, #0]
    b686:	4b3d      	ldr	r3, [pc, #244]	; (b77c <cal_angleYZ+0x580>)
    b688:	21ab      	movs	r1, #171	; 0xab
    b68a:	00c9      	lsls	r1, r1, #3
    b68c:	468c      	mov	ip, r1
    b68e:	2110      	movs	r1, #16
    b690:	4688      	mov	r8, r1
    b692:	44b8      	add	r8, r7
    b694:	44c4      	add	ip, r8
    b696:	4463      	add	r3, ip
    b698:	0092      	lsls	r2, r2, #2
    b69a:	58d2      	ldr	r2, [r2, r3]
    b69c:	4b38      	ldr	r3, [pc, #224]	; (b780 <cal_angleYZ+0x584>)
    b69e:	6819      	ldr	r1, [r3, #0]
    b6a0:	4b38      	ldr	r3, [pc, #224]	; (b784 <cal_angleYZ+0x588>)
    b6a2:	1c10      	adds	r0, r2, #0
    b6a4:	4798      	blx	r3
    b6a6:	1c03      	adds	r3, r0, #0
    b6a8:	1c1a      	adds	r2, r3, #0
    b6aa:	4b37      	ldr	r3, [pc, #220]	; (b788 <cal_angleYZ+0x58c>)
    b6ac:	1c10      	adds	r0, r2, #0
    b6ae:	4798      	blx	r3
    b6b0:	0002      	movs	r2, r0
    b6b2:	000b      	movs	r3, r1
    b6b4:	0010      	movs	r0, r2
    b6b6:	0019      	movs	r1, r3
    b6b8:	4b37      	ldr	r3, [pc, #220]	; (b798 <cal_angleYZ+0x59c>)
    b6ba:	4798      	blx	r3
    b6bc:	000a      	movs	r2, r1
    b6be:	0001      	movs	r1, r0
    b6c0:	4b33      	ldr	r3, [pc, #204]	; (b790 <cal_angleYZ+0x594>)
    b6c2:	0008      	movs	r0, r1
    b6c4:	0011      	movs	r1, r2
    b6c6:	4798      	blx	r3
    b6c8:	1c01      	adds	r1, r0, #0
    b6ca:	4b32      	ldr	r3, [pc, #200]	; (b794 <cal_angleYZ+0x598>)
    b6cc:	22ab      	movs	r2, #171	; 0xab
    b6ce:	00d2      	lsls	r2, r2, #3
    b6d0:	2010      	movs	r0, #16
    b6d2:	4684      	mov	ip, r0
    b6d4:	44bc      	add	ip, r7
    b6d6:	4462      	add	r2, ip
    b6d8:	18d2      	adds	r2, r2, r3
    b6da:	00e3      	lsls	r3, r4, #3
    b6dc:	18d3      	adds	r3, r2, r3
    b6de:	3304      	adds	r3, #4
    b6e0:	6019      	str	r1, [r3, #0]
	for (np=0;np<n_points;np++){
    b6e2:	4b25      	ldr	r3, [pc, #148]	; (b778 <cal_angleYZ+0x57c>)
    b6e4:	2210      	movs	r2, #16
    b6e6:	4694      	mov	ip, r2
    b6e8:	44bc      	add	ip, r7
    b6ea:	4463      	add	r3, ip
    b6ec:	781a      	ldrb	r2, [r3, #0]
    b6ee:	4b22      	ldr	r3, [pc, #136]	; (b778 <cal_angleYZ+0x57c>)
    b6f0:	2110      	movs	r1, #16
    b6f2:	468c      	mov	ip, r1
    b6f4:	44bc      	add	ip, r7
    b6f6:	4463      	add	r3, ip
    b6f8:	3201      	adds	r2, #1
    b6fa:	701a      	strb	r2, [r3, #0]
    b6fc:	4b1e      	ldr	r3, [pc, #120]	; (b778 <cal_angleYZ+0x57c>)
    b6fe:	2210      	movs	r2, #16
    b700:	4694      	mov	ip, r2
    b702:	44bc      	add	ip, r7
    b704:	4463      	add	r3, ip
    b706:	781a      	ldrb	r2, [r3, #0]
    b708:	4b24      	ldr	r3, [pc, #144]	; (b79c <cal_angleYZ+0x5a0>)
    b70a:	681b      	ldr	r3, [r3, #0]
    b70c:	429a      	cmp	r2, r3
    b70e:	d200      	bcs.n	b712 <cal_angleYZ+0x516>
    b710:	e774      	b.n	b5fc <cal_angleYZ+0x400>
	}
	
	// tempX1 = X'*X;
	for (i=0;i<2;i++){
    b712:	4b23      	ldr	r3, [pc, #140]	; (b7a0 <cal_angleYZ+0x5a4>)
    b714:	2210      	movs	r2, #16
    b716:	4694      	mov	ip, r2
    b718:	44bc      	add	ip, r7
    b71a:	4463      	add	r3, ip
    b71c:	2200      	movs	r2, #0
    b71e:	701a      	strb	r2, [r3, #0]
    b720:	e0f0      	b.n	b904 <cal_angleYZ+0x708>
		for (j=0;j<2;j++){
    b722:	4b20      	ldr	r3, [pc, #128]	; (b7a4 <cal_angleYZ+0x5a8>)
    b724:	2210      	movs	r2, #16
    b726:	4694      	mov	ip, r2
    b728:	44bc      	add	ip, r7
    b72a:	4463      	add	r3, ip
    b72c:	2200      	movs	r2, #0
    b72e:	701a      	strb	r2, [r3, #0]
    b730:	e0d2      	b.n	b8d8 <cal_angleYZ+0x6dc>
			tempX1[i][j]=0;
    b732:	4b1b      	ldr	r3, [pc, #108]	; (b7a0 <cal_angleYZ+0x5a4>)
    b734:	2210      	movs	r2, #16
    b736:	4694      	mov	ip, r2
    b738:	44bc      	add	ip, r7
    b73a:	4463      	add	r3, ip
    b73c:	7819      	ldrb	r1, [r3, #0]
    b73e:	4b19      	ldr	r3, [pc, #100]	; (b7a4 <cal_angleYZ+0x5a8>)
    b740:	2210      	movs	r2, #16
    b742:	4694      	mov	ip, r2
    b744:	44bc      	add	ip, r7
    b746:	4463      	add	r3, ip
    b748:	781a      	ldrb	r2, [r3, #0]
    b74a:	4b17      	ldr	r3, [pc, #92]	; (b7a8 <cal_angleYZ+0x5ac>)
    b74c:	20ab      	movs	r0, #171	; 0xab
    b74e:	00c0      	lsls	r0, r0, #3
    b750:	4684      	mov	ip, r0
    b752:	2010      	movs	r0, #16
    b754:	4680      	mov	r8, r0
    b756:	44b8      	add	r8, r7
    b758:	44c4      	add	ip, r8
    b75a:	4463      	add	r3, ip
    b75c:	0049      	lsls	r1, r1, #1
    b75e:	188a      	adds	r2, r1, r2
    b760:	0092      	lsls	r2, r2, #2
    b762:	2100      	movs	r1, #0
    b764:	50d1      	str	r1, [r2, r3]
			for (np=0;np<n_points;np++){
    b766:	4b04      	ldr	r3, [pc, #16]	; (b778 <cal_angleYZ+0x57c>)
    b768:	2210      	movs	r2, #16
    b76a:	4694      	mov	ip, r2
    b76c:	44bc      	add	ip, r7
    b76e:	4463      	add	r3, ip
    b770:	2200      	movs	r2, #0
    b772:	701a      	strb	r2, [r3, #0]
    b774:	e098      	b.n	b8a8 <cal_angleYZ+0x6ac>
    b776:	46c0      	nop			; (mov r8, r8)
    b778:	00000554 	.word	0x00000554
    b77c:	fffffea4 	.word	0xfffffea4
    b780:	00025fb8 	.word	0x00025fb8
    b784:	0001eb65 	.word	0x0001eb65
    b788:	00020d99 	.word	0x00020d99
    b78c:	0001b4f5 	.word	0x0001b4f5
    b790:	00020e3d 	.word	0x00020e3d
    b794:	fffffae4 	.word	0xfffffae4
    b798:	0001b6b1 	.word	0x0001b6b1
    b79c:	200027f8 	.word	0x200027f8
    b7a0:	00000557 	.word	0x00000557
    b7a4:	00000556 	.word	0x00000556
    b7a8:	fffffad4 	.word	0xfffffad4
				tempX1[i][j] = tempX1[i][j]+X[np][j]*X[np][i];
    b7ac:	4bca      	ldr	r3, [pc, #808]	; (bad8 <cal_angleYZ+0x8dc>)
    b7ae:	2210      	movs	r2, #16
    b7b0:	4694      	mov	ip, r2
    b7b2:	44bc      	add	ip, r7
    b7b4:	4463      	add	r3, ip
    b7b6:	781d      	ldrb	r5, [r3, #0]
    b7b8:	4bc8      	ldr	r3, [pc, #800]	; (badc <cal_angleYZ+0x8e0>)
    b7ba:	2210      	movs	r2, #16
    b7bc:	4694      	mov	ip, r2
    b7be:	44bc      	add	ip, r7
    b7c0:	4463      	add	r3, ip
    b7c2:	781c      	ldrb	r4, [r3, #0]
    b7c4:	4bc4      	ldr	r3, [pc, #784]	; (bad8 <cal_angleYZ+0x8dc>)
    b7c6:	2210      	movs	r2, #16
    b7c8:	4694      	mov	ip, r2
    b7ca:	44bc      	add	ip, r7
    b7cc:	4463      	add	r3, ip
    b7ce:	7819      	ldrb	r1, [r3, #0]
    b7d0:	4bc2      	ldr	r3, [pc, #776]	; (badc <cal_angleYZ+0x8e0>)
    b7d2:	2210      	movs	r2, #16
    b7d4:	4694      	mov	ip, r2
    b7d6:	44bc      	add	ip, r7
    b7d8:	4463      	add	r3, ip
    b7da:	781a      	ldrb	r2, [r3, #0]
    b7dc:	4bc0      	ldr	r3, [pc, #768]	; (bae0 <cal_angleYZ+0x8e4>)
    b7de:	20ab      	movs	r0, #171	; 0xab
    b7e0:	00c0      	lsls	r0, r0, #3
    b7e2:	4684      	mov	ip, r0
    b7e4:	2010      	movs	r0, #16
    b7e6:	4680      	mov	r8, r0
    b7e8:	44b8      	add	r8, r7
    b7ea:	44c4      	add	ip, r8
    b7ec:	4463      	add	r3, ip
    b7ee:	0049      	lsls	r1, r1, #1
    b7f0:	188a      	adds	r2, r1, r2
    b7f2:	0092      	lsls	r2, r2, #2
    b7f4:	58d6      	ldr	r6, [r2, r3]
    b7f6:	4bbb      	ldr	r3, [pc, #748]	; (bae4 <cal_angleYZ+0x8e8>)
    b7f8:	2210      	movs	r2, #16
    b7fa:	4694      	mov	ip, r2
    b7fc:	44bc      	add	ip, r7
    b7fe:	4463      	add	r3, ip
    b800:	7819      	ldrb	r1, [r3, #0]
    b802:	4bb6      	ldr	r3, [pc, #728]	; (badc <cal_angleYZ+0x8e0>)
    b804:	2210      	movs	r2, #16
    b806:	4694      	mov	ip, r2
    b808:	44bc      	add	ip, r7
    b80a:	4463      	add	r3, ip
    b80c:	781a      	ldrb	r2, [r3, #0]
    b80e:	4bb6      	ldr	r3, [pc, #728]	; (bae8 <cal_angleYZ+0x8ec>)
    b810:	20ab      	movs	r0, #171	; 0xab
    b812:	00c0      	lsls	r0, r0, #3
    b814:	4684      	mov	ip, r0
    b816:	2010      	movs	r0, #16
    b818:	4680      	mov	r8, r0
    b81a:	44b8      	add	r8, r7
    b81c:	44c4      	add	ip, r8
    b81e:	4463      	add	r3, ip
    b820:	0049      	lsls	r1, r1, #1
    b822:	188a      	adds	r2, r1, r2
    b824:	0092      	lsls	r2, r2, #2
    b826:	58d0      	ldr	r0, [r2, r3]
    b828:	4bae      	ldr	r3, [pc, #696]	; (bae4 <cal_angleYZ+0x8e8>)
    b82a:	2210      	movs	r2, #16
    b82c:	4694      	mov	ip, r2
    b82e:	44bc      	add	ip, r7
    b830:	4463      	add	r3, ip
    b832:	7819      	ldrb	r1, [r3, #0]
    b834:	4ba8      	ldr	r3, [pc, #672]	; (bad8 <cal_angleYZ+0x8dc>)
    b836:	2210      	movs	r2, #16
    b838:	4694      	mov	ip, r2
    b83a:	44bc      	add	ip, r7
    b83c:	4463      	add	r3, ip
    b83e:	781a      	ldrb	r2, [r3, #0]
    b840:	4ba9      	ldr	r3, [pc, #676]	; (bae8 <cal_angleYZ+0x8ec>)
    b842:	4698      	mov	r8, r3
    b844:	23ab      	movs	r3, #171	; 0xab
    b846:	00db      	lsls	r3, r3, #3
    b848:	469c      	mov	ip, r3
    b84a:	2310      	movs	r3, #16
    b84c:	4699      	mov	r9, r3
    b84e:	44b9      	add	r9, r7
    b850:	44cc      	add	ip, r9
    b852:	4643      	mov	r3, r8
    b854:	4463      	add	r3, ip
    b856:	0049      	lsls	r1, r1, #1
    b858:	188a      	adds	r2, r1, r2
    b85a:	0092      	lsls	r2, r2, #2
    b85c:	58d2      	ldr	r2, [r2, r3]
    b85e:	4ba3      	ldr	r3, [pc, #652]	; (baec <cal_angleYZ+0x8f0>)
    b860:	1c11      	adds	r1, r2, #0
    b862:	4798      	blx	r3
    b864:	1c03      	adds	r3, r0, #0
    b866:	1c1a      	adds	r2, r3, #0
    b868:	4ba1      	ldr	r3, [pc, #644]	; (baf0 <cal_angleYZ+0x8f4>)
    b86a:	1c11      	adds	r1, r2, #0
    b86c:	1c30      	adds	r0, r6, #0
    b86e:	4798      	blx	r3
    b870:	1c03      	adds	r3, r0, #0
    b872:	1c19      	adds	r1, r3, #0
    b874:	4b9a      	ldr	r3, [pc, #616]	; (bae0 <cal_angleYZ+0x8e4>)
    b876:	22ab      	movs	r2, #171	; 0xab
    b878:	00d2      	lsls	r2, r2, #3
    b87a:	4694      	mov	ip, r2
    b87c:	2210      	movs	r2, #16
    b87e:	4690      	mov	r8, r2
    b880:	44b8      	add	r8, r7
    b882:	44c4      	add	ip, r8
    b884:	4463      	add	r3, ip
    b886:	006a      	lsls	r2, r5, #1
    b888:	1912      	adds	r2, r2, r4
    b88a:	0092      	lsls	r2, r2, #2
    b88c:	50d1      	str	r1, [r2, r3]
			for (np=0;np<n_points;np++){
    b88e:	4b95      	ldr	r3, [pc, #596]	; (bae4 <cal_angleYZ+0x8e8>)
    b890:	2210      	movs	r2, #16
    b892:	4694      	mov	ip, r2
    b894:	44bc      	add	ip, r7
    b896:	4463      	add	r3, ip
    b898:	781a      	ldrb	r2, [r3, #0]
    b89a:	4b92      	ldr	r3, [pc, #584]	; (bae4 <cal_angleYZ+0x8e8>)
    b89c:	2110      	movs	r1, #16
    b89e:	468c      	mov	ip, r1
    b8a0:	44bc      	add	ip, r7
    b8a2:	4463      	add	r3, ip
    b8a4:	3201      	adds	r2, #1
    b8a6:	701a      	strb	r2, [r3, #0]
    b8a8:	4b8e      	ldr	r3, [pc, #568]	; (bae4 <cal_angleYZ+0x8e8>)
    b8aa:	2210      	movs	r2, #16
    b8ac:	4694      	mov	ip, r2
    b8ae:	44bc      	add	ip, r7
    b8b0:	4463      	add	r3, ip
    b8b2:	781a      	ldrb	r2, [r3, #0]
    b8b4:	4b8f      	ldr	r3, [pc, #572]	; (baf4 <cal_angleYZ+0x8f8>)
    b8b6:	681b      	ldr	r3, [r3, #0]
    b8b8:	429a      	cmp	r2, r3
    b8ba:	d200      	bcs.n	b8be <cal_angleYZ+0x6c2>
    b8bc:	e776      	b.n	b7ac <cal_angleYZ+0x5b0>
		for (j=0;j<2;j++){
    b8be:	4b87      	ldr	r3, [pc, #540]	; (badc <cal_angleYZ+0x8e0>)
    b8c0:	2210      	movs	r2, #16
    b8c2:	4694      	mov	ip, r2
    b8c4:	44bc      	add	ip, r7
    b8c6:	4463      	add	r3, ip
    b8c8:	781a      	ldrb	r2, [r3, #0]
    b8ca:	4b84      	ldr	r3, [pc, #528]	; (badc <cal_angleYZ+0x8e0>)
    b8cc:	2110      	movs	r1, #16
    b8ce:	468c      	mov	ip, r1
    b8d0:	44bc      	add	ip, r7
    b8d2:	4463      	add	r3, ip
    b8d4:	3201      	adds	r2, #1
    b8d6:	701a      	strb	r2, [r3, #0]
    b8d8:	4b80      	ldr	r3, [pc, #512]	; (badc <cal_angleYZ+0x8e0>)
    b8da:	2210      	movs	r2, #16
    b8dc:	4694      	mov	ip, r2
    b8de:	44bc      	add	ip, r7
    b8e0:	4463      	add	r3, ip
    b8e2:	781b      	ldrb	r3, [r3, #0]
    b8e4:	2b01      	cmp	r3, #1
    b8e6:	d800      	bhi.n	b8ea <cal_angleYZ+0x6ee>
    b8e8:	e723      	b.n	b732 <cal_angleYZ+0x536>
	for (i=0;i<2;i++){
    b8ea:	4b7b      	ldr	r3, [pc, #492]	; (bad8 <cal_angleYZ+0x8dc>)
    b8ec:	2210      	movs	r2, #16
    b8ee:	4694      	mov	ip, r2
    b8f0:	44bc      	add	ip, r7
    b8f2:	4463      	add	r3, ip
    b8f4:	781a      	ldrb	r2, [r3, #0]
    b8f6:	4b78      	ldr	r3, [pc, #480]	; (bad8 <cal_angleYZ+0x8dc>)
    b8f8:	2110      	movs	r1, #16
    b8fa:	468c      	mov	ip, r1
    b8fc:	44bc      	add	ip, r7
    b8fe:	4463      	add	r3, ip
    b900:	3201      	adds	r2, #1
    b902:	701a      	strb	r2, [r3, #0]
    b904:	4b74      	ldr	r3, [pc, #464]	; (bad8 <cal_angleYZ+0x8dc>)
    b906:	2210      	movs	r2, #16
    b908:	4694      	mov	ip, r2
    b90a:	44bc      	add	ip, r7
    b90c:	4463      	add	r3, ip
    b90e:	781b      	ldrb	r3, [r3, #0]
    b910:	2b01      	cmp	r3, #1
    b912:	d800      	bhi.n	b916 <cal_angleYZ+0x71a>
    b914:	e705      	b.n	b722 <cal_angleYZ+0x526>
			}
		}
	}

	//  tempX2 = inverse(tempX1) = inv(X'*X);
	detX = tempX1[0][0]*tempX1[1][1]-(tempX1[0][1]*tempX1[1][0]);
    b916:	4b72      	ldr	r3, [pc, #456]	; (bae0 <cal_angleYZ+0x8e4>)
    b918:	22ab      	movs	r2, #171	; 0xab
    b91a:	00d2      	lsls	r2, r2, #3
    b91c:	4694      	mov	ip, r2
    b91e:	2210      	movs	r2, #16
    b920:	4690      	mov	r8, r2
    b922:	44b8      	add	r8, r7
    b924:	44c4      	add	ip, r8
    b926:	4463      	add	r3, ip
    b928:	681a      	ldr	r2, [r3, #0]
    b92a:	4b6d      	ldr	r3, [pc, #436]	; (bae0 <cal_angleYZ+0x8e4>)
    b92c:	21ab      	movs	r1, #171	; 0xab
    b92e:	00c9      	lsls	r1, r1, #3
    b930:	468c      	mov	ip, r1
    b932:	2110      	movs	r1, #16
    b934:	4688      	mov	r8, r1
    b936:	44b8      	add	r8, r7
    b938:	44c4      	add	ip, r8
    b93a:	4463      	add	r3, ip
    b93c:	68d9      	ldr	r1, [r3, #12]
    b93e:	4b6b      	ldr	r3, [pc, #428]	; (baec <cal_angleYZ+0x8f0>)
    b940:	1c10      	adds	r0, r2, #0
    b942:	4798      	blx	r3
    b944:	1c03      	adds	r3, r0, #0
    b946:	1c1c      	adds	r4, r3, #0
    b948:	4b65      	ldr	r3, [pc, #404]	; (bae0 <cal_angleYZ+0x8e4>)
    b94a:	22ab      	movs	r2, #171	; 0xab
    b94c:	00d2      	lsls	r2, r2, #3
    b94e:	4694      	mov	ip, r2
    b950:	2210      	movs	r2, #16
    b952:	4690      	mov	r8, r2
    b954:	44b8      	add	r8, r7
    b956:	44c4      	add	ip, r8
    b958:	4463      	add	r3, ip
    b95a:	685a      	ldr	r2, [r3, #4]
    b95c:	4b60      	ldr	r3, [pc, #384]	; (bae0 <cal_angleYZ+0x8e4>)
    b95e:	21ab      	movs	r1, #171	; 0xab
    b960:	00c9      	lsls	r1, r1, #3
    b962:	468c      	mov	ip, r1
    b964:	2110      	movs	r1, #16
    b966:	4688      	mov	r8, r1
    b968:	44b8      	add	r8, r7
    b96a:	44c4      	add	ip, r8
    b96c:	4463      	add	r3, ip
    b96e:	6899      	ldr	r1, [r3, #8]
    b970:	4b5e      	ldr	r3, [pc, #376]	; (baec <cal_angleYZ+0x8f0>)
    b972:	1c10      	adds	r0, r2, #0
    b974:	4798      	blx	r3
    b976:	1c03      	adds	r3, r0, #0
    b978:	1c1a      	adds	r2, r3, #0
    b97a:	4b5f      	ldr	r3, [pc, #380]	; (baf8 <cal_angleYZ+0x8fc>)
    b97c:	1c11      	adds	r1, r2, #0
    b97e:	1c20      	adds	r0, r4, #0
    b980:	4798      	blx	r3
    b982:	1c03      	adds	r3, r0, #0
    b984:	4a5d      	ldr	r2, [pc, #372]	; (bafc <cal_angleYZ+0x900>)
    b986:	2110      	movs	r1, #16
    b988:	468c      	mov	ip, r1
    b98a:	44bc      	add	ip, r7
    b98c:	4462      	add	r2, ip
    b98e:	6013      	str	r3, [r2, #0]
	tempX2[0][0] = tempX1[1][1]/detX;
    b990:	4b53      	ldr	r3, [pc, #332]	; (bae0 <cal_angleYZ+0x8e4>)
    b992:	22ab      	movs	r2, #171	; 0xab
    b994:	00d2      	lsls	r2, r2, #3
    b996:	4694      	mov	ip, r2
    b998:	2210      	movs	r2, #16
    b99a:	4690      	mov	r8, r2
    b99c:	44b8      	add	r8, r7
    b99e:	44c4      	add	ip, r8
    b9a0:	4463      	add	r3, ip
    b9a2:	68da      	ldr	r2, [r3, #12]
    b9a4:	4b56      	ldr	r3, [pc, #344]	; (bb00 <cal_angleYZ+0x904>)
    b9a6:	4955      	ldr	r1, [pc, #340]	; (bafc <cal_angleYZ+0x900>)
    b9a8:	2010      	movs	r0, #16
    b9aa:	4684      	mov	ip, r0
    b9ac:	44bc      	add	ip, r7
    b9ae:	4461      	add	r1, ip
    b9b0:	6809      	ldr	r1, [r1, #0]
    b9b2:	1c10      	adds	r0, r2, #0
    b9b4:	4798      	blx	r3
    b9b6:	1c03      	adds	r3, r0, #0
    b9b8:	1c1a      	adds	r2, r3, #0
    b9ba:	4b52      	ldr	r3, [pc, #328]	; (bb04 <cal_angleYZ+0x908>)
    b9bc:	21ab      	movs	r1, #171	; 0xab
    b9be:	00c9      	lsls	r1, r1, #3
    b9c0:	468c      	mov	ip, r1
    b9c2:	2110      	movs	r1, #16
    b9c4:	4688      	mov	r8, r1
    b9c6:	44b8      	add	r8, r7
    b9c8:	44c4      	add	ip, r8
    b9ca:	4463      	add	r3, ip
    b9cc:	601a      	str	r2, [r3, #0]
	tempX2[1][1] = tempX1[0][0]/detX;
    b9ce:	4b44      	ldr	r3, [pc, #272]	; (bae0 <cal_angleYZ+0x8e4>)
    b9d0:	22ab      	movs	r2, #171	; 0xab
    b9d2:	00d2      	lsls	r2, r2, #3
    b9d4:	4694      	mov	ip, r2
    b9d6:	2210      	movs	r2, #16
    b9d8:	4690      	mov	r8, r2
    b9da:	44b8      	add	r8, r7
    b9dc:	44c4      	add	ip, r8
    b9de:	4463      	add	r3, ip
    b9e0:	681a      	ldr	r2, [r3, #0]
    b9e2:	4b47      	ldr	r3, [pc, #284]	; (bb00 <cal_angleYZ+0x904>)
    b9e4:	4945      	ldr	r1, [pc, #276]	; (bafc <cal_angleYZ+0x900>)
    b9e6:	2010      	movs	r0, #16
    b9e8:	4684      	mov	ip, r0
    b9ea:	44bc      	add	ip, r7
    b9ec:	4461      	add	r1, ip
    b9ee:	6809      	ldr	r1, [r1, #0]
    b9f0:	1c10      	adds	r0, r2, #0
    b9f2:	4798      	blx	r3
    b9f4:	1c03      	adds	r3, r0, #0
    b9f6:	1c1a      	adds	r2, r3, #0
    b9f8:	4b42      	ldr	r3, [pc, #264]	; (bb04 <cal_angleYZ+0x908>)
    b9fa:	21ab      	movs	r1, #171	; 0xab
    b9fc:	00c9      	lsls	r1, r1, #3
    b9fe:	468c      	mov	ip, r1
    ba00:	2110      	movs	r1, #16
    ba02:	4688      	mov	r8, r1
    ba04:	44b8      	add	r8, r7
    ba06:	44c4      	add	ip, r8
    ba08:	4463      	add	r3, ip
    ba0a:	60da      	str	r2, [r3, #12]
	tempX2[0][1] = -1*tempX1[1][0]/detX;
    ba0c:	4b34      	ldr	r3, [pc, #208]	; (bae0 <cal_angleYZ+0x8e4>)
    ba0e:	22ab      	movs	r2, #171	; 0xab
    ba10:	00d2      	lsls	r2, r2, #3
    ba12:	4694      	mov	ip, r2
    ba14:	2210      	movs	r2, #16
    ba16:	4690      	mov	r8, r2
    ba18:	44b8      	add	r8, r7
    ba1a:	44c4      	add	ip, r8
    ba1c:	4463      	add	r3, ip
    ba1e:	689b      	ldr	r3, [r3, #8]
    ba20:	2280      	movs	r2, #128	; 0x80
    ba22:	0612      	lsls	r2, r2, #24
    ba24:	405a      	eors	r2, r3
    ba26:	4b36      	ldr	r3, [pc, #216]	; (bb00 <cal_angleYZ+0x904>)
    ba28:	4934      	ldr	r1, [pc, #208]	; (bafc <cal_angleYZ+0x900>)
    ba2a:	2010      	movs	r0, #16
    ba2c:	4684      	mov	ip, r0
    ba2e:	44bc      	add	ip, r7
    ba30:	4461      	add	r1, ip
    ba32:	6809      	ldr	r1, [r1, #0]
    ba34:	1c10      	adds	r0, r2, #0
    ba36:	4798      	blx	r3
    ba38:	1c03      	adds	r3, r0, #0
    ba3a:	1c1a      	adds	r2, r3, #0
    ba3c:	4b31      	ldr	r3, [pc, #196]	; (bb04 <cal_angleYZ+0x908>)
    ba3e:	21ab      	movs	r1, #171	; 0xab
    ba40:	00c9      	lsls	r1, r1, #3
    ba42:	468c      	mov	ip, r1
    ba44:	2110      	movs	r1, #16
    ba46:	4688      	mov	r8, r1
    ba48:	44b8      	add	r8, r7
    ba4a:	44c4      	add	ip, r8
    ba4c:	4463      	add	r3, ip
    ba4e:	605a      	str	r2, [r3, #4]
	tempX2[1][0] = -1*tempX1[0][1]/detX;
    ba50:	4b23      	ldr	r3, [pc, #140]	; (bae0 <cal_angleYZ+0x8e4>)
    ba52:	22ab      	movs	r2, #171	; 0xab
    ba54:	00d2      	lsls	r2, r2, #3
    ba56:	4694      	mov	ip, r2
    ba58:	2210      	movs	r2, #16
    ba5a:	4690      	mov	r8, r2
    ba5c:	44b8      	add	r8, r7
    ba5e:	44c4      	add	ip, r8
    ba60:	4463      	add	r3, ip
    ba62:	685b      	ldr	r3, [r3, #4]
    ba64:	2280      	movs	r2, #128	; 0x80
    ba66:	0612      	lsls	r2, r2, #24
    ba68:	405a      	eors	r2, r3
    ba6a:	4b25      	ldr	r3, [pc, #148]	; (bb00 <cal_angleYZ+0x904>)
    ba6c:	4923      	ldr	r1, [pc, #140]	; (bafc <cal_angleYZ+0x900>)
    ba6e:	2010      	movs	r0, #16
    ba70:	4684      	mov	ip, r0
    ba72:	44bc      	add	ip, r7
    ba74:	4461      	add	r1, ip
    ba76:	6809      	ldr	r1, [r1, #0]
    ba78:	1c10      	adds	r0, r2, #0
    ba7a:	4798      	blx	r3
    ba7c:	1c03      	adds	r3, r0, #0
    ba7e:	1c1a      	adds	r2, r3, #0
    ba80:	4b20      	ldr	r3, [pc, #128]	; (bb04 <cal_angleYZ+0x908>)
    ba82:	21ab      	movs	r1, #171	; 0xab
    ba84:	00c9      	lsls	r1, r1, #3
    ba86:	468c      	mov	ip, r1
    ba88:	2110      	movs	r1, #16
    ba8a:	4688      	mov	r8, r1
    ba8c:	44b8      	add	r8, r7
    ba8e:	44c4      	add	ip, r8
    ba90:	4463      	add	r3, ip
    ba92:	609a      	str	r2, [r3, #8]


	// tempX3 = X'*Y;
	for (i=0;i<2;i++){
    ba94:	4b10      	ldr	r3, [pc, #64]	; (bad8 <cal_angleYZ+0x8dc>)
    ba96:	2210      	movs	r2, #16
    ba98:	4694      	mov	ip, r2
    ba9a:	44bc      	add	ip, r7
    ba9c:	4463      	add	r3, ip
    ba9e:	2200      	movs	r2, #0
    baa0:	701a      	strb	r2, [r3, #0]
    baa2:	e0ae      	b.n	bc02 <cal_angleYZ+0xa06>
		tempX3[i] = 0;
    baa4:	4b0c      	ldr	r3, [pc, #48]	; (bad8 <cal_angleYZ+0x8dc>)
    baa6:	2210      	movs	r2, #16
    baa8:	4694      	mov	ip, r2
    baaa:	44bc      	add	ip, r7
    baac:	4463      	add	r3, ip
    baae:	781a      	ldrb	r2, [r3, #0]
    bab0:	4b15      	ldr	r3, [pc, #84]	; (bb08 <cal_angleYZ+0x90c>)
    bab2:	21ab      	movs	r1, #171	; 0xab
    bab4:	00c9      	lsls	r1, r1, #3
    bab6:	468c      	mov	ip, r1
    bab8:	2110      	movs	r1, #16
    baba:	4688      	mov	r8, r1
    babc:	44b8      	add	r8, r7
    babe:	44c4      	add	ip, r8
    bac0:	4463      	add	r3, ip
    bac2:	0092      	lsls	r2, r2, #2
    bac4:	2100      	movs	r1, #0
    bac6:	50d1      	str	r1, [r2, r3]
		for (np=0;np<n_points;np++){
    bac8:	4b06      	ldr	r3, [pc, #24]	; (bae4 <cal_angleYZ+0x8e8>)
    baca:	2210      	movs	r2, #16
    bacc:	4694      	mov	ip, r2
    bace:	44bc      	add	ip, r7
    bad0:	4463      	add	r3, ip
    bad2:	2200      	movs	r2, #0
    bad4:	701a      	strb	r2, [r3, #0]
    bad6:	e07d      	b.n	bbd4 <cal_angleYZ+0x9d8>
    bad8:	00000557 	.word	0x00000557
    badc:	00000556 	.word	0x00000556
    bae0:	fffffad4 	.word	0xfffffad4
    bae4:	00000554 	.word	0x00000554
    bae8:	fffffae4 	.word	0xfffffae4
    baec:	0001eb65 	.word	0x0001eb65
    baf0:	0001e461 	.word	0x0001e461
    baf4:	200027f8 	.word	0x200027f8
    baf8:	0001eda5 	.word	0x0001eda5
    bafc:	0000053c 	.word	0x0000053c
    bb00:	0001e785 	.word	0x0001e785
    bb04:	fffffac4 	.word	0xfffffac4
    bb08:	fffffabc 	.word	0xfffffabc
			tempX3[i] = tempX3[i] + X[np][i]*x_ang_shift[np];
    bb0c:	4bb1      	ldr	r3, [pc, #708]	; (bdd4 <cal_angleYZ+0xbd8>)
    bb0e:	2210      	movs	r2, #16
    bb10:	4694      	mov	ip, r2
    bb12:	44bc      	add	ip, r7
    bb14:	4463      	add	r3, ip
    bb16:	781c      	ldrb	r4, [r3, #0]
    bb18:	4bae      	ldr	r3, [pc, #696]	; (bdd4 <cal_angleYZ+0xbd8>)
    bb1a:	2210      	movs	r2, #16
    bb1c:	4694      	mov	ip, r2
    bb1e:	44bc      	add	ip, r7
    bb20:	4463      	add	r3, ip
    bb22:	781a      	ldrb	r2, [r3, #0]
    bb24:	4bac      	ldr	r3, [pc, #688]	; (bdd8 <cal_angleYZ+0xbdc>)
    bb26:	21ab      	movs	r1, #171	; 0xab
    bb28:	00c9      	lsls	r1, r1, #3
    bb2a:	468c      	mov	ip, r1
    bb2c:	2110      	movs	r1, #16
    bb2e:	4688      	mov	r8, r1
    bb30:	44b8      	add	r8, r7
    bb32:	44c4      	add	ip, r8
    bb34:	4463      	add	r3, ip
    bb36:	0092      	lsls	r2, r2, #2
    bb38:	58d5      	ldr	r5, [r2, r3]
    bb3a:	4ba8      	ldr	r3, [pc, #672]	; (bddc <cal_angleYZ+0xbe0>)
    bb3c:	2210      	movs	r2, #16
    bb3e:	4694      	mov	ip, r2
    bb40:	44bc      	add	ip, r7
    bb42:	4463      	add	r3, ip
    bb44:	7819      	ldrb	r1, [r3, #0]
    bb46:	4ba3      	ldr	r3, [pc, #652]	; (bdd4 <cal_angleYZ+0xbd8>)
    bb48:	2210      	movs	r2, #16
    bb4a:	4694      	mov	ip, r2
    bb4c:	44bc      	add	ip, r7
    bb4e:	4463      	add	r3, ip
    bb50:	781a      	ldrb	r2, [r3, #0]
    bb52:	4ba3      	ldr	r3, [pc, #652]	; (bde0 <cal_angleYZ+0xbe4>)
    bb54:	20ab      	movs	r0, #171	; 0xab
    bb56:	00c0      	lsls	r0, r0, #3
    bb58:	4684      	mov	ip, r0
    bb5a:	2010      	movs	r0, #16
    bb5c:	4680      	mov	r8, r0
    bb5e:	44b8      	add	r8, r7
    bb60:	44c4      	add	ip, r8
    bb62:	4463      	add	r3, ip
    bb64:	0049      	lsls	r1, r1, #1
    bb66:	188a      	adds	r2, r1, r2
    bb68:	0092      	lsls	r2, r2, #2
    bb6a:	58d0      	ldr	r0, [r2, r3]
    bb6c:	4b9b      	ldr	r3, [pc, #620]	; (bddc <cal_angleYZ+0xbe0>)
    bb6e:	2210      	movs	r2, #16
    bb70:	4694      	mov	ip, r2
    bb72:	44bc      	add	ip, r7
    bb74:	4463      	add	r3, ip
    bb76:	781a      	ldrb	r2, [r3, #0]
    bb78:	4b9a      	ldr	r3, [pc, #616]	; (bde4 <cal_angleYZ+0xbe8>)
    bb7a:	21ab      	movs	r1, #171	; 0xab
    bb7c:	00c9      	lsls	r1, r1, #3
    bb7e:	468c      	mov	ip, r1
    bb80:	2110      	movs	r1, #16
    bb82:	4688      	mov	r8, r1
    bb84:	44b8      	add	r8, r7
    bb86:	44c4      	add	ip, r8
    bb88:	4463      	add	r3, ip
    bb8a:	0092      	lsls	r2, r2, #2
    bb8c:	58d2      	ldr	r2, [r2, r3]
    bb8e:	4b96      	ldr	r3, [pc, #600]	; (bde8 <cal_angleYZ+0xbec>)
    bb90:	1c11      	adds	r1, r2, #0
    bb92:	4798      	blx	r3
    bb94:	1c03      	adds	r3, r0, #0
    bb96:	1c1a      	adds	r2, r3, #0
    bb98:	4b94      	ldr	r3, [pc, #592]	; (bdec <cal_angleYZ+0xbf0>)
    bb9a:	1c11      	adds	r1, r2, #0
    bb9c:	1c28      	adds	r0, r5, #0
    bb9e:	4798      	blx	r3
    bba0:	1c03      	adds	r3, r0, #0
    bba2:	1c19      	adds	r1, r3, #0
    bba4:	4b8c      	ldr	r3, [pc, #560]	; (bdd8 <cal_angleYZ+0xbdc>)
    bba6:	22ab      	movs	r2, #171	; 0xab
    bba8:	00d2      	lsls	r2, r2, #3
    bbaa:	4694      	mov	ip, r2
    bbac:	2210      	movs	r2, #16
    bbae:	4690      	mov	r8, r2
    bbb0:	44b8      	add	r8, r7
    bbb2:	44c4      	add	ip, r8
    bbb4:	4463      	add	r3, ip
    bbb6:	00a2      	lsls	r2, r4, #2
    bbb8:	50d1      	str	r1, [r2, r3]
		for (np=0;np<n_points;np++){
    bbba:	4b88      	ldr	r3, [pc, #544]	; (bddc <cal_angleYZ+0xbe0>)
    bbbc:	2210      	movs	r2, #16
    bbbe:	4694      	mov	ip, r2
    bbc0:	44bc      	add	ip, r7
    bbc2:	4463      	add	r3, ip
    bbc4:	781a      	ldrb	r2, [r3, #0]
    bbc6:	4b85      	ldr	r3, [pc, #532]	; (bddc <cal_angleYZ+0xbe0>)
    bbc8:	2110      	movs	r1, #16
    bbca:	468c      	mov	ip, r1
    bbcc:	44bc      	add	ip, r7
    bbce:	4463      	add	r3, ip
    bbd0:	3201      	adds	r2, #1
    bbd2:	701a      	strb	r2, [r3, #0]
    bbd4:	4b81      	ldr	r3, [pc, #516]	; (bddc <cal_angleYZ+0xbe0>)
    bbd6:	2210      	movs	r2, #16
    bbd8:	4694      	mov	ip, r2
    bbda:	44bc      	add	ip, r7
    bbdc:	4463      	add	r3, ip
    bbde:	781a      	ldrb	r2, [r3, #0]
    bbe0:	4b83      	ldr	r3, [pc, #524]	; (bdf0 <cal_angleYZ+0xbf4>)
    bbe2:	681b      	ldr	r3, [r3, #0]
    bbe4:	429a      	cmp	r2, r3
    bbe6:	d391      	bcc.n	bb0c <cal_angleYZ+0x910>
	for (i=0;i<2;i++){
    bbe8:	4b7a      	ldr	r3, [pc, #488]	; (bdd4 <cal_angleYZ+0xbd8>)
    bbea:	2210      	movs	r2, #16
    bbec:	4694      	mov	ip, r2
    bbee:	44bc      	add	ip, r7
    bbf0:	4463      	add	r3, ip
    bbf2:	781a      	ldrb	r2, [r3, #0]
    bbf4:	4b77      	ldr	r3, [pc, #476]	; (bdd4 <cal_angleYZ+0xbd8>)
    bbf6:	2110      	movs	r1, #16
    bbf8:	468c      	mov	ip, r1
    bbfa:	44bc      	add	ip, r7
    bbfc:	4463      	add	r3, ip
    bbfe:	3201      	adds	r2, #1
    bc00:	701a      	strb	r2, [r3, #0]
    bc02:	4b74      	ldr	r3, [pc, #464]	; (bdd4 <cal_angleYZ+0xbd8>)
    bc04:	2210      	movs	r2, #16
    bc06:	4694      	mov	ip, r2
    bc08:	44bc      	add	ip, r7
    bc0a:	4463      	add	r3, ip
    bc0c:	781b      	ldrb	r3, [r3, #0]
    bc0e:	2b01      	cmp	r3, #1
    bc10:	d800      	bhi.n	bc14 <cal_angleYZ+0xa18>
    bc12:	e747      	b.n	baa4 <cal_angleYZ+0x8a8>
		}
	}
	
	// B = inv(X'*X)*X'*Y = tempX2*tempX3
	for (i=0;i<2;i++){
    bc14:	4b6f      	ldr	r3, [pc, #444]	; (bdd4 <cal_angleYZ+0xbd8>)
    bc16:	2210      	movs	r2, #16
    bc18:	4694      	mov	ip, r2
    bc1a:	44bc      	add	ip, r7
    bc1c:	4463      	add	r3, ip
    bc1e:	2200      	movs	r2, #0
    bc20:	701a      	strb	r2, [r3, #0]
    bc22:	e092      	b.n	bd4a <cal_angleYZ+0xb4e>
		B[i] = 0;
    bc24:	4b6b      	ldr	r3, [pc, #428]	; (bdd4 <cal_angleYZ+0xbd8>)
    bc26:	2210      	movs	r2, #16
    bc28:	4694      	mov	ip, r2
    bc2a:	44bc      	add	ip, r7
    bc2c:	4463      	add	r3, ip
    bc2e:	781a      	ldrb	r2, [r3, #0]
    bc30:	4b70      	ldr	r3, [pc, #448]	; (bdf4 <cal_angleYZ+0xbf8>)
    bc32:	21ab      	movs	r1, #171	; 0xab
    bc34:	00c9      	lsls	r1, r1, #3
    bc36:	468c      	mov	ip, r1
    bc38:	2110      	movs	r1, #16
    bc3a:	4688      	mov	r8, r1
    bc3c:	44b8      	add	r8, r7
    bc3e:	44c4      	add	ip, r8
    bc40:	4463      	add	r3, ip
    bc42:	0092      	lsls	r2, r2, #2
    bc44:	2100      	movs	r1, #0
    bc46:	50d1      	str	r1, [r2, r3]
		for (j=0;j<2;j++){
    bc48:	4b6b      	ldr	r3, [pc, #428]	; (bdf8 <cal_angleYZ+0xbfc>)
    bc4a:	2210      	movs	r2, #16
    bc4c:	4694      	mov	ip, r2
    bc4e:	44bc      	add	ip, r7
    bc50:	4463      	add	r3, ip
    bc52:	2200      	movs	r2, #0
    bc54:	701a      	strb	r2, [r3, #0]
    bc56:	e063      	b.n	bd20 <cal_angleYZ+0xb24>
			B[i] = B[i]+tempX2[i][j]*tempX3[j];
    bc58:	4b5e      	ldr	r3, [pc, #376]	; (bdd4 <cal_angleYZ+0xbd8>)
    bc5a:	2210      	movs	r2, #16
    bc5c:	4694      	mov	ip, r2
    bc5e:	44bc      	add	ip, r7
    bc60:	4463      	add	r3, ip
    bc62:	781c      	ldrb	r4, [r3, #0]
    bc64:	4b5b      	ldr	r3, [pc, #364]	; (bdd4 <cal_angleYZ+0xbd8>)
    bc66:	2210      	movs	r2, #16
    bc68:	4694      	mov	ip, r2
    bc6a:	44bc      	add	ip, r7
    bc6c:	4463      	add	r3, ip
    bc6e:	781a      	ldrb	r2, [r3, #0]
    bc70:	4b60      	ldr	r3, [pc, #384]	; (bdf4 <cal_angleYZ+0xbf8>)
    bc72:	21ab      	movs	r1, #171	; 0xab
    bc74:	00c9      	lsls	r1, r1, #3
    bc76:	468c      	mov	ip, r1
    bc78:	2110      	movs	r1, #16
    bc7a:	4688      	mov	r8, r1
    bc7c:	44b8      	add	r8, r7
    bc7e:	44c4      	add	ip, r8
    bc80:	4463      	add	r3, ip
    bc82:	0092      	lsls	r2, r2, #2
    bc84:	58d5      	ldr	r5, [r2, r3]
    bc86:	4b53      	ldr	r3, [pc, #332]	; (bdd4 <cal_angleYZ+0xbd8>)
    bc88:	2210      	movs	r2, #16
    bc8a:	4694      	mov	ip, r2
    bc8c:	44bc      	add	ip, r7
    bc8e:	4463      	add	r3, ip
    bc90:	7819      	ldrb	r1, [r3, #0]
    bc92:	4b59      	ldr	r3, [pc, #356]	; (bdf8 <cal_angleYZ+0xbfc>)
    bc94:	2210      	movs	r2, #16
    bc96:	4694      	mov	ip, r2
    bc98:	44bc      	add	ip, r7
    bc9a:	4463      	add	r3, ip
    bc9c:	781a      	ldrb	r2, [r3, #0]
    bc9e:	4b57      	ldr	r3, [pc, #348]	; (bdfc <cal_angleYZ+0xc00>)
    bca0:	20ab      	movs	r0, #171	; 0xab
    bca2:	00c0      	lsls	r0, r0, #3
    bca4:	4684      	mov	ip, r0
    bca6:	2010      	movs	r0, #16
    bca8:	4680      	mov	r8, r0
    bcaa:	44b8      	add	r8, r7
    bcac:	44c4      	add	ip, r8
    bcae:	4463      	add	r3, ip
    bcb0:	0049      	lsls	r1, r1, #1
    bcb2:	188a      	adds	r2, r1, r2
    bcb4:	0092      	lsls	r2, r2, #2
    bcb6:	58d0      	ldr	r0, [r2, r3]
    bcb8:	4b4f      	ldr	r3, [pc, #316]	; (bdf8 <cal_angleYZ+0xbfc>)
    bcba:	2210      	movs	r2, #16
    bcbc:	4694      	mov	ip, r2
    bcbe:	44bc      	add	ip, r7
    bcc0:	4463      	add	r3, ip
    bcc2:	781a      	ldrb	r2, [r3, #0]
    bcc4:	4b44      	ldr	r3, [pc, #272]	; (bdd8 <cal_angleYZ+0xbdc>)
    bcc6:	21ab      	movs	r1, #171	; 0xab
    bcc8:	00c9      	lsls	r1, r1, #3
    bcca:	468c      	mov	ip, r1
    bccc:	2110      	movs	r1, #16
    bcce:	4688      	mov	r8, r1
    bcd0:	44b8      	add	r8, r7
    bcd2:	44c4      	add	ip, r8
    bcd4:	4463      	add	r3, ip
    bcd6:	0092      	lsls	r2, r2, #2
    bcd8:	58d2      	ldr	r2, [r2, r3]
    bcda:	4b43      	ldr	r3, [pc, #268]	; (bde8 <cal_angleYZ+0xbec>)
    bcdc:	1c11      	adds	r1, r2, #0
    bcde:	4798      	blx	r3
    bce0:	1c03      	adds	r3, r0, #0
    bce2:	1c1a      	adds	r2, r3, #0
    bce4:	4b41      	ldr	r3, [pc, #260]	; (bdec <cal_angleYZ+0xbf0>)
    bce6:	1c11      	adds	r1, r2, #0
    bce8:	1c28      	adds	r0, r5, #0
    bcea:	4798      	blx	r3
    bcec:	1c03      	adds	r3, r0, #0
    bcee:	1c19      	adds	r1, r3, #0
    bcf0:	4b40      	ldr	r3, [pc, #256]	; (bdf4 <cal_angleYZ+0xbf8>)
    bcf2:	22ab      	movs	r2, #171	; 0xab
    bcf4:	00d2      	lsls	r2, r2, #3
    bcf6:	4694      	mov	ip, r2
    bcf8:	2210      	movs	r2, #16
    bcfa:	4690      	mov	r8, r2
    bcfc:	44b8      	add	r8, r7
    bcfe:	44c4      	add	ip, r8
    bd00:	4463      	add	r3, ip
    bd02:	00a2      	lsls	r2, r4, #2
    bd04:	50d1      	str	r1, [r2, r3]
		for (j=0;j<2;j++){
    bd06:	4b3c      	ldr	r3, [pc, #240]	; (bdf8 <cal_angleYZ+0xbfc>)
    bd08:	2210      	movs	r2, #16
    bd0a:	4694      	mov	ip, r2
    bd0c:	44bc      	add	ip, r7
    bd0e:	4463      	add	r3, ip
    bd10:	781a      	ldrb	r2, [r3, #0]
    bd12:	4b39      	ldr	r3, [pc, #228]	; (bdf8 <cal_angleYZ+0xbfc>)
    bd14:	2110      	movs	r1, #16
    bd16:	468c      	mov	ip, r1
    bd18:	44bc      	add	ip, r7
    bd1a:	4463      	add	r3, ip
    bd1c:	3201      	adds	r2, #1
    bd1e:	701a      	strb	r2, [r3, #0]
    bd20:	4b35      	ldr	r3, [pc, #212]	; (bdf8 <cal_angleYZ+0xbfc>)
    bd22:	2210      	movs	r2, #16
    bd24:	4694      	mov	ip, r2
    bd26:	44bc      	add	ip, r7
    bd28:	4463      	add	r3, ip
    bd2a:	781b      	ldrb	r3, [r3, #0]
    bd2c:	2b01      	cmp	r3, #1
    bd2e:	d993      	bls.n	bc58 <cal_angleYZ+0xa5c>
	for (i=0;i<2;i++){
    bd30:	4b28      	ldr	r3, [pc, #160]	; (bdd4 <cal_angleYZ+0xbd8>)
    bd32:	2210      	movs	r2, #16
    bd34:	4694      	mov	ip, r2
    bd36:	44bc      	add	ip, r7
    bd38:	4463      	add	r3, ip
    bd3a:	781a      	ldrb	r2, [r3, #0]
    bd3c:	4b25      	ldr	r3, [pc, #148]	; (bdd4 <cal_angleYZ+0xbd8>)
    bd3e:	2110      	movs	r1, #16
    bd40:	468c      	mov	ip, r1
    bd42:	44bc      	add	ip, r7
    bd44:	4463      	add	r3, ip
    bd46:	3201      	adds	r2, #1
    bd48:	701a      	strb	r2, [r3, #0]
    bd4a:	4b22      	ldr	r3, [pc, #136]	; (bdd4 <cal_angleYZ+0xbd8>)
    bd4c:	2210      	movs	r2, #16
    bd4e:	4694      	mov	ip, r2
    bd50:	44bc      	add	ip, r7
    bd52:	4463      	add	r3, ip
    bd54:	781b      	ldrb	r3, [r3, #0]
    bd56:	2b01      	cmp	r3, #1
    bd58:	d800      	bhi.n	bd5c <cal_angleYZ+0xb60>
    bd5a:	e763      	b.n	bc24 <cal_angleYZ+0xa28>
		
	}
	
	
	// Update calibration structure
	cal_struct->thetaY = B[0];
    bd5c:	4b25      	ldr	r3, [pc, #148]	; (bdf4 <cal_angleYZ+0xbf8>)
    bd5e:	22ab      	movs	r2, #171	; 0xab
    bd60:	00d2      	lsls	r2, r2, #3
    bd62:	4694      	mov	ip, r2
    bd64:	2210      	movs	r2, #16
    bd66:	4690      	mov	r8, r2
    bd68:	44b8      	add	r8, r7
    bd6a:	44c4      	add	ip, r8
    bd6c:	4463      	add	r3, ip
    bd6e:	681a      	ldr	r2, [r3, #0]
    bd70:	693b      	ldr	r3, [r7, #16]
    bd72:	62da      	str	r2, [r3, #44]	; 0x2c
	cal_struct->thetaZ = -1*B[1];
    bd74:	4b1f      	ldr	r3, [pc, #124]	; (bdf4 <cal_angleYZ+0xbf8>)
    bd76:	22ab      	movs	r2, #171	; 0xab
    bd78:	00d2      	lsls	r2, r2, #3
    bd7a:	4694      	mov	ip, r2
    bd7c:	2210      	movs	r2, #16
    bd7e:	4690      	mov	r8, r2
    bd80:	44b8      	add	r8, r7
    bd82:	44c4      	add	ip, r8
    bd84:	4463      	add	r3, ip
    bd86:	685b      	ldr	r3, [r3, #4]
    bd88:	2280      	movs	r2, #128	; 0x80
    bd8a:	0612      	lsls	r2, r2, #24
    bd8c:	405a      	eors	r2, r3
    bd8e:	693b      	ldr	r3, [r7, #16]
    bd90:	631a      	str	r2, [r3, #48]	; 0x30
	
	// Create rotation matrix
	gen_RotM(cal_struct);
    bd92:	693b      	ldr	r3, [r7, #16]
    bd94:	0018      	movs	r0, r3
    bd96:	4b1a      	ldr	r3, [pc, #104]	; (be00 <cal_angleYZ+0xc04>)
    bd98:	4798      	blx	r3

	
	// Find standard deviation of result
	B1_init = cal_struct->thetaY;
    bd9a:	693b      	ldr	r3, [r7, #16]
    bd9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    bd9e:	4a19      	ldr	r2, [pc, #100]	; (be04 <cal_angleYZ+0xc08>)
    bda0:	2110      	movs	r1, #16
    bda2:	468c      	mov	ip, r1
    bda4:	44bc      	add	ip, r7
    bda6:	4462      	add	r2, ip
    bda8:	6013      	str	r3, [r2, #0]
	B2_init = -1*cal_struct->thetaZ;
    bdaa:	693b      	ldr	r3, [r7, #16]
    bdac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    bdae:	2280      	movs	r2, #128	; 0x80
    bdb0:	0612      	lsls	r2, r2, #24
    bdb2:	4053      	eors	r3, r2
    bdb4:	22a9      	movs	r2, #169	; 0xa9
    bdb6:	00d2      	lsls	r2, r2, #3
    bdb8:	2110      	movs	r1, #16
    bdba:	468c      	mov	ip, r1
    bdbc:	44bc      	add	ip, r7
    bdbe:	4462      	add	r2, ip
    bdc0:	6013      	str	r3, [r2, #0]
	
	for (np=0;np<n_points;np++){
    bdc2:	4b06      	ldr	r3, [pc, #24]	; (bddc <cal_angleYZ+0xbe0>)
    bdc4:	2210      	movs	r2, #16
    bdc6:	4694      	mov	ip, r2
    bdc8:	44bc      	add	ip, r7
    bdca:	4463      	add	r3, ip
    bdcc:	2200      	movs	r2, #0
    bdce:	701a      	strb	r2, [r3, #0]
    bdd0:	e0ca      	b.n	bf68 <cal_angleYZ+0xd6c>
    bdd2:	46c0      	nop			; (mov r8, r8)
    bdd4:	00000557 	.word	0x00000557
    bdd8:	fffffabc 	.word	0xfffffabc
    bddc:	00000554 	.word	0x00000554
    bde0:	fffffae4 	.word	0xfffffae4
    bde4:	fffffd64 	.word	0xfffffd64
    bde8:	0001eb65 	.word	0x0001eb65
    bdec:	0001e461 	.word	0x0001e461
    bdf0:	200027f8 	.word	0x200027f8
    bdf4:	fffffab4 	.word	0xfffffab4
    bdf8:	00000556 	.word	0x00000556
    bdfc:	fffffac4 	.word	0xfffffac4
    be00:	0000c211 	.word	0x0000c211
    be04:	0000054c 	.word	0x0000054c
		x_ang_shift[np] = x_ang_shift[np]
    be08:	4b68      	ldr	r3, [pc, #416]	; (bfac <cal_angleYZ+0xdb0>)
    be0a:	2210      	movs	r2, #16
    be0c:	4694      	mov	ip, r2
    be0e:	44bc      	add	ip, r7
    be10:	4463      	add	r3, ip
    be12:	781c      	ldrb	r4, [r3, #0]
    be14:	4b65      	ldr	r3, [pc, #404]	; (bfac <cal_angleYZ+0xdb0>)
    be16:	2210      	movs	r2, #16
    be18:	4694      	mov	ip, r2
    be1a:	44bc      	add	ip, r7
    be1c:	4463      	add	r3, ip
    be1e:	781a      	ldrb	r2, [r3, #0]
    be20:	4b63      	ldr	r3, [pc, #396]	; (bfb0 <cal_angleYZ+0xdb4>)
    be22:	21ab      	movs	r1, #171	; 0xab
    be24:	00c9      	lsls	r1, r1, #3
    be26:	468c      	mov	ip, r1
    be28:	2110      	movs	r1, #16
    be2a:	4688      	mov	r8, r1
    be2c:	44b8      	add	r8, r7
    be2e:	44c4      	add	ip, r8
    be30:	4463      	add	r3, ip
    be32:	0092      	lsls	r2, r2, #2
    be34:	58d2      	ldr	r2, [r2, r3]
    be36:	4b5f      	ldr	r3, [pc, #380]	; (bfb4 <cal_angleYZ+0xdb8>)
    be38:	1c10      	adds	r0, r2, #0
    be3a:	4798      	blx	r3
    be3c:	60b8      	str	r0, [r7, #8]
    be3e:	60f9      	str	r1, [r7, #12]
		- B1_init*cos(deg2rad*roll_ang[np])
    be40:	4b5c      	ldr	r3, [pc, #368]	; (bfb4 <cal_angleYZ+0xdb8>)
    be42:	4a5d      	ldr	r2, [pc, #372]	; (bfb8 <cal_angleYZ+0xdbc>)
    be44:	2110      	movs	r1, #16
    be46:	468c      	mov	ip, r1
    be48:	44bc      	add	ip, r7
    be4a:	4462      	add	r2, ip
    be4c:	6810      	ldr	r0, [r2, #0]
    be4e:	4798      	blx	r3
    be50:	6038      	str	r0, [r7, #0]
    be52:	6079      	str	r1, [r7, #4]
    be54:	4b55      	ldr	r3, [pc, #340]	; (bfac <cal_angleYZ+0xdb0>)
    be56:	2210      	movs	r2, #16
    be58:	4694      	mov	ip, r2
    be5a:	44bc      	add	ip, r7
    be5c:	4463      	add	r3, ip
    be5e:	781a      	ldrb	r2, [r3, #0]
    be60:	4b56      	ldr	r3, [pc, #344]	; (bfbc <cal_angleYZ+0xdc0>)
    be62:	21ab      	movs	r1, #171	; 0xab
    be64:	00c9      	lsls	r1, r1, #3
    be66:	468c      	mov	ip, r1
    be68:	2110      	movs	r1, #16
    be6a:	4688      	mov	r8, r1
    be6c:	44b8      	add	r8, r7
    be6e:	44c4      	add	ip, r8
    be70:	4463      	add	r3, ip
    be72:	0092      	lsls	r2, r2, #2
    be74:	58d2      	ldr	r2, [r2, r3]
    be76:	4b52      	ldr	r3, [pc, #328]	; (bfc0 <cal_angleYZ+0xdc4>)
    be78:	6819      	ldr	r1, [r3, #0]
    be7a:	4b52      	ldr	r3, [pc, #328]	; (bfc4 <cal_angleYZ+0xdc8>)
    be7c:	1c10      	adds	r0, r2, #0
    be7e:	4798      	blx	r3
    be80:	1c03      	adds	r3, r0, #0
    be82:	1c1a      	adds	r2, r3, #0
    be84:	4b4b      	ldr	r3, [pc, #300]	; (bfb4 <cal_angleYZ+0xdb8>)
    be86:	1c10      	adds	r0, r2, #0
    be88:	4798      	blx	r3
    be8a:	0002      	movs	r2, r0
    be8c:	000b      	movs	r3, r1
    be8e:	0010      	movs	r0, r2
    be90:	0019      	movs	r1, r3
    be92:	4b4d      	ldr	r3, [pc, #308]	; (bfc8 <cal_angleYZ+0xdcc>)
    be94:	4798      	blx	r3
    be96:	0002      	movs	r2, r0
    be98:	000b      	movs	r3, r1
    be9a:	4d4c      	ldr	r5, [pc, #304]	; (bfcc <cal_angleYZ+0xdd0>)
    be9c:	6838      	ldr	r0, [r7, #0]
    be9e:	6879      	ldr	r1, [r7, #4]
    bea0:	47a8      	blx	r5
    bea2:	0002      	movs	r2, r0
    bea4:	000b      	movs	r3, r1
    bea6:	4d4a      	ldr	r5, [pc, #296]	; (bfd0 <cal_angleYZ+0xdd4>)
    bea8:	68b8      	ldr	r0, [r7, #8]
    beaa:	68f9      	ldr	r1, [r7, #12]
    beac:	47a8      	blx	r5
    beae:	0002      	movs	r2, r0
    beb0:	000b      	movs	r3, r1
    beb2:	60ba      	str	r2, [r7, #8]
    beb4:	60fb      	str	r3, [r7, #12]
		- B2_init*sin(deg2rad*roll_ang[np]);
    beb6:	4b3f      	ldr	r3, [pc, #252]	; (bfb4 <cal_angleYZ+0xdb8>)
    beb8:	21a9      	movs	r1, #169	; 0xa9
    beba:	00c9      	lsls	r1, r1, #3
    bebc:	2210      	movs	r2, #16
    bebe:	4694      	mov	ip, r2
    bec0:	44bc      	add	ip, r7
    bec2:	4461      	add	r1, ip
    bec4:	6808      	ldr	r0, [r1, #0]
    bec6:	4798      	blx	r3
    bec8:	6038      	str	r0, [r7, #0]
    beca:	6079      	str	r1, [r7, #4]
    becc:	4b37      	ldr	r3, [pc, #220]	; (bfac <cal_angleYZ+0xdb0>)
    bece:	2210      	movs	r2, #16
    bed0:	4694      	mov	ip, r2
    bed2:	44bc      	add	ip, r7
    bed4:	4463      	add	r3, ip
    bed6:	781a      	ldrb	r2, [r3, #0]
    bed8:	4b38      	ldr	r3, [pc, #224]	; (bfbc <cal_angleYZ+0xdc0>)
    beda:	21ab      	movs	r1, #171	; 0xab
    bedc:	00c9      	lsls	r1, r1, #3
    bede:	468c      	mov	ip, r1
    bee0:	2110      	movs	r1, #16
    bee2:	4688      	mov	r8, r1
    bee4:	44b8      	add	r8, r7
    bee6:	44c4      	add	ip, r8
    bee8:	4463      	add	r3, ip
    beea:	0092      	lsls	r2, r2, #2
    beec:	58d2      	ldr	r2, [r2, r3]
    beee:	4b34      	ldr	r3, [pc, #208]	; (bfc0 <cal_angleYZ+0xdc4>)
    bef0:	6819      	ldr	r1, [r3, #0]
    bef2:	4b34      	ldr	r3, [pc, #208]	; (bfc4 <cal_angleYZ+0xdc8>)
    bef4:	1c10      	adds	r0, r2, #0
    bef6:	4798      	blx	r3
    bef8:	1c03      	adds	r3, r0, #0
    befa:	1c1a      	adds	r2, r3, #0
    befc:	4b2d      	ldr	r3, [pc, #180]	; (bfb4 <cal_angleYZ+0xdb8>)
    befe:	1c10      	adds	r0, r2, #0
    bf00:	4798      	blx	r3
    bf02:	0002      	movs	r2, r0
    bf04:	000b      	movs	r3, r1
    bf06:	0010      	movs	r0, r2
    bf08:	0019      	movs	r1, r3
    bf0a:	4b32      	ldr	r3, [pc, #200]	; (bfd4 <cal_angleYZ+0xdd8>)
    bf0c:	4798      	blx	r3
    bf0e:	0002      	movs	r2, r0
    bf10:	000b      	movs	r3, r1
    bf12:	4d2e      	ldr	r5, [pc, #184]	; (bfcc <cal_angleYZ+0xdd0>)
    bf14:	6838      	ldr	r0, [r7, #0]
    bf16:	6879      	ldr	r1, [r7, #4]
    bf18:	47a8      	blx	r5
    bf1a:	0002      	movs	r2, r0
    bf1c:	000b      	movs	r3, r1
    bf1e:	4d2c      	ldr	r5, [pc, #176]	; (bfd0 <cal_angleYZ+0xdd4>)
    bf20:	68b8      	ldr	r0, [r7, #8]
    bf22:	68f9      	ldr	r1, [r7, #12]
    bf24:	47a8      	blx	r5
    bf26:	0002      	movs	r2, r0
    bf28:	000b      	movs	r3, r1
    bf2a:	0011      	movs	r1, r2
    bf2c:	001a      	movs	r2, r3
    bf2e:	4b2a      	ldr	r3, [pc, #168]	; (bfd8 <cal_angleYZ+0xddc>)
    bf30:	0008      	movs	r0, r1
    bf32:	0011      	movs	r1, r2
    bf34:	4798      	blx	r3
    bf36:	1c01      	adds	r1, r0, #0
		x_ang_shift[np] = x_ang_shift[np]
    bf38:	4b1d      	ldr	r3, [pc, #116]	; (bfb0 <cal_angleYZ+0xdb4>)
    bf3a:	22ab      	movs	r2, #171	; 0xab
    bf3c:	00d2      	lsls	r2, r2, #3
    bf3e:	4694      	mov	ip, r2
    bf40:	2210      	movs	r2, #16
    bf42:	4690      	mov	r8, r2
    bf44:	44b8      	add	r8, r7
    bf46:	44c4      	add	ip, r8
    bf48:	4463      	add	r3, ip
    bf4a:	00a2      	lsls	r2, r4, #2
    bf4c:	50d1      	str	r1, [r2, r3]
	for (np=0;np<n_points;np++){
    bf4e:	4b17      	ldr	r3, [pc, #92]	; (bfac <cal_angleYZ+0xdb0>)
    bf50:	2210      	movs	r2, #16
    bf52:	4694      	mov	ip, r2
    bf54:	44bc      	add	ip, r7
    bf56:	4463      	add	r3, ip
    bf58:	781a      	ldrb	r2, [r3, #0]
    bf5a:	4b14      	ldr	r3, [pc, #80]	; (bfac <cal_angleYZ+0xdb0>)
    bf5c:	2110      	movs	r1, #16
    bf5e:	468c      	mov	ip, r1
    bf60:	44bc      	add	ip, r7
    bf62:	4463      	add	r3, ip
    bf64:	3201      	adds	r2, #1
    bf66:	701a      	strb	r2, [r3, #0]
    bf68:	4b10      	ldr	r3, [pc, #64]	; (bfac <cal_angleYZ+0xdb0>)
    bf6a:	2210      	movs	r2, #16
    bf6c:	4694      	mov	ip, r2
    bf6e:	44bc      	add	ip, r7
    bf70:	4463      	add	r3, ip
    bf72:	781a      	ldrb	r2, [r3, #0]
    bf74:	4b19      	ldr	r3, [pc, #100]	; (bfdc <cal_angleYZ+0xde0>)
    bf76:	681b      	ldr	r3, [r3, #0]
    bf78:	429a      	cmp	r2, r3
    bf7a:	d200      	bcs.n	bf7e <cal_angleYZ+0xd82>
    bf7c:	e744      	b.n	be08 <cal_angleYZ+0xc0c>
	}
	cal_struct->angle_stdev = stdev(x_ang_shift,n_points);
    bf7e:	4b17      	ldr	r3, [pc, #92]	; (bfdc <cal_angleYZ+0xde0>)
    bf80:	681a      	ldr	r2, [r3, #0]
    bf82:	23af      	movs	r3, #175	; 0xaf
    bf84:	009b      	lsls	r3, r3, #2
    bf86:	2110      	movs	r1, #16
    bf88:	468c      	mov	ip, r1
    bf8a:	44bc      	add	ip, r7
    bf8c:	4463      	add	r3, ip
    bf8e:	0011      	movs	r1, r2
    bf90:	0018      	movs	r0, r3
    bf92:	4b13      	ldr	r3, [pc, #76]	; (bfe0 <cal_angleYZ+0xde4>)
    bf94:	4798      	blx	r3
    bf96:	1c02      	adds	r2, r0, #0
    bf98:	693b      	ldr	r3, [r7, #16]
    bf9a:	65da      	str	r2, [r3, #92]	; 0x5c
	
}
    bf9c:	46c0      	nop			; (mov r8, r8)
    bf9e:	46bd      	mov	sp, r7
    bfa0:	4b10      	ldr	r3, [pc, #64]	; (bfe4 <cal_angleYZ+0xde8>)
    bfa2:	449d      	add	sp, r3
    bfa4:	bc0c      	pop	{r2, r3}
    bfa6:	4690      	mov	r8, r2
    bfa8:	4699      	mov	r9, r3
    bfaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bfac:	00000554 	.word	0x00000554
    bfb0:	fffffd64 	.word	0xfffffd64
    bfb4:	00020d99 	.word	0x00020d99
    bfb8:	0000054c 	.word	0x0000054c
    bfbc:	fffffea4 	.word	0xfffffea4
    bfc0:	00025fb8 	.word	0x00025fb8
    bfc4:	0001eb65 	.word	0x0001eb65
    bfc8:	0001b4f5 	.word	0x0001b4f5
    bfcc:	000200d1 	.word	0x000200d1
    bfd0:	000205d1 	.word	0x000205d1
    bfd4:	0001b6b1 	.word	0x0001b6b1
    bfd8:	00020e3d 	.word	0x00020e3d
    bfdc:	200027f8 	.word	0x200027f8
    bfe0:	0000a57d 	.word	0x0000a57d
    bfe4:	0000056c 	.word	0x0000056c

0000bfe8 <cal_apply_cal>:




void cal_apply_cal(float uncalXYZ[3], float calXYZ[3], struct INST_CAL *cal_struct){
    bfe8:	b5b0      	push	{r4, r5, r7, lr}
    bfea:	b086      	sub	sp, #24
    bfec:	af00      	add	r7, sp, #0
    bfee:	60f8      	str	r0, [r7, #12]
    bff0:	60b9      	str	r1, [r7, #8]
    bff2:	607a      	str	r2, [r7, #4]
	uint8_t i;
	
	//  Apply gain and offset calibration
	for (i=0;i<3;i++){
    bff4:	2317      	movs	r3, #23
    bff6:	18fb      	adds	r3, r7, r3
    bff8:	2200      	movs	r2, #0
    bffa:	701a      	strb	r2, [r3, #0]
    bffc:	e039      	b.n	c072 <cal_apply_cal+0x8a>
		//  Subtract Offset
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
    bffe:	2317      	movs	r3, #23
    c000:	18fb      	adds	r3, r7, r3
    c002:	781b      	ldrb	r3, [r3, #0]
    c004:	009b      	lsls	r3, r3, #2
    c006:	68ba      	ldr	r2, [r7, #8]
    c008:	18d4      	adds	r4, r2, r3
    c00a:	2317      	movs	r3, #23
    c00c:	18fb      	adds	r3, r7, r3
    c00e:	781b      	ldrb	r3, [r3, #0]
    c010:	009b      	lsls	r3, r3, #2
    c012:	68fa      	ldr	r2, [r7, #12]
    c014:	18d3      	adds	r3, r2, r3
    c016:	6818      	ldr	r0, [r3, #0]
    c018:	2317      	movs	r3, #23
    c01a:	18fb      	adds	r3, r7, r3
    c01c:	781b      	ldrb	r3, [r3, #0]
    c01e:	687a      	ldr	r2, [r7, #4]
    c020:	009b      	lsls	r3, r3, #2
    c022:	18d3      	adds	r3, r2, r3
    c024:	3304      	adds	r3, #4
    c026:	681a      	ldr	r2, [r3, #0]
    c028:	4b36      	ldr	r3, [pc, #216]	; (c104 <cal_apply_cal+0x11c>)
    c02a:	1c11      	adds	r1, r2, #0
    c02c:	4798      	blx	r3
    c02e:	1c03      	adds	r3, r0, #0
    c030:	6023      	str	r3, [r4, #0]
		//  Divide by Gain
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
    c032:	2317      	movs	r3, #23
    c034:	18fb      	adds	r3, r7, r3
    c036:	781b      	ldrb	r3, [r3, #0]
    c038:	009b      	lsls	r3, r3, #2
    c03a:	68ba      	ldr	r2, [r7, #8]
    c03c:	18d4      	adds	r4, r2, r3
    c03e:	2317      	movs	r3, #23
    c040:	18fb      	adds	r3, r7, r3
    c042:	781b      	ldrb	r3, [r3, #0]
    c044:	009b      	lsls	r3, r3, #2
    c046:	68ba      	ldr	r2, [r7, #8]
    c048:	18d3      	adds	r3, r2, r3
    c04a:	6818      	ldr	r0, [r3, #0]
    c04c:	2317      	movs	r3, #23
    c04e:	18fb      	adds	r3, r7, r3
    c050:	781a      	ldrb	r2, [r3, #0]
    c052:	687b      	ldr	r3, [r7, #4]
    c054:	3204      	adds	r2, #4
    c056:	0092      	lsls	r2, r2, #2
    c058:	58d2      	ldr	r2, [r2, r3]
    c05a:	4b2b      	ldr	r3, [pc, #172]	; (c108 <cal_apply_cal+0x120>)
    c05c:	1c11      	adds	r1, r2, #0
    c05e:	4798      	blx	r3
    c060:	1c03      	adds	r3, r0, #0
    c062:	6023      	str	r3, [r4, #0]
	for (i=0;i<3;i++){
    c064:	2317      	movs	r3, #23
    c066:	18fb      	adds	r3, r7, r3
    c068:	781a      	ldrb	r2, [r3, #0]
    c06a:	2317      	movs	r3, #23
    c06c:	18fb      	adds	r3, r7, r3
    c06e:	3201      	adds	r2, #1
    c070:	701a      	strb	r2, [r3, #0]
    c072:	2317      	movs	r3, #23
    c074:	18fb      	adds	r3, r7, r3
    c076:	781b      	ldrb	r3, [r3, #0]
    c078:	2b02      	cmp	r3, #2
    c07a:	d9c0      	bls.n	bffe <cal_apply_cal+0x16>
	}
	//  Apply axis misalignments
	calXYZ[1] = calXYZ[1]+calXYZ[0]*cal_struct->axmYX;
    c07c:	68bb      	ldr	r3, [r7, #8]
    c07e:	1d1c      	adds	r4, r3, #4
    c080:	68bb      	ldr	r3, [r7, #8]
    c082:	3304      	adds	r3, #4
    c084:	681d      	ldr	r5, [r3, #0]
    c086:	68bb      	ldr	r3, [r7, #8]
    c088:	681a      	ldr	r2, [r3, #0]
    c08a:	687b      	ldr	r3, [r7, #4]
    c08c:	69d9      	ldr	r1, [r3, #28]
    c08e:	4b1f      	ldr	r3, [pc, #124]	; (c10c <cal_apply_cal+0x124>)
    c090:	1c10      	adds	r0, r2, #0
    c092:	4798      	blx	r3
    c094:	1c03      	adds	r3, r0, #0
    c096:	1c1a      	adds	r2, r3, #0
    c098:	4b1d      	ldr	r3, [pc, #116]	; (c110 <cal_apply_cal+0x128>)
    c09a:	1c11      	adds	r1, r2, #0
    c09c:	1c28      	adds	r0, r5, #0
    c09e:	4798      	blx	r3
    c0a0:	1c03      	adds	r3, r0, #0
    c0a2:	6023      	str	r3, [r4, #0]
	calXYZ[2] = calXYZ[2]+calXYZ[1]*cal_struct->axmZY+ calXYZ[0]*cal_struct->axmZX;
    c0a4:	68bb      	ldr	r3, [r7, #8]
    c0a6:	3308      	adds	r3, #8
    c0a8:	001c      	movs	r4, r3
    c0aa:	68bb      	ldr	r3, [r7, #8]
    c0ac:	3308      	adds	r3, #8
    c0ae:	681d      	ldr	r5, [r3, #0]
    c0b0:	68bb      	ldr	r3, [r7, #8]
    c0b2:	3304      	adds	r3, #4
    c0b4:	681a      	ldr	r2, [r3, #0]
    c0b6:	687b      	ldr	r3, [r7, #4]
    c0b8:	6a19      	ldr	r1, [r3, #32]
    c0ba:	4b14      	ldr	r3, [pc, #80]	; (c10c <cal_apply_cal+0x124>)
    c0bc:	1c10      	adds	r0, r2, #0
    c0be:	4798      	blx	r3
    c0c0:	1c03      	adds	r3, r0, #0
    c0c2:	1c1a      	adds	r2, r3, #0
    c0c4:	4b12      	ldr	r3, [pc, #72]	; (c110 <cal_apply_cal+0x128>)
    c0c6:	1c11      	adds	r1, r2, #0
    c0c8:	1c28      	adds	r0, r5, #0
    c0ca:	4798      	blx	r3
    c0cc:	1c03      	adds	r3, r0, #0
    c0ce:	1c1d      	adds	r5, r3, #0
    c0d0:	68bb      	ldr	r3, [r7, #8]
    c0d2:	681a      	ldr	r2, [r3, #0]
    c0d4:	687b      	ldr	r3, [r7, #4]
    c0d6:	6a59      	ldr	r1, [r3, #36]	; 0x24
    c0d8:	4b0c      	ldr	r3, [pc, #48]	; (c10c <cal_apply_cal+0x124>)
    c0da:	1c10      	adds	r0, r2, #0
    c0dc:	4798      	blx	r3
    c0de:	1c03      	adds	r3, r0, #0
    c0e0:	1c1a      	adds	r2, r3, #0
    c0e2:	4b0b      	ldr	r3, [pc, #44]	; (c110 <cal_apply_cal+0x128>)
    c0e4:	1c11      	adds	r1, r2, #0
    c0e6:	1c28      	adds	r0, r5, #0
    c0e8:	4798      	blx	r3
    c0ea:	1c03      	adds	r3, r0, #0
    c0ec:	6023      	str	r3, [r4, #0]


	//  Apply rotation calibration

	//Rotate vector by rotation matrix
	mat_mult_33_31(cal_struct->RotM, calXYZ, calXYZ);
    c0ee:	687b      	ldr	r3, [r7, #4]
    c0f0:	3334      	adds	r3, #52	; 0x34
    c0f2:	68ba      	ldr	r2, [r7, #8]
    c0f4:	68b9      	ldr	r1, [r7, #8]
    c0f6:	0018      	movs	r0, r3
    c0f8:	4b06      	ldr	r3, [pc, #24]	; (c114 <cal_apply_cal+0x12c>)
    c0fa:	4798      	blx	r3
	
}
    c0fc:	46c0      	nop			; (mov r8, r8)
    c0fe:	46bd      	mov	sp, r7
    c100:	b006      	add	sp, #24
    c102:	bdb0      	pop	{r4, r5, r7, pc}
    c104:	0001eda5 	.word	0x0001eda5
    c108:	0001e785 	.word	0x0001e785
    c10c:	0001eb65 	.word	0x0001eb65
    c110:	0001e461 	.word	0x0001e461
    c114:	0000a12d 	.word	0x0000a12d

0000c118 <cal_init_struct>:

void cal_init_struct(struct INST_CAL *cal_struct){
    c118:	b580      	push	{r7, lr}
    c11a:	b084      	sub	sp, #16
    c11c:	af00      	add	r7, sp, #0
    c11e:	6078      	str	r0, [r7, #4]
	uint8_t i, j;
	
	for (i=0;i<3;i++){
    c120:	230f      	movs	r3, #15
    c122:	18fb      	adds	r3, r7, r3
    c124:	2200      	movs	r2, #0
    c126:	701a      	strb	r2, [r3, #0]
    c128:	e04c      	b.n	c1c4 <cal_init_struct+0xac>
		cal_struct->gain[i] = 1;
    c12a:	230f      	movs	r3, #15
    c12c:	18fb      	adds	r3, r7, r3
    c12e:	781a      	ldrb	r2, [r3, #0]
    c130:	687b      	ldr	r3, [r7, #4]
    c132:	3204      	adds	r2, #4
    c134:	0092      	lsls	r2, r2, #2
    c136:	21fe      	movs	r1, #254	; 0xfe
    c138:	0589      	lsls	r1, r1, #22
    c13a:	50d1      	str	r1, [r2, r3]
		cal_struct->offset[i] = 0;
    c13c:	230f      	movs	r3, #15
    c13e:	18fb      	adds	r3, r7, r3
    c140:	781b      	ldrb	r3, [r3, #0]
    c142:	687a      	ldr	r2, [r7, #4]
    c144:	009b      	lsls	r3, r3, #2
    c146:	18d3      	adds	r3, r2, r3
    c148:	3304      	adds	r3, #4
    c14a:	2200      	movs	r2, #0
    c14c:	601a      	str	r2, [r3, #0]
		
		for (j=0;j<3;j++){
    c14e:	230e      	movs	r3, #14
    c150:	18fb      	adds	r3, r7, r3
    c152:	2200      	movs	r2, #0
    c154:	701a      	strb	r2, [r3, #0]
    c156:	e017      	b.n	c188 <cal_init_struct+0x70>
			cal_struct->RotM[i][j] = 0;//Clear row
    c158:	230f      	movs	r3, #15
    c15a:	18fb      	adds	r3, r7, r3
    c15c:	781a      	ldrb	r2, [r3, #0]
    c15e:	230e      	movs	r3, #14
    c160:	18fb      	adds	r3, r7, r3
    c162:	7818      	ldrb	r0, [r3, #0]
    c164:	6879      	ldr	r1, [r7, #4]
    c166:	0013      	movs	r3, r2
    c168:	005b      	lsls	r3, r3, #1
    c16a:	189b      	adds	r3, r3, r2
    c16c:	181b      	adds	r3, r3, r0
    c16e:	330c      	adds	r3, #12
    c170:	009b      	lsls	r3, r3, #2
    c172:	18cb      	adds	r3, r1, r3
    c174:	3304      	adds	r3, #4
    c176:	2200      	movs	r2, #0
    c178:	601a      	str	r2, [r3, #0]
		for (j=0;j<3;j++){
    c17a:	230e      	movs	r3, #14
    c17c:	18fb      	adds	r3, r7, r3
    c17e:	781a      	ldrb	r2, [r3, #0]
    c180:	230e      	movs	r3, #14
    c182:	18fb      	adds	r3, r7, r3
    c184:	3201      	adds	r2, #1
    c186:	701a      	strb	r2, [r3, #0]
    c188:	230e      	movs	r3, #14
    c18a:	18fb      	adds	r3, r7, r3
    c18c:	781b      	ldrb	r3, [r3, #0]
    c18e:	2b02      	cmp	r3, #2
    c190:	d9e2      	bls.n	c158 <cal_init_struct+0x40>
		}
		cal_struct->RotM[i][i] = 1;// Create identity matrix
    c192:	230f      	movs	r3, #15
    c194:	18fb      	adds	r3, r7, r3
    c196:	781a      	ldrb	r2, [r3, #0]
    c198:	230f      	movs	r3, #15
    c19a:	18fb      	adds	r3, r7, r3
    c19c:	7818      	ldrb	r0, [r3, #0]
    c19e:	6879      	ldr	r1, [r7, #4]
    c1a0:	0013      	movs	r3, r2
    c1a2:	005b      	lsls	r3, r3, #1
    c1a4:	189b      	adds	r3, r3, r2
    c1a6:	181b      	adds	r3, r3, r0
    c1a8:	330c      	adds	r3, #12
    c1aa:	009b      	lsls	r3, r3, #2
    c1ac:	18cb      	adds	r3, r1, r3
    c1ae:	3304      	adds	r3, #4
    c1b0:	22fe      	movs	r2, #254	; 0xfe
    c1b2:	0592      	lsls	r2, r2, #22
    c1b4:	601a      	str	r2, [r3, #0]
	for (i=0;i<3;i++){
    c1b6:	230f      	movs	r3, #15
    c1b8:	18fb      	adds	r3, r7, r3
    c1ba:	781a      	ldrb	r2, [r3, #0]
    c1bc:	230f      	movs	r3, #15
    c1be:	18fb      	adds	r3, r7, r3
    c1c0:	3201      	adds	r2, #1
    c1c2:	701a      	strb	r2, [r3, #0]
    c1c4:	230f      	movs	r3, #15
    c1c6:	18fb      	adds	r3, r7, r3
    c1c8:	781b      	ldrb	r3, [r3, #0]
    c1ca:	2b02      	cmp	r3, #2
    c1cc:	d9ad      	bls.n	c12a <cal_init_struct+0x12>
		
	}
	cal_struct->axmYX = 0;
    c1ce:	687b      	ldr	r3, [r7, #4]
    c1d0:	2200      	movs	r2, #0
    c1d2:	61da      	str	r2, [r3, #28]
	cal_struct->axmZY = 0;
    c1d4:	687b      	ldr	r3, [r7, #4]
    c1d6:	2200      	movs	r2, #0
    c1d8:	621a      	str	r2, [r3, #32]
	cal_struct->axmZX = 0;
    c1da:	687b      	ldr	r3, [r7, #4]
    c1dc:	2200      	movs	r2, #0
    c1de:	625a      	str	r2, [r3, #36]	; 0x24
	
	cal_struct->thetaX = 0;
    c1e0:	687b      	ldr	r3, [r7, #4]
    c1e2:	2200      	movs	r2, #0
    c1e4:	629a      	str	r2, [r3, #40]	; 0x28
	cal_struct->thetaY = 0;
    c1e6:	687b      	ldr	r3, [r7, #4]
    c1e8:	2200      	movs	r2, #0
    c1ea:	62da      	str	r2, [r3, #44]	; 0x2c
	cal_struct->thetaZ = 0;
    c1ec:	687b      	ldr	r3, [r7, #4]
    c1ee:	2200      	movs	r2, #0
    c1f0:	631a      	str	r2, [r3, #48]	; 0x30
	cal_struct->angle_stdev = 1;
    c1f2:	687b      	ldr	r3, [r7, #4]
    c1f4:	22fe      	movs	r2, #254	; 0xfe
    c1f6:	0592      	lsls	r2, r2, #22
    c1f8:	65da      	str	r2, [r3, #92]	; 0x5c
	
	cal_struct->dist_offset = 0;
    c1fa:	687b      	ldr	r3, [r7, #4]
    c1fc:	2200      	movs	r2, #0
    c1fe:	659a      	str	r2, [r3, #88]	; 0x58
	
	cal_struct->Cal_Initialized_Key = 0xB1;//  Indicator that structure has been initialized
    c200:	687b      	ldr	r3, [r7, #4]
    c202:	22b1      	movs	r2, #177	; 0xb1
    c204:	701a      	strb	r2, [r3, #0]
	
}
    c206:	46c0      	nop			; (mov r8, r8)
    c208:	46bd      	mov	sp, r7
    c20a:	b004      	add	sp, #16
    c20c:	bd80      	pop	{r7, pc}
	...

0000c210 <gen_RotM>:

void gen_RotM(struct INST_CAL *cal_struct){
    c210:	b5f0      	push	{r4, r5, r6, r7, lr}
    c212:	b08b      	sub	sp, #44	; 0x2c
    c214:	af00      	add	r7, sp, #0
    c216:	6178      	str	r0, [r7, #20]
	float tX, tY, tZ;
	
	tX = cal_struct->thetaX*deg2rad;
    c218:	697b      	ldr	r3, [r7, #20]
    c21a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c21c:	4bcb      	ldr	r3, [pc, #812]	; (c54c <gen_RotM+0x33c>)
    c21e:	6819      	ldr	r1, [r3, #0]
    c220:	4bcb      	ldr	r3, [pc, #812]	; (c550 <gen_RotM+0x340>)
    c222:	1c10      	adds	r0, r2, #0
    c224:	4798      	blx	r3
    c226:	1c03      	adds	r3, r0, #0
    c228:	627b      	str	r3, [r7, #36]	; 0x24
	tY = cal_struct->thetaY*deg2rad;
    c22a:	697b      	ldr	r3, [r7, #20]
    c22c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c22e:	4bc7      	ldr	r3, [pc, #796]	; (c54c <gen_RotM+0x33c>)
    c230:	6819      	ldr	r1, [r3, #0]
    c232:	4bc7      	ldr	r3, [pc, #796]	; (c550 <gen_RotM+0x340>)
    c234:	1c10      	adds	r0, r2, #0
    c236:	4798      	blx	r3
    c238:	1c03      	adds	r3, r0, #0
    c23a:	623b      	str	r3, [r7, #32]
	tZ = cal_struct->thetaZ*deg2rad;
    c23c:	697b      	ldr	r3, [r7, #20]
    c23e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    c240:	4bc2      	ldr	r3, [pc, #776]	; (c54c <gen_RotM+0x33c>)
    c242:	6819      	ldr	r1, [r3, #0]
    c244:	4bc2      	ldr	r3, [pc, #776]	; (c550 <gen_RotM+0x340>)
    c246:	1c10      	adds	r0, r2, #0
    c248:	4798      	blx	r3
    c24a:	1c03      	adds	r3, r0, #0
    c24c:	61fb      	str	r3, [r7, #28]
	
	cal_struct->RotM[0][0] = cos(tY)*cos(tZ);
    c24e:	4bc1      	ldr	r3, [pc, #772]	; (c554 <gen_RotM+0x344>)
    c250:	6a38      	ldr	r0, [r7, #32]
    c252:	4798      	blx	r3
    c254:	0002      	movs	r2, r0
    c256:	000b      	movs	r3, r1
    c258:	0010      	movs	r0, r2
    c25a:	0019      	movs	r1, r3
    c25c:	4bbe      	ldr	r3, [pc, #760]	; (c558 <gen_RotM+0x348>)
    c25e:	4798      	blx	r3
    c260:	60b8      	str	r0, [r7, #8]
    c262:	60f9      	str	r1, [r7, #12]
    c264:	4bbb      	ldr	r3, [pc, #748]	; (c554 <gen_RotM+0x344>)
    c266:	69f8      	ldr	r0, [r7, #28]
    c268:	4798      	blx	r3
    c26a:	0002      	movs	r2, r0
    c26c:	000b      	movs	r3, r1
    c26e:	0010      	movs	r0, r2
    c270:	0019      	movs	r1, r3
    c272:	4bb9      	ldr	r3, [pc, #740]	; (c558 <gen_RotM+0x348>)
    c274:	4798      	blx	r3
    c276:	0002      	movs	r2, r0
    c278:	000b      	movs	r3, r1
    c27a:	4eb8      	ldr	r6, [pc, #736]	; (c55c <gen_RotM+0x34c>)
    c27c:	68b8      	ldr	r0, [r7, #8]
    c27e:	68f9      	ldr	r1, [r7, #12]
    c280:	47b0      	blx	r6
    c282:	0002      	movs	r2, r0
    c284:	000b      	movs	r3, r1
    c286:	0011      	movs	r1, r2
    c288:	001a      	movs	r2, r3
    c28a:	4bb5      	ldr	r3, [pc, #724]	; (c560 <gen_RotM+0x350>)
    c28c:	0008      	movs	r0, r1
    c28e:	0011      	movs	r1, r2
    c290:	4798      	blx	r3
    c292:	1c02      	adds	r2, r0, #0
    c294:	697b      	ldr	r3, [r7, #20]
    c296:	635a      	str	r2, [r3, #52]	; 0x34
	cal_struct->RotM[0][1] = -sin(tZ);
    c298:	4bae      	ldr	r3, [pc, #696]	; (c554 <gen_RotM+0x344>)
    c29a:	69f8      	ldr	r0, [r7, #28]
    c29c:	4798      	blx	r3
    c29e:	0002      	movs	r2, r0
    c2a0:	000b      	movs	r3, r1
    c2a2:	0010      	movs	r0, r2
    c2a4:	0019      	movs	r1, r3
    c2a6:	4baf      	ldr	r3, [pc, #700]	; (c564 <gen_RotM+0x354>)
    c2a8:	4798      	blx	r3
    c2aa:	000a      	movs	r2, r1
    c2ac:	0001      	movs	r1, r0
    c2ae:	4bac      	ldr	r3, [pc, #688]	; (c560 <gen_RotM+0x350>)
    c2b0:	0008      	movs	r0, r1
    c2b2:	0011      	movs	r1, r2
    c2b4:	4798      	blx	r3
    c2b6:	1c02      	adds	r2, r0, #0
    c2b8:	2380      	movs	r3, #128	; 0x80
    c2ba:	061b      	lsls	r3, r3, #24
    c2bc:	405a      	eors	r2, r3
    c2be:	697b      	ldr	r3, [r7, #20]
    c2c0:	639a      	str	r2, [r3, #56]	; 0x38
	cal_struct->RotM[0][2] = sin(tY);
    c2c2:	4ba4      	ldr	r3, [pc, #656]	; (c554 <gen_RotM+0x344>)
    c2c4:	6a38      	ldr	r0, [r7, #32]
    c2c6:	4798      	blx	r3
    c2c8:	0002      	movs	r2, r0
    c2ca:	000b      	movs	r3, r1
    c2cc:	0010      	movs	r0, r2
    c2ce:	0019      	movs	r1, r3
    c2d0:	4ba4      	ldr	r3, [pc, #656]	; (c564 <gen_RotM+0x354>)
    c2d2:	4798      	blx	r3
    c2d4:	000a      	movs	r2, r1
    c2d6:	0001      	movs	r1, r0
    c2d8:	4ba1      	ldr	r3, [pc, #644]	; (c560 <gen_RotM+0x350>)
    c2da:	0008      	movs	r0, r1
    c2dc:	0011      	movs	r1, r2
    c2de:	4798      	blx	r3
    c2e0:	1c02      	adds	r2, r0, #0
    c2e2:	697b      	ldr	r3, [r7, #20]
    c2e4:	63da      	str	r2, [r3, #60]	; 0x3c
	cal_struct->RotM[1][0] = (cos(tX)*sin(tZ))+(sin(tX)*sin(tY));
    c2e6:	4b9b      	ldr	r3, [pc, #620]	; (c554 <gen_RotM+0x344>)
    c2e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
    c2ea:	4798      	blx	r3
    c2ec:	0002      	movs	r2, r0
    c2ee:	000b      	movs	r3, r1
    c2f0:	0010      	movs	r0, r2
    c2f2:	0019      	movs	r1, r3
    c2f4:	4b98      	ldr	r3, [pc, #608]	; (c558 <gen_RotM+0x348>)
    c2f6:	4798      	blx	r3
    c2f8:	60b8      	str	r0, [r7, #8]
    c2fa:	60f9      	str	r1, [r7, #12]
    c2fc:	4b95      	ldr	r3, [pc, #596]	; (c554 <gen_RotM+0x344>)
    c2fe:	69f8      	ldr	r0, [r7, #28]
    c300:	4798      	blx	r3
    c302:	0002      	movs	r2, r0
    c304:	000b      	movs	r3, r1
    c306:	0010      	movs	r0, r2
    c308:	0019      	movs	r1, r3
    c30a:	4b96      	ldr	r3, [pc, #600]	; (c564 <gen_RotM+0x354>)
    c30c:	4798      	blx	r3
    c30e:	0002      	movs	r2, r0
    c310:	000b      	movs	r3, r1
    c312:	4e92      	ldr	r6, [pc, #584]	; (c55c <gen_RotM+0x34c>)
    c314:	68b8      	ldr	r0, [r7, #8]
    c316:	68f9      	ldr	r1, [r7, #12]
    c318:	47b0      	blx	r6
    c31a:	0002      	movs	r2, r0
    c31c:	000b      	movs	r3, r1
    c31e:	60ba      	str	r2, [r7, #8]
    c320:	60fb      	str	r3, [r7, #12]
    c322:	4b8c      	ldr	r3, [pc, #560]	; (c554 <gen_RotM+0x344>)
    c324:	6a78      	ldr	r0, [r7, #36]	; 0x24
    c326:	4798      	blx	r3
    c328:	0002      	movs	r2, r0
    c32a:	000b      	movs	r3, r1
    c32c:	0010      	movs	r0, r2
    c32e:	0019      	movs	r1, r3
    c330:	4b8c      	ldr	r3, [pc, #560]	; (c564 <gen_RotM+0x354>)
    c332:	4798      	blx	r3
    c334:	6038      	str	r0, [r7, #0]
    c336:	6079      	str	r1, [r7, #4]
    c338:	4b86      	ldr	r3, [pc, #536]	; (c554 <gen_RotM+0x344>)
    c33a:	6a38      	ldr	r0, [r7, #32]
    c33c:	4798      	blx	r3
    c33e:	0002      	movs	r2, r0
    c340:	000b      	movs	r3, r1
    c342:	0010      	movs	r0, r2
    c344:	0019      	movs	r1, r3
    c346:	4b87      	ldr	r3, [pc, #540]	; (c564 <gen_RotM+0x354>)
    c348:	4798      	blx	r3
    c34a:	0002      	movs	r2, r0
    c34c:	000b      	movs	r3, r1
    c34e:	4e83      	ldr	r6, [pc, #524]	; (c55c <gen_RotM+0x34c>)
    c350:	6838      	ldr	r0, [r7, #0]
    c352:	6879      	ldr	r1, [r7, #4]
    c354:	47b0      	blx	r6
    c356:	0002      	movs	r2, r0
    c358:	000b      	movs	r3, r1
    c35a:	4e83      	ldr	r6, [pc, #524]	; (c568 <gen_RotM+0x358>)
    c35c:	68b8      	ldr	r0, [r7, #8]
    c35e:	68f9      	ldr	r1, [r7, #12]
    c360:	47b0      	blx	r6
    c362:	0002      	movs	r2, r0
    c364:	000b      	movs	r3, r1
    c366:	0011      	movs	r1, r2
    c368:	001a      	movs	r2, r3
    c36a:	4b7d      	ldr	r3, [pc, #500]	; (c560 <gen_RotM+0x350>)
    c36c:	0008      	movs	r0, r1
    c36e:	0011      	movs	r1, r2
    c370:	4798      	blx	r3
    c372:	1c02      	adds	r2, r0, #0
    c374:	697b      	ldr	r3, [r7, #20]
    c376:	641a      	str	r2, [r3, #64]	; 0x40
	cal_struct->RotM[1][1] = cos(tX)*cos(tZ);
    c378:	4b76      	ldr	r3, [pc, #472]	; (c554 <gen_RotM+0x344>)
    c37a:	6a78      	ldr	r0, [r7, #36]	; 0x24
    c37c:	4798      	blx	r3
    c37e:	0002      	movs	r2, r0
    c380:	000b      	movs	r3, r1
    c382:	0010      	movs	r0, r2
    c384:	0019      	movs	r1, r3
    c386:	4b74      	ldr	r3, [pc, #464]	; (c558 <gen_RotM+0x348>)
    c388:	4798      	blx	r3
    c38a:	60b8      	str	r0, [r7, #8]
    c38c:	60f9      	str	r1, [r7, #12]
    c38e:	4b71      	ldr	r3, [pc, #452]	; (c554 <gen_RotM+0x344>)
    c390:	69f8      	ldr	r0, [r7, #28]
    c392:	4798      	blx	r3
    c394:	0002      	movs	r2, r0
    c396:	000b      	movs	r3, r1
    c398:	0010      	movs	r0, r2
    c39a:	0019      	movs	r1, r3
    c39c:	4b6e      	ldr	r3, [pc, #440]	; (c558 <gen_RotM+0x348>)
    c39e:	4798      	blx	r3
    c3a0:	0002      	movs	r2, r0
    c3a2:	000b      	movs	r3, r1
    c3a4:	4e6d      	ldr	r6, [pc, #436]	; (c55c <gen_RotM+0x34c>)
    c3a6:	68b8      	ldr	r0, [r7, #8]
    c3a8:	68f9      	ldr	r1, [r7, #12]
    c3aa:	47b0      	blx	r6
    c3ac:	0002      	movs	r2, r0
    c3ae:	000b      	movs	r3, r1
    c3b0:	0011      	movs	r1, r2
    c3b2:	001a      	movs	r2, r3
    c3b4:	4b6a      	ldr	r3, [pc, #424]	; (c560 <gen_RotM+0x350>)
    c3b6:	0008      	movs	r0, r1
    c3b8:	0011      	movs	r1, r2
    c3ba:	4798      	blx	r3
    c3bc:	1c02      	adds	r2, r0, #0
    c3be:	697b      	ldr	r3, [r7, #20]
    c3c0:	645a      	str	r2, [r3, #68]	; 0x44
	cal_struct->RotM[1][2] = -sin(tX)*cos(tY);
    c3c2:	4b64      	ldr	r3, [pc, #400]	; (c554 <gen_RotM+0x344>)
    c3c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
    c3c6:	4798      	blx	r3
    c3c8:	0002      	movs	r2, r0
    c3ca:	000b      	movs	r3, r1
    c3cc:	0010      	movs	r0, r2
    c3ce:	0019      	movs	r1, r3
    c3d0:	4b64      	ldr	r3, [pc, #400]	; (c564 <gen_RotM+0x354>)
    c3d2:	4798      	blx	r3
    c3d4:	0002      	movs	r2, r0
    c3d6:	000b      	movs	r3, r1
    c3d8:	0011      	movs	r1, r2
    c3da:	000c      	movs	r4, r1
    c3dc:	2180      	movs	r1, #128	; 0x80
    c3de:	0609      	lsls	r1, r1, #24
    c3e0:	4059      	eors	r1, r3
    c3e2:	000d      	movs	r5, r1
    c3e4:	4b5b      	ldr	r3, [pc, #364]	; (c554 <gen_RotM+0x344>)
    c3e6:	6a38      	ldr	r0, [r7, #32]
    c3e8:	4798      	blx	r3
    c3ea:	0002      	movs	r2, r0
    c3ec:	000b      	movs	r3, r1
    c3ee:	0010      	movs	r0, r2
    c3f0:	0019      	movs	r1, r3
    c3f2:	4b59      	ldr	r3, [pc, #356]	; (c558 <gen_RotM+0x348>)
    c3f4:	4798      	blx	r3
    c3f6:	0002      	movs	r2, r0
    c3f8:	000b      	movs	r3, r1
    c3fa:	4e58      	ldr	r6, [pc, #352]	; (c55c <gen_RotM+0x34c>)
    c3fc:	0020      	movs	r0, r4
    c3fe:	0029      	movs	r1, r5
    c400:	47b0      	blx	r6
    c402:	0003      	movs	r3, r0
    c404:	000c      	movs	r4, r1
    c406:	0019      	movs	r1, r3
    c408:	0022      	movs	r2, r4
    c40a:	4b55      	ldr	r3, [pc, #340]	; (c560 <gen_RotM+0x350>)
    c40c:	0008      	movs	r0, r1
    c40e:	0011      	movs	r1, r2
    c410:	4798      	blx	r3
    c412:	1c02      	adds	r2, r0, #0
    c414:	697b      	ldr	r3, [r7, #20]
    c416:	649a      	str	r2, [r3, #72]	; 0x48
	cal_struct->RotM[2][0]  = (sin(tX)*sin(tZ))-(cos(tX)*sin(tY));
    c418:	4b4e      	ldr	r3, [pc, #312]	; (c554 <gen_RotM+0x344>)
    c41a:	6a78      	ldr	r0, [r7, #36]	; 0x24
    c41c:	4798      	blx	r3
    c41e:	0003      	movs	r3, r0
    c420:	000c      	movs	r4, r1
    c422:	0018      	movs	r0, r3
    c424:	0021      	movs	r1, r4
    c426:	4b4f      	ldr	r3, [pc, #316]	; (c564 <gen_RotM+0x354>)
    c428:	4798      	blx	r3
    c42a:	0005      	movs	r5, r0
    c42c:	000e      	movs	r6, r1
    c42e:	4b49      	ldr	r3, [pc, #292]	; (c554 <gen_RotM+0x344>)
    c430:	69f8      	ldr	r0, [r7, #28]
    c432:	4798      	blx	r3
    c434:	0003      	movs	r3, r0
    c436:	000c      	movs	r4, r1
    c438:	0018      	movs	r0, r3
    c43a:	0021      	movs	r1, r4
    c43c:	4b49      	ldr	r3, [pc, #292]	; (c564 <gen_RotM+0x354>)
    c43e:	4798      	blx	r3
    c440:	0002      	movs	r2, r0
    c442:	000b      	movs	r3, r1
    c444:	4c45      	ldr	r4, [pc, #276]	; (c55c <gen_RotM+0x34c>)
    c446:	0028      	movs	r0, r5
    c448:	0031      	movs	r1, r6
    c44a:	47a0      	blx	r4
    c44c:	0003      	movs	r3, r0
    c44e:	000c      	movs	r4, r1
    c450:	001d      	movs	r5, r3
    c452:	0026      	movs	r6, r4
    c454:	4b3f      	ldr	r3, [pc, #252]	; (c554 <gen_RotM+0x344>)
    c456:	6a78      	ldr	r0, [r7, #36]	; 0x24
    c458:	4798      	blx	r3
    c45a:	0003      	movs	r3, r0
    c45c:	000c      	movs	r4, r1
    c45e:	0018      	movs	r0, r3
    c460:	0021      	movs	r1, r4
    c462:	4b3d      	ldr	r3, [pc, #244]	; (c558 <gen_RotM+0x348>)
    c464:	4798      	blx	r3
    c466:	60b8      	str	r0, [r7, #8]
    c468:	60f9      	str	r1, [r7, #12]
    c46a:	4b3a      	ldr	r3, [pc, #232]	; (c554 <gen_RotM+0x344>)
    c46c:	6a38      	ldr	r0, [r7, #32]
    c46e:	4798      	blx	r3
    c470:	0003      	movs	r3, r0
    c472:	000c      	movs	r4, r1
    c474:	0018      	movs	r0, r3
    c476:	0021      	movs	r1, r4
    c478:	4b3a      	ldr	r3, [pc, #232]	; (c564 <gen_RotM+0x354>)
    c47a:	4798      	blx	r3
    c47c:	0002      	movs	r2, r0
    c47e:	000b      	movs	r3, r1
    c480:	4c36      	ldr	r4, [pc, #216]	; (c55c <gen_RotM+0x34c>)
    c482:	68b8      	ldr	r0, [r7, #8]
    c484:	68f9      	ldr	r1, [r7, #12]
    c486:	47a0      	blx	r4
    c488:	0003      	movs	r3, r0
    c48a:	000c      	movs	r4, r1
    c48c:	001a      	movs	r2, r3
    c48e:	0023      	movs	r3, r4
    c490:	4c36      	ldr	r4, [pc, #216]	; (c56c <gen_RotM+0x35c>)
    c492:	0028      	movs	r0, r5
    c494:	0031      	movs	r1, r6
    c496:	47a0      	blx	r4
    c498:	0003      	movs	r3, r0
    c49a:	000c      	movs	r4, r1
    c49c:	0019      	movs	r1, r3
    c49e:	0022      	movs	r2, r4
    c4a0:	4b2f      	ldr	r3, [pc, #188]	; (c560 <gen_RotM+0x350>)
    c4a2:	0008      	movs	r0, r1
    c4a4:	0011      	movs	r1, r2
    c4a6:	4798      	blx	r3
    c4a8:	1c02      	adds	r2, r0, #0
    c4aa:	697b      	ldr	r3, [r7, #20]
    c4ac:	64da      	str	r2, [r3, #76]	; 0x4c
	cal_struct->RotM[2][1] = sin(tX)*cos(tZ);
    c4ae:	4b29      	ldr	r3, [pc, #164]	; (c554 <gen_RotM+0x344>)
    c4b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
    c4b2:	4798      	blx	r3
    c4b4:	0003      	movs	r3, r0
    c4b6:	000c      	movs	r4, r1
    c4b8:	0018      	movs	r0, r3
    c4ba:	0021      	movs	r1, r4
    c4bc:	4b29      	ldr	r3, [pc, #164]	; (c564 <gen_RotM+0x354>)
    c4be:	4798      	blx	r3
    c4c0:	0005      	movs	r5, r0
    c4c2:	000e      	movs	r6, r1
    c4c4:	4b23      	ldr	r3, [pc, #140]	; (c554 <gen_RotM+0x344>)
    c4c6:	69f8      	ldr	r0, [r7, #28]
    c4c8:	4798      	blx	r3
    c4ca:	0003      	movs	r3, r0
    c4cc:	000c      	movs	r4, r1
    c4ce:	0018      	movs	r0, r3
    c4d0:	0021      	movs	r1, r4
    c4d2:	4b21      	ldr	r3, [pc, #132]	; (c558 <gen_RotM+0x348>)
    c4d4:	4798      	blx	r3
    c4d6:	0002      	movs	r2, r0
    c4d8:	000b      	movs	r3, r1
    c4da:	4c20      	ldr	r4, [pc, #128]	; (c55c <gen_RotM+0x34c>)
    c4dc:	0028      	movs	r0, r5
    c4de:	0031      	movs	r1, r6
    c4e0:	47a0      	blx	r4
    c4e2:	0003      	movs	r3, r0
    c4e4:	000c      	movs	r4, r1
    c4e6:	0019      	movs	r1, r3
    c4e8:	0022      	movs	r2, r4
    c4ea:	4b1d      	ldr	r3, [pc, #116]	; (c560 <gen_RotM+0x350>)
    c4ec:	0008      	movs	r0, r1
    c4ee:	0011      	movs	r1, r2
    c4f0:	4798      	blx	r3
    c4f2:	1c02      	adds	r2, r0, #0
    c4f4:	697b      	ldr	r3, [r7, #20]
    c4f6:	651a      	str	r2, [r3, #80]	; 0x50
	cal_struct->RotM[2][2] = cos(tX)*cos(tY);
    c4f8:	4b16      	ldr	r3, [pc, #88]	; (c554 <gen_RotM+0x344>)
    c4fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
    c4fc:	4798      	blx	r3
    c4fe:	0003      	movs	r3, r0
    c500:	000c      	movs	r4, r1
    c502:	0018      	movs	r0, r3
    c504:	0021      	movs	r1, r4
    c506:	4b14      	ldr	r3, [pc, #80]	; (c558 <gen_RotM+0x348>)
    c508:	4798      	blx	r3
    c50a:	0005      	movs	r5, r0
    c50c:	000e      	movs	r6, r1
    c50e:	4b11      	ldr	r3, [pc, #68]	; (c554 <gen_RotM+0x344>)
    c510:	6a38      	ldr	r0, [r7, #32]
    c512:	4798      	blx	r3
    c514:	0003      	movs	r3, r0
    c516:	000c      	movs	r4, r1
    c518:	0018      	movs	r0, r3
    c51a:	0021      	movs	r1, r4
    c51c:	4b0e      	ldr	r3, [pc, #56]	; (c558 <gen_RotM+0x348>)
    c51e:	4798      	blx	r3
    c520:	0002      	movs	r2, r0
    c522:	000b      	movs	r3, r1
    c524:	4c0d      	ldr	r4, [pc, #52]	; (c55c <gen_RotM+0x34c>)
    c526:	0028      	movs	r0, r5
    c528:	0031      	movs	r1, r6
    c52a:	47a0      	blx	r4
    c52c:	0003      	movs	r3, r0
    c52e:	000c      	movs	r4, r1
    c530:	0019      	movs	r1, r3
    c532:	0022      	movs	r2, r4
    c534:	4b0a      	ldr	r3, [pc, #40]	; (c560 <gen_RotM+0x350>)
    c536:	0008      	movs	r0, r1
    c538:	0011      	movs	r1, r2
    c53a:	4798      	blx	r3
    c53c:	1c02      	adds	r2, r0, #0
    c53e:	697b      	ldr	r3, [r7, #20]
    c540:	655a      	str	r2, [r3, #84]	; 0x54
	
}
    c542:	46c0      	nop			; (mov r8, r8)
    c544:	46bd      	mov	sp, r7
    c546:	b00b      	add	sp, #44	; 0x2c
    c548:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c54a:	46c0      	nop			; (mov r8, r8)
    c54c:	00025fb8 	.word	0x00025fb8
    c550:	0001eb65 	.word	0x0001eb65
    c554:	00020d99 	.word	0x00020d99
    c558:	0001b4f5 	.word	0x0001b4f5
    c55c:	000200d1 	.word	0x000200d1
    c560:	00020e3d 	.word	0x00020e3d
    c564:	0001b6b1 	.word	0x0001b6b1
    c568:	0001f249 	.word	0x0001f249
    c56c:	000205d1 	.word	0x000205d1

0000c570 <cal_gain_off>:





void cal_gain_off(float XYZ[][3], struct INST_CAL *cal_struct){
    c570:	b5f0      	push	{r4, r5, r6, r7, lr}
    c572:	46ce      	mov	lr, r9
    c574:	4647      	mov	r7, r8
    c576:	b580      	push	{r7, lr}
    c578:	4cb9      	ldr	r4, [pc, #740]	; (c860 <cal_gain_off+0x2f0>)
    c57a:	44a5      	add	sp, r4
    c57c:	af00      	add	r7, sp, #0
    c57e:	60f8      	str	r0, [r7, #12]
    c580:	60b9      	str	r1, [r7, #8]
	uint8_t i,j,k;
	

	
	
	for (i=0;i<n_points;i++){
    c582:	4bb8      	ldr	r3, [pc, #736]	; (c864 <cal_gain_off+0x2f4>)
    c584:	2208      	movs	r2, #8
    c586:	4694      	mov	ip, r2
    c588:	44bc      	add	ip, r7
    c58a:	4463      	add	r3, ip
    c58c:	2200      	movs	r2, #0
    c58e:	701a      	strb	r2, [r3, #0]
    c590:	e127      	b.n	c7e2 <cal_gain_off+0x272>
		D[i][0] = XYZ[i][0]*XYZ[i][0];
    c592:	4bb4      	ldr	r3, [pc, #720]	; (c864 <cal_gain_off+0x2f4>)
    c594:	2208      	movs	r2, #8
    c596:	4694      	mov	ip, r2
    c598:	44bc      	add	ip, r7
    c59a:	4463      	add	r3, ip
    c59c:	781c      	ldrb	r4, [r3, #0]
    c59e:	4bb1      	ldr	r3, [pc, #708]	; (c864 <cal_gain_off+0x2f4>)
    c5a0:	2208      	movs	r2, #8
    c5a2:	4694      	mov	ip, r2
    c5a4:	44bc      	add	ip, r7
    c5a6:	4463      	add	r3, ip
    c5a8:	781a      	ldrb	r2, [r3, #0]
    c5aa:	0013      	movs	r3, r2
    c5ac:	005b      	lsls	r3, r3, #1
    c5ae:	189b      	adds	r3, r3, r2
    c5b0:	009b      	lsls	r3, r3, #2
    c5b2:	001a      	movs	r2, r3
    c5b4:	68fb      	ldr	r3, [r7, #12]
    c5b6:	189b      	adds	r3, r3, r2
    c5b8:	6818      	ldr	r0, [r3, #0]
    c5ba:	4baa      	ldr	r3, [pc, #680]	; (c864 <cal_gain_off+0x2f4>)
    c5bc:	2208      	movs	r2, #8
    c5be:	4694      	mov	ip, r2
    c5c0:	44bc      	add	ip, r7
    c5c2:	4463      	add	r3, ip
    c5c4:	781a      	ldrb	r2, [r3, #0]
    c5c6:	0013      	movs	r3, r2
    c5c8:	005b      	lsls	r3, r3, #1
    c5ca:	189b      	adds	r3, r3, r2
    c5cc:	009b      	lsls	r3, r3, #2
    c5ce:	001a      	movs	r2, r3
    c5d0:	68fb      	ldr	r3, [r7, #12]
    c5d2:	189b      	adds	r3, r3, r2
    c5d4:	681a      	ldr	r2, [r3, #0]
    c5d6:	4ba4      	ldr	r3, [pc, #656]	; (c868 <cal_gain_off+0x2f8>)
    c5d8:	1c11      	adds	r1, r2, #0
    c5da:	4798      	blx	r3
    c5dc:	1c03      	adds	r3, r0, #0
    c5de:	1c19      	adds	r1, r3, #0
    c5e0:	4ba2      	ldr	r3, [pc, #648]	; (c86c <cal_gain_off+0x2fc>)
    c5e2:	2285      	movs	r2, #133	; 0x85
    c5e4:	0112      	lsls	r2, r2, #4
    c5e6:	2008      	movs	r0, #8
    c5e8:	4684      	mov	ip, r0
    c5ea:	44bc      	add	ip, r7
    c5ec:	4462      	add	r2, ip
    c5ee:	18d2      	adds	r2, r2, r3
    c5f0:	0023      	movs	r3, r4
    c5f2:	005b      	lsls	r3, r3, #1
    c5f4:	191b      	adds	r3, r3, r4
    c5f6:	00db      	lsls	r3, r3, #3
    c5f8:	5099      	str	r1, [r3, r2]
		D[i][1] = XYZ[i][1]*XYZ[i][1];
    c5fa:	4b9a      	ldr	r3, [pc, #616]	; (c864 <cal_gain_off+0x2f4>)
    c5fc:	2208      	movs	r2, #8
    c5fe:	4694      	mov	ip, r2
    c600:	44bc      	add	ip, r7
    c602:	4463      	add	r3, ip
    c604:	781c      	ldrb	r4, [r3, #0]
    c606:	4b97      	ldr	r3, [pc, #604]	; (c864 <cal_gain_off+0x2f4>)
    c608:	2208      	movs	r2, #8
    c60a:	4694      	mov	ip, r2
    c60c:	44bc      	add	ip, r7
    c60e:	4463      	add	r3, ip
    c610:	781a      	ldrb	r2, [r3, #0]
    c612:	0013      	movs	r3, r2
    c614:	005b      	lsls	r3, r3, #1
    c616:	189b      	adds	r3, r3, r2
    c618:	009b      	lsls	r3, r3, #2
    c61a:	001a      	movs	r2, r3
    c61c:	68fb      	ldr	r3, [r7, #12]
    c61e:	189b      	adds	r3, r3, r2
    c620:	6858      	ldr	r0, [r3, #4]
    c622:	4b90      	ldr	r3, [pc, #576]	; (c864 <cal_gain_off+0x2f4>)
    c624:	2208      	movs	r2, #8
    c626:	4694      	mov	ip, r2
    c628:	44bc      	add	ip, r7
    c62a:	4463      	add	r3, ip
    c62c:	781a      	ldrb	r2, [r3, #0]
    c62e:	0013      	movs	r3, r2
    c630:	005b      	lsls	r3, r3, #1
    c632:	189b      	adds	r3, r3, r2
    c634:	009b      	lsls	r3, r3, #2
    c636:	001a      	movs	r2, r3
    c638:	68fb      	ldr	r3, [r7, #12]
    c63a:	189b      	adds	r3, r3, r2
    c63c:	685a      	ldr	r2, [r3, #4]
    c63e:	4b8a      	ldr	r3, [pc, #552]	; (c868 <cal_gain_off+0x2f8>)
    c640:	1c11      	adds	r1, r2, #0
    c642:	4798      	blx	r3
    c644:	1c03      	adds	r3, r0, #0
    c646:	1c19      	adds	r1, r3, #0
    c648:	4b88      	ldr	r3, [pc, #544]	; (c86c <cal_gain_off+0x2fc>)
    c64a:	2285      	movs	r2, #133	; 0x85
    c64c:	0112      	lsls	r2, r2, #4
    c64e:	2008      	movs	r0, #8
    c650:	4684      	mov	ip, r0
    c652:	44bc      	add	ip, r7
    c654:	4462      	add	r2, ip
    c656:	18d2      	adds	r2, r2, r3
    c658:	0023      	movs	r3, r4
    c65a:	005b      	lsls	r3, r3, #1
    c65c:	191b      	adds	r3, r3, r4
    c65e:	00db      	lsls	r3, r3, #3
    c660:	18d3      	adds	r3, r2, r3
    c662:	3304      	adds	r3, #4
    c664:	6019      	str	r1, [r3, #0]
		D[i][2] = XYZ[i][2]*XYZ[i][2];
    c666:	4b7f      	ldr	r3, [pc, #508]	; (c864 <cal_gain_off+0x2f4>)
    c668:	2208      	movs	r2, #8
    c66a:	4694      	mov	ip, r2
    c66c:	44bc      	add	ip, r7
    c66e:	4463      	add	r3, ip
    c670:	781c      	ldrb	r4, [r3, #0]
    c672:	4b7c      	ldr	r3, [pc, #496]	; (c864 <cal_gain_off+0x2f4>)
    c674:	2208      	movs	r2, #8
    c676:	4694      	mov	ip, r2
    c678:	44bc      	add	ip, r7
    c67a:	4463      	add	r3, ip
    c67c:	781a      	ldrb	r2, [r3, #0]
    c67e:	0013      	movs	r3, r2
    c680:	005b      	lsls	r3, r3, #1
    c682:	189b      	adds	r3, r3, r2
    c684:	009b      	lsls	r3, r3, #2
    c686:	001a      	movs	r2, r3
    c688:	68fb      	ldr	r3, [r7, #12]
    c68a:	189b      	adds	r3, r3, r2
    c68c:	6898      	ldr	r0, [r3, #8]
    c68e:	4b75      	ldr	r3, [pc, #468]	; (c864 <cal_gain_off+0x2f4>)
    c690:	2208      	movs	r2, #8
    c692:	4694      	mov	ip, r2
    c694:	44bc      	add	ip, r7
    c696:	4463      	add	r3, ip
    c698:	781a      	ldrb	r2, [r3, #0]
    c69a:	0013      	movs	r3, r2
    c69c:	005b      	lsls	r3, r3, #1
    c69e:	189b      	adds	r3, r3, r2
    c6a0:	009b      	lsls	r3, r3, #2
    c6a2:	001a      	movs	r2, r3
    c6a4:	68fb      	ldr	r3, [r7, #12]
    c6a6:	189b      	adds	r3, r3, r2
    c6a8:	689a      	ldr	r2, [r3, #8]
    c6aa:	4b6f      	ldr	r3, [pc, #444]	; (c868 <cal_gain_off+0x2f8>)
    c6ac:	1c11      	adds	r1, r2, #0
    c6ae:	4798      	blx	r3
    c6b0:	1c03      	adds	r3, r0, #0
    c6b2:	1c19      	adds	r1, r3, #0
    c6b4:	4b6d      	ldr	r3, [pc, #436]	; (c86c <cal_gain_off+0x2fc>)
    c6b6:	2285      	movs	r2, #133	; 0x85
    c6b8:	0112      	lsls	r2, r2, #4
    c6ba:	2008      	movs	r0, #8
    c6bc:	4684      	mov	ip, r0
    c6be:	44bc      	add	ip, r7
    c6c0:	4462      	add	r2, ip
    c6c2:	18d2      	adds	r2, r2, r3
    c6c4:	0023      	movs	r3, r4
    c6c6:	005b      	lsls	r3, r3, #1
    c6c8:	191b      	adds	r3, r3, r4
    c6ca:	00db      	lsls	r3, r3, #3
    c6cc:	18d3      	adds	r3, r2, r3
    c6ce:	3308      	adds	r3, #8
    c6d0:	6019      	str	r1, [r3, #0]
		D[i][3] = 2*XYZ[i][0];
    c6d2:	4b64      	ldr	r3, [pc, #400]	; (c864 <cal_gain_off+0x2f4>)
    c6d4:	2208      	movs	r2, #8
    c6d6:	4694      	mov	ip, r2
    c6d8:	44bc      	add	ip, r7
    c6da:	4463      	add	r3, ip
    c6dc:	781c      	ldrb	r4, [r3, #0]
    c6de:	4b61      	ldr	r3, [pc, #388]	; (c864 <cal_gain_off+0x2f4>)
    c6e0:	2208      	movs	r2, #8
    c6e2:	4694      	mov	ip, r2
    c6e4:	44bc      	add	ip, r7
    c6e6:	4463      	add	r3, ip
    c6e8:	781a      	ldrb	r2, [r3, #0]
    c6ea:	0013      	movs	r3, r2
    c6ec:	005b      	lsls	r3, r3, #1
    c6ee:	189b      	adds	r3, r3, r2
    c6f0:	009b      	lsls	r3, r3, #2
    c6f2:	001a      	movs	r2, r3
    c6f4:	68fb      	ldr	r3, [r7, #12]
    c6f6:	189b      	adds	r3, r3, r2
    c6f8:	681a      	ldr	r2, [r3, #0]
    c6fa:	4b5d      	ldr	r3, [pc, #372]	; (c870 <cal_gain_off+0x300>)
    c6fc:	1c11      	adds	r1, r2, #0
    c6fe:	1c10      	adds	r0, r2, #0
    c700:	4798      	blx	r3
    c702:	1c03      	adds	r3, r0, #0
    c704:	1c19      	adds	r1, r3, #0
    c706:	4b59      	ldr	r3, [pc, #356]	; (c86c <cal_gain_off+0x2fc>)
    c708:	2285      	movs	r2, #133	; 0x85
    c70a:	0112      	lsls	r2, r2, #4
    c70c:	2008      	movs	r0, #8
    c70e:	4684      	mov	ip, r0
    c710:	44bc      	add	ip, r7
    c712:	4462      	add	r2, ip
    c714:	18d2      	adds	r2, r2, r3
    c716:	0023      	movs	r3, r4
    c718:	005b      	lsls	r3, r3, #1
    c71a:	191b      	adds	r3, r3, r4
    c71c:	00db      	lsls	r3, r3, #3
    c71e:	18d3      	adds	r3, r2, r3
    c720:	330c      	adds	r3, #12
    c722:	6019      	str	r1, [r3, #0]
		D[i][4] = 2*XYZ[i][1];
    c724:	4b4f      	ldr	r3, [pc, #316]	; (c864 <cal_gain_off+0x2f4>)
    c726:	2208      	movs	r2, #8
    c728:	4694      	mov	ip, r2
    c72a:	44bc      	add	ip, r7
    c72c:	4463      	add	r3, ip
    c72e:	781c      	ldrb	r4, [r3, #0]
    c730:	4b4c      	ldr	r3, [pc, #304]	; (c864 <cal_gain_off+0x2f4>)
    c732:	2208      	movs	r2, #8
    c734:	4694      	mov	ip, r2
    c736:	44bc      	add	ip, r7
    c738:	4463      	add	r3, ip
    c73a:	781a      	ldrb	r2, [r3, #0]
    c73c:	0013      	movs	r3, r2
    c73e:	005b      	lsls	r3, r3, #1
    c740:	189b      	adds	r3, r3, r2
    c742:	009b      	lsls	r3, r3, #2
    c744:	001a      	movs	r2, r3
    c746:	68fb      	ldr	r3, [r7, #12]
    c748:	189b      	adds	r3, r3, r2
    c74a:	685a      	ldr	r2, [r3, #4]
    c74c:	4b48      	ldr	r3, [pc, #288]	; (c870 <cal_gain_off+0x300>)
    c74e:	1c11      	adds	r1, r2, #0
    c750:	1c10      	adds	r0, r2, #0
    c752:	4798      	blx	r3
    c754:	1c03      	adds	r3, r0, #0
    c756:	1c19      	adds	r1, r3, #0
    c758:	4b44      	ldr	r3, [pc, #272]	; (c86c <cal_gain_off+0x2fc>)
    c75a:	2285      	movs	r2, #133	; 0x85
    c75c:	0112      	lsls	r2, r2, #4
    c75e:	2008      	movs	r0, #8
    c760:	4684      	mov	ip, r0
    c762:	44bc      	add	ip, r7
    c764:	4462      	add	r2, ip
    c766:	18d2      	adds	r2, r2, r3
    c768:	0023      	movs	r3, r4
    c76a:	005b      	lsls	r3, r3, #1
    c76c:	191b      	adds	r3, r3, r4
    c76e:	00db      	lsls	r3, r3, #3
    c770:	18d3      	adds	r3, r2, r3
    c772:	3310      	adds	r3, #16
    c774:	6019      	str	r1, [r3, #0]
		D[i][5] = 2*XYZ[i][2];
    c776:	4b3b      	ldr	r3, [pc, #236]	; (c864 <cal_gain_off+0x2f4>)
    c778:	2208      	movs	r2, #8
    c77a:	4694      	mov	ip, r2
    c77c:	44bc      	add	ip, r7
    c77e:	4463      	add	r3, ip
    c780:	781c      	ldrb	r4, [r3, #0]
    c782:	4b38      	ldr	r3, [pc, #224]	; (c864 <cal_gain_off+0x2f4>)
    c784:	2208      	movs	r2, #8
    c786:	4694      	mov	ip, r2
    c788:	44bc      	add	ip, r7
    c78a:	4463      	add	r3, ip
    c78c:	781a      	ldrb	r2, [r3, #0]
    c78e:	0013      	movs	r3, r2
    c790:	005b      	lsls	r3, r3, #1
    c792:	189b      	adds	r3, r3, r2
    c794:	009b      	lsls	r3, r3, #2
    c796:	001a      	movs	r2, r3
    c798:	68fb      	ldr	r3, [r7, #12]
    c79a:	189b      	adds	r3, r3, r2
    c79c:	689a      	ldr	r2, [r3, #8]
    c79e:	4b34      	ldr	r3, [pc, #208]	; (c870 <cal_gain_off+0x300>)
    c7a0:	1c11      	adds	r1, r2, #0
    c7a2:	1c10      	adds	r0, r2, #0
    c7a4:	4798      	blx	r3
    c7a6:	1c03      	adds	r3, r0, #0
    c7a8:	1c19      	adds	r1, r3, #0
    c7aa:	4b30      	ldr	r3, [pc, #192]	; (c86c <cal_gain_off+0x2fc>)
    c7ac:	2285      	movs	r2, #133	; 0x85
    c7ae:	0112      	lsls	r2, r2, #4
    c7b0:	2008      	movs	r0, #8
    c7b2:	4684      	mov	ip, r0
    c7b4:	44bc      	add	ip, r7
    c7b6:	4462      	add	r2, ip
    c7b8:	18d2      	adds	r2, r2, r3
    c7ba:	0023      	movs	r3, r4
    c7bc:	005b      	lsls	r3, r3, #1
    c7be:	191b      	adds	r3, r3, r4
    c7c0:	00db      	lsls	r3, r3, #3
    c7c2:	18d3      	adds	r3, r2, r3
    c7c4:	3314      	adds	r3, #20
    c7c6:	6019      	str	r1, [r3, #0]
	for (i=0;i<n_points;i++){
    c7c8:	4b26      	ldr	r3, [pc, #152]	; (c864 <cal_gain_off+0x2f4>)
    c7ca:	2208      	movs	r2, #8
    c7cc:	4694      	mov	ip, r2
    c7ce:	44bc      	add	ip, r7
    c7d0:	4463      	add	r3, ip
    c7d2:	781a      	ldrb	r2, [r3, #0]
    c7d4:	4b23      	ldr	r3, [pc, #140]	; (c864 <cal_gain_off+0x2f4>)
    c7d6:	2108      	movs	r1, #8
    c7d8:	468c      	mov	ip, r1
    c7da:	44bc      	add	ip, r7
    c7dc:	4463      	add	r3, ip
    c7de:	3201      	adds	r2, #1
    c7e0:	701a      	strb	r2, [r3, #0]
    c7e2:	4b20      	ldr	r3, [pc, #128]	; (c864 <cal_gain_off+0x2f4>)
    c7e4:	2208      	movs	r2, #8
    c7e6:	4694      	mov	ip, r2
    c7e8:	44bc      	add	ip, r7
    c7ea:	4463      	add	r3, ip
    c7ec:	781a      	ldrb	r2, [r3, #0]
    c7ee:	4b21      	ldr	r3, [pc, #132]	; (c874 <cal_gain_off+0x304>)
    c7f0:	681b      	ldr	r3, [r3, #0]
    c7f2:	429a      	cmp	r2, r3
    c7f4:	d200      	bcs.n	c7f8 <cal_gain_off+0x288>
    c7f6:	e6cc      	b.n	c592 <cal_gain_off+0x22>
		
	}
	
	for (i=0;i<6;i++){
    c7f8:	4b1a      	ldr	r3, [pc, #104]	; (c864 <cal_gain_off+0x2f4>)
    c7fa:	2208      	movs	r2, #8
    c7fc:	4694      	mov	ip, r2
    c7fe:	44bc      	add	ip, r7
    c800:	4463      	add	r3, ip
    c802:	2200      	movs	r2, #0
    c804:	701a      	strb	r2, [r3, #0]
    c806:	e0f2      	b.n	c9ee <cal_gain_off+0x47e>
		for (j=0;j<6;j++){
    c808:	4b1b      	ldr	r3, [pc, #108]	; (c878 <cal_gain_off+0x308>)
    c80a:	2208      	movs	r2, #8
    c80c:	4694      	mov	ip, r2
    c80e:	44bc      	add	ip, r7
    c810:	4463      	add	r3, ip
    c812:	2200      	movs	r2, #0
    c814:	701a      	strb	r2, [r3, #0]
    c816:	e0d4      	b.n	c9c2 <cal_gain_off+0x452>
			temp1[i][j] = 0;
    c818:	4b12      	ldr	r3, [pc, #72]	; (c864 <cal_gain_off+0x2f4>)
    c81a:	2208      	movs	r2, #8
    c81c:	4694      	mov	ip, r2
    c81e:	44bc      	add	ip, r7
    c820:	4463      	add	r3, ip
    c822:	781a      	ldrb	r2, [r3, #0]
    c824:	4b14      	ldr	r3, [pc, #80]	; (c878 <cal_gain_off+0x308>)
    c826:	2108      	movs	r1, #8
    c828:	468c      	mov	ip, r1
    c82a:	44bc      	add	ip, r7
    c82c:	4463      	add	r3, ip
    c82e:	7818      	ldrb	r0, [r3, #0]
    c830:	4b12      	ldr	r3, [pc, #72]	; (c87c <cal_gain_off+0x30c>)
    c832:	2185      	movs	r1, #133	; 0x85
    c834:	0109      	lsls	r1, r1, #4
    c836:	2408      	movs	r4, #8
    c838:	46a4      	mov	ip, r4
    c83a:	44bc      	add	ip, r7
    c83c:	4461      	add	r1, ip
    c83e:	18c9      	adds	r1, r1, r3
    c840:	0013      	movs	r3, r2
    c842:	005b      	lsls	r3, r3, #1
    c844:	189b      	adds	r3, r3, r2
    c846:	005b      	lsls	r3, r3, #1
    c848:	181b      	adds	r3, r3, r0
    c84a:	009b      	lsls	r3, r3, #2
    c84c:	2200      	movs	r2, #0
    c84e:	505a      	str	r2, [r3, r1]
			for (k=0;k<n_points;k++){
    c850:	4b0b      	ldr	r3, [pc, #44]	; (c880 <cal_gain_off+0x310>)
    c852:	2208      	movs	r2, #8
    c854:	4694      	mov	ip, r2
    c856:	44bc      	add	ip, r7
    c858:	4463      	add	r3, ip
    c85a:	2200      	movs	r2, #0
    c85c:	701a      	strb	r2, [r3, #0]
    c85e:	e098      	b.n	c992 <cal_gain_off+0x422>
    c860:	fffff7a4 	.word	0xfffff7a4
    c864:	0000084f 	.word	0x0000084f
    c868:	0001eb65 	.word	0x0001eb65
    c86c:	fffff878 	.word	0xfffff878
    c870:	0001e461 	.word	0x0001e461
    c874:	200027f8 	.word	0x200027f8
    c878:	0000084e 	.word	0x0000084e
    c87c:	fffff7e8 	.word	0xfffff7e8
    c880:	0000084d 	.word	0x0000084d
				temp1[i][j] = temp1[i][j] + D[k][i]*D[k][j];
    c884:	4bbf      	ldr	r3, [pc, #764]	; (cb84 <cal_gain_off+0x614>)
    c886:	2208      	movs	r2, #8
    c888:	4694      	mov	ip, r2
    c88a:	44bc      	add	ip, r7
    c88c:	4463      	add	r3, ip
    c88e:	781c      	ldrb	r4, [r3, #0]
    c890:	4bbd      	ldr	r3, [pc, #756]	; (cb88 <cal_gain_off+0x618>)
    c892:	2208      	movs	r2, #8
    c894:	4694      	mov	ip, r2
    c896:	44bc      	add	ip, r7
    c898:	4463      	add	r3, ip
    c89a:	781b      	ldrb	r3, [r3, #0]
    c89c:	4699      	mov	r9, r3
    c89e:	4bb9      	ldr	r3, [pc, #740]	; (cb84 <cal_gain_off+0x614>)
    c8a0:	2208      	movs	r2, #8
    c8a2:	4694      	mov	ip, r2
    c8a4:	44bc      	add	ip, r7
    c8a6:	4463      	add	r3, ip
    c8a8:	781a      	ldrb	r2, [r3, #0]
    c8aa:	4bb7      	ldr	r3, [pc, #732]	; (cb88 <cal_gain_off+0x618>)
    c8ac:	2108      	movs	r1, #8
    c8ae:	468c      	mov	ip, r1
    c8b0:	44bc      	add	ip, r7
    c8b2:	4463      	add	r3, ip
    c8b4:	7818      	ldrb	r0, [r3, #0]
    c8b6:	4bb5      	ldr	r3, [pc, #724]	; (cb8c <cal_gain_off+0x61c>)
    c8b8:	2185      	movs	r1, #133	; 0x85
    c8ba:	0109      	lsls	r1, r1, #4
    c8bc:	2508      	movs	r5, #8
    c8be:	46ac      	mov	ip, r5
    c8c0:	44bc      	add	ip, r7
    c8c2:	4461      	add	r1, ip
    c8c4:	18c9      	adds	r1, r1, r3
    c8c6:	0013      	movs	r3, r2
    c8c8:	005b      	lsls	r3, r3, #1
    c8ca:	189b      	adds	r3, r3, r2
    c8cc:	005b      	lsls	r3, r3, #1
    c8ce:	181b      	adds	r3, r3, r0
    c8d0:	009b      	lsls	r3, r3, #2
    c8d2:	585e      	ldr	r6, [r3, r1]
    c8d4:	4bae      	ldr	r3, [pc, #696]	; (cb90 <cal_gain_off+0x620>)
    c8d6:	2208      	movs	r2, #8
    c8d8:	4694      	mov	ip, r2
    c8da:	44bc      	add	ip, r7
    c8dc:	4463      	add	r3, ip
    c8de:	781a      	ldrb	r2, [r3, #0]
    c8e0:	4ba8      	ldr	r3, [pc, #672]	; (cb84 <cal_gain_off+0x614>)
    c8e2:	2108      	movs	r1, #8
    c8e4:	468c      	mov	ip, r1
    c8e6:	44bc      	add	ip, r7
    c8e8:	4463      	add	r3, ip
    c8ea:	7818      	ldrb	r0, [r3, #0]
    c8ec:	4ba9      	ldr	r3, [pc, #676]	; (cb94 <cal_gain_off+0x624>)
    c8ee:	2185      	movs	r1, #133	; 0x85
    c8f0:	0109      	lsls	r1, r1, #4
    c8f2:	2508      	movs	r5, #8
    c8f4:	46ac      	mov	ip, r5
    c8f6:	44bc      	add	ip, r7
    c8f8:	4461      	add	r1, ip
    c8fa:	18c9      	adds	r1, r1, r3
    c8fc:	0013      	movs	r3, r2
    c8fe:	005b      	lsls	r3, r3, #1
    c900:	189b      	adds	r3, r3, r2
    c902:	005b      	lsls	r3, r3, #1
    c904:	181b      	adds	r3, r3, r0
    c906:	009b      	lsls	r3, r3, #2
    c908:	585b      	ldr	r3, [r3, r1]
    c90a:	469c      	mov	ip, r3
    c90c:	4ba0      	ldr	r3, [pc, #640]	; (cb90 <cal_gain_off+0x620>)
    c90e:	2208      	movs	r2, #8
    c910:	4690      	mov	r8, r2
    c912:	44b8      	add	r8, r7
    c914:	4443      	add	r3, r8
    c916:	781a      	ldrb	r2, [r3, #0]
    c918:	4b9b      	ldr	r3, [pc, #620]	; (cb88 <cal_gain_off+0x618>)
    c91a:	2108      	movs	r1, #8
    c91c:	4688      	mov	r8, r1
    c91e:	44b8      	add	r8, r7
    c920:	4443      	add	r3, r8
    c922:	7818      	ldrb	r0, [r3, #0]
    c924:	4b9b      	ldr	r3, [pc, #620]	; (cb94 <cal_gain_off+0x624>)
    c926:	2185      	movs	r1, #133	; 0x85
    c928:	0109      	lsls	r1, r1, #4
    c92a:	2508      	movs	r5, #8
    c92c:	46a8      	mov	r8, r5
    c92e:	44b8      	add	r8, r7
    c930:	4441      	add	r1, r8
    c932:	18c9      	adds	r1, r1, r3
    c934:	0013      	movs	r3, r2
    c936:	005b      	lsls	r3, r3, #1
    c938:	189b      	adds	r3, r3, r2
    c93a:	005b      	lsls	r3, r3, #1
    c93c:	181b      	adds	r3, r3, r0
    c93e:	009b      	lsls	r3, r3, #2
    c940:	585a      	ldr	r2, [r3, r1]
    c942:	4b95      	ldr	r3, [pc, #596]	; (cb98 <cal_gain_off+0x628>)
    c944:	1c11      	adds	r1, r2, #0
    c946:	4660      	mov	r0, ip
    c948:	4798      	blx	r3
    c94a:	1c03      	adds	r3, r0, #0
    c94c:	1c1a      	adds	r2, r3, #0
    c94e:	4b93      	ldr	r3, [pc, #588]	; (cb9c <cal_gain_off+0x62c>)
    c950:	1c11      	adds	r1, r2, #0
    c952:	1c30      	adds	r0, r6, #0
    c954:	4798      	blx	r3
    c956:	1c03      	adds	r3, r0, #0
    c958:	1c19      	adds	r1, r3, #0
    c95a:	4b8c      	ldr	r3, [pc, #560]	; (cb8c <cal_gain_off+0x61c>)
    c95c:	2285      	movs	r2, #133	; 0x85
    c95e:	0112      	lsls	r2, r2, #4
    c960:	2008      	movs	r0, #8
    c962:	4684      	mov	ip, r0
    c964:	44bc      	add	ip, r7
    c966:	4462      	add	r2, ip
    c968:	18d2      	adds	r2, r2, r3
    c96a:	0023      	movs	r3, r4
    c96c:	005b      	lsls	r3, r3, #1
    c96e:	191b      	adds	r3, r3, r4
    c970:	005b      	lsls	r3, r3, #1
    c972:	444b      	add	r3, r9
    c974:	009b      	lsls	r3, r3, #2
    c976:	5099      	str	r1, [r3, r2]
			for (k=0;k<n_points;k++){
    c978:	4b85      	ldr	r3, [pc, #532]	; (cb90 <cal_gain_off+0x620>)
    c97a:	2208      	movs	r2, #8
    c97c:	4694      	mov	ip, r2
    c97e:	44bc      	add	ip, r7
    c980:	4463      	add	r3, ip
    c982:	781a      	ldrb	r2, [r3, #0]
    c984:	4b82      	ldr	r3, [pc, #520]	; (cb90 <cal_gain_off+0x620>)
    c986:	2108      	movs	r1, #8
    c988:	468c      	mov	ip, r1
    c98a:	44bc      	add	ip, r7
    c98c:	4463      	add	r3, ip
    c98e:	3201      	adds	r2, #1
    c990:	701a      	strb	r2, [r3, #0]
    c992:	4b7f      	ldr	r3, [pc, #508]	; (cb90 <cal_gain_off+0x620>)
    c994:	2208      	movs	r2, #8
    c996:	4694      	mov	ip, r2
    c998:	44bc      	add	ip, r7
    c99a:	4463      	add	r3, ip
    c99c:	781a      	ldrb	r2, [r3, #0]
    c99e:	4b80      	ldr	r3, [pc, #512]	; (cba0 <cal_gain_off+0x630>)
    c9a0:	681b      	ldr	r3, [r3, #0]
    c9a2:	429a      	cmp	r2, r3
    c9a4:	d200      	bcs.n	c9a8 <cal_gain_off+0x438>
    c9a6:	e76d      	b.n	c884 <cal_gain_off+0x314>
		for (j=0;j<6;j++){
    c9a8:	4b77      	ldr	r3, [pc, #476]	; (cb88 <cal_gain_off+0x618>)
    c9aa:	2208      	movs	r2, #8
    c9ac:	4694      	mov	ip, r2
    c9ae:	44bc      	add	ip, r7
    c9b0:	4463      	add	r3, ip
    c9b2:	781a      	ldrb	r2, [r3, #0]
    c9b4:	4b74      	ldr	r3, [pc, #464]	; (cb88 <cal_gain_off+0x618>)
    c9b6:	2108      	movs	r1, #8
    c9b8:	468c      	mov	ip, r1
    c9ba:	44bc      	add	ip, r7
    c9bc:	4463      	add	r3, ip
    c9be:	3201      	adds	r2, #1
    c9c0:	701a      	strb	r2, [r3, #0]
    c9c2:	4b71      	ldr	r3, [pc, #452]	; (cb88 <cal_gain_off+0x618>)
    c9c4:	2208      	movs	r2, #8
    c9c6:	4694      	mov	ip, r2
    c9c8:	44bc      	add	ip, r7
    c9ca:	4463      	add	r3, ip
    c9cc:	781b      	ldrb	r3, [r3, #0]
    c9ce:	2b05      	cmp	r3, #5
    c9d0:	d800      	bhi.n	c9d4 <cal_gain_off+0x464>
    c9d2:	e721      	b.n	c818 <cal_gain_off+0x2a8>
	for (i=0;i<6;i++){
    c9d4:	4b6b      	ldr	r3, [pc, #428]	; (cb84 <cal_gain_off+0x614>)
    c9d6:	2208      	movs	r2, #8
    c9d8:	4694      	mov	ip, r2
    c9da:	44bc      	add	ip, r7
    c9dc:	4463      	add	r3, ip
    c9de:	781a      	ldrb	r2, [r3, #0]
    c9e0:	4b68      	ldr	r3, [pc, #416]	; (cb84 <cal_gain_off+0x614>)
    c9e2:	2108      	movs	r1, #8
    c9e4:	468c      	mov	ip, r1
    c9e6:	44bc      	add	ip, r7
    c9e8:	4463      	add	r3, ip
    c9ea:	3201      	adds	r2, #1
    c9ec:	701a      	strb	r2, [r3, #0]
    c9ee:	4b65      	ldr	r3, [pc, #404]	; (cb84 <cal_gain_off+0x614>)
    c9f0:	2208      	movs	r2, #8
    c9f2:	4694      	mov	ip, r2
    c9f4:	44bc      	add	ip, r7
    c9f6:	4463      	add	r3, ip
    c9f8:	781b      	ldrb	r3, [r3, #0]
    c9fa:	2b05      	cmp	r3, #5
    c9fc:	d800      	bhi.n	ca00 <cal_gain_off+0x490>
    c9fe:	e703      	b.n	c808 <cal_gain_off+0x298>
	
	//printf("\n\nTemp Matrix:\n");
	//print_matrix(temp1, 6, 6);
	

	inverse(temp1, temp1, 6);
    ca00:	2338      	movs	r3, #56	; 0x38
    ca02:	2208      	movs	r2, #8
    ca04:	18ba      	adds	r2, r7, r2
    ca06:	18d1      	adds	r1, r2, r3
    ca08:	2338      	movs	r3, #56	; 0x38
    ca0a:	2208      	movs	r2, #8
    ca0c:	4694      	mov	ip, r2
    ca0e:	44bc      	add	ip, r7
    ca10:	4463      	add	r3, ip
    ca12:	2206      	movs	r2, #6
    ca14:	0018      	movs	r0, r3
    ca16:	4b63      	ldr	r3, [pc, #396]	; (cba4 <cal_gain_off+0x634>)
    ca18:	4798      	blx	r3
	
	//printf("\n\nInverse of Temp Matrix:\n");
	//print_matrix(temp1,6, 6);
	
	for (i=0;i<6;i++){
    ca1a:	4b5a      	ldr	r3, [pc, #360]	; (cb84 <cal_gain_off+0x614>)
    ca1c:	2208      	movs	r2, #8
    ca1e:	4694      	mov	ip, r2
    ca20:	44bc      	add	ip, r7
    ca22:	4463      	add	r3, ip
    ca24:	2200      	movs	r2, #0
    ca26:	701a      	strb	r2, [r3, #0]
    ca28:	e080      	b.n	cb2c <cal_gain_off+0x5bc>
		temp2[i] = 0;
    ca2a:	4b56      	ldr	r3, [pc, #344]	; (cb84 <cal_gain_off+0x614>)
    ca2c:	2208      	movs	r2, #8
    ca2e:	4694      	mov	ip, r2
    ca30:	44bc      	add	ip, r7
    ca32:	4463      	add	r3, ip
    ca34:	781a      	ldrb	r2, [r3, #0]
    ca36:	4b5c      	ldr	r3, [pc, #368]	; (cba8 <cal_gain_off+0x638>)
    ca38:	2185      	movs	r1, #133	; 0x85
    ca3a:	0109      	lsls	r1, r1, #4
    ca3c:	468c      	mov	ip, r1
    ca3e:	2108      	movs	r1, #8
    ca40:	4688      	mov	r8, r1
    ca42:	44b8      	add	r8, r7
    ca44:	44c4      	add	ip, r8
    ca46:	4463      	add	r3, ip
    ca48:	0092      	lsls	r2, r2, #2
    ca4a:	2100      	movs	r1, #0
    ca4c:	50d1      	str	r1, [r2, r3]
		for (k = 0;k<n_points;k++){
    ca4e:	4b50      	ldr	r3, [pc, #320]	; (cb90 <cal_gain_off+0x620>)
    ca50:	2208      	movs	r2, #8
    ca52:	4694      	mov	ip, r2
    ca54:	44bc      	add	ip, r7
    ca56:	4463      	add	r3, ip
    ca58:	2200      	movs	r2, #0
    ca5a:	701a      	strb	r2, [r3, #0]
    ca5c:	e04f      	b.n	cafe <cal_gain_off+0x58e>
			temp2[i] = temp2[i]+D[k][i];
    ca5e:	4b49      	ldr	r3, [pc, #292]	; (cb84 <cal_gain_off+0x614>)
    ca60:	2208      	movs	r2, #8
    ca62:	4694      	mov	ip, r2
    ca64:	44bc      	add	ip, r7
    ca66:	4463      	add	r3, ip
    ca68:	781c      	ldrb	r4, [r3, #0]
    ca6a:	4b46      	ldr	r3, [pc, #280]	; (cb84 <cal_gain_off+0x614>)
    ca6c:	2208      	movs	r2, #8
    ca6e:	4694      	mov	ip, r2
    ca70:	44bc      	add	ip, r7
    ca72:	4463      	add	r3, ip
    ca74:	781a      	ldrb	r2, [r3, #0]
    ca76:	4b4c      	ldr	r3, [pc, #304]	; (cba8 <cal_gain_off+0x638>)
    ca78:	2185      	movs	r1, #133	; 0x85
    ca7a:	0109      	lsls	r1, r1, #4
    ca7c:	468c      	mov	ip, r1
    ca7e:	2108      	movs	r1, #8
    ca80:	4688      	mov	r8, r1
    ca82:	44b8      	add	r8, r7
    ca84:	44c4      	add	ip, r8
    ca86:	4463      	add	r3, ip
    ca88:	0092      	lsls	r2, r2, #2
    ca8a:	58d5      	ldr	r5, [r2, r3]
    ca8c:	4b40      	ldr	r3, [pc, #256]	; (cb90 <cal_gain_off+0x620>)
    ca8e:	2208      	movs	r2, #8
    ca90:	4694      	mov	ip, r2
    ca92:	44bc      	add	ip, r7
    ca94:	4463      	add	r3, ip
    ca96:	781a      	ldrb	r2, [r3, #0]
    ca98:	4b3a      	ldr	r3, [pc, #232]	; (cb84 <cal_gain_off+0x614>)
    ca9a:	2108      	movs	r1, #8
    ca9c:	468c      	mov	ip, r1
    ca9e:	44bc      	add	ip, r7
    caa0:	4463      	add	r3, ip
    caa2:	7818      	ldrb	r0, [r3, #0]
    caa4:	4b3b      	ldr	r3, [pc, #236]	; (cb94 <cal_gain_off+0x624>)
    caa6:	2185      	movs	r1, #133	; 0x85
    caa8:	0109      	lsls	r1, r1, #4
    caaa:	2608      	movs	r6, #8
    caac:	46b4      	mov	ip, r6
    caae:	44bc      	add	ip, r7
    cab0:	4461      	add	r1, ip
    cab2:	18c9      	adds	r1, r1, r3
    cab4:	0013      	movs	r3, r2
    cab6:	005b      	lsls	r3, r3, #1
    cab8:	189b      	adds	r3, r3, r2
    caba:	005b      	lsls	r3, r3, #1
    cabc:	181b      	adds	r3, r3, r0
    cabe:	009b      	lsls	r3, r3, #2
    cac0:	585a      	ldr	r2, [r3, r1]
    cac2:	4b36      	ldr	r3, [pc, #216]	; (cb9c <cal_gain_off+0x62c>)
    cac4:	1c11      	adds	r1, r2, #0
    cac6:	1c28      	adds	r0, r5, #0
    cac8:	4798      	blx	r3
    caca:	1c03      	adds	r3, r0, #0
    cacc:	1c19      	adds	r1, r3, #0
    cace:	4b36      	ldr	r3, [pc, #216]	; (cba8 <cal_gain_off+0x638>)
    cad0:	2285      	movs	r2, #133	; 0x85
    cad2:	0112      	lsls	r2, r2, #4
    cad4:	4694      	mov	ip, r2
    cad6:	2208      	movs	r2, #8
    cad8:	4690      	mov	r8, r2
    cada:	44b8      	add	r8, r7
    cadc:	44c4      	add	ip, r8
    cade:	4463      	add	r3, ip
    cae0:	00a2      	lsls	r2, r4, #2
    cae2:	50d1      	str	r1, [r2, r3]
		for (k = 0;k<n_points;k++){
    cae4:	4b2a      	ldr	r3, [pc, #168]	; (cb90 <cal_gain_off+0x620>)
    cae6:	2208      	movs	r2, #8
    cae8:	4694      	mov	ip, r2
    caea:	44bc      	add	ip, r7
    caec:	4463      	add	r3, ip
    caee:	781a      	ldrb	r2, [r3, #0]
    caf0:	4b27      	ldr	r3, [pc, #156]	; (cb90 <cal_gain_off+0x620>)
    caf2:	2108      	movs	r1, #8
    caf4:	468c      	mov	ip, r1
    caf6:	44bc      	add	ip, r7
    caf8:	4463      	add	r3, ip
    cafa:	3201      	adds	r2, #1
    cafc:	701a      	strb	r2, [r3, #0]
    cafe:	4b24      	ldr	r3, [pc, #144]	; (cb90 <cal_gain_off+0x620>)
    cb00:	2208      	movs	r2, #8
    cb02:	4694      	mov	ip, r2
    cb04:	44bc      	add	ip, r7
    cb06:	4463      	add	r3, ip
    cb08:	781a      	ldrb	r2, [r3, #0]
    cb0a:	4b25      	ldr	r3, [pc, #148]	; (cba0 <cal_gain_off+0x630>)
    cb0c:	681b      	ldr	r3, [r3, #0]
    cb0e:	429a      	cmp	r2, r3
    cb10:	d3a5      	bcc.n	ca5e <cal_gain_off+0x4ee>
	for (i=0;i<6;i++){
    cb12:	4b1c      	ldr	r3, [pc, #112]	; (cb84 <cal_gain_off+0x614>)
    cb14:	2208      	movs	r2, #8
    cb16:	4694      	mov	ip, r2
    cb18:	44bc      	add	ip, r7
    cb1a:	4463      	add	r3, ip
    cb1c:	781a      	ldrb	r2, [r3, #0]
    cb1e:	4b19      	ldr	r3, [pc, #100]	; (cb84 <cal_gain_off+0x614>)
    cb20:	2108      	movs	r1, #8
    cb22:	468c      	mov	ip, r1
    cb24:	44bc      	add	ip, r7
    cb26:	4463      	add	r3, ip
    cb28:	3201      	adds	r2, #1
    cb2a:	701a      	strb	r2, [r3, #0]
    cb2c:	4b15      	ldr	r3, [pc, #84]	; (cb84 <cal_gain_off+0x614>)
    cb2e:	2208      	movs	r2, #8
    cb30:	4694      	mov	ip, r2
    cb32:	44bc      	add	ip, r7
    cb34:	4463      	add	r3, ip
    cb36:	781b      	ldrb	r3, [r3, #0]
    cb38:	2b05      	cmp	r3, #5
    cb3a:	d800      	bhi.n	cb3e <cal_gain_off+0x5ce>
    cb3c:	e775      	b.n	ca2a <cal_gain_off+0x4ba>
		}
		
	}
	

	for (i=0;i<6;i++){
    cb3e:	4b11      	ldr	r3, [pc, #68]	; (cb84 <cal_gain_off+0x614>)
    cb40:	2208      	movs	r2, #8
    cb42:	4694      	mov	ip, r2
    cb44:	44bc      	add	ip, r7
    cb46:	4463      	add	r3, ip
    cb48:	2200      	movs	r2, #0
    cb4a:	701a      	strb	r2, [r3, #0]
    cb4c:	e0ab      	b.n	cca6 <cal_gain_off+0x736>
		v[i] = 0;
    cb4e:	4b0d      	ldr	r3, [pc, #52]	; (cb84 <cal_gain_off+0x614>)
    cb50:	2208      	movs	r2, #8
    cb52:	4694      	mov	ip, r2
    cb54:	44bc      	add	ip, r7
    cb56:	4463      	add	r3, ip
    cb58:	781a      	ldrb	r2, [r3, #0]
    cb5a:	4b14      	ldr	r3, [pc, #80]	; (cbac <cal_gain_off+0x63c>)
    cb5c:	2185      	movs	r1, #133	; 0x85
    cb5e:	0109      	lsls	r1, r1, #4
    cb60:	468c      	mov	ip, r1
    cb62:	2108      	movs	r1, #8
    cb64:	4688      	mov	r8, r1
    cb66:	44b8      	add	r8, r7
    cb68:	44c4      	add	ip, r8
    cb6a:	4463      	add	r3, ip
    cb6c:	0092      	lsls	r2, r2, #2
    cb6e:	2100      	movs	r1, #0
    cb70:	50d1      	str	r1, [r2, r3]
		for (j=0;j<6;j++){
    cb72:	4b05      	ldr	r3, [pc, #20]	; (cb88 <cal_gain_off+0x618>)
    cb74:	2208      	movs	r2, #8
    cb76:	4694      	mov	ip, r2
    cb78:	44bc      	add	ip, r7
    cb7a:	4463      	add	r3, ip
    cb7c:	2200      	movs	r2, #0
    cb7e:	701a      	strb	r2, [r3, #0]
    cb80:	e07c      	b.n	cc7c <cal_gain_off+0x70c>
    cb82:	46c0      	nop			; (mov r8, r8)
    cb84:	0000084f 	.word	0x0000084f
    cb88:	0000084e 	.word	0x0000084e
    cb8c:	fffff7e8 	.word	0xfffff7e8
    cb90:	0000084d 	.word	0x0000084d
    cb94:	fffff878 	.word	0xfffff878
    cb98:	0001eb65 	.word	0x0001eb65
    cb9c:	0001e461 	.word	0x0001e461
    cba0:	200027f8 	.word	0x200027f8
    cba4:	0000cfad 	.word	0x0000cfad
    cba8:	fffff7d0 	.word	0xfffff7d0
    cbac:	fffff7b8 	.word	0xfffff7b8
			v[i] = v[i]+temp1[i][j]*temp2[j];
    cbb0:	4bed      	ldr	r3, [pc, #948]	; (cf68 <cal_gain_off+0x9f8>)
    cbb2:	2208      	movs	r2, #8
    cbb4:	4694      	mov	ip, r2
    cbb6:	44bc      	add	ip, r7
    cbb8:	4463      	add	r3, ip
    cbba:	781c      	ldrb	r4, [r3, #0]
    cbbc:	4bea      	ldr	r3, [pc, #936]	; (cf68 <cal_gain_off+0x9f8>)
    cbbe:	2208      	movs	r2, #8
    cbc0:	4694      	mov	ip, r2
    cbc2:	44bc      	add	ip, r7
    cbc4:	4463      	add	r3, ip
    cbc6:	781a      	ldrb	r2, [r3, #0]
    cbc8:	4be8      	ldr	r3, [pc, #928]	; (cf6c <cal_gain_off+0x9fc>)
    cbca:	2185      	movs	r1, #133	; 0x85
    cbcc:	0109      	lsls	r1, r1, #4
    cbce:	468c      	mov	ip, r1
    cbd0:	2108      	movs	r1, #8
    cbd2:	4688      	mov	r8, r1
    cbd4:	44b8      	add	r8, r7
    cbd6:	44c4      	add	ip, r8
    cbd8:	4463      	add	r3, ip
    cbda:	0092      	lsls	r2, r2, #2
    cbdc:	58d5      	ldr	r5, [r2, r3]
    cbde:	4be2      	ldr	r3, [pc, #904]	; (cf68 <cal_gain_off+0x9f8>)
    cbe0:	2208      	movs	r2, #8
    cbe2:	4694      	mov	ip, r2
    cbe4:	44bc      	add	ip, r7
    cbe6:	4463      	add	r3, ip
    cbe8:	781a      	ldrb	r2, [r3, #0]
    cbea:	4be1      	ldr	r3, [pc, #900]	; (cf70 <cal_gain_off+0xa00>)
    cbec:	2108      	movs	r1, #8
    cbee:	468c      	mov	ip, r1
    cbf0:	44bc      	add	ip, r7
    cbf2:	4463      	add	r3, ip
    cbf4:	7818      	ldrb	r0, [r3, #0]
    cbf6:	4bdf      	ldr	r3, [pc, #892]	; (cf74 <cal_gain_off+0xa04>)
    cbf8:	2185      	movs	r1, #133	; 0x85
    cbfa:	0109      	lsls	r1, r1, #4
    cbfc:	2608      	movs	r6, #8
    cbfe:	46b4      	mov	ip, r6
    cc00:	44bc      	add	ip, r7
    cc02:	4461      	add	r1, ip
    cc04:	18c9      	adds	r1, r1, r3
    cc06:	0013      	movs	r3, r2
    cc08:	005b      	lsls	r3, r3, #1
    cc0a:	189b      	adds	r3, r3, r2
    cc0c:	005b      	lsls	r3, r3, #1
    cc0e:	181b      	adds	r3, r3, r0
    cc10:	009b      	lsls	r3, r3, #2
    cc12:	5858      	ldr	r0, [r3, r1]
    cc14:	4bd6      	ldr	r3, [pc, #856]	; (cf70 <cal_gain_off+0xa00>)
    cc16:	2208      	movs	r2, #8
    cc18:	4694      	mov	ip, r2
    cc1a:	44bc      	add	ip, r7
    cc1c:	4463      	add	r3, ip
    cc1e:	781a      	ldrb	r2, [r3, #0]
    cc20:	4bd5      	ldr	r3, [pc, #852]	; (cf78 <cal_gain_off+0xa08>)
    cc22:	2185      	movs	r1, #133	; 0x85
    cc24:	0109      	lsls	r1, r1, #4
    cc26:	468c      	mov	ip, r1
    cc28:	2108      	movs	r1, #8
    cc2a:	4688      	mov	r8, r1
    cc2c:	44b8      	add	r8, r7
    cc2e:	44c4      	add	ip, r8
    cc30:	4463      	add	r3, ip
    cc32:	0092      	lsls	r2, r2, #2
    cc34:	58d2      	ldr	r2, [r2, r3]
    cc36:	4bd1      	ldr	r3, [pc, #836]	; (cf7c <cal_gain_off+0xa0c>)
    cc38:	1c11      	adds	r1, r2, #0
    cc3a:	4798      	blx	r3
    cc3c:	1c03      	adds	r3, r0, #0
    cc3e:	1c1a      	adds	r2, r3, #0
    cc40:	4bcf      	ldr	r3, [pc, #828]	; (cf80 <cal_gain_off+0xa10>)
    cc42:	1c11      	adds	r1, r2, #0
    cc44:	1c28      	adds	r0, r5, #0
    cc46:	4798      	blx	r3
    cc48:	1c03      	adds	r3, r0, #0
    cc4a:	1c19      	adds	r1, r3, #0
    cc4c:	4bc7      	ldr	r3, [pc, #796]	; (cf6c <cal_gain_off+0x9fc>)
    cc4e:	2285      	movs	r2, #133	; 0x85
    cc50:	0112      	lsls	r2, r2, #4
    cc52:	4694      	mov	ip, r2
    cc54:	2208      	movs	r2, #8
    cc56:	4690      	mov	r8, r2
    cc58:	44b8      	add	r8, r7
    cc5a:	44c4      	add	ip, r8
    cc5c:	4463      	add	r3, ip
    cc5e:	00a2      	lsls	r2, r4, #2
    cc60:	50d1      	str	r1, [r2, r3]
		for (j=0;j<6;j++){
    cc62:	4bc3      	ldr	r3, [pc, #780]	; (cf70 <cal_gain_off+0xa00>)
    cc64:	2208      	movs	r2, #8
    cc66:	4694      	mov	ip, r2
    cc68:	44bc      	add	ip, r7
    cc6a:	4463      	add	r3, ip
    cc6c:	781a      	ldrb	r2, [r3, #0]
    cc6e:	4bc0      	ldr	r3, [pc, #768]	; (cf70 <cal_gain_off+0xa00>)
    cc70:	2108      	movs	r1, #8
    cc72:	468c      	mov	ip, r1
    cc74:	44bc      	add	ip, r7
    cc76:	4463      	add	r3, ip
    cc78:	3201      	adds	r2, #1
    cc7a:	701a      	strb	r2, [r3, #0]
    cc7c:	4bbc      	ldr	r3, [pc, #752]	; (cf70 <cal_gain_off+0xa00>)
    cc7e:	2208      	movs	r2, #8
    cc80:	4694      	mov	ip, r2
    cc82:	44bc      	add	ip, r7
    cc84:	4463      	add	r3, ip
    cc86:	781b      	ldrb	r3, [r3, #0]
    cc88:	2b05      	cmp	r3, #5
    cc8a:	d991      	bls.n	cbb0 <cal_gain_off+0x640>
	for (i=0;i<6;i++){
    cc8c:	4bb6      	ldr	r3, [pc, #728]	; (cf68 <cal_gain_off+0x9f8>)
    cc8e:	2208      	movs	r2, #8
    cc90:	4694      	mov	ip, r2
    cc92:	44bc      	add	ip, r7
    cc94:	4463      	add	r3, ip
    cc96:	781a      	ldrb	r2, [r3, #0]
    cc98:	4bb3      	ldr	r3, [pc, #716]	; (cf68 <cal_gain_off+0x9f8>)
    cc9a:	2108      	movs	r1, #8
    cc9c:	468c      	mov	ip, r1
    cc9e:	44bc      	add	ip, r7
    cca0:	4463      	add	r3, ip
    cca2:	3201      	adds	r2, #1
    cca4:	701a      	strb	r2, [r3, #0]
    cca6:	4bb0      	ldr	r3, [pc, #704]	; (cf68 <cal_gain_off+0x9f8>)
    cca8:	2208      	movs	r2, #8
    ccaa:	4694      	mov	ip, r2
    ccac:	44bc      	add	ip, r7
    ccae:	4463      	add	r3, ip
    ccb0:	781b      	ldrb	r3, [r3, #0]
    ccb2:	2b05      	cmp	r3, #5
    ccb4:	d800      	bhi.n	ccb8 <cal_gain_off+0x748>
    ccb6:	e74a      	b.n	cb4e <cal_gain_off+0x5de>
		}
		
	}
	

	for (i=0;i<3;i++){
    ccb8:	4bab      	ldr	r3, [pc, #684]	; (cf68 <cal_gain_off+0x9f8>)
    ccba:	2208      	movs	r2, #8
    ccbc:	4694      	mov	ip, r2
    ccbe:	44bc      	add	ip, r7
    ccc0:	4463      	add	r3, ip
    ccc2:	2200      	movs	r2, #0
    ccc4:	701a      	strb	r2, [r3, #0]
    ccc6:	e042      	b.n	cd4e <cal_gain_off+0x7de>
		cal_struct->offset[i] = -1*(v[i+3]/v[i]);
    ccc8:	4ba7      	ldr	r3, [pc, #668]	; (cf68 <cal_gain_off+0x9f8>)
    ccca:	2208      	movs	r2, #8
    cccc:	4694      	mov	ip, r2
    ccce:	44bc      	add	ip, r7
    ccd0:	4463      	add	r3, ip
    ccd2:	781c      	ldrb	r4, [r3, #0]
    ccd4:	4ba4      	ldr	r3, [pc, #656]	; (cf68 <cal_gain_off+0x9f8>)
    ccd6:	2208      	movs	r2, #8
    ccd8:	4694      	mov	ip, r2
    ccda:	44bc      	add	ip, r7
    ccdc:	4463      	add	r3, ip
    ccde:	781b      	ldrb	r3, [r3, #0]
    cce0:	1cda      	adds	r2, r3, #3
    cce2:	4ba2      	ldr	r3, [pc, #648]	; (cf6c <cal_gain_off+0x9fc>)
    cce4:	2185      	movs	r1, #133	; 0x85
    cce6:	0109      	lsls	r1, r1, #4
    cce8:	468c      	mov	ip, r1
    ccea:	2108      	movs	r1, #8
    ccec:	4688      	mov	r8, r1
    ccee:	44b8      	add	r8, r7
    ccf0:	44c4      	add	ip, r8
    ccf2:	4463      	add	r3, ip
    ccf4:	0092      	lsls	r2, r2, #2
    ccf6:	58d0      	ldr	r0, [r2, r3]
    ccf8:	4b9b      	ldr	r3, [pc, #620]	; (cf68 <cal_gain_off+0x9f8>)
    ccfa:	2208      	movs	r2, #8
    ccfc:	4694      	mov	ip, r2
    ccfe:	44bc      	add	ip, r7
    cd00:	4463      	add	r3, ip
    cd02:	781a      	ldrb	r2, [r3, #0]
    cd04:	4b99      	ldr	r3, [pc, #612]	; (cf6c <cal_gain_off+0x9fc>)
    cd06:	2185      	movs	r1, #133	; 0x85
    cd08:	0109      	lsls	r1, r1, #4
    cd0a:	468c      	mov	ip, r1
    cd0c:	2108      	movs	r1, #8
    cd0e:	4688      	mov	r8, r1
    cd10:	44b8      	add	r8, r7
    cd12:	44c4      	add	ip, r8
    cd14:	4463      	add	r3, ip
    cd16:	0092      	lsls	r2, r2, #2
    cd18:	58d2      	ldr	r2, [r2, r3]
    cd1a:	4b9a      	ldr	r3, [pc, #616]	; (cf84 <cal_gain_off+0xa14>)
    cd1c:	1c11      	adds	r1, r2, #0
    cd1e:	4798      	blx	r3
    cd20:	1c03      	adds	r3, r0, #0
    cd22:	1c1a      	adds	r2, r3, #0
    cd24:	2380      	movs	r3, #128	; 0x80
    cd26:	061b      	lsls	r3, r3, #24
    cd28:	405a      	eors	r2, r3
    cd2a:	68b9      	ldr	r1, [r7, #8]
    cd2c:	00a3      	lsls	r3, r4, #2
    cd2e:	18cb      	adds	r3, r1, r3
    cd30:	3304      	adds	r3, #4
    cd32:	601a      	str	r2, [r3, #0]
	for (i=0;i<3;i++){
    cd34:	4b8c      	ldr	r3, [pc, #560]	; (cf68 <cal_gain_off+0x9f8>)
    cd36:	2208      	movs	r2, #8
    cd38:	4694      	mov	ip, r2
    cd3a:	44bc      	add	ip, r7
    cd3c:	4463      	add	r3, ip
    cd3e:	781a      	ldrb	r2, [r3, #0]
    cd40:	4b89      	ldr	r3, [pc, #548]	; (cf68 <cal_gain_off+0x9f8>)
    cd42:	2108      	movs	r1, #8
    cd44:	468c      	mov	ip, r1
    cd46:	44bc      	add	ip, r7
    cd48:	4463      	add	r3, ip
    cd4a:	3201      	adds	r2, #1
    cd4c:	701a      	strb	r2, [r3, #0]
    cd4e:	4b86      	ldr	r3, [pc, #536]	; (cf68 <cal_gain_off+0x9f8>)
    cd50:	2208      	movs	r2, #8
    cd52:	4694      	mov	ip, r2
    cd54:	44bc      	add	ip, r7
    cd56:	4463      	add	r3, ip
    cd58:	781b      	ldrb	r3, [r3, #0]
    cd5a:	2b02      	cmp	r3, #2
    cd5c:	d9b4      	bls.n	ccc8 <cal_gain_off+0x758>
	}
	
	
	g=1 + pow(v[3],2)/v[0]+pow(v[4],2)/v[1]+pow(v[5],2)/v[2];
    cd5e:	4b83      	ldr	r3, [pc, #524]	; (cf6c <cal_gain_off+0x9fc>)
    cd60:	2285      	movs	r2, #133	; 0x85
    cd62:	0112      	lsls	r2, r2, #4
    cd64:	4694      	mov	ip, r2
    cd66:	2208      	movs	r2, #8
    cd68:	4690      	mov	r8, r2
    cd6a:	44b8      	add	r8, r7
    cd6c:	44c4      	add	ip, r8
    cd6e:	4463      	add	r3, ip
    cd70:	68da      	ldr	r2, [r3, #12]
    cd72:	4b85      	ldr	r3, [pc, #532]	; (cf88 <cal_gain_off+0xa18>)
    cd74:	1c10      	adds	r0, r2, #0
    cd76:	4798      	blx	r3
    cd78:	2300      	movs	r3, #0
    cd7a:	2480      	movs	r4, #128	; 0x80
    cd7c:	05e4      	lsls	r4, r4, #23
    cd7e:	001a      	movs	r2, r3
    cd80:	0023      	movs	r3, r4
    cd82:	4c82      	ldr	r4, [pc, #520]	; (cf8c <cal_gain_off+0xa1c>)
    cd84:	47a0      	blx	r4
    cd86:	0005      	movs	r5, r0
    cd88:	000e      	movs	r6, r1
    cd8a:	4b78      	ldr	r3, [pc, #480]	; (cf6c <cal_gain_off+0x9fc>)
    cd8c:	2285      	movs	r2, #133	; 0x85
    cd8e:	0112      	lsls	r2, r2, #4
    cd90:	4694      	mov	ip, r2
    cd92:	2208      	movs	r2, #8
    cd94:	4690      	mov	r8, r2
    cd96:	44b8      	add	r8, r7
    cd98:	44c4      	add	ip, r8
    cd9a:	4463      	add	r3, ip
    cd9c:	681a      	ldr	r2, [r3, #0]
    cd9e:	4b7a      	ldr	r3, [pc, #488]	; (cf88 <cal_gain_off+0xa18>)
    cda0:	1c10      	adds	r0, r2, #0
    cda2:	4798      	blx	r3
    cda4:	0002      	movs	r2, r0
    cda6:	000b      	movs	r3, r1
    cda8:	4c79      	ldr	r4, [pc, #484]	; (cf90 <cal_gain_off+0xa20>)
    cdaa:	0028      	movs	r0, r5
    cdac:	0031      	movs	r1, r6
    cdae:	47a0      	blx	r4
    cdb0:	0003      	movs	r3, r0
    cdb2:	000c      	movs	r4, r1
    cdb4:	0018      	movs	r0, r3
    cdb6:	0021      	movs	r1, r4
    cdb8:	4c76      	ldr	r4, [pc, #472]	; (cf94 <cal_gain_off+0xa24>)
    cdba:	2200      	movs	r2, #0
    cdbc:	4b76      	ldr	r3, [pc, #472]	; (cf98 <cal_gain_off+0xa28>)
    cdbe:	47a0      	blx	r4
    cdc0:	0003      	movs	r3, r0
    cdc2:	000c      	movs	r4, r1
    cdc4:	001d      	movs	r5, r3
    cdc6:	0026      	movs	r6, r4
    cdc8:	4b68      	ldr	r3, [pc, #416]	; (cf6c <cal_gain_off+0x9fc>)
    cdca:	2285      	movs	r2, #133	; 0x85
    cdcc:	0112      	lsls	r2, r2, #4
    cdce:	4694      	mov	ip, r2
    cdd0:	2208      	movs	r2, #8
    cdd2:	4690      	mov	r8, r2
    cdd4:	44b8      	add	r8, r7
    cdd6:	44c4      	add	ip, r8
    cdd8:	4463      	add	r3, ip
    cdda:	691a      	ldr	r2, [r3, #16]
    cddc:	4b6a      	ldr	r3, [pc, #424]	; (cf88 <cal_gain_off+0xa18>)
    cdde:	1c10      	adds	r0, r2, #0
    cde0:	4798      	blx	r3
    cde2:	2300      	movs	r3, #0
    cde4:	2480      	movs	r4, #128	; 0x80
    cde6:	05e4      	lsls	r4, r4, #23
    cde8:	001a      	movs	r2, r3
    cdea:	0023      	movs	r3, r4
    cdec:	4c67      	ldr	r4, [pc, #412]	; (cf8c <cal_gain_off+0xa1c>)
    cdee:	47a0      	blx	r4
    cdf0:	6038      	str	r0, [r7, #0]
    cdf2:	6079      	str	r1, [r7, #4]
    cdf4:	4b5d      	ldr	r3, [pc, #372]	; (cf6c <cal_gain_off+0x9fc>)
    cdf6:	2285      	movs	r2, #133	; 0x85
    cdf8:	0112      	lsls	r2, r2, #4
    cdfa:	4694      	mov	ip, r2
    cdfc:	2208      	movs	r2, #8
    cdfe:	4690      	mov	r8, r2
    ce00:	44b8      	add	r8, r7
    ce02:	44c4      	add	ip, r8
    ce04:	4463      	add	r3, ip
    ce06:	685a      	ldr	r2, [r3, #4]
    ce08:	4b5f      	ldr	r3, [pc, #380]	; (cf88 <cal_gain_off+0xa18>)
    ce0a:	1c10      	adds	r0, r2, #0
    ce0c:	4798      	blx	r3
    ce0e:	0002      	movs	r2, r0
    ce10:	000b      	movs	r3, r1
    ce12:	4c5f      	ldr	r4, [pc, #380]	; (cf90 <cal_gain_off+0xa20>)
    ce14:	6838      	ldr	r0, [r7, #0]
    ce16:	6879      	ldr	r1, [r7, #4]
    ce18:	47a0      	blx	r4
    ce1a:	0003      	movs	r3, r0
    ce1c:	000c      	movs	r4, r1
    ce1e:	001a      	movs	r2, r3
    ce20:	0023      	movs	r3, r4
    ce22:	4c5c      	ldr	r4, [pc, #368]	; (cf94 <cal_gain_off+0xa24>)
    ce24:	0028      	movs	r0, r5
    ce26:	0031      	movs	r1, r6
    ce28:	47a0      	blx	r4
    ce2a:	0003      	movs	r3, r0
    ce2c:	000c      	movs	r4, r1
    ce2e:	001d      	movs	r5, r3
    ce30:	0026      	movs	r6, r4
    ce32:	4b4e      	ldr	r3, [pc, #312]	; (cf6c <cal_gain_off+0x9fc>)
    ce34:	2285      	movs	r2, #133	; 0x85
    ce36:	0112      	lsls	r2, r2, #4
    ce38:	4694      	mov	ip, r2
    ce3a:	2208      	movs	r2, #8
    ce3c:	4690      	mov	r8, r2
    ce3e:	44b8      	add	r8, r7
    ce40:	44c4      	add	ip, r8
    ce42:	4463      	add	r3, ip
    ce44:	695a      	ldr	r2, [r3, #20]
    ce46:	4b50      	ldr	r3, [pc, #320]	; (cf88 <cal_gain_off+0xa18>)
    ce48:	1c10      	adds	r0, r2, #0
    ce4a:	4798      	blx	r3
    ce4c:	2300      	movs	r3, #0
    ce4e:	2480      	movs	r4, #128	; 0x80
    ce50:	05e4      	lsls	r4, r4, #23
    ce52:	001a      	movs	r2, r3
    ce54:	0023      	movs	r3, r4
    ce56:	4c4d      	ldr	r4, [pc, #308]	; (cf8c <cal_gain_off+0xa1c>)
    ce58:	47a0      	blx	r4
    ce5a:	6038      	str	r0, [r7, #0]
    ce5c:	6079      	str	r1, [r7, #4]
    ce5e:	4b43      	ldr	r3, [pc, #268]	; (cf6c <cal_gain_off+0x9fc>)
    ce60:	2285      	movs	r2, #133	; 0x85
    ce62:	0112      	lsls	r2, r2, #4
    ce64:	4694      	mov	ip, r2
    ce66:	2208      	movs	r2, #8
    ce68:	4690      	mov	r8, r2
    ce6a:	44b8      	add	r8, r7
    ce6c:	44c4      	add	ip, r8
    ce6e:	4463      	add	r3, ip
    ce70:	689a      	ldr	r2, [r3, #8]
    ce72:	4b45      	ldr	r3, [pc, #276]	; (cf88 <cal_gain_off+0xa18>)
    ce74:	1c10      	adds	r0, r2, #0
    ce76:	4798      	blx	r3
    ce78:	0002      	movs	r2, r0
    ce7a:	000b      	movs	r3, r1
    ce7c:	4c44      	ldr	r4, [pc, #272]	; (cf90 <cal_gain_off+0xa20>)
    ce7e:	6838      	ldr	r0, [r7, #0]
    ce80:	6879      	ldr	r1, [r7, #4]
    ce82:	47a0      	blx	r4
    ce84:	0003      	movs	r3, r0
    ce86:	000c      	movs	r4, r1
    ce88:	001a      	movs	r2, r3
    ce8a:	0023      	movs	r3, r4
    ce8c:	4c41      	ldr	r4, [pc, #260]	; (cf94 <cal_gain_off+0xa24>)
    ce8e:	0028      	movs	r0, r5
    ce90:	0031      	movs	r1, r6
    ce92:	47a0      	blx	r4
    ce94:	0003      	movs	r3, r0
    ce96:	000c      	movs	r4, r1
    ce98:	0019      	movs	r1, r3
    ce9a:	0022      	movs	r2, r4
    ce9c:	4b3f      	ldr	r3, [pc, #252]	; (cf9c <cal_gain_off+0xa2c>)
    ce9e:	0008      	movs	r0, r1
    cea0:	0011      	movs	r1, r2
    cea2:	4798      	blx	r3
    cea4:	1c03      	adds	r3, r0, #0
    cea6:	4a3e      	ldr	r2, [pc, #248]	; (cfa0 <cal_gain_off+0xa30>)
    cea8:	2108      	movs	r1, #8
    ceaa:	468c      	mov	ip, r1
    ceac:	44bc      	add	ip, r7
    ceae:	4462      	add	r2, ip
    ceb0:	6013      	str	r3, [r2, #0]
	
	
	for (i=0;i<3;i++){
    ceb2:	4b2d      	ldr	r3, [pc, #180]	; (cf68 <cal_gain_off+0x9f8>)
    ceb4:	2208      	movs	r2, #8
    ceb6:	4694      	mov	ip, r2
    ceb8:	44bc      	add	ip, r7
    ceba:	4463      	add	r3, ip
    cebc:	2200      	movs	r2, #0
    cebe:	701a      	strb	r2, [r3, #0]
    cec0:	e042      	b.n	cf48 <cal_gain_off+0x9d8>
		cal_struct->gain[i] = sqrt(g/v[i]);
    cec2:	4b29      	ldr	r3, [pc, #164]	; (cf68 <cal_gain_off+0x9f8>)
    cec4:	2208      	movs	r2, #8
    cec6:	4694      	mov	ip, r2
    cec8:	44bc      	add	ip, r7
    ceca:	4463      	add	r3, ip
    cecc:	781c      	ldrb	r4, [r3, #0]
    cece:	4b26      	ldr	r3, [pc, #152]	; (cf68 <cal_gain_off+0x9f8>)
    ced0:	2208      	movs	r2, #8
    ced2:	4694      	mov	ip, r2
    ced4:	44bc      	add	ip, r7
    ced6:	4463      	add	r3, ip
    ced8:	781a      	ldrb	r2, [r3, #0]
    ceda:	4b24      	ldr	r3, [pc, #144]	; (cf6c <cal_gain_off+0x9fc>)
    cedc:	2185      	movs	r1, #133	; 0x85
    cede:	0109      	lsls	r1, r1, #4
    cee0:	468c      	mov	ip, r1
    cee2:	2108      	movs	r1, #8
    cee4:	4688      	mov	r8, r1
    cee6:	44b8      	add	r8, r7
    cee8:	44c4      	add	ip, r8
    ceea:	4463      	add	r3, ip
    ceec:	0092      	lsls	r2, r2, #2
    ceee:	58d2      	ldr	r2, [r2, r3]
    cef0:	4b24      	ldr	r3, [pc, #144]	; (cf84 <cal_gain_off+0xa14>)
    cef2:	1c11      	adds	r1, r2, #0
    cef4:	4a2a      	ldr	r2, [pc, #168]	; (cfa0 <cal_gain_off+0xa30>)
    cef6:	2008      	movs	r0, #8
    cef8:	4684      	mov	ip, r0
    cefa:	44bc      	add	ip, r7
    cefc:	4462      	add	r2, ip
    cefe:	6810      	ldr	r0, [r2, #0]
    cf00:	4798      	blx	r3
    cf02:	1c03      	adds	r3, r0, #0
    cf04:	1c1a      	adds	r2, r3, #0
    cf06:	4b20      	ldr	r3, [pc, #128]	; (cf88 <cal_gain_off+0xa18>)
    cf08:	1c10      	adds	r0, r2, #0
    cf0a:	4798      	blx	r3
    cf0c:	0002      	movs	r2, r0
    cf0e:	000b      	movs	r3, r1
    cf10:	0010      	movs	r0, r2
    cf12:	0019      	movs	r1, r3
    cf14:	4b23      	ldr	r3, [pc, #140]	; (cfa4 <cal_gain_off+0xa34>)
    cf16:	4798      	blx	r3
    cf18:	000a      	movs	r2, r1
    cf1a:	0001      	movs	r1, r0
    cf1c:	4b1f      	ldr	r3, [pc, #124]	; (cf9c <cal_gain_off+0xa2c>)
    cf1e:	0008      	movs	r0, r1
    cf20:	0011      	movs	r1, r2
    cf22:	4798      	blx	r3
    cf24:	1c01      	adds	r1, r0, #0
    cf26:	68bb      	ldr	r3, [r7, #8]
    cf28:	1d22      	adds	r2, r4, #4
    cf2a:	0092      	lsls	r2, r2, #2
    cf2c:	50d1      	str	r1, [r2, r3]
	for (i=0;i<3;i++){
    cf2e:	4b0e      	ldr	r3, [pc, #56]	; (cf68 <cal_gain_off+0x9f8>)
    cf30:	2208      	movs	r2, #8
    cf32:	4694      	mov	ip, r2
    cf34:	44bc      	add	ip, r7
    cf36:	4463      	add	r3, ip
    cf38:	781a      	ldrb	r2, [r3, #0]
    cf3a:	4b0b      	ldr	r3, [pc, #44]	; (cf68 <cal_gain_off+0x9f8>)
    cf3c:	2108      	movs	r1, #8
    cf3e:	468c      	mov	ip, r1
    cf40:	44bc      	add	ip, r7
    cf42:	4463      	add	r3, ip
    cf44:	3201      	adds	r2, #1
    cf46:	701a      	strb	r2, [r3, #0]
    cf48:	4b07      	ldr	r3, [pc, #28]	; (cf68 <cal_gain_off+0x9f8>)
    cf4a:	2208      	movs	r2, #8
    cf4c:	4694      	mov	ip, r2
    cf4e:	44bc      	add	ip, r7
    cf50:	4463      	add	r3, ip
    cf52:	781b      	ldrb	r3, [r3, #0]
    cf54:	2b02      	cmp	r3, #2
    cf56:	d9b4      	bls.n	cec2 <cal_gain_off+0x952>
		
	}
	

}
    cf58:	46c0      	nop			; (mov r8, r8)
    cf5a:	46bd      	mov	sp, r7
    cf5c:	4b12      	ldr	r3, [pc, #72]	; (cfa8 <cal_gain_off+0xa38>)
    cf5e:	449d      	add	sp, r3
    cf60:	bc0c      	pop	{r2, r3}
    cf62:	4690      	mov	r8, r2
    cf64:	4699      	mov	r9, r3
    cf66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cf68:	0000084f 	.word	0x0000084f
    cf6c:	fffff7b8 	.word	0xfffff7b8
    cf70:	0000084e 	.word	0x0000084e
    cf74:	fffff7e8 	.word	0xfffff7e8
    cf78:	fffff7d0 	.word	0xfffff7d0
    cf7c:	0001eb65 	.word	0x0001eb65
    cf80:	0001e461 	.word	0x0001e461
    cf84:	0001e785 	.word	0x0001e785
    cf88:	00020d99 	.word	0x00020d99
    cf8c:	0001b749 	.word	0x0001b749
    cf90:	0001f869 	.word	0x0001f869
    cf94:	0001f249 	.word	0x0001f249
    cf98:	3ff00000 	.word	0x3ff00000
    cf9c:	00020e3d 	.word	0x00020e3d
    cfa0:	00000848 	.word	0x00000848
    cfa4:	0001baa1 	.word	0x0001baa1
    cfa8:	0000085c 	.word	0x0000085c

0000cfac <inverse>:



void inverse(float source[6][6], float dest[6][6], uint8_t f)
{
    cfac:	b5f0      	push	{r4, r5, r6, r7, lr}
    cfae:	46c6      	mov	lr, r8
    cfb0:	b500      	push	{lr}
    cfb2:	b0d0      	sub	sp, #320	; 0x140
    cfb4:	af00      	add	r7, sp, #0
    cfb6:	6178      	str	r0, [r7, #20]
    cfb8:	6139      	str	r1, [r7, #16]
    cfba:	4be3      	ldr	r3, [pc, #908]	; (d348 <inverse+0x39c>)
    cfbc:	219c      	movs	r1, #156	; 0x9c
    cfbe:	0049      	lsls	r1, r1, #1
    cfc0:	468c      	mov	ip, r1
    cfc2:	2108      	movs	r1, #8
    cfc4:	4688      	mov	r8, r1
    cfc6:	44b8      	add	r8, r7
    cfc8:	44c4      	add	ip, r8
    cfca:	4463      	add	r3, ip
    cfcc:	701a      	strb	r2, [r3, #0]
	float b[6][6], fac[6][6];
	uint8_t p, q, m, n, i, j;
	//f = 6;
	for (q = 0;q < f; q++)
    cfce:	239b      	movs	r3, #155	; 0x9b
    cfd0:	005b      	lsls	r3, r3, #1
    cfd2:	2208      	movs	r2, #8
    cfd4:	4694      	mov	ip, r2
    cfd6:	44bc      	add	ip, r7
    cfd8:	4463      	add	r3, ip
    cfda:	2200      	movs	r2, #0
    cfdc:	701a      	strb	r2, [r3, #0]
    cfde:	e187      	b.n	d2f0 <inverse+0x344>
	{
		for (p = 0;p < f; p++)
    cfe0:	2338      	movs	r3, #56	; 0x38
    cfe2:	33ff      	adds	r3, #255	; 0xff
    cfe4:	2208      	movs	r2, #8
    cfe6:	4694      	mov	ip, r2
    cfe8:	44bc      	add	ip, r7
    cfea:	4463      	add	r3, ip
    cfec:	2200      	movs	r2, #0
    cfee:	701a      	strb	r2, [r3, #0]
    cff0:	e15c      	b.n	d2ac <inverse+0x300>
		{
			m = 0;
    cff2:	2336      	movs	r3, #54	; 0x36
    cff4:	33ff      	adds	r3, #255	; 0xff
    cff6:	2208      	movs	r2, #8
    cff8:	4694      	mov	ip, r2
    cffa:	44bc      	add	ip, r7
    cffc:	4463      	add	r3, ip
    cffe:	2200      	movs	r2, #0
    d000:	701a      	strb	r2, [r3, #0]
			n = 0;
    d002:	239a      	movs	r3, #154	; 0x9a
    d004:	005b      	lsls	r3, r3, #1
    d006:	2208      	movs	r2, #8
    d008:	4694      	mov	ip, r2
    d00a:	44bc      	add	ip, r7
    d00c:	4463      	add	r3, ip
    d00e:	2200      	movs	r2, #0
    d010:	701a      	strb	r2, [r3, #0]
			for (i = 0;i < f; i++)
    d012:	2334      	movs	r3, #52	; 0x34
    d014:	33ff      	adds	r3, #255	; 0xff
    d016:	2208      	movs	r2, #8
    d018:	4694      	mov	ip, r2
    d01a:	44bc      	add	ip, r7
    d01c:	4463      	add	r3, ip
    d01e:	2200      	movs	r2, #0
    d020:	701a      	strb	r2, [r3, #0]
    d022:	e0c2      	b.n	d1aa <inverse+0x1fe>
			{
				for (j = 0;j < f; j++)
    d024:	2399      	movs	r3, #153	; 0x99
    d026:	005b      	lsls	r3, r3, #1
    d028:	2208      	movs	r2, #8
    d02a:	4694      	mov	ip, r2
    d02c:	44bc      	add	ip, r7
    d02e:	4463      	add	r3, ip
    d030:	2200      	movs	r2, #0
    d032:	701a      	strb	r2, [r3, #0]
    d034:	e097      	b.n	d166 <inverse+0x1ba>
				{
					if (i != q && j != p)
    d036:	2334      	movs	r3, #52	; 0x34
    d038:	33ff      	adds	r3, #255	; 0xff
    d03a:	2208      	movs	r2, #8
    d03c:	18ba      	adds	r2, r7, r2
    d03e:	18d2      	adds	r2, r2, r3
    d040:	239b      	movs	r3, #155	; 0x9b
    d042:	005b      	lsls	r3, r3, #1
    d044:	2108      	movs	r1, #8
    d046:	468c      	mov	ip, r1
    d048:	44bc      	add	ip, r7
    d04a:	4463      	add	r3, ip
    d04c:	7812      	ldrb	r2, [r2, #0]
    d04e:	781b      	ldrb	r3, [r3, #0]
    d050:	429a      	cmp	r2, r3
    d052:	d079      	beq.n	d148 <inverse+0x19c>
    d054:	2399      	movs	r3, #153	; 0x99
    d056:	005b      	lsls	r3, r3, #1
    d058:	2208      	movs	r2, #8
    d05a:	18ba      	adds	r2, r7, r2
    d05c:	18d2      	adds	r2, r2, r3
    d05e:	2338      	movs	r3, #56	; 0x38
    d060:	33ff      	adds	r3, #255	; 0xff
    d062:	2108      	movs	r1, #8
    d064:	468c      	mov	ip, r1
    d066:	44bc      	add	ip, r7
    d068:	4463      	add	r3, ip
    d06a:	7812      	ldrb	r2, [r2, #0]
    d06c:	781b      	ldrb	r3, [r3, #0]
    d06e:	429a      	cmp	r2, r3
    d070:	d06a      	beq.n	d148 <inverse+0x19c>
					{
						b[m][n] = source[i][j];
    d072:	2336      	movs	r3, #54	; 0x36
    d074:	33ff      	adds	r3, #255	; 0xff
    d076:	2208      	movs	r2, #8
    d078:	4694      	mov	ip, r2
    d07a:	44bc      	add	ip, r7
    d07c:	4463      	add	r3, ip
    d07e:	781a      	ldrb	r2, [r3, #0]
    d080:	239a      	movs	r3, #154	; 0x9a
    d082:	005b      	lsls	r3, r3, #1
    d084:	2108      	movs	r1, #8
    d086:	468c      	mov	ip, r1
    d088:	44bc      	add	ip, r7
    d08a:	4463      	add	r3, ip
    d08c:	781c      	ldrb	r4, [r3, #0]
    d08e:	2334      	movs	r3, #52	; 0x34
    d090:	33ff      	adds	r3, #255	; 0xff
    d092:	2108      	movs	r1, #8
    d094:	468c      	mov	ip, r1
    d096:	44bc      	add	ip, r7
    d098:	4463      	add	r3, ip
    d09a:	7819      	ldrb	r1, [r3, #0]
    d09c:	000b      	movs	r3, r1
    d09e:	005b      	lsls	r3, r3, #1
    d0a0:	185b      	adds	r3, r3, r1
    d0a2:	00db      	lsls	r3, r3, #3
    d0a4:	0019      	movs	r1, r3
    d0a6:	697b      	ldr	r3, [r7, #20]
    d0a8:	185b      	adds	r3, r3, r1
    d0aa:	2199      	movs	r1, #153	; 0x99
    d0ac:	0049      	lsls	r1, r1, #1
    d0ae:	2008      	movs	r0, #8
    d0b0:	4684      	mov	ip, r0
    d0b2:	44bc      	add	ip, r7
    d0b4:	4461      	add	r1, ip
    d0b6:	7809      	ldrb	r1, [r1, #0]
    d0b8:	0089      	lsls	r1, r1, #2
    d0ba:	58c8      	ldr	r0, [r1, r3]
    d0bc:	23a0      	movs	r3, #160	; 0xa0
    d0be:	2108      	movs	r1, #8
    d0c0:	1879      	adds	r1, r7, r1
    d0c2:	18c9      	adds	r1, r1, r3
    d0c4:	0013      	movs	r3, r2
    d0c6:	005b      	lsls	r3, r3, #1
    d0c8:	189b      	adds	r3, r3, r2
    d0ca:	005b      	lsls	r3, r3, #1
    d0cc:	191b      	adds	r3, r3, r4
    d0ce:	009b      	lsls	r3, r3, #2
    d0d0:	5058      	str	r0, [r3, r1]
						if (n < (f - 2))
    d0d2:	239a      	movs	r3, #154	; 0x9a
    d0d4:	005b      	lsls	r3, r3, #1
    d0d6:	2208      	movs	r2, #8
    d0d8:	4694      	mov	ip, r2
    d0da:	44bc      	add	ip, r7
    d0dc:	4463      	add	r3, ip
    d0de:	781a      	ldrb	r2, [r3, #0]
    d0e0:	4b99      	ldr	r3, [pc, #612]	; (d348 <inverse+0x39c>)
    d0e2:	219c      	movs	r1, #156	; 0x9c
    d0e4:	0049      	lsls	r1, r1, #1
    d0e6:	468c      	mov	ip, r1
    d0e8:	2108      	movs	r1, #8
    d0ea:	4688      	mov	r8, r1
    d0ec:	44b8      	add	r8, r7
    d0ee:	44c4      	add	ip, r8
    d0f0:	4463      	add	r3, ip
    d0f2:	781b      	ldrb	r3, [r3, #0]
    d0f4:	3b02      	subs	r3, #2
    d0f6:	429a      	cmp	r2, r3
    d0f8:	da0f      	bge.n	d11a <inverse+0x16e>
						n++;
    d0fa:	239a      	movs	r3, #154	; 0x9a
    d0fc:	005b      	lsls	r3, r3, #1
    d0fe:	2208      	movs	r2, #8
    d100:	4694      	mov	ip, r2
    d102:	44bc      	add	ip, r7
    d104:	4463      	add	r3, ip
    d106:	781a      	ldrb	r2, [r3, #0]
    d108:	239a      	movs	r3, #154	; 0x9a
    d10a:	005b      	lsls	r3, r3, #1
    d10c:	2108      	movs	r1, #8
    d10e:	468c      	mov	ip, r1
    d110:	44bc      	add	ip, r7
    d112:	4463      	add	r3, ip
    d114:	3201      	adds	r2, #1
    d116:	701a      	strb	r2, [r3, #0]
    d118:	e016      	b.n	d148 <inverse+0x19c>
						else
						{
							n = 0;
    d11a:	239a      	movs	r3, #154	; 0x9a
    d11c:	005b      	lsls	r3, r3, #1
    d11e:	2208      	movs	r2, #8
    d120:	4694      	mov	ip, r2
    d122:	44bc      	add	ip, r7
    d124:	4463      	add	r3, ip
    d126:	2200      	movs	r2, #0
    d128:	701a      	strb	r2, [r3, #0]
							m++;
    d12a:	2336      	movs	r3, #54	; 0x36
    d12c:	33ff      	adds	r3, #255	; 0xff
    d12e:	2208      	movs	r2, #8
    d130:	4694      	mov	ip, r2
    d132:	44bc      	add	ip, r7
    d134:	4463      	add	r3, ip
    d136:	781a      	ldrb	r2, [r3, #0]
    d138:	2336      	movs	r3, #54	; 0x36
    d13a:	33ff      	adds	r3, #255	; 0xff
    d13c:	2108      	movs	r1, #8
    d13e:	468c      	mov	ip, r1
    d140:	44bc      	add	ip, r7
    d142:	4463      	add	r3, ip
    d144:	3201      	adds	r2, #1
    d146:	701a      	strb	r2, [r3, #0]
				for (j = 0;j < f; j++)
    d148:	2399      	movs	r3, #153	; 0x99
    d14a:	005b      	lsls	r3, r3, #1
    d14c:	2208      	movs	r2, #8
    d14e:	4694      	mov	ip, r2
    d150:	44bc      	add	ip, r7
    d152:	4463      	add	r3, ip
    d154:	781a      	ldrb	r2, [r3, #0]
    d156:	2399      	movs	r3, #153	; 0x99
    d158:	005b      	lsls	r3, r3, #1
    d15a:	2108      	movs	r1, #8
    d15c:	468c      	mov	ip, r1
    d15e:	44bc      	add	ip, r7
    d160:	4463      	add	r3, ip
    d162:	3201      	adds	r2, #1
    d164:	701a      	strb	r2, [r3, #0]
    d166:	2399      	movs	r3, #153	; 0x99
    d168:	005b      	lsls	r3, r3, #1
    d16a:	2208      	movs	r2, #8
    d16c:	18ba      	adds	r2, r7, r2
    d16e:	18d2      	adds	r2, r2, r3
    d170:	4b75      	ldr	r3, [pc, #468]	; (d348 <inverse+0x39c>)
    d172:	219c      	movs	r1, #156	; 0x9c
    d174:	0049      	lsls	r1, r1, #1
    d176:	468c      	mov	ip, r1
    d178:	2108      	movs	r1, #8
    d17a:	4688      	mov	r8, r1
    d17c:	44b8      	add	r8, r7
    d17e:	44c4      	add	ip, r8
    d180:	4463      	add	r3, ip
    d182:	7812      	ldrb	r2, [r2, #0]
    d184:	781b      	ldrb	r3, [r3, #0]
    d186:	429a      	cmp	r2, r3
    d188:	d200      	bcs.n	d18c <inverse+0x1e0>
    d18a:	e754      	b.n	d036 <inverse+0x8a>
			for (i = 0;i < f; i++)
    d18c:	2334      	movs	r3, #52	; 0x34
    d18e:	33ff      	adds	r3, #255	; 0xff
    d190:	2208      	movs	r2, #8
    d192:	4694      	mov	ip, r2
    d194:	44bc      	add	ip, r7
    d196:	4463      	add	r3, ip
    d198:	781a      	ldrb	r2, [r3, #0]
    d19a:	2334      	movs	r3, #52	; 0x34
    d19c:	33ff      	adds	r3, #255	; 0xff
    d19e:	2108      	movs	r1, #8
    d1a0:	468c      	mov	ip, r1
    d1a2:	44bc      	add	ip, r7
    d1a4:	4463      	add	r3, ip
    d1a6:	3201      	adds	r2, #1
    d1a8:	701a      	strb	r2, [r3, #0]
    d1aa:	2334      	movs	r3, #52	; 0x34
    d1ac:	33ff      	adds	r3, #255	; 0xff
    d1ae:	2208      	movs	r2, #8
    d1b0:	18ba      	adds	r2, r7, r2
    d1b2:	18d2      	adds	r2, r2, r3
    d1b4:	4b64      	ldr	r3, [pc, #400]	; (d348 <inverse+0x39c>)
    d1b6:	219c      	movs	r1, #156	; 0x9c
    d1b8:	0049      	lsls	r1, r1, #1
    d1ba:	468c      	mov	ip, r1
    d1bc:	2108      	movs	r1, #8
    d1be:	4688      	mov	r8, r1
    d1c0:	44b8      	add	r8, r7
    d1c2:	44c4      	add	ip, r8
    d1c4:	4463      	add	r3, ip
    d1c6:	7812      	ldrb	r2, [r2, #0]
    d1c8:	781b      	ldrb	r3, [r3, #0]
    d1ca:	429a      	cmp	r2, r3
    d1cc:	d200      	bcs.n	d1d0 <inverse+0x224>
    d1ce:	e729      	b.n	d024 <inverse+0x78>
						}
					}
				}
			}
			fac[q][p] = pow(-1, q + p) * determinant(b, f - 1);
    d1d0:	239b      	movs	r3, #155	; 0x9b
    d1d2:	005b      	lsls	r3, r3, #1
    d1d4:	2208      	movs	r2, #8
    d1d6:	4694      	mov	ip, r2
    d1d8:	44bc      	add	ip, r7
    d1da:	4463      	add	r3, ip
    d1dc:	781c      	ldrb	r4, [r3, #0]
    d1de:	2338      	movs	r3, #56	; 0x38
    d1e0:	33ff      	adds	r3, #255	; 0xff
    d1e2:	2208      	movs	r2, #8
    d1e4:	4694      	mov	ip, r2
    d1e6:	44bc      	add	ip, r7
    d1e8:	4463      	add	r3, ip
    d1ea:	781d      	ldrb	r5, [r3, #0]
    d1ec:	239b      	movs	r3, #155	; 0x9b
    d1ee:	005b      	lsls	r3, r3, #1
    d1f0:	2208      	movs	r2, #8
    d1f2:	4694      	mov	ip, r2
    d1f4:	44bc      	add	ip, r7
    d1f6:	4463      	add	r3, ip
    d1f8:	781a      	ldrb	r2, [r3, #0]
    d1fa:	2338      	movs	r3, #56	; 0x38
    d1fc:	33ff      	adds	r3, #255	; 0xff
    d1fe:	2108      	movs	r1, #8
    d200:	468c      	mov	ip, r1
    d202:	44bc      	add	ip, r7
    d204:	4463      	add	r3, ip
    d206:	781b      	ldrb	r3, [r3, #0]
    d208:	18d2      	adds	r2, r2, r3
    d20a:	4b50      	ldr	r3, [pc, #320]	; (d34c <inverse+0x3a0>)
    d20c:	0010      	movs	r0, r2
    d20e:	4798      	blx	r3
    d210:	0002      	movs	r2, r0
    d212:	000b      	movs	r3, r1
    d214:	2000      	movs	r0, #0
    d216:	494e      	ldr	r1, [pc, #312]	; (d350 <inverse+0x3a4>)
    d218:	4e4e      	ldr	r6, [pc, #312]	; (d354 <inverse+0x3a8>)
    d21a:	47b0      	blx	r6
    d21c:	6038      	str	r0, [r7, #0]
    d21e:	6079      	str	r1, [r7, #4]
    d220:	4b49      	ldr	r3, [pc, #292]	; (d348 <inverse+0x39c>)
    d222:	229c      	movs	r2, #156	; 0x9c
    d224:	0052      	lsls	r2, r2, #1
    d226:	4694      	mov	ip, r2
    d228:	2208      	movs	r2, #8
    d22a:	4690      	mov	r8, r2
    d22c:	44b8      	add	r8, r7
    d22e:	44c4      	add	ip, r8
    d230:	4463      	add	r3, ip
    d232:	781b      	ldrb	r3, [r3, #0]
    d234:	3b01      	subs	r3, #1
    d236:	b2da      	uxtb	r2, r3
    d238:	23a0      	movs	r3, #160	; 0xa0
    d23a:	2108      	movs	r1, #8
    d23c:	468c      	mov	ip, r1
    d23e:	44bc      	add	ip, r7
    d240:	4463      	add	r3, ip
    d242:	0011      	movs	r1, r2
    d244:	0018      	movs	r0, r3
    d246:	4b44      	ldr	r3, [pc, #272]	; (d358 <inverse+0x3ac>)
    d248:	4798      	blx	r3
    d24a:	1c02      	adds	r2, r0, #0
    d24c:	4b43      	ldr	r3, [pc, #268]	; (d35c <inverse+0x3b0>)
    d24e:	1c10      	adds	r0, r2, #0
    d250:	4798      	blx	r3
    d252:	0002      	movs	r2, r0
    d254:	000b      	movs	r3, r1
    d256:	4e42      	ldr	r6, [pc, #264]	; (d360 <inverse+0x3b4>)
    d258:	6838      	ldr	r0, [r7, #0]
    d25a:	6879      	ldr	r1, [r7, #4]
    d25c:	47b0      	blx	r6
    d25e:	0002      	movs	r2, r0
    d260:	000b      	movs	r3, r1
    d262:	0011      	movs	r1, r2
    d264:	001a      	movs	r2, r3
    d266:	4b3f      	ldr	r3, [pc, #252]	; (d364 <inverse+0x3b8>)
    d268:	0008      	movs	r0, r1
    d26a:	0011      	movs	r1, r2
    d26c:	4798      	blx	r3
    d26e:	1c01      	adds	r1, r0, #0
    d270:	4b3d      	ldr	r3, [pc, #244]	; (d368 <inverse+0x3bc>)
    d272:	229c      	movs	r2, #156	; 0x9c
    d274:	0052      	lsls	r2, r2, #1
    d276:	2008      	movs	r0, #8
    d278:	4684      	mov	ip, r0
    d27a:	44bc      	add	ip, r7
    d27c:	4462      	add	r2, ip
    d27e:	18d2      	adds	r2, r2, r3
    d280:	0023      	movs	r3, r4
    d282:	005b      	lsls	r3, r3, #1
    d284:	191b      	adds	r3, r3, r4
    d286:	005b      	lsls	r3, r3, #1
    d288:	195b      	adds	r3, r3, r5
    d28a:	009b      	lsls	r3, r3, #2
    d28c:	5099      	str	r1, [r3, r2]
		for (p = 0;p < f; p++)
    d28e:	2338      	movs	r3, #56	; 0x38
    d290:	33ff      	adds	r3, #255	; 0xff
    d292:	2208      	movs	r2, #8
    d294:	4694      	mov	ip, r2
    d296:	44bc      	add	ip, r7
    d298:	4463      	add	r3, ip
    d29a:	781a      	ldrb	r2, [r3, #0]
    d29c:	2338      	movs	r3, #56	; 0x38
    d29e:	33ff      	adds	r3, #255	; 0xff
    d2a0:	2108      	movs	r1, #8
    d2a2:	468c      	mov	ip, r1
    d2a4:	44bc      	add	ip, r7
    d2a6:	4463      	add	r3, ip
    d2a8:	3201      	adds	r2, #1
    d2aa:	701a      	strb	r2, [r3, #0]
    d2ac:	2338      	movs	r3, #56	; 0x38
    d2ae:	33ff      	adds	r3, #255	; 0xff
    d2b0:	2208      	movs	r2, #8
    d2b2:	18ba      	adds	r2, r7, r2
    d2b4:	18d2      	adds	r2, r2, r3
    d2b6:	4b24      	ldr	r3, [pc, #144]	; (d348 <inverse+0x39c>)
    d2b8:	219c      	movs	r1, #156	; 0x9c
    d2ba:	0049      	lsls	r1, r1, #1
    d2bc:	468c      	mov	ip, r1
    d2be:	2108      	movs	r1, #8
    d2c0:	4688      	mov	r8, r1
    d2c2:	44b8      	add	r8, r7
    d2c4:	44c4      	add	ip, r8
    d2c6:	4463      	add	r3, ip
    d2c8:	7812      	ldrb	r2, [r2, #0]
    d2ca:	781b      	ldrb	r3, [r3, #0]
    d2cc:	429a      	cmp	r2, r3
    d2ce:	d200      	bcs.n	d2d2 <inverse+0x326>
    d2d0:	e68f      	b.n	cff2 <inverse+0x46>
	for (q = 0;q < f; q++)
    d2d2:	239b      	movs	r3, #155	; 0x9b
    d2d4:	005b      	lsls	r3, r3, #1
    d2d6:	2208      	movs	r2, #8
    d2d8:	4694      	mov	ip, r2
    d2da:	44bc      	add	ip, r7
    d2dc:	4463      	add	r3, ip
    d2de:	781a      	ldrb	r2, [r3, #0]
    d2e0:	239b      	movs	r3, #155	; 0x9b
    d2e2:	005b      	lsls	r3, r3, #1
    d2e4:	2108      	movs	r1, #8
    d2e6:	468c      	mov	ip, r1
    d2e8:	44bc      	add	ip, r7
    d2ea:	4463      	add	r3, ip
    d2ec:	3201      	adds	r2, #1
    d2ee:	701a      	strb	r2, [r3, #0]
    d2f0:	239b      	movs	r3, #155	; 0x9b
    d2f2:	005b      	lsls	r3, r3, #1
    d2f4:	2208      	movs	r2, #8
    d2f6:	18ba      	adds	r2, r7, r2
    d2f8:	18d2      	adds	r2, r2, r3
    d2fa:	4b13      	ldr	r3, [pc, #76]	; (d348 <inverse+0x39c>)
    d2fc:	219c      	movs	r1, #156	; 0x9c
    d2fe:	0049      	lsls	r1, r1, #1
    d300:	468c      	mov	ip, r1
    d302:	2108      	movs	r1, #8
    d304:	4688      	mov	r8, r1
    d306:	44b8      	add	r8, r7
    d308:	44c4      	add	ip, r8
    d30a:	4463      	add	r3, ip
    d30c:	7812      	ldrb	r2, [r2, #0]
    d30e:	781b      	ldrb	r3, [r3, #0]
    d310:	429a      	cmp	r2, r3
    d312:	d200      	bcs.n	d316 <inverse+0x36a>
    d314:	e664      	b.n	cfe0 <inverse+0x34>
		}
	}
	transpose(source, dest, fac, f);
    d316:	4b0c      	ldr	r3, [pc, #48]	; (d348 <inverse+0x39c>)
    d318:	229c      	movs	r2, #156	; 0x9c
    d31a:	0052      	lsls	r2, r2, #1
    d31c:	4694      	mov	ip, r2
    d31e:	2208      	movs	r2, #8
    d320:	4690      	mov	r8, r2
    d322:	44b8      	add	r8, r7
    d324:	44c4      	add	ip, r8
    d326:	4463      	add	r3, ip
    d328:	781b      	ldrb	r3, [r3, #0]
    d32a:	2210      	movs	r2, #16
    d32c:	2108      	movs	r1, #8
    d32e:	468c      	mov	ip, r1
    d330:	44bc      	add	ip, r7
    d332:	4462      	add	r2, ip
    d334:	6939      	ldr	r1, [r7, #16]
    d336:	6978      	ldr	r0, [r7, #20]
    d338:	4c0c      	ldr	r4, [pc, #48]	; (d36c <inverse+0x3c0>)
    d33a:	47a0      	blx	r4
}
    d33c:	46c0      	nop			; (mov r8, r8)
    d33e:	46bd      	mov	sp, r7
    d340:	b050      	add	sp, #320	; 0x140
    d342:	bc04      	pop	{r2}
    d344:	4690      	mov	r8, r2
    d346:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d348:	fffffecf 	.word	0xfffffecf
    d34c:	00020ca5 	.word	0x00020ca5
    d350:	bff00000 	.word	0xbff00000
    d354:	0001b749 	.word	0x0001b749
    d358:	0000d4c9 	.word	0x0000d4c9
    d35c:	00020d99 	.word	0x00020d99
    d360:	000200d1 	.word	0x000200d1
    d364:	00020e3d 	.word	0x00020e3d
    d368:	fffffed8 	.word	0xfffffed8
    d36c:	0000d371 	.word	0x0000d371

0000d370 <transpose>:
/*Finding transpose of matrix*/
void transpose(float source[6][6], float dest[6][6], float fac[6][6], uint8_t r)
{
    d370:	b5b0      	push	{r4, r5, r7, lr}
    d372:	b0aa      	sub	sp, #168	; 0xa8
    d374:	af00      	add	r7, sp, #0
    d376:	60f8      	str	r0, [r7, #12]
    d378:	60b9      	str	r1, [r7, #8]
    d37a:	607a      	str	r2, [r7, #4]
    d37c:	001a      	movs	r2, r3
    d37e:	1cfb      	adds	r3, r7, #3
    d380:	701a      	strb	r2, [r3, #0]
	uint8_t i, j;
	//r = 6;
	float b[6][6], d;
	
	for (i = 0;i < r; i++)
    d382:	23a7      	movs	r3, #167	; 0xa7
    d384:	18fb      	adds	r3, r7, r3
    d386:	2200      	movs	r2, #0
    d388:	701a      	strb	r2, [r3, #0]
    d38a:	e037      	b.n	d3fc <transpose+0x8c>
	{
		for (j = 0;j < r; j++)
    d38c:	23a6      	movs	r3, #166	; 0xa6
    d38e:	18fb      	adds	r3, r7, r3
    d390:	2200      	movs	r2, #0
    d392:	701a      	strb	r2, [r3, #0]
    d394:	e024      	b.n	d3e0 <transpose+0x70>
		{
			b[i][j] = fac[j][i];
    d396:	23a7      	movs	r3, #167	; 0xa7
    d398:	18fb      	adds	r3, r7, r3
    d39a:	781a      	ldrb	r2, [r3, #0]
    d39c:	23a6      	movs	r3, #166	; 0xa6
    d39e:	18fb      	adds	r3, r7, r3
    d3a0:	781c      	ldrb	r4, [r3, #0]
    d3a2:	23a6      	movs	r3, #166	; 0xa6
    d3a4:	18fb      	adds	r3, r7, r3
    d3a6:	7819      	ldrb	r1, [r3, #0]
    d3a8:	000b      	movs	r3, r1
    d3aa:	005b      	lsls	r3, r3, #1
    d3ac:	185b      	adds	r3, r3, r1
    d3ae:	00db      	lsls	r3, r3, #3
    d3b0:	0019      	movs	r1, r3
    d3b2:	687b      	ldr	r3, [r7, #4]
    d3b4:	185b      	adds	r3, r3, r1
    d3b6:	21a7      	movs	r1, #167	; 0xa7
    d3b8:	1879      	adds	r1, r7, r1
    d3ba:	7809      	ldrb	r1, [r1, #0]
    d3bc:	0089      	lsls	r1, r1, #2
    d3be:	58c8      	ldr	r0, [r1, r3]
    d3c0:	2310      	movs	r3, #16
    d3c2:	18f9      	adds	r1, r7, r3
    d3c4:	0013      	movs	r3, r2
    d3c6:	005b      	lsls	r3, r3, #1
    d3c8:	189b      	adds	r3, r3, r2
    d3ca:	005b      	lsls	r3, r3, #1
    d3cc:	191b      	adds	r3, r3, r4
    d3ce:	009b      	lsls	r3, r3, #2
    d3d0:	5058      	str	r0, [r3, r1]
		for (j = 0;j < r; j++)
    d3d2:	23a6      	movs	r3, #166	; 0xa6
    d3d4:	18fb      	adds	r3, r7, r3
    d3d6:	781a      	ldrb	r2, [r3, #0]
    d3d8:	23a6      	movs	r3, #166	; 0xa6
    d3da:	18fb      	adds	r3, r7, r3
    d3dc:	3201      	adds	r2, #1
    d3de:	701a      	strb	r2, [r3, #0]
    d3e0:	23a6      	movs	r3, #166	; 0xa6
    d3e2:	18fa      	adds	r2, r7, r3
    d3e4:	1cfb      	adds	r3, r7, #3
    d3e6:	7812      	ldrb	r2, [r2, #0]
    d3e8:	781b      	ldrb	r3, [r3, #0]
    d3ea:	429a      	cmp	r2, r3
    d3ec:	d3d3      	bcc.n	d396 <transpose+0x26>
	for (i = 0;i < r; i++)
    d3ee:	23a7      	movs	r3, #167	; 0xa7
    d3f0:	18fb      	adds	r3, r7, r3
    d3f2:	781a      	ldrb	r2, [r3, #0]
    d3f4:	23a7      	movs	r3, #167	; 0xa7
    d3f6:	18fb      	adds	r3, r7, r3
    d3f8:	3201      	adds	r2, #1
    d3fa:	701a      	strb	r2, [r3, #0]
    d3fc:	23a7      	movs	r3, #167	; 0xa7
    d3fe:	18fa      	adds	r2, r7, r3
    d400:	1cfb      	adds	r3, r7, #3
    d402:	7812      	ldrb	r2, [r2, #0]
    d404:	781b      	ldrb	r3, [r3, #0]
    d406:	429a      	cmp	r2, r3
    d408:	d3c0      	bcc.n	d38c <transpose+0x1c>
		}
	}

	
	d = determinant(source, r);
    d40a:	1cfb      	adds	r3, r7, #3
    d40c:	781a      	ldrb	r2, [r3, #0]
    d40e:	68fb      	ldr	r3, [r7, #12]
    d410:	0011      	movs	r1, r2
    d412:	0018      	movs	r0, r3
    d414:	4b2a      	ldr	r3, [pc, #168]	; (d4c0 <transpose+0x150>)
    d416:	4798      	blx	r3
    d418:	1c03      	adds	r3, r0, #0
    d41a:	22a0      	movs	r2, #160	; 0xa0
    d41c:	18ba      	adds	r2, r7, r2
    d41e:	6013      	str	r3, [r2, #0]
	for (i = 0;i < r; i++)
    d420:	23a7      	movs	r3, #167	; 0xa7
    d422:	18fb      	adds	r3, r7, r3
    d424:	2200      	movs	r2, #0
    d426:	701a      	strb	r2, [r3, #0]
    d428:	e03f      	b.n	d4aa <transpose+0x13a>
	{
		for (j = 0;j < r; j++)
    d42a:	23a6      	movs	r3, #166	; 0xa6
    d42c:	18fb      	adds	r3, r7, r3
    d42e:	2200      	movs	r2, #0
    d430:	701a      	strb	r2, [r3, #0]
    d432:	e02c      	b.n	d48e <transpose+0x11e>
		{
			dest[i][j] = b[i][j] / d;
    d434:	23a7      	movs	r3, #167	; 0xa7
    d436:	18fb      	adds	r3, r7, r3
    d438:	781a      	ldrb	r2, [r3, #0]
    d43a:	0013      	movs	r3, r2
    d43c:	005b      	lsls	r3, r3, #1
    d43e:	189b      	adds	r3, r3, r2
    d440:	00db      	lsls	r3, r3, #3
    d442:	001a      	movs	r2, r3
    d444:	68bb      	ldr	r3, [r7, #8]
    d446:	189c      	adds	r4, r3, r2
    d448:	23a6      	movs	r3, #166	; 0xa6
    d44a:	18fb      	adds	r3, r7, r3
    d44c:	781d      	ldrb	r5, [r3, #0]
    d44e:	23a7      	movs	r3, #167	; 0xa7
    d450:	18fb      	adds	r3, r7, r3
    d452:	781a      	ldrb	r2, [r3, #0]
    d454:	23a6      	movs	r3, #166	; 0xa6
    d456:	18fb      	adds	r3, r7, r3
    d458:	7818      	ldrb	r0, [r3, #0]
    d45a:	2310      	movs	r3, #16
    d45c:	18f9      	adds	r1, r7, r3
    d45e:	0013      	movs	r3, r2
    d460:	005b      	lsls	r3, r3, #1
    d462:	189b      	adds	r3, r3, r2
    d464:	005b      	lsls	r3, r3, #1
    d466:	181b      	adds	r3, r3, r0
    d468:	009b      	lsls	r3, r3, #2
    d46a:	585a      	ldr	r2, [r3, r1]
    d46c:	4b15      	ldr	r3, [pc, #84]	; (d4c4 <transpose+0x154>)
    d46e:	21a0      	movs	r1, #160	; 0xa0
    d470:	1879      	adds	r1, r7, r1
    d472:	6809      	ldr	r1, [r1, #0]
    d474:	1c10      	adds	r0, r2, #0
    d476:	4798      	blx	r3
    d478:	1c03      	adds	r3, r0, #0
    d47a:	1c1a      	adds	r2, r3, #0
    d47c:	00ab      	lsls	r3, r5, #2
    d47e:	511a      	str	r2, [r3, r4]
		for (j = 0;j < r; j++)
    d480:	23a6      	movs	r3, #166	; 0xa6
    d482:	18fb      	adds	r3, r7, r3
    d484:	781a      	ldrb	r2, [r3, #0]
    d486:	23a6      	movs	r3, #166	; 0xa6
    d488:	18fb      	adds	r3, r7, r3
    d48a:	3201      	adds	r2, #1
    d48c:	701a      	strb	r2, [r3, #0]
    d48e:	23a6      	movs	r3, #166	; 0xa6
    d490:	18fa      	adds	r2, r7, r3
    d492:	1cfb      	adds	r3, r7, #3
    d494:	7812      	ldrb	r2, [r2, #0]
    d496:	781b      	ldrb	r3, [r3, #0]
    d498:	429a      	cmp	r2, r3
    d49a:	d3cb      	bcc.n	d434 <transpose+0xc4>
	for (i = 0;i < r; i++)
    d49c:	23a7      	movs	r3, #167	; 0xa7
    d49e:	18fb      	adds	r3, r7, r3
    d4a0:	781a      	ldrb	r2, [r3, #0]
    d4a2:	23a7      	movs	r3, #167	; 0xa7
    d4a4:	18fb      	adds	r3, r7, r3
    d4a6:	3201      	adds	r2, #1
    d4a8:	701a      	strb	r2, [r3, #0]
    d4aa:	23a7      	movs	r3, #167	; 0xa7
    d4ac:	18fa      	adds	r2, r7, r3
    d4ae:	1cfb      	adds	r3, r7, #3
    d4b0:	7812      	ldrb	r2, [r2, #0]
    d4b2:	781b      	ldrb	r3, [r3, #0]
    d4b4:	429a      	cmp	r2, r3
    d4b6:	d3b8      	bcc.n	d42a <transpose+0xba>
		}
	}
	
}
    d4b8:	46c0      	nop			; (mov r8, r8)
    d4ba:	46bd      	mov	sp, r7
    d4bc:	b02a      	add	sp, #168	; 0xa8
    d4be:	bdb0      	pop	{r4, r5, r7, pc}
    d4c0:	0000d4c9 	.word	0x0000d4c9
    d4c4:	0001e785 	.word	0x0001e785

0000d4c8 <determinant>:


float determinant(float a[6][6], uint8_t k)
{
    d4c8:	b590      	push	{r4, r7, lr}
    d4ca:	b0ab      	sub	sp, #172	; 0xac
    d4cc:	af00      	add	r7, sp, #0
    d4ce:	6078      	str	r0, [r7, #4]
    d4d0:	000a      	movs	r2, r1
    d4d2:	1cfb      	adds	r3, r7, #3
    d4d4:	701a      	strb	r2, [r3, #0]
	float s = 1, det = 0, b[6][6];
    d4d6:	23fe      	movs	r3, #254	; 0xfe
    d4d8:	059b      	lsls	r3, r3, #22
    d4da:	22a4      	movs	r2, #164	; 0xa4
    d4dc:	18ba      	adds	r2, r7, r2
    d4de:	6013      	str	r3, [r2, #0]
    d4e0:	2300      	movs	r3, #0
    d4e2:	22a0      	movs	r2, #160	; 0xa0
    d4e4:	18ba      	adds	r2, r7, r2
    d4e6:	6013      	str	r3, [r2, #0]
	uint8_t i, j, m, n, c;
	if (k == 1)
    d4e8:	1cfb      	adds	r3, r7, #3
    d4ea:	781b      	ldrb	r3, [r3, #0]
    d4ec:	2b01      	cmp	r3, #1
    d4ee:	d102      	bne.n	d4f6 <determinant+0x2e>
	{
		return (a[0][0]);
    d4f0:	687b      	ldr	r3, [r7, #4]
    d4f2:	681b      	ldr	r3, [r3, #0]
    d4f4:	e0d0      	b.n	d698 <determinant+0x1d0>
	}
	else
	{
		det = 0;
    d4f6:	2300      	movs	r3, #0
    d4f8:	22a0      	movs	r2, #160	; 0xa0
    d4fa:	18ba      	adds	r2, r7, r2
    d4fc:	6013      	str	r3, [r2, #0]
		for (c = 0; c < k; c++)
    d4fe:	239b      	movs	r3, #155	; 0x9b
    d500:	18fb      	adds	r3, r7, r3
    d502:	2200      	movs	r2, #0
    d504:	701a      	strb	r2, [r3, #0]
    d506:	e0bc      	b.n	d682 <determinant+0x1ba>
		{
			m = 0;
    d508:	239d      	movs	r3, #157	; 0x9d
    d50a:	18fb      	adds	r3, r7, r3
    d50c:	2200      	movs	r2, #0
    d50e:	701a      	strb	r2, [r3, #0]
			n = 0;
    d510:	239c      	movs	r3, #156	; 0x9c
    d512:	18fb      	adds	r3, r7, r3
    d514:	2200      	movs	r2, #0
    d516:	701a      	strb	r2, [r3, #0]
			for (i = 0;i < k; i++)
    d518:	239f      	movs	r3, #159	; 0x9f
    d51a:	18fb      	adds	r3, r7, r3
    d51c:	2200      	movs	r2, #0
    d51e:	701a      	strb	r2, [r3, #0]
    d520:	e06f      	b.n	d602 <determinant+0x13a>
			{
				for (j = 0 ;j < k; j++)
    d522:	239e      	movs	r3, #158	; 0x9e
    d524:	18fb      	adds	r3, r7, r3
    d526:	2200      	movs	r2, #0
    d528:	701a      	strb	r2, [r3, #0]
    d52a:	e05c      	b.n	d5e6 <determinant+0x11e>
				{
					b[i][j] = 0;
    d52c:	239f      	movs	r3, #159	; 0x9f
    d52e:	18fb      	adds	r3, r7, r3
    d530:	781a      	ldrb	r2, [r3, #0]
    d532:	239e      	movs	r3, #158	; 0x9e
    d534:	18fb      	adds	r3, r7, r3
    d536:	7818      	ldrb	r0, [r3, #0]
    d538:	2308      	movs	r3, #8
    d53a:	18f9      	adds	r1, r7, r3
    d53c:	0013      	movs	r3, r2
    d53e:	005b      	lsls	r3, r3, #1
    d540:	189b      	adds	r3, r3, r2
    d542:	005b      	lsls	r3, r3, #1
    d544:	181b      	adds	r3, r3, r0
    d546:	009b      	lsls	r3, r3, #2
    d548:	2200      	movs	r2, #0
    d54a:	505a      	str	r2, [r3, r1]
					if (i != 0 && j != c)
    d54c:	239f      	movs	r3, #159	; 0x9f
    d54e:	18fb      	adds	r3, r7, r3
    d550:	781b      	ldrb	r3, [r3, #0]
    d552:	2b00      	cmp	r3, #0
    d554:	d040      	beq.n	d5d8 <determinant+0x110>
    d556:	239e      	movs	r3, #158	; 0x9e
    d558:	18fa      	adds	r2, r7, r3
    d55a:	239b      	movs	r3, #155	; 0x9b
    d55c:	18fb      	adds	r3, r7, r3
    d55e:	7812      	ldrb	r2, [r2, #0]
    d560:	781b      	ldrb	r3, [r3, #0]
    d562:	429a      	cmp	r2, r3
    d564:	d038      	beq.n	d5d8 <determinant+0x110>
					{
						b[m][n] = a[i][j];
    d566:	239d      	movs	r3, #157	; 0x9d
    d568:	18fb      	adds	r3, r7, r3
    d56a:	781a      	ldrb	r2, [r3, #0]
    d56c:	239c      	movs	r3, #156	; 0x9c
    d56e:	18fb      	adds	r3, r7, r3
    d570:	781c      	ldrb	r4, [r3, #0]
    d572:	239f      	movs	r3, #159	; 0x9f
    d574:	18fb      	adds	r3, r7, r3
    d576:	7819      	ldrb	r1, [r3, #0]
    d578:	000b      	movs	r3, r1
    d57a:	005b      	lsls	r3, r3, #1
    d57c:	185b      	adds	r3, r3, r1
    d57e:	00db      	lsls	r3, r3, #3
    d580:	0019      	movs	r1, r3
    d582:	687b      	ldr	r3, [r7, #4]
    d584:	185b      	adds	r3, r3, r1
    d586:	219e      	movs	r1, #158	; 0x9e
    d588:	1879      	adds	r1, r7, r1
    d58a:	7809      	ldrb	r1, [r1, #0]
    d58c:	0089      	lsls	r1, r1, #2
    d58e:	58c8      	ldr	r0, [r1, r3]
    d590:	2308      	movs	r3, #8
    d592:	18f9      	adds	r1, r7, r3
    d594:	0013      	movs	r3, r2
    d596:	005b      	lsls	r3, r3, #1
    d598:	189b      	adds	r3, r3, r2
    d59a:	005b      	lsls	r3, r3, #1
    d59c:	191b      	adds	r3, r3, r4
    d59e:	009b      	lsls	r3, r3, #2
    d5a0:	5058      	str	r0, [r3, r1]
						if (n < (k - 2))
    d5a2:	239c      	movs	r3, #156	; 0x9c
    d5a4:	18fb      	adds	r3, r7, r3
    d5a6:	781a      	ldrb	r2, [r3, #0]
    d5a8:	1cfb      	adds	r3, r7, #3
    d5aa:	781b      	ldrb	r3, [r3, #0]
    d5ac:	3b02      	subs	r3, #2
    d5ae:	429a      	cmp	r2, r3
    d5b0:	da07      	bge.n	d5c2 <determinant+0xfa>
						n++;
    d5b2:	239c      	movs	r3, #156	; 0x9c
    d5b4:	18fb      	adds	r3, r7, r3
    d5b6:	781a      	ldrb	r2, [r3, #0]
    d5b8:	239c      	movs	r3, #156	; 0x9c
    d5ba:	18fb      	adds	r3, r7, r3
    d5bc:	3201      	adds	r2, #1
    d5be:	701a      	strb	r2, [r3, #0]
    d5c0:	e00a      	b.n	d5d8 <determinant+0x110>
						else
						{
							n = 0;
    d5c2:	239c      	movs	r3, #156	; 0x9c
    d5c4:	18fb      	adds	r3, r7, r3
    d5c6:	2200      	movs	r2, #0
    d5c8:	701a      	strb	r2, [r3, #0]
							m++;
    d5ca:	239d      	movs	r3, #157	; 0x9d
    d5cc:	18fb      	adds	r3, r7, r3
    d5ce:	781a      	ldrb	r2, [r3, #0]
    d5d0:	239d      	movs	r3, #157	; 0x9d
    d5d2:	18fb      	adds	r3, r7, r3
    d5d4:	3201      	adds	r2, #1
    d5d6:	701a      	strb	r2, [r3, #0]
				for (j = 0 ;j < k; j++)
    d5d8:	239e      	movs	r3, #158	; 0x9e
    d5da:	18fb      	adds	r3, r7, r3
    d5dc:	781a      	ldrb	r2, [r3, #0]
    d5de:	239e      	movs	r3, #158	; 0x9e
    d5e0:	18fb      	adds	r3, r7, r3
    d5e2:	3201      	adds	r2, #1
    d5e4:	701a      	strb	r2, [r3, #0]
    d5e6:	239e      	movs	r3, #158	; 0x9e
    d5e8:	18fa      	adds	r2, r7, r3
    d5ea:	1cfb      	adds	r3, r7, #3
    d5ec:	7812      	ldrb	r2, [r2, #0]
    d5ee:	781b      	ldrb	r3, [r3, #0]
    d5f0:	429a      	cmp	r2, r3
    d5f2:	d39b      	bcc.n	d52c <determinant+0x64>
			for (i = 0;i < k; i++)
    d5f4:	239f      	movs	r3, #159	; 0x9f
    d5f6:	18fb      	adds	r3, r7, r3
    d5f8:	781a      	ldrb	r2, [r3, #0]
    d5fa:	239f      	movs	r3, #159	; 0x9f
    d5fc:	18fb      	adds	r3, r7, r3
    d5fe:	3201      	adds	r2, #1
    d600:	701a      	strb	r2, [r3, #0]
    d602:	239f      	movs	r3, #159	; 0x9f
    d604:	18fa      	adds	r2, r7, r3
    d606:	1cfb      	adds	r3, r7, #3
    d608:	7812      	ldrb	r2, [r2, #0]
    d60a:	781b      	ldrb	r3, [r3, #0]
    d60c:	429a      	cmp	r2, r3
    d60e:	d388      	bcc.n	d522 <determinant+0x5a>
						}
					}
				}
			}
			det = det + s * (a[0][c] * determinant(b, k - 1));
    d610:	239b      	movs	r3, #155	; 0x9b
    d612:	18fb      	adds	r3, r7, r3
    d614:	781a      	ldrb	r2, [r3, #0]
    d616:	687b      	ldr	r3, [r7, #4]
    d618:	0092      	lsls	r2, r2, #2
    d61a:	58d4      	ldr	r4, [r2, r3]
    d61c:	1cfb      	adds	r3, r7, #3
    d61e:	781b      	ldrb	r3, [r3, #0]
    d620:	3b01      	subs	r3, #1
    d622:	b2da      	uxtb	r2, r3
    d624:	2308      	movs	r3, #8
    d626:	18fb      	adds	r3, r7, r3
    d628:	0011      	movs	r1, r2
    d62a:	0018      	movs	r0, r3
    d62c:	f7ff ff4c 	bl	d4c8 <determinant>
    d630:	1c02      	adds	r2, r0, #0
    d632:	4b1b      	ldr	r3, [pc, #108]	; (d6a0 <determinant+0x1d8>)
    d634:	1c11      	adds	r1, r2, #0
    d636:	1c20      	adds	r0, r4, #0
    d638:	4798      	blx	r3
    d63a:	1c03      	adds	r3, r0, #0
    d63c:	1c1a      	adds	r2, r3, #0
    d63e:	4b18      	ldr	r3, [pc, #96]	; (d6a0 <determinant+0x1d8>)
    d640:	21a4      	movs	r1, #164	; 0xa4
    d642:	1879      	adds	r1, r7, r1
    d644:	6809      	ldr	r1, [r1, #0]
    d646:	1c10      	adds	r0, r2, #0
    d648:	4798      	blx	r3
    d64a:	1c03      	adds	r3, r0, #0
    d64c:	1c1a      	adds	r2, r3, #0
    d64e:	4b15      	ldr	r3, [pc, #84]	; (d6a4 <determinant+0x1dc>)
    d650:	1c11      	adds	r1, r2, #0
    d652:	22a0      	movs	r2, #160	; 0xa0
    d654:	18ba      	adds	r2, r7, r2
    d656:	6810      	ldr	r0, [r2, #0]
    d658:	4798      	blx	r3
    d65a:	1c03      	adds	r3, r0, #0
    d65c:	22a0      	movs	r2, #160	; 0xa0
    d65e:	18ba      	adds	r2, r7, r2
    d660:	6013      	str	r3, [r2, #0]
			s = -1 * s;
    d662:	23a4      	movs	r3, #164	; 0xa4
    d664:	18fb      	adds	r3, r7, r3
    d666:	681b      	ldr	r3, [r3, #0]
    d668:	2280      	movs	r2, #128	; 0x80
    d66a:	0612      	lsls	r2, r2, #24
    d66c:	4053      	eors	r3, r2
    d66e:	22a4      	movs	r2, #164	; 0xa4
    d670:	18ba      	adds	r2, r7, r2
    d672:	6013      	str	r3, [r2, #0]
		for (c = 0; c < k; c++)
    d674:	239b      	movs	r3, #155	; 0x9b
    d676:	18fb      	adds	r3, r7, r3
    d678:	781a      	ldrb	r2, [r3, #0]
    d67a:	239b      	movs	r3, #155	; 0x9b
    d67c:	18fb      	adds	r3, r7, r3
    d67e:	3201      	adds	r2, #1
    d680:	701a      	strb	r2, [r3, #0]
    d682:	239b      	movs	r3, #155	; 0x9b
    d684:	18fa      	adds	r2, r7, r3
    d686:	1cfb      	adds	r3, r7, #3
    d688:	7812      	ldrb	r2, [r2, #0]
    d68a:	781b      	ldrb	r3, [r3, #0]
    d68c:	429a      	cmp	r2, r3
    d68e:	d200      	bcs.n	d692 <determinant+0x1ca>
    d690:	e73a      	b.n	d508 <determinant+0x40>
		}
	}
	
	return (det);
    d692:	23a0      	movs	r3, #160	; 0xa0
    d694:	18fb      	adds	r3, r7, r3
    d696:	681b      	ldr	r3, [r3, #0]
}
    d698:	1c18      	adds	r0, r3, #0
    d69a:	46bd      	mov	sp, r7
    d69c:	b02b      	add	sp, #172	; 0xac
    d69e:	bd90      	pop	{r4, r7, pc}
    d6a0:	0001eb65 	.word	0x0001eb65
    d6a4:	0001e461 	.word	0x0001e461

0000d6a8 <system_pinmux_get_group_from_gpio_pin>:
{
    d6a8:	b580      	push	{r7, lr}
    d6aa:	b084      	sub	sp, #16
    d6ac:	af00      	add	r7, sp, #0
    d6ae:	0002      	movs	r2, r0
    d6b0:	1dfb      	adds	r3, r7, #7
    d6b2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    d6b4:	230f      	movs	r3, #15
    d6b6:	18fb      	adds	r3, r7, r3
    d6b8:	1dfa      	adds	r2, r7, #7
    d6ba:	7812      	ldrb	r2, [r2, #0]
    d6bc:	09d2      	lsrs	r2, r2, #7
    d6be:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    d6c0:	230e      	movs	r3, #14
    d6c2:	18fb      	adds	r3, r7, r3
    d6c4:	1dfa      	adds	r2, r7, #7
    d6c6:	7812      	ldrb	r2, [r2, #0]
    d6c8:	0952      	lsrs	r2, r2, #5
    d6ca:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    d6cc:	4b0d      	ldr	r3, [pc, #52]	; (d704 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    d6ce:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    d6d0:	230f      	movs	r3, #15
    d6d2:	18fb      	adds	r3, r7, r3
    d6d4:	781b      	ldrb	r3, [r3, #0]
    d6d6:	2b00      	cmp	r3, #0
    d6d8:	d10f      	bne.n	d6fa <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    d6da:	230f      	movs	r3, #15
    d6dc:	18fb      	adds	r3, r7, r3
    d6de:	781b      	ldrb	r3, [r3, #0]
    d6e0:	009b      	lsls	r3, r3, #2
    d6e2:	2210      	movs	r2, #16
    d6e4:	4694      	mov	ip, r2
    d6e6:	44bc      	add	ip, r7
    d6e8:	4463      	add	r3, ip
    d6ea:	3b08      	subs	r3, #8
    d6ec:	681a      	ldr	r2, [r3, #0]
    d6ee:	230e      	movs	r3, #14
    d6f0:	18fb      	adds	r3, r7, r3
    d6f2:	781b      	ldrb	r3, [r3, #0]
    d6f4:	01db      	lsls	r3, r3, #7
    d6f6:	18d3      	adds	r3, r2, r3
    d6f8:	e000      	b.n	d6fc <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    d6fa:	2300      	movs	r3, #0
}
    d6fc:	0018      	movs	r0, r3
    d6fe:	46bd      	mov	sp, r7
    d700:	b004      	add	sp, #16
    d702:	bd80      	pop	{r7, pc}
    d704:	40002800 	.word	0x40002800

0000d708 <port_get_group_from_gpio_pin>:
{
    d708:	b580      	push	{r7, lr}
    d70a:	b082      	sub	sp, #8
    d70c:	af00      	add	r7, sp, #0
    d70e:	0002      	movs	r2, r0
    d710:	1dfb      	adds	r3, r7, #7
    d712:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    d714:	1dfb      	adds	r3, r7, #7
    d716:	781b      	ldrb	r3, [r3, #0]
    d718:	0018      	movs	r0, r3
    d71a:	4b03      	ldr	r3, [pc, #12]	; (d728 <port_get_group_from_gpio_pin+0x20>)
    d71c:	4798      	blx	r3
    d71e:	0003      	movs	r3, r0
}
    d720:	0018      	movs	r0, r3
    d722:	46bd      	mov	sp, r7
    d724:	b002      	add	sp, #8
    d726:	bd80      	pop	{r7, pc}
    d728:	0000d6a9 	.word	0x0000d6a9

0000d72c <port_get_config_defaults>:
{
    d72c:	b580      	push	{r7, lr}
    d72e:	b082      	sub	sp, #8
    d730:	af00      	add	r7, sp, #0
    d732:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    d734:	687b      	ldr	r3, [r7, #4]
    d736:	2200      	movs	r2, #0
    d738:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    d73a:	687b      	ldr	r3, [r7, #4]
    d73c:	2201      	movs	r2, #1
    d73e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    d740:	687b      	ldr	r3, [r7, #4]
    d742:	2200      	movs	r2, #0
    d744:	709a      	strb	r2, [r3, #2]
}
    d746:	46c0      	nop			; (mov r8, r8)
    d748:	46bd      	mov	sp, r7
    d74a:	b002      	add	sp, #8
    d74c:	bd80      	pop	{r7, pc}
	...

0000d750 <port_pin_set_output_level>:
{
    d750:	b580      	push	{r7, lr}
    d752:	b084      	sub	sp, #16
    d754:	af00      	add	r7, sp, #0
    d756:	0002      	movs	r2, r0
    d758:	1dfb      	adds	r3, r7, #7
    d75a:	701a      	strb	r2, [r3, #0]
    d75c:	1dbb      	adds	r3, r7, #6
    d75e:	1c0a      	adds	r2, r1, #0
    d760:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    d762:	1dfb      	adds	r3, r7, #7
    d764:	781b      	ldrb	r3, [r3, #0]
    d766:	0018      	movs	r0, r3
    d768:	4b0d      	ldr	r3, [pc, #52]	; (d7a0 <port_pin_set_output_level+0x50>)
    d76a:	4798      	blx	r3
    d76c:	0003      	movs	r3, r0
    d76e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d770:	1dfb      	adds	r3, r7, #7
    d772:	781b      	ldrb	r3, [r3, #0]
    d774:	221f      	movs	r2, #31
    d776:	4013      	ands	r3, r2
    d778:	2201      	movs	r2, #1
    d77a:	409a      	lsls	r2, r3
    d77c:	0013      	movs	r3, r2
    d77e:	60bb      	str	r3, [r7, #8]
	if (level) {
    d780:	1dbb      	adds	r3, r7, #6
    d782:	781b      	ldrb	r3, [r3, #0]
    d784:	2b00      	cmp	r3, #0
    d786:	d003      	beq.n	d790 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    d788:	68fb      	ldr	r3, [r7, #12]
    d78a:	68ba      	ldr	r2, [r7, #8]
    d78c:	619a      	str	r2, [r3, #24]
}
    d78e:	e002      	b.n	d796 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    d790:	68fb      	ldr	r3, [r7, #12]
    d792:	68ba      	ldr	r2, [r7, #8]
    d794:	615a      	str	r2, [r3, #20]
}
    d796:	46c0      	nop			; (mov r8, r8)
    d798:	46bd      	mov	sp, r7
    d79a:	b004      	add	sp, #16
    d79c:	bd80      	pop	{r7, pc}
    d79e:	46c0      	nop			; (mov r8, r8)
    d7a0:	0000d709 	.word	0x0000d709

0000d7a4 <system_interrupt_enable>:
{
    d7a4:	b580      	push	{r7, lr}
    d7a6:	b082      	sub	sp, #8
    d7a8:	af00      	add	r7, sp, #0
    d7aa:	0002      	movs	r2, r0
    d7ac:	1dfb      	adds	r3, r7, #7
    d7ae:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    d7b0:	4b06      	ldr	r3, [pc, #24]	; (d7cc <system_interrupt_enable+0x28>)
    d7b2:	1dfa      	adds	r2, r7, #7
    d7b4:	7812      	ldrb	r2, [r2, #0]
    d7b6:	0011      	movs	r1, r2
    d7b8:	221f      	movs	r2, #31
    d7ba:	400a      	ands	r2, r1
    d7bc:	2101      	movs	r1, #1
    d7be:	4091      	lsls	r1, r2
    d7c0:	000a      	movs	r2, r1
    d7c2:	601a      	str	r2, [r3, #0]
}
    d7c4:	46c0      	nop			; (mov r8, r8)
    d7c6:	46bd      	mov	sp, r7
    d7c8:	b002      	add	sp, #8
    d7ca:	bd80      	pop	{r7, pc}
    d7cc:	e000e100 	.word	0xe000e100

0000d7d0 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    d7d0:	b580      	push	{r7, lr}
    d7d2:	b082      	sub	sp, #8
    d7d4:	af00      	add	r7, sp, #0
    d7d6:	0002      	movs	r2, r0
    d7d8:	1dfb      	adds	r3, r7, #7
    d7da:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    d7dc:	4a07      	ldr	r2, [pc, #28]	; (d7fc <system_interrupt_disable+0x2c>)
    d7de:	1dfb      	adds	r3, r7, #7
    d7e0:	781b      	ldrb	r3, [r3, #0]
    d7e2:	0019      	movs	r1, r3
    d7e4:	231f      	movs	r3, #31
    d7e6:	400b      	ands	r3, r1
    d7e8:	2101      	movs	r1, #1
    d7ea:	4099      	lsls	r1, r3
    d7ec:	000b      	movs	r3, r1
    d7ee:	0019      	movs	r1, r3
    d7f0:	2380      	movs	r3, #128	; 0x80
    d7f2:	50d1      	str	r1, [r2, r3]
}
    d7f4:	46c0      	nop			; (mov r8, r8)
    d7f6:	46bd      	mov	sp, r7
    d7f8:	b002      	add	sp, #8
    d7fa:	bd80      	pop	{r7, pc}
    d7fc:	e000e100 	.word	0xe000e100

0000d800 <i2c_master_is_syncing>:
{
    d800:	b580      	push	{r7, lr}
    d802:	b084      	sub	sp, #16
    d804:	af00      	add	r7, sp, #0
    d806:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    d808:	687b      	ldr	r3, [r7, #4]
    d80a:	681b      	ldr	r3, [r3, #0]
    d80c:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    d80e:	68fb      	ldr	r3, [r7, #12]
    d810:	69db      	ldr	r3, [r3, #28]
    d812:	2207      	movs	r2, #7
    d814:	4013      	ands	r3, r2
    d816:	1e5a      	subs	r2, r3, #1
    d818:	4193      	sbcs	r3, r2
    d81a:	b2db      	uxtb	r3, r3
}
    d81c:	0018      	movs	r0, r3
    d81e:	46bd      	mov	sp, r7
    d820:	b004      	add	sp, #16
    d822:	bd80      	pop	{r7, pc}

0000d824 <_i2c_master_wait_for_sync>:
{
    d824:	b580      	push	{r7, lr}
    d826:	b082      	sub	sp, #8
    d828:	af00      	add	r7, sp, #0
    d82a:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    d82c:	46c0      	nop			; (mov r8, r8)
    d82e:	687b      	ldr	r3, [r7, #4]
    d830:	0018      	movs	r0, r3
    d832:	4b04      	ldr	r3, [pc, #16]	; (d844 <_i2c_master_wait_for_sync+0x20>)
    d834:	4798      	blx	r3
    d836:	1e03      	subs	r3, r0, #0
    d838:	d1f9      	bne.n	d82e <_i2c_master_wait_for_sync+0xa>
}
    d83a:	46c0      	nop			; (mov r8, r8)
    d83c:	46bd      	mov	sp, r7
    d83e:	b002      	add	sp, #8
    d840:	bd80      	pop	{r7, pc}
    d842:	46c0      	nop			; (mov r8, r8)
    d844:	0000d801 	.word	0x0000d801

0000d848 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
    d848:	b580      	push	{r7, lr}
    d84a:	b082      	sub	sp, #8
    d84c:	af00      	add	r7, sp, #0
    d84e:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    d850:	687b      	ldr	r3, [r7, #4]
    d852:	2264      	movs	r2, #100	; 0x64
    d854:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    d856:	687b      	ldr	r3, [r7, #4]
    d858:	4a1b      	ldr	r2, [pc, #108]	; (d8c8 <i2c_master_get_config_defaults+0x80>)
    d85a:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    d85c:	687b      	ldr	r3, [r7, #4]
    d85e:	2200      	movs	r2, #0
    d860:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    d862:	687b      	ldr	r3, [r7, #4]
    d864:	2200      	movs	r2, #0
    d866:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    d868:	687b      	ldr	r3, [r7, #4]
    d86a:	2200      	movs	r2, #0
    d86c:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    d86e:	687b      	ldr	r3, [r7, #4]
    d870:	2280      	movs	r2, #128	; 0x80
    d872:	0392      	lsls	r2, r2, #14
    d874:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
    d876:	687b      	ldr	r3, [r7, #4]
    d878:	2201      	movs	r2, #1
    d87a:	4252      	negs	r2, r2
    d87c:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    d87e:	687b      	ldr	r3, [r7, #4]
    d880:	2201      	movs	r2, #1
    d882:	4252      	negs	r2, r2
    d884:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    d886:	687b      	ldr	r3, [r7, #4]
    d888:	2200      	movs	r2, #0
    d88a:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    d88c:	687b      	ldr	r3, [r7, #4]
    d88e:	2200      	movs	r2, #0
    d890:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    d892:	687b      	ldr	r3, [r7, #4]
    d894:	2224      	movs	r2, #36	; 0x24
    d896:	2100      	movs	r1, #0
    d898:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    d89a:	687b      	ldr	r3, [r7, #4]
    d89c:	2200      	movs	r2, #0
    d89e:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    d8a0:	687b      	ldr	r3, [r7, #4]
    d8a2:	222c      	movs	r2, #44	; 0x2c
    d8a4:	2100      	movs	r1, #0
    d8a6:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    d8a8:	687b      	ldr	r3, [r7, #4]
    d8aa:	222d      	movs	r2, #45	; 0x2d
    d8ac:	2100      	movs	r1, #0
    d8ae:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    d8b0:	687b      	ldr	r3, [r7, #4]
    d8b2:	222e      	movs	r2, #46	; 0x2e
    d8b4:	2100      	movs	r1, #0
    d8b6:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    d8b8:	687b      	ldr	r3, [r7, #4]
    d8ba:	22d7      	movs	r2, #215	; 0xd7
    d8bc:	861a      	strh	r2, [r3, #48]	; 0x30
}
    d8be:	46c0      	nop			; (mov r8, r8)
    d8c0:	46bd      	mov	sp, r7
    d8c2:	b002      	add	sp, #8
    d8c4:	bd80      	pop	{r7, pc}
    d8c6:	46c0      	nop			; (mov r8, r8)
    d8c8:	00000d48 	.word	0x00000d48

0000d8cc <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
    d8cc:	b580      	push	{r7, lr}
    d8ce:	b084      	sub	sp, #16
    d8d0:	af00      	add	r7, sp, #0
    d8d2:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    d8d4:	687b      	ldr	r3, [r7, #4]
    d8d6:	681b      	ldr	r3, [r3, #0]
    d8d8:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
    d8da:	2300      	movs	r3, #0
    d8dc:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    d8de:	687b      	ldr	r3, [r7, #4]
    d8e0:	0018      	movs	r0, r3
    d8e2:	4b14      	ldr	r3, [pc, #80]	; (d934 <i2c_master_enable+0x68>)
    d8e4:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    d8e6:	68bb      	ldr	r3, [r7, #8]
    d8e8:	681b      	ldr	r3, [r3, #0]
    d8ea:	2202      	movs	r2, #2
    d8ec:	431a      	orrs	r2, r3
    d8ee:	68bb      	ldr	r3, [r7, #8]
    d8f0:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    d8f2:	687b      	ldr	r3, [r7, #4]
    d8f4:	681b      	ldr	r3, [r3, #0]
    d8f6:	0018      	movs	r0, r3
    d8f8:	4b0f      	ldr	r3, [pc, #60]	; (d938 <i2c_master_enable+0x6c>)
    d8fa:	4798      	blx	r3
    d8fc:	0003      	movs	r3, r0
    d8fe:	0018      	movs	r0, r3
    d900:	4b0e      	ldr	r3, [pc, #56]	; (d93c <i2c_master_enable+0x70>)
    d902:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    d904:	e00c      	b.n	d920 <i2c_master_enable+0x54>
		timeout_counter++;
    d906:	68fb      	ldr	r3, [r7, #12]
    d908:	3301      	adds	r3, #1
    d90a:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    d90c:	687b      	ldr	r3, [r7, #4]
    d90e:	88db      	ldrh	r3, [r3, #6]
    d910:	001a      	movs	r2, r3
    d912:	68fb      	ldr	r3, [r7, #12]
    d914:	429a      	cmp	r2, r3
    d916:	d803      	bhi.n	d920 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    d918:	68bb      	ldr	r3, [r7, #8]
    d91a:	2210      	movs	r2, #16
    d91c:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
    d91e:	e006      	b.n	d92e <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    d920:	68bb      	ldr	r3, [r7, #8]
    d922:	8b5b      	ldrh	r3, [r3, #26]
    d924:	b29b      	uxth	r3, r3
    d926:	001a      	movs	r2, r3
    d928:	2310      	movs	r3, #16
    d92a:	4013      	ands	r3, r2
    d92c:	d0eb      	beq.n	d906 <i2c_master_enable+0x3a>
		}
	}
}
    d92e:	46bd      	mov	sp, r7
    d930:	b004      	add	sp, #16
    d932:	bd80      	pop	{r7, pc}
    d934:	0000d825 	.word	0x0000d825
    d938:	00006381 	.word	0x00006381
    d93c:	0000d7a5 	.word	0x0000d7a5

0000d940 <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
    d940:	b580      	push	{r7, lr}
    d942:	b084      	sub	sp, #16
    d944:	af00      	add	r7, sp, #0
    d946:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    d948:	687b      	ldr	r3, [r7, #4]
    d94a:	681b      	ldr	r3, [r3, #0]
    d94c:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    d94e:	687b      	ldr	r3, [r7, #4]
    d950:	681b      	ldr	r3, [r3, #0]
    d952:	0018      	movs	r0, r3
    d954:	4b0d      	ldr	r3, [pc, #52]	; (d98c <i2c_master_disable+0x4c>)
    d956:	4798      	blx	r3
    d958:	0003      	movs	r3, r0
    d95a:	0018      	movs	r0, r3
    d95c:	4b0c      	ldr	r3, [pc, #48]	; (d990 <i2c_master_disable+0x50>)
    d95e:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    d960:	687b      	ldr	r3, [r7, #4]
    d962:	0018      	movs	r0, r3
    d964:	4b0b      	ldr	r3, [pc, #44]	; (d994 <i2c_master_disable+0x54>)
    d966:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    d968:	68fb      	ldr	r3, [r7, #12]
    d96a:	2283      	movs	r2, #131	; 0x83
    d96c:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    d96e:	68fb      	ldr	r3, [r7, #12]
    d970:	2283      	movs	r2, #131	; 0x83
    d972:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    d974:	68fb      	ldr	r3, [r7, #12]
    d976:	681b      	ldr	r3, [r3, #0]
    d978:	2202      	movs	r2, #2
    d97a:	4393      	bics	r3, r2
    d97c:	001a      	movs	r2, r3
    d97e:	68fb      	ldr	r3, [r7, #12]
    d980:	601a      	str	r2, [r3, #0]

}
    d982:	46c0      	nop			; (mov r8, r8)
    d984:	46bd      	mov	sp, r7
    d986:	b004      	add	sp, #16
    d988:	bd80      	pop	{r7, pc}
    d98a:	46c0      	nop			; (mov r8, r8)
    d98c:	00006381 	.word	0x00006381
    d990:	0000d7d1 	.word	0x0000d7d1
    d994:	0000d825 	.word	0x0000d825

0000d998 <spi_is_syncing>:
{
    d998:	b580      	push	{r7, lr}
    d99a:	b084      	sub	sp, #16
    d99c:	af00      	add	r7, sp, #0
    d99e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    d9a0:	687b      	ldr	r3, [r7, #4]
    d9a2:	681b      	ldr	r3, [r3, #0]
    d9a4:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
    d9a6:	68fb      	ldr	r3, [r7, #12]
    d9a8:	69db      	ldr	r3, [r3, #28]
    d9aa:	1e5a      	subs	r2, r3, #1
    d9ac:	4193      	sbcs	r3, r2
    d9ae:	b2db      	uxtb	r3, r3
}
    d9b0:	0018      	movs	r0, r3
    d9b2:	46bd      	mov	sp, r7
    d9b4:	b004      	add	sp, #16
    d9b6:	bd80      	pop	{r7, pc}

0000d9b8 <spi_get_config_defaults>:
{
    d9b8:	b580      	push	{r7, lr}
    d9ba:	b082      	sub	sp, #8
    d9bc:	af00      	add	r7, sp, #0
    d9be:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
    d9c0:	687b      	ldr	r3, [r7, #4]
    d9c2:	2201      	movs	r2, #1
    d9c4:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    d9c6:	687b      	ldr	r3, [r7, #4]
    d9c8:	2200      	movs	r2, #0
    d9ca:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    d9cc:	687b      	ldr	r3, [r7, #4]
    d9ce:	2200      	movs	r2, #0
    d9d0:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    d9d2:	687b      	ldr	r3, [r7, #4]
    d9d4:	22c0      	movs	r2, #192	; 0xc0
    d9d6:	0392      	lsls	r2, r2, #14
    d9d8:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    d9da:	687b      	ldr	r3, [r7, #4]
    d9dc:	2200      	movs	r2, #0
    d9de:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    d9e0:	687b      	ldr	r3, [r7, #4]
    d9e2:	2200      	movs	r2, #0
    d9e4:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    d9e6:	687b      	ldr	r3, [r7, #4]
    d9e8:	2201      	movs	r2, #1
    d9ea:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
    d9ec:	687b      	ldr	r3, [r7, #4]
    d9ee:	2201      	movs	r2, #1
    d9f0:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
    d9f2:	687b      	ldr	r3, [r7, #4]
    d9f4:	2200      	movs	r2, #0
    d9f6:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
    d9f8:	687b      	ldr	r3, [r7, #4]
    d9fa:	2224      	movs	r2, #36	; 0x24
    d9fc:	2100      	movs	r1, #0
    d9fe:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    da00:	687b      	ldr	r3, [r7, #4]
    da02:	3318      	adds	r3, #24
    da04:	220c      	movs	r2, #12
    da06:	2100      	movs	r1, #0
    da08:	0018      	movs	r0, r3
    da0a:	4b0a      	ldr	r3, [pc, #40]	; (da34 <spi_get_config_defaults+0x7c>)
    da0c:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
    da0e:	687b      	ldr	r3, [r7, #4]
    da10:	4a09      	ldr	r2, [pc, #36]	; (da38 <spi_get_config_defaults+0x80>)
    da12:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
    da14:	687b      	ldr	r3, [r7, #4]
    da16:	2200      	movs	r2, #0
    da18:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    da1a:	687b      	ldr	r3, [r7, #4]
    da1c:	2200      	movs	r2, #0
    da1e:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    da20:	687b      	ldr	r3, [r7, #4]
    da22:	2200      	movs	r2, #0
    da24:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    da26:	687b      	ldr	r3, [r7, #4]
    da28:	2200      	movs	r2, #0
    da2a:	635a      	str	r2, [r3, #52]	; 0x34
};
    da2c:	46c0      	nop			; (mov r8, r8)
    da2e:	46bd      	mov	sp, r7
    da30:	b002      	add	sp, #8
    da32:	bd80      	pop	{r7, pc}
    da34:	00021029 	.word	0x00021029
    da38:	000186a0 	.word	0x000186a0

0000da3c <spi_slave_inst_get_config_defaults>:
{
    da3c:	b580      	push	{r7, lr}
    da3e:	b082      	sub	sp, #8
    da40:	af00      	add	r7, sp, #0
    da42:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
    da44:	687b      	ldr	r3, [r7, #4]
    da46:	220a      	movs	r2, #10
    da48:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    da4a:	687b      	ldr	r3, [r7, #4]
    da4c:	2200      	movs	r2, #0
    da4e:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    da50:	687b      	ldr	r3, [r7, #4]
    da52:	2200      	movs	r2, #0
    da54:	709a      	strb	r2, [r3, #2]
}
    da56:	46c0      	nop			; (mov r8, r8)
    da58:	46bd      	mov	sp, r7
    da5a:	b002      	add	sp, #8
    da5c:	bd80      	pop	{r7, pc}
	...

0000da60 <spi_attach_slave>:
{
    da60:	b580      	push	{r7, lr}
    da62:	b084      	sub	sp, #16
    da64:	af00      	add	r7, sp, #0
    da66:	6078      	str	r0, [r7, #4]
    da68:	6039      	str	r1, [r7, #0]
	slave->ss_pin          = config->ss_pin;
    da6a:	683b      	ldr	r3, [r7, #0]
    da6c:	781a      	ldrb	r2, [r3, #0]
    da6e:	687b      	ldr	r3, [r7, #4]
    da70:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    da72:	683b      	ldr	r3, [r7, #0]
    da74:	785a      	ldrb	r2, [r3, #1]
    da76:	687b      	ldr	r3, [r7, #4]
    da78:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    da7a:	683b      	ldr	r3, [r7, #0]
    da7c:	789a      	ldrb	r2, [r3, #2]
    da7e:	687b      	ldr	r3, [r7, #4]
    da80:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
    da82:	230c      	movs	r3, #12
    da84:	18fb      	adds	r3, r7, r3
    da86:	0018      	movs	r0, r3
    da88:	4b0b      	ldr	r3, [pc, #44]	; (dab8 <spi_attach_slave+0x58>)
    da8a:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    da8c:	230c      	movs	r3, #12
    da8e:	18fb      	adds	r3, r7, r3
    da90:	2201      	movs	r2, #1
    da92:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    da94:	687b      	ldr	r3, [r7, #4]
    da96:	781b      	ldrb	r3, [r3, #0]
    da98:	220c      	movs	r2, #12
    da9a:	18ba      	adds	r2, r7, r2
    da9c:	0011      	movs	r1, r2
    da9e:	0018      	movs	r0, r3
    daa0:	4b06      	ldr	r3, [pc, #24]	; (dabc <spi_attach_slave+0x5c>)
    daa2:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    daa4:	687b      	ldr	r3, [r7, #4]
    daa6:	781b      	ldrb	r3, [r3, #0]
    daa8:	2101      	movs	r1, #1
    daaa:	0018      	movs	r0, r3
    daac:	4b04      	ldr	r3, [pc, #16]	; (dac0 <spi_attach_slave+0x60>)
    daae:	4798      	blx	r3
}
    dab0:	46c0      	nop			; (mov r8, r8)
    dab2:	46bd      	mov	sp, r7
    dab4:	b004      	add	sp, #16
    dab6:	bd80      	pop	{r7, pc}
    dab8:	0000d72d 	.word	0x0000d72d
    dabc:	0001559d 	.word	0x0001559d
    dac0:	0000d751 	.word	0x0000d751

0000dac4 <spi_enable>:
{
    dac4:	b580      	push	{r7, lr}
    dac6:	b084      	sub	sp, #16
    dac8:	af00      	add	r7, sp, #0
    daca:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    dacc:	687b      	ldr	r3, [r7, #4]
    dace:	681b      	ldr	r3, [r3, #0]
    dad0:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    dad2:	687b      	ldr	r3, [r7, #4]
    dad4:	681b      	ldr	r3, [r3, #0]
    dad6:	0018      	movs	r0, r3
    dad8:	4b0b      	ldr	r3, [pc, #44]	; (db08 <spi_enable+0x44>)
    dada:	4798      	blx	r3
    dadc:	0003      	movs	r3, r0
    dade:	0018      	movs	r0, r3
    dae0:	4b0a      	ldr	r3, [pc, #40]	; (db0c <spi_enable+0x48>)
    dae2:	4798      	blx	r3
	while (spi_is_syncing(module)) {
    dae4:	46c0      	nop			; (mov r8, r8)
    dae6:	687b      	ldr	r3, [r7, #4]
    dae8:	0018      	movs	r0, r3
    daea:	4b09      	ldr	r3, [pc, #36]	; (db10 <spi_enable+0x4c>)
    daec:	4798      	blx	r3
    daee:	1e03      	subs	r3, r0, #0
    daf0:	d1f9      	bne.n	dae6 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    daf2:	68fb      	ldr	r3, [r7, #12]
    daf4:	681b      	ldr	r3, [r3, #0]
    daf6:	2202      	movs	r2, #2
    daf8:	431a      	orrs	r2, r3
    dafa:	68fb      	ldr	r3, [r7, #12]
    dafc:	601a      	str	r2, [r3, #0]
}
    dafe:	46c0      	nop			; (mov r8, r8)
    db00:	46bd      	mov	sp, r7
    db02:	b004      	add	sp, #16
    db04:	bd80      	pop	{r7, pc}
    db06:	46c0      	nop			; (mov r8, r8)
    db08:	00006381 	.word	0x00006381
    db0c:	0000d7a5 	.word	0x0000d7a5
    db10:	0000d999 	.word	0x0000d999

0000db14 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
    db14:	b580      	push	{r7, lr}
    db16:	b084      	sub	sp, #16
    db18:	af00      	add	r7, sp, #0
    db1a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    db1c:	687b      	ldr	r3, [r7, #4]
    db1e:	681b      	ldr	r3, [r3, #0]
    db20:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    db22:	687b      	ldr	r3, [r7, #4]
    db24:	681b      	ldr	r3, [r3, #0]
    db26:	0018      	movs	r0, r3
    db28:	4b0e      	ldr	r3, [pc, #56]	; (db64 <spi_disable+0x50>)
    db2a:	4798      	blx	r3
    db2c:	0003      	movs	r3, r0
    db2e:	0018      	movs	r0, r3
    db30:	4b0d      	ldr	r3, [pc, #52]	; (db68 <spi_disable+0x54>)
    db32:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    db34:	46c0      	nop			; (mov r8, r8)
    db36:	687b      	ldr	r3, [r7, #4]
    db38:	0018      	movs	r0, r3
    db3a:	4b0c      	ldr	r3, [pc, #48]	; (db6c <spi_disable+0x58>)
    db3c:	4798      	blx	r3
    db3e:	1e03      	subs	r3, r0, #0
    db40:	d1f9      	bne.n	db36 <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    db42:	68fb      	ldr	r3, [r7, #12]
    db44:	228f      	movs	r2, #143	; 0x8f
    db46:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    db48:	68fb      	ldr	r3, [r7, #12]
    db4a:	228f      	movs	r2, #143	; 0x8f
    db4c:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    db4e:	68fb      	ldr	r3, [r7, #12]
    db50:	681b      	ldr	r3, [r3, #0]
    db52:	2202      	movs	r2, #2
    db54:	4393      	bics	r3, r2
    db56:	001a      	movs	r2, r3
    db58:	68fb      	ldr	r3, [r7, #12]
    db5a:	601a      	str	r2, [r3, #0]
}
    db5c:	46c0      	nop			; (mov r8, r8)
    db5e:	46bd      	mov	sp, r7
    db60:	b004      	add	sp, #16
    db62:	bd80      	pop	{r7, pc}
    db64:	00006381 	.word	0x00006381
    db68:	0000d7d1 	.word	0x0000d7d1
    db6c:	0000d999 	.word	0x0000d999

0000db70 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    db70:	b580      	push	{r7, lr}
    db72:	b084      	sub	sp, #16
    db74:	af00      	add	r7, sp, #0
    db76:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    db78:	687b      	ldr	r3, [r7, #4]
    db7a:	681b      	ldr	r3, [r3, #0]
    db7c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    db7e:	68fb      	ldr	r3, [r7, #12]
    db80:	7e1b      	ldrb	r3, [r3, #24]
    db82:	b2db      	uxtb	r3, r3
    db84:	001a      	movs	r2, r3
    db86:	2304      	movs	r3, #4
    db88:	4013      	ands	r3, r2
    db8a:	1e5a      	subs	r2, r3, #1
    db8c:	4193      	sbcs	r3, r2
    db8e:	b2db      	uxtb	r3, r3
}
    db90:	0018      	movs	r0, r3
    db92:	46bd      	mov	sp, r7
    db94:	b004      	add	sp, #16
    db96:	bd80      	pop	{r7, pc}

0000db98 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    db98:	b580      	push	{r7, lr}
    db9a:	b084      	sub	sp, #16
    db9c:	af00      	add	r7, sp, #0
    db9e:	6078      	str	r0, [r7, #4]
    dba0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    dba2:	687b      	ldr	r3, [r7, #4]
    dba4:	681b      	ldr	r3, [r3, #0]
    dba6:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    dba8:	687b      	ldr	r3, [r7, #4]
    dbaa:	0018      	movs	r0, r3
    dbac:	4b1b      	ldr	r3, [pc, #108]	; (dc1c <spi_read+0x84>)
    dbae:	4798      	blx	r3
    dbb0:	0003      	movs	r3, r0
    dbb2:	001a      	movs	r2, r3
    dbb4:	2301      	movs	r3, #1
    dbb6:	4053      	eors	r3, r2
    dbb8:	b2db      	uxtb	r3, r3
    dbba:	2b00      	cmp	r3, #0
    dbbc:	d001      	beq.n	dbc2 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    dbbe:	2310      	movs	r3, #16
    dbc0:	e027      	b.n	dc12 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    dbc2:	230f      	movs	r3, #15
    dbc4:	18fb      	adds	r3, r7, r3
    dbc6:	2200      	movs	r2, #0
    dbc8:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    dbca:	68bb      	ldr	r3, [r7, #8]
    dbcc:	8b5b      	ldrh	r3, [r3, #26]
    dbce:	b29b      	uxth	r3, r3
    dbd0:	001a      	movs	r2, r3
    dbd2:	2304      	movs	r3, #4
    dbd4:	4013      	ands	r3, r2
    dbd6:	d006      	beq.n	dbe6 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    dbd8:	230f      	movs	r3, #15
    dbda:	18fb      	adds	r3, r7, r3
    dbdc:	221e      	movs	r2, #30
    dbde:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    dbe0:	68bb      	ldr	r3, [r7, #8]
    dbe2:	2204      	movs	r2, #4
    dbe4:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    dbe6:	687b      	ldr	r3, [r7, #4]
    dbe8:	799b      	ldrb	r3, [r3, #6]
    dbea:	2b01      	cmp	r3, #1
    dbec:	d108      	bne.n	dc00 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    dbee:	68bb      	ldr	r3, [r7, #8]
    dbf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dbf2:	b29b      	uxth	r3, r3
    dbf4:	05db      	lsls	r3, r3, #23
    dbf6:	0ddb      	lsrs	r3, r3, #23
    dbf8:	b29a      	uxth	r2, r3
    dbfa:	683b      	ldr	r3, [r7, #0]
    dbfc:	801a      	strh	r2, [r3, #0]
    dbfe:	e005      	b.n	dc0c <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    dc00:	68bb      	ldr	r3, [r7, #8]
    dc02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dc04:	b2db      	uxtb	r3, r3
    dc06:	b29a      	uxth	r2, r3
    dc08:	683b      	ldr	r3, [r7, #0]
    dc0a:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    dc0c:	230f      	movs	r3, #15
    dc0e:	18fb      	adds	r3, r7, r3
    dc10:	781b      	ldrb	r3, [r3, #0]
}
    dc12:	0018      	movs	r0, r3
    dc14:	46bd      	mov	sp, r7
    dc16:	b004      	add	sp, #16
    dc18:	bd80      	pop	{r7, pc}
    dc1a:	46c0      	nop			; (mov r8, r8)
    dc1c:	0000db71 	.word	0x0000db71

0000dc20 <usart_is_syncing>:
{
    dc20:	b580      	push	{r7, lr}
    dc22:	b084      	sub	sp, #16
    dc24:	af00      	add	r7, sp, #0
    dc26:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    dc28:	687b      	ldr	r3, [r7, #4]
    dc2a:	681b      	ldr	r3, [r3, #0]
    dc2c:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    dc2e:	68fb      	ldr	r3, [r7, #12]
    dc30:	69db      	ldr	r3, [r3, #28]
    dc32:	1e5a      	subs	r2, r3, #1
    dc34:	4193      	sbcs	r3, r2
    dc36:	b2db      	uxtb	r3, r3
}
    dc38:	0018      	movs	r0, r3
    dc3a:	46bd      	mov	sp, r7
    dc3c:	b004      	add	sp, #16
    dc3e:	bd80      	pop	{r7, pc}

0000dc40 <_usart_wait_for_sync>:
{
    dc40:	b580      	push	{r7, lr}
    dc42:	b082      	sub	sp, #8
    dc44:	af00      	add	r7, sp, #0
    dc46:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    dc48:	46c0      	nop			; (mov r8, r8)
    dc4a:	687b      	ldr	r3, [r7, #4]
    dc4c:	0018      	movs	r0, r3
    dc4e:	4b04      	ldr	r3, [pc, #16]	; (dc60 <_usart_wait_for_sync+0x20>)
    dc50:	4798      	blx	r3
    dc52:	1e03      	subs	r3, r0, #0
    dc54:	d1f9      	bne.n	dc4a <_usart_wait_for_sync+0xa>
}
    dc56:	46c0      	nop			; (mov r8, r8)
    dc58:	46bd      	mov	sp, r7
    dc5a:	b002      	add	sp, #8
    dc5c:	bd80      	pop	{r7, pc}
    dc5e:	46c0      	nop			; (mov r8, r8)
    dc60:	0000dc21 	.word	0x0000dc21

0000dc64 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    dc64:	b580      	push	{r7, lr}
    dc66:	b082      	sub	sp, #8
    dc68:	af00      	add	r7, sp, #0
    dc6a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    dc6c:	687b      	ldr	r3, [r7, #4]
    dc6e:	2280      	movs	r2, #128	; 0x80
    dc70:	05d2      	lsls	r2, r2, #23
    dc72:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    dc74:	687b      	ldr	r3, [r7, #4]
    dc76:	2200      	movs	r2, #0
    dc78:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    dc7a:	687b      	ldr	r3, [r7, #4]
    dc7c:	22ff      	movs	r2, #255	; 0xff
    dc7e:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    dc80:	687b      	ldr	r3, [r7, #4]
    dc82:	2200      	movs	r2, #0
    dc84:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    dc86:	687b      	ldr	r3, [r7, #4]
    dc88:	2200      	movs	r2, #0
    dc8a:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    dc8c:	687b      	ldr	r3, [r7, #4]
    dc8e:	2296      	movs	r2, #150	; 0x96
    dc90:	0192      	lsls	r2, r2, #6
    dc92:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    dc94:	687b      	ldr	r3, [r7, #4]
    dc96:	2224      	movs	r2, #36	; 0x24
    dc98:	2101      	movs	r1, #1
    dc9a:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    dc9c:	687b      	ldr	r3, [r7, #4]
    dc9e:	2225      	movs	r2, #37	; 0x25
    dca0:	2101      	movs	r1, #1
    dca2:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    dca4:	687b      	ldr	r3, [r7, #4]
    dca6:	2226      	movs	r2, #38	; 0x26
    dca8:	2100      	movs	r1, #0
    dcaa:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    dcac:	687b      	ldr	r3, [r7, #4]
    dcae:	2227      	movs	r2, #39	; 0x27
    dcb0:	2100      	movs	r1, #0
    dcb2:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    dcb4:	687b      	ldr	r3, [r7, #4]
    dcb6:	2200      	movs	r2, #0
    dcb8:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    dcba:	687b      	ldr	r3, [r7, #4]
    dcbc:	2288      	movs	r2, #136	; 0x88
    dcbe:	0352      	lsls	r2, r2, #13
    dcc0:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    dcc2:	687b      	ldr	r3, [r7, #4]
    dcc4:	222c      	movs	r2, #44	; 0x2c
    dcc6:	2100      	movs	r1, #0
    dcc8:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    dcca:	687b      	ldr	r3, [r7, #4]
    dccc:	222d      	movs	r2, #45	; 0x2d
    dcce:	2100      	movs	r1, #0
    dcd0:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    dcd2:	687b      	ldr	r3, [r7, #4]
    dcd4:	2200      	movs	r2, #0
    dcd6:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    dcd8:	687b      	ldr	r3, [r7, #4]
    dcda:	2200      	movs	r2, #0
    dcdc:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    dcde:	687b      	ldr	r3, [r7, #4]
    dce0:	2200      	movs	r2, #0
    dce2:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    dce4:	687b      	ldr	r3, [r7, #4]
    dce6:	2200      	movs	r2, #0
    dce8:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    dcea:	687b      	ldr	r3, [r7, #4]
    dcec:	2200      	movs	r2, #0
    dcee:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    dcf0:	687b      	ldr	r3, [r7, #4]
    dcf2:	2200      	movs	r2, #0
    dcf4:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    dcf6:	687b      	ldr	r3, [r7, #4]
    dcf8:	2200      	movs	r2, #0
    dcfa:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    dcfc:	687b      	ldr	r3, [r7, #4]
    dcfe:	2200      	movs	r2, #0
    dd00:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    dd02:	687b      	ldr	r3, [r7, #4]
    dd04:	2200      	movs	r2, #0
    dd06:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    dd08:	687b      	ldr	r3, [r7, #4]
    dd0a:	2200      	movs	r2, #0
    dd0c:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    dd0e:	687b      	ldr	r3, [r7, #4]
    dd10:	2213      	movs	r2, #19
    dd12:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    dd14:	687b      	ldr	r3, [r7, #4]
    dd16:	2200      	movs	r2, #0
    dd18:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    dd1a:	46c0      	nop			; (mov r8, r8)
    dd1c:	46bd      	mov	sp, r7
    dd1e:	b002      	add	sp, #8
    dd20:	bd80      	pop	{r7, pc}
	...

0000dd24 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    dd24:	b580      	push	{r7, lr}
    dd26:	b084      	sub	sp, #16
    dd28:	af00      	add	r7, sp, #0
    dd2a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    dd2c:	687b      	ldr	r3, [r7, #4]
    dd2e:	681b      	ldr	r3, [r3, #0]
    dd30:	60fb      	str	r3, [r7, #12]
	
	// Added by Kfausnight 4/27/2019**************************************
	// Check to see if uart module is disabled first
	bool enabled = usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE;
    dd32:	68fb      	ldr	r3, [r7, #12]
    dd34:	681b      	ldr	r3, [r3, #0]
    dd36:	2202      	movs	r2, #2
    dd38:	401a      	ands	r2, r3
    dd3a:	230b      	movs	r3, #11
    dd3c:	18fb      	adds	r3, r7, r3
    dd3e:	1e51      	subs	r1, r2, #1
    dd40:	418a      	sbcs	r2, r1
    dd42:	701a      	strb	r2, [r3, #0]
	if (enabled){
    dd44:	230b      	movs	r3, #11
    dd46:	18fb      	adds	r3, r7, r3
    dd48:	781b      	ldrb	r3, [r3, #0]
    dd4a:	2b00      	cmp	r3, #0
    dd4c:	d113      	bne.n	dd76 <usart_enable+0x52>
	//*******************************************************************
	
	
#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    dd4e:	687b      	ldr	r3, [r7, #4]
    dd50:	681b      	ldr	r3, [r3, #0]
    dd52:	0018      	movs	r0, r3
    dd54:	4b0a      	ldr	r3, [pc, #40]	; (dd80 <usart_enable+0x5c>)
    dd56:	4798      	blx	r3
    dd58:	0003      	movs	r3, r0
    dd5a:	0018      	movs	r0, r3
    dd5c:	4b09      	ldr	r3, [pc, #36]	; (dd84 <usart_enable+0x60>)
    dd5e:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    dd60:	687b      	ldr	r3, [r7, #4]
    dd62:	0018      	movs	r0, r3
    dd64:	4b08      	ldr	r3, [pc, #32]	; (dd88 <usart_enable+0x64>)
    dd66:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    dd68:	68fb      	ldr	r3, [r7, #12]
    dd6a:	681b      	ldr	r3, [r3, #0]
    dd6c:	2202      	movs	r2, #2
    dd6e:	431a      	orrs	r2, r3
    dd70:	68fb      	ldr	r3, [r7, #12]
    dd72:	601a      	str	r2, [r3, #0]
    dd74:	e000      	b.n	dd78 <usart_enable+0x54>
		return;
    dd76:	46c0      	nop			; (mov r8, r8)
}
    dd78:	46bd      	mov	sp, r7
    dd7a:	b004      	add	sp, #16
    dd7c:	bd80      	pop	{r7, pc}
    dd7e:	46c0      	nop			; (mov r8, r8)
    dd80:	00006381 	.word	0x00006381
    dd84:	0000d7a5 	.word	0x0000d7a5
    dd88:	0000dc41 	.word	0x0000dc41

0000dd8c <usart_disable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_disable(
		const struct usart_module *const module)
{
    dd8c:	b580      	push	{r7, lr}
    dd8e:	b084      	sub	sp, #16
    dd90:	af00      	add	r7, sp, #0
    dd92:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    dd94:	687b      	ldr	r3, [r7, #4]
    dd96:	681b      	ldr	r3, [r3, #0]
    dd98:	60fb      	str	r3, [r7, #12]
	
	// Added by Kfausnight 4/27/2019**************************************
	// Check to see if uart module is enabled first
	bool enabled = usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE;
    dd9a:	68fb      	ldr	r3, [r7, #12]
    dd9c:	681b      	ldr	r3, [r3, #0]
    dd9e:	2202      	movs	r2, #2
    dda0:	401a      	ands	r2, r3
    dda2:	230b      	movs	r3, #11
    dda4:	18fb      	adds	r3, r7, r3
    dda6:	1e51      	subs	r1, r2, #1
    dda8:	418a      	sbcs	r2, r1
    ddaa:	701a      	strb	r2, [r3, #0]
	if (!enabled){
    ddac:	230b      	movs	r3, #11
    ddae:	18fb      	adds	r3, r7, r3
    ddb0:	781b      	ldrb	r3, [r3, #0]
    ddb2:	2201      	movs	r2, #1
    ddb4:	4053      	eors	r3, r2
    ddb6:	b2db      	uxtb	r3, r3
    ddb8:	2b00      	cmp	r3, #0
    ddba:	d114      	bne.n	dde6 <usart_disable+0x5a>
	}
	//*******************************************************************

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    ddbc:	687b      	ldr	r3, [r7, #4]
    ddbe:	681b      	ldr	r3, [r3, #0]
    ddc0:	0018      	movs	r0, r3
    ddc2:	4b0b      	ldr	r3, [pc, #44]	; (ddf0 <usart_disable+0x64>)
    ddc4:	4798      	blx	r3
    ddc6:	0003      	movs	r3, r0
    ddc8:	0018      	movs	r0, r3
    ddca:	4b0a      	ldr	r3, [pc, #40]	; (ddf4 <usart_disable+0x68>)
    ddcc:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    ddce:	687b      	ldr	r3, [r7, #4]
    ddd0:	0018      	movs	r0, r3
    ddd2:	4b09      	ldr	r3, [pc, #36]	; (ddf8 <usart_disable+0x6c>)
    ddd4:	4798      	blx	r3

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    ddd6:	68fb      	ldr	r3, [r7, #12]
    ddd8:	681b      	ldr	r3, [r3, #0]
    ddda:	2202      	movs	r2, #2
    dddc:	4393      	bics	r3, r2
    ddde:	001a      	movs	r2, r3
    dde0:	68fb      	ldr	r3, [r7, #12]
    dde2:	601a      	str	r2, [r3, #0]
    dde4:	e000      	b.n	dde8 <usart_disable+0x5c>
		return;
    dde6:	46c0      	nop			; (mov r8, r8)
}
    dde8:	46bd      	mov	sp, r7
    ddea:	b004      	add	sp, #16
    ddec:	bd80      	pop	{r7, pc}
    ddee:	46c0      	nop			; (mov r8, r8)
    ddf0:	00006381 	.word	0x00006381
    ddf4:	0000d7d1 	.word	0x0000d7d1
    ddf8:	0000dc41 	.word	0x0000dc41

0000ddfc <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
    ddfc:	b580      	push	{r7, lr}
    ddfe:	b082      	sub	sp, #8
    de00:	af00      	add	r7, sp, #0
    de02:	6078      	str	r0, [r7, #4]
    de04:	000a      	movs	r2, r1
    de06:	1cfb      	adds	r3, r7, #3
    de08:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    de0a:	687b      	ldr	r3, [r7, #4]
    de0c:	2231      	movs	r2, #49	; 0x31
    de0e:	5c9b      	ldrb	r3, [r3, r2]
    de10:	b25a      	sxtb	r2, r3
    de12:	1cfb      	adds	r3, r7, #3
    de14:	781b      	ldrb	r3, [r3, #0]
    de16:	2101      	movs	r1, #1
    de18:	4099      	lsls	r1, r3
    de1a:	000b      	movs	r3, r1
    de1c:	b25b      	sxtb	r3, r3
    de1e:	4313      	orrs	r3, r2
    de20:	b25b      	sxtb	r3, r3
    de22:	b2d9      	uxtb	r1, r3
    de24:	687b      	ldr	r3, [r7, #4]
    de26:	2231      	movs	r2, #49	; 0x31
    de28:	5499      	strb	r1, [r3, r2]

}
    de2a:	46c0      	nop			; (mov r8, r8)
    de2c:	46bd      	mov	sp, r7
    de2e:	b002      	add	sp, #8
    de30:	bd80      	pop	{r7, pc}
	...

0000de34 <disable_comms>:
volatile bool LaserReceiveComplete;
volatile enum LASER_MESSAGE_TYPE laserCurrentMessage;


//Disable
void disable_comms(void){
    de34:	b580      	push	{r7, lr}
    de36:	af00      	add	r7, sp, #0
	i2c_master_disable(&i2c_master_instance);
    de38:	4b0a      	ldr	r3, [pc, #40]	; (de64 <disable_comms+0x30>)
    de3a:	0018      	movs	r0, r3
    de3c:	4b0a      	ldr	r3, [pc, #40]	; (de68 <disable_comms+0x34>)
    de3e:	4798      	blx	r3
	spi_disable(&spi_main);
    de40:	4b0a      	ldr	r3, [pc, #40]	; (de6c <disable_comms+0x38>)
    de42:	0018      	movs	r0, r3
    de44:	4b0a      	ldr	r3, [pc, #40]	; (de70 <disable_comms+0x3c>)
    de46:	4798      	blx	r3
	usart_disable(&usart_laser);
    de48:	4b0a      	ldr	r3, [pc, #40]	; (de74 <disable_comms+0x40>)
    de4a:	0018      	movs	r0, r3
    de4c:	4b0a      	ldr	r3, [pc, #40]	; (de78 <disable_comms+0x44>)
    de4e:	4798      	blx	r3
	usart_disable(&usart_BLE);
    de50:	4b0a      	ldr	r3, [pc, #40]	; (de7c <disable_comms+0x48>)
    de52:	0018      	movs	r0, r3
    de54:	4b08      	ldr	r3, [pc, #32]	; (de78 <disable_comms+0x44>)
    de56:	4798      	blx	r3
	USART_BLE_enabled = false;
    de58:	4b09      	ldr	r3, [pc, #36]	; (de80 <disable_comms+0x4c>)
    de5a:	2200      	movs	r2, #0
    de5c:	701a      	strb	r2, [r3, #0]
}
    de5e:	46c0      	nop			; (mov r8, r8)
    de60:	46bd      	mov	sp, r7
    de62:	bd80      	pop	{r7, pc}
    de64:	200010e0 	.word	0x200010e0
    de68:	0000d941 	.word	0x0000d941
    de6c:	200010a4 	.word	0x200010a4
    de70:	0000db15 	.word	0x0000db15
    de74:	20001054 	.word	0x20001054
    de78:	0000dd8d 	.word	0x0000dd8d
    de7c:	20001194 	.word	0x20001194
    de80:	20003b8c 	.word	0x20003b8c

0000de84 <setup_spi>:


//SPI
//***************************************

void setup_spi(void){
    de84:	b580      	push	{r7, lr}
    de86:	b082      	sub	sp, #8
    de88:	af00      	add	r7, sp, #0
	uint8_t *reg_ptr;
	
	struct spi_slave_inst_config slave_dev_config;
	
	// Set buffer-overflow status to display immediately so it can be cleared:
	reg_ptr=0x42001001;
    de8a:	4b32      	ldr	r3, [pc, #200]	; (df54 <setup_spi+0xd0>)
    de8c:	607b      	str	r3, [r7, #4]
	*reg_ptr=0x01;
    de8e:	687b      	ldr	r3, [r7, #4]
    de90:	2201      	movs	r2, #1
    de92:	701a      	strb	r2, [r3, #0]
	// Configure and initialize software device instance of peripheral slave
	spi_slave_inst_get_config_defaults(&slave_dev_config);
    de94:	003b      	movs	r3, r7
    de96:	0018      	movs	r0, r3
    de98:	4b2f      	ldr	r3, [pc, #188]	; (df58 <setup_spi+0xd4>)
    de9a:	4798      	blx	r3
	slave_dev_config.ss_pin = lcd_SS;
    de9c:	003b      	movs	r3, r7
    de9e:	2217      	movs	r2, #23
    dea0:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_lcd, &slave_dev_config);
    dea2:	003a      	movs	r2, r7
    dea4:	4b2d      	ldr	r3, [pc, #180]	; (df5c <setup_spi+0xd8>)
    dea6:	0011      	movs	r1, r2
    dea8:	0018      	movs	r0, r3
    deaa:	4b2d      	ldr	r3, [pc, #180]	; (df60 <setup_spi+0xdc>)
    deac:	4798      	blx	r3
	slave_dev_config.ss_pin = acc1_SS;
    deae:	003b      	movs	r3, r7
    deb0:	2212      	movs	r2, #18
    deb2:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_acc1, &slave_dev_config);
    deb4:	003a      	movs	r2, r7
    deb6:	4b2b      	ldr	r3, [pc, #172]	; (df64 <setup_spi+0xe0>)
    deb8:	0011      	movs	r1, r2
    deba:	0018      	movs	r0, r3
    debc:	4b28      	ldr	r3, [pc, #160]	; (df60 <setup_spi+0xdc>)
    debe:	4798      	blx	r3
	slave_dev_config.ss_pin = acc2_SS;
    dec0:	003b      	movs	r3, r7
    dec2:	2213      	movs	r2, #19
    dec4:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_acc2, &slave_dev_config);
    dec6:	003a      	movs	r2, r7
    dec8:	4b27      	ldr	r3, [pc, #156]	; (df68 <setup_spi+0xe4>)
    deca:	0011      	movs	r1, r2
    decc:	0018      	movs	r0, r3
    dece:	4b24      	ldr	r3, [pc, #144]	; (df60 <setup_spi+0xdc>)
    ded0:	4798      	blx	r3
	slave_dev_config.ss_pin = mag1_SS;
    ded2:	003b      	movs	r3, r7
    ded4:	2215      	movs	r2, #21
    ded6:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_mag1, &slave_dev_config);
    ded8:	003a      	movs	r2, r7
    deda:	4b24      	ldr	r3, [pc, #144]	; (df6c <setup_spi+0xe8>)
    dedc:	0011      	movs	r1, r2
    dede:	0018      	movs	r0, r3
    dee0:	4b1f      	ldr	r3, [pc, #124]	; (df60 <setup_spi+0xdc>)
    dee2:	4798      	blx	r3
	slave_dev_config.ss_pin = mag2_SS;
    dee4:	003b      	movs	r3, r7
    dee6:	2214      	movs	r2, #20
    dee8:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_mag2, &slave_dev_config);
    deea:	003a      	movs	r2, r7
    deec:	4b20      	ldr	r3, [pc, #128]	; (df70 <setup_spi+0xec>)
    deee:	0011      	movs	r1, r2
    def0:	0018      	movs	r0, r3
    def2:	4b1b      	ldr	r3, [pc, #108]	; (df60 <setup_spi+0xdc>)
    def4:	4798      	blx	r3
	slave_dev_config.ss_pin = SD_CS;
    def6:	003b      	movs	r3, r7
    def8:	220f      	movs	r2, #15
    defa:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_SD, &slave_dev_config);
    defc:	003a      	movs	r2, r7
    defe:	4b1d      	ldr	r3, [pc, #116]	; (df74 <setup_spi+0xf0>)
    df00:	0011      	movs	r1, r2
    df02:	0018      	movs	r0, r3
    df04:	4b16      	ldr	r3, [pc, #88]	; (df60 <setup_spi+0xdc>)
    df06:	4798      	blx	r3
	// Configure, initialize and enable SERCOM SPI module
	spi_get_config_defaults(&config_spi_master);
    df08:	4b1b      	ldr	r3, [pc, #108]	; (df78 <setup_spi+0xf4>)
    df0a:	0018      	movs	r0, r3
    df0c:	4b1b      	ldr	r3, [pc, #108]	; (df7c <setup_spi+0xf8>)
    df0e:	4798      	blx	r3
	config_spi_master.transfer_mode = SPI_TRANSFER_MODE_3;//initialize with LCD mode
    df10:	4b19      	ldr	r3, [pc, #100]	; (df78 <setup_spi+0xf4>)
    df12:	22c0      	movs	r2, #192	; 0xc0
    df14:	0592      	lsls	r2, r2, #22
    df16:	609a      	str	r2, [r3, #8]
	config_spi_master.mux_setting = SPI_SIGNAL_MUX_SETTING_E;
    df18:	4b17      	ldr	r3, [pc, #92]	; (df78 <setup_spi+0xf4>)
    df1a:	2280      	movs	r2, #128	; 0x80
    df1c:	0252      	lsls	r2, r2, #9
    df1e:	60da      	str	r2, [r3, #12]
	config_spi_master.pinmux_pad0 = PINMUX_PB08D_SERCOM4_PAD0;
    df20:	4b15      	ldr	r3, [pc, #84]	; (df78 <setup_spi+0xf4>)
    df22:	4a17      	ldr	r2, [pc, #92]	; (df80 <setup_spi+0xfc>)
    df24:	629a      	str	r2, [r3, #40]	; 0x28
	config_spi_master.pinmux_pad2 = PINMUX_PB10D_SERCOM4_PAD2;
    df26:	4b14      	ldr	r3, [pc, #80]	; (df78 <setup_spi+0xf4>)
    df28:	4a16      	ldr	r2, [pc, #88]	; (df84 <setup_spi+0x100>)
    df2a:	631a      	str	r2, [r3, #48]	; 0x30
	config_spi_master.pinmux_pad3 = PINMUX_PB11D_SERCOM4_PAD3;
    df2c:	4b12      	ldr	r3, [pc, #72]	; (df78 <setup_spi+0xf4>)
    df2e:	4a16      	ldr	r2, [pc, #88]	; (df88 <setup_spi+0x104>)
    df30:	635a      	str	r2, [r3, #52]	; 0x34
	config_spi_master.character_size = SPI_CHARACTER_SIZE_8BIT ;
    df32:	4b11      	ldr	r3, [pc, #68]	; (df78 <setup_spi+0xf4>)
    df34:	2200      	movs	r2, #0
    df36:	741a      	strb	r2, [r3, #16]
	spi_init(&spi_main, SERCOM4, &config_spi_master);
    df38:	4a0f      	ldr	r2, [pc, #60]	; (df78 <setup_spi+0xf4>)
    df3a:	4914      	ldr	r1, [pc, #80]	; (df8c <setup_spi+0x108>)
    df3c:	4b14      	ldr	r3, [pc, #80]	; (df90 <setup_spi+0x10c>)
    df3e:	0018      	movs	r0, r3
    df40:	4b14      	ldr	r3, [pc, #80]	; (df94 <setup_spi+0x110>)
    df42:	4798      	blx	r3
	spi_enable(&spi_main);
    df44:	4b12      	ldr	r3, [pc, #72]	; (df90 <setup_spi+0x10c>)
    df46:	0018      	movs	r0, r3
    df48:	4b13      	ldr	r3, [pc, #76]	; (df98 <setup_spi+0x114>)
    df4a:	4798      	blx	r3
	//ioport_set_pin_mode(miso, IOPORT_MODE_PULLUP);
	//ioport_set_pin_mode(sclk, IOPORT_MODE_PULLUP);
	
}
    df4c:	46c0      	nop			; (mov r8, r8)
    df4e:	46bd      	mov	sp, r7
    df50:	b002      	add	sp, #8
    df52:	bd80      	pop	{r7, pc}
    df54:	42001001 	.word	0x42001001
    df58:	0000da3d 	.word	0x0000da3d
    df5c:	2000101c 	.word	0x2000101c
    df60:	0000da61 	.word	0x0000da61
    df64:	20001124 	.word	0x20001124
    df68:	20001050 	.word	0x20001050
    df6c:	20001128 	.word	0x20001128
    df70:	20001018 	.word	0x20001018
    df74:	20001088 	.word	0x20001088
    df78:	20001140 	.word	0x20001140
    df7c:	0000d9b9 	.word	0x0000d9b9
    df80:	00280003 	.word	0x00280003
    df84:	002a0003 	.word	0x002a0003
    df88:	002b0003 	.word	0x002b0003
    df8c:	42001000 	.word	0x42001000
    df90:	200010a4 	.word	0x200010a4
    df94:	0001432d 	.word	0x0001432d
    df98:	0000dac5 	.word	0x0000dac5

0000df9c <config_spi>:





void config_spi(enum spi_device SPI_DEVICE){
    df9c:	b580      	push	{r7, lr}
    df9e:	b084      	sub	sp, #16
    dfa0:	af00      	add	r7, sp, #0
    dfa2:	0002      	movs	r2, r0
    dfa4:	1dfb      	adds	r3, r7, #7
    dfa6:	701a      	strb	r2, [r3, #0]
	uint8_t *ptr_POL;
	//uint8_t *ptr_CTRLA,

	//ptr_CTRLA=0x42001000;//  CTRLA byte 1 register
	ptr_POL  =0x42001003;//  SPI polarity register
    dfa8:	4b12      	ldr	r3, [pc, #72]	; (dff4 <config_spi+0x58>)
    dfaa:	60fb      	str	r3, [r7, #12]
	spi_disable(&spi_main);
    dfac:	4b12      	ldr	r3, [pc, #72]	; (dff8 <config_spi+0x5c>)
    dfae:	0018      	movs	r0, r3
    dfb0:	4b12      	ldr	r3, [pc, #72]	; (dffc <config_spi+0x60>)
    dfb2:	4798      	blx	r3
	switch (SPI_DEVICE)
    dfb4:	1dfb      	adds	r3, r7, #7
    dfb6:	781b      	ldrb	r3, [r3, #0]
    dfb8:	2b01      	cmp	r3, #1
    dfba:	d007      	beq.n	dfcc <config_spi+0x30>
    dfbc:	2b02      	cmp	r3, #2
    dfbe:	d009      	beq.n	dfd4 <config_spi+0x38>
    dfc0:	2b00      	cmp	r3, #0
    dfc2:	d10b      	bne.n	dfdc <config_spi+0x40>
	{
		case LCD:
			*ptr_POL = 0b00110000;
    dfc4:	68fb      	ldr	r3, [r7, #12]
    dfc6:	2230      	movs	r2, #48	; 0x30
    dfc8:	701a      	strb	r2, [r3, #0]
			break;
    dfca:	e00a      	b.n	dfe2 <config_spi+0x46>
		case sensors:
			*ptr_POL = 0b00000000;
    dfcc:	68fb      	ldr	r3, [r7, #12]
    dfce:	2200      	movs	r2, #0
    dfd0:	701a      	strb	r2, [r3, #0]
			break;
    dfd2:	e006      	b.n	dfe2 <config_spi+0x46>
		case SD_card:
			*ptr_POL = 0b00000000;
    dfd4:	68fb      	ldr	r3, [r7, #12]
    dfd6:	2200      	movs	r2, #0
    dfd8:	701a      	strb	r2, [r3, #0]
			break;
    dfda:	e002      	b.n	dfe2 <config_spi+0x46>
		default:
			*ptr_POL = 0b00000000;
    dfdc:	68fb      	ldr	r3, [r7, #12]
    dfde:	2200      	movs	r2, #0
    dfe0:	701a      	strb	r2, [r3, #0]
	}

	spi_enable(&spi_main);
    dfe2:	4b05      	ldr	r3, [pc, #20]	; (dff8 <config_spi+0x5c>)
    dfe4:	0018      	movs	r0, r3
    dfe6:	4b06      	ldr	r3, [pc, #24]	; (e000 <config_spi+0x64>)
    dfe8:	4798      	blx	r3

}
    dfea:	46c0      	nop			; (mov r8, r8)
    dfec:	46bd      	mov	sp, r7
    dfee:	b004      	add	sp, #16
    dff0:	bd80      	pop	{r7, pc}
    dff2:	46c0      	nop			; (mov r8, r8)
    dff4:	42001003 	.word	0x42001003
    dff8:	200010a4 	.word	0x200010a4
    dffc:	0000db15 	.word	0x0000db15
    e000:	0000dac5 	.word	0x0000dac5

0000e004 <spi_clear>:




void spi_clear(void){
    e004:	b580      	push	{r7, lr}
    e006:	b082      	sub	sp, #8
    e008:	af00      	add	r7, sp, #0
	
	uint8_t *reg_ptr;
	uint8_t read_buffer[4];
	//clear out receive buffer
	while(spi_is_ready_to_read(&spi_main)){	spi_read(&spi_main, read_buffer);	}
    e00a:	e005      	b.n	e018 <spi_clear+0x14>
    e00c:	003a      	movs	r2, r7
    e00e:	4b0a      	ldr	r3, [pc, #40]	; (e038 <spi_clear+0x34>)
    e010:	0011      	movs	r1, r2
    e012:	0018      	movs	r0, r3
    e014:	4b09      	ldr	r3, [pc, #36]	; (e03c <spi_clear+0x38>)
    e016:	4798      	blx	r3
    e018:	4b07      	ldr	r3, [pc, #28]	; (e038 <spi_clear+0x34>)
    e01a:	0018      	movs	r0, r3
    e01c:	4b08      	ldr	r3, [pc, #32]	; (e040 <spi_clear+0x3c>)
    e01e:	4798      	blx	r3
    e020:	1e03      	subs	r3, r0, #0
    e022:	d1f3      	bne.n	e00c <spi_clear+0x8>
	//Clear overflow error bit:
	reg_ptr=0x4200101A;
    e024:	4b07      	ldr	r3, [pc, #28]	; (e044 <spi_clear+0x40>)
    e026:	607b      	str	r3, [r7, #4]
	*reg_ptr=0x01;
    e028:	687b      	ldr	r3, [r7, #4]
    e02a:	2201      	movs	r2, #1
    e02c:	701a      	strb	r2, [r3, #0]
}
    e02e:	46c0      	nop			; (mov r8, r8)
    e030:	46bd      	mov	sp, r7
    e032:	b002      	add	sp, #8
    e034:	bd80      	pop	{r7, pc}
    e036:	46c0      	nop			; (mov r8, r8)
    e038:	200010a4 	.word	0x200010a4
    e03c:	0000db99 	.word	0x0000db99
    e040:	0000db71 	.word	0x0000db71
    e044:	4200101a 	.word	0x4200101a

0000e048 <configure_usart>:


//USART
//******************************************

void configure_usart(void){
    e048:	b590      	push	{r4, r7, lr}
    e04a:	b093      	sub	sp, #76	; 0x4c
    e04c:	af00      	add	r7, sp, #0
	struct usart_config config_usart;
	enum status_code usart_status;
	
	//  Laser UART setup SERCOM1
	usart_get_config_defaults(&config_usart);
    e04e:	1d3b      	adds	r3, r7, #4
    e050:	0018      	movs	r0, r3
    e052:	4b3a      	ldr	r3, [pc, #232]	; (e13c <configure_usart+0xf4>)
    e054:	4798      	blx	r3
	config_usart.baudrate    = 9600;
    e056:	1d3b      	adds	r3, r7, #4
    e058:	2296      	movs	r2, #150	; 0x96
    e05a:	0192      	lsls	r2, r2, #6
    e05c:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
    e05e:	1d3b      	adds	r3, r7, #4
    e060:	2280      	movs	r2, #128	; 0x80
    e062:	0352      	lsls	r2, r2, #13
    e064:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
    e066:	1d3b      	adds	r3, r7, #4
    e068:	4a35      	ldr	r2, [pc, #212]	; (e140 <configure_usart+0xf8>)
    e06a:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_PA17C_SERCOM1_PAD1;
    e06c:	1d3b      	adds	r3, r7, #4
    e06e:	4a35      	ldr	r2, [pc, #212]	; (e144 <configure_usart+0xfc>)
    e070:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_UNUSED;
    e072:	1d3b      	adds	r3, r7, #4
    e074:	2201      	movs	r2, #1
    e076:	4252      	negs	r2, r2
    e078:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_UNUSED;
    e07a:	1d3b      	adds	r3, r7, #4
    e07c:	2201      	movs	r2, #1
    e07e:	4252      	negs	r2, r2
    e080:	63da      	str	r2, [r3, #60]	; 0x3c
	do {
		usart_status = usart_init(&usart_laser,	SERCOM1, &config_usart) ;
    e082:	2347      	movs	r3, #71	; 0x47
    e084:	18fc      	adds	r4, r7, r3
    e086:	1d3a      	adds	r2, r7, #4
    e088:	492f      	ldr	r1, [pc, #188]	; (e148 <configure_usart+0x100>)
    e08a:	4b30      	ldr	r3, [pc, #192]	; (e14c <configure_usart+0x104>)
    e08c:	0018      	movs	r0, r3
    e08e:	4b30      	ldr	r3, [pc, #192]	; (e150 <configure_usart+0x108>)
    e090:	4798      	blx	r3
    e092:	0003      	movs	r3, r0
    e094:	7023      	strb	r3, [r4, #0]
	}while((usart_status != STATUS_OK) && (usart_status != STATUS_ERR_DENIED) );
    e096:	2347      	movs	r3, #71	; 0x47
    e098:	18fb      	adds	r3, r7, r3
    e09a:	781b      	ldrb	r3, [r3, #0]
    e09c:	2b00      	cmp	r3, #0
    e09e:	d004      	beq.n	e0aa <configure_usart+0x62>
    e0a0:	2347      	movs	r3, #71	; 0x47
    e0a2:	18fb      	adds	r3, r7, r3
    e0a4:	781b      	ldrb	r3, [r3, #0]
    e0a6:	2b1c      	cmp	r3, #28
    e0a8:	d1eb      	bne.n	e082 <configure_usart+0x3a>
	usart_enable(&usart_laser);
    e0aa:	4b28      	ldr	r3, [pc, #160]	; (e14c <configure_usart+0x104>)
    e0ac:	0018      	movs	r0, r3
    e0ae:	4b29      	ldr	r3, [pc, #164]	; (e154 <configure_usart+0x10c>)
    e0b0:	4798      	blx	r3
	
	// BLE UART setup SERCOM0
	usart_get_config_defaults(&config_usart);
    e0b2:	1d3b      	adds	r3, r7, #4
    e0b4:	0018      	movs	r0, r3
    e0b6:	4b21      	ldr	r3, [pc, #132]	; (e13c <configure_usart+0xf4>)
    e0b8:	4798      	blx	r3
	config_usart.baudrate    = 115200;
    e0ba:	1d3b      	adds	r3, r7, #4
    e0bc:	22e1      	movs	r2, #225	; 0xe1
    e0be:	0252      	lsls	r2, r2, #9
    e0c0:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting = USART_RX_1_TX_0_RTS_2_CTS_3;
    e0c2:	1d3b      	adds	r3, r7, #4
    e0c4:	2290      	movs	r2, #144	; 0x90
    e0c6:	0352      	lsls	r2, r2, #13
    e0c8:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
    e0ca:	1d3b      	adds	r3, r7, #4
    e0cc:	4a22      	ldr	r2, [pc, #136]	; (e158 <configure_usart+0x110>)
    e0ce:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
    e0d0:	1d3b      	adds	r3, r7, #4
    e0d2:	4a22      	ldr	r2, [pc, #136]	; (e15c <configure_usart+0x114>)
    e0d4:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_PA10C_SERCOM0_PAD2;
    e0d6:	1d3b      	adds	r3, r7, #4
    e0d8:	4a21      	ldr	r2, [pc, #132]	; (e160 <configure_usart+0x118>)
    e0da:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_PA11C_SERCOM0_PAD3;
    e0dc:	1d3b      	adds	r3, r7, #4
    e0de:	4a21      	ldr	r2, [pc, #132]	; (e164 <configure_usart+0x11c>)
    e0e0:	63da      	str	r2, [r3, #60]	; 0x3c
	do {
		usart_status = usart_init(&usart_laser,	SERCOM1, &config_usart) ;
    e0e2:	2347      	movs	r3, #71	; 0x47
    e0e4:	18fc      	adds	r4, r7, r3
    e0e6:	1d3a      	adds	r2, r7, #4
    e0e8:	4917      	ldr	r1, [pc, #92]	; (e148 <configure_usart+0x100>)
    e0ea:	4b18      	ldr	r3, [pc, #96]	; (e14c <configure_usart+0x104>)
    e0ec:	0018      	movs	r0, r3
    e0ee:	4b18      	ldr	r3, [pc, #96]	; (e150 <configure_usart+0x108>)
    e0f0:	4798      	blx	r3
    e0f2:	0003      	movs	r3, r0
    e0f4:	7023      	strb	r3, [r4, #0]
	}while((usart_status != STATUS_OK) && (usart_status != STATUS_ERR_DENIED) );
    e0f6:	2347      	movs	r3, #71	; 0x47
    e0f8:	18fb      	adds	r3, r7, r3
    e0fa:	781b      	ldrb	r3, [r3, #0]
    e0fc:	2b00      	cmp	r3, #0
    e0fe:	d004      	beq.n	e10a <configure_usart+0xc2>
    e100:	2347      	movs	r3, #71	; 0x47
    e102:	18fb      	adds	r3, r7, r3
    e104:	781b      	ldrb	r3, [r3, #0]
    e106:	2b1c      	cmp	r3, #28
    e108:	d1eb      	bne.n	e0e2 <configure_usart+0x9a>
	usart_enable(&usart_BLE);
    e10a:	4b17      	ldr	r3, [pc, #92]	; (e168 <configure_usart+0x120>)
    e10c:	0018      	movs	r0, r3
    e10e:	4b11      	ldr	r3, [pc, #68]	; (e154 <configure_usart+0x10c>)
    e110:	4798      	blx	r3
	USART_BLE_enabled = true;
    e112:	4b16      	ldr	r3, [pc, #88]	; (e16c <configure_usart+0x124>)
    e114:	2201      	movs	r2, #1
    e116:	701a      	strb	r2, [r3, #0]
	
	//  Setup Callbacks
	configure_usart_callbacks();
    e118:	4b15      	ldr	r3, [pc, #84]	; (e170 <configure_usart+0x128>)
    e11a:	4798      	blx	r3
	
	//  Initiate background read to buffer
	rxBufferLaserIndex = 0;
    e11c:	4b15      	ldr	r3, [pc, #84]	; (e174 <configure_usart+0x12c>)
    e11e:	2200      	movs	r2, #0
    e120:	701a      	strb	r2, [r3, #0]
	debugBufferIndex = 0;
    e122:	4b15      	ldr	r3, [pc, #84]	; (e178 <configure_usart+0x130>)
    e124:	2200      	movs	r2, #0
    e126:	701a      	strb	r2, [r3, #0]
	usart_read_job(&usart_laser, rxBufferLaser); // 
    e128:	4a14      	ldr	r2, [pc, #80]	; (e17c <configure_usart+0x134>)
    e12a:	4b08      	ldr	r3, [pc, #32]	; (e14c <configure_usart+0x104>)
    e12c:	0011      	movs	r1, r2
    e12e:	0018      	movs	r0, r3
    e130:	4b13      	ldr	r3, [pc, #76]	; (e180 <configure_usart+0x138>)
    e132:	4798      	blx	r3
}
    e134:	46c0      	nop			; (mov r8, r8)
    e136:	46bd      	mov	sp, r7
    e138:	b013      	add	sp, #76	; 0x4c
    e13a:	bd90      	pop	{r4, r7, pc}
    e13c:	0000dc65 	.word	0x0000dc65
    e140:	00100002 	.word	0x00100002
    e144:	00110002 	.word	0x00110002
    e148:	42000400 	.word	0x42000400
    e14c:	20001054 	.word	0x20001054
    e150:	00013b2d 	.word	0x00013b2d
    e154:	0000dd25 	.word	0x0000dd25
    e158:	00080002 	.word	0x00080002
    e15c:	00090002 	.word	0x00090002
    e160:	000a0002 	.word	0x000a0002
    e164:	000b0002 	.word	0x000b0002
    e168:	20001194 	.word	0x20001194
    e16c:	20003b8c 	.word	0x20003b8c
    e170:	0000e185 	.word	0x0000e185
    e174:	2000112b 	.word	0x2000112b
    e178:	200010a0 	.word	0x200010a0
    e17c:	2000112c 	.word	0x2000112c
    e180:	000065dd 	.word	0x000065dd

0000e184 <configure_usart_callbacks>:

void configure_usart_callbacks(void)
{
    e184:	b580      	push	{r7, lr}
    e186:	af00      	add	r7, sp, #0
	usart_register_callback(&usart_laser,
    e188:	490c      	ldr	r1, [pc, #48]	; (e1bc <configure_usart_callbacks+0x38>)
    e18a:	4b0d      	ldr	r3, [pc, #52]	; (e1c0 <configure_usart_callbacks+0x3c>)
    e18c:	2200      	movs	r2, #0
    e18e:	0018      	movs	r0, r3
    e190:	4b0c      	ldr	r3, [pc, #48]	; (e1c4 <configure_usart_callbacks+0x40>)
    e192:	4798      	blx	r3
	writeLaserCallback, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_register_callback(&usart_laser,
    e194:	490c      	ldr	r1, [pc, #48]	; (e1c8 <configure_usart_callbacks+0x44>)
    e196:	4b0a      	ldr	r3, [pc, #40]	; (e1c0 <configure_usart_callbacks+0x3c>)
    e198:	2201      	movs	r2, #1
    e19a:	0018      	movs	r0, r3
    e19c:	4b09      	ldr	r3, [pc, #36]	; (e1c4 <configure_usart_callbacks+0x40>)
    e19e:	4798      	blx	r3
	readLaserCallback, USART_CALLBACK_BUFFER_RECEIVED);
	usart_enable_callback(&usart_laser, USART_CALLBACK_BUFFER_TRANSMITTED);
    e1a0:	4b07      	ldr	r3, [pc, #28]	; (e1c0 <configure_usart_callbacks+0x3c>)
    e1a2:	2100      	movs	r1, #0
    e1a4:	0018      	movs	r0, r3
    e1a6:	4b09      	ldr	r3, [pc, #36]	; (e1cc <configure_usart_callbacks+0x48>)
    e1a8:	4798      	blx	r3
	usart_enable_callback(&usart_laser, USART_CALLBACK_BUFFER_RECEIVED);
    e1aa:	4b05      	ldr	r3, [pc, #20]	; (e1c0 <configure_usart_callbacks+0x3c>)
    e1ac:	2101      	movs	r1, #1
    e1ae:	0018      	movs	r0, r3
    e1b0:	4b06      	ldr	r3, [pc, #24]	; (e1cc <configure_usart_callbacks+0x48>)
    e1b2:	4798      	blx	r3
}
    e1b4:	46c0      	nop			; (mov r8, r8)
    e1b6:	46bd      	mov	sp, r7
    e1b8:	bd80      	pop	{r7, pc}
    e1ba:	46c0      	nop			; (mov r8, r8)
    e1bc:	0000e2c9 	.word	0x0000e2c9
    e1c0:	20001054 	.word	0x20001054
    e1c4:	00006595 	.word	0x00006595
    e1c8:	0000e1d1 	.word	0x0000e1d1
    e1cc:	0000ddfd 	.word	0x0000ddfd

0000e1d0 <readLaserCallback>:




void readLaserCallback(struct usart_module *const usart_module)
{
    e1d0:	b580      	push	{r7, lr}
    e1d2:	b082      	sub	sp, #8
    e1d4:	af00      	add	r7, sp, #0
    e1d6:	6078      	str	r0, [r7, #4]
	//***************debug*******************
	debugBuffer[debugBufferIndex] = rxBufferLaser[rxBufferLaserIndex];
    e1d8:	4b32      	ldr	r3, [pc, #200]	; (e2a4 <readLaserCallback+0xd4>)
    e1da:	781b      	ldrb	r3, [r3, #0]
    e1dc:	b2db      	uxtb	r3, r3
    e1de:	001a      	movs	r2, r3
    e1e0:	4b31      	ldr	r3, [pc, #196]	; (e2a8 <readLaserCallback+0xd8>)
    e1e2:	781b      	ldrb	r3, [r3, #0]
    e1e4:	b2db      	uxtb	r3, r3
    e1e6:	0019      	movs	r1, r3
    e1e8:	4b30      	ldr	r3, [pc, #192]	; (e2ac <readLaserCallback+0xdc>)
    e1ea:	5c5b      	ldrb	r3, [r3, r1]
    e1ec:	b2d9      	uxtb	r1, r3
    e1ee:	4b30      	ldr	r3, [pc, #192]	; (e2b0 <readLaserCallback+0xe0>)
    e1f0:	5499      	strb	r1, [r3, r2]
	debugBufferIndex++;
    e1f2:	4b2c      	ldr	r3, [pc, #176]	; (e2a4 <readLaserCallback+0xd4>)
    e1f4:	781b      	ldrb	r3, [r3, #0]
    e1f6:	b2db      	uxtb	r3, r3
    e1f8:	3301      	adds	r3, #1
    e1fa:	b2da      	uxtb	r2, r3
    e1fc:	4b29      	ldr	r3, [pc, #164]	; (e2a4 <readLaserCallback+0xd4>)
    e1fe:	701a      	strb	r2, [r3, #0]
	if(debugBufferIndex>=sizeof(debugBuffer)){debugBufferIndex=0;}
    e200:	4b28      	ldr	r3, [pc, #160]	; (e2a4 <readLaserCallback+0xd4>)
    e202:	781b      	ldrb	r3, [r3, #0]
    e204:	b2db      	uxtb	r3, r3
    e206:	2bc7      	cmp	r3, #199	; 0xc7
    e208:	d902      	bls.n	e210 <readLaserCallback+0x40>
    e20a:	4b26      	ldr	r3, [pc, #152]	; (e2a4 <readLaserCallback+0xd4>)
    e20c:	2200      	movs	r2, #0
    e20e:	701a      	strb	r2, [r3, #0]
	//**************debug********************
	if(rxBufferLaser[rxBufferLaserIndex]==0xA8){
    e210:	4b25      	ldr	r3, [pc, #148]	; (e2a8 <readLaserCallback+0xd8>)
    e212:	781b      	ldrb	r3, [r3, #0]
    e214:	b2db      	uxtb	r3, r3
    e216:	001a      	movs	r2, r3
    e218:	4b24      	ldr	r3, [pc, #144]	; (e2ac <readLaserCallback+0xdc>)
    e21a:	5c9b      	ldrb	r3, [r3, r2]
    e21c:	b2db      	uxtb	r3, r3
    e21e:	2ba8      	cmp	r3, #168	; 0xa8
    e220:	d10c      	bne.n	e23c <readLaserCallback+0x6c>
		//  End of message key received (per laser comm protocol)
		LaserReceiveComplete=true;		
    e222:	4b24      	ldr	r3, [pc, #144]	; (e2b4 <readLaserCallback+0xe4>)
    e224:	2201      	movs	r2, #1
    e226:	701a      	strb	r2, [r3, #0]
		rxBufferLaserIndex = 0;
    e228:	4b1f      	ldr	r3, [pc, #124]	; (e2a8 <readLaserCallback+0xd8>)
    e22a:	2200      	movs	r2, #0
    e22c:	701a      	strb	r2, [r3, #0]
		laserCurrentMessage = laserMessageType();;
    e22e:	4b22      	ldr	r3, [pc, #136]	; (e2b8 <readLaserCallback+0xe8>)
    e230:	4798      	blx	r3
    e232:	0003      	movs	r3, r0
    e234:	001a      	movs	r2, r3
    e236:	4b21      	ldr	r3, [pc, #132]	; (e2bc <readLaserCallback+0xec>)
    e238:	701a      	strb	r2, [r3, #0]
    e23a:	e024      	b.n	e286 <readLaserCallback+0xb6>
		
	}else if(rxBufferLaser[rxBufferLaserIndex]==0xAA){
    e23c:	4b1a      	ldr	r3, [pc, #104]	; (e2a8 <readLaserCallback+0xd8>)
    e23e:	781b      	ldrb	r3, [r3, #0]
    e240:	b2db      	uxtb	r3, r3
    e242:	001a      	movs	r2, r3
    e244:	4b19      	ldr	r3, [pc, #100]	; (e2ac <readLaserCallback+0xdc>)
    e246:	5c9b      	ldrb	r3, [r3, r2]
    e248:	b2db      	uxtb	r3, r3
    e24a:	2baa      	cmp	r3, #170	; 0xaa
    e24c:	d10c      	bne.n	e268 <readLaserCallback+0x98>
		//  Start of message key received
		LaserReceiveComplete=false;
    e24e:	4b19      	ldr	r3, [pc, #100]	; (e2b4 <readLaserCallback+0xe4>)
    e250:	2200      	movs	r2, #0
    e252:	701a      	strb	r2, [r3, #0]
		rxBufferLaser[0]=0xAA;  //  Ensure message starts at beginning of buffer
    e254:	4b15      	ldr	r3, [pc, #84]	; (e2ac <readLaserCallback+0xdc>)
    e256:	22aa      	movs	r2, #170	; 0xaa
    e258:	701a      	strb	r2, [r3, #0]
		rxBufferLaserIndex = 1;	// Next byte to be placed at 1	
    e25a:	4b13      	ldr	r3, [pc, #76]	; (e2a8 <readLaserCallback+0xd8>)
    e25c:	2201      	movs	r2, #1
    e25e:	701a      	strb	r2, [r3, #0]
		laserCurrentMessage = NONE;
    e260:	4b16      	ldr	r3, [pc, #88]	; (e2bc <readLaserCallback+0xec>)
    e262:	2200      	movs	r2, #0
    e264:	701a      	strb	r2, [r3, #0]
    e266:	e00e      	b.n	e286 <readLaserCallback+0xb6>
	}else{
		//  Not Start or end of message, continue filling buffer
		rxBufferLaserIndex++;
    e268:	4b0f      	ldr	r3, [pc, #60]	; (e2a8 <readLaserCallback+0xd8>)
    e26a:	781b      	ldrb	r3, [r3, #0]
    e26c:	b2db      	uxtb	r3, r3
    e26e:	3301      	adds	r3, #1
    e270:	b2da      	uxtb	r2, r3
    e272:	4b0d      	ldr	r3, [pc, #52]	; (e2a8 <readLaserCallback+0xd8>)
    e274:	701a      	strb	r2, [r3, #0]
		if (rxBufferLaserIndex>=sizeof(rxBufferLaser)){
    e276:	4b0c      	ldr	r3, [pc, #48]	; (e2a8 <readLaserCallback+0xd8>)
    e278:	781b      	ldrb	r3, [r3, #0]
    e27a:	b2db      	uxtb	r3, r3
    e27c:	2b13      	cmp	r3, #19
    e27e:	d902      	bls.n	e286 <readLaserCallback+0xb6>
			rxBufferLaserIndex = 0;
    e280:	4b09      	ldr	r3, [pc, #36]	; (e2a8 <readLaserCallback+0xd8>)
    e282:	2200      	movs	r2, #0
    e284:	701a      	strb	r2, [r3, #0]
		}
		
	}
	//  Prepare to take another byte
	usart_read_job(&usart_laser, &rxBufferLaser[rxBufferLaserIndex]);
    e286:	4b08      	ldr	r3, [pc, #32]	; (e2a8 <readLaserCallback+0xd8>)
    e288:	781b      	ldrb	r3, [r3, #0]
    e28a:	b2db      	uxtb	r3, r3
    e28c:	001a      	movs	r2, r3
    e28e:	4b07      	ldr	r3, [pc, #28]	; (e2ac <readLaserCallback+0xdc>)
    e290:	18d2      	adds	r2, r2, r3
    e292:	4b0b      	ldr	r3, [pc, #44]	; (e2c0 <readLaserCallback+0xf0>)
    e294:	0011      	movs	r1, r2
    e296:	0018      	movs	r0, r3
    e298:	4b0a      	ldr	r3, [pc, #40]	; (e2c4 <readLaserCallback+0xf4>)
    e29a:	4798      	blx	r3

}
    e29c:	46c0      	nop			; (mov r8, r8)
    e29e:	46bd      	mov	sp, r7
    e2a0:	b002      	add	sp, #8
    e2a2:	bd80      	pop	{r7, pc}
    e2a4:	200010a0 	.word	0x200010a0
    e2a8:	2000112b 	.word	0x2000112b
    e2ac:	2000112c 	.word	0x2000112c
    e2b0:	20000f50 	.word	0x20000f50
    e2b4:	2000124a 	.word	0x2000124a
    e2b8:	0000e379 	.word	0x0000e379
    e2bc:	20001248 	.word	0x20001248
    e2c0:	20001054 	.word	0x20001054
    e2c4:	000065dd 	.word	0x000065dd

0000e2c8 <writeLaserCallback>:

void writeLaserCallback(struct usart_module *const usart_module)
{
    e2c8:	b580      	push	{r7, lr}
    e2ca:	b082      	sub	sp, #8
    e2cc:	af00      	add	r7, sp, #0
    e2ce:	6078      	str	r0, [r7, #4]
	LaserTransmitComplete = true;
    e2d0:	4b03      	ldr	r3, [pc, #12]	; (e2e0 <writeLaserCallback+0x18>)
    e2d2:	2201      	movs	r2, #1
    e2d4:	701a      	strb	r2, [r3, #0]
}
    e2d6:	46c0      	nop			; (mov r8, r8)
    e2d8:	46bd      	mov	sp, r7
    e2da:	b002      	add	sp, #8
    e2dc:	bd80      	pop	{r7, pc}
    e2de:	46c0      	nop			; (mov r8, r8)
    e2e0:	20001249 	.word	0x20001249

0000e2e4 <writeLaser>:


enum status_code writeLaser(uint8_t *tx_data, uint16_t length){
    e2e4:	b590      	push	{r4, r7, lr}
    e2e6:	b085      	sub	sp, #20
    e2e8:	af00      	add	r7, sp, #0
    e2ea:	6078      	str	r0, [r7, #4]
    e2ec:	000a      	movs	r2, r1
    e2ee:	1cbb      	adds	r3, r7, #2
    e2f0:	801a      	strh	r2, [r3, #0]
	enum status_code writeStatus;
	//clear_rx_buffer();
	LaserTransmitComplete=false;
    e2f2:	4b0a      	ldr	r3, [pc, #40]	; (e31c <writeLaser+0x38>)
    e2f4:	2200      	movs	r2, #0
    e2f6:	701a      	strb	r2, [r3, #0]
	writeStatus = usart_write_buffer_job(&usart_laser, tx_data, length);
    e2f8:	230f      	movs	r3, #15
    e2fa:	18fc      	adds	r4, r7, r3
    e2fc:	1cbb      	adds	r3, r7, #2
    e2fe:	881a      	ldrh	r2, [r3, #0]
    e300:	6879      	ldr	r1, [r7, #4]
    e302:	4b07      	ldr	r3, [pc, #28]	; (e320 <writeLaser+0x3c>)
    e304:	0018      	movs	r0, r3
    e306:	4b07      	ldr	r3, [pc, #28]	; (e324 <writeLaser+0x40>)
    e308:	4798      	blx	r3
    e30a:	0003      	movs	r3, r0
    e30c:	7023      	strb	r3, [r4, #0]
	return writeStatus;
    e30e:	230f      	movs	r3, #15
    e310:	18fb      	adds	r3, r7, r3
    e312:	781b      	ldrb	r3, [r3, #0]
}
    e314:	0018      	movs	r0, r3
    e316:	46bd      	mov	sp, r7
    e318:	b005      	add	sp, #20
    e31a:	bd90      	pop	{r4, r7, pc}
    e31c:	20001249 	.word	0x20001249
    e320:	20001054 	.word	0x20001054
    e324:	00006601 	.word	0x00006601

0000e328 <isLaserTransmitComplete>:
	//readStatus = usart_read_job(&usart_laser, rxBufferLaser); // 
	//usart_read_job(&usart_laser, &rx_buffer[rx_buffer_index]);
	return readStatus;
};

bool isLaserTransmitComplete(void){
    e328:	b580      	push	{r7, lr}
    e32a:	af00      	add	r7, sp, #0
	return LaserTransmitComplete;
    e32c:	4b02      	ldr	r3, [pc, #8]	; (e338 <isLaserTransmitComplete+0x10>)
    e32e:	781b      	ldrb	r3, [r3, #0]
    e330:	b2db      	uxtb	r3, r3
}
    e332:	0018      	movs	r0, r3
    e334:	46bd      	mov	sp, r7
    e336:	bd80      	pop	{r7, pc}
    e338:	20001249 	.word	0x20001249

0000e33c <isLaserReceiveComplete>:
bool isLaserReceiveComplete(void){
    e33c:	b580      	push	{r7, lr}
    e33e:	af00      	add	r7, sp, #0
	return LaserReceiveComplete;
    e340:	4b02      	ldr	r3, [pc, #8]	; (e34c <isLaserReceiveComplete+0x10>)
    e342:	781b      	ldrb	r3, [r3, #0]
    e344:	b2db      	uxtb	r3, r3
}
    e346:	0018      	movs	r0, r3
    e348:	46bd      	mov	sp, r7
    e34a:	bd80      	pop	{r7, pc}
    e34c:	2000124a 	.word	0x2000124a

0000e350 <rxBufferLaserClear>:

void rxBufferLaserClear(void){
    e350:	b580      	push	{r7, lr}
    e352:	af00      	add	r7, sp, #0
	//uint8_t i;
	//for (i=0;i<sizeof(rxBufferLaser);i++){
	//	rxBufferLaser[i] = 0;
	//}
	laserCurrentMessage = NONE;
    e354:	4b05      	ldr	r3, [pc, #20]	; (e36c <rxBufferLaserClear+0x1c>)
    e356:	2200      	movs	r2, #0
    e358:	701a      	strb	r2, [r3, #0]
	LaserReceiveComplete=false;
    e35a:	4b05      	ldr	r3, [pc, #20]	; (e370 <rxBufferLaserClear+0x20>)
    e35c:	2200      	movs	r2, #0
    e35e:	701a      	strb	r2, [r3, #0]
	rxBufferLaserIndex = 0;
    e360:	4b04      	ldr	r3, [pc, #16]	; (e374 <rxBufferLaserClear+0x24>)
    e362:	2200      	movs	r2, #0
    e364:	701a      	strb	r2, [r3, #0]
}
    e366:	46c0      	nop			; (mov r8, r8)
    e368:	46bd      	mov	sp, r7
    e36a:	bd80      	pop	{r7, pc}
    e36c:	20001248 	.word	0x20001248
    e370:	2000124a 	.word	0x2000124a
    e374:	2000112b 	.word	0x2000112b

0000e378 <laserMessageType>:

//  Determine the type of message currently in the buffer
enum LASER_MESSAGE_TYPE laserMessageType(void){
    e378:	b580      	push	{r7, lr}
    e37a:	b082      	sub	sp, #8
    e37c:	af00      	add	r7, sp, #0
	uint8_t i;
	for(i=0;i<sizeof(rxBufferLaser);i++){
    e37e:	1dfb      	adds	r3, r7, #7
    e380:	2200      	movs	r2, #0
    e382:	701a      	strb	r2, [r3, #0]
    e384:	e012      	b.n	e3ac <laserMessageType+0x34>
		if(rxBufferLaser[i]==0xAA){
    e386:	1dfb      	adds	r3, r7, #7
    e388:	781b      	ldrb	r3, [r3, #0]
    e38a:	4a0c      	ldr	r2, [pc, #48]	; (e3bc <laserMessageType+0x44>)
    e38c:	5cd3      	ldrb	r3, [r2, r3]
    e38e:	b2db      	uxtb	r3, r3
    e390:	2baa      	cmp	r3, #170	; 0xaa
    e392:	d106      	bne.n	e3a2 <laserMessageType+0x2a>
			return rxBufferLaser[i+2];
    e394:	1dfb      	adds	r3, r7, #7
    e396:	781b      	ldrb	r3, [r3, #0]
    e398:	3302      	adds	r3, #2
    e39a:	4a08      	ldr	r2, [pc, #32]	; (e3bc <laserMessageType+0x44>)
    e39c:	5cd3      	ldrb	r3, [r2, r3]
    e39e:	b2db      	uxtb	r3, r3
    e3a0:	e008      	b.n	e3b4 <laserMessageType+0x3c>
	for(i=0;i<sizeof(rxBufferLaser);i++){
    e3a2:	1dfb      	adds	r3, r7, #7
    e3a4:	781a      	ldrb	r2, [r3, #0]
    e3a6:	1dfb      	adds	r3, r7, #7
    e3a8:	3201      	adds	r2, #1
    e3aa:	701a      	strb	r2, [r3, #0]
    e3ac:	1dfb      	adds	r3, r7, #7
    e3ae:	781b      	ldrb	r3, [r3, #0]
    e3b0:	2b13      	cmp	r3, #19
    e3b2:	d9e8      	bls.n	e386 <laserMessageType+0xe>
		}
		
	}
};
    e3b4:	0018      	movs	r0, r3
    e3b6:	46bd      	mov	sp, r7
    e3b8:	b002      	add	sp, #8
    e3ba:	bd80      	pop	{r7, pc}
    e3bc:	2000112c 	.word	0x2000112c

0000e3c0 <configure_i2c_master>:


//I2C
//************************************************
void configure_i2c_master(void)
{
    e3c0:	b580      	push	{r7, lr}
    e3c2:	b08e      	sub	sp, #56	; 0x38
    e3c4:	af00      	add	r7, sp, #0
	/* Initialize config structure and software module. */
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
    e3c6:	1d3b      	adds	r3, r7, #4
    e3c8:	0018      	movs	r0, r3
    e3ca:	4b0c      	ldr	r3, [pc, #48]	; (e3fc <configure_i2c_master+0x3c>)
    e3cc:	4798      	blx	r3
	/* Change buffer timeout to something longer. */
	config_i2c_master.buffer_timeout = 10000;
    e3ce:	1d3b      	adds	r3, r7, #4
    e3d0:	4a0b      	ldr	r2, [pc, #44]	; (e400 <configure_i2c_master+0x40>)
    e3d2:	82da      	strh	r2, [r3, #22]
	//#if SAMR30
	config_i2c_master.pinmux_pad0    = PINMUX_PA12C_SERCOM2_PAD0;
    e3d4:	1d3b      	adds	r3, r7, #4
    e3d6:	4a0b      	ldr	r2, [pc, #44]	; (e404 <configure_i2c_master+0x44>)
    e3d8:	61da      	str	r2, [r3, #28]
	config_i2c_master.pinmux_pad1    = PINMUX_PA13C_SERCOM2_PAD1;
    e3da:	1d3b      	adds	r3, r7, #4
    e3dc:	4a0a      	ldr	r2, [pc, #40]	; (e408 <configure_i2c_master+0x48>)
    e3de:	621a      	str	r2, [r3, #32]
	//#endif
	/* Initialize and enable device with config. */
	i2c_master_init(&i2c_master_instance, SERCOM2, &config_i2c_master);
    e3e0:	1d3a      	adds	r2, r7, #4
    e3e2:	490a      	ldr	r1, [pc, #40]	; (e40c <configure_i2c_master+0x4c>)
    e3e4:	4b0a      	ldr	r3, [pc, #40]	; (e410 <configure_i2c_master+0x50>)
    e3e6:	0018      	movs	r0, r3
    e3e8:	4b0a      	ldr	r3, [pc, #40]	; (e414 <configure_i2c_master+0x54>)
    e3ea:	4798      	blx	r3
	i2c_master_enable(&i2c_master_instance);
    e3ec:	4b08      	ldr	r3, [pc, #32]	; (e410 <configure_i2c_master+0x50>)
    e3ee:	0018      	movs	r0, r3
    e3f0:	4b09      	ldr	r3, [pc, #36]	; (e418 <configure_i2c_master+0x58>)
    e3f2:	4798      	blx	r3
}
    e3f4:	46c0      	nop			; (mov r8, r8)
    e3f6:	46bd      	mov	sp, r7
    e3f8:	b00e      	add	sp, #56	; 0x38
    e3fa:	bd80      	pop	{r7, pc}
    e3fc:	0000d849 	.word	0x0000d849
    e400:	00002710 	.word	0x00002710
    e404:	000c0002 	.word	0x000c0002
    e408:	000d0002 	.word	0x000d0002
    e40c:	42000800 	.word	0x42000800
    e410:	200010e0 	.word	0x200010e0
    e414:	00005749 	.word	0x00005749
    e418:	0000d8cd 	.word	0x0000d8cd

0000e41c <i2c_read_write>:

void i2c_read_write(enum read_write mode, uint8_t device, uint8_t *buf, uint8_t length){
    e41c:	b590      	push	{r4, r7, lr}
    e41e:	b087      	sub	sp, #28
    e420:	af00      	add	r7, sp, #0
    e422:	0004      	movs	r4, r0
    e424:	0008      	movs	r0, r1
    e426:	603a      	str	r2, [r7, #0]
    e428:	0019      	movs	r1, r3
    e42a:	1dfb      	adds	r3, r7, #7
    e42c:	1c22      	adds	r2, r4, #0
    e42e:	701a      	strb	r2, [r3, #0]
    e430:	1dbb      	adds	r3, r7, #6
    e432:	1c02      	adds	r2, r0, #0
    e434:	701a      	strb	r2, [r3, #0]
    e436:	1d7b      	adds	r3, r7, #5
    e438:	1c0a      	adds	r2, r1, #0
    e43a:	701a      	strb	r2, [r3, #0]
	//first character in buffer is read/write register address
	uint16_t limit=100;
    e43c:	2314      	movs	r3, #20
    e43e:	18fb      	adds	r3, r7, r3
    e440:	2264      	movs	r2, #100	; 0x64
    e442:	801a      	strh	r2, [r3, #0]
	uint16_t timeout;
	struct i2c_master_packet packet = {
    e444:	2308      	movs	r3, #8
    e446:	18fb      	adds	r3, r7, r3
    e448:	0018      	movs	r0, r3
    e44a:	230c      	movs	r3, #12
    e44c:	001a      	movs	r2, r3
    e44e:	2100      	movs	r1, #0
    e450:	4b3e      	ldr	r3, [pc, #248]	; (e54c <i2c_read_write+0x130>)
    e452:	4798      	blx	r3
    e454:	1dbb      	adds	r3, r7, #6
    e456:	781b      	ldrb	r3, [r3, #0]
    e458:	b29a      	uxth	r2, r3
    e45a:	2308      	movs	r3, #8
    e45c:	18fb      	adds	r3, r7, r3
    e45e:	801a      	strh	r2, [r3, #0]
    e460:	2308      	movs	r3, #8
    e462:	18fb      	adds	r3, r7, r3
    e464:	683a      	ldr	r2, [r7, #0]
    e466:	605a      	str	r2, [r3, #4]
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	
	if (mode==readp){
    e468:	1dfb      	adds	r3, r7, #7
    e46a:	781b      	ldrb	r3, [r3, #0]
    e46c:	2b00      	cmp	r3, #0
    e46e:	d145      	bne.n	e4fc <i2c_read_write+0xe0>
		timeout=0;
    e470:	2316      	movs	r3, #22
    e472:	18fb      	adds	r3, r7, r3
    e474:	2200      	movs	r2, #0
    e476:	801a      	strh	r2, [r3, #0]
		packet.data_length=1;
    e478:	2308      	movs	r3, #8
    e47a:	18fb      	adds	r3, r7, r3
    e47c:	2201      	movs	r2, #1
    e47e:	805a      	strh	r2, [r3, #2]
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    e480:	e00b      	b.n	e49a <i2c_read_write+0x7e>
			if (timeout++ == limit) {   break;   }
    e482:	2316      	movs	r3, #22
    e484:	18fb      	adds	r3, r7, r3
    e486:	881b      	ldrh	r3, [r3, #0]
    e488:	2216      	movs	r2, #22
    e48a:	18ba      	adds	r2, r7, r2
    e48c:	1c59      	adds	r1, r3, #1
    e48e:	8011      	strh	r1, [r2, #0]
    e490:	2214      	movs	r2, #20
    e492:	18ba      	adds	r2, r7, r2
    e494:	8812      	ldrh	r2, [r2, #0]
    e496:	429a      	cmp	r2, r3
    e498:	d009      	beq.n	e4ae <i2c_read_write+0x92>
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    e49a:	2308      	movs	r3, #8
    e49c:	18fa      	adds	r2, r7, r3
    e49e:	4b2c      	ldr	r3, [pc, #176]	; (e550 <i2c_read_write+0x134>)
    e4a0:	0011      	movs	r1, r2
    e4a2:	0018      	movs	r0, r3
    e4a4:	4b2b      	ldr	r3, [pc, #172]	; (e554 <i2c_read_write+0x138>)
    e4a6:	4798      	blx	r3
    e4a8:	1e03      	subs	r3, r0, #0
    e4aa:	d1ea      	bne.n	e482 <i2c_read_write+0x66>
    e4ac:	e000      	b.n	e4b0 <i2c_read_write+0x94>
			if (timeout++ == limit) {   break;   }
    e4ae:	46c0      	nop			; (mov r8, r8)
		}
		timeout=0;
    e4b0:	2316      	movs	r3, #22
    e4b2:	18fb      	adds	r3, r7, r3
    e4b4:	2200      	movs	r2, #0
    e4b6:	801a      	strh	r2, [r3, #0]
		packet.data=buf+1;
    e4b8:	683b      	ldr	r3, [r7, #0]
    e4ba:	1c5a      	adds	r2, r3, #1
    e4bc:	2308      	movs	r3, #8
    e4be:	18fb      	adds	r3, r7, r3
    e4c0:	605a      	str	r2, [r3, #4]
		packet.data_length=length;
    e4c2:	1d7b      	adds	r3, r7, #5
    e4c4:	781b      	ldrb	r3, [r3, #0]
    e4c6:	b29a      	uxth	r2, r3
    e4c8:	2308      	movs	r3, #8
    e4ca:	18fb      	adds	r3, r7, r3
    e4cc:	805a      	strh	r2, [r3, #2]
		while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    e4ce:	e00b      	b.n	e4e8 <i2c_read_write+0xcc>
			if (timeout++ == limit) {   break;   }
    e4d0:	2316      	movs	r3, #22
    e4d2:	18fb      	adds	r3, r7, r3
    e4d4:	881b      	ldrh	r3, [r3, #0]
    e4d6:	2216      	movs	r2, #22
    e4d8:	18ba      	adds	r2, r7, r2
    e4da:	1c59      	adds	r1, r3, #1
    e4dc:	8011      	strh	r1, [r2, #0]
    e4de:	2214      	movs	r2, #20
    e4e0:	18ba      	adds	r2, r7, r2
    e4e2:	8812      	ldrh	r2, [r2, #0]
    e4e4:	429a      	cmp	r2, r3
    e4e6:	d02a      	beq.n	e53e <i2c_read_write+0x122>
		while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    e4e8:	2308      	movs	r3, #8
    e4ea:	18fa      	adds	r2, r7, r3
    e4ec:	4b18      	ldr	r3, [pc, #96]	; (e550 <i2c_read_write+0x134>)
    e4ee:	0011      	movs	r1, r2
    e4f0:	0018      	movs	r0, r3
    e4f2:	4b19      	ldr	r3, [pc, #100]	; (e558 <i2c_read_write+0x13c>)
    e4f4:	4798      	blx	r3
    e4f6:	1e03      	subs	r3, r0, #0
    e4f8:	d1ea      	bne.n	e4d0 <i2c_read_write+0xb4>
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
			if (timeout++ == limit) {   break;   }
		}
	}
	
}
    e4fa:	e023      	b.n	e544 <i2c_read_write+0x128>
		timeout=0;
    e4fc:	2316      	movs	r3, #22
    e4fe:	18fb      	adds	r3, r7, r3
    e500:	2200      	movs	r2, #0
    e502:	801a      	strh	r2, [r3, #0]
		packet.data_length=length;
    e504:	1d7b      	adds	r3, r7, #5
    e506:	781b      	ldrb	r3, [r3, #0]
    e508:	b29a      	uxth	r2, r3
    e50a:	2308      	movs	r3, #8
    e50c:	18fb      	adds	r3, r7, r3
    e50e:	805a      	strh	r2, [r3, #2]
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    e510:	e00b      	b.n	e52a <i2c_read_write+0x10e>
			if (timeout++ == limit) {   break;   }
    e512:	2316      	movs	r3, #22
    e514:	18fb      	adds	r3, r7, r3
    e516:	881b      	ldrh	r3, [r3, #0]
    e518:	2216      	movs	r2, #22
    e51a:	18ba      	adds	r2, r7, r2
    e51c:	1c59      	adds	r1, r3, #1
    e51e:	8011      	strh	r1, [r2, #0]
    e520:	2214      	movs	r2, #20
    e522:	18ba      	adds	r2, r7, r2
    e524:	8812      	ldrh	r2, [r2, #0]
    e526:	429a      	cmp	r2, r3
    e528:	d00b      	beq.n	e542 <i2c_read_write+0x126>
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    e52a:	2308      	movs	r3, #8
    e52c:	18fa      	adds	r2, r7, r3
    e52e:	4b08      	ldr	r3, [pc, #32]	; (e550 <i2c_read_write+0x134>)
    e530:	0011      	movs	r1, r2
    e532:	0018      	movs	r0, r3
    e534:	4b07      	ldr	r3, [pc, #28]	; (e554 <i2c_read_write+0x138>)
    e536:	4798      	blx	r3
    e538:	1e03      	subs	r3, r0, #0
    e53a:	d1ea      	bne.n	e512 <i2c_read_write+0xf6>
}
    e53c:	e002      	b.n	e544 <i2c_read_write+0x128>
			if (timeout++ == limit) {   break;   }
    e53e:	46c0      	nop			; (mov r8, r8)
    e540:	e000      	b.n	e544 <i2c_read_write+0x128>
			if (timeout++ == limit) {   break;   }
    e542:	46c0      	nop			; (mov r8, r8)
}
    e544:	46c0      	nop			; (mov r8, r8)
    e546:	46bd      	mov	sp, r7
    e548:	b007      	add	sp, #28
    e54a:	bd90      	pop	{r4, r7, pc}
    e54c:	00021029 	.word	0x00021029
    e550:	200010e0 	.word	0x200010e0
    e554:	00005ddd 	.word	0x00005ddd
    e558:	00005c25 	.word	0x00005c25

0000e55c <max17055_reg_read_write>:


void max17055_reg_read_write(enum read_write mode, uint8_t address, uint16_t *data){
    e55c:	b590      	push	{r4, r7, lr}
    e55e:	b085      	sub	sp, #20
    e560:	af00      	add	r7, sp, #0
    e562:	603a      	str	r2, [r7, #0]
    e564:	1dfb      	adds	r3, r7, #7
    e566:	1c02      	adds	r2, r0, #0
    e568:	701a      	strb	r2, [r3, #0]
    e56a:	1dbb      	adds	r3, r7, #6
    e56c:	1c0a      	adds	r2, r1, #0
    e56e:	701a      	strb	r2, [r3, #0]
	//MAX17055 is the battery fuel gauge
	//MAX17055 is 16-bit register read/writes with LSB first
	uint16_t temp16;
	uint8_t temp_buf[3];
	
	temp_buf[0] = address;
    e570:	2308      	movs	r3, #8
    e572:	18fb      	adds	r3, r7, r3
    e574:	1dba      	adds	r2, r7, #6
    e576:	7812      	ldrb	r2, [r2, #0]
    e578:	701a      	strb	r2, [r3, #0]
	if (mode==readp){
    e57a:	1dfb      	adds	r3, r7, #7
    e57c:	781b      	ldrb	r3, [r3, #0]
    e57e:	2b00      	cmp	r3, #0
    e580:	d124      	bne.n	e5cc <max17055_reg_read_write+0x70>
		i2c_read_write(readp, batt_add, temp_buf, 2);
    e582:	2308      	movs	r3, #8
    e584:	18fa      	adds	r2, r7, r3
    e586:	2302      	movs	r3, #2
    e588:	2136      	movs	r1, #54	; 0x36
    e58a:	2000      	movs	r0, #0
    e58c:	4c22      	ldr	r4, [pc, #136]	; (e618 <max17055_reg_read_write+0xbc>)
    e58e:	47a0      	blx	r4
		temp16=temp_buf[2];
    e590:	2308      	movs	r3, #8
    e592:	18fb      	adds	r3, r7, r3
    e594:	789a      	ldrb	r2, [r3, #2]
    e596:	230e      	movs	r3, #14
    e598:	18fb      	adds	r3, r7, r3
    e59a:	801a      	strh	r2, [r3, #0]
		temp16=temp16<<8;
    e59c:	230e      	movs	r3, #14
    e59e:	18fb      	adds	r3, r7, r3
    e5a0:	220e      	movs	r2, #14
    e5a2:	18ba      	adds	r2, r7, r2
    e5a4:	8812      	ldrh	r2, [r2, #0]
    e5a6:	0212      	lsls	r2, r2, #8
    e5a8:	801a      	strh	r2, [r3, #0]
		temp16=temp16+temp_buf[1];
    e5aa:	2308      	movs	r3, #8
    e5ac:	18fb      	adds	r3, r7, r3
    e5ae:	785b      	ldrb	r3, [r3, #1]
    e5b0:	b299      	uxth	r1, r3
    e5b2:	230e      	movs	r3, #14
    e5b4:	18fb      	adds	r3, r7, r3
    e5b6:	220e      	movs	r2, #14
    e5b8:	18ba      	adds	r2, r7, r2
    e5ba:	8812      	ldrh	r2, [r2, #0]
    e5bc:	188a      	adds	r2, r1, r2
    e5be:	801a      	strh	r2, [r3, #0]
		*data=temp16;
    e5c0:	683b      	ldr	r3, [r7, #0]
    e5c2:	220e      	movs	r2, #14
    e5c4:	18ba      	adds	r2, r7, r2
    e5c6:	8812      	ldrh	r2, [r2, #0]
    e5c8:	801a      	strh	r2, [r3, #0]
		temp_buf[1]=temp16 & 0x00FF;
		temp16=temp16>>8;
		temp_buf[2]=temp16 & 0x00FF;
		i2c_read_write(writep, batt_add, temp_buf, 2);
	}
}
    e5ca:	e020      	b.n	e60e <max17055_reg_read_write+0xb2>
		temp16=*data;
    e5cc:	230e      	movs	r3, #14
    e5ce:	18fb      	adds	r3, r7, r3
    e5d0:	683a      	ldr	r2, [r7, #0]
    e5d2:	8812      	ldrh	r2, [r2, #0]
    e5d4:	801a      	strh	r2, [r3, #0]
		temp_buf[1]=temp16 & 0x00FF;
    e5d6:	230e      	movs	r3, #14
    e5d8:	18fb      	adds	r3, r7, r3
    e5da:	881b      	ldrh	r3, [r3, #0]
    e5dc:	b2da      	uxtb	r2, r3
    e5de:	2308      	movs	r3, #8
    e5e0:	18fb      	adds	r3, r7, r3
    e5e2:	705a      	strb	r2, [r3, #1]
		temp16=temp16>>8;
    e5e4:	230e      	movs	r3, #14
    e5e6:	18fb      	adds	r3, r7, r3
    e5e8:	220e      	movs	r2, #14
    e5ea:	18ba      	adds	r2, r7, r2
    e5ec:	8812      	ldrh	r2, [r2, #0]
    e5ee:	0a12      	lsrs	r2, r2, #8
    e5f0:	801a      	strh	r2, [r3, #0]
		temp_buf[2]=temp16 & 0x00FF;
    e5f2:	230e      	movs	r3, #14
    e5f4:	18fb      	adds	r3, r7, r3
    e5f6:	881b      	ldrh	r3, [r3, #0]
    e5f8:	b2da      	uxtb	r2, r3
    e5fa:	2308      	movs	r3, #8
    e5fc:	18fb      	adds	r3, r7, r3
    e5fe:	709a      	strb	r2, [r3, #2]
		i2c_read_write(writep, batt_add, temp_buf, 2);
    e600:	2308      	movs	r3, #8
    e602:	18fa      	adds	r2, r7, r3
    e604:	2302      	movs	r3, #2
    e606:	2136      	movs	r1, #54	; 0x36
    e608:	2001      	movs	r0, #1
    e60a:	4c03      	ldr	r4, [pc, #12]	; (e618 <max17055_reg_read_write+0xbc>)
    e60c:	47a0      	blx	r4
}
    e60e:	46c0      	nop			; (mov r8, r8)
    e610:	46bd      	mov	sp, r7
    e612:	b005      	add	sp, #20
    e614:	bd90      	pop	{r4, r7, pc}
    e616:	46c0      	nop			; (mov r8, r8)
    e618:	0000e41d 	.word	0x0000e41d

0000e61c <adp5062_reg_read_write>:

void adp5062_reg_read_write(enum read_write mode, uint8_t address, uint8_t *data){
    e61c:	b590      	push	{r4, r7, lr}
    e61e:	b085      	sub	sp, #20
    e620:	af00      	add	r7, sp, #0
    e622:	603a      	str	r2, [r7, #0]
    e624:	1dfb      	adds	r3, r7, #7
    e626:	1c02      	adds	r2, r0, #0
    e628:	701a      	strb	r2, [r3, #0]
    e62a:	1dbb      	adds	r3, r7, #6
    e62c:	1c0a      	adds	r2, r1, #0
    e62e:	701a      	strb	r2, [r3, #0]
	// ADP5062 is the charger chip
	// Write and read 8-bit registers
	uint8_t temp_buf[2];
	
	temp_buf[0] = address;
    e630:	230c      	movs	r3, #12
    e632:	18fb      	adds	r3, r7, r3
    e634:	1dba      	adds	r2, r7, #6
    e636:	7812      	ldrb	r2, [r2, #0]
    e638:	701a      	strb	r2, [r3, #0]
	if (mode==readp){
    e63a:	1dfb      	adds	r3, r7, #7
    e63c:	781b      	ldrb	r3, [r3, #0]
    e63e:	2b00      	cmp	r3, #0
    e640:	d10c      	bne.n	e65c <adp5062_reg_read_write+0x40>
		i2c_read_write(readp, charger_add, temp_buf, 1);
    e642:	230c      	movs	r3, #12
    e644:	18fa      	adds	r2, r7, r3
    e646:	2301      	movs	r3, #1
    e648:	2114      	movs	r1, #20
    e64a:	2000      	movs	r0, #0
    e64c:	4c0b      	ldr	r4, [pc, #44]	; (e67c <adp5062_reg_read_write+0x60>)
    e64e:	47a0      	blx	r4
		*data=temp_buf[1];
    e650:	230c      	movs	r3, #12
    e652:	18fb      	adds	r3, r7, r3
    e654:	785a      	ldrb	r2, [r3, #1]
    e656:	683b      	ldr	r3, [r7, #0]
    e658:	701a      	strb	r2, [r3, #0]
	}else{
		
		temp_buf[1]=data;
		i2c_read_write(writep, charger_add, temp_buf, 2);
	}
}
    e65a:	e00b      	b.n	e674 <adp5062_reg_read_write+0x58>
		temp_buf[1]=data;
    e65c:	683b      	ldr	r3, [r7, #0]
    e65e:	b2da      	uxtb	r2, r3
    e660:	230c      	movs	r3, #12
    e662:	18fb      	adds	r3, r7, r3
    e664:	705a      	strb	r2, [r3, #1]
		i2c_read_write(writep, charger_add, temp_buf, 2);
    e666:	230c      	movs	r3, #12
    e668:	18fa      	adds	r2, r7, r3
    e66a:	2302      	movs	r3, #2
    e66c:	2114      	movs	r1, #20
    e66e:	2001      	movs	r0, #1
    e670:	4c02      	ldr	r4, [pc, #8]	; (e67c <adp5062_reg_read_write+0x60>)
    e672:	47a0      	blx	r4
}
    e674:	46c0      	nop			; (mov r8, r8)
    e676:	46bd      	mov	sp, r7
    e678:	b005      	add	sp, #20
    e67a:	bd90      	pop	{r4, r7, pc}
    e67c:	0000e41d 	.word	0x0000e41d

0000e680 <bcd_adj>:
//  Days in each month:           [31, 28, 31, 30,  31,  30,  31,  31,  30,  31,  30,  31];
uint32_t days_per_month_acc[12] = {0,  31, 59, 90,  120, 151, 181, 212, 243, 273, 304, 334};



void bcd_adj(uint8_t *x){
    e680:	b580      	push	{r7, lr}
    e682:	b082      	sub	sp, #8
    e684:	af00      	add	r7, sp, #0
    e686:	6078      	str	r0, [r7, #4]
	if ((*x & 0x0F)==0x0A){
    e688:	687b      	ldr	r3, [r7, #4]
    e68a:	781b      	ldrb	r3, [r3, #0]
    e68c:	001a      	movs	r2, r3
    e68e:	230f      	movs	r3, #15
    e690:	4013      	ands	r3, r2
    e692:	2b0a      	cmp	r3, #10
    e694:	d10d      	bne.n	e6b2 <bcd_adj+0x32>
		*x = *x & 0xF0;
    e696:	687b      	ldr	r3, [r7, #4]
    e698:	781b      	ldrb	r3, [r3, #0]
    e69a:	220f      	movs	r2, #15
    e69c:	4393      	bics	r3, r2
    e69e:	b2da      	uxtb	r2, r3
    e6a0:	687b      	ldr	r3, [r7, #4]
    e6a2:	701a      	strb	r2, [r3, #0]
		*x = *x + 0x10;
    e6a4:	687b      	ldr	r3, [r7, #4]
    e6a6:	781b      	ldrb	r3, [r3, #0]
    e6a8:	3310      	adds	r3, #16
    e6aa:	b2da      	uxtb	r2, r3
    e6ac:	687b      	ldr	r3, [r7, #4]
    e6ae:	701a      	strb	r2, [r3, #0]
		} else if ((*x & 0x0F)==0x0F){
		*x = *x & 0xF0;
		*x = *x + 0x09;
	}
}
    e6b0:	e013      	b.n	e6da <bcd_adj+0x5a>
		} else if ((*x & 0x0F)==0x0F){
    e6b2:	687b      	ldr	r3, [r7, #4]
    e6b4:	781b      	ldrb	r3, [r3, #0]
    e6b6:	001a      	movs	r2, r3
    e6b8:	230f      	movs	r3, #15
    e6ba:	4013      	ands	r3, r2
    e6bc:	2b0f      	cmp	r3, #15
    e6be:	d10c      	bne.n	e6da <bcd_adj+0x5a>
		*x = *x & 0xF0;
    e6c0:	687b      	ldr	r3, [r7, #4]
    e6c2:	781b      	ldrb	r3, [r3, #0]
    e6c4:	220f      	movs	r2, #15
    e6c6:	4393      	bics	r3, r2
    e6c8:	b2da      	uxtb	r2, r3
    e6ca:	687b      	ldr	r3, [r7, #4]
    e6cc:	701a      	strb	r2, [r3, #0]
		*x = *x + 0x09;
    e6ce:	687b      	ldr	r3, [r7, #4]
    e6d0:	781b      	ldrb	r3, [r3, #0]
    e6d2:	3309      	adds	r3, #9
    e6d4:	b2da      	uxtb	r2, r3
    e6d6:	687b      	ldr	r3, [r7, #4]
    e6d8:	701a      	strb	r2, [r3, #0]
}
    e6da:	46c0      	nop			; (mov r8, r8)
    e6dc:	46bd      	mov	sp, r7
    e6de:	b002      	add	sp, #8
    e6e0:	bd80      	pop	{r7, pc}
	...

0000e6e4 <get_time>:


void get_time(void){
    e6e4:	b590      	push	{r4, r7, lr}
    e6e6:	b087      	sub	sp, #28
    e6e8:	af00      	add	r7, sp, #0
	uint8_t temp_buf[20];
	int16_t temp_var16;
	temp_buf[0]=0x00;
    e6ea:	003b      	movs	r3, r7
    e6ec:	2200      	movs	r2, #0
    e6ee:	701a      	strb	r2, [r3, #0]
	i2c_read_write(readp, rtc_add, temp_buf, 19);
    e6f0:	003a      	movs	r2, r7
    e6f2:	2313      	movs	r3, #19
    e6f4:	2168      	movs	r1, #104	; 0x68
    e6f6:	2000      	movs	r0, #0
    e6f8:	4c38      	ldr	r4, [pc, #224]	; (e7dc <get_time+0xf8>)
    e6fa:	47a0      	blx	r4
	//Parse Data
	current_time.seconds=	temp_buf[0x01];
    e6fc:	003b      	movs	r3, r7
    e6fe:	785a      	ldrb	r2, [r3, #1]
    e700:	4b37      	ldr	r3, [pc, #220]	; (e7e0 <get_time+0xfc>)
    e702:	701a      	strb	r2, [r3, #0]
	current_time.minutes=	temp_buf[0x02];
    e704:	003b      	movs	r3, r7
    e706:	789a      	ldrb	r2, [r3, #2]
    e708:	4b35      	ldr	r3, [pc, #212]	; (e7e0 <get_time+0xfc>)
    e70a:	705a      	strb	r2, [r3, #1]
	current_time.hours=		temp_buf[0x03];
    e70c:	003b      	movs	r3, r7
    e70e:	78da      	ldrb	r2, [r3, #3]
    e710:	4b33      	ldr	r3, [pc, #204]	; (e7e0 <get_time+0xfc>)
    e712:	709a      	strb	r2, [r3, #2]
	current_time.date=		temp_buf[0x05] ;
    e714:	003b      	movs	r3, r7
    e716:	795a      	ldrb	r2, [r3, #5]
    e718:	4b31      	ldr	r3, [pc, #196]	; (e7e0 <get_time+0xfc>)
    e71a:	711a      	strb	r2, [r3, #4]
	current_time.month=		temp_buf[0x06] & 0x7F;//mask out first "century" bit
    e71c:	003b      	movs	r3, r7
    e71e:	799b      	ldrb	r3, [r3, #6]
    e720:	227f      	movs	r2, #127	; 0x7f
    e722:	4013      	ands	r3, r2
    e724:	b2da      	uxtb	r2, r3
    e726:	4b2e      	ldr	r3, [pc, #184]	; (e7e0 <get_time+0xfc>)
    e728:	715a      	strb	r2, [r3, #5]
	current_time.year=		temp_buf[0x07];
    e72a:	003b      	movs	r3, r7
    e72c:	79da      	ldrb	r2, [r3, #7]
    e72e:	4b2c      	ldr	r3, [pc, #176]	; (e7e0 <get_time+0xfc>)
    e730:	719a      	strb	r2, [r3, #6]
	current_time.control=	temp_buf[0x0F];
    e732:	003b      	movs	r3, r7
    e734:	7bda      	ldrb	r2, [r3, #15]
    e736:	4b2a      	ldr	r3, [pc, #168]	; (e7e0 <get_time+0xfc>)
    e738:	71da      	strb	r2, [r3, #7]
	current_time.control_status=	temp_buf[0x10];
    e73a:	003b      	movs	r3, r7
    e73c:	7c1a      	ldrb	r2, [r3, #16]
    e73e:	4b28      	ldr	r3, [pc, #160]	; (e7e0 <get_time+0xfc>)
    e740:	721a      	strb	r2, [r3, #8]
	temp_var16=temp_buf[0x12];
    e742:	003b      	movs	r3, r7
    e744:	7c9a      	ldrb	r2, [r3, #18]
    e746:	2316      	movs	r3, #22
    e748:	18fb      	adds	r3, r7, r3
    e74a:	801a      	strh	r2, [r3, #0]
	temp_var16=temp_var16<<8;
    e74c:	2316      	movs	r3, #22
    e74e:	18fb      	adds	r3, r7, r3
    e750:	2200      	movs	r2, #0
    e752:	5e9b      	ldrsh	r3, [r3, r2]
    e754:	021a      	lsls	r2, r3, #8
    e756:	2316      	movs	r3, #22
    e758:	18fb      	adds	r3, r7, r3
    e75a:	801a      	strh	r2, [r3, #0]
	temp_var16=temp_var16+temp_buf[0x13];
    e75c:	003b      	movs	r3, r7
    e75e:	7cdb      	ldrb	r3, [r3, #19]
    e760:	b29a      	uxth	r2, r3
    e762:	2316      	movs	r3, #22
    e764:	18fb      	adds	r3, r7, r3
    e766:	881b      	ldrh	r3, [r3, #0]
    e768:	18d3      	adds	r3, r2, r3
    e76a:	b29a      	uxth	r2, r3
    e76c:	2316      	movs	r3, #22
    e76e:	18fb      	adds	r3, r7, r3
    e770:	801a      	strh	r2, [r3, #0]
	current_time.temperatureC=temp_var16;
    e772:	2316      	movs	r3, #22
    e774:	18fb      	adds	r3, r7, r3
    e776:	2200      	movs	r2, #0
    e778:	5e9a      	ldrsh	r2, [r3, r2]
    e77a:	4b1a      	ldr	r3, [pc, #104]	; (e7e4 <get_time+0x100>)
    e77c:	0010      	movs	r0, r2
    e77e:	4798      	blx	r3
    e780:	1c02      	adds	r2, r0, #0
    e782:	4b17      	ldr	r3, [pc, #92]	; (e7e0 <get_time+0xfc>)
    e784:	60da      	str	r2, [r3, #12]
	current_time.temperatureC=current_time.temperatureC/256;
    e786:	4b16      	ldr	r3, [pc, #88]	; (e7e0 <get_time+0xfc>)
    e788:	68da      	ldr	r2, [r3, #12]
    e78a:	4b17      	ldr	r3, [pc, #92]	; (e7e8 <get_time+0x104>)
    e78c:	2187      	movs	r1, #135	; 0x87
    e78e:	05c9      	lsls	r1, r1, #23
    e790:	1c10      	adds	r0, r2, #0
    e792:	4798      	blx	r3
    e794:	1c03      	adds	r3, r0, #0
    e796:	1c1a      	adds	r2, r3, #0
    e798:	4b11      	ldr	r3, [pc, #68]	; (e7e0 <get_time+0xfc>)
    e79a:	60da      	str	r2, [r3, #12]
	current_time.temperatureF=current_time.temperatureC*1.8+32;
    e79c:	4b10      	ldr	r3, [pc, #64]	; (e7e0 <get_time+0xfc>)
    e79e:	68da      	ldr	r2, [r3, #12]
    e7a0:	4b12      	ldr	r3, [pc, #72]	; (e7ec <get_time+0x108>)
    e7a2:	1c10      	adds	r0, r2, #0
    e7a4:	4798      	blx	r3
    e7a6:	4c12      	ldr	r4, [pc, #72]	; (e7f0 <get_time+0x10c>)
    e7a8:	4a12      	ldr	r2, [pc, #72]	; (e7f4 <get_time+0x110>)
    e7aa:	4b13      	ldr	r3, [pc, #76]	; (e7f8 <get_time+0x114>)
    e7ac:	47a0      	blx	r4
    e7ae:	0003      	movs	r3, r0
    e7b0:	000c      	movs	r4, r1
    e7b2:	0018      	movs	r0, r3
    e7b4:	0021      	movs	r1, r4
    e7b6:	4c11      	ldr	r4, [pc, #68]	; (e7fc <get_time+0x118>)
    e7b8:	2200      	movs	r2, #0
    e7ba:	4b11      	ldr	r3, [pc, #68]	; (e800 <get_time+0x11c>)
    e7bc:	47a0      	blx	r4
    e7be:	0003      	movs	r3, r0
    e7c0:	000c      	movs	r4, r1
    e7c2:	0019      	movs	r1, r3
    e7c4:	0022      	movs	r2, r4
    e7c6:	4b0f      	ldr	r3, [pc, #60]	; (e804 <get_time+0x120>)
    e7c8:	0008      	movs	r0, r1
    e7ca:	0011      	movs	r1, r2
    e7cc:	4798      	blx	r3
    e7ce:	1c02      	adds	r2, r0, #0
    e7d0:	4b03      	ldr	r3, [pc, #12]	; (e7e0 <get_time+0xfc>)
    e7d2:	611a      	str	r2, [r3, #16]
	
}
    e7d4:	46c0      	nop			; (mov r8, r8)
    e7d6:	46bd      	mov	sp, r7
    e7d8:	b007      	add	sp, #28
    e7da:	bd90      	pop	{r4, r7, pc}
    e7dc:	0000e41d 	.word	0x0000e41d
    e7e0:	2000103c 	.word	0x2000103c
    e7e4:	0001f11d 	.word	0x0001f11d
    e7e8:	0001e785 	.word	0x0001e785
    e7ec:	00020d99 	.word	0x00020d99
    e7f0:	000200d1 	.word	0x000200d1
    e7f4:	cccccccd 	.word	0xcccccccd
    e7f8:	3ffccccc 	.word	0x3ffccccc
    e7fc:	0001f249 	.word	0x0001f249
    e800:	40400000 	.word	0x40400000
    e804:	00020e3d 	.word	0x00020e3d

0000e808 <set_time>:

void set_time(void){
    e808:	b590      	push	{r4, r7, lr}
    e80a:	b087      	sub	sp, #28
    e80c:	af00      	add	r7, sp, #0
	uint8_t temp_buf[20];

	temp_buf[0]=0x00;
    e80e:	1d3b      	adds	r3, r7, #4
    e810:	2200      	movs	r2, #0
    e812:	701a      	strb	r2, [r3, #0]

	//Parse Data
	temp_buf[0x01]=temp_time.seconds;
    e814:	4b12      	ldr	r3, [pc, #72]	; (e860 <set_time+0x58>)
    e816:	781a      	ldrb	r2, [r3, #0]
    e818:	1d3b      	adds	r3, r7, #4
    e81a:	705a      	strb	r2, [r3, #1]
	temp_buf[0x02]=temp_time.minutes;
    e81c:	4b10      	ldr	r3, [pc, #64]	; (e860 <set_time+0x58>)
    e81e:	785a      	ldrb	r2, [r3, #1]
    e820:	1d3b      	adds	r3, r7, #4
    e822:	709a      	strb	r2, [r3, #2]
	temp_buf[0x03]=temp_time.hours;
    e824:	4b0e      	ldr	r3, [pc, #56]	; (e860 <set_time+0x58>)
    e826:	789a      	ldrb	r2, [r3, #2]
    e828:	1d3b      	adds	r3, r7, #4
    e82a:	70da      	strb	r2, [r3, #3]
	temp_buf[0x04]=temp_time.day;
    e82c:	4b0c      	ldr	r3, [pc, #48]	; (e860 <set_time+0x58>)
    e82e:	78da      	ldrb	r2, [r3, #3]
    e830:	1d3b      	adds	r3, r7, #4
    e832:	711a      	strb	r2, [r3, #4]
	temp_buf[0x05]=temp_time.date;
    e834:	4b0a      	ldr	r3, [pc, #40]	; (e860 <set_time+0x58>)
    e836:	791a      	ldrb	r2, [r3, #4]
    e838:	1d3b      	adds	r3, r7, #4
    e83a:	715a      	strb	r2, [r3, #5]
	temp_buf[0x06]=temp_time.month;
    e83c:	4b08      	ldr	r3, [pc, #32]	; (e860 <set_time+0x58>)
    e83e:	795a      	ldrb	r2, [r3, #5]
    e840:	1d3b      	adds	r3, r7, #4
    e842:	719a      	strb	r2, [r3, #6]
	temp_buf[0x07]=temp_time.year;
    e844:	4b06      	ldr	r3, [pc, #24]	; (e860 <set_time+0x58>)
    e846:	799a      	ldrb	r2, [r3, #6]
    e848:	1d3b      	adds	r3, r7, #4
    e84a:	71da      	strb	r2, [r3, #7]
	i2c_read_write(writep, rtc_add, temp_buf, 8);
    e84c:	1d3a      	adds	r2, r7, #4
    e84e:	2308      	movs	r3, #8
    e850:	2168      	movs	r1, #104	; 0x68
    e852:	2001      	movs	r0, #1
    e854:	4c03      	ldr	r4, [pc, #12]	; (e864 <set_time+0x5c>)
    e856:	47a0      	blx	r4
	
}
    e858:	46c0      	nop			; (mov r8, r8)
    e85a:	46bd      	mov	sp, r7
    e85c:	b007      	add	sp, #28
    e85e:	bd90      	pop	{r4, r7, pc}
    e860:	2000108c 	.word	0x2000108c
    e864:	0000e41d 	.word	0x0000e41d

0000e868 <ext_osc_onoff>:


void ext_osc_onoff(bool onoff){
    e868:	b590      	push	{r4, r7, lr}
    e86a:	b085      	sub	sp, #20
    e86c:	af00      	add	r7, sp, #0
    e86e:	0002      	movs	r2, r0
    e870:	1dfb      	adds	r3, r7, #7
    e872:	701a      	strb	r2, [r3, #0]
	uint8_t temp_buf[3];
	
	temp_buf[0] = 0x0E;
    e874:	230c      	movs	r3, #12
    e876:	18fb      	adds	r3, r7, r3
    e878:	220e      	movs	r2, #14
    e87a:	701a      	strb	r2, [r3, #0]
	//Register 0x0Eh 
	//0b00000100 = 0x04
	temp_buf[1] = 0x04;
    e87c:	230c      	movs	r3, #12
    e87e:	18fb      	adds	r3, r7, r3
    e880:	2204      	movs	r2, #4
    e882:	705a      	strb	r2, [r3, #1]
	//Register 0x0Fh
	//0b00001000 = 0x08; 32kHz osc on
	//0b00000000 = 0x00; 32kHz osc off
	if (onoff){
    e884:	1dfb      	adds	r3, r7, #7
    e886:	781b      	ldrb	r3, [r3, #0]
    e888:	2b00      	cmp	r3, #0
    e88a:	d004      	beq.n	e896 <ext_osc_onoff+0x2e>
		temp_buf[2] = 0x08;
    e88c:	230c      	movs	r3, #12
    e88e:	18fb      	adds	r3, r7, r3
    e890:	2208      	movs	r2, #8
    e892:	709a      	strb	r2, [r3, #2]
    e894:	e003      	b.n	e89e <ext_osc_onoff+0x36>
	}else{
		temp_buf[2] = 0x00;
    e896:	230c      	movs	r3, #12
    e898:	18fb      	adds	r3, r7, r3
    e89a:	2200      	movs	r2, #0
    e89c:	709a      	strb	r2, [r3, #2]
	}
	
	i2c_read_write(writep, rtc_add, temp_buf, 3);
    e89e:	230c      	movs	r3, #12
    e8a0:	18fa      	adds	r2, r7, r3
    e8a2:	2303      	movs	r3, #3
    e8a4:	2168      	movs	r1, #104	; 0x68
    e8a6:	2001      	movs	r0, #1
    e8a8:	4c02      	ldr	r4, [pc, #8]	; (e8b4 <ext_osc_onoff+0x4c>)
    e8aa:	47a0      	blx	r4
	
	
}
    e8ac:	46c0      	nop			; (mov r8, r8)
    e8ae:	46bd      	mov	sp, r7
    e8b0:	b005      	add	sp, #20
    e8b2:	bd90      	pop	{r4, r7, pc}
    e8b4:	0000e41d 	.word	0x0000e41d

0000e8b8 <gen_posix_time>:



uint32_t gen_posix_time(struct Time *time_inst){
    e8b8:	b590      	push	{r4, r7, lr}
    e8ba:	b08b      	sub	sp, #44	; 0x2c
    e8bc:	af00      	add	r7, sp, #0
    e8be:	6078      	str	r0, [r7, #4]
	//https://stackoverflow.com/questions/21975472/how-to-calculate-epoch-day
	uint32_t posix_time;
	uint32_t tm_sec, tm_min, tm_hour, tm_yday, tm_year, tm_month;
	
	tm_sec = bcd2dec(time_inst->seconds);
    e8c0:	687b      	ldr	r3, [r7, #4]
    e8c2:	781b      	ldrb	r3, [r3, #0]
    e8c4:	0018      	movs	r0, r3
    e8c6:	4b34      	ldr	r3, [pc, #208]	; (e998 <gen_posix_time+0xe0>)
    e8c8:	4798      	blx	r3
    e8ca:	0003      	movs	r3, r0
    e8cc:	627b      	str	r3, [r7, #36]	; 0x24
	tm_min = bcd2dec(time_inst->minutes);
    e8ce:	687b      	ldr	r3, [r7, #4]
    e8d0:	785b      	ldrb	r3, [r3, #1]
    e8d2:	0018      	movs	r0, r3
    e8d4:	4b30      	ldr	r3, [pc, #192]	; (e998 <gen_posix_time+0xe0>)
    e8d6:	4798      	blx	r3
    e8d8:	0003      	movs	r3, r0
    e8da:	623b      	str	r3, [r7, #32]
	tm_hour = bcd2dec(time_inst->hours);
    e8dc:	687b      	ldr	r3, [r7, #4]
    e8de:	789b      	ldrb	r3, [r3, #2]
    e8e0:	0018      	movs	r0, r3
    e8e2:	4b2d      	ldr	r3, [pc, #180]	; (e998 <gen_posix_time+0xe0>)
    e8e4:	4798      	blx	r3
    e8e6:	0003      	movs	r3, r0
    e8e8:	61fb      	str	r3, [r7, #28]
	tm_year = bcd2dec(time_inst->year)+100;//  Years since 1900, time_inst->year is years since 2000
    e8ea:	687b      	ldr	r3, [r7, #4]
    e8ec:	799b      	ldrb	r3, [r3, #6]
    e8ee:	0018      	movs	r0, r3
    e8f0:	4b29      	ldr	r3, [pc, #164]	; (e998 <gen_posix_time+0xe0>)
    e8f2:	4798      	blx	r3
    e8f4:	0003      	movs	r3, r0
    e8f6:	3364      	adds	r3, #100	; 0x64
    e8f8:	61bb      	str	r3, [r7, #24]
	tm_yday = bcd2dec(time_inst->date);
    e8fa:	687b      	ldr	r3, [r7, #4]
    e8fc:	791b      	ldrb	r3, [r3, #4]
    e8fe:	0018      	movs	r0, r3
    e900:	4b25      	ldr	r3, [pc, #148]	; (e998 <gen_posix_time+0xe0>)
    e902:	4798      	blx	r3
    e904:	0003      	movs	r3, r0
    e906:	617b      	str	r3, [r7, #20]
	tm_month = bcd2dec(time_inst->month);
    e908:	687b      	ldr	r3, [r7, #4]
    e90a:	795b      	ldrb	r3, [r3, #5]
    e90c:	0018      	movs	r0, r3
    e90e:	4b22      	ldr	r3, [pc, #136]	; (e998 <gen_posix_time+0xe0>)
    e910:	4798      	blx	r3
    e912:	0003      	movs	r3, r0
    e914:	613b      	str	r3, [r7, #16]
	
	//  Find days since year roll-over
	// On "days_per_month_acc" index, subtract 1 to account for 0-base index.
	// Subtract 1 from "tm_yday" to account for referencing.  i.e. January 3, 12 PM is 2.5 days into year
	// Subtract 1 to account for 0-base index of month_index
	tm_yday = tm_yday + days_per_month_acc[(tm_month-1)] -1;
    e916:	693b      	ldr	r3, [r7, #16]
    e918:	1e5a      	subs	r2, r3, #1
    e91a:	4b20      	ldr	r3, [pc, #128]	; (e99c <gen_posix_time+0xe4>)
    e91c:	0092      	lsls	r2, r2, #2
    e91e:	58d2      	ldr	r2, [r2, r3]
    e920:	697b      	ldr	r3, [r7, #20]
    e922:	18d3      	adds	r3, r2, r3
    e924:	3b01      	subs	r3, #1
    e926:	617b      	str	r3, [r7, #20]
	
	
	posix_time = tm_sec+tm_min*60+tm_hour*3600+tm_yday*86400 + (tm_year-70)*31536000;
    e928:	6a3a      	ldr	r2, [r7, #32]
    e92a:	0013      	movs	r3, r2
    e92c:	011b      	lsls	r3, r3, #4
    e92e:	1a9b      	subs	r3, r3, r2
    e930:	009b      	lsls	r3, r3, #2
    e932:	0019      	movs	r1, r3
    e934:	69fb      	ldr	r3, [r7, #28]
    e936:	22e1      	movs	r2, #225	; 0xe1
    e938:	0112      	lsls	r2, r2, #4
    e93a:	4353      	muls	r3, r2
    e93c:	18ca      	adds	r2, r1, r3
    e93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e940:	18d2      	adds	r2, r2, r3
    e942:	697b      	ldr	r3, [r7, #20]
    e944:	4916      	ldr	r1, [pc, #88]	; (e9a0 <gen_posix_time+0xe8>)
    e946:	434b      	muls	r3, r1
    e948:	18d2      	adds	r2, r2, r3
    e94a:	69bb      	ldr	r3, [r7, #24]
    e94c:	4915      	ldr	r1, [pc, #84]	; (e9a4 <gen_posix_time+0xec>)
    e94e:	434b      	muls	r3, r1
    e950:	18d3      	adds	r3, r2, r3
    e952:	4a15      	ldr	r2, [pc, #84]	; (e9a8 <gen_posix_time+0xf0>)
    e954:	4694      	mov	ip, r2
    e956:	4463      	add	r3, ip
    e958:	60fb      	str	r3, [r7, #12]
	//  Add adjustments for leap-years
	posix_time += ((tm_year-69)/4)*86400 -((tm_year-1)/100)*86400 + ((tm_year+299)/400)*86400;
    e95a:	69bb      	ldr	r3, [r7, #24]
    e95c:	3b45      	subs	r3, #69	; 0x45
    e95e:	089c      	lsrs	r4, r3, #2
    e960:	69bb      	ldr	r3, [r7, #24]
    e962:	1e5a      	subs	r2, r3, #1
    e964:	4b11      	ldr	r3, [pc, #68]	; (e9ac <gen_posix_time+0xf4>)
    e966:	2164      	movs	r1, #100	; 0x64
    e968:	0010      	movs	r0, r2
    e96a:	4798      	blx	r3
    e96c:	0003      	movs	r3, r0
    e96e:	1ae4      	subs	r4, r4, r3
    e970:	69bb      	ldr	r3, [r7, #24]
    e972:	332c      	adds	r3, #44	; 0x2c
    e974:	33ff      	adds	r3, #255	; 0xff
    e976:	0018      	movs	r0, r3
    e978:	4b0c      	ldr	r3, [pc, #48]	; (e9ac <gen_posix_time+0xf4>)
    e97a:	22c8      	movs	r2, #200	; 0xc8
    e97c:	0051      	lsls	r1, r2, #1
    e97e:	4798      	blx	r3
    e980:	0003      	movs	r3, r0
    e982:	18e3      	adds	r3, r4, r3
    e984:	4a06      	ldr	r2, [pc, #24]	; (e9a0 <gen_posix_time+0xe8>)
    e986:	4353      	muls	r3, r2
    e988:	68fa      	ldr	r2, [r7, #12]
    e98a:	18d3      	adds	r3, r2, r3
    e98c:	60fb      	str	r3, [r7, #12]
	
	return posix_time;
    e98e:	68fb      	ldr	r3, [r7, #12]
	
	
	
	
}
    e990:	0018      	movs	r0, r3
    e992:	46bd      	mov	sp, r7
    e994:	b00b      	add	sp, #44	; 0x2c
    e996:	bd90      	pop	{r4, r7, pc}
    e998:	0000e9b1 	.word	0x0000e9b1
    e99c:	200000d8 	.word	0x200000d8
    e9a0:	00015180 	.word	0x00015180
    e9a4:	01e13380 	.word	0x01e13380
    e9a8:	7c6beb00 	.word	0x7c6beb00
    e9ac:	0001df49 	.word	0x0001df49

0000e9b0 <bcd2dec>:





uint32_t bcd2dec(uint8_t bcd_var){
    e9b0:	b580      	push	{r7, lr}
    e9b2:	b084      	sub	sp, #16
    e9b4:	af00      	add	r7, sp, #0
    e9b6:	0002      	movs	r2, r0
    e9b8:	1dfb      	adds	r3, r7, #7
    e9ba:	701a      	strb	r2, [r3, #0]
	uint8_t dec;
	dec = bcd_var & 0xF0;
    e9bc:	230f      	movs	r3, #15
    e9be:	18fb      	adds	r3, r7, r3
    e9c0:	1dfa      	adds	r2, r7, #7
    e9c2:	7812      	ldrb	r2, [r2, #0]
    e9c4:	210f      	movs	r1, #15
    e9c6:	438a      	bics	r2, r1
    e9c8:	701a      	strb	r2, [r3, #0]
	dec = dec>>4;
    e9ca:	230f      	movs	r3, #15
    e9cc:	18fb      	adds	r3, r7, r3
    e9ce:	220f      	movs	r2, #15
    e9d0:	18ba      	adds	r2, r7, r2
    e9d2:	7812      	ldrb	r2, [r2, #0]
    e9d4:	0912      	lsrs	r2, r2, #4
    e9d6:	701a      	strb	r2, [r3, #0]
	dec = dec*10;
    e9d8:	230f      	movs	r3, #15
    e9da:	18fa      	adds	r2, r7, r3
    e9dc:	230f      	movs	r3, #15
    e9de:	18fb      	adds	r3, r7, r3
    e9e0:	781b      	ldrb	r3, [r3, #0]
    e9e2:	1c19      	adds	r1, r3, #0
    e9e4:	0089      	lsls	r1, r1, #2
    e9e6:	18cb      	adds	r3, r1, r3
    e9e8:	18db      	adds	r3, r3, r3
    e9ea:	7013      	strb	r3, [r2, #0]
	dec = dec + (bcd_var & 0x0F);
    e9ec:	1dfb      	adds	r3, r7, #7
    e9ee:	781b      	ldrb	r3, [r3, #0]
    e9f0:	220f      	movs	r2, #15
    e9f2:	4013      	ands	r3, r2
    e9f4:	b2d9      	uxtb	r1, r3
    e9f6:	230f      	movs	r3, #15
    e9f8:	18fb      	adds	r3, r7, r3
    e9fa:	220f      	movs	r2, #15
    e9fc:	18ba      	adds	r2, r7, r2
    e9fe:	7812      	ldrb	r2, [r2, #0]
    ea00:	188a      	adds	r2, r1, r2
    ea02:	701a      	strb	r2, [r3, #0]
	
	return dec;
    ea04:	230f      	movs	r3, #15
    ea06:	18fb      	adds	r3, r7, r3
    ea08:	781b      	ldrb	r3, [r3, #0]
}
    ea0a:	0018      	movs	r0, r3
    ea0c:	46bd      	mov	sp, r7
    ea0e:	b004      	add	sp, #16
    ea10:	bd80      	pop	{r7, pc}
	...

0000ea14 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
    ea14:	b590      	push	{r4, r7, lr}
    ea16:	b085      	sub	sp, #20
    ea18:	af00      	add	r7, sp, #0
    ea1a:	0002      	movs	r2, r0
    ea1c:	1dfb      	adds	r3, r7, #7
    ea1e:	701a      	strb	r2, [r3, #0]
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
    ea20:	1dfb      	adds	r3, r7, #7
    ea22:	781b      	ldrb	r3, [r3, #0]
    ea24:	2b00      	cmp	r3, #0
    ea26:	d001      	beq.n	ea2c <disk_initialize+0x18>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
    ea28:	2301      	movs	r3, #1
    ea2a:	e029      	b.n	ea80 <disk_initialize+0x6c>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
    ea2c:	2300      	movs	r3, #0
    ea2e:	60fb      	str	r3, [r7, #12]
    ea30:	e010      	b.n	ea54 <disk_initialize+0x40>
		mem_status = mem_test_unit_ready(drv);
    ea32:	230b      	movs	r3, #11
    ea34:	18fc      	adds	r4, r7, r3
    ea36:	1dfb      	adds	r3, r7, #7
    ea38:	781b      	ldrb	r3, [r3, #0]
    ea3a:	0018      	movs	r0, r3
    ea3c:	4b12      	ldr	r3, [pc, #72]	; (ea88 <disk_initialize+0x74>)
    ea3e:	4798      	blx	r3
    ea40:	0003      	movs	r3, r0
    ea42:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
    ea44:	230b      	movs	r3, #11
    ea46:	18fb      	adds	r3, r7, r3
    ea48:	781b      	ldrb	r3, [r3, #0]
    ea4a:	2b03      	cmp	r3, #3
    ea4c:	d106      	bne.n	ea5c <disk_initialize+0x48>
	for (i = 0; i < 2; i ++) {
    ea4e:	68fb      	ldr	r3, [r7, #12]
    ea50:	3301      	adds	r3, #1
    ea52:	60fb      	str	r3, [r7, #12]
    ea54:	68fb      	ldr	r3, [r7, #12]
    ea56:	2b01      	cmp	r3, #1
    ea58:	ddeb      	ble.n	ea32 <disk_initialize+0x1e>
    ea5a:	e000      	b.n	ea5e <disk_initialize+0x4a>
			break;
    ea5c:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
    ea5e:	230b      	movs	r3, #11
    ea60:	18fb      	adds	r3, r7, r3
    ea62:	781b      	ldrb	r3, [r3, #0]
    ea64:	2b00      	cmp	r3, #0
    ea66:	d001      	beq.n	ea6c <disk_initialize+0x58>
		return STA_NOINIT;
    ea68:	2301      	movs	r3, #1
    ea6a:	e009      	b.n	ea80 <disk_initialize+0x6c>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
    ea6c:	1dfb      	adds	r3, r7, #7
    ea6e:	781b      	ldrb	r3, [r3, #0]
    ea70:	0018      	movs	r0, r3
    ea72:	4b06      	ldr	r3, [pc, #24]	; (ea8c <disk_initialize+0x78>)
    ea74:	4798      	blx	r3
    ea76:	1e03      	subs	r3, r0, #0
    ea78:	d001      	beq.n	ea7e <disk_initialize+0x6a>
		return STA_PROTECT;
    ea7a:	2304      	movs	r3, #4
    ea7c:	e000      	b.n	ea80 <disk_initialize+0x6c>
	}

	/* The memory should already be initialized */
	return 0;
    ea7e:	2300      	movs	r3, #0
}
    ea80:	0018      	movs	r0, r3
    ea82:	46bd      	mov	sp, r7
    ea84:	b005      	add	sp, #20
    ea86:	bd90      	pop	{r4, r7, pc}
    ea88:	00004911 	.word	0x00004911
    ea8c:	00004979 	.word	0x00004979

0000ea90 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
    ea90:	b580      	push	{r7, lr}
    ea92:	b082      	sub	sp, #8
    ea94:	af00      	add	r7, sp, #0
    ea96:	0002      	movs	r2, r0
    ea98:	1dfb      	adds	r3, r7, #7
    ea9a:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
    ea9c:	1dfb      	adds	r3, r7, #7
    ea9e:	781b      	ldrb	r3, [r3, #0]
    eaa0:	0018      	movs	r0, r3
    eaa2:	4b08      	ldr	r3, [pc, #32]	; (eac4 <disk_status+0x34>)
    eaa4:	4798      	blx	r3
    eaa6:	1e03      	subs	r3, r0, #0
    eaa8:	d002      	beq.n	eab0 <disk_status+0x20>
    eaaa:	2b02      	cmp	r3, #2
    eaac:	d002      	beq.n	eab4 <disk_status+0x24>
    eaae:	e003      	b.n	eab8 <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
    eab0:	2300      	movs	r3, #0
    eab2:	e002      	b.n	eaba <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
    eab4:	2303      	movs	r3, #3
    eab6:	e000      	b.n	eaba <disk_status+0x2a>
	default:
		return STA_NOINIT;
    eab8:	2301      	movs	r3, #1
	}
}
    eaba:	0018      	movs	r0, r3
    eabc:	46bd      	mov	sp, r7
    eabe:	b002      	add	sp, #8
    eac0:	bd80      	pop	{r7, pc}
    eac2:	46c0      	nop			; (mov r8, r8)
    eac4:	00004911 	.word	0x00004911

0000eac8 <disk_readp>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_readp(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
    eac8:	b580      	push	{r7, lr}
    eaca:	b084      	sub	sp, #16
    eacc:	af00      	add	r7, sp, #0
    eace:	60b9      	str	r1, [r7, #8]
    ead0:	607a      	str	r2, [r7, #4]
    ead2:	0019      	movs	r1, r3
    ead4:	230f      	movs	r3, #15
    ead6:	18fb      	adds	r3, r7, r3
    ead8:	1c02      	adds	r2, r0, #0
    eada:	701a      	strb	r2, [r3, #0]
    eadc:	230e      	movs	r3, #14
    eade:	18fb      	adds	r3, r7, r3
    eae0:	1c0a      	adds	r2, r1, #0
    eae2:	701a      	strb	r2, [r3, #0]
	}

	return RES_OK;

#else
	return RES_ERROR;
    eae4:	2301      	movs	r3, #1
#endif
}
    eae6:	0018      	movs	r0, r3
    eae8:	46bd      	mov	sp, r7
    eaea:	b004      	add	sp, #16
    eaec:	bd80      	pop	{r7, pc}

0000eaee <disk_writep>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_writep(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
    eaee:	b580      	push	{r7, lr}
    eaf0:	b084      	sub	sp, #16
    eaf2:	af00      	add	r7, sp, #0
    eaf4:	60b9      	str	r1, [r7, #8]
    eaf6:	607a      	str	r2, [r7, #4]
    eaf8:	0019      	movs	r1, r3
    eafa:	230f      	movs	r3, #15
    eafc:	18fb      	adds	r3, r7, r3
    eafe:	1c02      	adds	r2, r0, #0
    eb00:	701a      	strb	r2, [r3, #0]
    eb02:	230e      	movs	r3, #14
    eb04:	18fb      	adds	r3, r7, r3
    eb06:	1c0a      	adds	r2, r1, #0
    eb08:	701a      	strb	r2, [r3, #0]
	}

	return RES_OK;

#else
	return RES_ERROR;
    eb0a:	2301      	movs	r3, #1
#endif
}
    eb0c:	0018      	movs	r0, r3
    eb0e:	46bd      	mov	sp, r7
    eb10:	b004      	add	sp, #16
    eb12:	bd80      	pop	{r7, pc}

0000eb14 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
    eb14:	b590      	push	{r4, r7, lr}
    eb16:	b085      	sub	sp, #20
    eb18:	af00      	add	r7, sp, #0
    eb1a:	603a      	str	r2, [r7, #0]
    eb1c:	1dfb      	adds	r3, r7, #7
    eb1e:	1c02      	adds	r2, r0, #0
    eb20:	701a      	strb	r2, [r3, #0]
    eb22:	1dbb      	adds	r3, r7, #6
    eb24:	1c0a      	adds	r2, r1, #0
    eb26:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
    eb28:	230f      	movs	r3, #15
    eb2a:	18fb      	adds	r3, r7, r3
    eb2c:	2204      	movs	r2, #4
    eb2e:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
    eb30:	1dbb      	adds	r3, r7, #6
    eb32:	781b      	ldrb	r3, [r3, #0]
    eb34:	2b01      	cmp	r3, #1
    eb36:	d00f      	beq.n	eb58 <disk_ioctl+0x44>
    eb38:	dc02      	bgt.n	eb40 <disk_ioctl+0x2c>
    eb3a:	2b00      	cmp	r3, #0
    eb3c:	d044      	beq.n	ebc8 <disk_ioctl+0xb4>
    eb3e:	e054      	b.n	ebea <disk_ioctl+0xd6>
    eb40:	2b02      	cmp	r3, #2
    eb42:	d01a      	beq.n	eb7a <disk_ioctl+0x66>
    eb44:	2b03      	cmp	r3, #3
    eb46:	d150      	bne.n	ebea <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
    eb48:	683b      	ldr	r3, [r7, #0]
    eb4a:	2201      	movs	r2, #1
    eb4c:	601a      	str	r2, [r3, #0]
		res = RES_OK;
    eb4e:	230f      	movs	r3, #15
    eb50:	18fb      	adds	r3, r7, r3
    eb52:	2200      	movs	r2, #0
    eb54:	701a      	strb	r2, [r3, #0]
		break;
    eb56:	e04c      	b.n	ebf2 <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
    eb58:	2308      	movs	r3, #8
    eb5a:	18fa      	adds	r2, r7, r3
    eb5c:	1dfb      	adds	r3, r7, #7
    eb5e:	781b      	ldrb	r3, [r3, #0]
    eb60:	0011      	movs	r1, r2
    eb62:	0018      	movs	r0, r3
    eb64:	4b26      	ldr	r3, [pc, #152]	; (ec00 <disk_ioctl+0xec>)
    eb66:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
    eb68:	68bb      	ldr	r3, [r7, #8]
    eb6a:	1c5a      	adds	r2, r3, #1
    eb6c:	683b      	ldr	r3, [r7, #0]
    eb6e:	601a      	str	r2, [r3, #0]

		res = RES_OK;
    eb70:	230f      	movs	r3, #15
    eb72:	18fb      	adds	r3, r7, r3
    eb74:	2200      	movs	r2, #0
    eb76:	701a      	strb	r2, [r3, #0]
	}
	break;
    eb78:	e03b      	b.n	ebf2 <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
    eb7a:	230e      	movs	r3, #14
    eb7c:	18fc      	adds	r4, r7, r3
    eb7e:	1dfb      	adds	r3, r7, #7
    eb80:	781b      	ldrb	r3, [r3, #0]
    eb82:	0018      	movs	r0, r3
    eb84:	4b1f      	ldr	r3, [pc, #124]	; (ec04 <disk_ioctl+0xf0>)
    eb86:	4798      	blx	r3
    eb88:	0003      	movs	r3, r0
    eb8a:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
    eb8c:	230e      	movs	r3, #14
    eb8e:	18fb      	adds	r3, r7, r3
    eb90:	781b      	ldrb	r3, [r3, #0]
    eb92:	2b01      	cmp	r3, #1
    eb94:	d010      	beq.n	ebb8 <disk_ioctl+0xa4>
    eb96:	230e      	movs	r3, #14
    eb98:	18fb      	adds	r3, r7, r3
    eb9a:	781b      	ldrb	r3, [r3, #0]
    eb9c:	2b02      	cmp	r3, #2
    eb9e:	d00b      	beq.n	ebb8 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
    eba0:	230e      	movs	r3, #14
    eba2:	18fb      	adds	r3, r7, r3
    eba4:	781b      	ldrb	r3, [r3, #0]
    eba6:	2b04      	cmp	r3, #4
    eba8:	d006      	beq.n	ebb8 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
    ebaa:	230e      	movs	r3, #14
    ebac:	18fb      	adds	r3, r7, r3
    ebae:	781b      	ldrb	r3, [r3, #0]
    ebb0:	2b08      	cmp	r3, #8
    ebb2:	d001      	beq.n	ebb8 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
    ebb4:	2301      	movs	r3, #1
    ebb6:	e01f      	b.n	ebf8 <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
    ebb8:	683b      	ldr	r3, [r7, #0]
    ebba:	2200      	movs	r2, #0
    ebbc:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
    ebbe:	230f      	movs	r3, #15
    ebc0:	18fb      	adds	r3, r7, r3
    ebc2:	2200      	movs	r2, #0
    ebc4:	701a      	strb	r2, [r3, #0]
	}
	break;
    ebc6:	e014      	b.n	ebf2 <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
    ebc8:	1dfb      	adds	r3, r7, #7
    ebca:	781b      	ldrb	r3, [r3, #0]
    ebcc:	0018      	movs	r0, r3
    ebce:	4b0e      	ldr	r3, [pc, #56]	; (ec08 <disk_ioctl+0xf4>)
    ebd0:	4798      	blx	r3
    ebd2:	1e03      	subs	r3, r0, #0
    ebd4:	d104      	bne.n	ebe0 <disk_ioctl+0xcc>
			res = RES_OK;
    ebd6:	230f      	movs	r3, #15
    ebd8:	18fb      	adds	r3, r7, r3
    ebda:	2200      	movs	r2, #0
    ebdc:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
    ebde:	e008      	b.n	ebf2 <disk_ioctl+0xde>
			res = RES_NOTRDY;
    ebe0:	230f      	movs	r3, #15
    ebe2:	18fb      	adds	r3, r7, r3
    ebe4:	2203      	movs	r2, #3
    ebe6:	701a      	strb	r2, [r3, #0]
		break;
    ebe8:	e003      	b.n	ebf2 <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
    ebea:	230f      	movs	r3, #15
    ebec:	18fb      	adds	r3, r7, r3
    ebee:	2204      	movs	r2, #4
    ebf0:	701a      	strb	r2, [r3, #0]
	}

	return res;
    ebf2:	230f      	movs	r3, #15
    ebf4:	18fb      	adds	r3, r7, r3
    ebf6:	781b      	ldrb	r3, [r3, #0]
}
    ebf8:	0018      	movs	r0, r3
    ebfa:	46bd      	mov	sp, r7
    ebfc:	b005      	add	sp, #20
    ebfe:	bd90      	pop	{r4, r7, pc}
    ec00:	00004933 	.word	0x00004933
    ec04:	00004957 	.word	0x00004957
    ec08:	00004911 	.word	0x00004911

0000ec0c <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
    ec0c:	b590      	push	{r4, r7, lr}
    ec0e:	b083      	sub	sp, #12
    ec10:	af00      	add	r7, sp, #0

	//  Get current time from external RTC	
	//get_time(); //commented out; always performed to get posix time stamp and should match
	
	// Format into FAT time stamp format
	ul_time = ((bcd2dec(current_time.year) +20 ) << 25)
    ec12:	4b1b      	ldr	r3, [pc, #108]	; (ec80 <get_fattime+0x74>)
    ec14:	799b      	ldrb	r3, [r3, #6]
    ec16:	0018      	movs	r0, r3
    ec18:	4b1a      	ldr	r3, [pc, #104]	; (ec84 <get_fattime+0x78>)
    ec1a:	4798      	blx	r3
    ec1c:	0003      	movs	r3, r0
    ec1e:	3314      	adds	r3, #20
    ec20:	065c      	lsls	r4, r3, #25
			| (bcd2dec(current_time.month) << 21)
    ec22:	4b17      	ldr	r3, [pc, #92]	; (ec80 <get_fattime+0x74>)
    ec24:	795b      	ldrb	r3, [r3, #5]
    ec26:	0018      	movs	r0, r3
    ec28:	4b16      	ldr	r3, [pc, #88]	; (ec84 <get_fattime+0x78>)
    ec2a:	4798      	blx	r3
    ec2c:	0003      	movs	r3, r0
    ec2e:	055b      	lsls	r3, r3, #21
    ec30:	431c      	orrs	r4, r3
			| (bcd2dec(current_time.date) << 16)
    ec32:	4b13      	ldr	r3, [pc, #76]	; (ec80 <get_fattime+0x74>)
    ec34:	791b      	ldrb	r3, [r3, #4]
    ec36:	0018      	movs	r0, r3
    ec38:	4b12      	ldr	r3, [pc, #72]	; (ec84 <get_fattime+0x78>)
    ec3a:	4798      	blx	r3
    ec3c:	0003      	movs	r3, r0
    ec3e:	041b      	lsls	r3, r3, #16
    ec40:	431c      	orrs	r4, r3
			| (bcd2dec(current_time.hours) << 11)
    ec42:	4b0f      	ldr	r3, [pc, #60]	; (ec80 <get_fattime+0x74>)
    ec44:	789b      	ldrb	r3, [r3, #2]
    ec46:	0018      	movs	r0, r3
    ec48:	4b0e      	ldr	r3, [pc, #56]	; (ec84 <get_fattime+0x78>)
    ec4a:	4798      	blx	r3
    ec4c:	0003      	movs	r3, r0
    ec4e:	02db      	lsls	r3, r3, #11
    ec50:	431c      	orrs	r4, r3
			| (bcd2dec(current_time.minutes) << 5)
    ec52:	4b0b      	ldr	r3, [pc, #44]	; (ec80 <get_fattime+0x74>)
    ec54:	785b      	ldrb	r3, [r3, #1]
    ec56:	0018      	movs	r0, r3
    ec58:	4b0a      	ldr	r3, [pc, #40]	; (ec84 <get_fattime+0x78>)
    ec5a:	4798      	blx	r3
    ec5c:	0003      	movs	r3, r0
    ec5e:	015b      	lsls	r3, r3, #5
    ec60:	431c      	orrs	r4, r3
			| ((bcd2dec(current_time.seconds) >> 1) << 0);
    ec62:	4b07      	ldr	r3, [pc, #28]	; (ec80 <get_fattime+0x74>)
    ec64:	781b      	ldrb	r3, [r3, #0]
    ec66:	0018      	movs	r0, r3
    ec68:	4b06      	ldr	r3, [pc, #24]	; (ec84 <get_fattime+0x78>)
    ec6a:	4798      	blx	r3
    ec6c:	0003      	movs	r3, r0
    ec6e:	085b      	lsrs	r3, r3, #1
	ul_time = ((bcd2dec(current_time.year) +20 ) << 25)
    ec70:	4323      	orrs	r3, r4
    ec72:	607b      	str	r3, [r7, #4]

	return ul_time;
    ec74:	687b      	ldr	r3, [r7, #4]
}
    ec76:	0018      	movs	r0, r3
    ec78:	46bd      	mov	sp, r7
    ec7a:	b003      	add	sp, #12
    ec7c:	bd90      	pop	{r4, r7, pc}
    ec7e:	46c0      	nop			; (mov r8, r8)
    ec80:	2000103c 	.word	0x2000103c
    ec84:	0000e9b1 	.word	0x0000e9b1

0000ec88 <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
    ec88:	b580      	push	{r7, lr}
    ec8a:	b084      	sub	sp, #16
    ec8c:	af00      	add	r7, sp, #0
    ec8e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
    ec90:	687b      	ldr	r3, [r7, #4]
    ec92:	3301      	adds	r3, #1
    ec94:	781a      	ldrb	r2, [r3, #0]
    ec96:	230e      	movs	r3, #14
    ec98:	18fb      	adds	r3, r7, r3
    ec9a:	801a      	strh	r2, [r3, #0]
	rv = rv << 8 | ptr[0];
    ec9c:	230e      	movs	r3, #14
    ec9e:	18fb      	adds	r3, r7, r3
    eca0:	881b      	ldrh	r3, [r3, #0]
    eca2:	021b      	lsls	r3, r3, #8
    eca4:	b21a      	sxth	r2, r3
    eca6:	687b      	ldr	r3, [r7, #4]
    eca8:	781b      	ldrb	r3, [r3, #0]
    ecaa:	b21b      	sxth	r3, r3
    ecac:	4313      	orrs	r3, r2
    ecae:	b21a      	sxth	r2, r3
    ecb0:	230e      	movs	r3, #14
    ecb2:	18fb      	adds	r3, r7, r3
    ecb4:	801a      	strh	r2, [r3, #0]
	return rv;
    ecb6:	230e      	movs	r3, #14
    ecb8:	18fb      	adds	r3, r7, r3
    ecba:	881b      	ldrh	r3, [r3, #0]
}
    ecbc:	0018      	movs	r0, r3
    ecbe:	46bd      	mov	sp, r7
    ecc0:	b004      	add	sp, #16
    ecc2:	bd80      	pop	{r7, pc}

0000ecc4 <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
    ecc4:	b580      	push	{r7, lr}
    ecc6:	b084      	sub	sp, #16
    ecc8:	af00      	add	r7, sp, #0
    ecca:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
    eccc:	687b      	ldr	r3, [r7, #4]
    ecce:	3303      	adds	r3, #3
    ecd0:	781b      	ldrb	r3, [r3, #0]
    ecd2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
    ecd4:	68fb      	ldr	r3, [r7, #12]
    ecd6:	021b      	lsls	r3, r3, #8
    ecd8:	687a      	ldr	r2, [r7, #4]
    ecda:	3202      	adds	r2, #2
    ecdc:	7812      	ldrb	r2, [r2, #0]
    ecde:	4313      	orrs	r3, r2
    ece0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
    ece2:	68fb      	ldr	r3, [r7, #12]
    ece4:	021b      	lsls	r3, r3, #8
    ece6:	687a      	ldr	r2, [r7, #4]
    ece8:	3201      	adds	r2, #1
    ecea:	7812      	ldrb	r2, [r2, #0]
    ecec:	4313      	orrs	r3, r2
    ecee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
    ecf0:	68fb      	ldr	r3, [r7, #12]
    ecf2:	021b      	lsls	r3, r3, #8
    ecf4:	687a      	ldr	r2, [r7, #4]
    ecf6:	7812      	ldrb	r2, [r2, #0]
    ecf8:	4313      	orrs	r3, r2
    ecfa:	60fb      	str	r3, [r7, #12]
	return rv;
    ecfc:	68fb      	ldr	r3, [r7, #12]
}
    ecfe:	0018      	movs	r0, r3
    ed00:	46bd      	mov	sp, r7
    ed02:	b004      	add	sp, #16
    ed04:	bd80      	pop	{r7, pc}

0000ed06 <st_word>:
}
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
    ed06:	b580      	push	{r7, lr}
    ed08:	b082      	sub	sp, #8
    ed0a:	af00      	add	r7, sp, #0
    ed0c:	6078      	str	r0, [r7, #4]
    ed0e:	000a      	movs	r2, r1
    ed10:	1cbb      	adds	r3, r7, #2
    ed12:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val; val >>= 8;
    ed14:	687b      	ldr	r3, [r7, #4]
    ed16:	1c5a      	adds	r2, r3, #1
    ed18:	607a      	str	r2, [r7, #4]
    ed1a:	1cba      	adds	r2, r7, #2
    ed1c:	8812      	ldrh	r2, [r2, #0]
    ed1e:	b2d2      	uxtb	r2, r2
    ed20:	701a      	strb	r2, [r3, #0]
    ed22:	1cbb      	adds	r3, r7, #2
    ed24:	1cba      	adds	r2, r7, #2
    ed26:	8812      	ldrh	r2, [r2, #0]
    ed28:	0a12      	lsrs	r2, r2, #8
    ed2a:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val;
    ed2c:	687b      	ldr	r3, [r7, #4]
    ed2e:	1c5a      	adds	r2, r3, #1
    ed30:	607a      	str	r2, [r7, #4]
    ed32:	1cba      	adds	r2, r7, #2
    ed34:	8812      	ldrh	r2, [r2, #0]
    ed36:	b2d2      	uxtb	r2, r2
    ed38:	701a      	strb	r2, [r3, #0]
}
    ed3a:	46c0      	nop			; (mov r8, r8)
    ed3c:	46bd      	mov	sp, r7
    ed3e:	b002      	add	sp, #8
    ed40:	bd80      	pop	{r7, pc}

0000ed42 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
    ed42:	b580      	push	{r7, lr}
    ed44:	b082      	sub	sp, #8
    ed46:	af00      	add	r7, sp, #0
    ed48:	6078      	str	r0, [r7, #4]
    ed4a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
    ed4c:	687b      	ldr	r3, [r7, #4]
    ed4e:	1c5a      	adds	r2, r3, #1
    ed50:	607a      	str	r2, [r7, #4]
    ed52:	683a      	ldr	r2, [r7, #0]
    ed54:	b2d2      	uxtb	r2, r2
    ed56:	701a      	strb	r2, [r3, #0]
    ed58:	683b      	ldr	r3, [r7, #0]
    ed5a:	0a1b      	lsrs	r3, r3, #8
    ed5c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
    ed5e:	687b      	ldr	r3, [r7, #4]
    ed60:	1c5a      	adds	r2, r3, #1
    ed62:	607a      	str	r2, [r7, #4]
    ed64:	683a      	ldr	r2, [r7, #0]
    ed66:	b2d2      	uxtb	r2, r2
    ed68:	701a      	strb	r2, [r3, #0]
    ed6a:	683b      	ldr	r3, [r7, #0]
    ed6c:	0a1b      	lsrs	r3, r3, #8
    ed6e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
    ed70:	687b      	ldr	r3, [r7, #4]
    ed72:	1c5a      	adds	r2, r3, #1
    ed74:	607a      	str	r2, [r7, #4]
    ed76:	683a      	ldr	r2, [r7, #0]
    ed78:	b2d2      	uxtb	r2, r2
    ed7a:	701a      	strb	r2, [r3, #0]
    ed7c:	683b      	ldr	r3, [r7, #0]
    ed7e:	0a1b      	lsrs	r3, r3, #8
    ed80:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
    ed82:	687b      	ldr	r3, [r7, #4]
    ed84:	1c5a      	adds	r2, r3, #1
    ed86:	607a      	str	r2, [r7, #4]
    ed88:	683a      	ldr	r2, [r7, #0]
    ed8a:	b2d2      	uxtb	r2, r2
    ed8c:	701a      	strb	r2, [r3, #0]
}
    ed8e:	46c0      	nop			; (mov r8, r8)
    ed90:	46bd      	mov	sp, r7
    ed92:	b002      	add	sp, #8
    ed94:	bd80      	pop	{r7, pc}

0000ed96 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static void mem_cpy (void* dst, const void* src, UINT cnt)
{
    ed96:	b580      	push	{r7, lr}
    ed98:	b086      	sub	sp, #24
    ed9a:	af00      	add	r7, sp, #0
    ed9c:	60f8      	str	r0, [r7, #12]
    ed9e:	60b9      	str	r1, [r7, #8]
    eda0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
    eda2:	68fb      	ldr	r3, [r7, #12]
    eda4:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
    eda6:	68bb      	ldr	r3, [r7, #8]
    eda8:	613b      	str	r3, [r7, #16]

	if (cnt != 0) {
    edaa:	687b      	ldr	r3, [r7, #4]
    edac:	2b00      	cmp	r3, #0
    edae:	d00d      	beq.n	edcc <mem_cpy+0x36>
		do {
			*d++ = *s++;
    edb0:	697b      	ldr	r3, [r7, #20]
    edb2:	1c5a      	adds	r2, r3, #1
    edb4:	617a      	str	r2, [r7, #20]
    edb6:	693a      	ldr	r2, [r7, #16]
    edb8:	1c51      	adds	r1, r2, #1
    edba:	6139      	str	r1, [r7, #16]
    edbc:	7812      	ldrb	r2, [r2, #0]
    edbe:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
    edc0:	687b      	ldr	r3, [r7, #4]
    edc2:	3b01      	subs	r3, #1
    edc4:	607b      	str	r3, [r7, #4]
    edc6:	687b      	ldr	r3, [r7, #4]
    edc8:	2b00      	cmp	r3, #0
    edca:	d1f1      	bne.n	edb0 <mem_cpy+0x1a>
	}
}
    edcc:	46c0      	nop			; (mov r8, r8)
    edce:	46bd      	mov	sp, r7
    edd0:	b006      	add	sp, #24
    edd2:	bd80      	pop	{r7, pc}

0000edd4 <mem_set>:


/* Fill memory block */
static void mem_set (void* dst, int val, UINT cnt)
{
    edd4:	b580      	push	{r7, lr}
    edd6:	b086      	sub	sp, #24
    edd8:	af00      	add	r7, sp, #0
    edda:	60f8      	str	r0, [r7, #12]
    eddc:	60b9      	str	r1, [r7, #8]
    edde:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
    ede0:	68fb      	ldr	r3, [r7, #12]
    ede2:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
    ede4:	697b      	ldr	r3, [r7, #20]
    ede6:	1c5a      	adds	r2, r3, #1
    ede8:	617a      	str	r2, [r7, #20]
    edea:	68ba      	ldr	r2, [r7, #8]
    edec:	b2d2      	uxtb	r2, r2
    edee:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
    edf0:	687b      	ldr	r3, [r7, #4]
    edf2:	3b01      	subs	r3, #1
    edf4:	607b      	str	r3, [r7, #4]
    edf6:	687b      	ldr	r3, [r7, #4]
    edf8:	2b00      	cmp	r3, #0
    edfa:	d1f3      	bne.n	ede4 <mem_set+0x10>
}
    edfc:	46c0      	nop			; (mov r8, r8)
    edfe:	46bd      	mov	sp, r7
    ee00:	b006      	add	sp, #24
    ee02:	bd80      	pop	{r7, pc}

0000ee04 <mem_cmp>:


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
    ee04:	b580      	push	{r7, lr}
    ee06:	b088      	sub	sp, #32
    ee08:	af00      	add	r7, sp, #0
    ee0a:	60f8      	str	r0, [r7, #12]
    ee0c:	60b9      	str	r1, [r7, #8]
    ee0e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
    ee10:	68fb      	ldr	r3, [r7, #12]
    ee12:	61fb      	str	r3, [r7, #28]
    ee14:	68bb      	ldr	r3, [r7, #8]
    ee16:	61bb      	str	r3, [r7, #24]
	int r = 0;
    ee18:	2300      	movs	r3, #0
    ee1a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
    ee1c:	69fb      	ldr	r3, [r7, #28]
    ee1e:	1c5a      	adds	r2, r3, #1
    ee20:	61fa      	str	r2, [r7, #28]
    ee22:	781b      	ldrb	r3, [r3, #0]
    ee24:	0019      	movs	r1, r3
    ee26:	69bb      	ldr	r3, [r7, #24]
    ee28:	1c5a      	adds	r2, r3, #1
    ee2a:	61ba      	str	r2, [r7, #24]
    ee2c:	781b      	ldrb	r3, [r3, #0]
    ee2e:	1acb      	subs	r3, r1, r3
    ee30:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
    ee32:	687b      	ldr	r3, [r7, #4]
    ee34:	3b01      	subs	r3, #1
    ee36:	607b      	str	r3, [r7, #4]
    ee38:	687b      	ldr	r3, [r7, #4]
    ee3a:	2b00      	cmp	r3, #0
    ee3c:	d002      	beq.n	ee44 <mem_cmp+0x40>
    ee3e:	697b      	ldr	r3, [r7, #20]
    ee40:	2b00      	cmp	r3, #0
    ee42:	d0eb      	beq.n	ee1c <mem_cmp+0x18>

	return r;
    ee44:	697b      	ldr	r3, [r7, #20]
}
    ee46:	0018      	movs	r0, r3
    ee48:	46bd      	mov	sp, r7
    ee4a:	b008      	add	sp, #32
    ee4c:	bd80      	pop	{r7, pc}

0000ee4e <chk_chr>:


/* Check if chr is contained in the string */
static int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
{
    ee4e:	b580      	push	{r7, lr}
    ee50:	b082      	sub	sp, #8
    ee52:	af00      	add	r7, sp, #0
    ee54:	6078      	str	r0, [r7, #4]
    ee56:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
    ee58:	e002      	b.n	ee60 <chk_chr+0x12>
    ee5a:	687b      	ldr	r3, [r7, #4]
    ee5c:	3301      	adds	r3, #1
    ee5e:	607b      	str	r3, [r7, #4]
    ee60:	687b      	ldr	r3, [r7, #4]
    ee62:	781b      	ldrb	r3, [r3, #0]
    ee64:	2b00      	cmp	r3, #0
    ee66:	d005      	beq.n	ee74 <chk_chr+0x26>
    ee68:	687b      	ldr	r3, [r7, #4]
    ee6a:	781b      	ldrb	r3, [r3, #0]
    ee6c:	001a      	movs	r2, r3
    ee6e:	683b      	ldr	r3, [r7, #0]
    ee70:	429a      	cmp	r2, r3
    ee72:	d1f2      	bne.n	ee5a <chk_chr+0xc>
	return *str;
    ee74:	687b      	ldr	r3, [r7, #4]
    ee76:	781b      	ldrb	r3, [r3, #0]
}
    ee78:	0018      	movs	r0, r3
    ee7a:	46bd      	mov	sp, r7
    ee7c:	b002      	add	sp, #8
    ee7e:	bd80      	pop	{r7, pc}

0000ee80 <dbc_1st>:


/* Test if the character is DBC 1st byte */
static int dbc_1st (BYTE c)
{
    ee80:	b580      	push	{r7, lr}
    ee82:	b082      	sub	sp, #8
    ee84:	af00      	add	r7, sp, #0
    ee86:	0002      	movs	r2, r0
    ee88:	1dfb      	adds	r3, r7, #7
    ee8a:	701a      	strb	r2, [r3, #0]
	if (c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
    ee8c:	1dfb      	adds	r3, r7, #7
    ee8e:	781b      	ldrb	r3, [r3, #0]
    ee90:	2b00      	cmp	r3, #0
    ee92:	d001      	beq.n	ee98 <dbc_1st+0x18>
    ee94:	2300      	movs	r3, #0
    ee96:	e000      	b.n	ee9a <dbc_1st+0x1a>
#endif
	return 0;
    ee98:	2300      	movs	r3, #0
}
    ee9a:	0018      	movs	r0, r3
    ee9c:	46bd      	mov	sp, r7
    ee9e:	b002      	add	sp, #8
    eea0:	bd80      	pop	{r7, pc}

0000eea2 <dbc_2nd>:


/* Test if the character is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
    eea2:	b580      	push	{r7, lr}
    eea4:	b082      	sub	sp, #8
    eea6:	af00      	add	r7, sp, #0
    eea8:	0002      	movs	r2, r0
    eeaa:	1dfb      	adds	r3, r7, #7
    eeac:	701a      	strb	r2, [r3, #0]
		if (c <= DbcTbl[5]) return 1;
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
    eeae:	1dfb      	adds	r3, r7, #7
    eeb0:	781b      	ldrb	r3, [r3, #0]
    eeb2:	2b00      	cmp	r3, #0
    eeb4:	d001      	beq.n	eeba <dbc_2nd+0x18>
    eeb6:	2300      	movs	r3, #0
    eeb8:	e000      	b.n	eebc <dbc_2nd+0x1a>
#endif
	return 0;
    eeba:	2300      	movs	r3, #0
}
    eebc:	0018      	movs	r0, r3
    eebe:	46bd      	mov	sp, r7
    eec0:	b002      	add	sp, #8
    eec2:	bd80      	pop	{r7, pc}

0000eec4 <tchar2uni>:

/* Get a character from TCHAR string in defined API encodeing */
static DWORD tchar2uni (	/* Returns character in UTF-16 encoding (>=0x10000 on double encoding unit, 0xFFFFFFFF on decode error) */
	const TCHAR** str		/* Pointer to pointer to TCHAR string in configured encoding */
)
{
    eec4:	b590      	push	{r4, r7, lr}
    eec6:	b087      	sub	sp, #28
    eec8:	af00      	add	r7, sp, #0
    eeca:	6078      	str	r0, [r7, #4]
	DWORD uc;
	const TCHAR *p = *str;
    eecc:	687b      	ldr	r3, [r7, #4]
    eece:	681b      	ldr	r3, [r3, #0]
    eed0:	617b      	str	r3, [r7, #20]

#else		/* ANSI/OEM input */
	BYTE b;
	WCHAR wc;

	wc = (BYTE)*p++;			/* Get a byte */
    eed2:	697b      	ldr	r3, [r7, #20]
    eed4:	1c5a      	adds	r2, r3, #1
    eed6:	617a      	str	r2, [r7, #20]
    eed8:	781a      	ldrb	r2, [r3, #0]
    eeda:	2312      	movs	r3, #18
    eedc:	18fb      	adds	r3, r7, r3
    eede:	801a      	strh	r2, [r3, #0]
	if (dbc_1st((BYTE)wc)) {	/* Is it a DBC 1st byte? */
    eee0:	2312      	movs	r3, #18
    eee2:	18fb      	adds	r3, r7, r3
    eee4:	881b      	ldrh	r3, [r3, #0]
    eee6:	b2db      	uxtb	r3, r3
    eee8:	0018      	movs	r0, r3
    eeea:	4b25      	ldr	r3, [pc, #148]	; (ef80 <tchar2uni+0xbc>)
    eeec:	4798      	blx	r3
    eeee:	1e03      	subs	r3, r0, #0
    eef0:	d01e      	beq.n	ef30 <tchar2uni+0x6c>
		b = (BYTE)*p++;			/* Get 2nd byte */
    eef2:	697b      	ldr	r3, [r7, #20]
    eef4:	1c5a      	adds	r2, r3, #1
    eef6:	617a      	str	r2, [r7, #20]
    eef8:	2211      	movs	r2, #17
    eefa:	18ba      	adds	r2, r7, r2
    eefc:	781b      	ldrb	r3, [r3, #0]
    eefe:	7013      	strb	r3, [r2, #0]
		if (!dbc_2nd(b)) return 0xFFFFFFFF;	/* Invalid code? */
    ef00:	2311      	movs	r3, #17
    ef02:	18fb      	adds	r3, r7, r3
    ef04:	781b      	ldrb	r3, [r3, #0]
    ef06:	0018      	movs	r0, r3
    ef08:	4b1e      	ldr	r3, [pc, #120]	; (ef84 <tchar2uni+0xc0>)
    ef0a:	4798      	blx	r3
    ef0c:	1e03      	subs	r3, r0, #0
    ef0e:	d102      	bne.n	ef16 <tchar2uni+0x52>
    ef10:	2301      	movs	r3, #1
    ef12:	425b      	negs	r3, r3
    ef14:	e02f      	b.n	ef76 <tchar2uni+0xb2>
		wc = (wc << 8) + b;		/* Make a DBC */
    ef16:	2312      	movs	r3, #18
    ef18:	18fb      	adds	r3, r7, r3
    ef1a:	881b      	ldrh	r3, [r3, #0]
    ef1c:	021b      	lsls	r3, r3, #8
    ef1e:	b299      	uxth	r1, r3
    ef20:	2311      	movs	r3, #17
    ef22:	18fb      	adds	r3, r7, r3
    ef24:	781b      	ldrb	r3, [r3, #0]
    ef26:	b29a      	uxth	r2, r3
    ef28:	2312      	movs	r3, #18
    ef2a:	18fb      	adds	r3, r7, r3
    ef2c:	188a      	adds	r2, r1, r2
    ef2e:	801a      	strh	r2, [r3, #0]
	}
	if (wc != 0) {
    ef30:	2312      	movs	r3, #18
    ef32:	18fb      	adds	r3, r7, r3
    ef34:	881b      	ldrh	r3, [r3, #0]
    ef36:	2b00      	cmp	r3, #0
    ef38:	d015      	beq.n	ef66 <tchar2uni+0xa2>
		wc = ff_oem2uni(wc, CODEPAGE);	/* ANSI/OEM ==> Unicode */
    ef3a:	2312      	movs	r3, #18
    ef3c:	18fc      	adds	r4, r7, r3
    ef3e:	23b6      	movs	r3, #182	; 0xb6
    ef40:	33ff      	adds	r3, #255	; 0xff
    ef42:	001a      	movs	r2, r3
    ef44:	2312      	movs	r3, #18
    ef46:	18fb      	adds	r3, r7, r3
    ef48:	881b      	ldrh	r3, [r3, #0]
    ef4a:	0011      	movs	r1, r2
    ef4c:	0018      	movs	r0, r3
    ef4e:	4b0e      	ldr	r3, [pc, #56]	; (ef88 <tchar2uni+0xc4>)
    ef50:	4798      	blx	r3
    ef52:	0003      	movs	r3, r0
    ef54:	8023      	strh	r3, [r4, #0]
		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
    ef56:	2312      	movs	r3, #18
    ef58:	18fb      	adds	r3, r7, r3
    ef5a:	881b      	ldrh	r3, [r3, #0]
    ef5c:	2b00      	cmp	r3, #0
    ef5e:	d102      	bne.n	ef66 <tchar2uni+0xa2>
    ef60:	2301      	movs	r3, #1
    ef62:	425b      	negs	r3, r3
    ef64:	e007      	b.n	ef76 <tchar2uni+0xb2>
	}
	uc = wc;
    ef66:	2312      	movs	r3, #18
    ef68:	18fb      	adds	r3, r7, r3
    ef6a:	881b      	ldrh	r3, [r3, #0]
    ef6c:	60fb      	str	r3, [r7, #12]

#endif
	*str = p;	/* Next read pointer */
    ef6e:	687b      	ldr	r3, [r7, #4]
    ef70:	697a      	ldr	r2, [r7, #20]
    ef72:	601a      	str	r2, [r3, #0]
	return uc;
    ef74:	68fb      	ldr	r3, [r7, #12]
}
    ef76:	0018      	movs	r0, r3
    ef78:	46bd      	mov	sp, r7
    ef7a:	b007      	add	sp, #28
    ef7c:	bd90      	pop	{r4, r7, pc}
    ef7e:	46c0      	nop			; (mov r8, r8)
    ef80:	0000ee81 	.word	0x0000ee81
    ef84:	0000eea3 	.word	0x0000eea3
    ef88:	00011f35 	.word	0x00011f35

0000ef8c <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
    ef8c:	b590      	push	{r4, r7, lr}
    ef8e:	b085      	sub	sp, #20
    ef90:	af00      	add	r7, sp, #0
    ef92:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
    ef94:	230f      	movs	r3, #15
    ef96:	18fb      	adds	r3, r7, r3
    ef98:	2200      	movs	r2, #0
    ef9a:	701a      	strb	r2, [r3, #0]


	if (fs->wflag) {	/* Is the disk access window dirty */
    ef9c:	687b      	ldr	r3, [r7, #4]
    ef9e:	78db      	ldrb	r3, [r3, #3]
    efa0:	2b00      	cmp	r3, #0
    efa2:	d02d      	beq.n	f000 <sync_window+0x74>
		if (disk_writep(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
    efa4:	687b      	ldr	r3, [r7, #4]
    efa6:	7858      	ldrb	r0, [r3, #1]
    efa8:	687b      	ldr	r3, [r7, #4]
    efaa:	3334      	adds	r3, #52	; 0x34
    efac:	0019      	movs	r1, r3
    efae:	687b      	ldr	r3, [r7, #4]
    efb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    efb2:	2301      	movs	r3, #1
    efb4:	4c16      	ldr	r4, [pc, #88]	; (f010 <sync_window+0x84>)
    efb6:	47a0      	blx	r4
    efb8:	1e03      	subs	r3, r0, #0
    efba:	d11d      	bne.n	eff8 <sync_window+0x6c>
			fs->wflag = 0;	/* Clear window dirty flag */
    efbc:	687b      	ldr	r3, [r7, #4]
    efbe:	2200      	movs	r2, #0
    efc0:	70da      	strb	r2, [r3, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    efc2:	687b      	ldr	r3, [r7, #4]
    efc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    efc6:	687b      	ldr	r3, [r7, #4]
    efc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    efca:	1ad2      	subs	r2, r2, r3
    efcc:	687b      	ldr	r3, [r7, #4]
    efce:	69db      	ldr	r3, [r3, #28]
    efd0:	429a      	cmp	r2, r3
    efd2:	d215      	bcs.n	f000 <sync_window+0x74>
				if (fs->n_fats == 2) disk_writep(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
    efd4:	687b      	ldr	r3, [r7, #4]
    efd6:	789b      	ldrb	r3, [r3, #2]
    efd8:	2b02      	cmp	r3, #2
    efda:	d111      	bne.n	f000 <sync_window+0x74>
    efdc:	687b      	ldr	r3, [r7, #4]
    efde:	7858      	ldrb	r0, [r3, #1]
    efe0:	687b      	ldr	r3, [r7, #4]
    efe2:	3334      	adds	r3, #52	; 0x34
    efe4:	0019      	movs	r1, r3
    efe6:	687b      	ldr	r3, [r7, #4]
    efe8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    efea:	687b      	ldr	r3, [r7, #4]
    efec:	69db      	ldr	r3, [r3, #28]
    efee:	18d2      	adds	r2, r2, r3
    eff0:	2301      	movs	r3, #1
    eff2:	4c07      	ldr	r4, [pc, #28]	; (f010 <sync_window+0x84>)
    eff4:	47a0      	blx	r4
    eff6:	e003      	b.n	f000 <sync_window+0x74>
			}
		} else {
			res = FR_DISK_ERR;
    eff8:	230f      	movs	r3, #15
    effa:	18fb      	adds	r3, r7, r3
    effc:	2201      	movs	r2, #1
    effe:	701a      	strb	r2, [r3, #0]
		}
	}
	return res;
    f000:	230f      	movs	r3, #15
    f002:	18fb      	adds	r3, r7, r3
    f004:	781b      	ldrb	r3, [r3, #0]
}
    f006:	0018      	movs	r0, r3
    f008:	46bd      	mov	sp, r7
    f00a:	b005      	add	sp, #20
    f00c:	bd90      	pop	{r4, r7, pc}
    f00e:	46c0      	nop			; (mov r8, r8)
    f010:	0000eaef 	.word	0x0000eaef

0000f014 <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,			/* Filesystem object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
    f014:	b590      	push	{r4, r7, lr}
    f016:	b085      	sub	sp, #20
    f018:	af00      	add	r7, sp, #0
    f01a:	6078      	str	r0, [r7, #4]
    f01c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
    f01e:	230f      	movs	r3, #15
    f020:	18fb      	adds	r3, r7, r3
    f022:	2200      	movs	r2, #0
    f024:	701a      	strb	r2, [r3, #0]


	if (sector != fs->winsect) {	/* Window offset changed? */
    f026:	687b      	ldr	r3, [r7, #4]
    f028:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    f02a:	683b      	ldr	r3, [r7, #0]
    f02c:	429a      	cmp	r2, r3
    f02e:	d021      	beq.n	f074 <move_window+0x60>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
    f030:	230f      	movs	r3, #15
    f032:	18fc      	adds	r4, r7, r3
    f034:	687b      	ldr	r3, [r7, #4]
    f036:	0018      	movs	r0, r3
    f038:	4b12      	ldr	r3, [pc, #72]	; (f084 <move_window+0x70>)
    f03a:	4798      	blx	r3
    f03c:	0003      	movs	r3, r0
    f03e:	7023      	strb	r3, [r4, #0]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
    f040:	230f      	movs	r3, #15
    f042:	18fb      	adds	r3, r7, r3
    f044:	781b      	ldrb	r3, [r3, #0]
    f046:	2b00      	cmp	r3, #0
    f048:	d114      	bne.n	f074 <move_window+0x60>
			if (disk_readp(fs->pdrv, fs->win, sector, 1) != RES_OK) {//Added "p" Kfausnight 11/24/2018
    f04a:	687b      	ldr	r3, [r7, #4]
    f04c:	7858      	ldrb	r0, [r3, #1]
    f04e:	687b      	ldr	r3, [r7, #4]
    f050:	3334      	adds	r3, #52	; 0x34
    f052:	0019      	movs	r1, r3
    f054:	683a      	ldr	r2, [r7, #0]
    f056:	2301      	movs	r3, #1
    f058:	4c0b      	ldr	r4, [pc, #44]	; (f088 <move_window+0x74>)
    f05a:	47a0      	blx	r4
    f05c:	1e03      	subs	r3, r0, #0
    f05e:	d006      	beq.n	f06e <move_window+0x5a>
				sector = 0xFFFFFFFF;	/* Invalidate window if read data is not valid */
    f060:	2301      	movs	r3, #1
    f062:	425b      	negs	r3, r3
    f064:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
    f066:	230f      	movs	r3, #15
    f068:	18fb      	adds	r3, r7, r3
    f06a:	2201      	movs	r2, #1
    f06c:	701a      	strb	r2, [r3, #0]
			}
			fs->winsect = sector;
    f06e:	687b      	ldr	r3, [r7, #4]
    f070:	683a      	ldr	r2, [r7, #0]
    f072:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
    f074:	230f      	movs	r3, #15
    f076:	18fb      	adds	r3, r7, r3
    f078:	781b      	ldrb	r3, [r3, #0]
}
    f07a:	0018      	movs	r0, r3
    f07c:	46bd      	mov	sp, r7
    f07e:	b005      	add	sp, #20
    f080:	bd90      	pop	{r4, r7, pc}
    f082:	46c0      	nop			; (mov r8, r8)
    f084:	0000ef8d 	.word	0x0000ef8d
    f088:	0000eac9 	.word	0x0000eac9

0000f08c <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
    f08c:	b590      	push	{r4, r7, lr}
    f08e:	b085      	sub	sp, #20
    f090:	af00      	add	r7, sp, #0
    f092:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
    f094:	230f      	movs	r3, #15
    f096:	18fc      	adds	r4, r7, r3
    f098:	687b      	ldr	r3, [r7, #4]
    f09a:	0018      	movs	r0, r3
    f09c:	4b37      	ldr	r3, [pc, #220]	; (f17c <sync_fs+0xf0>)
    f09e:	4798      	blx	r3
    f0a0:	0003      	movs	r3, r0
    f0a2:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    f0a4:	230f      	movs	r3, #15
    f0a6:	18fb      	adds	r3, r7, r3
    f0a8:	781b      	ldrb	r3, [r3, #0]
    f0aa:	2b00      	cmp	r3, #0
    f0ac:	d15e      	bne.n	f16c <sync_fs+0xe0>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
    f0ae:	687b      	ldr	r3, [r7, #4]
    f0b0:	781b      	ldrb	r3, [r3, #0]
    f0b2:	2b03      	cmp	r3, #3
    f0b4:	d14d      	bne.n	f152 <sync_fs+0xc6>
    f0b6:	687b      	ldr	r3, [r7, #4]
    f0b8:	791b      	ldrb	r3, [r3, #4]
    f0ba:	2b01      	cmp	r3, #1
    f0bc:	d149      	bne.n	f152 <sync_fs+0xc6>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, sizeof fs->win);
    f0be:	687b      	ldr	r3, [r7, #4]
    f0c0:	3334      	adds	r3, #52	; 0x34
    f0c2:	0018      	movs	r0, r3
    f0c4:	2380      	movs	r3, #128	; 0x80
    f0c6:	009b      	lsls	r3, r3, #2
    f0c8:	001a      	movs	r2, r3
    f0ca:	2100      	movs	r1, #0
    f0cc:	4b2c      	ldr	r3, [pc, #176]	; (f180 <sync_fs+0xf4>)
    f0ce:	4798      	blx	r3
			st_word(fs->win + BS_55AA, 0xAA55);
    f0d0:	687b      	ldr	r3, [r7, #4]
    f0d2:	3334      	adds	r3, #52	; 0x34
    f0d4:	33ff      	adds	r3, #255	; 0xff
    f0d6:	33ff      	adds	r3, #255	; 0xff
    f0d8:	4a2a      	ldr	r2, [pc, #168]	; (f184 <sync_fs+0xf8>)
    f0da:	0011      	movs	r1, r2
    f0dc:	0018      	movs	r0, r3
    f0de:	4b2a      	ldr	r3, [pc, #168]	; (f188 <sync_fs+0xfc>)
    f0e0:	4798      	blx	r3
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
    f0e2:	687b      	ldr	r3, [r7, #4]
    f0e4:	3334      	adds	r3, #52	; 0x34
    f0e6:	4a29      	ldr	r2, [pc, #164]	; (f18c <sync_fs+0x100>)
    f0e8:	0011      	movs	r1, r2
    f0ea:	0018      	movs	r0, r3
    f0ec:	4b28      	ldr	r3, [pc, #160]	; (f190 <sync_fs+0x104>)
    f0ee:	4798      	blx	r3
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
    f0f0:	687b      	ldr	r3, [r7, #4]
    f0f2:	3334      	adds	r3, #52	; 0x34
    f0f4:	33e5      	adds	r3, #229	; 0xe5
    f0f6:	33ff      	adds	r3, #255	; 0xff
    f0f8:	4a26      	ldr	r2, [pc, #152]	; (f194 <sync_fs+0x108>)
    f0fa:	0011      	movs	r1, r2
    f0fc:	0018      	movs	r0, r3
    f0fe:	4b24      	ldr	r3, [pc, #144]	; (f190 <sync_fs+0x104>)
    f100:	4798      	blx	r3
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
    f102:	687b      	ldr	r3, [r7, #4]
    f104:	3334      	adds	r3, #52	; 0x34
    f106:	33e9      	adds	r3, #233	; 0xe9
    f108:	33ff      	adds	r3, #255	; 0xff
    f10a:	001a      	movs	r2, r3
    f10c:	687b      	ldr	r3, [r7, #4]
    f10e:	695b      	ldr	r3, [r3, #20]
    f110:	0019      	movs	r1, r3
    f112:	0010      	movs	r0, r2
    f114:	4b1e      	ldr	r3, [pc, #120]	; (f190 <sync_fs+0x104>)
    f116:	4798      	blx	r3
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
    f118:	687b      	ldr	r3, [r7, #4]
    f11a:	3334      	adds	r3, #52	; 0x34
    f11c:	33ed      	adds	r3, #237	; 0xed
    f11e:	33ff      	adds	r3, #255	; 0xff
    f120:	001a      	movs	r2, r3
    f122:	687b      	ldr	r3, [r7, #4]
    f124:	691b      	ldr	r3, [r3, #16]
    f126:	0019      	movs	r1, r3
    f128:	0010      	movs	r0, r2
    f12a:	4b19      	ldr	r3, [pc, #100]	; (f190 <sync_fs+0x104>)
    f12c:	4798      	blx	r3
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
    f12e:	687b      	ldr	r3, [r7, #4]
    f130:	6a1b      	ldr	r3, [r3, #32]
    f132:	1c5a      	adds	r2, r3, #1
    f134:	687b      	ldr	r3, [r7, #4]
    f136:	631a      	str	r2, [r3, #48]	; 0x30
			disk_writep(fs->pdrv, fs->win, fs->winsect, 1);
    f138:	687b      	ldr	r3, [r7, #4]
    f13a:	7858      	ldrb	r0, [r3, #1]
    f13c:	687b      	ldr	r3, [r7, #4]
    f13e:	3334      	adds	r3, #52	; 0x34
    f140:	0019      	movs	r1, r3
    f142:	687b      	ldr	r3, [r7, #4]
    f144:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    f146:	2301      	movs	r3, #1
    f148:	4c13      	ldr	r4, [pc, #76]	; (f198 <sync_fs+0x10c>)
    f14a:	47a0      	blx	r4
			fs->fsi_flag = 0;
    f14c:	687b      	ldr	r3, [r7, #4]
    f14e:	2200      	movs	r2, #0
    f150:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
    f152:	687b      	ldr	r3, [r7, #4]
    f154:	785b      	ldrb	r3, [r3, #1]
    f156:	2200      	movs	r2, #0
    f158:	2100      	movs	r1, #0
    f15a:	0018      	movs	r0, r3
    f15c:	4b0f      	ldr	r3, [pc, #60]	; (f19c <sync_fs+0x110>)
    f15e:	4798      	blx	r3
    f160:	1e03      	subs	r3, r0, #0
    f162:	d003      	beq.n	f16c <sync_fs+0xe0>
    f164:	230f      	movs	r3, #15
    f166:	18fb      	adds	r3, r7, r3
    f168:	2201      	movs	r2, #1
    f16a:	701a      	strb	r2, [r3, #0]
	}

	return res;
    f16c:	230f      	movs	r3, #15
    f16e:	18fb      	adds	r3, r7, r3
    f170:	781b      	ldrb	r3, [r3, #0]
}
    f172:	0018      	movs	r0, r3
    f174:	46bd      	mov	sp, r7
    f176:	b005      	add	sp, #20
    f178:	bd90      	pop	{r4, r7, pc}
    f17a:	46c0      	nop			; (mov r8, r8)
    f17c:	0000ef8d 	.word	0x0000ef8d
    f180:	0000edd5 	.word	0x0000edd5
    f184:	0000aa55 	.word	0x0000aa55
    f188:	0000ed07 	.word	0x0000ed07
    f18c:	41615252 	.word	0x41615252
    f190:	0000ed43 	.word	0x0000ed43
    f194:	61417272 	.word	0x61417272
    f198:	0000eaef 	.word	0x0000eaef
    f19c:	0000eb15 	.word	0x0000eb15

0000f1a0 <clst2sect>:

static DWORD clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
    f1a0:	b580      	push	{r7, lr}
    f1a2:	b082      	sub	sp, #8
    f1a4:	af00      	add	r7, sp, #0
    f1a6:	6078      	str	r0, [r7, #4]
    f1a8:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
    f1aa:	683b      	ldr	r3, [r7, #0]
    f1ac:	3b02      	subs	r3, #2
    f1ae:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
    f1b0:	687b      	ldr	r3, [r7, #4]
    f1b2:	699b      	ldr	r3, [r3, #24]
    f1b4:	1e9a      	subs	r2, r3, #2
    f1b6:	683b      	ldr	r3, [r7, #0]
    f1b8:	429a      	cmp	r2, r3
    f1ba:	d801      	bhi.n	f1c0 <clst2sect+0x20>
    f1bc:	2300      	movs	r3, #0
    f1be:	e007      	b.n	f1d0 <clst2sect+0x30>
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
    f1c0:	687b      	ldr	r3, [r7, #4]
    f1c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f1c4:	687b      	ldr	r3, [r7, #4]
    f1c6:	895b      	ldrh	r3, [r3, #10]
    f1c8:	0019      	movs	r1, r3
    f1ca:	683b      	ldr	r3, [r7, #0]
    f1cc:	434b      	muls	r3, r1
    f1ce:	18d3      	adds	r3, r2, r3
}
    f1d0:	0018      	movs	r0, r3
    f1d2:	46bd      	mov	sp, r7
    f1d4:	b002      	add	sp, #8
    f1d6:	bd80      	pop	{r7, pc}

0000f1d8 <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
    f1d8:	b580      	push	{r7, lr}
    f1da:	b086      	sub	sp, #24
    f1dc:	af00      	add	r7, sp, #0
    f1de:	6078      	str	r0, [r7, #4]
    f1e0:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
    f1e2:	687b      	ldr	r3, [r7, #4]
    f1e4:	681b      	ldr	r3, [r3, #0]
    f1e6:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
    f1e8:	683b      	ldr	r3, [r7, #0]
    f1ea:	2b01      	cmp	r3, #1
    f1ec:	d904      	bls.n	f1f8 <get_fat+0x20>
    f1ee:	693b      	ldr	r3, [r7, #16]
    f1f0:	699a      	ldr	r2, [r3, #24]
    f1f2:	683b      	ldr	r3, [r7, #0]
    f1f4:	429a      	cmp	r2, r3
    f1f6:	d802      	bhi.n	f1fe <get_fat+0x26>
		val = 1;	/* Internal error */
    f1f8:	2301      	movs	r3, #1
    f1fa:	617b      	str	r3, [r7, #20]
    f1fc:	e090      	b.n	f320 <get_fat+0x148>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
    f1fe:	2301      	movs	r3, #1
    f200:	425b      	negs	r3, r3
    f202:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
    f204:	693b      	ldr	r3, [r7, #16]
    f206:	781b      	ldrb	r3, [r3, #0]
    f208:	2b02      	cmp	r3, #2
    f20a:	d047      	beq.n	f29c <get_fat+0xc4>
    f20c:	2b03      	cmp	r3, #3
    f20e:	d060      	beq.n	f2d2 <get_fat+0xfa>
    f210:	2b01      	cmp	r3, #1
    f212:	d000      	beq.n	f216 <get_fat+0x3e>
    f214:	e07a      	b.n	f30c <get_fat+0x134>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
    f216:	683b      	ldr	r3, [r7, #0]
    f218:	60fb      	str	r3, [r7, #12]
    f21a:	68fb      	ldr	r3, [r7, #12]
    f21c:	085b      	lsrs	r3, r3, #1
    f21e:	68fa      	ldr	r2, [r7, #12]
    f220:	18d3      	adds	r3, r2, r3
    f222:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
    f224:	693b      	ldr	r3, [r7, #16]
    f226:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    f228:	68fb      	ldr	r3, [r7, #12]
    f22a:	0a5b      	lsrs	r3, r3, #9
    f22c:	18d2      	adds	r2, r2, r3
    f22e:	693b      	ldr	r3, [r7, #16]
    f230:	0011      	movs	r1, r2
    f232:	0018      	movs	r0, r3
    f234:	4b3d      	ldr	r3, [pc, #244]	; (f32c <get_fat+0x154>)
    f236:	4798      	blx	r3
    f238:	1e03      	subs	r3, r0, #0
    f23a:	d16a      	bne.n	f312 <get_fat+0x13a>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
    f23c:	68fb      	ldr	r3, [r7, #12]
    f23e:	1c5a      	adds	r2, r3, #1
    f240:	60fa      	str	r2, [r7, #12]
    f242:	05db      	lsls	r3, r3, #23
    f244:	0ddb      	lsrs	r3, r3, #23
    f246:	693a      	ldr	r2, [r7, #16]
    f248:	2134      	movs	r1, #52	; 0x34
    f24a:	18d3      	adds	r3, r2, r3
    f24c:	185b      	adds	r3, r3, r1
    f24e:	781b      	ldrb	r3, [r3, #0]
    f250:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
    f252:	693b      	ldr	r3, [r7, #16]
    f254:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    f256:	68fb      	ldr	r3, [r7, #12]
    f258:	0a5b      	lsrs	r3, r3, #9
    f25a:	18d2      	adds	r2, r2, r3
    f25c:	693b      	ldr	r3, [r7, #16]
    f25e:	0011      	movs	r1, r2
    f260:	0018      	movs	r0, r3
    f262:	4b32      	ldr	r3, [pc, #200]	; (f32c <get_fat+0x154>)
    f264:	4798      	blx	r3
    f266:	1e03      	subs	r3, r0, #0
    f268:	d155      	bne.n	f316 <get_fat+0x13e>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
    f26a:	68fb      	ldr	r3, [r7, #12]
    f26c:	05db      	lsls	r3, r3, #23
    f26e:	0ddb      	lsrs	r3, r3, #23
    f270:	693a      	ldr	r2, [r7, #16]
    f272:	2134      	movs	r1, #52	; 0x34
    f274:	18d3      	adds	r3, r2, r3
    f276:	185b      	adds	r3, r3, r1
    f278:	781b      	ldrb	r3, [r3, #0]
    f27a:	021b      	lsls	r3, r3, #8
    f27c:	001a      	movs	r2, r3
    f27e:	68bb      	ldr	r3, [r7, #8]
    f280:	4313      	orrs	r3, r2
    f282:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
    f284:	683b      	ldr	r3, [r7, #0]
    f286:	2201      	movs	r2, #1
    f288:	4013      	ands	r3, r2
    f28a:	d002      	beq.n	f292 <get_fat+0xba>
    f28c:	68bb      	ldr	r3, [r7, #8]
    f28e:	091b      	lsrs	r3, r3, #4
    f290:	e002      	b.n	f298 <get_fat+0xc0>
    f292:	68bb      	ldr	r3, [r7, #8]
    f294:	051b      	lsls	r3, r3, #20
    f296:	0d1b      	lsrs	r3, r3, #20
    f298:	617b      	str	r3, [r7, #20]
			break;
    f29a:	e041      	b.n	f320 <get_fat+0x148>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
    f29c:	693b      	ldr	r3, [r7, #16]
    f29e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    f2a0:	683b      	ldr	r3, [r7, #0]
    f2a2:	0a1b      	lsrs	r3, r3, #8
    f2a4:	18d2      	adds	r2, r2, r3
    f2a6:	693b      	ldr	r3, [r7, #16]
    f2a8:	0011      	movs	r1, r2
    f2aa:	0018      	movs	r0, r3
    f2ac:	4b1f      	ldr	r3, [pc, #124]	; (f32c <get_fat+0x154>)
    f2ae:	4798      	blx	r3
    f2b0:	1e03      	subs	r3, r0, #0
    f2b2:	d132      	bne.n	f31a <get_fat+0x142>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
    f2b4:	693b      	ldr	r3, [r7, #16]
    f2b6:	3334      	adds	r3, #52	; 0x34
    f2b8:	001a      	movs	r2, r3
    f2ba:	683b      	ldr	r3, [r7, #0]
    f2bc:	0059      	lsls	r1, r3, #1
    f2be:	23ff      	movs	r3, #255	; 0xff
    f2c0:	005b      	lsls	r3, r3, #1
    f2c2:	400b      	ands	r3, r1
    f2c4:	18d3      	adds	r3, r2, r3
    f2c6:	0018      	movs	r0, r3
    f2c8:	4b19      	ldr	r3, [pc, #100]	; (f330 <get_fat+0x158>)
    f2ca:	4798      	blx	r3
    f2cc:	0003      	movs	r3, r0
    f2ce:	617b      	str	r3, [r7, #20]
			break;
    f2d0:	e026      	b.n	f320 <get_fat+0x148>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
    f2d2:	693b      	ldr	r3, [r7, #16]
    f2d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    f2d6:	683b      	ldr	r3, [r7, #0]
    f2d8:	09db      	lsrs	r3, r3, #7
    f2da:	18d2      	adds	r2, r2, r3
    f2dc:	693b      	ldr	r3, [r7, #16]
    f2de:	0011      	movs	r1, r2
    f2e0:	0018      	movs	r0, r3
    f2e2:	4b12      	ldr	r3, [pc, #72]	; (f32c <get_fat+0x154>)
    f2e4:	4798      	blx	r3
    f2e6:	1e03      	subs	r3, r0, #0
    f2e8:	d119      	bne.n	f31e <get_fat+0x146>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
    f2ea:	693b      	ldr	r3, [r7, #16]
    f2ec:	3334      	adds	r3, #52	; 0x34
    f2ee:	001a      	movs	r2, r3
    f2f0:	683b      	ldr	r3, [r7, #0]
    f2f2:	0099      	lsls	r1, r3, #2
    f2f4:	23fe      	movs	r3, #254	; 0xfe
    f2f6:	005b      	lsls	r3, r3, #1
    f2f8:	400b      	ands	r3, r1
    f2fa:	18d3      	adds	r3, r2, r3
    f2fc:	0018      	movs	r0, r3
    f2fe:	4b0d      	ldr	r3, [pc, #52]	; (f334 <get_fat+0x15c>)
    f300:	4798      	blx	r3
    f302:	0003      	movs	r3, r0
    f304:	011b      	lsls	r3, r3, #4
    f306:	091b      	lsrs	r3, r3, #4
    f308:	617b      	str	r3, [r7, #20]
			break;
    f30a:	e009      	b.n	f320 <get_fat+0x148>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
    f30c:	2301      	movs	r3, #1
    f30e:	617b      	str	r3, [r7, #20]
    f310:	e006      	b.n	f320 <get_fat+0x148>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
    f312:	46c0      	nop			; (mov r8, r8)
    f314:	e004      	b.n	f320 <get_fat+0x148>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
    f316:	46c0      	nop			; (mov r8, r8)
    f318:	e002      	b.n	f320 <get_fat+0x148>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
    f31a:	46c0      	nop			; (mov r8, r8)
    f31c:	e000      	b.n	f320 <get_fat+0x148>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
    f31e:	46c0      	nop			; (mov r8, r8)
		}
	}

	return val;
    f320:	697b      	ldr	r3, [r7, #20]
}
    f322:	0018      	movs	r0, r3
    f324:	46bd      	mov	sp, r7
    f326:	b006      	add	sp, #24
    f328:	bd80      	pop	{r7, pc}
    f32a:	46c0      	nop			; (mov r8, r8)
    f32c:	0000f015 	.word	0x0000f015
    f330:	0000ec89 	.word	0x0000ec89
    f334:	0000ecc5 	.word	0x0000ecc5

0000f338 <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
    f338:	b590      	push	{r4, r7, lr}
    f33a:	b089      	sub	sp, #36	; 0x24
    f33c:	af00      	add	r7, sp, #0
    f33e:	60f8      	str	r0, [r7, #12]
    f340:	60b9      	str	r1, [r7, #8]
    f342:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
    f344:	231f      	movs	r3, #31
    f346:	18fb      	adds	r3, r7, r3
    f348:	2202      	movs	r2, #2
    f34a:	701a      	strb	r2, [r3, #0]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
    f34c:	68bb      	ldr	r3, [r7, #8]
    f34e:	2b01      	cmp	r3, #1
    f350:	d800      	bhi.n	f354 <put_fat+0x1c>
    f352:	e0ed      	b.n	f530 <put_fat+0x1f8>
    f354:	68fb      	ldr	r3, [r7, #12]
    f356:	699a      	ldr	r2, [r3, #24]
    f358:	68bb      	ldr	r3, [r7, #8]
    f35a:	429a      	cmp	r2, r3
    f35c:	d800      	bhi.n	f360 <put_fat+0x28>
    f35e:	e0e7      	b.n	f530 <put_fat+0x1f8>
		switch (fs->fs_type) {
    f360:	68fb      	ldr	r3, [r7, #12]
    f362:	781b      	ldrb	r3, [r3, #0]
    f364:	2b02      	cmp	r3, #2
    f366:	d100      	bne.n	f36a <put_fat+0x32>
    f368:	e07c      	b.n	f464 <put_fat+0x12c>
    f36a:	2b03      	cmp	r3, #3
    f36c:	d100      	bne.n	f370 <put_fat+0x38>
    f36e:	e09f      	b.n	f4b0 <put_fat+0x178>
    f370:	2b01      	cmp	r3, #1
    f372:	d000      	beq.n	f376 <put_fat+0x3e>
    f374:	e0dc      	b.n	f530 <put_fat+0x1f8>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
    f376:	68bb      	ldr	r3, [r7, #8]
    f378:	61bb      	str	r3, [r7, #24]
    f37a:	69bb      	ldr	r3, [r7, #24]
    f37c:	085b      	lsrs	r3, r3, #1
    f37e:	69ba      	ldr	r2, [r7, #24]
    f380:	18d3      	adds	r3, r2, r3
    f382:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    f384:	68fb      	ldr	r3, [r7, #12]
    f386:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    f388:	69bb      	ldr	r3, [r7, #24]
    f38a:	0a5b      	lsrs	r3, r3, #9
    f38c:	18d2      	adds	r2, r2, r3
    f38e:	231f      	movs	r3, #31
    f390:	18fc      	adds	r4, r7, r3
    f392:	68fb      	ldr	r3, [r7, #12]
    f394:	0011      	movs	r1, r2
    f396:	0018      	movs	r0, r3
    f398:	4b69      	ldr	r3, [pc, #420]	; (f540 <put_fat+0x208>)
    f39a:	4798      	blx	r3
    f39c:	0003      	movs	r3, r0
    f39e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    f3a0:	231f      	movs	r3, #31
    f3a2:	18fb      	adds	r3, r7, r3
    f3a4:	781b      	ldrb	r3, [r3, #0]
    f3a6:	2b00      	cmp	r3, #0
    f3a8:	d000      	beq.n	f3ac <put_fat+0x74>
    f3aa:	e0ba      	b.n	f522 <put_fat+0x1ea>
			p = fs->win + bc++ % SS(fs);
    f3ac:	68fb      	ldr	r3, [r7, #12]
    f3ae:	3334      	adds	r3, #52	; 0x34
    f3b0:	001a      	movs	r2, r3
    f3b2:	69bb      	ldr	r3, [r7, #24]
    f3b4:	1c59      	adds	r1, r3, #1
    f3b6:	61b9      	str	r1, [r7, #24]
    f3b8:	05db      	lsls	r3, r3, #23
    f3ba:	0ddb      	lsrs	r3, r3, #23
    f3bc:	18d3      	adds	r3, r2, r3
    f3be:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
    f3c0:	68bb      	ldr	r3, [r7, #8]
    f3c2:	2201      	movs	r2, #1
    f3c4:	4013      	ands	r3, r2
    f3c6:	d00d      	beq.n	f3e4 <put_fat+0xac>
    f3c8:	697b      	ldr	r3, [r7, #20]
    f3ca:	781b      	ldrb	r3, [r3, #0]
    f3cc:	b25b      	sxtb	r3, r3
    f3ce:	220f      	movs	r2, #15
    f3d0:	4013      	ands	r3, r2
    f3d2:	b25a      	sxtb	r2, r3
    f3d4:	687b      	ldr	r3, [r7, #4]
    f3d6:	b2db      	uxtb	r3, r3
    f3d8:	011b      	lsls	r3, r3, #4
    f3da:	b25b      	sxtb	r3, r3
    f3dc:	4313      	orrs	r3, r2
    f3de:	b25b      	sxtb	r3, r3
    f3e0:	b2db      	uxtb	r3, r3
    f3e2:	e001      	b.n	f3e8 <put_fat+0xb0>
    f3e4:	687b      	ldr	r3, [r7, #4]
    f3e6:	b2db      	uxtb	r3, r3
    f3e8:	697a      	ldr	r2, [r7, #20]
    f3ea:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
    f3ec:	68fb      	ldr	r3, [r7, #12]
    f3ee:	2201      	movs	r2, #1
    f3f0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    f3f2:	68fb      	ldr	r3, [r7, #12]
    f3f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    f3f6:	69bb      	ldr	r3, [r7, #24]
    f3f8:	0a5b      	lsrs	r3, r3, #9
    f3fa:	18d2      	adds	r2, r2, r3
    f3fc:	231f      	movs	r3, #31
    f3fe:	18fc      	adds	r4, r7, r3
    f400:	68fb      	ldr	r3, [r7, #12]
    f402:	0011      	movs	r1, r2
    f404:	0018      	movs	r0, r3
    f406:	4b4e      	ldr	r3, [pc, #312]	; (f540 <put_fat+0x208>)
    f408:	4798      	blx	r3
    f40a:	0003      	movs	r3, r0
    f40c:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    f40e:	231f      	movs	r3, #31
    f410:	18fb      	adds	r3, r7, r3
    f412:	781b      	ldrb	r3, [r3, #0]
    f414:	2b00      	cmp	r3, #0
    f416:	d000      	beq.n	f41a <put_fat+0xe2>
    f418:	e085      	b.n	f526 <put_fat+0x1ee>
			p = fs->win + bc % SS(fs);
    f41a:	68fb      	ldr	r3, [r7, #12]
    f41c:	3334      	adds	r3, #52	; 0x34
    f41e:	001a      	movs	r2, r3
    f420:	69bb      	ldr	r3, [r7, #24]
    f422:	05db      	lsls	r3, r3, #23
    f424:	0ddb      	lsrs	r3, r3, #23
    f426:	18d3      	adds	r3, r2, r3
    f428:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
    f42a:	68bb      	ldr	r3, [r7, #8]
    f42c:	2201      	movs	r2, #1
    f42e:	4013      	ands	r3, r2
    f430:	d003      	beq.n	f43a <put_fat+0x102>
    f432:	687b      	ldr	r3, [r7, #4]
    f434:	091b      	lsrs	r3, r3, #4
    f436:	b2db      	uxtb	r3, r3
    f438:	e00e      	b.n	f458 <put_fat+0x120>
    f43a:	697b      	ldr	r3, [r7, #20]
    f43c:	781b      	ldrb	r3, [r3, #0]
    f43e:	b25b      	sxtb	r3, r3
    f440:	220f      	movs	r2, #15
    f442:	4393      	bics	r3, r2
    f444:	b25a      	sxtb	r2, r3
    f446:	687b      	ldr	r3, [r7, #4]
    f448:	0a1b      	lsrs	r3, r3, #8
    f44a:	b25b      	sxtb	r3, r3
    f44c:	210f      	movs	r1, #15
    f44e:	400b      	ands	r3, r1
    f450:	b25b      	sxtb	r3, r3
    f452:	4313      	orrs	r3, r2
    f454:	b25b      	sxtb	r3, r3
    f456:	b2db      	uxtb	r3, r3
    f458:	697a      	ldr	r2, [r7, #20]
    f45a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
    f45c:	68fb      	ldr	r3, [r7, #12]
    f45e:	2201      	movs	r2, #1
    f460:	70da      	strb	r2, [r3, #3]
			break;
    f462:	e065      	b.n	f530 <put_fat+0x1f8>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    f464:	68fb      	ldr	r3, [r7, #12]
    f466:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    f468:	68bb      	ldr	r3, [r7, #8]
    f46a:	0a1b      	lsrs	r3, r3, #8
    f46c:	18d2      	adds	r2, r2, r3
    f46e:	231f      	movs	r3, #31
    f470:	18fc      	adds	r4, r7, r3
    f472:	68fb      	ldr	r3, [r7, #12]
    f474:	0011      	movs	r1, r2
    f476:	0018      	movs	r0, r3
    f478:	4b31      	ldr	r3, [pc, #196]	; (f540 <put_fat+0x208>)
    f47a:	4798      	blx	r3
    f47c:	0003      	movs	r3, r0
    f47e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    f480:	231f      	movs	r3, #31
    f482:	18fb      	adds	r3, r7, r3
    f484:	781b      	ldrb	r3, [r3, #0]
    f486:	2b00      	cmp	r3, #0
    f488:	d14f      	bne.n	f52a <put_fat+0x1f2>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
    f48a:	68fb      	ldr	r3, [r7, #12]
    f48c:	3334      	adds	r3, #52	; 0x34
    f48e:	001a      	movs	r2, r3
    f490:	68bb      	ldr	r3, [r7, #8]
    f492:	0059      	lsls	r1, r3, #1
    f494:	23ff      	movs	r3, #255	; 0xff
    f496:	005b      	lsls	r3, r3, #1
    f498:	400b      	ands	r3, r1
    f49a:	18d3      	adds	r3, r2, r3
    f49c:	687a      	ldr	r2, [r7, #4]
    f49e:	b292      	uxth	r2, r2
    f4a0:	0011      	movs	r1, r2
    f4a2:	0018      	movs	r0, r3
    f4a4:	4b27      	ldr	r3, [pc, #156]	; (f544 <put_fat+0x20c>)
    f4a6:	4798      	blx	r3
			fs->wflag = 1;
    f4a8:	68fb      	ldr	r3, [r7, #12]
    f4aa:	2201      	movs	r2, #1
    f4ac:	70da      	strb	r2, [r3, #3]
			break;
    f4ae:	e03f      	b.n	f530 <put_fat+0x1f8>

		case FS_FAT32 :
#if FF_FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    f4b0:	68fb      	ldr	r3, [r7, #12]
    f4b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    f4b4:	68bb      	ldr	r3, [r7, #8]
    f4b6:	09db      	lsrs	r3, r3, #7
    f4b8:	18d2      	adds	r2, r2, r3
    f4ba:	231f      	movs	r3, #31
    f4bc:	18fc      	adds	r4, r7, r3
    f4be:	68fb      	ldr	r3, [r7, #12]
    f4c0:	0011      	movs	r1, r2
    f4c2:	0018      	movs	r0, r3
    f4c4:	4b1e      	ldr	r3, [pc, #120]	; (f540 <put_fat+0x208>)
    f4c6:	4798      	blx	r3
    f4c8:	0003      	movs	r3, r0
    f4ca:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    f4cc:	231f      	movs	r3, #31
    f4ce:	18fb      	adds	r3, r7, r3
    f4d0:	781b      	ldrb	r3, [r3, #0]
    f4d2:	2b00      	cmp	r3, #0
    f4d4:	d12b      	bne.n	f52e <put_fat+0x1f6>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
    f4d6:	687b      	ldr	r3, [r7, #4]
    f4d8:	011b      	lsls	r3, r3, #4
    f4da:	091c      	lsrs	r4, r3, #4
    f4dc:	68fb      	ldr	r3, [r7, #12]
    f4de:	3334      	adds	r3, #52	; 0x34
    f4e0:	001a      	movs	r2, r3
    f4e2:	68bb      	ldr	r3, [r7, #8]
    f4e4:	0099      	lsls	r1, r3, #2
    f4e6:	23fe      	movs	r3, #254	; 0xfe
    f4e8:	005b      	lsls	r3, r3, #1
    f4ea:	400b      	ands	r3, r1
    f4ec:	18d3      	adds	r3, r2, r3
    f4ee:	0018      	movs	r0, r3
    f4f0:	4b15      	ldr	r3, [pc, #84]	; (f548 <put_fat+0x210>)
    f4f2:	4798      	blx	r3
    f4f4:	0003      	movs	r3, r0
    f4f6:	0f1b      	lsrs	r3, r3, #28
    f4f8:	071b      	lsls	r3, r3, #28
    f4fa:	4323      	orrs	r3, r4
    f4fc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
    f4fe:	68fb      	ldr	r3, [r7, #12]
    f500:	3334      	adds	r3, #52	; 0x34
    f502:	001a      	movs	r2, r3
    f504:	68bb      	ldr	r3, [r7, #8]
    f506:	0099      	lsls	r1, r3, #2
    f508:	23fe      	movs	r3, #254	; 0xfe
    f50a:	005b      	lsls	r3, r3, #1
    f50c:	400b      	ands	r3, r1
    f50e:	18d3      	adds	r3, r2, r3
    f510:	687a      	ldr	r2, [r7, #4]
    f512:	0011      	movs	r1, r2
    f514:	0018      	movs	r0, r3
    f516:	4b0d      	ldr	r3, [pc, #52]	; (f54c <put_fat+0x214>)
    f518:	4798      	blx	r3
			fs->wflag = 1;
    f51a:	68fb      	ldr	r3, [r7, #12]
    f51c:	2201      	movs	r2, #1
    f51e:	70da      	strb	r2, [r3, #3]
			break;
    f520:	e006      	b.n	f530 <put_fat+0x1f8>
			if (res != FR_OK) break;
    f522:	46c0      	nop			; (mov r8, r8)
    f524:	e004      	b.n	f530 <put_fat+0x1f8>
			if (res != FR_OK) break;
    f526:	46c0      	nop			; (mov r8, r8)
    f528:	e002      	b.n	f530 <put_fat+0x1f8>
			if (res != FR_OK) break;
    f52a:	46c0      	nop			; (mov r8, r8)
    f52c:	e000      	b.n	f530 <put_fat+0x1f8>
			if (res != FR_OK) break;
    f52e:	46c0      	nop			; (mov r8, r8)
		}
	}
	return res;
    f530:	231f      	movs	r3, #31
    f532:	18fb      	adds	r3, r7, r3
    f534:	781b      	ldrb	r3, [r3, #0]
}
    f536:	0018      	movs	r0, r3
    f538:	46bd      	mov	sp, r7
    f53a:	b009      	add	sp, #36	; 0x24
    f53c:	bd90      	pop	{r4, r7, pc}
    f53e:	46c0      	nop			; (mov r8, r8)
    f540:	0000f015 	.word	0x0000f015
    f544:	0000ed07 	.word	0x0000ed07
    f548:	0000ecc5 	.word	0x0000ecc5
    f54c:	0000ed43 	.word	0x0000ed43

0000f550 <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
    f550:	b590      	push	{r4, r7, lr}
    f552:	b089      	sub	sp, #36	; 0x24
    f554:	af00      	add	r7, sp, #0
    f556:	60f8      	str	r0, [r7, #12]
    f558:	60b9      	str	r1, [r7, #8]
    f55a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
    f55c:	231f      	movs	r3, #31
    f55e:	18fb      	adds	r3, r7, r3
    f560:	2200      	movs	r2, #0
    f562:	701a      	strb	r2, [r3, #0]
	DWORD nxt;
	FATFS *fs = obj->fs;
    f564:	68fb      	ldr	r3, [r7, #12]
    f566:	681b      	ldr	r3, [r3, #0]
    f568:	61bb      	str	r3, [r7, #24]
#endif
#if FF_USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
    f56a:	68bb      	ldr	r3, [r7, #8]
    f56c:	2b01      	cmp	r3, #1
    f56e:	d904      	bls.n	f57a <remove_chain+0x2a>
    f570:	69bb      	ldr	r3, [r7, #24]
    f572:	699a      	ldr	r2, [r3, #24]
    f574:	68bb      	ldr	r3, [r7, #8]
    f576:	429a      	cmp	r2, r3
    f578:	d801      	bhi.n	f57e <remove_chain+0x2e>
    f57a:	2302      	movs	r3, #2
    f57c:	e05b      	b.n	f636 <remove_chain+0xe6>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
    f57e:	687b      	ldr	r3, [r7, #4]
    f580:	2b00      	cmp	r3, #0
    f582:	d013      	beq.n	f5ac <remove_chain+0x5c>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
    f584:	231f      	movs	r3, #31
    f586:	18fc      	adds	r4, r7, r3
    f588:	2301      	movs	r3, #1
    f58a:	425a      	negs	r2, r3
    f58c:	6879      	ldr	r1, [r7, #4]
    f58e:	69bb      	ldr	r3, [r7, #24]
    f590:	0018      	movs	r0, r3
    f592:	4b2b      	ldr	r3, [pc, #172]	; (f640 <remove_chain+0xf0>)
    f594:	4798      	blx	r3
    f596:	0003      	movs	r3, r0
    f598:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) return res;
    f59a:	231f      	movs	r3, #31
    f59c:	18fb      	adds	r3, r7, r3
    f59e:	781b      	ldrb	r3, [r3, #0]
    f5a0:	2b00      	cmp	r3, #0
    f5a2:	d003      	beq.n	f5ac <remove_chain+0x5c>
    f5a4:	231f      	movs	r3, #31
    f5a6:	18fb      	adds	r3, r7, r3
    f5a8:	781b      	ldrb	r3, [r3, #0]
    f5aa:	e044      	b.n	f636 <remove_chain+0xe6>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
    f5ac:	68ba      	ldr	r2, [r7, #8]
    f5ae:	68fb      	ldr	r3, [r7, #12]
    f5b0:	0011      	movs	r1, r2
    f5b2:	0018      	movs	r0, r3
    f5b4:	4b23      	ldr	r3, [pc, #140]	; (f644 <remove_chain+0xf4>)
    f5b6:	4798      	blx	r3
    f5b8:	0003      	movs	r3, r0
    f5ba:	617b      	str	r3, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
    f5bc:	697b      	ldr	r3, [r7, #20]
    f5be:	2b00      	cmp	r3, #0
    f5c0:	d037      	beq.n	f632 <remove_chain+0xe2>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
    f5c2:	697b      	ldr	r3, [r7, #20]
    f5c4:	2b01      	cmp	r3, #1
    f5c6:	d101      	bne.n	f5cc <remove_chain+0x7c>
    f5c8:	2302      	movs	r3, #2
    f5ca:	e034      	b.n	f636 <remove_chain+0xe6>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
    f5cc:	697b      	ldr	r3, [r7, #20]
    f5ce:	3301      	adds	r3, #1
    f5d0:	d101      	bne.n	f5d6 <remove_chain+0x86>
    f5d2:	2301      	movs	r3, #1
    f5d4:	e02f      	b.n	f636 <remove_chain+0xe6>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
    f5d6:	231f      	movs	r3, #31
    f5d8:	18fc      	adds	r4, r7, r3
    f5da:	68b9      	ldr	r1, [r7, #8]
    f5dc:	69bb      	ldr	r3, [r7, #24]
    f5de:	2200      	movs	r2, #0
    f5e0:	0018      	movs	r0, r3
    f5e2:	4b17      	ldr	r3, [pc, #92]	; (f640 <remove_chain+0xf0>)
    f5e4:	4798      	blx	r3
    f5e6:	0003      	movs	r3, r0
    f5e8:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) return res;
    f5ea:	231f      	movs	r3, #31
    f5ec:	18fb      	adds	r3, r7, r3
    f5ee:	781b      	ldrb	r3, [r3, #0]
    f5f0:	2b00      	cmp	r3, #0
    f5f2:	d003      	beq.n	f5fc <remove_chain+0xac>
    f5f4:	231f      	movs	r3, #31
    f5f6:	18fb      	adds	r3, r7, r3
    f5f8:	781b      	ldrb	r3, [r3, #0]
    f5fa:	e01c      	b.n	f636 <remove_chain+0xe6>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
    f5fc:	69bb      	ldr	r3, [r7, #24]
    f5fe:	695a      	ldr	r2, [r3, #20]
    f600:	69bb      	ldr	r3, [r7, #24]
    f602:	699b      	ldr	r3, [r3, #24]
    f604:	3b02      	subs	r3, #2
    f606:	429a      	cmp	r2, r3
    f608:	d20b      	bcs.n	f622 <remove_chain+0xd2>
			fs->free_clst++;
    f60a:	69bb      	ldr	r3, [r7, #24]
    f60c:	695b      	ldr	r3, [r3, #20]
    f60e:	1c5a      	adds	r2, r3, #1
    f610:	69bb      	ldr	r3, [r7, #24]
    f612:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
    f614:	69bb      	ldr	r3, [r7, #24]
    f616:	791b      	ldrb	r3, [r3, #4]
    f618:	2201      	movs	r2, #1
    f61a:	4313      	orrs	r3, r2
    f61c:	b2da      	uxtb	r2, r3
    f61e:	69bb      	ldr	r3, [r7, #24]
    f620:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform device the data in the block is no longer needed */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
    f622:	697b      	ldr	r3, [r7, #20]
    f624:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
    f626:	69bb      	ldr	r3, [r7, #24]
    f628:	699a      	ldr	r2, [r3, #24]
    f62a:	68bb      	ldr	r3, [r7, #8]
    f62c:	429a      	cmp	r2, r3
    f62e:	d8bd      	bhi.n	f5ac <remove_chain+0x5c>
    f630:	e000      	b.n	f634 <remove_chain+0xe4>
		if (nxt == 0) break;				/* Empty cluster? */
    f632:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}
#endif
	return FR_OK;
    f634:	2300      	movs	r3, #0
}
    f636:	0018      	movs	r0, r3
    f638:	46bd      	mov	sp, r7
    f63a:	b009      	add	sp, #36	; 0x24
    f63c:	bd90      	pop	{r4, r7, pc}
    f63e:	46c0      	nop			; (mov r8, r8)
    f640:	0000f339 	.word	0x0000f339
    f644:	0000f1d9 	.word	0x0000f1d9

0000f648 <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
    f648:	b590      	push	{r4, r7, lr}
    f64a:	b089      	sub	sp, #36	; 0x24
    f64c:	af00      	add	r7, sp, #0
    f64e:	6078      	str	r0, [r7, #4]
    f650:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
    f652:	687b      	ldr	r3, [r7, #4]
    f654:	681b      	ldr	r3, [r3, #0]
    f656:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
    f658:	683b      	ldr	r3, [r7, #0]
    f65a:	2b00      	cmp	r3, #0
    f65c:	d10d      	bne.n	f67a <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
    f65e:	693b      	ldr	r3, [r7, #16]
    f660:	691b      	ldr	r3, [r3, #16]
    f662:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
    f664:	69bb      	ldr	r3, [r7, #24]
    f666:	2b00      	cmp	r3, #0
    f668:	d004      	beq.n	f674 <create_chain+0x2c>
    f66a:	693b      	ldr	r3, [r7, #16]
    f66c:	699a      	ldr	r2, [r3, #24]
    f66e:	69bb      	ldr	r3, [r7, #24]
    f670:	429a      	cmp	r2, r3
    f672:	d81d      	bhi.n	f6b0 <create_chain+0x68>
    f674:	2301      	movs	r3, #1
    f676:	61bb      	str	r3, [r7, #24]
    f678:	e01a      	b.n	f6b0 <create_chain+0x68>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
    f67a:	683a      	ldr	r2, [r7, #0]
    f67c:	687b      	ldr	r3, [r7, #4]
    f67e:	0011      	movs	r1, r2
    f680:	0018      	movs	r0, r3
    f682:	4b63      	ldr	r3, [pc, #396]	; (f810 <create_chain+0x1c8>)
    f684:	4798      	blx	r3
    f686:	0003      	movs	r3, r0
    f688:	60fb      	str	r3, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
    f68a:	68fb      	ldr	r3, [r7, #12]
    f68c:	2b01      	cmp	r3, #1
    f68e:	d801      	bhi.n	f694 <create_chain+0x4c>
    f690:	2301      	movs	r3, #1
    f692:	e0b8      	b.n	f806 <create_chain+0x1be>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
    f694:	68fb      	ldr	r3, [r7, #12]
    f696:	3301      	adds	r3, #1
    f698:	d101      	bne.n	f69e <create_chain+0x56>
    f69a:	68fb      	ldr	r3, [r7, #12]
    f69c:	e0b3      	b.n	f806 <create_chain+0x1be>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    f69e:	693b      	ldr	r3, [r7, #16]
    f6a0:	699a      	ldr	r2, [r3, #24]
    f6a2:	68fb      	ldr	r3, [r7, #12]
    f6a4:	429a      	cmp	r2, r3
    f6a6:	d901      	bls.n	f6ac <create_chain+0x64>
    f6a8:	68fb      	ldr	r3, [r7, #12]
    f6aa:	e0ac      	b.n	f806 <create_chain+0x1be>
		scl = clst;							/* Cluster to start to find */
    f6ac:	683b      	ldr	r3, [r7, #0]
    f6ae:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
    f6b0:	693b      	ldr	r3, [r7, #16]
    f6b2:	695b      	ldr	r3, [r3, #20]
    f6b4:	2b00      	cmp	r3, #0
    f6b6:	d101      	bne.n	f6bc <create_chain+0x74>
    f6b8:	2300      	movs	r3, #0
    f6ba:	e0a4      	b.n	f806 <create_chain+0x1be>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
    f6bc:	2300      	movs	r3, #0
    f6be:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
    f6c0:	69ba      	ldr	r2, [r7, #24]
    f6c2:	683b      	ldr	r3, [r7, #0]
    f6c4:	429a      	cmp	r2, r3
    f6c6:	d12b      	bne.n	f720 <create_chain+0xd8>
			ncl = scl + 1;						/* Test if next cluster is free */
    f6c8:	69bb      	ldr	r3, [r7, #24]
    f6ca:	3301      	adds	r3, #1
    f6cc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
    f6ce:	693b      	ldr	r3, [r7, #16]
    f6d0:	699a      	ldr	r2, [r3, #24]
    f6d2:	69fb      	ldr	r3, [r7, #28]
    f6d4:	429a      	cmp	r2, r3
    f6d6:	d801      	bhi.n	f6dc <create_chain+0x94>
    f6d8:	2302      	movs	r3, #2
    f6da:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
    f6dc:	69fa      	ldr	r2, [r7, #28]
    f6de:	687b      	ldr	r3, [r7, #4]
    f6e0:	0011      	movs	r1, r2
    f6e2:	0018      	movs	r0, r3
    f6e4:	4b4a      	ldr	r3, [pc, #296]	; (f810 <create_chain+0x1c8>)
    f6e6:	4798      	blx	r3
    f6e8:	0003      	movs	r3, r0
    f6ea:	60fb      	str	r3, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
    f6ec:	68fb      	ldr	r3, [r7, #12]
    f6ee:	2b01      	cmp	r3, #1
    f6f0:	d002      	beq.n	f6f8 <create_chain+0xb0>
    f6f2:	68fb      	ldr	r3, [r7, #12]
    f6f4:	3301      	adds	r3, #1
    f6f6:	d101      	bne.n	f6fc <create_chain+0xb4>
    f6f8:	68fb      	ldr	r3, [r7, #12]
    f6fa:	e084      	b.n	f806 <create_chain+0x1be>
			if (cs != 0) {						/* Not free? */
    f6fc:	68fb      	ldr	r3, [r7, #12]
    f6fe:	2b00      	cmp	r3, #0
    f700:	d00e      	beq.n	f720 <create_chain+0xd8>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
    f702:	693b      	ldr	r3, [r7, #16]
    f704:	691b      	ldr	r3, [r3, #16]
    f706:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
    f708:	68fb      	ldr	r3, [r7, #12]
    f70a:	2b01      	cmp	r3, #1
    f70c:	d906      	bls.n	f71c <create_chain+0xd4>
    f70e:	693b      	ldr	r3, [r7, #16]
    f710:	699a      	ldr	r2, [r3, #24]
    f712:	68fb      	ldr	r3, [r7, #12]
    f714:	429a      	cmp	r2, r3
    f716:	d901      	bls.n	f71c <create_chain+0xd4>
    f718:	68fb      	ldr	r3, [r7, #12]
    f71a:	61bb      	str	r3, [r7, #24]
				ncl = 0;
    f71c:	2300      	movs	r3, #0
    f71e:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
    f720:	69fb      	ldr	r3, [r7, #28]
    f722:	2b00      	cmp	r3, #0
    f724:	d12b      	bne.n	f77e <create_chain+0x136>
			ncl = scl;	/* Start cluster */
    f726:	69bb      	ldr	r3, [r7, #24]
    f728:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
    f72a:	69fb      	ldr	r3, [r7, #28]
    f72c:	3301      	adds	r3, #1
    f72e:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
    f730:	693b      	ldr	r3, [r7, #16]
    f732:	699a      	ldr	r2, [r3, #24]
    f734:	69fb      	ldr	r3, [r7, #28]
    f736:	429a      	cmp	r2, r3
    f738:	d807      	bhi.n	f74a <create_chain+0x102>
					ncl = 2;
    f73a:	2302      	movs	r3, #2
    f73c:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
    f73e:	69fa      	ldr	r2, [r7, #28]
    f740:	69bb      	ldr	r3, [r7, #24]
    f742:	429a      	cmp	r2, r3
    f744:	d901      	bls.n	f74a <create_chain+0x102>
    f746:	2300      	movs	r3, #0
    f748:	e05d      	b.n	f806 <create_chain+0x1be>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
    f74a:	69fa      	ldr	r2, [r7, #28]
    f74c:	687b      	ldr	r3, [r7, #4]
    f74e:	0011      	movs	r1, r2
    f750:	0018      	movs	r0, r3
    f752:	4b2f      	ldr	r3, [pc, #188]	; (f810 <create_chain+0x1c8>)
    f754:	4798      	blx	r3
    f756:	0003      	movs	r3, r0
    f758:	60fb      	str	r3, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
    f75a:	68fb      	ldr	r3, [r7, #12]
    f75c:	2b00      	cmp	r3, #0
    f75e:	d00d      	beq.n	f77c <create_chain+0x134>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
    f760:	68fb      	ldr	r3, [r7, #12]
    f762:	2b01      	cmp	r3, #1
    f764:	d002      	beq.n	f76c <create_chain+0x124>
    f766:	68fb      	ldr	r3, [r7, #12]
    f768:	3301      	adds	r3, #1
    f76a:	d101      	bne.n	f770 <create_chain+0x128>
    f76c:	68fb      	ldr	r3, [r7, #12]
    f76e:	e04a      	b.n	f806 <create_chain+0x1be>
				if (ncl == scl) return 0;		/* No free cluster found? */
    f770:	69fa      	ldr	r2, [r7, #28]
    f772:	69bb      	ldr	r3, [r7, #24]
    f774:	429a      	cmp	r2, r3
    f776:	d1d8      	bne.n	f72a <create_chain+0xe2>
    f778:	2300      	movs	r3, #0
    f77a:	e044      	b.n	f806 <create_chain+0x1be>
				if (cs == 0) break;				/* Found a free cluster? */
    f77c:	46c0      	nop			; (mov r8, r8)
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
    f77e:	2317      	movs	r3, #23
    f780:	18fc      	adds	r4, r7, r3
    f782:	2301      	movs	r3, #1
    f784:	425a      	negs	r2, r3
    f786:	69f9      	ldr	r1, [r7, #28]
    f788:	693b      	ldr	r3, [r7, #16]
    f78a:	0018      	movs	r0, r3
    f78c:	4b21      	ldr	r3, [pc, #132]	; (f814 <create_chain+0x1cc>)
    f78e:	4798      	blx	r3
    f790:	0003      	movs	r3, r0
    f792:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK && clst != 0) {
    f794:	2317      	movs	r3, #23
    f796:	18fb      	adds	r3, r7, r3
    f798:	781b      	ldrb	r3, [r3, #0]
    f79a:	2b00      	cmp	r3, #0
    f79c:	d10c      	bne.n	f7b8 <create_chain+0x170>
    f79e:	683b      	ldr	r3, [r7, #0]
    f7a0:	2b00      	cmp	r3, #0
    f7a2:	d009      	beq.n	f7b8 <create_chain+0x170>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
    f7a4:	2317      	movs	r3, #23
    f7a6:	18fc      	adds	r4, r7, r3
    f7a8:	69fa      	ldr	r2, [r7, #28]
    f7aa:	6839      	ldr	r1, [r7, #0]
    f7ac:	693b      	ldr	r3, [r7, #16]
    f7ae:	0018      	movs	r0, r3
    f7b0:	4b18      	ldr	r3, [pc, #96]	; (f814 <create_chain+0x1cc>)
    f7b2:	4798      	blx	r3
    f7b4:	0003      	movs	r3, r0
    f7b6:	7023      	strb	r3, [r4, #0]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
    f7b8:	2317      	movs	r3, #23
    f7ba:	18fb      	adds	r3, r7, r3
    f7bc:	781b      	ldrb	r3, [r3, #0]
    f7be:	2b00      	cmp	r3, #0
    f7c0:	d116      	bne.n	f7f0 <create_chain+0x1a8>
		fs->last_clst = ncl;
    f7c2:	693b      	ldr	r3, [r7, #16]
    f7c4:	69fa      	ldr	r2, [r7, #28]
    f7c6:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
    f7c8:	693b      	ldr	r3, [r7, #16]
    f7ca:	695a      	ldr	r2, [r3, #20]
    f7cc:	693b      	ldr	r3, [r7, #16]
    f7ce:	699b      	ldr	r3, [r3, #24]
    f7d0:	3b02      	subs	r3, #2
    f7d2:	429a      	cmp	r2, r3
    f7d4:	d804      	bhi.n	f7e0 <create_chain+0x198>
    f7d6:	693b      	ldr	r3, [r7, #16]
    f7d8:	695b      	ldr	r3, [r3, #20]
    f7da:	1e5a      	subs	r2, r3, #1
    f7dc:	693b      	ldr	r3, [r7, #16]
    f7de:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
    f7e0:	693b      	ldr	r3, [r7, #16]
    f7e2:	791b      	ldrb	r3, [r3, #4]
    f7e4:	2201      	movs	r2, #1
    f7e6:	4313      	orrs	r3, r2
    f7e8:	b2da      	uxtb	r2, r3
    f7ea:	693b      	ldr	r3, [r7, #16]
    f7ec:	711a      	strb	r2, [r3, #4]
    f7ee:	e009      	b.n	f804 <create_chain+0x1bc>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
    f7f0:	2317      	movs	r3, #23
    f7f2:	18fb      	adds	r3, r7, r3
    f7f4:	781b      	ldrb	r3, [r3, #0]
    f7f6:	2b01      	cmp	r3, #1
    f7f8:	d102      	bne.n	f800 <create_chain+0x1b8>
    f7fa:	2301      	movs	r3, #1
    f7fc:	425b      	negs	r3, r3
    f7fe:	e000      	b.n	f802 <create_chain+0x1ba>
    f800:	2301      	movs	r3, #1
    f802:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
    f804:	69fb      	ldr	r3, [r7, #28]
}
    f806:	0018      	movs	r0, r3
    f808:	46bd      	mov	sp, r7
    f80a:	b009      	add	sp, #36	; 0x24
    f80c:	bd90      	pop	{r4, r7, pc}
    f80e:	46c0      	nop			; (mov r8, r8)
    f810:	0000f1d9 	.word	0x0000f1d9
    f814:	0000f339 	.word	0x0000f339

0000f818 <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
    f818:	b590      	push	{r4, r7, lr}
    f81a:	b087      	sub	sp, #28
    f81c:	af00      	add	r7, sp, #0
    f81e:	6078      	str	r0, [r7, #4]
    f820:	6039      	str	r1, [r7, #0]
	DWORD sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
    f822:	687b      	ldr	r3, [r7, #4]
    f824:	0018      	movs	r0, r3
    f826:	4b22      	ldr	r3, [pc, #136]	; (f8b0 <dir_clear+0x98>)
    f828:	4798      	blx	r3
    f82a:	1e03      	subs	r3, r0, #0
    f82c:	d001      	beq.n	f832 <dir_clear+0x1a>
    f82e:	2301      	movs	r3, #1
    f830:	e039      	b.n	f8a6 <dir_clear+0x8e>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
    f832:	683a      	ldr	r2, [r7, #0]
    f834:	687b      	ldr	r3, [r7, #4]
    f836:	0011      	movs	r1, r2
    f838:	0018      	movs	r0, r3
    f83a:	4b1e      	ldr	r3, [pc, #120]	; (f8b4 <dir_clear+0x9c>)
    f83c:	4798      	blx	r3
    f83e:	0003      	movs	r3, r0
    f840:	613b      	str	r3, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
    f842:	687b      	ldr	r3, [r7, #4]
    f844:	693a      	ldr	r2, [r7, #16]
    f846:	631a      	str	r2, [r3, #48]	; 0x30
	mem_set(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
    f848:	687b      	ldr	r3, [r7, #4]
    f84a:	3334      	adds	r3, #52	; 0x34
    f84c:	0018      	movs	r0, r3
    f84e:	2380      	movs	r3, #128	; 0x80
    f850:	009b      	lsls	r3, r3, #2
    f852:	001a      	movs	r2, r3
    f854:	2100      	movs	r1, #0
    f856:	4b18      	ldr	r3, [pc, #96]	; (f8b8 <dir_clear+0xa0>)
    f858:	4798      	blx	r3
		for (n = 0; n < fs->csize && disk_writep(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
    f85a:	687b      	ldr	r3, [r7, #4]
    f85c:	3334      	adds	r3, #52	; 0x34
    f85e:	60fb      	str	r3, [r7, #12]
    f860:	2301      	movs	r3, #1
    f862:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_writep(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
    f864:	2300      	movs	r3, #0
    f866:	617b      	str	r3, [r7, #20]
    f868:	e003      	b.n	f872 <dir_clear+0x5a>
    f86a:	697a      	ldr	r2, [r7, #20]
    f86c:	68bb      	ldr	r3, [r7, #8]
    f86e:	18d3      	adds	r3, r2, r3
    f870:	617b      	str	r3, [r7, #20]
    f872:	687b      	ldr	r3, [r7, #4]
    f874:	895b      	ldrh	r3, [r3, #10]
    f876:	001a      	movs	r2, r3
    f878:	697b      	ldr	r3, [r7, #20]
    f87a:	429a      	cmp	r2, r3
    f87c:	d90b      	bls.n	f896 <dir_clear+0x7e>
    f87e:	687b      	ldr	r3, [r7, #4]
    f880:	7858      	ldrb	r0, [r3, #1]
    f882:	693a      	ldr	r2, [r7, #16]
    f884:	697b      	ldr	r3, [r7, #20]
    f886:	18d2      	adds	r2, r2, r3
    f888:	68bb      	ldr	r3, [r7, #8]
    f88a:	b2db      	uxtb	r3, r3
    f88c:	68f9      	ldr	r1, [r7, #12]
    f88e:	4c0b      	ldr	r4, [pc, #44]	; (f8bc <dir_clear+0xa4>)
    f890:	47a0      	blx	r4
    f892:	1e03      	subs	r3, r0, #0
    f894:	d0e9      	beq.n	f86a <dir_clear+0x52>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
    f896:	687b      	ldr	r3, [r7, #4]
    f898:	895b      	ldrh	r3, [r3, #10]
    f89a:	001a      	movs	r2, r3
    f89c:	697b      	ldr	r3, [r7, #20]
    f89e:	1ad3      	subs	r3, r2, r3
    f8a0:	1e5a      	subs	r2, r3, #1
    f8a2:	4193      	sbcs	r3, r2
    f8a4:	b2db      	uxtb	r3, r3
}
    f8a6:	0018      	movs	r0, r3
    f8a8:	46bd      	mov	sp, r7
    f8aa:	b007      	add	sp, #28
    f8ac:	bd90      	pop	{r4, r7, pc}
    f8ae:	46c0      	nop			; (mov r8, r8)
    f8b0:	0000ef8d 	.word	0x0000ef8d
    f8b4:	0000f1a1 	.word	0x0000f1a1
    f8b8:	0000edd5 	.word	0x0000edd5
    f8bc:	0000eaef 	.word	0x0000eaef

0000f8c0 <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
    f8c0:	b580      	push	{r7, lr}
    f8c2:	b086      	sub	sp, #24
    f8c4:	af00      	add	r7, sp, #0
    f8c6:	6078      	str	r0, [r7, #4]
    f8c8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
    f8ca:	687b      	ldr	r3, [r7, #4]
    f8cc:	681b      	ldr	r3, [r3, #0]
    f8ce:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
    f8d0:	683b      	ldr	r3, [r7, #0]
    f8d2:	4a3a      	ldr	r2, [pc, #232]	; (f9bc <dir_sdi+0xfc>)
    f8d4:	4293      	cmp	r3, r2
    f8d6:	d803      	bhi.n	f8e0 <dir_sdi+0x20>
    f8d8:	683b      	ldr	r3, [r7, #0]
    f8da:	221f      	movs	r2, #31
    f8dc:	4013      	ands	r3, r2
    f8de:	d001      	beq.n	f8e4 <dir_sdi+0x24>
		return FR_INT_ERR;
    f8e0:	2302      	movs	r3, #2
    f8e2:	e066      	b.n	f9b2 <dir_sdi+0xf2>
	}
	dp->dptr = ofs;				/* Set current offset */
    f8e4:	687b      	ldr	r3, [r7, #4]
    f8e6:	683a      	ldr	r2, [r7, #0]
    f8e8:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
    f8ea:	687b      	ldr	r3, [r7, #4]
    f8ec:	689b      	ldr	r3, [r3, #8]
    f8ee:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
    f8f0:	697b      	ldr	r3, [r7, #20]
    f8f2:	2b00      	cmp	r3, #0
    f8f4:	d106      	bne.n	f904 <dir_sdi+0x44>
    f8f6:	693b      	ldr	r3, [r7, #16]
    f8f8:	781b      	ldrb	r3, [r3, #0]
    f8fa:	2b02      	cmp	r3, #2
    f8fc:	d902      	bls.n	f904 <dir_sdi+0x44>
		clst = fs->dirbase;
    f8fe:	693b      	ldr	r3, [r7, #16]
    f900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f902:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
    f904:	697b      	ldr	r3, [r7, #20]
    f906:	2b00      	cmp	r3, #0
    f908:	d10c      	bne.n	f924 <dir_sdi+0x64>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
    f90a:	683b      	ldr	r3, [r7, #0]
    f90c:	095b      	lsrs	r3, r3, #5
    f90e:	693a      	ldr	r2, [r7, #16]
    f910:	8912      	ldrh	r2, [r2, #8]
    f912:	4293      	cmp	r3, r2
    f914:	d301      	bcc.n	f91a <dir_sdi+0x5a>
    f916:	2302      	movs	r3, #2
    f918:	e04b      	b.n	f9b2 <dir_sdi+0xf2>
		dp->sect = fs->dirbase;
    f91a:	693b      	ldr	r3, [r7, #16]
    f91c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f91e:	687b      	ldr	r3, [r7, #4]
    f920:	619a      	str	r2, [r3, #24]
    f922:	e02c      	b.n	f97e <dir_sdi+0xbe>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
    f924:	693b      	ldr	r3, [r7, #16]
    f926:	895b      	ldrh	r3, [r3, #10]
    f928:	025b      	lsls	r3, r3, #9
    f92a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
    f92c:	e01a      	b.n	f964 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
    f92e:	687b      	ldr	r3, [r7, #4]
    f930:	697a      	ldr	r2, [r7, #20]
    f932:	0011      	movs	r1, r2
    f934:	0018      	movs	r0, r3
    f936:	4b22      	ldr	r3, [pc, #136]	; (f9c0 <dir_sdi+0x100>)
    f938:	4798      	blx	r3
    f93a:	0003      	movs	r3, r0
    f93c:	617b      	str	r3, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    f93e:	697b      	ldr	r3, [r7, #20]
    f940:	3301      	adds	r3, #1
    f942:	d101      	bne.n	f948 <dir_sdi+0x88>
    f944:	2301      	movs	r3, #1
    f946:	e034      	b.n	f9b2 <dir_sdi+0xf2>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
    f948:	697b      	ldr	r3, [r7, #20]
    f94a:	2b01      	cmp	r3, #1
    f94c:	d904      	bls.n	f958 <dir_sdi+0x98>
    f94e:	693b      	ldr	r3, [r7, #16]
    f950:	699a      	ldr	r2, [r3, #24]
    f952:	697b      	ldr	r3, [r7, #20]
    f954:	429a      	cmp	r2, r3
    f956:	d801      	bhi.n	f95c <dir_sdi+0x9c>
    f958:	2302      	movs	r3, #2
    f95a:	e02a      	b.n	f9b2 <dir_sdi+0xf2>
			ofs -= csz;
    f95c:	683a      	ldr	r2, [r7, #0]
    f95e:	68fb      	ldr	r3, [r7, #12]
    f960:	1ad3      	subs	r3, r2, r3
    f962:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
    f964:	683a      	ldr	r2, [r7, #0]
    f966:	68fb      	ldr	r3, [r7, #12]
    f968:	429a      	cmp	r2, r3
    f96a:	d2e0      	bcs.n	f92e <dir_sdi+0x6e>
		}
		dp->sect = clst2sect(fs, clst);
    f96c:	697a      	ldr	r2, [r7, #20]
    f96e:	693b      	ldr	r3, [r7, #16]
    f970:	0011      	movs	r1, r2
    f972:	0018      	movs	r0, r3
    f974:	4b13      	ldr	r3, [pc, #76]	; (f9c4 <dir_sdi+0x104>)
    f976:	4798      	blx	r3
    f978:	0002      	movs	r2, r0
    f97a:	687b      	ldr	r3, [r7, #4]
    f97c:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
    f97e:	687b      	ldr	r3, [r7, #4]
    f980:	697a      	ldr	r2, [r7, #20]
    f982:	615a      	str	r2, [r3, #20]
	if (dp->sect == 0) return FR_INT_ERR;
    f984:	687b      	ldr	r3, [r7, #4]
    f986:	699b      	ldr	r3, [r3, #24]
    f988:	2b00      	cmp	r3, #0
    f98a:	d101      	bne.n	f990 <dir_sdi+0xd0>
    f98c:	2302      	movs	r3, #2
    f98e:	e010      	b.n	f9b2 <dir_sdi+0xf2>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
    f990:	687b      	ldr	r3, [r7, #4]
    f992:	699a      	ldr	r2, [r3, #24]
    f994:	683b      	ldr	r3, [r7, #0]
    f996:	0a5b      	lsrs	r3, r3, #9
    f998:	18d2      	adds	r2, r2, r3
    f99a:	687b      	ldr	r3, [r7, #4]
    f99c:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
    f99e:	693b      	ldr	r3, [r7, #16]
    f9a0:	3334      	adds	r3, #52	; 0x34
    f9a2:	001a      	movs	r2, r3
    f9a4:	683b      	ldr	r3, [r7, #0]
    f9a6:	05db      	lsls	r3, r3, #23
    f9a8:	0ddb      	lsrs	r3, r3, #23
    f9aa:	18d2      	adds	r2, r2, r3
    f9ac:	687b      	ldr	r3, [r7, #4]
    f9ae:	61da      	str	r2, [r3, #28]

	return FR_OK;
    f9b0:	2300      	movs	r3, #0
}
    f9b2:	0018      	movs	r0, r3
    f9b4:	46bd      	mov	sp, r7
    f9b6:	b006      	add	sp, #24
    f9b8:	bd80      	pop	{r7, pc}
    f9ba:	46c0      	nop			; (mov r8, r8)
    f9bc:	001fffff 	.word	0x001fffff
    f9c0:	0000f1d9 	.word	0x0000f1d9
    f9c4:	0000f1a1 	.word	0x0000f1a1

0000f9c8 <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    f9c8:	b580      	push	{r7, lr}
    f9ca:	b086      	sub	sp, #24
    f9cc:	af00      	add	r7, sp, #0
    f9ce:	6078      	str	r0, [r7, #4]
    f9d0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
    f9d2:	687b      	ldr	r3, [r7, #4]
    f9d4:	681b      	ldr	r3, [r3, #0]
    f9d6:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
    f9d8:	687b      	ldr	r3, [r7, #4]
    f9da:	691b      	ldr	r3, [r3, #16]
    f9dc:	3320      	adds	r3, #32
    f9de:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
    f9e0:	68fb      	ldr	r3, [r7, #12]
    f9e2:	4a45      	ldr	r2, [pc, #276]	; (faf8 <dir_next+0x130>)
    f9e4:	4293      	cmp	r3, r2
    f9e6:	d902      	bls.n	f9ee <dir_next+0x26>
    f9e8:	687b      	ldr	r3, [r7, #4]
    f9ea:	2200      	movs	r2, #0
    f9ec:	619a      	str	r2, [r3, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
    f9ee:	687b      	ldr	r3, [r7, #4]
    f9f0:	699b      	ldr	r3, [r3, #24]
    f9f2:	2b00      	cmp	r3, #0
    f9f4:	d101      	bne.n	f9fa <dir_next+0x32>
    f9f6:	2304      	movs	r3, #4
    f9f8:	e07a      	b.n	faf0 <dir_next+0x128>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
    f9fa:	68fb      	ldr	r3, [r7, #12]
    f9fc:	05db      	lsls	r3, r3, #23
    f9fe:	0ddb      	lsrs	r3, r3, #23
    fa00:	d000      	beq.n	fa04 <dir_next+0x3c>
    fa02:	e068      	b.n	fad6 <dir_next+0x10e>
		dp->sect++;				/* Next sector */
    fa04:	687b      	ldr	r3, [r7, #4]
    fa06:	699b      	ldr	r3, [r3, #24]
    fa08:	1c5a      	adds	r2, r3, #1
    fa0a:	687b      	ldr	r3, [r7, #4]
    fa0c:	619a      	str	r2, [r3, #24]

		if (dp->clust == 0) {	/* Static table */
    fa0e:	687b      	ldr	r3, [r7, #4]
    fa10:	695b      	ldr	r3, [r3, #20]
    fa12:	2b00      	cmp	r3, #0
    fa14:	d10a      	bne.n	fa2c <dir_next+0x64>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
    fa16:	68fb      	ldr	r3, [r7, #12]
    fa18:	095b      	lsrs	r3, r3, #5
    fa1a:	693a      	ldr	r2, [r7, #16]
    fa1c:	8912      	ldrh	r2, [r2, #8]
    fa1e:	4293      	cmp	r3, r2
    fa20:	d359      	bcc.n	fad6 <dir_next+0x10e>
				dp->sect = 0; return FR_NO_FILE;
    fa22:	687b      	ldr	r3, [r7, #4]
    fa24:	2200      	movs	r2, #0
    fa26:	619a      	str	r2, [r3, #24]
    fa28:	2304      	movs	r3, #4
    fa2a:	e061      	b.n	faf0 <dir_next+0x128>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
    fa2c:	68fb      	ldr	r3, [r7, #12]
    fa2e:	0a5b      	lsrs	r3, r3, #9
    fa30:	693a      	ldr	r2, [r7, #16]
    fa32:	8952      	ldrh	r2, [r2, #10]
    fa34:	3a01      	subs	r2, #1
    fa36:	4013      	ands	r3, r2
    fa38:	d14d      	bne.n	fad6 <dir_next+0x10e>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
    fa3a:	687a      	ldr	r2, [r7, #4]
    fa3c:	687b      	ldr	r3, [r7, #4]
    fa3e:	695b      	ldr	r3, [r3, #20]
    fa40:	0019      	movs	r1, r3
    fa42:	0010      	movs	r0, r2
    fa44:	4b2d      	ldr	r3, [pc, #180]	; (fafc <dir_next+0x134>)
    fa46:	4798      	blx	r3
    fa48:	0003      	movs	r3, r0
    fa4a:	617b      	str	r3, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
    fa4c:	697b      	ldr	r3, [r7, #20]
    fa4e:	2b01      	cmp	r3, #1
    fa50:	d801      	bhi.n	fa56 <dir_next+0x8e>
    fa52:	2302      	movs	r3, #2
    fa54:	e04c      	b.n	faf0 <dir_next+0x128>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    fa56:	697b      	ldr	r3, [r7, #20]
    fa58:	3301      	adds	r3, #1
    fa5a:	d101      	bne.n	fa60 <dir_next+0x98>
    fa5c:	2301      	movs	r3, #1
    fa5e:	e047      	b.n	faf0 <dir_next+0x128>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
    fa60:	693b      	ldr	r3, [r7, #16]
    fa62:	699a      	ldr	r2, [r3, #24]
    fa64:	697b      	ldr	r3, [r7, #20]
    fa66:	429a      	cmp	r2, r3
    fa68:	d829      	bhi.n	fabe <dir_next+0xf6>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
    fa6a:	683b      	ldr	r3, [r7, #0]
    fa6c:	2b00      	cmp	r3, #0
    fa6e:	d104      	bne.n	fa7a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
    fa70:	687b      	ldr	r3, [r7, #4]
    fa72:	2200      	movs	r2, #0
    fa74:	619a      	str	r2, [r3, #24]
    fa76:	2304      	movs	r3, #4
    fa78:	e03a      	b.n	faf0 <dir_next+0x128>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
    fa7a:	687a      	ldr	r2, [r7, #4]
    fa7c:	687b      	ldr	r3, [r7, #4]
    fa7e:	695b      	ldr	r3, [r3, #20]
    fa80:	0019      	movs	r1, r3
    fa82:	0010      	movs	r0, r2
    fa84:	4b1e      	ldr	r3, [pc, #120]	; (fb00 <dir_next+0x138>)
    fa86:	4798      	blx	r3
    fa88:	0003      	movs	r3, r0
    fa8a:	617b      	str	r3, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    fa8c:	697b      	ldr	r3, [r7, #20]
    fa8e:	2b00      	cmp	r3, #0
    fa90:	d101      	bne.n	fa96 <dir_next+0xce>
    fa92:	2307      	movs	r3, #7
    fa94:	e02c      	b.n	faf0 <dir_next+0x128>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
    fa96:	697b      	ldr	r3, [r7, #20]
    fa98:	2b01      	cmp	r3, #1
    fa9a:	d101      	bne.n	faa0 <dir_next+0xd8>
    fa9c:	2302      	movs	r3, #2
    fa9e:	e027      	b.n	faf0 <dir_next+0x128>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    faa0:	697b      	ldr	r3, [r7, #20]
    faa2:	3301      	adds	r3, #1
    faa4:	d101      	bne.n	faaa <dir_next+0xe2>
    faa6:	2301      	movs	r3, #1
    faa8:	e022      	b.n	faf0 <dir_next+0x128>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
    faaa:	697a      	ldr	r2, [r7, #20]
    faac:	693b      	ldr	r3, [r7, #16]
    faae:	0011      	movs	r1, r2
    fab0:	0018      	movs	r0, r3
    fab2:	4b14      	ldr	r3, [pc, #80]	; (fb04 <dir_next+0x13c>)
    fab4:	4798      	blx	r3
    fab6:	1e03      	subs	r3, r0, #0
    fab8:	d001      	beq.n	fabe <dir_next+0xf6>
    faba:	2301      	movs	r3, #1
    fabc:	e018      	b.n	faf0 <dir_next+0x128>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
    fabe:	687b      	ldr	r3, [r7, #4]
    fac0:	697a      	ldr	r2, [r7, #20]
    fac2:	615a      	str	r2, [r3, #20]
				dp->sect = clst2sect(fs, clst);
    fac4:	697a      	ldr	r2, [r7, #20]
    fac6:	693b      	ldr	r3, [r7, #16]
    fac8:	0011      	movs	r1, r2
    faca:	0018      	movs	r0, r3
    facc:	4b0e      	ldr	r3, [pc, #56]	; (fb08 <dir_next+0x140>)
    face:	4798      	blx	r3
    fad0:	0002      	movs	r2, r0
    fad2:	687b      	ldr	r3, [r7, #4]
    fad4:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
    fad6:	687b      	ldr	r3, [r7, #4]
    fad8:	68fa      	ldr	r2, [r7, #12]
    fada:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
    fadc:	693b      	ldr	r3, [r7, #16]
    fade:	3334      	adds	r3, #52	; 0x34
    fae0:	001a      	movs	r2, r3
    fae2:	68fb      	ldr	r3, [r7, #12]
    fae4:	05db      	lsls	r3, r3, #23
    fae6:	0ddb      	lsrs	r3, r3, #23
    fae8:	18d2      	adds	r2, r2, r3
    faea:	687b      	ldr	r3, [r7, #4]
    faec:	61da      	str	r2, [r3, #28]

	return FR_OK;
    faee:	2300      	movs	r3, #0
}
    faf0:	0018      	movs	r0, r3
    faf2:	46bd      	mov	sp, r7
    faf4:	b006      	add	sp, #24
    faf6:	bd80      	pop	{r7, pc}
    faf8:	001fffff 	.word	0x001fffff
    fafc:	0000f1d9 	.word	0x0000f1d9
    fb00:	0000f649 	.word	0x0000f649
    fb04:	0000f819 	.word	0x0000f819
    fb08:	0000f1a1 	.word	0x0000f1a1

0000fb0c <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT nent				/* Number of contiguous entries to allocate */
)
{
    fb0c:	b590      	push	{r4, r7, lr}
    fb0e:	b087      	sub	sp, #28
    fb10:	af00      	add	r7, sp, #0
    fb12:	6078      	str	r0, [r7, #4]
    fb14:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
    fb16:	687b      	ldr	r3, [r7, #4]
    fb18:	681b      	ldr	r3, [r3, #0]
    fb1a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
    fb1c:	2317      	movs	r3, #23
    fb1e:	18fc      	adds	r4, r7, r3
    fb20:	687b      	ldr	r3, [r7, #4]
    fb22:	2100      	movs	r1, #0
    fb24:	0018      	movs	r0, r3
    fb26:	4b27      	ldr	r3, [pc, #156]	; (fbc4 <dir_alloc+0xb8>)
    fb28:	4798      	blx	r3
    fb2a:	0003      	movs	r3, r0
    fb2c:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    fb2e:	2317      	movs	r3, #23
    fb30:	18fb      	adds	r3, r7, r3
    fb32:	781b      	ldrb	r3, [r3, #0]
    fb34:	2b00      	cmp	r3, #0
    fb36:	d135      	bne.n	fba4 <dir_alloc+0x98>
		n = 0;
    fb38:	2300      	movs	r3, #0
    fb3a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
    fb3c:	687b      	ldr	r3, [r7, #4]
    fb3e:	699a      	ldr	r2, [r3, #24]
    fb40:	2317      	movs	r3, #23
    fb42:	18fc      	adds	r4, r7, r3
    fb44:	68fb      	ldr	r3, [r7, #12]
    fb46:	0011      	movs	r1, r2
    fb48:	0018      	movs	r0, r3
    fb4a:	4b1f      	ldr	r3, [pc, #124]	; (fbc8 <dir_alloc+0xbc>)
    fb4c:	4798      	blx	r3
    fb4e:	0003      	movs	r3, r0
    fb50:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    fb52:	2317      	movs	r3, #23
    fb54:	18fb      	adds	r3, r7, r3
    fb56:	781b      	ldrb	r3, [r3, #0]
    fb58:	2b00      	cmp	r3, #0
    fb5a:	d122      	bne.n	fba2 <dir_alloc+0x96>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
    fb5c:	687b      	ldr	r3, [r7, #4]
    fb5e:	69db      	ldr	r3, [r3, #28]
    fb60:	781b      	ldrb	r3, [r3, #0]
    fb62:	2be5      	cmp	r3, #229	; 0xe5
    fb64:	d004      	beq.n	fb70 <dir_alloc+0x64>
    fb66:	687b      	ldr	r3, [r7, #4]
    fb68:	69db      	ldr	r3, [r3, #28]
    fb6a:	781b      	ldrb	r3, [r3, #0]
    fb6c:	2b00      	cmp	r3, #0
    fb6e:	d107      	bne.n	fb80 <dir_alloc+0x74>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
    fb70:	693b      	ldr	r3, [r7, #16]
    fb72:	3301      	adds	r3, #1
    fb74:	613b      	str	r3, [r7, #16]
    fb76:	693a      	ldr	r2, [r7, #16]
    fb78:	683b      	ldr	r3, [r7, #0]
    fb7a:	429a      	cmp	r2, r3
    fb7c:	d102      	bne.n	fb84 <dir_alloc+0x78>
    fb7e:	e011      	b.n	fba4 <dir_alloc+0x98>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
    fb80:	2300      	movs	r3, #0
    fb82:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
    fb84:	2317      	movs	r3, #23
    fb86:	18fc      	adds	r4, r7, r3
    fb88:	687b      	ldr	r3, [r7, #4]
    fb8a:	2101      	movs	r1, #1
    fb8c:	0018      	movs	r0, r3
    fb8e:	4b0f      	ldr	r3, [pc, #60]	; (fbcc <dir_alloc+0xc0>)
    fb90:	4798      	blx	r3
    fb92:	0003      	movs	r3, r0
    fb94:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
    fb96:	2317      	movs	r3, #23
    fb98:	18fb      	adds	r3, r7, r3
    fb9a:	781b      	ldrb	r3, [r3, #0]
    fb9c:	2b00      	cmp	r3, #0
    fb9e:	d0cd      	beq.n	fb3c <dir_alloc+0x30>
    fba0:	e000      	b.n	fba4 <dir_alloc+0x98>
			if (res != FR_OK) break;
    fba2:	46c0      	nop			; (mov r8, r8)
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
    fba4:	2317      	movs	r3, #23
    fba6:	18fb      	adds	r3, r7, r3
    fba8:	781b      	ldrb	r3, [r3, #0]
    fbaa:	2b04      	cmp	r3, #4
    fbac:	d103      	bne.n	fbb6 <dir_alloc+0xaa>
    fbae:	2317      	movs	r3, #23
    fbb0:	18fb      	adds	r3, r7, r3
    fbb2:	2207      	movs	r2, #7
    fbb4:	701a      	strb	r2, [r3, #0]
	return res;
    fbb6:	2317      	movs	r3, #23
    fbb8:	18fb      	adds	r3, r7, r3
    fbba:	781b      	ldrb	r3, [r3, #0]
}
    fbbc:	0018      	movs	r0, r3
    fbbe:	46bd      	mov	sp, r7
    fbc0:	b007      	add	sp, #28
    fbc2:	bd90      	pop	{r4, r7, pc}
    fbc4:	0000f8c1 	.word	0x0000f8c1
    fbc8:	0000f015 	.word	0x0000f015
    fbcc:	0000f9c9 	.word	0x0000f9c9

0000fbd0 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
    fbd0:	b580      	push	{r7, lr}
    fbd2:	b084      	sub	sp, #16
    fbd4:	af00      	add	r7, sp, #0
    fbd6:	6078      	str	r0, [r7, #4]
    fbd8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
    fbda:	683b      	ldr	r3, [r7, #0]
    fbdc:	331a      	adds	r3, #26
    fbde:	0018      	movs	r0, r3
    fbe0:	4b0b      	ldr	r3, [pc, #44]	; (fc10 <ld_clust+0x40>)
    fbe2:	4798      	blx	r3
    fbe4:	0003      	movs	r3, r0
    fbe6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
    fbe8:	687b      	ldr	r3, [r7, #4]
    fbea:	781b      	ldrb	r3, [r3, #0]
    fbec:	2b03      	cmp	r3, #3
    fbee:	d109      	bne.n	fc04 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
    fbf0:	683b      	ldr	r3, [r7, #0]
    fbf2:	3314      	adds	r3, #20
    fbf4:	0018      	movs	r0, r3
    fbf6:	4b06      	ldr	r3, [pc, #24]	; (fc10 <ld_clust+0x40>)
    fbf8:	4798      	blx	r3
    fbfa:	0003      	movs	r3, r0
    fbfc:	041b      	lsls	r3, r3, #16
    fbfe:	68fa      	ldr	r2, [r7, #12]
    fc00:	4313      	orrs	r3, r2
    fc02:	60fb      	str	r3, [r7, #12]
	}

	return cl;
    fc04:	68fb      	ldr	r3, [r7, #12]
}
    fc06:	0018      	movs	r0, r3
    fc08:	46bd      	mov	sp, r7
    fc0a:	b004      	add	sp, #16
    fc0c:	bd80      	pop	{r7, pc}
    fc0e:	46c0      	nop			; (mov r8, r8)
    fc10:	0000ec89 	.word	0x0000ec89

0000fc14 <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
    fc14:	b580      	push	{r7, lr}
    fc16:	b084      	sub	sp, #16
    fc18:	af00      	add	r7, sp, #0
    fc1a:	60f8      	str	r0, [r7, #12]
    fc1c:	60b9      	str	r1, [r7, #8]
    fc1e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
    fc20:	68bb      	ldr	r3, [r7, #8]
    fc22:	331a      	adds	r3, #26
    fc24:	687a      	ldr	r2, [r7, #4]
    fc26:	b292      	uxth	r2, r2
    fc28:	0011      	movs	r1, r2
    fc2a:	0018      	movs	r0, r3
    fc2c:	4b09      	ldr	r3, [pc, #36]	; (fc54 <st_clust+0x40>)
    fc2e:	4798      	blx	r3
	if (fs->fs_type == FS_FAT32) {
    fc30:	68fb      	ldr	r3, [r7, #12]
    fc32:	781b      	ldrb	r3, [r3, #0]
    fc34:	2b03      	cmp	r3, #3
    fc36:	d109      	bne.n	fc4c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
    fc38:	68bb      	ldr	r3, [r7, #8]
    fc3a:	3314      	adds	r3, #20
    fc3c:	001a      	movs	r2, r3
    fc3e:	687b      	ldr	r3, [r7, #4]
    fc40:	0c1b      	lsrs	r3, r3, #16
    fc42:	b29b      	uxth	r3, r3
    fc44:	0019      	movs	r1, r3
    fc46:	0010      	movs	r0, r2
    fc48:	4b02      	ldr	r3, [pc, #8]	; (fc54 <st_clust+0x40>)
    fc4a:	4798      	blx	r3
	}
}
    fc4c:	46c0      	nop			; (mov r8, r8)
    fc4e:	46bd      	mov	sp, r7
    fc50:	b004      	add	sp, #16
    fc52:	bd80      	pop	{r7, pc}
    fc54:	0000ed07 	.word	0x0000ed07

0000fc58 <cmp_lfn>:

static int cmp_lfn (		/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
    fc58:	b590      	push	{r4, r7, lr}
    fc5a:	b087      	sub	sp, #28
    fc5c:	af00      	add	r7, sp, #0
    fc5e:	6078      	str	r0, [r7, #4]
    fc60:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
    fc62:	683b      	ldr	r3, [r7, #0]
    fc64:	331a      	adds	r3, #26
    fc66:	0018      	movs	r0, r3
    fc68:	4b39      	ldr	r3, [pc, #228]	; (fd50 <cmp_lfn+0xf8>)
    fc6a:	4798      	blx	r3
    fc6c:	1e03      	subs	r3, r0, #0
    fc6e:	d001      	beq.n	fc74 <cmp_lfn+0x1c>
    fc70:	2300      	movs	r3, #0
    fc72:	e068      	b.n	fd46 <cmp_lfn+0xee>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
    fc74:	683b      	ldr	r3, [r7, #0]
    fc76:	781b      	ldrb	r3, [r3, #0]
    fc78:	001a      	movs	r2, r3
    fc7a:	233f      	movs	r3, #63	; 0x3f
    fc7c:	4013      	ands	r3, r2
    fc7e:	1e5a      	subs	r2, r3, #1
    fc80:	0013      	movs	r3, r2
    fc82:	005b      	lsls	r3, r3, #1
    fc84:	189b      	adds	r3, r3, r2
    fc86:	009b      	lsls	r3, r3, #2
    fc88:	189b      	adds	r3, r3, r2
    fc8a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
    fc8c:	230e      	movs	r3, #14
    fc8e:	18fb      	adds	r3, r7, r3
    fc90:	2201      	movs	r2, #1
    fc92:	801a      	strh	r2, [r3, #0]
    fc94:	2300      	movs	r3, #0
    fc96:	613b      	str	r3, [r7, #16]
    fc98:	e03d      	b.n	fd16 <cmp_lfn+0xbe>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
    fc9a:	4a2e      	ldr	r2, [pc, #184]	; (fd54 <cmp_lfn+0xfc>)
    fc9c:	693b      	ldr	r3, [r7, #16]
    fc9e:	18d3      	adds	r3, r2, r3
    fca0:	781b      	ldrb	r3, [r3, #0]
    fca2:	001a      	movs	r2, r3
    fca4:	683b      	ldr	r3, [r7, #0]
    fca6:	189b      	adds	r3, r3, r2
    fca8:	220c      	movs	r2, #12
    fcaa:	18bc      	adds	r4, r7, r2
    fcac:	0018      	movs	r0, r3
    fcae:	4b28      	ldr	r3, [pc, #160]	; (fd50 <cmp_lfn+0xf8>)
    fcb0:	4798      	blx	r3
    fcb2:	0003      	movs	r3, r0
    fcb4:	8023      	strh	r3, [r4, #0]
		if (wc != 0) {
    fcb6:	230e      	movs	r3, #14
    fcb8:	18fb      	adds	r3, r7, r3
    fcba:	881b      	ldrh	r3, [r3, #0]
    fcbc:	2b00      	cmp	r3, #0
    fcbe:	d01f      	beq.n	fd00 <cmp_lfn+0xa8>
			if (i >= FF_MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
    fcc0:	697b      	ldr	r3, [r7, #20]
    fcc2:	2bfe      	cmp	r3, #254	; 0xfe
    fcc4:	d813      	bhi.n	fcee <cmp_lfn+0x96>
    fcc6:	230c      	movs	r3, #12
    fcc8:	18fb      	adds	r3, r7, r3
    fcca:	881b      	ldrh	r3, [r3, #0]
    fccc:	0018      	movs	r0, r3
    fcce:	4b22      	ldr	r3, [pc, #136]	; (fd58 <cmp_lfn+0x100>)
    fcd0:	4798      	blx	r3
    fcd2:	0004      	movs	r4, r0
    fcd4:	697b      	ldr	r3, [r7, #20]
    fcd6:	1c5a      	adds	r2, r3, #1
    fcd8:	617a      	str	r2, [r7, #20]
    fcda:	005b      	lsls	r3, r3, #1
    fcdc:	687a      	ldr	r2, [r7, #4]
    fcde:	18d3      	adds	r3, r2, r3
    fce0:	881b      	ldrh	r3, [r3, #0]
    fce2:	0018      	movs	r0, r3
    fce4:	4b1c      	ldr	r3, [pc, #112]	; (fd58 <cmp_lfn+0x100>)
    fce6:	4798      	blx	r3
    fce8:	0003      	movs	r3, r0
    fcea:	429c      	cmp	r4, r3
    fcec:	d001      	beq.n	fcf2 <cmp_lfn+0x9a>
				return 0;					/* Not matched */
    fcee:	2300      	movs	r3, #0
    fcf0:	e029      	b.n	fd46 <cmp_lfn+0xee>
			}
			wc = uc;
    fcf2:	230e      	movs	r3, #14
    fcf4:	18fb      	adds	r3, r7, r3
    fcf6:	220c      	movs	r2, #12
    fcf8:	18ba      	adds	r2, r7, r2
    fcfa:	8812      	ldrh	r2, [r2, #0]
    fcfc:	801a      	strh	r2, [r3, #0]
    fcfe:	e007      	b.n	fd10 <cmp_lfn+0xb8>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
    fd00:	230c      	movs	r3, #12
    fd02:	18fb      	adds	r3, r7, r3
    fd04:	881b      	ldrh	r3, [r3, #0]
    fd06:	4a15      	ldr	r2, [pc, #84]	; (fd5c <cmp_lfn+0x104>)
    fd08:	4293      	cmp	r3, r2
    fd0a:	d001      	beq.n	fd10 <cmp_lfn+0xb8>
    fd0c:	2300      	movs	r3, #0
    fd0e:	e01a      	b.n	fd46 <cmp_lfn+0xee>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
    fd10:	693b      	ldr	r3, [r7, #16]
    fd12:	3301      	adds	r3, #1
    fd14:	613b      	str	r3, [r7, #16]
    fd16:	693b      	ldr	r3, [r7, #16]
    fd18:	2b0c      	cmp	r3, #12
    fd1a:	d9be      	bls.n	fc9a <cmp_lfn+0x42>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
    fd1c:	683b      	ldr	r3, [r7, #0]
    fd1e:	781b      	ldrb	r3, [r3, #0]
    fd20:	001a      	movs	r2, r3
    fd22:	2340      	movs	r3, #64	; 0x40
    fd24:	4013      	ands	r3, r2
    fd26:	d00d      	beq.n	fd44 <cmp_lfn+0xec>
    fd28:	230e      	movs	r3, #14
    fd2a:	18fb      	adds	r3, r7, r3
    fd2c:	881b      	ldrh	r3, [r3, #0]
    fd2e:	2b00      	cmp	r3, #0
    fd30:	d008      	beq.n	fd44 <cmp_lfn+0xec>
    fd32:	697b      	ldr	r3, [r7, #20]
    fd34:	005b      	lsls	r3, r3, #1
    fd36:	687a      	ldr	r2, [r7, #4]
    fd38:	18d3      	adds	r3, r2, r3
    fd3a:	881b      	ldrh	r3, [r3, #0]
    fd3c:	2b00      	cmp	r3, #0
    fd3e:	d001      	beq.n	fd44 <cmp_lfn+0xec>
    fd40:	2300      	movs	r3, #0
    fd42:	e000      	b.n	fd46 <cmp_lfn+0xee>

	return 1;		/* The part of LFN matched */
    fd44:	2301      	movs	r3, #1
}
    fd46:	0018      	movs	r0, r3
    fd48:	46bd      	mov	sp, r7
    fd4a:	b007      	add	sp, #28
    fd4c:	bd90      	pop	{r4, r7, pc}
    fd4e:	46c0      	nop			; (mov r8, r8)
    fd50:	0000ec89 	.word	0x0000ec89
    fd54:	0002588c 	.word	0x0002588c
    fd58:	00011fa9 	.word	0x00011fa9
    fd5c:	0000ffff 	.word	0x0000ffff

0000fd60 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
    fd60:	b580      	push	{r7, lr}
    fd62:	b088      	sub	sp, #32
    fd64:	af00      	add	r7, sp, #0
    fd66:	60f8      	str	r0, [r7, #12]
    fd68:	60b9      	str	r1, [r7, #8]
    fd6a:	0019      	movs	r1, r3
    fd6c:	1dfb      	adds	r3, r7, #7
    fd6e:	701a      	strb	r2, [r3, #0]
    fd70:	1dbb      	adds	r3, r7, #6
    fd72:	1c0a      	adds	r2, r1, #0
    fd74:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
    fd76:	68bb      	ldr	r3, [r7, #8]
    fd78:	330d      	adds	r3, #13
    fd7a:	1dba      	adds	r2, r7, #6
    fd7c:	7812      	ldrb	r2, [r2, #0]
    fd7e:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
    fd80:	68bb      	ldr	r3, [r7, #8]
    fd82:	330b      	adds	r3, #11
    fd84:	220f      	movs	r2, #15
    fd86:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
    fd88:	68bb      	ldr	r3, [r7, #8]
    fd8a:	330c      	adds	r3, #12
    fd8c:	2200      	movs	r2, #0
    fd8e:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
    fd90:	68bb      	ldr	r3, [r7, #8]
    fd92:	331a      	adds	r3, #26
    fd94:	2100      	movs	r1, #0
    fd96:	0018      	movs	r0, r3
    fd98:	4b2c      	ldr	r3, [pc, #176]	; (fe4c <put_lfn+0xec>)
    fd9a:	4798      	blx	r3

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
    fd9c:	1dfb      	adds	r3, r7, #7
    fd9e:	781b      	ldrb	r3, [r3, #0]
    fda0:	1e5a      	subs	r2, r3, #1
    fda2:	0013      	movs	r3, r2
    fda4:	005b      	lsls	r3, r3, #1
    fda6:	189b      	adds	r3, r3, r2
    fda8:	009b      	lsls	r3, r3, #2
    fdaa:	189b      	adds	r3, r3, r2
    fdac:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
    fdae:	2316      	movs	r3, #22
    fdb0:	18fb      	adds	r3, r7, r3
    fdb2:	2200      	movs	r2, #0
    fdb4:	801a      	strh	r2, [r3, #0]
    fdb6:	2300      	movs	r3, #0
    fdb8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
    fdba:	2316      	movs	r3, #22
    fdbc:	18fb      	adds	r3, r7, r3
    fdbe:	881b      	ldrh	r3, [r3, #0]
    fdc0:	4a23      	ldr	r2, [pc, #140]	; (fe50 <put_lfn+0xf0>)
    fdc2:	4293      	cmp	r3, r2
    fdc4:	d009      	beq.n	fdda <put_lfn+0x7a>
    fdc6:	69fb      	ldr	r3, [r7, #28]
    fdc8:	1c5a      	adds	r2, r3, #1
    fdca:	61fa      	str	r2, [r7, #28]
    fdcc:	005b      	lsls	r3, r3, #1
    fdce:	68fa      	ldr	r2, [r7, #12]
    fdd0:	18d2      	adds	r2, r2, r3
    fdd2:	2316      	movs	r3, #22
    fdd4:	18fb      	adds	r3, r7, r3
    fdd6:	8812      	ldrh	r2, [r2, #0]
    fdd8:	801a      	strh	r2, [r3, #0]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
    fdda:	4a1e      	ldr	r2, [pc, #120]	; (fe54 <put_lfn+0xf4>)
    fddc:	69bb      	ldr	r3, [r7, #24]
    fdde:	18d3      	adds	r3, r2, r3
    fde0:	781b      	ldrb	r3, [r3, #0]
    fde2:	001a      	movs	r2, r3
    fde4:	68bb      	ldr	r3, [r7, #8]
    fde6:	189a      	adds	r2, r3, r2
    fde8:	2316      	movs	r3, #22
    fdea:	18fb      	adds	r3, r7, r3
    fdec:	881b      	ldrh	r3, [r3, #0]
    fdee:	0019      	movs	r1, r3
    fdf0:	0010      	movs	r0, r2
    fdf2:	4b16      	ldr	r3, [pc, #88]	; (fe4c <put_lfn+0xec>)
    fdf4:	4798      	blx	r3
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
    fdf6:	2316      	movs	r3, #22
    fdf8:	18fb      	adds	r3, r7, r3
    fdfa:	881b      	ldrh	r3, [r3, #0]
    fdfc:	2b00      	cmp	r3, #0
    fdfe:	d104      	bne.n	fe0a <put_lfn+0xaa>
    fe00:	2316      	movs	r3, #22
    fe02:	18fb      	adds	r3, r7, r3
    fe04:	2201      	movs	r2, #1
    fe06:	4252      	negs	r2, r2
    fe08:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
    fe0a:	69bb      	ldr	r3, [r7, #24]
    fe0c:	3301      	adds	r3, #1
    fe0e:	61bb      	str	r3, [r7, #24]
    fe10:	69bb      	ldr	r3, [r7, #24]
    fe12:	2b0c      	cmp	r3, #12
    fe14:	d9d1      	bls.n	fdba <put_lfn+0x5a>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
    fe16:	2316      	movs	r3, #22
    fe18:	18fb      	adds	r3, r7, r3
    fe1a:	881b      	ldrh	r3, [r3, #0]
    fe1c:	4a0c      	ldr	r2, [pc, #48]	; (fe50 <put_lfn+0xf0>)
    fe1e:	4293      	cmp	r3, r2
    fe20:	d006      	beq.n	fe30 <put_lfn+0xd0>
    fe22:	69fb      	ldr	r3, [r7, #28]
    fe24:	005b      	lsls	r3, r3, #1
    fe26:	68fa      	ldr	r2, [r7, #12]
    fe28:	18d3      	adds	r3, r2, r3
    fe2a:	881b      	ldrh	r3, [r3, #0]
    fe2c:	2b00      	cmp	r3, #0
    fe2e:	d105      	bne.n	fe3c <put_lfn+0xdc>
    fe30:	1dfb      	adds	r3, r7, #7
    fe32:	1dfa      	adds	r2, r7, #7
    fe34:	7812      	ldrb	r2, [r2, #0]
    fe36:	2140      	movs	r1, #64	; 0x40
    fe38:	430a      	orrs	r2, r1
    fe3a:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
    fe3c:	68bb      	ldr	r3, [r7, #8]
    fe3e:	1dfa      	adds	r2, r7, #7
    fe40:	7812      	ldrb	r2, [r2, #0]
    fe42:	701a      	strb	r2, [r3, #0]
}
    fe44:	46c0      	nop			; (mov r8, r8)
    fe46:	46bd      	mov	sp, r7
    fe48:	b008      	add	sp, #32
    fe4a:	bd80      	pop	{r7, pc}
    fe4c:	0000ed07 	.word	0x0000ed07
    fe50:	0000ffff 	.word	0x0000ffff
    fe54:	0002588c 	.word	0x0002588c

0000fe58 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
    fe58:	b580      	push	{r7, lr}
    fe5a:	b08c      	sub	sp, #48	; 0x30
    fe5c:	af00      	add	r7, sp, #0
    fe5e:	60f8      	str	r0, [r7, #12]
    fe60:	60b9      	str	r1, [r7, #8]
    fe62:	607a      	str	r2, [r7, #4]
    fe64:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
    fe66:	68b9      	ldr	r1, [r7, #8]
    fe68:	68fb      	ldr	r3, [r7, #12]
    fe6a:	220b      	movs	r2, #11
    fe6c:	0018      	movs	r0, r3
    fe6e:	4b4e      	ldr	r3, [pc, #312]	; (ffa8 <gen_numname+0x150>)
    fe70:	4798      	blx	r3

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
    fe72:	683b      	ldr	r3, [r7, #0]
    fe74:	2b05      	cmp	r3, #5
    fe76:	d931      	bls.n	fedc <gen_numname+0x84>
		sr = seq;
    fe78:	683b      	ldr	r3, [r7, #0]
    fe7a:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC as hash value */
    fe7c:	e028      	b.n	fed0 <gen_numname+0x78>
			wc = *lfn++;
    fe7e:	687b      	ldr	r3, [r7, #4]
    fe80:	1c9a      	adds	r2, r3, #2
    fe82:	607a      	str	r2, [r7, #4]
    fe84:	2222      	movs	r2, #34	; 0x22
    fe86:	18ba      	adds	r2, r7, r2
    fe88:	881b      	ldrh	r3, [r3, #0]
    fe8a:	8013      	strh	r3, [r2, #0]
			for (i = 0; i < 16; i++) {
    fe8c:	2300      	movs	r3, #0
    fe8e:	62bb      	str	r3, [r7, #40]	; 0x28
    fe90:	e01b      	b.n	feca <gen_numname+0x72>
				sr = (sr << 1) + (wc & 1);
    fe92:	69fb      	ldr	r3, [r7, #28]
    fe94:	005a      	lsls	r2, r3, #1
    fe96:	2322      	movs	r3, #34	; 0x22
    fe98:	18fb      	adds	r3, r7, r3
    fe9a:	881b      	ldrh	r3, [r3, #0]
    fe9c:	2101      	movs	r1, #1
    fe9e:	400b      	ands	r3, r1
    fea0:	18d3      	adds	r3, r2, r3
    fea2:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
    fea4:	2322      	movs	r3, #34	; 0x22
    fea6:	18fb      	adds	r3, r7, r3
    fea8:	2222      	movs	r2, #34	; 0x22
    feaa:	18ba      	adds	r2, r7, r2
    feac:	8812      	ldrh	r2, [r2, #0]
    feae:	0852      	lsrs	r2, r2, #1
    feb0:	801a      	strh	r2, [r3, #0]
				if (sr & 0x10000) sr ^= 0x11021;
    feb2:	69fa      	ldr	r2, [r7, #28]
    feb4:	2380      	movs	r3, #128	; 0x80
    feb6:	025b      	lsls	r3, r3, #9
    feb8:	4013      	ands	r3, r2
    feba:	d003      	beq.n	fec4 <gen_numname+0x6c>
    febc:	69fb      	ldr	r3, [r7, #28]
    febe:	4a3b      	ldr	r2, [pc, #236]	; (ffac <gen_numname+0x154>)
    fec0:	4053      	eors	r3, r2
    fec2:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
    fec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fec6:	3301      	adds	r3, #1
    fec8:	62bb      	str	r3, [r7, #40]	; 0x28
    feca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fecc:	2b0f      	cmp	r3, #15
    fece:	d9e0      	bls.n	fe92 <gen_numname+0x3a>
		while (*lfn) {	/* Create a CRC as hash value */
    fed0:	687b      	ldr	r3, [r7, #4]
    fed2:	881b      	ldrh	r3, [r3, #0]
    fed4:	2b00      	cmp	r3, #0
    fed6:	d1d2      	bne.n	fe7e <gen_numname+0x26>
			}
		}
		seq = (UINT)sr;
    fed8:	69fb      	ldr	r3, [r7, #28]
    feda:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
    fedc:	2307      	movs	r3, #7
    fede:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
    fee0:	683b      	ldr	r3, [r7, #0]
    fee2:	b2db      	uxtb	r3, r3
    fee4:	220f      	movs	r2, #15
    fee6:	4013      	ands	r3, r2
    fee8:	b2da      	uxtb	r2, r3
    feea:	232f      	movs	r3, #47	; 0x2f
    feec:	18fb      	adds	r3, r7, r3
    feee:	3230      	adds	r2, #48	; 0x30
    fef0:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
    fef2:	232f      	movs	r3, #47	; 0x2f
    fef4:	18fb      	adds	r3, r7, r3
    fef6:	781b      	ldrb	r3, [r3, #0]
    fef8:	2b39      	cmp	r3, #57	; 0x39
    fefa:	d906      	bls.n	ff0a <gen_numname+0xb2>
    fefc:	232f      	movs	r3, #47	; 0x2f
    fefe:	18fb      	adds	r3, r7, r3
    ff00:	222f      	movs	r2, #47	; 0x2f
    ff02:	18ba      	adds	r2, r7, r2
    ff04:	7812      	ldrb	r2, [r2, #0]
    ff06:	3207      	adds	r2, #7
    ff08:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
    ff0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ff0c:	1e5a      	subs	r2, r3, #1
    ff0e:	62ba      	str	r2, [r7, #40]	; 0x28
    ff10:	2214      	movs	r2, #20
    ff12:	18ba      	adds	r2, r7, r2
    ff14:	212f      	movs	r1, #47	; 0x2f
    ff16:	1879      	adds	r1, r7, r1
    ff18:	7809      	ldrb	r1, [r1, #0]
    ff1a:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
    ff1c:	683b      	ldr	r3, [r7, #0]
    ff1e:	091b      	lsrs	r3, r3, #4
    ff20:	603b      	str	r3, [r7, #0]
	} while (seq);
    ff22:	683b      	ldr	r3, [r7, #0]
    ff24:	2b00      	cmp	r3, #0
    ff26:	d1db      	bne.n	fee0 <gen_numname+0x88>
	ns[i] = '~';
    ff28:	2314      	movs	r3, #20
    ff2a:	18fa      	adds	r2, r7, r3
    ff2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ff2e:	18d3      	adds	r3, r2, r3
    ff30:	227e      	movs	r2, #126	; 0x7e
    ff32:	701a      	strb	r2, [r3, #0]

	/* Append the number to the SFN body */
	for (j = 0; j < i && dst[j] != ' '; j++) {
    ff34:	2300      	movs	r3, #0
    ff36:	627b      	str	r3, [r7, #36]	; 0x24
    ff38:	e014      	b.n	ff64 <gen_numname+0x10c>
		if (dbc_1st(dst[j])) {
    ff3a:	68fa      	ldr	r2, [r7, #12]
    ff3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ff3e:	18d3      	adds	r3, r2, r3
    ff40:	781b      	ldrb	r3, [r3, #0]
    ff42:	0018      	movs	r0, r3
    ff44:	4b1a      	ldr	r3, [pc, #104]	; (ffb0 <gen_numname+0x158>)
    ff46:	4798      	blx	r3
    ff48:	1e03      	subs	r3, r0, #0
    ff4a:	d008      	beq.n	ff5e <gen_numname+0x106>
			if (j == i - 1) break;
    ff4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ff4e:	1e5a      	subs	r2, r3, #1
    ff50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ff52:	429a      	cmp	r2, r3
    ff54:	d100      	bne.n	ff58 <gen_numname+0x100>
    ff56:	e00f      	b.n	ff78 <gen_numname+0x120>
			j++;
    ff58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ff5a:	3301      	adds	r3, #1
    ff5c:	627b      	str	r3, [r7, #36]	; 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {
    ff5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ff60:	3301      	adds	r3, #1
    ff62:	627b      	str	r3, [r7, #36]	; 0x24
    ff64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    ff66:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ff68:	429a      	cmp	r2, r3
    ff6a:	d205      	bcs.n	ff78 <gen_numname+0x120>
    ff6c:	68fa      	ldr	r2, [r7, #12]
    ff6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ff70:	18d3      	adds	r3, r2, r3
    ff72:	781b      	ldrb	r3, [r3, #0]
    ff74:	2b20      	cmp	r3, #32
    ff76:	d1e0      	bne.n	ff3a <gen_numname+0xe2>
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    ff78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ff7a:	1c5a      	adds	r2, r3, #1
    ff7c:	627a      	str	r2, [r7, #36]	; 0x24
    ff7e:	68fa      	ldr	r2, [r7, #12]
    ff80:	18d2      	adds	r2, r2, r3
    ff82:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ff84:	2b07      	cmp	r3, #7
    ff86:	d806      	bhi.n	ff96 <gen_numname+0x13e>
    ff88:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ff8a:	1c59      	adds	r1, r3, #1
    ff8c:	62b9      	str	r1, [r7, #40]	; 0x28
    ff8e:	2114      	movs	r1, #20
    ff90:	1879      	adds	r1, r7, r1
    ff92:	5ccb      	ldrb	r3, [r1, r3]
    ff94:	e000      	b.n	ff98 <gen_numname+0x140>
    ff96:	2320      	movs	r3, #32
    ff98:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
    ff9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ff9c:	2b07      	cmp	r3, #7
    ff9e:	d9eb      	bls.n	ff78 <gen_numname+0x120>
}
    ffa0:	46c0      	nop			; (mov r8, r8)
    ffa2:	46bd      	mov	sp, r7
    ffa4:	b00c      	add	sp, #48	; 0x30
    ffa6:	bd80      	pop	{r7, pc}
    ffa8:	0000ed97 	.word	0x0000ed97
    ffac:	00011021 	.word	0x00011021
    ffb0:	0000ee81 	.word	0x0000ee81

0000ffb4 <sum_sfn>:
/*-----------------------------------------------------------------------*/

static BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
    ffb4:	b580      	push	{r7, lr}
    ffb6:	b084      	sub	sp, #16
    ffb8:	af00      	add	r7, sp, #0
    ffba:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
    ffbc:	230f      	movs	r3, #15
    ffbe:	18fb      	adds	r3, r7, r3
    ffc0:	2200      	movs	r2, #0
    ffc2:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
    ffc4:	230b      	movs	r3, #11
    ffc6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
    ffc8:	230f      	movs	r3, #15
    ffca:	18fb      	adds	r3, r7, r3
    ffcc:	781b      	ldrb	r3, [r3, #0]
    ffce:	b2da      	uxtb	r2, r3
    ffd0:	0852      	lsrs	r2, r2, #1
    ffd2:	01db      	lsls	r3, r3, #7
    ffd4:	4313      	orrs	r3, r2
    ffd6:	b2d9      	uxtb	r1, r3
    ffd8:	687b      	ldr	r3, [r7, #4]
    ffda:	1c5a      	adds	r2, r3, #1
    ffdc:	607a      	str	r2, [r7, #4]
    ffde:	781a      	ldrb	r2, [r3, #0]
    ffe0:	230f      	movs	r3, #15
    ffe2:	18fb      	adds	r3, r7, r3
    ffe4:	188a      	adds	r2, r1, r2
    ffe6:	701a      	strb	r2, [r3, #0]
	} while (--n);
    ffe8:	68bb      	ldr	r3, [r7, #8]
    ffea:	3b01      	subs	r3, #1
    ffec:	60bb      	str	r3, [r7, #8]
    ffee:	68bb      	ldr	r3, [r7, #8]
    fff0:	2b00      	cmp	r3, #0
    fff2:	d1e9      	bne.n	ffc8 <sum_sfn+0x14>
	return sum;
    fff4:	230f      	movs	r3, #15
    fff6:	18fb      	adds	r3, r7, r3
    fff8:	781b      	ldrb	r3, [r3, #0]
}
    fffa:	0018      	movs	r0, r3
    fffc:	46bd      	mov	sp, r7
    fffe:	b004      	add	sp, #16
   10000:	bd80      	pop	{r7, pc}
	...

00010004 <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
   10004:	b590      	push	{r4, r7, lr}
   10006:	b087      	sub	sp, #28
   10008:	af00      	add	r7, sp, #0
   1000a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
   1000c:	687b      	ldr	r3, [r7, #4]
   1000e:	681b      	ldr	r3, [r3, #0]
   10010:	613b      	str	r3, [r7, #16]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
   10012:	2317      	movs	r3, #23
   10014:	18fc      	adds	r4, r7, r3
   10016:	687b      	ldr	r3, [r7, #4]
   10018:	2100      	movs	r1, #0
   1001a:	0018      	movs	r0, r3
   1001c:	4b7c      	ldr	r3, [pc, #496]	; (10210 <dir_find+0x20c>)
   1001e:	4798      	blx	r3
   10020:	0003      	movs	r3, r0
   10022:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   10024:	2317      	movs	r3, #23
   10026:	18fb      	adds	r3, r7, r3
   10028:	781b      	ldrb	r3, [r3, #0]
   1002a:	2b00      	cmp	r3, #0
   1002c:	d003      	beq.n	10036 <dir_find+0x32>
   1002e:	2317      	movs	r3, #23
   10030:	18fb      	adds	r3, r7, r3
   10032:	781b      	ldrb	r3, [r3, #0]
   10034:	e0e8      	b.n	10208 <dir_find+0x204>
		return res;
	}
#endif
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
   10036:	2314      	movs	r3, #20
   10038:	18fb      	adds	r3, r7, r3
   1003a:	22ff      	movs	r2, #255	; 0xff
   1003c:	701a      	strb	r2, [r3, #0]
   1003e:	2315      	movs	r3, #21
   10040:	18fb      	adds	r3, r7, r3
   10042:	2214      	movs	r2, #20
   10044:	18ba      	adds	r2, r7, r2
   10046:	7812      	ldrb	r2, [r2, #0]
   10048:	701a      	strb	r2, [r3, #0]
   1004a:	687b      	ldr	r3, [r7, #4]
   1004c:	2201      	movs	r2, #1
   1004e:	4252      	negs	r2, r2
   10050:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
	do {
		res = move_window(fs, dp->sect);
   10052:	687b      	ldr	r3, [r7, #4]
   10054:	699a      	ldr	r2, [r3, #24]
   10056:	2317      	movs	r3, #23
   10058:	18fc      	adds	r4, r7, r3
   1005a:	693b      	ldr	r3, [r7, #16]
   1005c:	0011      	movs	r1, r2
   1005e:	0018      	movs	r0, r3
   10060:	4b6c      	ldr	r3, [pc, #432]	; (10214 <dir_find+0x210>)
   10062:	4798      	blx	r3
   10064:	0003      	movs	r3, r0
   10066:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   10068:	2317      	movs	r3, #23
   1006a:	18fb      	adds	r3, r7, r3
   1006c:	781b      	ldrb	r3, [r3, #0]
   1006e:	2b00      	cmp	r3, #0
   10070:	d000      	beq.n	10074 <dir_find+0x70>
   10072:	e0c1      	b.n	101f8 <dir_find+0x1f4>
		c = dp->dir[DIR_Name];
   10074:	687b      	ldr	r3, [r7, #4]
   10076:	69da      	ldr	r2, [r3, #28]
   10078:	2316      	movs	r3, #22
   1007a:	18fb      	adds	r3, r7, r3
   1007c:	7812      	ldrb	r2, [r2, #0]
   1007e:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   10080:	2316      	movs	r3, #22
   10082:	18fb      	adds	r3, r7, r3
   10084:	781b      	ldrb	r3, [r3, #0]
   10086:	2b00      	cmp	r3, #0
   10088:	d104      	bne.n	10094 <dir_find+0x90>
   1008a:	2317      	movs	r3, #23
   1008c:	18fb      	adds	r3, r7, r3
   1008e:	2204      	movs	r2, #4
   10090:	701a      	strb	r2, [r3, #0]
   10092:	e0b6      	b.n	10202 <dir_find+0x1fe>
#if FF_USE_LFN		/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
   10094:	687b      	ldr	r3, [r7, #4]
   10096:	69db      	ldr	r3, [r3, #28]
   10098:	330b      	adds	r3, #11
   1009a:	781a      	ldrb	r2, [r3, #0]
   1009c:	230f      	movs	r3, #15
   1009e:	18fb      	adds	r3, r7, r3
   100a0:	213f      	movs	r1, #63	; 0x3f
   100a2:	400a      	ands	r2, r1
   100a4:	701a      	strb	r2, [r3, #0]
   100a6:	687b      	ldr	r3, [r7, #4]
   100a8:	220f      	movs	r2, #15
   100aa:	18ba      	adds	r2, r7, r2
   100ac:	7812      	ldrb	r2, [r2, #0]
   100ae:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   100b0:	2316      	movs	r3, #22
   100b2:	18fb      	adds	r3, r7, r3
   100b4:	781b      	ldrb	r3, [r3, #0]
   100b6:	2be5      	cmp	r3, #229	; 0xe5
   100b8:	d00a      	beq.n	100d0 <dir_find+0xcc>
   100ba:	230f      	movs	r3, #15
   100bc:	18fb      	adds	r3, r7, r3
   100be:	781b      	ldrb	r3, [r3, #0]
   100c0:	2208      	movs	r2, #8
   100c2:	4013      	ands	r3, r2
   100c4:	d00d      	beq.n	100e2 <dir_find+0xde>
   100c6:	230f      	movs	r3, #15
   100c8:	18fb      	adds	r3, r7, r3
   100ca:	781b      	ldrb	r3, [r3, #0]
   100cc:	2b0f      	cmp	r3, #15
   100ce:	d008      	beq.n	100e2 <dir_find+0xde>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
   100d0:	2315      	movs	r3, #21
   100d2:	18fb      	adds	r3, r7, r3
   100d4:	22ff      	movs	r2, #255	; 0xff
   100d6:	701a      	strb	r2, [r3, #0]
   100d8:	687b      	ldr	r3, [r7, #4]
   100da:	2201      	movs	r2, #1
   100dc:	4252      	negs	r2, r2
   100de:	62da      	str	r2, [r3, #44]	; 0x2c
   100e0:	e07a      	b.n	101d8 <dir_find+0x1d4>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
   100e2:	230f      	movs	r3, #15
   100e4:	18fb      	adds	r3, r7, r3
   100e6:	781b      	ldrb	r3, [r3, #0]
   100e8:	2b0f      	cmp	r3, #15
   100ea:	d14b      	bne.n	10184 <dir_find+0x180>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
   100ec:	687b      	ldr	r3, [r7, #4]
   100ee:	222b      	movs	r2, #43	; 0x2b
   100f0:	5c9b      	ldrb	r3, [r3, r2]
   100f2:	001a      	movs	r2, r3
   100f4:	2340      	movs	r3, #64	; 0x40
   100f6:	4013      	ands	r3, r2
   100f8:	d000      	beq.n	100fc <dir_find+0xf8>
   100fa:	e06d      	b.n	101d8 <dir_find+0x1d4>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
   100fc:	2316      	movs	r3, #22
   100fe:	18fb      	adds	r3, r7, r3
   10100:	781b      	ldrb	r3, [r3, #0]
   10102:	2240      	movs	r2, #64	; 0x40
   10104:	4013      	ands	r3, r2
   10106:	d017      	beq.n	10138 <dir_find+0x134>
						sum = dp->dir[LDIR_Chksum];
   10108:	687b      	ldr	r3, [r7, #4]
   1010a:	69da      	ldr	r2, [r3, #28]
   1010c:	2314      	movs	r3, #20
   1010e:	18fb      	adds	r3, r7, r3
   10110:	7b52      	ldrb	r2, [r2, #13]
   10112:	701a      	strb	r2, [r3, #0]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
   10114:	2316      	movs	r3, #22
   10116:	18fb      	adds	r3, r7, r3
   10118:	2216      	movs	r2, #22
   1011a:	18ba      	adds	r2, r7, r2
   1011c:	7812      	ldrb	r2, [r2, #0]
   1011e:	2140      	movs	r1, #64	; 0x40
   10120:	438a      	bics	r2, r1
   10122:	701a      	strb	r2, [r3, #0]
   10124:	2315      	movs	r3, #21
   10126:	18fb      	adds	r3, r7, r3
   10128:	2216      	movs	r2, #22
   1012a:	18ba      	adds	r2, r7, r2
   1012c:	7812      	ldrb	r2, [r2, #0]
   1012e:	701a      	strb	r2, [r3, #0]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
   10130:	687b      	ldr	r3, [r7, #4]
   10132:	691a      	ldr	r2, [r3, #16]
   10134:	687b      	ldr	r3, [r7, #4]
   10136:	62da      	str	r2, [r3, #44]	; 0x2c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
   10138:	2316      	movs	r3, #22
   1013a:	18fa      	adds	r2, r7, r3
   1013c:	2315      	movs	r3, #21
   1013e:	18fb      	adds	r3, r7, r3
   10140:	7812      	ldrb	r2, [r2, #0]
   10142:	781b      	ldrb	r3, [r3, #0]
   10144:	429a      	cmp	r2, r3
   10146:	d118      	bne.n	1017a <dir_find+0x176>
   10148:	687b      	ldr	r3, [r7, #4]
   1014a:	69db      	ldr	r3, [r3, #28]
   1014c:	330d      	adds	r3, #13
   1014e:	781b      	ldrb	r3, [r3, #0]
   10150:	2214      	movs	r2, #20
   10152:	18ba      	adds	r2, r7, r2
   10154:	7812      	ldrb	r2, [r2, #0]
   10156:	429a      	cmp	r2, r3
   10158:	d10f      	bne.n	1017a <dir_find+0x176>
   1015a:	693b      	ldr	r3, [r7, #16]
   1015c:	68da      	ldr	r2, [r3, #12]
   1015e:	687b      	ldr	r3, [r7, #4]
   10160:	69db      	ldr	r3, [r3, #28]
   10162:	0019      	movs	r1, r3
   10164:	0010      	movs	r0, r2
   10166:	4b2c      	ldr	r3, [pc, #176]	; (10218 <dir_find+0x214>)
   10168:	4798      	blx	r3
   1016a:	1e03      	subs	r3, r0, #0
   1016c:	d005      	beq.n	1017a <dir_find+0x176>
   1016e:	2315      	movs	r3, #21
   10170:	18fb      	adds	r3, r7, r3
   10172:	781b      	ldrb	r3, [r3, #0]
   10174:	3b01      	subs	r3, #1
   10176:	b2da      	uxtb	r2, r3
   10178:	e000      	b.n	1017c <dir_find+0x178>
   1017a:	22ff      	movs	r2, #255	; 0xff
   1017c:	2315      	movs	r3, #21
   1017e:	18fb      	adds	r3, r7, r3
   10180:	701a      	strb	r2, [r3, #0]
   10182:	e029      	b.n	101d8 <dir_find+0x1d4>
				}
			} else {					/* An SFN entry is found */
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
   10184:	2315      	movs	r3, #21
   10186:	18fb      	adds	r3, r7, r3
   10188:	781b      	ldrb	r3, [r3, #0]
   1018a:	2b00      	cmp	r3, #0
   1018c:	d10b      	bne.n	101a6 <dir_find+0x1a2>
   1018e:	687b      	ldr	r3, [r7, #4]
   10190:	69db      	ldr	r3, [r3, #28]
   10192:	0018      	movs	r0, r3
   10194:	4b21      	ldr	r3, [pc, #132]	; (1021c <dir_find+0x218>)
   10196:	4798      	blx	r3
   10198:	0003      	movs	r3, r0
   1019a:	001a      	movs	r2, r3
   1019c:	2314      	movs	r3, #20
   1019e:	18fb      	adds	r3, r7, r3
   101a0:	781b      	ldrb	r3, [r3, #0]
   101a2:	4293      	cmp	r3, r2
   101a4:	d02a      	beq.n	101fc <dir_find+0x1f8>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
   101a6:	687b      	ldr	r3, [r7, #4]
   101a8:	222b      	movs	r2, #43	; 0x2b
   101aa:	5c9b      	ldrb	r3, [r3, r2]
   101ac:	001a      	movs	r2, r3
   101ae:	2301      	movs	r3, #1
   101b0:	4013      	ands	r3, r2
   101b2:	d109      	bne.n	101c8 <dir_find+0x1c4>
   101b4:	687b      	ldr	r3, [r7, #4]
   101b6:	69d8      	ldr	r0, [r3, #28]
   101b8:	687b      	ldr	r3, [r7, #4]
   101ba:	3320      	adds	r3, #32
   101bc:	220b      	movs	r2, #11
   101be:	0019      	movs	r1, r3
   101c0:	4b17      	ldr	r3, [pc, #92]	; (10220 <dir_find+0x21c>)
   101c2:	4798      	blx	r3
   101c4:	1e03      	subs	r3, r0, #0
   101c6:	d01b      	beq.n	10200 <dir_find+0x1fc>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
   101c8:	2315      	movs	r3, #21
   101ca:	18fb      	adds	r3, r7, r3
   101cc:	22ff      	movs	r2, #255	; 0xff
   101ce:	701a      	strb	r2, [r3, #0]
   101d0:	687b      	ldr	r3, [r7, #4]
   101d2:	2201      	movs	r2, #1
   101d4:	4252      	negs	r2, r2
   101d6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
   101d8:	2317      	movs	r3, #23
   101da:	18fc      	adds	r4, r7, r3
   101dc:	687b      	ldr	r3, [r7, #4]
   101de:	2100      	movs	r1, #0
   101e0:	0018      	movs	r0, r3
   101e2:	4b10      	ldr	r3, [pc, #64]	; (10224 <dir_find+0x220>)
   101e4:	4798      	blx	r3
   101e6:	0003      	movs	r3, r0
   101e8:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   101ea:	2317      	movs	r3, #23
   101ec:	18fb      	adds	r3, r7, r3
   101ee:	781b      	ldrb	r3, [r3, #0]
   101f0:	2b00      	cmp	r3, #0
   101f2:	d100      	bne.n	101f6 <dir_find+0x1f2>
   101f4:	e72d      	b.n	10052 <dir_find+0x4e>
   101f6:	e004      	b.n	10202 <dir_find+0x1fe>
		if (res != FR_OK) break;
   101f8:	46c0      	nop			; (mov r8, r8)
   101fa:	e002      	b.n	10202 <dir_find+0x1fe>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
   101fc:	46c0      	nop			; (mov r8, r8)
   101fe:	e000      	b.n	10202 <dir_find+0x1fe>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
   10200:	46c0      	nop			; (mov r8, r8)

	return res;
   10202:	2317      	movs	r3, #23
   10204:	18fb      	adds	r3, r7, r3
   10206:	781b      	ldrb	r3, [r3, #0]
}
   10208:	0018      	movs	r0, r3
   1020a:	46bd      	mov	sp, r7
   1020c:	b007      	add	sp, #28
   1020e:	bd90      	pop	{r4, r7, pc}
   10210:	0000f8c1 	.word	0x0000f8c1
   10214:	0000f015 	.word	0x0000f015
   10218:	0000fc59 	.word	0x0000fc59
   1021c:	0000ffb5 	.word	0x0000ffb5
   10220:	0000ee05 	.word	0x0000ee05
   10224:	0000f9c9 	.word	0x0000f9c9

00010228 <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
   10228:	b590      	push	{r4, r7, lr}
   1022a:	b08d      	sub	sp, #52	; 0x34
   1022c:	af00      	add	r7, sp, #0
   1022e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
   10230:	687b      	ldr	r3, [r7, #4]
   10232:	681b      	ldr	r3, [r3, #0]
   10234:	61fb      	str	r3, [r7, #28]
#if FF_USE_LFN		/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
   10236:	687b      	ldr	r3, [r7, #4]
   10238:	222b      	movs	r2, #43	; 0x2b
   1023a:	5c9b      	ldrb	r3, [r3, r2]
   1023c:	001a      	movs	r2, r3
   1023e:	23a0      	movs	r3, #160	; 0xa0
   10240:	4013      	ands	r3, r2
   10242:	d001      	beq.n	10248 <dir_register+0x20>
   10244:	2306      	movs	r3, #6
   10246:	e103      	b.n	10450 <dir_register+0x228>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
   10248:	2300      	movs	r3, #0
   1024a:	627b      	str	r3, [r7, #36]	; 0x24
   1024c:	e002      	b.n	10254 <dir_register+0x2c>
   1024e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10250:	3301      	adds	r3, #1
   10252:	627b      	str	r3, [r7, #36]	; 0x24
   10254:	69fb      	ldr	r3, [r7, #28]
   10256:	68da      	ldr	r2, [r3, #12]
   10258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1025a:	005b      	lsls	r3, r3, #1
   1025c:	18d3      	adds	r3, r2, r3
   1025e:	881b      	ldrh	r3, [r3, #0]
   10260:	2b00      	cmp	r3, #0
   10262:	d1f4      	bne.n	1024e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT/FAT32 volume */
	mem_cpy(sn, dp->fn, 12);
   10264:	687b      	ldr	r3, [r7, #4]
   10266:	3320      	adds	r3, #32
   10268:	0019      	movs	r1, r3
   1026a:	230c      	movs	r3, #12
   1026c:	18fb      	adds	r3, r7, r3
   1026e:	220c      	movs	r2, #12
   10270:	0018      	movs	r0, r3
   10272:	4b79      	ldr	r3, [pc, #484]	; (10458 <dir_register+0x230>)
   10274:	4798      	blx	r3
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   10276:	230c      	movs	r3, #12
   10278:	18fb      	adds	r3, r7, r3
   1027a:	7adb      	ldrb	r3, [r3, #11]
   1027c:	001a      	movs	r2, r3
   1027e:	2301      	movs	r3, #1
   10280:	4013      	ands	r3, r2
   10282:	d039      	beq.n	102f8 <dir_register+0xd0>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
   10284:	687b      	ldr	r3, [r7, #4]
   10286:	222b      	movs	r2, #43	; 0x2b
   10288:	2140      	movs	r1, #64	; 0x40
   1028a:	5499      	strb	r1, [r3, r2]
		for (n = 1; n < 100; n++) {
   1028c:	2301      	movs	r3, #1
   1028e:	62bb      	str	r3, [r7, #40]	; 0x28
   10290:	e019      	b.n	102c6 <dir_register+0x9e>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
   10292:	687b      	ldr	r3, [r7, #4]
   10294:	3320      	adds	r3, #32
   10296:	0018      	movs	r0, r3
   10298:	69fb      	ldr	r3, [r7, #28]
   1029a:	68da      	ldr	r2, [r3, #12]
   1029c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1029e:	210c      	movs	r1, #12
   102a0:	1879      	adds	r1, r7, r1
   102a2:	4c6e      	ldr	r4, [pc, #440]	; (1045c <dir_register+0x234>)
   102a4:	47a0      	blx	r4
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
   102a6:	232f      	movs	r3, #47	; 0x2f
   102a8:	18fc      	adds	r4, r7, r3
   102aa:	687b      	ldr	r3, [r7, #4]
   102ac:	0018      	movs	r0, r3
   102ae:	4b6c      	ldr	r3, [pc, #432]	; (10460 <dir_register+0x238>)
   102b0:	4798      	blx	r3
   102b2:	0003      	movs	r3, r0
   102b4:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   102b6:	232f      	movs	r3, #47	; 0x2f
   102b8:	18fb      	adds	r3, r7, r3
   102ba:	781b      	ldrb	r3, [r3, #0]
   102bc:	2b00      	cmp	r3, #0
   102be:	d106      	bne.n	102ce <dir_register+0xa6>
		for (n = 1; n < 100; n++) {
   102c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   102c2:	3301      	adds	r3, #1
   102c4:	62bb      	str	r3, [r7, #40]	; 0x28
   102c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   102c8:	2b63      	cmp	r3, #99	; 0x63
   102ca:	d9e2      	bls.n	10292 <dir_register+0x6a>
   102cc:	e000      	b.n	102d0 <dir_register+0xa8>
			if (res != FR_OK) break;
   102ce:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   102d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   102d2:	2b64      	cmp	r3, #100	; 0x64
   102d4:	d101      	bne.n	102da <dir_register+0xb2>
   102d6:	2307      	movs	r3, #7
   102d8:	e0ba      	b.n	10450 <dir_register+0x228>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   102da:	232f      	movs	r3, #47	; 0x2f
   102dc:	18fb      	adds	r3, r7, r3
   102de:	781b      	ldrb	r3, [r3, #0]
   102e0:	2b04      	cmp	r3, #4
   102e2:	d003      	beq.n	102ec <dir_register+0xc4>
   102e4:	232f      	movs	r3, #47	; 0x2f
   102e6:	18fb      	adds	r3, r7, r3
   102e8:	781b      	ldrb	r3, [r3, #0]
   102ea:	e0b1      	b.n	10450 <dir_register+0x228>
		dp->fn[NSFLAG] = sn[NSFLAG];
   102ec:	230c      	movs	r3, #12
   102ee:	18fb      	adds	r3, r7, r3
   102f0:	7ad9      	ldrb	r1, [r3, #11]
   102f2:	687b      	ldr	r3, [r7, #4]
   102f4:	222b      	movs	r2, #43	; 0x2b
   102f6:	5499      	strb	r1, [r3, r2]
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
   102f8:	230c      	movs	r3, #12
   102fa:	18fb      	adds	r3, r7, r3
   102fc:	7adb      	ldrb	r3, [r3, #11]
   102fe:	001a      	movs	r2, r3
   10300:	2302      	movs	r3, #2
   10302:	4013      	ands	r3, r2
   10304:	d009      	beq.n	1031a <dir_register+0xf2>
   10306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10308:	330c      	adds	r3, #12
   1030a:	001a      	movs	r2, r3
   1030c:	4b55      	ldr	r3, [pc, #340]	; (10464 <dir_register+0x23c>)
   1030e:	210d      	movs	r1, #13
   10310:	0010      	movs	r0, r2
   10312:	4798      	blx	r3
   10314:	0003      	movs	r3, r0
   10316:	3301      	adds	r3, #1
   10318:	e000      	b.n	1031c <dir_register+0xf4>
   1031a:	2301      	movs	r3, #1
   1031c:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
   1031e:	232f      	movs	r3, #47	; 0x2f
   10320:	18fc      	adds	r4, r7, r3
   10322:	6a3a      	ldr	r2, [r7, #32]
   10324:	687b      	ldr	r3, [r7, #4]
   10326:	0011      	movs	r1, r2
   10328:	0018      	movs	r0, r3
   1032a:	4b4f      	ldr	r3, [pc, #316]	; (10468 <dir_register+0x240>)
   1032c:	4798      	blx	r3
   1032e:	0003      	movs	r3, r0
   10330:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
   10332:	232f      	movs	r3, #47	; 0x2f
   10334:	18fb      	adds	r3, r7, r3
   10336:	781b      	ldrb	r3, [r3, #0]
   10338:	2b00      	cmp	r3, #0
   1033a:	d155      	bne.n	103e8 <dir_register+0x1c0>
   1033c:	6a3b      	ldr	r3, [r7, #32]
   1033e:	3b01      	subs	r3, #1
   10340:	623b      	str	r3, [r7, #32]
   10342:	6a3b      	ldr	r3, [r7, #32]
   10344:	2b00      	cmp	r3, #0
   10346:	d04f      	beq.n	103e8 <dir_register+0x1c0>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
   10348:	687b      	ldr	r3, [r7, #4]
   1034a:	691a      	ldr	r2, [r3, #16]
   1034c:	6a3b      	ldr	r3, [r7, #32]
   1034e:	015b      	lsls	r3, r3, #5
   10350:	1ad2      	subs	r2, r2, r3
   10352:	232f      	movs	r3, #47	; 0x2f
   10354:	18fc      	adds	r4, r7, r3
   10356:	687b      	ldr	r3, [r7, #4]
   10358:	0011      	movs	r1, r2
   1035a:	0018      	movs	r0, r3
   1035c:	4b43      	ldr	r3, [pc, #268]	; (1046c <dir_register+0x244>)
   1035e:	4798      	blx	r3
   10360:	0003      	movs	r3, r0
   10362:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   10364:	232f      	movs	r3, #47	; 0x2f
   10366:	18fb      	adds	r3, r7, r3
   10368:	781b      	ldrb	r3, [r3, #0]
   1036a:	2b00      	cmp	r3, #0
   1036c:	d13c      	bne.n	103e8 <dir_register+0x1c0>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
   1036e:	687b      	ldr	r3, [r7, #4]
   10370:	3320      	adds	r3, #32
   10372:	221b      	movs	r2, #27
   10374:	18bc      	adds	r4, r7, r2
   10376:	0018      	movs	r0, r3
   10378:	4b3d      	ldr	r3, [pc, #244]	; (10470 <dir_register+0x248>)
   1037a:	4798      	blx	r3
   1037c:	0003      	movs	r3, r0
   1037e:	7023      	strb	r3, [r4, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
   10380:	687b      	ldr	r3, [r7, #4]
   10382:	699a      	ldr	r2, [r3, #24]
   10384:	232f      	movs	r3, #47	; 0x2f
   10386:	18fc      	adds	r4, r7, r3
   10388:	69fb      	ldr	r3, [r7, #28]
   1038a:	0011      	movs	r1, r2
   1038c:	0018      	movs	r0, r3
   1038e:	4b39      	ldr	r3, [pc, #228]	; (10474 <dir_register+0x24c>)
   10390:	4798      	blx	r3
   10392:	0003      	movs	r3, r0
   10394:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
   10396:	232f      	movs	r3, #47	; 0x2f
   10398:	18fb      	adds	r3, r7, r3
   1039a:	781b      	ldrb	r3, [r3, #0]
   1039c:	2b00      	cmp	r3, #0
   1039e:	d122      	bne.n	103e6 <dir_register+0x1be>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
   103a0:	69fb      	ldr	r3, [r7, #28]
   103a2:	68d8      	ldr	r0, [r3, #12]
   103a4:	687b      	ldr	r3, [r7, #4]
   103a6:	69d9      	ldr	r1, [r3, #28]
   103a8:	6a3b      	ldr	r3, [r7, #32]
   103aa:	b2da      	uxtb	r2, r3
   103ac:	231b      	movs	r3, #27
   103ae:	18fb      	adds	r3, r7, r3
   103b0:	781b      	ldrb	r3, [r3, #0]
   103b2:	4c31      	ldr	r4, [pc, #196]	; (10478 <dir_register+0x250>)
   103b4:	47a0      	blx	r4
				fs->wflag = 1;
   103b6:	69fb      	ldr	r3, [r7, #28]
   103b8:	2201      	movs	r2, #1
   103ba:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
   103bc:	232f      	movs	r3, #47	; 0x2f
   103be:	18fc      	adds	r4, r7, r3
   103c0:	687b      	ldr	r3, [r7, #4]
   103c2:	2100      	movs	r1, #0
   103c4:	0018      	movs	r0, r3
   103c6:	4b2d      	ldr	r3, [pc, #180]	; (1047c <dir_register+0x254>)
   103c8:	4798      	blx	r3
   103ca:	0003      	movs	r3, r0
   103cc:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --nent);
   103ce:	232f      	movs	r3, #47	; 0x2f
   103d0:	18fb      	adds	r3, r7, r3
   103d2:	781b      	ldrb	r3, [r3, #0]
   103d4:	2b00      	cmp	r3, #0
   103d6:	d107      	bne.n	103e8 <dir_register+0x1c0>
   103d8:	6a3b      	ldr	r3, [r7, #32]
   103da:	3b01      	subs	r3, #1
   103dc:	623b      	str	r3, [r7, #32]
   103de:	6a3b      	ldr	r3, [r7, #32]
   103e0:	2b00      	cmp	r3, #0
   103e2:	d1cd      	bne.n	10380 <dir_register+0x158>
   103e4:	e000      	b.n	103e8 <dir_register+0x1c0>
				if (res != FR_OK) break;
   103e6:	46c0      	nop			; (mov r8, r8)
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
   103e8:	232f      	movs	r3, #47	; 0x2f
   103ea:	18fb      	adds	r3, r7, r3
   103ec:	781b      	ldrb	r3, [r3, #0]
   103ee:	2b00      	cmp	r3, #0
   103f0:	d12b      	bne.n	1044a <dir_register+0x222>
		res = move_window(fs, dp->sect);
   103f2:	687b      	ldr	r3, [r7, #4]
   103f4:	699a      	ldr	r2, [r3, #24]
   103f6:	232f      	movs	r3, #47	; 0x2f
   103f8:	18fc      	adds	r4, r7, r3
   103fa:	69fb      	ldr	r3, [r7, #28]
   103fc:	0011      	movs	r1, r2
   103fe:	0018      	movs	r0, r3
   10400:	4b1c      	ldr	r3, [pc, #112]	; (10474 <dir_register+0x24c>)
   10402:	4798      	blx	r3
   10404:	0003      	movs	r3, r0
   10406:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   10408:	232f      	movs	r3, #47	; 0x2f
   1040a:	18fb      	adds	r3, r7, r3
   1040c:	781b      	ldrb	r3, [r3, #0]
   1040e:	2b00      	cmp	r3, #0
   10410:	d11b      	bne.n	1044a <dir_register+0x222>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
   10412:	687b      	ldr	r3, [r7, #4]
   10414:	69db      	ldr	r3, [r3, #28]
   10416:	2220      	movs	r2, #32
   10418:	2100      	movs	r1, #0
   1041a:	0018      	movs	r0, r3
   1041c:	4b18      	ldr	r3, [pc, #96]	; (10480 <dir_register+0x258>)
   1041e:	4798      	blx	r3
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
   10420:	687b      	ldr	r3, [r7, #4]
   10422:	69d8      	ldr	r0, [r3, #28]
   10424:	687b      	ldr	r3, [r7, #4]
   10426:	3320      	adds	r3, #32
   10428:	220b      	movs	r2, #11
   1042a:	0019      	movs	r1, r3
   1042c:	4b0a      	ldr	r3, [pc, #40]	; (10458 <dir_register+0x230>)
   1042e:	4798      	blx	r3
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
   10430:	687b      	ldr	r3, [r7, #4]
   10432:	69db      	ldr	r3, [r3, #28]
   10434:	330c      	adds	r3, #12
   10436:	687a      	ldr	r2, [r7, #4]
   10438:	212b      	movs	r1, #43	; 0x2b
   1043a:	5c52      	ldrb	r2, [r2, r1]
   1043c:	2118      	movs	r1, #24
   1043e:	400a      	ands	r2, r1
   10440:	b2d2      	uxtb	r2, r2
   10442:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
   10444:	69fb      	ldr	r3, [r7, #28]
   10446:	2201      	movs	r2, #1
   10448:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
   1044a:	232f      	movs	r3, #47	; 0x2f
   1044c:	18fb      	adds	r3, r7, r3
   1044e:	781b      	ldrb	r3, [r3, #0]
}
   10450:	0018      	movs	r0, r3
   10452:	46bd      	mov	sp, r7
   10454:	b00d      	add	sp, #52	; 0x34
   10456:	bd90      	pop	{r4, r7, pc}
   10458:	0000ed97 	.word	0x0000ed97
   1045c:	0000fe59 	.word	0x0000fe59
   10460:	00010005 	.word	0x00010005
   10464:	0001df49 	.word	0x0001df49
   10468:	0000fb0d 	.word	0x0000fb0d
   1046c:	0000f8c1 	.word	0x0000f8c1
   10470:	0000ffb5 	.word	0x0000ffb5
   10474:	0000f015 	.word	0x0000f015
   10478:	0000fd61 	.word	0x0000fd61
   1047c:	0000f9c9 	.word	0x0000f9c9
   10480:	0000edd5 	.word	0x0000edd5

00010484 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
   10484:	b590      	push	{r4, r7, lr}
   10486:	b08b      	sub	sp, #44	; 0x2c
   10488:	af00      	add	r7, sp, #0
   1048a:	6078      	str	r0, [r7, #4]
   1048c:	6039      	str	r1, [r7, #0]
	UINT i, ni, si, di;
	const TCHAR *p;


	/* Create LFN into LFN working buffer */
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
   1048e:	683b      	ldr	r3, [r7, #0]
   10490:	681b      	ldr	r3, [r3, #0]
   10492:	60bb      	str	r3, [r7, #8]
   10494:	687b      	ldr	r3, [r7, #4]
   10496:	681b      	ldr	r3, [r3, #0]
   10498:	68db      	ldr	r3, [r3, #12]
   1049a:	613b      	str	r3, [r7, #16]
   1049c:	2300      	movs	r3, #0
   1049e:	617b      	str	r3, [r7, #20]
	for (;;) {
		uc = tchar2uni(&p);			/* Get a character */
   104a0:	2308      	movs	r3, #8
   104a2:	18fb      	adds	r3, r7, r3
   104a4:	0018      	movs	r0, r3
   104a6:	4bba      	ldr	r3, [pc, #744]	; (10790 <create_name+0x30c>)
   104a8:	4798      	blx	r3
   104aa:	0003      	movs	r3, r0
   104ac:	60fb      	str	r3, [r7, #12]
		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
   104ae:	68fb      	ldr	r3, [r7, #12]
   104b0:	3301      	adds	r3, #1
   104b2:	d101      	bne.n	104b8 <create_name+0x34>
   104b4:	2306      	movs	r3, #6
   104b6:	e225      	b.n	10904 <create_name+0x480>
		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
   104b8:	68fb      	ldr	r3, [r7, #12]
   104ba:	4ab6      	ldr	r2, [pc, #728]	; (10794 <create_name+0x310>)
   104bc:	4293      	cmp	r3, r2
   104be:	d909      	bls.n	104d4 <create_name+0x50>
   104c0:	697b      	ldr	r3, [r7, #20]
   104c2:	1c5a      	adds	r2, r3, #1
   104c4:	617a      	str	r2, [r7, #20]
   104c6:	005b      	lsls	r3, r3, #1
   104c8:	693a      	ldr	r2, [r7, #16]
   104ca:	18d3      	adds	r3, r2, r3
   104cc:	68fa      	ldr	r2, [r7, #12]
   104ce:	0c12      	lsrs	r2, r2, #16
   104d0:	b292      	uxth	r2, r2
   104d2:	801a      	strh	r2, [r3, #0]
		wc = (WCHAR)uc;
   104d4:	2324      	movs	r3, #36	; 0x24
   104d6:	18fb      	adds	r3, r7, r3
   104d8:	68fa      	ldr	r2, [r7, #12]
   104da:	801a      	strh	r2, [r3, #0]
		if (wc < ' ' || wc == '/' || wc == '\\') break;	/* Break if end of the path or a separator is found */
   104dc:	2324      	movs	r3, #36	; 0x24
   104de:	18fb      	adds	r3, r7, r3
   104e0:	881b      	ldrh	r3, [r3, #0]
   104e2:	2b1f      	cmp	r3, #31
   104e4:	d92d      	bls.n	10542 <create_name+0xbe>
   104e6:	2324      	movs	r3, #36	; 0x24
   104e8:	18fb      	adds	r3, r7, r3
   104ea:	881b      	ldrh	r3, [r3, #0]
   104ec:	2b2f      	cmp	r3, #47	; 0x2f
   104ee:	d028      	beq.n	10542 <create_name+0xbe>
   104f0:	2324      	movs	r3, #36	; 0x24
   104f2:	18fb      	adds	r3, r7, r3
   104f4:	881b      	ldrh	r3, [r3, #0]
   104f6:	2b5c      	cmp	r3, #92	; 0x5c
   104f8:	d023      	beq.n	10542 <create_name+0xbe>
		if (wc < 0x80 && chk_chr("\"*:<>\?|\x7F", wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
   104fa:	2324      	movs	r3, #36	; 0x24
   104fc:	18fb      	adds	r3, r7, r3
   104fe:	881b      	ldrh	r3, [r3, #0]
   10500:	2b7f      	cmp	r3, #127	; 0x7f
   10502:	d80b      	bhi.n	1051c <create_name+0x98>
   10504:	2324      	movs	r3, #36	; 0x24
   10506:	18fb      	adds	r3, r7, r3
   10508:	881a      	ldrh	r2, [r3, #0]
   1050a:	4ba3      	ldr	r3, [pc, #652]	; (10798 <create_name+0x314>)
   1050c:	0011      	movs	r1, r2
   1050e:	0018      	movs	r0, r3
   10510:	4ba2      	ldr	r3, [pc, #648]	; (1079c <create_name+0x318>)
   10512:	4798      	blx	r3
   10514:	1e03      	subs	r3, r0, #0
   10516:	d001      	beq.n	1051c <create_name+0x98>
   10518:	2306      	movs	r3, #6
   1051a:	e1f3      	b.n	10904 <create_name+0x480>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
   1051c:	697b      	ldr	r3, [r7, #20]
   1051e:	2bfe      	cmp	r3, #254	; 0xfe
   10520:	d901      	bls.n	10526 <create_name+0xa2>
   10522:	2306      	movs	r3, #6
   10524:	e1ee      	b.n	10904 <create_name+0x480>
		lfn[di++] = wc;					/* Store the Unicode character */
   10526:	697b      	ldr	r3, [r7, #20]
   10528:	1c5a      	adds	r2, r3, #1
   1052a:	617a      	str	r2, [r7, #20]
   1052c:	005b      	lsls	r3, r3, #1
   1052e:	693a      	ldr	r2, [r7, #16]
   10530:	18d3      	adds	r3, r2, r3
   10532:	2224      	movs	r2, #36	; 0x24
   10534:	18ba      	adds	r2, r7, r2
   10536:	8812      	ldrh	r2, [r2, #0]
   10538:	801a      	strh	r2, [r3, #0]
		uc = tchar2uni(&p);			/* Get a character */
   1053a:	e7b1      	b.n	104a0 <create_name+0x1c>
	}
	while (*p == '/' || *p == '\\') p++;	/* Skip duplicated separators if exist */
   1053c:	68bb      	ldr	r3, [r7, #8]
   1053e:	3301      	adds	r3, #1
   10540:	60bb      	str	r3, [r7, #8]
   10542:	68bb      	ldr	r3, [r7, #8]
   10544:	781b      	ldrb	r3, [r3, #0]
   10546:	2b2f      	cmp	r3, #47	; 0x2f
   10548:	d0f8      	beq.n	1053c <create_name+0xb8>
   1054a:	68bb      	ldr	r3, [r7, #8]
   1054c:	781b      	ldrb	r3, [r3, #0]
   1054e:	2b5c      	cmp	r3, #92	; 0x5c
   10550:	d0f4      	beq.n	1053c <create_name+0xb8>
	*path = p;							/* Return pointer to the next segment */
   10552:	68ba      	ldr	r2, [r7, #8]
   10554:	683b      	ldr	r3, [r7, #0]
   10556:	601a      	str	r2, [r3, #0]
	cf = (wc < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
   10558:	2324      	movs	r3, #36	; 0x24
   1055a:	18fb      	adds	r3, r7, r3
   1055c:	881b      	ldrh	r3, [r3, #0]
   1055e:	2b1f      	cmp	r3, #31
   10560:	d801      	bhi.n	10566 <create_name+0xe2>
   10562:	2204      	movs	r2, #4
   10564:	e000      	b.n	10568 <create_name+0xe4>
   10566:	2200      	movs	r2, #0
   10568:	2326      	movs	r3, #38	; 0x26
   1056a:	18fb      	adds	r3, r7, r3
   1056c:	701a      	strb	r2, [r3, #0]
		}
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
   1056e:	e017      	b.n	105a0 <create_name+0x11c>
		wc = lfn[di - 1];
   10570:	697b      	ldr	r3, [r7, #20]
   10572:	4a8b      	ldr	r2, [pc, #556]	; (107a0 <create_name+0x31c>)
   10574:	4694      	mov	ip, r2
   10576:	4463      	add	r3, ip
   10578:	005b      	lsls	r3, r3, #1
   1057a:	693a      	ldr	r2, [r7, #16]
   1057c:	18d2      	adds	r2, r2, r3
   1057e:	2324      	movs	r3, #36	; 0x24
   10580:	18fb      	adds	r3, r7, r3
   10582:	8812      	ldrh	r2, [r2, #0]
   10584:	801a      	strh	r2, [r3, #0]
		if (wc != ' ' && wc != '.') break;
   10586:	2324      	movs	r3, #36	; 0x24
   10588:	18fb      	adds	r3, r7, r3
   1058a:	881b      	ldrh	r3, [r3, #0]
   1058c:	2b20      	cmp	r3, #32
   1058e:	d004      	beq.n	1059a <create_name+0x116>
   10590:	2324      	movs	r3, #36	; 0x24
   10592:	18fb      	adds	r3, r7, r3
   10594:	881b      	ldrh	r3, [r3, #0]
   10596:	2b2e      	cmp	r3, #46	; 0x2e
   10598:	d106      	bne.n	105a8 <create_name+0x124>
		di--;
   1059a:	697b      	ldr	r3, [r7, #20]
   1059c:	3b01      	subs	r3, #1
   1059e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
   105a0:	697b      	ldr	r3, [r7, #20]
   105a2:	2b00      	cmp	r3, #0
   105a4:	d1e4      	bne.n	10570 <create_name+0xec>
   105a6:	e000      	b.n	105aa <create_name+0x126>
		if (wc != ' ' && wc != '.') break;
   105a8:	46c0      	nop			; (mov r8, r8)
	}
	lfn[di] = 0;							/* LFN is created into the working buffer */
   105aa:	697b      	ldr	r3, [r7, #20]
   105ac:	005b      	lsls	r3, r3, #1
   105ae:	693a      	ldr	r2, [r7, #16]
   105b0:	18d3      	adds	r3, r2, r3
   105b2:	2200      	movs	r2, #0
   105b4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
   105b6:	697b      	ldr	r3, [r7, #20]
   105b8:	2b00      	cmp	r3, #0
   105ba:	d101      	bne.n	105c0 <create_name+0x13c>
   105bc:	2306      	movs	r3, #6
   105be:	e1a1      	b.n	10904 <create_name+0x480>

	/* Create SFN in directory form */
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
   105c0:	2300      	movs	r3, #0
   105c2:	61bb      	str	r3, [r7, #24]
   105c4:	e002      	b.n	105cc <create_name+0x148>
   105c6:	69bb      	ldr	r3, [r7, #24]
   105c8:	3301      	adds	r3, #1
   105ca:	61bb      	str	r3, [r7, #24]
   105cc:	69bb      	ldr	r3, [r7, #24]
   105ce:	005b      	lsls	r3, r3, #1
   105d0:	693a      	ldr	r2, [r7, #16]
   105d2:	18d3      	adds	r3, r2, r3
   105d4:	881b      	ldrh	r3, [r3, #0]
   105d6:	2b20      	cmp	r3, #32
   105d8:	d0f5      	beq.n	105c6 <create_name+0x142>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
   105da:	69bb      	ldr	r3, [r7, #24]
   105dc:	2b00      	cmp	r3, #0
   105de:	d106      	bne.n	105ee <create_name+0x16a>
   105e0:	69bb      	ldr	r3, [r7, #24]
   105e2:	005b      	lsls	r3, r3, #1
   105e4:	693a      	ldr	r2, [r7, #16]
   105e6:	18d3      	adds	r3, r2, r3
   105e8:	881b      	ldrh	r3, [r3, #0]
   105ea:	2b2e      	cmp	r3, #46	; 0x2e
   105ec:	d10b      	bne.n	10606 <create_name+0x182>
   105ee:	2326      	movs	r3, #38	; 0x26
   105f0:	18fb      	adds	r3, r7, r3
   105f2:	2226      	movs	r2, #38	; 0x26
   105f4:	18ba      	adds	r2, r7, r2
   105f6:	7812      	ldrb	r2, [r2, #0]
   105f8:	2103      	movs	r1, #3
   105fa:	430a      	orrs	r2, r1
   105fc:	701a      	strb	r2, [r3, #0]
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
   105fe:	e002      	b.n	10606 <create_name+0x182>
   10600:	697b      	ldr	r3, [r7, #20]
   10602:	3b01      	subs	r3, #1
   10604:	617b      	str	r3, [r7, #20]
   10606:	697b      	ldr	r3, [r7, #20]
   10608:	2b00      	cmp	r3, #0
   1060a:	d009      	beq.n	10620 <create_name+0x19c>
   1060c:	697b      	ldr	r3, [r7, #20]
   1060e:	4a64      	ldr	r2, [pc, #400]	; (107a0 <create_name+0x31c>)
   10610:	4694      	mov	ip, r2
   10612:	4463      	add	r3, ip
   10614:	005b      	lsls	r3, r3, #1
   10616:	693a      	ldr	r2, [r7, #16]
   10618:	18d3      	adds	r3, r2, r3
   1061a:	881b      	ldrh	r3, [r3, #0]
   1061c:	2b2e      	cmp	r3, #46	; 0x2e
   1061e:	d1ef      	bne.n	10600 <create_name+0x17c>

	mem_set(dp->fn, ' ', 11);
   10620:	687b      	ldr	r3, [r7, #4]
   10622:	3320      	adds	r3, #32
   10624:	220b      	movs	r2, #11
   10626:	2120      	movs	r1, #32
   10628:	0018      	movs	r0, r3
   1062a:	4b5e      	ldr	r3, [pc, #376]	; (107a4 <create_name+0x320>)
   1062c:	4798      	blx	r3
	i = b = 0; ni = 8;
   1062e:	2327      	movs	r3, #39	; 0x27
   10630:	18fb      	adds	r3, r7, r3
   10632:	2200      	movs	r2, #0
   10634:	701a      	strb	r2, [r3, #0]
   10636:	2300      	movs	r3, #0
   10638:	623b      	str	r3, [r7, #32]
   1063a:	2308      	movs	r3, #8
   1063c:	61fb      	str	r3, [r7, #28]
	for (;;) {
		wc = lfn[si++];					/* Get an LFN character */
   1063e:	69bb      	ldr	r3, [r7, #24]
   10640:	1c5a      	adds	r2, r3, #1
   10642:	61ba      	str	r2, [r7, #24]
   10644:	005b      	lsls	r3, r3, #1
   10646:	693a      	ldr	r2, [r7, #16]
   10648:	18d2      	adds	r2, r2, r3
   1064a:	2324      	movs	r3, #36	; 0x24
   1064c:	18fb      	adds	r3, r7, r3
   1064e:	8812      	ldrh	r2, [r2, #0]
   10650:	801a      	strh	r2, [r3, #0]
		if (wc == 0) break;				/* Break on end of the LFN */
   10652:	2324      	movs	r3, #36	; 0x24
   10654:	18fb      	adds	r3, r7, r3
   10656:	881b      	ldrh	r3, [r3, #0]
   10658:	2b00      	cmp	r3, #0
   1065a:	d100      	bne.n	1065e <create_name+0x1da>
   1065c:	e0fd      	b.n	1085a <create_name+0x3d6>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
   1065e:	2324      	movs	r3, #36	; 0x24
   10660:	18fb      	adds	r3, r7, r3
   10662:	881b      	ldrh	r3, [r3, #0]
   10664:	2b20      	cmp	r3, #32
   10666:	d008      	beq.n	1067a <create_name+0x1f6>
   10668:	2324      	movs	r3, #36	; 0x24
   1066a:	18fb      	adds	r3, r7, r3
   1066c:	881b      	ldrh	r3, [r3, #0]
   1066e:	2b2e      	cmp	r3, #46	; 0x2e
   10670:	d10c      	bne.n	1068c <create_name+0x208>
   10672:	69ba      	ldr	r2, [r7, #24]
   10674:	697b      	ldr	r3, [r7, #20]
   10676:	429a      	cmp	r2, r3
   10678:	d008      	beq.n	1068c <create_name+0x208>
			cf |= NS_LOSS | NS_LFN;
   1067a:	2326      	movs	r3, #38	; 0x26
   1067c:	18fb      	adds	r3, r7, r3
   1067e:	2226      	movs	r2, #38	; 0x26
   10680:	18ba      	adds	r2, r7, r2
   10682:	7812      	ldrb	r2, [r2, #0]
   10684:	2103      	movs	r1, #3
   10686:	430a      	orrs	r2, r1
   10688:	701a      	strb	r2, [r3, #0]
			continue;
   1068a:	e0e5      	b.n	10858 <create_name+0x3d4>
		}

		if (i >= ni || si == di) {		/* End of field? */
   1068c:	6a3a      	ldr	r2, [r7, #32]
   1068e:	69fb      	ldr	r3, [r7, #28]
   10690:	429a      	cmp	r2, r3
   10692:	d203      	bcs.n	1069c <create_name+0x218>
   10694:	69ba      	ldr	r2, [r7, #24]
   10696:	697b      	ldr	r3, [r7, #20]
   10698:	429a      	cmp	r2, r3
   1069a:	d12a      	bne.n	106f2 <create_name+0x26e>
			if (ni == 11) {				/* Name extension overflow? */
   1069c:	69fb      	ldr	r3, [r7, #28]
   1069e:	2b0b      	cmp	r3, #11
   106a0:	d108      	bne.n	106b4 <create_name+0x230>
				cf |= NS_LOSS | NS_LFN;
   106a2:	2326      	movs	r3, #38	; 0x26
   106a4:	18fb      	adds	r3, r7, r3
   106a6:	2226      	movs	r2, #38	; 0x26
   106a8:	18ba      	adds	r2, r7, r2
   106aa:	7812      	ldrb	r2, [r2, #0]
   106ac:	2103      	movs	r1, #3
   106ae:	430a      	orrs	r2, r1
   106b0:	701a      	strb	r2, [r3, #0]
				break;
   106b2:	e0d5      	b.n	10860 <create_name+0x3dc>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
   106b4:	69ba      	ldr	r2, [r7, #24]
   106b6:	697b      	ldr	r3, [r7, #20]
   106b8:	429a      	cmp	r2, r3
   106ba:	d007      	beq.n	106cc <create_name+0x248>
   106bc:	2326      	movs	r3, #38	; 0x26
   106be:	18fb      	adds	r3, r7, r3
   106c0:	2226      	movs	r2, #38	; 0x26
   106c2:	18ba      	adds	r2, r7, r2
   106c4:	7812      	ldrb	r2, [r2, #0]
   106c6:	2103      	movs	r1, #3
   106c8:	430a      	orrs	r2, r1
   106ca:	701a      	strb	r2, [r3, #0]
			if (si > di) break;						/* No name extension? */
   106cc:	69ba      	ldr	r2, [r7, #24]
   106ce:	697b      	ldr	r3, [r7, #20]
   106d0:	429a      	cmp	r2, r3
   106d2:	d900      	bls.n	106d6 <create_name+0x252>
   106d4:	e0c3      	b.n	1085e <create_name+0x3da>
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
   106d6:	697b      	ldr	r3, [r7, #20]
   106d8:	61bb      	str	r3, [r7, #24]
   106da:	2308      	movs	r3, #8
   106dc:	623b      	str	r3, [r7, #32]
   106de:	230b      	movs	r3, #11
   106e0:	61fb      	str	r3, [r7, #28]
   106e2:	2327      	movs	r3, #39	; 0x27
   106e4:	18fb      	adds	r3, r7, r3
   106e6:	2227      	movs	r2, #39	; 0x27
   106e8:	18ba      	adds	r2, r7, r2
   106ea:	7812      	ldrb	r2, [r2, #0]
   106ec:	0092      	lsls	r2, r2, #2
   106ee:	701a      	strb	r2, [r3, #0]
			continue;
   106f0:	e0b2      	b.n	10858 <create_name+0x3d4>
		}

		if (wc >= 0x80) {	/* Is this a non-ASCII character? */
   106f2:	2324      	movs	r3, #36	; 0x24
   106f4:	18fb      	adds	r3, r7, r3
   106f6:	881b      	ldrh	r3, [r3, #0]
   106f8:	2b7f      	cmp	r3, #127	; 0x7f
   106fa:	d924      	bls.n	10746 <create_name+0x2c2>
			cf |= NS_LFN;	/* LFN entry needs to be created */
   106fc:	2326      	movs	r3, #38	; 0x26
   106fe:	18fb      	adds	r3, r7, r3
   10700:	2226      	movs	r2, #38	; 0x26
   10702:	18ba      	adds	r2, r7, r2
   10704:	7812      	ldrb	r2, [r2, #0]
   10706:	2102      	movs	r1, #2
   10708:	430a      	orrs	r2, r1
   1070a:	701a      	strb	r2, [r3, #0]
				if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
			} else {		/* At DBCS */
				wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Upper convert ==> ANSI/OEM code */
			}
#elif FF_CODE_PAGE < 900	/* SBCS cfg */
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
   1070c:	2324      	movs	r3, #36	; 0x24
   1070e:	18fb      	adds	r3, r7, r3
   10710:	881a      	ldrh	r2, [r3, #0]
   10712:	2324      	movs	r3, #36	; 0x24
   10714:	18fc      	adds	r4, r7, r3
   10716:	23b6      	movs	r3, #182	; 0xb6
   10718:	33ff      	adds	r3, #255	; 0xff
   1071a:	0019      	movs	r1, r3
   1071c:	0010      	movs	r0, r2
   1071e:	4b22      	ldr	r3, [pc, #136]	; (107a8 <create_name+0x324>)
   10720:	4798      	blx	r3
   10722:	0003      	movs	r3, r0
   10724:	8023      	strh	r3, [r4, #0]
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
   10726:	2324      	movs	r3, #36	; 0x24
   10728:	18fb      	adds	r3, r7, r3
   1072a:	881b      	ldrh	r3, [r3, #0]
   1072c:	2280      	movs	r2, #128	; 0x80
   1072e:	4013      	ands	r3, r2
   10730:	d009      	beq.n	10746 <create_name+0x2c2>
   10732:	2324      	movs	r3, #36	; 0x24
   10734:	18fb      	adds	r3, r7, r3
   10736:	881b      	ldrh	r3, [r3, #0]
   10738:	227f      	movs	r2, #127	; 0x7f
   1073a:	4013      	ands	r3, r2
   1073c:	4a1b      	ldr	r2, [pc, #108]	; (107ac <create_name+0x328>)
   1073e:	5cd2      	ldrb	r2, [r2, r3]
   10740:	2324      	movs	r3, #36	; 0x24
   10742:	18fb      	adds	r3, r7, r3
   10744:	801a      	strh	r2, [r3, #0]
#else						/* DBCS cfg */
			wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Upper convert ==> ANSI/OEM code */
#endif
		}

		if (wc >= 0x100) {				/* Is this a DBC? */
   10746:	2324      	movs	r3, #36	; 0x24
   10748:	18fb      	adds	r3, r7, r3
   1074a:	881b      	ldrh	r3, [r3, #0]
   1074c:	2bff      	cmp	r3, #255	; 0xff
   1074e:	d92f      	bls.n	107b0 <create_name+0x32c>
			if (i >= ni - 1) {			/* Field overflow? */
   10750:	69fb      	ldr	r3, [r7, #28]
   10752:	1e5a      	subs	r2, r3, #1
   10754:	6a3b      	ldr	r3, [r7, #32]
   10756:	429a      	cmp	r2, r3
   10758:	d80a      	bhi.n	10770 <create_name+0x2ec>
				cf |= NS_LOSS | NS_LFN;
   1075a:	2326      	movs	r3, #38	; 0x26
   1075c:	18fb      	adds	r3, r7, r3
   1075e:	2226      	movs	r2, #38	; 0x26
   10760:	18ba      	adds	r2, r7, r2
   10762:	7812      	ldrb	r2, [r2, #0]
   10764:	2103      	movs	r1, #3
   10766:	430a      	orrs	r2, r1
   10768:	701a      	strb	r2, [r3, #0]
				i = ni; continue;		/* Next field */
   1076a:	69fb      	ldr	r3, [r7, #28]
   1076c:	623b      	str	r3, [r7, #32]
   1076e:	e073      	b.n	10858 <create_name+0x3d4>
			}
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
   10770:	6a3b      	ldr	r3, [r7, #32]
   10772:	1c5a      	adds	r2, r3, #1
   10774:	623a      	str	r2, [r7, #32]
   10776:	2224      	movs	r2, #36	; 0x24
   10778:	18ba      	adds	r2, r7, r2
   1077a:	8812      	ldrh	r2, [r2, #0]
   1077c:	0a12      	lsrs	r2, r2, #8
   1077e:	b292      	uxth	r2, r2
   10780:	b2d0      	uxtb	r0, r2
   10782:	687a      	ldr	r2, [r7, #4]
   10784:	2120      	movs	r1, #32
   10786:	18d3      	adds	r3, r2, r3
   10788:	185b      	adds	r3, r3, r1
   1078a:	1c02      	adds	r2, r0, #0
   1078c:	701a      	strb	r2, [r3, #0]
   1078e:	e056      	b.n	1083e <create_name+0x3ba>
   10790:	0000eec5 	.word	0x0000eec5
   10794:	0000ffff 	.word	0x0000ffff
   10798:	0002591c 	.word	0x0002591c
   1079c:	0000ee4f 	.word	0x0000ee4f
   107a0:	7fffffff 	.word	0x7fffffff
   107a4:	0000edd5 	.word	0x0000edd5
   107a8:	00011e95 	.word	0x00011e95
   107ac:	0002589c 	.word	0x0002589c
		} else {						/* SBC */
			if (wc == 0 || chk_chr("+,;=[]", wc)) {	/* Replace illegal characters for SFN if needed */
   107b0:	2324      	movs	r3, #36	; 0x24
   107b2:	18fb      	adds	r3, r7, r3
   107b4:	881b      	ldrh	r3, [r3, #0]
   107b6:	2b00      	cmp	r3, #0
   107b8:	d009      	beq.n	107ce <create_name+0x34a>
   107ba:	2324      	movs	r3, #36	; 0x24
   107bc:	18fb      	adds	r3, r7, r3
   107be:	881a      	ldrh	r2, [r3, #0]
   107c0:	4b52      	ldr	r3, [pc, #328]	; (1090c <create_name+0x488>)
   107c2:	0011      	movs	r1, r2
   107c4:	0018      	movs	r0, r3
   107c6:	4b52      	ldr	r3, [pc, #328]	; (10910 <create_name+0x48c>)
   107c8:	4798      	blx	r3
   107ca:	1e03      	subs	r3, r0, #0
   107cc:	d00c      	beq.n	107e8 <create_name+0x364>
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   107ce:	2324      	movs	r3, #36	; 0x24
   107d0:	18fb      	adds	r3, r7, r3
   107d2:	225f      	movs	r2, #95	; 0x5f
   107d4:	801a      	strh	r2, [r3, #0]
   107d6:	2326      	movs	r3, #38	; 0x26
   107d8:	18fb      	adds	r3, r7, r3
   107da:	2226      	movs	r2, #38	; 0x26
   107dc:	18ba      	adds	r2, r7, r2
   107de:	7812      	ldrb	r2, [r2, #0]
   107e0:	2103      	movs	r1, #3
   107e2:	430a      	orrs	r2, r1
   107e4:	701a      	strb	r2, [r3, #0]
   107e6:	e02a      	b.n	1083e <create_name+0x3ba>
			} else {
				if (IsUpper(wc)) {		/* ASCII upper case? */
   107e8:	2324      	movs	r3, #36	; 0x24
   107ea:	18fb      	adds	r3, r7, r3
   107ec:	881b      	ldrh	r3, [r3, #0]
   107ee:	2b40      	cmp	r3, #64	; 0x40
   107f0:	d90c      	bls.n	1080c <create_name+0x388>
   107f2:	2324      	movs	r3, #36	; 0x24
   107f4:	18fb      	adds	r3, r7, r3
   107f6:	881b      	ldrh	r3, [r3, #0]
   107f8:	2b5a      	cmp	r3, #90	; 0x5a
   107fa:	d807      	bhi.n	1080c <create_name+0x388>
					b |= 2;
   107fc:	2327      	movs	r3, #39	; 0x27
   107fe:	18fb      	adds	r3, r7, r3
   10800:	2227      	movs	r2, #39	; 0x27
   10802:	18ba      	adds	r2, r7, r2
   10804:	7812      	ldrb	r2, [r2, #0]
   10806:	2102      	movs	r1, #2
   10808:	430a      	orrs	r2, r1
   1080a:	701a      	strb	r2, [r3, #0]
				}
				if (IsLower(wc)) {		/* ASCII lower case? */
   1080c:	2324      	movs	r3, #36	; 0x24
   1080e:	18fb      	adds	r3, r7, r3
   10810:	881b      	ldrh	r3, [r3, #0]
   10812:	2b60      	cmp	r3, #96	; 0x60
   10814:	d913      	bls.n	1083e <create_name+0x3ba>
   10816:	2324      	movs	r3, #36	; 0x24
   10818:	18fb      	adds	r3, r7, r3
   1081a:	881b      	ldrh	r3, [r3, #0]
   1081c:	2b7a      	cmp	r3, #122	; 0x7a
   1081e:	d80e      	bhi.n	1083e <create_name+0x3ba>
					b |= 1; wc -= 0x20;
   10820:	2327      	movs	r3, #39	; 0x27
   10822:	18fb      	adds	r3, r7, r3
   10824:	2227      	movs	r2, #39	; 0x27
   10826:	18ba      	adds	r2, r7, r2
   10828:	7812      	ldrb	r2, [r2, #0]
   1082a:	2101      	movs	r1, #1
   1082c:	430a      	orrs	r2, r1
   1082e:	701a      	strb	r2, [r3, #0]
   10830:	2324      	movs	r3, #36	; 0x24
   10832:	18fb      	adds	r3, r7, r3
   10834:	2224      	movs	r2, #36	; 0x24
   10836:	18ba      	adds	r2, r7, r2
   10838:	8812      	ldrh	r2, [r2, #0]
   1083a:	3a20      	subs	r2, #32
   1083c:	801a      	strh	r2, [r3, #0]
				}
			}
		}
		dp->fn[i++] = (BYTE)wc;
   1083e:	6a3b      	ldr	r3, [r7, #32]
   10840:	1c5a      	adds	r2, r3, #1
   10842:	623a      	str	r2, [r7, #32]
   10844:	2224      	movs	r2, #36	; 0x24
   10846:	18ba      	adds	r2, r7, r2
   10848:	8812      	ldrh	r2, [r2, #0]
   1084a:	b2d0      	uxtb	r0, r2
   1084c:	687a      	ldr	r2, [r7, #4]
   1084e:	2120      	movs	r1, #32
   10850:	18d3      	adds	r3, r2, r3
   10852:	185b      	adds	r3, r3, r1
   10854:	1c02      	adds	r2, r0, #0
   10856:	701a      	strb	r2, [r3, #0]
		wc = lfn[si++];					/* Get an LFN character */
   10858:	e6f1      	b.n	1063e <create_name+0x1ba>
		if (wc == 0) break;				/* Break on end of the LFN */
   1085a:	46c0      	nop			; (mov r8, r8)
   1085c:	e000      	b.n	10860 <create_name+0x3dc>
			if (si > di) break;						/* No name extension? */
   1085e:	46c0      	nop			; (mov r8, r8)
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
   10860:	687b      	ldr	r3, [r7, #4]
   10862:	2220      	movs	r2, #32
   10864:	5c9b      	ldrb	r3, [r3, r2]
   10866:	2be5      	cmp	r3, #229	; 0xe5
   10868:	d103      	bne.n	10872 <create_name+0x3ee>
   1086a:	687b      	ldr	r3, [r7, #4]
   1086c:	2220      	movs	r2, #32
   1086e:	2105      	movs	r1, #5
   10870:	5499      	strb	r1, [r3, r2]

	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
   10872:	69fb      	ldr	r3, [r7, #28]
   10874:	2b08      	cmp	r3, #8
   10876:	d106      	bne.n	10886 <create_name+0x402>
   10878:	2327      	movs	r3, #39	; 0x27
   1087a:	18fb      	adds	r3, r7, r3
   1087c:	2227      	movs	r2, #39	; 0x27
   1087e:	18ba      	adds	r2, r7, r2
   10880:	7812      	ldrb	r2, [r2, #0]
   10882:	0092      	lsls	r2, r2, #2
   10884:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
   10886:	2327      	movs	r3, #39	; 0x27
   10888:	18fb      	adds	r3, r7, r3
   1088a:	781b      	ldrb	r3, [r3, #0]
   1088c:	220c      	movs	r2, #12
   1088e:	4013      	ands	r3, r2
   10890:	2b0c      	cmp	r3, #12
   10892:	d006      	beq.n	108a2 <create_name+0x41e>
   10894:	2327      	movs	r3, #39	; 0x27
   10896:	18fb      	adds	r3, r7, r3
   10898:	781b      	ldrb	r3, [r3, #0]
   1089a:	2203      	movs	r2, #3
   1089c:	4013      	ands	r3, r2
   1089e:	2b03      	cmp	r3, #3
   108a0:	d107      	bne.n	108b2 <create_name+0x42e>
   108a2:	2326      	movs	r3, #38	; 0x26
   108a4:	18fb      	adds	r3, r7, r3
   108a6:	2226      	movs	r2, #38	; 0x26
   108a8:	18ba      	adds	r2, r7, r2
   108aa:	7812      	ldrb	r2, [r2, #0]
   108ac:	2102      	movs	r1, #2
   108ae:	430a      	orrs	r2, r1
   108b0:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
   108b2:	2326      	movs	r3, #38	; 0x26
   108b4:	18fb      	adds	r3, r7, r3
   108b6:	781b      	ldrb	r3, [r3, #0]
   108b8:	2202      	movs	r2, #2
   108ba:	4013      	ands	r3, r2
   108bc:	d11b      	bne.n	108f6 <create_name+0x472>
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
   108be:	2327      	movs	r3, #39	; 0x27
   108c0:	18fb      	adds	r3, r7, r3
   108c2:	781b      	ldrb	r3, [r3, #0]
   108c4:	2201      	movs	r2, #1
   108c6:	4013      	ands	r3, r2
   108c8:	d007      	beq.n	108da <create_name+0x456>
   108ca:	2326      	movs	r3, #38	; 0x26
   108cc:	18fb      	adds	r3, r7, r3
   108ce:	2226      	movs	r2, #38	; 0x26
   108d0:	18ba      	adds	r2, r7, r2
   108d2:	7812      	ldrb	r2, [r2, #0]
   108d4:	2110      	movs	r1, #16
   108d6:	430a      	orrs	r2, r1
   108d8:	701a      	strb	r2, [r3, #0]
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
   108da:	2327      	movs	r3, #39	; 0x27
   108dc:	18fb      	adds	r3, r7, r3
   108de:	781b      	ldrb	r3, [r3, #0]
   108e0:	2204      	movs	r2, #4
   108e2:	4013      	ands	r3, r2
   108e4:	d007      	beq.n	108f6 <create_name+0x472>
   108e6:	2326      	movs	r3, #38	; 0x26
   108e8:	18fb      	adds	r3, r7, r3
   108ea:	2226      	movs	r2, #38	; 0x26
   108ec:	18ba      	adds	r2, r7, r2
   108ee:	7812      	ldrb	r2, [r2, #0]
   108f0:	2108      	movs	r1, #8
   108f2:	430a      	orrs	r2, r1
   108f4:	701a      	strb	r2, [r3, #0]
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
   108f6:	687b      	ldr	r3, [r7, #4]
   108f8:	2226      	movs	r2, #38	; 0x26
   108fa:	18ba      	adds	r2, r7, r2
   108fc:	212b      	movs	r1, #43	; 0x2b
   108fe:	7812      	ldrb	r2, [r2, #0]
   10900:	545a      	strb	r2, [r3, r1]

	return FR_OK;
   10902:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* FF_USE_LFN */
}
   10904:	0018      	movs	r0, r3
   10906:	46bd      	mov	sp, r7
   10908:	b00b      	add	sp, #44	; 0x2c
   1090a:	bd90      	pop	{r4, r7, pc}
   1090c:	00025928 	.word	0x00025928
   10910:	0000ee4f 	.word	0x0000ee4f

00010914 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
   10914:	b590      	push	{r4, r7, lr}
   10916:	b087      	sub	sp, #28
   10918:	af00      	add	r7, sp, #0
   1091a:	6078      	str	r0, [r7, #4]
   1091c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
   1091e:	687b      	ldr	r3, [r7, #4]
   10920:	681b      	ldr	r3, [r3, #0]
   10922:	613b      	str	r3, [r7, #16]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
   10924:	e002      	b.n	1092c <follow_path+0x18>
   10926:	683b      	ldr	r3, [r7, #0]
   10928:	3301      	adds	r3, #1
   1092a:	603b      	str	r3, [r7, #0]
   1092c:	683b      	ldr	r3, [r7, #0]
   1092e:	781b      	ldrb	r3, [r3, #0]
   10930:	2b2f      	cmp	r3, #47	; 0x2f
   10932:	d0f8      	beq.n	10926 <follow_path+0x12>
   10934:	683b      	ldr	r3, [r7, #0]
   10936:	781b      	ldrb	r3, [r3, #0]
   10938:	2b5c      	cmp	r3, #92	; 0x5c
   1093a:	d0f4      	beq.n	10926 <follow_path+0x12>
		dp->obj.sclust = 0;					/* Start from root directory */
   1093c:	687b      	ldr	r3, [r7, #4]
   1093e:	2200      	movs	r2, #0
   10940:	609a      	str	r2, [r3, #8]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
   10942:	683b      	ldr	r3, [r7, #0]
   10944:	781b      	ldrb	r3, [r3, #0]
   10946:	2b1f      	cmp	r3, #31
   10948:	d80d      	bhi.n	10966 <follow_path+0x52>
		dp->fn[NSFLAG] = NS_NONAME;
   1094a:	687b      	ldr	r3, [r7, #4]
   1094c:	222b      	movs	r2, #43	; 0x2b
   1094e:	2180      	movs	r1, #128	; 0x80
   10950:	5499      	strb	r1, [r3, r2]
		res = dir_sdi(dp, 0);
   10952:	2317      	movs	r3, #23
   10954:	18fc      	adds	r4, r7, r3
   10956:	687b      	ldr	r3, [r7, #4]
   10958:	2100      	movs	r1, #0
   1095a:	0018      	movs	r0, r3
   1095c:	4b32      	ldr	r3, [pc, #200]	; (10a28 <follow_path+0x114>)
   1095e:	4798      	blx	r3
   10960:	0003      	movs	r3, r0
   10962:	7023      	strb	r3, [r4, #0]
   10964:	e058      	b.n	10a18 <follow_path+0x104>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
   10966:	2317      	movs	r3, #23
   10968:	18fc      	adds	r4, r7, r3
   1096a:	003a      	movs	r2, r7
   1096c:	687b      	ldr	r3, [r7, #4]
   1096e:	0011      	movs	r1, r2
   10970:	0018      	movs	r0, r3
   10972:	4b2e      	ldr	r3, [pc, #184]	; (10a2c <follow_path+0x118>)
   10974:	4798      	blx	r3
   10976:	0003      	movs	r3, r0
   10978:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   1097a:	2317      	movs	r3, #23
   1097c:	18fb      	adds	r3, r7, r3
   1097e:	781b      	ldrb	r3, [r3, #0]
   10980:	2b00      	cmp	r3, #0
   10982:	d144      	bne.n	10a0e <follow_path+0xfa>
			res = dir_find(dp);				/* Find an object with the segment name */
   10984:	2317      	movs	r3, #23
   10986:	18fc      	adds	r4, r7, r3
   10988:	687b      	ldr	r3, [r7, #4]
   1098a:	0018      	movs	r0, r3
   1098c:	4b28      	ldr	r3, [pc, #160]	; (10a30 <follow_path+0x11c>)
   1098e:	4798      	blx	r3
   10990:	0003      	movs	r3, r0
   10992:	7023      	strb	r3, [r4, #0]
			ns = dp->fn[NSFLAG];
   10994:	230f      	movs	r3, #15
   10996:	18fb      	adds	r3, r7, r3
   10998:	687a      	ldr	r2, [r7, #4]
   1099a:	212b      	movs	r1, #43	; 0x2b
   1099c:	5c52      	ldrb	r2, [r2, r1]
   1099e:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
   109a0:	2317      	movs	r3, #23
   109a2:	18fb      	adds	r3, r7, r3
   109a4:	781b      	ldrb	r3, [r3, #0]
   109a6:	2b00      	cmp	r3, #0
   109a8:	d00f      	beq.n	109ca <follow_path+0xb6>
				if (res == FR_NO_FILE) {	/* Object is not found */
   109aa:	2317      	movs	r3, #23
   109ac:	18fb      	adds	r3, r7, r3
   109ae:	781b      	ldrb	r3, [r3, #0]
   109b0:	2b04      	cmp	r3, #4
   109b2:	d12e      	bne.n	10a12 <follow_path+0xfe>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
   109b4:	230f      	movs	r3, #15
   109b6:	18fb      	adds	r3, r7, r3
   109b8:	781b      	ldrb	r3, [r3, #0]
   109ba:	2204      	movs	r2, #4
   109bc:	4013      	ands	r3, r2
   109be:	d128      	bne.n	10a12 <follow_path+0xfe>
   109c0:	2317      	movs	r3, #23
   109c2:	18fb      	adds	r3, r7, r3
   109c4:	2205      	movs	r2, #5
   109c6:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
   109c8:	e023      	b.n	10a12 <follow_path+0xfe>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
   109ca:	230f      	movs	r3, #15
   109cc:	18fb      	adds	r3, r7, r3
   109ce:	781b      	ldrb	r3, [r3, #0]
   109d0:	2204      	movs	r2, #4
   109d2:	4013      	ands	r3, r2
   109d4:	d11f      	bne.n	10a16 <follow_path+0x102>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
   109d6:	687b      	ldr	r3, [r7, #4]
   109d8:	799b      	ldrb	r3, [r3, #6]
   109da:	001a      	movs	r2, r3
   109dc:	2310      	movs	r3, #16
   109de:	4013      	ands	r3, r2
   109e0:	d104      	bne.n	109ec <follow_path+0xd8>
				res = FR_NO_PATH; break;
   109e2:	2317      	movs	r3, #23
   109e4:	18fb      	adds	r3, r7, r3
   109e6:	2205      	movs	r2, #5
   109e8:	701a      	strb	r2, [r3, #0]
   109ea:	e015      	b.n	10a18 <follow_path+0x104>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
   109ec:	693b      	ldr	r3, [r7, #16]
   109ee:	3334      	adds	r3, #52	; 0x34
   109f0:	001a      	movs	r2, r3
   109f2:	687b      	ldr	r3, [r7, #4]
   109f4:	691b      	ldr	r3, [r3, #16]
   109f6:	05db      	lsls	r3, r3, #23
   109f8:	0ddb      	lsrs	r3, r3, #23
   109fa:	18d2      	adds	r2, r2, r3
   109fc:	693b      	ldr	r3, [r7, #16]
   109fe:	0011      	movs	r1, r2
   10a00:	0018      	movs	r0, r3
   10a02:	4b0c      	ldr	r3, [pc, #48]	; (10a34 <follow_path+0x120>)
   10a04:	4798      	blx	r3
   10a06:	0002      	movs	r2, r0
   10a08:	687b      	ldr	r3, [r7, #4]
   10a0a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
   10a0c:	e7ab      	b.n	10966 <follow_path+0x52>
			if (res != FR_OK) break;
   10a0e:	46c0      	nop			; (mov r8, r8)
   10a10:	e002      	b.n	10a18 <follow_path+0x104>
				break;
   10a12:	46c0      	nop			; (mov r8, r8)
   10a14:	e000      	b.n	10a18 <follow_path+0x104>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
   10a16:	46c0      	nop			; (mov r8, r8)
			}
		}
	}

	return res;
   10a18:	2317      	movs	r3, #23
   10a1a:	18fb      	adds	r3, r7, r3
   10a1c:	781b      	ldrb	r3, [r3, #0]
}
   10a1e:	0018      	movs	r0, r3
   10a20:	46bd      	mov	sp, r7
   10a22:	b007      	add	sp, #28
   10a24:	bd90      	pop	{r4, r7, pc}
   10a26:	46c0      	nop			; (mov r8, r8)
   10a28:	0000f8c1 	.word	0x0000f8c1
   10a2c:	00010485 	.word	0x00010485
   10a30:	00010005 	.word	0x00010005
   10a34:	0000fbd1 	.word	0x0000fbd1

00010a38 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
   10a38:	b580      	push	{r7, lr}
   10a3a:	b088      	sub	sp, #32
   10a3c:	af00      	add	r7, sp, #0
   10a3e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	TCHAR tc;
	int i, vol = -1;
   10a40:	2301      	movs	r3, #1
   10a42:	425b      	negs	r3, r3
   10a44:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
   10a46:	687b      	ldr	r3, [r7, #4]
   10a48:	681b      	ldr	r3, [r3, #0]
   10a4a:	613b      	str	r3, [r7, #16]
   10a4c:	693b      	ldr	r3, [r7, #16]
   10a4e:	61fb      	str	r3, [r7, #28]
	if (!tp) return vol;	/* Invalid path name? */
   10a50:	693b      	ldr	r3, [r7, #16]
   10a52:	2b00      	cmp	r3, #0
   10a54:	d101      	bne.n	10a5a <get_ldnumber+0x22>
   10a56:	697b      	ldr	r3, [r7, #20]
   10a58:	e035      	b.n	10ac6 <get_ldnumber+0x8e>
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
   10a5a:	69fb      	ldr	r3, [r7, #28]
   10a5c:	1c5a      	adds	r2, r3, #1
   10a5e:	61fa      	str	r2, [r7, #28]
   10a60:	220f      	movs	r2, #15
   10a62:	18ba      	adds	r2, r7, r2
   10a64:	781b      	ldrb	r3, [r3, #0]
   10a66:	7013      	strb	r3, [r2, #0]
   10a68:	230f      	movs	r3, #15
   10a6a:	18fb      	adds	r3, r7, r3
   10a6c:	781b      	ldrb	r3, [r3, #0]
   10a6e:	2b1f      	cmp	r3, #31
   10a70:	d904      	bls.n	10a7c <get_ldnumber+0x44>
   10a72:	230f      	movs	r3, #15
   10a74:	18fb      	adds	r3, r7, r3
   10a76:	781b      	ldrb	r3, [r3, #0]
   10a78:	2b3a      	cmp	r3, #58	; 0x3a
   10a7a:	d1ee      	bne.n	10a5a <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
   10a7c:	230f      	movs	r3, #15
   10a7e:	18fb      	adds	r3, r7, r3
   10a80:	781b      	ldrb	r3, [r3, #0]
   10a82:	2b3a      	cmp	r3, #58	; 0x3a
   10a84:	d11c      	bne.n	10ac0 <get_ldnumber+0x88>
		i = FF_VOLUMES;
   10a86:	2301      	movs	r3, #1
   10a88:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
   10a8a:	693b      	ldr	r3, [r7, #16]
   10a8c:	781b      	ldrb	r3, [r3, #0]
   10a8e:	2b2f      	cmp	r3, #47	; 0x2f
   10a90:	d90c      	bls.n	10aac <get_ldnumber+0x74>
   10a92:	693b      	ldr	r3, [r7, #16]
   10a94:	781b      	ldrb	r3, [r3, #0]
   10a96:	2b39      	cmp	r3, #57	; 0x39
   10a98:	d808      	bhi.n	10aac <get_ldnumber+0x74>
   10a9a:	693b      	ldr	r3, [r7, #16]
   10a9c:	1c9a      	adds	r2, r3, #2
   10a9e:	69fb      	ldr	r3, [r7, #28]
   10aa0:	429a      	cmp	r2, r3
   10aa2:	d103      	bne.n	10aac <get_ldnumber+0x74>
			i = (int)*tp - '0';	/* Get the LD number */
   10aa4:	693b      	ldr	r3, [r7, #16]
   10aa6:	781b      	ldrb	r3, [r3, #0]
   10aa8:	3b30      	subs	r3, #48	; 0x30
   10aaa:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
   10aac:	69bb      	ldr	r3, [r7, #24]
   10aae:	2b00      	cmp	r3, #0
   10ab0:	dc04      	bgt.n	10abc <get_ldnumber+0x84>
			vol = i;		/* Drive number */
   10ab2:	69bb      	ldr	r3, [r7, #24]
   10ab4:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
   10ab6:	687b      	ldr	r3, [r7, #4]
   10ab8:	69fa      	ldr	r2, [r7, #28]
   10aba:	601a      	str	r2, [r3, #0]
		}
		return vol;
   10abc:	697b      	ldr	r3, [r7, #20]
   10abe:	e002      	b.n	10ac6 <get_ldnumber+0x8e>
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
   10ac0:	2300      	movs	r3, #0
   10ac2:	617b      	str	r3, [r7, #20]
#endif
	return vol;		/* Return the default drive */
   10ac4:	697b      	ldr	r3, [r7, #20]
}
   10ac6:	0018      	movs	r0, r3
   10ac8:	46bd      	mov	sp, r7
   10aca:	b008      	add	sp, #32
   10acc:	bd80      	pop	{r7, pc}
	...

00010ad0 <check_fs>:

static BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	DWORD sect			/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
   10ad0:	b580      	push	{r7, lr}
   10ad2:	b082      	sub	sp, #8
   10ad4:	af00      	add	r7, sp, #0
   10ad6:	6078      	str	r0, [r7, #4]
   10ad8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
   10ada:	687b      	ldr	r3, [r7, #4]
   10adc:	2200      	movs	r2, #0
   10ade:	70da      	strb	r2, [r3, #3]
   10ae0:	687b      	ldr	r3, [r7, #4]
   10ae2:	2201      	movs	r2, #1
   10ae4:	4252      	negs	r2, r2
   10ae6:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
   10ae8:	683a      	ldr	r2, [r7, #0]
   10aea:	687b      	ldr	r3, [r7, #4]
   10aec:	0011      	movs	r1, r2
   10aee:	0018      	movs	r0, r3
   10af0:	4b1f      	ldr	r3, [pc, #124]	; (10b70 <check_fs+0xa0>)
   10af2:	4798      	blx	r3
   10af4:	1e03      	subs	r3, r0, #0
   10af6:	d001      	beq.n	10afc <check_fs+0x2c>
   10af8:	2304      	movs	r3, #4
   10afa:	e035      	b.n	10b68 <check_fs+0x98>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
   10afc:	687b      	ldr	r3, [r7, #4]
   10afe:	3334      	adds	r3, #52	; 0x34
   10b00:	33ff      	adds	r3, #255	; 0xff
   10b02:	33ff      	adds	r3, #255	; 0xff
   10b04:	0018      	movs	r0, r3
   10b06:	4b1b      	ldr	r3, [pc, #108]	; (10b74 <check_fs+0xa4>)
   10b08:	4798      	blx	r3
   10b0a:	0003      	movs	r3, r0
   10b0c:	001a      	movs	r2, r3
   10b0e:	4b1a      	ldr	r3, [pc, #104]	; (10b78 <check_fs+0xa8>)
   10b10:	429a      	cmp	r2, r3
   10b12:	d001      	beq.n	10b18 <check_fs+0x48>
   10b14:	2303      	movs	r3, #3
   10b16:	e027      	b.n	10b68 <check_fs+0x98>

#if FF_FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
#endif
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
   10b18:	687b      	ldr	r3, [r7, #4]
   10b1a:	2234      	movs	r2, #52	; 0x34
   10b1c:	5c9b      	ldrb	r3, [r3, r2]
   10b1e:	2be9      	cmp	r3, #233	; 0xe9
   10b20:	d009      	beq.n	10b36 <check_fs+0x66>
   10b22:	687b      	ldr	r3, [r7, #4]
   10b24:	2234      	movs	r2, #52	; 0x34
   10b26:	5c9b      	ldrb	r3, [r3, r2]
   10b28:	2beb      	cmp	r3, #235	; 0xeb
   10b2a:	d004      	beq.n	10b36 <check_fs+0x66>
   10b2c:	687b      	ldr	r3, [r7, #4]
   10b2e:	2234      	movs	r2, #52	; 0x34
   10b30:	5c9b      	ldrb	r3, [r3, r2]
   10b32:	2be8      	cmp	r3, #232	; 0xe8
   10b34:	d117      	bne.n	10b66 <check_fs+0x96>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
   10b36:	687b      	ldr	r3, [r7, #4]
   10b38:	3334      	adds	r3, #52	; 0x34
   10b3a:	3336      	adds	r3, #54	; 0x36
   10b3c:	490f      	ldr	r1, [pc, #60]	; (10b7c <check_fs+0xac>)
   10b3e:	2203      	movs	r2, #3
   10b40:	0018      	movs	r0, r3
   10b42:	4b0f      	ldr	r3, [pc, #60]	; (10b80 <check_fs+0xb0>)
   10b44:	4798      	blx	r3
   10b46:	1e03      	subs	r3, r0, #0
   10b48:	d101      	bne.n	10b4e <check_fs+0x7e>
   10b4a:	2300      	movs	r3, #0
   10b4c:	e00c      	b.n	10b68 <check_fs+0x98>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
   10b4e:	687b      	ldr	r3, [r7, #4]
   10b50:	3334      	adds	r3, #52	; 0x34
   10b52:	3352      	adds	r3, #82	; 0x52
   10b54:	490b      	ldr	r1, [pc, #44]	; (10b84 <check_fs+0xb4>)
   10b56:	2205      	movs	r2, #5
   10b58:	0018      	movs	r0, r3
   10b5a:	4b09      	ldr	r3, [pc, #36]	; (10b80 <check_fs+0xb0>)
   10b5c:	4798      	blx	r3
   10b5e:	1e03      	subs	r3, r0, #0
   10b60:	d101      	bne.n	10b66 <check_fs+0x96>
   10b62:	2300      	movs	r3, #0
   10b64:	e000      	b.n	10b68 <check_fs+0x98>
	}
	return 2;	/* Valid BS but not FAT */
   10b66:	2302      	movs	r3, #2
}
   10b68:	0018      	movs	r0, r3
   10b6a:	46bd      	mov	sp, r7
   10b6c:	b002      	add	sp, #8
   10b6e:	bd80      	pop	{r7, pc}
   10b70:	0000f015 	.word	0x0000f015
   10b74:	0000ec89 	.word	0x0000ec89
   10b78:	0000aa55 	.word	0x0000aa55
   10b7c:	00025930 	.word	0x00025930
   10b80:	0000ee05 	.word	0x0000ee05
   10b84:	00025934 	.word	0x00025934

00010b88 <find_volume>:
static FRESULT find_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* !=0: Check write protection for write access */
)
{
   10b88:	b590      	push	{r4, r7, lr}
   10b8a:	b097      	sub	sp, #92	; 0x5c
   10b8c:	af00      	add	r7, sp, #0
   10b8e:	60f8      	str	r0, [r7, #12]
   10b90:	60b9      	str	r1, [r7, #8]
   10b92:	1dfb      	adds	r3, r7, #7
   10b94:	701a      	strb	r2, [r3, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
   10b96:	68bb      	ldr	r3, [r7, #8]
   10b98:	2200      	movs	r2, #0
   10b9a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
   10b9c:	68fb      	ldr	r3, [r7, #12]
   10b9e:	0018      	movs	r0, r3
   10ba0:	4bca      	ldr	r3, [pc, #808]	; (10ecc <find_volume+0x344>)
   10ba2:	4798      	blx	r3
   10ba4:	0003      	movs	r3, r0
   10ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
   10ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10baa:	2b00      	cmp	r3, #0
   10bac:	da01      	bge.n	10bb2 <find_volume+0x2a>
   10bae:	230b      	movs	r3, #11
   10bb0:	e26d      	b.n	1108e <find_volume+0x506>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
   10bb2:	4bc7      	ldr	r3, [pc, #796]	; (10ed0 <find_volume+0x348>)
   10bb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   10bb6:	0092      	lsls	r2, r2, #2
   10bb8:	58d3      	ldr	r3, [r2, r3]
   10bba:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
   10bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10bbe:	2b00      	cmp	r3, #0
   10bc0:	d101      	bne.n	10bc6 <find_volume+0x3e>
   10bc2:	230c      	movs	r3, #12
   10bc4:	e263      	b.n	1108e <find_volume+0x506>
#if FF_FS_REENTRANT
	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
   10bc6:	68bb      	ldr	r3, [r7, #8]
   10bc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
   10bca:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
   10bcc:	1dfb      	adds	r3, r7, #7
   10bce:	1dfa      	adds	r2, r7, #7
   10bd0:	7812      	ldrb	r2, [r2, #0]
   10bd2:	2101      	movs	r1, #1
   10bd4:	438a      	bics	r2, r1
   10bd6:	701a      	strb	r2, [r3, #0]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
   10bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10bda:	781b      	ldrb	r3, [r3, #0]
   10bdc:	2b00      	cmp	r3, #0
   10bde:	d01c      	beq.n	10c1a <find_volume+0x92>
		stat = disk_status(fs->pdrv);
   10be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10be2:	785b      	ldrb	r3, [r3, #1]
   10be4:	2237      	movs	r2, #55	; 0x37
   10be6:	18bc      	adds	r4, r7, r2
   10be8:	0018      	movs	r0, r3
   10bea:	4bba      	ldr	r3, [pc, #744]	; (10ed4 <find_volume+0x34c>)
   10bec:	4798      	blx	r3
   10bee:	0003      	movs	r3, r0
   10bf0:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
   10bf2:	2337      	movs	r3, #55	; 0x37
   10bf4:	18fb      	adds	r3, r7, r3
   10bf6:	781b      	ldrb	r3, [r3, #0]
   10bf8:	2201      	movs	r2, #1
   10bfa:	4013      	ands	r3, r2
   10bfc:	d10d      	bne.n	10c1a <find_volume+0x92>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
   10bfe:	1dfb      	adds	r3, r7, #7
   10c00:	781b      	ldrb	r3, [r3, #0]
   10c02:	2b00      	cmp	r3, #0
   10c04:	d007      	beq.n	10c16 <find_volume+0x8e>
   10c06:	2337      	movs	r3, #55	; 0x37
   10c08:	18fb      	adds	r3, r7, r3
   10c0a:	781b      	ldrb	r3, [r3, #0]
   10c0c:	2204      	movs	r2, #4
   10c0e:	4013      	ands	r3, r2
   10c10:	d001      	beq.n	10c16 <find_volume+0x8e>
				return FR_WRITE_PROTECTED;
   10c12:	230a      	movs	r3, #10
   10c14:	e23b      	b.n	1108e <find_volume+0x506>
			}
			return FR_OK;				/* The filesystem object is valid */
   10c16:	2300      	movs	r3, #0
   10c18:	e239      	b.n	1108e <find_volume+0x506>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Clear the filesystem object */
   10c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10c1c:	2200      	movs	r2, #0
   10c1e:	701a      	strb	r2, [r3, #0]
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   10c20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10c22:	b2da      	uxtb	r2, r3
   10c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10c26:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
   10c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10c2a:	785b      	ldrb	r3, [r3, #1]
   10c2c:	2237      	movs	r2, #55	; 0x37
   10c2e:	18bc      	adds	r4, r7, r2
   10c30:	0018      	movs	r0, r3
   10c32:	4ba9      	ldr	r3, [pc, #676]	; (10ed8 <find_volume+0x350>)
   10c34:	4798      	blx	r3
   10c36:	0003      	movs	r3, r0
   10c38:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
   10c3a:	2337      	movs	r3, #55	; 0x37
   10c3c:	18fb      	adds	r3, r7, r3
   10c3e:	781b      	ldrb	r3, [r3, #0]
   10c40:	2201      	movs	r2, #1
   10c42:	4013      	ands	r3, r2
   10c44:	d001      	beq.n	10c4a <find_volume+0xc2>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
   10c46:	2303      	movs	r3, #3
   10c48:	e221      	b.n	1108e <find_volume+0x506>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
   10c4a:	1dfb      	adds	r3, r7, #7
   10c4c:	781b      	ldrb	r3, [r3, #0]
   10c4e:	2b00      	cmp	r3, #0
   10c50:	d007      	beq.n	10c62 <find_volume+0xda>
   10c52:	2337      	movs	r3, #55	; 0x37
   10c54:	18fb      	adds	r3, r7, r3
   10c56:	781b      	ldrb	r3, [r3, #0]
   10c58:	2204      	movs	r2, #4
   10c5a:	4013      	ands	r3, r2
   10c5c:	d001      	beq.n	10c62 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
   10c5e:	230a      	movs	r3, #10
   10c60:	e215      	b.n	1108e <find_volume+0x506>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK (MBR) and SFD (w/o partition). */
	bsect = 0;
   10c62:	2300      	movs	r3, #0
   10c64:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
   10c66:	2357      	movs	r3, #87	; 0x57
   10c68:	18fc      	adds	r4, r7, r3
   10c6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   10c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10c6e:	0011      	movs	r1, r2
   10c70:	0018      	movs	r0, r3
   10c72:	4b9a      	ldr	r3, [pc, #616]	; (10edc <find_volume+0x354>)
   10c74:	4798      	blx	r3
   10c76:	0003      	movs	r3, r0
   10c78:	7023      	strb	r3, [r4, #0]
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
   10c7a:	2357      	movs	r3, #87	; 0x57
   10c7c:	18fb      	adds	r3, r7, r3
   10c7e:	781b      	ldrb	r3, [r3, #0]
   10c80:	2b02      	cmp	r3, #2
   10c82:	d14c      	bne.n	10d1e <find_volume+0x196>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
   10c84:	2300      	movs	r3, #0
   10c86:	643b      	str	r3, [r7, #64]	; 0x40
   10c88:	e01d      	b.n	10cc6 <find_volume+0x13e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
   10c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10c8c:	3334      	adds	r3, #52	; 0x34
   10c8e:	001a      	movs	r2, r3
   10c90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10c92:	011b      	lsls	r3, r3, #4
   10c94:	33bf      	adds	r3, #191	; 0xbf
   10c96:	33ff      	adds	r3, #255	; 0xff
   10c98:	18d3      	adds	r3, r2, r3
   10c9a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
   10c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10c9e:	3304      	adds	r3, #4
   10ca0:	781b      	ldrb	r3, [r3, #0]
   10ca2:	2b00      	cmp	r3, #0
   10ca4:	d006      	beq.n	10cb4 <find_volume+0x12c>
   10ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10ca8:	3308      	adds	r3, #8
   10caa:	0018      	movs	r0, r3
   10cac:	4b8c      	ldr	r3, [pc, #560]	; (10ee0 <find_volume+0x358>)
   10cae:	4798      	blx	r3
   10cb0:	0001      	movs	r1, r0
   10cb2:	e000      	b.n	10cb6 <find_volume+0x12e>
   10cb4:	2100      	movs	r1, #0
   10cb6:	2314      	movs	r3, #20
   10cb8:	18fb      	adds	r3, r7, r3
   10cba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10cbc:	0092      	lsls	r2, r2, #2
   10cbe:	50d1      	str	r1, [r2, r3]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
   10cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10cc2:	3301      	adds	r3, #1
   10cc4:	643b      	str	r3, [r7, #64]	; 0x40
   10cc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10cc8:	2b03      	cmp	r3, #3
   10cca:	d9de      	bls.n	10c8a <find_volume+0x102>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
   10ccc:	2300      	movs	r3, #0
   10cce:	643b      	str	r3, [r7, #64]	; 0x40
		if (i != 0) i--;
   10cd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10cd2:	2b00      	cmp	r3, #0
   10cd4:	d002      	beq.n	10cdc <find_volume+0x154>
   10cd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10cd8:	3b01      	subs	r3, #1
   10cda:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
   10cdc:	2314      	movs	r3, #20
   10cde:	18fb      	adds	r3, r7, r3
   10ce0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10ce2:	0092      	lsls	r2, r2, #2
   10ce4:	58d3      	ldr	r3, [r2, r3]
   10ce6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
   10ce8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   10cea:	2b00      	cmp	r3, #0
   10cec:	d008      	beq.n	10d00 <find_volume+0x178>
   10cee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   10cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10cf2:	0011      	movs	r1, r2
   10cf4:	0018      	movs	r0, r3
   10cf6:	4b79      	ldr	r3, [pc, #484]	; (10edc <find_volume+0x354>)
   10cf8:	4798      	blx	r3
   10cfa:	0003      	movs	r3, r0
   10cfc:	001a      	movs	r2, r3
   10cfe:	e000      	b.n	10d02 <find_volume+0x17a>
   10d00:	2203      	movs	r2, #3
   10d02:	2357      	movs	r3, #87	; 0x57
   10d04:	18fb      	adds	r3, r7, r3
   10d06:	701a      	strb	r2, [r3, #0]
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
   10d08:	2357      	movs	r3, #87	; 0x57
   10d0a:	18fb      	adds	r3, r7, r3
   10d0c:	781b      	ldrb	r3, [r3, #0]
   10d0e:	2b01      	cmp	r3, #1
   10d10:	d905      	bls.n	10d1e <find_volume+0x196>
   10d12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10d14:	3301      	adds	r3, #1
   10d16:	643b      	str	r3, [r7, #64]	; 0x40
   10d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10d1a:	2b03      	cmp	r3, #3
   10d1c:	d9de      	bls.n	10cdc <find_volume+0x154>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
   10d1e:	2357      	movs	r3, #87	; 0x57
   10d20:	18fb      	adds	r3, r7, r3
   10d22:	781b      	ldrb	r3, [r3, #0]
   10d24:	2b04      	cmp	r3, #4
   10d26:	d101      	bne.n	10d2c <find_volume+0x1a4>
   10d28:	2301      	movs	r3, #1
   10d2a:	e1b0      	b.n	1108e <find_volume+0x506>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
   10d2c:	2357      	movs	r3, #87	; 0x57
   10d2e:	18fb      	adds	r3, r7, r3
   10d30:	781b      	ldrb	r3, [r3, #0]
   10d32:	2b01      	cmp	r3, #1
   10d34:	d901      	bls.n	10d3a <find_volume+0x1b2>
   10d36:	230d      	movs	r3, #13
   10d38:	e1a9      	b.n	1108e <find_volume+0x506>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
   10d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10d3c:	3334      	adds	r3, #52	; 0x34
   10d3e:	330b      	adds	r3, #11
   10d40:	0018      	movs	r0, r3
   10d42:	4b68      	ldr	r3, [pc, #416]	; (10ee4 <find_volume+0x35c>)
   10d44:	4798      	blx	r3
   10d46:	0003      	movs	r3, r0
   10d48:	001a      	movs	r2, r3
   10d4a:	2380      	movs	r3, #128	; 0x80
   10d4c:	009b      	lsls	r3, r3, #2
   10d4e:	429a      	cmp	r2, r3
   10d50:	d001      	beq.n	10d56 <find_volume+0x1ce>
   10d52:	230d      	movs	r3, #13
   10d54:	e19b      	b.n	1108e <find_volume+0x506>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
   10d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10d58:	3334      	adds	r3, #52	; 0x34
   10d5a:	3316      	adds	r3, #22
   10d5c:	0018      	movs	r0, r3
   10d5e:	4b61      	ldr	r3, [pc, #388]	; (10ee4 <find_volume+0x35c>)
   10d60:	4798      	blx	r3
   10d62:	0003      	movs	r3, r0
   10d64:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
   10d66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   10d68:	2b00      	cmp	r3, #0
   10d6a:	d107      	bne.n	10d7c <find_volume+0x1f4>
   10d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10d6e:	3334      	adds	r3, #52	; 0x34
   10d70:	3324      	adds	r3, #36	; 0x24
   10d72:	0018      	movs	r0, r3
   10d74:	4b5a      	ldr	r3, [pc, #360]	; (10ee0 <find_volume+0x358>)
   10d76:	4798      	blx	r3
   10d78:	0003      	movs	r3, r0
   10d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
		fs->fsize = fasize;
   10d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10d7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   10d80:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
   10d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10d84:	2244      	movs	r2, #68	; 0x44
   10d86:	5c9a      	ldrb	r2, [r3, r2]
   10d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10d8a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
   10d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10d8e:	789b      	ldrb	r3, [r3, #2]
   10d90:	2b01      	cmp	r3, #1
   10d92:	d005      	beq.n	10da0 <find_volume+0x218>
   10d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10d96:	789b      	ldrb	r3, [r3, #2]
   10d98:	2b02      	cmp	r3, #2
   10d9a:	d001      	beq.n	10da0 <find_volume+0x218>
   10d9c:	230d      	movs	r3, #13
   10d9e:	e176      	b.n	1108e <find_volume+0x506>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
   10da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10da2:	789b      	ldrb	r3, [r3, #2]
   10da4:	001a      	movs	r2, r3
   10da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   10da8:	4353      	muls	r3, r2
   10daa:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
   10dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10dae:	2241      	movs	r2, #65	; 0x41
   10db0:	5c9b      	ldrb	r3, [r3, r2]
   10db2:	b29a      	uxth	r2, r3
   10db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10db6:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   10db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10dba:	895b      	ldrh	r3, [r3, #10]
   10dbc:	2b00      	cmp	r3, #0
   10dbe:	d007      	beq.n	10dd0 <find_volume+0x248>
   10dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10dc2:	895b      	ldrh	r3, [r3, #10]
   10dc4:	001a      	movs	r2, r3
   10dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10dc8:	895b      	ldrh	r3, [r3, #10]
   10dca:	3b01      	subs	r3, #1
   10dcc:	4013      	ands	r3, r2
   10dce:	d001      	beq.n	10dd4 <find_volume+0x24c>
   10dd0:	230d      	movs	r3, #13
   10dd2:	e15c      	b.n	1108e <find_volume+0x506>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
   10dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10dd6:	3334      	adds	r3, #52	; 0x34
   10dd8:	3311      	adds	r3, #17
   10dda:	0018      	movs	r0, r3
   10ddc:	4b41      	ldr	r3, [pc, #260]	; (10ee4 <find_volume+0x35c>)
   10dde:	4798      	blx	r3
   10de0:	0003      	movs	r3, r0
   10de2:	001a      	movs	r2, r3
   10de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10de6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
   10de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10dea:	891b      	ldrh	r3, [r3, #8]
   10dec:	220f      	movs	r2, #15
   10dee:	4013      	ands	r3, r2
   10df0:	b29b      	uxth	r3, r3
   10df2:	2b00      	cmp	r3, #0
   10df4:	d001      	beq.n	10dfa <find_volume+0x272>
   10df6:	230d      	movs	r3, #13
   10df8:	e149      	b.n	1108e <find_volume+0x506>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
   10dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10dfc:	3334      	adds	r3, #52	; 0x34
   10dfe:	3313      	adds	r3, #19
   10e00:	0018      	movs	r0, r3
   10e02:	4b38      	ldr	r3, [pc, #224]	; (10ee4 <find_volume+0x35c>)
   10e04:	4798      	blx	r3
   10e06:	0003      	movs	r3, r0
   10e08:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
   10e0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10e0c:	2b00      	cmp	r3, #0
   10e0e:	d107      	bne.n	10e20 <find_volume+0x298>
   10e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10e12:	3334      	adds	r3, #52	; 0x34
   10e14:	3320      	adds	r3, #32
   10e16:	0018      	movs	r0, r3
   10e18:	4b31      	ldr	r3, [pc, #196]	; (10ee0 <find_volume+0x358>)
   10e1a:	4798      	blx	r3
   10e1c:	0003      	movs	r3, r0
   10e1e:	64bb      	str	r3, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
   10e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10e22:	3334      	adds	r3, #52	; 0x34
   10e24:	330e      	adds	r3, #14
   10e26:	222e      	movs	r2, #46	; 0x2e
   10e28:	18bc      	adds	r4, r7, r2
   10e2a:	0018      	movs	r0, r3
   10e2c:	4b2d      	ldr	r3, [pc, #180]	; (10ee4 <find_volume+0x35c>)
   10e2e:	4798      	blx	r3
   10e30:	0003      	movs	r3, r0
   10e32:	8023      	strh	r3, [r4, #0]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
   10e34:	232e      	movs	r3, #46	; 0x2e
   10e36:	18fb      	adds	r3, r7, r3
   10e38:	881b      	ldrh	r3, [r3, #0]
   10e3a:	2b00      	cmp	r3, #0
   10e3c:	d101      	bne.n	10e42 <find_volume+0x2ba>
   10e3e:	230d      	movs	r3, #13
   10e40:	e125      	b.n	1108e <find_volume+0x506>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
   10e42:	232e      	movs	r3, #46	; 0x2e
   10e44:	18fb      	adds	r3, r7, r3
   10e46:	881a      	ldrh	r2, [r3, #0]
   10e48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   10e4a:	18d3      	adds	r3, r2, r3
   10e4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
   10e4e:	8912      	ldrh	r2, [r2, #8]
   10e50:	0912      	lsrs	r2, r2, #4
   10e52:	b292      	uxth	r2, r2
   10e54:	189b      	adds	r3, r3, r2
   10e56:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
   10e58:	6cba      	ldr	r2, [r7, #72]	; 0x48
   10e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10e5c:	429a      	cmp	r2, r3
   10e5e:	d201      	bcs.n	10e64 <find_volume+0x2dc>
   10e60:	230d      	movs	r3, #13
   10e62:	e114      	b.n	1108e <find_volume+0x506>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
   10e64:	6cba      	ldr	r2, [r7, #72]	; 0x48
   10e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10e68:	1ad2      	subs	r2, r2, r3
   10e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10e6c:	895b      	ldrh	r3, [r3, #10]
   10e6e:	0019      	movs	r1, r3
   10e70:	4b1d      	ldr	r3, [pc, #116]	; (10ee8 <find_volume+0x360>)
   10e72:	0010      	movs	r0, r2
   10e74:	4798      	blx	r3
   10e76:	0003      	movs	r3, r0
   10e78:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   10e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10e7c:	2b00      	cmp	r3, #0
   10e7e:	d101      	bne.n	10e84 <find_volume+0x2fc>
   10e80:	230d      	movs	r3, #13
   10e82:	e104      	b.n	1108e <find_volume+0x506>
		fmt = 0;
   10e84:	2357      	movs	r3, #87	; 0x57
   10e86:	18fb      	adds	r3, r7, r3
   10e88:	2200      	movs	r2, #0
   10e8a:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
   10e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10e8e:	4a17      	ldr	r2, [pc, #92]	; (10eec <find_volume+0x364>)
   10e90:	4293      	cmp	r3, r2
   10e92:	d803      	bhi.n	10e9c <find_volume+0x314>
   10e94:	2357      	movs	r3, #87	; 0x57
   10e96:	18fb      	adds	r3, r7, r3
   10e98:	2203      	movs	r2, #3
   10e9a:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
   10e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10e9e:	4a14      	ldr	r2, [pc, #80]	; (10ef0 <find_volume+0x368>)
   10ea0:	4293      	cmp	r3, r2
   10ea2:	d803      	bhi.n	10eac <find_volume+0x324>
   10ea4:	2357      	movs	r3, #87	; 0x57
   10ea6:	18fb      	adds	r3, r7, r3
   10ea8:	2202      	movs	r2, #2
   10eaa:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
   10eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10eae:	4a11      	ldr	r2, [pc, #68]	; (10ef4 <find_volume+0x36c>)
   10eb0:	4293      	cmp	r3, r2
   10eb2:	d803      	bhi.n	10ebc <find_volume+0x334>
   10eb4:	2357      	movs	r3, #87	; 0x57
   10eb6:	18fb      	adds	r3, r7, r3
   10eb8:	2201      	movs	r2, #1
   10eba:	701a      	strb	r2, [r3, #0]
		if (fmt == 0) return FR_NO_FILESYSTEM;
   10ebc:	2357      	movs	r3, #87	; 0x57
   10ebe:	18fb      	adds	r3, r7, r3
   10ec0:	781b      	ldrb	r3, [r3, #0]
   10ec2:	2b00      	cmp	r3, #0
   10ec4:	d118      	bne.n	10ef8 <find_volume+0x370>
   10ec6:	230d      	movs	r3, #13
   10ec8:	e0e1      	b.n	1108e <find_volume+0x506>
   10eca:	46c0      	nop			; (mov r8, r8)
   10ecc:	00010a39 	.word	0x00010a39
   10ed0:	20000dd0 	.word	0x20000dd0
   10ed4:	0000ea91 	.word	0x0000ea91
   10ed8:	0000ea15 	.word	0x0000ea15
   10edc:	00010ad1 	.word	0x00010ad1
   10ee0:	0000ecc5 	.word	0x0000ecc5
   10ee4:	0000ec89 	.word	0x0000ec89
   10ee8:	0001df49 	.word	0x0001df49
   10eec:	0ffffff5 	.word	0x0ffffff5
   10ef0:	0000fff5 	.word	0x0000fff5
   10ef4:	00000ff5 	.word	0x00000ff5

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
   10ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10efa:	1c9a      	adds	r2, r3, #2
   10efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10efe:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
   10f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10f02:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   10f04:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
   10f06:	232e      	movs	r3, #46	; 0x2e
   10f08:	18fb      	adds	r3, r7, r3
   10f0a:	881a      	ldrh	r2, [r3, #0]
   10f0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   10f0e:	18d2      	adds	r2, r2, r3
   10f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10f12:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
   10f14:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   10f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10f18:	18d2      	adds	r2, r2, r3
   10f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10f1c:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
   10f1e:	2357      	movs	r3, #87	; 0x57
   10f20:	18fb      	adds	r3, r7, r3
   10f22:	781b      	ldrb	r3, [r3, #0]
   10f24:	2b03      	cmp	r3, #3
   10f26:	d11d      	bne.n	10f64 <find_volume+0x3dc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
   10f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10f2a:	3334      	adds	r3, #52	; 0x34
   10f2c:	332a      	adds	r3, #42	; 0x2a
   10f2e:	0018      	movs	r0, r3
   10f30:	4b59      	ldr	r3, [pc, #356]	; (11098 <find_volume+0x510>)
   10f32:	4798      	blx	r3
   10f34:	1e03      	subs	r3, r0, #0
   10f36:	d001      	beq.n	10f3c <find_volume+0x3b4>
   10f38:	230d      	movs	r3, #13
   10f3a:	e0a8      	b.n	1108e <find_volume+0x506>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
   10f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10f3e:	891b      	ldrh	r3, [r3, #8]
   10f40:	2b00      	cmp	r3, #0
   10f42:	d001      	beq.n	10f48 <find_volume+0x3c0>
   10f44:	230d      	movs	r3, #13
   10f46:	e0a2      	b.n	1108e <find_volume+0x506>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
   10f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10f4a:	3334      	adds	r3, #52	; 0x34
   10f4c:	332c      	adds	r3, #44	; 0x2c
   10f4e:	0018      	movs	r0, r3
   10f50:	4b52      	ldr	r3, [pc, #328]	; (1109c <find_volume+0x514>)
   10f52:	4798      	blx	r3
   10f54:	0002      	movs	r2, r0
   10f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10f58:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
   10f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10f5c:	699b      	ldr	r3, [r3, #24]
   10f5e:	009b      	lsls	r3, r3, #2
   10f60:	647b      	str	r3, [r7, #68]	; 0x44
   10f62:	e020      	b.n	10fa6 <find_volume+0x41e>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   10f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10f66:	891b      	ldrh	r3, [r3, #8]
   10f68:	2b00      	cmp	r3, #0
   10f6a:	d101      	bne.n	10f70 <find_volume+0x3e8>
   10f6c:	230d      	movs	r3, #13
   10f6e:	e08e      	b.n	1108e <find_volume+0x506>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
   10f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10f72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   10f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   10f76:	18d2      	adds	r2, r2, r3
   10f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10f7a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   10f7c:	2357      	movs	r3, #87	; 0x57
   10f7e:	18fb      	adds	r3, r7, r3
   10f80:	781b      	ldrb	r3, [r3, #0]
   10f82:	2b02      	cmp	r3, #2
   10f84:	d103      	bne.n	10f8e <find_volume+0x406>
   10f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10f88:	699b      	ldr	r3, [r3, #24]
   10f8a:	005b      	lsls	r3, r3, #1
   10f8c:	e00a      	b.n	10fa4 <find_volume+0x41c>
   10f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10f90:	699a      	ldr	r2, [r3, #24]
   10f92:	0013      	movs	r3, r2
   10f94:	005b      	lsls	r3, r3, #1
   10f96:	189b      	adds	r3, r3, r2
   10f98:	085a      	lsrs	r2, r3, #1
   10f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10f9c:	699b      	ldr	r3, [r3, #24]
   10f9e:	2101      	movs	r1, #1
   10fa0:	400b      	ands	r3, r1
   10fa2:	18d3      	adds	r3, r2, r3
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
   10fa4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
   10fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10fa8:	69da      	ldr	r2, [r3, #28]
   10faa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   10fac:	493c      	ldr	r1, [pc, #240]	; (110a0 <find_volume+0x518>)
   10fae:	468c      	mov	ip, r1
   10fb0:	4463      	add	r3, ip
   10fb2:	0a5b      	lsrs	r3, r3, #9
   10fb4:	429a      	cmp	r2, r3
   10fb6:	d201      	bcs.n	10fbc <find_volume+0x434>
   10fb8:	230d      	movs	r3, #13
   10fba:	e068      	b.n	1108e <find_volume+0x506>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
   10fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10fbe:	2201      	movs	r2, #1
   10fc0:	4252      	negs	r2, r2
   10fc2:	615a      	str	r2, [r3, #20]
   10fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10fc6:	695a      	ldr	r2, [r3, #20]
   10fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10fca:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
   10fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10fce:	2280      	movs	r2, #128	; 0x80
   10fd0:	711a      	strb	r2, [r3, #4]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
   10fd2:	2357      	movs	r3, #87	; 0x57
   10fd4:	18fb      	adds	r3, r7, r3
   10fd6:	781b      	ldrb	r3, [r3, #0]
   10fd8:	2b03      	cmp	r3, #3
   10fda:	d148      	bne.n	1106e <find_volume+0x4e6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
   10fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10fde:	3334      	adds	r3, #52	; 0x34
   10fe0:	3330      	adds	r3, #48	; 0x30
   10fe2:	0018      	movs	r0, r3
   10fe4:	4b2c      	ldr	r3, [pc, #176]	; (11098 <find_volume+0x510>)
   10fe6:	4798      	blx	r3
   10fe8:	0003      	movs	r3, r0
   10fea:	2b01      	cmp	r3, #1
   10fec:	d13f      	bne.n	1106e <find_volume+0x4e6>
			&& move_window(fs, bsect + 1) == FR_OK)
   10fee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   10ff0:	1c5a      	adds	r2, r3, #1
   10ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10ff4:	0011      	movs	r1, r2
   10ff6:	0018      	movs	r0, r3
   10ff8:	4b2a      	ldr	r3, [pc, #168]	; (110a4 <find_volume+0x51c>)
   10ffa:	4798      	blx	r3
   10ffc:	1e03      	subs	r3, r0, #0
   10ffe:	d136      	bne.n	1106e <find_volume+0x4e6>
		{
			fs->fsi_flag = 0;
   11000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11002:	2200      	movs	r2, #0
   11004:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
   11006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11008:	3334      	adds	r3, #52	; 0x34
   1100a:	33ff      	adds	r3, #255	; 0xff
   1100c:	33ff      	adds	r3, #255	; 0xff
   1100e:	0018      	movs	r0, r3
   11010:	4b21      	ldr	r3, [pc, #132]	; (11098 <find_volume+0x510>)
   11012:	4798      	blx	r3
   11014:	0003      	movs	r3, r0
   11016:	001a      	movs	r2, r3
   11018:	4b23      	ldr	r3, [pc, #140]	; (110a8 <find_volume+0x520>)
   1101a:	429a      	cmp	r2, r3
   1101c:	d127      	bne.n	1106e <find_volume+0x4e6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
   1101e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11020:	3334      	adds	r3, #52	; 0x34
   11022:	0018      	movs	r0, r3
   11024:	4b1d      	ldr	r3, [pc, #116]	; (1109c <find_volume+0x514>)
   11026:	4798      	blx	r3
   11028:	0002      	movs	r2, r0
   1102a:	4b20      	ldr	r3, [pc, #128]	; (110ac <find_volume+0x524>)
   1102c:	429a      	cmp	r2, r3
   1102e:	d11e      	bne.n	1106e <find_volume+0x4e6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
   11030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11032:	3334      	adds	r3, #52	; 0x34
   11034:	33e5      	adds	r3, #229	; 0xe5
   11036:	33ff      	adds	r3, #255	; 0xff
   11038:	0018      	movs	r0, r3
   1103a:	4b18      	ldr	r3, [pc, #96]	; (1109c <find_volume+0x514>)
   1103c:	4798      	blx	r3
   1103e:	0002      	movs	r2, r0
   11040:	4b1b      	ldr	r3, [pc, #108]	; (110b0 <find_volume+0x528>)
   11042:	429a      	cmp	r2, r3
   11044:	d113      	bne.n	1106e <find_volume+0x4e6>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
   11046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11048:	3334      	adds	r3, #52	; 0x34
   1104a:	33e9      	adds	r3, #233	; 0xe9
   1104c:	33ff      	adds	r3, #255	; 0xff
   1104e:	0018      	movs	r0, r3
   11050:	4b12      	ldr	r3, [pc, #72]	; (1109c <find_volume+0x514>)
   11052:	4798      	blx	r3
   11054:	0002      	movs	r2, r0
   11056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11058:	615a      	str	r2, [r3, #20]
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
   1105a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1105c:	3334      	adds	r3, #52	; 0x34
   1105e:	33ed      	adds	r3, #237	; 0xed
   11060:	33ff      	adds	r3, #255	; 0xff
   11062:	0018      	movs	r0, r3
   11064:	4b0d      	ldr	r3, [pc, #52]	; (1109c <find_volume+0x514>)
   11066:	4798      	blx	r3
   11068:	0002      	movs	r2, r0
   1106a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1106c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
   1106e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11070:	2257      	movs	r2, #87	; 0x57
   11072:	18ba      	adds	r2, r7, r2
   11074:	7812      	ldrb	r2, [r2, #0]
   11076:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
   11078:	4b0e      	ldr	r3, [pc, #56]	; (110b4 <find_volume+0x52c>)
   1107a:	881b      	ldrh	r3, [r3, #0]
   1107c:	3301      	adds	r3, #1
   1107e:	b29a      	uxth	r2, r3
   11080:	4b0c      	ldr	r3, [pc, #48]	; (110b4 <find_volume+0x52c>)
   11082:	801a      	strh	r2, [r3, #0]
   11084:	4b0b      	ldr	r3, [pc, #44]	; (110b4 <find_volume+0x52c>)
   11086:	881a      	ldrh	r2, [r3, #0]
   11088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1108a:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
   1108c:	2300      	movs	r3, #0
}
   1108e:	0018      	movs	r0, r3
   11090:	46bd      	mov	sp, r7
   11092:	b017      	add	sp, #92	; 0x5c
   11094:	bd90      	pop	{r4, r7, pc}
   11096:	46c0      	nop			; (mov r8, r8)
   11098:	0000ec89 	.word	0x0000ec89
   1109c:	0000ecc5 	.word	0x0000ecc5
   110a0:	000001ff 	.word	0x000001ff
   110a4:	0000f015 	.word	0x0000f015
   110a8:	0000aa55 	.word	0x0000aa55
   110ac:	41615252 	.word	0x41615252
   110b0:	61417272 	.word	0x61417272
   110b4:	20000dd4 	.word	0x20000dd4

000110b8 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
   110b8:	b580      	push	{r7, lr}
   110ba:	b084      	sub	sp, #16
   110bc:	af00      	add	r7, sp, #0
   110be:	6078      	str	r0, [r7, #4]
   110c0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
   110c2:	230f      	movs	r3, #15
   110c4:	18fb      	adds	r3, r7, r3
   110c6:	2209      	movs	r2, #9
   110c8:	701a      	strb	r2, [r3, #0]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
   110ca:	687b      	ldr	r3, [r7, #4]
   110cc:	2b00      	cmp	r3, #0
   110ce:	d01e      	beq.n	1110e <validate+0x56>
   110d0:	687b      	ldr	r3, [r7, #4]
   110d2:	681b      	ldr	r3, [r3, #0]
   110d4:	2b00      	cmp	r3, #0
   110d6:	d01a      	beq.n	1110e <validate+0x56>
   110d8:	687b      	ldr	r3, [r7, #4]
   110da:	681b      	ldr	r3, [r3, #0]
   110dc:	781b      	ldrb	r3, [r3, #0]
   110de:	2b00      	cmp	r3, #0
   110e0:	d015      	beq.n	1110e <validate+0x56>
   110e2:	687b      	ldr	r3, [r7, #4]
   110e4:	889a      	ldrh	r2, [r3, #4]
   110e6:	687b      	ldr	r3, [r7, #4]
   110e8:	681b      	ldr	r3, [r3, #0]
   110ea:	88db      	ldrh	r3, [r3, #6]
   110ec:	429a      	cmp	r2, r3
   110ee:	d10e      	bne.n	1110e <validate+0x56>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
   110f0:	687b      	ldr	r3, [r7, #4]
   110f2:	681b      	ldr	r3, [r3, #0]
   110f4:	785b      	ldrb	r3, [r3, #1]
   110f6:	0018      	movs	r0, r3
   110f8:	4b0e      	ldr	r3, [pc, #56]	; (11134 <validate+0x7c>)
   110fa:	4798      	blx	r3
   110fc:	0003      	movs	r3, r0
   110fe:	001a      	movs	r2, r3
   11100:	2301      	movs	r3, #1
   11102:	4013      	ands	r3, r2
   11104:	d103      	bne.n	1110e <validate+0x56>
			res = FR_OK;
   11106:	230f      	movs	r3, #15
   11108:	18fb      	adds	r3, r7, r3
   1110a:	2200      	movs	r2, #0
   1110c:	701a      	strb	r2, [r3, #0]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
   1110e:	230f      	movs	r3, #15
   11110:	18fb      	adds	r3, r7, r3
   11112:	781b      	ldrb	r3, [r3, #0]
   11114:	2b00      	cmp	r3, #0
   11116:	d102      	bne.n	1111e <validate+0x66>
   11118:	687b      	ldr	r3, [r7, #4]
   1111a:	681a      	ldr	r2, [r3, #0]
   1111c:	e000      	b.n	11120 <validate+0x68>
   1111e:	2200      	movs	r2, #0
   11120:	683b      	ldr	r3, [r7, #0]
   11122:	601a      	str	r2, [r3, #0]
	return res;
   11124:	230f      	movs	r3, #15
   11126:	18fb      	adds	r3, r7, r3
   11128:	781b      	ldrb	r3, [r3, #0]
}
   1112a:	0018      	movs	r0, r3
   1112c:	46bd      	mov	sp, r7
   1112e:	b004      	add	sp, #16
   11130:	bd80      	pop	{r7, pc}
   11132:	46c0      	nop			; (mov r8, r8)
   11134:	0000ea91 	.word	0x0000ea91

00011138 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
   11138:	b590      	push	{r4, r7, lr}
   1113a:	b089      	sub	sp, #36	; 0x24
   1113c:	af00      	add	r7, sp, #0
   1113e:	60f8      	str	r0, [r7, #12]
   11140:	60b9      	str	r1, [r7, #8]
   11142:	1dfb      	adds	r3, r7, #7
   11144:	701a      	strb	r2, [r3, #0]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
   11146:	68bb      	ldr	r3, [r7, #8]
   11148:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
   1114a:	2310      	movs	r3, #16
   1114c:	18fb      	adds	r3, r7, r3
   1114e:	0018      	movs	r0, r3
   11150:	4b1b      	ldr	r3, [pc, #108]	; (111c0 <f_mount+0x88>)
   11152:	4798      	blx	r3
   11154:	0003      	movs	r3, r0
   11156:	61fb      	str	r3, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
   11158:	69fb      	ldr	r3, [r7, #28]
   1115a:	2b00      	cmp	r3, #0
   1115c:	da01      	bge.n	11162 <f_mount+0x2a>
   1115e:	230b      	movs	r3, #11
   11160:	e02a      	b.n	111b8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
   11162:	4b18      	ldr	r3, [pc, #96]	; (111c4 <f_mount+0x8c>)
   11164:	69fa      	ldr	r2, [r7, #28]
   11166:	0092      	lsls	r2, r2, #2
   11168:	58d3      	ldr	r3, [r2, r3]
   1116a:	61bb      	str	r3, [r7, #24]

	if (cfs) {
   1116c:	69bb      	ldr	r3, [r7, #24]
   1116e:	2b00      	cmp	r3, #0
   11170:	d002      	beq.n	11178 <f_mount+0x40>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
   11172:	69bb      	ldr	r3, [r7, #24]
   11174:	2200      	movs	r2, #0
   11176:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
   11178:	68fb      	ldr	r3, [r7, #12]
   1117a:	2b00      	cmp	r3, #0
   1117c:	d002      	beq.n	11184 <f_mount+0x4c>
		fs->fs_type = 0;				/* Clear new fs object */
   1117e:	68fb      	ldr	r3, [r7, #12]
   11180:	2200      	movs	r2, #0
   11182:	701a      	strb	r2, [r3, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
   11184:	68f9      	ldr	r1, [r7, #12]
   11186:	4b0f      	ldr	r3, [pc, #60]	; (111c4 <f_mount+0x8c>)
   11188:	69fa      	ldr	r2, [r7, #28]
   1118a:	0092      	lsls	r2, r2, #2
   1118c:	50d1      	str	r1, [r2, r3]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
   1118e:	1dfb      	adds	r3, r7, #7
   11190:	781b      	ldrb	r3, [r3, #0]
   11192:	2b00      	cmp	r3, #0
   11194:	d101      	bne.n	1119a <f_mount+0x62>
   11196:	2300      	movs	r3, #0
   11198:	e00e      	b.n	111b8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
   1119a:	2317      	movs	r3, #23
   1119c:	18fc      	adds	r4, r7, r3
   1119e:	230c      	movs	r3, #12
   111a0:	18f9      	adds	r1, r7, r3
   111a2:	2308      	movs	r3, #8
   111a4:	18fb      	adds	r3, r7, r3
   111a6:	2200      	movs	r2, #0
   111a8:	0018      	movs	r0, r3
   111aa:	4b07      	ldr	r3, [pc, #28]	; (111c8 <f_mount+0x90>)
   111ac:	4798      	blx	r3
   111ae:	0003      	movs	r3, r0
   111b0:	7023      	strb	r3, [r4, #0]
	LEAVE_FF(fs, res);
   111b2:	2317      	movs	r3, #23
   111b4:	18fb      	adds	r3, r7, r3
   111b6:	781b      	ldrb	r3, [r3, #0]
}
   111b8:	0018      	movs	r0, r3
   111ba:	46bd      	mov	sp, r7
   111bc:	b009      	add	sp, #36	; 0x24
   111be:	bd90      	pop	{r4, r7, pc}
   111c0:	00010a39 	.word	0x00010a39
   111c4:	20000dd0 	.word	0x20000dd0
   111c8:	00010b89 	.word	0x00010b89

000111cc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   111cc:	b590      	push	{r4, r7, lr}
   111ce:	4ca9      	ldr	r4, [pc, #676]	; (11474 <f_open+0x2a8>)
   111d0:	44a5      	add	sp, r4
   111d2:	af00      	add	r7, sp, #0
   111d4:	60f8      	str	r0, [r7, #12]
   111d6:	60b9      	str	r1, [r7, #8]
   111d8:	4ba7      	ldr	r3, [pc, #668]	; (11478 <f_open+0x2ac>)
   111da:	2198      	movs	r1, #152	; 0x98
   111dc:	0089      	lsls	r1, r1, #2
   111de:	468c      	mov	ip, r1
   111e0:	44bc      	add	ip, r7
   111e2:	4463      	add	r3, ip
   111e4:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
   111e6:	68fb      	ldr	r3, [r7, #12]
   111e8:	2b00      	cmp	r3, #0
   111ea:	d101      	bne.n	111f0 <f_open+0x24>
   111ec:	2309      	movs	r3, #9
   111ee:	e2a4      	b.n	1173a <f_open+0x56e>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
   111f0:	4ba1      	ldr	r3, [pc, #644]	; (11478 <f_open+0x2ac>)
   111f2:	2298      	movs	r2, #152	; 0x98
   111f4:	0092      	lsls	r2, r2, #2
   111f6:	4694      	mov	ip, r2
   111f8:	44bc      	add	ip, r7
   111fa:	4463      	add	r3, ip
   111fc:	4a9e      	ldr	r2, [pc, #632]	; (11478 <f_open+0x2ac>)
   111fe:	2198      	movs	r1, #152	; 0x98
   11200:	0089      	lsls	r1, r1, #2
   11202:	468c      	mov	ip, r1
   11204:	44bc      	add	ip, r7
   11206:	4462      	add	r2, ip
   11208:	7812      	ldrb	r2, [r2, #0]
   1120a:	213f      	movs	r1, #63	; 0x3f
   1120c:	400a      	ands	r2, r1
   1120e:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
   11210:	4b9a      	ldr	r3, [pc, #616]	; (1147c <f_open+0x2b0>)
   11212:	18fc      	adds	r4, r7, r3
   11214:	4b98      	ldr	r3, [pc, #608]	; (11478 <f_open+0x2ac>)
   11216:	2298      	movs	r2, #152	; 0x98
   11218:	0092      	lsls	r2, r2, #2
   1121a:	4694      	mov	ip, r2
   1121c:	44bc      	add	ip, r7
   1121e:	4463      	add	r3, ip
   11220:	781a      	ldrb	r2, [r3, #0]
   11222:	2384      	movs	r3, #132	; 0x84
   11224:	009b      	lsls	r3, r3, #2
   11226:	18f9      	adds	r1, r7, r3
   11228:	2308      	movs	r3, #8
   1122a:	18fb      	adds	r3, r7, r3
   1122c:	0018      	movs	r0, r3
   1122e:	4b94      	ldr	r3, [pc, #592]	; (11480 <f_open+0x2b4>)
   11230:	4798      	blx	r3
   11232:	0003      	movs	r3, r0
   11234:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   11236:	4b91      	ldr	r3, [pc, #580]	; (1147c <f_open+0x2b0>)
   11238:	18fb      	adds	r3, r7, r3
   1123a:	781b      	ldrb	r3, [r3, #0]
   1123c:	2b00      	cmp	r3, #0
   1123e:	d000      	beq.n	11242 <f_open+0x76>
   11240:	e270      	b.n	11724 <f_open+0x558>
		dj.obj.fs = fs;
   11242:	2384      	movs	r3, #132	; 0x84
   11244:	009b      	lsls	r3, r3, #2
   11246:	18fb      	adds	r3, r7, r3
   11248:	681a      	ldr	r2, [r3, #0]
   1124a:	2385      	movs	r3, #133	; 0x85
   1124c:	009b      	lsls	r3, r3, #2
   1124e:	18fb      	adds	r3, r7, r3
   11250:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
   11252:	2384      	movs	r3, #132	; 0x84
   11254:	009b      	lsls	r3, r3, #2
   11256:	18fb      	adds	r3, r7, r3
   11258:	681b      	ldr	r3, [r3, #0]
   1125a:	2210      	movs	r2, #16
   1125c:	18ba      	adds	r2, r7, r2
   1125e:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
   11260:	68ba      	ldr	r2, [r7, #8]
   11262:	4b86      	ldr	r3, [pc, #536]	; (1147c <f_open+0x2b0>)
   11264:	18fc      	adds	r4, r7, r3
   11266:	2385      	movs	r3, #133	; 0x85
   11268:	009b      	lsls	r3, r3, #2
   1126a:	18fb      	adds	r3, r7, r3
   1126c:	0011      	movs	r1, r2
   1126e:	0018      	movs	r0, r3
   11270:	4b84      	ldr	r3, [pc, #528]	; (11484 <f_open+0x2b8>)
   11272:	4798      	blx	r3
   11274:	0003      	movs	r3, r0
   11276:	7023      	strb	r3, [r4, #0]
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
   11278:	4b80      	ldr	r3, [pc, #512]	; (1147c <f_open+0x2b0>)
   1127a:	18fb      	adds	r3, r7, r3
   1127c:	781b      	ldrb	r3, [r3, #0]
   1127e:	2b00      	cmp	r3, #0
   11280:	d10b      	bne.n	1129a <f_open+0xce>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
   11282:	2385      	movs	r3, #133	; 0x85
   11284:	009b      	lsls	r3, r3, #2
   11286:	18fb      	adds	r3, r7, r3
   11288:	222b      	movs	r2, #43	; 0x2b
   1128a:	5c9b      	ldrb	r3, [r3, r2]
   1128c:	b25b      	sxtb	r3, r3
   1128e:	2b00      	cmp	r3, #0
   11290:	da03      	bge.n	1129a <f_open+0xce>
				res = FR_INVALID_NAME;
   11292:	4b7a      	ldr	r3, [pc, #488]	; (1147c <f_open+0x2b0>)
   11294:	18fb      	adds	r3, r7, r3
   11296:	2206      	movs	r2, #6
   11298:	701a      	strb	r2, [r3, #0]
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);		/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   1129a:	4b77      	ldr	r3, [pc, #476]	; (11478 <f_open+0x2ac>)
   1129c:	2298      	movs	r2, #152	; 0x98
   1129e:	0092      	lsls	r2, r2, #2
   112a0:	4694      	mov	ip, r2
   112a2:	44bc      	add	ip, r7
   112a4:	4463      	add	r3, ip
   112a6:	781b      	ldrb	r3, [r3, #0]
   112a8:	221c      	movs	r2, #28
   112aa:	4013      	ands	r3, r2
   112ac:	d100      	bne.n	112b0 <f_open+0xe4>
   112ae:	e0cf      	b.n	11450 <f_open+0x284>
			if (res != FR_OK) {					/* No file, create new */
   112b0:	4b72      	ldr	r3, [pc, #456]	; (1147c <f_open+0x2b0>)
   112b2:	18fb      	adds	r3, r7, r3
   112b4:	781b      	ldrb	r3, [r3, #0]
   112b6:	2b00      	cmp	r3, #0
   112b8:	d01f      	beq.n	112fa <f_open+0x12e>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
   112ba:	4b70      	ldr	r3, [pc, #448]	; (1147c <f_open+0x2b0>)
   112bc:	18fb      	adds	r3, r7, r3
   112be:	781b      	ldrb	r3, [r3, #0]
   112c0:	2b04      	cmp	r3, #4
   112c2:	d109      	bne.n	112d8 <f_open+0x10c>
#if FF_FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
   112c4:	4b6d      	ldr	r3, [pc, #436]	; (1147c <f_open+0x2b0>)
   112c6:	18fc      	adds	r4, r7, r3
   112c8:	2385      	movs	r3, #133	; 0x85
   112ca:	009b      	lsls	r3, r3, #2
   112cc:	18fb      	adds	r3, r7, r3
   112ce:	0018      	movs	r0, r3
   112d0:	4b6d      	ldr	r3, [pc, #436]	; (11488 <f_open+0x2bc>)
   112d2:	4798      	blx	r3
   112d4:	0003      	movs	r3, r0
   112d6:	7023      	strb	r3, [r4, #0]
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
   112d8:	4b67      	ldr	r3, [pc, #412]	; (11478 <f_open+0x2ac>)
   112da:	2298      	movs	r2, #152	; 0x98
   112dc:	0092      	lsls	r2, r2, #2
   112de:	4694      	mov	ip, r2
   112e0:	44bc      	add	ip, r7
   112e2:	4463      	add	r3, ip
   112e4:	4a64      	ldr	r2, [pc, #400]	; (11478 <f_open+0x2ac>)
   112e6:	2198      	movs	r1, #152	; 0x98
   112e8:	0089      	lsls	r1, r1, #2
   112ea:	468c      	mov	ip, r1
   112ec:	44bc      	add	ip, r7
   112ee:	4462      	add	r2, ip
   112f0:	7812      	ldrb	r2, [r2, #0]
   112f2:	2108      	movs	r1, #8
   112f4:	430a      	orrs	r2, r1
   112f6:	701a      	strb	r2, [r3, #0]
   112f8:	e01a      	b.n	11330 <f_open+0x164>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   112fa:	2385      	movs	r3, #133	; 0x85
   112fc:	009b      	lsls	r3, r3, #2
   112fe:	18fb      	adds	r3, r7, r3
   11300:	799b      	ldrb	r3, [r3, #6]
   11302:	001a      	movs	r2, r3
   11304:	2311      	movs	r3, #17
   11306:	4013      	ands	r3, r2
   11308:	d004      	beq.n	11314 <f_open+0x148>
					res = FR_DENIED;
   1130a:	4b5c      	ldr	r3, [pc, #368]	; (1147c <f_open+0x2b0>)
   1130c:	18fb      	adds	r3, r7, r3
   1130e:	2207      	movs	r2, #7
   11310:	701a      	strb	r2, [r3, #0]
   11312:	e00d      	b.n	11330 <f_open+0x164>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
   11314:	4b58      	ldr	r3, [pc, #352]	; (11478 <f_open+0x2ac>)
   11316:	2298      	movs	r2, #152	; 0x98
   11318:	0092      	lsls	r2, r2, #2
   1131a:	4694      	mov	ip, r2
   1131c:	44bc      	add	ip, r7
   1131e:	4463      	add	r3, ip
   11320:	781b      	ldrb	r3, [r3, #0]
   11322:	2204      	movs	r2, #4
   11324:	4013      	ands	r3, r2
   11326:	d003      	beq.n	11330 <f_open+0x164>
   11328:	4b54      	ldr	r3, [pc, #336]	; (1147c <f_open+0x2b0>)
   1132a:	18fb      	adds	r3, r7, r3
   1132c:	2208      	movs	r2, #8
   1132e:	701a      	strb	r2, [r3, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
   11330:	4b52      	ldr	r3, [pc, #328]	; (1147c <f_open+0x2b0>)
   11332:	18fb      	adds	r3, r7, r3
   11334:	781b      	ldrb	r3, [r3, #0]
   11336:	2b00      	cmp	r3, #0
   11338:	d000      	beq.n	1133c <f_open+0x170>
   1133a:	e0c9      	b.n	114d0 <f_open+0x304>
   1133c:	4b4e      	ldr	r3, [pc, #312]	; (11478 <f_open+0x2ac>)
   1133e:	2298      	movs	r2, #152	; 0x98
   11340:	0092      	lsls	r2, r2, #2
   11342:	4694      	mov	ip, r2
   11344:	44bc      	add	ip, r7
   11346:	4463      	add	r3, ip
   11348:	781b      	ldrb	r3, [r3, #0]
   1134a:	2208      	movs	r2, #8
   1134c:	4013      	ands	r3, r2
   1134e:	d100      	bne.n	11352 <f_open+0x186>
   11350:	e0be      	b.n	114d0 <f_open+0x304>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
   11352:	2384      	movs	r3, #132	; 0x84
   11354:	009b      	lsls	r3, r3, #2
   11356:	18fb      	adds	r3, r7, r3
   11358:	681a      	ldr	r2, [r3, #0]
   1135a:	2385      	movs	r3, #133	; 0x85
   1135c:	009b      	lsls	r3, r3, #2
   1135e:	18fb      	adds	r3, r7, r3
   11360:	69db      	ldr	r3, [r3, #28]
   11362:	0019      	movs	r1, r3
   11364:	0010      	movs	r0, r2
   11366:	4b49      	ldr	r3, [pc, #292]	; (1148c <f_open+0x2c0>)
   11368:	4798      	blx	r3
   1136a:	0003      	movs	r3, r0
   1136c:	2294      	movs	r2, #148	; 0x94
   1136e:	0092      	lsls	r2, r2, #2
   11370:	18ba      	adds	r2, r7, r2
   11372:	6013      	str	r3, [r2, #0]
					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
   11374:	2385      	movs	r3, #133	; 0x85
   11376:	009b      	lsls	r3, r3, #2
   11378:	18fb      	adds	r3, r7, r3
   1137a:	69db      	ldr	r3, [r3, #28]
   1137c:	330e      	adds	r3, #14
   1137e:	001c      	movs	r4, r3
   11380:	4b43      	ldr	r3, [pc, #268]	; (11490 <f_open+0x2c4>)
   11382:	4798      	blx	r3
   11384:	0003      	movs	r3, r0
   11386:	0019      	movs	r1, r3
   11388:	0020      	movs	r0, r4
   1138a:	4b42      	ldr	r3, [pc, #264]	; (11494 <f_open+0x2c8>)
   1138c:	4798      	blx	r3
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
   1138e:	2385      	movs	r3, #133	; 0x85
   11390:	009b      	lsls	r3, r3, #2
   11392:	18fb      	adds	r3, r7, r3
   11394:	69db      	ldr	r3, [r3, #28]
   11396:	330b      	adds	r3, #11
   11398:	2220      	movs	r2, #32
   1139a:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
   1139c:	2384      	movs	r3, #132	; 0x84
   1139e:	009b      	lsls	r3, r3, #2
   113a0:	18fb      	adds	r3, r7, r3
   113a2:	6818      	ldr	r0, [r3, #0]
   113a4:	2385      	movs	r3, #133	; 0x85
   113a6:	009b      	lsls	r3, r3, #2
   113a8:	18fb      	adds	r3, r7, r3
   113aa:	69db      	ldr	r3, [r3, #28]
   113ac:	2200      	movs	r2, #0
   113ae:	0019      	movs	r1, r3
   113b0:	4b39      	ldr	r3, [pc, #228]	; (11498 <f_open+0x2cc>)
   113b2:	4798      	blx	r3
					st_dword(dj.dir + DIR_FileSize, 0);
   113b4:	2385      	movs	r3, #133	; 0x85
   113b6:	009b      	lsls	r3, r3, #2
   113b8:	18fb      	adds	r3, r7, r3
   113ba:	69db      	ldr	r3, [r3, #28]
   113bc:	331c      	adds	r3, #28
   113be:	2100      	movs	r1, #0
   113c0:	0018      	movs	r0, r3
   113c2:	4b34      	ldr	r3, [pc, #208]	; (11494 <f_open+0x2c8>)
   113c4:	4798      	blx	r3
					fs->wflag = 1;
   113c6:	2384      	movs	r3, #132	; 0x84
   113c8:	009b      	lsls	r3, r3, #2
   113ca:	18fb      	adds	r3, r7, r3
   113cc:	681b      	ldr	r3, [r3, #0]
   113ce:	2201      	movs	r2, #1
   113d0:	70da      	strb	r2, [r3, #3]
					if (cl != 0) {						/* Remove the cluster chain if exist */
   113d2:	2394      	movs	r3, #148	; 0x94
   113d4:	009b      	lsls	r3, r3, #2
   113d6:	18fb      	adds	r3, r7, r3
   113d8:	681b      	ldr	r3, [r3, #0]
   113da:	2b00      	cmp	r3, #0
   113dc:	d100      	bne.n	113e0 <f_open+0x214>
   113de:	e077      	b.n	114d0 <f_open+0x304>
						dw = fs->winsect;
   113e0:	2384      	movs	r3, #132	; 0x84
   113e2:	009b      	lsls	r3, r3, #2
   113e4:	18fb      	adds	r3, r7, r3
   113e6:	681b      	ldr	r3, [r3, #0]
   113e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   113ea:	2293      	movs	r2, #147	; 0x93
   113ec:	0092      	lsls	r2, r2, #2
   113ee:	18ba      	adds	r2, r7, r2
   113f0:	6013      	str	r3, [r2, #0]
						res = remove_chain(&dj.obj, cl, 0);
   113f2:	4b22      	ldr	r3, [pc, #136]	; (1147c <f_open+0x2b0>)
   113f4:	18fc      	adds	r4, r7, r3
   113f6:	2394      	movs	r3, #148	; 0x94
   113f8:	009b      	lsls	r3, r3, #2
   113fa:	18fb      	adds	r3, r7, r3
   113fc:	6819      	ldr	r1, [r3, #0]
   113fe:	2385      	movs	r3, #133	; 0x85
   11400:	009b      	lsls	r3, r3, #2
   11402:	18fb      	adds	r3, r7, r3
   11404:	2200      	movs	r2, #0
   11406:	0018      	movs	r0, r3
   11408:	4b24      	ldr	r3, [pc, #144]	; (1149c <f_open+0x2d0>)
   1140a:	4798      	blx	r3
   1140c:	0003      	movs	r3, r0
   1140e:	7023      	strb	r3, [r4, #0]
						if (res == FR_OK) {
   11410:	4b1a      	ldr	r3, [pc, #104]	; (1147c <f_open+0x2b0>)
   11412:	18fb      	adds	r3, r7, r3
   11414:	781b      	ldrb	r3, [r3, #0]
   11416:	2b00      	cmp	r3, #0
   11418:	d15a      	bne.n	114d0 <f_open+0x304>
							res = move_window(fs, dw);
   1141a:	2384      	movs	r3, #132	; 0x84
   1141c:	009b      	lsls	r3, r3, #2
   1141e:	18fb      	adds	r3, r7, r3
   11420:	681b      	ldr	r3, [r3, #0]
   11422:	4a16      	ldr	r2, [pc, #88]	; (1147c <f_open+0x2b0>)
   11424:	18bc      	adds	r4, r7, r2
   11426:	2293      	movs	r2, #147	; 0x93
   11428:	0092      	lsls	r2, r2, #2
   1142a:	18ba      	adds	r2, r7, r2
   1142c:	6812      	ldr	r2, [r2, #0]
   1142e:	0011      	movs	r1, r2
   11430:	0018      	movs	r0, r3
   11432:	4b1b      	ldr	r3, [pc, #108]	; (114a0 <f_open+0x2d4>)
   11434:	4798      	blx	r3
   11436:	0003      	movs	r3, r0
   11438:	7023      	strb	r3, [r4, #0]
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
   1143a:	2384      	movs	r3, #132	; 0x84
   1143c:	009b      	lsls	r3, r3, #2
   1143e:	18fb      	adds	r3, r7, r3
   11440:	681b      	ldr	r3, [r3, #0]
   11442:	2294      	movs	r2, #148	; 0x94
   11444:	0092      	lsls	r2, r2, #2
   11446:	18ba      	adds	r2, r7, r2
   11448:	6812      	ldr	r2, [r2, #0]
   1144a:	3a01      	subs	r2, #1
   1144c:	611a      	str	r2, [r3, #16]
   1144e:	e03f      	b.n	114d0 <f_open+0x304>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
   11450:	4b0a      	ldr	r3, [pc, #40]	; (1147c <f_open+0x2b0>)
   11452:	18fb      	adds	r3, r7, r3
   11454:	781b      	ldrb	r3, [r3, #0]
   11456:	2b00      	cmp	r3, #0
   11458:	d13a      	bne.n	114d0 <f_open+0x304>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
   1145a:	2385      	movs	r3, #133	; 0x85
   1145c:	009b      	lsls	r3, r3, #2
   1145e:	18fb      	adds	r3, r7, r3
   11460:	799b      	ldrb	r3, [r3, #6]
   11462:	001a      	movs	r2, r3
   11464:	2310      	movs	r3, #16
   11466:	4013      	ands	r3, r2
   11468:	d01c      	beq.n	114a4 <f_open+0x2d8>
					res = FR_NO_FILE;
   1146a:	4b04      	ldr	r3, [pc, #16]	; (1147c <f_open+0x2b0>)
   1146c:	18fb      	adds	r3, r7, r3
   1146e:	2204      	movs	r2, #4
   11470:	701a      	strb	r2, [r3, #0]
   11472:	e02d      	b.n	114d0 <f_open+0x304>
   11474:	fffffd9c 	.word	0xfffffd9c
   11478:	fffffda7 	.word	0xfffffda7
   1147c:	0000025f 	.word	0x0000025f
   11480:	00010b89 	.word	0x00010b89
   11484:	00010915 	.word	0x00010915
   11488:	00010229 	.word	0x00010229
   1148c:	0000fbd1 	.word	0x0000fbd1
   11490:	0000ec0d 	.word	0x0000ec0d
   11494:	0000ed43 	.word	0x0000ed43
   11498:	0000fc15 	.word	0x0000fc15
   1149c:	0000f551 	.word	0x0000f551
   114a0:	0000f015 	.word	0x0000f015
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
   114a4:	4ba8      	ldr	r3, [pc, #672]	; (11748 <f_open+0x57c>)
   114a6:	2298      	movs	r2, #152	; 0x98
   114a8:	0092      	lsls	r2, r2, #2
   114aa:	4694      	mov	ip, r2
   114ac:	44bc      	add	ip, r7
   114ae:	4463      	add	r3, ip
   114b0:	781b      	ldrb	r3, [r3, #0]
   114b2:	2202      	movs	r2, #2
   114b4:	4013      	ands	r3, r2
   114b6:	d00b      	beq.n	114d0 <f_open+0x304>
   114b8:	2385      	movs	r3, #133	; 0x85
   114ba:	009b      	lsls	r3, r3, #2
   114bc:	18fb      	adds	r3, r7, r3
   114be:	799b      	ldrb	r3, [r3, #6]
   114c0:	001a      	movs	r2, r3
   114c2:	2301      	movs	r3, #1
   114c4:	4013      	ands	r3, r2
   114c6:	d003      	beq.n	114d0 <f_open+0x304>
						res = FR_DENIED;
   114c8:	4ba0      	ldr	r3, [pc, #640]	; (1174c <f_open+0x580>)
   114ca:	18fb      	adds	r3, r7, r3
   114cc:	2207      	movs	r2, #7
   114ce:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
		if (res == FR_OK) {
   114d0:	4b9e      	ldr	r3, [pc, #632]	; (1174c <f_open+0x580>)
   114d2:	18fb      	adds	r3, r7, r3
   114d4:	781b      	ldrb	r3, [r3, #0]
   114d6:	2b00      	cmp	r3, #0
   114d8:	d126      	bne.n	11528 <f_open+0x35c>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
   114da:	4b9b      	ldr	r3, [pc, #620]	; (11748 <f_open+0x57c>)
   114dc:	2298      	movs	r2, #152	; 0x98
   114de:	0092      	lsls	r2, r2, #2
   114e0:	4694      	mov	ip, r2
   114e2:	44bc      	add	ip, r7
   114e4:	4463      	add	r3, ip
   114e6:	781b      	ldrb	r3, [r3, #0]
   114e8:	2208      	movs	r2, #8
   114ea:	4013      	ands	r3, r2
   114ec:	d00f      	beq.n	1150e <f_open+0x342>
   114ee:	4b96      	ldr	r3, [pc, #600]	; (11748 <f_open+0x57c>)
   114f0:	2298      	movs	r2, #152	; 0x98
   114f2:	0092      	lsls	r2, r2, #2
   114f4:	4694      	mov	ip, r2
   114f6:	44bc      	add	ip, r7
   114f8:	4463      	add	r3, ip
   114fa:	4a93      	ldr	r2, [pc, #588]	; (11748 <f_open+0x57c>)
   114fc:	2198      	movs	r1, #152	; 0x98
   114fe:	0089      	lsls	r1, r1, #2
   11500:	468c      	mov	ip, r1
   11502:	44bc      	add	ip, r7
   11504:	4462      	add	r2, ip
   11506:	7812      	ldrb	r2, [r2, #0]
   11508:	2140      	movs	r1, #64	; 0x40
   1150a:	430a      	orrs	r2, r1
   1150c:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
   1150e:	2384      	movs	r3, #132	; 0x84
   11510:	009b      	lsls	r3, r3, #2
   11512:	18fb      	adds	r3, r7, r3
   11514:	681b      	ldr	r3, [r3, #0]
   11516:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   11518:	68fb      	ldr	r3, [r7, #12]
   1151a:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
   1151c:	2385      	movs	r3, #133	; 0x85
   1151e:	009b      	lsls	r3, r3, #2
   11520:	18fb      	adds	r3, r7, r3
   11522:	69da      	ldr	r2, [r3, #28]
   11524:	68fb      	ldr	r3, [r7, #12]
   11526:	625a      	str	r2, [r3, #36]	; 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
   11528:	4b88      	ldr	r3, [pc, #544]	; (1174c <f_open+0x580>)
   1152a:	18fb      	adds	r3, r7, r3
   1152c:	781b      	ldrb	r3, [r3, #0]
   1152e:	2b00      	cmp	r3, #0
   11530:	d000      	beq.n	11534 <f_open+0x368>
   11532:	e0f7      	b.n	11724 <f_open+0x558>
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
   11534:	2384      	movs	r3, #132	; 0x84
   11536:	009b      	lsls	r3, r3, #2
   11538:	18fb      	adds	r3, r7, r3
   1153a:	681a      	ldr	r2, [r3, #0]
   1153c:	2385      	movs	r3, #133	; 0x85
   1153e:	009b      	lsls	r3, r3, #2
   11540:	18fb      	adds	r3, r7, r3
   11542:	69db      	ldr	r3, [r3, #28]
   11544:	0019      	movs	r1, r3
   11546:	0010      	movs	r0, r2
   11548:	4b81      	ldr	r3, [pc, #516]	; (11750 <f_open+0x584>)
   1154a:	4798      	blx	r3
   1154c:	0002      	movs	r2, r0
   1154e:	68fb      	ldr	r3, [r7, #12]
   11550:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
   11552:	2385      	movs	r3, #133	; 0x85
   11554:	009b      	lsls	r3, r3, #2
   11556:	18fb      	adds	r3, r7, r3
   11558:	69db      	ldr	r3, [r3, #28]
   1155a:	331c      	adds	r3, #28
   1155c:	0018      	movs	r0, r3
   1155e:	4b7d      	ldr	r3, [pc, #500]	; (11754 <f_open+0x588>)
   11560:	4798      	blx	r3
   11562:	0002      	movs	r2, r0
   11564:	68fb      	ldr	r3, [r7, #12]
   11566:	60da      	str	r2, [r3, #12]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
   11568:	2384      	movs	r3, #132	; 0x84
   1156a:	009b      	lsls	r3, r3, #2
   1156c:	18fb      	adds	r3, r7, r3
   1156e:	681a      	ldr	r2, [r3, #0]
   11570:	68fb      	ldr	r3, [r7, #12]
   11572:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
   11574:	2384      	movs	r3, #132	; 0x84
   11576:	009b      	lsls	r3, r3, #2
   11578:	18fb      	adds	r3, r7, r3
   1157a:	681b      	ldr	r3, [r3, #0]
   1157c:	88da      	ldrh	r2, [r3, #6]
   1157e:	68fb      	ldr	r3, [r7, #12]
   11580:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
   11582:	68fb      	ldr	r3, [r7, #12]
   11584:	4a70      	ldr	r2, [pc, #448]	; (11748 <f_open+0x57c>)
   11586:	2198      	movs	r1, #152	; 0x98
   11588:	0089      	lsls	r1, r1, #2
   1158a:	468c      	mov	ip, r1
   1158c:	44bc      	add	ip, r7
   1158e:	4462      	add	r2, ip
   11590:	7812      	ldrb	r2, [r2, #0]
   11592:	741a      	strb	r2, [r3, #16]
			fp->err = 0;			/* Clear error flag */
   11594:	68fb      	ldr	r3, [r7, #12]
   11596:	2200      	movs	r2, #0
   11598:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;			/* Invalidate current data sector */
   1159a:	68fb      	ldr	r3, [r7, #12]
   1159c:	2200      	movs	r2, #0
   1159e:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
   115a0:	68fb      	ldr	r3, [r7, #12]
   115a2:	2200      	movs	r2, #0
   115a4:	615a      	str	r2, [r3, #20]
#if !FF_FS_READONLY
#if !FF_FS_TINY
			mem_set(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
   115a6:	68fb      	ldr	r3, [r7, #12]
   115a8:	3328      	adds	r3, #40	; 0x28
   115aa:	0018      	movs	r0, r3
   115ac:	2380      	movs	r3, #128	; 0x80
   115ae:	009b      	lsls	r3, r3, #2
   115b0:	001a      	movs	r2, r3
   115b2:	2100      	movs	r1, #0
   115b4:	4b68      	ldr	r3, [pc, #416]	; (11758 <f_open+0x58c>)
   115b6:	4798      	blx	r3
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
   115b8:	4b63      	ldr	r3, [pc, #396]	; (11748 <f_open+0x57c>)
   115ba:	2298      	movs	r2, #152	; 0x98
   115bc:	0092      	lsls	r2, r2, #2
   115be:	4694      	mov	ip, r2
   115c0:	44bc      	add	ip, r7
   115c2:	4463      	add	r3, ip
   115c4:	781b      	ldrb	r3, [r3, #0]
   115c6:	2220      	movs	r2, #32
   115c8:	4013      	ands	r3, r2
   115ca:	d100      	bne.n	115ce <f_open+0x402>
   115cc:	e0aa      	b.n	11724 <f_open+0x558>
   115ce:	68fb      	ldr	r3, [r7, #12]
   115d0:	68db      	ldr	r3, [r3, #12]
   115d2:	2b00      	cmp	r3, #0
   115d4:	d100      	bne.n	115d8 <f_open+0x40c>
   115d6:	e0a5      	b.n	11724 <f_open+0x558>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
   115d8:	68fb      	ldr	r3, [r7, #12]
   115da:	68da      	ldr	r2, [r3, #12]
   115dc:	68fb      	ldr	r3, [r7, #12]
   115de:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
   115e0:	2384      	movs	r3, #132	; 0x84
   115e2:	009b      	lsls	r3, r3, #2
   115e4:	18fb      	adds	r3, r7, r3
   115e6:	681b      	ldr	r3, [r3, #0]
   115e8:	895b      	ldrh	r3, [r3, #10]
   115ea:	025b      	lsls	r3, r3, #9
   115ec:	2292      	movs	r2, #146	; 0x92
   115ee:	0092      	lsls	r2, r2, #2
   115f0:	18ba      	adds	r2, r7, r2
   115f2:	6013      	str	r3, [r2, #0]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
   115f4:	68fb      	ldr	r3, [r7, #12]
   115f6:	689b      	ldr	r3, [r3, #8]
   115f8:	2296      	movs	r2, #150	; 0x96
   115fa:	0092      	lsls	r2, r2, #2
   115fc:	18ba      	adds	r2, r7, r2
   115fe:	6013      	str	r3, [r2, #0]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
   11600:	68fb      	ldr	r3, [r7, #12]
   11602:	68db      	ldr	r3, [r3, #12]
   11604:	2295      	movs	r2, #149	; 0x95
   11606:	0092      	lsls	r2, r2, #2
   11608:	18ba      	adds	r2, r7, r2
   1160a:	6013      	str	r3, [r2, #0]
   1160c:	e02e      	b.n	1166c <f_open+0x4a0>
					clst = get_fat(&fp->obj, clst);
   1160e:	68fb      	ldr	r3, [r7, #12]
   11610:	2296      	movs	r2, #150	; 0x96
   11612:	0092      	lsls	r2, r2, #2
   11614:	18ba      	adds	r2, r7, r2
   11616:	6812      	ldr	r2, [r2, #0]
   11618:	0011      	movs	r1, r2
   1161a:	0018      	movs	r0, r3
   1161c:	4b4f      	ldr	r3, [pc, #316]	; (1175c <f_open+0x590>)
   1161e:	4798      	blx	r3
   11620:	0003      	movs	r3, r0
   11622:	2296      	movs	r2, #150	; 0x96
   11624:	0092      	lsls	r2, r2, #2
   11626:	18ba      	adds	r2, r7, r2
   11628:	6013      	str	r3, [r2, #0]
					if (clst <= 1) res = FR_INT_ERR;
   1162a:	2396      	movs	r3, #150	; 0x96
   1162c:	009b      	lsls	r3, r3, #2
   1162e:	18fb      	adds	r3, r7, r3
   11630:	681b      	ldr	r3, [r3, #0]
   11632:	2b01      	cmp	r3, #1
   11634:	d803      	bhi.n	1163e <f_open+0x472>
   11636:	4b45      	ldr	r3, [pc, #276]	; (1174c <f_open+0x580>)
   11638:	18fb      	adds	r3, r7, r3
   1163a:	2202      	movs	r2, #2
   1163c:	701a      	strb	r2, [r3, #0]
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
   1163e:	2396      	movs	r3, #150	; 0x96
   11640:	009b      	lsls	r3, r3, #2
   11642:	18fb      	adds	r3, r7, r3
   11644:	681b      	ldr	r3, [r3, #0]
   11646:	3301      	adds	r3, #1
   11648:	d103      	bne.n	11652 <f_open+0x486>
   1164a:	4b40      	ldr	r3, [pc, #256]	; (1174c <f_open+0x580>)
   1164c:	18fb      	adds	r3, r7, r3
   1164e:	2201      	movs	r2, #1
   11650:	701a      	strb	r2, [r3, #0]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
   11652:	2395      	movs	r3, #149	; 0x95
   11654:	009b      	lsls	r3, r3, #2
   11656:	18fb      	adds	r3, r7, r3
   11658:	681a      	ldr	r2, [r3, #0]
   1165a:	2392      	movs	r3, #146	; 0x92
   1165c:	009b      	lsls	r3, r3, #2
   1165e:	18fb      	adds	r3, r7, r3
   11660:	681b      	ldr	r3, [r3, #0]
   11662:	1ad3      	subs	r3, r2, r3
   11664:	2295      	movs	r2, #149	; 0x95
   11666:	0092      	lsls	r2, r2, #2
   11668:	18ba      	adds	r2, r7, r2
   1166a:	6013      	str	r3, [r2, #0]
   1166c:	4b37      	ldr	r3, [pc, #220]	; (1174c <f_open+0x580>)
   1166e:	18fb      	adds	r3, r7, r3
   11670:	781b      	ldrb	r3, [r3, #0]
   11672:	2b00      	cmp	r3, #0
   11674:	d109      	bne.n	1168a <f_open+0x4be>
   11676:	2395      	movs	r3, #149	; 0x95
   11678:	009b      	lsls	r3, r3, #2
   1167a:	18fb      	adds	r3, r7, r3
   1167c:	681a      	ldr	r2, [r3, #0]
   1167e:	2392      	movs	r3, #146	; 0x92
   11680:	009b      	lsls	r3, r3, #2
   11682:	18fb      	adds	r3, r7, r3
   11684:	681b      	ldr	r3, [r3, #0]
   11686:	429a      	cmp	r2, r3
   11688:	d8c1      	bhi.n	1160e <f_open+0x442>
				}
				fp->clust = clst;
   1168a:	68fb      	ldr	r3, [r7, #12]
   1168c:	2296      	movs	r2, #150	; 0x96
   1168e:	0092      	lsls	r2, r2, #2
   11690:	18ba      	adds	r2, r7, r2
   11692:	6812      	ldr	r2, [r2, #0]
   11694:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
   11696:	4b2d      	ldr	r3, [pc, #180]	; (1174c <f_open+0x580>)
   11698:	18fb      	adds	r3, r7, r3
   1169a:	781b      	ldrb	r3, [r3, #0]
   1169c:	2b00      	cmp	r3, #0
   1169e:	d141      	bne.n	11724 <f_open+0x558>
   116a0:	2395      	movs	r3, #149	; 0x95
   116a2:	009b      	lsls	r3, r3, #2
   116a4:	18fb      	adds	r3, r7, r3
   116a6:	681b      	ldr	r3, [r3, #0]
   116a8:	05db      	lsls	r3, r3, #23
   116aa:	0ddb      	lsrs	r3, r3, #23
   116ac:	d03a      	beq.n	11724 <f_open+0x558>
					if ((sc = clst2sect(fs, clst)) == 0) {
   116ae:	2384      	movs	r3, #132	; 0x84
   116b0:	009b      	lsls	r3, r3, #2
   116b2:	18fb      	adds	r3, r7, r3
   116b4:	681b      	ldr	r3, [r3, #0]
   116b6:	2296      	movs	r2, #150	; 0x96
   116b8:	0092      	lsls	r2, r2, #2
   116ba:	18ba      	adds	r2, r7, r2
   116bc:	6812      	ldr	r2, [r2, #0]
   116be:	0011      	movs	r1, r2
   116c0:	0018      	movs	r0, r3
   116c2:	4b27      	ldr	r3, [pc, #156]	; (11760 <f_open+0x594>)
   116c4:	4798      	blx	r3
   116c6:	0003      	movs	r3, r0
   116c8:	2291      	movs	r2, #145	; 0x91
   116ca:	0092      	lsls	r2, r2, #2
   116cc:	18ba      	adds	r2, r7, r2
   116ce:	6013      	str	r3, [r2, #0]
   116d0:	2391      	movs	r3, #145	; 0x91
   116d2:	009b      	lsls	r3, r3, #2
   116d4:	18fb      	adds	r3, r7, r3
   116d6:	681b      	ldr	r3, [r3, #0]
   116d8:	2b00      	cmp	r3, #0
   116da:	d104      	bne.n	116e6 <f_open+0x51a>
						res = FR_INT_ERR;
   116dc:	4b1b      	ldr	r3, [pc, #108]	; (1174c <f_open+0x580>)
   116de:	18fb      	adds	r3, r7, r3
   116e0:	2202      	movs	r2, #2
   116e2:	701a      	strb	r2, [r3, #0]
   116e4:	e01e      	b.n	11724 <f_open+0x558>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
   116e6:	2395      	movs	r3, #149	; 0x95
   116e8:	009b      	lsls	r3, r3, #2
   116ea:	18fb      	adds	r3, r7, r3
   116ec:	681b      	ldr	r3, [r3, #0]
   116ee:	0a5a      	lsrs	r2, r3, #9
   116f0:	2391      	movs	r3, #145	; 0x91
   116f2:	009b      	lsls	r3, r3, #2
   116f4:	18fb      	adds	r3, r7, r3
   116f6:	681b      	ldr	r3, [r3, #0]
   116f8:	18d2      	adds	r2, r2, r3
   116fa:	68fb      	ldr	r3, [r7, #12]
   116fc:	61da      	str	r2, [r3, #28]
#if !FF_FS_TINY
						if (disk_readp(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;//Added "p" Kfausnight 11/24/2018
   116fe:	2384      	movs	r3, #132	; 0x84
   11700:	009b      	lsls	r3, r3, #2
   11702:	18fb      	adds	r3, r7, r3
   11704:	681b      	ldr	r3, [r3, #0]
   11706:	7858      	ldrb	r0, [r3, #1]
   11708:	68fb      	ldr	r3, [r7, #12]
   1170a:	3328      	adds	r3, #40	; 0x28
   1170c:	0019      	movs	r1, r3
   1170e:	68fb      	ldr	r3, [r7, #12]
   11710:	69da      	ldr	r2, [r3, #28]
   11712:	2301      	movs	r3, #1
   11714:	4c13      	ldr	r4, [pc, #76]	; (11764 <f_open+0x598>)
   11716:	47a0      	blx	r4
   11718:	1e03      	subs	r3, r0, #0
   1171a:	d003      	beq.n	11724 <f_open+0x558>
   1171c:	4b0b      	ldr	r3, [pc, #44]	; (1174c <f_open+0x580>)
   1171e:	18fb      	adds	r3, r7, r3
   11720:	2201      	movs	r2, #1
   11722:	701a      	strb	r2, [r3, #0]
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
   11724:	4b09      	ldr	r3, [pc, #36]	; (1174c <f_open+0x580>)
   11726:	18fb      	adds	r3, r7, r3
   11728:	781b      	ldrb	r3, [r3, #0]
   1172a:	2b00      	cmp	r3, #0
   1172c:	d002      	beq.n	11734 <f_open+0x568>
   1172e:	68fb      	ldr	r3, [r7, #12]
   11730:	2200      	movs	r2, #0
   11732:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
   11734:	4b05      	ldr	r3, [pc, #20]	; (1174c <f_open+0x580>)
   11736:	18fb      	adds	r3, r7, r3
   11738:	781b      	ldrb	r3, [r3, #0]
}
   1173a:	0018      	movs	r0, r3
   1173c:	46bd      	mov	sp, r7
   1173e:	2399      	movs	r3, #153	; 0x99
   11740:	009b      	lsls	r3, r3, #2
   11742:	449d      	add	sp, r3
   11744:	bd90      	pop	{r4, r7, pc}
   11746:	46c0      	nop			; (mov r8, r8)
   11748:	fffffda7 	.word	0xfffffda7
   1174c:	0000025f 	.word	0x0000025f
   11750:	0000fbd1 	.word	0x0000fbd1
   11754:	0000ecc5 	.word	0x0000ecc5
   11758:	0000edd5 	.word	0x0000edd5
   1175c:	0000f1d9 	.word	0x0000f1d9
   11760:	0000f1a1 	.word	0x0000f1a1
   11764:	0000eac9 	.word	0x0000eac9

00011768 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
   11768:	b590      	push	{r4, r7, lr}
   1176a:	b08d      	sub	sp, #52	; 0x34
   1176c:	af00      	add	r7, sp, #0
   1176e:	60f8      	str	r0, [r7, #12]
   11770:	60b9      	str	r1, [r7, #8]
   11772:	607a      	str	r2, [r7, #4]
   11774:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
   11776:	68bb      	ldr	r3, [r7, #8]
   11778:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
   1177a:	683b      	ldr	r3, [r7, #0]
   1177c:	2200      	movs	r2, #0
   1177e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
   11780:	68fb      	ldr	r3, [r7, #12]
   11782:	222f      	movs	r2, #47	; 0x2f
   11784:	18bc      	adds	r4, r7, r2
   11786:	2210      	movs	r2, #16
   11788:	18ba      	adds	r2, r7, r2
   1178a:	0011      	movs	r1, r2
   1178c:	0018      	movs	r0, r3
   1178e:	4bae      	ldr	r3, [pc, #696]	; (11a48 <f_write+0x2e0>)
   11790:	4798      	blx	r3
   11792:	0003      	movs	r3, r0
   11794:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
   11796:	232f      	movs	r3, #47	; 0x2f
   11798:	18fb      	adds	r3, r7, r3
   1179a:	781b      	ldrb	r3, [r3, #0]
   1179c:	2b00      	cmp	r3, #0
   1179e:	d109      	bne.n	117b4 <f_write+0x4c>
   117a0:	232f      	movs	r3, #47	; 0x2f
   117a2:	18fb      	adds	r3, r7, r3
   117a4:	68fa      	ldr	r2, [r7, #12]
   117a6:	7c52      	ldrb	r2, [r2, #17]
   117a8:	701a      	strb	r2, [r3, #0]
   117aa:	232f      	movs	r3, #47	; 0x2f
   117ac:	18fb      	adds	r3, r7, r3
   117ae:	781b      	ldrb	r3, [r3, #0]
   117b0:	2b00      	cmp	r3, #0
   117b2:	d003      	beq.n	117bc <f_write+0x54>
   117b4:	232f      	movs	r3, #47	; 0x2f
   117b6:	18fb      	adds	r3, r7, r3
   117b8:	781b      	ldrb	r3, [r3, #0]
   117ba:	e141      	b.n	11a40 <f_write+0x2d8>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
   117bc:	68fb      	ldr	r3, [r7, #12]
   117be:	7c1b      	ldrb	r3, [r3, #16]
   117c0:	001a      	movs	r2, r3
   117c2:	2302      	movs	r3, #2
   117c4:	4013      	ands	r3, r2
   117c6:	d101      	bne.n	117cc <f_write+0x64>
   117c8:	2307      	movs	r3, #7
   117ca:	e139      	b.n	11a40 <f_write+0x2d8>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
   117cc:	68fb      	ldr	r3, [r7, #12]
   117ce:	695a      	ldr	r2, [r3, #20]
   117d0:	687b      	ldr	r3, [r7, #4]
   117d2:	18d2      	adds	r2, r2, r3
   117d4:	68fb      	ldr	r3, [r7, #12]
   117d6:	695b      	ldr	r3, [r3, #20]
   117d8:	429a      	cmp	r2, r3
   117da:	d300      	bcc.n	117de <f_write+0x76>
   117dc:	e122      	b.n	11a24 <f_write+0x2bc>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
   117de:	68fb      	ldr	r3, [r7, #12]
   117e0:	695b      	ldr	r3, [r3, #20]
   117e2:	43db      	mvns	r3, r3
   117e4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
   117e6:	e11d      	b.n	11a24 <f_write+0x2bc>
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
   117e8:	68fb      	ldr	r3, [r7, #12]
   117ea:	695b      	ldr	r3, [r3, #20]
   117ec:	05db      	lsls	r3, r3, #23
   117ee:	0ddb      	lsrs	r3, r3, #23
   117f0:	d000      	beq.n	117f4 <f_write+0x8c>
   117f2:	e0d6      	b.n	119a2 <f_write+0x23a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
   117f4:	68fb      	ldr	r3, [r7, #12]
   117f6:	695b      	ldr	r3, [r3, #20]
   117f8:	0a5b      	lsrs	r3, r3, #9
   117fa:	693a      	ldr	r2, [r7, #16]
   117fc:	8952      	ldrh	r2, [r2, #10]
   117fe:	3a01      	subs	r2, #1
   11800:	4013      	ands	r3, r2
   11802:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
   11804:	69bb      	ldr	r3, [r7, #24]
   11806:	2b00      	cmp	r3, #0
   11808:	d138      	bne.n	1187c <f_write+0x114>
				if (fp->fptr == 0) {		/* On the top of the file? */
   1180a:	68fb      	ldr	r3, [r7, #12]
   1180c:	695b      	ldr	r3, [r3, #20]
   1180e:	2b00      	cmp	r3, #0
   11810:	d10d      	bne.n	1182e <f_write+0xc6>
					clst = fp->obj.sclust;	/* Follow from the origin */
   11812:	68fb      	ldr	r3, [r7, #12]
   11814:	689b      	ldr	r3, [r3, #8]
   11816:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
   11818:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1181a:	2b00      	cmp	r3, #0
   1181c:	d110      	bne.n	11840 <f_write+0xd8>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
   1181e:	68fb      	ldr	r3, [r7, #12]
   11820:	2100      	movs	r1, #0
   11822:	0018      	movs	r0, r3
   11824:	4b89      	ldr	r3, [pc, #548]	; (11a4c <f_write+0x2e4>)
   11826:	4798      	blx	r3
   11828:	0003      	movs	r3, r0
   1182a:	62bb      	str	r3, [r7, #40]	; 0x28
   1182c:	e008      	b.n	11840 <f_write+0xd8>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   1182e:	68fa      	ldr	r2, [r7, #12]
   11830:	68fb      	ldr	r3, [r7, #12]
   11832:	699b      	ldr	r3, [r3, #24]
   11834:	0019      	movs	r1, r3
   11836:	0010      	movs	r0, r2
   11838:	4b84      	ldr	r3, [pc, #528]	; (11a4c <f_write+0x2e4>)
   1183a:	4798      	blx	r3
   1183c:	0003      	movs	r3, r0
   1183e:	62bb      	str	r3, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   11840:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11842:	2b00      	cmp	r3, #0
   11844:	d100      	bne.n	11848 <f_write+0xe0>
   11846:	e0f2      	b.n	11a2e <f_write+0x2c6>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
   11848:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1184a:	2b01      	cmp	r3, #1
   1184c:	d104      	bne.n	11858 <f_write+0xf0>
   1184e:	68fb      	ldr	r3, [r7, #12]
   11850:	2202      	movs	r2, #2
   11852:	745a      	strb	r2, [r3, #17]
   11854:	2302      	movs	r3, #2
   11856:	e0f3      	b.n	11a40 <f_write+0x2d8>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   11858:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1185a:	3301      	adds	r3, #1
   1185c:	d104      	bne.n	11868 <f_write+0x100>
   1185e:	68fb      	ldr	r3, [r7, #12]
   11860:	2201      	movs	r2, #1
   11862:	745a      	strb	r2, [r3, #17]
   11864:	2301      	movs	r3, #1
   11866:	e0eb      	b.n	11a40 <f_write+0x2d8>
				fp->clust = clst;			/* Update current cluster */
   11868:	68fb      	ldr	r3, [r7, #12]
   1186a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1186c:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
   1186e:	68fb      	ldr	r3, [r7, #12]
   11870:	689b      	ldr	r3, [r3, #8]
   11872:	2b00      	cmp	r3, #0
   11874:	d102      	bne.n	1187c <f_write+0x114>
   11876:	68fb      	ldr	r3, [r7, #12]
   11878:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1187a:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
   1187c:	68fb      	ldr	r3, [r7, #12]
   1187e:	7c1b      	ldrb	r3, [r3, #16]
   11880:	b25b      	sxtb	r3, r3
   11882:	2b00      	cmp	r3, #0
   11884:	da17      	bge.n	118b6 <f_write+0x14e>
				if (disk_writep(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
   11886:	693b      	ldr	r3, [r7, #16]
   11888:	7858      	ldrb	r0, [r3, #1]
   1188a:	68fb      	ldr	r3, [r7, #12]
   1188c:	3328      	adds	r3, #40	; 0x28
   1188e:	0019      	movs	r1, r3
   11890:	68fb      	ldr	r3, [r7, #12]
   11892:	69da      	ldr	r2, [r3, #28]
   11894:	2301      	movs	r3, #1
   11896:	4c6e      	ldr	r4, [pc, #440]	; (11a50 <f_write+0x2e8>)
   11898:	47a0      	blx	r4
   1189a:	1e03      	subs	r3, r0, #0
   1189c:	d004      	beq.n	118a8 <f_write+0x140>
   1189e:	68fb      	ldr	r3, [r7, #12]
   118a0:	2201      	movs	r2, #1
   118a2:	745a      	strb	r2, [r3, #17]
   118a4:	2301      	movs	r3, #1
   118a6:	e0cb      	b.n	11a40 <f_write+0x2d8>
				fp->flag &= (BYTE)~FA_DIRTY;
   118a8:	68fb      	ldr	r3, [r7, #12]
   118aa:	7c1b      	ldrb	r3, [r3, #16]
   118ac:	227f      	movs	r2, #127	; 0x7f
   118ae:	4013      	ands	r3, r2
   118b0:	b2da      	uxtb	r2, r3
   118b2:	68fb      	ldr	r3, [r7, #12]
   118b4:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
   118b6:	693a      	ldr	r2, [r7, #16]
   118b8:	68fb      	ldr	r3, [r7, #12]
   118ba:	699b      	ldr	r3, [r3, #24]
   118bc:	0019      	movs	r1, r3
   118be:	0010      	movs	r0, r2
   118c0:	4b64      	ldr	r3, [pc, #400]	; (11a54 <f_write+0x2ec>)
   118c2:	4798      	blx	r3
   118c4:	0003      	movs	r3, r0
   118c6:	617b      	str	r3, [r7, #20]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
   118c8:	697b      	ldr	r3, [r7, #20]
   118ca:	2b00      	cmp	r3, #0
   118cc:	d104      	bne.n	118d8 <f_write+0x170>
   118ce:	68fb      	ldr	r3, [r7, #12]
   118d0:	2202      	movs	r2, #2
   118d2:	745a      	strb	r2, [r3, #17]
   118d4:	2302      	movs	r3, #2
   118d6:	e0b3      	b.n	11a40 <f_write+0x2d8>
			sect += csect;
   118d8:	697a      	ldr	r2, [r7, #20]
   118da:	69bb      	ldr	r3, [r7, #24]
   118dc:	18d3      	adds	r3, r2, r3
   118de:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
   118e0:	687b      	ldr	r3, [r7, #4]
   118e2:	0a5b      	lsrs	r3, r3, #9
   118e4:	623b      	str	r3, [r7, #32]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
   118e6:	6a3b      	ldr	r3, [r7, #32]
   118e8:	2b00      	cmp	r3, #0
   118ea:	d03c      	beq.n	11966 <f_write+0x1fe>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
   118ec:	69ba      	ldr	r2, [r7, #24]
   118ee:	6a3b      	ldr	r3, [r7, #32]
   118f0:	18d3      	adds	r3, r2, r3
   118f2:	693a      	ldr	r2, [r7, #16]
   118f4:	8952      	ldrh	r2, [r2, #10]
   118f6:	4293      	cmp	r3, r2
   118f8:	d905      	bls.n	11906 <f_write+0x19e>
					cc = fs->csize - csect;
   118fa:	693b      	ldr	r3, [r7, #16]
   118fc:	895b      	ldrh	r3, [r3, #10]
   118fe:	001a      	movs	r2, r3
   11900:	69bb      	ldr	r3, [r7, #24]
   11902:	1ad3      	subs	r3, r2, r3
   11904:	623b      	str	r3, [r7, #32]
				}
				if (disk_writep(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
   11906:	693b      	ldr	r3, [r7, #16]
   11908:	7858      	ldrb	r0, [r3, #1]
   1190a:	6a3b      	ldr	r3, [r7, #32]
   1190c:	b2db      	uxtb	r3, r3
   1190e:	697a      	ldr	r2, [r7, #20]
   11910:	69f9      	ldr	r1, [r7, #28]
   11912:	4c4f      	ldr	r4, [pc, #316]	; (11a50 <f_write+0x2e8>)
   11914:	47a0      	blx	r4
   11916:	1e03      	subs	r3, r0, #0
   11918:	d004      	beq.n	11924 <f_write+0x1bc>
   1191a:	68fb      	ldr	r3, [r7, #12]
   1191c:	2201      	movs	r2, #1
   1191e:	745a      	strb	r2, [r3, #17]
   11920:	2301      	movs	r3, #1
   11922:	e08d      	b.n	11a40 <f_write+0x2d8>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
   11924:	68fb      	ldr	r3, [r7, #12]
   11926:	69da      	ldr	r2, [r3, #28]
   11928:	697b      	ldr	r3, [r7, #20]
   1192a:	1ad2      	subs	r2, r2, r3
   1192c:	6a3b      	ldr	r3, [r7, #32]
   1192e:	429a      	cmp	r2, r3
   11930:	d215      	bcs.n	1195e <f_write+0x1f6>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
   11932:	68fb      	ldr	r3, [r7, #12]
   11934:	3328      	adds	r3, #40	; 0x28
   11936:	0018      	movs	r0, r3
   11938:	68fb      	ldr	r3, [r7, #12]
   1193a:	69da      	ldr	r2, [r3, #28]
   1193c:	697b      	ldr	r3, [r7, #20]
   1193e:	1ad3      	subs	r3, r2, r3
   11940:	025b      	lsls	r3, r3, #9
   11942:	69fa      	ldr	r2, [r7, #28]
   11944:	18d1      	adds	r1, r2, r3
   11946:	2380      	movs	r3, #128	; 0x80
   11948:	009b      	lsls	r3, r3, #2
   1194a:	001a      	movs	r2, r3
   1194c:	4b42      	ldr	r3, [pc, #264]	; (11a58 <f_write+0x2f0>)
   1194e:	4798      	blx	r3
					fp->flag &= (BYTE)~FA_DIRTY;
   11950:	68fb      	ldr	r3, [r7, #12]
   11952:	7c1b      	ldrb	r3, [r3, #16]
   11954:	227f      	movs	r2, #127	; 0x7f
   11956:	4013      	ands	r3, r2
   11958:	b2da      	uxtb	r2, r3
   1195a:	68fb      	ldr	r3, [r7, #12]
   1195c:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
   1195e:	6a3b      	ldr	r3, [r7, #32]
   11960:	025b      	lsls	r3, r3, #9
   11962:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
   11964:	e040      	b.n	119e8 <f_write+0x280>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
   11966:	68fb      	ldr	r3, [r7, #12]
   11968:	69da      	ldr	r2, [r3, #28]
   1196a:	697b      	ldr	r3, [r7, #20]
   1196c:	429a      	cmp	r2, r3
   1196e:	d015      	beq.n	1199c <f_write+0x234>
				fp->fptr < fp->obj.objsize &&
   11970:	68fb      	ldr	r3, [r7, #12]
   11972:	695a      	ldr	r2, [r3, #20]
   11974:	68fb      	ldr	r3, [r7, #12]
   11976:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
   11978:	429a      	cmp	r2, r3
   1197a:	d20f      	bcs.n	1199c <f_write+0x234>
				disk_readp(fs->pdrv, fp->buf, sect, 1) != RES_OK) {//Added "p" Kfausnight 11/24/2018
   1197c:	693b      	ldr	r3, [r7, #16]
   1197e:	7858      	ldrb	r0, [r3, #1]
   11980:	68fb      	ldr	r3, [r7, #12]
   11982:	3328      	adds	r3, #40	; 0x28
   11984:	0019      	movs	r1, r3
   11986:	697a      	ldr	r2, [r7, #20]
   11988:	2301      	movs	r3, #1
   1198a:	4c34      	ldr	r4, [pc, #208]	; (11a5c <f_write+0x2f4>)
   1198c:	47a0      	blx	r4
   1198e:	1e03      	subs	r3, r0, #0
				fp->fptr < fp->obj.objsize &&
   11990:	d004      	beq.n	1199c <f_write+0x234>
					ABORT(fs, FR_DISK_ERR);
   11992:	68fb      	ldr	r3, [r7, #12]
   11994:	2201      	movs	r2, #1
   11996:	745a      	strb	r2, [r3, #17]
   11998:	2301      	movs	r3, #1
   1199a:	e051      	b.n	11a40 <f_write+0x2d8>
			}
#endif
			fp->sect = sect;
   1199c:	68fb      	ldr	r3, [r7, #12]
   1199e:	697a      	ldr	r2, [r7, #20]
   119a0:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
   119a2:	68fb      	ldr	r3, [r7, #12]
   119a4:	695b      	ldr	r3, [r3, #20]
   119a6:	05db      	lsls	r3, r3, #23
   119a8:	0ddb      	lsrs	r3, r3, #23
   119aa:	2280      	movs	r2, #128	; 0x80
   119ac:	0092      	lsls	r2, r2, #2
   119ae:	1ad3      	subs	r3, r2, r3
   119b0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
   119b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   119b4:	687b      	ldr	r3, [r7, #4]
   119b6:	429a      	cmp	r2, r3
   119b8:	d901      	bls.n	119be <f_write+0x256>
   119ba:	687b      	ldr	r3, [r7, #4]
   119bc:	627b      	str	r3, [r7, #36]	; 0x24
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
   119be:	68fb      	ldr	r3, [r7, #12]
   119c0:	3328      	adds	r3, #40	; 0x28
   119c2:	001a      	movs	r2, r3
   119c4:	68fb      	ldr	r3, [r7, #12]
   119c6:	695b      	ldr	r3, [r3, #20]
   119c8:	05db      	lsls	r3, r3, #23
   119ca:	0ddb      	lsrs	r3, r3, #23
   119cc:	18d3      	adds	r3, r2, r3
   119ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   119d0:	69f9      	ldr	r1, [r7, #28]
   119d2:	0018      	movs	r0, r3
   119d4:	4b20      	ldr	r3, [pc, #128]	; (11a58 <f_write+0x2f0>)
   119d6:	4798      	blx	r3
		fp->flag |= FA_DIRTY;
   119d8:	68fb      	ldr	r3, [r7, #12]
   119da:	7c1b      	ldrb	r3, [r3, #16]
   119dc:	2280      	movs	r2, #128	; 0x80
   119de:	4252      	negs	r2, r2
   119e0:	4313      	orrs	r3, r2
   119e2:	b2da      	uxtb	r2, r3
   119e4:	68fb      	ldr	r3, [r7, #12]
   119e6:	741a      	strb	r2, [r3, #16]
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
   119e8:	687a      	ldr	r2, [r7, #4]
   119ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   119ec:	1ad3      	subs	r3, r2, r3
   119ee:	607b      	str	r3, [r7, #4]
   119f0:	683b      	ldr	r3, [r7, #0]
   119f2:	681a      	ldr	r2, [r3, #0]
   119f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   119f6:	18d2      	adds	r2, r2, r3
   119f8:	683b      	ldr	r3, [r7, #0]
   119fa:	601a      	str	r2, [r3, #0]
   119fc:	69fa      	ldr	r2, [r7, #28]
   119fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11a00:	18d3      	adds	r3, r2, r3
   11a02:	61fb      	str	r3, [r7, #28]
   11a04:	68fb      	ldr	r3, [r7, #12]
   11a06:	695a      	ldr	r2, [r3, #20]
   11a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11a0a:	18d2      	adds	r2, r2, r3
   11a0c:	68fb      	ldr	r3, [r7, #12]
   11a0e:	615a      	str	r2, [r3, #20]
   11a10:	68fb      	ldr	r3, [r7, #12]
   11a12:	68d9      	ldr	r1, [r3, #12]
   11a14:	68fb      	ldr	r3, [r7, #12]
   11a16:	695a      	ldr	r2, [r3, #20]
   11a18:	000b      	movs	r3, r1
   11a1a:	4293      	cmp	r3, r2
   11a1c:	d200      	bcs.n	11a20 <f_write+0x2b8>
   11a1e:	0013      	movs	r3, r2
   11a20:	68fa      	ldr	r2, [r7, #12]
   11a22:	60d3      	str	r3, [r2, #12]
	for ( ;  btw;							/* Repeat until all data written */
   11a24:	687b      	ldr	r3, [r7, #4]
   11a26:	2b00      	cmp	r3, #0
   11a28:	d000      	beq.n	11a2c <f_write+0x2c4>
   11a2a:	e6dd      	b.n	117e8 <f_write+0x80>
   11a2c:	e000      	b.n	11a30 <f_write+0x2c8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   11a2e:	46c0      	nop			; (mov r8, r8)
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
   11a30:	68fb      	ldr	r3, [r7, #12]
   11a32:	7c1b      	ldrb	r3, [r3, #16]
   11a34:	2240      	movs	r2, #64	; 0x40
   11a36:	4313      	orrs	r3, r2
   11a38:	b2da      	uxtb	r2, r3
   11a3a:	68fb      	ldr	r3, [r7, #12]
   11a3c:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
   11a3e:	2300      	movs	r3, #0
}
   11a40:	0018      	movs	r0, r3
   11a42:	46bd      	mov	sp, r7
   11a44:	b00d      	add	sp, #52	; 0x34
   11a46:	bd90      	pop	{r4, r7, pc}
   11a48:	000110b9 	.word	0x000110b9
   11a4c:	0000f649 	.word	0x0000f649
   11a50:	0000eaef 	.word	0x0000eaef
   11a54:	0000f1a1 	.word	0x0000f1a1
   11a58:	0000ed97 	.word	0x0000ed97
   11a5c:	0000eac9 	.word	0x0000eac9

00011a60 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
   11a60:	b590      	push	{r4, r7, lr}
   11a62:	b087      	sub	sp, #28
   11a64:	af00      	add	r7, sp, #0
   11a66:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
   11a68:	687b      	ldr	r3, [r7, #4]
   11a6a:	2217      	movs	r2, #23
   11a6c:	18bc      	adds	r4, r7, r2
   11a6e:	2208      	movs	r2, #8
   11a70:	18ba      	adds	r2, r7, r2
   11a72:	0011      	movs	r1, r2
   11a74:	0018      	movs	r0, r3
   11a76:	4b40      	ldr	r3, [pc, #256]	; (11b78 <f_sync+0x118>)
   11a78:	4798      	blx	r3
   11a7a:	0003      	movs	r3, r0
   11a7c:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   11a7e:	2317      	movs	r3, #23
   11a80:	18fb      	adds	r3, r7, r3
   11a82:	781b      	ldrb	r3, [r3, #0]
   11a84:	2b00      	cmp	r3, #0
   11a86:	d16f      	bne.n	11b68 <f_sync+0x108>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
   11a88:	687b      	ldr	r3, [r7, #4]
   11a8a:	7c1b      	ldrb	r3, [r3, #16]
   11a8c:	001a      	movs	r2, r3
   11a8e:	2340      	movs	r3, #64	; 0x40
   11a90:	4013      	ands	r3, r2
   11a92:	d069      	beq.n	11b68 <f_sync+0x108>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
   11a94:	687b      	ldr	r3, [r7, #4]
   11a96:	7c1b      	ldrb	r3, [r3, #16]
   11a98:	b25b      	sxtb	r3, r3
   11a9a:	2b00      	cmp	r3, #0
   11a9c:	da14      	bge.n	11ac8 <f_sync+0x68>
				if (disk_writep(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
   11a9e:	68bb      	ldr	r3, [r7, #8]
   11aa0:	7858      	ldrb	r0, [r3, #1]
   11aa2:	687b      	ldr	r3, [r7, #4]
   11aa4:	3328      	adds	r3, #40	; 0x28
   11aa6:	0019      	movs	r1, r3
   11aa8:	687b      	ldr	r3, [r7, #4]
   11aaa:	69da      	ldr	r2, [r3, #28]
   11aac:	2301      	movs	r3, #1
   11aae:	4c33      	ldr	r4, [pc, #204]	; (11b7c <f_sync+0x11c>)
   11ab0:	47a0      	blx	r4
   11ab2:	1e03      	subs	r3, r0, #0
   11ab4:	d001      	beq.n	11aba <f_sync+0x5a>
   11ab6:	2301      	movs	r3, #1
   11ab8:	e059      	b.n	11b6e <f_sync+0x10e>
				fp->flag &= (BYTE)~FA_DIRTY;
   11aba:	687b      	ldr	r3, [r7, #4]
   11abc:	7c1b      	ldrb	r3, [r3, #16]
   11abe:	227f      	movs	r2, #127	; 0x7f
   11ac0:	4013      	ands	r3, r2
   11ac2:	b2da      	uxtb	r2, r3
   11ac4:	687b      	ldr	r3, [r7, #4]
   11ac6:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
   11ac8:	4b2d      	ldr	r3, [pc, #180]	; (11b80 <f_sync+0x120>)
   11aca:	4798      	blx	r3
   11acc:	0003      	movs	r3, r0
   11ace:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
   11ad0:	68ba      	ldr	r2, [r7, #8]
   11ad2:	687b      	ldr	r3, [r7, #4]
   11ad4:	6a1b      	ldr	r3, [r3, #32]
   11ad6:	2117      	movs	r1, #23
   11ad8:	187c      	adds	r4, r7, r1
   11ada:	0019      	movs	r1, r3
   11adc:	0010      	movs	r0, r2
   11ade:	4b29      	ldr	r3, [pc, #164]	; (11b84 <f_sync+0x124>)
   11ae0:	4798      	blx	r3
   11ae2:	0003      	movs	r3, r0
   11ae4:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
   11ae6:	2317      	movs	r3, #23
   11ae8:	18fb      	adds	r3, r7, r3
   11aea:	781b      	ldrb	r3, [r3, #0]
   11aec:	2b00      	cmp	r3, #0
   11aee:	d13b      	bne.n	11b68 <f_sync+0x108>
					dir = fp->dir_ptr;
   11af0:	687b      	ldr	r3, [r7, #4]
   11af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11af4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
   11af6:	68fb      	ldr	r3, [r7, #12]
   11af8:	330b      	adds	r3, #11
   11afa:	68fa      	ldr	r2, [r7, #12]
   11afc:	320b      	adds	r2, #11
   11afe:	7812      	ldrb	r2, [r2, #0]
   11b00:	2120      	movs	r1, #32
   11b02:	430a      	orrs	r2, r1
   11b04:	b2d2      	uxtb	r2, r2
   11b06:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
   11b08:	687b      	ldr	r3, [r7, #4]
   11b0a:	6818      	ldr	r0, [r3, #0]
   11b0c:	687b      	ldr	r3, [r7, #4]
   11b0e:	689a      	ldr	r2, [r3, #8]
   11b10:	68fb      	ldr	r3, [r7, #12]
   11b12:	0019      	movs	r1, r3
   11b14:	4b1c      	ldr	r3, [pc, #112]	; (11b88 <f_sync+0x128>)
   11b16:	4798      	blx	r3
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
   11b18:	68fb      	ldr	r3, [r7, #12]
   11b1a:	331c      	adds	r3, #28
   11b1c:	001a      	movs	r2, r3
   11b1e:	687b      	ldr	r3, [r7, #4]
   11b20:	68db      	ldr	r3, [r3, #12]
   11b22:	0019      	movs	r1, r3
   11b24:	0010      	movs	r0, r2
   11b26:	4b19      	ldr	r3, [pc, #100]	; (11b8c <f_sync+0x12c>)
   11b28:	4798      	blx	r3
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
   11b2a:	68fb      	ldr	r3, [r7, #12]
   11b2c:	3316      	adds	r3, #22
   11b2e:	693a      	ldr	r2, [r7, #16]
   11b30:	0011      	movs	r1, r2
   11b32:	0018      	movs	r0, r3
   11b34:	4b15      	ldr	r3, [pc, #84]	; (11b8c <f_sync+0x12c>)
   11b36:	4798      	blx	r3
					st_word(dir + DIR_LstAccDate, 0);
   11b38:	68fb      	ldr	r3, [r7, #12]
   11b3a:	3312      	adds	r3, #18
   11b3c:	2100      	movs	r1, #0
   11b3e:	0018      	movs	r0, r3
   11b40:	4b13      	ldr	r3, [pc, #76]	; (11b90 <f_sync+0x130>)
   11b42:	4798      	blx	r3
					fs->wflag = 1;
   11b44:	68bb      	ldr	r3, [r7, #8]
   11b46:	2201      	movs	r2, #1
   11b48:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
   11b4a:	68bb      	ldr	r3, [r7, #8]
   11b4c:	2217      	movs	r2, #23
   11b4e:	18bc      	adds	r4, r7, r2
   11b50:	0018      	movs	r0, r3
   11b52:	4b10      	ldr	r3, [pc, #64]	; (11b94 <f_sync+0x134>)
   11b54:	4798      	blx	r3
   11b56:	0003      	movs	r3, r0
   11b58:	7023      	strb	r3, [r4, #0]
					fp->flag &= (BYTE)~FA_MODIFIED;
   11b5a:	687b      	ldr	r3, [r7, #4]
   11b5c:	7c1b      	ldrb	r3, [r3, #16]
   11b5e:	2240      	movs	r2, #64	; 0x40
   11b60:	4393      	bics	r3, r2
   11b62:	b2da      	uxtb	r2, r3
   11b64:	687b      	ldr	r3, [r7, #4]
   11b66:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
   11b68:	2317      	movs	r3, #23
   11b6a:	18fb      	adds	r3, r7, r3
   11b6c:	781b      	ldrb	r3, [r3, #0]
}
   11b6e:	0018      	movs	r0, r3
   11b70:	46bd      	mov	sp, r7
   11b72:	b007      	add	sp, #28
   11b74:	bd90      	pop	{r4, r7, pc}
   11b76:	46c0      	nop			; (mov r8, r8)
   11b78:	000110b9 	.word	0x000110b9
   11b7c:	0000eaef 	.word	0x0000eaef
   11b80:	0000ec0d 	.word	0x0000ec0d
   11b84:	0000f015 	.word	0x0000f015
   11b88:	0000fc15 	.word	0x0000fc15
   11b8c:	0000ed43 	.word	0x0000ed43
   11b90:	0000ed07 	.word	0x0000ed07
   11b94:	0000f08d 	.word	0x0000f08d

00011b98 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
   11b98:	b590      	push	{r4, r7, lr}
   11b9a:	b085      	sub	sp, #20
   11b9c:	af00      	add	r7, sp, #0
   11b9e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
   11ba0:	230f      	movs	r3, #15
   11ba2:	18fc      	adds	r4, r7, r3
   11ba4:	687b      	ldr	r3, [r7, #4]
   11ba6:	0018      	movs	r0, r3
   11ba8:	4b11      	ldr	r3, [pc, #68]	; (11bf0 <f_close+0x58>)
   11baa:	4798      	blx	r3
   11bac:	0003      	movs	r3, r0
   11bae:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK)
   11bb0:	230f      	movs	r3, #15
   11bb2:	18fb      	adds	r3, r7, r3
   11bb4:	781b      	ldrb	r3, [r3, #0]
   11bb6:	2b00      	cmp	r3, #0
   11bb8:	d112      	bne.n	11be0 <f_close+0x48>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
   11bba:	687b      	ldr	r3, [r7, #4]
   11bbc:	220f      	movs	r2, #15
   11bbe:	18bc      	adds	r4, r7, r2
   11bc0:	2208      	movs	r2, #8
   11bc2:	18ba      	adds	r2, r7, r2
   11bc4:	0011      	movs	r1, r2
   11bc6:	0018      	movs	r0, r3
   11bc8:	4b0a      	ldr	r3, [pc, #40]	; (11bf4 <f_close+0x5c>)
   11bca:	4798      	blx	r3
   11bcc:	0003      	movs	r3, r0
   11bce:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   11bd0:	230f      	movs	r3, #15
   11bd2:	18fb      	adds	r3, r7, r3
   11bd4:	781b      	ldrb	r3, [r3, #0]
   11bd6:	2b00      	cmp	r3, #0
   11bd8:	d102      	bne.n	11be0 <f_close+0x48>
#if FF_FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
   11bda:	687b      	ldr	r3, [r7, #4]
   11bdc:	2200      	movs	r2, #0
   11bde:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
   11be0:	230f      	movs	r3, #15
   11be2:	18fb      	adds	r3, r7, r3
   11be4:	781b      	ldrb	r3, [r3, #0]
}
   11be6:	0018      	movs	r0, r3
   11be8:	46bd      	mov	sp, r7
   11bea:	b005      	add	sp, #20
   11bec:	bd90      	pop	{r4, r7, pc}
   11bee:	46c0      	nop			; (mov r8, r8)
   11bf0:	00011a61 	.word	0x00011a61
   11bf4:	000110b9 	.word	0x000110b9

00011bf8 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
   11bf8:	b590      	push	{r4, r7, lr}
   11bfa:	b089      	sub	sp, #36	; 0x24
   11bfc:	af00      	add	r7, sp, #0
   11bfe:	6078      	str	r0, [r7, #4]
   11c00:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if FF_USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
   11c02:	687b      	ldr	r3, [r7, #4]
   11c04:	221f      	movs	r2, #31
   11c06:	18bc      	adds	r4, r7, r2
   11c08:	2208      	movs	r2, #8
   11c0a:	18ba      	adds	r2, r7, r2
   11c0c:	0011      	movs	r1, r2
   11c0e:	0018      	movs	r0, r3
   11c10:	4b99      	ldr	r3, [pc, #612]	; (11e78 <f_lseek+0x280>)
   11c12:	4798      	blx	r3
   11c14:	0003      	movs	r3, r0
   11c16:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) res = (FRESULT)fp->err;
   11c18:	231f      	movs	r3, #31
   11c1a:	18fb      	adds	r3, r7, r3
   11c1c:	781b      	ldrb	r3, [r3, #0]
   11c1e:	2b00      	cmp	r3, #0
   11c20:	d104      	bne.n	11c2c <f_lseek+0x34>
   11c22:	231f      	movs	r3, #31
   11c24:	18fb      	adds	r3, r7, r3
   11c26:	687a      	ldr	r2, [r7, #4]
   11c28:	7c52      	ldrb	r2, [r2, #17]
   11c2a:	701a      	strb	r2, [r3, #0]
#if FF_FS_EXFAT && !FF_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
   11c2c:	231f      	movs	r3, #31
   11c2e:	18fb      	adds	r3, r7, r3
   11c30:	781b      	ldrb	r3, [r3, #0]
   11c32:	2b00      	cmp	r3, #0
   11c34:	d003      	beq.n	11c3e <f_lseek+0x46>
   11c36:	231f      	movs	r3, #31
   11c38:	18fb      	adds	r3, r7, r3
   11c3a:	781b      	ldrb	r3, [r3, #0]
   11c3c:	e117      	b.n	11e6e <f_lseek+0x276>
	/* Normal Seek */
	{
#if FF_FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4 GiB - 1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
   11c3e:	687b      	ldr	r3, [r7, #4]
   11c40:	68da      	ldr	r2, [r3, #12]
   11c42:	683b      	ldr	r3, [r7, #0]
   11c44:	429a      	cmp	r2, r3
   11c46:	d208      	bcs.n	11c5a <f_lseek+0x62>
   11c48:	687b      	ldr	r3, [r7, #4]
   11c4a:	7c1b      	ldrb	r3, [r3, #16]
   11c4c:	001a      	movs	r2, r3
   11c4e:	2302      	movs	r3, #2
   11c50:	4013      	ands	r3, r2
   11c52:	d102      	bne.n	11c5a <f_lseek+0x62>
			ofs = fp->obj.objsize;
   11c54:	687b      	ldr	r3, [r7, #4]
   11c56:	68db      	ldr	r3, [r3, #12]
   11c58:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
   11c5a:	687b      	ldr	r3, [r7, #4]
   11c5c:	695b      	ldr	r3, [r3, #20]
   11c5e:	613b      	str	r3, [r7, #16]
		fp->fptr = nsect = 0;
   11c60:	2300      	movs	r3, #0
   11c62:	617b      	str	r3, [r7, #20]
   11c64:	687b      	ldr	r3, [r7, #4]
   11c66:	697a      	ldr	r2, [r7, #20]
   11c68:	615a      	str	r2, [r3, #20]
		if (ofs > 0) {
   11c6a:	683b      	ldr	r3, [r7, #0]
   11c6c:	2b00      	cmp	r3, #0
   11c6e:	d100      	bne.n	11c72 <f_lseek+0x7a>
   11c70:	e0af      	b.n	11dd2 <f_lseek+0x1da>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
   11c72:	68bb      	ldr	r3, [r7, #8]
   11c74:	895b      	ldrh	r3, [r3, #10]
   11c76:	025b      	lsls	r3, r3, #9
   11c78:	60fb      	str	r3, [r7, #12]
			if (ifptr > 0 &&
   11c7a:	693b      	ldr	r3, [r7, #16]
   11c7c:	2b00      	cmp	r3, #0
   11c7e:	d020      	beq.n	11cc2 <f_lseek+0xca>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
   11c80:	683b      	ldr	r3, [r7, #0]
   11c82:	1e5a      	subs	r2, r3, #1
   11c84:	4b7d      	ldr	r3, [pc, #500]	; (11e7c <f_lseek+0x284>)
   11c86:	68f9      	ldr	r1, [r7, #12]
   11c88:	0010      	movs	r0, r2
   11c8a:	4798      	blx	r3
   11c8c:	0003      	movs	r3, r0
   11c8e:	001c      	movs	r4, r3
   11c90:	693b      	ldr	r3, [r7, #16]
   11c92:	1e5a      	subs	r2, r3, #1
   11c94:	4b79      	ldr	r3, [pc, #484]	; (11e7c <f_lseek+0x284>)
   11c96:	68f9      	ldr	r1, [r7, #12]
   11c98:	0010      	movs	r0, r2
   11c9a:	4798      	blx	r3
   11c9c:	0003      	movs	r3, r0
			if (ifptr > 0 &&
   11c9e:	429c      	cmp	r4, r3
   11ca0:	d30f      	bcc.n	11cc2 <f_lseek+0xca>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
   11ca2:	693b      	ldr	r3, [r7, #16]
   11ca4:	3b01      	subs	r3, #1
   11ca6:	68fa      	ldr	r2, [r7, #12]
   11ca8:	4252      	negs	r2, r2
   11caa:	401a      	ands	r2, r3
   11cac:	687b      	ldr	r3, [r7, #4]
   11cae:	615a      	str	r2, [r3, #20]
				ofs -= fp->fptr;
   11cb0:	687b      	ldr	r3, [r7, #4]
   11cb2:	695b      	ldr	r3, [r3, #20]
   11cb4:	683a      	ldr	r2, [r7, #0]
   11cb6:	1ad3      	subs	r3, r2, r3
   11cb8:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
   11cba:	687b      	ldr	r3, [r7, #4]
   11cbc:	699b      	ldr	r3, [r3, #24]
   11cbe:	61bb      	str	r3, [r7, #24]
   11cc0:	e022      	b.n	11d08 <f_lseek+0x110>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
   11cc2:	687b      	ldr	r3, [r7, #4]
   11cc4:	689b      	ldr	r3, [r3, #8]
   11cc6:	61bb      	str	r3, [r7, #24]
#if !FF_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
   11cc8:	69bb      	ldr	r3, [r7, #24]
   11cca:	2b00      	cmp	r3, #0
   11ccc:	d119      	bne.n	11d02 <f_lseek+0x10a>
					clst = create_chain(&fp->obj, 0);
   11cce:	687b      	ldr	r3, [r7, #4]
   11cd0:	2100      	movs	r1, #0
   11cd2:	0018      	movs	r0, r3
   11cd4:	4b6a      	ldr	r3, [pc, #424]	; (11e80 <f_lseek+0x288>)
   11cd6:	4798      	blx	r3
   11cd8:	0003      	movs	r3, r0
   11cda:	61bb      	str	r3, [r7, #24]
					if (clst == 1) ABORT(fs, FR_INT_ERR);
   11cdc:	69bb      	ldr	r3, [r7, #24]
   11cde:	2b01      	cmp	r3, #1
   11ce0:	d104      	bne.n	11cec <f_lseek+0xf4>
   11ce2:	687b      	ldr	r3, [r7, #4]
   11ce4:	2202      	movs	r2, #2
   11ce6:	745a      	strb	r2, [r3, #17]
   11ce8:	2302      	movs	r3, #2
   11cea:	e0c0      	b.n	11e6e <f_lseek+0x276>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   11cec:	69bb      	ldr	r3, [r7, #24]
   11cee:	3301      	adds	r3, #1
   11cf0:	d104      	bne.n	11cfc <f_lseek+0x104>
   11cf2:	687b      	ldr	r3, [r7, #4]
   11cf4:	2201      	movs	r2, #1
   11cf6:	745a      	strb	r2, [r3, #17]
   11cf8:	2301      	movs	r3, #1
   11cfa:	e0b8      	b.n	11e6e <f_lseek+0x276>
					fp->obj.sclust = clst;
   11cfc:	687b      	ldr	r3, [r7, #4]
   11cfe:	69ba      	ldr	r2, [r7, #24]
   11d00:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
   11d02:	687b      	ldr	r3, [r7, #4]
   11d04:	69ba      	ldr	r2, [r7, #24]
   11d06:	619a      	str	r2, [r3, #24]
			}
			if (clst != 0) {
   11d08:	69bb      	ldr	r3, [r7, #24]
   11d0a:	2b00      	cmp	r3, #0
   11d0c:	d061      	beq.n	11dd2 <f_lseek+0x1da>
				while (ofs > bcs) {						/* Cluster following loop */
   11d0e:	e03d      	b.n	11d8c <f_lseek+0x194>
					ofs -= bcs; fp->fptr += bcs;
   11d10:	683a      	ldr	r2, [r7, #0]
   11d12:	68fb      	ldr	r3, [r7, #12]
   11d14:	1ad3      	subs	r3, r2, r3
   11d16:	603b      	str	r3, [r7, #0]
   11d18:	687b      	ldr	r3, [r7, #4]
   11d1a:	695a      	ldr	r2, [r3, #20]
   11d1c:	68fb      	ldr	r3, [r7, #12]
   11d1e:	18d2      	adds	r2, r2, r3
   11d20:	687b      	ldr	r3, [r7, #4]
   11d22:	615a      	str	r2, [r3, #20]
#if !FF_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
   11d24:	687b      	ldr	r3, [r7, #4]
   11d26:	7c1b      	ldrb	r3, [r3, #16]
   11d28:	001a      	movs	r2, r3
   11d2a:	2302      	movs	r3, #2
   11d2c:	4013      	ands	r3, r2
   11d2e:	d00d      	beq.n	11d4c <f_lseek+0x154>
						if (FF_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
   11d30:	687b      	ldr	r3, [r7, #4]
   11d32:	69ba      	ldr	r2, [r7, #24]
   11d34:	0011      	movs	r1, r2
   11d36:	0018      	movs	r0, r3
   11d38:	4b51      	ldr	r3, [pc, #324]	; (11e80 <f_lseek+0x288>)
   11d3a:	4798      	blx	r3
   11d3c:	0003      	movs	r3, r0
   11d3e:	61bb      	str	r3, [r7, #24]
						if (clst == 0) {				/* Clip file size in case of disk full */
   11d40:	69bb      	ldr	r3, [r7, #24]
   11d42:	2b00      	cmp	r3, #0
   11d44:	d10a      	bne.n	11d5c <f_lseek+0x164>
							ofs = 0; break;
   11d46:	2300      	movs	r3, #0
   11d48:	603b      	str	r3, [r7, #0]
   11d4a:	e023      	b.n	11d94 <f_lseek+0x19c>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
   11d4c:	687b      	ldr	r3, [r7, #4]
   11d4e:	69ba      	ldr	r2, [r7, #24]
   11d50:	0011      	movs	r1, r2
   11d52:	0018      	movs	r0, r3
   11d54:	4b4b      	ldr	r3, [pc, #300]	; (11e84 <f_lseek+0x28c>)
   11d56:	4798      	blx	r3
   11d58:	0003      	movs	r3, r0
   11d5a:	61bb      	str	r3, [r7, #24]
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   11d5c:	69bb      	ldr	r3, [r7, #24]
   11d5e:	3301      	adds	r3, #1
   11d60:	d104      	bne.n	11d6c <f_lseek+0x174>
   11d62:	687b      	ldr	r3, [r7, #4]
   11d64:	2201      	movs	r2, #1
   11d66:	745a      	strb	r2, [r3, #17]
   11d68:	2301      	movs	r3, #1
   11d6a:	e080      	b.n	11e6e <f_lseek+0x276>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
   11d6c:	69bb      	ldr	r3, [r7, #24]
   11d6e:	2b01      	cmp	r3, #1
   11d70:	d904      	bls.n	11d7c <f_lseek+0x184>
   11d72:	68bb      	ldr	r3, [r7, #8]
   11d74:	699a      	ldr	r2, [r3, #24]
   11d76:	69bb      	ldr	r3, [r7, #24]
   11d78:	429a      	cmp	r2, r3
   11d7a:	d804      	bhi.n	11d86 <f_lseek+0x18e>
   11d7c:	687b      	ldr	r3, [r7, #4]
   11d7e:	2202      	movs	r2, #2
   11d80:	745a      	strb	r2, [r3, #17]
   11d82:	2302      	movs	r3, #2
   11d84:	e073      	b.n	11e6e <f_lseek+0x276>
					fp->clust = clst;
   11d86:	687b      	ldr	r3, [r7, #4]
   11d88:	69ba      	ldr	r2, [r7, #24]
   11d8a:	619a      	str	r2, [r3, #24]
				while (ofs > bcs) {						/* Cluster following loop */
   11d8c:	683a      	ldr	r2, [r7, #0]
   11d8e:	68fb      	ldr	r3, [r7, #12]
   11d90:	429a      	cmp	r2, r3
   11d92:	d8bd      	bhi.n	11d10 <f_lseek+0x118>
				}
				fp->fptr += ofs;
   11d94:	687b      	ldr	r3, [r7, #4]
   11d96:	695a      	ldr	r2, [r3, #20]
   11d98:	683b      	ldr	r3, [r7, #0]
   11d9a:	18d2      	adds	r2, r2, r3
   11d9c:	687b      	ldr	r3, [r7, #4]
   11d9e:	615a      	str	r2, [r3, #20]
				if (ofs % SS(fs)) {
   11da0:	683b      	ldr	r3, [r7, #0]
   11da2:	05db      	lsls	r3, r3, #23
   11da4:	0ddb      	lsrs	r3, r3, #23
   11da6:	d014      	beq.n	11dd2 <f_lseek+0x1da>
					nsect = clst2sect(fs, clst);	/* Current sector */
   11da8:	68bb      	ldr	r3, [r7, #8]
   11daa:	69ba      	ldr	r2, [r7, #24]
   11dac:	0011      	movs	r1, r2
   11dae:	0018      	movs	r0, r3
   11db0:	4b35      	ldr	r3, [pc, #212]	; (11e88 <f_lseek+0x290>)
   11db2:	4798      	blx	r3
   11db4:	0003      	movs	r3, r0
   11db6:	617b      	str	r3, [r7, #20]
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
   11db8:	697b      	ldr	r3, [r7, #20]
   11dba:	2b00      	cmp	r3, #0
   11dbc:	d104      	bne.n	11dc8 <f_lseek+0x1d0>
   11dbe:	687b      	ldr	r3, [r7, #4]
   11dc0:	2202      	movs	r2, #2
   11dc2:	745a      	strb	r2, [r3, #17]
   11dc4:	2302      	movs	r3, #2
   11dc6:	e052      	b.n	11e6e <f_lseek+0x276>
					nsect += (DWORD)(ofs / SS(fs));
   11dc8:	683b      	ldr	r3, [r7, #0]
   11dca:	0a5b      	lsrs	r3, r3, #9
   11dcc:	697a      	ldr	r2, [r7, #20]
   11dce:	18d3      	adds	r3, r2, r3
   11dd0:	617b      	str	r3, [r7, #20]
				}
			}
		}
		if (!FF_FS_READONLY && fp->fptr > fp->obj.objsize) {	/* Set file change flag if the file size is extended */
   11dd2:	687b      	ldr	r3, [r7, #4]
   11dd4:	695a      	ldr	r2, [r3, #20]
   11dd6:	687b      	ldr	r3, [r7, #4]
   11dd8:	68db      	ldr	r3, [r3, #12]
   11dda:	429a      	cmp	r2, r3
   11ddc:	d90a      	bls.n	11df4 <f_lseek+0x1fc>
			fp->obj.objsize = fp->fptr;
   11dde:	687b      	ldr	r3, [r7, #4]
   11de0:	695a      	ldr	r2, [r3, #20]
   11de2:	687b      	ldr	r3, [r7, #4]
   11de4:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
   11de6:	687b      	ldr	r3, [r7, #4]
   11de8:	7c1b      	ldrb	r3, [r3, #16]
   11dea:	2240      	movs	r2, #64	; 0x40
   11dec:	4313      	orrs	r3, r2
   11dee:	b2da      	uxtb	r2, r3
   11df0:	687b      	ldr	r3, [r7, #4]
   11df2:	741a      	strb	r2, [r3, #16]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
   11df4:	687b      	ldr	r3, [r7, #4]
   11df6:	695b      	ldr	r3, [r3, #20]
   11df8:	05db      	lsls	r3, r3, #23
   11dfa:	0ddb      	lsrs	r3, r3, #23
   11dfc:	d034      	beq.n	11e68 <f_lseek+0x270>
   11dfe:	687b      	ldr	r3, [r7, #4]
   11e00:	69da      	ldr	r2, [r3, #28]
   11e02:	697b      	ldr	r3, [r7, #20]
   11e04:	429a      	cmp	r2, r3
   11e06:	d02f      	beq.n	11e68 <f_lseek+0x270>
#if !FF_FS_TINY
#if !FF_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
   11e08:	687b      	ldr	r3, [r7, #4]
   11e0a:	7c1b      	ldrb	r3, [r3, #16]
   11e0c:	b25b      	sxtb	r3, r3
   11e0e:	2b00      	cmp	r3, #0
   11e10:	da17      	bge.n	11e42 <f_lseek+0x24a>
				if (disk_writep(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
   11e12:	68bb      	ldr	r3, [r7, #8]
   11e14:	7858      	ldrb	r0, [r3, #1]
   11e16:	687b      	ldr	r3, [r7, #4]
   11e18:	3328      	adds	r3, #40	; 0x28
   11e1a:	0019      	movs	r1, r3
   11e1c:	687b      	ldr	r3, [r7, #4]
   11e1e:	69da      	ldr	r2, [r3, #28]
   11e20:	2301      	movs	r3, #1
   11e22:	4c1a      	ldr	r4, [pc, #104]	; (11e8c <f_lseek+0x294>)
   11e24:	47a0      	blx	r4
   11e26:	1e03      	subs	r3, r0, #0
   11e28:	d004      	beq.n	11e34 <f_lseek+0x23c>
   11e2a:	687b      	ldr	r3, [r7, #4]
   11e2c:	2201      	movs	r2, #1
   11e2e:	745a      	strb	r2, [r3, #17]
   11e30:	2301      	movs	r3, #1
   11e32:	e01c      	b.n	11e6e <f_lseek+0x276>
				fp->flag &= (BYTE)~FA_DIRTY;
   11e34:	687b      	ldr	r3, [r7, #4]
   11e36:	7c1b      	ldrb	r3, [r3, #16]
   11e38:	227f      	movs	r2, #127	; 0x7f
   11e3a:	4013      	ands	r3, r2
   11e3c:	b2da      	uxtb	r2, r3
   11e3e:	687b      	ldr	r3, [r7, #4]
   11e40:	741a      	strb	r2, [r3, #16]
			}
#endif
			if (disk_readp(fs->pdrv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
   11e42:	68bb      	ldr	r3, [r7, #8]
   11e44:	7858      	ldrb	r0, [r3, #1]
   11e46:	687b      	ldr	r3, [r7, #4]
   11e48:	3328      	adds	r3, #40	; 0x28
   11e4a:	0019      	movs	r1, r3
   11e4c:	697a      	ldr	r2, [r7, #20]
   11e4e:	2301      	movs	r3, #1
   11e50:	4c0f      	ldr	r4, [pc, #60]	; (11e90 <f_lseek+0x298>)
   11e52:	47a0      	blx	r4
   11e54:	1e03      	subs	r3, r0, #0
   11e56:	d004      	beq.n	11e62 <f_lseek+0x26a>
   11e58:	687b      	ldr	r3, [r7, #4]
   11e5a:	2201      	movs	r2, #1
   11e5c:	745a      	strb	r2, [r3, #17]
   11e5e:	2301      	movs	r3, #1
   11e60:	e005      	b.n	11e6e <f_lseek+0x276>
#endif
			fp->sect = nsect;
   11e62:	687b      	ldr	r3, [r7, #4]
   11e64:	697a      	ldr	r2, [r7, #20]
   11e66:	61da      	str	r2, [r3, #28]
		}
	}

	LEAVE_FF(fs, res);
   11e68:	231f      	movs	r3, #31
   11e6a:	18fb      	adds	r3, r7, r3
   11e6c:	781b      	ldrb	r3, [r3, #0]
}
   11e6e:	0018      	movs	r0, r3
   11e70:	46bd      	mov	sp, r7
   11e72:	b009      	add	sp, #36	; 0x24
   11e74:	bd90      	pop	{r4, r7, pc}
   11e76:	46c0      	nop			; (mov r8, r8)
   11e78:	000110b9 	.word	0x000110b9
   11e7c:	0001df49 	.word	0x0001df49
   11e80:	0000f649 	.word	0x0000f649
   11e84:	0000f1d9 	.word	0x0000f1d9
   11e88:	0000f1a1 	.word	0x0000f1a1
   11e8c:	0000eaef 	.word	0x0000eaef
   11e90:	0000eac9 	.word	0x0000eac9

00011e94 <ff_uni2oem>:
#if FF_CODE_PAGE != 0 && FF_CODE_PAGE < 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
   11e94:	b580      	push	{r7, lr}
   11e96:	b084      	sub	sp, #16
   11e98:	af00      	add	r7, sp, #0
   11e9a:	6078      	str	r0, [r7, #4]
   11e9c:	000a      	movs	r2, r1
   11e9e:	1cbb      	adds	r3, r7, #2
   11ea0:	801a      	strh	r2, [r3, #0]
	WCHAR c = 0;
   11ea2:	230e      	movs	r3, #14
   11ea4:	18fb      	adds	r3, r7, r3
   11ea6:	2200      	movs	r2, #0
   11ea8:	801a      	strh	r2, [r3, #0]
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);
   11eaa:	4b20      	ldr	r3, [pc, #128]	; (11f2c <ff_uni2oem+0x98>)
   11eac:	60bb      	str	r3, [r7, #8]


	if (uni < 0x80) {	/* ASCII? */
   11eae:	687b      	ldr	r3, [r7, #4]
   11eb0:	2b7f      	cmp	r3, #127	; 0x7f
   11eb2:	d804      	bhi.n	11ebe <ff_uni2oem+0x2a>
		c = (WCHAR)uni;
   11eb4:	230e      	movs	r3, #14
   11eb6:	18fb      	adds	r3, r7, r3
   11eb8:	687a      	ldr	r2, [r7, #4]
   11eba:	801a      	strh	r2, [r3, #0]
   11ebc:	e02f      	b.n	11f1e <ff_uni2oem+0x8a>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
   11ebe:	687b      	ldr	r3, [r7, #4]
   11ec0:	4a1b      	ldr	r2, [pc, #108]	; (11f30 <ff_uni2oem+0x9c>)
   11ec2:	4293      	cmp	r3, r2
   11ec4:	d82b      	bhi.n	11f1e <ff_uni2oem+0x8a>
   11ec6:	1cbb      	adds	r3, r7, #2
   11ec8:	881a      	ldrh	r2, [r3, #0]
   11eca:	23b6      	movs	r3, #182	; 0xb6
   11ecc:	33ff      	adds	r3, #255	; 0xff
   11ece:	429a      	cmp	r2, r3
   11ed0:	d125      	bne.n	11f1e <ff_uni2oem+0x8a>
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
   11ed2:	230e      	movs	r3, #14
   11ed4:	18fb      	adds	r3, r7, r3
   11ed6:	2200      	movs	r2, #0
   11ed8:	801a      	strh	r2, [r3, #0]
   11eda:	e006      	b.n	11eea <ff_uni2oem+0x56>
   11edc:	230e      	movs	r3, #14
   11ede:	18fb      	adds	r3, r7, r3
   11ee0:	881a      	ldrh	r2, [r3, #0]
   11ee2:	230e      	movs	r3, #14
   11ee4:	18fb      	adds	r3, r7, r3
   11ee6:	3201      	adds	r2, #1
   11ee8:	801a      	strh	r2, [r3, #0]
   11eea:	230e      	movs	r3, #14
   11eec:	18fb      	adds	r3, r7, r3
   11eee:	881b      	ldrh	r3, [r3, #0]
   11ef0:	2b7f      	cmp	r3, #127	; 0x7f
   11ef2:	d80a      	bhi.n	11f0a <ff_uni2oem+0x76>
   11ef4:	230e      	movs	r3, #14
   11ef6:	18fb      	adds	r3, r7, r3
   11ef8:	881b      	ldrh	r3, [r3, #0]
   11efa:	005b      	lsls	r3, r3, #1
   11efc:	68ba      	ldr	r2, [r7, #8]
   11efe:	18d3      	adds	r3, r2, r3
   11f00:	881b      	ldrh	r3, [r3, #0]
   11f02:	001a      	movs	r2, r3
   11f04:	687b      	ldr	r3, [r7, #4]
   11f06:	429a      	cmp	r2, r3
   11f08:	d1e8      	bne.n	11edc <ff_uni2oem+0x48>
			c = (c + 0x80) & 0xFF;
   11f0a:	230e      	movs	r3, #14
   11f0c:	18fb      	adds	r3, r7, r3
   11f0e:	881b      	ldrh	r3, [r3, #0]
   11f10:	3380      	adds	r3, #128	; 0x80
   11f12:	b29a      	uxth	r2, r3
   11f14:	230e      	movs	r3, #14
   11f16:	18fb      	adds	r3, r7, r3
   11f18:	21ff      	movs	r1, #255	; 0xff
   11f1a:	400a      	ands	r2, r1
   11f1c:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
   11f1e:	230e      	movs	r3, #14
   11f20:	18fb      	adds	r3, r7, r3
   11f22:	881b      	ldrh	r3, [r3, #0]
}
   11f24:	0018      	movs	r0, r3
   11f26:	46bd      	mov	sp, r7
   11f28:	b004      	add	sp, #16
   11f2a:	bd80      	pop	{r7, pc}
   11f2c:	0002593c 	.word	0x0002593c
   11f30:	0000ffff 	.word	0x0000ffff

00011f34 <ff_oem2uni>:

WCHAR ff_oem2uni (	/* Returns Unicode character, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
   11f34:	b580      	push	{r7, lr}
   11f36:	b084      	sub	sp, #16
   11f38:	af00      	add	r7, sp, #0
   11f3a:	0002      	movs	r2, r0
   11f3c:	1dbb      	adds	r3, r7, #6
   11f3e:	801a      	strh	r2, [r3, #0]
   11f40:	1d3b      	adds	r3, r7, #4
   11f42:	1c0a      	adds	r2, r1, #0
   11f44:	801a      	strh	r2, [r3, #0]
	WCHAR c = 0;
   11f46:	230e      	movs	r3, #14
   11f48:	18fb      	adds	r3, r7, r3
   11f4a:	2200      	movs	r2, #0
   11f4c:	801a      	strh	r2, [r3, #0]
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);
   11f4e:	4b14      	ldr	r3, [pc, #80]	; (11fa0 <ff_oem2uni+0x6c>)
   11f50:	60bb      	str	r3, [r7, #8]


	if (oem < 0x80) {	/* ASCII? */
   11f52:	1dbb      	adds	r3, r7, #6
   11f54:	881b      	ldrh	r3, [r3, #0]
   11f56:	2b7f      	cmp	r3, #127	; 0x7f
   11f58:	d805      	bhi.n	11f66 <ff_oem2uni+0x32>
		c = oem;
   11f5a:	230e      	movs	r3, #14
   11f5c:	18fb      	adds	r3, r7, r3
   11f5e:	1dba      	adds	r2, r7, #6
   11f60:	8812      	ldrh	r2, [r2, #0]
   11f62:	801a      	strh	r2, [r3, #0]
   11f64:	e015      	b.n	11f92 <ff_oem2uni+0x5e>

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
   11f66:	1d3b      	adds	r3, r7, #4
   11f68:	881a      	ldrh	r2, [r3, #0]
   11f6a:	23b6      	movs	r3, #182	; 0xb6
   11f6c:	33ff      	adds	r3, #255	; 0xff
   11f6e:	429a      	cmp	r2, r3
   11f70:	d10f      	bne.n	11f92 <ff_oem2uni+0x5e>
			if (oem < 0x100) c = p[oem - 0x80];
   11f72:	1dbb      	adds	r3, r7, #6
   11f74:	881b      	ldrh	r3, [r3, #0]
   11f76:	2bff      	cmp	r3, #255	; 0xff
   11f78:	d80b      	bhi.n	11f92 <ff_oem2uni+0x5e>
   11f7a:	1dbb      	adds	r3, r7, #6
   11f7c:	881b      	ldrh	r3, [r3, #0]
   11f7e:	4a09      	ldr	r2, [pc, #36]	; (11fa4 <ff_oem2uni+0x70>)
   11f80:	4694      	mov	ip, r2
   11f82:	4463      	add	r3, ip
   11f84:	005b      	lsls	r3, r3, #1
   11f86:	68ba      	ldr	r2, [r7, #8]
   11f88:	18d2      	adds	r2, r2, r3
   11f8a:	230e      	movs	r3, #14
   11f8c:	18fb      	adds	r3, r7, r3
   11f8e:	8812      	ldrh	r2, [r2, #0]
   11f90:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
   11f92:	230e      	movs	r3, #14
   11f94:	18fb      	adds	r3, r7, r3
   11f96:	881b      	ldrh	r3, [r3, #0]
}
   11f98:	0018      	movs	r0, r3
   11f9a:	46bd      	mov	sp, r7
   11f9c:	b004      	add	sp, #16
   11f9e:	bd80      	pop	{r7, pc}
   11fa0:	0002593c 	.word	0x0002593c
   11fa4:	7fffff80 	.word	0x7fffff80

00011fa8 <ff_wtoupper>:
/*------------------------------------------------------------------------*/

DWORD ff_wtoupper (	/* Returns up-converted code point */
	DWORD uni		/* Unicode code point to be up-converted */
)
{
   11fa8:	b580      	push	{r7, lr}
   11faa:	b086      	sub	sp, #24
   11fac:	af00      	add	r7, sp, #0
   11fae:	6078      	str	r0, [r7, #4]

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
   11fb0:	687b      	ldr	r3, [r7, #4]
   11fb2:	4a65      	ldr	r2, [pc, #404]	; (12148 <ff_wtoupper+0x1a0>)
   11fb4:	4293      	cmp	r3, r2
   11fb6:	d900      	bls.n	11fba <ff_wtoupper+0x12>
   11fb8:	e0c0      	b.n	1213c <ff_wtoupper+0x194>
		uc = (WORD)uni;
   11fba:	2312      	movs	r3, #18
   11fbc:	18fb      	adds	r3, r7, r3
   11fbe:	687a      	ldr	r2, [r7, #4]
   11fc0:	801a      	strh	r2, [r3, #0]
		p = uc < 0x1000 ? cvt1 : cvt2;
   11fc2:	2312      	movs	r3, #18
   11fc4:	18fb      	adds	r3, r7, r3
   11fc6:	881b      	ldrh	r3, [r3, #0]
   11fc8:	4a60      	ldr	r2, [pc, #384]	; (1214c <ff_wtoupper+0x1a4>)
   11fca:	4293      	cmp	r3, r2
   11fcc:	d801      	bhi.n	11fd2 <ff_wtoupper+0x2a>
   11fce:	4b60      	ldr	r3, [pc, #384]	; (12150 <ff_wtoupper+0x1a8>)
   11fd0:	e000      	b.n	11fd4 <ff_wtoupper+0x2c>
   11fd2:	4b60      	ldr	r3, [pc, #384]	; (12154 <ff_wtoupper+0x1ac>)
   11fd4:	617b      	str	r3, [r7, #20]
		for (;;) {
			bc = *p++;								/* Get the block base */
   11fd6:	697b      	ldr	r3, [r7, #20]
   11fd8:	1c9a      	adds	r2, r3, #2
   11fda:	617a      	str	r2, [r7, #20]
   11fdc:	2210      	movs	r2, #16
   11fde:	18ba      	adds	r2, r7, r2
   11fe0:	881b      	ldrh	r3, [r3, #0]
   11fe2:	8013      	strh	r3, [r2, #0]
			if (bc == 0 || uc < bc) break;			/* Not matched? */
   11fe4:	2310      	movs	r3, #16
   11fe6:	18fb      	adds	r3, r7, r3
   11fe8:	881b      	ldrh	r3, [r3, #0]
   11fea:	2b00      	cmp	r3, #0
   11fec:	d100      	bne.n	11ff0 <ff_wtoupper+0x48>
   11fee:	e0a1      	b.n	12134 <ff_wtoupper+0x18c>
   11ff0:	2312      	movs	r3, #18
   11ff2:	18fa      	adds	r2, r7, r3
   11ff4:	2310      	movs	r3, #16
   11ff6:	18fb      	adds	r3, r7, r3
   11ff8:	8812      	ldrh	r2, [r2, #0]
   11ffa:	881b      	ldrh	r3, [r3, #0]
   11ffc:	429a      	cmp	r2, r3
   11ffe:	d200      	bcs.n	12002 <ff_wtoupper+0x5a>
   12000:	e098      	b.n	12134 <ff_wtoupper+0x18c>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
   12002:	697b      	ldr	r3, [r7, #20]
   12004:	1c9a      	adds	r2, r3, #2
   12006:	617a      	str	r2, [r7, #20]
   12008:	220e      	movs	r2, #14
   1200a:	18ba      	adds	r2, r7, r2
   1200c:	881b      	ldrh	r3, [r3, #0]
   1200e:	8013      	strh	r3, [r2, #0]
   12010:	230c      	movs	r3, #12
   12012:	18fb      	adds	r3, r7, r3
   12014:	220e      	movs	r2, #14
   12016:	18ba      	adds	r2, r7, r2
   12018:	8812      	ldrh	r2, [r2, #0]
   1201a:	0a12      	lsrs	r2, r2, #8
   1201c:	801a      	strh	r2, [r3, #0]
   1201e:	230e      	movs	r3, #14
   12020:	18fb      	adds	r3, r7, r3
   12022:	220e      	movs	r2, #14
   12024:	18ba      	adds	r2, r7, r2
   12026:	8812      	ldrh	r2, [r2, #0]
   12028:	21ff      	movs	r1, #255	; 0xff
   1202a:	400a      	ands	r2, r1
   1202c:	801a      	strh	r2, [r3, #0]
			if (uc < bc + nc) {	/* In the block? */
   1202e:	2312      	movs	r3, #18
   12030:	18fb      	adds	r3, r7, r3
   12032:	881a      	ldrh	r2, [r3, #0]
   12034:	2310      	movs	r3, #16
   12036:	18fb      	adds	r3, r7, r3
   12038:	8819      	ldrh	r1, [r3, #0]
   1203a:	230e      	movs	r3, #14
   1203c:	18fb      	adds	r3, r7, r3
   1203e:	881b      	ldrh	r3, [r3, #0]
   12040:	18cb      	adds	r3, r1, r3
   12042:	429a      	cmp	r2, r3
   12044:	da67      	bge.n	12116 <ff_wtoupper+0x16e>
				switch (cmd) {
   12046:	230c      	movs	r3, #12
   12048:	18fb      	adds	r3, r7, r3
   1204a:	881b      	ldrh	r3, [r3, #0]
   1204c:	2b08      	cmp	r3, #8
   1204e:	d900      	bls.n	12052 <ff_wtoupper+0xaa>
   12050:	e06f      	b.n	12132 <ff_wtoupper+0x18a>
   12052:	009a      	lsls	r2, r3, #2
   12054:	4b40      	ldr	r3, [pc, #256]	; (12158 <ff_wtoupper+0x1b0>)
   12056:	18d3      	adds	r3, r2, r3
   12058:	681b      	ldr	r3, [r3, #0]
   1205a:	469f      	mov	pc, r3
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
   1205c:	2312      	movs	r3, #18
   1205e:	18fb      	adds	r3, r7, r3
   12060:	881a      	ldrh	r2, [r3, #0]
   12062:	2310      	movs	r3, #16
   12064:	18fb      	adds	r3, r7, r3
   12066:	881b      	ldrh	r3, [r3, #0]
   12068:	1ad3      	subs	r3, r2, r3
   1206a:	005b      	lsls	r3, r3, #1
   1206c:	697a      	ldr	r2, [r7, #20]
   1206e:	18d2      	adds	r2, r2, r3
   12070:	2312      	movs	r3, #18
   12072:	18fb      	adds	r3, r7, r3
   12074:	8812      	ldrh	r2, [r2, #0]
   12076:	801a      	strh	r2, [r3, #0]
   12078:	e04c      	b.n	12114 <ff_wtoupper+0x16c>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
   1207a:	2312      	movs	r3, #18
   1207c:	18fa      	adds	r2, r7, r3
   1207e:	2310      	movs	r3, #16
   12080:	18fb      	adds	r3, r7, r3
   12082:	8812      	ldrh	r2, [r2, #0]
   12084:	881b      	ldrh	r3, [r3, #0]
   12086:	1ad3      	subs	r3, r2, r3
   12088:	b29b      	uxth	r3, r3
   1208a:	2201      	movs	r2, #1
   1208c:	4013      	ands	r3, r2
   1208e:	b29a      	uxth	r2, r3
   12090:	2312      	movs	r3, #18
   12092:	18fb      	adds	r3, r7, r3
   12094:	2112      	movs	r1, #18
   12096:	1879      	adds	r1, r7, r1
   12098:	8809      	ldrh	r1, [r1, #0]
   1209a:	1a8a      	subs	r2, r1, r2
   1209c:	801a      	strh	r2, [r3, #0]
   1209e:	e039      	b.n	12114 <ff_wtoupper+0x16c>
				case 2: uc -= 16; break;			/* Shift -16 */
   120a0:	2312      	movs	r3, #18
   120a2:	18fb      	adds	r3, r7, r3
   120a4:	2212      	movs	r2, #18
   120a6:	18ba      	adds	r2, r7, r2
   120a8:	8812      	ldrh	r2, [r2, #0]
   120aa:	3a10      	subs	r2, #16
   120ac:	801a      	strh	r2, [r3, #0]
   120ae:	e031      	b.n	12114 <ff_wtoupper+0x16c>
				case 3:	uc -= 32; break;			/* Shift -32 */
   120b0:	2312      	movs	r3, #18
   120b2:	18fb      	adds	r3, r7, r3
   120b4:	2212      	movs	r2, #18
   120b6:	18ba      	adds	r2, r7, r2
   120b8:	8812      	ldrh	r2, [r2, #0]
   120ba:	3a20      	subs	r2, #32
   120bc:	801a      	strh	r2, [r3, #0]
   120be:	e029      	b.n	12114 <ff_wtoupper+0x16c>
				case 4:	uc -= 48; break;			/* Shift -48 */
   120c0:	2312      	movs	r3, #18
   120c2:	18fb      	adds	r3, r7, r3
   120c4:	2212      	movs	r2, #18
   120c6:	18ba      	adds	r2, r7, r2
   120c8:	8812      	ldrh	r2, [r2, #0]
   120ca:	3a30      	subs	r2, #48	; 0x30
   120cc:	801a      	strh	r2, [r3, #0]
   120ce:	e021      	b.n	12114 <ff_wtoupper+0x16c>
				case 5:	uc -= 26; break;			/* Shift -26 */
   120d0:	2312      	movs	r3, #18
   120d2:	18fb      	adds	r3, r7, r3
   120d4:	2212      	movs	r2, #18
   120d6:	18ba      	adds	r2, r7, r2
   120d8:	8812      	ldrh	r2, [r2, #0]
   120da:	3a1a      	subs	r2, #26
   120dc:	801a      	strh	r2, [r3, #0]
   120de:	e019      	b.n	12114 <ff_wtoupper+0x16c>
				case 6:	uc += 8; break;				/* Shift +8 */
   120e0:	2312      	movs	r3, #18
   120e2:	18fb      	adds	r3, r7, r3
   120e4:	2212      	movs	r2, #18
   120e6:	18ba      	adds	r2, r7, r2
   120e8:	8812      	ldrh	r2, [r2, #0]
   120ea:	3208      	adds	r2, #8
   120ec:	801a      	strh	r2, [r3, #0]
   120ee:	e011      	b.n	12114 <ff_wtoupper+0x16c>
				case 7: uc -= 80; break;			/* Shift -80 */
   120f0:	2312      	movs	r3, #18
   120f2:	18fb      	adds	r3, r7, r3
   120f4:	2212      	movs	r2, #18
   120f6:	18ba      	adds	r2, r7, r2
   120f8:	8812      	ldrh	r2, [r2, #0]
   120fa:	3a50      	subs	r2, #80	; 0x50
   120fc:	801a      	strh	r2, [r3, #0]
   120fe:	e009      	b.n	12114 <ff_wtoupper+0x16c>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
   12100:	2312      	movs	r3, #18
   12102:	18fb      	adds	r3, r7, r3
   12104:	2212      	movs	r2, #18
   12106:	18ba      	adds	r2, r7, r2
   12108:	8812      	ldrh	r2, [r2, #0]
   1210a:	4914      	ldr	r1, [pc, #80]	; (1215c <ff_wtoupper+0x1b4>)
   1210c:	468c      	mov	ip, r1
   1210e:	4462      	add	r2, ip
   12110:	801a      	strh	r2, [r3, #0]
   12112:	46c0      	nop			; (mov r8, r8)
				}
				break;
   12114:	e00d      	b.n	12132 <ff_wtoupper+0x18a>
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
   12116:	230c      	movs	r3, #12
   12118:	18fb      	adds	r3, r7, r3
   1211a:	881b      	ldrh	r3, [r3, #0]
   1211c:	2b00      	cmp	r3, #0
   1211e:	d000      	beq.n	12122 <ff_wtoupper+0x17a>
   12120:	e759      	b.n	11fd6 <ff_wtoupper+0x2e>
   12122:	230e      	movs	r3, #14
   12124:	18fb      	adds	r3, r7, r3
   12126:	881b      	ldrh	r3, [r3, #0]
   12128:	005b      	lsls	r3, r3, #1
   1212a:	697a      	ldr	r2, [r7, #20]
   1212c:	18d3      	adds	r3, r2, r3
   1212e:	617b      	str	r3, [r7, #20]
			bc = *p++;								/* Get the block base */
   12130:	e751      	b.n	11fd6 <ff_wtoupper+0x2e>
				break;
   12132:	46c0      	nop			; (mov r8, r8)
		}
		uni = uc;
   12134:	2312      	movs	r3, #18
   12136:	18fb      	adds	r3, r7, r3
   12138:	881b      	ldrh	r3, [r3, #0]
   1213a:	607b      	str	r3, [r7, #4]
	}

	return uni;
   1213c:	687b      	ldr	r3, [r7, #4]
}
   1213e:	0018      	movs	r0, r3
   12140:	46bd      	mov	sp, r7
   12142:	b006      	add	sp, #24
   12144:	bd80      	pop	{r7, pc}
   12146:	46c0      	nop			; (mov r8, r8)
   12148:	0000ffff 	.word	0x0000ffff
   1214c:	00000fff 	.word	0x00000fff
   12150:	00025a60 	.word	0x00025a60
   12154:	00025c54 	.word	0x00025c54
   12158:	00025a3c 	.word	0x00025a3c
   1215c:	ffffe3a0 	.word	0xffffe3a0

00012160 <arch_ioport_pin_to_port_id>:
{
   12160:	b580      	push	{r7, lr}
   12162:	b082      	sub	sp, #8
   12164:	af00      	add	r7, sp, #0
   12166:	6078      	str	r0, [r7, #4]
	return pin >> 5;
   12168:	687b      	ldr	r3, [r7, #4]
   1216a:	095b      	lsrs	r3, r3, #5
}
   1216c:	0018      	movs	r0, r3
   1216e:	46bd      	mov	sp, r7
   12170:	b002      	add	sp, #8
   12172:	bd80      	pop	{r7, pc}

00012174 <arch_ioport_port_to_base>:
{
   12174:	b580      	push	{r7, lr}
   12176:	b082      	sub	sp, #8
   12178:	af00      	add	r7, sp, #0
   1217a:	6078      	str	r0, [r7, #4]
	return &PORT->Group[port];
   1217c:	687b      	ldr	r3, [r7, #4]
   1217e:	01db      	lsls	r3, r3, #7
   12180:	4a03      	ldr	r2, [pc, #12]	; (12190 <arch_ioport_port_to_base+0x1c>)
   12182:	4694      	mov	ip, r2
   12184:	4463      	add	r3, ip
}
   12186:	0018      	movs	r0, r3
   12188:	46bd      	mov	sp, r7
   1218a:	b002      	add	sp, #8
   1218c:	bd80      	pop	{r7, pc}
   1218e:	46c0      	nop			; (mov r8, r8)
   12190:	40002800 	.word	0x40002800

00012194 <arch_ioport_pin_to_base>:
{
   12194:	b580      	push	{r7, lr}
   12196:	b082      	sub	sp, #8
   12198:	af00      	add	r7, sp, #0
   1219a:	6078      	str	r0, [r7, #4]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
   1219c:	687b      	ldr	r3, [r7, #4]
   1219e:	0018      	movs	r0, r3
   121a0:	4b05      	ldr	r3, [pc, #20]	; (121b8 <arch_ioport_pin_to_base+0x24>)
   121a2:	4798      	blx	r3
   121a4:	0003      	movs	r3, r0
   121a6:	0018      	movs	r0, r3
   121a8:	4b04      	ldr	r3, [pc, #16]	; (121bc <arch_ioport_pin_to_base+0x28>)
   121aa:	4798      	blx	r3
   121ac:	0003      	movs	r3, r0
}
   121ae:	0018      	movs	r0, r3
   121b0:	46bd      	mov	sp, r7
   121b2:	b002      	add	sp, #8
   121b4:	bd80      	pop	{r7, pc}
   121b6:	46c0      	nop			; (mov r8, r8)
   121b8:	00012161 	.word	0x00012161
   121bc:	00012175 	.word	0x00012175

000121c0 <arch_ioport_pin_to_mask>:
{
   121c0:	b580      	push	{r7, lr}
   121c2:	b082      	sub	sp, #8
   121c4:	af00      	add	r7, sp, #0
   121c6:	6078      	str	r0, [r7, #4]
	return 1U << (pin & 0x1F);
   121c8:	687b      	ldr	r3, [r7, #4]
   121ca:	221f      	movs	r2, #31
   121cc:	4013      	ands	r3, r2
   121ce:	2201      	movs	r2, #1
   121d0:	409a      	lsls	r2, r3
   121d2:	0013      	movs	r3, r2
}
   121d4:	0018      	movs	r0, r3
   121d6:	46bd      	mov	sp, r7
   121d8:	b002      	add	sp, #8
   121da:	bd80      	pop	{r7, pc}

000121dc <arch_ioport_set_pin_dir>:
{
   121dc:	b580      	push	{r7, lr}
   121de:	b084      	sub	sp, #16
   121e0:	af00      	add	r7, sp, #0
   121e2:	6078      	str	r0, [r7, #4]
   121e4:	000a      	movs	r2, r1
   121e6:	1cfb      	adds	r3, r7, #3
   121e8:	701a      	strb	r2, [r3, #0]
	PortGroup *base = arch_ioport_pin_to_base(pin);
   121ea:	687b      	ldr	r3, [r7, #4]
   121ec:	0018      	movs	r0, r3
   121ee:	4b18      	ldr	r3, [pc, #96]	; (12250 <arch_ioport_set_pin_dir+0x74>)
   121f0:	4798      	blx	r3
   121f2:	0003      	movs	r3, r0
   121f4:	60fb      	str	r3, [r7, #12]
	if (dir == IOPORT_DIR_OUTPUT) {
   121f6:	1cfb      	adds	r3, r7, #3
   121f8:	781b      	ldrb	r3, [r3, #0]
   121fa:	2b01      	cmp	r3, #1
   121fc:	d107      	bne.n	1220e <arch_ioport_set_pin_dir+0x32>
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   121fe:	687b      	ldr	r3, [r7, #4]
   12200:	0018      	movs	r0, r3
   12202:	4b14      	ldr	r3, [pc, #80]	; (12254 <arch_ioport_set_pin_dir+0x78>)
   12204:	4798      	blx	r3
   12206:	0002      	movs	r2, r0
   12208:	68fb      	ldr	r3, [r7, #12]
   1220a:	609a      	str	r2, [r3, #8]
   1220c:	e00a      	b.n	12224 <arch_ioport_set_pin_dir+0x48>
	} else if (dir == IOPORT_DIR_INPUT) {
   1220e:	1cfb      	adds	r3, r7, #3
   12210:	781b      	ldrb	r3, [r3, #0]
   12212:	2b00      	cmp	r3, #0
   12214:	d106      	bne.n	12224 <arch_ioport_set_pin_dir+0x48>
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   12216:	687b      	ldr	r3, [r7, #4]
   12218:	0018      	movs	r0, r3
   1221a:	4b0e      	ldr	r3, [pc, #56]	; (12254 <arch_ioport_set_pin_dir+0x78>)
   1221c:	4798      	blx	r3
   1221e:	0002      	movs	r2, r0
   12220:	68fb      	ldr	r3, [r7, #12]
   12222:	605a      	str	r2, [r3, #4]
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
   12224:	68fa      	ldr	r2, [r7, #12]
   12226:	2140      	movs	r1, #64	; 0x40
   12228:	687b      	ldr	r3, [r7, #4]
   1222a:	18d3      	adds	r3, r2, r3
   1222c:	185b      	adds	r3, r3, r1
   1222e:	781b      	ldrb	r3, [r3, #0]
   12230:	b2db      	uxtb	r3, r3
   12232:	2202      	movs	r2, #2
   12234:	4313      	orrs	r3, r2
   12236:	b2d8      	uxtb	r0, r3
   12238:	68fa      	ldr	r2, [r7, #12]
   1223a:	2140      	movs	r1, #64	; 0x40
   1223c:	687b      	ldr	r3, [r7, #4]
   1223e:	18d3      	adds	r3, r2, r3
   12240:	185b      	adds	r3, r3, r1
   12242:	1c02      	adds	r2, r0, #0
   12244:	701a      	strb	r2, [r3, #0]
}
   12246:	46c0      	nop			; (mov r8, r8)
   12248:	46bd      	mov	sp, r7
   1224a:	b004      	add	sp, #16
   1224c:	bd80      	pop	{r7, pc}
   1224e:	46c0      	nop			; (mov r8, r8)
   12250:	00012195 	.word	0x00012195
   12254:	000121c1 	.word	0x000121c1

00012258 <arch_ioport_set_pin_level>:
{
   12258:	b590      	push	{r4, r7, lr}
   1225a:	b083      	sub	sp, #12
   1225c:	af00      	add	r7, sp, #0
   1225e:	6078      	str	r0, [r7, #4]
   12260:	000a      	movs	r2, r1
   12262:	1cfb      	adds	r3, r7, #3
   12264:	701a      	strb	r2, [r3, #0]
	if (level) {
   12266:	1cfb      	adds	r3, r7, #3
   12268:	781b      	ldrb	r3, [r3, #0]
   1226a:	2b00      	cmp	r3, #0
   1226c:	d00b      	beq.n	12286 <arch_ioport_set_pin_level+0x2e>
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
   1226e:	687b      	ldr	r3, [r7, #4]
   12270:	0018      	movs	r0, r3
   12272:	4b0c      	ldr	r3, [pc, #48]	; (122a4 <arch_ioport_set_pin_level+0x4c>)
   12274:	4798      	blx	r3
   12276:	0004      	movs	r4, r0
   12278:	687b      	ldr	r3, [r7, #4]
   1227a:	0018      	movs	r0, r3
   1227c:	4b0a      	ldr	r3, [pc, #40]	; (122a8 <arch_ioport_set_pin_level+0x50>)
   1227e:	4798      	blx	r3
   12280:	0003      	movs	r3, r0
   12282:	61a3      	str	r3, [r4, #24]
}
   12284:	e00a      	b.n	1229c <arch_ioport_set_pin_level+0x44>
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
   12286:	687b      	ldr	r3, [r7, #4]
   12288:	0018      	movs	r0, r3
   1228a:	4b06      	ldr	r3, [pc, #24]	; (122a4 <arch_ioport_set_pin_level+0x4c>)
   1228c:	4798      	blx	r3
   1228e:	0004      	movs	r4, r0
   12290:	687b      	ldr	r3, [r7, #4]
   12292:	0018      	movs	r0, r3
   12294:	4b04      	ldr	r3, [pc, #16]	; (122a8 <arch_ioport_set_pin_level+0x50>)
   12296:	4798      	blx	r3
   12298:	0003      	movs	r3, r0
   1229a:	6163      	str	r3, [r4, #20]
}
   1229c:	46c0      	nop			; (mov r8, r8)
   1229e:	46bd      	mov	sp, r7
   122a0:	b003      	add	sp, #12
   122a2:	bd90      	pop	{r4, r7, pc}
   122a4:	00012195 	.word	0x00012195
   122a8:	000121c1 	.word	0x000121c1

000122ac <ioport_set_pin_dir>:
{
   122ac:	b580      	push	{r7, lr}
   122ae:	b082      	sub	sp, #8
   122b0:	af00      	add	r7, sp, #0
   122b2:	6078      	str	r0, [r7, #4]
   122b4:	000a      	movs	r2, r1
   122b6:	1cfb      	adds	r3, r7, #3
   122b8:	701a      	strb	r2, [r3, #0]
	arch_ioport_set_pin_dir(pin, dir);
   122ba:	1cfb      	adds	r3, r7, #3
   122bc:	781a      	ldrb	r2, [r3, #0]
   122be:	687b      	ldr	r3, [r7, #4]
   122c0:	0011      	movs	r1, r2
   122c2:	0018      	movs	r0, r3
   122c4:	4b02      	ldr	r3, [pc, #8]	; (122d0 <ioport_set_pin_dir+0x24>)
   122c6:	4798      	blx	r3
}
   122c8:	46c0      	nop			; (mov r8, r8)
   122ca:	46bd      	mov	sp, r7
   122cc:	b002      	add	sp, #8
   122ce:	bd80      	pop	{r7, pc}
   122d0:	000121dd 	.word	0x000121dd

000122d4 <ioport_set_pin_level>:
{
   122d4:	b580      	push	{r7, lr}
   122d6:	b082      	sub	sp, #8
   122d8:	af00      	add	r7, sp, #0
   122da:	6078      	str	r0, [r7, #4]
   122dc:	000a      	movs	r2, r1
   122de:	1cfb      	adds	r3, r7, #3
   122e0:	701a      	strb	r2, [r3, #0]
	arch_ioport_set_pin_level(pin, level);
   122e2:	1cfb      	adds	r3, r7, #3
   122e4:	781a      	ldrb	r2, [r3, #0]
   122e6:	687b      	ldr	r3, [r7, #4]
   122e8:	0011      	movs	r1, r2
   122ea:	0018      	movs	r0, r3
   122ec:	4b02      	ldr	r3, [pc, #8]	; (122f8 <ioport_set_pin_level+0x24>)
   122ee:	4798      	blx	r3
}
   122f0:	46c0      	nop			; (mov r8, r8)
   122f2:	46bd      	mov	sp, r7
   122f4:	b002      	add	sp, #8
   122f6:	bd80      	pop	{r7, pc}
   122f8:	00012259 	.word	0x00012259

000122fc <spi_is_write_complete>:
{
   122fc:	b580      	push	{r7, lr}
   122fe:	b084      	sub	sp, #16
   12300:	af00      	add	r7, sp, #0
   12302:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   12304:	687b      	ldr	r3, [r7, #4]
   12306:	681b      	ldr	r3, [r3, #0]
   12308:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   1230a:	68fb      	ldr	r3, [r7, #12]
   1230c:	7e1b      	ldrb	r3, [r3, #24]
   1230e:	b2db      	uxtb	r3, r3
   12310:	001a      	movs	r2, r3
   12312:	2302      	movs	r3, #2
   12314:	4013      	ands	r3, r2
   12316:	1e5a      	subs	r2, r3, #1
   12318:	4193      	sbcs	r3, r2
   1231a:	b2db      	uxtb	r3, r3
}
   1231c:	0018      	movs	r0, r3
   1231e:	46bd      	mov	sp, r7
   12320:	b004      	add	sp, #16
   12322:	bd80      	pop	{r7, pc}

00012324 <spi_is_ready_to_write>:
{
   12324:	b580      	push	{r7, lr}
   12326:	b084      	sub	sp, #16
   12328:	af00      	add	r7, sp, #0
   1232a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1232c:	687b      	ldr	r3, [r7, #4]
   1232e:	681b      	ldr	r3, [r3, #0]
   12330:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   12332:	68fb      	ldr	r3, [r7, #12]
   12334:	7e1b      	ldrb	r3, [r3, #24]
   12336:	b2db      	uxtb	r3, r3
   12338:	001a      	movs	r2, r3
   1233a:	2301      	movs	r3, #1
   1233c:	4013      	ands	r3, r2
   1233e:	1e5a      	subs	r2, r3, #1
   12340:	4193      	sbcs	r3, r2
   12342:	b2db      	uxtb	r3, r3
}
   12344:	0018      	movs	r0, r3
   12346:	46bd      	mov	sp, r7
   12348:	b004      	add	sp, #16
   1234a:	bd80      	pop	{r7, pc}

0001234c <spi_write>:
{
   1234c:	b580      	push	{r7, lr}
   1234e:	b084      	sub	sp, #16
   12350:	af00      	add	r7, sp, #0
   12352:	6078      	str	r0, [r7, #4]
   12354:	000a      	movs	r2, r1
   12356:	1cbb      	adds	r3, r7, #2
   12358:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1235a:	687b      	ldr	r3, [r7, #4]
   1235c:	681b      	ldr	r3, [r3, #0]
   1235e:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
   12360:	687b      	ldr	r3, [r7, #4]
   12362:	0018      	movs	r0, r3
   12364:	4b0a      	ldr	r3, [pc, #40]	; (12390 <spi_write+0x44>)
   12366:	4798      	blx	r3
   12368:	0003      	movs	r3, r0
   1236a:	001a      	movs	r2, r3
   1236c:	2301      	movs	r3, #1
   1236e:	4053      	eors	r3, r2
   12370:	b2db      	uxtb	r3, r3
   12372:	2b00      	cmp	r3, #0
   12374:	d001      	beq.n	1237a <spi_write+0x2e>
		return STATUS_BUSY;
   12376:	2305      	movs	r3, #5
   12378:	e006      	b.n	12388 <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   1237a:	1cbb      	adds	r3, r7, #2
   1237c:	881b      	ldrh	r3, [r3, #0]
   1237e:	05db      	lsls	r3, r3, #23
   12380:	0dda      	lsrs	r2, r3, #23
   12382:	68fb      	ldr	r3, [r7, #12]
   12384:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
   12386:	2300      	movs	r3, #0
}
   12388:	0018      	movs	r0, r3
   1238a:	46bd      	mov	sp, r7
   1238c:	b004      	add	sp, #16
   1238e:	bd80      	pop	{r7, pc}
   12390:	00012325 	.word	0x00012325

00012394 <glcd_init>:
//void delay_ms(uint32_t ms);

//#define BACKLIGHT_INVERT	// Uncomment if LED backlight turn on with low value

void glcd_init(void)
{
   12394:	b580      	push	{r7, lr}
   12396:	af00      	add	r7, sp, #0


	ioport_set_pin_dir(CONTROLLER_SPI_SS_PIN, IOPORT_DIR_OUTPUT);
   12398:	2101      	movs	r1, #1
   1239a:	2017      	movs	r0, #23
   1239c:	4b0e      	ldr	r3, [pc, #56]	; (123d8 <glcd_init+0x44>)
   1239e:	4798      	blx	r3
	ioport_set_pin_dir(CONTROLLER_SPI_DC_PIN, IOPORT_DIR_OUTPUT);
   123a0:	2101      	movs	r1, #1
   123a2:	201b      	movs	r0, #27
   123a4:	4b0c      	ldr	r3, [pc, #48]	; (123d8 <glcd_init+0x44>)
   123a6:	4798      	blx	r3
	ioport_set_pin_dir(CONTROLLER_SPI_RST_PIN, IOPORT_DIR_OUTPUT);
   123a8:	2101      	movs	r1, #1
   123aa:	2037      	movs	r0, #55	; 0x37
   123ac:	4b0a      	ldr	r3, [pc, #40]	; (123d8 <glcd_init+0x44>)
   123ae:	4798      	blx	r3

	
	GLCD_DESELECT();
   123b0:	2101      	movs	r1, #1
   123b2:	2017      	movs	r0, #23
   123b4:	4b09      	ldr	r3, [pc, #36]	; (123dc <glcd_init+0x48>)
   123b6:	4798      	blx	r3
	

	glcd_select_screen((uint8_t *)&glcd_buffer,&glcd_bbox);
   123b8:	4a09      	ldr	r2, [pc, #36]	; (123e0 <glcd_init+0x4c>)
   123ba:	4b0a      	ldr	r3, [pc, #40]	; (123e4 <glcd_init+0x50>)
   123bc:	0011      	movs	r1, r2
   123be:	0018      	movs	r0, r3
   123c0:	4b09      	ldr	r3, [pc, #36]	; (123e8 <glcd_init+0x54>)
   123c2:	4798      	blx	r3

	glcd_reset();
   123c4:	4b09      	ldr	r3, [pc, #36]	; (123ec <glcd_init+0x58>)
   123c6:	4798      	blx	r3
	glcd_reset();
   123c8:	4b08      	ldr	r3, [pc, #32]	; (123ec <glcd_init+0x58>)
   123ca:	4798      	blx	r3
	glcd_ST7565R_init();
   123cc:	4b08      	ldr	r3, [pc, #32]	; (123f0 <glcd_init+0x5c>)
   123ce:	4798      	blx	r3


}
   123d0:	46c0      	nop			; (mov r8, r8)
   123d2:	46bd      	mov	sp, r7
   123d4:	bd80      	pop	{r7, pc}
   123d6:	46c0      	nop			; (mov r8, r8)
   123d8:	000122ad 	.word	0x000122ad
   123dc:	000122d5 	.word	0x000122d5
   123e0:	2000124c 	.word	0x2000124c
   123e4:	20001250 	.word	0x20001250
   123e8:	000125d9 	.word	0x000125d9
   123ec:	0001246d 	.word	0x0001246d
   123f0:	00012eb1 	.word	0x00012eb1

000123f4 <glcd_spi_write>:



void glcd_spi_write(uint8_t c)
{
   123f4:	b580      	push	{r7, lr}
   123f6:	b082      	sub	sp, #8
   123f8:	af00      	add	r7, sp, #0
   123fa:	0002      	movs	r2, r0
   123fc:	1dfb      	adds	r3, r7, #7
   123fe:	701a      	strb	r2, [r3, #0]
	//uint8_t temp;

	GLCD_SELECT();
   12400:	2100      	movs	r1, #0
   12402:	2017      	movs	r0, #23
   12404:	4b14      	ldr	r3, [pc, #80]	; (12458 <glcd_spi_write+0x64>)
   12406:	4798      	blx	r3
	/*!< Loop while DR register in not empty */
	//while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_TXE) == RESET);
	while(spi_is_ready_to_write(&spi_main)==false);
   12408:	46c0      	nop			; (mov r8, r8)
   1240a:	4b14      	ldr	r3, [pc, #80]	; (1245c <glcd_spi_write+0x68>)
   1240c:	0018      	movs	r0, r3
   1240e:	4b14      	ldr	r3, [pc, #80]	; (12460 <glcd_spi_write+0x6c>)
   12410:	4798      	blx	r3
   12412:	0003      	movs	r3, r0
   12414:	001a      	movs	r2, r3
   12416:	2301      	movs	r3, #1
   12418:	4053      	eors	r3, r2
   1241a:	b2db      	uxtb	r3, r3
   1241c:	2b00      	cmp	r3, #0
   1241e:	d1f4      	bne.n	1240a <glcd_spi_write+0x16>
	
	
	//SPI_I2S_SendData(SPIx, (uint16_t) c);
	spi_write(&spi_main, c);
   12420:	1dfb      	adds	r3, r7, #7
   12422:	781b      	ldrb	r3, [r3, #0]
   12424:	b29a      	uxth	r2, r3
   12426:	4b0d      	ldr	r3, [pc, #52]	; (1245c <glcd_spi_write+0x68>)
   12428:	0011      	movs	r1, r2
   1242a:	0018      	movs	r0, r3
   1242c:	4b0d      	ldr	r3, [pc, #52]	; (12464 <glcd_spi_write+0x70>)
   1242e:	4798      	blx	r3
	
	/* Wait until entire byte has been read (which we discard anyway) */
	//while(SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_BSY) != RESET);
	while(spi_is_write_complete(&spi_main)==false);
   12430:	46c0      	nop			; (mov r8, r8)
   12432:	4b0a      	ldr	r3, [pc, #40]	; (1245c <glcd_spi_write+0x68>)
   12434:	0018      	movs	r0, r3
   12436:	4b0c      	ldr	r3, [pc, #48]	; (12468 <glcd_spi_write+0x74>)
   12438:	4798      	blx	r3
   1243a:	0003      	movs	r3, r0
   1243c:	001a      	movs	r2, r3
   1243e:	2301      	movs	r3, #1
   12440:	4053      	eors	r3, r2
   12442:	b2db      	uxtb	r3, r3
   12444:	2b00      	cmp	r3, #0
   12446:	d1f4      	bne.n	12432 <glcd_spi_write+0x3e>

	//temp = SPI_I2S_ReceiveData(SPIx);

	GLCD_DESELECT();
   12448:	2101      	movs	r1, #1
   1244a:	2017      	movs	r0, #23
   1244c:	4b02      	ldr	r3, [pc, #8]	; (12458 <glcd_spi_write+0x64>)
   1244e:	4798      	blx	r3
}
   12450:	46c0      	nop			; (mov r8, r8)
   12452:	46bd      	mov	sp, r7
   12454:	b002      	add	sp, #8
   12456:	bd80      	pop	{r7, pc}
   12458:	000122d5 	.word	0x000122d5
   1245c:	200010a4 	.word	0x200010a4
   12460:	00012325 	.word	0x00012325
   12464:	0001234d 	.word	0x0001234d
   12468:	000122fd 	.word	0x000122fd

0001246c <glcd_reset>:

void glcd_reset(void)
{
   1246c:	b580      	push	{r7, lr}
   1246e:	af00      	add	r7, sp, #0
	/* Toggle RST low to reset. Minimum pulse 100ns on data sheet. */
	GLCD_SELECT();
   12470:	2100      	movs	r1, #0
   12472:	2017      	movs	r0, #23
   12474:	4b09      	ldr	r3, [pc, #36]	; (1249c <glcd_reset+0x30>)
   12476:	4798      	blx	r3
	GLCD_RESET_LOW();
   12478:	2100      	movs	r1, #0
   1247a:	2037      	movs	r0, #55	; 0x37
   1247c:	4b07      	ldr	r3, [pc, #28]	; (1249c <glcd_reset+0x30>)
   1247e:	4798      	blx	r3


	delay_ms(GLCD_RESET_TIME);
   12480:	2001      	movs	r0, #1
   12482:	4b07      	ldr	r3, [pc, #28]	; (124a0 <glcd_reset+0x34>)
   12484:	4798      	blx	r3
	//DelayTask(GLCD_RESET_TIME);
	GLCD_RESET_HIGH();
   12486:	2101      	movs	r1, #1
   12488:	2037      	movs	r0, #55	; 0x37
   1248a:	4b04      	ldr	r3, [pc, #16]	; (1249c <glcd_reset+0x30>)
   1248c:	4798      	blx	r3
	GLCD_DESELECT();
   1248e:	2101      	movs	r1, #1
   12490:	2017      	movs	r0, #23
   12492:	4b02      	ldr	r3, [pc, #8]	; (1249c <glcd_reset+0x30>)
   12494:	4798      	blx	r3
}
   12496:	46c0      	nop			; (mov r8, r8)
   12498:	46bd      	mov	sp, r7
   1249a:	bd80      	pop	{r7, pc}
   1249c:	000122d5 	.word	0x000122d5
   124a0:	00015545 	.word	0x00015545

000124a4 <glcd_update_bbox>:
glcd_BoundingBox_t *glcd_bbox_selected;

/** @} */

void glcd_update_bbox(uint8_t xmin, uint8_t ymin, uint8_t xmax, uint8_t ymax)
{
   124a4:	b5b0      	push	{r4, r5, r7, lr}
   124a6:	b082      	sub	sp, #8
   124a8:	af00      	add	r7, sp, #0
   124aa:	0005      	movs	r5, r0
   124ac:	000c      	movs	r4, r1
   124ae:	0010      	movs	r0, r2
   124b0:	0019      	movs	r1, r3
   124b2:	1dfb      	adds	r3, r7, #7
   124b4:	1c2a      	adds	r2, r5, #0
   124b6:	701a      	strb	r2, [r3, #0]
   124b8:	1dbb      	adds	r3, r7, #6
   124ba:	1c22      	adds	r2, r4, #0
   124bc:	701a      	strb	r2, [r3, #0]
   124be:	1d7b      	adds	r3, r7, #5
   124c0:	1c02      	adds	r2, r0, #0
   124c2:	701a      	strb	r2, [r3, #0]
   124c4:	1d3b      	adds	r3, r7, #4
   124c6:	1c0a      	adds	r2, r1, #0
   124c8:	701a      	strb	r2, [r3, #0]
	/* Keep and check bounding box within limits of LCD screen dimensions */
	if (xmin > (GLCD_LCD_WIDTH-1)) {
   124ca:	1dfb      	adds	r3, r7, #7
   124cc:	781b      	ldrb	r3, [r3, #0]
   124ce:	b25b      	sxtb	r3, r3
   124d0:	2b00      	cmp	r3, #0
   124d2:	da02      	bge.n	124da <glcd_update_bbox+0x36>
		xmin = GLCD_LCD_WIDTH-1;
   124d4:	1dfb      	adds	r3, r7, #7
   124d6:	227f      	movs	r2, #127	; 0x7f
   124d8:	701a      	strb	r2, [r3, #0]
	}
	if (xmax > (GLCD_LCD_WIDTH-1)) {
   124da:	1d7b      	adds	r3, r7, #5
   124dc:	781b      	ldrb	r3, [r3, #0]
   124de:	b25b      	sxtb	r3, r3
   124e0:	2b00      	cmp	r3, #0
   124e2:	da02      	bge.n	124ea <glcd_update_bbox+0x46>
		xmax = GLCD_LCD_WIDTH-1;
   124e4:	1d7b      	adds	r3, r7, #5
   124e6:	227f      	movs	r2, #127	; 0x7f
   124e8:	701a      	strb	r2, [r3, #0]
	}

	if (ymin > (GLCD_LCD_HEIGHT-1)) {
   124ea:	1dbb      	adds	r3, r7, #6
   124ec:	781b      	ldrb	r3, [r3, #0]
   124ee:	2b3f      	cmp	r3, #63	; 0x3f
   124f0:	d902      	bls.n	124f8 <glcd_update_bbox+0x54>
		ymin = GLCD_LCD_HEIGHT-1;
   124f2:	1dbb      	adds	r3, r7, #6
   124f4:	223f      	movs	r2, #63	; 0x3f
   124f6:	701a      	strb	r2, [r3, #0]
	}
	if (ymax > (GLCD_LCD_HEIGHT-1)) {
   124f8:	1d3b      	adds	r3, r7, #4
   124fa:	781b      	ldrb	r3, [r3, #0]
   124fc:	2b3f      	cmp	r3, #63	; 0x3f
   124fe:	d902      	bls.n	12506 <glcd_update_bbox+0x62>
		ymax = GLCD_LCD_HEIGHT-1;
   12500:	1d3b      	adds	r3, r7, #4
   12502:	223f      	movs	r2, #63	; 0x3f
   12504:	701a      	strb	r2, [r3, #0]
	}

	/* Update the bounding box size */
	if (xmin < glcd_bbox_selected->x_min) {
   12506:	4b1a      	ldr	r3, [pc, #104]	; (12570 <glcd_update_bbox+0xcc>)
   12508:	681b      	ldr	r3, [r3, #0]
   1250a:	781b      	ldrb	r3, [r3, #0]
   1250c:	1dfa      	adds	r2, r7, #7
   1250e:	7812      	ldrb	r2, [r2, #0]
   12510:	429a      	cmp	r2, r3
   12512:	d204      	bcs.n	1251e <glcd_update_bbox+0x7a>
		glcd_bbox_selected->x_min = xmin;
   12514:	4b16      	ldr	r3, [pc, #88]	; (12570 <glcd_update_bbox+0xcc>)
   12516:	681b      	ldr	r3, [r3, #0]
   12518:	1dfa      	adds	r2, r7, #7
   1251a:	7812      	ldrb	r2, [r2, #0]
   1251c:	701a      	strb	r2, [r3, #0]
	}		
	if (xmax > glcd_bbox_selected->x_max) {
   1251e:	4b14      	ldr	r3, [pc, #80]	; (12570 <glcd_update_bbox+0xcc>)
   12520:	681b      	ldr	r3, [r3, #0]
   12522:	789b      	ldrb	r3, [r3, #2]
   12524:	1d7a      	adds	r2, r7, #5
   12526:	7812      	ldrb	r2, [r2, #0]
   12528:	429a      	cmp	r2, r3
   1252a:	d904      	bls.n	12536 <glcd_update_bbox+0x92>
		glcd_bbox_selected->x_max = xmax;
   1252c:	4b10      	ldr	r3, [pc, #64]	; (12570 <glcd_update_bbox+0xcc>)
   1252e:	681b      	ldr	r3, [r3, #0]
   12530:	1d7a      	adds	r2, r7, #5
   12532:	7812      	ldrb	r2, [r2, #0]
   12534:	709a      	strb	r2, [r3, #2]
	}
	if (ymin < glcd_bbox_selected->y_min) {
   12536:	4b0e      	ldr	r3, [pc, #56]	; (12570 <glcd_update_bbox+0xcc>)
   12538:	681b      	ldr	r3, [r3, #0]
   1253a:	785b      	ldrb	r3, [r3, #1]
   1253c:	1dba      	adds	r2, r7, #6
   1253e:	7812      	ldrb	r2, [r2, #0]
   12540:	429a      	cmp	r2, r3
   12542:	d204      	bcs.n	1254e <glcd_update_bbox+0xaa>
		glcd_bbox_selected->y_min = ymin;
   12544:	4b0a      	ldr	r3, [pc, #40]	; (12570 <glcd_update_bbox+0xcc>)
   12546:	681b      	ldr	r3, [r3, #0]
   12548:	1dba      	adds	r2, r7, #6
   1254a:	7812      	ldrb	r2, [r2, #0]
   1254c:	705a      	strb	r2, [r3, #1]
	}		
	if (ymax > glcd_bbox_selected->y_max) {
   1254e:	4b08      	ldr	r3, [pc, #32]	; (12570 <glcd_update_bbox+0xcc>)
   12550:	681b      	ldr	r3, [r3, #0]
   12552:	78db      	ldrb	r3, [r3, #3]
   12554:	1d3a      	adds	r2, r7, #4
   12556:	7812      	ldrb	r2, [r2, #0]
   12558:	429a      	cmp	r2, r3
   1255a:	d904      	bls.n	12566 <glcd_update_bbox+0xc2>
		glcd_bbox_selected->y_max = ymax;
   1255c:	4b04      	ldr	r3, [pc, #16]	; (12570 <glcd_update_bbox+0xcc>)
   1255e:	681b      	ldr	r3, [r3, #0]
   12560:	1d3a      	adds	r2, r7, #4
   12562:	7812      	ldrb	r2, [r2, #0]
   12564:	70da      	strb	r2, [r3, #3]
	}			
}
   12566:	46c0      	nop			; (mov r8, r8)
   12568:	46bd      	mov	sp, r7
   1256a:	b002      	add	sp, #8
   1256c:	bdb0      	pop	{r4, r5, r7, pc}
   1256e:	46c0      	nop			; (mov r8, r8)
   12570:	20001654 	.word	0x20001654

00012574 <glcd_reset_bbox>:

void glcd_reset_bbox()
{
   12574:	b580      	push	{r7, lr}
   12576:	af00      	add	r7, sp, #0
	/* Used after physically writing to the LCD */
	glcd_bbox_selected->x_min = GLCD_LCD_WIDTH - 1;
   12578:	4b09      	ldr	r3, [pc, #36]	; (125a0 <glcd_reset_bbox+0x2c>)
   1257a:	681b      	ldr	r3, [r3, #0]
   1257c:	227f      	movs	r2, #127	; 0x7f
   1257e:	701a      	strb	r2, [r3, #0]
	glcd_bbox_selected->x_max = 0;
   12580:	4b07      	ldr	r3, [pc, #28]	; (125a0 <glcd_reset_bbox+0x2c>)
   12582:	681b      	ldr	r3, [r3, #0]
   12584:	2200      	movs	r2, #0
   12586:	709a      	strb	r2, [r3, #2]
	glcd_bbox_selected->y_min = GLCD_LCD_HEIGHT -1;
   12588:	4b05      	ldr	r3, [pc, #20]	; (125a0 <glcd_reset_bbox+0x2c>)
   1258a:	681b      	ldr	r3, [r3, #0]
   1258c:	223f      	movs	r2, #63	; 0x3f
   1258e:	705a      	strb	r2, [r3, #1]
	glcd_bbox_selected->y_max = 0;	
   12590:	4b03      	ldr	r3, [pc, #12]	; (125a0 <glcd_reset_bbox+0x2c>)
   12592:	681b      	ldr	r3, [r3, #0]
   12594:	2200      	movs	r2, #0
   12596:	70da      	strb	r2, [r3, #3]
}
   12598:	46c0      	nop			; (mov r8, r8)
   1259a:	46bd      	mov	sp, r7
   1259c:	bd80      	pop	{r7, pc}
   1259e:	46c0      	nop			; (mov r8, r8)
   125a0:	20001654 	.word	0x20001654

000125a4 <glcd_clear_buffer>:
	memset(glcd_buffer_selected, 0x00, GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8);
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
	glcd_write();
}

void glcd_clear_buffer(void) {
   125a4:	b5b0      	push	{r4, r5, r7, lr}
   125a6:	af00      	add	r7, sp, #0
	memset(glcd_buffer_selected, 0x00, GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8);
   125a8:	4b08      	ldr	r3, [pc, #32]	; (125cc <glcd_clear_buffer+0x28>)
   125aa:	6818      	ldr	r0, [r3, #0]
   125ac:	2380      	movs	r3, #128	; 0x80
   125ae:	00db      	lsls	r3, r3, #3
   125b0:	001a      	movs	r2, r3
   125b2:	2100      	movs	r1, #0
   125b4:	4b06      	ldr	r3, [pc, #24]	; (125d0 <glcd_clear_buffer+0x2c>)
   125b6:	4798      	blx	r3
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
   125b8:	233f      	movs	r3, #63	; 0x3f
   125ba:	227f      	movs	r2, #127	; 0x7f
   125bc:	2100      	movs	r1, #0
   125be:	2000      	movs	r0, #0
   125c0:	4c04      	ldr	r4, [pc, #16]	; (125d4 <glcd_clear_buffer+0x30>)
   125c2:	47a0      	blx	r4
}
   125c4:	46c0      	nop			; (mov r8, r8)
   125c6:	46bd      	mov	sp, r7
   125c8:	bdb0      	pop	{r4, r5, r7, pc}
   125ca:	46c0      	nop			; (mov r8, r8)
   125cc:	20001650 	.word	0x20001650
   125d0:	00021029 	.word	0x00021029
   125d4:	000124a5 	.word	0x000124a5

000125d8 <glcd_select_screen>:

void glcd_select_screen(uint8_t *buffer, glcd_BoundingBox_t *bbox)
{
   125d8:	b580      	push	{r7, lr}
   125da:	b082      	sub	sp, #8
   125dc:	af00      	add	r7, sp, #0
   125de:	6078      	str	r0, [r7, #4]
   125e0:	6039      	str	r1, [r7, #0]
	glcd_buffer_selected = buffer;
   125e2:	4b05      	ldr	r3, [pc, #20]	; (125f8 <glcd_select_screen+0x20>)
   125e4:	687a      	ldr	r2, [r7, #4]
   125e6:	601a      	str	r2, [r3, #0]
	glcd_bbox_selected = bbox;
   125e8:	4b04      	ldr	r3, [pc, #16]	; (125fc <glcd_select_screen+0x24>)
   125ea:	683a      	ldr	r2, [r7, #0]
   125ec:	601a      	str	r2, [r3, #0]
}
   125ee:	46c0      	nop			; (mov r8, r8)
   125f0:	46bd      	mov	sp, r7
   125f2:	b002      	add	sp, #8
   125f4:	bd80      	pop	{r7, pc}
   125f6:	46c0      	nop			; (mov r8, r8)
   125f8:	20001650 	.word	0x20001650
   125fc:	20001654 	.word	0x20001654

00012600 <glcd_set_pixel>:
#include <stdlib.h>
#include <string.h>
#include "glcd.h"

/* Based on PCD8544 library by Limor Fried */
void glcd_set_pixel(uint8_t x, uint8_t y, uint8_t color) {
   12600:	b590      	push	{r4, r7, lr}
   12602:	b083      	sub	sp, #12
   12604:	af00      	add	r7, sp, #0
   12606:	0004      	movs	r4, r0
   12608:	0008      	movs	r0, r1
   1260a:	0011      	movs	r1, r2
   1260c:	1dfb      	adds	r3, r7, #7
   1260e:	1c22      	adds	r2, r4, #0
   12610:	701a      	strb	r2, [r3, #0]
   12612:	1dbb      	adds	r3, r7, #6
   12614:	1c02      	adds	r2, r0, #0
   12616:	701a      	strb	r2, [r3, #0]
   12618:	1d7b      	adds	r3, r7, #5
   1261a:	1c0a      	adds	r2, r1, #0
   1261c:	701a      	strb	r2, [r3, #0]
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1261e:	1dfb      	adds	r3, r7, #7
   12620:	781b      	ldrb	r3, [r3, #0]
   12622:	b25b      	sxtb	r3, r3
   12624:	2b00      	cmp	r3, #0
   12626:	db52      	blt.n	126ce <glcd_set_pixel+0xce>
   12628:	1dbb      	adds	r3, r7, #6
   1262a:	781b      	ldrb	r3, [r3, #0]
   1262c:	2b3f      	cmp	r3, #63	; 0x3f
   1262e:	d84e      	bhi.n	126ce <glcd_set_pixel+0xce>
		/* don't do anything if x/y is outside bounds of display size */
		return;
	}

	if (color) {
   12630:	1d7b      	adds	r3, r7, #5
   12632:	781b      	ldrb	r3, [r3, #0]
   12634:	2b00      	cmp	r3, #0
   12636:	d01e      	beq.n	12676 <glcd_set_pixel+0x76>
		/* Set black */
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   12638:	1dfb      	adds	r3, r7, #7
   1263a:	781a      	ldrb	r2, [r3, #0]
   1263c:	1dbb      	adds	r3, r7, #6
   1263e:	781b      	ldrb	r3, [r3, #0]
   12640:	08db      	lsrs	r3, r3, #3
   12642:	b2d8      	uxtb	r0, r3
   12644:	0003      	movs	r3, r0
   12646:	01db      	lsls	r3, r3, #7
   12648:	18d3      	adds	r3, r2, r3
   1264a:	1dfa      	adds	r2, r7, #7
   1264c:	7811      	ldrb	r1, [r2, #0]
   1264e:	0002      	movs	r2, r0
   12650:	01d2      	lsls	r2, r2, #7
   12652:	188a      	adds	r2, r1, r2
   12654:	4920      	ldr	r1, [pc, #128]	; (126d8 <glcd_set_pixel+0xd8>)
   12656:	5c8a      	ldrb	r2, [r1, r2]
   12658:	b251      	sxtb	r1, r2
   1265a:	1dba      	adds	r2, r7, #6
   1265c:	7812      	ldrb	r2, [r2, #0]
   1265e:	2007      	movs	r0, #7
   12660:	4002      	ands	r2, r0
   12662:	2001      	movs	r0, #1
   12664:	4090      	lsls	r0, r2
   12666:	0002      	movs	r2, r0
   12668:	b252      	sxtb	r2, r2
   1266a:	430a      	orrs	r2, r1
   1266c:	b252      	sxtb	r2, r2
   1266e:	b2d1      	uxtb	r1, r2
   12670:	4a19      	ldr	r2, [pc, #100]	; (126d8 <glcd_set_pixel+0xd8>)
   12672:	54d1      	strb	r1, [r2, r3]
   12674:	e01f      	b.n	126b6 <glcd_set_pixel+0xb6>
	} else {
		/* Set white */
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   12676:	1dfb      	adds	r3, r7, #7
   12678:	781a      	ldrb	r2, [r3, #0]
   1267a:	1dbb      	adds	r3, r7, #6
   1267c:	781b      	ldrb	r3, [r3, #0]
   1267e:	08db      	lsrs	r3, r3, #3
   12680:	b2d8      	uxtb	r0, r3
   12682:	0003      	movs	r3, r0
   12684:	01db      	lsls	r3, r3, #7
   12686:	18d3      	adds	r3, r2, r3
   12688:	1dfa      	adds	r2, r7, #7
   1268a:	7811      	ldrb	r1, [r2, #0]
   1268c:	0002      	movs	r2, r0
   1268e:	01d2      	lsls	r2, r2, #7
   12690:	188a      	adds	r2, r1, r2
   12692:	4911      	ldr	r1, [pc, #68]	; (126d8 <glcd_set_pixel+0xd8>)
   12694:	5c8a      	ldrb	r2, [r1, r2]
   12696:	b252      	sxtb	r2, r2
   12698:	1db9      	adds	r1, r7, #6
   1269a:	7809      	ldrb	r1, [r1, #0]
   1269c:	2007      	movs	r0, #7
   1269e:	4001      	ands	r1, r0
   126a0:	2001      	movs	r0, #1
   126a2:	4088      	lsls	r0, r1
   126a4:	0001      	movs	r1, r0
   126a6:	b249      	sxtb	r1, r1
   126a8:	43c9      	mvns	r1, r1
   126aa:	b249      	sxtb	r1, r1
   126ac:	400a      	ands	r2, r1
   126ae:	b252      	sxtb	r2, r2
   126b0:	b2d1      	uxtb	r1, r2
   126b2:	4a09      	ldr	r2, [pc, #36]	; (126d8 <glcd_set_pixel+0xd8>)
   126b4:	54d1      	strb	r1, [r2, r3]
	}

	glcd_update_bbox(x,y,x,y);
   126b6:	1dbb      	adds	r3, r7, #6
   126b8:	781c      	ldrb	r4, [r3, #0]
   126ba:	1dfb      	adds	r3, r7, #7
   126bc:	781a      	ldrb	r2, [r3, #0]
   126be:	1dbb      	adds	r3, r7, #6
   126c0:	7819      	ldrb	r1, [r3, #0]
   126c2:	1dfb      	adds	r3, r7, #7
   126c4:	7818      	ldrb	r0, [r3, #0]
   126c6:	0023      	movs	r3, r4
   126c8:	4c04      	ldr	r4, [pc, #16]	; (126dc <glcd_set_pixel+0xdc>)
   126ca:	47a0      	blx	r4
   126cc:	e000      	b.n	126d0 <glcd_set_pixel+0xd0>
		return;
   126ce:	46c0      	nop			; (mov r8, r8)
}
   126d0:	46bd      	mov	sp, r7
   126d2:	b003      	add	sp, #12
   126d4:	bd90      	pop	{r4, r7, pc}
   126d6:	46c0      	nop			; (mov r8, r8)
   126d8:	20001250 	.word	0x20001250
   126dc:	000124a5 	.word	0x000124a5

000126e0 <glcd_draw_line>:
	glcd_update_bbox(x,y,x,y);
	glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] ^= ( 1 << (y%8));
}

/* Bresenham's algorithm - based on PCD8544 library Limor Fried */
void glcd_draw_line(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) {
   126e0:	b5b0      	push	{r4, r5, r7, lr}
   126e2:	b086      	sub	sp, #24
   126e4:	af00      	add	r7, sp, #0
   126e6:	0005      	movs	r5, r0
   126e8:	000c      	movs	r4, r1
   126ea:	0010      	movs	r0, r2
   126ec:	0019      	movs	r1, r3
   126ee:	1dfb      	adds	r3, r7, #7
   126f0:	1c2a      	adds	r2, r5, #0
   126f2:	701a      	strb	r2, [r3, #0]
   126f4:	1dbb      	adds	r3, r7, #6
   126f6:	1c22      	adds	r2, r4, #0
   126f8:	701a      	strb	r2, [r3, #0]
   126fa:	1d7b      	adds	r3, r7, #5
   126fc:	1c02      	adds	r2, r0, #0
   126fe:	701a      	strb	r2, [r3, #0]
   12700:	1d3b      	adds	r3, r7, #4
   12702:	1c0a      	adds	r2, r1, #0
   12704:	701a      	strb	r2, [r3, #0]
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
   12706:	1d3b      	adds	r3, r7, #4
   12708:	781a      	ldrb	r2, [r3, #0]
   1270a:	1dbb      	adds	r3, r7, #6
   1270c:	781b      	ldrb	r3, [r3, #0]
   1270e:	1ad3      	subs	r3, r2, r3
   12710:	17d9      	asrs	r1, r3, #31
   12712:	185a      	adds	r2, r3, r1
   12714:	404a      	eors	r2, r1
   12716:	1d7b      	adds	r3, r7, #5
   12718:	7819      	ldrb	r1, [r3, #0]
   1271a:	1dfb      	adds	r3, r7, #7
   1271c:	781b      	ldrb	r3, [r3, #0]
   1271e:	1acb      	subs	r3, r1, r3
   12720:	17d9      	asrs	r1, r3, #31
   12722:	185b      	adds	r3, r3, r1
   12724:	404b      	eors	r3, r1
   12726:	2101      	movs	r1, #1
   12728:	429a      	cmp	r2, r3
   1272a:	dc01      	bgt.n	12730 <glcd_draw_line+0x50>
   1272c:	2300      	movs	r3, #0
   1272e:	1c19      	adds	r1, r3, #0
   12730:	b2ca      	uxtb	r2, r1
   12732:	2315      	movs	r3, #21
   12734:	18fb      	adds	r3, r7, r3
   12736:	701a      	strb	r2, [r3, #0]
	uint8_t dx, dy;
	int8_t err;
	int8_t ystep;
	
	if (steep) {
   12738:	2315      	movs	r3, #21
   1273a:	18fb      	adds	r3, r7, r3
   1273c:	781b      	ldrb	r3, [r3, #0]
   1273e:	2b00      	cmp	r3, #0
   12740:	d01b      	beq.n	1277a <glcd_draw_line+0x9a>
		swap(x0, y0);
   12742:	2314      	movs	r3, #20
   12744:	18fb      	adds	r3, r7, r3
   12746:	1dfa      	adds	r2, r7, #7
   12748:	7812      	ldrb	r2, [r2, #0]
   1274a:	701a      	strb	r2, [r3, #0]
   1274c:	1dfb      	adds	r3, r7, #7
   1274e:	1dba      	adds	r2, r7, #6
   12750:	7812      	ldrb	r2, [r2, #0]
   12752:	701a      	strb	r2, [r3, #0]
   12754:	1dbb      	adds	r3, r7, #6
   12756:	2214      	movs	r2, #20
   12758:	18ba      	adds	r2, r7, r2
   1275a:	7812      	ldrb	r2, [r2, #0]
   1275c:	701a      	strb	r2, [r3, #0]
		swap(x1, y1);
   1275e:	2313      	movs	r3, #19
   12760:	18fb      	adds	r3, r7, r3
   12762:	1d7a      	adds	r2, r7, #5
   12764:	7812      	ldrb	r2, [r2, #0]
   12766:	701a      	strb	r2, [r3, #0]
   12768:	1d7b      	adds	r3, r7, #5
   1276a:	1d3a      	adds	r2, r7, #4
   1276c:	7812      	ldrb	r2, [r2, #0]
   1276e:	701a      	strb	r2, [r3, #0]
   12770:	1d3b      	adds	r3, r7, #4
   12772:	2213      	movs	r2, #19
   12774:	18ba      	adds	r2, r7, r2
   12776:	7812      	ldrb	r2, [r2, #0]
   12778:	701a      	strb	r2, [r3, #0]
	}
	
	if (x0 > x1) {
   1277a:	1dfa      	adds	r2, r7, #7
   1277c:	1d7b      	adds	r3, r7, #5
   1277e:	7812      	ldrb	r2, [r2, #0]
   12780:	781b      	ldrb	r3, [r3, #0]
   12782:	429a      	cmp	r2, r3
   12784:	d91b      	bls.n	127be <glcd_draw_line+0xde>
		swap(x0, x1);
   12786:	2312      	movs	r3, #18
   12788:	18fb      	adds	r3, r7, r3
   1278a:	1dfa      	adds	r2, r7, #7
   1278c:	7812      	ldrb	r2, [r2, #0]
   1278e:	701a      	strb	r2, [r3, #0]
   12790:	1dfb      	adds	r3, r7, #7
   12792:	1d7a      	adds	r2, r7, #5
   12794:	7812      	ldrb	r2, [r2, #0]
   12796:	701a      	strb	r2, [r3, #0]
   12798:	1d7b      	adds	r3, r7, #5
   1279a:	2212      	movs	r2, #18
   1279c:	18ba      	adds	r2, r7, r2
   1279e:	7812      	ldrb	r2, [r2, #0]
   127a0:	701a      	strb	r2, [r3, #0]
		swap(y0, y1);
   127a2:	2311      	movs	r3, #17
   127a4:	18fb      	adds	r3, r7, r3
   127a6:	1dba      	adds	r2, r7, #6
   127a8:	7812      	ldrb	r2, [r2, #0]
   127aa:	701a      	strb	r2, [r3, #0]
   127ac:	1dbb      	adds	r3, r7, #6
   127ae:	1d3a      	adds	r2, r7, #4
   127b0:	7812      	ldrb	r2, [r2, #0]
   127b2:	701a      	strb	r2, [r3, #0]
   127b4:	1d3b      	adds	r3, r7, #4
   127b6:	2211      	movs	r2, #17
   127b8:	18ba      	adds	r2, r7, r2
   127ba:	7812      	ldrb	r2, [r2, #0]
   127bc:	701a      	strb	r2, [r3, #0]
	}
	
	glcd_update_bbox( x0, y0, x1, y1 );
   127be:	1d3b      	adds	r3, r7, #4
   127c0:	781c      	ldrb	r4, [r3, #0]
   127c2:	1d7b      	adds	r3, r7, #5
   127c4:	781a      	ldrb	r2, [r3, #0]
   127c6:	1dbb      	adds	r3, r7, #6
   127c8:	7819      	ldrb	r1, [r3, #0]
   127ca:	1dfb      	adds	r3, r7, #7
   127cc:	7818      	ldrb	r0, [r3, #0]
   127ce:	0023      	movs	r3, r4
   127d0:	4c3c      	ldr	r4, [pc, #240]	; (128c4 <glcd_draw_line+0x1e4>)
   127d2:	47a0      	blx	r4

	dx = x1 - x0;
   127d4:	2310      	movs	r3, #16
   127d6:	18fb      	adds	r3, r7, r3
   127d8:	1d79      	adds	r1, r7, #5
   127da:	1dfa      	adds	r2, r7, #7
   127dc:	7809      	ldrb	r1, [r1, #0]
   127de:	7812      	ldrb	r2, [r2, #0]
   127e0:	1a8a      	subs	r2, r1, r2
   127e2:	701a      	strb	r2, [r3, #0]
	dy = abs(y1 - y0);
   127e4:	1d3b      	adds	r3, r7, #4
   127e6:	781a      	ldrb	r2, [r3, #0]
   127e8:	1dbb      	adds	r3, r7, #6
   127ea:	781b      	ldrb	r3, [r3, #0]
   127ec:	1ad3      	subs	r3, r2, r3
   127ee:	17d9      	asrs	r1, r3, #31
   127f0:	185a      	adds	r2, r3, r1
   127f2:	404a      	eors	r2, r1
   127f4:	230f      	movs	r3, #15
   127f6:	18fb      	adds	r3, r7, r3
   127f8:	701a      	strb	r2, [r3, #0]
	
	err = dx / 2;
   127fa:	2310      	movs	r3, #16
   127fc:	18fb      	adds	r3, r7, r3
   127fe:	781b      	ldrb	r3, [r3, #0]
   12800:	085b      	lsrs	r3, r3, #1
   12802:	b2da      	uxtb	r2, r3
   12804:	2317      	movs	r3, #23
   12806:	18fb      	adds	r3, r7, r3
   12808:	701a      	strb	r2, [r3, #0]
	
	if (y0 < y1) {
   1280a:	1dba      	adds	r2, r7, #6
   1280c:	1d3b      	adds	r3, r7, #4
   1280e:	7812      	ldrb	r2, [r2, #0]
   12810:	781b      	ldrb	r3, [r3, #0]
   12812:	429a      	cmp	r2, r3
   12814:	d204      	bcs.n	12820 <glcd_draw_line+0x140>
		ystep = 1;
   12816:	2316      	movs	r3, #22
   12818:	18fb      	adds	r3, r7, r3
   1281a:	2201      	movs	r2, #1
   1281c:	701a      	strb	r2, [r3, #0]
   1281e:	e046      	b.n	128ae <glcd_draw_line+0x1ce>
	} else {
		ystep = -1;
   12820:	2316      	movs	r3, #22
   12822:	18fb      	adds	r3, r7, r3
   12824:	22ff      	movs	r2, #255	; 0xff
   12826:	701a      	strb	r2, [r3, #0]
	}
	
	for (; x0<=x1; x0++) {
   12828:	e041      	b.n	128ae <glcd_draw_line+0x1ce>
		if (steep) {
   1282a:	2315      	movs	r3, #21
   1282c:	18fb      	adds	r3, r7, r3
   1282e:	781b      	ldrb	r3, [r3, #0]
   12830:	2b00      	cmp	r3, #0
   12832:	d00a      	beq.n	1284a <glcd_draw_line+0x16a>
			glcd_set_pixel(y0, x0, color);
   12834:	2328      	movs	r3, #40	; 0x28
   12836:	18fb      	adds	r3, r7, r3
   12838:	781a      	ldrb	r2, [r3, #0]
   1283a:	1dfb      	adds	r3, r7, #7
   1283c:	7819      	ldrb	r1, [r3, #0]
   1283e:	1dbb      	adds	r3, r7, #6
   12840:	781b      	ldrb	r3, [r3, #0]
   12842:	0018      	movs	r0, r3
   12844:	4b20      	ldr	r3, [pc, #128]	; (128c8 <glcd_draw_line+0x1e8>)
   12846:	4798      	blx	r3
   12848:	e009      	b.n	1285e <glcd_draw_line+0x17e>
		} else {
			glcd_set_pixel(x0, y0, color);
   1284a:	2328      	movs	r3, #40	; 0x28
   1284c:	18fb      	adds	r3, r7, r3
   1284e:	781a      	ldrb	r2, [r3, #0]
   12850:	1dbb      	adds	r3, r7, #6
   12852:	7819      	ldrb	r1, [r3, #0]
   12854:	1dfb      	adds	r3, r7, #7
   12856:	781b      	ldrb	r3, [r3, #0]
   12858:	0018      	movs	r0, r3
   1285a:	4b1b      	ldr	r3, [pc, #108]	; (128c8 <glcd_draw_line+0x1e8>)
   1285c:	4798      	blx	r3
		}
		err -= dy;
   1285e:	2317      	movs	r3, #23
   12860:	18fb      	adds	r3, r7, r3
   12862:	781a      	ldrb	r2, [r3, #0]
   12864:	230f      	movs	r3, #15
   12866:	18fb      	adds	r3, r7, r3
   12868:	781b      	ldrb	r3, [r3, #0]
   1286a:	1ad3      	subs	r3, r2, r3
   1286c:	b2da      	uxtb	r2, r3
   1286e:	2317      	movs	r3, #23
   12870:	18fb      	adds	r3, r7, r3
   12872:	701a      	strb	r2, [r3, #0]
		if (err < 0) {
   12874:	2317      	movs	r3, #23
   12876:	18fb      	adds	r3, r7, r3
   12878:	781b      	ldrb	r3, [r3, #0]
   1287a:	2b7f      	cmp	r3, #127	; 0x7f
   1287c:	d912      	bls.n	128a4 <glcd_draw_line+0x1c4>
			y0 += ystep;
   1287e:	2316      	movs	r3, #22
   12880:	18fb      	adds	r3, r7, r3
   12882:	7819      	ldrb	r1, [r3, #0]
   12884:	1dbb      	adds	r3, r7, #6
   12886:	1dba      	adds	r2, r7, #6
   12888:	7812      	ldrb	r2, [r2, #0]
   1288a:	188a      	adds	r2, r1, r2
   1288c:	701a      	strb	r2, [r3, #0]
			err += dx;
   1288e:	2317      	movs	r3, #23
   12890:	18fb      	adds	r3, r7, r3
   12892:	781a      	ldrb	r2, [r3, #0]
   12894:	2310      	movs	r3, #16
   12896:	18fb      	adds	r3, r7, r3
   12898:	781b      	ldrb	r3, [r3, #0]
   1289a:	18d3      	adds	r3, r2, r3
   1289c:	b2da      	uxtb	r2, r3
   1289e:	2317      	movs	r3, #23
   128a0:	18fb      	adds	r3, r7, r3
   128a2:	701a      	strb	r2, [r3, #0]
	for (; x0<=x1; x0++) {
   128a4:	1dfb      	adds	r3, r7, #7
   128a6:	781a      	ldrb	r2, [r3, #0]
   128a8:	1dfb      	adds	r3, r7, #7
   128aa:	3201      	adds	r2, #1
   128ac:	701a      	strb	r2, [r3, #0]
   128ae:	1dfa      	adds	r2, r7, #7
   128b0:	1d7b      	adds	r3, r7, #5
   128b2:	7812      	ldrb	r2, [r2, #0]
   128b4:	781b      	ldrb	r3, [r3, #0]
   128b6:	429a      	cmp	r2, r3
   128b8:	d9b7      	bls.n	1282a <glcd_draw_line+0x14a>
		}
	}
}
   128ba:	46c0      	nop			; (mov r8, r8)
   128bc:	46bd      	mov	sp, r7
   128be:	b006      	add	sp, #24
   128c0:	bdb0      	pop	{r4, r5, r7, pc}
   128c2:	46c0      	nop			; (mov r8, r8)
   128c4:	000124a5 	.word	0x000124a5
   128c8:	00012601 	.word	0x00012601

000128cc <glcd_draw_circle>:
	glcd_draw_line(x+1, y+h, x+w, y+h, color);
	glcd_draw_line(x+w, y+1, x+w, y+h, color);
}

void glcd_draw_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
   128cc:	b5b0      	push	{r4, r5, r7, lr}
   128ce:	b084      	sub	sp, #16
   128d0:	af00      	add	r7, sp, #0
   128d2:	0005      	movs	r5, r0
   128d4:	000c      	movs	r4, r1
   128d6:	0010      	movs	r0, r2
   128d8:	0019      	movs	r1, r3
   128da:	1dfb      	adds	r3, r7, #7
   128dc:	1c2a      	adds	r2, r5, #0
   128de:	701a      	strb	r2, [r3, #0]
   128e0:	1dbb      	adds	r3, r7, #6
   128e2:	1c22      	adds	r2, r4, #0
   128e4:	701a      	strb	r2, [r3, #0]
   128e6:	1d7b      	adds	r3, r7, #5
   128e8:	1c02      	adds	r2, r0, #0
   128ea:	701a      	strb	r2, [r3, #0]
   128ec:	1d3b      	adds	r3, r7, #4
   128ee:	1c0a      	adds	r2, r1, #0
   128f0:	701a      	strb	r2, [r3, #0]
		
	int8_t f = 1 - r;
   128f2:	1d7b      	adds	r3, r7, #5
   128f4:	781b      	ldrb	r3, [r3, #0]
   128f6:	2201      	movs	r2, #1
   128f8:	1ad3      	subs	r3, r2, r3
   128fa:	b2da      	uxtb	r2, r3
   128fc:	230f      	movs	r3, #15
   128fe:	18fb      	adds	r3, r7, r3
   12900:	701a      	strb	r2, [r3, #0]
	int8_t ddF_x = 1;
   12902:	230e      	movs	r3, #14
   12904:	18fb      	adds	r3, r7, r3
   12906:	2201      	movs	r2, #1
   12908:	701a      	strb	r2, [r3, #0]
	int8_t ddF_y = -2 * r;
   1290a:	1d7b      	adds	r3, r7, #5
   1290c:	781b      	ldrb	r3, [r3, #0]
   1290e:	1c1a      	adds	r2, r3, #0
   12910:	01d2      	lsls	r2, r2, #7
   12912:	1ad3      	subs	r3, r2, r3
   12914:	18db      	adds	r3, r3, r3
   12916:	b2da      	uxtb	r2, r3
   12918:	230d      	movs	r3, #13
   1291a:	18fb      	adds	r3, r7, r3
   1291c:	701a      	strb	r2, [r3, #0]
	int8_t x = 0;
   1291e:	230c      	movs	r3, #12
   12920:	18fb      	adds	r3, r7, r3
   12922:	2200      	movs	r2, #0
   12924:	701a      	strb	r2, [r3, #0]
	int8_t y = r;
   12926:	230b      	movs	r3, #11
   12928:	18fb      	adds	r3, r7, r3
   1292a:	1d7a      	adds	r2, r7, #5
   1292c:	7812      	ldrb	r2, [r2, #0]
   1292e:	701a      	strb	r2, [r3, #0]
	
	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
   12930:	1dfa      	adds	r2, r7, #7
   12932:	1d7b      	adds	r3, r7, #5
   12934:	7812      	ldrb	r2, [r2, #0]
   12936:	781b      	ldrb	r3, [r3, #0]
   12938:	1ad3      	subs	r3, r2, r3
   1293a:	b2d8      	uxtb	r0, r3
   1293c:	1dba      	adds	r2, r7, #6
   1293e:	1d7b      	adds	r3, r7, #5
   12940:	7812      	ldrb	r2, [r2, #0]
   12942:	781b      	ldrb	r3, [r3, #0]
   12944:	1ad3      	subs	r3, r2, r3
   12946:	b2d9      	uxtb	r1, r3
   12948:	1dfa      	adds	r2, r7, #7
   1294a:	1d7b      	adds	r3, r7, #5
   1294c:	7812      	ldrb	r2, [r2, #0]
   1294e:	781b      	ldrb	r3, [r3, #0]
   12950:	18d3      	adds	r3, r2, r3
   12952:	b2dc      	uxtb	r4, r3
   12954:	1dba      	adds	r2, r7, #6
   12956:	1d7b      	adds	r3, r7, #5
   12958:	7812      	ldrb	r2, [r2, #0]
   1295a:	781b      	ldrb	r3, [r3, #0]
   1295c:	18d3      	adds	r3, r2, r3
   1295e:	b2db      	uxtb	r3, r3
   12960:	0022      	movs	r2, r4
   12962:	4c8e      	ldr	r4, [pc, #568]	; (12b9c <glcd_draw_circle+0x2d0>)
   12964:	47a0      	blx	r4
	
	glcd_set_pixel(x0, y0+r, color);
   12966:	1dba      	adds	r2, r7, #6
   12968:	1d7b      	adds	r3, r7, #5
   1296a:	7812      	ldrb	r2, [r2, #0]
   1296c:	781b      	ldrb	r3, [r3, #0]
   1296e:	18d3      	adds	r3, r2, r3
   12970:	b2d9      	uxtb	r1, r3
   12972:	1d3b      	adds	r3, r7, #4
   12974:	781a      	ldrb	r2, [r3, #0]
   12976:	1dfb      	adds	r3, r7, #7
   12978:	781b      	ldrb	r3, [r3, #0]
   1297a:	0018      	movs	r0, r3
   1297c:	4b88      	ldr	r3, [pc, #544]	; (12ba0 <glcd_draw_circle+0x2d4>)
   1297e:	4798      	blx	r3
	glcd_set_pixel(x0, y0-r, color);
   12980:	1dba      	adds	r2, r7, #6
   12982:	1d7b      	adds	r3, r7, #5
   12984:	7812      	ldrb	r2, [r2, #0]
   12986:	781b      	ldrb	r3, [r3, #0]
   12988:	1ad3      	subs	r3, r2, r3
   1298a:	b2d9      	uxtb	r1, r3
   1298c:	1d3b      	adds	r3, r7, #4
   1298e:	781a      	ldrb	r2, [r3, #0]
   12990:	1dfb      	adds	r3, r7, #7
   12992:	781b      	ldrb	r3, [r3, #0]
   12994:	0018      	movs	r0, r3
   12996:	4b82      	ldr	r3, [pc, #520]	; (12ba0 <glcd_draw_circle+0x2d4>)
   12998:	4798      	blx	r3
	glcd_set_pixel(x0+r, y0, color);
   1299a:	1dfa      	adds	r2, r7, #7
   1299c:	1d7b      	adds	r3, r7, #5
   1299e:	7812      	ldrb	r2, [r2, #0]
   129a0:	781b      	ldrb	r3, [r3, #0]
   129a2:	18d3      	adds	r3, r2, r3
   129a4:	b2d8      	uxtb	r0, r3
   129a6:	1d3b      	adds	r3, r7, #4
   129a8:	781a      	ldrb	r2, [r3, #0]
   129aa:	1dbb      	adds	r3, r7, #6
   129ac:	781b      	ldrb	r3, [r3, #0]
   129ae:	0019      	movs	r1, r3
   129b0:	4b7b      	ldr	r3, [pc, #492]	; (12ba0 <glcd_draw_circle+0x2d4>)
   129b2:	4798      	blx	r3
	glcd_set_pixel(x0-r, y0, color);
   129b4:	1dfa      	adds	r2, r7, #7
   129b6:	1d7b      	adds	r3, r7, #5
   129b8:	7812      	ldrb	r2, [r2, #0]
   129ba:	781b      	ldrb	r3, [r3, #0]
   129bc:	1ad3      	subs	r3, r2, r3
   129be:	b2d8      	uxtb	r0, r3
   129c0:	1d3b      	adds	r3, r7, #4
   129c2:	781a      	ldrb	r2, [r3, #0]
   129c4:	1dbb      	adds	r3, r7, #6
   129c6:	781b      	ldrb	r3, [r3, #0]
   129c8:	0019      	movs	r1, r3
   129ca:	4b75      	ldr	r3, [pc, #468]	; (12ba0 <glcd_draw_circle+0x2d4>)
   129cc:	4798      	blx	r3
	
	while (x<y) {
   129ce:	e0d6      	b.n	12b7e <glcd_draw_circle+0x2b2>
		if (f >= 0) {
   129d0:	230f      	movs	r3, #15
   129d2:	18fb      	adds	r3, r7, r3
   129d4:	781b      	ldrb	r3, [r3, #0]
   129d6:	2b7f      	cmp	r3, #127	; 0x7f
   129d8:	d81c      	bhi.n	12a14 <glcd_draw_circle+0x148>
			y--;
   129da:	230b      	movs	r3, #11
   129dc:	18fb      	adds	r3, r7, r3
   129de:	781b      	ldrb	r3, [r3, #0]
   129e0:	b25b      	sxtb	r3, r3
   129e2:	b2db      	uxtb	r3, r3
   129e4:	3b01      	subs	r3, #1
   129e6:	b2da      	uxtb	r2, r3
   129e8:	230b      	movs	r3, #11
   129ea:	18fb      	adds	r3, r7, r3
   129ec:	701a      	strb	r2, [r3, #0]
			ddF_y += 2;
   129ee:	230d      	movs	r3, #13
   129f0:	18fb      	adds	r3, r7, r3
   129f2:	781b      	ldrb	r3, [r3, #0]
   129f4:	3302      	adds	r3, #2
   129f6:	b2da      	uxtb	r2, r3
   129f8:	230d      	movs	r3, #13
   129fa:	18fb      	adds	r3, r7, r3
   129fc:	701a      	strb	r2, [r3, #0]
			f += ddF_y;
   129fe:	230f      	movs	r3, #15
   12a00:	18fb      	adds	r3, r7, r3
   12a02:	781a      	ldrb	r2, [r3, #0]
   12a04:	230d      	movs	r3, #13
   12a06:	18fb      	adds	r3, r7, r3
   12a08:	781b      	ldrb	r3, [r3, #0]
   12a0a:	18d3      	adds	r3, r2, r3
   12a0c:	b2da      	uxtb	r2, r3
   12a0e:	230f      	movs	r3, #15
   12a10:	18fb      	adds	r3, r7, r3
   12a12:	701a      	strb	r2, [r3, #0]
		}
		x++;
   12a14:	230c      	movs	r3, #12
   12a16:	18fb      	adds	r3, r7, r3
   12a18:	781b      	ldrb	r3, [r3, #0]
   12a1a:	b25b      	sxtb	r3, r3
   12a1c:	b2db      	uxtb	r3, r3
   12a1e:	3301      	adds	r3, #1
   12a20:	b2da      	uxtb	r2, r3
   12a22:	230c      	movs	r3, #12
   12a24:	18fb      	adds	r3, r7, r3
   12a26:	701a      	strb	r2, [r3, #0]
		ddF_x += 2;
   12a28:	230e      	movs	r3, #14
   12a2a:	18fb      	adds	r3, r7, r3
   12a2c:	781b      	ldrb	r3, [r3, #0]
   12a2e:	3302      	adds	r3, #2
   12a30:	b2da      	uxtb	r2, r3
   12a32:	230e      	movs	r3, #14
   12a34:	18fb      	adds	r3, r7, r3
   12a36:	701a      	strb	r2, [r3, #0]
		f += ddF_x;
   12a38:	230f      	movs	r3, #15
   12a3a:	18fb      	adds	r3, r7, r3
   12a3c:	781a      	ldrb	r2, [r3, #0]
   12a3e:	230e      	movs	r3, #14
   12a40:	18fb      	adds	r3, r7, r3
   12a42:	781b      	ldrb	r3, [r3, #0]
   12a44:	18d3      	adds	r3, r2, r3
   12a46:	b2da      	uxtb	r2, r3
   12a48:	230f      	movs	r3, #15
   12a4a:	18fb      	adds	r3, r7, r3
   12a4c:	701a      	strb	r2, [r3, #0]
		
		glcd_set_pixel(x0 + x, y0 + y, color);
   12a4e:	230c      	movs	r3, #12
   12a50:	18fb      	adds	r3, r7, r3
   12a52:	781a      	ldrb	r2, [r3, #0]
   12a54:	1dfb      	adds	r3, r7, #7
   12a56:	781b      	ldrb	r3, [r3, #0]
   12a58:	18d3      	adds	r3, r2, r3
   12a5a:	b2d8      	uxtb	r0, r3
   12a5c:	230b      	movs	r3, #11
   12a5e:	18fb      	adds	r3, r7, r3
   12a60:	781a      	ldrb	r2, [r3, #0]
   12a62:	1dbb      	adds	r3, r7, #6
   12a64:	781b      	ldrb	r3, [r3, #0]
   12a66:	18d3      	adds	r3, r2, r3
   12a68:	b2d9      	uxtb	r1, r3
   12a6a:	1d3b      	adds	r3, r7, #4
   12a6c:	781b      	ldrb	r3, [r3, #0]
   12a6e:	001a      	movs	r2, r3
   12a70:	4b4b      	ldr	r3, [pc, #300]	; (12ba0 <glcd_draw_circle+0x2d4>)
   12a72:	4798      	blx	r3
		glcd_set_pixel(x0 - x, y0 + y, color);
   12a74:	230c      	movs	r3, #12
   12a76:	18fb      	adds	r3, r7, r3
   12a78:	781b      	ldrb	r3, [r3, #0]
   12a7a:	1dfa      	adds	r2, r7, #7
   12a7c:	7812      	ldrb	r2, [r2, #0]
   12a7e:	1ad3      	subs	r3, r2, r3
   12a80:	b2d8      	uxtb	r0, r3
   12a82:	230b      	movs	r3, #11
   12a84:	18fb      	adds	r3, r7, r3
   12a86:	781a      	ldrb	r2, [r3, #0]
   12a88:	1dbb      	adds	r3, r7, #6
   12a8a:	781b      	ldrb	r3, [r3, #0]
   12a8c:	18d3      	adds	r3, r2, r3
   12a8e:	b2d9      	uxtb	r1, r3
   12a90:	1d3b      	adds	r3, r7, #4
   12a92:	781b      	ldrb	r3, [r3, #0]
   12a94:	001a      	movs	r2, r3
   12a96:	4b42      	ldr	r3, [pc, #264]	; (12ba0 <glcd_draw_circle+0x2d4>)
   12a98:	4798      	blx	r3
		glcd_set_pixel(x0 + x, y0 - y, color);
   12a9a:	230c      	movs	r3, #12
   12a9c:	18fb      	adds	r3, r7, r3
   12a9e:	781a      	ldrb	r2, [r3, #0]
   12aa0:	1dfb      	adds	r3, r7, #7
   12aa2:	781b      	ldrb	r3, [r3, #0]
   12aa4:	18d3      	adds	r3, r2, r3
   12aa6:	b2d8      	uxtb	r0, r3
   12aa8:	230b      	movs	r3, #11
   12aaa:	18fb      	adds	r3, r7, r3
   12aac:	781b      	ldrb	r3, [r3, #0]
   12aae:	1dba      	adds	r2, r7, #6
   12ab0:	7812      	ldrb	r2, [r2, #0]
   12ab2:	1ad3      	subs	r3, r2, r3
   12ab4:	b2d9      	uxtb	r1, r3
   12ab6:	1d3b      	adds	r3, r7, #4
   12ab8:	781b      	ldrb	r3, [r3, #0]
   12aba:	001a      	movs	r2, r3
   12abc:	4b38      	ldr	r3, [pc, #224]	; (12ba0 <glcd_draw_circle+0x2d4>)
   12abe:	4798      	blx	r3
		glcd_set_pixel(x0 - x, y0 - y, color);
   12ac0:	230c      	movs	r3, #12
   12ac2:	18fb      	adds	r3, r7, r3
   12ac4:	781b      	ldrb	r3, [r3, #0]
   12ac6:	1dfa      	adds	r2, r7, #7
   12ac8:	7812      	ldrb	r2, [r2, #0]
   12aca:	1ad3      	subs	r3, r2, r3
   12acc:	b2d8      	uxtb	r0, r3
   12ace:	230b      	movs	r3, #11
   12ad0:	18fb      	adds	r3, r7, r3
   12ad2:	781b      	ldrb	r3, [r3, #0]
   12ad4:	1dba      	adds	r2, r7, #6
   12ad6:	7812      	ldrb	r2, [r2, #0]
   12ad8:	1ad3      	subs	r3, r2, r3
   12ada:	b2d9      	uxtb	r1, r3
   12adc:	1d3b      	adds	r3, r7, #4
   12ade:	781b      	ldrb	r3, [r3, #0]
   12ae0:	001a      	movs	r2, r3
   12ae2:	4b2f      	ldr	r3, [pc, #188]	; (12ba0 <glcd_draw_circle+0x2d4>)
   12ae4:	4798      	blx	r3
		
		glcd_set_pixel(x0 + y, y0 + x, color);
   12ae6:	230b      	movs	r3, #11
   12ae8:	18fb      	adds	r3, r7, r3
   12aea:	781a      	ldrb	r2, [r3, #0]
   12aec:	1dfb      	adds	r3, r7, #7
   12aee:	781b      	ldrb	r3, [r3, #0]
   12af0:	18d3      	adds	r3, r2, r3
   12af2:	b2d8      	uxtb	r0, r3
   12af4:	230c      	movs	r3, #12
   12af6:	18fb      	adds	r3, r7, r3
   12af8:	781a      	ldrb	r2, [r3, #0]
   12afa:	1dbb      	adds	r3, r7, #6
   12afc:	781b      	ldrb	r3, [r3, #0]
   12afe:	18d3      	adds	r3, r2, r3
   12b00:	b2d9      	uxtb	r1, r3
   12b02:	1d3b      	adds	r3, r7, #4
   12b04:	781b      	ldrb	r3, [r3, #0]
   12b06:	001a      	movs	r2, r3
   12b08:	4b25      	ldr	r3, [pc, #148]	; (12ba0 <glcd_draw_circle+0x2d4>)
   12b0a:	4798      	blx	r3
		glcd_set_pixel(x0 - y, y0 + x, color);
   12b0c:	230b      	movs	r3, #11
   12b0e:	18fb      	adds	r3, r7, r3
   12b10:	781b      	ldrb	r3, [r3, #0]
   12b12:	1dfa      	adds	r2, r7, #7
   12b14:	7812      	ldrb	r2, [r2, #0]
   12b16:	1ad3      	subs	r3, r2, r3
   12b18:	b2d8      	uxtb	r0, r3
   12b1a:	230c      	movs	r3, #12
   12b1c:	18fb      	adds	r3, r7, r3
   12b1e:	781a      	ldrb	r2, [r3, #0]
   12b20:	1dbb      	adds	r3, r7, #6
   12b22:	781b      	ldrb	r3, [r3, #0]
   12b24:	18d3      	adds	r3, r2, r3
   12b26:	b2d9      	uxtb	r1, r3
   12b28:	1d3b      	adds	r3, r7, #4
   12b2a:	781b      	ldrb	r3, [r3, #0]
   12b2c:	001a      	movs	r2, r3
   12b2e:	4b1c      	ldr	r3, [pc, #112]	; (12ba0 <glcd_draw_circle+0x2d4>)
   12b30:	4798      	blx	r3
		glcd_set_pixel(x0 + y, y0 - x, color);
   12b32:	230b      	movs	r3, #11
   12b34:	18fb      	adds	r3, r7, r3
   12b36:	781a      	ldrb	r2, [r3, #0]
   12b38:	1dfb      	adds	r3, r7, #7
   12b3a:	781b      	ldrb	r3, [r3, #0]
   12b3c:	18d3      	adds	r3, r2, r3
   12b3e:	b2d8      	uxtb	r0, r3
   12b40:	230c      	movs	r3, #12
   12b42:	18fb      	adds	r3, r7, r3
   12b44:	781b      	ldrb	r3, [r3, #0]
   12b46:	1dba      	adds	r2, r7, #6
   12b48:	7812      	ldrb	r2, [r2, #0]
   12b4a:	1ad3      	subs	r3, r2, r3
   12b4c:	b2d9      	uxtb	r1, r3
   12b4e:	1d3b      	adds	r3, r7, #4
   12b50:	781b      	ldrb	r3, [r3, #0]
   12b52:	001a      	movs	r2, r3
   12b54:	4b12      	ldr	r3, [pc, #72]	; (12ba0 <glcd_draw_circle+0x2d4>)
   12b56:	4798      	blx	r3
		glcd_set_pixel(x0 - y, y0 - x, color);
   12b58:	230b      	movs	r3, #11
   12b5a:	18fb      	adds	r3, r7, r3
   12b5c:	781b      	ldrb	r3, [r3, #0]
   12b5e:	1dfa      	adds	r2, r7, #7
   12b60:	7812      	ldrb	r2, [r2, #0]
   12b62:	1ad3      	subs	r3, r2, r3
   12b64:	b2d8      	uxtb	r0, r3
   12b66:	230c      	movs	r3, #12
   12b68:	18fb      	adds	r3, r7, r3
   12b6a:	781b      	ldrb	r3, [r3, #0]
   12b6c:	1dba      	adds	r2, r7, #6
   12b6e:	7812      	ldrb	r2, [r2, #0]
   12b70:	1ad3      	subs	r3, r2, r3
   12b72:	b2d9      	uxtb	r1, r3
   12b74:	1d3b      	adds	r3, r7, #4
   12b76:	781b      	ldrb	r3, [r3, #0]
   12b78:	001a      	movs	r2, r3
   12b7a:	4b09      	ldr	r3, [pc, #36]	; (12ba0 <glcd_draw_circle+0x2d4>)
   12b7c:	4798      	blx	r3
	while (x<y) {
   12b7e:	230c      	movs	r3, #12
   12b80:	18fa      	adds	r2, r7, r3
   12b82:	230b      	movs	r3, #11
   12b84:	18fb      	adds	r3, r7, r3
   12b86:	7812      	ldrb	r2, [r2, #0]
   12b88:	b252      	sxtb	r2, r2
   12b8a:	781b      	ldrb	r3, [r3, #0]
   12b8c:	b25b      	sxtb	r3, r3
   12b8e:	429a      	cmp	r2, r3
   12b90:	da00      	bge.n	12b94 <glcd_draw_circle+0x2c8>
   12b92:	e71d      	b.n	129d0 <glcd_draw_circle+0x104>
		
	}
}
   12b94:	46c0      	nop			; (mov r8, r8)
   12b96:	46bd      	mov	sp, r7
   12b98:	b004      	add	sp, #16
   12b9a:	bdb0      	pop	{r4, r5, r7, pc}
   12b9c:	000124a5 	.word	0x000124a5
   12ba0:	00012601 	.word	0x00012601

00012ba4 <arch_ioport_pin_to_port_id>:
{
   12ba4:	b580      	push	{r7, lr}
   12ba6:	b082      	sub	sp, #8
   12ba8:	af00      	add	r7, sp, #0
   12baa:	6078      	str	r0, [r7, #4]
	return pin >> 5;
   12bac:	687b      	ldr	r3, [r7, #4]
   12bae:	095b      	lsrs	r3, r3, #5
}
   12bb0:	0018      	movs	r0, r3
   12bb2:	46bd      	mov	sp, r7
   12bb4:	b002      	add	sp, #8
   12bb6:	bd80      	pop	{r7, pc}

00012bb8 <arch_ioport_port_to_base>:
{
   12bb8:	b580      	push	{r7, lr}
   12bba:	b082      	sub	sp, #8
   12bbc:	af00      	add	r7, sp, #0
   12bbe:	6078      	str	r0, [r7, #4]
	return &PORT->Group[port];
   12bc0:	687b      	ldr	r3, [r7, #4]
   12bc2:	01db      	lsls	r3, r3, #7
   12bc4:	4a03      	ldr	r2, [pc, #12]	; (12bd4 <arch_ioport_port_to_base+0x1c>)
   12bc6:	4694      	mov	ip, r2
   12bc8:	4463      	add	r3, ip
}
   12bca:	0018      	movs	r0, r3
   12bcc:	46bd      	mov	sp, r7
   12bce:	b002      	add	sp, #8
   12bd0:	bd80      	pop	{r7, pc}
   12bd2:	46c0      	nop			; (mov r8, r8)
   12bd4:	40002800 	.word	0x40002800

00012bd8 <arch_ioport_pin_to_base>:
{
   12bd8:	b580      	push	{r7, lr}
   12bda:	b082      	sub	sp, #8
   12bdc:	af00      	add	r7, sp, #0
   12bde:	6078      	str	r0, [r7, #4]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
   12be0:	687b      	ldr	r3, [r7, #4]
   12be2:	0018      	movs	r0, r3
   12be4:	4b05      	ldr	r3, [pc, #20]	; (12bfc <arch_ioport_pin_to_base+0x24>)
   12be6:	4798      	blx	r3
   12be8:	0003      	movs	r3, r0
   12bea:	0018      	movs	r0, r3
   12bec:	4b04      	ldr	r3, [pc, #16]	; (12c00 <arch_ioport_pin_to_base+0x28>)
   12bee:	4798      	blx	r3
   12bf0:	0003      	movs	r3, r0
}
   12bf2:	0018      	movs	r0, r3
   12bf4:	46bd      	mov	sp, r7
   12bf6:	b002      	add	sp, #8
   12bf8:	bd80      	pop	{r7, pc}
   12bfa:	46c0      	nop			; (mov r8, r8)
   12bfc:	00012ba5 	.word	0x00012ba5
   12c00:	00012bb9 	.word	0x00012bb9

00012c04 <arch_ioport_pin_to_mask>:
{
   12c04:	b580      	push	{r7, lr}
   12c06:	b082      	sub	sp, #8
   12c08:	af00      	add	r7, sp, #0
   12c0a:	6078      	str	r0, [r7, #4]
	return 1U << (pin & 0x1F);
   12c0c:	687b      	ldr	r3, [r7, #4]
   12c0e:	221f      	movs	r2, #31
   12c10:	4013      	ands	r3, r2
   12c12:	2201      	movs	r2, #1
   12c14:	409a      	lsls	r2, r3
   12c16:	0013      	movs	r3, r2
}
   12c18:	0018      	movs	r0, r3
   12c1a:	46bd      	mov	sp, r7
   12c1c:	b002      	add	sp, #8
   12c1e:	bd80      	pop	{r7, pc}

00012c20 <arch_ioport_set_pin_level>:
{
   12c20:	b590      	push	{r4, r7, lr}
   12c22:	b083      	sub	sp, #12
   12c24:	af00      	add	r7, sp, #0
   12c26:	6078      	str	r0, [r7, #4]
   12c28:	000a      	movs	r2, r1
   12c2a:	1cfb      	adds	r3, r7, #3
   12c2c:	701a      	strb	r2, [r3, #0]
	if (level) {
   12c2e:	1cfb      	adds	r3, r7, #3
   12c30:	781b      	ldrb	r3, [r3, #0]
   12c32:	2b00      	cmp	r3, #0
   12c34:	d00b      	beq.n	12c4e <arch_ioport_set_pin_level+0x2e>
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
   12c36:	687b      	ldr	r3, [r7, #4]
   12c38:	0018      	movs	r0, r3
   12c3a:	4b0c      	ldr	r3, [pc, #48]	; (12c6c <arch_ioport_set_pin_level+0x4c>)
   12c3c:	4798      	blx	r3
   12c3e:	0004      	movs	r4, r0
   12c40:	687b      	ldr	r3, [r7, #4]
   12c42:	0018      	movs	r0, r3
   12c44:	4b0a      	ldr	r3, [pc, #40]	; (12c70 <arch_ioport_set_pin_level+0x50>)
   12c46:	4798      	blx	r3
   12c48:	0003      	movs	r3, r0
   12c4a:	61a3      	str	r3, [r4, #24]
}
   12c4c:	e00a      	b.n	12c64 <arch_ioport_set_pin_level+0x44>
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
   12c4e:	687b      	ldr	r3, [r7, #4]
   12c50:	0018      	movs	r0, r3
   12c52:	4b06      	ldr	r3, [pc, #24]	; (12c6c <arch_ioport_set_pin_level+0x4c>)
   12c54:	4798      	blx	r3
   12c56:	0004      	movs	r4, r0
   12c58:	687b      	ldr	r3, [r7, #4]
   12c5a:	0018      	movs	r0, r3
   12c5c:	4b04      	ldr	r3, [pc, #16]	; (12c70 <arch_ioport_set_pin_level+0x50>)
   12c5e:	4798      	blx	r3
   12c60:	0003      	movs	r3, r0
   12c62:	6163      	str	r3, [r4, #20]
}
   12c64:	46c0      	nop			; (mov r8, r8)
   12c66:	46bd      	mov	sp, r7
   12c68:	b003      	add	sp, #12
   12c6a:	bd90      	pop	{r4, r7, pc}
   12c6c:	00012bd9 	.word	0x00012bd9
   12c70:	00012c05 	.word	0x00012c05

00012c74 <ioport_set_pin_level>:
{
   12c74:	b580      	push	{r7, lr}
   12c76:	b082      	sub	sp, #8
   12c78:	af00      	add	r7, sp, #0
   12c7a:	6078      	str	r0, [r7, #4]
   12c7c:	000a      	movs	r2, r1
   12c7e:	1cfb      	adds	r3, r7, #3
   12c80:	701a      	strb	r2, [r3, #0]
	arch_ioport_set_pin_level(pin, level);
   12c82:	1cfb      	adds	r3, r7, #3
   12c84:	781a      	ldrb	r2, [r3, #0]
   12c86:	687b      	ldr	r3, [r7, #4]
   12c88:	0011      	movs	r1, r2
   12c8a:	0018      	movs	r0, r3
   12c8c:	4b02      	ldr	r3, [pc, #8]	; (12c98 <ioport_set_pin_level+0x24>)
   12c8e:	4798      	blx	r3
}
   12c90:	46c0      	nop			; (mov r8, r8)
   12c92:	46bd      	mov	sp, r7
   12c94:	b002      	add	sp, #8
   12c96:	bd80      	pop	{r7, pc}
   12c98:	00012c21 	.word	0x00012c21

00012c9c <glcd_command>:

#include "glcd.h"
#define GLCD_INIT_NHD_C12864A1Z_FSW_FBW_HTT

void glcd_command(uint8_t c)
{
   12c9c:	b580      	push	{r7, lr}
   12c9e:	b082      	sub	sp, #8
   12ca0:	af00      	add	r7, sp, #0
   12ca2:	0002      	movs	r2, r0
   12ca4:	1dfb      	adds	r3, r7, #7
   12ca6:	701a      	strb	r2, [r3, #0]
	GLCD_A0_LOW();
   12ca8:	2100      	movs	r1, #0
   12caa:	201b      	movs	r0, #27
   12cac:	4b05      	ldr	r3, [pc, #20]	; (12cc4 <glcd_command+0x28>)
   12cae:	4798      	blx	r3
	glcd_spi_write(c);	
   12cb0:	1dfb      	adds	r3, r7, #7
   12cb2:	781b      	ldrb	r3, [r3, #0]
   12cb4:	0018      	movs	r0, r3
   12cb6:	4b04      	ldr	r3, [pc, #16]	; (12cc8 <glcd_command+0x2c>)
   12cb8:	4798      	blx	r3
}
   12cba:	46c0      	nop			; (mov r8, r8)
   12cbc:	46bd      	mov	sp, r7
   12cbe:	b002      	add	sp, #8
   12cc0:	bd80      	pop	{r7, pc}
   12cc2:	46c0      	nop			; (mov r8, r8)
   12cc4:	00012c75 	.word	0x00012c75
   12cc8:	000123f5 	.word	0x000123f5

00012ccc <glcd_data>:

void glcd_data(uint8_t c)
{
   12ccc:	b580      	push	{r7, lr}
   12cce:	b082      	sub	sp, #8
   12cd0:	af00      	add	r7, sp, #0
   12cd2:	0002      	movs	r2, r0
   12cd4:	1dfb      	adds	r3, r7, #7
   12cd6:	701a      	strb	r2, [r3, #0]
	GLCD_A0_HIGH();
   12cd8:	2101      	movs	r1, #1
   12cda:	201b      	movs	r0, #27
   12cdc:	4b05      	ldr	r3, [pc, #20]	; (12cf4 <glcd_data+0x28>)
   12cde:	4798      	blx	r3
	glcd_spi_write(c);	
   12ce0:	1dfb      	adds	r3, r7, #7
   12ce2:	781b      	ldrb	r3, [r3, #0]
   12ce4:	0018      	movs	r0, r3
   12ce6:	4b04      	ldr	r3, [pc, #16]	; (12cf8 <glcd_data+0x2c>)
   12ce8:	4798      	blx	r3
}
   12cea:	46c0      	nop			; (mov r8, r8)
   12cec:	46bd      	mov	sp, r7
   12cee:	b002      	add	sp, #8
   12cf0:	bd80      	pop	{r7, pc}
   12cf2:	46c0      	nop			; (mov r8, r8)
   12cf4:	00012c75 	.word	0x00012c75
   12cf8:	000123f5 	.word	0x000123f5

00012cfc <glcd_set_contrast>:

void glcd_set_contrast(uint8_t val) {
   12cfc:	b580      	push	{r7, lr}
   12cfe:	b082      	sub	sp, #8
   12d00:	af00      	add	r7, sp, #0
   12d02:	0002      	movs	r2, r0
   12d04:	1dfb      	adds	r3, r7, #7
   12d06:	701a      	strb	r2, [r3, #0]
	/* Can set a 6-bit value (0 to 63)  */

	/* Must send this command byte before setting the contrast */
	glcd_command(0x81);
   12d08:	2081      	movs	r0, #129	; 0x81
   12d0a:	4b09      	ldr	r3, [pc, #36]	; (12d30 <glcd_set_contrast+0x34>)
   12d0c:	4798      	blx	r3
	
	/* Set the contrat value ("electronic volumne register") */
	if (val > 63) {
   12d0e:	1dfb      	adds	r3, r7, #7
   12d10:	781b      	ldrb	r3, [r3, #0]
   12d12:	2b3f      	cmp	r3, #63	; 0x3f
   12d14:	d903      	bls.n	12d1e <glcd_set_contrast+0x22>
		glcd_command(63);
   12d16:	203f      	movs	r0, #63	; 0x3f
   12d18:	4b05      	ldr	r3, [pc, #20]	; (12d30 <glcd_set_contrast+0x34>)
   12d1a:	4798      	blx	r3
	} else {
		glcd_command(val);
	}
	return;
   12d1c:	e005      	b.n	12d2a <glcd_set_contrast+0x2e>
		glcd_command(val);
   12d1e:	1dfb      	adds	r3, r7, #7
   12d20:	781b      	ldrb	r3, [r3, #0]
   12d22:	0018      	movs	r0, r3
   12d24:	4b02      	ldr	r3, [pc, #8]	; (12d30 <glcd_set_contrast+0x34>)
   12d26:	4798      	blx	r3
	return;
   12d28:	46c0      	nop			; (mov r8, r8)
}
   12d2a:	46bd      	mov	sp, r7
   12d2c:	b002      	add	sp, #8
   12d2e:	bd80      	pop	{r7, pc}
   12d30:	00012c9d 	.word	0x00012c9d

00012d34 <glcd_set_y_address>:

	return;
}

void glcd_set_y_address(uint8_t y)
{
   12d34:	b580      	push	{r7, lr}
   12d36:	b082      	sub	sp, #8
   12d38:	af00      	add	r7, sp, #0
   12d3a:	0002      	movs	r2, r0
   12d3c:	1dfb      	adds	r3, r7, #7
   12d3e:	701a      	strb	r2, [r3, #0]
	glcd_command(ST7565R_PAGE_ADDRESS_SET | (0x0F & y)); /* 0x0F = 0b00001111 */
   12d40:	1dfb      	adds	r3, r7, #7
   12d42:	781b      	ldrb	r3, [r3, #0]
   12d44:	220f      	movs	r2, #15
   12d46:	4013      	ands	r3, r2
   12d48:	b2db      	uxtb	r3, r3
   12d4a:	2250      	movs	r2, #80	; 0x50
   12d4c:	4252      	negs	r2, r2
   12d4e:	4313      	orrs	r3, r2
   12d50:	b2db      	uxtb	r3, r3
   12d52:	0018      	movs	r0, r3
   12d54:	4b02      	ldr	r3, [pc, #8]	; (12d60 <glcd_set_y_address+0x2c>)
   12d56:	4798      	blx	r3
}
   12d58:	46c0      	nop			; (mov r8, r8)
   12d5a:	46bd      	mov	sp, r7
   12d5c:	b002      	add	sp, #8
   12d5e:	bd80      	pop	{r7, pc}
   12d60:	00012c9d 	.word	0x00012c9d

00012d64 <glcd_set_x_address>:

void glcd_set_x_address(uint8_t x)
{
   12d64:	b580      	push	{r7, lr}
   12d66:	b082      	sub	sp, #8
   12d68:	af00      	add	r7, sp, #0
   12d6a:	0002      	movs	r2, r0
   12d6c:	1dfb      	adds	r3, r7, #7
   12d6e:	701a      	strb	r2, [r3, #0]
	glcd_set_column_upper(x);
   12d70:	1dfb      	adds	r3, r7, #7
   12d72:	781b      	ldrb	r3, [r3, #0]
   12d74:	0018      	movs	r0, r3
   12d76:	4b05      	ldr	r3, [pc, #20]	; (12d8c <glcd_set_x_address+0x28>)
   12d78:	4798      	blx	r3
	glcd_set_column_lower(x);	
   12d7a:	1dfb      	adds	r3, r7, #7
   12d7c:	781b      	ldrb	r3, [r3, #0]
   12d7e:	0018      	movs	r0, r3
   12d80:	4b03      	ldr	r3, [pc, #12]	; (12d90 <glcd_set_x_address+0x2c>)
   12d82:	4798      	blx	r3
}
   12d84:	46c0      	nop			; (mov r8, r8)
   12d86:	46bd      	mov	sp, r7
   12d88:	b002      	add	sp, #8
   12d8a:	bd80      	pop	{r7, pc}
   12d8c:	00012d95 	.word	0x00012d95
   12d90:	00012dc1 	.word	0x00012dc1

00012d94 <glcd_set_column_upper>:
{
	glcd_command(ST7565R_DISPLAY_NORMAL);
}

void glcd_set_column_upper(uint8_t addr)
{
   12d94:	b580      	push	{r7, lr}
   12d96:	b082      	sub	sp, #8
   12d98:	af00      	add	r7, sp, #0
   12d9a:	0002      	movs	r2, r0
   12d9c:	1dfb      	adds	r3, r7, #7
   12d9e:	701a      	strb	r2, [r3, #0]
	glcd_command(ST7565R_COLUMN_ADDRESS_SET_UPPER | (addr >> 4));
   12da0:	1dfb      	adds	r3, r7, #7
   12da2:	781b      	ldrb	r3, [r3, #0]
   12da4:	091b      	lsrs	r3, r3, #4
   12da6:	b2db      	uxtb	r3, r3
   12da8:	2210      	movs	r2, #16
   12daa:	4313      	orrs	r3, r2
   12dac:	b2db      	uxtb	r3, r3
   12dae:	0018      	movs	r0, r3
   12db0:	4b02      	ldr	r3, [pc, #8]	; (12dbc <glcd_set_column_upper+0x28>)
   12db2:	4798      	blx	r3
}
   12db4:	46c0      	nop			; (mov r8, r8)
   12db6:	46bd      	mov	sp, r7
   12db8:	b002      	add	sp, #8
   12dba:	bd80      	pop	{r7, pc}
   12dbc:	00012c9d 	.word	0x00012c9d

00012dc0 <glcd_set_column_lower>:

void glcd_set_column_lower(uint8_t addr)
{
   12dc0:	b580      	push	{r7, lr}
   12dc2:	b082      	sub	sp, #8
   12dc4:	af00      	add	r7, sp, #0
   12dc6:	0002      	movs	r2, r0
   12dc8:	1dfb      	adds	r3, r7, #7
   12dca:	701a      	strb	r2, [r3, #0]
	glcd_command(ST7565R_COLUMN_ADDRESS_SET_LOWER | (0x0f & addr));
   12dcc:	1dfb      	adds	r3, r7, #7
   12dce:	781b      	ldrb	r3, [r3, #0]
   12dd0:	220f      	movs	r2, #15
   12dd2:	4013      	ands	r3, r2
   12dd4:	b2db      	uxtb	r3, r3
   12dd6:	0018      	movs	r0, r3
   12dd8:	4b02      	ldr	r3, [pc, #8]	; (12de4 <glcd_set_column_lower+0x24>)
   12dda:	4798      	blx	r3
}
   12ddc:	46c0      	nop			; (mov r8, r8)
   12dde:	46bd      	mov	sp, r7
   12de0:	b002      	add	sp, #8
   12de2:	bd80      	pop	{r7, pc}
   12de4:	00012c9d 	.word	0x00012c9d

00012de8 <glcd_write>:
		}			
	}
}

void glcd_write()
{
   12de8:	b580      	push	{r7, lr}
   12dea:	b082      	sub	sp, #8
   12dec:	af00      	add	r7, sp, #0

	uint8_t bank;

	for (bank = 0; bank < GLCD_NUMBER_OF_BANKS; bank++) {
   12dee:	1dfb      	adds	r3, r7, #7
   12df0:	2200      	movs	r2, #0
   12df2:	701a      	strb	r2, [r3, #0]
   12df4:	e043      	b.n	12e7e <glcd_write+0x96>
		/* Each bank is a single row 8 bits tall */
		uint8_t column;		
		
		if (glcd_bbox_selected->y_min >= (bank+1)*8) {
   12df6:	4b28      	ldr	r3, [pc, #160]	; (12e98 <glcd_write+0xb0>)
   12df8:	681b      	ldr	r3, [r3, #0]
   12dfa:	785b      	ldrb	r3, [r3, #1]
   12dfc:	001a      	movs	r2, r3
   12dfe:	1dfb      	adds	r3, r7, #7
   12e00:	781b      	ldrb	r3, [r3, #0]
   12e02:	3301      	adds	r3, #1
   12e04:	00db      	lsls	r3, r3, #3
   12e06:	429a      	cmp	r2, r3
   12e08:	da33      	bge.n	12e72 <glcd_write+0x8a>
			continue; /* Skip the entire bank */
		}
		
		if (glcd_bbox_selected->y_max < bank*8) {
   12e0a:	4b23      	ldr	r3, [pc, #140]	; (12e98 <glcd_write+0xb0>)
   12e0c:	681b      	ldr	r3, [r3, #0]
   12e0e:	78db      	ldrb	r3, [r3, #3]
   12e10:	001a      	movs	r2, r3
   12e12:	1dfb      	adds	r3, r7, #7
   12e14:	781b      	ldrb	r3, [r3, #0]
   12e16:	00db      	lsls	r3, r3, #3
   12e18:	429a      	cmp	r2, r3
   12e1a:	db35      	blt.n	12e88 <glcd_write+0xa0>
			break;    /* No more banks need updating */
		}
		
		glcd_set_y_address(bank);
   12e1c:	1dfb      	adds	r3, r7, #7
   12e1e:	781b      	ldrb	r3, [r3, #0]
   12e20:	0018      	movs	r0, r3
   12e22:	4b1e      	ldr	r3, [pc, #120]	; (12e9c <glcd_write+0xb4>)
   12e24:	4798      	blx	r3
		glcd_set_x_address(glcd_bbox_selected->x_min);
   12e26:	4b1c      	ldr	r3, [pc, #112]	; (12e98 <glcd_write+0xb0>)
   12e28:	681b      	ldr	r3, [r3, #0]
   12e2a:	781b      	ldrb	r3, [r3, #0]
   12e2c:	0018      	movs	r0, r3
   12e2e:	4b1c      	ldr	r3, [pc, #112]	; (12ea0 <glcd_write+0xb8>)
   12e30:	4798      	blx	r3

		for (column = glcd_bbox_selected->x_min; column <= glcd_bbox_selected->x_max; column++)
   12e32:	4b19      	ldr	r3, [pc, #100]	; (12e98 <glcd_write+0xb0>)
   12e34:	681a      	ldr	r2, [r3, #0]
   12e36:	1dbb      	adds	r3, r7, #6
   12e38:	7812      	ldrb	r2, [r2, #0]
   12e3a:	701a      	strb	r2, [r3, #0]
   12e3c:	e011      	b.n	12e62 <glcd_write+0x7a>
		{
			glcd_data( glcd_buffer_selected[GLCD_NUMBER_OF_COLS * bank + column] );
   12e3e:	4b19      	ldr	r3, [pc, #100]	; (12ea4 <glcd_write+0xbc>)
   12e40:	681b      	ldr	r3, [r3, #0]
   12e42:	1dfa      	adds	r2, r7, #7
   12e44:	7812      	ldrb	r2, [r2, #0]
   12e46:	01d1      	lsls	r1, r2, #7
   12e48:	1dba      	adds	r2, r7, #6
   12e4a:	7812      	ldrb	r2, [r2, #0]
   12e4c:	188a      	adds	r2, r1, r2
   12e4e:	189b      	adds	r3, r3, r2
   12e50:	781b      	ldrb	r3, [r3, #0]
   12e52:	0018      	movs	r0, r3
   12e54:	4b14      	ldr	r3, [pc, #80]	; (12ea8 <glcd_write+0xc0>)
   12e56:	4798      	blx	r3
		for (column = glcd_bbox_selected->x_min; column <= glcd_bbox_selected->x_max; column++)
   12e58:	1dbb      	adds	r3, r7, #6
   12e5a:	781a      	ldrb	r2, [r3, #0]
   12e5c:	1dbb      	adds	r3, r7, #6
   12e5e:	3201      	adds	r2, #1
   12e60:	701a      	strb	r2, [r3, #0]
   12e62:	4b0d      	ldr	r3, [pc, #52]	; (12e98 <glcd_write+0xb0>)
   12e64:	681b      	ldr	r3, [r3, #0]
   12e66:	789b      	ldrb	r3, [r3, #2]
   12e68:	1dba      	adds	r2, r7, #6
   12e6a:	7812      	ldrb	r2, [r2, #0]
   12e6c:	429a      	cmp	r2, r3
   12e6e:	d9e6      	bls.n	12e3e <glcd_write+0x56>
   12e70:	e000      	b.n	12e74 <glcd_write+0x8c>
			continue; /* Skip the entire bank */
   12e72:	46c0      	nop			; (mov r8, r8)
	for (bank = 0; bank < GLCD_NUMBER_OF_BANKS; bank++) {
   12e74:	1dfb      	adds	r3, r7, #7
   12e76:	781a      	ldrb	r2, [r3, #0]
   12e78:	1dfb      	adds	r3, r7, #7
   12e7a:	3201      	adds	r2, #1
   12e7c:	701a      	strb	r2, [r3, #0]
   12e7e:	1dfb      	adds	r3, r7, #7
   12e80:	781b      	ldrb	r3, [r3, #0]
   12e82:	2b0f      	cmp	r3, #15
   12e84:	d9b7      	bls.n	12df6 <glcd_write+0xe>
   12e86:	e000      	b.n	12e8a <glcd_write+0xa2>
			break;    /* No more banks need updating */
   12e88:	46c0      	nop			; (mov r8, r8)
		}
	}

	glcd_reset_bbox();
   12e8a:	4b08      	ldr	r3, [pc, #32]	; (12eac <glcd_write+0xc4>)
   12e8c:	4798      	blx	r3

}
   12e8e:	46c0      	nop			; (mov r8, r8)
   12e90:	46bd      	mov	sp, r7
   12e92:	b002      	add	sp, #8
   12e94:	bd80      	pop	{r7, pc}
   12e96:	46c0      	nop			; (mov r8, r8)
   12e98:	20001654 	.word	0x20001654
   12e9c:	00012d35 	.word	0x00012d35
   12ea0:	00012d65 	.word	0x00012d65
   12ea4:	20001650 	.word	0x20001650
   12ea8:	00012ccd 	.word	0x00012ccd
   12eac:	00012575 	.word	0x00012575

00012eb0 <glcd_ST7565R_init>:

void glcd_ST7565R_init(void) {
   12eb0:	b580      	push	{r7, lr}
   12eb2:	af00      	add	r7, sp, #0

	/* Init sequence based on datasheet example code for NHD-C12864A1Z-FSW-FBW-HTT */
	/* Datasheet says max SCK frequency 2.5MHz for this LCD */
	/* We use "reverse direction" for common output mode, as opposed to datasheet specifying "normal direction" */

	glcd_command(0xa0); /* ADC select in normal mode */
   12eb4:	20a0      	movs	r0, #160	; 0xa0
   12eb6:	4b0d      	ldr	r3, [pc, #52]	; (12eec <glcd_ST7565R_init+0x3c>)
   12eb8:	4798      	blx	r3
	glcd_command(0xae); /* Display OFF */
   12eba:	20ae      	movs	r0, #174	; 0xae
   12ebc:	4b0b      	ldr	r3, [pc, #44]	; (12eec <glcd_ST7565R_init+0x3c>)
   12ebe:	4798      	blx	r3
	glcd_command(0xc8); /* Common output mode select: reverse direction (last 3 bits are ignored) */
   12ec0:	20c8      	movs	r0, #200	; 0xc8
   12ec2:	4b0a      	ldr	r3, [pc, #40]	; (12eec <glcd_ST7565R_init+0x3c>)
   12ec4:	4798      	blx	r3
	glcd_command(0xa2); /* LCD bias set at 1/9 */
   12ec6:	20a2      	movs	r0, #162	; 0xa2
   12ec8:	4b08      	ldr	r3, [pc, #32]	; (12eec <glcd_ST7565R_init+0x3c>)
   12eca:	4798      	blx	r3
	glcd_command(0x2f); /* Power control set to operating mode: 7 */
   12ecc:	202f      	movs	r0, #47	; 0x2f
   12ece:	4b07      	ldr	r3, [pc, #28]	; (12eec <glcd_ST7565R_init+0x3c>)
   12ed0:	4798      	blx	r3
	glcd_command(0x26); /* Internal resistor ratio, set to: 6 */
   12ed2:	2026      	movs	r0, #38	; 0x26
   12ed4:	4b05      	ldr	r3, [pc, #20]	; (12eec <glcd_ST7565R_init+0x3c>)
   12ed6:	4798      	blx	r3
	glcd_set_contrast(20); /* Set contrast, value experimentally determined */
   12ed8:	2014      	movs	r0, #20
   12eda:	4b05      	ldr	r3, [pc, #20]	; (12ef0 <glcd_ST7565R_init+0x40>)
   12edc:	4798      	blx	r3
	glcd_command(0xaf); /* Display on */
   12ede:	20af      	movs	r0, #175	; 0xaf
   12ee0:	4b02      	ldr	r3, [pc, #8]	; (12eec <glcd_ST7565R_init+0x3c>)
   12ee2:	4798      	blx	r3
	glcd_set_contrast(20); /* Set contrast, value experimentally determined, value 0 to 63 */
	glcd_command(0xaf); /* Display on */

#endif

}
   12ee4:	46c0      	nop			; (mov r8, r8)
   12ee6:	46bd      	mov	sp, r7
   12ee8:	bd80      	pop	{r7, pc}
   12eea:	46c0      	nop			; (mov r8, r8)
   12eec:	00012c9d 	.word	0x00012c9d
   12ef0:	00012cfd 	.word	0x00012cfd

00012ef4 <glcd_draw_char_xy>:
	font_current.end_char = end_char;
	font_current.table_type = type; /* Only supports MikroElektronika generated format at the moment */
}

uint8_t glcd_draw_char_xy(uint8_t x, uint8_t y, char c)
{
   12ef4:	b590      	push	{r4, r7, lr}
   12ef6:	b08b      	sub	sp, #44	; 0x2c
   12ef8:	af00      	add	r7, sp, #0
   12efa:	0004      	movs	r4, r0
   12efc:	0008      	movs	r0, r1
   12efe:	0011      	movs	r1, r2
   12f00:	1dfb      	adds	r3, r7, #7
   12f02:	1c22      	adds	r2, r4, #0
   12f04:	701a      	strb	r2, [r3, #0]
   12f06:	1dbb      	adds	r3, r7, #6
   12f08:	1c02      	adds	r2, r0, #0
   12f0a:	701a      	strb	r2, [r3, #0]
   12f0c:	1d7b      	adds	r3, r7, #5
   12f0e:	1c0a      	adds	r2, r1, #0
   12f10:	701a      	strb	r2, [r3, #0]
	if (c < font_current.start_char || c > font_current.end_char) {
   12f12:	4bdc      	ldr	r3, [pc, #880]	; (13284 <glcd_draw_char_xy+0x390>)
   12f14:	799b      	ldrb	r3, [r3, #6]
   12f16:	1d7a      	adds	r2, r7, #5
   12f18:	7812      	ldrb	r2, [r2, #0]
   12f1a:	429a      	cmp	r2, r3
   12f1c:	d305      	bcc.n	12f2a <glcd_draw_char_xy+0x36>
   12f1e:	4bd9      	ldr	r3, [pc, #868]	; (13284 <glcd_draw_char_xy+0x390>)
   12f20:	79db      	ldrb	r3, [r3, #7]
   12f22:	1d7a      	adds	r2, r7, #5
   12f24:	7812      	ldrb	r2, [r2, #0]
   12f26:	429a      	cmp	r2, r3
   12f28:	d902      	bls.n	12f30 <glcd_draw_char_xy+0x3c>
		c = '.';
   12f2a:	1d7b      	adds	r3, r7, #5
   12f2c:	222e      	movs	r2, #46	; 0x2e
   12f2e:	701a      	strb	r2, [r3, #0]
	}
	
	if (font_current.table_type == STANG) {
   12f30:	4bd4      	ldr	r3, [pc, #848]	; (13284 <glcd_draw_char_xy+0x390>)
   12f32:	7a1b      	ldrb	r3, [r3, #8]
   12f34:	2b00      	cmp	r3, #0
   12f36:	d000      	beq.n	12f3a <glcd_draw_char_xy+0x46>
   12f38:	e07c      	b.n	13034 <glcd_draw_char_xy+0x140>
		/* Font table in Pascal Stang format (single byte height with with no width specifier) */
		/* Maximum height of 8 bits only */
			
		uint8_t i;
		for ( i = 0; i < font_current.width; i++ ) {
   12f3a:	2327      	movs	r3, #39	; 0x27
   12f3c:	18fb      	adds	r3, r7, r3
   12f3e:	2200      	movs	r2, #0
   12f40:	701a      	strb	r2, [r3, #0]
   12f42:	e06d      	b.n	13020 <glcd_draw_char_xy+0x12c>
#if defined(GLCD_DEVICE_AVR8)			
			uint8_t dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#else
			uint8_t dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
   12f44:	4bcf      	ldr	r3, [pc, #828]	; (13284 <glcd_draw_char_xy+0x390>)
   12f46:	681a      	ldr	r2, [r3, #0]
   12f48:	1d7b      	adds	r3, r7, #5
   12f4a:	781b      	ldrb	r3, [r3, #0]
   12f4c:	49cd      	ldr	r1, [pc, #820]	; (13284 <glcd_draw_char_xy+0x390>)
   12f4e:	7989      	ldrb	r1, [r1, #6]
   12f50:	1a5b      	subs	r3, r3, r1
   12f52:	49cc      	ldr	r1, [pc, #816]	; (13284 <glcd_draw_char_xy+0x390>)
   12f54:	7909      	ldrb	r1, [r1, #4]
   12f56:	434b      	muls	r3, r1
   12f58:	0019      	movs	r1, r3
   12f5a:	2327      	movs	r3, #39	; 0x27
   12f5c:	18fb      	adds	r3, r7, r3
   12f5e:	781b      	ldrb	r3, [r3, #0]
   12f60:	18cb      	adds	r3, r1, r3
   12f62:	18d2      	adds	r2, r2, r3
   12f64:	231a      	movs	r3, #26
   12f66:	18fb      	adds	r3, r7, r3
   12f68:	7812      	ldrb	r2, [r2, #0]
   12f6a:	701a      	strb	r2, [r3, #0]
#endif
			uint8_t j;
			for (j = 0; j < 8; j++) {
   12f6c:	2326      	movs	r3, #38	; 0x26
   12f6e:	18fb      	adds	r3, r7, r3
   12f70:	2200      	movs	r2, #0
   12f72:	701a      	strb	r2, [r3, #0]
   12f74:	e048      	b.n	13008 <glcd_draw_char_xy+0x114>
				/* Set pixel color for each bit of the column (8-bits) */
				if (x+i >= GLCD_LCD_WIDTH || y+j >= GLCD_LCD_HEIGHT) {
   12f76:	1dfb      	adds	r3, r7, #7
   12f78:	781a      	ldrb	r2, [r3, #0]
   12f7a:	2327      	movs	r3, #39	; 0x27
   12f7c:	18fb      	adds	r3, r7, r3
   12f7e:	781b      	ldrb	r3, [r3, #0]
   12f80:	18d3      	adds	r3, r2, r3
   12f82:	2b7f      	cmp	r3, #127	; 0x7f
   12f84:	dc07      	bgt.n	12f96 <glcd_draw_char_xy+0xa2>
   12f86:	1dbb      	adds	r3, r7, #6
   12f88:	781a      	ldrb	r2, [r3, #0]
   12f8a:	2326      	movs	r3, #38	; 0x26
   12f8c:	18fb      	adds	r3, r7, r3
   12f8e:	781b      	ldrb	r3, [r3, #0]
   12f90:	18d3      	adds	r3, r2, r3
   12f92:	2b3f      	cmp	r3, #63	; 0x3f
   12f94:	dd01      	ble.n	12f9a <glcd_draw_char_xy+0xa6>
					/* Don't try and write past the dimensions of the LCD */
					return 0;
   12f96:	2300      	movs	r3, #0
   12f98:	e26f      	b.n	1347a <glcd_draw_char_xy+0x586>
				}
				if (dat & (1<<j)) {
   12f9a:	231a      	movs	r3, #26
   12f9c:	18fb      	adds	r3, r7, r3
   12f9e:	781a      	ldrb	r2, [r3, #0]
   12fa0:	2326      	movs	r3, #38	; 0x26
   12fa2:	18fb      	adds	r3, r7, r3
   12fa4:	781b      	ldrb	r3, [r3, #0]
   12fa6:	411a      	asrs	r2, r3
   12fa8:	0013      	movs	r3, r2
   12faa:	2201      	movs	r2, #1
   12fac:	4013      	ands	r3, r2
   12fae:	d012      	beq.n	12fd6 <glcd_draw_char_xy+0xe2>
					glcd_set_pixel(x+i,y+j,BLACK);
   12fb0:	1dfa      	adds	r2, r7, #7
   12fb2:	2327      	movs	r3, #39	; 0x27
   12fb4:	18fb      	adds	r3, r7, r3
   12fb6:	7812      	ldrb	r2, [r2, #0]
   12fb8:	781b      	ldrb	r3, [r3, #0]
   12fba:	18d3      	adds	r3, r2, r3
   12fbc:	b2d8      	uxtb	r0, r3
   12fbe:	1dba      	adds	r2, r7, #6
   12fc0:	2326      	movs	r3, #38	; 0x26
   12fc2:	18fb      	adds	r3, r7, r3
   12fc4:	7812      	ldrb	r2, [r2, #0]
   12fc6:	781b      	ldrb	r3, [r3, #0]
   12fc8:	18d3      	adds	r3, r2, r3
   12fca:	b2db      	uxtb	r3, r3
   12fcc:	2201      	movs	r2, #1
   12fce:	0019      	movs	r1, r3
   12fd0:	4bad      	ldr	r3, [pc, #692]	; (13288 <glcd_draw_char_xy+0x394>)
   12fd2:	4798      	blx	r3
   12fd4:	e011      	b.n	12ffa <glcd_draw_char_xy+0x106>
				} else {
					glcd_set_pixel(x+i,y+j,WHITE);
   12fd6:	1dfa      	adds	r2, r7, #7
   12fd8:	2327      	movs	r3, #39	; 0x27
   12fda:	18fb      	adds	r3, r7, r3
   12fdc:	7812      	ldrb	r2, [r2, #0]
   12fde:	781b      	ldrb	r3, [r3, #0]
   12fe0:	18d3      	adds	r3, r2, r3
   12fe2:	b2d8      	uxtb	r0, r3
   12fe4:	1dba      	adds	r2, r7, #6
   12fe6:	2326      	movs	r3, #38	; 0x26
   12fe8:	18fb      	adds	r3, r7, r3
   12fea:	7812      	ldrb	r2, [r2, #0]
   12fec:	781b      	ldrb	r3, [r3, #0]
   12fee:	18d3      	adds	r3, r2, r3
   12ff0:	b2db      	uxtb	r3, r3
   12ff2:	2200      	movs	r2, #0
   12ff4:	0019      	movs	r1, r3
   12ff6:	4ba4      	ldr	r3, [pc, #656]	; (13288 <glcd_draw_char_xy+0x394>)
   12ff8:	4798      	blx	r3
			for (j = 0; j < 8; j++) {
   12ffa:	2326      	movs	r3, #38	; 0x26
   12ffc:	18fb      	adds	r3, r7, r3
   12ffe:	781a      	ldrb	r2, [r3, #0]
   13000:	2326      	movs	r3, #38	; 0x26
   13002:	18fb      	adds	r3, r7, r3
   13004:	3201      	adds	r2, #1
   13006:	701a      	strb	r2, [r3, #0]
   13008:	2326      	movs	r3, #38	; 0x26
   1300a:	18fb      	adds	r3, r7, r3
   1300c:	781b      	ldrb	r3, [r3, #0]
   1300e:	2b07      	cmp	r3, #7
   13010:	d9b1      	bls.n	12f76 <glcd_draw_char_xy+0x82>
		for ( i = 0; i < font_current.width; i++ ) {
   13012:	2327      	movs	r3, #39	; 0x27
   13014:	18fb      	adds	r3, r7, r3
   13016:	781a      	ldrb	r2, [r3, #0]
   13018:	2327      	movs	r3, #39	; 0x27
   1301a:	18fb      	adds	r3, r7, r3
   1301c:	3201      	adds	r2, #1
   1301e:	701a      	strb	r2, [r3, #0]
   13020:	4b98      	ldr	r3, [pc, #608]	; (13284 <glcd_draw_char_xy+0x390>)
   13022:	791b      	ldrb	r3, [r3, #4]
   13024:	2227      	movs	r2, #39	; 0x27
   13026:	18ba      	adds	r2, r7, r2
   13028:	7812      	ldrb	r2, [r2, #0]
   1302a:	429a      	cmp	r2, r3
   1302c:	d38a      	bcc.n	12f44 <glcd_draw_char_xy+0x50>
			}
		}
		
		/* always return how many pixels of width were written */
		/* here for "stang" format fonts, it is always fixed */
		return font_current.width;
   1302e:	4b95      	ldr	r3, [pc, #596]	; (13284 <glcd_draw_char_xy+0x390>)
   13030:	791b      	ldrb	r3, [r3, #4]
   13032:	e222      	b.n	1347a <glcd_draw_char_xy+0x586>
		
	} else if (font_current.table_type == MIKRO) {
   13034:	4b93      	ldr	r3, [pc, #588]	; (13284 <glcd_draw_char_xy+0x390>)
   13036:	7a1b      	ldrb	r3, [r3, #8]
   13038:	2b01      	cmp	r3, #1
   1303a:	d000      	beq.n	1303e <glcd_draw_char_xy+0x14a>
   1303c:	e0e9      	b.n	13212 <glcd_draw_char_xy+0x31e>
		uint8_t var_width;
		uint8_t bytes_high;
		uint8_t bytes_per_char;
		const char *p;
		
		if ((font_current.height % 8) > 0){
   1303e:	4b91      	ldr	r3, [pc, #580]	; (13284 <glcd_draw_char_xy+0x390>)
   13040:	795b      	ldrb	r3, [r3, #5]
   13042:	2207      	movs	r2, #7
   13044:	4013      	ands	r3, r2
   13046:	b2db      	uxtb	r3, r3
   13048:	2b00      	cmp	r3, #0
   1304a:	d008      	beq.n	1305e <glcd_draw_char_xy+0x16a>
			bytes_high = (font_current.height / 8) + 1;
   1304c:	4b8d      	ldr	r3, [pc, #564]	; (13284 <glcd_draw_char_xy+0x390>)
   1304e:	795b      	ldrb	r3, [r3, #5]
   13050:	08db      	lsrs	r3, r3, #3
   13052:	b2da      	uxtb	r2, r3
   13054:	2324      	movs	r3, #36	; 0x24
   13056:	18fb      	adds	r3, r7, r3
   13058:	3201      	adds	r2, #1
   1305a:	701a      	strb	r2, [r3, #0]
   1305c:	e005      	b.n	1306a <glcd_draw_char_xy+0x176>
		}
		else{
			bytes_high = (font_current.height / 8);
   1305e:	4b89      	ldr	r3, [pc, #548]	; (13284 <glcd_draw_char_xy+0x390>)
   13060:	795a      	ldrb	r2, [r3, #5]
   13062:	2324      	movs	r3, #36	; 0x24
   13064:	18fb      	adds	r3, r7, r3
   13066:	08d2      	lsrs	r2, r2, #3
   13068:	701a      	strb	r2, [r3, #0]
		}
		bytes_per_char = font_current.width * bytes_high + 1; /* The +1 is the width byte at the start */
   1306a:	4b86      	ldr	r3, [pc, #536]	; (13284 <glcd_draw_char_xy+0x390>)
   1306c:	791b      	ldrb	r3, [r3, #4]
   1306e:	2224      	movs	r2, #36	; 0x24
   13070:	18ba      	adds	r2, r7, r2
   13072:	7812      	ldrb	r2, [r2, #0]
   13074:	4353      	muls	r3, r2
   13076:	b2da      	uxtb	r2, r3
   13078:	2319      	movs	r3, #25
   1307a:	18fb      	adds	r3, r7, r3
   1307c:	3201      	adds	r2, #1
   1307e:	701a      	strb	r2, [r3, #0]
				
		p = font_current.font_table + (c - font_current.start_char) * bytes_per_char;
   13080:	4b80      	ldr	r3, [pc, #512]	; (13284 <glcd_draw_char_xy+0x390>)
   13082:	681b      	ldr	r3, [r3, #0]
   13084:	1d7a      	adds	r2, r7, #5
   13086:	7812      	ldrb	r2, [r2, #0]
   13088:	497e      	ldr	r1, [pc, #504]	; (13284 <glcd_draw_char_xy+0x390>)
   1308a:	7989      	ldrb	r1, [r1, #6]
   1308c:	1a52      	subs	r2, r2, r1
   1308e:	2119      	movs	r1, #25
   13090:	1879      	adds	r1, r7, r1
   13092:	7809      	ldrb	r1, [r1, #0]
   13094:	434a      	muls	r2, r1
   13096:	189b      	adds	r3, r3, r2
   13098:	617b      	str	r3, [r7, #20]

		/* The first byte per character is always the width of the character */
#if defined(GLCD_DEVICE_AVR8)		
		var_width = pgm_read_byte(p);
#else
		var_width = *p;
   1309a:	2313      	movs	r3, #19
   1309c:	18fb      	adds	r3, r7, r3
   1309e:	697a      	ldr	r2, [r7, #20]
   130a0:	7812      	ldrb	r2, [r2, #0]
   130a2:	701a      	strb	r2, [r3, #0]
#endif
		p++; /* Step over the variable width field */
   130a4:	697b      	ldr	r3, [r7, #20]
   130a6:	3301      	adds	r3, #1
   130a8:	617b      	str	r3, [r7, #20]
		if (x+var_width >= GLCD_LCD_WIDTH || y+font_current.height >= GLCD_LCD_HEIGHT) {
			return;
		}
		*/
		
		for ( i = 0; i < var_width; i++ ) {
   130aa:	2325      	movs	r3, #37	; 0x25
   130ac:	18fb      	adds	r3, r7, r3
   130ae:	2200      	movs	r2, #0
   130b0:	701a      	strb	r2, [r3, #0]
   130b2:	e0a1      	b.n	131f8 <glcd_draw_char_xy+0x304>
			uint8_t j;
			for ( j = 0; j < bytes_high; j++ ) {
   130b4:	2323      	movs	r3, #35	; 0x23
   130b6:	18fb      	adds	r3, r7, r3
   130b8:	2200      	movs	r2, #0
   130ba:	701a      	strb	r2, [r3, #0]
   130bc:	e08c      	b.n	131d8 <glcd_draw_char_xy+0x2e4>
#if defined(GLCD_DEVICE_AVR8)				
				uint8_t dat = pgm_read_byte( p + i*bytes_high + j );
#else
				uint8_t dat = *( p + i*bytes_high + j );
   130be:	2325      	movs	r3, #37	; 0x25
   130c0:	18fb      	adds	r3, r7, r3
   130c2:	781b      	ldrb	r3, [r3, #0]
   130c4:	2224      	movs	r2, #36	; 0x24
   130c6:	18ba      	adds	r2, r7, r2
   130c8:	7812      	ldrb	r2, [r2, #0]
   130ca:	4353      	muls	r3, r2
   130cc:	001a      	movs	r2, r3
   130ce:	2323      	movs	r3, #35	; 0x23
   130d0:	18fb      	adds	r3, r7, r3
   130d2:	781b      	ldrb	r3, [r3, #0]
   130d4:	18d3      	adds	r3, r2, r3
   130d6:	697a      	ldr	r2, [r7, #20]
   130d8:	18d2      	adds	r2, r2, r3
   130da:	2312      	movs	r3, #18
   130dc:	18fb      	adds	r3, r7, r3
   130de:	7812      	ldrb	r2, [r2, #0]
   130e0:	701a      	strb	r2, [r3, #0]
#endif
				uint8_t bit;
				for (bit = 0; bit < 8; bit++) {
   130e2:	2322      	movs	r3, #34	; 0x22
   130e4:	18fb      	adds	r3, r7, r3
   130e6:	2200      	movs	r2, #0
   130e8:	701a      	strb	r2, [r3, #0]
   130ea:	e069      	b.n	131c0 <glcd_draw_char_xy+0x2cc>
					
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
   130ec:	1dfb      	adds	r3, r7, #7
   130ee:	781a      	ldrb	r2, [r3, #0]
   130f0:	2325      	movs	r3, #37	; 0x25
   130f2:	18fb      	adds	r3, r7, r3
   130f4:	781b      	ldrb	r3, [r3, #0]
   130f6:	18d3      	adds	r3, r2, r3
   130f8:	2b7f      	cmp	r3, #127	; 0x7f
   130fa:	dc0c      	bgt.n	13116 <glcd_draw_char_xy+0x222>
   130fc:	1dbb      	adds	r3, r7, #6
   130fe:	781a      	ldrb	r2, [r3, #0]
   13100:	2323      	movs	r3, #35	; 0x23
   13102:	18fb      	adds	r3, r7, r3
   13104:	781b      	ldrb	r3, [r3, #0]
   13106:	00db      	lsls	r3, r3, #3
   13108:	18d2      	adds	r2, r2, r3
   1310a:	2322      	movs	r3, #34	; 0x22
   1310c:	18fb      	adds	r3, r7, r3
   1310e:	781b      	ldrb	r3, [r3, #0]
   13110:	18d3      	adds	r3, r2, r3
   13112:	2b3f      	cmp	r3, #63	; 0x3f
   13114:	dd01      	ble.n	1311a <glcd_draw_char_xy+0x226>
						/* Don't write past the dimensions of the LCD, skip the entire char */
						return 0;
   13116:	2300      	movs	r3, #0
   13118:	e1af      	b.n	1347a <glcd_draw_char_xy+0x586>
					}
					
					/* We should not write if the y bit exceeds font height */
					if ((j*8 + bit) >= font_current.height) {
   1311a:	2323      	movs	r3, #35	; 0x23
   1311c:	18fb      	adds	r3, r7, r3
   1311e:	781b      	ldrb	r3, [r3, #0]
   13120:	00da      	lsls	r2, r3, #3
   13122:	2322      	movs	r3, #34	; 0x22
   13124:	18fb      	adds	r3, r7, r3
   13126:	781b      	ldrb	r3, [r3, #0]
   13128:	18d3      	adds	r3, r2, r3
   1312a:	4a56      	ldr	r2, [pc, #344]	; (13284 <glcd_draw_char_xy+0x390>)
   1312c:	7952      	ldrb	r2, [r2, #5]
   1312e:	4293      	cmp	r3, r2
   13130:	da3e      	bge.n	131b0 <glcd_draw_char_xy+0x2bc>
						/* Skip the bit */
						continue;
					}
					
					if (dat & (1<<bit)) {
   13132:	2312      	movs	r3, #18
   13134:	18fb      	adds	r3, r7, r3
   13136:	781a      	ldrb	r2, [r3, #0]
   13138:	2322      	movs	r3, #34	; 0x22
   1313a:	18fb      	adds	r3, r7, r3
   1313c:	781b      	ldrb	r3, [r3, #0]
   1313e:	411a      	asrs	r2, r3
   13140:	0013      	movs	r3, r2
   13142:	2201      	movs	r2, #1
   13144:	4013      	ands	r3, r2
   13146:	d019      	beq.n	1317c <glcd_draw_char_xy+0x288>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   13148:	1dfa      	adds	r2, r7, #7
   1314a:	2325      	movs	r3, #37	; 0x25
   1314c:	18fb      	adds	r3, r7, r3
   1314e:	7812      	ldrb	r2, [r2, #0]
   13150:	781b      	ldrb	r3, [r3, #0]
   13152:	18d3      	adds	r3, r2, r3
   13154:	b2d8      	uxtb	r0, r3
   13156:	2323      	movs	r3, #35	; 0x23
   13158:	18fb      	adds	r3, r7, r3
   1315a:	781b      	ldrb	r3, [r3, #0]
   1315c:	00db      	lsls	r3, r3, #3
   1315e:	b2da      	uxtb	r2, r3
   13160:	1dbb      	adds	r3, r7, #6
   13162:	781b      	ldrb	r3, [r3, #0]
   13164:	18d3      	adds	r3, r2, r3
   13166:	b2da      	uxtb	r2, r3
   13168:	2322      	movs	r3, #34	; 0x22
   1316a:	18fb      	adds	r3, r7, r3
   1316c:	781b      	ldrb	r3, [r3, #0]
   1316e:	18d3      	adds	r3, r2, r3
   13170:	b2db      	uxtb	r3, r3
   13172:	2201      	movs	r2, #1
   13174:	0019      	movs	r1, r3
   13176:	4b44      	ldr	r3, [pc, #272]	; (13288 <glcd_draw_char_xy+0x394>)
   13178:	4798      	blx	r3
   1317a:	e01a      	b.n	131b2 <glcd_draw_char_xy+0x2be>
					} else {
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   1317c:	1dfa      	adds	r2, r7, #7
   1317e:	2325      	movs	r3, #37	; 0x25
   13180:	18fb      	adds	r3, r7, r3
   13182:	7812      	ldrb	r2, [r2, #0]
   13184:	781b      	ldrb	r3, [r3, #0]
   13186:	18d3      	adds	r3, r2, r3
   13188:	b2d8      	uxtb	r0, r3
   1318a:	2323      	movs	r3, #35	; 0x23
   1318c:	18fb      	adds	r3, r7, r3
   1318e:	781b      	ldrb	r3, [r3, #0]
   13190:	00db      	lsls	r3, r3, #3
   13192:	b2da      	uxtb	r2, r3
   13194:	1dbb      	adds	r3, r7, #6
   13196:	781b      	ldrb	r3, [r3, #0]
   13198:	18d3      	adds	r3, r2, r3
   1319a:	b2da      	uxtb	r2, r3
   1319c:	2322      	movs	r3, #34	; 0x22
   1319e:	18fb      	adds	r3, r7, r3
   131a0:	781b      	ldrb	r3, [r3, #0]
   131a2:	18d3      	adds	r3, r2, r3
   131a4:	b2db      	uxtb	r3, r3
   131a6:	2200      	movs	r2, #0
   131a8:	0019      	movs	r1, r3
   131aa:	4b37      	ldr	r3, [pc, #220]	; (13288 <glcd_draw_char_xy+0x394>)
   131ac:	4798      	blx	r3
   131ae:	e000      	b.n	131b2 <glcd_draw_char_xy+0x2be>
						continue;
   131b0:	46c0      	nop			; (mov r8, r8)
				for (bit = 0; bit < 8; bit++) {
   131b2:	2322      	movs	r3, #34	; 0x22
   131b4:	18fb      	adds	r3, r7, r3
   131b6:	781a      	ldrb	r2, [r3, #0]
   131b8:	2322      	movs	r3, #34	; 0x22
   131ba:	18fb      	adds	r3, r7, r3
   131bc:	3201      	adds	r2, #1
   131be:	701a      	strb	r2, [r3, #0]
   131c0:	2322      	movs	r3, #34	; 0x22
   131c2:	18fb      	adds	r3, r7, r3
   131c4:	781b      	ldrb	r3, [r3, #0]
   131c6:	2b07      	cmp	r3, #7
   131c8:	d990      	bls.n	130ec <glcd_draw_char_xy+0x1f8>
			for ( j = 0; j < bytes_high; j++ ) {
   131ca:	2323      	movs	r3, #35	; 0x23
   131cc:	18fb      	adds	r3, r7, r3
   131ce:	781a      	ldrb	r2, [r3, #0]
   131d0:	2323      	movs	r3, #35	; 0x23
   131d2:	18fb      	adds	r3, r7, r3
   131d4:	3201      	adds	r2, #1
   131d6:	701a      	strb	r2, [r3, #0]
   131d8:	2323      	movs	r3, #35	; 0x23
   131da:	18fa      	adds	r2, r7, r3
   131dc:	2324      	movs	r3, #36	; 0x24
   131de:	18fb      	adds	r3, r7, r3
   131e0:	7812      	ldrb	r2, [r2, #0]
   131e2:	781b      	ldrb	r3, [r3, #0]
   131e4:	429a      	cmp	r2, r3
   131e6:	d200      	bcs.n	131ea <glcd_draw_char_xy+0x2f6>
   131e8:	e769      	b.n	130be <glcd_draw_char_xy+0x1ca>
		for ( i = 0; i < var_width; i++ ) {
   131ea:	2325      	movs	r3, #37	; 0x25
   131ec:	18fb      	adds	r3, r7, r3
   131ee:	781a      	ldrb	r2, [r3, #0]
   131f0:	2325      	movs	r3, #37	; 0x25
   131f2:	18fb      	adds	r3, r7, r3
   131f4:	3201      	adds	r2, #1
   131f6:	701a      	strb	r2, [r3, #0]
   131f8:	2325      	movs	r3, #37	; 0x25
   131fa:	18fa      	adds	r2, r7, r3
   131fc:	2313      	movs	r3, #19
   131fe:	18fb      	adds	r3, r7, r3
   13200:	7812      	ldrb	r2, [r2, #0]
   13202:	781b      	ldrb	r3, [r3, #0]
   13204:	429a      	cmp	r2, r3
   13206:	d200      	bcs.n	1320a <glcd_draw_char_xy+0x316>
   13208:	e754      	b.n	130b4 <glcd_draw_char_xy+0x1c0>
					}
				}									
			}				
		}
		return var_width;	
   1320a:	2313      	movs	r3, #19
   1320c:	18fb      	adds	r3, r7, r3
   1320e:	781b      	ldrb	r3, [r3, #0]
   13210:	e133      	b.n	1347a <glcd_draw_char_xy+0x586>
	
	} else if (font_current.table_type == GLCD_UTILS) {
   13212:	4b1c      	ldr	r3, [pc, #112]	; (13284 <glcd_draw_char_xy+0x390>)
   13214:	7a1b      	ldrb	r3, [r3, #8]
   13216:	2b02      	cmp	r3, #2
   13218:	d000      	beq.n	1321c <glcd_draw_char_xy+0x328>
   1321a:	e12d      	b.n	13478 <glcd_draw_char_xy+0x584>
		uint8_t var_width, n;
		uint8_t bytes_high, bytes_per_char;
		const char *p;
		uint8_t j;
		
		bytes_high = font_current.height / 8 + 1;
   1321c:	4b19      	ldr	r3, [pc, #100]	; (13284 <glcd_draw_char_xy+0x390>)
   1321e:	795b      	ldrb	r3, [r3, #5]
   13220:	08db      	lsrs	r3, r3, #3
   13222:	b2da      	uxtb	r2, r3
   13224:	2311      	movs	r3, #17
   13226:	18fb      	adds	r3, r7, r3
   13228:	3201      	adds	r2, #1
   1322a:	701a      	strb	r2, [r3, #0]
		bytes_per_char = font_current.width * bytes_high;
   1322c:	4b15      	ldr	r3, [pc, #84]	; (13284 <glcd_draw_char_xy+0x390>)
   1322e:	791a      	ldrb	r2, [r3, #4]
   13230:	2310      	movs	r3, #16
   13232:	18fb      	adds	r3, r7, r3
   13234:	2111      	movs	r1, #17
   13236:	1879      	adds	r1, r7, r1
   13238:	7809      	ldrb	r1, [r1, #0]
   1323a:	434a      	muls	r2, r1
   1323c:	701a      	strb	r2, [r3, #0]
		
		/* Point to chars first byte */
		p = font_current.font_table + (c - font_current.start_char) * bytes_per_char;
   1323e:	4b11      	ldr	r3, [pc, #68]	; (13284 <glcd_draw_char_xy+0x390>)
   13240:	681b      	ldr	r3, [r3, #0]
   13242:	1d7a      	adds	r2, r7, #5
   13244:	7812      	ldrb	r2, [r2, #0]
   13246:	490f      	ldr	r1, [pc, #60]	; (13284 <glcd_draw_char_xy+0x390>)
   13248:	7989      	ldrb	r1, [r1, #6]
   1324a:	1a52      	subs	r2, r2, r1
   1324c:	2110      	movs	r1, #16
   1324e:	1879      	adds	r1, r7, r1
   13250:	7809      	ldrb	r1, [r1, #0]
   13252:	434a      	muls	r2, r1
   13254:	189b      	adds	r3, r3, r2
   13256:	60fb      	str	r3, [r7, #12]

		/* Determine the width of the character */
		var_width = font_current.width;
   13258:	2321      	movs	r3, #33	; 0x21
   1325a:	18fb      	adds	r3, r7, r3
   1325c:	4a09      	ldr	r2, [pc, #36]	; (13284 <glcd_draw_char_xy+0x390>)
   1325e:	7912      	ldrb	r2, [r2, #4]
   13260:	701a      	strb	r2, [r3, #0]
		
		n = 0; /* How many columns back from the end */
   13262:	2320      	movs	r3, #32
   13264:	18fb      	adds	r3, r7, r3
   13266:	2200      	movs	r2, #0
   13268:	701a      	strb	r2, [r3, #0]
		
		while (1) {
			uint8_t max_byte = 0;
   1326a:	231e      	movs	r3, #30
   1326c:	18fb      	adds	r3, r7, r3
   1326e:	2200      	movs	r2, #0
   13270:	701a      	strb	r2, [r3, #0]
			uint8_t row = 0;
   13272:	231d      	movs	r3, #29
   13274:	18fb      	adds	r3, r7, r3
   13276:	2200      	movs	r2, #0
   13278:	701a      	strb	r2, [r3, #0]
			
			for (row = 0; row < bytes_high; row++) {
   1327a:	231d      	movs	r3, #29
   1327c:	18fb      	adds	r3, r7, r3
   1327e:	2200      	movs	r2, #0
   13280:	701a      	strb	r2, [r3, #0]
   13282:	e022      	b.n	132ca <glcd_draw_char_xy+0x3d6>
   13284:	20001658 	.word	0x20001658
   13288:	00012601 	.word	0x00012601
				uint8_t offset;
				offset = (font_current.width - 1 - n) * row;
   1328c:	4b7d      	ldr	r3, [pc, #500]	; (13484 <glcd_draw_char_xy+0x590>)
   1328e:	791b      	ldrb	r3, [r3, #4]
   13290:	1e5a      	subs	r2, r3, #1
   13292:	2320      	movs	r3, #32
   13294:	18fb      	adds	r3, r7, r3
   13296:	781b      	ldrb	r3, [r3, #0]
   13298:	1ad3      	subs	r3, r2, r3
   1329a:	b2da      	uxtb	r2, r3
   1329c:	230b      	movs	r3, #11
   1329e:	18fb      	adds	r3, r7, r3
   132a0:	211d      	movs	r1, #29
   132a2:	1879      	adds	r1, r7, r1
   132a4:	7809      	ldrb	r1, [r1, #0]
   132a6:	434a      	muls	r2, r1
   132a8:	701a      	strb	r2, [r3, #0]
				max_byte = *(p + offset);
   132aa:	230b      	movs	r3, #11
   132ac:	18fb      	adds	r3, r7, r3
   132ae:	781b      	ldrb	r3, [r3, #0]
   132b0:	68fa      	ldr	r2, [r7, #12]
   132b2:	18d2      	adds	r2, r2, r3
   132b4:	231e      	movs	r3, #30
   132b6:	18fb      	adds	r3, r7, r3
   132b8:	7812      	ldrb	r2, [r2, #0]
   132ba:	701a      	strb	r2, [r3, #0]
			for (row = 0; row < bytes_high; row++) {
   132bc:	231d      	movs	r3, #29
   132be:	18fb      	adds	r3, r7, r3
   132c0:	781a      	ldrb	r2, [r3, #0]
   132c2:	231d      	movs	r3, #29
   132c4:	18fb      	adds	r3, r7, r3
   132c6:	3201      	adds	r2, #1
   132c8:	701a      	strb	r2, [r3, #0]
   132ca:	231d      	movs	r3, #29
   132cc:	18fa      	adds	r2, r7, r3
   132ce:	2311      	movs	r3, #17
   132d0:	18fb      	adds	r3, r7, r3
   132d2:	7812      	ldrb	r2, [r2, #0]
   132d4:	781b      	ldrb	r3, [r3, #0]
   132d6:	429a      	cmp	r2, r3
   132d8:	d3d8      	bcc.n	1328c <glcd_draw_char_xy+0x398>
			}
			if (max_byte == 0) {
   132da:	231e      	movs	r3, #30
   132dc:	18fb      	adds	r3, r7, r3
   132de:	781b      	ldrb	r3, [r3, #0]
   132e0:	2b00      	cmp	r3, #0
   132e2:	d113      	bne.n	1330c <glcd_draw_char_xy+0x418>
				/* column is empty for all rows, go left and test again */
				/* reduce variable width by 1 */
				var_width--;
   132e4:	2321      	movs	r3, #33	; 0x21
   132e6:	18fb      	adds	r3, r7, r3
   132e8:	781a      	ldrb	r2, [r3, #0]
   132ea:	2321      	movs	r3, #33	; 0x21
   132ec:	18fb      	adds	r3, r7, r3
   132ee:	3a01      	subs	r2, #1
   132f0:	701a      	strb	r2, [r3, #0]
				if (var_width == 0) {
   132f2:	2321      	movs	r3, #33	; 0x21
   132f4:	18fb      	adds	r3, r7, r3
   132f6:	781b      	ldrb	r3, [r3, #0]
   132f8:	2b00      	cmp	r3, #0
   132fa:	d009      	beq.n	13310 <glcd_draw_char_xy+0x41c>
					break;
				}
			} else {
				break; /* Part of a character was found */
			}
			n++;
   132fc:	2320      	movs	r3, #32
   132fe:	18fb      	adds	r3, r7, r3
   13300:	781a      	ldrb	r2, [r3, #0]
   13302:	2320      	movs	r3, #32
   13304:	18fb      	adds	r3, r7, r3
   13306:	3201      	adds	r2, #1
   13308:	701a      	strb	r2, [r3, #0]
		while (1) {
   1330a:	e7ae      	b.n	1326a <glcd_draw_char_xy+0x376>
				break; /* Part of a character was found */
   1330c:	46c0      	nop			; (mov r8, r8)
   1330e:	e000      	b.n	13312 <glcd_draw_char_xy+0x41e>
					break;
   13310:	46c0      	nop			; (mov r8, r8)
		/* Uncomment line below, to force fixed width, for debugging only */
		//var_width = font_current.width; // bypass auto width detection, treat as fixed width
				
		/* For glcd-utils format, we write one complete row at a time */
		 /* loop as rows, 1st row, j=0 */
		for ( j = 0; j < bytes_high; j++ ) {
   13312:	231f      	movs	r3, #31
   13314:	18fb      	adds	r3, r7, r3
   13316:	2200      	movs	r2, #0
   13318:	701a      	strb	r2, [r3, #0]
   1331a:	e0a0      	b.n	1345e <glcd_draw_char_xy+0x56a>
			/* Loop one row at a time */
		
			uint8_t i;
			for ( i = 0; i < var_width; i++ ) {
   1331c:	231c      	movs	r3, #28
   1331e:	18fb      	adds	r3, r7, r3
   13320:	2200      	movs	r2, #0
   13322:	701a      	strb	r2, [r3, #0]
   13324:	e08b      	b.n	1343e <glcd_draw_char_xy+0x54a>
				uint8_t dat, bit;
				
#if defined(GLCD_DEVICE_AVR8)
				dat = pgm_read_byte( p + j*font_current.width + i );
#else
				dat = *( p + j*font_current.width + i );
   13326:	231f      	movs	r3, #31
   13328:	18fb      	adds	r3, r7, r3
   1332a:	781b      	ldrb	r3, [r3, #0]
   1332c:	4a55      	ldr	r2, [pc, #340]	; (13484 <glcd_draw_char_xy+0x590>)
   1332e:	7912      	ldrb	r2, [r2, #4]
   13330:	4353      	muls	r3, r2
   13332:	001a      	movs	r2, r3
   13334:	231c      	movs	r3, #28
   13336:	18fb      	adds	r3, r7, r3
   13338:	781b      	ldrb	r3, [r3, #0]
   1333a:	18d3      	adds	r3, r2, r3
   1333c:	68fa      	ldr	r2, [r7, #12]
   1333e:	18d2      	adds	r2, r2, r3
   13340:	230a      	movs	r3, #10
   13342:	18fb      	adds	r3, r7, r3
   13344:	7812      	ldrb	r2, [r2, #0]
   13346:	701a      	strb	r2, [r3, #0]
#endif
				
				for (bit = 0; bit < 8; bit++) {
   13348:	231b      	movs	r3, #27
   1334a:	18fb      	adds	r3, r7, r3
   1334c:	2200      	movs	r2, #0
   1334e:	701a      	strb	r2, [r3, #0]
   13350:	e069      	b.n	13426 <glcd_draw_char_xy+0x532>
					
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
   13352:	1dfb      	adds	r3, r7, #7
   13354:	781a      	ldrb	r2, [r3, #0]
   13356:	231c      	movs	r3, #28
   13358:	18fb      	adds	r3, r7, r3
   1335a:	781b      	ldrb	r3, [r3, #0]
   1335c:	18d3      	adds	r3, r2, r3
   1335e:	2b7f      	cmp	r3, #127	; 0x7f
   13360:	dc0c      	bgt.n	1337c <glcd_draw_char_xy+0x488>
   13362:	1dbb      	adds	r3, r7, #6
   13364:	781a      	ldrb	r2, [r3, #0]
   13366:	231f      	movs	r3, #31
   13368:	18fb      	adds	r3, r7, r3
   1336a:	781b      	ldrb	r3, [r3, #0]
   1336c:	00db      	lsls	r3, r3, #3
   1336e:	18d2      	adds	r2, r2, r3
   13370:	231b      	movs	r3, #27
   13372:	18fb      	adds	r3, r7, r3
   13374:	781b      	ldrb	r3, [r3, #0]
   13376:	18d3      	adds	r3, r2, r3
   13378:	2b3f      	cmp	r3, #63	; 0x3f
   1337a:	dd01      	ble.n	13380 <glcd_draw_char_xy+0x48c>
						/* Don't write past the dimensions of the LCD, skip the entire char */
						return 0;
   1337c:	2300      	movs	r3, #0
   1337e:	e07c      	b.n	1347a <glcd_draw_char_xy+0x586>
					}
					
					/* We should not write if the y bit exceeds font height */
					if ((j*8 + bit) >= font_current.height) {
   13380:	231f      	movs	r3, #31
   13382:	18fb      	adds	r3, r7, r3
   13384:	781b      	ldrb	r3, [r3, #0]
   13386:	00da      	lsls	r2, r3, #3
   13388:	231b      	movs	r3, #27
   1338a:	18fb      	adds	r3, r7, r3
   1338c:	781b      	ldrb	r3, [r3, #0]
   1338e:	18d3      	adds	r3, r2, r3
   13390:	4a3c      	ldr	r2, [pc, #240]	; (13484 <glcd_draw_char_xy+0x590>)
   13392:	7952      	ldrb	r2, [r2, #5]
   13394:	4293      	cmp	r3, r2
   13396:	da3e      	bge.n	13416 <glcd_draw_char_xy+0x522>
						/* Skip the bit */
						continue;
					}
					
					if (dat & (1<<bit)) {
   13398:	230a      	movs	r3, #10
   1339a:	18fb      	adds	r3, r7, r3
   1339c:	781a      	ldrb	r2, [r3, #0]
   1339e:	231b      	movs	r3, #27
   133a0:	18fb      	adds	r3, r7, r3
   133a2:	781b      	ldrb	r3, [r3, #0]
   133a4:	411a      	asrs	r2, r3
   133a6:	0013      	movs	r3, r2
   133a8:	2201      	movs	r2, #1
   133aa:	4013      	ands	r3, r2
   133ac:	d019      	beq.n	133e2 <glcd_draw_char_xy+0x4ee>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   133ae:	1dfa      	adds	r2, r7, #7
   133b0:	231c      	movs	r3, #28
   133b2:	18fb      	adds	r3, r7, r3
   133b4:	7812      	ldrb	r2, [r2, #0]
   133b6:	781b      	ldrb	r3, [r3, #0]
   133b8:	18d3      	adds	r3, r2, r3
   133ba:	b2d8      	uxtb	r0, r3
   133bc:	231f      	movs	r3, #31
   133be:	18fb      	adds	r3, r7, r3
   133c0:	781b      	ldrb	r3, [r3, #0]
   133c2:	00db      	lsls	r3, r3, #3
   133c4:	b2da      	uxtb	r2, r3
   133c6:	1dbb      	adds	r3, r7, #6
   133c8:	781b      	ldrb	r3, [r3, #0]
   133ca:	18d3      	adds	r3, r2, r3
   133cc:	b2da      	uxtb	r2, r3
   133ce:	231b      	movs	r3, #27
   133d0:	18fb      	adds	r3, r7, r3
   133d2:	781b      	ldrb	r3, [r3, #0]
   133d4:	18d3      	adds	r3, r2, r3
   133d6:	b2db      	uxtb	r3, r3
   133d8:	2201      	movs	r2, #1
   133da:	0019      	movs	r1, r3
   133dc:	4b2a      	ldr	r3, [pc, #168]	; (13488 <glcd_draw_char_xy+0x594>)
   133de:	4798      	blx	r3
   133e0:	e01a      	b.n	13418 <glcd_draw_char_xy+0x524>
					} else {
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   133e2:	1dfa      	adds	r2, r7, #7
   133e4:	231c      	movs	r3, #28
   133e6:	18fb      	adds	r3, r7, r3
   133e8:	7812      	ldrb	r2, [r2, #0]
   133ea:	781b      	ldrb	r3, [r3, #0]
   133ec:	18d3      	adds	r3, r2, r3
   133ee:	b2d8      	uxtb	r0, r3
   133f0:	231f      	movs	r3, #31
   133f2:	18fb      	adds	r3, r7, r3
   133f4:	781b      	ldrb	r3, [r3, #0]
   133f6:	00db      	lsls	r3, r3, #3
   133f8:	b2da      	uxtb	r2, r3
   133fa:	1dbb      	adds	r3, r7, #6
   133fc:	781b      	ldrb	r3, [r3, #0]
   133fe:	18d3      	adds	r3, r2, r3
   13400:	b2da      	uxtb	r2, r3
   13402:	231b      	movs	r3, #27
   13404:	18fb      	adds	r3, r7, r3
   13406:	781b      	ldrb	r3, [r3, #0]
   13408:	18d3      	adds	r3, r2, r3
   1340a:	b2db      	uxtb	r3, r3
   1340c:	2200      	movs	r2, #0
   1340e:	0019      	movs	r1, r3
   13410:	4b1d      	ldr	r3, [pc, #116]	; (13488 <glcd_draw_char_xy+0x594>)
   13412:	4798      	blx	r3
   13414:	e000      	b.n	13418 <glcd_draw_char_xy+0x524>
						continue;
   13416:	46c0      	nop			; (mov r8, r8)
				for (bit = 0; bit < 8; bit++) {
   13418:	231b      	movs	r3, #27
   1341a:	18fb      	adds	r3, r7, r3
   1341c:	781a      	ldrb	r2, [r3, #0]
   1341e:	231b      	movs	r3, #27
   13420:	18fb      	adds	r3, r7, r3
   13422:	3201      	adds	r2, #1
   13424:	701a      	strb	r2, [r3, #0]
   13426:	231b      	movs	r3, #27
   13428:	18fb      	adds	r3, r7, r3
   1342a:	781b      	ldrb	r3, [r3, #0]
   1342c:	2b07      	cmp	r3, #7
   1342e:	d990      	bls.n	13352 <glcd_draw_char_xy+0x45e>
			for ( i = 0; i < var_width; i++ ) {
   13430:	231c      	movs	r3, #28
   13432:	18fb      	adds	r3, r7, r3
   13434:	781a      	ldrb	r2, [r3, #0]
   13436:	231c      	movs	r3, #28
   13438:	18fb      	adds	r3, r7, r3
   1343a:	3201      	adds	r2, #1
   1343c:	701a      	strb	r2, [r3, #0]
   1343e:	231c      	movs	r3, #28
   13440:	18fa      	adds	r2, r7, r3
   13442:	2321      	movs	r3, #33	; 0x21
   13444:	18fb      	adds	r3, r7, r3
   13446:	7812      	ldrb	r2, [r2, #0]
   13448:	781b      	ldrb	r3, [r3, #0]
   1344a:	429a      	cmp	r2, r3
   1344c:	d200      	bcs.n	13450 <glcd_draw_char_xy+0x55c>
   1344e:	e76a      	b.n	13326 <glcd_draw_char_xy+0x432>
		for ( j = 0; j < bytes_high; j++ ) {
   13450:	231f      	movs	r3, #31
   13452:	18fb      	adds	r3, r7, r3
   13454:	781a      	ldrb	r2, [r3, #0]
   13456:	231f      	movs	r3, #31
   13458:	18fb      	adds	r3, r7, r3
   1345a:	3201      	adds	r2, #1
   1345c:	701a      	strb	r2, [r3, #0]
   1345e:	231f      	movs	r3, #31
   13460:	18fa      	adds	r2, r7, r3
   13462:	2311      	movs	r3, #17
   13464:	18fb      	adds	r3, r7, r3
   13466:	7812      	ldrb	r2, [r2, #0]
   13468:	781b      	ldrb	r3, [r3, #0]
   1346a:	429a      	cmp	r2, r3
   1346c:	d200      	bcs.n	13470 <glcd_draw_char_xy+0x57c>
   1346e:	e755      	b.n	1331c <glcd_draw_char_xy+0x428>
					}
				}									
			} /* i */
		} /* j */
		
		return var_width; /* Number of columns written to display */
   13470:	2321      	movs	r3, #33	; 0x21
   13472:	18fb      	adds	r3, r7, r3
   13474:	781b      	ldrb	r3, [r3, #0]
   13476:	e000      	b.n	1347a <glcd_draw_char_xy+0x586>
		
	} else {
		/* Don't recognise the font table */
		return 0;
   13478:	2300      	movs	r3, #0
		
	}

}
   1347a:	0018      	movs	r0, r3
   1347c:	46bd      	mov	sp, r7
   1347e:	b00b      	add	sp, #44	; 0x2c
   13480:	bd90      	pop	{r4, r7, pc}
   13482:	46c0      	nop			; (mov r8, r8)
   13484:	20001658 	.word	0x20001658
   13488:	00012601 	.word	0x00012601

0001348c <glcd_draw_string_xy>:

void glcd_draw_string_xy(uint8_t x, uint8_t y, char *c)
{
   1348c:	b590      	push	{r4, r7, lr}
   1348e:	b085      	sub	sp, #20
   13490:	af00      	add	r7, sp, #0
   13492:	603a      	str	r2, [r7, #0]
   13494:	1dfb      	adds	r3, r7, #7
   13496:	1c02      	adds	r2, r0, #0
   13498:	701a      	strb	r2, [r3, #0]
   1349a:	1dbb      	adds	r3, r7, #6
   1349c:	1c0a      	adds	r2, r1, #0
   1349e:	701a      	strb	r2, [r3, #0]
	uint8_t width;

	if (y > (GLCD_LCD_HEIGHT - font_current.height - 1)) {
   134a0:	1dbb      	adds	r3, r7, #6
   134a2:	781a      	ldrb	r2, [r3, #0]
   134a4:	4b15      	ldr	r3, [pc, #84]	; (134fc <glcd_draw_string_xy+0x70>)
   134a6:	795b      	ldrb	r3, [r3, #5]
   134a8:	0019      	movs	r1, r3
   134aa:	233f      	movs	r3, #63	; 0x3f
   134ac:	1a5b      	subs	r3, r3, r1
   134ae:	429a      	cmp	r2, r3
   134b0:	dc1f      	bgt.n	134f2 <glcd_draw_string_xy+0x66>
		/* Character won't fit */
		return;
	}

	while (*c) {
   134b2:	e019      	b.n	134e8 <glcd_draw_string_xy+0x5c>
		width = glcd_draw_char_xy(x,y,*c);
   134b4:	683b      	ldr	r3, [r7, #0]
   134b6:	781a      	ldrb	r2, [r3, #0]
   134b8:	230f      	movs	r3, #15
   134ba:	18fc      	adds	r4, r7, r3
   134bc:	1dbb      	adds	r3, r7, #6
   134be:	7819      	ldrb	r1, [r3, #0]
   134c0:	1dfb      	adds	r3, r7, #7
   134c2:	781b      	ldrb	r3, [r3, #0]
   134c4:	0018      	movs	r0, r3
   134c6:	4b0e      	ldr	r3, [pc, #56]	; (13500 <glcd_draw_string_xy+0x74>)
   134c8:	4798      	blx	r3
   134ca:	0003      	movs	r3, r0
   134cc:	7023      	strb	r3, [r4, #0]
		x += (width + 1);
   134ce:	230f      	movs	r3, #15
   134d0:	18fa      	adds	r2, r7, r3
   134d2:	1dfb      	adds	r3, r7, #7
   134d4:	7812      	ldrb	r2, [r2, #0]
   134d6:	781b      	ldrb	r3, [r3, #0]
   134d8:	18d3      	adds	r3, r2, r3
   134da:	b2da      	uxtb	r2, r3
   134dc:	1dfb      	adds	r3, r7, #7
   134de:	3201      	adds	r2, #1
   134e0:	701a      	strb	r2, [r3, #0]
		c++;
   134e2:	683b      	ldr	r3, [r7, #0]
   134e4:	3301      	adds	r3, #1
   134e6:	603b      	str	r3, [r7, #0]
	while (*c) {
   134e8:	683b      	ldr	r3, [r7, #0]
   134ea:	781b      	ldrb	r3, [r3, #0]
   134ec:	2b00      	cmp	r3, #0
   134ee:	d1e1      	bne.n	134b4 <glcd_draw_string_xy+0x28>
   134f0:	e000      	b.n	134f4 <glcd_draw_string_xy+0x68>
		return;
   134f2:	46c0      	nop			; (mov r8, r8)
	}		
}
   134f4:	46bd      	mov	sp, r7
   134f6:	b005      	add	sp, #20
   134f8:	bd90      	pop	{r4, r7, pc}
   134fa:	46c0      	nop			; (mov r8, r8)
   134fc:	20001658 	.word	0x20001658
   13500:	00012ef5 	.word	0x00012ef5

00013504 <glcd_tiny_set_font>:
#if defined(GLCD_DEVICE_AVR8)
void glcd_tiny_set_font(PGM_P font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#else
void glcd_tiny_set_font(const char * font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#endif
{
   13504:	b590      	push	{r4, r7, lr}
   13506:	b083      	sub	sp, #12
   13508:	af00      	add	r7, sp, #0
   1350a:	6078      	str	r0, [r7, #4]
   1350c:	000c      	movs	r4, r1
   1350e:	0010      	movs	r0, r2
   13510:	0019      	movs	r1, r3
   13512:	1cfb      	adds	r3, r7, #3
   13514:	1c22      	adds	r2, r4, #0
   13516:	701a      	strb	r2, [r3, #0]
   13518:	1cbb      	adds	r3, r7, #2
   1351a:	1c02      	adds	r2, r0, #0
   1351c:	701a      	strb	r2, [r3, #0]
   1351e:	1c7b      	adds	r3, r7, #1
   13520:	1c0a      	adds	r2, r1, #0
   13522:	701a      	strb	r2, [r3, #0]
	font_current.font_table = font_table;
   13524:	4b0d      	ldr	r3, [pc, #52]	; (1355c <glcd_tiny_set_font+0x58>)
   13526:	687a      	ldr	r2, [r7, #4]
   13528:	601a      	str	r2, [r3, #0]
	font_current.width = width;
   1352a:	4b0c      	ldr	r3, [pc, #48]	; (1355c <glcd_tiny_set_font+0x58>)
   1352c:	1cfa      	adds	r2, r7, #3
   1352e:	7812      	ldrb	r2, [r2, #0]
   13530:	711a      	strb	r2, [r3, #4]
	font_current.height = height;
   13532:	4b0a      	ldr	r3, [pc, #40]	; (1355c <glcd_tiny_set_font+0x58>)
   13534:	1cba      	adds	r2, r7, #2
   13536:	7812      	ldrb	r2, [r2, #0]
   13538:	715a      	strb	r2, [r3, #5]
	font_current.start_char = start_char;
   1353a:	4b08      	ldr	r3, [pc, #32]	; (1355c <glcd_tiny_set_font+0x58>)
   1353c:	1c7a      	adds	r2, r7, #1
   1353e:	7812      	ldrb	r2, [r2, #0]
   13540:	719a      	strb	r2, [r3, #6]
	font_current.end_char = end_char;
   13542:	4b06      	ldr	r3, [pc, #24]	; (1355c <glcd_tiny_set_font+0x58>)
   13544:	2218      	movs	r2, #24
   13546:	18ba      	adds	r2, r7, r2
   13548:	7812      	ldrb	r2, [r2, #0]
   1354a:	71da      	strb	r2, [r3, #7]
	font_current.table_type = STANG;
   1354c:	4b03      	ldr	r3, [pc, #12]	; (1355c <glcd_tiny_set_font+0x58>)
   1354e:	2200      	movs	r2, #0
   13550:	721a      	strb	r2, [r3, #8]
}
   13552:	46c0      	nop			; (mov r8, r8)
   13554:	46bd      	mov	sp, r7
   13556:	b003      	add	sp, #12
   13558:	bd90      	pop	{r4, r7, pc}
   1355a:	46c0      	nop			; (mov r8, r8)
   1355c:	20001658 	.word	0x20001658

00013560 <glcd_tiny_draw_char>:

void glcd_tiny_draw_char(uint8_t x, uint8_t line, char c)
{
   13560:	b590      	push	{r4, r7, lr}
   13562:	b085      	sub	sp, #20
   13564:	af00      	add	r7, sp, #0
   13566:	0004      	movs	r4, r0
   13568:	0008      	movs	r0, r1
   1356a:	0011      	movs	r1, r2
   1356c:	1dfb      	adds	r3, r7, #7
   1356e:	1c22      	adds	r2, r4, #0
   13570:	701a      	strb	r2, [r3, #0]
   13572:	1dbb      	adds	r3, r7, #6
   13574:	1c02      	adds	r2, r0, #0
   13576:	701a      	strb	r2, [r3, #0]
   13578:	1d7b      	adds	r3, r7, #5
   1357a:	1c0a      	adds	r2, r1, #0
   1357c:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	
	/* Only works for fonts < 8 bits in height */
	if (font_current.height >= 8) {
   1357e:	4b40      	ldr	r3, [pc, #256]	; (13680 <glcd_tiny_draw_char+0x120>)
   13580:	795b      	ldrb	r3, [r3, #5]
   13582:	2b07      	cmp	r3, #7
   13584:	d873      	bhi.n	1366e <glcd_tiny_draw_char+0x10e>
		return;
	}
	if (c < font_current.start_char || c > font_current.end_char) {
   13586:	4b3e      	ldr	r3, [pc, #248]	; (13680 <glcd_tiny_draw_char+0x120>)
   13588:	799b      	ldrb	r3, [r3, #6]
   1358a:	1d7a      	adds	r2, r7, #5
   1358c:	7812      	ldrb	r2, [r2, #0]
   1358e:	429a      	cmp	r2, r3
   13590:	d305      	bcc.n	1359e <glcd_tiny_draw_char+0x3e>
   13592:	4b3b      	ldr	r3, [pc, #236]	; (13680 <glcd_tiny_draw_char+0x120>)
   13594:	79db      	ldrb	r3, [r3, #7]
   13596:	1d7a      	adds	r2, r7, #5
   13598:	7812      	ldrb	r2, [r2, #0]
   1359a:	429a      	cmp	r2, r3
   1359c:	d902      	bls.n	135a4 <glcd_tiny_draw_char+0x44>
		c = '.';
   1359e:	1d7b      	adds	r3, r7, #5
   135a0:	222e      	movs	r2, #46	; 0x2e
   135a2:	701a      	strb	r2, [r3, #0]
	}
	if ( line >= GLCD_LCD_HEIGHT / (font_current.height + 1) ) {
   135a4:	1dbb      	adds	r3, r7, #6
   135a6:	781c      	ldrb	r4, [r3, #0]
   135a8:	4b35      	ldr	r3, [pc, #212]	; (13680 <glcd_tiny_draw_char+0x120>)
   135aa:	795b      	ldrb	r3, [r3, #5]
   135ac:	1c5a      	adds	r2, r3, #1
   135ae:	4b35      	ldr	r3, [pc, #212]	; (13684 <glcd_tiny_draw_char+0x124>)
   135b0:	0011      	movs	r1, r2
   135b2:	2040      	movs	r0, #64	; 0x40
   135b4:	4798      	blx	r3
   135b6:	0003      	movs	r3, r0
   135b8:	429c      	cmp	r4, r3
   135ba:	da5a      	bge.n	13672 <glcd_tiny_draw_char+0x112>
		return;
	}		
	if ( (x+font_current.width) >= GLCD_LCD_WIDTH ) {
   135bc:	1dfb      	adds	r3, r7, #7
   135be:	781b      	ldrb	r3, [r3, #0]
   135c0:	4a2f      	ldr	r2, [pc, #188]	; (13680 <glcd_tiny_draw_char+0x120>)
   135c2:	7912      	ldrb	r2, [r2, #4]
   135c4:	189b      	adds	r3, r3, r2
   135c6:	2b7f      	cmp	r3, #127	; 0x7f
   135c8:	dc55      	bgt.n	13676 <glcd_tiny_draw_char+0x116>
		return;
	}		
	
	glcd_update_bbox(x, line*(font_current.height + 1), x+font_current.width, line*(font_current.height + 1) + (font_current.height + 1));
   135ca:	4b2d      	ldr	r3, [pc, #180]	; (13680 <glcd_tiny_draw_char+0x120>)
   135cc:	795b      	ldrb	r3, [r3, #5]
   135ce:	3301      	adds	r3, #1
   135d0:	b2db      	uxtb	r3, r3
   135d2:	1dba      	adds	r2, r7, #6
   135d4:	7812      	ldrb	r2, [r2, #0]
   135d6:	4353      	muls	r3, r2
   135d8:	b2d9      	uxtb	r1, r3
   135da:	4b29      	ldr	r3, [pc, #164]	; (13680 <glcd_tiny_draw_char+0x120>)
   135dc:	791a      	ldrb	r2, [r3, #4]
   135de:	1dfb      	adds	r3, r7, #7
   135e0:	781b      	ldrb	r3, [r3, #0]
   135e2:	18d3      	adds	r3, r2, r3
   135e4:	b2dc      	uxtb	r4, r3
   135e6:	1dbb      	adds	r3, r7, #6
   135e8:	781b      	ldrb	r3, [r3, #0]
   135ea:	3301      	adds	r3, #1
   135ec:	b2db      	uxtb	r3, r3
   135ee:	4a24      	ldr	r2, [pc, #144]	; (13680 <glcd_tiny_draw_char+0x120>)
   135f0:	7952      	ldrb	r2, [r2, #5]
   135f2:	3201      	adds	r2, #1
   135f4:	b2d2      	uxtb	r2, r2
   135f6:	4353      	muls	r3, r2
   135f8:	b2da      	uxtb	r2, r3
   135fa:	1dfb      	adds	r3, r7, #7
   135fc:	7818      	ldrb	r0, [r3, #0]
   135fe:	0013      	movs	r3, r2
   13600:	0022      	movs	r2, r4
   13602:	4c21      	ldr	r4, [pc, #132]	; (13688 <glcd_tiny_draw_char+0x128>)
   13604:	47a0      	blx	r4
	
	for ( i = 0; i < font_current.width; i++ ) {
   13606:	230f      	movs	r3, #15
   13608:	18fb      	adds	r3, r7, r3
   1360a:	2200      	movs	r2, #0
   1360c:	701a      	strb	r2, [r3, #0]
   1360e:	e026      	b.n	1365e <glcd_tiny_draw_char+0xfe>
#if defined(GLCD_DEVICE_AVR8)		
		glcd_buffer_selected[x + (line * GLCD_LCD_WIDTH)] = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#else
		glcd_buffer_selected[x + (line * GLCD_LCD_WIDTH)] = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
   13610:	4b1e      	ldr	r3, [pc, #120]	; (1368c <glcd_tiny_draw_char+0x12c>)
   13612:	681b      	ldr	r3, [r3, #0]
   13614:	1dfa      	adds	r2, r7, #7
   13616:	7811      	ldrb	r1, [r2, #0]
   13618:	1dba      	adds	r2, r7, #6
   1361a:	7812      	ldrb	r2, [r2, #0]
   1361c:	01d2      	lsls	r2, r2, #7
   1361e:	188a      	adds	r2, r1, r2
   13620:	189a      	adds	r2, r3, r2
   13622:	4b17      	ldr	r3, [pc, #92]	; (13680 <glcd_tiny_draw_char+0x120>)
   13624:	6819      	ldr	r1, [r3, #0]
   13626:	1d7b      	adds	r3, r7, #5
   13628:	781b      	ldrb	r3, [r3, #0]
   1362a:	4815      	ldr	r0, [pc, #84]	; (13680 <glcd_tiny_draw_char+0x120>)
   1362c:	7980      	ldrb	r0, [r0, #6]
   1362e:	1a1b      	subs	r3, r3, r0
   13630:	4813      	ldr	r0, [pc, #76]	; (13680 <glcd_tiny_draw_char+0x120>)
   13632:	7900      	ldrb	r0, [r0, #4]
   13634:	4343      	muls	r3, r0
   13636:	0018      	movs	r0, r3
   13638:	230f      	movs	r3, #15
   1363a:	18fb      	adds	r3, r7, r3
   1363c:	781b      	ldrb	r3, [r3, #0]
   1363e:	18c3      	adds	r3, r0, r3
   13640:	18cb      	adds	r3, r1, r3
   13642:	781b      	ldrb	r3, [r3, #0]
   13644:	7013      	strb	r3, [r2, #0]
#endif
		x++;
   13646:	1dfb      	adds	r3, r7, #7
   13648:	781a      	ldrb	r2, [r3, #0]
   1364a:	1dfb      	adds	r3, r7, #7
   1364c:	3201      	adds	r2, #1
   1364e:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < font_current.width; i++ ) {
   13650:	230f      	movs	r3, #15
   13652:	18fb      	adds	r3, r7, r3
   13654:	781a      	ldrb	r2, [r3, #0]
   13656:	230f      	movs	r3, #15
   13658:	18fb      	adds	r3, r7, r3
   1365a:	3201      	adds	r2, #1
   1365c:	701a      	strb	r2, [r3, #0]
   1365e:	4b08      	ldr	r3, [pc, #32]	; (13680 <glcd_tiny_draw_char+0x120>)
   13660:	791b      	ldrb	r3, [r3, #4]
   13662:	220f      	movs	r2, #15
   13664:	18ba      	adds	r2, r7, r2
   13666:	7812      	ldrb	r2, [r2, #0]
   13668:	429a      	cmp	r2, r3
   1366a:	d3d1      	bcc.n	13610 <glcd_tiny_draw_char+0xb0>
   1366c:	e004      	b.n	13678 <glcd_tiny_draw_char+0x118>
		return;
   1366e:	46c0      	nop			; (mov r8, r8)
   13670:	e002      	b.n	13678 <glcd_tiny_draw_char+0x118>
		return;
   13672:	46c0      	nop			; (mov r8, r8)
   13674:	e000      	b.n	13678 <glcd_tiny_draw_char+0x118>
		return;
   13676:	46c0      	nop			; (mov r8, r8)
	}
}
   13678:	46bd      	mov	sp, r7
   1367a:	b005      	add	sp, #20
   1367c:	bd90      	pop	{r4, r7, pc}
   1367e:	46c0      	nop			; (mov r8, r8)
   13680:	20001658 	.word	0x20001658
   13684:	0001e05d 	.word	0x0001e05d
   13688:	000124a5 	.word	0x000124a5
   1368c:	20001650 	.word	0x20001650

00013690 <glcd_tiny_draw_string>:

void glcd_tiny_draw_string(uint8_t x, uint8_t line, char *str)
{
   13690:	b590      	push	{r4, r7, lr}
   13692:	b083      	sub	sp, #12
   13694:	af00      	add	r7, sp, #0
   13696:	603a      	str	r2, [r7, #0]
   13698:	1dfb      	adds	r3, r7, #7
   1369a:	1c02      	adds	r2, r0, #0
   1369c:	701a      	strb	r2, [r3, #0]
   1369e:	1dbb      	adds	r3, r7, #6
   136a0:	1c0a      	adds	r2, r1, #0
   136a2:	701a      	strb	r2, [r3, #0]
	if (font_current.height >= 8) {
   136a4:	4b1f      	ldr	r3, [pc, #124]	; (13724 <glcd_tiny_draw_string+0x94>)
   136a6:	795b      	ldrb	r3, [r3, #5]
   136a8:	2b07      	cmp	r3, #7
   136aa:	d835      	bhi.n	13718 <glcd_tiny_draw_string+0x88>
		return;
	}
	while (*str) {
   136ac:	e02f      	b.n	1370e <glcd_tiny_draw_string+0x7e>
		glcd_tiny_draw_char(x, line, *str++);
   136ae:	683b      	ldr	r3, [r7, #0]
   136b0:	1c5a      	adds	r2, r3, #1
   136b2:	603a      	str	r2, [r7, #0]
   136b4:	781a      	ldrb	r2, [r3, #0]
   136b6:	1dbb      	adds	r3, r7, #6
   136b8:	7819      	ldrb	r1, [r3, #0]
   136ba:	1dfb      	adds	r3, r7, #7
   136bc:	781b      	ldrb	r3, [r3, #0]
   136be:	0018      	movs	r0, r3
   136c0:	4b19      	ldr	r3, [pc, #100]	; (13728 <glcd_tiny_draw_string+0x98>)
   136c2:	4798      	blx	r3
		x += (font_current.width + 1);
   136c4:	4b17      	ldr	r3, [pc, #92]	; (13724 <glcd_tiny_draw_string+0x94>)
   136c6:	791a      	ldrb	r2, [r3, #4]
   136c8:	1dfb      	adds	r3, r7, #7
   136ca:	781b      	ldrb	r3, [r3, #0]
   136cc:	18d3      	adds	r3, r2, r3
   136ce:	b2da      	uxtb	r2, r3
   136d0:	1dfb      	adds	r3, r7, #7
   136d2:	3201      	adds	r2, #1
   136d4:	701a      	strb	r2, [r3, #0]
		if ((x + font_current.width + 1) > GLCD_LCD_WIDTH) {
   136d6:	1dfb      	adds	r3, r7, #7
   136d8:	781b      	ldrb	r3, [r3, #0]
   136da:	4a12      	ldr	r2, [pc, #72]	; (13724 <glcd_tiny_draw_string+0x94>)
   136dc:	7912      	ldrb	r2, [r2, #4]
   136de:	189b      	adds	r3, r3, r2
   136e0:	3301      	adds	r3, #1
   136e2:	2b80      	cmp	r3, #128	; 0x80
   136e4:	dd07      	ble.n	136f6 <glcd_tiny_draw_string+0x66>
			x = 0; /* Ran out of this line */
   136e6:	1dfb      	adds	r3, r7, #7
   136e8:	2200      	movs	r2, #0
   136ea:	701a      	strb	r2, [r3, #0]
			line++;
   136ec:	1dbb      	adds	r3, r7, #6
   136ee:	781a      	ldrb	r2, [r3, #0]
   136f0:	1dbb      	adds	r3, r7, #6
   136f2:	3201      	adds	r2, #1
   136f4:	701a      	strb	r2, [r3, #0]
		}
		if (line >= (GLCD_LCD_HEIGHT/(font_current.height + 1)))
   136f6:	1dbb      	adds	r3, r7, #6
   136f8:	781c      	ldrb	r4, [r3, #0]
   136fa:	4b0a      	ldr	r3, [pc, #40]	; (13724 <glcd_tiny_draw_string+0x94>)
   136fc:	795b      	ldrb	r3, [r3, #5]
   136fe:	1c5a      	adds	r2, r3, #1
   13700:	4b0a      	ldr	r3, [pc, #40]	; (1372c <glcd_tiny_draw_string+0x9c>)
   13702:	0011      	movs	r1, r2
   13704:	2040      	movs	r0, #64	; 0x40
   13706:	4798      	blx	r3
   13708:	0003      	movs	r3, r0
   1370a:	429c      	cmp	r4, r3
   1370c:	da06      	bge.n	1371c <glcd_tiny_draw_string+0x8c>
	while (*str) {
   1370e:	683b      	ldr	r3, [r7, #0]
   13710:	781b      	ldrb	r3, [r3, #0]
   13712:	2b00      	cmp	r3, #0
   13714:	d1cb      	bne.n	136ae <glcd_tiny_draw_string+0x1e>
   13716:	e002      	b.n	1371e <glcd_tiny_draw_string+0x8e>
		return;
   13718:	46c0      	nop			; (mov r8, r8)
   1371a:	e000      	b.n	1371e <glcd_tiny_draw_string+0x8e>
			return; /* Ran out of space :( */
   1371c:	46c0      	nop			; (mov r8, r8)
	}
}
   1371e:	46bd      	mov	sp, r7
   13720:	b003      	add	sp, #12
   13722:	bd90      	pop	{r4, r7, pc}
   13724:	20001658 	.word	0x20001658
   13728:	00013561 	.word	0x00013561
   1372c:	0001e05d 	.word	0x0001e05d

00013730 <system_gclk_chan_get_config_defaults>:
{
   13730:	b580      	push	{r7, lr}
   13732:	b082      	sub	sp, #8
   13734:	af00      	add	r7, sp, #0
   13736:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   13738:	687b      	ldr	r3, [r7, #4]
   1373a:	2200      	movs	r2, #0
   1373c:	701a      	strb	r2, [r3, #0]
}
   1373e:	46c0      	nop			; (mov r8, r8)
   13740:	46bd      	mov	sp, r7
   13742:	b002      	add	sp, #8
   13744:	bd80      	pop	{r7, pc}
	...

00013748 <system_apb_clock_set_mask>:
{
   13748:	b580      	push	{r7, lr}
   1374a:	b082      	sub	sp, #8
   1374c:	af00      	add	r7, sp, #0
   1374e:	0002      	movs	r2, r0
   13750:	6039      	str	r1, [r7, #0]
   13752:	1dfb      	adds	r3, r7, #7
   13754:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   13756:	1dfb      	adds	r3, r7, #7
   13758:	781b      	ldrb	r3, [r3, #0]
   1375a:	2b04      	cmp	r3, #4
   1375c:	d827      	bhi.n	137ae <system_apb_clock_set_mask+0x66>
   1375e:	009a      	lsls	r2, r3, #2
   13760:	4b16      	ldr	r3, [pc, #88]	; (137bc <system_apb_clock_set_mask+0x74>)
   13762:	18d3      	adds	r3, r2, r3
   13764:	681b      	ldr	r3, [r3, #0]
   13766:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
   13768:	4b15      	ldr	r3, [pc, #84]	; (137c0 <system_apb_clock_set_mask+0x78>)
   1376a:	4a15      	ldr	r2, [pc, #84]	; (137c0 <system_apb_clock_set_mask+0x78>)
   1376c:	6951      	ldr	r1, [r2, #20]
   1376e:	683a      	ldr	r2, [r7, #0]
   13770:	430a      	orrs	r2, r1
   13772:	615a      	str	r2, [r3, #20]
			break;
   13774:	e01d      	b.n	137b2 <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
   13776:	4b12      	ldr	r3, [pc, #72]	; (137c0 <system_apb_clock_set_mask+0x78>)
   13778:	4a11      	ldr	r2, [pc, #68]	; (137c0 <system_apb_clock_set_mask+0x78>)
   1377a:	6991      	ldr	r1, [r2, #24]
   1377c:	683a      	ldr	r2, [r7, #0]
   1377e:	430a      	orrs	r2, r1
   13780:	619a      	str	r2, [r3, #24]
			break;
   13782:	e016      	b.n	137b2 <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
   13784:	4b0e      	ldr	r3, [pc, #56]	; (137c0 <system_apb_clock_set_mask+0x78>)
   13786:	4a0e      	ldr	r2, [pc, #56]	; (137c0 <system_apb_clock_set_mask+0x78>)
   13788:	69d1      	ldr	r1, [r2, #28]
   1378a:	683a      	ldr	r2, [r7, #0]
   1378c:	430a      	orrs	r2, r1
   1378e:	61da      	str	r2, [r3, #28]
			break;
   13790:	e00f      	b.n	137b2 <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
   13792:	4b0b      	ldr	r3, [pc, #44]	; (137c0 <system_apb_clock_set_mask+0x78>)
   13794:	4a0a      	ldr	r2, [pc, #40]	; (137c0 <system_apb_clock_set_mask+0x78>)
   13796:	6a11      	ldr	r1, [r2, #32]
   13798:	683a      	ldr	r2, [r7, #0]
   1379a:	430a      	orrs	r2, r1
   1379c:	621a      	str	r2, [r3, #32]
			break;
   1379e:	e008      	b.n	137b2 <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
   137a0:	4b07      	ldr	r3, [pc, #28]	; (137c0 <system_apb_clock_set_mask+0x78>)
   137a2:	4a07      	ldr	r2, [pc, #28]	; (137c0 <system_apb_clock_set_mask+0x78>)
   137a4:	6a51      	ldr	r1, [r2, #36]	; 0x24
   137a6:	683a      	ldr	r2, [r7, #0]
   137a8:	430a      	orrs	r2, r1
   137aa:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   137ac:	e001      	b.n	137b2 <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
   137ae:	2317      	movs	r3, #23
   137b0:	e000      	b.n	137b4 <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
   137b2:	2300      	movs	r3, #0
}
   137b4:	0018      	movs	r0, r3
   137b6:	46bd      	mov	sp, r7
   137b8:	b002      	add	sp, #8
   137ba:	bd80      	pop	{r7, pc}
   137bc:	00025d10 	.word	0x00025d10
   137c0:	40000400 	.word	0x40000400

000137c4 <system_pinmux_get_config_defaults>:
{
   137c4:	b580      	push	{r7, lr}
   137c6:	b082      	sub	sp, #8
   137c8:	af00      	add	r7, sp, #0
   137ca:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   137cc:	687b      	ldr	r3, [r7, #4]
   137ce:	2280      	movs	r2, #128	; 0x80
   137d0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   137d2:	687b      	ldr	r3, [r7, #4]
   137d4:	2200      	movs	r2, #0
   137d6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   137d8:	687b      	ldr	r3, [r7, #4]
   137da:	2201      	movs	r2, #1
   137dc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   137de:	687b      	ldr	r3, [r7, #4]
   137e0:	2200      	movs	r2, #0
   137e2:	70da      	strb	r2, [r3, #3]
}
   137e4:	46c0      	nop			; (mov r8, r8)
   137e6:	46bd      	mov	sp, r7
   137e8:	b002      	add	sp, #8
   137ea:	bd80      	pop	{r7, pc}

000137ec <system_is_debugger_present>:
{
   137ec:	b580      	push	{r7, lr}
   137ee:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   137f0:	4b05      	ldr	r3, [pc, #20]	; (13808 <system_is_debugger_present+0x1c>)
   137f2:	789b      	ldrb	r3, [r3, #2]
   137f4:	b2db      	uxtb	r3, r3
   137f6:	001a      	movs	r2, r3
   137f8:	2302      	movs	r3, #2
   137fa:	4013      	ands	r3, r2
   137fc:	1e5a      	subs	r2, r3, #1
   137fe:	4193      	sbcs	r3, r2
   13800:	b2db      	uxtb	r3, r3
}
   13802:	0018      	movs	r0, r3
   13804:	46bd      	mov	sp, r7
   13806:	bd80      	pop	{r7, pc}
   13808:	41002000 	.word	0x41002000

0001380c <usart_is_syncing>:
{
   1380c:	b580      	push	{r7, lr}
   1380e:	b084      	sub	sp, #16
   13810:	af00      	add	r7, sp, #0
   13812:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   13814:	687b      	ldr	r3, [r7, #4]
   13816:	681b      	ldr	r3, [r3, #0]
   13818:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   1381a:	68fb      	ldr	r3, [r7, #12]
   1381c:	69db      	ldr	r3, [r3, #28]
   1381e:	1e5a      	subs	r2, r3, #1
   13820:	4193      	sbcs	r3, r2
   13822:	b2db      	uxtb	r3, r3
}
   13824:	0018      	movs	r0, r3
   13826:	46bd      	mov	sp, r7
   13828:	b004      	add	sp, #16
   1382a:	bd80      	pop	{r7, pc}

0001382c <_usart_wait_for_sync>:
{
   1382c:	b580      	push	{r7, lr}
   1382e:	b082      	sub	sp, #8
   13830:	af00      	add	r7, sp, #0
   13832:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   13834:	46c0      	nop			; (mov r8, r8)
   13836:	687b      	ldr	r3, [r7, #4]
   13838:	0018      	movs	r0, r3
   1383a:	4b04      	ldr	r3, [pc, #16]	; (1384c <_usart_wait_for_sync+0x20>)
   1383c:	4798      	blx	r3
   1383e:	1e03      	subs	r3, r0, #0
   13840:	d1f9      	bne.n	13836 <_usart_wait_for_sync+0xa>
}
   13842:	46c0      	nop			; (mov r8, r8)
   13844:	46bd      	mov	sp, r7
   13846:	b002      	add	sp, #8
   13848:	bd80      	pop	{r7, pc}
   1384a:	46c0      	nop			; (mov r8, r8)
   1384c:	0001380d 	.word	0x0001380d

00013850 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   13850:	b5b0      	push	{r4, r5, r7, lr}
   13852:	b08c      	sub	sp, #48	; 0x30
   13854:	af02      	add	r7, sp, #8
   13856:	6078      	str	r0, [r7, #4]
   13858:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1385a:	687b      	ldr	r3, [r7, #4]
   1385c:	681b      	ldr	r3, [r3, #0]
   1385e:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   13860:	687b      	ldr	r3, [r7, #4]
   13862:	681b      	ldr	r3, [r3, #0]
   13864:	0018      	movs	r0, r3
   13866:	4bab      	ldr	r3, [pc, #684]	; (13b14 <_usart_set_config+0x2c4>)
   13868:	4798      	blx	r3
   1386a:	0003      	movs	r3, r0
   1386c:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   1386e:	697b      	ldr	r3, [r7, #20]
   13870:	3312      	adds	r3, #18
   13872:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   13874:	2300      	movs	r3, #0
   13876:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   13878:	2300      	movs	r3, #0
   1387a:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   1387c:	230a      	movs	r3, #10
   1387e:	18fb      	adds	r3, r7, r3
   13880:	2200      	movs	r2, #0
   13882:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   13884:	231f      	movs	r3, #31
   13886:	18fb      	adds	r3, r7, r3
   13888:	2200      	movs	r2, #0
   1388a:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   1388c:	231e      	movs	r3, #30
   1388e:	18fb      	adds	r3, r7, r3
   13890:	2210      	movs	r2, #16
   13892:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   13894:	683b      	ldr	r3, [r7, #0]
   13896:	8a1b      	ldrh	r3, [r3, #16]
   13898:	2280      	movs	r2, #128	; 0x80
   1389a:	01d2      	lsls	r2, r2, #7
   1389c:	4293      	cmp	r3, r2
   1389e:	d01c      	beq.n	138da <_usart_set_config+0x8a>
   138a0:	2280      	movs	r2, #128	; 0x80
   138a2:	01d2      	lsls	r2, r2, #7
   138a4:	4293      	cmp	r3, r2
   138a6:	dc06      	bgt.n	138b6 <_usart_set_config+0x66>
   138a8:	2b00      	cmp	r3, #0
   138aa:	d00d      	beq.n	138c8 <_usart_set_config+0x78>
   138ac:	2280      	movs	r2, #128	; 0x80
   138ae:	0192      	lsls	r2, r2, #6
   138b0:	4293      	cmp	r3, r2
   138b2:	d024      	beq.n	138fe <_usart_set_config+0xae>
   138b4:	e035      	b.n	13922 <_usart_set_config+0xd2>
   138b6:	22c0      	movs	r2, #192	; 0xc0
   138b8:	01d2      	lsls	r2, r2, #7
   138ba:	4293      	cmp	r3, r2
   138bc:	d028      	beq.n	13910 <_usart_set_config+0xc0>
   138be:	2280      	movs	r2, #128	; 0x80
   138c0:	0212      	lsls	r2, r2, #8
   138c2:	4293      	cmp	r3, r2
   138c4:	d012      	beq.n	138ec <_usart_set_config+0x9c>
   138c6:	e02c      	b.n	13922 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   138c8:	231f      	movs	r3, #31
   138ca:	18fb      	adds	r3, r7, r3
   138cc:	2200      	movs	r2, #0
   138ce:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   138d0:	231e      	movs	r3, #30
   138d2:	18fb      	adds	r3, r7, r3
   138d4:	2210      	movs	r2, #16
   138d6:	701a      	strb	r2, [r3, #0]
			break;
   138d8:	e023      	b.n	13922 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   138da:	231f      	movs	r3, #31
   138dc:	18fb      	adds	r3, r7, r3
   138de:	2200      	movs	r2, #0
   138e0:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   138e2:	231e      	movs	r3, #30
   138e4:	18fb      	adds	r3, r7, r3
   138e6:	2208      	movs	r2, #8
   138e8:	701a      	strb	r2, [r3, #0]
			break;
   138ea:	e01a      	b.n	13922 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   138ec:	231f      	movs	r3, #31
   138ee:	18fb      	adds	r3, r7, r3
   138f0:	2200      	movs	r2, #0
   138f2:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   138f4:	231e      	movs	r3, #30
   138f6:	18fb      	adds	r3, r7, r3
   138f8:	2203      	movs	r2, #3
   138fa:	701a      	strb	r2, [r3, #0]
			break;
   138fc:	e011      	b.n	13922 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   138fe:	231f      	movs	r3, #31
   13900:	18fb      	adds	r3, r7, r3
   13902:	2201      	movs	r2, #1
   13904:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   13906:	231e      	movs	r3, #30
   13908:	18fb      	adds	r3, r7, r3
   1390a:	2210      	movs	r2, #16
   1390c:	701a      	strb	r2, [r3, #0]
			break;
   1390e:	e008      	b.n	13922 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   13910:	231f      	movs	r3, #31
   13912:	18fb      	adds	r3, r7, r3
   13914:	2201      	movs	r2, #1
   13916:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   13918:	231e      	movs	r3, #30
   1391a:	18fb      	adds	r3, r7, r3
   1391c:	2208      	movs	r2, #8
   1391e:	701a      	strb	r2, [r3, #0]
			break;
   13920:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   13922:	683b      	ldr	r3, [r7, #0]
   13924:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   13926:	683b      	ldr	r3, [r7, #0]
   13928:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   1392a:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   1392c:	683b      	ldr	r3, [r7, #0]
   1392e:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   13930:	4313      	orrs	r3, r2
		config->sample_rate |
   13932:	683a      	ldr	r2, [r7, #0]
   13934:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   13936:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   13938:	683a      	ldr	r2, [r7, #0]
   1393a:	7e12      	ldrb	r2, [r2, #24]
   1393c:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   1393e:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   13940:	683a      	ldr	r2, [r7, #0]
   13942:	2126      	movs	r1, #38	; 0x26
   13944:	5c52      	ldrb	r2, [r2, r1]
   13946:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   13948:	4313      	orrs	r3, r2
   1394a:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   1394c:	231d      	movs	r3, #29
   1394e:	18fb      	adds	r3, r7, r3
   13950:	2200      	movs	r2, #0
   13952:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   13954:	683b      	ldr	r3, [r7, #0]
   13956:	685b      	ldr	r3, [r3, #4]
   13958:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   1395a:	68fb      	ldr	r3, [r7, #12]
   1395c:	2b00      	cmp	r3, #0
   1395e:	d01e      	beq.n	1399e <_usart_set_config+0x14e>
   13960:	2280      	movs	r2, #128	; 0x80
   13962:	0552      	lsls	r2, r2, #21
   13964:	4293      	cmp	r3, r2
   13966:	d14f      	bne.n	13a08 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   13968:	683b      	ldr	r3, [r7, #0]
   1396a:	2227      	movs	r2, #39	; 0x27
   1396c:	5c9b      	ldrb	r3, [r3, r2]
   1396e:	2201      	movs	r2, #1
   13970:	4053      	eors	r3, r2
   13972:	b2db      	uxtb	r3, r3
   13974:	2b00      	cmp	r3, #0
   13976:	d046      	beq.n	13a06 <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   13978:	683b      	ldr	r3, [r7, #0]
   1397a:	6a1d      	ldr	r5, [r3, #32]
   1397c:	693b      	ldr	r3, [r7, #16]
   1397e:	b2db      	uxtb	r3, r3
   13980:	0018      	movs	r0, r3
   13982:	4b65      	ldr	r3, [pc, #404]	; (13b18 <_usart_set_config+0x2c8>)
   13984:	4798      	blx	r3
   13986:	0001      	movs	r1, r0
   13988:	231d      	movs	r3, #29
   1398a:	18fc      	adds	r4, r7, r3
   1398c:	230a      	movs	r3, #10
   1398e:	18fb      	adds	r3, r7, r3
   13990:	001a      	movs	r2, r3
   13992:	0028      	movs	r0, r5
   13994:	4b61      	ldr	r3, [pc, #388]	; (13b1c <_usart_set_config+0x2cc>)
   13996:	4798      	blx	r3
   13998:	0003      	movs	r3, r0
   1399a:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   1399c:	e033      	b.n	13a06 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   1399e:	683b      	ldr	r3, [r7, #0]
   139a0:	2227      	movs	r2, #39	; 0x27
   139a2:	5c9b      	ldrb	r3, [r3, r2]
   139a4:	2b00      	cmp	r3, #0
   139a6:	d014      	beq.n	139d2 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   139a8:	683b      	ldr	r3, [r7, #0]
   139aa:	6a18      	ldr	r0, [r3, #32]
   139ac:	683b      	ldr	r3, [r7, #0]
   139ae:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   139b0:	231d      	movs	r3, #29
   139b2:	18fc      	adds	r4, r7, r3
   139b4:	231f      	movs	r3, #31
   139b6:	18fb      	adds	r3, r7, r3
   139b8:	781d      	ldrb	r5, [r3, #0]
   139ba:	230a      	movs	r3, #10
   139bc:	18fa      	adds	r2, r7, r3
   139be:	231e      	movs	r3, #30
   139c0:	18fb      	adds	r3, r7, r3
   139c2:	781b      	ldrb	r3, [r3, #0]
   139c4:	9300      	str	r3, [sp, #0]
   139c6:	002b      	movs	r3, r5
   139c8:	4d55      	ldr	r5, [pc, #340]	; (13b20 <_usart_set_config+0x2d0>)
   139ca:	47a8      	blx	r5
   139cc:	0003      	movs	r3, r0
   139ce:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   139d0:	e01a      	b.n	13a08 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   139d2:	683b      	ldr	r3, [r7, #0]
   139d4:	6a1d      	ldr	r5, [r3, #32]
   139d6:	693b      	ldr	r3, [r7, #16]
   139d8:	b2db      	uxtb	r3, r3
   139da:	0018      	movs	r0, r3
   139dc:	4b4e      	ldr	r3, [pc, #312]	; (13b18 <_usart_set_config+0x2c8>)
   139de:	4798      	blx	r3
				status_code =
   139e0:	231d      	movs	r3, #29
   139e2:	18fc      	adds	r4, r7, r3
   139e4:	231f      	movs	r3, #31
   139e6:	18fb      	adds	r3, r7, r3
   139e8:	7819      	ldrb	r1, [r3, #0]
   139ea:	230a      	movs	r3, #10
   139ec:	18fa      	adds	r2, r7, r3
   139ee:	231e      	movs	r3, #30
   139f0:	18fb      	adds	r3, r7, r3
   139f2:	781b      	ldrb	r3, [r3, #0]
   139f4:	9300      	str	r3, [sp, #0]
   139f6:	000b      	movs	r3, r1
   139f8:	0001      	movs	r1, r0
   139fa:	0028      	movs	r0, r5
   139fc:	4d48      	ldr	r5, [pc, #288]	; (13b20 <_usart_set_config+0x2d0>)
   139fe:	47a8      	blx	r5
   13a00:	0003      	movs	r3, r0
   13a02:	7023      	strb	r3, [r4, #0]
			break;
   13a04:	e000      	b.n	13a08 <_usart_set_config+0x1b8>
			break;
   13a06:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   13a08:	231d      	movs	r3, #29
   13a0a:	18fb      	adds	r3, r7, r3
   13a0c:	781b      	ldrb	r3, [r3, #0]
   13a0e:	2b00      	cmp	r3, #0
   13a10:	d003      	beq.n	13a1a <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   13a12:	231d      	movs	r3, #29
   13a14:	18fb      	adds	r3, r7, r3
   13a16:	781b      	ldrb	r3, [r3, #0]
   13a18:	e077      	b.n	13b0a <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   13a1a:	683b      	ldr	r3, [r7, #0]
   13a1c:	7e5b      	ldrb	r3, [r3, #25]
   13a1e:	2b00      	cmp	r3, #0
   13a20:	d003      	beq.n	13a2a <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   13a22:	683b      	ldr	r3, [r7, #0]
   13a24:	7e9a      	ldrb	r2, [r3, #26]
   13a26:	69bb      	ldr	r3, [r7, #24]
   13a28:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   13a2a:	687b      	ldr	r3, [r7, #4]
   13a2c:	0018      	movs	r0, r3
   13a2e:	4b3d      	ldr	r3, [pc, #244]	; (13b24 <_usart_set_config+0x2d4>)
   13a30:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   13a32:	230a      	movs	r3, #10
   13a34:	18fb      	adds	r3, r7, r3
   13a36:	881a      	ldrh	r2, [r3, #0]
   13a38:	69bb      	ldr	r3, [r7, #24]
   13a3a:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   13a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   13a3e:	68fb      	ldr	r3, [r7, #12]
   13a40:	4313      	orrs	r3, r2
   13a42:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   13a44:	683b      	ldr	r3, [r7, #0]
   13a46:	2227      	movs	r2, #39	; 0x27
   13a48:	5c9b      	ldrb	r3, [r3, r2]
   13a4a:	2201      	movs	r2, #1
   13a4c:	4053      	eors	r3, r2
   13a4e:	b2db      	uxtb	r3, r3
   13a50:	2b00      	cmp	r3, #0
   13a52:	d003      	beq.n	13a5c <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   13a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13a56:	2204      	movs	r2, #4
   13a58:	4313      	orrs	r3, r2
   13a5a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   13a5c:	683b      	ldr	r3, [r7, #0]
   13a5e:	7e5b      	ldrb	r3, [r3, #25]
   13a60:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   13a62:	683b      	ldr	r3, [r7, #0]
   13a64:	7f1b      	ldrb	r3, [r3, #28]
   13a66:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   13a68:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   13a6a:	683b      	ldr	r3, [r7, #0]
   13a6c:	7f5b      	ldrb	r3, [r3, #29]
   13a6e:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   13a70:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   13a72:	683b      	ldr	r3, [r7, #0]
   13a74:	2124      	movs	r1, #36	; 0x24
   13a76:	5c5b      	ldrb	r3, [r3, r1]
   13a78:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   13a7a:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   13a7c:	683b      	ldr	r3, [r7, #0]
   13a7e:	2125      	movs	r1, #37	; 0x25
   13a80:	5c5b      	ldrb	r3, [r3, r1]
   13a82:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   13a84:	4313      	orrs	r3, r2
	ctrlb =  
   13a86:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   13a88:	683b      	ldr	r3, [r7, #0]
   13a8a:	7a9b      	ldrb	r3, [r3, #10]
   13a8c:	001a      	movs	r2, r3
   13a8e:	6a3b      	ldr	r3, [r7, #32]
   13a90:	4313      	orrs	r3, r2
   13a92:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   13a94:	683b      	ldr	r3, [r7, #0]
   13a96:	7adb      	ldrb	r3, [r3, #11]
   13a98:	001a      	movs	r2, r3
   13a9a:	6a3b      	ldr	r3, [r7, #32]
   13a9c:	4313      	orrs	r3, r2
   13a9e:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   13aa0:	683b      	ldr	r3, [r7, #0]
   13aa2:	891b      	ldrh	r3, [r3, #8]
   13aa4:	2bff      	cmp	r3, #255	; 0xff
   13aa6:	d00b      	beq.n	13ac0 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   13aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13aaa:	2280      	movs	r2, #128	; 0x80
   13aac:	0452      	lsls	r2, r2, #17
   13aae:	4313      	orrs	r3, r2
   13ab0:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   13ab2:	683b      	ldr	r3, [r7, #0]
   13ab4:	891b      	ldrh	r3, [r3, #8]
   13ab6:	001a      	movs	r2, r3
   13ab8:	6a3b      	ldr	r3, [r7, #32]
   13aba:	4313      	orrs	r3, r2
   13abc:	623b      	str	r3, [r7, #32]
   13abe:	e008      	b.n	13ad2 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   13ac0:	683b      	ldr	r3, [r7, #0]
   13ac2:	7edb      	ldrb	r3, [r3, #27]
   13ac4:	2b00      	cmp	r3, #0
   13ac6:	d004      	beq.n	13ad2 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   13ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13aca:	2280      	movs	r2, #128	; 0x80
   13acc:	04d2      	lsls	r2, r2, #19
   13ace:	4313      	orrs	r3, r2
   13ad0:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   13ad2:	683b      	ldr	r3, [r7, #0]
   13ad4:	222c      	movs	r2, #44	; 0x2c
   13ad6:	5c9b      	ldrb	r3, [r3, r2]
   13ad8:	2b00      	cmp	r3, #0
   13ada:	d103      	bne.n	13ae4 <_usart_set_config+0x294>
   13adc:	4b12      	ldr	r3, [pc, #72]	; (13b28 <_usart_set_config+0x2d8>)
   13ade:	4798      	blx	r3
   13ae0:	1e03      	subs	r3, r0, #0
   13ae2:	d003      	beq.n	13aec <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   13ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13ae6:	2280      	movs	r2, #128	; 0x80
   13ae8:	4313      	orrs	r3, r2
   13aea:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   13aec:	687b      	ldr	r3, [r7, #4]
   13aee:	0018      	movs	r0, r3
   13af0:	4b0c      	ldr	r3, [pc, #48]	; (13b24 <_usart_set_config+0x2d4>)
   13af2:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   13af4:	69bb      	ldr	r3, [r7, #24]
   13af6:	6a3a      	ldr	r2, [r7, #32]
   13af8:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   13afa:	687b      	ldr	r3, [r7, #4]
   13afc:	0018      	movs	r0, r3
   13afe:	4b09      	ldr	r3, [pc, #36]	; (13b24 <_usart_set_config+0x2d4>)
   13b00:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   13b02:	69bb      	ldr	r3, [r7, #24]
   13b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   13b06:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   13b08:	2300      	movs	r3, #0
}
   13b0a:	0018      	movs	r0, r3
   13b0c:	46bd      	mov	sp, r7
   13b0e:	b00a      	add	sp, #40	; 0x28
   13b10:	bdb0      	pop	{r4, r5, r7, pc}
   13b12:	46c0      	nop			; (mov r8, r8)
   13b14:	00015439 	.word	0x00015439
   13b18:	00016071 	.word	0x00016071
   13b1c:	00014fb3 	.word	0x00014fb3
   13b20:	00015031 	.word	0x00015031
   13b24:	0001382d 	.word	0x0001382d
   13b28:	000137ed 	.word	0x000137ed

00013b2c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   13b2c:	b590      	push	{r4, r7, lr}
   13b2e:	b093      	sub	sp, #76	; 0x4c
   13b30:	af00      	add	r7, sp, #0
   13b32:	60f8      	str	r0, [r7, #12]
   13b34:	60b9      	str	r1, [r7, #8]
   13b36:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   13b38:	2333      	movs	r3, #51	; 0x33
   13b3a:	18fb      	adds	r3, r7, r3
   13b3c:	2200      	movs	r2, #0
   13b3e:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   13b40:	68fb      	ldr	r3, [r7, #12]
   13b42:	68ba      	ldr	r2, [r7, #8]
   13b44:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   13b46:	68fb      	ldr	r3, [r7, #12]
   13b48:	681b      	ldr	r3, [r3, #0]
   13b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
	
	

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   13b4c:	68fb      	ldr	r3, [r7, #12]
   13b4e:	681b      	ldr	r3, [r3, #0]
   13b50:	0018      	movs	r0, r3
   13b52:	4b8f      	ldr	r3, [pc, #572]	; (13d90 <usart_init+0x264>)
   13b54:	4798      	blx	r3
   13b56:	0003      	movs	r3, r0
   13b58:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
   13b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13b5c:	2b05      	cmp	r3, #5
   13b5e:	d104      	bne.n	13b6a <usart_init+0x3e>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
   13b60:	2301      	movs	r3, #1
   13b62:	647b      	str	r3, [r7, #68]	; 0x44
		gclk_index   = SERCOM5_GCLK_ID_CORE;
   13b64:	2318      	movs	r3, #24
   13b66:	643b      	str	r3, [r7, #64]	; 0x40
   13b68:	e004      	b.n	13b74 <usart_init+0x48>
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
   13b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13b6c:	647b      	str	r3, [r7, #68]	; 0x44
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   13b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13b70:	3312      	adds	r3, #18
   13b72:	643b      	str	r3, [r7, #64]	; 0x40
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   13b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13b76:	681b      	ldr	r3, [r3, #0]
   13b78:	2201      	movs	r2, #1
   13b7a:	4013      	ands	r3, r2
   13b7c:	d001      	beq.n	13b82 <usart_init+0x56>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   13b7e:	2305      	movs	r3, #5
   13b80:	e102      	b.n	13d88 <usart_init+0x25c>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   13b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13b84:	681b      	ldr	r3, [r3, #0]
   13b86:	2202      	movs	r2, #2
   13b88:	4013      	ands	r3, r2
   13b8a:	d001      	beq.n	13b90 <usart_init+0x64>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   13b8c:	231c      	movs	r3, #28
   13b8e:	e0fb      	b.n	13d88 <usart_init+0x25c>
	}

	/* Turn on module in PM */
#if (SAML21) || (SAMR30)
	if (sercom_index == 5) {
   13b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13b92:	2b05      	cmp	r3, #5
   13b94:	d108      	bne.n	13ba8 <usart_init+0x7c>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
   13b96:	2201      	movs	r2, #1
   13b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   13b9a:	409a      	lsls	r2, r3
   13b9c:	0013      	movs	r3, r2
   13b9e:	0019      	movs	r1, r3
   13ba0:	2003      	movs	r0, #3
   13ba2:	4b7c      	ldr	r3, [pc, #496]	; (13d94 <usart_init+0x268>)
   13ba4:	4798      	blx	r3
   13ba6:	e007      	b.n	13bb8 <usart_init+0x8c>
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
   13ba8:	2201      	movs	r2, #1
   13baa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   13bac:	409a      	lsls	r2, r3
   13bae:	0013      	movs	r3, r2
   13bb0:	0019      	movs	r1, r3
   13bb2:	2002      	movs	r0, #2
   13bb4:	4b77      	ldr	r3, [pc, #476]	; (13d94 <usart_init+0x268>)
   13bb6:	4798      	blx	r3
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   13bb8:	2324      	movs	r3, #36	; 0x24
   13bba:	18fb      	adds	r3, r7, r3
   13bbc:	0018      	movs	r0, r3
   13bbe:	4b76      	ldr	r3, [pc, #472]	; (13d98 <usart_init+0x26c>)
   13bc0:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   13bc2:	687b      	ldr	r3, [r7, #4]
   13bc4:	222d      	movs	r2, #45	; 0x2d
   13bc6:	5c9a      	ldrb	r2, [r3, r2]
   13bc8:	2324      	movs	r3, #36	; 0x24
   13bca:	18fb      	adds	r3, r7, r3
   13bcc:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   13bce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   13bd0:	b2db      	uxtb	r3, r3
   13bd2:	2224      	movs	r2, #36	; 0x24
   13bd4:	18ba      	adds	r2, r7, r2
   13bd6:	0011      	movs	r1, r2
   13bd8:	0018      	movs	r0, r3
   13bda:	4b70      	ldr	r3, [pc, #448]	; (13d9c <usart_init+0x270>)
   13bdc:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   13bde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   13be0:	b2db      	uxtb	r3, r3
   13be2:	0018      	movs	r0, r3
   13be4:	4b6e      	ldr	r3, [pc, #440]	; (13da0 <usart_init+0x274>)
   13be6:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   13be8:	687b      	ldr	r3, [r7, #4]
   13bea:	222d      	movs	r2, #45	; 0x2d
   13bec:	5c9b      	ldrb	r3, [r3, r2]
   13bee:	2100      	movs	r1, #0
   13bf0:	0018      	movs	r0, r3
   13bf2:	4b6c      	ldr	r3, [pc, #432]	; (13da4 <usart_init+0x278>)
   13bf4:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   13bf6:	687b      	ldr	r3, [r7, #4]
   13bf8:	7ada      	ldrb	r2, [r3, #11]
   13bfa:	68fb      	ldr	r3, [r7, #12]
   13bfc:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   13bfe:	687b      	ldr	r3, [r7, #4]
   13c00:	2224      	movs	r2, #36	; 0x24
   13c02:	5c9a      	ldrb	r2, [r3, r2]
   13c04:	68fb      	ldr	r3, [r7, #12]
   13c06:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   13c08:	687b      	ldr	r3, [r7, #4]
   13c0a:	2225      	movs	r2, #37	; 0x25
   13c0c:	5c9a      	ldrb	r2, [r3, r2]
   13c0e:	68fb      	ldr	r3, [r7, #12]
   13c10:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   13c12:	687b      	ldr	r3, [r7, #4]
   13c14:	7eda      	ldrb	r2, [r3, #27]
   13c16:	68fb      	ldr	r3, [r7, #12]
   13c18:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   13c1a:	687b      	ldr	r3, [r7, #4]
   13c1c:	7f1a      	ldrb	r2, [r3, #28]
   13c1e:	68fb      	ldr	r3, [r7, #12]
   13c20:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   13c22:	2333      	movs	r3, #51	; 0x33
   13c24:	18fc      	adds	r4, r7, r3
   13c26:	687a      	ldr	r2, [r7, #4]
   13c28:	68fb      	ldr	r3, [r7, #12]
   13c2a:	0011      	movs	r1, r2
   13c2c:	0018      	movs	r0, r3
   13c2e:	4b5e      	ldr	r3, [pc, #376]	; (13da8 <usart_init+0x27c>)
   13c30:	4798      	blx	r3
   13c32:	0003      	movs	r3, r0
   13c34:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   13c36:	2333      	movs	r3, #51	; 0x33
   13c38:	18fb      	adds	r3, r7, r3
   13c3a:	781b      	ldrb	r3, [r3, #0]
   13c3c:	2b00      	cmp	r3, #0
   13c3e:	d003      	beq.n	13c48 <usart_init+0x11c>
		return status_code;
   13c40:	2333      	movs	r3, #51	; 0x33
   13c42:	18fb      	adds	r3, r7, r3
   13c44:	781b      	ldrb	r3, [r3, #0]
   13c46:	e09f      	b.n	13d88 <usart_init+0x25c>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   13c48:	2320      	movs	r3, #32
   13c4a:	18fb      	adds	r3, r7, r3
   13c4c:	0018      	movs	r0, r3
   13c4e:	4b57      	ldr	r3, [pc, #348]	; (13dac <usart_init+0x280>)
   13c50:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   13c52:	2320      	movs	r3, #32
   13c54:	18fb      	adds	r3, r7, r3
   13c56:	2200      	movs	r2, #0
   13c58:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   13c5a:	2320      	movs	r3, #32
   13c5c:	18fb      	adds	r3, r7, r3
   13c5e:	2200      	movs	r2, #0
   13c60:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   13c62:	687b      	ldr	r3, [r7, #4]
   13c64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   13c66:	2310      	movs	r3, #16
   13c68:	18fb      	adds	r3, r7, r3
   13c6a:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   13c6c:	687b      	ldr	r3, [r7, #4]
   13c6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   13c70:	2310      	movs	r3, #16
   13c72:	18fb      	adds	r3, r7, r3
   13c74:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   13c76:	687b      	ldr	r3, [r7, #4]
   13c78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   13c7a:	2310      	movs	r3, #16
   13c7c:	18fb      	adds	r3, r7, r3
   13c7e:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   13c80:	687b      	ldr	r3, [r7, #4]
   13c82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   13c84:	2310      	movs	r3, #16
   13c86:	18fb      	adds	r3, r7, r3
   13c88:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   13c8a:	233f      	movs	r3, #63	; 0x3f
   13c8c:	18fb      	adds	r3, r7, r3
   13c8e:	2200      	movs	r2, #0
   13c90:	701a      	strb	r2, [r3, #0]
   13c92:	e02c      	b.n	13cee <usart_init+0x1c2>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   13c94:	233f      	movs	r3, #63	; 0x3f
   13c96:	18fb      	adds	r3, r7, r3
   13c98:	781a      	ldrb	r2, [r3, #0]
   13c9a:	2310      	movs	r3, #16
   13c9c:	18fb      	adds	r3, r7, r3
   13c9e:	0092      	lsls	r2, r2, #2
   13ca0:	58d3      	ldr	r3, [r2, r3]
   13ca2:	63bb      	str	r3, [r7, #56]	; 0x38

		if (current_pinmux == PINMUX_DEFAULT) {
   13ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13ca6:	2b00      	cmp	r3, #0
   13ca8:	d109      	bne.n	13cbe <usart_init+0x192>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   13caa:	233f      	movs	r3, #63	; 0x3f
   13cac:	18fb      	adds	r3, r7, r3
   13cae:	781a      	ldrb	r2, [r3, #0]
   13cb0:	68bb      	ldr	r3, [r7, #8]
   13cb2:	0011      	movs	r1, r2
   13cb4:	0018      	movs	r0, r3
   13cb6:	4b3e      	ldr	r3, [pc, #248]	; (13db0 <usart_init+0x284>)
   13cb8:	4798      	blx	r3
   13cba:	0003      	movs	r3, r0
   13cbc:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		if (current_pinmux != PINMUX_UNUSED) {
   13cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13cc0:	3301      	adds	r3, #1
   13cc2:	d00d      	beq.n	13ce0 <usart_init+0x1b4>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   13cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13cc6:	b2da      	uxtb	r2, r3
   13cc8:	2320      	movs	r3, #32
   13cca:	18fb      	adds	r3, r7, r3
   13ccc:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   13cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13cd0:	0c1b      	lsrs	r3, r3, #16
   13cd2:	b2db      	uxtb	r3, r3
   13cd4:	2220      	movs	r2, #32
   13cd6:	18ba      	adds	r2, r7, r2
   13cd8:	0011      	movs	r1, r2
   13cda:	0018      	movs	r0, r3
   13cdc:	4b35      	ldr	r3, [pc, #212]	; (13db4 <usart_init+0x288>)
   13cde:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   13ce0:	233f      	movs	r3, #63	; 0x3f
   13ce2:	18fb      	adds	r3, r7, r3
   13ce4:	781a      	ldrb	r2, [r3, #0]
   13ce6:	233f      	movs	r3, #63	; 0x3f
   13ce8:	18fb      	adds	r3, r7, r3
   13cea:	3201      	adds	r2, #1
   13cec:	701a      	strb	r2, [r3, #0]
   13cee:	233f      	movs	r3, #63	; 0x3f
   13cf0:	18fb      	adds	r3, r7, r3
   13cf2:	781b      	ldrb	r3, [r3, #0]
   13cf4:	2b03      	cmp	r3, #3
   13cf6:	d9cd      	bls.n	13c94 <usart_init+0x168>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   13cf8:	2300      	movs	r3, #0
   13cfa:	637b      	str	r3, [r7, #52]	; 0x34
   13cfc:	e00a      	b.n	13d14 <usart_init+0x1e8>
		module->callback[i]            = NULL;
   13cfe:	68fa      	ldr	r2, [r7, #12]
   13d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13d02:	3302      	adds	r3, #2
   13d04:	009b      	lsls	r3, r3, #2
   13d06:	18d3      	adds	r3, r2, r3
   13d08:	3304      	adds	r3, #4
   13d0a:	2200      	movs	r2, #0
   13d0c:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   13d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13d10:	3301      	adds	r3, #1
   13d12:	637b      	str	r3, [r7, #52]	; 0x34
   13d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13d16:	2b05      	cmp	r3, #5
   13d18:	d9f1      	bls.n	13cfe <usart_init+0x1d2>
	}

	module->tx_buffer_ptr              = NULL;
   13d1a:	68fb      	ldr	r3, [r7, #12]
   13d1c:	2200      	movs	r2, #0
   13d1e:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   13d20:	68fb      	ldr	r3, [r7, #12]
   13d22:	2200      	movs	r2, #0
   13d24:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   13d26:	68fb      	ldr	r3, [r7, #12]
   13d28:	2200      	movs	r2, #0
   13d2a:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   13d2c:	68fb      	ldr	r3, [r7, #12]
   13d2e:	2200      	movs	r2, #0
   13d30:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   13d32:	68fb      	ldr	r3, [r7, #12]
   13d34:	2230      	movs	r2, #48	; 0x30
   13d36:	2100      	movs	r1, #0
   13d38:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   13d3a:	68fb      	ldr	r3, [r7, #12]
   13d3c:	2231      	movs	r2, #49	; 0x31
   13d3e:	2100      	movs	r1, #0
   13d40:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   13d42:	68fb      	ldr	r3, [r7, #12]
   13d44:	2232      	movs	r2, #50	; 0x32
   13d46:	2100      	movs	r1, #0
   13d48:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   13d4a:	68fb      	ldr	r3, [r7, #12]
   13d4c:	2233      	movs	r2, #51	; 0x33
   13d4e:	2100      	movs	r1, #0
   13d50:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   13d52:	68fb      	ldr	r3, [r7, #12]
   13d54:	681b      	ldr	r3, [r3, #0]
   13d56:	2227      	movs	r2, #39	; 0x27
   13d58:	18bc      	adds	r4, r7, r2
   13d5a:	0018      	movs	r0, r3
   13d5c:	4b0c      	ldr	r3, [pc, #48]	; (13d90 <usart_init+0x264>)
   13d5e:	4798      	blx	r3
   13d60:	0003      	movs	r3, r0
   13d62:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   13d64:	4a14      	ldr	r2, [pc, #80]	; (13db8 <usart_init+0x28c>)
   13d66:	2327      	movs	r3, #39	; 0x27
   13d68:	18fb      	adds	r3, r7, r3
   13d6a:	781b      	ldrb	r3, [r3, #0]
   13d6c:	0011      	movs	r1, r2
   13d6e:	0018      	movs	r0, r3
   13d70:	4b12      	ldr	r3, [pc, #72]	; (13dbc <usart_init+0x290>)
   13d72:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   13d74:	2327      	movs	r3, #39	; 0x27
   13d76:	18fb      	adds	r3, r7, r3
   13d78:	781a      	ldrb	r2, [r3, #0]
   13d7a:	4b11      	ldr	r3, [pc, #68]	; (13dc0 <usart_init+0x294>)
   13d7c:	0092      	lsls	r2, r2, #2
   13d7e:	68f9      	ldr	r1, [r7, #12]
   13d80:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   13d82:	2333      	movs	r3, #51	; 0x33
   13d84:	18fb      	adds	r3, r7, r3
   13d86:	781b      	ldrb	r3, [r3, #0]
}
   13d88:	0018      	movs	r0, r3
   13d8a:	46bd      	mov	sp, r7
   13d8c:	b013      	add	sp, #76	; 0x4c
   13d8e:	bd90      	pop	{r4, r7, pc}
   13d90:	00015439 	.word	0x00015439
   13d94:	00013749 	.word	0x00013749
   13d98:	00013731 	.word	0x00013731
   13d9c:	00015f81 	.word	0x00015f81
   13da0:	00015fc1 	.word	0x00015fc1
   13da4:	000151f1 	.word	0x000151f1
   13da8:	00013851 	.word	0x00013851
   13dac:	000137c5 	.word	0x000137c5
   13db0:	0001527d 	.word	0x0001527d
   13db4:	00016235 	.word	0x00016235
   13db8:	00006649 	.word	0x00006649
   13dbc:	00006315 	.word	0x00006315
   13dc0:	20001224 	.word	0x20001224

00013dc4 <system_pinmux_get_config_defaults>:
{
   13dc4:	b580      	push	{r7, lr}
   13dc6:	b082      	sub	sp, #8
   13dc8:	af00      	add	r7, sp, #0
   13dca:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   13dcc:	687b      	ldr	r3, [r7, #4]
   13dce:	2280      	movs	r2, #128	; 0x80
   13dd0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   13dd2:	687b      	ldr	r3, [r7, #4]
   13dd4:	2200      	movs	r2, #0
   13dd6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   13dd8:	687b      	ldr	r3, [r7, #4]
   13dda:	2201      	movs	r2, #1
   13ddc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   13dde:	687b      	ldr	r3, [r7, #4]
   13de0:	2200      	movs	r2, #0
   13de2:	70da      	strb	r2, [r3, #3]
}
   13de4:	46c0      	nop			; (mov r8, r8)
   13de6:	46bd      	mov	sp, r7
   13de8:	b002      	add	sp, #8
   13dea:	bd80      	pop	{r7, pc}

00013dec <system_pinmux_get_group_from_gpio_pin>:
{
   13dec:	b580      	push	{r7, lr}
   13dee:	b084      	sub	sp, #16
   13df0:	af00      	add	r7, sp, #0
   13df2:	0002      	movs	r2, r0
   13df4:	1dfb      	adds	r3, r7, #7
   13df6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   13df8:	230f      	movs	r3, #15
   13dfa:	18fb      	adds	r3, r7, r3
   13dfc:	1dfa      	adds	r2, r7, #7
   13dfe:	7812      	ldrb	r2, [r2, #0]
   13e00:	09d2      	lsrs	r2, r2, #7
   13e02:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   13e04:	230e      	movs	r3, #14
   13e06:	18fb      	adds	r3, r7, r3
   13e08:	1dfa      	adds	r2, r7, #7
   13e0a:	7812      	ldrb	r2, [r2, #0]
   13e0c:	0952      	lsrs	r2, r2, #5
   13e0e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   13e10:	4b0d      	ldr	r3, [pc, #52]	; (13e48 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   13e12:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   13e14:	230f      	movs	r3, #15
   13e16:	18fb      	adds	r3, r7, r3
   13e18:	781b      	ldrb	r3, [r3, #0]
   13e1a:	2b00      	cmp	r3, #0
   13e1c:	d10f      	bne.n	13e3e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   13e1e:	230f      	movs	r3, #15
   13e20:	18fb      	adds	r3, r7, r3
   13e22:	781b      	ldrb	r3, [r3, #0]
   13e24:	009b      	lsls	r3, r3, #2
   13e26:	2210      	movs	r2, #16
   13e28:	4694      	mov	ip, r2
   13e2a:	44bc      	add	ip, r7
   13e2c:	4463      	add	r3, ip
   13e2e:	3b08      	subs	r3, #8
   13e30:	681a      	ldr	r2, [r3, #0]
   13e32:	230e      	movs	r3, #14
   13e34:	18fb      	adds	r3, r7, r3
   13e36:	781b      	ldrb	r3, [r3, #0]
   13e38:	01db      	lsls	r3, r3, #7
   13e3a:	18d3      	adds	r3, r2, r3
   13e3c:	e000      	b.n	13e40 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   13e3e:	2300      	movs	r3, #0
}
   13e40:	0018      	movs	r0, r3
   13e42:	46bd      	mov	sp, r7
   13e44:	b004      	add	sp, #16
   13e46:	bd80      	pop	{r7, pc}
   13e48:	40002800 	.word	0x40002800

00013e4c <port_get_group_from_gpio_pin>:
{
   13e4c:	b580      	push	{r7, lr}
   13e4e:	b082      	sub	sp, #8
   13e50:	af00      	add	r7, sp, #0
   13e52:	0002      	movs	r2, r0
   13e54:	1dfb      	adds	r3, r7, #7
   13e56:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   13e58:	1dfb      	adds	r3, r7, #7
   13e5a:	781b      	ldrb	r3, [r3, #0]
   13e5c:	0018      	movs	r0, r3
   13e5e:	4b03      	ldr	r3, [pc, #12]	; (13e6c <port_get_group_from_gpio_pin+0x20>)
   13e60:	4798      	blx	r3
   13e62:	0003      	movs	r3, r0
}
   13e64:	0018      	movs	r0, r3
   13e66:	46bd      	mov	sp, r7
   13e68:	b002      	add	sp, #8
   13e6a:	bd80      	pop	{r7, pc}
   13e6c:	00013ded 	.word	0x00013ded

00013e70 <port_pin_set_output_level>:
{
   13e70:	b580      	push	{r7, lr}
   13e72:	b084      	sub	sp, #16
   13e74:	af00      	add	r7, sp, #0
   13e76:	0002      	movs	r2, r0
   13e78:	1dfb      	adds	r3, r7, #7
   13e7a:	701a      	strb	r2, [r3, #0]
   13e7c:	1dbb      	adds	r3, r7, #6
   13e7e:	1c0a      	adds	r2, r1, #0
   13e80:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   13e82:	1dfb      	adds	r3, r7, #7
   13e84:	781b      	ldrb	r3, [r3, #0]
   13e86:	0018      	movs	r0, r3
   13e88:	4b0d      	ldr	r3, [pc, #52]	; (13ec0 <port_pin_set_output_level+0x50>)
   13e8a:	4798      	blx	r3
   13e8c:	0003      	movs	r3, r0
   13e8e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   13e90:	1dfb      	adds	r3, r7, #7
   13e92:	781b      	ldrb	r3, [r3, #0]
   13e94:	221f      	movs	r2, #31
   13e96:	4013      	ands	r3, r2
   13e98:	2201      	movs	r2, #1
   13e9a:	409a      	lsls	r2, r3
   13e9c:	0013      	movs	r3, r2
   13e9e:	60bb      	str	r3, [r7, #8]
	if (level) {
   13ea0:	1dbb      	adds	r3, r7, #6
   13ea2:	781b      	ldrb	r3, [r3, #0]
   13ea4:	2b00      	cmp	r3, #0
   13ea6:	d003      	beq.n	13eb0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   13ea8:	68fb      	ldr	r3, [r7, #12]
   13eaa:	68ba      	ldr	r2, [r7, #8]
   13eac:	619a      	str	r2, [r3, #24]
}
   13eae:	e002      	b.n	13eb6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   13eb0:	68fb      	ldr	r3, [r7, #12]
   13eb2:	68ba      	ldr	r2, [r7, #8]
   13eb4:	615a      	str	r2, [r3, #20]
}
   13eb6:	46c0      	nop			; (mov r8, r8)
   13eb8:	46bd      	mov	sp, r7
   13eba:	b004      	add	sp, #16
   13ebc:	bd80      	pop	{r7, pc}
   13ebe:	46c0      	nop			; (mov r8, r8)
   13ec0:	00013e4d 	.word	0x00013e4d

00013ec4 <system_gclk_chan_get_config_defaults>:
{
   13ec4:	b580      	push	{r7, lr}
   13ec6:	b082      	sub	sp, #8
   13ec8:	af00      	add	r7, sp, #0
   13eca:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   13ecc:	687b      	ldr	r3, [r7, #4]
   13ece:	2200      	movs	r2, #0
   13ed0:	701a      	strb	r2, [r3, #0]
}
   13ed2:	46c0      	nop			; (mov r8, r8)
   13ed4:	46bd      	mov	sp, r7
   13ed6:	b002      	add	sp, #8
   13ed8:	bd80      	pop	{r7, pc}
	...

00013edc <system_apb_clock_set_mask>:
{
   13edc:	b580      	push	{r7, lr}
   13ede:	b082      	sub	sp, #8
   13ee0:	af00      	add	r7, sp, #0
   13ee2:	0002      	movs	r2, r0
   13ee4:	6039      	str	r1, [r7, #0]
   13ee6:	1dfb      	adds	r3, r7, #7
   13ee8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   13eea:	1dfb      	adds	r3, r7, #7
   13eec:	781b      	ldrb	r3, [r3, #0]
   13eee:	2b04      	cmp	r3, #4
   13ef0:	d827      	bhi.n	13f42 <system_apb_clock_set_mask+0x66>
   13ef2:	009a      	lsls	r2, r3, #2
   13ef4:	4b16      	ldr	r3, [pc, #88]	; (13f50 <system_apb_clock_set_mask+0x74>)
   13ef6:	18d3      	adds	r3, r2, r3
   13ef8:	681b      	ldr	r3, [r3, #0]
   13efa:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
   13efc:	4b15      	ldr	r3, [pc, #84]	; (13f54 <system_apb_clock_set_mask+0x78>)
   13efe:	4a15      	ldr	r2, [pc, #84]	; (13f54 <system_apb_clock_set_mask+0x78>)
   13f00:	6951      	ldr	r1, [r2, #20]
   13f02:	683a      	ldr	r2, [r7, #0]
   13f04:	430a      	orrs	r2, r1
   13f06:	615a      	str	r2, [r3, #20]
			break;
   13f08:	e01d      	b.n	13f46 <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
   13f0a:	4b12      	ldr	r3, [pc, #72]	; (13f54 <system_apb_clock_set_mask+0x78>)
   13f0c:	4a11      	ldr	r2, [pc, #68]	; (13f54 <system_apb_clock_set_mask+0x78>)
   13f0e:	6991      	ldr	r1, [r2, #24]
   13f10:	683a      	ldr	r2, [r7, #0]
   13f12:	430a      	orrs	r2, r1
   13f14:	619a      	str	r2, [r3, #24]
			break;
   13f16:	e016      	b.n	13f46 <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
   13f18:	4b0e      	ldr	r3, [pc, #56]	; (13f54 <system_apb_clock_set_mask+0x78>)
   13f1a:	4a0e      	ldr	r2, [pc, #56]	; (13f54 <system_apb_clock_set_mask+0x78>)
   13f1c:	69d1      	ldr	r1, [r2, #28]
   13f1e:	683a      	ldr	r2, [r7, #0]
   13f20:	430a      	orrs	r2, r1
   13f22:	61da      	str	r2, [r3, #28]
			break;
   13f24:	e00f      	b.n	13f46 <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
   13f26:	4b0b      	ldr	r3, [pc, #44]	; (13f54 <system_apb_clock_set_mask+0x78>)
   13f28:	4a0a      	ldr	r2, [pc, #40]	; (13f54 <system_apb_clock_set_mask+0x78>)
   13f2a:	6a11      	ldr	r1, [r2, #32]
   13f2c:	683a      	ldr	r2, [r7, #0]
   13f2e:	430a      	orrs	r2, r1
   13f30:	621a      	str	r2, [r3, #32]
			break;
   13f32:	e008      	b.n	13f46 <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
   13f34:	4b07      	ldr	r3, [pc, #28]	; (13f54 <system_apb_clock_set_mask+0x78>)
   13f36:	4a07      	ldr	r2, [pc, #28]	; (13f54 <system_apb_clock_set_mask+0x78>)
   13f38:	6a51      	ldr	r1, [r2, #36]	; 0x24
   13f3a:	683a      	ldr	r2, [r7, #0]
   13f3c:	430a      	orrs	r2, r1
   13f3e:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   13f40:	e001      	b.n	13f46 <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
   13f42:	2317      	movs	r3, #23
   13f44:	e000      	b.n	13f48 <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
   13f46:	2300      	movs	r3, #0
}
   13f48:	0018      	movs	r0, r3
   13f4a:	46bd      	mov	sp, r7
   13f4c:	b002      	add	sp, #8
   13f4e:	bd80      	pop	{r7, pc}
   13f50:	00025d24 	.word	0x00025d24
   13f54:	40000400 	.word	0x40000400

00013f58 <system_is_debugger_present>:
{
   13f58:	b580      	push	{r7, lr}
   13f5a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   13f5c:	4b05      	ldr	r3, [pc, #20]	; (13f74 <system_is_debugger_present+0x1c>)
   13f5e:	789b      	ldrb	r3, [r3, #2]
   13f60:	b2db      	uxtb	r3, r3
   13f62:	001a      	movs	r2, r3
   13f64:	2302      	movs	r3, #2
   13f66:	4013      	ands	r3, r2
   13f68:	1e5a      	subs	r2, r3, #1
   13f6a:	4193      	sbcs	r3, r2
   13f6c:	b2db      	uxtb	r3, r3
}
   13f6e:	0018      	movs	r0, r3
   13f70:	46bd      	mov	sp, r7
   13f72:	bd80      	pop	{r7, pc}
   13f74:	41002000 	.word	0x41002000

00013f78 <spi_is_write_complete>:
{
   13f78:	b580      	push	{r7, lr}
   13f7a:	b084      	sub	sp, #16
   13f7c:	af00      	add	r7, sp, #0
   13f7e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   13f80:	687b      	ldr	r3, [r7, #4]
   13f82:	681b      	ldr	r3, [r3, #0]
   13f84:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   13f86:	68fb      	ldr	r3, [r7, #12]
   13f88:	7e1b      	ldrb	r3, [r3, #24]
   13f8a:	b2db      	uxtb	r3, r3
   13f8c:	001a      	movs	r2, r3
   13f8e:	2302      	movs	r3, #2
   13f90:	4013      	ands	r3, r2
   13f92:	1e5a      	subs	r2, r3, #1
   13f94:	4193      	sbcs	r3, r2
   13f96:	b2db      	uxtb	r3, r3
}
   13f98:	0018      	movs	r0, r3
   13f9a:	46bd      	mov	sp, r7
   13f9c:	b004      	add	sp, #16
   13f9e:	bd80      	pop	{r7, pc}

00013fa0 <spi_is_ready_to_write>:
{
   13fa0:	b580      	push	{r7, lr}
   13fa2:	b084      	sub	sp, #16
   13fa4:	af00      	add	r7, sp, #0
   13fa6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   13fa8:	687b      	ldr	r3, [r7, #4]
   13faa:	681b      	ldr	r3, [r3, #0]
   13fac:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   13fae:	68fb      	ldr	r3, [r7, #12]
   13fb0:	7e1b      	ldrb	r3, [r3, #24]
   13fb2:	b2db      	uxtb	r3, r3
   13fb4:	001a      	movs	r2, r3
   13fb6:	2301      	movs	r3, #1
   13fb8:	4013      	ands	r3, r2
   13fba:	1e5a      	subs	r2, r3, #1
   13fbc:	4193      	sbcs	r3, r2
   13fbe:	b2db      	uxtb	r3, r3
}
   13fc0:	0018      	movs	r0, r3
   13fc2:	46bd      	mov	sp, r7
   13fc4:	b004      	add	sp, #16
   13fc6:	bd80      	pop	{r7, pc}

00013fc8 <spi_is_ready_to_read>:
{
   13fc8:	b580      	push	{r7, lr}
   13fca:	b084      	sub	sp, #16
   13fcc:	af00      	add	r7, sp, #0
   13fce:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   13fd0:	687b      	ldr	r3, [r7, #4]
   13fd2:	681b      	ldr	r3, [r3, #0]
   13fd4:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   13fd6:	68fb      	ldr	r3, [r7, #12]
   13fd8:	7e1b      	ldrb	r3, [r3, #24]
   13fda:	b2db      	uxtb	r3, r3
   13fdc:	001a      	movs	r2, r3
   13fde:	2304      	movs	r3, #4
   13fe0:	4013      	ands	r3, r2
   13fe2:	1e5a      	subs	r2, r3, #1
   13fe4:	4193      	sbcs	r3, r2
   13fe6:	b2db      	uxtb	r3, r3
}
   13fe8:	0018      	movs	r0, r3
   13fea:	46bd      	mov	sp, r7
   13fec:	b004      	add	sp, #16
   13fee:	bd80      	pop	{r7, pc}

00013ff0 <spi_write>:
{
   13ff0:	b580      	push	{r7, lr}
   13ff2:	b084      	sub	sp, #16
   13ff4:	af00      	add	r7, sp, #0
   13ff6:	6078      	str	r0, [r7, #4]
   13ff8:	000a      	movs	r2, r1
   13ffa:	1cbb      	adds	r3, r7, #2
   13ffc:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   13ffe:	687b      	ldr	r3, [r7, #4]
   14000:	681b      	ldr	r3, [r3, #0]
   14002:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
   14004:	687b      	ldr	r3, [r7, #4]
   14006:	0018      	movs	r0, r3
   14008:	4b0a      	ldr	r3, [pc, #40]	; (14034 <spi_write+0x44>)
   1400a:	4798      	blx	r3
   1400c:	0003      	movs	r3, r0
   1400e:	001a      	movs	r2, r3
   14010:	2301      	movs	r3, #1
   14012:	4053      	eors	r3, r2
   14014:	b2db      	uxtb	r3, r3
   14016:	2b00      	cmp	r3, #0
   14018:	d001      	beq.n	1401e <spi_write+0x2e>
		return STATUS_BUSY;
   1401a:	2305      	movs	r3, #5
   1401c:	e006      	b.n	1402c <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   1401e:	1cbb      	adds	r3, r7, #2
   14020:	881b      	ldrh	r3, [r3, #0]
   14022:	05db      	lsls	r3, r3, #23
   14024:	0dda      	lsrs	r2, r3, #23
   14026:	68fb      	ldr	r3, [r7, #12]
   14028:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
   1402a:	2300      	movs	r3, #0
}
   1402c:	0018      	movs	r0, r3
   1402e:	46bd      	mov	sp, r7
   14030:	b004      	add	sp, #16
   14032:	bd80      	pop	{r7, pc}
   14034:	00013fa1 	.word	0x00013fa1

00014038 <spi_read>:
{
   14038:	b580      	push	{r7, lr}
   1403a:	b084      	sub	sp, #16
   1403c:	af00      	add	r7, sp, #0
   1403e:	6078      	str	r0, [r7, #4]
   14040:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   14042:	687b      	ldr	r3, [r7, #4]
   14044:	681b      	ldr	r3, [r3, #0]
   14046:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
   14048:	687b      	ldr	r3, [r7, #4]
   1404a:	0018      	movs	r0, r3
   1404c:	4b1b      	ldr	r3, [pc, #108]	; (140bc <spi_read+0x84>)
   1404e:	4798      	blx	r3
   14050:	0003      	movs	r3, r0
   14052:	001a      	movs	r2, r3
   14054:	2301      	movs	r3, #1
   14056:	4053      	eors	r3, r2
   14058:	b2db      	uxtb	r3, r3
   1405a:	2b00      	cmp	r3, #0
   1405c:	d001      	beq.n	14062 <spi_read+0x2a>
		return STATUS_ERR_IO;
   1405e:	2310      	movs	r3, #16
   14060:	e027      	b.n	140b2 <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
   14062:	230f      	movs	r3, #15
   14064:	18fb      	adds	r3, r7, r3
   14066:	2200      	movs	r2, #0
   14068:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1406a:	68bb      	ldr	r3, [r7, #8]
   1406c:	8b5b      	ldrh	r3, [r3, #26]
   1406e:	b29b      	uxth	r3, r3
   14070:	001a      	movs	r2, r3
   14072:	2304      	movs	r3, #4
   14074:	4013      	ands	r3, r2
   14076:	d006      	beq.n	14086 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   14078:	230f      	movs	r3, #15
   1407a:	18fb      	adds	r3, r7, r3
   1407c:	221e      	movs	r2, #30
   1407e:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   14080:	68bb      	ldr	r3, [r7, #8]
   14082:	2204      	movs	r2, #4
   14084:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   14086:	687b      	ldr	r3, [r7, #4]
   14088:	799b      	ldrb	r3, [r3, #6]
   1408a:	2b01      	cmp	r3, #1
   1408c:	d108      	bne.n	140a0 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   1408e:	68bb      	ldr	r3, [r7, #8]
   14090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14092:	b29b      	uxth	r3, r3
   14094:	05db      	lsls	r3, r3, #23
   14096:	0ddb      	lsrs	r3, r3, #23
   14098:	b29a      	uxth	r2, r3
   1409a:	683b      	ldr	r3, [r7, #0]
   1409c:	801a      	strh	r2, [r3, #0]
   1409e:	e005      	b.n	140ac <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   140a0:	68bb      	ldr	r3, [r7, #8]
   140a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   140a4:	b2db      	uxtb	r3, r3
   140a6:	b29a      	uxth	r2, r3
   140a8:	683b      	ldr	r3, [r7, #0]
   140aa:	801a      	strh	r2, [r3, #0]
	return retval;
   140ac:	230f      	movs	r3, #15
   140ae:	18fb      	adds	r3, r7, r3
   140b0:	781b      	ldrb	r3, [r3, #0]
}
   140b2:	0018      	movs	r0, r3
   140b4:	46bd      	mov	sp, r7
   140b6:	b004      	add	sp, #16
   140b8:	bd80      	pop	{r7, pc}
   140ba:	46c0      	nop			; (mov r8, r8)
   140bc:	00013fc9 	.word	0x00013fc9

000140c0 <_spi_clear_tx_complete_flag>:
 *
 * \param[in]  module  Pointer to the software instance struct
 */
static void _spi_clear_tx_complete_flag(
		struct spi_module *const module)
{
   140c0:	b580      	push	{r7, lr}
   140c2:	b084      	sub	sp, #16
   140c4:	af00      	add	r7, sp, #0
   140c6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   140c8:	687b      	ldr	r3, [r7, #4]
   140ca:	681b      	ldr	r3, [r3, #0]
   140cc:	60fb      	str	r3, [r7, #12]

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   140ce:	68fb      	ldr	r3, [r7, #12]
   140d0:	2202      	movs	r2, #2
   140d2:	761a      	strb	r2, [r3, #24]
}
   140d4:	46c0      	nop			; (mov r8, r8)
   140d6:	46bd      	mov	sp, r7
   140d8:	b004      	add	sp, #16
   140da:	bd80      	pop	{r7, pc}

000140dc <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   140dc:	b590      	push	{r4, r7, lr}
   140de:	b093      	sub	sp, #76	; 0x4c
   140e0:	af00      	add	r7, sp, #0
   140e2:	6078      	str	r0, [r7, #4]
   140e4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   140e6:	687b      	ldr	r3, [r7, #4]
   140e8:	681b      	ldr	r3, [r3, #0]
   140ea:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
   140ec:	687b      	ldr	r3, [r7, #4]
   140ee:	681b      	ldr	r3, [r3, #0]
   140f0:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   140f2:	231c      	movs	r3, #28
   140f4:	18fb      	adds	r3, r7, r3
   140f6:	0018      	movs	r0, r3
   140f8:	4b85      	ldr	r3, [pc, #532]	; (14310 <_spi_set_config+0x234>)
   140fa:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   140fc:	231c      	movs	r3, #28
   140fe:	18fb      	adds	r3, r7, r3
   14100:	2200      	movs	r2, #0
   14102:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
   14104:	683b      	ldr	r3, [r7, #0]
   14106:	781b      	ldrb	r3, [r3, #0]
   14108:	2b00      	cmp	r3, #0
   1410a:	d103      	bne.n	14114 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   1410c:	231c      	movs	r3, #28
   1410e:	18fb      	adds	r3, r7, r3
   14110:	2200      	movs	r2, #0
   14112:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   14114:	683b      	ldr	r3, [r7, #0]
   14116:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   14118:	230c      	movs	r3, #12
   1411a:	18fb      	adds	r3, r7, r3
   1411c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   1411e:	683b      	ldr	r3, [r7, #0]
   14120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   14122:	230c      	movs	r3, #12
   14124:	18fb      	adds	r3, r7, r3
   14126:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   14128:	683b      	ldr	r3, [r7, #0]
   1412a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   1412c:	230c      	movs	r3, #12
   1412e:	18fb      	adds	r3, r7, r3
   14130:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   14132:	683b      	ldr	r3, [r7, #0]
   14134:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   14136:	230c      	movs	r3, #12
   14138:	18fb      	adds	r3, r7, r3
   1413a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   1413c:	2347      	movs	r3, #71	; 0x47
   1413e:	18fb      	adds	r3, r7, r3
   14140:	2200      	movs	r2, #0
   14142:	701a      	strb	r2, [r3, #0]
   14144:	e02c      	b.n	141a0 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   14146:	2347      	movs	r3, #71	; 0x47
   14148:	18fb      	adds	r3, r7, r3
   1414a:	781a      	ldrb	r2, [r3, #0]
   1414c:	230c      	movs	r3, #12
   1414e:	18fb      	adds	r3, r7, r3
   14150:	0092      	lsls	r2, r2, #2
   14152:	58d3      	ldr	r3, [r2, r3]
   14154:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   14156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   14158:	2b00      	cmp	r3, #0
   1415a:	d109      	bne.n	14170 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   1415c:	2347      	movs	r3, #71	; 0x47
   1415e:	18fb      	adds	r3, r7, r3
   14160:	781a      	ldrb	r2, [r3, #0]
   14162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   14164:	0011      	movs	r1, r2
   14166:	0018      	movs	r0, r3
   14168:	4b6a      	ldr	r3, [pc, #424]	; (14314 <_spi_set_config+0x238>)
   1416a:	4798      	blx	r3
   1416c:	0003      	movs	r3, r0
   1416e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   14170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   14172:	3301      	adds	r3, #1
   14174:	d00d      	beq.n	14192 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   14176:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   14178:	b2da      	uxtb	r2, r3
   1417a:	231c      	movs	r3, #28
   1417c:	18fb      	adds	r3, r7, r3
   1417e:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   14180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   14182:	0c1b      	lsrs	r3, r3, #16
   14184:	b2db      	uxtb	r3, r3
   14186:	221c      	movs	r2, #28
   14188:	18ba      	adds	r2, r7, r2
   1418a:	0011      	movs	r1, r2
   1418c:	0018      	movs	r0, r3
   1418e:	4b62      	ldr	r3, [pc, #392]	; (14318 <_spi_set_config+0x23c>)
   14190:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   14192:	2347      	movs	r3, #71	; 0x47
   14194:	18fb      	adds	r3, r7, r3
   14196:	781a      	ldrb	r2, [r3, #0]
   14198:	2347      	movs	r3, #71	; 0x47
   1419a:	18fb      	adds	r3, r7, r3
   1419c:	3201      	adds	r2, #1
   1419e:	701a      	strb	r2, [r3, #0]
   141a0:	2347      	movs	r3, #71	; 0x47
   141a2:	18fb      	adds	r3, r7, r3
   141a4:	781b      	ldrb	r3, [r3, #0]
   141a6:	2b03      	cmp	r3, #3
   141a8:	d9cd      	bls.n	14146 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
   141aa:	683b      	ldr	r3, [r7, #0]
   141ac:	781a      	ldrb	r2, [r3, #0]
   141ae:	687b      	ldr	r3, [r7, #4]
   141b0:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
   141b2:	683b      	ldr	r3, [r7, #0]
   141b4:	7c1a      	ldrb	r2, [r3, #16]
   141b6:	687b      	ldr	r3, [r7, #4]
   141b8:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
   141ba:	683b      	ldr	r3, [r7, #0]
   141bc:	7c9a      	ldrb	r2, [r3, #18]
   141be:	687b      	ldr	r3, [r7, #4]
   141c0:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
   141c2:	683b      	ldr	r3, [r7, #0]
   141c4:	7d1a      	ldrb	r2, [r3, #20]
   141c6:	687b      	ldr	r3, [r7, #4]
   141c8:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
   141ca:	230a      	movs	r3, #10
   141cc:	18fb      	adds	r3, r7, r3
   141ce:	2200      	movs	r2, #0
   141d0:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
   141d2:	2300      	movs	r3, #0
   141d4:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
   141d6:	2300      	movs	r3, #0
   141d8:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
   141da:	683b      	ldr	r3, [r7, #0]
   141dc:	781b      	ldrb	r3, [r3, #0]
   141de:	2b01      	cmp	r3, #1
   141e0:	d129      	bne.n	14236 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   141e2:	687b      	ldr	r3, [r7, #4]
   141e4:	681b      	ldr	r3, [r3, #0]
   141e6:	0018      	movs	r0, r3
   141e8:	4b4c      	ldr	r3, [pc, #304]	; (1431c <_spi_set_config+0x240>)
   141ea:	4798      	blx	r3
   141ec:	0003      	movs	r3, r0
   141ee:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   141f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   141f2:	3312      	adds	r3, #18
   141f4:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   141f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   141f8:	b2db      	uxtb	r3, r3
   141fa:	0018      	movs	r0, r3
   141fc:	4b48      	ldr	r3, [pc, #288]	; (14320 <_spi_set_config+0x244>)
   141fe:	4798      	blx	r3
   14200:	0003      	movs	r3, r0
   14202:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
   14204:	683b      	ldr	r3, [r7, #0]
   14206:	699b      	ldr	r3, [r3, #24]
   14208:	2223      	movs	r2, #35	; 0x23
   1420a:	18bc      	adds	r4, r7, r2
   1420c:	220a      	movs	r2, #10
   1420e:	18ba      	adds	r2, r7, r2
   14210:	6a79      	ldr	r1, [r7, #36]	; 0x24
   14212:	0018      	movs	r0, r3
   14214:	4b43      	ldr	r3, [pc, #268]	; (14324 <_spi_set_config+0x248>)
   14216:	4798      	blx	r3
   14218:	0003      	movs	r3, r0
   1421a:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
   1421c:	2323      	movs	r3, #35	; 0x23
   1421e:	18fb      	adds	r3, r7, r3
   14220:	781b      	ldrb	r3, [r3, #0]
   14222:	2b00      	cmp	r3, #0
   14224:	d001      	beq.n	1422a <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   14226:	2317      	movs	r3, #23
   14228:	e06d      	b.n	14306 <_spi_set_config+0x22a>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
   1422a:	230a      	movs	r3, #10
   1422c:	18fb      	adds	r3, r7, r3
   1422e:	881b      	ldrh	r3, [r3, #0]
   14230:	b2da      	uxtb	r2, r3
   14232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14234:	731a      	strb	r2, [r3, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
   14236:	683b      	ldr	r3, [r7, #0]
   14238:	781b      	ldrb	r3, [r3, #0]
   1423a:	2b00      	cmp	r3, #0
   1423c:	d11a      	bne.n	14274 <_spi_set_config+0x198>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
   1423e:	683b      	ldr	r3, [r7, #0]
   14240:	699b      	ldr	r3, [r3, #24]
   14242:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
   14244:	683b      	ldr	r3, [r7, #0]
   14246:	8b9b      	ldrh	r3, [r3, #28]
   14248:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
   1424a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1424c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
   1424e:	683a      	ldr	r2, [r7, #0]
   14250:	7f92      	ldrb	r2, [r2, #30]
   14252:	0011      	movs	r1, r2
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
   14254:	683a      	ldr	r2, [r7, #0]
   14256:	7fd2      	ldrb	r2, [r2, #31]
   14258:	0412      	lsls	r2, r2, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
   1425a:	430a      	orrs	r2, r1
		spi_module->ADDR.reg |=
   1425c:	431a      	orrs	r2, r3
   1425e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14260:	625a      	str	r2, [r3, #36]	; 0x24

		if (config->mode_specific.slave.preload_enable) {
   14262:	683b      	ldr	r3, [r7, #0]
   14264:	2220      	movs	r2, #32
   14266:	5c9b      	ldrb	r3, [r3, r2]
   14268:	2b00      	cmp	r3, #0
   1426a:	d003      	beq.n	14274 <_spi_set_config+0x198>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
   1426c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1426e:	2240      	movs	r2, #64	; 0x40
   14270:	4313      	orrs	r3, r2
   14272:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
   14274:	683b      	ldr	r3, [r7, #0]
   14276:	685b      	ldr	r3, [r3, #4]
   14278:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1427a:	4313      	orrs	r3, r2
   1427c:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   1427e:	683b      	ldr	r3, [r7, #0]
   14280:	689b      	ldr	r3, [r3, #8]
   14282:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   14284:	4313      	orrs	r3, r2
   14286:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   14288:	683b      	ldr	r3, [r7, #0]
   1428a:	68db      	ldr	r3, [r3, #12]
   1428c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1428e:	4313      	orrs	r3, r2
   14290:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
   14292:	683b      	ldr	r3, [r7, #0]
   14294:	7c1b      	ldrb	r3, [r3, #16]
   14296:	001a      	movs	r2, r3
   14298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1429a:	4313      	orrs	r3, r2
   1429c:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   1429e:	683b      	ldr	r3, [r7, #0]
   142a0:	7c5b      	ldrb	r3, [r3, #17]
   142a2:	2b00      	cmp	r3, #0
   142a4:	d103      	bne.n	142ae <_spi_set_config+0x1d2>
   142a6:	4b20      	ldr	r3, [pc, #128]	; (14328 <_spi_set_config+0x24c>)
   142a8:	4798      	blx	r3
   142aa:	1e03      	subs	r3, r0, #0
   142ac:	d003      	beq.n	142b6 <_spi_set_config+0x1da>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   142ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   142b0:	2280      	movs	r2, #128	; 0x80
   142b2:	4313      	orrs	r3, r2
   142b4:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
   142b6:	683b      	ldr	r3, [r7, #0]
   142b8:	7c9b      	ldrb	r3, [r3, #18]
   142ba:	2b00      	cmp	r3, #0
   142bc:	d004      	beq.n	142c8 <_spi_set_config+0x1ec>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   142be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   142c0:	2280      	movs	r2, #128	; 0x80
   142c2:	0292      	lsls	r2, r2, #10
   142c4:	4313      	orrs	r3, r2
   142c6:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   142c8:	683b      	ldr	r3, [r7, #0]
   142ca:	7cdb      	ldrb	r3, [r3, #19]
   142cc:	2b00      	cmp	r3, #0
   142ce:	d004      	beq.n	142da <_spi_set_config+0x1fe>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   142d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   142d2:	2280      	movs	r2, #128	; 0x80
   142d4:	0092      	lsls	r2, r2, #2
   142d6:	4313      	orrs	r3, r2
   142d8:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   142da:	683b      	ldr	r3, [r7, #0]
   142dc:	7d1b      	ldrb	r3, [r3, #20]
   142de:	2b00      	cmp	r3, #0
   142e0:	d004      	beq.n	142ec <_spi_set_config+0x210>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   142e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   142e4:	2280      	movs	r2, #128	; 0x80
   142e6:	0192      	lsls	r2, r2, #6
   142e8:	4313      	orrs	r3, r2
   142ea:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
   142ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   142ee:	681a      	ldr	r2, [r3, #0]
   142f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   142f2:	431a      	orrs	r2, r3
   142f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   142f6:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
   142f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   142fa:	685a      	ldr	r2, [r3, #4]
   142fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   142fe:	431a      	orrs	r2, r3
   14300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14302:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   14304:	2300      	movs	r3, #0
}
   14306:	0018      	movs	r0, r3
   14308:	46bd      	mov	sp, r7
   1430a:	b013      	add	sp, #76	; 0x4c
   1430c:	bd90      	pop	{r4, r7, pc}
   1430e:	46c0      	nop			; (mov r8, r8)
   14310:	00013dc5 	.word	0x00013dc5
   14314:	0001527d 	.word	0x0001527d
   14318:	00016235 	.word	0x00016235
   1431c:	00015439 	.word	0x00015439
   14320:	00016071 	.word	0x00016071
   14324:	00014fb3 	.word	0x00014fb3
   14328:	00013f59 	.word	0x00013f59

0001432c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   1432c:	b590      	push	{r4, r7, lr}
   1432e:	b08b      	sub	sp, #44	; 0x2c
   14330:	af00      	add	r7, sp, #0
   14332:	60f8      	str	r0, [r7, #12]
   14334:	60b9      	str	r1, [r7, #8]
   14336:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   14338:	68fb      	ldr	r3, [r7, #12]
   1433a:	68ba      	ldr	r2, [r7, #8]
   1433c:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   1433e:	68fb      	ldr	r3, [r7, #12]
   14340:	681b      	ldr	r3, [r3, #0]
   14342:	61bb      	str	r3, [r7, #24]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   14344:	69bb      	ldr	r3, [r7, #24]
   14346:	681b      	ldr	r3, [r3, #0]
   14348:	2202      	movs	r2, #2
   1434a:	4013      	ands	r3, r2
   1434c:	d001      	beq.n	14352 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   1434e:	231c      	movs	r3, #28
   14350:	e0b9      	b.n	144c6 <spi_init+0x19a>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   14352:	69bb      	ldr	r3, [r7, #24]
   14354:	681b      	ldr	r3, [r3, #0]
   14356:	2201      	movs	r2, #1
   14358:	4013      	ands	r3, r2
   1435a:	d001      	beq.n	14360 <spi_init+0x34>
		return STATUS_BUSY;
   1435c:	2305      	movs	r3, #5
   1435e:	e0b2      	b.n	144c6 <spi_init+0x19a>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   14360:	68fb      	ldr	r3, [r7, #12]
   14362:	681b      	ldr	r3, [r3, #0]
   14364:	0018      	movs	r0, r3
   14366:	4b5a      	ldr	r3, [pc, #360]	; (144d0 <spi_init+0x1a4>)
   14368:	4798      	blx	r3
   1436a:	0003      	movs	r3, r0
   1436c:	617b      	str	r3, [r7, #20]
	uint32_t pm_index, gclk_index;
#if (SAML21) || (SAMR30)
	if (sercom_index == 5) {
   1436e:	697b      	ldr	r3, [r7, #20]
   14370:	2b05      	cmp	r3, #5
   14372:	d104      	bne.n	1437e <spi_init+0x52>
#  ifdef ID_SERCOM5
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
   14374:	2301      	movs	r3, #1
   14376:	627b      	str	r3, [r7, #36]	; 0x24
		gclk_index   =  SERCOM5_GCLK_ID_CORE;
   14378:	2318      	movs	r3, #24
   1437a:	623b      	str	r3, [r7, #32]
   1437c:	e004      	b.n	14388 <spi_init+0x5c>
#  else
		return STATUS_ERR_INVALID_ARG;
#  endif
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
   1437e:	697b      	ldr	r3, [r7, #20]
   14380:	627b      	str	r3, [r7, #36]	; 0x24
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   14382:	697b      	ldr	r3, [r7, #20]
   14384:	3312      	adds	r3, #18
   14386:	623b      	str	r3, [r7, #32]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	/* Turn on module in PM */
#if (SAML21) || (SAMR30)
	if (sercom_index == 5) {
   14388:	697b      	ldr	r3, [r7, #20]
   1438a:	2b05      	cmp	r3, #5
   1438c:	d108      	bne.n	143a0 <spi_init+0x74>
#  ifdef ID_SERCOM5
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
   1438e:	2201      	movs	r2, #1
   14390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14392:	409a      	lsls	r2, r3
   14394:	0013      	movs	r3, r2
   14396:	0019      	movs	r1, r3
   14398:	2003      	movs	r0, #3
   1439a:	4b4e      	ldr	r3, [pc, #312]	; (144d4 <spi_init+0x1a8>)
   1439c:	4798      	blx	r3
   1439e:	e007      	b.n	143b0 <spi_init+0x84>
#  else
		return STATUS_ERR_INVALID_ARG;
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   143a0:	2201      	movs	r2, #1
   143a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   143a4:	409a      	lsls	r2, r3
   143a6:	0013      	movs	r3, r2
   143a8:	0019      	movs	r1, r3
   143aa:	2002      	movs	r0, #2
   143ac:	4b49      	ldr	r3, [pc, #292]	; (144d4 <spi_init+0x1a8>)
   143ae:	4798      	blx	r3
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   143b0:	2310      	movs	r3, #16
   143b2:	18fb      	adds	r3, r7, r3
   143b4:	0018      	movs	r0, r3
   143b6:	4b48      	ldr	r3, [pc, #288]	; (144d8 <spi_init+0x1ac>)
   143b8:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   143ba:	687b      	ldr	r3, [r7, #4]
   143bc:	2224      	movs	r2, #36	; 0x24
   143be:	5c9a      	ldrb	r2, [r3, r2]
   143c0:	2310      	movs	r3, #16
   143c2:	18fb      	adds	r3, r7, r3
   143c4:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   143c6:	6a3b      	ldr	r3, [r7, #32]
   143c8:	b2db      	uxtb	r3, r3
   143ca:	2210      	movs	r2, #16
   143cc:	18ba      	adds	r2, r7, r2
   143ce:	0011      	movs	r1, r2
   143d0:	0018      	movs	r0, r3
   143d2:	4b42      	ldr	r3, [pc, #264]	; (144dc <spi_init+0x1b0>)
   143d4:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   143d6:	6a3b      	ldr	r3, [r7, #32]
   143d8:	b2db      	uxtb	r3, r3
   143da:	0018      	movs	r0, r3
   143dc:	4b40      	ldr	r3, [pc, #256]	; (144e0 <spi_init+0x1b4>)
   143de:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   143e0:	687b      	ldr	r3, [r7, #4]
   143e2:	2224      	movs	r2, #36	; 0x24
   143e4:	5c9b      	ldrb	r3, [r3, r2]
   143e6:	2100      	movs	r1, #0
   143e8:	0018      	movs	r0, r3
   143ea:	4b3e      	ldr	r3, [pc, #248]	; (144e4 <spi_init+0x1b8>)
   143ec:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
   143ee:	687b      	ldr	r3, [r7, #4]
   143f0:	781b      	ldrb	r3, [r3, #0]
   143f2:	2b01      	cmp	r3, #1
   143f4:	d105      	bne.n	14402 <spi_init+0xd6>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   143f6:	69bb      	ldr	r3, [r7, #24]
   143f8:	681b      	ldr	r3, [r3, #0]
   143fa:	220c      	movs	r2, #12
   143fc:	431a      	orrs	r2, r3
   143fe:	69bb      	ldr	r3, [r7, #24]
   14400:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
   14402:	687b      	ldr	r3, [r7, #4]
   14404:	781b      	ldrb	r3, [r3, #0]
   14406:	2b00      	cmp	r3, #0
   14408:	d105      	bne.n	14416 <spi_init+0xea>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
   1440a:	69bb      	ldr	r3, [r7, #24]
   1440c:	681b      	ldr	r3, [r3, #0]
   1440e:	2208      	movs	r2, #8
   14410:	431a      	orrs	r2, r3
   14412:	69bb      	ldr	r3, [r7, #24]
   14414:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   14416:	231f      	movs	r3, #31
   14418:	18fb      	adds	r3, r7, r3
   1441a:	2200      	movs	r2, #0
   1441c:	701a      	strb	r2, [r3, #0]
   1441e:	e010      	b.n	14442 <spi_init+0x116>
		module->callback[i]        = NULL;
   14420:	231f      	movs	r3, #31
   14422:	18fb      	adds	r3, r7, r3
   14424:	781b      	ldrb	r3, [r3, #0]
   14426:	68fa      	ldr	r2, [r7, #12]
   14428:	3302      	adds	r3, #2
   1442a:	009b      	lsls	r3, r3, #2
   1442c:	18d3      	adds	r3, r2, r3
   1442e:	3304      	adds	r3, #4
   14430:	2200      	movs	r2, #0
   14432:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   14434:	231f      	movs	r3, #31
   14436:	18fb      	adds	r3, r7, r3
   14438:	781a      	ldrb	r2, [r3, #0]
   1443a:	231f      	movs	r3, #31
   1443c:	18fb      	adds	r3, r7, r3
   1443e:	3201      	adds	r2, #1
   14440:	701a      	strb	r2, [r3, #0]
   14442:	231f      	movs	r3, #31
   14444:	18fb      	adds	r3, r7, r3
   14446:	781b      	ldrb	r3, [r3, #0]
   14448:	2b06      	cmp	r3, #6
   1444a:	d9e9      	bls.n	14420 <spi_init+0xf4>
	}
	module->tx_buffer_ptr              = NULL;
   1444c:	68fb      	ldr	r3, [r7, #12]
   1444e:	2200      	movs	r2, #0
   14450:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   14452:	68fb      	ldr	r3, [r7, #12]
   14454:	2200      	movs	r2, #0
   14456:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   14458:	68fb      	ldr	r3, [r7, #12]
   1445a:	2200      	movs	r2, #0
   1445c:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   1445e:	68fb      	ldr	r3, [r7, #12]
   14460:	2200      	movs	r2, #0
   14462:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
   14464:	68fb      	ldr	r3, [r7, #12]
   14466:	2236      	movs	r2, #54	; 0x36
   14468:	2100      	movs	r1, #0
   1446a:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
   1446c:	68fb      	ldr	r3, [r7, #12]
   1446e:	2237      	movs	r2, #55	; 0x37
   14470:	2100      	movs	r1, #0
   14472:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
   14474:	68fb      	ldr	r3, [r7, #12]
   14476:	2238      	movs	r2, #56	; 0x38
   14478:	2100      	movs	r1, #0
   1447a:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
   1447c:	68fb      	ldr	r3, [r7, #12]
   1447e:	2203      	movs	r2, #3
   14480:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
   14482:	68fb      	ldr	r3, [r7, #12]
   14484:	2200      	movs	r2, #0
   14486:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   14488:	68fb      	ldr	r3, [r7, #12]
   1448a:	681b      	ldr	r3, [r3, #0]
   1448c:	2213      	movs	r2, #19
   1448e:	18bc      	adds	r4, r7, r2
   14490:	0018      	movs	r0, r3
   14492:	4b0f      	ldr	r3, [pc, #60]	; (144d0 <spi_init+0x1a4>)
   14494:	4798      	blx	r3
   14496:	0003      	movs	r3, r0
   14498:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   1449a:	4a13      	ldr	r2, [pc, #76]	; (144e8 <spi_init+0x1bc>)
   1449c:	2313      	movs	r3, #19
   1449e:	18fb      	adds	r3, r7, r3
   144a0:	781b      	ldrb	r3, [r3, #0]
   144a2:	0011      	movs	r1, r2
   144a4:	0018      	movs	r0, r3
   144a6:	4b11      	ldr	r3, [pc, #68]	; (144ec <spi_init+0x1c0>)
   144a8:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   144aa:	2313      	movs	r3, #19
   144ac:	18fb      	adds	r3, r7, r3
   144ae:	781a      	ldrb	r2, [r3, #0]
   144b0:	4b0f      	ldr	r3, [pc, #60]	; (144f0 <spi_init+0x1c4>)
   144b2:	0092      	lsls	r2, r2, #2
   144b4:	68f9      	ldr	r1, [r7, #12]
   144b6:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
   144b8:	687a      	ldr	r2, [r7, #4]
   144ba:	68fb      	ldr	r3, [r7, #12]
   144bc:	0011      	movs	r1, r2
   144be:	0018      	movs	r0, r3
   144c0:	4b0c      	ldr	r3, [pc, #48]	; (144f4 <spi_init+0x1c8>)
   144c2:	4798      	blx	r3
   144c4:	0003      	movs	r3, r0
}
   144c6:	0018      	movs	r0, r3
   144c8:	46bd      	mov	sp, r7
   144ca:	b00b      	add	sp, #44	; 0x2c
   144cc:	bd90      	pop	{r4, r7, pc}
   144ce:	46c0      	nop			; (mov r8, r8)
   144d0:	00015439 	.word	0x00015439
   144d4:	00013edd 	.word	0x00013edd
   144d8:	00013ec5 	.word	0x00013ec5
   144dc:	00015f81 	.word	0x00015f81
   144e0:	00015fc1 	.word	0x00015fc1
   144e4:	000151f1 	.word	0x000151f1
   144e8:	0000026d 	.word	0x0000026d
   144ec:	00006315 	.word	0x00006315
   144f0:	20001224 	.word	0x20001224
   144f4:	000140dd 	.word	0x000140dd

000144f8 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   144f8:	b590      	push	{r4, r7, lr}
   144fa:	b089      	sub	sp, #36	; 0x24
   144fc:	af00      	add	r7, sp, #0
   144fe:	60f8      	str	r0, [r7, #12]
   14500:	60b9      	str	r1, [r7, #8]
   14502:	0019      	movs	r1, r3
   14504:	1dbb      	adds	r3, r7, #6
   14506:	801a      	strh	r2, [r3, #0]
   14508:	1d3b      	adds	r3, r7, #4
   1450a:	1c0a      	adds	r2, r1, #0
   1450c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   1450e:	68fb      	ldr	r3, [r7, #12]
   14510:	2238      	movs	r2, #56	; 0x38
   14512:	5c9b      	ldrb	r3, [r3, r2]
   14514:	b2db      	uxtb	r3, r3
   14516:	2b05      	cmp	r3, #5
   14518:	d101      	bne.n	1451e <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   1451a:	2305      	movs	r3, #5
   1451c:	e0b8      	b.n	14690 <spi_read_buffer_wait+0x198>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   1451e:	1dbb      	adds	r3, r7, #6
   14520:	881b      	ldrh	r3, [r3, #0]
   14522:	2b00      	cmp	r3, #0
   14524:	d101      	bne.n	1452a <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
   14526:	2317      	movs	r3, #23
   14528:	e0b2      	b.n	14690 <spi_read_buffer_wait+0x198>
	}

	if (!(module->receiver_enabled)) {
   1452a:	68fb      	ldr	r3, [r7, #12]
   1452c:	79db      	ldrb	r3, [r3, #7]
   1452e:	2201      	movs	r2, #1
   14530:	4053      	eors	r3, r2
   14532:	b2db      	uxtb	r3, r3
   14534:	2b00      	cmp	r3, #0
   14536:	d001      	beq.n	1453c <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
   14538:	231c      	movs	r3, #28
   1453a:	e0a9      	b.n	14690 <spi_read_buffer_wait+0x198>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
   1453c:	68fb      	ldr	r3, [r7, #12]
   1453e:	795b      	ldrb	r3, [r3, #5]
   14540:	2b00      	cmp	r3, #0
   14542:	d109      	bne.n	14558 <spi_read_buffer_wait+0x60>
   14544:	68fb      	ldr	r3, [r7, #12]
   14546:	0018      	movs	r0, r3
   14548:	4b53      	ldr	r3, [pc, #332]	; (14698 <spi_read_buffer_wait+0x1a0>)
   1454a:	4798      	blx	r3
   1454c:	1e03      	subs	r3, r0, #0
   1454e:	d003      	beq.n	14558 <spi_read_buffer_wait+0x60>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
   14550:	68fb      	ldr	r3, [r7, #12]
   14552:	0018      	movs	r0, r3
   14554:	4b51      	ldr	r3, [pc, #324]	; (1469c <spi_read_buffer_wait+0x1a4>)
   14556:	4798      	blx	r3
	}
#  endif
	uint16_t rx_pos = 0;
   14558:	231e      	movs	r3, #30
   1455a:	18fb      	adds	r3, r7, r3
   1455c:	2200      	movs	r2, #0
   1455e:	801a      	strh	r2, [r3, #0]

	while (length--) {
   14560:	e08d      	b.n	1467e <spi_read_buffer_wait+0x186>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
   14562:	68fb      	ldr	r3, [r7, #12]
   14564:	795b      	ldrb	r3, [r3, #5]
   14566:	2b01      	cmp	r3, #1
   14568:	d112      	bne.n	14590 <spi_read_buffer_wait+0x98>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
   1456a:	46c0      	nop			; (mov r8, r8)
   1456c:	68fb      	ldr	r3, [r7, #12]
   1456e:	0018      	movs	r0, r3
   14570:	4b4b      	ldr	r3, [pc, #300]	; (146a0 <spi_read_buffer_wait+0x1a8>)
   14572:	4798      	blx	r3
   14574:	0003      	movs	r3, r0
   14576:	001a      	movs	r2, r3
   14578:	2301      	movs	r3, #1
   1457a:	4053      	eors	r3, r2
   1457c:	b2db      	uxtb	r3, r3
   1457e:	2b00      	cmp	r3, #0
   14580:	d1f4      	bne.n	1456c <spi_read_buffer_wait+0x74>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
   14582:	1d3b      	adds	r3, r7, #4
   14584:	881a      	ldrh	r2, [r3, #0]
   14586:	68fb      	ldr	r3, [r7, #12]
   14588:	0011      	movs	r1, r2
   1458a:	0018      	movs	r0, r3
   1458c:	4b45      	ldr	r3, [pc, #276]	; (146a4 <spi_read_buffer_wait+0x1ac>)
   1458e:	4798      	blx	r3
		}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
   14590:	68fb      	ldr	r3, [r7, #12]
   14592:	795b      	ldrb	r3, [r3, #5]
   14594:	2b00      	cmp	r3, #0
   14596:	d12a      	bne.n	145ee <spi_read_buffer_wait+0xf6>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   14598:	2300      	movs	r3, #0
   1459a:	61bb      	str	r3, [r7, #24]
   1459c:	e008      	b.n	145b0 <spi_read_buffer_wait+0xb8>
				if (spi_is_ready_to_read(module)) {
   1459e:	68fb      	ldr	r3, [r7, #12]
   145a0:	0018      	movs	r0, r3
   145a2:	4b41      	ldr	r3, [pc, #260]	; (146a8 <spi_read_buffer_wait+0x1b0>)
   145a4:	4798      	blx	r3
   145a6:	1e03      	subs	r3, r0, #0
   145a8:	d107      	bne.n	145ba <spi_read_buffer_wait+0xc2>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   145aa:	69bb      	ldr	r3, [r7, #24]
   145ac:	3301      	adds	r3, #1
   145ae:	61bb      	str	r3, [r7, #24]
   145b0:	69bb      	ldr	r3, [r7, #24]
   145b2:	4a3e      	ldr	r2, [pc, #248]	; (146ac <spi_read_buffer_wait+0x1b4>)
   145b4:	4293      	cmp	r3, r2
   145b6:	d9f2      	bls.n	1459e <spi_read_buffer_wait+0xa6>
   145b8:	e000      	b.n	145bc <spi_read_buffer_wait+0xc4>
					break;
   145ba:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
   145bc:	68fb      	ldr	r3, [r7, #12]
   145be:	0018      	movs	r0, r3
   145c0:	4b35      	ldr	r3, [pc, #212]	; (14698 <spi_read_buffer_wait+0x1a0>)
   145c2:	4798      	blx	r3
   145c4:	1e03      	subs	r3, r0, #0
   145c6:	d005      	beq.n	145d4 <spi_read_buffer_wait+0xdc>
				_spi_clear_tx_complete_flag(module);
   145c8:	68fb      	ldr	r3, [r7, #12]
   145ca:	0018      	movs	r0, r3
   145cc:	4b33      	ldr	r3, [pc, #204]	; (1469c <spi_read_buffer_wait+0x1a4>)
   145ce:	4798      	blx	r3
				return STATUS_ABORTED;
   145d0:	2304      	movs	r3, #4
   145d2:	e05d      	b.n	14690 <spi_read_buffer_wait+0x198>
			}

			if (!spi_is_ready_to_read(module)) {
   145d4:	68fb      	ldr	r3, [r7, #12]
   145d6:	0018      	movs	r0, r3
   145d8:	4b33      	ldr	r3, [pc, #204]	; (146a8 <spi_read_buffer_wait+0x1b0>)
   145da:	4798      	blx	r3
   145dc:	0003      	movs	r3, r0
   145de:	001a      	movs	r2, r3
   145e0:	2301      	movs	r3, #1
   145e2:	4053      	eors	r3, r2
   145e4:	b2db      	uxtb	r3, r3
   145e6:	2b00      	cmp	r3, #0
   145e8:	d001      	beq.n	145ee <spi_read_buffer_wait+0xf6>
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
   145ea:	2312      	movs	r3, #18
   145ec:	e050      	b.n	14690 <spi_read_buffer_wait+0x198>
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   145ee:	46c0      	nop			; (mov r8, r8)
   145f0:	68fb      	ldr	r3, [r7, #12]
   145f2:	0018      	movs	r0, r3
   145f4:	4b2c      	ldr	r3, [pc, #176]	; (146a8 <spi_read_buffer_wait+0x1b0>)
   145f6:	4798      	blx	r3
   145f8:	0003      	movs	r3, r0
   145fa:	001a      	movs	r2, r3
   145fc:	2301      	movs	r3, #1
   145fe:	4053      	eors	r3, r2
   14600:	b2db      	uxtb	r3, r3
   14602:	2b00      	cmp	r3, #0
   14604:	d1f4      	bne.n	145f0 <spi_read_buffer_wait+0xf8>
		}

		uint16_t received_data = 0;
   14606:	2314      	movs	r3, #20
   14608:	18fb      	adds	r3, r7, r3
   1460a:	2200      	movs	r2, #0
   1460c:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
   1460e:	2317      	movs	r3, #23
   14610:	18fc      	adds	r4, r7, r3
   14612:	2314      	movs	r3, #20
   14614:	18fa      	adds	r2, r7, r3
   14616:	68fb      	ldr	r3, [r7, #12]
   14618:	0011      	movs	r1, r2
   1461a:	0018      	movs	r0, r3
   1461c:	4b24      	ldr	r3, [pc, #144]	; (146b0 <spi_read_buffer_wait+0x1b8>)
   1461e:	4798      	blx	r3
   14620:	0003      	movs	r3, r0
   14622:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   14624:	2317      	movs	r3, #23
   14626:	18fb      	adds	r3, r7, r3
   14628:	781b      	ldrb	r3, [r3, #0]
   1462a:	2b00      	cmp	r3, #0
   1462c:	d003      	beq.n	14636 <spi_read_buffer_wait+0x13e>
			/* Overflow, abort */
			return retval;
   1462e:	2317      	movs	r3, #23
   14630:	18fb      	adds	r3, r7, r3
   14632:	781b      	ldrb	r3, [r3, #0]
   14634:	e02c      	b.n	14690 <spi_read_buffer_wait+0x198>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   14636:	231e      	movs	r3, #30
   14638:	18fb      	adds	r3, r7, r3
   1463a:	881b      	ldrh	r3, [r3, #0]
   1463c:	221e      	movs	r2, #30
   1463e:	18ba      	adds	r2, r7, r2
   14640:	1c59      	adds	r1, r3, #1
   14642:	8011      	strh	r1, [r2, #0]
   14644:	001a      	movs	r2, r3
   14646:	68bb      	ldr	r3, [r7, #8]
   14648:	189b      	adds	r3, r3, r2
   1464a:	2214      	movs	r2, #20
   1464c:	18ba      	adds	r2, r7, r2
   1464e:	8812      	ldrh	r2, [r2, #0]
   14650:	b2d2      	uxtb	r2, r2
   14652:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   14654:	68fb      	ldr	r3, [r7, #12]
   14656:	799b      	ldrb	r3, [r3, #6]
   14658:	2b01      	cmp	r3, #1
   1465a:	d110      	bne.n	1467e <spi_read_buffer_wait+0x186>
			rx_data[rx_pos++] = (received_data >> 8);
   1465c:	231e      	movs	r3, #30
   1465e:	18fb      	adds	r3, r7, r3
   14660:	881b      	ldrh	r3, [r3, #0]
   14662:	221e      	movs	r2, #30
   14664:	18ba      	adds	r2, r7, r2
   14666:	1c59      	adds	r1, r3, #1
   14668:	8011      	strh	r1, [r2, #0]
   1466a:	001a      	movs	r2, r3
   1466c:	68bb      	ldr	r3, [r7, #8]
   1466e:	189b      	adds	r3, r3, r2
   14670:	2214      	movs	r2, #20
   14672:	18ba      	adds	r2, r7, r2
   14674:	8812      	ldrh	r2, [r2, #0]
   14676:	0a12      	lsrs	r2, r2, #8
   14678:	b292      	uxth	r2, r2
   1467a:	b2d2      	uxtb	r2, r2
   1467c:	701a      	strb	r2, [r3, #0]
	while (length--) {
   1467e:	1dbb      	adds	r3, r7, #6
   14680:	881b      	ldrh	r3, [r3, #0]
   14682:	1dba      	adds	r2, r7, #6
   14684:	1e59      	subs	r1, r3, #1
   14686:	8011      	strh	r1, [r2, #0]
   14688:	2b00      	cmp	r3, #0
   1468a:	d000      	beq.n	1468e <spi_read_buffer_wait+0x196>
   1468c:	e769      	b.n	14562 <spi_read_buffer_wait+0x6a>
		}
	}

	return STATUS_OK;
   1468e:	2300      	movs	r3, #0
}
   14690:	0018      	movs	r0, r3
   14692:	46bd      	mov	sp, r7
   14694:	b009      	add	sp, #36	; 0x24
   14696:	bd90      	pop	{r4, r7, pc}
   14698:	00013f79 	.word	0x00013f79
   1469c:	000140c1 	.word	0x000140c1
   146a0:	00013fa1 	.word	0x00013fa1
   146a4:	00013ff1 	.word	0x00013ff1
   146a8:	00013fc9 	.word	0x00013fc9
   146ac:	00002710 	.word	0x00002710
   146b0:	00014039 	.word	0x00014039

000146b4 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   146b4:	b580      	push	{r7, lr}
   146b6:	b086      	sub	sp, #24
   146b8:	af00      	add	r7, sp, #0
   146ba:	60f8      	str	r0, [r7, #12]
   146bc:	60b9      	str	r1, [r7, #8]
   146be:	1dfb      	adds	r3, r7, #7
   146c0:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   146c2:	68fb      	ldr	r3, [r7, #12]
   146c4:	795b      	ldrb	r3, [r3, #5]
   146c6:	2b01      	cmp	r3, #1
   146c8:	d001      	beq.n	146ce <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
   146ca:	2315      	movs	r3, #21
   146cc:	e05c      	b.n	14788 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
   146ce:	68fb      	ldr	r3, [r7, #12]
   146d0:	7a1b      	ldrb	r3, [r3, #8]
   146d2:	2201      	movs	r2, #1
   146d4:	4053      	eors	r3, r2
   146d6:	b2db      	uxtb	r3, r3
   146d8:	2b00      	cmp	r3, #0
   146da:	d054      	beq.n	14786 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
   146dc:	1dfb      	adds	r3, r7, #7
   146de:	781b      	ldrb	r3, [r3, #0]
   146e0:	2b00      	cmp	r3, #0
   146e2:	d04a      	beq.n	1477a <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
   146e4:	68bb      	ldr	r3, [r7, #8]
   146e6:	785b      	ldrb	r3, [r3, #1]
   146e8:	2b00      	cmp	r3, #0
   146ea:	d03f      	beq.n	1476c <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
   146ec:	68fb      	ldr	r3, [r7, #12]
   146ee:	0018      	movs	r0, r3
   146f0:	4b27      	ldr	r3, [pc, #156]	; (14790 <spi_select_slave+0xdc>)
   146f2:	4798      	blx	r3
   146f4:	0003      	movs	r3, r0
   146f6:	001a      	movs	r2, r3
   146f8:	2301      	movs	r3, #1
   146fa:	4053      	eors	r3, r2
   146fc:	b2db      	uxtb	r3, r3
   146fe:	2b00      	cmp	r3, #0
   14700:	d007      	beq.n	14712 <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
   14702:	68bb      	ldr	r3, [r7, #8]
   14704:	781b      	ldrb	r3, [r3, #0]
   14706:	2101      	movs	r1, #1
   14708:	0018      	movs	r0, r3
   1470a:	4b22      	ldr	r3, [pc, #136]	; (14794 <spi_select_slave+0xe0>)
   1470c:	4798      	blx	r3
					return STATUS_BUSY;
   1470e:	2305      	movs	r3, #5
   14710:	e03a      	b.n	14788 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   14712:	68bb      	ldr	r3, [r7, #8]
   14714:	781b      	ldrb	r3, [r3, #0]
   14716:	2100      	movs	r1, #0
   14718:	0018      	movs	r0, r3
   1471a:	4b1e      	ldr	r3, [pc, #120]	; (14794 <spi_select_slave+0xe0>)
   1471c:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
   1471e:	68bb      	ldr	r3, [r7, #8]
   14720:	789b      	ldrb	r3, [r3, #2]
   14722:	b29a      	uxth	r2, r3
   14724:	68fb      	ldr	r3, [r7, #12]
   14726:	0011      	movs	r1, r2
   14728:	0018      	movs	r0, r3
   1472a:	4b1b      	ldr	r3, [pc, #108]	; (14798 <spi_select_slave+0xe4>)
   1472c:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
   1472e:	68fb      	ldr	r3, [r7, #12]
   14730:	79db      	ldrb	r3, [r3, #7]
   14732:	2201      	movs	r2, #1
   14734:	4053      	eors	r3, r2
   14736:	b2db      	uxtb	r3, r3
   14738:	2b00      	cmp	r3, #0
   1473a:	d024      	beq.n	14786 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
   1473c:	46c0      	nop			; (mov r8, r8)
   1473e:	68fb      	ldr	r3, [r7, #12]
   14740:	0018      	movs	r0, r3
   14742:	4b16      	ldr	r3, [pc, #88]	; (1479c <spi_select_slave+0xe8>)
   14744:	4798      	blx	r3
   14746:	0003      	movs	r3, r0
   14748:	001a      	movs	r2, r3
   1474a:	2301      	movs	r3, #1
   1474c:	4053      	eors	r3, r2
   1474e:	b2db      	uxtb	r3, r3
   14750:	2b00      	cmp	r3, #0
   14752:	d1f4      	bne.n	1473e <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
   14754:	2316      	movs	r3, #22
   14756:	18fb      	adds	r3, r7, r3
   14758:	2200      	movs	r2, #0
   1475a:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
   1475c:	2316      	movs	r3, #22
   1475e:	18fa      	adds	r2, r7, r3
   14760:	68fb      	ldr	r3, [r7, #12]
   14762:	0011      	movs	r1, r2
   14764:	0018      	movs	r0, r3
   14766:	4b0e      	ldr	r3, [pc, #56]	; (147a0 <spi_select_slave+0xec>)
   14768:	4798      	blx	r3
   1476a:	e00c      	b.n	14786 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   1476c:	68bb      	ldr	r3, [r7, #8]
   1476e:	781b      	ldrb	r3, [r3, #0]
   14770:	2100      	movs	r1, #0
   14772:	0018      	movs	r0, r3
   14774:	4b07      	ldr	r3, [pc, #28]	; (14794 <spi_select_slave+0xe0>)
   14776:	4798      	blx	r3
   14778:	e005      	b.n	14786 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
   1477a:	68bb      	ldr	r3, [r7, #8]
   1477c:	781b      	ldrb	r3, [r3, #0]
   1477e:	2101      	movs	r1, #1
   14780:	0018      	movs	r0, r3
   14782:	4b04      	ldr	r3, [pc, #16]	; (14794 <spi_select_slave+0xe0>)
   14784:	4798      	blx	r3
		}
	}
	return STATUS_OK;
   14786:	2300      	movs	r3, #0
}
   14788:	0018      	movs	r0, r3
   1478a:	46bd      	mov	sp, r7
   1478c:	b006      	add	sp, #24
   1478e:	bd80      	pop	{r7, pc}
   14790:	00013fa1 	.word	0x00013fa1
   14794:	00013e71 	.word	0x00013e71
   14798:	00013ff1 	.word	0x00013ff1
   1479c:	00013fc9 	.word	0x00013fc9
   147a0:	00014039 	.word	0x00014039

000147a4 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   147a4:	b580      	push	{r7, lr}
   147a6:	b08a      	sub	sp, #40	; 0x28
   147a8:	af00      	add	r7, sp, #0
   147aa:	60f8      	str	r0, [r7, #12]
   147ac:	60b9      	str	r1, [r7, #8]
   147ae:	1dbb      	adds	r3, r7, #6
   147b0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   147b2:	68fb      	ldr	r3, [r7, #12]
   147b4:	2238      	movs	r2, #56	; 0x38
   147b6:	5c9b      	ldrb	r3, [r3, r2]
   147b8:	b2db      	uxtb	r3, r3
   147ba:	2b05      	cmp	r3, #5
   147bc:	d101      	bne.n	147c2 <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   147be:	2305      	movs	r3, #5
   147c0:	e170      	b.n	14aa4 <spi_write_buffer_wait+0x300>
	}
#  endif

	if (length == 0) {
   147c2:	1dbb      	adds	r3, r7, #6
   147c4:	881b      	ldrh	r3, [r3, #0]
   147c6:	2b00      	cmp	r3, #0
   147c8:	d101      	bne.n	147ce <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
   147ca:	2317      	movs	r3, #23
   147cc:	e16a      	b.n	14aa4 <spi_write_buffer_wait+0x300>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
   147ce:	68fb      	ldr	r3, [r7, #12]
   147d0:	795b      	ldrb	r3, [r3, #5]
   147d2:	2b00      	cmp	r3, #0
   147d4:	d109      	bne.n	147ea <spi_write_buffer_wait+0x46>
   147d6:	68fb      	ldr	r3, [r7, #12]
   147d8:	0018      	movs	r0, r3
   147da:	4bb4      	ldr	r3, [pc, #720]	; (14aac <spi_write_buffer_wait+0x308>)
   147dc:	4798      	blx	r3
   147de:	1e03      	subs	r3, r0, #0
   147e0:	d003      	beq.n	147ea <spi_write_buffer_wait+0x46>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
   147e2:	68fb      	ldr	r3, [r7, #12]
   147e4:	0018      	movs	r0, r3
   147e6:	4bb2      	ldr	r3, [pc, #712]	; (14ab0 <spi_write_buffer_wait+0x30c>)
   147e8:	4798      	blx	r3
	}
#  endif

	uint16_t tx_pos = 0;
   147ea:	2326      	movs	r3, #38	; 0x26
   147ec:	18fb      	adds	r3, r7, r3
   147ee:	2200      	movs	r2, #0
   147f0:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
   147f2:	2324      	movs	r3, #36	; 0x24
   147f4:	18fb      	adds	r3, r7, r3
   147f6:	1dba      	adds	r2, r7, #6
   147f8:	8812      	ldrh	r2, [r2, #0]
   147fa:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
   147fc:	e0fe      	b.n	149fc <spi_write_buffer_wait+0x258>
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
   147fe:	68fb      	ldr	r3, [r7, #12]
   14800:	795b      	ldrb	r3, [r3, #5]
   14802:	2b00      	cmp	r3, #0
   14804:	d12a      	bne.n	1485c <spi_write_buffer_wait+0xb8>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   14806:	2300      	movs	r3, #0
   14808:	623b      	str	r3, [r7, #32]
   1480a:	e008      	b.n	1481e <spi_write_buffer_wait+0x7a>
				if (spi_is_ready_to_write(module)) {
   1480c:	68fb      	ldr	r3, [r7, #12]
   1480e:	0018      	movs	r0, r3
   14810:	4ba8      	ldr	r3, [pc, #672]	; (14ab4 <spi_write_buffer_wait+0x310>)
   14812:	4798      	blx	r3
   14814:	1e03      	subs	r3, r0, #0
   14816:	d107      	bne.n	14828 <spi_write_buffer_wait+0x84>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   14818:	6a3b      	ldr	r3, [r7, #32]
   1481a:	3301      	adds	r3, #1
   1481c:	623b      	str	r3, [r7, #32]
   1481e:	6a3b      	ldr	r3, [r7, #32]
   14820:	4aa5      	ldr	r2, [pc, #660]	; (14ab8 <spi_write_buffer_wait+0x314>)
   14822:	4293      	cmp	r3, r2
   14824:	d9f2      	bls.n	1480c <spi_write_buffer_wait+0x68>
   14826:	e000      	b.n	1482a <spi_write_buffer_wait+0x86>
					break;
   14828:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
   1482a:	68fb      	ldr	r3, [r7, #12]
   1482c:	0018      	movs	r0, r3
   1482e:	4b9f      	ldr	r3, [pc, #636]	; (14aac <spi_write_buffer_wait+0x308>)
   14830:	4798      	blx	r3
   14832:	1e03      	subs	r3, r0, #0
   14834:	d005      	beq.n	14842 <spi_write_buffer_wait+0x9e>
				_spi_clear_tx_complete_flag(module);
   14836:	68fb      	ldr	r3, [r7, #12]
   14838:	0018      	movs	r0, r3
   1483a:	4b9d      	ldr	r3, [pc, #628]	; (14ab0 <spi_write_buffer_wait+0x30c>)
   1483c:	4798      	blx	r3
				return STATUS_ABORTED;
   1483e:	2304      	movs	r3, #4
   14840:	e130      	b.n	14aa4 <spi_write_buffer_wait+0x300>
			}

			if (!spi_is_ready_to_write(module)) {
   14842:	68fb      	ldr	r3, [r7, #12]
   14844:	0018      	movs	r0, r3
   14846:	4b9b      	ldr	r3, [pc, #620]	; (14ab4 <spi_write_buffer_wait+0x310>)
   14848:	4798      	blx	r3
   1484a:	0003      	movs	r3, r0
   1484c:	001a      	movs	r2, r3
   1484e:	2301      	movs	r3, #1
   14850:	4053      	eors	r3, r2
   14852:	b2db      	uxtb	r3, r3
   14854:	2b00      	cmp	r3, #0
   14856:	d001      	beq.n	1485c <spi_write_buffer_wait+0xb8>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
   14858:	2312      	movs	r3, #18
   1485a:	e123      	b.n	14aa4 <spi_write_buffer_wait+0x300>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   1485c:	46c0      	nop			; (mov r8, r8)
   1485e:	68fb      	ldr	r3, [r7, #12]
   14860:	0018      	movs	r0, r3
   14862:	4b94      	ldr	r3, [pc, #592]	; (14ab4 <spi_write_buffer_wait+0x310>)
   14864:	4798      	blx	r3
   14866:	0003      	movs	r3, r0
   14868:	001a      	movs	r2, r3
   1486a:	2301      	movs	r3, #1
   1486c:	4053      	eors	r3, r2
   1486e:	b2db      	uxtb	r3, r3
   14870:	2b00      	cmp	r3, #0
   14872:	d1f4      	bne.n	1485e <spi_write_buffer_wait+0xba>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   14874:	2326      	movs	r3, #38	; 0x26
   14876:	18fb      	adds	r3, r7, r3
   14878:	881b      	ldrh	r3, [r3, #0]
   1487a:	2226      	movs	r2, #38	; 0x26
   1487c:	18ba      	adds	r2, r7, r2
   1487e:	1c59      	adds	r1, r3, #1
   14880:	8011      	strh	r1, [r2, #0]
   14882:	001a      	movs	r2, r3
   14884:	68bb      	ldr	r3, [r7, #8]
   14886:	189b      	adds	r3, r3, r2
   14888:	781a      	ldrb	r2, [r3, #0]
   1488a:	231e      	movs	r3, #30
   1488c:	18fb      	adds	r3, r7, r3
   1488e:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   14890:	68fb      	ldr	r3, [r7, #12]
   14892:	799b      	ldrb	r3, [r3, #6]
   14894:	2b01      	cmp	r3, #1
   14896:	d115      	bne.n	148c4 <spi_write_buffer_wait+0x120>
			data_to_send |= (tx_data[tx_pos++] << 8);
   14898:	2326      	movs	r3, #38	; 0x26
   1489a:	18fb      	adds	r3, r7, r3
   1489c:	881b      	ldrh	r3, [r3, #0]
   1489e:	2226      	movs	r2, #38	; 0x26
   148a0:	18ba      	adds	r2, r7, r2
   148a2:	1c59      	adds	r1, r3, #1
   148a4:	8011      	strh	r1, [r2, #0]
   148a6:	001a      	movs	r2, r3
   148a8:	68bb      	ldr	r3, [r7, #8]
   148aa:	189b      	adds	r3, r3, r2
   148ac:	781b      	ldrb	r3, [r3, #0]
   148ae:	021b      	lsls	r3, r3, #8
   148b0:	b21a      	sxth	r2, r3
   148b2:	231e      	movs	r3, #30
   148b4:	18fb      	adds	r3, r7, r3
   148b6:	2100      	movs	r1, #0
   148b8:	5e5b      	ldrsh	r3, [r3, r1]
   148ba:	4313      	orrs	r3, r2
   148bc:	b21a      	sxth	r2, r3
   148be:	231e      	movs	r3, #30
   148c0:	18fb      	adds	r3, r7, r3
   148c2:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   148c4:	231e      	movs	r3, #30
   148c6:	18fb      	adds	r3, r7, r3
   148c8:	881a      	ldrh	r2, [r3, #0]
   148ca:	68fb      	ldr	r3, [r7, #12]
   148cc:	0011      	movs	r1, r2
   148ce:	0018      	movs	r0, r3
   148d0:	4b7a      	ldr	r3, [pc, #488]	; (14abc <spi_write_buffer_wait+0x318>)
   148d2:	4798      	blx	r3

		if (module->receiver_enabled) {
   148d4:	68fb      	ldr	r3, [r7, #12]
   148d6:	79db      	ldrb	r3, [r3, #7]
   148d8:	2224      	movs	r2, #36	; 0x24
   148da:	18ba      	adds	r2, r7, r2
   148dc:	2124      	movs	r1, #36	; 0x24
   148de:	1879      	adds	r1, r7, r1
   148e0:	8809      	ldrh	r1, [r1, #0]
   148e2:	8011      	strh	r1, [r2, #0]
   148e4:	2b00      	cmp	r3, #0
   148e6:	d100      	bne.n	148ea <spi_write_buffer_wait+0x146>
   148e8:	e088      	b.n	149fc <spi_write_buffer_wait+0x258>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
   148ea:	68fb      	ldr	r3, [r7, #12]
   148ec:	795b      	ldrb	r3, [r3, #5]
   148ee:	2b00      	cmp	r3, #0
   148f0:	d000      	beq.n	148f4 <spi_write_buffer_wait+0x150>
   148f2:	e069      	b.n	149c8 <spi_write_buffer_wait+0x224>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   148f4:	2300      	movs	r3, #0
   148f6:	61bb      	str	r3, [r7, #24]
   148f8:	e047      	b.n	1498a <spi_write_buffer_wait+0x1e6>
					if (length && spi_is_ready_to_write(module)) {
   148fa:	1dbb      	adds	r3, r7, #6
   148fc:	881b      	ldrh	r3, [r3, #0]
   148fe:	2b00      	cmp	r3, #0
   14900:	d03a      	beq.n	14978 <spi_write_buffer_wait+0x1d4>
   14902:	68fb      	ldr	r3, [r7, #12]
   14904:	0018      	movs	r0, r3
   14906:	4b6b      	ldr	r3, [pc, #428]	; (14ab4 <spi_write_buffer_wait+0x310>)
   14908:	4798      	blx	r3
   1490a:	1e03      	subs	r3, r0, #0
   1490c:	d034      	beq.n	14978 <spi_write_buffer_wait+0x1d4>
						data_to_send = tx_data[tx_pos++];
   1490e:	2326      	movs	r3, #38	; 0x26
   14910:	18fb      	adds	r3, r7, r3
   14912:	881b      	ldrh	r3, [r3, #0]
   14914:	2226      	movs	r2, #38	; 0x26
   14916:	18ba      	adds	r2, r7, r2
   14918:	1c59      	adds	r1, r3, #1
   1491a:	8011      	strh	r1, [r2, #0]
   1491c:	001a      	movs	r2, r3
   1491e:	68bb      	ldr	r3, [r7, #8]
   14920:	189b      	adds	r3, r3, r2
   14922:	781a      	ldrb	r2, [r3, #0]
   14924:	231e      	movs	r3, #30
   14926:	18fb      	adds	r3, r7, r3
   14928:	801a      	strh	r2, [r3, #0]
						/* If 9-bit data, get next byte to send from the buffer */
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1492a:	68fb      	ldr	r3, [r7, #12]
   1492c:	799b      	ldrb	r3, [r3, #6]
   1492e:	2b01      	cmp	r3, #1
   14930:	d115      	bne.n	1495e <spi_write_buffer_wait+0x1ba>
							data_to_send |= (tx_data[tx_pos++] << 8);
   14932:	2326      	movs	r3, #38	; 0x26
   14934:	18fb      	adds	r3, r7, r3
   14936:	881b      	ldrh	r3, [r3, #0]
   14938:	2226      	movs	r2, #38	; 0x26
   1493a:	18ba      	adds	r2, r7, r2
   1493c:	1c59      	adds	r1, r3, #1
   1493e:	8011      	strh	r1, [r2, #0]
   14940:	001a      	movs	r2, r3
   14942:	68bb      	ldr	r3, [r7, #8]
   14944:	189b      	adds	r3, r3, r2
   14946:	781b      	ldrb	r3, [r3, #0]
   14948:	021b      	lsls	r3, r3, #8
   1494a:	b21a      	sxth	r2, r3
   1494c:	231e      	movs	r3, #30
   1494e:	18fb      	adds	r3, r7, r3
   14950:	2100      	movs	r1, #0
   14952:	5e5b      	ldrsh	r3, [r3, r1]
   14954:	4313      	orrs	r3, r2
   14956:	b21a      	sxth	r2, r3
   14958:	231e      	movs	r3, #30
   1495a:	18fb      	adds	r3, r7, r3
   1495c:	801a      	strh	r2, [r3, #0]
						}

						/* Write the data to send */
						spi_write(module, data_to_send);
   1495e:	231e      	movs	r3, #30
   14960:	18fb      	adds	r3, r7, r3
   14962:	881a      	ldrh	r2, [r3, #0]
   14964:	68fb      	ldr	r3, [r7, #12]
   14966:	0011      	movs	r1, r2
   14968:	0018      	movs	r0, r3
   1496a:	4b54      	ldr	r3, [pc, #336]	; (14abc <spi_write_buffer_wait+0x318>)
   1496c:	4798      	blx	r3
						length--;
   1496e:	1dbb      	adds	r3, r7, #6
   14970:	881a      	ldrh	r2, [r3, #0]
   14972:	1dbb      	adds	r3, r7, #6
   14974:	3a01      	subs	r2, #1
   14976:	801a      	strh	r2, [r3, #0]
					}
					if (spi_is_ready_to_read(module)) {
   14978:	68fb      	ldr	r3, [r7, #12]
   1497a:	0018      	movs	r0, r3
   1497c:	4b50      	ldr	r3, [pc, #320]	; (14ac0 <spi_write_buffer_wait+0x31c>)
   1497e:	4798      	blx	r3
   14980:	1e03      	subs	r3, r0, #0
   14982:	d107      	bne.n	14994 <spi_write_buffer_wait+0x1f0>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   14984:	69bb      	ldr	r3, [r7, #24]
   14986:	3301      	adds	r3, #1
   14988:	61bb      	str	r3, [r7, #24]
   1498a:	69bb      	ldr	r3, [r7, #24]
   1498c:	4a4a      	ldr	r2, [pc, #296]	; (14ab8 <spi_write_buffer_wait+0x314>)
   1498e:	4293      	cmp	r3, r2
   14990:	d9b3      	bls.n	148fa <spi_write_buffer_wait+0x156>
   14992:	e000      	b.n	14996 <spi_write_buffer_wait+0x1f2>
						break;
   14994:	46c0      	nop			; (mov r8, r8)
					}
				}

				/* Check if master has ended the transaction */
				if (spi_is_write_complete(module)) {
   14996:	68fb      	ldr	r3, [r7, #12]
   14998:	0018      	movs	r0, r3
   1499a:	4b44      	ldr	r3, [pc, #272]	; (14aac <spi_write_buffer_wait+0x308>)
   1499c:	4798      	blx	r3
   1499e:	1e03      	subs	r3, r0, #0
   149a0:	d005      	beq.n	149ae <spi_write_buffer_wait+0x20a>
					_spi_clear_tx_complete_flag(module);
   149a2:	68fb      	ldr	r3, [r7, #12]
   149a4:	0018      	movs	r0, r3
   149a6:	4b42      	ldr	r3, [pc, #264]	; (14ab0 <spi_write_buffer_wait+0x30c>)
   149a8:	4798      	blx	r3
					return STATUS_ABORTED;
   149aa:	2304      	movs	r3, #4
   149ac:	e07a      	b.n	14aa4 <spi_write_buffer_wait+0x300>
				}

				if (!spi_is_ready_to_read(module)) {
   149ae:	68fb      	ldr	r3, [r7, #12]
   149b0:	0018      	movs	r0, r3
   149b2:	4b43      	ldr	r3, [pc, #268]	; (14ac0 <spi_write_buffer_wait+0x31c>)
   149b4:	4798      	blx	r3
   149b6:	0003      	movs	r3, r0
   149b8:	001a      	movs	r2, r3
   149ba:	2301      	movs	r3, #1
   149bc:	4053      	eors	r3, r2
   149be:	b2db      	uxtb	r3, r3
   149c0:	2b00      	cmp	r3, #0
   149c2:	d001      	beq.n	149c8 <spi_write_buffer_wait+0x224>
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
   149c4:	2312      	movs	r3, #18
   149c6:	e06d      	b.n	14aa4 <spi_write_buffer_wait+0x300>
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
   149c8:	46c0      	nop			; (mov r8, r8)
   149ca:	68fb      	ldr	r3, [r7, #12]
   149cc:	0018      	movs	r0, r3
   149ce:	4b3c      	ldr	r3, [pc, #240]	; (14ac0 <spi_write_buffer_wait+0x31c>)
   149d0:	4798      	blx	r3
   149d2:	0003      	movs	r3, r0
   149d4:	001a      	movs	r2, r3
   149d6:	2301      	movs	r3, #1
   149d8:	4053      	eors	r3, r2
   149da:	b2db      	uxtb	r3, r3
   149dc:	2b00      	cmp	r3, #0
   149de:	d1f4      	bne.n	149ca <spi_write_buffer_wait+0x226>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
   149e0:	2312      	movs	r3, #18
   149e2:	18fa      	adds	r2, r7, r3
   149e4:	68fb      	ldr	r3, [r7, #12]
   149e6:	0011      	movs	r1, r2
   149e8:	0018      	movs	r0, r3
   149ea:	4b36      	ldr	r3, [pc, #216]	; (14ac4 <spi_write_buffer_wait+0x320>)
   149ec:	4798      	blx	r3
			flush_length--;
   149ee:	2324      	movs	r3, #36	; 0x24
   149f0:	18fb      	adds	r3, r7, r3
   149f2:	881a      	ldrh	r2, [r3, #0]
   149f4:	2324      	movs	r3, #36	; 0x24
   149f6:	18fb      	adds	r3, r7, r3
   149f8:	3a01      	subs	r2, #1
   149fa:	801a      	strh	r2, [r3, #0]
	while (length--) {
   149fc:	1dbb      	adds	r3, r7, #6
   149fe:	881b      	ldrh	r3, [r3, #0]
   14a00:	1dba      	adds	r2, r7, #6
   14a02:	1e59      	subs	r1, r3, #1
   14a04:	8011      	strh	r1, [r2, #0]
   14a06:	2b00      	cmp	r3, #0
   14a08:	d000      	beq.n	14a0c <spi_write_buffer_wait+0x268>
   14a0a:	e6f8      	b.n	147fe <spi_write_buffer_wait+0x5a>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   14a0c:	68fb      	ldr	r3, [r7, #12]
   14a0e:	795b      	ldrb	r3, [r3, #5]
   14a10:	2b01      	cmp	r3, #1
   14a12:	d10b      	bne.n	14a2c <spi_write_buffer_wait+0x288>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   14a14:	46c0      	nop			; (mov r8, r8)
   14a16:	68fb      	ldr	r3, [r7, #12]
   14a18:	0018      	movs	r0, r3
   14a1a:	4b24      	ldr	r3, [pc, #144]	; (14aac <spi_write_buffer_wait+0x308>)
   14a1c:	4798      	blx	r3
   14a1e:	0003      	movs	r3, r0
   14a20:	001a      	movs	r2, r3
   14a22:	2301      	movs	r3, #1
   14a24:	4053      	eors	r3, r2
   14a26:	b2db      	uxtb	r3, r3
   14a28:	2b00      	cmp	r3, #0
   14a2a:	d1f4      	bne.n	14a16 <spi_write_buffer_wait+0x272>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
   14a2c:	68fb      	ldr	r3, [r7, #12]
   14a2e:	795b      	ldrb	r3, [r3, #5]
   14a30:	2b00      	cmp	r3, #0
   14a32:	d136      	bne.n	14aa2 <spi_write_buffer_wait+0x2fe>
		if (module->receiver_enabled) {
   14a34:	68fb      	ldr	r3, [r7, #12]
   14a36:	79db      	ldrb	r3, [r3, #7]
   14a38:	2b00      	cmp	r3, #0
   14a3a:	d032      	beq.n	14aa2 <spi_write_buffer_wait+0x2fe>
			while (flush_length) {
   14a3c:	e02c      	b.n	14a98 <spi_write_buffer_wait+0x2f4>
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   14a3e:	2300      	movs	r3, #0
   14a40:	617b      	str	r3, [r7, #20]
   14a42:	e008      	b.n	14a56 <spi_write_buffer_wait+0x2b2>
					if (spi_is_ready_to_read(module)) {
   14a44:	68fb      	ldr	r3, [r7, #12]
   14a46:	0018      	movs	r0, r3
   14a48:	4b1d      	ldr	r3, [pc, #116]	; (14ac0 <spi_write_buffer_wait+0x31c>)
   14a4a:	4798      	blx	r3
   14a4c:	1e03      	subs	r3, r0, #0
   14a4e:	d107      	bne.n	14a60 <spi_write_buffer_wait+0x2bc>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   14a50:	697b      	ldr	r3, [r7, #20]
   14a52:	3301      	adds	r3, #1
   14a54:	617b      	str	r3, [r7, #20]
   14a56:	697b      	ldr	r3, [r7, #20]
   14a58:	4a17      	ldr	r2, [pc, #92]	; (14ab8 <spi_write_buffer_wait+0x314>)
   14a5a:	4293      	cmp	r3, r2
   14a5c:	d9f2      	bls.n	14a44 <spi_write_buffer_wait+0x2a0>
   14a5e:	e000      	b.n	14a62 <spi_write_buffer_wait+0x2be>
						break;
   14a60:	46c0      	nop			; (mov r8, r8)
					}
				}
				if (!spi_is_ready_to_read(module)) {
   14a62:	68fb      	ldr	r3, [r7, #12]
   14a64:	0018      	movs	r0, r3
   14a66:	4b16      	ldr	r3, [pc, #88]	; (14ac0 <spi_write_buffer_wait+0x31c>)
   14a68:	4798      	blx	r3
   14a6a:	0003      	movs	r3, r0
   14a6c:	001a      	movs	r2, r3
   14a6e:	2301      	movs	r3, #1
   14a70:	4053      	eors	r3, r2
   14a72:	b2db      	uxtb	r3, r3
   14a74:	2b00      	cmp	r3, #0
   14a76:	d001      	beq.n	14a7c <spi_write_buffer_wait+0x2d8>
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
   14a78:	2312      	movs	r3, #18
   14a7a:	e013      	b.n	14aa4 <spi_write_buffer_wait+0x300>
				}
				/* Flush read buffer */
				uint16_t flush;
				spi_read(module, &flush);
   14a7c:	2310      	movs	r3, #16
   14a7e:	18fa      	adds	r2, r7, r3
   14a80:	68fb      	ldr	r3, [r7, #12]
   14a82:	0011      	movs	r1, r2
   14a84:	0018      	movs	r0, r3
   14a86:	4b0f      	ldr	r3, [pc, #60]	; (14ac4 <spi_write_buffer_wait+0x320>)
   14a88:	4798      	blx	r3
				flush_length--;
   14a8a:	2324      	movs	r3, #36	; 0x24
   14a8c:	18fb      	adds	r3, r7, r3
   14a8e:	881a      	ldrh	r2, [r3, #0]
   14a90:	2324      	movs	r3, #36	; 0x24
   14a92:	18fb      	adds	r3, r7, r3
   14a94:	3a01      	subs	r2, #1
   14a96:	801a      	strh	r2, [r3, #0]
			while (flush_length) {
   14a98:	2324      	movs	r3, #36	; 0x24
   14a9a:	18fb      	adds	r3, r7, r3
   14a9c:	881b      	ldrh	r3, [r3, #0]
   14a9e:	2b00      	cmp	r3, #0
   14aa0:	d1cd      	bne.n	14a3e <spi_write_buffer_wait+0x29a>
			}
		}
	}
#  endif
	return STATUS_OK;
   14aa2:	2300      	movs	r3, #0
}
   14aa4:	0018      	movs	r0, r3
   14aa6:	46bd      	mov	sp, r7
   14aa8:	b00a      	add	sp, #40	; 0x28
   14aaa:	bd80      	pop	{r7, pc}
   14aac:	00013f79 	.word	0x00013f79
   14ab0:	000140c1 	.word	0x000140c1
   14ab4:	00013fa1 	.word	0x00013fa1
   14ab8:	00002710 	.word	0x00002710
   14abc:	00013ff1 	.word	0x00013ff1
   14ac0:	00013fc9 	.word	0x00013fc9
   14ac4:	00014039 	.word	0x00014039

00014ac8 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
   14ac8:	b590      	push	{r4, r7, lr}
   14aca:	b08d      	sub	sp, #52	; 0x34
   14acc:	af00      	add	r7, sp, #0
   14ace:	60f8      	str	r0, [r7, #12]
   14ad0:	60b9      	str	r1, [r7, #8]
   14ad2:	607a      	str	r2, [r7, #4]
   14ad4:	001a      	movs	r2, r3
   14ad6:	1cbb      	adds	r3, r7, #2
   14ad8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   14ada:	68fb      	ldr	r3, [r7, #12]
   14adc:	2238      	movs	r2, #56	; 0x38
   14ade:	5c9b      	ldrb	r3, [r3, r2]
   14ae0:	b2db      	uxtb	r3, r3
   14ae2:	2b05      	cmp	r3, #5
   14ae4:	d101      	bne.n	14aea <spi_transceive_buffer_wait+0x22>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   14ae6:	2305      	movs	r3, #5
   14ae8:	e1e3      	b.n	14eb2 <spi_transceive_buffer_wait+0x3ea>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   14aea:	1cbb      	adds	r3, r7, #2
   14aec:	881b      	ldrh	r3, [r3, #0]
   14aee:	2b00      	cmp	r3, #0
   14af0:	d101      	bne.n	14af6 <spi_transceive_buffer_wait+0x2e>
		return STATUS_ERR_INVALID_ARG;
   14af2:	2317      	movs	r3, #23
   14af4:	e1dd      	b.n	14eb2 <spi_transceive_buffer_wait+0x3ea>
	}

	if (!(module->receiver_enabled)) {
   14af6:	68fb      	ldr	r3, [r7, #12]
   14af8:	79db      	ldrb	r3, [r3, #7]
   14afa:	2201      	movs	r2, #1
   14afc:	4053      	eors	r3, r2
   14afe:	b2db      	uxtb	r3, r3
   14b00:	2b00      	cmp	r3, #0
   14b02:	d001      	beq.n	14b08 <spi_transceive_buffer_wait+0x40>
		return STATUS_ERR_DENIED;
   14b04:	231c      	movs	r3, #28
   14b06:	e1d4      	b.n	14eb2 <spi_transceive_buffer_wait+0x3ea>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
   14b08:	68fb      	ldr	r3, [r7, #12]
   14b0a:	795b      	ldrb	r3, [r3, #5]
   14b0c:	2b00      	cmp	r3, #0
   14b0e:	d109      	bne.n	14b24 <spi_transceive_buffer_wait+0x5c>
   14b10:	68fb      	ldr	r3, [r7, #12]
   14b12:	0018      	movs	r0, r3
   14b14:	4bca      	ldr	r3, [pc, #808]	; (14e40 <spi_transceive_buffer_wait+0x378>)
   14b16:	4798      	blx	r3
   14b18:	1e03      	subs	r3, r0, #0
   14b1a:	d003      	beq.n	14b24 <spi_transceive_buffer_wait+0x5c>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
   14b1c:	68fb      	ldr	r3, [r7, #12]
   14b1e:	0018      	movs	r0, r3
   14b20:	4bc8      	ldr	r3, [pc, #800]	; (14e44 <spi_transceive_buffer_wait+0x37c>)
   14b22:	4798      	blx	r3
	}
#  endif

	uint16_t tx_pos = 0;
   14b24:	232e      	movs	r3, #46	; 0x2e
   14b26:	18fb      	adds	r3, r7, r3
   14b28:	2200      	movs	r2, #0
   14b2a:	801a      	strh	r2, [r3, #0]
	uint16_t rx_pos = 0;
   14b2c:	232c      	movs	r3, #44	; 0x2c
   14b2e:	18fb      	adds	r3, r7, r3
   14b30:	2200      	movs	r2, #0
   14b32:	801a      	strh	r2, [r3, #0]
	uint16_t rx_length = length;
   14b34:	232a      	movs	r3, #42	; 0x2a
   14b36:	18fb      	adds	r3, r7, r3
   14b38:	1cba      	adds	r2, r7, #2
   14b3a:	8812      	ldrh	r2, [r2, #0]
   14b3c:	801a      	strh	r2, [r3, #0]

	/* Send and receive buffer */
	while (length--) {
   14b3e:	e123      	b.n	14d88 <spi_transceive_buffer_wait+0x2c0>
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
   14b40:	68fb      	ldr	r3, [r7, #12]
   14b42:	795b      	ldrb	r3, [r3, #5]
   14b44:	2b00      	cmp	r3, #0
   14b46:	d12a      	bne.n	14b9e <spi_transceive_buffer_wait+0xd6>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   14b48:	2300      	movs	r3, #0
   14b4a:	627b      	str	r3, [r7, #36]	; 0x24
   14b4c:	e008      	b.n	14b60 <spi_transceive_buffer_wait+0x98>
				if (spi_is_ready_to_write(module)) {
   14b4e:	68fb      	ldr	r3, [r7, #12]
   14b50:	0018      	movs	r0, r3
   14b52:	4bbd      	ldr	r3, [pc, #756]	; (14e48 <spi_transceive_buffer_wait+0x380>)
   14b54:	4798      	blx	r3
   14b56:	1e03      	subs	r3, r0, #0
   14b58:	d107      	bne.n	14b6a <spi_transceive_buffer_wait+0xa2>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   14b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14b5c:	3301      	adds	r3, #1
   14b5e:	627b      	str	r3, [r7, #36]	; 0x24
   14b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14b62:	4aba      	ldr	r2, [pc, #744]	; (14e4c <spi_transceive_buffer_wait+0x384>)
   14b64:	4293      	cmp	r3, r2
   14b66:	d9f2      	bls.n	14b4e <spi_transceive_buffer_wait+0x86>
   14b68:	e000      	b.n	14b6c <spi_transceive_buffer_wait+0xa4>
					break;
   14b6a:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
   14b6c:	68fb      	ldr	r3, [r7, #12]
   14b6e:	0018      	movs	r0, r3
   14b70:	4bb3      	ldr	r3, [pc, #716]	; (14e40 <spi_transceive_buffer_wait+0x378>)
   14b72:	4798      	blx	r3
   14b74:	1e03      	subs	r3, r0, #0
   14b76:	d005      	beq.n	14b84 <spi_transceive_buffer_wait+0xbc>
				_spi_clear_tx_complete_flag(module);
   14b78:	68fb      	ldr	r3, [r7, #12]
   14b7a:	0018      	movs	r0, r3
   14b7c:	4bb1      	ldr	r3, [pc, #708]	; (14e44 <spi_transceive_buffer_wait+0x37c>)
   14b7e:	4798      	blx	r3
				return STATUS_ABORTED;
   14b80:	2304      	movs	r3, #4
   14b82:	e196      	b.n	14eb2 <spi_transceive_buffer_wait+0x3ea>
			}

			if (!spi_is_ready_to_write(module)) {
   14b84:	68fb      	ldr	r3, [r7, #12]
   14b86:	0018      	movs	r0, r3
   14b88:	4baf      	ldr	r3, [pc, #700]	; (14e48 <spi_transceive_buffer_wait+0x380>)
   14b8a:	4798      	blx	r3
   14b8c:	0003      	movs	r3, r0
   14b8e:	001a      	movs	r2, r3
   14b90:	2301      	movs	r3, #1
   14b92:	4053      	eors	r3, r2
   14b94:	b2db      	uxtb	r3, r3
   14b96:	2b00      	cmp	r3, #0
   14b98:	d001      	beq.n	14b9e <spi_transceive_buffer_wait+0xd6>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
   14b9a:	2312      	movs	r3, #18
   14b9c:	e189      	b.n	14eb2 <spi_transceive_buffer_wait+0x3ea>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   14b9e:	46c0      	nop			; (mov r8, r8)
   14ba0:	68fb      	ldr	r3, [r7, #12]
   14ba2:	0018      	movs	r0, r3
   14ba4:	4ba8      	ldr	r3, [pc, #672]	; (14e48 <spi_transceive_buffer_wait+0x380>)
   14ba6:	4798      	blx	r3
   14ba8:	0003      	movs	r3, r0
   14baa:	001a      	movs	r2, r3
   14bac:	2301      	movs	r3, #1
   14bae:	4053      	eors	r3, r2
   14bb0:	b2db      	uxtb	r3, r3
   14bb2:	2b00      	cmp	r3, #0
   14bb4:	d1f4      	bne.n	14ba0 <spi_transceive_buffer_wait+0xd8>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   14bb6:	232e      	movs	r3, #46	; 0x2e
   14bb8:	18fb      	adds	r3, r7, r3
   14bba:	881b      	ldrh	r3, [r3, #0]
   14bbc:	222e      	movs	r2, #46	; 0x2e
   14bbe:	18ba      	adds	r2, r7, r2
   14bc0:	1c59      	adds	r1, r3, #1
   14bc2:	8011      	strh	r1, [r2, #0]
   14bc4:	001a      	movs	r2, r3
   14bc6:	68bb      	ldr	r3, [r7, #8]
   14bc8:	189b      	adds	r3, r3, r2
   14bca:	781a      	ldrb	r2, [r3, #0]
   14bcc:	2322      	movs	r3, #34	; 0x22
   14bce:	18fb      	adds	r3, r7, r3
   14bd0:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   14bd2:	68fb      	ldr	r3, [r7, #12]
   14bd4:	799b      	ldrb	r3, [r3, #6]
   14bd6:	2b01      	cmp	r3, #1
   14bd8:	d115      	bne.n	14c06 <spi_transceive_buffer_wait+0x13e>
			data_to_send |= (tx_data[tx_pos++] << 8);
   14bda:	232e      	movs	r3, #46	; 0x2e
   14bdc:	18fb      	adds	r3, r7, r3
   14bde:	881b      	ldrh	r3, [r3, #0]
   14be0:	222e      	movs	r2, #46	; 0x2e
   14be2:	18ba      	adds	r2, r7, r2
   14be4:	1c59      	adds	r1, r3, #1
   14be6:	8011      	strh	r1, [r2, #0]
   14be8:	001a      	movs	r2, r3
   14bea:	68bb      	ldr	r3, [r7, #8]
   14bec:	189b      	adds	r3, r3, r2
   14bee:	781b      	ldrb	r3, [r3, #0]
   14bf0:	021b      	lsls	r3, r3, #8
   14bf2:	b21a      	sxth	r2, r3
   14bf4:	2322      	movs	r3, #34	; 0x22
   14bf6:	18fb      	adds	r3, r7, r3
   14bf8:	2100      	movs	r1, #0
   14bfa:	5e5b      	ldrsh	r3, [r3, r1]
   14bfc:	4313      	orrs	r3, r2
   14bfe:	b21a      	sxth	r2, r3
   14c00:	2322      	movs	r3, #34	; 0x22
   14c02:	18fb      	adds	r3, r7, r3
   14c04:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   14c06:	2322      	movs	r3, #34	; 0x22
   14c08:	18fb      	adds	r3, r7, r3
   14c0a:	881a      	ldrh	r2, [r3, #0]
   14c0c:	68fb      	ldr	r3, [r7, #12]
   14c0e:	0011      	movs	r1, r2
   14c10:	0018      	movs	r0, r3
   14c12:	4b8f      	ldr	r3, [pc, #572]	; (14e50 <spi_transceive_buffer_wait+0x388>)
   14c14:	4798      	blx	r3

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
   14c16:	68fb      	ldr	r3, [r7, #12]
   14c18:	795b      	ldrb	r3, [r3, #5]
   14c1a:	2b00      	cmp	r3, #0
   14c1c:	d165      	bne.n	14cea <spi_transceive_buffer_wait+0x222>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   14c1e:	2300      	movs	r3, #0
   14c20:	61fb      	str	r3, [r7, #28]
   14c22:	e043      	b.n	14cac <spi_transceive_buffer_wait+0x1e4>
				if (spi_is_ready_to_write(module)) {
   14c24:	68fb      	ldr	r3, [r7, #12]
   14c26:	0018      	movs	r0, r3
   14c28:	4b87      	ldr	r3, [pc, #540]	; (14e48 <spi_transceive_buffer_wait+0x380>)
   14c2a:	4798      	blx	r3
   14c2c:	1e03      	subs	r3, r0, #0
   14c2e:	d034      	beq.n	14c9a <spi_transceive_buffer_wait+0x1d2>
					data_to_send = tx_data[tx_pos++];
   14c30:	232e      	movs	r3, #46	; 0x2e
   14c32:	18fb      	adds	r3, r7, r3
   14c34:	881b      	ldrh	r3, [r3, #0]
   14c36:	222e      	movs	r2, #46	; 0x2e
   14c38:	18ba      	adds	r2, r7, r2
   14c3a:	1c59      	adds	r1, r3, #1
   14c3c:	8011      	strh	r1, [r2, #0]
   14c3e:	001a      	movs	r2, r3
   14c40:	68bb      	ldr	r3, [r7, #8]
   14c42:	189b      	adds	r3, r3, r2
   14c44:	781a      	ldrb	r2, [r3, #0]
   14c46:	2322      	movs	r3, #34	; 0x22
   14c48:	18fb      	adds	r3, r7, r3
   14c4a:	801a      	strh	r2, [r3, #0]
					/* If 9-bit data, get next byte to send from the buffer */
					if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   14c4c:	68fb      	ldr	r3, [r7, #12]
   14c4e:	799b      	ldrb	r3, [r3, #6]
   14c50:	2b01      	cmp	r3, #1
   14c52:	d115      	bne.n	14c80 <spi_transceive_buffer_wait+0x1b8>
						data_to_send |= (tx_data[tx_pos++] << 8);
   14c54:	232e      	movs	r3, #46	; 0x2e
   14c56:	18fb      	adds	r3, r7, r3
   14c58:	881b      	ldrh	r3, [r3, #0]
   14c5a:	222e      	movs	r2, #46	; 0x2e
   14c5c:	18ba      	adds	r2, r7, r2
   14c5e:	1c59      	adds	r1, r3, #1
   14c60:	8011      	strh	r1, [r2, #0]
   14c62:	001a      	movs	r2, r3
   14c64:	68bb      	ldr	r3, [r7, #8]
   14c66:	189b      	adds	r3, r3, r2
   14c68:	781b      	ldrb	r3, [r3, #0]
   14c6a:	021b      	lsls	r3, r3, #8
   14c6c:	b21a      	sxth	r2, r3
   14c6e:	2322      	movs	r3, #34	; 0x22
   14c70:	18fb      	adds	r3, r7, r3
   14c72:	2100      	movs	r1, #0
   14c74:	5e5b      	ldrsh	r3, [r3, r1]
   14c76:	4313      	orrs	r3, r2
   14c78:	b21a      	sxth	r2, r3
   14c7a:	2322      	movs	r3, #34	; 0x22
   14c7c:	18fb      	adds	r3, r7, r3
   14c7e:	801a      	strh	r2, [r3, #0]
					}

					/* Write the data to send */
					spi_write(module, data_to_send);
   14c80:	2322      	movs	r3, #34	; 0x22
   14c82:	18fb      	adds	r3, r7, r3
   14c84:	881a      	ldrh	r2, [r3, #0]
   14c86:	68fb      	ldr	r3, [r7, #12]
   14c88:	0011      	movs	r1, r2
   14c8a:	0018      	movs	r0, r3
   14c8c:	4b70      	ldr	r3, [pc, #448]	; (14e50 <spi_transceive_buffer_wait+0x388>)
   14c8e:	4798      	blx	r3
					length--;
   14c90:	1cbb      	adds	r3, r7, #2
   14c92:	881a      	ldrh	r2, [r3, #0]
   14c94:	1cbb      	adds	r3, r7, #2
   14c96:	3a01      	subs	r2, #1
   14c98:	801a      	strh	r2, [r3, #0]
				}
				if (spi_is_ready_to_read(module)) {
   14c9a:	68fb      	ldr	r3, [r7, #12]
   14c9c:	0018      	movs	r0, r3
   14c9e:	4b6d      	ldr	r3, [pc, #436]	; (14e54 <spi_transceive_buffer_wait+0x38c>)
   14ca0:	4798      	blx	r3
   14ca2:	1e03      	subs	r3, r0, #0
   14ca4:	d107      	bne.n	14cb6 <spi_transceive_buffer_wait+0x1ee>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   14ca6:	69fb      	ldr	r3, [r7, #28]
   14ca8:	3301      	adds	r3, #1
   14caa:	61fb      	str	r3, [r7, #28]
   14cac:	69fb      	ldr	r3, [r7, #28]
   14cae:	4a67      	ldr	r2, [pc, #412]	; (14e4c <spi_transceive_buffer_wait+0x384>)
   14cb0:	4293      	cmp	r3, r2
   14cb2:	d9b7      	bls.n	14c24 <spi_transceive_buffer_wait+0x15c>
   14cb4:	e000      	b.n	14cb8 <spi_transceive_buffer_wait+0x1f0>
					break;
   14cb6:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
   14cb8:	68fb      	ldr	r3, [r7, #12]
   14cba:	0018      	movs	r0, r3
   14cbc:	4b60      	ldr	r3, [pc, #384]	; (14e40 <spi_transceive_buffer_wait+0x378>)
   14cbe:	4798      	blx	r3
   14cc0:	1e03      	subs	r3, r0, #0
   14cc2:	d005      	beq.n	14cd0 <spi_transceive_buffer_wait+0x208>
				_spi_clear_tx_complete_flag(module);
   14cc4:	68fb      	ldr	r3, [r7, #12]
   14cc6:	0018      	movs	r0, r3
   14cc8:	4b5e      	ldr	r3, [pc, #376]	; (14e44 <spi_transceive_buffer_wait+0x37c>)
   14cca:	4798      	blx	r3
				return STATUS_ABORTED;
   14ccc:	2304      	movs	r3, #4
   14cce:	e0f0      	b.n	14eb2 <spi_transceive_buffer_wait+0x3ea>
			}

			if (!spi_is_ready_to_read(module)) {
   14cd0:	68fb      	ldr	r3, [r7, #12]
   14cd2:	0018      	movs	r0, r3
   14cd4:	4b5f      	ldr	r3, [pc, #380]	; (14e54 <spi_transceive_buffer_wait+0x38c>)
   14cd6:	4798      	blx	r3
   14cd8:	0003      	movs	r3, r0
   14cda:	001a      	movs	r2, r3
   14cdc:	2301      	movs	r3, #1
   14cde:	4053      	eors	r3, r2
   14ce0:	b2db      	uxtb	r3, r3
   14ce2:	2b00      	cmp	r3, #0
   14ce4:	d001      	beq.n	14cea <spi_transceive_buffer_wait+0x222>
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
   14ce6:	2312      	movs	r3, #18
   14ce8:	e0e3      	b.n	14eb2 <spi_transceive_buffer_wait+0x3ea>
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   14cea:	46c0      	nop			; (mov r8, r8)
   14cec:	68fb      	ldr	r3, [r7, #12]
   14cee:	0018      	movs	r0, r3
   14cf0:	4b58      	ldr	r3, [pc, #352]	; (14e54 <spi_transceive_buffer_wait+0x38c>)
   14cf2:	4798      	blx	r3
   14cf4:	0003      	movs	r3, r0
   14cf6:	001a      	movs	r2, r3
   14cf8:	2301      	movs	r3, #1
   14cfa:	4053      	eors	r3, r2
   14cfc:	b2db      	uxtb	r3, r3
   14cfe:	2b00      	cmp	r3, #0
   14d00:	d1f4      	bne.n	14cec <spi_transceive_buffer_wait+0x224>
		}

		enum status_code retval;
		uint16_t received_data = 0;
   14d02:	2314      	movs	r3, #20
   14d04:	18fb      	adds	r3, r7, r3
   14d06:	2200      	movs	r2, #0
   14d08:	801a      	strh	r2, [r3, #0]
		rx_length--;
   14d0a:	232a      	movs	r3, #42	; 0x2a
   14d0c:	18fb      	adds	r3, r7, r3
   14d0e:	881a      	ldrh	r2, [r3, #0]
   14d10:	232a      	movs	r3, #42	; 0x2a
   14d12:	18fb      	adds	r3, r7, r3
   14d14:	3a01      	subs	r2, #1
   14d16:	801a      	strh	r2, [r3, #0]

		retval = spi_read(module, &received_data);
   14d18:	2317      	movs	r3, #23
   14d1a:	18fc      	adds	r4, r7, r3
   14d1c:	2314      	movs	r3, #20
   14d1e:	18fa      	adds	r2, r7, r3
   14d20:	68fb      	ldr	r3, [r7, #12]
   14d22:	0011      	movs	r1, r2
   14d24:	0018      	movs	r0, r3
   14d26:	4b4c      	ldr	r3, [pc, #304]	; (14e58 <spi_transceive_buffer_wait+0x390>)
   14d28:	4798      	blx	r3
   14d2a:	0003      	movs	r3, r0
   14d2c:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   14d2e:	2317      	movs	r3, #23
   14d30:	18fb      	adds	r3, r7, r3
   14d32:	781b      	ldrb	r3, [r3, #0]
   14d34:	2b00      	cmp	r3, #0
   14d36:	d003      	beq.n	14d40 <spi_transceive_buffer_wait+0x278>
			/* Overflow, abort */
			return retval;
   14d38:	2317      	movs	r3, #23
   14d3a:	18fb      	adds	r3, r7, r3
   14d3c:	781b      	ldrb	r3, [r3, #0]
   14d3e:	e0b8      	b.n	14eb2 <spi_transceive_buffer_wait+0x3ea>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   14d40:	232c      	movs	r3, #44	; 0x2c
   14d42:	18fb      	adds	r3, r7, r3
   14d44:	881b      	ldrh	r3, [r3, #0]
   14d46:	222c      	movs	r2, #44	; 0x2c
   14d48:	18ba      	adds	r2, r7, r2
   14d4a:	1c59      	adds	r1, r3, #1
   14d4c:	8011      	strh	r1, [r2, #0]
   14d4e:	001a      	movs	r2, r3
   14d50:	687b      	ldr	r3, [r7, #4]
   14d52:	189b      	adds	r3, r3, r2
   14d54:	2214      	movs	r2, #20
   14d56:	18ba      	adds	r2, r7, r2
   14d58:	8812      	ldrh	r2, [r2, #0]
   14d5a:	b2d2      	uxtb	r2, r2
   14d5c:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   14d5e:	68fb      	ldr	r3, [r7, #12]
   14d60:	799b      	ldrb	r3, [r3, #6]
   14d62:	2b01      	cmp	r3, #1
   14d64:	d110      	bne.n	14d88 <spi_transceive_buffer_wait+0x2c0>
			rx_data[rx_pos++] = (received_data >> 8);
   14d66:	232c      	movs	r3, #44	; 0x2c
   14d68:	18fb      	adds	r3, r7, r3
   14d6a:	881b      	ldrh	r3, [r3, #0]
   14d6c:	222c      	movs	r2, #44	; 0x2c
   14d6e:	18ba      	adds	r2, r7, r2
   14d70:	1c59      	adds	r1, r3, #1
   14d72:	8011      	strh	r1, [r2, #0]
   14d74:	001a      	movs	r2, r3
   14d76:	687b      	ldr	r3, [r7, #4]
   14d78:	189b      	adds	r3, r3, r2
   14d7a:	2214      	movs	r2, #20
   14d7c:	18ba      	adds	r2, r7, r2
   14d7e:	8812      	ldrh	r2, [r2, #0]
   14d80:	0a12      	lsrs	r2, r2, #8
   14d82:	b292      	uxth	r2, r2
   14d84:	b2d2      	uxtb	r2, r2
   14d86:	701a      	strb	r2, [r3, #0]
	while (length--) {
   14d88:	1cbb      	adds	r3, r7, #2
   14d8a:	881b      	ldrh	r3, [r3, #0]
   14d8c:	1cba      	adds	r2, r7, #2
   14d8e:	1e59      	subs	r1, r3, #1
   14d90:	8011      	strh	r1, [r2, #0]
   14d92:	2b00      	cmp	r3, #0
   14d94:	d000      	beq.n	14d98 <spi_transceive_buffer_wait+0x2d0>
   14d96:	e6d3      	b.n	14b40 <spi_transceive_buffer_wait+0x78>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   14d98:	68fb      	ldr	r3, [r7, #12]
   14d9a:	795b      	ldrb	r3, [r3, #5]
   14d9c:	2b01      	cmp	r3, #1
   14d9e:	d10b      	bne.n	14db8 <spi_transceive_buffer_wait+0x2f0>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   14da0:	46c0      	nop			; (mov r8, r8)
   14da2:	68fb      	ldr	r3, [r7, #12]
   14da4:	0018      	movs	r0, r3
   14da6:	4b26      	ldr	r3, [pc, #152]	; (14e40 <spi_transceive_buffer_wait+0x378>)
   14da8:	4798      	blx	r3
   14daa:	0003      	movs	r3, r0
   14dac:	001a      	movs	r2, r3
   14dae:	2301      	movs	r3, #1
   14db0:	4053      	eors	r3, r2
   14db2:	b2db      	uxtb	r3, r3
   14db4:	2b00      	cmp	r3, #0
   14db6:	d1f4      	bne.n	14da2 <spi_transceive_buffer_wait+0x2da>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
   14db8:	68fb      	ldr	r3, [r7, #12]
   14dba:	795b      	ldrb	r3, [r3, #5]
   14dbc:	2b00      	cmp	r3, #0
   14dbe:	d000      	beq.n	14dc2 <spi_transceive_buffer_wait+0x2fa>
   14dc0:	e076      	b.n	14eb0 <spi_transceive_buffer_wait+0x3e8>
		while (rx_length) {
   14dc2:	e06f      	b.n	14ea4 <spi_transceive_buffer_wait+0x3dc>
			/* Start timeout period for slave */
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   14dc4:	2300      	movs	r3, #0
   14dc6:	61bb      	str	r3, [r7, #24]
   14dc8:	e008      	b.n	14ddc <spi_transceive_buffer_wait+0x314>
				if (spi_is_ready_to_read(module)) {
   14dca:	68fb      	ldr	r3, [r7, #12]
   14dcc:	0018      	movs	r0, r3
   14dce:	4b21      	ldr	r3, [pc, #132]	; (14e54 <spi_transceive_buffer_wait+0x38c>)
   14dd0:	4798      	blx	r3
   14dd2:	1e03      	subs	r3, r0, #0
   14dd4:	d107      	bne.n	14de6 <spi_transceive_buffer_wait+0x31e>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   14dd6:	69bb      	ldr	r3, [r7, #24]
   14dd8:	3301      	adds	r3, #1
   14dda:	61bb      	str	r3, [r7, #24]
   14ddc:	69bb      	ldr	r3, [r7, #24]
   14dde:	4a1b      	ldr	r2, [pc, #108]	; (14e4c <spi_transceive_buffer_wait+0x384>)
   14de0:	4293      	cmp	r3, r2
   14de2:	d9f2      	bls.n	14dca <spi_transceive_buffer_wait+0x302>
   14de4:	e000      	b.n	14de8 <spi_transceive_buffer_wait+0x320>
					break;
   14de6:	46c0      	nop			; (mov r8, r8)
				}
			}
			if (!spi_is_ready_to_read(module)) {
   14de8:	68fb      	ldr	r3, [r7, #12]
   14dea:	0018      	movs	r0, r3
   14dec:	4b19      	ldr	r3, [pc, #100]	; (14e54 <spi_transceive_buffer_wait+0x38c>)
   14dee:	4798      	blx	r3
   14df0:	0003      	movs	r3, r0
   14df2:	001a      	movs	r2, r3
   14df4:	2301      	movs	r3, #1
   14df6:	4053      	eors	r3, r2
   14df8:	b2db      	uxtb	r3, r3
   14dfa:	2b00      	cmp	r3, #0
   14dfc:	d001      	beq.n	14e02 <spi_transceive_buffer_wait+0x33a>
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
   14dfe:	2312      	movs	r3, #18
   14e00:	e057      	b.n	14eb2 <spi_transceive_buffer_wait+0x3ea>
			}
			enum status_code retval;
			uint16_t received_data = 0;
   14e02:	2312      	movs	r3, #18
   14e04:	18fb      	adds	r3, r7, r3
   14e06:	2200      	movs	r2, #0
   14e08:	801a      	strh	r2, [r3, #0]
			rx_length--;
   14e0a:	232a      	movs	r3, #42	; 0x2a
   14e0c:	18fb      	adds	r3, r7, r3
   14e0e:	881a      	ldrh	r2, [r3, #0]
   14e10:	232a      	movs	r3, #42	; 0x2a
   14e12:	18fb      	adds	r3, r7, r3
   14e14:	3a01      	subs	r2, #1
   14e16:	801a      	strh	r2, [r3, #0]

			retval = spi_read(module, &received_data);
   14e18:	2316      	movs	r3, #22
   14e1a:	18fc      	adds	r4, r7, r3
   14e1c:	2312      	movs	r3, #18
   14e1e:	18fa      	adds	r2, r7, r3
   14e20:	68fb      	ldr	r3, [r7, #12]
   14e22:	0011      	movs	r1, r2
   14e24:	0018      	movs	r0, r3
   14e26:	4b0c      	ldr	r3, [pc, #48]	; (14e58 <spi_transceive_buffer_wait+0x390>)
   14e28:	4798      	blx	r3
   14e2a:	0003      	movs	r3, r0
   14e2c:	7023      	strb	r3, [r4, #0]

			if (retval != STATUS_OK) {
   14e2e:	2316      	movs	r3, #22
   14e30:	18fb      	adds	r3, r7, r3
   14e32:	781b      	ldrb	r3, [r3, #0]
   14e34:	2b00      	cmp	r3, #0
   14e36:	d011      	beq.n	14e5c <spi_transceive_buffer_wait+0x394>
				/* Overflow, abort */
				return retval;
   14e38:	2316      	movs	r3, #22
   14e3a:	18fb      	adds	r3, r7, r3
   14e3c:	781b      	ldrb	r3, [r3, #0]
   14e3e:	e038      	b.n	14eb2 <spi_transceive_buffer_wait+0x3ea>
   14e40:	00013f79 	.word	0x00013f79
   14e44:	000140c1 	.word	0x000140c1
   14e48:	00013fa1 	.word	0x00013fa1
   14e4c:	00002710 	.word	0x00002710
   14e50:	00013ff1 	.word	0x00013ff1
   14e54:	00013fc9 	.word	0x00013fc9
   14e58:	00014039 	.word	0x00014039
			}
			/* Read value will be at least 8-bits long */
			rx_data[rx_pos++] = received_data;
   14e5c:	232c      	movs	r3, #44	; 0x2c
   14e5e:	18fb      	adds	r3, r7, r3
   14e60:	881b      	ldrh	r3, [r3, #0]
   14e62:	222c      	movs	r2, #44	; 0x2c
   14e64:	18ba      	adds	r2, r7, r2
   14e66:	1c59      	adds	r1, r3, #1
   14e68:	8011      	strh	r1, [r2, #0]
   14e6a:	001a      	movs	r2, r3
   14e6c:	687b      	ldr	r3, [r7, #4]
   14e6e:	189b      	adds	r3, r3, r2
   14e70:	2212      	movs	r2, #18
   14e72:	18ba      	adds	r2, r7, r2
   14e74:	8812      	ldrh	r2, [r2, #0]
   14e76:	b2d2      	uxtb	r2, r2
   14e78:	701a      	strb	r2, [r3, #0]

			/* If 9-bit data, write next received byte to the buffer */
			if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   14e7a:	68fb      	ldr	r3, [r7, #12]
   14e7c:	799b      	ldrb	r3, [r3, #6]
   14e7e:	2b01      	cmp	r3, #1
   14e80:	d110      	bne.n	14ea4 <spi_transceive_buffer_wait+0x3dc>
				rx_data[rx_pos++] = (received_data >> 8);
   14e82:	232c      	movs	r3, #44	; 0x2c
   14e84:	18fb      	adds	r3, r7, r3
   14e86:	881b      	ldrh	r3, [r3, #0]
   14e88:	222c      	movs	r2, #44	; 0x2c
   14e8a:	18ba      	adds	r2, r7, r2
   14e8c:	1c59      	adds	r1, r3, #1
   14e8e:	8011      	strh	r1, [r2, #0]
   14e90:	001a      	movs	r2, r3
   14e92:	687b      	ldr	r3, [r7, #4]
   14e94:	189b      	adds	r3, r3, r2
   14e96:	2212      	movs	r2, #18
   14e98:	18ba      	adds	r2, r7, r2
   14e9a:	8812      	ldrh	r2, [r2, #0]
   14e9c:	0a12      	lsrs	r2, r2, #8
   14e9e:	b292      	uxth	r2, r2
   14ea0:	b2d2      	uxtb	r2, r2
   14ea2:	701a      	strb	r2, [r3, #0]
		while (rx_length) {
   14ea4:	232a      	movs	r3, #42	; 0x2a
   14ea6:	18fb      	adds	r3, r7, r3
   14ea8:	881b      	ldrh	r3, [r3, #0]
   14eaa:	2b00      	cmp	r3, #0
   14eac:	d000      	beq.n	14eb0 <spi_transceive_buffer_wait+0x3e8>
   14eae:	e789      	b.n	14dc4 <spi_transceive_buffer_wait+0x2fc>
			}
		}
	}
#  endif
	return STATUS_OK;
   14eb0:	2300      	movs	r3, #0
}
   14eb2:	0018      	movs	r0, r3
   14eb4:	46bd      	mov	sp, r7
   14eb6:	b00d      	add	sp, #52	; 0x34
   14eb8:	bd90      	pop	{r4, r7, pc}
   14eba:	46c0      	nop			; (mov r8, r8)

00014ebc <system_gclk_chan_get_config_defaults>:
{
   14ebc:	b580      	push	{r7, lr}
   14ebe:	b082      	sub	sp, #8
   14ec0:	af00      	add	r7, sp, #0
   14ec2:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   14ec4:	687b      	ldr	r3, [r7, #4]
   14ec6:	2200      	movs	r2, #0
   14ec8:	701a      	strb	r2, [r3, #0]
}
   14eca:	46c0      	nop			; (mov r8, r8)
   14ecc:	46bd      	mov	sp, r7
   14ece:	b002      	add	sp, #8
   14ed0:	bd80      	pop	{r7, pc}

00014ed2 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   14ed2:	b5f0      	push	{r4, r5, r6, r7, lr}
   14ed4:	b08d      	sub	sp, #52	; 0x34
   14ed6:	af00      	add	r7, sp, #0
   14ed8:	60b8      	str	r0, [r7, #8]
   14eda:	60f9      	str	r1, [r7, #12]
   14edc:	603a      	str	r2, [r7, #0]
   14ede:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   14ee0:	2300      	movs	r3, #0
   14ee2:	2400      	movs	r4, #0
   14ee4:	623b      	str	r3, [r7, #32]
   14ee6:	627c      	str	r4, [r7, #36]	; 0x24
   14ee8:	2300      	movs	r3, #0
   14eea:	2400      	movs	r4, #0
   14eec:	61bb      	str	r3, [r7, #24]
   14eee:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   14ef0:	233f      	movs	r3, #63	; 0x3f
   14ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
   14ef4:	e053      	b.n	14f9e <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   14ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14ef8:	3b20      	subs	r3, #32
   14efa:	2b00      	cmp	r3, #0
   14efc:	db04      	blt.n	14f08 <long_division+0x36>
   14efe:	2201      	movs	r2, #1
   14f00:	409a      	lsls	r2, r3
   14f02:	0013      	movs	r3, r2
   14f04:	617b      	str	r3, [r7, #20]
   14f06:	e00b      	b.n	14f20 <long_division+0x4e>
   14f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14f0a:	2220      	movs	r2, #32
   14f0c:	1ad3      	subs	r3, r2, r3
   14f0e:	2201      	movs	r2, #1
   14f10:	40da      	lsrs	r2, r3
   14f12:	0013      	movs	r3, r2
   14f14:	2100      	movs	r1, #0
   14f16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   14f18:	4091      	lsls	r1, r2
   14f1a:	000a      	movs	r2, r1
   14f1c:	4313      	orrs	r3, r2
   14f1e:	617b      	str	r3, [r7, #20]
   14f20:	2201      	movs	r2, #1
   14f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14f24:	409a      	lsls	r2, r3
   14f26:	0013      	movs	r3, r2
   14f28:	613b      	str	r3, [r7, #16]

		r = r << 1;
   14f2a:	69bb      	ldr	r3, [r7, #24]
   14f2c:	69fc      	ldr	r4, [r7, #28]
   14f2e:	18db      	adds	r3, r3, r3
   14f30:	4164      	adcs	r4, r4
   14f32:	61bb      	str	r3, [r7, #24]
   14f34:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   14f36:	68bb      	ldr	r3, [r7, #8]
   14f38:	693a      	ldr	r2, [r7, #16]
   14f3a:	401a      	ands	r2, r3
   14f3c:	0015      	movs	r5, r2
   14f3e:	68fb      	ldr	r3, [r7, #12]
   14f40:	697a      	ldr	r2, [r7, #20]
   14f42:	401a      	ands	r2, r3
   14f44:	0016      	movs	r6, r2
   14f46:	002b      	movs	r3, r5
   14f48:	4333      	orrs	r3, r6
   14f4a:	d007      	beq.n	14f5c <long_division+0x8a>
			r |= 0x01;
   14f4c:	69bb      	ldr	r3, [r7, #24]
   14f4e:	2201      	movs	r2, #1
   14f50:	4313      	orrs	r3, r2
   14f52:	61bb      	str	r3, [r7, #24]
   14f54:	69fb      	ldr	r3, [r7, #28]
   14f56:	2200      	movs	r2, #0
   14f58:	4313      	orrs	r3, r2
   14f5a:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   14f5c:	687a      	ldr	r2, [r7, #4]
   14f5e:	69fb      	ldr	r3, [r7, #28]
   14f60:	429a      	cmp	r2, r3
   14f62:	d819      	bhi.n	14f98 <long_division+0xc6>
   14f64:	687a      	ldr	r2, [r7, #4]
   14f66:	69fb      	ldr	r3, [r7, #28]
   14f68:	429a      	cmp	r2, r3
   14f6a:	d103      	bne.n	14f74 <long_division+0xa2>
   14f6c:	683a      	ldr	r2, [r7, #0]
   14f6e:	69bb      	ldr	r3, [r7, #24]
   14f70:	429a      	cmp	r2, r3
   14f72:	d811      	bhi.n	14f98 <long_division+0xc6>
			r = r - d;
   14f74:	69b9      	ldr	r1, [r7, #24]
   14f76:	69fa      	ldr	r2, [r7, #28]
   14f78:	683b      	ldr	r3, [r7, #0]
   14f7a:	687c      	ldr	r4, [r7, #4]
   14f7c:	1ac9      	subs	r1, r1, r3
   14f7e:	41a2      	sbcs	r2, r4
   14f80:	000b      	movs	r3, r1
   14f82:	0014      	movs	r4, r2
   14f84:	61bb      	str	r3, [r7, #24]
   14f86:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   14f88:	6a3a      	ldr	r2, [r7, #32]
   14f8a:	693b      	ldr	r3, [r7, #16]
   14f8c:	4313      	orrs	r3, r2
   14f8e:	623b      	str	r3, [r7, #32]
   14f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   14f92:	697b      	ldr	r3, [r7, #20]
   14f94:	4313      	orrs	r3, r2
   14f96:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   14f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14f9a:	3b01      	subs	r3, #1
   14f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   14f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14fa0:	2b00      	cmp	r3, #0
   14fa2:	daa8      	bge.n	14ef6 <long_division+0x24>
		}
	}

	return q;
   14fa4:	6a3b      	ldr	r3, [r7, #32]
   14fa6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   14fa8:	0018      	movs	r0, r3
   14faa:	0021      	movs	r1, r4
   14fac:	46bd      	mov	sp, r7
   14fae:	b00d      	add	sp, #52	; 0x34
   14fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}

00014fb2 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   14fb2:	b580      	push	{r7, lr}
   14fb4:	b086      	sub	sp, #24
   14fb6:	af00      	add	r7, sp, #0
   14fb8:	60f8      	str	r0, [r7, #12]
   14fba:	60b9      	str	r1, [r7, #8]
   14fbc:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   14fbe:	2316      	movs	r3, #22
   14fc0:	18fb      	adds	r3, r7, r3
   14fc2:	2200      	movs	r2, #0
   14fc4:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   14fc6:	68bb      	ldr	r3, [r7, #8]
   14fc8:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   14fca:	68bb      	ldr	r3, [r7, #8]
   14fcc:	085a      	lsrs	r2, r3, #1
   14fce:	68fb      	ldr	r3, [r7, #12]
   14fd0:	429a      	cmp	r2, r3
   14fd2:	d201      	bcs.n	14fd8 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   14fd4:	2340      	movs	r3, #64	; 0x40
   14fd6:	e026      	b.n	15026 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   14fd8:	68bb      	ldr	r3, [r7, #8]
   14fda:	085b      	lsrs	r3, r3, #1
   14fdc:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   14fde:	e00a      	b.n	14ff6 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   14fe0:	693a      	ldr	r2, [r7, #16]
   14fe2:	68fb      	ldr	r3, [r7, #12]
   14fe4:	1ad3      	subs	r3, r2, r3
   14fe6:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   14fe8:	2316      	movs	r3, #22
   14fea:	18fb      	adds	r3, r7, r3
   14fec:	881a      	ldrh	r2, [r3, #0]
   14fee:	2316      	movs	r3, #22
   14ff0:	18fb      	adds	r3, r7, r3
   14ff2:	3201      	adds	r2, #1
   14ff4:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   14ff6:	693a      	ldr	r2, [r7, #16]
   14ff8:	68fb      	ldr	r3, [r7, #12]
   14ffa:	429a      	cmp	r2, r3
   14ffc:	d2f0      	bcs.n	14fe0 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   14ffe:	2316      	movs	r3, #22
   15000:	18fb      	adds	r3, r7, r3
   15002:	2216      	movs	r2, #22
   15004:	18ba      	adds	r2, r7, r2
   15006:	8812      	ldrh	r2, [r2, #0]
   15008:	3a01      	subs	r2, #1
   1500a:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   1500c:	2316      	movs	r3, #22
   1500e:	18fb      	adds	r3, r7, r3
   15010:	881b      	ldrh	r3, [r3, #0]
   15012:	2bff      	cmp	r3, #255	; 0xff
   15014:	d901      	bls.n	1501a <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   15016:	2340      	movs	r3, #64	; 0x40
   15018:	e005      	b.n	15026 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   1501a:	687b      	ldr	r3, [r7, #4]
   1501c:	2216      	movs	r2, #22
   1501e:	18ba      	adds	r2, r7, r2
   15020:	8812      	ldrh	r2, [r2, #0]
   15022:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   15024:	2300      	movs	r3, #0
	}
}
   15026:	0018      	movs	r0, r3
   15028:	46bd      	mov	sp, r7
   1502a:	b006      	add	sp, #24
   1502c:	bd80      	pop	{r7, pc}
	...

00015030 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   15030:	b5f0      	push	{r4, r5, r6, r7, lr}
   15032:	b0a1      	sub	sp, #132	; 0x84
   15034:	af00      	add	r7, sp, #0
   15036:	64f8      	str	r0, [r7, #76]	; 0x4c
   15038:	64b9      	str	r1, [r7, #72]	; 0x48
   1503a:	647a      	str	r2, [r7, #68]	; 0x44
   1503c:	2243      	movs	r2, #67	; 0x43
   1503e:	18ba      	adds	r2, r7, r2
   15040:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   15042:	2300      	movs	r3, #0
   15044:	2400      	movs	r4, #0
   15046:	673b      	str	r3, [r7, #112]	; 0x70
   15048:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   1504a:	2300      	movs	r3, #0
   1504c:	2400      	movs	r4, #0
   1504e:	66bb      	str	r3, [r7, #104]	; 0x68
   15050:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   15052:	2300      	movs	r3, #0
   15054:	2400      	movs	r4, #0
   15056:	67bb      	str	r3, [r7, #120]	; 0x78
   15058:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   1505a:	2300      	movs	r3, #0
   1505c:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   1505e:	2358      	movs	r3, #88	; 0x58
   15060:	2240      	movs	r2, #64	; 0x40
   15062:	4694      	mov	ip, r2
   15064:	44bc      	add	ip, r7
   15066:	4463      	add	r3, ip
   15068:	781a      	ldrb	r2, [r3, #0]
   1506a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1506c:	435a      	muls	r2, r3
   1506e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   15070:	429a      	cmp	r2, r3
   15072:	d901      	bls.n	15078 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   15074:	2340      	movs	r3, #64	; 0x40
   15076:	e0b3      	b.n	151e0 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   15078:	2343      	movs	r3, #67	; 0x43
   1507a:	18fb      	adds	r3, r7, r3
   1507c:	781b      	ldrb	r3, [r3, #0]
   1507e:	2b00      	cmp	r3, #0
   15080:	d13d      	bne.n	150fe <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   15082:	2358      	movs	r3, #88	; 0x58
   15084:	2240      	movs	r2, #64	; 0x40
   15086:	4694      	mov	ip, r2
   15088:	44bc      	add	ip, r7
   1508a:	4463      	add	r3, ip
   1508c:	781b      	ldrb	r3, [r3, #0]
   1508e:	b2db      	uxtb	r3, r3
   15090:	613b      	str	r3, [r7, #16]
   15092:	2300      	movs	r3, #0
   15094:	617b      	str	r3, [r7, #20]
   15096:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   15098:	60bb      	str	r3, [r7, #8]
   1509a:	2300      	movs	r3, #0
   1509c:	60fb      	str	r3, [r7, #12]
   1509e:	4c52      	ldr	r4, [pc, #328]	; (151e8 <_sercom_get_async_baud_val+0x1b8>)
   150a0:	68ba      	ldr	r2, [r7, #8]
   150a2:	68fb      	ldr	r3, [r7, #12]
   150a4:	6938      	ldr	r0, [r7, #16]
   150a6:	6979      	ldr	r1, [r7, #20]
   150a8:	47a0      	blx	r4
   150aa:	0003      	movs	r3, r0
   150ac:	000c      	movs	r4, r1
   150ae:	001b      	movs	r3, r3
   150b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   150b2:	2300      	movs	r3, #0
   150b4:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   150b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   150b8:	603b      	str	r3, [r7, #0]
   150ba:	2300      	movs	r3, #0
   150bc:	607b      	str	r3, [r7, #4]
   150be:	6db8      	ldr	r0, [r7, #88]	; 0x58
   150c0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   150c2:	683a      	ldr	r2, [r7, #0]
   150c4:	687b      	ldr	r3, [r7, #4]
   150c6:	4c49      	ldr	r4, [pc, #292]	; (151ec <_sercom_get_async_baud_val+0x1bc>)
   150c8:	47a0      	blx	r4
   150ca:	0003      	movs	r3, r0
   150cc:	000c      	movs	r4, r1
   150ce:	673b      	str	r3, [r7, #112]	; 0x70
   150d0:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   150d2:	2100      	movs	r1, #0
   150d4:	2201      	movs	r2, #1
   150d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   150d8:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   150da:	1ac9      	subs	r1, r1, r3
   150dc:	41a2      	sbcs	r2, r4
   150de:	000b      	movs	r3, r1
   150e0:	0014      	movs	r4, r2
   150e2:	66bb      	str	r3, [r7, #104]	; 0x68
   150e4:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   150e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   150e8:	0c1b      	lsrs	r3, r3, #16
   150ea:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   150ec:	0416      	lsls	r6, r2, #16
   150ee:	431e      	orrs	r6, r3
   150f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   150f2:	041d      	lsls	r5, r3, #16
   150f4:	0033      	movs	r3, r6
   150f6:	67bb      	str	r3, [r7, #120]	; 0x78
   150f8:	2300      	movs	r3, #0
   150fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   150fc:	e06a      	b.n	151d4 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   150fe:	2343      	movs	r3, #67	; 0x43
   15100:	18fb      	adds	r3, r7, r3
   15102:	781b      	ldrb	r3, [r3, #0]
   15104:	2b01      	cmp	r3, #1
   15106:	d165      	bne.n	151d4 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   15108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1510a:	633b      	str	r3, [r7, #48]	; 0x30
   1510c:	2300      	movs	r3, #0
   1510e:	637b      	str	r3, [r7, #52]	; 0x34
   15110:	2358      	movs	r3, #88	; 0x58
   15112:	2240      	movs	r2, #64	; 0x40
   15114:	4694      	mov	ip, r2
   15116:	44bc      	add	ip, r7
   15118:	4463      	add	r3, ip
   1511a:	781b      	ldrb	r3, [r3, #0]
   1511c:	b2db      	uxtb	r3, r3
   1511e:	62bb      	str	r3, [r7, #40]	; 0x28
   15120:	2300      	movs	r3, #0
   15122:	62fb      	str	r3, [r7, #44]	; 0x2c
   15124:	4c30      	ldr	r4, [pc, #192]	; (151e8 <_sercom_get_async_baud_val+0x1b8>)
   15126:	6aba      	ldr	r2, [r7, #40]	; 0x28
   15128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1512a:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1512c:	6b79      	ldr	r1, [r7, #52]	; 0x34
   1512e:	47a0      	blx	r4
   15130:	0003      	movs	r3, r0
   15132:	000c      	movs	r4, r1
   15134:	65bb      	str	r3, [r7, #88]	; 0x58
   15136:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   15138:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1513a:	623b      	str	r3, [r7, #32]
   1513c:	2300      	movs	r3, #0
   1513e:	627b      	str	r3, [r7, #36]	; 0x24
   15140:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   15142:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   15144:	001a      	movs	r2, r3
   15146:	0023      	movs	r3, r4
   15148:	6a38      	ldr	r0, [r7, #32]
   1514a:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1514c:	4c27      	ldr	r4, [pc, #156]	; (151ec <_sercom_get_async_baud_val+0x1bc>)
   1514e:	47a0      	blx	r4
   15150:	0003      	movs	r3, r0
   15152:	000c      	movs	r4, r1
   15154:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   15156:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   15158:	2380      	movs	r3, #128	; 0x80
   1515a:	019b      	lsls	r3, r3, #6
   1515c:	429a      	cmp	r2, r3
   1515e:	d901      	bls.n	15164 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   15160:	2340      	movs	r3, #64	; 0x40
   15162:	e03d      	b.n	151e0 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   15164:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   15166:	61bb      	str	r3, [r7, #24]
   15168:	2300      	movs	r3, #0
   1516a:	61fb      	str	r3, [r7, #28]
   1516c:	69b9      	ldr	r1, [r7, #24]
   1516e:	69fa      	ldr	r2, [r7, #28]
   15170:	000b      	movs	r3, r1
   15172:	0f5b      	lsrs	r3, r3, #29
   15174:	0010      	movs	r0, r2
   15176:	00c0      	lsls	r0, r0, #3
   15178:	63f8      	str	r0, [r7, #60]	; 0x3c
   1517a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   1517c:	4318      	orrs	r0, r3
   1517e:	63f8      	str	r0, [r7, #60]	; 0x3c
   15180:	000b      	movs	r3, r1
   15182:	00db      	lsls	r3, r3, #3
   15184:	63bb      	str	r3, [r7, #56]	; 0x38
   15186:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   15188:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   1518a:	001a      	movs	r2, r3
   1518c:	0023      	movs	r3, r4
   1518e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   15190:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   15192:	4c16      	ldr	r4, [pc, #88]	; (151ec <_sercom_get_async_baud_val+0x1bc>)
   15194:	47a0      	blx	r4
   15196:	0003      	movs	r3, r0
   15198:	000c      	movs	r4, r1
   1519a:	65bb      	str	r3, [r7, #88]	; 0x58
   1519c:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   1519e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   151a0:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   151a2:	b2d9      	uxtb	r1, r3
   151a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   151a6:	b2db      	uxtb	r3, r3
   151a8:	00db      	lsls	r3, r3, #3
   151aa:	b2da      	uxtb	r2, r3
   151ac:	2317      	movs	r3, #23
   151ae:	2040      	movs	r0, #64	; 0x40
   151b0:	4684      	mov	ip, r0
   151b2:	44bc      	add	ip, r7
   151b4:	4463      	add	r3, ip
   151b6:	1a8a      	subs	r2, r1, r2
   151b8:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   151ba:	2317      	movs	r3, #23
   151bc:	2240      	movs	r2, #64	; 0x40
   151be:	4694      	mov	ip, r2
   151c0:	44bc      	add	ip, r7
   151c2:	4463      	add	r3, ip
   151c4:	781b      	ldrb	r3, [r3, #0]
   151c6:	035b      	lsls	r3, r3, #13
   151c8:	001a      	movs	r2, r3
   151ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   151cc:	4313      	orrs	r3, r2
   151ce:	67bb      	str	r3, [r7, #120]	; 0x78
   151d0:	2300      	movs	r3, #0
   151d2:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   151d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   151d6:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   151d8:	b29a      	uxth	r2, r3
   151da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   151dc:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   151de:	2300      	movs	r3, #0
}
   151e0:	0018      	movs	r0, r3
   151e2:	46bd      	mov	sp, r7
   151e4:	b021      	add	sp, #132	; 0x84
   151e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   151e8:	0001e3a1 	.word	0x0001e3a1
   151ec:	00014ed3 	.word	0x00014ed3

000151f0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   151f0:	b580      	push	{r7, lr}
   151f2:	b084      	sub	sp, #16
   151f4:	af00      	add	r7, sp, #0
   151f6:	0002      	movs	r2, r0
   151f8:	1dfb      	adds	r3, r7, #7
   151fa:	701a      	strb	r2, [r3, #0]
   151fc:	1dbb      	adds	r3, r7, #6
   151fe:	1c0a      	adds	r2, r1, #0
   15200:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   15202:	4b1a      	ldr	r3, [pc, #104]	; (1526c <sercom_set_gclk_generator+0x7c>)
   15204:	781b      	ldrb	r3, [r3, #0]
   15206:	2201      	movs	r2, #1
   15208:	4053      	eors	r3, r2
   1520a:	b2db      	uxtb	r3, r3
   1520c:	2b00      	cmp	r3, #0
   1520e:	d103      	bne.n	15218 <sercom_set_gclk_generator+0x28>
   15210:	1dbb      	adds	r3, r7, #6
   15212:	781b      	ldrb	r3, [r3, #0]
   15214:	2b00      	cmp	r3, #0
   15216:	d01b      	beq.n	15250 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   15218:	230c      	movs	r3, #12
   1521a:	18fb      	adds	r3, r7, r3
   1521c:	0018      	movs	r0, r3
   1521e:	4b14      	ldr	r3, [pc, #80]	; (15270 <sercom_set_gclk_generator+0x80>)
   15220:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   15222:	230c      	movs	r3, #12
   15224:	18fb      	adds	r3, r7, r3
   15226:	1dfa      	adds	r2, r7, #7
   15228:	7812      	ldrb	r2, [r2, #0]
   1522a:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   1522c:	230c      	movs	r3, #12
   1522e:	18fb      	adds	r3, r7, r3
   15230:	0019      	movs	r1, r3
   15232:	2011      	movs	r0, #17
   15234:	4b0f      	ldr	r3, [pc, #60]	; (15274 <sercom_set_gclk_generator+0x84>)
   15236:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   15238:	2011      	movs	r0, #17
   1523a:	4b0f      	ldr	r3, [pc, #60]	; (15278 <sercom_set_gclk_generator+0x88>)
   1523c:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   1523e:	4b0b      	ldr	r3, [pc, #44]	; (1526c <sercom_set_gclk_generator+0x7c>)
   15240:	1dfa      	adds	r2, r7, #7
   15242:	7812      	ldrb	r2, [r2, #0]
   15244:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   15246:	4b09      	ldr	r3, [pc, #36]	; (1526c <sercom_set_gclk_generator+0x7c>)
   15248:	2201      	movs	r2, #1
   1524a:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   1524c:	2300      	movs	r3, #0
   1524e:	e008      	b.n	15262 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   15250:	4b06      	ldr	r3, [pc, #24]	; (1526c <sercom_set_gclk_generator+0x7c>)
   15252:	785b      	ldrb	r3, [r3, #1]
   15254:	1dfa      	adds	r2, r7, #7
   15256:	7812      	ldrb	r2, [r2, #0]
   15258:	429a      	cmp	r2, r3
   1525a:	d101      	bne.n	15260 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   1525c:	2300      	movs	r3, #0
   1525e:	e000      	b.n	15262 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   15260:	231d      	movs	r3, #29
}
   15262:	0018      	movs	r0, r3
   15264:	46bd      	mov	sp, r7
   15266:	b004      	add	sp, #16
   15268:	bd80      	pop	{r7, pc}
   1526a:	46c0      	nop			; (mov r8, r8)
   1526c:	20000dd8 	.word	0x20000dd8
   15270:	00014ebd 	.word	0x00014ebd
   15274:	00015f81 	.word	0x00015f81
   15278:	00015fc1 	.word	0x00015fc1

0001527c <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   1527c:	b580      	push	{r7, lr}
   1527e:	b082      	sub	sp, #8
   15280:	af00      	add	r7, sp, #0
   15282:	6078      	str	r0, [r7, #4]
   15284:	000a      	movs	r2, r1
   15286:	1cfb      	adds	r3, r7, #3
   15288:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   1528a:	687b      	ldr	r3, [r7, #4]
   1528c:	4a4e      	ldr	r2, [pc, #312]	; (153c8 <_sercom_get_default_pad+0x14c>)
   1528e:	4293      	cmp	r3, r2
   15290:	d040      	beq.n	15314 <_sercom_get_default_pad+0x98>
   15292:	4a4d      	ldr	r2, [pc, #308]	; (153c8 <_sercom_get_default_pad+0x14c>)
   15294:	4293      	cmp	r3, r2
   15296:	d807      	bhi.n	152a8 <_sercom_get_default_pad+0x2c>
   15298:	2284      	movs	r2, #132	; 0x84
   1529a:	05d2      	lsls	r2, r2, #23
   1529c:	4293      	cmp	r3, r2
   1529e:	d00f      	beq.n	152c0 <_sercom_get_default_pad+0x44>
   152a0:	4a4a      	ldr	r2, [pc, #296]	; (153cc <_sercom_get_default_pad+0x150>)
   152a2:	4293      	cmp	r3, r2
   152a4:	d021      	beq.n	152ea <_sercom_get_default_pad+0x6e>
   152a6:	e089      	b.n	153bc <_sercom_get_default_pad+0x140>
   152a8:	4a49      	ldr	r2, [pc, #292]	; (153d0 <_sercom_get_default_pad+0x154>)
   152aa:	4293      	cmp	r3, r2
   152ac:	d100      	bne.n	152b0 <_sercom_get_default_pad+0x34>
   152ae:	e05b      	b.n	15368 <_sercom_get_default_pad+0xec>
   152b0:	4a48      	ldr	r2, [pc, #288]	; (153d4 <_sercom_get_default_pad+0x158>)
   152b2:	4293      	cmp	r3, r2
   152b4:	d100      	bne.n	152b8 <_sercom_get_default_pad+0x3c>
   152b6:	e06c      	b.n	15392 <_sercom_get_default_pad+0x116>
   152b8:	4a47      	ldr	r2, [pc, #284]	; (153d8 <_sercom_get_default_pad+0x15c>)
   152ba:	4293      	cmp	r3, r2
   152bc:	d03f      	beq.n	1533e <_sercom_get_default_pad+0xc2>
   152be:	e07d      	b.n	153bc <_sercom_get_default_pad+0x140>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   152c0:	1cfb      	adds	r3, r7, #3
   152c2:	781b      	ldrb	r3, [r3, #0]
   152c4:	2b01      	cmp	r3, #1
   152c6:	d00a      	beq.n	152de <_sercom_get_default_pad+0x62>
   152c8:	dc02      	bgt.n	152d0 <_sercom_get_default_pad+0x54>
   152ca:	2b00      	cmp	r3, #0
   152cc:	d005      	beq.n	152da <_sercom_get_default_pad+0x5e>
   152ce:	e075      	b.n	153bc <_sercom_get_default_pad+0x140>
   152d0:	2b02      	cmp	r3, #2
   152d2:	d006      	beq.n	152e2 <_sercom_get_default_pad+0x66>
   152d4:	2b03      	cmp	r3, #3
   152d6:	d006      	beq.n	152e6 <_sercom_get_default_pad+0x6a>
   152d8:	e070      	b.n	153bc <_sercom_get_default_pad+0x140>
   152da:	4b40      	ldr	r3, [pc, #256]	; (153dc <_sercom_get_default_pad+0x160>)
   152dc:	e06f      	b.n	153be <_sercom_get_default_pad+0x142>
   152de:	4b40      	ldr	r3, [pc, #256]	; (153e0 <_sercom_get_default_pad+0x164>)
   152e0:	e06d      	b.n	153be <_sercom_get_default_pad+0x142>
   152e2:	4b40      	ldr	r3, [pc, #256]	; (153e4 <_sercom_get_default_pad+0x168>)
   152e4:	e06b      	b.n	153be <_sercom_get_default_pad+0x142>
   152e6:	4b40      	ldr	r3, [pc, #256]	; (153e8 <_sercom_get_default_pad+0x16c>)
   152e8:	e069      	b.n	153be <_sercom_get_default_pad+0x142>
   152ea:	1cfb      	adds	r3, r7, #3
   152ec:	781b      	ldrb	r3, [r3, #0]
   152ee:	2b01      	cmp	r3, #1
   152f0:	d00a      	beq.n	15308 <_sercom_get_default_pad+0x8c>
   152f2:	dc02      	bgt.n	152fa <_sercom_get_default_pad+0x7e>
   152f4:	2b00      	cmp	r3, #0
   152f6:	d005      	beq.n	15304 <_sercom_get_default_pad+0x88>
   152f8:	e060      	b.n	153bc <_sercom_get_default_pad+0x140>
   152fa:	2b02      	cmp	r3, #2
   152fc:	d006      	beq.n	1530c <_sercom_get_default_pad+0x90>
   152fe:	2b03      	cmp	r3, #3
   15300:	d006      	beq.n	15310 <_sercom_get_default_pad+0x94>
   15302:	e05b      	b.n	153bc <_sercom_get_default_pad+0x140>
   15304:	2303      	movs	r3, #3
   15306:	e05a      	b.n	153be <_sercom_get_default_pad+0x142>
   15308:	4b38      	ldr	r3, [pc, #224]	; (153ec <_sercom_get_default_pad+0x170>)
   1530a:	e058      	b.n	153be <_sercom_get_default_pad+0x142>
   1530c:	4b38      	ldr	r3, [pc, #224]	; (153f0 <_sercom_get_default_pad+0x174>)
   1530e:	e056      	b.n	153be <_sercom_get_default_pad+0x142>
   15310:	4b38      	ldr	r3, [pc, #224]	; (153f4 <_sercom_get_default_pad+0x178>)
   15312:	e054      	b.n	153be <_sercom_get_default_pad+0x142>
   15314:	1cfb      	adds	r3, r7, #3
   15316:	781b      	ldrb	r3, [r3, #0]
   15318:	2b01      	cmp	r3, #1
   1531a:	d00a      	beq.n	15332 <_sercom_get_default_pad+0xb6>
   1531c:	dc02      	bgt.n	15324 <_sercom_get_default_pad+0xa8>
   1531e:	2b00      	cmp	r3, #0
   15320:	d005      	beq.n	1532e <_sercom_get_default_pad+0xb2>
   15322:	e04b      	b.n	153bc <_sercom_get_default_pad+0x140>
   15324:	2b02      	cmp	r3, #2
   15326:	d006      	beq.n	15336 <_sercom_get_default_pad+0xba>
   15328:	2b03      	cmp	r3, #3
   1532a:	d006      	beq.n	1533a <_sercom_get_default_pad+0xbe>
   1532c:	e046      	b.n	153bc <_sercom_get_default_pad+0x140>
   1532e:	4b32      	ldr	r3, [pc, #200]	; (153f8 <_sercom_get_default_pad+0x17c>)
   15330:	e045      	b.n	153be <_sercom_get_default_pad+0x142>
   15332:	4b32      	ldr	r3, [pc, #200]	; (153fc <_sercom_get_default_pad+0x180>)
   15334:	e043      	b.n	153be <_sercom_get_default_pad+0x142>
   15336:	4b32      	ldr	r3, [pc, #200]	; (15400 <_sercom_get_default_pad+0x184>)
   15338:	e041      	b.n	153be <_sercom_get_default_pad+0x142>
   1533a:	4b32      	ldr	r3, [pc, #200]	; (15404 <_sercom_get_default_pad+0x188>)
   1533c:	e03f      	b.n	153be <_sercom_get_default_pad+0x142>
   1533e:	1cfb      	adds	r3, r7, #3
   15340:	781b      	ldrb	r3, [r3, #0]
   15342:	2b01      	cmp	r3, #1
   15344:	d00a      	beq.n	1535c <_sercom_get_default_pad+0xe0>
   15346:	dc02      	bgt.n	1534e <_sercom_get_default_pad+0xd2>
   15348:	2b00      	cmp	r3, #0
   1534a:	d005      	beq.n	15358 <_sercom_get_default_pad+0xdc>
   1534c:	e036      	b.n	153bc <_sercom_get_default_pad+0x140>
   1534e:	2b02      	cmp	r3, #2
   15350:	d006      	beq.n	15360 <_sercom_get_default_pad+0xe4>
   15352:	2b03      	cmp	r3, #3
   15354:	d006      	beq.n	15364 <_sercom_get_default_pad+0xe8>
   15356:	e031      	b.n	153bc <_sercom_get_default_pad+0x140>
   15358:	4b2b      	ldr	r3, [pc, #172]	; (15408 <_sercom_get_default_pad+0x18c>)
   1535a:	e030      	b.n	153be <_sercom_get_default_pad+0x142>
   1535c:	4b2b      	ldr	r3, [pc, #172]	; (1540c <_sercom_get_default_pad+0x190>)
   1535e:	e02e      	b.n	153be <_sercom_get_default_pad+0x142>
   15360:	4b2b      	ldr	r3, [pc, #172]	; (15410 <_sercom_get_default_pad+0x194>)
   15362:	e02c      	b.n	153be <_sercom_get_default_pad+0x142>
   15364:	4b2b      	ldr	r3, [pc, #172]	; (15414 <_sercom_get_default_pad+0x198>)
   15366:	e02a      	b.n	153be <_sercom_get_default_pad+0x142>
   15368:	1cfb      	adds	r3, r7, #3
   1536a:	781b      	ldrb	r3, [r3, #0]
   1536c:	2b01      	cmp	r3, #1
   1536e:	d00a      	beq.n	15386 <_sercom_get_default_pad+0x10a>
   15370:	dc02      	bgt.n	15378 <_sercom_get_default_pad+0xfc>
   15372:	2b00      	cmp	r3, #0
   15374:	d005      	beq.n	15382 <_sercom_get_default_pad+0x106>
   15376:	e021      	b.n	153bc <_sercom_get_default_pad+0x140>
   15378:	2b02      	cmp	r3, #2
   1537a:	d006      	beq.n	1538a <_sercom_get_default_pad+0x10e>
   1537c:	2b03      	cmp	r3, #3
   1537e:	d006      	beq.n	1538e <_sercom_get_default_pad+0x112>
   15380:	e01c      	b.n	153bc <_sercom_get_default_pad+0x140>
   15382:	4b25      	ldr	r3, [pc, #148]	; (15418 <_sercom_get_default_pad+0x19c>)
   15384:	e01b      	b.n	153be <_sercom_get_default_pad+0x142>
   15386:	4b25      	ldr	r3, [pc, #148]	; (1541c <_sercom_get_default_pad+0x1a0>)
   15388:	e019      	b.n	153be <_sercom_get_default_pad+0x142>
   1538a:	4b25      	ldr	r3, [pc, #148]	; (15420 <_sercom_get_default_pad+0x1a4>)
   1538c:	e017      	b.n	153be <_sercom_get_default_pad+0x142>
   1538e:	4b25      	ldr	r3, [pc, #148]	; (15424 <_sercom_get_default_pad+0x1a8>)
   15390:	e015      	b.n	153be <_sercom_get_default_pad+0x142>
   15392:	1cfb      	adds	r3, r7, #3
   15394:	781b      	ldrb	r3, [r3, #0]
   15396:	2b01      	cmp	r3, #1
   15398:	d00a      	beq.n	153b0 <_sercom_get_default_pad+0x134>
   1539a:	dc02      	bgt.n	153a2 <_sercom_get_default_pad+0x126>
   1539c:	2b00      	cmp	r3, #0
   1539e:	d005      	beq.n	153ac <_sercom_get_default_pad+0x130>
   153a0:	e00c      	b.n	153bc <_sercom_get_default_pad+0x140>
   153a2:	2b02      	cmp	r3, #2
   153a4:	d006      	beq.n	153b4 <_sercom_get_default_pad+0x138>
   153a6:	2b03      	cmp	r3, #3
   153a8:	d006      	beq.n	153b8 <_sercom_get_default_pad+0x13c>
   153aa:	e007      	b.n	153bc <_sercom_get_default_pad+0x140>
   153ac:	4b1e      	ldr	r3, [pc, #120]	; (15428 <_sercom_get_default_pad+0x1ac>)
   153ae:	e006      	b.n	153be <_sercom_get_default_pad+0x142>
   153b0:	4b1e      	ldr	r3, [pc, #120]	; (1542c <_sercom_get_default_pad+0x1b0>)
   153b2:	e004      	b.n	153be <_sercom_get_default_pad+0x142>
   153b4:	4b1e      	ldr	r3, [pc, #120]	; (15430 <_sercom_get_default_pad+0x1b4>)
   153b6:	e002      	b.n	153be <_sercom_get_default_pad+0x142>
   153b8:	4b1e      	ldr	r3, [pc, #120]	; (15434 <_sercom_get_default_pad+0x1b8>)
   153ba:	e000      	b.n	153be <_sercom_get_default_pad+0x142>
	}

	Assert(false);
	return 0;
   153bc:	2300      	movs	r3, #0
}
   153be:	0018      	movs	r0, r3
   153c0:	46bd      	mov	sp, r7
   153c2:	b002      	add	sp, #8
   153c4:	bd80      	pop	{r7, pc}
   153c6:	46c0      	nop			; (mov r8, r8)
   153c8:	42000800 	.word	0x42000800
   153cc:	42000400 	.word	0x42000400
   153d0:	42001000 	.word	0x42001000
   153d4:	43000400 	.word	0x43000400
   153d8:	42000c00 	.word	0x42000c00
   153dc:	00040003 	.word	0x00040003
   153e0:	00050003 	.word	0x00050003
   153e4:	00060003 	.word	0x00060003
   153e8:	00070003 	.word	0x00070003
   153ec:	00010003 	.word	0x00010003
   153f0:	001e0003 	.word	0x001e0003
   153f4:	001f0003 	.word	0x001f0003
   153f8:	00080003 	.word	0x00080003
   153fc:	00090003 	.word	0x00090003
   15400:	000a0003 	.word	0x000a0003
   15404:	000b0003 	.word	0x000b0003
   15408:	00100003 	.word	0x00100003
   1540c:	00110003 	.word	0x00110003
   15410:	00120003 	.word	0x00120003
   15414:	00130003 	.word	0x00130003
   15418:	000c0003 	.word	0x000c0003
   1541c:	000d0003 	.word	0x000d0003
   15420:	000e0003 	.word	0x000e0003
   15424:	000f0003 	.word	0x000f0003
   15428:	00160003 	.word	0x00160003
   1542c:	00170003 	.word	0x00170003
   15430:	00180003 	.word	0x00180003
   15434:	00190003 	.word	0x00190003

00015438 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   15438:	b590      	push	{r4, r7, lr}
   1543a:	b08b      	sub	sp, #44	; 0x2c
   1543c:	af00      	add	r7, sp, #0
   1543e:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   15440:	230c      	movs	r3, #12
   15442:	18fb      	adds	r3, r7, r3
   15444:	4a0f      	ldr	r2, [pc, #60]	; (15484 <_sercom_get_sercom_inst_index+0x4c>)
   15446:	ca13      	ldmia	r2!, {r0, r1, r4}
   15448:	c313      	stmia	r3!, {r0, r1, r4}
   1544a:	ca13      	ldmia	r2!, {r0, r1, r4}
   1544c:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1544e:	2300      	movs	r3, #0
   15450:	627b      	str	r3, [r7, #36]	; 0x24
   15452:	e00e      	b.n	15472 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   15454:	230c      	movs	r3, #12
   15456:	18fb      	adds	r3, r7, r3
   15458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1545a:	0092      	lsls	r2, r2, #2
   1545c:	58d3      	ldr	r3, [r2, r3]
   1545e:	001a      	movs	r2, r3
   15460:	687b      	ldr	r3, [r7, #4]
   15462:	429a      	cmp	r2, r3
   15464:	d102      	bne.n	1546c <_sercom_get_sercom_inst_index+0x34>
			return i;
   15466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15468:	b2db      	uxtb	r3, r3
   1546a:	e006      	b.n	1547a <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1546c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1546e:	3301      	adds	r3, #1
   15470:	627b      	str	r3, [r7, #36]	; 0x24
   15472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15474:	2b05      	cmp	r3, #5
   15476:	d9ed      	bls.n	15454 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   15478:	2300      	movs	r3, #0
}
   1547a:	0018      	movs	r0, r3
   1547c:	46bd      	mov	sp, r7
   1547e:	b00b      	add	sp, #44	; 0x2c
   15480:	bd90      	pop	{r4, r7, pc}
   15482:	46c0      	nop			; (mov r8, r8)
   15484:	00025d38 	.word	0x00025d38

00015488 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
   15488:	b580      	push	{r7, lr}
   1548a:	b082      	sub	sp, #8
   1548c:	af00      	add	r7, sp, #0
   1548e:	6078      	str	r0, [r7, #4]
	if (n > 0) {
   15490:	687b      	ldr	r3, [r7, #4]
   15492:	2b00      	cmp	r3, #0
   15494:	d00c      	beq.n	154b0 <delay_cycles+0x28>
		SysTick->LOAD = n;
   15496:	4b08      	ldr	r3, [pc, #32]	; (154b8 <delay_cycles+0x30>)
   15498:	687a      	ldr	r2, [r7, #4]
   1549a:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
   1549c:	4b06      	ldr	r3, [pc, #24]	; (154b8 <delay_cycles+0x30>)
   1549e:	2200      	movs	r2, #0
   154a0:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   154a2:	46c0      	nop			; (mov r8, r8)
   154a4:	4b04      	ldr	r3, [pc, #16]	; (154b8 <delay_cycles+0x30>)
   154a6:	681a      	ldr	r2, [r3, #0]
   154a8:	2380      	movs	r3, #128	; 0x80
   154aa:	025b      	lsls	r3, r3, #9
   154ac:	4013      	ands	r3, r2
   154ae:	d0f9      	beq.n	154a4 <delay_cycles+0x1c>
		};
	}
}
   154b0:	46c0      	nop			; (mov r8, r8)
   154b2:	46bd      	mov	sp, r7
   154b4:	b002      	add	sp, #8
   154b6:	bd80      	pop	{r7, pc}
   154b8:	e000e010 	.word	0xe000e010

000154bc <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
   154bc:	b580      	push	{r7, lr}
   154be:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
   154c0:	2000      	movs	r0, #0
   154c2:	4b0f      	ldr	r3, [pc, #60]	; (15500 <delay_init+0x44>)
   154c4:	4798      	blx	r3
   154c6:	0002      	movs	r2, r0
   154c8:	4b0e      	ldr	r3, [pc, #56]	; (15504 <delay_init+0x48>)
   154ca:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
   154cc:	4b0d      	ldr	r3, [pc, #52]	; (15504 <delay_init+0x48>)
   154ce:	6818      	ldr	r0, [r3, #0]
   154d0:	4b0d      	ldr	r3, [pc, #52]	; (15508 <delay_init+0x4c>)
   154d2:	22fa      	movs	r2, #250	; 0xfa
   154d4:	0091      	lsls	r1, r2, #2
   154d6:	4798      	blx	r3
   154d8:	0003      	movs	r3, r0
   154da:	001a      	movs	r2, r3
   154dc:	4b09      	ldr	r3, [pc, #36]	; (15504 <delay_init+0x48>)
   154de:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
   154e0:	4b08      	ldr	r3, [pc, #32]	; (15504 <delay_init+0x48>)
   154e2:	6818      	ldr	r0, [r3, #0]
   154e4:	4b08      	ldr	r3, [pc, #32]	; (15508 <delay_init+0x4c>)
   154e6:	22fa      	movs	r2, #250	; 0xfa
   154e8:	0091      	lsls	r1, r2, #2
   154ea:	4798      	blx	r3
   154ec:	0003      	movs	r3, r0
   154ee:	001a      	movs	r2, r3
   154f0:	4b06      	ldr	r3, [pc, #24]	; (1550c <delay_init+0x50>)
   154f2:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   154f4:	4b06      	ldr	r3, [pc, #24]	; (15510 <delay_init+0x54>)
   154f6:	2205      	movs	r2, #5
   154f8:	601a      	str	r2, [r3, #0]
}
   154fa:	46c0      	nop			; (mov r8, r8)
   154fc:	46bd      	mov	sp, r7
   154fe:	bd80      	pop	{r7, pc}
   15500:	00015ec1 	.word	0x00015ec1
   15504:	20000108 	.word	0x20000108
   15508:	0001df49 	.word	0x0001df49
   1550c:	2000010c 	.word	0x2000010c
   15510:	e000e010 	.word	0xe000e010

00015514 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
   15514:	b580      	push	{r7, lr}
   15516:	b082      	sub	sp, #8
   15518:	af00      	add	r7, sp, #0
   1551a:	6078      	str	r0, [r7, #4]
	while (n--) {
   1551c:	e004      	b.n	15528 <delay_cycles_us+0x14>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
   1551e:	4b07      	ldr	r3, [pc, #28]	; (1553c <delay_cycles_us+0x28>)
   15520:	681b      	ldr	r3, [r3, #0]
   15522:	0018      	movs	r0, r3
   15524:	4b06      	ldr	r3, [pc, #24]	; (15540 <delay_cycles_us+0x2c>)
   15526:	4798      	blx	r3
	while (n--) {
   15528:	687b      	ldr	r3, [r7, #4]
   1552a:	1e5a      	subs	r2, r3, #1
   1552c:	607a      	str	r2, [r7, #4]
   1552e:	2b00      	cmp	r3, #0
   15530:	d1f5      	bne.n	1551e <delay_cycles_us+0xa>
	}
}
   15532:	46c0      	nop			; (mov r8, r8)
   15534:	46bd      	mov	sp, r7
   15536:	b002      	add	sp, #8
   15538:	bd80      	pop	{r7, pc}
   1553a:	46c0      	nop			; (mov r8, r8)
   1553c:	2000010c 	.word	0x2000010c
   15540:	00015489 	.word	0x00015489

00015544 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
   15544:	b580      	push	{r7, lr}
   15546:	b082      	sub	sp, #8
   15548:	af00      	add	r7, sp, #0
   1554a:	6078      	str	r0, [r7, #4]
	while (n--) {
   1554c:	e004      	b.n	15558 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
   1554e:	4b07      	ldr	r3, [pc, #28]	; (1556c <delay_cycles_ms+0x28>)
   15550:	681b      	ldr	r3, [r3, #0]
   15552:	0018      	movs	r0, r3
   15554:	4b06      	ldr	r3, [pc, #24]	; (15570 <delay_cycles_ms+0x2c>)
   15556:	4798      	blx	r3
	while (n--) {
   15558:	687b      	ldr	r3, [r7, #4]
   1555a:	1e5a      	subs	r2, r3, #1
   1555c:	607a      	str	r2, [r7, #4]
   1555e:	2b00      	cmp	r3, #0
   15560:	d1f5      	bne.n	1554e <delay_cycles_ms+0xa>
	}
}
   15562:	46c0      	nop			; (mov r8, r8)
   15564:	46bd      	mov	sp, r7
   15566:	b002      	add	sp, #8
   15568:	bd80      	pop	{r7, pc}
   1556a:	46c0      	nop			; (mov r8, r8)
   1556c:	20000108 	.word	0x20000108
   15570:	00015489 	.word	0x00015489

00015574 <system_pinmux_get_config_defaults>:
{
   15574:	b580      	push	{r7, lr}
   15576:	b082      	sub	sp, #8
   15578:	af00      	add	r7, sp, #0
   1557a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   1557c:	687b      	ldr	r3, [r7, #4]
   1557e:	2280      	movs	r2, #128	; 0x80
   15580:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   15582:	687b      	ldr	r3, [r7, #4]
   15584:	2200      	movs	r2, #0
   15586:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   15588:	687b      	ldr	r3, [r7, #4]
   1558a:	2201      	movs	r2, #1
   1558c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1558e:	687b      	ldr	r3, [r7, #4]
   15590:	2200      	movs	r2, #0
   15592:	70da      	strb	r2, [r3, #3]
}
   15594:	46c0      	nop			; (mov r8, r8)
   15596:	46bd      	mov	sp, r7
   15598:	b002      	add	sp, #8
   1559a:	bd80      	pop	{r7, pc}

0001559c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   1559c:	b580      	push	{r7, lr}
   1559e:	b084      	sub	sp, #16
   155a0:	af00      	add	r7, sp, #0
   155a2:	0002      	movs	r2, r0
   155a4:	6039      	str	r1, [r7, #0]
   155a6:	1dfb      	adds	r3, r7, #7
   155a8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   155aa:	230c      	movs	r3, #12
   155ac:	18fb      	adds	r3, r7, r3
   155ae:	0018      	movs	r0, r3
   155b0:	4b10      	ldr	r3, [pc, #64]	; (155f4 <port_pin_set_config+0x58>)
   155b2:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   155b4:	230c      	movs	r3, #12
   155b6:	18fb      	adds	r3, r7, r3
   155b8:	2280      	movs	r2, #128	; 0x80
   155ba:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   155bc:	683b      	ldr	r3, [r7, #0]
   155be:	781a      	ldrb	r2, [r3, #0]
   155c0:	230c      	movs	r3, #12
   155c2:	18fb      	adds	r3, r7, r3
   155c4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   155c6:	683b      	ldr	r3, [r7, #0]
   155c8:	785a      	ldrb	r2, [r3, #1]
   155ca:	230c      	movs	r3, #12
   155cc:	18fb      	adds	r3, r7, r3
   155ce:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   155d0:	683b      	ldr	r3, [r7, #0]
   155d2:	789a      	ldrb	r2, [r3, #2]
   155d4:	230c      	movs	r3, #12
   155d6:	18fb      	adds	r3, r7, r3
   155d8:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   155da:	230c      	movs	r3, #12
   155dc:	18fa      	adds	r2, r7, r3
   155de:	1dfb      	adds	r3, r7, #7
   155e0:	781b      	ldrb	r3, [r3, #0]
   155e2:	0011      	movs	r1, r2
   155e4:	0018      	movs	r0, r3
   155e6:	4b04      	ldr	r3, [pc, #16]	; (155f8 <port_pin_set_config+0x5c>)
   155e8:	4798      	blx	r3
}
   155ea:	46c0      	nop			; (mov r8, r8)
   155ec:	46bd      	mov	sp, r7
   155ee:	b004      	add	sp, #16
   155f0:	bd80      	pop	{r7, pc}
   155f2:	46c0      	nop			; (mov r8, r8)
   155f4:	00015575 	.word	0x00015575
   155f8:	00016235 	.word	0x00016235

000155fc <system_gclk_gen_get_config_defaults>:
{
   155fc:	b580      	push	{r7, lr}
   155fe:	b082      	sub	sp, #8
   15600:	af00      	add	r7, sp, #0
   15602:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   15604:	687b      	ldr	r3, [r7, #4]
   15606:	2201      	movs	r2, #1
   15608:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   1560a:	687b      	ldr	r3, [r7, #4]
   1560c:	2200      	movs	r2, #0
   1560e:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
   15610:	687b      	ldr	r3, [r7, #4]
   15612:	2206      	movs	r2, #6
   15614:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   15616:	687b      	ldr	r3, [r7, #4]
   15618:	2200      	movs	r2, #0
   1561a:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   1561c:	687b      	ldr	r3, [r7, #4]
   1561e:	2200      	movs	r2, #0
   15620:	725a      	strb	r2, [r3, #9]
}
   15622:	46c0      	nop			; (mov r8, r8)
   15624:	46bd      	mov	sp, r7
   15626:	b002      	add	sp, #8
   15628:	bd80      	pop	{r7, pc}

0001562a <system_main_clock_set_failure_detect>:
{
   1562a:	b580      	push	{r7, lr}
   1562c:	b082      	sub	sp, #8
   1562e:	af00      	add	r7, sp, #0
   15630:	0002      	movs	r2, r0
   15632:	1dfb      	adds	r3, r7, #7
   15634:	701a      	strb	r2, [r3, #0]
}
   15636:	46c0      	nop			; (mov r8, r8)
   15638:	46bd      	mov	sp, r7
   1563a:	b002      	add	sp, #8
   1563c:	bd80      	pop	{r7, pc}
	...

00015640 <system_cpu_clock_set_divider>:
{
   15640:	b580      	push	{r7, lr}
   15642:	b082      	sub	sp, #8
   15644:	af00      	add	r7, sp, #0
   15646:	0002      	movs	r2, r0
   15648:	1dfb      	adds	r3, r7, #7
   1564a:	701a      	strb	r2, [r3, #0]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
   1564c:	4a05      	ldr	r2, [pc, #20]	; (15664 <system_cpu_clock_set_divider+0x24>)
   1564e:	1dfb      	adds	r3, r7, #7
   15650:	781b      	ldrb	r3, [r3, #0]
   15652:	2101      	movs	r1, #1
   15654:	4099      	lsls	r1, r3
   15656:	000b      	movs	r3, r1
   15658:	b2db      	uxtb	r3, r3
   1565a:	7113      	strb	r3, [r2, #4]
}
   1565c:	46c0      	nop			; (mov r8, r8)
   1565e:	46bd      	mov	sp, r7
   15660:	b002      	add	sp, #8
   15662:	bd80      	pop	{r7, pc}
   15664:	40000400 	.word	0x40000400

00015668 <system_low_power_clock_set_divider>:
{
   15668:	b580      	push	{r7, lr}
   1566a:	b082      	sub	sp, #8
   1566c:	af00      	add	r7, sp, #0
   1566e:	0002      	movs	r2, r0
   15670:	1dfb      	adds	r3, r7, #7
   15672:	701a      	strb	r2, [r3, #0]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
   15674:	4a05      	ldr	r2, [pc, #20]	; (1568c <system_low_power_clock_set_divider+0x24>)
   15676:	1dfb      	adds	r3, r7, #7
   15678:	781b      	ldrb	r3, [r3, #0]
   1567a:	2101      	movs	r1, #1
   1567c:	4099      	lsls	r1, r3
   1567e:	000b      	movs	r3, r1
   15680:	b2db      	uxtb	r3, r3
   15682:	7153      	strb	r3, [r2, #5]
}
   15684:	46c0      	nop			; (mov r8, r8)
   15686:	46bd      	mov	sp, r7
   15688:	b002      	add	sp, #8
   1568a:	bd80      	pop	{r7, pc}
   1568c:	40000400 	.word	0x40000400

00015690 <system_backup_clock_set_divider>:
{
   15690:	b580      	push	{r7, lr}
   15692:	b082      	sub	sp, #8
   15694:	af00      	add	r7, sp, #0
   15696:	0002      	movs	r2, r0
   15698:	1dfb      	adds	r3, r7, #7
   1569a:	701a      	strb	r2, [r3, #0]
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
   1569c:	4a05      	ldr	r2, [pc, #20]	; (156b4 <system_backup_clock_set_divider+0x24>)
   1569e:	1dfb      	adds	r3, r7, #7
   156a0:	781b      	ldrb	r3, [r3, #0]
   156a2:	2101      	movs	r1, #1
   156a4:	4099      	lsls	r1, r3
   156a6:	000b      	movs	r3, r1
   156a8:	b2db      	uxtb	r3, r3
   156aa:	7193      	strb	r3, [r2, #6]
}
   156ac:	46c0      	nop			; (mov r8, r8)
   156ae:	46bd      	mov	sp, r7
   156b0:	b002      	add	sp, #8
   156b2:	bd80      	pop	{r7, pc}
   156b4:	40000400 	.word	0x40000400

000156b8 <system_cpu_clock_get_hz>:
{
   156b8:	b580      	push	{r7, lr}
   156ba:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
   156bc:	2000      	movs	r0, #0
   156be:	4b07      	ldr	r3, [pc, #28]	; (156dc <system_cpu_clock_get_hz+0x24>)
   156c0:	4798      	blx	r3
   156c2:	0002      	movs	r2, r0
   156c4:	4b06      	ldr	r3, [pc, #24]	; (156e0 <system_cpu_clock_get_hz+0x28>)
   156c6:	791b      	ldrb	r3, [r3, #4]
   156c8:	b2db      	uxtb	r3, r3
   156ca:	0019      	movs	r1, r3
   156cc:	4b05      	ldr	r3, [pc, #20]	; (156e4 <system_cpu_clock_get_hz+0x2c>)
   156ce:	0010      	movs	r0, r2
   156d0:	4798      	blx	r3
   156d2:	0003      	movs	r3, r0
}
   156d4:	0018      	movs	r0, r3
   156d6:	46bd      	mov	sp, r7
   156d8:	bd80      	pop	{r7, pc}
   156da:	46c0      	nop			; (mov r8, r8)
   156dc:	00015ec1 	.word	0x00015ec1
   156e0:	40000400 	.word	0x40000400
   156e4:	0001df49 	.word	0x0001df49

000156e8 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   156e8:	b580      	push	{r7, lr}
   156ea:	b082      	sub	sp, #8
   156ec:	af00      	add	r7, sp, #0
   156ee:	0002      	movs	r2, r0
   156f0:	1dfb      	adds	r3, r7, #7
   156f2:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   156f4:	4a08      	ldr	r2, [pc, #32]	; (15718 <system_flash_set_waitstates+0x30>)
   156f6:	1dfb      	adds	r3, r7, #7
   156f8:	781b      	ldrb	r3, [r3, #0]
   156fa:	210f      	movs	r1, #15
   156fc:	400b      	ands	r3, r1
   156fe:	b2d9      	uxtb	r1, r3
   15700:	6853      	ldr	r3, [r2, #4]
   15702:	200f      	movs	r0, #15
   15704:	4001      	ands	r1, r0
   15706:	0049      	lsls	r1, r1, #1
   15708:	201e      	movs	r0, #30
   1570a:	4383      	bics	r3, r0
   1570c:	430b      	orrs	r3, r1
   1570e:	6053      	str	r3, [r2, #4]
}
   15710:	46c0      	nop			; (mov r8, r8)
   15712:	46bd      	mov	sp, r7
   15714:	b002      	add	sp, #8
   15716:	bd80      	pop	{r7, pc}
   15718:	41004000 	.word	0x41004000

0001571c <system_switch_performance_level>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid parameter
 * \retval STATUS_OK               Successfully
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{
   1571c:	b580      	push	{r7, lr}
   1571e:	b082      	sub	sp, #8
   15720:	af00      	add	r7, sp, #0
   15722:	0002      	movs	r2, r0
   15724:	1dfb      	adds	r3, r7, #7
   15726:	701a      	strb	r2, [r3, #0]

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
   15728:	2380      	movs	r3, #128	; 0x80
   1572a:	05db      	lsls	r3, r3, #23
   1572c:	789b      	ldrb	r3, [r3, #2]
   1572e:	b2db      	uxtb	r3, r3
   15730:	1dfa      	adds	r2, r7, #7
   15732:	7812      	ldrb	r2, [r2, #0]
   15734:	429a      	cmp	r2, r3
   15736:	d101      	bne.n	1573c <system_switch_performance_level+0x20>
		return STATUS_OK;
   15738:	2300      	movs	r3, #0
   1573a:	e019      	b.n	15770 <system_switch_performance_level+0x54>
	}

#if SAML22 || SAML21XXXB
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
   1573c:	2380      	movs	r3, #128	; 0x80
   1573e:	05db      	lsls	r3, r3, #23
   15740:	789b      	ldrb	r3, [r3, #2]
   15742:	b2db      	uxtb	r3, r3
   15744:	b25b      	sxtb	r3, r3
   15746:	2b00      	cmp	r3, #0
   15748:	da01      	bge.n	1574e <system_switch_performance_level+0x32>
		return STATUS_ERR_INVALID_ARG;
   1574a:	2317      	movs	r3, #23
   1574c:	e010      	b.n	15770 <system_switch_performance_level+0x54>
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
   1574e:	2380      	movs	r3, #128	; 0x80
   15750:	05db      	lsls	r3, r3, #23
   15752:	2201      	movs	r2, #1
   15754:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
   15756:	2380      	movs	r3, #128	; 0x80
   15758:	05db      	lsls	r3, r3, #23
   1575a:	1dfa      	adds	r2, r7, #7
   1575c:	7812      	ldrb	r2, [r2, #0]
   1575e:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
   15760:	46c0      	nop			; (mov r8, r8)
   15762:	2380      	movs	r3, #128	; 0x80
   15764:	05db      	lsls	r3, r3, #23
   15766:	799b      	ldrb	r3, [r3, #6]
   15768:	b2db      	uxtb	r3, r3
   1576a:	2b00      	cmp	r3, #0
   1576c:	d0f9      	beq.n	15762 <system_switch_performance_level+0x46>
		;
	}
	return STATUS_OK;
   1576e:	2300      	movs	r3, #0
}
   15770:	0018      	movs	r0, r3
   15772:	46bd      	mov	sp, r7
   15774:	b002      	add	sp, #8
   15776:	bd80      	pop	{r7, pc}

00015778 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   15778:	b580      	push	{r7, lr}
   1577a:	af00      	add	r7, sp, #0
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
   1577c:	46c0      	nop			; (mov r8, r8)
   1577e:	4b04      	ldr	r3, [pc, #16]	; (15790 <_system_dfll_wait_for_sync+0x18>)
   15780:	68da      	ldr	r2, [r3, #12]
   15782:	2380      	movs	r3, #128	; 0x80
   15784:	005b      	lsls	r3, r3, #1
   15786:	4013      	ands	r3, r2
   15788:	d0f9      	beq.n	1577e <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   1578a:	46c0      	nop			; (mov r8, r8)
   1578c:	46bd      	mov	sp, r7
   1578e:	bd80      	pop	{r7, pc}
   15790:	40000c00 	.word	0x40000c00

00015794 <_system_clock_source_dfll_set_config_errata_9905>:
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   15794:	b580      	push	{r7, lr}
   15796:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
   15798:	4b0f      	ldr	r3, [pc, #60]	; (157d8 <_system_clock_source_dfll_set_config_errata_9905+0x44>)
   1579a:	2202      	movs	r2, #2
   1579c:	831a      	strh	r2, [r3, #24]
	_system_dfll_wait_for_sync();
   1579e:	4b0f      	ldr	r3, [pc, #60]	; (157dc <_system_clock_source_dfll_set_config_errata_9905+0x48>)
   157a0:	4798      	blx	r3

	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   157a2:	4a0d      	ldr	r2, [pc, #52]	; (157d8 <_system_clock_source_dfll_set_config_errata_9905+0x44>)
   157a4:	4b0e      	ldr	r3, [pc, #56]	; (157e0 <_system_clock_source_dfll_set_config_errata_9905+0x4c>)
   157a6:	689b      	ldr	r3, [r3, #8]
   157a8:	6213      	str	r3, [r2, #32]

	/* Disable ONDEMAND mode while writing configurations */
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
   157aa:	4b0b      	ldr	r3, [pc, #44]	; (157d8 <_system_clock_source_dfll_set_config_errata_9905+0x44>)
   157ac:	2202      	movs	r2, #2
   157ae:	831a      	strh	r2, [r3, #24]
	_system_dfll_wait_for_sync();
   157b0:	4b0a      	ldr	r3, [pc, #40]	; (157dc <_system_clock_source_dfll_set_config_errata_9905+0x48>)
   157b2:	4798      	blx	r3

	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   157b4:	4a08      	ldr	r2, [pc, #32]	; (157d8 <_system_clock_source_dfll_set_config_errata_9905+0x44>)
   157b6:	4b0a      	ldr	r3, [pc, #40]	; (157e0 <_system_clock_source_dfll_set_config_errata_9905+0x4c>)
   157b8:	685b      	ldr	r3, [r3, #4]
   157ba:	61d3      	str	r3, [r2, #28]

	/* Write full configuration to DFLL control register */
	OSCCTRL->DFLLCTRL.reg = 0;
   157bc:	4b06      	ldr	r3, [pc, #24]	; (157d8 <_system_clock_source_dfll_set_config_errata_9905+0x44>)
   157be:	2200      	movs	r2, #0
   157c0:	831a      	strh	r2, [r3, #24]
	_system_dfll_wait_for_sync();
   157c2:	4b06      	ldr	r3, [pc, #24]	; (157dc <_system_clock_source_dfll_set_config_errata_9905+0x48>)
   157c4:	4798      	blx	r3
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   157c6:	4a04      	ldr	r2, [pc, #16]	; (157d8 <_system_clock_source_dfll_set_config_errata_9905+0x44>)
   157c8:	4b05      	ldr	r3, [pc, #20]	; (157e0 <_system_clock_source_dfll_set_config_errata_9905+0x4c>)
   157ca:	681b      	ldr	r3, [r3, #0]
   157cc:	b29b      	uxth	r3, r3
   157ce:	8313      	strh	r3, [r2, #24]
}
   157d0:	46c0      	nop			; (mov r8, r8)
   157d2:	46bd      	mov	sp, r7
   157d4:	bd80      	pop	{r7, pc}
   157d6:	46c0      	nop			; (mov r8, r8)
   157d8:	40000c00 	.word	0x40000c00
   157dc:	00015779 	.word	0x00015779
   157e0:	20000ddc 	.word	0x20000ddc

000157e4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   157e4:	b580      	push	{r7, lr}
   157e6:	b082      	sub	sp, #8
   157e8:	af00      	add	r7, sp, #0
   157ea:	0002      	movs	r2, r0
   157ec:	1dfb      	adds	r3, r7, #7
   157ee:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   157f0:	1dfb      	adds	r3, r7, #7
   157f2:	781b      	ldrb	r3, [r3, #0]
   157f4:	2b08      	cmp	r3, #8
   157f6:	d841      	bhi.n	1587c <system_clock_source_get_hz+0x98>
   157f8:	009a      	lsls	r2, r3, #2
   157fa:	4b23      	ldr	r3, [pc, #140]	; (15888 <system_clock_source_get_hz+0xa4>)
   157fc:	18d3      	adds	r3, r2, r3
   157fe:	681b      	ldr	r3, [r3, #0]
   15800:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   15802:	4b22      	ldr	r3, [pc, #136]	; (1588c <system_clock_source_get_hz+0xa8>)
   15804:	691b      	ldr	r3, [r3, #16]
   15806:	e03a      	b.n	1587e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
   15808:	4b21      	ldr	r3, [pc, #132]	; (15890 <system_clock_source_get_hz+0xac>)
   1580a:	7d1b      	ldrb	r3, [r3, #20]
   1580c:	071b      	lsls	r3, r3, #28
   1580e:	0f9b      	lsrs	r3, r3, #30
   15810:	b2db      	uxtb	r3, r3
   15812:	3301      	adds	r3, #1
   15814:	001a      	movs	r2, r3
   15816:	4b1f      	ldr	r3, [pc, #124]	; (15894 <system_clock_source_get_hz+0xb0>)
   15818:	4353      	muls	r3, r2
   1581a:	e030      	b.n	1587e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   1581c:	2380      	movs	r3, #128	; 0x80
   1581e:	021b      	lsls	r3, r3, #8
   15820:	e02d      	b.n	1587e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   15822:	2380      	movs	r3, #128	; 0x80
   15824:	021b      	lsls	r3, r3, #8
   15826:	e02a      	b.n	1587e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   15828:	4b18      	ldr	r3, [pc, #96]	; (1588c <system_clock_source_get_hz+0xa8>)
   1582a:	695b      	ldr	r3, [r3, #20]
   1582c:	e027      	b.n	1587e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
   1582e:	4b17      	ldr	r3, [pc, #92]	; (1588c <system_clock_source_get_hz+0xa8>)
   15830:	681b      	ldr	r3, [r3, #0]
   15832:	2202      	movs	r2, #2
   15834:	4013      	ands	r3, r2
   15836:	d101      	bne.n	1583c <system_clock_source_get_hz+0x58>
			return 0;
   15838:	2300      	movs	r3, #0
   1583a:	e020      	b.n	1587e <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   1583c:	4b16      	ldr	r3, [pc, #88]	; (15898 <system_clock_source_get_hz+0xb4>)
   1583e:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
   15840:	4b12      	ldr	r3, [pc, #72]	; (1588c <system_clock_source_get_hz+0xa8>)
   15842:	681b      	ldr	r3, [r3, #0]
   15844:	2204      	movs	r2, #4
   15846:	4013      	ands	r3, r2
   15848:	d009      	beq.n	1585e <system_clock_source_get_hz+0x7a>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
   1584a:	2000      	movs	r0, #0
   1584c:	4b13      	ldr	r3, [pc, #76]	; (1589c <system_clock_source_get_hz+0xb8>)
   1584e:	4798      	blx	r3
   15850:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   15852:	4b0e      	ldr	r3, [pc, #56]	; (1588c <system_clock_source_get_hz+0xa8>)
   15854:	689b      	ldr	r3, [r3, #8]
   15856:	041b      	lsls	r3, r3, #16
   15858:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
   1585a:	4353      	muls	r3, r2
   1585c:	e00f      	b.n	1587e <system_clock_source_get_hz+0x9a>
		}

		return 48000000UL;
   1585e:	4b10      	ldr	r3, [pc, #64]	; (158a0 <system_clock_source_get_hz+0xbc>)
   15860:	e00d      	b.n	1587e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
   15862:	4a0b      	ldr	r2, [pc, #44]	; (15890 <system_clock_source_get_hz+0xac>)
   15864:	2328      	movs	r3, #40	; 0x28
   15866:	5cd3      	ldrb	r3, [r2, r3]
   15868:	b2db      	uxtb	r3, r3
   1586a:	001a      	movs	r2, r3
   1586c:	2302      	movs	r3, #2
   1586e:	4013      	ands	r3, r2
   15870:	d101      	bne.n	15876 <system_clock_source_get_hz+0x92>
			return 0;
   15872:	2300      	movs	r3, #0
   15874:	e003      	b.n	1587e <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   15876:	4b05      	ldr	r3, [pc, #20]	; (1588c <system_clock_source_get_hz+0xa8>)
   15878:	68db      	ldr	r3, [r3, #12]
   1587a:	e000      	b.n	1587e <system_clock_source_get_hz+0x9a>

	default:
		return 0;
   1587c:	2300      	movs	r3, #0
	}
}
   1587e:	0018      	movs	r0, r3
   15880:	46bd      	mov	sp, r7
   15882:	b002      	add	sp, #8
   15884:	bd80      	pop	{r7, pc}
   15886:	46c0      	nop			; (mov r8, r8)
   15888:	00025d50 	.word	0x00025d50
   1588c:	20000ddc 	.word	0x20000ddc
   15890:	40000c00 	.word	0x40000c00
   15894:	003d0900 	.word	0x003d0900
   15898:	00015779 	.word	0x00015779
   1589c:	00016071 	.word	0x00016071
   158a0:	02dc6c00 	.word	0x02dc6c00

000158a4 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
   158a4:	b580      	push	{r7, lr}
   158a6:	b084      	sub	sp, #16
   158a8:	af00      	add	r7, sp, #0
   158aa:	6078      	str	r0, [r7, #4]
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
   158ac:	4b3a      	ldr	r3, [pc, #232]	; (15998 <system_clock_source_xosc32k_set_config+0xf4>)
   158ae:	695b      	ldr	r3, [r3, #20]
   158b0:	60fb      	str	r3, [r7, #12]

	temp.bit.STARTUP = config->startup_time;
   158b2:	687b      	ldr	r3, [r7, #4]
   158b4:	785b      	ldrb	r3, [r3, #1]
   158b6:	1c1a      	adds	r2, r3, #0
   158b8:	2307      	movs	r3, #7
   158ba:	4013      	ands	r3, r2
   158bc:	b2da      	uxtb	r2, r3
   158be:	230d      	movs	r3, #13
   158c0:	18fb      	adds	r3, r7, r3
   158c2:	2107      	movs	r1, #7
   158c4:	400a      	ands	r2, r1
   158c6:	0010      	movs	r0, r2
   158c8:	781a      	ldrb	r2, [r3, #0]
   158ca:	2107      	movs	r1, #7
   158cc:	438a      	bics	r2, r1
   158ce:	1c11      	adds	r1, r2, #0
   158d0:	1c02      	adds	r2, r0, #0
   158d2:	430a      	orrs	r2, r1
   158d4:	701a      	strb	r2, [r3, #0]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
   158d6:	687b      	ldr	r3, [r7, #4]
   158d8:	781b      	ldrb	r3, [r3, #0]
   158da:	2b00      	cmp	r3, #0
   158dc:	d106      	bne.n	158ec <system_clock_source_xosc32k_set_config+0x48>
		temp.bit.XTALEN = 1;
   158de:	230c      	movs	r3, #12
   158e0:	18fb      	adds	r3, r7, r3
   158e2:	781a      	ldrb	r2, [r3, #0]
   158e4:	2104      	movs	r1, #4
   158e6:	430a      	orrs	r2, r1
   158e8:	701a      	strb	r2, [r3, #0]
   158ea:	e005      	b.n	158f8 <system_clock_source_xosc32k_set_config+0x54>
	} else {
		temp.bit.XTALEN = 0;
   158ec:	230c      	movs	r3, #12
   158ee:	18fb      	adds	r3, r7, r3
   158f0:	781a      	ldrb	r2, [r3, #0]
   158f2:	2104      	movs	r1, #4
   158f4:	438a      	bics	r2, r1
   158f6:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.EN1K = config->enable_1khz_output;
   158f8:	687b      	ldr	r3, [r7, #4]
   158fa:	789a      	ldrb	r2, [r3, #2]
   158fc:	230c      	movs	r3, #12
   158fe:	18fb      	adds	r3, r7, r3
   15900:	2101      	movs	r1, #1
   15902:	400a      	ands	r2, r1
   15904:	0110      	lsls	r0, r2, #4
   15906:	781a      	ldrb	r2, [r3, #0]
   15908:	2110      	movs	r1, #16
   1590a:	438a      	bics	r2, r1
   1590c:	1c11      	adds	r1, r2, #0
   1590e:	1c02      	adds	r2, r0, #0
   15910:	430a      	orrs	r2, r1
   15912:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
   15914:	687b      	ldr	r3, [r7, #4]
   15916:	78da      	ldrb	r2, [r3, #3]
   15918:	230c      	movs	r3, #12
   1591a:	18fb      	adds	r3, r7, r3
   1591c:	2101      	movs	r1, #1
   1591e:	400a      	ands	r2, r1
   15920:	00d0      	lsls	r0, r2, #3
   15922:	781a      	ldrb	r2, [r3, #0]
   15924:	2108      	movs	r1, #8
   15926:	438a      	bics	r2, r1
   15928:	1c11      	adds	r1, r2, #0
   1592a:	1c02      	adds	r2, r0, #0
   1592c:	430a      	orrs	r2, r1
   1592e:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
   15930:	687b      	ldr	r3, [r7, #4]
   15932:	7a5a      	ldrb	r2, [r3, #9]
   15934:	230c      	movs	r3, #12
   15936:	18fb      	adds	r3, r7, r3
   15938:	01d0      	lsls	r0, r2, #7
   1593a:	781a      	ldrb	r2, [r3, #0]
   1593c:	217f      	movs	r1, #127	; 0x7f
   1593e:	400a      	ands	r2, r1
   15940:	1c11      	adds	r1, r2, #0
   15942:	1c02      	adds	r2, r0, #0
   15944:	430a      	orrs	r2, r1
   15946:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   15948:	687b      	ldr	r3, [r7, #4]
   1594a:	7a1a      	ldrb	r2, [r3, #8]
   1594c:	230c      	movs	r3, #12
   1594e:	18fb      	adds	r3, r7, r3
   15950:	2101      	movs	r1, #1
   15952:	400a      	ands	r2, r1
   15954:	0190      	lsls	r0, r2, #6
   15956:	781a      	ldrb	r2, [r3, #0]
   15958:	2140      	movs	r1, #64	; 0x40
   1595a:	438a      	bics	r2, r1
   1595c:	1c11      	adds	r1, r2, #0
   1595e:	1c02      	adds	r2, r0, #0
   15960:	430a      	orrs	r2, r1
   15962:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
   15964:	687b      	ldr	r3, [r7, #4]
   15966:	7a9a      	ldrb	r2, [r3, #10]
   15968:	230d      	movs	r3, #13
   1596a:	18fb      	adds	r3, r7, r3
   1596c:	2101      	movs	r1, #1
   1596e:	400a      	ands	r2, r1
   15970:	0110      	lsls	r0, r2, #4
   15972:	781a      	ldrb	r2, [r3, #0]
   15974:	2110      	movs	r1, #16
   15976:	438a      	bics	r2, r1
   15978:	1c11      	adds	r1, r2, #0
   1597a:	1c02      	adds	r2, r0, #0
   1597c:	430a      	orrs	r2, r1
   1597e:	701a      	strb	r2, [r3, #0]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
   15980:	687b      	ldr	r3, [r7, #4]
   15982:	685a      	ldr	r2, [r3, #4]
   15984:	4b05      	ldr	r3, [pc, #20]	; (1599c <system_clock_source_xosc32k_set_config+0xf8>)
   15986:	615a      	str	r2, [r3, #20]

	OSC32KCTRL->XOSC32K = temp;
   15988:	4b03      	ldr	r3, [pc, #12]	; (15998 <system_clock_source_xosc32k_set_config+0xf4>)
   1598a:	68fa      	ldr	r2, [r7, #12]
   1598c:	615a      	str	r2, [r3, #20]
}
   1598e:	46c0      	nop			; (mov r8, r8)
   15990:	46bd      	mov	sp, r7
   15992:	b004      	add	sp, #16
   15994:	bd80      	pop	{r7, pc}
   15996:	46c0      	nop			; (mov r8, r8)
   15998:	40001000 	.word	0x40001000
   1599c:	20000ddc 	.word	0x20000ddc

000159a0 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   159a0:	b580      	push	{r7, lr}
   159a2:	b082      	sub	sp, #8
   159a4:	af00      	add	r7, sp, #0
   159a6:	0002      	movs	r2, r0
   159a8:	1dfb      	adds	r3, r7, #7
   159aa:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   159ac:	1dfb      	adds	r3, r7, #7
   159ae:	781b      	ldrb	r3, [r3, #0]
   159b0:	2b08      	cmp	r3, #8
   159b2:	d844      	bhi.n	15a3e <system_clock_source_enable+0x9e>
   159b4:	009a      	lsls	r2, r3, #2
   159b6:	4b25      	ldr	r3, [pc, #148]	; (15a4c <system_clock_source_enable+0xac>)
   159b8:	18d3      	adds	r3, r2, r3
   159ba:	681b      	ldr	r3, [r3, #0]
   159bc:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
   159be:	4a24      	ldr	r2, [pc, #144]	; (15a50 <system_clock_source_enable+0xb0>)
   159c0:	4b23      	ldr	r3, [pc, #140]	; (15a50 <system_clock_source_enable+0xb0>)
   159c2:	7d1b      	ldrb	r3, [r3, #20]
   159c4:	b2db      	uxtb	r3, r3
   159c6:	2102      	movs	r1, #2
   159c8:	430b      	orrs	r3, r1
   159ca:	b2db      	uxtb	r3, r3
   159cc:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
   159ce:	2300      	movs	r3, #0
   159d0:	e038      	b.n	15a44 <system_clock_source_enable+0xa4>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
   159d2:	4b20      	ldr	r3, [pc, #128]	; (15a54 <system_clock_source_enable+0xb4>)
   159d4:	4a1f      	ldr	r2, [pc, #124]	; (15a54 <system_clock_source_enable+0xb4>)
   159d6:	6992      	ldr	r2, [r2, #24]
   159d8:	2102      	movs	r1, #2
   159da:	430a      	orrs	r2, r1
   159dc:	619a      	str	r2, [r3, #24]
		break;
   159de:	e030      	b.n	15a42 <system_clock_source_enable+0xa2>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
   159e0:	4a1b      	ldr	r2, [pc, #108]	; (15a50 <system_clock_source_enable+0xb0>)
   159e2:	4b1b      	ldr	r3, [pc, #108]	; (15a50 <system_clock_source_enable+0xb0>)
   159e4:	8a1b      	ldrh	r3, [r3, #16]
   159e6:	b29b      	uxth	r3, r3
   159e8:	2102      	movs	r1, #2
   159ea:	430b      	orrs	r3, r1
   159ec:	b29b      	uxth	r3, r3
   159ee:	8213      	strh	r3, [r2, #16]
		break;
   159f0:	e027      	b.n	15a42 <system_clock_source_enable+0xa2>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
   159f2:	4b18      	ldr	r3, [pc, #96]	; (15a54 <system_clock_source_enable+0xb4>)
   159f4:	4a17      	ldr	r2, [pc, #92]	; (15a54 <system_clock_source_enable+0xb4>)
   159f6:	6952      	ldr	r2, [r2, #20]
   159f8:	2102      	movs	r1, #2
   159fa:	430a      	orrs	r2, r1
   159fc:	615a      	str	r2, [r3, #20]
		break;
   159fe:	e020      	b.n	15a42 <system_clock_source_enable+0xa2>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
   15a00:	4b15      	ldr	r3, [pc, #84]	; (15a58 <system_clock_source_enable+0xb8>)
   15a02:	681b      	ldr	r3, [r3, #0]
   15a04:	2202      	movs	r2, #2
   15a06:	431a      	orrs	r2, r3
   15a08:	4b13      	ldr	r3, [pc, #76]	; (15a58 <system_clock_source_enable+0xb8>)
   15a0a:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   15a0c:	4b13      	ldr	r3, [pc, #76]	; (15a5c <system_clock_source_enable+0xbc>)
   15a0e:	4798      	blx	r3
		break;
   15a10:	e017      	b.n	15a42 <system_clock_source_enable+0xa2>

	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
   15a12:	4a0f      	ldr	r2, [pc, #60]	; (15a50 <system_clock_source_enable+0xb0>)
   15a14:	490e      	ldr	r1, [pc, #56]	; (15a50 <system_clock_source_enable+0xb0>)
   15a16:	2328      	movs	r3, #40	; 0x28
   15a18:	5ccb      	ldrb	r3, [r1, r3]
   15a1a:	b2db      	uxtb	r3, r3
   15a1c:	2102      	movs	r1, #2
   15a1e:	430b      	orrs	r3, r1
   15a20:	b2d9      	uxtb	r1, r3
   15a22:	2328      	movs	r3, #40	; 0x28
   15a24:	54d1      	strb	r1, [r2, r3]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
   15a26:	46c0      	nop			; (mov r8, r8)
   15a28:	4a09      	ldr	r2, [pc, #36]	; (15a50 <system_clock_source_enable+0xb0>)
   15a2a:	2338      	movs	r3, #56	; 0x38
   15a2c:	5cd3      	ldrb	r3, [r2, r3]
   15a2e:	b2db      	uxtb	r3, r3
   15a30:	001a      	movs	r2, r3
   15a32:	2302      	movs	r3, #2
   15a34:	4013      	ands	r3, r2
   15a36:	d1f7      	bne.n	15a28 <system_clock_source_enable+0x88>
		}
		break;
   15a38:	e003      	b.n	15a42 <system_clock_source_enable+0xa2>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   15a3a:	2300      	movs	r3, #0
   15a3c:	e002      	b.n	15a44 <system_clock_source_enable+0xa4>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   15a3e:	2317      	movs	r3, #23
   15a40:	e000      	b.n	15a44 <system_clock_source_enable+0xa4>
	}

	return STATUS_OK;
   15a42:	2300      	movs	r3, #0
}
   15a44:	0018      	movs	r0, r3
   15a46:	46bd      	mov	sp, r7
   15a48:	b002      	add	sp, #8
   15a4a:	bd80      	pop	{r7, pc}
   15a4c:	00025d74 	.word	0x00025d74
   15a50:	40000c00 	.word	0x40000c00
   15a54:	40001000 	.word	0x40001000
   15a58:	20000ddc 	.word	0x20000ddc
   15a5c:	00015795 	.word	0x00015795

00015a60 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   15a60:	b580      	push	{r7, lr}
   15a62:	b084      	sub	sp, #16
   15a64:	af00      	add	r7, sp, #0
   15a66:	0002      	movs	r2, r0
   15a68:	1dfb      	adds	r3, r7, #7
   15a6a:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   15a6c:	2300      	movs	r3, #0
   15a6e:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   15a70:	1dfb      	adds	r3, r7, #7
   15a72:	781b      	ldrb	r3, [r3, #0]
   15a74:	2b08      	cmp	r3, #8
   15a76:	d84f      	bhi.n	15b18 <system_clock_source_is_ready+0xb8>
   15a78:	009a      	lsls	r2, r3, #2
   15a7a:	4b2a      	ldr	r3, [pc, #168]	; (15b24 <system_clock_source_is_ready+0xc4>)
   15a7c:	18d3      	adds	r3, r2, r3
   15a7e:	681b      	ldr	r3, [r3, #0]
   15a80:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		mask = OSCCTRL_STATUS_OSC16MRDY;
   15a82:	2310      	movs	r3, #16
   15a84:	60fb      	str	r3, [r7, #12]
		return ((OSCCTRL->STATUS.reg & mask) == mask);
   15a86:	4b28      	ldr	r3, [pc, #160]	; (15b28 <system_clock_source_is_ready+0xc8>)
   15a88:	68db      	ldr	r3, [r3, #12]
   15a8a:	68fa      	ldr	r2, [r7, #12]
   15a8c:	401a      	ands	r2, r3
   15a8e:	68fb      	ldr	r3, [r7, #12]
   15a90:	1ad3      	subs	r3, r2, r3
   15a92:	425a      	negs	r2, r3
   15a94:	4153      	adcs	r3, r2
   15a96:	b2db      	uxtb	r3, r3
   15a98:	e03f      	b.n	15b1a <system_clock_source_is_ready+0xba>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = OSC32KCTRL_STATUS_OSC32KRDY;
   15a9a:	2302      	movs	r3, #2
   15a9c:	60fb      	str	r3, [r7, #12]
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
   15a9e:	4b23      	ldr	r3, [pc, #140]	; (15b2c <system_clock_source_is_ready+0xcc>)
   15aa0:	68db      	ldr	r3, [r3, #12]
   15aa2:	68fa      	ldr	r2, [r7, #12]
   15aa4:	401a      	ands	r2, r3
   15aa6:	68fb      	ldr	r3, [r7, #12]
   15aa8:	1ad3      	subs	r3, r2, r3
   15aaa:	425a      	negs	r2, r3
   15aac:	4153      	adcs	r3, r2
   15aae:	b2db      	uxtb	r3, r3
   15ab0:	e033      	b.n	15b1a <system_clock_source_is_ready+0xba>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = OSCCTRL_STATUS_XOSCRDY;
   15ab2:	2301      	movs	r3, #1
   15ab4:	60fb      	str	r3, [r7, #12]
		return ((OSCCTRL->STATUS.reg & mask) == mask);
   15ab6:	4b1c      	ldr	r3, [pc, #112]	; (15b28 <system_clock_source_is_ready+0xc8>)
   15ab8:	68db      	ldr	r3, [r3, #12]
   15aba:	68fa      	ldr	r2, [r7, #12]
   15abc:	401a      	ands	r2, r3
   15abe:	68fb      	ldr	r3, [r7, #12]
   15ac0:	1ad3      	subs	r3, r2, r3
   15ac2:	425a      	negs	r2, r3
   15ac4:	4153      	adcs	r3, r2
   15ac6:	b2db      	uxtb	r3, r3
   15ac8:	e027      	b.n	15b1a <system_clock_source_is_ready+0xba>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = OSC32KCTRL_STATUS_XOSC32KRDY;
   15aca:	2301      	movs	r3, #1
   15acc:	60fb      	str	r3, [r7, #12]
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
   15ace:	4b17      	ldr	r3, [pc, #92]	; (15b2c <system_clock_source_is_ready+0xcc>)
   15ad0:	68db      	ldr	r3, [r3, #12]
   15ad2:	68fa      	ldr	r2, [r7, #12]
   15ad4:	401a      	ands	r2, r3
   15ad6:	68fb      	ldr	r3, [r7, #12]
   15ad8:	1ad3      	subs	r3, r2, r3
   15ada:	425a      	negs	r2, r3
   15adc:	4153      	adcs	r3, r2
   15ade:	b2db      	uxtb	r3, r3
   15ae0:	e01b      	b.n	15b1a <system_clock_source_is_ready+0xba>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (OSCCTRL_STATUS_DFLLRDY |
			        OSCCTRL_STATUS_DFLLLCKF | OSCCTRL_STATUS_DFLLLCKC);
		} else {
			mask = OSCCTRL_STATUS_DFLLRDY;
   15ae2:	2380      	movs	r3, #128	; 0x80
   15ae4:	005b      	lsls	r3, r3, #1
   15ae6:	60fb      	str	r3, [r7, #12]
		}
		return ((OSCCTRL->STATUS.reg & mask) == mask);
   15ae8:	4b0f      	ldr	r3, [pc, #60]	; (15b28 <system_clock_source_is_ready+0xc8>)
   15aea:	68db      	ldr	r3, [r3, #12]
   15aec:	68fa      	ldr	r2, [r7, #12]
   15aee:	401a      	ands	r2, r3
   15af0:	68fb      	ldr	r3, [r7, #12]
   15af2:	1ad3      	subs	r3, r2, r3
   15af4:	425a      	negs	r2, r3
   15af6:	4153      	adcs	r3, r2
   15af8:	b2db      	uxtb	r3, r3
   15afa:	e00e      	b.n	15b1a <system_clock_source_is_ready+0xba>

	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((OSCCTRL->DPLLSTATUS.reg &
   15afc:	4a0a      	ldr	r2, [pc, #40]	; (15b28 <system_clock_source_is_ready+0xc8>)
   15afe:	233c      	movs	r3, #60	; 0x3c
   15b00:	5cd3      	ldrb	r3, [r2, r3]
   15b02:	b2db      	uxtb	r3, r3
   15b04:	001a      	movs	r2, r3
   15b06:	2303      	movs	r3, #3
   15b08:	4013      	ands	r3, r2
				(OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)) ==
   15b0a:	3b03      	subs	r3, #3
   15b0c:	425a      	negs	r2, r3
   15b0e:	4153      	adcs	r3, r2
   15b10:	b2db      	uxtb	r3, r3
   15b12:	e002      	b.n	15b1a <system_clock_source_is_ready+0xba>
				(OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK));
	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   15b14:	2301      	movs	r3, #1
   15b16:	e000      	b.n	15b1a <system_clock_source_is_ready+0xba>

	default:
		return false;
   15b18:	2300      	movs	r3, #0
	}
}
   15b1a:	0018      	movs	r0, r3
   15b1c:	46bd      	mov	sp, r7
   15b1e:	b004      	add	sp, #16
   15b20:	bd80      	pop	{r7, pc}
   15b22:	46c0      	nop			; (mov r8, r8)
   15b24:	00025d98 	.word	0x00025d98
   15b28:	40000c00 	.word	0x40000c00
   15b2c:	40001000 	.word	0x40001000

00015b30 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   15b30:	b580      	push	{r7, lr}
   15b32:	b0a0      	sub	sp, #128	; 0x80
   15b34:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
   15b36:	4b35      	ldr	r3, [pc, #212]	; (15c0c <system_clock_init+0xdc>)
   15b38:	2280      	movs	r2, #128	; 0x80
   15b3a:	0052      	lsls	r2, r2, #1
   15b3c:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
   15b3e:	4b34      	ldr	r3, [pc, #208]	; (15c10 <system_clock_init+0xe0>)
   15b40:	2203      	movs	r2, #3
   15b42:	609a      	str	r2, [r3, #8]

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   15b44:	2000      	movs	r0, #0
   15b46:	4b33      	ldr	r3, [pc, #204]	; (15c14 <system_clock_init+0xe4>)
   15b48:	4798      	blx	r3

	/*  Switch to PL2 to be sure configuration of GCLK0 is safe */
	system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_2);
   15b4a:	2002      	movs	r0, #2
   15b4c:	4b32      	ldr	r3, [pc, #200]	; (15c18 <system_clock_init+0xe8>)
   15b4e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC16M */
	if (CONF_CLOCK_OSC16M_FREQ_SEL == SYSTEM_OSC16M_4M){
		OSCCTRL->OSC16MCTRL.bit.ONDEMAND = CONF_CLOCK_OSC16M_ON_DEMAND ;
   15b50:	4a2e      	ldr	r2, [pc, #184]	; (15c0c <system_clock_init+0xdc>)
   15b52:	7d13      	ldrb	r3, [r2, #20]
   15b54:	2180      	movs	r1, #128	; 0x80
   15b56:	4249      	negs	r1, r1
   15b58:	430b      	orrs	r3, r1
   15b5a:	7513      	strb	r3, [r2, #20]
		OSCCTRL->OSC16MCTRL.bit.RUNSTDBY = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
   15b5c:	4a2b      	ldr	r2, [pc, #172]	; (15c0c <system_clock_init+0xdc>)
   15b5e:	7d13      	ldrb	r3, [r2, #20]
   15b60:	2140      	movs	r1, #64	; 0x40
   15b62:	438b      	bics	r3, r1
   15b64:	7513      	strb	r3, [r2, #20]
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   15b66:	4b2d      	ldr	r3, [pc, #180]	; (15c1c <system_clock_init+0xec>)
   15b68:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   15b6a:	2358      	movs	r3, #88	; 0x58
   15b6c:	18fb      	adds	r3, r7, r3
   15b6e:	0018      	movs	r0, r3
   15b70:	4b2b      	ldr	r3, [pc, #172]	; (15c20 <system_clock_init+0xf0>)
   15b72:	4798      	blx	r3
   15b74:	2358      	movs	r3, #88	; 0x58
   15b76:	18fb      	adds	r3, r7, r3
   15b78:	2203      	movs	r2, #3
   15b7a:	701a      	strb	r2, [r3, #0]
   15b7c:	2358      	movs	r3, #88	; 0x58
   15b7e:	18fb      	adds	r3, r7, r3
   15b80:	2201      	movs	r2, #1
   15b82:	605a      	str	r2, [r3, #4]
   15b84:	2358      	movs	r3, #88	; 0x58
   15b86:	18fb      	adds	r3, r7, r3
   15b88:	2201      	movs	r2, #1
   15b8a:	721a      	strb	r2, [r3, #8]
   15b8c:	2358      	movs	r3, #88	; 0x58
   15b8e:	18fb      	adds	r3, r7, r3
   15b90:	2200      	movs	r2, #0
   15b92:	725a      	strb	r2, [r3, #9]
   15b94:	2358      	movs	r3, #88	; 0x58
   15b96:	18fb      	adds	r3, r7, r3
   15b98:	0019      	movs	r1, r3
   15b9a:	2002      	movs	r0, #2
   15b9c:	4b21      	ldr	r3, [pc, #132]	; (15c24 <system_clock_init+0xf4>)
   15b9e:	4798      	blx	r3
   15ba0:	2002      	movs	r0, #2
   15ba2:	4b21      	ldr	r3, [pc, #132]	; (15c28 <system_clock_init+0xf8>)
   15ba4:	4798      	blx	r3
	}

#  endif

	/* CPU and BUS clocks */
	system_backup_clock_set_divider(CONF_CLOCK_BACKUP_DIVIDER);
   15ba6:	2000      	movs	r0, #0
   15ba8:	4b20      	ldr	r3, [pc, #128]	; (15c2c <system_clock_init+0xfc>)
   15baa:	4798      	blx	r3
	system_low_power_clock_set_divider(CONF_CLOCK_LOW_POWER_DIVIDER);
   15bac:	2000      	movs	r0, #0
   15bae:	4b20      	ldr	r3, [pc, #128]	; (15c30 <system_clock_init+0x100>)
   15bb0:	4798      	blx	r3
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   15bb2:	2000      	movs	r0, #0
   15bb4:	4b1f      	ldr	r3, [pc, #124]	; (15c34 <system_clock_init+0x104>)
   15bb6:	4798      	blx	r3
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);
   15bb8:	2000      	movs	r0, #0
   15bba:	4b1f      	ldr	r3, [pc, #124]	; (15c38 <system_clock_init+0x108>)
   15bbc:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   15bbe:	1d3b      	adds	r3, r7, #4
   15bc0:	0018      	movs	r0, r3
   15bc2:	4b17      	ldr	r3, [pc, #92]	; (15c20 <system_clock_init+0xf0>)
   15bc4:	4798      	blx	r3
   15bc6:	1d3b      	adds	r3, r7, #4
   15bc8:	2206      	movs	r2, #6
   15bca:	701a      	strb	r2, [r3, #0]
   15bcc:	1d3b      	adds	r3, r7, #4
   15bce:	2201      	movs	r2, #1
   15bd0:	605a      	str	r2, [r3, #4]
   15bd2:	1d3b      	adds	r3, r7, #4
   15bd4:	2200      	movs	r2, #0
   15bd6:	721a      	strb	r2, [r3, #8]
   15bd8:	1d3b      	adds	r3, r7, #4
   15bda:	2200      	movs	r2, #0
   15bdc:	725a      	strb	r2, [r3, #9]
   15bde:	1d3b      	adds	r3, r7, #4
   15be0:	0019      	movs	r1, r3
   15be2:	2000      	movs	r0, #0
   15be4:	4b0f      	ldr	r3, [pc, #60]	; (15c24 <system_clock_init+0xf4>)
   15be6:	4798      	blx	r3
   15be8:	2000      	movs	r0, #0
   15bea:	4b0f      	ldr	r3, [pc, #60]	; (15c28 <system_clock_init+0xf8>)
   15bec:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
   15bee:	4b13      	ldr	r3, [pc, #76]	; (15c3c <system_clock_init+0x10c>)
   15bf0:	4798      	blx	r3
   15bf2:	0003      	movs	r3, r0
   15bf4:	67fb      	str	r3, [r7, #124]	; 0x7c
	if (cpu_freq <= 12000000) {
   15bf6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   15bf8:	4a11      	ldr	r2, [pc, #68]	; (15c40 <system_clock_init+0x110>)
   15bfa:	4293      	cmp	r3, r2
   15bfc:	d802      	bhi.n	15c04 <system_clock_init+0xd4>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
   15bfe:	2000      	movs	r0, #0
   15c00:	4b05      	ldr	r3, [pc, #20]	; (15c18 <system_clock_init+0xe8>)
   15c02:	4798      	blx	r3
	}
}
   15c04:	46c0      	nop			; (mov r8, r8)
   15c06:	46bd      	mov	sp, r7
   15c08:	b020      	add	sp, #128	; 0x80
   15c0a:	bd80      	pop	{r7, pc}
   15c0c:	40000c00 	.word	0x40000c00
   15c10:	40001400 	.word	0x40001400
   15c14:	000156e9 	.word	0x000156e9
   15c18:	0001571d 	.word	0x0001571d
   15c1c:	00015d25 	.word	0x00015d25
   15c20:	000155fd 	.word	0x000155fd
   15c24:	00015d55 	.word	0x00015d55
   15c28:	00015e65 	.word	0x00015e65
   15c2c:	00015691 	.word	0x00015691
   15c30:	00015669 	.word	0x00015669
   15c34:	00015641 	.word	0x00015641
   15c38:	0001562b 	.word	0x0001562b
   15c3c:	000156b9 	.word	0x000156b9
   15c40:	00b71b00 	.word	0x00b71b00

00015c44 <system_apb_clock_set_mask>:
{
   15c44:	b580      	push	{r7, lr}
   15c46:	b082      	sub	sp, #8
   15c48:	af00      	add	r7, sp, #0
   15c4a:	0002      	movs	r2, r0
   15c4c:	6039      	str	r1, [r7, #0]
   15c4e:	1dfb      	adds	r3, r7, #7
   15c50:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   15c52:	1dfb      	adds	r3, r7, #7
   15c54:	781b      	ldrb	r3, [r3, #0]
   15c56:	2b04      	cmp	r3, #4
   15c58:	d827      	bhi.n	15caa <system_apb_clock_set_mask+0x66>
   15c5a:	009a      	lsls	r2, r3, #2
   15c5c:	4b16      	ldr	r3, [pc, #88]	; (15cb8 <system_apb_clock_set_mask+0x74>)
   15c5e:	18d3      	adds	r3, r2, r3
   15c60:	681b      	ldr	r3, [r3, #0]
   15c62:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
   15c64:	4b15      	ldr	r3, [pc, #84]	; (15cbc <system_apb_clock_set_mask+0x78>)
   15c66:	4a15      	ldr	r2, [pc, #84]	; (15cbc <system_apb_clock_set_mask+0x78>)
   15c68:	6951      	ldr	r1, [r2, #20]
   15c6a:	683a      	ldr	r2, [r7, #0]
   15c6c:	430a      	orrs	r2, r1
   15c6e:	615a      	str	r2, [r3, #20]
			break;
   15c70:	e01d      	b.n	15cae <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
   15c72:	4b12      	ldr	r3, [pc, #72]	; (15cbc <system_apb_clock_set_mask+0x78>)
   15c74:	4a11      	ldr	r2, [pc, #68]	; (15cbc <system_apb_clock_set_mask+0x78>)
   15c76:	6991      	ldr	r1, [r2, #24]
   15c78:	683a      	ldr	r2, [r7, #0]
   15c7a:	430a      	orrs	r2, r1
   15c7c:	619a      	str	r2, [r3, #24]
			break;
   15c7e:	e016      	b.n	15cae <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
   15c80:	4b0e      	ldr	r3, [pc, #56]	; (15cbc <system_apb_clock_set_mask+0x78>)
   15c82:	4a0e      	ldr	r2, [pc, #56]	; (15cbc <system_apb_clock_set_mask+0x78>)
   15c84:	69d1      	ldr	r1, [r2, #28]
   15c86:	683a      	ldr	r2, [r7, #0]
   15c88:	430a      	orrs	r2, r1
   15c8a:	61da      	str	r2, [r3, #28]
			break;
   15c8c:	e00f      	b.n	15cae <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
   15c8e:	4b0b      	ldr	r3, [pc, #44]	; (15cbc <system_apb_clock_set_mask+0x78>)
   15c90:	4a0a      	ldr	r2, [pc, #40]	; (15cbc <system_apb_clock_set_mask+0x78>)
   15c92:	6a11      	ldr	r1, [r2, #32]
   15c94:	683a      	ldr	r2, [r7, #0]
   15c96:	430a      	orrs	r2, r1
   15c98:	621a      	str	r2, [r3, #32]
			break;
   15c9a:	e008      	b.n	15cae <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
   15c9c:	4b07      	ldr	r3, [pc, #28]	; (15cbc <system_apb_clock_set_mask+0x78>)
   15c9e:	4a07      	ldr	r2, [pc, #28]	; (15cbc <system_apb_clock_set_mask+0x78>)
   15ca0:	6a51      	ldr	r1, [r2, #36]	; 0x24
   15ca2:	683a      	ldr	r2, [r7, #0]
   15ca4:	430a      	orrs	r2, r1
   15ca6:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   15ca8:	e001      	b.n	15cae <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
   15caa:	2317      	movs	r3, #23
   15cac:	e000      	b.n	15cb0 <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
   15cae:	2300      	movs	r3, #0
}
   15cb0:	0018      	movs	r0, r3
   15cb2:	46bd      	mov	sp, r7
   15cb4:	b002      	add	sp, #8
   15cb6:	bd80      	pop	{r7, pc}
   15cb8:	00025dbc 	.word	0x00025dbc
   15cbc:	40000400 	.word	0x40000400

00015cc0 <system_interrupt_enter_critical_section>:
{
   15cc0:	b580      	push	{r7, lr}
   15cc2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   15cc4:	4b02      	ldr	r3, [pc, #8]	; (15cd0 <system_interrupt_enter_critical_section+0x10>)
   15cc6:	4798      	blx	r3
}
   15cc8:	46c0      	nop			; (mov r8, r8)
   15cca:	46bd      	mov	sp, r7
   15ccc:	bd80      	pop	{r7, pc}
   15cce:	46c0      	nop			; (mov r8, r8)
   15cd0:	0000499d 	.word	0x0000499d

00015cd4 <system_interrupt_leave_critical_section>:
{
   15cd4:	b580      	push	{r7, lr}
   15cd6:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   15cd8:	4b02      	ldr	r3, [pc, #8]	; (15ce4 <system_interrupt_leave_critical_section+0x10>)
   15cda:	4798      	blx	r3
}
   15cdc:	46c0      	nop			; (mov r8, r8)
   15cde:	46bd      	mov	sp, r7
   15ce0:	bd80      	pop	{r7, pc}
   15ce2:	46c0      	nop			; (mov r8, r8)
   15ce4:	000049f1 	.word	0x000049f1

00015ce8 <system_gclk_is_syncing>:
  *
  * \retval false if the module has completed synchronization
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{
   15ce8:	b580      	push	{r7, lr}
   15cea:	b082      	sub	sp, #8
   15cec:	af00      	add	r7, sp, #0
   15cee:	0002      	movs	r2, r0
   15cf0:	1dfb      	adds	r3, r7, #7
   15cf2:	701a      	strb	r2, [r3, #0]

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
   15cf4:	4b09      	ldr	r3, [pc, #36]	; (15d1c <system_gclk_is_syncing+0x34>)
   15cf6:	685b      	ldr	r3, [r3, #4]
   15cf8:	1dfa      	adds	r2, r7, #7
   15cfa:	7812      	ldrb	r2, [r2, #0]
   15cfc:	2101      	movs	r1, #1
   15cfe:	4091      	lsls	r1, r2
   15d00:	000a      	movs	r2, r1
   15d02:	0092      	lsls	r2, r2, #2
   15d04:	4013      	ands	r3, r2
   15d06:	4a06      	ldr	r2, [pc, #24]	; (15d20 <system_gclk_is_syncing+0x38>)
   15d08:	4013      	ands	r3, r2
   15d0a:	d001      	beq.n	15d10 <system_gclk_is_syncing+0x28>
		 return true;
   15d0c:	2301      	movs	r3, #1
   15d0e:	e000      	b.n	15d12 <system_gclk_is_syncing+0x2a>
	}

	 return false;
   15d10:	2300      	movs	r3, #0
}
   15d12:	0018      	movs	r0, r3
   15d14:	46bd      	mov	sp, r7
   15d16:	b002      	add	sp, #8
   15d18:	bd80      	pop	{r7, pc}
   15d1a:	46c0      	nop			; (mov r8, r8)
   15d1c:	40001800 	.word	0x40001800
   15d20:	000007fc 	.word	0x000007fc

00015d24 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   15d24:	b580      	push	{r7, lr}
   15d26:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);
   15d28:	2140      	movs	r1, #64	; 0x40
   15d2a:	2000      	movs	r0, #0
   15d2c:	4b07      	ldr	r3, [pc, #28]	; (15d4c <system_gclk_init+0x28>)
   15d2e:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
   15d30:	4b07      	ldr	r3, [pc, #28]	; (15d50 <system_gclk_init+0x2c>)
   15d32:	2201      	movs	r2, #1
   15d34:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
   15d36:	46c0      	nop			; (mov r8, r8)
   15d38:	4b05      	ldr	r3, [pc, #20]	; (15d50 <system_gclk_init+0x2c>)
   15d3a:	781b      	ldrb	r3, [r3, #0]
   15d3c:	b2db      	uxtb	r3, r3
   15d3e:	001a      	movs	r2, r3
   15d40:	2301      	movs	r3, #1
   15d42:	4013      	ands	r3, r2
   15d44:	d1f8      	bne.n	15d38 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   15d46:	46c0      	nop			; (mov r8, r8)
   15d48:	46bd      	mov	sp, r7
   15d4a:	bd80      	pop	{r7, pc}
   15d4c:	00015c45 	.word	0x00015c45
   15d50:	40001800 	.word	0x40001800

00015d54 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   15d54:	b580      	push	{r7, lr}
   15d56:	b086      	sub	sp, #24
   15d58:	af00      	add	r7, sp, #0
   15d5a:	0002      	movs	r2, r0
   15d5c:	6039      	str	r1, [r7, #0]
   15d5e:	1dfb      	adds	r3, r7, #7
   15d60:	701a      	strb	r2, [r3, #0]
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
   15d62:	683b      	ldr	r3, [r7, #0]
   15d64:	781b      	ldrb	r3, [r3, #0]
   15d66:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   15d68:	683b      	ldr	r3, [r7, #0]
   15d6a:	785b      	ldrb	r3, [r3, #1]
   15d6c:	2b00      	cmp	r3, #0
   15d6e:	d004      	beq.n	15d7a <system_gclk_gen_set_config+0x26>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   15d70:	697b      	ldr	r3, [r7, #20]
   15d72:	2280      	movs	r2, #128	; 0x80
   15d74:	00d2      	lsls	r2, r2, #3
   15d76:	4313      	orrs	r3, r2
   15d78:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   15d7a:	683b      	ldr	r3, [r7, #0]
   15d7c:	7a5b      	ldrb	r3, [r3, #9]
   15d7e:	2b00      	cmp	r3, #0
   15d80:	d004      	beq.n	15d8c <system_gclk_gen_set_config+0x38>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   15d82:	697b      	ldr	r3, [r7, #20]
   15d84:	2280      	movs	r2, #128	; 0x80
   15d86:	0112      	lsls	r2, r2, #4
   15d88:	4313      	orrs	r3, r2
   15d8a:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   15d8c:	683b      	ldr	r3, [r7, #0]
   15d8e:	685b      	ldr	r3, [r3, #4]
   15d90:	2b01      	cmp	r3, #1
   15d92:	d92c      	bls.n	15dee <system_gclk_gen_set_config+0x9a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   15d94:	683b      	ldr	r3, [r7, #0]
   15d96:	685a      	ldr	r2, [r3, #4]
   15d98:	683b      	ldr	r3, [r7, #0]
   15d9a:	685b      	ldr	r3, [r3, #4]
   15d9c:	3b01      	subs	r3, #1
   15d9e:	4013      	ands	r3, r2
   15da0:	d11a      	bne.n	15dd8 <system_gclk_gen_set_config+0x84>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   15da2:	2300      	movs	r3, #0
   15da4:	613b      	str	r3, [r7, #16]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   15da6:	2302      	movs	r3, #2
   15da8:	60fb      	str	r3, [r7, #12]
   15daa:	e005      	b.n	15db8 <system_gclk_gen_set_config+0x64>
						mask <<= 1) {
				div2_count++;
   15dac:	693b      	ldr	r3, [r7, #16]
   15dae:	3301      	adds	r3, #1
   15db0:	613b      	str	r3, [r7, #16]
						mask <<= 1) {
   15db2:	68fb      	ldr	r3, [r7, #12]
   15db4:	005b      	lsls	r3, r3, #1
   15db6:	60fb      	str	r3, [r7, #12]
			for (mask = (1UL << 1); mask < config->division_factor;
   15db8:	683b      	ldr	r3, [r7, #0]
   15dba:	685a      	ldr	r2, [r3, #4]
   15dbc:	68fb      	ldr	r3, [r7, #12]
   15dbe:	429a      	cmp	r2, r3
   15dc0:	d8f4      	bhi.n	15dac <system_gclk_gen_set_config+0x58>
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
   15dc2:	693b      	ldr	r3, [r7, #16]
   15dc4:	041b      	lsls	r3, r3, #16
   15dc6:	697a      	ldr	r2, [r7, #20]
   15dc8:	4313      	orrs	r3, r2
   15dca:	617b      	str	r3, [r7, #20]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   15dcc:	697b      	ldr	r3, [r7, #20]
   15dce:	2280      	movs	r2, #128	; 0x80
   15dd0:	0152      	lsls	r2, r2, #5
   15dd2:	4313      	orrs	r3, r2
   15dd4:	617b      	str	r3, [r7, #20]
   15dd6:	e00a      	b.n	15dee <system_gclk_gen_set_config+0x9a>
		} else {
			/* Set integer division factor */

			new_genctrl_config  |=
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
   15dd8:	683b      	ldr	r3, [r7, #0]
   15dda:	685b      	ldr	r3, [r3, #4]
   15ddc:	041b      	lsls	r3, r3, #16
			new_genctrl_config  |=
   15dde:	697a      	ldr	r2, [r7, #20]
   15de0:	4313      	orrs	r3, r2
   15de2:	617b      	str	r3, [r7, #20]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   15de4:	697b      	ldr	r3, [r7, #20]
   15de6:	2280      	movs	r2, #128	; 0x80
   15de8:	0092      	lsls	r2, r2, #2
   15dea:	4313      	orrs	r3, r2
   15dec:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   15dee:	683b      	ldr	r3, [r7, #0]
   15df0:	7a1b      	ldrb	r3, [r3, #8]
   15df2:	2b00      	cmp	r3, #0
   15df4:	d004      	beq.n	15e00 <system_gclk_gen_set_config+0xac>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   15df6:	697b      	ldr	r3, [r7, #20]
   15df8:	2280      	movs	r2, #128	; 0x80
   15dfa:	0192      	lsls	r2, r2, #6
   15dfc:	4313      	orrs	r3, r2
   15dfe:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing(generator)) {
   15e00:	46c0      	nop			; (mov r8, r8)
   15e02:	1dfb      	adds	r3, r7, #7
   15e04:	781b      	ldrb	r3, [r3, #0]
   15e06:	0018      	movs	r0, r3
   15e08:	4b12      	ldr	r3, [pc, #72]	; (15e54 <system_gclk_gen_set_config+0x100>)
   15e0a:	4798      	blx	r3
   15e0c:	1e03      	subs	r3, r0, #0
   15e0e:	d1f8      	bne.n	15e02 <system_gclk_gen_set_config+0xae>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   15e10:	4b11      	ldr	r3, [pc, #68]	; (15e58 <system_gclk_gen_set_config+0x104>)
   15e12:	4798      	blx	r3

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
   15e14:	4811      	ldr	r0, [pc, #68]	; (15e5c <system_gclk_gen_set_config+0x108>)
   15e16:	1dfb      	adds	r3, r7, #7
   15e18:	781b      	ldrb	r3, [r3, #0]
   15e1a:	4910      	ldr	r1, [pc, #64]	; (15e5c <system_gclk_gen_set_config+0x108>)
   15e1c:	1dfa      	adds	r2, r7, #7
   15e1e:	7812      	ldrb	r2, [r2, #0]
   15e20:	3208      	adds	r2, #8
   15e22:	0092      	lsls	r2, r2, #2
   15e24:	5851      	ldr	r1, [r2, r1]
   15e26:	2280      	movs	r2, #128	; 0x80
   15e28:	0052      	lsls	r2, r2, #1
   15e2a:	4011      	ands	r1, r2
   15e2c:	697a      	ldr	r2, [r7, #20]
   15e2e:	430a      	orrs	r2, r1
   15e30:	3308      	adds	r3, #8
   15e32:	009b      	lsls	r3, r3, #2
   15e34:	501a      	str	r2, [r3, r0]

	while (system_gclk_is_syncing(generator)) {
   15e36:	46c0      	nop			; (mov r8, r8)
   15e38:	1dfb      	adds	r3, r7, #7
   15e3a:	781b      	ldrb	r3, [r3, #0]
   15e3c:	0018      	movs	r0, r3
   15e3e:	4b05      	ldr	r3, [pc, #20]	; (15e54 <system_gclk_gen_set_config+0x100>)
   15e40:	4798      	blx	r3
   15e42:	1e03      	subs	r3, r0, #0
   15e44:	d1f8      	bne.n	15e38 <system_gclk_gen_set_config+0xe4>
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
   15e46:	4b06      	ldr	r3, [pc, #24]	; (15e60 <system_gclk_gen_set_config+0x10c>)
   15e48:	4798      	blx	r3
}
   15e4a:	46c0      	nop			; (mov r8, r8)
   15e4c:	46bd      	mov	sp, r7
   15e4e:	b006      	add	sp, #24
   15e50:	bd80      	pop	{r7, pc}
   15e52:	46c0      	nop			; (mov r8, r8)
   15e54:	00015ce9 	.word	0x00015ce9
   15e58:	00015cc1 	.word	0x00015cc1
   15e5c:	40001800 	.word	0x40001800
   15e60:	00015cd5 	.word	0x00015cd5

00015e64 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   15e64:	b580      	push	{r7, lr}
   15e66:	b082      	sub	sp, #8
   15e68:	af00      	add	r7, sp, #0
   15e6a:	0002      	movs	r2, r0
   15e6c:	1dfb      	adds	r3, r7, #7
   15e6e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing(generator)) {
   15e70:	46c0      	nop			; (mov r8, r8)
   15e72:	1dfb      	adds	r3, r7, #7
   15e74:	781b      	ldrb	r3, [r3, #0]
   15e76:	0018      	movs	r0, r3
   15e78:	4b0d      	ldr	r3, [pc, #52]	; (15eb0 <system_gclk_gen_enable+0x4c>)
   15e7a:	4798      	blx	r3
   15e7c:	1e03      	subs	r3, r0, #0
   15e7e:	d1f8      	bne.n	15e72 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   15e80:	4b0c      	ldr	r3, [pc, #48]	; (15eb4 <system_gclk_gen_enable+0x50>)
   15e82:	4798      	blx	r3

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
   15e84:	480c      	ldr	r0, [pc, #48]	; (15eb8 <system_gclk_gen_enable+0x54>)
   15e86:	1dfb      	adds	r3, r7, #7
   15e88:	781b      	ldrb	r3, [r3, #0]
   15e8a:	490b      	ldr	r1, [pc, #44]	; (15eb8 <system_gclk_gen_enable+0x54>)
   15e8c:	1dfa      	adds	r2, r7, #7
   15e8e:	7812      	ldrb	r2, [r2, #0]
   15e90:	3208      	adds	r2, #8
   15e92:	0092      	lsls	r2, r2, #2
   15e94:	5852      	ldr	r2, [r2, r1]
   15e96:	2180      	movs	r1, #128	; 0x80
   15e98:	0049      	lsls	r1, r1, #1
   15e9a:	430a      	orrs	r2, r1
   15e9c:	3308      	adds	r3, #8
   15e9e:	009b      	lsls	r3, r3, #2
   15ea0:	501a      	str	r2, [r3, r0]

	system_interrupt_leave_critical_section();
   15ea2:	4b06      	ldr	r3, [pc, #24]	; (15ebc <system_gclk_gen_enable+0x58>)
   15ea4:	4798      	blx	r3
}
   15ea6:	46c0      	nop			; (mov r8, r8)
   15ea8:	46bd      	mov	sp, r7
   15eaa:	b002      	add	sp, #8
   15eac:	bd80      	pop	{r7, pc}
   15eae:	46c0      	nop			; (mov r8, r8)
   15eb0:	00015ce9 	.word	0x00015ce9
   15eb4:	00015cc1 	.word	0x00015cc1
   15eb8:	40001800 	.word	0x40001800
   15ebc:	00015cd5 	.word	0x00015cd5

00015ec0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   15ec0:	b580      	push	{r7, lr}
   15ec2:	b086      	sub	sp, #24
   15ec4:	af00      	add	r7, sp, #0
   15ec6:	0002      	movs	r2, r0
   15ec8:	1dfb      	adds	r3, r7, #7
   15eca:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing(generator)) {
   15ecc:	46c0      	nop			; (mov r8, r8)
   15ece:	1dfb      	adds	r3, r7, #7
   15ed0:	781b      	ldrb	r3, [r3, #0]
   15ed2:	0018      	movs	r0, r3
   15ed4:	4b24      	ldr	r3, [pc, #144]	; (15f68 <system_gclk_gen_get_hz+0xa8>)
   15ed6:	4798      	blx	r3
   15ed8:	1e03      	subs	r3, r0, #0
   15eda:	d1f8      	bne.n	15ece <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   15edc:	4b23      	ldr	r3, [pc, #140]	; (15f6c <system_gclk_gen_get_hz+0xac>)
   15ede:	4798      	blx	r3

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
   15ee0:	4a23      	ldr	r2, [pc, #140]	; (15f70 <system_gclk_gen_get_hz+0xb0>)
   15ee2:	1dfb      	adds	r3, r7, #7
   15ee4:	781b      	ldrb	r3, [r3, #0]
   15ee6:	3308      	adds	r3, #8
   15ee8:	009b      	lsls	r3, r3, #2
   15eea:	589b      	ldr	r3, [r3, r2]
   15eec:	071b      	lsls	r3, r3, #28
   15eee:	0f1b      	lsrs	r3, r3, #28
   15ef0:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   15ef2:	0018      	movs	r0, r3
   15ef4:	4b1f      	ldr	r3, [pc, #124]	; (15f74 <system_gclk_gen_get_hz+0xb4>)
   15ef6:	4798      	blx	r3
   15ef8:	0003      	movs	r3, r0
   15efa:	617b      	str	r3, [r7, #20]

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
   15efc:	4a1c      	ldr	r2, [pc, #112]	; (15f70 <system_gclk_gen_get_hz+0xb0>)
   15efe:	1dfb      	adds	r3, r7, #7
   15f00:	781b      	ldrb	r3, [r3, #0]
   15f02:	3308      	adds	r3, #8
   15f04:	009b      	lsls	r3, r3, #2
   15f06:	589b      	ldr	r3, [r3, r2]
   15f08:	04db      	lsls	r3, r3, #19
   15f0a:	0fdb      	lsrs	r3, r3, #31
   15f0c:	b2da      	uxtb	r2, r3
   15f0e:	2313      	movs	r3, #19
   15f10:	18fb      	adds	r3, r7, r3
   15f12:	701a      	strb	r2, [r3, #0]
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
   15f14:	4a16      	ldr	r2, [pc, #88]	; (15f70 <system_gclk_gen_get_hz+0xb0>)
   15f16:	1dfb      	adds	r3, r7, #7
   15f18:	781b      	ldrb	r3, [r3, #0]
   15f1a:	3308      	adds	r3, #8
   15f1c:	009b      	lsls	r3, r3, #2
   15f1e:	589b      	ldr	r3, [r3, r2]
   15f20:	0c1b      	lsrs	r3, r3, #16
   15f22:	b29b      	uxth	r3, r3
   15f24:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   15f26:	4b14      	ldr	r3, [pc, #80]	; (15f78 <system_gclk_gen_get_hz+0xb8>)
   15f28:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   15f2a:	2313      	movs	r3, #19
   15f2c:	18fb      	adds	r3, r7, r3
   15f2e:	781b      	ldrb	r3, [r3, #0]
   15f30:	2b00      	cmp	r3, #0
   15f32:	d109      	bne.n	15f48 <system_gclk_gen_get_hz+0x88>
   15f34:	68fb      	ldr	r3, [r7, #12]
   15f36:	2b01      	cmp	r3, #1
   15f38:	d906      	bls.n	15f48 <system_gclk_gen_get_hz+0x88>
		gen_input_hz /= divider;
   15f3a:	4b10      	ldr	r3, [pc, #64]	; (15f7c <system_gclk_gen_get_hz+0xbc>)
   15f3c:	68f9      	ldr	r1, [r7, #12]
   15f3e:	6978      	ldr	r0, [r7, #20]
   15f40:	4798      	blx	r3
   15f42:	0003      	movs	r3, r0
   15f44:	617b      	str	r3, [r7, #20]
   15f46:	e00a      	b.n	15f5e <system_gclk_gen_get_hz+0x9e>
	} else if (divsel) {
   15f48:	2313      	movs	r3, #19
   15f4a:	18fb      	adds	r3, r7, r3
   15f4c:	781b      	ldrb	r3, [r3, #0]
   15f4e:	2b00      	cmp	r3, #0
   15f50:	d005      	beq.n	15f5e <system_gclk_gen_get_hz+0x9e>
		gen_input_hz >>= (divider+1);
   15f52:	68fb      	ldr	r3, [r7, #12]
   15f54:	3301      	adds	r3, #1
   15f56:	697a      	ldr	r2, [r7, #20]
   15f58:	40da      	lsrs	r2, r3
   15f5a:	0013      	movs	r3, r2
   15f5c:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   15f5e:	697b      	ldr	r3, [r7, #20]
}
   15f60:	0018      	movs	r0, r3
   15f62:	46bd      	mov	sp, r7
   15f64:	b006      	add	sp, #24
   15f66:	bd80      	pop	{r7, pc}
   15f68:	00015ce9 	.word	0x00015ce9
   15f6c:	00015cc1 	.word	0x00015cc1
   15f70:	40001800 	.word	0x40001800
   15f74:	000157e5 	.word	0x000157e5
   15f78:	00015cd5 	.word	0x00015cd5
   15f7c:	0001df49 	.word	0x0001df49

00015f80 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   15f80:	b580      	push	{r7, lr}
   15f82:	b082      	sub	sp, #8
   15f84:	af00      	add	r7, sp, #0
   15f86:	0002      	movs	r2, r0
   15f88:	6039      	str	r1, [r7, #0]
   15f8a:	1dfb      	adds	r3, r7, #7
   15f8c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   15f8e:	1dfb      	adds	r3, r7, #7
   15f90:	781b      	ldrb	r3, [r3, #0]
   15f92:	0018      	movs	r0, r3
   15f94:	4b08      	ldr	r3, [pc, #32]	; (15fb8 <system_gclk_chan_set_config+0x38>)
   15f96:	4798      	blx	r3

	/* Configure the peripheral channel */
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
   15f98:	4908      	ldr	r1, [pc, #32]	; (15fbc <system_gclk_chan_set_config+0x3c>)
   15f9a:	1dfb      	adds	r3, r7, #7
   15f9c:	781b      	ldrb	r3, [r3, #0]
   15f9e:	683a      	ldr	r2, [r7, #0]
   15fa0:	7812      	ldrb	r2, [r2, #0]
   15fa2:	0010      	movs	r0, r2
   15fa4:	220f      	movs	r2, #15
   15fa6:	4002      	ands	r2, r0
   15fa8:	3320      	adds	r3, #32
   15faa:	009b      	lsls	r3, r3, #2
   15fac:	505a      	str	r2, [r3, r1]


}
   15fae:	46c0      	nop			; (mov r8, r8)
   15fb0:	46bd      	mov	sp, r7
   15fb2:	b002      	add	sp, #8
   15fb4:	bd80      	pop	{r7, pc}
   15fb6:	46c0      	nop			; (mov r8, r8)
   15fb8:	00016019 	.word	0x00016019
   15fbc:	40001800 	.word	0x40001800

00015fc0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   15fc0:	b580      	push	{r7, lr}
   15fc2:	b082      	sub	sp, #8
   15fc4:	af00      	add	r7, sp, #0
   15fc6:	0002      	movs	r2, r0
   15fc8:	1dfb      	adds	r3, r7, #7
   15fca:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   15fcc:	4b0f      	ldr	r3, [pc, #60]	; (1600c <system_gclk_chan_enable+0x4c>)
   15fce:	4798      	blx	r3

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
   15fd0:	490f      	ldr	r1, [pc, #60]	; (16010 <system_gclk_chan_enable+0x50>)
   15fd2:	1dfb      	adds	r3, r7, #7
   15fd4:	781b      	ldrb	r3, [r3, #0]
   15fd6:	480e      	ldr	r0, [pc, #56]	; (16010 <system_gclk_chan_enable+0x50>)
   15fd8:	1dfa      	adds	r2, r7, #7
   15fda:	7812      	ldrb	r2, [r2, #0]
   15fdc:	3220      	adds	r2, #32
   15fde:	0092      	lsls	r2, r2, #2
   15fe0:	5812      	ldr	r2, [r2, r0]
   15fe2:	2040      	movs	r0, #64	; 0x40
   15fe4:	4302      	orrs	r2, r0
   15fe6:	3320      	adds	r3, #32
   15fe8:	009b      	lsls	r3, r3, #2
   15fea:	505a      	str	r2, [r3, r1]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
   15fec:	46c0      	nop			; (mov r8, r8)
   15fee:	4a08      	ldr	r2, [pc, #32]	; (16010 <system_gclk_chan_enable+0x50>)
   15ff0:	1dfb      	adds	r3, r7, #7
   15ff2:	781b      	ldrb	r3, [r3, #0]
   15ff4:	3320      	adds	r3, #32
   15ff6:	009b      	lsls	r3, r3, #2
   15ff8:	589b      	ldr	r3, [r3, r2]
   15ffa:	2240      	movs	r2, #64	; 0x40
   15ffc:	4013      	ands	r3, r2
   15ffe:	d0f6      	beq.n	15fee <system_gclk_chan_enable+0x2e>
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
   16000:	4b04      	ldr	r3, [pc, #16]	; (16014 <system_gclk_chan_enable+0x54>)
   16002:	4798      	blx	r3
}
   16004:	46c0      	nop			; (mov r8, r8)
   16006:	46bd      	mov	sp, r7
   16008:	b002      	add	sp, #8
   1600a:	bd80      	pop	{r7, pc}
   1600c:	00015cc1 	.word	0x00015cc1
   16010:	40001800 	.word	0x40001800
   16014:	00015cd5 	.word	0x00015cd5

00016018 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   16018:	b580      	push	{r7, lr}
   1601a:	b082      	sub	sp, #8
   1601c:	af00      	add	r7, sp, #0
   1601e:	0002      	movs	r2, r0
   16020:	1dfb      	adds	r3, r7, #7
   16022:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   16024:	4b0f      	ldr	r3, [pc, #60]	; (16064 <system_gclk_chan_disable+0x4c>)
   16026:	4798      	blx	r3

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
   16028:	490f      	ldr	r1, [pc, #60]	; (16068 <system_gclk_chan_disable+0x50>)
   1602a:	1dfb      	adds	r3, r7, #7
   1602c:	781b      	ldrb	r3, [r3, #0]
   1602e:	480e      	ldr	r0, [pc, #56]	; (16068 <system_gclk_chan_disable+0x50>)
   16030:	1dfa      	adds	r2, r7, #7
   16032:	7812      	ldrb	r2, [r2, #0]
   16034:	3220      	adds	r2, #32
   16036:	0092      	lsls	r2, r2, #2
   16038:	5812      	ldr	r2, [r2, r0]
   1603a:	2040      	movs	r0, #64	; 0x40
   1603c:	4382      	bics	r2, r0
   1603e:	3320      	adds	r3, #32
   16040:	009b      	lsls	r3, r3, #2
   16042:	505a      	str	r2, [r3, r1]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
   16044:	46c0      	nop			; (mov r8, r8)
   16046:	4a08      	ldr	r2, [pc, #32]	; (16068 <system_gclk_chan_disable+0x50>)
   16048:	1dfb      	adds	r3, r7, #7
   1604a:	781b      	ldrb	r3, [r3, #0]
   1604c:	3320      	adds	r3, #32
   1604e:	009b      	lsls	r3, r3, #2
   16050:	589b      	ldr	r3, [r3, r2]
   16052:	2240      	movs	r2, #64	; 0x40
   16054:	4013      	ands	r3, r2
   16056:	d1f6      	bne.n	16046 <system_gclk_chan_disable+0x2e>
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
   16058:	4b04      	ldr	r3, [pc, #16]	; (1606c <system_gclk_chan_disable+0x54>)
   1605a:	4798      	blx	r3
}
   1605c:	46c0      	nop			; (mov r8, r8)
   1605e:	46bd      	mov	sp, r7
   16060:	b002      	add	sp, #8
   16062:	bd80      	pop	{r7, pc}
   16064:	00015cc1 	.word	0x00015cc1
   16068:	40001800 	.word	0x40001800
   1606c:	00015cd5 	.word	0x00015cd5

00016070 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   16070:	b580      	push	{r7, lr}
   16072:	b084      	sub	sp, #16
   16074:	af00      	add	r7, sp, #0
   16076:	0002      	movs	r2, r0
   16078:	1dfb      	adds	r3, r7, #7
   1607a:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   1607c:	4b0d      	ldr	r3, [pc, #52]	; (160b4 <system_gclk_chan_get_hz+0x44>)
   1607e:	4798      	blx	r3
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
   16080:	4a0d      	ldr	r2, [pc, #52]	; (160b8 <system_gclk_chan_get_hz+0x48>)
   16082:	1dfb      	adds	r3, r7, #7
   16084:	781b      	ldrb	r3, [r3, #0]
   16086:	3320      	adds	r3, #32
   16088:	009b      	lsls	r3, r3, #2
   1608a:	589b      	ldr	r3, [r3, r2]
   1608c:	071b      	lsls	r3, r3, #28
   1608e:	0f1b      	lsrs	r3, r3, #28
   16090:	b2da      	uxtb	r2, r3
   16092:	230f      	movs	r3, #15
   16094:	18fb      	adds	r3, r7, r3
   16096:	701a      	strb	r2, [r3, #0]
	system_interrupt_leave_critical_section();
   16098:	4b08      	ldr	r3, [pc, #32]	; (160bc <system_gclk_chan_get_hz+0x4c>)
   1609a:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   1609c:	230f      	movs	r3, #15
   1609e:	18fb      	adds	r3, r7, r3
   160a0:	781b      	ldrb	r3, [r3, #0]
   160a2:	0018      	movs	r0, r3
   160a4:	4b06      	ldr	r3, [pc, #24]	; (160c0 <system_gclk_chan_get_hz+0x50>)
   160a6:	4798      	blx	r3
   160a8:	0003      	movs	r3, r0
}
   160aa:	0018      	movs	r0, r3
   160ac:	46bd      	mov	sp, r7
   160ae:	b004      	add	sp, #16
   160b0:	bd80      	pop	{r7, pc}
   160b2:	46c0      	nop			; (mov r8, r8)
   160b4:	00015cc1 	.word	0x00015cc1
   160b8:	40001800 	.word	0x40001800
   160bc:	00015cd5 	.word	0x00015cd5
   160c0:	00015ec1 	.word	0x00015ec1

000160c4 <system_pinmux_get_group_from_gpio_pin>:
{
   160c4:	b580      	push	{r7, lr}
   160c6:	b084      	sub	sp, #16
   160c8:	af00      	add	r7, sp, #0
   160ca:	0002      	movs	r2, r0
   160cc:	1dfb      	adds	r3, r7, #7
   160ce:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   160d0:	230f      	movs	r3, #15
   160d2:	18fb      	adds	r3, r7, r3
   160d4:	1dfa      	adds	r2, r7, #7
   160d6:	7812      	ldrb	r2, [r2, #0]
   160d8:	09d2      	lsrs	r2, r2, #7
   160da:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   160dc:	230e      	movs	r3, #14
   160de:	18fb      	adds	r3, r7, r3
   160e0:	1dfa      	adds	r2, r7, #7
   160e2:	7812      	ldrb	r2, [r2, #0]
   160e4:	0952      	lsrs	r2, r2, #5
   160e6:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   160e8:	4b0d      	ldr	r3, [pc, #52]	; (16120 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   160ea:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   160ec:	230f      	movs	r3, #15
   160ee:	18fb      	adds	r3, r7, r3
   160f0:	781b      	ldrb	r3, [r3, #0]
   160f2:	2b00      	cmp	r3, #0
   160f4:	d10f      	bne.n	16116 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   160f6:	230f      	movs	r3, #15
   160f8:	18fb      	adds	r3, r7, r3
   160fa:	781b      	ldrb	r3, [r3, #0]
   160fc:	009b      	lsls	r3, r3, #2
   160fe:	2210      	movs	r2, #16
   16100:	4694      	mov	ip, r2
   16102:	44bc      	add	ip, r7
   16104:	4463      	add	r3, ip
   16106:	3b08      	subs	r3, #8
   16108:	681a      	ldr	r2, [r3, #0]
   1610a:	230e      	movs	r3, #14
   1610c:	18fb      	adds	r3, r7, r3
   1610e:	781b      	ldrb	r3, [r3, #0]
   16110:	01db      	lsls	r3, r3, #7
   16112:	18d3      	adds	r3, r2, r3
   16114:	e000      	b.n	16118 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   16116:	2300      	movs	r3, #0
}
   16118:	0018      	movs	r0, r3
   1611a:	46bd      	mov	sp, r7
   1611c:	b004      	add	sp, #16
   1611e:	bd80      	pop	{r7, pc}
   16120:	40002800 	.word	0x40002800

00016124 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   16124:	b580      	push	{r7, lr}
   16126:	b088      	sub	sp, #32
   16128:	af00      	add	r7, sp, #0
   1612a:	60f8      	str	r0, [r7, #12]
   1612c:	60b9      	str	r1, [r7, #8]
   1612e:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   16130:	2300      	movs	r3, #0
   16132:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   16134:	687b      	ldr	r3, [r7, #4]
   16136:	78db      	ldrb	r3, [r3, #3]
   16138:	2201      	movs	r2, #1
   1613a:	4053      	eors	r3, r2
   1613c:	b2db      	uxtb	r3, r3
   1613e:	2b00      	cmp	r3, #0
   16140:	d035      	beq.n	161ae <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   16142:	687b      	ldr	r3, [r7, #4]
   16144:	781b      	ldrb	r3, [r3, #0]
   16146:	2b80      	cmp	r3, #128	; 0x80
   16148:	d00b      	beq.n	16162 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   1614a:	69fb      	ldr	r3, [r7, #28]
   1614c:	2280      	movs	r2, #128	; 0x80
   1614e:	0252      	lsls	r2, r2, #9
   16150:	4313      	orrs	r3, r2
   16152:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   16154:	687b      	ldr	r3, [r7, #4]
   16156:	781b      	ldrb	r3, [r3, #0]
   16158:	061b      	lsls	r3, r3, #24
   1615a:	001a      	movs	r2, r3
   1615c:	69fb      	ldr	r3, [r7, #28]
   1615e:	4313      	orrs	r3, r2
   16160:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   16162:	687b      	ldr	r3, [r7, #4]
   16164:	785b      	ldrb	r3, [r3, #1]
   16166:	2b00      	cmp	r3, #0
   16168:	d003      	beq.n	16172 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   1616a:	687b      	ldr	r3, [r7, #4]
   1616c:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   1616e:	2b02      	cmp	r3, #2
   16170:	d110      	bne.n	16194 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   16172:	69fb      	ldr	r3, [r7, #28]
   16174:	2280      	movs	r2, #128	; 0x80
   16176:	0292      	lsls	r2, r2, #10
   16178:	4313      	orrs	r3, r2
   1617a:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   1617c:	687b      	ldr	r3, [r7, #4]
   1617e:	789b      	ldrb	r3, [r3, #2]
   16180:	2b00      	cmp	r3, #0
   16182:	d004      	beq.n	1618e <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   16184:	69fb      	ldr	r3, [r7, #28]
   16186:	2280      	movs	r2, #128	; 0x80
   16188:	02d2      	lsls	r2, r2, #11
   1618a:	4313      	orrs	r3, r2
   1618c:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   1618e:	68fb      	ldr	r3, [r7, #12]
   16190:	68ba      	ldr	r2, [r7, #8]
   16192:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   16194:	687b      	ldr	r3, [r7, #4]
   16196:	785b      	ldrb	r3, [r3, #1]
   16198:	2b01      	cmp	r3, #1
   1619a:	d003      	beq.n	161a4 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   1619c:	687b      	ldr	r3, [r7, #4]
   1619e:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   161a0:	2b02      	cmp	r3, #2
   161a2:	d107      	bne.n	161b4 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   161a4:	69fb      	ldr	r3, [r7, #28]
   161a6:	4a22      	ldr	r2, [pc, #136]	; (16230 <_system_pinmux_config+0x10c>)
   161a8:	4013      	ands	r3, r2
   161aa:	61fb      	str	r3, [r7, #28]
   161ac:	e002      	b.n	161b4 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   161ae:	68fb      	ldr	r3, [r7, #12]
   161b0:	68ba      	ldr	r2, [r7, #8]
   161b2:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   161b4:	68bb      	ldr	r3, [r7, #8]
   161b6:	041b      	lsls	r3, r3, #16
   161b8:	0c1b      	lsrs	r3, r3, #16
   161ba:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   161bc:	68bb      	ldr	r3, [r7, #8]
   161be:	0c1b      	lsrs	r3, r3, #16
   161c0:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   161c2:	69ba      	ldr	r2, [r7, #24]
   161c4:	69fb      	ldr	r3, [r7, #28]
   161c6:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   161c8:	22a0      	movs	r2, #160	; 0xa0
   161ca:	05d2      	lsls	r2, r2, #23
   161cc:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   161ce:	68fb      	ldr	r3, [r7, #12]
   161d0:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   161d2:	697a      	ldr	r2, [r7, #20]
   161d4:	69fb      	ldr	r3, [r7, #28]
   161d6:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   161d8:	22d0      	movs	r2, #208	; 0xd0
   161da:	0612      	lsls	r2, r2, #24
   161dc:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   161de:	68fb      	ldr	r3, [r7, #12]
   161e0:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   161e2:	687b      	ldr	r3, [r7, #4]
   161e4:	78db      	ldrb	r3, [r3, #3]
   161e6:	2201      	movs	r2, #1
   161e8:	4053      	eors	r3, r2
   161ea:	b2db      	uxtb	r3, r3
   161ec:	2b00      	cmp	r3, #0
   161ee:	d01a      	beq.n	16226 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   161f0:	69fa      	ldr	r2, [r7, #28]
   161f2:	2380      	movs	r3, #128	; 0x80
   161f4:	02db      	lsls	r3, r3, #11
   161f6:	4013      	ands	r3, r2
   161f8:	d00a      	beq.n	16210 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   161fa:	687b      	ldr	r3, [r7, #4]
   161fc:	789b      	ldrb	r3, [r3, #2]
   161fe:	2b01      	cmp	r3, #1
   16200:	d103      	bne.n	1620a <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   16202:	68fb      	ldr	r3, [r7, #12]
   16204:	68ba      	ldr	r2, [r7, #8]
   16206:	619a      	str	r2, [r3, #24]
   16208:	e002      	b.n	16210 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   1620a:	68fb      	ldr	r3, [r7, #12]
   1620c:	68ba      	ldr	r2, [r7, #8]
   1620e:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   16210:	687b      	ldr	r3, [r7, #4]
   16212:	785b      	ldrb	r3, [r3, #1]
   16214:	2b01      	cmp	r3, #1
   16216:	d003      	beq.n	16220 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   16218:	687b      	ldr	r3, [r7, #4]
   1621a:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   1621c:	2b02      	cmp	r3, #2
   1621e:	d102      	bne.n	16226 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   16220:	68fb      	ldr	r3, [r7, #12]
   16222:	68ba      	ldr	r2, [r7, #8]
   16224:	609a      	str	r2, [r3, #8]
		}
	}
}
   16226:	46c0      	nop			; (mov r8, r8)
   16228:	46bd      	mov	sp, r7
   1622a:	b008      	add	sp, #32
   1622c:	bd80      	pop	{r7, pc}
   1622e:	46c0      	nop			; (mov r8, r8)
   16230:	fffbffff 	.word	0xfffbffff

00016234 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   16234:	b580      	push	{r7, lr}
   16236:	b084      	sub	sp, #16
   16238:	af00      	add	r7, sp, #0
   1623a:	0002      	movs	r2, r0
   1623c:	6039      	str	r1, [r7, #0]
   1623e:	1dfb      	adds	r3, r7, #7
   16240:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   16242:	1dfb      	adds	r3, r7, #7
   16244:	781b      	ldrb	r3, [r3, #0]
   16246:	0018      	movs	r0, r3
   16248:	4b0a      	ldr	r3, [pc, #40]	; (16274 <system_pinmux_pin_set_config+0x40>)
   1624a:	4798      	blx	r3
   1624c:	0003      	movs	r3, r0
   1624e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   16250:	1dfb      	adds	r3, r7, #7
   16252:	781b      	ldrb	r3, [r3, #0]
   16254:	221f      	movs	r2, #31
   16256:	4013      	ands	r3, r2
   16258:	2201      	movs	r2, #1
   1625a:	409a      	lsls	r2, r3
   1625c:	0013      	movs	r3, r2
   1625e:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   16260:	683a      	ldr	r2, [r7, #0]
   16262:	68b9      	ldr	r1, [r7, #8]
   16264:	68fb      	ldr	r3, [r7, #12]
   16266:	0018      	movs	r0, r3
   16268:	4b03      	ldr	r3, [pc, #12]	; (16278 <system_pinmux_pin_set_config+0x44>)
   1626a:	4798      	blx	r3
}
   1626c:	46c0      	nop			; (mov r8, r8)
   1626e:	46bd      	mov	sp, r7
   16270:	b004      	add	sp, #16
   16272:	bd80      	pop	{r7, pc}
   16274:	000160c5 	.word	0x000160c5
   16278:	00016125 	.word	0x00016125

0001627c <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   1627c:	b580      	push	{r7, lr}
   1627e:	af00      	add	r7, sp, #0
	return;
   16280:	46c0      	nop			; (mov r8, r8)
}
   16282:	46bd      	mov	sp, r7
   16284:	bd80      	pop	{r7, pc}
	...

00016288 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   16288:	b580      	push	{r7, lr}
   1628a:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   1628c:	4b06      	ldr	r3, [pc, #24]	; (162a8 <system_init+0x20>)
   1628e:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   16290:	4b06      	ldr	r3, [pc, #24]	; (162ac <system_init+0x24>)
   16292:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   16294:	4b06      	ldr	r3, [pc, #24]	; (162b0 <system_init+0x28>)
   16296:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   16298:	4b06      	ldr	r3, [pc, #24]	; (162b4 <system_init+0x2c>)
   1629a:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   1629c:	4b06      	ldr	r3, [pc, #24]	; (162b8 <system_init+0x30>)
   1629e:	4798      	blx	r3
}
   162a0:	46c0      	nop			; (mov r8, r8)
   162a2:	46bd      	mov	sp, r7
   162a4:	bd80      	pop	{r7, pc}
   162a6:	46c0      	nop			; (mov r8, r8)
   162a8:	00015b31 	.word	0x00015b31
   162ac:	00004559 	.word	0x00004559
   162b0:	0001627d 	.word	0x0001627d
   162b4:	00004da5 	.word	0x00004da5
   162b8:	0001627d 	.word	0x0001627d

000162bc <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
   162bc:	b580      	push	{r7, lr}
   162be:	b082      	sub	sp, #8
   162c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   162c2:	f3ef 8310 	mrs	r3, PRIMASK
   162c6:	607b      	str	r3, [r7, #4]
  return(result);
   162c8:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
   162ca:	425a      	negs	r2, r3
   162cc:	4153      	adcs	r3, r2
   162ce:	b2db      	uxtb	r3, r3
   162d0:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
   162d2:	b672      	cpsid	i
   162d4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   162d8:	4b03      	ldr	r3, [pc, #12]	; (162e8 <cpu_irq_save+0x2c>)
   162da:	2200      	movs	r2, #0
   162dc:	701a      	strb	r2, [r3, #0]
	return flags;
   162de:	683b      	ldr	r3, [r7, #0]
}
   162e0:	0018      	movs	r0, r3
   162e2:	46bd      	mov	sp, r7
   162e4:	b002      	add	sp, #8
   162e6:	bd80      	pop	{r7, pc}
   162e8:	200000d5 	.word	0x200000d5

000162ec <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
   162ec:	b580      	push	{r7, lr}
   162ee:	b082      	sub	sp, #8
   162f0:	af00      	add	r7, sp, #0
   162f2:	6078      	str	r0, [r7, #4]
	return (flags);
   162f4:	687b      	ldr	r3, [r7, #4]
   162f6:	1e5a      	subs	r2, r3, #1
   162f8:	4193      	sbcs	r3, r2
   162fa:	b2db      	uxtb	r3, r3
}
   162fc:	0018      	movs	r0, r3
   162fe:	46bd      	mov	sp, r7
   16300:	b002      	add	sp, #8
   16302:	bd80      	pop	{r7, pc}

00016304 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
   16304:	b580      	push	{r7, lr}
   16306:	b082      	sub	sp, #8
   16308:	af00      	add	r7, sp, #0
   1630a:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
   1630c:	687b      	ldr	r3, [r7, #4]
   1630e:	0018      	movs	r0, r3
   16310:	4b06      	ldr	r3, [pc, #24]	; (1632c <cpu_irq_restore+0x28>)
   16312:	4798      	blx	r3
   16314:	1e03      	subs	r3, r0, #0
   16316:	d005      	beq.n	16324 <cpu_irq_restore+0x20>
		cpu_irq_enable();
   16318:	4b05      	ldr	r3, [pc, #20]	; (16330 <cpu_irq_restore+0x2c>)
   1631a:	2201      	movs	r2, #1
   1631c:	701a      	strb	r2, [r3, #0]
   1631e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   16322:	b662      	cpsie	i
}
   16324:	46c0      	nop			; (mov r8, r8)
   16326:	46bd      	mov	sp, r7
   16328:	b002      	add	sp, #8
   1632a:	bd80      	pop	{r7, pc}
   1632c:	000162ed 	.word	0x000162ed
   16330:	200000d5 	.word	0x200000d5

00016334 <system_gclk_gen_get_config_defaults>:
{
   16334:	b580      	push	{r7, lr}
   16336:	b082      	sub	sp, #8
   16338:	af00      	add	r7, sp, #0
   1633a:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   1633c:	687b      	ldr	r3, [r7, #4]
   1633e:	2201      	movs	r2, #1
   16340:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   16342:	687b      	ldr	r3, [r7, #4]
   16344:	2200      	movs	r2, #0
   16346:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
   16348:	687b      	ldr	r3, [r7, #4]
   1634a:	2206      	movs	r2, #6
   1634c:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   1634e:	687b      	ldr	r3, [r7, #4]
   16350:	2200      	movs	r2, #0
   16352:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   16354:	687b      	ldr	r3, [r7, #4]
   16356:	2200      	movs	r2, #0
   16358:	725a      	strb	r2, [r3, #9]
}
   1635a:	46c0      	nop			; (mov r8, r8)
   1635c:	46bd      	mov	sp, r7
   1635e:	b002      	add	sp, #8
   16360:	bd80      	pop	{r7, pc}

00016362 <system_clock_source_xosc32k_get_config_defaults>:
{
   16362:	b580      	push	{r7, lr}
   16364:	b082      	sub	sp, #8
   16366:	af00      	add	r7, sp, #0
   16368:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
   1636a:	687b      	ldr	r3, [r7, #4]
   1636c:	2200      	movs	r2, #0
   1636e:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
   16370:	687b      	ldr	r3, [r7, #4]
   16372:	2202      	movs	r2, #2
   16374:	705a      	strb	r2, [r3, #1]
	config->frequency           = 32768UL;
   16376:	687b      	ldr	r3, [r7, #4]
   16378:	2280      	movs	r2, #128	; 0x80
   1637a:	0212      	lsls	r2, r2, #8
   1637c:	605a      	str	r2, [r3, #4]
	config->enable_1khz_output  = false;
   1637e:	687b      	ldr	r3, [r7, #4]
   16380:	2200      	movs	r2, #0
   16382:	709a      	strb	r2, [r3, #2]
	config->enable_32khz_output = true;
   16384:	687b      	ldr	r3, [r7, #4]
   16386:	2201      	movs	r2, #1
   16388:	70da      	strb	r2, [r3, #3]
	config->run_in_standby      = false;
   1638a:	687b      	ldr	r3, [r7, #4]
   1638c:	2200      	movs	r2, #0
   1638e:	721a      	strb	r2, [r3, #8]
	config->on_demand           = true;
   16390:	687b      	ldr	r3, [r7, #4]
   16392:	2201      	movs	r2, #1
   16394:	725a      	strb	r2, [r3, #9]
	config->write_once          = false;
   16396:	687b      	ldr	r3, [r7, #4]
   16398:	2200      	movs	r2, #0
   1639a:	729a      	strb	r2, [r3, #10]
}
   1639c:	46c0      	nop			; (mov r8, r8)
   1639e:	46bd      	mov	sp, r7
   163a0:	b002      	add	sp, #8
   163a2:	bd80      	pop	{r7, pc}

000163a4 <arch_ioport_pin_to_port_id>:
{
   163a4:	b580      	push	{r7, lr}
   163a6:	b082      	sub	sp, #8
   163a8:	af00      	add	r7, sp, #0
   163aa:	6078      	str	r0, [r7, #4]
	return pin >> 5;
   163ac:	687b      	ldr	r3, [r7, #4]
   163ae:	095b      	lsrs	r3, r3, #5
}
   163b0:	0018      	movs	r0, r3
   163b2:	46bd      	mov	sp, r7
   163b4:	b002      	add	sp, #8
   163b6:	bd80      	pop	{r7, pc}

000163b8 <arch_ioport_port_to_base>:
{
   163b8:	b580      	push	{r7, lr}
   163ba:	b082      	sub	sp, #8
   163bc:	af00      	add	r7, sp, #0
   163be:	6078      	str	r0, [r7, #4]
	return &PORT->Group[port];
   163c0:	687b      	ldr	r3, [r7, #4]
   163c2:	01db      	lsls	r3, r3, #7
   163c4:	4a03      	ldr	r2, [pc, #12]	; (163d4 <arch_ioport_port_to_base+0x1c>)
   163c6:	4694      	mov	ip, r2
   163c8:	4463      	add	r3, ip
}
   163ca:	0018      	movs	r0, r3
   163cc:	46bd      	mov	sp, r7
   163ce:	b002      	add	sp, #8
   163d0:	bd80      	pop	{r7, pc}
   163d2:	46c0      	nop			; (mov r8, r8)
   163d4:	40002800 	.word	0x40002800

000163d8 <arch_ioport_pin_to_base>:
{
   163d8:	b580      	push	{r7, lr}
   163da:	b082      	sub	sp, #8
   163dc:	af00      	add	r7, sp, #0
   163de:	6078      	str	r0, [r7, #4]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
   163e0:	687b      	ldr	r3, [r7, #4]
   163e2:	0018      	movs	r0, r3
   163e4:	4b05      	ldr	r3, [pc, #20]	; (163fc <arch_ioport_pin_to_base+0x24>)
   163e6:	4798      	blx	r3
   163e8:	0003      	movs	r3, r0
   163ea:	0018      	movs	r0, r3
   163ec:	4b04      	ldr	r3, [pc, #16]	; (16400 <arch_ioport_pin_to_base+0x28>)
   163ee:	4798      	blx	r3
   163f0:	0003      	movs	r3, r0
}
   163f2:	0018      	movs	r0, r3
   163f4:	46bd      	mov	sp, r7
   163f6:	b002      	add	sp, #8
   163f8:	bd80      	pop	{r7, pc}
   163fa:	46c0      	nop			; (mov r8, r8)
   163fc:	000163a5 	.word	0x000163a5
   16400:	000163b9 	.word	0x000163b9

00016404 <arch_ioport_pin_to_mask>:
{
   16404:	b580      	push	{r7, lr}
   16406:	b082      	sub	sp, #8
   16408:	af00      	add	r7, sp, #0
   1640a:	6078      	str	r0, [r7, #4]
	return 1U << (pin & 0x1F);
   1640c:	687b      	ldr	r3, [r7, #4]
   1640e:	221f      	movs	r2, #31
   16410:	4013      	ands	r3, r2
   16412:	2201      	movs	r2, #1
   16414:	409a      	lsls	r2, r3
   16416:	0013      	movs	r3, r2
}
   16418:	0018      	movs	r0, r3
   1641a:	46bd      	mov	sp, r7
   1641c:	b002      	add	sp, #8
   1641e:	bd80      	pop	{r7, pc}

00016420 <arch_ioport_init>:
{
   16420:	b580      	push	{r7, lr}
   16422:	af00      	add	r7, sp, #0
}
   16424:	46c0      	nop			; (mov r8, r8)
   16426:	46bd      	mov	sp, r7
   16428:	bd80      	pop	{r7, pc}
	...

0001642c <arch_ioport_set_port_mode>:
{
   1642c:	b580      	push	{r7, lr}
   1642e:	b08a      	sub	sp, #40	; 0x28
   16430:	af00      	add	r7, sp, #0
   16432:	60f8      	str	r0, [r7, #12]
   16434:	60b9      	str	r1, [r7, #8]
   16436:	607a      	str	r2, [r7, #4]
	PortGroup *base = arch_ioport_port_to_base(port);
   16438:	68fb      	ldr	r3, [r7, #12]
   1643a:	0018      	movs	r0, r3
   1643c:	4b2b      	ldr	r3, [pc, #172]	; (164ec <arch_ioport_set_port_mode+0xc0>)
   1643e:	4798      	blx	r3
   16440:	0003      	movs	r3, r0
   16442:	623b      	str	r3, [r7, #32]
	uint32_t config_mask = 0;
   16444:	2300      	movs	r3, #0
   16446:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t config_mux  = 0;
   16448:	2300      	movs	r3, #0
   1644a:	61fb      	str	r3, [r7, #28]
	config_mask |= PORT_WRCONFIG_INEN;
   1644c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1644e:	2280      	movs	r2, #128	; 0x80
   16450:	0292      	lsls	r2, r2, #10
   16452:	4313      	orrs	r3, r2
   16454:	627b      	str	r3, [r7, #36]	; 0x24
	if ((mode & IOPORT_MODE_PULLDOWN) || (mode & IOPORT_MODE_PULLUP)) {
   16456:	687b      	ldr	r3, [r7, #4]
   16458:	2220      	movs	r2, #32
   1645a:	4013      	ands	r3, r2
   1645c:	d103      	bne.n	16466 <arch_ioport_set_port_mode+0x3a>
   1645e:	687b      	ldr	r3, [r7, #4]
   16460:	2210      	movs	r2, #16
   16462:	4013      	ands	r3, r2
   16464:	d004      	beq.n	16470 <arch_ioport_set_port_mode+0x44>
		config_mask |= PORT_WRCONFIG_PULLEN;
   16466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16468:	2280      	movs	r2, #128	; 0x80
   1646a:	02d2      	lsls	r2, r2, #11
   1646c:	4313      	orrs	r3, r2
   1646e:	627b      	str	r3, [r7, #36]	; 0x24
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
   16470:	687b      	ldr	r3, [r7, #4]
   16472:	2280      	movs	r2, #128	; 0x80
   16474:	4013      	ands	r3, r2
   16476:	d004      	beq.n	16482 <arch_ioport_set_port_mode+0x56>
		config_mask |= PORT_WRCONFIG_DRVSTR;
   16478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1647a:	2280      	movs	r2, #128	; 0x80
   1647c:	03d2      	lsls	r2, r2, #15
   1647e:	4313      	orrs	r3, r2
   16480:	627b      	str	r3, [r7, #36]	; 0x24
	config_mux = (mode & IOPORT_MODE_MUX_MASK) << PORT_WRCONFIG_PMUX_Pos;
   16482:	687b      	ldr	r3, [r7, #4]
   16484:	061a      	lsls	r2, r3, #24
   16486:	23f0      	movs	r3, #240	; 0xf0
   16488:	051b      	lsls	r3, r3, #20
   1648a:	4013      	ands	r3, r2
   1648c:	61fb      	str	r3, [r7, #28]
	uint32_t lower_pin_mask = (mask & 0xFFFF);
   1648e:	68bb      	ldr	r3, [r7, #8]
   16490:	041b      	lsls	r3, r3, #16
   16492:	0c1b      	lsrs	r3, r3, #16
   16494:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (mask >> 16);
   16496:	68bb      	ldr	r3, [r7, #8]
   16498:	0c1b      	lsrs	r3, r3, #16
   1649a:	617b      	str	r3, [r7, #20]
			(lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1649c:	69ba      	ldr	r2, [r7, #24]
   1649e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   164a0:	431a      	orrs	r2, r3
			config_mask | config_mux |
   164a2:	69fb      	ldr	r3, [r7, #28]
   164a4:	4313      	orrs	r3, r2
			PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   164a6:	22a0      	movs	r2, #160	; 0xa0
   164a8:	05d2      	lsls	r2, r2, #23
   164aa:	431a      	orrs	r2, r3
	base->WRCONFIG.reg =
   164ac:	6a3b      	ldr	r3, [r7, #32]
   164ae:	629a      	str	r2, [r3, #40]	; 0x28
			(upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   164b0:	697a      	ldr	r2, [r7, #20]
   164b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   164b4:	431a      	orrs	r2, r3
			config_mask | config_mux |
   164b6:	69fb      	ldr	r3, [r7, #28]
   164b8:	4313      	orrs	r3, r2
			PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   164ba:	22d0      	movs	r2, #208	; 0xd0
   164bc:	0612      	lsls	r2, r2, #24
   164be:	431a      	orrs	r2, r3
	base->WRCONFIG.reg =
   164c0:	6a3b      	ldr	r3, [r7, #32]
   164c2:	629a      	str	r2, [r3, #40]	; 0x28
	if (mode & IOPORT_MODE_PULLDOWN) {
   164c4:	687b      	ldr	r3, [r7, #4]
   164c6:	2220      	movs	r2, #32
   164c8:	4013      	ands	r3, r2
   164ca:	d003      	beq.n	164d4 <arch_ioport_set_port_mode+0xa8>
		base->OUTCLR.reg = mask;
   164cc:	6a3b      	ldr	r3, [r7, #32]
   164ce:	68ba      	ldr	r2, [r7, #8]
   164d0:	615a      	str	r2, [r3, #20]
}
   164d2:	e006      	b.n	164e2 <arch_ioport_set_port_mode+0xb6>
	else if (mode & IOPORT_MODE_PULLUP) {
   164d4:	687b      	ldr	r3, [r7, #4]
   164d6:	2210      	movs	r2, #16
   164d8:	4013      	ands	r3, r2
   164da:	d002      	beq.n	164e2 <arch_ioport_set_port_mode+0xb6>
		base->OUTSET.reg = mask;
   164dc:	6a3b      	ldr	r3, [r7, #32]
   164de:	68ba      	ldr	r2, [r7, #8]
   164e0:	619a      	str	r2, [r3, #24]
}
   164e2:	46c0      	nop			; (mov r8, r8)
   164e4:	46bd      	mov	sp, r7
   164e6:	b00a      	add	sp, #40	; 0x28
   164e8:	bd80      	pop	{r7, pc}
   164ea:	46c0      	nop			; (mov r8, r8)
   164ec:	000163b9 	.word	0x000163b9

000164f0 <arch_ioport_set_pin_mode>:
{
   164f0:	b590      	push	{r4, r7, lr}
   164f2:	b083      	sub	sp, #12
   164f4:	af00      	add	r7, sp, #0
   164f6:	6078      	str	r0, [r7, #4]
   164f8:	6039      	str	r1, [r7, #0]
	arch_ioport_set_port_mode(arch_ioport_pin_to_port_id(pin),
   164fa:	687b      	ldr	r3, [r7, #4]
   164fc:	0018      	movs	r0, r3
   164fe:	4b08      	ldr	r3, [pc, #32]	; (16520 <arch_ioport_set_pin_mode+0x30>)
   16500:	4798      	blx	r3
   16502:	0004      	movs	r4, r0
   16504:	687b      	ldr	r3, [r7, #4]
   16506:	0018      	movs	r0, r3
   16508:	4b06      	ldr	r3, [pc, #24]	; (16524 <arch_ioport_set_pin_mode+0x34>)
   1650a:	4798      	blx	r3
   1650c:	0001      	movs	r1, r0
   1650e:	683b      	ldr	r3, [r7, #0]
   16510:	001a      	movs	r2, r3
   16512:	0020      	movs	r0, r4
   16514:	4b04      	ldr	r3, [pc, #16]	; (16528 <arch_ioport_set_pin_mode+0x38>)
   16516:	4798      	blx	r3
}
   16518:	46c0      	nop			; (mov r8, r8)
   1651a:	46bd      	mov	sp, r7
   1651c:	b003      	add	sp, #12
   1651e:	bd90      	pop	{r4, r7, pc}
   16520:	000163a5 	.word	0x000163a5
   16524:	00016405 	.word	0x00016405
   16528:	0001642d 	.word	0x0001642d

0001652c <arch_ioport_set_pin_dir>:
{
   1652c:	b580      	push	{r7, lr}
   1652e:	b084      	sub	sp, #16
   16530:	af00      	add	r7, sp, #0
   16532:	6078      	str	r0, [r7, #4]
   16534:	000a      	movs	r2, r1
   16536:	1cfb      	adds	r3, r7, #3
   16538:	701a      	strb	r2, [r3, #0]
	PortGroup *base = arch_ioport_pin_to_base(pin);
   1653a:	687b      	ldr	r3, [r7, #4]
   1653c:	0018      	movs	r0, r3
   1653e:	4b18      	ldr	r3, [pc, #96]	; (165a0 <arch_ioport_set_pin_dir+0x74>)
   16540:	4798      	blx	r3
   16542:	0003      	movs	r3, r0
   16544:	60fb      	str	r3, [r7, #12]
	if (dir == IOPORT_DIR_OUTPUT) {
   16546:	1cfb      	adds	r3, r7, #3
   16548:	781b      	ldrb	r3, [r3, #0]
   1654a:	2b01      	cmp	r3, #1
   1654c:	d107      	bne.n	1655e <arch_ioport_set_pin_dir+0x32>
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   1654e:	687b      	ldr	r3, [r7, #4]
   16550:	0018      	movs	r0, r3
   16552:	4b14      	ldr	r3, [pc, #80]	; (165a4 <arch_ioport_set_pin_dir+0x78>)
   16554:	4798      	blx	r3
   16556:	0002      	movs	r2, r0
   16558:	68fb      	ldr	r3, [r7, #12]
   1655a:	609a      	str	r2, [r3, #8]
   1655c:	e00a      	b.n	16574 <arch_ioport_set_pin_dir+0x48>
	} else if (dir == IOPORT_DIR_INPUT) {
   1655e:	1cfb      	adds	r3, r7, #3
   16560:	781b      	ldrb	r3, [r3, #0]
   16562:	2b00      	cmp	r3, #0
   16564:	d106      	bne.n	16574 <arch_ioport_set_pin_dir+0x48>
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   16566:	687b      	ldr	r3, [r7, #4]
   16568:	0018      	movs	r0, r3
   1656a:	4b0e      	ldr	r3, [pc, #56]	; (165a4 <arch_ioport_set_pin_dir+0x78>)
   1656c:	4798      	blx	r3
   1656e:	0002      	movs	r2, r0
   16570:	68fb      	ldr	r3, [r7, #12]
   16572:	605a      	str	r2, [r3, #4]
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
   16574:	68fa      	ldr	r2, [r7, #12]
   16576:	2140      	movs	r1, #64	; 0x40
   16578:	687b      	ldr	r3, [r7, #4]
   1657a:	18d3      	adds	r3, r2, r3
   1657c:	185b      	adds	r3, r3, r1
   1657e:	781b      	ldrb	r3, [r3, #0]
   16580:	b2db      	uxtb	r3, r3
   16582:	2202      	movs	r2, #2
   16584:	4313      	orrs	r3, r2
   16586:	b2d8      	uxtb	r0, r3
   16588:	68fa      	ldr	r2, [r7, #12]
   1658a:	2140      	movs	r1, #64	; 0x40
   1658c:	687b      	ldr	r3, [r7, #4]
   1658e:	18d3      	adds	r3, r2, r3
   16590:	185b      	adds	r3, r3, r1
   16592:	1c02      	adds	r2, r0, #0
   16594:	701a      	strb	r2, [r3, #0]
}
   16596:	46c0      	nop			; (mov r8, r8)
   16598:	46bd      	mov	sp, r7
   1659a:	b004      	add	sp, #16
   1659c:	bd80      	pop	{r7, pc}
   1659e:	46c0      	nop			; (mov r8, r8)
   165a0:	000163d9 	.word	0x000163d9
   165a4:	00016405 	.word	0x00016405

000165a8 <arch_ioport_set_pin_level>:
{
   165a8:	b590      	push	{r4, r7, lr}
   165aa:	b083      	sub	sp, #12
   165ac:	af00      	add	r7, sp, #0
   165ae:	6078      	str	r0, [r7, #4]
   165b0:	000a      	movs	r2, r1
   165b2:	1cfb      	adds	r3, r7, #3
   165b4:	701a      	strb	r2, [r3, #0]
	if (level) {
   165b6:	1cfb      	adds	r3, r7, #3
   165b8:	781b      	ldrb	r3, [r3, #0]
   165ba:	2b00      	cmp	r3, #0
   165bc:	d00b      	beq.n	165d6 <arch_ioport_set_pin_level+0x2e>
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
   165be:	687b      	ldr	r3, [r7, #4]
   165c0:	0018      	movs	r0, r3
   165c2:	4b0c      	ldr	r3, [pc, #48]	; (165f4 <arch_ioport_set_pin_level+0x4c>)
   165c4:	4798      	blx	r3
   165c6:	0004      	movs	r4, r0
   165c8:	687b      	ldr	r3, [r7, #4]
   165ca:	0018      	movs	r0, r3
   165cc:	4b0a      	ldr	r3, [pc, #40]	; (165f8 <arch_ioport_set_pin_level+0x50>)
   165ce:	4798      	blx	r3
   165d0:	0003      	movs	r3, r0
   165d2:	61a3      	str	r3, [r4, #24]
}
   165d4:	e00a      	b.n	165ec <arch_ioport_set_pin_level+0x44>
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
   165d6:	687b      	ldr	r3, [r7, #4]
   165d8:	0018      	movs	r0, r3
   165da:	4b06      	ldr	r3, [pc, #24]	; (165f4 <arch_ioport_set_pin_level+0x4c>)
   165dc:	4798      	blx	r3
   165de:	0004      	movs	r4, r0
   165e0:	687b      	ldr	r3, [r7, #4]
   165e2:	0018      	movs	r0, r3
   165e4:	4b04      	ldr	r3, [pc, #16]	; (165f8 <arch_ioport_set_pin_level+0x50>)
   165e6:	4798      	blx	r3
   165e8:	0003      	movs	r3, r0
   165ea:	6163      	str	r3, [r4, #20]
}
   165ec:	46c0      	nop			; (mov r8, r8)
   165ee:	46bd      	mov	sp, r7
   165f0:	b003      	add	sp, #12
   165f2:	bd90      	pop	{r4, r7, pc}
   165f4:	000163d9 	.word	0x000163d9
   165f8:	00016405 	.word	0x00016405

000165fc <arch_ioport_get_pin_level>:
		base->OUTCLR.reg = mask;
	}
}

inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
   165fc:	b590      	push	{r4, r7, lr}
   165fe:	b083      	sub	sp, #12
   16600:	af00      	add	r7, sp, #0
   16602:	6078      	str	r0, [r7, #4]
	return arch_ioport_pin_to_base(pin)->IN.reg & arch_ioport_pin_to_mask(pin);
   16604:	687b      	ldr	r3, [r7, #4]
   16606:	0018      	movs	r0, r3
   16608:	4b08      	ldr	r3, [pc, #32]	; (1662c <arch_ioport_get_pin_level+0x30>)
   1660a:	4798      	blx	r3
   1660c:	0003      	movs	r3, r0
   1660e:	6a1c      	ldr	r4, [r3, #32]
   16610:	687b      	ldr	r3, [r7, #4]
   16612:	0018      	movs	r0, r3
   16614:	4b06      	ldr	r3, [pc, #24]	; (16630 <arch_ioport_get_pin_level+0x34>)
   16616:	4798      	blx	r3
   16618:	0003      	movs	r3, r0
   1661a:	4023      	ands	r3, r4
   1661c:	1e5a      	subs	r2, r3, #1
   1661e:	4193      	sbcs	r3, r2
   16620:	b2db      	uxtb	r3, r3
}
   16622:	0018      	movs	r0, r3
   16624:	46bd      	mov	sp, r7
   16626:	b003      	add	sp, #12
   16628:	bd90      	pop	{r4, r7, pc}
   1662a:	46c0      	nop			; (mov r8, r8)
   1662c:	000163d9 	.word	0x000163d9
   16630:	00016405 	.word	0x00016405

00016634 <ioport_init>:
{
   16634:	b580      	push	{r7, lr}
   16636:	af00      	add	r7, sp, #0
	arch_ioport_init();
   16638:	4b02      	ldr	r3, [pc, #8]	; (16644 <ioport_init+0x10>)
   1663a:	4798      	blx	r3
}
   1663c:	46c0      	nop			; (mov r8, r8)
   1663e:	46bd      	mov	sp, r7
   16640:	bd80      	pop	{r7, pc}
   16642:	46c0      	nop			; (mov r8, r8)
   16644:	00016421 	.word	0x00016421

00016648 <ioport_set_pin_mode>:
{
   16648:	b580      	push	{r7, lr}
   1664a:	b082      	sub	sp, #8
   1664c:	af00      	add	r7, sp, #0
   1664e:	6078      	str	r0, [r7, #4]
   16650:	6039      	str	r1, [r7, #0]
	arch_ioport_set_pin_mode(pin, mode);
   16652:	683a      	ldr	r2, [r7, #0]
   16654:	687b      	ldr	r3, [r7, #4]
   16656:	0011      	movs	r1, r2
   16658:	0018      	movs	r0, r3
   1665a:	4b03      	ldr	r3, [pc, #12]	; (16668 <ioport_set_pin_mode+0x20>)
   1665c:	4798      	blx	r3
}
   1665e:	46c0      	nop			; (mov r8, r8)
   16660:	46bd      	mov	sp, r7
   16662:	b002      	add	sp, #8
   16664:	bd80      	pop	{r7, pc}
   16666:	46c0      	nop			; (mov r8, r8)
   16668:	000164f1 	.word	0x000164f1

0001666c <ioport_reset_pin_mode>:
{
   1666c:	b580      	push	{r7, lr}
   1666e:	b082      	sub	sp, #8
   16670:	af00      	add	r7, sp, #0
   16672:	6078      	str	r0, [r7, #4]
	arch_ioport_set_pin_mode(pin, 0);
   16674:	687b      	ldr	r3, [r7, #4]
   16676:	2100      	movs	r1, #0
   16678:	0018      	movs	r0, r3
   1667a:	4b03      	ldr	r3, [pc, #12]	; (16688 <ioport_reset_pin_mode+0x1c>)
   1667c:	4798      	blx	r3
}
   1667e:	46c0      	nop			; (mov r8, r8)
   16680:	46bd      	mov	sp, r7
   16682:	b002      	add	sp, #8
   16684:	bd80      	pop	{r7, pc}
   16686:	46c0      	nop			; (mov r8, r8)
   16688:	000164f1 	.word	0x000164f1

0001668c <ioport_set_pin_dir>:
{
   1668c:	b580      	push	{r7, lr}
   1668e:	b082      	sub	sp, #8
   16690:	af00      	add	r7, sp, #0
   16692:	6078      	str	r0, [r7, #4]
   16694:	000a      	movs	r2, r1
   16696:	1cfb      	adds	r3, r7, #3
   16698:	701a      	strb	r2, [r3, #0]
	arch_ioport_set_pin_dir(pin, dir);
   1669a:	1cfb      	adds	r3, r7, #3
   1669c:	781a      	ldrb	r2, [r3, #0]
   1669e:	687b      	ldr	r3, [r7, #4]
   166a0:	0011      	movs	r1, r2
   166a2:	0018      	movs	r0, r3
   166a4:	4b02      	ldr	r3, [pc, #8]	; (166b0 <ioport_set_pin_dir+0x24>)
   166a6:	4798      	blx	r3
}
   166a8:	46c0      	nop			; (mov r8, r8)
   166aa:	46bd      	mov	sp, r7
   166ac:	b002      	add	sp, #8
   166ae:	bd80      	pop	{r7, pc}
   166b0:	0001652d 	.word	0x0001652d

000166b4 <ioport_set_pin_level>:
{
   166b4:	b580      	push	{r7, lr}
   166b6:	b082      	sub	sp, #8
   166b8:	af00      	add	r7, sp, #0
   166ba:	6078      	str	r0, [r7, #4]
   166bc:	000a      	movs	r2, r1
   166be:	1cfb      	adds	r3, r7, #3
   166c0:	701a      	strb	r2, [r3, #0]
	arch_ioport_set_pin_level(pin, level);
   166c2:	1cfb      	adds	r3, r7, #3
   166c4:	781a      	ldrb	r2, [r3, #0]
   166c6:	687b      	ldr	r3, [r7, #4]
   166c8:	0011      	movs	r1, r2
   166ca:	0018      	movs	r0, r3
   166cc:	4b02      	ldr	r3, [pc, #8]	; (166d8 <ioport_set_pin_level+0x24>)
   166ce:	4798      	blx	r3
}
   166d0:	46c0      	nop			; (mov r8, r8)
   166d2:	46bd      	mov	sp, r7
   166d4:	b002      	add	sp, #8
   166d6:	bd80      	pop	{r7, pc}
   166d8:	000165a9 	.word	0x000165a9

000166dc <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
   166dc:	b580      	push	{r7, lr}
   166de:	b082      	sub	sp, #8
   166e0:	af00      	add	r7, sp, #0
   166e2:	6078      	str	r0, [r7, #4]
	return arch_ioport_get_pin_level(pin);
   166e4:	687b      	ldr	r3, [r7, #4]
   166e6:	0018      	movs	r0, r3
   166e8:	4b03      	ldr	r3, [pc, #12]	; (166f8 <ioport_get_pin_level+0x1c>)
   166ea:	4798      	blx	r3
   166ec:	0003      	movs	r3, r0
}
   166ee:	0018      	movs	r0, r3
   166f0:	46bd      	mov	sp, r7
   166f2:	b002      	add	sp, #8
   166f4:	bd80      	pop	{r7, pc}
   166f6:	46c0      	nop			; (mov r8, r8)
   166f8:	000165fd 	.word	0x000165fd

000166fc <system_interrupt_enable_global>:
{
   166fc:	b580      	push	{r7, lr}
   166fe:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   16700:	4b04      	ldr	r3, [pc, #16]	; (16714 <system_interrupt_enable_global+0x18>)
   16702:	2201      	movs	r2, #1
   16704:	701a      	strb	r2, [r3, #0]
   16706:	f3bf 8f5f 	dmb	sy
   1670a:	b662      	cpsie	i
}
   1670c:	46c0      	nop			; (mov r8, r8)
   1670e:	46bd      	mov	sp, r7
   16710:	bd80      	pop	{r7, pc}
   16712:	46c0      	nop			; (mov r8, r8)
   16714:	200000d5 	.word	0x200000d5

00016718 <system_interrupt_disable>:
{
   16718:	b580      	push	{r7, lr}
   1671a:	b082      	sub	sp, #8
   1671c:	af00      	add	r7, sp, #0
   1671e:	0002      	movs	r2, r0
   16720:	1dfb      	adds	r3, r7, #7
   16722:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   16724:	4a07      	ldr	r2, [pc, #28]	; (16744 <system_interrupt_disable+0x2c>)
   16726:	1dfb      	adds	r3, r7, #7
   16728:	781b      	ldrb	r3, [r3, #0]
   1672a:	0019      	movs	r1, r3
   1672c:	231f      	movs	r3, #31
   1672e:	400b      	ands	r3, r1
   16730:	2101      	movs	r1, #1
   16732:	4099      	lsls	r1, r3
   16734:	000b      	movs	r3, r1
   16736:	0019      	movs	r1, r3
   16738:	2380      	movs	r3, #128	; 0x80
   1673a:	50d1      	str	r1, [r2, r3]
}
   1673c:	46c0      	nop			; (mov r8, r8)
   1673e:	46bd      	mov	sp, r7
   16740:	b002      	add	sp, #8
   16742:	bd80      	pop	{r7, pc}
   16744:	e000e100 	.word	0xe000e100

00016748 <system_set_sleepmode>:
{
   16748:	b580      	push	{r7, lr}
   1674a:	b082      	sub	sp, #8
   1674c:	af00      	add	r7, sp, #0
   1674e:	0002      	movs	r2, r0
   16750:	1dfb      	adds	r3, r7, #7
   16752:	701a      	strb	r2, [r3, #0]
	PM->SLEEPCFG.reg = sleep_mode;
   16754:	2380      	movs	r3, #128	; 0x80
   16756:	05db      	lsls	r3, r3, #23
   16758:	1dfa      	adds	r2, r7, #7
   1675a:	7812      	ldrb	r2, [r2, #0]
   1675c:	705a      	strb	r2, [r3, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
   1675e:	46c0      	nop			; (mov r8, r8)
   16760:	2380      	movs	r3, #128	; 0x80
   16762:	05db      	lsls	r3, r3, #23
   16764:	785b      	ldrb	r3, [r3, #1]
   16766:	b2db      	uxtb	r3, r3
   16768:	1dfa      	adds	r2, r7, #7
   1676a:	7812      	ldrb	r2, [r2, #0]
   1676c:	429a      	cmp	r2, r3
   1676e:	d1f7      	bne.n	16760 <system_set_sleepmode+0x18>
}
   16770:	46c0      	nop			; (mov r8, r8)
   16772:	46bd      	mov	sp, r7
   16774:	b002      	add	sp, #8
   16776:	bd80      	pop	{r7, pc}

00016778 <system_sleep>:
{
   16778:	b580      	push	{r7, lr}
   1677a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
   1677c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
   16780:	bf30      	wfi
}
   16782:	46c0      	nop			; (mov r8, r8)
   16784:	46bd      	mov	sp, r7
   16786:	bd80      	pop	{r7, pc}

00016788 <usart_is_syncing>:
{
   16788:	b580      	push	{r7, lr}
   1678a:	b084      	sub	sp, #16
   1678c:	af00      	add	r7, sp, #0
   1678e:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   16790:	687b      	ldr	r3, [r7, #4]
   16792:	681b      	ldr	r3, [r3, #0]
   16794:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   16796:	68fb      	ldr	r3, [r7, #12]
   16798:	69db      	ldr	r3, [r3, #28]
   1679a:	1e5a      	subs	r2, r3, #1
   1679c:	4193      	sbcs	r3, r2
   1679e:	b2db      	uxtb	r3, r3
}
   167a0:	0018      	movs	r0, r3
   167a2:	46bd      	mov	sp, r7
   167a4:	b004      	add	sp, #16
   167a6:	bd80      	pop	{r7, pc}

000167a8 <_usart_wait_for_sync>:
{
   167a8:	b580      	push	{r7, lr}
   167aa:	b082      	sub	sp, #8
   167ac:	af00      	add	r7, sp, #0
   167ae:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   167b0:	46c0      	nop			; (mov r8, r8)
   167b2:	687b      	ldr	r3, [r7, #4]
   167b4:	0018      	movs	r0, r3
   167b6:	4b04      	ldr	r3, [pc, #16]	; (167c8 <_usart_wait_for_sync+0x20>)
   167b8:	4798      	blx	r3
   167ba:	1e03      	subs	r3, r0, #0
   167bc:	d1f9      	bne.n	167b2 <_usart_wait_for_sync+0xa>
}
   167be:	46c0      	nop			; (mov r8, r8)
   167c0:	46bd      	mov	sp, r7
   167c2:	b002      	add	sp, #8
   167c4:	bd80      	pop	{r7, pc}
   167c6:	46c0      	nop			; (mov r8, r8)
   167c8:	00016789 	.word	0x00016789

000167cc <usart_disable>:
{
   167cc:	b580      	push	{r7, lr}
   167ce:	b084      	sub	sp, #16
   167d0:	af00      	add	r7, sp, #0
   167d2:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   167d4:	687b      	ldr	r3, [r7, #4]
   167d6:	681b      	ldr	r3, [r3, #0]
   167d8:	60fb      	str	r3, [r7, #12]
	bool enabled = usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE;
   167da:	68fb      	ldr	r3, [r7, #12]
   167dc:	681b      	ldr	r3, [r3, #0]
   167de:	2202      	movs	r2, #2
   167e0:	401a      	ands	r2, r3
   167e2:	230b      	movs	r3, #11
   167e4:	18fb      	adds	r3, r7, r3
   167e6:	1e51      	subs	r1, r2, #1
   167e8:	418a      	sbcs	r2, r1
   167ea:	701a      	strb	r2, [r3, #0]
	if (!enabled){
   167ec:	230b      	movs	r3, #11
   167ee:	18fb      	adds	r3, r7, r3
   167f0:	781b      	ldrb	r3, [r3, #0]
   167f2:	2201      	movs	r2, #1
   167f4:	4053      	eors	r3, r2
   167f6:	b2db      	uxtb	r3, r3
   167f8:	2b00      	cmp	r3, #0
   167fa:	d114      	bne.n	16826 <usart_disable+0x5a>
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   167fc:	687b      	ldr	r3, [r7, #4]
   167fe:	681b      	ldr	r3, [r3, #0]
   16800:	0018      	movs	r0, r3
   16802:	4b0b      	ldr	r3, [pc, #44]	; (16830 <usart_disable+0x64>)
   16804:	4798      	blx	r3
   16806:	0003      	movs	r3, r0
   16808:	0018      	movs	r0, r3
   1680a:	4b0a      	ldr	r3, [pc, #40]	; (16834 <usart_disable+0x68>)
   1680c:	4798      	blx	r3
	_usart_wait_for_sync(module);
   1680e:	687b      	ldr	r3, [r7, #4]
   16810:	0018      	movs	r0, r3
   16812:	4b09      	ldr	r3, [pc, #36]	; (16838 <usart_disable+0x6c>)
   16814:	4798      	blx	r3
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
   16816:	68fb      	ldr	r3, [r7, #12]
   16818:	681b      	ldr	r3, [r3, #0]
   1681a:	2202      	movs	r2, #2
   1681c:	4393      	bics	r3, r2
   1681e:	001a      	movs	r2, r3
   16820:	68fb      	ldr	r3, [r7, #12]
   16822:	601a      	str	r2, [r3, #0]
   16824:	e000      	b.n	16828 <usart_disable+0x5c>
		return;
   16826:	46c0      	nop			; (mov r8, r8)
}
   16828:	46bd      	mov	sp, r7
   1682a:	b004      	add	sp, #16
   1682c:	bd80      	pop	{r7, pc}
   1682e:	46c0      	nop			; (mov r8, r8)
   16830:	00006381 	.word	0x00006381
   16834:	00016719 	.word	0x00016719
   16838:	000167a9 	.word	0x000167a9

0001683c <sleepmgr_sleep>:
extern uint8_t sleepmgr_locks[];
#endif /* CONFIG_SLEEPMGR_ENABLE */
/** @} */

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
   1683c:	b580      	push	{r7, lr}
   1683e:	b082      	sub	sp, #8
   16840:	af00      	add	r7, sp, #0
   16842:	0002      	movs	r2, r0
   16844:	1dfb      	adds	r3, r7, #7
   16846:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
   16848:	b672      	cpsid	i
  __ASM volatile ("dmb");
   1684a:	f3bf 8f5f 	dmb	sy
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
   1684e:	4b25      	ldr	r3, [pc, #148]	; (168e4 <sleepmgr_sleep+0xa8>)
   16850:	2200      	movs	r2, #0
   16852:	701a      	strb	r2, [r3, #0]

	/* Enter the sleep mode. */
	switch (sleep_mode) {
   16854:	1dfb      	adds	r3, r7, #7
   16856:	781b      	ldrb	r3, [r3, #0]
   16858:	2b02      	cmp	r3, #2
   1685a:	d014      	beq.n	16886 <sleepmgr_sleep+0x4a>
   1685c:	dc02      	bgt.n	16864 <sleepmgr_sleep+0x28>
   1685e:	2b01      	cmp	r3, #1
   16860:	d005      	beq.n	1686e <sleepmgr_sleep+0x32>
   16862:	e034      	b.n	168ce <sleepmgr_sleep+0x92>
   16864:	2b03      	cmp	r3, #3
   16866:	d01a      	beq.n	1689e <sleepmgr_sleep+0x62>
   16868:	2b04      	cmp	r3, #4
   1686a:	d024      	beq.n	168b6 <sleepmgr_sleep+0x7a>
   1686c:	e02f      	b.n	168ce <sleepmgr_sleep+0x92>
	case SLEEPMGR_IDLE:
		system_set_sleepmode(SYSTEM_SLEEPMODE_IDLE);
   1686e:	2002      	movs	r0, #2
   16870:	4b1d      	ldr	r3, [pc, #116]	; (168e8 <sleepmgr_sleep+0xac>)
   16872:	4798      	blx	r3
		cpu_irq_enable();
   16874:	4b1b      	ldr	r3, [pc, #108]	; (168e4 <sleepmgr_sleep+0xa8>)
   16876:	2201      	movs	r2, #1
   16878:	701a      	strb	r2, [r3, #0]
   1687a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   1687e:	b662      	cpsie	i
		system_sleep();
   16880:	4b1a      	ldr	r3, [pc, #104]	; (168ec <sleepmgr_sleep+0xb0>)
   16882:	4798      	blx	r3
		break;
   16884:	e02a      	b.n	168dc <sleepmgr_sleep+0xa0>
	case SLEEPMGR_STANDBY:
		system_set_sleepmode(SYSTEM_SLEEPMODE_STANDBY);
   16886:	2004      	movs	r0, #4
   16888:	4b17      	ldr	r3, [pc, #92]	; (168e8 <sleepmgr_sleep+0xac>)
   1688a:	4798      	blx	r3
		cpu_irq_enable();
   1688c:	4b15      	ldr	r3, [pc, #84]	; (168e4 <sleepmgr_sleep+0xa8>)
   1688e:	2201      	movs	r2, #1
   16890:	701a      	strb	r2, [r3, #0]
   16892:	f3bf 8f5f 	dmb	sy
   16896:	b662      	cpsie	i
		system_sleep();
   16898:	4b14      	ldr	r3, [pc, #80]	; (168ec <sleepmgr_sleep+0xb0>)
   1689a:	4798      	blx	r3
		break;
   1689c:	e01e      	b.n	168dc <sleepmgr_sleep+0xa0>
	case SLEEPMGR_BACKUP:
		system_set_sleepmode(SYSTEM_SLEEPMODE_BACKUP);
   1689e:	2005      	movs	r0, #5
   168a0:	4b11      	ldr	r3, [pc, #68]	; (168e8 <sleepmgr_sleep+0xac>)
   168a2:	4798      	blx	r3
		cpu_irq_enable();
   168a4:	4b0f      	ldr	r3, [pc, #60]	; (168e4 <sleepmgr_sleep+0xa8>)
   168a6:	2201      	movs	r2, #1
   168a8:	701a      	strb	r2, [r3, #0]
   168aa:	f3bf 8f5f 	dmb	sy
   168ae:	b662      	cpsie	i
		system_sleep();
   168b0:	4b0e      	ldr	r3, [pc, #56]	; (168ec <sleepmgr_sleep+0xb0>)
   168b2:	4798      	blx	r3
		break;
   168b4:	e012      	b.n	168dc <sleepmgr_sleep+0xa0>
	case SLEEPMGR_OFF:
		system_set_sleepmode(SYSTEM_SLEEPMODE_OFF);
   168b6:	2006      	movs	r0, #6
   168b8:	4b0b      	ldr	r3, [pc, #44]	; (168e8 <sleepmgr_sleep+0xac>)
   168ba:	4798      	blx	r3
		cpu_irq_enable();
   168bc:	4b09      	ldr	r3, [pc, #36]	; (168e4 <sleepmgr_sleep+0xa8>)
   168be:	2201      	movs	r2, #1
   168c0:	701a      	strb	r2, [r3, #0]
   168c2:	f3bf 8f5f 	dmb	sy
   168c6:	b662      	cpsie	i
		system_sleep();
   168c8:	4b08      	ldr	r3, [pc, #32]	; (168ec <sleepmgr_sleep+0xb0>)
   168ca:	4798      	blx	r3
		break;
   168cc:	e006      	b.n	168dc <sleepmgr_sleep+0xa0>
	default:
		cpu_irq_enable();
   168ce:	4b05      	ldr	r3, [pc, #20]	; (168e4 <sleepmgr_sleep+0xa8>)
   168d0:	2201      	movs	r2, #1
   168d2:	701a      	strb	r2, [r3, #0]
   168d4:	f3bf 8f5f 	dmb	sy
   168d8:	b662      	cpsie	i
		break;
   168da:	46c0      	nop			; (mov r8, r8)
	}
#else
	UNUSED(sleep_mode);
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
   168dc:	46c0      	nop			; (mov r8, r8)
   168de:	46bd      	mov	sp, r7
   168e0:	b002      	add	sp, #8
   168e2:	bd80      	pop	{r7, pc}
   168e4:	200000d5 	.word	0x200000d5
   168e8:	00016749 	.word	0x00016749
   168ec:	00016779 	.word	0x00016779

000168f0 <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
   168f0:	b580      	push	{r7, lr}
   168f2:	b082      	sub	sp, #8
   168f4:	af00      	add	r7, sp, #0
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
   168f6:	1dfb      	adds	r3, r7, #7
   168f8:	2200      	movs	r2, #0
   168fa:	701a      	strb	r2, [r3, #0]
   168fc:	e009      	b.n	16912 <sleepmgr_init+0x22>
		sleepmgr_locks[i] = 0;
   168fe:	1dfb      	adds	r3, r7, #7
   16900:	781b      	ldrb	r3, [r3, #0]
   16902:	4a09      	ldr	r2, [pc, #36]	; (16928 <sleepmgr_init+0x38>)
   16904:	2100      	movs	r1, #0
   16906:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
   16908:	1dfb      	adds	r3, r7, #7
   1690a:	781a      	ldrb	r2, [r3, #0]
   1690c:	1dfb      	adds	r3, r7, #7
   1690e:	3201      	adds	r2, #1
   16910:	701a      	strb	r2, [r3, #0]
   16912:	1dfb      	adds	r3, r7, #7
   16914:	781b      	ldrb	r3, [r3, #0]
   16916:	2b03      	cmp	r3, #3
   16918:	d9f1      	bls.n	168fe <sleepmgr_init+0xe>
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   1691a:	4b03      	ldr	r3, [pc, #12]	; (16928 <sleepmgr_init+0x38>)
   1691c:	2201      	movs	r2, #1
   1691e:	711a      	strb	r2, [r3, #4]
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
   16920:	46c0      	nop			; (mov r8, r8)
   16922:	46bd      	mov	sp, r7
   16924:	b002      	add	sp, #8
   16926:	bd80      	pop	{r7, pc}
   16928:	200011d8 	.word	0x200011d8

0001692c <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
   1692c:	b580      	push	{r7, lr}
   1692e:	b084      	sub	sp, #16
   16930:	af00      	add	r7, sp, #0
   16932:	0002      	movs	r2, r0
   16934:	1dfb      	adds	r3, r7, #7
   16936:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
   16938:	1dfb      	adds	r3, r7, #7
   1693a:	781b      	ldrb	r3, [r3, #0]
   1693c:	4a0c      	ldr	r2, [pc, #48]	; (16970 <sleepmgr_lock_mode+0x44>)
   1693e:	5cd3      	ldrb	r3, [r2, r3]
   16940:	2bff      	cmp	r3, #255	; 0xff
   16942:	d100      	bne.n	16946 <sleepmgr_lock_mode+0x1a>
		while (true) {
   16944:	e7fe      	b.n	16944 <sleepmgr_lock_mode+0x18>
			// Check APP or change the data type to uint16_t.
		}
	}

	// Enter a critical section
	flags = cpu_irq_save();
   16946:	4b0b      	ldr	r3, [pc, #44]	; (16974 <sleepmgr_lock_mode+0x48>)
   16948:	4798      	blx	r3
   1694a:	0003      	movs	r3, r0
   1694c:	60fb      	str	r3, [r7, #12]

	++sleepmgr_locks[mode];
   1694e:	1dfb      	adds	r3, r7, #7
   16950:	781b      	ldrb	r3, [r3, #0]
   16952:	4a07      	ldr	r2, [pc, #28]	; (16970 <sleepmgr_lock_mode+0x44>)
   16954:	5cd2      	ldrb	r2, [r2, r3]
   16956:	3201      	adds	r2, #1
   16958:	b2d1      	uxtb	r1, r2
   1695a:	4a05      	ldr	r2, [pc, #20]	; (16970 <sleepmgr_lock_mode+0x44>)
   1695c:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
   1695e:	68fb      	ldr	r3, [r7, #12]
   16960:	0018      	movs	r0, r3
   16962:	4b05      	ldr	r3, [pc, #20]	; (16978 <sleepmgr_lock_mode+0x4c>)
   16964:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
   16966:	46c0      	nop			; (mov r8, r8)
   16968:	46bd      	mov	sp, r7
   1696a:	b004      	add	sp, #16
   1696c:	bd80      	pop	{r7, pc}
   1696e:	46c0      	nop			; (mov r8, r8)
   16970:	200011d8 	.word	0x200011d8
   16974:	000162bd 	.word	0x000162bd
   16978:	00016305 	.word	0x00016305

0001697c <sleepmgr_get_sleep_mode>:
 * Searches through the sleep mode lock counts, starting at the shallowest sleep
 * mode, until the first non-zero lock count is found. The deepest allowable
 * sleep mode is then returned.
 */
static inline enum sleepmgr_mode sleepmgr_get_sleep_mode(void)
{
   1697c:	b580      	push	{r7, lr}
   1697e:	b082      	sub	sp, #8
   16980:	af00      	add	r7, sp, #0
	enum sleepmgr_mode sleep_mode = SLEEPMGR_ACTIVE;
   16982:	1dfb      	adds	r3, r7, #7
   16984:	2200      	movs	r2, #0
   16986:	701a      	strb	r2, [r3, #0]

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;
   16988:	4b0a      	ldr	r3, [pc, #40]	; (169b4 <sleepmgr_get_sleep_mode+0x38>)
   1698a:	603b      	str	r3, [r7, #0]

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
   1698c:	e007      	b.n	1699e <sleepmgr_get_sleep_mode+0x22>
		lock_ptr++;
   1698e:	683b      	ldr	r3, [r7, #0]
   16990:	3301      	adds	r3, #1
   16992:	603b      	str	r3, [r7, #0]
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
   16994:	1dfb      	adds	r3, r7, #7
   16996:	1dfa      	adds	r2, r7, #7
   16998:	7812      	ldrb	r2, [r2, #0]
   1699a:	3201      	adds	r2, #1
   1699c:	701a      	strb	r2, [r3, #0]
	while (!(*lock_ptr)) {
   1699e:	683b      	ldr	r3, [r7, #0]
   169a0:	781b      	ldrb	r3, [r3, #0]
   169a2:	2b00      	cmp	r3, #0
   169a4:	d0f3      	beq.n	1698e <sleepmgr_get_sleep_mode+0x12>
	// performed on the deepest sleep mode.
	Assert((uintptr_t)(lock_ptr - sleepmgr_locks) < SLEEPMGR_NR_OF_MODES);

#endif /* CONFIG_SLEEPMGR_ENABLE */

	return sleep_mode;
   169a6:	1dfb      	adds	r3, r7, #7
   169a8:	781b      	ldrb	r3, [r3, #0]
}
   169aa:	0018      	movs	r0, r3
   169ac:	46bd      	mov	sp, r7
   169ae:	b002      	add	sp, #8
   169b0:	bd80      	pop	{r7, pc}
   169b2:	46c0      	nop			; (mov r8, r8)
   169b4:	200011d8 	.word	0x200011d8

000169b8 <tc_is_syncing>:
{
   169b8:	b580      	push	{r7, lr}
   169ba:	b084      	sub	sp, #16
   169bc:	af00      	add	r7, sp, #0
   169be:	6078      	str	r0, [r7, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
   169c0:	687b      	ldr	r3, [r7, #4]
   169c2:	681b      	ldr	r3, [r3, #0]
   169c4:	60fb      	str	r3, [r7, #12]
	return (tc_module->SYNCBUSY.reg);
   169c6:	68fb      	ldr	r3, [r7, #12]
   169c8:	691b      	ldr	r3, [r3, #16]
   169ca:	1e5a      	subs	r2, r3, #1
   169cc:	4193      	sbcs	r3, r2
   169ce:	b2db      	uxtb	r3, r3
}
   169d0:	0018      	movs	r0, r3
   169d2:	46bd      	mov	sp, r7
   169d4:	b004      	add	sp, #16
   169d6:	bd80      	pop	{r7, pc}

000169d8 <tc_stop_counter>:
{
   169d8:	b580      	push	{r7, lr}
   169da:	b084      	sub	sp, #16
   169dc:	af00      	add	r7, sp, #0
   169de:	6078      	str	r0, [r7, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
   169e0:	687b      	ldr	r3, [r7, #4]
   169e2:	681b      	ldr	r3, [r3, #0]
   169e4:	60fb      	str	r3, [r7, #12]
	while (tc_is_syncing(module_inst)) {
   169e6:	46c0      	nop			; (mov r8, r8)
   169e8:	687b      	ldr	r3, [r7, #4]
   169ea:	0018      	movs	r0, r3
   169ec:	4b05      	ldr	r3, [pc, #20]	; (16a04 <tc_stop_counter+0x2c>)
   169ee:	4798      	blx	r3
   169f0:	1e03      	subs	r3, r0, #0
   169f2:	d1f9      	bne.n	169e8 <tc_stop_counter+0x10>
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_STOP_Val);
   169f4:	68fb      	ldr	r3, [r7, #12]
   169f6:	2240      	movs	r2, #64	; 0x40
   169f8:	715a      	strb	r2, [r3, #5]
}
   169fa:	46c0      	nop			; (mov r8, r8)
   169fc:	46bd      	mov	sp, r7
   169fe:	b004      	add	sp, #16
   16a00:	bd80      	pop	{r7, pc}
   16a02:	46c0      	nop			; (mov r8, r8)
   16a04:	000169b9 	.word	0x000169b9

00016a08 <tc_start_counter>:
{
   16a08:	b580      	push	{r7, lr}
   16a0a:	b084      	sub	sp, #16
   16a0c:	af00      	add	r7, sp, #0
   16a0e:	6078      	str	r0, [r7, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
   16a10:	687b      	ldr	r3, [r7, #4]
   16a12:	681b      	ldr	r3, [r3, #0]
   16a14:	60fb      	str	r3, [r7, #12]
	while (tc_is_syncing(module_inst)) {
   16a16:	46c0      	nop			; (mov r8, r8)
   16a18:	687b      	ldr	r3, [r7, #4]
   16a1a:	0018      	movs	r0, r3
   16a1c:	4b0a      	ldr	r3, [pc, #40]	; (16a48 <tc_start_counter+0x40>)
   16a1e:	4798      	blx	r3
   16a20:	1e03      	subs	r3, r0, #0
   16a22:	d1f9      	bne.n	16a18 <tc_start_counter+0x10>
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
   16a24:	68fb      	ldr	r3, [r7, #12]
   16a26:	2200      	movs	r2, #0
   16a28:	711a      	strb	r2, [r3, #4]
	while (tc_is_syncing(module_inst)) {
   16a2a:	46c0      	nop			; (mov r8, r8)
   16a2c:	687b      	ldr	r3, [r7, #4]
   16a2e:	0018      	movs	r0, r3
   16a30:	4b05      	ldr	r3, [pc, #20]	; (16a48 <tc_start_counter+0x40>)
   16a32:	4798      	blx	r3
   16a34:	1e03      	subs	r3, r0, #0
   16a36:	d1f9      	bne.n	16a2c <tc_start_counter+0x24>
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_RETRIGGER_Val);
   16a38:	68fb      	ldr	r3, [r7, #12]
   16a3a:	2220      	movs	r2, #32
   16a3c:	715a      	strb	r2, [r3, #5]
}
   16a3e:	46c0      	nop			; (mov r8, r8)
   16a40:	46bd      	mov	sp, r7
   16a42:	b004      	add	sp, #16
   16a44:	bd80      	pop	{r7, pc}
   16a46:	46c0      	nop			; (mov r8, r8)
   16a48:	000169b9 	.word	0x000169b9

00016a4c <main>:




int main (void)
{
   16a4c:	b580      	push	{r7, lr}
   16a4e:	b082      	sub	sp, #8
   16a50:	af00      	add	r7, sp, #0
	uint8_t i; // Iteration counter
	config_pins_powerup();
   16a52:	4b6f      	ldr	r3, [pc, #444]	; (16c10 <main+0x1c4>)
   16a54:	4798      	blx	r3
	system_init();
   16a56:	4b6f      	ldr	r3, [pc, #444]	; (16c14 <main+0x1c8>)
   16a58:	4798      	blx	r3
	delay_init();
   16a5a:	4b6f      	ldr	r3, [pc, #444]	; (16c18 <main+0x1cc>)
   16a5c:	4798      	blx	r3
	delay_ms(500);	
   16a5e:	23fa      	movs	r3, #250	; 0xfa
   16a60:	005b      	lsls	r3, r3, #1
   16a62:	0018      	movs	r0, r3
   16a64:	4b6d      	ldr	r3, [pc, #436]	; (16c1c <main+0x1d0>)
   16a66:	4798      	blx	r3
	wdt_enable();//******************debug
   16a68:	4b6d      	ldr	r3, [pc, #436]	; (16c20 <main+0x1d4>)
   16a6a:	4798      	blx	r3
	setup_spi();
   16a6c:	4b6d      	ldr	r3, [pc, #436]	; (16c24 <main+0x1d8>)
   16a6e:	4798      	blx	r3
	configure_i2c_master();	
   16a70:	4b6d      	ldr	r3, [pc, #436]	; (16c28 <main+0x1dc>)
   16a72:	4798      	blx	r3
	glcd_init();
   16a74:	4b6d      	ldr	r3, [pc, #436]	; (16c2c <main+0x1e0>)
   16a76:	4798      	blx	r3
	configure_extint_channel();
   16a78:	4b6d      	ldr	r3, [pc, #436]	; (16c30 <main+0x1e4>)
   16a7a:	4798      	blx	r3
	configure_extint_callbacks();	
   16a7c:	4b6d      	ldr	r3, [pc, #436]	; (16c34 <main+0x1e8>)
   16a7e:	4798      	blx	r3
	setup_batt();
   16a80:	4b6d      	ldr	r3, [pc, #436]	; (16c38 <main+0x1ec>)
   16a82:	4798      	blx	r3
	setup_accel(&slave_acc1);
   16a84:	4b6d      	ldr	r3, [pc, #436]	; (16c3c <main+0x1f0>)
   16a86:	0018      	movs	r0, r3
   16a88:	4b6d      	ldr	r3, [pc, #436]	; (16c40 <main+0x1f4>)
   16a8a:	4798      	blx	r3
	setup_accel(&slave_acc2);	
   16a8c:	4b6d      	ldr	r3, [pc, #436]	; (16c44 <main+0x1f8>)
   16a8e:	0018      	movs	r0, r3
   16a90:	4b6b      	ldr	r3, [pc, #428]	; (16c40 <main+0x1f4>)
   16a92:	4798      	blx	r3
	setup_mag(&slave_mag1);
   16a94:	4b6c      	ldr	r3, [pc, #432]	; (16c48 <main+0x1fc>)
   16a96:	0018      	movs	r0, r3
   16a98:	4b6c      	ldr	r3, [pc, #432]	; (16c4c <main+0x200>)
   16a9a:	4798      	blx	r3
	setup_mag(&slave_mag2);
   16a9c:	4b6c      	ldr	r3, [pc, #432]	; (16c50 <main+0x204>)
   16a9e:	0018      	movs	r0, r3
   16aa0:	4b6a      	ldr	r3, [pc, #424]	; (16c4c <main+0x200>)
   16aa2:	4798      	blx	r3
	configure_usart();
   16aa4:	4b6b      	ldr	r3, [pc, #428]	; (16c54 <main+0x208>)
   16aa6:	4798      	blx	r3
	ext_osc_onoff(true);
   16aa8:	2001      	movs	r0, #1
   16aaa:	4b6b      	ldr	r3, [pc, #428]	; (16c58 <main+0x20c>)
   16aac:	4798      	blx	r3
	setup_XOSC32k();
   16aae:	4b6b      	ldr	r3, [pc, #428]	; (16c5c <main+0x210>)
   16ab0:	4798      	blx	r3
	clock_32k_source(clock_ext);
   16ab2:	2000      	movs	r0, #0
   16ab4:	4b6a      	ldr	r3, [pc, #424]	; (16c60 <main+0x214>)
   16ab6:	4798      	blx	r3
	configure_timers(st_powerup);
   16ab8:	2005      	movs	r0, #5
   16aba:	4b6a      	ldr	r3, [pc, #424]	; (16c64 <main+0x218>)
   16abc:	4798      	blx	r3
	system_interrupt_enable_global();	
   16abe:	4b6a      	ldr	r3, [pc, #424]	; (16c68 <main+0x21c>)
   16ac0:	4798      	blx	r3
	sleepmgr_init();
   16ac2:	4b6a      	ldr	r3, [pc, #424]	; (16c6c <main+0x220>)
   16ac4:	4798      	blx	r3
	load_user_settings();
   16ac6:	4b6a      	ldr	r3, [pc, #424]	; (16c70 <main+0x224>)
   16ac8:	4798      	blx	r3
	load_calibration();
   16aca:	4b6a      	ldr	r3, [pc, #424]	; (16c74 <main+0x228>)
   16acc:	4798      	blx	r3
	setup_charger();
   16ace:	4b6a      	ldr	r3, [pc, #424]	; (16c78 <main+0x22c>)
   16ad0:	4798      	blx	r3
	backlightOn();
   16ad2:	4b6a      	ldr	r3, [pc, #424]	; (16c7c <main+0x230>)
   16ad4:	4798      	blx	r3
	
	configure_SD();	
   16ad6:	4b6a      	ldr	r3, [pc, #424]	; (16c80 <main+0x234>)
   16ad8:	4798      	blx	r3
	rangefinder_on_off(false);
   16ada:	2000      	movs	r0, #0
   16adc:	4b69      	ldr	r3, [pc, #420]	; (16c84 <main+0x238>)
   16ade:	4798      	blx	r3
	ioport_reset_pin_mode(BLE_ota);//  Needed to reset pin mode; set in some previous initialization
   16ae0:	2036      	movs	r0, #54	; 0x36
   16ae2:	4b69      	ldr	r3, [pc, #420]	; (16c88 <main+0x23c>)
   16ae4:	4798      	blx	r3
	ioport_set_pin_dir(BLE_ota, IOPORT_DIR_OUTPUT);//  Needed to reset pin mode; set in some previous initialization
   16ae6:	2101      	movs	r1, #1
   16ae8:	2036      	movs	r0, #54	; 0x36
   16aea:	4b68      	ldr	r3, [pc, #416]	; (16c8c <main+0x240>)
   16aec:	4798      	blx	r3
	ioport_set_pin_level(BLE_ota, false);//  Needed to reset pin mode; set in some previous initialization
   16aee:	2100      	movs	r1, #0
   16af0:	2036      	movs	r0, #54	; 0x36
   16af2:	4b67      	ldr	r3, [pc, #412]	; (16c90 <main+0x244>)
   16af4:	4798      	blx	r3
	
	current_state = st_main_display;
   16af6:	4b67      	ldr	r3, [pc, #412]	; (16c94 <main+0x248>)
   16af8:	2202      	movs	r2, #2
   16afa:	701a      	strb	r2, [r3, #0]
	current_input = input_1sec;
   16afc:	4b66      	ldr	r3, [pc, #408]	; (16c98 <main+0x24c>)
   16afe:	2207      	movs	r2, #7
   16b00:	701a      	strb	r2, [r3, #0]
	
	while(1){
		if (current_input==input_none){
   16b02:	4b65      	ldr	r3, [pc, #404]	; (16c98 <main+0x24c>)
   16b04:	781b      	ldrb	r3, [r3, #0]
   16b06:	b2db      	uxtb	r3, r3
   16b08:	2b00      	cmp	r3, #0
   16b0a:	d10b      	bne.n	16b24 <main+0xd8>
			clock_16M_source(clock_low);//  Set clock low to conserve power
   16b0c:	2002      	movs	r0, #2
   16b0e:	4b63      	ldr	r3, [pc, #396]	; (16c9c <main+0x250>)
   16b10:	4798      	blx	r3
			while(current_input == input_none);//hold here until an input
   16b12:	46c0      	nop			; (mov r8, r8)
   16b14:	4b60      	ldr	r3, [pc, #384]	; (16c98 <main+0x24c>)
   16b16:	781b      	ldrb	r3, [r3, #0]
   16b18:	b2db      	uxtb	r3, r3
   16b1a:	2b00      	cmp	r3, #0
   16b1c:	d0fa      	beq.n	16b14 <main+0xc8>
			clock_16M_source(clock_high);// Move clock back to high speed
   16b1e:	2003      	movs	r0, #3
   16b20:	4b5e      	ldr	r3, [pc, #376]	; (16c9c <main+0x250>)
   16b22:	4798      	blx	r3
		}
		wdt_reset_count();//******************debug
   16b24:	4b5e      	ldr	r3, [pc, #376]	; (16ca0 <main+0x254>)
   16b26:	4798      	blx	r3
		//  Determine if idle powerdown will be performed
		idle_timeout();//Will produce input=idle_timeout if idle for too long
   16b28:	4b5e      	ldr	r3, [pc, #376]	; (16ca4 <main+0x258>)
   16b2a:	4798      	blx	r3
		
		//  Find state 
		//  State a function of current input		
		state_change = false;
   16b2c:	4b5e      	ldr	r3, [pc, #376]	; (16ca8 <main+0x25c>)
   16b2e:	2200      	movs	r2, #0
   16b30:	701a      	strb	r2, [r3, #0]
		for (i=0; i<(sizeof(state_nextstate)/sizeof(STATE_NEXTSTATE));i++){
   16b32:	1dfb      	adds	r3, r7, #7
   16b34:	2200      	movs	r2, #0
   16b36:	701a      	strb	r2, [r3, #0]
   16b38:	e03b      	b.n	16bb2 <main+0x166>
			if((current_state==state_nextstate[i].current) && (current_input==state_nextstate[i].input)){
   16b3a:	1dfb      	adds	r3, r7, #7
   16b3c:	781a      	ldrb	r2, [r3, #0]
   16b3e:	495b      	ldr	r1, [pc, #364]	; (16cac <main+0x260>)
   16b40:	0013      	movs	r3, r2
   16b42:	005b      	lsls	r3, r3, #1
   16b44:	189b      	adds	r3, r3, r2
   16b46:	5c5a      	ldrb	r2, [r3, r1]
   16b48:	4b52      	ldr	r3, [pc, #328]	; (16c94 <main+0x248>)
   16b4a:	781b      	ldrb	r3, [r3, #0]
   16b4c:	b2db      	uxtb	r3, r3
   16b4e:	429a      	cmp	r2, r3
   16b50:	d12a      	bne.n	16ba8 <main+0x15c>
   16b52:	1dfb      	adds	r3, r7, #7
   16b54:	781a      	ldrb	r2, [r3, #0]
   16b56:	4955      	ldr	r1, [pc, #340]	; (16cac <main+0x260>)
   16b58:	0013      	movs	r3, r2
   16b5a:	005b      	lsls	r3, r3, #1
   16b5c:	189b      	adds	r3, r3, r2
   16b5e:	18cb      	adds	r3, r1, r3
   16b60:	3301      	adds	r3, #1
   16b62:	781a      	ldrb	r2, [r3, #0]
   16b64:	4b4c      	ldr	r3, [pc, #304]	; (16c98 <main+0x24c>)
   16b66:	781b      	ldrb	r3, [r3, #0]
   16b68:	b2db      	uxtb	r3, r3
   16b6a:	429a      	cmp	r2, r3
   16b6c:	d11c      	bne.n	16ba8 <main+0x15c>
				if(current_state!=state_nextstate[i].next){
   16b6e:	1dfb      	adds	r3, r7, #7
   16b70:	781a      	ldrb	r2, [r3, #0]
   16b72:	494e      	ldr	r1, [pc, #312]	; (16cac <main+0x260>)
   16b74:	0013      	movs	r3, r2
   16b76:	005b      	lsls	r3, r3, #1
   16b78:	189b      	adds	r3, r3, r2
   16b7a:	18cb      	adds	r3, r1, r3
   16b7c:	3302      	adds	r3, #2
   16b7e:	781a      	ldrb	r2, [r3, #0]
   16b80:	4b44      	ldr	r3, [pc, #272]	; (16c94 <main+0x248>)
   16b82:	781b      	ldrb	r3, [r3, #0]
   16b84:	b2db      	uxtb	r3, r3
   16b86:	429a      	cmp	r2, r3
   16b88:	d018      	beq.n	16bbc <main+0x170>
					current_state = state_nextstate[i].next;
   16b8a:	1dfb      	adds	r3, r7, #7
   16b8c:	781a      	ldrb	r2, [r3, #0]
   16b8e:	4947      	ldr	r1, [pc, #284]	; (16cac <main+0x260>)
   16b90:	0013      	movs	r3, r2
   16b92:	005b      	lsls	r3, r3, #1
   16b94:	189b      	adds	r3, r3, r2
   16b96:	18cb      	adds	r3, r1, r3
   16b98:	3302      	adds	r3, #2
   16b9a:	781a      	ldrb	r2, [r3, #0]
   16b9c:	4b3d      	ldr	r3, [pc, #244]	; (16c94 <main+0x248>)
   16b9e:	701a      	strb	r2, [r3, #0]
					state_change = true;
   16ba0:	4b41      	ldr	r3, [pc, #260]	; (16ca8 <main+0x25c>)
   16ba2:	2201      	movs	r2, #1
   16ba4:	701a      	strb	r2, [r3, #0]
				}
				break;
   16ba6:	e009      	b.n	16bbc <main+0x170>
		for (i=0; i<(sizeof(state_nextstate)/sizeof(STATE_NEXTSTATE));i++){
   16ba8:	1dfb      	adds	r3, r7, #7
   16baa:	781a      	ldrb	r2, [r3, #0]
   16bac:	1dfb      	adds	r3, r7, #7
   16bae:	3201      	adds	r2, #1
   16bb0:	701a      	strb	r2, [r3, #0]
   16bb2:	1dfb      	adds	r3, r7, #7
   16bb4:	781b      	ldrb	r3, [r3, #0]
   16bb6:	2b55      	cmp	r3, #85	; 0x55
   16bb8:	d9bf      	bls.n	16b3a <main+0xee>
   16bba:	e000      	b.n	16bbe <main+0x172>
				break;
   16bbc:	46c0      	nop			; (mov r8, r8)
			}
		}
		last_input = current_input;
   16bbe:	4b36      	ldr	r3, [pc, #216]	; (16c98 <main+0x24c>)
   16bc0:	781b      	ldrb	r3, [r3, #0]
   16bc2:	b2da      	uxtb	r2, r3
   16bc4:	4b3a      	ldr	r3, [pc, #232]	; (16cb0 <main+0x264>)
   16bc6:	701a      	strb	r2, [r3, #0]
		current_input = input_none;
   16bc8:	4b33      	ldr	r3, [pc, #204]	; (16c98 <main+0x24c>)
   16bca:	2200      	movs	r2, #0
   16bcc:	701a      	strb	r2, [r3, #0]
		
		//  Find and run function for current state
		for(i=0;i<(sizeof(state_functions)/sizeof(STATE_FUNCTIONS));i++){
   16bce:	1dfb      	adds	r3, r7, #7
   16bd0:	2200      	movs	r2, #0
   16bd2:	701a      	strb	r2, [r3, #0]
   16bd4:	e017      	b.n	16c06 <main+0x1ba>
			if(current_state==state_functions[i].current){
   16bd6:	1dfb      	adds	r3, r7, #7
   16bd8:	781a      	ldrb	r2, [r3, #0]
   16bda:	4b36      	ldr	r3, [pc, #216]	; (16cb4 <main+0x268>)
   16bdc:	00d2      	lsls	r2, r2, #3
   16bde:	5cd2      	ldrb	r2, [r2, r3]
   16be0:	4b2c      	ldr	r3, [pc, #176]	; (16c94 <main+0x248>)
   16be2:	781b      	ldrb	r3, [r3, #0]
   16be4:	b2db      	uxtb	r3, r3
   16be6:	429a      	cmp	r2, r3
   16be8:	d108      	bne.n	16bfc <main+0x1b0>
				state_functions[i].Function();				
   16bea:	1dfb      	adds	r3, r7, #7
   16bec:	781b      	ldrb	r3, [r3, #0]
   16bee:	4a31      	ldr	r2, [pc, #196]	; (16cb4 <main+0x268>)
   16bf0:	00db      	lsls	r3, r3, #3
   16bf2:	18d3      	adds	r3, r2, r3
   16bf4:	3304      	adds	r3, #4
   16bf6:	681b      	ldr	r3, [r3, #0]
   16bf8:	4798      	blx	r3
				break;
   16bfa:	e008      	b.n	16c0e <main+0x1c2>
		for(i=0;i<(sizeof(state_functions)/sizeof(STATE_FUNCTIONS));i++){
   16bfc:	1dfb      	adds	r3, r7, #7
   16bfe:	781a      	ldrb	r2, [r3, #0]
   16c00:	1dfb      	adds	r3, r7, #7
   16c02:	3201      	adds	r2, #1
   16c04:	701a      	strb	r2, [r3, #0]
   16c06:	1dfb      	adds	r3, r7, #7
   16c08:	781b      	ldrb	r3, [r3, #0]
   16c0a:	2b15      	cmp	r3, #21
   16c0c:	d9e3      	bls.n	16bd6 <main+0x18a>
		if (current_input==input_none){
   16c0e:	e778      	b.n	16b02 <main+0xb6>
   16c10:	0001aced 	.word	0x0001aced
   16c14:	00016289 	.word	0x00016289
   16c18:	000154bd 	.word	0x000154bd
   16c1c:	00015545 	.word	0x00015545
   16c20:	00003f99 	.word	0x00003f99
   16c24:	0000de85 	.word	0x0000de85
   16c28:	0000e3c1 	.word	0x0000e3c1
   16c2c:	00012395 	.word	0x00012395
   16c30:	0001af69 	.word	0x0001af69
   16c34:	0001b015 	.word	0x0001b015
   16c38:	000017d5 	.word	0x000017d5
   16c3c:	20001124 	.word	0x20001124
   16c40:	00002d29 	.word	0x00002d29
   16c44:	20001050 	.word	0x20001050
   16c48:	20001128 	.word	0x20001128
   16c4c:	00003005 	.word	0x00003005
   16c50:	20001018 	.word	0x20001018
   16c54:	0000e049 	.word	0x0000e049
   16c58:	0000e869 	.word	0x0000e869
   16c5c:	0001b361 	.word	0x0001b361
   16c60:	0001b3e5 	.word	0x0001b3e5
   16c64:	00004035 	.word	0x00004035
   16c68:	000166fd 	.word	0x000166fd
   16c6c:	000168f1 	.word	0x000168f1
   16c70:	00001b41 	.word	0x00001b41
   16c74:	00001bad 	.word	0x00001bad
   16c78:	00001a1d 	.word	0x00001a1d
   16c7c:	00001441 	.word	0x00001441
   16c80:	0001905d 	.word	0x0001905d
   16c84:	00002a81 	.word	0x00002a81
   16c88:	0001666d 	.word	0x0001666d
   16c8c:	0001668d 	.word	0x0001668d
   16c90:	000166b5 	.word	0x000166b5
   16c94:	200027fc 	.word	0x200027fc
   16c98:	20003b78 	.word	0x20003b78
   16c9c:	0001b445 	.word	0x0001b445
   16ca0:	00001209 	.word	0x00001209
   16ca4:	00003ff1 	.word	0x00003ff1
   16ca8:	20000110 	.word	0x20000110
   16cac:	20000114 	.word	0x20000114
   16cb0:	20003b7a 	.word	0x20003b7a
   16cb4:	20000218 	.word	0x20000218

00016cb8 <fn_debug_charger>:

		
	}//End of main program while loop
}//end of main

void fn_debug_charger(void){
   16cb8:	b590      	push	{r4, r7, lr}
   16cba:	b087      	sub	sp, #28
   16cbc:	af00      	add	r7, sp, #0
	uint8_t addressList[] = {
   16cbe:	2310      	movs	r3, #16
   16cc0:	18fb      	adds	r3, r7, r3
   16cc2:	4a32      	ldr	r2, [pc, #200]	; (16d8c <fn_debug_charger+0xd4>)
   16cc4:	6811      	ldr	r1, [r2, #0]
   16cc6:	6019      	str	r1, [r3, #0]
   16cc8:	8892      	ldrh	r2, [r2, #4]
   16cca:	809a      	strh	r2, [r3, #4]
	uint8_t i;
	uint8_t data;
	char binStr[10]; 
	
	//  Set initial conditions
	if (state_change) {
   16ccc:	4b30      	ldr	r3, [pc, #192]	; (16d90 <fn_debug_charger+0xd8>)
   16cce:	781b      	ldrb	r3, [r3, #0]
   16cd0:	b2db      	uxtb	r3, r3
   16cd2:	2b00      	cmp	r3, #0
   16cd4:	d008      	beq.n	16ce8 <fn_debug_charger+0x30>
		cur_Y = 2;
   16cd6:	4b2f      	ldr	r3, [pc, #188]	; (16d94 <fn_debug_charger+0xdc>)
   16cd8:	2202      	movs	r2, #2
   16cda:	601a      	str	r2, [r3, #0]
		cur_Y_low = 2;
   16cdc:	4b2e      	ldr	r3, [pc, #184]	; (16d98 <fn_debug_charger+0xe0>)
   16cde:	2202      	movs	r2, #2
   16ce0:	601a      	str	r2, [r3, #0]
		cur_Y_high = 5;
   16ce2:	4b2e      	ldr	r3, [pc, #184]	; (16d9c <fn_debug_charger+0xe4>)
   16ce4:	2205      	movs	r2, #5
   16ce6:	601a      	str	r2, [r3, #0]
	}
		
	// Display
	glcd_clear_buffer();
   16ce8:	4b2d      	ldr	r3, [pc, #180]	; (16da0 <fn_debug_charger+0xe8>)
   16cea:	4798      	blx	r3
	//  Display Title
	sprintf(display_str,"Charger Debug:");
   16cec:	4a2d      	ldr	r2, [pc, #180]	; (16da4 <fn_debug_charger+0xec>)
   16cee:	4b2e      	ldr	r3, [pc, #184]	; (16da8 <fn_debug_charger+0xf0>)
   16cf0:	0010      	movs	r0, r2
   16cf2:	0019      	movs	r1, r3
   16cf4:	230f      	movs	r3, #15
   16cf6:	001a      	movs	r2, r3
   16cf8:	4b2c      	ldr	r3, [pc, #176]	; (16dac <fn_debug_charger+0xf4>)
   16cfa:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   16cfc:	4b29      	ldr	r3, [pc, #164]	; (16da4 <fn_debug_charger+0xec>)
   16cfe:	001a      	movs	r2, r3
   16d00:	2100      	movs	r1, #0
   16d02:	2000      	movs	r0, #0
   16d04:	4b2a      	ldr	r3, [pc, #168]	; (16db0 <fn_debug_charger+0xf8>)
   16d06:	4798      	blx	r3
	
	for (i=0;i<sizeof(addressList);i++){
   16d08:	2317      	movs	r3, #23
   16d0a:	18fb      	adds	r3, r7, r3
   16d0c:	2200      	movs	r2, #0
   16d0e:	701a      	strb	r2, [r3, #0]
   16d10:	e031      	b.n	16d76 <fn_debug_charger+0xbe>
		data = getChargerRegister(addressList[i]);
   16d12:	2317      	movs	r3, #23
   16d14:	18fb      	adds	r3, r7, r3
   16d16:	781b      	ldrb	r3, [r3, #0]
   16d18:	2210      	movs	r2, #16
   16d1a:	18ba      	adds	r2, r7, r2
   16d1c:	5cd3      	ldrb	r3, [r2, r3]
   16d1e:	2216      	movs	r2, #22
   16d20:	18bc      	adds	r4, r7, r2
   16d22:	0018      	movs	r0, r3
   16d24:	4b23      	ldr	r3, [pc, #140]	; (16db4 <fn_debug_charger+0xfc>)
   16d26:	4798      	blx	r3
   16d28:	0003      	movs	r3, r0
   16d2a:	7023      	strb	r3, [r4, #0]
		bin2str(data, binStr);
   16d2c:	1d3a      	adds	r2, r7, #4
   16d2e:	2316      	movs	r3, #22
   16d30:	18fb      	adds	r3, r7, r3
   16d32:	781b      	ldrb	r3, [r3, #0]
   16d34:	0011      	movs	r1, r2
   16d36:	0018      	movs	r0, r3
   16d38:	4b1f      	ldr	r3, [pc, #124]	; (16db8 <fn_debug_charger+0x100>)
   16d3a:	4798      	blx	r3
		sprintf(display_str, "Add:%02x = %s", 
			addressList[i], binStr);
   16d3c:	2317      	movs	r3, #23
   16d3e:	18fb      	adds	r3, r7, r3
   16d40:	781b      	ldrb	r3, [r3, #0]
   16d42:	2210      	movs	r2, #16
   16d44:	18ba      	adds	r2, r7, r2
   16d46:	5cd3      	ldrb	r3, [r2, r3]
		sprintf(display_str, "Add:%02x = %s", 
   16d48:	001a      	movs	r2, r3
   16d4a:	1d3b      	adds	r3, r7, #4
   16d4c:	491b      	ldr	r1, [pc, #108]	; (16dbc <fn_debug_charger+0x104>)
   16d4e:	4815      	ldr	r0, [pc, #84]	; (16da4 <fn_debug_charger+0xec>)
   16d50:	4c1b      	ldr	r4, [pc, #108]	; (16dc0 <fn_debug_charger+0x108>)
   16d52:	47a0      	blx	r4
		glcd_tiny_draw_string(10, i+1, display_str);
   16d54:	2317      	movs	r3, #23
   16d56:	18fb      	adds	r3, r7, r3
   16d58:	781b      	ldrb	r3, [r3, #0]
   16d5a:	3301      	adds	r3, #1
   16d5c:	b2db      	uxtb	r3, r3
   16d5e:	4a11      	ldr	r2, [pc, #68]	; (16da4 <fn_debug_charger+0xec>)
   16d60:	0019      	movs	r1, r3
   16d62:	200a      	movs	r0, #10
   16d64:	4b12      	ldr	r3, [pc, #72]	; (16db0 <fn_debug_charger+0xf8>)
   16d66:	4798      	blx	r3
	for (i=0;i<sizeof(addressList);i++){
   16d68:	2317      	movs	r3, #23
   16d6a:	18fb      	adds	r3, r7, r3
   16d6c:	781a      	ldrb	r2, [r3, #0]
   16d6e:	2317      	movs	r3, #23
   16d70:	18fb      	adds	r3, r7, r3
   16d72:	3201      	adds	r2, #1
   16d74:	701a      	strb	r2, [r3, #0]
   16d76:	2317      	movs	r3, #23
   16d78:	18fb      	adds	r3, r7, r3
   16d7a:	781b      	ldrb	r3, [r3, #0]
   16d7c:	2b05      	cmp	r3, #5
   16d7e:	d9c8      	bls.n	16d12 <fn_debug_charger+0x5a>
	
	
	
	
	
	glcd_write();
   16d80:	4b10      	ldr	r3, [pc, #64]	; (16dc4 <fn_debug_charger+0x10c>)
   16d82:	4798      	blx	r3
	
}
   16d84:	46c0      	nop			; (mov r8, r8)
   16d86:	46bd      	mov	sp, r7
   16d88:	b007      	add	sp, #28
   16d8a:	bd90      	pop	{r4, r7, pc}
   16d8c:	00025fe0 	.word	0x00025fe0
   16d90:	20000110 	.word	0x20000110
   16d94:	20002ed8 	.word	0x20002ed8
   16d98:	20003f50 	.word	0x20003f50
   16d9c:	20003a30 	.word	0x20003a30
   16da0:	000125a5 	.word	0x000125a5
   16da4:	20002f78 	.word	0x20002f78
   16da8:	00025fc0 	.word	0x00025fc0
   16dac:	00020fa5 	.word	0x00020fa5
   16db0:	00013691 	.word	0x00013691
   16db4:	00001a89 	.word	0x00001a89
   16db8:	00001ab9 	.word	0x00001ab9
   16dbc:	00025fd0 	.word	0x00025fd0
   16dc0:	000210bd 	.word	0x000210bd
   16dc4:	00012de9 	.word	0x00012de9

00016dc8 <fn_debug_rawData>:


void fn_debug_rawData(void){
   16dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   16dca:	b0ad      	sub	sp, #180	; 0xb4
   16dcc:	af02      	add	r7, sp, #8
	
	struct MEASUREMENT meas_debug;
	quick_measurement( &meas_debug);	
   16dce:	1d3b      	adds	r3, r7, #4
   16dd0:	0018      	movs	r0, r3
   16dd2:	4b67      	ldr	r3, [pc, #412]	; (16f70 <fn_debug_rawData+0x1a8>)
   16dd4:	4798      	blx	r3
		

	glcd_clear_buffer();	
   16dd6:	4b67      	ldr	r3, [pc, #412]	; (16f74 <fn_debug_rawData+0x1ac>)
   16dd8:	4798      	blx	r3
	sprintf(display_str, "Acc 1     Acc 2  Done");
   16dda:	4a67      	ldr	r2, [pc, #412]	; (16f78 <fn_debug_rawData+0x1b0>)
   16ddc:	4b67      	ldr	r3, [pc, #412]	; (16f7c <fn_debug_rawData+0x1b4>)
   16dde:	0010      	movs	r0, r2
   16de0:	0019      	movs	r1, r3
   16de2:	2316      	movs	r3, #22
   16de4:	001a      	movs	r2, r3
   16de6:	4b66      	ldr	r3, [pc, #408]	; (16f80 <fn_debug_rawData+0x1b8>)
   16de8:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   16dea:	4b63      	ldr	r3, [pc, #396]	; (16f78 <fn_debug_rawData+0x1b0>)
   16dec:	001a      	movs	r2, r3
   16dee:	2100      	movs	r1, #0
   16df0:	2000      	movs	r0, #0
   16df2:	4b64      	ldr	r3, [pc, #400]	; (16f84 <fn_debug_rawData+0x1bc>)
   16df4:	4798      	blx	r3
	
	sprintf(display_str, "X: %+0.3f %+0.3f", meas_debug.a1xyz[0], meas_debug.a2xyz[0]);
   16df6:	1d3b      	adds	r3, r7, #4
   16df8:	6a1a      	ldr	r2, [r3, #32]
   16dfa:	4b63      	ldr	r3, [pc, #396]	; (16f88 <fn_debug_rawData+0x1c0>)
   16dfc:	1c10      	adds	r0, r2, #0
   16dfe:	4798      	blx	r3
   16e00:	0005      	movs	r5, r0
   16e02:	000e      	movs	r6, r1
   16e04:	1d3b      	adds	r3, r7, #4
   16e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   16e08:	4b5f      	ldr	r3, [pc, #380]	; (16f88 <fn_debug_rawData+0x1c0>)
   16e0a:	1c10      	adds	r0, r2, #0
   16e0c:	4798      	blx	r3
   16e0e:	0003      	movs	r3, r0
   16e10:	000c      	movs	r4, r1
   16e12:	495e      	ldr	r1, [pc, #376]	; (16f8c <fn_debug_rawData+0x1c4>)
   16e14:	4858      	ldr	r0, [pc, #352]	; (16f78 <fn_debug_rawData+0x1b0>)
   16e16:	9300      	str	r3, [sp, #0]
   16e18:	9401      	str	r4, [sp, #4]
   16e1a:	002a      	movs	r2, r5
   16e1c:	0033      	movs	r3, r6
   16e1e:	4c5c      	ldr	r4, [pc, #368]	; (16f90 <fn_debug_rawData+0x1c8>)
   16e20:	47a0      	blx	r4
	glcd_tiny_draw_string(0,1,display_str);
   16e22:	4b55      	ldr	r3, [pc, #340]	; (16f78 <fn_debug_rawData+0x1b0>)
   16e24:	001a      	movs	r2, r3
   16e26:	2101      	movs	r1, #1
   16e28:	2000      	movs	r0, #0
   16e2a:	4b56      	ldr	r3, [pc, #344]	; (16f84 <fn_debug_rawData+0x1bc>)
   16e2c:	4798      	blx	r3
	sprintf(display_str, "Y: %+0.3f %+0.3f", meas_debug.a1xyz[1], meas_debug.a2xyz[1]);
   16e2e:	1d3b      	adds	r3, r7, #4
   16e30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   16e32:	4b55      	ldr	r3, [pc, #340]	; (16f88 <fn_debug_rawData+0x1c0>)
   16e34:	1c10      	adds	r0, r2, #0
   16e36:	4798      	blx	r3
   16e38:	0005      	movs	r5, r0
   16e3a:	000e      	movs	r6, r1
   16e3c:	1d3b      	adds	r3, r7, #4
   16e3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   16e40:	4b51      	ldr	r3, [pc, #324]	; (16f88 <fn_debug_rawData+0x1c0>)
   16e42:	1c10      	adds	r0, r2, #0
   16e44:	4798      	blx	r3
   16e46:	0003      	movs	r3, r0
   16e48:	000c      	movs	r4, r1
   16e4a:	4952      	ldr	r1, [pc, #328]	; (16f94 <fn_debug_rawData+0x1cc>)
   16e4c:	484a      	ldr	r0, [pc, #296]	; (16f78 <fn_debug_rawData+0x1b0>)
   16e4e:	9300      	str	r3, [sp, #0]
   16e50:	9401      	str	r4, [sp, #4]
   16e52:	002a      	movs	r2, r5
   16e54:	0033      	movs	r3, r6
   16e56:	4c4e      	ldr	r4, [pc, #312]	; (16f90 <fn_debug_rawData+0x1c8>)
   16e58:	47a0      	blx	r4
	glcd_tiny_draw_string(0,2,display_str);
   16e5a:	4b47      	ldr	r3, [pc, #284]	; (16f78 <fn_debug_rawData+0x1b0>)
   16e5c:	001a      	movs	r2, r3
   16e5e:	2102      	movs	r1, #2
   16e60:	2000      	movs	r0, #0
   16e62:	4b48      	ldr	r3, [pc, #288]	; (16f84 <fn_debug_rawData+0x1bc>)
   16e64:	4798      	blx	r3
	sprintf(display_str, "Z: %+0.3f %+0.3f", meas_debug.a1xyz[2], meas_debug.a2xyz[2]);
   16e66:	1d3b      	adds	r3, r7, #4
   16e68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   16e6a:	4b47      	ldr	r3, [pc, #284]	; (16f88 <fn_debug_rawData+0x1c0>)
   16e6c:	1c10      	adds	r0, r2, #0
   16e6e:	4798      	blx	r3
   16e70:	0005      	movs	r5, r0
   16e72:	000e      	movs	r6, r1
   16e74:	1d3b      	adds	r3, r7, #4
   16e76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   16e78:	4b43      	ldr	r3, [pc, #268]	; (16f88 <fn_debug_rawData+0x1c0>)
   16e7a:	1c10      	adds	r0, r2, #0
   16e7c:	4798      	blx	r3
   16e7e:	0003      	movs	r3, r0
   16e80:	000c      	movs	r4, r1
   16e82:	4945      	ldr	r1, [pc, #276]	; (16f98 <fn_debug_rawData+0x1d0>)
   16e84:	483c      	ldr	r0, [pc, #240]	; (16f78 <fn_debug_rawData+0x1b0>)
   16e86:	9300      	str	r3, [sp, #0]
   16e88:	9401      	str	r4, [sp, #4]
   16e8a:	002a      	movs	r2, r5
   16e8c:	0033      	movs	r3, r6
   16e8e:	4c40      	ldr	r4, [pc, #256]	; (16f90 <fn_debug_rawData+0x1c8>)
   16e90:	47a0      	blx	r4
	glcd_tiny_draw_string(0,3,display_str);
   16e92:	4b39      	ldr	r3, [pc, #228]	; (16f78 <fn_debug_rawData+0x1b0>)
   16e94:	001a      	movs	r2, r3
   16e96:	2103      	movs	r1, #3
   16e98:	2000      	movs	r0, #0
   16e9a:	4b3a      	ldr	r3, [pc, #232]	; (16f84 <fn_debug_rawData+0x1bc>)
   16e9c:	4798      	blx	r3
	
	sprintf(display_str, "Comp 1    Comp 2  ");
   16e9e:	4a36      	ldr	r2, [pc, #216]	; (16f78 <fn_debug_rawData+0x1b0>)
   16ea0:	4b3e      	ldr	r3, [pc, #248]	; (16f9c <fn_debug_rawData+0x1d4>)
   16ea2:	0010      	movs	r0, r2
   16ea4:	0019      	movs	r1, r3
   16ea6:	2313      	movs	r3, #19
   16ea8:	001a      	movs	r2, r3
   16eaa:	4b35      	ldr	r3, [pc, #212]	; (16f80 <fn_debug_rawData+0x1b8>)
   16eac:	4798      	blx	r3
	glcd_tiny_draw_string(0,4,display_str);
   16eae:	4b32      	ldr	r3, [pc, #200]	; (16f78 <fn_debug_rawData+0x1b0>)
   16eb0:	001a      	movs	r2, r3
   16eb2:	2104      	movs	r1, #4
   16eb4:	2000      	movs	r0, #0
   16eb6:	4b33      	ldr	r3, [pc, #204]	; (16f84 <fn_debug_rawData+0x1bc>)
   16eb8:	4798      	blx	r3
	
	sprintf(display_str, "X: %+0.3f %+0.3f", meas_debug.c1xyz[0], meas_debug.c2xyz[0]);
   16eba:	1d3b      	adds	r3, r7, #4
   16ebc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   16ebe:	4b32      	ldr	r3, [pc, #200]	; (16f88 <fn_debug_rawData+0x1c0>)
   16ec0:	1c10      	adds	r0, r2, #0
   16ec2:	4798      	blx	r3
   16ec4:	0005      	movs	r5, r0
   16ec6:	000e      	movs	r6, r1
   16ec8:	1d3b      	adds	r3, r7, #4
   16eca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   16ecc:	4b2e      	ldr	r3, [pc, #184]	; (16f88 <fn_debug_rawData+0x1c0>)
   16ece:	1c10      	adds	r0, r2, #0
   16ed0:	4798      	blx	r3
   16ed2:	0003      	movs	r3, r0
   16ed4:	000c      	movs	r4, r1
   16ed6:	492d      	ldr	r1, [pc, #180]	; (16f8c <fn_debug_rawData+0x1c4>)
   16ed8:	4827      	ldr	r0, [pc, #156]	; (16f78 <fn_debug_rawData+0x1b0>)
   16eda:	9300      	str	r3, [sp, #0]
   16edc:	9401      	str	r4, [sp, #4]
   16ede:	002a      	movs	r2, r5
   16ee0:	0033      	movs	r3, r6
   16ee2:	4c2b      	ldr	r4, [pc, #172]	; (16f90 <fn_debug_rawData+0x1c8>)
   16ee4:	47a0      	blx	r4
	glcd_tiny_draw_string(0,5,display_str);
   16ee6:	4b24      	ldr	r3, [pc, #144]	; (16f78 <fn_debug_rawData+0x1b0>)
   16ee8:	001a      	movs	r2, r3
   16eea:	2105      	movs	r1, #5
   16eec:	2000      	movs	r0, #0
   16eee:	4b25      	ldr	r3, [pc, #148]	; (16f84 <fn_debug_rawData+0x1bc>)
   16ef0:	4798      	blx	r3
	sprintf(display_str, "Y: %+0.3f %+0.3f", meas_debug.c1xyz[1], meas_debug.c2xyz[1]);
   16ef2:	1d3b      	adds	r3, r7, #4
   16ef4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   16ef6:	4b24      	ldr	r3, [pc, #144]	; (16f88 <fn_debug_rawData+0x1c0>)
   16ef8:	1c10      	adds	r0, r2, #0
   16efa:	4798      	blx	r3
   16efc:	0005      	movs	r5, r0
   16efe:	000e      	movs	r6, r1
   16f00:	1d3b      	adds	r3, r7, #4
   16f02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   16f04:	4b20      	ldr	r3, [pc, #128]	; (16f88 <fn_debug_rawData+0x1c0>)
   16f06:	1c10      	adds	r0, r2, #0
   16f08:	4798      	blx	r3
   16f0a:	0003      	movs	r3, r0
   16f0c:	000c      	movs	r4, r1
   16f0e:	4921      	ldr	r1, [pc, #132]	; (16f94 <fn_debug_rawData+0x1cc>)
   16f10:	4819      	ldr	r0, [pc, #100]	; (16f78 <fn_debug_rawData+0x1b0>)
   16f12:	9300      	str	r3, [sp, #0]
   16f14:	9401      	str	r4, [sp, #4]
   16f16:	002a      	movs	r2, r5
   16f18:	0033      	movs	r3, r6
   16f1a:	4c1d      	ldr	r4, [pc, #116]	; (16f90 <fn_debug_rawData+0x1c8>)
   16f1c:	47a0      	blx	r4
	glcd_tiny_draw_string(0,6,display_str);
   16f1e:	4b16      	ldr	r3, [pc, #88]	; (16f78 <fn_debug_rawData+0x1b0>)
   16f20:	001a      	movs	r2, r3
   16f22:	2106      	movs	r1, #6
   16f24:	2000      	movs	r0, #0
   16f26:	4b17      	ldr	r3, [pc, #92]	; (16f84 <fn_debug_rawData+0x1bc>)
   16f28:	4798      	blx	r3
	sprintf(display_str, "Z: %+0.3f %+0.3f Exit", meas_debug.c1xyz[2], meas_debug.c2xyz[2]);
   16f2a:	1d3b      	adds	r3, r7, #4
   16f2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   16f2e:	4b16      	ldr	r3, [pc, #88]	; (16f88 <fn_debug_rawData+0x1c0>)
   16f30:	1c10      	adds	r0, r2, #0
   16f32:	4798      	blx	r3
   16f34:	0005      	movs	r5, r0
   16f36:	000e      	movs	r6, r1
   16f38:	1d3b      	adds	r3, r7, #4
   16f3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   16f3c:	4b12      	ldr	r3, [pc, #72]	; (16f88 <fn_debug_rawData+0x1c0>)
   16f3e:	1c10      	adds	r0, r2, #0
   16f40:	4798      	blx	r3
   16f42:	0003      	movs	r3, r0
   16f44:	000c      	movs	r4, r1
   16f46:	4916      	ldr	r1, [pc, #88]	; (16fa0 <fn_debug_rawData+0x1d8>)
   16f48:	480b      	ldr	r0, [pc, #44]	; (16f78 <fn_debug_rawData+0x1b0>)
   16f4a:	9300      	str	r3, [sp, #0]
   16f4c:	9401      	str	r4, [sp, #4]
   16f4e:	002a      	movs	r2, r5
   16f50:	0033      	movs	r3, r6
   16f52:	4c0f      	ldr	r4, [pc, #60]	; (16f90 <fn_debug_rawData+0x1c8>)
   16f54:	47a0      	blx	r4
	glcd_tiny_draw_string(0,7,display_str);
   16f56:	4b08      	ldr	r3, [pc, #32]	; (16f78 <fn_debug_rawData+0x1b0>)
   16f58:	001a      	movs	r2, r3
   16f5a:	2107      	movs	r1, #7
   16f5c:	2000      	movs	r0, #0
   16f5e:	4b09      	ldr	r3, [pc, #36]	; (16f84 <fn_debug_rawData+0x1bc>)
   16f60:	4798      	blx	r3
	glcd_write();	
   16f62:	4b10      	ldr	r3, [pc, #64]	; (16fa4 <fn_debug_rawData+0x1dc>)
   16f64:	4798      	blx	r3
}
   16f66:	46c0      	nop			; (mov r8, r8)
   16f68:	46bd      	mov	sp, r7
   16f6a:	b02b      	add	sp, #172	; 0xac
   16f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16f6e:	46c0      	nop			; (mov r8, r8)
   16f70:	000021ad 	.word	0x000021ad
   16f74:	000125a5 	.word	0x000125a5
   16f78:	20002f78 	.word	0x20002f78
   16f7c:	00025fe8 	.word	0x00025fe8
   16f80:	00020fa5 	.word	0x00020fa5
   16f84:	00013691 	.word	0x00013691
   16f88:	00020d99 	.word	0x00020d99
   16f8c:	00026000 	.word	0x00026000
   16f90:	000210bd 	.word	0x000210bd
   16f94:	00026014 	.word	0x00026014
   16f98:	00026028 	.word	0x00026028
   16f9c:	0002603c 	.word	0x0002603c
   16fa0:	00026050 	.word	0x00026050
   16fa4:	00012de9 	.word	0x00012de9

00016fa8 <fn_process_calibration>:

void fn_process_calibration(void){
   16fa8:	b580      	push	{r7, lr}
   16faa:	b082      	sub	sp, #8
   16fac:	af00      	add	r7, sp, #0
	uint8_t i, j;
	
	// Disable Watchdog Timer
	wdt_disable();
   16fae:	4bbc      	ldr	r3, [pc, #752]	; (172a0 <fn_process_calibration+0x2f8>)
   16fb0:	4798      	blx	r3
	
	// Start with empty cal structures
	cal_init_struct(&a1_calst);
   16fb2:	4bbc      	ldr	r3, [pc, #752]	; (172a4 <fn_process_calibration+0x2fc>)
   16fb4:	0018      	movs	r0, r3
   16fb6:	4bbc      	ldr	r3, [pc, #752]	; (172a8 <fn_process_calibration+0x300>)
   16fb8:	4798      	blx	r3
	cal_init_struct(&a2_calst);
   16fba:	4bbc      	ldr	r3, [pc, #752]	; (172ac <fn_process_calibration+0x304>)
   16fbc:	0018      	movs	r0, r3
   16fbe:	4bba      	ldr	r3, [pc, #744]	; (172a8 <fn_process_calibration+0x300>)
   16fc0:	4798      	blx	r3
	cal_init_struct(&c1_calst);
   16fc2:	4bbb      	ldr	r3, [pc, #748]	; (172b0 <fn_process_calibration+0x308>)
   16fc4:	0018      	movs	r0, r3
   16fc6:	4bb8      	ldr	r3, [pc, #736]	; (172a8 <fn_process_calibration+0x300>)
   16fc8:	4798      	blx	r3
	cal_init_struct(&c2_calst);	
   16fca:	4bba      	ldr	r3, [pc, #744]	; (172b4 <fn_process_calibration+0x30c>)
   16fcc:	0018      	movs	r0, r3
   16fce:	4bb6      	ldr	r3, [pc, #728]	; (172a8 <fn_process_calibration+0x300>)
   16fd0:	4798      	blx	r3
	//  Gain and Offset Calibration
	glcd_clear_buffer();
   16fd2:	4bb9      	ldr	r3, [pc, #740]	; (172b8 <fn_process_calibration+0x310>)
   16fd4:	4798      	blx	r3
	sprintf(display_str, "Processing Data...");
   16fd6:	4ab9      	ldr	r2, [pc, #740]	; (172bc <fn_process_calibration+0x314>)
   16fd8:	4bb9      	ldr	r3, [pc, #740]	; (172c0 <fn_process_calibration+0x318>)
   16fda:	0010      	movs	r0, r2
   16fdc:	0019      	movs	r1, r3
   16fde:	2313      	movs	r3, #19
   16fe0:	001a      	movs	r2, r3
   16fe2:	4bb8      	ldr	r3, [pc, #736]	; (172c4 <fn_process_calibration+0x31c>)
   16fe4:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   16fe6:	4bb5      	ldr	r3, [pc, #724]	; (172bc <fn_process_calibration+0x314>)
   16fe8:	001a      	movs	r2, r3
   16fea:	2100      	movs	r1, #0
   16fec:	2000      	movs	r0, #0
   16fee:	4bb6      	ldr	r3, [pc, #728]	; (172c8 <fn_process_calibration+0x320>)
   16ff0:	4798      	blx	r3
	sprintf(display_str, "Calibration:");
   16ff2:	4ab2      	ldr	r2, [pc, #712]	; (172bc <fn_process_calibration+0x314>)
   16ff4:	4bb5      	ldr	r3, [pc, #724]	; (172cc <fn_process_calibration+0x324>)
   16ff6:	0010      	movs	r0, r2
   16ff8:	0019      	movs	r1, r3
   16ffa:	230d      	movs	r3, #13
   16ffc:	001a      	movs	r2, r3
   16ffe:	4bb1      	ldr	r3, [pc, #708]	; (172c4 <fn_process_calibration+0x31c>)
   17000:	4798      	blx	r3
	glcd_tiny_draw_string(0,2,display_str);
   17002:	4bae      	ldr	r3, [pc, #696]	; (172bc <fn_process_calibration+0x314>)
   17004:	001a      	movs	r2, r3
   17006:	2102      	movs	r1, #2
   17008:	2000      	movs	r0, #0
   1700a:	4baf      	ldr	r3, [pc, #700]	; (172c8 <fn_process_calibration+0x320>)
   1700c:	4798      	blx	r3
	sprintf(display_str, "Gain and Offset Cal");
   1700e:	4aab      	ldr	r2, [pc, #684]	; (172bc <fn_process_calibration+0x314>)
   17010:	4baf      	ldr	r3, [pc, #700]	; (172d0 <fn_process_calibration+0x328>)
   17012:	0010      	movs	r0, r2
   17014:	0019      	movs	r1, r3
   17016:	2314      	movs	r3, #20
   17018:	001a      	movs	r2, r3
   1701a:	4baa      	ldr	r3, [pc, #680]	; (172c4 <fn_process_calibration+0x31c>)
   1701c:	4798      	blx	r3
	glcd_tiny_draw_string(0,3,display_str);
   1701e:	4ba7      	ldr	r3, [pc, #668]	; (172bc <fn_process_calibration+0x314>)
   17020:	001a      	movs	r2, r3
   17022:	2103      	movs	r1, #3
   17024:	2000      	movs	r0, #0
   17026:	4ba8      	ldr	r3, [pc, #672]	; (172c8 <fn_process_calibration+0x320>)
   17028:	4798      	blx	r3
	glcd_write();	
   1702a:	4baa      	ldr	r3, [pc, #680]	; (172d4 <fn_process_calibration+0x32c>)
   1702c:	4798      	blx	r3
	
	//  Perform gain and offset calibration per ellipsoid fit
	sprintf(display_str, "Accelerometer 1      ");
   1702e:	4aa3      	ldr	r2, [pc, #652]	; (172bc <fn_process_calibration+0x314>)
   17030:	4ba9      	ldr	r3, [pc, #676]	; (172d8 <fn_process_calibration+0x330>)
   17032:	0010      	movs	r0, r2
   17034:	0019      	movs	r1, r3
   17036:	2316      	movs	r3, #22
   17038:	001a      	movs	r2, r3
   1703a:	4ba2      	ldr	r3, [pc, #648]	; (172c4 <fn_process_calibration+0x31c>)
   1703c:	4798      	blx	r3
	glcd_tiny_draw_string(0,4,display_str);
   1703e:	4b9f      	ldr	r3, [pc, #636]	; (172bc <fn_process_calibration+0x314>)
   17040:	001a      	movs	r2, r3
   17042:	2104      	movs	r1, #4
   17044:	2000      	movs	r0, #0
   17046:	4ba0      	ldr	r3, [pc, #640]	; (172c8 <fn_process_calibration+0x320>)
   17048:	4798      	blx	r3
	glcd_write();	
   1704a:	4ba2      	ldr	r3, [pc, #648]	; (172d4 <fn_process_calibration+0x32c>)
   1704c:	4798      	blx	r3
	cal_gain_off(a1raw, &a1_calst);// Gain and Offset Calibration, Accelerometer 1
   1704e:	4a95      	ldr	r2, [pc, #596]	; (172a4 <fn_process_calibration+0x2fc>)
   17050:	4ba2      	ldr	r3, [pc, #648]	; (172dc <fn_process_calibration+0x334>)
   17052:	0011      	movs	r1, r2
   17054:	0018      	movs	r0, r3
   17056:	4ba2      	ldr	r3, [pc, #648]	; (172e0 <fn_process_calibration+0x338>)
   17058:	4798      	blx	r3
	sprintf(display_str, "Accelerometer 2      ");
   1705a:	4a98      	ldr	r2, [pc, #608]	; (172bc <fn_process_calibration+0x314>)
   1705c:	4ba1      	ldr	r3, [pc, #644]	; (172e4 <fn_process_calibration+0x33c>)
   1705e:	0010      	movs	r0, r2
   17060:	0019      	movs	r1, r3
   17062:	2316      	movs	r3, #22
   17064:	001a      	movs	r2, r3
   17066:	4b97      	ldr	r3, [pc, #604]	; (172c4 <fn_process_calibration+0x31c>)
   17068:	4798      	blx	r3
	glcd_tiny_draw_string(0,4,display_str);
   1706a:	4b94      	ldr	r3, [pc, #592]	; (172bc <fn_process_calibration+0x314>)
   1706c:	001a      	movs	r2, r3
   1706e:	2104      	movs	r1, #4
   17070:	2000      	movs	r0, #0
   17072:	4b95      	ldr	r3, [pc, #596]	; (172c8 <fn_process_calibration+0x320>)
   17074:	4798      	blx	r3
	glcd_write();
   17076:	4b97      	ldr	r3, [pc, #604]	; (172d4 <fn_process_calibration+0x32c>)
   17078:	4798      	blx	r3
	cal_gain_off(a2raw, &a2_calst);// Gain and Offset Calibration, Accelerometer 2
   1707a:	4a8c      	ldr	r2, [pc, #560]	; (172ac <fn_process_calibration+0x304>)
   1707c:	4b9a      	ldr	r3, [pc, #616]	; (172e8 <fn_process_calibration+0x340>)
   1707e:	0011      	movs	r1, r2
   17080:	0018      	movs	r0, r3
   17082:	4b97      	ldr	r3, [pc, #604]	; (172e0 <fn_process_calibration+0x338>)
   17084:	4798      	blx	r3
	sprintf(display_str, "Compass 1            ");
   17086:	4a8d      	ldr	r2, [pc, #564]	; (172bc <fn_process_calibration+0x314>)
   17088:	4b98      	ldr	r3, [pc, #608]	; (172ec <fn_process_calibration+0x344>)
   1708a:	0010      	movs	r0, r2
   1708c:	0019      	movs	r1, r3
   1708e:	2316      	movs	r3, #22
   17090:	001a      	movs	r2, r3
   17092:	4b8c      	ldr	r3, [pc, #560]	; (172c4 <fn_process_calibration+0x31c>)
   17094:	4798      	blx	r3
	glcd_tiny_draw_string(0,4,display_str);
   17096:	4b89      	ldr	r3, [pc, #548]	; (172bc <fn_process_calibration+0x314>)
   17098:	001a      	movs	r2, r3
   1709a:	2104      	movs	r1, #4
   1709c:	2000      	movs	r0, #0
   1709e:	4b8a      	ldr	r3, [pc, #552]	; (172c8 <fn_process_calibration+0x320>)
   170a0:	4798      	blx	r3
	glcd_write();
   170a2:	4b8c      	ldr	r3, [pc, #560]	; (172d4 <fn_process_calibration+0x32c>)
   170a4:	4798      	blx	r3
	cal_gain_off(c1raw, &c1_calst);// Gain and Offset Calibration, Compass 1
   170a6:	4a82      	ldr	r2, [pc, #520]	; (172b0 <fn_process_calibration+0x308>)
   170a8:	4b91      	ldr	r3, [pc, #580]	; (172f0 <fn_process_calibration+0x348>)
   170aa:	0011      	movs	r1, r2
   170ac:	0018      	movs	r0, r3
   170ae:	4b8c      	ldr	r3, [pc, #560]	; (172e0 <fn_process_calibration+0x338>)
   170b0:	4798      	blx	r3
	sprintf(display_str, "Compass 2            ");
   170b2:	4a82      	ldr	r2, [pc, #520]	; (172bc <fn_process_calibration+0x314>)
   170b4:	4b8f      	ldr	r3, [pc, #572]	; (172f4 <fn_process_calibration+0x34c>)
   170b6:	0010      	movs	r0, r2
   170b8:	0019      	movs	r1, r3
   170ba:	2316      	movs	r3, #22
   170bc:	001a      	movs	r2, r3
   170be:	4b81      	ldr	r3, [pc, #516]	; (172c4 <fn_process_calibration+0x31c>)
   170c0:	4798      	blx	r3
	glcd_tiny_draw_string(0,4,display_str);
   170c2:	4b7e      	ldr	r3, [pc, #504]	; (172bc <fn_process_calibration+0x314>)
   170c4:	001a      	movs	r2, r3
   170c6:	2104      	movs	r1, #4
   170c8:	2000      	movs	r0, #0
   170ca:	4b7f      	ldr	r3, [pc, #508]	; (172c8 <fn_process_calibration+0x320>)
   170cc:	4798      	blx	r3
	glcd_write();
   170ce:	4b81      	ldr	r3, [pc, #516]	; (172d4 <fn_process_calibration+0x32c>)
   170d0:	4798      	blx	r3
	cal_gain_off(c2raw, &c2_calst);	// Gain and Offset Calibration, Compass 2
   170d2:	4a78      	ldr	r2, [pc, #480]	; (172b4 <fn_process_calibration+0x30c>)
   170d4:	4b88      	ldr	r3, [pc, #544]	; (172f8 <fn_process_calibration+0x350>)
   170d6:	0011      	movs	r1, r2
   170d8:	0018      	movs	r0, r3
   170da:	4b81      	ldr	r3, [pc, #516]	; (172e0 <fn_process_calibration+0x338>)
   170dc:	4798      	blx	r3
	//  Apply gain and offset calibration
	for (i=0;i<n_points;i++){
   170de:	1dfb      	adds	r3, r7, #7
   170e0:	2200      	movs	r2, #0
   170e2:	701a      	strb	r2, [r3, #0]
   170e4:	e054      	b.n	17190 <fn_process_calibration+0x1e8>
		cal_apply_cal(a1raw[i], a1cal[i], &a1_calst);
   170e6:	1dfb      	adds	r3, r7, #7
   170e8:	781a      	ldrb	r2, [r3, #0]
   170ea:	0013      	movs	r3, r2
   170ec:	005b      	lsls	r3, r3, #1
   170ee:	189b      	adds	r3, r3, r2
   170f0:	009b      	lsls	r3, r3, #2
   170f2:	4a7a      	ldr	r2, [pc, #488]	; (172dc <fn_process_calibration+0x334>)
   170f4:	1898      	adds	r0, r3, r2
   170f6:	1dfb      	adds	r3, r7, #7
   170f8:	781a      	ldrb	r2, [r3, #0]
   170fa:	0013      	movs	r3, r2
   170fc:	005b      	lsls	r3, r3, #1
   170fe:	189b      	adds	r3, r3, r2
   17100:	009b      	lsls	r3, r3, #2
   17102:	4a7e      	ldr	r2, [pc, #504]	; (172fc <fn_process_calibration+0x354>)
   17104:	189b      	adds	r3, r3, r2
   17106:	4a67      	ldr	r2, [pc, #412]	; (172a4 <fn_process_calibration+0x2fc>)
   17108:	0019      	movs	r1, r3
   1710a:	4b7d      	ldr	r3, [pc, #500]	; (17300 <fn_process_calibration+0x358>)
   1710c:	4798      	blx	r3
		cal_apply_cal(a2raw[i], a2cal[i], &a2_calst);
   1710e:	1dfb      	adds	r3, r7, #7
   17110:	781a      	ldrb	r2, [r3, #0]
   17112:	0013      	movs	r3, r2
   17114:	005b      	lsls	r3, r3, #1
   17116:	189b      	adds	r3, r3, r2
   17118:	009b      	lsls	r3, r3, #2
   1711a:	4a73      	ldr	r2, [pc, #460]	; (172e8 <fn_process_calibration+0x340>)
   1711c:	1898      	adds	r0, r3, r2
   1711e:	1dfb      	adds	r3, r7, #7
   17120:	781a      	ldrb	r2, [r3, #0]
   17122:	0013      	movs	r3, r2
   17124:	005b      	lsls	r3, r3, #1
   17126:	189b      	adds	r3, r3, r2
   17128:	009b      	lsls	r3, r3, #2
   1712a:	4a76      	ldr	r2, [pc, #472]	; (17304 <fn_process_calibration+0x35c>)
   1712c:	189b      	adds	r3, r3, r2
   1712e:	4a5f      	ldr	r2, [pc, #380]	; (172ac <fn_process_calibration+0x304>)
   17130:	0019      	movs	r1, r3
   17132:	4b73      	ldr	r3, [pc, #460]	; (17300 <fn_process_calibration+0x358>)
   17134:	4798      	blx	r3
		cal_apply_cal(c1raw[i], c1cal[i], &c1_calst);
   17136:	1dfb      	adds	r3, r7, #7
   17138:	781a      	ldrb	r2, [r3, #0]
   1713a:	0013      	movs	r3, r2
   1713c:	005b      	lsls	r3, r3, #1
   1713e:	189b      	adds	r3, r3, r2
   17140:	009b      	lsls	r3, r3, #2
   17142:	4a6b      	ldr	r2, [pc, #428]	; (172f0 <fn_process_calibration+0x348>)
   17144:	1898      	adds	r0, r3, r2
   17146:	1dfb      	adds	r3, r7, #7
   17148:	781a      	ldrb	r2, [r3, #0]
   1714a:	0013      	movs	r3, r2
   1714c:	005b      	lsls	r3, r3, #1
   1714e:	189b      	adds	r3, r3, r2
   17150:	009b      	lsls	r3, r3, #2
   17152:	4a6d      	ldr	r2, [pc, #436]	; (17308 <fn_process_calibration+0x360>)
   17154:	189b      	adds	r3, r3, r2
   17156:	4a56      	ldr	r2, [pc, #344]	; (172b0 <fn_process_calibration+0x308>)
   17158:	0019      	movs	r1, r3
   1715a:	4b69      	ldr	r3, [pc, #420]	; (17300 <fn_process_calibration+0x358>)
   1715c:	4798      	blx	r3
		cal_apply_cal(c2raw[i], c2cal[i], &c2_calst);
   1715e:	1dfb      	adds	r3, r7, #7
   17160:	781a      	ldrb	r2, [r3, #0]
   17162:	0013      	movs	r3, r2
   17164:	005b      	lsls	r3, r3, #1
   17166:	189b      	adds	r3, r3, r2
   17168:	009b      	lsls	r3, r3, #2
   1716a:	4a63      	ldr	r2, [pc, #396]	; (172f8 <fn_process_calibration+0x350>)
   1716c:	1898      	adds	r0, r3, r2
   1716e:	1dfb      	adds	r3, r7, #7
   17170:	781a      	ldrb	r2, [r3, #0]
   17172:	0013      	movs	r3, r2
   17174:	005b      	lsls	r3, r3, #1
   17176:	189b      	adds	r3, r3, r2
   17178:	009b      	lsls	r3, r3, #2
   1717a:	4a64      	ldr	r2, [pc, #400]	; (1730c <fn_process_calibration+0x364>)
   1717c:	189b      	adds	r3, r3, r2
   1717e:	4a4d      	ldr	r2, [pc, #308]	; (172b4 <fn_process_calibration+0x30c>)
   17180:	0019      	movs	r1, r3
   17182:	4b5f      	ldr	r3, [pc, #380]	; (17300 <fn_process_calibration+0x358>)
   17184:	4798      	blx	r3
	for (i=0;i<n_points;i++){
   17186:	1dfb      	adds	r3, r7, #7
   17188:	781a      	ldrb	r2, [r3, #0]
   1718a:	1dfb      	adds	r3, r7, #7
   1718c:	3201      	adds	r2, #1
   1718e:	701a      	strb	r2, [r3, #0]
   17190:	1dfb      	adds	r3, r7, #7
   17192:	781a      	ldrb	r2, [r3, #0]
   17194:	4b5e      	ldr	r3, [pc, #376]	; (17310 <fn_process_calibration+0x368>)
   17196:	681b      	ldr	r3, [r3, #0]
   17198:	429a      	cmp	r2, r3
   1719a:	d3a4      	bcc.n	170e6 <fn_process_calibration+0x13e>
	}	
	
	//  Perform Axis Misalignment Calibration
	glcd_clear_buffer();
   1719c:	4b46      	ldr	r3, [pc, #280]	; (172b8 <fn_process_calibration+0x310>)
   1719e:	4798      	blx	r3
	sprintf(display_str, "Processing Data...");
   171a0:	4a46      	ldr	r2, [pc, #280]	; (172bc <fn_process_calibration+0x314>)
   171a2:	4b47      	ldr	r3, [pc, #284]	; (172c0 <fn_process_calibration+0x318>)
   171a4:	0010      	movs	r0, r2
   171a6:	0019      	movs	r1, r3
   171a8:	2313      	movs	r3, #19
   171aa:	001a      	movs	r2, r3
   171ac:	4b45      	ldr	r3, [pc, #276]	; (172c4 <fn_process_calibration+0x31c>)
   171ae:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   171b0:	4b42      	ldr	r3, [pc, #264]	; (172bc <fn_process_calibration+0x314>)
   171b2:	001a      	movs	r2, r3
   171b4:	2100      	movs	r1, #0
   171b6:	2000      	movs	r0, #0
   171b8:	4b43      	ldr	r3, [pc, #268]	; (172c8 <fn_process_calibration+0x320>)
   171ba:	4798      	blx	r3
	sprintf(display_str, "Calibration:");
   171bc:	4a3f      	ldr	r2, [pc, #252]	; (172bc <fn_process_calibration+0x314>)
   171be:	4b43      	ldr	r3, [pc, #268]	; (172cc <fn_process_calibration+0x324>)
   171c0:	0010      	movs	r0, r2
   171c2:	0019      	movs	r1, r3
   171c4:	230d      	movs	r3, #13
   171c6:	001a      	movs	r2, r3
   171c8:	4b3e      	ldr	r3, [pc, #248]	; (172c4 <fn_process_calibration+0x31c>)
   171ca:	4798      	blx	r3
	glcd_tiny_draw_string(0,2,display_str);
   171cc:	4b3b      	ldr	r3, [pc, #236]	; (172bc <fn_process_calibration+0x314>)
   171ce:	001a      	movs	r2, r3
   171d0:	2102      	movs	r1, #2
   171d2:	2000      	movs	r0, #0
   171d4:	4b3c      	ldr	r3, [pc, #240]	; (172c8 <fn_process_calibration+0x320>)
   171d6:	4798      	blx	r3
	sprintf(display_str, "Axis Misalignments:");
   171d8:	4a38      	ldr	r2, [pc, #224]	; (172bc <fn_process_calibration+0x314>)
   171da:	4b4e      	ldr	r3, [pc, #312]	; (17314 <fn_process_calibration+0x36c>)
   171dc:	0010      	movs	r0, r2
   171de:	0019      	movs	r1, r3
   171e0:	2314      	movs	r3, #20
   171e2:	001a      	movs	r2, r3
   171e4:	4b37      	ldr	r3, [pc, #220]	; (172c4 <fn_process_calibration+0x31c>)
   171e6:	4798      	blx	r3
	sprintf(display_str, "Accelerometer 1      ");
   171e8:	4a34      	ldr	r2, [pc, #208]	; (172bc <fn_process_calibration+0x314>)
   171ea:	4b3b      	ldr	r3, [pc, #236]	; (172d8 <fn_process_calibration+0x330>)
   171ec:	0010      	movs	r0, r2
   171ee:	0019      	movs	r1, r3
   171f0:	2316      	movs	r3, #22
   171f2:	001a      	movs	r2, r3
   171f4:	4b33      	ldr	r3, [pc, #204]	; (172c4 <fn_process_calibration+0x31c>)
   171f6:	4798      	blx	r3
	glcd_tiny_draw_string(0,4,display_str);	glcd_write();
   171f8:	4b30      	ldr	r3, [pc, #192]	; (172bc <fn_process_calibration+0x314>)
   171fa:	001a      	movs	r2, r3
   171fc:	2104      	movs	r1, #4
   171fe:	2000      	movs	r0, #0
   17200:	4b31      	ldr	r3, [pc, #196]	; (172c8 <fn_process_calibration+0x320>)
   17202:	4798      	blx	r3
   17204:	4b33      	ldr	r3, [pc, #204]	; (172d4 <fn_process_calibration+0x32c>)
   17206:	4798      	blx	r3
	cal_axis_misalignments(a1cal, &a1_calst); // Sensor axis misalignments, Accelerometer 1
   17208:	4a26      	ldr	r2, [pc, #152]	; (172a4 <fn_process_calibration+0x2fc>)
   1720a:	4b3c      	ldr	r3, [pc, #240]	; (172fc <fn_process_calibration+0x354>)
   1720c:	0011      	movs	r1, r2
   1720e:	0018      	movs	r0, r3
   17210:	4b41      	ldr	r3, [pc, #260]	; (17318 <fn_process_calibration+0x370>)
   17212:	4798      	blx	r3
	sprintf(display_str, "Accelerometer 2      ");
   17214:	4a29      	ldr	r2, [pc, #164]	; (172bc <fn_process_calibration+0x314>)
   17216:	4b33      	ldr	r3, [pc, #204]	; (172e4 <fn_process_calibration+0x33c>)
   17218:	0010      	movs	r0, r2
   1721a:	0019      	movs	r1, r3
   1721c:	2316      	movs	r3, #22
   1721e:	001a      	movs	r2, r3
   17220:	4b28      	ldr	r3, [pc, #160]	; (172c4 <fn_process_calibration+0x31c>)
   17222:	4798      	blx	r3
	glcd_tiny_draw_string(0,4,display_str);	glcd_write();
   17224:	4b25      	ldr	r3, [pc, #148]	; (172bc <fn_process_calibration+0x314>)
   17226:	001a      	movs	r2, r3
   17228:	2104      	movs	r1, #4
   1722a:	2000      	movs	r0, #0
   1722c:	4b26      	ldr	r3, [pc, #152]	; (172c8 <fn_process_calibration+0x320>)
   1722e:	4798      	blx	r3
   17230:	4b28      	ldr	r3, [pc, #160]	; (172d4 <fn_process_calibration+0x32c>)
   17232:	4798      	blx	r3
	cal_axis_misalignments(a2cal, &a2_calst);// Sensor axis misalignments, Accelerometer 2
   17234:	4a1d      	ldr	r2, [pc, #116]	; (172ac <fn_process_calibration+0x304>)
   17236:	4b33      	ldr	r3, [pc, #204]	; (17304 <fn_process_calibration+0x35c>)
   17238:	0011      	movs	r1, r2
   1723a:	0018      	movs	r0, r3
   1723c:	4b36      	ldr	r3, [pc, #216]	; (17318 <fn_process_calibration+0x370>)
   1723e:	4798      	blx	r3
	sprintf(display_str, "Compass 1            ");
   17240:	4a1e      	ldr	r2, [pc, #120]	; (172bc <fn_process_calibration+0x314>)
   17242:	4b2a      	ldr	r3, [pc, #168]	; (172ec <fn_process_calibration+0x344>)
   17244:	0010      	movs	r0, r2
   17246:	0019      	movs	r1, r3
   17248:	2316      	movs	r3, #22
   1724a:	001a      	movs	r2, r3
   1724c:	4b1d      	ldr	r3, [pc, #116]	; (172c4 <fn_process_calibration+0x31c>)
   1724e:	4798      	blx	r3
	glcd_tiny_draw_string(0,4,display_str);	glcd_write();
   17250:	4b1a      	ldr	r3, [pc, #104]	; (172bc <fn_process_calibration+0x314>)
   17252:	001a      	movs	r2, r3
   17254:	2104      	movs	r1, #4
   17256:	2000      	movs	r0, #0
   17258:	4b1b      	ldr	r3, [pc, #108]	; (172c8 <fn_process_calibration+0x320>)
   1725a:	4798      	blx	r3
   1725c:	4b1d      	ldr	r3, [pc, #116]	; (172d4 <fn_process_calibration+0x32c>)
   1725e:	4798      	blx	r3
	cal_axis_misalignments(c1cal, &c1_calst);// Sensor axis misalignments, Compass 1
   17260:	4a13      	ldr	r2, [pc, #76]	; (172b0 <fn_process_calibration+0x308>)
   17262:	4b29      	ldr	r3, [pc, #164]	; (17308 <fn_process_calibration+0x360>)
   17264:	0011      	movs	r1, r2
   17266:	0018      	movs	r0, r3
   17268:	4b2b      	ldr	r3, [pc, #172]	; (17318 <fn_process_calibration+0x370>)
   1726a:	4798      	blx	r3
	sprintf(display_str, "Compass 2            ");
   1726c:	4a13      	ldr	r2, [pc, #76]	; (172bc <fn_process_calibration+0x314>)
   1726e:	4b21      	ldr	r3, [pc, #132]	; (172f4 <fn_process_calibration+0x34c>)
   17270:	0010      	movs	r0, r2
   17272:	0019      	movs	r1, r3
   17274:	2316      	movs	r3, #22
   17276:	001a      	movs	r2, r3
   17278:	4b12      	ldr	r3, [pc, #72]	; (172c4 <fn_process_calibration+0x31c>)
   1727a:	4798      	blx	r3
	glcd_tiny_draw_string(0,4,display_str);	glcd_write();
   1727c:	4b0f      	ldr	r3, [pc, #60]	; (172bc <fn_process_calibration+0x314>)
   1727e:	001a      	movs	r2, r3
   17280:	2104      	movs	r1, #4
   17282:	2000      	movs	r0, #0
   17284:	4b10      	ldr	r3, [pc, #64]	; (172c8 <fn_process_calibration+0x320>)
   17286:	4798      	blx	r3
   17288:	4b12      	ldr	r3, [pc, #72]	; (172d4 <fn_process_calibration+0x32c>)
   1728a:	4798      	blx	r3
	cal_axis_misalignments(c2cal, &c2_calst);// Sensor axis misalignments, Compass 2
   1728c:	4a09      	ldr	r2, [pc, #36]	; (172b4 <fn_process_calibration+0x30c>)
   1728e:	4b1f      	ldr	r3, [pc, #124]	; (1730c <fn_process_calibration+0x364>)
   17290:	0011      	movs	r1, r2
   17292:	0018      	movs	r0, r3
   17294:	4b20      	ldr	r3, [pc, #128]	; (17318 <fn_process_calibration+0x370>)
   17296:	4798      	blx	r3
	//  Apply gain and offset calibration
	for (i=0;i<n_points;i++){
   17298:	1dfb      	adds	r3, r7, #7
   1729a:	2200      	movs	r2, #0
   1729c:	701a      	strb	r2, [r3, #0]
   1729e:	e092      	b.n	173c6 <fn_process_calibration+0x41e>
   172a0:	00003fc5 	.word	0x00003fc5
   172a4:	2000497c 	.word	0x2000497c
   172a8:	0000c119 	.word	0x0000c119
   172ac:	20004558 	.word	0x20004558
   172b0:	20002e78 	.word	0x20002e78
   172b4:	20001df0 	.word	0x20001df0
   172b8:	000125a5 	.word	0x000125a5
   172bc:	20002f78 	.word	0x20002f78
   172c0:	00026068 	.word	0x00026068
   172c4:	00020fa5 	.word	0x00020fa5
   172c8:	00013691 	.word	0x00013691
   172cc:	0002607c 	.word	0x0002607c
   172d0:	0002608c 	.word	0x0002608c
   172d4:	00012de9 	.word	0x00012de9
   172d8:	000260a0 	.word	0x000260a0
   172dc:	200049dc 	.word	0x200049dc
   172e0:	0000c571 	.word	0x0000c571
   172e4:	000260b8 	.word	0x000260b8
   172e8:	20003b90 	.word	0x20003b90
   172ec:	000260d0 	.word	0x000260d0
   172f0:	20001a2c 	.word	0x20001a2c
   172f4:	000260e8 	.word	0x000260e8
   172f8:	20001e50 	.word	0x20001e50
   172fc:	20003440 	.word	0x20003440
   17300:	0000bfe9 	.word	0x0000bfe9
   17304:	200045b8 	.word	0x200045b8
   17308:	20002210 	.word	0x20002210
   1730c:	20003078 	.word	0x20003078
   17310:	200027f8 	.word	0x200027f8
   17314:	00026100 	.word	0x00026100
   17318:	0000a931 	.word	0x0000a931
		cal_apply_cal(a1raw[i], a1cal[i], &a1_calst);
   1731c:	1dfb      	adds	r3, r7, #7
   1731e:	781a      	ldrb	r2, [r3, #0]
   17320:	0013      	movs	r3, r2
   17322:	005b      	lsls	r3, r3, #1
   17324:	189b      	adds	r3, r3, r2
   17326:	009b      	lsls	r3, r3, #2
   17328:	4aaa      	ldr	r2, [pc, #680]	; (175d4 <fn_process_calibration+0x62c>)
   1732a:	1898      	adds	r0, r3, r2
   1732c:	1dfb      	adds	r3, r7, #7
   1732e:	781a      	ldrb	r2, [r3, #0]
   17330:	0013      	movs	r3, r2
   17332:	005b      	lsls	r3, r3, #1
   17334:	189b      	adds	r3, r3, r2
   17336:	009b      	lsls	r3, r3, #2
   17338:	4aa7      	ldr	r2, [pc, #668]	; (175d8 <fn_process_calibration+0x630>)
   1733a:	189b      	adds	r3, r3, r2
   1733c:	4aa7      	ldr	r2, [pc, #668]	; (175dc <fn_process_calibration+0x634>)
   1733e:	0019      	movs	r1, r3
   17340:	4ba7      	ldr	r3, [pc, #668]	; (175e0 <fn_process_calibration+0x638>)
   17342:	4798      	blx	r3
		cal_apply_cal(a2raw[i], a2cal[i], &a2_calst);
   17344:	1dfb      	adds	r3, r7, #7
   17346:	781a      	ldrb	r2, [r3, #0]
   17348:	0013      	movs	r3, r2
   1734a:	005b      	lsls	r3, r3, #1
   1734c:	189b      	adds	r3, r3, r2
   1734e:	009b      	lsls	r3, r3, #2
   17350:	4aa4      	ldr	r2, [pc, #656]	; (175e4 <fn_process_calibration+0x63c>)
   17352:	1898      	adds	r0, r3, r2
   17354:	1dfb      	adds	r3, r7, #7
   17356:	781a      	ldrb	r2, [r3, #0]
   17358:	0013      	movs	r3, r2
   1735a:	005b      	lsls	r3, r3, #1
   1735c:	189b      	adds	r3, r3, r2
   1735e:	009b      	lsls	r3, r3, #2
   17360:	4aa1      	ldr	r2, [pc, #644]	; (175e8 <fn_process_calibration+0x640>)
   17362:	189b      	adds	r3, r3, r2
   17364:	4aa1      	ldr	r2, [pc, #644]	; (175ec <fn_process_calibration+0x644>)
   17366:	0019      	movs	r1, r3
   17368:	4b9d      	ldr	r3, [pc, #628]	; (175e0 <fn_process_calibration+0x638>)
   1736a:	4798      	blx	r3
		cal_apply_cal(c1raw[i], c1cal[i], &c1_calst);
   1736c:	1dfb      	adds	r3, r7, #7
   1736e:	781a      	ldrb	r2, [r3, #0]
   17370:	0013      	movs	r3, r2
   17372:	005b      	lsls	r3, r3, #1
   17374:	189b      	adds	r3, r3, r2
   17376:	009b      	lsls	r3, r3, #2
   17378:	4a9d      	ldr	r2, [pc, #628]	; (175f0 <fn_process_calibration+0x648>)
   1737a:	1898      	adds	r0, r3, r2
   1737c:	1dfb      	adds	r3, r7, #7
   1737e:	781a      	ldrb	r2, [r3, #0]
   17380:	0013      	movs	r3, r2
   17382:	005b      	lsls	r3, r3, #1
   17384:	189b      	adds	r3, r3, r2
   17386:	009b      	lsls	r3, r3, #2
   17388:	4a9a      	ldr	r2, [pc, #616]	; (175f4 <fn_process_calibration+0x64c>)
   1738a:	189b      	adds	r3, r3, r2
   1738c:	4a9a      	ldr	r2, [pc, #616]	; (175f8 <fn_process_calibration+0x650>)
   1738e:	0019      	movs	r1, r3
   17390:	4b93      	ldr	r3, [pc, #588]	; (175e0 <fn_process_calibration+0x638>)
   17392:	4798      	blx	r3
		cal_apply_cal(c2raw[i], c2cal[i], &c2_calst);
   17394:	1dfb      	adds	r3, r7, #7
   17396:	781a      	ldrb	r2, [r3, #0]
   17398:	0013      	movs	r3, r2
   1739a:	005b      	lsls	r3, r3, #1
   1739c:	189b      	adds	r3, r3, r2
   1739e:	009b      	lsls	r3, r3, #2
   173a0:	4a96      	ldr	r2, [pc, #600]	; (175fc <fn_process_calibration+0x654>)
   173a2:	1898      	adds	r0, r3, r2
   173a4:	1dfb      	adds	r3, r7, #7
   173a6:	781a      	ldrb	r2, [r3, #0]
   173a8:	0013      	movs	r3, r2
   173aa:	005b      	lsls	r3, r3, #1
   173ac:	189b      	adds	r3, r3, r2
   173ae:	009b      	lsls	r3, r3, #2
   173b0:	4a93      	ldr	r2, [pc, #588]	; (17600 <fn_process_calibration+0x658>)
   173b2:	189b      	adds	r3, r3, r2
   173b4:	4a93      	ldr	r2, [pc, #588]	; (17604 <fn_process_calibration+0x65c>)
   173b6:	0019      	movs	r1, r3
   173b8:	4b89      	ldr	r3, [pc, #548]	; (175e0 <fn_process_calibration+0x638>)
   173ba:	4798      	blx	r3
	for (i=0;i<n_points;i++){
   173bc:	1dfb      	adds	r3, r7, #7
   173be:	781a      	ldrb	r2, [r3, #0]
   173c0:	1dfb      	adds	r3, r7, #7
   173c2:	3201      	adds	r2, #1
   173c4:	701a      	strb	r2, [r3, #0]
   173c6:	1dfb      	adds	r3, r7, #7
   173c8:	781a      	ldrb	r2, [r3, #0]
   173ca:	4b8f      	ldr	r3, [pc, #572]	; (17608 <fn_process_calibration+0x660>)
   173cc:	681b      	ldr	r3, [r3, #0]
   173ce:	429a      	cmp	r2, r3
   173d0:	d3a4      	bcc.n	1731c <fn_process_calibration+0x374>
	}
	

	//  Sensor package to laser axis alignment about Y&Z axis
	glcd_clear_buffer();
   173d2:	4b8e      	ldr	r3, [pc, #568]	; (1760c <fn_process_calibration+0x664>)
   173d4:	4798      	blx	r3
	sprintf(display_str, "Processing Data...");
   173d6:	4a8e      	ldr	r2, [pc, #568]	; (17610 <fn_process_calibration+0x668>)
   173d8:	4b8e      	ldr	r3, [pc, #568]	; (17614 <fn_process_calibration+0x66c>)
   173da:	0010      	movs	r0, r2
   173dc:	0019      	movs	r1, r3
   173de:	2313      	movs	r3, #19
   173e0:	001a      	movs	r2, r3
   173e2:	4b8d      	ldr	r3, [pc, #564]	; (17618 <fn_process_calibration+0x670>)
   173e4:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   173e6:	4b8a      	ldr	r3, [pc, #552]	; (17610 <fn_process_calibration+0x668>)
   173e8:	001a      	movs	r2, r3
   173ea:	2100      	movs	r1, #0
   173ec:	2000      	movs	r0, #0
   173ee:	4b8b      	ldr	r3, [pc, #556]	; (1761c <fn_process_calibration+0x674>)
   173f0:	4798      	blx	r3
	sprintf(display_str, "Calibration:");
   173f2:	4a87      	ldr	r2, [pc, #540]	; (17610 <fn_process_calibration+0x668>)
   173f4:	4b8a      	ldr	r3, [pc, #552]	; (17620 <fn_process_calibration+0x678>)
   173f6:	0010      	movs	r0, r2
   173f8:	0019      	movs	r1, r3
   173fa:	230d      	movs	r3, #13
   173fc:	001a      	movs	r2, r3
   173fe:	4b86      	ldr	r3, [pc, #536]	; (17618 <fn_process_calibration+0x670>)
   17400:	4798      	blx	r3
	glcd_tiny_draw_string(0,2,display_str);
   17402:	4b83      	ldr	r3, [pc, #524]	; (17610 <fn_process_calibration+0x668>)
   17404:	001a      	movs	r2, r3
   17406:	2102      	movs	r1, #2
   17408:	2000      	movs	r0, #0
   1740a:	4b84      	ldr	r3, [pc, #528]	; (1761c <fn_process_calibration+0x674>)
   1740c:	4798      	blx	r3
	sprintf(display_str, "Misalignment Cal, YZ");
   1740e:	4a80      	ldr	r2, [pc, #512]	; (17610 <fn_process_calibration+0x668>)
   17410:	4b84      	ldr	r3, [pc, #528]	; (17624 <fn_process_calibration+0x67c>)
   17412:	0010      	movs	r0, r2
   17414:	0019      	movs	r1, r3
   17416:	2315      	movs	r3, #21
   17418:	001a      	movs	r2, r3
   1741a:	4b7f      	ldr	r3, [pc, #508]	; (17618 <fn_process_calibration+0x670>)
   1741c:	4798      	blx	r3
	glcd_tiny_draw_string(0,3,display_str);
   1741e:	4b7c      	ldr	r3, [pc, #496]	; (17610 <fn_process_calibration+0x668>)
   17420:	001a      	movs	r2, r3
   17422:	2103      	movs	r1, #3
   17424:	2000      	movs	r0, #0
   17426:	4b7d      	ldr	r3, [pc, #500]	; (1761c <fn_process_calibration+0x674>)
   17428:	4798      	blx	r3
	glcd_write();		
   1742a:	4b7f      	ldr	r3, [pc, #508]	; (17628 <fn_process_calibration+0x680>)
   1742c:	4798      	blx	r3
	for (j=0;j<3;j++){
   1742e:	1dbb      	adds	r3, r7, #6
   17430:	2200      	movs	r2, #0
   17432:	701a      	strb	r2, [r3, #0]
   17434:	e02c      	b.n	17490 <fn_process_calibration+0x4e8>
		sprintf(display_str, "Iteration: %d of 3    ", j+1);
   17436:	1dbb      	adds	r3, r7, #6
   17438:	781b      	ldrb	r3, [r3, #0]
   1743a:	1c5a      	adds	r2, r3, #1
   1743c:	497b      	ldr	r1, [pc, #492]	; (1762c <fn_process_calibration+0x684>)
   1743e:	4b74      	ldr	r3, [pc, #464]	; (17610 <fn_process_calibration+0x668>)
   17440:	0018      	movs	r0, r3
   17442:	4b7b      	ldr	r3, [pc, #492]	; (17630 <fn_process_calibration+0x688>)
   17444:	4798      	blx	r3
		glcd_tiny_draw_string(0,4,display_str);
   17446:	4b72      	ldr	r3, [pc, #456]	; (17610 <fn_process_calibration+0x668>)
   17448:	001a      	movs	r2, r3
   1744a:	2104      	movs	r1, #4
   1744c:	2000      	movs	r0, #0
   1744e:	4b73      	ldr	r3, [pc, #460]	; (1761c <fn_process_calibration+0x674>)
   17450:	4798      	blx	r3
		glcd_write();
   17452:	4b75      	ldr	r3, [pc, #468]	; (17628 <fn_process_calibration+0x680>)
   17454:	4798      	blx	r3
		cal_angleYZ(a1cal, &a1_calst);//  Sensor Package to laser Y&Z axis alignment, Accelerometer 1
   17456:	4a61      	ldr	r2, [pc, #388]	; (175dc <fn_process_calibration+0x634>)
   17458:	4b5f      	ldr	r3, [pc, #380]	; (175d8 <fn_process_calibration+0x630>)
   1745a:	0011      	movs	r1, r2
   1745c:	0018      	movs	r0, r3
   1745e:	4b75      	ldr	r3, [pc, #468]	; (17634 <fn_process_calibration+0x68c>)
   17460:	4798      	blx	r3
		cal_angleYZ(a2cal, &a2_calst);//  Sensor Package to laser Y&Z axis alignment, Accelerometer 2
   17462:	4a62      	ldr	r2, [pc, #392]	; (175ec <fn_process_calibration+0x644>)
   17464:	4b60      	ldr	r3, [pc, #384]	; (175e8 <fn_process_calibration+0x640>)
   17466:	0011      	movs	r1, r2
   17468:	0018      	movs	r0, r3
   1746a:	4b72      	ldr	r3, [pc, #456]	; (17634 <fn_process_calibration+0x68c>)
   1746c:	4798      	blx	r3
		cal_angleYZ(c1cal, &c1_calst);//  Sensor Package to laser Y&Z axis alignment, Compass 1
   1746e:	4a62      	ldr	r2, [pc, #392]	; (175f8 <fn_process_calibration+0x650>)
   17470:	4b60      	ldr	r3, [pc, #384]	; (175f4 <fn_process_calibration+0x64c>)
   17472:	0011      	movs	r1, r2
   17474:	0018      	movs	r0, r3
   17476:	4b6f      	ldr	r3, [pc, #444]	; (17634 <fn_process_calibration+0x68c>)
   17478:	4798      	blx	r3
		cal_angleYZ(c2cal, &c2_calst);//  Sensor Package to laser Y&Z axis alignment, Compass 2
   1747a:	4a62      	ldr	r2, [pc, #392]	; (17604 <fn_process_calibration+0x65c>)
   1747c:	4b60      	ldr	r3, [pc, #384]	; (17600 <fn_process_calibration+0x658>)
   1747e:	0011      	movs	r1, r2
   17480:	0018      	movs	r0, r3
   17482:	4b6c      	ldr	r3, [pc, #432]	; (17634 <fn_process_calibration+0x68c>)
   17484:	4798      	blx	r3
	for (j=0;j<3;j++){
   17486:	1dbb      	adds	r3, r7, #6
   17488:	781a      	ldrb	r2, [r3, #0]
   1748a:	1dbb      	adds	r3, r7, #6
   1748c:	3201      	adds	r2, #1
   1748e:	701a      	strb	r2, [r3, #0]
   17490:	1dbb      	adds	r3, r7, #6
   17492:	781b      	ldrb	r3, [r3, #0]
   17494:	2b02      	cmp	r3, #2
   17496:	d9ce      	bls.n	17436 <fn_process_calibration+0x48e>
	}	
	//  Apply gain, offset, and angle calibration
	for (i=0;i<n_points;i++){
   17498:	1dfb      	adds	r3, r7, #7
   1749a:	2200      	movs	r2, #0
   1749c:	701a      	strb	r2, [r3, #0]
   1749e:	e054      	b.n	1754a <fn_process_calibration+0x5a2>
		cal_apply_cal(a1raw[i], a1cal[i], &a1_calst);
   174a0:	1dfb      	adds	r3, r7, #7
   174a2:	781a      	ldrb	r2, [r3, #0]
   174a4:	0013      	movs	r3, r2
   174a6:	005b      	lsls	r3, r3, #1
   174a8:	189b      	adds	r3, r3, r2
   174aa:	009b      	lsls	r3, r3, #2
   174ac:	4a49      	ldr	r2, [pc, #292]	; (175d4 <fn_process_calibration+0x62c>)
   174ae:	1898      	adds	r0, r3, r2
   174b0:	1dfb      	adds	r3, r7, #7
   174b2:	781a      	ldrb	r2, [r3, #0]
   174b4:	0013      	movs	r3, r2
   174b6:	005b      	lsls	r3, r3, #1
   174b8:	189b      	adds	r3, r3, r2
   174ba:	009b      	lsls	r3, r3, #2
   174bc:	4a46      	ldr	r2, [pc, #280]	; (175d8 <fn_process_calibration+0x630>)
   174be:	189b      	adds	r3, r3, r2
   174c0:	4a46      	ldr	r2, [pc, #280]	; (175dc <fn_process_calibration+0x634>)
   174c2:	0019      	movs	r1, r3
   174c4:	4b46      	ldr	r3, [pc, #280]	; (175e0 <fn_process_calibration+0x638>)
   174c6:	4798      	blx	r3
		cal_apply_cal(a2raw[i], a2cal[i], &a2_calst);
   174c8:	1dfb      	adds	r3, r7, #7
   174ca:	781a      	ldrb	r2, [r3, #0]
   174cc:	0013      	movs	r3, r2
   174ce:	005b      	lsls	r3, r3, #1
   174d0:	189b      	adds	r3, r3, r2
   174d2:	009b      	lsls	r3, r3, #2
   174d4:	4a43      	ldr	r2, [pc, #268]	; (175e4 <fn_process_calibration+0x63c>)
   174d6:	1898      	adds	r0, r3, r2
   174d8:	1dfb      	adds	r3, r7, #7
   174da:	781a      	ldrb	r2, [r3, #0]
   174dc:	0013      	movs	r3, r2
   174de:	005b      	lsls	r3, r3, #1
   174e0:	189b      	adds	r3, r3, r2
   174e2:	009b      	lsls	r3, r3, #2
   174e4:	4a40      	ldr	r2, [pc, #256]	; (175e8 <fn_process_calibration+0x640>)
   174e6:	189b      	adds	r3, r3, r2
   174e8:	4a40      	ldr	r2, [pc, #256]	; (175ec <fn_process_calibration+0x644>)
   174ea:	0019      	movs	r1, r3
   174ec:	4b3c      	ldr	r3, [pc, #240]	; (175e0 <fn_process_calibration+0x638>)
   174ee:	4798      	blx	r3
		cal_apply_cal(c1raw[i], c1cal[i], &c1_calst);
   174f0:	1dfb      	adds	r3, r7, #7
   174f2:	781a      	ldrb	r2, [r3, #0]
   174f4:	0013      	movs	r3, r2
   174f6:	005b      	lsls	r3, r3, #1
   174f8:	189b      	adds	r3, r3, r2
   174fa:	009b      	lsls	r3, r3, #2
   174fc:	4a3c      	ldr	r2, [pc, #240]	; (175f0 <fn_process_calibration+0x648>)
   174fe:	1898      	adds	r0, r3, r2
   17500:	1dfb      	adds	r3, r7, #7
   17502:	781a      	ldrb	r2, [r3, #0]
   17504:	0013      	movs	r3, r2
   17506:	005b      	lsls	r3, r3, #1
   17508:	189b      	adds	r3, r3, r2
   1750a:	009b      	lsls	r3, r3, #2
   1750c:	4a39      	ldr	r2, [pc, #228]	; (175f4 <fn_process_calibration+0x64c>)
   1750e:	189b      	adds	r3, r3, r2
   17510:	4a39      	ldr	r2, [pc, #228]	; (175f8 <fn_process_calibration+0x650>)
   17512:	0019      	movs	r1, r3
   17514:	4b32      	ldr	r3, [pc, #200]	; (175e0 <fn_process_calibration+0x638>)
   17516:	4798      	blx	r3
		cal_apply_cal(c2raw[i], c2cal[i], &c2_calst);
   17518:	1dfb      	adds	r3, r7, #7
   1751a:	781a      	ldrb	r2, [r3, #0]
   1751c:	0013      	movs	r3, r2
   1751e:	005b      	lsls	r3, r3, #1
   17520:	189b      	adds	r3, r3, r2
   17522:	009b      	lsls	r3, r3, #2
   17524:	4a35      	ldr	r2, [pc, #212]	; (175fc <fn_process_calibration+0x654>)
   17526:	1898      	adds	r0, r3, r2
   17528:	1dfb      	adds	r3, r7, #7
   1752a:	781a      	ldrb	r2, [r3, #0]
   1752c:	0013      	movs	r3, r2
   1752e:	005b      	lsls	r3, r3, #1
   17530:	189b      	adds	r3, r3, r2
   17532:	009b      	lsls	r3, r3, #2
   17534:	4a32      	ldr	r2, [pc, #200]	; (17600 <fn_process_calibration+0x658>)
   17536:	189b      	adds	r3, r3, r2
   17538:	4a32      	ldr	r2, [pc, #200]	; (17604 <fn_process_calibration+0x65c>)
   1753a:	0019      	movs	r1, r3
   1753c:	4b28      	ldr	r3, [pc, #160]	; (175e0 <fn_process_calibration+0x638>)
   1753e:	4798      	blx	r3
	for (i=0;i<n_points;i++){
   17540:	1dfb      	adds	r3, r7, #7
   17542:	781a      	ldrb	r2, [r3, #0]
   17544:	1dfb      	adds	r3, r7, #7
   17546:	3201      	adds	r2, #1
   17548:	701a      	strb	r2, [r3, #0]
   1754a:	1dfb      	adds	r3, r7, #7
   1754c:	781a      	ldrb	r2, [r3, #0]
   1754e:	4b2e      	ldr	r3, [pc, #184]	; (17608 <fn_process_calibration+0x660>)
   17550:	681b      	ldr	r3, [r3, #0]
   17552:	429a      	cmp	r2, r3
   17554:	d3a4      	bcc.n	174a0 <fn_process_calibration+0x4f8>
	}	
	
	
	//  Perform X angle sensor-package to laser misalignment calibration
	//  Only calibrate the 2nd sensor
	glcd_clear_buffer();
   17556:	4b2d      	ldr	r3, [pc, #180]	; (1760c <fn_process_calibration+0x664>)
   17558:	4798      	blx	r3
	sprintf(display_str, "Processing Data...");
   1755a:	4a2d      	ldr	r2, [pc, #180]	; (17610 <fn_process_calibration+0x668>)
   1755c:	4b2d      	ldr	r3, [pc, #180]	; (17614 <fn_process_calibration+0x66c>)
   1755e:	0010      	movs	r0, r2
   17560:	0019      	movs	r1, r3
   17562:	2313      	movs	r3, #19
   17564:	001a      	movs	r2, r3
   17566:	4b2c      	ldr	r3, [pc, #176]	; (17618 <fn_process_calibration+0x670>)
   17568:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   1756a:	4b29      	ldr	r3, [pc, #164]	; (17610 <fn_process_calibration+0x668>)
   1756c:	001a      	movs	r2, r3
   1756e:	2100      	movs	r1, #0
   17570:	2000      	movs	r0, #0
   17572:	4b2a      	ldr	r3, [pc, #168]	; (1761c <fn_process_calibration+0x674>)
   17574:	4798      	blx	r3
	sprintf(display_str, "Calibration:");
   17576:	4a26      	ldr	r2, [pc, #152]	; (17610 <fn_process_calibration+0x668>)
   17578:	4b29      	ldr	r3, [pc, #164]	; (17620 <fn_process_calibration+0x678>)
   1757a:	0010      	movs	r0, r2
   1757c:	0019      	movs	r1, r3
   1757e:	230d      	movs	r3, #13
   17580:	001a      	movs	r2, r3
   17582:	4b25      	ldr	r3, [pc, #148]	; (17618 <fn_process_calibration+0x670>)
   17584:	4798      	blx	r3
	glcd_tiny_draw_string(0,2,display_str);
   17586:	4b22      	ldr	r3, [pc, #136]	; (17610 <fn_process_calibration+0x668>)
   17588:	001a      	movs	r2, r3
   1758a:	2102      	movs	r1, #2
   1758c:	2000      	movs	r0, #0
   1758e:	4b23      	ldr	r3, [pc, #140]	; (1761c <fn_process_calibration+0x674>)
   17590:	4798      	blx	r3
	sprintf(display_str, "Misalignment Cal, X");
   17592:	4a1f      	ldr	r2, [pc, #124]	; (17610 <fn_process_calibration+0x668>)
   17594:	4b28      	ldr	r3, [pc, #160]	; (17638 <fn_process_calibration+0x690>)
   17596:	0010      	movs	r0, r2
   17598:	0019      	movs	r1, r3
   1759a:	2314      	movs	r3, #20
   1759c:	001a      	movs	r2, r3
   1759e:	4b1e      	ldr	r3, [pc, #120]	; (17618 <fn_process_calibration+0x670>)
   175a0:	4798      	blx	r3
	glcd_tiny_draw_string(0,3,display_str);
   175a2:	4b1b      	ldr	r3, [pc, #108]	; (17610 <fn_process_calibration+0x668>)
   175a4:	001a      	movs	r2, r3
   175a6:	2103      	movs	r1, #3
   175a8:	2000      	movs	r0, #0
   175aa:	4b1c      	ldr	r3, [pc, #112]	; (1761c <fn_process_calibration+0x674>)
   175ac:	4798      	blx	r3
	glcd_write();
   175ae:	4b1e      	ldr	r3, [pc, #120]	; (17628 <fn_process_calibration+0x680>)
   175b0:	4798      	blx	r3
	cal_angleX(a1cal, a2cal, &a2_calst);//  Sensor package to laser X-axis alignment, Accelerometer 2
   175b2:	4a0e      	ldr	r2, [pc, #56]	; (175ec <fn_process_calibration+0x644>)
   175b4:	490c      	ldr	r1, [pc, #48]	; (175e8 <fn_process_calibration+0x640>)
   175b6:	4b08      	ldr	r3, [pc, #32]	; (175d8 <fn_process_calibration+0x630>)
   175b8:	0018      	movs	r0, r3
   175ba:	4b20      	ldr	r3, [pc, #128]	; (1763c <fn_process_calibration+0x694>)
   175bc:	4798      	blx	r3
	cal_angleX(c1cal, c2cal, &c2_calst);//  Sensor package to laser X-axis alignment, Compass 2
   175be:	4a11      	ldr	r2, [pc, #68]	; (17604 <fn_process_calibration+0x65c>)
   175c0:	490f      	ldr	r1, [pc, #60]	; (17600 <fn_process_calibration+0x658>)
   175c2:	4b0c      	ldr	r3, [pc, #48]	; (175f4 <fn_process_calibration+0x64c>)
   175c4:	0018      	movs	r0, r3
   175c6:	4b1d      	ldr	r3, [pc, #116]	; (1763c <fn_process_calibration+0x694>)
   175c8:	4798      	blx	r3
		//  Apply gain, offset, and angle calibration
	for (i=0;i<n_points;i++){
   175ca:	1dfb      	adds	r3, r7, #7
   175cc:	2200      	movs	r2, #0
   175ce:	701a      	strb	r2, [r3, #0]
   175d0:	e08b      	b.n	176ea <fn_process_calibration+0x742>
   175d2:	46c0      	nop			; (mov r8, r8)
   175d4:	200049dc 	.word	0x200049dc
   175d8:	20003440 	.word	0x20003440
   175dc:	2000497c 	.word	0x2000497c
   175e0:	0000bfe9 	.word	0x0000bfe9
   175e4:	20003b90 	.word	0x20003b90
   175e8:	200045b8 	.word	0x200045b8
   175ec:	20004558 	.word	0x20004558
   175f0:	20001a2c 	.word	0x20001a2c
   175f4:	20002210 	.word	0x20002210
   175f8:	20002e78 	.word	0x20002e78
   175fc:	20001e50 	.word	0x20001e50
   17600:	20003078 	.word	0x20003078
   17604:	20001df0 	.word	0x20001df0
   17608:	200027f8 	.word	0x200027f8
   1760c:	000125a5 	.word	0x000125a5
   17610:	20002f78 	.word	0x20002f78
   17614:	00026068 	.word	0x00026068
   17618:	00020fa5 	.word	0x00020fa5
   1761c:	00013691 	.word	0x00013691
   17620:	0002607c 	.word	0x0002607c
   17624:	00026114 	.word	0x00026114
   17628:	00012de9 	.word	0x00012de9
   1762c:	0002612c 	.word	0x0002612c
   17630:	000210bd 	.word	0x000210bd
   17634:	0000b1fd 	.word	0x0000b1fd
   17638:	00026144 	.word	0x00026144
   1763c:	0000af19 	.word	0x0000af19
		cal_apply_cal(a1raw[i], a1cal[i], &a1_calst);
   17640:	1dfb      	adds	r3, r7, #7
   17642:	781a      	ldrb	r2, [r3, #0]
   17644:	0013      	movs	r3, r2
   17646:	005b      	lsls	r3, r3, #1
   17648:	189b      	adds	r3, r3, r2
   1764a:	009b      	lsls	r3, r3, #2
   1764c:	4a53      	ldr	r2, [pc, #332]	; (1779c <fn_process_calibration+0x7f4>)
   1764e:	1898      	adds	r0, r3, r2
   17650:	1dfb      	adds	r3, r7, #7
   17652:	781a      	ldrb	r2, [r3, #0]
   17654:	0013      	movs	r3, r2
   17656:	005b      	lsls	r3, r3, #1
   17658:	189b      	adds	r3, r3, r2
   1765a:	009b      	lsls	r3, r3, #2
   1765c:	4a50      	ldr	r2, [pc, #320]	; (177a0 <fn_process_calibration+0x7f8>)
   1765e:	189b      	adds	r3, r3, r2
   17660:	4a50      	ldr	r2, [pc, #320]	; (177a4 <fn_process_calibration+0x7fc>)
   17662:	0019      	movs	r1, r3
   17664:	4b50      	ldr	r3, [pc, #320]	; (177a8 <fn_process_calibration+0x800>)
   17666:	4798      	blx	r3
		cal_apply_cal(a2raw[i], a2cal[i], &a2_calst);
   17668:	1dfb      	adds	r3, r7, #7
   1766a:	781a      	ldrb	r2, [r3, #0]
   1766c:	0013      	movs	r3, r2
   1766e:	005b      	lsls	r3, r3, #1
   17670:	189b      	adds	r3, r3, r2
   17672:	009b      	lsls	r3, r3, #2
   17674:	4a4d      	ldr	r2, [pc, #308]	; (177ac <fn_process_calibration+0x804>)
   17676:	1898      	adds	r0, r3, r2
   17678:	1dfb      	adds	r3, r7, #7
   1767a:	781a      	ldrb	r2, [r3, #0]
   1767c:	0013      	movs	r3, r2
   1767e:	005b      	lsls	r3, r3, #1
   17680:	189b      	adds	r3, r3, r2
   17682:	009b      	lsls	r3, r3, #2
   17684:	4a4a      	ldr	r2, [pc, #296]	; (177b0 <fn_process_calibration+0x808>)
   17686:	189b      	adds	r3, r3, r2
   17688:	4a4a      	ldr	r2, [pc, #296]	; (177b4 <fn_process_calibration+0x80c>)
   1768a:	0019      	movs	r1, r3
   1768c:	4b46      	ldr	r3, [pc, #280]	; (177a8 <fn_process_calibration+0x800>)
   1768e:	4798      	blx	r3
		cal_apply_cal(c1raw[i], c1cal[i], &c1_calst);
   17690:	1dfb      	adds	r3, r7, #7
   17692:	781a      	ldrb	r2, [r3, #0]
   17694:	0013      	movs	r3, r2
   17696:	005b      	lsls	r3, r3, #1
   17698:	189b      	adds	r3, r3, r2
   1769a:	009b      	lsls	r3, r3, #2
   1769c:	4a46      	ldr	r2, [pc, #280]	; (177b8 <fn_process_calibration+0x810>)
   1769e:	1898      	adds	r0, r3, r2
   176a0:	1dfb      	adds	r3, r7, #7
   176a2:	781a      	ldrb	r2, [r3, #0]
   176a4:	0013      	movs	r3, r2
   176a6:	005b      	lsls	r3, r3, #1
   176a8:	189b      	adds	r3, r3, r2
   176aa:	009b      	lsls	r3, r3, #2
   176ac:	4a43      	ldr	r2, [pc, #268]	; (177bc <fn_process_calibration+0x814>)
   176ae:	189b      	adds	r3, r3, r2
   176b0:	4a43      	ldr	r2, [pc, #268]	; (177c0 <fn_process_calibration+0x818>)
   176b2:	0019      	movs	r1, r3
   176b4:	4b3c      	ldr	r3, [pc, #240]	; (177a8 <fn_process_calibration+0x800>)
   176b6:	4798      	blx	r3
		cal_apply_cal(c2raw[i], c2cal[i], &c2_calst);
   176b8:	1dfb      	adds	r3, r7, #7
   176ba:	781a      	ldrb	r2, [r3, #0]
   176bc:	0013      	movs	r3, r2
   176be:	005b      	lsls	r3, r3, #1
   176c0:	189b      	adds	r3, r3, r2
   176c2:	009b      	lsls	r3, r3, #2
   176c4:	4a3f      	ldr	r2, [pc, #252]	; (177c4 <fn_process_calibration+0x81c>)
   176c6:	1898      	adds	r0, r3, r2
   176c8:	1dfb      	adds	r3, r7, #7
   176ca:	781a      	ldrb	r2, [r3, #0]
   176cc:	0013      	movs	r3, r2
   176ce:	005b      	lsls	r3, r3, #1
   176d0:	189b      	adds	r3, r3, r2
   176d2:	009b      	lsls	r3, r3, #2
   176d4:	4a3c      	ldr	r2, [pc, #240]	; (177c8 <fn_process_calibration+0x820>)
   176d6:	189b      	adds	r3, r3, r2
   176d8:	4a3c      	ldr	r2, [pc, #240]	; (177cc <fn_process_calibration+0x824>)
   176da:	0019      	movs	r1, r3
   176dc:	4b32      	ldr	r3, [pc, #200]	; (177a8 <fn_process_calibration+0x800>)
   176de:	4798      	blx	r3
	for (i=0;i<n_points;i++){
   176e0:	1dfb      	adds	r3, r7, #7
   176e2:	781a      	ldrb	r2, [r3, #0]
   176e4:	1dfb      	adds	r3, r7, #7
   176e6:	3201      	adds	r2, #1
   176e8:	701a      	strb	r2, [r3, #0]
   176ea:	1dfb      	adds	r3, r7, #7
   176ec:	781a      	ldrb	r2, [r3, #0]
   176ee:	4b38      	ldr	r3, [pc, #224]	; (177d0 <fn_process_calibration+0x828>)
   176f0:	681b      	ldr	r3, [r3, #0]
   176f2:	429a      	cmp	r2, r3
   176f4:	d3a4      	bcc.n	17640 <fn_process_calibration+0x698>
	}
	
	
	//  Evaluate performance of calibration
	glcd_clear_buffer();
   176f6:	4b37      	ldr	r3, [pc, #220]	; (177d4 <fn_process_calibration+0x82c>)
   176f8:	4798      	blx	r3
	sprintf(display_str, "Processing Data...");
   176fa:	4a37      	ldr	r2, [pc, #220]	; (177d8 <fn_process_calibration+0x830>)
   176fc:	4b37      	ldr	r3, [pc, #220]	; (177dc <fn_process_calibration+0x834>)
   176fe:	0010      	movs	r0, r2
   17700:	0019      	movs	r1, r3
   17702:	2313      	movs	r3, #19
   17704:	001a      	movs	r2, r3
   17706:	4b36      	ldr	r3, [pc, #216]	; (177e0 <fn_process_calibration+0x838>)
   17708:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   1770a:	4b33      	ldr	r3, [pc, #204]	; (177d8 <fn_process_calibration+0x830>)
   1770c:	001a      	movs	r2, r3
   1770e:	2100      	movs	r1, #0
   17710:	2000      	movs	r0, #0
   17712:	4b34      	ldr	r3, [pc, #208]	; (177e4 <fn_process_calibration+0x83c>)
   17714:	4798      	blx	r3
	sprintf(display_str, "Evaluating Results   ");
   17716:	4a30      	ldr	r2, [pc, #192]	; (177d8 <fn_process_calibration+0x830>)
   17718:	4b33      	ldr	r3, [pc, #204]	; (177e8 <fn_process_calibration+0x840>)
   1771a:	0010      	movs	r0, r2
   1771c:	0019      	movs	r1, r3
   1771e:	2316      	movs	r3, #22
   17720:	001a      	movs	r2, r3
   17722:	4b2f      	ldr	r3, [pc, #188]	; (177e0 <fn_process_calibration+0x838>)
   17724:	4798      	blx	r3
	glcd_tiny_draw_string(0,2,display_str);
   17726:	4b2c      	ldr	r3, [pc, #176]	; (177d8 <fn_process_calibration+0x830>)
   17728:	001a      	movs	r2, r3
   1772a:	2102      	movs	r1, #2
   1772c:	2000      	movs	r0, #0
   1772e:	4b2d      	ldr	r3, [pc, #180]	; (177e4 <fn_process_calibration+0x83c>)
   17730:	4798      	blx	r3
	glcd_write();
   17732:	4b2e      	ldr	r3, [pc, #184]	; (177ec <fn_process_calibration+0x844>)
   17734:	4798      	blx	r3
	cal_evaluate();	
   17736:	4b2e      	ldr	r3, [pc, #184]	; (177f0 <fn_process_calibration+0x848>)
   17738:	4798      	blx	r3
	//  Write report
	sprintf(display_str, "Writing Report       ");
   1773a:	4a27      	ldr	r2, [pc, #156]	; (177d8 <fn_process_calibration+0x830>)
   1773c:	4b2d      	ldr	r3, [pc, #180]	; (177f4 <fn_process_calibration+0x84c>)
   1773e:	0010      	movs	r0, r2
   17740:	0019      	movs	r1, r3
   17742:	2316      	movs	r3, #22
   17744:	001a      	movs	r2, r3
   17746:	4b26      	ldr	r3, [pc, #152]	; (177e0 <fn_process_calibration+0x838>)
   17748:	4798      	blx	r3
	glcd_tiny_draw_string(0,2,display_str);
   1774a:	4b23      	ldr	r3, [pc, #140]	; (177d8 <fn_process_calibration+0x830>)
   1774c:	001a      	movs	r2, r3
   1774e:	2102      	movs	r1, #2
   17750:	2000      	movs	r0, #0
   17752:	4b24      	ldr	r3, [pc, #144]	; (177e4 <fn_process_calibration+0x83c>)
   17754:	4798      	blx	r3
	glcd_write();	
   17756:	4b25      	ldr	r3, [pc, #148]	; (177ec <fn_process_calibration+0x844>)
   17758:	4798      	blx	r3
	cal_write_report();
   1775a:	4b27      	ldr	r3, [pc, #156]	; (177f8 <fn_process_calibration+0x850>)
   1775c:	4798      	blx	r3
	//  Save data to EEPROM
	save_calibration();
   1775e:	4b27      	ldr	r3, [pc, #156]	; (177fc <fn_process_calibration+0x854>)
   17760:	4798      	blx	r3
	// Calibration Complete
	sprintf(display_str, "Calibration Complete!");
   17762:	4a1d      	ldr	r2, [pc, #116]	; (177d8 <fn_process_calibration+0x830>)
   17764:	4b26      	ldr	r3, [pc, #152]	; (17800 <fn_process_calibration+0x858>)
   17766:	0010      	movs	r0, r2
   17768:	0019      	movs	r1, r3
   1776a:	2316      	movs	r3, #22
   1776c:	001a      	movs	r2, r3
   1776e:	4b1c      	ldr	r3, [pc, #112]	; (177e0 <fn_process_calibration+0x838>)
   17770:	4798      	blx	r3
	glcd_tiny_draw_string(0,2,display_str);
   17772:	4b19      	ldr	r3, [pc, #100]	; (177d8 <fn_process_calibration+0x830>)
   17774:	001a      	movs	r2, r3
   17776:	2102      	movs	r1, #2
   17778:	2000      	movs	r0, #0
   1777a:	4b1a      	ldr	r3, [pc, #104]	; (177e4 <fn_process_calibration+0x83c>)
   1777c:	4798      	blx	r3
	glcd_write();
   1777e:	4b1b      	ldr	r3, [pc, #108]	; (177ec <fn_process_calibration+0x844>)
   17780:	4798      	blx	r3
	delay_s(3);
   17782:	4b20      	ldr	r3, [pc, #128]	; (17804 <fn_process_calibration+0x85c>)
   17784:	0018      	movs	r0, r3
   17786:	4b20      	ldr	r3, [pc, #128]	; (17808 <fn_process_calibration+0x860>)
   17788:	4798      	blx	r3
	
	// Re-Enable Watchdog Timer
	wdt_enable();
   1778a:	4b20      	ldr	r3, [pc, #128]	; (1780c <fn_process_calibration+0x864>)
   1778c:	4798      	blx	r3
	
	current_input = input_state_complete;
   1778e:	4b20      	ldr	r3, [pc, #128]	; (17810 <fn_process_calibration+0x868>)
   17790:	2208      	movs	r2, #8
   17792:	701a      	strb	r2, [r3, #0]
}
   17794:	46c0      	nop			; (mov r8, r8)
   17796:	46bd      	mov	sp, r7
   17798:	b002      	add	sp, #8
   1779a:	bd80      	pop	{r7, pc}
   1779c:	200049dc 	.word	0x200049dc
   177a0:	20003440 	.word	0x20003440
   177a4:	2000497c 	.word	0x2000497c
   177a8:	0000bfe9 	.word	0x0000bfe9
   177ac:	20003b90 	.word	0x20003b90
   177b0:	200045b8 	.word	0x200045b8
   177b4:	20004558 	.word	0x20004558
   177b8:	20001a2c 	.word	0x20001a2c
   177bc:	20002210 	.word	0x20002210
   177c0:	20002e78 	.word	0x20002e78
   177c4:	20001e50 	.word	0x20001e50
   177c8:	20003078 	.word	0x20003078
   177cc:	20001df0 	.word	0x20001df0
   177d0:	200027f8 	.word	0x200027f8
   177d4:	000125a5 	.word	0x000125a5
   177d8:	20002f78 	.word	0x20002f78
   177dc:	00026068 	.word	0x00026068
   177e0:	00020fa5 	.word	0x00020fa5
   177e4:	00013691 	.word	0x00013691
   177e8:	00026158 	.word	0x00026158
   177ec:	00012de9 	.word	0x00012de9
   177f0:	0000937d 	.word	0x0000937d
   177f4:	00026170 	.word	0x00026170
   177f8:	00007609 	.word	0x00007609
   177fc:	00001c85 	.word	0x00001c85
   17800:	00026188 	.word	0x00026188
   17804:	00000bb8 	.word	0x00000bb8
   17808:	00015545 	.word	0x00015545
   1780c:	00003f99 	.word	0x00003f99
   17810:	20003b78 	.word	0x20003b78

00017814 <fn_acc_comp_calibration>:


void fn_acc_comp_calibration(void){
   17814:	b590      	push	{r4, r7, lr}
   17816:	b0ad      	sub	sp, #180	; 0xb4
   17818:	af02      	add	r7, sp, #8
	struct MEASUREMENT temp_meas;
	
	//uint32_t timer_count;
	uint8_t disp_groups;
	// disp_groups is actual number of groups complete including last one not processed
	if (buf_points>= group_size){disp_groups = n_groups+1;}
   1781a:	4b6b      	ldr	r3, [pc, #428]	; (179c8 <fn_acc_comp_calibration+0x1b4>)
   1781c:	781b      	ldrb	r3, [r3, #0]
   1781e:	2b03      	cmp	r3, #3
   17820:	d907      	bls.n	17832 <fn_acc_comp_calibration+0x1e>
   17822:	4b6a      	ldr	r3, [pc, #424]	; (179cc <fn_acc_comp_calibration+0x1b8>)
   17824:	681b      	ldr	r3, [r3, #0]
   17826:	b2da      	uxtb	r2, r3
   17828:	23a7      	movs	r3, #167	; 0xa7
   1782a:	18fb      	adds	r3, r7, r3
   1782c:	3201      	adds	r2, #1
   1782e:	701a      	strb	r2, [r3, #0]
   17830:	e004      	b.n	1783c <fn_acc_comp_calibration+0x28>
	else{disp_groups = n_groups;}
   17832:	4b66      	ldr	r3, [pc, #408]	; (179cc <fn_acc_comp_calibration+0x1b8>)
   17834:	681a      	ldr	r2, [r3, #0]
   17836:	23a7      	movs	r3, #167	; 0xa7
   17838:	18fb      	adds	r3, r7, r3
   1783a:	701a      	strb	r2, [r3, #0]
	
	
	if (state_change){
   1783c:	4b64      	ldr	r3, [pc, #400]	; (179d0 <fn_acc_comp_calibration+0x1bc>)
   1783e:	781b      	ldrb	r3, [r3, #0]
   17840:	b2db      	uxtb	r3, r3
   17842:	2b00      	cmp	r3, #0
   17844:	d016      	beq.n	17874 <fn_acc_comp_calibration+0x60>
		cal_disp_message();
   17846:	4b63      	ldr	r3, [pc, #396]	; (179d4 <fn_acc_comp_calibration+0x1c0>)
   17848:	4798      	blx	r3
		//  Set up initial settings
		n_groups = 0;
   1784a:	4b60      	ldr	r3, [pc, #384]	; (179cc <fn_acc_comp_calibration+0x1b8>)
   1784c:	2200      	movs	r2, #0
   1784e:	601a      	str	r2, [r3, #0]
		n_points = 0;
   17850:	4b61      	ldr	r3, [pc, #388]	; (179d8 <fn_acc_comp_calibration+0x1c4>)
   17852:	2200      	movs	r2, #0
   17854:	601a      	str	r2, [r3, #0]
		ind_stack = 0;
   17856:	4b61      	ldr	r3, [pc, #388]	; (179dc <fn_acc_comp_calibration+0x1c8>)
   17858:	2200      	movs	r2, #0
   1785a:	701a      	strb	r2, [r3, #0]
		ind_buf = 0;
   1785c:	4b60      	ldr	r3, [pc, #384]	; (179e0 <fn_acc_comp_calibration+0x1cc>)
   1785e:	2200      	movs	r2, #0
   17860:	701a      	strb	r2, [r3, #0]
		buf_points = 0;
   17862:	4b59      	ldr	r3, [pc, #356]	; (179c8 <fn_acc_comp_calibration+0x1b4>)
   17864:	2200      	movs	r2, #0
   17866:	701a      	strb	r2, [r3, #0]
		laser_triggered =  false;
   17868:	4b5e      	ldr	r3, [pc, #376]	; (179e4 <fn_acc_comp_calibration+0x1d0>)
   1786a:	2200      	movs	r2, #0
   1786c:	701a      	strb	r2, [r3, #0]
		last_input = input_none;
   1786e:	4b5e      	ldr	r3, [pc, #376]	; (179e8 <fn_acc_comp_calibration+0x1d4>)
   17870:	2200      	movs	r2, #0
   17872:	701a      	strb	r2, [r3, #0]
		
	}
	
	// Button Handler
	switch(last_input){
   17874:	4b5c      	ldr	r3, [pc, #368]	; (179e8 <fn_acc_comp_calibration+0x1d4>)
   17876:	781b      	ldrb	r3, [r3, #0]
   17878:	b2db      	uxtb	r3, r3
   1787a:	2b04      	cmp	r3, #4
   1787c:	d033      	beq.n	178e6 <fn_acc_comp_calibration+0xd2>
   1787e:	2b05      	cmp	r3, #5
   17880:	d014      	beq.n	178ac <fn_acc_comp_calibration+0x98>
   17882:	2b01      	cmp	r3, #1
   17884:	d000      	beq.n	17888 <fn_acc_comp_calibration+0x74>
		case input_button4:
			// Handled by state machine
			//  Exit from routine
			break;
		default:
			break;
   17886:	e031      	b.n	178ec <fn_acc_comp_calibration+0xd8>
			if (disp_groups>=min_groups){//  Requires min_groups to complete
   17888:	2209      	movs	r2, #9
   1788a:	23a7      	movs	r3, #167	; 0xa7
   1788c:	18fb      	adds	r3, r7, r3
   1788e:	781b      	ldrb	r3, [r3, #0]
   17890:	4293      	cmp	r3, r2
   17892:	d32a      	bcc.n	178ea <fn_acc_comp_calibration+0xd6>
				rangefinder_on_off(false);
   17894:	2000      	movs	r0, #0
   17896:	4b55      	ldr	r3, [pc, #340]	; (179ec <fn_acc_comp_calibration+0x1d8>)
   17898:	4798      	blx	r3
				cal_add_datapoint(&temp_meas, true);
   1789a:	003b      	movs	r3, r7
   1789c:	2101      	movs	r1, #1
   1789e:	0018      	movs	r0, r3
   178a0:	4b53      	ldr	r3, [pc, #332]	; (179f0 <fn_acc_comp_calibration+0x1dc>)
   178a2:	4798      	blx	r3
				current_input = input_state_complete;
   178a4:	4b53      	ldr	r3, [pc, #332]	; (179f4 <fn_acc_comp_calibration+0x1e0>)
   178a6:	2208      	movs	r2, #8
   178a8:	701a      	strb	r2, [r3, #0]
			break;
   178aa:	e01e      	b.n	178ea <fn_acc_comp_calibration+0xd6>
			if (!laser_triggered){
   178ac:	4b4d      	ldr	r3, [pc, #308]	; (179e4 <fn_acc_comp_calibration+0x1d0>)
   178ae:	781b      	ldrb	r3, [r3, #0]
   178b0:	b2db      	uxtb	r3, r3
   178b2:	2201      	movs	r2, #1
   178b4:	4053      	eors	r3, r2
   178b6:	b2db      	uxtb	r3, r3
   178b8:	2b00      	cmp	r3, #0
   178ba:	d006      	beq.n	178ca <fn_acc_comp_calibration+0xb6>
				rangefinder_on_off(true);
   178bc:	2001      	movs	r0, #1
   178be:	4b4b      	ldr	r3, [pc, #300]	; (179ec <fn_acc_comp_calibration+0x1d8>)
   178c0:	4798      	blx	r3
				laser_on_off(true);
   178c2:	2001      	movs	r0, #1
   178c4:	4b4c      	ldr	r3, [pc, #304]	; (179f8 <fn_acc_comp_calibration+0x1e4>)
   178c6:	4798      	blx	r3
			break;
   178c8:	e010      	b.n	178ec <fn_acc_comp_calibration+0xd8>
				full_measurement(&temp_meas, false);
   178ca:	003b      	movs	r3, r7
   178cc:	2100      	movs	r1, #0
   178ce:	0018      	movs	r0, r3
   178d0:	4b4a      	ldr	r3, [pc, #296]	; (179fc <fn_acc_comp_calibration+0x1e8>)
   178d2:	4798      	blx	r3
				rangefinder_on_off(false);
   178d4:	2000      	movs	r0, #0
   178d6:	4b45      	ldr	r3, [pc, #276]	; (179ec <fn_acc_comp_calibration+0x1d8>)
   178d8:	4798      	blx	r3
				cal_add_datapoint(&temp_meas, false);
   178da:	003b      	movs	r3, r7
   178dc:	2100      	movs	r1, #0
   178de:	0018      	movs	r0, r3
   178e0:	4b43      	ldr	r3, [pc, #268]	; (179f0 <fn_acc_comp_calibration+0x1dc>)
   178e2:	4798      	blx	r3
			break;
   178e4:	e002      	b.n	178ec <fn_acc_comp_calibration+0xd8>
			break;
   178e6:	46c0      	nop			; (mov r8, r8)
   178e8:	e000      	b.n	178ec <fn_acc_comp_calibration+0xd8>
			break;
   178ea:	46c0      	nop			; (mov r8, r8)
	}
	last_input = input_none;	
   178ec:	4b3e      	ldr	r3, [pc, #248]	; (179e8 <fn_acc_comp_calibration+0x1d4>)
   178ee:	2200      	movs	r2, #0
   178f0:	701a      	strb	r2, [r3, #0]
	
	glcd_tiny_set_font(Font5x7,5,7,32,127);
   178f2:	4843      	ldr	r0, [pc, #268]	; (17a00 <fn_acc_comp_calibration+0x1ec>)
   178f4:	237f      	movs	r3, #127	; 0x7f
   178f6:	9300      	str	r3, [sp, #0]
   178f8:	2320      	movs	r3, #32
   178fa:	2207      	movs	r2, #7
   178fc:	2105      	movs	r1, #5
   178fe:	4c41      	ldr	r4, [pc, #260]	; (17a04 <fn_acc_comp_calibration+0x1f0>)
   17900:	47a0      	blx	r4
	glcd_clear_buffer();
   17902:	4b41      	ldr	r3, [pc, #260]	; (17a08 <fn_acc_comp_calibration+0x1f4>)
   17904:	4798      	blx	r3
	
	// Display Header
	sprintf(display_str, "Calibration Mode");
   17906:	4a41      	ldr	r2, [pc, #260]	; (17a0c <fn_acc_comp_calibration+0x1f8>)
   17908:	4b41      	ldr	r3, [pc, #260]	; (17a10 <fn_acc_comp_calibration+0x1fc>)
   1790a:	0010      	movs	r0, r2
   1790c:	0019      	movs	r1, r3
   1790e:	2311      	movs	r3, #17
   17910:	001a      	movs	r2, r3
   17912:	4b40      	ldr	r3, [pc, #256]	; (17a14 <fn_acc_comp_calibration+0x200>)
   17914:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   17916:	4b3d      	ldr	r3, [pc, #244]	; (17a0c <fn_acc_comp_calibration+0x1f8>)
   17918:	001a      	movs	r2, r3
   1791a:	2100      	movs	r1, #0
   1791c:	2000      	movs	r0, #0
   1791e:	4b3e      	ldr	r3, [pc, #248]	; (17a18 <fn_acc_comp_calibration+0x204>)
   17920:	4798      	blx	r3
	
	// Display Current Data
	sprintf(display_str, "Current Group: %d", (n_groups+1));
   17922:	4b2a      	ldr	r3, [pc, #168]	; (179cc <fn_acc_comp_calibration+0x1b8>)
   17924:	681b      	ldr	r3, [r3, #0]
   17926:	1c5a      	adds	r2, r3, #1
   17928:	493c      	ldr	r1, [pc, #240]	; (17a1c <fn_acc_comp_calibration+0x208>)
   1792a:	4b38      	ldr	r3, [pc, #224]	; (17a0c <fn_acc_comp_calibration+0x1f8>)
   1792c:	0018      	movs	r0, r3
   1792e:	4b3c      	ldr	r3, [pc, #240]	; (17a20 <fn_acc_comp_calibration+0x20c>)
   17930:	4798      	blx	r3
	glcd_tiny_draw_string(0,2,display_str);
   17932:	4b36      	ldr	r3, [pc, #216]	; (17a0c <fn_acc_comp_calibration+0x1f8>)
   17934:	001a      	movs	r2, r3
   17936:	2102      	movs	r1, #2
   17938:	2000      	movs	r0, #0
   1793a:	4b37      	ldr	r3, [pc, #220]	; (17a18 <fn_acc_comp_calibration+0x204>)
   1793c:	4798      	blx	r3
	sprintf(display_str, "Status: %d of 4", buf_points );
   1793e:	4b22      	ldr	r3, [pc, #136]	; (179c8 <fn_acc_comp_calibration+0x1b4>)
   17940:	781b      	ldrb	r3, [r3, #0]
   17942:	001a      	movs	r2, r3
   17944:	4937      	ldr	r1, [pc, #220]	; (17a24 <fn_acc_comp_calibration+0x210>)
   17946:	4b31      	ldr	r3, [pc, #196]	; (17a0c <fn_acc_comp_calibration+0x1f8>)
   17948:	0018      	movs	r0, r3
   1794a:	4b35      	ldr	r3, [pc, #212]	; (17a20 <fn_acc_comp_calibration+0x20c>)
   1794c:	4798      	blx	r3
	glcd_tiny_draw_string(0,3,display_str);
   1794e:	4b2f      	ldr	r3, [pc, #188]	; (17a0c <fn_acc_comp_calibration+0x1f8>)
   17950:	001a      	movs	r2, r3
   17952:	2103      	movs	r1, #3
   17954:	2000      	movs	r0, #0
   17956:	4b30      	ldr	r3, [pc, #192]	; (17a18 <fn_acc_comp_calibration+0x204>)
   17958:	4798      	blx	r3
	sprintf(display_str, "Complete Groups: %d", disp_groups );
   1795a:	23a7      	movs	r3, #167	; 0xa7
   1795c:	18fb      	adds	r3, r7, r3
   1795e:	781a      	ldrb	r2, [r3, #0]
   17960:	4931      	ldr	r1, [pc, #196]	; (17a28 <fn_acc_comp_calibration+0x214>)
   17962:	4b2a      	ldr	r3, [pc, #168]	; (17a0c <fn_acc_comp_calibration+0x1f8>)
   17964:	0018      	movs	r0, r3
   17966:	4b2e      	ldr	r3, [pc, #184]	; (17a20 <fn_acc_comp_calibration+0x20c>)
   17968:	4798      	blx	r3
	glcd_tiny_draw_string(0,5,display_str);
   1796a:	4b28      	ldr	r3, [pc, #160]	; (17a0c <fn_acc_comp_calibration+0x1f8>)
   1796c:	001a      	movs	r2, r3
   1796e:	2105      	movs	r1, #5
   17970:	2000      	movs	r0, #0
   17972:	4b29      	ldr	r3, [pc, #164]	; (17a18 <fn_acc_comp_calibration+0x204>)
   17974:	4798      	blx	r3
	
	
	// Display Soft Keys
	//if (n_groups >= 2){
	if (disp_groups >= min_groups){
   17976:	2209      	movs	r2, #9
   17978:	23a7      	movs	r3, #167	; 0xa7
   1797a:	18fb      	adds	r3, r7, r3
   1797c:	781b      	ldrb	r3, [r3, #0]
   1797e:	4293      	cmp	r3, r2
   17980:	d30d      	bcc.n	1799e <fn_acc_comp_calibration+0x18a>
		sprintf(display_str, "Done");
   17982:	4a22      	ldr	r2, [pc, #136]	; (17a0c <fn_acc_comp_calibration+0x1f8>)
   17984:	4b29      	ldr	r3, [pc, #164]	; (17a2c <fn_acc_comp_calibration+0x218>)
   17986:	0010      	movs	r0, r2
   17988:	0019      	movs	r1, r3
   1798a:	2305      	movs	r3, #5
   1798c:	001a      	movs	r2, r3
   1798e:	4b21      	ldr	r3, [pc, #132]	; (17a14 <fn_acc_comp_calibration+0x200>)
   17990:	4798      	blx	r3
		glcd_tiny_draw_string(100,0,display_str);
   17992:	4b1e      	ldr	r3, [pc, #120]	; (17a0c <fn_acc_comp_calibration+0x1f8>)
   17994:	001a      	movs	r2, r3
   17996:	2100      	movs	r1, #0
   17998:	2064      	movs	r0, #100	; 0x64
   1799a:	4b1f      	ldr	r3, [pc, #124]	; (17a18 <fn_acc_comp_calibration+0x204>)
   1799c:	4798      	blx	r3
	}
	sprintf(display_str, "Abort");
   1799e:	4a1b      	ldr	r2, [pc, #108]	; (17a0c <fn_acc_comp_calibration+0x1f8>)
   179a0:	4b23      	ldr	r3, [pc, #140]	; (17a30 <fn_acc_comp_calibration+0x21c>)
   179a2:	0010      	movs	r0, r2
   179a4:	0019      	movs	r1, r3
   179a6:	2306      	movs	r3, #6
   179a8:	001a      	movs	r2, r3
   179aa:	4b1a      	ldr	r3, [pc, #104]	; (17a14 <fn_acc_comp_calibration+0x200>)
   179ac:	4798      	blx	r3
	glcd_tiny_draw_string(97,7,display_str);
   179ae:	4b17      	ldr	r3, [pc, #92]	; (17a0c <fn_acc_comp_calibration+0x1f8>)
   179b0:	001a      	movs	r2, r3
   179b2:	2107      	movs	r1, #7
   179b4:	2061      	movs	r0, #97	; 0x61
   179b6:	4b18      	ldr	r3, [pc, #96]	; (17a18 <fn_acc_comp_calibration+0x204>)
   179b8:	4798      	blx	r3
	

	
	glcd_write();
   179ba:	4b1e      	ldr	r3, [pc, #120]	; (17a34 <fn_acc_comp_calibration+0x220>)
   179bc:	4798      	blx	r3
	
	
}
   179be:	46c0      	nop			; (mov r8, r8)
   179c0:	46bd      	mov	sp, r7
   179c2:	b02b      	add	sp, #172	; 0xac
   179c4:	bd90      	pop	{r4, r7, pc}
   179c6:	46c0      	nop			; (mov r8, r8)
   179c8:	200018e0 	.word	0x200018e0
   179cc:	200018e4 	.word	0x200018e4
   179d0:	20000110 	.word	0x20000110
   179d4:	00018255 	.word	0x00018255
   179d8:	200027f8 	.word	0x200027f8
   179dc:	20001a28 	.word	0x20001a28
   179e0:	2000343c 	.word	0x2000343c
   179e4:	20001dec 	.word	0x20001dec
   179e8:	20003b7a 	.word	0x20003b7a
   179ec:	00002a81 	.word	0x00002a81
   179f0:	00009a0d 	.word	0x00009a0d
   179f4:	20003b78 	.word	0x20003b78
   179f8:	00002ac9 	.word	0x00002ac9
   179fc:	00002231 	.word	0x00002231
   17a00:	00025dd0 	.word	0x00025dd0
   17a04:	00013505 	.word	0x00013505
   17a08:	000125a5 	.word	0x000125a5
   17a0c:	20002f78 	.word	0x20002f78
   17a10:	000261a0 	.word	0x000261a0
   17a14:	00020fa5 	.word	0x00020fa5
   17a18:	00013691 	.word	0x00013691
   17a1c:	000261b4 	.word	0x000261b4
   17a20:	000210bd 	.word	0x000210bd
   17a24:	000261c8 	.word	0x000261c8
   17a28:	000261d8 	.word	0x000261d8
   17a2c:	000261ec 	.word	0x000261ec
   17a30:	000261f4 	.word	0x000261f4
   17a34:	00012de9 	.word	0x00012de9

00017a38 <fn_loop_test>:

void fn_loop_test(void){
   17a38:	b590      	push	{r4, r7, lr}
   17a3a:	b0ad      	sub	sp, #180	; 0xb4
   17a3c:	af02      	add	r7, sp, #8
	struct MEASUREMENT temp_meas;
	//uint32_t timer_count;
	uint8_t i;
	
	if (state_change){
   17a3e:	4bbf      	ldr	r3, [pc, #764]	; (17d3c <fn_loop_test+0x304>)
   17a40:	781b      	ldrb	r3, [r3, #0]
   17a42:	b2db      	uxtb	r3, r3
   17a44:	2b00      	cmp	r3, #0
   17a46:	d03c      	beq.n	17ac2 <fn_loop_test+0x8a>
		cal_disp_message();
   17a48:	4bbd      	ldr	r3, [pc, #756]	; (17d40 <fn_loop_test+0x308>)
   17a4a:	4798      	blx	r3
		//  Set up initial settings
		n_points = 0;
   17a4c:	4bbd      	ldr	r3, [pc, #756]	; (17d44 <fn_loop_test+0x30c>)
   17a4e:	2200      	movs	r2, #0
   17a50:	601a      	str	r2, [r3, #0]
		loop_distance = 0;
   17a52:	4bbd      	ldr	r3, [pc, #756]	; (17d48 <fn_loop_test+0x310>)
   17a54:	2200      	movs	r2, #0
   17a56:	601a      	str	r2, [r3, #0]
		loop_horizontal = 0;
   17a58:	4bbc      	ldr	r3, [pc, #752]	; (17d4c <fn_loop_test+0x314>)
   17a5a:	2200      	movs	r2, #0
   17a5c:	601a      	str	r2, [r3, #0]
		loop_vertical = 0;
   17a5e:	4bbc      	ldr	r3, [pc, #752]	; (17d50 <fn_loop_test+0x318>)
   17a60:	2200      	movs	r2, #0
   17a62:	601a      	str	r2, [r3, #0]
		loop_azimuth = 0;
   17a64:	4bbb      	ldr	r3, [pc, #748]	; (17d54 <fn_loop_test+0x31c>)
   17a66:	2200      	movs	r2, #0
   17a68:	601a      	str	r2, [r3, #0]
		for (i=0;i<nbuf;i++){
   17a6a:	23a7      	movs	r3, #167	; 0xa7
   17a6c:	18fb      	adds	r3, r7, r3
   17a6e:	2200      	movs	r2, #0
   17a70:	701a      	strb	r2, [r3, #0]
   17a72:	e01b      	b.n	17aac <fn_loop_test+0x74>
			azimuth[i]=0;
   17a74:	23a7      	movs	r3, #167	; 0xa7
   17a76:	18fb      	adds	r3, r7, r3
   17a78:	781a      	ldrb	r2, [r3, #0]
   17a7a:	4bb7      	ldr	r3, [pc, #732]	; (17d58 <fn_loop_test+0x320>)
   17a7c:	0092      	lsls	r2, r2, #2
   17a7e:	2100      	movs	r1, #0
   17a80:	50d1      	str	r1, [r2, r3]
			inclination[i]=0;
   17a82:	23a7      	movs	r3, #167	; 0xa7
   17a84:	18fb      	adds	r3, r7, r3
   17a86:	781a      	ldrb	r2, [r3, #0]
   17a88:	4bb4      	ldr	r3, [pc, #720]	; (17d5c <fn_loop_test+0x324>)
   17a8a:	0092      	lsls	r2, r2, #2
   17a8c:	2100      	movs	r1, #0
   17a8e:	50d1      	str	r1, [r2, r3]
			roll[i] = 0;
   17a90:	23a7      	movs	r3, #167	; 0xa7
   17a92:	18fb      	adds	r3, r7, r3
   17a94:	781a      	ldrb	r2, [r3, #0]
   17a96:	4bb2      	ldr	r3, [pc, #712]	; (17d60 <fn_loop_test+0x328>)
   17a98:	0092      	lsls	r2, r2, #2
   17a9a:	2100      	movs	r1, #0
   17a9c:	50d1      	str	r1, [r2, r3]
		for (i=0;i<nbuf;i++){
   17a9e:	23a7      	movs	r3, #167	; 0xa7
   17aa0:	18fb      	adds	r3, r7, r3
   17aa2:	781a      	ldrb	r2, [r3, #0]
   17aa4:	23a7      	movs	r3, #167	; 0xa7
   17aa6:	18fb      	adds	r3, r7, r3
   17aa8:	3201      	adds	r2, #1
   17aaa:	701a      	strb	r2, [r3, #0]
   17aac:	23a7      	movs	r3, #167	; 0xa7
   17aae:	18fb      	adds	r3, r7, r3
   17ab0:	781b      	ldrb	r3, [r3, #0]
   17ab2:	2b4f      	cmp	r3, #79	; 0x4f
   17ab4:	d9de      	bls.n	17a74 <fn_loop_test+0x3c>
		}
		laser_triggered =  false;
   17ab6:	4bab      	ldr	r3, [pc, #684]	; (17d64 <fn_loop_test+0x32c>)
   17ab8:	2200      	movs	r2, #0
   17aba:	701a      	strb	r2, [r3, #0]
		last_input = input_none;
   17abc:	4baa      	ldr	r3, [pc, #680]	; (17d68 <fn_loop_test+0x330>)
   17abe:	2200      	movs	r2, #0
   17ac0:	701a      	strb	r2, [r3, #0]
	}
	
	// Button Handler
	switch(last_input){
   17ac2:	4ba9      	ldr	r3, [pc, #676]	; (17d68 <fn_loop_test+0x330>)
   17ac4:	781b      	ldrb	r3, [r3, #0]
   17ac6:	b2db      	uxtb	r3, r3
   17ac8:	2b04      	cmp	r3, #4
   17aca:	d028      	beq.n	17b1e <fn_loop_test+0xe6>
   17acc:	2b05      	cmp	r3, #5
   17ace:	d00a      	beq.n	17ae6 <fn_loop_test+0xae>
   17ad0:	2b01      	cmp	r3, #1
   17ad2:	d000      	beq.n	17ad6 <fn_loop_test+0x9e>
		case input_button4:
			// Handled by state machine
			//  Exit from routine
			break;
		default:
			break;
   17ad4:	e024      	b.n	17b20 <fn_loop_test+0xe8>
			ioport_set_pin_level(laser_reset, false);
   17ad6:	2100      	movs	r1, #0
   17ad8:	2002      	movs	r0, #2
   17ada:	4ba4      	ldr	r3, [pc, #656]	; (17d6c <fn_loop_test+0x334>)
   17adc:	4798      	blx	r3
			current_input = input_state_complete;
   17ade:	4ba4      	ldr	r3, [pc, #656]	; (17d70 <fn_loop_test+0x338>)
   17ae0:	2208      	movs	r2, #8
   17ae2:	701a      	strb	r2, [r3, #0]
			break;
   17ae4:	e01c      	b.n	17b20 <fn_loop_test+0xe8>
			if (!laser_triggered){
   17ae6:	4b9f      	ldr	r3, [pc, #636]	; (17d64 <fn_loop_test+0x32c>)
   17ae8:	781b      	ldrb	r3, [r3, #0]
   17aea:	b2db      	uxtb	r3, r3
   17aec:	2201      	movs	r2, #1
   17aee:	4053      	eors	r3, r2
   17af0:	b2db      	uxtb	r3, r3
   17af2:	2b00      	cmp	r3, #0
   17af4:	d006      	beq.n	17b04 <fn_loop_test+0xcc>
				rangefinder_on_off(true);
   17af6:	2001      	movs	r0, #1
   17af8:	4b9e      	ldr	r3, [pc, #632]	; (17d74 <fn_loop_test+0x33c>)
   17afa:	4798      	blx	r3
				laser_on_off(true);
   17afc:	2001      	movs	r0, #1
   17afe:	4b9e      	ldr	r3, [pc, #632]	; (17d78 <fn_loop_test+0x340>)
   17b00:	4798      	blx	r3
			break;
   17b02:	e00d      	b.n	17b20 <fn_loop_test+0xe8>
				full_measurement(&temp_meas, true);
   17b04:	003b      	movs	r3, r7
   17b06:	2101      	movs	r1, #1
   17b08:	0018      	movs	r0, r3
   17b0a:	4b9c      	ldr	r3, [pc, #624]	; (17d7c <fn_loop_test+0x344>)
   17b0c:	4798      	blx	r3
				rangefinder_on_off(false);
   17b0e:	2000      	movs	r0, #0
   17b10:	4b98      	ldr	r3, [pc, #608]	; (17d74 <fn_loop_test+0x33c>)
   17b12:	4798      	blx	r3
				cal_loop_test(&temp_meas);
   17b14:	003b      	movs	r3, r7
   17b16:	0018      	movs	r0, r3
   17b18:	4b99      	ldr	r3, [pc, #612]	; (17d80 <fn_loop_test+0x348>)
   17b1a:	4798      	blx	r3
			break;
   17b1c:	e000      	b.n	17b20 <fn_loop_test+0xe8>
			break;
   17b1e:	46c0      	nop			; (mov r8, r8)
	}
	last_input = input_none;
   17b20:	4b91      	ldr	r3, [pc, #580]	; (17d68 <fn_loop_test+0x330>)
   17b22:	2200      	movs	r2, #0
   17b24:	701a      	strb	r2, [r3, #0]
	
	glcd_tiny_set_font(Font5x7,5,7,32,127);
   17b26:	4897      	ldr	r0, [pc, #604]	; (17d84 <fn_loop_test+0x34c>)
   17b28:	237f      	movs	r3, #127	; 0x7f
   17b2a:	9300      	str	r3, [sp, #0]
   17b2c:	2320      	movs	r3, #32
   17b2e:	2207      	movs	r2, #7
   17b30:	2105      	movs	r1, #5
   17b32:	4c95      	ldr	r4, [pc, #596]	; (17d88 <fn_loop_test+0x350>)
   17b34:	47a0      	blx	r4
	glcd_clear_buffer();
   17b36:	4b95      	ldr	r3, [pc, #596]	; (17d8c <fn_loop_test+0x354>)
   17b38:	4798      	blx	r3
	
	// Display Header
	sprintf(display_str, "Loop Test:");
   17b3a:	4a95      	ldr	r2, [pc, #596]	; (17d90 <fn_loop_test+0x358>)
   17b3c:	4b95      	ldr	r3, [pc, #596]	; (17d94 <fn_loop_test+0x35c>)
   17b3e:	0010      	movs	r0, r2
   17b40:	0019      	movs	r1, r3
   17b42:	230b      	movs	r3, #11
   17b44:	001a      	movs	r2, r3
   17b46:	4b94      	ldr	r3, [pc, #592]	; (17d98 <fn_loop_test+0x360>)
   17b48:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   17b4a:	4b91      	ldr	r3, [pc, #580]	; (17d90 <fn_loop_test+0x358>)
   17b4c:	001a      	movs	r2, r3
   17b4e:	2100      	movs	r1, #0
   17b50:	2000      	movs	r0, #0
   17b52:	4b92      	ldr	r3, [pc, #584]	; (17d9c <fn_loop_test+0x364>)
   17b54:	4798      	blx	r3
	
	sprintf(display_str, "Segments: %d", n_points);
   17b56:	4b7b      	ldr	r3, [pc, #492]	; (17d44 <fn_loop_test+0x30c>)
   17b58:	681a      	ldr	r2, [r3, #0]
   17b5a:	4991      	ldr	r1, [pc, #580]	; (17da0 <fn_loop_test+0x368>)
   17b5c:	4b8c      	ldr	r3, [pc, #560]	; (17d90 <fn_loop_test+0x358>)
   17b5e:	0018      	movs	r0, r3
   17b60:	4b90      	ldr	r3, [pc, #576]	; (17da4 <fn_loop_test+0x36c>)
   17b62:	4798      	blx	r3
	glcd_tiny_draw_string(0,2,display_str);
   17b64:	4b8a      	ldr	r3, [pc, #552]	; (17d90 <fn_loop_test+0x358>)
   17b66:	001a      	movs	r2, r3
   17b68:	2102      	movs	r1, #2
   17b6a:	2000      	movs	r0, #0
   17b6c:	4b8b      	ldr	r3, [pc, #556]	; (17d9c <fn_loop_test+0x364>)
   17b6e:	4798      	blx	r3
	sprintf(display_str, "Loop length: %.1f", loop_distance);
   17b70:	4b75      	ldr	r3, [pc, #468]	; (17d48 <fn_loop_test+0x310>)
   17b72:	681a      	ldr	r2, [r3, #0]
   17b74:	4b8c      	ldr	r3, [pc, #560]	; (17da8 <fn_loop_test+0x370>)
   17b76:	1c10      	adds	r0, r2, #0
   17b78:	4798      	blx	r3
   17b7a:	0003      	movs	r3, r0
   17b7c:	000c      	movs	r4, r1
   17b7e:	498b      	ldr	r1, [pc, #556]	; (17dac <fn_loop_test+0x374>)
   17b80:	4883      	ldr	r0, [pc, #524]	; (17d90 <fn_loop_test+0x358>)
   17b82:	001a      	movs	r2, r3
   17b84:	0023      	movs	r3, r4
   17b86:	4c87      	ldr	r4, [pc, #540]	; (17da4 <fn_loop_test+0x36c>)
   17b88:	47a0      	blx	r4
	if (options.current_unit_dist == feet){
   17b8a:	4b89      	ldr	r3, [pc, #548]	; (17db0 <fn_loop_test+0x378>)
   17b8c:	781b      	ldrb	r3, [r3, #0]
   17b8e:	2b00      	cmp	r3, #0
   17b90:	d10f      	bne.n	17bb2 <fn_loop_test+0x17a>
		strcat(display_str,"ft");
   17b92:	4b7f      	ldr	r3, [pc, #508]	; (17d90 <fn_loop_test+0x358>)
   17b94:	0018      	movs	r0, r3
   17b96:	4b87      	ldr	r3, [pc, #540]	; (17db4 <fn_loop_test+0x37c>)
   17b98:	4798      	blx	r3
   17b9a:	0003      	movs	r3, r0
   17b9c:	001a      	movs	r2, r3
   17b9e:	4b7c      	ldr	r3, [pc, #496]	; (17d90 <fn_loop_test+0x358>)
   17ba0:	18d2      	adds	r2, r2, r3
   17ba2:	4b85      	ldr	r3, [pc, #532]	; (17db8 <fn_loop_test+0x380>)
   17ba4:	0010      	movs	r0, r2
   17ba6:	0019      	movs	r1, r3
   17ba8:	2303      	movs	r3, #3
   17baa:	001a      	movs	r2, r3
   17bac:	4b7a      	ldr	r3, [pc, #488]	; (17d98 <fn_loop_test+0x360>)
   17bae:	4798      	blx	r3
   17bb0:	e00e      	b.n	17bd0 <fn_loop_test+0x198>
	}else{
		strcat(display_str,"m");
   17bb2:	4b77      	ldr	r3, [pc, #476]	; (17d90 <fn_loop_test+0x358>)
   17bb4:	0018      	movs	r0, r3
   17bb6:	4b7f      	ldr	r3, [pc, #508]	; (17db4 <fn_loop_test+0x37c>)
   17bb8:	4798      	blx	r3
   17bba:	0003      	movs	r3, r0
   17bbc:	001a      	movs	r2, r3
   17bbe:	4b74      	ldr	r3, [pc, #464]	; (17d90 <fn_loop_test+0x358>)
   17bc0:	18d2      	adds	r2, r2, r3
   17bc2:	4b7e      	ldr	r3, [pc, #504]	; (17dbc <fn_loop_test+0x384>)
   17bc4:	0010      	movs	r0, r2
   17bc6:	0019      	movs	r1, r3
   17bc8:	2302      	movs	r3, #2
   17bca:	001a      	movs	r2, r3
   17bcc:	4b72      	ldr	r3, [pc, #456]	; (17d98 <fn_loop_test+0x360>)
   17bce:	4798      	blx	r3
	} 
	glcd_tiny_draw_string(0,3,display_str);
   17bd0:	4b6f      	ldr	r3, [pc, #444]	; (17d90 <fn_loop_test+0x358>)
   17bd2:	001a      	movs	r2, r3
   17bd4:	2103      	movs	r1, #3
   17bd6:	2000      	movs	r0, #0
   17bd8:	4b70      	ldr	r3, [pc, #448]	; (17d9c <fn_loop_test+0x364>)
   17bda:	4798      	blx	r3
	
	sprintf(display_str, "Displacement from P1:");
   17bdc:	4a6c      	ldr	r2, [pc, #432]	; (17d90 <fn_loop_test+0x358>)
   17bde:	4b78      	ldr	r3, [pc, #480]	; (17dc0 <fn_loop_test+0x388>)
   17be0:	0010      	movs	r0, r2
   17be2:	0019      	movs	r1, r3
   17be4:	2316      	movs	r3, #22
   17be6:	001a      	movs	r2, r3
   17be8:	4b6b      	ldr	r3, [pc, #428]	; (17d98 <fn_loop_test+0x360>)
   17bea:	4798      	blx	r3
	glcd_tiny_draw_string(0,4,display_str);
   17bec:	4b68      	ldr	r3, [pc, #416]	; (17d90 <fn_loop_test+0x358>)
   17bee:	001a      	movs	r2, r3
   17bf0:	2104      	movs	r1, #4
   17bf2:	2000      	movs	r0, #0
   17bf4:	4b69      	ldr	r3, [pc, #420]	; (17d9c <fn_loop_test+0x364>)
   17bf6:	4798      	blx	r3
	sprintf(display_str, "Horizontal: %.1f", loop_horizontal);
   17bf8:	4b54      	ldr	r3, [pc, #336]	; (17d4c <fn_loop_test+0x314>)
   17bfa:	681a      	ldr	r2, [r3, #0]
   17bfc:	4b6a      	ldr	r3, [pc, #424]	; (17da8 <fn_loop_test+0x370>)
   17bfe:	1c10      	adds	r0, r2, #0
   17c00:	4798      	blx	r3
   17c02:	0003      	movs	r3, r0
   17c04:	000c      	movs	r4, r1
   17c06:	496f      	ldr	r1, [pc, #444]	; (17dc4 <fn_loop_test+0x38c>)
   17c08:	4861      	ldr	r0, [pc, #388]	; (17d90 <fn_loop_test+0x358>)
   17c0a:	001a      	movs	r2, r3
   17c0c:	0023      	movs	r3, r4
   17c0e:	4c65      	ldr	r4, [pc, #404]	; (17da4 <fn_loop_test+0x36c>)
   17c10:	47a0      	blx	r4
	if (options.current_unit_dist == feet){
   17c12:	4b67      	ldr	r3, [pc, #412]	; (17db0 <fn_loop_test+0x378>)
   17c14:	781b      	ldrb	r3, [r3, #0]
   17c16:	2b00      	cmp	r3, #0
   17c18:	d10f      	bne.n	17c3a <fn_loop_test+0x202>
		strcat(display_str,"ft");
   17c1a:	4b5d      	ldr	r3, [pc, #372]	; (17d90 <fn_loop_test+0x358>)
   17c1c:	0018      	movs	r0, r3
   17c1e:	4b65      	ldr	r3, [pc, #404]	; (17db4 <fn_loop_test+0x37c>)
   17c20:	4798      	blx	r3
   17c22:	0003      	movs	r3, r0
   17c24:	001a      	movs	r2, r3
   17c26:	4b5a      	ldr	r3, [pc, #360]	; (17d90 <fn_loop_test+0x358>)
   17c28:	18d2      	adds	r2, r2, r3
   17c2a:	4b63      	ldr	r3, [pc, #396]	; (17db8 <fn_loop_test+0x380>)
   17c2c:	0010      	movs	r0, r2
   17c2e:	0019      	movs	r1, r3
   17c30:	2303      	movs	r3, #3
   17c32:	001a      	movs	r2, r3
   17c34:	4b58      	ldr	r3, [pc, #352]	; (17d98 <fn_loop_test+0x360>)
   17c36:	4798      	blx	r3
   17c38:	e00e      	b.n	17c58 <fn_loop_test+0x220>
	}else{
		strcat(display_str,"m");
   17c3a:	4b55      	ldr	r3, [pc, #340]	; (17d90 <fn_loop_test+0x358>)
   17c3c:	0018      	movs	r0, r3
   17c3e:	4b5d      	ldr	r3, [pc, #372]	; (17db4 <fn_loop_test+0x37c>)
   17c40:	4798      	blx	r3
   17c42:	0003      	movs	r3, r0
   17c44:	001a      	movs	r2, r3
   17c46:	4b52      	ldr	r3, [pc, #328]	; (17d90 <fn_loop_test+0x358>)
   17c48:	18d2      	adds	r2, r2, r3
   17c4a:	4b5c      	ldr	r3, [pc, #368]	; (17dbc <fn_loop_test+0x384>)
   17c4c:	0010      	movs	r0, r2
   17c4e:	0019      	movs	r1, r3
   17c50:	2302      	movs	r3, #2
   17c52:	001a      	movs	r2, r3
   17c54:	4b50      	ldr	r3, [pc, #320]	; (17d98 <fn_loop_test+0x360>)
   17c56:	4798      	blx	r3
	}
	glcd_tiny_draw_string(0,5,display_str);
   17c58:	4b4d      	ldr	r3, [pc, #308]	; (17d90 <fn_loop_test+0x358>)
   17c5a:	001a      	movs	r2, r3
   17c5c:	2105      	movs	r1, #5
   17c5e:	2000      	movs	r0, #0
   17c60:	4b4e      	ldr	r3, [pc, #312]	; (17d9c <fn_loop_test+0x364>)
   17c62:	4798      	blx	r3
	sprintf(display_str, "Vertical: %.1f", loop_vertical);
   17c64:	4b3a      	ldr	r3, [pc, #232]	; (17d50 <fn_loop_test+0x318>)
   17c66:	681a      	ldr	r2, [r3, #0]
   17c68:	4b4f      	ldr	r3, [pc, #316]	; (17da8 <fn_loop_test+0x370>)
   17c6a:	1c10      	adds	r0, r2, #0
   17c6c:	4798      	blx	r3
   17c6e:	0003      	movs	r3, r0
   17c70:	000c      	movs	r4, r1
   17c72:	4955      	ldr	r1, [pc, #340]	; (17dc8 <fn_loop_test+0x390>)
   17c74:	4846      	ldr	r0, [pc, #280]	; (17d90 <fn_loop_test+0x358>)
   17c76:	001a      	movs	r2, r3
   17c78:	0023      	movs	r3, r4
   17c7a:	4c4a      	ldr	r4, [pc, #296]	; (17da4 <fn_loop_test+0x36c>)
   17c7c:	47a0      	blx	r4
	if (options.current_unit_dist == feet){
   17c7e:	4b4c      	ldr	r3, [pc, #304]	; (17db0 <fn_loop_test+0x378>)
   17c80:	781b      	ldrb	r3, [r3, #0]
   17c82:	2b00      	cmp	r3, #0
   17c84:	d10f      	bne.n	17ca6 <fn_loop_test+0x26e>
		strcat(display_str,"ft");
   17c86:	4b42      	ldr	r3, [pc, #264]	; (17d90 <fn_loop_test+0x358>)
   17c88:	0018      	movs	r0, r3
   17c8a:	4b4a      	ldr	r3, [pc, #296]	; (17db4 <fn_loop_test+0x37c>)
   17c8c:	4798      	blx	r3
   17c8e:	0003      	movs	r3, r0
   17c90:	001a      	movs	r2, r3
   17c92:	4b3f      	ldr	r3, [pc, #252]	; (17d90 <fn_loop_test+0x358>)
   17c94:	18d2      	adds	r2, r2, r3
   17c96:	4b48      	ldr	r3, [pc, #288]	; (17db8 <fn_loop_test+0x380>)
   17c98:	0010      	movs	r0, r2
   17c9a:	0019      	movs	r1, r3
   17c9c:	2303      	movs	r3, #3
   17c9e:	001a      	movs	r2, r3
   17ca0:	4b3d      	ldr	r3, [pc, #244]	; (17d98 <fn_loop_test+0x360>)
   17ca2:	4798      	blx	r3
   17ca4:	e00e      	b.n	17cc4 <fn_loop_test+0x28c>
		}else{
		strcat(display_str,"m");
   17ca6:	4b3a      	ldr	r3, [pc, #232]	; (17d90 <fn_loop_test+0x358>)
   17ca8:	0018      	movs	r0, r3
   17caa:	4b42      	ldr	r3, [pc, #264]	; (17db4 <fn_loop_test+0x37c>)
   17cac:	4798      	blx	r3
   17cae:	0003      	movs	r3, r0
   17cb0:	001a      	movs	r2, r3
   17cb2:	4b37      	ldr	r3, [pc, #220]	; (17d90 <fn_loop_test+0x358>)
   17cb4:	18d2      	adds	r2, r2, r3
   17cb6:	4b41      	ldr	r3, [pc, #260]	; (17dbc <fn_loop_test+0x384>)
   17cb8:	0010      	movs	r0, r2
   17cba:	0019      	movs	r1, r3
   17cbc:	2302      	movs	r3, #2
   17cbe:	001a      	movs	r2, r3
   17cc0:	4b35      	ldr	r3, [pc, #212]	; (17d98 <fn_loop_test+0x360>)
   17cc2:	4798      	blx	r3
	}
	glcd_tiny_draw_string(0,6,display_str);
   17cc4:	4b32      	ldr	r3, [pc, #200]	; (17d90 <fn_loop_test+0x358>)
   17cc6:	001a      	movs	r2, r3
   17cc8:	2106      	movs	r1, #6
   17cca:	2000      	movs	r0, #0
   17ccc:	4b33      	ldr	r3, [pc, #204]	; (17d9c <fn_loop_test+0x364>)
   17cce:	4798      	blx	r3
	sprintf(display_str, "Azimuth: %.1f", loop_azimuth);
   17cd0:	4b20      	ldr	r3, [pc, #128]	; (17d54 <fn_loop_test+0x31c>)
   17cd2:	681a      	ldr	r2, [r3, #0]
   17cd4:	4b34      	ldr	r3, [pc, #208]	; (17da8 <fn_loop_test+0x370>)
   17cd6:	1c10      	adds	r0, r2, #0
   17cd8:	4798      	blx	r3
   17cda:	0003      	movs	r3, r0
   17cdc:	000c      	movs	r4, r1
   17cde:	493b      	ldr	r1, [pc, #236]	; (17dcc <fn_loop_test+0x394>)
   17ce0:	482b      	ldr	r0, [pc, #172]	; (17d90 <fn_loop_test+0x358>)
   17ce2:	001a      	movs	r2, r3
   17ce4:	0023      	movs	r3, r4
   17ce6:	4c2f      	ldr	r4, [pc, #188]	; (17da4 <fn_loop_test+0x36c>)
   17ce8:	47a0      	blx	r4
	glcd_tiny_draw_string(0,7,display_str);
   17cea:	4b29      	ldr	r3, [pc, #164]	; (17d90 <fn_loop_test+0x358>)
   17cec:	001a      	movs	r2, r3
   17cee:	2107      	movs	r1, #7
   17cf0:	2000      	movs	r0, #0
   17cf2:	4b2a      	ldr	r3, [pc, #168]	; (17d9c <fn_loop_test+0x364>)
   17cf4:	4798      	blx	r3
	
	
	// Display Soft Keys
	sprintf(display_str, "Done");
   17cf6:	4a26      	ldr	r2, [pc, #152]	; (17d90 <fn_loop_test+0x358>)
   17cf8:	4b35      	ldr	r3, [pc, #212]	; (17dd0 <fn_loop_test+0x398>)
   17cfa:	0010      	movs	r0, r2
   17cfc:	0019      	movs	r1, r3
   17cfe:	2305      	movs	r3, #5
   17d00:	001a      	movs	r2, r3
   17d02:	4b25      	ldr	r3, [pc, #148]	; (17d98 <fn_loop_test+0x360>)
   17d04:	4798      	blx	r3
	glcd_tiny_draw_string(100,0,display_str);
   17d06:	4b22      	ldr	r3, [pc, #136]	; (17d90 <fn_loop_test+0x358>)
   17d08:	001a      	movs	r2, r3
   17d0a:	2100      	movs	r1, #0
   17d0c:	2064      	movs	r0, #100	; 0x64
   17d0e:	4b23      	ldr	r3, [pc, #140]	; (17d9c <fn_loop_test+0x364>)
   17d10:	4798      	blx	r3
	sprintf(display_str, "Abort");
   17d12:	4a1f      	ldr	r2, [pc, #124]	; (17d90 <fn_loop_test+0x358>)
   17d14:	4b2f      	ldr	r3, [pc, #188]	; (17dd4 <fn_loop_test+0x39c>)
   17d16:	0010      	movs	r0, r2
   17d18:	0019      	movs	r1, r3
   17d1a:	2306      	movs	r3, #6
   17d1c:	001a      	movs	r2, r3
   17d1e:	4b1e      	ldr	r3, [pc, #120]	; (17d98 <fn_loop_test+0x360>)
   17d20:	4798      	blx	r3
	glcd_tiny_draw_string(97,7,display_str);
   17d22:	4b1b      	ldr	r3, [pc, #108]	; (17d90 <fn_loop_test+0x358>)
   17d24:	001a      	movs	r2, r3
   17d26:	2107      	movs	r1, #7
   17d28:	2061      	movs	r0, #97	; 0x61
   17d2a:	4b1c      	ldr	r3, [pc, #112]	; (17d9c <fn_loop_test+0x364>)
   17d2c:	4798      	blx	r3
	
	glcd_write();
   17d2e:	4b2a      	ldr	r3, [pc, #168]	; (17dd8 <fn_loop_test+0x3a0>)
   17d30:	4798      	blx	r3
}
   17d32:	46c0      	nop			; (mov r8, r8)
   17d34:	46bd      	mov	sp, r7
   17d36:	b02b      	add	sp, #172	; 0xac
   17d38:	bd90      	pop	{r4, r7, pc}
   17d3a:	46c0      	nop			; (mov r8, r8)
   17d3c:	20000110 	.word	0x20000110
   17d40:	00018255 	.word	0x00018255
   17d44:	200027f8 	.word	0x200027f8
   17d48:	20002ee8 	.word	0x20002ee8
   17d4c:	20003b74 	.word	0x20003b74
   17d50:	20002ee0 	.word	0x20002ee0
   17d54:	20004978 	.word	0x20004978
   17d58:	200018e8 	.word	0x200018e8
   17d5c:	20003a34 	.word	0x20003a34
   17d60:	20003f58 	.word	0x20003f58
   17d64:	20001dec 	.word	0x20001dec
   17d68:	20003b7a 	.word	0x20003b7a
   17d6c:	000166b5 	.word	0x000166b5
   17d70:	20003b78 	.word	0x20003b78
   17d74:	00002a81 	.word	0x00002a81
   17d78:	00002ac9 	.word	0x00002ac9
   17d7c:	00002231 	.word	0x00002231
   17d80:	000071ed 	.word	0x000071ed
   17d84:	00025dd0 	.word	0x00025dd0
   17d88:	00013505 	.word	0x00013505
   17d8c:	000125a5 	.word	0x000125a5
   17d90:	20002f78 	.word	0x20002f78
   17d94:	000261fc 	.word	0x000261fc
   17d98:	00020fa5 	.word	0x00020fa5
   17d9c:	00013691 	.word	0x00013691
   17da0:	00026208 	.word	0x00026208
   17da4:	000210bd 	.word	0x000210bd
   17da8:	00020d99 	.word	0x00020d99
   17dac:	00026218 	.word	0x00026218
   17db0:	20002eec 	.word	0x20002eec
   17db4:	0002115d 	.word	0x0002115d
   17db8:	0002622c 	.word	0x0002622c
   17dbc:	00026230 	.word	0x00026230
   17dc0:	00026234 	.word	0x00026234
   17dc4:	0002624c 	.word	0x0002624c
   17dc8:	00026260 	.word	0x00026260
   17dcc:	00026270 	.word	0x00026270
   17dd0:	000261ec 	.word	0x000261ec
   17dd4:	000261f4 	.word	0x000261f4
   17dd8:	00012de9 	.word	0x00012de9

00017ddc <fn_disp_loop_report>:

void fn_disp_loop_report(void){
   17ddc:	b5b0      	push	{r4, r5, r7, lr}
   17dde:	b084      	sub	sp, #16
   17de0:	af02      	add	r7, sp, #8
		char unit_str[4];
		//float total_error;
		
		if (options.current_unit_dist == feet){
   17de2:	4b4b      	ldr	r3, [pc, #300]	; (17f10 <fn_disp_loop_report+0x134>)
   17de4:	781b      	ldrb	r3, [r3, #0]
   17de6:	2b00      	cmp	r3, #0
   17de8:	d106      	bne.n	17df8 <fn_disp_loop_report+0x1c>
			strcpy(unit_str,"ft");
   17dea:	1d3b      	adds	r3, r7, #4
   17dec:	4a49      	ldr	r2, [pc, #292]	; (17f14 <fn_disp_loop_report+0x138>)
   17dee:	8811      	ldrh	r1, [r2, #0]
   17df0:	8019      	strh	r1, [r3, #0]
   17df2:	7892      	ldrb	r2, [r2, #2]
   17df4:	709a      	strb	r2, [r3, #2]
   17df6:	e002      	b.n	17dfe <fn_disp_loop_report+0x22>
		}else{
			strcpy(unit_str,"m");
   17df8:	1d3b      	adds	r3, r7, #4
   17dfa:	226d      	movs	r2, #109	; 0x6d
   17dfc:	801a      	strh	r2, [r3, #0]
		}
		
		
		glcd_clear_buffer();
   17dfe:	4b46      	ldr	r3, [pc, #280]	; (17f18 <fn_disp_loop_report+0x13c>)
   17e00:	4798      	blx	r3
		sprintf(display_str, "Loop Test Report:");
   17e02:	4a46      	ldr	r2, [pc, #280]	; (17f1c <fn_disp_loop_report+0x140>)
   17e04:	4b46      	ldr	r3, [pc, #280]	; (17f20 <fn_disp_loop_report+0x144>)
   17e06:	0010      	movs	r0, r2
   17e08:	0019      	movs	r1, r3
   17e0a:	2312      	movs	r3, #18
   17e0c:	001a      	movs	r2, r3
   17e0e:	4b45      	ldr	r3, [pc, #276]	; (17f24 <fn_disp_loop_report+0x148>)
   17e10:	4798      	blx	r3
		glcd_tiny_draw_string(0,0,display_str);
   17e12:	4b42      	ldr	r3, [pc, #264]	; (17f1c <fn_disp_loop_report+0x140>)
   17e14:	001a      	movs	r2, r3
   17e16:	2100      	movs	r1, #0
   17e18:	2000      	movs	r0, #0
   17e1a:	4b43      	ldr	r3, [pc, #268]	; (17f28 <fn_disp_loop_report+0x14c>)
   17e1c:	4798      	blx	r3
		
		sprintf(display_str,"Segments: %d",n_points);
   17e1e:	4b43      	ldr	r3, [pc, #268]	; (17f2c <fn_disp_loop_report+0x150>)
   17e20:	681a      	ldr	r2, [r3, #0]
   17e22:	4943      	ldr	r1, [pc, #268]	; (17f30 <fn_disp_loop_report+0x154>)
   17e24:	4b3d      	ldr	r3, [pc, #244]	; (17f1c <fn_disp_loop_report+0x140>)
   17e26:	0018      	movs	r0, r3
   17e28:	4b42      	ldr	r3, [pc, #264]	; (17f34 <fn_disp_loop_report+0x158>)
   17e2a:	4798      	blx	r3
		glcd_tiny_draw_string(0,1,display_str);
   17e2c:	4b3b      	ldr	r3, [pc, #236]	; (17f1c <fn_disp_loop_report+0x140>)
   17e2e:	001a      	movs	r2, r3
   17e30:	2101      	movs	r1, #1
   17e32:	2000      	movs	r0, #0
   17e34:	4b3c      	ldr	r3, [pc, #240]	; (17f28 <fn_disp_loop_report+0x14c>)
   17e36:	4798      	blx	r3
		
		sprintf(display_str,"Total Length: %.1f %s", loop_distance, unit_str);
   17e38:	4b3f      	ldr	r3, [pc, #252]	; (17f38 <fn_disp_loop_report+0x15c>)
   17e3a:	681a      	ldr	r2, [r3, #0]
   17e3c:	4b3f      	ldr	r3, [pc, #252]	; (17f3c <fn_disp_loop_report+0x160>)
   17e3e:	1c10      	adds	r0, r2, #0
   17e40:	4798      	blx	r3
   17e42:	0004      	movs	r4, r0
   17e44:	000d      	movs	r5, r1
   17e46:	493e      	ldr	r1, [pc, #248]	; (17f40 <fn_disp_loop_report+0x164>)
   17e48:	4834      	ldr	r0, [pc, #208]	; (17f1c <fn_disp_loop_report+0x140>)
   17e4a:	1d3b      	adds	r3, r7, #4
   17e4c:	9300      	str	r3, [sp, #0]
   17e4e:	0022      	movs	r2, r4
   17e50:	002b      	movs	r3, r5
   17e52:	4c38      	ldr	r4, [pc, #224]	; (17f34 <fn_disp_loop_report+0x158>)
   17e54:	47a0      	blx	r4
		glcd_tiny_draw_string(0,2,display_str);
   17e56:	4b31      	ldr	r3, [pc, #196]	; (17f1c <fn_disp_loop_report+0x140>)
   17e58:	001a      	movs	r2, r3
   17e5a:	2102      	movs	r1, #2
   17e5c:	2000      	movs	r0, #0
   17e5e:	4b32      	ldr	r3, [pc, #200]	; (17f28 <fn_disp_loop_report+0x14c>)
   17e60:	4798      	blx	r3
		
		sprintf(display_str,"Horz Err: %.3f %s", loop_horizontal, unit_str);
   17e62:	4b38      	ldr	r3, [pc, #224]	; (17f44 <fn_disp_loop_report+0x168>)
   17e64:	681a      	ldr	r2, [r3, #0]
   17e66:	4b35      	ldr	r3, [pc, #212]	; (17f3c <fn_disp_loop_report+0x160>)
   17e68:	1c10      	adds	r0, r2, #0
   17e6a:	4798      	blx	r3
   17e6c:	0004      	movs	r4, r0
   17e6e:	000d      	movs	r5, r1
   17e70:	4935      	ldr	r1, [pc, #212]	; (17f48 <fn_disp_loop_report+0x16c>)
   17e72:	482a      	ldr	r0, [pc, #168]	; (17f1c <fn_disp_loop_report+0x140>)
   17e74:	1d3b      	adds	r3, r7, #4
   17e76:	9300      	str	r3, [sp, #0]
   17e78:	0022      	movs	r2, r4
   17e7a:	002b      	movs	r3, r5
   17e7c:	4c2d      	ldr	r4, [pc, #180]	; (17f34 <fn_disp_loop_report+0x158>)
   17e7e:	47a0      	blx	r4
		glcd_tiny_draw_string(0,3,display_str);
   17e80:	4b26      	ldr	r3, [pc, #152]	; (17f1c <fn_disp_loop_report+0x140>)
   17e82:	001a      	movs	r2, r3
   17e84:	2103      	movs	r1, #3
   17e86:	2000      	movs	r0, #0
   17e88:	4b27      	ldr	r3, [pc, #156]	; (17f28 <fn_disp_loop_report+0x14c>)
   17e8a:	4798      	blx	r3
		
		sprintf(display_str,"Vert Err: %.3f %s", loop_vertical, unit_str);
   17e8c:	4b2f      	ldr	r3, [pc, #188]	; (17f4c <fn_disp_loop_report+0x170>)
   17e8e:	681a      	ldr	r2, [r3, #0]
   17e90:	4b2a      	ldr	r3, [pc, #168]	; (17f3c <fn_disp_loop_report+0x160>)
   17e92:	1c10      	adds	r0, r2, #0
   17e94:	4798      	blx	r3
   17e96:	0004      	movs	r4, r0
   17e98:	000d      	movs	r5, r1
   17e9a:	492d      	ldr	r1, [pc, #180]	; (17f50 <fn_disp_loop_report+0x174>)
   17e9c:	481f      	ldr	r0, [pc, #124]	; (17f1c <fn_disp_loop_report+0x140>)
   17e9e:	1d3b      	adds	r3, r7, #4
   17ea0:	9300      	str	r3, [sp, #0]
   17ea2:	0022      	movs	r2, r4
   17ea4:	002b      	movs	r3, r5
   17ea6:	4c23      	ldr	r4, [pc, #140]	; (17f34 <fn_disp_loop_report+0x158>)
   17ea8:	47a0      	blx	r4
		glcd_tiny_draw_string(0,4,display_str);
   17eaa:	4b1c      	ldr	r3, [pc, #112]	; (17f1c <fn_disp_loop_report+0x140>)
   17eac:	001a      	movs	r2, r3
   17eae:	2104      	movs	r1, #4
   17eb0:	2000      	movs	r0, #0
   17eb2:	4b1d      	ldr	r3, [pc, #116]	; (17f28 <fn_disp_loop_report+0x14c>)
   17eb4:	4798      	blx	r3
		
		sprintf(display_str,"  Azim Err: %.1f deg", loop_azimuth);
   17eb6:	4b27      	ldr	r3, [pc, #156]	; (17f54 <fn_disp_loop_report+0x178>)
   17eb8:	681a      	ldr	r2, [r3, #0]
   17eba:	4b20      	ldr	r3, [pc, #128]	; (17f3c <fn_disp_loop_report+0x160>)
   17ebc:	1c10      	adds	r0, r2, #0
   17ebe:	4798      	blx	r3
   17ec0:	0003      	movs	r3, r0
   17ec2:	000c      	movs	r4, r1
   17ec4:	4924      	ldr	r1, [pc, #144]	; (17f58 <fn_disp_loop_report+0x17c>)
   17ec6:	4815      	ldr	r0, [pc, #84]	; (17f1c <fn_disp_loop_report+0x140>)
   17ec8:	001a      	movs	r2, r3
   17eca:	0023      	movs	r3, r4
   17ecc:	4c19      	ldr	r4, [pc, #100]	; (17f34 <fn_disp_loop_report+0x158>)
   17ece:	47a0      	blx	r4
		glcd_tiny_draw_string(0,5,display_str);
   17ed0:	4b12      	ldr	r3, [pc, #72]	; (17f1c <fn_disp_loop_report+0x140>)
   17ed2:	001a      	movs	r2, r3
   17ed4:	2105      	movs	r1, #5
   17ed6:	2000      	movs	r0, #0
   17ed8:	4b13      	ldr	r3, [pc, #76]	; (17f28 <fn_disp_loop_report+0x14c>)
   17eda:	4798      	blx	r3
		
		sprintf(display_str,"Loop Err: %.3f%% ", loop_error);
   17edc:	4b1f      	ldr	r3, [pc, #124]	; (17f5c <fn_disp_loop_report+0x180>)
   17ede:	681a      	ldr	r2, [r3, #0]
   17ee0:	4b16      	ldr	r3, [pc, #88]	; (17f3c <fn_disp_loop_report+0x160>)
   17ee2:	1c10      	adds	r0, r2, #0
   17ee4:	4798      	blx	r3
   17ee6:	0003      	movs	r3, r0
   17ee8:	000c      	movs	r4, r1
   17eea:	491d      	ldr	r1, [pc, #116]	; (17f60 <fn_disp_loop_report+0x184>)
   17eec:	480b      	ldr	r0, [pc, #44]	; (17f1c <fn_disp_loop_report+0x140>)
   17eee:	001a      	movs	r2, r3
   17ef0:	0023      	movs	r3, r4
   17ef2:	4c10      	ldr	r4, [pc, #64]	; (17f34 <fn_disp_loop_report+0x158>)
   17ef4:	47a0      	blx	r4
		glcd_tiny_draw_string(0,5,display_str);
   17ef6:	4b09      	ldr	r3, [pc, #36]	; (17f1c <fn_disp_loop_report+0x140>)
   17ef8:	001a      	movs	r2, r3
   17efa:	2105      	movs	r1, #5
   17efc:	2000      	movs	r0, #0
   17efe:	4b0a      	ldr	r3, [pc, #40]	; (17f28 <fn_disp_loop_report+0x14c>)
   17f00:	4798      	blx	r3
		
		
		
		glcd_write();
   17f02:	4b18      	ldr	r3, [pc, #96]	; (17f64 <fn_disp_loop_report+0x188>)
   17f04:	4798      	blx	r3
	
}
   17f06:	46c0      	nop			; (mov r8, r8)
   17f08:	46bd      	mov	sp, r7
   17f0a:	b002      	add	sp, #8
   17f0c:	bdb0      	pop	{r4, r5, r7, pc}
   17f0e:	46c0      	nop			; (mov r8, r8)
   17f10:	20002eec 	.word	0x20002eec
   17f14:	0002622c 	.word	0x0002622c
   17f18:	000125a5 	.word	0x000125a5
   17f1c:	20002f78 	.word	0x20002f78
   17f20:	00026280 	.word	0x00026280
   17f24:	00020fa5 	.word	0x00020fa5
   17f28:	00013691 	.word	0x00013691
   17f2c:	200027f8 	.word	0x200027f8
   17f30:	00026208 	.word	0x00026208
   17f34:	000210bd 	.word	0x000210bd
   17f38:	20002ee8 	.word	0x20002ee8
   17f3c:	00020d99 	.word	0x00020d99
   17f40:	00026294 	.word	0x00026294
   17f44:	20003b74 	.word	0x20003b74
   17f48:	000262ac 	.word	0x000262ac
   17f4c:	20002ee0 	.word	0x20002ee0
   17f50:	000262c0 	.word	0x000262c0
   17f54:	20004978 	.word	0x20004978
   17f58:	000262d4 	.word	0x000262d4
   17f5c:	20004554 	.word	0x20004554
   17f60:	000262ec 	.word	0x000262ec
   17f64:	00012de9 	.word	0x00012de9

00017f68 <fn_dist_calibration>:


void fn_dist_calibration(void){
   17f68:	b5b0      	push	{r4, r5, r7, lr}
   17f6a:	b0ac      	sub	sp, #176	; 0xb0
   17f6c:	af02      	add	r7, sp, #8
	struct MEASUREMENT temp_meas;
	
	//uint32_t timer_count;
	uint8_t k;
	
	if (state_change){
   17f6e:	4b95      	ldr	r3, [pc, #596]	; (181c4 <fn_dist_calibration+0x25c>)
   17f70:	781b      	ldrb	r3, [r3, #0]
   17f72:	b2db      	uxtb	r3, r3
   17f74:	2b00      	cmp	r3, #0
   17f76:	d025      	beq.n	17fc4 <fn_dist_calibration+0x5c>
		cal_disp_message();
   17f78:	4b93      	ldr	r3, [pc, #588]	; (181c8 <fn_dist_calibration+0x260>)
   17f7a:	4798      	blx	r3
		//  Set up initial settings
		buf_points = 0;
   17f7c:	4b93      	ldr	r3, [pc, #588]	; (181cc <fn_dist_calibration+0x264>)
   17f7e:	2200      	movs	r2, #0
   17f80:	701a      	strb	r2, [r3, #0]
		ind_buf = 0;// Circular buffer
   17f82:	4b93      	ldr	r3, [pc, #588]	; (181d0 <fn_dist_calibration+0x268>)
   17f84:	2200      	movs	r2, #0
   17f86:	701a      	strb	r2, [r3, #0]
		for (k=0;k<shot_size;k++){
   17f88:	23a7      	movs	r3, #167	; 0xa7
   17f8a:	18fb      	adds	r3, r7, r3
   17f8c:	2200      	movs	r2, #0
   17f8e:	701a      	strb	r2, [r3, #0]
   17f90:	e00d      	b.n	17fae <fn_dist_calibration+0x46>
			dist_raw_buf[k] = 0;
   17f92:	23a7      	movs	r3, #167	; 0xa7
   17f94:	18fb      	adds	r3, r7, r3
   17f96:	781a      	ldrb	r2, [r3, #0]
   17f98:	4b8e      	ldr	r3, [pc, #568]	; (181d4 <fn_dist_calibration+0x26c>)
   17f9a:	0092      	lsls	r2, r2, #2
   17f9c:	2100      	movs	r1, #0
   17f9e:	50d1      	str	r1, [r2, r3]
		for (k=0;k<shot_size;k++){
   17fa0:	23a7      	movs	r3, #167	; 0xa7
   17fa2:	18fb      	adds	r3, r7, r3
   17fa4:	781a      	ldrb	r2, [r3, #0]
   17fa6:	23a7      	movs	r3, #167	; 0xa7
   17fa8:	18fb      	adds	r3, r7, r3
   17faa:	3201      	adds	r2, #1
   17fac:	701a      	strb	r2, [r3, #0]
   17fae:	23a7      	movs	r3, #167	; 0xa7
   17fb0:	18fb      	adds	r3, r7, r3
   17fb2:	781b      	ldrb	r3, [r3, #0]
   17fb4:	2b03      	cmp	r3, #3
   17fb6:	d9ec      	bls.n	17f92 <fn_dist_calibration+0x2a>
		}
		laser_triggered =  false;
   17fb8:	4b87      	ldr	r3, [pc, #540]	; (181d8 <fn_dist_calibration+0x270>)
   17fba:	2200      	movs	r2, #0
   17fbc:	701a      	strb	r2, [r3, #0]
		last_input = input_none;
   17fbe:	4b87      	ldr	r3, [pc, #540]	; (181dc <fn_dist_calibration+0x274>)
   17fc0:	2200      	movs	r2, #0
   17fc2:	701a      	strb	r2, [r3, #0]
	}
	
	// Button Handler
	switch(last_input){
   17fc4:	4b85      	ldr	r3, [pc, #532]	; (181dc <fn_dist_calibration+0x274>)
   17fc6:	781b      	ldrb	r3, [r3, #0]
   17fc8:	b2db      	uxtb	r3, r3
   17fca:	2b04      	cmp	r3, #4
   17fcc:	d02b      	beq.n	18026 <fn_dist_calibration+0xbe>
   17fce:	2b05      	cmp	r3, #5
   17fd0:	d011      	beq.n	17ff6 <fn_dist_calibration+0x8e>
   17fd2:	2b01      	cmp	r3, #1
   17fd4:	d000      	beq.n	17fd8 <fn_dist_calibration+0x70>
		case input_button4:
			// Handled by state machine
			//  Exit from routine
			break;
		default:
			break;
   17fd6:	e029      	b.n	1802c <fn_dist_calibration+0xc4>
			if (buf_points >= shot_size){
   17fd8:	4b7c      	ldr	r3, [pc, #496]	; (181cc <fn_dist_calibration+0x264>)
   17fda:	781b      	ldrb	r3, [r3, #0]
   17fdc:	2b03      	cmp	r3, #3
   17fde:	d924      	bls.n	1802a <fn_dist_calibration+0xc2>
				rangefinder_on_off(false);
   17fe0:	2000      	movs	r0, #0
   17fe2:	4b7f      	ldr	r3, [pc, #508]	; (181e0 <fn_dist_calibration+0x278>)
   17fe4:	4798      	blx	r3
				cal_dist_process();
   17fe6:	4b7f      	ldr	r3, [pc, #508]	; (181e4 <fn_dist_calibration+0x27c>)
   17fe8:	4798      	blx	r3
				save_calibration();
   17fea:	4b7f      	ldr	r3, [pc, #508]	; (181e8 <fn_dist_calibration+0x280>)
   17fec:	4798      	blx	r3
				current_input = input_state_complete;
   17fee:	4b7f      	ldr	r3, [pc, #508]	; (181ec <fn_dist_calibration+0x284>)
   17ff0:	2208      	movs	r2, #8
   17ff2:	701a      	strb	r2, [r3, #0]
			break;
   17ff4:	e019      	b.n	1802a <fn_dist_calibration+0xc2>
			if (!laser_triggered){
   17ff6:	4b78      	ldr	r3, [pc, #480]	; (181d8 <fn_dist_calibration+0x270>)
   17ff8:	781b      	ldrb	r3, [r3, #0]
   17ffa:	b2db      	uxtb	r3, r3
   17ffc:	2201      	movs	r2, #1
   17ffe:	4053      	eors	r3, r2
   18000:	b2db      	uxtb	r3, r3
   18002:	2b00      	cmp	r3, #0
   18004:	d006      	beq.n	18014 <fn_dist_calibration+0xac>
				rangefinder_on_off(true);
   18006:	2001      	movs	r0, #1
   18008:	4b75      	ldr	r3, [pc, #468]	; (181e0 <fn_dist_calibration+0x278>)
   1800a:	4798      	blx	r3
				laser_on_off(true);
   1800c:	2001      	movs	r0, #1
   1800e:	4b78      	ldr	r3, [pc, #480]	; (181f0 <fn_dist_calibration+0x288>)
   18010:	4798      	blx	r3
			break;
   18012:	e00b      	b.n	1802c <fn_dist_calibration+0xc4>
				full_measurement(&temp_meas, false);
   18014:	003b      	movs	r3, r7
   18016:	2100      	movs	r1, #0
   18018:	0018      	movs	r0, r3
   1801a:	4b76      	ldr	r3, [pc, #472]	; (181f4 <fn_dist_calibration+0x28c>)
   1801c:	4798      	blx	r3
				rangefinder_on_off(true);
   1801e:	2001      	movs	r0, #1
   18020:	4b6f      	ldr	r3, [pc, #444]	; (181e0 <fn_dist_calibration+0x278>)
   18022:	4798      	blx	r3
			break;
   18024:	e002      	b.n	1802c <fn_dist_calibration+0xc4>
			break;
   18026:	46c0      	nop			; (mov r8, r8)
   18028:	e000      	b.n	1802c <fn_dist_calibration+0xc4>
			break;
   1802a:	46c0      	nop			; (mov r8, r8)
	}
	last_input = input_none;
   1802c:	4b6b      	ldr	r3, [pc, #428]	; (181dc <fn_dist_calibration+0x274>)
   1802e:	2200      	movs	r2, #0
   18030:	701a      	strb	r2, [r3, #0]
	
	glcd_tiny_set_font(Font5x7,5,7,32,127);
   18032:	4871      	ldr	r0, [pc, #452]	; (181f8 <fn_dist_calibration+0x290>)
   18034:	237f      	movs	r3, #127	; 0x7f
   18036:	9300      	str	r3, [sp, #0]
   18038:	2320      	movs	r3, #32
   1803a:	2207      	movs	r2, #7
   1803c:	2105      	movs	r1, #5
   1803e:	4c6f      	ldr	r4, [pc, #444]	; (181fc <fn_dist_calibration+0x294>)
   18040:	47a0      	blx	r4
	glcd_clear_buffer();
   18042:	4b6f      	ldr	r3, [pc, #444]	; (18200 <fn_dist_calibration+0x298>)
   18044:	4798      	blx	r3
	
	// Display Header
	sprintf(display_str, "Calibration Mode");
   18046:	4a6f      	ldr	r2, [pc, #444]	; (18204 <fn_dist_calibration+0x29c>)
   18048:	4b6f      	ldr	r3, [pc, #444]	; (18208 <fn_dist_calibration+0x2a0>)
   1804a:	0010      	movs	r0, r2
   1804c:	0019      	movs	r1, r3
   1804e:	2311      	movs	r3, #17
   18050:	001a      	movs	r2, r3
   18052:	4b6e      	ldr	r3, [pc, #440]	; (1820c <fn_dist_calibration+0x2a4>)
   18054:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   18056:	4b6b      	ldr	r3, [pc, #428]	; (18204 <fn_dist_calibration+0x29c>)
   18058:	001a      	movs	r2, r3
   1805a:	2100      	movs	r1, #0
   1805c:	2000      	movs	r0, #0
   1805e:	4b6c      	ldr	r3, [pc, #432]	; (18210 <fn_dist_calibration+0x2a8>)
   18060:	4798      	blx	r3
	if (options.current_unit_dist == feet){
   18062:	4b6c      	ldr	r3, [pc, #432]	; (18214 <fn_dist_calibration+0x2ac>)
   18064:	781b      	ldrb	r3, [r3, #0]
   18066:	2b00      	cmp	r3, #0
   18068:	d10c      	bne.n	18084 <fn_dist_calibration+0x11c>
		sprintf(display_str, " Target %.1f feet",dist_cal_setpoint_ft);
   1806a:	4a6b      	ldr	r2, [pc, #428]	; (18218 <fn_dist_calibration+0x2b0>)
   1806c:	4b6b      	ldr	r3, [pc, #428]	; (1821c <fn_dist_calibration+0x2b4>)
   1806e:	1c10      	adds	r0, r2, #0
   18070:	4798      	blx	r3
   18072:	0003      	movs	r3, r0
   18074:	000c      	movs	r4, r1
   18076:	496a      	ldr	r1, [pc, #424]	; (18220 <fn_dist_calibration+0x2b8>)
   18078:	4862      	ldr	r0, [pc, #392]	; (18204 <fn_dist_calibration+0x29c>)
   1807a:	001a      	movs	r2, r3
   1807c:	0023      	movs	r3, r4
   1807e:	4c69      	ldr	r4, [pc, #420]	; (18224 <fn_dist_calibration+0x2bc>)
   18080:	47a0      	blx	r4
   18082:	e00c      	b.n	1809e <fn_dist_calibration+0x136>
	}else{
		sprintf(display_str, " Target %.1f meters.",dist_cal_setpoint_mt);
   18084:	22fe      	movs	r2, #254	; 0xfe
   18086:	0592      	lsls	r2, r2, #22
   18088:	4b64      	ldr	r3, [pc, #400]	; (1821c <fn_dist_calibration+0x2b4>)
   1808a:	1c10      	adds	r0, r2, #0
   1808c:	4798      	blx	r3
   1808e:	0003      	movs	r3, r0
   18090:	000c      	movs	r4, r1
   18092:	4965      	ldr	r1, [pc, #404]	; (18228 <fn_dist_calibration+0x2c0>)
   18094:	485b      	ldr	r0, [pc, #364]	; (18204 <fn_dist_calibration+0x29c>)
   18096:	001a      	movs	r2, r3
   18098:	0023      	movs	r3, r4
   1809a:	4c62      	ldr	r4, [pc, #392]	; (18224 <fn_dist_calibration+0x2bc>)
   1809c:	47a0      	blx	r4
	}
	glcd_tiny_draw_string(0,1,display_str);
   1809e:	4b59      	ldr	r3, [pc, #356]	; (18204 <fn_dist_calibration+0x29c>)
   180a0:	001a      	movs	r2, r3
   180a2:	2101      	movs	r1, #1
   180a4:	2000      	movs	r0, #0
   180a6:	4b5a      	ldr	r3, [pc, #360]	; (18210 <fn_dist_calibration+0x2a8>)
   180a8:	4798      	blx	r3
	
	// Display Current Data
	for (k=0;k<4;k++){
   180aa:	23a7      	movs	r3, #167	; 0xa7
   180ac:	18fb      	adds	r3, r7, r3
   180ae:	2200      	movs	r2, #0
   180b0:	701a      	strb	r2, [r3, #0]
   180b2:	e048      	b.n	18146 <fn_dist_calibration+0x1de>
		sprintf(display_str,"M%d: %2.4f ",k,dist_disp_buf[k]);
   180b4:	23a7      	movs	r3, #167	; 0xa7
   180b6:	18fb      	adds	r3, r7, r3
   180b8:	781d      	ldrb	r5, [r3, #0]
   180ba:	23a7      	movs	r3, #167	; 0xa7
   180bc:	18fb      	adds	r3, r7, r3
   180be:	781a      	ldrb	r2, [r3, #0]
   180c0:	4b5a      	ldr	r3, [pc, #360]	; (1822c <fn_dist_calibration+0x2c4>)
   180c2:	0092      	lsls	r2, r2, #2
   180c4:	58d2      	ldr	r2, [r2, r3]
   180c6:	4b55      	ldr	r3, [pc, #340]	; (1821c <fn_dist_calibration+0x2b4>)
   180c8:	1c10      	adds	r0, r2, #0
   180ca:	4798      	blx	r3
   180cc:	0003      	movs	r3, r0
   180ce:	000c      	movs	r4, r1
   180d0:	4957      	ldr	r1, [pc, #348]	; (18230 <fn_dist_calibration+0x2c8>)
   180d2:	484c      	ldr	r0, [pc, #304]	; (18204 <fn_dist_calibration+0x29c>)
   180d4:	9300      	str	r3, [sp, #0]
   180d6:	9401      	str	r4, [sp, #4]
   180d8:	002a      	movs	r2, r5
   180da:	4b52      	ldr	r3, [pc, #328]	; (18224 <fn_dist_calibration+0x2bc>)
   180dc:	4798      	blx	r3
		if (options.current_unit_dist == feet){
   180de:	4b4d      	ldr	r3, [pc, #308]	; (18214 <fn_dist_calibration+0x2ac>)
   180e0:	781b      	ldrb	r3, [r3, #0]
   180e2:	2b00      	cmp	r3, #0
   180e4:	d10f      	bne.n	18106 <fn_dist_calibration+0x19e>
			strcat(display_str,"ft");
   180e6:	4b47      	ldr	r3, [pc, #284]	; (18204 <fn_dist_calibration+0x29c>)
   180e8:	0018      	movs	r0, r3
   180ea:	4b52      	ldr	r3, [pc, #328]	; (18234 <fn_dist_calibration+0x2cc>)
   180ec:	4798      	blx	r3
   180ee:	0003      	movs	r3, r0
   180f0:	001a      	movs	r2, r3
   180f2:	4b44      	ldr	r3, [pc, #272]	; (18204 <fn_dist_calibration+0x29c>)
   180f4:	18d2      	adds	r2, r2, r3
   180f6:	4b50      	ldr	r3, [pc, #320]	; (18238 <fn_dist_calibration+0x2d0>)
   180f8:	0010      	movs	r0, r2
   180fa:	0019      	movs	r1, r3
   180fc:	2303      	movs	r3, #3
   180fe:	001a      	movs	r2, r3
   18100:	4b42      	ldr	r3, [pc, #264]	; (1820c <fn_dist_calibration+0x2a4>)
   18102:	4798      	blx	r3
   18104:	e00e      	b.n	18124 <fn_dist_calibration+0x1bc>
		}else{
			strcat(display_str,"m");
   18106:	4b3f      	ldr	r3, [pc, #252]	; (18204 <fn_dist_calibration+0x29c>)
   18108:	0018      	movs	r0, r3
   1810a:	4b4a      	ldr	r3, [pc, #296]	; (18234 <fn_dist_calibration+0x2cc>)
   1810c:	4798      	blx	r3
   1810e:	0003      	movs	r3, r0
   18110:	001a      	movs	r2, r3
   18112:	4b3c      	ldr	r3, [pc, #240]	; (18204 <fn_dist_calibration+0x29c>)
   18114:	18d2      	adds	r2, r2, r3
   18116:	4b49      	ldr	r3, [pc, #292]	; (1823c <fn_dist_calibration+0x2d4>)
   18118:	0010      	movs	r0, r2
   1811a:	0019      	movs	r1, r3
   1811c:	2302      	movs	r3, #2
   1811e:	001a      	movs	r2, r3
   18120:	4b3a      	ldr	r3, [pc, #232]	; (1820c <fn_dist_calibration+0x2a4>)
   18122:	4798      	blx	r3
		}
		glcd_tiny_draw_string(0,k+2,display_str);
   18124:	23a7      	movs	r3, #167	; 0xa7
   18126:	18fb      	adds	r3, r7, r3
   18128:	781b      	ldrb	r3, [r3, #0]
   1812a:	3302      	adds	r3, #2
   1812c:	b2db      	uxtb	r3, r3
   1812e:	4a35      	ldr	r2, [pc, #212]	; (18204 <fn_dist_calibration+0x29c>)
   18130:	0019      	movs	r1, r3
   18132:	2000      	movs	r0, #0
   18134:	4b36      	ldr	r3, [pc, #216]	; (18210 <fn_dist_calibration+0x2a8>)
   18136:	4798      	blx	r3
	for (k=0;k<4;k++){
   18138:	23a7      	movs	r3, #167	; 0xa7
   1813a:	18fb      	adds	r3, r7, r3
   1813c:	781a      	ldrb	r2, [r3, #0]
   1813e:	23a7      	movs	r3, #167	; 0xa7
   18140:	18fb      	adds	r3, r7, r3
   18142:	3201      	adds	r2, #1
   18144:	701a      	strb	r2, [r3, #0]
   18146:	23a7      	movs	r3, #167	; 0xa7
   18148:	18fb      	adds	r3, r7, r3
   1814a:	781b      	ldrb	r3, [r3, #0]
   1814c:	2b03      	cmp	r3, #3
   1814e:	d9b1      	bls.n	180b4 <fn_dist_calibration+0x14c>
	}
	sprintf(display_str, "Offset: %f", temp_dist_offset);
   18150:	4b3b      	ldr	r3, [pc, #236]	; (18240 <fn_dist_calibration+0x2d8>)
   18152:	681a      	ldr	r2, [r3, #0]
   18154:	4b31      	ldr	r3, [pc, #196]	; (1821c <fn_dist_calibration+0x2b4>)
   18156:	1c10      	adds	r0, r2, #0
   18158:	4798      	blx	r3
   1815a:	0003      	movs	r3, r0
   1815c:	000c      	movs	r4, r1
   1815e:	4939      	ldr	r1, [pc, #228]	; (18244 <fn_dist_calibration+0x2dc>)
   18160:	4828      	ldr	r0, [pc, #160]	; (18204 <fn_dist_calibration+0x29c>)
   18162:	001a      	movs	r2, r3
   18164:	0023      	movs	r3, r4
   18166:	4c2f      	ldr	r4, [pc, #188]	; (18224 <fn_dist_calibration+0x2bc>)
   18168:	47a0      	blx	r4
	glcd_tiny_draw_string(0,6,display_str);
   1816a:	4b26      	ldr	r3, [pc, #152]	; (18204 <fn_dist_calibration+0x29c>)
   1816c:	001a      	movs	r2, r3
   1816e:	2106      	movs	r1, #6
   18170:	2000      	movs	r0, #0
   18172:	4b27      	ldr	r3, [pc, #156]	; (18210 <fn_dist_calibration+0x2a8>)
   18174:	4798      	blx	r3

	// Display Soft Keys
	//if (n_groups >= 2){
	if (buf_points >= shot_size){
   18176:	4b15      	ldr	r3, [pc, #84]	; (181cc <fn_dist_calibration+0x264>)
   18178:	781b      	ldrb	r3, [r3, #0]
   1817a:	2b03      	cmp	r3, #3
   1817c:	d90d      	bls.n	1819a <fn_dist_calibration+0x232>
		sprintf(display_str, "Calibration      Done");
   1817e:	4a21      	ldr	r2, [pc, #132]	; (18204 <fn_dist_calibration+0x29c>)
   18180:	4b31      	ldr	r3, [pc, #196]	; (18248 <fn_dist_calibration+0x2e0>)
   18182:	0010      	movs	r0, r2
   18184:	0019      	movs	r1, r3
   18186:	2316      	movs	r3, #22
   18188:	001a      	movs	r2, r3
   1818a:	4b20      	ldr	r3, [pc, #128]	; (1820c <fn_dist_calibration+0x2a4>)
   1818c:	4798      	blx	r3
		glcd_tiny_draw_string(0,0,display_str);
   1818e:	4b1d      	ldr	r3, [pc, #116]	; (18204 <fn_dist_calibration+0x29c>)
   18190:	001a      	movs	r2, r3
   18192:	2100      	movs	r1, #0
   18194:	2000      	movs	r0, #0
   18196:	4b1e      	ldr	r3, [pc, #120]	; (18210 <fn_dist_calibration+0x2a8>)
   18198:	4798      	blx	r3
	}
	sprintf(display_str, "Abort");
   1819a:	4a1a      	ldr	r2, [pc, #104]	; (18204 <fn_dist_calibration+0x29c>)
   1819c:	4b2b      	ldr	r3, [pc, #172]	; (1824c <fn_dist_calibration+0x2e4>)
   1819e:	0010      	movs	r0, r2
   181a0:	0019      	movs	r1, r3
   181a2:	2306      	movs	r3, #6
   181a4:	001a      	movs	r2, r3
   181a6:	4b19      	ldr	r3, [pc, #100]	; (1820c <fn_dist_calibration+0x2a4>)
   181a8:	4798      	blx	r3
	glcd_tiny_draw_string(97,7,display_str);
   181aa:	4b16      	ldr	r3, [pc, #88]	; (18204 <fn_dist_calibration+0x29c>)
   181ac:	001a      	movs	r2, r3
   181ae:	2107      	movs	r1, #7
   181b0:	2061      	movs	r0, #97	; 0x61
   181b2:	4b17      	ldr	r3, [pc, #92]	; (18210 <fn_dist_calibration+0x2a8>)
   181b4:	4798      	blx	r3
		
	glcd_write();
   181b6:	4b26      	ldr	r3, [pc, #152]	; (18250 <fn_dist_calibration+0x2e8>)
   181b8:	4798      	blx	r3
}
   181ba:	46c0      	nop			; (mov r8, r8)
   181bc:	46bd      	mov	sp, r7
   181be:	b02a      	add	sp, #168	; 0xa8
   181c0:	bdb0      	pop	{r4, r5, r7, pc}
   181c2:	46c0      	nop			; (mov r8, r8)
   181c4:	20000110 	.word	0x20000110
   181c8:	00018255 	.word	0x00018255
   181cc:	200018e0 	.word	0x200018e0
   181d0:	2000343c 	.word	0x2000343c
   181d4:	20003b7c 	.word	0x20003b7c
   181d8:	20001dec 	.word	0x20001dec
   181dc:	20003b7a 	.word	0x20003b7a
   181e0:	00002a81 	.word	0x00002a81
   181e4:	000075a5 	.word	0x000075a5
   181e8:	00001c85 	.word	0x00001c85
   181ec:	20003b78 	.word	0x20003b78
   181f0:	00002ac9 	.word	0x00002ac9
   181f4:	00002231 	.word	0x00002231
   181f8:	00025dd0 	.word	0x00025dd0
   181fc:	00013505 	.word	0x00013505
   18200:	000125a5 	.word	0x000125a5
   18204:	20002f78 	.word	0x20002f78
   18208:	000261a0 	.word	0x000261a0
   1820c:	00020fa5 	.word	0x00020fa5
   18210:	00013691 	.word	0x00013691
   18214:	20002eec 	.word	0x20002eec
   18218:	40400000 	.word	0x40400000
   1821c:	00020d99 	.word	0x00020d99
   18220:	00026300 	.word	0x00026300
   18224:	000210bd 	.word	0x000210bd
   18228:	00026314 	.word	0x00026314
   1822c:	20002e68 	.word	0x20002e68
   18230:	0002632c 	.word	0x0002632c
   18234:	0002115d 	.word	0x0002115d
   18238:	0002622c 	.word	0x0002622c
   1823c:	00026230 	.word	0x00026230
   18240:	20003a2c 	.word	0x20003a2c
   18244:	00026338 	.word	0x00026338
   18248:	00026344 	.word	0x00026344
   1824c:	000261f4 	.word	0x000261f4
   18250:	00012de9 	.word	0x00012de9

00018254 <cal_disp_message>:


void cal_disp_message(void){
   18254:	b590      	push	{r4, r7, lr}
   18256:	b083      	sub	sp, #12
   18258:	af02      	add	r7, sp, #8
	wdt_disable();
   1825a:	4b97      	ldr	r3, [pc, #604]	; (184b8 <cal_disp_message+0x264>)
   1825c:	4798      	blx	r3
	if (current_state==st_acc_comp_calibration){
   1825e:	4b97      	ldr	r3, [pc, #604]	; (184bc <cal_disp_message+0x268>)
   18260:	781b      	ldrb	r3, [r3, #0]
   18262:	b2db      	uxtb	r3, r3
   18264:	2b0b      	cmp	r3, #11
   18266:	d126      	bne.n	182b6 <cal_disp_message+0x62>
		glcd_tiny_set_font(Font5x7,5,7,32,127);
   18268:	4895      	ldr	r0, [pc, #596]	; (184c0 <cal_disp_message+0x26c>)
   1826a:	237f      	movs	r3, #127	; 0x7f
   1826c:	9300      	str	r3, [sp, #0]
   1826e:	2320      	movs	r3, #32
   18270:	2207      	movs	r2, #7
   18272:	2105      	movs	r1, #5
   18274:	4c93      	ldr	r4, [pc, #588]	; (184c4 <cal_disp_message+0x270>)
   18276:	47a0      	blx	r4
		glcd_clear_buffer();
   18278:	4b93      	ldr	r3, [pc, #588]	; (184c8 <cal_disp_message+0x274>)
   1827a:	4798      	blx	r3
	
		sprintf(display_str, "Azm/Inc Calibration:");
   1827c:	4a93      	ldr	r2, [pc, #588]	; (184cc <cal_disp_message+0x278>)
   1827e:	4b94      	ldr	r3, [pc, #592]	; (184d0 <cal_disp_message+0x27c>)
   18280:	0010      	movs	r0, r2
   18282:	0019      	movs	r1, r3
   18284:	2315      	movs	r3, #21
   18286:	001a      	movs	r2, r3
   18288:	4b92      	ldr	r3, [pc, #584]	; (184d4 <cal_disp_message+0x280>)
   1828a:	4798      	blx	r3
		glcd_tiny_draw_string(0,0,display_str);
   1828c:	4b8f      	ldr	r3, [pc, #572]	; (184cc <cal_disp_message+0x278>)
   1828e:	001a      	movs	r2, r3
   18290:	2100      	movs	r1, #0
   18292:	2000      	movs	r0, #0
   18294:	4b90      	ldr	r3, [pc, #576]	; (184d8 <cal_disp_message+0x284>)
   18296:	4798      	blx	r3
		sprintf(display_str, "Take Uni-Directional Groups of 4 Shots    while rotating       instrument. Only last4 shots of each groupwill be saved");
   18298:	4a8c      	ldr	r2, [pc, #560]	; (184cc <cal_disp_message+0x278>)
   1829a:	4b90      	ldr	r3, [pc, #576]	; (184dc <cal_disp_message+0x288>)
   1829c:	0010      	movs	r0, r2
   1829e:	0019      	movs	r1, r3
   182a0:	2377      	movs	r3, #119	; 0x77
   182a2:	001a      	movs	r2, r3
   182a4:	4b8b      	ldr	r3, [pc, #556]	; (184d4 <cal_disp_message+0x280>)
   182a6:	4798      	blx	r3
		glcd_tiny_draw_string(0,1,display_str);		
   182a8:	4b88      	ldr	r3, [pc, #544]	; (184cc <cal_disp_message+0x278>)
   182aa:	001a      	movs	r2, r3
   182ac:	2101      	movs	r1, #1
   182ae:	2000      	movs	r0, #0
   182b0:	4b89      	ldr	r3, [pc, #548]	; (184d8 <cal_disp_message+0x284>)
   182b2:	4798      	blx	r3
   182b4:	e0dc      	b.n	18470 <cal_disp_message+0x21c>
	}else if(current_state == st_dist_calibration){
   182b6:	4b81      	ldr	r3, [pc, #516]	; (184bc <cal_disp_message+0x268>)
   182b8:	781b      	ldrb	r3, [r3, #0]
   182ba:	b2db      	uxtb	r3, r3
   182bc:	2b0c      	cmp	r3, #12
   182be:	d174      	bne.n	183aa <cal_disp_message+0x156>
		glcd_tiny_set_font(Font5x7,5,7,32,127);
   182c0:	487f      	ldr	r0, [pc, #508]	; (184c0 <cal_disp_message+0x26c>)
   182c2:	237f      	movs	r3, #127	; 0x7f
   182c4:	9300      	str	r3, [sp, #0]
   182c6:	2320      	movs	r3, #32
   182c8:	2207      	movs	r2, #7
   182ca:	2105      	movs	r1, #5
   182cc:	4c7d      	ldr	r4, [pc, #500]	; (184c4 <cal_disp_message+0x270>)
   182ce:	47a0      	blx	r4
		glcd_clear_buffer();
   182d0:	4b7d      	ldr	r3, [pc, #500]	; (184c8 <cal_disp_message+0x274>)
   182d2:	4798      	blx	r3
		sprintf(display_str, "Distance Calibration:");
   182d4:	4a7d      	ldr	r2, [pc, #500]	; (184cc <cal_disp_message+0x278>)
   182d6:	4b82      	ldr	r3, [pc, #520]	; (184e0 <cal_disp_message+0x28c>)
   182d8:	0010      	movs	r0, r2
   182da:	0019      	movs	r1, r3
   182dc:	2316      	movs	r3, #22
   182de:	001a      	movs	r2, r3
   182e0:	4b7c      	ldr	r3, [pc, #496]	; (184d4 <cal_disp_message+0x280>)
   182e2:	4798      	blx	r3
		glcd_tiny_draw_string(0,0,display_str);
   182e4:	4b79      	ldr	r3, [pc, #484]	; (184cc <cal_disp_message+0x278>)
   182e6:	001a      	movs	r2, r3
   182e8:	2100      	movs	r1, #0
   182ea:	2000      	movs	r0, #0
   182ec:	4b7a      	ldr	r3, [pc, #488]	; (184d8 <cal_disp_message+0x284>)
   182ee:	4798      	blx	r3
		sprintf(display_str, "Place a target at");
   182f0:	4a76      	ldr	r2, [pc, #472]	; (184cc <cal_disp_message+0x278>)
   182f2:	4b7c      	ldr	r3, [pc, #496]	; (184e4 <cal_disp_message+0x290>)
   182f4:	0010      	movs	r0, r2
   182f6:	0019      	movs	r1, r3
   182f8:	2312      	movs	r3, #18
   182fa:	001a      	movs	r2, r3
   182fc:	4b75      	ldr	r3, [pc, #468]	; (184d4 <cal_disp_message+0x280>)
   182fe:	4798      	blx	r3
		glcd_tiny_draw_string(0,1,display_str);
   18300:	4b72      	ldr	r3, [pc, #456]	; (184cc <cal_disp_message+0x278>)
   18302:	001a      	movs	r2, r3
   18304:	2101      	movs	r1, #1
   18306:	2000      	movs	r0, #0
   18308:	4b73      	ldr	r3, [pc, #460]	; (184d8 <cal_disp_message+0x284>)
   1830a:	4798      	blx	r3
		if (options.current_unit_dist == feet){
   1830c:	4b76      	ldr	r3, [pc, #472]	; (184e8 <cal_disp_message+0x294>)
   1830e:	781b      	ldrb	r3, [r3, #0]
   18310:	2b00      	cmp	r3, #0
   18312:	d10c      	bne.n	1832e <cal_disp_message+0xda>
			sprintf(display_str, "  %.1f feet.",dist_cal_setpoint_ft);
   18314:	4a75      	ldr	r2, [pc, #468]	; (184ec <cal_disp_message+0x298>)
   18316:	4b76      	ldr	r3, [pc, #472]	; (184f0 <cal_disp_message+0x29c>)
   18318:	1c10      	adds	r0, r2, #0
   1831a:	4798      	blx	r3
   1831c:	0003      	movs	r3, r0
   1831e:	000c      	movs	r4, r1
   18320:	4974      	ldr	r1, [pc, #464]	; (184f4 <cal_disp_message+0x2a0>)
   18322:	486a      	ldr	r0, [pc, #424]	; (184cc <cal_disp_message+0x278>)
   18324:	001a      	movs	r2, r3
   18326:	0023      	movs	r3, r4
   18328:	4c73      	ldr	r4, [pc, #460]	; (184f8 <cal_disp_message+0x2a4>)
   1832a:	47a0      	blx	r4
   1832c:	e00c      	b.n	18348 <cal_disp_message+0xf4>
		}else{
			sprintf(display_str, "  %.1f meters.",dist_cal_setpoint_mt);
   1832e:	22fe      	movs	r2, #254	; 0xfe
   18330:	0592      	lsls	r2, r2, #22
   18332:	4b6f      	ldr	r3, [pc, #444]	; (184f0 <cal_disp_message+0x29c>)
   18334:	1c10      	adds	r0, r2, #0
   18336:	4798      	blx	r3
   18338:	0003      	movs	r3, r0
   1833a:	000c      	movs	r4, r1
   1833c:	496f      	ldr	r1, [pc, #444]	; (184fc <cal_disp_message+0x2a8>)
   1833e:	4863      	ldr	r0, [pc, #396]	; (184cc <cal_disp_message+0x278>)
   18340:	001a      	movs	r2, r3
   18342:	0023      	movs	r3, r4
   18344:	4c6c      	ldr	r4, [pc, #432]	; (184f8 <cal_disp_message+0x2a4>)
   18346:	47a0      	blx	r4
		}
		glcd_tiny_draw_string(0,2,display_str);
   18348:	4b60      	ldr	r3, [pc, #384]	; (184cc <cal_disp_message+0x278>)
   1834a:	001a      	movs	r2, r3
   1834c:	2102      	movs	r1, #2
   1834e:	2000      	movs	r0, #0
   18350:	4b61      	ldr	r3, [pc, #388]	; (184d8 <cal_disp_message+0x284>)
   18352:	4798      	blx	r3
		sprintf(display_str, "Take min. 4 shots in");
   18354:	4a5d      	ldr	r2, [pc, #372]	; (184cc <cal_disp_message+0x278>)
   18356:	4b6a      	ldr	r3, [pc, #424]	; (18500 <cal_disp_message+0x2ac>)
   18358:	0010      	movs	r0, r2
   1835a:	0019      	movs	r1, r3
   1835c:	2315      	movs	r3, #21
   1835e:	001a      	movs	r2, r3
   18360:	4b5c      	ldr	r3, [pc, #368]	; (184d4 <cal_disp_message+0x280>)
   18362:	4798      	blx	r3
		glcd_tiny_draw_string(0,3,display_str);
   18364:	4b59      	ldr	r3, [pc, #356]	; (184cc <cal_disp_message+0x278>)
   18366:	001a      	movs	r2, r3
   18368:	2103      	movs	r1, #3
   1836a:	2000      	movs	r0, #0
   1836c:	4b5a      	ldr	r3, [pc, #360]	; (184d8 <cal_disp_message+0x284>)
   1836e:	4798      	blx	r3
		sprintf(display_str, "Multiple Orientations");
   18370:	4a56      	ldr	r2, [pc, #344]	; (184cc <cal_disp_message+0x278>)
   18372:	4b64      	ldr	r3, [pc, #400]	; (18504 <cal_disp_message+0x2b0>)
   18374:	0010      	movs	r0, r2
   18376:	0019      	movs	r1, r3
   18378:	2316      	movs	r3, #22
   1837a:	001a      	movs	r2, r3
   1837c:	4b55      	ldr	r3, [pc, #340]	; (184d4 <cal_disp_message+0x280>)
   1837e:	4798      	blx	r3
		glcd_tiny_draw_string(0,4,display_str);
   18380:	4b52      	ldr	r3, [pc, #328]	; (184cc <cal_disp_message+0x278>)
   18382:	001a      	movs	r2, r3
   18384:	2104      	movs	r1, #4
   18386:	2000      	movs	r0, #0
   18388:	4b53      	ldr	r3, [pc, #332]	; (184d8 <cal_disp_message+0x284>)
   1838a:	4798      	blx	r3
		sprintf(display_str, "Only last 4 used.");
   1838c:	4a4f      	ldr	r2, [pc, #316]	; (184cc <cal_disp_message+0x278>)
   1838e:	4b5e      	ldr	r3, [pc, #376]	; (18508 <cal_disp_message+0x2b4>)
   18390:	0010      	movs	r0, r2
   18392:	0019      	movs	r1, r3
   18394:	2312      	movs	r3, #18
   18396:	001a      	movs	r2, r3
   18398:	4b4e      	ldr	r3, [pc, #312]	; (184d4 <cal_disp_message+0x280>)
   1839a:	4798      	blx	r3
		glcd_tiny_draw_string(0,5,display_str);
   1839c:	4b4b      	ldr	r3, [pc, #300]	; (184cc <cal_disp_message+0x278>)
   1839e:	001a      	movs	r2, r3
   183a0:	2105      	movs	r1, #5
   183a2:	2000      	movs	r0, #0
   183a4:	4b4c      	ldr	r3, [pc, #304]	; (184d8 <cal_disp_message+0x284>)
   183a6:	4798      	blx	r3
   183a8:	e062      	b.n	18470 <cal_disp_message+0x21c>
		
		
		
	}else if(current_state == st_loop_test){
   183aa:	4b44      	ldr	r3, [pc, #272]	; (184bc <cal_disp_message+0x268>)
   183ac:	781b      	ldrb	r3, [r3, #0]
   183ae:	b2db      	uxtb	r3, r3
   183b0:	2b0f      	cmp	r3, #15
   183b2:	d15d      	bne.n	18470 <cal_disp_message+0x21c>
		glcd_tiny_set_font(Font5x7,5,7,32,127);
   183b4:	4842      	ldr	r0, [pc, #264]	; (184c0 <cal_disp_message+0x26c>)
   183b6:	237f      	movs	r3, #127	; 0x7f
   183b8:	9300      	str	r3, [sp, #0]
   183ba:	2320      	movs	r3, #32
   183bc:	2207      	movs	r2, #7
   183be:	2105      	movs	r1, #5
   183c0:	4c40      	ldr	r4, [pc, #256]	; (184c4 <cal_disp_message+0x270>)
   183c2:	47a0      	blx	r4
		glcd_clear_buffer();
   183c4:	4b40      	ldr	r3, [pc, #256]	; (184c8 <cal_disp_message+0x274>)
   183c6:	4798      	blx	r3
		sprintf(display_str, "Loop Test:");
   183c8:	4a40      	ldr	r2, [pc, #256]	; (184cc <cal_disp_message+0x278>)
   183ca:	4b50      	ldr	r3, [pc, #320]	; (1850c <cal_disp_message+0x2b8>)
   183cc:	0010      	movs	r0, r2
   183ce:	0019      	movs	r1, r3
   183d0:	230b      	movs	r3, #11
   183d2:	001a      	movs	r2, r3
   183d4:	4b3f      	ldr	r3, [pc, #252]	; (184d4 <cal_disp_message+0x280>)
   183d6:	4798      	blx	r3
		glcd_tiny_draw_string(0,0,display_str);
   183d8:	4b3c      	ldr	r3, [pc, #240]	; (184cc <cal_disp_message+0x278>)
   183da:	001a      	movs	r2, r3
   183dc:	2100      	movs	r1, #0
   183de:	2000      	movs	r0, #0
   183e0:	4b3d      	ldr	r3, [pc, #244]	; (184d8 <cal_disp_message+0x284>)
   183e2:	4798      	blx	r3
		sprintf(display_str, "Take a series of");
   183e4:	4a39      	ldr	r2, [pc, #228]	; (184cc <cal_disp_message+0x278>)
   183e6:	4b4a      	ldr	r3, [pc, #296]	; (18510 <cal_disp_message+0x2bc>)
   183e8:	0010      	movs	r0, r2
   183ea:	0019      	movs	r1, r3
   183ec:	2311      	movs	r3, #17
   183ee:	001a      	movs	r2, r3
   183f0:	4b38      	ldr	r3, [pc, #224]	; (184d4 <cal_disp_message+0x280>)
   183f2:	4798      	blx	r3
		glcd_tiny_draw_string(0,1,display_str);
   183f4:	4b35      	ldr	r3, [pc, #212]	; (184cc <cal_disp_message+0x278>)
   183f6:	001a      	movs	r2, r3
   183f8:	2101      	movs	r1, #1
   183fa:	2000      	movs	r0, #0
   183fc:	4b36      	ldr	r3, [pc, #216]	; (184d8 <cal_disp_message+0x284>)
   183fe:	4798      	blx	r3
		sprintf(display_str, "measurements ending");
   18400:	4a32      	ldr	r2, [pc, #200]	; (184cc <cal_disp_message+0x278>)
   18402:	4b44      	ldr	r3, [pc, #272]	; (18514 <cal_disp_message+0x2c0>)
   18404:	0010      	movs	r0, r2
   18406:	0019      	movs	r1, r3
   18408:	2314      	movs	r3, #20
   1840a:	001a      	movs	r2, r3
   1840c:	4b31      	ldr	r3, [pc, #196]	; (184d4 <cal_disp_message+0x280>)
   1840e:	4798      	blx	r3
		glcd_tiny_draw_string(0,2,display_str);
   18410:	4b2e      	ldr	r3, [pc, #184]	; (184cc <cal_disp_message+0x278>)
   18412:	001a      	movs	r2, r3
   18414:	2102      	movs	r1, #2
   18416:	2000      	movs	r0, #0
   18418:	4b2f      	ldr	r3, [pc, #188]	; (184d8 <cal_disp_message+0x284>)
   1841a:	4798      	blx	r3
		sprintf(display_str, "back at the first");
   1841c:	4a2b      	ldr	r2, [pc, #172]	; (184cc <cal_disp_message+0x278>)
   1841e:	4b3e      	ldr	r3, [pc, #248]	; (18518 <cal_disp_message+0x2c4>)
   18420:	0010      	movs	r0, r2
   18422:	0019      	movs	r1, r3
   18424:	2312      	movs	r3, #18
   18426:	001a      	movs	r2, r3
   18428:	4b2a      	ldr	r3, [pc, #168]	; (184d4 <cal_disp_message+0x280>)
   1842a:	4798      	blx	r3
		glcd_tiny_draw_string(0,3,display_str);
   1842c:	4b27      	ldr	r3, [pc, #156]	; (184cc <cal_disp_message+0x278>)
   1842e:	001a      	movs	r2, r3
   18430:	2103      	movs	r1, #3
   18432:	2000      	movs	r0, #0
   18434:	4b28      	ldr	r3, [pc, #160]	; (184d8 <cal_disp_message+0x284>)
   18436:	4798      	blx	r3
		sprintf(display_str, "point.  Press 'Done'");
   18438:	4a24      	ldr	r2, [pc, #144]	; (184cc <cal_disp_message+0x278>)
   1843a:	4b38      	ldr	r3, [pc, #224]	; (1851c <cal_disp_message+0x2c8>)
   1843c:	0010      	movs	r0, r2
   1843e:	0019      	movs	r1, r3
   18440:	2315      	movs	r3, #21
   18442:	001a      	movs	r2, r3
   18444:	4b23      	ldr	r3, [pc, #140]	; (184d4 <cal_disp_message+0x280>)
   18446:	4798      	blx	r3
		glcd_tiny_draw_string(0,4,display_str);
   18448:	4b20      	ldr	r3, [pc, #128]	; (184cc <cal_disp_message+0x278>)
   1844a:	001a      	movs	r2, r3
   1844c:	2104      	movs	r1, #4
   1844e:	2000      	movs	r0, #0
   18450:	4b21      	ldr	r3, [pc, #132]	; (184d8 <cal_disp_message+0x284>)
   18452:	4798      	blx	r3
		sprintf(display_str, "when complete.");
   18454:	4a1d      	ldr	r2, [pc, #116]	; (184cc <cal_disp_message+0x278>)
   18456:	4b32      	ldr	r3, [pc, #200]	; (18520 <cal_disp_message+0x2cc>)
   18458:	0010      	movs	r0, r2
   1845a:	0019      	movs	r1, r3
   1845c:	230f      	movs	r3, #15
   1845e:	001a      	movs	r2, r3
   18460:	4b1c      	ldr	r3, [pc, #112]	; (184d4 <cal_disp_message+0x280>)
   18462:	4798      	blx	r3
		glcd_tiny_draw_string(0,5,display_str);
   18464:	4b19      	ldr	r3, [pc, #100]	; (184cc <cal_disp_message+0x278>)
   18466:	001a      	movs	r2, r3
   18468:	2105      	movs	r1, #5
   1846a:	2000      	movs	r0, #0
   1846c:	4b1a      	ldr	r3, [pc, #104]	; (184d8 <cal_disp_message+0x284>)
   1846e:	4798      	blx	r3
	}
	sprintf(display_str, "Press any button...");
   18470:	4a16      	ldr	r2, [pc, #88]	; (184cc <cal_disp_message+0x278>)
   18472:	4b2c      	ldr	r3, [pc, #176]	; (18524 <cal_disp_message+0x2d0>)
   18474:	0010      	movs	r0, r2
   18476:	0019      	movs	r1, r3
   18478:	2314      	movs	r3, #20
   1847a:	001a      	movs	r2, r3
   1847c:	4b15      	ldr	r3, [pc, #84]	; (184d4 <cal_disp_message+0x280>)
   1847e:	4798      	blx	r3
	glcd_tiny_draw_string(10,7,display_str);
   18480:	4b12      	ldr	r3, [pc, #72]	; (184cc <cal_disp_message+0x278>)
   18482:	001a      	movs	r2, r3
   18484:	2107      	movs	r1, #7
   18486:	200a      	movs	r0, #10
   18488:	4b13      	ldr	r3, [pc, #76]	; (184d8 <cal_disp_message+0x284>)
   1848a:	4798      	blx	r3
	glcd_write();
   1848c:	4b26      	ldr	r3, [pc, #152]	; (18528 <cal_disp_message+0x2d4>)
   1848e:	4798      	blx	r3
	while((current_input == input_none) || (current_input == input_1sec));//hold here until an input
   18490:	46c0      	nop			; (mov r8, r8)
   18492:	4b26      	ldr	r3, [pc, #152]	; (1852c <cal_disp_message+0x2d8>)
   18494:	781b      	ldrb	r3, [r3, #0]
   18496:	b2db      	uxtb	r3, r3
   18498:	2b00      	cmp	r3, #0
   1849a:	d0fa      	beq.n	18492 <cal_disp_message+0x23e>
   1849c:	4b23      	ldr	r3, [pc, #140]	; (1852c <cal_disp_message+0x2d8>)
   1849e:	781b      	ldrb	r3, [r3, #0]
   184a0:	b2db      	uxtb	r3, r3
   184a2:	2b07      	cmp	r3, #7
   184a4:	d0f5      	beq.n	18492 <cal_disp_message+0x23e>
	current_input = input_none;
   184a6:	4b21      	ldr	r3, [pc, #132]	; (1852c <cal_disp_message+0x2d8>)
   184a8:	2200      	movs	r2, #0
   184aa:	701a      	strb	r2, [r3, #0]
	wdt_enable();
   184ac:	4b20      	ldr	r3, [pc, #128]	; (18530 <cal_disp_message+0x2dc>)
   184ae:	4798      	blx	r3
}
   184b0:	46c0      	nop			; (mov r8, r8)
   184b2:	46bd      	mov	sp, r7
   184b4:	b001      	add	sp, #4
   184b6:	bd90      	pop	{r4, r7, pc}
   184b8:	00003fc5 	.word	0x00003fc5
   184bc:	200027fc 	.word	0x200027fc
   184c0:	00025dd0 	.word	0x00025dd0
   184c4:	00013505 	.word	0x00013505
   184c8:	000125a5 	.word	0x000125a5
   184cc:	20002f78 	.word	0x20002f78
   184d0:	0002635c 	.word	0x0002635c
   184d4:	00020fa5 	.word	0x00020fa5
   184d8:	00013691 	.word	0x00013691
   184dc:	00026374 	.word	0x00026374
   184e0:	000263ec 	.word	0x000263ec
   184e4:	00026404 	.word	0x00026404
   184e8:	20002eec 	.word	0x20002eec
   184ec:	40400000 	.word	0x40400000
   184f0:	00020d99 	.word	0x00020d99
   184f4:	00026418 	.word	0x00026418
   184f8:	000210bd 	.word	0x000210bd
   184fc:	00026428 	.word	0x00026428
   18500:	00026438 	.word	0x00026438
   18504:	00026450 	.word	0x00026450
   18508:	00026468 	.word	0x00026468
   1850c:	000261fc 	.word	0x000261fc
   18510:	0002647c 	.word	0x0002647c
   18514:	00026490 	.word	0x00026490
   18518:	000264a4 	.word	0x000264a4
   1851c:	000264b8 	.word	0x000264b8
   18520:	000264d0 	.word	0x000264d0
   18524:	000264e0 	.word	0x000264e0
   18528:	00012de9 	.word	0x00012de9
   1852c:	20003b78 	.word	0x20003b78
   18530:	00003f99 	.word	0x00003f99

00018534 <fn_disp_cal_report>:

void  fn_disp_cal_report(void){
   18534:	b5f0      	push	{r4, r5, r6, r7, lr}
   18536:	b089      	sub	sp, #36	; 0x24
   18538:	af04      	add	r7, sp, #16
	#define maxPages 3
	static uint8_t pageView;
	if (state_change){
   1853a:	4bd2      	ldr	r3, [pc, #840]	; (18884 <fn_disp_cal_report+0x350>)
   1853c:	781b      	ldrb	r3, [r3, #0]
   1853e:	b2db      	uxtb	r3, r3
   18540:	2b00      	cmp	r3, #0
   18542:	d002      	beq.n	1854a <fn_disp_cal_report+0x16>
		pageView = 1;
   18544:	4bd0      	ldr	r3, [pc, #832]	; (18888 <fn_disp_cal_report+0x354>)
   18546:	2201      	movs	r2, #1
   18548:	701a      	strb	r2, [r3, #0]
	}
	
	// Button Handler
	switch(last_input){
   1854a:	4bd0      	ldr	r3, [pc, #832]	; (1888c <fn_disp_cal_report+0x358>)
   1854c:	781b      	ldrb	r3, [r3, #0]
   1854e:	b2db      	uxtb	r3, r3
   18550:	2b02      	cmp	r3, #2
   18552:	d002      	beq.n	1855a <fn_disp_cal_report+0x26>
   18554:	2b03      	cmp	r3, #3
   18556:	d00b      	beq.n	18570 <fn_disp_cal_report+0x3c>
		case input_button3:
			if (pageView<maxPages){pageView++;}
			break;
			//  ButtonE and Button4 exit, handled by state machine
		default:
			break;
   18558:	e018      	b.n	1858c <fn_disp_cal_report+0x58>
			if (pageView>1){pageView--;}
   1855a:	4bcb      	ldr	r3, [pc, #812]	; (18888 <fn_disp_cal_report+0x354>)
   1855c:	781b      	ldrb	r3, [r3, #0]
   1855e:	2b01      	cmp	r3, #1
   18560:	d911      	bls.n	18586 <fn_disp_cal_report+0x52>
   18562:	4bc9      	ldr	r3, [pc, #804]	; (18888 <fn_disp_cal_report+0x354>)
   18564:	781b      	ldrb	r3, [r3, #0]
   18566:	3b01      	subs	r3, #1
   18568:	b2da      	uxtb	r2, r3
   1856a:	4bc7      	ldr	r3, [pc, #796]	; (18888 <fn_disp_cal_report+0x354>)
   1856c:	701a      	strb	r2, [r3, #0]
			break;	
   1856e:	e00a      	b.n	18586 <fn_disp_cal_report+0x52>
			if (pageView<maxPages){pageView++;}
   18570:	4bc5      	ldr	r3, [pc, #788]	; (18888 <fn_disp_cal_report+0x354>)
   18572:	781b      	ldrb	r3, [r3, #0]
   18574:	2b02      	cmp	r3, #2
   18576:	d808      	bhi.n	1858a <fn_disp_cal_report+0x56>
   18578:	4bc3      	ldr	r3, [pc, #780]	; (18888 <fn_disp_cal_report+0x354>)
   1857a:	781b      	ldrb	r3, [r3, #0]
   1857c:	3301      	adds	r3, #1
   1857e:	b2da      	uxtb	r2, r3
   18580:	4bc1      	ldr	r3, [pc, #772]	; (18888 <fn_disp_cal_report+0x354>)
   18582:	701a      	strb	r2, [r3, #0]
			break;
   18584:	e001      	b.n	1858a <fn_disp_cal_report+0x56>
			break;	
   18586:	46c0      	nop			; (mov r8, r8)
   18588:	e000      	b.n	1858c <fn_disp_cal_report+0x58>
			break;
   1858a:	46c0      	nop			; (mov r8, r8)
	}
	glcd_tiny_set_font(Font5x7,5,7,32,127);
   1858c:	48c0      	ldr	r0, [pc, #768]	; (18890 <fn_disp_cal_report+0x35c>)
   1858e:	237f      	movs	r3, #127	; 0x7f
   18590:	9300      	str	r3, [sp, #0]
   18592:	2320      	movs	r3, #32
   18594:	2207      	movs	r2, #7
   18596:	2105      	movs	r1, #5
   18598:	4cbe      	ldr	r4, [pc, #760]	; (18894 <fn_disp_cal_report+0x360>)
   1859a:	47a0      	blx	r4
	glcd_clear_buffer();
   1859c:	4bbe      	ldr	r3, [pc, #760]	; (18898 <fn_disp_cal_report+0x364>)
   1859e:	4798      	blx	r3
	sprintf(display_str, "Calibration Report:");
   185a0:	4abe      	ldr	r2, [pc, #760]	; (1889c <fn_disp_cal_report+0x368>)
   185a2:	4bbf      	ldr	r3, [pc, #764]	; (188a0 <fn_disp_cal_report+0x36c>)
   185a4:	0010      	movs	r0, r2
   185a6:	0019      	movs	r1, r3
   185a8:	2314      	movs	r3, #20
   185aa:	001a      	movs	r2, r3
   185ac:	4bbd      	ldr	r3, [pc, #756]	; (188a4 <fn_disp_cal_report+0x370>)
   185ae:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   185b0:	4bba      	ldr	r3, [pc, #744]	; (1889c <fn_disp_cal_report+0x368>)
   185b2:	001a      	movs	r2, r3
   185b4:	2100      	movs	r1, #0
   185b6:	2000      	movs	r0, #0
   185b8:	4bbb      	ldr	r3, [pc, #748]	; (188a8 <fn_disp_cal_report+0x374>)
   185ba:	4798      	blx	r3
	
	switch(pageView){
   185bc:	4bb2      	ldr	r3, [pc, #712]	; (18888 <fn_disp_cal_report+0x354>)
   185be:	781b      	ldrb	r3, [r3, #0]
   185c0:	2b02      	cmp	r3, #2
   185c2:	d07a      	beq.n	186ba <fn_disp_cal_report+0x186>
   185c4:	2b03      	cmp	r3, #3
   185c6:	d100      	bne.n	185ca <fn_disp_cal_report+0x96>
   185c8:	e192      	b.n	188f0 <fn_disp_cal_report+0x3bc>
   185ca:	2b01      	cmp	r3, #1
   185cc:	d000      	beq.n	185d0 <fn_disp_cal_report+0x9c>
   185ce:	e1ff      	b.n	189d0 <fn_disp_cal_report+0x49c>
		///////////////////////// AZM and INC Report
		case 1:
			//// Page 1			
			sprintf(display_str, "Azimuth & Inclination");
   185d0:	4ab2      	ldr	r2, [pc, #712]	; (1889c <fn_disp_cal_report+0x368>)
   185d2:	4bb6      	ldr	r3, [pc, #728]	; (188ac <fn_disp_cal_report+0x378>)
   185d4:	0010      	movs	r0, r2
   185d6:	0019      	movs	r1, r3
   185d8:	2316      	movs	r3, #22
   185da:	001a      	movs	r2, r3
   185dc:	4bb1      	ldr	r3, [pc, #708]	; (188a4 <fn_disp_cal_report+0x370>)
   185de:	4798      	blx	r3
			glcd_tiny_draw_string(0,1,display_str);
   185e0:	4bae      	ldr	r3, [pc, #696]	; (1889c <fn_disp_cal_report+0x368>)
   185e2:	001a      	movs	r2, r3
   185e4:	2101      	movs	r1, #1
   185e6:	2000      	movs	r0, #0
   185e8:	4baf      	ldr	r3, [pc, #700]	; (188a8 <fn_disp_cal_report+0x374>)
   185ea:	4798      	blx	r3
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
				cal_report_azm_inc.time_struct.year, cal_report_azm_inc.time_struct.month, cal_report_azm_inc.time_struct.date,
   185ec:	4bb0      	ldr	r3, [pc, #704]	; (188b0 <fn_disp_cal_report+0x37c>)
   185ee:	2246      	movs	r2, #70	; 0x46
   185f0:	5c9b      	ldrb	r3, [r3, r2]
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   185f2:	60bb      	str	r3, [r7, #8]
				cal_report_azm_inc.time_struct.year, cal_report_azm_inc.time_struct.month, cal_report_azm_inc.time_struct.date,
   185f4:	4bae      	ldr	r3, [pc, #696]	; (188b0 <fn_disp_cal_report+0x37c>)
   185f6:	2245      	movs	r2, #69	; 0x45
   185f8:	5c9b      	ldrb	r3, [r3, r2]
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   185fa:	607b      	str	r3, [r7, #4]
				cal_report_azm_inc.time_struct.year, cal_report_azm_inc.time_struct.month, cal_report_azm_inc.time_struct.date,
   185fc:	4bac      	ldr	r3, [pc, #688]	; (188b0 <fn_disp_cal_report+0x37c>)
   185fe:	2244      	movs	r2, #68	; 0x44
   18600:	5c9b      	ldrb	r3, [r3, r2]
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   18602:	001c      	movs	r4, r3
				cal_report_azm_inc.time_struct.hours, cal_report_azm_inc.time_struct.minutes, cal_report_azm_inc.time_struct.seconds);
   18604:	4baa      	ldr	r3, [pc, #680]	; (188b0 <fn_disp_cal_report+0x37c>)
   18606:	2242      	movs	r2, #66	; 0x42
   18608:	5c9b      	ldrb	r3, [r3, r2]
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   1860a:	001d      	movs	r5, r3
				cal_report_azm_inc.time_struct.hours, cal_report_azm_inc.time_struct.minutes, cal_report_azm_inc.time_struct.seconds);
   1860c:	4ba8      	ldr	r3, [pc, #672]	; (188b0 <fn_disp_cal_report+0x37c>)
   1860e:	2241      	movs	r2, #65	; 0x41
   18610:	5c9b      	ldrb	r3, [r3, r2]
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   18612:	001e      	movs	r6, r3
				cal_report_azm_inc.time_struct.hours, cal_report_azm_inc.time_struct.minutes, cal_report_azm_inc.time_struct.seconds);
   18614:	4ba6      	ldr	r3, [pc, #664]	; (188b0 <fn_disp_cal_report+0x37c>)
   18616:	2240      	movs	r2, #64	; 0x40
   18618:	5c9b      	ldrb	r3, [r3, r2]
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   1861a:	49a6      	ldr	r1, [pc, #664]	; (188b4 <fn_disp_cal_report+0x380>)
   1861c:	489f      	ldr	r0, [pc, #636]	; (1889c <fn_disp_cal_report+0x368>)
   1861e:	9303      	str	r3, [sp, #12]
   18620:	9602      	str	r6, [sp, #8]
   18622:	9501      	str	r5, [sp, #4]
   18624:	9400      	str	r4, [sp, #0]
   18626:	687b      	ldr	r3, [r7, #4]
   18628:	68ba      	ldr	r2, [r7, #8]
   1862a:	4ca3      	ldr	r4, [pc, #652]	; (188b8 <fn_disp_cal_report+0x384>)
   1862c:	47a0      	blx	r4
			glcd_tiny_draw_string(0,2,display_str);
   1862e:	4b9b      	ldr	r3, [pc, #620]	; (1889c <fn_disp_cal_report+0x368>)
   18630:	001a      	movs	r2, r3
   18632:	2102      	movs	r1, #2
   18634:	2000      	movs	r0, #0
   18636:	4b9c      	ldr	r3, [pc, #624]	; (188a8 <fn_disp_cal_report+0x374>)
   18638:	4798      	blx	r3
			sprintf(display_str,"4-Point Groups: %d", cal_report_azm_inc.groups);
   1863a:	4b9d      	ldr	r3, [pc, #628]	; (188b0 <fn_disp_cal_report+0x37c>)
   1863c:	685a      	ldr	r2, [r3, #4]
   1863e:	499f      	ldr	r1, [pc, #636]	; (188bc <fn_disp_cal_report+0x388>)
   18640:	4b96      	ldr	r3, [pc, #600]	; (1889c <fn_disp_cal_report+0x368>)
   18642:	0018      	movs	r0, r3
   18644:	4b9c      	ldr	r3, [pc, #624]	; (188b8 <fn_disp_cal_report+0x384>)
   18646:	4798      	blx	r3
			glcd_tiny_draw_string(0,3,display_str);
   18648:	4b94      	ldr	r3, [pc, #592]	; (1889c <fn_disp_cal_report+0x368>)
   1864a:	001a      	movs	r2, r3
   1864c:	2103      	movs	r1, #3
   1864e:	2000      	movs	r0, #0
   18650:	4b95      	ldr	r3, [pc, #596]	; (188a8 <fn_disp_cal_report+0x374>)
   18652:	4798      	blx	r3
			sprintf(display_str,"Azm Stdev: %.3f", cal_report_azm_inc.azm_angle_err);
   18654:	4b96      	ldr	r3, [pc, #600]	; (188b0 <fn_disp_cal_report+0x37c>)
   18656:	695a      	ldr	r2, [r3, #20]
   18658:	4b99      	ldr	r3, [pc, #612]	; (188c0 <fn_disp_cal_report+0x38c>)
   1865a:	1c10      	adds	r0, r2, #0
   1865c:	4798      	blx	r3
   1865e:	0003      	movs	r3, r0
   18660:	000c      	movs	r4, r1
   18662:	4998      	ldr	r1, [pc, #608]	; (188c4 <fn_disp_cal_report+0x390>)
   18664:	488d      	ldr	r0, [pc, #564]	; (1889c <fn_disp_cal_report+0x368>)
   18666:	001a      	movs	r2, r3
   18668:	0023      	movs	r3, r4
   1866a:	4c93      	ldr	r4, [pc, #588]	; (188b8 <fn_disp_cal_report+0x384>)
   1866c:	47a0      	blx	r4
			glcd_tiny_draw_string(0,5,display_str);
   1866e:	4b8b      	ldr	r3, [pc, #556]	; (1889c <fn_disp_cal_report+0x368>)
   18670:	001a      	movs	r2, r3
   18672:	2105      	movs	r1, #5
   18674:	2000      	movs	r0, #0
   18676:	4b8c      	ldr	r3, [pc, #560]	; (188a8 <fn_disp_cal_report+0x374>)
   18678:	4798      	blx	r3
			glcd_draw_circle(98, 41, 1, BLACK);// Draw degree symbol
   1867a:	2301      	movs	r3, #1
   1867c:	2201      	movs	r2, #1
   1867e:	2129      	movs	r1, #41	; 0x29
   18680:	2062      	movs	r0, #98	; 0x62
   18682:	4c91      	ldr	r4, [pc, #580]	; (188c8 <fn_disp_cal_report+0x394>)
   18684:	47a0      	blx	r4
			sprintf(display_str,"Inc Stdev: %.3f", cal_report_azm_inc.inc_angle_err);
   18686:	4b8a      	ldr	r3, [pc, #552]	; (188b0 <fn_disp_cal_report+0x37c>)
   18688:	691a      	ldr	r2, [r3, #16]
   1868a:	4b8d      	ldr	r3, [pc, #564]	; (188c0 <fn_disp_cal_report+0x38c>)
   1868c:	1c10      	adds	r0, r2, #0
   1868e:	4798      	blx	r3
   18690:	0003      	movs	r3, r0
   18692:	000c      	movs	r4, r1
   18694:	498d      	ldr	r1, [pc, #564]	; (188cc <fn_disp_cal_report+0x398>)
   18696:	4881      	ldr	r0, [pc, #516]	; (1889c <fn_disp_cal_report+0x368>)
   18698:	001a      	movs	r2, r3
   1869a:	0023      	movs	r3, r4
   1869c:	4c86      	ldr	r4, [pc, #536]	; (188b8 <fn_disp_cal_report+0x384>)
   1869e:	47a0      	blx	r4
			glcd_tiny_draw_string(0,6,display_str);
   186a0:	4b7e      	ldr	r3, [pc, #504]	; (1889c <fn_disp_cal_report+0x368>)
   186a2:	001a      	movs	r2, r3
   186a4:	2106      	movs	r1, #6
   186a6:	2000      	movs	r0, #0
   186a8:	4b7f      	ldr	r3, [pc, #508]	; (188a8 <fn_disp_cal_report+0x374>)
   186aa:	4798      	blx	r3
			glcd_draw_circle(98, 49, 1, BLACK);// Draw degree symbol
   186ac:	2301      	movs	r3, #1
   186ae:	2201      	movs	r2, #1
   186b0:	2131      	movs	r1, #49	; 0x31
   186b2:	2062      	movs	r0, #98	; 0x62
   186b4:	4c84      	ldr	r4, [pc, #528]	; (188c8 <fn_disp_cal_report+0x394>)
   186b6:	47a0      	blx	r4
			break;
   186b8:	e18a      	b.n	189d0 <fn_disp_cal_report+0x49c>
		case 2:
			//// Page 2
			sprintf(display_str, "Azimuth & Inclination");
   186ba:	4a78      	ldr	r2, [pc, #480]	; (1889c <fn_disp_cal_report+0x368>)
   186bc:	4b7b      	ldr	r3, [pc, #492]	; (188ac <fn_disp_cal_report+0x378>)
   186be:	0010      	movs	r0, r2
   186c0:	0019      	movs	r1, r3
   186c2:	2316      	movs	r3, #22
   186c4:	001a      	movs	r2, r3
   186c6:	4b77      	ldr	r3, [pc, #476]	; (188a4 <fn_disp_cal_report+0x370>)
   186c8:	4798      	blx	r3
			glcd_tiny_draw_string(0,1,display_str);
   186ca:	4b74      	ldr	r3, [pc, #464]	; (1889c <fn_disp_cal_report+0x368>)
   186cc:	001a      	movs	r2, r3
   186ce:	2101      	movs	r1, #1
   186d0:	2000      	movs	r0, #0
   186d2:	4b75      	ldr	r3, [pc, #468]	; (188a8 <fn_disp_cal_report+0x374>)
   186d4:	4798      	blx	r3
			// Sensor Disparity
			sprintf(display_str,"Sensor Delta X,Y,Z%%");
   186d6:	4a7e      	ldr	r2, [pc, #504]	; (188d0 <fn_disp_cal_report+0x39c>)
   186d8:	4b70      	ldr	r3, [pc, #448]	; (1889c <fn_disp_cal_report+0x368>)
   186da:	0011      	movs	r1, r2
   186dc:	0018      	movs	r0, r3
   186de:	4b76      	ldr	r3, [pc, #472]	; (188b8 <fn_disp_cal_report+0x384>)
   186e0:	4798      	blx	r3
			glcd_tiny_draw_string(0,2,display_str);
   186e2:	4b6e      	ldr	r3, [pc, #440]	; (1889c <fn_disp_cal_report+0x368>)
   186e4:	001a      	movs	r2, r3
   186e6:	2102      	movs	r1, #2
   186e8:	2000      	movs	r0, #0
   186ea:	4b6f      	ldr	r3, [pc, #444]	; (188a8 <fn_disp_cal_report+0x374>)
   186ec:	4798      	blx	r3
			sprintf(display_str,"A:%.3f,%.3f,%.3f",
				cal_report_azm_inc.disp_stdev_acc[0]*100, cal_report_azm_inc.disp_stdev_acc[1]*100, cal_report_azm_inc.disp_stdev_acc[2]*100);
   186ee:	4b70      	ldr	r3, [pc, #448]	; (188b0 <fn_disp_cal_report+0x37c>)
   186f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   186f2:	4b78      	ldr	r3, [pc, #480]	; (188d4 <fn_disp_cal_report+0x3a0>)
   186f4:	4978      	ldr	r1, [pc, #480]	; (188d8 <fn_disp_cal_report+0x3a4>)
   186f6:	1c10      	adds	r0, r2, #0
   186f8:	4798      	blx	r3
   186fa:	1c03      	adds	r3, r0, #0
   186fc:	1c1a      	adds	r2, r3, #0
			sprintf(display_str,"A:%.3f,%.3f,%.3f",
   186fe:	4b70      	ldr	r3, [pc, #448]	; (188c0 <fn_disp_cal_report+0x38c>)
   18700:	1c10      	adds	r0, r2, #0
   18702:	4798      	blx	r3
   18704:	60b8      	str	r0, [r7, #8]
   18706:	60f9      	str	r1, [r7, #12]
				cal_report_azm_inc.disp_stdev_acc[0]*100, cal_report_azm_inc.disp_stdev_acc[1]*100, cal_report_azm_inc.disp_stdev_acc[2]*100);
   18708:	4b69      	ldr	r3, [pc, #420]	; (188b0 <fn_disp_cal_report+0x37c>)
   1870a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1870c:	4b71      	ldr	r3, [pc, #452]	; (188d4 <fn_disp_cal_report+0x3a0>)
   1870e:	4972      	ldr	r1, [pc, #456]	; (188d8 <fn_disp_cal_report+0x3a4>)
   18710:	1c10      	adds	r0, r2, #0
   18712:	4798      	blx	r3
   18714:	1c03      	adds	r3, r0, #0
   18716:	1c1a      	adds	r2, r3, #0
			sprintf(display_str,"A:%.3f,%.3f,%.3f",
   18718:	4b69      	ldr	r3, [pc, #420]	; (188c0 <fn_disp_cal_report+0x38c>)
   1871a:	1c10      	adds	r0, r2, #0
   1871c:	4798      	blx	r3
   1871e:	0004      	movs	r4, r0
   18720:	000d      	movs	r5, r1
				cal_report_azm_inc.disp_stdev_acc[0]*100, cal_report_azm_inc.disp_stdev_acc[1]*100, cal_report_azm_inc.disp_stdev_acc[2]*100);
   18722:	4b63      	ldr	r3, [pc, #396]	; (188b0 <fn_disp_cal_report+0x37c>)
   18724:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   18726:	4b6b      	ldr	r3, [pc, #428]	; (188d4 <fn_disp_cal_report+0x3a0>)
   18728:	496b      	ldr	r1, [pc, #428]	; (188d8 <fn_disp_cal_report+0x3a4>)
   1872a:	1c10      	adds	r0, r2, #0
   1872c:	4798      	blx	r3
   1872e:	1c03      	adds	r3, r0, #0
   18730:	1c1a      	adds	r2, r3, #0
			sprintf(display_str,"A:%.3f,%.3f,%.3f",
   18732:	4b63      	ldr	r3, [pc, #396]	; (188c0 <fn_disp_cal_report+0x38c>)
   18734:	1c10      	adds	r0, r2, #0
   18736:	4798      	blx	r3
   18738:	0002      	movs	r2, r0
   1873a:	000b      	movs	r3, r1
   1873c:	4967      	ldr	r1, [pc, #412]	; (188dc <fn_disp_cal_report+0x3a8>)
   1873e:	4857      	ldr	r0, [pc, #348]	; (1889c <fn_disp_cal_report+0x368>)
   18740:	9202      	str	r2, [sp, #8]
   18742:	9303      	str	r3, [sp, #12]
   18744:	9400      	str	r4, [sp, #0]
   18746:	9501      	str	r5, [sp, #4]
   18748:	68ba      	ldr	r2, [r7, #8]
   1874a:	68fb      	ldr	r3, [r7, #12]
   1874c:	4c5a      	ldr	r4, [pc, #360]	; (188b8 <fn_disp_cal_report+0x384>)
   1874e:	47a0      	blx	r4
			glcd_tiny_draw_string(0,3,display_str);
   18750:	4b52      	ldr	r3, [pc, #328]	; (1889c <fn_disp_cal_report+0x368>)
   18752:	001a      	movs	r2, r3
   18754:	2103      	movs	r1, #3
   18756:	2000      	movs	r0, #0
   18758:	4b53      	ldr	r3, [pc, #332]	; (188a8 <fn_disp_cal_report+0x374>)
   1875a:	4798      	blx	r3
			sprintf(display_str,"C:%.3f,%.3f,%.3f",
				cal_report_azm_inc.disp_stdev_comp[0]*100, cal_report_azm_inc.disp_stdev_comp[1]*100, cal_report_azm_inc.disp_stdev_comp[2]*100);
   1875c:	4b54      	ldr	r3, [pc, #336]	; (188b0 <fn_disp_cal_report+0x37c>)
   1875e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   18760:	4b5c      	ldr	r3, [pc, #368]	; (188d4 <fn_disp_cal_report+0x3a0>)
   18762:	495d      	ldr	r1, [pc, #372]	; (188d8 <fn_disp_cal_report+0x3a4>)
   18764:	1c10      	adds	r0, r2, #0
   18766:	4798      	blx	r3
   18768:	1c03      	adds	r3, r0, #0
   1876a:	1c1a      	adds	r2, r3, #0
			sprintf(display_str,"C:%.3f,%.3f,%.3f",
   1876c:	4b54      	ldr	r3, [pc, #336]	; (188c0 <fn_disp_cal_report+0x38c>)
   1876e:	1c10      	adds	r0, r2, #0
   18770:	4798      	blx	r3
   18772:	60b8      	str	r0, [r7, #8]
   18774:	60f9      	str	r1, [r7, #12]
				cal_report_azm_inc.disp_stdev_comp[0]*100, cal_report_azm_inc.disp_stdev_comp[1]*100, cal_report_azm_inc.disp_stdev_comp[2]*100);
   18776:	4b4e      	ldr	r3, [pc, #312]	; (188b0 <fn_disp_cal_report+0x37c>)
   18778:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1877a:	4b56      	ldr	r3, [pc, #344]	; (188d4 <fn_disp_cal_report+0x3a0>)
   1877c:	4956      	ldr	r1, [pc, #344]	; (188d8 <fn_disp_cal_report+0x3a4>)
   1877e:	1c10      	adds	r0, r2, #0
   18780:	4798      	blx	r3
   18782:	1c03      	adds	r3, r0, #0
   18784:	1c1a      	adds	r2, r3, #0
			sprintf(display_str,"C:%.3f,%.3f,%.3f",
   18786:	4b4e      	ldr	r3, [pc, #312]	; (188c0 <fn_disp_cal_report+0x38c>)
   18788:	1c10      	adds	r0, r2, #0
   1878a:	4798      	blx	r3
   1878c:	0004      	movs	r4, r0
   1878e:	000d      	movs	r5, r1
				cal_report_azm_inc.disp_stdev_comp[0]*100, cal_report_azm_inc.disp_stdev_comp[1]*100, cal_report_azm_inc.disp_stdev_comp[2]*100);
   18790:	4b47      	ldr	r3, [pc, #284]	; (188b0 <fn_disp_cal_report+0x37c>)
   18792:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   18794:	4b4f      	ldr	r3, [pc, #316]	; (188d4 <fn_disp_cal_report+0x3a0>)
   18796:	4950      	ldr	r1, [pc, #320]	; (188d8 <fn_disp_cal_report+0x3a4>)
   18798:	1c10      	adds	r0, r2, #0
   1879a:	4798      	blx	r3
   1879c:	1c03      	adds	r3, r0, #0
   1879e:	1c1a      	adds	r2, r3, #0
			sprintf(display_str,"C:%.3f,%.3f,%.3f",
   187a0:	4b47      	ldr	r3, [pc, #284]	; (188c0 <fn_disp_cal_report+0x38c>)
   187a2:	1c10      	adds	r0, r2, #0
   187a4:	4798      	blx	r3
   187a6:	0002      	movs	r2, r0
   187a8:	000b      	movs	r3, r1
   187aa:	494d      	ldr	r1, [pc, #308]	; (188e0 <fn_disp_cal_report+0x3ac>)
   187ac:	483b      	ldr	r0, [pc, #236]	; (1889c <fn_disp_cal_report+0x368>)
   187ae:	9202      	str	r2, [sp, #8]
   187b0:	9303      	str	r3, [sp, #12]
   187b2:	9400      	str	r4, [sp, #0]
   187b4:	9501      	str	r5, [sp, #4]
   187b6:	68ba      	ldr	r2, [r7, #8]
   187b8:	68fb      	ldr	r3, [r7, #12]
   187ba:	4c3f      	ldr	r4, [pc, #252]	; (188b8 <fn_disp_cal_report+0x384>)
   187bc:	47a0      	blx	r4
			glcd_tiny_draw_string(0,4,display_str);
   187be:	4b37      	ldr	r3, [pc, #220]	; (1889c <fn_disp_cal_report+0x368>)
   187c0:	001a      	movs	r2, r3
   187c2:	2104      	movs	r1, #4
   187c4:	2000      	movs	r0, #0
   187c6:	4b38      	ldr	r3, [pc, #224]	; (188a8 <fn_disp_cal_report+0x374>)
   187c8:	4798      	blx	r3
			//  Magnitude Error			
			sprintf(display_str,"Magnitude Error %%");
   187ca:	4a46      	ldr	r2, [pc, #280]	; (188e4 <fn_disp_cal_report+0x3b0>)
   187cc:	4b33      	ldr	r3, [pc, #204]	; (1889c <fn_disp_cal_report+0x368>)
   187ce:	0011      	movs	r1, r2
   187d0:	0018      	movs	r0, r3
   187d2:	4b39      	ldr	r3, [pc, #228]	; (188b8 <fn_disp_cal_report+0x384>)
   187d4:	4798      	blx	r3
			glcd_tiny_draw_string(0,5,display_str);
   187d6:	4b31      	ldr	r3, [pc, #196]	; (1889c <fn_disp_cal_report+0x368>)
   187d8:	001a      	movs	r2, r3
   187da:	2105      	movs	r1, #5
   187dc:	2000      	movs	r0, #0
   187de:	4b32      	ldr	r3, [pc, #200]	; (188a8 <fn_disp_cal_report+0x374>)
   187e0:	4798      	blx	r3
			sprintf(display_str,"A1:%.3f A2:%.3f", cal_report_azm_inc.mag_stdev_a1*100, cal_report_azm_inc.mag_stdev_a2*100);
   187e2:	4b33      	ldr	r3, [pc, #204]	; (188b0 <fn_disp_cal_report+0x37c>)
   187e4:	699a      	ldr	r2, [r3, #24]
   187e6:	4b3b      	ldr	r3, [pc, #236]	; (188d4 <fn_disp_cal_report+0x3a0>)
   187e8:	493b      	ldr	r1, [pc, #236]	; (188d8 <fn_disp_cal_report+0x3a4>)
   187ea:	1c10      	adds	r0, r2, #0
   187ec:	4798      	blx	r3
   187ee:	1c03      	adds	r3, r0, #0
   187f0:	1c1a      	adds	r2, r3, #0
   187f2:	4b33      	ldr	r3, [pc, #204]	; (188c0 <fn_disp_cal_report+0x38c>)
   187f4:	1c10      	adds	r0, r2, #0
   187f6:	4798      	blx	r3
   187f8:	0005      	movs	r5, r0
   187fa:	000e      	movs	r6, r1
   187fc:	4b2c      	ldr	r3, [pc, #176]	; (188b0 <fn_disp_cal_report+0x37c>)
   187fe:	69da      	ldr	r2, [r3, #28]
   18800:	4b34      	ldr	r3, [pc, #208]	; (188d4 <fn_disp_cal_report+0x3a0>)
   18802:	4935      	ldr	r1, [pc, #212]	; (188d8 <fn_disp_cal_report+0x3a4>)
   18804:	1c10      	adds	r0, r2, #0
   18806:	4798      	blx	r3
   18808:	1c03      	adds	r3, r0, #0
   1880a:	1c1a      	adds	r2, r3, #0
   1880c:	4b2c      	ldr	r3, [pc, #176]	; (188c0 <fn_disp_cal_report+0x38c>)
   1880e:	1c10      	adds	r0, r2, #0
   18810:	4798      	blx	r3
   18812:	0003      	movs	r3, r0
   18814:	000c      	movs	r4, r1
   18816:	4934      	ldr	r1, [pc, #208]	; (188e8 <fn_disp_cal_report+0x3b4>)
   18818:	4820      	ldr	r0, [pc, #128]	; (1889c <fn_disp_cal_report+0x368>)
   1881a:	9300      	str	r3, [sp, #0]
   1881c:	9401      	str	r4, [sp, #4]
   1881e:	002a      	movs	r2, r5
   18820:	0033      	movs	r3, r6
   18822:	4c25      	ldr	r4, [pc, #148]	; (188b8 <fn_disp_cal_report+0x384>)
   18824:	47a0      	blx	r4
			glcd_tiny_draw_string(0,6,display_str);
   18826:	4b1d      	ldr	r3, [pc, #116]	; (1889c <fn_disp_cal_report+0x368>)
   18828:	001a      	movs	r2, r3
   1882a:	2106      	movs	r1, #6
   1882c:	2000      	movs	r0, #0
   1882e:	4b1e      	ldr	r3, [pc, #120]	; (188a8 <fn_disp_cal_report+0x374>)
   18830:	4798      	blx	r3
			sprintf(display_str,"C1:%.3f C2:%.3f", cal_report_azm_inc.mag_stdev_c1*100, cal_report_azm_inc.mag_stdev_c2*100);
   18832:	4b1f      	ldr	r3, [pc, #124]	; (188b0 <fn_disp_cal_report+0x37c>)
   18834:	6a1a      	ldr	r2, [r3, #32]
   18836:	4b27      	ldr	r3, [pc, #156]	; (188d4 <fn_disp_cal_report+0x3a0>)
   18838:	4927      	ldr	r1, [pc, #156]	; (188d8 <fn_disp_cal_report+0x3a4>)
   1883a:	1c10      	adds	r0, r2, #0
   1883c:	4798      	blx	r3
   1883e:	1c03      	adds	r3, r0, #0
   18840:	1c1a      	adds	r2, r3, #0
   18842:	4b1f      	ldr	r3, [pc, #124]	; (188c0 <fn_disp_cal_report+0x38c>)
   18844:	1c10      	adds	r0, r2, #0
   18846:	4798      	blx	r3
   18848:	0005      	movs	r5, r0
   1884a:	000e      	movs	r6, r1
   1884c:	4b18      	ldr	r3, [pc, #96]	; (188b0 <fn_disp_cal_report+0x37c>)
   1884e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   18850:	4b20      	ldr	r3, [pc, #128]	; (188d4 <fn_disp_cal_report+0x3a0>)
   18852:	4921      	ldr	r1, [pc, #132]	; (188d8 <fn_disp_cal_report+0x3a4>)
   18854:	1c10      	adds	r0, r2, #0
   18856:	4798      	blx	r3
   18858:	1c03      	adds	r3, r0, #0
   1885a:	1c1a      	adds	r2, r3, #0
   1885c:	4b18      	ldr	r3, [pc, #96]	; (188c0 <fn_disp_cal_report+0x38c>)
   1885e:	1c10      	adds	r0, r2, #0
   18860:	4798      	blx	r3
   18862:	0003      	movs	r3, r0
   18864:	000c      	movs	r4, r1
   18866:	4921      	ldr	r1, [pc, #132]	; (188ec <fn_disp_cal_report+0x3b8>)
   18868:	480c      	ldr	r0, [pc, #48]	; (1889c <fn_disp_cal_report+0x368>)
   1886a:	9300      	str	r3, [sp, #0]
   1886c:	9401      	str	r4, [sp, #4]
   1886e:	002a      	movs	r2, r5
   18870:	0033      	movs	r3, r6
   18872:	4c11      	ldr	r4, [pc, #68]	; (188b8 <fn_disp_cal_report+0x384>)
   18874:	47a0      	blx	r4
			glcd_tiny_draw_string(0,7,display_str);
   18876:	4b09      	ldr	r3, [pc, #36]	; (1889c <fn_disp_cal_report+0x368>)
   18878:	001a      	movs	r2, r3
   1887a:	2107      	movs	r1, #7
   1887c:	2000      	movs	r0, #0
   1887e:	4b0a      	ldr	r3, [pc, #40]	; (188a8 <fn_disp_cal_report+0x374>)
   18880:	4798      	blx	r3
		break;
   18882:	e0a5      	b.n	189d0 <fn_disp_cal_report+0x49c>
   18884:	20000110 	.word	0x20000110
   18888:	20000dfc 	.word	0x20000dfc
   1888c:	20003b7a 	.word	0x20003b7a
   18890:	00025dd0 	.word	0x00025dd0
   18894:	00013505 	.word	0x00013505
   18898:	000125a5 	.word	0x000125a5
   1889c:	20002f78 	.word	0x20002f78
   188a0:	000264f4 	.word	0x000264f4
   188a4:	00020fa5 	.word	0x00020fa5
   188a8:	00013691 	.word	0x00013691
   188ac:	00026508 	.word	0x00026508
   188b0:	2000188c 	.word	0x2000188c
   188b4:	00026520 	.word	0x00026520
   188b8:	000210bd 	.word	0x000210bd
   188bc:	00026540 	.word	0x00026540
   188c0:	00020d99 	.word	0x00020d99
   188c4:	00026554 	.word	0x00026554
   188c8:	000128cd 	.word	0x000128cd
   188cc:	00026564 	.word	0x00026564
   188d0:	00026574 	.word	0x00026574
   188d4:	0001eb65 	.word	0x0001eb65
   188d8:	42c80000 	.word	0x42c80000
   188dc:	0002658c 	.word	0x0002658c
   188e0:	000265a0 	.word	0x000265a0
   188e4:	000265b4 	.word	0x000265b4
   188e8:	000265c8 	.word	0x000265c8
   188ec:	000265d8 	.word	0x000265d8
		//////////////////////// Distance Report
		case 3:
			sprintf(display_str, "Distance");
   188f0:	4a48      	ldr	r2, [pc, #288]	; (18a14 <fn_disp_cal_report+0x4e0>)
   188f2:	4b49      	ldr	r3, [pc, #292]	; (18a18 <fn_disp_cal_report+0x4e4>)
   188f4:	0010      	movs	r0, r2
   188f6:	0019      	movs	r1, r3
   188f8:	2309      	movs	r3, #9
   188fa:	001a      	movs	r2, r3
   188fc:	4b47      	ldr	r3, [pc, #284]	; (18a1c <fn_disp_cal_report+0x4e8>)
   188fe:	4798      	blx	r3
			glcd_tiny_draw_string(0,1,display_str);
   18900:	4b44      	ldr	r3, [pc, #272]	; (18a14 <fn_disp_cal_report+0x4e0>)
   18902:	001a      	movs	r2, r3
   18904:	2101      	movs	r1, #1
   18906:	2000      	movs	r0, #0
   18908:	4b45      	ldr	r3, [pc, #276]	; (18a20 <fn_disp_cal_report+0x4ec>)
   1890a:	4798      	blx	r3
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
				cal_report_dist.time_struct.year, cal_report_dist.time_struct.month, cal_report_dist.time_struct.date,
   1890c:	4b45      	ldr	r3, [pc, #276]	; (18a24 <fn_disp_cal_report+0x4f0>)
   1890e:	2246      	movs	r2, #70	; 0x46
   18910:	5c9b      	ldrb	r3, [r3, r2]
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   18912:	60bb      	str	r3, [r7, #8]
				cal_report_dist.time_struct.year, cal_report_dist.time_struct.month, cal_report_dist.time_struct.date,
   18914:	4b43      	ldr	r3, [pc, #268]	; (18a24 <fn_disp_cal_report+0x4f0>)
   18916:	2245      	movs	r2, #69	; 0x45
   18918:	5c9b      	ldrb	r3, [r3, r2]
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   1891a:	607b      	str	r3, [r7, #4]
				cal_report_dist.time_struct.year, cal_report_dist.time_struct.month, cal_report_dist.time_struct.date,
   1891c:	4b41      	ldr	r3, [pc, #260]	; (18a24 <fn_disp_cal_report+0x4f0>)
   1891e:	2244      	movs	r2, #68	; 0x44
   18920:	5c9b      	ldrb	r3, [r3, r2]
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   18922:	001c      	movs	r4, r3
				cal_report_dist.time_struct.hours, cal_report_dist.time_struct.minutes, cal_report_dist.time_struct.seconds);
   18924:	4b3f      	ldr	r3, [pc, #252]	; (18a24 <fn_disp_cal_report+0x4f0>)
   18926:	2242      	movs	r2, #66	; 0x42
   18928:	5c9b      	ldrb	r3, [r3, r2]
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   1892a:	001d      	movs	r5, r3
				cal_report_dist.time_struct.hours, cal_report_dist.time_struct.minutes, cal_report_dist.time_struct.seconds);
   1892c:	4b3d      	ldr	r3, [pc, #244]	; (18a24 <fn_disp_cal_report+0x4f0>)
   1892e:	2241      	movs	r2, #65	; 0x41
   18930:	5c9b      	ldrb	r3, [r3, r2]
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   18932:	001e      	movs	r6, r3
				cal_report_dist.time_struct.hours, cal_report_dist.time_struct.minutes, cal_report_dist.time_struct.seconds);
   18934:	4b3b      	ldr	r3, [pc, #236]	; (18a24 <fn_disp_cal_report+0x4f0>)
   18936:	2240      	movs	r2, #64	; 0x40
   18938:	5c9b      	ldrb	r3, [r3, r2]
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   1893a:	493b      	ldr	r1, [pc, #236]	; (18a28 <fn_disp_cal_report+0x4f4>)
   1893c:	4835      	ldr	r0, [pc, #212]	; (18a14 <fn_disp_cal_report+0x4e0>)
   1893e:	9303      	str	r3, [sp, #12]
   18940:	9602      	str	r6, [sp, #8]
   18942:	9501      	str	r5, [sp, #4]
   18944:	9400      	str	r4, [sp, #0]
   18946:	687b      	ldr	r3, [r7, #4]
   18948:	68ba      	ldr	r2, [r7, #8]
   1894a:	4c38      	ldr	r4, [pc, #224]	; (18a2c <fn_disp_cal_report+0x4f8>)
   1894c:	47a0      	blx	r4
			glcd_tiny_draw_string(0,2,display_str);
   1894e:	4b31      	ldr	r3, [pc, #196]	; (18a14 <fn_disp_cal_report+0x4e0>)
   18950:	001a      	movs	r2, r3
   18952:	2102      	movs	r1, #2
   18954:	2000      	movs	r0, #0
   18956:	4b32      	ldr	r3, [pc, #200]	; (18a20 <fn_disp_cal_report+0x4ec>)
   18958:	4798      	blx	r3
			sprintf(display_str,"Rangefinder Offset:");
   1895a:	4a2e      	ldr	r2, [pc, #184]	; (18a14 <fn_disp_cal_report+0x4e0>)
   1895c:	4b34      	ldr	r3, [pc, #208]	; (18a30 <fn_disp_cal_report+0x4fc>)
   1895e:	0010      	movs	r0, r2
   18960:	0019      	movs	r1, r3
   18962:	2314      	movs	r3, #20
   18964:	001a      	movs	r2, r3
   18966:	4b2d      	ldr	r3, [pc, #180]	; (18a1c <fn_disp_cal_report+0x4e8>)
   18968:	4798      	blx	r3
			glcd_tiny_draw_string(0,4,display_str);
   1896a:	4b2a      	ldr	r3, [pc, #168]	; (18a14 <fn_disp_cal_report+0x4e0>)
   1896c:	001a      	movs	r2, r3
   1896e:	2104      	movs	r1, #4
   18970:	2000      	movs	r0, #0
   18972:	4b2b      	ldr	r3, [pc, #172]	; (18a20 <fn_disp_cal_report+0x4ec>)
   18974:	4798      	blx	r3
			sprintf(display_str,"  %.4f meters", dist_calst.dist_offset);
   18976:	4b2f      	ldr	r3, [pc, #188]	; (18a34 <fn_disp_cal_report+0x500>)
   18978:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   1897a:	4b2f      	ldr	r3, [pc, #188]	; (18a38 <fn_disp_cal_report+0x504>)
   1897c:	1c10      	adds	r0, r2, #0
   1897e:	4798      	blx	r3
   18980:	0003      	movs	r3, r0
   18982:	000c      	movs	r4, r1
   18984:	492d      	ldr	r1, [pc, #180]	; (18a3c <fn_disp_cal_report+0x508>)
   18986:	4823      	ldr	r0, [pc, #140]	; (18a14 <fn_disp_cal_report+0x4e0>)
   18988:	001a      	movs	r2, r3
   1898a:	0023      	movs	r3, r4
   1898c:	4c27      	ldr	r4, [pc, #156]	; (18a2c <fn_disp_cal_report+0x4f8>)
   1898e:	47a0      	blx	r4
			glcd_tiny_draw_string(0,5,display_str);
   18990:	4b20      	ldr	r3, [pc, #128]	; (18a14 <fn_disp_cal_report+0x4e0>)
   18992:	001a      	movs	r2, r3
   18994:	2105      	movs	r1, #5
   18996:	2000      	movs	r0, #0
   18998:	4b21      	ldr	r3, [pc, #132]	; (18a20 <fn_disp_cal_report+0x4ec>)
   1899a:	4798      	blx	r3
			sprintf(display_str,"  %.4f feet", dist_calst.dist_offset*mt2ft);
   1899c:	4b25      	ldr	r3, [pc, #148]	; (18a34 <fn_disp_cal_report+0x500>)
   1899e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   189a0:	4927      	ldr	r1, [pc, #156]	; (18a40 <fn_disp_cal_report+0x50c>)
   189a2:	4b28      	ldr	r3, [pc, #160]	; (18a44 <fn_disp_cal_report+0x510>)
   189a4:	1c10      	adds	r0, r2, #0
   189a6:	4798      	blx	r3
   189a8:	1c03      	adds	r3, r0, #0
   189aa:	1c1a      	adds	r2, r3, #0
   189ac:	4b22      	ldr	r3, [pc, #136]	; (18a38 <fn_disp_cal_report+0x504>)
   189ae:	1c10      	adds	r0, r2, #0
   189b0:	4798      	blx	r3
   189b2:	0003      	movs	r3, r0
   189b4:	000c      	movs	r4, r1
   189b6:	4924      	ldr	r1, [pc, #144]	; (18a48 <fn_disp_cal_report+0x514>)
   189b8:	4816      	ldr	r0, [pc, #88]	; (18a14 <fn_disp_cal_report+0x4e0>)
   189ba:	001a      	movs	r2, r3
   189bc:	0023      	movs	r3, r4
   189be:	4c1b      	ldr	r4, [pc, #108]	; (18a2c <fn_disp_cal_report+0x4f8>)
   189c0:	47a0      	blx	r4
			glcd_tiny_draw_string(0,6,display_str);
   189c2:	4b14      	ldr	r3, [pc, #80]	; (18a14 <fn_disp_cal_report+0x4e0>)
   189c4:	001a      	movs	r2, r3
   189c6:	2106      	movs	r1, #6
   189c8:	2000      	movs	r0, #0
   189ca:	4b15      	ldr	r3, [pc, #84]	; (18a20 <fn_disp_cal_report+0x4ec>)
   189cc:	4798      	blx	r3
			
		break;
   189ce:	46c0      	nop			; (mov r8, r8)
	}
	
	// Display soft keys
	if (pageView>1){draw_arrows(2);}//  Draw up arrow at button 2
   189d0:	4b1e      	ldr	r3, [pc, #120]	; (18a4c <fn_disp_cal_report+0x518>)
   189d2:	781b      	ldrb	r3, [r3, #0]
   189d4:	2b01      	cmp	r3, #1
   189d6:	d902      	bls.n	189de <fn_disp_cal_report+0x4aa>
   189d8:	2002      	movs	r0, #2
   189da:	4b1d      	ldr	r3, [pc, #116]	; (18a50 <fn_disp_cal_report+0x51c>)
   189dc:	4798      	blx	r3
	if (pageView<maxPages){draw_arrows(3);}//  Draw up arrow at button 3
   189de:	4b1b      	ldr	r3, [pc, #108]	; (18a4c <fn_disp_cal_report+0x518>)
   189e0:	781b      	ldrb	r3, [r3, #0]
   189e2:	2b02      	cmp	r3, #2
   189e4:	d802      	bhi.n	189ec <fn_disp_cal_report+0x4b8>
   189e6:	2003      	movs	r0, #3
   189e8:	4b19      	ldr	r3, [pc, #100]	; (18a50 <fn_disp_cal_report+0x51c>)
   189ea:	4798      	blx	r3
	sprintf(display_str, "Exit");
   189ec:	4a09      	ldr	r2, [pc, #36]	; (18a14 <fn_disp_cal_report+0x4e0>)
   189ee:	4b19      	ldr	r3, [pc, #100]	; (18a54 <fn_disp_cal_report+0x520>)
   189f0:	0010      	movs	r0, r2
   189f2:	0019      	movs	r1, r3
   189f4:	2305      	movs	r3, #5
   189f6:	001a      	movs	r2, r3
   189f8:	4b08      	ldr	r3, [pc, #32]	; (18a1c <fn_disp_cal_report+0x4e8>)
   189fa:	4798      	blx	r3
	glcd_tiny_draw_string(102,7,display_str);
   189fc:	4b05      	ldr	r3, [pc, #20]	; (18a14 <fn_disp_cal_report+0x4e0>)
   189fe:	001a      	movs	r2, r3
   18a00:	2107      	movs	r1, #7
   18a02:	2066      	movs	r0, #102	; 0x66
   18a04:	4b06      	ldr	r3, [pc, #24]	; (18a20 <fn_disp_cal_report+0x4ec>)
   18a06:	4798      	blx	r3
	glcd_write();
   18a08:	4b13      	ldr	r3, [pc, #76]	; (18a58 <fn_disp_cal_report+0x524>)
   18a0a:	4798      	blx	r3
}
   18a0c:	46c0      	nop			; (mov r8, r8)
   18a0e:	46bd      	mov	sp, r7
   18a10:	b005      	add	sp, #20
   18a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18a14:	20002f78 	.word	0x20002f78
   18a18:	000265e8 	.word	0x000265e8
   18a1c:	00020fa5 	.word	0x00020fa5
   18a20:	00013691 	.word	0x00013691
   18a24:	20002f20 	.word	0x20002f20
   18a28:	00026520 	.word	0x00026520
   18a2c:	000210bd 	.word	0x000210bd
   18a30:	000265f4 	.word	0x000265f4
   18a34:	200042cc 	.word	0x200042cc
   18a38:	00020d99 	.word	0x00020d99
   18a3c:	00026608 	.word	0x00026608
   18a40:	4051f948 	.word	0x4051f948
   18a44:	0001eb65 	.word	0x0001eb65
   18a48:	00026618 	.word	0x00026618
   18a4c:	20000dfc 	.word	0x20000dfc
   18a50:	0001ac55 	.word	0x0001ac55
   18a54:	00026624 	.word	0x00026624
   18a58:	00012de9 	.word	0x00012de9

00018a5c <save_measurement>:



FRESULT save_measurement(struct MEASUREMENT *meas_inst){
   18a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   18a5e:	46ce      	mov	lr, r9
   18a60:	4647      	mov	r7, r8
   18a62:	b580      	push	{r7, lr}
   18a64:	4cf3      	ldr	r4, [pc, #972]	; (18e34 <save_measurement+0x3d8>)
   18a66:	44a5      	add	sp, r4
   18a68:	af06      	add	r7, sp, #24
   18a6a:	6178      	str	r0, [r7, #20]
	char write_string_temp[511];
	char write_string_full[511];
	FRESULT fdebug1, fdebug2, fdebug3;
	DSTATUS diskio_status;
	
	pbw = &bw;
   18a6c:	4bf2      	ldr	r3, [pc, #968]	; (18e38 <save_measurement+0x3dc>)
   18a6e:	2208      	movs	r2, #8
   18a70:	4694      	mov	ip, r2
   18a72:	2208      	movs	r2, #8
   18a74:	4690      	mov	r8, r2
   18a76:	44b8      	add	r8, r7
   18a78:	44c4      	add	ip, r8
   18a7a:	4463      	add	r3, ip
   18a7c:	4aef      	ldr	r2, [pc, #956]	; (18e3c <save_measurement+0x3e0>)
   18a7e:	2108      	movs	r1, #8
   18a80:	468c      	mov	ip, r1
   18a82:	2108      	movs	r1, #8
   18a84:	4688      	mov	r8, r1
   18a86:	44b8      	add	r8, r7
   18a88:	44c4      	add	ip, r8
   18a8a:	4462      	add	r2, ip
   18a8c:	6013      	str	r3, [r2, #0]
	// Get current time
	//get_time(); // Already performed during measurement
	
	
	//  Set up SD card
	config_spi(SD_card);		
   18a8e:	2002      	movs	r0, #2
   18a90:	4beb      	ldr	r3, [pc, #940]	; (18e40 <save_measurement+0x3e4>)
   18a92:	4798      	blx	r3
	spi_select_slave(&spi_main, &slave_SD, true);	
   18a94:	49eb      	ldr	r1, [pc, #940]	; (18e44 <save_measurement+0x3e8>)
   18a96:	4bec      	ldr	r3, [pc, #944]	; (18e48 <save_measurement+0x3ec>)
   18a98:	2201      	movs	r2, #1
   18a9a:	0018      	movs	r0, r3
   18a9c:	4beb      	ldr	r3, [pc, #940]	; (18e4c <save_measurement+0x3f0>)
   18a9e:	4798      	blx	r3

	diskio_status = disk_status(0);
   18aa0:	4beb      	ldr	r3, [pc, #940]	; (18e50 <save_measurement+0x3f4>)
   18aa2:	2208      	movs	r2, #8
   18aa4:	2108      	movs	r1, #8
   18aa6:	468c      	mov	ip, r1
   18aa8:	44bc      	add	ip, r7
   18aaa:	4462      	add	r2, ip
   18aac:	18d4      	adds	r4, r2, r3
   18aae:	2000      	movs	r0, #0
   18ab0:	4be8      	ldr	r3, [pc, #928]	; (18e54 <save_measurement+0x3f8>)
   18ab2:	4798      	blx	r3
   18ab4:	0003      	movs	r3, r0
   18ab6:	7023      	strb	r3, [r4, #0]
	
	if(diskio_status){
   18ab8:	4be5      	ldr	r3, [pc, #916]	; (18e50 <save_measurement+0x3f4>)
   18aba:	2208      	movs	r2, #8
   18abc:	4694      	mov	ip, r2
   18abe:	2208      	movs	r2, #8
   18ac0:	4690      	mov	r8, r2
   18ac2:	44b8      	add	r8, r7
   18ac4:	44c4      	add	ip, r8
   18ac6:	4463      	add	r3, ip
   18ac8:	781b      	ldrb	r3, [r3, #0]
   18aca:	2b00      	cmp	r3, #0
   18acc:	d03a      	beq.n	18b44 <save_measurement+0xe8>
		//Possibly card not initialized
		configure_SD();
   18ace:	4be2      	ldr	r3, [pc, #904]	; (18e58 <save_measurement+0x3fc>)
   18ad0:	4798      	blx	r3
		diskio_status = disk_status(0);
   18ad2:	4bdf      	ldr	r3, [pc, #892]	; (18e50 <save_measurement+0x3f4>)
   18ad4:	2208      	movs	r2, #8
   18ad6:	2108      	movs	r1, #8
   18ad8:	468c      	mov	ip, r1
   18ada:	44bc      	add	ip, r7
   18adc:	4462      	add	r2, ip
   18ade:	18d4      	adds	r4, r2, r3
   18ae0:	2000      	movs	r0, #0
   18ae2:	4bdc      	ldr	r3, [pc, #880]	; (18e54 <save_measurement+0x3f8>)
   18ae4:	4798      	blx	r3
   18ae6:	0003      	movs	r3, r0
   18ae8:	7023      	strb	r3, [r4, #0]
		if(diskio_status){
   18aea:	4bd9      	ldr	r3, [pc, #868]	; (18e50 <save_measurement+0x3f4>)
   18aec:	2208      	movs	r2, #8
   18aee:	4694      	mov	ip, r2
   18af0:	2208      	movs	r2, #8
   18af2:	4690      	mov	r8, r2
   18af4:	44b8      	add	r8, r7
   18af6:	44c4      	add	ip, r8
   18af8:	4463      	add	r3, ip
   18afa:	781b      	ldrb	r3, [r3, #0]
   18afc:	2b00      	cmp	r3, #0
   18afe:	d021      	beq.n	18b44 <save_measurement+0xe8>
			fdebug1 = FR_NOT_READY;
   18b00:	4bd6      	ldr	r3, [pc, #856]	; (18e5c <save_measurement+0x400>)
   18b02:	2208      	movs	r2, #8
   18b04:	4694      	mov	ip, r2
   18b06:	2208      	movs	r2, #8
   18b08:	4690      	mov	r8, r2
   18b0a:	44b8      	add	r8, r7
   18b0c:	44c4      	add	ip, r8
   18b0e:	4463      	add	r3, ip
   18b10:	2203      	movs	r2, #3
   18b12:	701a      	strb	r2, [r3, #0]
			SD_status = fdebug1;
   18b14:	4bd2      	ldr	r3, [pc, #840]	; (18e60 <save_measurement+0x404>)
   18b16:	4ad1      	ldr	r2, [pc, #836]	; (18e5c <save_measurement+0x400>)
   18b18:	2108      	movs	r1, #8
   18b1a:	468c      	mov	ip, r1
   18b1c:	2108      	movs	r1, #8
   18b1e:	4688      	mov	r8, r1
   18b20:	44b8      	add	r8, r7
   18b22:	44c4      	add	ip, r8
   18b24:	4462      	add	r2, ip
   18b26:	7812      	ldrb	r2, [r2, #0]
   18b28:	701a      	strb	r2, [r3, #0]
			config_spi(LCD);
   18b2a:	2000      	movs	r0, #0
   18b2c:	4bc4      	ldr	r3, [pc, #784]	; (18e40 <save_measurement+0x3e4>)
   18b2e:	4798      	blx	r3
			return fdebug1;	
   18b30:	4bca      	ldr	r3, [pc, #808]	; (18e5c <save_measurement+0x400>)
   18b32:	2208      	movs	r2, #8
   18b34:	4694      	mov	ip, r2
   18b36:	2208      	movs	r2, #8
   18b38:	4690      	mov	r8, r2
   18b3a:	44b8      	add	r8, r7
   18b3c:	44c4      	add	ip, r8
   18b3e:	4463      	add	r3, ip
   18b40:	781b      	ldrb	r3, [r3, #0]
   18b42:	e25d      	b.n	19000 <save_measurement+0x5a4>
		
	}
	
	
	//  Format data for text data file
	sprintf(filename, "20%02x%02x%02x_datafile.csv", current_time.year, current_time.month, current_time.date);
   18b44:	4bc7      	ldr	r3, [pc, #796]	; (18e64 <save_measurement+0x408>)
   18b46:	799b      	ldrb	r3, [r3, #6]
   18b48:	001a      	movs	r2, r3
   18b4a:	4bc6      	ldr	r3, [pc, #792]	; (18e64 <save_measurement+0x408>)
   18b4c:	795b      	ldrb	r3, [r3, #5]
   18b4e:	001c      	movs	r4, r3
   18b50:	4bc4      	ldr	r3, [pc, #784]	; (18e64 <save_measurement+0x408>)
   18b52:	791b      	ldrb	r3, [r3, #4]
   18b54:	49c4      	ldr	r1, [pc, #784]	; (18e68 <save_measurement+0x40c>)
   18b56:	48c5      	ldr	r0, [pc, #788]	; (18e6c <save_measurement+0x410>)
   18b58:	9300      	str	r3, [sp, #0]
   18b5a:	0023      	movs	r3, r4
   18b5c:	4cc4      	ldr	r4, [pc, #784]	; (18e70 <save_measurement+0x414>)
   18b5e:	47a0      	blx	r4
		
	fdebug1 = f_open(&file1, filename, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
   18b60:	4bbe      	ldr	r3, [pc, #760]	; (18e5c <save_measurement+0x400>)
   18b62:	2208      	movs	r2, #8
   18b64:	2108      	movs	r1, #8
   18b66:	468c      	mov	ip, r1
   18b68:	44bc      	add	ip, r7
   18b6a:	4462      	add	r2, ip
   18b6c:	18d4      	adds	r4, r2, r3
   18b6e:	49bf      	ldr	r1, [pc, #764]	; (18e6c <save_measurement+0x410>)
   18b70:	4bc0      	ldr	r3, [pc, #768]	; (18e74 <save_measurement+0x418>)
   18b72:	2203      	movs	r2, #3
   18b74:	0018      	movs	r0, r3
   18b76:	4bc0      	ldr	r3, [pc, #768]	; (18e78 <save_measurement+0x41c>)
   18b78:	4798      	blx	r3
   18b7a:	0003      	movs	r3, r0
   18b7c:	7023      	strb	r3, [r4, #0]
	
	if (fdebug1 == FR_NO_FILE){
   18b7e:	4bb7      	ldr	r3, [pc, #732]	; (18e5c <save_measurement+0x400>)
   18b80:	2208      	movs	r2, #8
   18b82:	4694      	mov	ip, r2
   18b84:	2208      	movs	r2, #8
   18b86:	4690      	mov	r8, r2
   18b88:	44b8      	add	r8, r7
   18b8a:	44c4      	add	ip, r8
   18b8c:	4463      	add	r3, ip
   18b8e:	781b      	ldrb	r3, [r3, #0]
   18b90:	2b04      	cmp	r3, #4
   18b92:	d000      	beq.n	18b96 <save_measurement+0x13a>
   18b94:	e0ab      	b.n	18cee <save_measurement+0x292>
		// File does not exist, create new file with header
		fdebug2 = f_open(&file1, filename, FA_CREATE_NEW | FA_READ | FA_WRITE);
   18b96:	4bb9      	ldr	r3, [pc, #740]	; (18e7c <save_measurement+0x420>)
   18b98:	2208      	movs	r2, #8
   18b9a:	2108      	movs	r1, #8
   18b9c:	468c      	mov	ip, r1
   18b9e:	44bc      	add	ip, r7
   18ba0:	4462      	add	r2, ip
   18ba2:	18d4      	adds	r4, r2, r3
   18ba4:	49b1      	ldr	r1, [pc, #708]	; (18e6c <save_measurement+0x410>)
   18ba6:	4bb3      	ldr	r3, [pc, #716]	; (18e74 <save_measurement+0x418>)
   18ba8:	2207      	movs	r2, #7
   18baa:	0018      	movs	r0, r3
   18bac:	4bb2      	ldr	r3, [pc, #712]	; (18e78 <save_measurement+0x41c>)
   18bae:	4798      	blx	r3
   18bb0:	0003      	movs	r3, r0
   18bb2:	7023      	strb	r3, [r4, #0]
		
		if(fdebug2!=FR_OK){
   18bb4:	4bb1      	ldr	r3, [pc, #708]	; (18e7c <save_measurement+0x420>)
   18bb6:	2208      	movs	r2, #8
   18bb8:	4694      	mov	ip, r2
   18bba:	2208      	movs	r2, #8
   18bbc:	4690      	mov	r8, r2
   18bbe:	44b8      	add	r8, r7
   18bc0:	44c4      	add	ip, r8
   18bc2:	4463      	add	r3, ip
   18bc4:	781b      	ldrb	r3, [r3, #0]
   18bc6:	2b00      	cmp	r3, #0
   18bc8:	d017      	beq.n	18bfa <save_measurement+0x19e>
			SD_status = fdebug2;
   18bca:	4ba5      	ldr	r3, [pc, #660]	; (18e60 <save_measurement+0x404>)
   18bcc:	4aab      	ldr	r2, [pc, #684]	; (18e7c <save_measurement+0x420>)
   18bce:	2108      	movs	r1, #8
   18bd0:	468c      	mov	ip, r1
   18bd2:	2108      	movs	r1, #8
   18bd4:	4688      	mov	r8, r1
   18bd6:	44b8      	add	r8, r7
   18bd8:	44c4      	add	ip, r8
   18bda:	4462      	add	r2, ip
   18bdc:	7812      	ldrb	r2, [r2, #0]
   18bde:	701a      	strb	r2, [r3, #0]
			config_spi(LCD);
   18be0:	2000      	movs	r0, #0
   18be2:	4b97      	ldr	r3, [pc, #604]	; (18e40 <save_measurement+0x3e4>)
   18be4:	4798      	blx	r3
			return fdebug2;
   18be6:	4ba5      	ldr	r3, [pc, #660]	; (18e7c <save_measurement+0x420>)
   18be8:	2208      	movs	r2, #8
   18bea:	4694      	mov	ip, r2
   18bec:	2208      	movs	r2, #8
   18bee:	4690      	mov	r8, r2
   18bf0:	44b8      	add	r8, r7
   18bf2:	44c4      	add	ip, r8
   18bf4:	4463      	add	r3, ip
   18bf6:	781b      	ldrb	r3, [r3, #0]
   18bf8:	e202      	b.n	19000 <save_measurement+0x5a4>
		}

		if (options.current_unit_dist == feet){	
   18bfa:	4ba1      	ldr	r3, [pc, #644]	; (18e80 <save_measurement+0x424>)
   18bfc:	781b      	ldrb	r3, [r3, #0]
   18bfe:	2b00      	cmp	r3, #0
   18c00:	d13a      	bne.n	18c78 <save_measurement+0x21c>
			sprintf(write_string_temp, "Time-Stamp, Index, Distance (meters), Azimuth (degrees), Inclination (degrees), Temperature (Celsius),  Error Log\r\n");
   18c02:	2383      	movs	r3, #131	; 0x83
   18c04:	009b      	lsls	r3, r3, #2
   18c06:	2208      	movs	r2, #8
   18c08:	2108      	movs	r1, #8
   18c0a:	468c      	mov	ip, r1
   18c0c:	44bc      	add	ip, r7
   18c0e:	4462      	add	r2, ip
   18c10:	18d2      	adds	r2, r2, r3
   18c12:	4b9c      	ldr	r3, [pc, #624]	; (18e84 <save_measurement+0x428>)
   18c14:	0010      	movs	r0, r2
   18c16:	0019      	movs	r1, r3
   18c18:	2374      	movs	r3, #116	; 0x74
   18c1a:	001a      	movs	r2, r3
   18c1c:	4b9a      	ldr	r3, [pc, #616]	; (18e88 <save_measurement+0x42c>)
   18c1e:	4798      	blx	r3
			fdebug2 = f_write(&file1, write_string_temp, strlen(write_string_temp), pbw);
   18c20:	2383      	movs	r3, #131	; 0x83
   18c22:	009b      	lsls	r3, r3, #2
   18c24:	2208      	movs	r2, #8
   18c26:	4694      	mov	ip, r2
   18c28:	2208      	movs	r2, #8
   18c2a:	4690      	mov	r8, r2
   18c2c:	44b8      	add	r8, r7
   18c2e:	44c4      	add	ip, r8
   18c30:	4463      	add	r3, ip
   18c32:	0018      	movs	r0, r3
   18c34:	4b95      	ldr	r3, [pc, #596]	; (18e8c <save_measurement+0x430>)
   18c36:	4798      	blx	r3
   18c38:	0002      	movs	r2, r0
   18c3a:	4b90      	ldr	r3, [pc, #576]	; (18e7c <save_measurement+0x420>)
   18c3c:	2108      	movs	r1, #8
   18c3e:	2008      	movs	r0, #8
   18c40:	4684      	mov	ip, r0
   18c42:	44bc      	add	ip, r7
   18c44:	4461      	add	r1, ip
   18c46:	18cc      	adds	r4, r1, r3
   18c48:	4b7c      	ldr	r3, [pc, #496]	; (18e3c <save_measurement+0x3e0>)
   18c4a:	2108      	movs	r1, #8
   18c4c:	468c      	mov	ip, r1
   18c4e:	2108      	movs	r1, #8
   18c50:	4688      	mov	r8, r1
   18c52:	44b8      	add	r8, r7
   18c54:	44c4      	add	ip, r8
   18c56:	4463      	add	r3, ip
   18c58:	681b      	ldr	r3, [r3, #0]
   18c5a:	2183      	movs	r1, #131	; 0x83
   18c5c:	0089      	lsls	r1, r1, #2
   18c5e:	2008      	movs	r0, #8
   18c60:	4684      	mov	ip, r0
   18c62:	2008      	movs	r0, #8
   18c64:	4680      	mov	r8, r0
   18c66:	44b8      	add	r8, r7
   18c68:	44c4      	add	ip, r8
   18c6a:	4461      	add	r1, ip
   18c6c:	4881      	ldr	r0, [pc, #516]	; (18e74 <save_measurement+0x418>)
   18c6e:	4d88      	ldr	r5, [pc, #544]	; (18e90 <save_measurement+0x434>)
   18c70:	47a8      	blx	r5
   18c72:	0003      	movs	r3, r0
   18c74:	7023      	strb	r3, [r4, #0]
   18c76:	e05d      	b.n	18d34 <save_measurement+0x2d8>
		}else{
			sprintf(write_string_temp, "Time-Stamp, Index, Distance (feet), Azimuth (degrees), Inclination (degrees), Temperature (Fahrenheit), Error Log\r\n");
   18c78:	2383      	movs	r3, #131	; 0x83
   18c7a:	009b      	lsls	r3, r3, #2
   18c7c:	2208      	movs	r2, #8
   18c7e:	2108      	movs	r1, #8
   18c80:	468c      	mov	ip, r1
   18c82:	44bc      	add	ip, r7
   18c84:	4462      	add	r2, ip
   18c86:	18d2      	adds	r2, r2, r3
   18c88:	4b82      	ldr	r3, [pc, #520]	; (18e94 <save_measurement+0x438>)
   18c8a:	0010      	movs	r0, r2
   18c8c:	0019      	movs	r1, r3
   18c8e:	2374      	movs	r3, #116	; 0x74
   18c90:	001a      	movs	r2, r3
   18c92:	4b7d      	ldr	r3, [pc, #500]	; (18e88 <save_measurement+0x42c>)
   18c94:	4798      	blx	r3
			fdebug2 = f_write(&file1, write_string_temp, strlen(write_string_temp), pbw);
   18c96:	2383      	movs	r3, #131	; 0x83
   18c98:	009b      	lsls	r3, r3, #2
   18c9a:	2208      	movs	r2, #8
   18c9c:	4694      	mov	ip, r2
   18c9e:	2208      	movs	r2, #8
   18ca0:	4690      	mov	r8, r2
   18ca2:	44b8      	add	r8, r7
   18ca4:	44c4      	add	ip, r8
   18ca6:	4463      	add	r3, ip
   18ca8:	0018      	movs	r0, r3
   18caa:	4b78      	ldr	r3, [pc, #480]	; (18e8c <save_measurement+0x430>)
   18cac:	4798      	blx	r3
   18cae:	0002      	movs	r2, r0
   18cb0:	4b72      	ldr	r3, [pc, #456]	; (18e7c <save_measurement+0x420>)
   18cb2:	2108      	movs	r1, #8
   18cb4:	2008      	movs	r0, #8
   18cb6:	4684      	mov	ip, r0
   18cb8:	44bc      	add	ip, r7
   18cba:	4461      	add	r1, ip
   18cbc:	18cc      	adds	r4, r1, r3
   18cbe:	4b5f      	ldr	r3, [pc, #380]	; (18e3c <save_measurement+0x3e0>)
   18cc0:	2108      	movs	r1, #8
   18cc2:	468c      	mov	ip, r1
   18cc4:	2108      	movs	r1, #8
   18cc6:	4688      	mov	r8, r1
   18cc8:	44b8      	add	r8, r7
   18cca:	44c4      	add	ip, r8
   18ccc:	4463      	add	r3, ip
   18cce:	681b      	ldr	r3, [r3, #0]
   18cd0:	2183      	movs	r1, #131	; 0x83
   18cd2:	0089      	lsls	r1, r1, #2
   18cd4:	2008      	movs	r0, #8
   18cd6:	4684      	mov	ip, r0
   18cd8:	2008      	movs	r0, #8
   18cda:	4680      	mov	r8, r0
   18cdc:	44b8      	add	r8, r7
   18cde:	44c4      	add	ip, r8
   18ce0:	4461      	add	r1, ip
   18ce2:	4864      	ldr	r0, [pc, #400]	; (18e74 <save_measurement+0x418>)
   18ce4:	4d6a      	ldr	r5, [pc, #424]	; (18e90 <save_measurement+0x434>)
   18ce6:	47a8      	blx	r5
   18ce8:	0003      	movs	r3, r0
   18cea:	7023      	strb	r3, [r4, #0]
   18cec:	e022      	b.n	18d34 <save_measurement+0x2d8>
		}
		
		
	}else if(fdebug1 != FR_OK){
   18cee:	4b5b      	ldr	r3, [pc, #364]	; (18e5c <save_measurement+0x400>)
   18cf0:	2208      	movs	r2, #8
   18cf2:	4694      	mov	ip, r2
   18cf4:	2208      	movs	r2, #8
   18cf6:	4690      	mov	r8, r2
   18cf8:	44b8      	add	r8, r7
   18cfa:	44c4      	add	ip, r8
   18cfc:	4463      	add	r3, ip
   18cfe:	781b      	ldrb	r3, [r3, #0]
   18d00:	2b00      	cmp	r3, #0
   18d02:	d017      	beq.n	18d34 <save_measurement+0x2d8>
		SD_status = fdebug1;
   18d04:	4b56      	ldr	r3, [pc, #344]	; (18e60 <save_measurement+0x404>)
   18d06:	4a55      	ldr	r2, [pc, #340]	; (18e5c <save_measurement+0x400>)
   18d08:	2108      	movs	r1, #8
   18d0a:	468c      	mov	ip, r1
   18d0c:	2108      	movs	r1, #8
   18d0e:	4688      	mov	r8, r1
   18d10:	44b8      	add	r8, r7
   18d12:	44c4      	add	ip, r8
   18d14:	4462      	add	r2, ip
   18d16:	7812      	ldrb	r2, [r2, #0]
   18d18:	701a      	strb	r2, [r3, #0]
		config_spi(LCD);
   18d1a:	2000      	movs	r0, #0
   18d1c:	4b48      	ldr	r3, [pc, #288]	; (18e40 <save_measurement+0x3e4>)
   18d1e:	4798      	blx	r3
		return fdebug1;		
   18d20:	4b4e      	ldr	r3, [pc, #312]	; (18e5c <save_measurement+0x400>)
   18d22:	2208      	movs	r2, #8
   18d24:	4694      	mov	ip, r2
   18d26:	2208      	movs	r2, #8
   18d28:	4690      	mov	r8, r2
   18d2a:	44b8      	add	r8, r7
   18d2c:	44c4      	add	ip, r8
   18d2e:	4463      	add	r3, ip
   18d30:	781b      	ldrb	r3, [r3, #0]
   18d32:	e165      	b.n	19000 <save_measurement+0x5a4>
	}
	
	// Format string for timestamps	
	sprintf(write_string_full,"20%02x.%02x.%02x@%02x:%02x:%02x,",
		current_time.year, current_time.month, current_time.date,
   18d34:	4b4b      	ldr	r3, [pc, #300]	; (18e64 <save_measurement+0x408>)
   18d36:	799b      	ldrb	r3, [r3, #6]
	sprintf(write_string_full,"20%02x.%02x.%02x@%02x:%02x:%02x,",
   18d38:	001e      	movs	r6, r3
		current_time.year, current_time.month, current_time.date,
   18d3a:	4b4a      	ldr	r3, [pc, #296]	; (18e64 <save_measurement+0x408>)
   18d3c:	795b      	ldrb	r3, [r3, #5]
	sprintf(write_string_full,"20%02x.%02x.%02x@%02x:%02x:%02x,",
   18d3e:	60bb      	str	r3, [r7, #8]
		current_time.year, current_time.month, current_time.date,
   18d40:	4b48      	ldr	r3, [pc, #288]	; (18e64 <save_measurement+0x408>)
   18d42:	791b      	ldrb	r3, [r3, #4]
	sprintf(write_string_full,"20%02x.%02x.%02x@%02x:%02x:%02x,",
   18d44:	001a      	movs	r2, r3
		current_time.hours, current_time.minutes, current_time.seconds);
   18d46:	4b47      	ldr	r3, [pc, #284]	; (18e64 <save_measurement+0x408>)
   18d48:	789b      	ldrb	r3, [r3, #2]
	sprintf(write_string_full,"20%02x.%02x.%02x@%02x:%02x:%02x,",
   18d4a:	001c      	movs	r4, r3
		current_time.hours, current_time.minutes, current_time.seconds);
   18d4c:	4b45      	ldr	r3, [pc, #276]	; (18e64 <save_measurement+0x408>)
   18d4e:	785b      	ldrb	r3, [r3, #1]
	sprintf(write_string_full,"20%02x.%02x.%02x@%02x:%02x:%02x,",
   18d50:	001d      	movs	r5, r3
		current_time.hours, current_time.minutes, current_time.seconds);
   18d52:	4b44      	ldr	r3, [pc, #272]	; (18e64 <save_measurement+0x408>)
   18d54:	781b      	ldrb	r3, [r3, #0]
	sprintf(write_string_full,"20%02x.%02x.%02x@%02x:%02x:%02x,",
   18d56:	4698      	mov	r8, r3
   18d58:	494f      	ldr	r1, [pc, #316]	; (18e98 <save_measurement+0x43c>)
   18d5a:	200c      	movs	r0, #12
   18d5c:	2308      	movs	r3, #8
   18d5e:	469c      	mov	ip, r3
   18d60:	2308      	movs	r3, #8
   18d62:	4699      	mov	r9, r3
   18d64:	44b9      	add	r9, r7
   18d66:	44cc      	add	ip, r9
   18d68:	4460      	add	r0, ip
   18d6a:	4643      	mov	r3, r8
   18d6c:	9303      	str	r3, [sp, #12]
   18d6e:	9502      	str	r5, [sp, #8]
   18d70:	9401      	str	r4, [sp, #4]
   18d72:	9200      	str	r2, [sp, #0]
   18d74:	68bb      	ldr	r3, [r7, #8]
   18d76:	0032      	movs	r2, r6
   18d78:	4c3d      	ldr	r4, [pc, #244]	; (18e70 <save_measurement+0x414>)
   18d7a:	47a0      	blx	r4
	// Format string for data
	sprintf(write_string_temp," %d, %.3f, %.3f, %.3f,",
   18d7c:	697b      	ldr	r3, [r7, #20]
   18d7e:	681e      	ldr	r6, [r3, #0]
		meas_inst->index_ref, meas_inst->distance, meas_inst->azimuth, meas_inst->inclination);
   18d80:	697b      	ldr	r3, [r7, #20]
   18d82:	69da      	ldr	r2, [r3, #28]
	sprintf(write_string_temp," %d, %.3f, %.3f, %.3f,",
   18d84:	4b45      	ldr	r3, [pc, #276]	; (18e9c <save_measurement+0x440>)
   18d86:	1c10      	adds	r0, r2, #0
   18d88:	4798      	blx	r3
   18d8a:	0004      	movs	r4, r0
   18d8c:	000d      	movs	r5, r1
		meas_inst->index_ref, meas_inst->distance, meas_inst->azimuth, meas_inst->inclination);
   18d8e:	697b      	ldr	r3, [r7, #20]
   18d90:	68da      	ldr	r2, [r3, #12]
	sprintf(write_string_temp," %d, %.3f, %.3f, %.3f,",
   18d92:	4b42      	ldr	r3, [pc, #264]	; (18e9c <save_measurement+0x440>)
   18d94:	1c10      	adds	r0, r2, #0
   18d96:	4798      	blx	r3
   18d98:	60b8      	str	r0, [r7, #8]
   18d9a:	60f9      	str	r1, [r7, #12]
		meas_inst->index_ref, meas_inst->distance, meas_inst->azimuth, meas_inst->inclination);
   18d9c:	697b      	ldr	r3, [r7, #20]
   18d9e:	691a      	ldr	r2, [r3, #16]
	sprintf(write_string_temp," %d, %.3f, %.3f, %.3f,",
   18da0:	4b3e      	ldr	r3, [pc, #248]	; (18e9c <save_measurement+0x440>)
   18da2:	1c10      	adds	r0, r2, #0
   18da4:	4798      	blx	r3
   18da6:	6038      	str	r0, [r7, #0]
   18da8:	6079      	str	r1, [r7, #4]
   18daa:	493d      	ldr	r1, [pc, #244]	; (18ea0 <save_measurement+0x444>)
   18dac:	2083      	movs	r0, #131	; 0x83
   18dae:	0080      	lsls	r0, r0, #2
   18db0:	2308      	movs	r3, #8
   18db2:	469c      	mov	ip, r3
   18db4:	2308      	movs	r3, #8
   18db6:	4698      	mov	r8, r3
   18db8:	44b8      	add	r8, r7
   18dba:	44c4      	add	ip, r8
   18dbc:	4460      	add	r0, ip
   18dbe:	683a      	ldr	r2, [r7, #0]
   18dc0:	687b      	ldr	r3, [r7, #4]
   18dc2:	9204      	str	r2, [sp, #16]
   18dc4:	9305      	str	r3, [sp, #20]
   18dc6:	68ba      	ldr	r2, [r7, #8]
   18dc8:	68fb      	ldr	r3, [r7, #12]
   18dca:	9202      	str	r2, [sp, #8]
   18dcc:	9303      	str	r3, [sp, #12]
   18dce:	9400      	str	r4, [sp, #0]
   18dd0:	9501      	str	r5, [sp, #4]
   18dd2:	0032      	movs	r2, r6
   18dd4:	4b26      	ldr	r3, [pc, #152]	; (18e70 <save_measurement+0x414>)
   18dd6:	4798      	blx	r3
	strcat(write_string_full, write_string_temp);
   18dd8:	2383      	movs	r3, #131	; 0x83
   18dda:	009b      	lsls	r3, r3, #2
   18ddc:	2208      	movs	r2, #8
   18dde:	2108      	movs	r1, #8
   18de0:	468c      	mov	ip, r1
   18de2:	44bc      	add	ip, r7
   18de4:	4462      	add	r2, ip
   18de6:	18d2      	adds	r2, r2, r3
   18de8:	230c      	movs	r3, #12
   18dea:	2108      	movs	r1, #8
   18dec:	468c      	mov	ip, r1
   18dee:	2108      	movs	r1, #8
   18df0:	4688      	mov	r8, r1
   18df2:	44b8      	add	r8, r7
   18df4:	44c4      	add	ip, r8
   18df6:	4463      	add	r3, ip
   18df8:	0011      	movs	r1, r2
   18dfa:	0018      	movs	r0, r3
   18dfc:	4b29      	ldr	r3, [pc, #164]	; (18ea4 <save_measurement+0x448>)
   18dfe:	4798      	blx	r3
	//  Format string for temperature
	if (options.current_unit_dist == feet){
   18e00:	4b1f      	ldr	r3, [pc, #124]	; (18e80 <save_measurement+0x424>)
   18e02:	781b      	ldrb	r3, [r3, #0]
   18e04:	2b00      	cmp	r3, #0
   18e06:	d151      	bne.n	18eac <save_measurement+0x450>
		sprintf(write_string_temp," %.3f,", current_time.temperatureF);
   18e08:	4b16      	ldr	r3, [pc, #88]	; (18e64 <save_measurement+0x408>)
   18e0a:	691a      	ldr	r2, [r3, #16]
   18e0c:	4b23      	ldr	r3, [pc, #140]	; (18e9c <save_measurement+0x440>)
   18e0e:	1c10      	adds	r0, r2, #0
   18e10:	4798      	blx	r3
   18e12:	0003      	movs	r3, r0
   18e14:	000c      	movs	r4, r1
   18e16:	4924      	ldr	r1, [pc, #144]	; (18ea8 <save_measurement+0x44c>)
   18e18:	2283      	movs	r2, #131	; 0x83
   18e1a:	0092      	lsls	r2, r2, #2
   18e1c:	2008      	movs	r0, #8
   18e1e:	2508      	movs	r5, #8
   18e20:	46ac      	mov	ip, r5
   18e22:	44bc      	add	ip, r7
   18e24:	4460      	add	r0, ip
   18e26:	1880      	adds	r0, r0, r2
   18e28:	001a      	movs	r2, r3
   18e2a:	0023      	movs	r3, r4
   18e2c:	4c10      	ldr	r4, [pc, #64]	; (18e70 <save_measurement+0x414>)
   18e2e:	47a0      	blx	r4
   18e30:	e050      	b.n	18ed4 <save_measurement+0x478>
   18e32:	46c0      	nop			; (mov r8, r8)
   18e34:	fffffbbc 	.word	0xfffffbbc
   18e38:	0000040c 	.word	0x0000040c
   18e3c:	00000414 	.word	0x00000414
   18e40:	0000df9d 	.word	0x0000df9d
   18e44:	20001088 	.word	0x20001088
   18e48:	200010a4 	.word	0x200010a4
   18e4c:	000146b5 	.word	0x000146b5
   18e50:	00000413 	.word	0x00000413
   18e54:	0000ea91 	.word	0x0000ea91
   18e58:	0001905d 	.word	0x0001905d
   18e5c:	00000412 	.word	0x00000412
   18e60:	20003b79 	.word	0x20003b79
   18e64:	2000103c 	.word	0x2000103c
   18e68:	0002662c 	.word	0x0002662c
   18e6c:	20002f00 	.word	0x20002f00
   18e70:	000210bd 	.word	0x000210bd
   18e74:	2000432c 	.word	0x2000432c
   18e78:	000111cd 	.word	0x000111cd
   18e7c:	00000411 	.word	0x00000411
   18e80:	20002eec 	.word	0x20002eec
   18e84:	00026648 	.word	0x00026648
   18e88:	00020fa5 	.word	0x00020fa5
   18e8c:	0002115d 	.word	0x0002115d
   18e90:	00011769 	.word	0x00011769
   18e94:	000266bc 	.word	0x000266bc
   18e98:	00026730 	.word	0x00026730
   18e9c:	00020d99 	.word	0x00020d99
   18ea0:	00026754 	.word	0x00026754
   18ea4:	00021101 	.word	0x00021101
   18ea8:	0002676c 	.word	0x0002676c
	}else{
		sprintf(write_string_temp," %.3f,", current_time.temperatureC);
   18eac:	4b58      	ldr	r3, [pc, #352]	; (19010 <save_measurement+0x5b4>)
   18eae:	68da      	ldr	r2, [r3, #12]
   18eb0:	4b58      	ldr	r3, [pc, #352]	; (19014 <save_measurement+0x5b8>)
   18eb2:	1c10      	adds	r0, r2, #0
   18eb4:	4798      	blx	r3
   18eb6:	0003      	movs	r3, r0
   18eb8:	000c      	movs	r4, r1
   18eba:	4957      	ldr	r1, [pc, #348]	; (19018 <save_measurement+0x5bc>)
   18ebc:	2283      	movs	r2, #131	; 0x83
   18ebe:	0092      	lsls	r2, r2, #2
   18ec0:	2008      	movs	r0, #8
   18ec2:	2508      	movs	r5, #8
   18ec4:	46ac      	mov	ip, r5
   18ec6:	44bc      	add	ip, r7
   18ec8:	4460      	add	r0, ip
   18eca:	1880      	adds	r0, r0, r2
   18ecc:	001a      	movs	r2, r3
   18ece:	0023      	movs	r3, r4
   18ed0:	4c52      	ldr	r4, [pc, #328]	; (1901c <save_measurement+0x5c0>)
   18ed2:	47a0      	blx	r4
	} 
	strcat(write_string_full, write_string_temp);
   18ed4:	2383      	movs	r3, #131	; 0x83
   18ed6:	009b      	lsls	r3, r3, #2
   18ed8:	2208      	movs	r2, #8
   18eda:	2108      	movs	r1, #8
   18edc:	468c      	mov	ip, r1
   18ede:	44bc      	add	ip, r7
   18ee0:	4462      	add	r2, ip
   18ee2:	18d2      	adds	r2, r2, r3
   18ee4:	230c      	movs	r3, #12
   18ee6:	2108      	movs	r1, #8
   18ee8:	468c      	mov	ip, r1
   18eea:	2108      	movs	r1, #8
   18eec:	4688      	mov	r8, r1
   18eee:	44b8      	add	r8, r7
   18ef0:	44c4      	add	ip, r8
   18ef2:	4463      	add	r3, ip
   18ef4:	0011      	movs	r1, r2
   18ef6:	0018      	movs	r0, r3
   18ef8:	4b49      	ldr	r3, [pc, #292]	; (19020 <save_measurement+0x5c4>)
   18efa:	4798      	blx	r3
	//Format data for error_log
	//sprintf(write_string_temp,"Laser: %02x",meas_inst->laser_error_code);
	strcat(write_string_full, write_string_temp);
   18efc:	2383      	movs	r3, #131	; 0x83
   18efe:	009b      	lsls	r3, r3, #2
   18f00:	2208      	movs	r2, #8
   18f02:	2108      	movs	r1, #8
   18f04:	468c      	mov	ip, r1
   18f06:	44bc      	add	ip, r7
   18f08:	4462      	add	r2, ip
   18f0a:	18d2      	adds	r2, r2, r3
   18f0c:	230c      	movs	r3, #12
   18f0e:	2108      	movs	r1, #8
   18f10:	468c      	mov	ip, r1
   18f12:	2108      	movs	r1, #8
   18f14:	4688      	mov	r8, r1
   18f16:	44b8      	add	r8, r7
   18f18:	44c4      	add	ip, r8
   18f1a:	4463      	add	r3, ip
   18f1c:	0011      	movs	r1, r2
   18f1e:	0018      	movs	r0, r3
   18f20:	4b3f      	ldr	r3, [pc, #252]	; (19020 <save_measurement+0x5c4>)
   18f22:	4798      	blx	r3
	// Enter line return
	strcat(write_string_full, "\r\n");
   18f24:	230c      	movs	r3, #12
   18f26:	2208      	movs	r2, #8
   18f28:	4694      	mov	ip, r2
   18f2a:	2208      	movs	r2, #8
   18f2c:	4690      	mov	r8, r2
   18f2e:	44b8      	add	r8, r7
   18f30:	44c4      	add	ip, r8
   18f32:	4463      	add	r3, ip
   18f34:	0018      	movs	r0, r3
   18f36:	4b3b      	ldr	r3, [pc, #236]	; (19024 <save_measurement+0x5c8>)
   18f38:	4798      	blx	r3
   18f3a:	0003      	movs	r3, r0
   18f3c:	001a      	movs	r2, r3
   18f3e:	230c      	movs	r3, #12
   18f40:	2108      	movs	r1, #8
   18f42:	468c      	mov	ip, r1
   18f44:	2108      	movs	r1, #8
   18f46:	4688      	mov	r8, r1
   18f48:	44b8      	add	r8, r7
   18f4a:	44c4      	add	ip, r8
   18f4c:	4463      	add	r3, ip
   18f4e:	189a      	adds	r2, r3, r2
   18f50:	4b35      	ldr	r3, [pc, #212]	; (19028 <save_measurement+0x5cc>)
   18f52:	0010      	movs	r0, r2
   18f54:	0019      	movs	r1, r3
   18f56:	2303      	movs	r3, #3
   18f58:	001a      	movs	r2, r3
   18f5a:	4b34      	ldr	r3, [pc, #208]	; (1902c <save_measurement+0x5d0>)
   18f5c:	4798      	blx	r3
	
	// Append data file
	fdebug2 = f_lseek(&file1, f_size(&file1));
   18f5e:	4b34      	ldr	r3, [pc, #208]	; (19030 <save_measurement+0x5d4>)
   18f60:	68da      	ldr	r2, [r3, #12]
   18f62:	4b34      	ldr	r3, [pc, #208]	; (19034 <save_measurement+0x5d8>)
   18f64:	2108      	movs	r1, #8
   18f66:	2008      	movs	r0, #8
   18f68:	4684      	mov	ip, r0
   18f6a:	44bc      	add	ip, r7
   18f6c:	4461      	add	r1, ip
   18f6e:	18cc      	adds	r4, r1, r3
   18f70:	4b2f      	ldr	r3, [pc, #188]	; (19030 <save_measurement+0x5d4>)
   18f72:	0011      	movs	r1, r2
   18f74:	0018      	movs	r0, r3
   18f76:	4b30      	ldr	r3, [pc, #192]	; (19038 <save_measurement+0x5dc>)
   18f78:	4798      	blx	r3
   18f7a:	0003      	movs	r3, r0
   18f7c:	7023      	strb	r3, [r4, #0]
	fdebug3 = f_write(&file1, write_string_full, strlen(write_string_full), pbw);
   18f7e:	230c      	movs	r3, #12
   18f80:	2208      	movs	r2, #8
   18f82:	4694      	mov	ip, r2
   18f84:	2208      	movs	r2, #8
   18f86:	4690      	mov	r8, r2
   18f88:	44b8      	add	r8, r7
   18f8a:	44c4      	add	ip, r8
   18f8c:	4463      	add	r3, ip
   18f8e:	0018      	movs	r0, r3
   18f90:	4b24      	ldr	r3, [pc, #144]	; (19024 <save_measurement+0x5c8>)
   18f92:	4798      	blx	r3
   18f94:	0002      	movs	r2, r0
   18f96:	2382      	movs	r3, #130	; 0x82
   18f98:	00db      	lsls	r3, r3, #3
   18f9a:	2108      	movs	r1, #8
   18f9c:	2008      	movs	r0, #8
   18f9e:	4684      	mov	ip, r0
   18fa0:	44bc      	add	ip, r7
   18fa2:	4461      	add	r1, ip
   18fa4:	18cc      	adds	r4, r1, r3
   18fa6:	4b25      	ldr	r3, [pc, #148]	; (1903c <save_measurement+0x5e0>)
   18fa8:	2108      	movs	r1, #8
   18faa:	468c      	mov	ip, r1
   18fac:	2108      	movs	r1, #8
   18fae:	4688      	mov	r8, r1
   18fb0:	44b8      	add	r8, r7
   18fb2:	44c4      	add	ip, r8
   18fb4:	4463      	add	r3, ip
   18fb6:	681b      	ldr	r3, [r3, #0]
   18fb8:	210c      	movs	r1, #12
   18fba:	2008      	movs	r0, #8
   18fbc:	4684      	mov	ip, r0
   18fbe:	2008      	movs	r0, #8
   18fc0:	4680      	mov	r8, r0
   18fc2:	44b8      	add	r8, r7
   18fc4:	44c4      	add	ip, r8
   18fc6:	4461      	add	r1, ip
   18fc8:	4819      	ldr	r0, [pc, #100]	; (19030 <save_measurement+0x5d4>)
   18fca:	4d1d      	ldr	r5, [pc, #116]	; (19040 <save_measurement+0x5e4>)
   18fcc:	47a8      	blx	r5
   18fce:	0003      	movs	r3, r0
   18fd0:	7023      	strb	r3, [r4, #0]
	f_close(&file1);
   18fd2:	4b17      	ldr	r3, [pc, #92]	; (19030 <save_measurement+0x5d4>)
   18fd4:	0018      	movs	r0, r3
   18fd6:	4b1b      	ldr	r3, [pc, #108]	; (19044 <save_measurement+0x5e8>)
   18fd8:	4798      	blx	r3
	
	
	spi_select_slave(&spi_main, &slave_SD, false);
   18fda:	491b      	ldr	r1, [pc, #108]	; (19048 <save_measurement+0x5ec>)
   18fdc:	4b1b      	ldr	r3, [pc, #108]	; (1904c <save_measurement+0x5f0>)
   18fde:	2200      	movs	r2, #0
   18fe0:	0018      	movs	r0, r3
   18fe2:	4b1b      	ldr	r3, [pc, #108]	; (19050 <save_measurement+0x5f4>)
   18fe4:	4798      	blx	r3
	config_spi(LCD);
   18fe6:	2000      	movs	r0, #0
   18fe8:	4b1a      	ldr	r3, [pc, #104]	; (19054 <save_measurement+0x5f8>)
   18fea:	4798      	blx	r3

	return fdebug3;
   18fec:	2382      	movs	r3, #130	; 0x82
   18fee:	00db      	lsls	r3, r3, #3
   18ff0:	2208      	movs	r2, #8
   18ff2:	4694      	mov	ip, r2
   18ff4:	2208      	movs	r2, #8
   18ff6:	4690      	mov	r8, r2
   18ff8:	44b8      	add	r8, r7
   18ffa:	44c4      	add	ip, r8
   18ffc:	4463      	add	r3, ip
   18ffe:	781b      	ldrb	r3, [r3, #0]
}
   19000:	0018      	movs	r0, r3
   19002:	46bd      	mov	sp, r7
   19004:	4b14      	ldr	r3, [pc, #80]	; (19058 <save_measurement+0x5fc>)
   19006:	449d      	add	sp, r3
   19008:	bc0c      	pop	{r2, r3}
   1900a:	4690      	mov	r8, r2
   1900c:	4699      	mov	r9, r3
   1900e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19010:	2000103c 	.word	0x2000103c
   19014:	00020d99 	.word	0x00020d99
   19018:	0002676c 	.word	0x0002676c
   1901c:	000210bd 	.word	0x000210bd
   19020:	00021101 	.word	0x00021101
   19024:	0002115d 	.word	0x0002115d
   19028:	00026774 	.word	0x00026774
   1902c:	00020fa5 	.word	0x00020fa5
   19030:	2000432c 	.word	0x2000432c
   19034:	00000411 	.word	0x00000411
   19038:	00011bf9 	.word	0x00011bf9
   1903c:	00000414 	.word	0x00000414
   19040:	00011769 	.word	0x00011769
   19044:	00011b99 	.word	0x00011b99
   19048:	20001088 	.word	0x20001088
   1904c:	200010a4 	.word	0x200010a4
   19050:	000146b5 	.word	0x000146b5
   19054:	0000df9d 	.word	0x0000df9d
   19058:	0000042c 	.word	0x0000042c

0001905c <configure_SD>:


FRESULT configure_SD(void){
   1905c:	b590      	push	{r4, r7, lr}
   1905e:	b083      	sub	sp, #12
   19060:	af00      	add	r7, sp, #0
	FRESULT fdebug1;
	config_spi(SD_card);
   19062:	2002      	movs	r0, #2
   19064:	4b11      	ldr	r3, [pc, #68]	; (190ac <configure_SD+0x50>)
   19066:	4798      	blx	r3
	spi_select_slave(&spi_main, &slave_SD, true);
   19068:	4911      	ldr	r1, [pc, #68]	; (190b0 <configure_SD+0x54>)
   1906a:	4b12      	ldr	r3, [pc, #72]	; (190b4 <configure_SD+0x58>)
   1906c:	2201      	movs	r2, #1
   1906e:	0018      	movs	r0, r3
   19070:	4b11      	ldr	r3, [pc, #68]	; (190b8 <configure_SD+0x5c>)
   19072:	4798      	blx	r3
	spi_clear();
   19074:	4b11      	ldr	r3, [pc, #68]	; (190bc <configure_SD+0x60>)
   19076:	4798      	blx	r3
	sd_mmc_init();
   19078:	4b11      	ldr	r3, [pc, #68]	; (190c0 <configure_SD+0x64>)
   1907a:	4798      	blx	r3

	fdebug1 = f_mount(&FatFS, "", 1);
   1907c:	1dfc      	adds	r4, r7, #7
   1907e:	4911      	ldr	r1, [pc, #68]	; (190c4 <configure_SD+0x68>)
   19080:	4b11      	ldr	r3, [pc, #68]	; (190c8 <configure_SD+0x6c>)
   19082:	2201      	movs	r2, #1
   19084:	0018      	movs	r0, r3
   19086:	4b11      	ldr	r3, [pc, #68]	; (190cc <configure_SD+0x70>)
   19088:	4798      	blx	r3
   1908a:	0003      	movs	r3, r0
   1908c:	7023      	strb	r3, [r4, #0]
	spi_select_slave(&spi_main, &slave_SD, false);
   1908e:	4908      	ldr	r1, [pc, #32]	; (190b0 <configure_SD+0x54>)
   19090:	4b08      	ldr	r3, [pc, #32]	; (190b4 <configure_SD+0x58>)
   19092:	2200      	movs	r2, #0
   19094:	0018      	movs	r0, r3
   19096:	4b08      	ldr	r3, [pc, #32]	; (190b8 <configure_SD+0x5c>)
   19098:	4798      	blx	r3
	config_spi(LCD);
   1909a:	2000      	movs	r0, #0
   1909c:	4b03      	ldr	r3, [pc, #12]	; (190ac <configure_SD+0x50>)
   1909e:	4798      	blx	r3
	
	return fdebug1;
   190a0:	1dfb      	adds	r3, r7, #7
   190a2:	781b      	ldrb	r3, [r3, #0]
}
   190a4:	0018      	movs	r0, r3
   190a6:	46bd      	mov	sp, r7
   190a8:	b003      	add	sp, #12
   190aa:	bd90      	pop	{r4, r7, pc}
   190ac:	0000df9d 	.word	0x0000df9d
   190b0:	20001088 	.word	0x20001088
   190b4:	200010a4 	.word	0x200010a4
   190b8:	000146b5 	.word	0x000146b5
   190bc:	0000e005 	.word	0x0000e005
   190c0:	00004565 	.word	0x00004565
   190c4:	00026778 	.word	0x00026778
   190c8:	20004098 	.word	0x20004098
   190cc:	00011139 	.word	0x00011139

000190d0 <fn_measure>:


void fn_measure(void){
   190d0:	b580      	push	{r7, lr}
   190d2:	af00      	add	r7, sp, #0
	// increment data buffer index
	data_buf_ind = data_buf_ind+1;
   190d4:	4b20      	ldr	r3, [pc, #128]	; (19158 <fn_measure+0x88>)
   190d6:	781b      	ldrb	r3, [r3, #0]
   190d8:	3301      	adds	r3, #1
   190da:	b2da      	uxtb	r2, r3
   190dc:	4b1e      	ldr	r3, [pc, #120]	; (19158 <fn_measure+0x88>)
   190de:	701a      	strb	r2, [r3, #0]
	if (data_buf_ind >= buf_length){data_buf_ind = 0;}
   190e0:	4b1d      	ldr	r3, [pc, #116]	; (19158 <fn_measure+0x88>)
   190e2:	781b      	ldrb	r3, [r3, #0]
   190e4:	2b09      	cmp	r3, #9
   190e6:	d902      	bls.n	190ee <fn_measure+0x1e>
   190e8:	4b1b      	ldr	r3, [pc, #108]	; (19158 <fn_measure+0x88>)
   190ea:	2200      	movs	r2, #0
   190ec:	701a      	strb	r2, [r3, #0]
	// Increment reference counter
	data_ref = data_ref+1;
   190ee:	4b1b      	ldr	r3, [pc, #108]	; (1915c <fn_measure+0x8c>)
   190f0:	681b      	ldr	r3, [r3, #0]
   190f2:	1c5a      	adds	r2, r3, #1
   190f4:	4b19      	ldr	r3, [pc, #100]	; (1915c <fn_measure+0x8c>)
   190f6:	601a      	str	r2, [r3, #0]
	if (data_ref>= 999){data_ref = 1;}
   190f8:	4b18      	ldr	r3, [pc, #96]	; (1915c <fn_measure+0x8c>)
   190fa:	681b      	ldr	r3, [r3, #0]
   190fc:	4a18      	ldr	r2, [pc, #96]	; (19160 <fn_measure+0x90>)
   190fe:	4293      	cmp	r3, r2
   19100:	d902      	bls.n	19108 <fn_measure+0x38>
   19102:	4b16      	ldr	r3, [pc, #88]	; (1915c <fn_measure+0x8c>)
   19104:	2201      	movs	r2, #1
   19106:	601a      	str	r2, [r3, #0]
	data_buf[data_buf_ind].index_ref = data_ref;
   19108:	4b13      	ldr	r3, [pc, #76]	; (19158 <fn_measure+0x88>)
   1910a:	781b      	ldrb	r3, [r3, #0]
   1910c:	0018      	movs	r0, r3
   1910e:	4b13      	ldr	r3, [pc, #76]	; (1915c <fn_measure+0x8c>)
   19110:	6819      	ldr	r1, [r3, #0]
   19112:	4b14      	ldr	r3, [pc, #80]	; (19164 <fn_measure+0x94>)
   19114:	22a4      	movs	r2, #164	; 0xa4
   19116:	4342      	muls	r2, r0
   19118:	50d1      	str	r1, [r2, r3]
	//  Take measurement	
	full_measurement(&data_buf[data_buf_ind], true);
   1911a:	4b0f      	ldr	r3, [pc, #60]	; (19158 <fn_measure+0x88>)
   1911c:	781b      	ldrb	r3, [r3, #0]
   1911e:	001a      	movs	r2, r3
   19120:	23a4      	movs	r3, #164	; 0xa4
   19122:	435a      	muls	r2, r3
   19124:	4b0f      	ldr	r3, [pc, #60]	; (19164 <fn_measure+0x94>)
   19126:	18d3      	adds	r3, r2, r3
   19128:	2101      	movs	r1, #1
   1912a:	0018      	movs	r0, r3
   1912c:	4b0e      	ldr	r3, [pc, #56]	; (19168 <fn_measure+0x98>)
   1912e:	4798      	blx	r3
	//  Save data to SD card
	save_measurement(&data_buf[data_buf_ind]);
   19130:	4b09      	ldr	r3, [pc, #36]	; (19158 <fn_measure+0x88>)
   19132:	781b      	ldrb	r3, [r3, #0]
   19134:	001a      	movs	r2, r3
   19136:	23a4      	movs	r3, #164	; 0xa4
   19138:	435a      	muls	r2, r3
   1913a:	4b0a      	ldr	r3, [pc, #40]	; (19164 <fn_measure+0x94>)
   1913c:	18d3      	adds	r3, r2, r3
   1913e:	0018      	movs	r0, r3
   19140:	4b0a      	ldr	r3, [pc, #40]	; (1916c <fn_measure+0x9c>)
   19142:	4798      	blx	r3
	//  Turn laser module off
	rangefinder_on_off(false);
   19144:	2000      	movs	r0, #0
   19146:	4b0a      	ldr	r3, [pc, #40]	; (19170 <fn_measure+0xa0>)
   19148:	4798      	blx	r3
	//  Complete measurement function
	current_input = input_state_complete;
   1914a:	4b0a      	ldr	r3, [pc, #40]	; (19174 <fn_measure+0xa4>)
   1914c:	2208      	movs	r2, #8
   1914e:	701a      	strb	r2, [r3, #0]
}
   19150:	46c0      	nop			; (mov r8, r8)
   19152:	46bd      	mov	sp, r7
   19154:	bd80      	pop	{r7, pc}
   19156:	46c0      	nop			; (mov r8, r8)
   19158:	20000df5 	.word	0x20000df5
   1915c:	20000df8 	.word	0x20000df8
   19160:	000003e6 	.word	0x000003e6
   19164:	20002800 	.word	0x20002800
   19168:	00002231 	.word	0x00002231
   1916c:	00018a5d 	.word	0x00018a5d
   19170:	00002a81 	.word	0x00002a81
   19174:	20003b78 	.word	0x20003b78

00019178 <fn_aim>:

void fn_aim(void){
   19178:	b580      	push	{r7, lr}
   1917a:	b082      	sub	sp, #8
   1917c:	af00      	add	r7, sp, #0
	//uint32_t timer_count;
	uint16_t temp_index;
	
	if (state_change) {
   1917e:	4b13      	ldr	r3, [pc, #76]	; (191cc <fn_aim+0x54>)
   19180:	781b      	ldrb	r3, [r3, #0]
   19182:	b2db      	uxtb	r3, r3
   19184:	2b00      	cmp	r3, #0
   19186:	d005      	beq.n	19194 <fn_aim+0x1c>
		rangefinder_on_off(true);
   19188:	2001      	movs	r0, #1
   1918a:	4b11      	ldr	r3, [pc, #68]	; (191d0 <fn_aim+0x58>)
   1918c:	4798      	blx	r3
		laser_on_off(true);
   1918e:	2001      	movs	r0, #1
   19190:	4b10      	ldr	r3, [pc, #64]	; (191d4 <fn_aim+0x5c>)
   19192:	4798      	blx	r3
	}
	
	
	temp_index = data_buf_ind+1;
   19194:	4b10      	ldr	r3, [pc, #64]	; (191d8 <fn_aim+0x60>)
   19196:	781b      	ldrb	r3, [r3, #0]
   19198:	b29a      	uxth	r2, r3
   1919a:	1dbb      	adds	r3, r7, #6
   1919c:	3201      	adds	r2, #1
   1919e:	801a      	strh	r2, [r3, #0]
	if(temp_index>=buf_length){temp_index = 0;}
   191a0:	1dbb      	adds	r3, r7, #6
   191a2:	881b      	ldrh	r3, [r3, #0]
   191a4:	2b09      	cmp	r3, #9
   191a6:	d902      	bls.n	191ae <fn_aim+0x36>
   191a8:	1dbb      	adds	r3, r7, #6
   191aa:	2200      	movs	r2, #0
   191ac:	801a      	strh	r2, [r3, #0]
	
	
	quick_measurement(&data_buf[temp_index]);
   191ae:	1dbb      	adds	r3, r7, #6
   191b0:	881b      	ldrh	r3, [r3, #0]
   191b2:	22a4      	movs	r2, #164	; 0xa4
   191b4:	435a      	muls	r2, r3
   191b6:	4b09      	ldr	r3, [pc, #36]	; (191dc <fn_aim+0x64>)
   191b8:	18d3      	adds	r3, r2, r3
   191ba:	0018      	movs	r0, r3
   191bc:	4b08      	ldr	r3, [pc, #32]	; (191e0 <fn_aim+0x68>)
   191be:	4798      	blx	r3
	
	
	print_data_screen();
   191c0:	4b08      	ldr	r3, [pc, #32]	; (191e4 <fn_aim+0x6c>)
   191c2:	4798      	blx	r3

}
   191c4:	46c0      	nop			; (mov r8, r8)
   191c6:	46bd      	mov	sp, r7
   191c8:	b002      	add	sp, #8
   191ca:	bd80      	pop	{r7, pc}
   191cc:	20000110 	.word	0x20000110
   191d0:	00002a81 	.word	0x00002a81
   191d4:	00002ac9 	.word	0x00002ac9
   191d8:	20000df5 	.word	0x20000df5
   191dc:	20002800 	.word	0x20002800
   191e0:	000021ad 	.word	0x000021ad
   191e4:	0001a78d 	.word	0x0001a78d

000191e8 <fn_error_info>:


void fn_error_info(void){
   191e8:	b590      	push	{r4, r7, lr}
   191ea:	b085      	sub	sp, #20
   191ec:	af02      	add	r7, sp, #8
	static uint8_t shot_list_ind;
	static uint8_t nshots;
	uint8_t temp_buf_ind;

	
	if (state_change){ // Perform first time entering function
   191ee:	4b91      	ldr	r3, [pc, #580]	; (19434 <fn_error_info+0x24c>)
   191f0:	781b      	ldrb	r3, [r3, #0]
   191f2:	b2db      	uxtb	r3, r3
   191f4:	2b00      	cmp	r3, #0
   191f6:	d046      	beq.n	19286 <fn_error_info+0x9e>
		// Build list of indexes of bad shots
		shot_list_ind = 0;
   191f8:	4b8f      	ldr	r3, [pc, #572]	; (19438 <fn_error_info+0x250>)
   191fa:	2200      	movs	r2, #0
   191fc:	701a      	strb	r2, [r3, #0]
		nshots = 0;
   191fe:	4b8f      	ldr	r3, [pc, #572]	; (1943c <fn_error_info+0x254>)
   19200:	2200      	movs	r2, #0
   19202:	701a      	strb	r2, [r3, #0]
		temp_buf_ind = data_buf_ind;
   19204:	1dbb      	adds	r3, r7, #6
   19206:	4a8e      	ldr	r2, [pc, #568]	; (19440 <fn_error_info+0x258>)
   19208:	7812      	ldrb	r2, [r2, #0]
   1920a:	701a      	strb	r2, [r3, #0]
		for (i=0;i<buf_length;i++){
   1920c:	1dfb      	adds	r3, r7, #7
   1920e:	2200      	movs	r2, #0
   19210:	701a      	strb	r2, [r3, #0]
   19212:	e02e      	b.n	19272 <fn_error_info+0x8a>
			if (data_buf[temp_buf_ind].num_errors>0){
   19214:	1dbb      	adds	r3, r7, #6
   19216:	781b      	ldrb	r3, [r3, #0]
   19218:	4a8a      	ldr	r2, [pc, #552]	; (19444 <fn_error_info+0x25c>)
   1921a:	21a4      	movs	r1, #164	; 0xa4
   1921c:	434b      	muls	r3, r1
   1921e:	18d3      	adds	r3, r2, r3
   19220:	3358      	adds	r3, #88	; 0x58
   19222:	681b      	ldr	r3, [r3, #0]
   19224:	2b00      	cmp	r3, #0
   19226:	d012      	beq.n	1924e <fn_error_info+0x66>
				//  Add shot to list
				shot_list[shot_list_ind] = temp_buf_ind;
   19228:	4b83      	ldr	r3, [pc, #524]	; (19438 <fn_error_info+0x250>)
   1922a:	781b      	ldrb	r3, [r3, #0]
   1922c:	0019      	movs	r1, r3
   1922e:	4b86      	ldr	r3, [pc, #536]	; (19448 <fn_error_info+0x260>)
   19230:	1dba      	adds	r2, r7, #6
   19232:	7812      	ldrb	r2, [r2, #0]
   19234:	545a      	strb	r2, [r3, r1]
				shot_list_ind++;
   19236:	4b80      	ldr	r3, [pc, #512]	; (19438 <fn_error_info+0x250>)
   19238:	781b      	ldrb	r3, [r3, #0]
   1923a:	3301      	adds	r3, #1
   1923c:	b2da      	uxtb	r2, r3
   1923e:	4b7e      	ldr	r3, [pc, #504]	; (19438 <fn_error_info+0x250>)
   19240:	701a      	strb	r2, [r3, #0]
				nshots++;
   19242:	4b7e      	ldr	r3, [pc, #504]	; (1943c <fn_error_info+0x254>)
   19244:	781b      	ldrb	r3, [r3, #0]
   19246:	3301      	adds	r3, #1
   19248:	b2da      	uxtb	r2, r3
   1924a:	4b7c      	ldr	r3, [pc, #496]	; (1943c <fn_error_info+0x254>)
   1924c:	701a      	strb	r2, [r3, #0]
			}
			
			if (temp_buf_ind == 0){ temp_buf_ind = buf_length-1;}//  Buffer wrap-around
   1924e:	1dbb      	adds	r3, r7, #6
   19250:	781b      	ldrb	r3, [r3, #0]
   19252:	2b00      	cmp	r3, #0
   19254:	d103      	bne.n	1925e <fn_error_info+0x76>
   19256:	1dbb      	adds	r3, r7, #6
   19258:	2209      	movs	r2, #9
   1925a:	701a      	strb	r2, [r3, #0]
   1925c:	e004      	b.n	19268 <fn_error_info+0x80>
			else {temp_buf_ind--;}
   1925e:	1dbb      	adds	r3, r7, #6
   19260:	781a      	ldrb	r2, [r3, #0]
   19262:	1dbb      	adds	r3, r7, #6
   19264:	3a01      	subs	r2, #1
   19266:	701a      	strb	r2, [r3, #0]
		for (i=0;i<buf_length;i++){
   19268:	1dfb      	adds	r3, r7, #7
   1926a:	781a      	ldrb	r2, [r3, #0]
   1926c:	1dfb      	adds	r3, r7, #7
   1926e:	3201      	adds	r2, #1
   19270:	701a      	strb	r2, [r3, #0]
   19272:	1dfb      	adds	r3, r7, #7
   19274:	781b      	ldrb	r3, [r3, #0]
   19276:	2b09      	cmp	r3, #9
   19278:	d9cc      	bls.n	19214 <fn_error_info+0x2c>
		}
		
		shot_list_ind = 0;
   1927a:	4b6f      	ldr	r3, [pc, #444]	; (19438 <fn_error_info+0x250>)
   1927c:	2200      	movs	r2, #0
   1927e:	701a      	strb	r2, [r3, #0]

		last_input = input_none;
   19280:	4b72      	ldr	r3, [pc, #456]	; (1944c <fn_error_info+0x264>)
   19282:	2200      	movs	r2, #0
   19284:	701a      	strb	r2, [r3, #0]
	}
	// Button Handler
	switch(last_input){
   19286:	4b71      	ldr	r3, [pc, #452]	; (1944c <fn_error_info+0x264>)
   19288:	781b      	ldrb	r3, [r3, #0]
   1928a:	b2db      	uxtb	r3, r3
   1928c:	2b03      	cmp	r3, #3
   1928e:	d00f      	beq.n	192b0 <fn_error_info+0xc8>
   19290:	2b04      	cmp	r3, #4
   19292:	d01a      	beq.n	192ca <fn_error_info+0xe2>
   19294:	2b02      	cmp	r3, #2
   19296:	d000      	beq.n	1929a <fn_error_info+0xb2>
			break;
		case input_button4:
			//  Exit back to main screen, handled in state machine
			break;
		default:
			break;
   19298:	e01c      	b.n	192d4 <fn_error_info+0xec>
			if(shot_list_ind>0){
   1929a:	4b67      	ldr	r3, [pc, #412]	; (19438 <fn_error_info+0x250>)
   1929c:	781b      	ldrb	r3, [r3, #0]
   1929e:	2b00      	cmp	r3, #0
   192a0:	d015      	beq.n	192ce <fn_error_info+0xe6>
				shot_list_ind--;
   192a2:	4b65      	ldr	r3, [pc, #404]	; (19438 <fn_error_info+0x250>)
   192a4:	781b      	ldrb	r3, [r3, #0]
   192a6:	3b01      	subs	r3, #1
   192a8:	b2da      	uxtb	r2, r3
   192aa:	4b63      	ldr	r3, [pc, #396]	; (19438 <fn_error_info+0x250>)
   192ac:	701a      	strb	r2, [r3, #0]
			break;
   192ae:	e00e      	b.n	192ce <fn_error_info+0xe6>
			if(shot_list_ind<nshots){
   192b0:	4b61      	ldr	r3, [pc, #388]	; (19438 <fn_error_info+0x250>)
   192b2:	781a      	ldrb	r2, [r3, #0]
   192b4:	4b61      	ldr	r3, [pc, #388]	; (1943c <fn_error_info+0x254>)
   192b6:	781b      	ldrb	r3, [r3, #0]
   192b8:	429a      	cmp	r2, r3
   192ba:	d20a      	bcs.n	192d2 <fn_error_info+0xea>
				shot_list_ind++;
   192bc:	4b5e      	ldr	r3, [pc, #376]	; (19438 <fn_error_info+0x250>)
   192be:	781b      	ldrb	r3, [r3, #0]
   192c0:	3301      	adds	r3, #1
   192c2:	b2da      	uxtb	r2, r3
   192c4:	4b5c      	ldr	r3, [pc, #368]	; (19438 <fn_error_info+0x250>)
   192c6:	701a      	strb	r2, [r3, #0]
			break;
   192c8:	e003      	b.n	192d2 <fn_error_info+0xea>
			break;
   192ca:	46c0      	nop			; (mov r8, r8)
   192cc:	e002      	b.n	192d4 <fn_error_info+0xec>
			break;
   192ce:	46c0      	nop			; (mov r8, r8)
   192d0:	e000      	b.n	192d4 <fn_error_info+0xec>
			break;
   192d2:	46c0      	nop			; (mov r8, r8)
	}
	
	
	// Display
	glcd_tiny_set_font(Font5x7,5,7,32,127);
   192d4:	485e      	ldr	r0, [pc, #376]	; (19450 <fn_error_info+0x268>)
   192d6:	237f      	movs	r3, #127	; 0x7f
   192d8:	9300      	str	r3, [sp, #0]
   192da:	2320      	movs	r3, #32
   192dc:	2207      	movs	r2, #7
   192de:	2105      	movs	r1, #5
   192e0:	4c5c      	ldr	r4, [pc, #368]	; (19454 <fn_error_info+0x26c>)
   192e2:	47a0      	blx	r4
	glcd_clear_buffer();
   192e4:	4b5c      	ldr	r3, [pc, #368]	; (19458 <fn_error_info+0x270>)
   192e6:	4798      	blx	r3
	//  Display Title
	sprintf(display_str,"Error Information:");
   192e8:	4a5c      	ldr	r2, [pc, #368]	; (1945c <fn_error_info+0x274>)
   192ea:	4b5d      	ldr	r3, [pc, #372]	; (19460 <fn_error_info+0x278>)
   192ec:	0010      	movs	r0, r2
   192ee:	0019      	movs	r1, r3
   192f0:	2313      	movs	r3, #19
   192f2:	001a      	movs	r2, r3
   192f4:	4b5b      	ldr	r3, [pc, #364]	; (19464 <fn_error_info+0x27c>)
   192f6:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   192f8:	4b58      	ldr	r3, [pc, #352]	; (1945c <fn_error_info+0x274>)
   192fa:	001a      	movs	r2, r3
   192fc:	2100      	movs	r1, #0
   192fe:	2000      	movs	r0, #0
   19300:	4b59      	ldr	r3, [pc, #356]	; (19468 <fn_error_info+0x280>)
   19302:	4798      	blx	r3
	// Display soft keys
	sprintf(display_str, "Back");
   19304:	4a55      	ldr	r2, [pc, #340]	; (1945c <fn_error_info+0x274>)
   19306:	4b59      	ldr	r3, [pc, #356]	; (1946c <fn_error_info+0x284>)
   19308:	0010      	movs	r0, r2
   1930a:	0019      	movs	r1, r3
   1930c:	2305      	movs	r3, #5
   1930e:	001a      	movs	r2, r3
   19310:	4b54      	ldr	r3, [pc, #336]	; (19464 <fn_error_info+0x27c>)
   19312:	4798      	blx	r3
	glcd_tiny_draw_string(90,7,display_str);
   19314:	4b51      	ldr	r3, [pc, #324]	; (1945c <fn_error_info+0x274>)
   19316:	001a      	movs	r2, r3
   19318:	2107      	movs	r1, #7
   1931a:	205a      	movs	r0, #90	; 0x5a
   1931c:	4b52      	ldr	r3, [pc, #328]	; (19468 <fn_error_info+0x280>)
   1931e:	4798      	blx	r3
	if(shot_list_ind>0){draw_arrows(2);}
   19320:	4b45      	ldr	r3, [pc, #276]	; (19438 <fn_error_info+0x250>)
   19322:	781b      	ldrb	r3, [r3, #0]
   19324:	2b00      	cmp	r3, #0
   19326:	d002      	beq.n	1932e <fn_error_info+0x146>
   19328:	2002      	movs	r0, #2
   1932a:	4b51      	ldr	r3, [pc, #324]	; (19470 <fn_error_info+0x288>)
   1932c:	4798      	blx	r3
	if(shot_list_ind<nshots){draw_arrows(3);}
   1932e:	4b42      	ldr	r3, [pc, #264]	; (19438 <fn_error_info+0x250>)
   19330:	781a      	ldrb	r2, [r3, #0]
   19332:	4b42      	ldr	r3, [pc, #264]	; (1943c <fn_error_info+0x254>)
   19334:	781b      	ldrb	r3, [r3, #0]
   19336:	429a      	cmp	r2, r3
   19338:	d202      	bcs.n	19340 <fn_error_info+0x158>
   1933a:	2003      	movs	r0, #3
   1933c:	4b4c      	ldr	r3, [pc, #304]	; (19470 <fn_error_info+0x288>)
   1933e:	4798      	blx	r3
	
	if(nshots<= shot_list_ind){//  display null message
   19340:	4b3e      	ldr	r3, [pc, #248]	; (1943c <fn_error_info+0x254>)
   19342:	781a      	ldrb	r2, [r3, #0]
   19344:	4b3c      	ldr	r3, [pc, #240]	; (19438 <fn_error_info+0x250>)
   19346:	781b      	ldrb	r3, [r3, #0]
   19348:	429a      	cmp	r2, r3
   1934a:	d828      	bhi.n	1939e <fn_error_info+0x1b6>
		sprintf(display_str,"No Additional Errors");
   1934c:	4a43      	ldr	r2, [pc, #268]	; (1945c <fn_error_info+0x274>)
   1934e:	4b49      	ldr	r3, [pc, #292]	; (19474 <fn_error_info+0x28c>)
   19350:	0010      	movs	r0, r2
   19352:	0019      	movs	r1, r3
   19354:	2315      	movs	r3, #21
   19356:	001a      	movs	r2, r3
   19358:	4b42      	ldr	r3, [pc, #264]	; (19464 <fn_error_info+0x27c>)
   1935a:	4798      	blx	r3
		glcd_tiny_draw_string(8,1,display_str);
   1935c:	4b3f      	ldr	r3, [pc, #252]	; (1945c <fn_error_info+0x274>)
   1935e:	001a      	movs	r2, r3
   19360:	2101      	movs	r1, #1
   19362:	2008      	movs	r0, #8
   19364:	4b40      	ldr	r3, [pc, #256]	; (19468 <fn_error_info+0x280>)
   19366:	4798      	blx	r3
		sprintf(display_str,"to Report in Last");
   19368:	4a3c      	ldr	r2, [pc, #240]	; (1945c <fn_error_info+0x274>)
   1936a:	4b43      	ldr	r3, [pc, #268]	; (19478 <fn_error_info+0x290>)
   1936c:	0010      	movs	r0, r2
   1936e:	0019      	movs	r1, r3
   19370:	2312      	movs	r3, #18
   19372:	001a      	movs	r2, r3
   19374:	4b3b      	ldr	r3, [pc, #236]	; (19464 <fn_error_info+0x27c>)
   19376:	4798      	blx	r3
		glcd_tiny_draw_string(8,2,display_str);
   19378:	4b38      	ldr	r3, [pc, #224]	; (1945c <fn_error_info+0x274>)
   1937a:	001a      	movs	r2, r3
   1937c:	2102      	movs	r1, #2
   1937e:	2008      	movs	r0, #8
   19380:	4b39      	ldr	r3, [pc, #228]	; (19468 <fn_error_info+0x280>)
   19382:	4798      	blx	r3
		sprintf(display_str,"%d Measurements", buf_length);
   19384:	493d      	ldr	r1, [pc, #244]	; (1947c <fn_error_info+0x294>)
   19386:	4b35      	ldr	r3, [pc, #212]	; (1945c <fn_error_info+0x274>)
   19388:	220a      	movs	r2, #10
   1938a:	0018      	movs	r0, r3
   1938c:	4b3c      	ldr	r3, [pc, #240]	; (19480 <fn_error_info+0x298>)
   1938e:	4798      	blx	r3
		glcd_tiny_draw_string(8,3,display_str);
   19390:	4b32      	ldr	r3, [pc, #200]	; (1945c <fn_error_info+0x274>)
   19392:	001a      	movs	r2, r3
   19394:	2103      	movs	r1, #3
   19396:	2008      	movs	r0, #8
   19398:	4b33      	ldr	r3, [pc, #204]	; (19468 <fn_error_info+0x280>)
   1939a:	4798      	blx	r3
   1939c:	e044      	b.n	19428 <fn_error_info+0x240>
		}else{
		temp_buf_ind = shot_list[shot_list_ind];
   1939e:	4b26      	ldr	r3, [pc, #152]	; (19438 <fn_error_info+0x250>)
   193a0:	781b      	ldrb	r3, [r3, #0]
   193a2:	0019      	movs	r1, r3
   193a4:	1dbb      	adds	r3, r7, #6
   193a6:	4a28      	ldr	r2, [pc, #160]	; (19448 <fn_error_info+0x260>)
   193a8:	5c52      	ldrb	r2, [r2, r1]
   193aa:	701a      	strb	r2, [r3, #0]
		sprintf(display_str,"Measurement %d", data_buf[temp_buf_ind].index_ref);
   193ac:	1dbb      	adds	r3, r7, #6
   193ae:	781a      	ldrb	r2, [r3, #0]
   193b0:	4b24      	ldr	r3, [pc, #144]	; (19444 <fn_error_info+0x25c>)
   193b2:	21a4      	movs	r1, #164	; 0xa4
   193b4:	434a      	muls	r2, r1
   193b6:	58d2      	ldr	r2, [r2, r3]
   193b8:	4932      	ldr	r1, [pc, #200]	; (19484 <fn_error_info+0x29c>)
   193ba:	4b28      	ldr	r3, [pc, #160]	; (1945c <fn_error_info+0x274>)
   193bc:	0018      	movs	r0, r3
   193be:	4b30      	ldr	r3, [pc, #192]	; (19480 <fn_error_info+0x298>)
   193c0:	4798      	blx	r3
		glcd_tiny_draw_string(0,1,display_str);
   193c2:	4b26      	ldr	r3, [pc, #152]	; (1945c <fn_error_info+0x274>)
   193c4:	001a      	movs	r2, r3
   193c6:	2101      	movs	r1, #1
   193c8:	2000      	movs	r0, #0
   193ca:	4b27      	ldr	r3, [pc, #156]	; (19468 <fn_error_info+0x280>)
   193cc:	4798      	blx	r3
		for (i=0;i<min(5, data_buf[temp_buf_ind].num_errors); i++){
   193ce:	1dfb      	adds	r3, r7, #7
   193d0:	2200      	movs	r2, #0
   193d2:	701a      	strb	r2, [r3, #0]
   193d4:	e019      	b.n	1940a <fn_error_info+0x222>
			gen_err_message(display_str, &data_buf[temp_buf_ind], i);
   193d6:	1dbb      	adds	r3, r7, #6
   193d8:	781b      	ldrb	r3, [r3, #0]
   193da:	22a4      	movs	r2, #164	; 0xa4
   193dc:	435a      	muls	r2, r3
   193de:	4b19      	ldr	r3, [pc, #100]	; (19444 <fn_error_info+0x25c>)
   193e0:	18d1      	adds	r1, r2, r3
   193e2:	1dfb      	adds	r3, r7, #7
   193e4:	781a      	ldrb	r2, [r3, #0]
   193e6:	4b1d      	ldr	r3, [pc, #116]	; (1945c <fn_error_info+0x274>)
   193e8:	0018      	movs	r0, r3
   193ea:	4b27      	ldr	r3, [pc, #156]	; (19488 <fn_error_info+0x2a0>)
   193ec:	4798      	blx	r3
			glcd_tiny_draw_string(0,i+2,display_str);
   193ee:	1dfb      	adds	r3, r7, #7
   193f0:	781b      	ldrb	r3, [r3, #0]
   193f2:	3302      	adds	r3, #2
   193f4:	b2db      	uxtb	r3, r3
   193f6:	4a19      	ldr	r2, [pc, #100]	; (1945c <fn_error_info+0x274>)
   193f8:	0019      	movs	r1, r3
   193fa:	2000      	movs	r0, #0
   193fc:	4b1a      	ldr	r3, [pc, #104]	; (19468 <fn_error_info+0x280>)
   193fe:	4798      	blx	r3
		for (i=0;i<min(5, data_buf[temp_buf_ind].num_errors); i++){
   19400:	1dfb      	adds	r3, r7, #7
   19402:	781a      	ldrb	r2, [r3, #0]
   19404:	1dfb      	adds	r3, r7, #7
   19406:	3201      	adds	r2, #1
   19408:	701a      	strb	r2, [r3, #0]
   1940a:	1dfb      	adds	r3, r7, #7
   1940c:	781a      	ldrb	r2, [r3, #0]
   1940e:	1dbb      	adds	r3, r7, #6
   19410:	781b      	ldrb	r3, [r3, #0]
   19412:	490c      	ldr	r1, [pc, #48]	; (19444 <fn_error_info+0x25c>)
   19414:	20a4      	movs	r0, #164	; 0xa4
   19416:	4343      	muls	r3, r0
   19418:	18cb      	adds	r3, r1, r3
   1941a:	3358      	adds	r3, #88	; 0x58
   1941c:	681b      	ldr	r3, [r3, #0]
   1941e:	2b05      	cmp	r3, #5
   19420:	d900      	bls.n	19424 <fn_error_info+0x23c>
   19422:	2305      	movs	r3, #5
   19424:	429a      	cmp	r2, r3
   19426:	d3d6      	bcc.n	193d6 <fn_error_info+0x1ee>
		}
		
	}
	
	glcd_write();
   19428:	4b18      	ldr	r3, [pc, #96]	; (1948c <fn_error_info+0x2a4>)
   1942a:	4798      	blx	r3
}
   1942c:	46c0      	nop			; (mov r8, r8)
   1942e:	46bd      	mov	sp, r7
   19430:	b003      	add	sp, #12
   19432:	bd90      	pop	{r4, r7, pc}
   19434:	20000110 	.word	0x20000110
   19438:	20000dfd 	.word	0x20000dfd
   1943c:	20000dfe 	.word	0x20000dfe
   19440:	20000df5 	.word	0x20000df5
   19444:	20002800 	.word	0x20002800
   19448:	20000e00 	.word	0x20000e00
   1944c:	20003b7a 	.word	0x20003b7a
   19450:	00025dd0 	.word	0x00025dd0
   19454:	00013505 	.word	0x00013505
   19458:	000125a5 	.word	0x000125a5
   1945c:	20002f78 	.word	0x20002f78
   19460:	0002677c 	.word	0x0002677c
   19464:	00020fa5 	.word	0x00020fa5
   19468:	00013691 	.word	0x00013691
   1946c:	00026790 	.word	0x00026790
   19470:	0001ac55 	.word	0x0001ac55
   19474:	00026798 	.word	0x00026798
   19478:	000267b0 	.word	0x000267b0
   1947c:	000267c4 	.word	0x000267c4
   19480:	000210bd 	.word	0x000210bd
   19484:	000267d4 	.word	0x000267d4
   19488:	000039f1 	.word	0x000039f1
   1948c:	00012de9 	.word	0x00012de9

00019490 <fn_menu1>:


void fn_menu1(void){
   19490:	b590      	push	{r4, r7, lr}
   19492:	b083      	sub	sp, #12
   19494:	af02      	add	r7, sp, #8
	
	if (state_change){
   19496:	4b86      	ldr	r3, [pc, #536]	; (196b0 <fn_menu1+0x220>)
   19498:	781b      	ldrb	r3, [r3, #0]
   1949a:	b2db      	uxtb	r3, r3
   1949c:	2b00      	cmp	r3, #0
   1949e:	d00b      	beq.n	194b8 <fn_menu1+0x28>
		cur_Y=1;
   194a0:	4b84      	ldr	r3, [pc, #528]	; (196b4 <fn_menu1+0x224>)
   194a2:	2201      	movs	r2, #1
   194a4:	601a      	str	r2, [r3, #0]
		cur_Y_low=1;
   194a6:	4b84      	ldr	r3, [pc, #528]	; (196b8 <fn_menu1+0x228>)
   194a8:	2201      	movs	r2, #1
   194aa:	601a      	str	r2, [r3, #0]
		cur_Y_high=6;
   194ac:	4b83      	ldr	r3, [pc, #524]	; (196bc <fn_menu1+0x22c>)
   194ae:	2206      	movs	r2, #6
   194b0:	601a      	str	r2, [r3, #0]
		last_input = input_none;
   194b2:	4b83      	ldr	r3, [pc, #524]	; (196c0 <fn_menu1+0x230>)
   194b4:	2200      	movs	r2, #0
   194b6:	701a      	strb	r2, [r3, #0]
	}
	
	
	glcd_tiny_set_font(Font5x7,5,7,32,127);
   194b8:	4882      	ldr	r0, [pc, #520]	; (196c4 <fn_menu1+0x234>)
   194ba:	237f      	movs	r3, #127	; 0x7f
   194bc:	9300      	str	r3, [sp, #0]
   194be:	2320      	movs	r3, #32
   194c0:	2207      	movs	r2, #7
   194c2:	2105      	movs	r1, #5
   194c4:	4c80      	ldr	r4, [pc, #512]	; (196c8 <fn_menu1+0x238>)
   194c6:	47a0      	blx	r4
	glcd_clear_buffer();
   194c8:	4b80      	ldr	r3, [pc, #512]	; (196cc <fn_menu1+0x23c>)
   194ca:	4798      	blx	r3
	
	//  Button Handler
	switch(last_input){
   194cc:	4b7c      	ldr	r3, [pc, #496]	; (196c0 <fn_menu1+0x230>)
   194ce:	781b      	ldrb	r3, [r3, #0]
   194d0:	b2db      	uxtb	r3, r3
   194d2:	2b02      	cmp	r3, #2
   194d4:	d004      	beq.n	194e0 <fn_menu1+0x50>
   194d6:	2b03      	cmp	r3, #3
   194d8:	d00e      	beq.n	194f8 <fn_menu1+0x68>
   194da:	2b01      	cmp	r3, #1
   194dc:	d018      	beq.n	19510 <fn_menu1+0x80>
			} else if (cur_Y==6){ // Debug
				current_input = input_menu_debug;
			}
			break;
		default:
			break;
   194de:	e04c      	b.n	1957a <fn_menu1+0xea>
			if(cur_Y > cur_Y_low){--cur_Y; }
   194e0:	4b74      	ldr	r3, [pc, #464]	; (196b4 <fn_menu1+0x224>)
   194e2:	681a      	ldr	r2, [r3, #0]
   194e4:	4b74      	ldr	r3, [pc, #464]	; (196b8 <fn_menu1+0x228>)
   194e6:	681b      	ldr	r3, [r3, #0]
   194e8:	429a      	cmp	r2, r3
   194ea:	dd41      	ble.n	19570 <fn_menu1+0xe0>
   194ec:	4b71      	ldr	r3, [pc, #452]	; (196b4 <fn_menu1+0x224>)
   194ee:	681b      	ldr	r3, [r3, #0]
   194f0:	1e5a      	subs	r2, r3, #1
   194f2:	4b70      	ldr	r3, [pc, #448]	; (196b4 <fn_menu1+0x224>)
   194f4:	601a      	str	r2, [r3, #0]
			break;
   194f6:	e03b      	b.n	19570 <fn_menu1+0xe0>
			if(cur_Y < cur_Y_high){++cur_Y; }
   194f8:	4b6e      	ldr	r3, [pc, #440]	; (196b4 <fn_menu1+0x224>)
   194fa:	681a      	ldr	r2, [r3, #0]
   194fc:	4b6f      	ldr	r3, [pc, #444]	; (196bc <fn_menu1+0x22c>)
   194fe:	681b      	ldr	r3, [r3, #0]
   19500:	429a      	cmp	r2, r3
   19502:	da37      	bge.n	19574 <fn_menu1+0xe4>
   19504:	4b6b      	ldr	r3, [pc, #428]	; (196b4 <fn_menu1+0x224>)
   19506:	681b      	ldr	r3, [r3, #0]
   19508:	1c5a      	adds	r2, r3, #1
   1950a:	4b6a      	ldr	r3, [pc, #424]	; (196b4 <fn_menu1+0x224>)
   1950c:	601a      	str	r2, [r3, #0]
			break;
   1950e:	e031      	b.n	19574 <fn_menu1+0xe4>
			if(cur_Y == 1){ // Options
   19510:	4b68      	ldr	r3, [pc, #416]	; (196b4 <fn_menu1+0x224>)
   19512:	681b      	ldr	r3, [r3, #0]
   19514:	2b01      	cmp	r3, #1
   19516:	d103      	bne.n	19520 <fn_menu1+0x90>
				current_input = input_set_units;
   19518:	4b6d      	ldr	r3, [pc, #436]	; (196d0 <fn_menu1+0x240>)
   1951a:	220b      	movs	r2, #11
   1951c:	701a      	strb	r2, [r3, #0]
			break;
   1951e:	e02b      	b.n	19578 <fn_menu1+0xe8>
			} else if (cur_Y==2){// Error Info
   19520:	4b64      	ldr	r3, [pc, #400]	; (196b4 <fn_menu1+0x224>)
   19522:	681b      	ldr	r3, [r3, #0]
   19524:	2b02      	cmp	r3, #2
   19526:	d103      	bne.n	19530 <fn_menu1+0xa0>
				current_input = input_error_info;
   19528:	4b69      	ldr	r3, [pc, #420]	; (196d0 <fn_menu1+0x240>)
   1952a:	220c      	movs	r2, #12
   1952c:	701a      	strb	r2, [r3, #0]
			break;
   1952e:	e023      	b.n	19578 <fn_menu1+0xe8>
			} else if (cur_Y==3){ // Calibration
   19530:	4b60      	ldr	r3, [pc, #384]	; (196b4 <fn_menu1+0x224>)
   19532:	681b      	ldr	r3, [r3, #0]
   19534:	2b03      	cmp	r3, #3
   19536:	d103      	bne.n	19540 <fn_menu1+0xb0>
				current_input = input_cal_menu;
   19538:	4b65      	ldr	r3, [pc, #404]	; (196d0 <fn_menu1+0x240>)
   1953a:	220d      	movs	r2, #13
   1953c:	701a      	strb	r2, [r3, #0]
			break;
   1953e:	e01b      	b.n	19578 <fn_menu1+0xe8>
			} else if (cur_Y==4){ // Set Clock
   19540:	4b5c      	ldr	r3, [pc, #368]	; (196b4 <fn_menu1+0x224>)
   19542:	681b      	ldr	r3, [r3, #0]
   19544:	2b04      	cmp	r3, #4
   19546:	d103      	bne.n	19550 <fn_menu1+0xc0>
				current_input = input_set_clock;
   19548:	4b61      	ldr	r3, [pc, #388]	; (196d0 <fn_menu1+0x240>)
   1954a:	2209      	movs	r2, #9
   1954c:	701a      	strb	r2, [r3, #0]
			break;
   1954e:	e013      	b.n	19578 <fn_menu1+0xe8>
			} else if (cur_Y==5){ //  Bluetooth
   19550:	4b58      	ldr	r3, [pc, #352]	; (196b4 <fn_menu1+0x224>)
   19552:	681b      	ldr	r3, [r3, #0]
   19554:	2b05      	cmp	r3, #5
   19556:	d103      	bne.n	19560 <fn_menu1+0xd0>
				current_input = input_set_bluetooth;
   19558:	4b5d      	ldr	r3, [pc, #372]	; (196d0 <fn_menu1+0x240>)
   1955a:	220a      	movs	r2, #10
   1955c:	701a      	strb	r2, [r3, #0]
			break;
   1955e:	e00b      	b.n	19578 <fn_menu1+0xe8>
			} else if (cur_Y==6){ // Debug
   19560:	4b54      	ldr	r3, [pc, #336]	; (196b4 <fn_menu1+0x224>)
   19562:	681b      	ldr	r3, [r3, #0]
   19564:	2b06      	cmp	r3, #6
   19566:	d107      	bne.n	19578 <fn_menu1+0xe8>
				current_input = input_menu_debug;
   19568:	4b59      	ldr	r3, [pc, #356]	; (196d0 <fn_menu1+0x240>)
   1956a:	2217      	movs	r2, #23
   1956c:	701a      	strb	r2, [r3, #0]
			break;
   1956e:	e003      	b.n	19578 <fn_menu1+0xe8>
			break;
   19570:	46c0      	nop			; (mov r8, r8)
   19572:	e002      	b.n	1957a <fn_menu1+0xea>
			break;
   19574:	46c0      	nop			; (mov r8, r8)
   19576:	e000      	b.n	1957a <fn_menu1+0xea>
			break;
   19578:	46c0      	nop			; (mov r8, r8)
	}
	
	//print soft key text
	draw_arrows(2);//  Draw up arrow at button 2
   1957a:	2002      	movs	r0, #2
   1957c:	4b55      	ldr	r3, [pc, #340]	; (196d4 <fn_menu1+0x244>)
   1957e:	4798      	blx	r3
	draw_arrows(3);//  Draw down arrow at button 3
   19580:	2003      	movs	r0, #3
   19582:	4b54      	ldr	r3, [pc, #336]	; (196d4 <fn_menu1+0x244>)
   19584:	4798      	blx	r3
	sprintf(display_str, "Menu:");
   19586:	4a54      	ldr	r2, [pc, #336]	; (196d8 <fn_menu1+0x248>)
   19588:	4b54      	ldr	r3, [pc, #336]	; (196dc <fn_menu1+0x24c>)
   1958a:	0010      	movs	r0, r2
   1958c:	0019      	movs	r1, r3
   1958e:	2306      	movs	r3, #6
   19590:	001a      	movs	r2, r3
   19592:	4b53      	ldr	r3, [pc, #332]	; (196e0 <fn_menu1+0x250>)
   19594:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   19596:	4b50      	ldr	r3, [pc, #320]	; (196d8 <fn_menu1+0x248>)
   19598:	001a      	movs	r2, r3
   1959a:	2100      	movs	r1, #0
   1959c:	2000      	movs	r0, #0
   1959e:	4b51      	ldr	r3, [pc, #324]	; (196e4 <fn_menu1+0x254>)
   195a0:	4798      	blx	r3
	sprintf(display_str, "Enter");
   195a2:	4a4d      	ldr	r2, [pc, #308]	; (196d8 <fn_menu1+0x248>)
   195a4:	4b50      	ldr	r3, [pc, #320]	; (196e8 <fn_menu1+0x258>)
   195a6:	0010      	movs	r0, r2
   195a8:	0019      	movs	r1, r3
   195aa:	2306      	movs	r3, #6
   195ac:	001a      	movs	r2, r3
   195ae:	4b4c      	ldr	r3, [pc, #304]	; (196e0 <fn_menu1+0x250>)
   195b0:	4798      	blx	r3
	glcd_tiny_draw_string(96,0,display_str);
   195b2:	4b49      	ldr	r3, [pc, #292]	; (196d8 <fn_menu1+0x248>)
   195b4:	001a      	movs	r2, r3
   195b6:	2100      	movs	r1, #0
   195b8:	2060      	movs	r0, #96	; 0x60
   195ba:	4b4a      	ldr	r3, [pc, #296]	; (196e4 <fn_menu1+0x254>)
   195bc:	4798      	blx	r3
	sprintf(display_str, "Back");
   195be:	4a46      	ldr	r2, [pc, #280]	; (196d8 <fn_menu1+0x248>)
   195c0:	4b4a      	ldr	r3, [pc, #296]	; (196ec <fn_menu1+0x25c>)
   195c2:	0010      	movs	r0, r2
   195c4:	0019      	movs	r1, r3
   195c6:	2305      	movs	r3, #5
   195c8:	001a      	movs	r2, r3
   195ca:	4b45      	ldr	r3, [pc, #276]	; (196e0 <fn_menu1+0x250>)
   195cc:	4798      	blx	r3
	glcd_tiny_draw_string(100,7,display_str);
   195ce:	4b42      	ldr	r3, [pc, #264]	; (196d8 <fn_menu1+0x248>)
   195d0:	001a      	movs	r2, r3
   195d2:	2107      	movs	r1, #7
   195d4:	2064      	movs	r0, #100	; 0x64
   195d6:	4b43      	ldr	r3, [pc, #268]	; (196e4 <fn_menu1+0x254>)
   195d8:	4798      	blx	r3
	
	sprintf(display_str, "Options");
   195da:	4a3f      	ldr	r2, [pc, #252]	; (196d8 <fn_menu1+0x248>)
   195dc:	4b44      	ldr	r3, [pc, #272]	; (196f0 <fn_menu1+0x260>)
   195de:	0010      	movs	r0, r2
   195e0:	0019      	movs	r1, r3
   195e2:	2308      	movs	r3, #8
   195e4:	001a      	movs	r2, r3
   195e6:	4b3e      	ldr	r3, [pc, #248]	; (196e0 <fn_menu1+0x250>)
   195e8:	4798      	blx	r3
	glcd_tiny_draw_string(10,1,display_str);
   195ea:	4b3b      	ldr	r3, [pc, #236]	; (196d8 <fn_menu1+0x248>)
   195ec:	001a      	movs	r2, r3
   195ee:	2101      	movs	r1, #1
   195f0:	200a      	movs	r0, #10
   195f2:	4b3c      	ldr	r3, [pc, #240]	; (196e4 <fn_menu1+0x254>)
   195f4:	4798      	blx	r3
	
	sprintf(display_str, "Error Info");
   195f6:	4a38      	ldr	r2, [pc, #224]	; (196d8 <fn_menu1+0x248>)
   195f8:	4b3e      	ldr	r3, [pc, #248]	; (196f4 <fn_menu1+0x264>)
   195fa:	0010      	movs	r0, r2
   195fc:	0019      	movs	r1, r3
   195fe:	230b      	movs	r3, #11
   19600:	001a      	movs	r2, r3
   19602:	4b37      	ldr	r3, [pc, #220]	; (196e0 <fn_menu1+0x250>)
   19604:	4798      	blx	r3
	glcd_tiny_draw_string(10,2,display_str);
   19606:	4b34      	ldr	r3, [pc, #208]	; (196d8 <fn_menu1+0x248>)
   19608:	001a      	movs	r2, r3
   1960a:	2102      	movs	r1, #2
   1960c:	200a      	movs	r0, #10
   1960e:	4b35      	ldr	r3, [pc, #212]	; (196e4 <fn_menu1+0x254>)
   19610:	4798      	blx	r3
	
	sprintf(display_str, "Calibration");
   19612:	4a31      	ldr	r2, [pc, #196]	; (196d8 <fn_menu1+0x248>)
   19614:	4b38      	ldr	r3, [pc, #224]	; (196f8 <fn_menu1+0x268>)
   19616:	0010      	movs	r0, r2
   19618:	0019      	movs	r1, r3
   1961a:	230c      	movs	r3, #12
   1961c:	001a      	movs	r2, r3
   1961e:	4b30      	ldr	r3, [pc, #192]	; (196e0 <fn_menu1+0x250>)
   19620:	4798      	blx	r3
	glcd_tiny_draw_string(10,3,display_str);
   19622:	4b2d      	ldr	r3, [pc, #180]	; (196d8 <fn_menu1+0x248>)
   19624:	001a      	movs	r2, r3
   19626:	2103      	movs	r1, #3
   19628:	200a      	movs	r0, #10
   1962a:	4b2e      	ldr	r3, [pc, #184]	; (196e4 <fn_menu1+0x254>)
   1962c:	4798      	blx	r3
	
	sprintf(display_str, "Set Clock");
   1962e:	4a2a      	ldr	r2, [pc, #168]	; (196d8 <fn_menu1+0x248>)
   19630:	4b32      	ldr	r3, [pc, #200]	; (196fc <fn_menu1+0x26c>)
   19632:	0010      	movs	r0, r2
   19634:	0019      	movs	r1, r3
   19636:	230a      	movs	r3, #10
   19638:	001a      	movs	r2, r3
   1963a:	4b29      	ldr	r3, [pc, #164]	; (196e0 <fn_menu1+0x250>)
   1963c:	4798      	blx	r3
	glcd_tiny_draw_string(10,4,display_str);
   1963e:	4b26      	ldr	r3, [pc, #152]	; (196d8 <fn_menu1+0x248>)
   19640:	001a      	movs	r2, r3
   19642:	2104      	movs	r1, #4
   19644:	200a      	movs	r0, #10
   19646:	4b27      	ldr	r3, [pc, #156]	; (196e4 <fn_menu1+0x254>)
   19648:	4798      	blx	r3
	
	sprintf(display_str, "Bluetooth");
   1964a:	4a23      	ldr	r2, [pc, #140]	; (196d8 <fn_menu1+0x248>)
   1964c:	4b2c      	ldr	r3, [pc, #176]	; (19700 <fn_menu1+0x270>)
   1964e:	0010      	movs	r0, r2
   19650:	0019      	movs	r1, r3
   19652:	230a      	movs	r3, #10
   19654:	001a      	movs	r2, r3
   19656:	4b22      	ldr	r3, [pc, #136]	; (196e0 <fn_menu1+0x250>)
   19658:	4798      	blx	r3
	glcd_tiny_draw_string(10,5,display_str);
   1965a:	4b1f      	ldr	r3, [pc, #124]	; (196d8 <fn_menu1+0x248>)
   1965c:	001a      	movs	r2, r3
   1965e:	2105      	movs	r1, #5
   19660:	200a      	movs	r0, #10
   19662:	4b20      	ldr	r3, [pc, #128]	; (196e4 <fn_menu1+0x254>)
   19664:	4798      	blx	r3
	
	sprintf(display_str, "Debug Menu");
   19666:	4a1c      	ldr	r2, [pc, #112]	; (196d8 <fn_menu1+0x248>)
   19668:	4b26      	ldr	r3, [pc, #152]	; (19704 <fn_menu1+0x274>)
   1966a:	0010      	movs	r0, r2
   1966c:	0019      	movs	r1, r3
   1966e:	230b      	movs	r3, #11
   19670:	001a      	movs	r2, r3
   19672:	4b1b      	ldr	r3, [pc, #108]	; (196e0 <fn_menu1+0x250>)
   19674:	4798      	blx	r3
	glcd_tiny_draw_string(10,6,display_str);
   19676:	4b18      	ldr	r3, [pc, #96]	; (196d8 <fn_menu1+0x248>)
   19678:	001a      	movs	r2, r3
   1967a:	2106      	movs	r1, #6
   1967c:	200a      	movs	r0, #10
   1967e:	4b19      	ldr	r3, [pc, #100]	; (196e4 <fn_menu1+0x254>)
   19680:	4798      	blx	r3
	
	
	sprintf(display_str, ">");
   19682:	4a15      	ldr	r2, [pc, #84]	; (196d8 <fn_menu1+0x248>)
   19684:	4b20      	ldr	r3, [pc, #128]	; (19708 <fn_menu1+0x278>)
   19686:	0010      	movs	r0, r2
   19688:	0019      	movs	r1, r3
   1968a:	2302      	movs	r3, #2
   1968c:	001a      	movs	r2, r3
   1968e:	4b14      	ldr	r3, [pc, #80]	; (196e0 <fn_menu1+0x250>)
   19690:	4798      	blx	r3
	glcd_tiny_draw_string(3, cur_Y,display_str);
   19692:	4b08      	ldr	r3, [pc, #32]	; (196b4 <fn_menu1+0x224>)
   19694:	681b      	ldr	r3, [r3, #0]
   19696:	b2db      	uxtb	r3, r3
   19698:	4a0f      	ldr	r2, [pc, #60]	; (196d8 <fn_menu1+0x248>)
   1969a:	0019      	movs	r1, r3
   1969c:	2003      	movs	r0, #3
   1969e:	4b11      	ldr	r3, [pc, #68]	; (196e4 <fn_menu1+0x254>)
   196a0:	4798      	blx	r3
	
	glcd_write();
   196a2:	4b1a      	ldr	r3, [pc, #104]	; (1970c <fn_menu1+0x27c>)
   196a4:	4798      	blx	r3
	
}
   196a6:	46c0      	nop			; (mov r8, r8)
   196a8:	46bd      	mov	sp, r7
   196aa:	b001      	add	sp, #4
   196ac:	bd90      	pop	{r4, r7, pc}
   196ae:	46c0      	nop			; (mov r8, r8)
   196b0:	20000110 	.word	0x20000110
   196b4:	20002ed8 	.word	0x20002ed8
   196b8:	20003f50 	.word	0x20003f50
   196bc:	20003a30 	.word	0x20003a30
   196c0:	20003b7a 	.word	0x20003b7a
   196c4:	00025dd0 	.word	0x00025dd0
   196c8:	00013505 	.word	0x00013505
   196cc:	000125a5 	.word	0x000125a5
   196d0:	20003b78 	.word	0x20003b78
   196d4:	0001ac55 	.word	0x0001ac55
   196d8:	20002f78 	.word	0x20002f78
   196dc:	000267e4 	.word	0x000267e4
   196e0:	00020fa5 	.word	0x00020fa5
   196e4:	00013691 	.word	0x00013691
   196e8:	000267ec 	.word	0x000267ec
   196ec:	00026790 	.word	0x00026790
   196f0:	000267f4 	.word	0x000267f4
   196f4:	000267fc 	.word	0x000267fc
   196f8:	00026808 	.word	0x00026808
   196fc:	00026814 	.word	0x00026814
   19700:	00026820 	.word	0x00026820
   19704:	0002682c 	.word	0x0002682c
   19708:	00026838 	.word	0x00026838
   1970c:	00012de9 	.word	0x00012de9

00019710 <fn_menu_debug>:


void fn_menu_debug(void){
   19710:	b590      	push	{r4, r7, lr}
   19712:	b083      	sub	sp, #12
   19714:	af02      	add	r7, sp, #8
	//  Set initial conditions
	if (state_change) {
   19716:	4b63      	ldr	r3, [pc, #396]	; (198a4 <fn_menu_debug+0x194>)
   19718:	781b      	ldrb	r3, [r3, #0]
   1971a:	b2db      	uxtb	r3, r3
   1971c:	2b00      	cmp	r3, #0
   1971e:	d008      	beq.n	19732 <fn_menu_debug+0x22>
		cur_Y = 2;
   19720:	4b61      	ldr	r3, [pc, #388]	; (198a8 <fn_menu_debug+0x198>)
   19722:	2202      	movs	r2, #2
   19724:	601a      	str	r2, [r3, #0]
		cur_Y_low = 2;
   19726:	4b61      	ldr	r3, [pc, #388]	; (198ac <fn_menu_debug+0x19c>)
   19728:	2202      	movs	r2, #2
   1972a:	601a      	str	r2, [r3, #0]
		cur_Y_high = 4;
   1972c:	4b60      	ldr	r3, [pc, #384]	; (198b0 <fn_menu_debug+0x1a0>)
   1972e:	2204      	movs	r2, #4
   19730:	601a      	str	r2, [r3, #0]
	}
	
	// Button Handler
	switch(last_input){
   19732:	4b60      	ldr	r3, [pc, #384]	; (198b4 <fn_menu_debug+0x1a4>)
   19734:	781b      	ldrb	r3, [r3, #0]
   19736:	b2db      	uxtb	r3, r3
   19738:	2b02      	cmp	r3, #2
   1973a:	d004      	beq.n	19746 <fn_menu_debug+0x36>
   1973c:	2b03      	cmp	r3, #3
   1973e:	d00e      	beq.n	1975e <fn_menu_debug+0x4e>
   19740:	2b01      	cmp	r3, #1
   19742:	d018      	beq.n	19776 <fn_menu_debug+0x66>
			} else if(cur_Y == 4){
				//  Charger Debug
				current_input = input_debug_charger;
			}
		default:
			break;
   19744:	e033      	b.n	197ae <fn_menu_debug+0x9e>
			if(cur_Y > cur_Y_low){--cur_Y; }
   19746:	4b58      	ldr	r3, [pc, #352]	; (198a8 <fn_menu_debug+0x198>)
   19748:	681a      	ldr	r2, [r3, #0]
   1974a:	4b58      	ldr	r3, [pc, #352]	; (198ac <fn_menu_debug+0x19c>)
   1974c:	681b      	ldr	r3, [r3, #0]
   1974e:	429a      	cmp	r2, r3
   19750:	dd29      	ble.n	197a6 <fn_menu_debug+0x96>
   19752:	4b55      	ldr	r3, [pc, #340]	; (198a8 <fn_menu_debug+0x198>)
   19754:	681b      	ldr	r3, [r3, #0]
   19756:	1e5a      	subs	r2, r3, #1
   19758:	4b53      	ldr	r3, [pc, #332]	; (198a8 <fn_menu_debug+0x198>)
   1975a:	601a      	str	r2, [r3, #0]
			break;
   1975c:	e023      	b.n	197a6 <fn_menu_debug+0x96>
			if(cur_Y < cur_Y_high){++cur_Y; }
   1975e:	4b52      	ldr	r3, [pc, #328]	; (198a8 <fn_menu_debug+0x198>)
   19760:	681a      	ldr	r2, [r3, #0]
   19762:	4b53      	ldr	r3, [pc, #332]	; (198b0 <fn_menu_debug+0x1a0>)
   19764:	681b      	ldr	r3, [r3, #0]
   19766:	429a      	cmp	r2, r3
   19768:	da1f      	bge.n	197aa <fn_menu_debug+0x9a>
   1976a:	4b4f      	ldr	r3, [pc, #316]	; (198a8 <fn_menu_debug+0x198>)
   1976c:	681b      	ldr	r3, [r3, #0]
   1976e:	1c5a      	adds	r2, r3, #1
   19770:	4b4d      	ldr	r3, [pc, #308]	; (198a8 <fn_menu_debug+0x198>)
   19772:	601a      	str	r2, [r3, #0]
			break;
   19774:	e019      	b.n	197aa <fn_menu_debug+0x9a>
			if (cur_Y==2){
   19776:	4b4c      	ldr	r3, [pc, #304]	; (198a8 <fn_menu_debug+0x198>)
   19778:	681b      	ldr	r3, [r3, #0]
   1977a:	2b02      	cmp	r3, #2
   1977c:	d103      	bne.n	19786 <fn_menu_debug+0x76>
				current_input = input_debug_rawData;
   1977e:	4b4e      	ldr	r3, [pc, #312]	; (198b8 <fn_menu_debug+0x1a8>)
   19780:	2212      	movs	r2, #18
   19782:	701a      	strb	r2, [r3, #0]
			break;
   19784:	e013      	b.n	197ae <fn_menu_debug+0x9e>
			}else if(cur_Y == 3){
   19786:	4b48      	ldr	r3, [pc, #288]	; (198a8 <fn_menu_debug+0x198>)
   19788:	681b      	ldr	r3, [r3, #0]
   1978a:	2b03      	cmp	r3, #3
   1978c:	d103      	bne.n	19796 <fn_menu_debug+0x86>
				current_input = input_debug_backlight;
   1978e:	4b4a      	ldr	r3, [pc, #296]	; (198b8 <fn_menu_debug+0x1a8>)
   19790:	2213      	movs	r2, #19
   19792:	701a      	strb	r2, [r3, #0]
			break;
   19794:	e00b      	b.n	197ae <fn_menu_debug+0x9e>
			} else if(cur_Y == 4){
   19796:	4b44      	ldr	r3, [pc, #272]	; (198a8 <fn_menu_debug+0x198>)
   19798:	681b      	ldr	r3, [r3, #0]
   1979a:	2b04      	cmp	r3, #4
   1979c:	d107      	bne.n	197ae <fn_menu_debug+0x9e>
				current_input = input_debug_charger;
   1979e:	4b46      	ldr	r3, [pc, #280]	; (198b8 <fn_menu_debug+0x1a8>)
   197a0:	2214      	movs	r2, #20
   197a2:	701a      	strb	r2, [r3, #0]
			break;
   197a4:	e003      	b.n	197ae <fn_menu_debug+0x9e>
			break;
   197a6:	46c0      	nop			; (mov r8, r8)
   197a8:	e002      	b.n	197b0 <fn_menu_debug+0xa0>
			break;
   197aa:	46c0      	nop			; (mov r8, r8)
   197ac:	e000      	b.n	197b0 <fn_menu_debug+0xa0>
			break;
   197ae:	46c0      	nop			; (mov r8, r8)
	}
	
	// Display
	glcd_tiny_set_font(Font5x7,5,7,32,127);
   197b0:	4842      	ldr	r0, [pc, #264]	; (198bc <fn_menu_debug+0x1ac>)
   197b2:	237f      	movs	r3, #127	; 0x7f
   197b4:	9300      	str	r3, [sp, #0]
   197b6:	2320      	movs	r3, #32
   197b8:	2207      	movs	r2, #7
   197ba:	2105      	movs	r1, #5
   197bc:	4c40      	ldr	r4, [pc, #256]	; (198c0 <fn_menu_debug+0x1b0>)
   197be:	47a0      	blx	r4
	glcd_clear_buffer();
   197c0:	4b40      	ldr	r3, [pc, #256]	; (198c4 <fn_menu_debug+0x1b4>)
   197c2:	4798      	blx	r3
	//  Display Title
	sprintf(display_str,"Debug Menu:");
   197c4:	4a40      	ldr	r2, [pc, #256]	; (198c8 <fn_menu_debug+0x1b8>)
   197c6:	4b41      	ldr	r3, [pc, #260]	; (198cc <fn_menu_debug+0x1bc>)
   197c8:	0010      	movs	r0, r2
   197ca:	0019      	movs	r1, r3
   197cc:	230c      	movs	r3, #12
   197ce:	001a      	movs	r2, r3
   197d0:	4b3f      	ldr	r3, [pc, #252]	; (198d0 <fn_menu_debug+0x1c0>)
   197d2:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   197d4:	4b3c      	ldr	r3, [pc, #240]	; (198c8 <fn_menu_debug+0x1b8>)
   197d6:	001a      	movs	r2, r3
   197d8:	2100      	movs	r1, #0
   197da:	2000      	movs	r0, #0
   197dc:	4b3d      	ldr	r3, [pc, #244]	; (198d4 <fn_menu_debug+0x1c4>)
   197de:	4798      	blx	r3
	
	//Display Options
	sprintf(display_str, "Sensor Raw Data");
   197e0:	4a39      	ldr	r2, [pc, #228]	; (198c8 <fn_menu_debug+0x1b8>)
   197e2:	4b3d      	ldr	r3, [pc, #244]	; (198d8 <fn_menu_debug+0x1c8>)
   197e4:	0010      	movs	r0, r2
   197e6:	0019      	movs	r1, r3
   197e8:	2310      	movs	r3, #16
   197ea:	001a      	movs	r2, r3
   197ec:	4b38      	ldr	r3, [pc, #224]	; (198d0 <fn_menu_debug+0x1c0>)
   197ee:	4798      	blx	r3
	glcd_tiny_draw_string(20, 2, display_str);
   197f0:	4b35      	ldr	r3, [pc, #212]	; (198c8 <fn_menu_debug+0x1b8>)
   197f2:	001a      	movs	r2, r3
   197f4:	2102      	movs	r1, #2
   197f6:	2014      	movs	r0, #20
   197f8:	4b36      	ldr	r3, [pc, #216]	; (198d4 <fn_menu_debug+0x1c4>)
   197fa:	4798      	blx	r3
	sprintf(display_str, "Backlight Manual");
   197fc:	4a32      	ldr	r2, [pc, #200]	; (198c8 <fn_menu_debug+0x1b8>)
   197fe:	4b37      	ldr	r3, [pc, #220]	; (198dc <fn_menu_debug+0x1cc>)
   19800:	0010      	movs	r0, r2
   19802:	0019      	movs	r1, r3
   19804:	2311      	movs	r3, #17
   19806:	001a      	movs	r2, r3
   19808:	4b31      	ldr	r3, [pc, #196]	; (198d0 <fn_menu_debug+0x1c0>)
   1980a:	4798      	blx	r3
	glcd_tiny_draw_string(20, 3, display_str);
   1980c:	4b2e      	ldr	r3, [pc, #184]	; (198c8 <fn_menu_debug+0x1b8>)
   1980e:	001a      	movs	r2, r3
   19810:	2103      	movs	r1, #3
   19812:	2014      	movs	r0, #20
   19814:	4b2f      	ldr	r3, [pc, #188]	; (198d4 <fn_menu_debug+0x1c4>)
   19816:	4798      	blx	r3
	sprintf(display_str, "Charger Info");
   19818:	4a2b      	ldr	r2, [pc, #172]	; (198c8 <fn_menu_debug+0x1b8>)
   1981a:	4b31      	ldr	r3, [pc, #196]	; (198e0 <fn_menu_debug+0x1d0>)
   1981c:	0010      	movs	r0, r2
   1981e:	0019      	movs	r1, r3
   19820:	230d      	movs	r3, #13
   19822:	001a      	movs	r2, r3
   19824:	4b2a      	ldr	r3, [pc, #168]	; (198d0 <fn_menu_debug+0x1c0>)
   19826:	4798      	blx	r3
	glcd_tiny_draw_string(20, 4, display_str);
   19828:	4b27      	ldr	r3, [pc, #156]	; (198c8 <fn_menu_debug+0x1b8>)
   1982a:	001a      	movs	r2, r3
   1982c:	2104      	movs	r1, #4
   1982e:	2014      	movs	r0, #20
   19830:	4b28      	ldr	r3, [pc, #160]	; (198d4 <fn_menu_debug+0x1c4>)
   19832:	4798      	blx	r3
	
	// Display soft keys
	draw_arrows(2);//  Draw up arrow at button 2
   19834:	2002      	movs	r0, #2
   19836:	4b2b      	ldr	r3, [pc, #172]	; (198e4 <fn_menu_debug+0x1d4>)
   19838:	4798      	blx	r3
	draw_arrows(3);//  Draw down arrow at button 3
   1983a:	2003      	movs	r0, #3
   1983c:	4b29      	ldr	r3, [pc, #164]	; (198e4 <fn_menu_debug+0x1d4>)
   1983e:	4798      	blx	r3
	sprintf(display_str, "Enter");
   19840:	4a21      	ldr	r2, [pc, #132]	; (198c8 <fn_menu_debug+0x1b8>)
   19842:	4b29      	ldr	r3, [pc, #164]	; (198e8 <fn_menu_debug+0x1d8>)
   19844:	0010      	movs	r0, r2
   19846:	0019      	movs	r1, r3
   19848:	2306      	movs	r3, #6
   1984a:	001a      	movs	r2, r3
   1984c:	4b20      	ldr	r3, [pc, #128]	; (198d0 <fn_menu_debug+0x1c0>)
   1984e:	4798      	blx	r3
	glcd_tiny_draw_string(96,0,display_str);
   19850:	4b1d      	ldr	r3, [pc, #116]	; (198c8 <fn_menu_debug+0x1b8>)
   19852:	001a      	movs	r2, r3
   19854:	2100      	movs	r1, #0
   19856:	2060      	movs	r0, #96	; 0x60
   19858:	4b1e      	ldr	r3, [pc, #120]	; (198d4 <fn_menu_debug+0x1c4>)
   1985a:	4798      	blx	r3
	sprintf(display_str, "Back");
   1985c:	4a1a      	ldr	r2, [pc, #104]	; (198c8 <fn_menu_debug+0x1b8>)
   1985e:	4b23      	ldr	r3, [pc, #140]	; (198ec <fn_menu_debug+0x1dc>)
   19860:	0010      	movs	r0, r2
   19862:	0019      	movs	r1, r3
   19864:	2305      	movs	r3, #5
   19866:	001a      	movs	r2, r3
   19868:	4b19      	ldr	r3, [pc, #100]	; (198d0 <fn_menu_debug+0x1c0>)
   1986a:	4798      	blx	r3
	glcd_tiny_draw_string(103,7,display_str);
   1986c:	4b16      	ldr	r3, [pc, #88]	; (198c8 <fn_menu_debug+0x1b8>)
   1986e:	001a      	movs	r2, r3
   19870:	2107      	movs	r1, #7
   19872:	2067      	movs	r0, #103	; 0x67
   19874:	4b17      	ldr	r3, [pc, #92]	; (198d4 <fn_menu_debug+0x1c4>)
   19876:	4798      	blx	r3
	
	//Display Pointer
	sprintf(display_str, ">");
   19878:	4a13      	ldr	r2, [pc, #76]	; (198c8 <fn_menu_debug+0x1b8>)
   1987a:	4b1d      	ldr	r3, [pc, #116]	; (198f0 <fn_menu_debug+0x1e0>)
   1987c:	0010      	movs	r0, r2
   1987e:	0019      	movs	r1, r3
   19880:	2302      	movs	r3, #2
   19882:	001a      	movs	r2, r3
   19884:	4b12      	ldr	r3, [pc, #72]	; (198d0 <fn_menu_debug+0x1c0>)
   19886:	4798      	blx	r3
	glcd_tiny_draw_string(10, cur_Y,display_str);
   19888:	4b07      	ldr	r3, [pc, #28]	; (198a8 <fn_menu_debug+0x198>)
   1988a:	681b      	ldr	r3, [r3, #0]
   1988c:	b2db      	uxtb	r3, r3
   1988e:	4a0e      	ldr	r2, [pc, #56]	; (198c8 <fn_menu_debug+0x1b8>)
   19890:	0019      	movs	r1, r3
   19892:	200a      	movs	r0, #10
   19894:	4b0f      	ldr	r3, [pc, #60]	; (198d4 <fn_menu_debug+0x1c4>)
   19896:	4798      	blx	r3
	
	glcd_write();
   19898:	4b16      	ldr	r3, [pc, #88]	; (198f4 <fn_menu_debug+0x1e4>)
   1989a:	4798      	blx	r3
	
	
}
   1989c:	46c0      	nop			; (mov r8, r8)
   1989e:	46bd      	mov	sp, r7
   198a0:	b001      	add	sp, #4
   198a2:	bd90      	pop	{r4, r7, pc}
   198a4:	20000110 	.word	0x20000110
   198a8:	20002ed8 	.word	0x20002ed8
   198ac:	20003f50 	.word	0x20003f50
   198b0:	20003a30 	.word	0x20003a30
   198b4:	20003b7a 	.word	0x20003b7a
   198b8:	20003b78 	.word	0x20003b78
   198bc:	00025dd0 	.word	0x00025dd0
   198c0:	00013505 	.word	0x00013505
   198c4:	000125a5 	.word	0x000125a5
   198c8:	20002f78 	.word	0x20002f78
   198cc:	0002683c 	.word	0x0002683c
   198d0:	00020fa5 	.word	0x00020fa5
   198d4:	00013691 	.word	0x00013691
   198d8:	00026848 	.word	0x00026848
   198dc:	00026858 	.word	0x00026858
   198e0:	0002686c 	.word	0x0002686c
   198e4:	0001ac55 	.word	0x0001ac55
   198e8:	000267ec 	.word	0x000267ec
   198ec:	00026790 	.word	0x00026790
   198f0:	00026838 	.word	0x00026838
   198f4:	00012de9 	.word	0x00012de9

000198f8 <fn_menu_cal>:



void fn_menu_cal(void){
   198f8:	b590      	push	{r4, r7, lr}
   198fa:	b083      	sub	sp, #12
   198fc:	af02      	add	r7, sp, #8
	//  Set initial conditions
	if (state_change) {
   198fe:	4b6e      	ldr	r3, [pc, #440]	; (19ab8 <fn_menu_cal+0x1c0>)
   19900:	781b      	ldrb	r3, [r3, #0]
   19902:	b2db      	uxtb	r3, r3
   19904:	2b00      	cmp	r3, #0
   19906:	d008      	beq.n	1991a <fn_menu_cal+0x22>
		cur_Y = 2;
   19908:	4b6c      	ldr	r3, [pc, #432]	; (19abc <fn_menu_cal+0x1c4>)
   1990a:	2202      	movs	r2, #2
   1990c:	601a      	str	r2, [r3, #0]
		cur_Y_low = 2;
   1990e:	4b6c      	ldr	r3, [pc, #432]	; (19ac0 <fn_menu_cal+0x1c8>)
   19910:	2202      	movs	r2, #2
   19912:	601a      	str	r2, [r3, #0]
		cur_Y_high = 5;
   19914:	4b6b      	ldr	r3, [pc, #428]	; (19ac4 <fn_menu_cal+0x1cc>)
   19916:	2205      	movs	r2, #5
   19918:	601a      	str	r2, [r3, #0]
	}
	
	// Button Handler
	switch(last_input){
   1991a:	4b6b      	ldr	r3, [pc, #428]	; (19ac8 <fn_menu_cal+0x1d0>)
   1991c:	781b      	ldrb	r3, [r3, #0]
   1991e:	b2db      	uxtb	r3, r3
   19920:	2b02      	cmp	r3, #2
   19922:	d004      	beq.n	1992e <fn_menu_cal+0x36>
   19924:	2b03      	cmp	r3, #3
   19926:	d00e      	beq.n	19946 <fn_menu_cal+0x4e>
   19928:	2b01      	cmp	r3, #1
   1992a:	d018      	beq.n	1995e <fn_menu_cal+0x66>
				current_input = input_acc_comp_calibration;
			} else if (cur_Y==5){
				current_input = input_loop_test;
			}
		default:
			break;
   1992c:	e03b      	b.n	199a6 <fn_menu_cal+0xae>
			if(cur_Y > cur_Y_low){--cur_Y; }
   1992e:	4b63      	ldr	r3, [pc, #396]	; (19abc <fn_menu_cal+0x1c4>)
   19930:	681a      	ldr	r2, [r3, #0]
   19932:	4b63      	ldr	r3, [pc, #396]	; (19ac0 <fn_menu_cal+0x1c8>)
   19934:	681b      	ldr	r3, [r3, #0]
   19936:	429a      	cmp	r2, r3
   19938:	dd31      	ble.n	1999e <fn_menu_cal+0xa6>
   1993a:	4b60      	ldr	r3, [pc, #384]	; (19abc <fn_menu_cal+0x1c4>)
   1993c:	681b      	ldr	r3, [r3, #0]
   1993e:	1e5a      	subs	r2, r3, #1
   19940:	4b5e      	ldr	r3, [pc, #376]	; (19abc <fn_menu_cal+0x1c4>)
   19942:	601a      	str	r2, [r3, #0]
			break;
   19944:	e02b      	b.n	1999e <fn_menu_cal+0xa6>
			if(cur_Y < cur_Y_high){++cur_Y; }
   19946:	4b5d      	ldr	r3, [pc, #372]	; (19abc <fn_menu_cal+0x1c4>)
   19948:	681a      	ldr	r2, [r3, #0]
   1994a:	4b5e      	ldr	r3, [pc, #376]	; (19ac4 <fn_menu_cal+0x1cc>)
   1994c:	681b      	ldr	r3, [r3, #0]
   1994e:	429a      	cmp	r2, r3
   19950:	da27      	bge.n	199a2 <fn_menu_cal+0xaa>
   19952:	4b5a      	ldr	r3, [pc, #360]	; (19abc <fn_menu_cal+0x1c4>)
   19954:	681b      	ldr	r3, [r3, #0]
   19956:	1c5a      	adds	r2, r3, #1
   19958:	4b58      	ldr	r3, [pc, #352]	; (19abc <fn_menu_cal+0x1c4>)
   1995a:	601a      	str	r2, [r3, #0]
			break;
   1995c:	e021      	b.n	199a2 <fn_menu_cal+0xaa>
			if (cur_Y==2){
   1995e:	4b57      	ldr	r3, [pc, #348]	; (19abc <fn_menu_cal+0x1c4>)
   19960:	681b      	ldr	r3, [r3, #0]
   19962:	2b02      	cmp	r3, #2
   19964:	d103      	bne.n	1996e <fn_menu_cal+0x76>
				current_input = input_disp_cal_report;
   19966:	4b59      	ldr	r3, [pc, #356]	; (19acc <fn_menu_cal+0x1d4>)
   19968:	2210      	movs	r2, #16
   1996a:	701a      	strb	r2, [r3, #0]
			break;
   1996c:	e01b      	b.n	199a6 <fn_menu_cal+0xae>
			}else if(cur_Y == 3){
   1996e:	4b53      	ldr	r3, [pc, #332]	; (19abc <fn_menu_cal+0x1c4>)
   19970:	681b      	ldr	r3, [r3, #0]
   19972:	2b03      	cmp	r3, #3
   19974:	d103      	bne.n	1997e <fn_menu_cal+0x86>
				current_input = input_dist_calibration;
   19976:	4b55      	ldr	r3, [pc, #340]	; (19acc <fn_menu_cal+0x1d4>)
   19978:	220e      	movs	r2, #14
   1997a:	701a      	strb	r2, [r3, #0]
			break;
   1997c:	e013      	b.n	199a6 <fn_menu_cal+0xae>
			} else if (cur_Y==4){
   1997e:	4b4f      	ldr	r3, [pc, #316]	; (19abc <fn_menu_cal+0x1c4>)
   19980:	681b      	ldr	r3, [r3, #0]
   19982:	2b04      	cmp	r3, #4
   19984:	d103      	bne.n	1998e <fn_menu_cal+0x96>
				current_input = input_acc_comp_calibration;
   19986:	4b51      	ldr	r3, [pc, #324]	; (19acc <fn_menu_cal+0x1d4>)
   19988:	220f      	movs	r2, #15
   1998a:	701a      	strb	r2, [r3, #0]
			break;
   1998c:	e00b      	b.n	199a6 <fn_menu_cal+0xae>
			} else if (cur_Y==5){
   1998e:	4b4b      	ldr	r3, [pc, #300]	; (19abc <fn_menu_cal+0x1c4>)
   19990:	681b      	ldr	r3, [r3, #0]
   19992:	2b05      	cmp	r3, #5
   19994:	d107      	bne.n	199a6 <fn_menu_cal+0xae>
				current_input = input_loop_test;
   19996:	4b4d      	ldr	r3, [pc, #308]	; (19acc <fn_menu_cal+0x1d4>)
   19998:	2211      	movs	r2, #17
   1999a:	701a      	strb	r2, [r3, #0]
			break;
   1999c:	e003      	b.n	199a6 <fn_menu_cal+0xae>
			break;
   1999e:	46c0      	nop			; (mov r8, r8)
   199a0:	e002      	b.n	199a8 <fn_menu_cal+0xb0>
			break;
   199a2:	46c0      	nop			; (mov r8, r8)
   199a4:	e000      	b.n	199a8 <fn_menu_cal+0xb0>
			break;
   199a6:	46c0      	nop			; (mov r8, r8)
	}
	
	// Display
	glcd_tiny_set_font(Font5x7,5,7,32,127);
   199a8:	4849      	ldr	r0, [pc, #292]	; (19ad0 <fn_menu_cal+0x1d8>)
   199aa:	237f      	movs	r3, #127	; 0x7f
   199ac:	9300      	str	r3, [sp, #0]
   199ae:	2320      	movs	r3, #32
   199b0:	2207      	movs	r2, #7
   199b2:	2105      	movs	r1, #5
   199b4:	4c47      	ldr	r4, [pc, #284]	; (19ad4 <fn_menu_cal+0x1dc>)
   199b6:	47a0      	blx	r4
	glcd_clear_buffer();
   199b8:	4b47      	ldr	r3, [pc, #284]	; (19ad8 <fn_menu_cal+0x1e0>)
   199ba:	4798      	blx	r3
		//  Display Title
	sprintf(display_str,"Calibration:");
   199bc:	4a47      	ldr	r2, [pc, #284]	; (19adc <fn_menu_cal+0x1e4>)
   199be:	4b48      	ldr	r3, [pc, #288]	; (19ae0 <fn_menu_cal+0x1e8>)
   199c0:	0010      	movs	r0, r2
   199c2:	0019      	movs	r1, r3
   199c4:	230d      	movs	r3, #13
   199c6:	001a      	movs	r2, r3
   199c8:	4b46      	ldr	r3, [pc, #280]	; (19ae4 <fn_menu_cal+0x1ec>)
   199ca:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   199cc:	4b43      	ldr	r3, [pc, #268]	; (19adc <fn_menu_cal+0x1e4>)
   199ce:	001a      	movs	r2, r3
   199d0:	2100      	movs	r1, #0
   199d2:	2000      	movs	r0, #0
   199d4:	4b44      	ldr	r3, [pc, #272]	; (19ae8 <fn_menu_cal+0x1f0>)
   199d6:	4798      	blx	r3
	
	//Display Options
	sprintf(display_str, "Display Report");
   199d8:	4a40      	ldr	r2, [pc, #256]	; (19adc <fn_menu_cal+0x1e4>)
   199da:	4b44      	ldr	r3, [pc, #272]	; (19aec <fn_menu_cal+0x1f4>)
   199dc:	0010      	movs	r0, r2
   199de:	0019      	movs	r1, r3
   199e0:	230f      	movs	r3, #15
   199e2:	001a      	movs	r2, r3
   199e4:	4b3f      	ldr	r3, [pc, #252]	; (19ae4 <fn_menu_cal+0x1ec>)
   199e6:	4798      	blx	r3
	glcd_tiny_draw_string(20, 2, display_str);
   199e8:	4b3c      	ldr	r3, [pc, #240]	; (19adc <fn_menu_cal+0x1e4>)
   199ea:	001a      	movs	r2, r3
   199ec:	2102      	movs	r1, #2
   199ee:	2014      	movs	r0, #20
   199f0:	4b3d      	ldr	r3, [pc, #244]	; (19ae8 <fn_menu_cal+0x1f0>)
   199f2:	4798      	blx	r3
	sprintf(display_str, "Cal Distance");
   199f4:	4a39      	ldr	r2, [pc, #228]	; (19adc <fn_menu_cal+0x1e4>)
   199f6:	4b3e      	ldr	r3, [pc, #248]	; (19af0 <fn_menu_cal+0x1f8>)
   199f8:	0010      	movs	r0, r2
   199fa:	0019      	movs	r1, r3
   199fc:	230d      	movs	r3, #13
   199fe:	001a      	movs	r2, r3
   19a00:	4b38      	ldr	r3, [pc, #224]	; (19ae4 <fn_menu_cal+0x1ec>)
   19a02:	4798      	blx	r3
	glcd_tiny_draw_string(20, 3, display_str);
   19a04:	4b35      	ldr	r3, [pc, #212]	; (19adc <fn_menu_cal+0x1e4>)
   19a06:	001a      	movs	r2, r3
   19a08:	2103      	movs	r1, #3
   19a0a:	2014      	movs	r0, #20
   19a0c:	4b36      	ldr	r3, [pc, #216]	; (19ae8 <fn_menu_cal+0x1f0>)
   19a0e:	4798      	blx	r3
	sprintf(display_str, "Cal AZM & INCL");
   19a10:	4a32      	ldr	r2, [pc, #200]	; (19adc <fn_menu_cal+0x1e4>)
   19a12:	4b38      	ldr	r3, [pc, #224]	; (19af4 <fn_menu_cal+0x1fc>)
   19a14:	0010      	movs	r0, r2
   19a16:	0019      	movs	r1, r3
   19a18:	230f      	movs	r3, #15
   19a1a:	001a      	movs	r2, r3
   19a1c:	4b31      	ldr	r3, [pc, #196]	; (19ae4 <fn_menu_cal+0x1ec>)
   19a1e:	4798      	blx	r3
	glcd_tiny_draw_string(20, 4, display_str);
   19a20:	4b2e      	ldr	r3, [pc, #184]	; (19adc <fn_menu_cal+0x1e4>)
   19a22:	001a      	movs	r2, r3
   19a24:	2104      	movs	r1, #4
   19a26:	2014      	movs	r0, #20
   19a28:	4b2f      	ldr	r3, [pc, #188]	; (19ae8 <fn_menu_cal+0x1f0>)
   19a2a:	4798      	blx	r3
	sprintf(display_str,"Loop Test");
   19a2c:	4a2b      	ldr	r2, [pc, #172]	; (19adc <fn_menu_cal+0x1e4>)
   19a2e:	4b32      	ldr	r3, [pc, #200]	; (19af8 <fn_menu_cal+0x200>)
   19a30:	0010      	movs	r0, r2
   19a32:	0019      	movs	r1, r3
   19a34:	230a      	movs	r3, #10
   19a36:	001a      	movs	r2, r3
   19a38:	4b2a      	ldr	r3, [pc, #168]	; (19ae4 <fn_menu_cal+0x1ec>)
   19a3a:	4798      	blx	r3
	glcd_tiny_draw_string(20, 5, display_str);
   19a3c:	4b27      	ldr	r3, [pc, #156]	; (19adc <fn_menu_cal+0x1e4>)
   19a3e:	001a      	movs	r2, r3
   19a40:	2105      	movs	r1, #5
   19a42:	2014      	movs	r0, #20
   19a44:	4b28      	ldr	r3, [pc, #160]	; (19ae8 <fn_menu_cal+0x1f0>)
   19a46:	4798      	blx	r3
	
	// Display soft keys
	draw_arrows(2);//  Draw up arrow at button 2
   19a48:	2002      	movs	r0, #2
   19a4a:	4b2c      	ldr	r3, [pc, #176]	; (19afc <fn_menu_cal+0x204>)
   19a4c:	4798      	blx	r3
	draw_arrows(3);//  Draw down arrow at button 3
   19a4e:	2003      	movs	r0, #3
   19a50:	4b2a      	ldr	r3, [pc, #168]	; (19afc <fn_menu_cal+0x204>)
   19a52:	4798      	blx	r3
	sprintf(display_str, "Enter");
   19a54:	4a21      	ldr	r2, [pc, #132]	; (19adc <fn_menu_cal+0x1e4>)
   19a56:	4b2a      	ldr	r3, [pc, #168]	; (19b00 <fn_menu_cal+0x208>)
   19a58:	0010      	movs	r0, r2
   19a5a:	0019      	movs	r1, r3
   19a5c:	2306      	movs	r3, #6
   19a5e:	001a      	movs	r2, r3
   19a60:	4b20      	ldr	r3, [pc, #128]	; (19ae4 <fn_menu_cal+0x1ec>)
   19a62:	4798      	blx	r3
	glcd_tiny_draw_string(96,0,display_str);
   19a64:	4b1d      	ldr	r3, [pc, #116]	; (19adc <fn_menu_cal+0x1e4>)
   19a66:	001a      	movs	r2, r3
   19a68:	2100      	movs	r1, #0
   19a6a:	2060      	movs	r0, #96	; 0x60
   19a6c:	4b1e      	ldr	r3, [pc, #120]	; (19ae8 <fn_menu_cal+0x1f0>)
   19a6e:	4798      	blx	r3
	sprintf(display_str, "Back");
   19a70:	4a1a      	ldr	r2, [pc, #104]	; (19adc <fn_menu_cal+0x1e4>)
   19a72:	4b24      	ldr	r3, [pc, #144]	; (19b04 <fn_menu_cal+0x20c>)
   19a74:	0010      	movs	r0, r2
   19a76:	0019      	movs	r1, r3
   19a78:	2305      	movs	r3, #5
   19a7a:	001a      	movs	r2, r3
   19a7c:	4b19      	ldr	r3, [pc, #100]	; (19ae4 <fn_menu_cal+0x1ec>)
   19a7e:	4798      	blx	r3
	glcd_tiny_draw_string(103,7,display_str);
   19a80:	4b16      	ldr	r3, [pc, #88]	; (19adc <fn_menu_cal+0x1e4>)
   19a82:	001a      	movs	r2, r3
   19a84:	2107      	movs	r1, #7
   19a86:	2067      	movs	r0, #103	; 0x67
   19a88:	4b17      	ldr	r3, [pc, #92]	; (19ae8 <fn_menu_cal+0x1f0>)
   19a8a:	4798      	blx	r3
	
	//Display Pointer
	sprintf(display_str, ">");
   19a8c:	4a13      	ldr	r2, [pc, #76]	; (19adc <fn_menu_cal+0x1e4>)
   19a8e:	4b1e      	ldr	r3, [pc, #120]	; (19b08 <fn_menu_cal+0x210>)
   19a90:	0010      	movs	r0, r2
   19a92:	0019      	movs	r1, r3
   19a94:	2302      	movs	r3, #2
   19a96:	001a      	movs	r2, r3
   19a98:	4b12      	ldr	r3, [pc, #72]	; (19ae4 <fn_menu_cal+0x1ec>)
   19a9a:	4798      	blx	r3
	glcd_tiny_draw_string(10, cur_Y,display_str);
   19a9c:	4b07      	ldr	r3, [pc, #28]	; (19abc <fn_menu_cal+0x1c4>)
   19a9e:	681b      	ldr	r3, [r3, #0]
   19aa0:	b2db      	uxtb	r3, r3
   19aa2:	4a0e      	ldr	r2, [pc, #56]	; (19adc <fn_menu_cal+0x1e4>)
   19aa4:	0019      	movs	r1, r3
   19aa6:	200a      	movs	r0, #10
   19aa8:	4b0f      	ldr	r3, [pc, #60]	; (19ae8 <fn_menu_cal+0x1f0>)
   19aaa:	4798      	blx	r3
	
	glcd_write();
   19aac:	4b17      	ldr	r3, [pc, #92]	; (19b0c <fn_menu_cal+0x214>)
   19aae:	4798      	blx	r3
	
}
   19ab0:	46c0      	nop			; (mov r8, r8)
   19ab2:	46bd      	mov	sp, r7
   19ab4:	b001      	add	sp, #4
   19ab6:	bd90      	pop	{r4, r7, pc}
   19ab8:	20000110 	.word	0x20000110
   19abc:	20002ed8 	.word	0x20002ed8
   19ac0:	20003f50 	.word	0x20003f50
   19ac4:	20003a30 	.word	0x20003a30
   19ac8:	20003b7a 	.word	0x20003b7a
   19acc:	20003b78 	.word	0x20003b78
   19ad0:	00025dd0 	.word	0x00025dd0
   19ad4:	00013505 	.word	0x00013505
   19ad8:	000125a5 	.word	0x000125a5
   19adc:	20002f78 	.word	0x20002f78
   19ae0:	0002607c 	.word	0x0002607c
   19ae4:	00020fa5 	.word	0x00020fa5
   19ae8:	00013691 	.word	0x00013691
   19aec:	0002687c 	.word	0x0002687c
   19af0:	0002688c 	.word	0x0002688c
   19af4:	0002689c 	.word	0x0002689c
   19af8:	000268ac 	.word	0x000268ac
   19afc:	0001ac55 	.word	0x0001ac55
   19b00:	000267ec 	.word	0x000267ec
   19b04:	00026790 	.word	0x00026790
   19b08:	00026838 	.word	0x00026838
   19b0c:	00012de9 	.word	0x00012de9

00019b10 <fn_debug_backlight>:

void fn_debug_backlight(void){
   19b10:	b580      	push	{r7, lr}
   19b12:	af00      	add	r7, sp, #0
	static char colorRef;
	static struct BACKLIGHTCOLOR *colorPtr;
	//  Set initial conditions
	if (state_change) {
   19b14:	4b7a      	ldr	r3, [pc, #488]	; (19d00 <fn_debug_backlight+0x1f0>)
   19b16:	781b      	ldrb	r3, [r3, #0]
   19b18:	b2db      	uxtb	r3, r3
   19b1a:	2b00      	cmp	r3, #0
   19b1c:	d014      	beq.n	19b48 <fn_debug_backlight+0x38>
		cur_Y = 2;
   19b1e:	4b79      	ldr	r3, [pc, #484]	; (19d04 <fn_debug_backlight+0x1f4>)
   19b20:	2202      	movs	r2, #2
   19b22:	601a      	str	r2, [r3, #0]
		cur_Y_low = 2;
   19b24:	4b78      	ldr	r3, [pc, #480]	; (19d08 <fn_debug_backlight+0x1f8>)
   19b26:	2202      	movs	r2, #2
   19b28:	601a      	str	r2, [r3, #0]
		cur_Y_high = 5;
   19b2a:	4b78      	ldr	r3, [pc, #480]	; (19d0c <fn_debug_backlight+0x1fc>)
   19b2c:	2205      	movs	r2, #5
   19b2e:	601a      	str	r2, [r3, #0]
		options.backlight_setting.colorRef = 0;
   19b30:	4b77      	ldr	r3, [pc, #476]	; (19d10 <fn_debug_backlight+0x200>)
   19b32:	2200      	movs	r2, #0
   19b34:	749a      	strb	r2, [r3, #18]
		backlightOn();
   19b36:	4b77      	ldr	r3, [pc, #476]	; (19d14 <fn_debug_backlight+0x204>)
   19b38:	4798      	blx	r3
		colorPtr = backlightCustomAdjust(0, 0);
   19b3a:	2100      	movs	r1, #0
   19b3c:	2000      	movs	r0, #0
   19b3e:	4b76      	ldr	r3, [pc, #472]	; (19d18 <fn_debug_backlight+0x208>)
   19b40:	4798      	blx	r3
   19b42:	0002      	movs	r2, r0
   19b44:	4b75      	ldr	r3, [pc, #468]	; (19d1c <fn_debug_backlight+0x20c>)
   19b46:	601a      	str	r2, [r3, #0]
	}	
	
	switch(cur_Y){
   19b48:	4b6e      	ldr	r3, [pc, #440]	; (19d04 <fn_debug_backlight+0x1f4>)
   19b4a:	681b      	ldr	r3, [r3, #0]
   19b4c:	2b03      	cmp	r3, #3
   19b4e:	d00c      	beq.n	19b6a <fn_debug_backlight+0x5a>
   19b50:	dc02      	bgt.n	19b58 <fn_debug_backlight+0x48>
   19b52:	2b02      	cmp	r3, #2
   19b54:	d005      	beq.n	19b62 <fn_debug_backlight+0x52>
   19b56:	e014      	b.n	19b82 <fn_debug_backlight+0x72>
   19b58:	2b04      	cmp	r3, #4
   19b5a:	d00a      	beq.n	19b72 <fn_debug_backlight+0x62>
   19b5c:	2b05      	cmp	r3, #5
   19b5e:	d00c      	beq.n	19b7a <fn_debug_backlight+0x6a>
   19b60:	e00f      	b.n	19b82 <fn_debug_backlight+0x72>
		case 2:
			colorRef = 'r';
   19b62:	4b6f      	ldr	r3, [pc, #444]	; (19d20 <fn_debug_backlight+0x210>)
   19b64:	2272      	movs	r2, #114	; 0x72
   19b66:	701a      	strb	r2, [r3, #0]
			break;
   19b68:	e00f      	b.n	19b8a <fn_debug_backlight+0x7a>
		case 3:
			colorRef = 'g';
   19b6a:	4b6d      	ldr	r3, [pc, #436]	; (19d20 <fn_debug_backlight+0x210>)
   19b6c:	2267      	movs	r2, #103	; 0x67
   19b6e:	701a      	strb	r2, [r3, #0]
			break;
   19b70:	e00b      	b.n	19b8a <fn_debug_backlight+0x7a>
		case 4:
			colorRef = 'b';
   19b72:	4b6b      	ldr	r3, [pc, #428]	; (19d20 <fn_debug_backlight+0x210>)
   19b74:	2262      	movs	r2, #98	; 0x62
   19b76:	701a      	strb	r2, [r3, #0]
			break;
   19b78:	e007      	b.n	19b8a <fn_debug_backlight+0x7a>
		case 5:
			colorRef = 'L';
   19b7a:	4b69      	ldr	r3, [pc, #420]	; (19d20 <fn_debug_backlight+0x210>)
   19b7c:	224c      	movs	r2, #76	; 0x4c
   19b7e:	701a      	strb	r2, [r3, #0]
			break;
   19b80:	e003      	b.n	19b8a <fn_debug_backlight+0x7a>
		default:
			colorRef = 'L';
   19b82:	4b67      	ldr	r3, [pc, #412]	; (19d20 <fn_debug_backlight+0x210>)
   19b84:	224c      	movs	r2, #76	; 0x4c
   19b86:	701a      	strb	r2, [r3, #0]
			break;
   19b88:	46c0      	nop			; (mov r8, r8)
			
	}	
	
	// Button Handler
	switch(last_input){
   19b8a:	4b66      	ldr	r3, [pc, #408]	; (19d24 <fn_debug_backlight+0x214>)
   19b8c:	781b      	ldrb	r3, [r3, #0]
   19b8e:	b2db      	uxtb	r3, r3
   19b90:	2b02      	cmp	r3, #2
   19b92:	d020      	beq.n	19bd6 <fn_debug_backlight+0xc6>
   19b94:	dc02      	bgt.n	19b9c <fn_debug_backlight+0x8c>
   19b96:	2b01      	cmp	r3, #1
   19b98:	d005      	beq.n	19ba6 <fn_debug_backlight+0x96>
			break;
		case input_button3:
			backlightCustomAdjust(colorRef, -1);
			break;
		default:
			break;
   19b9a:	e02f      	b.n	19bfc <fn_debug_backlight+0xec>
	switch(last_input){
   19b9c:	2b03      	cmp	r3, #3
   19b9e:	d021      	beq.n	19be4 <fn_debug_backlight+0xd4>
   19ba0:	2b04      	cmp	r3, #4
   19ba2:	d00c      	beq.n	19bbe <fn_debug_backlight+0xae>
			break;
   19ba4:	e02a      	b.n	19bfc <fn_debug_backlight+0xec>
			if(cur_Y > cur_Y_low){--cur_Y; }
   19ba6:	4b57      	ldr	r3, [pc, #348]	; (19d04 <fn_debug_backlight+0x1f4>)
   19ba8:	681a      	ldr	r2, [r3, #0]
   19baa:	4b57      	ldr	r3, [pc, #348]	; (19d08 <fn_debug_backlight+0x1f8>)
   19bac:	681b      	ldr	r3, [r3, #0]
   19bae:	429a      	cmp	r2, r3
   19bb0:	dd21      	ble.n	19bf6 <fn_debug_backlight+0xe6>
   19bb2:	4b54      	ldr	r3, [pc, #336]	; (19d04 <fn_debug_backlight+0x1f4>)
   19bb4:	681b      	ldr	r3, [r3, #0]
   19bb6:	1e5a      	subs	r2, r3, #1
   19bb8:	4b52      	ldr	r3, [pc, #328]	; (19d04 <fn_debug_backlight+0x1f4>)
   19bba:	601a      	str	r2, [r3, #0]
			break;
   19bbc:	e01b      	b.n	19bf6 <fn_debug_backlight+0xe6>
			if(cur_Y < cur_Y_high){++cur_Y; }
   19bbe:	4b51      	ldr	r3, [pc, #324]	; (19d04 <fn_debug_backlight+0x1f4>)
   19bc0:	681a      	ldr	r2, [r3, #0]
   19bc2:	4b52      	ldr	r3, [pc, #328]	; (19d0c <fn_debug_backlight+0x1fc>)
   19bc4:	681b      	ldr	r3, [r3, #0]
   19bc6:	429a      	cmp	r2, r3
   19bc8:	da17      	bge.n	19bfa <fn_debug_backlight+0xea>
   19bca:	4b4e      	ldr	r3, [pc, #312]	; (19d04 <fn_debug_backlight+0x1f4>)
   19bcc:	681b      	ldr	r3, [r3, #0]
   19bce:	1c5a      	adds	r2, r3, #1
   19bd0:	4b4c      	ldr	r3, [pc, #304]	; (19d04 <fn_debug_backlight+0x1f4>)
   19bd2:	601a      	str	r2, [r3, #0]
			break;
   19bd4:	e011      	b.n	19bfa <fn_debug_backlight+0xea>
			backlightCustomAdjust(colorRef, 1);
   19bd6:	4b52      	ldr	r3, [pc, #328]	; (19d20 <fn_debug_backlight+0x210>)
   19bd8:	781b      	ldrb	r3, [r3, #0]
   19bda:	2101      	movs	r1, #1
   19bdc:	0018      	movs	r0, r3
   19bde:	4b4e      	ldr	r3, [pc, #312]	; (19d18 <fn_debug_backlight+0x208>)
   19be0:	4798      	blx	r3
			break;
   19be2:	e00b      	b.n	19bfc <fn_debug_backlight+0xec>
			backlightCustomAdjust(colorRef, -1);
   19be4:	4b4e      	ldr	r3, [pc, #312]	; (19d20 <fn_debug_backlight+0x210>)
   19be6:	781a      	ldrb	r2, [r3, #0]
   19be8:	2301      	movs	r3, #1
   19bea:	425b      	negs	r3, r3
   19bec:	0019      	movs	r1, r3
   19bee:	0010      	movs	r0, r2
   19bf0:	4b49      	ldr	r3, [pc, #292]	; (19d18 <fn_debug_backlight+0x208>)
   19bf2:	4798      	blx	r3
			break;
   19bf4:	e002      	b.n	19bfc <fn_debug_backlight+0xec>
			break;
   19bf6:	46c0      	nop			; (mov r8, r8)
   19bf8:	e000      	b.n	19bfc <fn_debug_backlight+0xec>
			break;
   19bfa:	46c0      	nop			; (mov r8, r8)
	}
	

	
	// Display
	glcd_clear_buffer();
   19bfc:	4b4a      	ldr	r3, [pc, #296]	; (19d28 <fn_debug_backlight+0x218>)
   19bfe:	4798      	blx	r3
	//  Display Title
	sprintf(display_str,"Backlight Debug:");
   19c00:	4a4a      	ldr	r2, [pc, #296]	; (19d2c <fn_debug_backlight+0x21c>)
   19c02:	4b4b      	ldr	r3, [pc, #300]	; (19d30 <fn_debug_backlight+0x220>)
   19c04:	0010      	movs	r0, r2
   19c06:	0019      	movs	r1, r3
   19c08:	2311      	movs	r3, #17
   19c0a:	001a      	movs	r2, r3
   19c0c:	4b49      	ldr	r3, [pc, #292]	; (19d34 <fn_debug_backlight+0x224>)
   19c0e:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   19c10:	4b46      	ldr	r3, [pc, #280]	; (19d2c <fn_debug_backlight+0x21c>)
   19c12:	001a      	movs	r2, r3
   19c14:	2100      	movs	r1, #0
   19c16:	2000      	movs	r0, #0
   19c18:	4b47      	ldr	r3, [pc, #284]	; (19d38 <fn_debug_backlight+0x228>)
   19c1a:	4798      	blx	r3
	
	//Display Options
	sprintf(display_str, "Red:   %d", colorPtr->red);
   19c1c:	4b3f      	ldr	r3, [pc, #252]	; (19d1c <fn_debug_backlight+0x20c>)
   19c1e:	681b      	ldr	r3, [r3, #0]
   19c20:	791b      	ldrb	r3, [r3, #4]
   19c22:	001a      	movs	r2, r3
   19c24:	4945      	ldr	r1, [pc, #276]	; (19d3c <fn_debug_backlight+0x22c>)
   19c26:	4b41      	ldr	r3, [pc, #260]	; (19d2c <fn_debug_backlight+0x21c>)
   19c28:	0018      	movs	r0, r3
   19c2a:	4b45      	ldr	r3, [pc, #276]	; (19d40 <fn_debug_backlight+0x230>)
   19c2c:	4798      	blx	r3
	glcd_tiny_draw_string(20, 2, display_str);
   19c2e:	4b3f      	ldr	r3, [pc, #252]	; (19d2c <fn_debug_backlight+0x21c>)
   19c30:	001a      	movs	r2, r3
   19c32:	2102      	movs	r1, #2
   19c34:	2014      	movs	r0, #20
   19c36:	4b40      	ldr	r3, [pc, #256]	; (19d38 <fn_debug_backlight+0x228>)
   19c38:	4798      	blx	r3
	sprintf(display_str, "Green: %d", colorPtr->green);
   19c3a:	4b38      	ldr	r3, [pc, #224]	; (19d1c <fn_debug_backlight+0x20c>)
   19c3c:	681b      	ldr	r3, [r3, #0]
   19c3e:	799b      	ldrb	r3, [r3, #6]
   19c40:	001a      	movs	r2, r3
   19c42:	4940      	ldr	r1, [pc, #256]	; (19d44 <fn_debug_backlight+0x234>)
   19c44:	4b39      	ldr	r3, [pc, #228]	; (19d2c <fn_debug_backlight+0x21c>)
   19c46:	0018      	movs	r0, r3
   19c48:	4b3d      	ldr	r3, [pc, #244]	; (19d40 <fn_debug_backlight+0x230>)
   19c4a:	4798      	blx	r3
	glcd_tiny_draw_string(20, 3, display_str);
   19c4c:	4b37      	ldr	r3, [pc, #220]	; (19d2c <fn_debug_backlight+0x21c>)
   19c4e:	001a      	movs	r2, r3
   19c50:	2103      	movs	r1, #3
   19c52:	2014      	movs	r0, #20
   19c54:	4b38      	ldr	r3, [pc, #224]	; (19d38 <fn_debug_backlight+0x228>)
   19c56:	4798      	blx	r3
	sprintf(display_str, "Blue:  %d", colorPtr->blue);
   19c58:	4b30      	ldr	r3, [pc, #192]	; (19d1c <fn_debug_backlight+0x20c>)
   19c5a:	681b      	ldr	r3, [r3, #0]
   19c5c:	795b      	ldrb	r3, [r3, #5]
   19c5e:	001a      	movs	r2, r3
   19c60:	4939      	ldr	r1, [pc, #228]	; (19d48 <fn_debug_backlight+0x238>)
   19c62:	4b32      	ldr	r3, [pc, #200]	; (19d2c <fn_debug_backlight+0x21c>)
   19c64:	0018      	movs	r0, r3
   19c66:	4b36      	ldr	r3, [pc, #216]	; (19d40 <fn_debug_backlight+0x230>)
   19c68:	4798      	blx	r3
	glcd_tiny_draw_string(20, 4, display_str);
   19c6a:	4b30      	ldr	r3, [pc, #192]	; (19d2c <fn_debug_backlight+0x21c>)
   19c6c:	001a      	movs	r2, r3
   19c6e:	2104      	movs	r1, #4
   19c70:	2014      	movs	r0, #20
   19c72:	4b31      	ldr	r3, [pc, #196]	; (19d38 <fn_debug_backlight+0x228>)
   19c74:	4798      	blx	r3
	sprintf(display_str, "Light: %d", options.backlight_setting.brightness);
   19c76:	4b26      	ldr	r3, [pc, #152]	; (19d10 <fn_debug_backlight+0x200>)
   19c78:	7b1b      	ldrb	r3, [r3, #12]
   19c7a:	001a      	movs	r2, r3
   19c7c:	4933      	ldr	r1, [pc, #204]	; (19d4c <fn_debug_backlight+0x23c>)
   19c7e:	4b2b      	ldr	r3, [pc, #172]	; (19d2c <fn_debug_backlight+0x21c>)
   19c80:	0018      	movs	r0, r3
   19c82:	4b2f      	ldr	r3, [pc, #188]	; (19d40 <fn_debug_backlight+0x230>)
   19c84:	4798      	blx	r3
	glcd_tiny_draw_string(20, 5, display_str);
   19c86:	4b29      	ldr	r3, [pc, #164]	; (19d2c <fn_debug_backlight+0x21c>)
   19c88:	001a      	movs	r2, r3
   19c8a:	2105      	movs	r1, #5
   19c8c:	2014      	movs	r0, #20
   19c8e:	4b2a      	ldr	r3, [pc, #168]	; (19d38 <fn_debug_backlight+0x228>)
   19c90:	4798      	blx	r3
	
	// Display soft keys
	draw_arrows(2);//  Draw up arrow at button 2
   19c92:	2002      	movs	r0, #2
   19c94:	4b2e      	ldr	r3, [pc, #184]	; (19d50 <fn_debug_backlight+0x240>)
   19c96:	4798      	blx	r3
	draw_arrows(3);//  Draw down arrow at button 3
   19c98:	2003      	movs	r0, #3
   19c9a:	4b2d      	ldr	r3, [pc, #180]	; (19d50 <fn_debug_backlight+0x240>)
   19c9c:	4798      	blx	r3
	sprintf(display_str, "Up");
   19c9e:	4a23      	ldr	r2, [pc, #140]	; (19d2c <fn_debug_backlight+0x21c>)
   19ca0:	4b2c      	ldr	r3, [pc, #176]	; (19d54 <fn_debug_backlight+0x244>)
   19ca2:	0010      	movs	r0, r2
   19ca4:	0019      	movs	r1, r3
   19ca6:	2303      	movs	r3, #3
   19ca8:	001a      	movs	r2, r3
   19caa:	4b22      	ldr	r3, [pc, #136]	; (19d34 <fn_debug_backlight+0x224>)
   19cac:	4798      	blx	r3
	glcd_tiny_draw_string(96,0,display_str);
   19cae:	4b1f      	ldr	r3, [pc, #124]	; (19d2c <fn_debug_backlight+0x21c>)
   19cb0:	001a      	movs	r2, r3
   19cb2:	2100      	movs	r1, #0
   19cb4:	2060      	movs	r0, #96	; 0x60
   19cb6:	4b20      	ldr	r3, [pc, #128]	; (19d38 <fn_debug_backlight+0x228>)
   19cb8:	4798      	blx	r3
	sprintf(display_str, "Down");
   19cba:	4a1c      	ldr	r2, [pc, #112]	; (19d2c <fn_debug_backlight+0x21c>)
   19cbc:	4b26      	ldr	r3, [pc, #152]	; (19d58 <fn_debug_backlight+0x248>)
   19cbe:	0010      	movs	r0, r2
   19cc0:	0019      	movs	r1, r3
   19cc2:	2305      	movs	r3, #5
   19cc4:	001a      	movs	r2, r3
   19cc6:	4b1b      	ldr	r3, [pc, #108]	; (19d34 <fn_debug_backlight+0x224>)
   19cc8:	4798      	blx	r3
	glcd_tiny_draw_string(103,7,display_str);
   19cca:	4b18      	ldr	r3, [pc, #96]	; (19d2c <fn_debug_backlight+0x21c>)
   19ccc:	001a      	movs	r2, r3
   19cce:	2107      	movs	r1, #7
   19cd0:	2067      	movs	r0, #103	; 0x67
   19cd2:	4b19      	ldr	r3, [pc, #100]	; (19d38 <fn_debug_backlight+0x228>)
   19cd4:	4798      	blx	r3
	
	//Display Pointer
	sprintf(display_str, ">");
   19cd6:	4a15      	ldr	r2, [pc, #84]	; (19d2c <fn_debug_backlight+0x21c>)
   19cd8:	4b20      	ldr	r3, [pc, #128]	; (19d5c <fn_debug_backlight+0x24c>)
   19cda:	0010      	movs	r0, r2
   19cdc:	0019      	movs	r1, r3
   19cde:	2302      	movs	r3, #2
   19ce0:	001a      	movs	r2, r3
   19ce2:	4b14      	ldr	r3, [pc, #80]	; (19d34 <fn_debug_backlight+0x224>)
   19ce4:	4798      	blx	r3
	glcd_tiny_draw_string(10, cur_Y,display_str);
   19ce6:	4b07      	ldr	r3, [pc, #28]	; (19d04 <fn_debug_backlight+0x1f4>)
   19ce8:	681b      	ldr	r3, [r3, #0]
   19cea:	b2db      	uxtb	r3, r3
   19cec:	4a0f      	ldr	r2, [pc, #60]	; (19d2c <fn_debug_backlight+0x21c>)
   19cee:	0019      	movs	r1, r3
   19cf0:	200a      	movs	r0, #10
   19cf2:	4b11      	ldr	r3, [pc, #68]	; (19d38 <fn_debug_backlight+0x228>)
   19cf4:	4798      	blx	r3
	
	glcd_write();
   19cf6:	4b1a      	ldr	r3, [pc, #104]	; (19d60 <fn_debug_backlight+0x250>)
   19cf8:	4798      	blx	r3
	
	
}
   19cfa:	46c0      	nop			; (mov r8, r8)
   19cfc:	46bd      	mov	sp, r7
   19cfe:	bd80      	pop	{r7, pc}
   19d00:	20000110 	.word	0x20000110
   19d04:	20002ed8 	.word	0x20002ed8
   19d08:	20003f50 	.word	0x20003f50
   19d0c:	20003a30 	.word	0x20003a30
   19d10:	20002eec 	.word	0x20002eec
   19d14:	00001441 	.word	0x00001441
   19d18:	00001275 	.word	0x00001275
   19d1c:	20000e0c 	.word	0x20000e0c
   19d20:	20000e10 	.word	0x20000e10
   19d24:	20003b7a 	.word	0x20003b7a
   19d28:	000125a5 	.word	0x000125a5
   19d2c:	20002f78 	.word	0x20002f78
   19d30:	000268b8 	.word	0x000268b8
   19d34:	00020fa5 	.word	0x00020fa5
   19d38:	00013691 	.word	0x00013691
   19d3c:	000268cc 	.word	0x000268cc
   19d40:	000210bd 	.word	0x000210bd
   19d44:	000268d8 	.word	0x000268d8
   19d48:	000268e4 	.word	0x000268e4
   19d4c:	000268f0 	.word	0x000268f0
   19d50:	0001ac55 	.word	0x0001ac55
   19d54:	000268fc 	.word	0x000268fc
   19d58:	00026900 	.word	0x00026900
   19d5c:	00026838 	.word	0x00026838
   19d60:	00012de9 	.word	0x00012de9

00019d64 <fn_set_options>:



void fn_set_options(void){
   19d64:	b590      	push	{r4, r7, lr}
   19d66:	b083      	sub	sp, #12
   19d68:	af02      	add	r7, sp, #8
	//  Set initial conditions
	if (state_change) {
   19d6a:	4bae      	ldr	r3, [pc, #696]	; (1a024 <fn_set_options+0x2c0>)
   19d6c:	781b      	ldrb	r3, [r3, #0]
   19d6e:	b2db      	uxtb	r3, r3
   19d70:	2b00      	cmp	r3, #0
   19d72:	d008      	beq.n	19d86 <fn_set_options+0x22>
		cur_Y = 1;
   19d74:	4bac      	ldr	r3, [pc, #688]	; (1a028 <fn_set_options+0x2c4>)
   19d76:	2201      	movs	r2, #1
   19d78:	601a      	str	r2, [r3, #0]
		cur_Y_low = 1;
   19d7a:	4bac      	ldr	r3, [pc, #688]	; (1a02c <fn_set_options+0x2c8>)
   19d7c:	2201      	movs	r2, #1
   19d7e:	601a      	str	r2, [r3, #0]
		cur_Y_high = 7;
   19d80:	4bab      	ldr	r3, [pc, #684]	; (1a030 <fn_set_options+0x2cc>)
   19d82:	2207      	movs	r2, #7
   19d84:	601a      	str	r2, [r3, #0]
	}
	
	// Button Handler
	switch(last_input){
   19d86:	4bab      	ldr	r3, [pc, #684]	; (1a034 <fn_set_options+0x2d0>)
   19d88:	781b      	ldrb	r3, [r3, #0]
   19d8a:	b2db      	uxtb	r3, r3
   19d8c:	2b02      	cmp	r3, #2
   19d8e:	d004      	beq.n	19d9a <fn_set_options+0x36>
   19d90:	2b03      	cmp	r3, #3
   19d92:	d00f      	beq.n	19db4 <fn_set_options+0x50>
   19d94:	2b01      	cmp	r3, #1
   19d96:	d019      	beq.n	19dcc <fn_set_options+0x68>
   19d98:	e074      	b.n	19e84 <fn_set_options+0x120>
		case input_button2:
			if(cur_Y > cur_Y_low){--cur_Y; }
   19d9a:	4ba3      	ldr	r3, [pc, #652]	; (1a028 <fn_set_options+0x2c4>)
   19d9c:	681a      	ldr	r2, [r3, #0]
   19d9e:	4ba3      	ldr	r3, [pc, #652]	; (1a02c <fn_set_options+0x2c8>)
   19da0:	681b      	ldr	r3, [r3, #0]
   19da2:	429a      	cmp	r2, r3
   19da4:	dc00      	bgt.n	19da8 <fn_set_options+0x44>
   19da6:	e068      	b.n	19e7a <fn_set_options+0x116>
   19da8:	4b9f      	ldr	r3, [pc, #636]	; (1a028 <fn_set_options+0x2c4>)
   19daa:	681b      	ldr	r3, [r3, #0]
   19dac:	1e5a      	subs	r2, r3, #1
   19dae:	4b9e      	ldr	r3, [pc, #632]	; (1a028 <fn_set_options+0x2c4>)
   19db0:	601a      	str	r2, [r3, #0]
			break;
   19db2:	e062      	b.n	19e7a <fn_set_options+0x116>
		case input_button3:
			if(cur_Y < cur_Y_high){++cur_Y; }
   19db4:	4b9c      	ldr	r3, [pc, #624]	; (1a028 <fn_set_options+0x2c4>)
   19db6:	681a      	ldr	r2, [r3, #0]
   19db8:	4b9d      	ldr	r3, [pc, #628]	; (1a030 <fn_set_options+0x2cc>)
   19dba:	681b      	ldr	r3, [r3, #0]
   19dbc:	429a      	cmp	r2, r3
   19dbe:	da5e      	bge.n	19e7e <fn_set_options+0x11a>
   19dc0:	4b99      	ldr	r3, [pc, #612]	; (1a028 <fn_set_options+0x2c4>)
   19dc2:	681b      	ldr	r3, [r3, #0]
   19dc4:	1c5a      	adds	r2, r3, #1
   19dc6:	4b98      	ldr	r3, [pc, #608]	; (1a028 <fn_set_options+0x2c4>)
   19dc8:	601a      	str	r2, [r3, #0]
			break;
   19dca:	e058      	b.n	19e7e <fn_set_options+0x11a>
		case input_button1:
			switch (cur_Y){
   19dcc:	4b96      	ldr	r3, [pc, #600]	; (1a028 <fn_set_options+0x2c4>)
   19dce:	681b      	ldr	r3, [r3, #0]
   19dd0:	2b07      	cmp	r3, #7
   19dd2:	d856      	bhi.n	19e82 <fn_set_options+0x11e>
   19dd4:	009a      	lsls	r2, r3, #2
   19dd6:	4b98      	ldr	r3, [pc, #608]	; (1a038 <fn_set_options+0x2d4>)
   19dd8:	18d3      	adds	r3, r2, r3
   19dda:	681b      	ldr	r3, [r3, #0]
   19ddc:	469f      	mov	pc, r3
				case 1:
					//  Distance Units
					if (options.current_unit_dist == feet){ options.current_unit_dist = meters;}
   19dde:	4b97      	ldr	r3, [pc, #604]	; (1a03c <fn_set_options+0x2d8>)
   19de0:	781b      	ldrb	r3, [r3, #0]
   19de2:	2b00      	cmp	r3, #0
   19de4:	d103      	bne.n	19dee <fn_set_options+0x8a>
   19de6:	4b95      	ldr	r3, [pc, #596]	; (1a03c <fn_set_options+0x2d8>)
   19de8:	2201      	movs	r2, #1
   19dea:	701a      	strb	r2, [r3, #0]
   19dec:	e002      	b.n	19df4 <fn_set_options+0x90>
					else{options.current_unit_dist = feet;}
   19dee:	4b93      	ldr	r3, [pc, #588]	; (1a03c <fn_set_options+0x2d8>)
   19df0:	2200      	movs	r2, #0
   19df2:	701a      	strb	r2, [r3, #0]
					save_user_settings();
   19df4:	4b92      	ldr	r3, [pc, #584]	; (1a040 <fn_set_options+0x2dc>)
   19df6:	4798      	blx	r3
					break;
   19df8:	e044      	b.n	19e84 <fn_set_options+0x120>
				case 2:
					//  Distance Units
					if (options.current_unit_temp == celsius){ options.current_unit_temp = fahrenheit;}
   19dfa:	4b90      	ldr	r3, [pc, #576]	; (1a03c <fn_set_options+0x2d8>)
   19dfc:	785b      	ldrb	r3, [r3, #1]
   19dfe:	2b04      	cmp	r3, #4
   19e00:	d103      	bne.n	19e0a <fn_set_options+0xa6>
   19e02:	4b8e      	ldr	r3, [pc, #568]	; (1a03c <fn_set_options+0x2d8>)
   19e04:	2205      	movs	r2, #5
   19e06:	705a      	strb	r2, [r3, #1]
   19e08:	e002      	b.n	19e10 <fn_set_options+0xac>
					else{options.current_unit_temp = celsius;}
   19e0a:	4b8c      	ldr	r3, [pc, #560]	; (1a03c <fn_set_options+0x2d8>)
   19e0c:	2204      	movs	r2, #4
   19e0e:	705a      	strb	r2, [r3, #1]
					save_user_settings();
   19e10:	4b8b      	ldr	r3, [pc, #556]	; (1a040 <fn_set_options+0x2dc>)
   19e12:	4798      	blx	r3
					break;
   19e14:	e036      	b.n	19e84 <fn_set_options+0x120>
				case 3:
					// Shot Delay
					options.shot_delay = options.shot_delay+1;
   19e16:	4b89      	ldr	r3, [pc, #548]	; (1a03c <fn_set_options+0x2d8>)
   19e18:	789b      	ldrb	r3, [r3, #2]
   19e1a:	3301      	adds	r3, #1
   19e1c:	b2da      	uxtb	r2, r3
   19e1e:	4b87      	ldr	r3, [pc, #540]	; (1a03c <fn_set_options+0x2d8>)
   19e20:	709a      	strb	r2, [r3, #2]
					if (options.shot_delay>shot_delay_max){options.shot_delay = 0;}
   19e22:	4b86      	ldr	r3, [pc, #536]	; (1a03c <fn_set_options+0x2d8>)
   19e24:	789b      	ldrb	r3, [r3, #2]
   19e26:	2b05      	cmp	r3, #5
   19e28:	d902      	bls.n	19e30 <fn_set_options+0xcc>
   19e2a:	4b84      	ldr	r3, [pc, #528]	; (1a03c <fn_set_options+0x2d8>)
   19e2c:	2200      	movs	r2, #0
   19e2e:	709a      	strb	r2, [r3, #2]
					save_user_settings();
   19e30:	4b83      	ldr	r3, [pc, #524]	; (1a040 <fn_set_options+0x2dc>)
   19e32:	4798      	blx	r3
					break;
   19e34:	e026      	b.n	19e84 <fn_set_options+0x120>
				case 4:
					// Charge Current
					if (options.chargeCurrent == 500){ options.chargeCurrent = 100;}
   19e36:	4b81      	ldr	r3, [pc, #516]	; (1a03c <fn_set_options+0x2d8>)
   19e38:	685a      	ldr	r2, [r3, #4]
   19e3a:	23fa      	movs	r3, #250	; 0xfa
   19e3c:	005b      	lsls	r3, r3, #1
   19e3e:	429a      	cmp	r2, r3
   19e40:	d103      	bne.n	19e4a <fn_set_options+0xe6>
   19e42:	4b7e      	ldr	r3, [pc, #504]	; (1a03c <fn_set_options+0x2d8>)
   19e44:	2264      	movs	r2, #100	; 0x64
   19e46:	605a      	str	r2, [r3, #4]
   19e48:	e003      	b.n	19e52 <fn_set_options+0xee>
					else{options.chargeCurrent = 500;}
   19e4a:	4b7c      	ldr	r3, [pc, #496]	; (1a03c <fn_set_options+0x2d8>)
   19e4c:	22fa      	movs	r2, #250	; 0xfa
   19e4e:	0052      	lsls	r2, r2, #1
   19e50:	605a      	str	r2, [r3, #4]
					setup_charger();
   19e52:	4b7c      	ldr	r3, [pc, #496]	; (1a044 <fn_set_options+0x2e0>)
   19e54:	4798      	blx	r3
					save_user_settings();
   19e56:	4b7a      	ldr	r3, [pc, #488]	; (1a040 <fn_set_options+0x2dc>)
   19e58:	4798      	blx	r3
					break;
   19e5a:	e013      	b.n	19e84 <fn_set_options+0x120>
				case 5:
					// Charge Current
					adjustErrorSensitivity();
   19e5c:	4b7a      	ldr	r3, [pc, #488]	; (1a048 <fn_set_options+0x2e4>)
   19e5e:	4798      	blx	r3
					save_user_settings();
   19e60:	4b77      	ldr	r3, [pc, #476]	; (1a040 <fn_set_options+0x2dc>)
   19e62:	4798      	blx	r3
					break;	
   19e64:	e00e      	b.n	19e84 <fn_set_options+0x120>
				case 6:
					// Backlight Color
					backlightColorToggle();					
   19e66:	4b79      	ldr	r3, [pc, #484]	; (1a04c <fn_set_options+0x2e8>)
   19e68:	4798      	blx	r3
					save_user_settings();
   19e6a:	4b75      	ldr	r3, [pc, #468]	; (1a040 <fn_set_options+0x2dc>)
   19e6c:	4798      	blx	r3
					break;
   19e6e:	e009      	b.n	19e84 <fn_set_options+0x120>
				case 7:
					// Backlight Color
					backlightLevelToggle();
   19e70:	4b77      	ldr	r3, [pc, #476]	; (1a050 <fn_set_options+0x2ec>)
   19e72:	4798      	blx	r3
					save_user_settings();
   19e74:	4b72      	ldr	r3, [pc, #456]	; (1a040 <fn_set_options+0x2dc>)
   19e76:	4798      	blx	r3
					break;
   19e78:	e004      	b.n	19e84 <fn_set_options+0x120>
			break;
   19e7a:	46c0      	nop			; (mov r8, r8)
   19e7c:	e002      	b.n	19e84 <fn_set_options+0x120>
			break;
   19e7e:	46c0      	nop			; (mov r8, r8)
   19e80:	e000      	b.n	19e84 <fn_set_options+0x120>
				default:
					break;
   19e82:	46c0      	nop			; (mov r8, r8)
			

	}
	
	// Display
	glcd_tiny_set_font(Font5x7,5,7,32,127);
   19e84:	4873      	ldr	r0, [pc, #460]	; (1a054 <fn_set_options+0x2f0>)
   19e86:	237f      	movs	r3, #127	; 0x7f
   19e88:	9300      	str	r3, [sp, #0]
   19e8a:	2320      	movs	r3, #32
   19e8c:	2207      	movs	r2, #7
   19e8e:	2105      	movs	r1, #5
   19e90:	4c71      	ldr	r4, [pc, #452]	; (1a058 <fn_set_options+0x2f4>)
   19e92:	47a0      	blx	r4
	glcd_clear_buffer();
   19e94:	4b71      	ldr	r3, [pc, #452]	; (1a05c <fn_set_options+0x2f8>)
   19e96:	4798      	blx	r3
	
	//Display Options
	if (options.current_unit_dist==feet){
   19e98:	4b68      	ldr	r3, [pc, #416]	; (1a03c <fn_set_options+0x2d8>)
   19e9a:	781b      	ldrb	r3, [r3, #0]
   19e9c:	2b00      	cmp	r3, #0
   19e9e:	d108      	bne.n	19eb2 <fn_set_options+0x14e>
		sprintf(display_str, "Distance:  Feet");
   19ea0:	4a6f      	ldr	r2, [pc, #444]	; (1a060 <fn_set_options+0x2fc>)
   19ea2:	4b70      	ldr	r3, [pc, #448]	; (1a064 <fn_set_options+0x300>)
   19ea4:	0010      	movs	r0, r2
   19ea6:	0019      	movs	r1, r3
   19ea8:	2310      	movs	r3, #16
   19eaa:	001a      	movs	r2, r3
   19eac:	4b6e      	ldr	r3, [pc, #440]	; (1a068 <fn_set_options+0x304>)
   19eae:	4798      	blx	r3
   19eb0:	e007      	b.n	19ec2 <fn_set_options+0x15e>
	}else{
		sprintf(display_str, "Distance:  Meters");
   19eb2:	4a6b      	ldr	r2, [pc, #428]	; (1a060 <fn_set_options+0x2fc>)
   19eb4:	4b6d      	ldr	r3, [pc, #436]	; (1a06c <fn_set_options+0x308>)
   19eb6:	0010      	movs	r0, r2
   19eb8:	0019      	movs	r1, r3
   19eba:	2312      	movs	r3, #18
   19ebc:	001a      	movs	r2, r3
   19ebe:	4b6a      	ldr	r3, [pc, #424]	; (1a068 <fn_set_options+0x304>)
   19ec0:	4798      	blx	r3
	}
	glcd_tiny_draw_string(5, 1, display_str);
   19ec2:	4b67      	ldr	r3, [pc, #412]	; (1a060 <fn_set_options+0x2fc>)
   19ec4:	001a      	movs	r2, r3
   19ec6:	2101      	movs	r1, #1
   19ec8:	2005      	movs	r0, #5
   19eca:	4b69      	ldr	r3, [pc, #420]	; (1a070 <fn_set_options+0x30c>)
   19ecc:	4798      	blx	r3
	if (options.current_unit_temp==fahrenheit){
   19ece:	4b5b      	ldr	r3, [pc, #364]	; (1a03c <fn_set_options+0x2d8>)
   19ed0:	785b      	ldrb	r3, [r3, #1]
   19ed2:	2b05      	cmp	r3, #5
   19ed4:	d108      	bne.n	19ee8 <fn_set_options+0x184>
		sprintf(display_str, "Temp:  Fahrenheit");
   19ed6:	4a62      	ldr	r2, [pc, #392]	; (1a060 <fn_set_options+0x2fc>)
   19ed8:	4b66      	ldr	r3, [pc, #408]	; (1a074 <fn_set_options+0x310>)
   19eda:	0010      	movs	r0, r2
   19edc:	0019      	movs	r1, r3
   19ede:	2312      	movs	r3, #18
   19ee0:	001a      	movs	r2, r3
   19ee2:	4b61      	ldr	r3, [pc, #388]	; (1a068 <fn_set_options+0x304>)
   19ee4:	4798      	blx	r3
   19ee6:	e007      	b.n	19ef8 <fn_set_options+0x194>
		}else{
		sprintf(display_str, "Temp:  Celsius");
   19ee8:	4a5d      	ldr	r2, [pc, #372]	; (1a060 <fn_set_options+0x2fc>)
   19eea:	4b63      	ldr	r3, [pc, #396]	; (1a078 <fn_set_options+0x314>)
   19eec:	0010      	movs	r0, r2
   19eee:	0019      	movs	r1, r3
   19ef0:	230f      	movs	r3, #15
   19ef2:	001a      	movs	r2, r3
   19ef4:	4b5c      	ldr	r3, [pc, #368]	; (1a068 <fn_set_options+0x304>)
   19ef6:	4798      	blx	r3
	}
	glcd_tiny_draw_string(5, 2, display_str);
   19ef8:	4b59      	ldr	r3, [pc, #356]	; (1a060 <fn_set_options+0x2fc>)
   19efa:	001a      	movs	r2, r3
   19efc:	2102      	movs	r1, #2
   19efe:	2005      	movs	r0, #5
   19f00:	4b5b      	ldr	r3, [pc, #364]	; (1a070 <fn_set_options+0x30c>)
   19f02:	4798      	blx	r3
	sprintf(display_str,"Shot Delay: %d sec",options.shot_delay);
   19f04:	4b4d      	ldr	r3, [pc, #308]	; (1a03c <fn_set_options+0x2d8>)
   19f06:	789b      	ldrb	r3, [r3, #2]
   19f08:	001a      	movs	r2, r3
   19f0a:	495c      	ldr	r1, [pc, #368]	; (1a07c <fn_set_options+0x318>)
   19f0c:	4b54      	ldr	r3, [pc, #336]	; (1a060 <fn_set_options+0x2fc>)
   19f0e:	0018      	movs	r0, r3
   19f10:	4b5b      	ldr	r3, [pc, #364]	; (1a080 <fn_set_options+0x31c>)
   19f12:	4798      	blx	r3
	glcd_tiny_draw_string(5, 3, display_str);
   19f14:	4b52      	ldr	r3, [pc, #328]	; (1a060 <fn_set_options+0x2fc>)
   19f16:	001a      	movs	r2, r3
   19f18:	2103      	movs	r1, #3
   19f1a:	2005      	movs	r0, #5
   19f1c:	4b54      	ldr	r3, [pc, #336]	; (1a070 <fn_set_options+0x30c>)
   19f1e:	4798      	blx	r3
	sprintf(display_str,"Charge Curr: %dmA",options.chargeCurrent);
   19f20:	4b46      	ldr	r3, [pc, #280]	; (1a03c <fn_set_options+0x2d8>)
   19f22:	685a      	ldr	r2, [r3, #4]
   19f24:	4957      	ldr	r1, [pc, #348]	; (1a084 <fn_set_options+0x320>)
   19f26:	4b4e      	ldr	r3, [pc, #312]	; (1a060 <fn_set_options+0x2fc>)
   19f28:	0018      	movs	r0, r3
   19f2a:	4b55      	ldr	r3, [pc, #340]	; (1a080 <fn_set_options+0x31c>)
   19f2c:	4798      	blx	r3
	glcd_tiny_draw_string(5, 4, display_str);
   19f2e:	4b4c      	ldr	r3, [pc, #304]	; (1a060 <fn_set_options+0x2fc>)
   19f30:	001a      	movs	r2, r3
   19f32:	2104      	movs	r1, #4
   19f34:	2005      	movs	r0, #5
   19f36:	4b4e      	ldr	r3, [pc, #312]	; (1a070 <fn_set_options+0x30c>)
   19f38:	4798      	blx	r3
	sprintf(display_str,"Err Sens: %0.2f deg", options.errorSensitivity);
   19f3a:	4b40      	ldr	r3, [pc, #256]	; (1a03c <fn_set_options+0x2d8>)
   19f3c:	689a      	ldr	r2, [r3, #8]
   19f3e:	4b52      	ldr	r3, [pc, #328]	; (1a088 <fn_set_options+0x324>)
   19f40:	1c10      	adds	r0, r2, #0
   19f42:	4798      	blx	r3
   19f44:	0003      	movs	r3, r0
   19f46:	000c      	movs	r4, r1
   19f48:	4950      	ldr	r1, [pc, #320]	; (1a08c <fn_set_options+0x328>)
   19f4a:	4845      	ldr	r0, [pc, #276]	; (1a060 <fn_set_options+0x2fc>)
   19f4c:	001a      	movs	r2, r3
   19f4e:	0023      	movs	r3, r4
   19f50:	4c4b      	ldr	r4, [pc, #300]	; (1a080 <fn_set_options+0x31c>)
   19f52:	47a0      	blx	r4
	glcd_tiny_draw_string(5, 5, display_str);
   19f54:	4b42      	ldr	r3, [pc, #264]	; (1a060 <fn_set_options+0x2fc>)
   19f56:	001a      	movs	r2, r3
   19f58:	2105      	movs	r1, #5
   19f5a:	2005      	movs	r0, #5
   19f5c:	4b44      	ldr	r3, [pc, #272]	; (1a070 <fn_set_options+0x30c>)
   19f5e:	4798      	blx	r3
	sprintf(display_str,"BL Color: %s", backlightGetCurrentColor());
   19f60:	4b4b      	ldr	r3, [pc, #300]	; (1a090 <fn_set_options+0x32c>)
   19f62:	4798      	blx	r3
   19f64:	0002      	movs	r2, r0
   19f66:	494b      	ldr	r1, [pc, #300]	; (1a094 <fn_set_options+0x330>)
   19f68:	4b3d      	ldr	r3, [pc, #244]	; (1a060 <fn_set_options+0x2fc>)
   19f6a:	0018      	movs	r0, r3
   19f6c:	4b44      	ldr	r3, [pc, #272]	; (1a080 <fn_set_options+0x31c>)
   19f6e:	4798      	blx	r3
	glcd_tiny_draw_string(5, 6, display_str);
   19f70:	4b3b      	ldr	r3, [pc, #236]	; (1a060 <fn_set_options+0x2fc>)
   19f72:	001a      	movs	r2, r3
   19f74:	2106      	movs	r1, #6
   19f76:	2005      	movs	r0, #5
   19f78:	4b3d      	ldr	r3, [pc, #244]	; (1a070 <fn_set_options+0x30c>)
   19f7a:	4798      	blx	r3
	sprintf(display_str,"BL Level: %d", options.backlight_setting.brightness);
   19f7c:	4b2f      	ldr	r3, [pc, #188]	; (1a03c <fn_set_options+0x2d8>)
   19f7e:	7b1b      	ldrb	r3, [r3, #12]
   19f80:	001a      	movs	r2, r3
   19f82:	4945      	ldr	r1, [pc, #276]	; (1a098 <fn_set_options+0x334>)
   19f84:	4b36      	ldr	r3, [pc, #216]	; (1a060 <fn_set_options+0x2fc>)
   19f86:	0018      	movs	r0, r3
   19f88:	4b3d      	ldr	r3, [pc, #244]	; (1a080 <fn_set_options+0x31c>)
   19f8a:	4798      	blx	r3
	glcd_tiny_draw_string(5, 7, display_str);
   19f8c:	4b34      	ldr	r3, [pc, #208]	; (1a060 <fn_set_options+0x2fc>)
   19f8e:	001a      	movs	r2, r3
   19f90:	2107      	movs	r1, #7
   19f92:	2005      	movs	r0, #5
   19f94:	4b36      	ldr	r3, [pc, #216]	; (1a070 <fn_set_options+0x30c>)
   19f96:	4798      	blx	r3
	
	//  Display Title
	sprintf(display_str,"Options:");
   19f98:	4a31      	ldr	r2, [pc, #196]	; (1a060 <fn_set_options+0x2fc>)
   19f9a:	4b40      	ldr	r3, [pc, #256]	; (1a09c <fn_set_options+0x338>)
   19f9c:	0010      	movs	r0, r2
   19f9e:	0019      	movs	r1, r3
   19fa0:	2309      	movs	r3, #9
   19fa2:	001a      	movs	r2, r3
   19fa4:	4b30      	ldr	r3, [pc, #192]	; (1a068 <fn_set_options+0x304>)
   19fa6:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   19fa8:	4b2d      	ldr	r3, [pc, #180]	; (1a060 <fn_set_options+0x2fc>)
   19faa:	001a      	movs	r2, r3
   19fac:	2100      	movs	r1, #0
   19fae:	2000      	movs	r0, #0
   19fb0:	4b2f      	ldr	r3, [pc, #188]	; (1a070 <fn_set_options+0x30c>)
   19fb2:	4798      	blx	r3
	
	// Display soft keys
	draw_arrows(2);//  Draw up arrow at button 2
   19fb4:	2002      	movs	r0, #2
   19fb6:	4b3a      	ldr	r3, [pc, #232]	; (1a0a0 <fn_set_options+0x33c>)
   19fb8:	4798      	blx	r3
	draw_arrows(3);//  Draw down arrow at button 3
   19fba:	2003      	movs	r0, #3
   19fbc:	4b38      	ldr	r3, [pc, #224]	; (1a0a0 <fn_set_options+0x33c>)
   19fbe:	4798      	blx	r3
	sprintf(display_str, "Adjust");
   19fc0:	4a27      	ldr	r2, [pc, #156]	; (1a060 <fn_set_options+0x2fc>)
   19fc2:	4b38      	ldr	r3, [pc, #224]	; (1a0a4 <fn_set_options+0x340>)
   19fc4:	0010      	movs	r0, r2
   19fc6:	0019      	movs	r1, r3
   19fc8:	2307      	movs	r3, #7
   19fca:	001a      	movs	r2, r3
   19fcc:	4b26      	ldr	r3, [pc, #152]	; (1a068 <fn_set_options+0x304>)
   19fce:	4798      	blx	r3
	glcd_tiny_draw_string(90,0,display_str);
   19fd0:	4b23      	ldr	r3, [pc, #140]	; (1a060 <fn_set_options+0x2fc>)
   19fd2:	001a      	movs	r2, r3
   19fd4:	2100      	movs	r1, #0
   19fd6:	205a      	movs	r0, #90	; 0x5a
   19fd8:	4b25      	ldr	r3, [pc, #148]	; (1a070 <fn_set_options+0x30c>)
   19fda:	4798      	blx	r3
	sprintf(display_str, "Back");
   19fdc:	4a20      	ldr	r2, [pc, #128]	; (1a060 <fn_set_options+0x2fc>)
   19fde:	4b32      	ldr	r3, [pc, #200]	; (1a0a8 <fn_set_options+0x344>)
   19fe0:	0010      	movs	r0, r2
   19fe2:	0019      	movs	r1, r3
   19fe4:	2305      	movs	r3, #5
   19fe6:	001a      	movs	r2, r3
   19fe8:	4b1f      	ldr	r3, [pc, #124]	; (1a068 <fn_set_options+0x304>)
   19fea:	4798      	blx	r3
	glcd_tiny_draw_string(104,7,display_str);
   19fec:	4b1c      	ldr	r3, [pc, #112]	; (1a060 <fn_set_options+0x2fc>)
   19fee:	001a      	movs	r2, r3
   19ff0:	2107      	movs	r1, #7
   19ff2:	2068      	movs	r0, #104	; 0x68
   19ff4:	4b1e      	ldr	r3, [pc, #120]	; (1a070 <fn_set_options+0x30c>)
   19ff6:	4798      	blx	r3
	
	//Display Pointer
	sprintf(display_str, ">");
   19ff8:	4a19      	ldr	r2, [pc, #100]	; (1a060 <fn_set_options+0x2fc>)
   19ffa:	4b2c      	ldr	r3, [pc, #176]	; (1a0ac <fn_set_options+0x348>)
   19ffc:	0010      	movs	r0, r2
   19ffe:	0019      	movs	r1, r3
   1a000:	2302      	movs	r3, #2
   1a002:	001a      	movs	r2, r3
   1a004:	4b18      	ldr	r3, [pc, #96]	; (1a068 <fn_set_options+0x304>)
   1a006:	4798      	blx	r3
	glcd_tiny_draw_string(0, cur_Y,display_str);
   1a008:	4b07      	ldr	r3, [pc, #28]	; (1a028 <fn_set_options+0x2c4>)
   1a00a:	681b      	ldr	r3, [r3, #0]
   1a00c:	b2db      	uxtb	r3, r3
   1a00e:	4a14      	ldr	r2, [pc, #80]	; (1a060 <fn_set_options+0x2fc>)
   1a010:	0019      	movs	r1, r3
   1a012:	2000      	movs	r0, #0
   1a014:	4b16      	ldr	r3, [pc, #88]	; (1a070 <fn_set_options+0x30c>)
   1a016:	4798      	blx	r3
		
	glcd_write();
   1a018:	4b25      	ldr	r3, [pc, #148]	; (1a0b0 <fn_set_options+0x34c>)
   1a01a:	4798      	blx	r3

}
   1a01c:	46c0      	nop			; (mov r8, r8)
   1a01e:	46bd      	mov	sp, r7
   1a020:	b001      	add	sp, #4
   1a022:	bd90      	pop	{r4, r7, pc}
   1a024:	20000110 	.word	0x20000110
   1a028:	20002ed8 	.word	0x20002ed8
   1a02c:	20003f50 	.word	0x20003f50
   1a030:	20003a30 	.word	0x20003a30
   1a034:	20003b7a 	.word	0x20003b7a
   1a038:	00026b20 	.word	0x00026b20
   1a03c:	20002eec 	.word	0x20002eec
   1a040:	00001b8d 	.word	0x00001b8d
   1a044:	00001a1d 	.word	0x00001a1d
   1a048:	00003169 	.word	0x00003169
   1a04c:	00001361 	.word	0x00001361
   1a050:	000013ed 	.word	0x000013ed
   1a054:	00025dd0 	.word	0x00025dd0
   1a058:	00013505 	.word	0x00013505
   1a05c:	000125a5 	.word	0x000125a5
   1a060:	20002f78 	.word	0x20002f78
   1a064:	00026908 	.word	0x00026908
   1a068:	00020fa5 	.word	0x00020fa5
   1a06c:	00026918 	.word	0x00026918
   1a070:	00013691 	.word	0x00013691
   1a074:	0002692c 	.word	0x0002692c
   1a078:	00026940 	.word	0x00026940
   1a07c:	00026950 	.word	0x00026950
   1a080:	000210bd 	.word	0x000210bd
   1a084:	00026964 	.word	0x00026964
   1a088:	00020d99 	.word	0x00020d99
   1a08c:	00026978 	.word	0x00026978
   1a090:	00001421 	.word	0x00001421
   1a094:	0002698c 	.word	0x0002698c
   1a098:	0002699c 	.word	0x0002699c
   1a09c:	000269ac 	.word	0x000269ac
   1a0a0:	0001ac55 	.word	0x0001ac55
   1a0a4:	000269b8 	.word	0x000269b8
   1a0a8:	00026790 	.word	0x00026790
   1a0ac:	00026838 	.word	0x00026838
   1a0b0:	00012de9 	.word	0x00012de9

0001a0b4 <fn_set_bluetooth>:



void fn_set_bluetooth(void){
   1a0b4:	b590      	push	{r4, r7, lr}
   1a0b6:	b087      	sub	sp, #28
   1a0b8:	af02      	add	r7, sp, #8
	char str_on[] = "On";
   1a0ba:	2308      	movs	r3, #8
   1a0bc:	18fb      	adds	r3, r7, r3
   1a0be:	4ac0      	ldr	r2, [pc, #768]	; (1a3c0 <fn_set_bluetooth+0x30c>)
   1a0c0:	8811      	ldrh	r1, [r2, #0]
   1a0c2:	8019      	strh	r1, [r3, #0]
   1a0c4:	7892      	ldrb	r2, [r2, #2]
   1a0c6:	709a      	strb	r2, [r3, #2]
	char str_off[] = "Off";
   1a0c8:	1d3b      	adds	r3, r7, #4
   1a0ca:	4abe      	ldr	r2, [pc, #760]	; (1a3c4 <fn_set_bluetooth+0x310>)
   1a0cc:	601a      	str	r2, [r3, #0]
	char *str_ptr;
	bool current_state;
	
	if (state_change) {
   1a0ce:	4bbe      	ldr	r3, [pc, #760]	; (1a3c8 <fn_set_bluetooth+0x314>)
   1a0d0:	781b      	ldrb	r3, [r3, #0]
   1a0d2:	b2db      	uxtb	r3, r3
   1a0d4:	2b00      	cmp	r3, #0
   1a0d6:	d00b      	beq.n	1a0f0 <fn_set_bluetooth+0x3c>
		cur_Y=2;
   1a0d8:	4bbc      	ldr	r3, [pc, #752]	; (1a3cc <fn_set_bluetooth+0x318>)
   1a0da:	2202      	movs	r2, #2
   1a0dc:	601a      	str	r2, [r3, #0]
		cur_Y_low=2;
   1a0de:	4bbc      	ldr	r3, [pc, #752]	; (1a3d0 <fn_set_bluetooth+0x31c>)
   1a0e0:	2202      	movs	r2, #2
   1a0e2:	601a      	str	r2, [r3, #0]
		cur_Y_high=5;
   1a0e4:	4bbb      	ldr	r3, [pc, #748]	; (1a3d4 <fn_set_bluetooth+0x320>)
   1a0e6:	2205      	movs	r2, #5
   1a0e8:	601a      	str	r2, [r3, #0]
		last_input = input_none;
   1a0ea:	4bbb      	ldr	r3, [pc, #748]	; (1a3d8 <fn_set_bluetooth+0x324>)
   1a0ec:	2200      	movs	r2, #0
   1a0ee:	701a      	strb	r2, [r3, #0]
		
	}
	
	switch(last_input){
   1a0f0:	4bb9      	ldr	r3, [pc, #740]	; (1a3d8 <fn_set_bluetooth+0x324>)
   1a0f2:	781b      	ldrb	r3, [r3, #0]
   1a0f4:	b2db      	uxtb	r3, r3
   1a0f6:	2b02      	cmp	r3, #2
   1a0f8:	d004      	beq.n	1a104 <fn_set_bluetooth+0x50>
   1a0fa:	2b03      	cmp	r3, #3
   1a0fc:	d00f      	beq.n	1a11e <fn_set_bluetooth+0x6a>
   1a0fe:	2b01      	cmp	r3, #1
   1a100:	d01a      	beq.n	1a138 <fn_set_bluetooth+0x84>
					configure_usart();
				}
				
			}
		default:
			break;
   1a102:	e0a4      	b.n	1a24e <fn_set_bluetooth+0x19a>
			if(cur_Y > cur_Y_low){--cur_Y; }
   1a104:	4bb1      	ldr	r3, [pc, #708]	; (1a3cc <fn_set_bluetooth+0x318>)
   1a106:	681a      	ldr	r2, [r3, #0]
   1a108:	4bb1      	ldr	r3, [pc, #708]	; (1a3d0 <fn_set_bluetooth+0x31c>)
   1a10a:	681b      	ldr	r3, [r3, #0]
   1a10c:	429a      	cmp	r2, r3
   1a10e:	dc00      	bgt.n	1a112 <fn_set_bluetooth+0x5e>
   1a110:	e099      	b.n	1a246 <fn_set_bluetooth+0x192>
   1a112:	4bae      	ldr	r3, [pc, #696]	; (1a3cc <fn_set_bluetooth+0x318>)
   1a114:	681b      	ldr	r3, [r3, #0]
   1a116:	1e5a      	subs	r2, r3, #1
   1a118:	4bac      	ldr	r3, [pc, #688]	; (1a3cc <fn_set_bluetooth+0x318>)
   1a11a:	601a      	str	r2, [r3, #0]
			break;
   1a11c:	e093      	b.n	1a246 <fn_set_bluetooth+0x192>
			if(cur_Y < cur_Y_high){++cur_Y; }
   1a11e:	4bab      	ldr	r3, [pc, #684]	; (1a3cc <fn_set_bluetooth+0x318>)
   1a120:	681a      	ldr	r2, [r3, #0]
   1a122:	4bac      	ldr	r3, [pc, #688]	; (1a3d4 <fn_set_bluetooth+0x320>)
   1a124:	681b      	ldr	r3, [r3, #0]
   1a126:	429a      	cmp	r2, r3
   1a128:	db00      	blt.n	1a12c <fn_set_bluetooth+0x78>
   1a12a:	e08e      	b.n	1a24a <fn_set_bluetooth+0x196>
   1a12c:	4ba7      	ldr	r3, [pc, #668]	; (1a3cc <fn_set_bluetooth+0x318>)
   1a12e:	681b      	ldr	r3, [r3, #0]
   1a130:	1c5a      	adds	r2, r3, #1
   1a132:	4ba6      	ldr	r3, [pc, #664]	; (1a3cc <fn_set_bluetooth+0x318>)
   1a134:	601a      	str	r2, [r3, #0]
			break;
   1a136:	e088      	b.n	1a24a <fn_set_bluetooth+0x196>
			if(cur_Y == 2){
   1a138:	4ba4      	ldr	r3, [pc, #656]	; (1a3cc <fn_set_bluetooth+0x318>)
   1a13a:	681b      	ldr	r3, [r3, #0]
   1a13c:	2b02      	cmp	r3, #2
   1a13e:	d118      	bne.n	1a172 <fn_set_bluetooth+0xbe>
				current_state = ioport_get_pin_level(BLE_autorun);
   1a140:	230b      	movs	r3, #11
   1a142:	18fc      	adds	r4, r7, r3
   1a144:	200e      	movs	r0, #14
   1a146:	4ba5      	ldr	r3, [pc, #660]	; (1a3dc <fn_set_bluetooth+0x328>)
   1a148:	4798      	blx	r3
   1a14a:	0003      	movs	r3, r0
   1a14c:	7023      	strb	r3, [r4, #0]
				ioport_set_pin_level(BLE_autorun, !current_state);
   1a14e:	230b      	movs	r3, #11
   1a150:	18fb      	adds	r3, r7, r3
   1a152:	781b      	ldrb	r3, [r3, #0]
   1a154:	1e5a      	subs	r2, r3, #1
   1a156:	4193      	sbcs	r3, r2
   1a158:	b2db      	uxtb	r3, r3
   1a15a:	2201      	movs	r2, #1
   1a15c:	4053      	eors	r3, r2
   1a15e:	b2db      	uxtb	r3, r3
   1a160:	1c1a      	adds	r2, r3, #0
   1a162:	2301      	movs	r3, #1
   1a164:	4013      	ands	r3, r2
   1a166:	b2db      	uxtb	r3, r3
   1a168:	0019      	movs	r1, r3
   1a16a:	200e      	movs	r0, #14
   1a16c:	4b9c      	ldr	r3, [pc, #624]	; (1a3e0 <fn_set_bluetooth+0x32c>)
   1a16e:	4798      	blx	r3
			break;
   1a170:	e06d      	b.n	1a24e <fn_set_bluetooth+0x19a>
			} else if (cur_Y==3){
   1a172:	4b96      	ldr	r3, [pc, #600]	; (1a3cc <fn_set_bluetooth+0x318>)
   1a174:	681b      	ldr	r3, [r3, #0]
   1a176:	2b03      	cmp	r3, #3
   1a178:	d118      	bne.n	1a1ac <fn_set_bluetooth+0xf8>
				current_state = ioport_get_pin_level(BLE_reset);
   1a17a:	230b      	movs	r3, #11
   1a17c:	18fc      	adds	r4, r7, r3
   1a17e:	2003      	movs	r0, #3
   1a180:	4b96      	ldr	r3, [pc, #600]	; (1a3dc <fn_set_bluetooth+0x328>)
   1a182:	4798      	blx	r3
   1a184:	0003      	movs	r3, r0
   1a186:	7023      	strb	r3, [r4, #0]
				ioport_set_pin_level(BLE_reset, !current_state);
   1a188:	230b      	movs	r3, #11
   1a18a:	18fb      	adds	r3, r7, r3
   1a18c:	781b      	ldrb	r3, [r3, #0]
   1a18e:	1e5a      	subs	r2, r3, #1
   1a190:	4193      	sbcs	r3, r2
   1a192:	b2db      	uxtb	r3, r3
   1a194:	2201      	movs	r2, #1
   1a196:	4053      	eors	r3, r2
   1a198:	b2db      	uxtb	r3, r3
   1a19a:	1c1a      	adds	r2, r3, #0
   1a19c:	2301      	movs	r3, #1
   1a19e:	4013      	ands	r3, r2
   1a1a0:	b2db      	uxtb	r3, r3
   1a1a2:	0019      	movs	r1, r3
   1a1a4:	2003      	movs	r0, #3
   1a1a6:	4b8e      	ldr	r3, [pc, #568]	; (1a3e0 <fn_set_bluetooth+0x32c>)
   1a1a8:	4798      	blx	r3
			break;
   1a1aa:	e050      	b.n	1a24e <fn_set_bluetooth+0x19a>
			} else if (cur_Y==4){
   1a1ac:	4b87      	ldr	r3, [pc, #540]	; (1a3cc <fn_set_bluetooth+0x318>)
   1a1ae:	681b      	ldr	r3, [r3, #0]
   1a1b0:	2b04      	cmp	r3, #4
   1a1b2:	d118      	bne.n	1a1e6 <fn_set_bluetooth+0x132>
				current_state = ioport_get_pin_level(BLE_ota);
   1a1b4:	230b      	movs	r3, #11
   1a1b6:	18fc      	adds	r4, r7, r3
   1a1b8:	2036      	movs	r0, #54	; 0x36
   1a1ba:	4b88      	ldr	r3, [pc, #544]	; (1a3dc <fn_set_bluetooth+0x328>)
   1a1bc:	4798      	blx	r3
   1a1be:	0003      	movs	r3, r0
   1a1c0:	7023      	strb	r3, [r4, #0]
				ioport_set_pin_level(BLE_ota, !current_state);		
   1a1c2:	230b      	movs	r3, #11
   1a1c4:	18fb      	adds	r3, r7, r3
   1a1c6:	781b      	ldrb	r3, [r3, #0]
   1a1c8:	1e5a      	subs	r2, r3, #1
   1a1ca:	4193      	sbcs	r3, r2
   1a1cc:	b2db      	uxtb	r3, r3
   1a1ce:	2201      	movs	r2, #1
   1a1d0:	4053      	eors	r3, r2
   1a1d2:	b2db      	uxtb	r3, r3
   1a1d4:	1c1a      	adds	r2, r3, #0
   1a1d6:	2301      	movs	r3, #1
   1a1d8:	4013      	ands	r3, r2
   1a1da:	b2db      	uxtb	r3, r3
   1a1dc:	0019      	movs	r1, r3
   1a1de:	2036      	movs	r0, #54	; 0x36
   1a1e0:	4b7f      	ldr	r3, [pc, #508]	; (1a3e0 <fn_set_bluetooth+0x32c>)
   1a1e2:	4798      	blx	r3
			break;
   1a1e4:	e033      	b.n	1a24e <fn_set_bluetooth+0x19a>
			} else if (cur_Y==5){
   1a1e6:	4b79      	ldr	r3, [pc, #484]	; (1a3cc <fn_set_bluetooth+0x318>)
   1a1e8:	681b      	ldr	r3, [r3, #0]
   1a1ea:	2b05      	cmp	r3, #5
   1a1ec:	d12f      	bne.n	1a24e <fn_set_bluetooth+0x19a>
				if (USART_BLE_enabled){
   1a1ee:	4b7d      	ldr	r3, [pc, #500]	; (1a3e4 <fn_set_bluetooth+0x330>)
   1a1f0:	781b      	ldrb	r3, [r3, #0]
   1a1f2:	2b00      	cmp	r3, #0
   1a1f4:	d021      	beq.n	1a23a <fn_set_bluetooth+0x186>
					USART_BLE_enabled = false;
   1a1f6:	4b7b      	ldr	r3, [pc, #492]	; (1a3e4 <fn_set_bluetooth+0x330>)
   1a1f8:	2200      	movs	r2, #0
   1a1fa:	701a      	strb	r2, [r3, #0]
					usart_disable(&usart_BLE);
   1a1fc:	4b7a      	ldr	r3, [pc, #488]	; (1a3e8 <fn_set_bluetooth+0x334>)
   1a1fe:	0018      	movs	r0, r3
   1a200:	4b7a      	ldr	r3, [pc, #488]	; (1a3ec <fn_set_bluetooth+0x338>)
   1a202:	4798      	blx	r3
					ioport_set_pin_dir(MCU_RTS1, IOPORT_DIR_OUTPUT);
   1a204:	2101      	movs	r1, #1
   1a206:	200a      	movs	r0, #10
   1a208:	4b79      	ldr	r3, [pc, #484]	; (1a3f0 <fn_set_bluetooth+0x33c>)
   1a20a:	4798      	blx	r3
					ioport_set_pin_level(MCU_RTS1, false);
   1a20c:	2100      	movs	r1, #0
   1a20e:	200a      	movs	r0, #10
   1a210:	4b73      	ldr	r3, [pc, #460]	; (1a3e0 <fn_set_bluetooth+0x32c>)
   1a212:	4798      	blx	r3
					ioport_set_pin_dir(MCU_CTS1, IOPORT_DIR_INPUT);
   1a214:	2100      	movs	r1, #0
   1a216:	200b      	movs	r0, #11
   1a218:	4b75      	ldr	r3, [pc, #468]	; (1a3f0 <fn_set_bluetooth+0x33c>)
   1a21a:	4798      	blx	r3
					ioport_reset_pin_mode(MCU_TX1);
   1a21c:	2008      	movs	r0, #8
   1a21e:	4b75      	ldr	r3, [pc, #468]	; (1a3f4 <fn_set_bluetooth+0x340>)
   1a220:	4798      	blx	r3
					ioport_reset_pin_mode(MCU_RX1);
   1a222:	2009      	movs	r0, #9
   1a224:	4b73      	ldr	r3, [pc, #460]	; (1a3f4 <fn_set_bluetooth+0x340>)
   1a226:	4798      	blx	r3
					ioport_set_pin_dir(MCU_TX1, IOPORT_DIR_INPUT);
   1a228:	2100      	movs	r1, #0
   1a22a:	2008      	movs	r0, #8
   1a22c:	4b70      	ldr	r3, [pc, #448]	; (1a3f0 <fn_set_bluetooth+0x33c>)
   1a22e:	4798      	blx	r3
					ioport_set_pin_dir(MCU_RX1, IOPORT_DIR_INPUT);
   1a230:	2100      	movs	r1, #0
   1a232:	2009      	movs	r0, #9
   1a234:	4b6e      	ldr	r3, [pc, #440]	; (1a3f0 <fn_set_bluetooth+0x33c>)
   1a236:	4798      	blx	r3
			break;
   1a238:	e009      	b.n	1a24e <fn_set_bluetooth+0x19a>
					USART_BLE_enabled = true;
   1a23a:	4b6a      	ldr	r3, [pc, #424]	; (1a3e4 <fn_set_bluetooth+0x330>)
   1a23c:	2201      	movs	r2, #1
   1a23e:	701a      	strb	r2, [r3, #0]
					configure_usart();
   1a240:	4b6d      	ldr	r3, [pc, #436]	; (1a3f8 <fn_set_bluetooth+0x344>)
   1a242:	4798      	blx	r3
			break;
   1a244:	e003      	b.n	1a24e <fn_set_bluetooth+0x19a>
			break;
   1a246:	46c0      	nop			; (mov r8, r8)
   1a248:	e002      	b.n	1a250 <fn_set_bluetooth+0x19c>
			break;
   1a24a:	46c0      	nop			; (mov r8, r8)
   1a24c:	e000      	b.n	1a250 <fn_set_bluetooth+0x19c>
			break;
   1a24e:	46c0      	nop			; (mov r8, r8)
	}


	
	glcd_tiny_set_font(Font5x7,5,7,32,127);
   1a250:	486a      	ldr	r0, [pc, #424]	; (1a3fc <fn_set_bluetooth+0x348>)
   1a252:	237f      	movs	r3, #127	; 0x7f
   1a254:	9300      	str	r3, [sp, #0]
   1a256:	2320      	movs	r3, #32
   1a258:	2207      	movs	r2, #7
   1a25a:	2105      	movs	r1, #5
   1a25c:	4c68      	ldr	r4, [pc, #416]	; (1a400 <fn_set_bluetooth+0x34c>)
   1a25e:	47a0      	blx	r4
	glcd_clear_buffer();
   1a260:	4b68      	ldr	r3, [pc, #416]	; (1a404 <fn_set_bluetooth+0x350>)
   1a262:	4798      	blx	r3
	
	//Display Options
	sprintf(display_str,"AutoRun On/Off");
   1a264:	4a68      	ldr	r2, [pc, #416]	; (1a408 <fn_set_bluetooth+0x354>)
   1a266:	4b69      	ldr	r3, [pc, #420]	; (1a40c <fn_set_bluetooth+0x358>)
   1a268:	0010      	movs	r0, r2
   1a26a:	0019      	movs	r1, r3
   1a26c:	230f      	movs	r3, #15
   1a26e:	001a      	movs	r2, r3
   1a270:	4b67      	ldr	r3, [pc, #412]	; (1a410 <fn_set_bluetooth+0x35c>)
   1a272:	4798      	blx	r3
	glcd_tiny_draw_string(25, 2, display_str);
   1a274:	4b64      	ldr	r3, [pc, #400]	; (1a408 <fn_set_bluetooth+0x354>)
   1a276:	001a      	movs	r2, r3
   1a278:	2102      	movs	r1, #2
   1a27a:	2019      	movs	r0, #25
   1a27c:	4b65      	ldr	r3, [pc, #404]	; (1a414 <fn_set_bluetooth+0x360>)
   1a27e:	4798      	blx	r3
	sprintf(display_str,"Reset On/Off");
   1a280:	4a61      	ldr	r2, [pc, #388]	; (1a408 <fn_set_bluetooth+0x354>)
   1a282:	4b65      	ldr	r3, [pc, #404]	; (1a418 <fn_set_bluetooth+0x364>)
   1a284:	0010      	movs	r0, r2
   1a286:	0019      	movs	r1, r3
   1a288:	230d      	movs	r3, #13
   1a28a:	001a      	movs	r2, r3
   1a28c:	4b60      	ldr	r3, [pc, #384]	; (1a410 <fn_set_bluetooth+0x35c>)
   1a28e:	4798      	blx	r3
	glcd_tiny_draw_string(25, 3, display_str);
   1a290:	4b5d      	ldr	r3, [pc, #372]	; (1a408 <fn_set_bluetooth+0x354>)
   1a292:	001a      	movs	r2, r3
   1a294:	2103      	movs	r1, #3
   1a296:	2019      	movs	r0, #25
   1a298:	4b5e      	ldr	r3, [pc, #376]	; (1a414 <fn_set_bluetooth+0x360>)
   1a29a:	4798      	blx	r3
	sprintf(display_str,"OTA On/Off");
   1a29c:	4a5a      	ldr	r2, [pc, #360]	; (1a408 <fn_set_bluetooth+0x354>)
   1a29e:	4b5f      	ldr	r3, [pc, #380]	; (1a41c <fn_set_bluetooth+0x368>)
   1a2a0:	0010      	movs	r0, r2
   1a2a2:	0019      	movs	r1, r3
   1a2a4:	230b      	movs	r3, #11
   1a2a6:	001a      	movs	r2, r3
   1a2a8:	4b59      	ldr	r3, [pc, #356]	; (1a410 <fn_set_bluetooth+0x35c>)
   1a2aa:	4798      	blx	r3
	glcd_tiny_draw_string(25, 4, display_str);
   1a2ac:	4b56      	ldr	r3, [pc, #344]	; (1a408 <fn_set_bluetooth+0x354>)
   1a2ae:	001a      	movs	r2, r3
   1a2b0:	2104      	movs	r1, #4
   1a2b2:	2019      	movs	r0, #25
   1a2b4:	4b57      	ldr	r3, [pc, #348]	; (1a414 <fn_set_bluetooth+0x360>)
   1a2b6:	4798      	blx	r3
	sprintf(display_str,"MC UART On/Off");
   1a2b8:	4a53      	ldr	r2, [pc, #332]	; (1a408 <fn_set_bluetooth+0x354>)
   1a2ba:	4b59      	ldr	r3, [pc, #356]	; (1a420 <fn_set_bluetooth+0x36c>)
   1a2bc:	0010      	movs	r0, r2
   1a2be:	0019      	movs	r1, r3
   1a2c0:	230f      	movs	r3, #15
   1a2c2:	001a      	movs	r2, r3
   1a2c4:	4b52      	ldr	r3, [pc, #328]	; (1a410 <fn_set_bluetooth+0x35c>)
   1a2c6:	4798      	blx	r3
	glcd_tiny_draw_string(25, 5, display_str);
   1a2c8:	4b4f      	ldr	r3, [pc, #316]	; (1a408 <fn_set_bluetooth+0x354>)
   1a2ca:	001a      	movs	r2, r3
   1a2cc:	2105      	movs	r1, #5
   1a2ce:	2019      	movs	r0, #25
   1a2d0:	4b50      	ldr	r3, [pc, #320]	; (1a414 <fn_set_bluetooth+0x360>)
   1a2d2:	4798      	blx	r3
	
	// Display soft keys
	sprintf(display_str,"Bluetooth:     Adjust");
   1a2d4:	4a4c      	ldr	r2, [pc, #304]	; (1a408 <fn_set_bluetooth+0x354>)
   1a2d6:	4b53      	ldr	r3, [pc, #332]	; (1a424 <fn_set_bluetooth+0x370>)
   1a2d8:	0010      	movs	r0, r2
   1a2da:	0019      	movs	r1, r3
   1a2dc:	2316      	movs	r3, #22
   1a2de:	001a      	movs	r2, r3
   1a2e0:	4b4b      	ldr	r3, [pc, #300]	; (1a410 <fn_set_bluetooth+0x35c>)
   1a2e2:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   1a2e4:	4b48      	ldr	r3, [pc, #288]	; (1a408 <fn_set_bluetooth+0x354>)
   1a2e6:	001a      	movs	r2, r3
   1a2e8:	2100      	movs	r1, #0
   1a2ea:	2000      	movs	r0, #0
   1a2ec:	4b49      	ldr	r3, [pc, #292]	; (1a414 <fn_set_bluetooth+0x360>)
   1a2ee:	4798      	blx	r3
	sprintf(display_str, "Back");
   1a2f0:	4a45      	ldr	r2, [pc, #276]	; (1a408 <fn_set_bluetooth+0x354>)
   1a2f2:	4b4d      	ldr	r3, [pc, #308]	; (1a428 <fn_set_bluetooth+0x374>)
   1a2f4:	0010      	movs	r0, r2
   1a2f6:	0019      	movs	r1, r3
   1a2f8:	2305      	movs	r3, #5
   1a2fa:	001a      	movs	r2, r3
   1a2fc:	4b44      	ldr	r3, [pc, #272]	; (1a410 <fn_set_bluetooth+0x35c>)
   1a2fe:	4798      	blx	r3
	glcd_tiny_draw_string(96,7,display_str);
   1a300:	4b41      	ldr	r3, [pc, #260]	; (1a408 <fn_set_bluetooth+0x354>)
   1a302:	001a      	movs	r2, r3
   1a304:	2107      	movs	r1, #7
   1a306:	2060      	movs	r0, #96	; 0x60
   1a308:	4b42      	ldr	r3, [pc, #264]	; (1a414 <fn_set_bluetooth+0x360>)
   1a30a:	4798      	blx	r3
	
	//Display Pointer
	sprintf(display_str, ">");
   1a30c:	4a3e      	ldr	r2, [pc, #248]	; (1a408 <fn_set_bluetooth+0x354>)
   1a30e:	4b47      	ldr	r3, [pc, #284]	; (1a42c <fn_set_bluetooth+0x378>)
   1a310:	0010      	movs	r0, r2
   1a312:	0019      	movs	r1, r3
   1a314:	2302      	movs	r3, #2
   1a316:	001a      	movs	r2, r3
   1a318:	4b3d      	ldr	r3, [pc, #244]	; (1a410 <fn_set_bluetooth+0x35c>)
   1a31a:	4798      	blx	r3
	glcd_tiny_draw_string(18, cur_Y,display_str);
   1a31c:	4b2b      	ldr	r3, [pc, #172]	; (1a3cc <fn_set_bluetooth+0x318>)
   1a31e:	681b      	ldr	r3, [r3, #0]
   1a320:	b2db      	uxtb	r3, r3
   1a322:	4a39      	ldr	r2, [pc, #228]	; (1a408 <fn_set_bluetooth+0x354>)
   1a324:	0019      	movs	r1, r3
   1a326:	2012      	movs	r0, #18
   1a328:	4b3a      	ldr	r3, [pc, #232]	; (1a414 <fn_set_bluetooth+0x360>)
   1a32a:	4798      	blx	r3
			
	//Display Status
	if (ioport_get_pin_level(BLE_autorun)){ str_ptr = str_off;}
   1a32c:	200e      	movs	r0, #14
   1a32e:	4b2b      	ldr	r3, [pc, #172]	; (1a3dc <fn_set_bluetooth+0x328>)
   1a330:	4798      	blx	r3
   1a332:	1e03      	subs	r3, r0, #0
   1a334:	d002      	beq.n	1a33c <fn_set_bluetooth+0x288>
   1a336:	1d3b      	adds	r3, r7, #4
   1a338:	60fb      	str	r3, [r7, #12]
   1a33a:	e002      	b.n	1a342 <fn_set_bluetooth+0x28e>
	else{ str_ptr = str_on;}
   1a33c:	2308      	movs	r3, #8
   1a33e:	18fb      	adds	r3, r7, r3
   1a340:	60fb      	str	r3, [r7, #12]
	glcd_tiny_draw_string(0, 2,str_ptr);
   1a342:	68fb      	ldr	r3, [r7, #12]
   1a344:	001a      	movs	r2, r3
   1a346:	2102      	movs	r1, #2
   1a348:	2000      	movs	r0, #0
   1a34a:	4b32      	ldr	r3, [pc, #200]	; (1a414 <fn_set_bluetooth+0x360>)
   1a34c:	4798      	blx	r3
	if (ioport_get_pin_level(BLE_reset)){ str_ptr = str_off;}
   1a34e:	2003      	movs	r0, #3
   1a350:	4b22      	ldr	r3, [pc, #136]	; (1a3dc <fn_set_bluetooth+0x328>)
   1a352:	4798      	blx	r3
   1a354:	1e03      	subs	r3, r0, #0
   1a356:	d002      	beq.n	1a35e <fn_set_bluetooth+0x2aa>
   1a358:	1d3b      	adds	r3, r7, #4
   1a35a:	60fb      	str	r3, [r7, #12]
   1a35c:	e002      	b.n	1a364 <fn_set_bluetooth+0x2b0>
	else{str_ptr = str_on;}
   1a35e:	2308      	movs	r3, #8
   1a360:	18fb      	adds	r3, r7, r3
   1a362:	60fb      	str	r3, [r7, #12]
	glcd_tiny_draw_string(0, 3,str_ptr);
   1a364:	68fb      	ldr	r3, [r7, #12]
   1a366:	001a      	movs	r2, r3
   1a368:	2103      	movs	r1, #3
   1a36a:	2000      	movs	r0, #0
   1a36c:	4b29      	ldr	r3, [pc, #164]	; (1a414 <fn_set_bluetooth+0x360>)
   1a36e:	4798      	blx	r3
	if (ioport_get_pin_level(BLE_ota)){ str_ptr = str_on;}
   1a370:	2036      	movs	r0, #54	; 0x36
   1a372:	4b1a      	ldr	r3, [pc, #104]	; (1a3dc <fn_set_bluetooth+0x328>)
   1a374:	4798      	blx	r3
   1a376:	1e03      	subs	r3, r0, #0
   1a378:	d003      	beq.n	1a382 <fn_set_bluetooth+0x2ce>
   1a37a:	2308      	movs	r3, #8
   1a37c:	18fb      	adds	r3, r7, r3
   1a37e:	60fb      	str	r3, [r7, #12]
   1a380:	e001      	b.n	1a386 <fn_set_bluetooth+0x2d2>
	else{str_ptr = str_off;}
   1a382:	1d3b      	adds	r3, r7, #4
   1a384:	60fb      	str	r3, [r7, #12]
	glcd_tiny_draw_string(0, 4,str_ptr);
   1a386:	68fb      	ldr	r3, [r7, #12]
   1a388:	001a      	movs	r2, r3
   1a38a:	2104      	movs	r1, #4
   1a38c:	2000      	movs	r0, #0
   1a38e:	4b21      	ldr	r3, [pc, #132]	; (1a414 <fn_set_bluetooth+0x360>)
   1a390:	4798      	blx	r3
	if (USART_BLE_enabled){ str_ptr = str_on;}
   1a392:	4b14      	ldr	r3, [pc, #80]	; (1a3e4 <fn_set_bluetooth+0x330>)
   1a394:	781b      	ldrb	r3, [r3, #0]
   1a396:	2b00      	cmp	r3, #0
   1a398:	d003      	beq.n	1a3a2 <fn_set_bluetooth+0x2ee>
   1a39a:	2308      	movs	r3, #8
   1a39c:	18fb      	adds	r3, r7, r3
   1a39e:	60fb      	str	r3, [r7, #12]
   1a3a0:	e001      	b.n	1a3a6 <fn_set_bluetooth+0x2f2>
	else{str_ptr = str_off;}
   1a3a2:	1d3b      	adds	r3, r7, #4
   1a3a4:	60fb      	str	r3, [r7, #12]
	glcd_tiny_draw_string(0, 5,str_ptr);
   1a3a6:	68fb      	ldr	r3, [r7, #12]
   1a3a8:	001a      	movs	r2, r3
   1a3aa:	2105      	movs	r1, #5
   1a3ac:	2000      	movs	r0, #0
   1a3ae:	4b19      	ldr	r3, [pc, #100]	; (1a414 <fn_set_bluetooth+0x360>)
   1a3b0:	4798      	blx	r3
	

	
	glcd_write();
   1a3b2:	4b1f      	ldr	r3, [pc, #124]	; (1a430 <fn_set_bluetooth+0x37c>)
   1a3b4:	4798      	blx	r3
	
}
   1a3b6:	46c0      	nop			; (mov r8, r8)
   1a3b8:	46bd      	mov	sp, r7
   1a3ba:	b005      	add	sp, #20
   1a3bc:	bd90      	pop	{r4, r7, pc}
   1a3be:	46c0      	nop			; (mov r8, r8)
   1a3c0:	00026a14 	.word	0x00026a14
   1a3c4:	0066664f 	.word	0x0066664f
   1a3c8:	20000110 	.word	0x20000110
   1a3cc:	20002ed8 	.word	0x20002ed8
   1a3d0:	20003f50 	.word	0x20003f50
   1a3d4:	20003a30 	.word	0x20003a30
   1a3d8:	20003b7a 	.word	0x20003b7a
   1a3dc:	000166dd 	.word	0x000166dd
   1a3e0:	000166b5 	.word	0x000166b5
   1a3e4:	20003b8c 	.word	0x20003b8c
   1a3e8:	20001194 	.word	0x20001194
   1a3ec:	000167cd 	.word	0x000167cd
   1a3f0:	0001668d 	.word	0x0001668d
   1a3f4:	0001666d 	.word	0x0001666d
   1a3f8:	0000e049 	.word	0x0000e049
   1a3fc:	00025dd0 	.word	0x00025dd0
   1a400:	00013505 	.word	0x00013505
   1a404:	000125a5 	.word	0x000125a5
   1a408:	20002f78 	.word	0x20002f78
   1a40c:	000269c0 	.word	0x000269c0
   1a410:	00020fa5 	.word	0x00020fa5
   1a414:	00013691 	.word	0x00013691
   1a418:	000269d0 	.word	0x000269d0
   1a41c:	000269e0 	.word	0x000269e0
   1a420:	000269ec 	.word	0x000269ec
   1a424:	000269fc 	.word	0x000269fc
   1a428:	00026790 	.word	0x00026790
   1a42c:	00026838 	.word	0x00026838
   1a430:	00012de9 	.word	0x00012de9

0001a434 <fn_set_clock>:


void fn_set_clock(void){
   1a434:	b590      	push	{r4, r7, lr}
   1a436:	b08f      	sub	sp, #60	; 0x3c
   1a438:	af02      	add	r7, sp, #8
		uint8_t min;  //unit max
		uint8_t max;  //unit min
		uint8_t *data; //unit location
	} CLOCK_SETTING;
	
	CLOCK_SETTING clock_table[] = {
   1a43a:	003b      	movs	r3, r7
   1a43c:	4a9e      	ldr	r2, [pc, #632]	; (1a6b8 <fn_set_clock+0x284>)
   1a43e:	ca13      	ldmia	r2!, {r0, r1, r4}
   1a440:	c313      	stmia	r3!, {r0, r1, r4}
   1a442:	ca13      	ldmia	r2!, {r0, r1, r4}
   1a444:	c313      	stmia	r3!, {r0, r1, r4}
   1a446:	ca13      	ldmia	r2!, {r0, r1, r4}
   1a448:	c313      	stmia	r3!, {r0, r1, r4}
   1a44a:	ca13      	ldmia	r2!, {r0, r1, r4}
   1a44c:	c313      	stmia	r3!, {r0, r1, r4}
		{10,	6,	1,	0x31, &temp_time.date},
		{40,	6,	1,	0x12, &temp_time.month},
		{76,	6,	0,	0x99, &temp_time.year}
	};
	
	if (state_change) {
   1a44e:	4b9b      	ldr	r3, [pc, #620]	; (1a6bc <fn_set_clock+0x288>)
   1a450:	781b      	ldrb	r3, [r3, #0]
   1a452:	b2db      	uxtb	r3, r3
   1a454:	2b00      	cmp	r3, #0
   1a456:	d010      	beq.n	1a47a <fn_set_clock+0x46>
		cur_X = 0;
   1a458:	4b99      	ldr	r3, [pc, #612]	; (1a6c0 <fn_set_clock+0x28c>)
   1a45a:	2200      	movs	r2, #0
   1a45c:	601a      	str	r2, [r3, #0]
		cur_X_low = 0;
   1a45e:	4b99      	ldr	r3, [pc, #612]	; (1a6c4 <fn_set_clock+0x290>)
   1a460:	2200      	movs	r2, #0
   1a462:	601a      	str	r2, [r3, #0]
		cur_X_high = 5;
   1a464:	4b98      	ldr	r3, [pc, #608]	; (1a6c8 <fn_set_clock+0x294>)
   1a466:	2205      	movs	r2, #5
   1a468:	601a      	str	r2, [r3, #0]
		get_time();
   1a46a:	4b98      	ldr	r3, [pc, #608]	; (1a6cc <fn_set_clock+0x298>)
   1a46c:	4798      	blx	r3
		memcpy(&temp_time,&current_time,sizeof(current_time));	
   1a46e:	4b98      	ldr	r3, [pc, #608]	; (1a6d0 <fn_set_clock+0x29c>)
   1a470:	4a98      	ldr	r2, [pc, #608]	; (1a6d4 <fn_set_clock+0x2a0>)
   1a472:	ca13      	ldmia	r2!, {r0, r1, r4}
   1a474:	c313      	stmia	r3!, {r0, r1, r4}
   1a476:	ca03      	ldmia	r2!, {r0, r1}
   1a478:	c303      	stmia	r3!, {r0, r1}
	}
	
	
	
	
	switch(last_input){
   1a47a:	4b97      	ldr	r3, [pc, #604]	; (1a6d8 <fn_set_clock+0x2a4>)
   1a47c:	781b      	ldrb	r3, [r3, #0]
   1a47e:	b2db      	uxtb	r3, r3
   1a480:	2b02      	cmp	r3, #2
   1a482:	d004      	beq.n	1a48e <fn_set_clock+0x5a>
   1a484:	2b03      	cmp	r3, #3
   1a486:	d029      	beq.n	1a4dc <fn_set_clock+0xa8>
   1a488:	2b01      	cmp	r3, #1
   1a48a:	d04e      	beq.n	1a52a <fn_set_clock+0xf6>
				current_input = input_state_complete;
				}
			else{++cur_X;}
			break;
		default:
			break;
   1a48c:	e062      	b.n	1a554 <fn_set_clock+0x120>
			if(*clock_table[cur_X].data < clock_table[cur_X].max){
   1a48e:	4b8c      	ldr	r3, [pc, #560]	; (1a6c0 <fn_set_clock+0x28c>)
   1a490:	681b      	ldr	r3, [r3, #0]
   1a492:	003a      	movs	r2, r7
   1a494:	00db      	lsls	r3, r3, #3
   1a496:	18d3      	adds	r3, r2, r3
   1a498:	3304      	adds	r3, #4
   1a49a:	681b      	ldr	r3, [r3, #0]
   1a49c:	781a      	ldrb	r2, [r3, #0]
   1a49e:	4b88      	ldr	r3, [pc, #544]	; (1a6c0 <fn_set_clock+0x28c>)
   1a4a0:	681b      	ldr	r3, [r3, #0]
   1a4a2:	0039      	movs	r1, r7
   1a4a4:	00db      	lsls	r3, r3, #3
   1a4a6:	18cb      	adds	r3, r1, r3
   1a4a8:	3303      	adds	r3, #3
   1a4aa:	781b      	ldrb	r3, [r3, #0]
   1a4ac:	429a      	cmp	r2, r3
   1a4ae:	d24e      	bcs.n	1a54e <fn_set_clock+0x11a>
				++ *clock_table[cur_X].data;
   1a4b0:	4b83      	ldr	r3, [pc, #524]	; (1a6c0 <fn_set_clock+0x28c>)
   1a4b2:	681b      	ldr	r3, [r3, #0]
   1a4b4:	003a      	movs	r2, r7
   1a4b6:	00db      	lsls	r3, r3, #3
   1a4b8:	18d3      	adds	r3, r2, r3
   1a4ba:	3304      	adds	r3, #4
   1a4bc:	681b      	ldr	r3, [r3, #0]
   1a4be:	781a      	ldrb	r2, [r3, #0]
   1a4c0:	3201      	adds	r2, #1
   1a4c2:	b2d2      	uxtb	r2, r2
   1a4c4:	701a      	strb	r2, [r3, #0]
				bcd_adj(clock_table[cur_X].data);
   1a4c6:	4b7e      	ldr	r3, [pc, #504]	; (1a6c0 <fn_set_clock+0x28c>)
   1a4c8:	681b      	ldr	r3, [r3, #0]
   1a4ca:	003a      	movs	r2, r7
   1a4cc:	00db      	lsls	r3, r3, #3
   1a4ce:	18d3      	adds	r3, r2, r3
   1a4d0:	3304      	adds	r3, #4
   1a4d2:	681b      	ldr	r3, [r3, #0]
   1a4d4:	0018      	movs	r0, r3
   1a4d6:	4b81      	ldr	r3, [pc, #516]	; (1a6dc <fn_set_clock+0x2a8>)
   1a4d8:	4798      	blx	r3
			break;
   1a4da:	e038      	b.n	1a54e <fn_set_clock+0x11a>
			if(*clock_table[cur_X].data > clock_table[cur_X].min){
   1a4dc:	4b78      	ldr	r3, [pc, #480]	; (1a6c0 <fn_set_clock+0x28c>)
   1a4de:	681b      	ldr	r3, [r3, #0]
   1a4e0:	003a      	movs	r2, r7
   1a4e2:	00db      	lsls	r3, r3, #3
   1a4e4:	18d3      	adds	r3, r2, r3
   1a4e6:	3304      	adds	r3, #4
   1a4e8:	681b      	ldr	r3, [r3, #0]
   1a4ea:	781a      	ldrb	r2, [r3, #0]
   1a4ec:	4b74      	ldr	r3, [pc, #464]	; (1a6c0 <fn_set_clock+0x28c>)
   1a4ee:	681b      	ldr	r3, [r3, #0]
   1a4f0:	0039      	movs	r1, r7
   1a4f2:	00db      	lsls	r3, r3, #3
   1a4f4:	18cb      	adds	r3, r1, r3
   1a4f6:	3302      	adds	r3, #2
   1a4f8:	781b      	ldrb	r3, [r3, #0]
   1a4fa:	429a      	cmp	r2, r3
   1a4fc:	d929      	bls.n	1a552 <fn_set_clock+0x11e>
				-- *clock_table[cur_X].data;
   1a4fe:	4b70      	ldr	r3, [pc, #448]	; (1a6c0 <fn_set_clock+0x28c>)
   1a500:	681b      	ldr	r3, [r3, #0]
   1a502:	003a      	movs	r2, r7
   1a504:	00db      	lsls	r3, r3, #3
   1a506:	18d3      	adds	r3, r2, r3
   1a508:	3304      	adds	r3, #4
   1a50a:	681b      	ldr	r3, [r3, #0]
   1a50c:	781a      	ldrb	r2, [r3, #0]
   1a50e:	3a01      	subs	r2, #1
   1a510:	b2d2      	uxtb	r2, r2
   1a512:	701a      	strb	r2, [r3, #0]
				bcd_adj(clock_table[cur_X].data);
   1a514:	4b6a      	ldr	r3, [pc, #424]	; (1a6c0 <fn_set_clock+0x28c>)
   1a516:	681b      	ldr	r3, [r3, #0]
   1a518:	003a      	movs	r2, r7
   1a51a:	00db      	lsls	r3, r3, #3
   1a51c:	18d3      	adds	r3, r2, r3
   1a51e:	3304      	adds	r3, #4
   1a520:	681b      	ldr	r3, [r3, #0]
   1a522:	0018      	movs	r0, r3
   1a524:	4b6d      	ldr	r3, [pc, #436]	; (1a6dc <fn_set_clock+0x2a8>)
   1a526:	4798      	blx	r3
			break;
   1a528:	e013      	b.n	1a552 <fn_set_clock+0x11e>
			if(cur_X >= cur_X_high){
   1a52a:	4b65      	ldr	r3, [pc, #404]	; (1a6c0 <fn_set_clock+0x28c>)
   1a52c:	681a      	ldr	r2, [r3, #0]
   1a52e:	4b66      	ldr	r3, [pc, #408]	; (1a6c8 <fn_set_clock+0x294>)
   1a530:	681b      	ldr	r3, [r3, #0]
   1a532:	429a      	cmp	r2, r3
   1a534:	db05      	blt.n	1a542 <fn_set_clock+0x10e>
				set_time();
   1a536:	4b6a      	ldr	r3, [pc, #424]	; (1a6e0 <fn_set_clock+0x2ac>)
   1a538:	4798      	blx	r3
				current_input = input_state_complete;
   1a53a:	4b6a      	ldr	r3, [pc, #424]	; (1a6e4 <fn_set_clock+0x2b0>)
   1a53c:	2208      	movs	r2, #8
   1a53e:	701a      	strb	r2, [r3, #0]
			break;
   1a540:	e008      	b.n	1a554 <fn_set_clock+0x120>
			else{++cur_X;}
   1a542:	4b5f      	ldr	r3, [pc, #380]	; (1a6c0 <fn_set_clock+0x28c>)
   1a544:	681b      	ldr	r3, [r3, #0]
   1a546:	1c5a      	adds	r2, r3, #1
   1a548:	4b5d      	ldr	r3, [pc, #372]	; (1a6c0 <fn_set_clock+0x28c>)
   1a54a:	601a      	str	r2, [r3, #0]
			break;
   1a54c:	e002      	b.n	1a554 <fn_set_clock+0x120>
			break;
   1a54e:	46c0      	nop			; (mov r8, r8)
   1a550:	e000      	b.n	1a554 <fn_set_clock+0x120>
			break;
   1a552:	46c0      	nop			; (mov r8, r8)
	}
	
	glcd_tiny_set_font(Font5x7,5,7,32,127);
   1a554:	4864      	ldr	r0, [pc, #400]	; (1a6e8 <fn_set_clock+0x2b4>)
   1a556:	237f      	movs	r3, #127	; 0x7f
   1a558:	9300      	str	r3, [sp, #0]
   1a55a:	2320      	movs	r3, #32
   1a55c:	2207      	movs	r2, #7
   1a55e:	2105      	movs	r1, #5
   1a560:	4c62      	ldr	r4, [pc, #392]	; (1a6ec <fn_set_clock+0x2b8>)
   1a562:	47a0      	blx	r4
	glcd_clear_buffer();
   1a564:	4b62      	ldr	r3, [pc, #392]	; (1a6f0 <fn_set_clock+0x2bc>)
   1a566:	4798      	blx	r3
	
	sprintf(display_str,"Set Clock:");
   1a568:	4a62      	ldr	r2, [pc, #392]	; (1a6f4 <fn_set_clock+0x2c0>)
   1a56a:	4b63      	ldr	r3, [pc, #396]	; (1a6f8 <fn_set_clock+0x2c4>)
   1a56c:	0010      	movs	r0, r2
   1a56e:	0019      	movs	r1, r3
   1a570:	230b      	movs	r3, #11
   1a572:	001a      	movs	r2, r3
   1a574:	4b61      	ldr	r3, [pc, #388]	; (1a6fc <fn_set_clock+0x2c8>)
   1a576:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   1a578:	4b5e      	ldr	r3, [pc, #376]	; (1a6f4 <fn_set_clock+0x2c0>)
   1a57a:	001a      	movs	r2, r3
   1a57c:	2100      	movs	r1, #0
   1a57e:	2000      	movs	r0, #0
   1a580:	4b5f      	ldr	r3, [pc, #380]	; (1a700 <fn_set_clock+0x2cc>)
   1a582:	4798      	blx	r3
	
	sprintf(display_str,"Hour Min  Sec");
   1a584:	4a5b      	ldr	r2, [pc, #364]	; (1a6f4 <fn_set_clock+0x2c0>)
   1a586:	4b5f      	ldr	r3, [pc, #380]	; (1a704 <fn_set_clock+0x2d0>)
   1a588:	0010      	movs	r0, r2
   1a58a:	0019      	movs	r1, r3
   1a58c:	230e      	movs	r3, #14
   1a58e:	001a      	movs	r2, r3
   1a590:	4b5a      	ldr	r3, [pc, #360]	; (1a6fc <fn_set_clock+0x2c8>)
   1a592:	4798      	blx	r3
	glcd_tiny_draw_string(10,1,display_str);
   1a594:	4b57      	ldr	r3, [pc, #348]	; (1a6f4 <fn_set_clock+0x2c0>)
   1a596:	001a      	movs	r2, r3
   1a598:	2101      	movs	r1, #1
   1a59a:	200a      	movs	r0, #10
   1a59c:	4b58      	ldr	r3, [pc, #352]	; (1a700 <fn_set_clock+0x2cc>)
   1a59e:	4798      	blx	r3
	sprintf(display_str,"%02x   %02x   %02x",
	temp_time.hours, temp_time.minutes, temp_time.seconds);
   1a5a0:	4b4b      	ldr	r3, [pc, #300]	; (1a6d0 <fn_set_clock+0x29c>)
   1a5a2:	789b      	ldrb	r3, [r3, #2]
	sprintf(display_str,"%02x   %02x   %02x",
   1a5a4:	001a      	movs	r2, r3
	temp_time.hours, temp_time.minutes, temp_time.seconds);
   1a5a6:	4b4a      	ldr	r3, [pc, #296]	; (1a6d0 <fn_set_clock+0x29c>)
   1a5a8:	785b      	ldrb	r3, [r3, #1]
	sprintf(display_str,"%02x   %02x   %02x",
   1a5aa:	001c      	movs	r4, r3
	temp_time.hours, temp_time.minutes, temp_time.seconds);
   1a5ac:	4b48      	ldr	r3, [pc, #288]	; (1a6d0 <fn_set_clock+0x29c>)
   1a5ae:	781b      	ldrb	r3, [r3, #0]
	sprintf(display_str,"%02x   %02x   %02x",
   1a5b0:	4955      	ldr	r1, [pc, #340]	; (1a708 <fn_set_clock+0x2d4>)
   1a5b2:	4850      	ldr	r0, [pc, #320]	; (1a6f4 <fn_set_clock+0x2c0>)
   1a5b4:	9300      	str	r3, [sp, #0]
   1a5b6:	0023      	movs	r3, r4
   1a5b8:	4c54      	ldr	r4, [pc, #336]	; (1a70c <fn_set_clock+0x2d8>)
   1a5ba:	47a0      	blx	r4
	glcd_tiny_draw_string(10,2,display_str);
   1a5bc:	4b4d      	ldr	r3, [pc, #308]	; (1a6f4 <fn_set_clock+0x2c0>)
   1a5be:	001a      	movs	r2, r3
   1a5c0:	2102      	movs	r1, #2
   1a5c2:	200a      	movs	r0, #10
   1a5c4:	4b4e      	ldr	r3, [pc, #312]	; (1a700 <fn_set_clock+0x2cc>)
   1a5c6:	4798      	blx	r3
	
	sprintf(display_str,"Date Month Year");
   1a5c8:	4a4a      	ldr	r2, [pc, #296]	; (1a6f4 <fn_set_clock+0x2c0>)
   1a5ca:	4b51      	ldr	r3, [pc, #324]	; (1a710 <fn_set_clock+0x2dc>)
   1a5cc:	0010      	movs	r0, r2
   1a5ce:	0019      	movs	r1, r3
   1a5d0:	2310      	movs	r3, #16
   1a5d2:	001a      	movs	r2, r3
   1a5d4:	4b49      	ldr	r3, [pc, #292]	; (1a6fc <fn_set_clock+0x2c8>)
   1a5d6:	4798      	blx	r3
	glcd_tiny_draw_string(10,4,display_str);
   1a5d8:	4b46      	ldr	r3, [pc, #280]	; (1a6f4 <fn_set_clock+0x2c0>)
   1a5da:	001a      	movs	r2, r3
   1a5dc:	2104      	movs	r1, #4
   1a5de:	200a      	movs	r0, #10
   1a5e0:	4b47      	ldr	r3, [pc, #284]	; (1a700 <fn_set_clock+0x2cc>)
   1a5e2:	4798      	blx	r3
	sprintf(display_str,"%02x   %02x    20%02x",
	temp_time.date, temp_time.month, temp_time.year);
   1a5e4:	4b3a      	ldr	r3, [pc, #232]	; (1a6d0 <fn_set_clock+0x29c>)
   1a5e6:	791b      	ldrb	r3, [r3, #4]
	sprintf(display_str,"%02x   %02x    20%02x",
   1a5e8:	001a      	movs	r2, r3
	temp_time.date, temp_time.month, temp_time.year);
   1a5ea:	4b39      	ldr	r3, [pc, #228]	; (1a6d0 <fn_set_clock+0x29c>)
   1a5ec:	795b      	ldrb	r3, [r3, #5]
	sprintf(display_str,"%02x   %02x    20%02x",
   1a5ee:	001c      	movs	r4, r3
	temp_time.date, temp_time.month, temp_time.year);
   1a5f0:	4b37      	ldr	r3, [pc, #220]	; (1a6d0 <fn_set_clock+0x29c>)
   1a5f2:	799b      	ldrb	r3, [r3, #6]
	sprintf(display_str,"%02x   %02x    20%02x",
   1a5f4:	4947      	ldr	r1, [pc, #284]	; (1a714 <fn_set_clock+0x2e0>)
   1a5f6:	483f      	ldr	r0, [pc, #252]	; (1a6f4 <fn_set_clock+0x2c0>)
   1a5f8:	9300      	str	r3, [sp, #0]
   1a5fa:	0023      	movs	r3, r4
   1a5fc:	4c43      	ldr	r4, [pc, #268]	; (1a70c <fn_set_clock+0x2d8>)
   1a5fe:	47a0      	blx	r4
	glcd_tiny_draw_string(10,5,display_str);
   1a600:	4b3c      	ldr	r3, [pc, #240]	; (1a6f4 <fn_set_clock+0x2c0>)
   1a602:	001a      	movs	r2, r3
   1a604:	2105      	movs	r1, #5
   1a606:	200a      	movs	r0, #10
   1a608:	4b3d      	ldr	r3, [pc, #244]	; (1a700 <fn_set_clock+0x2cc>)
   1a60a:	4798      	blx	r3
	
	// Display soft keys
	sprintf(display_str, "+");
   1a60c:	4a39      	ldr	r2, [pc, #228]	; (1a6f4 <fn_set_clock+0x2c0>)
   1a60e:	4b42      	ldr	r3, [pc, #264]	; (1a718 <fn_set_clock+0x2e4>)
   1a610:	0010      	movs	r0, r2
   1a612:	0019      	movs	r1, r3
   1a614:	2302      	movs	r3, #2
   1a616:	001a      	movs	r2, r3
   1a618:	4b38      	ldr	r3, [pc, #224]	; (1a6fc <fn_set_clock+0x2c8>)
   1a61a:	4798      	blx	r3
	glcd_tiny_draw_string(121,3,display_str);
   1a61c:	4b35      	ldr	r3, [pc, #212]	; (1a6f4 <fn_set_clock+0x2c0>)
   1a61e:	001a      	movs	r2, r3
   1a620:	2103      	movs	r1, #3
   1a622:	2079      	movs	r0, #121	; 0x79
   1a624:	4b36      	ldr	r3, [pc, #216]	; (1a700 <fn_set_clock+0x2cc>)
   1a626:	4798      	blx	r3
	sprintf(display_str, "-");
   1a628:	4a32      	ldr	r2, [pc, #200]	; (1a6f4 <fn_set_clock+0x2c0>)
   1a62a:	4b3c      	ldr	r3, [pc, #240]	; (1a71c <fn_set_clock+0x2e8>)
   1a62c:	0010      	movs	r0, r2
   1a62e:	0019      	movs	r1, r3
   1a630:	2302      	movs	r3, #2
   1a632:	001a      	movs	r2, r3
   1a634:	4b31      	ldr	r3, [pc, #196]	; (1a6fc <fn_set_clock+0x2c8>)
   1a636:	4798      	blx	r3
	glcd_tiny_draw_string(121,5,display_str);
   1a638:	4b2e      	ldr	r3, [pc, #184]	; (1a6f4 <fn_set_clock+0x2c0>)
   1a63a:	001a      	movs	r2, r3
   1a63c:	2105      	movs	r1, #5
   1a63e:	2079      	movs	r0, #121	; 0x79
   1a640:	4b2f      	ldr	r3, [pc, #188]	; (1a700 <fn_set_clock+0x2cc>)
   1a642:	4798      	blx	r3
	sprintf(display_str, "Next");
   1a644:	4a2b      	ldr	r2, [pc, #172]	; (1a6f4 <fn_set_clock+0x2c0>)
   1a646:	4b36      	ldr	r3, [pc, #216]	; (1a720 <fn_set_clock+0x2ec>)
   1a648:	0010      	movs	r0, r2
   1a64a:	0019      	movs	r1, r3
   1a64c:	2305      	movs	r3, #5
   1a64e:	001a      	movs	r2, r3
   1a650:	4b2a      	ldr	r3, [pc, #168]	; (1a6fc <fn_set_clock+0x2c8>)
   1a652:	4798      	blx	r3
	glcd_tiny_draw_string(103,0,display_str);
   1a654:	4b27      	ldr	r3, [pc, #156]	; (1a6f4 <fn_set_clock+0x2c0>)
   1a656:	001a      	movs	r2, r3
   1a658:	2100      	movs	r1, #0
   1a65a:	2067      	movs	r0, #103	; 0x67
   1a65c:	4b28      	ldr	r3, [pc, #160]	; (1a700 <fn_set_clock+0x2cc>)
   1a65e:	4798      	blx	r3
	sprintf(display_str, "Cancel");
   1a660:	4a24      	ldr	r2, [pc, #144]	; (1a6f4 <fn_set_clock+0x2c0>)
   1a662:	4b30      	ldr	r3, [pc, #192]	; (1a724 <fn_set_clock+0x2f0>)
   1a664:	0010      	movs	r0, r2
   1a666:	0019      	movs	r1, r3
   1a668:	2307      	movs	r3, #7
   1a66a:	001a      	movs	r2, r3
   1a66c:	4b23      	ldr	r3, [pc, #140]	; (1a6fc <fn_set_clock+0x2c8>)
   1a66e:	4798      	blx	r3
	glcd_tiny_draw_string(92,7,display_str);
   1a670:	4b20      	ldr	r3, [pc, #128]	; (1a6f4 <fn_set_clock+0x2c0>)
   1a672:	001a      	movs	r2, r3
   1a674:	2107      	movs	r1, #7
   1a676:	205c      	movs	r0, #92	; 0x5c
   1a678:	4b21      	ldr	r3, [pc, #132]	; (1a700 <fn_set_clock+0x2cc>)
   1a67a:	4798      	blx	r3
	
	//Display Pointer
	sprintf(display_str, "^");
   1a67c:	4a1d      	ldr	r2, [pc, #116]	; (1a6f4 <fn_set_clock+0x2c0>)
   1a67e:	4b2a      	ldr	r3, [pc, #168]	; (1a728 <fn_set_clock+0x2f4>)
   1a680:	0010      	movs	r0, r2
   1a682:	0019      	movs	r1, r3
   1a684:	2302      	movs	r3, #2
   1a686:	001a      	movs	r2, r3
   1a688:	4b1c      	ldr	r3, [pc, #112]	; (1a6fc <fn_set_clock+0x2c8>)
   1a68a:	4798      	blx	r3
	glcd_tiny_draw_string(clock_table[cur_X].x_pos,clock_table[cur_X].y_pos,display_str);
   1a68c:	4b0c      	ldr	r3, [pc, #48]	; (1a6c0 <fn_set_clock+0x28c>)
   1a68e:	681a      	ldr	r2, [r3, #0]
   1a690:	003b      	movs	r3, r7
   1a692:	00d2      	lsls	r2, r2, #3
   1a694:	5cd0      	ldrb	r0, [r2, r3]
   1a696:	4b0a      	ldr	r3, [pc, #40]	; (1a6c0 <fn_set_clock+0x28c>)
   1a698:	681b      	ldr	r3, [r3, #0]
   1a69a:	003a      	movs	r2, r7
   1a69c:	00db      	lsls	r3, r3, #3
   1a69e:	18d3      	adds	r3, r2, r3
   1a6a0:	3301      	adds	r3, #1
   1a6a2:	781b      	ldrb	r3, [r3, #0]
   1a6a4:	4a13      	ldr	r2, [pc, #76]	; (1a6f4 <fn_set_clock+0x2c0>)
   1a6a6:	0019      	movs	r1, r3
   1a6a8:	4b15      	ldr	r3, [pc, #84]	; (1a700 <fn_set_clock+0x2cc>)
   1a6aa:	4798      	blx	r3
	
	glcd_write();
   1a6ac:	4b1f      	ldr	r3, [pc, #124]	; (1a72c <fn_set_clock+0x2f8>)
   1a6ae:	4798      	blx	r3
		
}
   1a6b0:	46c0      	nop			; (mov r8, r8)
   1a6b2:	46bd      	mov	sp, r7
   1a6b4:	b00d      	add	sp, #52	; 0x34
   1a6b6:	bd90      	pop	{r4, r7, pc}
   1a6b8:	00026a8c 	.word	0x00026a8c
   1a6bc:	20000110 	.word	0x20000110
   1a6c0:	20003a28 	.word	0x20003a28
   1a6c4:	20003f54 	.word	0x20003f54
   1a6c8:	20003438 	.word	0x20003438
   1a6cc:	0000e6e5 	.word	0x0000e6e5
   1a6d0:	2000108c 	.word	0x2000108c
   1a6d4:	2000103c 	.word	0x2000103c
   1a6d8:	20003b7a 	.word	0x20003b7a
   1a6dc:	0000e681 	.word	0x0000e681
   1a6e0:	0000e809 	.word	0x0000e809
   1a6e4:	20003b78 	.word	0x20003b78
   1a6e8:	00025dd0 	.word	0x00025dd0
   1a6ec:	00013505 	.word	0x00013505
   1a6f0:	000125a5 	.word	0x000125a5
   1a6f4:	20002f78 	.word	0x20002f78
   1a6f8:	00026a18 	.word	0x00026a18
   1a6fc:	00020fa5 	.word	0x00020fa5
   1a700:	00013691 	.word	0x00013691
   1a704:	00026a24 	.word	0x00026a24
   1a708:	00026a34 	.word	0x00026a34
   1a70c:	000210bd 	.word	0x000210bd
   1a710:	00026a48 	.word	0x00026a48
   1a714:	00026a58 	.word	0x00026a58
   1a718:	00026a70 	.word	0x00026a70
   1a71c:	00026a74 	.word	0x00026a74
   1a720:	00026a78 	.word	0x00026a78
   1a724:	00026a80 	.word	0x00026a80
   1a728:	00026a88 	.word	0x00026a88
   1a72c:	00012de9 	.word	0x00012de9

0001a730 <fn_main_display>:




void fn_main_display(void){
   1a730:	b580      	push	{r7, lr}
   1a732:	af00      	add	r7, sp, #0
	
	print_data_screen();
   1a734:	4b0f      	ldr	r3, [pc, #60]	; (1a774 <fn_main_display+0x44>)
   1a736:	4798      	blx	r3
	
	
	//Handle Button Inputs
	if(last_input==input_button2){
   1a738:	4b0f      	ldr	r3, [pc, #60]	; (1a778 <fn_main_display+0x48>)
   1a73a:	781b      	ldrb	r3, [r3, #0]
   1a73c:	b2db      	uxtb	r3, r3
   1a73e:	2b02      	cmp	r3, #2
   1a740:	d108      	bne.n	1a754 <fn_main_display+0x24>
		if(options.backlight_setting.brightness<3){
   1a742:	4b0e      	ldr	r3, [pc, #56]	; (1a77c <fn_main_display+0x4c>)
   1a744:	7b1b      	ldrb	r3, [r3, #12]
   1a746:	2b02      	cmp	r3, #2
   1a748:	d811      	bhi.n	1a76e <fn_main_display+0x3e>
			backlightPlus();
   1a74a:	4b0d      	ldr	r3, [pc, #52]	; (1a780 <fn_main_display+0x50>)
   1a74c:	4798      	blx	r3
			save_user_settings();
   1a74e:	4b0d      	ldr	r3, [pc, #52]	; (1a784 <fn_main_display+0x54>)
   1a750:	4798      	blx	r3
			backlightMinus();
			save_user_settings();
		}
	}
	
}
   1a752:	e00c      	b.n	1a76e <fn_main_display+0x3e>
	}else if(last_input==input_button3){
   1a754:	4b08      	ldr	r3, [pc, #32]	; (1a778 <fn_main_display+0x48>)
   1a756:	781b      	ldrb	r3, [r3, #0]
   1a758:	b2db      	uxtb	r3, r3
   1a75a:	2b03      	cmp	r3, #3
   1a75c:	d107      	bne.n	1a76e <fn_main_display+0x3e>
		if(options.backlight_setting.brightness>0){
   1a75e:	4b07      	ldr	r3, [pc, #28]	; (1a77c <fn_main_display+0x4c>)
   1a760:	7b1b      	ldrb	r3, [r3, #12]
   1a762:	2b00      	cmp	r3, #0
   1a764:	d003      	beq.n	1a76e <fn_main_display+0x3e>
			backlightMinus();
   1a766:	4b08      	ldr	r3, [pc, #32]	; (1a788 <fn_main_display+0x58>)
   1a768:	4798      	blx	r3
			save_user_settings();
   1a76a:	4b06      	ldr	r3, [pc, #24]	; (1a784 <fn_main_display+0x54>)
   1a76c:	4798      	blx	r3
}
   1a76e:	46c0      	nop			; (mov r8, r8)
   1a770:	46bd      	mov	sp, r7
   1a772:	bd80      	pop	{r7, pc}
   1a774:	0001a78d 	.word	0x0001a78d
   1a778:	20003b7a 	.word	0x20003b7a
   1a77c:	20002eec 	.word	0x20002eec
   1a780:	00001391 	.word	0x00001391
   1a784:	00001b8d 	.word	0x00001b8d
   1a788:	000013c1 	.word	0x000013c1

0001a78c <print_data_screen>:

void print_data_screen(void){
   1a78c:	b590      	push	{r4, r7, lr}
   1a78e:	b087      	sub	sp, #28
   1a790:	af02      	add	r7, sp, #8
	static bool flipper;
	uint8_t batt_charge_status;
	get_time();
   1a792:	4bb2      	ldr	r3, [pc, #712]	; (1aa5c <print_data_screen+0x2d0>)
   1a794:	4798      	blx	r3
	batt_charge_status = getChargerStatus();
   1a796:	1dfc      	adds	r4, r7, #7
   1a798:	4bb1      	ldr	r3, [pc, #708]	; (1aa60 <print_data_screen+0x2d4>)
   1a79a:	4798      	blx	r3
   1a79c:	0003      	movs	r3, r0
   1a79e:	7023      	strb	r3, [r4, #0]
	
	glcd_tiny_set_font(Font5x7,5,7,32,127);
   1a7a0:	48b0      	ldr	r0, [pc, #704]	; (1aa64 <print_data_screen+0x2d8>)
   1a7a2:	237f      	movs	r3, #127	; 0x7f
   1a7a4:	9300      	str	r3, [sp, #0]
   1a7a6:	2320      	movs	r3, #32
   1a7a8:	2207      	movs	r2, #7
   1a7aa:	2105      	movs	r1, #5
   1a7ac:	4cae      	ldr	r4, [pc, #696]	; (1aa68 <print_data_screen+0x2dc>)
   1a7ae:	47a0      	blx	r4
	glcd_clear_buffer();
   1a7b0:	4bae      	ldr	r3, [pc, #696]	; (1aa6c <print_data_screen+0x2e0>)
   1a7b2:	4798      	blx	r3
	
	if (options.current_unit_temp == fahrenheit){
   1a7b4:	4bae      	ldr	r3, [pc, #696]	; (1aa70 <print_data_screen+0x2e4>)
   1a7b6:	785b      	ldrb	r3, [r3, #1]
   1a7b8:	2b05      	cmp	r3, #5
   1a7ba:	d10d      	bne.n	1a7d8 <print_data_screen+0x4c>
		sprintf(display_str,"T:%4.1fF", current_time.temperatureF);
   1a7bc:	4bad      	ldr	r3, [pc, #692]	; (1aa74 <print_data_screen+0x2e8>)
   1a7be:	691a      	ldr	r2, [r3, #16]
   1a7c0:	4bad      	ldr	r3, [pc, #692]	; (1aa78 <print_data_screen+0x2ec>)
   1a7c2:	1c10      	adds	r0, r2, #0
   1a7c4:	4798      	blx	r3
   1a7c6:	0003      	movs	r3, r0
   1a7c8:	000c      	movs	r4, r1
   1a7ca:	49ac      	ldr	r1, [pc, #688]	; (1aa7c <print_data_screen+0x2f0>)
   1a7cc:	48ac      	ldr	r0, [pc, #688]	; (1aa80 <print_data_screen+0x2f4>)
   1a7ce:	001a      	movs	r2, r3
   1a7d0:	0023      	movs	r3, r4
   1a7d2:	4cac      	ldr	r4, [pc, #688]	; (1aa84 <print_data_screen+0x2f8>)
   1a7d4:	47a0      	blx	r4
   1a7d6:	e00c      	b.n	1a7f2 <print_data_screen+0x66>
	}else{
		sprintf(display_str,"T:%4.1fC", current_time.temperatureC);
   1a7d8:	4ba6      	ldr	r3, [pc, #664]	; (1aa74 <print_data_screen+0x2e8>)
   1a7da:	68da      	ldr	r2, [r3, #12]
   1a7dc:	4ba6      	ldr	r3, [pc, #664]	; (1aa78 <print_data_screen+0x2ec>)
   1a7de:	1c10      	adds	r0, r2, #0
   1a7e0:	4798      	blx	r3
   1a7e2:	0003      	movs	r3, r0
   1a7e4:	000c      	movs	r4, r1
   1a7e6:	49a8      	ldr	r1, [pc, #672]	; (1aa88 <print_data_screen+0x2fc>)
   1a7e8:	48a5      	ldr	r0, [pc, #660]	; (1aa80 <print_data_screen+0x2f4>)
   1a7ea:	001a      	movs	r2, r3
   1a7ec:	0023      	movs	r3, r4
   1a7ee:	4ca5      	ldr	r4, [pc, #660]	; (1aa84 <print_data_screen+0x2f8>)
   1a7f0:	47a0      	blx	r4
	}
	
	glcd_tiny_draw_string(86,7,display_str);
   1a7f2:	4ba3      	ldr	r3, [pc, #652]	; (1aa80 <print_data_screen+0x2f4>)
   1a7f4:	001a      	movs	r2, r3
   1a7f6:	2107      	movs	r1, #7
   1a7f8:	2056      	movs	r0, #86	; 0x56
   1a7fa:	4ba4      	ldr	r3, [pc, #656]	; (1aa8c <print_data_screen+0x300>)
   1a7fc:	4798      	blx	r3
	
	sprintf(display_str,"%02x:%02x:%02x", current_time.hours, current_time.minutes, current_time.seconds);
   1a7fe:	4b9d      	ldr	r3, [pc, #628]	; (1aa74 <print_data_screen+0x2e8>)
   1a800:	789b      	ldrb	r3, [r3, #2]
   1a802:	001a      	movs	r2, r3
   1a804:	4b9b      	ldr	r3, [pc, #620]	; (1aa74 <print_data_screen+0x2e8>)
   1a806:	785b      	ldrb	r3, [r3, #1]
   1a808:	001c      	movs	r4, r3
   1a80a:	4b9a      	ldr	r3, [pc, #616]	; (1aa74 <print_data_screen+0x2e8>)
   1a80c:	781b      	ldrb	r3, [r3, #0]
   1a80e:	49a0      	ldr	r1, [pc, #640]	; (1aa90 <print_data_screen+0x304>)
   1a810:	489b      	ldr	r0, [pc, #620]	; (1aa80 <print_data_screen+0x2f4>)
   1a812:	9300      	str	r3, [sp, #0]
   1a814:	0023      	movs	r3, r4
   1a816:	4c9b      	ldr	r4, [pc, #620]	; (1aa84 <print_data_screen+0x2f8>)
   1a818:	47a0      	blx	r4
	glcd_tiny_draw_string(0,7,display_str);
   1a81a:	4b99      	ldr	r3, [pc, #612]	; (1aa80 <print_data_screen+0x2f4>)
   1a81c:	001a      	movs	r2, r3
   1a81e:	2107      	movs	r1, #7
   1a820:	2000      	movs	r0, #0
   1a822:	4b9a      	ldr	r3, [pc, #616]	; (1aa8c <print_data_screen+0x300>)
   1a824:	4798      	blx	r3


	
	//  Draw Charge Status	
	if (batt_charge_status){
   1a826:	1dfb      	adds	r3, r7, #7
   1a828:	781b      	ldrb	r3, [r3, #0]
   1a82a:	2b00      	cmp	r3, #0
   1a82c:	d023      	beq.n	1a876 <print_data_screen+0xea>
		if (flipper){
   1a82e:	4b99      	ldr	r3, [pc, #612]	; (1aa94 <print_data_screen+0x308>)
   1a830:	781b      	ldrb	r3, [r3, #0]
   1a832:	2b00      	cmp	r3, #0
   1a834:	d003      	beq.n	1a83e <print_data_screen+0xb2>
			flipper = false;
   1a836:	4b97      	ldr	r3, [pc, #604]	; (1aa94 <print_data_screen+0x308>)
   1a838:	2200      	movs	r2, #0
   1a83a:	701a      	strb	r2, [r3, #0]
   1a83c:	e002      	b.n	1a844 <print_data_screen+0xb8>
		}else{
			flipper = true;
   1a83e:	4b95      	ldr	r3, [pc, #596]	; (1aa94 <print_data_screen+0x308>)
   1a840:	2201      	movs	r2, #1
   1a842:	701a      	strb	r2, [r3, #0]
		}
		//  Draw lines
		glcd_draw_line(49, 64, 49, 54, BLACK);
   1a844:	2301      	movs	r3, #1
   1a846:	9300      	str	r3, [sp, #0]
   1a848:	2336      	movs	r3, #54	; 0x36
   1a84a:	2231      	movs	r2, #49	; 0x31
   1a84c:	2140      	movs	r1, #64	; 0x40
   1a84e:	2031      	movs	r0, #49	; 0x31
   1a850:	4c91      	ldr	r4, [pc, #580]	; (1aa98 <print_data_screen+0x30c>)
   1a852:	47a0      	blx	r4
		glcd_draw_line(49, 54, 83, 54, BLACK);
   1a854:	2301      	movs	r3, #1
   1a856:	9300      	str	r3, [sp, #0]
   1a858:	2336      	movs	r3, #54	; 0x36
   1a85a:	2253      	movs	r2, #83	; 0x53
   1a85c:	2136      	movs	r1, #54	; 0x36
   1a85e:	2031      	movs	r0, #49	; 0x31
   1a860:	4c8d      	ldr	r4, [pc, #564]	; (1aa98 <print_data_screen+0x30c>)
   1a862:	47a0      	blx	r4
		glcd_draw_line(83, 64, 83, 54, BLACK);
   1a864:	2301      	movs	r3, #1
   1a866:	9300      	str	r3, [sp, #0]
   1a868:	2336      	movs	r3, #54	; 0x36
   1a86a:	2253      	movs	r2, #83	; 0x53
   1a86c:	2140      	movs	r1, #64	; 0x40
   1a86e:	2053      	movs	r0, #83	; 0x53
   1a870:	4c89      	ldr	r4, [pc, #548]	; (1aa98 <print_data_screen+0x30c>)
   1a872:	47a0      	blx	r4
   1a874:	e002      	b.n	1a87c <print_data_screen+0xf0>
		
			
	}else{
		flipper = true;
   1a876:	4b87      	ldr	r3, [pc, #540]	; (1aa94 <print_data_screen+0x308>)
   1a878:	2201      	movs	r2, #1
   1a87a:	701a      	strb	r2, [r3, #0]
	}
	if (flipper){
   1a87c:	4b85      	ldr	r3, [pc, #532]	; (1aa94 <print_data_screen+0x308>)
   1a87e:	781b      	ldrb	r3, [r3, #0]
   1a880:	2b00      	cmp	r3, #0
   1a882:	d009      	beq.n	1a898 <print_data_screen+0x10c>
		sprintf(display_str,"B:%02d%%", getBatteryLevel());		
   1a884:	4b85      	ldr	r3, [pc, #532]	; (1aa9c <print_data_screen+0x310>)
   1a886:	4798      	blx	r3
   1a888:	0003      	movs	r3, r0
   1a88a:	001a      	movs	r2, r3
   1a88c:	4984      	ldr	r1, [pc, #528]	; (1aaa0 <print_data_screen+0x314>)
   1a88e:	4b7c      	ldr	r3, [pc, #496]	; (1aa80 <print_data_screen+0x2f4>)
   1a890:	0018      	movs	r0, r3
   1a892:	4b7c      	ldr	r3, [pc, #496]	; (1aa84 <print_data_screen+0x2f8>)
   1a894:	4798      	blx	r3
   1a896:	e008      	b.n	1a8aa <print_data_screen+0x11e>
	}else{
		sprintf(display_str,"B:%02d", getBatteryLevel());
   1a898:	4b80      	ldr	r3, [pc, #512]	; (1aa9c <print_data_screen+0x310>)
   1a89a:	4798      	blx	r3
   1a89c:	0003      	movs	r3, r0
   1a89e:	001a      	movs	r2, r3
   1a8a0:	4980      	ldr	r1, [pc, #512]	; (1aaa4 <print_data_screen+0x318>)
   1a8a2:	4b77      	ldr	r3, [pc, #476]	; (1aa80 <print_data_screen+0x2f4>)
   1a8a4:	0018      	movs	r0, r3
   1a8a6:	4b77      	ldr	r3, [pc, #476]	; (1aa84 <print_data_screen+0x2f8>)
   1a8a8:	4798      	blx	r3
	}
	glcd_tiny_draw_string(51,7,display_str);
   1a8aa:	4b75      	ldr	r3, [pc, #468]	; (1aa80 <print_data_screen+0x2f4>)
   1a8ac:	001a      	movs	r2, r3
   1a8ae:	2107      	movs	r1, #7
   1a8b0:	2033      	movs	r0, #51	; 0x33
   1a8b2:	4b76      	ldr	r3, [pc, #472]	; (1aa8c <print_data_screen+0x300>)
   1a8b4:	4798      	blx	r3
	#define y1 0  //  Starting Y position for header
	#define y2 10 //  Starting Y position for data
	
	#define num_lines 5
	//Print Data Headers
	sprintf(display_str,"REF");
   1a8b6:	4a72      	ldr	r2, [pc, #456]	; (1aa80 <print_data_screen+0x2f4>)
   1a8b8:	4b7b      	ldr	r3, [pc, #492]	; (1aaa8 <print_data_screen+0x31c>)
   1a8ba:	0010      	movs	r0, r2
   1a8bc:	0019      	movs	r1, r3
   1a8be:	2304      	movs	r3, #4
   1a8c0:	001a      	movs	r2, r3
   1a8c2:	4b7a      	ldr	r3, [pc, #488]	; (1aaac <print_data_screen+0x320>)
   1a8c4:	4798      	blx	r3
	glcd_draw_string_xy(x1,y1, display_str);
   1a8c6:	4b6e      	ldr	r3, [pc, #440]	; (1aa80 <print_data_screen+0x2f4>)
   1a8c8:	001a      	movs	r2, r3
   1a8ca:	2100      	movs	r1, #0
   1a8cc:	2000      	movs	r0, #0
   1a8ce:	4b78      	ldr	r3, [pc, #480]	; (1aab0 <print_data_screen+0x324>)
   1a8d0:	4798      	blx	r3
	
	sprintf(display_str,"DIST");
   1a8d2:	4a6b      	ldr	r2, [pc, #428]	; (1aa80 <print_data_screen+0x2f4>)
   1a8d4:	4b77      	ldr	r3, [pc, #476]	; (1aab4 <print_data_screen+0x328>)
   1a8d6:	0010      	movs	r0, r2
   1a8d8:	0019      	movs	r1, r3
   1a8da:	2305      	movs	r3, #5
   1a8dc:	001a      	movs	r2, r3
   1a8de:	4b73      	ldr	r3, [pc, #460]	; (1aaac <print_data_screen+0x320>)
   1a8e0:	4798      	blx	r3
	glcd_draw_string_xy(x2,y1,display_str);
   1a8e2:	4b67      	ldr	r3, [pc, #412]	; (1aa80 <print_data_screen+0x2f4>)
   1a8e4:	001a      	movs	r2, r3
   1a8e6:	2100      	movs	r1, #0
   1a8e8:	201c      	movs	r0, #28
   1a8ea:	4b71      	ldr	r3, [pc, #452]	; (1aab0 <print_data_screen+0x324>)
   1a8ec:	4798      	blx	r3
	
	sprintf(display_str,"AZM");
   1a8ee:	4a64      	ldr	r2, [pc, #400]	; (1aa80 <print_data_screen+0x2f4>)
   1a8f0:	4b71      	ldr	r3, [pc, #452]	; (1aab8 <print_data_screen+0x32c>)
   1a8f2:	0010      	movs	r0, r2
   1a8f4:	0019      	movs	r1, r3
   1a8f6:	2304      	movs	r3, #4
   1a8f8:	001a      	movs	r2, r3
   1a8fa:	4b6c      	ldr	r3, [pc, #432]	; (1aaac <print_data_screen+0x320>)
   1a8fc:	4798      	blx	r3
	glcd_draw_string_xy(x3, y1, display_str);
   1a8fe:	4b60      	ldr	r3, [pc, #384]	; (1aa80 <print_data_screen+0x2f4>)
   1a900:	001a      	movs	r2, r3
   1a902:	2100      	movs	r1, #0
   1a904:	203f      	movs	r0, #63	; 0x3f
   1a906:	4b6a      	ldr	r3, [pc, #424]	; (1aab0 <print_data_screen+0x324>)
   1a908:	4798      	blx	r3
	glcd_draw_circle(x3+21, y1+2, 2, BLACK);
   1a90a:	2301      	movs	r3, #1
   1a90c:	2202      	movs	r2, #2
   1a90e:	2102      	movs	r1, #2
   1a910:	2054      	movs	r0, #84	; 0x54
   1a912:	4c6a      	ldr	r4, [pc, #424]	; (1aabc <print_data_screen+0x330>)
   1a914:	47a0      	blx	r4

	sprintf(display_str,"INCL");
   1a916:	4a5a      	ldr	r2, [pc, #360]	; (1aa80 <print_data_screen+0x2f4>)
   1a918:	4b69      	ldr	r3, [pc, #420]	; (1aac0 <print_data_screen+0x334>)
   1a91a:	0010      	movs	r0, r2
   1a91c:	0019      	movs	r1, r3
   1a91e:	2305      	movs	r3, #5
   1a920:	001a      	movs	r2, r3
   1a922:	4b62      	ldr	r3, [pc, #392]	; (1aaac <print_data_screen+0x320>)
   1a924:	4798      	blx	r3
	glcd_draw_string_xy(x4, y1, display_str);
   1a926:	4b56      	ldr	r3, [pc, #344]	; (1aa80 <print_data_screen+0x2f4>)
   1a928:	001a      	movs	r2, r3
   1a92a:	2100      	movs	r1, #0
   1a92c:	2062      	movs	r0, #98	; 0x62
   1a92e:	4b60      	ldr	r3, [pc, #384]	; (1aab0 <print_data_screen+0x324>)
   1a930:	4798      	blx	r3
	glcd_draw_circle(x4+26, y1+2, 2, BLACK);
   1a932:	2301      	movs	r3, #1
   1a934:	2202      	movs	r2, #2
   1a936:	2102      	movs	r1, #2
   1a938:	207c      	movs	r0, #124	; 0x7c
   1a93a:	4c60      	ldr	r4, [pc, #384]	; (1aabc <print_data_screen+0x330>)
   1a93c:	47a0      	blx	r4

	//Print Grid Lines
	glcd_draw_line(0, y1+8, 128, y1+8, BLACK);
   1a93e:	2301      	movs	r3, #1
   1a940:	9300      	str	r3, [sp, #0]
   1a942:	2308      	movs	r3, #8
   1a944:	2280      	movs	r2, #128	; 0x80
   1a946:	2108      	movs	r1, #8
   1a948:	2000      	movs	r0, #0
   1a94a:	4c53      	ldr	r4, [pc, #332]	; (1aa98 <print_data_screen+0x30c>)
   1a94c:	47a0      	blx	r4
	glcd_draw_line(0, y2+8, 128, y2+8, BLACK);
   1a94e:	2301      	movs	r3, #1
   1a950:	9300      	str	r3, [sp, #0]
   1a952:	2312      	movs	r3, #18
   1a954:	2280      	movs	r2, #128	; 0x80
   1a956:	2112      	movs	r1, #18
   1a958:	2000      	movs	r0, #0
   1a95a:	4c4f      	ldr	r4, [pc, #316]	; (1aa98 <print_data_screen+0x30c>)
   1a95c:	47a0      	blx	r4
	glcd_draw_line(x2-2, 0, x2-2, 53, BLACK);
   1a95e:	2301      	movs	r3, #1
   1a960:	9300      	str	r3, [sp, #0]
   1a962:	2335      	movs	r3, #53	; 0x35
   1a964:	221a      	movs	r2, #26
   1a966:	2100      	movs	r1, #0
   1a968:	201a      	movs	r0, #26
   1a96a:	4c4b      	ldr	r4, [pc, #300]	; (1aa98 <print_data_screen+0x30c>)
   1a96c:	47a0      	blx	r4
	glcd_draw_line(x3-2, 0, x3-2, 53, BLACK);
   1a96e:	2301      	movs	r3, #1
   1a970:	9300      	str	r3, [sp, #0]
   1a972:	2335      	movs	r3, #53	; 0x35
   1a974:	223d      	movs	r2, #61	; 0x3d
   1a976:	2100      	movs	r1, #0
   1a978:	203d      	movs	r0, #61	; 0x3d
   1a97a:	4c47      	ldr	r4, [pc, #284]	; (1aa98 <print_data_screen+0x30c>)
   1a97c:	47a0      	blx	r4
	glcd_draw_line(x4-2, 0, x4-2, 53, BLACK);
   1a97e:	2301      	movs	r3, #1
   1a980:	9300      	str	r3, [sp, #0]
   1a982:	2335      	movs	r3, #53	; 0x35
   1a984:	2260      	movs	r2, #96	; 0x60
   1a986:	2100      	movs	r1, #0
   1a988:	2060      	movs	r0, #96	; 0x60
   1a98a:	4c43      	ldr	r4, [pc, #268]	; (1aa98 <print_data_screen+0x30c>)
   1a98c:	47a0      	blx	r4
	//Print Data
	uint16_t i;
	uint16_t y_temp;
	int16_t temp_index;
	int16_t temp_ref;
	for (i=0;i<num_lines;i++){
   1a98e:	230e      	movs	r3, #14
   1a990:	18fb      	adds	r3, r7, r3
   1a992:	2200      	movs	r2, #0
   1a994:	801a      	strh	r2, [r3, #0]
   1a996:	e13c      	b.n	1ac12 <print_data_screen+0x486>
		temp_index=data_buf_ind-i;
   1a998:	4b4a      	ldr	r3, [pc, #296]	; (1aac4 <print_data_screen+0x338>)
   1a99a:	781b      	ldrb	r3, [r3, #0]
   1a99c:	b29a      	uxth	r2, r3
   1a99e:	230e      	movs	r3, #14
   1a9a0:	18fb      	adds	r3, r7, r3
   1a9a2:	881b      	ldrh	r3, [r3, #0]
   1a9a4:	1ad3      	subs	r3, r2, r3
   1a9a6:	b29a      	uxth	r2, r3
   1a9a8:	230a      	movs	r3, #10
   1a9aa:	18fb      	adds	r3, r7, r3
   1a9ac:	801a      	strh	r2, [r3, #0]
		temp_ref=data_ref-i;
   1a9ae:	4b46      	ldr	r3, [pc, #280]	; (1aac8 <print_data_screen+0x33c>)
   1a9b0:	681b      	ldr	r3, [r3, #0]
   1a9b2:	b29a      	uxth	r2, r3
   1a9b4:	230e      	movs	r3, #14
   1a9b6:	18fb      	adds	r3, r7, r3
   1a9b8:	881b      	ldrh	r3, [r3, #0]
   1a9ba:	1ad3      	subs	r3, r2, r3
   1a9bc:	b29a      	uxth	r2, r3
   1a9be:	2308      	movs	r3, #8
   1a9c0:	18fb      	adds	r3, r7, r3
   1a9c2:	801a      	strh	r2, [r3, #0]
		if(current_state==st_aim){//bump everything down to display active reading
   1a9c4:	4b41      	ldr	r3, [pc, #260]	; (1aacc <print_data_screen+0x340>)
   1a9c6:	781b      	ldrb	r3, [r3, #0]
   1a9c8:	b2db      	uxtb	r3, r3
   1a9ca:	2b00      	cmp	r3, #0
   1a9cc:	d10f      	bne.n	1a9ee <print_data_screen+0x262>
			temp_index=temp_index+1;
   1a9ce:	230a      	movs	r3, #10
   1a9d0:	18fb      	adds	r3, r7, r3
   1a9d2:	881b      	ldrh	r3, [r3, #0]
   1a9d4:	3301      	adds	r3, #1
   1a9d6:	b29a      	uxth	r2, r3
   1a9d8:	230a      	movs	r3, #10
   1a9da:	18fb      	adds	r3, r7, r3
   1a9dc:	801a      	strh	r2, [r3, #0]
			temp_ref=temp_ref+1;
   1a9de:	2308      	movs	r3, #8
   1a9e0:	18fb      	adds	r3, r7, r3
   1a9e2:	881b      	ldrh	r3, [r3, #0]
   1a9e4:	3301      	adds	r3, #1
   1a9e6:	b29a      	uxth	r2, r3
   1a9e8:	2308      	movs	r3, #8
   1a9ea:	18fb      	adds	r3, r7, r3
   1a9ec:	801a      	strh	r2, [r3, #0]
		}
		//Set index for buffer wrap-around
		if (temp_index<0){
   1a9ee:	230a      	movs	r3, #10
   1a9f0:	18fb      	adds	r3, r7, r3
   1a9f2:	2200      	movs	r2, #0
   1a9f4:	5e9b      	ldrsh	r3, [r3, r2]
   1a9f6:	2b00      	cmp	r3, #0
   1a9f8:	da08      	bge.n	1aa0c <print_data_screen+0x280>
			temp_index = buf_length+temp_index;
   1a9fa:	230a      	movs	r3, #10
   1a9fc:	18fb      	adds	r3, r7, r3
   1a9fe:	881b      	ldrh	r3, [r3, #0]
   1aa00:	330a      	adds	r3, #10
   1aa02:	b29a      	uxth	r2, r3
   1aa04:	230a      	movs	r3, #10
   1aa06:	18fb      	adds	r3, r7, r3
   1aa08:	801a      	strh	r2, [r3, #0]
   1aa0a:	e00d      	b.n	1aa28 <print_data_screen+0x29c>
			}else if(temp_index>=buf_length){
   1aa0c:	230a      	movs	r3, #10
   1aa0e:	18fb      	adds	r3, r7, r3
   1aa10:	2200      	movs	r2, #0
   1aa12:	5e9b      	ldrsh	r3, [r3, r2]
   1aa14:	2b09      	cmp	r3, #9
   1aa16:	dd07      	ble.n	1aa28 <print_data_screen+0x29c>
			temp_index = temp_index-buf_length;
   1aa18:	230a      	movs	r3, #10
   1aa1a:	18fb      	adds	r3, r7, r3
   1aa1c:	881b      	ldrh	r3, [r3, #0]
   1aa1e:	3b0a      	subs	r3, #10
   1aa20:	b29a      	uxth	r2, r3
   1aa22:	230a      	movs	r3, #10
   1aa24:	18fb      	adds	r3, r7, r3
   1aa26:	801a      	strh	r2, [r3, #0]
		}
		//print lines
		if ((temp_ref)>0){
   1aa28:	2308      	movs	r3, #8
   1aa2a:	18fb      	adds	r3, r7, r3
   1aa2c:	2200      	movs	r2, #0
   1aa2e:	5e9b      	ldrsh	r3, [r3, r2]
   1aa30:	2b00      	cmp	r3, #0
   1aa32:	dc00      	bgt.n	1aa36 <print_data_screen+0x2aa>
   1aa34:	e0e6      	b.n	1ac04 <print_data_screen+0x478>
			//Adjust line spacing for grid lines
			if(i<2){y_temp=y2+10*i;}
   1aa36:	230e      	movs	r3, #14
   1aa38:	18fb      	adds	r3, r7, r3
   1aa3a:	881b      	ldrh	r3, [r3, #0]
   1aa3c:	2b01      	cmp	r3, #1
   1aa3e:	d847      	bhi.n	1aad0 <print_data_screen+0x344>
   1aa40:	230e      	movs	r3, #14
   1aa42:	18fb      	adds	r3, r7, r3
   1aa44:	881b      	ldrh	r3, [r3, #0]
   1aa46:	3301      	adds	r3, #1
   1aa48:	b29b      	uxth	r3, r3
   1aa4a:	220c      	movs	r2, #12
   1aa4c:	18ba      	adds	r2, r7, r2
   1aa4e:	1c19      	adds	r1, r3, #0
   1aa50:	0089      	lsls	r1, r1, #2
   1aa52:	18cb      	adds	r3, r1, r3
   1aa54:	18db      	adds	r3, r3, r3
   1aa56:	8013      	strh	r3, [r2, #0]
   1aa58:	e045      	b.n	1aae6 <print_data_screen+0x35a>
   1aa5a:	46c0      	nop			; (mov r8, r8)
   1aa5c:	0000e6e5 	.word	0x0000e6e5
   1aa60:	00001a59 	.word	0x00001a59
   1aa64:	00025dd0 	.word	0x00025dd0
   1aa68:	00013505 	.word	0x00013505
   1aa6c:	000125a5 	.word	0x000125a5
   1aa70:	20002eec 	.word	0x20002eec
   1aa74:	2000103c 	.word	0x2000103c
   1aa78:	00020d99 	.word	0x00020d99
   1aa7c:	00026abc 	.word	0x00026abc
   1aa80:	20002f78 	.word	0x20002f78
   1aa84:	000210bd 	.word	0x000210bd
   1aa88:	00026ac8 	.word	0x00026ac8
   1aa8c:	00013691 	.word	0x00013691
   1aa90:	00026ad4 	.word	0x00026ad4
   1aa94:	20000e11 	.word	0x20000e11
   1aa98:	000126e1 	.word	0x000126e1
   1aa9c:	000019a1 	.word	0x000019a1
   1aaa0:	00026ae4 	.word	0x00026ae4
   1aaa4:	00026af0 	.word	0x00026af0
   1aaa8:	00026af8 	.word	0x00026af8
   1aaac:	00020fa5 	.word	0x00020fa5
   1aab0:	0001348d 	.word	0x0001348d
   1aab4:	00026afc 	.word	0x00026afc
   1aab8:	00026b04 	.word	0x00026b04
   1aabc:	000128cd 	.word	0x000128cd
   1aac0:	00026b08 	.word	0x00026b08
   1aac4:	20000df5 	.word	0x20000df5
   1aac8:	20000df8 	.word	0x20000df8
   1aacc:	200027fc 	.word	0x200027fc
			else {y_temp=y2+9*i;	}
   1aad0:	230e      	movs	r3, #14
   1aad2:	18fb      	adds	r3, r7, r3
   1aad4:	881b      	ldrh	r3, [r3, #0]
   1aad6:	1c1a      	adds	r2, r3, #0
   1aad8:	00d2      	lsls	r2, r2, #3
   1aada:	18d3      	adds	r3, r2, r3
   1aadc:	b29a      	uxth	r2, r3
   1aade:	230c      	movs	r3, #12
   1aae0:	18fb      	adds	r3, r7, r3
   1aae2:	320a      	adds	r2, #10
   1aae4:	801a      	strh	r2, [r3, #0]
			if((current_state==st_main_display)||(i>0)){//do not print reference and distance for active reading
   1aae6:	4b51      	ldr	r3, [pc, #324]	; (1ac2c <print_data_screen+0x4a0>)
   1aae8:	781b      	ldrb	r3, [r3, #0]
   1aaea:	b2db      	uxtb	r3, r3
   1aaec:	2b02      	cmp	r3, #2
   1aaee:	d004      	beq.n	1aafa <print_data_screen+0x36e>
   1aaf0:	230e      	movs	r3, #14
   1aaf2:	18fb      	adds	r3, r7, r3
   1aaf4:	881b      	ldrh	r3, [r3, #0]
   1aaf6:	2b00      	cmp	r3, #0
   1aaf8:	d048      	beq.n	1ab8c <print_data_screen+0x400>
				sprintf(display_str, "%d", data_buf[temp_index].index_ref);//reference
   1aafa:	230a      	movs	r3, #10
   1aafc:	18fb      	adds	r3, r7, r3
   1aafe:	2200      	movs	r2, #0
   1ab00:	5e9a      	ldrsh	r2, [r3, r2]
   1ab02:	4b4b      	ldr	r3, [pc, #300]	; (1ac30 <print_data_screen+0x4a4>)
   1ab04:	21a4      	movs	r1, #164	; 0xa4
   1ab06:	434a      	muls	r2, r1
   1ab08:	58d2      	ldr	r2, [r2, r3]
   1ab0a:	494a      	ldr	r1, [pc, #296]	; (1ac34 <print_data_screen+0x4a8>)
   1ab0c:	4b4a      	ldr	r3, [pc, #296]	; (1ac38 <print_data_screen+0x4ac>)
   1ab0e:	0018      	movs	r0, r3
   1ab10:	4b4a      	ldr	r3, [pc, #296]	; (1ac3c <print_data_screen+0x4b0>)
   1ab12:	4798      	blx	r3
				glcd_draw_string_xy(x1, y_temp, display_str);
   1ab14:	230c      	movs	r3, #12
   1ab16:	18fb      	adds	r3, r7, r3
   1ab18:	881b      	ldrh	r3, [r3, #0]
   1ab1a:	b2db      	uxtb	r3, r3
   1ab1c:	4a46      	ldr	r2, [pc, #280]	; (1ac38 <print_data_screen+0x4ac>)
   1ab1e:	0019      	movs	r1, r3
   1ab20:	2000      	movs	r0, #0
   1ab22:	4b47      	ldr	r3, [pc, #284]	; (1ac40 <print_data_screen+0x4b4>)
   1ab24:	4798      	blx	r3
				sprintf(display_str, "%.1f", data_buf[temp_index].distance);//distance
   1ab26:	230a      	movs	r3, #10
   1ab28:	18fb      	adds	r3, r7, r3
   1ab2a:	2200      	movs	r2, #0
   1ab2c:	5e9b      	ldrsh	r3, [r3, r2]
   1ab2e:	4a40      	ldr	r2, [pc, #256]	; (1ac30 <print_data_screen+0x4a4>)
   1ab30:	21a4      	movs	r1, #164	; 0xa4
   1ab32:	434b      	muls	r3, r1
   1ab34:	18d3      	adds	r3, r2, r3
   1ab36:	331c      	adds	r3, #28
   1ab38:	681a      	ldr	r2, [r3, #0]
   1ab3a:	4b42      	ldr	r3, [pc, #264]	; (1ac44 <print_data_screen+0x4b8>)
   1ab3c:	1c10      	adds	r0, r2, #0
   1ab3e:	4798      	blx	r3
   1ab40:	0003      	movs	r3, r0
   1ab42:	000c      	movs	r4, r1
   1ab44:	4940      	ldr	r1, [pc, #256]	; (1ac48 <print_data_screen+0x4bc>)
   1ab46:	483c      	ldr	r0, [pc, #240]	; (1ac38 <print_data_screen+0x4ac>)
   1ab48:	001a      	movs	r2, r3
   1ab4a:	0023      	movs	r3, r4
   1ab4c:	4c3b      	ldr	r4, [pc, #236]	; (1ac3c <print_data_screen+0x4b0>)
   1ab4e:	47a0      	blx	r4
				glcd_draw_string_xy(x2, y_temp, display_str);
   1ab50:	230c      	movs	r3, #12
   1ab52:	18fb      	adds	r3, r7, r3
   1ab54:	881b      	ldrh	r3, [r3, #0]
   1ab56:	b2db      	uxtb	r3, r3
   1ab58:	4a37      	ldr	r2, [pc, #220]	; (1ac38 <print_data_screen+0x4ac>)
   1ab5a:	0019      	movs	r1, r3
   1ab5c:	201c      	movs	r0, #28
   1ab5e:	4b38      	ldr	r3, [pc, #224]	; (1ac40 <print_data_screen+0x4b4>)
   1ab60:	4798      	blx	r3
				
				//  Add Error message if necessary
				if (data_buf[temp_index].num_errors!=0){
   1ab62:	230a      	movs	r3, #10
   1ab64:	18fb      	adds	r3, r7, r3
   1ab66:	2200      	movs	r2, #0
   1ab68:	5e9b      	ldrsh	r3, [r3, r2]
   1ab6a:	4a31      	ldr	r2, [pc, #196]	; (1ac30 <print_data_screen+0x4a4>)
   1ab6c:	21a4      	movs	r1, #164	; 0xa4
   1ab6e:	434b      	muls	r3, r1
   1ab70:	18d3      	adds	r3, r2, r3
   1ab72:	3358      	adds	r3, #88	; 0x58
   1ab74:	681b      	ldr	r3, [r3, #0]
   1ab76:	2b00      	cmp	r3, #0
   1ab78:	d008      	beq.n	1ab8c <print_data_screen+0x400>
					glcd_draw_string_xy(x1+18, y_temp, "E");				
   1ab7a:	230c      	movs	r3, #12
   1ab7c:	18fb      	adds	r3, r7, r3
   1ab7e:	881b      	ldrh	r3, [r3, #0]
   1ab80:	b2db      	uxtb	r3, r3
   1ab82:	4a32      	ldr	r2, [pc, #200]	; (1ac4c <print_data_screen+0x4c0>)
   1ab84:	0019      	movs	r1, r3
   1ab86:	2012      	movs	r0, #18
   1ab88:	4b2d      	ldr	r3, [pc, #180]	; (1ac40 <print_data_screen+0x4b4>)
   1ab8a:	4798      	blx	r3
				}
				
			}

			sprintf(display_str, "%.1f", data_buf[temp_index].azimuth);//Azimuth
   1ab8c:	230a      	movs	r3, #10
   1ab8e:	18fb      	adds	r3, r7, r3
   1ab90:	2200      	movs	r2, #0
   1ab92:	5e9b      	ldrsh	r3, [r3, r2]
   1ab94:	4a26      	ldr	r2, [pc, #152]	; (1ac30 <print_data_screen+0x4a4>)
   1ab96:	21a4      	movs	r1, #164	; 0xa4
   1ab98:	434b      	muls	r3, r1
   1ab9a:	18d3      	adds	r3, r2, r3
   1ab9c:	330c      	adds	r3, #12
   1ab9e:	681a      	ldr	r2, [r3, #0]
   1aba0:	4b28      	ldr	r3, [pc, #160]	; (1ac44 <print_data_screen+0x4b8>)
   1aba2:	1c10      	adds	r0, r2, #0
   1aba4:	4798      	blx	r3
   1aba6:	0003      	movs	r3, r0
   1aba8:	000c      	movs	r4, r1
   1abaa:	4927      	ldr	r1, [pc, #156]	; (1ac48 <print_data_screen+0x4bc>)
   1abac:	4822      	ldr	r0, [pc, #136]	; (1ac38 <print_data_screen+0x4ac>)
   1abae:	001a      	movs	r2, r3
   1abb0:	0023      	movs	r3, r4
   1abb2:	4c22      	ldr	r4, [pc, #136]	; (1ac3c <print_data_screen+0x4b0>)
   1abb4:	47a0      	blx	r4
			glcd_draw_string_xy(x3, y_temp, display_str);
   1abb6:	230c      	movs	r3, #12
   1abb8:	18fb      	adds	r3, r7, r3
   1abba:	881b      	ldrh	r3, [r3, #0]
   1abbc:	b2db      	uxtb	r3, r3
   1abbe:	4a1e      	ldr	r2, [pc, #120]	; (1ac38 <print_data_screen+0x4ac>)
   1abc0:	0019      	movs	r1, r3
   1abc2:	203f      	movs	r0, #63	; 0x3f
   1abc4:	4b1e      	ldr	r3, [pc, #120]	; (1ac40 <print_data_screen+0x4b4>)
   1abc6:	4798      	blx	r3
			sprintf(display_str, "%.1f", data_buf[temp_index].inclination);//Inclination
   1abc8:	230a      	movs	r3, #10
   1abca:	18fb      	adds	r3, r7, r3
   1abcc:	2200      	movs	r2, #0
   1abce:	5e9b      	ldrsh	r3, [r3, r2]
   1abd0:	4a17      	ldr	r2, [pc, #92]	; (1ac30 <print_data_screen+0x4a4>)
   1abd2:	21a4      	movs	r1, #164	; 0xa4
   1abd4:	434b      	muls	r3, r1
   1abd6:	18d3      	adds	r3, r2, r3
   1abd8:	3310      	adds	r3, #16
   1abda:	681a      	ldr	r2, [r3, #0]
   1abdc:	4b19      	ldr	r3, [pc, #100]	; (1ac44 <print_data_screen+0x4b8>)
   1abde:	1c10      	adds	r0, r2, #0
   1abe0:	4798      	blx	r3
   1abe2:	0003      	movs	r3, r0
   1abe4:	000c      	movs	r4, r1
   1abe6:	4918      	ldr	r1, [pc, #96]	; (1ac48 <print_data_screen+0x4bc>)
   1abe8:	4813      	ldr	r0, [pc, #76]	; (1ac38 <print_data_screen+0x4ac>)
   1abea:	001a      	movs	r2, r3
   1abec:	0023      	movs	r3, r4
   1abee:	4c13      	ldr	r4, [pc, #76]	; (1ac3c <print_data_screen+0x4b0>)
   1abf0:	47a0      	blx	r4
			glcd_draw_string_xy(x4, y_temp, display_str);
   1abf2:	230c      	movs	r3, #12
   1abf4:	18fb      	adds	r3, r7, r3
   1abf6:	881b      	ldrh	r3, [r3, #0]
   1abf8:	b2db      	uxtb	r3, r3
   1abfa:	4a0f      	ldr	r2, [pc, #60]	; (1ac38 <print_data_screen+0x4ac>)
   1abfc:	0019      	movs	r1, r3
   1abfe:	2062      	movs	r0, #98	; 0x62
   1ac00:	4b0f      	ldr	r3, [pc, #60]	; (1ac40 <print_data_screen+0x4b4>)
   1ac02:	4798      	blx	r3
	for (i=0;i<num_lines;i++){
   1ac04:	230e      	movs	r3, #14
   1ac06:	18fb      	adds	r3, r7, r3
   1ac08:	881a      	ldrh	r2, [r3, #0]
   1ac0a:	230e      	movs	r3, #14
   1ac0c:	18fb      	adds	r3, r7, r3
   1ac0e:	3201      	adds	r2, #1
   1ac10:	801a      	strh	r2, [r3, #0]
   1ac12:	230e      	movs	r3, #14
   1ac14:	18fb      	adds	r3, r7, r3
   1ac16:	881b      	ldrh	r3, [r3, #0]
   1ac18:	2b04      	cmp	r3, #4
   1ac1a:	d800      	bhi.n	1ac1e <print_data_screen+0x492>
   1ac1c:	e6bc      	b.n	1a998 <print_data_screen+0x20c>
	//glcd_tiny_draw_string(0,1,display_str);
	
	////////////////////////

	
	glcd_write();
   1ac1e:	4b0c      	ldr	r3, [pc, #48]	; (1ac50 <print_data_screen+0x4c4>)
   1ac20:	4798      	blx	r3
}
   1ac22:	46c0      	nop			; (mov r8, r8)
   1ac24:	46bd      	mov	sp, r7
   1ac26:	b005      	add	sp, #20
   1ac28:	bd90      	pop	{r4, r7, pc}
   1ac2a:	46c0      	nop			; (mov r8, r8)
   1ac2c:	200027fc 	.word	0x200027fc
   1ac30:	20002800 	.word	0x20002800
   1ac34:	00026b10 	.word	0x00026b10
   1ac38:	20002f78 	.word	0x20002f78
   1ac3c:	000210bd 	.word	0x000210bd
   1ac40:	0001348d 	.word	0x0001348d
   1ac44:	00020d99 	.word	0x00020d99
   1ac48:	00026b14 	.word	0x00026b14
   1ac4c:	00026b1c 	.word	0x00026b1c
   1ac50:	00012de9 	.word	0x00012de9

0001ac54 <draw_arrows>:

void draw_arrows(uint8_t button){
   1ac54:	b590      	push	{r4, r7, lr}
   1ac56:	b085      	sub	sp, #20
   1ac58:	af02      	add	r7, sp, #8
   1ac5a:	0002      	movs	r2, r0
   1ac5c:	1dfb      	adds	r3, r7, #7
   1ac5e:	701a      	strb	r2, [r3, #0]
	//draw menu up/down arrows
	switch(button){
   1ac60:	1dfb      	adds	r3, r7, #7
   1ac62:	781b      	ldrb	r3, [r3, #0]
   1ac64:	2b02      	cmp	r3, #2
   1ac66:	d002      	beq.n	1ac6e <draw_arrows+0x1a>
   1ac68:	2b03      	cmp	r3, #3
   1ac6a:	d011      	beq.n	1ac90 <draw_arrows+0x3c>
		case 3: // Display arrow at button 3
			glcd_draw_line(116, 40, 120, 44, BLACK);
			glcd_draw_line(120, 44, 124, 40, BLACK);
			break;
		default:
			break;
   1ac6c:	e021      	b.n	1acb2 <draw_arrows+0x5e>
			glcd_draw_line(116, 26, 120, 22, BLACK);
   1ac6e:	2301      	movs	r3, #1
   1ac70:	9300      	str	r3, [sp, #0]
   1ac72:	2316      	movs	r3, #22
   1ac74:	2278      	movs	r2, #120	; 0x78
   1ac76:	211a      	movs	r1, #26
   1ac78:	2074      	movs	r0, #116	; 0x74
   1ac7a:	4c10      	ldr	r4, [pc, #64]	; (1acbc <draw_arrows+0x68>)
   1ac7c:	47a0      	blx	r4
			glcd_draw_line(120, 22, 124, 26, BLACK);
   1ac7e:	2301      	movs	r3, #1
   1ac80:	9300      	str	r3, [sp, #0]
   1ac82:	231a      	movs	r3, #26
   1ac84:	227c      	movs	r2, #124	; 0x7c
   1ac86:	2116      	movs	r1, #22
   1ac88:	2078      	movs	r0, #120	; 0x78
   1ac8a:	4c0c      	ldr	r4, [pc, #48]	; (1acbc <draw_arrows+0x68>)
   1ac8c:	47a0      	blx	r4
			break;
   1ac8e:	e010      	b.n	1acb2 <draw_arrows+0x5e>
			glcd_draw_line(116, 40, 120, 44, BLACK);
   1ac90:	2301      	movs	r3, #1
   1ac92:	9300      	str	r3, [sp, #0]
   1ac94:	232c      	movs	r3, #44	; 0x2c
   1ac96:	2278      	movs	r2, #120	; 0x78
   1ac98:	2128      	movs	r1, #40	; 0x28
   1ac9a:	2074      	movs	r0, #116	; 0x74
   1ac9c:	4c07      	ldr	r4, [pc, #28]	; (1acbc <draw_arrows+0x68>)
   1ac9e:	47a0      	blx	r4
			glcd_draw_line(120, 44, 124, 40, BLACK);
   1aca0:	2301      	movs	r3, #1
   1aca2:	9300      	str	r3, [sp, #0]
   1aca4:	2328      	movs	r3, #40	; 0x28
   1aca6:	227c      	movs	r2, #124	; 0x7c
   1aca8:	212c      	movs	r1, #44	; 0x2c
   1acaa:	2078      	movs	r0, #120	; 0x78
   1acac:	4c03      	ldr	r4, [pc, #12]	; (1acbc <draw_arrows+0x68>)
   1acae:	47a0      	blx	r4
			break;
   1acb0:	46c0      	nop			; (mov r8, r8)
	}
	
}
   1acb2:	46c0      	nop			; (mov r8, r8)
   1acb4:	46bd      	mov	sp, r7
   1acb6:	b003      	add	sp, #12
   1acb8:	bd90      	pop	{r4, r7, pc}
   1acba:	46c0      	nop			; (mov r8, r8)
   1acbc:	000126e1 	.word	0x000126e1

0001acc0 <fn_aim_abort>:



void fn_aim_abort(void){
   1acc0:	b580      	push	{r7, lr}
   1acc2:	af00      	add	r7, sp, #0
	rangefinder_on_off(false);
   1acc4:	2000      	movs	r0, #0
   1acc6:	4b06      	ldr	r3, [pc, #24]	; (1ace0 <fn_aim_abort+0x20>)
   1acc8:	4798      	blx	r3
	ioport_set_pin_level(laser_reset, false);
   1acca:	2100      	movs	r1, #0
   1accc:	2002      	movs	r0, #2
   1acce:	4b05      	ldr	r3, [pc, #20]	; (1ace4 <fn_aim_abort+0x24>)
   1acd0:	4798      	blx	r3

	current_input = input_state_complete;
   1acd2:	4b05      	ldr	r3, [pc, #20]	; (1ace8 <fn_aim_abort+0x28>)
   1acd4:	2208      	movs	r2, #8
   1acd6:	701a      	strb	r2, [r3, #0]
	
}
   1acd8:	46c0      	nop			; (mov r8, r8)
   1acda:	46bd      	mov	sp, r7
   1acdc:	bd80      	pop	{r7, pc}
   1acde:	46c0      	nop			; (mov r8, r8)
   1ace0:	00002a81 	.word	0x00002a81
   1ace4:	000166b5 	.word	0x000166b5
   1ace8:	20003b78 	.word	0x20003b78

0001acec <config_pins_powerup>:



void config_pins_powerup(void){
   1acec:	b580      	push	{r7, lr}
   1acee:	af00      	add	r7, sp, #0
	ioport_init();
   1acf0:	4b56      	ldr	r3, [pc, #344]	; (1ae4c <config_pins_powerup+0x160>)
   1acf2:	4798      	blx	r3
	//Input Buttons
	ioport_set_pin_dir(button1, IOPORT_DIR_INPUT);
   1acf4:	2100      	movs	r1, #0
   1acf6:	2029      	movs	r0, #41	; 0x29
   1acf8:	4b55      	ldr	r3, [pc, #340]	; (1ae50 <config_pins_powerup+0x164>)
   1acfa:	4798      	blx	r3
	ioport_set_pin_mode(button1, IOPORT_MODE_PULLUP);
   1acfc:	2110      	movs	r1, #16
   1acfe:	2029      	movs	r0, #41	; 0x29
   1ad00:	4b54      	ldr	r3, [pc, #336]	; (1ae54 <config_pins_powerup+0x168>)
   1ad02:	4798      	blx	r3
	ioport_set_pin_dir(button2, IOPORT_DIR_INPUT);
   1ad04:	2100      	movs	r1, #0
   1ad06:	2004      	movs	r0, #4
   1ad08:	4b51      	ldr	r3, [pc, #324]	; (1ae50 <config_pins_powerup+0x164>)
   1ad0a:	4798      	blx	r3
	ioport_set_pin_mode(button2, IOPORT_MODE_PULLUP);
   1ad0c:	2110      	movs	r1, #16
   1ad0e:	2004      	movs	r0, #4
   1ad10:	4b50      	ldr	r3, [pc, #320]	; (1ae54 <config_pins_powerup+0x168>)
   1ad12:	4798      	blx	r3
	ioport_set_pin_dir(button3, IOPORT_DIR_INPUT);
   1ad14:	2100      	movs	r1, #0
   1ad16:	2006      	movs	r0, #6
   1ad18:	4b4d      	ldr	r3, [pc, #308]	; (1ae50 <config_pins_powerup+0x164>)
   1ad1a:	4798      	blx	r3
	ioport_set_pin_mode(button3, IOPORT_MODE_PULLUP);
   1ad1c:	2110      	movs	r1, #16
   1ad1e:	2006      	movs	r0, #6
   1ad20:	4b4c      	ldr	r3, [pc, #304]	; (1ae54 <config_pins_powerup+0x168>)
   1ad22:	4798      	blx	r3
	ioport_set_pin_dir(button4, IOPORT_DIR_INPUT);
   1ad24:	2100      	movs	r1, #0
   1ad26:	2007      	movs	r0, #7
   1ad28:	4b49      	ldr	r3, [pc, #292]	; (1ae50 <config_pins_powerup+0x164>)
   1ad2a:	4798      	blx	r3
	ioport_set_pin_mode(button4, IOPORT_MODE_PULLUP);
   1ad2c:	2110      	movs	r1, #16
   1ad2e:	2007      	movs	r0, #7
   1ad30:	4b48      	ldr	r3, [pc, #288]	; (1ae54 <config_pins_powerup+0x168>)
   1ad32:	4798      	blx	r3
	ioport_set_pin_dir(buttonE, IOPORT_DIR_INPUT);
   1ad34:	2100      	movs	r1, #0
   1ad36:	2005      	movs	r0, #5
   1ad38:	4b45      	ldr	r3, [pc, #276]	; (1ae50 <config_pins_powerup+0x164>)
   1ad3a:	4798      	blx	r3
	ioport_set_pin_mode(buttonE, IOPORT_MODE_PULLUP);
   1ad3c:	2110      	movs	r1, #16
   1ad3e:	2005      	movs	r0, #5
   1ad40:	4b44      	ldr	r3, [pc, #272]	; (1ae54 <config_pins_powerup+0x168>)
   1ad42:	4798      	blx	r3
	//LCD setup
	ioport_set_pin_dir(LCD_SPI_SS_PIN, IOPORT_DIR_OUTPUT);
   1ad44:	2101      	movs	r1, #1
   1ad46:	2017      	movs	r0, #23
   1ad48:	4b41      	ldr	r3, [pc, #260]	; (1ae50 <config_pins_powerup+0x164>)
   1ad4a:	4798      	blx	r3
	ioport_set_pin_level(LCD_SPI_SS_PIN, true);
   1ad4c:	2101      	movs	r1, #1
   1ad4e:	2017      	movs	r0, #23
   1ad50:	4b41      	ldr	r3, [pc, #260]	; (1ae58 <config_pins_powerup+0x16c>)
   1ad52:	4798      	blx	r3
	ioport_set_pin_dir(LCD_SPI_DC_PIN, IOPORT_DIR_OUTPUT);
   1ad54:	2101      	movs	r1, #1
   1ad56:	201b      	movs	r0, #27
   1ad58:	4b3d      	ldr	r3, [pc, #244]	; (1ae50 <config_pins_powerup+0x164>)
   1ad5a:	4798      	blx	r3
	ioport_set_pin_level(LCD_SPI_DC_PIN, false);
   1ad5c:	2100      	movs	r1, #0
   1ad5e:	201b      	movs	r0, #27
   1ad60:	4b3d      	ldr	r3, [pc, #244]	; (1ae58 <config_pins_powerup+0x16c>)
   1ad62:	4798      	blx	r3
	ioport_set_pin_dir(LCD_SPI_RST_PIN, IOPORT_DIR_OUTPUT);
   1ad64:	2101      	movs	r1, #1
   1ad66:	2037      	movs	r0, #55	; 0x37
   1ad68:	4b39      	ldr	r3, [pc, #228]	; (1ae50 <config_pins_powerup+0x164>)
   1ad6a:	4798      	blx	r3
	ioport_set_pin_level(LCD_SPI_RST_PIN, false);
   1ad6c:	2100      	movs	r1, #0
   1ad6e:	2037      	movs	r0, #55	; 0x37
   1ad70:	4b39      	ldr	r3, [pc, #228]	; (1ae58 <config_pins_powerup+0x16c>)
   1ad72:	4798      	blx	r3
	//power-supply 2 voltage enable
	ioport_set_pin_dir(V2_enable, IOPORT_DIR_OUTPUT);
   1ad74:	2101      	movs	r1, #1
   1ad76:	2022      	movs	r0, #34	; 0x22
   1ad78:	4b35      	ldr	r3, [pc, #212]	; (1ae50 <config_pins_powerup+0x164>)
   1ad7a:	4798      	blx	r3
	ioport_set_pin_level(V2_enable, true);
   1ad7c:	2101      	movs	r1, #1
   1ad7e:	2022      	movs	r0, #34	; 0x22
   1ad80:	4b35      	ldr	r3, [pc, #212]	; (1ae58 <config_pins_powerup+0x16c>)
   1ad82:	4798      	blx	r3
	//SPI pin
	ioport_set_pin_dir(lcd_SS, IOPORT_DIR_OUTPUT);
   1ad84:	2101      	movs	r1, #1
   1ad86:	2017      	movs	r0, #23
   1ad88:	4b31      	ldr	r3, [pc, #196]	; (1ae50 <config_pins_powerup+0x164>)
   1ad8a:	4798      	blx	r3
	ioport_set_pin_level(lcd_SS, true);
   1ad8c:	2101      	movs	r1, #1
   1ad8e:	2017      	movs	r0, #23
   1ad90:	4b31      	ldr	r3, [pc, #196]	; (1ae58 <config_pins_powerup+0x16c>)
   1ad92:	4798      	blx	r3
	ioport_set_pin_dir(acc1_SS, IOPORT_DIR_OUTPUT);
   1ad94:	2101      	movs	r1, #1
   1ad96:	2012      	movs	r0, #18
   1ad98:	4b2d      	ldr	r3, [pc, #180]	; (1ae50 <config_pins_powerup+0x164>)
   1ad9a:	4798      	blx	r3
	ioport_set_pin_level(acc1_SS, true);
   1ad9c:	2101      	movs	r1, #1
   1ad9e:	2012      	movs	r0, #18
   1ada0:	4b2d      	ldr	r3, [pc, #180]	; (1ae58 <config_pins_powerup+0x16c>)
   1ada2:	4798      	blx	r3
	ioport_set_pin_dir(acc2_SS, IOPORT_DIR_OUTPUT);
   1ada4:	2101      	movs	r1, #1
   1ada6:	2013      	movs	r0, #19
   1ada8:	4b29      	ldr	r3, [pc, #164]	; (1ae50 <config_pins_powerup+0x164>)
   1adaa:	4798      	blx	r3
	ioport_set_pin_level(acc2_SS, true);
   1adac:	2101      	movs	r1, #1
   1adae:	2013      	movs	r0, #19
   1adb0:	4b29      	ldr	r3, [pc, #164]	; (1ae58 <config_pins_powerup+0x16c>)
   1adb2:	4798      	blx	r3
	ioport_set_pin_dir(mag1_SS, IOPORT_DIR_OUTPUT);
   1adb4:	2101      	movs	r1, #1
   1adb6:	2015      	movs	r0, #21
   1adb8:	4b25      	ldr	r3, [pc, #148]	; (1ae50 <config_pins_powerup+0x164>)
   1adba:	4798      	blx	r3
	ioport_set_pin_level(mag1_SS, true);
   1adbc:	2101      	movs	r1, #1
   1adbe:	2015      	movs	r0, #21
   1adc0:	4b25      	ldr	r3, [pc, #148]	; (1ae58 <config_pins_powerup+0x16c>)
   1adc2:	4798      	blx	r3
	ioport_set_pin_dir(mag2_SS, IOPORT_DIR_OUTPUT);
   1adc4:	2101      	movs	r1, #1
   1adc6:	2014      	movs	r0, #20
   1adc8:	4b21      	ldr	r3, [pc, #132]	; (1ae50 <config_pins_powerup+0x164>)
   1adca:	4798      	blx	r3
	ioport_set_pin_level(mag2_SS, true);
   1adcc:	2101      	movs	r1, #1
   1adce:	2014      	movs	r0, #20
   1add0:	4b21      	ldr	r3, [pc, #132]	; (1ae58 <config_pins_powerup+0x16c>)
   1add2:	4798      	blx	r3
	ioport_set_pin_dir(SD_CS, IOPORT_DIR_OUTPUT);
   1add4:	2101      	movs	r1, #1
   1add6:	200f      	movs	r0, #15
   1add8:	4b1d      	ldr	r3, [pc, #116]	; (1ae50 <config_pins_powerup+0x164>)
   1adda:	4798      	blx	r3
	ioport_set_pin_level(SD_CS, true);
   1addc:	2101      	movs	r1, #1
   1adde:	200f      	movs	r0, #15
   1ade0:	4b1d      	ldr	r3, [pc, #116]	; (1ae58 <config_pins_powerup+0x16c>)
   1ade2:	4798      	blx	r3
	ioport_set_pin_dir(BLE_SS, IOPORT_DIR_OUTPUT);
   1ade4:	2101      	movs	r1, #1
   1ade6:	2016      	movs	r0, #22
   1ade8:	4b19      	ldr	r3, [pc, #100]	; (1ae50 <config_pins_powerup+0x164>)
   1adea:	4798      	blx	r3
	ioport_set_pin_level(BLE_SS, true);
   1adec:	2101      	movs	r1, #1
   1adee:	2016      	movs	r0, #22
   1adf0:	4b19      	ldr	r3, [pc, #100]	; (1ae58 <config_pins_powerup+0x16c>)
   1adf2:	4798      	blx	r3
	//UART Pins
	//ioport_set_pin_dir(MCU_RTS1, IOPORT_DIR_OUTPUT);
	//ioport_set_pin_level(MCU_RTS1, false);
	//ioport_set_pin_dir(MCU_CTS1, IOPORT_DIR_INPUT);
	//BLE pins
	ioport_set_pin_dir(BLE_ota, IOPORT_DIR_OUTPUT);
   1adf4:	2101      	movs	r1, #1
   1adf6:	2036      	movs	r0, #54	; 0x36
   1adf8:	4b15      	ldr	r3, [pc, #84]	; (1ae50 <config_pins_powerup+0x164>)
   1adfa:	4798      	blx	r3
	ioport_set_pin_level(BLE_ota, false);// low to disable programming over BLE
   1adfc:	2100      	movs	r1, #0
   1adfe:	2036      	movs	r0, #54	; 0x36
   1ae00:	4b15      	ldr	r3, [pc, #84]	; (1ae58 <config_pins_powerup+0x16c>)
   1ae02:	4798      	blx	r3
	ioport_set_pin_dir(BLE_autorun, IOPORT_DIR_OUTPUT);
   1ae04:	2101      	movs	r1, #1
   1ae06:	200e      	movs	r0, #14
   1ae08:	4b11      	ldr	r3, [pc, #68]	; (1ae50 <config_pins_powerup+0x164>)
   1ae0a:	4798      	blx	r3
	ioport_set_pin_level(BLE_autorun, true);//low for autorun enabled, high for development mode
   1ae0c:	2101      	movs	r1, #1
   1ae0e:	200e      	movs	r0, #14
   1ae10:	4b11      	ldr	r3, [pc, #68]	; (1ae58 <config_pins_powerup+0x16c>)
   1ae12:	4798      	blx	r3
	ioport_set_pin_dir(BLE_reset, IOPORT_DIR_OUTPUT);
   1ae14:	2101      	movs	r1, #1
   1ae16:	2003      	movs	r0, #3
   1ae18:	4b0d      	ldr	r3, [pc, #52]	; (1ae50 <config_pins_powerup+0x164>)
   1ae1a:	4798      	blx	r3
	ioport_set_pin_level(BLE_reset, false); //low, hold in reset
   1ae1c:	2100      	movs	r1, #0
   1ae1e:	2003      	movs	r0, #3
   1ae20:	4b0d      	ldr	r3, [pc, #52]	; (1ae58 <config_pins_powerup+0x16c>)
   1ae22:	4798      	blx	r3
	//miscellaneous
	ioport_set_pin_dir(laser_reset, IOPORT_DIR_OUTPUT);
   1ae24:	2101      	movs	r1, #1
   1ae26:	2002      	movs	r0, #2
   1ae28:	4b09      	ldr	r3, [pc, #36]	; (1ae50 <config_pins_powerup+0x164>)
   1ae2a:	4798      	blx	r3
	ioport_set_pin_level(laser_reset, false);
   1ae2c:	2100      	movs	r1, #0
   1ae2e:	2002      	movs	r0, #2
   1ae30:	4b09      	ldr	r3, [pc, #36]	; (1ae58 <config_pins_powerup+0x16c>)
   1ae32:	4798      	blx	r3
	ioport_set_pin_dir(SD_CS, IOPORT_DIR_INPUT);
   1ae34:	2100      	movs	r1, #0
   1ae36:	200f      	movs	r0, #15
   1ae38:	4b05      	ldr	r3, [pc, #20]	; (1ae50 <config_pins_powerup+0x164>)
   1ae3a:	4798      	blx	r3
	ioport_set_pin_mode(SD_CS, IOPORT_MODE_PULLUP);
   1ae3c:	2110      	movs	r1, #16
   1ae3e:	200f      	movs	r0, #15
   1ae40:	4b04      	ldr	r3, [pc, #16]	; (1ae54 <config_pins_powerup+0x168>)
   1ae42:	4798      	blx	r3
}
   1ae44:	46c0      	nop			; (mov r8, r8)
   1ae46:	46bd      	mov	sp, r7
   1ae48:	bd80      	pop	{r7, pc}
   1ae4a:	46c0      	nop			; (mov r8, r8)
   1ae4c:	00016635 	.word	0x00016635
   1ae50:	0001668d 	.word	0x0001668d
   1ae54:	00016649 	.word	0x00016649
   1ae58:	000166b5 	.word	0x000166b5

0001ae5c <config_pins_powerdown>:




void config_pins_powerdown(void){
   1ae5c:	b580      	push	{r7, lr}
   1ae5e:	af00      	add	r7, sp, #0
	//spi pins
	ioport_reset_pin_mode(mosi);
   1ae60:	202a      	movs	r0, #42	; 0x2a
   1ae62:	4b3e      	ldr	r3, [pc, #248]	; (1af5c <config_pins_powerdown+0x100>)
   1ae64:	4798      	blx	r3
	ioport_reset_pin_mode(miso);
   1ae66:	2028      	movs	r0, #40	; 0x28
   1ae68:	4b3c      	ldr	r3, [pc, #240]	; (1af5c <config_pins_powerdown+0x100>)
   1ae6a:	4798      	blx	r3
	ioport_reset_pin_mode(sclk);
   1ae6c:	202b      	movs	r0, #43	; 0x2b
   1ae6e:	4b3b      	ldr	r3, [pc, #236]	; (1af5c <config_pins_powerdown+0x100>)
   1ae70:	4798      	blx	r3
	ioport_set_pin_dir(mosi, IOPORT_DIR_INPUT);
   1ae72:	2100      	movs	r1, #0
   1ae74:	202a      	movs	r0, #42	; 0x2a
   1ae76:	4b3a      	ldr	r3, [pc, #232]	; (1af60 <config_pins_powerdown+0x104>)
   1ae78:	4798      	blx	r3
	ioport_set_pin_dir(miso, IOPORT_DIR_INPUT);
   1ae7a:	2100      	movs	r1, #0
   1ae7c:	2028      	movs	r0, #40	; 0x28
   1ae7e:	4b38      	ldr	r3, [pc, #224]	; (1af60 <config_pins_powerdown+0x104>)
   1ae80:	4798      	blx	r3
	ioport_set_pin_dir(sclk, IOPORT_DIR_INPUT);
   1ae82:	2100      	movs	r1, #0
   1ae84:	202b      	movs	r0, #43	; 0x2b
   1ae86:	4b36      	ldr	r3, [pc, #216]	; (1af60 <config_pins_powerdown+0x104>)
   1ae88:	4798      	blx	r3
	//i2c pins
	ioport_reset_pin_mode(SDA);
   1ae8a:	200c      	movs	r0, #12
   1ae8c:	4b33      	ldr	r3, [pc, #204]	; (1af5c <config_pins_powerdown+0x100>)
   1ae8e:	4798      	blx	r3
	ioport_reset_pin_mode(SCL);
   1ae90:	200d      	movs	r0, #13
   1ae92:	4b32      	ldr	r3, [pc, #200]	; (1af5c <config_pins_powerdown+0x100>)
   1ae94:	4798      	blx	r3
	ioport_set_pin_dir(SDA, IOPORT_DIR_INPUT);
   1ae96:	2100      	movs	r1, #0
   1ae98:	200c      	movs	r0, #12
   1ae9a:	4b31      	ldr	r3, [pc, #196]	; (1af60 <config_pins_powerdown+0x104>)
   1ae9c:	4798      	blx	r3
	ioport_set_pin_dir(SCL, IOPORT_DIR_INPUT);
   1ae9e:	2100      	movs	r1, #0
   1aea0:	200d      	movs	r0, #13
   1aea2:	4b2f      	ldr	r3, [pc, #188]	; (1af60 <config_pins_powerdown+0x104>)
   1aea4:	4798      	blx	r3
	// UART pins
	ioport_reset_pin_mode(MCU_TX1);
   1aea6:	2008      	movs	r0, #8
   1aea8:	4b2c      	ldr	r3, [pc, #176]	; (1af5c <config_pins_powerdown+0x100>)
   1aeaa:	4798      	blx	r3
	ioport_reset_pin_mode(MCU_TX2);
   1aeac:	2010      	movs	r0, #16
   1aeae:	4b2b      	ldr	r3, [pc, #172]	; (1af5c <config_pins_powerdown+0x100>)
   1aeb0:	4798      	blx	r3
	ioport_reset_pin_mode(MCU_RX1);
   1aeb2:	2009      	movs	r0, #9
   1aeb4:	4b29      	ldr	r3, [pc, #164]	; (1af5c <config_pins_powerdown+0x100>)
   1aeb6:	4798      	blx	r3
	ioport_reset_pin_mode(MCU_RX2);
   1aeb8:	2011      	movs	r0, #17
   1aeba:	4b28      	ldr	r3, [pc, #160]	; (1af5c <config_pins_powerdown+0x100>)
   1aebc:	4798      	blx	r3
	ioport_set_pin_dir(MCU_TX1, IOPORT_DIR_INPUT);
   1aebe:	2100      	movs	r1, #0
   1aec0:	2008      	movs	r0, #8
   1aec2:	4b27      	ldr	r3, [pc, #156]	; (1af60 <config_pins_powerdown+0x104>)
   1aec4:	4798      	blx	r3
	ioport_set_pin_dir(MCU_TX2, IOPORT_DIR_INPUT);
   1aec6:	2100      	movs	r1, #0
   1aec8:	2010      	movs	r0, #16
   1aeca:	4b25      	ldr	r3, [pc, #148]	; (1af60 <config_pins_powerdown+0x104>)
   1aecc:	4798      	blx	r3
	ioport_set_pin_dir(MCU_RX1, IOPORT_DIR_INPUT);
   1aece:	2100      	movs	r1, #0
   1aed0:	2009      	movs	r0, #9
   1aed2:	4b23      	ldr	r3, [pc, #140]	; (1af60 <config_pins_powerdown+0x104>)
   1aed4:	4798      	blx	r3
	ioport_set_pin_dir(MCU_RX2, IOPORT_DIR_INPUT);
   1aed6:	2100      	movs	r1, #0
   1aed8:	2011      	movs	r0, #17
   1aeda:	4b21      	ldr	r3, [pc, #132]	; (1af60 <config_pins_powerdown+0x104>)
   1aedc:	4798      	blx	r3
	//set all pins used on V2 devices to high impedance
	ioport_set_pin_dir(lcd_SS , IOPORT_DIR_INPUT);
   1aede:	2100      	movs	r1, #0
   1aee0:	2017      	movs	r0, #23
   1aee2:	4b1f      	ldr	r3, [pc, #124]	; (1af60 <config_pins_powerdown+0x104>)
   1aee4:	4798      	blx	r3
	ioport_set_pin_dir(acc1_SS, IOPORT_DIR_INPUT);
   1aee6:	2100      	movs	r1, #0
   1aee8:	2012      	movs	r0, #18
   1aeea:	4b1d      	ldr	r3, [pc, #116]	; (1af60 <config_pins_powerdown+0x104>)
   1aeec:	4798      	blx	r3
	ioport_set_pin_dir(acc2_SS , IOPORT_DIR_INPUT);
   1aeee:	2100      	movs	r1, #0
   1aef0:	2013      	movs	r0, #19
   1aef2:	4b1b      	ldr	r3, [pc, #108]	; (1af60 <config_pins_powerdown+0x104>)
   1aef4:	4798      	blx	r3
	ioport_set_pin_dir(mag1_SS , IOPORT_DIR_INPUT);
   1aef6:	2100      	movs	r1, #0
   1aef8:	2015      	movs	r0, #21
   1aefa:	4b19      	ldr	r3, [pc, #100]	; (1af60 <config_pins_powerdown+0x104>)
   1aefc:	4798      	blx	r3
	ioport_set_pin_dir(mag2_SS , IOPORT_DIR_INPUT);
   1aefe:	2100      	movs	r1, #0
   1af00:	2014      	movs	r0, #20
   1af02:	4b17      	ldr	r3, [pc, #92]	; (1af60 <config_pins_powerdown+0x104>)
   1af04:	4798      	blx	r3
	ioport_set_pin_dir(SD_CS , IOPORT_DIR_INPUT);
   1af06:	2100      	movs	r1, #0
   1af08:	200f      	movs	r0, #15
   1af0a:	4b15      	ldr	r3, [pc, #84]	; (1af60 <config_pins_powerdown+0x104>)
   1af0c:	4798      	blx	r3
	ioport_set_pin_dir(laser_reset , IOPORT_DIR_INPUT);
   1af0e:	2100      	movs	r1, #0
   1af10:	2002      	movs	r0, #2
   1af12:	4b13      	ldr	r3, [pc, #76]	; (1af60 <config_pins_powerdown+0x104>)
   1af14:	4798      	blx	r3
	ioport_set_pin_dir(LCD_SPI_SS_PIN , IOPORT_DIR_INPUT);
   1af16:	2100      	movs	r1, #0
   1af18:	2017      	movs	r0, #23
   1af1a:	4b11      	ldr	r3, [pc, #68]	; (1af60 <config_pins_powerdown+0x104>)
   1af1c:	4798      	blx	r3
	ioport_set_pin_dir(LCD_SPI_DC_PIN , IOPORT_DIR_INPUT);
   1af1e:	2100      	movs	r1, #0
   1af20:	201b      	movs	r0, #27
   1af22:	4b0f      	ldr	r3, [pc, #60]	; (1af60 <config_pins_powerdown+0x104>)
   1af24:	4798      	blx	r3
	ioport_set_pin_dir(LCD_SPI_RST_PIN , IOPORT_DIR_INPUT);
   1af26:	2100      	movs	r1, #0
   1af28:	2037      	movs	r0, #55	; 0x37
   1af2a:	4b0d      	ldr	r3, [pc, #52]	; (1af60 <config_pins_powerdown+0x104>)
   1af2c:	4798      	blx	r3
	ioport_set_pin_dir(BLE_autorun, IOPORT_DIR_INPUT);
   1af2e:	2100      	movs	r1, #0
   1af30:	200e      	movs	r0, #14
   1af32:	4b0b      	ldr	r3, [pc, #44]	; (1af60 <config_pins_powerdown+0x104>)
   1af34:	4798      	blx	r3
	ioport_set_pin_dir(BLE_ota, IOPORT_DIR_INPUT);
   1af36:	2100      	movs	r1, #0
   1af38:	2036      	movs	r0, #54	; 0x36
   1af3a:	4b09      	ldr	r3, [pc, #36]	; (1af60 <config_pins_powerdown+0x104>)
   1af3c:	4798      	blx	r3
	ioport_set_pin_dir(BLE_SS, IOPORT_DIR_INPUT);
   1af3e:	2100      	movs	r1, #0
   1af40:	2016      	movs	r0, #22
   1af42:	4b07      	ldr	r3, [pc, #28]	; (1af60 <config_pins_powerdown+0x104>)
   1af44:	4798      	blx	r3
	ioport_set_pin_level(BLE_reset, false);
   1af46:	2100      	movs	r1, #0
   1af48:	2003      	movs	r0, #3
   1af4a:	4b06      	ldr	r3, [pc, #24]	; (1af64 <config_pins_powerdown+0x108>)
   1af4c:	4798      	blx	r3
	ioport_set_pin_level(BLE_SS, true);
   1af4e:	2101      	movs	r1, #1
   1af50:	2016      	movs	r0, #22
   1af52:	4b04      	ldr	r3, [pc, #16]	; (1af64 <config_pins_powerdown+0x108>)
   1af54:	4798      	blx	r3
}
   1af56:	46c0      	nop			; (mov r8, r8)
   1af58:	46bd      	mov	sp, r7
   1af5a:	bd80      	pop	{r7, pc}
   1af5c:	0001666d 	.word	0x0001666d
   1af60:	0001668d 	.word	0x0001668d
   1af64:	000166b5 	.word	0x000166b5

0001af68 <configure_extint_channel>:




void configure_extint_channel(void)
{
   1af68:	b580      	push	{r7, lr}
   1af6a:	b084      	sub	sp, #16
   1af6c:	af00      	add	r7, sp, #0
	struct extint_chan_conf config_extint_chan;

	extint_chan_get_config_defaults(&config_extint_chan);
   1af6e:	1d3b      	adds	r3, r7, #4
   1af70:	0018      	movs	r0, r3
   1af72:	4b26      	ldr	r3, [pc, #152]	; (1b00c <configure_extint_channel+0xa4>)
   1af74:	4798      	blx	r3
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
   1af76:	1d3b      	adds	r3, r7, #4
   1af78:	2201      	movs	r2, #1
   1af7a:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1af7c:	1d3b      	adds	r3, r7, #4
   1af7e:	2202      	movs	r2, #2
   1af80:	72da      	strb	r2, [r3, #11]
	config_extint_chan.filter_input_signal  = true;
   1af82:	1d3b      	adds	r3, r7, #4
   1af84:	2201      	movs	r2, #1
   1af86:	729a      	strb	r2, [r3, #10]
	config_extint_chan.enable_async_edge_detection = true;
   1af88:	1d3b      	adds	r3, r7, #4
   1af8a:	2201      	movs	r2, #1
   1af8c:	725a      	strb	r2, [r3, #9]
	// button 4
	config_extint_chan.gpio_pin           = PIN_PA07A_EIC_EXTINT7;
   1af8e:	1d3b      	adds	r3, r7, #4
   1af90:	2207      	movs	r2, #7
   1af92:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux       = MUX_PA07A_EIC_EXTINT7;
   1af94:	1d3b      	adds	r3, r7, #4
   1af96:	2200      	movs	r2, #0
   1af98:	605a      	str	r2, [r3, #4]
	extint_chan_set_config(7, &config_extint_chan);
   1af9a:	1d3b      	adds	r3, r7, #4
   1af9c:	0019      	movs	r1, r3
   1af9e:	2007      	movs	r0, #7
   1afa0:	4b1b      	ldr	r3, [pc, #108]	; (1b010 <configure_extint_channel+0xa8>)
   1afa2:	4798      	blx	r3
	// button 3
	config_extint_chan.gpio_pin           = PIN_PA06A_EIC_EXTINT6;
   1afa4:	1d3b      	adds	r3, r7, #4
   1afa6:	2206      	movs	r2, #6
   1afa8:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux       = MUX_PA06A_EIC_EXTINT6;
   1afaa:	1d3b      	adds	r3, r7, #4
   1afac:	2200      	movs	r2, #0
   1afae:	605a      	str	r2, [r3, #4]
	extint_chan_set_config(6, &config_extint_chan);
   1afb0:	1d3b      	adds	r3, r7, #4
   1afb2:	0019      	movs	r1, r3
   1afb4:	2006      	movs	r0, #6
   1afb6:	4b16      	ldr	r3, [pc, #88]	; (1b010 <configure_extint_channel+0xa8>)
   1afb8:	4798      	blx	r3
	// button 2
	config_extint_chan.gpio_pin           = PIN_PA04A_EIC_EXTINT4;
   1afba:	1d3b      	adds	r3, r7, #4
   1afbc:	2204      	movs	r2, #4
   1afbe:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux       = MUX_PA04A_EIC_EXTINT4;
   1afc0:	1d3b      	adds	r3, r7, #4
   1afc2:	2200      	movs	r2, #0
   1afc4:	605a      	str	r2, [r3, #4]
	extint_chan_set_config(4, &config_extint_chan);
   1afc6:	1d3b      	adds	r3, r7, #4
   1afc8:	0019      	movs	r1, r3
   1afca:	2004      	movs	r0, #4
   1afcc:	4b10      	ldr	r3, [pc, #64]	; (1b010 <configure_extint_channel+0xa8>)
   1afce:	4798      	blx	r3
	// button 1
	config_extint_chan.gpio_pin           = PIN_PB09A_EIC_EXTINT9;
   1afd0:	1d3b      	adds	r3, r7, #4
   1afd2:	2229      	movs	r2, #41	; 0x29
   1afd4:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux       = MUX_PB09A_EIC_EXTINT9;
   1afd6:	1d3b      	adds	r3, r7, #4
   1afd8:	2200      	movs	r2, #0
   1afda:	605a      	str	r2, [r3, #4]
	extint_chan_set_config(9, &config_extint_chan);
   1afdc:	1d3b      	adds	r3, r7, #4
   1afde:	0019      	movs	r1, r3
   1afe0:	2009      	movs	r0, #9
   1afe2:	4b0b      	ldr	r3, [pc, #44]	; (1b010 <configure_extint_channel+0xa8>)
   1afe4:	4798      	blx	r3
	
	// button Ext
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
   1afe6:	1d3b      	adds	r3, r7, #4
   1afe8:	2203      	movs	r2, #3
   1afea:	72da      	strb	r2, [r3, #11]
	config_extint_chan.gpio_pin           = PIN_PA05A_EIC_EXTINT5;
   1afec:	1d3b      	adds	r3, r7, #4
   1afee:	2205      	movs	r2, #5
   1aff0:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux       = MUX_PA05A_EIC_EXTINT5;
   1aff2:	1d3b      	adds	r3, r7, #4
   1aff4:	2200      	movs	r2, #0
   1aff6:	605a      	str	r2, [r3, #4]
	extint_chan_set_config(5, &config_extint_chan);
   1aff8:	1d3b      	adds	r3, r7, #4
   1affa:	0019      	movs	r1, r3
   1affc:	2005      	movs	r0, #5
   1affe:	4b04      	ldr	r3, [pc, #16]	; (1b010 <configure_extint_channel+0xa8>)
   1b000:	4798      	blx	r3
	
}
   1b002:	46c0      	nop			; (mov r8, r8)
   1b004:	46bd      	mov	sp, r7
   1b006:	b004      	add	sp, #16
   1b008:	bd80      	pop	{r7, pc}
   1b00a:	46c0      	nop			; (mov r8, r8)
   1b00c:	00004f45 	.word	0x00004f45
   1b010:	00004f79 	.word	0x00004f79

0001b014 <configure_extint_callbacks>:

void configure_extint_callbacks(void)
{
   1b014:	b580      	push	{r7, lr}
   1b016:	af00      	add	r7, sp, #0
	// Button 4
	extint_register_callback(extint_routine, 7,	EXTINT_CALLBACK_TYPE_DETECT);
   1b018:	4b1a      	ldr	r3, [pc, #104]	; (1b084 <configure_extint_callbacks+0x70>)
   1b01a:	2200      	movs	r2, #0
   1b01c:	2107      	movs	r1, #7
   1b01e:	0018      	movs	r0, r3
   1b020:	4b19      	ldr	r3, [pc, #100]	; (1b088 <configure_extint_callbacks+0x74>)
   1b022:	4798      	blx	r3
	extint_chan_enable_callback(7,EXTINT_CALLBACK_TYPE_DETECT);
   1b024:	2100      	movs	r1, #0
   1b026:	2007      	movs	r0, #7
   1b028:	4b18      	ldr	r3, [pc, #96]	; (1b08c <configure_extint_callbacks+0x78>)
   1b02a:	4798      	blx	r3
	// Button 3
	extint_register_callback(extint_routine, 6,	EXTINT_CALLBACK_TYPE_DETECT);
   1b02c:	4b15      	ldr	r3, [pc, #84]	; (1b084 <configure_extint_callbacks+0x70>)
   1b02e:	2200      	movs	r2, #0
   1b030:	2106      	movs	r1, #6
   1b032:	0018      	movs	r0, r3
   1b034:	4b14      	ldr	r3, [pc, #80]	; (1b088 <configure_extint_callbacks+0x74>)
   1b036:	4798      	blx	r3
	extint_chan_enable_callback(6,EXTINT_CALLBACK_TYPE_DETECT);
   1b038:	2100      	movs	r1, #0
   1b03a:	2006      	movs	r0, #6
   1b03c:	4b13      	ldr	r3, [pc, #76]	; (1b08c <configure_extint_callbacks+0x78>)
   1b03e:	4798      	blx	r3
	// Button 2
	extint_register_callback(extint_routine, 4,	EXTINT_CALLBACK_TYPE_DETECT);
   1b040:	4b10      	ldr	r3, [pc, #64]	; (1b084 <configure_extint_callbacks+0x70>)
   1b042:	2200      	movs	r2, #0
   1b044:	2104      	movs	r1, #4
   1b046:	0018      	movs	r0, r3
   1b048:	4b0f      	ldr	r3, [pc, #60]	; (1b088 <configure_extint_callbacks+0x74>)
   1b04a:	4798      	blx	r3
	extint_chan_enable_callback(4,EXTINT_CALLBACK_TYPE_DETECT);
   1b04c:	2100      	movs	r1, #0
   1b04e:	2004      	movs	r0, #4
   1b050:	4b0e      	ldr	r3, [pc, #56]	; (1b08c <configure_extint_callbacks+0x78>)
   1b052:	4798      	blx	r3
	// Button 1
	extint_register_callback(extint_routine, 9,	EXTINT_CALLBACK_TYPE_DETECT);
   1b054:	4b0b      	ldr	r3, [pc, #44]	; (1b084 <configure_extint_callbacks+0x70>)
   1b056:	2200      	movs	r2, #0
   1b058:	2109      	movs	r1, #9
   1b05a:	0018      	movs	r0, r3
   1b05c:	4b0a      	ldr	r3, [pc, #40]	; (1b088 <configure_extint_callbacks+0x74>)
   1b05e:	4798      	blx	r3
	extint_chan_enable_callback(9,EXTINT_CALLBACK_TYPE_DETECT);
   1b060:	2100      	movs	r1, #0
   1b062:	2009      	movs	r0, #9
   1b064:	4b09      	ldr	r3, [pc, #36]	; (1b08c <configure_extint_callbacks+0x78>)
   1b066:	4798      	blx	r3
	
	// Button External
	extint_register_callback(extint_routine, 5,	EXTINT_CALLBACK_TYPE_DETECT);
   1b068:	4b06      	ldr	r3, [pc, #24]	; (1b084 <configure_extint_callbacks+0x70>)
   1b06a:	2200      	movs	r2, #0
   1b06c:	2105      	movs	r1, #5
   1b06e:	0018      	movs	r0, r3
   1b070:	4b05      	ldr	r3, [pc, #20]	; (1b088 <configure_extint_callbacks+0x74>)
   1b072:	4798      	blx	r3
	extint_chan_enable_callback(5,EXTINT_CALLBACK_TYPE_DETECT);
   1b074:	2100      	movs	r1, #0
   1b076:	2005      	movs	r0, #5
   1b078:	4b04      	ldr	r3, [pc, #16]	; (1b08c <configure_extint_callbacks+0x78>)
   1b07a:	4798      	blx	r3
}
   1b07c:	46c0      	nop			; (mov r8, r8)
   1b07e:	46bd      	mov	sp, r7
   1b080:	bd80      	pop	{r7, pc}
   1b082:	46c0      	nop			; (mov r8, r8)
   1b084:	0001b091 	.word	0x0001b091
   1b088:	00004afd 	.word	0x00004afd
   1b08c:	00004b61 	.word	0x00004b61

0001b090 <extint_routine>:

void extint_routine(void)
{
   1b090:	b580      	push	{r7, lr}
   1b092:	af00      	add	r7, sp, #0
	switch (extint_get_current_channel()){
   1b094:	4b17      	ldr	r3, [pc, #92]	; (1b0f4 <extint_routine+0x64>)
   1b096:	4798      	blx	r3
   1b098:	0003      	movs	r3, r0
   1b09a:	3b04      	subs	r3, #4
   1b09c:	2b05      	cmp	r3, #5
   1b09e:	d826      	bhi.n	1b0ee <extint_routine+0x5e>
   1b0a0:	009a      	lsls	r2, r3, #2
   1b0a2:	4b15      	ldr	r3, [pc, #84]	; (1b0f8 <extint_routine+0x68>)
   1b0a4:	18d3      	adds	r3, r2, r3
   1b0a6:	681b      	ldr	r3, [r3, #0]
   1b0a8:	469f      	mov	pc, r3
		case 5:
			externalButtonRoutine(!ioport_get_pin_level(buttonE));
   1b0aa:	2005      	movs	r0, #5
   1b0ac:	4b13      	ldr	r3, [pc, #76]	; (1b0fc <extint_routine+0x6c>)
   1b0ae:	4798      	blx	r3
   1b0b0:	0003      	movs	r3, r0
   1b0b2:	1e5a      	subs	r2, r3, #1
   1b0b4:	4193      	sbcs	r3, r2
   1b0b6:	b2db      	uxtb	r3, r3
   1b0b8:	2201      	movs	r2, #1
   1b0ba:	4053      	eors	r3, r2
   1b0bc:	b2db      	uxtb	r3, r3
   1b0be:	1c1a      	adds	r2, r3, #0
   1b0c0:	2301      	movs	r3, #1
   1b0c2:	4013      	ands	r3, r2
   1b0c4:	b2db      	uxtb	r3, r3
   1b0c6:	0018      	movs	r0, r3
   1b0c8:	4b0d      	ldr	r3, [pc, #52]	; (1b100 <extint_routine+0x70>)
   1b0ca:	4798      	blx	r3
			break;
   1b0cc:	e00f      	b.n	1b0ee <extint_routine+0x5e>
		case 7:
			current_input = input_button4;
   1b0ce:	4b0d      	ldr	r3, [pc, #52]	; (1b104 <extint_routine+0x74>)
   1b0d0:	2204      	movs	r2, #4
   1b0d2:	701a      	strb	r2, [r3, #0]
			break;
   1b0d4:	e00b      	b.n	1b0ee <extint_routine+0x5e>
		case 6:
			current_input = input_button3;
   1b0d6:	4b0b      	ldr	r3, [pc, #44]	; (1b104 <extint_routine+0x74>)
   1b0d8:	2203      	movs	r2, #3
   1b0da:	701a      	strb	r2, [r3, #0]
			break;
   1b0dc:	e007      	b.n	1b0ee <extint_routine+0x5e>
		case 4:
			current_input = input_button2;
   1b0de:	4b09      	ldr	r3, [pc, #36]	; (1b104 <extint_routine+0x74>)
   1b0e0:	2202      	movs	r2, #2
   1b0e2:	701a      	strb	r2, [r3, #0]
			break;			
   1b0e4:	e003      	b.n	1b0ee <extint_routine+0x5e>
		case 9:
			current_input = input_button1;
   1b0e6:	4b07      	ldr	r3, [pc, #28]	; (1b104 <extint_routine+0x74>)
   1b0e8:	2201      	movs	r2, #1
   1b0ea:	701a      	strb	r2, [r3, #0]
			break;
   1b0ec:	46c0      	nop			; (mov r8, r8)
		
	}
		
}
   1b0ee:	46c0      	nop			; (mov r8, r8)
   1b0f0:	46bd      	mov	sp, r7
   1b0f2:	bd80      	pop	{r7, pc}
   1b0f4:	00004ba9 	.word	0x00004ba9
   1b0f8:	00026b40 	.word	0x00026b40
   1b0fc:	000166dd 	.word	0x000166dd
   1b100:	0001b109 	.word	0x0001b109
   1b104:	20003b78 	.word	0x20003b78

0001b108 <externalButtonRoutine>:

void externalButtonRoutine(bool buttonOn){
   1b108:	b580      	push	{r7, lr}
   1b10a:	b082      	sub	sp, #8
   1b10c:	af00      	add	r7, sp, #0
   1b10e:	0002      	movs	r2, r0
   1b110:	1dfb      	adds	r3, r7, #7
   1b112:	701a      	strb	r2, [r3, #0]
	// If held down for less than X seconds, provides normal input upon release
	// If held down for more than X seconds, a separate interrupt routine provides powerdown input
	// When in powerdown state, 3 quick clicks through a separate interrupt routine provides powerup input
	
	
	if (current_state == st_powerdown){
   1b114:	4b23      	ldr	r3, [pc, #140]	; (1b1a4 <externalButtonRoutine+0x9c>)
   1b116:	781b      	ldrb	r3, [r3, #0]
   1b118:	b2db      	uxtb	r3, r3
   1b11a:	2b04      	cmp	r3, #4
   1b11c:	d116      	bne.n	1b14c <externalButtonRoutine+0x44>
		//  wakup on 3 quick clicks
		if (buttonOn){//if external button is pressed
   1b11e:	1dfb      	adds	r3, r7, #7
   1b120:	781b      	ldrb	r3, [r3, #0]
   1b122:	2b00      	cmp	r3, #0
   1b124:	d009      	beq.n	1b13a <externalButtonRoutine+0x32>
			quick3_timer(true);
   1b126:	2001      	movs	r0, #1
   1b128:	4b1f      	ldr	r3, [pc, #124]	; (1b1a8 <externalButtonRoutine+0xa0>)
   1b12a:	4798      	blx	r3
			click_counter = click_counter+1;//  click_counter reset by timer interrupt routine if timer expires.
   1b12c:	4b1f      	ldr	r3, [pc, #124]	; (1b1ac <externalButtonRoutine+0xa4>)
   1b12e:	781b      	ldrb	r3, [r3, #0]
   1b130:	b2db      	uxtb	r3, r3
   1b132:	3301      	adds	r3, #1
   1b134:	b2da      	uxtb	r2, r3
   1b136:	4b1d      	ldr	r3, [pc, #116]	; (1b1ac <externalButtonRoutine+0xa4>)
   1b138:	701a      	strb	r2, [r3, #0]
		}
		if (click_counter>=3){
   1b13a:	4b1c      	ldr	r3, [pc, #112]	; (1b1ac <externalButtonRoutine+0xa4>)
   1b13c:	781b      	ldrb	r3, [r3, #0]
   1b13e:	b2db      	uxtb	r3, r3
   1b140:	2b02      	cmp	r3, #2
   1b142:	d928      	bls.n	1b196 <externalButtonRoutine+0x8e>
			current_input = input_wakeup;
   1b144:	4b1a      	ldr	r3, [pc, #104]	; (1b1b0 <externalButtonRoutine+0xa8>)
   1b146:	2215      	movs	r2, #21
   1b148:	701a      	strb	r2, [r3, #0]
		}
		return;	
   1b14a:	e024      	b.n	1b196 <externalButtonRoutine+0x8e>
	}
	
	
	
	if (buttonOn){
   1b14c:	1dfb      	adds	r3, r7, #7
   1b14e:	781b      	ldrb	r3, [r3, #0]
   1b150:	2b00      	cmp	r3, #0
   1b152:	d014      	beq.n	1b17e <externalButtonRoutine+0x76>
		//  Trigger on if button is pressed
		if(!buttonE_triggered){
   1b154:	4b17      	ldr	r3, [pc, #92]	; (1b1b4 <externalButtonRoutine+0xac>)
   1b156:	781b      	ldrb	r3, [r3, #0]
   1b158:	b2db      	uxtb	r3, r3
   1b15a:	2201      	movs	r2, #1
   1b15c:	4053      	eors	r3, r2
   1b15e:	b2db      	uxtb	r3, r3
   1b160:	2b00      	cmp	r3, #0
   1b162:	d01a      	beq.n	1b19a <externalButtonRoutine+0x92>
			buttonE_triggered=true;
   1b164:	4b13      	ldr	r3, [pc, #76]	; (1b1b4 <externalButtonRoutine+0xac>)
   1b166:	2201      	movs	r2, #1
   1b168:	701a      	strb	r2, [r3, #0]
			//trigger timer
			tc_set_count_value(&timer1, 0);
   1b16a:	4b13      	ldr	r3, [pc, #76]	; (1b1b8 <externalButtonRoutine+0xb0>)
   1b16c:	2100      	movs	r1, #0
   1b16e:	0018      	movs	r0, r3
   1b170:	4b12      	ldr	r3, [pc, #72]	; (1b1bc <externalButtonRoutine+0xb4>)
   1b172:	4798      	blx	r3
			tc_start_counter(&timer1);
   1b174:	4b10      	ldr	r3, [pc, #64]	; (1b1b8 <externalButtonRoutine+0xb0>)
   1b176:	0018      	movs	r0, r3
   1b178:	4b11      	ldr	r3, [pc, #68]	; (1b1c0 <externalButtonRoutine+0xb8>)
   1b17a:	4798      	blx	r3
		}
		return;
   1b17c:	e00d      	b.n	1b19a <externalButtonRoutine+0x92>
		
	}else{
		//  Releaed in a short amount of time, normal input
		buttonE_triggered=false;
   1b17e:	4b0d      	ldr	r3, [pc, #52]	; (1b1b4 <externalButtonRoutine+0xac>)
   1b180:	2200      	movs	r2, #0
   1b182:	701a      	strb	r2, [r3, #0]
		tc_stop_counter(&timer1);
   1b184:	4b0c      	ldr	r3, [pc, #48]	; (1b1b8 <externalButtonRoutine+0xb0>)
   1b186:	0018      	movs	r0, r3
   1b188:	4b0e      	ldr	r3, [pc, #56]	; (1b1c4 <externalButtonRoutine+0xbc>)
   1b18a:	4798      	blx	r3
		current_input = input_buttonE;
   1b18c:	4b08      	ldr	r3, [pc, #32]	; (1b1b0 <externalButtonRoutine+0xa8>)
   1b18e:	2205      	movs	r2, #5
   1b190:	701a      	strb	r2, [r3, #0]
		return;	
   1b192:	46c0      	nop			; (mov r8, r8)
   1b194:	e002      	b.n	1b19c <externalButtonRoutine+0x94>
		return;	
   1b196:	46c0      	nop			; (mov r8, r8)
   1b198:	e000      	b.n	1b19c <externalButtonRoutine+0x94>
		return;
   1b19a:	46c0      	nop			; (mov r8, r8)
		
	}
	
		
}
   1b19c:	46bd      	mov	sp, r7
   1b19e:	b002      	add	sp, #8
   1b1a0:	bd80      	pop	{r7, pc}
   1b1a2:	46c0      	nop			; (mov r8, r8)
   1b1a4:	200027fc 	.word	0x200027fc
   1b1a8:	00004505 	.word	0x00004505
   1b1ac:	20002f74 	.word	0x20002f74
   1b1b0:	20003b78 	.word	0x20003b78
   1b1b4:	20000df4 	.word	0x20000df4
   1b1b8:	20001108 	.word	0x20001108
   1b1bc:	000070b5 	.word	0x000070b5
   1b1c0:	00016a09 	.word	0x00016a09
   1b1c4:	000169d9 	.word	0x000169d9

0001b1c8 <fn_powerdown>:



void fn_powerdown(void){
   1b1c8:	b590      	push	{r4, r7, lr}
   1b1ca:	b083      	sub	sp, #12
   1b1cc:	af00      	add	r7, sp, #0
	enum sleepmgr_mode sleep_mode;
	if (state_change){
   1b1ce:	4b13      	ldr	r3, [pc, #76]	; (1b21c <fn_powerdown+0x54>)
   1b1d0:	781b      	ldrb	r3, [r3, #0]
   1b1d2:	b2db      	uxtb	r3, r3
   1b1d4:	2b00      	cmp	r3, #0
   1b1d6:	d012      	beq.n	1b1fe <fn_powerdown+0x36>
		// Disable watchdog timer
		wdt_disable();
   1b1d8:	4b11      	ldr	r3, [pc, #68]	; (1b220 <fn_powerdown+0x58>)
   1b1da:	4798      	blx	r3
		//  Switch-Over to low power internal clock
		clock_32k_source(clock_int);
   1b1dc:	2001      	movs	r0, #1
   1b1de:	4b11      	ldr	r3, [pc, #68]	; (1b224 <fn_powerdown+0x5c>)
   1b1e0:	4798      	blx	r3
		ext_osc_onoff(false);
   1b1e2:	2000      	movs	r0, #0
   1b1e4:	4b10      	ldr	r3, [pc, #64]	; (1b228 <fn_powerdown+0x60>)
   1b1e6:	4798      	blx	r3
		//  Put hardware in low-power state
		disable_comms();
   1b1e8:	4b10      	ldr	r3, [pc, #64]	; (1b22c <fn_powerdown+0x64>)
   1b1ea:	4798      	blx	r3
		config_pins_powerdown();		
   1b1ec:	4b10      	ldr	r3, [pc, #64]	; (1b230 <fn_powerdown+0x68>)
   1b1ee:	4798      	blx	r3
		ioport_set_pin_level(V2_enable, false);//disable V2 power supply		
   1b1f0:	2100      	movs	r1, #0
   1b1f2:	2022      	movs	r0, #34	; 0x22
   1b1f4:	4b0f      	ldr	r3, [pc, #60]	; (1b234 <fn_powerdown+0x6c>)
   1b1f6:	4798      	blx	r3
		configure_timers(st_powerdown);//Disable TC	
   1b1f8:	2004      	movs	r0, #4
   1b1fa:	4b0f      	ldr	r3, [pc, #60]	; (1b238 <fn_powerdown+0x70>)
   1b1fc:	4798      	blx	r3
		
	};	
		
	sleepmgr_lock_mode(SLEEPMGR_STANDBY);
   1b1fe:	2002      	movs	r0, #2
   1b200:	4b0e      	ldr	r3, [pc, #56]	; (1b23c <fn_powerdown+0x74>)
   1b202:	4798      	blx	r3
	sleep_mode = sleepmgr_get_sleep_mode();
   1b204:	1dfc      	adds	r4, r7, #7
   1b206:	4b0e      	ldr	r3, [pc, #56]	; (1b240 <fn_powerdown+0x78>)
   1b208:	4798      	blx	r3
   1b20a:	0003      	movs	r3, r0
   1b20c:	7023      	strb	r3, [r4, #0]
	sleepmgr_sleep(SLEEPMGR_STANDBY);
   1b20e:	2002      	movs	r0, #2
   1b210:	4b0c      	ldr	r3, [pc, #48]	; (1b244 <fn_powerdown+0x7c>)
   1b212:	4798      	blx	r3
	
}
   1b214:	46c0      	nop			; (mov r8, r8)
   1b216:	46bd      	mov	sp, r7
   1b218:	b003      	add	sp, #12
   1b21a:	bd90      	pop	{r4, r7, pc}
   1b21c:	20000110 	.word	0x20000110
   1b220:	00003fc5 	.word	0x00003fc5
   1b224:	0001b3e5 	.word	0x0001b3e5
   1b228:	0000e869 	.word	0x0000e869
   1b22c:	0000de35 	.word	0x0000de35
   1b230:	0001ae5d 	.word	0x0001ae5d
   1b234:	000166b5 	.word	0x000166b5
   1b238:	00004035 	.word	0x00004035
   1b23c:	0001692d 	.word	0x0001692d
   1b240:	0001697d 	.word	0x0001697d
   1b244:	0001683d 	.word	0x0001683d

0001b248 <fn_powerup>:

void fn_powerup(void){
   1b248:	b580      	push	{r7, lr}
   1b24a:	af00      	add	r7, sp, #0
	config_pins_powerup();
   1b24c:	4b28      	ldr	r3, [pc, #160]	; (1b2f0 <fn_powerup+0xa8>)
   1b24e:	4798      	blx	r3
	delay_ms(100);
   1b250:	2064      	movs	r0, #100	; 0x64
   1b252:	4b28      	ldr	r3, [pc, #160]	; (1b2f4 <fn_powerup+0xac>)
   1b254:	4798      	blx	r3
	
	setup_spi();
   1b256:	4b28      	ldr	r3, [pc, #160]	; (1b2f8 <fn_powerup+0xb0>)
   1b258:	4798      	blx	r3
	configure_i2c_master();
   1b25a:	4b28      	ldr	r3, [pc, #160]	; (1b2fc <fn_powerup+0xb4>)
   1b25c:	4798      	blx	r3
	configure_usart();
   1b25e:	4b28      	ldr	r3, [pc, #160]	; (1b300 <fn_powerup+0xb8>)
   1b260:	4798      	blx	r3
	//configure_usart_callbacks();
	
	glcd_init();
   1b262:	4b28      	ldr	r3, [pc, #160]	; (1b304 <fn_powerup+0xbc>)
   1b264:	4798      	blx	r3
	backlightOn();
   1b266:	4b28      	ldr	r3, [pc, #160]	; (1b308 <fn_powerup+0xc0>)
   1b268:	4798      	blx	r3
	configure_extint_channel();
   1b26a:	4b28      	ldr	r3, [pc, #160]	; (1b30c <fn_powerup+0xc4>)
   1b26c:	4798      	blx	r3
	configure_extint_callbacks();
   1b26e:	4b28      	ldr	r3, [pc, #160]	; (1b310 <fn_powerup+0xc8>)
   1b270:	4798      	blx	r3
	setup_accel(&slave_acc1);
   1b272:	4b28      	ldr	r3, [pc, #160]	; (1b314 <fn_powerup+0xcc>)
   1b274:	0018      	movs	r0, r3
   1b276:	4b28      	ldr	r3, [pc, #160]	; (1b318 <fn_powerup+0xd0>)
   1b278:	4798      	blx	r3
	setup_accel(&slave_acc2);
   1b27a:	4b28      	ldr	r3, [pc, #160]	; (1b31c <fn_powerup+0xd4>)
   1b27c:	0018      	movs	r0, r3
   1b27e:	4b26      	ldr	r3, [pc, #152]	; (1b318 <fn_powerup+0xd0>)
   1b280:	4798      	blx	r3
	setup_mag(&slave_mag1);
   1b282:	4b27      	ldr	r3, [pc, #156]	; (1b320 <fn_powerup+0xd8>)
   1b284:	0018      	movs	r0, r3
   1b286:	4b27      	ldr	r3, [pc, #156]	; (1b324 <fn_powerup+0xdc>)
   1b288:	4798      	blx	r3
	setup_mag(&slave_mag2);
   1b28a:	4b27      	ldr	r3, [pc, #156]	; (1b328 <fn_powerup+0xe0>)
   1b28c:	0018      	movs	r0, r3
   1b28e:	4b25      	ldr	r3, [pc, #148]	; (1b324 <fn_powerup+0xdc>)
   1b290:	4798      	blx	r3
	
	
	
	system_interrupt_enable_global();
   1b292:	4b26      	ldr	r3, [pc, #152]	; (1b32c <fn_powerup+0xe4>)
   1b294:	4798      	blx	r3

	config_spi(LCD);
   1b296:	2000      	movs	r0, #0
   1b298:	4b25      	ldr	r3, [pc, #148]	; (1b330 <fn_powerup+0xe8>)
   1b29a:	4798      	blx	r3
	
	delay_ms(50);	
   1b29c:	2032      	movs	r0, #50	; 0x32
   1b29e:	4b15      	ldr	r3, [pc, #84]	; (1b2f4 <fn_powerup+0xac>)
   1b2a0:	4798      	blx	r3
	ext_osc_onoff(true);
   1b2a2:	2001      	movs	r0, #1
   1b2a4:	4b23      	ldr	r3, [pc, #140]	; (1b334 <fn_powerup+0xec>)
   1b2a6:	4798      	blx	r3
	delay_ms(50);	
   1b2a8:	2032      	movs	r0, #50	; 0x32
   1b2aa:	4b12      	ldr	r3, [pc, #72]	; (1b2f4 <fn_powerup+0xac>)
   1b2ac:	4798      	blx	r3
	setup_XOSC32k();
   1b2ae:	4b22      	ldr	r3, [pc, #136]	; (1b338 <fn_powerup+0xf0>)
   1b2b0:	4798      	blx	r3
	clock_32k_source(clock_ext);
   1b2b2:	2000      	movs	r0, #0
   1b2b4:	4b21      	ldr	r3, [pc, #132]	; (1b33c <fn_powerup+0xf4>)
   1b2b6:	4798      	blx	r3
	
	configure_timers(st_powerup);
   1b2b8:	2005      	movs	r0, #5
   1b2ba:	4b21      	ldr	r3, [pc, #132]	; (1b340 <fn_powerup+0xf8>)
   1b2bc:	4798      	blx	r3
	
	configure_SD();
   1b2be:	4b21      	ldr	r3, [pc, #132]	; (1b344 <fn_powerup+0xfc>)
   1b2c0:	4798      	blx	r3
	
	ioport_reset_pin_mode(BLE_ota);//  Needed to reset pin mode; set in some previous initialization
   1b2c2:	2036      	movs	r0, #54	; 0x36
   1b2c4:	4b20      	ldr	r3, [pc, #128]	; (1b348 <fn_powerup+0x100>)
   1b2c6:	4798      	blx	r3
	ioport_set_pin_dir(BLE_ota, IOPORT_DIR_OUTPUT);//  Needed to reset pin mode; set in some previous initialization
   1b2c8:	2101      	movs	r1, #1
   1b2ca:	2036      	movs	r0, #54	; 0x36
   1b2cc:	4b1f      	ldr	r3, [pc, #124]	; (1b34c <fn_powerup+0x104>)
   1b2ce:	4798      	blx	r3
	ioport_set_pin_level(BLE_ota, false);//  Needed to reset pin mode; set in some previous initialization
   1b2d0:	2100      	movs	r1, #0
   1b2d2:	2036      	movs	r0, #54	; 0x36
   1b2d4:	4b1e      	ldr	r3, [pc, #120]	; (1b350 <fn_powerup+0x108>)
   1b2d6:	4798      	blx	r3
	
	wdt_enable();
   1b2d8:	4b1e      	ldr	r3, [pc, #120]	; (1b354 <fn_powerup+0x10c>)
   1b2da:	4798      	blx	r3
	
	buttonE_triggered=false;
   1b2dc:	4b1e      	ldr	r3, [pc, #120]	; (1b358 <fn_powerup+0x110>)
   1b2de:	2200      	movs	r2, #0
   1b2e0:	701a      	strb	r2, [r3, #0]
	current_input = input_state_complete;
   1b2e2:	4b1e      	ldr	r3, [pc, #120]	; (1b35c <fn_powerup+0x114>)
   1b2e4:	2208      	movs	r2, #8
   1b2e6:	701a      	strb	r2, [r3, #0]
	
}
   1b2e8:	46c0      	nop			; (mov r8, r8)
   1b2ea:	46bd      	mov	sp, r7
   1b2ec:	bd80      	pop	{r7, pc}
   1b2ee:	46c0      	nop			; (mov r8, r8)
   1b2f0:	0001aced 	.word	0x0001aced
   1b2f4:	00015545 	.word	0x00015545
   1b2f8:	0000de85 	.word	0x0000de85
   1b2fc:	0000e3c1 	.word	0x0000e3c1
   1b300:	0000e049 	.word	0x0000e049
   1b304:	00012395 	.word	0x00012395
   1b308:	00001441 	.word	0x00001441
   1b30c:	0001af69 	.word	0x0001af69
   1b310:	0001b015 	.word	0x0001b015
   1b314:	20001124 	.word	0x20001124
   1b318:	00002d29 	.word	0x00002d29
   1b31c:	20001050 	.word	0x20001050
   1b320:	20001128 	.word	0x20001128
   1b324:	00003005 	.word	0x00003005
   1b328:	20001018 	.word	0x20001018
   1b32c:	000166fd 	.word	0x000166fd
   1b330:	0000df9d 	.word	0x0000df9d
   1b334:	0000e869 	.word	0x0000e869
   1b338:	0001b361 	.word	0x0001b361
   1b33c:	0001b3e5 	.word	0x0001b3e5
   1b340:	00004035 	.word	0x00004035
   1b344:	0001905d 	.word	0x0001905d
   1b348:	0001666d 	.word	0x0001666d
   1b34c:	0001668d 	.word	0x0001668d
   1b350:	000166b5 	.word	0x000166b5
   1b354:	00003f99 	.word	0x00003f99
   1b358:	20000df4 	.word	0x20000df4
   1b35c:	20003b78 	.word	0x20003b78

0001b360 <setup_XOSC32k>:


void setup_XOSC32k(void){
   1b360:	b580      	push	{r7, lr}
   1b362:	b084      	sub	sp, #16
   1b364:	af00      	add	r7, sp, #0
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
   1b366:	1d3b      	adds	r3, r7, #4
   1b368:	0018      	movs	r0, r3
   1b36a:	4b19      	ldr	r3, [pc, #100]	; (1b3d0 <setup_XOSC32k+0x70>)
   1b36c:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
   1b36e:	1d3b      	adds	r3, r7, #4
   1b370:	2280      	movs	r2, #128	; 0x80
   1b372:	0212      	lsls	r2, r2, #8
   1b374:	605a      	str	r2, [r3, #4]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
   1b376:	1d3b      	adds	r3, r7, #4
   1b378:	2201      	movs	r2, #1
   1b37a:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
   1b37c:	1d3b      	adds	r3, r7, #4
   1b37e:	2204      	movs	r2, #4
   1b380:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
   1b382:	1d3b      	adds	r3, r7, #4
   1b384:	2201      	movs	r2, #1
   1b386:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
   1b388:	1d3b      	adds	r3, r7, #4
   1b38a:	2201      	movs	r2, #1
   1b38c:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.on_demand           = false;
   1b38e:	1d3b      	adds	r3, r7, #4
   1b390:	2200      	movs	r2, #0
   1b392:	725a      	strb	r2, [r3, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
   1b394:	1d3b      	adds	r3, r7, #4
   1b396:	2201      	movs	r2, #1
   1b398:	721a      	strb	r2, [r3, #8]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
   1b39a:	1d3b      	adds	r3, r7, #4
   1b39c:	0018      	movs	r0, r3
   1b39e:	4b0d      	ldr	r3, [pc, #52]	; (1b3d4 <setup_XOSC32k+0x74>)
   1b3a0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
   1b3a2:	2005      	movs	r0, #5
   1b3a4:	4b0c      	ldr	r3, [pc, #48]	; (1b3d8 <setup_XOSC32k+0x78>)
   1b3a6:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
   1b3a8:	46c0      	nop			; (mov r8, r8)
   1b3aa:	2005      	movs	r0, #5
   1b3ac:	4b0b      	ldr	r3, [pc, #44]	; (1b3dc <setup_XOSC32k+0x7c>)
   1b3ae:	4798      	blx	r3
   1b3b0:	0003      	movs	r3, r0
   1b3b2:	001a      	movs	r2, r3
   1b3b4:	2301      	movs	r3, #1
   1b3b6:	4053      	eors	r3, r2
   1b3b8:	b2db      	uxtb	r3, r3
   1b3ba:	2b00      	cmp	r3, #0
   1b3bc:	d1f5      	bne.n	1b3aa <setup_XOSC32k+0x4a>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		OSC32KCTRL->XOSC32K.bit.ONDEMAND = 1;
   1b3be:	4a08      	ldr	r2, [pc, #32]	; (1b3e0 <setup_XOSC32k+0x80>)
   1b3c0:	6953      	ldr	r3, [r2, #20]
   1b3c2:	2180      	movs	r1, #128	; 0x80
   1b3c4:	430b      	orrs	r3, r1
   1b3c6:	6153      	str	r3, [r2, #20]
	}
	
	
	
}
   1b3c8:	46c0      	nop			; (mov r8, r8)
   1b3ca:	46bd      	mov	sp, r7
   1b3cc:	b004      	add	sp, #16
   1b3ce:	bd80      	pop	{r7, pc}
   1b3d0:	00016363 	.word	0x00016363
   1b3d4:	000158a5 	.word	0x000158a5
   1b3d8:	000159a1 	.word	0x000159a1
   1b3dc:	00015a61 	.word	0x00015a61
   1b3e0:	40001000 	.word	0x40001000

0001b3e4 <clock_32k_source>:


void clock_32k_source(enum clock_type ext_int){
   1b3e4:	b580      	push	{r7, lr}
   1b3e6:	b086      	sub	sp, #24
   1b3e8:	af00      	add	r7, sp, #0
   1b3ea:	0002      	movs	r2, r0
   1b3ec:	1dfb      	adds	r3, r7, #7
   1b3ee:	701a      	strb	r2, [r3, #0]
	struct system_gclk_gen_config gclock_gen_conf;
	
	system_gclk_gen_get_config_defaults(&gclock_gen_conf);
   1b3f0:	230c      	movs	r3, #12
   1b3f2:	18fb      	adds	r3, r7, r3
   1b3f4:	0018      	movs	r0, r3
   1b3f6:	4b10      	ldr	r3, [pc, #64]	; (1b438 <clock_32k_source+0x54>)
   1b3f8:	4798      	blx	r3
	gclock_gen_conf.run_in_standby = true;
   1b3fa:	230c      	movs	r3, #12
   1b3fc:	18fb      	adds	r3, r7, r3
   1b3fe:	2201      	movs	r2, #1
   1b400:	721a      	strb	r2, [r3, #8]
	if(ext_int == clock_ext){
   1b402:	1dfb      	adds	r3, r7, #7
   1b404:	781b      	ldrb	r3, [r3, #0]
   1b406:	2b00      	cmp	r3, #0
   1b408:	d104      	bne.n	1b414 <clock_32k_source+0x30>
		gclock_gen_conf.source_clock = SYSTEM_CLOCK_SOURCE_XOSC32K;
   1b40a:	230c      	movs	r3, #12
   1b40c:	18fb      	adds	r3, r7, r3
   1b40e:	2205      	movs	r2, #5
   1b410:	701a      	strb	r2, [r3, #0]
   1b412:	e003      	b.n	1b41c <clock_32k_source+0x38>
	}else{
		gclock_gen_conf.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
   1b414:	230c      	movs	r3, #12
   1b416:	18fb      	adds	r3, r7, r3
   1b418:	2203      	movs	r2, #3
   1b41a:	701a      	strb	r2, [r3, #0]
	}	
	system_gclk_gen_set_config(GCLK_GENERATOR_2, &gclock_gen_conf);
   1b41c:	230c      	movs	r3, #12
   1b41e:	18fb      	adds	r3, r7, r3
   1b420:	0019      	movs	r1, r3
   1b422:	2002      	movs	r0, #2
   1b424:	4b05      	ldr	r3, [pc, #20]	; (1b43c <clock_32k_source+0x58>)
   1b426:	4798      	blx	r3
    system_gclk_gen_enable(GCLK_GENERATOR_2);
   1b428:	2002      	movs	r0, #2
   1b42a:	4b05      	ldr	r3, [pc, #20]	; (1b440 <clock_32k_source+0x5c>)
   1b42c:	4798      	blx	r3
		
}
   1b42e:	46c0      	nop			; (mov r8, r8)
   1b430:	46bd      	mov	sp, r7
   1b432:	b006      	add	sp, #24
   1b434:	bd80      	pop	{r7, pc}
   1b436:	46c0      	nop			; (mov r8, r8)
   1b438:	00016335 	.word	0x00016335
   1b43c:	00015d55 	.word	0x00015d55
   1b440:	00015e65 	.word	0x00015e65

0001b444 <clock_16M_source>:


void clock_16M_source(enum clock_type high_low){
   1b444:	b580      	push	{r7, lr}
   1b446:	b086      	sub	sp, #24
   1b448:	af00      	add	r7, sp, #0
   1b44a:	0002      	movs	r2, r0
   1b44c:	1dfb      	adds	r3, r7, #7
   1b44e:	701a      	strb	r2, [r3, #0]
	struct system_gclk_gen_config gclock_gen_conf;
	
	system_gclk_gen_get_config_defaults(&gclock_gen_conf);
   1b450:	230c      	movs	r3, #12
   1b452:	18fb      	adds	r3, r7, r3
   1b454:	0018      	movs	r0, r3
   1b456:	4b10      	ldr	r3, [pc, #64]	; (1b498 <clock_16M_source+0x54>)
   1b458:	4798      	blx	r3
	gclock_gen_conf.run_in_standby = true;
   1b45a:	230c      	movs	r3, #12
   1b45c:	18fb      	adds	r3, r7, r3
   1b45e:	2201      	movs	r2, #1
   1b460:	721a      	strb	r2, [r3, #8]
	if(high_low == clock_high){
   1b462:	1dfb      	adds	r3, r7, #7
   1b464:	781b      	ldrb	r3, [r3, #0]
   1b466:	2b03      	cmp	r3, #3
   1b468:	d104      	bne.n	1b474 <clock_16M_source+0x30>
		gclock_gen_conf.source_clock =SYSTEM_CLOCK_SOURCE_OSC16M;
   1b46a:	230c      	movs	r3, #12
   1b46c:	18fb      	adds	r3, r7, r3
   1b46e:	2206      	movs	r2, #6
   1b470:	701a      	strb	r2, [r3, #0]
   1b472:	e003      	b.n	1b47c <clock_16M_source+0x38>
	}else{
		gclock_gen_conf.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
   1b474:	230c      	movs	r3, #12
   1b476:	18fb      	adds	r3, r7, r3
   1b478:	2203      	movs	r2, #3
   1b47a:	701a      	strb	r2, [r3, #0]
	}
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclock_gen_conf);
   1b47c:	230c      	movs	r3, #12
   1b47e:	18fb      	adds	r3, r7, r3
   1b480:	0019      	movs	r1, r3
   1b482:	2000      	movs	r0, #0
   1b484:	4b05      	ldr	r3, [pc, #20]	; (1b49c <clock_16M_source+0x58>)
   1b486:	4798      	blx	r3
    system_gclk_gen_enable(GCLK_GENERATOR_0);
   1b488:	2000      	movs	r0, #0
   1b48a:	4b05      	ldr	r3, [pc, #20]	; (1b4a0 <clock_16M_source+0x5c>)
   1b48c:	4798      	blx	r3
	
}
   1b48e:	46c0      	nop			; (mov r8, r8)
   1b490:	46bd      	mov	sp, r7
   1b492:	b006      	add	sp, #24
   1b494:	bd80      	pop	{r7, pc}
   1b496:	46c0      	nop			; (mov r8, r8)
   1b498:	00016335 	.word	0x00016335
   1b49c:	00015d55 	.word	0x00015d55
   1b4a0:	00015e65 	.word	0x00015e65

0001b4a4 <getDefaultOptions>:

void getDefaultOptions(struct OPTIONS *optionptr){
   1b4a4:	b580      	push	{r7, lr}
   1b4a6:	b082      	sub	sp, #8
   1b4a8:	af00      	add	r7, sp, #0
   1b4aa:	6078      	str	r0, [r7, #4]
	
	optionptr->shot_delay = 0;//seconds
   1b4ac:	687b      	ldr	r3, [r7, #4]
   1b4ae:	2200      	movs	r2, #0
   1b4b0:	709a      	strb	r2, [r3, #2]
	optionptr->current_unit_temp = celsius;
   1b4b2:	687b      	ldr	r3, [r7, #4]
   1b4b4:	2204      	movs	r2, #4
   1b4b6:	705a      	strb	r2, [r3, #1]
	optionptr->current_unit_dist = meters;
   1b4b8:	687b      	ldr	r3, [r7, #4]
   1b4ba:	2201      	movs	r2, #1
   1b4bc:	701a      	strb	r2, [r3, #0]
	optionptr->chargeCurrent = 100;//mA
   1b4be:	687b      	ldr	r3, [r7, #4]
   1b4c0:	2264      	movs	r2, #100	; 0x64
   1b4c2:	605a      	str	r2, [r3, #4]
	optionptr->errorSensitivity = 1;
   1b4c4:	687b      	ldr	r3, [r7, #4]
   1b4c6:	22fe      	movs	r2, #254	; 0xfe
   1b4c8:	0592      	lsls	r2, r2, #22
   1b4ca:	609a      	str	r2, [r3, #8]
	//optionptr->backlight_setting.blue = 30;
	//optionptr->backlight_setting.green = 30;
	//optionptr->backlight_setting.red = 22;
	optionptr->backlight_setting.colorRef = 1;//white
   1b4cc:	687b      	ldr	r3, [r7, #4]
   1b4ce:	2201      	movs	r2, #1
   1b4d0:	749a      	strb	r2, [r3, #18]
	optionptr->backlight_setting.brightness = 3;
   1b4d2:	687b      	ldr	r3, [r7, #4]
   1b4d4:	2203      	movs	r2, #3
   1b4d6:	731a      	strb	r2, [r3, #12]
	optionptr->backlight_setting.maxColor = 30;
   1b4d8:	687b      	ldr	r3, [r7, #4]
   1b4da:	221e      	movs	r2, #30
   1b4dc:	741a      	strb	r2, [r3, #16]
	optionptr->backlight_setting.maxBrightness = 5;
   1b4de:	687b      	ldr	r3, [r7, #4]
   1b4e0:	2205      	movs	r2, #5
   1b4e2:	745a      	strb	r2, [r3, #17]
	
	optionptr->Settings_Initialized_Key = 0xC9;//  Indicator that settings have been initialized
   1b4e4:	687b      	ldr	r3, [r7, #4]
   1b4e6:	22c9      	movs	r2, #201	; 0xc9
   1b4e8:	74da      	strb	r2, [r3, #19]

	
}
   1b4ea:	46c0      	nop			; (mov r8, r8)
   1b4ec:	46bd      	mov	sp, r7
   1b4ee:	b002      	add	sp, #8
   1b4f0:	bd80      	pop	{r7, pc}
	...

0001b4f4 <cos>:
   1b4f4:	b530      	push	{r4, r5, lr}
   1b4f6:	4a20      	ldr	r2, [pc, #128]	; (1b578 <cos+0x84>)
   1b4f8:	004b      	lsls	r3, r1, #1
   1b4fa:	b087      	sub	sp, #28
   1b4fc:	085b      	lsrs	r3, r3, #1
   1b4fe:	4293      	cmp	r3, r2
   1b500:	dd1c      	ble.n	1b53c <cos+0x48>
   1b502:	4a1e      	ldr	r2, [pc, #120]	; (1b57c <cos+0x88>)
   1b504:	4293      	cmp	r3, r2
   1b506:	dd05      	ble.n	1b514 <cos+0x20>
   1b508:	0002      	movs	r2, r0
   1b50a:	000b      	movs	r3, r1
   1b50c:	f005 f860 	bl	205d0 <__aeabi_dsub>
   1b510:	b007      	add	sp, #28
   1b512:	bd30      	pop	{r4, r5, pc}
   1b514:	aa02      	add	r2, sp, #8
   1b516:	f001 f915 	bl	1c744 <__ieee754_rem_pio2>
   1b51a:	2303      	movs	r3, #3
   1b51c:	4018      	ands	r0, r3
   1b51e:	9a04      	ldr	r2, [sp, #16]
   1b520:	9b05      	ldr	r3, [sp, #20]
   1b522:	2801      	cmp	r0, #1
   1b524:	d018      	beq.n	1b558 <cos+0x64>
   1b526:	2802      	cmp	r0, #2
   1b528:	d00d      	beq.n	1b546 <cos+0x52>
   1b52a:	2800      	cmp	r0, #0
   1b52c:	d01e      	beq.n	1b56c <cos+0x78>
   1b52e:	9802      	ldr	r0, [sp, #8]
   1b530:	9903      	ldr	r1, [sp, #12]
   1b532:	2401      	movs	r4, #1
   1b534:	9400      	str	r4, [sp, #0]
   1b536:	f002 f993 	bl	1d860 <__kernel_sin>
   1b53a:	e7e9      	b.n	1b510 <cos+0x1c>
   1b53c:	2200      	movs	r2, #0
   1b53e:	2300      	movs	r3, #0
   1b540:	f001 fbf8 	bl	1cd34 <__kernel_cos>
   1b544:	e7e4      	b.n	1b510 <cos+0x1c>
   1b546:	9802      	ldr	r0, [sp, #8]
   1b548:	9903      	ldr	r1, [sp, #12]
   1b54a:	f001 fbf3 	bl	1cd34 <__kernel_cos>
   1b54e:	2380      	movs	r3, #128	; 0x80
   1b550:	061b      	lsls	r3, r3, #24
   1b552:	469c      	mov	ip, r3
   1b554:	4461      	add	r1, ip
   1b556:	e7db      	b.n	1b510 <cos+0x1c>
   1b558:	9000      	str	r0, [sp, #0]
   1b55a:	9802      	ldr	r0, [sp, #8]
   1b55c:	9903      	ldr	r1, [sp, #12]
   1b55e:	f002 f97f 	bl	1d860 <__kernel_sin>
   1b562:	2380      	movs	r3, #128	; 0x80
   1b564:	061b      	lsls	r3, r3, #24
   1b566:	469c      	mov	ip, r3
   1b568:	4461      	add	r1, ip
   1b56a:	e7d1      	b.n	1b510 <cos+0x1c>
   1b56c:	9802      	ldr	r0, [sp, #8]
   1b56e:	9903      	ldr	r1, [sp, #12]
   1b570:	f001 fbe0 	bl	1cd34 <__kernel_cos>
   1b574:	e7cc      	b.n	1b510 <cos+0x1c>
   1b576:	46c0      	nop			; (mov r8, r8)
   1b578:	3fe921fb 	.word	0x3fe921fb
   1b57c:	7fefffff 	.word	0x7fefffff

0001b580 <floor>:
   1b580:	4a45      	ldr	r2, [pc, #276]	; (1b698 <floor+0x118>)
   1b582:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b584:	4657      	mov	r7, sl
   1b586:	4692      	mov	sl, r2
   1b588:	004b      	lsls	r3, r1, #1
   1b58a:	0d5b      	lsrs	r3, r3, #21
   1b58c:	449a      	add	sl, r3
   1b58e:	464e      	mov	r6, r9
   1b590:	4645      	mov	r5, r8
   1b592:	46de      	mov	lr, fp
   1b594:	4652      	mov	r2, sl
   1b596:	b5e0      	push	{r5, r6, r7, lr}
   1b598:	000c      	movs	r4, r1
   1b59a:	0005      	movs	r5, r0
   1b59c:	000e      	movs	r6, r1
   1b59e:	4689      	mov	r9, r1
   1b5a0:	0007      	movs	r7, r0
   1b5a2:	2a13      	cmp	r2, #19
   1b5a4:	dc22      	bgt.n	1b5ec <floor+0x6c>
   1b5a6:	2a00      	cmp	r2, #0
   1b5a8:	db47      	blt.n	1b63a <floor+0xba>
   1b5aa:	4652      	mov	r2, sl
   1b5ac:	4b3b      	ldr	r3, [pc, #236]	; (1b69c <floor+0x11c>)
   1b5ae:	4113      	asrs	r3, r2
   1b5b0:	4698      	mov	r8, r3
   1b5b2:	000b      	movs	r3, r1
   1b5b4:	4642      	mov	r2, r8
   1b5b6:	4013      	ands	r3, r2
   1b5b8:	4303      	orrs	r3, r0
   1b5ba:	d011      	beq.n	1b5e0 <floor+0x60>
   1b5bc:	4a38      	ldr	r2, [pc, #224]	; (1b6a0 <floor+0x120>)
   1b5be:	4b39      	ldr	r3, [pc, #228]	; (1b6a4 <floor+0x124>)
   1b5c0:	f003 fe42 	bl	1f248 <__aeabi_dadd>
   1b5c4:	2200      	movs	r2, #0
   1b5c6:	2300      	movs	r3, #0
   1b5c8:	f002 fe5e 	bl	1e288 <__aeabi_dcmpgt>
   1b5cc:	2800      	cmp	r0, #0
   1b5ce:	d005      	beq.n	1b5dc <floor+0x5c>
   1b5d0:	2c00      	cmp	r4, #0
   1b5d2:	db41      	blt.n	1b658 <floor+0xd8>
   1b5d4:	464e      	mov	r6, r9
   1b5d6:	4643      	mov	r3, r8
   1b5d8:	2700      	movs	r7, #0
   1b5da:	439e      	bics	r6, r3
   1b5dc:	0038      	movs	r0, r7
   1b5de:	0031      	movs	r1, r6
   1b5e0:	bc3c      	pop	{r2, r3, r4, r5}
   1b5e2:	4690      	mov	r8, r2
   1b5e4:	4699      	mov	r9, r3
   1b5e6:	46a2      	mov	sl, r4
   1b5e8:	46ab      	mov	fp, r5
   1b5ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b5ec:	4652      	mov	r2, sl
   1b5ee:	2a33      	cmp	r2, #51	; 0x33
   1b5f0:	dd08      	ble.n	1b604 <floor+0x84>
   1b5f2:	2380      	movs	r3, #128	; 0x80
   1b5f4:	00db      	lsls	r3, r3, #3
   1b5f6:	459a      	cmp	sl, r3
   1b5f8:	d1f2      	bne.n	1b5e0 <floor+0x60>
   1b5fa:	0002      	movs	r2, r0
   1b5fc:	000b      	movs	r3, r1
   1b5fe:	f003 fe23 	bl	1f248 <__aeabi_dadd>
   1b602:	e7ed      	b.n	1b5e0 <floor+0x60>
   1b604:	4a28      	ldr	r2, [pc, #160]	; (1b6a8 <floor+0x128>)
   1b606:	4694      	mov	ip, r2
   1b608:	2201      	movs	r2, #1
   1b60a:	4463      	add	r3, ip
   1b60c:	4252      	negs	r2, r2
   1b60e:	40da      	lsrs	r2, r3
   1b610:	4693      	mov	fp, r2
   1b612:	4202      	tst	r2, r0
   1b614:	d0e4      	beq.n	1b5e0 <floor+0x60>
   1b616:	4a22      	ldr	r2, [pc, #136]	; (1b6a0 <floor+0x120>)
   1b618:	4b22      	ldr	r3, [pc, #136]	; (1b6a4 <floor+0x124>)
   1b61a:	f003 fe15 	bl	1f248 <__aeabi_dadd>
   1b61e:	2200      	movs	r2, #0
   1b620:	2300      	movs	r3, #0
   1b622:	f002 fe31 	bl	1e288 <__aeabi_dcmpgt>
   1b626:	2800      	cmp	r0, #0
   1b628:	d0d8      	beq.n	1b5dc <floor+0x5c>
   1b62a:	2c00      	cmp	r4, #0
   1b62c:	db1a      	blt.n	1b664 <floor+0xe4>
   1b62e:	465b      	mov	r3, fp
   1b630:	464e      	mov	r6, r9
   1b632:	439f      	bics	r7, r3
   1b634:	0038      	movs	r0, r7
   1b636:	0031      	movs	r1, r6
   1b638:	e7d2      	b.n	1b5e0 <floor+0x60>
   1b63a:	4a19      	ldr	r2, [pc, #100]	; (1b6a0 <floor+0x120>)
   1b63c:	4b19      	ldr	r3, [pc, #100]	; (1b6a4 <floor+0x124>)
   1b63e:	f003 fe03 	bl	1f248 <__aeabi_dadd>
   1b642:	2200      	movs	r2, #0
   1b644:	2300      	movs	r3, #0
   1b646:	f002 fe1f 	bl	1e288 <__aeabi_dcmpgt>
   1b64a:	2800      	cmp	r0, #0
   1b64c:	d0c6      	beq.n	1b5dc <floor+0x5c>
   1b64e:	2c00      	cmp	r4, #0
   1b650:	db16      	blt.n	1b680 <floor+0x100>
   1b652:	2700      	movs	r7, #0
   1b654:	2600      	movs	r6, #0
   1b656:	e7c1      	b.n	1b5dc <floor+0x5c>
   1b658:	2380      	movs	r3, #128	; 0x80
   1b65a:	4652      	mov	r2, sl
   1b65c:	035b      	lsls	r3, r3, #13
   1b65e:	4113      	asrs	r3, r2
   1b660:	4499      	add	r9, r3
   1b662:	e7b7      	b.n	1b5d4 <floor+0x54>
   1b664:	4653      	mov	r3, sl
   1b666:	2b14      	cmp	r3, #20
   1b668:	d012      	beq.n	1b690 <floor+0x110>
   1b66a:	2334      	movs	r3, #52	; 0x34
   1b66c:	4652      	mov	r2, sl
   1b66e:	2701      	movs	r7, #1
   1b670:	1a9b      	subs	r3, r3, r2
   1b672:	409f      	lsls	r7, r3
   1b674:	197f      	adds	r7, r7, r5
   1b676:	42af      	cmp	r7, r5
   1b678:	419b      	sbcs	r3, r3
   1b67a:	425b      	negs	r3, r3
   1b67c:	4499      	add	r9, r3
   1b67e:	e7d6      	b.n	1b62e <floor+0xae>
   1b680:	0064      	lsls	r4, r4, #1
   1b682:	0864      	lsrs	r4, r4, #1
   1b684:	4325      	orrs	r5, r4
   1b686:	2700      	movs	r7, #0
   1b688:	2d00      	cmp	r5, #0
   1b68a:	d0a7      	beq.n	1b5dc <floor+0x5c>
   1b68c:	4e07      	ldr	r6, [pc, #28]	; (1b6ac <floor+0x12c>)
   1b68e:	e7a5      	b.n	1b5dc <floor+0x5c>
   1b690:	3b13      	subs	r3, #19
   1b692:	469c      	mov	ip, r3
   1b694:	44e1      	add	r9, ip
   1b696:	e7ca      	b.n	1b62e <floor+0xae>
   1b698:	fffffc01 	.word	0xfffffc01
   1b69c:	000fffff 	.word	0x000fffff
   1b6a0:	8800759c 	.word	0x8800759c
   1b6a4:	7e37e43c 	.word	0x7e37e43c
   1b6a8:	fffffbed 	.word	0xfffffbed
   1b6ac:	bff00000 	.word	0xbff00000

0001b6b0 <sin>:
   1b6b0:	b530      	push	{r4, r5, lr}
   1b6b2:	4a21      	ldr	r2, [pc, #132]	; (1b738 <sin+0x88>)
   1b6b4:	004b      	lsls	r3, r1, #1
   1b6b6:	b087      	sub	sp, #28
   1b6b8:	085b      	lsrs	r3, r3, #1
   1b6ba:	4293      	cmp	r3, r2
   1b6bc:	dd1e      	ble.n	1b6fc <sin+0x4c>
   1b6be:	4a1f      	ldr	r2, [pc, #124]	; (1b73c <sin+0x8c>)
   1b6c0:	4293      	cmp	r3, r2
   1b6c2:	dd05      	ble.n	1b6d0 <sin+0x20>
   1b6c4:	0002      	movs	r2, r0
   1b6c6:	000b      	movs	r3, r1
   1b6c8:	f004 ff82 	bl	205d0 <__aeabi_dsub>
   1b6cc:	b007      	add	sp, #28
   1b6ce:	bd30      	pop	{r4, r5, pc}
   1b6d0:	aa02      	add	r2, sp, #8
   1b6d2:	f001 f837 	bl	1c744 <__ieee754_rem_pio2>
   1b6d6:	2303      	movs	r3, #3
   1b6d8:	4018      	ands	r0, r3
   1b6da:	9a04      	ldr	r2, [sp, #16]
   1b6dc:	9b05      	ldr	r3, [sp, #20]
   1b6de:	2801      	cmp	r0, #1
   1b6e0:	d01e      	beq.n	1b720 <sin+0x70>
   1b6e2:	2802      	cmp	r0, #2
   1b6e4:	d011      	beq.n	1b70a <sin+0x5a>
   1b6e6:	2800      	cmp	r0, #0
   1b6e8:	d01f      	beq.n	1b72a <sin+0x7a>
   1b6ea:	9802      	ldr	r0, [sp, #8]
   1b6ec:	9903      	ldr	r1, [sp, #12]
   1b6ee:	f001 fb21 	bl	1cd34 <__kernel_cos>
   1b6f2:	2380      	movs	r3, #128	; 0x80
   1b6f4:	061b      	lsls	r3, r3, #24
   1b6f6:	469c      	mov	ip, r3
   1b6f8:	4461      	add	r1, ip
   1b6fa:	e7e7      	b.n	1b6cc <sin+0x1c>
   1b6fc:	2300      	movs	r3, #0
   1b6fe:	2200      	movs	r2, #0
   1b700:	9300      	str	r3, [sp, #0]
   1b702:	2300      	movs	r3, #0
   1b704:	f002 f8ac 	bl	1d860 <__kernel_sin>
   1b708:	e7e0      	b.n	1b6cc <sin+0x1c>
   1b70a:	2401      	movs	r4, #1
   1b70c:	9802      	ldr	r0, [sp, #8]
   1b70e:	9903      	ldr	r1, [sp, #12]
   1b710:	9400      	str	r4, [sp, #0]
   1b712:	f002 f8a5 	bl	1d860 <__kernel_sin>
   1b716:	2380      	movs	r3, #128	; 0x80
   1b718:	061b      	lsls	r3, r3, #24
   1b71a:	469c      	mov	ip, r3
   1b71c:	4461      	add	r1, ip
   1b71e:	e7d5      	b.n	1b6cc <sin+0x1c>
   1b720:	9802      	ldr	r0, [sp, #8]
   1b722:	9903      	ldr	r1, [sp, #12]
   1b724:	f001 fb06 	bl	1cd34 <__kernel_cos>
   1b728:	e7d0      	b.n	1b6cc <sin+0x1c>
   1b72a:	2401      	movs	r4, #1
   1b72c:	9802      	ldr	r0, [sp, #8]
   1b72e:	9903      	ldr	r1, [sp, #12]
   1b730:	9400      	str	r4, [sp, #0]
   1b732:	f002 f895 	bl	1d860 <__kernel_sin>
   1b736:	e7c9      	b.n	1b6cc <sin+0x1c>
   1b738:	3fe921fb 	.word	0x3fe921fb
   1b73c:	7fefffff 	.word	0x7fefffff

0001b740 <atan2>:
   1b740:	b510      	push	{r4, lr}
   1b742:	f000 fa0d 	bl	1bb60 <__ieee754_atan2>
   1b746:	bd10      	pop	{r4, pc}

0001b748 <pow>:
   1b748:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b74a:	4657      	mov	r7, sl
   1b74c:	464e      	mov	r6, r9
   1b74e:	46de      	mov	lr, fp
   1b750:	4645      	mov	r5, r8
   1b752:	b5e0      	push	{r5, r6, r7, lr}
   1b754:	b08f      	sub	sp, #60	; 0x3c
   1b756:	001d      	movs	r5, r3
   1b758:	0006      	movs	r6, r0
   1b75a:	000f      	movs	r7, r1
   1b75c:	0014      	movs	r4, r2
   1b75e:	f000 fabb 	bl	1bcd8 <__ieee754_pow>
   1b762:	4bc7      	ldr	r3, [pc, #796]	; (1ba80 <pow+0x338>)
   1b764:	9000      	str	r0, [sp, #0]
   1b766:	9101      	str	r1, [sp, #4]
   1b768:	469a      	mov	sl, r3
   1b76a:	781b      	ldrb	r3, [r3, #0]
   1b76c:	b25b      	sxtb	r3, r3
   1b76e:	4699      	mov	r9, r3
   1b770:	3301      	adds	r3, #1
   1b772:	d03e      	beq.n	1b7f2 <pow+0xaa>
   1b774:	0022      	movs	r2, r4
   1b776:	002b      	movs	r3, r5
   1b778:	0020      	movs	r0, r4
   1b77a:	0029      	movs	r1, r5
   1b77c:	f005 fa3e 	bl	20bfc <__aeabi_dcmpun>
   1b780:	4683      	mov	fp, r0
   1b782:	2800      	cmp	r0, #0
   1b784:	d135      	bne.n	1b7f2 <pow+0xaa>
   1b786:	0032      	movs	r2, r6
   1b788:	003b      	movs	r3, r7
   1b78a:	0030      	movs	r0, r6
   1b78c:	0039      	movs	r1, r7
   1b78e:	f005 fa35 	bl	20bfc <__aeabi_dcmpun>
   1b792:	2200      	movs	r2, #0
   1b794:	9003      	str	r0, [sp, #12]
   1b796:	2800      	cmp	r0, #0
   1b798:	d000      	beq.n	1b79c <pow+0x54>
   1b79a:	e0b6      	b.n	1b90a <pow+0x1c2>
   1b79c:	2300      	movs	r3, #0
   1b79e:	0030      	movs	r0, r6
   1b7a0:	0039      	movs	r1, r7
   1b7a2:	f002 fd57 	bl	1e254 <__aeabi_dcmpeq>
   1b7a6:	2800      	cmp	r0, #0
   1b7a8:	d02c      	beq.n	1b804 <pow+0xbc>
   1b7aa:	2200      	movs	r2, #0
   1b7ac:	2300      	movs	r3, #0
   1b7ae:	0020      	movs	r0, r4
   1b7b0:	0029      	movs	r1, r5
   1b7b2:	f002 fd4f 	bl	1e254 <__aeabi_dcmpeq>
   1b7b6:	4683      	mov	fp, r0
   1b7b8:	2800      	cmp	r0, #0
   1b7ba:	d100      	bne.n	1b7be <pow+0x76>
   1b7bc:	e077      	b.n	1b8ae <pow+0x166>
   1b7be:	ab04      	add	r3, sp, #16
   1b7c0:	4698      	mov	r8, r3
   1b7c2:	2301      	movs	r3, #1
   1b7c4:	4642      	mov	r2, r8
   1b7c6:	9304      	str	r3, [sp, #16]
   1b7c8:	4bae      	ldr	r3, [pc, #696]	; (1ba84 <pow+0x33c>)
   1b7ca:	6053      	str	r3, [r2, #4]
   1b7cc:	4643      	mov	r3, r8
   1b7ce:	9a03      	ldr	r2, [sp, #12]
   1b7d0:	611c      	str	r4, [r3, #16]
   1b7d2:	615d      	str	r5, [r3, #20]
   1b7d4:	621a      	str	r2, [r3, #32]
   1b7d6:	609e      	str	r6, [r3, #8]
   1b7d8:	60df      	str	r7, [r3, #12]
   1b7da:	4642      	mov	r2, r8
   1b7dc:	2300      	movs	r3, #0
   1b7de:	2400      	movs	r4, #0
   1b7e0:	6193      	str	r3, [r2, #24]
   1b7e2:	61d4      	str	r4, [r2, #28]
   1b7e4:	464b      	mov	r3, r9
   1b7e6:	2b00      	cmp	r3, #0
   1b7e8:	d04d      	beq.n	1b886 <pow+0x13e>
   1b7ea:	2300      	movs	r3, #0
   1b7ec:	4ca6      	ldr	r4, [pc, #664]	; (1ba88 <pow+0x340>)
   1b7ee:	9300      	str	r3, [sp, #0]
   1b7f0:	9401      	str	r4, [sp, #4]
   1b7f2:	9800      	ldr	r0, [sp, #0]
   1b7f4:	9901      	ldr	r1, [sp, #4]
   1b7f6:	b00f      	add	sp, #60	; 0x3c
   1b7f8:	bc3c      	pop	{r2, r3, r4, r5}
   1b7fa:	4690      	mov	r8, r2
   1b7fc:	4699      	mov	r9, r3
   1b7fe:	46a2      	mov	sl, r4
   1b800:	46ab      	mov	fp, r5
   1b802:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b804:	9800      	ldr	r0, [sp, #0]
   1b806:	9901      	ldr	r1, [sp, #4]
   1b808:	f002 fa7a 	bl	1dd00 <finite>
   1b80c:	4681      	mov	r9, r0
   1b80e:	2800      	cmp	r0, #0
   1b810:	d100      	bne.n	1b814 <pow+0xcc>
   1b812:	e09b      	b.n	1b94c <pow+0x204>
   1b814:	9800      	ldr	r0, [sp, #0]
   1b816:	9901      	ldr	r1, [sp, #4]
   1b818:	2200      	movs	r2, #0
   1b81a:	2300      	movs	r3, #0
   1b81c:	f002 fd1a 	bl	1e254 <__aeabi_dcmpeq>
   1b820:	2800      	cmp	r0, #0
   1b822:	d0e6      	beq.n	1b7f2 <pow+0xaa>
   1b824:	0030      	movs	r0, r6
   1b826:	0039      	movs	r1, r7
   1b828:	f002 fa6a 	bl	1dd00 <finite>
   1b82c:	2800      	cmp	r0, #0
   1b82e:	d0e0      	beq.n	1b7f2 <pow+0xaa>
   1b830:	0020      	movs	r0, r4
   1b832:	0029      	movs	r1, r5
   1b834:	f002 fa64 	bl	1dd00 <finite>
   1b838:	2800      	cmp	r0, #0
   1b83a:	d0da      	beq.n	1b7f2 <pow+0xaa>
   1b83c:	ab04      	add	r3, sp, #16
   1b83e:	4698      	mov	r8, r3
   1b840:	2304      	movs	r3, #4
   1b842:	4642      	mov	r2, r8
   1b844:	9304      	str	r3, [sp, #16]
   1b846:	4b8f      	ldr	r3, [pc, #572]	; (1ba84 <pow+0x33c>)
   1b848:	6114      	str	r4, [r2, #16]
   1b84a:	6155      	str	r5, [r2, #20]
   1b84c:	6053      	str	r3, [r2, #4]
   1b84e:	2300      	movs	r3, #0
   1b850:	2400      	movs	r4, #0
   1b852:	6213      	str	r3, [r2, #32]
   1b854:	2300      	movs	r3, #0
   1b856:	6193      	str	r3, [r2, #24]
   1b858:	61d4      	str	r4, [r2, #28]
   1b85a:	4653      	mov	r3, sl
   1b85c:	781b      	ldrb	r3, [r3, #0]
   1b85e:	6096      	str	r6, [r2, #8]
   1b860:	60d7      	str	r7, [r2, #12]
   1b862:	b25b      	sxtb	r3, r3
   1b864:	2b02      	cmp	r3, #2
   1b866:	d004      	beq.n	1b872 <pow+0x12a>
   1b868:	4640      	mov	r0, r8
   1b86a:	f002 fa53 	bl	1dd14 <matherr>
   1b86e:	2800      	cmp	r0, #0
   1b870:	d10e      	bne.n	1b890 <pow+0x148>
   1b872:	f005 fb6d 	bl	20f50 <__errno>
   1b876:	2322      	movs	r3, #34	; 0x22
   1b878:	6003      	str	r3, [r0, #0]
   1b87a:	e009      	b.n	1b890 <pow+0x148>
   1b87c:	4642      	mov	r2, r8
   1b87e:	2300      	movs	r3, #0
   1b880:	2400      	movs	r4, #0
   1b882:	6193      	str	r3, [r2, #24]
   1b884:	61d4      	str	r4, [r2, #28]
   1b886:	4640      	mov	r0, r8
   1b888:	f002 fa44 	bl	1dd14 <matherr>
   1b88c:	2800      	cmp	r0, #0
   1b88e:	d037      	beq.n	1b900 <pow+0x1b8>
   1b890:	4643      	mov	r3, r8
   1b892:	6a1b      	ldr	r3, [r3, #32]
   1b894:	2b00      	cmp	r3, #0
   1b896:	d004      	beq.n	1b8a2 <pow+0x15a>
   1b898:	f005 fb5a 	bl	20f50 <__errno>
   1b89c:	4643      	mov	r3, r8
   1b89e:	6a1b      	ldr	r3, [r3, #32]
   1b8a0:	6003      	str	r3, [r0, #0]
   1b8a2:	4643      	mov	r3, r8
   1b8a4:	69dc      	ldr	r4, [r3, #28]
   1b8a6:	699b      	ldr	r3, [r3, #24]
   1b8a8:	9300      	str	r3, [sp, #0]
   1b8aa:	9401      	str	r4, [sp, #4]
   1b8ac:	e7a1      	b.n	1b7f2 <pow+0xaa>
   1b8ae:	0020      	movs	r0, r4
   1b8b0:	0029      	movs	r1, r5
   1b8b2:	f002 fa25 	bl	1dd00 <finite>
   1b8b6:	2800      	cmp	r0, #0
   1b8b8:	d09b      	beq.n	1b7f2 <pow+0xaa>
   1b8ba:	2200      	movs	r2, #0
   1b8bc:	2300      	movs	r3, #0
   1b8be:	0020      	movs	r0, r4
   1b8c0:	0029      	movs	r1, r5
   1b8c2:	f002 fccd 	bl	1e260 <__aeabi_dcmplt>
   1b8c6:	2800      	cmp	r0, #0
   1b8c8:	d100      	bne.n	1b8cc <pow+0x184>
   1b8ca:	e792      	b.n	1b7f2 <pow+0xaa>
   1b8cc:	ab04      	add	r3, sp, #16
   1b8ce:	4698      	mov	r8, r3
   1b8d0:	2301      	movs	r3, #1
   1b8d2:	4642      	mov	r2, r8
   1b8d4:	9304      	str	r3, [sp, #16]
   1b8d6:	4b6b      	ldr	r3, [pc, #428]	; (1ba84 <pow+0x33c>)
   1b8d8:	6053      	str	r3, [r2, #4]
   1b8da:	4643      	mov	r3, r8
   1b8dc:	465a      	mov	r2, fp
   1b8de:	609e      	str	r6, [r3, #8]
   1b8e0:	60df      	str	r7, [r3, #12]
   1b8e2:	621a      	str	r2, [r3, #32]
   1b8e4:	611c      	str	r4, [r3, #16]
   1b8e6:	615d      	str	r5, [r3, #20]
   1b8e8:	4653      	mov	r3, sl
   1b8ea:	781b      	ldrb	r3, [r3, #0]
   1b8ec:	b25b      	sxtb	r3, r3
   1b8ee:	2b00      	cmp	r3, #0
   1b8f0:	d0c4      	beq.n	1b87c <pow+0x134>
   1b8f2:	2000      	movs	r0, #0
   1b8f4:	4642      	mov	r2, r8
   1b8f6:	4965      	ldr	r1, [pc, #404]	; (1ba8c <pow+0x344>)
   1b8f8:	6190      	str	r0, [r2, #24]
   1b8fa:	61d1      	str	r1, [r2, #28]
   1b8fc:	2b02      	cmp	r3, #2
   1b8fe:	d1c2      	bne.n	1b886 <pow+0x13e>
   1b900:	f005 fb26 	bl	20f50 <__errno>
   1b904:	2321      	movs	r3, #33	; 0x21
   1b906:	6003      	str	r3, [r0, #0]
   1b908:	e7c2      	b.n	1b890 <pow+0x148>
   1b90a:	2300      	movs	r3, #0
   1b90c:	0020      	movs	r0, r4
   1b90e:	0029      	movs	r1, r5
   1b910:	f002 fca0 	bl	1e254 <__aeabi_dcmpeq>
   1b914:	2800      	cmp	r0, #0
   1b916:	d100      	bne.n	1b91a <pow+0x1d2>
   1b918:	e76b      	b.n	1b7f2 <pow+0xaa>
   1b91a:	ab04      	add	r3, sp, #16
   1b91c:	4698      	mov	r8, r3
   1b91e:	2301      	movs	r3, #1
   1b920:	4642      	mov	r2, r8
   1b922:	9304      	str	r3, [sp, #16]
   1b924:	4b57      	ldr	r3, [pc, #348]	; (1ba84 <pow+0x33c>)
   1b926:	4641      	mov	r1, r8
   1b928:	6053      	str	r3, [r2, #4]
   1b92a:	4643      	mov	r3, r8
   1b92c:	465a      	mov	r2, fp
   1b92e:	621a      	str	r2, [r3, #32]
   1b930:	2200      	movs	r2, #0
   1b932:	609e      	str	r6, [r3, #8]
   1b934:	60df      	str	r7, [r3, #12]
   1b936:	611c      	str	r4, [r3, #16]
   1b938:	615d      	str	r5, [r3, #20]
   1b93a:	4b53      	ldr	r3, [pc, #332]	; (1ba88 <pow+0x340>)
   1b93c:	618a      	str	r2, [r1, #24]
   1b93e:	61cb      	str	r3, [r1, #28]
   1b940:	9200      	str	r2, [sp, #0]
   1b942:	9301      	str	r3, [sp, #4]
   1b944:	464b      	mov	r3, r9
   1b946:	2b02      	cmp	r3, #2
   1b948:	d19d      	bne.n	1b886 <pow+0x13e>
   1b94a:	e752      	b.n	1b7f2 <pow+0xaa>
   1b94c:	0030      	movs	r0, r6
   1b94e:	0039      	movs	r1, r7
   1b950:	f002 f9d6 	bl	1dd00 <finite>
   1b954:	2800      	cmp	r0, #0
   1b956:	d100      	bne.n	1b95a <pow+0x212>
   1b958:	e75c      	b.n	1b814 <pow+0xcc>
   1b95a:	0020      	movs	r0, r4
   1b95c:	0029      	movs	r1, r5
   1b95e:	f002 f9cf 	bl	1dd00 <finite>
   1b962:	2800      	cmp	r0, #0
   1b964:	d100      	bne.n	1b968 <pow+0x220>
   1b966:	e755      	b.n	1b814 <pow+0xcc>
   1b968:	9800      	ldr	r0, [sp, #0]
   1b96a:	9901      	ldr	r1, [sp, #4]
   1b96c:	000b      	movs	r3, r1
   1b96e:	0002      	movs	r2, r0
   1b970:	f005 f944 	bl	20bfc <__aeabi_dcmpun>
   1b974:	ab04      	add	r3, sp, #16
   1b976:	4698      	mov	r8, r3
   1b978:	2800      	cmp	r0, #0
   1b97a:	d161      	bne.n	1ba40 <pow+0x2f8>
   1b97c:	2303      	movs	r3, #3
   1b97e:	4642      	mov	r2, r8
   1b980:	9304      	str	r3, [sp, #16]
   1b982:	4b40      	ldr	r3, [pc, #256]	; (1ba84 <pow+0x33c>)
   1b984:	6210      	str	r0, [r2, #32]
   1b986:	6053      	str	r3, [r2, #4]
   1b988:	4653      	mov	r3, sl
   1b98a:	781b      	ldrb	r3, [r3, #0]
   1b98c:	6096      	str	r6, [r2, #8]
   1b98e:	60d7      	str	r7, [r2, #12]
   1b990:	b25b      	sxtb	r3, r3
   1b992:	6114      	str	r4, [r2, #16]
   1b994:	6155      	str	r5, [r2, #20]
   1b996:	4699      	mov	r9, r3
   1b998:	2b00      	cmp	r3, #0
   1b99a:	d12f      	bne.n	1b9fc <pow+0x2b4>
   1b99c:	22e0      	movs	r2, #224	; 0xe0
   1b99e:	4641      	mov	r1, r8
   1b9a0:	4b3b      	ldr	r3, [pc, #236]	; (1ba90 <pow+0x348>)
   1b9a2:	0612      	lsls	r2, r2, #24
   1b9a4:	618a      	str	r2, [r1, #24]
   1b9a6:	61cb      	str	r3, [r1, #28]
   1b9a8:	0030      	movs	r0, r6
   1b9aa:	2200      	movs	r2, #0
   1b9ac:	2300      	movs	r3, #0
   1b9ae:	0039      	movs	r1, r7
   1b9b0:	f002 fc56 	bl	1e260 <__aeabi_dcmplt>
   1b9b4:	2800      	cmp	r0, #0
   1b9b6:	d100      	bne.n	1b9ba <pow+0x272>
   1b9b8:	e756      	b.n	1b868 <pow+0x120>
   1b9ba:	2200      	movs	r2, #0
   1b9bc:	4b35      	ldr	r3, [pc, #212]	; (1ba94 <pow+0x34c>)
   1b9be:	0020      	movs	r0, r4
   1b9c0:	0029      	movs	r1, r5
   1b9c2:	f004 fb85 	bl	200d0 <__aeabi_dmul>
   1b9c6:	0004      	movs	r4, r0
   1b9c8:	000d      	movs	r5, r1
   1b9ca:	f002 f9ab 	bl	1dd24 <rint>
   1b9ce:	0002      	movs	r2, r0
   1b9d0:	000b      	movs	r3, r1
   1b9d2:	0020      	movs	r0, r4
   1b9d4:	0029      	movs	r1, r5
   1b9d6:	f002 fc3d 	bl	1e254 <__aeabi_dcmpeq>
   1b9da:	2800      	cmp	r0, #0
   1b9dc:	d105      	bne.n	1b9ea <pow+0x2a2>
   1b9de:	22e0      	movs	r2, #224	; 0xe0
   1b9e0:	4b2d      	ldr	r3, [pc, #180]	; (1ba98 <pow+0x350>)
   1b9e2:	0612      	lsls	r2, r2, #24
   1b9e4:	4641      	mov	r1, r8
   1b9e6:	618a      	str	r2, [r1, #24]
   1b9e8:	61cb      	str	r3, [r1, #28]
   1b9ea:	4653      	mov	r3, sl
   1b9ec:	781b      	ldrb	r3, [r3, #0]
   1b9ee:	b25b      	sxtb	r3, r3
   1b9f0:	4699      	mov	r9, r3
   1b9f2:	464b      	mov	r3, r9
   1b9f4:	2b02      	cmp	r3, #2
   1b9f6:	d000      	beq.n	1b9fa <pow+0x2b2>
   1b9f8:	e736      	b.n	1b868 <pow+0x120>
   1b9fa:	e73a      	b.n	1b872 <pow+0x12a>
   1b9fc:	2200      	movs	r2, #0
   1b9fe:	4641      	mov	r1, r8
   1ba00:	4b26      	ldr	r3, [pc, #152]	; (1ba9c <pow+0x354>)
   1ba02:	0030      	movs	r0, r6
   1ba04:	618a      	str	r2, [r1, #24]
   1ba06:	61cb      	str	r3, [r1, #28]
   1ba08:	2200      	movs	r2, #0
   1ba0a:	2300      	movs	r3, #0
   1ba0c:	0039      	movs	r1, r7
   1ba0e:	f002 fc27 	bl	1e260 <__aeabi_dcmplt>
   1ba12:	2800      	cmp	r0, #0
   1ba14:	d0ed      	beq.n	1b9f2 <pow+0x2aa>
   1ba16:	2200      	movs	r2, #0
   1ba18:	4b1e      	ldr	r3, [pc, #120]	; (1ba94 <pow+0x34c>)
   1ba1a:	0020      	movs	r0, r4
   1ba1c:	0029      	movs	r1, r5
   1ba1e:	f004 fb57 	bl	200d0 <__aeabi_dmul>
   1ba22:	0004      	movs	r4, r0
   1ba24:	000d      	movs	r5, r1
   1ba26:	f002 f97d 	bl	1dd24 <rint>
   1ba2a:	0002      	movs	r2, r0
   1ba2c:	000b      	movs	r3, r1
   1ba2e:	0020      	movs	r0, r4
   1ba30:	0029      	movs	r1, r5
   1ba32:	f002 fc0f 	bl	1e254 <__aeabi_dcmpeq>
   1ba36:	2800      	cmp	r0, #0
   1ba38:	d1d7      	bne.n	1b9ea <pow+0x2a2>
   1ba3a:	2200      	movs	r2, #0
   1ba3c:	4b13      	ldr	r3, [pc, #76]	; (1ba8c <pow+0x344>)
   1ba3e:	e7d1      	b.n	1b9e4 <pow+0x29c>
   1ba40:	2301      	movs	r3, #1
   1ba42:	4642      	mov	r2, r8
   1ba44:	9304      	str	r3, [sp, #16]
   1ba46:	4b0f      	ldr	r3, [pc, #60]	; (1ba84 <pow+0x33c>)
   1ba48:	6053      	str	r3, [r2, #4]
   1ba4a:	4643      	mov	r3, r8
   1ba4c:	464a      	mov	r2, r9
   1ba4e:	611c      	str	r4, [r3, #16]
   1ba50:	615d      	str	r5, [r3, #20]
   1ba52:	621a      	str	r2, [r3, #32]
   1ba54:	609e      	str	r6, [r3, #8]
   1ba56:	60df      	str	r7, [r3, #12]
   1ba58:	2400      	movs	r4, #0
   1ba5a:	4653      	mov	r3, sl
   1ba5c:	571c      	ldrsb	r4, [r3, r4]
   1ba5e:	2c00      	cmp	r4, #0
   1ba60:	d100      	bne.n	1ba64 <pow+0x31c>
   1ba62:	e70b      	b.n	1b87c <pow+0x134>
   1ba64:	2300      	movs	r3, #0
   1ba66:	2200      	movs	r2, #0
   1ba68:	0019      	movs	r1, r3
   1ba6a:	0010      	movs	r0, r2
   1ba6c:	f003 fefc 	bl	1f868 <__aeabi_ddiv>
   1ba70:	4643      	mov	r3, r8
   1ba72:	6198      	str	r0, [r3, #24]
   1ba74:	61d9      	str	r1, [r3, #28]
   1ba76:	2c02      	cmp	r4, #2
   1ba78:	d100      	bne.n	1ba7c <pow+0x334>
   1ba7a:	e741      	b.n	1b900 <pow+0x1b8>
   1ba7c:	e703      	b.n	1b886 <pow+0x13e>
   1ba7e:	46c0      	nop			; (mov r8, r8)
   1ba80:	200002c8 	.word	0x200002c8
   1ba84:	00026b58 	.word	0x00026b58
   1ba88:	3ff00000 	.word	0x3ff00000
   1ba8c:	fff00000 	.word	0xfff00000
   1ba90:	47efffff 	.word	0x47efffff
   1ba94:	3fe00000 	.word	0x3fe00000
   1ba98:	c7efffff 	.word	0xc7efffff
   1ba9c:	7ff00000 	.word	0x7ff00000

0001baa0 <sqrt>:
   1baa0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1baa2:	4647      	mov	r7, r8
   1baa4:	46ce      	mov	lr, r9
   1baa6:	b580      	push	{r7, lr}
   1baa8:	b08d      	sub	sp, #52	; 0x34
   1baaa:	0004      	movs	r4, r0
   1baac:	000d      	movs	r5, r1
   1baae:	f001 f861 	bl	1cb74 <__ieee754_sqrt>
   1bab2:	4b29      	ldr	r3, [pc, #164]	; (1bb58 <sqrt+0xb8>)
   1bab4:	0006      	movs	r6, r0
   1bab6:	781b      	ldrb	r3, [r3, #0]
   1bab8:	000f      	movs	r7, r1
   1baba:	b25b      	sxtb	r3, r3
   1babc:	4698      	mov	r8, r3
   1babe:	3301      	adds	r3, #1
   1bac0:	d010      	beq.n	1bae4 <sqrt+0x44>
   1bac2:	0022      	movs	r2, r4
   1bac4:	002b      	movs	r3, r5
   1bac6:	0020      	movs	r0, r4
   1bac8:	0029      	movs	r1, r5
   1baca:	f005 f897 	bl	20bfc <__aeabi_dcmpun>
   1bace:	4681      	mov	r9, r0
   1bad0:	2800      	cmp	r0, #0
   1bad2:	d107      	bne.n	1bae4 <sqrt+0x44>
   1bad4:	2200      	movs	r2, #0
   1bad6:	2300      	movs	r3, #0
   1bad8:	0020      	movs	r0, r4
   1bada:	0029      	movs	r1, r5
   1badc:	f002 fbc0 	bl	1e260 <__aeabi_dcmplt>
   1bae0:	2800      	cmp	r0, #0
   1bae2:	d106      	bne.n	1baf2 <sqrt+0x52>
   1bae4:	0030      	movs	r0, r6
   1bae6:	0039      	movs	r1, r7
   1bae8:	b00d      	add	sp, #52	; 0x34
   1baea:	bc0c      	pop	{r2, r3}
   1baec:	4690      	mov	r8, r2
   1baee:	4699      	mov	r9, r3
   1baf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1baf2:	2301      	movs	r3, #1
   1baf4:	9302      	str	r3, [sp, #8]
   1baf6:	4b19      	ldr	r3, [pc, #100]	; (1bb5c <sqrt+0xbc>)
   1baf8:	9406      	str	r4, [sp, #24]
   1bafa:	9507      	str	r5, [sp, #28]
   1bafc:	9303      	str	r3, [sp, #12]
   1bafe:	464b      	mov	r3, r9
   1bb00:	930a      	str	r3, [sp, #40]	; 0x28
   1bb02:	4643      	mov	r3, r8
   1bb04:	9404      	str	r4, [sp, #16]
   1bb06:	9505      	str	r5, [sp, #20]
   1bb08:	2b00      	cmp	r3, #0
   1bb0a:	d015      	beq.n	1bb38 <sqrt+0x98>
   1bb0c:	2300      	movs	r3, #0
   1bb0e:	2200      	movs	r2, #0
   1bb10:	0019      	movs	r1, r3
   1bb12:	0010      	movs	r0, r2
   1bb14:	f003 fea8 	bl	1f868 <__aeabi_ddiv>
   1bb18:	4643      	mov	r3, r8
   1bb1a:	9008      	str	r0, [sp, #32]
   1bb1c:	9109      	str	r1, [sp, #36]	; 0x24
   1bb1e:	2b02      	cmp	r3, #2
   1bb20:	d10e      	bne.n	1bb40 <sqrt+0xa0>
   1bb22:	f005 fa15 	bl	20f50 <__errno>
   1bb26:	2321      	movs	r3, #33	; 0x21
   1bb28:	6003      	str	r3, [r0, #0]
   1bb2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1bb2c:	9301      	str	r3, [sp, #4]
   1bb2e:	2b00      	cmp	r3, #0
   1bb30:	d10c      	bne.n	1bb4c <sqrt+0xac>
   1bb32:	9e08      	ldr	r6, [sp, #32]
   1bb34:	9f09      	ldr	r7, [sp, #36]	; 0x24
   1bb36:	e7d5      	b.n	1bae4 <sqrt+0x44>
   1bb38:	2300      	movs	r3, #0
   1bb3a:	2400      	movs	r4, #0
   1bb3c:	9308      	str	r3, [sp, #32]
   1bb3e:	9409      	str	r4, [sp, #36]	; 0x24
   1bb40:	a802      	add	r0, sp, #8
   1bb42:	f002 f8e7 	bl	1dd14 <matherr>
   1bb46:	2800      	cmp	r0, #0
   1bb48:	d1ef      	bne.n	1bb2a <sqrt+0x8a>
   1bb4a:	e7ea      	b.n	1bb22 <sqrt+0x82>
   1bb4c:	f005 fa00 	bl	20f50 <__errno>
   1bb50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1bb52:	9301      	str	r3, [sp, #4]
   1bb54:	6003      	str	r3, [r0, #0]
   1bb56:	e7ec      	b.n	1bb32 <sqrt+0x92>
   1bb58:	200002c8 	.word	0x200002c8
   1bb5c:	00026b5c 	.word	0x00026b5c

0001bb60 <__ieee754_atan2>:
   1bb60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bb62:	0015      	movs	r5, r2
   1bb64:	4647      	mov	r7, r8
   1bb66:	46ce      	mov	lr, r9
   1bb68:	005a      	lsls	r2, r3, #1
   1bb6a:	001c      	movs	r4, r3
   1bb6c:	426b      	negs	r3, r5
   1bb6e:	b580      	push	{r7, lr}
   1bb70:	432b      	orrs	r3, r5
   1bb72:	4f4b      	ldr	r7, [pc, #300]	; (1bca0 <__ieee754_atan2+0x140>)
   1bb74:	0852      	lsrs	r2, r2, #1
   1bb76:	0fdb      	lsrs	r3, r3, #31
   1bb78:	4688      	mov	r8, r1
   1bb7a:	4313      	orrs	r3, r2
   1bb7c:	42bb      	cmp	r3, r7
   1bb7e:	d83a      	bhi.n	1bbf6 <__ieee754_atan2+0x96>
   1bb80:	004b      	lsls	r3, r1, #1
   1bb82:	085b      	lsrs	r3, r3, #1
   1bb84:	4699      	mov	r9, r3
   1bb86:	464e      	mov	r6, r9
   1bb88:	4243      	negs	r3, r0
   1bb8a:	4303      	orrs	r3, r0
   1bb8c:	0fdb      	lsrs	r3, r3, #31
   1bb8e:	4333      	orrs	r3, r6
   1bb90:	42bb      	cmp	r3, r7
   1bb92:	d830      	bhi.n	1bbf6 <__ieee754_atan2+0x96>
   1bb94:	4b43      	ldr	r3, [pc, #268]	; (1bca4 <__ieee754_atan2+0x144>)
   1bb96:	18e3      	adds	r3, r4, r3
   1bb98:	432b      	orrs	r3, r5
   1bb9a:	d043      	beq.n	1bc24 <__ieee754_atan2+0xc4>
   1bb9c:	2602      	movs	r6, #2
   1bb9e:	17a3      	asrs	r3, r4, #30
   1bba0:	401e      	ands	r6, r3
   1bba2:	0fcb      	lsrs	r3, r1, #31
   1bba4:	431e      	orrs	r6, r3
   1bba6:	464b      	mov	r3, r9
   1bba8:	4303      	orrs	r3, r0
   1bbaa:	d02e      	beq.n	1bc0a <__ieee754_atan2+0xaa>
   1bbac:	0013      	movs	r3, r2
   1bbae:	432b      	orrs	r3, r5
   1bbb0:	d032      	beq.n	1bc18 <__ieee754_atan2+0xb8>
   1bbb2:	42ba      	cmp	r2, r7
   1bbb4:	d041      	beq.n	1bc3a <__ieee754_atan2+0xda>
   1bbb6:	45b9      	cmp	r9, r7
   1bbb8:	d02e      	beq.n	1bc18 <__ieee754_atan2+0xb8>
   1bbba:	464b      	mov	r3, r9
   1bbbc:	1a9a      	subs	r2, r3, r2
   1bbbe:	1512      	asrs	r2, r2, #20
   1bbc0:	2a3c      	cmp	r2, #60	; 0x3c
   1bbc2:	dc32      	bgt.n	1bc2a <__ieee754_atan2+0xca>
   1bbc4:	2c00      	cmp	r4, #0
   1bbc6:	db55      	blt.n	1bc74 <__ieee754_atan2+0x114>
   1bbc8:	002a      	movs	r2, r5
   1bbca:	0023      	movs	r3, r4
   1bbcc:	f003 fe4c 	bl	1f868 <__aeabi_ddiv>
   1bbd0:	f002 f892 	bl	1dcf8 <fabs>
   1bbd4:	f001 fef4 	bl	1d9c0 <atan>
   1bbd8:	2e01      	cmp	r6, #1
   1bbda:	d046      	beq.n	1bc6a <__ieee754_atan2+0x10a>
   1bbdc:	2e02      	cmp	r6, #2
   1bbde:	d039      	beq.n	1bc54 <__ieee754_atan2+0xf4>
   1bbe0:	2e00      	cmp	r6, #0
   1bbe2:	d00e      	beq.n	1bc02 <__ieee754_atan2+0xa2>
   1bbe4:	4a30      	ldr	r2, [pc, #192]	; (1bca8 <__ieee754_atan2+0x148>)
   1bbe6:	4b31      	ldr	r3, [pc, #196]	; (1bcac <__ieee754_atan2+0x14c>)
   1bbe8:	f004 fcf2 	bl	205d0 <__aeabi_dsub>
   1bbec:	4a30      	ldr	r2, [pc, #192]	; (1bcb0 <__ieee754_atan2+0x150>)
   1bbee:	4b31      	ldr	r3, [pc, #196]	; (1bcb4 <__ieee754_atan2+0x154>)
   1bbf0:	f004 fcee 	bl	205d0 <__aeabi_dsub>
   1bbf4:	e005      	b.n	1bc02 <__ieee754_atan2+0xa2>
   1bbf6:	0002      	movs	r2, r0
   1bbf8:	000b      	movs	r3, r1
   1bbfa:	0028      	movs	r0, r5
   1bbfc:	0021      	movs	r1, r4
   1bbfe:	f003 fb23 	bl	1f248 <__aeabi_dadd>
   1bc02:	bc0c      	pop	{r2, r3}
   1bc04:	4690      	mov	r8, r2
   1bc06:	4699      	mov	r9, r3
   1bc08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bc0a:	2e02      	cmp	r6, #2
   1bc0c:	d010      	beq.n	1bc30 <__ieee754_atan2+0xd0>
   1bc0e:	2e03      	cmp	r6, #3
   1bc10:	d1f7      	bne.n	1bc02 <__ieee754_atan2+0xa2>
   1bc12:	4827      	ldr	r0, [pc, #156]	; (1bcb0 <__ieee754_atan2+0x150>)
   1bc14:	4928      	ldr	r1, [pc, #160]	; (1bcb8 <__ieee754_atan2+0x158>)
   1bc16:	e7f4      	b.n	1bc02 <__ieee754_atan2+0xa2>
   1bc18:	4643      	mov	r3, r8
   1bc1a:	4825      	ldr	r0, [pc, #148]	; (1bcb0 <__ieee754_atan2+0x150>)
   1bc1c:	2b00      	cmp	r3, #0
   1bc1e:	db0a      	blt.n	1bc36 <__ieee754_atan2+0xd6>
   1bc20:	4926      	ldr	r1, [pc, #152]	; (1bcbc <__ieee754_atan2+0x15c>)
   1bc22:	e7ee      	b.n	1bc02 <__ieee754_atan2+0xa2>
   1bc24:	f001 fecc 	bl	1d9c0 <atan>
   1bc28:	e7eb      	b.n	1bc02 <__ieee754_atan2+0xa2>
   1bc2a:	4821      	ldr	r0, [pc, #132]	; (1bcb0 <__ieee754_atan2+0x150>)
   1bc2c:	4923      	ldr	r1, [pc, #140]	; (1bcbc <__ieee754_atan2+0x15c>)
   1bc2e:	e7d3      	b.n	1bbd8 <__ieee754_atan2+0x78>
   1bc30:	481f      	ldr	r0, [pc, #124]	; (1bcb0 <__ieee754_atan2+0x150>)
   1bc32:	4920      	ldr	r1, [pc, #128]	; (1bcb4 <__ieee754_atan2+0x154>)
   1bc34:	e7e5      	b.n	1bc02 <__ieee754_atan2+0xa2>
   1bc36:	4922      	ldr	r1, [pc, #136]	; (1bcc0 <__ieee754_atan2+0x160>)
   1bc38:	e7e3      	b.n	1bc02 <__ieee754_atan2+0xa2>
   1bc3a:	4591      	cmp	r9, r2
   1bc3c:	d01f      	beq.n	1bc7e <__ieee754_atan2+0x11e>
   1bc3e:	2e02      	cmp	r6, #2
   1bc40:	d0f6      	beq.n	1bc30 <__ieee754_atan2+0xd0>
   1bc42:	2e03      	cmp	r6, #3
   1bc44:	d0e5      	beq.n	1bc12 <__ieee754_atan2+0xb2>
   1bc46:	2000      	movs	r0, #0
   1bc48:	2100      	movs	r1, #0
   1bc4a:	2e01      	cmp	r6, #1
   1bc4c:	d1d9      	bne.n	1bc02 <__ieee754_atan2+0xa2>
   1bc4e:	2180      	movs	r1, #128	; 0x80
   1bc50:	0609      	lsls	r1, r1, #24
   1bc52:	e7d6      	b.n	1bc02 <__ieee754_atan2+0xa2>
   1bc54:	4a14      	ldr	r2, [pc, #80]	; (1bca8 <__ieee754_atan2+0x148>)
   1bc56:	4b15      	ldr	r3, [pc, #84]	; (1bcac <__ieee754_atan2+0x14c>)
   1bc58:	f004 fcba 	bl	205d0 <__aeabi_dsub>
   1bc5c:	0002      	movs	r2, r0
   1bc5e:	000b      	movs	r3, r1
   1bc60:	4813      	ldr	r0, [pc, #76]	; (1bcb0 <__ieee754_atan2+0x150>)
   1bc62:	4914      	ldr	r1, [pc, #80]	; (1bcb4 <__ieee754_atan2+0x154>)
   1bc64:	f004 fcb4 	bl	205d0 <__aeabi_dsub>
   1bc68:	e7cb      	b.n	1bc02 <__ieee754_atan2+0xa2>
   1bc6a:	2480      	movs	r4, #128	; 0x80
   1bc6c:	0624      	lsls	r4, r4, #24
   1bc6e:	190b      	adds	r3, r1, r4
   1bc70:	0019      	movs	r1, r3
   1bc72:	e7c6      	b.n	1bc02 <__ieee754_atan2+0xa2>
   1bc74:	323c      	adds	r2, #60	; 0x3c
   1bc76:	daa7      	bge.n	1bbc8 <__ieee754_atan2+0x68>
   1bc78:	2000      	movs	r0, #0
   1bc7a:	2100      	movs	r1, #0
   1bc7c:	e7ac      	b.n	1bbd8 <__ieee754_atan2+0x78>
   1bc7e:	2e02      	cmp	r6, #2
   1bc80:	d006      	beq.n	1bc90 <__ieee754_atan2+0x130>
   1bc82:	2e03      	cmp	r6, #3
   1bc84:	d009      	beq.n	1bc9a <__ieee754_atan2+0x13a>
   1bc86:	480a      	ldr	r0, [pc, #40]	; (1bcb0 <__ieee754_atan2+0x150>)
   1bc88:	2e01      	cmp	r6, #1
   1bc8a:	d004      	beq.n	1bc96 <__ieee754_atan2+0x136>
   1bc8c:	490d      	ldr	r1, [pc, #52]	; (1bcc4 <__ieee754_atan2+0x164>)
   1bc8e:	e7b8      	b.n	1bc02 <__ieee754_atan2+0xa2>
   1bc90:	480d      	ldr	r0, [pc, #52]	; (1bcc8 <__ieee754_atan2+0x168>)
   1bc92:	490e      	ldr	r1, [pc, #56]	; (1bccc <__ieee754_atan2+0x16c>)
   1bc94:	e7b5      	b.n	1bc02 <__ieee754_atan2+0xa2>
   1bc96:	490e      	ldr	r1, [pc, #56]	; (1bcd0 <__ieee754_atan2+0x170>)
   1bc98:	e7b3      	b.n	1bc02 <__ieee754_atan2+0xa2>
   1bc9a:	480b      	ldr	r0, [pc, #44]	; (1bcc8 <__ieee754_atan2+0x168>)
   1bc9c:	490d      	ldr	r1, [pc, #52]	; (1bcd4 <__ieee754_atan2+0x174>)
   1bc9e:	e7b0      	b.n	1bc02 <__ieee754_atan2+0xa2>
   1bca0:	7ff00000 	.word	0x7ff00000
   1bca4:	c0100000 	.word	0xc0100000
   1bca8:	33145c07 	.word	0x33145c07
   1bcac:	3ca1a626 	.word	0x3ca1a626
   1bcb0:	54442d18 	.word	0x54442d18
   1bcb4:	400921fb 	.word	0x400921fb
   1bcb8:	c00921fb 	.word	0xc00921fb
   1bcbc:	3ff921fb 	.word	0x3ff921fb
   1bcc0:	bff921fb 	.word	0xbff921fb
   1bcc4:	3fe921fb 	.word	0x3fe921fb
   1bcc8:	7f3321d2 	.word	0x7f3321d2
   1bccc:	4002d97c 	.word	0x4002d97c
   1bcd0:	bfe921fb 	.word	0xbfe921fb
   1bcd4:	c002d97c 	.word	0xc002d97c

0001bcd8 <__ieee754_pow>:
   1bcd8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bcda:	4657      	mov	r7, sl
   1bcdc:	464e      	mov	r6, r9
   1bcde:	4645      	mov	r5, r8
   1bce0:	46de      	mov	lr, fp
   1bce2:	001c      	movs	r4, r3
   1bce4:	0013      	movs	r3, r2
   1bce6:	b5e0      	push	{r5, r6, r7, lr}
   1bce8:	0065      	lsls	r5, r4, #1
   1bcea:	b091      	sub	sp, #68	; 0x44
   1bcec:	086d      	lsrs	r5, r5, #1
   1bcee:	9300      	str	r3, [sp, #0]
   1bcf0:	9401      	str	r4, [sp, #4]
   1bcf2:	0007      	movs	r7, r0
   1bcf4:	000e      	movs	r6, r1
   1bcf6:	4680      	mov	r8, r0
   1bcf8:	4689      	mov	r9, r1
   1bcfa:	46a2      	mov	sl, r4
   1bcfc:	432b      	orrs	r3, r5
   1bcfe:	d031      	beq.n	1bd64 <__ieee754_pow+0x8c>
   1bd00:	4b67      	ldr	r3, [pc, #412]	; (1bea0 <__ieee754_pow+0x1c8>)
   1bd02:	0074      	lsls	r4, r6, #1
   1bd04:	0864      	lsrs	r4, r4, #1
   1bd06:	429c      	cmp	r4, r3
   1bd08:	dc27      	bgt.n	1bd5a <__ieee754_pow+0x82>
   1bd0a:	d024      	beq.n	1bd56 <__ieee754_pow+0x7e>
   1bd0c:	429d      	cmp	r5, r3
   1bd0e:	dc24      	bgt.n	1bd5a <__ieee754_pow+0x82>
   1bd10:	4b63      	ldr	r3, [pc, #396]	; (1bea0 <__ieee754_pow+0x1c8>)
   1bd12:	429d      	cmp	r5, r3
   1bd14:	d100      	bne.n	1bd18 <__ieee754_pow+0x40>
   1bd16:	e081      	b.n	1be1c <__ieee754_pow+0x144>
   1bd18:	2300      	movs	r3, #0
   1bd1a:	469b      	mov	fp, r3
   1bd1c:	464b      	mov	r3, r9
   1bd1e:	2b00      	cmp	r3, #0
   1bd20:	da00      	bge.n	1bd24 <__ieee754_pow+0x4c>
   1bd22:	e07f      	b.n	1be24 <__ieee754_pow+0x14c>
   1bd24:	2a00      	cmp	r2, #0
   1bd26:	d12c      	bne.n	1bd82 <__ieee754_pow+0xaa>
   1bd28:	4b5d      	ldr	r3, [pc, #372]	; (1bea0 <__ieee754_pow+0x1c8>)
   1bd2a:	429d      	cmp	r5, r3
   1bd2c:	d100      	bne.n	1bd30 <__ieee754_pow+0x58>
   1bd2e:	e097      	b.n	1be60 <__ieee754_pow+0x188>
   1bd30:	4b5c      	ldr	r3, [pc, #368]	; (1bea4 <__ieee754_pow+0x1cc>)
   1bd32:	429d      	cmp	r5, r3
   1bd34:	d066      	beq.n	1be04 <__ieee754_pow+0x12c>
   1bd36:	2380      	movs	r3, #128	; 0x80
   1bd38:	05db      	lsls	r3, r3, #23
   1bd3a:	459a      	cmp	sl, r3
   1bd3c:	d100      	bne.n	1bd40 <__ieee754_pow+0x68>
   1bd3e:	e3b9      	b.n	1c4b4 <__ieee754_pow+0x7dc>
   1bd40:	4b59      	ldr	r3, [pc, #356]	; (1bea8 <__ieee754_pow+0x1d0>)
   1bd42:	459a      	cmp	sl, r3
   1bd44:	d11d      	bne.n	1bd82 <__ieee754_pow+0xaa>
   1bd46:	464b      	mov	r3, r9
   1bd48:	2b00      	cmp	r3, #0
   1bd4a:	db1a      	blt.n	1bd82 <__ieee754_pow+0xaa>
   1bd4c:	0038      	movs	r0, r7
   1bd4e:	0031      	movs	r1, r6
   1bd50:	f000 ff10 	bl	1cb74 <__ieee754_sqrt>
   1bd54:	e008      	b.n	1bd68 <__ieee754_pow+0x90>
   1bd56:	2800      	cmp	r0, #0
   1bd58:	d00d      	beq.n	1bd76 <__ieee754_pow+0x9e>
   1bd5a:	4b54      	ldr	r3, [pc, #336]	; (1beac <__ieee754_pow+0x1d4>)
   1bd5c:	469c      	mov	ip, r3
   1bd5e:	4464      	add	r4, ip
   1bd60:	4327      	orrs	r7, r4
   1bd62:	d10a      	bne.n	1bd7a <__ieee754_pow+0xa2>
   1bd64:	2000      	movs	r0, #0
   1bd66:	494f      	ldr	r1, [pc, #316]	; (1bea4 <__ieee754_pow+0x1cc>)
   1bd68:	b011      	add	sp, #68	; 0x44
   1bd6a:	bc3c      	pop	{r2, r3, r4, r5}
   1bd6c:	4690      	mov	r8, r2
   1bd6e:	4699      	mov	r9, r3
   1bd70:	46a2      	mov	sl, r4
   1bd72:	46ab      	mov	fp, r5
   1bd74:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bd76:	42a5      	cmp	r5, r4
   1bd78:	ddca      	ble.n	1bd10 <__ieee754_pow+0x38>
   1bd7a:	484d      	ldr	r0, [pc, #308]	; (1beb0 <__ieee754_pow+0x1d8>)
   1bd7c:	f001 ffcc 	bl	1dd18 <nan>
   1bd80:	e7f2      	b.n	1bd68 <__ieee754_pow+0x90>
   1bd82:	0038      	movs	r0, r7
   1bd84:	0031      	movs	r1, r6
   1bd86:	f001 ffb7 	bl	1dcf8 <fabs>
   1bd8a:	4643      	mov	r3, r8
   1bd8c:	2b00      	cmp	r3, #0
   1bd8e:	d11d      	bne.n	1bdcc <__ieee754_pow+0xf4>
   1bd90:	2c00      	cmp	r4, #0
   1bd92:	d004      	beq.n	1bd9e <__ieee754_pow+0xc6>
   1bd94:	4a43      	ldr	r2, [pc, #268]	; (1bea4 <__ieee754_pow+0x1cc>)
   1bd96:	00b3      	lsls	r3, r6, #2
   1bd98:	089b      	lsrs	r3, r3, #2
   1bd9a:	4293      	cmp	r3, r2
   1bd9c:	d116      	bne.n	1bdcc <__ieee754_pow+0xf4>
   1bd9e:	4653      	mov	r3, sl
   1bda0:	2b00      	cmp	r3, #0
   1bda2:	da00      	bge.n	1bda6 <__ieee754_pow+0xce>
   1bda4:	e3c5      	b.n	1c532 <__ieee754_pow+0x85a>
   1bda6:	464b      	mov	r3, r9
   1bda8:	2b00      	cmp	r3, #0
   1bdaa:	dadd      	bge.n	1bd68 <__ieee754_pow+0x90>
   1bdac:	4b3f      	ldr	r3, [pc, #252]	; (1beac <__ieee754_pow+0x1d4>)
   1bdae:	469c      	mov	ip, r3
   1bdb0:	465b      	mov	r3, fp
   1bdb2:	4464      	add	r4, ip
   1bdb4:	431c      	orrs	r4, r3
   1bdb6:	d101      	bne.n	1bdbc <__ieee754_pow+0xe4>
   1bdb8:	f000 fc53 	bl	1c662 <__ieee754_pow+0x98a>
   1bdbc:	465b      	mov	r3, fp
   1bdbe:	2b01      	cmp	r3, #1
   1bdc0:	d1d2      	bne.n	1bd68 <__ieee754_pow+0x90>
   1bdc2:	2480      	movs	r4, #128	; 0x80
   1bdc4:	0624      	lsls	r4, r4, #24
   1bdc6:	190b      	adds	r3, r1, r4
   1bdc8:	0019      	movs	r1, r3
   1bdca:	e7cd      	b.n	1bd68 <__ieee754_pow+0x90>
   1bdcc:	0ff3      	lsrs	r3, r6, #31
   1bdce:	3b01      	subs	r3, #1
   1bdd0:	4698      	mov	r8, r3
   1bdd2:	465b      	mov	r3, fp
   1bdd4:	4642      	mov	r2, r8
   1bdd6:	4313      	orrs	r3, r2
   1bdd8:	d057      	beq.n	1be8a <__ieee754_pow+0x1b2>
   1bdda:	4b36      	ldr	r3, [pc, #216]	; (1beb4 <__ieee754_pow+0x1dc>)
   1bddc:	429d      	cmp	r5, r3
   1bdde:	dd77      	ble.n	1bed0 <__ieee754_pow+0x1f8>
   1bde0:	4b35      	ldr	r3, [pc, #212]	; (1beb8 <__ieee754_pow+0x1e0>)
   1bde2:	429d      	cmp	r5, r3
   1bde4:	dc00      	bgt.n	1bde8 <__ieee754_pow+0x110>
   1bde6:	e3b1      	b.n	1c54c <__ieee754_pow+0x874>
   1bde8:	4b34      	ldr	r3, [pc, #208]	; (1bebc <__ieee754_pow+0x1e4>)
   1bdea:	429c      	cmp	r4, r3
   1bdec:	dc00      	bgt.n	1bdf0 <__ieee754_pow+0x118>
   1bdee:	e3a8      	b.n	1c542 <__ieee754_pow+0x86a>
   1bdf0:	4653      	mov	r3, sl
   1bdf2:	2b00      	cmp	r3, #0
   1bdf4:	dd43      	ble.n	1be7e <__ieee754_pow+0x1a6>
   1bdf6:	4a32      	ldr	r2, [pc, #200]	; (1bec0 <__ieee754_pow+0x1e8>)
   1bdf8:	4b32      	ldr	r3, [pc, #200]	; (1bec4 <__ieee754_pow+0x1ec>)
   1bdfa:	0010      	movs	r0, r2
   1bdfc:	0019      	movs	r1, r3
   1bdfe:	f004 f967 	bl	200d0 <__aeabi_dmul>
   1be02:	e7b1      	b.n	1bd68 <__ieee754_pow+0x90>
   1be04:	4653      	mov	r3, sl
   1be06:	0038      	movs	r0, r7
   1be08:	0031      	movs	r1, r6
   1be0a:	2b00      	cmp	r3, #0
   1be0c:	daac      	bge.n	1bd68 <__ieee754_pow+0x90>
   1be0e:	003a      	movs	r2, r7
   1be10:	0033      	movs	r3, r6
   1be12:	2000      	movs	r0, #0
   1be14:	4923      	ldr	r1, [pc, #140]	; (1bea4 <__ieee754_pow+0x1cc>)
   1be16:	f003 fd27 	bl	1f868 <__aeabi_ddiv>
   1be1a:	e7a5      	b.n	1bd68 <__ieee754_pow+0x90>
   1be1c:	2a00      	cmp	r2, #0
   1be1e:	d100      	bne.n	1be22 <__ieee754_pow+0x14a>
   1be20:	e77a      	b.n	1bd18 <__ieee754_pow+0x40>
   1be22:	e79a      	b.n	1bd5a <__ieee754_pow+0x82>
   1be24:	4b28      	ldr	r3, [pc, #160]	; (1bec8 <__ieee754_pow+0x1f0>)
   1be26:	429d      	cmp	r5, r3
   1be28:	dc2c      	bgt.n	1be84 <__ieee754_pow+0x1ac>
   1be2a:	4b24      	ldr	r3, [pc, #144]	; (1bebc <__ieee754_pow+0x1e4>)
   1be2c:	429d      	cmp	r5, r3
   1be2e:	dc00      	bgt.n	1be32 <__ieee754_pow+0x15a>
   1be30:	e778      	b.n	1bd24 <__ieee754_pow+0x4c>
   1be32:	4926      	ldr	r1, [pc, #152]	; (1becc <__ieee754_pow+0x1f4>)
   1be34:	152b      	asrs	r3, r5, #20
   1be36:	468c      	mov	ip, r1
   1be38:	4463      	add	r3, ip
   1be3a:	2b14      	cmp	r3, #20
   1be3c:	dc01      	bgt.n	1be42 <__ieee754_pow+0x16a>
   1be3e:	f000 fbf3 	bl	1c628 <__ieee754_pow+0x950>
   1be42:	2134      	movs	r1, #52	; 0x34
   1be44:	1acb      	subs	r3, r1, r3
   1be46:	9900      	ldr	r1, [sp, #0]
   1be48:	40d9      	lsrs	r1, r3
   1be4a:	0008      	movs	r0, r1
   1be4c:	4098      	lsls	r0, r3
   1be4e:	4282      	cmp	r2, r0
   1be50:	d000      	beq.n	1be54 <__ieee754_pow+0x17c>
   1be52:	e767      	b.n	1bd24 <__ieee754_pow+0x4c>
   1be54:	2301      	movs	r3, #1
   1be56:	4019      	ands	r1, r3
   1be58:	3301      	adds	r3, #1
   1be5a:	1a5b      	subs	r3, r3, r1
   1be5c:	469b      	mov	fp, r3
   1be5e:	e761      	b.n	1bd24 <__ieee754_pow+0x4c>
   1be60:	4b12      	ldr	r3, [pc, #72]	; (1beac <__ieee754_pow+0x1d4>)
   1be62:	18e3      	adds	r3, r4, r3
   1be64:	431f      	orrs	r7, r3
   1be66:	d100      	bne.n	1be6a <__ieee754_pow+0x192>
   1be68:	e77c      	b.n	1bd64 <__ieee754_pow+0x8c>
   1be6a:	4b14      	ldr	r3, [pc, #80]	; (1bebc <__ieee754_pow+0x1e4>)
   1be6c:	429c      	cmp	r4, r3
   1be6e:	dc00      	bgt.n	1be72 <__ieee754_pow+0x19a>
   1be70:	e327      	b.n	1c4c2 <__ieee754_pow+0x7ea>
   1be72:	9800      	ldr	r0, [sp, #0]
   1be74:	9901      	ldr	r1, [sp, #4]
   1be76:	4653      	mov	r3, sl
   1be78:	2b00      	cmp	r3, #0
   1be7a:	db00      	blt.n	1be7e <__ieee754_pow+0x1a6>
   1be7c:	e774      	b.n	1bd68 <__ieee754_pow+0x90>
   1be7e:	2000      	movs	r0, #0
   1be80:	2100      	movs	r1, #0
   1be82:	e771      	b.n	1bd68 <__ieee754_pow+0x90>
   1be84:	2302      	movs	r3, #2
   1be86:	469b      	mov	fp, r3
   1be88:	e74c      	b.n	1bd24 <__ieee754_pow+0x4c>
   1be8a:	003a      	movs	r2, r7
   1be8c:	0033      	movs	r3, r6
   1be8e:	0038      	movs	r0, r7
   1be90:	0031      	movs	r1, r6
   1be92:	f004 fb9d 	bl	205d0 <__aeabi_dsub>
   1be96:	0002      	movs	r2, r0
   1be98:	000b      	movs	r3, r1
   1be9a:	f003 fce5 	bl	1f868 <__aeabi_ddiv>
   1be9e:	e763      	b.n	1bd68 <__ieee754_pow+0x90>
   1bea0:	7ff00000 	.word	0x7ff00000
   1bea4:	3ff00000 	.word	0x3ff00000
   1bea8:	3fe00000 	.word	0x3fe00000
   1beac:	c0100000 	.word	0xc0100000
   1beb0:	00027058 	.word	0x00027058
   1beb4:	41e00000 	.word	0x41e00000
   1beb8:	43f00000 	.word	0x43f00000
   1bebc:	3fefffff 	.word	0x3fefffff
   1bec0:	8800759c 	.word	0x8800759c
   1bec4:	7e37e43c 	.word	0x7e37e43c
   1bec8:	433fffff 	.word	0x433fffff
   1becc:	fffffc01 	.word	0xfffffc01
   1bed0:	4be9      	ldr	r3, [pc, #932]	; (1c278 <__ieee754_pow+0x5a0>)
   1bed2:	2200      	movs	r2, #0
   1bed4:	429c      	cmp	r4, r3
   1bed6:	dc06      	bgt.n	1bee6 <__ieee754_pow+0x20e>
   1bed8:	2200      	movs	r2, #0
   1beda:	4be8      	ldr	r3, [pc, #928]	; (1c27c <__ieee754_pow+0x5a4>)
   1bedc:	f004 f8f8 	bl	200d0 <__aeabi_dmul>
   1bee0:	2235      	movs	r2, #53	; 0x35
   1bee2:	000c      	movs	r4, r1
   1bee4:	4252      	negs	r2, r2
   1bee6:	4de6      	ldr	r5, [pc, #920]	; (1c280 <__ieee754_pow+0x5a8>)
   1bee8:	1523      	asrs	r3, r4, #20
   1beea:	46ac      	mov	ip, r5
   1beec:	4463      	add	r3, ip
   1beee:	4699      	mov	r9, r3
   1bef0:	0324      	lsls	r4, r4, #12
   1bef2:	4de4      	ldr	r5, [pc, #912]	; (1c284 <__ieee754_pow+0x5ac>)
   1bef4:	4be4      	ldr	r3, [pc, #912]	; (1c288 <__ieee754_pow+0x5b0>)
   1bef6:	0b24      	lsrs	r4, r4, #12
   1bef8:	4491      	add	r9, r2
   1befa:	4325      	orrs	r5, r4
   1befc:	429c      	cmp	r4, r3
   1befe:	dd09      	ble.n	1bf14 <__ieee754_pow+0x23c>
   1bf00:	4be2      	ldr	r3, [pc, #904]	; (1c28c <__ieee754_pow+0x5b4>)
   1bf02:	429c      	cmp	r4, r3
   1bf04:	dc00      	bgt.n	1bf08 <__ieee754_pow+0x230>
   1bf06:	e3b6      	b.n	1c676 <__ieee754_pow+0x99e>
   1bf08:	2301      	movs	r3, #1
   1bf0a:	469c      	mov	ip, r3
   1bf0c:	4be0      	ldr	r3, [pc, #896]	; (1c290 <__ieee754_pow+0x5b8>)
   1bf0e:	44e1      	add	r9, ip
   1bf10:	469c      	mov	ip, r3
   1bf12:	4465      	add	r5, ip
   1bf14:	2300      	movs	r3, #0
   1bf16:	2400      	movs	r4, #0
   1bf18:	2200      	movs	r2, #0
   1bf1a:	9308      	str	r3, [sp, #32]
   1bf1c:	9409      	str	r4, [sp, #36]	; 0x24
   1bf1e:	930c      	str	r3, [sp, #48]	; 0x30
   1bf20:	940d      	str	r4, [sp, #52]	; 0x34
   1bf22:	2400      	movs	r4, #0
   1bf24:	4bd7      	ldr	r3, [pc, #860]	; (1c284 <__ieee754_pow+0x5ac>)
   1bf26:	9206      	str	r2, [sp, #24]
   1bf28:	9307      	str	r3, [sp, #28]
   1bf2a:	9a06      	ldr	r2, [sp, #24]
   1bf2c:	9b07      	ldr	r3, [sp, #28]
   1bf2e:	0029      	movs	r1, r5
   1bf30:	900a      	str	r0, [sp, #40]	; 0x28
   1bf32:	910b      	str	r1, [sp, #44]	; 0x2c
   1bf34:	f004 fb4c 	bl	205d0 <__aeabi_dsub>
   1bf38:	9a06      	ldr	r2, [sp, #24]
   1bf3a:	9b07      	ldr	r3, [sp, #28]
   1bf3c:	0006      	movs	r6, r0
   1bf3e:	000f      	movs	r7, r1
   1bf40:	980a      	ldr	r0, [sp, #40]	; 0x28
   1bf42:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1bf44:	f003 f980 	bl	1f248 <__aeabi_dadd>
   1bf48:	0002      	movs	r2, r0
   1bf4a:	000b      	movs	r3, r1
   1bf4c:	2000      	movs	r0, #0
   1bf4e:	49cd      	ldr	r1, [pc, #820]	; (1c284 <__ieee754_pow+0x5ac>)
   1bf50:	f003 fc8a 	bl	1f868 <__aeabi_ddiv>
   1bf54:	000a      	movs	r2, r1
   1bf56:	0001      	movs	r1, r0
   1bf58:	0013      	movs	r3, r2
   1bf5a:	910e      	str	r1, [sp, #56]	; 0x38
   1bf5c:	920f      	str	r2, [sp, #60]	; 0x3c
   1bf5e:	0002      	movs	r2, r0
   1bf60:	0039      	movs	r1, r7
   1bf62:	0030      	movs	r0, r6
   1bf64:	f004 f8b4 	bl	200d0 <__aeabi_dmul>
   1bf68:	000a      	movs	r2, r1
   1bf6a:	0001      	movs	r1, r0
   1bf6c:	2080      	movs	r0, #128	; 0x80
   1bf6e:	9104      	str	r1, [sp, #16]
   1bf70:	9205      	str	r2, [sp, #20]
   1bf72:	0013      	movs	r3, r2
   1bf74:	2200      	movs	r2, #0
   1bf76:	1069      	asrs	r1, r5, #1
   1bf78:	2580      	movs	r5, #128	; 0x80
   1bf7a:	0300      	lsls	r0, r0, #12
   1bf7c:	4684      	mov	ip, r0
   1bf7e:	9202      	str	r2, [sp, #8]
   1bf80:	9303      	str	r3, [sp, #12]
   1bf82:	2200      	movs	r2, #0
   1bf84:	05ad      	lsls	r5, r5, #22
   1bf86:	430d      	orrs	r5, r1
   1bf88:	4465      	add	r5, ip
   1bf8a:	192b      	adds	r3, r5, r4
   1bf8c:	9802      	ldr	r0, [sp, #8]
   1bf8e:	9903      	ldr	r1, [sp, #12]
   1bf90:	0014      	movs	r4, r2
   1bf92:	001d      	movs	r5, r3
   1bf94:	f004 f89c 	bl	200d0 <__aeabi_dmul>
   1bf98:	0002      	movs	r2, r0
   1bf9a:	000b      	movs	r3, r1
   1bf9c:	0030      	movs	r0, r6
   1bf9e:	0039      	movs	r1, r7
   1bfa0:	f004 fb16 	bl	205d0 <__aeabi_dsub>
   1bfa4:	9a06      	ldr	r2, [sp, #24]
   1bfa6:	9b07      	ldr	r3, [sp, #28]
   1bfa8:	0006      	movs	r6, r0
   1bfaa:	000f      	movs	r7, r1
   1bfac:	0020      	movs	r0, r4
   1bfae:	0029      	movs	r1, r5
   1bfb0:	f004 fb0e 	bl	205d0 <__aeabi_dsub>
   1bfb4:	0002      	movs	r2, r0
   1bfb6:	000b      	movs	r3, r1
   1bfb8:	980a      	ldr	r0, [sp, #40]	; 0x28
   1bfba:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1bfbc:	f004 fb08 	bl	205d0 <__aeabi_dsub>
   1bfc0:	9a02      	ldr	r2, [sp, #8]
   1bfc2:	9b03      	ldr	r3, [sp, #12]
   1bfc4:	f004 f884 	bl	200d0 <__aeabi_dmul>
   1bfc8:	0002      	movs	r2, r0
   1bfca:	000b      	movs	r3, r1
   1bfcc:	0030      	movs	r0, r6
   1bfce:	0039      	movs	r1, r7
   1bfd0:	f004 fafe 	bl	205d0 <__aeabi_dsub>
   1bfd4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1bfd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1bfd8:	f004 f87a 	bl	200d0 <__aeabi_dmul>
   1bfdc:	9d04      	ldr	r5, [sp, #16]
   1bfde:	9e05      	ldr	r6, [sp, #20]
   1bfe0:	9006      	str	r0, [sp, #24]
   1bfe2:	9107      	str	r1, [sp, #28]
   1bfe4:	002a      	movs	r2, r5
   1bfe6:	0033      	movs	r3, r6
   1bfe8:	0028      	movs	r0, r5
   1bfea:	0031      	movs	r1, r6
   1bfec:	f004 f870 	bl	200d0 <__aeabi_dmul>
   1bff0:	0006      	movs	r6, r0
   1bff2:	000f      	movs	r7, r1
   1bff4:	4aa7      	ldr	r2, [pc, #668]	; (1c294 <__ieee754_pow+0x5bc>)
   1bff6:	4ba8      	ldr	r3, [pc, #672]	; (1c298 <__ieee754_pow+0x5c0>)
   1bff8:	f004 f86a 	bl	200d0 <__aeabi_dmul>
   1bffc:	4aa7      	ldr	r2, [pc, #668]	; (1c29c <__ieee754_pow+0x5c4>)
   1bffe:	4ba8      	ldr	r3, [pc, #672]	; (1c2a0 <__ieee754_pow+0x5c8>)
   1c000:	f003 f922 	bl	1f248 <__aeabi_dadd>
   1c004:	0032      	movs	r2, r6
   1c006:	003b      	movs	r3, r7
   1c008:	f004 f862 	bl	200d0 <__aeabi_dmul>
   1c00c:	4aa5      	ldr	r2, [pc, #660]	; (1c2a4 <__ieee754_pow+0x5cc>)
   1c00e:	4ba6      	ldr	r3, [pc, #664]	; (1c2a8 <__ieee754_pow+0x5d0>)
   1c010:	f003 f91a 	bl	1f248 <__aeabi_dadd>
   1c014:	0032      	movs	r2, r6
   1c016:	003b      	movs	r3, r7
   1c018:	f004 f85a 	bl	200d0 <__aeabi_dmul>
   1c01c:	4aa3      	ldr	r2, [pc, #652]	; (1c2ac <__ieee754_pow+0x5d4>)
   1c01e:	4ba4      	ldr	r3, [pc, #656]	; (1c2b0 <__ieee754_pow+0x5d8>)
   1c020:	f003 f912 	bl	1f248 <__aeabi_dadd>
   1c024:	0032      	movs	r2, r6
   1c026:	003b      	movs	r3, r7
   1c028:	f004 f852 	bl	200d0 <__aeabi_dmul>
   1c02c:	4aa1      	ldr	r2, [pc, #644]	; (1c2b4 <__ieee754_pow+0x5dc>)
   1c02e:	4ba2      	ldr	r3, [pc, #648]	; (1c2b8 <__ieee754_pow+0x5e0>)
   1c030:	f003 f90a 	bl	1f248 <__aeabi_dadd>
   1c034:	0032      	movs	r2, r6
   1c036:	003b      	movs	r3, r7
   1c038:	f004 f84a 	bl	200d0 <__aeabi_dmul>
   1c03c:	4a9f      	ldr	r2, [pc, #636]	; (1c2bc <__ieee754_pow+0x5e4>)
   1c03e:	4ba0      	ldr	r3, [pc, #640]	; (1c2c0 <__ieee754_pow+0x5e8>)
   1c040:	f003 f902 	bl	1f248 <__aeabi_dadd>
   1c044:	0032      	movs	r2, r6
   1c046:	0004      	movs	r4, r0
   1c048:	000d      	movs	r5, r1
   1c04a:	003b      	movs	r3, r7
   1c04c:	0030      	movs	r0, r6
   1c04e:	0039      	movs	r1, r7
   1c050:	f004 f83e 	bl	200d0 <__aeabi_dmul>
   1c054:	0002      	movs	r2, r0
   1c056:	000b      	movs	r3, r1
   1c058:	0020      	movs	r0, r4
   1c05a:	0029      	movs	r1, r5
   1c05c:	f004 f838 	bl	200d0 <__aeabi_dmul>
   1c060:	9e02      	ldr	r6, [sp, #8]
   1c062:	9f03      	ldr	r7, [sp, #12]
   1c064:	0004      	movs	r4, r0
   1c066:	000d      	movs	r5, r1
   1c068:	9804      	ldr	r0, [sp, #16]
   1c06a:	9905      	ldr	r1, [sp, #20]
   1c06c:	0032      	movs	r2, r6
   1c06e:	003b      	movs	r3, r7
   1c070:	f003 f8ea 	bl	1f248 <__aeabi_dadd>
   1c074:	9a06      	ldr	r2, [sp, #24]
   1c076:	9b07      	ldr	r3, [sp, #28]
   1c078:	f004 f82a 	bl	200d0 <__aeabi_dmul>
   1c07c:	0022      	movs	r2, r4
   1c07e:	002b      	movs	r3, r5
   1c080:	f003 f8e2 	bl	1f248 <__aeabi_dadd>
   1c084:	0032      	movs	r2, r6
   1c086:	900a      	str	r0, [sp, #40]	; 0x28
   1c088:	910b      	str	r1, [sp, #44]	; 0x2c
   1c08a:	003b      	movs	r3, r7
   1c08c:	0030      	movs	r0, r6
   1c08e:	0039      	movs	r1, r7
   1c090:	9602      	str	r6, [sp, #8]
   1c092:	9703      	str	r7, [sp, #12]
   1c094:	f004 f81c 	bl	200d0 <__aeabi_dmul>
   1c098:	2200      	movs	r2, #0
   1c09a:	4b8a      	ldr	r3, [pc, #552]	; (1c2c4 <__ieee754_pow+0x5ec>)
   1c09c:	0004      	movs	r4, r0
   1c09e:	000d      	movs	r5, r1
   1c0a0:	f003 f8d2 	bl	1f248 <__aeabi_dadd>
   1c0a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1c0a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1c0a8:	f003 f8ce 	bl	1f248 <__aeabi_dadd>
   1c0ac:	2600      	movs	r6, #0
   1c0ae:	000f      	movs	r7, r1
   1c0b0:	0032      	movs	r2, r6
   1c0b2:	000b      	movs	r3, r1
   1c0b4:	9802      	ldr	r0, [sp, #8]
   1c0b6:	9903      	ldr	r1, [sp, #12]
   1c0b8:	f004 f80a 	bl	200d0 <__aeabi_dmul>
   1c0bc:	2200      	movs	r2, #0
   1c0be:	9002      	str	r0, [sp, #8]
   1c0c0:	9103      	str	r1, [sp, #12]
   1c0c2:	4b80      	ldr	r3, [pc, #512]	; (1c2c4 <__ieee754_pow+0x5ec>)
   1c0c4:	0030      	movs	r0, r6
   1c0c6:	0039      	movs	r1, r7
   1c0c8:	f004 fa82 	bl	205d0 <__aeabi_dsub>
   1c0cc:	0022      	movs	r2, r4
   1c0ce:	002b      	movs	r3, r5
   1c0d0:	f004 fa7e 	bl	205d0 <__aeabi_dsub>
   1c0d4:	0002      	movs	r2, r0
   1c0d6:	000b      	movs	r3, r1
   1c0d8:	980a      	ldr	r0, [sp, #40]	; 0x28
   1c0da:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1c0dc:	f004 fa78 	bl	205d0 <__aeabi_dsub>
   1c0e0:	9a04      	ldr	r2, [sp, #16]
   1c0e2:	9b05      	ldr	r3, [sp, #20]
   1c0e4:	f003 fff4 	bl	200d0 <__aeabi_dmul>
   1c0e8:	0032      	movs	r2, r6
   1c0ea:	0004      	movs	r4, r0
   1c0ec:	000d      	movs	r5, r1
   1c0ee:	9806      	ldr	r0, [sp, #24]
   1c0f0:	9907      	ldr	r1, [sp, #28]
   1c0f2:	003b      	movs	r3, r7
   1c0f4:	f003 ffec 	bl	200d0 <__aeabi_dmul>
   1c0f8:	0002      	movs	r2, r0
   1c0fa:	000b      	movs	r3, r1
   1c0fc:	0020      	movs	r0, r4
   1c0fe:	0029      	movs	r1, r5
   1c100:	f003 f8a2 	bl	1f248 <__aeabi_dadd>
   1c104:	0004      	movs	r4, r0
   1c106:	000d      	movs	r5, r1
   1c108:	0002      	movs	r2, r0
   1c10a:	000b      	movs	r3, r1
   1c10c:	9802      	ldr	r0, [sp, #8]
   1c10e:	9903      	ldr	r1, [sp, #12]
   1c110:	f003 f89a 	bl	1f248 <__aeabi_dadd>
   1c114:	2600      	movs	r6, #0
   1c116:	22e0      	movs	r2, #224	; 0xe0
   1c118:	4b6b      	ldr	r3, [pc, #428]	; (1c2c8 <__ieee754_pow+0x5f0>)
   1c11a:	0612      	lsls	r2, r2, #24
   1c11c:	0030      	movs	r0, r6
   1c11e:	000f      	movs	r7, r1
   1c120:	f003 ffd6 	bl	200d0 <__aeabi_dmul>
   1c124:	9a02      	ldr	r2, [sp, #8]
   1c126:	9b03      	ldr	r3, [sp, #12]
   1c128:	9004      	str	r0, [sp, #16]
   1c12a:	9105      	str	r1, [sp, #20]
   1c12c:	0030      	movs	r0, r6
   1c12e:	0039      	movs	r1, r7
   1c130:	f004 fa4e 	bl	205d0 <__aeabi_dsub>
   1c134:	0002      	movs	r2, r0
   1c136:	000b      	movs	r3, r1
   1c138:	0020      	movs	r0, r4
   1c13a:	0029      	movs	r1, r5
   1c13c:	f004 fa48 	bl	205d0 <__aeabi_dsub>
   1c140:	4a62      	ldr	r2, [pc, #392]	; (1c2cc <__ieee754_pow+0x5f4>)
   1c142:	4b61      	ldr	r3, [pc, #388]	; (1c2c8 <__ieee754_pow+0x5f0>)
   1c144:	f003 ffc4 	bl	200d0 <__aeabi_dmul>
   1c148:	4a61      	ldr	r2, [pc, #388]	; (1c2d0 <__ieee754_pow+0x5f8>)
   1c14a:	0004      	movs	r4, r0
   1c14c:	000d      	movs	r5, r1
   1c14e:	4b61      	ldr	r3, [pc, #388]	; (1c2d4 <__ieee754_pow+0x5fc>)
   1c150:	0030      	movs	r0, r6
   1c152:	0039      	movs	r1, r7
   1c154:	f003 ffbc 	bl	200d0 <__aeabi_dmul>
   1c158:	0002      	movs	r2, r0
   1c15a:	000b      	movs	r3, r1
   1c15c:	0020      	movs	r0, r4
   1c15e:	0029      	movs	r1, r5
   1c160:	f003 f872 	bl	1f248 <__aeabi_dadd>
   1c164:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1c166:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1c168:	f003 f86e 	bl	1f248 <__aeabi_dadd>
   1c16c:	0006      	movs	r6, r0
   1c16e:	4648      	mov	r0, r9
   1c170:	000f      	movs	r7, r1
   1c172:	f004 fd97 	bl	20ca4 <__aeabi_i2d>
   1c176:	0004      	movs	r4, r0
   1c178:	000d      	movs	r5, r1
   1c17a:	9804      	ldr	r0, [sp, #16]
   1c17c:	9905      	ldr	r1, [sp, #20]
   1c17e:	0032      	movs	r2, r6
   1c180:	003b      	movs	r3, r7
   1c182:	f003 f861 	bl	1f248 <__aeabi_dadd>
   1c186:	9a08      	ldr	r2, [sp, #32]
   1c188:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c18a:	f003 f85d 	bl	1f248 <__aeabi_dadd>
   1c18e:	0022      	movs	r2, r4
   1c190:	002b      	movs	r3, r5
   1c192:	f003 f859 	bl	1f248 <__aeabi_dadd>
   1c196:	2000      	movs	r0, #0
   1c198:	0022      	movs	r2, r4
   1c19a:	002b      	movs	r3, r5
   1c19c:	9002      	str	r0, [sp, #8]
   1c19e:	9103      	str	r1, [sp, #12]
   1c1a0:	f004 fa16 	bl	205d0 <__aeabi_dsub>
   1c1a4:	9a08      	ldr	r2, [sp, #32]
   1c1a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c1a8:	f004 fa12 	bl	205d0 <__aeabi_dsub>
   1c1ac:	9a04      	ldr	r2, [sp, #16]
   1c1ae:	9b05      	ldr	r3, [sp, #20]
   1c1b0:	f004 fa0e 	bl	205d0 <__aeabi_dsub>
   1c1b4:	0002      	movs	r2, r0
   1c1b6:	000b      	movs	r3, r1
   1c1b8:	0030      	movs	r0, r6
   1c1ba:	0039      	movs	r1, r7
   1c1bc:	f004 fa08 	bl	205d0 <__aeabi_dsub>
   1c1c0:	9004      	str	r0, [sp, #16]
   1c1c2:	9105      	str	r1, [sp, #20]
   1c1c4:	465b      	mov	r3, fp
   1c1c6:	4642      	mov	r2, r8
   1c1c8:	3b01      	subs	r3, #1
   1c1ca:	4313      	orrs	r3, r2
   1c1cc:	d100      	bne.n	1c1d0 <__ieee754_pow+0x4f8>
   1c1ce:	e1ab      	b.n	1c528 <__ieee754_pow+0x850>
   1c1d0:	2300      	movs	r3, #0
   1c1d2:	4c2c      	ldr	r4, [pc, #176]	; (1c284 <__ieee754_pow+0x5ac>)
   1c1d4:	9306      	str	r3, [sp, #24]
   1c1d6:	9407      	str	r4, [sp, #28]
   1c1d8:	9800      	ldr	r0, [sp, #0]
   1c1da:	9901      	ldr	r1, [sp, #4]
   1c1dc:	2600      	movs	r6, #0
   1c1de:	000b      	movs	r3, r1
   1c1e0:	0032      	movs	r2, r6
   1c1e2:	000f      	movs	r7, r1
   1c1e4:	f004 f9f4 	bl	205d0 <__aeabi_dsub>
   1c1e8:	9a02      	ldr	r2, [sp, #8]
   1c1ea:	9b03      	ldr	r3, [sp, #12]
   1c1ec:	f003 ff70 	bl	200d0 <__aeabi_dmul>
   1c1f0:	9a00      	ldr	r2, [sp, #0]
   1c1f2:	9b01      	ldr	r3, [sp, #4]
   1c1f4:	0004      	movs	r4, r0
   1c1f6:	000d      	movs	r5, r1
   1c1f8:	9804      	ldr	r0, [sp, #16]
   1c1fa:	9905      	ldr	r1, [sp, #20]
   1c1fc:	f003 ff68 	bl	200d0 <__aeabi_dmul>
   1c200:	0002      	movs	r2, r0
   1c202:	000b      	movs	r3, r1
   1c204:	0020      	movs	r0, r4
   1c206:	0029      	movs	r1, r5
   1c208:	f003 f81e 	bl	1f248 <__aeabi_dadd>
   1c20c:	0004      	movs	r4, r0
   1c20e:	000d      	movs	r5, r1
   1c210:	9802      	ldr	r0, [sp, #8]
   1c212:	9903      	ldr	r1, [sp, #12]
   1c214:	0032      	movs	r2, r6
   1c216:	003b      	movs	r3, r7
   1c218:	9400      	str	r4, [sp, #0]
   1c21a:	9501      	str	r5, [sp, #4]
   1c21c:	f003 ff58 	bl	200d0 <__aeabi_dmul>
   1c220:	0002      	movs	r2, r0
   1c222:	000b      	movs	r3, r1
   1c224:	0006      	movs	r6, r0
   1c226:	000f      	movs	r7, r1
   1c228:	0020      	movs	r0, r4
   1c22a:	0029      	movs	r1, r5
   1c22c:	f003 f80c 	bl	1f248 <__aeabi_dadd>
   1c230:	4b29      	ldr	r3, [pc, #164]	; (1c2d8 <__ieee754_pow+0x600>)
   1c232:	0004      	movs	r4, r0
   1c234:	000d      	movs	r5, r1
   1c236:	0002      	movs	r2, r0
   1c238:	468b      	mov	fp, r1
   1c23a:	4299      	cmp	r1, r3
   1c23c:	dc00      	bgt.n	1c240 <__ieee754_pow+0x568>
   1c23e:	e14f      	b.n	1c4e0 <__ieee754_pow+0x808>
   1c240:	4b26      	ldr	r3, [pc, #152]	; (1c2dc <__ieee754_pow+0x604>)
   1c242:	18cb      	adds	r3, r1, r3
   1c244:	4303      	orrs	r3, r0
   1c246:	d000      	beq.n	1c24a <__ieee754_pow+0x572>
   1c248:	e1e2      	b.n	1c610 <__ieee754_pow+0x938>
   1c24a:	9800      	ldr	r0, [sp, #0]
   1c24c:	9901      	ldr	r1, [sp, #4]
   1c24e:	4a24      	ldr	r2, [pc, #144]	; (1c2e0 <__ieee754_pow+0x608>)
   1c250:	4b24      	ldr	r3, [pc, #144]	; (1c2e4 <__ieee754_pow+0x60c>)
   1c252:	f002 fff9 	bl	1f248 <__aeabi_dadd>
   1c256:	0032      	movs	r2, r6
   1c258:	9002      	str	r0, [sp, #8]
   1c25a:	9103      	str	r1, [sp, #12]
   1c25c:	003b      	movs	r3, r7
   1c25e:	0020      	movs	r0, r4
   1c260:	0029      	movs	r1, r5
   1c262:	f004 f9b5 	bl	205d0 <__aeabi_dsub>
   1c266:	0002      	movs	r2, r0
   1c268:	000b      	movs	r3, r1
   1c26a:	9802      	ldr	r0, [sp, #8]
   1c26c:	9903      	ldr	r1, [sp, #12]
   1c26e:	f002 f80b 	bl	1e288 <__aeabi_dcmpgt>
   1c272:	46aa      	mov	sl, r5
   1c274:	e038      	b.n	1c2e8 <__ieee754_pow+0x610>
   1c276:	46c0      	nop			; (mov r8, r8)
   1c278:	000fffff 	.word	0x000fffff
   1c27c:	43400000 	.word	0x43400000
   1c280:	fffffc01 	.word	0xfffffc01
   1c284:	3ff00000 	.word	0x3ff00000
   1c288:	0003988e 	.word	0x0003988e
   1c28c:	000bb679 	.word	0x000bb679
   1c290:	fff00000 	.word	0xfff00000
   1c294:	4a454eef 	.word	0x4a454eef
   1c298:	3fca7e28 	.word	0x3fca7e28
   1c29c:	93c9db65 	.word	0x93c9db65
   1c2a0:	3fcd864a 	.word	0x3fcd864a
   1c2a4:	a91d4101 	.word	0xa91d4101
   1c2a8:	3fd17460 	.word	0x3fd17460
   1c2ac:	518f264d 	.word	0x518f264d
   1c2b0:	3fd55555 	.word	0x3fd55555
   1c2b4:	db6fabff 	.word	0xdb6fabff
   1c2b8:	3fdb6db6 	.word	0x3fdb6db6
   1c2bc:	33333303 	.word	0x33333303
   1c2c0:	3fe33333 	.word	0x3fe33333
   1c2c4:	40080000 	.word	0x40080000
   1c2c8:	3feec709 	.word	0x3feec709
   1c2cc:	dc3a03fd 	.word	0xdc3a03fd
   1c2d0:	145b01f5 	.word	0x145b01f5
   1c2d4:	be3e2fe0 	.word	0xbe3e2fe0
   1c2d8:	408fffff 	.word	0x408fffff
   1c2dc:	bf700000 	.word	0xbf700000
   1c2e0:	652b82fe 	.word	0x652b82fe
   1c2e4:	3c971547 	.word	0x3c971547
   1c2e8:	2800      	cmp	r0, #0
   1c2ea:	d000      	beq.n	1c2ee <__ieee754_pow+0x616>
   1c2ec:	e190      	b.n	1c610 <__ieee754_pow+0x938>
   1c2ee:	4aec      	ldr	r2, [pc, #944]	; (1c6a0 <__ieee754_pow+0x9c8>)
   1c2f0:	4653      	mov	r3, sl
   1c2f2:	4694      	mov	ip, r2
   1c2f4:	2280      	movs	r2, #128	; 0x80
   1c2f6:	0352      	lsls	r2, r2, #13
   1c2f8:	0011      	movs	r1, r2
   1c2fa:	151b      	asrs	r3, r3, #20
   1c2fc:	4463      	add	r3, ip
   1c2fe:	4119      	asrs	r1, r3
   1c300:	000b      	movs	r3, r1
   1c302:	4690      	mov	r8, r2
   1c304:	4ae7      	ldr	r2, [pc, #924]	; (1c6a4 <__ieee754_pow+0x9cc>)
   1c306:	445b      	add	r3, fp
   1c308:	4694      	mov	ip, r2
   1c30a:	005c      	lsls	r4, r3, #1
   1c30c:	0d64      	lsrs	r4, r4, #21
   1c30e:	4de6      	ldr	r5, [pc, #920]	; (1c6a8 <__ieee754_pow+0x9d0>)
   1c310:	4464      	add	r4, ip
   1c312:	4125      	asrs	r5, r4
   1c314:	001a      	movs	r2, r3
   1c316:	43aa      	bics	r2, r5
   1c318:	0011      	movs	r1, r2
   1c31a:	4642      	mov	r2, r8
   1c31c:	031b      	lsls	r3, r3, #12
   1c31e:	0b1b      	lsrs	r3, r3, #12
   1c320:	4313      	orrs	r3, r2
   1c322:	2214      	movs	r2, #20
   1c324:	1b14      	subs	r4, r2, r4
   1c326:	4123      	asrs	r3, r4
   1c328:	4699      	mov	r9, r3
   1c32a:	465b      	mov	r3, fp
   1c32c:	2000      	movs	r0, #0
   1c32e:	2b00      	cmp	r3, #0
   1c330:	da00      	bge.n	1c334 <__ieee754_pow+0x65c>
   1c332:	e1b0      	b.n	1c696 <__ieee754_pow+0x9be>
   1c334:	0002      	movs	r2, r0
   1c336:	000b      	movs	r3, r1
   1c338:	0030      	movs	r0, r6
   1c33a:	0039      	movs	r1, r7
   1c33c:	f004 f948 	bl	205d0 <__aeabi_dsub>
   1c340:	000b      	movs	r3, r1
   1c342:	0002      	movs	r2, r0
   1c344:	0006      	movs	r6, r0
   1c346:	000f      	movs	r7, r1
   1c348:	9800      	ldr	r0, [sp, #0]
   1c34a:	9901      	ldr	r1, [sp, #4]
   1c34c:	f002 ff7c 	bl	1f248 <__aeabi_dadd>
   1c350:	464b      	mov	r3, r9
   1c352:	051b      	lsls	r3, r3, #20
   1c354:	000d      	movs	r5, r1
   1c356:	4698      	mov	r8, r3
   1c358:	2400      	movs	r4, #0
   1c35a:	2200      	movs	r2, #0
   1c35c:	4bd3      	ldr	r3, [pc, #844]	; (1c6ac <__ieee754_pow+0x9d4>)
   1c35e:	0020      	movs	r0, r4
   1c360:	0029      	movs	r1, r5
   1c362:	f003 feb5 	bl	200d0 <__aeabi_dmul>
   1c366:	0032      	movs	r2, r6
   1c368:	9002      	str	r0, [sp, #8]
   1c36a:	9103      	str	r1, [sp, #12]
   1c36c:	003b      	movs	r3, r7
   1c36e:	0020      	movs	r0, r4
   1c370:	0029      	movs	r1, r5
   1c372:	f004 f92d 	bl	205d0 <__aeabi_dsub>
   1c376:	0002      	movs	r2, r0
   1c378:	000b      	movs	r3, r1
   1c37a:	9800      	ldr	r0, [sp, #0]
   1c37c:	9901      	ldr	r1, [sp, #4]
   1c37e:	f004 f927 	bl	205d0 <__aeabi_dsub>
   1c382:	4acb      	ldr	r2, [pc, #812]	; (1c6b0 <__ieee754_pow+0x9d8>)
   1c384:	4bcb      	ldr	r3, [pc, #812]	; (1c6b4 <__ieee754_pow+0x9dc>)
   1c386:	f003 fea3 	bl	200d0 <__aeabi_dmul>
   1c38a:	4acb      	ldr	r2, [pc, #812]	; (1c6b8 <__ieee754_pow+0x9e0>)
   1c38c:	0006      	movs	r6, r0
   1c38e:	000f      	movs	r7, r1
   1c390:	4bca      	ldr	r3, [pc, #808]	; (1c6bc <__ieee754_pow+0x9e4>)
   1c392:	0020      	movs	r0, r4
   1c394:	0029      	movs	r1, r5
   1c396:	f003 fe9b 	bl	200d0 <__aeabi_dmul>
   1c39a:	0002      	movs	r2, r0
   1c39c:	000b      	movs	r3, r1
   1c39e:	0030      	movs	r0, r6
   1c3a0:	0039      	movs	r1, r7
   1c3a2:	f002 ff51 	bl	1f248 <__aeabi_dadd>
   1c3a6:	0004      	movs	r4, r0
   1c3a8:	000d      	movs	r5, r1
   1c3aa:	0002      	movs	r2, r0
   1c3ac:	000b      	movs	r3, r1
   1c3ae:	9802      	ldr	r0, [sp, #8]
   1c3b0:	9903      	ldr	r1, [sp, #12]
   1c3b2:	f002 ff49 	bl	1f248 <__aeabi_dadd>
   1c3b6:	9a02      	ldr	r2, [sp, #8]
   1c3b8:	9b03      	ldr	r3, [sp, #12]
   1c3ba:	0006      	movs	r6, r0
   1c3bc:	000f      	movs	r7, r1
   1c3be:	f004 f907 	bl	205d0 <__aeabi_dsub>
   1c3c2:	0002      	movs	r2, r0
   1c3c4:	000b      	movs	r3, r1
   1c3c6:	0020      	movs	r0, r4
   1c3c8:	0029      	movs	r1, r5
   1c3ca:	f004 f901 	bl	205d0 <__aeabi_dsub>
   1c3ce:	0032      	movs	r2, r6
   1c3d0:	9000      	str	r0, [sp, #0]
   1c3d2:	9101      	str	r1, [sp, #4]
   1c3d4:	003b      	movs	r3, r7
   1c3d6:	0030      	movs	r0, r6
   1c3d8:	0039      	movs	r1, r7
   1c3da:	f003 fe79 	bl	200d0 <__aeabi_dmul>
   1c3de:	0004      	movs	r4, r0
   1c3e0:	000d      	movs	r5, r1
   1c3e2:	4ab7      	ldr	r2, [pc, #732]	; (1c6c0 <__ieee754_pow+0x9e8>)
   1c3e4:	4bb7      	ldr	r3, [pc, #732]	; (1c6c4 <__ieee754_pow+0x9ec>)
   1c3e6:	f003 fe73 	bl	200d0 <__aeabi_dmul>
   1c3ea:	4ab7      	ldr	r2, [pc, #732]	; (1c6c8 <__ieee754_pow+0x9f0>)
   1c3ec:	4bb7      	ldr	r3, [pc, #732]	; (1c6cc <__ieee754_pow+0x9f4>)
   1c3ee:	f004 f8ef 	bl	205d0 <__aeabi_dsub>
   1c3f2:	0022      	movs	r2, r4
   1c3f4:	002b      	movs	r3, r5
   1c3f6:	f003 fe6b 	bl	200d0 <__aeabi_dmul>
   1c3fa:	4ab5      	ldr	r2, [pc, #724]	; (1c6d0 <__ieee754_pow+0x9f8>)
   1c3fc:	4bb5      	ldr	r3, [pc, #724]	; (1c6d4 <__ieee754_pow+0x9fc>)
   1c3fe:	f002 ff23 	bl	1f248 <__aeabi_dadd>
   1c402:	0022      	movs	r2, r4
   1c404:	002b      	movs	r3, r5
   1c406:	f003 fe63 	bl	200d0 <__aeabi_dmul>
   1c40a:	4ab3      	ldr	r2, [pc, #716]	; (1c6d8 <__ieee754_pow+0xa00>)
   1c40c:	4bb3      	ldr	r3, [pc, #716]	; (1c6dc <__ieee754_pow+0xa04>)
   1c40e:	f004 f8df 	bl	205d0 <__aeabi_dsub>
   1c412:	0022      	movs	r2, r4
   1c414:	002b      	movs	r3, r5
   1c416:	f003 fe5b 	bl	200d0 <__aeabi_dmul>
   1c41a:	4ab1      	ldr	r2, [pc, #708]	; (1c6e0 <__ieee754_pow+0xa08>)
   1c41c:	4bb1      	ldr	r3, [pc, #708]	; (1c6e4 <__ieee754_pow+0xa0c>)
   1c41e:	f002 ff13 	bl	1f248 <__aeabi_dadd>
   1c422:	0022      	movs	r2, r4
   1c424:	002b      	movs	r3, r5
   1c426:	f003 fe53 	bl	200d0 <__aeabi_dmul>
   1c42a:	0002      	movs	r2, r0
   1c42c:	000b      	movs	r3, r1
   1c42e:	0030      	movs	r0, r6
   1c430:	0039      	movs	r1, r7
   1c432:	f004 f8cd 	bl	205d0 <__aeabi_dsub>
   1c436:	0004      	movs	r4, r0
   1c438:	000d      	movs	r5, r1
   1c43a:	0002      	movs	r2, r0
   1c43c:	000b      	movs	r3, r1
   1c43e:	0030      	movs	r0, r6
   1c440:	0039      	movs	r1, r7
   1c442:	f003 fe45 	bl	200d0 <__aeabi_dmul>
   1c446:	2380      	movs	r3, #128	; 0x80
   1c448:	9002      	str	r0, [sp, #8]
   1c44a:	9103      	str	r1, [sp, #12]
   1c44c:	2200      	movs	r2, #0
   1c44e:	05db      	lsls	r3, r3, #23
   1c450:	0020      	movs	r0, r4
   1c452:	0029      	movs	r1, r5
   1c454:	f004 f8bc 	bl	205d0 <__aeabi_dsub>
   1c458:	0002      	movs	r2, r0
   1c45a:	000b      	movs	r3, r1
   1c45c:	9802      	ldr	r0, [sp, #8]
   1c45e:	9903      	ldr	r1, [sp, #12]
   1c460:	f003 fa02 	bl	1f868 <__aeabi_ddiv>
   1c464:	9a00      	ldr	r2, [sp, #0]
   1c466:	9b01      	ldr	r3, [sp, #4]
   1c468:	0004      	movs	r4, r0
   1c46a:	000d      	movs	r5, r1
   1c46c:	0030      	movs	r0, r6
   1c46e:	0039      	movs	r1, r7
   1c470:	f003 fe2e 	bl	200d0 <__aeabi_dmul>
   1c474:	9a00      	ldr	r2, [sp, #0]
   1c476:	9b01      	ldr	r3, [sp, #4]
   1c478:	f002 fee6 	bl	1f248 <__aeabi_dadd>
   1c47c:	0002      	movs	r2, r0
   1c47e:	000b      	movs	r3, r1
   1c480:	0020      	movs	r0, r4
   1c482:	0029      	movs	r1, r5
   1c484:	f004 f8a4 	bl	205d0 <__aeabi_dsub>
   1c488:	0032      	movs	r2, r6
   1c48a:	003b      	movs	r3, r7
   1c48c:	f004 f8a0 	bl	205d0 <__aeabi_dsub>
   1c490:	0002      	movs	r2, r0
   1c492:	000b      	movs	r3, r1
   1c494:	2000      	movs	r0, #0
   1c496:	4994      	ldr	r1, [pc, #592]	; (1c6e8 <__ieee754_pow+0xa10>)
   1c498:	f004 f89a 	bl	205d0 <__aeabi_dsub>
   1c49c:	4643      	mov	r3, r8
   1c49e:	185b      	adds	r3, r3, r1
   1c4a0:	151a      	asrs	r2, r3, #20
   1c4a2:	2a00      	cmp	r2, #0
   1c4a4:	dc00      	bgt.n	1c4a8 <__ieee754_pow+0x7d0>
   1c4a6:	e149      	b.n	1c73c <__ieee754_pow+0xa64>
   1c4a8:	0019      	movs	r1, r3
   1c4aa:	9a06      	ldr	r2, [sp, #24]
   1c4ac:	9b07      	ldr	r3, [sp, #28]
   1c4ae:	f003 fe0f 	bl	200d0 <__aeabi_dmul>
   1c4b2:	e459      	b.n	1bd68 <__ieee754_pow+0x90>
   1c4b4:	003a      	movs	r2, r7
   1c4b6:	0033      	movs	r3, r6
   1c4b8:	0038      	movs	r0, r7
   1c4ba:	0031      	movs	r1, r6
   1c4bc:	f003 fe08 	bl	200d0 <__aeabi_dmul>
   1c4c0:	e452      	b.n	1bd68 <__ieee754_pow+0x90>
   1c4c2:	4653      	mov	r3, sl
   1c4c4:	2b00      	cmp	r3, #0
   1c4c6:	db00      	blt.n	1c4ca <__ieee754_pow+0x7f2>
   1c4c8:	e4d9      	b.n	1be7e <__ieee754_pow+0x1a6>
   1c4ca:	9c00      	ldr	r4, [sp, #0]
   1c4cc:	9d01      	ldr	r5, [sp, #4]
   1c4ce:	2280      	movs	r2, #128	; 0x80
   1c4d0:	0612      	lsls	r2, r2, #24
   1c4d2:	002b      	movs	r3, r5
   1c4d4:	4694      	mov	ip, r2
   1c4d6:	4463      	add	r3, ip
   1c4d8:	0020      	movs	r0, r4
   1c4da:	0019      	movs	r1, r3
   1c4dc:	f7ff fc44 	bl	1bd68 <__ieee754_pow+0x90>
   1c4e0:	004b      	lsls	r3, r1, #1
   1c4e2:	085b      	lsrs	r3, r3, #1
   1c4e4:	469a      	mov	sl, r3
   1c4e6:	4b81      	ldr	r3, [pc, #516]	; (1c6ec <__ieee754_pow+0xa14>)
   1c4e8:	459a      	cmp	sl, r3
   1c4ea:	dc00      	bgt.n	1c4ee <__ieee754_pow+0x816>
   1c4ec:	e0b1      	b.n	1c652 <__ieee754_pow+0x97a>
   1c4ee:	4b80      	ldr	r3, [pc, #512]	; (1c6f0 <__ieee754_pow+0xa18>)
   1c4f0:	445b      	add	r3, fp
   1c4f2:	431a      	orrs	r2, r3
   1c4f4:	d10c      	bne.n	1c510 <__ieee754_pow+0x838>
   1c4f6:	0032      	movs	r2, r6
   1c4f8:	003b      	movs	r3, r7
   1c4fa:	f004 f869 	bl	205d0 <__aeabi_dsub>
   1c4fe:	0002      	movs	r2, r0
   1c500:	000b      	movs	r3, r1
   1c502:	9800      	ldr	r0, [sp, #0]
   1c504:	9901      	ldr	r1, [sp, #4]
   1c506:	f001 feb5 	bl	1e274 <__aeabi_dcmple>
   1c50a:	2800      	cmp	r0, #0
   1c50c:	d100      	bne.n	1c510 <__ieee754_pow+0x838>
   1c50e:	e6ee      	b.n	1c2ee <__ieee754_pow+0x616>
   1c510:	9806      	ldr	r0, [sp, #24]
   1c512:	9907      	ldr	r1, [sp, #28]
   1c514:	4a77      	ldr	r2, [pc, #476]	; (1c6f4 <__ieee754_pow+0xa1c>)
   1c516:	4b78      	ldr	r3, [pc, #480]	; (1c6f8 <__ieee754_pow+0xa20>)
   1c518:	f003 fdda 	bl	200d0 <__aeabi_dmul>
   1c51c:	4a75      	ldr	r2, [pc, #468]	; (1c6f4 <__ieee754_pow+0xa1c>)
   1c51e:	4b76      	ldr	r3, [pc, #472]	; (1c6f8 <__ieee754_pow+0xa20>)
   1c520:	f003 fdd6 	bl	200d0 <__aeabi_dmul>
   1c524:	f7ff fc20 	bl	1bd68 <__ieee754_pow+0x90>
   1c528:	2300      	movs	r3, #0
   1c52a:	4c74      	ldr	r4, [pc, #464]	; (1c6fc <__ieee754_pow+0xa24>)
   1c52c:	9306      	str	r3, [sp, #24]
   1c52e:	9407      	str	r4, [sp, #28]
   1c530:	e652      	b.n	1c1d8 <__ieee754_pow+0x500>
   1c532:	0002      	movs	r2, r0
   1c534:	000b      	movs	r3, r1
   1c536:	2000      	movs	r0, #0
   1c538:	496b      	ldr	r1, [pc, #428]	; (1c6e8 <__ieee754_pow+0xa10>)
   1c53a:	f003 f995 	bl	1f868 <__aeabi_ddiv>
   1c53e:	f7ff fc32 	bl	1bda6 <__ieee754_pow+0xce>
   1c542:	4653      	mov	r3, sl
   1c544:	2b00      	cmp	r3, #0
   1c546:	db00      	blt.n	1c54a <__ieee754_pow+0x872>
   1c548:	e499      	b.n	1be7e <__ieee754_pow+0x1a6>
   1c54a:	e454      	b.n	1bdf6 <__ieee754_pow+0x11e>
   1c54c:	4b6c      	ldr	r3, [pc, #432]	; (1c700 <__ieee754_pow+0xa28>)
   1c54e:	429c      	cmp	r4, r3
   1c550:	ddf7      	ble.n	1c542 <__ieee754_pow+0x86a>
   1c552:	4b65      	ldr	r3, [pc, #404]	; (1c6e8 <__ieee754_pow+0xa10>)
   1c554:	429c      	cmp	r4, r3
   1c556:	dd00      	ble.n	1c55a <__ieee754_pow+0x882>
   1c558:	e44a      	b.n	1bdf0 <__ieee754_pow+0x118>
   1c55a:	2200      	movs	r2, #0
   1c55c:	4b62      	ldr	r3, [pc, #392]	; (1c6e8 <__ieee754_pow+0xa10>)
   1c55e:	f004 f837 	bl	205d0 <__aeabi_dsub>
   1c562:	22c0      	movs	r2, #192	; 0xc0
   1c564:	4b67      	ldr	r3, [pc, #412]	; (1c704 <__ieee754_pow+0xa2c>)
   1c566:	05d2      	lsls	r2, r2, #23
   1c568:	0004      	movs	r4, r0
   1c56a:	000d      	movs	r5, r1
   1c56c:	f003 fdb0 	bl	200d0 <__aeabi_dmul>
   1c570:	4a65      	ldr	r2, [pc, #404]	; (1c708 <__ieee754_pow+0xa30>)
   1c572:	0006      	movs	r6, r0
   1c574:	000f      	movs	r7, r1
   1c576:	4b65      	ldr	r3, [pc, #404]	; (1c70c <__ieee754_pow+0xa34>)
   1c578:	0020      	movs	r0, r4
   1c57a:	0029      	movs	r1, r5
   1c57c:	f003 fda8 	bl	200d0 <__aeabi_dmul>
   1c580:	2200      	movs	r2, #0
   1c582:	9002      	str	r0, [sp, #8]
   1c584:	9103      	str	r1, [sp, #12]
   1c586:	4b62      	ldr	r3, [pc, #392]	; (1c710 <__ieee754_pow+0xa38>)
   1c588:	0020      	movs	r0, r4
   1c58a:	0029      	movs	r1, r5
   1c58c:	f003 fda0 	bl	200d0 <__aeabi_dmul>
   1c590:	0002      	movs	r2, r0
   1c592:	000b      	movs	r3, r1
   1c594:	485f      	ldr	r0, [pc, #380]	; (1c714 <__ieee754_pow+0xa3c>)
   1c596:	4960      	ldr	r1, [pc, #384]	; (1c718 <__ieee754_pow+0xa40>)
   1c598:	f004 f81a 	bl	205d0 <__aeabi_dsub>
   1c59c:	0022      	movs	r2, r4
   1c59e:	002b      	movs	r3, r5
   1c5a0:	f003 fd96 	bl	200d0 <__aeabi_dmul>
   1c5a4:	0002      	movs	r2, r0
   1c5a6:	000b      	movs	r3, r1
   1c5a8:	2000      	movs	r0, #0
   1c5aa:	495c      	ldr	r1, [pc, #368]	; (1c71c <__ieee754_pow+0xa44>)
   1c5ac:	f004 f810 	bl	205d0 <__aeabi_dsub>
   1c5b0:	0022      	movs	r2, r4
   1c5b2:	9004      	str	r0, [sp, #16]
   1c5b4:	9105      	str	r1, [sp, #20]
   1c5b6:	002b      	movs	r3, r5
   1c5b8:	0020      	movs	r0, r4
   1c5ba:	0029      	movs	r1, r5
   1c5bc:	f003 fd88 	bl	200d0 <__aeabi_dmul>
   1c5c0:	0002      	movs	r2, r0
   1c5c2:	000b      	movs	r3, r1
   1c5c4:	9804      	ldr	r0, [sp, #16]
   1c5c6:	9905      	ldr	r1, [sp, #20]
   1c5c8:	f003 fd82 	bl	200d0 <__aeabi_dmul>
   1c5cc:	4a54      	ldr	r2, [pc, #336]	; (1c720 <__ieee754_pow+0xa48>)
   1c5ce:	4b4d      	ldr	r3, [pc, #308]	; (1c704 <__ieee754_pow+0xa2c>)
   1c5d0:	f003 fd7e 	bl	200d0 <__aeabi_dmul>
   1c5d4:	0002      	movs	r2, r0
   1c5d6:	000b      	movs	r3, r1
   1c5d8:	9802      	ldr	r0, [sp, #8]
   1c5da:	9903      	ldr	r1, [sp, #12]
   1c5dc:	f003 fff8 	bl	205d0 <__aeabi_dsub>
   1c5e0:	0002      	movs	r2, r0
   1c5e2:	000b      	movs	r3, r1
   1c5e4:	0004      	movs	r4, r0
   1c5e6:	000d      	movs	r5, r1
   1c5e8:	0030      	movs	r0, r6
   1c5ea:	0039      	movs	r1, r7
   1c5ec:	f002 fe2c 	bl	1f248 <__aeabi_dadd>
   1c5f0:	2000      	movs	r0, #0
   1c5f2:	0032      	movs	r2, r6
   1c5f4:	003b      	movs	r3, r7
   1c5f6:	9002      	str	r0, [sp, #8]
   1c5f8:	9103      	str	r1, [sp, #12]
   1c5fa:	f003 ffe9 	bl	205d0 <__aeabi_dsub>
   1c5fe:	0002      	movs	r2, r0
   1c600:	000b      	movs	r3, r1
   1c602:	0020      	movs	r0, r4
   1c604:	0029      	movs	r1, r5
   1c606:	f003 ffe3 	bl	205d0 <__aeabi_dsub>
   1c60a:	9004      	str	r0, [sp, #16]
   1c60c:	9105      	str	r1, [sp, #20]
   1c60e:	e5d9      	b.n	1c1c4 <__ieee754_pow+0x4ec>
   1c610:	4a44      	ldr	r2, [pc, #272]	; (1c724 <__ieee754_pow+0xa4c>)
   1c612:	4b45      	ldr	r3, [pc, #276]	; (1c728 <__ieee754_pow+0xa50>)
   1c614:	9806      	ldr	r0, [sp, #24]
   1c616:	9907      	ldr	r1, [sp, #28]
   1c618:	f003 fd5a 	bl	200d0 <__aeabi_dmul>
   1c61c:	4a41      	ldr	r2, [pc, #260]	; (1c724 <__ieee754_pow+0xa4c>)
   1c61e:	4b42      	ldr	r3, [pc, #264]	; (1c728 <__ieee754_pow+0xa50>)
   1c620:	f003 fd56 	bl	200d0 <__aeabi_dmul>
   1c624:	f7ff fba0 	bl	1bd68 <__ieee754_pow+0x90>
   1c628:	2a00      	cmp	r2, #0
   1c62a:	d001      	beq.n	1c630 <__ieee754_pow+0x958>
   1c62c:	f7ff fba9 	bl	1bd82 <__ieee754_pow+0xaa>
   1c630:	3214      	adds	r2, #20
   1c632:	1ad3      	subs	r3, r2, r3
   1c634:	002a      	movs	r2, r5
   1c636:	411a      	asrs	r2, r3
   1c638:	0011      	movs	r1, r2
   1c63a:	4099      	lsls	r1, r3
   1c63c:	428d      	cmp	r5, r1
   1c63e:	d001      	beq.n	1c644 <__ieee754_pow+0x96c>
   1c640:	f7ff fb76 	bl	1bd30 <__ieee754_pow+0x58>
   1c644:	2301      	movs	r3, #1
   1c646:	401a      	ands	r2, r3
   1c648:	18db      	adds	r3, r3, r3
   1c64a:	1a9b      	subs	r3, r3, r2
   1c64c:	469b      	mov	fp, r3
   1c64e:	f7ff fb6f 	bl	1bd30 <__ieee754_pow+0x58>
   1c652:	2200      	movs	r2, #0
   1c654:	4b31      	ldr	r3, [pc, #196]	; (1c71c <__ieee754_pow+0xa44>)
   1c656:	4690      	mov	r8, r2
   1c658:	4691      	mov	r9, r2
   1c65a:	459a      	cmp	sl, r3
   1c65c:	dc00      	bgt.n	1c660 <__ieee754_pow+0x988>
   1c65e:	e67b      	b.n	1c358 <__ieee754_pow+0x680>
   1c660:	e645      	b.n	1c2ee <__ieee754_pow+0x616>
   1c662:	0002      	movs	r2, r0
   1c664:	000b      	movs	r3, r1
   1c666:	f003 ffb3 	bl	205d0 <__aeabi_dsub>
   1c66a:	0002      	movs	r2, r0
   1c66c:	000b      	movs	r3, r1
   1c66e:	f003 f8fb 	bl	1f868 <__aeabi_ddiv>
   1c672:	f7ff fb79 	bl	1bd68 <__ieee754_pow+0x90>
   1c676:	2380      	movs	r3, #128	; 0x80
   1c678:	4c2c      	ldr	r4, [pc, #176]	; (1c72c <__ieee754_pow+0xa54>)
   1c67a:	05db      	lsls	r3, r3, #23
   1c67c:	9308      	str	r3, [sp, #32]
   1c67e:	9409      	str	r4, [sp, #36]	; 0x24
   1c680:	4b2b      	ldr	r3, [pc, #172]	; (1c730 <__ieee754_pow+0xa58>)
   1c682:	4c2c      	ldr	r4, [pc, #176]	; (1c734 <__ieee754_pow+0xa5c>)
   1c684:	2200      	movs	r2, #0
   1c686:	930c      	str	r3, [sp, #48]	; 0x30
   1c688:	940d      	str	r4, [sp, #52]	; 0x34
   1c68a:	2480      	movs	r4, #128	; 0x80
   1c68c:	4b2a      	ldr	r3, [pc, #168]	; (1c738 <__ieee754_pow+0xa60>)
   1c68e:	02e4      	lsls	r4, r4, #11
   1c690:	9206      	str	r2, [sp, #24]
   1c692:	9307      	str	r3, [sp, #28]
   1c694:	e449      	b.n	1bf2a <__ieee754_pow+0x252>
   1c696:	464b      	mov	r3, r9
   1c698:	425b      	negs	r3, r3
   1c69a:	4699      	mov	r9, r3
   1c69c:	e64a      	b.n	1c334 <__ieee754_pow+0x65c>
   1c69e:	46c0      	nop			; (mov r8, r8)
   1c6a0:	fffffc02 	.word	0xfffffc02
   1c6a4:	fffffc01 	.word	0xfffffc01
   1c6a8:	000fffff 	.word	0x000fffff
   1c6ac:	3fe62e43 	.word	0x3fe62e43
   1c6b0:	fefa39ef 	.word	0xfefa39ef
   1c6b4:	3fe62e42 	.word	0x3fe62e42
   1c6b8:	0ca86c39 	.word	0x0ca86c39
   1c6bc:	be205c61 	.word	0xbe205c61
   1c6c0:	72bea4d0 	.word	0x72bea4d0
   1c6c4:	3e663769 	.word	0x3e663769
   1c6c8:	c5d26bf1 	.word	0xc5d26bf1
   1c6cc:	3ebbbd41 	.word	0x3ebbbd41
   1c6d0:	af25de2c 	.word	0xaf25de2c
   1c6d4:	3f11566a 	.word	0x3f11566a
   1c6d8:	16bebd93 	.word	0x16bebd93
   1c6dc:	3f66c16c 	.word	0x3f66c16c
   1c6e0:	5555553e 	.word	0x5555553e
   1c6e4:	3fc55555 	.word	0x3fc55555
   1c6e8:	3ff00000 	.word	0x3ff00000
   1c6ec:	4090cbff 	.word	0x4090cbff
   1c6f0:	3f6f3400 	.word	0x3f6f3400
   1c6f4:	c2f8f359 	.word	0xc2f8f359
   1c6f8:	01a56e1f 	.word	0x01a56e1f
   1c6fc:	bff00000 	.word	0xbff00000
   1c700:	3feffffe 	.word	0x3feffffe
   1c704:	3ff71547 	.word	0x3ff71547
   1c708:	f85ddf44 	.word	0xf85ddf44
   1c70c:	3e54ae0b 	.word	0x3e54ae0b
   1c710:	3fd00000 	.word	0x3fd00000
   1c714:	55555555 	.word	0x55555555
   1c718:	3fd55555 	.word	0x3fd55555
   1c71c:	3fe00000 	.word	0x3fe00000
   1c720:	652b82fe 	.word	0x652b82fe
   1c724:	8800759c 	.word	0x8800759c
   1c728:	7e37e43c 	.word	0x7e37e43c
   1c72c:	3fe2b803 	.word	0x3fe2b803
   1c730:	43cfd006 	.word	0x43cfd006
   1c734:	3e4cfdeb 	.word	0x3e4cfdeb
   1c738:	3ff80000 	.word	0x3ff80000
   1c73c:	464a      	mov	r2, r9
   1c73e:	f001 fb93 	bl	1de68 <scalbn>
   1c742:	e6b2      	b.n	1c4aa <__ieee754_pow+0x7d2>

0001c744 <__ieee754_rem_pio2>:
   1c744:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c746:	464e      	mov	r6, r9
   1c748:	4645      	mov	r5, r8
   1c74a:	46de      	mov	lr, fp
   1c74c:	4657      	mov	r7, sl
   1c74e:	b5e0      	push	{r5, r6, r7, lr}
   1c750:	4bd4      	ldr	r3, [pc, #848]	; (1caa4 <__ieee754_rem_pio2+0x360>)
   1c752:	004c      	lsls	r4, r1, #1
   1c754:	b08f      	sub	sp, #60	; 0x3c
   1c756:	4690      	mov	r8, r2
   1c758:	4689      	mov	r9, r1
   1c75a:	0864      	lsrs	r4, r4, #1
   1c75c:	429c      	cmp	r4, r3
   1c75e:	dc00      	bgt.n	1c762 <__ieee754_rem_pio2+0x1e>
   1c760:	e087      	b.n	1c872 <__ieee754_rem_pio2+0x12e>
   1c762:	4bd1      	ldr	r3, [pc, #836]	; (1caa8 <__ieee754_rem_pio2+0x364>)
   1c764:	429c      	cmp	r4, r3
   1c766:	dc22      	bgt.n	1c7ae <__ieee754_rem_pio2+0x6a>
   1c768:	4ad0      	ldr	r2, [pc, #832]	; (1caac <__ieee754_rem_pio2+0x368>)
   1c76a:	2900      	cmp	r1, #0
   1c76c:	dc00      	bgt.n	1c770 <__ieee754_rem_pio2+0x2c>
   1c76e:	e1bf      	b.n	1caf0 <__ieee754_rem_pio2+0x3ac>
   1c770:	4bcf      	ldr	r3, [pc, #828]	; (1cab0 <__ieee754_rem_pio2+0x36c>)
   1c772:	f003 ff2d 	bl	205d0 <__aeabi_dsub>
   1c776:	4bce      	ldr	r3, [pc, #824]	; (1cab0 <__ieee754_rem_pio2+0x36c>)
   1c778:	0006      	movs	r6, r0
   1c77a:	000f      	movs	r7, r1
   1c77c:	429c      	cmp	r4, r3
   1c77e:	d100      	bne.n	1c782 <__ieee754_rem_pio2+0x3e>
   1c780:	e094      	b.n	1c8ac <__ieee754_rem_pio2+0x168>
   1c782:	4acc      	ldr	r2, [pc, #816]	; (1cab4 <__ieee754_rem_pio2+0x370>)
   1c784:	4bcc      	ldr	r3, [pc, #816]	; (1cab8 <__ieee754_rem_pio2+0x374>)
   1c786:	f003 ff23 	bl	205d0 <__aeabi_dsub>
   1c78a:	0002      	movs	r2, r0
   1c78c:	000b      	movs	r3, r1
   1c78e:	4641      	mov	r1, r8
   1c790:	0030      	movs	r0, r6
   1c792:	600a      	str	r2, [r1, #0]
   1c794:	604b      	str	r3, [r1, #4]
   1c796:	0039      	movs	r1, r7
   1c798:	f003 ff1a 	bl	205d0 <__aeabi_dsub>
   1c79c:	4bc6      	ldr	r3, [pc, #792]	; (1cab8 <__ieee754_rem_pio2+0x374>)
   1c79e:	4ac5      	ldr	r2, [pc, #788]	; (1cab4 <__ieee754_rem_pio2+0x370>)
   1c7a0:	f003 ff16 	bl	205d0 <__aeabi_dsub>
   1c7a4:	4643      	mov	r3, r8
   1c7a6:	2501      	movs	r5, #1
   1c7a8:	6098      	str	r0, [r3, #8]
   1c7aa:	60d9      	str	r1, [r3, #12]
   1c7ac:	e06b      	b.n	1c886 <__ieee754_rem_pio2+0x142>
   1c7ae:	4bc3      	ldr	r3, [pc, #780]	; (1cabc <__ieee754_rem_pio2+0x378>)
   1c7b0:	429c      	cmp	r4, r3
   1c7b2:	dc00      	bgt.n	1c7b6 <__ieee754_rem_pio2+0x72>
   1c7b4:	e097      	b.n	1c8e6 <__ieee754_rem_pio2+0x1a2>
   1c7b6:	4bc2      	ldr	r3, [pc, #776]	; (1cac0 <__ieee754_rem_pio2+0x37c>)
   1c7b8:	429c      	cmp	r4, r3
   1c7ba:	dc6c      	bgt.n	1c896 <__ieee754_rem_pio2+0x152>
   1c7bc:	4ac1      	ldr	r2, [pc, #772]	; (1cac4 <__ieee754_rem_pio2+0x380>)
   1c7be:	1523      	asrs	r3, r4, #20
   1c7c0:	4692      	mov	sl, r2
   1c7c2:	449a      	add	sl, r3
   1c7c4:	4651      	mov	r1, sl
   1c7c6:	0509      	lsls	r1, r1, #20
   1c7c8:	1a63      	subs	r3, r4, r1
   1c7ca:	0019      	movs	r1, r3
   1c7cc:	001d      	movs	r5, r3
   1c7ce:	0004      	movs	r4, r0
   1c7d0:	f004 fa34 	bl	20c3c <__aeabi_d2iz>
   1c7d4:	f004 fa66 	bl	20ca4 <__aeabi_i2d>
   1c7d8:	0002      	movs	r2, r0
   1c7da:	000b      	movs	r3, r1
   1c7dc:	0020      	movs	r0, r4
   1c7de:	0029      	movs	r1, r5
   1c7e0:	9208      	str	r2, [sp, #32]
   1c7e2:	9309      	str	r3, [sp, #36]	; 0x24
   1c7e4:	f003 fef4 	bl	205d0 <__aeabi_dsub>
   1c7e8:	2200      	movs	r2, #0
   1c7ea:	4bb7      	ldr	r3, [pc, #732]	; (1cac8 <__ieee754_rem_pio2+0x384>)
   1c7ec:	f003 fc70 	bl	200d0 <__aeabi_dmul>
   1c7f0:	000f      	movs	r7, r1
   1c7f2:	0006      	movs	r6, r0
   1c7f4:	f004 fa22 	bl	20c3c <__aeabi_d2iz>
   1c7f8:	f004 fa54 	bl	20ca4 <__aeabi_i2d>
   1c7fc:	0004      	movs	r4, r0
   1c7fe:	000d      	movs	r5, r1
   1c800:	0002      	movs	r2, r0
   1c802:	000b      	movs	r3, r1
   1c804:	0030      	movs	r0, r6
   1c806:	0039      	movs	r1, r7
   1c808:	940a      	str	r4, [sp, #40]	; 0x28
   1c80a:	950b      	str	r5, [sp, #44]	; 0x2c
   1c80c:	f003 fee0 	bl	205d0 <__aeabi_dsub>
   1c810:	2200      	movs	r2, #0
   1c812:	4bad      	ldr	r3, [pc, #692]	; (1cac8 <__ieee754_rem_pio2+0x384>)
   1c814:	f003 fc5c 	bl	200d0 <__aeabi_dmul>
   1c818:	2200      	movs	r2, #0
   1c81a:	2300      	movs	r3, #0
   1c81c:	900c      	str	r0, [sp, #48]	; 0x30
   1c81e:	910d      	str	r1, [sp, #52]	; 0x34
   1c820:	f001 fd18 	bl	1e254 <__aeabi_dcmpeq>
   1c824:	2800      	cmp	r0, #0
   1c826:	d100      	bne.n	1c82a <__ieee754_rem_pio2+0xe6>
   1c828:	e181      	b.n	1cb2e <__ieee754_rem_pio2+0x3ea>
   1c82a:	2300      	movs	r3, #0
   1c82c:	2200      	movs	r2, #0
   1c82e:	0020      	movs	r0, r4
   1c830:	0029      	movs	r1, r5
   1c832:	f001 fd0f 	bl	1e254 <__aeabi_dcmpeq>
   1c836:	4243      	negs	r3, r0
   1c838:	4143      	adcs	r3, r0
   1c83a:	3301      	adds	r3, #1
   1c83c:	4aa3      	ldr	r2, [pc, #652]	; (1cacc <__ieee754_rem_pio2+0x388>)
   1c83e:	4641      	mov	r1, r8
   1c840:	9201      	str	r2, [sp, #4]
   1c842:	2202      	movs	r2, #2
   1c844:	a808      	add	r0, sp, #32
   1c846:	9200      	str	r2, [sp, #0]
   1c848:	4652      	mov	r2, sl
   1c84a:	f000 fb8d 	bl	1cf68 <__kernel_rem_pio2>
   1c84e:	464b      	mov	r3, r9
   1c850:	0005      	movs	r5, r0
   1c852:	2b00      	cmp	r3, #0
   1c854:	da17      	bge.n	1c886 <__ieee754_rem_pio2+0x142>
   1c856:	2280      	movs	r2, #128	; 0x80
   1c858:	4643      	mov	r3, r8
   1c85a:	0612      	lsls	r2, r2, #24
   1c85c:	4694      	mov	ip, r2
   1c85e:	4642      	mov	r2, r8
   1c860:	685b      	ldr	r3, [r3, #4]
   1c862:	4245      	negs	r5, r0
   1c864:	4463      	add	r3, ip
   1c866:	6053      	str	r3, [r2, #4]
   1c868:	68d3      	ldr	r3, [r2, #12]
   1c86a:	4642      	mov	r2, r8
   1c86c:	4463      	add	r3, ip
   1c86e:	60d3      	str	r3, [r2, #12]
   1c870:	e009      	b.n	1c886 <__ieee754_rem_pio2+0x142>
   1c872:	000b      	movs	r3, r1
   1c874:	0002      	movs	r2, r0
   1c876:	4641      	mov	r1, r8
   1c878:	600a      	str	r2, [r1, #0]
   1c87a:	604b      	str	r3, [r1, #4]
   1c87c:	2200      	movs	r2, #0
   1c87e:	2300      	movs	r3, #0
   1c880:	2500      	movs	r5, #0
   1c882:	608a      	str	r2, [r1, #8]
   1c884:	60cb      	str	r3, [r1, #12]
   1c886:	0028      	movs	r0, r5
   1c888:	b00f      	add	sp, #60	; 0x3c
   1c88a:	bc3c      	pop	{r2, r3, r4, r5}
   1c88c:	4690      	mov	r8, r2
   1c88e:	4699      	mov	r9, r3
   1c890:	46a2      	mov	sl, r4
   1c892:	46ab      	mov	fp, r5
   1c894:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c896:	000b      	movs	r3, r1
   1c898:	0002      	movs	r2, r0
   1c89a:	f003 fe99 	bl	205d0 <__aeabi_dsub>
   1c89e:	4643      	mov	r3, r8
   1c8a0:	2500      	movs	r5, #0
   1c8a2:	6098      	str	r0, [r3, #8]
   1c8a4:	60d9      	str	r1, [r3, #12]
   1c8a6:	6018      	str	r0, [r3, #0]
   1c8a8:	6059      	str	r1, [r3, #4]
   1c8aa:	e7ec      	b.n	1c886 <__ieee754_rem_pio2+0x142>
   1c8ac:	22d3      	movs	r2, #211	; 0xd3
   1c8ae:	4b82      	ldr	r3, [pc, #520]	; (1cab8 <__ieee754_rem_pio2+0x374>)
   1c8b0:	0552      	lsls	r2, r2, #21
   1c8b2:	f003 fe8d 	bl	205d0 <__aeabi_dsub>
   1c8b6:	4a86      	ldr	r2, [pc, #536]	; (1cad0 <__ieee754_rem_pio2+0x38c>)
   1c8b8:	4b86      	ldr	r3, [pc, #536]	; (1cad4 <__ieee754_rem_pio2+0x390>)
   1c8ba:	000d      	movs	r5, r1
   1c8bc:	0004      	movs	r4, r0
   1c8be:	f003 fe87 	bl	205d0 <__aeabi_dsub>
   1c8c2:	0002      	movs	r2, r0
   1c8c4:	000b      	movs	r3, r1
   1c8c6:	4641      	mov	r1, r8
   1c8c8:	0020      	movs	r0, r4
   1c8ca:	600a      	str	r2, [r1, #0]
   1c8cc:	604b      	str	r3, [r1, #4]
   1c8ce:	0029      	movs	r1, r5
   1c8d0:	f003 fe7e 	bl	205d0 <__aeabi_dsub>
   1c8d4:	4b7f      	ldr	r3, [pc, #508]	; (1cad4 <__ieee754_rem_pio2+0x390>)
   1c8d6:	4a7e      	ldr	r2, [pc, #504]	; (1cad0 <__ieee754_rem_pio2+0x38c>)
   1c8d8:	f003 fe7a 	bl	205d0 <__aeabi_dsub>
   1c8dc:	4643      	mov	r3, r8
   1c8de:	2501      	movs	r5, #1
   1c8e0:	6098      	str	r0, [r3, #8]
   1c8e2:	60d9      	str	r1, [r3, #12]
   1c8e4:	e7cf      	b.n	1c886 <__ieee754_rem_pio2+0x142>
   1c8e6:	f001 fa07 	bl	1dcf8 <fabs>
   1c8ea:	4a7b      	ldr	r2, [pc, #492]	; (1cad8 <__ieee754_rem_pio2+0x394>)
   1c8ec:	4b7b      	ldr	r3, [pc, #492]	; (1cadc <__ieee754_rem_pio2+0x398>)
   1c8ee:	0006      	movs	r6, r0
   1c8f0:	000f      	movs	r7, r1
   1c8f2:	f003 fbed 	bl	200d0 <__aeabi_dmul>
   1c8f6:	2200      	movs	r2, #0
   1c8f8:	4b79      	ldr	r3, [pc, #484]	; (1cae0 <__ieee754_rem_pio2+0x39c>)
   1c8fa:	f002 fca5 	bl	1f248 <__aeabi_dadd>
   1c8fe:	f004 f99d 	bl	20c3c <__aeabi_d2iz>
   1c902:	0005      	movs	r5, r0
   1c904:	f004 f9ce 	bl	20ca4 <__aeabi_i2d>
   1c908:	4a68      	ldr	r2, [pc, #416]	; (1caac <__ieee754_rem_pio2+0x368>)
   1c90a:	4b69      	ldr	r3, [pc, #420]	; (1cab0 <__ieee754_rem_pio2+0x36c>)
   1c90c:	9004      	str	r0, [sp, #16]
   1c90e:	9105      	str	r1, [sp, #20]
   1c910:	f003 fbde 	bl	200d0 <__aeabi_dmul>
   1c914:	0002      	movs	r2, r0
   1c916:	000b      	movs	r3, r1
   1c918:	0030      	movs	r0, r6
   1c91a:	0039      	movs	r1, r7
   1c91c:	f003 fe58 	bl	205d0 <__aeabi_dsub>
   1c920:	4a64      	ldr	r2, [pc, #400]	; (1cab4 <__ieee754_rem_pio2+0x370>)
   1c922:	0006      	movs	r6, r0
   1c924:	000f      	movs	r7, r1
   1c926:	9804      	ldr	r0, [sp, #16]
   1c928:	9905      	ldr	r1, [sp, #20]
   1c92a:	4b63      	ldr	r3, [pc, #396]	; (1cab8 <__ieee754_rem_pio2+0x374>)
   1c92c:	f003 fbd0 	bl	200d0 <__aeabi_dmul>
   1c930:	9002      	str	r0, [sp, #8]
   1c932:	9103      	str	r1, [sp, #12]
   1c934:	2d1f      	cmp	r5, #31
   1c936:	dc33      	bgt.n	1c9a0 <__ieee754_rem_pio2+0x25c>
   1c938:	1e6b      	subs	r3, r5, #1
   1c93a:	4a6a      	ldr	r2, [pc, #424]	; (1cae4 <__ieee754_rem_pio2+0x3a0>)
   1c93c:	009b      	lsls	r3, r3, #2
   1c93e:	589b      	ldr	r3, [r3, r2]
   1c940:	429c      	cmp	r4, r3
   1c942:	d02d      	beq.n	1c9a0 <__ieee754_rem_pio2+0x25c>
   1c944:	0002      	movs	r2, r0
   1c946:	000b      	movs	r3, r1
   1c948:	0030      	movs	r0, r6
   1c94a:	0039      	movs	r1, r7
   1c94c:	f003 fe40 	bl	205d0 <__aeabi_dsub>
   1c950:	000b      	movs	r3, r1
   1c952:	468a      	mov	sl, r1
   1c954:	0002      	movs	r2, r0
   1c956:	4641      	mov	r1, r8
   1c958:	4683      	mov	fp, r0
   1c95a:	600a      	str	r2, [r1, #0]
   1c95c:	604b      	str	r3, [r1, #4]
   1c95e:	465a      	mov	r2, fp
   1c960:	4653      	mov	r3, sl
   1c962:	0030      	movs	r0, r6
   1c964:	0039      	movs	r1, r7
   1c966:	f003 fe33 	bl	205d0 <__aeabi_dsub>
   1c96a:	9a02      	ldr	r2, [sp, #8]
   1c96c:	9b03      	ldr	r3, [sp, #12]
   1c96e:	f003 fe2f 	bl	205d0 <__aeabi_dsub>
   1c972:	4644      	mov	r4, r8
   1c974:	000b      	movs	r3, r1
   1c976:	0002      	movs	r2, r0
   1c978:	60a2      	str	r2, [r4, #8]
   1c97a:	60e3      	str	r3, [r4, #12]
   1c97c:	464b      	mov	r3, r9
   1c97e:	2b00      	cmp	r3, #0
   1c980:	db00      	blt.n	1c984 <__ieee754_rem_pio2+0x240>
   1c982:	e780      	b.n	1c886 <__ieee754_rem_pio2+0x142>
   1c984:	465b      	mov	r3, fp
   1c986:	6023      	str	r3, [r4, #0]
   1c988:	2380      	movs	r3, #128	; 0x80
   1c98a:	061b      	lsls	r3, r3, #24
   1c98c:	4453      	add	r3, sl
   1c98e:	6063      	str	r3, [r4, #4]
   1c990:	2380      	movs	r3, #128	; 0x80
   1c992:	061b      	lsls	r3, r3, #24
   1c994:	469c      	mov	ip, r3
   1c996:	4461      	add	r1, ip
   1c998:	60a0      	str	r0, [r4, #8]
   1c99a:	60e1      	str	r1, [r4, #12]
   1c99c:	426d      	negs	r5, r5
   1c99e:	e772      	b.n	1c886 <__ieee754_rem_pio2+0x142>
   1c9a0:	9a02      	ldr	r2, [sp, #8]
   1c9a2:	9b03      	ldr	r3, [sp, #12]
   1c9a4:	0030      	movs	r0, r6
   1c9a6:	0039      	movs	r1, r7
   1c9a8:	f003 fe12 	bl	205d0 <__aeabi_dsub>
   1c9ac:	000b      	movs	r3, r1
   1c9ae:	468a      	mov	sl, r1
   1c9b0:	0002      	movs	r2, r0
   1c9b2:	4641      	mov	r1, r8
   1c9b4:	600a      	str	r2, [r1, #0]
   1c9b6:	604b      	str	r3, [r1, #4]
   1c9b8:	4653      	mov	r3, sl
   1c9ba:	005b      	lsls	r3, r3, #1
   1c9bc:	1524      	asrs	r4, r4, #20
   1c9be:	0d5b      	lsrs	r3, r3, #21
   1c9c0:	4683      	mov	fp, r0
   1c9c2:	1ae3      	subs	r3, r4, r3
   1c9c4:	2b10      	cmp	r3, #16
   1c9c6:	ddca      	ble.n	1c95e <__ieee754_rem_pio2+0x21a>
   1c9c8:	9804      	ldr	r0, [sp, #16]
   1c9ca:	9905      	ldr	r1, [sp, #20]
   1c9cc:	22d3      	movs	r2, #211	; 0xd3
   1c9ce:	4b3a      	ldr	r3, [pc, #232]	; (1cab8 <__ieee754_rem_pio2+0x374>)
   1c9d0:	0552      	lsls	r2, r2, #21
   1c9d2:	f003 fb7d 	bl	200d0 <__aeabi_dmul>
   1c9d6:	9002      	str	r0, [sp, #8]
   1c9d8:	9103      	str	r1, [sp, #12]
   1c9da:	0002      	movs	r2, r0
   1c9dc:	000b      	movs	r3, r1
   1c9de:	0030      	movs	r0, r6
   1c9e0:	0039      	movs	r1, r7
   1c9e2:	f003 fdf5 	bl	205d0 <__aeabi_dsub>
   1c9e6:	9006      	str	r0, [sp, #24]
   1c9e8:	9107      	str	r1, [sp, #28]
   1c9ea:	0002      	movs	r2, r0
   1c9ec:	000b      	movs	r3, r1
   1c9ee:	0030      	movs	r0, r6
   1c9f0:	0039      	movs	r1, r7
   1c9f2:	f003 fded 	bl	205d0 <__aeabi_dsub>
   1c9f6:	9a02      	ldr	r2, [sp, #8]
   1c9f8:	9b03      	ldr	r3, [sp, #12]
   1c9fa:	f003 fde9 	bl	205d0 <__aeabi_dsub>
   1c9fe:	0006      	movs	r6, r0
   1ca00:	000f      	movs	r7, r1
   1ca02:	9804      	ldr	r0, [sp, #16]
   1ca04:	9905      	ldr	r1, [sp, #20]
   1ca06:	4a32      	ldr	r2, [pc, #200]	; (1cad0 <__ieee754_rem_pio2+0x38c>)
   1ca08:	4b32      	ldr	r3, [pc, #200]	; (1cad4 <__ieee754_rem_pio2+0x390>)
   1ca0a:	f003 fb61 	bl	200d0 <__aeabi_dmul>
   1ca0e:	0032      	movs	r2, r6
   1ca10:	003b      	movs	r3, r7
   1ca12:	f003 fddd 	bl	205d0 <__aeabi_dsub>
   1ca16:	9e06      	ldr	r6, [sp, #24]
   1ca18:	9f07      	ldr	r7, [sp, #28]
   1ca1a:	0002      	movs	r2, r0
   1ca1c:	000b      	movs	r3, r1
   1ca1e:	0030      	movs	r0, r6
   1ca20:	0039      	movs	r1, r7
   1ca22:	9202      	str	r2, [sp, #8]
   1ca24:	9303      	str	r3, [sp, #12]
   1ca26:	f003 fdd3 	bl	205d0 <__aeabi_dsub>
   1ca2a:	000b      	movs	r3, r1
   1ca2c:	468a      	mov	sl, r1
   1ca2e:	0002      	movs	r2, r0
   1ca30:	4641      	mov	r1, r8
   1ca32:	600a      	str	r2, [r1, #0]
   1ca34:	604b      	str	r3, [r1, #4]
   1ca36:	4653      	mov	r3, sl
   1ca38:	005b      	lsls	r3, r3, #1
   1ca3a:	0d5b      	lsrs	r3, r3, #21
   1ca3c:	4683      	mov	fp, r0
   1ca3e:	1ae4      	subs	r4, r4, r3
   1ca40:	9606      	str	r6, [sp, #24]
   1ca42:	9707      	str	r7, [sp, #28]
   1ca44:	2c31      	cmp	r4, #49	; 0x31
   1ca46:	dd8a      	ble.n	1c95e <__ieee754_rem_pio2+0x21a>
   1ca48:	9804      	ldr	r0, [sp, #16]
   1ca4a:	9905      	ldr	r1, [sp, #20]
   1ca4c:	22b8      	movs	r2, #184	; 0xb8
   1ca4e:	4b21      	ldr	r3, [pc, #132]	; (1cad4 <__ieee754_rem_pio2+0x390>)
   1ca50:	0592      	lsls	r2, r2, #22
   1ca52:	f003 fb3d 	bl	200d0 <__aeabi_dmul>
   1ca56:	0003      	movs	r3, r0
   1ca58:	000c      	movs	r4, r1
   1ca5a:	0002      	movs	r2, r0
   1ca5c:	9302      	str	r3, [sp, #8]
   1ca5e:	9403      	str	r4, [sp, #12]
   1ca60:	0030      	movs	r0, r6
   1ca62:	000b      	movs	r3, r1
   1ca64:	0039      	movs	r1, r7
   1ca66:	f003 fdb3 	bl	205d0 <__aeabi_dsub>
   1ca6a:	0002      	movs	r2, r0
   1ca6c:	000b      	movs	r3, r1
   1ca6e:	0006      	movs	r6, r0
   1ca70:	000f      	movs	r7, r1
   1ca72:	9806      	ldr	r0, [sp, #24]
   1ca74:	9907      	ldr	r1, [sp, #28]
   1ca76:	f003 fdab 	bl	205d0 <__aeabi_dsub>
   1ca7a:	9a02      	ldr	r2, [sp, #8]
   1ca7c:	9b03      	ldr	r3, [sp, #12]
   1ca7e:	f003 fda7 	bl	205d0 <__aeabi_dsub>
   1ca82:	4a19      	ldr	r2, [pc, #100]	; (1cae8 <__ieee754_rem_pio2+0x3a4>)
   1ca84:	9002      	str	r0, [sp, #8]
   1ca86:	9103      	str	r1, [sp, #12]
   1ca88:	9804      	ldr	r0, [sp, #16]
   1ca8a:	9905      	ldr	r1, [sp, #20]
   1ca8c:	4b17      	ldr	r3, [pc, #92]	; (1caec <__ieee754_rem_pio2+0x3a8>)
   1ca8e:	f003 fb1f 	bl	200d0 <__aeabi_dmul>
   1ca92:	9a02      	ldr	r2, [sp, #8]
   1ca94:	9b03      	ldr	r3, [sp, #12]
   1ca96:	f003 fd9b 	bl	205d0 <__aeabi_dsub>
   1ca9a:	0002      	movs	r2, r0
   1ca9c:	000b      	movs	r3, r1
   1ca9e:	9202      	str	r2, [sp, #8]
   1caa0:	9303      	str	r3, [sp, #12]
   1caa2:	e751      	b.n	1c948 <__ieee754_rem_pio2+0x204>
   1caa4:	3fe921fb 	.word	0x3fe921fb
   1caa8:	4002d97b 	.word	0x4002d97b
   1caac:	54400000 	.word	0x54400000
   1cab0:	3ff921fb 	.word	0x3ff921fb
   1cab4:	1a626331 	.word	0x1a626331
   1cab8:	3dd0b461 	.word	0x3dd0b461
   1cabc:	413921fb 	.word	0x413921fb
   1cac0:	7fefffff 	.word	0x7fefffff
   1cac4:	fffffbea 	.word	0xfffffbea
   1cac8:	41700000 	.word	0x41700000
   1cacc:	00026be4 	.word	0x00026be4
   1cad0:	2e037073 	.word	0x2e037073
   1cad4:	3ba3198a 	.word	0x3ba3198a
   1cad8:	6dc9c883 	.word	0x6dc9c883
   1cadc:	3fe45f30 	.word	0x3fe45f30
   1cae0:	3fe00000 	.word	0x3fe00000
   1cae4:	00026b64 	.word	0x00026b64
   1cae8:	252049c1 	.word	0x252049c1
   1caec:	397b839a 	.word	0x397b839a
   1caf0:	4b1b      	ldr	r3, [pc, #108]	; (1cb60 <__ieee754_rem_pio2+0x41c>)
   1caf2:	f002 fba9 	bl	1f248 <__aeabi_dadd>
   1caf6:	4b1a      	ldr	r3, [pc, #104]	; (1cb60 <__ieee754_rem_pio2+0x41c>)
   1caf8:	0006      	movs	r6, r0
   1cafa:	000f      	movs	r7, r1
   1cafc:	429c      	cmp	r4, r3
   1cafe:	d018      	beq.n	1cb32 <__ieee754_rem_pio2+0x3ee>
   1cb00:	4a18      	ldr	r2, [pc, #96]	; (1cb64 <__ieee754_rem_pio2+0x420>)
   1cb02:	4b19      	ldr	r3, [pc, #100]	; (1cb68 <__ieee754_rem_pio2+0x424>)
   1cb04:	f002 fba0 	bl	1f248 <__aeabi_dadd>
   1cb08:	0002      	movs	r2, r0
   1cb0a:	000b      	movs	r3, r1
   1cb0c:	4641      	mov	r1, r8
   1cb0e:	0030      	movs	r0, r6
   1cb10:	600a      	str	r2, [r1, #0]
   1cb12:	604b      	str	r3, [r1, #4]
   1cb14:	0039      	movs	r1, r7
   1cb16:	f003 fd5b 	bl	205d0 <__aeabi_dsub>
   1cb1a:	4a12      	ldr	r2, [pc, #72]	; (1cb64 <__ieee754_rem_pio2+0x420>)
   1cb1c:	4b12      	ldr	r3, [pc, #72]	; (1cb68 <__ieee754_rem_pio2+0x424>)
   1cb1e:	f002 fb93 	bl	1f248 <__aeabi_dadd>
   1cb22:	2501      	movs	r5, #1
   1cb24:	4643      	mov	r3, r8
   1cb26:	426d      	negs	r5, r5
   1cb28:	6098      	str	r0, [r3, #8]
   1cb2a:	60d9      	str	r1, [r3, #12]
   1cb2c:	e6ab      	b.n	1c886 <__ieee754_rem_pio2+0x142>
   1cb2e:	2303      	movs	r3, #3
   1cb30:	e684      	b.n	1c83c <__ieee754_rem_pio2+0xf8>
   1cb32:	22d3      	movs	r2, #211	; 0xd3
   1cb34:	4b0c      	ldr	r3, [pc, #48]	; (1cb68 <__ieee754_rem_pio2+0x424>)
   1cb36:	0552      	lsls	r2, r2, #21
   1cb38:	f002 fb86 	bl	1f248 <__aeabi_dadd>
   1cb3c:	4a0b      	ldr	r2, [pc, #44]	; (1cb6c <__ieee754_rem_pio2+0x428>)
   1cb3e:	4b0c      	ldr	r3, [pc, #48]	; (1cb70 <__ieee754_rem_pio2+0x42c>)
   1cb40:	0004      	movs	r4, r0
   1cb42:	000d      	movs	r5, r1
   1cb44:	f002 fb80 	bl	1f248 <__aeabi_dadd>
   1cb48:	0002      	movs	r2, r0
   1cb4a:	000b      	movs	r3, r1
   1cb4c:	4641      	mov	r1, r8
   1cb4e:	0020      	movs	r0, r4
   1cb50:	600a      	str	r2, [r1, #0]
   1cb52:	604b      	str	r3, [r1, #4]
   1cb54:	0029      	movs	r1, r5
   1cb56:	f003 fd3b 	bl	205d0 <__aeabi_dsub>
   1cb5a:	4a04      	ldr	r2, [pc, #16]	; (1cb6c <__ieee754_rem_pio2+0x428>)
   1cb5c:	4b04      	ldr	r3, [pc, #16]	; (1cb70 <__ieee754_rem_pio2+0x42c>)
   1cb5e:	e7de      	b.n	1cb1e <__ieee754_rem_pio2+0x3da>
   1cb60:	3ff921fb 	.word	0x3ff921fb
   1cb64:	1a626331 	.word	0x1a626331
   1cb68:	3dd0b461 	.word	0x3dd0b461
   1cb6c:	2e037073 	.word	0x2e037073
   1cb70:	3ba3198a 	.word	0x3ba3198a

0001cb74 <__ieee754_sqrt>:
   1cb74:	4b6c      	ldr	r3, [pc, #432]	; (1cd28 <__ieee754_sqrt+0x1b4>)
   1cb76:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cb78:	000a      	movs	r2, r1
   1cb7a:	4646      	mov	r6, r8
   1cb7c:	000d      	movs	r5, r1
   1cb7e:	46d6      	mov	lr, sl
   1cb80:	464f      	mov	r7, r9
   1cb82:	0019      	movs	r1, r3
   1cb84:	b5c0      	push	{r6, r7, lr}
   1cb86:	0004      	movs	r4, r0
   1cb88:	0006      	movs	r6, r0
   1cb8a:	4029      	ands	r1, r5
   1cb8c:	4299      	cmp	r1, r3
   1cb8e:	d100      	bne.n	1cb92 <__ieee754_sqrt+0x1e>
   1cb90:	e0a7      	b.n	1cce2 <__ieee754_sqrt+0x16e>
   1cb92:	2d00      	cmp	r5, #0
   1cb94:	dc00      	bgt.n	1cb98 <__ieee754_sqrt+0x24>
   1cb96:	e081      	b.n	1cc9c <__ieee754_sqrt+0x128>
   1cb98:	152f      	asrs	r7, r5, #20
   1cb9a:	d100      	bne.n	1cb9e <__ieee754_sqrt+0x2a>
   1cb9c:	e08e      	b.n	1ccbc <__ieee754_sqrt+0x148>
   1cb9e:	4b63      	ldr	r3, [pc, #396]	; (1cd2c <__ieee754_sqrt+0x1b8>)
   1cba0:	0312      	lsls	r2, r2, #12
   1cba2:	469c      	mov	ip, r3
   1cba4:	2380      	movs	r3, #128	; 0x80
   1cba6:	0b12      	lsrs	r2, r2, #12
   1cba8:	035b      	lsls	r3, r3, #13
   1cbaa:	4467      	add	r7, ip
   1cbac:	431a      	orrs	r2, r3
   1cbae:	07fb      	lsls	r3, r7, #31
   1cbb0:	d468      	bmi.n	1cc84 <__ieee754_sqrt+0x110>
   1cbb2:	107b      	asrs	r3, r7, #1
   1cbb4:	469c      	mov	ip, r3
   1cbb6:	0fe3      	lsrs	r3, r4, #31
   1cbb8:	189b      	adds	r3, r3, r2
   1cbba:	189b      	adds	r3, r3, r2
   1cbbc:	2280      	movs	r2, #128	; 0x80
   1cbbe:	2116      	movs	r1, #22
   1cbc0:	2600      	movs	r6, #0
   1cbc2:	2500      	movs	r5, #0
   1cbc4:	0064      	lsls	r4, r4, #1
   1cbc6:	0392      	lsls	r2, r2, #14
   1cbc8:	18a8      	adds	r0, r5, r2
   1cbca:	4298      	cmp	r0, r3
   1cbcc:	dc02      	bgt.n	1cbd4 <__ieee754_sqrt+0x60>
   1cbce:	1885      	adds	r5, r0, r2
   1cbd0:	1a1b      	subs	r3, r3, r0
   1cbd2:	18b6      	adds	r6, r6, r2
   1cbd4:	0fe0      	lsrs	r0, r4, #31
   1cbd6:	005b      	lsls	r3, r3, #1
   1cbd8:	3901      	subs	r1, #1
   1cbda:	181b      	adds	r3, r3, r0
   1cbdc:	0064      	lsls	r4, r4, #1
   1cbde:	0852      	lsrs	r2, r2, #1
   1cbe0:	2900      	cmp	r1, #0
   1cbe2:	d1f1      	bne.n	1cbc8 <__ieee754_sqrt+0x54>
   1cbe4:	2200      	movs	r2, #0
   1cbe6:	4692      	mov	sl, r2
   1cbe8:	4690      	mov	r8, r2
   1cbea:	2280      	movs	r2, #128	; 0x80
   1cbec:	2020      	movs	r0, #32
   1cbee:	0612      	lsls	r2, r2, #24
   1cbf0:	e009      	b.n	1cc06 <__ieee754_sqrt+0x92>
   1cbf2:	42ab      	cmp	r3, r5
   1cbf4:	d038      	beq.n	1cc68 <__ieee754_sqrt+0xf4>
   1cbf6:	0fe1      	lsrs	r1, r4, #31
   1cbf8:	18c9      	adds	r1, r1, r3
   1cbfa:	3801      	subs	r0, #1
   1cbfc:	18cb      	adds	r3, r1, r3
   1cbfe:	0064      	lsls	r4, r4, #1
   1cc00:	0852      	lsrs	r2, r2, #1
   1cc02:	2800      	cmp	r0, #0
   1cc04:	d018      	beq.n	1cc38 <__ieee754_sqrt+0xc4>
   1cc06:	4641      	mov	r1, r8
   1cc08:	1851      	adds	r1, r2, r1
   1cc0a:	42ab      	cmp	r3, r5
   1cc0c:	ddf1      	ble.n	1cbf2 <__ieee754_sqrt+0x7e>
   1cc0e:	188f      	adds	r7, r1, r2
   1cc10:	46b8      	mov	r8, r7
   1cc12:	46a9      	mov	r9, r5
   1cc14:	2900      	cmp	r1, #0
   1cc16:	db30      	blt.n	1cc7a <__ieee754_sqrt+0x106>
   1cc18:	1b5b      	subs	r3, r3, r5
   1cc1a:	428c      	cmp	r4, r1
   1cc1c:	41ad      	sbcs	r5, r5
   1cc1e:	426d      	negs	r5, r5
   1cc20:	1b5b      	subs	r3, r3, r5
   1cc22:	1a64      	subs	r4, r4, r1
   1cc24:	0fe1      	lsrs	r1, r4, #31
   1cc26:	18c9      	adds	r1, r1, r3
   1cc28:	3801      	subs	r0, #1
   1cc2a:	4492      	add	sl, r2
   1cc2c:	464d      	mov	r5, r9
   1cc2e:	18cb      	adds	r3, r1, r3
   1cc30:	0064      	lsls	r4, r4, #1
   1cc32:	0852      	lsrs	r2, r2, #1
   1cc34:	2800      	cmp	r0, #0
   1cc36:	d1e6      	bne.n	1cc06 <__ieee754_sqrt+0x92>
   1cc38:	4323      	orrs	r3, r4
   1cc3a:	d128      	bne.n	1cc8e <__ieee754_sqrt+0x11a>
   1cc3c:	4653      	mov	r3, sl
   1cc3e:	085b      	lsrs	r3, r3, #1
   1cc40:	493b      	ldr	r1, [pc, #236]	; (1cd30 <__ieee754_sqrt+0x1bc>)
   1cc42:	1072      	asrs	r2, r6, #1
   1cc44:	4688      	mov	r8, r1
   1cc46:	4442      	add	r2, r8
   1cc48:	07f1      	lsls	r1, r6, #31
   1cc4a:	d502      	bpl.n	1cc52 <__ieee754_sqrt+0xde>
   1cc4c:	2180      	movs	r1, #128	; 0x80
   1cc4e:	0609      	lsls	r1, r1, #24
   1cc50:	430b      	orrs	r3, r1
   1cc52:	4661      	mov	r1, ip
   1cc54:	001e      	movs	r6, r3
   1cc56:	050f      	lsls	r7, r1, #20
   1cc58:	18bd      	adds	r5, r7, r2
   1cc5a:	0030      	movs	r0, r6
   1cc5c:	0029      	movs	r1, r5
   1cc5e:	bc1c      	pop	{r2, r3, r4}
   1cc60:	4690      	mov	r8, r2
   1cc62:	4699      	mov	r9, r3
   1cc64:	46a2      	mov	sl, r4
   1cc66:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cc68:	42a1      	cmp	r1, r4
   1cc6a:	d8c4      	bhi.n	1cbf6 <__ieee754_sqrt+0x82>
   1cc6c:	188f      	adds	r7, r1, r2
   1cc6e:	46b8      	mov	r8, r7
   1cc70:	2900      	cmp	r1, #0
   1cc72:	db42      	blt.n	1ccfa <__ieee754_sqrt+0x186>
   1cc74:	4699      	mov	r9, r3
   1cc76:	2300      	movs	r3, #0
   1cc78:	e7d3      	b.n	1cc22 <__ieee754_sqrt+0xae>
   1cc7a:	2f00      	cmp	r7, #0
   1cc7c:	db2f      	blt.n	1ccde <__ieee754_sqrt+0x16a>
   1cc7e:	1c6f      	adds	r7, r5, #1
   1cc80:	46b9      	mov	r9, r7
   1cc82:	e7c9      	b.n	1cc18 <__ieee754_sqrt+0xa4>
   1cc84:	0fe1      	lsrs	r1, r4, #31
   1cc86:	0052      	lsls	r2, r2, #1
   1cc88:	188a      	adds	r2, r1, r2
   1cc8a:	0064      	lsls	r4, r4, #1
   1cc8c:	e791      	b.n	1cbb2 <__ieee754_sqrt+0x3e>
   1cc8e:	4653      	mov	r3, sl
   1cc90:	3301      	adds	r3, #1
   1cc92:	d035      	beq.n	1cd00 <__ieee754_sqrt+0x18c>
   1cc94:	4653      	mov	r3, sl
   1cc96:	3301      	adds	r3, #1
   1cc98:	085b      	lsrs	r3, r3, #1
   1cc9a:	e7d1      	b.n	1cc40 <__ieee754_sqrt+0xcc>
   1cc9c:	006b      	lsls	r3, r5, #1
   1cc9e:	085b      	lsrs	r3, r3, #1
   1cca0:	4303      	orrs	r3, r0
   1cca2:	d0da      	beq.n	1cc5a <__ieee754_sqrt+0xe6>
   1cca4:	2700      	movs	r7, #0
   1cca6:	2d00      	cmp	r5, #0
   1cca8:	d132      	bne.n	1cd10 <__ieee754_sqrt+0x19c>
   1ccaa:	0ae2      	lsrs	r2, r4, #11
   1ccac:	3f15      	subs	r7, #21
   1ccae:	0564      	lsls	r4, r4, #21
   1ccb0:	2a00      	cmp	r2, #0
   1ccb2:	d0fa      	beq.n	1ccaa <__ieee754_sqrt+0x136>
   1ccb4:	2380      	movs	r3, #128	; 0x80
   1ccb6:	035b      	lsls	r3, r3, #13
   1ccb8:	421a      	tst	r2, r3
   1ccba:	d124      	bne.n	1cd06 <__ieee754_sqrt+0x192>
   1ccbc:	2080      	movs	r0, #128	; 0x80
   1ccbe:	2300      	movs	r3, #0
   1ccc0:	0340      	lsls	r0, r0, #13
   1ccc2:	e000      	b.n	1ccc6 <__ieee754_sqrt+0x152>
   1ccc4:	000b      	movs	r3, r1
   1ccc6:	0052      	lsls	r2, r2, #1
   1ccc8:	1c59      	adds	r1, r3, #1
   1ccca:	4202      	tst	r2, r0
   1cccc:	d0fa      	beq.n	1ccc4 <__ieee754_sqrt+0x150>
   1ccce:	2020      	movs	r0, #32
   1ccd0:	1a40      	subs	r0, r0, r1
   1ccd2:	1aff      	subs	r7, r7, r3
   1ccd4:	0023      	movs	r3, r4
   1ccd6:	40c3      	lsrs	r3, r0
   1ccd8:	408c      	lsls	r4, r1
   1ccda:	431a      	orrs	r2, r3
   1ccdc:	e75f      	b.n	1cb9e <__ieee754_sqrt+0x2a>
   1ccde:	46a9      	mov	r9, r5
   1cce0:	e79a      	b.n	1cc18 <__ieee754_sqrt+0xa4>
   1cce2:	002b      	movs	r3, r5
   1cce4:	0002      	movs	r2, r0
   1cce6:	0029      	movs	r1, r5
   1cce8:	f003 f9f2 	bl	200d0 <__aeabi_dmul>
   1ccec:	0032      	movs	r2, r6
   1ccee:	002b      	movs	r3, r5
   1ccf0:	f002 faaa 	bl	1f248 <__aeabi_dadd>
   1ccf4:	0006      	movs	r6, r0
   1ccf6:	000d      	movs	r5, r1
   1ccf8:	e7af      	b.n	1cc5a <__ieee754_sqrt+0xe6>
   1ccfa:	2f00      	cmp	r7, #0
   1ccfc:	dabf      	bge.n	1cc7e <__ieee754_sqrt+0x10a>
   1ccfe:	e7b9      	b.n	1cc74 <__ieee754_sqrt+0x100>
   1cd00:	3601      	adds	r6, #1
   1cd02:	2300      	movs	r3, #0
   1cd04:	e79c      	b.n	1cc40 <__ieee754_sqrt+0xcc>
   1cd06:	2301      	movs	r3, #1
   1cd08:	2100      	movs	r1, #0
   1cd0a:	2020      	movs	r0, #32
   1cd0c:	425b      	negs	r3, r3
   1cd0e:	e7e0      	b.n	1ccd2 <__ieee754_sqrt+0x15e>
   1cd10:	002b      	movs	r3, r5
   1cd12:	0002      	movs	r2, r0
   1cd14:	0029      	movs	r1, r5
   1cd16:	f003 fc5b 	bl	205d0 <__aeabi_dsub>
   1cd1a:	0002      	movs	r2, r0
   1cd1c:	000b      	movs	r3, r1
   1cd1e:	f002 fda3 	bl	1f868 <__aeabi_ddiv>
   1cd22:	0006      	movs	r6, r0
   1cd24:	000d      	movs	r5, r1
   1cd26:	e798      	b.n	1cc5a <__ieee754_sqrt+0xe6>
   1cd28:	7ff00000 	.word	0x7ff00000
   1cd2c:	fffffc01 	.word	0xfffffc01
   1cd30:	3fe00000 	.word	0x3fe00000

0001cd34 <__kernel_cos>:
   1cd34:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cd36:	4647      	mov	r7, r8
   1cd38:	46ce      	mov	lr, r9
   1cd3a:	b580      	push	{r7, lr}
   1cd3c:	b087      	sub	sp, #28
   1cd3e:	9200      	str	r2, [sp, #0]
   1cd40:	9301      	str	r3, [sp, #4]
   1cd42:	4b75      	ldr	r3, [pc, #468]	; (1cf18 <__kernel_cos+0x1e4>)
   1cd44:	004f      	lsls	r7, r1, #1
   1cd46:	4681      	mov	r9, r0
   1cd48:	4688      	mov	r8, r1
   1cd4a:	087f      	lsrs	r7, r7, #1
   1cd4c:	429f      	cmp	r7, r3
   1cd4e:	dc63      	bgt.n	1ce18 <__kernel_cos+0xe4>
   1cd50:	f003 ff74 	bl	20c3c <__aeabi_d2iz>
   1cd54:	2800      	cmp	r0, #0
   1cd56:	d100      	bne.n	1cd5a <__kernel_cos+0x26>
   1cd58:	e0da      	b.n	1cf10 <__kernel_cos+0x1dc>
   1cd5a:	464a      	mov	r2, r9
   1cd5c:	4643      	mov	r3, r8
   1cd5e:	4648      	mov	r0, r9
   1cd60:	4641      	mov	r1, r8
   1cd62:	f003 f9b5 	bl	200d0 <__aeabi_dmul>
   1cd66:	0004      	movs	r4, r0
   1cd68:	000d      	movs	r5, r1
   1cd6a:	4a6c      	ldr	r2, [pc, #432]	; (1cf1c <__kernel_cos+0x1e8>)
   1cd6c:	4b6c      	ldr	r3, [pc, #432]	; (1cf20 <__kernel_cos+0x1ec>)
   1cd6e:	f003 f9af 	bl	200d0 <__aeabi_dmul>
   1cd72:	4a6c      	ldr	r2, [pc, #432]	; (1cf24 <__kernel_cos+0x1f0>)
   1cd74:	4b6c      	ldr	r3, [pc, #432]	; (1cf28 <__kernel_cos+0x1f4>)
   1cd76:	f002 fa67 	bl	1f248 <__aeabi_dadd>
   1cd7a:	0022      	movs	r2, r4
   1cd7c:	002b      	movs	r3, r5
   1cd7e:	f003 f9a7 	bl	200d0 <__aeabi_dmul>
   1cd82:	4a6a      	ldr	r2, [pc, #424]	; (1cf2c <__kernel_cos+0x1f8>)
   1cd84:	4b6a      	ldr	r3, [pc, #424]	; (1cf30 <__kernel_cos+0x1fc>)
   1cd86:	f003 fc23 	bl	205d0 <__aeabi_dsub>
   1cd8a:	0022      	movs	r2, r4
   1cd8c:	002b      	movs	r3, r5
   1cd8e:	f003 f99f 	bl	200d0 <__aeabi_dmul>
   1cd92:	4a68      	ldr	r2, [pc, #416]	; (1cf34 <__kernel_cos+0x200>)
   1cd94:	4b68      	ldr	r3, [pc, #416]	; (1cf38 <__kernel_cos+0x204>)
   1cd96:	f002 fa57 	bl	1f248 <__aeabi_dadd>
   1cd9a:	0022      	movs	r2, r4
   1cd9c:	002b      	movs	r3, r5
   1cd9e:	f003 f997 	bl	200d0 <__aeabi_dmul>
   1cda2:	4a66      	ldr	r2, [pc, #408]	; (1cf3c <__kernel_cos+0x208>)
   1cda4:	4b66      	ldr	r3, [pc, #408]	; (1cf40 <__kernel_cos+0x20c>)
   1cda6:	f003 fc13 	bl	205d0 <__aeabi_dsub>
   1cdaa:	0022      	movs	r2, r4
   1cdac:	002b      	movs	r3, r5
   1cdae:	f003 f98f 	bl	200d0 <__aeabi_dmul>
   1cdb2:	4a64      	ldr	r2, [pc, #400]	; (1cf44 <__kernel_cos+0x210>)
   1cdb4:	4b64      	ldr	r3, [pc, #400]	; (1cf48 <__kernel_cos+0x214>)
   1cdb6:	f002 fa47 	bl	1f248 <__aeabi_dadd>
   1cdba:	0022      	movs	r2, r4
   1cdbc:	002b      	movs	r3, r5
   1cdbe:	f003 f987 	bl	200d0 <__aeabi_dmul>
   1cdc2:	9002      	str	r0, [sp, #8]
   1cdc4:	9103      	str	r1, [sp, #12]
   1cdc6:	2200      	movs	r2, #0
   1cdc8:	4b60      	ldr	r3, [pc, #384]	; (1cf4c <__kernel_cos+0x218>)
   1cdca:	0020      	movs	r0, r4
   1cdcc:	0029      	movs	r1, r5
   1cdce:	f003 f97f 	bl	200d0 <__aeabi_dmul>
   1cdd2:	9a02      	ldr	r2, [sp, #8]
   1cdd4:	9b03      	ldr	r3, [sp, #12]
   1cdd6:	0006      	movs	r6, r0
   1cdd8:	000f      	movs	r7, r1
   1cdda:	0020      	movs	r0, r4
   1cddc:	0029      	movs	r1, r5
   1cdde:	f003 f977 	bl	200d0 <__aeabi_dmul>
   1cde2:	9a00      	ldr	r2, [sp, #0]
   1cde4:	9b01      	ldr	r3, [sp, #4]
   1cde6:	0004      	movs	r4, r0
   1cde8:	000d      	movs	r5, r1
   1cdea:	4648      	mov	r0, r9
   1cdec:	4641      	mov	r1, r8
   1cdee:	f003 f96f 	bl	200d0 <__aeabi_dmul>
   1cdf2:	0002      	movs	r2, r0
   1cdf4:	000b      	movs	r3, r1
   1cdf6:	0020      	movs	r0, r4
   1cdf8:	0029      	movs	r1, r5
   1cdfa:	f003 fbe9 	bl	205d0 <__aeabi_dsub>
   1cdfe:	0002      	movs	r2, r0
   1ce00:	000b      	movs	r3, r1
   1ce02:	0030      	movs	r0, r6
   1ce04:	0039      	movs	r1, r7
   1ce06:	f003 fbe3 	bl	205d0 <__aeabi_dsub>
   1ce0a:	0002      	movs	r2, r0
   1ce0c:	000b      	movs	r3, r1
   1ce0e:	2000      	movs	r0, #0
   1ce10:	494f      	ldr	r1, [pc, #316]	; (1cf50 <__kernel_cos+0x21c>)
   1ce12:	f003 fbdd 	bl	205d0 <__aeabi_dsub>
   1ce16:	e070      	b.n	1cefa <__kernel_cos+0x1c6>
   1ce18:	0002      	movs	r2, r0
   1ce1a:	000b      	movs	r3, r1
   1ce1c:	f003 f958 	bl	200d0 <__aeabi_dmul>
   1ce20:	0004      	movs	r4, r0
   1ce22:	000d      	movs	r5, r1
   1ce24:	4a3d      	ldr	r2, [pc, #244]	; (1cf1c <__kernel_cos+0x1e8>)
   1ce26:	4b3e      	ldr	r3, [pc, #248]	; (1cf20 <__kernel_cos+0x1ec>)
   1ce28:	f003 f952 	bl	200d0 <__aeabi_dmul>
   1ce2c:	4a3d      	ldr	r2, [pc, #244]	; (1cf24 <__kernel_cos+0x1f0>)
   1ce2e:	4b3e      	ldr	r3, [pc, #248]	; (1cf28 <__kernel_cos+0x1f4>)
   1ce30:	f002 fa0a 	bl	1f248 <__aeabi_dadd>
   1ce34:	0022      	movs	r2, r4
   1ce36:	002b      	movs	r3, r5
   1ce38:	f003 f94a 	bl	200d0 <__aeabi_dmul>
   1ce3c:	4a3b      	ldr	r2, [pc, #236]	; (1cf2c <__kernel_cos+0x1f8>)
   1ce3e:	4b3c      	ldr	r3, [pc, #240]	; (1cf30 <__kernel_cos+0x1fc>)
   1ce40:	f003 fbc6 	bl	205d0 <__aeabi_dsub>
   1ce44:	0022      	movs	r2, r4
   1ce46:	002b      	movs	r3, r5
   1ce48:	f003 f942 	bl	200d0 <__aeabi_dmul>
   1ce4c:	4a39      	ldr	r2, [pc, #228]	; (1cf34 <__kernel_cos+0x200>)
   1ce4e:	4b3a      	ldr	r3, [pc, #232]	; (1cf38 <__kernel_cos+0x204>)
   1ce50:	f002 f9fa 	bl	1f248 <__aeabi_dadd>
   1ce54:	0022      	movs	r2, r4
   1ce56:	002b      	movs	r3, r5
   1ce58:	f003 f93a 	bl	200d0 <__aeabi_dmul>
   1ce5c:	4a37      	ldr	r2, [pc, #220]	; (1cf3c <__kernel_cos+0x208>)
   1ce5e:	4b38      	ldr	r3, [pc, #224]	; (1cf40 <__kernel_cos+0x20c>)
   1ce60:	f003 fbb6 	bl	205d0 <__aeabi_dsub>
   1ce64:	0022      	movs	r2, r4
   1ce66:	002b      	movs	r3, r5
   1ce68:	f003 f932 	bl	200d0 <__aeabi_dmul>
   1ce6c:	4a35      	ldr	r2, [pc, #212]	; (1cf44 <__kernel_cos+0x210>)
   1ce6e:	4b36      	ldr	r3, [pc, #216]	; (1cf48 <__kernel_cos+0x214>)
   1ce70:	f002 f9ea 	bl	1f248 <__aeabi_dadd>
   1ce74:	002b      	movs	r3, r5
   1ce76:	0022      	movs	r2, r4
   1ce78:	f003 f92a 	bl	200d0 <__aeabi_dmul>
   1ce7c:	4b35      	ldr	r3, [pc, #212]	; (1cf54 <__kernel_cos+0x220>)
   1ce7e:	9002      	str	r0, [sp, #8]
   1ce80:	9103      	str	r1, [sp, #12]
   1ce82:	429f      	cmp	r7, r3
   1ce84:	dd9f      	ble.n	1cdc6 <__kernel_cos+0x92>
   1ce86:	4b34      	ldr	r3, [pc, #208]	; (1cf58 <__kernel_cos+0x224>)
   1ce88:	2200      	movs	r2, #0
   1ce8a:	429f      	cmp	r7, r3
   1ce8c:	dc3a      	bgt.n	1cf04 <__kernel_cos+0x1d0>
   1ce8e:	4933      	ldr	r1, [pc, #204]	; (1cf5c <__kernel_cos+0x228>)
   1ce90:	2000      	movs	r0, #0
   1ce92:	187b      	adds	r3, r7, r1
   1ce94:	492e      	ldr	r1, [pc, #184]	; (1cf50 <__kernel_cos+0x21c>)
   1ce96:	0016      	movs	r6, r2
   1ce98:	001f      	movs	r7, r3
   1ce9a:	f003 fb99 	bl	205d0 <__aeabi_dsub>
   1ce9e:	9004      	str	r0, [sp, #16]
   1cea0:	9105      	str	r1, [sp, #20]
   1cea2:	2200      	movs	r2, #0
   1cea4:	4b29      	ldr	r3, [pc, #164]	; (1cf4c <__kernel_cos+0x218>)
   1cea6:	0020      	movs	r0, r4
   1cea8:	0029      	movs	r1, r5
   1ceaa:	f003 f911 	bl	200d0 <__aeabi_dmul>
   1ceae:	0032      	movs	r2, r6
   1ceb0:	003b      	movs	r3, r7
   1ceb2:	f003 fb8d 	bl	205d0 <__aeabi_dsub>
   1ceb6:	9a02      	ldr	r2, [sp, #8]
   1ceb8:	9b03      	ldr	r3, [sp, #12]
   1ceba:	0006      	movs	r6, r0
   1cebc:	000f      	movs	r7, r1
   1cebe:	0020      	movs	r0, r4
   1cec0:	0029      	movs	r1, r5
   1cec2:	f003 f905 	bl	200d0 <__aeabi_dmul>
   1cec6:	9a00      	ldr	r2, [sp, #0]
   1cec8:	9b01      	ldr	r3, [sp, #4]
   1ceca:	0004      	movs	r4, r0
   1cecc:	000d      	movs	r5, r1
   1cece:	4648      	mov	r0, r9
   1ced0:	4641      	mov	r1, r8
   1ced2:	f003 f8fd 	bl	200d0 <__aeabi_dmul>
   1ced6:	0002      	movs	r2, r0
   1ced8:	000b      	movs	r3, r1
   1ceda:	0020      	movs	r0, r4
   1cedc:	0029      	movs	r1, r5
   1cede:	f003 fb77 	bl	205d0 <__aeabi_dsub>
   1cee2:	0002      	movs	r2, r0
   1cee4:	000b      	movs	r3, r1
   1cee6:	0030      	movs	r0, r6
   1cee8:	0039      	movs	r1, r7
   1ceea:	f003 fb71 	bl	205d0 <__aeabi_dsub>
   1ceee:	0002      	movs	r2, r0
   1cef0:	000b      	movs	r3, r1
   1cef2:	9804      	ldr	r0, [sp, #16]
   1cef4:	9905      	ldr	r1, [sp, #20]
   1cef6:	f003 fb6b 	bl	205d0 <__aeabi_dsub>
   1cefa:	b007      	add	sp, #28
   1cefc:	bc0c      	pop	{r2, r3}
   1cefe:	4690      	mov	r8, r2
   1cf00:	4699      	mov	r9, r3
   1cf02:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cf04:	4b16      	ldr	r3, [pc, #88]	; (1cf60 <__kernel_cos+0x22c>)
   1cf06:	2600      	movs	r6, #0
   1cf08:	9204      	str	r2, [sp, #16]
   1cf0a:	9305      	str	r3, [sp, #20]
   1cf0c:	4f15      	ldr	r7, [pc, #84]	; (1cf64 <__kernel_cos+0x230>)
   1cf0e:	e7c8      	b.n	1cea2 <__kernel_cos+0x16e>
   1cf10:	2000      	movs	r0, #0
   1cf12:	490f      	ldr	r1, [pc, #60]	; (1cf50 <__kernel_cos+0x21c>)
   1cf14:	e7f1      	b.n	1cefa <__kernel_cos+0x1c6>
   1cf16:	46c0      	nop			; (mov r8, r8)
   1cf18:	3e3fffff 	.word	0x3e3fffff
   1cf1c:	be8838d4 	.word	0xbe8838d4
   1cf20:	bda8fae9 	.word	0xbda8fae9
   1cf24:	bdb4b1c4 	.word	0xbdb4b1c4
   1cf28:	3e21ee9e 	.word	0x3e21ee9e
   1cf2c:	809c52ad 	.word	0x809c52ad
   1cf30:	3e927e4f 	.word	0x3e927e4f
   1cf34:	19cb1590 	.word	0x19cb1590
   1cf38:	3efa01a0 	.word	0x3efa01a0
   1cf3c:	16c15177 	.word	0x16c15177
   1cf40:	3f56c16c 	.word	0x3f56c16c
   1cf44:	5555554c 	.word	0x5555554c
   1cf48:	3fa55555 	.word	0x3fa55555
   1cf4c:	3fe00000 	.word	0x3fe00000
   1cf50:	3ff00000 	.word	0x3ff00000
   1cf54:	3fd33332 	.word	0x3fd33332
   1cf58:	3fe90000 	.word	0x3fe90000
   1cf5c:	ffe00000 	.word	0xffe00000
   1cf60:	3fe70000 	.word	0x3fe70000
   1cf64:	3fd20000 	.word	0x3fd20000

0001cf68 <__kernel_rem_pio2>:
   1cf68:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cf6a:	46de      	mov	lr, fp
   1cf6c:	464e      	mov	r6, r9
   1cf6e:	4645      	mov	r5, r8
   1cf70:	4657      	mov	r7, sl
   1cf72:	b5e0      	push	{r5, r6, r7, lr}
   1cf74:	4ca3      	ldr	r4, [pc, #652]	; (1d204 <__kernel_rem_pio2+0x29c>)
   1cf76:	44a5      	add	sp, r4
   1cf78:	9107      	str	r1, [sp, #28]
   1cf7a:	0019      	movs	r1, r3
   1cf7c:	0014      	movs	r4, r2
   1cf7e:	9aa4      	ldr	r2, [sp, #656]	; 0x290
   1cf80:	9309      	str	r3, [sp, #36]	; 0x24
   1cf82:	4ba1      	ldr	r3, [pc, #644]	; (1d208 <__kernel_rem_pio2+0x2a0>)
   1cf84:	0092      	lsls	r2, r2, #2
   1cf86:	58d2      	ldr	r2, [r2, r3]
   1cf88:	000b      	movs	r3, r1
   1cf8a:	9003      	str	r0, [sp, #12]
   1cf8c:	3b01      	subs	r3, #1
   1cf8e:	1ee0      	subs	r0, r4, #3
   1cf90:	2118      	movs	r1, #24
   1cf92:	001d      	movs	r5, r3
   1cf94:	0016      	movs	r6, r2
   1cf96:	9206      	str	r2, [sp, #24]
   1cf98:	9302      	str	r3, [sp, #8]
   1cf9a:	f001 f85f 	bl	1e05c <__divsi3>
   1cf9e:	43c3      	mvns	r3, r0
   1cfa0:	0002      	movs	r2, r0
   1cfa2:	17db      	asrs	r3, r3, #31
   1cfa4:	401a      	ands	r2, r3
   1cfa6:	0013      	movs	r3, r2
   1cfa8:	0011      	movs	r1, r2
   1cfaa:	3301      	adds	r3, #1
   1cfac:	920b      	str	r2, [sp, #44]	; 0x2c
   1cfae:	009a      	lsls	r2, r3, #2
   1cfb0:	1a9b      	subs	r3, r3, r2
   1cfb2:	00db      	lsls	r3, r3, #3
   1cfb4:	191b      	adds	r3, r3, r4
   1cfb6:	9304      	str	r3, [sp, #16]
   1cfb8:	1b4c      	subs	r4, r1, r5
   1cfba:	1976      	adds	r6, r6, r5
   1cfbc:	d418      	bmi.n	1cff0 <__kernel_rem_pio2+0x88>
   1cfbe:	9ba5      	ldr	r3, [sp, #660]	; 0x294
   1cfc0:	00a5      	lsls	r5, r4, #2
   1cfc2:	469c      	mov	ip, r3
   1cfc4:	1936      	adds	r6, r6, r4
   1cfc6:	af22      	add	r7, sp, #136	; 0x88
   1cfc8:	4465      	add	r5, ip
   1cfca:	3601      	adds	r6, #1
   1cfcc:	e007      	b.n	1cfde <__kernel_rem_pio2+0x76>
   1cfce:	6828      	ldr	r0, [r5, #0]
   1cfd0:	f003 fe68 	bl	20ca4 <__aeabi_i2d>
   1cfd4:	3401      	adds	r4, #1
   1cfd6:	c703      	stmia	r7!, {r0, r1}
   1cfd8:	3504      	adds	r5, #4
   1cfda:	42b4      	cmp	r4, r6
   1cfdc:	d008      	beq.n	1cff0 <__kernel_rem_pio2+0x88>
   1cfde:	2c00      	cmp	r4, #0
   1cfe0:	daf5      	bge.n	1cfce <__kernel_rem_pio2+0x66>
   1cfe2:	2000      	movs	r0, #0
   1cfe4:	2100      	movs	r1, #0
   1cfe6:	3401      	adds	r4, #1
   1cfe8:	c703      	stmia	r7!, {r0, r1}
   1cfea:	3504      	adds	r5, #4
   1cfec:	42b4      	cmp	r4, r6
   1cfee:	d1f6      	bne.n	1cfde <__kernel_rem_pio2+0x76>
   1cff0:	9b06      	ldr	r3, [sp, #24]
   1cff2:	2b00      	cmp	r3, #0
   1cff4:	da01      	bge.n	1cffa <__kernel_rem_pio2+0x92>
   1cff6:	f000 fc01 	bl	1d7fc <__kernel_rem_pio2+0x894>
   1cffa:	ab72      	add	r3, sp, #456	; 0x1c8
   1cffc:	0019      	movs	r1, r3
   1cffe:	468b      	mov	fp, r1
   1d000:	aa22      	add	r2, sp, #136	; 0x88
   1d002:	4691      	mov	r9, r2
   1d004:	9a06      	ldr	r2, [sp, #24]
   1d006:	9308      	str	r3, [sp, #32]
   1d008:	3201      	adds	r2, #1
   1d00a:	00d2      	lsls	r2, r2, #3
   1d00c:	4493      	add	fp, r2
   1d00e:	9a03      	ldr	r2, [sp, #12]
   1d010:	469a      	mov	sl, r3
   1d012:	4690      	mov	r8, r2
   1d014:	9b02      	ldr	r3, [sp, #8]
   1d016:	00db      	lsls	r3, r3, #3
   1d018:	4499      	add	r9, r3
   1d01a:	3308      	adds	r3, #8
   1d01c:	4498      	add	r8, r3
   1d01e:	9b02      	ldr	r3, [sp, #8]
   1d020:	2b00      	cmp	r3, #0
   1d022:	da00      	bge.n	1d026 <__kernel_rem_pio2+0xbe>
   1d024:	e28d      	b.n	1d542 <__kernel_rem_pio2+0x5da>
   1d026:	464c      	mov	r4, r9
   1d028:	2600      	movs	r6, #0
   1d02a:	2700      	movs	r7, #0
   1d02c:	9d03      	ldr	r5, [sp, #12]
   1d02e:	6822      	ldr	r2, [r4, #0]
   1d030:	6863      	ldr	r3, [r4, #4]
   1d032:	cd03      	ldmia	r5!, {r0, r1}
   1d034:	f003 f84c 	bl	200d0 <__aeabi_dmul>
   1d038:	0002      	movs	r2, r0
   1d03a:	000b      	movs	r3, r1
   1d03c:	0030      	movs	r0, r6
   1d03e:	0039      	movs	r1, r7
   1d040:	f002 f902 	bl	1f248 <__aeabi_dadd>
   1d044:	3c08      	subs	r4, #8
   1d046:	0006      	movs	r6, r0
   1d048:	000f      	movs	r7, r1
   1d04a:	4545      	cmp	r5, r8
   1d04c:	d1ef      	bne.n	1d02e <__kernel_rem_pio2+0xc6>
   1d04e:	4653      	mov	r3, sl
   1d050:	c3c0      	stmia	r3!, {r6, r7}
   1d052:	469a      	mov	sl, r3
   1d054:	2308      	movs	r3, #8
   1d056:	469c      	mov	ip, r3
   1d058:	44e1      	add	r9, ip
   1d05a:	45da      	cmp	sl, fp
   1d05c:	d1df      	bne.n	1d01e <__kernel_rem_pio2+0xb6>
   1d05e:	9a06      	ldr	r2, [sp, #24]
   1d060:	496a      	ldr	r1, [pc, #424]	; (1d20c <__kernel_rem_pio2+0x2a4>)
   1d062:	0013      	movs	r3, r2
   1d064:	468c      	mov	ip, r1
   1d066:	4463      	add	r3, ip
   1d068:	009b      	lsls	r3, r3, #2
   1d06a:	a80e      	add	r0, sp, #56	; 0x38
   1d06c:	0019      	movs	r1, r3
   1d06e:	4684      	mov	ip, r0
   1d070:	4461      	add	r1, ip
   1d072:	910d      	str	r1, [sp, #52]	; 0x34
   1d074:	9903      	ldr	r1, [sp, #12]
   1d076:	3b04      	subs	r3, #4
   1d078:	468b      	mov	fp, r1
   1d07a:	4463      	add	r3, ip
   1d07c:	930c      	str	r3, [sp, #48]	; 0x30
   1d07e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d080:	9200      	str	r2, [sp, #0]
   1d082:	00db      	lsls	r3, r3, #3
   1d084:	449b      	add	fp, r3
   1d086:	9a00      	ldr	r2, [sp, #0]
   1d088:	9808      	ldr	r0, [sp, #32]
   1d08a:	00d3      	lsls	r3, r2, #3
   1d08c:	0019      	movs	r1, r3
   1d08e:	930a      	str	r3, [sp, #40]	; 0x28
   1d090:	468c      	mov	ip, r1
   1d092:	0003      	movs	r3, r0
   1d094:	4463      	add	r3, ip
   1d096:	681e      	ldr	r6, [r3, #0]
   1d098:	685f      	ldr	r7, [r3, #4]
   1d09a:	2a00      	cmp	r2, #0
   1d09c:	dd34      	ble.n	1d108 <__kernel_rem_pio2+0x1a0>
   1d09e:	ab0e      	add	r3, sp, #56	; 0x38
   1d0a0:	4699      	mov	r9, r3
   1d0a2:	0013      	movs	r3, r2
   1d0a4:	4a5a      	ldr	r2, [pc, #360]	; (1d210 <__kernel_rem_pio2+0x2a8>)
   1d0a6:	4680      	mov	r8, r0
   1d0a8:	4694      	mov	ip, r2
   1d0aa:	4463      	add	r3, ip
   1d0ac:	00db      	lsls	r3, r3, #3
   1d0ae:	4498      	add	r8, r3
   1d0b0:	ab70      	add	r3, sp, #448	; 0x1c0
   1d0b2:	469a      	mov	sl, r3
   1d0b4:	2200      	movs	r2, #0
   1d0b6:	4b57      	ldr	r3, [pc, #348]	; (1d214 <__kernel_rem_pio2+0x2ac>)
   1d0b8:	0030      	movs	r0, r6
   1d0ba:	0039      	movs	r1, r7
   1d0bc:	f003 f808 	bl	200d0 <__aeabi_dmul>
   1d0c0:	f003 fdbc 	bl	20c3c <__aeabi_d2iz>
   1d0c4:	f003 fdee 	bl	20ca4 <__aeabi_i2d>
   1d0c8:	2200      	movs	r2, #0
   1d0ca:	4b53      	ldr	r3, [pc, #332]	; (1d218 <__kernel_rem_pio2+0x2b0>)
   1d0cc:	0004      	movs	r4, r0
   1d0ce:	000d      	movs	r5, r1
   1d0d0:	f002 fffe 	bl	200d0 <__aeabi_dmul>
   1d0d4:	0002      	movs	r2, r0
   1d0d6:	000b      	movs	r3, r1
   1d0d8:	0030      	movs	r0, r6
   1d0da:	0039      	movs	r1, r7
   1d0dc:	f003 fa78 	bl	205d0 <__aeabi_dsub>
   1d0e0:	f003 fdac 	bl	20c3c <__aeabi_d2iz>
   1d0e4:	464b      	mov	r3, r9
   1d0e6:	c301      	stmia	r3!, {r0}
   1d0e8:	4699      	mov	r9, r3
   1d0ea:	4643      	mov	r3, r8
   1d0ec:	0020      	movs	r0, r4
   1d0ee:	681a      	ldr	r2, [r3, #0]
   1d0f0:	685b      	ldr	r3, [r3, #4]
   1d0f2:	0029      	movs	r1, r5
   1d0f4:	f002 f8a8 	bl	1f248 <__aeabi_dadd>
   1d0f8:	2308      	movs	r3, #8
   1d0fa:	425b      	negs	r3, r3
   1d0fc:	469c      	mov	ip, r3
   1d0fe:	44e0      	add	r8, ip
   1d100:	0006      	movs	r6, r0
   1d102:	000f      	movs	r7, r1
   1d104:	45d0      	cmp	r8, sl
   1d106:	d1d5      	bne.n	1d0b4 <__kernel_rem_pio2+0x14c>
   1d108:	9b04      	ldr	r3, [sp, #16]
   1d10a:	0030      	movs	r0, r6
   1d10c:	001a      	movs	r2, r3
   1d10e:	0039      	movs	r1, r7
   1d110:	4699      	mov	r9, r3
   1d112:	f000 fea9 	bl	1de68 <scalbn>
   1d116:	23ff      	movs	r3, #255	; 0xff
   1d118:	2200      	movs	r2, #0
   1d11a:	059b      	lsls	r3, r3, #22
   1d11c:	0004      	movs	r4, r0
   1d11e:	000d      	movs	r5, r1
   1d120:	f002 ffd6 	bl	200d0 <__aeabi_dmul>
   1d124:	f7fe fa2c 	bl	1b580 <floor>
   1d128:	2200      	movs	r2, #0
   1d12a:	4b3c      	ldr	r3, [pc, #240]	; (1d21c <__kernel_rem_pio2+0x2b4>)
   1d12c:	f002 ffd0 	bl	200d0 <__aeabi_dmul>
   1d130:	0002      	movs	r2, r0
   1d132:	000b      	movs	r3, r1
   1d134:	0020      	movs	r0, r4
   1d136:	0029      	movs	r1, r5
   1d138:	f003 fa4a 	bl	205d0 <__aeabi_dsub>
   1d13c:	000d      	movs	r5, r1
   1d13e:	0004      	movs	r4, r0
   1d140:	f003 fd7c 	bl	20c3c <__aeabi_d2iz>
   1d144:	4680      	mov	r8, r0
   1d146:	f003 fdad 	bl	20ca4 <__aeabi_i2d>
   1d14a:	0002      	movs	r2, r0
   1d14c:	000b      	movs	r3, r1
   1d14e:	0020      	movs	r0, r4
   1d150:	0029      	movs	r1, r5
   1d152:	f003 fa3d 	bl	205d0 <__aeabi_dsub>
   1d156:	000f      	movs	r7, r1
   1d158:	4649      	mov	r1, r9
   1d15a:	0006      	movs	r6, r0
   1d15c:	2900      	cmp	r1, #0
   1d15e:	dc00      	bgt.n	1d162 <__kernel_rem_pio2+0x1fa>
   1d160:	e110      	b.n	1d384 <__kernel_rem_pio2+0x41c>
   1d162:	9b00      	ldr	r3, [sp, #0]
   1d164:	2018      	movs	r0, #24
   1d166:	1e5a      	subs	r2, r3, #1
   1d168:	0092      	lsls	r2, r2, #2
   1d16a:	ab0e      	add	r3, sp, #56	; 0x38
   1d16c:	589b      	ldr	r3, [r3, r2]
   1d16e:	1a40      	subs	r0, r0, r1
   1d170:	001d      	movs	r5, r3
   1d172:	4105      	asrs	r5, r0
   1d174:	44a8      	add	r8, r5
   1d176:	4085      	lsls	r5, r0
   1d178:	1b5d      	subs	r5, r3, r5
   1d17a:	ab0e      	add	r3, sp, #56	; 0x38
   1d17c:	509d      	str	r5, [r3, r2]
   1d17e:	2217      	movs	r2, #23
   1d180:	1a52      	subs	r2, r2, r1
   1d182:	4115      	asrs	r5, r2
   1d184:	2d00      	cmp	r5, #0
   1d186:	dc00      	bgt.n	1d18a <__kernel_rem_pio2+0x222>
   1d188:	e07d      	b.n	1d286 <__kernel_rem_pio2+0x31e>
   1d18a:	2301      	movs	r3, #1
   1d18c:	469c      	mov	ip, r3
   1d18e:	9b00      	ldr	r3, [sp, #0]
   1d190:	44e0      	add	r8, ip
   1d192:	2b00      	cmp	r3, #0
   1d194:	dd48      	ble.n	1d228 <__kernel_rem_pio2+0x2c0>
   1d196:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   1d198:	2c00      	cmp	r4, #0
   1d19a:	d100      	bne.n	1d19e <__kernel_rem_pio2+0x236>
   1d19c:	e34b      	b.n	1d836 <__kernel_rem_pio2+0x8ce>
   1d19e:	2201      	movs	r2, #1
   1d1a0:	2300      	movs	r3, #0
   1d1a2:	2100      	movs	r1, #0
   1d1a4:	2080      	movs	r0, #128	; 0x80
   1d1a6:	0440      	lsls	r0, r0, #17
   1d1a8:	1b04      	subs	r4, r0, r4
   1d1aa:	a80e      	add	r0, sp, #56	; 0x38
   1d1ac:	5044      	str	r4, [r0, r1]
   1d1ae:	9900      	ldr	r1, [sp, #0]
   1d1b0:	4291      	cmp	r1, r2
   1d1b2:	dd18      	ble.n	1d1e6 <__kernel_rem_pio2+0x27e>
   1d1b4:	0092      	lsls	r2, r2, #2
   1d1b6:	a90e      	add	r1, sp, #56	; 0x38
   1d1b8:	5889      	ldr	r1, [r1, r2]
   1d1ba:	ac0e      	add	r4, sp, #56	; 0x38
   1d1bc:	9105      	str	r1, [sp, #20]
   1d1be:	9805      	ldr	r0, [sp, #20]
   1d1c0:	4917      	ldr	r1, [pc, #92]	; (1d220 <__kernel_rem_pio2+0x2b8>)
   1d1c2:	3302      	adds	r3, #2
   1d1c4:	1a08      	subs	r0, r1, r0
   1d1c6:	50a0      	str	r0, [r4, r2]
   1d1c8:	9a00      	ldr	r2, [sp, #0]
   1d1ca:	429a      	cmp	r2, r3
   1d1cc:	dd0b      	ble.n	1d1e6 <__kernel_rem_pio2+0x27e>
   1d1ce:	aa0e      	add	r2, sp, #56	; 0x38
   1d1d0:	4694      	mov	ip, r2
   1d1d2:	9a00      	ldr	r2, [sp, #0]
   1d1d4:	009b      	lsls	r3, r3, #2
   1d1d6:	0090      	lsls	r0, r2, #2
   1d1d8:	4463      	add	r3, ip
   1d1da:	4460      	add	r0, ip
   1d1dc:	681a      	ldr	r2, [r3, #0]
   1d1de:	1a8a      	subs	r2, r1, r2
   1d1e0:	c304      	stmia	r3!, {r2}
   1d1e2:	4283      	cmp	r3, r0
   1d1e4:	d1fa      	bne.n	1d1dc <__kernel_rem_pio2+0x274>
   1d1e6:	9b04      	ldr	r3, [sp, #16]
   1d1e8:	2401      	movs	r4, #1
   1d1ea:	2b00      	cmp	r3, #0
   1d1ec:	dc21      	bgt.n	1d232 <__kernel_rem_pio2+0x2ca>
   1d1ee:	2d02      	cmp	r5, #2
   1d1f0:	d149      	bne.n	1d286 <__kernel_rem_pio2+0x31e>
   1d1f2:	0032      	movs	r2, r6
   1d1f4:	003b      	movs	r3, r7
   1d1f6:	2000      	movs	r0, #0
   1d1f8:	490a      	ldr	r1, [pc, #40]	; (1d224 <__kernel_rem_pio2+0x2bc>)
   1d1fa:	f003 f9e9 	bl	205d0 <__aeabi_dsub>
   1d1fe:	0006      	movs	r6, r0
   1d200:	000f      	movs	r7, r1
   1d202:	e032      	b.n	1d26a <__kernel_rem_pio2+0x302>
   1d204:	fffffd94 	.word	0xfffffd94
   1d208:	00026d30 	.word	0x00026d30
   1d20c:	3fffffff 	.word	0x3fffffff
   1d210:	1fffffff 	.word	0x1fffffff
   1d214:	3e700000 	.word	0x3e700000
   1d218:	41700000 	.word	0x41700000
   1d21c:	40200000 	.word	0x40200000
   1d220:	00ffffff 	.word	0x00ffffff
   1d224:	3ff00000 	.word	0x3ff00000
   1d228:	9b04      	ldr	r3, [sp, #16]
   1d22a:	2400      	movs	r4, #0
   1d22c:	2b00      	cmp	r3, #0
   1d22e:	dc00      	bgt.n	1d232 <__kernel_rem_pio2+0x2ca>
   1d230:	e292      	b.n	1d758 <__kernel_rem_pio2+0x7f0>
   1d232:	9b04      	ldr	r3, [sp, #16]
   1d234:	2b01      	cmp	r3, #1
   1d236:	d100      	bne.n	1d23a <__kernel_rem_pio2+0x2d2>
   1d238:	e27b      	b.n	1d732 <__kernel_rem_pio2+0x7ca>
   1d23a:	2b02      	cmp	r3, #2
   1d23c:	d109      	bne.n	1d252 <__kernel_rem_pio2+0x2ea>
   1d23e:	9b00      	ldr	r3, [sp, #0]
   1d240:	a90e      	add	r1, sp, #56	; 0x38
   1d242:	1e5a      	subs	r2, r3, #1
   1d244:	0092      	lsls	r2, r2, #2
   1d246:	ab0e      	add	r3, sp, #56	; 0x38
   1d248:	589b      	ldr	r3, [r3, r2]
   1d24a:	9305      	str	r3, [sp, #20]
   1d24c:	029b      	lsls	r3, r3, #10
   1d24e:	0a9b      	lsrs	r3, r3, #10
   1d250:	508b      	str	r3, [r1, r2]
   1d252:	2d02      	cmp	r5, #2
   1d254:	d117      	bne.n	1d286 <__kernel_rem_pio2+0x31e>
   1d256:	0032      	movs	r2, r6
   1d258:	003b      	movs	r3, r7
   1d25a:	2000      	movs	r0, #0
   1d25c:	49bf      	ldr	r1, [pc, #764]	; (1d55c <__kernel_rem_pio2+0x5f4>)
   1d25e:	f003 f9b7 	bl	205d0 <__aeabi_dsub>
   1d262:	0006      	movs	r6, r0
   1d264:	000f      	movs	r7, r1
   1d266:	2c00      	cmp	r4, #0
   1d268:	d00d      	beq.n	1d286 <__kernel_rem_pio2+0x31e>
   1d26a:	9a04      	ldr	r2, [sp, #16]
   1d26c:	2000      	movs	r0, #0
   1d26e:	49bb      	ldr	r1, [pc, #748]	; (1d55c <__kernel_rem_pio2+0x5f4>)
   1d270:	f000 fdfa 	bl	1de68 <scalbn>
   1d274:	0002      	movs	r2, r0
   1d276:	000b      	movs	r3, r1
   1d278:	0030      	movs	r0, r6
   1d27a:	0039      	movs	r1, r7
   1d27c:	f003 f9a8 	bl	205d0 <__aeabi_dsub>
   1d280:	2502      	movs	r5, #2
   1d282:	0006      	movs	r6, r0
   1d284:	000f      	movs	r7, r1
   1d286:	2300      	movs	r3, #0
   1d288:	2200      	movs	r2, #0
   1d28a:	0030      	movs	r0, r6
   1d28c:	0039      	movs	r1, r7
   1d28e:	f000 ffe1 	bl	1e254 <__aeabi_dcmpeq>
   1d292:	9b00      	ldr	r3, [sp, #0]
   1d294:	2800      	cmp	r0, #0
   1d296:	d100      	bne.n	1d29a <__kernel_rem_pio2+0x332>
   1d298:	e262      	b.n	1d760 <__kernel_rem_pio2+0x7f8>
   1d29a:	9906      	ldr	r1, [sp, #24]
   1d29c:	1e5a      	subs	r2, r3, #1
   1d29e:	4291      	cmp	r1, r2
   1d2a0:	dc10      	bgt.n	1d2c4 <__kernel_rem_pio2+0x35c>
   1d2a2:	49af      	ldr	r1, [pc, #700]	; (1d560 <__kernel_rem_pio2+0x5f8>)
   1d2a4:	980d      	ldr	r0, [sp, #52]	; 0x34
   1d2a6:	468c      	mov	ip, r1
   1d2a8:	a90e      	add	r1, sp, #56	; 0x38
   1d2aa:	4463      	add	r3, ip
   1d2ac:	468c      	mov	ip, r1
   1d2ae:	2100      	movs	r1, #0
   1d2b0:	009b      	lsls	r3, r3, #2
   1d2b2:	4463      	add	r3, ip
   1d2b4:	681c      	ldr	r4, [r3, #0]
   1d2b6:	3b04      	subs	r3, #4
   1d2b8:	4321      	orrs	r1, r4
   1d2ba:	4283      	cmp	r3, r0
   1d2bc:	d1fa      	bne.n	1d2b4 <__kernel_rem_pio2+0x34c>
   1d2be:	2900      	cmp	r1, #0
   1d2c0:	d000      	beq.n	1d2c4 <__kernel_rem_pio2+0x35c>
   1d2c2:	e084      	b.n	1d3ce <__kernel_rem_pio2+0x466>
   1d2c4:	9b06      	ldr	r3, [sp, #24]
   1d2c6:	aa0e      	add	r2, sp, #56	; 0x38
   1d2c8:	3b01      	subs	r3, #1
   1d2ca:	009b      	lsls	r3, r3, #2
   1d2cc:	58d3      	ldr	r3, [r2, r3]
   1d2ce:	2b00      	cmp	r3, #0
   1d2d0:	d000      	beq.n	1d2d4 <__kernel_rem_pio2+0x36c>
   1d2d2:	e27c      	b.n	1d7ce <__kernel_rem_pio2+0x866>
   1d2d4:	2201      	movs	r2, #1
   1d2d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1d2d8:	3b04      	subs	r3, #4
   1d2da:	6859      	ldr	r1, [r3, #4]
   1d2dc:	3201      	adds	r2, #1
   1d2de:	2900      	cmp	r1, #0
   1d2e0:	d0fa      	beq.n	1d2d8 <__kernel_rem_pio2+0x370>
   1d2e2:	9900      	ldr	r1, [sp, #0]
   1d2e4:	000b      	movs	r3, r1
   1d2e6:	468c      	mov	ip, r1
   1d2e8:	3301      	adds	r3, #1
   1d2ea:	4462      	add	r2, ip
   1d2ec:	9205      	str	r2, [sp, #20]
   1d2ee:	4293      	cmp	r3, r2
   1d2f0:	dc42      	bgt.n	1d378 <__kernel_rem_pio2+0x410>
   1d2f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1d2f4:	4694      	mov	ip, r2
   1d2f6:	9aa5      	ldr	r2, [sp, #660]	; 0x294
   1d2f8:	4463      	add	r3, ip
   1d2fa:	4692      	mov	sl, r2
   1d2fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1d2fe:	009b      	lsls	r3, r3, #2
   1d300:	4694      	mov	ip, r2
   1d302:	aa22      	add	r2, sp, #136	; 0x88
   1d304:	4690      	mov	r8, r2
   1d306:	449a      	add	sl, r3
   1d308:	9b00      	ldr	r3, [sp, #0]
   1d30a:	9a08      	ldr	r2, [sp, #32]
   1d30c:	4463      	add	r3, ip
   1d30e:	00db      	lsls	r3, r3, #3
   1d310:	4498      	add	r8, r3
   1d312:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d314:	4694      	mov	ip, r2
   1d316:	4699      	mov	r9, r3
   1d318:	9b05      	ldr	r3, [sp, #20]
   1d31a:	44e1      	add	r9, ip
   1d31c:	00db      	lsls	r3, r3, #3
   1d31e:	4463      	add	r3, ip
   1d320:	9300      	str	r3, [sp, #0]
   1d322:	4653      	mov	r3, sl
   1d324:	6818      	ldr	r0, [r3, #0]
   1d326:	f003 fcbd 	bl	20ca4 <__aeabi_i2d>
   1d32a:	4643      	mov	r3, r8
   1d32c:	6018      	str	r0, [r3, #0]
   1d32e:	6059      	str	r1, [r3, #4]
   1d330:	9b02      	ldr	r3, [sp, #8]
   1d332:	2b00      	cmp	r3, #0
   1d334:	db23      	blt.n	1d37e <__kernel_rem_pio2+0x416>
   1d336:	4644      	mov	r4, r8
   1d338:	2600      	movs	r6, #0
   1d33a:	2700      	movs	r7, #0
   1d33c:	9d03      	ldr	r5, [sp, #12]
   1d33e:	6822      	ldr	r2, [r4, #0]
   1d340:	6863      	ldr	r3, [r4, #4]
   1d342:	cd03      	ldmia	r5!, {r0, r1}
   1d344:	f002 fec4 	bl	200d0 <__aeabi_dmul>
   1d348:	0002      	movs	r2, r0
   1d34a:	000b      	movs	r3, r1
   1d34c:	0030      	movs	r0, r6
   1d34e:	0039      	movs	r1, r7
   1d350:	f001 ff7a 	bl	1f248 <__aeabi_dadd>
   1d354:	3c08      	subs	r4, #8
   1d356:	0006      	movs	r6, r0
   1d358:	000f      	movs	r7, r1
   1d35a:	455d      	cmp	r5, fp
   1d35c:	d1ef      	bne.n	1d33e <__kernel_rem_pio2+0x3d6>
   1d35e:	464b      	mov	r3, r9
   1d360:	609e      	str	r6, [r3, #8]
   1d362:	60df      	str	r7, [r3, #12]
   1d364:	2304      	movs	r3, #4
   1d366:	469c      	mov	ip, r3
   1d368:	3304      	adds	r3, #4
   1d36a:	44e2      	add	sl, ip
   1d36c:	469c      	mov	ip, r3
   1d36e:	9b00      	ldr	r3, [sp, #0]
   1d370:	44e1      	add	r9, ip
   1d372:	44e0      	add	r8, ip
   1d374:	4599      	cmp	r9, r3
   1d376:	d1d4      	bne.n	1d322 <__kernel_rem_pio2+0x3ba>
   1d378:	9b05      	ldr	r3, [sp, #20]
   1d37a:	9300      	str	r3, [sp, #0]
   1d37c:	e683      	b.n	1d086 <__kernel_rem_pio2+0x11e>
   1d37e:	2600      	movs	r6, #0
   1d380:	2700      	movs	r7, #0
   1d382:	e7ec      	b.n	1d35e <__kernel_rem_pio2+0x3f6>
   1d384:	9b04      	ldr	r3, [sp, #16]
   1d386:	2b00      	cmp	r3, #0
   1d388:	d106      	bne.n	1d398 <__kernel_rem_pio2+0x430>
   1d38a:	9b00      	ldr	r3, [sp, #0]
   1d38c:	aa0e      	add	r2, sp, #56	; 0x38
   1d38e:	3b01      	subs	r3, #1
   1d390:	009b      	lsls	r3, r3, #2
   1d392:	58d5      	ldr	r5, [r2, r3]
   1d394:	15ed      	asrs	r5, r5, #23
   1d396:	e6f5      	b.n	1d184 <__kernel_rem_pio2+0x21c>
   1d398:	2200      	movs	r2, #0
   1d39a:	4b72      	ldr	r3, [pc, #456]	; (1d564 <__kernel_rem_pio2+0x5fc>)
   1d39c:	0030      	movs	r0, r6
   1d39e:	0039      	movs	r1, r7
   1d3a0:	f000 ff7c 	bl	1e29c <__aeabi_dcmpge>
   1d3a4:	2500      	movs	r5, #0
   1d3a6:	2800      	cmp	r0, #0
   1d3a8:	d100      	bne.n	1d3ac <__kernel_rem_pio2+0x444>
   1d3aa:	e76c      	b.n	1d286 <__kernel_rem_pio2+0x31e>
   1d3ac:	2301      	movs	r3, #1
   1d3ae:	469c      	mov	ip, r3
   1d3b0:	9b00      	ldr	r3, [sp, #0]
   1d3b2:	44e0      	add	r8, ip
   1d3b4:	2502      	movs	r5, #2
   1d3b6:	2b00      	cmp	r3, #0
   1d3b8:	dd00      	ble.n	1d3bc <__kernel_rem_pio2+0x454>
   1d3ba:	e6ec      	b.n	1d196 <__kernel_rem_pio2+0x22e>
   1d3bc:	0032      	movs	r2, r6
   1d3be:	003b      	movs	r3, r7
   1d3c0:	2000      	movs	r0, #0
   1d3c2:	4966      	ldr	r1, [pc, #408]	; (1d55c <__kernel_rem_pio2+0x5f4>)
   1d3c4:	f003 f904 	bl	205d0 <__aeabi_dsub>
   1d3c8:	0006      	movs	r6, r0
   1d3ca:	000f      	movs	r7, r1
   1d3cc:	e75b      	b.n	1d286 <__kernel_rem_pio2+0x31e>
   1d3ce:	4643      	mov	r3, r8
   1d3d0:	9309      	str	r3, [sp, #36]	; 0x24
   1d3d2:	9b04      	ldr	r3, [sp, #16]
   1d3d4:	a80e      	add	r0, sp, #56	; 0x38
   1d3d6:	3b18      	subs	r3, #24
   1d3d8:	0019      	movs	r1, r3
   1d3da:	9304      	str	r3, [sp, #16]
   1d3dc:	0093      	lsls	r3, r2, #2
   1d3de:	58c3      	ldr	r3, [r0, r3]
   1d3e0:	9503      	str	r5, [sp, #12]
   1d3e2:	9202      	str	r2, [sp, #8]
   1d3e4:	2b00      	cmp	r3, #0
   1d3e6:	d10f      	bne.n	1d408 <__kernel_rem_pio2+0x4a0>
   1d3e8:	485d      	ldr	r0, [pc, #372]	; (1d560 <__kernel_rem_pio2+0x5f8>)
   1d3ea:	0013      	movs	r3, r2
   1d3ec:	4684      	mov	ip, r0
   1d3ee:	a80e      	add	r0, sp, #56	; 0x38
   1d3f0:	4463      	add	r3, ip
   1d3f2:	4684      	mov	ip, r0
   1d3f4:	009b      	lsls	r3, r3, #2
   1d3f6:	4463      	add	r3, ip
   1d3f8:	3b04      	subs	r3, #4
   1d3fa:	6858      	ldr	r0, [r3, #4]
   1d3fc:	3a01      	subs	r2, #1
   1d3fe:	3918      	subs	r1, #24
   1d400:	2800      	cmp	r0, #0
   1d402:	d0f9      	beq.n	1d3f8 <__kernel_rem_pio2+0x490>
   1d404:	9202      	str	r2, [sp, #8]
   1d406:	9104      	str	r1, [sp, #16]
   1d408:	9a04      	ldr	r2, [sp, #16]
   1d40a:	2000      	movs	r0, #0
   1d40c:	4953      	ldr	r1, [pc, #332]	; (1d55c <__kernel_rem_pio2+0x5f4>)
   1d40e:	f000 fd2b 	bl	1de68 <scalbn>
   1d412:	9b02      	ldr	r3, [sp, #8]
   1d414:	0004      	movs	r4, r0
   1d416:	000d      	movs	r5, r1
   1d418:	2b00      	cmp	r3, #0
   1d41a:	da00      	bge.n	1d41e <__kernel_rem_pio2+0x4b6>
   1d41c:	e1d9      	b.n	1d7d2 <__kernel_rem_pio2+0x86a>
   1d41e:	aa0e      	add	r2, sp, #56	; 0x38
   1d420:	4694      	mov	ip, r2
   1d422:	009e      	lsls	r6, r3, #2
   1d424:	00db      	lsls	r3, r3, #3
   1d426:	4466      	add	r6, ip
   1d428:	469c      	mov	ip, r3
   1d42a:	9a08      	ldr	r2, [sp, #32]
   1d42c:	46b0      	mov	r8, r6
   1d42e:	4462      	add	r2, ip
   1d430:	0016      	movs	r6, r2
   1d432:	9304      	str	r3, [sp, #16]
   1d434:	9200      	str	r2, [sp, #0]
   1d436:	af70      	add	r7, sp, #448	; 0x1c0
   1d438:	4643      	mov	r3, r8
   1d43a:	6818      	ldr	r0, [r3, #0]
   1d43c:	f003 fc32 	bl	20ca4 <__aeabi_i2d>
   1d440:	0022      	movs	r2, r4
   1d442:	002b      	movs	r3, r5
   1d444:	f002 fe44 	bl	200d0 <__aeabi_dmul>
   1d448:	4b47      	ldr	r3, [pc, #284]	; (1d568 <__kernel_rem_pio2+0x600>)
   1d44a:	6030      	str	r0, [r6, #0]
   1d44c:	6071      	str	r1, [r6, #4]
   1d44e:	2200      	movs	r2, #0
   1d450:	0020      	movs	r0, r4
   1d452:	0029      	movs	r1, r5
   1d454:	f002 fe3c 	bl	200d0 <__aeabi_dmul>
   1d458:	2304      	movs	r3, #4
   1d45a:	425b      	negs	r3, r3
   1d45c:	469c      	mov	ip, r3
   1d45e:	3e08      	subs	r6, #8
   1d460:	0004      	movs	r4, r0
   1d462:	000d      	movs	r5, r1
   1d464:	44e0      	add	r8, ip
   1d466:	42be      	cmp	r6, r7
   1d468:	d1e6      	bne.n	1d438 <__kernel_rem_pio2+0x4d0>
   1d46a:	2300      	movs	r3, #0
   1d46c:	469a      	mov	sl, r3
   1d46e:	ab4a      	add	r3, sp, #296	; 0x128
   1d470:	4699      	mov	r9, r3
   1d472:	9b06      	ldr	r3, [sp, #24]
   1d474:	9605      	str	r6, [sp, #20]
   1d476:	469b      	mov	fp, r3
   1d478:	465b      	mov	r3, fp
   1d47a:	2600      	movs	r6, #0
   1d47c:	2700      	movs	r7, #0
   1d47e:	2b00      	cmp	r3, #0
   1d480:	db21      	blt.n	1d4c6 <__kernel_rem_pio2+0x55e>
   1d482:	2080      	movs	r0, #128	; 0x80
   1d484:	4b39      	ldr	r3, [pc, #228]	; (1d56c <__kernel_rem_pio2+0x604>)
   1d486:	9d00      	ldr	r5, [sp, #0]
   1d488:	4698      	mov	r8, r3
   1d48a:	05c0      	lsls	r0, r0, #23
   1d48c:	4938      	ldr	r1, [pc, #224]	; (1d570 <__kernel_rem_pio2+0x608>)
   1d48e:	2600      	movs	r6, #0
   1d490:	2700      	movs	r7, #0
   1d492:	2400      	movs	r4, #0
   1d494:	e008      	b.n	1d4a8 <__kernel_rem_pio2+0x540>
   1d496:	2308      	movs	r3, #8
   1d498:	469c      	mov	ip, r3
   1d49a:	3508      	adds	r5, #8
   1d49c:	44e0      	add	r8, ip
   1d49e:	4554      	cmp	r4, sl
   1d4a0:	dc11      	bgt.n	1d4c6 <__kernel_rem_pio2+0x55e>
   1d4a2:	4643      	mov	r3, r8
   1d4a4:	6818      	ldr	r0, [r3, #0]
   1d4a6:	6859      	ldr	r1, [r3, #4]
   1d4a8:	682a      	ldr	r2, [r5, #0]
   1d4aa:	686b      	ldr	r3, [r5, #4]
   1d4ac:	f002 fe10 	bl	200d0 <__aeabi_dmul>
   1d4b0:	0002      	movs	r2, r0
   1d4b2:	000b      	movs	r3, r1
   1d4b4:	0030      	movs	r0, r6
   1d4b6:	0039      	movs	r1, r7
   1d4b8:	f001 fec6 	bl	1f248 <__aeabi_dadd>
   1d4bc:	3401      	adds	r4, #1
   1d4be:	0006      	movs	r6, r0
   1d4c0:	000f      	movs	r7, r1
   1d4c2:	45a3      	cmp	fp, r4
   1d4c4:	dae7      	bge.n	1d496 <__kernel_rem_pio2+0x52e>
   1d4c6:	4653      	mov	r3, sl
   1d4c8:	00db      	lsls	r3, r3, #3
   1d4ca:	444b      	add	r3, r9
   1d4cc:	601e      	str	r6, [r3, #0]
   1d4ce:	605f      	str	r7, [r3, #4]
   1d4d0:	2301      	movs	r3, #1
   1d4d2:	469c      	mov	ip, r3
   1d4d4:	9b00      	ldr	r3, [sp, #0]
   1d4d6:	9a05      	ldr	r2, [sp, #20]
   1d4d8:	3b08      	subs	r3, #8
   1d4da:	44e2      	add	sl, ip
   1d4dc:	9300      	str	r3, [sp, #0]
   1d4de:	429a      	cmp	r2, r3
   1d4e0:	d1ca      	bne.n	1d478 <__kernel_rem_pio2+0x510>
   1d4e2:	9ba4      	ldr	r3, [sp, #656]	; 0x290
   1d4e4:	2b02      	cmp	r3, #2
   1d4e6:	dd00      	ble.n	1d4ea <__kernel_rem_pio2+0x582>
   1d4e8:	e07a      	b.n	1d5e0 <__kernel_rem_pio2+0x678>
   1d4ea:	2b00      	cmp	r3, #0
   1d4ec:	dc42      	bgt.n	1d574 <__kernel_rem_pio2+0x60c>
   1d4ee:	d11c      	bne.n	1d52a <__kernel_rem_pio2+0x5c2>
   1d4f0:	9b04      	ldr	r3, [sp, #16]
   1d4f2:	2700      	movs	r7, #0
   1d4f4:	444b      	add	r3, r9
   1d4f6:	001e      	movs	r6, r3
   1d4f8:	2400      	movs	r4, #0
   1d4fa:	ad48      	add	r5, sp, #288	; 0x120
   1d4fc:	6832      	ldr	r2, [r6, #0]
   1d4fe:	6873      	ldr	r3, [r6, #4]
   1d500:	0038      	movs	r0, r7
   1d502:	0021      	movs	r1, r4
   1d504:	f001 fea0 	bl	1f248 <__aeabi_dadd>
   1d508:	3e08      	subs	r6, #8
   1d50a:	0007      	movs	r7, r0
   1d50c:	000c      	movs	r4, r1
   1d50e:	42b5      	cmp	r5, r6
   1d510:	d1f4      	bne.n	1d4fc <__kernel_rem_pio2+0x594>
   1d512:	9b03      	ldr	r3, [sp, #12]
   1d514:	2b00      	cmp	r3, #0
   1d516:	d003      	beq.n	1d520 <__kernel_rem_pio2+0x5b8>
   1d518:	2380      	movs	r3, #128	; 0x80
   1d51a:	061b      	lsls	r3, r3, #24
   1d51c:	469c      	mov	ip, r3
   1d51e:	4464      	add	r4, ip
   1d520:	003a      	movs	r2, r7
   1d522:	0023      	movs	r3, r4
   1d524:	9907      	ldr	r1, [sp, #28]
   1d526:	600a      	str	r2, [r1, #0]
   1d528:	604b      	str	r3, [r1, #4]
   1d52a:	2007      	movs	r0, #7
   1d52c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d52e:	4018      	ands	r0, r3
   1d530:	239b      	movs	r3, #155	; 0x9b
   1d532:	009b      	lsls	r3, r3, #2
   1d534:	449d      	add	sp, r3
   1d536:	bc3c      	pop	{r2, r3, r4, r5}
   1d538:	4690      	mov	r8, r2
   1d53a:	4699      	mov	r9, r3
   1d53c:	46a2      	mov	sl, r4
   1d53e:	46ab      	mov	fp, r5
   1d540:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d542:	4653      	mov	r3, sl
   1d544:	2600      	movs	r6, #0
   1d546:	2700      	movs	r7, #0
   1d548:	c3c0      	stmia	r3!, {r6, r7}
   1d54a:	469a      	mov	sl, r3
   1d54c:	2308      	movs	r3, #8
   1d54e:	469c      	mov	ip, r3
   1d550:	44e1      	add	r9, ip
   1d552:	45da      	cmp	sl, fp
   1d554:	d000      	beq.n	1d558 <__kernel_rem_pio2+0x5f0>
   1d556:	e562      	b.n	1d01e <__kernel_rem_pio2+0xb6>
   1d558:	e581      	b.n	1d05e <__kernel_rem_pio2+0xf6>
   1d55a:	46c0      	nop			; (mov r8, r8)
   1d55c:	3ff00000 	.word	0x3ff00000
   1d560:	3fffffff 	.word	0x3fffffff
   1d564:	3fe00000 	.word	0x3fe00000
   1d568:	3e700000 	.word	0x3e700000
   1d56c:	00026cf0 	.word	0x00026cf0
   1d570:	3ff921fb 	.word	0x3ff921fb
   1d574:	9b04      	ldr	r3, [sp, #16]
   1d576:	2000      	movs	r0, #0
   1d578:	444b      	add	r3, r9
   1d57a:	001e      	movs	r6, r3
   1d57c:	2100      	movs	r1, #0
   1d57e:	af48      	add	r7, sp, #288	; 0x120
   1d580:	6832      	ldr	r2, [r6, #0]
   1d582:	6873      	ldr	r3, [r6, #4]
   1d584:	3e08      	subs	r6, #8
   1d586:	f001 fe5f 	bl	1f248 <__aeabi_dadd>
   1d58a:	42be      	cmp	r6, r7
   1d58c:	d1f8      	bne.n	1d580 <__kernel_rem_pio2+0x618>
   1d58e:	9b03      	ldr	r3, [sp, #12]
   1d590:	2b00      	cmp	r3, #0
   1d592:	d100      	bne.n	1d596 <__kernel_rem_pio2+0x62e>
   1d594:	e0b8      	b.n	1d708 <__kernel_rem_pio2+0x7a0>
   1d596:	2380      	movs	r3, #128	; 0x80
   1d598:	9a07      	ldr	r2, [sp, #28]
   1d59a:	061b      	lsls	r3, r3, #24
   1d59c:	18cb      	adds	r3, r1, r3
   1d59e:	6010      	str	r0, [r2, #0]
   1d5a0:	6053      	str	r3, [r2, #4]
   1d5a2:	000b      	movs	r3, r1
   1d5a4:	0002      	movs	r2, r0
   1d5a6:	984a      	ldr	r0, [sp, #296]	; 0x128
   1d5a8:	994b      	ldr	r1, [sp, #300]	; 0x12c
   1d5aa:	f003 f811 	bl	205d0 <__aeabi_dsub>
   1d5ae:	9b02      	ldr	r3, [sp, #8]
   1d5b0:	2b00      	cmp	r3, #0
   1d5b2:	dd0b      	ble.n	1d5cc <__kernel_rem_pio2+0x664>
   1d5b4:	2601      	movs	r6, #1
   1d5b6:	af4c      	add	r7, sp, #304	; 0x130
   1d5b8:	cf0c      	ldmia	r7!, {r2, r3}
   1d5ba:	f001 fe45 	bl	1f248 <__aeabi_dadd>
   1d5be:	9b02      	ldr	r3, [sp, #8]
   1d5c0:	3601      	adds	r6, #1
   1d5c2:	42b3      	cmp	r3, r6
   1d5c4:	daf8      	bge.n	1d5b8 <__kernel_rem_pio2+0x650>
   1d5c6:	9b03      	ldr	r3, [sp, #12]
   1d5c8:	2b00      	cmp	r3, #0
   1d5ca:	d003      	beq.n	1d5d4 <__kernel_rem_pio2+0x66c>
   1d5cc:	2380      	movs	r3, #128	; 0x80
   1d5ce:	061b      	lsls	r3, r3, #24
   1d5d0:	469c      	mov	ip, r3
   1d5d2:	4461      	add	r1, ip
   1d5d4:	000b      	movs	r3, r1
   1d5d6:	0002      	movs	r2, r0
   1d5d8:	9907      	ldr	r1, [sp, #28]
   1d5da:	608a      	str	r2, [r1, #8]
   1d5dc:	60cb      	str	r3, [r1, #12]
   1d5de:	e7a4      	b.n	1d52a <__kernel_rem_pio2+0x5c2>
   1d5e0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
   1d5e2:	2b03      	cmp	r3, #3
   1d5e4:	d1a1      	bne.n	1d52a <__kernel_rem_pio2+0x5c2>
   1d5e6:	9b02      	ldr	r3, [sp, #8]
   1d5e8:	2b00      	cmp	r3, #0
   1d5ea:	dc00      	bgt.n	1d5ee <__kernel_rem_pio2+0x686>
   1d5ec:	e120      	b.n	1d830 <__kernel_rem_pio2+0x8c8>
   1d5ee:	4a99      	ldr	r2, [pc, #612]	; (1d854 <__kernel_rem_pio2+0x8ec>)
   1d5f0:	9b04      	ldr	r3, [sp, #16]
   1d5f2:	4694      	mov	ip, r2
   1d5f4:	444b      	add	r3, r9
   1d5f6:	681e      	ldr	r6, [r3, #0]
   1d5f8:	685f      	ldr	r7, [r3, #4]
   1d5fa:	9b02      	ldr	r3, [sp, #8]
   1d5fc:	4463      	add	r3, ip
   1d5fe:	469b      	mov	fp, r3
   1d600:	00db      	lsls	r3, r3, #3
   1d602:	444b      	add	r3, r9
   1d604:	4698      	mov	r8, r3
   1d606:	ab48      	add	r3, sp, #288	; 0x120
   1d608:	469a      	mov	sl, r3
   1d60a:	4643      	mov	r3, r8
   1d60c:	685c      	ldr	r4, [r3, #4]
   1d60e:	681b      	ldr	r3, [r3, #0]
   1d610:	0018      	movs	r0, r3
   1d612:	0021      	movs	r1, r4
   1d614:	0032      	movs	r2, r6
   1d616:	003b      	movs	r3, r7
   1d618:	9000      	str	r0, [sp, #0]
   1d61a:	9101      	str	r1, [sp, #4]
   1d61c:	f001 fe14 	bl	1f248 <__aeabi_dadd>
   1d620:	0004      	movs	r4, r0
   1d622:	000d      	movs	r5, r1
   1d624:	0002      	movs	r2, r0
   1d626:	000b      	movs	r3, r1
   1d628:	9800      	ldr	r0, [sp, #0]
   1d62a:	9901      	ldr	r1, [sp, #4]
   1d62c:	f002 ffd0 	bl	205d0 <__aeabi_dsub>
   1d630:	003b      	movs	r3, r7
   1d632:	0032      	movs	r2, r6
   1d634:	f001 fe08 	bl	1f248 <__aeabi_dadd>
   1d638:	4643      	mov	r3, r8
   1d63a:	6098      	str	r0, [r3, #8]
   1d63c:	60d9      	str	r1, [r3, #12]
   1d63e:	601c      	str	r4, [r3, #0]
   1d640:	605d      	str	r5, [r3, #4]
   1d642:	2308      	movs	r3, #8
   1d644:	425b      	negs	r3, r3
   1d646:	469c      	mov	ip, r3
   1d648:	44e0      	add	r8, ip
   1d64a:	0026      	movs	r6, r4
   1d64c:	002f      	movs	r7, r5
   1d64e:	45c2      	cmp	sl, r8
   1d650:	d1db      	bne.n	1d60a <__kernel_rem_pio2+0x6a2>
   1d652:	9b02      	ldr	r3, [sp, #8]
   1d654:	2b01      	cmp	r3, #1
   1d656:	dc00      	bgt.n	1d65a <__kernel_rem_pio2+0x6f2>
   1d658:	e0ea      	b.n	1d830 <__kernel_rem_pio2+0x8c8>
   1d65a:	9b04      	ldr	r3, [sp, #16]
   1d65c:	46c8      	mov	r8, r9
   1d65e:	444b      	add	r3, r9
   1d660:	681e      	ldr	r6, [r3, #0]
   1d662:	685f      	ldr	r7, [r3, #4]
   1d664:	465b      	mov	r3, fp
   1d666:	00db      	lsls	r3, r3, #3
   1d668:	469b      	mov	fp, r3
   1d66a:	44d8      	add	r8, fp
   1d66c:	4643      	mov	r3, r8
   1d66e:	685c      	ldr	r4, [r3, #4]
   1d670:	681b      	ldr	r3, [r3, #0]
   1d672:	0018      	movs	r0, r3
   1d674:	0021      	movs	r1, r4
   1d676:	0032      	movs	r2, r6
   1d678:	003b      	movs	r3, r7
   1d67a:	9000      	str	r0, [sp, #0]
   1d67c:	9101      	str	r1, [sp, #4]
   1d67e:	f001 fde3 	bl	1f248 <__aeabi_dadd>
   1d682:	0004      	movs	r4, r0
   1d684:	000d      	movs	r5, r1
   1d686:	0002      	movs	r2, r0
   1d688:	000b      	movs	r3, r1
   1d68a:	9800      	ldr	r0, [sp, #0]
   1d68c:	9901      	ldr	r1, [sp, #4]
   1d68e:	f002 ff9f 	bl	205d0 <__aeabi_dsub>
   1d692:	003b      	movs	r3, r7
   1d694:	0032      	movs	r2, r6
   1d696:	f001 fdd7 	bl	1f248 <__aeabi_dadd>
   1d69a:	4643      	mov	r3, r8
   1d69c:	6098      	str	r0, [r3, #8]
   1d69e:	60d9      	str	r1, [r3, #12]
   1d6a0:	601c      	str	r4, [r3, #0]
   1d6a2:	605d      	str	r5, [r3, #4]
   1d6a4:	2308      	movs	r3, #8
   1d6a6:	425b      	negs	r3, r3
   1d6a8:	469c      	mov	ip, r3
   1d6aa:	44e0      	add	r8, ip
   1d6ac:	0026      	movs	r6, r4
   1d6ae:	002f      	movs	r7, r5
   1d6b0:	45c1      	cmp	r9, r8
   1d6b2:	d1db      	bne.n	1d66c <__kernel_rem_pio2+0x704>
   1d6b4:	465d      	mov	r5, fp
   1d6b6:	2700      	movs	r7, #0
   1d6b8:	2400      	movs	r4, #0
   1d6ba:	3508      	adds	r5, #8
   1d6bc:	444d      	add	r5, r9
   1d6be:	ae4c      	add	r6, sp, #304	; 0x130
   1d6c0:	682a      	ldr	r2, [r5, #0]
   1d6c2:	686b      	ldr	r3, [r5, #4]
   1d6c4:	0038      	movs	r0, r7
   1d6c6:	0021      	movs	r1, r4
   1d6c8:	f001 fdbe 	bl	1f248 <__aeabi_dadd>
   1d6cc:	3d08      	subs	r5, #8
   1d6ce:	0007      	movs	r7, r0
   1d6d0:	000c      	movs	r4, r1
   1d6d2:	42ae      	cmp	r6, r5
   1d6d4:	d1f4      	bne.n	1d6c0 <__kernel_rem_pio2+0x758>
   1d6d6:	9b03      	ldr	r3, [sp, #12]
   1d6d8:	2b00      	cmp	r3, #0
   1d6da:	d100      	bne.n	1d6de <__kernel_rem_pio2+0x776>
   1d6dc:	e091      	b.n	1d802 <__kernel_rem_pio2+0x89a>
   1d6de:	2180      	movs	r1, #128	; 0x80
   1d6e0:	9a07      	ldr	r2, [sp, #28]
   1d6e2:	9b4a      	ldr	r3, [sp, #296]	; 0x128
   1d6e4:	0609      	lsls	r1, r1, #24
   1d6e6:	6013      	str	r3, [r2, #0]
   1d6e8:	464b      	mov	r3, r9
   1d6ea:	468c      	mov	ip, r1
   1d6ec:	685b      	ldr	r3, [r3, #4]
   1d6ee:	4464      	add	r4, ip
   1d6f0:	4463      	add	r3, ip
   1d6f2:	6053      	str	r3, [r2, #4]
   1d6f4:	464b      	mov	r3, r9
   1d6f6:	689b      	ldr	r3, [r3, #8]
   1d6f8:	6117      	str	r7, [r2, #16]
   1d6fa:	6093      	str	r3, [r2, #8]
   1d6fc:	464b      	mov	r3, r9
   1d6fe:	68db      	ldr	r3, [r3, #12]
   1d700:	6154      	str	r4, [r2, #20]
   1d702:	4463      	add	r3, ip
   1d704:	60d3      	str	r3, [r2, #12]
   1d706:	e710      	b.n	1d52a <__kernel_rem_pio2+0x5c2>
   1d708:	0002      	movs	r2, r0
   1d70a:	000b      	movs	r3, r1
   1d70c:	9c07      	ldr	r4, [sp, #28]
   1d70e:	6022      	str	r2, [r4, #0]
   1d710:	6063      	str	r3, [r4, #4]
   1d712:	000b      	movs	r3, r1
   1d714:	0002      	movs	r2, r0
   1d716:	984a      	ldr	r0, [sp, #296]	; 0x128
   1d718:	994b      	ldr	r1, [sp, #300]	; 0x12c
   1d71a:	f002 ff59 	bl	205d0 <__aeabi_dsub>
   1d71e:	9b02      	ldr	r3, [sp, #8]
   1d720:	2b00      	cmp	r3, #0
   1d722:	dd00      	ble.n	1d726 <__kernel_rem_pio2+0x7be>
   1d724:	e746      	b.n	1d5b4 <__kernel_rem_pio2+0x64c>
   1d726:	000b      	movs	r3, r1
   1d728:	0002      	movs	r2, r0
   1d72a:	9907      	ldr	r1, [sp, #28]
   1d72c:	608a      	str	r2, [r1, #8]
   1d72e:	60cb      	str	r3, [r1, #12]
   1d730:	e6fb      	b.n	1d52a <__kernel_rem_pio2+0x5c2>
   1d732:	9b00      	ldr	r3, [sp, #0]
   1d734:	a90e      	add	r1, sp, #56	; 0x38
   1d736:	1e5a      	subs	r2, r3, #1
   1d738:	0092      	lsls	r2, r2, #2
   1d73a:	ab0e      	add	r3, sp, #56	; 0x38
   1d73c:	589b      	ldr	r3, [r3, r2]
   1d73e:	9305      	str	r3, [sp, #20]
   1d740:	025b      	lsls	r3, r3, #9
   1d742:	0a5b      	lsrs	r3, r3, #9
   1d744:	508b      	str	r3, [r1, r2]
   1d746:	e584      	b.n	1d252 <__kernel_rem_pio2+0x2ea>
   1d748:	9a00      	ldr	r2, [sp, #0]
   1d74a:	3301      	adds	r3, #1
   1d74c:	429a      	cmp	r2, r3
   1d74e:	d176      	bne.n	1d83e <__kernel_rem_pio2+0x8d6>
   1d750:	9b04      	ldr	r3, [sp, #16]
   1d752:	2b00      	cmp	r3, #0
   1d754:	dd00      	ble.n	1d758 <__kernel_rem_pio2+0x7f0>
   1d756:	e56c      	b.n	1d232 <__kernel_rem_pio2+0x2ca>
   1d758:	2d02      	cmp	r5, #2
   1d75a:	d000      	beq.n	1d75e <__kernel_rem_pio2+0x7f6>
   1d75c:	e593      	b.n	1d286 <__kernel_rem_pio2+0x31e>
   1d75e:	e62d      	b.n	1d3bc <__kernel_rem_pio2+0x454>
   1d760:	4699      	mov	r9, r3
   1d762:	4643      	mov	r3, r8
   1d764:	9309      	str	r3, [sp, #36]	; 0x24
   1d766:	9b04      	ldr	r3, [sp, #16]
   1d768:	0030      	movs	r0, r6
   1d76a:	425a      	negs	r2, r3
   1d76c:	0039      	movs	r1, r7
   1d76e:	9503      	str	r5, [sp, #12]
   1d770:	f000 fb7a 	bl	1de68 <scalbn>
   1d774:	2200      	movs	r2, #0
   1d776:	4b38      	ldr	r3, [pc, #224]	; (1d858 <__kernel_rem_pio2+0x8f0>)
   1d778:	0004      	movs	r4, r0
   1d77a:	000d      	movs	r5, r1
   1d77c:	f000 fd8e 	bl	1e29c <__aeabi_dcmpge>
   1d780:	2800      	cmp	r0, #0
   1d782:	d030      	beq.n	1d7e6 <__kernel_rem_pio2+0x87e>
   1d784:	4b35      	ldr	r3, [pc, #212]	; (1d85c <__kernel_rem_pio2+0x8f4>)
   1d786:	2200      	movs	r2, #0
   1d788:	0020      	movs	r0, r4
   1d78a:	0029      	movs	r1, r5
   1d78c:	f002 fca0 	bl	200d0 <__aeabi_dmul>
   1d790:	f003 fa54 	bl	20c3c <__aeabi_d2iz>
   1d794:	464a      	mov	r2, r9
   1d796:	0006      	movs	r6, r0
   1d798:	0097      	lsls	r7, r2, #2
   1d79a:	f003 fa83 	bl	20ca4 <__aeabi_i2d>
   1d79e:	2200      	movs	r2, #0
   1d7a0:	4b2d      	ldr	r3, [pc, #180]	; (1d858 <__kernel_rem_pio2+0x8f0>)
   1d7a2:	f002 fc95 	bl	200d0 <__aeabi_dmul>
   1d7a6:	0002      	movs	r2, r0
   1d7a8:	000b      	movs	r3, r1
   1d7aa:	0020      	movs	r0, r4
   1d7ac:	0029      	movs	r1, r5
   1d7ae:	f002 ff0f 	bl	205d0 <__aeabi_dsub>
   1d7b2:	f003 fa43 	bl	20c3c <__aeabi_d2iz>
   1d7b6:	aa0e      	add	r2, sp, #56	; 0x38
   1d7b8:	51d0      	str	r0, [r2, r7]
   1d7ba:	464a      	mov	r2, r9
   1d7bc:	9b04      	ldr	r3, [sp, #16]
   1d7be:	3201      	adds	r2, #1
   1d7c0:	3318      	adds	r3, #24
   1d7c2:	9202      	str	r2, [sp, #8]
   1d7c4:	9304      	str	r3, [sp, #16]
   1d7c6:	0093      	lsls	r3, r2, #2
   1d7c8:	aa0e      	add	r2, sp, #56	; 0x38
   1d7ca:	50d6      	str	r6, [r2, r3]
   1d7cc:	e61c      	b.n	1d408 <__kernel_rem_pio2+0x4a0>
   1d7ce:	2201      	movs	r2, #1
   1d7d0:	e587      	b.n	1d2e2 <__kernel_rem_pio2+0x37a>
   1d7d2:	9ba4      	ldr	r3, [sp, #656]	; 0x290
   1d7d4:	2b02      	cmp	r3, #2
   1d7d6:	dc25      	bgt.n	1d824 <__kernel_rem_pio2+0x8bc>
   1d7d8:	2b00      	cmp	r3, #0
   1d7da:	dc38      	bgt.n	1d84e <__kernel_rem_pio2+0x8e6>
   1d7dc:	d000      	beq.n	1d7e0 <__kernel_rem_pio2+0x878>
   1d7de:	e6a4      	b.n	1d52a <__kernel_rem_pio2+0x5c2>
   1d7e0:	2700      	movs	r7, #0
   1d7e2:	2400      	movs	r4, #0
   1d7e4:	e695      	b.n	1d512 <__kernel_rem_pio2+0x5aa>
   1d7e6:	464b      	mov	r3, r9
   1d7e8:	0020      	movs	r0, r4
   1d7ea:	0029      	movs	r1, r5
   1d7ec:	009e      	lsls	r6, r3, #2
   1d7ee:	f003 fa25 	bl	20c3c <__aeabi_d2iz>
   1d7f2:	ab0e      	add	r3, sp, #56	; 0x38
   1d7f4:	5198      	str	r0, [r3, r6]
   1d7f6:	464b      	mov	r3, r9
   1d7f8:	9302      	str	r3, [sp, #8]
   1d7fa:	e605      	b.n	1d408 <__kernel_rem_pio2+0x4a0>
   1d7fc:	ab72      	add	r3, sp, #456	; 0x1c8
   1d7fe:	9308      	str	r3, [sp, #32]
   1d800:	e42d      	b.n	1d05e <__kernel_rem_pio2+0xf6>
   1d802:	9907      	ldr	r1, [sp, #28]
   1d804:	9a4a      	ldr	r2, [sp, #296]	; 0x128
   1d806:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
   1d808:	600a      	str	r2, [r1, #0]
   1d80a:	604b      	str	r3, [r1, #4]
   1d80c:	464b      	mov	r3, r9
   1d80e:	689a      	ldr	r2, [r3, #8]
   1d810:	68db      	ldr	r3, [r3, #12]
   1d812:	9200      	str	r2, [sp, #0]
   1d814:	9301      	str	r3, [sp, #4]
   1d816:	608a      	str	r2, [r1, #8]
   1d818:	60cb      	str	r3, [r1, #12]
   1d81a:	003a      	movs	r2, r7
   1d81c:	0023      	movs	r3, r4
   1d81e:	610a      	str	r2, [r1, #16]
   1d820:	614b      	str	r3, [r1, #20]
   1d822:	e682      	b.n	1d52a <__kernel_rem_pio2+0x5c2>
   1d824:	ab4a      	add	r3, sp, #296	; 0x128
   1d826:	4699      	mov	r9, r3
   1d828:	9ba4      	ldr	r3, [sp, #656]	; 0x290
   1d82a:	2b03      	cmp	r3, #3
   1d82c:	d000      	beq.n	1d830 <__kernel_rem_pio2+0x8c8>
   1d82e:	e67c      	b.n	1d52a <__kernel_rem_pio2+0x5c2>
   1d830:	2700      	movs	r7, #0
   1d832:	2400      	movs	r4, #0
   1d834:	e74f      	b.n	1d6d6 <__kernel_rem_pio2+0x76e>
   1d836:	9a00      	ldr	r2, [sp, #0]
   1d838:	2301      	movs	r3, #1
   1d83a:	2a01      	cmp	r2, #1
   1d83c:	dd88      	ble.n	1d750 <__kernel_rem_pio2+0x7e8>
   1d83e:	0099      	lsls	r1, r3, #2
   1d840:	aa0e      	add	r2, sp, #56	; 0x38
   1d842:	5854      	ldr	r4, [r2, r1]
   1d844:	2c00      	cmp	r4, #0
   1d846:	d100      	bne.n	1d84a <__kernel_rem_pio2+0x8e2>
   1d848:	e77e      	b.n	1d748 <__kernel_rem_pio2+0x7e0>
   1d84a:	1c5a      	adds	r2, r3, #1
   1d84c:	e4aa      	b.n	1d1a4 <__kernel_rem_pio2+0x23c>
   1d84e:	2000      	movs	r0, #0
   1d850:	2100      	movs	r1, #0
   1d852:	e69c      	b.n	1d58e <__kernel_rem_pio2+0x626>
   1d854:	1fffffff 	.word	0x1fffffff
   1d858:	41700000 	.word	0x41700000
   1d85c:	3e700000 	.word	0x3e700000

0001d860 <__kernel_sin>:
   1d860:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d862:	46ce      	mov	lr, r9
   1d864:	4647      	mov	r7, r8
   1d866:	b580      	push	{r7, lr}
   1d868:	b087      	sub	sp, #28
   1d86a:	9200      	str	r2, [sp, #0]
   1d86c:	9301      	str	r3, [sp, #4]
   1d86e:	4a46      	ldr	r2, [pc, #280]	; (1d988 <__kernel_sin+0x128>)
   1d870:	004b      	lsls	r3, r1, #1
   1d872:	4681      	mov	r9, r0
   1d874:	4688      	mov	r8, r1
   1d876:	085b      	lsrs	r3, r3, #1
   1d878:	4293      	cmp	r3, r2
   1d87a:	dc05      	bgt.n	1d888 <__kernel_sin+0x28>
   1d87c:	f003 f9de 	bl	20c3c <__aeabi_d2iz>
   1d880:	4641      	mov	r1, r8
   1d882:	1e03      	subs	r3, r0, #0
   1d884:	4648      	mov	r0, r9
   1d886:	d066      	beq.n	1d956 <__kernel_sin+0xf6>
   1d888:	464a      	mov	r2, r9
   1d88a:	4643      	mov	r3, r8
   1d88c:	4648      	mov	r0, r9
   1d88e:	4641      	mov	r1, r8
   1d890:	f002 fc1e 	bl	200d0 <__aeabi_dmul>
   1d894:	0004      	movs	r4, r0
   1d896:	000d      	movs	r5, r1
   1d898:	0002      	movs	r2, r0
   1d89a:	000b      	movs	r3, r1
   1d89c:	4648      	mov	r0, r9
   1d89e:	4641      	mov	r1, r8
   1d8a0:	f002 fc16 	bl	200d0 <__aeabi_dmul>
   1d8a4:	4a39      	ldr	r2, [pc, #228]	; (1d98c <__kernel_sin+0x12c>)
   1d8a6:	4b3a      	ldr	r3, [pc, #232]	; (1d990 <__kernel_sin+0x130>)
   1d8a8:	0006      	movs	r6, r0
   1d8aa:	000f      	movs	r7, r1
   1d8ac:	0020      	movs	r0, r4
   1d8ae:	0029      	movs	r1, r5
   1d8b0:	f002 fc0e 	bl	200d0 <__aeabi_dmul>
   1d8b4:	4a37      	ldr	r2, [pc, #220]	; (1d994 <__kernel_sin+0x134>)
   1d8b6:	4b38      	ldr	r3, [pc, #224]	; (1d998 <__kernel_sin+0x138>)
   1d8b8:	f002 fe8a 	bl	205d0 <__aeabi_dsub>
   1d8bc:	0022      	movs	r2, r4
   1d8be:	002b      	movs	r3, r5
   1d8c0:	f002 fc06 	bl	200d0 <__aeabi_dmul>
   1d8c4:	4a35      	ldr	r2, [pc, #212]	; (1d99c <__kernel_sin+0x13c>)
   1d8c6:	4b36      	ldr	r3, [pc, #216]	; (1d9a0 <__kernel_sin+0x140>)
   1d8c8:	f001 fcbe 	bl	1f248 <__aeabi_dadd>
   1d8cc:	0022      	movs	r2, r4
   1d8ce:	002b      	movs	r3, r5
   1d8d0:	f002 fbfe 	bl	200d0 <__aeabi_dmul>
   1d8d4:	4a33      	ldr	r2, [pc, #204]	; (1d9a4 <__kernel_sin+0x144>)
   1d8d6:	4b34      	ldr	r3, [pc, #208]	; (1d9a8 <__kernel_sin+0x148>)
   1d8d8:	f002 fe7a 	bl	205d0 <__aeabi_dsub>
   1d8dc:	0022      	movs	r2, r4
   1d8de:	002b      	movs	r3, r5
   1d8e0:	f002 fbf6 	bl	200d0 <__aeabi_dmul>
   1d8e4:	4b31      	ldr	r3, [pc, #196]	; (1d9ac <__kernel_sin+0x14c>)
   1d8e6:	4a32      	ldr	r2, [pc, #200]	; (1d9b0 <__kernel_sin+0x150>)
   1d8e8:	f001 fcae 	bl	1f248 <__aeabi_dadd>
   1d8ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1d8ee:	9002      	str	r0, [sp, #8]
   1d8f0:	9103      	str	r1, [sp, #12]
   1d8f2:	2b00      	cmp	r3, #0
   1d8f4:	d034      	beq.n	1d960 <__kernel_sin+0x100>
   1d8f6:	9800      	ldr	r0, [sp, #0]
   1d8f8:	9901      	ldr	r1, [sp, #4]
   1d8fa:	2200      	movs	r2, #0
   1d8fc:	4b2d      	ldr	r3, [pc, #180]	; (1d9b4 <__kernel_sin+0x154>)
   1d8fe:	f002 fbe7 	bl	200d0 <__aeabi_dmul>
   1d902:	9a02      	ldr	r2, [sp, #8]
   1d904:	9b03      	ldr	r3, [sp, #12]
   1d906:	9004      	str	r0, [sp, #16]
   1d908:	9105      	str	r1, [sp, #20]
   1d90a:	0030      	movs	r0, r6
   1d90c:	0039      	movs	r1, r7
   1d90e:	f002 fbdf 	bl	200d0 <__aeabi_dmul>
   1d912:	0002      	movs	r2, r0
   1d914:	000b      	movs	r3, r1
   1d916:	9804      	ldr	r0, [sp, #16]
   1d918:	9905      	ldr	r1, [sp, #20]
   1d91a:	f002 fe59 	bl	205d0 <__aeabi_dsub>
   1d91e:	0022      	movs	r2, r4
   1d920:	002b      	movs	r3, r5
   1d922:	f002 fbd5 	bl	200d0 <__aeabi_dmul>
   1d926:	9a00      	ldr	r2, [sp, #0]
   1d928:	9b01      	ldr	r3, [sp, #4]
   1d92a:	f002 fe51 	bl	205d0 <__aeabi_dsub>
   1d92e:	4a22      	ldr	r2, [pc, #136]	; (1d9b8 <__kernel_sin+0x158>)
   1d930:	0004      	movs	r4, r0
   1d932:	000d      	movs	r5, r1
   1d934:	4b21      	ldr	r3, [pc, #132]	; (1d9bc <__kernel_sin+0x15c>)
   1d936:	0030      	movs	r0, r6
   1d938:	0039      	movs	r1, r7
   1d93a:	f002 fbc9 	bl	200d0 <__aeabi_dmul>
   1d93e:	0002      	movs	r2, r0
   1d940:	000b      	movs	r3, r1
   1d942:	0020      	movs	r0, r4
   1d944:	0029      	movs	r1, r5
   1d946:	f001 fc7f 	bl	1f248 <__aeabi_dadd>
   1d94a:	0002      	movs	r2, r0
   1d94c:	000b      	movs	r3, r1
   1d94e:	4648      	mov	r0, r9
   1d950:	4641      	mov	r1, r8
   1d952:	f002 fe3d 	bl	205d0 <__aeabi_dsub>
   1d956:	b007      	add	sp, #28
   1d958:	bc0c      	pop	{r2, r3}
   1d95a:	4690      	mov	r8, r2
   1d95c:	4699      	mov	r9, r3
   1d95e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d960:	0002      	movs	r2, r0
   1d962:	000b      	movs	r3, r1
   1d964:	0020      	movs	r0, r4
   1d966:	0029      	movs	r1, r5
   1d968:	f002 fbb2 	bl	200d0 <__aeabi_dmul>
   1d96c:	4a12      	ldr	r2, [pc, #72]	; (1d9b8 <__kernel_sin+0x158>)
   1d96e:	4b13      	ldr	r3, [pc, #76]	; (1d9bc <__kernel_sin+0x15c>)
   1d970:	f002 fe2e 	bl	205d0 <__aeabi_dsub>
   1d974:	0032      	movs	r2, r6
   1d976:	003b      	movs	r3, r7
   1d978:	f002 fbaa 	bl	200d0 <__aeabi_dmul>
   1d97c:	464a      	mov	r2, r9
   1d97e:	4643      	mov	r3, r8
   1d980:	f001 fc62 	bl	1f248 <__aeabi_dadd>
   1d984:	e7e7      	b.n	1d956 <__kernel_sin+0xf6>
   1d986:	46c0      	nop			; (mov r8, r8)
   1d988:	3e3fffff 	.word	0x3e3fffff
   1d98c:	5acfd57c 	.word	0x5acfd57c
   1d990:	3de5d93a 	.word	0x3de5d93a
   1d994:	8a2b9ceb 	.word	0x8a2b9ceb
   1d998:	3e5ae5e6 	.word	0x3e5ae5e6
   1d99c:	57b1fe7d 	.word	0x57b1fe7d
   1d9a0:	3ec71de3 	.word	0x3ec71de3
   1d9a4:	19c161d5 	.word	0x19c161d5
   1d9a8:	3f2a01a0 	.word	0x3f2a01a0
   1d9ac:	3f811111 	.word	0x3f811111
   1d9b0:	1110f8a6 	.word	0x1110f8a6
   1d9b4:	3fe00000 	.word	0x3fe00000
   1d9b8:	55555549 	.word	0x55555549
   1d9bc:	3fc55555 	.word	0x3fc55555

0001d9c0 <atan>:
   1d9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d9c2:	464e      	mov	r6, r9
   1d9c4:	4657      	mov	r7, sl
   1d9c6:	4645      	mov	r5, r8
   1d9c8:	46de      	mov	lr, fp
   1d9ca:	4ba4      	ldr	r3, [pc, #656]	; (1dc5c <atan+0x29c>)
   1d9cc:	b5e0      	push	{r5, r6, r7, lr}
   1d9ce:	004e      	lsls	r6, r1, #1
   1d9d0:	4680      	mov	r8, r0
   1d9d2:	4689      	mov	r9, r1
   1d9d4:	468a      	mov	sl, r1
   1d9d6:	0876      	lsrs	r6, r6, #1
   1d9d8:	429e      	cmp	r6, r3
   1d9da:	dd0c      	ble.n	1d9f6 <atan+0x36>
   1d9dc:	4ba0      	ldr	r3, [pc, #640]	; (1dc60 <atan+0x2a0>)
   1d9de:	429e      	cmp	r6, r3
   1d9e0:	dd00      	ble.n	1d9e4 <atan+0x24>
   1d9e2:	e0a3      	b.n	1db2c <atan+0x16c>
   1d9e4:	d100      	bne.n	1d9e8 <atan+0x28>
   1d9e6:	e09e      	b.n	1db26 <atan+0x166>
   1d9e8:	4653      	mov	r3, sl
   1d9ea:	2b00      	cmp	r3, #0
   1d9ec:	dc00      	bgt.n	1d9f0 <atan+0x30>
   1d9ee:	e0e1      	b.n	1dbb4 <atan+0x1f4>
   1d9f0:	4b9c      	ldr	r3, [pc, #624]	; (1dc64 <atan+0x2a4>)
   1d9f2:	4a9d      	ldr	r2, [pc, #628]	; (1dc68 <atan+0x2a8>)
   1d9f4:	e0a2      	b.n	1db3c <atan+0x17c>
   1d9f6:	4b9d      	ldr	r3, [pc, #628]	; (1dc6c <atan+0x2ac>)
   1d9f8:	429e      	cmp	r6, r3
   1d9fa:	dd00      	ble.n	1d9fe <atan+0x3e>
   1d9fc:	e0b4      	b.n	1db68 <atan+0x1a8>
   1d9fe:	4b9c      	ldr	r3, [pc, #624]	; (1dc70 <atan+0x2b0>)
   1da00:	429e      	cmp	r6, r3
   1da02:	dc00      	bgt.n	1da06 <atan+0x46>
   1da04:	e0a2      	b.n	1db4c <atan+0x18c>
   1da06:	2301      	movs	r3, #1
   1da08:	425b      	negs	r3, r3
   1da0a:	469b      	mov	fp, r3
   1da0c:	4642      	mov	r2, r8
   1da0e:	464b      	mov	r3, r9
   1da10:	4640      	mov	r0, r8
   1da12:	4649      	mov	r1, r9
   1da14:	f002 fb5c 	bl	200d0 <__aeabi_dmul>
   1da18:	0002      	movs	r2, r0
   1da1a:	000b      	movs	r3, r1
   1da1c:	0006      	movs	r6, r0
   1da1e:	000f      	movs	r7, r1
   1da20:	f002 fb56 	bl	200d0 <__aeabi_dmul>
   1da24:	0004      	movs	r4, r0
   1da26:	000d      	movs	r5, r1
   1da28:	4a92      	ldr	r2, [pc, #584]	; (1dc74 <atan+0x2b4>)
   1da2a:	4b93      	ldr	r3, [pc, #588]	; (1dc78 <atan+0x2b8>)
   1da2c:	f002 fb50 	bl	200d0 <__aeabi_dmul>
   1da30:	4a92      	ldr	r2, [pc, #584]	; (1dc7c <atan+0x2bc>)
   1da32:	4b93      	ldr	r3, [pc, #588]	; (1dc80 <atan+0x2c0>)
   1da34:	f001 fc08 	bl	1f248 <__aeabi_dadd>
   1da38:	0022      	movs	r2, r4
   1da3a:	002b      	movs	r3, r5
   1da3c:	f002 fb48 	bl	200d0 <__aeabi_dmul>
   1da40:	4a90      	ldr	r2, [pc, #576]	; (1dc84 <atan+0x2c4>)
   1da42:	4b91      	ldr	r3, [pc, #580]	; (1dc88 <atan+0x2c8>)
   1da44:	f001 fc00 	bl	1f248 <__aeabi_dadd>
   1da48:	0022      	movs	r2, r4
   1da4a:	002b      	movs	r3, r5
   1da4c:	f002 fb40 	bl	200d0 <__aeabi_dmul>
   1da50:	4a8e      	ldr	r2, [pc, #568]	; (1dc8c <atan+0x2cc>)
   1da52:	4b8f      	ldr	r3, [pc, #572]	; (1dc90 <atan+0x2d0>)
   1da54:	f001 fbf8 	bl	1f248 <__aeabi_dadd>
   1da58:	0022      	movs	r2, r4
   1da5a:	002b      	movs	r3, r5
   1da5c:	f002 fb38 	bl	200d0 <__aeabi_dmul>
   1da60:	4a8c      	ldr	r2, [pc, #560]	; (1dc94 <atan+0x2d4>)
   1da62:	4b8d      	ldr	r3, [pc, #564]	; (1dc98 <atan+0x2d8>)
   1da64:	f001 fbf0 	bl	1f248 <__aeabi_dadd>
   1da68:	0022      	movs	r2, r4
   1da6a:	002b      	movs	r3, r5
   1da6c:	f002 fb30 	bl	200d0 <__aeabi_dmul>
   1da70:	4a8a      	ldr	r2, [pc, #552]	; (1dc9c <atan+0x2dc>)
   1da72:	4b8b      	ldr	r3, [pc, #556]	; (1dca0 <atan+0x2e0>)
   1da74:	f001 fbe8 	bl	1f248 <__aeabi_dadd>
   1da78:	0032      	movs	r2, r6
   1da7a:	003b      	movs	r3, r7
   1da7c:	f002 fb28 	bl	200d0 <__aeabi_dmul>
   1da80:	4a88      	ldr	r2, [pc, #544]	; (1dca4 <atan+0x2e4>)
   1da82:	4b89      	ldr	r3, [pc, #548]	; (1dca8 <atan+0x2e8>)
   1da84:	0006      	movs	r6, r0
   1da86:	000f      	movs	r7, r1
   1da88:	0020      	movs	r0, r4
   1da8a:	0029      	movs	r1, r5
   1da8c:	f002 fb20 	bl	200d0 <__aeabi_dmul>
   1da90:	4a86      	ldr	r2, [pc, #536]	; (1dcac <atan+0x2ec>)
   1da92:	4b87      	ldr	r3, [pc, #540]	; (1dcb0 <atan+0x2f0>)
   1da94:	f002 fd9c 	bl	205d0 <__aeabi_dsub>
   1da98:	0022      	movs	r2, r4
   1da9a:	002b      	movs	r3, r5
   1da9c:	f002 fb18 	bl	200d0 <__aeabi_dmul>
   1daa0:	4a84      	ldr	r2, [pc, #528]	; (1dcb4 <atan+0x2f4>)
   1daa2:	4b85      	ldr	r3, [pc, #532]	; (1dcb8 <atan+0x2f8>)
   1daa4:	f002 fd94 	bl	205d0 <__aeabi_dsub>
   1daa8:	0022      	movs	r2, r4
   1daaa:	002b      	movs	r3, r5
   1daac:	f002 fb10 	bl	200d0 <__aeabi_dmul>
   1dab0:	4a82      	ldr	r2, [pc, #520]	; (1dcbc <atan+0x2fc>)
   1dab2:	4b83      	ldr	r3, [pc, #524]	; (1dcc0 <atan+0x300>)
   1dab4:	f002 fd8c 	bl	205d0 <__aeabi_dsub>
   1dab8:	0022      	movs	r2, r4
   1daba:	002b      	movs	r3, r5
   1dabc:	f002 fb08 	bl	200d0 <__aeabi_dmul>
   1dac0:	4a80      	ldr	r2, [pc, #512]	; (1dcc4 <atan+0x304>)
   1dac2:	4b81      	ldr	r3, [pc, #516]	; (1dcc8 <atan+0x308>)
   1dac4:	f002 fd84 	bl	205d0 <__aeabi_dsub>
   1dac8:	0022      	movs	r2, r4
   1daca:	002b      	movs	r3, r5
   1dacc:	f002 fb00 	bl	200d0 <__aeabi_dmul>
   1dad0:	000b      	movs	r3, r1
   1dad2:	4659      	mov	r1, fp
   1dad4:	0002      	movs	r2, r0
   1dad6:	3101      	adds	r1, #1
   1dad8:	d100      	bne.n	1dadc <atan+0x11c>
   1dada:	e06e      	b.n	1dbba <atan+0x1fa>
   1dadc:	4659      	mov	r1, fp
   1dade:	0030      	movs	r0, r6
   1dae0:	00cc      	lsls	r4, r1, #3
   1dae2:	0039      	movs	r1, r7
   1dae4:	f001 fbb0 	bl	1f248 <__aeabi_dadd>
   1dae8:	4642      	mov	r2, r8
   1daea:	464b      	mov	r3, r9
   1daec:	f002 faf0 	bl	200d0 <__aeabi_dmul>
   1daf0:	4d76      	ldr	r5, [pc, #472]	; (1dccc <atan+0x30c>)
   1daf2:	4b77      	ldr	r3, [pc, #476]	; (1dcd0 <atan+0x310>)
   1daf4:	192d      	adds	r5, r5, r4
   1daf6:	191c      	adds	r4, r3, r4
   1daf8:	6822      	ldr	r2, [r4, #0]
   1dafa:	6863      	ldr	r3, [r4, #4]
   1dafc:	f002 fd68 	bl	205d0 <__aeabi_dsub>
   1db00:	4642      	mov	r2, r8
   1db02:	464b      	mov	r3, r9
   1db04:	f002 fd64 	bl	205d0 <__aeabi_dsub>
   1db08:	0002      	movs	r2, r0
   1db0a:	000b      	movs	r3, r1
   1db0c:	6828      	ldr	r0, [r5, #0]
   1db0e:	6869      	ldr	r1, [r5, #4]
   1db10:	f002 fd5e 	bl	205d0 <__aeabi_dsub>
   1db14:	0003      	movs	r3, r0
   1db16:	4650      	mov	r0, sl
   1db18:	000a      	movs	r2, r1
   1db1a:	2800      	cmp	r0, #0
   1db1c:	da0e      	bge.n	1db3c <atan+0x17c>
   1db1e:	2280      	movs	r2, #128	; 0x80
   1db20:	0612      	lsls	r2, r2, #24
   1db22:	188a      	adds	r2, r1, r2
   1db24:	e00a      	b.n	1db3c <atan+0x17c>
   1db26:	2800      	cmp	r0, #0
   1db28:	d100      	bne.n	1db2c <atan+0x16c>
   1db2a:	e75d      	b.n	1d9e8 <atan+0x28>
   1db2c:	4642      	mov	r2, r8
   1db2e:	464b      	mov	r3, r9
   1db30:	4640      	mov	r0, r8
   1db32:	4649      	mov	r1, r9
   1db34:	f001 fb88 	bl	1f248 <__aeabi_dadd>
   1db38:	0003      	movs	r3, r0
   1db3a:	000a      	movs	r2, r1
   1db3c:	0018      	movs	r0, r3
   1db3e:	0011      	movs	r1, r2
   1db40:	bc3c      	pop	{r2, r3, r4, r5}
   1db42:	4690      	mov	r8, r2
   1db44:	4699      	mov	r9, r3
   1db46:	46a2      	mov	sl, r4
   1db48:	46ab      	mov	fp, r5
   1db4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1db4c:	4a61      	ldr	r2, [pc, #388]	; (1dcd4 <atan+0x314>)
   1db4e:	4b62      	ldr	r3, [pc, #392]	; (1dcd8 <atan+0x318>)
   1db50:	f001 fb7a 	bl	1f248 <__aeabi_dadd>
   1db54:	2200      	movs	r2, #0
   1db56:	4b61      	ldr	r3, [pc, #388]	; (1dcdc <atan+0x31c>)
   1db58:	f000 fb96 	bl	1e288 <__aeabi_dcmpgt>
   1db5c:	2800      	cmp	r0, #0
   1db5e:	d100      	bne.n	1db62 <atan+0x1a2>
   1db60:	e751      	b.n	1da06 <atan+0x46>
   1db62:	4643      	mov	r3, r8
   1db64:	464a      	mov	r2, r9
   1db66:	e7e9      	b.n	1db3c <atan+0x17c>
   1db68:	f000 f8c6 	bl	1dcf8 <fabs>
   1db6c:	4b5c      	ldr	r3, [pc, #368]	; (1dce0 <atan+0x320>)
   1db6e:	0004      	movs	r4, r0
   1db70:	000d      	movs	r5, r1
   1db72:	429e      	cmp	r6, r3
   1db74:	dc32      	bgt.n	1dbdc <atan+0x21c>
   1db76:	4b5b      	ldr	r3, [pc, #364]	; (1dce4 <atan+0x324>)
   1db78:	429e      	cmp	r6, r3
   1db7a:	dc58      	bgt.n	1dc2e <atan+0x26e>
   1db7c:	0002      	movs	r2, r0
   1db7e:	000b      	movs	r3, r1
   1db80:	f001 fb62 	bl	1f248 <__aeabi_dadd>
   1db84:	2200      	movs	r2, #0
   1db86:	4b55      	ldr	r3, [pc, #340]	; (1dcdc <atan+0x31c>)
   1db88:	f002 fd22 	bl	205d0 <__aeabi_dsub>
   1db8c:	2380      	movs	r3, #128	; 0x80
   1db8e:	0006      	movs	r6, r0
   1db90:	000f      	movs	r7, r1
   1db92:	2200      	movs	r2, #0
   1db94:	05db      	lsls	r3, r3, #23
   1db96:	0020      	movs	r0, r4
   1db98:	0029      	movs	r1, r5
   1db9a:	f001 fb55 	bl	1f248 <__aeabi_dadd>
   1db9e:	000b      	movs	r3, r1
   1dba0:	0002      	movs	r2, r0
   1dba2:	0039      	movs	r1, r7
   1dba4:	0030      	movs	r0, r6
   1dba6:	f001 fe5f 	bl	1f868 <__aeabi_ddiv>
   1dbaa:	2300      	movs	r3, #0
   1dbac:	4680      	mov	r8, r0
   1dbae:	4689      	mov	r9, r1
   1dbb0:	469b      	mov	fp, r3
   1dbb2:	e72b      	b.n	1da0c <atan+0x4c>
   1dbb4:	4b2b      	ldr	r3, [pc, #172]	; (1dc64 <atan+0x2a4>)
   1dbb6:	4a4c      	ldr	r2, [pc, #304]	; (1dce8 <atan+0x328>)
   1dbb8:	e7c0      	b.n	1db3c <atan+0x17c>
   1dbba:	0030      	movs	r0, r6
   1dbbc:	0039      	movs	r1, r7
   1dbbe:	f001 fb43 	bl	1f248 <__aeabi_dadd>
   1dbc2:	4642      	mov	r2, r8
   1dbc4:	464b      	mov	r3, r9
   1dbc6:	f002 fa83 	bl	200d0 <__aeabi_dmul>
   1dbca:	0002      	movs	r2, r0
   1dbcc:	000b      	movs	r3, r1
   1dbce:	4640      	mov	r0, r8
   1dbd0:	4649      	mov	r1, r9
   1dbd2:	f002 fcfd 	bl	205d0 <__aeabi_dsub>
   1dbd6:	0003      	movs	r3, r0
   1dbd8:	000a      	movs	r2, r1
   1dbda:	e7af      	b.n	1db3c <atan+0x17c>
   1dbdc:	4b43      	ldr	r3, [pc, #268]	; (1dcec <atan+0x32c>)
   1dbde:	429e      	cmp	r6, r3
   1dbe0:	dc1a      	bgt.n	1dc18 <atan+0x258>
   1dbe2:	2200      	movs	r2, #0
   1dbe4:	4b42      	ldr	r3, [pc, #264]	; (1dcf0 <atan+0x330>)
   1dbe6:	f002 fcf3 	bl	205d0 <__aeabi_dsub>
   1dbea:	2200      	movs	r2, #0
   1dbec:	0006      	movs	r6, r0
   1dbee:	000f      	movs	r7, r1
   1dbf0:	4b3f      	ldr	r3, [pc, #252]	; (1dcf0 <atan+0x330>)
   1dbf2:	0020      	movs	r0, r4
   1dbf4:	0029      	movs	r1, r5
   1dbf6:	f002 fa6b 	bl	200d0 <__aeabi_dmul>
   1dbfa:	2200      	movs	r2, #0
   1dbfc:	4b37      	ldr	r3, [pc, #220]	; (1dcdc <atan+0x31c>)
   1dbfe:	f001 fb23 	bl	1f248 <__aeabi_dadd>
   1dc02:	000b      	movs	r3, r1
   1dc04:	0002      	movs	r2, r0
   1dc06:	0039      	movs	r1, r7
   1dc08:	0030      	movs	r0, r6
   1dc0a:	f001 fe2d 	bl	1f868 <__aeabi_ddiv>
   1dc0e:	2302      	movs	r3, #2
   1dc10:	4680      	mov	r8, r0
   1dc12:	4689      	mov	r9, r1
   1dc14:	469b      	mov	fp, r3
   1dc16:	e6f9      	b.n	1da0c <atan+0x4c>
   1dc18:	000b      	movs	r3, r1
   1dc1a:	0002      	movs	r2, r0
   1dc1c:	4935      	ldr	r1, [pc, #212]	; (1dcf4 <atan+0x334>)
   1dc1e:	2000      	movs	r0, #0
   1dc20:	f001 fe22 	bl	1f868 <__aeabi_ddiv>
   1dc24:	2303      	movs	r3, #3
   1dc26:	4680      	mov	r8, r0
   1dc28:	4689      	mov	r9, r1
   1dc2a:	469b      	mov	fp, r3
   1dc2c:	e6ee      	b.n	1da0c <atan+0x4c>
   1dc2e:	2200      	movs	r2, #0
   1dc30:	4b2a      	ldr	r3, [pc, #168]	; (1dcdc <atan+0x31c>)
   1dc32:	f002 fccd 	bl	205d0 <__aeabi_dsub>
   1dc36:	2200      	movs	r2, #0
   1dc38:	0006      	movs	r6, r0
   1dc3a:	000f      	movs	r7, r1
   1dc3c:	4b27      	ldr	r3, [pc, #156]	; (1dcdc <atan+0x31c>)
   1dc3e:	0020      	movs	r0, r4
   1dc40:	0029      	movs	r1, r5
   1dc42:	f001 fb01 	bl	1f248 <__aeabi_dadd>
   1dc46:	000b      	movs	r3, r1
   1dc48:	0002      	movs	r2, r0
   1dc4a:	0039      	movs	r1, r7
   1dc4c:	0030      	movs	r0, r6
   1dc4e:	f001 fe0b 	bl	1f868 <__aeabi_ddiv>
   1dc52:	2301      	movs	r3, #1
   1dc54:	4680      	mov	r8, r0
   1dc56:	4689      	mov	r9, r1
   1dc58:	469b      	mov	fp, r3
   1dc5a:	e6d7      	b.n	1da0c <atan+0x4c>
   1dc5c:	440fffff 	.word	0x440fffff
   1dc60:	7ff00000 	.word	0x7ff00000
   1dc64:	54442d18 	.word	0x54442d18
   1dc68:	3ff921fb 	.word	0x3ff921fb
   1dc6c:	3fdbffff 	.word	0x3fdbffff
   1dc70:	3e1fffff 	.word	0x3e1fffff
   1dc74:	e322da11 	.word	0xe322da11
   1dc78:	3f90ad3a 	.word	0x3f90ad3a
   1dc7c:	24760deb 	.word	0x24760deb
   1dc80:	3fa97b4b 	.word	0x3fa97b4b
   1dc84:	a0d03d51 	.word	0xa0d03d51
   1dc88:	3fb10d66 	.word	0x3fb10d66
   1dc8c:	c54c206e 	.word	0xc54c206e
   1dc90:	3fb745cd 	.word	0x3fb745cd
   1dc94:	920083ff 	.word	0x920083ff
   1dc98:	3fc24924 	.word	0x3fc24924
   1dc9c:	5555550d 	.word	0x5555550d
   1dca0:	3fd55555 	.word	0x3fd55555
   1dca4:	2c6a6c2f 	.word	0x2c6a6c2f
   1dca8:	bfa2b444 	.word	0xbfa2b444
   1dcac:	52defd9a 	.word	0x52defd9a
   1dcb0:	3fadde2d 	.word	0x3fadde2d
   1dcb4:	af749a6d 	.word	0xaf749a6d
   1dcb8:	3fb3b0f2 	.word	0x3fb3b0f2
   1dcbc:	fe231671 	.word	0xfe231671
   1dcc0:	3fbc71c6 	.word	0x3fbc71c6
   1dcc4:	9998ebc4 	.word	0x9998ebc4
   1dcc8:	3fc99999 	.word	0x3fc99999
   1dccc:	00026d40 	.word	0x00026d40
   1dcd0:	00026d60 	.word	0x00026d60
   1dcd4:	8800759c 	.word	0x8800759c
   1dcd8:	7e37e43c 	.word	0x7e37e43c
   1dcdc:	3ff00000 	.word	0x3ff00000
   1dce0:	3ff2ffff 	.word	0x3ff2ffff
   1dce4:	3fe5ffff 	.word	0x3fe5ffff
   1dce8:	bff921fb 	.word	0xbff921fb
   1dcec:	40037fff 	.word	0x40037fff
   1dcf0:	3ff80000 	.word	0x3ff80000
   1dcf4:	bff00000 	.word	0xbff00000

0001dcf8 <fabs>:
   1dcf8:	0049      	lsls	r1, r1, #1
   1dcfa:	084b      	lsrs	r3, r1, #1
   1dcfc:	0019      	movs	r1, r3
   1dcfe:	4770      	bx	lr

0001dd00 <finite>:
   1dd00:	4b03      	ldr	r3, [pc, #12]	; (1dd10 <finite+0x10>)
   1dd02:	0048      	lsls	r0, r1, #1
   1dd04:	469c      	mov	ip, r3
   1dd06:	0840      	lsrs	r0, r0, #1
   1dd08:	4460      	add	r0, ip
   1dd0a:	0fc0      	lsrs	r0, r0, #31
   1dd0c:	4770      	bx	lr
   1dd0e:	46c0      	nop			; (mov r8, r8)
   1dd10:	80100000 	.word	0x80100000

0001dd14 <matherr>:
   1dd14:	2000      	movs	r0, #0
   1dd16:	4770      	bx	lr

0001dd18 <nan>:
   1dd18:	2000      	movs	r0, #0
   1dd1a:	4901      	ldr	r1, [pc, #4]	; (1dd20 <nan+0x8>)
   1dd1c:	4770      	bx	lr
   1dd1e:	46c0      	nop			; (mov r8, r8)
   1dd20:	7ff80000 	.word	0x7ff80000

0001dd24 <rint>:
   1dd24:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dd26:	46c6      	mov	lr, r8
   1dd28:	b500      	push	{lr}
   1dd2a:	0fcb      	lsrs	r3, r1, #31
   1dd2c:	4698      	mov	r8, r3
   1dd2e:	4c4a      	ldr	r4, [pc, #296]	; (1de58 <rint+0x134>)
   1dd30:	004b      	lsls	r3, r1, #1
   1dd32:	0d5b      	lsrs	r3, r3, #21
   1dd34:	191e      	adds	r6, r3, r4
   1dd36:	b082      	sub	sp, #8
   1dd38:	0007      	movs	r7, r0
   1dd3a:	000a      	movs	r2, r1
   1dd3c:	2e13      	cmp	r6, #19
   1dd3e:	dc35      	bgt.n	1ddac <rint+0x88>
   1dd40:	2e00      	cmp	r6, #0
   1dd42:	db57      	blt.n	1ddf4 <rint+0xd0>
   1dd44:	4b45      	ldr	r3, [pc, #276]	; (1de5c <rint+0x138>)
   1dd46:	0004      	movs	r4, r0
   1dd48:	4133      	asrs	r3, r6
   1dd4a:	001f      	movs	r7, r3
   1dd4c:	400f      	ands	r7, r1
   1dd4e:	4307      	orrs	r7, r0
   1dd50:	000d      	movs	r5, r1
   1dd52:	2f00      	cmp	r7, #0
   1dd54:	d024      	beq.n	1dda0 <rint+0x7c>
   1dd56:	085b      	lsrs	r3, r3, #1
   1dd58:	001c      	movs	r4, r3
   1dd5a:	400c      	ands	r4, r1
   1dd5c:	4320      	orrs	r0, r4
   1dd5e:	2700      	movs	r7, #0
   1dd60:	2800      	cmp	r0, #0
   1dd62:	d007      	beq.n	1dd74 <rint+0x50>
   1dd64:	2e13      	cmp	r6, #19
   1dd66:	d100      	bne.n	1dd6a <rint+0x46>
   1dd68:	e073      	b.n	1de52 <rint+0x12e>
   1dd6a:	2280      	movs	r2, #128	; 0x80
   1dd6c:	02d2      	lsls	r2, r2, #11
   1dd6e:	4132      	asrs	r2, r6
   1dd70:	4399      	bics	r1, r3
   1dd72:	430a      	orrs	r2, r1
   1dd74:	4643      	mov	r3, r8
   1dd76:	00de      	lsls	r6, r3, #3
   1dd78:	4b39      	ldr	r3, [pc, #228]	; (1de60 <rint+0x13c>)
   1dd7a:	0011      	movs	r1, r2
   1dd7c:	199e      	adds	r6, r3, r6
   1dd7e:	6834      	ldr	r4, [r6, #0]
   1dd80:	6875      	ldr	r5, [r6, #4]
   1dd82:	0038      	movs	r0, r7
   1dd84:	0022      	movs	r2, r4
   1dd86:	002b      	movs	r3, r5
   1dd88:	f001 fa5e 	bl	1f248 <__aeabi_dadd>
   1dd8c:	9000      	str	r0, [sp, #0]
   1dd8e:	9101      	str	r1, [sp, #4]
   1dd90:	9800      	ldr	r0, [sp, #0]
   1dd92:	9901      	ldr	r1, [sp, #4]
   1dd94:	0022      	movs	r2, r4
   1dd96:	002b      	movs	r3, r5
   1dd98:	f002 fc1a 	bl	205d0 <__aeabi_dsub>
   1dd9c:	0004      	movs	r4, r0
   1dd9e:	000d      	movs	r5, r1
   1dda0:	0020      	movs	r0, r4
   1dda2:	0029      	movs	r1, r5
   1dda4:	b002      	add	sp, #8
   1dda6:	bc04      	pop	{r2}
   1dda8:	4690      	mov	r8, r2
   1ddaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ddac:	2e33      	cmp	r6, #51	; 0x33
   1ddae:	dd0c      	ble.n	1ddca <rint+0xa6>
   1ddb0:	2380      	movs	r3, #128	; 0x80
   1ddb2:	0004      	movs	r4, r0
   1ddb4:	00db      	lsls	r3, r3, #3
   1ddb6:	000d      	movs	r5, r1
   1ddb8:	429e      	cmp	r6, r3
   1ddba:	d1f1      	bne.n	1dda0 <rint+0x7c>
   1ddbc:	0002      	movs	r2, r0
   1ddbe:	000b      	movs	r3, r1
   1ddc0:	f001 fa42 	bl	1f248 <__aeabi_dadd>
   1ddc4:	0004      	movs	r4, r0
   1ddc6:	000d      	movs	r5, r1
   1ddc8:	e7ea      	b.n	1dda0 <rint+0x7c>
   1ddca:	4c26      	ldr	r4, [pc, #152]	; (1de64 <rint+0x140>)
   1ddcc:	000d      	movs	r5, r1
   1ddce:	46a4      	mov	ip, r4
   1ddd0:	2401      	movs	r4, #1
   1ddd2:	4463      	add	r3, ip
   1ddd4:	4264      	negs	r4, r4
   1ddd6:	40dc      	lsrs	r4, r3
   1ddd8:	46a4      	mov	ip, r4
   1ddda:	4661      	mov	r1, ip
   1dddc:	0004      	movs	r4, r0
   1ddde:	4201      	tst	r1, r0
   1dde0:	d0de      	beq.n	1dda0 <rint+0x7c>
   1dde2:	0849      	lsrs	r1, r1, #1
   1dde4:	4201      	tst	r1, r0
   1dde6:	d0c5      	beq.n	1dd74 <rint+0x50>
   1dde8:	2780      	movs	r7, #128	; 0x80
   1ddea:	05ff      	lsls	r7, r7, #23
   1ddec:	411f      	asrs	r7, r3
   1ddee:	4388      	bics	r0, r1
   1ddf0:	4307      	orrs	r7, r0
   1ddf2:	e7bf      	b.n	1dd74 <rint+0x50>
   1ddf4:	004b      	lsls	r3, r1, #1
   1ddf6:	085b      	lsrs	r3, r3, #1
   1ddf8:	4303      	orrs	r3, r0
   1ddfa:	0004      	movs	r4, r0
   1ddfc:	000d      	movs	r5, r1
   1ddfe:	2b00      	cmp	r3, #0
   1de00:	d0ce      	beq.n	1dda0 <rint+0x7c>
   1de02:	030b      	lsls	r3, r1, #12
   1de04:	0b1b      	lsrs	r3, r3, #12
   1de06:	4303      	orrs	r3, r0
   1de08:	001a      	movs	r2, r3
   1de0a:	425b      	negs	r3, r3
   1de0c:	4313      	orrs	r3, r2
   1de0e:	2280      	movs	r2, #128	; 0x80
   1de10:	0b1b      	lsrs	r3, r3, #12
   1de12:	0312      	lsls	r2, r2, #12
   1de14:	4013      	ands	r3, r2
   1de16:	0c4a      	lsrs	r2, r1, #17
   1de18:	0452      	lsls	r2, r2, #17
   1de1a:	4313      	orrs	r3, r2
   1de1c:	0019      	movs	r1, r3
   1de1e:	4643      	mov	r3, r8
   1de20:	00da      	lsls	r2, r3, #3
   1de22:	4b0f      	ldr	r3, [pc, #60]	; (1de60 <rint+0x13c>)
   1de24:	189b      	adds	r3, r3, r2
   1de26:	681c      	ldr	r4, [r3, #0]
   1de28:	685d      	ldr	r5, [r3, #4]
   1de2a:	0022      	movs	r2, r4
   1de2c:	002b      	movs	r3, r5
   1de2e:	f001 fa0b 	bl	1f248 <__aeabi_dadd>
   1de32:	9000      	str	r0, [sp, #0]
   1de34:	9101      	str	r1, [sp, #4]
   1de36:	9800      	ldr	r0, [sp, #0]
   1de38:	9901      	ldr	r1, [sp, #4]
   1de3a:	0022      	movs	r2, r4
   1de3c:	002b      	movs	r3, r5
   1de3e:	f002 fbc7 	bl	205d0 <__aeabi_dsub>
   1de42:	4642      	mov	r2, r8
   1de44:	004b      	lsls	r3, r1, #1
   1de46:	085b      	lsrs	r3, r3, #1
   1de48:	07d6      	lsls	r6, r2, #31
   1de4a:	4333      	orrs	r3, r6
   1de4c:	0004      	movs	r4, r0
   1de4e:	001d      	movs	r5, r3
   1de50:	e7a6      	b.n	1dda0 <rint+0x7c>
   1de52:	2780      	movs	r7, #128	; 0x80
   1de54:	063f      	lsls	r7, r7, #24
   1de56:	e788      	b.n	1dd6a <rint+0x46>
   1de58:	fffffc01 	.word	0xfffffc01
   1de5c:	000fffff 	.word	0x000fffff
   1de60:	00026d80 	.word	0x00026d80
   1de64:	fffffbed 	.word	0xfffffbed

0001de68 <scalbn>:
   1de68:	004b      	lsls	r3, r1, #1
   1de6a:	b570      	push	{r4, r5, r6, lr}
   1de6c:	0d5b      	lsrs	r3, r3, #21
   1de6e:	0014      	movs	r4, r2
   1de70:	000a      	movs	r2, r1
   1de72:	2b00      	cmp	r3, #0
   1de74:	d11a      	bne.n	1deac <scalbn+0x44>
   1de76:	004b      	lsls	r3, r1, #1
   1de78:	085b      	lsrs	r3, r3, #1
   1de7a:	4303      	orrs	r3, r0
   1de7c:	d015      	beq.n	1deaa <scalbn+0x42>
   1de7e:	2200      	movs	r2, #0
   1de80:	4b22      	ldr	r3, [pc, #136]	; (1df0c <scalbn+0xa4>)
   1de82:	f002 f925 	bl	200d0 <__aeabi_dmul>
   1de86:	4b22      	ldr	r3, [pc, #136]	; (1df10 <scalbn+0xa8>)
   1de88:	000a      	movs	r2, r1
   1de8a:	429c      	cmp	r4, r3
   1de8c:	db22      	blt.n	1ded4 <scalbn+0x6c>
   1de8e:	004b      	lsls	r3, r1, #1
   1de90:	0d5b      	lsrs	r3, r3, #21
   1de92:	3b36      	subs	r3, #54	; 0x36
   1de94:	4d1f      	ldr	r5, [pc, #124]	; (1df14 <scalbn+0xac>)
   1de96:	18e3      	adds	r3, r4, r3
   1de98:	42ab      	cmp	r3, r5
   1de9a:	dc20      	bgt.n	1dede <scalbn+0x76>
   1de9c:	2b00      	cmp	r3, #0
   1de9e:	dd0d      	ble.n	1debc <scalbn+0x54>
   1dea0:	4c1d      	ldr	r4, [pc, #116]	; (1df18 <scalbn+0xb0>)
   1dea2:	051b      	lsls	r3, r3, #20
   1dea4:	4022      	ands	r2, r4
   1dea6:	431a      	orrs	r2, r3
   1dea8:	0011      	movs	r1, r2
   1deaa:	bd70      	pop	{r4, r5, r6, pc}
   1deac:	4d1b      	ldr	r5, [pc, #108]	; (1df1c <scalbn+0xb4>)
   1deae:	42ab      	cmp	r3, r5
   1deb0:	d1f0      	bne.n	1de94 <scalbn+0x2c>
   1deb2:	0002      	movs	r2, r0
   1deb4:	000b      	movs	r3, r1
   1deb6:	f001 f9c7 	bl	1f248 <__aeabi_dadd>
   1deba:	e7f6      	b.n	1deaa <scalbn+0x42>
   1debc:	001d      	movs	r5, r3
   1debe:	3535      	adds	r5, #53	; 0x35
   1dec0:	da18      	bge.n	1def4 <scalbn+0x8c>
   1dec2:	4b17      	ldr	r3, [pc, #92]	; (1df20 <scalbn+0xb8>)
   1dec4:	0002      	movs	r2, r0
   1dec6:	429c      	cmp	r4, r3
   1dec8:	dc0a      	bgt.n	1dee0 <scalbn+0x78>
   1deca:	000b      	movs	r3, r1
   1decc:	4815      	ldr	r0, [pc, #84]	; (1df24 <scalbn+0xbc>)
   1dece:	4916      	ldr	r1, [pc, #88]	; (1df28 <scalbn+0xc0>)
   1ded0:	f000 f832 	bl	1df38 <copysign>
   1ded4:	4a13      	ldr	r2, [pc, #76]	; (1df24 <scalbn+0xbc>)
   1ded6:	4b14      	ldr	r3, [pc, #80]	; (1df28 <scalbn+0xc0>)
   1ded8:	f002 f8fa 	bl	200d0 <__aeabi_dmul>
   1dedc:	e7e5      	b.n	1deaa <scalbn+0x42>
   1dede:	0002      	movs	r2, r0
   1dee0:	000b      	movs	r3, r1
   1dee2:	4812      	ldr	r0, [pc, #72]	; (1df2c <scalbn+0xc4>)
   1dee4:	4912      	ldr	r1, [pc, #72]	; (1df30 <scalbn+0xc8>)
   1dee6:	f000 f827 	bl	1df38 <copysign>
   1deea:	4a10      	ldr	r2, [pc, #64]	; (1df2c <scalbn+0xc4>)
   1deec:	4b10      	ldr	r3, [pc, #64]	; (1df30 <scalbn+0xc8>)
   1deee:	f002 f8ef 	bl	200d0 <__aeabi_dmul>
   1def2:	e7da      	b.n	1deaa <scalbn+0x42>
   1def4:	4c08      	ldr	r4, [pc, #32]	; (1df18 <scalbn+0xb0>)
   1def6:	3336      	adds	r3, #54	; 0x36
   1def8:	4022      	ands	r2, r4
   1defa:	051b      	lsls	r3, r3, #20
   1defc:	4313      	orrs	r3, r2
   1defe:	0019      	movs	r1, r3
   1df00:	2200      	movs	r2, #0
   1df02:	4b0c      	ldr	r3, [pc, #48]	; (1df34 <scalbn+0xcc>)
   1df04:	f002 f8e4 	bl	200d0 <__aeabi_dmul>
   1df08:	e7cf      	b.n	1deaa <scalbn+0x42>
   1df0a:	46c0      	nop			; (mov r8, r8)
   1df0c:	43500000 	.word	0x43500000
   1df10:	ffff3cb0 	.word	0xffff3cb0
   1df14:	000007fe 	.word	0x000007fe
   1df18:	800fffff 	.word	0x800fffff
   1df1c:	000007ff 	.word	0x000007ff
   1df20:	0000c350 	.word	0x0000c350
   1df24:	c2f8f359 	.word	0xc2f8f359
   1df28:	01a56e1f 	.word	0x01a56e1f
   1df2c:	8800759c 	.word	0x8800759c
   1df30:	7e37e43c 	.word	0x7e37e43c
   1df34:	3c900000 	.word	0x3c900000

0001df38 <copysign>:
   1df38:	b530      	push	{r4, r5, lr}
   1df3a:	004a      	lsls	r2, r1, #1
   1df3c:	0fdb      	lsrs	r3, r3, #31
   1df3e:	07db      	lsls	r3, r3, #31
   1df40:	0852      	lsrs	r2, r2, #1
   1df42:	431a      	orrs	r2, r3
   1df44:	0011      	movs	r1, r2
   1df46:	bd30      	pop	{r4, r5, pc}

0001df48 <__udivsi3>:
   1df48:	2200      	movs	r2, #0
   1df4a:	0843      	lsrs	r3, r0, #1
   1df4c:	428b      	cmp	r3, r1
   1df4e:	d374      	bcc.n	1e03a <__udivsi3+0xf2>
   1df50:	0903      	lsrs	r3, r0, #4
   1df52:	428b      	cmp	r3, r1
   1df54:	d35f      	bcc.n	1e016 <__udivsi3+0xce>
   1df56:	0a03      	lsrs	r3, r0, #8
   1df58:	428b      	cmp	r3, r1
   1df5a:	d344      	bcc.n	1dfe6 <__udivsi3+0x9e>
   1df5c:	0b03      	lsrs	r3, r0, #12
   1df5e:	428b      	cmp	r3, r1
   1df60:	d328      	bcc.n	1dfb4 <__udivsi3+0x6c>
   1df62:	0c03      	lsrs	r3, r0, #16
   1df64:	428b      	cmp	r3, r1
   1df66:	d30d      	bcc.n	1df84 <__udivsi3+0x3c>
   1df68:	22ff      	movs	r2, #255	; 0xff
   1df6a:	0209      	lsls	r1, r1, #8
   1df6c:	ba12      	rev	r2, r2
   1df6e:	0c03      	lsrs	r3, r0, #16
   1df70:	428b      	cmp	r3, r1
   1df72:	d302      	bcc.n	1df7a <__udivsi3+0x32>
   1df74:	1212      	asrs	r2, r2, #8
   1df76:	0209      	lsls	r1, r1, #8
   1df78:	d065      	beq.n	1e046 <__udivsi3+0xfe>
   1df7a:	0b03      	lsrs	r3, r0, #12
   1df7c:	428b      	cmp	r3, r1
   1df7e:	d319      	bcc.n	1dfb4 <__udivsi3+0x6c>
   1df80:	e000      	b.n	1df84 <__udivsi3+0x3c>
   1df82:	0a09      	lsrs	r1, r1, #8
   1df84:	0bc3      	lsrs	r3, r0, #15
   1df86:	428b      	cmp	r3, r1
   1df88:	d301      	bcc.n	1df8e <__udivsi3+0x46>
   1df8a:	03cb      	lsls	r3, r1, #15
   1df8c:	1ac0      	subs	r0, r0, r3
   1df8e:	4152      	adcs	r2, r2
   1df90:	0b83      	lsrs	r3, r0, #14
   1df92:	428b      	cmp	r3, r1
   1df94:	d301      	bcc.n	1df9a <__udivsi3+0x52>
   1df96:	038b      	lsls	r3, r1, #14
   1df98:	1ac0      	subs	r0, r0, r3
   1df9a:	4152      	adcs	r2, r2
   1df9c:	0b43      	lsrs	r3, r0, #13
   1df9e:	428b      	cmp	r3, r1
   1dfa0:	d301      	bcc.n	1dfa6 <__udivsi3+0x5e>
   1dfa2:	034b      	lsls	r3, r1, #13
   1dfa4:	1ac0      	subs	r0, r0, r3
   1dfa6:	4152      	adcs	r2, r2
   1dfa8:	0b03      	lsrs	r3, r0, #12
   1dfaa:	428b      	cmp	r3, r1
   1dfac:	d301      	bcc.n	1dfb2 <__udivsi3+0x6a>
   1dfae:	030b      	lsls	r3, r1, #12
   1dfb0:	1ac0      	subs	r0, r0, r3
   1dfb2:	4152      	adcs	r2, r2
   1dfb4:	0ac3      	lsrs	r3, r0, #11
   1dfb6:	428b      	cmp	r3, r1
   1dfb8:	d301      	bcc.n	1dfbe <__udivsi3+0x76>
   1dfba:	02cb      	lsls	r3, r1, #11
   1dfbc:	1ac0      	subs	r0, r0, r3
   1dfbe:	4152      	adcs	r2, r2
   1dfc0:	0a83      	lsrs	r3, r0, #10
   1dfc2:	428b      	cmp	r3, r1
   1dfc4:	d301      	bcc.n	1dfca <__udivsi3+0x82>
   1dfc6:	028b      	lsls	r3, r1, #10
   1dfc8:	1ac0      	subs	r0, r0, r3
   1dfca:	4152      	adcs	r2, r2
   1dfcc:	0a43      	lsrs	r3, r0, #9
   1dfce:	428b      	cmp	r3, r1
   1dfd0:	d301      	bcc.n	1dfd6 <__udivsi3+0x8e>
   1dfd2:	024b      	lsls	r3, r1, #9
   1dfd4:	1ac0      	subs	r0, r0, r3
   1dfd6:	4152      	adcs	r2, r2
   1dfd8:	0a03      	lsrs	r3, r0, #8
   1dfda:	428b      	cmp	r3, r1
   1dfdc:	d301      	bcc.n	1dfe2 <__udivsi3+0x9a>
   1dfde:	020b      	lsls	r3, r1, #8
   1dfe0:	1ac0      	subs	r0, r0, r3
   1dfe2:	4152      	adcs	r2, r2
   1dfe4:	d2cd      	bcs.n	1df82 <__udivsi3+0x3a>
   1dfe6:	09c3      	lsrs	r3, r0, #7
   1dfe8:	428b      	cmp	r3, r1
   1dfea:	d301      	bcc.n	1dff0 <__udivsi3+0xa8>
   1dfec:	01cb      	lsls	r3, r1, #7
   1dfee:	1ac0      	subs	r0, r0, r3
   1dff0:	4152      	adcs	r2, r2
   1dff2:	0983      	lsrs	r3, r0, #6
   1dff4:	428b      	cmp	r3, r1
   1dff6:	d301      	bcc.n	1dffc <__udivsi3+0xb4>
   1dff8:	018b      	lsls	r3, r1, #6
   1dffa:	1ac0      	subs	r0, r0, r3
   1dffc:	4152      	adcs	r2, r2
   1dffe:	0943      	lsrs	r3, r0, #5
   1e000:	428b      	cmp	r3, r1
   1e002:	d301      	bcc.n	1e008 <__udivsi3+0xc0>
   1e004:	014b      	lsls	r3, r1, #5
   1e006:	1ac0      	subs	r0, r0, r3
   1e008:	4152      	adcs	r2, r2
   1e00a:	0903      	lsrs	r3, r0, #4
   1e00c:	428b      	cmp	r3, r1
   1e00e:	d301      	bcc.n	1e014 <__udivsi3+0xcc>
   1e010:	010b      	lsls	r3, r1, #4
   1e012:	1ac0      	subs	r0, r0, r3
   1e014:	4152      	adcs	r2, r2
   1e016:	08c3      	lsrs	r3, r0, #3
   1e018:	428b      	cmp	r3, r1
   1e01a:	d301      	bcc.n	1e020 <__udivsi3+0xd8>
   1e01c:	00cb      	lsls	r3, r1, #3
   1e01e:	1ac0      	subs	r0, r0, r3
   1e020:	4152      	adcs	r2, r2
   1e022:	0883      	lsrs	r3, r0, #2
   1e024:	428b      	cmp	r3, r1
   1e026:	d301      	bcc.n	1e02c <__udivsi3+0xe4>
   1e028:	008b      	lsls	r3, r1, #2
   1e02a:	1ac0      	subs	r0, r0, r3
   1e02c:	4152      	adcs	r2, r2
   1e02e:	0843      	lsrs	r3, r0, #1
   1e030:	428b      	cmp	r3, r1
   1e032:	d301      	bcc.n	1e038 <__udivsi3+0xf0>
   1e034:	004b      	lsls	r3, r1, #1
   1e036:	1ac0      	subs	r0, r0, r3
   1e038:	4152      	adcs	r2, r2
   1e03a:	1a41      	subs	r1, r0, r1
   1e03c:	d200      	bcs.n	1e040 <__udivsi3+0xf8>
   1e03e:	4601      	mov	r1, r0
   1e040:	4152      	adcs	r2, r2
   1e042:	4610      	mov	r0, r2
   1e044:	4770      	bx	lr
   1e046:	e7ff      	b.n	1e048 <__udivsi3+0x100>
   1e048:	b501      	push	{r0, lr}
   1e04a:	2000      	movs	r0, #0
   1e04c:	f000 f8f0 	bl	1e230 <__aeabi_idiv0>
   1e050:	bd02      	pop	{r1, pc}
   1e052:	46c0      	nop			; (mov r8, r8)

0001e054 <__aeabi_uidivmod>:
   1e054:	2900      	cmp	r1, #0
   1e056:	d0f7      	beq.n	1e048 <__udivsi3+0x100>
   1e058:	e776      	b.n	1df48 <__udivsi3>
   1e05a:	4770      	bx	lr

0001e05c <__divsi3>:
   1e05c:	4603      	mov	r3, r0
   1e05e:	430b      	orrs	r3, r1
   1e060:	d47f      	bmi.n	1e162 <__divsi3+0x106>
   1e062:	2200      	movs	r2, #0
   1e064:	0843      	lsrs	r3, r0, #1
   1e066:	428b      	cmp	r3, r1
   1e068:	d374      	bcc.n	1e154 <__divsi3+0xf8>
   1e06a:	0903      	lsrs	r3, r0, #4
   1e06c:	428b      	cmp	r3, r1
   1e06e:	d35f      	bcc.n	1e130 <__divsi3+0xd4>
   1e070:	0a03      	lsrs	r3, r0, #8
   1e072:	428b      	cmp	r3, r1
   1e074:	d344      	bcc.n	1e100 <__divsi3+0xa4>
   1e076:	0b03      	lsrs	r3, r0, #12
   1e078:	428b      	cmp	r3, r1
   1e07a:	d328      	bcc.n	1e0ce <__divsi3+0x72>
   1e07c:	0c03      	lsrs	r3, r0, #16
   1e07e:	428b      	cmp	r3, r1
   1e080:	d30d      	bcc.n	1e09e <__divsi3+0x42>
   1e082:	22ff      	movs	r2, #255	; 0xff
   1e084:	0209      	lsls	r1, r1, #8
   1e086:	ba12      	rev	r2, r2
   1e088:	0c03      	lsrs	r3, r0, #16
   1e08a:	428b      	cmp	r3, r1
   1e08c:	d302      	bcc.n	1e094 <__divsi3+0x38>
   1e08e:	1212      	asrs	r2, r2, #8
   1e090:	0209      	lsls	r1, r1, #8
   1e092:	d065      	beq.n	1e160 <__divsi3+0x104>
   1e094:	0b03      	lsrs	r3, r0, #12
   1e096:	428b      	cmp	r3, r1
   1e098:	d319      	bcc.n	1e0ce <__divsi3+0x72>
   1e09a:	e000      	b.n	1e09e <__divsi3+0x42>
   1e09c:	0a09      	lsrs	r1, r1, #8
   1e09e:	0bc3      	lsrs	r3, r0, #15
   1e0a0:	428b      	cmp	r3, r1
   1e0a2:	d301      	bcc.n	1e0a8 <__divsi3+0x4c>
   1e0a4:	03cb      	lsls	r3, r1, #15
   1e0a6:	1ac0      	subs	r0, r0, r3
   1e0a8:	4152      	adcs	r2, r2
   1e0aa:	0b83      	lsrs	r3, r0, #14
   1e0ac:	428b      	cmp	r3, r1
   1e0ae:	d301      	bcc.n	1e0b4 <__divsi3+0x58>
   1e0b0:	038b      	lsls	r3, r1, #14
   1e0b2:	1ac0      	subs	r0, r0, r3
   1e0b4:	4152      	adcs	r2, r2
   1e0b6:	0b43      	lsrs	r3, r0, #13
   1e0b8:	428b      	cmp	r3, r1
   1e0ba:	d301      	bcc.n	1e0c0 <__divsi3+0x64>
   1e0bc:	034b      	lsls	r3, r1, #13
   1e0be:	1ac0      	subs	r0, r0, r3
   1e0c0:	4152      	adcs	r2, r2
   1e0c2:	0b03      	lsrs	r3, r0, #12
   1e0c4:	428b      	cmp	r3, r1
   1e0c6:	d301      	bcc.n	1e0cc <__divsi3+0x70>
   1e0c8:	030b      	lsls	r3, r1, #12
   1e0ca:	1ac0      	subs	r0, r0, r3
   1e0cc:	4152      	adcs	r2, r2
   1e0ce:	0ac3      	lsrs	r3, r0, #11
   1e0d0:	428b      	cmp	r3, r1
   1e0d2:	d301      	bcc.n	1e0d8 <__divsi3+0x7c>
   1e0d4:	02cb      	lsls	r3, r1, #11
   1e0d6:	1ac0      	subs	r0, r0, r3
   1e0d8:	4152      	adcs	r2, r2
   1e0da:	0a83      	lsrs	r3, r0, #10
   1e0dc:	428b      	cmp	r3, r1
   1e0de:	d301      	bcc.n	1e0e4 <__divsi3+0x88>
   1e0e0:	028b      	lsls	r3, r1, #10
   1e0e2:	1ac0      	subs	r0, r0, r3
   1e0e4:	4152      	adcs	r2, r2
   1e0e6:	0a43      	lsrs	r3, r0, #9
   1e0e8:	428b      	cmp	r3, r1
   1e0ea:	d301      	bcc.n	1e0f0 <__divsi3+0x94>
   1e0ec:	024b      	lsls	r3, r1, #9
   1e0ee:	1ac0      	subs	r0, r0, r3
   1e0f0:	4152      	adcs	r2, r2
   1e0f2:	0a03      	lsrs	r3, r0, #8
   1e0f4:	428b      	cmp	r3, r1
   1e0f6:	d301      	bcc.n	1e0fc <__divsi3+0xa0>
   1e0f8:	020b      	lsls	r3, r1, #8
   1e0fa:	1ac0      	subs	r0, r0, r3
   1e0fc:	4152      	adcs	r2, r2
   1e0fe:	d2cd      	bcs.n	1e09c <__divsi3+0x40>
   1e100:	09c3      	lsrs	r3, r0, #7
   1e102:	428b      	cmp	r3, r1
   1e104:	d301      	bcc.n	1e10a <__divsi3+0xae>
   1e106:	01cb      	lsls	r3, r1, #7
   1e108:	1ac0      	subs	r0, r0, r3
   1e10a:	4152      	adcs	r2, r2
   1e10c:	0983      	lsrs	r3, r0, #6
   1e10e:	428b      	cmp	r3, r1
   1e110:	d301      	bcc.n	1e116 <__divsi3+0xba>
   1e112:	018b      	lsls	r3, r1, #6
   1e114:	1ac0      	subs	r0, r0, r3
   1e116:	4152      	adcs	r2, r2
   1e118:	0943      	lsrs	r3, r0, #5
   1e11a:	428b      	cmp	r3, r1
   1e11c:	d301      	bcc.n	1e122 <__divsi3+0xc6>
   1e11e:	014b      	lsls	r3, r1, #5
   1e120:	1ac0      	subs	r0, r0, r3
   1e122:	4152      	adcs	r2, r2
   1e124:	0903      	lsrs	r3, r0, #4
   1e126:	428b      	cmp	r3, r1
   1e128:	d301      	bcc.n	1e12e <__divsi3+0xd2>
   1e12a:	010b      	lsls	r3, r1, #4
   1e12c:	1ac0      	subs	r0, r0, r3
   1e12e:	4152      	adcs	r2, r2
   1e130:	08c3      	lsrs	r3, r0, #3
   1e132:	428b      	cmp	r3, r1
   1e134:	d301      	bcc.n	1e13a <__divsi3+0xde>
   1e136:	00cb      	lsls	r3, r1, #3
   1e138:	1ac0      	subs	r0, r0, r3
   1e13a:	4152      	adcs	r2, r2
   1e13c:	0883      	lsrs	r3, r0, #2
   1e13e:	428b      	cmp	r3, r1
   1e140:	d301      	bcc.n	1e146 <__divsi3+0xea>
   1e142:	008b      	lsls	r3, r1, #2
   1e144:	1ac0      	subs	r0, r0, r3
   1e146:	4152      	adcs	r2, r2
   1e148:	0843      	lsrs	r3, r0, #1
   1e14a:	428b      	cmp	r3, r1
   1e14c:	d301      	bcc.n	1e152 <__divsi3+0xf6>
   1e14e:	004b      	lsls	r3, r1, #1
   1e150:	1ac0      	subs	r0, r0, r3
   1e152:	4152      	adcs	r2, r2
   1e154:	1a41      	subs	r1, r0, r1
   1e156:	d200      	bcs.n	1e15a <__divsi3+0xfe>
   1e158:	4601      	mov	r1, r0
   1e15a:	4152      	adcs	r2, r2
   1e15c:	4610      	mov	r0, r2
   1e15e:	4770      	bx	lr
   1e160:	e05d      	b.n	1e21e <__divsi3+0x1c2>
   1e162:	0fca      	lsrs	r2, r1, #31
   1e164:	d000      	beq.n	1e168 <__divsi3+0x10c>
   1e166:	4249      	negs	r1, r1
   1e168:	1003      	asrs	r3, r0, #32
   1e16a:	d300      	bcc.n	1e16e <__divsi3+0x112>
   1e16c:	4240      	negs	r0, r0
   1e16e:	4053      	eors	r3, r2
   1e170:	2200      	movs	r2, #0
   1e172:	469c      	mov	ip, r3
   1e174:	0903      	lsrs	r3, r0, #4
   1e176:	428b      	cmp	r3, r1
   1e178:	d32d      	bcc.n	1e1d6 <__divsi3+0x17a>
   1e17a:	0a03      	lsrs	r3, r0, #8
   1e17c:	428b      	cmp	r3, r1
   1e17e:	d312      	bcc.n	1e1a6 <__divsi3+0x14a>
   1e180:	22fc      	movs	r2, #252	; 0xfc
   1e182:	0189      	lsls	r1, r1, #6
   1e184:	ba12      	rev	r2, r2
   1e186:	0a03      	lsrs	r3, r0, #8
   1e188:	428b      	cmp	r3, r1
   1e18a:	d30c      	bcc.n	1e1a6 <__divsi3+0x14a>
   1e18c:	0189      	lsls	r1, r1, #6
   1e18e:	1192      	asrs	r2, r2, #6
   1e190:	428b      	cmp	r3, r1
   1e192:	d308      	bcc.n	1e1a6 <__divsi3+0x14a>
   1e194:	0189      	lsls	r1, r1, #6
   1e196:	1192      	asrs	r2, r2, #6
   1e198:	428b      	cmp	r3, r1
   1e19a:	d304      	bcc.n	1e1a6 <__divsi3+0x14a>
   1e19c:	0189      	lsls	r1, r1, #6
   1e19e:	d03a      	beq.n	1e216 <__divsi3+0x1ba>
   1e1a0:	1192      	asrs	r2, r2, #6
   1e1a2:	e000      	b.n	1e1a6 <__divsi3+0x14a>
   1e1a4:	0989      	lsrs	r1, r1, #6
   1e1a6:	09c3      	lsrs	r3, r0, #7
   1e1a8:	428b      	cmp	r3, r1
   1e1aa:	d301      	bcc.n	1e1b0 <__divsi3+0x154>
   1e1ac:	01cb      	lsls	r3, r1, #7
   1e1ae:	1ac0      	subs	r0, r0, r3
   1e1b0:	4152      	adcs	r2, r2
   1e1b2:	0983      	lsrs	r3, r0, #6
   1e1b4:	428b      	cmp	r3, r1
   1e1b6:	d301      	bcc.n	1e1bc <__divsi3+0x160>
   1e1b8:	018b      	lsls	r3, r1, #6
   1e1ba:	1ac0      	subs	r0, r0, r3
   1e1bc:	4152      	adcs	r2, r2
   1e1be:	0943      	lsrs	r3, r0, #5
   1e1c0:	428b      	cmp	r3, r1
   1e1c2:	d301      	bcc.n	1e1c8 <__divsi3+0x16c>
   1e1c4:	014b      	lsls	r3, r1, #5
   1e1c6:	1ac0      	subs	r0, r0, r3
   1e1c8:	4152      	adcs	r2, r2
   1e1ca:	0903      	lsrs	r3, r0, #4
   1e1cc:	428b      	cmp	r3, r1
   1e1ce:	d301      	bcc.n	1e1d4 <__divsi3+0x178>
   1e1d0:	010b      	lsls	r3, r1, #4
   1e1d2:	1ac0      	subs	r0, r0, r3
   1e1d4:	4152      	adcs	r2, r2
   1e1d6:	08c3      	lsrs	r3, r0, #3
   1e1d8:	428b      	cmp	r3, r1
   1e1da:	d301      	bcc.n	1e1e0 <__divsi3+0x184>
   1e1dc:	00cb      	lsls	r3, r1, #3
   1e1de:	1ac0      	subs	r0, r0, r3
   1e1e0:	4152      	adcs	r2, r2
   1e1e2:	0883      	lsrs	r3, r0, #2
   1e1e4:	428b      	cmp	r3, r1
   1e1e6:	d301      	bcc.n	1e1ec <__divsi3+0x190>
   1e1e8:	008b      	lsls	r3, r1, #2
   1e1ea:	1ac0      	subs	r0, r0, r3
   1e1ec:	4152      	adcs	r2, r2
   1e1ee:	d2d9      	bcs.n	1e1a4 <__divsi3+0x148>
   1e1f0:	0843      	lsrs	r3, r0, #1
   1e1f2:	428b      	cmp	r3, r1
   1e1f4:	d301      	bcc.n	1e1fa <__divsi3+0x19e>
   1e1f6:	004b      	lsls	r3, r1, #1
   1e1f8:	1ac0      	subs	r0, r0, r3
   1e1fa:	4152      	adcs	r2, r2
   1e1fc:	1a41      	subs	r1, r0, r1
   1e1fe:	d200      	bcs.n	1e202 <__divsi3+0x1a6>
   1e200:	4601      	mov	r1, r0
   1e202:	4663      	mov	r3, ip
   1e204:	4152      	adcs	r2, r2
   1e206:	105b      	asrs	r3, r3, #1
   1e208:	4610      	mov	r0, r2
   1e20a:	d301      	bcc.n	1e210 <__divsi3+0x1b4>
   1e20c:	4240      	negs	r0, r0
   1e20e:	2b00      	cmp	r3, #0
   1e210:	d500      	bpl.n	1e214 <__divsi3+0x1b8>
   1e212:	4249      	negs	r1, r1
   1e214:	4770      	bx	lr
   1e216:	4663      	mov	r3, ip
   1e218:	105b      	asrs	r3, r3, #1
   1e21a:	d300      	bcc.n	1e21e <__divsi3+0x1c2>
   1e21c:	4240      	negs	r0, r0
   1e21e:	b501      	push	{r0, lr}
   1e220:	2000      	movs	r0, #0
   1e222:	f000 f805 	bl	1e230 <__aeabi_idiv0>
   1e226:	bd02      	pop	{r1, pc}

0001e228 <__aeabi_idivmod>:
   1e228:	2900      	cmp	r1, #0
   1e22a:	d0f8      	beq.n	1e21e <__divsi3+0x1c2>
   1e22c:	e716      	b.n	1e05c <__divsi3>
   1e22e:	4770      	bx	lr

0001e230 <__aeabi_idiv0>:
   1e230:	4770      	bx	lr
   1e232:	46c0      	nop			; (mov r8, r8)

0001e234 <__aeabi_cdrcmple>:
   1e234:	4684      	mov	ip, r0
   1e236:	1c10      	adds	r0, r2, #0
   1e238:	4662      	mov	r2, ip
   1e23a:	468c      	mov	ip, r1
   1e23c:	1c19      	adds	r1, r3, #0
   1e23e:	4663      	mov	r3, ip
   1e240:	e000      	b.n	1e244 <__aeabi_cdcmpeq>
   1e242:	46c0      	nop			; (mov r8, r8)

0001e244 <__aeabi_cdcmpeq>:
   1e244:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1e246:	f001 fee1 	bl	2000c <__ledf2>
   1e24a:	2800      	cmp	r0, #0
   1e24c:	d401      	bmi.n	1e252 <__aeabi_cdcmpeq+0xe>
   1e24e:	2100      	movs	r1, #0
   1e250:	42c8      	cmn	r0, r1
   1e252:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0001e254 <__aeabi_dcmpeq>:
   1e254:	b510      	push	{r4, lr}
   1e256:	f001 fe3b 	bl	1fed0 <__eqdf2>
   1e25a:	4240      	negs	r0, r0
   1e25c:	3001      	adds	r0, #1
   1e25e:	bd10      	pop	{r4, pc}

0001e260 <__aeabi_dcmplt>:
   1e260:	b510      	push	{r4, lr}
   1e262:	f001 fed3 	bl	2000c <__ledf2>
   1e266:	2800      	cmp	r0, #0
   1e268:	db01      	blt.n	1e26e <__aeabi_dcmplt+0xe>
   1e26a:	2000      	movs	r0, #0
   1e26c:	bd10      	pop	{r4, pc}
   1e26e:	2001      	movs	r0, #1
   1e270:	bd10      	pop	{r4, pc}
   1e272:	46c0      	nop			; (mov r8, r8)

0001e274 <__aeabi_dcmple>:
   1e274:	b510      	push	{r4, lr}
   1e276:	f001 fec9 	bl	2000c <__ledf2>
   1e27a:	2800      	cmp	r0, #0
   1e27c:	dd01      	ble.n	1e282 <__aeabi_dcmple+0xe>
   1e27e:	2000      	movs	r0, #0
   1e280:	bd10      	pop	{r4, pc}
   1e282:	2001      	movs	r0, #1
   1e284:	bd10      	pop	{r4, pc}
   1e286:	46c0      	nop			; (mov r8, r8)

0001e288 <__aeabi_dcmpgt>:
   1e288:	b510      	push	{r4, lr}
   1e28a:	f001 fe5b 	bl	1ff44 <__gedf2>
   1e28e:	2800      	cmp	r0, #0
   1e290:	dc01      	bgt.n	1e296 <__aeabi_dcmpgt+0xe>
   1e292:	2000      	movs	r0, #0
   1e294:	bd10      	pop	{r4, pc}
   1e296:	2001      	movs	r0, #1
   1e298:	bd10      	pop	{r4, pc}
   1e29a:	46c0      	nop			; (mov r8, r8)

0001e29c <__aeabi_dcmpge>:
   1e29c:	b510      	push	{r4, lr}
   1e29e:	f001 fe51 	bl	1ff44 <__gedf2>
   1e2a2:	2800      	cmp	r0, #0
   1e2a4:	da01      	bge.n	1e2aa <__aeabi_dcmpge+0xe>
   1e2a6:	2000      	movs	r0, #0
   1e2a8:	bd10      	pop	{r4, pc}
   1e2aa:	2001      	movs	r0, #1
   1e2ac:	bd10      	pop	{r4, pc}
   1e2ae:	46c0      	nop			; (mov r8, r8)

0001e2b0 <__aeabi_cfrcmple>:
   1e2b0:	4684      	mov	ip, r0
   1e2b2:	1c08      	adds	r0, r1, #0
   1e2b4:	4661      	mov	r1, ip
   1e2b6:	e7ff      	b.n	1e2b8 <__aeabi_cfcmpeq>

0001e2b8 <__aeabi_cfcmpeq>:
   1e2b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1e2ba:	f000 fc11 	bl	1eae0 <__lesf2>
   1e2be:	2800      	cmp	r0, #0
   1e2c0:	d401      	bmi.n	1e2c6 <__aeabi_cfcmpeq+0xe>
   1e2c2:	2100      	movs	r1, #0
   1e2c4:	42c8      	cmn	r0, r1
   1e2c6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0001e2c8 <__aeabi_fcmpeq>:
   1e2c8:	b510      	push	{r4, lr}
   1e2ca:	f000 fba3 	bl	1ea14 <__eqsf2>
   1e2ce:	4240      	negs	r0, r0
   1e2d0:	3001      	adds	r0, #1
   1e2d2:	bd10      	pop	{r4, pc}

0001e2d4 <__aeabi_fcmplt>:
   1e2d4:	b510      	push	{r4, lr}
   1e2d6:	f000 fc03 	bl	1eae0 <__lesf2>
   1e2da:	2800      	cmp	r0, #0
   1e2dc:	db01      	blt.n	1e2e2 <__aeabi_fcmplt+0xe>
   1e2de:	2000      	movs	r0, #0
   1e2e0:	bd10      	pop	{r4, pc}
   1e2e2:	2001      	movs	r0, #1
   1e2e4:	bd10      	pop	{r4, pc}
   1e2e6:	46c0      	nop			; (mov r8, r8)

0001e2e8 <__aeabi_fcmple>:
   1e2e8:	b510      	push	{r4, lr}
   1e2ea:	f000 fbf9 	bl	1eae0 <__lesf2>
   1e2ee:	2800      	cmp	r0, #0
   1e2f0:	dd01      	ble.n	1e2f6 <__aeabi_fcmple+0xe>
   1e2f2:	2000      	movs	r0, #0
   1e2f4:	bd10      	pop	{r4, pc}
   1e2f6:	2001      	movs	r0, #1
   1e2f8:	bd10      	pop	{r4, pc}
   1e2fa:	46c0      	nop			; (mov r8, r8)

0001e2fc <__aeabi_fcmpgt>:
   1e2fc:	b510      	push	{r4, lr}
   1e2fe:	f000 fbaf 	bl	1ea60 <__gesf2>
   1e302:	2800      	cmp	r0, #0
   1e304:	dc01      	bgt.n	1e30a <__aeabi_fcmpgt+0xe>
   1e306:	2000      	movs	r0, #0
   1e308:	bd10      	pop	{r4, pc}
   1e30a:	2001      	movs	r0, #1
   1e30c:	bd10      	pop	{r4, pc}
   1e30e:	46c0      	nop			; (mov r8, r8)

0001e310 <__aeabi_fcmpge>:
   1e310:	b510      	push	{r4, lr}
   1e312:	f000 fba5 	bl	1ea60 <__gesf2>
   1e316:	2800      	cmp	r0, #0
   1e318:	da01      	bge.n	1e31e <__aeabi_fcmpge+0xe>
   1e31a:	2000      	movs	r0, #0
   1e31c:	bd10      	pop	{r4, pc}
   1e31e:	2001      	movs	r0, #1
   1e320:	bd10      	pop	{r4, pc}
   1e322:	46c0      	nop			; (mov r8, r8)

0001e324 <__clzsi2>:
   1e324:	211c      	movs	r1, #28
   1e326:	2301      	movs	r3, #1
   1e328:	041b      	lsls	r3, r3, #16
   1e32a:	4298      	cmp	r0, r3
   1e32c:	d301      	bcc.n	1e332 <__clzsi2+0xe>
   1e32e:	0c00      	lsrs	r0, r0, #16
   1e330:	3910      	subs	r1, #16
   1e332:	0a1b      	lsrs	r3, r3, #8
   1e334:	4298      	cmp	r0, r3
   1e336:	d301      	bcc.n	1e33c <__clzsi2+0x18>
   1e338:	0a00      	lsrs	r0, r0, #8
   1e33a:	3908      	subs	r1, #8
   1e33c:	091b      	lsrs	r3, r3, #4
   1e33e:	4298      	cmp	r0, r3
   1e340:	d301      	bcc.n	1e346 <__clzsi2+0x22>
   1e342:	0900      	lsrs	r0, r0, #4
   1e344:	3904      	subs	r1, #4
   1e346:	a202      	add	r2, pc, #8	; (adr r2, 1e350 <__clzsi2+0x2c>)
   1e348:	5c10      	ldrb	r0, [r2, r0]
   1e34a:	1840      	adds	r0, r0, r1
   1e34c:	4770      	bx	lr
   1e34e:	46c0      	nop			; (mov r8, r8)
   1e350:	02020304 	.word	0x02020304
   1e354:	01010101 	.word	0x01010101
	...

0001e360 <__ctzsi2>:
   1e360:	4241      	negs	r1, r0
   1e362:	4008      	ands	r0, r1
   1e364:	211c      	movs	r1, #28
   1e366:	2301      	movs	r3, #1
   1e368:	041b      	lsls	r3, r3, #16
   1e36a:	4298      	cmp	r0, r3
   1e36c:	d301      	bcc.n	1e372 <__ctzsi2+0x12>
   1e36e:	0c00      	lsrs	r0, r0, #16
   1e370:	3910      	subs	r1, #16
   1e372:	0a1b      	lsrs	r3, r3, #8
   1e374:	4298      	cmp	r0, r3
   1e376:	d301      	bcc.n	1e37c <__ctzsi2+0x1c>
   1e378:	0a00      	lsrs	r0, r0, #8
   1e37a:	3908      	subs	r1, #8
   1e37c:	091b      	lsrs	r3, r3, #4
   1e37e:	4298      	cmp	r0, r3
   1e380:	d301      	bcc.n	1e386 <__ctzsi2+0x26>
   1e382:	0900      	lsrs	r0, r0, #4
   1e384:	3904      	subs	r1, #4
   1e386:	a202      	add	r2, pc, #8	; (adr r2, 1e390 <__ctzsi2+0x30>)
   1e388:	5c10      	ldrb	r0, [r2, r0]
   1e38a:	1a40      	subs	r0, r0, r1
   1e38c:	4770      	bx	lr
   1e38e:	46c0      	nop			; (mov r8, r8)
   1e390:	1d1d1c1b 	.word	0x1d1d1c1b
   1e394:	1e1e1e1e 	.word	0x1e1e1e1e
   1e398:	1f1f1f1f 	.word	0x1f1f1f1f
   1e39c:	1f1f1f1f 	.word	0x1f1f1f1f

0001e3a0 <__aeabi_lmul>:
   1e3a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e3a2:	46ce      	mov	lr, r9
   1e3a4:	4647      	mov	r7, r8
   1e3a6:	0415      	lsls	r5, r2, #16
   1e3a8:	0c2d      	lsrs	r5, r5, #16
   1e3aa:	002e      	movs	r6, r5
   1e3ac:	b580      	push	{r7, lr}
   1e3ae:	0407      	lsls	r7, r0, #16
   1e3b0:	0c14      	lsrs	r4, r2, #16
   1e3b2:	0c3f      	lsrs	r7, r7, #16
   1e3b4:	4699      	mov	r9, r3
   1e3b6:	0c03      	lsrs	r3, r0, #16
   1e3b8:	437e      	muls	r6, r7
   1e3ba:	435d      	muls	r5, r3
   1e3bc:	4367      	muls	r7, r4
   1e3be:	4363      	muls	r3, r4
   1e3c0:	197f      	adds	r7, r7, r5
   1e3c2:	0c34      	lsrs	r4, r6, #16
   1e3c4:	19e4      	adds	r4, r4, r7
   1e3c6:	469c      	mov	ip, r3
   1e3c8:	42a5      	cmp	r5, r4
   1e3ca:	d903      	bls.n	1e3d4 <__aeabi_lmul+0x34>
   1e3cc:	2380      	movs	r3, #128	; 0x80
   1e3ce:	025b      	lsls	r3, r3, #9
   1e3d0:	4698      	mov	r8, r3
   1e3d2:	44c4      	add	ip, r8
   1e3d4:	464b      	mov	r3, r9
   1e3d6:	4351      	muls	r1, r2
   1e3d8:	4343      	muls	r3, r0
   1e3da:	0436      	lsls	r6, r6, #16
   1e3dc:	0c36      	lsrs	r6, r6, #16
   1e3de:	0c25      	lsrs	r5, r4, #16
   1e3e0:	0424      	lsls	r4, r4, #16
   1e3e2:	4465      	add	r5, ip
   1e3e4:	19a4      	adds	r4, r4, r6
   1e3e6:	1859      	adds	r1, r3, r1
   1e3e8:	1949      	adds	r1, r1, r5
   1e3ea:	0020      	movs	r0, r4
   1e3ec:	bc0c      	pop	{r2, r3}
   1e3ee:	4690      	mov	r8, r2
   1e3f0:	4699      	mov	r9, r3
   1e3f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001e3f4 <__aeabi_f2uiz>:
   1e3f4:	219e      	movs	r1, #158	; 0x9e
   1e3f6:	b510      	push	{r4, lr}
   1e3f8:	05c9      	lsls	r1, r1, #23
   1e3fa:	1c04      	adds	r4, r0, #0
   1e3fc:	f7ff ff88 	bl	1e310 <__aeabi_fcmpge>
   1e400:	2800      	cmp	r0, #0
   1e402:	d103      	bne.n	1e40c <__aeabi_f2uiz+0x18>
   1e404:	1c20      	adds	r0, r4, #0
   1e406:	f000 fe69 	bl	1f0dc <__aeabi_f2iz>
   1e40a:	bd10      	pop	{r4, pc}
   1e40c:	219e      	movs	r1, #158	; 0x9e
   1e40e:	1c20      	adds	r0, r4, #0
   1e410:	05c9      	lsls	r1, r1, #23
   1e412:	f000 fcc7 	bl	1eda4 <__aeabi_fsub>
   1e416:	f000 fe61 	bl	1f0dc <__aeabi_f2iz>
   1e41a:	2380      	movs	r3, #128	; 0x80
   1e41c:	061b      	lsls	r3, r3, #24
   1e41e:	469c      	mov	ip, r3
   1e420:	4460      	add	r0, ip
   1e422:	e7f2      	b.n	1e40a <__aeabi_f2uiz+0x16>

0001e424 <__aeabi_d2uiz>:
   1e424:	b570      	push	{r4, r5, r6, lr}
   1e426:	2200      	movs	r2, #0
   1e428:	4b0c      	ldr	r3, [pc, #48]	; (1e45c <__aeabi_d2uiz+0x38>)
   1e42a:	0004      	movs	r4, r0
   1e42c:	000d      	movs	r5, r1
   1e42e:	f7ff ff35 	bl	1e29c <__aeabi_dcmpge>
   1e432:	2800      	cmp	r0, #0
   1e434:	d104      	bne.n	1e440 <__aeabi_d2uiz+0x1c>
   1e436:	0020      	movs	r0, r4
   1e438:	0029      	movs	r1, r5
   1e43a:	f002 fbff 	bl	20c3c <__aeabi_d2iz>
   1e43e:	bd70      	pop	{r4, r5, r6, pc}
   1e440:	4b06      	ldr	r3, [pc, #24]	; (1e45c <__aeabi_d2uiz+0x38>)
   1e442:	2200      	movs	r2, #0
   1e444:	0020      	movs	r0, r4
   1e446:	0029      	movs	r1, r5
   1e448:	f002 f8c2 	bl	205d0 <__aeabi_dsub>
   1e44c:	f002 fbf6 	bl	20c3c <__aeabi_d2iz>
   1e450:	2380      	movs	r3, #128	; 0x80
   1e452:	061b      	lsls	r3, r3, #24
   1e454:	469c      	mov	ip, r3
   1e456:	4460      	add	r0, ip
   1e458:	e7f1      	b.n	1e43e <__aeabi_d2uiz+0x1a>
   1e45a:	46c0      	nop			; (mov r8, r8)
   1e45c:	41e00000 	.word	0x41e00000

0001e460 <__aeabi_fadd>:
   1e460:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e462:	46c6      	mov	lr, r8
   1e464:	024e      	lsls	r6, r1, #9
   1e466:	0247      	lsls	r7, r0, #9
   1e468:	0a76      	lsrs	r6, r6, #9
   1e46a:	0a7b      	lsrs	r3, r7, #9
   1e46c:	0044      	lsls	r4, r0, #1
   1e46e:	0fc5      	lsrs	r5, r0, #31
   1e470:	00f7      	lsls	r7, r6, #3
   1e472:	0048      	lsls	r0, r1, #1
   1e474:	4698      	mov	r8, r3
   1e476:	b500      	push	{lr}
   1e478:	0e24      	lsrs	r4, r4, #24
   1e47a:	002a      	movs	r2, r5
   1e47c:	00db      	lsls	r3, r3, #3
   1e47e:	0e00      	lsrs	r0, r0, #24
   1e480:	0fc9      	lsrs	r1, r1, #31
   1e482:	46bc      	mov	ip, r7
   1e484:	428d      	cmp	r5, r1
   1e486:	d067      	beq.n	1e558 <__aeabi_fadd+0xf8>
   1e488:	1a22      	subs	r2, r4, r0
   1e48a:	2a00      	cmp	r2, #0
   1e48c:	dc00      	bgt.n	1e490 <__aeabi_fadd+0x30>
   1e48e:	e0a5      	b.n	1e5dc <__aeabi_fadd+0x17c>
   1e490:	2800      	cmp	r0, #0
   1e492:	d13a      	bne.n	1e50a <__aeabi_fadd+0xaa>
   1e494:	2f00      	cmp	r7, #0
   1e496:	d100      	bne.n	1e49a <__aeabi_fadd+0x3a>
   1e498:	e093      	b.n	1e5c2 <__aeabi_fadd+0x162>
   1e49a:	1e51      	subs	r1, r2, #1
   1e49c:	2900      	cmp	r1, #0
   1e49e:	d000      	beq.n	1e4a2 <__aeabi_fadd+0x42>
   1e4a0:	e0bc      	b.n	1e61c <__aeabi_fadd+0x1bc>
   1e4a2:	2401      	movs	r4, #1
   1e4a4:	1bdb      	subs	r3, r3, r7
   1e4a6:	015a      	lsls	r2, r3, #5
   1e4a8:	d546      	bpl.n	1e538 <__aeabi_fadd+0xd8>
   1e4aa:	019b      	lsls	r3, r3, #6
   1e4ac:	099e      	lsrs	r6, r3, #6
   1e4ae:	0030      	movs	r0, r6
   1e4b0:	f7ff ff38 	bl	1e324 <__clzsi2>
   1e4b4:	3805      	subs	r0, #5
   1e4b6:	4086      	lsls	r6, r0
   1e4b8:	4284      	cmp	r4, r0
   1e4ba:	dd00      	ble.n	1e4be <__aeabi_fadd+0x5e>
   1e4bc:	e09d      	b.n	1e5fa <__aeabi_fadd+0x19a>
   1e4be:	1b04      	subs	r4, r0, r4
   1e4c0:	0032      	movs	r2, r6
   1e4c2:	2020      	movs	r0, #32
   1e4c4:	3401      	adds	r4, #1
   1e4c6:	40e2      	lsrs	r2, r4
   1e4c8:	1b04      	subs	r4, r0, r4
   1e4ca:	40a6      	lsls	r6, r4
   1e4cc:	0033      	movs	r3, r6
   1e4ce:	1e5e      	subs	r6, r3, #1
   1e4d0:	41b3      	sbcs	r3, r6
   1e4d2:	2400      	movs	r4, #0
   1e4d4:	4313      	orrs	r3, r2
   1e4d6:	075a      	lsls	r2, r3, #29
   1e4d8:	d004      	beq.n	1e4e4 <__aeabi_fadd+0x84>
   1e4da:	220f      	movs	r2, #15
   1e4dc:	401a      	ands	r2, r3
   1e4de:	2a04      	cmp	r2, #4
   1e4e0:	d000      	beq.n	1e4e4 <__aeabi_fadd+0x84>
   1e4e2:	3304      	adds	r3, #4
   1e4e4:	015a      	lsls	r2, r3, #5
   1e4e6:	d529      	bpl.n	1e53c <__aeabi_fadd+0xdc>
   1e4e8:	3401      	adds	r4, #1
   1e4ea:	2cff      	cmp	r4, #255	; 0xff
   1e4ec:	d100      	bne.n	1e4f0 <__aeabi_fadd+0x90>
   1e4ee:	e081      	b.n	1e5f4 <__aeabi_fadd+0x194>
   1e4f0:	002a      	movs	r2, r5
   1e4f2:	019b      	lsls	r3, r3, #6
   1e4f4:	0a5b      	lsrs	r3, r3, #9
   1e4f6:	b2e4      	uxtb	r4, r4
   1e4f8:	025b      	lsls	r3, r3, #9
   1e4fa:	05e4      	lsls	r4, r4, #23
   1e4fc:	0a58      	lsrs	r0, r3, #9
   1e4fe:	07d2      	lsls	r2, r2, #31
   1e500:	4320      	orrs	r0, r4
   1e502:	4310      	orrs	r0, r2
   1e504:	bc04      	pop	{r2}
   1e506:	4690      	mov	r8, r2
   1e508:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e50a:	2cff      	cmp	r4, #255	; 0xff
   1e50c:	d0e3      	beq.n	1e4d6 <__aeabi_fadd+0x76>
   1e50e:	2180      	movs	r1, #128	; 0x80
   1e510:	0038      	movs	r0, r7
   1e512:	04c9      	lsls	r1, r1, #19
   1e514:	4308      	orrs	r0, r1
   1e516:	4684      	mov	ip, r0
   1e518:	2a1b      	cmp	r2, #27
   1e51a:	dd00      	ble.n	1e51e <__aeabi_fadd+0xbe>
   1e51c:	e082      	b.n	1e624 <__aeabi_fadd+0x1c4>
   1e51e:	2020      	movs	r0, #32
   1e520:	4661      	mov	r1, ip
   1e522:	40d1      	lsrs	r1, r2
   1e524:	1a82      	subs	r2, r0, r2
   1e526:	4660      	mov	r0, ip
   1e528:	4090      	lsls	r0, r2
   1e52a:	0002      	movs	r2, r0
   1e52c:	1e50      	subs	r0, r2, #1
   1e52e:	4182      	sbcs	r2, r0
   1e530:	430a      	orrs	r2, r1
   1e532:	1a9b      	subs	r3, r3, r2
   1e534:	015a      	lsls	r2, r3, #5
   1e536:	d4b8      	bmi.n	1e4aa <__aeabi_fadd+0x4a>
   1e538:	075a      	lsls	r2, r3, #29
   1e53a:	d1ce      	bne.n	1e4da <__aeabi_fadd+0x7a>
   1e53c:	08de      	lsrs	r6, r3, #3
   1e53e:	002a      	movs	r2, r5
   1e540:	2cff      	cmp	r4, #255	; 0xff
   1e542:	d13a      	bne.n	1e5ba <__aeabi_fadd+0x15a>
   1e544:	2e00      	cmp	r6, #0
   1e546:	d100      	bne.n	1e54a <__aeabi_fadd+0xea>
   1e548:	e0ae      	b.n	1e6a8 <__aeabi_fadd+0x248>
   1e54a:	2380      	movs	r3, #128	; 0x80
   1e54c:	03db      	lsls	r3, r3, #15
   1e54e:	4333      	orrs	r3, r6
   1e550:	025b      	lsls	r3, r3, #9
   1e552:	0a5b      	lsrs	r3, r3, #9
   1e554:	24ff      	movs	r4, #255	; 0xff
   1e556:	e7cf      	b.n	1e4f8 <__aeabi_fadd+0x98>
   1e558:	1a21      	subs	r1, r4, r0
   1e55a:	2900      	cmp	r1, #0
   1e55c:	dd52      	ble.n	1e604 <__aeabi_fadd+0x1a4>
   1e55e:	2800      	cmp	r0, #0
   1e560:	d031      	beq.n	1e5c6 <__aeabi_fadd+0x166>
   1e562:	2cff      	cmp	r4, #255	; 0xff
   1e564:	d0b7      	beq.n	1e4d6 <__aeabi_fadd+0x76>
   1e566:	2080      	movs	r0, #128	; 0x80
   1e568:	003e      	movs	r6, r7
   1e56a:	04c0      	lsls	r0, r0, #19
   1e56c:	4306      	orrs	r6, r0
   1e56e:	46b4      	mov	ip, r6
   1e570:	291b      	cmp	r1, #27
   1e572:	dd00      	ble.n	1e576 <__aeabi_fadd+0x116>
   1e574:	e0aa      	b.n	1e6cc <__aeabi_fadd+0x26c>
   1e576:	2620      	movs	r6, #32
   1e578:	4660      	mov	r0, ip
   1e57a:	40c8      	lsrs	r0, r1
   1e57c:	1a71      	subs	r1, r6, r1
   1e57e:	4666      	mov	r6, ip
   1e580:	408e      	lsls	r6, r1
   1e582:	0031      	movs	r1, r6
   1e584:	1e4e      	subs	r6, r1, #1
   1e586:	41b1      	sbcs	r1, r6
   1e588:	4301      	orrs	r1, r0
   1e58a:	185b      	adds	r3, r3, r1
   1e58c:	0159      	lsls	r1, r3, #5
   1e58e:	d5d3      	bpl.n	1e538 <__aeabi_fadd+0xd8>
   1e590:	3401      	adds	r4, #1
   1e592:	2cff      	cmp	r4, #255	; 0xff
   1e594:	d100      	bne.n	1e598 <__aeabi_fadd+0x138>
   1e596:	e087      	b.n	1e6a8 <__aeabi_fadd+0x248>
   1e598:	2201      	movs	r2, #1
   1e59a:	4978      	ldr	r1, [pc, #480]	; (1e77c <__aeabi_fadd+0x31c>)
   1e59c:	401a      	ands	r2, r3
   1e59e:	085b      	lsrs	r3, r3, #1
   1e5a0:	400b      	ands	r3, r1
   1e5a2:	4313      	orrs	r3, r2
   1e5a4:	e797      	b.n	1e4d6 <__aeabi_fadd+0x76>
   1e5a6:	2c00      	cmp	r4, #0
   1e5a8:	d000      	beq.n	1e5ac <__aeabi_fadd+0x14c>
   1e5aa:	e0a7      	b.n	1e6fc <__aeabi_fadd+0x29c>
   1e5ac:	2b00      	cmp	r3, #0
   1e5ae:	d000      	beq.n	1e5b2 <__aeabi_fadd+0x152>
   1e5b0:	e0b6      	b.n	1e720 <__aeabi_fadd+0x2c0>
   1e5b2:	1e3b      	subs	r3, r7, #0
   1e5b4:	d162      	bne.n	1e67c <__aeabi_fadd+0x21c>
   1e5b6:	2600      	movs	r6, #0
   1e5b8:	2200      	movs	r2, #0
   1e5ba:	0273      	lsls	r3, r6, #9
   1e5bc:	0a5b      	lsrs	r3, r3, #9
   1e5be:	b2e4      	uxtb	r4, r4
   1e5c0:	e79a      	b.n	1e4f8 <__aeabi_fadd+0x98>
   1e5c2:	0014      	movs	r4, r2
   1e5c4:	e787      	b.n	1e4d6 <__aeabi_fadd+0x76>
   1e5c6:	2f00      	cmp	r7, #0
   1e5c8:	d04d      	beq.n	1e666 <__aeabi_fadd+0x206>
   1e5ca:	1e48      	subs	r0, r1, #1
   1e5cc:	2800      	cmp	r0, #0
   1e5ce:	d157      	bne.n	1e680 <__aeabi_fadd+0x220>
   1e5d0:	4463      	add	r3, ip
   1e5d2:	2401      	movs	r4, #1
   1e5d4:	015a      	lsls	r2, r3, #5
   1e5d6:	d5af      	bpl.n	1e538 <__aeabi_fadd+0xd8>
   1e5d8:	2402      	movs	r4, #2
   1e5da:	e7dd      	b.n	1e598 <__aeabi_fadd+0x138>
   1e5dc:	2a00      	cmp	r2, #0
   1e5de:	d124      	bne.n	1e62a <__aeabi_fadd+0x1ca>
   1e5e0:	1c62      	adds	r2, r4, #1
   1e5e2:	b2d2      	uxtb	r2, r2
   1e5e4:	2a01      	cmp	r2, #1
   1e5e6:	ddde      	ble.n	1e5a6 <__aeabi_fadd+0x146>
   1e5e8:	1bde      	subs	r6, r3, r7
   1e5ea:	0172      	lsls	r2, r6, #5
   1e5ec:	d535      	bpl.n	1e65a <__aeabi_fadd+0x1fa>
   1e5ee:	1afe      	subs	r6, r7, r3
   1e5f0:	000d      	movs	r5, r1
   1e5f2:	e75c      	b.n	1e4ae <__aeabi_fadd+0x4e>
   1e5f4:	002a      	movs	r2, r5
   1e5f6:	2300      	movs	r3, #0
   1e5f8:	e77e      	b.n	1e4f8 <__aeabi_fadd+0x98>
   1e5fa:	0033      	movs	r3, r6
   1e5fc:	4a60      	ldr	r2, [pc, #384]	; (1e780 <__aeabi_fadd+0x320>)
   1e5fe:	1a24      	subs	r4, r4, r0
   1e600:	4013      	ands	r3, r2
   1e602:	e768      	b.n	1e4d6 <__aeabi_fadd+0x76>
   1e604:	2900      	cmp	r1, #0
   1e606:	d163      	bne.n	1e6d0 <__aeabi_fadd+0x270>
   1e608:	1c61      	adds	r1, r4, #1
   1e60a:	b2c8      	uxtb	r0, r1
   1e60c:	2801      	cmp	r0, #1
   1e60e:	dd4e      	ble.n	1e6ae <__aeabi_fadd+0x24e>
   1e610:	29ff      	cmp	r1, #255	; 0xff
   1e612:	d049      	beq.n	1e6a8 <__aeabi_fadd+0x248>
   1e614:	4463      	add	r3, ip
   1e616:	085b      	lsrs	r3, r3, #1
   1e618:	000c      	movs	r4, r1
   1e61a:	e75c      	b.n	1e4d6 <__aeabi_fadd+0x76>
   1e61c:	2aff      	cmp	r2, #255	; 0xff
   1e61e:	d041      	beq.n	1e6a4 <__aeabi_fadd+0x244>
   1e620:	000a      	movs	r2, r1
   1e622:	e779      	b.n	1e518 <__aeabi_fadd+0xb8>
   1e624:	2201      	movs	r2, #1
   1e626:	1a9b      	subs	r3, r3, r2
   1e628:	e784      	b.n	1e534 <__aeabi_fadd+0xd4>
   1e62a:	2c00      	cmp	r4, #0
   1e62c:	d01d      	beq.n	1e66a <__aeabi_fadd+0x20a>
   1e62e:	28ff      	cmp	r0, #255	; 0xff
   1e630:	d022      	beq.n	1e678 <__aeabi_fadd+0x218>
   1e632:	2480      	movs	r4, #128	; 0x80
   1e634:	04e4      	lsls	r4, r4, #19
   1e636:	4252      	negs	r2, r2
   1e638:	4323      	orrs	r3, r4
   1e63a:	2a1b      	cmp	r2, #27
   1e63c:	dd00      	ble.n	1e640 <__aeabi_fadd+0x1e0>
   1e63e:	e08a      	b.n	1e756 <__aeabi_fadd+0x2f6>
   1e640:	001c      	movs	r4, r3
   1e642:	2520      	movs	r5, #32
   1e644:	40d4      	lsrs	r4, r2
   1e646:	1aaa      	subs	r2, r5, r2
   1e648:	4093      	lsls	r3, r2
   1e64a:	1e5a      	subs	r2, r3, #1
   1e64c:	4193      	sbcs	r3, r2
   1e64e:	4323      	orrs	r3, r4
   1e650:	4662      	mov	r2, ip
   1e652:	0004      	movs	r4, r0
   1e654:	1ad3      	subs	r3, r2, r3
   1e656:	000d      	movs	r5, r1
   1e658:	e725      	b.n	1e4a6 <__aeabi_fadd+0x46>
   1e65a:	2e00      	cmp	r6, #0
   1e65c:	d000      	beq.n	1e660 <__aeabi_fadd+0x200>
   1e65e:	e726      	b.n	1e4ae <__aeabi_fadd+0x4e>
   1e660:	2200      	movs	r2, #0
   1e662:	2400      	movs	r4, #0
   1e664:	e7a9      	b.n	1e5ba <__aeabi_fadd+0x15a>
   1e666:	000c      	movs	r4, r1
   1e668:	e735      	b.n	1e4d6 <__aeabi_fadd+0x76>
   1e66a:	2b00      	cmp	r3, #0
   1e66c:	d04d      	beq.n	1e70a <__aeabi_fadd+0x2aa>
   1e66e:	43d2      	mvns	r2, r2
   1e670:	2a00      	cmp	r2, #0
   1e672:	d0ed      	beq.n	1e650 <__aeabi_fadd+0x1f0>
   1e674:	28ff      	cmp	r0, #255	; 0xff
   1e676:	d1e0      	bne.n	1e63a <__aeabi_fadd+0x1da>
   1e678:	4663      	mov	r3, ip
   1e67a:	24ff      	movs	r4, #255	; 0xff
   1e67c:	000d      	movs	r5, r1
   1e67e:	e72a      	b.n	1e4d6 <__aeabi_fadd+0x76>
   1e680:	29ff      	cmp	r1, #255	; 0xff
   1e682:	d00f      	beq.n	1e6a4 <__aeabi_fadd+0x244>
   1e684:	0001      	movs	r1, r0
   1e686:	e773      	b.n	1e570 <__aeabi_fadd+0x110>
   1e688:	2b00      	cmp	r3, #0
   1e68a:	d061      	beq.n	1e750 <__aeabi_fadd+0x2f0>
   1e68c:	24ff      	movs	r4, #255	; 0xff
   1e68e:	2f00      	cmp	r7, #0
   1e690:	d100      	bne.n	1e694 <__aeabi_fadd+0x234>
   1e692:	e720      	b.n	1e4d6 <__aeabi_fadd+0x76>
   1e694:	2280      	movs	r2, #128	; 0x80
   1e696:	4641      	mov	r1, r8
   1e698:	03d2      	lsls	r2, r2, #15
   1e69a:	4211      	tst	r1, r2
   1e69c:	d002      	beq.n	1e6a4 <__aeabi_fadd+0x244>
   1e69e:	4216      	tst	r6, r2
   1e6a0:	d100      	bne.n	1e6a4 <__aeabi_fadd+0x244>
   1e6a2:	003b      	movs	r3, r7
   1e6a4:	24ff      	movs	r4, #255	; 0xff
   1e6a6:	e716      	b.n	1e4d6 <__aeabi_fadd+0x76>
   1e6a8:	24ff      	movs	r4, #255	; 0xff
   1e6aa:	2300      	movs	r3, #0
   1e6ac:	e724      	b.n	1e4f8 <__aeabi_fadd+0x98>
   1e6ae:	2c00      	cmp	r4, #0
   1e6b0:	d1ea      	bne.n	1e688 <__aeabi_fadd+0x228>
   1e6b2:	2b00      	cmp	r3, #0
   1e6b4:	d058      	beq.n	1e768 <__aeabi_fadd+0x308>
   1e6b6:	2f00      	cmp	r7, #0
   1e6b8:	d100      	bne.n	1e6bc <__aeabi_fadd+0x25c>
   1e6ba:	e70c      	b.n	1e4d6 <__aeabi_fadd+0x76>
   1e6bc:	4463      	add	r3, ip
   1e6be:	015a      	lsls	r2, r3, #5
   1e6c0:	d400      	bmi.n	1e6c4 <__aeabi_fadd+0x264>
   1e6c2:	e739      	b.n	1e538 <__aeabi_fadd+0xd8>
   1e6c4:	4a2e      	ldr	r2, [pc, #184]	; (1e780 <__aeabi_fadd+0x320>)
   1e6c6:	000c      	movs	r4, r1
   1e6c8:	4013      	ands	r3, r2
   1e6ca:	e704      	b.n	1e4d6 <__aeabi_fadd+0x76>
   1e6cc:	2101      	movs	r1, #1
   1e6ce:	e75c      	b.n	1e58a <__aeabi_fadd+0x12a>
   1e6d0:	2c00      	cmp	r4, #0
   1e6d2:	d11e      	bne.n	1e712 <__aeabi_fadd+0x2b2>
   1e6d4:	2b00      	cmp	r3, #0
   1e6d6:	d040      	beq.n	1e75a <__aeabi_fadd+0x2fa>
   1e6d8:	43c9      	mvns	r1, r1
   1e6da:	2900      	cmp	r1, #0
   1e6dc:	d00b      	beq.n	1e6f6 <__aeabi_fadd+0x296>
   1e6de:	28ff      	cmp	r0, #255	; 0xff
   1e6e0:	d036      	beq.n	1e750 <__aeabi_fadd+0x2f0>
   1e6e2:	291b      	cmp	r1, #27
   1e6e4:	dc47      	bgt.n	1e776 <__aeabi_fadd+0x316>
   1e6e6:	001c      	movs	r4, r3
   1e6e8:	2620      	movs	r6, #32
   1e6ea:	40cc      	lsrs	r4, r1
   1e6ec:	1a71      	subs	r1, r6, r1
   1e6ee:	408b      	lsls	r3, r1
   1e6f0:	1e59      	subs	r1, r3, #1
   1e6f2:	418b      	sbcs	r3, r1
   1e6f4:	4323      	orrs	r3, r4
   1e6f6:	4463      	add	r3, ip
   1e6f8:	0004      	movs	r4, r0
   1e6fa:	e747      	b.n	1e58c <__aeabi_fadd+0x12c>
   1e6fc:	2b00      	cmp	r3, #0
   1e6fe:	d118      	bne.n	1e732 <__aeabi_fadd+0x2d2>
   1e700:	1e3b      	subs	r3, r7, #0
   1e702:	d02d      	beq.n	1e760 <__aeabi_fadd+0x300>
   1e704:	000d      	movs	r5, r1
   1e706:	24ff      	movs	r4, #255	; 0xff
   1e708:	e6e5      	b.n	1e4d6 <__aeabi_fadd+0x76>
   1e70a:	003b      	movs	r3, r7
   1e70c:	0004      	movs	r4, r0
   1e70e:	000d      	movs	r5, r1
   1e710:	e6e1      	b.n	1e4d6 <__aeabi_fadd+0x76>
   1e712:	28ff      	cmp	r0, #255	; 0xff
   1e714:	d01c      	beq.n	1e750 <__aeabi_fadd+0x2f0>
   1e716:	2480      	movs	r4, #128	; 0x80
   1e718:	04e4      	lsls	r4, r4, #19
   1e71a:	4249      	negs	r1, r1
   1e71c:	4323      	orrs	r3, r4
   1e71e:	e7e0      	b.n	1e6e2 <__aeabi_fadd+0x282>
   1e720:	2f00      	cmp	r7, #0
   1e722:	d100      	bne.n	1e726 <__aeabi_fadd+0x2c6>
   1e724:	e6d7      	b.n	1e4d6 <__aeabi_fadd+0x76>
   1e726:	1bde      	subs	r6, r3, r7
   1e728:	0172      	lsls	r2, r6, #5
   1e72a:	d51f      	bpl.n	1e76c <__aeabi_fadd+0x30c>
   1e72c:	1afb      	subs	r3, r7, r3
   1e72e:	000d      	movs	r5, r1
   1e730:	e6d1      	b.n	1e4d6 <__aeabi_fadd+0x76>
   1e732:	24ff      	movs	r4, #255	; 0xff
   1e734:	2f00      	cmp	r7, #0
   1e736:	d100      	bne.n	1e73a <__aeabi_fadd+0x2da>
   1e738:	e6cd      	b.n	1e4d6 <__aeabi_fadd+0x76>
   1e73a:	2280      	movs	r2, #128	; 0x80
   1e73c:	4640      	mov	r0, r8
   1e73e:	03d2      	lsls	r2, r2, #15
   1e740:	4210      	tst	r0, r2
   1e742:	d0af      	beq.n	1e6a4 <__aeabi_fadd+0x244>
   1e744:	4216      	tst	r6, r2
   1e746:	d1ad      	bne.n	1e6a4 <__aeabi_fadd+0x244>
   1e748:	003b      	movs	r3, r7
   1e74a:	000d      	movs	r5, r1
   1e74c:	24ff      	movs	r4, #255	; 0xff
   1e74e:	e6c2      	b.n	1e4d6 <__aeabi_fadd+0x76>
   1e750:	4663      	mov	r3, ip
   1e752:	24ff      	movs	r4, #255	; 0xff
   1e754:	e6bf      	b.n	1e4d6 <__aeabi_fadd+0x76>
   1e756:	2301      	movs	r3, #1
   1e758:	e77a      	b.n	1e650 <__aeabi_fadd+0x1f0>
   1e75a:	003b      	movs	r3, r7
   1e75c:	0004      	movs	r4, r0
   1e75e:	e6ba      	b.n	1e4d6 <__aeabi_fadd+0x76>
   1e760:	2680      	movs	r6, #128	; 0x80
   1e762:	2200      	movs	r2, #0
   1e764:	03f6      	lsls	r6, r6, #15
   1e766:	e6f0      	b.n	1e54a <__aeabi_fadd+0xea>
   1e768:	003b      	movs	r3, r7
   1e76a:	e6b4      	b.n	1e4d6 <__aeabi_fadd+0x76>
   1e76c:	1e33      	subs	r3, r6, #0
   1e76e:	d000      	beq.n	1e772 <__aeabi_fadd+0x312>
   1e770:	e6e2      	b.n	1e538 <__aeabi_fadd+0xd8>
   1e772:	2200      	movs	r2, #0
   1e774:	e721      	b.n	1e5ba <__aeabi_fadd+0x15a>
   1e776:	2301      	movs	r3, #1
   1e778:	e7bd      	b.n	1e6f6 <__aeabi_fadd+0x296>
   1e77a:	46c0      	nop			; (mov r8, r8)
   1e77c:	7dffffff 	.word	0x7dffffff
   1e780:	fbffffff 	.word	0xfbffffff

0001e784 <__aeabi_fdiv>:
   1e784:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e786:	4657      	mov	r7, sl
   1e788:	464e      	mov	r6, r9
   1e78a:	46de      	mov	lr, fp
   1e78c:	4645      	mov	r5, r8
   1e78e:	b5e0      	push	{r5, r6, r7, lr}
   1e790:	0244      	lsls	r4, r0, #9
   1e792:	0043      	lsls	r3, r0, #1
   1e794:	0fc6      	lsrs	r6, r0, #31
   1e796:	b083      	sub	sp, #12
   1e798:	1c0f      	adds	r7, r1, #0
   1e79a:	0a64      	lsrs	r4, r4, #9
   1e79c:	0e1b      	lsrs	r3, r3, #24
   1e79e:	46b2      	mov	sl, r6
   1e7a0:	d053      	beq.n	1e84a <__aeabi_fdiv+0xc6>
   1e7a2:	2bff      	cmp	r3, #255	; 0xff
   1e7a4:	d027      	beq.n	1e7f6 <__aeabi_fdiv+0x72>
   1e7a6:	2280      	movs	r2, #128	; 0x80
   1e7a8:	00e4      	lsls	r4, r4, #3
   1e7aa:	04d2      	lsls	r2, r2, #19
   1e7ac:	4314      	orrs	r4, r2
   1e7ae:	227f      	movs	r2, #127	; 0x7f
   1e7b0:	4252      	negs	r2, r2
   1e7b2:	4690      	mov	r8, r2
   1e7b4:	4498      	add	r8, r3
   1e7b6:	2300      	movs	r3, #0
   1e7b8:	4699      	mov	r9, r3
   1e7ba:	469b      	mov	fp, r3
   1e7bc:	027d      	lsls	r5, r7, #9
   1e7be:	0078      	lsls	r0, r7, #1
   1e7c0:	0ffb      	lsrs	r3, r7, #31
   1e7c2:	0a6d      	lsrs	r5, r5, #9
   1e7c4:	0e00      	lsrs	r0, r0, #24
   1e7c6:	9300      	str	r3, [sp, #0]
   1e7c8:	d024      	beq.n	1e814 <__aeabi_fdiv+0x90>
   1e7ca:	28ff      	cmp	r0, #255	; 0xff
   1e7cc:	d046      	beq.n	1e85c <__aeabi_fdiv+0xd8>
   1e7ce:	2380      	movs	r3, #128	; 0x80
   1e7d0:	2100      	movs	r1, #0
   1e7d2:	00ed      	lsls	r5, r5, #3
   1e7d4:	04db      	lsls	r3, r3, #19
   1e7d6:	431d      	orrs	r5, r3
   1e7d8:	387f      	subs	r0, #127	; 0x7f
   1e7da:	4647      	mov	r7, r8
   1e7dc:	1a38      	subs	r0, r7, r0
   1e7de:	464f      	mov	r7, r9
   1e7e0:	430f      	orrs	r7, r1
   1e7e2:	00bf      	lsls	r7, r7, #2
   1e7e4:	46b9      	mov	r9, r7
   1e7e6:	0033      	movs	r3, r6
   1e7e8:	9a00      	ldr	r2, [sp, #0]
   1e7ea:	4f87      	ldr	r7, [pc, #540]	; (1ea08 <__aeabi_fdiv+0x284>)
   1e7ec:	4053      	eors	r3, r2
   1e7ee:	464a      	mov	r2, r9
   1e7f0:	58ba      	ldr	r2, [r7, r2]
   1e7f2:	9301      	str	r3, [sp, #4]
   1e7f4:	4697      	mov	pc, r2
   1e7f6:	2c00      	cmp	r4, #0
   1e7f8:	d14e      	bne.n	1e898 <__aeabi_fdiv+0x114>
   1e7fa:	2308      	movs	r3, #8
   1e7fc:	4699      	mov	r9, r3
   1e7fe:	33f7      	adds	r3, #247	; 0xf7
   1e800:	4698      	mov	r8, r3
   1e802:	3bfd      	subs	r3, #253	; 0xfd
   1e804:	469b      	mov	fp, r3
   1e806:	027d      	lsls	r5, r7, #9
   1e808:	0078      	lsls	r0, r7, #1
   1e80a:	0ffb      	lsrs	r3, r7, #31
   1e80c:	0a6d      	lsrs	r5, r5, #9
   1e80e:	0e00      	lsrs	r0, r0, #24
   1e810:	9300      	str	r3, [sp, #0]
   1e812:	d1da      	bne.n	1e7ca <__aeabi_fdiv+0x46>
   1e814:	2d00      	cmp	r5, #0
   1e816:	d126      	bne.n	1e866 <__aeabi_fdiv+0xe2>
   1e818:	2000      	movs	r0, #0
   1e81a:	2101      	movs	r1, #1
   1e81c:	0033      	movs	r3, r6
   1e81e:	9a00      	ldr	r2, [sp, #0]
   1e820:	4f7a      	ldr	r7, [pc, #488]	; (1ea0c <__aeabi_fdiv+0x288>)
   1e822:	4053      	eors	r3, r2
   1e824:	4642      	mov	r2, r8
   1e826:	1a10      	subs	r0, r2, r0
   1e828:	464a      	mov	r2, r9
   1e82a:	430a      	orrs	r2, r1
   1e82c:	0092      	lsls	r2, r2, #2
   1e82e:	58ba      	ldr	r2, [r7, r2]
   1e830:	001d      	movs	r5, r3
   1e832:	4697      	mov	pc, r2
   1e834:	9b00      	ldr	r3, [sp, #0]
   1e836:	002c      	movs	r4, r5
   1e838:	469a      	mov	sl, r3
   1e83a:	468b      	mov	fp, r1
   1e83c:	465b      	mov	r3, fp
   1e83e:	2b02      	cmp	r3, #2
   1e840:	d131      	bne.n	1e8a6 <__aeabi_fdiv+0x122>
   1e842:	4653      	mov	r3, sl
   1e844:	21ff      	movs	r1, #255	; 0xff
   1e846:	2400      	movs	r4, #0
   1e848:	e038      	b.n	1e8bc <__aeabi_fdiv+0x138>
   1e84a:	2c00      	cmp	r4, #0
   1e84c:	d117      	bne.n	1e87e <__aeabi_fdiv+0xfa>
   1e84e:	2304      	movs	r3, #4
   1e850:	4699      	mov	r9, r3
   1e852:	2300      	movs	r3, #0
   1e854:	4698      	mov	r8, r3
   1e856:	3301      	adds	r3, #1
   1e858:	469b      	mov	fp, r3
   1e85a:	e7af      	b.n	1e7bc <__aeabi_fdiv+0x38>
   1e85c:	20ff      	movs	r0, #255	; 0xff
   1e85e:	2d00      	cmp	r5, #0
   1e860:	d10b      	bne.n	1e87a <__aeabi_fdiv+0xf6>
   1e862:	2102      	movs	r1, #2
   1e864:	e7da      	b.n	1e81c <__aeabi_fdiv+0x98>
   1e866:	0028      	movs	r0, r5
   1e868:	f7ff fd5c 	bl	1e324 <__clzsi2>
   1e86c:	1f43      	subs	r3, r0, #5
   1e86e:	409d      	lsls	r5, r3
   1e870:	2376      	movs	r3, #118	; 0x76
   1e872:	425b      	negs	r3, r3
   1e874:	1a18      	subs	r0, r3, r0
   1e876:	2100      	movs	r1, #0
   1e878:	e7af      	b.n	1e7da <__aeabi_fdiv+0x56>
   1e87a:	2103      	movs	r1, #3
   1e87c:	e7ad      	b.n	1e7da <__aeabi_fdiv+0x56>
   1e87e:	0020      	movs	r0, r4
   1e880:	f7ff fd50 	bl	1e324 <__clzsi2>
   1e884:	1f43      	subs	r3, r0, #5
   1e886:	409c      	lsls	r4, r3
   1e888:	2376      	movs	r3, #118	; 0x76
   1e88a:	425b      	negs	r3, r3
   1e88c:	1a1b      	subs	r3, r3, r0
   1e88e:	4698      	mov	r8, r3
   1e890:	2300      	movs	r3, #0
   1e892:	4699      	mov	r9, r3
   1e894:	469b      	mov	fp, r3
   1e896:	e791      	b.n	1e7bc <__aeabi_fdiv+0x38>
   1e898:	230c      	movs	r3, #12
   1e89a:	4699      	mov	r9, r3
   1e89c:	33f3      	adds	r3, #243	; 0xf3
   1e89e:	4698      	mov	r8, r3
   1e8a0:	3bfc      	subs	r3, #252	; 0xfc
   1e8a2:	469b      	mov	fp, r3
   1e8a4:	e78a      	b.n	1e7bc <__aeabi_fdiv+0x38>
   1e8a6:	2b03      	cmp	r3, #3
   1e8a8:	d100      	bne.n	1e8ac <__aeabi_fdiv+0x128>
   1e8aa:	e0a5      	b.n	1e9f8 <__aeabi_fdiv+0x274>
   1e8ac:	4655      	mov	r5, sl
   1e8ae:	2b01      	cmp	r3, #1
   1e8b0:	d000      	beq.n	1e8b4 <__aeabi_fdiv+0x130>
   1e8b2:	e081      	b.n	1e9b8 <__aeabi_fdiv+0x234>
   1e8b4:	2301      	movs	r3, #1
   1e8b6:	2100      	movs	r1, #0
   1e8b8:	2400      	movs	r4, #0
   1e8ba:	402b      	ands	r3, r5
   1e8bc:	0264      	lsls	r4, r4, #9
   1e8be:	05c9      	lsls	r1, r1, #23
   1e8c0:	0a60      	lsrs	r0, r4, #9
   1e8c2:	07db      	lsls	r3, r3, #31
   1e8c4:	4308      	orrs	r0, r1
   1e8c6:	4318      	orrs	r0, r3
   1e8c8:	b003      	add	sp, #12
   1e8ca:	bc3c      	pop	{r2, r3, r4, r5}
   1e8cc:	4690      	mov	r8, r2
   1e8ce:	4699      	mov	r9, r3
   1e8d0:	46a2      	mov	sl, r4
   1e8d2:	46ab      	mov	fp, r5
   1e8d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e8d6:	2480      	movs	r4, #128	; 0x80
   1e8d8:	2300      	movs	r3, #0
   1e8da:	03e4      	lsls	r4, r4, #15
   1e8dc:	21ff      	movs	r1, #255	; 0xff
   1e8de:	e7ed      	b.n	1e8bc <__aeabi_fdiv+0x138>
   1e8e0:	21ff      	movs	r1, #255	; 0xff
   1e8e2:	2400      	movs	r4, #0
   1e8e4:	e7ea      	b.n	1e8bc <__aeabi_fdiv+0x138>
   1e8e6:	2301      	movs	r3, #1
   1e8e8:	1a59      	subs	r1, r3, r1
   1e8ea:	291b      	cmp	r1, #27
   1e8ec:	dd66      	ble.n	1e9bc <__aeabi_fdiv+0x238>
   1e8ee:	9a01      	ldr	r2, [sp, #4]
   1e8f0:	4013      	ands	r3, r2
   1e8f2:	2100      	movs	r1, #0
   1e8f4:	2400      	movs	r4, #0
   1e8f6:	e7e1      	b.n	1e8bc <__aeabi_fdiv+0x138>
   1e8f8:	2380      	movs	r3, #128	; 0x80
   1e8fa:	03db      	lsls	r3, r3, #15
   1e8fc:	421c      	tst	r4, r3
   1e8fe:	d038      	beq.n	1e972 <__aeabi_fdiv+0x1ee>
   1e900:	421d      	tst	r5, r3
   1e902:	d051      	beq.n	1e9a8 <__aeabi_fdiv+0x224>
   1e904:	431c      	orrs	r4, r3
   1e906:	0264      	lsls	r4, r4, #9
   1e908:	0a64      	lsrs	r4, r4, #9
   1e90a:	0033      	movs	r3, r6
   1e90c:	21ff      	movs	r1, #255	; 0xff
   1e90e:	e7d5      	b.n	1e8bc <__aeabi_fdiv+0x138>
   1e910:	0163      	lsls	r3, r4, #5
   1e912:	016c      	lsls	r4, r5, #5
   1e914:	42a3      	cmp	r3, r4
   1e916:	d23b      	bcs.n	1e990 <__aeabi_fdiv+0x20c>
   1e918:	261b      	movs	r6, #27
   1e91a:	2100      	movs	r1, #0
   1e91c:	3801      	subs	r0, #1
   1e91e:	2501      	movs	r5, #1
   1e920:	001f      	movs	r7, r3
   1e922:	0049      	lsls	r1, r1, #1
   1e924:	005b      	lsls	r3, r3, #1
   1e926:	2f00      	cmp	r7, #0
   1e928:	db01      	blt.n	1e92e <__aeabi_fdiv+0x1aa>
   1e92a:	429c      	cmp	r4, r3
   1e92c:	d801      	bhi.n	1e932 <__aeabi_fdiv+0x1ae>
   1e92e:	1b1b      	subs	r3, r3, r4
   1e930:	4329      	orrs	r1, r5
   1e932:	3e01      	subs	r6, #1
   1e934:	2e00      	cmp	r6, #0
   1e936:	d1f3      	bne.n	1e920 <__aeabi_fdiv+0x19c>
   1e938:	001c      	movs	r4, r3
   1e93a:	1e63      	subs	r3, r4, #1
   1e93c:	419c      	sbcs	r4, r3
   1e93e:	430c      	orrs	r4, r1
   1e940:	0001      	movs	r1, r0
   1e942:	317f      	adds	r1, #127	; 0x7f
   1e944:	2900      	cmp	r1, #0
   1e946:	ddce      	ble.n	1e8e6 <__aeabi_fdiv+0x162>
   1e948:	0763      	lsls	r3, r4, #29
   1e94a:	d004      	beq.n	1e956 <__aeabi_fdiv+0x1d2>
   1e94c:	230f      	movs	r3, #15
   1e94e:	4023      	ands	r3, r4
   1e950:	2b04      	cmp	r3, #4
   1e952:	d000      	beq.n	1e956 <__aeabi_fdiv+0x1d2>
   1e954:	3404      	adds	r4, #4
   1e956:	0123      	lsls	r3, r4, #4
   1e958:	d503      	bpl.n	1e962 <__aeabi_fdiv+0x1de>
   1e95a:	0001      	movs	r1, r0
   1e95c:	4b2c      	ldr	r3, [pc, #176]	; (1ea10 <__aeabi_fdiv+0x28c>)
   1e95e:	3180      	adds	r1, #128	; 0x80
   1e960:	401c      	ands	r4, r3
   1e962:	29fe      	cmp	r1, #254	; 0xfe
   1e964:	dd0d      	ble.n	1e982 <__aeabi_fdiv+0x1fe>
   1e966:	2301      	movs	r3, #1
   1e968:	9a01      	ldr	r2, [sp, #4]
   1e96a:	21ff      	movs	r1, #255	; 0xff
   1e96c:	4013      	ands	r3, r2
   1e96e:	2400      	movs	r4, #0
   1e970:	e7a4      	b.n	1e8bc <__aeabi_fdiv+0x138>
   1e972:	2380      	movs	r3, #128	; 0x80
   1e974:	03db      	lsls	r3, r3, #15
   1e976:	431c      	orrs	r4, r3
   1e978:	0264      	lsls	r4, r4, #9
   1e97a:	0a64      	lsrs	r4, r4, #9
   1e97c:	0033      	movs	r3, r6
   1e97e:	21ff      	movs	r1, #255	; 0xff
   1e980:	e79c      	b.n	1e8bc <__aeabi_fdiv+0x138>
   1e982:	2301      	movs	r3, #1
   1e984:	9a01      	ldr	r2, [sp, #4]
   1e986:	01a4      	lsls	r4, r4, #6
   1e988:	0a64      	lsrs	r4, r4, #9
   1e98a:	b2c9      	uxtb	r1, r1
   1e98c:	4013      	ands	r3, r2
   1e98e:	e795      	b.n	1e8bc <__aeabi_fdiv+0x138>
   1e990:	1b1b      	subs	r3, r3, r4
   1e992:	261a      	movs	r6, #26
   1e994:	2101      	movs	r1, #1
   1e996:	e7c2      	b.n	1e91e <__aeabi_fdiv+0x19a>
   1e998:	9b00      	ldr	r3, [sp, #0]
   1e99a:	468b      	mov	fp, r1
   1e99c:	469a      	mov	sl, r3
   1e99e:	2400      	movs	r4, #0
   1e9a0:	e74c      	b.n	1e83c <__aeabi_fdiv+0xb8>
   1e9a2:	0263      	lsls	r3, r4, #9
   1e9a4:	d5e5      	bpl.n	1e972 <__aeabi_fdiv+0x1ee>
   1e9a6:	2500      	movs	r5, #0
   1e9a8:	2480      	movs	r4, #128	; 0x80
   1e9aa:	03e4      	lsls	r4, r4, #15
   1e9ac:	432c      	orrs	r4, r5
   1e9ae:	0264      	lsls	r4, r4, #9
   1e9b0:	0a64      	lsrs	r4, r4, #9
   1e9b2:	9b00      	ldr	r3, [sp, #0]
   1e9b4:	21ff      	movs	r1, #255	; 0xff
   1e9b6:	e781      	b.n	1e8bc <__aeabi_fdiv+0x138>
   1e9b8:	9501      	str	r5, [sp, #4]
   1e9ba:	e7c1      	b.n	1e940 <__aeabi_fdiv+0x1bc>
   1e9bc:	0023      	movs	r3, r4
   1e9be:	2020      	movs	r0, #32
   1e9c0:	40cb      	lsrs	r3, r1
   1e9c2:	1a41      	subs	r1, r0, r1
   1e9c4:	408c      	lsls	r4, r1
   1e9c6:	1e61      	subs	r1, r4, #1
   1e9c8:	418c      	sbcs	r4, r1
   1e9ca:	431c      	orrs	r4, r3
   1e9cc:	0763      	lsls	r3, r4, #29
   1e9ce:	d004      	beq.n	1e9da <__aeabi_fdiv+0x256>
   1e9d0:	230f      	movs	r3, #15
   1e9d2:	4023      	ands	r3, r4
   1e9d4:	2b04      	cmp	r3, #4
   1e9d6:	d000      	beq.n	1e9da <__aeabi_fdiv+0x256>
   1e9d8:	3404      	adds	r4, #4
   1e9da:	0163      	lsls	r3, r4, #5
   1e9dc:	d505      	bpl.n	1e9ea <__aeabi_fdiv+0x266>
   1e9de:	2301      	movs	r3, #1
   1e9e0:	9a01      	ldr	r2, [sp, #4]
   1e9e2:	2101      	movs	r1, #1
   1e9e4:	4013      	ands	r3, r2
   1e9e6:	2400      	movs	r4, #0
   1e9e8:	e768      	b.n	1e8bc <__aeabi_fdiv+0x138>
   1e9ea:	2301      	movs	r3, #1
   1e9ec:	9a01      	ldr	r2, [sp, #4]
   1e9ee:	01a4      	lsls	r4, r4, #6
   1e9f0:	0a64      	lsrs	r4, r4, #9
   1e9f2:	4013      	ands	r3, r2
   1e9f4:	2100      	movs	r1, #0
   1e9f6:	e761      	b.n	1e8bc <__aeabi_fdiv+0x138>
   1e9f8:	2380      	movs	r3, #128	; 0x80
   1e9fa:	03db      	lsls	r3, r3, #15
   1e9fc:	431c      	orrs	r4, r3
   1e9fe:	0264      	lsls	r4, r4, #9
   1ea00:	0a64      	lsrs	r4, r4, #9
   1ea02:	4653      	mov	r3, sl
   1ea04:	21ff      	movs	r1, #255	; 0xff
   1ea06:	e759      	b.n	1e8bc <__aeabi_fdiv+0x138>
   1ea08:	00026d90 	.word	0x00026d90
   1ea0c:	00026dd0 	.word	0x00026dd0
   1ea10:	f7ffffff 	.word	0xf7ffffff

0001ea14 <__eqsf2>:
   1ea14:	b570      	push	{r4, r5, r6, lr}
   1ea16:	0042      	lsls	r2, r0, #1
   1ea18:	0245      	lsls	r5, r0, #9
   1ea1a:	024e      	lsls	r6, r1, #9
   1ea1c:	004c      	lsls	r4, r1, #1
   1ea1e:	0fc3      	lsrs	r3, r0, #31
   1ea20:	0a6d      	lsrs	r5, r5, #9
   1ea22:	0e12      	lsrs	r2, r2, #24
   1ea24:	0a76      	lsrs	r6, r6, #9
   1ea26:	0e24      	lsrs	r4, r4, #24
   1ea28:	0fc9      	lsrs	r1, r1, #31
   1ea2a:	2001      	movs	r0, #1
   1ea2c:	2aff      	cmp	r2, #255	; 0xff
   1ea2e:	d006      	beq.n	1ea3e <__eqsf2+0x2a>
   1ea30:	2cff      	cmp	r4, #255	; 0xff
   1ea32:	d003      	beq.n	1ea3c <__eqsf2+0x28>
   1ea34:	42a2      	cmp	r2, r4
   1ea36:	d101      	bne.n	1ea3c <__eqsf2+0x28>
   1ea38:	42b5      	cmp	r5, r6
   1ea3a:	d006      	beq.n	1ea4a <__eqsf2+0x36>
   1ea3c:	bd70      	pop	{r4, r5, r6, pc}
   1ea3e:	2d00      	cmp	r5, #0
   1ea40:	d1fc      	bne.n	1ea3c <__eqsf2+0x28>
   1ea42:	2cff      	cmp	r4, #255	; 0xff
   1ea44:	d1fa      	bne.n	1ea3c <__eqsf2+0x28>
   1ea46:	2e00      	cmp	r6, #0
   1ea48:	d1f8      	bne.n	1ea3c <__eqsf2+0x28>
   1ea4a:	428b      	cmp	r3, r1
   1ea4c:	d006      	beq.n	1ea5c <__eqsf2+0x48>
   1ea4e:	2001      	movs	r0, #1
   1ea50:	2a00      	cmp	r2, #0
   1ea52:	d1f3      	bne.n	1ea3c <__eqsf2+0x28>
   1ea54:	0028      	movs	r0, r5
   1ea56:	1e45      	subs	r5, r0, #1
   1ea58:	41a8      	sbcs	r0, r5
   1ea5a:	e7ef      	b.n	1ea3c <__eqsf2+0x28>
   1ea5c:	2000      	movs	r0, #0
   1ea5e:	e7ed      	b.n	1ea3c <__eqsf2+0x28>

0001ea60 <__gesf2>:
   1ea60:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ea62:	0042      	lsls	r2, r0, #1
   1ea64:	0245      	lsls	r5, r0, #9
   1ea66:	024c      	lsls	r4, r1, #9
   1ea68:	0fc3      	lsrs	r3, r0, #31
   1ea6a:	0048      	lsls	r0, r1, #1
   1ea6c:	0a6d      	lsrs	r5, r5, #9
   1ea6e:	0e12      	lsrs	r2, r2, #24
   1ea70:	0a64      	lsrs	r4, r4, #9
   1ea72:	0e00      	lsrs	r0, r0, #24
   1ea74:	0fc9      	lsrs	r1, r1, #31
   1ea76:	2aff      	cmp	r2, #255	; 0xff
   1ea78:	d01e      	beq.n	1eab8 <__gesf2+0x58>
   1ea7a:	28ff      	cmp	r0, #255	; 0xff
   1ea7c:	d021      	beq.n	1eac2 <__gesf2+0x62>
   1ea7e:	2a00      	cmp	r2, #0
   1ea80:	d10a      	bne.n	1ea98 <__gesf2+0x38>
   1ea82:	426e      	negs	r6, r5
   1ea84:	416e      	adcs	r6, r5
   1ea86:	b2f6      	uxtb	r6, r6
   1ea88:	2800      	cmp	r0, #0
   1ea8a:	d10f      	bne.n	1eaac <__gesf2+0x4c>
   1ea8c:	2c00      	cmp	r4, #0
   1ea8e:	d10d      	bne.n	1eaac <__gesf2+0x4c>
   1ea90:	2000      	movs	r0, #0
   1ea92:	2d00      	cmp	r5, #0
   1ea94:	d009      	beq.n	1eaaa <__gesf2+0x4a>
   1ea96:	e005      	b.n	1eaa4 <__gesf2+0x44>
   1ea98:	2800      	cmp	r0, #0
   1ea9a:	d101      	bne.n	1eaa0 <__gesf2+0x40>
   1ea9c:	2c00      	cmp	r4, #0
   1ea9e:	d001      	beq.n	1eaa4 <__gesf2+0x44>
   1eaa0:	428b      	cmp	r3, r1
   1eaa2:	d011      	beq.n	1eac8 <__gesf2+0x68>
   1eaa4:	2101      	movs	r1, #1
   1eaa6:	4258      	negs	r0, r3
   1eaa8:	4308      	orrs	r0, r1
   1eaaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1eaac:	2e00      	cmp	r6, #0
   1eaae:	d0f7      	beq.n	1eaa0 <__gesf2+0x40>
   1eab0:	2001      	movs	r0, #1
   1eab2:	3901      	subs	r1, #1
   1eab4:	4308      	orrs	r0, r1
   1eab6:	e7f8      	b.n	1eaaa <__gesf2+0x4a>
   1eab8:	2d00      	cmp	r5, #0
   1eaba:	d0de      	beq.n	1ea7a <__gesf2+0x1a>
   1eabc:	2002      	movs	r0, #2
   1eabe:	4240      	negs	r0, r0
   1eac0:	e7f3      	b.n	1eaaa <__gesf2+0x4a>
   1eac2:	2c00      	cmp	r4, #0
   1eac4:	d0db      	beq.n	1ea7e <__gesf2+0x1e>
   1eac6:	e7f9      	b.n	1eabc <__gesf2+0x5c>
   1eac8:	4282      	cmp	r2, r0
   1eaca:	dceb      	bgt.n	1eaa4 <__gesf2+0x44>
   1eacc:	db04      	blt.n	1ead8 <__gesf2+0x78>
   1eace:	42a5      	cmp	r5, r4
   1ead0:	d8e8      	bhi.n	1eaa4 <__gesf2+0x44>
   1ead2:	2000      	movs	r0, #0
   1ead4:	42a5      	cmp	r5, r4
   1ead6:	d2e8      	bcs.n	1eaaa <__gesf2+0x4a>
   1ead8:	2101      	movs	r1, #1
   1eada:	1e58      	subs	r0, r3, #1
   1eadc:	4308      	orrs	r0, r1
   1eade:	e7e4      	b.n	1eaaa <__gesf2+0x4a>

0001eae0 <__lesf2>:
   1eae0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1eae2:	0042      	lsls	r2, r0, #1
   1eae4:	024d      	lsls	r5, r1, #9
   1eae6:	004c      	lsls	r4, r1, #1
   1eae8:	0246      	lsls	r6, r0, #9
   1eaea:	0a76      	lsrs	r6, r6, #9
   1eaec:	0e12      	lsrs	r2, r2, #24
   1eaee:	0fc3      	lsrs	r3, r0, #31
   1eaf0:	0a6d      	lsrs	r5, r5, #9
   1eaf2:	0e24      	lsrs	r4, r4, #24
   1eaf4:	0fc9      	lsrs	r1, r1, #31
   1eaf6:	2aff      	cmp	r2, #255	; 0xff
   1eaf8:	d016      	beq.n	1eb28 <__lesf2+0x48>
   1eafa:	2cff      	cmp	r4, #255	; 0xff
   1eafc:	d018      	beq.n	1eb30 <__lesf2+0x50>
   1eafe:	2a00      	cmp	r2, #0
   1eb00:	d10a      	bne.n	1eb18 <__lesf2+0x38>
   1eb02:	4270      	negs	r0, r6
   1eb04:	4170      	adcs	r0, r6
   1eb06:	b2c0      	uxtb	r0, r0
   1eb08:	2c00      	cmp	r4, #0
   1eb0a:	d015      	beq.n	1eb38 <__lesf2+0x58>
   1eb0c:	2800      	cmp	r0, #0
   1eb0e:	d005      	beq.n	1eb1c <__lesf2+0x3c>
   1eb10:	2001      	movs	r0, #1
   1eb12:	3901      	subs	r1, #1
   1eb14:	4308      	orrs	r0, r1
   1eb16:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1eb18:	2c00      	cmp	r4, #0
   1eb1a:	d013      	beq.n	1eb44 <__lesf2+0x64>
   1eb1c:	4299      	cmp	r1, r3
   1eb1e:	d014      	beq.n	1eb4a <__lesf2+0x6a>
   1eb20:	2001      	movs	r0, #1
   1eb22:	425b      	negs	r3, r3
   1eb24:	4318      	orrs	r0, r3
   1eb26:	e7f6      	b.n	1eb16 <__lesf2+0x36>
   1eb28:	2002      	movs	r0, #2
   1eb2a:	2e00      	cmp	r6, #0
   1eb2c:	d1f3      	bne.n	1eb16 <__lesf2+0x36>
   1eb2e:	e7e4      	b.n	1eafa <__lesf2+0x1a>
   1eb30:	2002      	movs	r0, #2
   1eb32:	2d00      	cmp	r5, #0
   1eb34:	d1ef      	bne.n	1eb16 <__lesf2+0x36>
   1eb36:	e7e2      	b.n	1eafe <__lesf2+0x1e>
   1eb38:	2d00      	cmp	r5, #0
   1eb3a:	d1e7      	bne.n	1eb0c <__lesf2+0x2c>
   1eb3c:	2000      	movs	r0, #0
   1eb3e:	2e00      	cmp	r6, #0
   1eb40:	d0e9      	beq.n	1eb16 <__lesf2+0x36>
   1eb42:	e7ed      	b.n	1eb20 <__lesf2+0x40>
   1eb44:	2d00      	cmp	r5, #0
   1eb46:	d1e9      	bne.n	1eb1c <__lesf2+0x3c>
   1eb48:	e7ea      	b.n	1eb20 <__lesf2+0x40>
   1eb4a:	42a2      	cmp	r2, r4
   1eb4c:	dc06      	bgt.n	1eb5c <__lesf2+0x7c>
   1eb4e:	dbdf      	blt.n	1eb10 <__lesf2+0x30>
   1eb50:	42ae      	cmp	r6, r5
   1eb52:	d803      	bhi.n	1eb5c <__lesf2+0x7c>
   1eb54:	2000      	movs	r0, #0
   1eb56:	42ae      	cmp	r6, r5
   1eb58:	d3da      	bcc.n	1eb10 <__lesf2+0x30>
   1eb5a:	e7dc      	b.n	1eb16 <__lesf2+0x36>
   1eb5c:	2001      	movs	r0, #1
   1eb5e:	4249      	negs	r1, r1
   1eb60:	4308      	orrs	r0, r1
   1eb62:	e7d8      	b.n	1eb16 <__lesf2+0x36>

0001eb64 <__aeabi_fmul>:
   1eb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1eb66:	4657      	mov	r7, sl
   1eb68:	464e      	mov	r6, r9
   1eb6a:	4645      	mov	r5, r8
   1eb6c:	46de      	mov	lr, fp
   1eb6e:	b5e0      	push	{r5, r6, r7, lr}
   1eb70:	0247      	lsls	r7, r0, #9
   1eb72:	0046      	lsls	r6, r0, #1
   1eb74:	4688      	mov	r8, r1
   1eb76:	0a7f      	lsrs	r7, r7, #9
   1eb78:	0e36      	lsrs	r6, r6, #24
   1eb7a:	0fc4      	lsrs	r4, r0, #31
   1eb7c:	2e00      	cmp	r6, #0
   1eb7e:	d047      	beq.n	1ec10 <__aeabi_fmul+0xac>
   1eb80:	2eff      	cmp	r6, #255	; 0xff
   1eb82:	d024      	beq.n	1ebce <__aeabi_fmul+0x6a>
   1eb84:	00fb      	lsls	r3, r7, #3
   1eb86:	2780      	movs	r7, #128	; 0x80
   1eb88:	04ff      	lsls	r7, r7, #19
   1eb8a:	431f      	orrs	r7, r3
   1eb8c:	2300      	movs	r3, #0
   1eb8e:	4699      	mov	r9, r3
   1eb90:	469a      	mov	sl, r3
   1eb92:	3e7f      	subs	r6, #127	; 0x7f
   1eb94:	4643      	mov	r3, r8
   1eb96:	025d      	lsls	r5, r3, #9
   1eb98:	0058      	lsls	r0, r3, #1
   1eb9a:	0fdb      	lsrs	r3, r3, #31
   1eb9c:	0a6d      	lsrs	r5, r5, #9
   1eb9e:	0e00      	lsrs	r0, r0, #24
   1eba0:	4698      	mov	r8, r3
   1eba2:	d043      	beq.n	1ec2c <__aeabi_fmul+0xc8>
   1eba4:	28ff      	cmp	r0, #255	; 0xff
   1eba6:	d03b      	beq.n	1ec20 <__aeabi_fmul+0xbc>
   1eba8:	00eb      	lsls	r3, r5, #3
   1ebaa:	2580      	movs	r5, #128	; 0x80
   1ebac:	2200      	movs	r2, #0
   1ebae:	04ed      	lsls	r5, r5, #19
   1ebb0:	431d      	orrs	r5, r3
   1ebb2:	387f      	subs	r0, #127	; 0x7f
   1ebb4:	1836      	adds	r6, r6, r0
   1ebb6:	1c73      	adds	r3, r6, #1
   1ebb8:	4641      	mov	r1, r8
   1ebba:	469b      	mov	fp, r3
   1ebbc:	464b      	mov	r3, r9
   1ebbe:	4061      	eors	r1, r4
   1ebc0:	4313      	orrs	r3, r2
   1ebc2:	2b0f      	cmp	r3, #15
   1ebc4:	d864      	bhi.n	1ec90 <__aeabi_fmul+0x12c>
   1ebc6:	4875      	ldr	r0, [pc, #468]	; (1ed9c <__aeabi_fmul+0x238>)
   1ebc8:	009b      	lsls	r3, r3, #2
   1ebca:	58c3      	ldr	r3, [r0, r3]
   1ebcc:	469f      	mov	pc, r3
   1ebce:	2f00      	cmp	r7, #0
   1ebd0:	d142      	bne.n	1ec58 <__aeabi_fmul+0xf4>
   1ebd2:	2308      	movs	r3, #8
   1ebd4:	4699      	mov	r9, r3
   1ebd6:	3b06      	subs	r3, #6
   1ebd8:	26ff      	movs	r6, #255	; 0xff
   1ebda:	469a      	mov	sl, r3
   1ebdc:	e7da      	b.n	1eb94 <__aeabi_fmul+0x30>
   1ebde:	4641      	mov	r1, r8
   1ebe0:	2a02      	cmp	r2, #2
   1ebe2:	d028      	beq.n	1ec36 <__aeabi_fmul+0xd2>
   1ebe4:	2a03      	cmp	r2, #3
   1ebe6:	d100      	bne.n	1ebea <__aeabi_fmul+0x86>
   1ebe8:	e0ce      	b.n	1ed88 <__aeabi_fmul+0x224>
   1ebea:	2a01      	cmp	r2, #1
   1ebec:	d000      	beq.n	1ebf0 <__aeabi_fmul+0x8c>
   1ebee:	e0ac      	b.n	1ed4a <__aeabi_fmul+0x1e6>
   1ebf0:	4011      	ands	r1, r2
   1ebf2:	2000      	movs	r0, #0
   1ebf4:	2200      	movs	r2, #0
   1ebf6:	b2cc      	uxtb	r4, r1
   1ebf8:	0240      	lsls	r0, r0, #9
   1ebfa:	05d2      	lsls	r2, r2, #23
   1ebfc:	0a40      	lsrs	r0, r0, #9
   1ebfe:	07e4      	lsls	r4, r4, #31
   1ec00:	4310      	orrs	r0, r2
   1ec02:	4320      	orrs	r0, r4
   1ec04:	bc3c      	pop	{r2, r3, r4, r5}
   1ec06:	4690      	mov	r8, r2
   1ec08:	4699      	mov	r9, r3
   1ec0a:	46a2      	mov	sl, r4
   1ec0c:	46ab      	mov	fp, r5
   1ec0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ec10:	2f00      	cmp	r7, #0
   1ec12:	d115      	bne.n	1ec40 <__aeabi_fmul+0xdc>
   1ec14:	2304      	movs	r3, #4
   1ec16:	4699      	mov	r9, r3
   1ec18:	3b03      	subs	r3, #3
   1ec1a:	2600      	movs	r6, #0
   1ec1c:	469a      	mov	sl, r3
   1ec1e:	e7b9      	b.n	1eb94 <__aeabi_fmul+0x30>
   1ec20:	20ff      	movs	r0, #255	; 0xff
   1ec22:	2202      	movs	r2, #2
   1ec24:	2d00      	cmp	r5, #0
   1ec26:	d0c5      	beq.n	1ebb4 <__aeabi_fmul+0x50>
   1ec28:	2203      	movs	r2, #3
   1ec2a:	e7c3      	b.n	1ebb4 <__aeabi_fmul+0x50>
   1ec2c:	2d00      	cmp	r5, #0
   1ec2e:	d119      	bne.n	1ec64 <__aeabi_fmul+0x100>
   1ec30:	2000      	movs	r0, #0
   1ec32:	2201      	movs	r2, #1
   1ec34:	e7be      	b.n	1ebb4 <__aeabi_fmul+0x50>
   1ec36:	2401      	movs	r4, #1
   1ec38:	22ff      	movs	r2, #255	; 0xff
   1ec3a:	400c      	ands	r4, r1
   1ec3c:	2000      	movs	r0, #0
   1ec3e:	e7db      	b.n	1ebf8 <__aeabi_fmul+0x94>
   1ec40:	0038      	movs	r0, r7
   1ec42:	f7ff fb6f 	bl	1e324 <__clzsi2>
   1ec46:	2676      	movs	r6, #118	; 0x76
   1ec48:	1f43      	subs	r3, r0, #5
   1ec4a:	409f      	lsls	r7, r3
   1ec4c:	2300      	movs	r3, #0
   1ec4e:	4276      	negs	r6, r6
   1ec50:	1a36      	subs	r6, r6, r0
   1ec52:	4699      	mov	r9, r3
   1ec54:	469a      	mov	sl, r3
   1ec56:	e79d      	b.n	1eb94 <__aeabi_fmul+0x30>
   1ec58:	230c      	movs	r3, #12
   1ec5a:	4699      	mov	r9, r3
   1ec5c:	3b09      	subs	r3, #9
   1ec5e:	26ff      	movs	r6, #255	; 0xff
   1ec60:	469a      	mov	sl, r3
   1ec62:	e797      	b.n	1eb94 <__aeabi_fmul+0x30>
   1ec64:	0028      	movs	r0, r5
   1ec66:	f7ff fb5d 	bl	1e324 <__clzsi2>
   1ec6a:	1f43      	subs	r3, r0, #5
   1ec6c:	409d      	lsls	r5, r3
   1ec6e:	2376      	movs	r3, #118	; 0x76
   1ec70:	425b      	negs	r3, r3
   1ec72:	1a18      	subs	r0, r3, r0
   1ec74:	2200      	movs	r2, #0
   1ec76:	e79d      	b.n	1ebb4 <__aeabi_fmul+0x50>
   1ec78:	2080      	movs	r0, #128	; 0x80
   1ec7a:	2400      	movs	r4, #0
   1ec7c:	03c0      	lsls	r0, r0, #15
   1ec7e:	22ff      	movs	r2, #255	; 0xff
   1ec80:	e7ba      	b.n	1ebf8 <__aeabi_fmul+0x94>
   1ec82:	003d      	movs	r5, r7
   1ec84:	4652      	mov	r2, sl
   1ec86:	e7ab      	b.n	1ebe0 <__aeabi_fmul+0x7c>
   1ec88:	003d      	movs	r5, r7
   1ec8a:	0021      	movs	r1, r4
   1ec8c:	4652      	mov	r2, sl
   1ec8e:	e7a7      	b.n	1ebe0 <__aeabi_fmul+0x7c>
   1ec90:	0c3b      	lsrs	r3, r7, #16
   1ec92:	469c      	mov	ip, r3
   1ec94:	042a      	lsls	r2, r5, #16
   1ec96:	0c12      	lsrs	r2, r2, #16
   1ec98:	0c2b      	lsrs	r3, r5, #16
   1ec9a:	0014      	movs	r4, r2
   1ec9c:	4660      	mov	r0, ip
   1ec9e:	4665      	mov	r5, ip
   1eca0:	043f      	lsls	r7, r7, #16
   1eca2:	0c3f      	lsrs	r7, r7, #16
   1eca4:	437c      	muls	r4, r7
   1eca6:	4342      	muls	r2, r0
   1eca8:	435d      	muls	r5, r3
   1ecaa:	437b      	muls	r3, r7
   1ecac:	0c27      	lsrs	r7, r4, #16
   1ecae:	189b      	adds	r3, r3, r2
   1ecb0:	18ff      	adds	r7, r7, r3
   1ecb2:	42ba      	cmp	r2, r7
   1ecb4:	d903      	bls.n	1ecbe <__aeabi_fmul+0x15a>
   1ecb6:	2380      	movs	r3, #128	; 0x80
   1ecb8:	025b      	lsls	r3, r3, #9
   1ecba:	469c      	mov	ip, r3
   1ecbc:	4465      	add	r5, ip
   1ecbe:	0424      	lsls	r4, r4, #16
   1ecc0:	043a      	lsls	r2, r7, #16
   1ecc2:	0c24      	lsrs	r4, r4, #16
   1ecc4:	1912      	adds	r2, r2, r4
   1ecc6:	0193      	lsls	r3, r2, #6
   1ecc8:	1e5c      	subs	r4, r3, #1
   1ecca:	41a3      	sbcs	r3, r4
   1eccc:	0c3f      	lsrs	r7, r7, #16
   1ecce:	0e92      	lsrs	r2, r2, #26
   1ecd0:	197d      	adds	r5, r7, r5
   1ecd2:	431a      	orrs	r2, r3
   1ecd4:	01ad      	lsls	r5, r5, #6
   1ecd6:	4315      	orrs	r5, r2
   1ecd8:	012b      	lsls	r3, r5, #4
   1ecda:	d504      	bpl.n	1ece6 <__aeabi_fmul+0x182>
   1ecdc:	2301      	movs	r3, #1
   1ecde:	465e      	mov	r6, fp
   1ece0:	086a      	lsrs	r2, r5, #1
   1ece2:	401d      	ands	r5, r3
   1ece4:	4315      	orrs	r5, r2
   1ece6:	0032      	movs	r2, r6
   1ece8:	327f      	adds	r2, #127	; 0x7f
   1ecea:	2a00      	cmp	r2, #0
   1ecec:	dd25      	ble.n	1ed3a <__aeabi_fmul+0x1d6>
   1ecee:	076b      	lsls	r3, r5, #29
   1ecf0:	d004      	beq.n	1ecfc <__aeabi_fmul+0x198>
   1ecf2:	230f      	movs	r3, #15
   1ecf4:	402b      	ands	r3, r5
   1ecf6:	2b04      	cmp	r3, #4
   1ecf8:	d000      	beq.n	1ecfc <__aeabi_fmul+0x198>
   1ecfa:	3504      	adds	r5, #4
   1ecfc:	012b      	lsls	r3, r5, #4
   1ecfe:	d503      	bpl.n	1ed08 <__aeabi_fmul+0x1a4>
   1ed00:	0032      	movs	r2, r6
   1ed02:	4b27      	ldr	r3, [pc, #156]	; (1eda0 <__aeabi_fmul+0x23c>)
   1ed04:	3280      	adds	r2, #128	; 0x80
   1ed06:	401d      	ands	r5, r3
   1ed08:	2afe      	cmp	r2, #254	; 0xfe
   1ed0a:	dc94      	bgt.n	1ec36 <__aeabi_fmul+0xd2>
   1ed0c:	2401      	movs	r4, #1
   1ed0e:	01a8      	lsls	r0, r5, #6
   1ed10:	0a40      	lsrs	r0, r0, #9
   1ed12:	b2d2      	uxtb	r2, r2
   1ed14:	400c      	ands	r4, r1
   1ed16:	e76f      	b.n	1ebf8 <__aeabi_fmul+0x94>
   1ed18:	2080      	movs	r0, #128	; 0x80
   1ed1a:	03c0      	lsls	r0, r0, #15
   1ed1c:	4207      	tst	r7, r0
   1ed1e:	d007      	beq.n	1ed30 <__aeabi_fmul+0x1cc>
   1ed20:	4205      	tst	r5, r0
   1ed22:	d105      	bne.n	1ed30 <__aeabi_fmul+0x1cc>
   1ed24:	4328      	orrs	r0, r5
   1ed26:	0240      	lsls	r0, r0, #9
   1ed28:	0a40      	lsrs	r0, r0, #9
   1ed2a:	4644      	mov	r4, r8
   1ed2c:	22ff      	movs	r2, #255	; 0xff
   1ed2e:	e763      	b.n	1ebf8 <__aeabi_fmul+0x94>
   1ed30:	4338      	orrs	r0, r7
   1ed32:	0240      	lsls	r0, r0, #9
   1ed34:	0a40      	lsrs	r0, r0, #9
   1ed36:	22ff      	movs	r2, #255	; 0xff
   1ed38:	e75e      	b.n	1ebf8 <__aeabi_fmul+0x94>
   1ed3a:	2401      	movs	r4, #1
   1ed3c:	1aa3      	subs	r3, r4, r2
   1ed3e:	2b1b      	cmp	r3, #27
   1ed40:	dd05      	ble.n	1ed4e <__aeabi_fmul+0x1ea>
   1ed42:	400c      	ands	r4, r1
   1ed44:	2200      	movs	r2, #0
   1ed46:	2000      	movs	r0, #0
   1ed48:	e756      	b.n	1ebf8 <__aeabi_fmul+0x94>
   1ed4a:	465e      	mov	r6, fp
   1ed4c:	e7cb      	b.n	1ece6 <__aeabi_fmul+0x182>
   1ed4e:	002a      	movs	r2, r5
   1ed50:	2020      	movs	r0, #32
   1ed52:	40da      	lsrs	r2, r3
   1ed54:	1ac3      	subs	r3, r0, r3
   1ed56:	409d      	lsls	r5, r3
   1ed58:	002b      	movs	r3, r5
   1ed5a:	1e5d      	subs	r5, r3, #1
   1ed5c:	41ab      	sbcs	r3, r5
   1ed5e:	4313      	orrs	r3, r2
   1ed60:	075a      	lsls	r2, r3, #29
   1ed62:	d004      	beq.n	1ed6e <__aeabi_fmul+0x20a>
   1ed64:	220f      	movs	r2, #15
   1ed66:	401a      	ands	r2, r3
   1ed68:	2a04      	cmp	r2, #4
   1ed6a:	d000      	beq.n	1ed6e <__aeabi_fmul+0x20a>
   1ed6c:	3304      	adds	r3, #4
   1ed6e:	015a      	lsls	r2, r3, #5
   1ed70:	d504      	bpl.n	1ed7c <__aeabi_fmul+0x218>
   1ed72:	2401      	movs	r4, #1
   1ed74:	2201      	movs	r2, #1
   1ed76:	400c      	ands	r4, r1
   1ed78:	2000      	movs	r0, #0
   1ed7a:	e73d      	b.n	1ebf8 <__aeabi_fmul+0x94>
   1ed7c:	2401      	movs	r4, #1
   1ed7e:	019b      	lsls	r3, r3, #6
   1ed80:	0a58      	lsrs	r0, r3, #9
   1ed82:	400c      	ands	r4, r1
   1ed84:	2200      	movs	r2, #0
   1ed86:	e737      	b.n	1ebf8 <__aeabi_fmul+0x94>
   1ed88:	2080      	movs	r0, #128	; 0x80
   1ed8a:	2401      	movs	r4, #1
   1ed8c:	03c0      	lsls	r0, r0, #15
   1ed8e:	4328      	orrs	r0, r5
   1ed90:	0240      	lsls	r0, r0, #9
   1ed92:	0a40      	lsrs	r0, r0, #9
   1ed94:	400c      	ands	r4, r1
   1ed96:	22ff      	movs	r2, #255	; 0xff
   1ed98:	e72e      	b.n	1ebf8 <__aeabi_fmul+0x94>
   1ed9a:	46c0      	nop			; (mov r8, r8)
   1ed9c:	00026e10 	.word	0x00026e10
   1eda0:	f7ffffff 	.word	0xf7ffffff

0001eda4 <__aeabi_fsub>:
   1eda4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1eda6:	464f      	mov	r7, r9
   1eda8:	46d6      	mov	lr, sl
   1edaa:	4646      	mov	r6, r8
   1edac:	0044      	lsls	r4, r0, #1
   1edae:	b5c0      	push	{r6, r7, lr}
   1edb0:	0fc2      	lsrs	r2, r0, #31
   1edb2:	0247      	lsls	r7, r0, #9
   1edb4:	0248      	lsls	r0, r1, #9
   1edb6:	0a40      	lsrs	r0, r0, #9
   1edb8:	4684      	mov	ip, r0
   1edba:	4666      	mov	r6, ip
   1edbc:	0a7b      	lsrs	r3, r7, #9
   1edbe:	0048      	lsls	r0, r1, #1
   1edc0:	0fc9      	lsrs	r1, r1, #31
   1edc2:	469a      	mov	sl, r3
   1edc4:	0e24      	lsrs	r4, r4, #24
   1edc6:	0015      	movs	r5, r2
   1edc8:	00db      	lsls	r3, r3, #3
   1edca:	0e00      	lsrs	r0, r0, #24
   1edcc:	4689      	mov	r9, r1
   1edce:	00f6      	lsls	r6, r6, #3
   1edd0:	28ff      	cmp	r0, #255	; 0xff
   1edd2:	d100      	bne.n	1edd6 <__aeabi_fsub+0x32>
   1edd4:	e08f      	b.n	1eef6 <__aeabi_fsub+0x152>
   1edd6:	2101      	movs	r1, #1
   1edd8:	464f      	mov	r7, r9
   1edda:	404f      	eors	r7, r1
   1eddc:	0039      	movs	r1, r7
   1edde:	4291      	cmp	r1, r2
   1ede0:	d066      	beq.n	1eeb0 <__aeabi_fsub+0x10c>
   1ede2:	1a22      	subs	r2, r4, r0
   1ede4:	2a00      	cmp	r2, #0
   1ede6:	dc00      	bgt.n	1edea <__aeabi_fsub+0x46>
   1ede8:	e09d      	b.n	1ef26 <__aeabi_fsub+0x182>
   1edea:	2800      	cmp	r0, #0
   1edec:	d13d      	bne.n	1ee6a <__aeabi_fsub+0xc6>
   1edee:	2e00      	cmp	r6, #0
   1edf0:	d100      	bne.n	1edf4 <__aeabi_fsub+0x50>
   1edf2:	e08b      	b.n	1ef0c <__aeabi_fsub+0x168>
   1edf4:	1e51      	subs	r1, r2, #1
   1edf6:	2900      	cmp	r1, #0
   1edf8:	d000      	beq.n	1edfc <__aeabi_fsub+0x58>
   1edfa:	e0b5      	b.n	1ef68 <__aeabi_fsub+0x1c4>
   1edfc:	2401      	movs	r4, #1
   1edfe:	1b9b      	subs	r3, r3, r6
   1ee00:	015a      	lsls	r2, r3, #5
   1ee02:	d544      	bpl.n	1ee8e <__aeabi_fsub+0xea>
   1ee04:	019b      	lsls	r3, r3, #6
   1ee06:	099f      	lsrs	r7, r3, #6
   1ee08:	0038      	movs	r0, r7
   1ee0a:	f7ff fa8b 	bl	1e324 <__clzsi2>
   1ee0e:	3805      	subs	r0, #5
   1ee10:	4087      	lsls	r7, r0
   1ee12:	4284      	cmp	r4, r0
   1ee14:	dd00      	ble.n	1ee18 <__aeabi_fsub+0x74>
   1ee16:	e096      	b.n	1ef46 <__aeabi_fsub+0x1a2>
   1ee18:	1b04      	subs	r4, r0, r4
   1ee1a:	003a      	movs	r2, r7
   1ee1c:	2020      	movs	r0, #32
   1ee1e:	3401      	adds	r4, #1
   1ee20:	40e2      	lsrs	r2, r4
   1ee22:	1b04      	subs	r4, r0, r4
   1ee24:	40a7      	lsls	r7, r4
   1ee26:	003b      	movs	r3, r7
   1ee28:	1e5f      	subs	r7, r3, #1
   1ee2a:	41bb      	sbcs	r3, r7
   1ee2c:	2400      	movs	r4, #0
   1ee2e:	4313      	orrs	r3, r2
   1ee30:	075a      	lsls	r2, r3, #29
   1ee32:	d004      	beq.n	1ee3e <__aeabi_fsub+0x9a>
   1ee34:	220f      	movs	r2, #15
   1ee36:	401a      	ands	r2, r3
   1ee38:	2a04      	cmp	r2, #4
   1ee3a:	d000      	beq.n	1ee3e <__aeabi_fsub+0x9a>
   1ee3c:	3304      	adds	r3, #4
   1ee3e:	015a      	lsls	r2, r3, #5
   1ee40:	d527      	bpl.n	1ee92 <__aeabi_fsub+0xee>
   1ee42:	3401      	adds	r4, #1
   1ee44:	2cff      	cmp	r4, #255	; 0xff
   1ee46:	d100      	bne.n	1ee4a <__aeabi_fsub+0xa6>
   1ee48:	e079      	b.n	1ef3e <__aeabi_fsub+0x19a>
   1ee4a:	2201      	movs	r2, #1
   1ee4c:	019b      	lsls	r3, r3, #6
   1ee4e:	0a5b      	lsrs	r3, r3, #9
   1ee50:	b2e4      	uxtb	r4, r4
   1ee52:	402a      	ands	r2, r5
   1ee54:	025b      	lsls	r3, r3, #9
   1ee56:	05e4      	lsls	r4, r4, #23
   1ee58:	0a58      	lsrs	r0, r3, #9
   1ee5a:	07d2      	lsls	r2, r2, #31
   1ee5c:	4320      	orrs	r0, r4
   1ee5e:	4310      	orrs	r0, r2
   1ee60:	bc1c      	pop	{r2, r3, r4}
   1ee62:	4690      	mov	r8, r2
   1ee64:	4699      	mov	r9, r3
   1ee66:	46a2      	mov	sl, r4
   1ee68:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ee6a:	2cff      	cmp	r4, #255	; 0xff
   1ee6c:	d0e0      	beq.n	1ee30 <__aeabi_fsub+0x8c>
   1ee6e:	2180      	movs	r1, #128	; 0x80
   1ee70:	04c9      	lsls	r1, r1, #19
   1ee72:	430e      	orrs	r6, r1
   1ee74:	2a1b      	cmp	r2, #27
   1ee76:	dc7b      	bgt.n	1ef70 <__aeabi_fsub+0x1cc>
   1ee78:	0031      	movs	r1, r6
   1ee7a:	2020      	movs	r0, #32
   1ee7c:	40d1      	lsrs	r1, r2
   1ee7e:	1a82      	subs	r2, r0, r2
   1ee80:	4096      	lsls	r6, r2
   1ee82:	1e72      	subs	r2, r6, #1
   1ee84:	4196      	sbcs	r6, r2
   1ee86:	430e      	orrs	r6, r1
   1ee88:	1b9b      	subs	r3, r3, r6
   1ee8a:	015a      	lsls	r2, r3, #5
   1ee8c:	d4ba      	bmi.n	1ee04 <__aeabi_fsub+0x60>
   1ee8e:	075a      	lsls	r2, r3, #29
   1ee90:	d1d0      	bne.n	1ee34 <__aeabi_fsub+0x90>
   1ee92:	2201      	movs	r2, #1
   1ee94:	08df      	lsrs	r7, r3, #3
   1ee96:	402a      	ands	r2, r5
   1ee98:	2cff      	cmp	r4, #255	; 0xff
   1ee9a:	d133      	bne.n	1ef04 <__aeabi_fsub+0x160>
   1ee9c:	2f00      	cmp	r7, #0
   1ee9e:	d100      	bne.n	1eea2 <__aeabi_fsub+0xfe>
   1eea0:	e0a8      	b.n	1eff4 <__aeabi_fsub+0x250>
   1eea2:	2380      	movs	r3, #128	; 0x80
   1eea4:	03db      	lsls	r3, r3, #15
   1eea6:	433b      	orrs	r3, r7
   1eea8:	025b      	lsls	r3, r3, #9
   1eeaa:	0a5b      	lsrs	r3, r3, #9
   1eeac:	24ff      	movs	r4, #255	; 0xff
   1eeae:	e7d1      	b.n	1ee54 <__aeabi_fsub+0xb0>
   1eeb0:	1a21      	subs	r1, r4, r0
   1eeb2:	2900      	cmp	r1, #0
   1eeb4:	dd4c      	ble.n	1ef50 <__aeabi_fsub+0x1ac>
   1eeb6:	2800      	cmp	r0, #0
   1eeb8:	d02a      	beq.n	1ef10 <__aeabi_fsub+0x16c>
   1eeba:	2cff      	cmp	r4, #255	; 0xff
   1eebc:	d0b8      	beq.n	1ee30 <__aeabi_fsub+0x8c>
   1eebe:	2080      	movs	r0, #128	; 0x80
   1eec0:	04c0      	lsls	r0, r0, #19
   1eec2:	4306      	orrs	r6, r0
   1eec4:	291b      	cmp	r1, #27
   1eec6:	dd00      	ble.n	1eeca <__aeabi_fsub+0x126>
   1eec8:	e0af      	b.n	1f02a <__aeabi_fsub+0x286>
   1eeca:	0030      	movs	r0, r6
   1eecc:	2720      	movs	r7, #32
   1eece:	40c8      	lsrs	r0, r1
   1eed0:	1a79      	subs	r1, r7, r1
   1eed2:	408e      	lsls	r6, r1
   1eed4:	1e71      	subs	r1, r6, #1
   1eed6:	418e      	sbcs	r6, r1
   1eed8:	4306      	orrs	r6, r0
   1eeda:	199b      	adds	r3, r3, r6
   1eedc:	0159      	lsls	r1, r3, #5
   1eede:	d5d6      	bpl.n	1ee8e <__aeabi_fsub+0xea>
   1eee0:	3401      	adds	r4, #1
   1eee2:	2cff      	cmp	r4, #255	; 0xff
   1eee4:	d100      	bne.n	1eee8 <__aeabi_fsub+0x144>
   1eee6:	e085      	b.n	1eff4 <__aeabi_fsub+0x250>
   1eee8:	2201      	movs	r2, #1
   1eeea:	497a      	ldr	r1, [pc, #488]	; (1f0d4 <__aeabi_fsub+0x330>)
   1eeec:	401a      	ands	r2, r3
   1eeee:	085b      	lsrs	r3, r3, #1
   1eef0:	400b      	ands	r3, r1
   1eef2:	4313      	orrs	r3, r2
   1eef4:	e79c      	b.n	1ee30 <__aeabi_fsub+0x8c>
   1eef6:	2e00      	cmp	r6, #0
   1eef8:	d000      	beq.n	1eefc <__aeabi_fsub+0x158>
   1eefa:	e770      	b.n	1edde <__aeabi_fsub+0x3a>
   1eefc:	e76b      	b.n	1edd6 <__aeabi_fsub+0x32>
   1eefe:	1e3b      	subs	r3, r7, #0
   1ef00:	d1c5      	bne.n	1ee8e <__aeabi_fsub+0xea>
   1ef02:	2200      	movs	r2, #0
   1ef04:	027b      	lsls	r3, r7, #9
   1ef06:	0a5b      	lsrs	r3, r3, #9
   1ef08:	b2e4      	uxtb	r4, r4
   1ef0a:	e7a3      	b.n	1ee54 <__aeabi_fsub+0xb0>
   1ef0c:	0014      	movs	r4, r2
   1ef0e:	e78f      	b.n	1ee30 <__aeabi_fsub+0x8c>
   1ef10:	2e00      	cmp	r6, #0
   1ef12:	d04d      	beq.n	1efb0 <__aeabi_fsub+0x20c>
   1ef14:	1e48      	subs	r0, r1, #1
   1ef16:	2800      	cmp	r0, #0
   1ef18:	d157      	bne.n	1efca <__aeabi_fsub+0x226>
   1ef1a:	199b      	adds	r3, r3, r6
   1ef1c:	2401      	movs	r4, #1
   1ef1e:	015a      	lsls	r2, r3, #5
   1ef20:	d5b5      	bpl.n	1ee8e <__aeabi_fsub+0xea>
   1ef22:	2402      	movs	r4, #2
   1ef24:	e7e0      	b.n	1eee8 <__aeabi_fsub+0x144>
   1ef26:	2a00      	cmp	r2, #0
   1ef28:	d125      	bne.n	1ef76 <__aeabi_fsub+0x1d2>
   1ef2a:	1c62      	adds	r2, r4, #1
   1ef2c:	b2d2      	uxtb	r2, r2
   1ef2e:	2a01      	cmp	r2, #1
   1ef30:	dd72      	ble.n	1f018 <__aeabi_fsub+0x274>
   1ef32:	1b9f      	subs	r7, r3, r6
   1ef34:	017a      	lsls	r2, r7, #5
   1ef36:	d535      	bpl.n	1efa4 <__aeabi_fsub+0x200>
   1ef38:	1af7      	subs	r7, r6, r3
   1ef3a:	000d      	movs	r5, r1
   1ef3c:	e764      	b.n	1ee08 <__aeabi_fsub+0x64>
   1ef3e:	2201      	movs	r2, #1
   1ef40:	2300      	movs	r3, #0
   1ef42:	402a      	ands	r2, r5
   1ef44:	e786      	b.n	1ee54 <__aeabi_fsub+0xb0>
   1ef46:	003b      	movs	r3, r7
   1ef48:	4a63      	ldr	r2, [pc, #396]	; (1f0d8 <__aeabi_fsub+0x334>)
   1ef4a:	1a24      	subs	r4, r4, r0
   1ef4c:	4013      	ands	r3, r2
   1ef4e:	e76f      	b.n	1ee30 <__aeabi_fsub+0x8c>
   1ef50:	2900      	cmp	r1, #0
   1ef52:	d16c      	bne.n	1f02e <__aeabi_fsub+0x28a>
   1ef54:	1c61      	adds	r1, r4, #1
   1ef56:	b2c8      	uxtb	r0, r1
   1ef58:	2801      	cmp	r0, #1
   1ef5a:	dd4e      	ble.n	1effa <__aeabi_fsub+0x256>
   1ef5c:	29ff      	cmp	r1, #255	; 0xff
   1ef5e:	d049      	beq.n	1eff4 <__aeabi_fsub+0x250>
   1ef60:	199b      	adds	r3, r3, r6
   1ef62:	085b      	lsrs	r3, r3, #1
   1ef64:	000c      	movs	r4, r1
   1ef66:	e763      	b.n	1ee30 <__aeabi_fsub+0x8c>
   1ef68:	2aff      	cmp	r2, #255	; 0xff
   1ef6a:	d041      	beq.n	1eff0 <__aeabi_fsub+0x24c>
   1ef6c:	000a      	movs	r2, r1
   1ef6e:	e781      	b.n	1ee74 <__aeabi_fsub+0xd0>
   1ef70:	2601      	movs	r6, #1
   1ef72:	1b9b      	subs	r3, r3, r6
   1ef74:	e789      	b.n	1ee8a <__aeabi_fsub+0xe6>
   1ef76:	2c00      	cmp	r4, #0
   1ef78:	d01c      	beq.n	1efb4 <__aeabi_fsub+0x210>
   1ef7a:	28ff      	cmp	r0, #255	; 0xff
   1ef7c:	d021      	beq.n	1efc2 <__aeabi_fsub+0x21e>
   1ef7e:	2480      	movs	r4, #128	; 0x80
   1ef80:	04e4      	lsls	r4, r4, #19
   1ef82:	4252      	negs	r2, r2
   1ef84:	4323      	orrs	r3, r4
   1ef86:	2a1b      	cmp	r2, #27
   1ef88:	dd00      	ble.n	1ef8c <__aeabi_fsub+0x1e8>
   1ef8a:	e096      	b.n	1f0ba <__aeabi_fsub+0x316>
   1ef8c:	001c      	movs	r4, r3
   1ef8e:	2520      	movs	r5, #32
   1ef90:	40d4      	lsrs	r4, r2
   1ef92:	1aaa      	subs	r2, r5, r2
   1ef94:	4093      	lsls	r3, r2
   1ef96:	1e5a      	subs	r2, r3, #1
   1ef98:	4193      	sbcs	r3, r2
   1ef9a:	4323      	orrs	r3, r4
   1ef9c:	1af3      	subs	r3, r6, r3
   1ef9e:	0004      	movs	r4, r0
   1efa0:	000d      	movs	r5, r1
   1efa2:	e72d      	b.n	1ee00 <__aeabi_fsub+0x5c>
   1efa4:	2f00      	cmp	r7, #0
   1efa6:	d000      	beq.n	1efaa <__aeabi_fsub+0x206>
   1efa8:	e72e      	b.n	1ee08 <__aeabi_fsub+0x64>
   1efaa:	2200      	movs	r2, #0
   1efac:	2400      	movs	r4, #0
   1efae:	e7a9      	b.n	1ef04 <__aeabi_fsub+0x160>
   1efb0:	000c      	movs	r4, r1
   1efb2:	e73d      	b.n	1ee30 <__aeabi_fsub+0x8c>
   1efb4:	2b00      	cmp	r3, #0
   1efb6:	d058      	beq.n	1f06a <__aeabi_fsub+0x2c6>
   1efb8:	43d2      	mvns	r2, r2
   1efba:	2a00      	cmp	r2, #0
   1efbc:	d0ee      	beq.n	1ef9c <__aeabi_fsub+0x1f8>
   1efbe:	28ff      	cmp	r0, #255	; 0xff
   1efc0:	d1e1      	bne.n	1ef86 <__aeabi_fsub+0x1e2>
   1efc2:	0033      	movs	r3, r6
   1efc4:	24ff      	movs	r4, #255	; 0xff
   1efc6:	000d      	movs	r5, r1
   1efc8:	e732      	b.n	1ee30 <__aeabi_fsub+0x8c>
   1efca:	29ff      	cmp	r1, #255	; 0xff
   1efcc:	d010      	beq.n	1eff0 <__aeabi_fsub+0x24c>
   1efce:	0001      	movs	r1, r0
   1efd0:	e778      	b.n	1eec4 <__aeabi_fsub+0x120>
   1efd2:	2b00      	cmp	r3, #0
   1efd4:	d06e      	beq.n	1f0b4 <__aeabi_fsub+0x310>
   1efd6:	24ff      	movs	r4, #255	; 0xff
   1efd8:	2e00      	cmp	r6, #0
   1efda:	d100      	bne.n	1efde <__aeabi_fsub+0x23a>
   1efdc:	e728      	b.n	1ee30 <__aeabi_fsub+0x8c>
   1efde:	2280      	movs	r2, #128	; 0x80
   1efe0:	4651      	mov	r1, sl
   1efe2:	03d2      	lsls	r2, r2, #15
   1efe4:	4211      	tst	r1, r2
   1efe6:	d003      	beq.n	1eff0 <__aeabi_fsub+0x24c>
   1efe8:	4661      	mov	r1, ip
   1efea:	4211      	tst	r1, r2
   1efec:	d100      	bne.n	1eff0 <__aeabi_fsub+0x24c>
   1efee:	0033      	movs	r3, r6
   1eff0:	24ff      	movs	r4, #255	; 0xff
   1eff2:	e71d      	b.n	1ee30 <__aeabi_fsub+0x8c>
   1eff4:	24ff      	movs	r4, #255	; 0xff
   1eff6:	2300      	movs	r3, #0
   1eff8:	e72c      	b.n	1ee54 <__aeabi_fsub+0xb0>
   1effa:	2c00      	cmp	r4, #0
   1effc:	d1e9      	bne.n	1efd2 <__aeabi_fsub+0x22e>
   1effe:	2b00      	cmp	r3, #0
   1f000:	d063      	beq.n	1f0ca <__aeabi_fsub+0x326>
   1f002:	2e00      	cmp	r6, #0
   1f004:	d100      	bne.n	1f008 <__aeabi_fsub+0x264>
   1f006:	e713      	b.n	1ee30 <__aeabi_fsub+0x8c>
   1f008:	199b      	adds	r3, r3, r6
   1f00a:	015a      	lsls	r2, r3, #5
   1f00c:	d400      	bmi.n	1f010 <__aeabi_fsub+0x26c>
   1f00e:	e73e      	b.n	1ee8e <__aeabi_fsub+0xea>
   1f010:	4a31      	ldr	r2, [pc, #196]	; (1f0d8 <__aeabi_fsub+0x334>)
   1f012:	000c      	movs	r4, r1
   1f014:	4013      	ands	r3, r2
   1f016:	e70b      	b.n	1ee30 <__aeabi_fsub+0x8c>
   1f018:	2c00      	cmp	r4, #0
   1f01a:	d11e      	bne.n	1f05a <__aeabi_fsub+0x2b6>
   1f01c:	2b00      	cmp	r3, #0
   1f01e:	d12f      	bne.n	1f080 <__aeabi_fsub+0x2dc>
   1f020:	2e00      	cmp	r6, #0
   1f022:	d04f      	beq.n	1f0c4 <__aeabi_fsub+0x320>
   1f024:	0033      	movs	r3, r6
   1f026:	000d      	movs	r5, r1
   1f028:	e702      	b.n	1ee30 <__aeabi_fsub+0x8c>
   1f02a:	2601      	movs	r6, #1
   1f02c:	e755      	b.n	1eeda <__aeabi_fsub+0x136>
   1f02e:	2c00      	cmp	r4, #0
   1f030:	d11f      	bne.n	1f072 <__aeabi_fsub+0x2ce>
   1f032:	2b00      	cmp	r3, #0
   1f034:	d043      	beq.n	1f0be <__aeabi_fsub+0x31a>
   1f036:	43c9      	mvns	r1, r1
   1f038:	2900      	cmp	r1, #0
   1f03a:	d00b      	beq.n	1f054 <__aeabi_fsub+0x2b0>
   1f03c:	28ff      	cmp	r0, #255	; 0xff
   1f03e:	d039      	beq.n	1f0b4 <__aeabi_fsub+0x310>
   1f040:	291b      	cmp	r1, #27
   1f042:	dc44      	bgt.n	1f0ce <__aeabi_fsub+0x32a>
   1f044:	001c      	movs	r4, r3
   1f046:	2720      	movs	r7, #32
   1f048:	40cc      	lsrs	r4, r1
   1f04a:	1a79      	subs	r1, r7, r1
   1f04c:	408b      	lsls	r3, r1
   1f04e:	1e59      	subs	r1, r3, #1
   1f050:	418b      	sbcs	r3, r1
   1f052:	4323      	orrs	r3, r4
   1f054:	199b      	adds	r3, r3, r6
   1f056:	0004      	movs	r4, r0
   1f058:	e740      	b.n	1eedc <__aeabi_fsub+0x138>
   1f05a:	2b00      	cmp	r3, #0
   1f05c:	d11a      	bne.n	1f094 <__aeabi_fsub+0x2f0>
   1f05e:	2e00      	cmp	r6, #0
   1f060:	d124      	bne.n	1f0ac <__aeabi_fsub+0x308>
   1f062:	2780      	movs	r7, #128	; 0x80
   1f064:	2200      	movs	r2, #0
   1f066:	03ff      	lsls	r7, r7, #15
   1f068:	e71b      	b.n	1eea2 <__aeabi_fsub+0xfe>
   1f06a:	0033      	movs	r3, r6
   1f06c:	0004      	movs	r4, r0
   1f06e:	000d      	movs	r5, r1
   1f070:	e6de      	b.n	1ee30 <__aeabi_fsub+0x8c>
   1f072:	28ff      	cmp	r0, #255	; 0xff
   1f074:	d01e      	beq.n	1f0b4 <__aeabi_fsub+0x310>
   1f076:	2480      	movs	r4, #128	; 0x80
   1f078:	04e4      	lsls	r4, r4, #19
   1f07a:	4249      	negs	r1, r1
   1f07c:	4323      	orrs	r3, r4
   1f07e:	e7df      	b.n	1f040 <__aeabi_fsub+0x29c>
   1f080:	2e00      	cmp	r6, #0
   1f082:	d100      	bne.n	1f086 <__aeabi_fsub+0x2e2>
   1f084:	e6d4      	b.n	1ee30 <__aeabi_fsub+0x8c>
   1f086:	1b9f      	subs	r7, r3, r6
   1f088:	017a      	lsls	r2, r7, #5
   1f08a:	d400      	bmi.n	1f08e <__aeabi_fsub+0x2ea>
   1f08c:	e737      	b.n	1eefe <__aeabi_fsub+0x15a>
   1f08e:	1af3      	subs	r3, r6, r3
   1f090:	000d      	movs	r5, r1
   1f092:	e6cd      	b.n	1ee30 <__aeabi_fsub+0x8c>
   1f094:	24ff      	movs	r4, #255	; 0xff
   1f096:	2e00      	cmp	r6, #0
   1f098:	d100      	bne.n	1f09c <__aeabi_fsub+0x2f8>
   1f09a:	e6c9      	b.n	1ee30 <__aeabi_fsub+0x8c>
   1f09c:	2280      	movs	r2, #128	; 0x80
   1f09e:	4650      	mov	r0, sl
   1f0a0:	03d2      	lsls	r2, r2, #15
   1f0a2:	4210      	tst	r0, r2
   1f0a4:	d0a4      	beq.n	1eff0 <__aeabi_fsub+0x24c>
   1f0a6:	4660      	mov	r0, ip
   1f0a8:	4210      	tst	r0, r2
   1f0aa:	d1a1      	bne.n	1eff0 <__aeabi_fsub+0x24c>
   1f0ac:	0033      	movs	r3, r6
   1f0ae:	000d      	movs	r5, r1
   1f0b0:	24ff      	movs	r4, #255	; 0xff
   1f0b2:	e6bd      	b.n	1ee30 <__aeabi_fsub+0x8c>
   1f0b4:	0033      	movs	r3, r6
   1f0b6:	24ff      	movs	r4, #255	; 0xff
   1f0b8:	e6ba      	b.n	1ee30 <__aeabi_fsub+0x8c>
   1f0ba:	2301      	movs	r3, #1
   1f0bc:	e76e      	b.n	1ef9c <__aeabi_fsub+0x1f8>
   1f0be:	0033      	movs	r3, r6
   1f0c0:	0004      	movs	r4, r0
   1f0c2:	e6b5      	b.n	1ee30 <__aeabi_fsub+0x8c>
   1f0c4:	2700      	movs	r7, #0
   1f0c6:	2200      	movs	r2, #0
   1f0c8:	e71c      	b.n	1ef04 <__aeabi_fsub+0x160>
   1f0ca:	0033      	movs	r3, r6
   1f0cc:	e6b0      	b.n	1ee30 <__aeabi_fsub+0x8c>
   1f0ce:	2301      	movs	r3, #1
   1f0d0:	e7c0      	b.n	1f054 <__aeabi_fsub+0x2b0>
   1f0d2:	46c0      	nop			; (mov r8, r8)
   1f0d4:	7dffffff 	.word	0x7dffffff
   1f0d8:	fbffffff 	.word	0xfbffffff

0001f0dc <__aeabi_f2iz>:
   1f0dc:	0241      	lsls	r1, r0, #9
   1f0de:	0043      	lsls	r3, r0, #1
   1f0e0:	0fc2      	lsrs	r2, r0, #31
   1f0e2:	0a49      	lsrs	r1, r1, #9
   1f0e4:	0e1b      	lsrs	r3, r3, #24
   1f0e6:	2000      	movs	r0, #0
   1f0e8:	2b7e      	cmp	r3, #126	; 0x7e
   1f0ea:	dd0d      	ble.n	1f108 <__aeabi_f2iz+0x2c>
   1f0ec:	2b9d      	cmp	r3, #157	; 0x9d
   1f0ee:	dc0c      	bgt.n	1f10a <__aeabi_f2iz+0x2e>
   1f0f0:	2080      	movs	r0, #128	; 0x80
   1f0f2:	0400      	lsls	r0, r0, #16
   1f0f4:	4301      	orrs	r1, r0
   1f0f6:	2b95      	cmp	r3, #149	; 0x95
   1f0f8:	dc0a      	bgt.n	1f110 <__aeabi_f2iz+0x34>
   1f0fa:	2096      	movs	r0, #150	; 0x96
   1f0fc:	1ac3      	subs	r3, r0, r3
   1f0fe:	40d9      	lsrs	r1, r3
   1f100:	4248      	negs	r0, r1
   1f102:	2a00      	cmp	r2, #0
   1f104:	d100      	bne.n	1f108 <__aeabi_f2iz+0x2c>
   1f106:	0008      	movs	r0, r1
   1f108:	4770      	bx	lr
   1f10a:	4b03      	ldr	r3, [pc, #12]	; (1f118 <__aeabi_f2iz+0x3c>)
   1f10c:	18d0      	adds	r0, r2, r3
   1f10e:	e7fb      	b.n	1f108 <__aeabi_f2iz+0x2c>
   1f110:	3b96      	subs	r3, #150	; 0x96
   1f112:	4099      	lsls	r1, r3
   1f114:	e7f4      	b.n	1f100 <__aeabi_f2iz+0x24>
   1f116:	46c0      	nop			; (mov r8, r8)
   1f118:	7fffffff 	.word	0x7fffffff

0001f11c <__aeabi_i2f>:
   1f11c:	b570      	push	{r4, r5, r6, lr}
   1f11e:	2800      	cmp	r0, #0
   1f120:	d030      	beq.n	1f184 <__aeabi_i2f+0x68>
   1f122:	17c3      	asrs	r3, r0, #31
   1f124:	18c4      	adds	r4, r0, r3
   1f126:	405c      	eors	r4, r3
   1f128:	0fc5      	lsrs	r5, r0, #31
   1f12a:	0020      	movs	r0, r4
   1f12c:	f7ff f8fa 	bl	1e324 <__clzsi2>
   1f130:	239e      	movs	r3, #158	; 0x9e
   1f132:	1a1b      	subs	r3, r3, r0
   1f134:	2b96      	cmp	r3, #150	; 0x96
   1f136:	dc0d      	bgt.n	1f154 <__aeabi_i2f+0x38>
   1f138:	2296      	movs	r2, #150	; 0x96
   1f13a:	1ad2      	subs	r2, r2, r3
   1f13c:	4094      	lsls	r4, r2
   1f13e:	002a      	movs	r2, r5
   1f140:	0264      	lsls	r4, r4, #9
   1f142:	0a64      	lsrs	r4, r4, #9
   1f144:	b2db      	uxtb	r3, r3
   1f146:	0264      	lsls	r4, r4, #9
   1f148:	05db      	lsls	r3, r3, #23
   1f14a:	0a60      	lsrs	r0, r4, #9
   1f14c:	07d2      	lsls	r2, r2, #31
   1f14e:	4318      	orrs	r0, r3
   1f150:	4310      	orrs	r0, r2
   1f152:	bd70      	pop	{r4, r5, r6, pc}
   1f154:	2b99      	cmp	r3, #153	; 0x99
   1f156:	dc19      	bgt.n	1f18c <__aeabi_i2f+0x70>
   1f158:	2299      	movs	r2, #153	; 0x99
   1f15a:	1ad2      	subs	r2, r2, r3
   1f15c:	2a00      	cmp	r2, #0
   1f15e:	dd29      	ble.n	1f1b4 <__aeabi_i2f+0x98>
   1f160:	4094      	lsls	r4, r2
   1f162:	0022      	movs	r2, r4
   1f164:	4c14      	ldr	r4, [pc, #80]	; (1f1b8 <__aeabi_i2f+0x9c>)
   1f166:	4014      	ands	r4, r2
   1f168:	0751      	lsls	r1, r2, #29
   1f16a:	d004      	beq.n	1f176 <__aeabi_i2f+0x5a>
   1f16c:	210f      	movs	r1, #15
   1f16e:	400a      	ands	r2, r1
   1f170:	2a04      	cmp	r2, #4
   1f172:	d000      	beq.n	1f176 <__aeabi_i2f+0x5a>
   1f174:	3404      	adds	r4, #4
   1f176:	0162      	lsls	r2, r4, #5
   1f178:	d413      	bmi.n	1f1a2 <__aeabi_i2f+0x86>
   1f17a:	01a4      	lsls	r4, r4, #6
   1f17c:	0a64      	lsrs	r4, r4, #9
   1f17e:	b2db      	uxtb	r3, r3
   1f180:	002a      	movs	r2, r5
   1f182:	e7e0      	b.n	1f146 <__aeabi_i2f+0x2a>
   1f184:	2200      	movs	r2, #0
   1f186:	2300      	movs	r3, #0
   1f188:	2400      	movs	r4, #0
   1f18a:	e7dc      	b.n	1f146 <__aeabi_i2f+0x2a>
   1f18c:	2205      	movs	r2, #5
   1f18e:	0021      	movs	r1, r4
   1f190:	1a12      	subs	r2, r2, r0
   1f192:	40d1      	lsrs	r1, r2
   1f194:	22b9      	movs	r2, #185	; 0xb9
   1f196:	1ad2      	subs	r2, r2, r3
   1f198:	4094      	lsls	r4, r2
   1f19a:	1e62      	subs	r2, r4, #1
   1f19c:	4194      	sbcs	r4, r2
   1f19e:	430c      	orrs	r4, r1
   1f1a0:	e7da      	b.n	1f158 <__aeabi_i2f+0x3c>
   1f1a2:	4b05      	ldr	r3, [pc, #20]	; (1f1b8 <__aeabi_i2f+0x9c>)
   1f1a4:	002a      	movs	r2, r5
   1f1a6:	401c      	ands	r4, r3
   1f1a8:	239f      	movs	r3, #159	; 0x9f
   1f1aa:	01a4      	lsls	r4, r4, #6
   1f1ac:	1a1b      	subs	r3, r3, r0
   1f1ae:	0a64      	lsrs	r4, r4, #9
   1f1b0:	b2db      	uxtb	r3, r3
   1f1b2:	e7c8      	b.n	1f146 <__aeabi_i2f+0x2a>
   1f1b4:	0022      	movs	r2, r4
   1f1b6:	e7d5      	b.n	1f164 <__aeabi_i2f+0x48>
   1f1b8:	fbffffff 	.word	0xfbffffff

0001f1bc <__aeabi_ui2f>:
   1f1bc:	b510      	push	{r4, lr}
   1f1be:	1e04      	subs	r4, r0, #0
   1f1c0:	d027      	beq.n	1f212 <__aeabi_ui2f+0x56>
   1f1c2:	f7ff f8af 	bl	1e324 <__clzsi2>
   1f1c6:	239e      	movs	r3, #158	; 0x9e
   1f1c8:	1a1b      	subs	r3, r3, r0
   1f1ca:	2b96      	cmp	r3, #150	; 0x96
   1f1cc:	dc0a      	bgt.n	1f1e4 <__aeabi_ui2f+0x28>
   1f1ce:	2296      	movs	r2, #150	; 0x96
   1f1d0:	1ad2      	subs	r2, r2, r3
   1f1d2:	4094      	lsls	r4, r2
   1f1d4:	0264      	lsls	r4, r4, #9
   1f1d6:	0a64      	lsrs	r4, r4, #9
   1f1d8:	b2db      	uxtb	r3, r3
   1f1da:	0264      	lsls	r4, r4, #9
   1f1dc:	05db      	lsls	r3, r3, #23
   1f1de:	0a60      	lsrs	r0, r4, #9
   1f1e0:	4318      	orrs	r0, r3
   1f1e2:	bd10      	pop	{r4, pc}
   1f1e4:	2b99      	cmp	r3, #153	; 0x99
   1f1e6:	dc17      	bgt.n	1f218 <__aeabi_ui2f+0x5c>
   1f1e8:	2299      	movs	r2, #153	; 0x99
   1f1ea:	1ad2      	subs	r2, r2, r3
   1f1ec:	2a00      	cmp	r2, #0
   1f1ee:	dd27      	ble.n	1f240 <__aeabi_ui2f+0x84>
   1f1f0:	4094      	lsls	r4, r2
   1f1f2:	0022      	movs	r2, r4
   1f1f4:	4c13      	ldr	r4, [pc, #76]	; (1f244 <__aeabi_ui2f+0x88>)
   1f1f6:	4014      	ands	r4, r2
   1f1f8:	0751      	lsls	r1, r2, #29
   1f1fa:	d004      	beq.n	1f206 <__aeabi_ui2f+0x4a>
   1f1fc:	210f      	movs	r1, #15
   1f1fe:	400a      	ands	r2, r1
   1f200:	2a04      	cmp	r2, #4
   1f202:	d000      	beq.n	1f206 <__aeabi_ui2f+0x4a>
   1f204:	3404      	adds	r4, #4
   1f206:	0162      	lsls	r2, r4, #5
   1f208:	d412      	bmi.n	1f230 <__aeabi_ui2f+0x74>
   1f20a:	01a4      	lsls	r4, r4, #6
   1f20c:	0a64      	lsrs	r4, r4, #9
   1f20e:	b2db      	uxtb	r3, r3
   1f210:	e7e3      	b.n	1f1da <__aeabi_ui2f+0x1e>
   1f212:	2300      	movs	r3, #0
   1f214:	2400      	movs	r4, #0
   1f216:	e7e0      	b.n	1f1da <__aeabi_ui2f+0x1e>
   1f218:	22b9      	movs	r2, #185	; 0xb9
   1f21a:	0021      	movs	r1, r4
   1f21c:	1ad2      	subs	r2, r2, r3
   1f21e:	4091      	lsls	r1, r2
   1f220:	000a      	movs	r2, r1
   1f222:	1e51      	subs	r1, r2, #1
   1f224:	418a      	sbcs	r2, r1
   1f226:	2105      	movs	r1, #5
   1f228:	1a09      	subs	r1, r1, r0
   1f22a:	40cc      	lsrs	r4, r1
   1f22c:	4314      	orrs	r4, r2
   1f22e:	e7db      	b.n	1f1e8 <__aeabi_ui2f+0x2c>
   1f230:	4b04      	ldr	r3, [pc, #16]	; (1f244 <__aeabi_ui2f+0x88>)
   1f232:	401c      	ands	r4, r3
   1f234:	239f      	movs	r3, #159	; 0x9f
   1f236:	01a4      	lsls	r4, r4, #6
   1f238:	1a1b      	subs	r3, r3, r0
   1f23a:	0a64      	lsrs	r4, r4, #9
   1f23c:	b2db      	uxtb	r3, r3
   1f23e:	e7cc      	b.n	1f1da <__aeabi_ui2f+0x1e>
   1f240:	0022      	movs	r2, r4
   1f242:	e7d7      	b.n	1f1f4 <__aeabi_ui2f+0x38>
   1f244:	fbffffff 	.word	0xfbffffff

0001f248 <__aeabi_dadd>:
   1f248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f24a:	4645      	mov	r5, r8
   1f24c:	46de      	mov	lr, fp
   1f24e:	4657      	mov	r7, sl
   1f250:	464e      	mov	r6, r9
   1f252:	030c      	lsls	r4, r1, #12
   1f254:	b5e0      	push	{r5, r6, r7, lr}
   1f256:	004e      	lsls	r6, r1, #1
   1f258:	0fc9      	lsrs	r1, r1, #31
   1f25a:	4688      	mov	r8, r1
   1f25c:	000d      	movs	r5, r1
   1f25e:	0a61      	lsrs	r1, r4, #9
   1f260:	0f44      	lsrs	r4, r0, #29
   1f262:	430c      	orrs	r4, r1
   1f264:	00c7      	lsls	r7, r0, #3
   1f266:	0319      	lsls	r1, r3, #12
   1f268:	0058      	lsls	r0, r3, #1
   1f26a:	0fdb      	lsrs	r3, r3, #31
   1f26c:	469b      	mov	fp, r3
   1f26e:	0a4b      	lsrs	r3, r1, #9
   1f270:	0f51      	lsrs	r1, r2, #29
   1f272:	430b      	orrs	r3, r1
   1f274:	0d76      	lsrs	r6, r6, #21
   1f276:	0d40      	lsrs	r0, r0, #21
   1f278:	0019      	movs	r1, r3
   1f27a:	00d2      	lsls	r2, r2, #3
   1f27c:	45d8      	cmp	r8, fp
   1f27e:	d100      	bne.n	1f282 <__aeabi_dadd+0x3a>
   1f280:	e0ae      	b.n	1f3e0 <__aeabi_dadd+0x198>
   1f282:	1a35      	subs	r5, r6, r0
   1f284:	2d00      	cmp	r5, #0
   1f286:	dc00      	bgt.n	1f28a <__aeabi_dadd+0x42>
   1f288:	e0f6      	b.n	1f478 <__aeabi_dadd+0x230>
   1f28a:	2800      	cmp	r0, #0
   1f28c:	d10f      	bne.n	1f2ae <__aeabi_dadd+0x66>
   1f28e:	4313      	orrs	r3, r2
   1f290:	d100      	bne.n	1f294 <__aeabi_dadd+0x4c>
   1f292:	e0db      	b.n	1f44c <__aeabi_dadd+0x204>
   1f294:	1e6b      	subs	r3, r5, #1
   1f296:	2b00      	cmp	r3, #0
   1f298:	d000      	beq.n	1f29c <__aeabi_dadd+0x54>
   1f29a:	e137      	b.n	1f50c <__aeabi_dadd+0x2c4>
   1f29c:	1aba      	subs	r2, r7, r2
   1f29e:	4297      	cmp	r7, r2
   1f2a0:	41bf      	sbcs	r7, r7
   1f2a2:	1a64      	subs	r4, r4, r1
   1f2a4:	427f      	negs	r7, r7
   1f2a6:	1be4      	subs	r4, r4, r7
   1f2a8:	2601      	movs	r6, #1
   1f2aa:	0017      	movs	r7, r2
   1f2ac:	e024      	b.n	1f2f8 <__aeabi_dadd+0xb0>
   1f2ae:	4bc6      	ldr	r3, [pc, #792]	; (1f5c8 <__aeabi_dadd+0x380>)
   1f2b0:	429e      	cmp	r6, r3
   1f2b2:	d04d      	beq.n	1f350 <__aeabi_dadd+0x108>
   1f2b4:	2380      	movs	r3, #128	; 0x80
   1f2b6:	041b      	lsls	r3, r3, #16
   1f2b8:	4319      	orrs	r1, r3
   1f2ba:	2d38      	cmp	r5, #56	; 0x38
   1f2bc:	dd00      	ble.n	1f2c0 <__aeabi_dadd+0x78>
   1f2be:	e107      	b.n	1f4d0 <__aeabi_dadd+0x288>
   1f2c0:	2d1f      	cmp	r5, #31
   1f2c2:	dd00      	ble.n	1f2c6 <__aeabi_dadd+0x7e>
   1f2c4:	e138      	b.n	1f538 <__aeabi_dadd+0x2f0>
   1f2c6:	2020      	movs	r0, #32
   1f2c8:	1b43      	subs	r3, r0, r5
   1f2ca:	469a      	mov	sl, r3
   1f2cc:	000b      	movs	r3, r1
   1f2ce:	4650      	mov	r0, sl
   1f2d0:	4083      	lsls	r3, r0
   1f2d2:	4699      	mov	r9, r3
   1f2d4:	0013      	movs	r3, r2
   1f2d6:	4648      	mov	r0, r9
   1f2d8:	40eb      	lsrs	r3, r5
   1f2da:	4318      	orrs	r0, r3
   1f2dc:	0003      	movs	r3, r0
   1f2de:	4650      	mov	r0, sl
   1f2e0:	4082      	lsls	r2, r0
   1f2e2:	1e50      	subs	r0, r2, #1
   1f2e4:	4182      	sbcs	r2, r0
   1f2e6:	40e9      	lsrs	r1, r5
   1f2e8:	431a      	orrs	r2, r3
   1f2ea:	1aba      	subs	r2, r7, r2
   1f2ec:	1a61      	subs	r1, r4, r1
   1f2ee:	4297      	cmp	r7, r2
   1f2f0:	41a4      	sbcs	r4, r4
   1f2f2:	0017      	movs	r7, r2
   1f2f4:	4264      	negs	r4, r4
   1f2f6:	1b0c      	subs	r4, r1, r4
   1f2f8:	0223      	lsls	r3, r4, #8
   1f2fa:	d562      	bpl.n	1f3c2 <__aeabi_dadd+0x17a>
   1f2fc:	0264      	lsls	r4, r4, #9
   1f2fe:	0a65      	lsrs	r5, r4, #9
   1f300:	2d00      	cmp	r5, #0
   1f302:	d100      	bne.n	1f306 <__aeabi_dadd+0xbe>
   1f304:	e0df      	b.n	1f4c6 <__aeabi_dadd+0x27e>
   1f306:	0028      	movs	r0, r5
   1f308:	f7ff f80c 	bl	1e324 <__clzsi2>
   1f30c:	0003      	movs	r3, r0
   1f30e:	3b08      	subs	r3, #8
   1f310:	2b1f      	cmp	r3, #31
   1f312:	dd00      	ble.n	1f316 <__aeabi_dadd+0xce>
   1f314:	e0d2      	b.n	1f4bc <__aeabi_dadd+0x274>
   1f316:	2220      	movs	r2, #32
   1f318:	003c      	movs	r4, r7
   1f31a:	1ad2      	subs	r2, r2, r3
   1f31c:	409d      	lsls	r5, r3
   1f31e:	40d4      	lsrs	r4, r2
   1f320:	409f      	lsls	r7, r3
   1f322:	4325      	orrs	r5, r4
   1f324:	429e      	cmp	r6, r3
   1f326:	dd00      	ble.n	1f32a <__aeabi_dadd+0xe2>
   1f328:	e0c4      	b.n	1f4b4 <__aeabi_dadd+0x26c>
   1f32a:	1b9e      	subs	r6, r3, r6
   1f32c:	1c73      	adds	r3, r6, #1
   1f32e:	2b1f      	cmp	r3, #31
   1f330:	dd00      	ble.n	1f334 <__aeabi_dadd+0xec>
   1f332:	e0f1      	b.n	1f518 <__aeabi_dadd+0x2d0>
   1f334:	2220      	movs	r2, #32
   1f336:	0038      	movs	r0, r7
   1f338:	0029      	movs	r1, r5
   1f33a:	1ad2      	subs	r2, r2, r3
   1f33c:	40d8      	lsrs	r0, r3
   1f33e:	4091      	lsls	r1, r2
   1f340:	4097      	lsls	r7, r2
   1f342:	002c      	movs	r4, r5
   1f344:	4301      	orrs	r1, r0
   1f346:	1e78      	subs	r0, r7, #1
   1f348:	4187      	sbcs	r7, r0
   1f34a:	40dc      	lsrs	r4, r3
   1f34c:	2600      	movs	r6, #0
   1f34e:	430f      	orrs	r7, r1
   1f350:	077b      	lsls	r3, r7, #29
   1f352:	d009      	beq.n	1f368 <__aeabi_dadd+0x120>
   1f354:	230f      	movs	r3, #15
   1f356:	403b      	ands	r3, r7
   1f358:	2b04      	cmp	r3, #4
   1f35a:	d005      	beq.n	1f368 <__aeabi_dadd+0x120>
   1f35c:	1d3b      	adds	r3, r7, #4
   1f35e:	42bb      	cmp	r3, r7
   1f360:	41bf      	sbcs	r7, r7
   1f362:	427f      	negs	r7, r7
   1f364:	19e4      	adds	r4, r4, r7
   1f366:	001f      	movs	r7, r3
   1f368:	0223      	lsls	r3, r4, #8
   1f36a:	d52c      	bpl.n	1f3c6 <__aeabi_dadd+0x17e>
   1f36c:	4b96      	ldr	r3, [pc, #600]	; (1f5c8 <__aeabi_dadd+0x380>)
   1f36e:	3601      	adds	r6, #1
   1f370:	429e      	cmp	r6, r3
   1f372:	d100      	bne.n	1f376 <__aeabi_dadd+0x12e>
   1f374:	e09a      	b.n	1f4ac <__aeabi_dadd+0x264>
   1f376:	4645      	mov	r5, r8
   1f378:	4b94      	ldr	r3, [pc, #592]	; (1f5cc <__aeabi_dadd+0x384>)
   1f37a:	08ff      	lsrs	r7, r7, #3
   1f37c:	401c      	ands	r4, r3
   1f37e:	0760      	lsls	r0, r4, #29
   1f380:	0576      	lsls	r6, r6, #21
   1f382:	0264      	lsls	r4, r4, #9
   1f384:	4307      	orrs	r7, r0
   1f386:	0b24      	lsrs	r4, r4, #12
   1f388:	0d76      	lsrs	r6, r6, #21
   1f38a:	2100      	movs	r1, #0
   1f38c:	0324      	lsls	r4, r4, #12
   1f38e:	0b23      	lsrs	r3, r4, #12
   1f390:	0d0c      	lsrs	r4, r1, #20
   1f392:	4a8f      	ldr	r2, [pc, #572]	; (1f5d0 <__aeabi_dadd+0x388>)
   1f394:	0524      	lsls	r4, r4, #20
   1f396:	431c      	orrs	r4, r3
   1f398:	4014      	ands	r4, r2
   1f39a:	0533      	lsls	r3, r6, #20
   1f39c:	4323      	orrs	r3, r4
   1f39e:	005b      	lsls	r3, r3, #1
   1f3a0:	07ed      	lsls	r5, r5, #31
   1f3a2:	085b      	lsrs	r3, r3, #1
   1f3a4:	432b      	orrs	r3, r5
   1f3a6:	0038      	movs	r0, r7
   1f3a8:	0019      	movs	r1, r3
   1f3aa:	bc3c      	pop	{r2, r3, r4, r5}
   1f3ac:	4690      	mov	r8, r2
   1f3ae:	4699      	mov	r9, r3
   1f3b0:	46a2      	mov	sl, r4
   1f3b2:	46ab      	mov	fp, r5
   1f3b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f3b6:	4664      	mov	r4, ip
   1f3b8:	4304      	orrs	r4, r0
   1f3ba:	d100      	bne.n	1f3be <__aeabi_dadd+0x176>
   1f3bc:	e211      	b.n	1f7e2 <__aeabi_dadd+0x59a>
   1f3be:	0004      	movs	r4, r0
   1f3c0:	4667      	mov	r7, ip
   1f3c2:	077b      	lsls	r3, r7, #29
   1f3c4:	d1c6      	bne.n	1f354 <__aeabi_dadd+0x10c>
   1f3c6:	4645      	mov	r5, r8
   1f3c8:	0760      	lsls	r0, r4, #29
   1f3ca:	08ff      	lsrs	r7, r7, #3
   1f3cc:	4307      	orrs	r7, r0
   1f3ce:	08e4      	lsrs	r4, r4, #3
   1f3d0:	4b7d      	ldr	r3, [pc, #500]	; (1f5c8 <__aeabi_dadd+0x380>)
   1f3d2:	429e      	cmp	r6, r3
   1f3d4:	d030      	beq.n	1f438 <__aeabi_dadd+0x1f0>
   1f3d6:	0324      	lsls	r4, r4, #12
   1f3d8:	0576      	lsls	r6, r6, #21
   1f3da:	0b24      	lsrs	r4, r4, #12
   1f3dc:	0d76      	lsrs	r6, r6, #21
   1f3de:	e7d4      	b.n	1f38a <__aeabi_dadd+0x142>
   1f3e0:	1a33      	subs	r3, r6, r0
   1f3e2:	469a      	mov	sl, r3
   1f3e4:	2b00      	cmp	r3, #0
   1f3e6:	dd78      	ble.n	1f4da <__aeabi_dadd+0x292>
   1f3e8:	2800      	cmp	r0, #0
   1f3ea:	d031      	beq.n	1f450 <__aeabi_dadd+0x208>
   1f3ec:	4876      	ldr	r0, [pc, #472]	; (1f5c8 <__aeabi_dadd+0x380>)
   1f3ee:	4286      	cmp	r6, r0
   1f3f0:	d0ae      	beq.n	1f350 <__aeabi_dadd+0x108>
   1f3f2:	2080      	movs	r0, #128	; 0x80
   1f3f4:	0400      	lsls	r0, r0, #16
   1f3f6:	4301      	orrs	r1, r0
   1f3f8:	4653      	mov	r3, sl
   1f3fa:	2b38      	cmp	r3, #56	; 0x38
   1f3fc:	dc00      	bgt.n	1f400 <__aeabi_dadd+0x1b8>
   1f3fe:	e0e9      	b.n	1f5d4 <__aeabi_dadd+0x38c>
   1f400:	430a      	orrs	r2, r1
   1f402:	1e51      	subs	r1, r2, #1
   1f404:	418a      	sbcs	r2, r1
   1f406:	2100      	movs	r1, #0
   1f408:	19d2      	adds	r2, r2, r7
   1f40a:	42ba      	cmp	r2, r7
   1f40c:	41bf      	sbcs	r7, r7
   1f40e:	1909      	adds	r1, r1, r4
   1f410:	427c      	negs	r4, r7
   1f412:	0017      	movs	r7, r2
   1f414:	190c      	adds	r4, r1, r4
   1f416:	0223      	lsls	r3, r4, #8
   1f418:	d5d3      	bpl.n	1f3c2 <__aeabi_dadd+0x17a>
   1f41a:	4b6b      	ldr	r3, [pc, #428]	; (1f5c8 <__aeabi_dadd+0x380>)
   1f41c:	3601      	adds	r6, #1
   1f41e:	429e      	cmp	r6, r3
   1f420:	d100      	bne.n	1f424 <__aeabi_dadd+0x1dc>
   1f422:	e13a      	b.n	1f69a <__aeabi_dadd+0x452>
   1f424:	2001      	movs	r0, #1
   1f426:	4b69      	ldr	r3, [pc, #420]	; (1f5cc <__aeabi_dadd+0x384>)
   1f428:	401c      	ands	r4, r3
   1f42a:	087b      	lsrs	r3, r7, #1
   1f42c:	4007      	ands	r7, r0
   1f42e:	431f      	orrs	r7, r3
   1f430:	07e0      	lsls	r0, r4, #31
   1f432:	4307      	orrs	r7, r0
   1f434:	0864      	lsrs	r4, r4, #1
   1f436:	e78b      	b.n	1f350 <__aeabi_dadd+0x108>
   1f438:	0023      	movs	r3, r4
   1f43a:	433b      	orrs	r3, r7
   1f43c:	d100      	bne.n	1f440 <__aeabi_dadd+0x1f8>
   1f43e:	e1cb      	b.n	1f7d8 <__aeabi_dadd+0x590>
   1f440:	2280      	movs	r2, #128	; 0x80
   1f442:	0312      	lsls	r2, r2, #12
   1f444:	4314      	orrs	r4, r2
   1f446:	0324      	lsls	r4, r4, #12
   1f448:	0b24      	lsrs	r4, r4, #12
   1f44a:	e79e      	b.n	1f38a <__aeabi_dadd+0x142>
   1f44c:	002e      	movs	r6, r5
   1f44e:	e77f      	b.n	1f350 <__aeabi_dadd+0x108>
   1f450:	0008      	movs	r0, r1
   1f452:	4310      	orrs	r0, r2
   1f454:	d100      	bne.n	1f458 <__aeabi_dadd+0x210>
   1f456:	e0b4      	b.n	1f5c2 <__aeabi_dadd+0x37a>
   1f458:	1e58      	subs	r0, r3, #1
   1f45a:	2800      	cmp	r0, #0
   1f45c:	d000      	beq.n	1f460 <__aeabi_dadd+0x218>
   1f45e:	e0de      	b.n	1f61e <__aeabi_dadd+0x3d6>
   1f460:	18ba      	adds	r2, r7, r2
   1f462:	42ba      	cmp	r2, r7
   1f464:	419b      	sbcs	r3, r3
   1f466:	1864      	adds	r4, r4, r1
   1f468:	425b      	negs	r3, r3
   1f46a:	18e4      	adds	r4, r4, r3
   1f46c:	0017      	movs	r7, r2
   1f46e:	2601      	movs	r6, #1
   1f470:	0223      	lsls	r3, r4, #8
   1f472:	d5a6      	bpl.n	1f3c2 <__aeabi_dadd+0x17a>
   1f474:	2602      	movs	r6, #2
   1f476:	e7d5      	b.n	1f424 <__aeabi_dadd+0x1dc>
   1f478:	2d00      	cmp	r5, #0
   1f47a:	d16e      	bne.n	1f55a <__aeabi_dadd+0x312>
   1f47c:	1c70      	adds	r0, r6, #1
   1f47e:	0540      	lsls	r0, r0, #21
   1f480:	0d40      	lsrs	r0, r0, #21
   1f482:	2801      	cmp	r0, #1
   1f484:	dc00      	bgt.n	1f488 <__aeabi_dadd+0x240>
   1f486:	e0f9      	b.n	1f67c <__aeabi_dadd+0x434>
   1f488:	1ab8      	subs	r0, r7, r2
   1f48a:	4684      	mov	ip, r0
   1f48c:	4287      	cmp	r7, r0
   1f48e:	4180      	sbcs	r0, r0
   1f490:	1ae5      	subs	r5, r4, r3
   1f492:	4240      	negs	r0, r0
   1f494:	1a2d      	subs	r5, r5, r0
   1f496:	0228      	lsls	r0, r5, #8
   1f498:	d400      	bmi.n	1f49c <__aeabi_dadd+0x254>
   1f49a:	e089      	b.n	1f5b0 <__aeabi_dadd+0x368>
   1f49c:	1bd7      	subs	r7, r2, r7
   1f49e:	42ba      	cmp	r2, r7
   1f4a0:	4192      	sbcs	r2, r2
   1f4a2:	1b1c      	subs	r4, r3, r4
   1f4a4:	4252      	negs	r2, r2
   1f4a6:	1aa5      	subs	r5, r4, r2
   1f4a8:	46d8      	mov	r8, fp
   1f4aa:	e729      	b.n	1f300 <__aeabi_dadd+0xb8>
   1f4ac:	4645      	mov	r5, r8
   1f4ae:	2400      	movs	r4, #0
   1f4b0:	2700      	movs	r7, #0
   1f4b2:	e76a      	b.n	1f38a <__aeabi_dadd+0x142>
   1f4b4:	4c45      	ldr	r4, [pc, #276]	; (1f5cc <__aeabi_dadd+0x384>)
   1f4b6:	1af6      	subs	r6, r6, r3
   1f4b8:	402c      	ands	r4, r5
   1f4ba:	e749      	b.n	1f350 <__aeabi_dadd+0x108>
   1f4bc:	003d      	movs	r5, r7
   1f4be:	3828      	subs	r0, #40	; 0x28
   1f4c0:	4085      	lsls	r5, r0
   1f4c2:	2700      	movs	r7, #0
   1f4c4:	e72e      	b.n	1f324 <__aeabi_dadd+0xdc>
   1f4c6:	0038      	movs	r0, r7
   1f4c8:	f7fe ff2c 	bl	1e324 <__clzsi2>
   1f4cc:	3020      	adds	r0, #32
   1f4ce:	e71d      	b.n	1f30c <__aeabi_dadd+0xc4>
   1f4d0:	430a      	orrs	r2, r1
   1f4d2:	1e51      	subs	r1, r2, #1
   1f4d4:	418a      	sbcs	r2, r1
   1f4d6:	2100      	movs	r1, #0
   1f4d8:	e707      	b.n	1f2ea <__aeabi_dadd+0xa2>
   1f4da:	2b00      	cmp	r3, #0
   1f4dc:	d000      	beq.n	1f4e0 <__aeabi_dadd+0x298>
   1f4de:	e0f3      	b.n	1f6c8 <__aeabi_dadd+0x480>
   1f4e0:	1c70      	adds	r0, r6, #1
   1f4e2:	0543      	lsls	r3, r0, #21
   1f4e4:	0d5b      	lsrs	r3, r3, #21
   1f4e6:	2b01      	cmp	r3, #1
   1f4e8:	dc00      	bgt.n	1f4ec <__aeabi_dadd+0x2a4>
   1f4ea:	e0ad      	b.n	1f648 <__aeabi_dadd+0x400>
   1f4ec:	4b36      	ldr	r3, [pc, #216]	; (1f5c8 <__aeabi_dadd+0x380>)
   1f4ee:	4298      	cmp	r0, r3
   1f4f0:	d100      	bne.n	1f4f4 <__aeabi_dadd+0x2ac>
   1f4f2:	e0d1      	b.n	1f698 <__aeabi_dadd+0x450>
   1f4f4:	18ba      	adds	r2, r7, r2
   1f4f6:	42ba      	cmp	r2, r7
   1f4f8:	41bf      	sbcs	r7, r7
   1f4fa:	1864      	adds	r4, r4, r1
   1f4fc:	427f      	negs	r7, r7
   1f4fe:	19e4      	adds	r4, r4, r7
   1f500:	07e7      	lsls	r7, r4, #31
   1f502:	0852      	lsrs	r2, r2, #1
   1f504:	4317      	orrs	r7, r2
   1f506:	0864      	lsrs	r4, r4, #1
   1f508:	0006      	movs	r6, r0
   1f50a:	e721      	b.n	1f350 <__aeabi_dadd+0x108>
   1f50c:	482e      	ldr	r0, [pc, #184]	; (1f5c8 <__aeabi_dadd+0x380>)
   1f50e:	4285      	cmp	r5, r0
   1f510:	d100      	bne.n	1f514 <__aeabi_dadd+0x2cc>
   1f512:	e093      	b.n	1f63c <__aeabi_dadd+0x3f4>
   1f514:	001d      	movs	r5, r3
   1f516:	e6d0      	b.n	1f2ba <__aeabi_dadd+0x72>
   1f518:	0029      	movs	r1, r5
   1f51a:	3e1f      	subs	r6, #31
   1f51c:	40f1      	lsrs	r1, r6
   1f51e:	2b20      	cmp	r3, #32
   1f520:	d100      	bne.n	1f524 <__aeabi_dadd+0x2dc>
   1f522:	e08d      	b.n	1f640 <__aeabi_dadd+0x3f8>
   1f524:	2240      	movs	r2, #64	; 0x40
   1f526:	1ad3      	subs	r3, r2, r3
   1f528:	409d      	lsls	r5, r3
   1f52a:	432f      	orrs	r7, r5
   1f52c:	1e7d      	subs	r5, r7, #1
   1f52e:	41af      	sbcs	r7, r5
   1f530:	2400      	movs	r4, #0
   1f532:	430f      	orrs	r7, r1
   1f534:	2600      	movs	r6, #0
   1f536:	e744      	b.n	1f3c2 <__aeabi_dadd+0x17a>
   1f538:	002b      	movs	r3, r5
   1f53a:	0008      	movs	r0, r1
   1f53c:	3b20      	subs	r3, #32
   1f53e:	40d8      	lsrs	r0, r3
   1f540:	0003      	movs	r3, r0
   1f542:	2d20      	cmp	r5, #32
   1f544:	d100      	bne.n	1f548 <__aeabi_dadd+0x300>
   1f546:	e07d      	b.n	1f644 <__aeabi_dadd+0x3fc>
   1f548:	2040      	movs	r0, #64	; 0x40
   1f54a:	1b45      	subs	r5, r0, r5
   1f54c:	40a9      	lsls	r1, r5
   1f54e:	430a      	orrs	r2, r1
   1f550:	1e51      	subs	r1, r2, #1
   1f552:	418a      	sbcs	r2, r1
   1f554:	2100      	movs	r1, #0
   1f556:	431a      	orrs	r2, r3
   1f558:	e6c7      	b.n	1f2ea <__aeabi_dadd+0xa2>
   1f55a:	2e00      	cmp	r6, #0
   1f55c:	d050      	beq.n	1f600 <__aeabi_dadd+0x3b8>
   1f55e:	4e1a      	ldr	r6, [pc, #104]	; (1f5c8 <__aeabi_dadd+0x380>)
   1f560:	42b0      	cmp	r0, r6
   1f562:	d057      	beq.n	1f614 <__aeabi_dadd+0x3cc>
   1f564:	2680      	movs	r6, #128	; 0x80
   1f566:	426b      	negs	r3, r5
   1f568:	4699      	mov	r9, r3
   1f56a:	0436      	lsls	r6, r6, #16
   1f56c:	4334      	orrs	r4, r6
   1f56e:	464b      	mov	r3, r9
   1f570:	2b38      	cmp	r3, #56	; 0x38
   1f572:	dd00      	ble.n	1f576 <__aeabi_dadd+0x32e>
   1f574:	e0d6      	b.n	1f724 <__aeabi_dadd+0x4dc>
   1f576:	2b1f      	cmp	r3, #31
   1f578:	dd00      	ble.n	1f57c <__aeabi_dadd+0x334>
   1f57a:	e135      	b.n	1f7e8 <__aeabi_dadd+0x5a0>
   1f57c:	2620      	movs	r6, #32
   1f57e:	1af5      	subs	r5, r6, r3
   1f580:	0026      	movs	r6, r4
   1f582:	40ae      	lsls	r6, r5
   1f584:	46b2      	mov	sl, r6
   1f586:	003e      	movs	r6, r7
   1f588:	40de      	lsrs	r6, r3
   1f58a:	46ac      	mov	ip, r5
   1f58c:	0035      	movs	r5, r6
   1f58e:	4656      	mov	r6, sl
   1f590:	432e      	orrs	r6, r5
   1f592:	4665      	mov	r5, ip
   1f594:	40af      	lsls	r7, r5
   1f596:	1e7d      	subs	r5, r7, #1
   1f598:	41af      	sbcs	r7, r5
   1f59a:	40dc      	lsrs	r4, r3
   1f59c:	4337      	orrs	r7, r6
   1f59e:	1bd7      	subs	r7, r2, r7
   1f5a0:	42ba      	cmp	r2, r7
   1f5a2:	4192      	sbcs	r2, r2
   1f5a4:	1b0c      	subs	r4, r1, r4
   1f5a6:	4252      	negs	r2, r2
   1f5a8:	1aa4      	subs	r4, r4, r2
   1f5aa:	0006      	movs	r6, r0
   1f5ac:	46d8      	mov	r8, fp
   1f5ae:	e6a3      	b.n	1f2f8 <__aeabi_dadd+0xb0>
   1f5b0:	4664      	mov	r4, ip
   1f5b2:	4667      	mov	r7, ip
   1f5b4:	432c      	orrs	r4, r5
   1f5b6:	d000      	beq.n	1f5ba <__aeabi_dadd+0x372>
   1f5b8:	e6a2      	b.n	1f300 <__aeabi_dadd+0xb8>
   1f5ba:	2500      	movs	r5, #0
   1f5bc:	2600      	movs	r6, #0
   1f5be:	2700      	movs	r7, #0
   1f5c0:	e706      	b.n	1f3d0 <__aeabi_dadd+0x188>
   1f5c2:	001e      	movs	r6, r3
   1f5c4:	e6c4      	b.n	1f350 <__aeabi_dadd+0x108>
   1f5c6:	46c0      	nop			; (mov r8, r8)
   1f5c8:	000007ff 	.word	0x000007ff
   1f5cc:	ff7fffff 	.word	0xff7fffff
   1f5d0:	800fffff 	.word	0x800fffff
   1f5d4:	2b1f      	cmp	r3, #31
   1f5d6:	dc63      	bgt.n	1f6a0 <__aeabi_dadd+0x458>
   1f5d8:	2020      	movs	r0, #32
   1f5da:	1ac3      	subs	r3, r0, r3
   1f5dc:	0008      	movs	r0, r1
   1f5de:	4098      	lsls	r0, r3
   1f5e0:	469c      	mov	ip, r3
   1f5e2:	4683      	mov	fp, r0
   1f5e4:	4653      	mov	r3, sl
   1f5e6:	0010      	movs	r0, r2
   1f5e8:	40d8      	lsrs	r0, r3
   1f5ea:	0003      	movs	r3, r0
   1f5ec:	4658      	mov	r0, fp
   1f5ee:	4318      	orrs	r0, r3
   1f5f0:	4663      	mov	r3, ip
   1f5f2:	409a      	lsls	r2, r3
   1f5f4:	1e53      	subs	r3, r2, #1
   1f5f6:	419a      	sbcs	r2, r3
   1f5f8:	4653      	mov	r3, sl
   1f5fa:	4302      	orrs	r2, r0
   1f5fc:	40d9      	lsrs	r1, r3
   1f5fe:	e703      	b.n	1f408 <__aeabi_dadd+0x1c0>
   1f600:	0026      	movs	r6, r4
   1f602:	433e      	orrs	r6, r7
   1f604:	d006      	beq.n	1f614 <__aeabi_dadd+0x3cc>
   1f606:	43eb      	mvns	r3, r5
   1f608:	4699      	mov	r9, r3
   1f60a:	2b00      	cmp	r3, #0
   1f60c:	d0c7      	beq.n	1f59e <__aeabi_dadd+0x356>
   1f60e:	4e94      	ldr	r6, [pc, #592]	; (1f860 <__aeabi_dadd+0x618>)
   1f610:	42b0      	cmp	r0, r6
   1f612:	d1ac      	bne.n	1f56e <__aeabi_dadd+0x326>
   1f614:	000c      	movs	r4, r1
   1f616:	0017      	movs	r7, r2
   1f618:	0006      	movs	r6, r0
   1f61a:	46d8      	mov	r8, fp
   1f61c:	e698      	b.n	1f350 <__aeabi_dadd+0x108>
   1f61e:	4b90      	ldr	r3, [pc, #576]	; (1f860 <__aeabi_dadd+0x618>)
   1f620:	459a      	cmp	sl, r3
   1f622:	d00b      	beq.n	1f63c <__aeabi_dadd+0x3f4>
   1f624:	4682      	mov	sl, r0
   1f626:	e6e7      	b.n	1f3f8 <__aeabi_dadd+0x1b0>
   1f628:	2800      	cmp	r0, #0
   1f62a:	d000      	beq.n	1f62e <__aeabi_dadd+0x3e6>
   1f62c:	e09e      	b.n	1f76c <__aeabi_dadd+0x524>
   1f62e:	0018      	movs	r0, r3
   1f630:	4310      	orrs	r0, r2
   1f632:	d100      	bne.n	1f636 <__aeabi_dadd+0x3ee>
   1f634:	e0e9      	b.n	1f80a <__aeabi_dadd+0x5c2>
   1f636:	001c      	movs	r4, r3
   1f638:	0017      	movs	r7, r2
   1f63a:	46d8      	mov	r8, fp
   1f63c:	4e88      	ldr	r6, [pc, #544]	; (1f860 <__aeabi_dadd+0x618>)
   1f63e:	e687      	b.n	1f350 <__aeabi_dadd+0x108>
   1f640:	2500      	movs	r5, #0
   1f642:	e772      	b.n	1f52a <__aeabi_dadd+0x2e2>
   1f644:	2100      	movs	r1, #0
   1f646:	e782      	b.n	1f54e <__aeabi_dadd+0x306>
   1f648:	0023      	movs	r3, r4
   1f64a:	433b      	orrs	r3, r7
   1f64c:	2e00      	cmp	r6, #0
   1f64e:	d000      	beq.n	1f652 <__aeabi_dadd+0x40a>
   1f650:	e0ab      	b.n	1f7aa <__aeabi_dadd+0x562>
   1f652:	2b00      	cmp	r3, #0
   1f654:	d100      	bne.n	1f658 <__aeabi_dadd+0x410>
   1f656:	e0e7      	b.n	1f828 <__aeabi_dadd+0x5e0>
   1f658:	000b      	movs	r3, r1
   1f65a:	4313      	orrs	r3, r2
   1f65c:	d100      	bne.n	1f660 <__aeabi_dadd+0x418>
   1f65e:	e677      	b.n	1f350 <__aeabi_dadd+0x108>
   1f660:	18ba      	adds	r2, r7, r2
   1f662:	42ba      	cmp	r2, r7
   1f664:	41bf      	sbcs	r7, r7
   1f666:	1864      	adds	r4, r4, r1
   1f668:	427f      	negs	r7, r7
   1f66a:	19e4      	adds	r4, r4, r7
   1f66c:	0223      	lsls	r3, r4, #8
   1f66e:	d400      	bmi.n	1f672 <__aeabi_dadd+0x42a>
   1f670:	e0f2      	b.n	1f858 <__aeabi_dadd+0x610>
   1f672:	4b7c      	ldr	r3, [pc, #496]	; (1f864 <__aeabi_dadd+0x61c>)
   1f674:	0017      	movs	r7, r2
   1f676:	401c      	ands	r4, r3
   1f678:	0006      	movs	r6, r0
   1f67a:	e669      	b.n	1f350 <__aeabi_dadd+0x108>
   1f67c:	0020      	movs	r0, r4
   1f67e:	4338      	orrs	r0, r7
   1f680:	2e00      	cmp	r6, #0
   1f682:	d1d1      	bne.n	1f628 <__aeabi_dadd+0x3e0>
   1f684:	2800      	cmp	r0, #0
   1f686:	d15b      	bne.n	1f740 <__aeabi_dadd+0x4f8>
   1f688:	001c      	movs	r4, r3
   1f68a:	4314      	orrs	r4, r2
   1f68c:	d100      	bne.n	1f690 <__aeabi_dadd+0x448>
   1f68e:	e0a8      	b.n	1f7e2 <__aeabi_dadd+0x59a>
   1f690:	001c      	movs	r4, r3
   1f692:	0017      	movs	r7, r2
   1f694:	46d8      	mov	r8, fp
   1f696:	e65b      	b.n	1f350 <__aeabi_dadd+0x108>
   1f698:	0006      	movs	r6, r0
   1f69a:	2400      	movs	r4, #0
   1f69c:	2700      	movs	r7, #0
   1f69e:	e697      	b.n	1f3d0 <__aeabi_dadd+0x188>
   1f6a0:	4650      	mov	r0, sl
   1f6a2:	000b      	movs	r3, r1
   1f6a4:	3820      	subs	r0, #32
   1f6a6:	40c3      	lsrs	r3, r0
   1f6a8:	4699      	mov	r9, r3
   1f6aa:	4653      	mov	r3, sl
   1f6ac:	2b20      	cmp	r3, #32
   1f6ae:	d100      	bne.n	1f6b2 <__aeabi_dadd+0x46a>
   1f6b0:	e095      	b.n	1f7de <__aeabi_dadd+0x596>
   1f6b2:	2340      	movs	r3, #64	; 0x40
   1f6b4:	4650      	mov	r0, sl
   1f6b6:	1a1b      	subs	r3, r3, r0
   1f6b8:	4099      	lsls	r1, r3
   1f6ba:	430a      	orrs	r2, r1
   1f6bc:	1e51      	subs	r1, r2, #1
   1f6be:	418a      	sbcs	r2, r1
   1f6c0:	464b      	mov	r3, r9
   1f6c2:	2100      	movs	r1, #0
   1f6c4:	431a      	orrs	r2, r3
   1f6c6:	e69f      	b.n	1f408 <__aeabi_dadd+0x1c0>
   1f6c8:	2e00      	cmp	r6, #0
   1f6ca:	d130      	bne.n	1f72e <__aeabi_dadd+0x4e6>
   1f6cc:	0026      	movs	r6, r4
   1f6ce:	433e      	orrs	r6, r7
   1f6d0:	d067      	beq.n	1f7a2 <__aeabi_dadd+0x55a>
   1f6d2:	43db      	mvns	r3, r3
   1f6d4:	469a      	mov	sl, r3
   1f6d6:	2b00      	cmp	r3, #0
   1f6d8:	d01c      	beq.n	1f714 <__aeabi_dadd+0x4cc>
   1f6da:	4e61      	ldr	r6, [pc, #388]	; (1f860 <__aeabi_dadd+0x618>)
   1f6dc:	42b0      	cmp	r0, r6
   1f6de:	d060      	beq.n	1f7a2 <__aeabi_dadd+0x55a>
   1f6e0:	4653      	mov	r3, sl
   1f6e2:	2b38      	cmp	r3, #56	; 0x38
   1f6e4:	dd00      	ble.n	1f6e8 <__aeabi_dadd+0x4a0>
   1f6e6:	e096      	b.n	1f816 <__aeabi_dadd+0x5ce>
   1f6e8:	2b1f      	cmp	r3, #31
   1f6ea:	dd00      	ble.n	1f6ee <__aeabi_dadd+0x4a6>
   1f6ec:	e09f      	b.n	1f82e <__aeabi_dadd+0x5e6>
   1f6ee:	2620      	movs	r6, #32
   1f6f0:	1af3      	subs	r3, r6, r3
   1f6f2:	0026      	movs	r6, r4
   1f6f4:	409e      	lsls	r6, r3
   1f6f6:	469c      	mov	ip, r3
   1f6f8:	46b3      	mov	fp, r6
   1f6fa:	4653      	mov	r3, sl
   1f6fc:	003e      	movs	r6, r7
   1f6fe:	40de      	lsrs	r6, r3
   1f700:	0033      	movs	r3, r6
   1f702:	465e      	mov	r6, fp
   1f704:	431e      	orrs	r6, r3
   1f706:	4663      	mov	r3, ip
   1f708:	409f      	lsls	r7, r3
   1f70a:	1e7b      	subs	r3, r7, #1
   1f70c:	419f      	sbcs	r7, r3
   1f70e:	4653      	mov	r3, sl
   1f710:	40dc      	lsrs	r4, r3
   1f712:	4337      	orrs	r7, r6
   1f714:	18bf      	adds	r7, r7, r2
   1f716:	4297      	cmp	r7, r2
   1f718:	4192      	sbcs	r2, r2
   1f71a:	1864      	adds	r4, r4, r1
   1f71c:	4252      	negs	r2, r2
   1f71e:	18a4      	adds	r4, r4, r2
   1f720:	0006      	movs	r6, r0
   1f722:	e678      	b.n	1f416 <__aeabi_dadd+0x1ce>
   1f724:	4327      	orrs	r7, r4
   1f726:	1e7c      	subs	r4, r7, #1
   1f728:	41a7      	sbcs	r7, r4
   1f72a:	2400      	movs	r4, #0
   1f72c:	e737      	b.n	1f59e <__aeabi_dadd+0x356>
   1f72e:	4e4c      	ldr	r6, [pc, #304]	; (1f860 <__aeabi_dadd+0x618>)
   1f730:	42b0      	cmp	r0, r6
   1f732:	d036      	beq.n	1f7a2 <__aeabi_dadd+0x55a>
   1f734:	2680      	movs	r6, #128	; 0x80
   1f736:	425b      	negs	r3, r3
   1f738:	0436      	lsls	r6, r6, #16
   1f73a:	469a      	mov	sl, r3
   1f73c:	4334      	orrs	r4, r6
   1f73e:	e7cf      	b.n	1f6e0 <__aeabi_dadd+0x498>
   1f740:	0018      	movs	r0, r3
   1f742:	4310      	orrs	r0, r2
   1f744:	d100      	bne.n	1f748 <__aeabi_dadd+0x500>
   1f746:	e603      	b.n	1f350 <__aeabi_dadd+0x108>
   1f748:	1ab8      	subs	r0, r7, r2
   1f74a:	4684      	mov	ip, r0
   1f74c:	4567      	cmp	r7, ip
   1f74e:	41ad      	sbcs	r5, r5
   1f750:	1ae0      	subs	r0, r4, r3
   1f752:	426d      	negs	r5, r5
   1f754:	1b40      	subs	r0, r0, r5
   1f756:	0205      	lsls	r5, r0, #8
   1f758:	d400      	bmi.n	1f75c <__aeabi_dadd+0x514>
   1f75a:	e62c      	b.n	1f3b6 <__aeabi_dadd+0x16e>
   1f75c:	1bd7      	subs	r7, r2, r7
   1f75e:	42ba      	cmp	r2, r7
   1f760:	4192      	sbcs	r2, r2
   1f762:	1b1c      	subs	r4, r3, r4
   1f764:	4252      	negs	r2, r2
   1f766:	1aa4      	subs	r4, r4, r2
   1f768:	46d8      	mov	r8, fp
   1f76a:	e5f1      	b.n	1f350 <__aeabi_dadd+0x108>
   1f76c:	0018      	movs	r0, r3
   1f76e:	4310      	orrs	r0, r2
   1f770:	d100      	bne.n	1f774 <__aeabi_dadd+0x52c>
   1f772:	e763      	b.n	1f63c <__aeabi_dadd+0x3f4>
   1f774:	08f8      	lsrs	r0, r7, #3
   1f776:	0767      	lsls	r7, r4, #29
   1f778:	4307      	orrs	r7, r0
   1f77a:	2080      	movs	r0, #128	; 0x80
   1f77c:	08e4      	lsrs	r4, r4, #3
   1f77e:	0300      	lsls	r0, r0, #12
   1f780:	4204      	tst	r4, r0
   1f782:	d008      	beq.n	1f796 <__aeabi_dadd+0x54e>
   1f784:	08dd      	lsrs	r5, r3, #3
   1f786:	4205      	tst	r5, r0
   1f788:	d105      	bne.n	1f796 <__aeabi_dadd+0x54e>
   1f78a:	08d2      	lsrs	r2, r2, #3
   1f78c:	0759      	lsls	r1, r3, #29
   1f78e:	4311      	orrs	r1, r2
   1f790:	000f      	movs	r7, r1
   1f792:	002c      	movs	r4, r5
   1f794:	46d8      	mov	r8, fp
   1f796:	0f7b      	lsrs	r3, r7, #29
   1f798:	00e4      	lsls	r4, r4, #3
   1f79a:	431c      	orrs	r4, r3
   1f79c:	00ff      	lsls	r7, r7, #3
   1f79e:	4e30      	ldr	r6, [pc, #192]	; (1f860 <__aeabi_dadd+0x618>)
   1f7a0:	e5d6      	b.n	1f350 <__aeabi_dadd+0x108>
   1f7a2:	000c      	movs	r4, r1
   1f7a4:	0017      	movs	r7, r2
   1f7a6:	0006      	movs	r6, r0
   1f7a8:	e5d2      	b.n	1f350 <__aeabi_dadd+0x108>
   1f7aa:	2b00      	cmp	r3, #0
   1f7ac:	d038      	beq.n	1f820 <__aeabi_dadd+0x5d8>
   1f7ae:	000b      	movs	r3, r1
   1f7b0:	4313      	orrs	r3, r2
   1f7b2:	d100      	bne.n	1f7b6 <__aeabi_dadd+0x56e>
   1f7b4:	e742      	b.n	1f63c <__aeabi_dadd+0x3f4>
   1f7b6:	08f8      	lsrs	r0, r7, #3
   1f7b8:	0767      	lsls	r7, r4, #29
   1f7ba:	4307      	orrs	r7, r0
   1f7bc:	2080      	movs	r0, #128	; 0x80
   1f7be:	08e4      	lsrs	r4, r4, #3
   1f7c0:	0300      	lsls	r0, r0, #12
   1f7c2:	4204      	tst	r4, r0
   1f7c4:	d0e7      	beq.n	1f796 <__aeabi_dadd+0x54e>
   1f7c6:	08cb      	lsrs	r3, r1, #3
   1f7c8:	4203      	tst	r3, r0
   1f7ca:	d1e4      	bne.n	1f796 <__aeabi_dadd+0x54e>
   1f7cc:	08d2      	lsrs	r2, r2, #3
   1f7ce:	0749      	lsls	r1, r1, #29
   1f7d0:	4311      	orrs	r1, r2
   1f7d2:	000f      	movs	r7, r1
   1f7d4:	001c      	movs	r4, r3
   1f7d6:	e7de      	b.n	1f796 <__aeabi_dadd+0x54e>
   1f7d8:	2700      	movs	r7, #0
   1f7da:	2400      	movs	r4, #0
   1f7dc:	e5d5      	b.n	1f38a <__aeabi_dadd+0x142>
   1f7de:	2100      	movs	r1, #0
   1f7e0:	e76b      	b.n	1f6ba <__aeabi_dadd+0x472>
   1f7e2:	2500      	movs	r5, #0
   1f7e4:	2700      	movs	r7, #0
   1f7e6:	e5f3      	b.n	1f3d0 <__aeabi_dadd+0x188>
   1f7e8:	464e      	mov	r6, r9
   1f7ea:	0025      	movs	r5, r4
   1f7ec:	3e20      	subs	r6, #32
   1f7ee:	40f5      	lsrs	r5, r6
   1f7f0:	464b      	mov	r3, r9
   1f7f2:	002e      	movs	r6, r5
   1f7f4:	2b20      	cmp	r3, #32
   1f7f6:	d02d      	beq.n	1f854 <__aeabi_dadd+0x60c>
   1f7f8:	2540      	movs	r5, #64	; 0x40
   1f7fa:	1aed      	subs	r5, r5, r3
   1f7fc:	40ac      	lsls	r4, r5
   1f7fe:	4327      	orrs	r7, r4
   1f800:	1e7c      	subs	r4, r7, #1
   1f802:	41a7      	sbcs	r7, r4
   1f804:	2400      	movs	r4, #0
   1f806:	4337      	orrs	r7, r6
   1f808:	e6c9      	b.n	1f59e <__aeabi_dadd+0x356>
   1f80a:	2480      	movs	r4, #128	; 0x80
   1f80c:	2500      	movs	r5, #0
   1f80e:	0324      	lsls	r4, r4, #12
   1f810:	4e13      	ldr	r6, [pc, #76]	; (1f860 <__aeabi_dadd+0x618>)
   1f812:	2700      	movs	r7, #0
   1f814:	e5dc      	b.n	1f3d0 <__aeabi_dadd+0x188>
   1f816:	4327      	orrs	r7, r4
   1f818:	1e7c      	subs	r4, r7, #1
   1f81a:	41a7      	sbcs	r7, r4
   1f81c:	2400      	movs	r4, #0
   1f81e:	e779      	b.n	1f714 <__aeabi_dadd+0x4cc>
   1f820:	000c      	movs	r4, r1
   1f822:	0017      	movs	r7, r2
   1f824:	4e0e      	ldr	r6, [pc, #56]	; (1f860 <__aeabi_dadd+0x618>)
   1f826:	e593      	b.n	1f350 <__aeabi_dadd+0x108>
   1f828:	000c      	movs	r4, r1
   1f82a:	0017      	movs	r7, r2
   1f82c:	e590      	b.n	1f350 <__aeabi_dadd+0x108>
   1f82e:	4656      	mov	r6, sl
   1f830:	0023      	movs	r3, r4
   1f832:	3e20      	subs	r6, #32
   1f834:	40f3      	lsrs	r3, r6
   1f836:	4699      	mov	r9, r3
   1f838:	4653      	mov	r3, sl
   1f83a:	2b20      	cmp	r3, #32
   1f83c:	d00e      	beq.n	1f85c <__aeabi_dadd+0x614>
   1f83e:	2340      	movs	r3, #64	; 0x40
   1f840:	4656      	mov	r6, sl
   1f842:	1b9b      	subs	r3, r3, r6
   1f844:	409c      	lsls	r4, r3
   1f846:	4327      	orrs	r7, r4
   1f848:	1e7c      	subs	r4, r7, #1
   1f84a:	41a7      	sbcs	r7, r4
   1f84c:	464b      	mov	r3, r9
   1f84e:	2400      	movs	r4, #0
   1f850:	431f      	orrs	r7, r3
   1f852:	e75f      	b.n	1f714 <__aeabi_dadd+0x4cc>
   1f854:	2400      	movs	r4, #0
   1f856:	e7d2      	b.n	1f7fe <__aeabi_dadd+0x5b6>
   1f858:	0017      	movs	r7, r2
   1f85a:	e5b2      	b.n	1f3c2 <__aeabi_dadd+0x17a>
   1f85c:	2400      	movs	r4, #0
   1f85e:	e7f2      	b.n	1f846 <__aeabi_dadd+0x5fe>
   1f860:	000007ff 	.word	0x000007ff
   1f864:	ff7fffff 	.word	0xff7fffff

0001f868 <__aeabi_ddiv>:
   1f868:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f86a:	4657      	mov	r7, sl
   1f86c:	4645      	mov	r5, r8
   1f86e:	46de      	mov	lr, fp
   1f870:	464e      	mov	r6, r9
   1f872:	b5e0      	push	{r5, r6, r7, lr}
   1f874:	004c      	lsls	r4, r1, #1
   1f876:	030e      	lsls	r6, r1, #12
   1f878:	b087      	sub	sp, #28
   1f87a:	4683      	mov	fp, r0
   1f87c:	4692      	mov	sl, r2
   1f87e:	001d      	movs	r5, r3
   1f880:	4680      	mov	r8, r0
   1f882:	0b36      	lsrs	r6, r6, #12
   1f884:	0d64      	lsrs	r4, r4, #21
   1f886:	0fcf      	lsrs	r7, r1, #31
   1f888:	2c00      	cmp	r4, #0
   1f88a:	d04f      	beq.n	1f92c <__aeabi_ddiv+0xc4>
   1f88c:	4b6f      	ldr	r3, [pc, #444]	; (1fa4c <__aeabi_ddiv+0x1e4>)
   1f88e:	429c      	cmp	r4, r3
   1f890:	d035      	beq.n	1f8fe <__aeabi_ddiv+0x96>
   1f892:	2380      	movs	r3, #128	; 0x80
   1f894:	0f42      	lsrs	r2, r0, #29
   1f896:	041b      	lsls	r3, r3, #16
   1f898:	00f6      	lsls	r6, r6, #3
   1f89a:	4313      	orrs	r3, r2
   1f89c:	4333      	orrs	r3, r6
   1f89e:	4699      	mov	r9, r3
   1f8a0:	00c3      	lsls	r3, r0, #3
   1f8a2:	4698      	mov	r8, r3
   1f8a4:	4b6a      	ldr	r3, [pc, #424]	; (1fa50 <__aeabi_ddiv+0x1e8>)
   1f8a6:	2600      	movs	r6, #0
   1f8a8:	469c      	mov	ip, r3
   1f8aa:	2300      	movs	r3, #0
   1f8ac:	4464      	add	r4, ip
   1f8ae:	9303      	str	r3, [sp, #12]
   1f8b0:	032b      	lsls	r3, r5, #12
   1f8b2:	0b1b      	lsrs	r3, r3, #12
   1f8b4:	469b      	mov	fp, r3
   1f8b6:	006b      	lsls	r3, r5, #1
   1f8b8:	0fed      	lsrs	r5, r5, #31
   1f8ba:	4650      	mov	r0, sl
   1f8bc:	0d5b      	lsrs	r3, r3, #21
   1f8be:	9501      	str	r5, [sp, #4]
   1f8c0:	d05e      	beq.n	1f980 <__aeabi_ddiv+0x118>
   1f8c2:	4a62      	ldr	r2, [pc, #392]	; (1fa4c <__aeabi_ddiv+0x1e4>)
   1f8c4:	4293      	cmp	r3, r2
   1f8c6:	d053      	beq.n	1f970 <__aeabi_ddiv+0x108>
   1f8c8:	465a      	mov	r2, fp
   1f8ca:	00d1      	lsls	r1, r2, #3
   1f8cc:	2280      	movs	r2, #128	; 0x80
   1f8ce:	0f40      	lsrs	r0, r0, #29
   1f8d0:	0412      	lsls	r2, r2, #16
   1f8d2:	4302      	orrs	r2, r0
   1f8d4:	430a      	orrs	r2, r1
   1f8d6:	4693      	mov	fp, r2
   1f8d8:	4652      	mov	r2, sl
   1f8da:	00d1      	lsls	r1, r2, #3
   1f8dc:	4a5c      	ldr	r2, [pc, #368]	; (1fa50 <__aeabi_ddiv+0x1e8>)
   1f8de:	4694      	mov	ip, r2
   1f8e0:	2200      	movs	r2, #0
   1f8e2:	4463      	add	r3, ip
   1f8e4:	0038      	movs	r0, r7
   1f8e6:	4068      	eors	r0, r5
   1f8e8:	4684      	mov	ip, r0
   1f8ea:	9002      	str	r0, [sp, #8]
   1f8ec:	1ae4      	subs	r4, r4, r3
   1f8ee:	4316      	orrs	r6, r2
   1f8f0:	2e0f      	cmp	r6, #15
   1f8f2:	d900      	bls.n	1f8f6 <__aeabi_ddiv+0x8e>
   1f8f4:	e0b4      	b.n	1fa60 <__aeabi_ddiv+0x1f8>
   1f8f6:	4b57      	ldr	r3, [pc, #348]	; (1fa54 <__aeabi_ddiv+0x1ec>)
   1f8f8:	00b6      	lsls	r6, r6, #2
   1f8fa:	599b      	ldr	r3, [r3, r6]
   1f8fc:	469f      	mov	pc, r3
   1f8fe:	0003      	movs	r3, r0
   1f900:	4333      	orrs	r3, r6
   1f902:	4699      	mov	r9, r3
   1f904:	d16c      	bne.n	1f9e0 <__aeabi_ddiv+0x178>
   1f906:	2300      	movs	r3, #0
   1f908:	4698      	mov	r8, r3
   1f90a:	3302      	adds	r3, #2
   1f90c:	2608      	movs	r6, #8
   1f90e:	9303      	str	r3, [sp, #12]
   1f910:	e7ce      	b.n	1f8b0 <__aeabi_ddiv+0x48>
   1f912:	46cb      	mov	fp, r9
   1f914:	4641      	mov	r1, r8
   1f916:	9a03      	ldr	r2, [sp, #12]
   1f918:	9701      	str	r7, [sp, #4]
   1f91a:	2a02      	cmp	r2, #2
   1f91c:	d165      	bne.n	1f9ea <__aeabi_ddiv+0x182>
   1f91e:	9b01      	ldr	r3, [sp, #4]
   1f920:	4c4a      	ldr	r4, [pc, #296]	; (1fa4c <__aeabi_ddiv+0x1e4>)
   1f922:	469c      	mov	ip, r3
   1f924:	2300      	movs	r3, #0
   1f926:	2200      	movs	r2, #0
   1f928:	4698      	mov	r8, r3
   1f92a:	e06b      	b.n	1fa04 <__aeabi_ddiv+0x19c>
   1f92c:	0003      	movs	r3, r0
   1f92e:	4333      	orrs	r3, r6
   1f930:	4699      	mov	r9, r3
   1f932:	d04e      	beq.n	1f9d2 <__aeabi_ddiv+0x16a>
   1f934:	2e00      	cmp	r6, #0
   1f936:	d100      	bne.n	1f93a <__aeabi_ddiv+0xd2>
   1f938:	e1bc      	b.n	1fcb4 <__aeabi_ddiv+0x44c>
   1f93a:	0030      	movs	r0, r6
   1f93c:	f7fe fcf2 	bl	1e324 <__clzsi2>
   1f940:	0003      	movs	r3, r0
   1f942:	3b0b      	subs	r3, #11
   1f944:	2b1c      	cmp	r3, #28
   1f946:	dd00      	ble.n	1f94a <__aeabi_ddiv+0xe2>
   1f948:	e1ac      	b.n	1fca4 <__aeabi_ddiv+0x43c>
   1f94a:	221d      	movs	r2, #29
   1f94c:	1ad3      	subs	r3, r2, r3
   1f94e:	465a      	mov	r2, fp
   1f950:	0001      	movs	r1, r0
   1f952:	40da      	lsrs	r2, r3
   1f954:	3908      	subs	r1, #8
   1f956:	408e      	lsls	r6, r1
   1f958:	0013      	movs	r3, r2
   1f95a:	4333      	orrs	r3, r6
   1f95c:	4699      	mov	r9, r3
   1f95e:	465b      	mov	r3, fp
   1f960:	408b      	lsls	r3, r1
   1f962:	4698      	mov	r8, r3
   1f964:	2300      	movs	r3, #0
   1f966:	4c3c      	ldr	r4, [pc, #240]	; (1fa58 <__aeabi_ddiv+0x1f0>)
   1f968:	2600      	movs	r6, #0
   1f96a:	1a24      	subs	r4, r4, r0
   1f96c:	9303      	str	r3, [sp, #12]
   1f96e:	e79f      	b.n	1f8b0 <__aeabi_ddiv+0x48>
   1f970:	4651      	mov	r1, sl
   1f972:	465a      	mov	r2, fp
   1f974:	4311      	orrs	r1, r2
   1f976:	d129      	bne.n	1f9cc <__aeabi_ddiv+0x164>
   1f978:	2200      	movs	r2, #0
   1f97a:	4693      	mov	fp, r2
   1f97c:	3202      	adds	r2, #2
   1f97e:	e7b1      	b.n	1f8e4 <__aeabi_ddiv+0x7c>
   1f980:	4659      	mov	r1, fp
   1f982:	4301      	orrs	r1, r0
   1f984:	d01e      	beq.n	1f9c4 <__aeabi_ddiv+0x15c>
   1f986:	465b      	mov	r3, fp
   1f988:	2b00      	cmp	r3, #0
   1f98a:	d100      	bne.n	1f98e <__aeabi_ddiv+0x126>
   1f98c:	e19e      	b.n	1fccc <__aeabi_ddiv+0x464>
   1f98e:	4658      	mov	r0, fp
   1f990:	f7fe fcc8 	bl	1e324 <__clzsi2>
   1f994:	0003      	movs	r3, r0
   1f996:	3b0b      	subs	r3, #11
   1f998:	2b1c      	cmp	r3, #28
   1f99a:	dd00      	ble.n	1f99e <__aeabi_ddiv+0x136>
   1f99c:	e18f      	b.n	1fcbe <__aeabi_ddiv+0x456>
   1f99e:	0002      	movs	r2, r0
   1f9a0:	4659      	mov	r1, fp
   1f9a2:	3a08      	subs	r2, #8
   1f9a4:	4091      	lsls	r1, r2
   1f9a6:	468b      	mov	fp, r1
   1f9a8:	211d      	movs	r1, #29
   1f9aa:	1acb      	subs	r3, r1, r3
   1f9ac:	4651      	mov	r1, sl
   1f9ae:	40d9      	lsrs	r1, r3
   1f9b0:	000b      	movs	r3, r1
   1f9b2:	4659      	mov	r1, fp
   1f9b4:	430b      	orrs	r3, r1
   1f9b6:	4651      	mov	r1, sl
   1f9b8:	469b      	mov	fp, r3
   1f9ba:	4091      	lsls	r1, r2
   1f9bc:	4b26      	ldr	r3, [pc, #152]	; (1fa58 <__aeabi_ddiv+0x1f0>)
   1f9be:	2200      	movs	r2, #0
   1f9c0:	1a1b      	subs	r3, r3, r0
   1f9c2:	e78f      	b.n	1f8e4 <__aeabi_ddiv+0x7c>
   1f9c4:	2300      	movs	r3, #0
   1f9c6:	2201      	movs	r2, #1
   1f9c8:	469b      	mov	fp, r3
   1f9ca:	e78b      	b.n	1f8e4 <__aeabi_ddiv+0x7c>
   1f9cc:	4651      	mov	r1, sl
   1f9ce:	2203      	movs	r2, #3
   1f9d0:	e788      	b.n	1f8e4 <__aeabi_ddiv+0x7c>
   1f9d2:	2300      	movs	r3, #0
   1f9d4:	4698      	mov	r8, r3
   1f9d6:	3301      	adds	r3, #1
   1f9d8:	2604      	movs	r6, #4
   1f9da:	2400      	movs	r4, #0
   1f9dc:	9303      	str	r3, [sp, #12]
   1f9de:	e767      	b.n	1f8b0 <__aeabi_ddiv+0x48>
   1f9e0:	2303      	movs	r3, #3
   1f9e2:	46b1      	mov	r9, r6
   1f9e4:	9303      	str	r3, [sp, #12]
   1f9e6:	260c      	movs	r6, #12
   1f9e8:	e762      	b.n	1f8b0 <__aeabi_ddiv+0x48>
   1f9ea:	2a03      	cmp	r2, #3
   1f9ec:	d100      	bne.n	1f9f0 <__aeabi_ddiv+0x188>
   1f9ee:	e25c      	b.n	1feaa <__aeabi_ddiv+0x642>
   1f9f0:	9b01      	ldr	r3, [sp, #4]
   1f9f2:	2a01      	cmp	r2, #1
   1f9f4:	d000      	beq.n	1f9f8 <__aeabi_ddiv+0x190>
   1f9f6:	e1e4      	b.n	1fdc2 <__aeabi_ddiv+0x55a>
   1f9f8:	4013      	ands	r3, r2
   1f9fa:	469c      	mov	ip, r3
   1f9fc:	2300      	movs	r3, #0
   1f9fe:	2400      	movs	r4, #0
   1fa00:	2200      	movs	r2, #0
   1fa02:	4698      	mov	r8, r3
   1fa04:	2100      	movs	r1, #0
   1fa06:	0312      	lsls	r2, r2, #12
   1fa08:	0b13      	lsrs	r3, r2, #12
   1fa0a:	0d0a      	lsrs	r2, r1, #20
   1fa0c:	0512      	lsls	r2, r2, #20
   1fa0e:	431a      	orrs	r2, r3
   1fa10:	0523      	lsls	r3, r4, #20
   1fa12:	4c12      	ldr	r4, [pc, #72]	; (1fa5c <__aeabi_ddiv+0x1f4>)
   1fa14:	4640      	mov	r0, r8
   1fa16:	4022      	ands	r2, r4
   1fa18:	4313      	orrs	r3, r2
   1fa1a:	4662      	mov	r2, ip
   1fa1c:	005b      	lsls	r3, r3, #1
   1fa1e:	07d2      	lsls	r2, r2, #31
   1fa20:	085b      	lsrs	r3, r3, #1
   1fa22:	4313      	orrs	r3, r2
   1fa24:	0019      	movs	r1, r3
   1fa26:	b007      	add	sp, #28
   1fa28:	bc3c      	pop	{r2, r3, r4, r5}
   1fa2a:	4690      	mov	r8, r2
   1fa2c:	4699      	mov	r9, r3
   1fa2e:	46a2      	mov	sl, r4
   1fa30:	46ab      	mov	fp, r5
   1fa32:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fa34:	2300      	movs	r3, #0
   1fa36:	2280      	movs	r2, #128	; 0x80
   1fa38:	469c      	mov	ip, r3
   1fa3a:	0312      	lsls	r2, r2, #12
   1fa3c:	4698      	mov	r8, r3
   1fa3e:	4c03      	ldr	r4, [pc, #12]	; (1fa4c <__aeabi_ddiv+0x1e4>)
   1fa40:	e7e0      	b.n	1fa04 <__aeabi_ddiv+0x19c>
   1fa42:	2300      	movs	r3, #0
   1fa44:	4c01      	ldr	r4, [pc, #4]	; (1fa4c <__aeabi_ddiv+0x1e4>)
   1fa46:	2200      	movs	r2, #0
   1fa48:	4698      	mov	r8, r3
   1fa4a:	e7db      	b.n	1fa04 <__aeabi_ddiv+0x19c>
   1fa4c:	000007ff 	.word	0x000007ff
   1fa50:	fffffc01 	.word	0xfffffc01
   1fa54:	00026e50 	.word	0x00026e50
   1fa58:	fffffc0d 	.word	0xfffffc0d
   1fa5c:	800fffff 	.word	0x800fffff
   1fa60:	45d9      	cmp	r9, fp
   1fa62:	d900      	bls.n	1fa66 <__aeabi_ddiv+0x1fe>
   1fa64:	e139      	b.n	1fcda <__aeabi_ddiv+0x472>
   1fa66:	d100      	bne.n	1fa6a <__aeabi_ddiv+0x202>
   1fa68:	e134      	b.n	1fcd4 <__aeabi_ddiv+0x46c>
   1fa6a:	2300      	movs	r3, #0
   1fa6c:	4646      	mov	r6, r8
   1fa6e:	464d      	mov	r5, r9
   1fa70:	469a      	mov	sl, r3
   1fa72:	3c01      	subs	r4, #1
   1fa74:	465b      	mov	r3, fp
   1fa76:	0e0a      	lsrs	r2, r1, #24
   1fa78:	021b      	lsls	r3, r3, #8
   1fa7a:	431a      	orrs	r2, r3
   1fa7c:	020b      	lsls	r3, r1, #8
   1fa7e:	0c17      	lsrs	r7, r2, #16
   1fa80:	9303      	str	r3, [sp, #12]
   1fa82:	0413      	lsls	r3, r2, #16
   1fa84:	0c1b      	lsrs	r3, r3, #16
   1fa86:	0039      	movs	r1, r7
   1fa88:	0028      	movs	r0, r5
   1fa8a:	4690      	mov	r8, r2
   1fa8c:	9301      	str	r3, [sp, #4]
   1fa8e:	f7fe fa5b 	bl	1df48 <__udivsi3>
   1fa92:	0002      	movs	r2, r0
   1fa94:	9b01      	ldr	r3, [sp, #4]
   1fa96:	4683      	mov	fp, r0
   1fa98:	435a      	muls	r2, r3
   1fa9a:	0028      	movs	r0, r5
   1fa9c:	0039      	movs	r1, r7
   1fa9e:	4691      	mov	r9, r2
   1faa0:	f7fe fad8 	bl	1e054 <__aeabi_uidivmod>
   1faa4:	0c35      	lsrs	r5, r6, #16
   1faa6:	0409      	lsls	r1, r1, #16
   1faa8:	430d      	orrs	r5, r1
   1faaa:	45a9      	cmp	r9, r5
   1faac:	d90d      	bls.n	1faca <__aeabi_ddiv+0x262>
   1faae:	465b      	mov	r3, fp
   1fab0:	4445      	add	r5, r8
   1fab2:	3b01      	subs	r3, #1
   1fab4:	45a8      	cmp	r8, r5
   1fab6:	d900      	bls.n	1faba <__aeabi_ddiv+0x252>
   1fab8:	e13a      	b.n	1fd30 <__aeabi_ddiv+0x4c8>
   1faba:	45a9      	cmp	r9, r5
   1fabc:	d800      	bhi.n	1fac0 <__aeabi_ddiv+0x258>
   1fabe:	e137      	b.n	1fd30 <__aeabi_ddiv+0x4c8>
   1fac0:	2302      	movs	r3, #2
   1fac2:	425b      	negs	r3, r3
   1fac4:	469c      	mov	ip, r3
   1fac6:	4445      	add	r5, r8
   1fac8:	44e3      	add	fp, ip
   1faca:	464b      	mov	r3, r9
   1facc:	1aeb      	subs	r3, r5, r3
   1face:	0039      	movs	r1, r7
   1fad0:	0018      	movs	r0, r3
   1fad2:	9304      	str	r3, [sp, #16]
   1fad4:	f7fe fa38 	bl	1df48 <__udivsi3>
   1fad8:	9b01      	ldr	r3, [sp, #4]
   1fada:	0005      	movs	r5, r0
   1fadc:	4343      	muls	r3, r0
   1fade:	0039      	movs	r1, r7
   1fae0:	9804      	ldr	r0, [sp, #16]
   1fae2:	4699      	mov	r9, r3
   1fae4:	f7fe fab6 	bl	1e054 <__aeabi_uidivmod>
   1fae8:	0433      	lsls	r3, r6, #16
   1faea:	0409      	lsls	r1, r1, #16
   1faec:	0c1b      	lsrs	r3, r3, #16
   1faee:	430b      	orrs	r3, r1
   1faf0:	4599      	cmp	r9, r3
   1faf2:	d909      	bls.n	1fb08 <__aeabi_ddiv+0x2a0>
   1faf4:	4443      	add	r3, r8
   1faf6:	1e6a      	subs	r2, r5, #1
   1faf8:	4598      	cmp	r8, r3
   1fafa:	d900      	bls.n	1fafe <__aeabi_ddiv+0x296>
   1fafc:	e11a      	b.n	1fd34 <__aeabi_ddiv+0x4cc>
   1fafe:	4599      	cmp	r9, r3
   1fb00:	d800      	bhi.n	1fb04 <__aeabi_ddiv+0x29c>
   1fb02:	e117      	b.n	1fd34 <__aeabi_ddiv+0x4cc>
   1fb04:	3d02      	subs	r5, #2
   1fb06:	4443      	add	r3, r8
   1fb08:	464a      	mov	r2, r9
   1fb0a:	1a9b      	subs	r3, r3, r2
   1fb0c:	465a      	mov	r2, fp
   1fb0e:	0412      	lsls	r2, r2, #16
   1fb10:	432a      	orrs	r2, r5
   1fb12:	9903      	ldr	r1, [sp, #12]
   1fb14:	4693      	mov	fp, r2
   1fb16:	0c10      	lsrs	r0, r2, #16
   1fb18:	0c0a      	lsrs	r2, r1, #16
   1fb1a:	4691      	mov	r9, r2
   1fb1c:	0409      	lsls	r1, r1, #16
   1fb1e:	465a      	mov	r2, fp
   1fb20:	0c09      	lsrs	r1, r1, #16
   1fb22:	464e      	mov	r6, r9
   1fb24:	000d      	movs	r5, r1
   1fb26:	0412      	lsls	r2, r2, #16
   1fb28:	0c12      	lsrs	r2, r2, #16
   1fb2a:	4345      	muls	r5, r0
   1fb2c:	9105      	str	r1, [sp, #20]
   1fb2e:	4351      	muls	r1, r2
   1fb30:	4372      	muls	r2, r6
   1fb32:	4370      	muls	r0, r6
   1fb34:	1952      	adds	r2, r2, r5
   1fb36:	0c0e      	lsrs	r6, r1, #16
   1fb38:	18b2      	adds	r2, r6, r2
   1fb3a:	4295      	cmp	r5, r2
   1fb3c:	d903      	bls.n	1fb46 <__aeabi_ddiv+0x2de>
   1fb3e:	2580      	movs	r5, #128	; 0x80
   1fb40:	026d      	lsls	r5, r5, #9
   1fb42:	46ac      	mov	ip, r5
   1fb44:	4460      	add	r0, ip
   1fb46:	0c15      	lsrs	r5, r2, #16
   1fb48:	0409      	lsls	r1, r1, #16
   1fb4a:	0412      	lsls	r2, r2, #16
   1fb4c:	0c09      	lsrs	r1, r1, #16
   1fb4e:	1828      	adds	r0, r5, r0
   1fb50:	1852      	adds	r2, r2, r1
   1fb52:	4283      	cmp	r3, r0
   1fb54:	d200      	bcs.n	1fb58 <__aeabi_ddiv+0x2f0>
   1fb56:	e0ce      	b.n	1fcf6 <__aeabi_ddiv+0x48e>
   1fb58:	d100      	bne.n	1fb5c <__aeabi_ddiv+0x2f4>
   1fb5a:	e0c8      	b.n	1fcee <__aeabi_ddiv+0x486>
   1fb5c:	1a1d      	subs	r5, r3, r0
   1fb5e:	4653      	mov	r3, sl
   1fb60:	1a9e      	subs	r6, r3, r2
   1fb62:	45b2      	cmp	sl, r6
   1fb64:	4192      	sbcs	r2, r2
   1fb66:	4252      	negs	r2, r2
   1fb68:	1aab      	subs	r3, r5, r2
   1fb6a:	469a      	mov	sl, r3
   1fb6c:	4598      	cmp	r8, r3
   1fb6e:	d100      	bne.n	1fb72 <__aeabi_ddiv+0x30a>
   1fb70:	e117      	b.n	1fda2 <__aeabi_ddiv+0x53a>
   1fb72:	0039      	movs	r1, r7
   1fb74:	0018      	movs	r0, r3
   1fb76:	f7fe f9e7 	bl	1df48 <__udivsi3>
   1fb7a:	9b01      	ldr	r3, [sp, #4]
   1fb7c:	0005      	movs	r5, r0
   1fb7e:	4343      	muls	r3, r0
   1fb80:	0039      	movs	r1, r7
   1fb82:	4650      	mov	r0, sl
   1fb84:	9304      	str	r3, [sp, #16]
   1fb86:	f7fe fa65 	bl	1e054 <__aeabi_uidivmod>
   1fb8a:	9804      	ldr	r0, [sp, #16]
   1fb8c:	040b      	lsls	r3, r1, #16
   1fb8e:	0c31      	lsrs	r1, r6, #16
   1fb90:	4319      	orrs	r1, r3
   1fb92:	4288      	cmp	r0, r1
   1fb94:	d909      	bls.n	1fbaa <__aeabi_ddiv+0x342>
   1fb96:	4441      	add	r1, r8
   1fb98:	1e6b      	subs	r3, r5, #1
   1fb9a:	4588      	cmp	r8, r1
   1fb9c:	d900      	bls.n	1fba0 <__aeabi_ddiv+0x338>
   1fb9e:	e107      	b.n	1fdb0 <__aeabi_ddiv+0x548>
   1fba0:	4288      	cmp	r0, r1
   1fba2:	d800      	bhi.n	1fba6 <__aeabi_ddiv+0x33e>
   1fba4:	e104      	b.n	1fdb0 <__aeabi_ddiv+0x548>
   1fba6:	3d02      	subs	r5, #2
   1fba8:	4441      	add	r1, r8
   1fbaa:	9b04      	ldr	r3, [sp, #16]
   1fbac:	1acb      	subs	r3, r1, r3
   1fbae:	0018      	movs	r0, r3
   1fbb0:	0039      	movs	r1, r7
   1fbb2:	9304      	str	r3, [sp, #16]
   1fbb4:	f7fe f9c8 	bl	1df48 <__udivsi3>
   1fbb8:	9b01      	ldr	r3, [sp, #4]
   1fbba:	4682      	mov	sl, r0
   1fbbc:	4343      	muls	r3, r0
   1fbbe:	0039      	movs	r1, r7
   1fbc0:	9804      	ldr	r0, [sp, #16]
   1fbc2:	9301      	str	r3, [sp, #4]
   1fbc4:	f7fe fa46 	bl	1e054 <__aeabi_uidivmod>
   1fbc8:	9801      	ldr	r0, [sp, #4]
   1fbca:	040b      	lsls	r3, r1, #16
   1fbcc:	0431      	lsls	r1, r6, #16
   1fbce:	0c09      	lsrs	r1, r1, #16
   1fbd0:	4319      	orrs	r1, r3
   1fbd2:	4288      	cmp	r0, r1
   1fbd4:	d90d      	bls.n	1fbf2 <__aeabi_ddiv+0x38a>
   1fbd6:	4653      	mov	r3, sl
   1fbd8:	4441      	add	r1, r8
   1fbda:	3b01      	subs	r3, #1
   1fbdc:	4588      	cmp	r8, r1
   1fbde:	d900      	bls.n	1fbe2 <__aeabi_ddiv+0x37a>
   1fbe0:	e0e8      	b.n	1fdb4 <__aeabi_ddiv+0x54c>
   1fbe2:	4288      	cmp	r0, r1
   1fbe4:	d800      	bhi.n	1fbe8 <__aeabi_ddiv+0x380>
   1fbe6:	e0e5      	b.n	1fdb4 <__aeabi_ddiv+0x54c>
   1fbe8:	2302      	movs	r3, #2
   1fbea:	425b      	negs	r3, r3
   1fbec:	469c      	mov	ip, r3
   1fbee:	4441      	add	r1, r8
   1fbf0:	44e2      	add	sl, ip
   1fbf2:	9b01      	ldr	r3, [sp, #4]
   1fbf4:	042d      	lsls	r5, r5, #16
   1fbf6:	1ace      	subs	r6, r1, r3
   1fbf8:	4651      	mov	r1, sl
   1fbfa:	4329      	orrs	r1, r5
   1fbfc:	9d05      	ldr	r5, [sp, #20]
   1fbfe:	464f      	mov	r7, r9
   1fc00:	002a      	movs	r2, r5
   1fc02:	040b      	lsls	r3, r1, #16
   1fc04:	0c08      	lsrs	r0, r1, #16
   1fc06:	0c1b      	lsrs	r3, r3, #16
   1fc08:	435a      	muls	r2, r3
   1fc0a:	4345      	muls	r5, r0
   1fc0c:	437b      	muls	r3, r7
   1fc0e:	4378      	muls	r0, r7
   1fc10:	195b      	adds	r3, r3, r5
   1fc12:	0c17      	lsrs	r7, r2, #16
   1fc14:	18fb      	adds	r3, r7, r3
   1fc16:	429d      	cmp	r5, r3
   1fc18:	d903      	bls.n	1fc22 <__aeabi_ddiv+0x3ba>
   1fc1a:	2580      	movs	r5, #128	; 0x80
   1fc1c:	026d      	lsls	r5, r5, #9
   1fc1e:	46ac      	mov	ip, r5
   1fc20:	4460      	add	r0, ip
   1fc22:	0c1d      	lsrs	r5, r3, #16
   1fc24:	0412      	lsls	r2, r2, #16
   1fc26:	041b      	lsls	r3, r3, #16
   1fc28:	0c12      	lsrs	r2, r2, #16
   1fc2a:	1828      	adds	r0, r5, r0
   1fc2c:	189b      	adds	r3, r3, r2
   1fc2e:	4286      	cmp	r6, r0
   1fc30:	d200      	bcs.n	1fc34 <__aeabi_ddiv+0x3cc>
   1fc32:	e093      	b.n	1fd5c <__aeabi_ddiv+0x4f4>
   1fc34:	d100      	bne.n	1fc38 <__aeabi_ddiv+0x3d0>
   1fc36:	e08e      	b.n	1fd56 <__aeabi_ddiv+0x4ee>
   1fc38:	2301      	movs	r3, #1
   1fc3a:	4319      	orrs	r1, r3
   1fc3c:	4ba0      	ldr	r3, [pc, #640]	; (1fec0 <__aeabi_ddiv+0x658>)
   1fc3e:	18e3      	adds	r3, r4, r3
   1fc40:	2b00      	cmp	r3, #0
   1fc42:	dc00      	bgt.n	1fc46 <__aeabi_ddiv+0x3de>
   1fc44:	e099      	b.n	1fd7a <__aeabi_ddiv+0x512>
   1fc46:	074a      	lsls	r2, r1, #29
   1fc48:	d000      	beq.n	1fc4c <__aeabi_ddiv+0x3e4>
   1fc4a:	e09e      	b.n	1fd8a <__aeabi_ddiv+0x522>
   1fc4c:	465a      	mov	r2, fp
   1fc4e:	01d2      	lsls	r2, r2, #7
   1fc50:	d506      	bpl.n	1fc60 <__aeabi_ddiv+0x3f8>
   1fc52:	465a      	mov	r2, fp
   1fc54:	4b9b      	ldr	r3, [pc, #620]	; (1fec4 <__aeabi_ddiv+0x65c>)
   1fc56:	401a      	ands	r2, r3
   1fc58:	2380      	movs	r3, #128	; 0x80
   1fc5a:	4693      	mov	fp, r2
   1fc5c:	00db      	lsls	r3, r3, #3
   1fc5e:	18e3      	adds	r3, r4, r3
   1fc60:	4a99      	ldr	r2, [pc, #612]	; (1fec8 <__aeabi_ddiv+0x660>)
   1fc62:	4293      	cmp	r3, r2
   1fc64:	dd68      	ble.n	1fd38 <__aeabi_ddiv+0x4d0>
   1fc66:	2301      	movs	r3, #1
   1fc68:	9a02      	ldr	r2, [sp, #8]
   1fc6a:	4c98      	ldr	r4, [pc, #608]	; (1fecc <__aeabi_ddiv+0x664>)
   1fc6c:	401a      	ands	r2, r3
   1fc6e:	2300      	movs	r3, #0
   1fc70:	4694      	mov	ip, r2
   1fc72:	4698      	mov	r8, r3
   1fc74:	2200      	movs	r2, #0
   1fc76:	e6c5      	b.n	1fa04 <__aeabi_ddiv+0x19c>
   1fc78:	2280      	movs	r2, #128	; 0x80
   1fc7a:	464b      	mov	r3, r9
   1fc7c:	0312      	lsls	r2, r2, #12
   1fc7e:	4213      	tst	r3, r2
   1fc80:	d00a      	beq.n	1fc98 <__aeabi_ddiv+0x430>
   1fc82:	465b      	mov	r3, fp
   1fc84:	4213      	tst	r3, r2
   1fc86:	d106      	bne.n	1fc96 <__aeabi_ddiv+0x42e>
   1fc88:	431a      	orrs	r2, r3
   1fc8a:	0312      	lsls	r2, r2, #12
   1fc8c:	0b12      	lsrs	r2, r2, #12
   1fc8e:	46ac      	mov	ip, r5
   1fc90:	4688      	mov	r8, r1
   1fc92:	4c8e      	ldr	r4, [pc, #568]	; (1fecc <__aeabi_ddiv+0x664>)
   1fc94:	e6b6      	b.n	1fa04 <__aeabi_ddiv+0x19c>
   1fc96:	464b      	mov	r3, r9
   1fc98:	431a      	orrs	r2, r3
   1fc9a:	0312      	lsls	r2, r2, #12
   1fc9c:	0b12      	lsrs	r2, r2, #12
   1fc9e:	46bc      	mov	ip, r7
   1fca0:	4c8a      	ldr	r4, [pc, #552]	; (1fecc <__aeabi_ddiv+0x664>)
   1fca2:	e6af      	b.n	1fa04 <__aeabi_ddiv+0x19c>
   1fca4:	0003      	movs	r3, r0
   1fca6:	465a      	mov	r2, fp
   1fca8:	3b28      	subs	r3, #40	; 0x28
   1fcaa:	409a      	lsls	r2, r3
   1fcac:	2300      	movs	r3, #0
   1fcae:	4691      	mov	r9, r2
   1fcb0:	4698      	mov	r8, r3
   1fcb2:	e657      	b.n	1f964 <__aeabi_ddiv+0xfc>
   1fcb4:	4658      	mov	r0, fp
   1fcb6:	f7fe fb35 	bl	1e324 <__clzsi2>
   1fcba:	3020      	adds	r0, #32
   1fcbc:	e640      	b.n	1f940 <__aeabi_ddiv+0xd8>
   1fcbe:	0003      	movs	r3, r0
   1fcc0:	4652      	mov	r2, sl
   1fcc2:	3b28      	subs	r3, #40	; 0x28
   1fcc4:	409a      	lsls	r2, r3
   1fcc6:	2100      	movs	r1, #0
   1fcc8:	4693      	mov	fp, r2
   1fcca:	e677      	b.n	1f9bc <__aeabi_ddiv+0x154>
   1fccc:	f7fe fb2a 	bl	1e324 <__clzsi2>
   1fcd0:	3020      	adds	r0, #32
   1fcd2:	e65f      	b.n	1f994 <__aeabi_ddiv+0x12c>
   1fcd4:	4588      	cmp	r8, r1
   1fcd6:	d200      	bcs.n	1fcda <__aeabi_ddiv+0x472>
   1fcd8:	e6c7      	b.n	1fa6a <__aeabi_ddiv+0x202>
   1fcda:	464b      	mov	r3, r9
   1fcdc:	07de      	lsls	r6, r3, #31
   1fcde:	085d      	lsrs	r5, r3, #1
   1fce0:	4643      	mov	r3, r8
   1fce2:	085b      	lsrs	r3, r3, #1
   1fce4:	431e      	orrs	r6, r3
   1fce6:	4643      	mov	r3, r8
   1fce8:	07db      	lsls	r3, r3, #31
   1fcea:	469a      	mov	sl, r3
   1fcec:	e6c2      	b.n	1fa74 <__aeabi_ddiv+0x20c>
   1fcee:	2500      	movs	r5, #0
   1fcf0:	4592      	cmp	sl, r2
   1fcf2:	d300      	bcc.n	1fcf6 <__aeabi_ddiv+0x48e>
   1fcf4:	e733      	b.n	1fb5e <__aeabi_ddiv+0x2f6>
   1fcf6:	9e03      	ldr	r6, [sp, #12]
   1fcf8:	4659      	mov	r1, fp
   1fcfa:	46b4      	mov	ip, r6
   1fcfc:	44e2      	add	sl, ip
   1fcfe:	45b2      	cmp	sl, r6
   1fd00:	41ad      	sbcs	r5, r5
   1fd02:	426d      	negs	r5, r5
   1fd04:	4445      	add	r5, r8
   1fd06:	18eb      	adds	r3, r5, r3
   1fd08:	3901      	subs	r1, #1
   1fd0a:	4598      	cmp	r8, r3
   1fd0c:	d207      	bcs.n	1fd1e <__aeabi_ddiv+0x4b6>
   1fd0e:	4298      	cmp	r0, r3
   1fd10:	d900      	bls.n	1fd14 <__aeabi_ddiv+0x4ac>
   1fd12:	e07f      	b.n	1fe14 <__aeabi_ddiv+0x5ac>
   1fd14:	d100      	bne.n	1fd18 <__aeabi_ddiv+0x4b0>
   1fd16:	e0bc      	b.n	1fe92 <__aeabi_ddiv+0x62a>
   1fd18:	1a1d      	subs	r5, r3, r0
   1fd1a:	468b      	mov	fp, r1
   1fd1c:	e71f      	b.n	1fb5e <__aeabi_ddiv+0x2f6>
   1fd1e:	4598      	cmp	r8, r3
   1fd20:	d1fa      	bne.n	1fd18 <__aeabi_ddiv+0x4b0>
   1fd22:	9d03      	ldr	r5, [sp, #12]
   1fd24:	4555      	cmp	r5, sl
   1fd26:	d9f2      	bls.n	1fd0e <__aeabi_ddiv+0x4a6>
   1fd28:	4643      	mov	r3, r8
   1fd2a:	468b      	mov	fp, r1
   1fd2c:	1a1d      	subs	r5, r3, r0
   1fd2e:	e716      	b.n	1fb5e <__aeabi_ddiv+0x2f6>
   1fd30:	469b      	mov	fp, r3
   1fd32:	e6ca      	b.n	1faca <__aeabi_ddiv+0x262>
   1fd34:	0015      	movs	r5, r2
   1fd36:	e6e7      	b.n	1fb08 <__aeabi_ddiv+0x2a0>
   1fd38:	465a      	mov	r2, fp
   1fd3a:	08c9      	lsrs	r1, r1, #3
   1fd3c:	0752      	lsls	r2, r2, #29
   1fd3e:	430a      	orrs	r2, r1
   1fd40:	055b      	lsls	r3, r3, #21
   1fd42:	4690      	mov	r8, r2
   1fd44:	0d5c      	lsrs	r4, r3, #21
   1fd46:	465a      	mov	r2, fp
   1fd48:	2301      	movs	r3, #1
   1fd4a:	9902      	ldr	r1, [sp, #8]
   1fd4c:	0252      	lsls	r2, r2, #9
   1fd4e:	4019      	ands	r1, r3
   1fd50:	0b12      	lsrs	r2, r2, #12
   1fd52:	468c      	mov	ip, r1
   1fd54:	e656      	b.n	1fa04 <__aeabi_ddiv+0x19c>
   1fd56:	2b00      	cmp	r3, #0
   1fd58:	d100      	bne.n	1fd5c <__aeabi_ddiv+0x4f4>
   1fd5a:	e76f      	b.n	1fc3c <__aeabi_ddiv+0x3d4>
   1fd5c:	4446      	add	r6, r8
   1fd5e:	1e4a      	subs	r2, r1, #1
   1fd60:	45b0      	cmp	r8, r6
   1fd62:	d929      	bls.n	1fdb8 <__aeabi_ddiv+0x550>
   1fd64:	0011      	movs	r1, r2
   1fd66:	4286      	cmp	r6, r0
   1fd68:	d000      	beq.n	1fd6c <__aeabi_ddiv+0x504>
   1fd6a:	e765      	b.n	1fc38 <__aeabi_ddiv+0x3d0>
   1fd6c:	9a03      	ldr	r2, [sp, #12]
   1fd6e:	4293      	cmp	r3, r2
   1fd70:	d000      	beq.n	1fd74 <__aeabi_ddiv+0x50c>
   1fd72:	e761      	b.n	1fc38 <__aeabi_ddiv+0x3d0>
   1fd74:	e762      	b.n	1fc3c <__aeabi_ddiv+0x3d4>
   1fd76:	2101      	movs	r1, #1
   1fd78:	4249      	negs	r1, r1
   1fd7a:	2001      	movs	r0, #1
   1fd7c:	1ac2      	subs	r2, r0, r3
   1fd7e:	2a38      	cmp	r2, #56	; 0x38
   1fd80:	dd21      	ble.n	1fdc6 <__aeabi_ddiv+0x55e>
   1fd82:	9b02      	ldr	r3, [sp, #8]
   1fd84:	4003      	ands	r3, r0
   1fd86:	469c      	mov	ip, r3
   1fd88:	e638      	b.n	1f9fc <__aeabi_ddiv+0x194>
   1fd8a:	220f      	movs	r2, #15
   1fd8c:	400a      	ands	r2, r1
   1fd8e:	2a04      	cmp	r2, #4
   1fd90:	d100      	bne.n	1fd94 <__aeabi_ddiv+0x52c>
   1fd92:	e75b      	b.n	1fc4c <__aeabi_ddiv+0x3e4>
   1fd94:	000a      	movs	r2, r1
   1fd96:	1d11      	adds	r1, r2, #4
   1fd98:	4291      	cmp	r1, r2
   1fd9a:	4192      	sbcs	r2, r2
   1fd9c:	4252      	negs	r2, r2
   1fd9e:	4493      	add	fp, r2
   1fda0:	e754      	b.n	1fc4c <__aeabi_ddiv+0x3e4>
   1fda2:	4b47      	ldr	r3, [pc, #284]	; (1fec0 <__aeabi_ddiv+0x658>)
   1fda4:	18e3      	adds	r3, r4, r3
   1fda6:	2b00      	cmp	r3, #0
   1fda8:	dde5      	ble.n	1fd76 <__aeabi_ddiv+0x50e>
   1fdaa:	2201      	movs	r2, #1
   1fdac:	4252      	negs	r2, r2
   1fdae:	e7f2      	b.n	1fd96 <__aeabi_ddiv+0x52e>
   1fdb0:	001d      	movs	r5, r3
   1fdb2:	e6fa      	b.n	1fbaa <__aeabi_ddiv+0x342>
   1fdb4:	469a      	mov	sl, r3
   1fdb6:	e71c      	b.n	1fbf2 <__aeabi_ddiv+0x38a>
   1fdb8:	42b0      	cmp	r0, r6
   1fdba:	d839      	bhi.n	1fe30 <__aeabi_ddiv+0x5c8>
   1fdbc:	d06e      	beq.n	1fe9c <__aeabi_ddiv+0x634>
   1fdbe:	0011      	movs	r1, r2
   1fdc0:	e73a      	b.n	1fc38 <__aeabi_ddiv+0x3d0>
   1fdc2:	9302      	str	r3, [sp, #8]
   1fdc4:	e73a      	b.n	1fc3c <__aeabi_ddiv+0x3d4>
   1fdc6:	2a1f      	cmp	r2, #31
   1fdc8:	dc3c      	bgt.n	1fe44 <__aeabi_ddiv+0x5dc>
   1fdca:	2320      	movs	r3, #32
   1fdcc:	1a9b      	subs	r3, r3, r2
   1fdce:	000c      	movs	r4, r1
   1fdd0:	4658      	mov	r0, fp
   1fdd2:	4099      	lsls	r1, r3
   1fdd4:	4098      	lsls	r0, r3
   1fdd6:	1e4b      	subs	r3, r1, #1
   1fdd8:	4199      	sbcs	r1, r3
   1fdda:	465b      	mov	r3, fp
   1fddc:	40d4      	lsrs	r4, r2
   1fdde:	40d3      	lsrs	r3, r2
   1fde0:	4320      	orrs	r0, r4
   1fde2:	4308      	orrs	r0, r1
   1fde4:	001a      	movs	r2, r3
   1fde6:	0743      	lsls	r3, r0, #29
   1fde8:	d009      	beq.n	1fdfe <__aeabi_ddiv+0x596>
   1fdea:	230f      	movs	r3, #15
   1fdec:	4003      	ands	r3, r0
   1fdee:	2b04      	cmp	r3, #4
   1fdf0:	d005      	beq.n	1fdfe <__aeabi_ddiv+0x596>
   1fdf2:	0001      	movs	r1, r0
   1fdf4:	1d08      	adds	r0, r1, #4
   1fdf6:	4288      	cmp	r0, r1
   1fdf8:	419b      	sbcs	r3, r3
   1fdfa:	425b      	negs	r3, r3
   1fdfc:	18d2      	adds	r2, r2, r3
   1fdfe:	0213      	lsls	r3, r2, #8
   1fe00:	d53a      	bpl.n	1fe78 <__aeabi_ddiv+0x610>
   1fe02:	2301      	movs	r3, #1
   1fe04:	9a02      	ldr	r2, [sp, #8]
   1fe06:	2401      	movs	r4, #1
   1fe08:	401a      	ands	r2, r3
   1fe0a:	2300      	movs	r3, #0
   1fe0c:	4694      	mov	ip, r2
   1fe0e:	4698      	mov	r8, r3
   1fe10:	2200      	movs	r2, #0
   1fe12:	e5f7      	b.n	1fa04 <__aeabi_ddiv+0x19c>
   1fe14:	2102      	movs	r1, #2
   1fe16:	4249      	negs	r1, r1
   1fe18:	468c      	mov	ip, r1
   1fe1a:	9d03      	ldr	r5, [sp, #12]
   1fe1c:	44e3      	add	fp, ip
   1fe1e:	46ac      	mov	ip, r5
   1fe20:	44e2      	add	sl, ip
   1fe22:	45aa      	cmp	sl, r5
   1fe24:	41ad      	sbcs	r5, r5
   1fe26:	426d      	negs	r5, r5
   1fe28:	4445      	add	r5, r8
   1fe2a:	18ed      	adds	r5, r5, r3
   1fe2c:	1a2d      	subs	r5, r5, r0
   1fe2e:	e696      	b.n	1fb5e <__aeabi_ddiv+0x2f6>
   1fe30:	1e8a      	subs	r2, r1, #2
   1fe32:	9903      	ldr	r1, [sp, #12]
   1fe34:	004d      	lsls	r5, r1, #1
   1fe36:	428d      	cmp	r5, r1
   1fe38:	4189      	sbcs	r1, r1
   1fe3a:	4249      	negs	r1, r1
   1fe3c:	4441      	add	r1, r8
   1fe3e:	1876      	adds	r6, r6, r1
   1fe40:	9503      	str	r5, [sp, #12]
   1fe42:	e78f      	b.n	1fd64 <__aeabi_ddiv+0x4fc>
   1fe44:	201f      	movs	r0, #31
   1fe46:	4240      	negs	r0, r0
   1fe48:	1ac3      	subs	r3, r0, r3
   1fe4a:	4658      	mov	r0, fp
   1fe4c:	40d8      	lsrs	r0, r3
   1fe4e:	0003      	movs	r3, r0
   1fe50:	2a20      	cmp	r2, #32
   1fe52:	d028      	beq.n	1fea6 <__aeabi_ddiv+0x63e>
   1fe54:	2040      	movs	r0, #64	; 0x40
   1fe56:	465d      	mov	r5, fp
   1fe58:	1a82      	subs	r2, r0, r2
   1fe5a:	4095      	lsls	r5, r2
   1fe5c:	4329      	orrs	r1, r5
   1fe5e:	1e4a      	subs	r2, r1, #1
   1fe60:	4191      	sbcs	r1, r2
   1fe62:	4319      	orrs	r1, r3
   1fe64:	2307      	movs	r3, #7
   1fe66:	2200      	movs	r2, #0
   1fe68:	400b      	ands	r3, r1
   1fe6a:	d009      	beq.n	1fe80 <__aeabi_ddiv+0x618>
   1fe6c:	230f      	movs	r3, #15
   1fe6e:	2200      	movs	r2, #0
   1fe70:	400b      	ands	r3, r1
   1fe72:	0008      	movs	r0, r1
   1fe74:	2b04      	cmp	r3, #4
   1fe76:	d1bd      	bne.n	1fdf4 <__aeabi_ddiv+0x58c>
   1fe78:	0001      	movs	r1, r0
   1fe7a:	0753      	lsls	r3, r2, #29
   1fe7c:	0252      	lsls	r2, r2, #9
   1fe7e:	0b12      	lsrs	r2, r2, #12
   1fe80:	08c9      	lsrs	r1, r1, #3
   1fe82:	4319      	orrs	r1, r3
   1fe84:	2301      	movs	r3, #1
   1fe86:	4688      	mov	r8, r1
   1fe88:	9902      	ldr	r1, [sp, #8]
   1fe8a:	2400      	movs	r4, #0
   1fe8c:	4019      	ands	r1, r3
   1fe8e:	468c      	mov	ip, r1
   1fe90:	e5b8      	b.n	1fa04 <__aeabi_ddiv+0x19c>
   1fe92:	4552      	cmp	r2, sl
   1fe94:	d8be      	bhi.n	1fe14 <__aeabi_ddiv+0x5ac>
   1fe96:	468b      	mov	fp, r1
   1fe98:	2500      	movs	r5, #0
   1fe9a:	e660      	b.n	1fb5e <__aeabi_ddiv+0x2f6>
   1fe9c:	9d03      	ldr	r5, [sp, #12]
   1fe9e:	429d      	cmp	r5, r3
   1fea0:	d3c6      	bcc.n	1fe30 <__aeabi_ddiv+0x5c8>
   1fea2:	0011      	movs	r1, r2
   1fea4:	e762      	b.n	1fd6c <__aeabi_ddiv+0x504>
   1fea6:	2500      	movs	r5, #0
   1fea8:	e7d8      	b.n	1fe5c <__aeabi_ddiv+0x5f4>
   1feaa:	2280      	movs	r2, #128	; 0x80
   1feac:	465b      	mov	r3, fp
   1feae:	0312      	lsls	r2, r2, #12
   1feb0:	431a      	orrs	r2, r3
   1feb2:	9b01      	ldr	r3, [sp, #4]
   1feb4:	0312      	lsls	r2, r2, #12
   1feb6:	0b12      	lsrs	r2, r2, #12
   1feb8:	469c      	mov	ip, r3
   1feba:	4688      	mov	r8, r1
   1febc:	4c03      	ldr	r4, [pc, #12]	; (1fecc <__aeabi_ddiv+0x664>)
   1febe:	e5a1      	b.n	1fa04 <__aeabi_ddiv+0x19c>
   1fec0:	000003ff 	.word	0x000003ff
   1fec4:	feffffff 	.word	0xfeffffff
   1fec8:	000007fe 	.word	0x000007fe
   1fecc:	000007ff 	.word	0x000007ff

0001fed0 <__eqdf2>:
   1fed0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fed2:	464f      	mov	r7, r9
   1fed4:	4646      	mov	r6, r8
   1fed6:	46d6      	mov	lr, sl
   1fed8:	005c      	lsls	r4, r3, #1
   1feda:	b5c0      	push	{r6, r7, lr}
   1fedc:	031f      	lsls	r7, r3, #12
   1fede:	0fdb      	lsrs	r3, r3, #31
   1fee0:	469a      	mov	sl, r3
   1fee2:	4b17      	ldr	r3, [pc, #92]	; (1ff40 <__eqdf2+0x70>)
   1fee4:	030e      	lsls	r6, r1, #12
   1fee6:	004d      	lsls	r5, r1, #1
   1fee8:	4684      	mov	ip, r0
   1feea:	4680      	mov	r8, r0
   1feec:	0b36      	lsrs	r6, r6, #12
   1feee:	0d6d      	lsrs	r5, r5, #21
   1fef0:	0fc9      	lsrs	r1, r1, #31
   1fef2:	4691      	mov	r9, r2
   1fef4:	0b3f      	lsrs	r7, r7, #12
   1fef6:	0d64      	lsrs	r4, r4, #21
   1fef8:	2001      	movs	r0, #1
   1fefa:	429d      	cmp	r5, r3
   1fefc:	d008      	beq.n	1ff10 <__eqdf2+0x40>
   1fefe:	429c      	cmp	r4, r3
   1ff00:	d001      	beq.n	1ff06 <__eqdf2+0x36>
   1ff02:	42a5      	cmp	r5, r4
   1ff04:	d00b      	beq.n	1ff1e <__eqdf2+0x4e>
   1ff06:	bc1c      	pop	{r2, r3, r4}
   1ff08:	4690      	mov	r8, r2
   1ff0a:	4699      	mov	r9, r3
   1ff0c:	46a2      	mov	sl, r4
   1ff0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ff10:	4663      	mov	r3, ip
   1ff12:	4333      	orrs	r3, r6
   1ff14:	d1f7      	bne.n	1ff06 <__eqdf2+0x36>
   1ff16:	42ac      	cmp	r4, r5
   1ff18:	d1f5      	bne.n	1ff06 <__eqdf2+0x36>
   1ff1a:	433a      	orrs	r2, r7
   1ff1c:	d1f3      	bne.n	1ff06 <__eqdf2+0x36>
   1ff1e:	2001      	movs	r0, #1
   1ff20:	42be      	cmp	r6, r7
   1ff22:	d1f0      	bne.n	1ff06 <__eqdf2+0x36>
   1ff24:	45c8      	cmp	r8, r9
   1ff26:	d1ee      	bne.n	1ff06 <__eqdf2+0x36>
   1ff28:	4551      	cmp	r1, sl
   1ff2a:	d007      	beq.n	1ff3c <__eqdf2+0x6c>
   1ff2c:	2d00      	cmp	r5, #0
   1ff2e:	d1ea      	bne.n	1ff06 <__eqdf2+0x36>
   1ff30:	4663      	mov	r3, ip
   1ff32:	431e      	orrs	r6, r3
   1ff34:	0030      	movs	r0, r6
   1ff36:	1e46      	subs	r6, r0, #1
   1ff38:	41b0      	sbcs	r0, r6
   1ff3a:	e7e4      	b.n	1ff06 <__eqdf2+0x36>
   1ff3c:	2000      	movs	r0, #0
   1ff3e:	e7e2      	b.n	1ff06 <__eqdf2+0x36>
   1ff40:	000007ff 	.word	0x000007ff

0001ff44 <__gedf2>:
   1ff44:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ff46:	4645      	mov	r5, r8
   1ff48:	46de      	mov	lr, fp
   1ff4a:	4657      	mov	r7, sl
   1ff4c:	464e      	mov	r6, r9
   1ff4e:	b5e0      	push	{r5, r6, r7, lr}
   1ff50:	031f      	lsls	r7, r3, #12
   1ff52:	0b3d      	lsrs	r5, r7, #12
   1ff54:	4f2c      	ldr	r7, [pc, #176]	; (20008 <__gedf2+0xc4>)
   1ff56:	030e      	lsls	r6, r1, #12
   1ff58:	004c      	lsls	r4, r1, #1
   1ff5a:	46ab      	mov	fp, r5
   1ff5c:	005d      	lsls	r5, r3, #1
   1ff5e:	4684      	mov	ip, r0
   1ff60:	0b36      	lsrs	r6, r6, #12
   1ff62:	0d64      	lsrs	r4, r4, #21
   1ff64:	0fc9      	lsrs	r1, r1, #31
   1ff66:	4690      	mov	r8, r2
   1ff68:	0d6d      	lsrs	r5, r5, #21
   1ff6a:	0fdb      	lsrs	r3, r3, #31
   1ff6c:	42bc      	cmp	r4, r7
   1ff6e:	d02a      	beq.n	1ffc6 <__gedf2+0x82>
   1ff70:	4f25      	ldr	r7, [pc, #148]	; (20008 <__gedf2+0xc4>)
   1ff72:	42bd      	cmp	r5, r7
   1ff74:	d02d      	beq.n	1ffd2 <__gedf2+0x8e>
   1ff76:	2c00      	cmp	r4, #0
   1ff78:	d10f      	bne.n	1ff9a <__gedf2+0x56>
   1ff7a:	4330      	orrs	r0, r6
   1ff7c:	0007      	movs	r7, r0
   1ff7e:	4681      	mov	r9, r0
   1ff80:	4278      	negs	r0, r7
   1ff82:	4178      	adcs	r0, r7
   1ff84:	b2c0      	uxtb	r0, r0
   1ff86:	2d00      	cmp	r5, #0
   1ff88:	d117      	bne.n	1ffba <__gedf2+0x76>
   1ff8a:	465f      	mov	r7, fp
   1ff8c:	433a      	orrs	r2, r7
   1ff8e:	d114      	bne.n	1ffba <__gedf2+0x76>
   1ff90:	464b      	mov	r3, r9
   1ff92:	2000      	movs	r0, #0
   1ff94:	2b00      	cmp	r3, #0
   1ff96:	d00a      	beq.n	1ffae <__gedf2+0x6a>
   1ff98:	e006      	b.n	1ffa8 <__gedf2+0x64>
   1ff9a:	2d00      	cmp	r5, #0
   1ff9c:	d102      	bne.n	1ffa4 <__gedf2+0x60>
   1ff9e:	4658      	mov	r0, fp
   1ffa0:	4302      	orrs	r2, r0
   1ffa2:	d001      	beq.n	1ffa8 <__gedf2+0x64>
   1ffa4:	4299      	cmp	r1, r3
   1ffa6:	d018      	beq.n	1ffda <__gedf2+0x96>
   1ffa8:	4248      	negs	r0, r1
   1ffaa:	2101      	movs	r1, #1
   1ffac:	4308      	orrs	r0, r1
   1ffae:	bc3c      	pop	{r2, r3, r4, r5}
   1ffb0:	4690      	mov	r8, r2
   1ffb2:	4699      	mov	r9, r3
   1ffb4:	46a2      	mov	sl, r4
   1ffb6:	46ab      	mov	fp, r5
   1ffb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ffba:	2800      	cmp	r0, #0
   1ffbc:	d0f2      	beq.n	1ffa4 <__gedf2+0x60>
   1ffbe:	2001      	movs	r0, #1
   1ffc0:	3b01      	subs	r3, #1
   1ffc2:	4318      	orrs	r0, r3
   1ffc4:	e7f3      	b.n	1ffae <__gedf2+0x6a>
   1ffc6:	0037      	movs	r7, r6
   1ffc8:	4307      	orrs	r7, r0
   1ffca:	d0d1      	beq.n	1ff70 <__gedf2+0x2c>
   1ffcc:	2002      	movs	r0, #2
   1ffce:	4240      	negs	r0, r0
   1ffd0:	e7ed      	b.n	1ffae <__gedf2+0x6a>
   1ffd2:	465f      	mov	r7, fp
   1ffd4:	4317      	orrs	r7, r2
   1ffd6:	d0ce      	beq.n	1ff76 <__gedf2+0x32>
   1ffd8:	e7f8      	b.n	1ffcc <__gedf2+0x88>
   1ffda:	42ac      	cmp	r4, r5
   1ffdc:	dce4      	bgt.n	1ffa8 <__gedf2+0x64>
   1ffde:	da03      	bge.n	1ffe8 <__gedf2+0xa4>
   1ffe0:	1e48      	subs	r0, r1, #1
   1ffe2:	2101      	movs	r1, #1
   1ffe4:	4308      	orrs	r0, r1
   1ffe6:	e7e2      	b.n	1ffae <__gedf2+0x6a>
   1ffe8:	455e      	cmp	r6, fp
   1ffea:	d8dd      	bhi.n	1ffa8 <__gedf2+0x64>
   1ffec:	d006      	beq.n	1fffc <__gedf2+0xb8>
   1ffee:	2000      	movs	r0, #0
   1fff0:	455e      	cmp	r6, fp
   1fff2:	d2dc      	bcs.n	1ffae <__gedf2+0x6a>
   1fff4:	2301      	movs	r3, #1
   1fff6:	1e48      	subs	r0, r1, #1
   1fff8:	4318      	orrs	r0, r3
   1fffa:	e7d8      	b.n	1ffae <__gedf2+0x6a>
   1fffc:	45c4      	cmp	ip, r8
   1fffe:	d8d3      	bhi.n	1ffa8 <__gedf2+0x64>
   20000:	2000      	movs	r0, #0
   20002:	45c4      	cmp	ip, r8
   20004:	d3f6      	bcc.n	1fff4 <__gedf2+0xb0>
   20006:	e7d2      	b.n	1ffae <__gedf2+0x6a>
   20008:	000007ff 	.word	0x000007ff

0002000c <__ledf2>:
   2000c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2000e:	464e      	mov	r6, r9
   20010:	4645      	mov	r5, r8
   20012:	46de      	mov	lr, fp
   20014:	4657      	mov	r7, sl
   20016:	005c      	lsls	r4, r3, #1
   20018:	b5e0      	push	{r5, r6, r7, lr}
   2001a:	031f      	lsls	r7, r3, #12
   2001c:	0fdb      	lsrs	r3, r3, #31
   2001e:	4699      	mov	r9, r3
   20020:	4b2a      	ldr	r3, [pc, #168]	; (200cc <__ledf2+0xc0>)
   20022:	030e      	lsls	r6, r1, #12
   20024:	004d      	lsls	r5, r1, #1
   20026:	0fc9      	lsrs	r1, r1, #31
   20028:	4684      	mov	ip, r0
   2002a:	0b36      	lsrs	r6, r6, #12
   2002c:	0d6d      	lsrs	r5, r5, #21
   2002e:	468b      	mov	fp, r1
   20030:	4690      	mov	r8, r2
   20032:	0b3f      	lsrs	r7, r7, #12
   20034:	0d64      	lsrs	r4, r4, #21
   20036:	429d      	cmp	r5, r3
   20038:	d020      	beq.n	2007c <__ledf2+0x70>
   2003a:	4b24      	ldr	r3, [pc, #144]	; (200cc <__ledf2+0xc0>)
   2003c:	429c      	cmp	r4, r3
   2003e:	d022      	beq.n	20086 <__ledf2+0x7a>
   20040:	2d00      	cmp	r5, #0
   20042:	d112      	bne.n	2006a <__ledf2+0x5e>
   20044:	4330      	orrs	r0, r6
   20046:	4243      	negs	r3, r0
   20048:	4143      	adcs	r3, r0
   2004a:	b2db      	uxtb	r3, r3
   2004c:	2c00      	cmp	r4, #0
   2004e:	d01f      	beq.n	20090 <__ledf2+0x84>
   20050:	2b00      	cmp	r3, #0
   20052:	d00c      	beq.n	2006e <__ledf2+0x62>
   20054:	464b      	mov	r3, r9
   20056:	2001      	movs	r0, #1
   20058:	3b01      	subs	r3, #1
   2005a:	4303      	orrs	r3, r0
   2005c:	0018      	movs	r0, r3
   2005e:	bc3c      	pop	{r2, r3, r4, r5}
   20060:	4690      	mov	r8, r2
   20062:	4699      	mov	r9, r3
   20064:	46a2      	mov	sl, r4
   20066:	46ab      	mov	fp, r5
   20068:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2006a:	2c00      	cmp	r4, #0
   2006c:	d016      	beq.n	2009c <__ledf2+0x90>
   2006e:	45cb      	cmp	fp, r9
   20070:	d017      	beq.n	200a2 <__ledf2+0x96>
   20072:	465b      	mov	r3, fp
   20074:	4259      	negs	r1, r3
   20076:	2301      	movs	r3, #1
   20078:	430b      	orrs	r3, r1
   2007a:	e7ef      	b.n	2005c <__ledf2+0x50>
   2007c:	0031      	movs	r1, r6
   2007e:	2302      	movs	r3, #2
   20080:	4301      	orrs	r1, r0
   20082:	d1eb      	bne.n	2005c <__ledf2+0x50>
   20084:	e7d9      	b.n	2003a <__ledf2+0x2e>
   20086:	0039      	movs	r1, r7
   20088:	2302      	movs	r3, #2
   2008a:	4311      	orrs	r1, r2
   2008c:	d1e6      	bne.n	2005c <__ledf2+0x50>
   2008e:	e7d7      	b.n	20040 <__ledf2+0x34>
   20090:	433a      	orrs	r2, r7
   20092:	d1dd      	bne.n	20050 <__ledf2+0x44>
   20094:	2300      	movs	r3, #0
   20096:	2800      	cmp	r0, #0
   20098:	d0e0      	beq.n	2005c <__ledf2+0x50>
   2009a:	e7ea      	b.n	20072 <__ledf2+0x66>
   2009c:	433a      	orrs	r2, r7
   2009e:	d1e6      	bne.n	2006e <__ledf2+0x62>
   200a0:	e7e7      	b.n	20072 <__ledf2+0x66>
   200a2:	42a5      	cmp	r5, r4
   200a4:	dce5      	bgt.n	20072 <__ledf2+0x66>
   200a6:	db05      	blt.n	200b4 <__ledf2+0xa8>
   200a8:	42be      	cmp	r6, r7
   200aa:	d8e2      	bhi.n	20072 <__ledf2+0x66>
   200ac:	d007      	beq.n	200be <__ledf2+0xb2>
   200ae:	2300      	movs	r3, #0
   200b0:	42be      	cmp	r6, r7
   200b2:	d2d3      	bcs.n	2005c <__ledf2+0x50>
   200b4:	4659      	mov	r1, fp
   200b6:	2301      	movs	r3, #1
   200b8:	3901      	subs	r1, #1
   200ba:	430b      	orrs	r3, r1
   200bc:	e7ce      	b.n	2005c <__ledf2+0x50>
   200be:	45c4      	cmp	ip, r8
   200c0:	d8d7      	bhi.n	20072 <__ledf2+0x66>
   200c2:	2300      	movs	r3, #0
   200c4:	45c4      	cmp	ip, r8
   200c6:	d3f5      	bcc.n	200b4 <__ledf2+0xa8>
   200c8:	e7c8      	b.n	2005c <__ledf2+0x50>
   200ca:	46c0      	nop			; (mov r8, r8)
   200cc:	000007ff 	.word	0x000007ff

000200d0 <__aeabi_dmul>:
   200d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   200d2:	4657      	mov	r7, sl
   200d4:	4645      	mov	r5, r8
   200d6:	46de      	mov	lr, fp
   200d8:	464e      	mov	r6, r9
   200da:	b5e0      	push	{r5, r6, r7, lr}
   200dc:	030c      	lsls	r4, r1, #12
   200de:	4698      	mov	r8, r3
   200e0:	004e      	lsls	r6, r1, #1
   200e2:	0b23      	lsrs	r3, r4, #12
   200e4:	b087      	sub	sp, #28
   200e6:	0007      	movs	r7, r0
   200e8:	4692      	mov	sl, r2
   200ea:	469b      	mov	fp, r3
   200ec:	0d76      	lsrs	r6, r6, #21
   200ee:	0fcd      	lsrs	r5, r1, #31
   200f0:	2e00      	cmp	r6, #0
   200f2:	d06b      	beq.n	201cc <__aeabi_dmul+0xfc>
   200f4:	4b6d      	ldr	r3, [pc, #436]	; (202ac <__aeabi_dmul+0x1dc>)
   200f6:	429e      	cmp	r6, r3
   200f8:	d035      	beq.n	20166 <__aeabi_dmul+0x96>
   200fa:	2480      	movs	r4, #128	; 0x80
   200fc:	465b      	mov	r3, fp
   200fe:	0f42      	lsrs	r2, r0, #29
   20100:	0424      	lsls	r4, r4, #16
   20102:	00db      	lsls	r3, r3, #3
   20104:	4314      	orrs	r4, r2
   20106:	431c      	orrs	r4, r3
   20108:	00c3      	lsls	r3, r0, #3
   2010a:	4699      	mov	r9, r3
   2010c:	4b68      	ldr	r3, [pc, #416]	; (202b0 <__aeabi_dmul+0x1e0>)
   2010e:	46a3      	mov	fp, r4
   20110:	469c      	mov	ip, r3
   20112:	2300      	movs	r3, #0
   20114:	2700      	movs	r7, #0
   20116:	4466      	add	r6, ip
   20118:	9302      	str	r3, [sp, #8]
   2011a:	4643      	mov	r3, r8
   2011c:	031c      	lsls	r4, r3, #12
   2011e:	005a      	lsls	r2, r3, #1
   20120:	0fdb      	lsrs	r3, r3, #31
   20122:	4650      	mov	r0, sl
   20124:	0b24      	lsrs	r4, r4, #12
   20126:	0d52      	lsrs	r2, r2, #21
   20128:	4698      	mov	r8, r3
   2012a:	d100      	bne.n	2012e <__aeabi_dmul+0x5e>
   2012c:	e076      	b.n	2021c <__aeabi_dmul+0x14c>
   2012e:	4b5f      	ldr	r3, [pc, #380]	; (202ac <__aeabi_dmul+0x1dc>)
   20130:	429a      	cmp	r2, r3
   20132:	d06d      	beq.n	20210 <__aeabi_dmul+0x140>
   20134:	2380      	movs	r3, #128	; 0x80
   20136:	0f41      	lsrs	r1, r0, #29
   20138:	041b      	lsls	r3, r3, #16
   2013a:	430b      	orrs	r3, r1
   2013c:	495c      	ldr	r1, [pc, #368]	; (202b0 <__aeabi_dmul+0x1e0>)
   2013e:	00e4      	lsls	r4, r4, #3
   20140:	468c      	mov	ip, r1
   20142:	431c      	orrs	r4, r3
   20144:	00c3      	lsls	r3, r0, #3
   20146:	2000      	movs	r0, #0
   20148:	4462      	add	r2, ip
   2014a:	4641      	mov	r1, r8
   2014c:	18b6      	adds	r6, r6, r2
   2014e:	4069      	eors	r1, r5
   20150:	1c72      	adds	r2, r6, #1
   20152:	9101      	str	r1, [sp, #4]
   20154:	4694      	mov	ip, r2
   20156:	4307      	orrs	r7, r0
   20158:	2f0f      	cmp	r7, #15
   2015a:	d900      	bls.n	2015e <__aeabi_dmul+0x8e>
   2015c:	e0b0      	b.n	202c0 <__aeabi_dmul+0x1f0>
   2015e:	4a55      	ldr	r2, [pc, #340]	; (202b4 <__aeabi_dmul+0x1e4>)
   20160:	00bf      	lsls	r7, r7, #2
   20162:	59d2      	ldr	r2, [r2, r7]
   20164:	4697      	mov	pc, r2
   20166:	465b      	mov	r3, fp
   20168:	4303      	orrs	r3, r0
   2016a:	4699      	mov	r9, r3
   2016c:	d000      	beq.n	20170 <__aeabi_dmul+0xa0>
   2016e:	e087      	b.n	20280 <__aeabi_dmul+0x1b0>
   20170:	2300      	movs	r3, #0
   20172:	469b      	mov	fp, r3
   20174:	3302      	adds	r3, #2
   20176:	2708      	movs	r7, #8
   20178:	9302      	str	r3, [sp, #8]
   2017a:	e7ce      	b.n	2011a <__aeabi_dmul+0x4a>
   2017c:	4642      	mov	r2, r8
   2017e:	9201      	str	r2, [sp, #4]
   20180:	2802      	cmp	r0, #2
   20182:	d067      	beq.n	20254 <__aeabi_dmul+0x184>
   20184:	2803      	cmp	r0, #3
   20186:	d100      	bne.n	2018a <__aeabi_dmul+0xba>
   20188:	e20e      	b.n	205a8 <__aeabi_dmul+0x4d8>
   2018a:	2801      	cmp	r0, #1
   2018c:	d000      	beq.n	20190 <__aeabi_dmul+0xc0>
   2018e:	e162      	b.n	20456 <__aeabi_dmul+0x386>
   20190:	2300      	movs	r3, #0
   20192:	2400      	movs	r4, #0
   20194:	2200      	movs	r2, #0
   20196:	4699      	mov	r9, r3
   20198:	9901      	ldr	r1, [sp, #4]
   2019a:	4001      	ands	r1, r0
   2019c:	b2cd      	uxtb	r5, r1
   2019e:	2100      	movs	r1, #0
   201a0:	0312      	lsls	r2, r2, #12
   201a2:	0d0b      	lsrs	r3, r1, #20
   201a4:	0b12      	lsrs	r2, r2, #12
   201a6:	051b      	lsls	r3, r3, #20
   201a8:	4313      	orrs	r3, r2
   201aa:	4a43      	ldr	r2, [pc, #268]	; (202b8 <__aeabi_dmul+0x1e8>)
   201ac:	0524      	lsls	r4, r4, #20
   201ae:	4013      	ands	r3, r2
   201b0:	431c      	orrs	r4, r3
   201b2:	0064      	lsls	r4, r4, #1
   201b4:	07ed      	lsls	r5, r5, #31
   201b6:	0864      	lsrs	r4, r4, #1
   201b8:	432c      	orrs	r4, r5
   201ba:	4648      	mov	r0, r9
   201bc:	0021      	movs	r1, r4
   201be:	b007      	add	sp, #28
   201c0:	bc3c      	pop	{r2, r3, r4, r5}
   201c2:	4690      	mov	r8, r2
   201c4:	4699      	mov	r9, r3
   201c6:	46a2      	mov	sl, r4
   201c8:	46ab      	mov	fp, r5
   201ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   201cc:	4303      	orrs	r3, r0
   201ce:	4699      	mov	r9, r3
   201d0:	d04f      	beq.n	20272 <__aeabi_dmul+0x1a2>
   201d2:	465b      	mov	r3, fp
   201d4:	2b00      	cmp	r3, #0
   201d6:	d100      	bne.n	201da <__aeabi_dmul+0x10a>
   201d8:	e189      	b.n	204ee <__aeabi_dmul+0x41e>
   201da:	4658      	mov	r0, fp
   201dc:	f7fe f8a2 	bl	1e324 <__clzsi2>
   201e0:	0003      	movs	r3, r0
   201e2:	3b0b      	subs	r3, #11
   201e4:	2b1c      	cmp	r3, #28
   201e6:	dd00      	ble.n	201ea <__aeabi_dmul+0x11a>
   201e8:	e17a      	b.n	204e0 <__aeabi_dmul+0x410>
   201ea:	221d      	movs	r2, #29
   201ec:	1ad3      	subs	r3, r2, r3
   201ee:	003a      	movs	r2, r7
   201f0:	0001      	movs	r1, r0
   201f2:	465c      	mov	r4, fp
   201f4:	40da      	lsrs	r2, r3
   201f6:	3908      	subs	r1, #8
   201f8:	408c      	lsls	r4, r1
   201fa:	0013      	movs	r3, r2
   201fc:	408f      	lsls	r7, r1
   201fe:	4323      	orrs	r3, r4
   20200:	469b      	mov	fp, r3
   20202:	46b9      	mov	r9, r7
   20204:	2300      	movs	r3, #0
   20206:	4e2d      	ldr	r6, [pc, #180]	; (202bc <__aeabi_dmul+0x1ec>)
   20208:	2700      	movs	r7, #0
   2020a:	1a36      	subs	r6, r6, r0
   2020c:	9302      	str	r3, [sp, #8]
   2020e:	e784      	b.n	2011a <__aeabi_dmul+0x4a>
   20210:	4653      	mov	r3, sl
   20212:	4323      	orrs	r3, r4
   20214:	d12a      	bne.n	2026c <__aeabi_dmul+0x19c>
   20216:	2400      	movs	r4, #0
   20218:	2002      	movs	r0, #2
   2021a:	e796      	b.n	2014a <__aeabi_dmul+0x7a>
   2021c:	4653      	mov	r3, sl
   2021e:	4323      	orrs	r3, r4
   20220:	d020      	beq.n	20264 <__aeabi_dmul+0x194>
   20222:	2c00      	cmp	r4, #0
   20224:	d100      	bne.n	20228 <__aeabi_dmul+0x158>
   20226:	e157      	b.n	204d8 <__aeabi_dmul+0x408>
   20228:	0020      	movs	r0, r4
   2022a:	f7fe f87b 	bl	1e324 <__clzsi2>
   2022e:	0003      	movs	r3, r0
   20230:	3b0b      	subs	r3, #11
   20232:	2b1c      	cmp	r3, #28
   20234:	dd00      	ble.n	20238 <__aeabi_dmul+0x168>
   20236:	e149      	b.n	204cc <__aeabi_dmul+0x3fc>
   20238:	211d      	movs	r1, #29
   2023a:	1acb      	subs	r3, r1, r3
   2023c:	4651      	mov	r1, sl
   2023e:	0002      	movs	r2, r0
   20240:	40d9      	lsrs	r1, r3
   20242:	4653      	mov	r3, sl
   20244:	3a08      	subs	r2, #8
   20246:	4094      	lsls	r4, r2
   20248:	4093      	lsls	r3, r2
   2024a:	430c      	orrs	r4, r1
   2024c:	4a1b      	ldr	r2, [pc, #108]	; (202bc <__aeabi_dmul+0x1ec>)
   2024e:	1a12      	subs	r2, r2, r0
   20250:	2000      	movs	r0, #0
   20252:	e77a      	b.n	2014a <__aeabi_dmul+0x7a>
   20254:	2501      	movs	r5, #1
   20256:	9b01      	ldr	r3, [sp, #4]
   20258:	4c14      	ldr	r4, [pc, #80]	; (202ac <__aeabi_dmul+0x1dc>)
   2025a:	401d      	ands	r5, r3
   2025c:	2300      	movs	r3, #0
   2025e:	2200      	movs	r2, #0
   20260:	4699      	mov	r9, r3
   20262:	e79c      	b.n	2019e <__aeabi_dmul+0xce>
   20264:	2400      	movs	r4, #0
   20266:	2200      	movs	r2, #0
   20268:	2001      	movs	r0, #1
   2026a:	e76e      	b.n	2014a <__aeabi_dmul+0x7a>
   2026c:	4653      	mov	r3, sl
   2026e:	2003      	movs	r0, #3
   20270:	e76b      	b.n	2014a <__aeabi_dmul+0x7a>
   20272:	2300      	movs	r3, #0
   20274:	469b      	mov	fp, r3
   20276:	3301      	adds	r3, #1
   20278:	2704      	movs	r7, #4
   2027a:	2600      	movs	r6, #0
   2027c:	9302      	str	r3, [sp, #8]
   2027e:	e74c      	b.n	2011a <__aeabi_dmul+0x4a>
   20280:	2303      	movs	r3, #3
   20282:	4681      	mov	r9, r0
   20284:	270c      	movs	r7, #12
   20286:	9302      	str	r3, [sp, #8]
   20288:	e747      	b.n	2011a <__aeabi_dmul+0x4a>
   2028a:	2280      	movs	r2, #128	; 0x80
   2028c:	2300      	movs	r3, #0
   2028e:	2500      	movs	r5, #0
   20290:	0312      	lsls	r2, r2, #12
   20292:	4699      	mov	r9, r3
   20294:	4c05      	ldr	r4, [pc, #20]	; (202ac <__aeabi_dmul+0x1dc>)
   20296:	e782      	b.n	2019e <__aeabi_dmul+0xce>
   20298:	465c      	mov	r4, fp
   2029a:	464b      	mov	r3, r9
   2029c:	9802      	ldr	r0, [sp, #8]
   2029e:	e76f      	b.n	20180 <__aeabi_dmul+0xb0>
   202a0:	465c      	mov	r4, fp
   202a2:	464b      	mov	r3, r9
   202a4:	9501      	str	r5, [sp, #4]
   202a6:	9802      	ldr	r0, [sp, #8]
   202a8:	e76a      	b.n	20180 <__aeabi_dmul+0xb0>
   202aa:	46c0      	nop			; (mov r8, r8)
   202ac:	000007ff 	.word	0x000007ff
   202b0:	fffffc01 	.word	0xfffffc01
   202b4:	00026e90 	.word	0x00026e90
   202b8:	800fffff 	.word	0x800fffff
   202bc:	fffffc0d 	.word	0xfffffc0d
   202c0:	464a      	mov	r2, r9
   202c2:	4649      	mov	r1, r9
   202c4:	0c17      	lsrs	r7, r2, #16
   202c6:	0c1a      	lsrs	r2, r3, #16
   202c8:	041b      	lsls	r3, r3, #16
   202ca:	0c1b      	lsrs	r3, r3, #16
   202cc:	0408      	lsls	r0, r1, #16
   202ce:	0019      	movs	r1, r3
   202d0:	0c00      	lsrs	r0, r0, #16
   202d2:	4341      	muls	r1, r0
   202d4:	0015      	movs	r5, r2
   202d6:	4688      	mov	r8, r1
   202d8:	0019      	movs	r1, r3
   202da:	437d      	muls	r5, r7
   202dc:	4379      	muls	r1, r7
   202de:	9503      	str	r5, [sp, #12]
   202e0:	4689      	mov	r9, r1
   202e2:	0029      	movs	r1, r5
   202e4:	0015      	movs	r5, r2
   202e6:	4345      	muls	r5, r0
   202e8:	444d      	add	r5, r9
   202ea:	9502      	str	r5, [sp, #8]
   202ec:	4645      	mov	r5, r8
   202ee:	0c2d      	lsrs	r5, r5, #16
   202f0:	46aa      	mov	sl, r5
   202f2:	9d02      	ldr	r5, [sp, #8]
   202f4:	4455      	add	r5, sl
   202f6:	45a9      	cmp	r9, r5
   202f8:	d906      	bls.n	20308 <__aeabi_dmul+0x238>
   202fa:	468a      	mov	sl, r1
   202fc:	2180      	movs	r1, #128	; 0x80
   202fe:	0249      	lsls	r1, r1, #9
   20300:	4689      	mov	r9, r1
   20302:	44ca      	add	sl, r9
   20304:	4651      	mov	r1, sl
   20306:	9103      	str	r1, [sp, #12]
   20308:	0c29      	lsrs	r1, r5, #16
   2030a:	9104      	str	r1, [sp, #16]
   2030c:	4641      	mov	r1, r8
   2030e:	0409      	lsls	r1, r1, #16
   20310:	042d      	lsls	r5, r5, #16
   20312:	0c09      	lsrs	r1, r1, #16
   20314:	4688      	mov	r8, r1
   20316:	0029      	movs	r1, r5
   20318:	0c25      	lsrs	r5, r4, #16
   2031a:	0424      	lsls	r4, r4, #16
   2031c:	4441      	add	r1, r8
   2031e:	0c24      	lsrs	r4, r4, #16
   20320:	9105      	str	r1, [sp, #20]
   20322:	0021      	movs	r1, r4
   20324:	4341      	muls	r1, r0
   20326:	4688      	mov	r8, r1
   20328:	0021      	movs	r1, r4
   2032a:	4379      	muls	r1, r7
   2032c:	468a      	mov	sl, r1
   2032e:	4368      	muls	r0, r5
   20330:	4641      	mov	r1, r8
   20332:	4450      	add	r0, sl
   20334:	4681      	mov	r9, r0
   20336:	0c08      	lsrs	r0, r1, #16
   20338:	4448      	add	r0, r9
   2033a:	436f      	muls	r7, r5
   2033c:	4582      	cmp	sl, r0
   2033e:	d903      	bls.n	20348 <__aeabi_dmul+0x278>
   20340:	2180      	movs	r1, #128	; 0x80
   20342:	0249      	lsls	r1, r1, #9
   20344:	4689      	mov	r9, r1
   20346:	444f      	add	r7, r9
   20348:	0c01      	lsrs	r1, r0, #16
   2034a:	4689      	mov	r9, r1
   2034c:	0039      	movs	r1, r7
   2034e:	4449      	add	r1, r9
   20350:	9102      	str	r1, [sp, #8]
   20352:	4641      	mov	r1, r8
   20354:	040f      	lsls	r7, r1, #16
   20356:	9904      	ldr	r1, [sp, #16]
   20358:	0c3f      	lsrs	r7, r7, #16
   2035a:	4688      	mov	r8, r1
   2035c:	0400      	lsls	r0, r0, #16
   2035e:	19c0      	adds	r0, r0, r7
   20360:	4480      	add	r8, r0
   20362:	4641      	mov	r1, r8
   20364:	9104      	str	r1, [sp, #16]
   20366:	4659      	mov	r1, fp
   20368:	0c0f      	lsrs	r7, r1, #16
   2036a:	0409      	lsls	r1, r1, #16
   2036c:	0c09      	lsrs	r1, r1, #16
   2036e:	4688      	mov	r8, r1
   20370:	4359      	muls	r1, r3
   20372:	468a      	mov	sl, r1
   20374:	0039      	movs	r1, r7
   20376:	4351      	muls	r1, r2
   20378:	4689      	mov	r9, r1
   2037a:	4641      	mov	r1, r8
   2037c:	434a      	muls	r2, r1
   2037e:	4651      	mov	r1, sl
   20380:	0c09      	lsrs	r1, r1, #16
   20382:	468b      	mov	fp, r1
   20384:	437b      	muls	r3, r7
   20386:	18d2      	adds	r2, r2, r3
   20388:	445a      	add	r2, fp
   2038a:	4293      	cmp	r3, r2
   2038c:	d903      	bls.n	20396 <__aeabi_dmul+0x2c6>
   2038e:	2380      	movs	r3, #128	; 0x80
   20390:	025b      	lsls	r3, r3, #9
   20392:	469b      	mov	fp, r3
   20394:	44d9      	add	r9, fp
   20396:	4651      	mov	r1, sl
   20398:	0409      	lsls	r1, r1, #16
   2039a:	0c09      	lsrs	r1, r1, #16
   2039c:	468a      	mov	sl, r1
   2039e:	4641      	mov	r1, r8
   203a0:	4361      	muls	r1, r4
   203a2:	437c      	muls	r4, r7
   203a4:	0c13      	lsrs	r3, r2, #16
   203a6:	0412      	lsls	r2, r2, #16
   203a8:	444b      	add	r3, r9
   203aa:	4452      	add	r2, sl
   203ac:	46a1      	mov	r9, r4
   203ae:	468a      	mov	sl, r1
   203b0:	003c      	movs	r4, r7
   203b2:	4641      	mov	r1, r8
   203b4:	436c      	muls	r4, r5
   203b6:	434d      	muls	r5, r1
   203b8:	4651      	mov	r1, sl
   203ba:	444d      	add	r5, r9
   203bc:	0c0f      	lsrs	r7, r1, #16
   203be:	197d      	adds	r5, r7, r5
   203c0:	45a9      	cmp	r9, r5
   203c2:	d903      	bls.n	203cc <__aeabi_dmul+0x2fc>
   203c4:	2180      	movs	r1, #128	; 0x80
   203c6:	0249      	lsls	r1, r1, #9
   203c8:	4688      	mov	r8, r1
   203ca:	4444      	add	r4, r8
   203cc:	9f04      	ldr	r7, [sp, #16]
   203ce:	9903      	ldr	r1, [sp, #12]
   203d0:	46b8      	mov	r8, r7
   203d2:	4441      	add	r1, r8
   203d4:	468b      	mov	fp, r1
   203d6:	4583      	cmp	fp, r0
   203d8:	4180      	sbcs	r0, r0
   203da:	4241      	negs	r1, r0
   203dc:	4688      	mov	r8, r1
   203de:	4651      	mov	r1, sl
   203e0:	0408      	lsls	r0, r1, #16
   203e2:	042f      	lsls	r7, r5, #16
   203e4:	0c00      	lsrs	r0, r0, #16
   203e6:	183f      	adds	r7, r7, r0
   203e8:	4658      	mov	r0, fp
   203ea:	9902      	ldr	r1, [sp, #8]
   203ec:	1810      	adds	r0, r2, r0
   203ee:	4689      	mov	r9, r1
   203f0:	4290      	cmp	r0, r2
   203f2:	4192      	sbcs	r2, r2
   203f4:	444f      	add	r7, r9
   203f6:	46ba      	mov	sl, r7
   203f8:	4252      	negs	r2, r2
   203fa:	4699      	mov	r9, r3
   203fc:	4693      	mov	fp, r2
   203fe:	44c2      	add	sl, r8
   20400:	44d1      	add	r9, sl
   20402:	44cb      	add	fp, r9
   20404:	428f      	cmp	r7, r1
   20406:	41bf      	sbcs	r7, r7
   20408:	45c2      	cmp	sl, r8
   2040a:	4189      	sbcs	r1, r1
   2040c:	4599      	cmp	r9, r3
   2040e:	419b      	sbcs	r3, r3
   20410:	4593      	cmp	fp, r2
   20412:	4192      	sbcs	r2, r2
   20414:	427f      	negs	r7, r7
   20416:	4249      	negs	r1, r1
   20418:	0c2d      	lsrs	r5, r5, #16
   2041a:	4252      	negs	r2, r2
   2041c:	430f      	orrs	r7, r1
   2041e:	425b      	negs	r3, r3
   20420:	4313      	orrs	r3, r2
   20422:	197f      	adds	r7, r7, r5
   20424:	18ff      	adds	r7, r7, r3
   20426:	465b      	mov	r3, fp
   20428:	193c      	adds	r4, r7, r4
   2042a:	0ddb      	lsrs	r3, r3, #23
   2042c:	9a05      	ldr	r2, [sp, #20]
   2042e:	0264      	lsls	r4, r4, #9
   20430:	431c      	orrs	r4, r3
   20432:	0243      	lsls	r3, r0, #9
   20434:	4313      	orrs	r3, r2
   20436:	1e5d      	subs	r5, r3, #1
   20438:	41ab      	sbcs	r3, r5
   2043a:	465a      	mov	r2, fp
   2043c:	0dc0      	lsrs	r0, r0, #23
   2043e:	4303      	orrs	r3, r0
   20440:	0252      	lsls	r2, r2, #9
   20442:	4313      	orrs	r3, r2
   20444:	01e2      	lsls	r2, r4, #7
   20446:	d556      	bpl.n	204f6 <__aeabi_dmul+0x426>
   20448:	2001      	movs	r0, #1
   2044a:	085a      	lsrs	r2, r3, #1
   2044c:	4003      	ands	r3, r0
   2044e:	4313      	orrs	r3, r2
   20450:	07e2      	lsls	r2, r4, #31
   20452:	4313      	orrs	r3, r2
   20454:	0864      	lsrs	r4, r4, #1
   20456:	485a      	ldr	r0, [pc, #360]	; (205c0 <__aeabi_dmul+0x4f0>)
   20458:	4460      	add	r0, ip
   2045a:	2800      	cmp	r0, #0
   2045c:	dd4d      	ble.n	204fa <__aeabi_dmul+0x42a>
   2045e:	075a      	lsls	r2, r3, #29
   20460:	d009      	beq.n	20476 <__aeabi_dmul+0x3a6>
   20462:	220f      	movs	r2, #15
   20464:	401a      	ands	r2, r3
   20466:	2a04      	cmp	r2, #4
   20468:	d005      	beq.n	20476 <__aeabi_dmul+0x3a6>
   2046a:	1d1a      	adds	r2, r3, #4
   2046c:	429a      	cmp	r2, r3
   2046e:	419b      	sbcs	r3, r3
   20470:	425b      	negs	r3, r3
   20472:	18e4      	adds	r4, r4, r3
   20474:	0013      	movs	r3, r2
   20476:	01e2      	lsls	r2, r4, #7
   20478:	d504      	bpl.n	20484 <__aeabi_dmul+0x3b4>
   2047a:	2080      	movs	r0, #128	; 0x80
   2047c:	4a51      	ldr	r2, [pc, #324]	; (205c4 <__aeabi_dmul+0x4f4>)
   2047e:	00c0      	lsls	r0, r0, #3
   20480:	4014      	ands	r4, r2
   20482:	4460      	add	r0, ip
   20484:	4a50      	ldr	r2, [pc, #320]	; (205c8 <__aeabi_dmul+0x4f8>)
   20486:	4290      	cmp	r0, r2
   20488:	dd00      	ble.n	2048c <__aeabi_dmul+0x3bc>
   2048a:	e6e3      	b.n	20254 <__aeabi_dmul+0x184>
   2048c:	2501      	movs	r5, #1
   2048e:	08db      	lsrs	r3, r3, #3
   20490:	0762      	lsls	r2, r4, #29
   20492:	431a      	orrs	r2, r3
   20494:	0264      	lsls	r4, r4, #9
   20496:	9b01      	ldr	r3, [sp, #4]
   20498:	4691      	mov	r9, r2
   2049a:	0b22      	lsrs	r2, r4, #12
   2049c:	0544      	lsls	r4, r0, #21
   2049e:	0d64      	lsrs	r4, r4, #21
   204a0:	401d      	ands	r5, r3
   204a2:	e67c      	b.n	2019e <__aeabi_dmul+0xce>
   204a4:	2280      	movs	r2, #128	; 0x80
   204a6:	4659      	mov	r1, fp
   204a8:	0312      	lsls	r2, r2, #12
   204aa:	4211      	tst	r1, r2
   204ac:	d008      	beq.n	204c0 <__aeabi_dmul+0x3f0>
   204ae:	4214      	tst	r4, r2
   204b0:	d106      	bne.n	204c0 <__aeabi_dmul+0x3f0>
   204b2:	4322      	orrs	r2, r4
   204b4:	0312      	lsls	r2, r2, #12
   204b6:	0b12      	lsrs	r2, r2, #12
   204b8:	4645      	mov	r5, r8
   204ba:	4699      	mov	r9, r3
   204bc:	4c43      	ldr	r4, [pc, #268]	; (205cc <__aeabi_dmul+0x4fc>)
   204be:	e66e      	b.n	2019e <__aeabi_dmul+0xce>
   204c0:	465b      	mov	r3, fp
   204c2:	431a      	orrs	r2, r3
   204c4:	0312      	lsls	r2, r2, #12
   204c6:	0b12      	lsrs	r2, r2, #12
   204c8:	4c40      	ldr	r4, [pc, #256]	; (205cc <__aeabi_dmul+0x4fc>)
   204ca:	e668      	b.n	2019e <__aeabi_dmul+0xce>
   204cc:	0003      	movs	r3, r0
   204ce:	4654      	mov	r4, sl
   204d0:	3b28      	subs	r3, #40	; 0x28
   204d2:	409c      	lsls	r4, r3
   204d4:	2300      	movs	r3, #0
   204d6:	e6b9      	b.n	2024c <__aeabi_dmul+0x17c>
   204d8:	f7fd ff24 	bl	1e324 <__clzsi2>
   204dc:	3020      	adds	r0, #32
   204de:	e6a6      	b.n	2022e <__aeabi_dmul+0x15e>
   204e0:	0003      	movs	r3, r0
   204e2:	3b28      	subs	r3, #40	; 0x28
   204e4:	409f      	lsls	r7, r3
   204e6:	2300      	movs	r3, #0
   204e8:	46bb      	mov	fp, r7
   204ea:	4699      	mov	r9, r3
   204ec:	e68a      	b.n	20204 <__aeabi_dmul+0x134>
   204ee:	f7fd ff19 	bl	1e324 <__clzsi2>
   204f2:	3020      	adds	r0, #32
   204f4:	e674      	b.n	201e0 <__aeabi_dmul+0x110>
   204f6:	46b4      	mov	ip, r6
   204f8:	e7ad      	b.n	20456 <__aeabi_dmul+0x386>
   204fa:	2501      	movs	r5, #1
   204fc:	1a2a      	subs	r2, r5, r0
   204fe:	2a38      	cmp	r2, #56	; 0x38
   20500:	dd06      	ble.n	20510 <__aeabi_dmul+0x440>
   20502:	9b01      	ldr	r3, [sp, #4]
   20504:	2400      	movs	r4, #0
   20506:	401d      	ands	r5, r3
   20508:	2300      	movs	r3, #0
   2050a:	2200      	movs	r2, #0
   2050c:	4699      	mov	r9, r3
   2050e:	e646      	b.n	2019e <__aeabi_dmul+0xce>
   20510:	2a1f      	cmp	r2, #31
   20512:	dc21      	bgt.n	20558 <__aeabi_dmul+0x488>
   20514:	2520      	movs	r5, #32
   20516:	0020      	movs	r0, r4
   20518:	1aad      	subs	r5, r5, r2
   2051a:	001e      	movs	r6, r3
   2051c:	40ab      	lsls	r3, r5
   2051e:	40a8      	lsls	r0, r5
   20520:	40d6      	lsrs	r6, r2
   20522:	1e5d      	subs	r5, r3, #1
   20524:	41ab      	sbcs	r3, r5
   20526:	4330      	orrs	r0, r6
   20528:	4318      	orrs	r0, r3
   2052a:	40d4      	lsrs	r4, r2
   2052c:	0743      	lsls	r3, r0, #29
   2052e:	d009      	beq.n	20544 <__aeabi_dmul+0x474>
   20530:	230f      	movs	r3, #15
   20532:	4003      	ands	r3, r0
   20534:	2b04      	cmp	r3, #4
   20536:	d005      	beq.n	20544 <__aeabi_dmul+0x474>
   20538:	0003      	movs	r3, r0
   2053a:	1d18      	adds	r0, r3, #4
   2053c:	4298      	cmp	r0, r3
   2053e:	419b      	sbcs	r3, r3
   20540:	425b      	negs	r3, r3
   20542:	18e4      	adds	r4, r4, r3
   20544:	0223      	lsls	r3, r4, #8
   20546:	d521      	bpl.n	2058c <__aeabi_dmul+0x4bc>
   20548:	2501      	movs	r5, #1
   2054a:	9b01      	ldr	r3, [sp, #4]
   2054c:	2401      	movs	r4, #1
   2054e:	401d      	ands	r5, r3
   20550:	2300      	movs	r3, #0
   20552:	2200      	movs	r2, #0
   20554:	4699      	mov	r9, r3
   20556:	e622      	b.n	2019e <__aeabi_dmul+0xce>
   20558:	251f      	movs	r5, #31
   2055a:	0021      	movs	r1, r4
   2055c:	426d      	negs	r5, r5
   2055e:	1a28      	subs	r0, r5, r0
   20560:	40c1      	lsrs	r1, r0
   20562:	0008      	movs	r0, r1
   20564:	2a20      	cmp	r2, #32
   20566:	d01d      	beq.n	205a4 <__aeabi_dmul+0x4d4>
   20568:	355f      	adds	r5, #95	; 0x5f
   2056a:	1aaa      	subs	r2, r5, r2
   2056c:	4094      	lsls	r4, r2
   2056e:	4323      	orrs	r3, r4
   20570:	1e5c      	subs	r4, r3, #1
   20572:	41a3      	sbcs	r3, r4
   20574:	2507      	movs	r5, #7
   20576:	4303      	orrs	r3, r0
   20578:	401d      	ands	r5, r3
   2057a:	2200      	movs	r2, #0
   2057c:	2d00      	cmp	r5, #0
   2057e:	d009      	beq.n	20594 <__aeabi_dmul+0x4c4>
   20580:	220f      	movs	r2, #15
   20582:	2400      	movs	r4, #0
   20584:	401a      	ands	r2, r3
   20586:	0018      	movs	r0, r3
   20588:	2a04      	cmp	r2, #4
   2058a:	d1d6      	bne.n	2053a <__aeabi_dmul+0x46a>
   2058c:	0003      	movs	r3, r0
   2058e:	0765      	lsls	r5, r4, #29
   20590:	0264      	lsls	r4, r4, #9
   20592:	0b22      	lsrs	r2, r4, #12
   20594:	08db      	lsrs	r3, r3, #3
   20596:	432b      	orrs	r3, r5
   20598:	2501      	movs	r5, #1
   2059a:	4699      	mov	r9, r3
   2059c:	9b01      	ldr	r3, [sp, #4]
   2059e:	2400      	movs	r4, #0
   205a0:	401d      	ands	r5, r3
   205a2:	e5fc      	b.n	2019e <__aeabi_dmul+0xce>
   205a4:	2400      	movs	r4, #0
   205a6:	e7e2      	b.n	2056e <__aeabi_dmul+0x49e>
   205a8:	2280      	movs	r2, #128	; 0x80
   205aa:	2501      	movs	r5, #1
   205ac:	0312      	lsls	r2, r2, #12
   205ae:	4322      	orrs	r2, r4
   205b0:	9901      	ldr	r1, [sp, #4]
   205b2:	0312      	lsls	r2, r2, #12
   205b4:	0b12      	lsrs	r2, r2, #12
   205b6:	400d      	ands	r5, r1
   205b8:	4699      	mov	r9, r3
   205ba:	4c04      	ldr	r4, [pc, #16]	; (205cc <__aeabi_dmul+0x4fc>)
   205bc:	e5ef      	b.n	2019e <__aeabi_dmul+0xce>
   205be:	46c0      	nop			; (mov r8, r8)
   205c0:	000003ff 	.word	0x000003ff
   205c4:	feffffff 	.word	0xfeffffff
   205c8:	000007fe 	.word	0x000007fe
   205cc:	000007ff 	.word	0x000007ff

000205d0 <__aeabi_dsub>:
   205d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   205d2:	4646      	mov	r6, r8
   205d4:	46d6      	mov	lr, sl
   205d6:	464f      	mov	r7, r9
   205d8:	030c      	lsls	r4, r1, #12
   205da:	b5c0      	push	{r6, r7, lr}
   205dc:	0fcd      	lsrs	r5, r1, #31
   205de:	004e      	lsls	r6, r1, #1
   205e0:	0a61      	lsrs	r1, r4, #9
   205e2:	0f44      	lsrs	r4, r0, #29
   205e4:	430c      	orrs	r4, r1
   205e6:	00c1      	lsls	r1, r0, #3
   205e8:	0058      	lsls	r0, r3, #1
   205ea:	0d40      	lsrs	r0, r0, #21
   205ec:	4684      	mov	ip, r0
   205ee:	468a      	mov	sl, r1
   205f0:	000f      	movs	r7, r1
   205f2:	0319      	lsls	r1, r3, #12
   205f4:	0f50      	lsrs	r0, r2, #29
   205f6:	0a49      	lsrs	r1, r1, #9
   205f8:	4301      	orrs	r1, r0
   205fa:	48c6      	ldr	r0, [pc, #792]	; (20914 <__aeabi_dsub+0x344>)
   205fc:	0d76      	lsrs	r6, r6, #21
   205fe:	46a8      	mov	r8, r5
   20600:	0fdb      	lsrs	r3, r3, #31
   20602:	00d2      	lsls	r2, r2, #3
   20604:	4584      	cmp	ip, r0
   20606:	d100      	bne.n	2060a <__aeabi_dsub+0x3a>
   20608:	e0d8      	b.n	207bc <__aeabi_dsub+0x1ec>
   2060a:	2001      	movs	r0, #1
   2060c:	4043      	eors	r3, r0
   2060e:	42ab      	cmp	r3, r5
   20610:	d100      	bne.n	20614 <__aeabi_dsub+0x44>
   20612:	e0a6      	b.n	20762 <__aeabi_dsub+0x192>
   20614:	4660      	mov	r0, ip
   20616:	1a35      	subs	r5, r6, r0
   20618:	2d00      	cmp	r5, #0
   2061a:	dc00      	bgt.n	2061e <__aeabi_dsub+0x4e>
   2061c:	e105      	b.n	2082a <__aeabi_dsub+0x25a>
   2061e:	2800      	cmp	r0, #0
   20620:	d110      	bne.n	20644 <__aeabi_dsub+0x74>
   20622:	000b      	movs	r3, r1
   20624:	4313      	orrs	r3, r2
   20626:	d100      	bne.n	2062a <__aeabi_dsub+0x5a>
   20628:	e0d7      	b.n	207da <__aeabi_dsub+0x20a>
   2062a:	1e6b      	subs	r3, r5, #1
   2062c:	2b00      	cmp	r3, #0
   2062e:	d000      	beq.n	20632 <__aeabi_dsub+0x62>
   20630:	e14b      	b.n	208ca <__aeabi_dsub+0x2fa>
   20632:	4653      	mov	r3, sl
   20634:	1a9f      	subs	r7, r3, r2
   20636:	45ba      	cmp	sl, r7
   20638:	4180      	sbcs	r0, r0
   2063a:	1a64      	subs	r4, r4, r1
   2063c:	4240      	negs	r0, r0
   2063e:	1a24      	subs	r4, r4, r0
   20640:	2601      	movs	r6, #1
   20642:	e01e      	b.n	20682 <__aeabi_dsub+0xb2>
   20644:	4bb3      	ldr	r3, [pc, #716]	; (20914 <__aeabi_dsub+0x344>)
   20646:	429e      	cmp	r6, r3
   20648:	d048      	beq.n	206dc <__aeabi_dsub+0x10c>
   2064a:	2380      	movs	r3, #128	; 0x80
   2064c:	041b      	lsls	r3, r3, #16
   2064e:	4319      	orrs	r1, r3
   20650:	2d38      	cmp	r5, #56	; 0x38
   20652:	dd00      	ble.n	20656 <__aeabi_dsub+0x86>
   20654:	e119      	b.n	2088a <__aeabi_dsub+0x2ba>
   20656:	2d1f      	cmp	r5, #31
   20658:	dd00      	ble.n	2065c <__aeabi_dsub+0x8c>
   2065a:	e14c      	b.n	208f6 <__aeabi_dsub+0x326>
   2065c:	2320      	movs	r3, #32
   2065e:	000f      	movs	r7, r1
   20660:	1b5b      	subs	r3, r3, r5
   20662:	0010      	movs	r0, r2
   20664:	409a      	lsls	r2, r3
   20666:	409f      	lsls	r7, r3
   20668:	40e8      	lsrs	r0, r5
   2066a:	1e53      	subs	r3, r2, #1
   2066c:	419a      	sbcs	r2, r3
   2066e:	40e9      	lsrs	r1, r5
   20670:	4307      	orrs	r7, r0
   20672:	4317      	orrs	r7, r2
   20674:	4653      	mov	r3, sl
   20676:	1bdf      	subs	r7, r3, r7
   20678:	1a61      	subs	r1, r4, r1
   2067a:	45ba      	cmp	sl, r7
   2067c:	41a4      	sbcs	r4, r4
   2067e:	4264      	negs	r4, r4
   20680:	1b0c      	subs	r4, r1, r4
   20682:	0223      	lsls	r3, r4, #8
   20684:	d400      	bmi.n	20688 <__aeabi_dsub+0xb8>
   20686:	e0c5      	b.n	20814 <__aeabi_dsub+0x244>
   20688:	0264      	lsls	r4, r4, #9
   2068a:	0a65      	lsrs	r5, r4, #9
   2068c:	2d00      	cmp	r5, #0
   2068e:	d100      	bne.n	20692 <__aeabi_dsub+0xc2>
   20690:	e0f6      	b.n	20880 <__aeabi_dsub+0x2b0>
   20692:	0028      	movs	r0, r5
   20694:	f7fd fe46 	bl	1e324 <__clzsi2>
   20698:	0003      	movs	r3, r0
   2069a:	3b08      	subs	r3, #8
   2069c:	2b1f      	cmp	r3, #31
   2069e:	dd00      	ble.n	206a2 <__aeabi_dsub+0xd2>
   206a0:	e0e9      	b.n	20876 <__aeabi_dsub+0x2a6>
   206a2:	2220      	movs	r2, #32
   206a4:	003c      	movs	r4, r7
   206a6:	1ad2      	subs	r2, r2, r3
   206a8:	409d      	lsls	r5, r3
   206aa:	40d4      	lsrs	r4, r2
   206ac:	409f      	lsls	r7, r3
   206ae:	4325      	orrs	r5, r4
   206b0:	429e      	cmp	r6, r3
   206b2:	dd00      	ble.n	206b6 <__aeabi_dsub+0xe6>
   206b4:	e0db      	b.n	2086e <__aeabi_dsub+0x29e>
   206b6:	1b9e      	subs	r6, r3, r6
   206b8:	1c73      	adds	r3, r6, #1
   206ba:	2b1f      	cmp	r3, #31
   206bc:	dd00      	ble.n	206c0 <__aeabi_dsub+0xf0>
   206be:	e10a      	b.n	208d6 <__aeabi_dsub+0x306>
   206c0:	2220      	movs	r2, #32
   206c2:	0038      	movs	r0, r7
   206c4:	1ad2      	subs	r2, r2, r3
   206c6:	0029      	movs	r1, r5
   206c8:	4097      	lsls	r7, r2
   206ca:	002c      	movs	r4, r5
   206cc:	4091      	lsls	r1, r2
   206ce:	40d8      	lsrs	r0, r3
   206d0:	1e7a      	subs	r2, r7, #1
   206d2:	4197      	sbcs	r7, r2
   206d4:	40dc      	lsrs	r4, r3
   206d6:	2600      	movs	r6, #0
   206d8:	4301      	orrs	r1, r0
   206da:	430f      	orrs	r7, r1
   206dc:	077b      	lsls	r3, r7, #29
   206de:	d009      	beq.n	206f4 <__aeabi_dsub+0x124>
   206e0:	230f      	movs	r3, #15
   206e2:	403b      	ands	r3, r7
   206e4:	2b04      	cmp	r3, #4
   206e6:	d005      	beq.n	206f4 <__aeabi_dsub+0x124>
   206e8:	1d3b      	adds	r3, r7, #4
   206ea:	42bb      	cmp	r3, r7
   206ec:	41bf      	sbcs	r7, r7
   206ee:	427f      	negs	r7, r7
   206f0:	19e4      	adds	r4, r4, r7
   206f2:	001f      	movs	r7, r3
   206f4:	0223      	lsls	r3, r4, #8
   206f6:	d525      	bpl.n	20744 <__aeabi_dsub+0x174>
   206f8:	4b86      	ldr	r3, [pc, #536]	; (20914 <__aeabi_dsub+0x344>)
   206fa:	3601      	adds	r6, #1
   206fc:	429e      	cmp	r6, r3
   206fe:	d100      	bne.n	20702 <__aeabi_dsub+0x132>
   20700:	e0af      	b.n	20862 <__aeabi_dsub+0x292>
   20702:	4b85      	ldr	r3, [pc, #532]	; (20918 <__aeabi_dsub+0x348>)
   20704:	2501      	movs	r5, #1
   20706:	401c      	ands	r4, r3
   20708:	4643      	mov	r3, r8
   2070a:	0762      	lsls	r2, r4, #29
   2070c:	08ff      	lsrs	r7, r7, #3
   2070e:	0264      	lsls	r4, r4, #9
   20710:	0576      	lsls	r6, r6, #21
   20712:	4317      	orrs	r7, r2
   20714:	0b24      	lsrs	r4, r4, #12
   20716:	0d76      	lsrs	r6, r6, #21
   20718:	401d      	ands	r5, r3
   2071a:	2100      	movs	r1, #0
   2071c:	0324      	lsls	r4, r4, #12
   2071e:	0b23      	lsrs	r3, r4, #12
   20720:	0d0c      	lsrs	r4, r1, #20
   20722:	4a7e      	ldr	r2, [pc, #504]	; (2091c <__aeabi_dsub+0x34c>)
   20724:	0524      	lsls	r4, r4, #20
   20726:	431c      	orrs	r4, r3
   20728:	4014      	ands	r4, r2
   2072a:	0533      	lsls	r3, r6, #20
   2072c:	4323      	orrs	r3, r4
   2072e:	005b      	lsls	r3, r3, #1
   20730:	07ed      	lsls	r5, r5, #31
   20732:	085b      	lsrs	r3, r3, #1
   20734:	432b      	orrs	r3, r5
   20736:	0038      	movs	r0, r7
   20738:	0019      	movs	r1, r3
   2073a:	bc1c      	pop	{r2, r3, r4}
   2073c:	4690      	mov	r8, r2
   2073e:	4699      	mov	r9, r3
   20740:	46a2      	mov	sl, r4
   20742:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20744:	2501      	movs	r5, #1
   20746:	4643      	mov	r3, r8
   20748:	0762      	lsls	r2, r4, #29
   2074a:	08ff      	lsrs	r7, r7, #3
   2074c:	4317      	orrs	r7, r2
   2074e:	08e4      	lsrs	r4, r4, #3
   20750:	401d      	ands	r5, r3
   20752:	4b70      	ldr	r3, [pc, #448]	; (20914 <__aeabi_dsub+0x344>)
   20754:	429e      	cmp	r6, r3
   20756:	d036      	beq.n	207c6 <__aeabi_dsub+0x1f6>
   20758:	0324      	lsls	r4, r4, #12
   2075a:	0576      	lsls	r6, r6, #21
   2075c:	0b24      	lsrs	r4, r4, #12
   2075e:	0d76      	lsrs	r6, r6, #21
   20760:	e7db      	b.n	2071a <__aeabi_dsub+0x14a>
   20762:	4663      	mov	r3, ip
   20764:	1af3      	subs	r3, r6, r3
   20766:	2b00      	cmp	r3, #0
   20768:	dc00      	bgt.n	2076c <__aeabi_dsub+0x19c>
   2076a:	e094      	b.n	20896 <__aeabi_dsub+0x2c6>
   2076c:	4660      	mov	r0, ip
   2076e:	2800      	cmp	r0, #0
   20770:	d035      	beq.n	207de <__aeabi_dsub+0x20e>
   20772:	4868      	ldr	r0, [pc, #416]	; (20914 <__aeabi_dsub+0x344>)
   20774:	4286      	cmp	r6, r0
   20776:	d0b1      	beq.n	206dc <__aeabi_dsub+0x10c>
   20778:	2780      	movs	r7, #128	; 0x80
   2077a:	043f      	lsls	r7, r7, #16
   2077c:	4339      	orrs	r1, r7
   2077e:	2b38      	cmp	r3, #56	; 0x38
   20780:	dc00      	bgt.n	20784 <__aeabi_dsub+0x1b4>
   20782:	e0fd      	b.n	20980 <__aeabi_dsub+0x3b0>
   20784:	430a      	orrs	r2, r1
   20786:	0017      	movs	r7, r2
   20788:	2100      	movs	r1, #0
   2078a:	1e7a      	subs	r2, r7, #1
   2078c:	4197      	sbcs	r7, r2
   2078e:	4457      	add	r7, sl
   20790:	4557      	cmp	r7, sl
   20792:	4180      	sbcs	r0, r0
   20794:	1909      	adds	r1, r1, r4
   20796:	4244      	negs	r4, r0
   20798:	190c      	adds	r4, r1, r4
   2079a:	0223      	lsls	r3, r4, #8
   2079c:	d53a      	bpl.n	20814 <__aeabi_dsub+0x244>
   2079e:	4b5d      	ldr	r3, [pc, #372]	; (20914 <__aeabi_dsub+0x344>)
   207a0:	3601      	adds	r6, #1
   207a2:	429e      	cmp	r6, r3
   207a4:	d100      	bne.n	207a8 <__aeabi_dsub+0x1d8>
   207a6:	e14b      	b.n	20a40 <__aeabi_dsub+0x470>
   207a8:	2201      	movs	r2, #1
   207aa:	4b5b      	ldr	r3, [pc, #364]	; (20918 <__aeabi_dsub+0x348>)
   207ac:	401c      	ands	r4, r3
   207ae:	087b      	lsrs	r3, r7, #1
   207b0:	4017      	ands	r7, r2
   207b2:	431f      	orrs	r7, r3
   207b4:	07e2      	lsls	r2, r4, #31
   207b6:	4317      	orrs	r7, r2
   207b8:	0864      	lsrs	r4, r4, #1
   207ba:	e78f      	b.n	206dc <__aeabi_dsub+0x10c>
   207bc:	0008      	movs	r0, r1
   207be:	4310      	orrs	r0, r2
   207c0:	d000      	beq.n	207c4 <__aeabi_dsub+0x1f4>
   207c2:	e724      	b.n	2060e <__aeabi_dsub+0x3e>
   207c4:	e721      	b.n	2060a <__aeabi_dsub+0x3a>
   207c6:	0023      	movs	r3, r4
   207c8:	433b      	orrs	r3, r7
   207ca:	d100      	bne.n	207ce <__aeabi_dsub+0x1fe>
   207cc:	e1b9      	b.n	20b42 <__aeabi_dsub+0x572>
   207ce:	2280      	movs	r2, #128	; 0x80
   207d0:	0312      	lsls	r2, r2, #12
   207d2:	4314      	orrs	r4, r2
   207d4:	0324      	lsls	r4, r4, #12
   207d6:	0b24      	lsrs	r4, r4, #12
   207d8:	e79f      	b.n	2071a <__aeabi_dsub+0x14a>
   207da:	002e      	movs	r6, r5
   207dc:	e77e      	b.n	206dc <__aeabi_dsub+0x10c>
   207de:	0008      	movs	r0, r1
   207e0:	4310      	orrs	r0, r2
   207e2:	d100      	bne.n	207e6 <__aeabi_dsub+0x216>
   207e4:	e0ca      	b.n	2097c <__aeabi_dsub+0x3ac>
   207e6:	1e58      	subs	r0, r3, #1
   207e8:	4684      	mov	ip, r0
   207ea:	2800      	cmp	r0, #0
   207ec:	d000      	beq.n	207f0 <__aeabi_dsub+0x220>
   207ee:	e0e7      	b.n	209c0 <__aeabi_dsub+0x3f0>
   207f0:	4452      	add	r2, sl
   207f2:	4552      	cmp	r2, sl
   207f4:	4180      	sbcs	r0, r0
   207f6:	1864      	adds	r4, r4, r1
   207f8:	4240      	negs	r0, r0
   207fa:	1824      	adds	r4, r4, r0
   207fc:	0017      	movs	r7, r2
   207fe:	2601      	movs	r6, #1
   20800:	0223      	lsls	r3, r4, #8
   20802:	d507      	bpl.n	20814 <__aeabi_dsub+0x244>
   20804:	2602      	movs	r6, #2
   20806:	e7cf      	b.n	207a8 <__aeabi_dsub+0x1d8>
   20808:	4664      	mov	r4, ip
   2080a:	432c      	orrs	r4, r5
   2080c:	d100      	bne.n	20810 <__aeabi_dsub+0x240>
   2080e:	e1b3      	b.n	20b78 <__aeabi_dsub+0x5a8>
   20810:	002c      	movs	r4, r5
   20812:	4667      	mov	r7, ip
   20814:	077b      	lsls	r3, r7, #29
   20816:	d000      	beq.n	2081a <__aeabi_dsub+0x24a>
   20818:	e762      	b.n	206e0 <__aeabi_dsub+0x110>
   2081a:	0763      	lsls	r3, r4, #29
   2081c:	08ff      	lsrs	r7, r7, #3
   2081e:	431f      	orrs	r7, r3
   20820:	2501      	movs	r5, #1
   20822:	4643      	mov	r3, r8
   20824:	08e4      	lsrs	r4, r4, #3
   20826:	401d      	ands	r5, r3
   20828:	e793      	b.n	20752 <__aeabi_dsub+0x182>
   2082a:	2d00      	cmp	r5, #0
   2082c:	d178      	bne.n	20920 <__aeabi_dsub+0x350>
   2082e:	1c75      	adds	r5, r6, #1
   20830:	056d      	lsls	r5, r5, #21
   20832:	0d6d      	lsrs	r5, r5, #21
   20834:	2d01      	cmp	r5, #1
   20836:	dc00      	bgt.n	2083a <__aeabi_dsub+0x26a>
   20838:	e0f2      	b.n	20a20 <__aeabi_dsub+0x450>
   2083a:	4650      	mov	r0, sl
   2083c:	1a80      	subs	r0, r0, r2
   2083e:	4582      	cmp	sl, r0
   20840:	41bf      	sbcs	r7, r7
   20842:	1a65      	subs	r5, r4, r1
   20844:	427f      	negs	r7, r7
   20846:	1bed      	subs	r5, r5, r7
   20848:	4684      	mov	ip, r0
   2084a:	0228      	lsls	r0, r5, #8
   2084c:	d400      	bmi.n	20850 <__aeabi_dsub+0x280>
   2084e:	e08c      	b.n	2096a <__aeabi_dsub+0x39a>
   20850:	4650      	mov	r0, sl
   20852:	1a17      	subs	r7, r2, r0
   20854:	42ba      	cmp	r2, r7
   20856:	4192      	sbcs	r2, r2
   20858:	1b0c      	subs	r4, r1, r4
   2085a:	4255      	negs	r5, r2
   2085c:	1b65      	subs	r5, r4, r5
   2085e:	4698      	mov	r8, r3
   20860:	e714      	b.n	2068c <__aeabi_dsub+0xbc>
   20862:	2501      	movs	r5, #1
   20864:	4643      	mov	r3, r8
   20866:	2400      	movs	r4, #0
   20868:	401d      	ands	r5, r3
   2086a:	2700      	movs	r7, #0
   2086c:	e755      	b.n	2071a <__aeabi_dsub+0x14a>
   2086e:	4c2a      	ldr	r4, [pc, #168]	; (20918 <__aeabi_dsub+0x348>)
   20870:	1af6      	subs	r6, r6, r3
   20872:	402c      	ands	r4, r5
   20874:	e732      	b.n	206dc <__aeabi_dsub+0x10c>
   20876:	003d      	movs	r5, r7
   20878:	3828      	subs	r0, #40	; 0x28
   2087a:	4085      	lsls	r5, r0
   2087c:	2700      	movs	r7, #0
   2087e:	e717      	b.n	206b0 <__aeabi_dsub+0xe0>
   20880:	0038      	movs	r0, r7
   20882:	f7fd fd4f 	bl	1e324 <__clzsi2>
   20886:	3020      	adds	r0, #32
   20888:	e706      	b.n	20698 <__aeabi_dsub+0xc8>
   2088a:	430a      	orrs	r2, r1
   2088c:	0017      	movs	r7, r2
   2088e:	2100      	movs	r1, #0
   20890:	1e7a      	subs	r2, r7, #1
   20892:	4197      	sbcs	r7, r2
   20894:	e6ee      	b.n	20674 <__aeabi_dsub+0xa4>
   20896:	2b00      	cmp	r3, #0
   20898:	d000      	beq.n	2089c <__aeabi_dsub+0x2cc>
   2089a:	e0e5      	b.n	20a68 <__aeabi_dsub+0x498>
   2089c:	1c73      	adds	r3, r6, #1
   2089e:	469c      	mov	ip, r3
   208a0:	055b      	lsls	r3, r3, #21
   208a2:	0d5b      	lsrs	r3, r3, #21
   208a4:	2b01      	cmp	r3, #1
   208a6:	dc00      	bgt.n	208aa <__aeabi_dsub+0x2da>
   208a8:	e09f      	b.n	209ea <__aeabi_dsub+0x41a>
   208aa:	4b1a      	ldr	r3, [pc, #104]	; (20914 <__aeabi_dsub+0x344>)
   208ac:	459c      	cmp	ip, r3
   208ae:	d100      	bne.n	208b2 <__aeabi_dsub+0x2e2>
   208b0:	e0c5      	b.n	20a3e <__aeabi_dsub+0x46e>
   208b2:	4452      	add	r2, sl
   208b4:	4552      	cmp	r2, sl
   208b6:	4180      	sbcs	r0, r0
   208b8:	1864      	adds	r4, r4, r1
   208ba:	4240      	negs	r0, r0
   208bc:	1824      	adds	r4, r4, r0
   208be:	07e7      	lsls	r7, r4, #31
   208c0:	0852      	lsrs	r2, r2, #1
   208c2:	4317      	orrs	r7, r2
   208c4:	0864      	lsrs	r4, r4, #1
   208c6:	4666      	mov	r6, ip
   208c8:	e708      	b.n	206dc <__aeabi_dsub+0x10c>
   208ca:	4812      	ldr	r0, [pc, #72]	; (20914 <__aeabi_dsub+0x344>)
   208cc:	4285      	cmp	r5, r0
   208ce:	d100      	bne.n	208d2 <__aeabi_dsub+0x302>
   208d0:	e085      	b.n	209de <__aeabi_dsub+0x40e>
   208d2:	001d      	movs	r5, r3
   208d4:	e6bc      	b.n	20650 <__aeabi_dsub+0x80>
   208d6:	0029      	movs	r1, r5
   208d8:	3e1f      	subs	r6, #31
   208da:	40f1      	lsrs	r1, r6
   208dc:	2b20      	cmp	r3, #32
   208de:	d100      	bne.n	208e2 <__aeabi_dsub+0x312>
   208e0:	e07f      	b.n	209e2 <__aeabi_dsub+0x412>
   208e2:	2240      	movs	r2, #64	; 0x40
   208e4:	1ad3      	subs	r3, r2, r3
   208e6:	409d      	lsls	r5, r3
   208e8:	432f      	orrs	r7, r5
   208ea:	1e7d      	subs	r5, r7, #1
   208ec:	41af      	sbcs	r7, r5
   208ee:	2400      	movs	r4, #0
   208f0:	430f      	orrs	r7, r1
   208f2:	2600      	movs	r6, #0
   208f4:	e78e      	b.n	20814 <__aeabi_dsub+0x244>
   208f6:	002b      	movs	r3, r5
   208f8:	000f      	movs	r7, r1
   208fa:	3b20      	subs	r3, #32
   208fc:	40df      	lsrs	r7, r3
   208fe:	2d20      	cmp	r5, #32
   20900:	d071      	beq.n	209e6 <__aeabi_dsub+0x416>
   20902:	2340      	movs	r3, #64	; 0x40
   20904:	1b5d      	subs	r5, r3, r5
   20906:	40a9      	lsls	r1, r5
   20908:	430a      	orrs	r2, r1
   2090a:	1e51      	subs	r1, r2, #1
   2090c:	418a      	sbcs	r2, r1
   2090e:	2100      	movs	r1, #0
   20910:	4317      	orrs	r7, r2
   20912:	e6af      	b.n	20674 <__aeabi_dsub+0xa4>
   20914:	000007ff 	.word	0x000007ff
   20918:	ff7fffff 	.word	0xff7fffff
   2091c:	800fffff 	.word	0x800fffff
   20920:	2e00      	cmp	r6, #0
   20922:	d03e      	beq.n	209a2 <__aeabi_dsub+0x3d2>
   20924:	4eb3      	ldr	r6, [pc, #716]	; (20bf4 <__aeabi_dsub+0x624>)
   20926:	45b4      	cmp	ip, r6
   20928:	d045      	beq.n	209b6 <__aeabi_dsub+0x3e6>
   2092a:	2680      	movs	r6, #128	; 0x80
   2092c:	0436      	lsls	r6, r6, #16
   2092e:	426d      	negs	r5, r5
   20930:	4334      	orrs	r4, r6
   20932:	2d38      	cmp	r5, #56	; 0x38
   20934:	dd00      	ble.n	20938 <__aeabi_dsub+0x368>
   20936:	e0a8      	b.n	20a8a <__aeabi_dsub+0x4ba>
   20938:	2d1f      	cmp	r5, #31
   2093a:	dd00      	ble.n	2093e <__aeabi_dsub+0x36e>
   2093c:	e11f      	b.n	20b7e <__aeabi_dsub+0x5ae>
   2093e:	2620      	movs	r6, #32
   20940:	0027      	movs	r7, r4
   20942:	4650      	mov	r0, sl
   20944:	1b76      	subs	r6, r6, r5
   20946:	40b7      	lsls	r7, r6
   20948:	40e8      	lsrs	r0, r5
   2094a:	4307      	orrs	r7, r0
   2094c:	4650      	mov	r0, sl
   2094e:	40b0      	lsls	r0, r6
   20950:	1e46      	subs	r6, r0, #1
   20952:	41b0      	sbcs	r0, r6
   20954:	40ec      	lsrs	r4, r5
   20956:	4338      	orrs	r0, r7
   20958:	1a17      	subs	r7, r2, r0
   2095a:	42ba      	cmp	r2, r7
   2095c:	4192      	sbcs	r2, r2
   2095e:	1b0c      	subs	r4, r1, r4
   20960:	4252      	negs	r2, r2
   20962:	1aa4      	subs	r4, r4, r2
   20964:	4666      	mov	r6, ip
   20966:	4698      	mov	r8, r3
   20968:	e68b      	b.n	20682 <__aeabi_dsub+0xb2>
   2096a:	4664      	mov	r4, ip
   2096c:	4667      	mov	r7, ip
   2096e:	432c      	orrs	r4, r5
   20970:	d000      	beq.n	20974 <__aeabi_dsub+0x3a4>
   20972:	e68b      	b.n	2068c <__aeabi_dsub+0xbc>
   20974:	2500      	movs	r5, #0
   20976:	2600      	movs	r6, #0
   20978:	2700      	movs	r7, #0
   2097a:	e6ea      	b.n	20752 <__aeabi_dsub+0x182>
   2097c:	001e      	movs	r6, r3
   2097e:	e6ad      	b.n	206dc <__aeabi_dsub+0x10c>
   20980:	2b1f      	cmp	r3, #31
   20982:	dc60      	bgt.n	20a46 <__aeabi_dsub+0x476>
   20984:	2720      	movs	r7, #32
   20986:	1af8      	subs	r0, r7, r3
   20988:	000f      	movs	r7, r1
   2098a:	4684      	mov	ip, r0
   2098c:	4087      	lsls	r7, r0
   2098e:	0010      	movs	r0, r2
   20990:	40d8      	lsrs	r0, r3
   20992:	4307      	orrs	r7, r0
   20994:	4660      	mov	r0, ip
   20996:	4082      	lsls	r2, r0
   20998:	1e50      	subs	r0, r2, #1
   2099a:	4182      	sbcs	r2, r0
   2099c:	40d9      	lsrs	r1, r3
   2099e:	4317      	orrs	r7, r2
   209a0:	e6f5      	b.n	2078e <__aeabi_dsub+0x1be>
   209a2:	0026      	movs	r6, r4
   209a4:	4650      	mov	r0, sl
   209a6:	4306      	orrs	r6, r0
   209a8:	d005      	beq.n	209b6 <__aeabi_dsub+0x3e6>
   209aa:	43ed      	mvns	r5, r5
   209ac:	2d00      	cmp	r5, #0
   209ae:	d0d3      	beq.n	20958 <__aeabi_dsub+0x388>
   209b0:	4e90      	ldr	r6, [pc, #576]	; (20bf4 <__aeabi_dsub+0x624>)
   209b2:	45b4      	cmp	ip, r6
   209b4:	d1bd      	bne.n	20932 <__aeabi_dsub+0x362>
   209b6:	000c      	movs	r4, r1
   209b8:	0017      	movs	r7, r2
   209ba:	4666      	mov	r6, ip
   209bc:	4698      	mov	r8, r3
   209be:	e68d      	b.n	206dc <__aeabi_dsub+0x10c>
   209c0:	488c      	ldr	r0, [pc, #560]	; (20bf4 <__aeabi_dsub+0x624>)
   209c2:	4283      	cmp	r3, r0
   209c4:	d00b      	beq.n	209de <__aeabi_dsub+0x40e>
   209c6:	4663      	mov	r3, ip
   209c8:	e6d9      	b.n	2077e <__aeabi_dsub+0x1ae>
   209ca:	2d00      	cmp	r5, #0
   209cc:	d000      	beq.n	209d0 <__aeabi_dsub+0x400>
   209ce:	e096      	b.n	20afe <__aeabi_dsub+0x52e>
   209d0:	0008      	movs	r0, r1
   209d2:	4310      	orrs	r0, r2
   209d4:	d100      	bne.n	209d8 <__aeabi_dsub+0x408>
   209d6:	e0e2      	b.n	20b9e <__aeabi_dsub+0x5ce>
   209d8:	000c      	movs	r4, r1
   209da:	0017      	movs	r7, r2
   209dc:	4698      	mov	r8, r3
   209de:	4e85      	ldr	r6, [pc, #532]	; (20bf4 <__aeabi_dsub+0x624>)
   209e0:	e67c      	b.n	206dc <__aeabi_dsub+0x10c>
   209e2:	2500      	movs	r5, #0
   209e4:	e780      	b.n	208e8 <__aeabi_dsub+0x318>
   209e6:	2100      	movs	r1, #0
   209e8:	e78e      	b.n	20908 <__aeabi_dsub+0x338>
   209ea:	0023      	movs	r3, r4
   209ec:	4650      	mov	r0, sl
   209ee:	4303      	orrs	r3, r0
   209f0:	2e00      	cmp	r6, #0
   209f2:	d000      	beq.n	209f6 <__aeabi_dsub+0x426>
   209f4:	e0a8      	b.n	20b48 <__aeabi_dsub+0x578>
   209f6:	2b00      	cmp	r3, #0
   209f8:	d100      	bne.n	209fc <__aeabi_dsub+0x42c>
   209fa:	e0de      	b.n	20bba <__aeabi_dsub+0x5ea>
   209fc:	000b      	movs	r3, r1
   209fe:	4313      	orrs	r3, r2
   20a00:	d100      	bne.n	20a04 <__aeabi_dsub+0x434>
   20a02:	e66b      	b.n	206dc <__aeabi_dsub+0x10c>
   20a04:	4452      	add	r2, sl
   20a06:	4552      	cmp	r2, sl
   20a08:	4180      	sbcs	r0, r0
   20a0a:	1864      	adds	r4, r4, r1
   20a0c:	4240      	negs	r0, r0
   20a0e:	1824      	adds	r4, r4, r0
   20a10:	0017      	movs	r7, r2
   20a12:	0223      	lsls	r3, r4, #8
   20a14:	d400      	bmi.n	20a18 <__aeabi_dsub+0x448>
   20a16:	e6fd      	b.n	20814 <__aeabi_dsub+0x244>
   20a18:	4b77      	ldr	r3, [pc, #476]	; (20bf8 <__aeabi_dsub+0x628>)
   20a1a:	4666      	mov	r6, ip
   20a1c:	401c      	ands	r4, r3
   20a1e:	e65d      	b.n	206dc <__aeabi_dsub+0x10c>
   20a20:	0025      	movs	r5, r4
   20a22:	4650      	mov	r0, sl
   20a24:	4305      	orrs	r5, r0
   20a26:	2e00      	cmp	r6, #0
   20a28:	d1cf      	bne.n	209ca <__aeabi_dsub+0x3fa>
   20a2a:	2d00      	cmp	r5, #0
   20a2c:	d14f      	bne.n	20ace <__aeabi_dsub+0x4fe>
   20a2e:	000c      	movs	r4, r1
   20a30:	4314      	orrs	r4, r2
   20a32:	d100      	bne.n	20a36 <__aeabi_dsub+0x466>
   20a34:	e0a0      	b.n	20b78 <__aeabi_dsub+0x5a8>
   20a36:	000c      	movs	r4, r1
   20a38:	0017      	movs	r7, r2
   20a3a:	4698      	mov	r8, r3
   20a3c:	e64e      	b.n	206dc <__aeabi_dsub+0x10c>
   20a3e:	4666      	mov	r6, ip
   20a40:	2400      	movs	r4, #0
   20a42:	2700      	movs	r7, #0
   20a44:	e685      	b.n	20752 <__aeabi_dsub+0x182>
   20a46:	001f      	movs	r7, r3
   20a48:	0008      	movs	r0, r1
   20a4a:	3f20      	subs	r7, #32
   20a4c:	40f8      	lsrs	r0, r7
   20a4e:	0007      	movs	r7, r0
   20a50:	2b20      	cmp	r3, #32
   20a52:	d100      	bne.n	20a56 <__aeabi_dsub+0x486>
   20a54:	e08e      	b.n	20b74 <__aeabi_dsub+0x5a4>
   20a56:	2040      	movs	r0, #64	; 0x40
   20a58:	1ac3      	subs	r3, r0, r3
   20a5a:	4099      	lsls	r1, r3
   20a5c:	430a      	orrs	r2, r1
   20a5e:	1e51      	subs	r1, r2, #1
   20a60:	418a      	sbcs	r2, r1
   20a62:	2100      	movs	r1, #0
   20a64:	4317      	orrs	r7, r2
   20a66:	e692      	b.n	2078e <__aeabi_dsub+0x1be>
   20a68:	2e00      	cmp	r6, #0
   20a6a:	d114      	bne.n	20a96 <__aeabi_dsub+0x4c6>
   20a6c:	0026      	movs	r6, r4
   20a6e:	4650      	mov	r0, sl
   20a70:	4306      	orrs	r6, r0
   20a72:	d062      	beq.n	20b3a <__aeabi_dsub+0x56a>
   20a74:	43db      	mvns	r3, r3
   20a76:	2b00      	cmp	r3, #0
   20a78:	d15c      	bne.n	20b34 <__aeabi_dsub+0x564>
   20a7a:	1887      	adds	r7, r0, r2
   20a7c:	4297      	cmp	r7, r2
   20a7e:	4192      	sbcs	r2, r2
   20a80:	1864      	adds	r4, r4, r1
   20a82:	4252      	negs	r2, r2
   20a84:	18a4      	adds	r4, r4, r2
   20a86:	4666      	mov	r6, ip
   20a88:	e687      	b.n	2079a <__aeabi_dsub+0x1ca>
   20a8a:	4650      	mov	r0, sl
   20a8c:	4320      	orrs	r0, r4
   20a8e:	1e44      	subs	r4, r0, #1
   20a90:	41a0      	sbcs	r0, r4
   20a92:	2400      	movs	r4, #0
   20a94:	e760      	b.n	20958 <__aeabi_dsub+0x388>
   20a96:	4e57      	ldr	r6, [pc, #348]	; (20bf4 <__aeabi_dsub+0x624>)
   20a98:	45b4      	cmp	ip, r6
   20a9a:	d04e      	beq.n	20b3a <__aeabi_dsub+0x56a>
   20a9c:	2680      	movs	r6, #128	; 0x80
   20a9e:	0436      	lsls	r6, r6, #16
   20aa0:	425b      	negs	r3, r3
   20aa2:	4334      	orrs	r4, r6
   20aa4:	2b38      	cmp	r3, #56	; 0x38
   20aa6:	dd00      	ble.n	20aaa <__aeabi_dsub+0x4da>
   20aa8:	e07f      	b.n	20baa <__aeabi_dsub+0x5da>
   20aaa:	2b1f      	cmp	r3, #31
   20aac:	dd00      	ble.n	20ab0 <__aeabi_dsub+0x4e0>
   20aae:	e08b      	b.n	20bc8 <__aeabi_dsub+0x5f8>
   20ab0:	2620      	movs	r6, #32
   20ab2:	0027      	movs	r7, r4
   20ab4:	4650      	mov	r0, sl
   20ab6:	1af6      	subs	r6, r6, r3
   20ab8:	40b7      	lsls	r7, r6
   20aba:	40d8      	lsrs	r0, r3
   20abc:	4307      	orrs	r7, r0
   20abe:	4650      	mov	r0, sl
   20ac0:	40b0      	lsls	r0, r6
   20ac2:	1e46      	subs	r6, r0, #1
   20ac4:	41b0      	sbcs	r0, r6
   20ac6:	4307      	orrs	r7, r0
   20ac8:	40dc      	lsrs	r4, r3
   20aca:	18bf      	adds	r7, r7, r2
   20acc:	e7d6      	b.n	20a7c <__aeabi_dsub+0x4ac>
   20ace:	000d      	movs	r5, r1
   20ad0:	4315      	orrs	r5, r2
   20ad2:	d100      	bne.n	20ad6 <__aeabi_dsub+0x506>
   20ad4:	e602      	b.n	206dc <__aeabi_dsub+0x10c>
   20ad6:	4650      	mov	r0, sl
   20ad8:	1a80      	subs	r0, r0, r2
   20ada:	4582      	cmp	sl, r0
   20adc:	41bf      	sbcs	r7, r7
   20ade:	1a65      	subs	r5, r4, r1
   20ae0:	427f      	negs	r7, r7
   20ae2:	1bed      	subs	r5, r5, r7
   20ae4:	4684      	mov	ip, r0
   20ae6:	0228      	lsls	r0, r5, #8
   20ae8:	d400      	bmi.n	20aec <__aeabi_dsub+0x51c>
   20aea:	e68d      	b.n	20808 <__aeabi_dsub+0x238>
   20aec:	4650      	mov	r0, sl
   20aee:	1a17      	subs	r7, r2, r0
   20af0:	42ba      	cmp	r2, r7
   20af2:	4192      	sbcs	r2, r2
   20af4:	1b0c      	subs	r4, r1, r4
   20af6:	4252      	negs	r2, r2
   20af8:	1aa4      	subs	r4, r4, r2
   20afa:	4698      	mov	r8, r3
   20afc:	e5ee      	b.n	206dc <__aeabi_dsub+0x10c>
   20afe:	000d      	movs	r5, r1
   20b00:	4315      	orrs	r5, r2
   20b02:	d100      	bne.n	20b06 <__aeabi_dsub+0x536>
   20b04:	e76b      	b.n	209de <__aeabi_dsub+0x40e>
   20b06:	4650      	mov	r0, sl
   20b08:	0767      	lsls	r7, r4, #29
   20b0a:	08c0      	lsrs	r0, r0, #3
   20b0c:	4307      	orrs	r7, r0
   20b0e:	2080      	movs	r0, #128	; 0x80
   20b10:	08e4      	lsrs	r4, r4, #3
   20b12:	0300      	lsls	r0, r0, #12
   20b14:	4204      	tst	r4, r0
   20b16:	d007      	beq.n	20b28 <__aeabi_dsub+0x558>
   20b18:	08cd      	lsrs	r5, r1, #3
   20b1a:	4205      	tst	r5, r0
   20b1c:	d104      	bne.n	20b28 <__aeabi_dsub+0x558>
   20b1e:	002c      	movs	r4, r5
   20b20:	4698      	mov	r8, r3
   20b22:	08d7      	lsrs	r7, r2, #3
   20b24:	0749      	lsls	r1, r1, #29
   20b26:	430f      	orrs	r7, r1
   20b28:	0f7b      	lsrs	r3, r7, #29
   20b2a:	00e4      	lsls	r4, r4, #3
   20b2c:	431c      	orrs	r4, r3
   20b2e:	00ff      	lsls	r7, r7, #3
   20b30:	4e30      	ldr	r6, [pc, #192]	; (20bf4 <__aeabi_dsub+0x624>)
   20b32:	e5d3      	b.n	206dc <__aeabi_dsub+0x10c>
   20b34:	4e2f      	ldr	r6, [pc, #188]	; (20bf4 <__aeabi_dsub+0x624>)
   20b36:	45b4      	cmp	ip, r6
   20b38:	d1b4      	bne.n	20aa4 <__aeabi_dsub+0x4d4>
   20b3a:	000c      	movs	r4, r1
   20b3c:	0017      	movs	r7, r2
   20b3e:	4666      	mov	r6, ip
   20b40:	e5cc      	b.n	206dc <__aeabi_dsub+0x10c>
   20b42:	2700      	movs	r7, #0
   20b44:	2400      	movs	r4, #0
   20b46:	e5e8      	b.n	2071a <__aeabi_dsub+0x14a>
   20b48:	2b00      	cmp	r3, #0
   20b4a:	d039      	beq.n	20bc0 <__aeabi_dsub+0x5f0>
   20b4c:	000b      	movs	r3, r1
   20b4e:	4313      	orrs	r3, r2
   20b50:	d100      	bne.n	20b54 <__aeabi_dsub+0x584>
   20b52:	e744      	b.n	209de <__aeabi_dsub+0x40e>
   20b54:	08c0      	lsrs	r0, r0, #3
   20b56:	0767      	lsls	r7, r4, #29
   20b58:	4307      	orrs	r7, r0
   20b5a:	2080      	movs	r0, #128	; 0x80
   20b5c:	08e4      	lsrs	r4, r4, #3
   20b5e:	0300      	lsls	r0, r0, #12
   20b60:	4204      	tst	r4, r0
   20b62:	d0e1      	beq.n	20b28 <__aeabi_dsub+0x558>
   20b64:	08cb      	lsrs	r3, r1, #3
   20b66:	4203      	tst	r3, r0
   20b68:	d1de      	bne.n	20b28 <__aeabi_dsub+0x558>
   20b6a:	08d7      	lsrs	r7, r2, #3
   20b6c:	0749      	lsls	r1, r1, #29
   20b6e:	430f      	orrs	r7, r1
   20b70:	001c      	movs	r4, r3
   20b72:	e7d9      	b.n	20b28 <__aeabi_dsub+0x558>
   20b74:	2100      	movs	r1, #0
   20b76:	e771      	b.n	20a5c <__aeabi_dsub+0x48c>
   20b78:	2500      	movs	r5, #0
   20b7a:	2700      	movs	r7, #0
   20b7c:	e5e9      	b.n	20752 <__aeabi_dsub+0x182>
   20b7e:	002e      	movs	r6, r5
   20b80:	0027      	movs	r7, r4
   20b82:	3e20      	subs	r6, #32
   20b84:	40f7      	lsrs	r7, r6
   20b86:	2d20      	cmp	r5, #32
   20b88:	d02f      	beq.n	20bea <__aeabi_dsub+0x61a>
   20b8a:	2640      	movs	r6, #64	; 0x40
   20b8c:	1b75      	subs	r5, r6, r5
   20b8e:	40ac      	lsls	r4, r5
   20b90:	4650      	mov	r0, sl
   20b92:	4320      	orrs	r0, r4
   20b94:	1e44      	subs	r4, r0, #1
   20b96:	41a0      	sbcs	r0, r4
   20b98:	2400      	movs	r4, #0
   20b9a:	4338      	orrs	r0, r7
   20b9c:	e6dc      	b.n	20958 <__aeabi_dsub+0x388>
   20b9e:	2480      	movs	r4, #128	; 0x80
   20ba0:	2500      	movs	r5, #0
   20ba2:	0324      	lsls	r4, r4, #12
   20ba4:	4e13      	ldr	r6, [pc, #76]	; (20bf4 <__aeabi_dsub+0x624>)
   20ba6:	2700      	movs	r7, #0
   20ba8:	e5d3      	b.n	20752 <__aeabi_dsub+0x182>
   20baa:	4650      	mov	r0, sl
   20bac:	4320      	orrs	r0, r4
   20bae:	0007      	movs	r7, r0
   20bb0:	1e78      	subs	r0, r7, #1
   20bb2:	4187      	sbcs	r7, r0
   20bb4:	2400      	movs	r4, #0
   20bb6:	18bf      	adds	r7, r7, r2
   20bb8:	e760      	b.n	20a7c <__aeabi_dsub+0x4ac>
   20bba:	000c      	movs	r4, r1
   20bbc:	0017      	movs	r7, r2
   20bbe:	e58d      	b.n	206dc <__aeabi_dsub+0x10c>
   20bc0:	000c      	movs	r4, r1
   20bc2:	0017      	movs	r7, r2
   20bc4:	4e0b      	ldr	r6, [pc, #44]	; (20bf4 <__aeabi_dsub+0x624>)
   20bc6:	e589      	b.n	206dc <__aeabi_dsub+0x10c>
   20bc8:	001e      	movs	r6, r3
   20bca:	0027      	movs	r7, r4
   20bcc:	3e20      	subs	r6, #32
   20bce:	40f7      	lsrs	r7, r6
   20bd0:	2b20      	cmp	r3, #32
   20bd2:	d00c      	beq.n	20bee <__aeabi_dsub+0x61e>
   20bd4:	2640      	movs	r6, #64	; 0x40
   20bd6:	1af3      	subs	r3, r6, r3
   20bd8:	409c      	lsls	r4, r3
   20bda:	4650      	mov	r0, sl
   20bdc:	4320      	orrs	r0, r4
   20bde:	1e44      	subs	r4, r0, #1
   20be0:	41a0      	sbcs	r0, r4
   20be2:	4307      	orrs	r7, r0
   20be4:	2400      	movs	r4, #0
   20be6:	18bf      	adds	r7, r7, r2
   20be8:	e748      	b.n	20a7c <__aeabi_dsub+0x4ac>
   20bea:	2400      	movs	r4, #0
   20bec:	e7d0      	b.n	20b90 <__aeabi_dsub+0x5c0>
   20bee:	2400      	movs	r4, #0
   20bf0:	e7f3      	b.n	20bda <__aeabi_dsub+0x60a>
   20bf2:	46c0      	nop			; (mov r8, r8)
   20bf4:	000007ff 	.word	0x000007ff
   20bf8:	ff7fffff 	.word	0xff7fffff

00020bfc <__aeabi_dcmpun>:
   20bfc:	b570      	push	{r4, r5, r6, lr}
   20bfe:	4e0e      	ldr	r6, [pc, #56]	; (20c38 <__aeabi_dcmpun+0x3c>)
   20c00:	030d      	lsls	r5, r1, #12
   20c02:	031c      	lsls	r4, r3, #12
   20c04:	0049      	lsls	r1, r1, #1
   20c06:	005b      	lsls	r3, r3, #1
   20c08:	0b2d      	lsrs	r5, r5, #12
   20c0a:	0d49      	lsrs	r1, r1, #21
   20c0c:	0b24      	lsrs	r4, r4, #12
   20c0e:	0d5b      	lsrs	r3, r3, #21
   20c10:	42b1      	cmp	r1, r6
   20c12:	d004      	beq.n	20c1e <__aeabi_dcmpun+0x22>
   20c14:	4908      	ldr	r1, [pc, #32]	; (20c38 <__aeabi_dcmpun+0x3c>)
   20c16:	2000      	movs	r0, #0
   20c18:	428b      	cmp	r3, r1
   20c1a:	d008      	beq.n	20c2e <__aeabi_dcmpun+0x32>
   20c1c:	bd70      	pop	{r4, r5, r6, pc}
   20c1e:	4305      	orrs	r5, r0
   20c20:	2001      	movs	r0, #1
   20c22:	2d00      	cmp	r5, #0
   20c24:	d1fa      	bne.n	20c1c <__aeabi_dcmpun+0x20>
   20c26:	4904      	ldr	r1, [pc, #16]	; (20c38 <__aeabi_dcmpun+0x3c>)
   20c28:	2000      	movs	r0, #0
   20c2a:	428b      	cmp	r3, r1
   20c2c:	d1f6      	bne.n	20c1c <__aeabi_dcmpun+0x20>
   20c2e:	4314      	orrs	r4, r2
   20c30:	0020      	movs	r0, r4
   20c32:	1e44      	subs	r4, r0, #1
   20c34:	41a0      	sbcs	r0, r4
   20c36:	e7f1      	b.n	20c1c <__aeabi_dcmpun+0x20>
   20c38:	000007ff 	.word	0x000007ff

00020c3c <__aeabi_d2iz>:
   20c3c:	b530      	push	{r4, r5, lr}
   20c3e:	4d13      	ldr	r5, [pc, #76]	; (20c8c <__aeabi_d2iz+0x50>)
   20c40:	030a      	lsls	r2, r1, #12
   20c42:	004b      	lsls	r3, r1, #1
   20c44:	0b12      	lsrs	r2, r2, #12
   20c46:	0d5b      	lsrs	r3, r3, #21
   20c48:	0fc9      	lsrs	r1, r1, #31
   20c4a:	2400      	movs	r4, #0
   20c4c:	42ab      	cmp	r3, r5
   20c4e:	dd10      	ble.n	20c72 <__aeabi_d2iz+0x36>
   20c50:	4c0f      	ldr	r4, [pc, #60]	; (20c90 <__aeabi_d2iz+0x54>)
   20c52:	42a3      	cmp	r3, r4
   20c54:	dc0f      	bgt.n	20c76 <__aeabi_d2iz+0x3a>
   20c56:	2480      	movs	r4, #128	; 0x80
   20c58:	4d0e      	ldr	r5, [pc, #56]	; (20c94 <__aeabi_d2iz+0x58>)
   20c5a:	0364      	lsls	r4, r4, #13
   20c5c:	4322      	orrs	r2, r4
   20c5e:	1aed      	subs	r5, r5, r3
   20c60:	2d1f      	cmp	r5, #31
   20c62:	dd0b      	ble.n	20c7c <__aeabi_d2iz+0x40>
   20c64:	480c      	ldr	r0, [pc, #48]	; (20c98 <__aeabi_d2iz+0x5c>)
   20c66:	1ac3      	subs	r3, r0, r3
   20c68:	40da      	lsrs	r2, r3
   20c6a:	4254      	negs	r4, r2
   20c6c:	2900      	cmp	r1, #0
   20c6e:	d100      	bne.n	20c72 <__aeabi_d2iz+0x36>
   20c70:	0014      	movs	r4, r2
   20c72:	0020      	movs	r0, r4
   20c74:	bd30      	pop	{r4, r5, pc}
   20c76:	4b09      	ldr	r3, [pc, #36]	; (20c9c <__aeabi_d2iz+0x60>)
   20c78:	18cc      	adds	r4, r1, r3
   20c7a:	e7fa      	b.n	20c72 <__aeabi_d2iz+0x36>
   20c7c:	4c08      	ldr	r4, [pc, #32]	; (20ca0 <__aeabi_d2iz+0x64>)
   20c7e:	40e8      	lsrs	r0, r5
   20c80:	46a4      	mov	ip, r4
   20c82:	4463      	add	r3, ip
   20c84:	409a      	lsls	r2, r3
   20c86:	4302      	orrs	r2, r0
   20c88:	e7ef      	b.n	20c6a <__aeabi_d2iz+0x2e>
   20c8a:	46c0      	nop			; (mov r8, r8)
   20c8c:	000003fe 	.word	0x000003fe
   20c90:	0000041d 	.word	0x0000041d
   20c94:	00000433 	.word	0x00000433
   20c98:	00000413 	.word	0x00000413
   20c9c:	7fffffff 	.word	0x7fffffff
   20ca0:	fffffbed 	.word	0xfffffbed

00020ca4 <__aeabi_i2d>:
   20ca4:	b570      	push	{r4, r5, r6, lr}
   20ca6:	2800      	cmp	r0, #0
   20ca8:	d030      	beq.n	20d0c <__aeabi_i2d+0x68>
   20caa:	17c3      	asrs	r3, r0, #31
   20cac:	18c4      	adds	r4, r0, r3
   20cae:	405c      	eors	r4, r3
   20cb0:	0fc5      	lsrs	r5, r0, #31
   20cb2:	0020      	movs	r0, r4
   20cb4:	f7fd fb36 	bl	1e324 <__clzsi2>
   20cb8:	4b17      	ldr	r3, [pc, #92]	; (20d18 <__aeabi_i2d+0x74>)
   20cba:	4a18      	ldr	r2, [pc, #96]	; (20d1c <__aeabi_i2d+0x78>)
   20cbc:	1a1b      	subs	r3, r3, r0
   20cbe:	1ad2      	subs	r2, r2, r3
   20cc0:	2a1f      	cmp	r2, #31
   20cc2:	dd18      	ble.n	20cf6 <__aeabi_i2d+0x52>
   20cc4:	4a16      	ldr	r2, [pc, #88]	; (20d20 <__aeabi_i2d+0x7c>)
   20cc6:	1ad2      	subs	r2, r2, r3
   20cc8:	4094      	lsls	r4, r2
   20cca:	2200      	movs	r2, #0
   20ccc:	0324      	lsls	r4, r4, #12
   20cce:	055b      	lsls	r3, r3, #21
   20cd0:	0b24      	lsrs	r4, r4, #12
   20cd2:	0d5b      	lsrs	r3, r3, #21
   20cd4:	2100      	movs	r1, #0
   20cd6:	0010      	movs	r0, r2
   20cd8:	0324      	lsls	r4, r4, #12
   20cda:	0d0a      	lsrs	r2, r1, #20
   20cdc:	0b24      	lsrs	r4, r4, #12
   20cde:	0512      	lsls	r2, r2, #20
   20ce0:	4322      	orrs	r2, r4
   20ce2:	4c10      	ldr	r4, [pc, #64]	; (20d24 <__aeabi_i2d+0x80>)
   20ce4:	051b      	lsls	r3, r3, #20
   20ce6:	4022      	ands	r2, r4
   20ce8:	4313      	orrs	r3, r2
   20cea:	005b      	lsls	r3, r3, #1
   20cec:	07ed      	lsls	r5, r5, #31
   20cee:	085b      	lsrs	r3, r3, #1
   20cf0:	432b      	orrs	r3, r5
   20cf2:	0019      	movs	r1, r3
   20cf4:	bd70      	pop	{r4, r5, r6, pc}
   20cf6:	0021      	movs	r1, r4
   20cf8:	4091      	lsls	r1, r2
   20cfa:	000a      	movs	r2, r1
   20cfc:	210b      	movs	r1, #11
   20cfe:	1a08      	subs	r0, r1, r0
   20d00:	40c4      	lsrs	r4, r0
   20d02:	055b      	lsls	r3, r3, #21
   20d04:	0324      	lsls	r4, r4, #12
   20d06:	0b24      	lsrs	r4, r4, #12
   20d08:	0d5b      	lsrs	r3, r3, #21
   20d0a:	e7e3      	b.n	20cd4 <__aeabi_i2d+0x30>
   20d0c:	2500      	movs	r5, #0
   20d0e:	2300      	movs	r3, #0
   20d10:	2400      	movs	r4, #0
   20d12:	2200      	movs	r2, #0
   20d14:	e7de      	b.n	20cd4 <__aeabi_i2d+0x30>
   20d16:	46c0      	nop			; (mov r8, r8)
   20d18:	0000041e 	.word	0x0000041e
   20d1c:	00000433 	.word	0x00000433
   20d20:	00000413 	.word	0x00000413
   20d24:	800fffff 	.word	0x800fffff

00020d28 <__aeabi_ui2d>:
   20d28:	b510      	push	{r4, lr}
   20d2a:	1e04      	subs	r4, r0, #0
   20d2c:	d028      	beq.n	20d80 <__aeabi_ui2d+0x58>
   20d2e:	f7fd faf9 	bl	1e324 <__clzsi2>
   20d32:	4b15      	ldr	r3, [pc, #84]	; (20d88 <__aeabi_ui2d+0x60>)
   20d34:	4a15      	ldr	r2, [pc, #84]	; (20d8c <__aeabi_ui2d+0x64>)
   20d36:	1a1b      	subs	r3, r3, r0
   20d38:	1ad2      	subs	r2, r2, r3
   20d3a:	2a1f      	cmp	r2, #31
   20d3c:	dd15      	ble.n	20d6a <__aeabi_ui2d+0x42>
   20d3e:	4a14      	ldr	r2, [pc, #80]	; (20d90 <__aeabi_ui2d+0x68>)
   20d40:	1ad2      	subs	r2, r2, r3
   20d42:	4094      	lsls	r4, r2
   20d44:	2200      	movs	r2, #0
   20d46:	0324      	lsls	r4, r4, #12
   20d48:	055b      	lsls	r3, r3, #21
   20d4a:	0b24      	lsrs	r4, r4, #12
   20d4c:	0d5b      	lsrs	r3, r3, #21
   20d4e:	2100      	movs	r1, #0
   20d50:	0010      	movs	r0, r2
   20d52:	0324      	lsls	r4, r4, #12
   20d54:	0d0a      	lsrs	r2, r1, #20
   20d56:	0b24      	lsrs	r4, r4, #12
   20d58:	0512      	lsls	r2, r2, #20
   20d5a:	4322      	orrs	r2, r4
   20d5c:	4c0d      	ldr	r4, [pc, #52]	; (20d94 <__aeabi_ui2d+0x6c>)
   20d5e:	051b      	lsls	r3, r3, #20
   20d60:	4022      	ands	r2, r4
   20d62:	4313      	orrs	r3, r2
   20d64:	005b      	lsls	r3, r3, #1
   20d66:	0859      	lsrs	r1, r3, #1
   20d68:	bd10      	pop	{r4, pc}
   20d6a:	0021      	movs	r1, r4
   20d6c:	4091      	lsls	r1, r2
   20d6e:	000a      	movs	r2, r1
   20d70:	210b      	movs	r1, #11
   20d72:	1a08      	subs	r0, r1, r0
   20d74:	40c4      	lsrs	r4, r0
   20d76:	055b      	lsls	r3, r3, #21
   20d78:	0324      	lsls	r4, r4, #12
   20d7a:	0b24      	lsrs	r4, r4, #12
   20d7c:	0d5b      	lsrs	r3, r3, #21
   20d7e:	e7e6      	b.n	20d4e <__aeabi_ui2d+0x26>
   20d80:	2300      	movs	r3, #0
   20d82:	2400      	movs	r4, #0
   20d84:	2200      	movs	r2, #0
   20d86:	e7e2      	b.n	20d4e <__aeabi_ui2d+0x26>
   20d88:	0000041e 	.word	0x0000041e
   20d8c:	00000433 	.word	0x00000433
   20d90:	00000413 	.word	0x00000413
   20d94:	800fffff 	.word	0x800fffff

00020d98 <__aeabi_f2d>:
   20d98:	0041      	lsls	r1, r0, #1
   20d9a:	0e09      	lsrs	r1, r1, #24
   20d9c:	1c4b      	adds	r3, r1, #1
   20d9e:	b570      	push	{r4, r5, r6, lr}
   20da0:	b2db      	uxtb	r3, r3
   20da2:	0246      	lsls	r6, r0, #9
   20da4:	0a75      	lsrs	r5, r6, #9
   20da6:	0fc4      	lsrs	r4, r0, #31
   20da8:	2b01      	cmp	r3, #1
   20daa:	dd14      	ble.n	20dd6 <__aeabi_f2d+0x3e>
   20dac:	23e0      	movs	r3, #224	; 0xe0
   20dae:	009b      	lsls	r3, r3, #2
   20db0:	076d      	lsls	r5, r5, #29
   20db2:	0b36      	lsrs	r6, r6, #12
   20db4:	18cb      	adds	r3, r1, r3
   20db6:	2100      	movs	r1, #0
   20db8:	0d0a      	lsrs	r2, r1, #20
   20dba:	0028      	movs	r0, r5
   20dbc:	0512      	lsls	r2, r2, #20
   20dbe:	4d1c      	ldr	r5, [pc, #112]	; (20e30 <__aeabi_f2d+0x98>)
   20dc0:	4332      	orrs	r2, r6
   20dc2:	055b      	lsls	r3, r3, #21
   20dc4:	402a      	ands	r2, r5
   20dc6:	085b      	lsrs	r3, r3, #1
   20dc8:	4313      	orrs	r3, r2
   20dca:	005b      	lsls	r3, r3, #1
   20dcc:	07e4      	lsls	r4, r4, #31
   20dce:	085b      	lsrs	r3, r3, #1
   20dd0:	4323      	orrs	r3, r4
   20dd2:	0019      	movs	r1, r3
   20dd4:	bd70      	pop	{r4, r5, r6, pc}
   20dd6:	2900      	cmp	r1, #0
   20dd8:	d114      	bne.n	20e04 <__aeabi_f2d+0x6c>
   20dda:	2d00      	cmp	r5, #0
   20ddc:	d01e      	beq.n	20e1c <__aeabi_f2d+0x84>
   20dde:	0028      	movs	r0, r5
   20de0:	f7fd faa0 	bl	1e324 <__clzsi2>
   20de4:	280a      	cmp	r0, #10
   20de6:	dc1c      	bgt.n	20e22 <__aeabi_f2d+0x8a>
   20de8:	230b      	movs	r3, #11
   20dea:	002a      	movs	r2, r5
   20dec:	1a1b      	subs	r3, r3, r0
   20dee:	40da      	lsrs	r2, r3
   20df0:	0003      	movs	r3, r0
   20df2:	3315      	adds	r3, #21
   20df4:	409d      	lsls	r5, r3
   20df6:	4b0f      	ldr	r3, [pc, #60]	; (20e34 <__aeabi_f2d+0x9c>)
   20df8:	0312      	lsls	r2, r2, #12
   20dfa:	1a1b      	subs	r3, r3, r0
   20dfc:	055b      	lsls	r3, r3, #21
   20dfe:	0b16      	lsrs	r6, r2, #12
   20e00:	0d5b      	lsrs	r3, r3, #21
   20e02:	e7d8      	b.n	20db6 <__aeabi_f2d+0x1e>
   20e04:	2d00      	cmp	r5, #0
   20e06:	d006      	beq.n	20e16 <__aeabi_f2d+0x7e>
   20e08:	0b32      	lsrs	r2, r6, #12
   20e0a:	2680      	movs	r6, #128	; 0x80
   20e0c:	0336      	lsls	r6, r6, #12
   20e0e:	076d      	lsls	r5, r5, #29
   20e10:	4316      	orrs	r6, r2
   20e12:	4b09      	ldr	r3, [pc, #36]	; (20e38 <__aeabi_f2d+0xa0>)
   20e14:	e7cf      	b.n	20db6 <__aeabi_f2d+0x1e>
   20e16:	4b08      	ldr	r3, [pc, #32]	; (20e38 <__aeabi_f2d+0xa0>)
   20e18:	2600      	movs	r6, #0
   20e1a:	e7cc      	b.n	20db6 <__aeabi_f2d+0x1e>
   20e1c:	2300      	movs	r3, #0
   20e1e:	2600      	movs	r6, #0
   20e20:	e7c9      	b.n	20db6 <__aeabi_f2d+0x1e>
   20e22:	0003      	movs	r3, r0
   20e24:	002a      	movs	r2, r5
   20e26:	3b0b      	subs	r3, #11
   20e28:	409a      	lsls	r2, r3
   20e2a:	2500      	movs	r5, #0
   20e2c:	e7e3      	b.n	20df6 <__aeabi_f2d+0x5e>
   20e2e:	46c0      	nop			; (mov r8, r8)
   20e30:	800fffff 	.word	0x800fffff
   20e34:	00000389 	.word	0x00000389
   20e38:	000007ff 	.word	0x000007ff

00020e3c <__aeabi_d2f>:
   20e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   20e3e:	004c      	lsls	r4, r1, #1
   20e40:	0d64      	lsrs	r4, r4, #21
   20e42:	030b      	lsls	r3, r1, #12
   20e44:	1c62      	adds	r2, r4, #1
   20e46:	0f45      	lsrs	r5, r0, #29
   20e48:	0a5b      	lsrs	r3, r3, #9
   20e4a:	0552      	lsls	r2, r2, #21
   20e4c:	432b      	orrs	r3, r5
   20e4e:	0fc9      	lsrs	r1, r1, #31
   20e50:	00c5      	lsls	r5, r0, #3
   20e52:	0d52      	lsrs	r2, r2, #21
   20e54:	2a01      	cmp	r2, #1
   20e56:	dd28      	ble.n	20eaa <__aeabi_d2f+0x6e>
   20e58:	4a3a      	ldr	r2, [pc, #232]	; (20f44 <__aeabi_d2f+0x108>)
   20e5a:	18a6      	adds	r6, r4, r2
   20e5c:	2efe      	cmp	r6, #254	; 0xfe
   20e5e:	dc1b      	bgt.n	20e98 <__aeabi_d2f+0x5c>
   20e60:	2e00      	cmp	r6, #0
   20e62:	dd3e      	ble.n	20ee2 <__aeabi_d2f+0xa6>
   20e64:	0180      	lsls	r0, r0, #6
   20e66:	0002      	movs	r2, r0
   20e68:	1e50      	subs	r0, r2, #1
   20e6a:	4182      	sbcs	r2, r0
   20e6c:	0f6d      	lsrs	r5, r5, #29
   20e6e:	432a      	orrs	r2, r5
   20e70:	00db      	lsls	r3, r3, #3
   20e72:	4313      	orrs	r3, r2
   20e74:	075a      	lsls	r2, r3, #29
   20e76:	d004      	beq.n	20e82 <__aeabi_d2f+0x46>
   20e78:	220f      	movs	r2, #15
   20e7a:	401a      	ands	r2, r3
   20e7c:	2a04      	cmp	r2, #4
   20e7e:	d000      	beq.n	20e82 <__aeabi_d2f+0x46>
   20e80:	3304      	adds	r3, #4
   20e82:	2280      	movs	r2, #128	; 0x80
   20e84:	04d2      	lsls	r2, r2, #19
   20e86:	401a      	ands	r2, r3
   20e88:	d05a      	beq.n	20f40 <__aeabi_d2f+0x104>
   20e8a:	3601      	adds	r6, #1
   20e8c:	2eff      	cmp	r6, #255	; 0xff
   20e8e:	d003      	beq.n	20e98 <__aeabi_d2f+0x5c>
   20e90:	019b      	lsls	r3, r3, #6
   20e92:	0a5b      	lsrs	r3, r3, #9
   20e94:	b2f4      	uxtb	r4, r6
   20e96:	e001      	b.n	20e9c <__aeabi_d2f+0x60>
   20e98:	24ff      	movs	r4, #255	; 0xff
   20e9a:	2300      	movs	r3, #0
   20e9c:	0258      	lsls	r0, r3, #9
   20e9e:	05e4      	lsls	r4, r4, #23
   20ea0:	0a40      	lsrs	r0, r0, #9
   20ea2:	07c9      	lsls	r1, r1, #31
   20ea4:	4320      	orrs	r0, r4
   20ea6:	4308      	orrs	r0, r1
   20ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20eaa:	2c00      	cmp	r4, #0
   20eac:	d007      	beq.n	20ebe <__aeabi_d2f+0x82>
   20eae:	431d      	orrs	r5, r3
   20eb0:	d0f2      	beq.n	20e98 <__aeabi_d2f+0x5c>
   20eb2:	2080      	movs	r0, #128	; 0x80
   20eb4:	00db      	lsls	r3, r3, #3
   20eb6:	0480      	lsls	r0, r0, #18
   20eb8:	4303      	orrs	r3, r0
   20eba:	26ff      	movs	r6, #255	; 0xff
   20ebc:	e7da      	b.n	20e74 <__aeabi_d2f+0x38>
   20ebe:	432b      	orrs	r3, r5
   20ec0:	d003      	beq.n	20eca <__aeabi_d2f+0x8e>
   20ec2:	2305      	movs	r3, #5
   20ec4:	08db      	lsrs	r3, r3, #3
   20ec6:	2cff      	cmp	r4, #255	; 0xff
   20ec8:	d003      	beq.n	20ed2 <__aeabi_d2f+0x96>
   20eca:	025b      	lsls	r3, r3, #9
   20ecc:	0a5b      	lsrs	r3, r3, #9
   20ece:	b2e4      	uxtb	r4, r4
   20ed0:	e7e4      	b.n	20e9c <__aeabi_d2f+0x60>
   20ed2:	2b00      	cmp	r3, #0
   20ed4:	d032      	beq.n	20f3c <__aeabi_d2f+0x100>
   20ed6:	2080      	movs	r0, #128	; 0x80
   20ed8:	03c0      	lsls	r0, r0, #15
   20eda:	4303      	orrs	r3, r0
   20edc:	025b      	lsls	r3, r3, #9
   20ede:	0a5b      	lsrs	r3, r3, #9
   20ee0:	e7dc      	b.n	20e9c <__aeabi_d2f+0x60>
   20ee2:	0032      	movs	r2, r6
   20ee4:	3217      	adds	r2, #23
   20ee6:	db14      	blt.n	20f12 <__aeabi_d2f+0xd6>
   20ee8:	2280      	movs	r2, #128	; 0x80
   20eea:	271e      	movs	r7, #30
   20eec:	0412      	lsls	r2, r2, #16
   20eee:	4313      	orrs	r3, r2
   20ef0:	1bbf      	subs	r7, r7, r6
   20ef2:	2f1f      	cmp	r7, #31
   20ef4:	dc0f      	bgt.n	20f16 <__aeabi_d2f+0xda>
   20ef6:	4a14      	ldr	r2, [pc, #80]	; (20f48 <__aeabi_d2f+0x10c>)
   20ef8:	4694      	mov	ip, r2
   20efa:	4464      	add	r4, ip
   20efc:	002a      	movs	r2, r5
   20efe:	40a5      	lsls	r5, r4
   20f00:	002e      	movs	r6, r5
   20f02:	40a3      	lsls	r3, r4
   20f04:	1e75      	subs	r5, r6, #1
   20f06:	41ae      	sbcs	r6, r5
   20f08:	40fa      	lsrs	r2, r7
   20f0a:	4333      	orrs	r3, r6
   20f0c:	4313      	orrs	r3, r2
   20f0e:	2600      	movs	r6, #0
   20f10:	e7b0      	b.n	20e74 <__aeabi_d2f+0x38>
   20f12:	2400      	movs	r4, #0
   20f14:	e7d5      	b.n	20ec2 <__aeabi_d2f+0x86>
   20f16:	2202      	movs	r2, #2
   20f18:	4252      	negs	r2, r2
   20f1a:	1b96      	subs	r6, r2, r6
   20f1c:	001a      	movs	r2, r3
   20f1e:	40f2      	lsrs	r2, r6
   20f20:	2f20      	cmp	r7, #32
   20f22:	d009      	beq.n	20f38 <__aeabi_d2f+0xfc>
   20f24:	4809      	ldr	r0, [pc, #36]	; (20f4c <__aeabi_d2f+0x110>)
   20f26:	4684      	mov	ip, r0
   20f28:	4464      	add	r4, ip
   20f2a:	40a3      	lsls	r3, r4
   20f2c:	432b      	orrs	r3, r5
   20f2e:	1e5d      	subs	r5, r3, #1
   20f30:	41ab      	sbcs	r3, r5
   20f32:	2600      	movs	r6, #0
   20f34:	4313      	orrs	r3, r2
   20f36:	e79d      	b.n	20e74 <__aeabi_d2f+0x38>
   20f38:	2300      	movs	r3, #0
   20f3a:	e7f7      	b.n	20f2c <__aeabi_d2f+0xf0>
   20f3c:	2300      	movs	r3, #0
   20f3e:	e7ad      	b.n	20e9c <__aeabi_d2f+0x60>
   20f40:	0034      	movs	r4, r6
   20f42:	e7bf      	b.n	20ec4 <__aeabi_d2f+0x88>
   20f44:	fffffc80 	.word	0xfffffc80
   20f48:	fffffc82 	.word	0xfffffc82
   20f4c:	fffffca2 	.word	0xfffffca2

00020f50 <__errno>:
   20f50:	4b01      	ldr	r3, [pc, #4]	; (20f58 <__errno+0x8>)
   20f52:	6818      	ldr	r0, [r3, #0]
   20f54:	4770      	bx	lr
   20f56:	46c0      	nop			; (mov r8, r8)
   20f58:	200002cc 	.word	0x200002cc

00020f5c <__libc_init_array>:
   20f5c:	b570      	push	{r4, r5, r6, lr}
   20f5e:	4e0d      	ldr	r6, [pc, #52]	; (20f94 <__libc_init_array+0x38>)
   20f60:	4d0d      	ldr	r5, [pc, #52]	; (20f98 <__libc_init_array+0x3c>)
   20f62:	2400      	movs	r4, #0
   20f64:	1bad      	subs	r5, r5, r6
   20f66:	10ad      	asrs	r5, r5, #2
   20f68:	d005      	beq.n	20f76 <__libc_init_array+0x1a>
   20f6a:	00a3      	lsls	r3, r4, #2
   20f6c:	58f3      	ldr	r3, [r6, r3]
   20f6e:	3401      	adds	r4, #1
   20f70:	4798      	blx	r3
   20f72:	42a5      	cmp	r5, r4
   20f74:	d1f9      	bne.n	20f6a <__libc_init_array+0xe>
   20f76:	f006 f9a3 	bl	272c0 <_init>
   20f7a:	4e08      	ldr	r6, [pc, #32]	; (20f9c <__libc_init_array+0x40>)
   20f7c:	4d08      	ldr	r5, [pc, #32]	; (20fa0 <__libc_init_array+0x44>)
   20f7e:	2400      	movs	r4, #0
   20f80:	1bad      	subs	r5, r5, r6
   20f82:	10ad      	asrs	r5, r5, #2
   20f84:	d005      	beq.n	20f92 <__libc_init_array+0x36>
   20f86:	00a3      	lsls	r3, r4, #2
   20f88:	58f3      	ldr	r3, [r6, r3]
   20f8a:	3401      	adds	r4, #1
   20f8c:	4798      	blx	r3
   20f8e:	42a5      	cmp	r5, r4
   20f90:	d1f9      	bne.n	20f86 <__libc_init_array+0x2a>
   20f92:	bd70      	pop	{r4, r5, r6, pc}
   20f94:	000272cc 	.word	0x000272cc
   20f98:	000272cc 	.word	0x000272cc
   20f9c:	000272cc 	.word	0x000272cc
   20fa0:	000272d4 	.word	0x000272d4

00020fa4 <memcpy>:
   20fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
   20fa6:	0005      	movs	r5, r0
   20fa8:	2a0f      	cmp	r2, #15
   20faa:	d92f      	bls.n	2100c <memcpy+0x68>
   20fac:	000b      	movs	r3, r1
   20fae:	4303      	orrs	r3, r0
   20fb0:	079b      	lsls	r3, r3, #30
   20fb2:	d134      	bne.n	2101e <memcpy+0x7a>
   20fb4:	0016      	movs	r6, r2
   20fb6:	000c      	movs	r4, r1
   20fb8:	0003      	movs	r3, r0
   20fba:	3e10      	subs	r6, #16
   20fbc:	0935      	lsrs	r5, r6, #4
   20fbe:	3501      	adds	r5, #1
   20fc0:	012d      	lsls	r5, r5, #4
   20fc2:	1945      	adds	r5, r0, r5
   20fc4:	6827      	ldr	r7, [r4, #0]
   20fc6:	601f      	str	r7, [r3, #0]
   20fc8:	6867      	ldr	r7, [r4, #4]
   20fca:	605f      	str	r7, [r3, #4]
   20fcc:	68a7      	ldr	r7, [r4, #8]
   20fce:	609f      	str	r7, [r3, #8]
   20fd0:	68e7      	ldr	r7, [r4, #12]
   20fd2:	3410      	adds	r4, #16
   20fd4:	60df      	str	r7, [r3, #12]
   20fd6:	3310      	adds	r3, #16
   20fd8:	429d      	cmp	r5, r3
   20fda:	d1f3      	bne.n	20fc4 <memcpy+0x20>
   20fdc:	230f      	movs	r3, #15
   20fde:	439e      	bics	r6, r3
   20fe0:	3610      	adds	r6, #16
   20fe2:	1985      	adds	r5, r0, r6
   20fe4:	1989      	adds	r1, r1, r6
   20fe6:	4013      	ands	r3, r2
   20fe8:	2b03      	cmp	r3, #3
   20fea:	d91a      	bls.n	21022 <memcpy+0x7e>
   20fec:	1f1e      	subs	r6, r3, #4
   20fee:	2300      	movs	r3, #0
   20ff0:	08b4      	lsrs	r4, r6, #2
   20ff2:	3401      	adds	r4, #1
   20ff4:	00a4      	lsls	r4, r4, #2
   20ff6:	58cf      	ldr	r7, [r1, r3]
   20ff8:	50ef      	str	r7, [r5, r3]
   20ffa:	3304      	adds	r3, #4
   20ffc:	42a3      	cmp	r3, r4
   20ffe:	d1fa      	bne.n	20ff6 <memcpy+0x52>
   21000:	2403      	movs	r4, #3
   21002:	43a6      	bics	r6, r4
   21004:	1d33      	adds	r3, r6, #4
   21006:	4022      	ands	r2, r4
   21008:	18c9      	adds	r1, r1, r3
   2100a:	18ed      	adds	r5, r5, r3
   2100c:	2a00      	cmp	r2, #0
   2100e:	d005      	beq.n	2101c <memcpy+0x78>
   21010:	2300      	movs	r3, #0
   21012:	5ccc      	ldrb	r4, [r1, r3]
   21014:	54ec      	strb	r4, [r5, r3]
   21016:	3301      	adds	r3, #1
   21018:	4293      	cmp	r3, r2
   2101a:	d1fa      	bne.n	21012 <memcpy+0x6e>
   2101c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2101e:	0005      	movs	r5, r0
   21020:	e7f6      	b.n	21010 <memcpy+0x6c>
   21022:	001a      	movs	r2, r3
   21024:	e7f2      	b.n	2100c <memcpy+0x68>
   21026:	46c0      	nop			; (mov r8, r8)

00021028 <memset>:
   21028:	b5f0      	push	{r4, r5, r6, r7, lr}
   2102a:	0783      	lsls	r3, r0, #30
   2102c:	d043      	beq.n	210b6 <memset+0x8e>
   2102e:	1e54      	subs	r4, r2, #1
   21030:	2a00      	cmp	r2, #0
   21032:	d03f      	beq.n	210b4 <memset+0x8c>
   21034:	b2ce      	uxtb	r6, r1
   21036:	0002      	movs	r2, r0
   21038:	2503      	movs	r5, #3
   2103a:	e002      	b.n	21042 <memset+0x1a>
   2103c:	001a      	movs	r2, r3
   2103e:	3c01      	subs	r4, #1
   21040:	d338      	bcc.n	210b4 <memset+0x8c>
   21042:	1c53      	adds	r3, r2, #1
   21044:	7016      	strb	r6, [r2, #0]
   21046:	422b      	tst	r3, r5
   21048:	d1f8      	bne.n	2103c <memset+0x14>
   2104a:	2c03      	cmp	r4, #3
   2104c:	d92a      	bls.n	210a4 <memset+0x7c>
   2104e:	22ff      	movs	r2, #255	; 0xff
   21050:	400a      	ands	r2, r1
   21052:	0215      	lsls	r5, r2, #8
   21054:	4315      	orrs	r5, r2
   21056:	042a      	lsls	r2, r5, #16
   21058:	4315      	orrs	r5, r2
   2105a:	2c0f      	cmp	r4, #15
   2105c:	d914      	bls.n	21088 <memset+0x60>
   2105e:	0027      	movs	r7, r4
   21060:	001a      	movs	r2, r3
   21062:	3f10      	subs	r7, #16
   21064:	093e      	lsrs	r6, r7, #4
   21066:	3601      	adds	r6, #1
   21068:	0136      	lsls	r6, r6, #4
   2106a:	199e      	adds	r6, r3, r6
   2106c:	6015      	str	r5, [r2, #0]
   2106e:	6055      	str	r5, [r2, #4]
   21070:	6095      	str	r5, [r2, #8]
   21072:	60d5      	str	r5, [r2, #12]
   21074:	3210      	adds	r2, #16
   21076:	4296      	cmp	r6, r2
   21078:	d1f8      	bne.n	2106c <memset+0x44>
   2107a:	220f      	movs	r2, #15
   2107c:	4397      	bics	r7, r2
   2107e:	3710      	adds	r7, #16
   21080:	19db      	adds	r3, r3, r7
   21082:	4014      	ands	r4, r2
   21084:	2c03      	cmp	r4, #3
   21086:	d90d      	bls.n	210a4 <memset+0x7c>
   21088:	001a      	movs	r2, r3
   2108a:	1f27      	subs	r7, r4, #4
   2108c:	08be      	lsrs	r6, r7, #2
   2108e:	3601      	adds	r6, #1
   21090:	00b6      	lsls	r6, r6, #2
   21092:	199e      	adds	r6, r3, r6
   21094:	c220      	stmia	r2!, {r5}
   21096:	42b2      	cmp	r2, r6
   21098:	d1fc      	bne.n	21094 <memset+0x6c>
   2109a:	2203      	movs	r2, #3
   2109c:	4397      	bics	r7, r2
   2109e:	3704      	adds	r7, #4
   210a0:	19db      	adds	r3, r3, r7
   210a2:	4014      	ands	r4, r2
   210a4:	2c00      	cmp	r4, #0
   210a6:	d005      	beq.n	210b4 <memset+0x8c>
   210a8:	b2c9      	uxtb	r1, r1
   210aa:	191c      	adds	r4, r3, r4
   210ac:	7019      	strb	r1, [r3, #0]
   210ae:	3301      	adds	r3, #1
   210b0:	429c      	cmp	r4, r3
   210b2:	d1fb      	bne.n	210ac <memset+0x84>
   210b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   210b6:	0014      	movs	r4, r2
   210b8:	0003      	movs	r3, r0
   210ba:	e7c6      	b.n	2104a <memset+0x22>

000210bc <sprintf>:
   210bc:	b40e      	push	{r1, r2, r3}
   210be:	b510      	push	{r4, lr}
   210c0:	b09d      	sub	sp, #116	; 0x74
   210c2:	a902      	add	r1, sp, #8
   210c4:	9002      	str	r0, [sp, #8]
   210c6:	6108      	str	r0, [r1, #16]
   210c8:	480b      	ldr	r0, [pc, #44]	; (210f8 <sprintf+0x3c>)
   210ca:	2482      	movs	r4, #130	; 0x82
   210cc:	6088      	str	r0, [r1, #8]
   210ce:	6148      	str	r0, [r1, #20]
   210d0:	2001      	movs	r0, #1
   210d2:	4240      	negs	r0, r0
   210d4:	ab1f      	add	r3, sp, #124	; 0x7c
   210d6:	81c8      	strh	r0, [r1, #14]
   210d8:	4808      	ldr	r0, [pc, #32]	; (210fc <sprintf+0x40>)
   210da:	cb04      	ldmia	r3!, {r2}
   210dc:	00a4      	lsls	r4, r4, #2
   210de:	6800      	ldr	r0, [r0, #0]
   210e0:	9301      	str	r3, [sp, #4]
   210e2:	818c      	strh	r4, [r1, #12]
   210e4:	f000 f86c 	bl	211c0 <_svfprintf_r>
   210e8:	2300      	movs	r3, #0
   210ea:	9a02      	ldr	r2, [sp, #8]
   210ec:	7013      	strb	r3, [r2, #0]
   210ee:	b01d      	add	sp, #116	; 0x74
   210f0:	bc10      	pop	{r4}
   210f2:	bc08      	pop	{r3}
   210f4:	b003      	add	sp, #12
   210f6:	4718      	bx	r3
   210f8:	7fffffff 	.word	0x7fffffff
   210fc:	200002cc 	.word	0x200002cc

00021100 <strcat>:
   21100:	b570      	push	{r4, r5, r6, lr}
   21102:	0005      	movs	r5, r0
   21104:	0783      	lsls	r3, r0, #30
   21106:	d116      	bne.n	21136 <strcat+0x36>
   21108:	6802      	ldr	r2, [r0, #0]
   2110a:	4b0e      	ldr	r3, [pc, #56]	; (21144 <strcat+0x44>)
   2110c:	4c0e      	ldr	r4, [pc, #56]	; (21148 <strcat+0x48>)
   2110e:	18d3      	adds	r3, r2, r3
   21110:	4393      	bics	r3, r2
   21112:	4223      	tst	r3, r4
   21114:	d10f      	bne.n	21136 <strcat+0x36>
   21116:	3004      	adds	r0, #4
   21118:	6802      	ldr	r2, [r0, #0]
   2111a:	4b0a      	ldr	r3, [pc, #40]	; (21144 <strcat+0x44>)
   2111c:	18d3      	adds	r3, r2, r3
   2111e:	4393      	bics	r3, r2
   21120:	4223      	tst	r3, r4
   21122:	d108      	bne.n	21136 <strcat+0x36>
   21124:	3004      	adds	r0, #4
   21126:	6802      	ldr	r2, [r0, #0]
   21128:	4b06      	ldr	r3, [pc, #24]	; (21144 <strcat+0x44>)
   2112a:	18d3      	adds	r3, r2, r3
   2112c:	4393      	bics	r3, r2
   2112e:	4223      	tst	r3, r4
   21130:	d0f1      	beq.n	21116 <strcat+0x16>
   21132:	e000      	b.n	21136 <strcat+0x36>
   21134:	3001      	adds	r0, #1
   21136:	7803      	ldrb	r3, [r0, #0]
   21138:	2b00      	cmp	r3, #0
   2113a:	d1fb      	bne.n	21134 <strcat+0x34>
   2113c:	f000 f806 	bl	2114c <strcpy>
   21140:	0028      	movs	r0, r5
   21142:	bd70      	pop	{r4, r5, r6, pc}
   21144:	fefefeff 	.word	0xfefefeff
   21148:	80808080 	.word	0x80808080

0002114c <strcpy>:
   2114c:	1c03      	adds	r3, r0, #0
   2114e:	780a      	ldrb	r2, [r1, #0]
   21150:	3101      	adds	r1, #1
   21152:	701a      	strb	r2, [r3, #0]
   21154:	3301      	adds	r3, #1
   21156:	2a00      	cmp	r2, #0
   21158:	d1f9      	bne.n	2114e <strcpy+0x2>
   2115a:	4770      	bx	lr

0002115c <strlen>:
   2115c:	b510      	push	{r4, lr}
   2115e:	0783      	lsls	r3, r0, #30
   21160:	d025      	beq.n	211ae <strlen+0x52>
   21162:	7803      	ldrb	r3, [r0, #0]
   21164:	2b00      	cmp	r3, #0
   21166:	d024      	beq.n	211b2 <strlen+0x56>
   21168:	0003      	movs	r3, r0
   2116a:	2103      	movs	r1, #3
   2116c:	e002      	b.n	21174 <strlen+0x18>
   2116e:	781a      	ldrb	r2, [r3, #0]
   21170:	2a00      	cmp	r2, #0
   21172:	d01a      	beq.n	211aa <strlen+0x4e>
   21174:	3301      	adds	r3, #1
   21176:	420b      	tst	r3, r1
   21178:	d1f9      	bne.n	2116e <strlen+0x12>
   2117a:	6819      	ldr	r1, [r3, #0]
   2117c:	4a0e      	ldr	r2, [pc, #56]	; (211b8 <strlen+0x5c>)
   2117e:	4c0f      	ldr	r4, [pc, #60]	; (211bc <strlen+0x60>)
   21180:	188a      	adds	r2, r1, r2
   21182:	438a      	bics	r2, r1
   21184:	4222      	tst	r2, r4
   21186:	d106      	bne.n	21196 <strlen+0x3a>
   21188:	3304      	adds	r3, #4
   2118a:	6819      	ldr	r1, [r3, #0]
   2118c:	4a0a      	ldr	r2, [pc, #40]	; (211b8 <strlen+0x5c>)
   2118e:	188a      	adds	r2, r1, r2
   21190:	438a      	bics	r2, r1
   21192:	4222      	tst	r2, r4
   21194:	d0f8      	beq.n	21188 <strlen+0x2c>
   21196:	001a      	movs	r2, r3
   21198:	781b      	ldrb	r3, [r3, #0]
   2119a:	2b00      	cmp	r3, #0
   2119c:	d003      	beq.n	211a6 <strlen+0x4a>
   2119e:	3201      	adds	r2, #1
   211a0:	7811      	ldrb	r1, [r2, #0]
   211a2:	2900      	cmp	r1, #0
   211a4:	d1fb      	bne.n	2119e <strlen+0x42>
   211a6:	1a10      	subs	r0, r2, r0
   211a8:	bd10      	pop	{r4, pc}
   211aa:	1a18      	subs	r0, r3, r0
   211ac:	e7fc      	b.n	211a8 <strlen+0x4c>
   211ae:	0003      	movs	r3, r0
   211b0:	e7e3      	b.n	2117a <strlen+0x1e>
   211b2:	2000      	movs	r0, #0
   211b4:	e7f8      	b.n	211a8 <strlen+0x4c>
   211b6:	46c0      	nop			; (mov r8, r8)
   211b8:	fefefeff 	.word	0xfefefeff
   211bc:	80808080 	.word	0x80808080

000211c0 <_svfprintf_r>:
   211c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   211c2:	46de      	mov	lr, fp
   211c4:	4645      	mov	r5, r8
   211c6:	4657      	mov	r7, sl
   211c8:	464e      	mov	r6, r9
   211ca:	b5e0      	push	{r5, r6, r7, lr}
   211cc:	b0c3      	sub	sp, #268	; 0x10c
   211ce:	000d      	movs	r5, r1
   211d0:	9106      	str	r1, [sp, #24]
   211d2:	0014      	movs	r4, r2
   211d4:	930f      	str	r3, [sp, #60]	; 0x3c
   211d6:	9009      	str	r0, [sp, #36]	; 0x24
   211d8:	f002 fb92 	bl	23900 <_localeconv_r>
   211dc:	6803      	ldr	r3, [r0, #0]
   211de:	0018      	movs	r0, r3
   211e0:	9319      	str	r3, [sp, #100]	; 0x64
   211e2:	f7ff ffbb 	bl	2115c <strlen>
   211e6:	9018      	str	r0, [sp, #96]	; 0x60
   211e8:	89ab      	ldrh	r3, [r5, #12]
   211ea:	061b      	lsls	r3, r3, #24
   211ec:	d505      	bpl.n	211fa <_svfprintf_r+0x3a>
   211ee:	692b      	ldr	r3, [r5, #16]
   211f0:	9307      	str	r3, [sp, #28]
   211f2:	2b00      	cmp	r3, #0
   211f4:	d101      	bne.n	211fa <_svfprintf_r+0x3a>
   211f6:	f001 f863 	bl	222c0 <_svfprintf_r+0x1100>
   211fa:	ab32      	add	r3, sp, #200	; 0xc8
   211fc:	9325      	str	r3, [sp, #148]	; 0x94
   211fe:	2300      	movs	r3, #0
   21200:	46a3      	mov	fp, r4
   21202:	af25      	add	r7, sp, #148	; 0x94
   21204:	60bb      	str	r3, [r7, #8]
   21206:	607b      	str	r3, [r7, #4]
   21208:	9314      	str	r3, [sp, #80]	; 0x50
   2120a:	9316      	str	r3, [sp, #88]	; 0x58
   2120c:	9315      	str	r3, [sp, #84]	; 0x54
   2120e:	ae32      	add	r6, sp, #200	; 0xc8
   21210:	9317      	str	r3, [sp, #92]	; 0x5c
   21212:	931a      	str	r3, [sp, #104]	; 0x68
   21214:	930a      	str	r3, [sp, #40]	; 0x28
   21216:	465b      	mov	r3, fp
   21218:	781b      	ldrb	r3, [r3, #0]
   2121a:	465c      	mov	r4, fp
   2121c:	2b00      	cmp	r3, #0
   2121e:	d01c      	beq.n	2125a <_svfprintf_r+0x9a>
   21220:	2b25      	cmp	r3, #37	; 0x25
   21222:	d102      	bne.n	2122a <_svfprintf_r+0x6a>
   21224:	e019      	b.n	2125a <_svfprintf_r+0x9a>
   21226:	2b25      	cmp	r3, #37	; 0x25
   21228:	d003      	beq.n	21232 <_svfprintf_r+0x72>
   2122a:	3401      	adds	r4, #1
   2122c:	7823      	ldrb	r3, [r4, #0]
   2122e:	2b00      	cmp	r3, #0
   21230:	d1f9      	bne.n	21226 <_svfprintf_r+0x66>
   21232:	465b      	mov	r3, fp
   21234:	1ae5      	subs	r5, r4, r3
   21236:	d010      	beq.n	2125a <_svfprintf_r+0x9a>
   21238:	465b      	mov	r3, fp
   2123a:	6033      	str	r3, [r6, #0]
   2123c:	68bb      	ldr	r3, [r7, #8]
   2123e:	6075      	str	r5, [r6, #4]
   21240:	195b      	adds	r3, r3, r5
   21242:	60bb      	str	r3, [r7, #8]
   21244:	687b      	ldr	r3, [r7, #4]
   21246:	3301      	adds	r3, #1
   21248:	607b      	str	r3, [r7, #4]
   2124a:	2b07      	cmp	r3, #7
   2124c:	dc2e      	bgt.n	212ac <_svfprintf_r+0xec>
   2124e:	3608      	adds	r6, #8
   21250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21252:	469c      	mov	ip, r3
   21254:	44ac      	add	ip, r5
   21256:	4663      	mov	r3, ip
   21258:	930a      	str	r3, [sp, #40]	; 0x28
   2125a:	7823      	ldrb	r3, [r4, #0]
   2125c:	2b00      	cmp	r3, #0
   2125e:	d02e      	beq.n	212be <_svfprintf_r+0xfe>
   21260:	1c63      	adds	r3, r4, #1
   21262:	469b      	mov	fp, r3
   21264:	2300      	movs	r3, #0
   21266:	aa16      	add	r2, sp, #88	; 0x58
   21268:	77d3      	strb	r3, [r2, #31]
   2126a:	2201      	movs	r2, #1
   2126c:	4252      	negs	r2, r2
   2126e:	4692      	mov	sl, r2
   21270:	2200      	movs	r2, #0
   21272:	2100      	movs	r1, #0
   21274:	920b      	str	r2, [sp, #44]	; 0x2c
   21276:	3220      	adds	r2, #32
   21278:	4691      	mov	r9, r2
   2127a:	3220      	adds	r2, #32
   2127c:	7863      	ldrb	r3, [r4, #1]
   2127e:	4688      	mov	r8, r1
   21280:	2000      	movs	r0, #0
   21282:	2400      	movs	r4, #0
   21284:	4694      	mov	ip, r2
   21286:	4659      	mov	r1, fp
   21288:	3101      	adds	r1, #1
   2128a:	001a      	movs	r2, r3
   2128c:	3a20      	subs	r2, #32
   2128e:	2a58      	cmp	r2, #88	; 0x58
   21290:	d900      	bls.n	21294 <_svfprintf_r+0xd4>
   21292:	e2fd      	b.n	21890 <_svfprintf_r+0x6d0>
   21294:	4dd7      	ldr	r5, [pc, #860]	; (215f4 <_svfprintf_r+0x434>)
   21296:	0092      	lsls	r2, r2, #2
   21298:	58aa      	ldr	r2, [r5, r2]
   2129a:	4697      	mov	pc, r2
   2129c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2129e:	920f      	str	r2, [sp, #60]	; 0x3c
   212a0:	425b      	negs	r3, r3
   212a2:	930b      	str	r3, [sp, #44]	; 0x2c
   212a4:	2304      	movs	r3, #4
   212a6:	431c      	orrs	r4, r3
   212a8:	780b      	ldrb	r3, [r1, #0]
   212aa:	e7ed      	b.n	21288 <_svfprintf_r+0xc8>
   212ac:	003a      	movs	r2, r7
   212ae:	9906      	ldr	r1, [sp, #24]
   212b0:	9809      	ldr	r0, [sp, #36]	; 0x24
   212b2:	f003 f995 	bl	245e0 <__ssprint_r>
   212b6:	2800      	cmp	r0, #0
   212b8:	d109      	bne.n	212ce <_svfprintf_r+0x10e>
   212ba:	ae32      	add	r6, sp, #200	; 0xc8
   212bc:	e7c8      	b.n	21250 <_svfprintf_r+0x90>
   212be:	68bb      	ldr	r3, [r7, #8]
   212c0:	2b00      	cmp	r3, #0
   212c2:	d004      	beq.n	212ce <_svfprintf_r+0x10e>
   212c4:	003a      	movs	r2, r7
   212c6:	9906      	ldr	r1, [sp, #24]
   212c8:	9809      	ldr	r0, [sp, #36]	; 0x24
   212ca:	f003 f989 	bl	245e0 <__ssprint_r>
   212ce:	9b06      	ldr	r3, [sp, #24]
   212d0:	899b      	ldrh	r3, [r3, #12]
   212d2:	065b      	lsls	r3, r3, #25
   212d4:	d501      	bpl.n	212da <_svfprintf_r+0x11a>
   212d6:	f001 f8ce 	bl	22476 <_svfprintf_r+0x12b6>
   212da:	980a      	ldr	r0, [sp, #40]	; 0x28
   212dc:	b043      	add	sp, #268	; 0x10c
   212de:	bc3c      	pop	{r2, r3, r4, r5}
   212e0:	4690      	mov	r8, r2
   212e2:	4699      	mov	r9, r3
   212e4:	46a2      	mov	sl, r4
   212e6:	46ab      	mov	fp, r5
   212e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   212ea:	2201      	movs	r2, #1
   212ec:	780b      	ldrb	r3, [r1, #0]
   212ee:	4690      	mov	r8, r2
   212f0:	202b      	movs	r0, #43	; 0x2b
   212f2:	e7c9      	b.n	21288 <_svfprintf_r+0xc8>
   212f4:	1c4b      	adds	r3, r1, #1
   212f6:	469b      	mov	fp, r3
   212f8:	780b      	ldrb	r3, [r1, #0]
   212fa:	2b2a      	cmp	r3, #42	; 0x2a
   212fc:	d101      	bne.n	21302 <_svfprintf_r+0x142>
   212fe:	f001 fa1b 	bl	22738 <_svfprintf_r+0x1578>
   21302:	001a      	movs	r2, r3
   21304:	2100      	movs	r1, #0
   21306:	3a30      	subs	r2, #48	; 0x30
   21308:	468a      	mov	sl, r1
   2130a:	4659      	mov	r1, fp
   2130c:	2a09      	cmp	r2, #9
   2130e:	d8bc      	bhi.n	2128a <_svfprintf_r+0xca>
   21310:	0003      	movs	r3, r0
   21312:	0011      	movs	r1, r2
   21314:	4650      	mov	r0, sl
   21316:	465a      	mov	r2, fp
   21318:	469a      	mov	sl, r3
   2131a:	46a3      	mov	fp, r4
   2131c:	0083      	lsls	r3, r0, #2
   2131e:	181b      	adds	r3, r3, r0
   21320:	7814      	ldrb	r4, [r2, #0]
   21322:	005b      	lsls	r3, r3, #1
   21324:	1858      	adds	r0, r3, r1
   21326:	0021      	movs	r1, r4
   21328:	1c53      	adds	r3, r2, #1
   2132a:	3930      	subs	r1, #48	; 0x30
   2132c:	001a      	movs	r2, r3
   2132e:	2909      	cmp	r1, #9
   21330:	d9f4      	bls.n	2131c <_svfprintf_r+0x15c>
   21332:	4652      	mov	r2, sl
   21334:	0019      	movs	r1, r3
   21336:	4682      	mov	sl, r0
   21338:	0023      	movs	r3, r4
   2133a:	0010      	movs	r0, r2
   2133c:	465c      	mov	r4, fp
   2133e:	e7a4      	b.n	2128a <_svfprintf_r+0xca>
   21340:	2380      	movs	r3, #128	; 0x80
   21342:	431c      	orrs	r4, r3
   21344:	780b      	ldrb	r3, [r1, #0]
   21346:	e79f      	b.n	21288 <_svfprintf_r+0xc8>
   21348:	468b      	mov	fp, r1
   2134a:	4641      	mov	r1, r8
   2134c:	9312      	str	r3, [sp, #72]	; 0x48
   2134e:	2900      	cmp	r1, #0
   21350:	d001      	beq.n	21356 <_svfprintf_r+0x196>
   21352:	f001 fa1f 	bl	22794 <_svfprintf_r+0x15d4>
   21356:	2310      	movs	r3, #16
   21358:	431c      	orrs	r4, r3
   2135a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2135c:	06a3      	lsls	r3, r4, #26
   2135e:	d501      	bpl.n	21364 <_svfprintf_r+0x1a4>
   21360:	f000 fe88 	bl	22074 <_svfprintf_r+0xeb4>
   21364:	06e3      	lsls	r3, r4, #27
   21366:	d501      	bpl.n	2136c <_svfprintf_r+0x1ac>
   21368:	f000 fd80 	bl	21e6c <_svfprintf_r+0xcac>
   2136c:	0663      	lsls	r3, r4, #25
   2136e:	d401      	bmi.n	21374 <_svfprintf_r+0x1b4>
   21370:	f000 fd7c 	bl	21e6c <_svfprintf_r+0xcac>
   21374:	2100      	movs	r1, #0
   21376:	5e53      	ldrsh	r3, [r2, r1]
   21378:	930c      	str	r3, [sp, #48]	; 0x30
   2137a:	3204      	adds	r2, #4
   2137c:	17db      	asrs	r3, r3, #31
   2137e:	930d      	str	r3, [sp, #52]	; 0x34
   21380:	920f      	str	r2, [sp, #60]	; 0x3c
   21382:	d501      	bpl.n	21388 <_svfprintf_r+0x1c8>
   21384:	f000 fe86 	bl	22094 <_svfprintf_r+0xed4>
   21388:	990c      	ldr	r1, [sp, #48]	; 0x30
   2138a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2138c:	0008      	movs	r0, r1
   2138e:	ab16      	add	r3, sp, #88	; 0x58
   21390:	7fdb      	ldrb	r3, [r3, #31]
   21392:	4310      	orrs	r0, r2
   21394:	4698      	mov	r8, r3
   21396:	0002      	movs	r2, r0
   21398:	2301      	movs	r3, #1
   2139a:	4651      	mov	r1, sl
   2139c:	3101      	adds	r1, #1
   2139e:	d100      	bne.n	213a2 <_svfprintf_r+0x1e2>
   213a0:	e0ff      	b.n	215a2 <_svfprintf_r+0x3e2>
   213a2:	2180      	movs	r1, #128	; 0x80
   213a4:	0020      	movs	r0, r4
   213a6:	4388      	bics	r0, r1
   213a8:	9008      	str	r0, [sp, #32]
   213aa:	2a00      	cmp	r2, #0
   213ac:	d000      	beq.n	213b0 <_svfprintf_r+0x1f0>
   213ae:	e0fc      	b.n	215aa <_svfprintf_r+0x3ea>
   213b0:	4652      	mov	r2, sl
   213b2:	2a00      	cmp	r2, #0
   213b4:	d001      	beq.n	213ba <_svfprintf_r+0x1fa>
   213b6:	f000 fc2c 	bl	21c12 <_svfprintf_r+0xa52>
   213ba:	2b00      	cmp	r3, #0
   213bc:	d001      	beq.n	213c2 <_svfprintf_r+0x202>
   213be:	f000 fd04 	bl	21dca <_svfprintf_r+0xc0a>
   213c2:	2001      	movs	r0, #1
   213c4:	ab32      	add	r3, sp, #200	; 0xc8
   213c6:	4020      	ands	r0, r4
   213c8:	900e      	str	r0, [sp, #56]	; 0x38
   213ca:	9311      	str	r3, [sp, #68]	; 0x44
   213cc:	d008      	beq.n	213e0 <_svfprintf_r+0x220>
   213ce:	2327      	movs	r3, #39	; 0x27
   213d0:	2130      	movs	r1, #48	; 0x30
   213d2:	aa28      	add	r2, sp, #160	; 0xa0
   213d4:	54d1      	strb	r1, [r2, r3]
   213d6:	aa16      	add	r2, sp, #88	; 0x58
   213d8:	4694      	mov	ip, r2
   213da:	3348      	adds	r3, #72	; 0x48
   213dc:	4463      	add	r3, ip
   213de:	9311      	str	r3, [sp, #68]	; 0x44
   213e0:	4653      	mov	r3, sl
   213e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   213e4:	9307      	str	r3, [sp, #28]
   213e6:	4592      	cmp	sl, r2
   213e8:	da00      	bge.n	213ec <_svfprintf_r+0x22c>
   213ea:	9207      	str	r2, [sp, #28]
   213ec:	2300      	movs	r3, #0
   213ee:	9313      	str	r3, [sp, #76]	; 0x4c
   213f0:	4643      	mov	r3, r8
   213f2:	2b00      	cmp	r3, #0
   213f4:	d002      	beq.n	213fc <_svfprintf_r+0x23c>
   213f6:	9b07      	ldr	r3, [sp, #28]
   213f8:	3301      	adds	r3, #1
   213fa:	9307      	str	r3, [sp, #28]
   213fc:	2302      	movs	r3, #2
   213fe:	9a08      	ldr	r2, [sp, #32]
   21400:	401a      	ands	r2, r3
   21402:	4691      	mov	r9, r2
   21404:	d002      	beq.n	2140c <_svfprintf_r+0x24c>
   21406:	9b07      	ldr	r3, [sp, #28]
   21408:	3302      	adds	r3, #2
   2140a:	9307      	str	r3, [sp, #28]
   2140c:	2384      	movs	r3, #132	; 0x84
   2140e:	9a08      	ldr	r2, [sp, #32]
   21410:	401a      	ands	r2, r3
   21412:	9210      	str	r2, [sp, #64]	; 0x40
   21414:	d000      	beq.n	21418 <_svfprintf_r+0x258>
   21416:	e24d      	b.n	218b4 <_svfprintf_r+0x6f4>
   21418:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2141a:	9a07      	ldr	r2, [sp, #28]
   2141c:	1a9c      	subs	r4, r3, r2
   2141e:	2c00      	cmp	r4, #0
   21420:	dc00      	bgt.n	21424 <_svfprintf_r+0x264>
   21422:	e247      	b.n	218b4 <_svfprintf_r+0x6f4>
   21424:	4974      	ldr	r1, [pc, #464]	; (215f8 <_svfprintf_r+0x438>)
   21426:	68ba      	ldr	r2, [r7, #8]
   21428:	687b      	ldr	r3, [r7, #4]
   2142a:	4688      	mov	r8, r1
   2142c:	2c10      	cmp	r4, #16
   2142e:	dd1f      	ble.n	21470 <_svfprintf_r+0x2b0>
   21430:	0031      	movs	r1, r6
   21432:	2510      	movs	r5, #16
   21434:	4646      	mov	r6, r8
   21436:	e003      	b.n	21440 <_svfprintf_r+0x280>
   21438:	3c10      	subs	r4, #16
   2143a:	3108      	adds	r1, #8
   2143c:	2c10      	cmp	r4, #16
   2143e:	dd15      	ble.n	2146c <_svfprintf_r+0x2ac>
   21440:	3210      	adds	r2, #16
   21442:	3301      	adds	r3, #1
   21444:	600e      	str	r6, [r1, #0]
   21446:	604d      	str	r5, [r1, #4]
   21448:	60ba      	str	r2, [r7, #8]
   2144a:	607b      	str	r3, [r7, #4]
   2144c:	2b07      	cmp	r3, #7
   2144e:	ddf3      	ble.n	21438 <_svfprintf_r+0x278>
   21450:	003a      	movs	r2, r7
   21452:	9906      	ldr	r1, [sp, #24]
   21454:	9809      	ldr	r0, [sp, #36]	; 0x24
   21456:	f003 f8c3 	bl	245e0 <__ssprint_r>
   2145a:	2800      	cmp	r0, #0
   2145c:	d000      	beq.n	21460 <_svfprintf_r+0x2a0>
   2145e:	e736      	b.n	212ce <_svfprintf_r+0x10e>
   21460:	3c10      	subs	r4, #16
   21462:	68ba      	ldr	r2, [r7, #8]
   21464:	687b      	ldr	r3, [r7, #4]
   21466:	a932      	add	r1, sp, #200	; 0xc8
   21468:	2c10      	cmp	r4, #16
   2146a:	dce9      	bgt.n	21440 <_svfprintf_r+0x280>
   2146c:	46b0      	mov	r8, r6
   2146e:	000e      	movs	r6, r1
   21470:	4641      	mov	r1, r8
   21472:	6074      	str	r4, [r6, #4]
   21474:	3301      	adds	r3, #1
   21476:	18a4      	adds	r4, r4, r2
   21478:	6031      	str	r1, [r6, #0]
   2147a:	60bc      	str	r4, [r7, #8]
   2147c:	607b      	str	r3, [r7, #4]
   2147e:	2b07      	cmp	r3, #7
   21480:	dd01      	ble.n	21486 <_svfprintf_r+0x2c6>
   21482:	f000 fca8 	bl	21dd6 <_svfprintf_r+0xc16>
   21486:	ab16      	add	r3, sp, #88	; 0x58
   21488:	7fdb      	ldrb	r3, [r3, #31]
   2148a:	3608      	adds	r6, #8
   2148c:	4698      	mov	r8, r3
   2148e:	e212      	b.n	218b6 <_svfprintf_r+0x6f6>
   21490:	468b      	mov	fp, r1
   21492:	4641      	mov	r1, r8
   21494:	9312      	str	r3, [sp, #72]	; 0x48
   21496:	2900      	cmp	r1, #0
   21498:	d001      	beq.n	2149e <_svfprintf_r+0x2de>
   2149a:	f001 f977 	bl	2278c <_svfprintf_r+0x15cc>
   2149e:	2207      	movs	r2, #7
   214a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   214a2:	3307      	adds	r3, #7
   214a4:	4393      	bics	r3, r2
   214a6:	3201      	adds	r2, #1
   214a8:	4694      	mov	ip, r2
   214aa:	449c      	add	ip, r3
   214ac:	4662      	mov	r2, ip
   214ae:	920f      	str	r2, [sp, #60]	; 0x3c
   214b0:	681a      	ldr	r2, [r3, #0]
   214b2:	9216      	str	r2, [sp, #88]	; 0x58
   214b4:	685b      	ldr	r3, [r3, #4]
   214b6:	2201      	movs	r2, #1
   214b8:	9315      	str	r3, [sp, #84]	; 0x54
   214ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
   214bc:	9d16      	ldr	r5, [sp, #88]	; 0x58
   214be:	005b      	lsls	r3, r3, #1
   214c0:	085b      	lsrs	r3, r3, #1
   214c2:	4698      	mov	r8, r3
   214c4:	4252      	negs	r2, r2
   214c6:	4b4d      	ldr	r3, [pc, #308]	; (215fc <_svfprintf_r+0x43c>)
   214c8:	0028      	movs	r0, r5
   214ca:	4641      	mov	r1, r8
   214cc:	f7ff fb96 	bl	20bfc <__aeabi_dcmpun>
   214d0:	2800      	cmp	r0, #0
   214d2:	d001      	beq.n	214d8 <_svfprintf_r+0x318>
   214d4:	f000 fdfd 	bl	220d2 <_svfprintf_r+0xf12>
   214d8:	2201      	movs	r2, #1
   214da:	4b48      	ldr	r3, [pc, #288]	; (215fc <_svfprintf_r+0x43c>)
   214dc:	4252      	negs	r2, r2
   214de:	0028      	movs	r0, r5
   214e0:	4641      	mov	r1, r8
   214e2:	f7fc fec7 	bl	1e274 <__aeabi_dcmple>
   214e6:	2800      	cmp	r0, #0
   214e8:	d001      	beq.n	214ee <_svfprintf_r+0x32e>
   214ea:	f000 fdf2 	bl	220d2 <_svfprintf_r+0xf12>
   214ee:	2200      	movs	r2, #0
   214f0:	2300      	movs	r3, #0
   214f2:	9816      	ldr	r0, [sp, #88]	; 0x58
   214f4:	9915      	ldr	r1, [sp, #84]	; 0x54
   214f6:	f7fc feb3 	bl	1e260 <__aeabi_dcmplt>
   214fa:	2800      	cmp	r0, #0
   214fc:	d001      	beq.n	21502 <_svfprintf_r+0x342>
   214fe:	f001 f822 	bl	22546 <_svfprintf_r+0x1386>
   21502:	ab16      	add	r3, sp, #88	; 0x58
   21504:	7fdb      	ldrb	r3, [r3, #31]
   21506:	4698      	mov	r8, r3
   21508:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2150a:	2b47      	cmp	r3, #71	; 0x47
   2150c:	dd01      	ble.n	21512 <_svfprintf_r+0x352>
   2150e:	f000 fec7 	bl	222a0 <_svfprintf_r+0x10e0>
   21512:	4b3b      	ldr	r3, [pc, #236]	; (21600 <_svfprintf_r+0x440>)
   21514:	9311      	str	r3, [sp, #68]	; 0x44
   21516:	2380      	movs	r3, #128	; 0x80
   21518:	439c      	bics	r4, r3
   2151a:	3b7d      	subs	r3, #125	; 0x7d
   2151c:	9307      	str	r3, [sp, #28]
   2151e:	930e      	str	r3, [sp, #56]	; 0x38
   21520:	2300      	movs	r3, #0
   21522:	9408      	str	r4, [sp, #32]
   21524:	469a      	mov	sl, r3
   21526:	9313      	str	r3, [sp, #76]	; 0x4c
   21528:	e762      	b.n	213f0 <_svfprintf_r+0x230>
   2152a:	2200      	movs	r2, #0
   2152c:	3b30      	subs	r3, #48	; 0x30
   2152e:	0015      	movs	r5, r2
   21530:	001a      	movs	r2, r3
   21532:	0003      	movs	r3, r0
   21534:	9407      	str	r4, [sp, #28]
   21536:	0008      	movs	r0, r1
   21538:	002c      	movs	r4, r5
   2153a:	469b      	mov	fp, r3
   2153c:	00a3      	lsls	r3, r4, #2
   2153e:	191c      	adds	r4, r3, r4
   21540:	7803      	ldrb	r3, [r0, #0]
   21542:	0064      	lsls	r4, r4, #1
   21544:	1914      	adds	r4, r2, r4
   21546:	001a      	movs	r2, r3
   21548:	3101      	adds	r1, #1
   2154a:	3a30      	subs	r2, #48	; 0x30
   2154c:	0008      	movs	r0, r1
   2154e:	2a09      	cmp	r2, #9
   21550:	d9f4      	bls.n	2153c <_svfprintf_r+0x37c>
   21552:	940b      	str	r4, [sp, #44]	; 0x2c
   21554:	4658      	mov	r0, fp
   21556:	9c07      	ldr	r4, [sp, #28]
   21558:	e697      	b.n	2128a <_svfprintf_r+0xca>
   2155a:	2308      	movs	r3, #8
   2155c:	431c      	orrs	r4, r3
   2155e:	780b      	ldrb	r3, [r1, #0]
   21560:	e692      	b.n	21288 <_svfprintf_r+0xc8>
   21562:	9312      	str	r3, [sp, #72]	; 0x48
   21564:	2310      	movs	r3, #16
   21566:	431c      	orrs	r4, r3
   21568:	468b      	mov	fp, r1
   2156a:	06a3      	lsls	r3, r4, #26
   2156c:	d500      	bpl.n	21570 <_svfprintf_r+0x3b0>
   2156e:	e17b      	b.n	21868 <_svfprintf_r+0x6a8>
   21570:	06e3      	lsls	r3, r4, #27
   21572:	d501      	bpl.n	21578 <_svfprintf_r+0x3b8>
   21574:	f000 fc7e 	bl	21e74 <_svfprintf_r+0xcb4>
   21578:	0663      	lsls	r3, r4, #25
   2157a:	d401      	bmi.n	21580 <_svfprintf_r+0x3c0>
   2157c:	f000 fc7a 	bl	21e74 <_svfprintf_r+0xcb4>
   21580:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   21582:	881a      	ldrh	r2, [r3, #0]
   21584:	920c      	str	r2, [sp, #48]	; 0x30
   21586:	2200      	movs	r2, #0
   21588:	3304      	adds	r3, #4
   2158a:	930f      	str	r3, [sp, #60]	; 0x3c
   2158c:	2300      	movs	r3, #0
   2158e:	920d      	str	r2, [sp, #52]	; 0x34
   21590:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   21592:	2100      	movs	r1, #0
   21594:	a816      	add	r0, sp, #88	; 0x58
   21596:	77c1      	strb	r1, [r0, #31]
   21598:	4688      	mov	r8, r1
   2159a:	4651      	mov	r1, sl
   2159c:	3101      	adds	r1, #1
   2159e:	d000      	beq.n	215a2 <_svfprintf_r+0x3e2>
   215a0:	e6ff      	b.n	213a2 <_svfprintf_r+0x1e2>
   215a2:	2a00      	cmp	r2, #0
   215a4:	d100      	bne.n	215a8 <_svfprintf_r+0x3e8>
   215a6:	e335      	b.n	21c14 <_svfprintf_r+0xa54>
   215a8:	9408      	str	r4, [sp, #32]
   215aa:	2b01      	cmp	r3, #1
   215ac:	d100      	bne.n	215b0 <_svfprintf_r+0x3f0>
   215ae:	e3e5      	b.n	21d7c <_svfprintf_r+0xbbc>
   215b0:	2b02      	cmp	r3, #2
   215b2:	d000      	beq.n	215b6 <_svfprintf_r+0x3f6>
   215b4:	e362      	b.n	21c7c <_svfprintf_r+0xabc>
   215b6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   215b8:	200f      	movs	r0, #15
   215ba:	46a1      	mov	r9, r4
   215bc:	46b4      	mov	ip, r6
   215be:	ab32      	add	r3, sp, #200	; 0xc8
   215c0:	0019      	movs	r1, r3
   215c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   215c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   215c6:	0004      	movs	r4, r0
   215c8:	464d      	mov	r5, r9
   215ca:	4014      	ands	r4, r2
   215cc:	5d2c      	ldrb	r4, [r5, r4]
   215ce:	071e      	lsls	r6, r3, #28
   215d0:	0915      	lsrs	r5, r2, #4
   215d2:	3901      	subs	r1, #1
   215d4:	432e      	orrs	r6, r5
   215d6:	700c      	strb	r4, [r1, #0]
   215d8:	091c      	lsrs	r4, r3, #4
   215da:	0023      	movs	r3, r4
   215dc:	0034      	movs	r4, r6
   215de:	0032      	movs	r2, r6
   215e0:	431c      	orrs	r4, r3
   215e2:	d1f0      	bne.n	215c6 <_svfprintf_r+0x406>
   215e4:	920c      	str	r2, [sp, #48]	; 0x30
   215e6:	930d      	str	r3, [sp, #52]	; 0x34
   215e8:	ab32      	add	r3, sp, #200	; 0xc8
   215ea:	1a5b      	subs	r3, r3, r1
   215ec:	9111      	str	r1, [sp, #68]	; 0x44
   215ee:	4666      	mov	r6, ip
   215f0:	930e      	str	r3, [sp, #56]	; 0x38
   215f2:	e6f5      	b.n	213e0 <_svfprintf_r+0x220>
   215f4:	00026ed4 	.word	0x00026ed4
   215f8:	0002707c 	.word	0x0002707c
   215fc:	7fefffff 	.word	0x7fefffff
   21600:	00027038 	.word	0x00027038
   21604:	9312      	str	r3, [sp, #72]	; 0x48
   21606:	2310      	movs	r3, #16
   21608:	431c      	orrs	r4, r3
   2160a:	468b      	mov	fp, r1
   2160c:	06a3      	lsls	r3, r4, #26
   2160e:	d500      	bpl.n	21612 <_svfprintf_r+0x452>
   21610:	e111      	b.n	21836 <_svfprintf_r+0x676>
   21612:	06e3      	lsls	r3, r4, #27
   21614:	d501      	bpl.n	2161a <_svfprintf_r+0x45a>
   21616:	f000 fc31 	bl	21e7c <_svfprintf_r+0xcbc>
   2161a:	0663      	lsls	r3, r4, #25
   2161c:	d401      	bmi.n	21622 <_svfprintf_r+0x462>
   2161e:	f000 fc2d 	bl	21e7c <_svfprintf_r+0xcbc>
   21622:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   21624:	881a      	ldrh	r2, [r3, #0]
   21626:	920c      	str	r2, [sp, #48]	; 0x30
   21628:	2200      	movs	r2, #0
   2162a:	3304      	adds	r3, #4
   2162c:	920d      	str	r2, [sp, #52]	; 0x34
   2162e:	930f      	str	r3, [sp, #60]	; 0x3c
   21630:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   21632:	2301      	movs	r3, #1
   21634:	e7ad      	b.n	21592 <_svfprintf_r+0x3d2>
   21636:	468b      	mov	fp, r1
   21638:	4641      	mov	r1, r8
   2163a:	9312      	str	r3, [sp, #72]	; 0x48
   2163c:	2900      	cmp	r1, #0
   2163e:	d001      	beq.n	21644 <_svfprintf_r+0x484>
   21640:	f001 f890 	bl	22764 <_svfprintf_r+0x15a4>
   21644:	4bb8      	ldr	r3, [pc, #736]	; (21928 <_svfprintf_r+0x768>)
   21646:	9317      	str	r3, [sp, #92]	; 0x5c
   21648:	06a3      	lsls	r3, r4, #26
   2164a:	d500      	bpl.n	2164e <_svfprintf_r+0x48e>
   2164c:	e0ab      	b.n	217a6 <_svfprintf_r+0x5e6>
   2164e:	06e3      	lsls	r3, r4, #27
   21650:	d501      	bpl.n	21656 <_svfprintf_r+0x496>
   21652:	f000 fc07 	bl	21e64 <_svfprintf_r+0xca4>
   21656:	0663      	lsls	r3, r4, #25
   21658:	d401      	bmi.n	2165e <_svfprintf_r+0x49e>
   2165a:	f000 fc03 	bl	21e64 <_svfprintf_r+0xca4>
   2165e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   21660:	881a      	ldrh	r2, [r3, #0]
   21662:	920c      	str	r2, [sp, #48]	; 0x30
   21664:	2200      	movs	r2, #0
   21666:	3304      	adds	r3, #4
   21668:	920d      	str	r2, [sp, #52]	; 0x34
   2166a:	930f      	str	r3, [sp, #60]	; 0x3c
   2166c:	07e3      	lsls	r3, r4, #31
   2166e:	d400      	bmi.n	21672 <_svfprintf_r+0x4b2>
   21670:	e0a9      	b.n	217c6 <_svfprintf_r+0x606>
   21672:	990c      	ldr	r1, [sp, #48]	; 0x30
   21674:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   21676:	000b      	movs	r3, r1
   21678:	4313      	orrs	r3, r2
   2167a:	001a      	movs	r2, r3
   2167c:	2302      	movs	r3, #2
   2167e:	2a00      	cmp	r2, #0
   21680:	d100      	bne.n	21684 <_svfprintf_r+0x4c4>
   21682:	e786      	b.n	21592 <_svfprintf_r+0x3d2>
   21684:	2030      	movs	r0, #48	; 0x30
   21686:	a91e      	add	r1, sp, #120	; 0x78
   21688:	7008      	strb	r0, [r1, #0]
   2168a:	2548      	movs	r5, #72	; 0x48
   2168c:	4668      	mov	r0, sp
   2168e:	1940      	adds	r0, r0, r5
   21690:	7800      	ldrb	r0, [r0, #0]
   21692:	431c      	orrs	r4, r3
   21694:	7048      	strb	r0, [r1, #1]
   21696:	e77c      	b.n	21592 <_svfprintf_r+0x3d2>
   21698:	468b      	mov	fp, r1
   2169a:	4641      	mov	r1, r8
   2169c:	2900      	cmp	r1, #0
   2169e:	d001      	beq.n	216a4 <_svfprintf_r+0x4e4>
   216a0:	f001 f883 	bl	227aa <_svfprintf_r+0x15ea>
   216a4:	06a3      	lsls	r3, r4, #26
   216a6:	d501      	bpl.n	216ac <_svfprintf_r+0x4ec>
   216a8:	f000 fde9 	bl	2227e <_svfprintf_r+0x10be>
   216ac:	06e3      	lsls	r3, r4, #27
   216ae:	d501      	bpl.n	216b4 <_svfprintf_r+0x4f4>
   216b0:	f000 fd9b 	bl	221ea <_svfprintf_r+0x102a>
   216b4:	0663      	lsls	r3, r4, #25
   216b6:	d401      	bmi.n	216bc <_svfprintf_r+0x4fc>
   216b8:	f000 fd97 	bl	221ea <_svfprintf_r+0x102a>
   216bc:	4669      	mov	r1, sp
   216be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   216c0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
   216c2:	681a      	ldr	r2, [r3, #0]
   216c4:	3304      	adds	r3, #4
   216c6:	9207      	str	r2, [sp, #28]
   216c8:	8011      	strh	r1, [r2, #0]
   216ca:	930f      	str	r3, [sp, #60]	; 0x3c
   216cc:	e5a3      	b.n	21216 <_svfprintf_r+0x56>
   216ce:	464b      	mov	r3, r9
   216d0:	431c      	orrs	r4, r3
   216d2:	780b      	ldrb	r3, [r1, #0]
   216d4:	e5d8      	b.n	21288 <_svfprintf_r+0xc8>
   216d6:	9312      	str	r3, [sp, #72]	; 0x48
   216d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   216da:	468b      	mov	fp, r1
   216dc:	1d1d      	adds	r5, r3, #4
   216de:	681b      	ldr	r3, [r3, #0]
   216e0:	a916      	add	r1, sp, #88	; 0x58
   216e2:	001a      	movs	r2, r3
   216e4:	9311      	str	r3, [sp, #68]	; 0x44
   216e6:	2300      	movs	r3, #0
   216e8:	77cb      	strb	r3, [r1, #31]
   216ea:	2a00      	cmp	r2, #0
   216ec:	d101      	bne.n	216f2 <_svfprintf_r+0x532>
   216ee:	f000 fefb 	bl	224e8 <_svfprintf_r+0x1328>
   216f2:	4653      	mov	r3, sl
   216f4:	3301      	adds	r3, #1
   216f6:	d101      	bne.n	216fc <_svfprintf_r+0x53c>
   216f8:	f000 fe38 	bl	2236c <_svfprintf_r+0x11ac>
   216fc:	4652      	mov	r2, sl
   216fe:	2100      	movs	r1, #0
   21700:	9811      	ldr	r0, [sp, #68]	; 0x44
   21702:	f002 fbc3 	bl	23e8c <memchr>
   21706:	2800      	cmp	r0, #0
   21708:	d101      	bne.n	2170e <_svfprintf_r+0x54e>
   2170a:	f000 ff54 	bl	225b6 <_svfprintf_r+0x13f6>
   2170e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   21710:	1ac3      	subs	r3, r0, r3
   21712:	001a      	movs	r2, r3
   21714:	930e      	str	r3, [sp, #56]	; 0x38
   21716:	43db      	mvns	r3, r3
   21718:	17db      	asrs	r3, r3, #31
   2171a:	401a      	ands	r2, r3
   2171c:	ab16      	add	r3, sp, #88	; 0x58
   2171e:	7fdb      	ldrb	r3, [r3, #31]
   21720:	9207      	str	r2, [sp, #28]
   21722:	4698      	mov	r8, r3
   21724:	2300      	movs	r3, #0
   21726:	950f      	str	r5, [sp, #60]	; 0x3c
   21728:	9408      	str	r4, [sp, #32]
   2172a:	469a      	mov	sl, r3
   2172c:	9313      	str	r3, [sp, #76]	; 0x4c
   2172e:	e65f      	b.n	213f0 <_svfprintf_r+0x230>
   21730:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   21732:	9312      	str	r3, [sp, #72]	; 0x48
   21734:	6813      	ldr	r3, [r2, #0]
   21736:	ad28      	add	r5, sp, #160	; 0xa0
   21738:	9307      	str	r3, [sp, #28]
   2173a:	466b      	mov	r3, sp
   2173c:	7f1b      	ldrb	r3, [r3, #28]
   2173e:	468b      	mov	fp, r1
   21740:	702b      	strb	r3, [r5, #0]
   21742:	2300      	movs	r3, #0
   21744:	a916      	add	r1, sp, #88	; 0x58
   21746:	77cb      	strb	r3, [r1, #31]
   21748:	0013      	movs	r3, r2
   2174a:	3304      	adds	r3, #4
   2174c:	930f      	str	r3, [sp, #60]	; 0x3c
   2174e:	2300      	movs	r3, #0
   21750:	9408      	str	r4, [sp, #32]
   21752:	4698      	mov	r8, r3
   21754:	3301      	adds	r3, #1
   21756:	9307      	str	r3, [sp, #28]
   21758:	930e      	str	r3, [sp, #56]	; 0x38
   2175a:	2300      	movs	r3, #0
   2175c:	9511      	str	r5, [sp, #68]	; 0x44
   2175e:	469a      	mov	sl, r3
   21760:	9313      	str	r3, [sp, #76]	; 0x4c
   21762:	e64b      	b.n	213fc <_svfprintf_r+0x23c>
   21764:	468b      	mov	fp, r1
   21766:	4641      	mov	r1, r8
   21768:	9312      	str	r3, [sp, #72]	; 0x48
   2176a:	2900      	cmp	r1, #0
   2176c:	d100      	bne.n	21770 <_svfprintf_r+0x5b0>
   2176e:	e5f4      	b.n	2135a <_svfprintf_r+0x19a>
   21770:	ab16      	add	r3, sp, #88	; 0x58
   21772:	77d8      	strb	r0, [r3, #31]
   21774:	e5f1      	b.n	2135a <_svfprintf_r+0x19a>
   21776:	4663      	mov	r3, ip
   21778:	431c      	orrs	r4, r3
   2177a:	780b      	ldrb	r3, [r1, #0]
   2177c:	e584      	b.n	21288 <_svfprintf_r+0xc8>
   2177e:	780b      	ldrb	r3, [r1, #0]
   21780:	2b6c      	cmp	r3, #108	; 0x6c
   21782:	d101      	bne.n	21788 <_svfprintf_r+0x5c8>
   21784:	f000 fd86 	bl	22294 <_svfprintf_r+0x10d4>
   21788:	2210      	movs	r2, #16
   2178a:	4314      	orrs	r4, r2
   2178c:	e57c      	b.n	21288 <_svfprintf_r+0xc8>
   2178e:	468b      	mov	fp, r1
   21790:	4641      	mov	r1, r8
   21792:	9312      	str	r3, [sp, #72]	; 0x48
   21794:	2900      	cmp	r1, #0
   21796:	d001      	beq.n	2179c <_svfprintf_r+0x5dc>
   21798:	f000 ffe8 	bl	2276c <_svfprintf_r+0x15ac>
   2179c:	4b63      	ldr	r3, [pc, #396]	; (2192c <_svfprintf_r+0x76c>)
   2179e:	9317      	str	r3, [sp, #92]	; 0x5c
   217a0:	06a3      	lsls	r3, r4, #26
   217a2:	d400      	bmi.n	217a6 <_svfprintf_r+0x5e6>
   217a4:	e753      	b.n	2164e <_svfprintf_r+0x48e>
   217a6:	2207      	movs	r2, #7
   217a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   217aa:	3307      	adds	r3, #7
   217ac:	4393      	bics	r3, r2
   217ae:	3201      	adds	r2, #1
   217b0:	4694      	mov	ip, r2
   217b2:	449c      	add	ip, r3
   217b4:	4662      	mov	r2, ip
   217b6:	920f      	str	r2, [sp, #60]	; 0x3c
   217b8:	681a      	ldr	r2, [r3, #0]
   217ba:	685b      	ldr	r3, [r3, #4]
   217bc:	920c      	str	r2, [sp, #48]	; 0x30
   217be:	930d      	str	r3, [sp, #52]	; 0x34
   217c0:	07e3      	lsls	r3, r4, #31
   217c2:	d500      	bpl.n	217c6 <_svfprintf_r+0x606>
   217c4:	e755      	b.n	21672 <_svfprintf_r+0x4b2>
   217c6:	990c      	ldr	r1, [sp, #48]	; 0x30
   217c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   217ca:	0008      	movs	r0, r1
   217cc:	4310      	orrs	r0, r2
   217ce:	2302      	movs	r3, #2
   217d0:	0002      	movs	r2, r0
   217d2:	e6de      	b.n	21592 <_svfprintf_r+0x3d2>
   217d4:	468b      	mov	fp, r1
   217d6:	990f      	ldr	r1, [sp, #60]	; 0x3c
   217d8:	2230      	movs	r2, #48	; 0x30
   217da:	680b      	ldr	r3, [r1, #0]
   217dc:	930c      	str	r3, [sp, #48]	; 0x30
   217de:	2300      	movs	r3, #0
   217e0:	930d      	str	r3, [sp, #52]	; 0x34
   217e2:	3302      	adds	r3, #2
   217e4:	431c      	orrs	r4, r3
   217e6:	ab1e      	add	r3, sp, #120	; 0x78
   217e8:	701a      	strb	r2, [r3, #0]
   217ea:	3248      	adds	r2, #72	; 0x48
   217ec:	705a      	strb	r2, [r3, #1]
   217ee:	000b      	movs	r3, r1
   217f0:	3304      	adds	r3, #4
   217f2:	930f      	str	r3, [sp, #60]	; 0x3c
   217f4:	4b4d      	ldr	r3, [pc, #308]	; (2192c <_svfprintf_r+0x76c>)
   217f6:	9212      	str	r2, [sp, #72]	; 0x48
   217f8:	9317      	str	r3, [sp, #92]	; 0x5c
   217fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   217fc:	2302      	movs	r3, #2
   217fe:	e6c8      	b.n	21592 <_svfprintf_r+0x3d2>
   21800:	2301      	movs	r3, #1
   21802:	431c      	orrs	r4, r3
   21804:	780b      	ldrb	r3, [r1, #0]
   21806:	e53f      	b.n	21288 <_svfprintf_r+0xc8>
   21808:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2180a:	1d1a      	adds	r2, r3, #4
   2180c:	681b      	ldr	r3, [r3, #0]
   2180e:	930b      	str	r3, [sp, #44]	; 0x2c
   21810:	2b00      	cmp	r3, #0
   21812:	da00      	bge.n	21816 <_svfprintf_r+0x656>
   21814:	e542      	b.n	2129c <_svfprintf_r+0xdc>
   21816:	780b      	ldrb	r3, [r1, #0]
   21818:	920f      	str	r2, [sp, #60]	; 0x3c
   2181a:	e535      	b.n	21288 <_svfprintf_r+0xc8>
   2181c:	780b      	ldrb	r3, [r1, #0]
   2181e:	2800      	cmp	r0, #0
   21820:	d000      	beq.n	21824 <_svfprintf_r+0x664>
   21822:	e531      	b.n	21288 <_svfprintf_r+0xc8>
   21824:	2201      	movs	r2, #1
   21826:	3020      	adds	r0, #32
   21828:	4690      	mov	r8, r2
   2182a:	e52d      	b.n	21288 <_svfprintf_r+0xc8>
   2182c:	468b      	mov	fp, r1
   2182e:	9312      	str	r3, [sp, #72]	; 0x48
   21830:	06a3      	lsls	r3, r4, #26
   21832:	d400      	bmi.n	21836 <_svfprintf_r+0x676>
   21834:	e6ed      	b.n	21612 <_svfprintf_r+0x452>
   21836:	2207      	movs	r2, #7
   21838:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2183a:	3307      	adds	r3, #7
   2183c:	4393      	bics	r3, r2
   2183e:	3201      	adds	r2, #1
   21840:	4694      	mov	ip, r2
   21842:	449c      	add	ip, r3
   21844:	4662      	mov	r2, ip
   21846:	920f      	str	r2, [sp, #60]	; 0x3c
   21848:	681a      	ldr	r2, [r3, #0]
   2184a:	685b      	ldr	r3, [r3, #4]
   2184c:	0011      	movs	r1, r2
   2184e:	001a      	movs	r2, r3
   21850:	0008      	movs	r0, r1
   21852:	4310      	orrs	r0, r2
   21854:	910c      	str	r1, [sp, #48]	; 0x30
   21856:	920d      	str	r2, [sp, #52]	; 0x34
   21858:	2301      	movs	r3, #1
   2185a:	0002      	movs	r2, r0
   2185c:	e699      	b.n	21592 <_svfprintf_r+0x3d2>
   2185e:	468b      	mov	fp, r1
   21860:	9312      	str	r3, [sp, #72]	; 0x48
   21862:	06a3      	lsls	r3, r4, #26
   21864:	d400      	bmi.n	21868 <_svfprintf_r+0x6a8>
   21866:	e683      	b.n	21570 <_svfprintf_r+0x3b0>
   21868:	2207      	movs	r2, #7
   2186a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2186c:	3307      	adds	r3, #7
   2186e:	4393      	bics	r3, r2
   21870:	3201      	adds	r2, #1
   21872:	4694      	mov	ip, r2
   21874:	449c      	add	ip, r3
   21876:	4662      	mov	r2, ip
   21878:	920f      	str	r2, [sp, #60]	; 0x3c
   2187a:	681a      	ldr	r2, [r3, #0]
   2187c:	685b      	ldr	r3, [r3, #4]
   2187e:	0011      	movs	r1, r2
   21880:	001a      	movs	r2, r3
   21882:	0008      	movs	r0, r1
   21884:	4310      	orrs	r0, r2
   21886:	910c      	str	r1, [sp, #48]	; 0x30
   21888:	920d      	str	r2, [sp, #52]	; 0x34
   2188a:	2300      	movs	r3, #0
   2188c:	0002      	movs	r2, r0
   2188e:	e680      	b.n	21592 <_svfprintf_r+0x3d2>
   21890:	468b      	mov	fp, r1
   21892:	4641      	mov	r1, r8
   21894:	9312      	str	r3, [sp, #72]	; 0x48
   21896:	2900      	cmp	r1, #0
   21898:	d001      	beq.n	2189e <_svfprintf_r+0x6de>
   2189a:	f000 ff7f 	bl	2279c <_svfprintf_r+0x15dc>
   2189e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   218a0:	2b00      	cmp	r3, #0
   218a2:	d100      	bne.n	218a6 <_svfprintf_r+0x6e6>
   218a4:	e50b      	b.n	212be <_svfprintf_r+0xfe>
   218a6:	ad28      	add	r5, sp, #160	; 0xa0
   218a8:	702b      	strb	r3, [r5, #0]
   218aa:	2300      	movs	r3, #0
   218ac:	aa16      	add	r2, sp, #88	; 0x58
   218ae:	77d3      	strb	r3, [r2, #31]
   218b0:	9408      	str	r4, [sp, #32]
   218b2:	e74e      	b.n	21752 <_svfprintf_r+0x592>
   218b4:	68bc      	ldr	r4, [r7, #8]
   218b6:	4643      	mov	r3, r8
   218b8:	2b00      	cmp	r3, #0
   218ba:	d00f      	beq.n	218dc <_svfprintf_r+0x71c>
   218bc:	aa16      	add	r2, sp, #88	; 0x58
   218be:	231f      	movs	r3, #31
   218c0:	4694      	mov	ip, r2
   218c2:	4463      	add	r3, ip
   218c4:	6033      	str	r3, [r6, #0]
   218c6:	2301      	movs	r3, #1
   218c8:	6073      	str	r3, [r6, #4]
   218ca:	687b      	ldr	r3, [r7, #4]
   218cc:	3401      	adds	r4, #1
   218ce:	3301      	adds	r3, #1
   218d0:	60bc      	str	r4, [r7, #8]
   218d2:	607b      	str	r3, [r7, #4]
   218d4:	2b07      	cmp	r3, #7
   218d6:	dd00      	ble.n	218da <_svfprintf_r+0x71a>
   218d8:	e1b3      	b.n	21c42 <_svfprintf_r+0xa82>
   218da:	3608      	adds	r6, #8
   218dc:	464b      	mov	r3, r9
   218de:	2b00      	cmp	r3, #0
   218e0:	d00c      	beq.n	218fc <_svfprintf_r+0x73c>
   218e2:	ab1e      	add	r3, sp, #120	; 0x78
   218e4:	6033      	str	r3, [r6, #0]
   218e6:	2302      	movs	r3, #2
   218e8:	6073      	str	r3, [r6, #4]
   218ea:	687b      	ldr	r3, [r7, #4]
   218ec:	3402      	adds	r4, #2
   218ee:	3301      	adds	r3, #1
   218f0:	60bc      	str	r4, [r7, #8]
   218f2:	607b      	str	r3, [r7, #4]
   218f4:	2b07      	cmp	r3, #7
   218f6:	dd00      	ble.n	218fa <_svfprintf_r+0x73a>
   218f8:	e1af      	b.n	21c5a <_svfprintf_r+0xa9a>
   218fa:	3608      	adds	r6, #8
   218fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   218fe:	2b80      	cmp	r3, #128	; 0x80
   21900:	d100      	bne.n	21904 <_svfprintf_r+0x744>
   21902:	e120      	b.n	21b46 <_svfprintf_r+0x986>
   21904:	4653      	mov	r3, sl
   21906:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   21908:	1a9d      	subs	r5, r3, r2
   2190a:	2d00      	cmp	r5, #0
   2190c:	dd3c      	ble.n	21988 <_svfprintf_r+0x7c8>
   2190e:	4a08      	ldr	r2, [pc, #32]	; (21930 <_svfprintf_r+0x770>)
   21910:	687b      	ldr	r3, [r7, #4]
   21912:	4691      	mov	r9, r2
   21914:	2d10      	cmp	r5, #16
   21916:	dd2c      	ble.n	21972 <_svfprintf_r+0x7b2>
   21918:	2210      	movs	r2, #16
   2191a:	0021      	movs	r1, r4
   2191c:	4692      	mov	sl, r2
   2191e:	9c09      	ldr	r4, [sp, #36]	; 0x24
   21920:	0032      	movs	r2, r6
   21922:	002e      	movs	r6, r5
   21924:	464d      	mov	r5, r9
   21926:	e009      	b.n	2193c <_svfprintf_r+0x77c>
   21928:	00027048 	.word	0x00027048
   2192c:	0002705c 	.word	0x0002705c
   21930:	0002708c 	.word	0x0002708c
   21934:	3e10      	subs	r6, #16
   21936:	3208      	adds	r2, #8
   21938:	2e10      	cmp	r6, #16
   2193a:	dd16      	ble.n	2196a <_svfprintf_r+0x7aa>
   2193c:	4650      	mov	r0, sl
   2193e:	3110      	adds	r1, #16
   21940:	3301      	adds	r3, #1
   21942:	6015      	str	r5, [r2, #0]
   21944:	6050      	str	r0, [r2, #4]
   21946:	60b9      	str	r1, [r7, #8]
   21948:	607b      	str	r3, [r7, #4]
   2194a:	2b07      	cmp	r3, #7
   2194c:	ddf2      	ble.n	21934 <_svfprintf_r+0x774>
   2194e:	003a      	movs	r2, r7
   21950:	9906      	ldr	r1, [sp, #24]
   21952:	0020      	movs	r0, r4
   21954:	f002 fe44 	bl	245e0 <__ssprint_r>
   21958:	2800      	cmp	r0, #0
   2195a:	d000      	beq.n	2195e <_svfprintf_r+0x79e>
   2195c:	e4b7      	b.n	212ce <_svfprintf_r+0x10e>
   2195e:	3e10      	subs	r6, #16
   21960:	68b9      	ldr	r1, [r7, #8]
   21962:	687b      	ldr	r3, [r7, #4]
   21964:	aa32      	add	r2, sp, #200	; 0xc8
   21966:	2e10      	cmp	r6, #16
   21968:	dce8      	bgt.n	2193c <_svfprintf_r+0x77c>
   2196a:	46a9      	mov	r9, r5
   2196c:	000c      	movs	r4, r1
   2196e:	0035      	movs	r5, r6
   21970:	0016      	movs	r6, r2
   21972:	464a      	mov	r2, r9
   21974:	1964      	adds	r4, r4, r5
   21976:	3301      	adds	r3, #1
   21978:	6032      	str	r2, [r6, #0]
   2197a:	6075      	str	r5, [r6, #4]
   2197c:	60bc      	str	r4, [r7, #8]
   2197e:	607b      	str	r3, [r7, #4]
   21980:	2b07      	cmp	r3, #7
   21982:	dd00      	ble.n	21986 <_svfprintf_r+0x7c6>
   21984:	e151      	b.n	21c2a <_svfprintf_r+0xa6a>
   21986:	3608      	adds	r6, #8
   21988:	9b08      	ldr	r3, [sp, #32]
   2198a:	05db      	lsls	r3, r3, #23
   2198c:	d500      	bpl.n	21990 <_svfprintf_r+0x7d0>
   2198e:	e0b6      	b.n	21afe <_svfprintf_r+0x93e>
   21990:	9b11      	ldr	r3, [sp, #68]	; 0x44
   21992:	6033      	str	r3, [r6, #0]
   21994:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21996:	469c      	mov	ip, r3
   21998:	6073      	str	r3, [r6, #4]
   2199a:	687b      	ldr	r3, [r7, #4]
   2199c:	4464      	add	r4, ip
   2199e:	3301      	adds	r3, #1
   219a0:	60bc      	str	r4, [r7, #8]
   219a2:	607b      	str	r3, [r7, #4]
   219a4:	2b07      	cmp	r3, #7
   219a6:	dd00      	ble.n	219aa <_svfprintf_r+0x7ea>
   219a8:	e09d      	b.n	21ae6 <_svfprintf_r+0x926>
   219aa:	3608      	adds	r6, #8
   219ac:	9b08      	ldr	r3, [sp, #32]
   219ae:	075b      	lsls	r3, r3, #29
   219b0:	d541      	bpl.n	21a36 <_svfprintf_r+0x876>
   219b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   219b4:	9a07      	ldr	r2, [sp, #28]
   219b6:	1a9d      	subs	r5, r3, r2
   219b8:	2d00      	cmp	r5, #0
   219ba:	dd3c      	ble.n	21a36 <_svfprintf_r+0x876>
   219bc:	4ac4      	ldr	r2, [pc, #784]	; (21cd0 <_svfprintf_r+0xb10>)
   219be:	687b      	ldr	r3, [r7, #4]
   219c0:	4690      	mov	r8, r2
   219c2:	2d10      	cmp	r5, #16
   219c4:	dd26      	ble.n	21a14 <_svfprintf_r+0x854>
   219c6:	2210      	movs	r2, #16
   219c8:	0021      	movs	r1, r4
   219ca:	4691      	mov	r9, r2
   219cc:	9c09      	ldr	r4, [sp, #36]	; 0x24
   219ce:	0032      	movs	r2, r6
   219d0:	002e      	movs	r6, r5
   219d2:	9d06      	ldr	r5, [sp, #24]
   219d4:	e003      	b.n	219de <_svfprintf_r+0x81e>
   219d6:	3e10      	subs	r6, #16
   219d8:	3208      	adds	r2, #8
   219da:	2e10      	cmp	r6, #16
   219dc:	dd17      	ble.n	21a0e <_svfprintf_r+0x84e>
   219de:	48bc      	ldr	r0, [pc, #752]	; (21cd0 <_svfprintf_r+0xb10>)
   219e0:	3110      	adds	r1, #16
   219e2:	6010      	str	r0, [r2, #0]
   219e4:	4648      	mov	r0, r9
   219e6:	3301      	adds	r3, #1
   219e8:	6050      	str	r0, [r2, #4]
   219ea:	60b9      	str	r1, [r7, #8]
   219ec:	607b      	str	r3, [r7, #4]
   219ee:	2b07      	cmp	r3, #7
   219f0:	ddf1      	ble.n	219d6 <_svfprintf_r+0x816>
   219f2:	003a      	movs	r2, r7
   219f4:	0029      	movs	r1, r5
   219f6:	0020      	movs	r0, r4
   219f8:	f002 fdf2 	bl	245e0 <__ssprint_r>
   219fc:	2800      	cmp	r0, #0
   219fe:	d000      	beq.n	21a02 <_svfprintf_r+0x842>
   21a00:	e465      	b.n	212ce <_svfprintf_r+0x10e>
   21a02:	3e10      	subs	r6, #16
   21a04:	68b9      	ldr	r1, [r7, #8]
   21a06:	687b      	ldr	r3, [r7, #4]
   21a08:	aa32      	add	r2, sp, #200	; 0xc8
   21a0a:	2e10      	cmp	r6, #16
   21a0c:	dce7      	bgt.n	219de <_svfprintf_r+0x81e>
   21a0e:	0035      	movs	r5, r6
   21a10:	000c      	movs	r4, r1
   21a12:	0016      	movs	r6, r2
   21a14:	4642      	mov	r2, r8
   21a16:	1964      	adds	r4, r4, r5
   21a18:	3301      	adds	r3, #1
   21a1a:	c624      	stmia	r6!, {r2, r5}
   21a1c:	60bc      	str	r4, [r7, #8]
   21a1e:	607b      	str	r3, [r7, #4]
   21a20:	2b07      	cmp	r3, #7
   21a22:	dd08      	ble.n	21a36 <_svfprintf_r+0x876>
   21a24:	003a      	movs	r2, r7
   21a26:	9906      	ldr	r1, [sp, #24]
   21a28:	9809      	ldr	r0, [sp, #36]	; 0x24
   21a2a:	f002 fdd9 	bl	245e0 <__ssprint_r>
   21a2e:	2800      	cmp	r0, #0
   21a30:	d000      	beq.n	21a34 <_svfprintf_r+0x874>
   21a32:	e44c      	b.n	212ce <_svfprintf_r+0x10e>
   21a34:	68bc      	ldr	r4, [r7, #8]
   21a36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   21a38:	9907      	ldr	r1, [sp, #28]
   21a3a:	428b      	cmp	r3, r1
   21a3c:	da00      	bge.n	21a40 <_svfprintf_r+0x880>
   21a3e:	000b      	movs	r3, r1
   21a40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   21a42:	4694      	mov	ip, r2
   21a44:	449c      	add	ip, r3
   21a46:	4663      	mov	r3, ip
   21a48:	930a      	str	r3, [sp, #40]	; 0x28
   21a4a:	2c00      	cmp	r4, #0
   21a4c:	d000      	beq.n	21a50 <_svfprintf_r+0x890>
   21a4e:	e0d6      	b.n	21bfe <_svfprintf_r+0xa3e>
   21a50:	2300      	movs	r3, #0
   21a52:	ae32      	add	r6, sp, #200	; 0xc8
   21a54:	607b      	str	r3, [r7, #4]
   21a56:	f7ff fbde 	bl	21216 <_svfprintf_r+0x56>
   21a5a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   21a5c:	2b01      	cmp	r3, #1
   21a5e:	dc00      	bgt.n	21a62 <_svfprintf_r+0x8a2>
   21a60:	e0ae      	b.n	21bc0 <_svfprintf_r+0xa00>
   21a62:	9b11      	ldr	r3, [sp, #68]	; 0x44
   21a64:	3401      	adds	r4, #1
   21a66:	6033      	str	r3, [r6, #0]
   21a68:	2301      	movs	r3, #1
   21a6a:	6073      	str	r3, [r6, #4]
   21a6c:	687b      	ldr	r3, [r7, #4]
   21a6e:	60bc      	str	r4, [r7, #8]
   21a70:	3301      	adds	r3, #1
   21a72:	607b      	str	r3, [r7, #4]
   21a74:	2b07      	cmp	r3, #7
   21a76:	dd00      	ble.n	21a7a <_svfprintf_r+0x8ba>
   21a78:	e2df      	b.n	2203a <_svfprintf_r+0xe7a>
   21a7a:	3608      	adds	r6, #8
   21a7c:	9a19      	ldr	r2, [sp, #100]	; 0x64
   21a7e:	3301      	adds	r3, #1
   21a80:	6032      	str	r2, [r6, #0]
   21a82:	9a18      	ldr	r2, [sp, #96]	; 0x60
   21a84:	4698      	mov	r8, r3
   21a86:	4694      	mov	ip, r2
   21a88:	4464      	add	r4, ip
   21a8a:	6072      	str	r2, [r6, #4]
   21a8c:	60bc      	str	r4, [r7, #8]
   21a8e:	607b      	str	r3, [r7, #4]
   21a90:	2b07      	cmp	r3, #7
   21a92:	dd00      	ble.n	21a96 <_svfprintf_r+0x8d6>
   21a94:	e2de      	b.n	22054 <_svfprintf_r+0xe94>
   21a96:	3608      	adds	r6, #8
   21a98:	2200      	movs	r2, #0
   21a9a:	2300      	movs	r3, #0
   21a9c:	9816      	ldr	r0, [sp, #88]	; 0x58
   21a9e:	9915      	ldr	r1, [sp, #84]	; 0x54
   21aa0:	f7fc fbd8 	bl	1e254 <__aeabi_dcmpeq>
   21aa4:	2800      	cmp	r0, #0
   21aa6:	d000      	beq.n	21aaa <_svfprintf_r+0x8ea>
   21aa8:	e1a4      	b.n	21df4 <_svfprintf_r+0xc34>
   21aaa:	9d11      	ldr	r5, [sp, #68]	; 0x44
   21aac:	9b14      	ldr	r3, [sp, #80]	; 0x50
   21aae:	3501      	adds	r5, #1
   21ab0:	3b01      	subs	r3, #1
   21ab2:	6035      	str	r5, [r6, #0]
   21ab4:	6073      	str	r3, [r6, #4]
   21ab6:	18e4      	adds	r4, r4, r3
   21ab8:	2301      	movs	r3, #1
   21aba:	469c      	mov	ip, r3
   21abc:	44e0      	add	r8, ip
   21abe:	4643      	mov	r3, r8
   21ac0:	60bc      	str	r4, [r7, #8]
   21ac2:	607b      	str	r3, [r7, #4]
   21ac4:	2b07      	cmp	r3, #7
   21ac6:	dd00      	ble.n	21aca <_svfprintf_r+0x90a>
   21ac8:	e08b      	b.n	21be2 <_svfprintf_r+0xa22>
   21aca:	3608      	adds	r6, #8
   21acc:	ab21      	add	r3, sp, #132	; 0x84
   21ace:	6033      	str	r3, [r6, #0]
   21ad0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   21ad2:	469c      	mov	ip, r3
   21ad4:	6073      	str	r3, [r6, #4]
   21ad6:	4643      	mov	r3, r8
   21ad8:	4464      	add	r4, ip
   21ada:	3301      	adds	r3, #1
   21adc:	60bc      	str	r4, [r7, #8]
   21ade:	607b      	str	r3, [r7, #4]
   21ae0:	2b07      	cmp	r3, #7
   21ae2:	dc00      	bgt.n	21ae6 <_svfprintf_r+0x926>
   21ae4:	e761      	b.n	219aa <_svfprintf_r+0x7ea>
   21ae6:	003a      	movs	r2, r7
   21ae8:	9906      	ldr	r1, [sp, #24]
   21aea:	9809      	ldr	r0, [sp, #36]	; 0x24
   21aec:	f002 fd78 	bl	245e0 <__ssprint_r>
   21af0:	2800      	cmp	r0, #0
   21af2:	d001      	beq.n	21af8 <_svfprintf_r+0x938>
   21af4:	f7ff fbeb 	bl	212ce <_svfprintf_r+0x10e>
   21af8:	68bc      	ldr	r4, [r7, #8]
   21afa:	ae32      	add	r6, sp, #200	; 0xc8
   21afc:	e756      	b.n	219ac <_svfprintf_r+0x7ec>
   21afe:	9b12      	ldr	r3, [sp, #72]	; 0x48
   21b00:	2b65      	cmp	r3, #101	; 0x65
   21b02:	ddaa      	ble.n	21a5a <_svfprintf_r+0x89a>
   21b04:	2200      	movs	r2, #0
   21b06:	2300      	movs	r3, #0
   21b08:	9816      	ldr	r0, [sp, #88]	; 0x58
   21b0a:	9915      	ldr	r1, [sp, #84]	; 0x54
   21b0c:	f7fc fba2 	bl	1e254 <__aeabi_dcmpeq>
   21b10:	2800      	cmp	r0, #0
   21b12:	d100      	bne.n	21b16 <_svfprintf_r+0x956>
   21b14:	e0e2      	b.n	21cdc <_svfprintf_r+0xb1c>
   21b16:	4b6f      	ldr	r3, [pc, #444]	; (21cd4 <_svfprintf_r+0xb14>)
   21b18:	3401      	adds	r4, #1
   21b1a:	6033      	str	r3, [r6, #0]
   21b1c:	2301      	movs	r3, #1
   21b1e:	6073      	str	r3, [r6, #4]
   21b20:	687b      	ldr	r3, [r7, #4]
   21b22:	60bc      	str	r4, [r7, #8]
   21b24:	3301      	adds	r3, #1
   21b26:	607b      	str	r3, [r7, #4]
   21b28:	2b07      	cmp	r3, #7
   21b2a:	dd00      	ble.n	21b2e <_svfprintf_r+0x96e>
   21b2c:	e366      	b.n	221fc <_svfprintf_r+0x103c>
   21b2e:	3608      	adds	r6, #8
   21b30:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   21b32:	9a14      	ldr	r2, [sp, #80]	; 0x50
   21b34:	4293      	cmp	r3, r2
   21b36:	da00      	bge.n	21b3a <_svfprintf_r+0x97a>
   21b38:	e1a4      	b.n	21e84 <_svfprintf_r+0xcc4>
   21b3a:	9b08      	ldr	r3, [sp, #32]
   21b3c:	07db      	lsls	r3, r3, #31
   21b3e:	d500      	bpl.n	21b42 <_svfprintf_r+0x982>
   21b40:	e1a0      	b.n	21e84 <_svfprintf_r+0xcc4>
   21b42:	68bc      	ldr	r4, [r7, #8]
   21b44:	e732      	b.n	219ac <_svfprintf_r+0x7ec>
   21b46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   21b48:	9a07      	ldr	r2, [sp, #28]
   21b4a:	1a9d      	subs	r5, r3, r2
   21b4c:	2d00      	cmp	r5, #0
   21b4e:	dc00      	bgt.n	21b52 <_svfprintf_r+0x992>
   21b50:	e6d8      	b.n	21904 <_svfprintf_r+0x744>
   21b52:	4a61      	ldr	r2, [pc, #388]	; (21cd8 <_svfprintf_r+0xb18>)
   21b54:	687b      	ldr	r3, [r7, #4]
   21b56:	4691      	mov	r9, r2
   21b58:	2d10      	cmp	r5, #16
   21b5a:	dd25      	ble.n	21ba8 <_svfprintf_r+0x9e8>
   21b5c:	2210      	movs	r2, #16
   21b5e:	0021      	movs	r1, r4
   21b60:	4690      	mov	r8, r2
   21b62:	9c09      	ldr	r4, [sp, #36]	; 0x24
   21b64:	0032      	movs	r2, r6
   21b66:	464e      	mov	r6, r9
   21b68:	e003      	b.n	21b72 <_svfprintf_r+0x9b2>
   21b6a:	3d10      	subs	r5, #16
   21b6c:	3208      	adds	r2, #8
   21b6e:	2d10      	cmp	r5, #16
   21b70:	dd17      	ble.n	21ba2 <_svfprintf_r+0x9e2>
   21b72:	4640      	mov	r0, r8
   21b74:	3110      	adds	r1, #16
   21b76:	3301      	adds	r3, #1
   21b78:	6016      	str	r6, [r2, #0]
   21b7a:	6050      	str	r0, [r2, #4]
   21b7c:	60b9      	str	r1, [r7, #8]
   21b7e:	607b      	str	r3, [r7, #4]
   21b80:	2b07      	cmp	r3, #7
   21b82:	ddf2      	ble.n	21b6a <_svfprintf_r+0x9aa>
   21b84:	003a      	movs	r2, r7
   21b86:	9906      	ldr	r1, [sp, #24]
   21b88:	0020      	movs	r0, r4
   21b8a:	f002 fd29 	bl	245e0 <__ssprint_r>
   21b8e:	2800      	cmp	r0, #0
   21b90:	d001      	beq.n	21b96 <_svfprintf_r+0x9d6>
   21b92:	f7ff fb9c 	bl	212ce <_svfprintf_r+0x10e>
   21b96:	3d10      	subs	r5, #16
   21b98:	68b9      	ldr	r1, [r7, #8]
   21b9a:	687b      	ldr	r3, [r7, #4]
   21b9c:	aa32      	add	r2, sp, #200	; 0xc8
   21b9e:	2d10      	cmp	r5, #16
   21ba0:	dce7      	bgt.n	21b72 <_svfprintf_r+0x9b2>
   21ba2:	46b1      	mov	r9, r6
   21ba4:	000c      	movs	r4, r1
   21ba6:	0016      	movs	r6, r2
   21ba8:	464a      	mov	r2, r9
   21baa:	1964      	adds	r4, r4, r5
   21bac:	3301      	adds	r3, #1
   21bae:	6032      	str	r2, [r6, #0]
   21bb0:	6075      	str	r5, [r6, #4]
   21bb2:	60bc      	str	r4, [r7, #8]
   21bb4:	607b      	str	r3, [r7, #4]
   21bb6:	2b07      	cmp	r3, #7
   21bb8:	dd00      	ble.n	21bbc <_svfprintf_r+0x9fc>
   21bba:	e27e      	b.n	220ba <_svfprintf_r+0xefa>
   21bbc:	3608      	adds	r6, #8
   21bbe:	e6a1      	b.n	21904 <_svfprintf_r+0x744>
   21bc0:	2301      	movs	r3, #1
   21bc2:	9a08      	ldr	r2, [sp, #32]
   21bc4:	4213      	tst	r3, r2
   21bc6:	d000      	beq.n	21bca <_svfprintf_r+0xa0a>
   21bc8:	e74b      	b.n	21a62 <_svfprintf_r+0x8a2>
   21bca:	6073      	str	r3, [r6, #4]
   21bcc:	687b      	ldr	r3, [r7, #4]
   21bce:	9a11      	ldr	r2, [sp, #68]	; 0x44
   21bd0:	3301      	adds	r3, #1
   21bd2:	3401      	adds	r4, #1
   21bd4:	6032      	str	r2, [r6, #0]
   21bd6:	60bc      	str	r4, [r7, #8]
   21bd8:	4698      	mov	r8, r3
   21bda:	607b      	str	r3, [r7, #4]
   21bdc:	2b07      	cmp	r3, #7
   21bde:	dc00      	bgt.n	21be2 <_svfprintf_r+0xa22>
   21be0:	e773      	b.n	21aca <_svfprintf_r+0x90a>
   21be2:	003a      	movs	r2, r7
   21be4:	9906      	ldr	r1, [sp, #24]
   21be6:	9809      	ldr	r0, [sp, #36]	; 0x24
   21be8:	f002 fcfa 	bl	245e0 <__ssprint_r>
   21bec:	2800      	cmp	r0, #0
   21bee:	d001      	beq.n	21bf4 <_svfprintf_r+0xa34>
   21bf0:	f7ff fb6d 	bl	212ce <_svfprintf_r+0x10e>
   21bf4:	687b      	ldr	r3, [r7, #4]
   21bf6:	68bc      	ldr	r4, [r7, #8]
   21bf8:	4698      	mov	r8, r3
   21bfa:	ae32      	add	r6, sp, #200	; 0xc8
   21bfc:	e766      	b.n	21acc <_svfprintf_r+0x90c>
   21bfe:	003a      	movs	r2, r7
   21c00:	9906      	ldr	r1, [sp, #24]
   21c02:	9809      	ldr	r0, [sp, #36]	; 0x24
   21c04:	f002 fcec 	bl	245e0 <__ssprint_r>
   21c08:	2800      	cmp	r0, #0
   21c0a:	d100      	bne.n	21c0e <_svfprintf_r+0xa4e>
   21c0c:	e720      	b.n	21a50 <_svfprintf_r+0x890>
   21c0e:	f7ff fb5e 	bl	212ce <_svfprintf_r+0x10e>
   21c12:	9c08      	ldr	r4, [sp, #32]
   21c14:	2b01      	cmp	r3, #1
   21c16:	d100      	bne.n	21c1a <_svfprintf_r+0xa5a>
   21c18:	e184      	b.n	21f24 <_svfprintf_r+0xd64>
   21c1a:	2b02      	cmp	r3, #2
   21c1c:	d129      	bne.n	21c72 <_svfprintf_r+0xab2>
   21c1e:	9408      	str	r4, [sp, #32]
   21c20:	2300      	movs	r3, #0
   21c22:	2400      	movs	r4, #0
   21c24:	930c      	str	r3, [sp, #48]	; 0x30
   21c26:	940d      	str	r4, [sp, #52]	; 0x34
   21c28:	e4c5      	b.n	215b6 <_svfprintf_r+0x3f6>
   21c2a:	003a      	movs	r2, r7
   21c2c:	9906      	ldr	r1, [sp, #24]
   21c2e:	9809      	ldr	r0, [sp, #36]	; 0x24
   21c30:	f002 fcd6 	bl	245e0 <__ssprint_r>
   21c34:	2800      	cmp	r0, #0
   21c36:	d001      	beq.n	21c3c <_svfprintf_r+0xa7c>
   21c38:	f7ff fb49 	bl	212ce <_svfprintf_r+0x10e>
   21c3c:	68bc      	ldr	r4, [r7, #8]
   21c3e:	ae32      	add	r6, sp, #200	; 0xc8
   21c40:	e6a2      	b.n	21988 <_svfprintf_r+0x7c8>
   21c42:	003a      	movs	r2, r7
   21c44:	9906      	ldr	r1, [sp, #24]
   21c46:	9809      	ldr	r0, [sp, #36]	; 0x24
   21c48:	f002 fcca 	bl	245e0 <__ssprint_r>
   21c4c:	2800      	cmp	r0, #0
   21c4e:	d001      	beq.n	21c54 <_svfprintf_r+0xa94>
   21c50:	f7ff fb3d 	bl	212ce <_svfprintf_r+0x10e>
   21c54:	68bc      	ldr	r4, [r7, #8]
   21c56:	ae32      	add	r6, sp, #200	; 0xc8
   21c58:	e640      	b.n	218dc <_svfprintf_r+0x71c>
   21c5a:	003a      	movs	r2, r7
   21c5c:	9906      	ldr	r1, [sp, #24]
   21c5e:	9809      	ldr	r0, [sp, #36]	; 0x24
   21c60:	f002 fcbe 	bl	245e0 <__ssprint_r>
   21c64:	2800      	cmp	r0, #0
   21c66:	d001      	beq.n	21c6c <_svfprintf_r+0xaac>
   21c68:	f7ff fb31 	bl	212ce <_svfprintf_r+0x10e>
   21c6c:	68bc      	ldr	r4, [r7, #8]
   21c6e:	ae32      	add	r6, sp, #200	; 0xc8
   21c70:	e644      	b.n	218fc <_svfprintf_r+0x73c>
   21c72:	9408      	str	r4, [sp, #32]
   21c74:	2300      	movs	r3, #0
   21c76:	2400      	movs	r4, #0
   21c78:	930c      	str	r3, [sp, #48]	; 0x30
   21c7a:	940d      	str	r4, [sp, #52]	; 0x34
   21c7c:	980c      	ldr	r0, [sp, #48]	; 0x30
   21c7e:	990d      	ldr	r1, [sp, #52]	; 0x34
   21c80:	465b      	mov	r3, fp
   21c82:	aa32      	add	r2, sp, #200	; 0xc8
   21c84:	9307      	str	r3, [sp, #28]
   21c86:	4691      	mov	r9, r2
   21c88:	46b3      	mov	fp, r6
   21c8a:	e000      	b.n	21c8e <_svfprintf_r+0xace>
   21c8c:	46a1      	mov	r9, r4
   21c8e:	074a      	lsls	r2, r1, #29
   21c90:	4694      	mov	ip, r2
   21c92:	464b      	mov	r3, r9
   21c94:	4665      	mov	r5, ip
   21c96:	1e5c      	subs	r4, r3, #1
   21c98:	08c6      	lsrs	r6, r0, #3
   21c9a:	2307      	movs	r3, #7
   21c9c:	08ca      	lsrs	r2, r1, #3
   21c9e:	4335      	orrs	r5, r6
   21ca0:	0011      	movs	r1, r2
   21ca2:	002a      	movs	r2, r5
   21ca4:	4003      	ands	r3, r0
   21ca6:	3330      	adds	r3, #48	; 0x30
   21ca8:	7023      	strb	r3, [r4, #0]
   21caa:	0028      	movs	r0, r5
   21cac:	430a      	orrs	r2, r1
   21cae:	d1ed      	bne.n	21c8c <_svfprintf_r+0xacc>
   21cb0:	900c      	str	r0, [sp, #48]	; 0x30
   21cb2:	910d      	str	r1, [sp, #52]	; 0x34
   21cb4:	9907      	ldr	r1, [sp, #28]
   21cb6:	465e      	mov	r6, fp
   21cb8:	468b      	mov	fp, r1
   21cba:	9908      	ldr	r1, [sp, #32]
   21cbc:	464a      	mov	r2, r9
   21cbe:	9411      	str	r4, [sp, #68]	; 0x44
   21cc0:	07c9      	lsls	r1, r1, #31
   21cc2:	d500      	bpl.n	21cc6 <_svfprintf_r+0xb06>
   21cc4:	e13d      	b.n	21f42 <_svfprintf_r+0xd82>
   21cc6:	ab32      	add	r3, sp, #200	; 0xc8
   21cc8:	1b1b      	subs	r3, r3, r4
   21cca:	930e      	str	r3, [sp, #56]	; 0x38
   21ccc:	f7ff fb88 	bl	213e0 <_svfprintf_r+0x220>
   21cd0:	0002707c 	.word	0x0002707c
   21cd4:	00027078 	.word	0x00027078
   21cd8:	0002708c 	.word	0x0002708c
   21cdc:	981f      	ldr	r0, [sp, #124]	; 0x7c
   21cde:	2800      	cmp	r0, #0
   21ce0:	dc00      	bgt.n	21ce4 <_svfprintf_r+0xb24>
   21ce2:	e296      	b.n	22212 <_svfprintf_r+0x1052>
   21ce4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   21ce6:	9914      	ldr	r1, [sp, #80]	; 0x50
   21ce8:	0013      	movs	r3, r2
   21cea:	4690      	mov	r8, r2
   21cec:	428b      	cmp	r3, r1
   21cee:	dd00      	ble.n	21cf2 <_svfprintf_r+0xb32>
   21cf0:	4688      	mov	r8, r1
   21cf2:	4643      	mov	r3, r8
   21cf4:	2b00      	cmp	r3, #0
   21cf6:	dd0c      	ble.n	21d12 <_svfprintf_r+0xb52>
   21cf8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   21cfa:	4444      	add	r4, r8
   21cfc:	6033      	str	r3, [r6, #0]
   21cfe:	4643      	mov	r3, r8
   21d00:	6073      	str	r3, [r6, #4]
   21d02:	687b      	ldr	r3, [r7, #4]
   21d04:	60bc      	str	r4, [r7, #8]
   21d06:	3301      	adds	r3, #1
   21d08:	607b      	str	r3, [r7, #4]
   21d0a:	2b07      	cmp	r3, #7
   21d0c:	dd00      	ble.n	21d10 <_svfprintf_r+0xb50>
   21d0e:	e3b7      	b.n	22480 <_svfprintf_r+0x12c0>
   21d10:	3608      	adds	r6, #8
   21d12:	4643      	mov	r3, r8
   21d14:	43db      	mvns	r3, r3
   21d16:	4642      	mov	r2, r8
   21d18:	17db      	asrs	r3, r3, #31
   21d1a:	4013      	ands	r3, r2
   21d1c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   21d1e:	1ad3      	subs	r3, r2, r3
   21d20:	4698      	mov	r8, r3
   21d22:	2b00      	cmp	r3, #0
   21d24:	dc00      	bgt.n	21d28 <_svfprintf_r+0xb68>
   21d26:	e128      	b.n	21f7a <_svfprintf_r+0xdba>
   21d28:	2b10      	cmp	r3, #16
   21d2a:	dc01      	bgt.n	21d30 <_svfprintf_r+0xb70>
   21d2c:	f000 fce7 	bl	226fe <_svfprintf_r+0x153e>
   21d30:	4acf      	ldr	r2, [pc, #828]	; (22070 <_svfprintf_r+0xeb0>)
   21d32:	0021      	movs	r1, r4
   21d34:	4691      	mov	r9, r2
   21d36:	2210      	movs	r2, #16
   21d38:	687b      	ldr	r3, [r7, #4]
   21d3a:	4692      	mov	sl, r2
   21d3c:	9d09      	ldr	r5, [sp, #36]	; 0x24
   21d3e:	0032      	movs	r2, r6
   21d40:	464c      	mov	r4, r9
   21d42:	4646      	mov	r6, r8
   21d44:	e004      	b.n	21d50 <_svfprintf_r+0xb90>
   21d46:	3208      	adds	r2, #8
   21d48:	3e10      	subs	r6, #16
   21d4a:	2e10      	cmp	r6, #16
   21d4c:	dc00      	bgt.n	21d50 <_svfprintf_r+0xb90>
   21d4e:	e104      	b.n	21f5a <_svfprintf_r+0xd9a>
   21d50:	4650      	mov	r0, sl
   21d52:	3110      	adds	r1, #16
   21d54:	3301      	adds	r3, #1
   21d56:	6014      	str	r4, [r2, #0]
   21d58:	6050      	str	r0, [r2, #4]
   21d5a:	60b9      	str	r1, [r7, #8]
   21d5c:	607b      	str	r3, [r7, #4]
   21d5e:	2b07      	cmp	r3, #7
   21d60:	ddf1      	ble.n	21d46 <_svfprintf_r+0xb86>
   21d62:	003a      	movs	r2, r7
   21d64:	9906      	ldr	r1, [sp, #24]
   21d66:	0028      	movs	r0, r5
   21d68:	f002 fc3a 	bl	245e0 <__ssprint_r>
   21d6c:	2800      	cmp	r0, #0
   21d6e:	d001      	beq.n	21d74 <_svfprintf_r+0xbb4>
   21d70:	f7ff faad 	bl	212ce <_svfprintf_r+0x10e>
   21d74:	68b9      	ldr	r1, [r7, #8]
   21d76:	687b      	ldr	r3, [r7, #4]
   21d78:	aa32      	add	r2, sp, #200	; 0xc8
   21d7a:	e7e5      	b.n	21d48 <_svfprintf_r+0xb88>
   21d7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   21d7e:	2b00      	cmp	r3, #0
   21d80:	d100      	bne.n	21d84 <_svfprintf_r+0xbc4>
   21d82:	e0ca      	b.n	21f1a <_svfprintf_r+0xd5a>
   21d84:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   21d86:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   21d88:	ab32      	add	r3, sp, #200	; 0xc8
   21d8a:	46b1      	mov	r9, r6
   21d8c:	001e      	movs	r6, r3
   21d8e:	0020      	movs	r0, r4
   21d90:	0029      	movs	r1, r5
   21d92:	220a      	movs	r2, #10
   21d94:	2300      	movs	r3, #0
   21d96:	f003 f8b9 	bl	24f0c <__aeabi_uldivmod>
   21d9a:	3e01      	subs	r6, #1
   21d9c:	3230      	adds	r2, #48	; 0x30
   21d9e:	7032      	strb	r2, [r6, #0]
   21da0:	2300      	movs	r3, #0
   21da2:	0020      	movs	r0, r4
   21da4:	0029      	movs	r1, r5
   21da6:	220a      	movs	r2, #10
   21da8:	f003 f8b0 	bl	24f0c <__aeabi_uldivmod>
   21dac:	0003      	movs	r3, r0
   21dae:	0004      	movs	r4, r0
   21db0:	000d      	movs	r5, r1
   21db2:	430b      	orrs	r3, r1
   21db4:	d1eb      	bne.n	21d8e <_svfprintf_r+0xbce>
   21db6:	0032      	movs	r2, r6
   21db8:	ab32      	add	r3, sp, #200	; 0xc8
   21dba:	1a9b      	subs	r3, r3, r2
   21dbc:	9611      	str	r6, [sp, #68]	; 0x44
   21dbe:	940c      	str	r4, [sp, #48]	; 0x30
   21dc0:	950d      	str	r5, [sp, #52]	; 0x34
   21dc2:	464e      	mov	r6, r9
   21dc4:	930e      	str	r3, [sp, #56]	; 0x38
   21dc6:	f7ff fb0b 	bl	213e0 <_svfprintf_r+0x220>
   21dca:	2300      	movs	r3, #0
   21dcc:	930e      	str	r3, [sp, #56]	; 0x38
   21dce:	ab32      	add	r3, sp, #200	; 0xc8
   21dd0:	9311      	str	r3, [sp, #68]	; 0x44
   21dd2:	f7ff fb05 	bl	213e0 <_svfprintf_r+0x220>
   21dd6:	003a      	movs	r2, r7
   21dd8:	9906      	ldr	r1, [sp, #24]
   21dda:	9809      	ldr	r0, [sp, #36]	; 0x24
   21ddc:	f002 fc00 	bl	245e0 <__ssprint_r>
   21de0:	2800      	cmp	r0, #0
   21de2:	d001      	beq.n	21de8 <_svfprintf_r+0xc28>
   21de4:	f7ff fa73 	bl	212ce <_svfprintf_r+0x10e>
   21de8:	ab16      	add	r3, sp, #88	; 0x58
   21dea:	7fdb      	ldrb	r3, [r3, #31]
   21dec:	68bc      	ldr	r4, [r7, #8]
   21dee:	4698      	mov	r8, r3
   21df0:	ae32      	add	r6, sp, #200	; 0xc8
   21df2:	e560      	b.n	218b6 <_svfprintf_r+0x6f6>
   21df4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   21df6:	1e5d      	subs	r5, r3, #1
   21df8:	2d00      	cmp	r5, #0
   21dfa:	dc00      	bgt.n	21dfe <_svfprintf_r+0xc3e>
   21dfc:	e666      	b.n	21acc <_svfprintf_r+0x90c>
   21dfe:	4b9c      	ldr	r3, [pc, #624]	; (22070 <_svfprintf_r+0xeb0>)
   21e00:	4699      	mov	r9, r3
   21e02:	2d10      	cmp	r5, #16
   21e04:	dd29      	ble.n	21e5a <_svfprintf_r+0xc9a>
   21e06:	2310      	movs	r3, #16
   21e08:	0032      	movs	r2, r6
   21e0a:	469a      	mov	sl, r3
   21e0c:	002e      	movs	r6, r5
   21e0e:	0021      	movs	r1, r4
   21e10:	4643      	mov	r3, r8
   21e12:	9c09      	ldr	r4, [sp, #36]	; 0x24
   21e14:	464d      	mov	r5, r9
   21e16:	e003      	b.n	21e20 <_svfprintf_r+0xc60>
   21e18:	3e10      	subs	r6, #16
   21e1a:	3208      	adds	r2, #8
   21e1c:	2e10      	cmp	r6, #16
   21e1e:	dd17      	ble.n	21e50 <_svfprintf_r+0xc90>
   21e20:	4650      	mov	r0, sl
   21e22:	3110      	adds	r1, #16
   21e24:	3301      	adds	r3, #1
   21e26:	6015      	str	r5, [r2, #0]
   21e28:	6050      	str	r0, [r2, #4]
   21e2a:	60b9      	str	r1, [r7, #8]
   21e2c:	607b      	str	r3, [r7, #4]
   21e2e:	2b07      	cmp	r3, #7
   21e30:	ddf2      	ble.n	21e18 <_svfprintf_r+0xc58>
   21e32:	003a      	movs	r2, r7
   21e34:	9906      	ldr	r1, [sp, #24]
   21e36:	0020      	movs	r0, r4
   21e38:	f002 fbd2 	bl	245e0 <__ssprint_r>
   21e3c:	2800      	cmp	r0, #0
   21e3e:	d001      	beq.n	21e44 <_svfprintf_r+0xc84>
   21e40:	f7ff fa45 	bl	212ce <_svfprintf_r+0x10e>
   21e44:	3e10      	subs	r6, #16
   21e46:	68b9      	ldr	r1, [r7, #8]
   21e48:	687b      	ldr	r3, [r7, #4]
   21e4a:	aa32      	add	r2, sp, #200	; 0xc8
   21e4c:	2e10      	cmp	r6, #16
   21e4e:	dce7      	bgt.n	21e20 <_svfprintf_r+0xc60>
   21e50:	46a9      	mov	r9, r5
   21e52:	000c      	movs	r4, r1
   21e54:	0035      	movs	r5, r6
   21e56:	4698      	mov	r8, r3
   21e58:	0016      	movs	r6, r2
   21e5a:	464b      	mov	r3, r9
   21e5c:	6075      	str	r5, [r6, #4]
   21e5e:	6033      	str	r3, [r6, #0]
   21e60:	1964      	adds	r4, r4, r5
   21e62:	e629      	b.n	21ab8 <_svfprintf_r+0x8f8>
   21e64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   21e66:	681a      	ldr	r2, [r3, #0]
   21e68:	f7ff fbfb 	bl	21662 <_svfprintf_r+0x4a2>
   21e6c:	6813      	ldr	r3, [r2, #0]
   21e6e:	9307      	str	r3, [sp, #28]
   21e70:	f7ff fa82 	bl	21378 <_svfprintf_r+0x1b8>
   21e74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   21e76:	681a      	ldr	r2, [r3, #0]
   21e78:	f7ff fb84 	bl	21584 <_svfprintf_r+0x3c4>
   21e7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   21e7e:	681a      	ldr	r2, [r3, #0]
   21e80:	f7ff fbd1 	bl	21626 <_svfprintf_r+0x466>
   21e84:	9b19      	ldr	r3, [sp, #100]	; 0x64
   21e86:	68ba      	ldr	r2, [r7, #8]
   21e88:	6033      	str	r3, [r6, #0]
   21e8a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   21e8c:	469c      	mov	ip, r3
   21e8e:	6073      	str	r3, [r6, #4]
   21e90:	687b      	ldr	r3, [r7, #4]
   21e92:	4462      	add	r2, ip
   21e94:	3301      	adds	r3, #1
   21e96:	0014      	movs	r4, r2
   21e98:	60ba      	str	r2, [r7, #8]
   21e9a:	607b      	str	r3, [r7, #4]
   21e9c:	2b07      	cmp	r3, #7
   21e9e:	dd00      	ble.n	21ea2 <_svfprintf_r+0xce2>
   21ea0:	e202      	b.n	222a8 <_svfprintf_r+0x10e8>
   21ea2:	3608      	adds	r6, #8
   21ea4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   21ea6:	1e5d      	subs	r5, r3, #1
   21ea8:	2d00      	cmp	r5, #0
   21eaa:	dc00      	bgt.n	21eae <_svfprintf_r+0xcee>
   21eac:	e57e      	b.n	219ac <_svfprintf_r+0x7ec>
   21eae:	4a70      	ldr	r2, [pc, #448]	; (22070 <_svfprintf_r+0xeb0>)
   21eb0:	687b      	ldr	r3, [r7, #4]
   21eb2:	4691      	mov	r9, r2
   21eb4:	2d10      	cmp	r5, #16
   21eb6:	dd25      	ble.n	21f04 <_svfprintf_r+0xd44>
   21eb8:	2210      	movs	r2, #16
   21eba:	0021      	movs	r1, r4
   21ebc:	4690      	mov	r8, r2
   21ebe:	9c09      	ldr	r4, [sp, #36]	; 0x24
   21ec0:	0032      	movs	r2, r6
   21ec2:	002e      	movs	r6, r5
   21ec4:	464d      	mov	r5, r9
   21ec6:	e003      	b.n	21ed0 <_svfprintf_r+0xd10>
   21ec8:	3208      	adds	r2, #8
   21eca:	3e10      	subs	r6, #16
   21ecc:	2e10      	cmp	r6, #16
   21ece:	dd15      	ble.n	21efc <_svfprintf_r+0xd3c>
   21ed0:	4640      	mov	r0, r8
   21ed2:	3110      	adds	r1, #16
   21ed4:	3301      	adds	r3, #1
   21ed6:	6015      	str	r5, [r2, #0]
   21ed8:	6050      	str	r0, [r2, #4]
   21eda:	60b9      	str	r1, [r7, #8]
   21edc:	607b      	str	r3, [r7, #4]
   21ede:	2b07      	cmp	r3, #7
   21ee0:	ddf2      	ble.n	21ec8 <_svfprintf_r+0xd08>
   21ee2:	003a      	movs	r2, r7
   21ee4:	9906      	ldr	r1, [sp, #24]
   21ee6:	0020      	movs	r0, r4
   21ee8:	f002 fb7a 	bl	245e0 <__ssprint_r>
   21eec:	2800      	cmp	r0, #0
   21eee:	d001      	beq.n	21ef4 <_svfprintf_r+0xd34>
   21ef0:	f7ff f9ed 	bl	212ce <_svfprintf_r+0x10e>
   21ef4:	68b9      	ldr	r1, [r7, #8]
   21ef6:	687b      	ldr	r3, [r7, #4]
   21ef8:	aa32      	add	r2, sp, #200	; 0xc8
   21efa:	e7e6      	b.n	21eca <_svfprintf_r+0xd0a>
   21efc:	46a9      	mov	r9, r5
   21efe:	000c      	movs	r4, r1
   21f00:	0035      	movs	r5, r6
   21f02:	0016      	movs	r6, r2
   21f04:	464a      	mov	r2, r9
   21f06:	1964      	adds	r4, r4, r5
   21f08:	3301      	adds	r3, #1
   21f0a:	6032      	str	r2, [r6, #0]
   21f0c:	6075      	str	r5, [r6, #4]
   21f0e:	60bc      	str	r4, [r7, #8]
   21f10:	607b      	str	r3, [r7, #4]
   21f12:	2b07      	cmp	r3, #7
   21f14:	dc00      	bgt.n	21f18 <_svfprintf_r+0xd58>
   21f16:	e548      	b.n	219aa <_svfprintf_r+0x7ea>
   21f18:	e5e5      	b.n	21ae6 <_svfprintf_r+0x926>
   21f1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   21f1c:	2b09      	cmp	r3, #9
   21f1e:	d900      	bls.n	21f22 <_svfprintf_r+0xd62>
   21f20:	e730      	b.n	21d84 <_svfprintf_r+0xbc4>
   21f22:	9c08      	ldr	r4, [sp, #32]
   21f24:	2227      	movs	r2, #39	; 0x27
   21f26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   21f28:	a928      	add	r1, sp, #160	; 0xa0
   21f2a:	3330      	adds	r3, #48	; 0x30
   21f2c:	548b      	strb	r3, [r1, r2]
   21f2e:	2301      	movs	r3, #1
   21f30:	aa16      	add	r2, sp, #88	; 0x58
   21f32:	4694      	mov	ip, r2
   21f34:	930e      	str	r3, [sp, #56]	; 0x38
   21f36:	336e      	adds	r3, #110	; 0x6e
   21f38:	4463      	add	r3, ip
   21f3a:	9408      	str	r4, [sp, #32]
   21f3c:	9311      	str	r3, [sp, #68]	; 0x44
   21f3e:	f7ff fa4f 	bl	213e0 <_svfprintf_r+0x220>
   21f42:	2b30      	cmp	r3, #48	; 0x30
   21f44:	d100      	bne.n	21f48 <_svfprintf_r+0xd88>
   21f46:	e20b      	b.n	22360 <_svfprintf_r+0x11a0>
   21f48:	2330      	movs	r3, #48	; 0x30
   21f4a:	3a02      	subs	r2, #2
   21f4c:	7013      	strb	r3, [r2, #0]
   21f4e:	ab32      	add	r3, sp, #200	; 0xc8
   21f50:	1a9b      	subs	r3, r3, r2
   21f52:	930e      	str	r3, [sp, #56]	; 0x38
   21f54:	9211      	str	r2, [sp, #68]	; 0x44
   21f56:	f7ff fa43 	bl	213e0 <_svfprintf_r+0x220>
   21f5a:	46b0      	mov	r8, r6
   21f5c:	46a1      	mov	r9, r4
   21f5e:	0016      	movs	r6, r2
   21f60:	000c      	movs	r4, r1
   21f62:	464a      	mov	r2, r9
   21f64:	6032      	str	r2, [r6, #0]
   21f66:	4642      	mov	r2, r8
   21f68:	4444      	add	r4, r8
   21f6a:	3301      	adds	r3, #1
   21f6c:	6072      	str	r2, [r6, #4]
   21f6e:	60bc      	str	r4, [r7, #8]
   21f70:	607b      	str	r3, [r7, #4]
   21f72:	2b07      	cmp	r3, #7
   21f74:	dd00      	ble.n	21f78 <_svfprintf_r+0xdb8>
   21f76:	e29c      	b.n	224b2 <_svfprintf_r+0x12f2>
   21f78:	3608      	adds	r6, #8
   21f7a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   21f7c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   21f7e:	4293      	cmp	r3, r2
   21f80:	db4c      	blt.n	2201c <_svfprintf_r+0xe5c>
   21f82:	9a08      	ldr	r2, [sp, #32]
   21f84:	07d2      	lsls	r2, r2, #31
   21f86:	d449      	bmi.n	2201c <_svfprintf_r+0xe5c>
   21f88:	9a14      	ldr	r2, [sp, #80]	; 0x50
   21f8a:	9913      	ldr	r1, [sp, #76]	; 0x4c
   21f8c:	1ad3      	subs	r3, r2, r3
   21f8e:	1a52      	subs	r2, r2, r1
   21f90:	4690      	mov	r8, r2
   21f92:	429a      	cmp	r2, r3
   21f94:	dd00      	ble.n	21f98 <_svfprintf_r+0xdd8>
   21f96:	4698      	mov	r8, r3
   21f98:	4642      	mov	r2, r8
   21f9a:	2a00      	cmp	r2, #0
   21f9c:	dd0f      	ble.n	21fbe <_svfprintf_r+0xdfe>
   21f9e:	9913      	ldr	r1, [sp, #76]	; 0x4c
   21fa0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   21fa2:	468c      	mov	ip, r1
   21fa4:	4462      	add	r2, ip
   21fa6:	6032      	str	r2, [r6, #0]
   21fa8:	4642      	mov	r2, r8
   21faa:	6072      	str	r2, [r6, #4]
   21fac:	687a      	ldr	r2, [r7, #4]
   21fae:	4444      	add	r4, r8
   21fb0:	3201      	adds	r2, #1
   21fb2:	60bc      	str	r4, [r7, #8]
   21fb4:	607a      	str	r2, [r7, #4]
   21fb6:	2a07      	cmp	r2, #7
   21fb8:	dd00      	ble.n	21fbc <_svfprintf_r+0xdfc>
   21fba:	e286      	b.n	224ca <_svfprintf_r+0x130a>
   21fbc:	3608      	adds	r6, #8
   21fbe:	4642      	mov	r2, r8
   21fc0:	43d5      	mvns	r5, r2
   21fc2:	17ed      	asrs	r5, r5, #31
   21fc4:	4015      	ands	r5, r2
   21fc6:	1b5d      	subs	r5, r3, r5
   21fc8:	2d00      	cmp	r5, #0
   21fca:	dc00      	bgt.n	21fce <_svfprintf_r+0xe0e>
   21fcc:	e4ee      	b.n	219ac <_svfprintf_r+0x7ec>
   21fce:	4a28      	ldr	r2, [pc, #160]	; (22070 <_svfprintf_r+0xeb0>)
   21fd0:	687b      	ldr	r3, [r7, #4]
   21fd2:	4691      	mov	r9, r2
   21fd4:	2d10      	cmp	r5, #16
   21fd6:	dd95      	ble.n	21f04 <_svfprintf_r+0xd44>
   21fd8:	2210      	movs	r2, #16
   21fda:	0021      	movs	r1, r4
   21fdc:	4690      	mov	r8, r2
   21fde:	9c09      	ldr	r4, [sp, #36]	; 0x24
   21fe0:	0032      	movs	r2, r6
   21fe2:	002e      	movs	r6, r5
   21fe4:	464d      	mov	r5, r9
   21fe6:	e003      	b.n	21ff0 <_svfprintf_r+0xe30>
   21fe8:	3208      	adds	r2, #8
   21fea:	3e10      	subs	r6, #16
   21fec:	2e10      	cmp	r6, #16
   21fee:	dd85      	ble.n	21efc <_svfprintf_r+0xd3c>
   21ff0:	4640      	mov	r0, r8
   21ff2:	3110      	adds	r1, #16
   21ff4:	3301      	adds	r3, #1
   21ff6:	6015      	str	r5, [r2, #0]
   21ff8:	6050      	str	r0, [r2, #4]
   21ffa:	60b9      	str	r1, [r7, #8]
   21ffc:	607b      	str	r3, [r7, #4]
   21ffe:	2b07      	cmp	r3, #7
   22000:	ddf2      	ble.n	21fe8 <_svfprintf_r+0xe28>
   22002:	003a      	movs	r2, r7
   22004:	9906      	ldr	r1, [sp, #24]
   22006:	0020      	movs	r0, r4
   22008:	f002 faea 	bl	245e0 <__ssprint_r>
   2200c:	2800      	cmp	r0, #0
   2200e:	d001      	beq.n	22014 <_svfprintf_r+0xe54>
   22010:	f7ff f95d 	bl	212ce <_svfprintf_r+0x10e>
   22014:	68b9      	ldr	r1, [r7, #8]
   22016:	687b      	ldr	r3, [r7, #4]
   22018:	aa32      	add	r2, sp, #200	; 0xc8
   2201a:	e7e6      	b.n	21fea <_svfprintf_r+0xe2a>
   2201c:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2201e:	6032      	str	r2, [r6, #0]
   22020:	9a18      	ldr	r2, [sp, #96]	; 0x60
   22022:	4694      	mov	ip, r2
   22024:	6072      	str	r2, [r6, #4]
   22026:	687a      	ldr	r2, [r7, #4]
   22028:	4464      	add	r4, ip
   2202a:	3201      	adds	r2, #1
   2202c:	60bc      	str	r4, [r7, #8]
   2202e:	607a      	str	r2, [r7, #4]
   22030:	2a07      	cmp	r2, #7
   22032:	dd00      	ble.n	22036 <_svfprintf_r+0xe76>
   22034:	e230      	b.n	22498 <_svfprintf_r+0x12d8>
   22036:	3608      	adds	r6, #8
   22038:	e7a6      	b.n	21f88 <_svfprintf_r+0xdc8>
   2203a:	003a      	movs	r2, r7
   2203c:	9906      	ldr	r1, [sp, #24]
   2203e:	9809      	ldr	r0, [sp, #36]	; 0x24
   22040:	f002 face 	bl	245e0 <__ssprint_r>
   22044:	2800      	cmp	r0, #0
   22046:	d001      	beq.n	2204c <_svfprintf_r+0xe8c>
   22048:	f7ff f941 	bl	212ce <_svfprintf_r+0x10e>
   2204c:	68bc      	ldr	r4, [r7, #8]
   2204e:	687b      	ldr	r3, [r7, #4]
   22050:	ae32      	add	r6, sp, #200	; 0xc8
   22052:	e513      	b.n	21a7c <_svfprintf_r+0x8bc>
   22054:	003a      	movs	r2, r7
   22056:	9906      	ldr	r1, [sp, #24]
   22058:	9809      	ldr	r0, [sp, #36]	; 0x24
   2205a:	f002 fac1 	bl	245e0 <__ssprint_r>
   2205e:	2800      	cmp	r0, #0
   22060:	d001      	beq.n	22066 <_svfprintf_r+0xea6>
   22062:	f7ff f934 	bl	212ce <_svfprintf_r+0x10e>
   22066:	687b      	ldr	r3, [r7, #4]
   22068:	68bc      	ldr	r4, [r7, #8]
   2206a:	4698      	mov	r8, r3
   2206c:	ae32      	add	r6, sp, #200	; 0xc8
   2206e:	e513      	b.n	21a98 <_svfprintf_r+0x8d8>
   22070:	0002708c 	.word	0x0002708c
   22074:	2307      	movs	r3, #7
   22076:	3207      	adds	r2, #7
   22078:	439a      	bics	r2, r3
   2207a:	3301      	adds	r3, #1
   2207c:	469c      	mov	ip, r3
   2207e:	4494      	add	ip, r2
   22080:	4663      	mov	r3, ip
   22082:	930f      	str	r3, [sp, #60]	; 0x3c
   22084:	6853      	ldr	r3, [r2, #4]
   22086:	6812      	ldr	r2, [r2, #0]
   22088:	930d      	str	r3, [sp, #52]	; 0x34
   2208a:	920c      	str	r2, [sp, #48]	; 0x30
   2208c:	2b00      	cmp	r3, #0
   2208e:	db01      	blt.n	22094 <_svfprintf_r+0xed4>
   22090:	f7ff f97a 	bl	21388 <_svfprintf_r+0x1c8>
   22094:	980c      	ldr	r0, [sp, #48]	; 0x30
   22096:	990d      	ldr	r1, [sp, #52]	; 0x34
   22098:	2300      	movs	r3, #0
   2209a:	4242      	negs	r2, r0
   2209c:	418b      	sbcs	r3, r1
   2209e:	0011      	movs	r1, r2
   220a0:	001a      	movs	r2, r3
   220a2:	232d      	movs	r3, #45	; 0x2d
   220a4:	a816      	add	r0, sp, #88	; 0x58
   220a6:	77c3      	strb	r3, [r0, #31]
   220a8:	0008      	movs	r0, r1
   220aa:	4310      	orrs	r0, r2
   220ac:	910c      	str	r1, [sp, #48]	; 0x30
   220ae:	920d      	str	r2, [sp, #52]	; 0x34
   220b0:	4698      	mov	r8, r3
   220b2:	0002      	movs	r2, r0
   220b4:	3b2c      	subs	r3, #44	; 0x2c
   220b6:	f7ff f970 	bl	2139a <_svfprintf_r+0x1da>
   220ba:	003a      	movs	r2, r7
   220bc:	9906      	ldr	r1, [sp, #24]
   220be:	9809      	ldr	r0, [sp, #36]	; 0x24
   220c0:	f002 fa8e 	bl	245e0 <__ssprint_r>
   220c4:	2800      	cmp	r0, #0
   220c6:	d001      	beq.n	220cc <_svfprintf_r+0xf0c>
   220c8:	f7ff f901 	bl	212ce <_svfprintf_r+0x10e>
   220cc:	68bc      	ldr	r4, [r7, #8]
   220ce:	ae32      	add	r6, sp, #200	; 0xc8
   220d0:	e418      	b.n	21904 <_svfprintf_r+0x744>
   220d2:	9916      	ldr	r1, [sp, #88]	; 0x58
   220d4:	9d15      	ldr	r5, [sp, #84]	; 0x54
   220d6:	000a      	movs	r2, r1
   220d8:	0008      	movs	r0, r1
   220da:	002b      	movs	r3, r5
   220dc:	0029      	movs	r1, r5
   220de:	f7fe fd8d 	bl	20bfc <__aeabi_dcmpun>
   220e2:	2800      	cmp	r0, #0
   220e4:	d000      	beq.n	220e8 <_svfprintf_r+0xf28>
   220e6:	e2e6      	b.n	226b6 <_svfprintf_r+0x14f6>
   220e8:	4653      	mov	r3, sl
   220ea:	3301      	adds	r3, #1
   220ec:	d100      	bne.n	220f0 <_svfprintf_r+0xf30>
   220ee:	e20d      	b.n	2250c <_svfprintf_r+0x134c>
   220f0:	2320      	movs	r3, #32
   220f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
   220f4:	439a      	bics	r2, r3
   220f6:	920e      	str	r2, [sp, #56]	; 0x38
   220f8:	2a47      	cmp	r2, #71	; 0x47
   220fa:	d100      	bne.n	220fe <_svfprintf_r+0xf3e>
   220fc:	e11c      	b.n	22338 <_svfprintf_r+0x1178>
   220fe:	2380      	movs	r3, #128	; 0x80
   22100:	005b      	lsls	r3, r3, #1
   22102:	4323      	orrs	r3, r4
   22104:	9308      	str	r3, [sp, #32]
   22106:	9b15      	ldr	r3, [sp, #84]	; 0x54
   22108:	2b00      	cmp	r3, #0
   2210a:	da00      	bge.n	2210e <_svfprintf_r+0xf4e>
   2210c:	e221      	b.n	22552 <_svfprintf_r+0x1392>
   2210e:	9a16      	ldr	r2, [sp, #88]	; 0x58
   22110:	9307      	str	r3, [sp, #28]
   22112:	2300      	movs	r3, #0
   22114:	4691      	mov	r9, r2
   22116:	9310      	str	r3, [sp, #64]	; 0x40
   22118:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2211a:	2b66      	cmp	r3, #102	; 0x66
   2211c:	d100      	bne.n	22120 <_svfprintf_r+0xf60>
   2211e:	e1fc      	b.n	2251a <_svfprintf_r+0x135a>
   22120:	2b46      	cmp	r3, #70	; 0x46
   22122:	d100      	bne.n	22126 <_svfprintf_r+0xf66>
   22124:	e0db      	b.n	222de <_svfprintf_r+0x111e>
   22126:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   22128:	9809      	ldr	r0, [sp, #36]	; 0x24
   2212a:	3a45      	subs	r2, #69	; 0x45
   2212c:	0013      	movs	r3, r2
   2212e:	4259      	negs	r1, r3
   22130:	4159      	adcs	r1, r3
   22132:	ab20      	add	r3, sp, #128	; 0x80
   22134:	000d      	movs	r5, r1
   22136:	9303      	str	r3, [sp, #12]
   22138:	ab1f      	add	r3, sp, #124	; 0x7c
   2213a:	9302      	str	r3, [sp, #8]
   2213c:	2302      	movs	r3, #2
   2213e:	aa23      	add	r2, sp, #140	; 0x8c
   22140:	4455      	add	r5, sl
   22142:	921b      	str	r2, [sp, #108]	; 0x6c
   22144:	9204      	str	r2, [sp, #16]
   22146:	9300      	str	r3, [sp, #0]
   22148:	9501      	str	r5, [sp, #4]
   2214a:	9b07      	ldr	r3, [sp, #28]
   2214c:	464a      	mov	r2, r9
   2214e:	f000 fbf9 	bl	22944 <_dtoa_r>
   22152:	9b12      	ldr	r3, [sp, #72]	; 0x48
   22154:	9011      	str	r0, [sp, #68]	; 0x44
   22156:	2b67      	cmp	r3, #103	; 0x67
   22158:	d000      	beq.n	2215c <_svfprintf_r+0xf9c>
   2215a:	e239      	b.n	225d0 <_svfprintf_r+0x1410>
   2215c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2215e:	4698      	mov	r8, r3
   22160:	44a8      	add	r8, r5
   22162:	07e3      	lsls	r3, r4, #31
   22164:	d400      	bmi.n	22168 <_svfprintf_r+0xfa8>
   22166:	e28b      	b.n	22680 <_svfprintf_r+0x14c0>
   22168:	2300      	movs	r3, #0
   2216a:	2200      	movs	r2, #0
   2216c:	4648      	mov	r0, r9
   2216e:	9907      	ldr	r1, [sp, #28]
   22170:	f7fc f870 	bl	1e254 <__aeabi_dcmpeq>
   22174:	4643      	mov	r3, r8
   22176:	2800      	cmp	r0, #0
   22178:	d10a      	bne.n	22190 <_svfprintf_r+0xfd0>
   2217a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2217c:	4543      	cmp	r3, r8
   2217e:	d207      	bcs.n	22190 <_svfprintf_r+0xfd0>
   22180:	2130      	movs	r1, #48	; 0x30
   22182:	4640      	mov	r0, r8
   22184:	1c5a      	adds	r2, r3, #1
   22186:	9223      	str	r2, [sp, #140]	; 0x8c
   22188:	7019      	strb	r1, [r3, #0]
   2218a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2218c:	4298      	cmp	r0, r3
   2218e:	d8f9      	bhi.n	22184 <_svfprintf_r+0xfc4>
   22190:	9a11      	ldr	r2, [sp, #68]	; 0x44
   22192:	1a9b      	subs	r3, r3, r2
   22194:	9314      	str	r3, [sp, #80]	; 0x50
   22196:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   22198:	2b47      	cmp	r3, #71	; 0x47
   2219a:	d100      	bne.n	2219e <_svfprintf_r+0xfde>
   2219c:	e0f6      	b.n	2238c <_svfprintf_r+0x11cc>
   2219e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   221a0:	2b65      	cmp	r3, #101	; 0x65
   221a2:	dc00      	bgt.n	221a6 <_svfprintf_r+0xfe6>
   221a4:	e226      	b.n	225f4 <_svfprintf_r+0x1434>
   221a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   221a8:	2b66      	cmp	r3, #102	; 0x66
   221aa:	d100      	bne.n	221ae <_svfprintf_r+0xfee>
   221ac:	e1f4      	b.n	22598 <_svfprintf_r+0x13d8>
   221ae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   221b0:	9313      	str	r3, [sp, #76]	; 0x4c
   221b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   221b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   221b6:	0019      	movs	r1, r3
   221b8:	4291      	cmp	r1, r2
   221ba:	dd00      	ble.n	221be <_svfprintf_r+0xffe>
   221bc:	e1d4      	b.n	22568 <_svfprintf_r+0x13a8>
   221be:	07e3      	lsls	r3, r4, #31
   221c0:	d500      	bpl.n	221c4 <_svfprintf_r+0x1004>
   221c2:	e249      	b.n	22658 <_svfprintf_r+0x1498>
   221c4:	43d3      	mvns	r3, r2
   221c6:	17db      	asrs	r3, r3, #31
   221c8:	0011      	movs	r1, r2
   221ca:	401a      	ands	r2, r3
   221cc:	2367      	movs	r3, #103	; 0x67
   221ce:	9207      	str	r2, [sp, #28]
   221d0:	910e      	str	r1, [sp, #56]	; 0x38
   221d2:	9312      	str	r3, [sp, #72]	; 0x48
   221d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   221d6:	2b00      	cmp	r3, #0
   221d8:	d000      	beq.n	221dc <_svfprintf_r+0x101c>
   221da:	e0cf      	b.n	2237c <_svfprintf_r+0x11bc>
   221dc:	ab16      	add	r3, sp, #88	; 0x58
   221de:	7fdb      	ldrb	r3, [r3, #31]
   221e0:	4698      	mov	r8, r3
   221e2:	2300      	movs	r3, #0
   221e4:	469a      	mov	sl, r3
   221e6:	f7ff f903 	bl	213f0 <_svfprintf_r+0x230>
   221ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   221ec:	990a      	ldr	r1, [sp, #40]	; 0x28
   221ee:	6813      	ldr	r3, [r2, #0]
   221f0:	6019      	str	r1, [r3, #0]
   221f2:	0013      	movs	r3, r2
   221f4:	3304      	adds	r3, #4
   221f6:	930f      	str	r3, [sp, #60]	; 0x3c
   221f8:	f7ff f80d 	bl	21216 <_svfprintf_r+0x56>
   221fc:	003a      	movs	r2, r7
   221fe:	9906      	ldr	r1, [sp, #24]
   22200:	9809      	ldr	r0, [sp, #36]	; 0x24
   22202:	f002 f9ed 	bl	245e0 <__ssprint_r>
   22206:	2800      	cmp	r0, #0
   22208:	d001      	beq.n	2220e <_svfprintf_r+0x104e>
   2220a:	f7ff f860 	bl	212ce <_svfprintf_r+0x10e>
   2220e:	ae32      	add	r6, sp, #200	; 0xc8
   22210:	e48e      	b.n	21b30 <_svfprintf_r+0x970>
   22212:	4bde      	ldr	r3, [pc, #888]	; (2258c <_svfprintf_r+0x13cc>)
   22214:	3401      	adds	r4, #1
   22216:	6033      	str	r3, [r6, #0]
   22218:	2301      	movs	r3, #1
   2221a:	6073      	str	r3, [r6, #4]
   2221c:	687b      	ldr	r3, [r7, #4]
   2221e:	60bc      	str	r4, [r7, #8]
   22220:	3301      	adds	r3, #1
   22222:	607b      	str	r3, [r7, #4]
   22224:	2b07      	cmp	r3, #7
   22226:	dc7a      	bgt.n	2231e <_svfprintf_r+0x115e>
   22228:	3608      	adds	r6, #8
   2222a:	2800      	cmp	r0, #0
   2222c:	d107      	bne.n	2223e <_svfprintf_r+0x107e>
   2222e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   22230:	2b00      	cmp	r3, #0
   22232:	d104      	bne.n	2223e <_svfprintf_r+0x107e>
   22234:	9b08      	ldr	r3, [sp, #32]
   22236:	07db      	lsls	r3, r3, #31
   22238:	d401      	bmi.n	2223e <_svfprintf_r+0x107e>
   2223a:	f7ff fbb7 	bl	219ac <_svfprintf_r+0x7ec>
   2223e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   22240:	6033      	str	r3, [r6, #0]
   22242:	9b18      	ldr	r3, [sp, #96]	; 0x60
   22244:	1919      	adds	r1, r3, r4
   22246:	6073      	str	r3, [r6, #4]
   22248:	687b      	ldr	r3, [r7, #4]
   2224a:	60b9      	str	r1, [r7, #8]
   2224c:	3301      	adds	r3, #1
   2224e:	607b      	str	r3, [r7, #4]
   22250:	2b07      	cmp	r3, #7
   22252:	dd00      	ble.n	22256 <_svfprintf_r+0x1096>
   22254:	e1f2      	b.n	2263c <_svfprintf_r+0x147c>
   22256:	0032      	movs	r2, r6
   22258:	3208      	adds	r2, #8
   2225a:	2800      	cmp	r0, #0
   2225c:	da00      	bge.n	22260 <_svfprintf_r+0x10a0>
   2225e:	e1cc      	b.n	225fa <_svfprintf_r+0x143a>
   22260:	9811      	ldr	r0, [sp, #68]	; 0x44
   22262:	3301      	adds	r3, #1
   22264:	6010      	str	r0, [r2, #0]
   22266:	9814      	ldr	r0, [sp, #80]	; 0x50
   22268:	607b      	str	r3, [r7, #4]
   2226a:	1844      	adds	r4, r0, r1
   2226c:	6050      	str	r0, [r2, #4]
   2226e:	60bc      	str	r4, [r7, #8]
   22270:	2b07      	cmp	r3, #7
   22272:	dd00      	ble.n	22276 <_svfprintf_r+0x10b6>
   22274:	e437      	b.n	21ae6 <_svfprintf_r+0x926>
   22276:	3208      	adds	r2, #8
   22278:	0016      	movs	r6, r2
   2227a:	f7ff fb97 	bl	219ac <_svfprintf_r+0x7ec>
   2227e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   22280:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   22282:	680b      	ldr	r3, [r1, #0]
   22284:	601a      	str	r2, [r3, #0]
   22286:	17d2      	asrs	r2, r2, #31
   22288:	605a      	str	r2, [r3, #4]
   2228a:	000b      	movs	r3, r1
   2228c:	3304      	adds	r3, #4
   2228e:	930f      	str	r3, [sp, #60]	; 0x3c
   22290:	f7fe ffc1 	bl	21216 <_svfprintf_r+0x56>
   22294:	464b      	mov	r3, r9
   22296:	3101      	adds	r1, #1
   22298:	431c      	orrs	r4, r3
   2229a:	780b      	ldrb	r3, [r1, #0]
   2229c:	f7fe fff4 	bl	21288 <_svfprintf_r+0xc8>
   222a0:	4bbb      	ldr	r3, [pc, #748]	; (22590 <_svfprintf_r+0x13d0>)
   222a2:	9311      	str	r3, [sp, #68]	; 0x44
   222a4:	f7ff f937 	bl	21516 <_svfprintf_r+0x356>
   222a8:	003a      	movs	r2, r7
   222aa:	9906      	ldr	r1, [sp, #24]
   222ac:	9809      	ldr	r0, [sp, #36]	; 0x24
   222ae:	f002 f997 	bl	245e0 <__ssprint_r>
   222b2:	2800      	cmp	r0, #0
   222b4:	d001      	beq.n	222ba <_svfprintf_r+0x10fa>
   222b6:	f7ff f80a 	bl	212ce <_svfprintf_r+0x10e>
   222ba:	68bc      	ldr	r4, [r7, #8]
   222bc:	ae32      	add	r6, sp, #200	; 0xc8
   222be:	e5f1      	b.n	21ea4 <_svfprintf_r+0xce4>
   222c0:	2140      	movs	r1, #64	; 0x40
   222c2:	9809      	ldr	r0, [sp, #36]	; 0x24
   222c4:	f001 fb2e 	bl	23924 <_malloc_r>
   222c8:	9b06      	ldr	r3, [sp, #24]
   222ca:	6018      	str	r0, [r3, #0]
   222cc:	6118      	str	r0, [r3, #16]
   222ce:	2800      	cmp	r0, #0
   222d0:	d100      	bne.n	222d4 <_svfprintf_r+0x1114>
   222d2:	e24f      	b.n	22774 <_svfprintf_r+0x15b4>
   222d4:	2340      	movs	r3, #64	; 0x40
   222d6:	9a06      	ldr	r2, [sp, #24]
   222d8:	6153      	str	r3, [r2, #20]
   222da:	f7fe ff8e 	bl	211fa <_svfprintf_r+0x3a>
   222de:	ab23      	add	r3, sp, #140	; 0x8c
   222e0:	931b      	str	r3, [sp, #108]	; 0x6c
   222e2:	9304      	str	r3, [sp, #16]
   222e4:	ab20      	add	r3, sp, #128	; 0x80
   222e6:	9303      	str	r3, [sp, #12]
   222e8:	ab1f      	add	r3, sp, #124	; 0x7c
   222ea:	9302      	str	r3, [sp, #8]
   222ec:	4653      	mov	r3, sl
   222ee:	9301      	str	r3, [sp, #4]
   222f0:	2303      	movs	r3, #3
   222f2:	464a      	mov	r2, r9
   222f4:	9300      	str	r3, [sp, #0]
   222f6:	9809      	ldr	r0, [sp, #36]	; 0x24
   222f8:	9b07      	ldr	r3, [sp, #28]
   222fa:	f000 fb23 	bl	22944 <_dtoa_r>
   222fe:	4655      	mov	r5, sl
   22300:	9011      	str	r0, [sp, #68]	; 0x44
   22302:	9b11      	ldr	r3, [sp, #68]	; 0x44
   22304:	4698      	mov	r8, r3
   22306:	9b12      	ldr	r3, [sp, #72]	; 0x48
   22308:	44a8      	add	r8, r5
   2230a:	2b46      	cmp	r3, #70	; 0x46
   2230c:	d000      	beq.n	22310 <_svfprintf_r+0x1150>
   2230e:	e72b      	b.n	22168 <_svfprintf_r+0xfa8>
   22310:	9b11      	ldr	r3, [sp, #68]	; 0x44
   22312:	781b      	ldrb	r3, [r3, #0]
   22314:	2b30      	cmp	r3, #48	; 0x30
   22316:	d016      	beq.n	22346 <_svfprintf_r+0x1186>
   22318:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2231a:	4498      	add	r8, r3
   2231c:	e724      	b.n	22168 <_svfprintf_r+0xfa8>
   2231e:	003a      	movs	r2, r7
   22320:	9906      	ldr	r1, [sp, #24]
   22322:	9809      	ldr	r0, [sp, #36]	; 0x24
   22324:	f002 f95c 	bl	245e0 <__ssprint_r>
   22328:	2800      	cmp	r0, #0
   2232a:	d001      	beq.n	22330 <_svfprintf_r+0x1170>
   2232c:	f7fe ffcf 	bl	212ce <_svfprintf_r+0x10e>
   22330:	981f      	ldr	r0, [sp, #124]	; 0x7c
   22332:	68bc      	ldr	r4, [r7, #8]
   22334:	ae32      	add	r6, sp, #200	; 0xc8
   22336:	e778      	b.n	2222a <_svfprintf_r+0x106a>
   22338:	4653      	mov	r3, sl
   2233a:	2b00      	cmp	r3, #0
   2233c:	d000      	beq.n	22340 <_svfprintf_r+0x1180>
   2233e:	e6de      	b.n	220fe <_svfprintf_r+0xf3e>
   22340:	3301      	adds	r3, #1
   22342:	469a      	mov	sl, r3
   22344:	e6db      	b.n	220fe <_svfprintf_r+0xf3e>
   22346:	2200      	movs	r2, #0
   22348:	2300      	movs	r3, #0
   2234a:	4648      	mov	r0, r9
   2234c:	9907      	ldr	r1, [sp, #28]
   2234e:	f7fb ff81 	bl	1e254 <__aeabi_dcmpeq>
   22352:	2800      	cmp	r0, #0
   22354:	d1e0      	bne.n	22318 <_svfprintf_r+0x1158>
   22356:	2301      	movs	r3, #1
   22358:	1b5b      	subs	r3, r3, r5
   2235a:	931f      	str	r3, [sp, #124]	; 0x7c
   2235c:	4498      	add	r8, r3
   2235e:	e703      	b.n	22168 <_svfprintf_r+0xfa8>
   22360:	9a11      	ldr	r2, [sp, #68]	; 0x44
   22362:	ab32      	add	r3, sp, #200	; 0xc8
   22364:	1a9b      	subs	r3, r3, r2
   22366:	930e      	str	r3, [sp, #56]	; 0x38
   22368:	f7ff f83a 	bl	213e0 <_svfprintf_r+0x220>
   2236c:	9811      	ldr	r0, [sp, #68]	; 0x44
   2236e:	f7fe fef5 	bl	2115c <strlen>
   22372:	0002      	movs	r2, r0
   22374:	900e      	str	r0, [sp, #56]	; 0x38
   22376:	0003      	movs	r3, r0
   22378:	f7ff f9cd 	bl	21716 <_svfprintf_r+0x556>
   2237c:	232d      	movs	r3, #45	; 0x2d
   2237e:	aa16      	add	r2, sp, #88	; 0x58
   22380:	77d3      	strb	r3, [r2, #31]
   22382:	4698      	mov	r8, r3
   22384:	2300      	movs	r3, #0
   22386:	469a      	mov	sl, r3
   22388:	f7ff f835 	bl	213f6 <_svfprintf_r+0x236>
   2238c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2238e:	9313      	str	r3, [sp, #76]	; 0x4c
   22390:	1cda      	adds	r2, r3, #3
   22392:	db02      	blt.n	2239a <_svfprintf_r+0x11da>
   22394:	459a      	cmp	sl, r3
   22396:	db00      	blt.n	2239a <_svfprintf_r+0x11da>
   22398:	e70b      	b.n	221b2 <_svfprintf_r+0xff2>
   2239a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2239c:	3b02      	subs	r3, #2
   2239e:	9312      	str	r3, [sp, #72]	; 0x48
   223a0:	222c      	movs	r2, #44	; 0x2c
   223a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   223a4:	2148      	movs	r1, #72	; 0x48
   223a6:	1e5d      	subs	r5, r3, #1
   223a8:	ab16      	add	r3, sp, #88	; 0x58
   223aa:	189b      	adds	r3, r3, r2
   223ac:	466a      	mov	r2, sp
   223ae:	1852      	adds	r2, r2, r1
   223b0:	7812      	ldrb	r2, [r2, #0]
   223b2:	951f      	str	r5, [sp, #124]	; 0x7c
   223b4:	701a      	strb	r2, [r3, #0]
   223b6:	2d00      	cmp	r5, #0
   223b8:	da00      	bge.n	223bc <_svfprintf_r+0x11fc>
   223ba:	e1a4      	b.n	22706 <_svfprintf_r+0x1546>
   223bc:	212d      	movs	r1, #45	; 0x2d
   223be:	232b      	movs	r3, #43	; 0x2b
   223c0:	aa16      	add	r2, sp, #88	; 0x58
   223c2:	1852      	adds	r2, r2, r1
   223c4:	7013      	strb	r3, [r2, #0]
   223c6:	2d09      	cmp	r5, #9
   223c8:	dc00      	bgt.n	223cc <_svfprintf_r+0x120c>
   223ca:	e14c      	b.n	22666 <_svfprintf_r+0x14a6>
   223cc:	aa16      	add	r2, sp, #88	; 0x58
   223ce:	233b      	movs	r3, #59	; 0x3b
   223d0:	4694      	mov	ip, r2
   223d2:	4463      	add	r3, ip
   223d4:	469a      	mov	sl, r3
   223d6:	46b1      	mov	r9, r6
   223d8:	46a0      	mov	r8, r4
   223da:	4656      	mov	r6, sl
   223dc:	e000      	b.n	223e0 <_svfprintf_r+0x1220>
   223de:	0026      	movs	r6, r4
   223e0:	0028      	movs	r0, r5
   223e2:	210a      	movs	r1, #10
   223e4:	f7fb ff20 	bl	1e228 <__aeabi_idivmod>
   223e8:	1e74      	subs	r4, r6, #1
   223ea:	3130      	adds	r1, #48	; 0x30
   223ec:	7021      	strb	r1, [r4, #0]
   223ee:	0028      	movs	r0, r5
   223f0:	210a      	movs	r1, #10
   223f2:	f7fb fe33 	bl	1e05c <__divsi3>
   223f6:	0005      	movs	r5, r0
   223f8:	2809      	cmp	r0, #9
   223fa:	dcf0      	bgt.n	223de <_svfprintf_r+0x121e>
   223fc:	0023      	movs	r3, r4
   223fe:	4644      	mov	r4, r8
   22400:	46b0      	mov	r8, r6
   22402:	464e      	mov	r6, r9
   22404:	4699      	mov	r9, r3
   22406:	0003      	movs	r3, r0
   22408:	3330      	adds	r3, #48	; 0x30
   2240a:	b2d8      	uxtb	r0, r3
   2240c:	4643      	mov	r3, r8
   2240e:	3b02      	subs	r3, #2
   22410:	7018      	strb	r0, [r3, #0]
   22412:	459a      	cmp	sl, r3
   22414:	d800      	bhi.n	22418 <_svfprintf_r+0x1258>
   22416:	e1b4      	b.n	22782 <_svfprintf_r+0x15c2>
   22418:	4642      	mov	r2, r8
   2241a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   2241c:	4645      	mov	r5, r8
   2241e:	1a99      	subs	r1, r3, r2
   22420:	2301      	movs	r3, #1
   22422:	3107      	adds	r1, #7
   22424:	425b      	negs	r3, r3
   22426:	e001      	b.n	2242c <_svfprintf_r+0x126c>
   22428:	5ce8      	ldrb	r0, [r5, r3]
   2242a:	3301      	adds	r3, #1
   2242c:	aa21      	add	r2, sp, #132	; 0x84
   2242e:	18d2      	adds	r2, r2, r3
   22430:	70d0      	strb	r0, [r2, #3]
   22432:	428b      	cmp	r3, r1
   22434:	d1f8      	bne.n	22428 <_svfprintf_r+0x1268>
   22436:	a916      	add	r1, sp, #88	; 0x58
   22438:	468c      	mov	ip, r1
   2243a:	222e      	movs	r2, #46	; 0x2e
   2243c:	464b      	mov	r3, r9
   2243e:	4462      	add	r2, ip
   22440:	4694      	mov	ip, r2
   22442:	1afb      	subs	r3, r7, r3
   22444:	4463      	add	r3, ip
   22446:	aa21      	add	r2, sp, #132	; 0x84
   22448:	9914      	ldr	r1, [sp, #80]	; 0x50
   2244a:	1a9b      	subs	r3, r3, r2
   2244c:	469c      	mov	ip, r3
   2244e:	000a      	movs	r2, r1
   22450:	4462      	add	r2, ip
   22452:	931a      	str	r3, [sp, #104]	; 0x68
   22454:	920e      	str	r2, [sp, #56]	; 0x38
   22456:	2901      	cmp	r1, #1
   22458:	dc00      	bgt.n	2245c <_svfprintf_r+0x129c>
   2245a:	e145      	b.n	226e8 <_svfprintf_r+0x1528>
   2245c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   2245e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   22460:	4694      	mov	ip, r2
   22462:	4463      	add	r3, ip
   22464:	001a      	movs	r2, r3
   22466:	930e      	str	r3, [sp, #56]	; 0x38
   22468:	43db      	mvns	r3, r3
   2246a:	17db      	asrs	r3, r3, #31
   2246c:	401a      	ands	r2, r3
   2246e:	2300      	movs	r3, #0
   22470:	9207      	str	r2, [sp, #28]
   22472:	9313      	str	r3, [sp, #76]	; 0x4c
   22474:	e6ae      	b.n	221d4 <_svfprintf_r+0x1014>
   22476:	2301      	movs	r3, #1
   22478:	425b      	negs	r3, r3
   2247a:	930a      	str	r3, [sp, #40]	; 0x28
   2247c:	f7fe ff2d 	bl	212da <_svfprintf_r+0x11a>
   22480:	003a      	movs	r2, r7
   22482:	9906      	ldr	r1, [sp, #24]
   22484:	9809      	ldr	r0, [sp, #36]	; 0x24
   22486:	f002 f8ab 	bl	245e0 <__ssprint_r>
   2248a:	2800      	cmp	r0, #0
   2248c:	d001      	beq.n	22492 <_svfprintf_r+0x12d2>
   2248e:	f7fe ff1e 	bl	212ce <_svfprintf_r+0x10e>
   22492:	68bc      	ldr	r4, [r7, #8]
   22494:	ae32      	add	r6, sp, #200	; 0xc8
   22496:	e43c      	b.n	21d12 <_svfprintf_r+0xb52>
   22498:	003a      	movs	r2, r7
   2249a:	9906      	ldr	r1, [sp, #24]
   2249c:	9809      	ldr	r0, [sp, #36]	; 0x24
   2249e:	f002 f89f 	bl	245e0 <__ssprint_r>
   224a2:	2800      	cmp	r0, #0
   224a4:	d001      	beq.n	224aa <_svfprintf_r+0x12ea>
   224a6:	f7fe ff12 	bl	212ce <_svfprintf_r+0x10e>
   224aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   224ac:	68bc      	ldr	r4, [r7, #8]
   224ae:	ae32      	add	r6, sp, #200	; 0xc8
   224b0:	e56a      	b.n	21f88 <_svfprintf_r+0xdc8>
   224b2:	003a      	movs	r2, r7
   224b4:	9906      	ldr	r1, [sp, #24]
   224b6:	9809      	ldr	r0, [sp, #36]	; 0x24
   224b8:	f002 f892 	bl	245e0 <__ssprint_r>
   224bc:	2800      	cmp	r0, #0
   224be:	d001      	beq.n	224c4 <_svfprintf_r+0x1304>
   224c0:	f7fe ff05 	bl	212ce <_svfprintf_r+0x10e>
   224c4:	68bc      	ldr	r4, [r7, #8]
   224c6:	ae32      	add	r6, sp, #200	; 0xc8
   224c8:	e557      	b.n	21f7a <_svfprintf_r+0xdba>
   224ca:	003a      	movs	r2, r7
   224cc:	9906      	ldr	r1, [sp, #24]
   224ce:	9809      	ldr	r0, [sp, #36]	; 0x24
   224d0:	f002 f886 	bl	245e0 <__ssprint_r>
   224d4:	2800      	cmp	r0, #0
   224d6:	d001      	beq.n	224dc <_svfprintf_r+0x131c>
   224d8:	f7fe fef9 	bl	212ce <_svfprintf_r+0x10e>
   224dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   224de:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   224e0:	68bc      	ldr	r4, [r7, #8]
   224e2:	1a9b      	subs	r3, r3, r2
   224e4:	ae32      	add	r6, sp, #200	; 0xc8
   224e6:	e56a      	b.n	21fbe <_svfprintf_r+0xdfe>
   224e8:	4653      	mov	r3, sl
   224ea:	9307      	str	r3, [sp, #28]
   224ec:	2b06      	cmp	r3, #6
   224ee:	d901      	bls.n	224f4 <_svfprintf_r+0x1334>
   224f0:	2306      	movs	r3, #6
   224f2:	9307      	str	r3, [sp, #28]
   224f4:	9b07      	ldr	r3, [sp, #28]
   224f6:	950f      	str	r5, [sp, #60]	; 0x3c
   224f8:	930e      	str	r3, [sp, #56]	; 0x38
   224fa:	2300      	movs	r3, #0
   224fc:	4698      	mov	r8, r3
   224fe:	469a      	mov	sl, r3
   22500:	9313      	str	r3, [sp, #76]	; 0x4c
   22502:	4b24      	ldr	r3, [pc, #144]	; (22594 <_svfprintf_r+0x13d4>)
   22504:	9408      	str	r4, [sp, #32]
   22506:	9311      	str	r3, [sp, #68]	; 0x44
   22508:	f7fe ff78 	bl	213fc <_svfprintf_r+0x23c>
   2250c:	2320      	movs	r3, #32
   2250e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   22510:	439a      	bics	r2, r3
   22512:	3b1a      	subs	r3, #26
   22514:	920e      	str	r2, [sp, #56]	; 0x38
   22516:	469a      	mov	sl, r3
   22518:	e5f1      	b.n	220fe <_svfprintf_r+0xf3e>
   2251a:	ab23      	add	r3, sp, #140	; 0x8c
   2251c:	931b      	str	r3, [sp, #108]	; 0x6c
   2251e:	9304      	str	r3, [sp, #16]
   22520:	ab20      	add	r3, sp, #128	; 0x80
   22522:	9303      	str	r3, [sp, #12]
   22524:	ab1f      	add	r3, sp, #124	; 0x7c
   22526:	9302      	str	r3, [sp, #8]
   22528:	4653      	mov	r3, sl
   2252a:	9301      	str	r3, [sp, #4]
   2252c:	2303      	movs	r3, #3
   2252e:	464a      	mov	r2, r9
   22530:	9300      	str	r3, [sp, #0]
   22532:	9809      	ldr	r0, [sp, #36]	; 0x24
   22534:	9b07      	ldr	r3, [sp, #28]
   22536:	f000 fa05 	bl	22944 <_dtoa_r>
   2253a:	0003      	movs	r3, r0
   2253c:	4453      	add	r3, sl
   2253e:	9011      	str	r0, [sp, #68]	; 0x44
   22540:	4698      	mov	r8, r3
   22542:	4655      	mov	r5, sl
   22544:	e6e4      	b.n	22310 <_svfprintf_r+0x1150>
   22546:	232d      	movs	r3, #45	; 0x2d
   22548:	aa16      	add	r2, sp, #88	; 0x58
   2254a:	77d3      	strb	r3, [r2, #31]
   2254c:	4698      	mov	r8, r3
   2254e:	f7fe ffdb 	bl	21508 <_svfprintf_r+0x348>
   22552:	2280      	movs	r2, #128	; 0x80
   22554:	0612      	lsls	r2, r2, #24
   22556:	4694      	mov	ip, r2
   22558:	9b16      	ldr	r3, [sp, #88]	; 0x58
   2255a:	4699      	mov	r9, r3
   2255c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2255e:	4463      	add	r3, ip
   22560:	9307      	str	r3, [sp, #28]
   22562:	232d      	movs	r3, #45	; 0x2d
   22564:	9310      	str	r3, [sp, #64]	; 0x40
   22566:	e5d7      	b.n	22118 <_svfprintf_r+0xf58>
   22568:	9a18      	ldr	r2, [sp, #96]	; 0x60
   2256a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2256c:	4694      	mov	ip, r2
   2256e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   22570:	4463      	add	r3, ip
   22572:	930e      	str	r3, [sp, #56]	; 0x38
   22574:	2a00      	cmp	r2, #0
   22576:	dc00      	bgt.n	2257a <_svfprintf_r+0x13ba>
   22578:	e0ce      	b.n	22718 <_svfprintf_r+0x1558>
   2257a:	001a      	movs	r2, r3
   2257c:	43db      	mvns	r3, r3
   2257e:	17db      	asrs	r3, r3, #31
   22580:	401a      	ands	r2, r3
   22582:	2367      	movs	r3, #103	; 0x67
   22584:	9207      	str	r2, [sp, #28]
   22586:	9312      	str	r3, [sp, #72]	; 0x48
   22588:	e624      	b.n	221d4 <_svfprintf_r+0x1014>
   2258a:	46c0      	nop			; (mov r8, r8)
   2258c:	00027078 	.word	0x00027078
   22590:	0002703c 	.word	0x0002703c
   22594:	00027070 	.word	0x00027070
   22598:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2259a:	9313      	str	r3, [sp, #76]	; 0x4c
   2259c:	2b00      	cmp	r3, #0
   2259e:	dc00      	bgt.n	225a2 <_svfprintf_r+0x13e2>
   225a0:	e0d5      	b.n	2274e <_svfprintf_r+0x158e>
   225a2:	4652      	mov	r2, sl
   225a4:	2a00      	cmp	r2, #0
   225a6:	d000      	beq.n	225aa <_svfprintf_r+0x13ea>
   225a8:	e092      	b.n	226d0 <_svfprintf_r+0x1510>
   225aa:	07e2      	lsls	r2, r4, #31
   225ac:	d500      	bpl.n	225b0 <_svfprintf_r+0x13f0>
   225ae:	e08f      	b.n	226d0 <_svfprintf_r+0x1510>
   225b0:	9307      	str	r3, [sp, #28]
   225b2:	930e      	str	r3, [sp, #56]	; 0x38
   225b4:	e60e      	b.n	221d4 <_svfprintf_r+0x1014>
   225b6:	ab16      	add	r3, sp, #88	; 0x58
   225b8:	7fdb      	ldrb	r3, [r3, #31]
   225ba:	950f      	str	r5, [sp, #60]	; 0x3c
   225bc:	4698      	mov	r8, r3
   225be:	4653      	mov	r3, sl
   225c0:	9307      	str	r3, [sp, #28]
   225c2:	930e      	str	r3, [sp, #56]	; 0x38
   225c4:	2300      	movs	r3, #0
   225c6:	9408      	str	r4, [sp, #32]
   225c8:	469a      	mov	sl, r3
   225ca:	9313      	str	r3, [sp, #76]	; 0x4c
   225cc:	f7fe ff10 	bl	213f0 <_svfprintf_r+0x230>
   225d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   225d2:	4698      	mov	r8, r3
   225d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   225d6:	44a8      	add	r8, r5
   225d8:	2b47      	cmp	r3, #71	; 0x47
   225da:	d000      	beq.n	225de <_svfprintf_r+0x141e>
   225dc:	e5c4      	b.n	22168 <_svfprintf_r+0xfa8>
   225de:	07e3      	lsls	r3, r4, #31
   225e0:	d500      	bpl.n	225e4 <_svfprintf_r+0x1424>
   225e2:	e68e      	b.n	22302 <_svfprintf_r+0x1142>
   225e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   225e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   225e8:	1a9b      	subs	r3, r3, r2
   225ea:	9314      	str	r3, [sp, #80]	; 0x50
   225ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   225ee:	2b47      	cmp	r3, #71	; 0x47
   225f0:	d100      	bne.n	225f4 <_svfprintf_r+0x1434>
   225f2:	e6cb      	b.n	2238c <_svfprintf_r+0x11cc>
   225f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   225f6:	9313      	str	r3, [sp, #76]	; 0x4c
   225f8:	e6d2      	b.n	223a0 <_svfprintf_r+0x11e0>
   225fa:	4244      	negs	r4, r0
   225fc:	3010      	adds	r0, #16
   225fe:	db00      	blt.n	22602 <_svfprintf_r+0x1442>
   22600:	e0d0      	b.n	227a4 <_svfprintf_r+0x15e4>
   22602:	486e      	ldr	r0, [pc, #440]	; (227bc <_svfprintf_r+0x15fc>)
   22604:	2610      	movs	r6, #16
   22606:	0005      	movs	r5, r0
   22608:	e003      	b.n	22612 <_svfprintf_r+0x1452>
   2260a:	3208      	adds	r2, #8
   2260c:	3c10      	subs	r4, #16
   2260e:	2c10      	cmp	r4, #16
   22610:	dd38      	ble.n	22684 <_svfprintf_r+0x14c4>
   22612:	3110      	adds	r1, #16
   22614:	3301      	adds	r3, #1
   22616:	6015      	str	r5, [r2, #0]
   22618:	6056      	str	r6, [r2, #4]
   2261a:	60b9      	str	r1, [r7, #8]
   2261c:	607b      	str	r3, [r7, #4]
   2261e:	2b07      	cmp	r3, #7
   22620:	ddf3      	ble.n	2260a <_svfprintf_r+0x144a>
   22622:	003a      	movs	r2, r7
   22624:	9906      	ldr	r1, [sp, #24]
   22626:	9809      	ldr	r0, [sp, #36]	; 0x24
   22628:	f001 ffda 	bl	245e0 <__ssprint_r>
   2262c:	2800      	cmp	r0, #0
   2262e:	d001      	beq.n	22634 <_svfprintf_r+0x1474>
   22630:	f7fe fe4d 	bl	212ce <_svfprintf_r+0x10e>
   22634:	68b9      	ldr	r1, [r7, #8]
   22636:	687b      	ldr	r3, [r7, #4]
   22638:	aa32      	add	r2, sp, #200	; 0xc8
   2263a:	e7e7      	b.n	2260c <_svfprintf_r+0x144c>
   2263c:	003a      	movs	r2, r7
   2263e:	9906      	ldr	r1, [sp, #24]
   22640:	9809      	ldr	r0, [sp, #36]	; 0x24
   22642:	f001 ffcd 	bl	245e0 <__ssprint_r>
   22646:	2800      	cmp	r0, #0
   22648:	d001      	beq.n	2264e <_svfprintf_r+0x148e>
   2264a:	f7fe fe40 	bl	212ce <_svfprintf_r+0x10e>
   2264e:	981f      	ldr	r0, [sp, #124]	; 0x7c
   22650:	68b9      	ldr	r1, [r7, #8]
   22652:	687b      	ldr	r3, [r7, #4]
   22654:	aa32      	add	r2, sp, #200	; 0xc8
   22656:	e600      	b.n	2225a <_svfprintf_r+0x109a>
   22658:	9a18      	ldr	r2, [sp, #96]	; 0x60
   2265a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2265c:	4694      	mov	ip, r2
   2265e:	4463      	add	r3, ip
   22660:	001a      	movs	r2, r3
   22662:	930e      	str	r3, [sp, #56]	; 0x38
   22664:	e78a      	b.n	2257c <_svfprintf_r+0x13bc>
   22666:	212e      	movs	r1, #46	; 0x2e
   22668:	2330      	movs	r3, #48	; 0x30
   2266a:	aa16      	add	r2, sp, #88	; 0x58
   2266c:	1852      	adds	r2, r2, r1
   2266e:	7013      	strb	r3, [r2, #0]
   22670:	002b      	movs	r3, r5
   22672:	aa16      	add	r2, sp, #88	; 0x58
   22674:	3101      	adds	r1, #1
   22676:	3330      	adds	r3, #48	; 0x30
   22678:	1852      	adds	r2, r2, r1
   2267a:	7013      	strb	r3, [r2, #0]
   2267c:	ab22      	add	r3, sp, #136	; 0x88
   2267e:	e6e2      	b.n	22446 <_svfprintf_r+0x1286>
   22680:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   22682:	e585      	b.n	22190 <_svfprintf_r+0xfd0>
   22684:	46a9      	mov	r9, r5
   22686:	4648      	mov	r0, r9
   22688:	1909      	adds	r1, r1, r4
   2268a:	3301      	adds	r3, #1
   2268c:	6010      	str	r0, [r2, #0]
   2268e:	6054      	str	r4, [r2, #4]
   22690:	60b9      	str	r1, [r7, #8]
   22692:	3208      	adds	r2, #8
   22694:	607b      	str	r3, [r7, #4]
   22696:	2b07      	cmp	r3, #7
   22698:	dc00      	bgt.n	2269c <_svfprintf_r+0x14dc>
   2269a:	e5e1      	b.n	22260 <_svfprintf_r+0x10a0>
   2269c:	003a      	movs	r2, r7
   2269e:	9906      	ldr	r1, [sp, #24]
   226a0:	9809      	ldr	r0, [sp, #36]	; 0x24
   226a2:	f001 ff9d 	bl	245e0 <__ssprint_r>
   226a6:	2800      	cmp	r0, #0
   226a8:	d001      	beq.n	226ae <_svfprintf_r+0x14ee>
   226aa:	f7fe fe10 	bl	212ce <_svfprintf_r+0x10e>
   226ae:	68b9      	ldr	r1, [r7, #8]
   226b0:	687b      	ldr	r3, [r7, #4]
   226b2:	aa32      	add	r2, sp, #200	; 0xc8
   226b4:	e5d4      	b.n	22260 <_svfprintf_r+0x10a0>
   226b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   226b8:	2b00      	cmp	r3, #0
   226ba:	db38      	blt.n	2272e <_svfprintf_r+0x156e>
   226bc:	ab16      	add	r3, sp, #88	; 0x58
   226be:	7fdb      	ldrb	r3, [r3, #31]
   226c0:	4698      	mov	r8, r3
   226c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   226c4:	2b47      	cmp	r3, #71	; 0x47
   226c6:	dc2e      	bgt.n	22726 <_svfprintf_r+0x1566>
   226c8:	4b3d      	ldr	r3, [pc, #244]	; (227c0 <_svfprintf_r+0x1600>)
   226ca:	9311      	str	r3, [sp, #68]	; 0x44
   226cc:	f7fe ff23 	bl	21516 <_svfprintf_r+0x356>
   226d0:	9a18      	ldr	r2, [sp, #96]	; 0x60
   226d2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   226d4:	4694      	mov	ip, r2
   226d6:	4463      	add	r3, ip
   226d8:	4453      	add	r3, sl
   226da:	001a      	movs	r2, r3
   226dc:	930e      	str	r3, [sp, #56]	; 0x38
   226de:	43db      	mvns	r3, r3
   226e0:	17db      	asrs	r3, r3, #31
   226e2:	401a      	ands	r2, r3
   226e4:	9207      	str	r2, [sp, #28]
   226e6:	e575      	b.n	221d4 <_svfprintf_r+0x1014>
   226e8:	2301      	movs	r3, #1
   226ea:	4023      	ands	r3, r4
   226ec:	9313      	str	r3, [sp, #76]	; 0x4c
   226ee:	d000      	beq.n	226f2 <_svfprintf_r+0x1532>
   226f0:	e6b4      	b.n	2245c <_svfprintf_r+0x129c>
   226f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   226f4:	43d3      	mvns	r3, r2
   226f6:	17db      	asrs	r3, r3, #31
   226f8:	401a      	ands	r2, r3
   226fa:	9207      	str	r2, [sp, #28]
   226fc:	e56a      	b.n	221d4 <_svfprintf_r+0x1014>
   226fe:	4a2f      	ldr	r2, [pc, #188]	; (227bc <_svfprintf_r+0x15fc>)
   22700:	687b      	ldr	r3, [r7, #4]
   22702:	4691      	mov	r9, r2
   22704:	e42d      	b.n	21f62 <_svfprintf_r+0xda2>
   22706:	2301      	movs	r3, #1
   22708:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2270a:	391b      	subs	r1, #27
   2270c:	1a9d      	subs	r5, r3, r2
   2270e:	aa16      	add	r2, sp, #88	; 0x58
   22710:	332c      	adds	r3, #44	; 0x2c
   22712:	1852      	adds	r2, r2, r1
   22714:	7013      	strb	r3, [r2, #0]
   22716:	e656      	b.n	223c6 <_svfprintf_r+0x1206>
   22718:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2271a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2271c:	1a98      	subs	r0, r3, r2
   2271e:	1c43      	adds	r3, r0, #1
   22720:	001a      	movs	r2, r3
   22722:	930e      	str	r3, [sp, #56]	; 0x38
   22724:	e72a      	b.n	2257c <_svfprintf_r+0x13bc>
   22726:	4b27      	ldr	r3, [pc, #156]	; (227c4 <_svfprintf_r+0x1604>)
   22728:	9311      	str	r3, [sp, #68]	; 0x44
   2272a:	f7fe fef4 	bl	21516 <_svfprintf_r+0x356>
   2272e:	232d      	movs	r3, #45	; 0x2d
   22730:	aa16      	add	r2, sp, #88	; 0x58
   22732:	77d3      	strb	r3, [r2, #31]
   22734:	4698      	mov	r8, r3
   22736:	e7c4      	b.n	226c2 <_svfprintf_r+0x1502>
   22738:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2273a:	1d1a      	adds	r2, r3, #4
   2273c:	681b      	ldr	r3, [r3, #0]
   2273e:	469a      	mov	sl, r3
   22740:	2b00      	cmp	r3, #0
   22742:	db36      	blt.n	227b2 <_svfprintf_r+0x15f2>
   22744:	784b      	ldrb	r3, [r1, #1]
   22746:	920f      	str	r2, [sp, #60]	; 0x3c
   22748:	4659      	mov	r1, fp
   2274a:	f7fe fd9d 	bl	21288 <_svfprintf_r+0xc8>
   2274e:	4653      	mov	r3, sl
   22750:	2b00      	cmp	r3, #0
   22752:	d101      	bne.n	22758 <_svfprintf_r+0x1598>
   22754:	07e3      	lsls	r3, r4, #31
   22756:	d503      	bpl.n	22760 <_svfprintf_r+0x15a0>
   22758:	9b18      	ldr	r3, [sp, #96]	; 0x60
   2275a:	1c58      	adds	r0, r3, #1
   2275c:	0003      	movs	r3, r0
   2275e:	e7bb      	b.n	226d8 <_svfprintf_r+0x1518>
   22760:	2301      	movs	r3, #1
   22762:	e725      	b.n	225b0 <_svfprintf_r+0x13f0>
   22764:	ab16      	add	r3, sp, #88	; 0x58
   22766:	77d8      	strb	r0, [r3, #31]
   22768:	f7fe ff6c 	bl	21644 <_svfprintf_r+0x484>
   2276c:	ab16      	add	r3, sp, #88	; 0x58
   2276e:	77d8      	strb	r0, [r3, #31]
   22770:	f7ff f814 	bl	2179c <_svfprintf_r+0x5dc>
   22774:	230c      	movs	r3, #12
   22776:	9a09      	ldr	r2, [sp, #36]	; 0x24
   22778:	6013      	str	r3, [r2, #0]
   2277a:	3b0d      	subs	r3, #13
   2277c:	930a      	str	r3, [sp, #40]	; 0x28
   2277e:	f7fe fdac 	bl	212da <_svfprintf_r+0x11a>
   22782:	aa16      	add	r2, sp, #88	; 0x58
   22784:	232e      	movs	r3, #46	; 0x2e
   22786:	4694      	mov	ip, r2
   22788:	4463      	add	r3, ip
   2278a:	e65c      	b.n	22446 <_svfprintf_r+0x1286>
   2278c:	ab16      	add	r3, sp, #88	; 0x58
   2278e:	77d8      	strb	r0, [r3, #31]
   22790:	f7fe fe85 	bl	2149e <_svfprintf_r+0x2de>
   22794:	ab16      	add	r3, sp, #88	; 0x58
   22796:	77d8      	strb	r0, [r3, #31]
   22798:	f7fe fddd 	bl	21356 <_svfprintf_r+0x196>
   2279c:	ab16      	add	r3, sp, #88	; 0x58
   2279e:	77d8      	strb	r0, [r3, #31]
   227a0:	f7ff f87d 	bl	2189e <_svfprintf_r+0x6de>
   227a4:	4805      	ldr	r0, [pc, #20]	; (227bc <_svfprintf_r+0x15fc>)
   227a6:	4681      	mov	r9, r0
   227a8:	e76d      	b.n	22686 <_svfprintf_r+0x14c6>
   227aa:	ab16      	add	r3, sp, #88	; 0x58
   227ac:	77d8      	strb	r0, [r3, #31]
   227ae:	f7fe ff79 	bl	216a4 <_svfprintf_r+0x4e4>
   227b2:	2301      	movs	r3, #1
   227b4:	425b      	negs	r3, r3
   227b6:	469a      	mov	sl, r3
   227b8:	e7c4      	b.n	22744 <_svfprintf_r+0x1584>
   227ba:	46c0      	nop			; (mov r8, r8)
   227bc:	0002708c 	.word	0x0002708c
   227c0:	00027040 	.word	0x00027040
   227c4:	00027044 	.word	0x00027044

000227c8 <register_fini>:
   227c8:	4b03      	ldr	r3, [pc, #12]	; (227d8 <register_fini+0x10>)
   227ca:	b510      	push	{r4, lr}
   227cc:	2b00      	cmp	r3, #0
   227ce:	d002      	beq.n	227d6 <register_fini+0xe>
   227d0:	4802      	ldr	r0, [pc, #8]	; (227dc <register_fini+0x14>)
   227d2:	f000 f805 	bl	227e0 <atexit>
   227d6:	bd10      	pop	{r4, pc}
   227d8:	00000000 	.word	0x00000000
   227dc:	000238cd 	.word	0x000238cd

000227e0 <atexit>:
   227e0:	b510      	push	{r4, lr}
   227e2:	0001      	movs	r1, r0
   227e4:	2300      	movs	r3, #0
   227e6:	2200      	movs	r2, #0
   227e8:	2000      	movs	r0, #0
   227ea:	f001 ff89 	bl	24700 <__register_exitproc>
   227ee:	bd10      	pop	{r4, pc}

000227f0 <quorem>:
   227f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   227f2:	4645      	mov	r5, r8
   227f4:	4680      	mov	r8, r0
   227f6:	46de      	mov	lr, fp
   227f8:	4657      	mov	r7, sl
   227fa:	464e      	mov	r6, r9
   227fc:	4642      	mov	r2, r8
   227fe:	b5e0      	push	{r5, r6, r7, lr}
   22800:	690c      	ldr	r4, [r1, #16]
   22802:	6912      	ldr	r2, [r2, #16]
   22804:	b085      	sub	sp, #20
   22806:	000b      	movs	r3, r1
   22808:	9102      	str	r1, [sp, #8]
   2280a:	2000      	movs	r0, #0
   2280c:	4294      	cmp	r4, r2
   2280e:	dd00      	ble.n	22812 <quorem+0x22>
   22810:	e090      	b.n	22934 <quorem+0x144>
   22812:	2214      	movs	r2, #20
   22814:	4694      	mov	ip, r2
   22816:	4463      	add	r3, ip
   22818:	4699      	mov	r9, r3
   2281a:	464a      	mov	r2, r9
   2281c:	3c01      	subs	r4, #1
   2281e:	00a3      	lsls	r3, r4, #2
   22820:	18d6      	adds	r6, r2, r3
   22822:	2214      	movs	r2, #20
   22824:	4442      	add	r2, r8
   22826:	4693      	mov	fp, r2
   22828:	449b      	add	fp, r3
   2282a:	6833      	ldr	r3, [r6, #0]
   2282c:	0015      	movs	r5, r2
   2282e:	1c59      	adds	r1, r3, #1
   22830:	465b      	mov	r3, fp
   22832:	6818      	ldr	r0, [r3, #0]
   22834:	9201      	str	r2, [sp, #4]
   22836:	f7fb fb87 	bl	1df48 <__udivsi3>
   2283a:	1e03      	subs	r3, r0, #0
   2283c:	9000      	str	r0, [sp, #0]
   2283e:	d042      	beq.n	228c6 <quorem+0xd6>
   22840:	0029      	movs	r1, r5
   22842:	2700      	movs	r7, #0
   22844:	464d      	mov	r5, r9
   22846:	2000      	movs	r0, #0
   22848:	46b1      	mov	r9, r6
   2284a:	46a2      	mov	sl, r4
   2284c:	003e      	movs	r6, r7
   2284e:	0004      	movs	r4, r0
   22850:	469c      	mov	ip, r3
   22852:	002f      	movs	r7, r5
   22854:	0008      	movs	r0, r1
   22856:	9503      	str	r5, [sp, #12]
   22858:	4663      	mov	r3, ip
   2285a:	cf04      	ldmia	r7!, {r2}
   2285c:	0415      	lsls	r5, r2, #16
   2285e:	0c2d      	lsrs	r5, r5, #16
   22860:	435d      	muls	r5, r3
   22862:	0c12      	lsrs	r2, r2, #16
   22864:	435a      	muls	r2, r3
   22866:	19ad      	adds	r5, r5, r6
   22868:	0c2b      	lsrs	r3, r5, #16
   2286a:	18d2      	adds	r2, r2, r3
   2286c:	6803      	ldr	r3, [r0, #0]
   2286e:	042d      	lsls	r5, r5, #16
   22870:	0419      	lsls	r1, r3, #16
   22872:	0c09      	lsrs	r1, r1, #16
   22874:	1909      	adds	r1, r1, r4
   22876:	0c16      	lsrs	r6, r2, #16
   22878:	0c2d      	lsrs	r5, r5, #16
   2287a:	0412      	lsls	r2, r2, #16
   2287c:	1b49      	subs	r1, r1, r5
   2287e:	0c12      	lsrs	r2, r2, #16
   22880:	0c1b      	lsrs	r3, r3, #16
   22882:	1a9b      	subs	r3, r3, r2
   22884:	140a      	asrs	r2, r1, #16
   22886:	189b      	adds	r3, r3, r2
   22888:	0409      	lsls	r1, r1, #16
   2288a:	141c      	asrs	r4, r3, #16
   2288c:	0c09      	lsrs	r1, r1, #16
   2288e:	041b      	lsls	r3, r3, #16
   22890:	4319      	orrs	r1, r3
   22892:	c002      	stmia	r0!, {r1}
   22894:	45b9      	cmp	r9, r7
   22896:	d2df      	bcs.n	22858 <quorem+0x68>
   22898:	9b03      	ldr	r3, [sp, #12]
   2289a:	464e      	mov	r6, r9
   2289c:	4699      	mov	r9, r3
   2289e:	465b      	mov	r3, fp
   228a0:	681b      	ldr	r3, [r3, #0]
   228a2:	4654      	mov	r4, sl
   228a4:	2b00      	cmp	r3, #0
   228a6:	d10e      	bne.n	228c6 <quorem+0xd6>
   228a8:	465b      	mov	r3, fp
   228aa:	9a01      	ldr	r2, [sp, #4]
   228ac:	3b04      	subs	r3, #4
   228ae:	429a      	cmp	r2, r3
   228b0:	d304      	bcc.n	228bc <quorem+0xcc>
   228b2:	e006      	b.n	228c2 <quorem+0xd2>
   228b4:	3b04      	subs	r3, #4
   228b6:	3c01      	subs	r4, #1
   228b8:	429a      	cmp	r2, r3
   228ba:	d202      	bcs.n	228c2 <quorem+0xd2>
   228bc:	6819      	ldr	r1, [r3, #0]
   228be:	2900      	cmp	r1, #0
   228c0:	d0f8      	beq.n	228b4 <quorem+0xc4>
   228c2:	4643      	mov	r3, r8
   228c4:	611c      	str	r4, [r3, #16]
   228c6:	9902      	ldr	r1, [sp, #8]
   228c8:	4640      	mov	r0, r8
   228ca:	f001 fd63 	bl	24394 <__mcmp>
   228ce:	2800      	cmp	r0, #0
   228d0:	db2f      	blt.n	22932 <quorem+0x142>
   228d2:	464f      	mov	r7, r9
   228d4:	2000      	movs	r0, #0
   228d6:	9b00      	ldr	r3, [sp, #0]
   228d8:	9d01      	ldr	r5, [sp, #4]
   228da:	3301      	adds	r3, #1
   228dc:	9300      	str	r3, [sp, #0]
   228de:	682b      	ldr	r3, [r5, #0]
   228e0:	cf02      	ldmia	r7!, {r1}
   228e2:	041a      	lsls	r2, r3, #16
   228e4:	0c12      	lsrs	r2, r2, #16
   228e6:	1810      	adds	r0, r2, r0
   228e8:	040a      	lsls	r2, r1, #16
   228ea:	0c12      	lsrs	r2, r2, #16
   228ec:	1a82      	subs	r2, r0, r2
   228ee:	0c09      	lsrs	r1, r1, #16
   228f0:	0c1b      	lsrs	r3, r3, #16
   228f2:	1a5b      	subs	r3, r3, r1
   228f4:	1411      	asrs	r1, r2, #16
   228f6:	185b      	adds	r3, r3, r1
   228f8:	0412      	lsls	r2, r2, #16
   228fa:	1418      	asrs	r0, r3, #16
   228fc:	0c12      	lsrs	r2, r2, #16
   228fe:	041b      	lsls	r3, r3, #16
   22900:	4313      	orrs	r3, r2
   22902:	c508      	stmia	r5!, {r3}
   22904:	42be      	cmp	r6, r7
   22906:	d2ea      	bcs.n	228de <quorem+0xee>
   22908:	9901      	ldr	r1, [sp, #4]
   2290a:	00a3      	lsls	r3, r4, #2
   2290c:	468c      	mov	ip, r1
   2290e:	4463      	add	r3, ip
   22910:	681a      	ldr	r2, [r3, #0]
   22912:	2a00      	cmp	r2, #0
   22914:	d10d      	bne.n	22932 <quorem+0x142>
   22916:	3b04      	subs	r3, #4
   22918:	000a      	movs	r2, r1
   2291a:	4299      	cmp	r1, r3
   2291c:	d304      	bcc.n	22928 <quorem+0x138>
   2291e:	e006      	b.n	2292e <quorem+0x13e>
   22920:	3b04      	subs	r3, #4
   22922:	3c01      	subs	r4, #1
   22924:	429a      	cmp	r2, r3
   22926:	d202      	bcs.n	2292e <quorem+0x13e>
   22928:	6819      	ldr	r1, [r3, #0]
   2292a:	2900      	cmp	r1, #0
   2292c:	d0f8      	beq.n	22920 <quorem+0x130>
   2292e:	4643      	mov	r3, r8
   22930:	611c      	str	r4, [r3, #16]
   22932:	9800      	ldr	r0, [sp, #0]
   22934:	b005      	add	sp, #20
   22936:	bc3c      	pop	{r2, r3, r4, r5}
   22938:	4690      	mov	r8, r2
   2293a:	4699      	mov	r9, r3
   2293c:	46a2      	mov	sl, r4
   2293e:	46ab      	mov	fp, r5
   22940:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22942:	46c0      	nop			; (mov r8, r8)

00022944 <_dtoa_r>:
   22944:	b5f0      	push	{r4, r5, r6, r7, lr}
   22946:	4657      	mov	r7, sl
   22948:	464e      	mov	r6, r9
   2294a:	4645      	mov	r5, r8
   2294c:	46de      	mov	lr, fp
   2294e:	b5e0      	push	{r5, r6, r7, lr}
   22950:	6c01      	ldr	r1, [r0, #64]	; 0x40
   22952:	b099      	sub	sp, #100	; 0x64
   22954:	4682      	mov	sl, r0
   22956:	001d      	movs	r5, r3
   22958:	0016      	movs	r6, r2
   2295a:	001f      	movs	r7, r3
   2295c:	2900      	cmp	r1, #0
   2295e:	d009      	beq.n	22974 <_dtoa_r+0x30>
   22960:	2301      	movs	r3, #1
   22962:	6c42      	ldr	r2, [r0, #68]	; 0x44
   22964:	4093      	lsls	r3, r2
   22966:	604a      	str	r2, [r1, #4]
   22968:	608b      	str	r3, [r1, #8]
   2296a:	f001 fb07 	bl	23f7c <_Bfree>
   2296e:	2300      	movs	r3, #0
   22970:	4652      	mov	r2, sl
   22972:	6413      	str	r3, [r2, #64]	; 0x40
   22974:	46b8      	mov	r8, r7
   22976:	2f00      	cmp	r7, #0
   22978:	db37      	blt.n	229ea <_dtoa_r+0xa6>
   2297a:	2300      	movs	r3, #0
   2297c:	9a25      	ldr	r2, [sp, #148]	; 0x94
   2297e:	6013      	str	r3, [r2, #0]
   22980:	4642      	mov	r2, r8
   22982:	4bd6      	ldr	r3, [pc, #856]	; (22cdc <_dtoa_r+0x398>)
   22984:	401a      	ands	r2, r3
   22986:	429a      	cmp	r2, r3
   22988:	d018      	beq.n	229bc <_dtoa_r+0x78>
   2298a:	2200      	movs	r2, #0
   2298c:	2300      	movs	r3, #0
   2298e:	0030      	movs	r0, r6
   22990:	0039      	movs	r1, r7
   22992:	f7fb fc5f 	bl	1e254 <__aeabi_dcmpeq>
   22996:	2800      	cmp	r0, #0
   22998:	d02f      	beq.n	229fa <_dtoa_r+0xb6>
   2299a:	2301      	movs	r3, #1
   2299c:	9a24      	ldr	r2, [sp, #144]	; 0x90
   2299e:	6013      	str	r3, [r2, #0]
   229a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   229a2:	2b00      	cmp	r3, #0
   229a4:	d100      	bne.n	229a8 <_dtoa_r+0x64>
   229a6:	e22a      	b.n	22dfe <_dtoa_r+0x4ba>
   229a8:	48cd      	ldr	r0, [pc, #820]	; (22ce0 <_dtoa_r+0x39c>)
   229aa:	6018      	str	r0, [r3, #0]
   229ac:	3801      	subs	r0, #1
   229ae:	b019      	add	sp, #100	; 0x64
   229b0:	bc3c      	pop	{r2, r3, r4, r5}
   229b2:	4690      	mov	r8, r2
   229b4:	4699      	mov	r9, r3
   229b6:	46a2      	mov	sl, r4
   229b8:	46ab      	mov	fp, r5
   229ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   229bc:	4bc9      	ldr	r3, [pc, #804]	; (22ce4 <_dtoa_r+0x3a0>)
   229be:	9a24      	ldr	r2, [sp, #144]	; 0x90
   229c0:	6013      	str	r3, [r2, #0]
   229c2:	2e00      	cmp	r6, #0
   229c4:	d10b      	bne.n	229de <_dtoa_r+0x9a>
   229c6:	4643      	mov	r3, r8
   229c8:	0318      	lsls	r0, r3, #12
   229ca:	d108      	bne.n	229de <_dtoa_r+0x9a>
   229cc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   229ce:	48c6      	ldr	r0, [pc, #792]	; (22ce8 <_dtoa_r+0x3a4>)
   229d0:	2b00      	cmp	r3, #0
   229d2:	d0ec      	beq.n	229ae <_dtoa_r+0x6a>
   229d4:	0003      	movs	r3, r0
   229d6:	3308      	adds	r3, #8
   229d8:	9a26      	ldr	r2, [sp, #152]	; 0x98
   229da:	6013      	str	r3, [r2, #0]
   229dc:	e7e7      	b.n	229ae <_dtoa_r+0x6a>
   229de:	9b26      	ldr	r3, [sp, #152]	; 0x98
   229e0:	48c2      	ldr	r0, [pc, #776]	; (22cec <_dtoa_r+0x3a8>)
   229e2:	2b00      	cmp	r3, #0
   229e4:	d0e3      	beq.n	229ae <_dtoa_r+0x6a>
   229e6:	1cc3      	adds	r3, r0, #3
   229e8:	e7f6      	b.n	229d8 <_dtoa_r+0x94>
   229ea:	2301      	movs	r3, #1
   229ec:	9a25      	ldr	r2, [sp, #148]	; 0x94
   229ee:	0068      	lsls	r0, r5, #1
   229f0:	6013      	str	r3, [r2, #0]
   229f2:	0843      	lsrs	r3, r0, #1
   229f4:	4698      	mov	r8, r3
   229f6:	001f      	movs	r7, r3
   229f8:	e7c2      	b.n	22980 <_dtoa_r+0x3c>
   229fa:	ab16      	add	r3, sp, #88	; 0x58
   229fc:	9301      	str	r3, [sp, #4]
   229fe:	ab17      	add	r3, sp, #92	; 0x5c
   22a00:	9300      	str	r3, [sp, #0]
   22a02:	0032      	movs	r2, r6
   22a04:	003b      	movs	r3, r7
   22a06:	4650      	mov	r0, sl
   22a08:	f001 fd7a 	bl	24500 <__d2b>
   22a0c:	4643      	mov	r3, r8
   22a0e:	4683      	mov	fp, r0
   22a10:	0d1a      	lsrs	r2, r3, #20
   22a12:	d100      	bne.n	22a16 <_dtoa_r+0xd2>
   22a14:	e1d6      	b.n	22dc4 <_dtoa_r+0x480>
   22a16:	033b      	lsls	r3, r7, #12
   22a18:	4cb5      	ldr	r4, [pc, #724]	; (22cf0 <_dtoa_r+0x3ac>)
   22a1a:	0b1b      	lsrs	r3, r3, #12
   22a1c:	431c      	orrs	r4, r3
   22a1e:	4bb5      	ldr	r3, [pc, #724]	; (22cf4 <_dtoa_r+0x3b0>)
   22a20:	0030      	movs	r0, r6
   22a22:	4698      	mov	r8, r3
   22a24:	9b16      	ldr	r3, [sp, #88]	; 0x58
   22a26:	0021      	movs	r1, r4
   22a28:	4699      	mov	r9, r3
   22a2a:	2300      	movs	r3, #0
   22a2c:	4490      	add	r8, r2
   22a2e:	930f      	str	r3, [sp, #60]	; 0x3c
   22a30:	2200      	movs	r2, #0
   22a32:	4bb1      	ldr	r3, [pc, #708]	; (22cf8 <_dtoa_r+0x3b4>)
   22a34:	f7fd fdcc 	bl	205d0 <__aeabi_dsub>
   22a38:	4ab0      	ldr	r2, [pc, #704]	; (22cfc <_dtoa_r+0x3b8>)
   22a3a:	4bb1      	ldr	r3, [pc, #708]	; (22d00 <_dtoa_r+0x3bc>)
   22a3c:	f7fd fb48 	bl	200d0 <__aeabi_dmul>
   22a40:	4ab0      	ldr	r2, [pc, #704]	; (22d04 <_dtoa_r+0x3c0>)
   22a42:	4bb1      	ldr	r3, [pc, #708]	; (22d08 <_dtoa_r+0x3c4>)
   22a44:	f7fc fc00 	bl	1f248 <__aeabi_dadd>
   22a48:	0004      	movs	r4, r0
   22a4a:	4640      	mov	r0, r8
   22a4c:	000d      	movs	r5, r1
   22a4e:	f7fe f929 	bl	20ca4 <__aeabi_i2d>
   22a52:	4aae      	ldr	r2, [pc, #696]	; (22d0c <_dtoa_r+0x3c8>)
   22a54:	4bae      	ldr	r3, [pc, #696]	; (22d10 <_dtoa_r+0x3cc>)
   22a56:	f7fd fb3b 	bl	200d0 <__aeabi_dmul>
   22a5a:	0002      	movs	r2, r0
   22a5c:	000b      	movs	r3, r1
   22a5e:	0020      	movs	r0, r4
   22a60:	0029      	movs	r1, r5
   22a62:	f7fc fbf1 	bl	1f248 <__aeabi_dadd>
   22a66:	0004      	movs	r4, r0
   22a68:	000d      	movs	r5, r1
   22a6a:	f7fe f8e7 	bl	20c3c <__aeabi_d2iz>
   22a6e:	2200      	movs	r2, #0
   22a70:	9003      	str	r0, [sp, #12]
   22a72:	2300      	movs	r3, #0
   22a74:	0020      	movs	r0, r4
   22a76:	0029      	movs	r1, r5
   22a78:	f7fb fbf2 	bl	1e260 <__aeabi_dcmplt>
   22a7c:	2800      	cmp	r0, #0
   22a7e:	d000      	beq.n	22a82 <_dtoa_r+0x13e>
   22a80:	e2b1      	b.n	22fe6 <_dtoa_r+0x6a2>
   22a82:	2301      	movs	r3, #1
   22a84:	9c03      	ldr	r4, [sp, #12]
   22a86:	930c      	str	r3, [sp, #48]	; 0x30
   22a88:	2c16      	cmp	r4, #22
   22a8a:	d810      	bhi.n	22aae <_dtoa_r+0x16a>
   22a8c:	49a1      	ldr	r1, [pc, #644]	; (22d14 <_dtoa_r+0x3d0>)
   22a8e:	00e3      	lsls	r3, r4, #3
   22a90:	18c9      	adds	r1, r1, r3
   22a92:	0032      	movs	r2, r6
   22a94:	6808      	ldr	r0, [r1, #0]
   22a96:	6849      	ldr	r1, [r1, #4]
   22a98:	003b      	movs	r3, r7
   22a9a:	f7fb fbf5 	bl	1e288 <__aeabi_dcmpgt>
   22a9e:	2800      	cmp	r0, #0
   22aa0:	d100      	bne.n	22aa4 <_dtoa_r+0x160>
   22aa2:	e31d      	b.n	230e0 <_dtoa_r+0x79c>
   22aa4:	0023      	movs	r3, r4
   22aa6:	3b01      	subs	r3, #1
   22aa8:	9303      	str	r3, [sp, #12]
   22aaa:	2300      	movs	r3, #0
   22aac:	930c      	str	r3, [sp, #48]	; 0x30
   22aae:	464b      	mov	r3, r9
   22ab0:	4642      	mov	r2, r8
   22ab2:	1a9a      	subs	r2, r3, r2
   22ab4:	2300      	movs	r3, #0
   22ab6:	9306      	str	r3, [sp, #24]
   22ab8:	0013      	movs	r3, r2
   22aba:	3b01      	subs	r3, #1
   22abc:	9304      	str	r3, [sp, #16]
   22abe:	d500      	bpl.n	22ac2 <_dtoa_r+0x17e>
   22ac0:	e2a1      	b.n	23006 <_dtoa_r+0x6c2>
   22ac2:	9b03      	ldr	r3, [sp, #12]
   22ac4:	2b00      	cmp	r3, #0
   22ac6:	da00      	bge.n	22aca <_dtoa_r+0x186>
   22ac8:	e284      	b.n	22fd4 <_dtoa_r+0x690>
   22aca:	469c      	mov	ip, r3
   22acc:	930d      	str	r3, [sp, #52]	; 0x34
   22ace:	2300      	movs	r3, #0
   22ad0:	9a04      	ldr	r2, [sp, #16]
   22ad2:	4699      	mov	r9, r3
   22ad4:	0011      	movs	r1, r2
   22ad6:	4461      	add	r1, ip
   22ad8:	9104      	str	r1, [sp, #16]
   22ada:	9b22      	ldr	r3, [sp, #136]	; 0x88
   22adc:	2b09      	cmp	r3, #9
   22ade:	d900      	bls.n	22ae2 <_dtoa_r+0x19e>
   22ae0:	e18f      	b.n	22e02 <_dtoa_r+0x4be>
   22ae2:	2401      	movs	r4, #1
   22ae4:	2b05      	cmp	r3, #5
   22ae6:	dd02      	ble.n	22aee <_dtoa_r+0x1aa>
   22ae8:	2400      	movs	r4, #0
   22aea:	3b04      	subs	r3, #4
   22aec:	9322      	str	r3, [sp, #136]	; 0x88
   22aee:	9b22      	ldr	r3, [sp, #136]	; 0x88
   22af0:	2b03      	cmp	r3, #3
   22af2:	d101      	bne.n	22af8 <_dtoa_r+0x1b4>
   22af4:	f000 fcce 	bl	23494 <_dtoa_r+0xb50>
   22af8:	dc01      	bgt.n	22afe <_dtoa_r+0x1ba>
   22afa:	f000 fc92 	bl	23422 <_dtoa_r+0xade>
   22afe:	9b22      	ldr	r3, [sp, #136]	; 0x88
   22b00:	2b04      	cmp	r3, #4
   22b02:	d101      	bne.n	22b08 <_dtoa_r+0x1c4>
   22b04:	f000 fc40 	bl	23388 <_dtoa_r+0xa44>
   22b08:	2301      	movs	r3, #1
   22b0a:	930b      	str	r3, [sp, #44]	; 0x2c
   22b0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   22b0e:	2b05      	cmp	r3, #5
   22b10:	d001      	beq.n	22b16 <_dtoa_r+0x1d2>
   22b12:	f000 fc8b 	bl	2342c <_dtoa_r+0xae8>
   22b16:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   22b18:	9b03      	ldr	r3, [sp, #12]
   22b1a:	4694      	mov	ip, r2
   22b1c:	4463      	add	r3, ip
   22b1e:	930e      	str	r3, [sp, #56]	; 0x38
   22b20:	3301      	adds	r3, #1
   22b22:	9307      	str	r3, [sp, #28]
   22b24:	1e1d      	subs	r5, r3, #0
   22b26:	dc01      	bgt.n	22b2c <_dtoa_r+0x1e8>
   22b28:	f000 fd49 	bl	235be <_dtoa_r+0xc7a>
   22b2c:	9b07      	ldr	r3, [sp, #28]
   22b2e:	4698      	mov	r8, r3
   22b30:	2300      	movs	r3, #0
   22b32:	4652      	mov	r2, sl
   22b34:	2100      	movs	r1, #0
   22b36:	6453      	str	r3, [r2, #68]	; 0x44
   22b38:	2d17      	cmp	r5, #23
   22b3a:	d90a      	bls.n	22b52 <_dtoa_r+0x20e>
   22b3c:	2201      	movs	r2, #1
   22b3e:	3304      	adds	r3, #4
   22b40:	005b      	lsls	r3, r3, #1
   22b42:	0018      	movs	r0, r3
   22b44:	3014      	adds	r0, #20
   22b46:	0011      	movs	r1, r2
   22b48:	3201      	adds	r2, #1
   22b4a:	4285      	cmp	r5, r0
   22b4c:	d2f8      	bcs.n	22b40 <_dtoa_r+0x1fc>
   22b4e:	4653      	mov	r3, sl
   22b50:	6459      	str	r1, [r3, #68]	; 0x44
   22b52:	4650      	mov	r0, sl
   22b54:	f001 f9ea 	bl	23f2c <_Balloc>
   22b58:	4653      	mov	r3, sl
   22b5a:	6418      	str	r0, [r3, #64]	; 0x40
   22b5c:	4643      	mov	r3, r8
   22b5e:	900a      	str	r0, [sp, #40]	; 0x28
   22b60:	2b0e      	cmp	r3, #14
   22b62:	d900      	bls.n	22b66 <_dtoa_r+0x222>
   22b64:	e161      	b.n	22e2a <_dtoa_r+0x4e6>
   22b66:	2c00      	cmp	r4, #0
   22b68:	d100      	bne.n	22b6c <_dtoa_r+0x228>
   22b6a:	e15e      	b.n	22e2a <_dtoa_r+0x4e6>
   22b6c:	9610      	str	r6, [sp, #64]	; 0x40
   22b6e:	9711      	str	r7, [sp, #68]	; 0x44
   22b70:	9e03      	ldr	r6, [sp, #12]
   22b72:	2e00      	cmp	r6, #0
   22b74:	dc01      	bgt.n	22b7a <_dtoa_r+0x236>
   22b76:	f000 fd25 	bl	235c4 <_dtoa_r+0xc80>
   22b7a:	0032      	movs	r2, r6
   22b7c:	210f      	movs	r1, #15
   22b7e:	4b65      	ldr	r3, [pc, #404]	; (22d14 <_dtoa_r+0x3d0>)
   22b80:	400a      	ands	r2, r1
   22b82:	00d2      	lsls	r2, r2, #3
   22b84:	189b      	adds	r3, r3, r2
   22b86:	1136      	asrs	r6, r6, #4
   22b88:	681c      	ldr	r4, [r3, #0]
   22b8a:	685d      	ldr	r5, [r3, #4]
   22b8c:	06f3      	lsls	r3, r6, #27
   22b8e:	d401      	bmi.n	22b94 <_dtoa_r+0x250>
   22b90:	f000 fcca 	bl	23528 <_dtoa_r+0xbe4>
   22b94:	4b60      	ldr	r3, [pc, #384]	; (22d18 <_dtoa_r+0x3d4>)
   22b96:	400e      	ands	r6, r1
   22b98:	6a1a      	ldr	r2, [r3, #32]
   22b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   22b9c:	9810      	ldr	r0, [sp, #64]	; 0x40
   22b9e:	9911      	ldr	r1, [sp, #68]	; 0x44
   22ba0:	f7fc fe62 	bl	1f868 <__aeabi_ddiv>
   22ba4:	2303      	movs	r3, #3
   22ba6:	4698      	mov	r8, r3
   22ba8:	9008      	str	r0, [sp, #32]
   22baa:	9109      	str	r1, [sp, #36]	; 0x24
   22bac:	2e00      	cmp	r6, #0
   22bae:	d011      	beq.n	22bd4 <_dtoa_r+0x290>
   22bb0:	4f59      	ldr	r7, [pc, #356]	; (22d18 <_dtoa_r+0x3d4>)
   22bb2:	2301      	movs	r3, #1
   22bb4:	4233      	tst	r3, r6
   22bb6:	d009      	beq.n	22bcc <_dtoa_r+0x288>
   22bb8:	469c      	mov	ip, r3
   22bba:	683a      	ldr	r2, [r7, #0]
   22bbc:	687b      	ldr	r3, [r7, #4]
   22bbe:	0020      	movs	r0, r4
   22bc0:	0029      	movs	r1, r5
   22bc2:	44e0      	add	r8, ip
   22bc4:	f7fd fa84 	bl	200d0 <__aeabi_dmul>
   22bc8:	0004      	movs	r4, r0
   22bca:	000d      	movs	r5, r1
   22bcc:	1076      	asrs	r6, r6, #1
   22bce:	3708      	adds	r7, #8
   22bd0:	2e00      	cmp	r6, #0
   22bd2:	d1ee      	bne.n	22bb2 <_dtoa_r+0x26e>
   22bd4:	0022      	movs	r2, r4
   22bd6:	9808      	ldr	r0, [sp, #32]
   22bd8:	9909      	ldr	r1, [sp, #36]	; 0x24
   22bda:	002b      	movs	r3, r5
   22bdc:	f7fc fe44 	bl	1f868 <__aeabi_ddiv>
   22be0:	0006      	movs	r6, r0
   22be2:	000f      	movs	r7, r1
   22be4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   22be6:	2b00      	cmp	r3, #0
   22be8:	d009      	beq.n	22bfe <_dtoa_r+0x2ba>
   22bea:	2200      	movs	r2, #0
   22bec:	4b40      	ldr	r3, [pc, #256]	; (22cf0 <_dtoa_r+0x3ac>)
   22bee:	0030      	movs	r0, r6
   22bf0:	0039      	movs	r1, r7
   22bf2:	f7fb fb35 	bl	1e260 <__aeabi_dcmplt>
   22bf6:	2800      	cmp	r0, #0
   22bf8:	d001      	beq.n	22bfe <_dtoa_r+0x2ba>
   22bfa:	f000 fdc2 	bl	23782 <_dtoa_r+0xe3e>
   22bfe:	4640      	mov	r0, r8
   22c00:	f7fe f850 	bl	20ca4 <__aeabi_i2d>
   22c04:	0032      	movs	r2, r6
   22c06:	003b      	movs	r3, r7
   22c08:	f7fd fa62 	bl	200d0 <__aeabi_dmul>
   22c0c:	2200      	movs	r2, #0
   22c0e:	4b43      	ldr	r3, [pc, #268]	; (22d1c <_dtoa_r+0x3d8>)
   22c10:	f7fc fb1a 	bl	1f248 <__aeabi_dadd>
   22c14:	4a42      	ldr	r2, [pc, #264]	; (22d20 <_dtoa_r+0x3dc>)
   22c16:	000b      	movs	r3, r1
   22c18:	4694      	mov	ip, r2
   22c1a:	4463      	add	r3, ip
   22c1c:	9008      	str	r0, [sp, #32]
   22c1e:	9109      	str	r1, [sp, #36]	; 0x24
   22c20:	9309      	str	r3, [sp, #36]	; 0x24
   22c22:	9b07      	ldr	r3, [sp, #28]
   22c24:	2b00      	cmp	r3, #0
   22c26:	d101      	bne.n	22c2c <_dtoa_r+0x2e8>
   22c28:	f000 fc50 	bl	234cc <_dtoa_r+0xb88>
   22c2c:	9b03      	ldr	r3, [sp, #12]
   22c2e:	9313      	str	r3, [sp, #76]	; 0x4c
   22c30:	9b07      	ldr	r3, [sp, #28]
   22c32:	9312      	str	r3, [sp, #72]	; 0x48
   22c34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   22c36:	2b00      	cmp	r3, #0
   22c38:	d101      	bne.n	22c3e <_dtoa_r+0x2fa>
   22c3a:	f000 fd1d 	bl	23678 <_dtoa_r+0xd34>
   22c3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   22c40:	2000      	movs	r0, #0
   22c42:	1e5a      	subs	r2, r3, #1
   22c44:	4b33      	ldr	r3, [pc, #204]	; (22d14 <_dtoa_r+0x3d0>)
   22c46:	00d2      	lsls	r2, r2, #3
   22c48:	189b      	adds	r3, r3, r2
   22c4a:	681a      	ldr	r2, [r3, #0]
   22c4c:	685b      	ldr	r3, [r3, #4]
   22c4e:	4935      	ldr	r1, [pc, #212]	; (22d24 <_dtoa_r+0x3e0>)
   22c50:	f7fc fe0a 	bl	1f868 <__aeabi_ddiv>
   22c54:	9a08      	ldr	r2, [sp, #32]
   22c56:	9b09      	ldr	r3, [sp, #36]	; 0x24
   22c58:	f7fd fcba 	bl	205d0 <__aeabi_dsub>
   22c5c:	9008      	str	r0, [sp, #32]
   22c5e:	9109      	str	r1, [sp, #36]	; 0x24
   22c60:	0039      	movs	r1, r7
   22c62:	0030      	movs	r0, r6
   22c64:	f7fd ffea 	bl	20c3c <__aeabi_d2iz>
   22c68:	0004      	movs	r4, r0
   22c6a:	f7fe f81b 	bl	20ca4 <__aeabi_i2d>
   22c6e:	0002      	movs	r2, r0
   22c70:	000b      	movs	r3, r1
   22c72:	0030      	movs	r0, r6
   22c74:	0039      	movs	r1, r7
   22c76:	f7fd fcab 	bl	205d0 <__aeabi_dsub>
   22c7a:	0005      	movs	r5, r0
   22c7c:	000e      	movs	r6, r1
   22c7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   22c80:	3430      	adds	r4, #48	; 0x30
   22c82:	1c51      	adds	r1, r2, #1
   22c84:	b2e7      	uxtb	r7, r4
   22c86:	9114      	str	r1, [sp, #80]	; 0x50
   22c88:	7017      	strb	r7, [r2, #0]
   22c8a:	0033      	movs	r3, r6
   22c8c:	9808      	ldr	r0, [sp, #32]
   22c8e:	9909      	ldr	r1, [sp, #36]	; 0x24
   22c90:	002a      	movs	r2, r5
   22c92:	f7fb faf9 	bl	1e288 <__aeabi_dcmpgt>
   22c96:	2800      	cmp	r0, #0
   22c98:	d001      	beq.n	22c9e <_dtoa_r+0x35a>
   22c9a:	f000 fdfe 	bl	2389a <_dtoa_r+0xf56>
   22c9e:	002a      	movs	r2, r5
   22ca0:	0033      	movs	r3, r6
   22ca2:	2000      	movs	r0, #0
   22ca4:	4912      	ldr	r1, [pc, #72]	; (22cf0 <_dtoa_r+0x3ac>)
   22ca6:	f7fd fc93 	bl	205d0 <__aeabi_dsub>
   22caa:	0002      	movs	r2, r0
   22cac:	000b      	movs	r3, r1
   22cae:	9808      	ldr	r0, [sp, #32]
   22cb0:	9909      	ldr	r1, [sp, #36]	; 0x24
   22cb2:	f7fb fae9 	bl	1e288 <__aeabi_dcmpgt>
   22cb6:	2800      	cmp	r0, #0
   22cb8:	d001      	beq.n	22cbe <_dtoa_r+0x37a>
   22cba:	f000 fde7 	bl	2388c <_dtoa_r+0xf48>
   22cbe:	9b12      	ldr	r3, [sp, #72]	; 0x48
   22cc0:	2b01      	cmp	r3, #1
   22cc2:	d101      	bne.n	22cc8 <_dtoa_r+0x384>
   22cc4:	f000 fc78 	bl	235b8 <_dtoa_r+0xc74>
   22cc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   22cca:	9b12      	ldr	r3, [sp, #72]	; 0x48
   22ccc:	4694      	mov	ip, r2
   22cce:	4463      	add	r3, ip
   22cd0:	4698      	mov	r8, r3
   22cd2:	464b      	mov	r3, r9
   22cd4:	9312      	str	r3, [sp, #72]	; 0x48
   22cd6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   22cd8:	4699      	mov	r9, r3
   22cda:	e038      	b.n	22d4e <_dtoa_r+0x40a>
   22cdc:	7ff00000 	.word	0x7ff00000
   22ce0:	00027079 	.word	0x00027079
   22ce4:	0000270f 	.word	0x0000270f
   22ce8:	0002709c 	.word	0x0002709c
   22cec:	000270a8 	.word	0x000270a8
   22cf0:	3ff00000 	.word	0x3ff00000
   22cf4:	fffffc01 	.word	0xfffffc01
   22cf8:	3ff80000 	.word	0x3ff80000
   22cfc:	636f4361 	.word	0x636f4361
   22d00:	3fd287a7 	.word	0x3fd287a7
   22d04:	8b60c8b3 	.word	0x8b60c8b3
   22d08:	3fc68a28 	.word	0x3fc68a28
   22d0c:	509f79fb 	.word	0x509f79fb
   22d10:	3fd34413 	.word	0x3fd34413
   22d14:	000270d8 	.word	0x000270d8
   22d18:	000270b0 	.word	0x000270b0
   22d1c:	401c0000 	.word	0x401c0000
   22d20:	fcc00000 	.word	0xfcc00000
   22d24:	3fe00000 	.word	0x3fe00000
   22d28:	002a      	movs	r2, r5
   22d2a:	0033      	movs	r3, r6
   22d2c:	2000      	movs	r0, #0
   22d2e:	49b9      	ldr	r1, [pc, #740]	; (23014 <_dtoa_r+0x6d0>)
   22d30:	f7fd fc4e 	bl	205d0 <__aeabi_dsub>
   22d34:	9a08      	ldr	r2, [sp, #32]
   22d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
   22d38:	f7fb fa92 	bl	1e260 <__aeabi_dcmplt>
   22d3c:	2800      	cmp	r0, #0
   22d3e:	d001      	beq.n	22d44 <_dtoa_r+0x400>
   22d40:	f000 fd74 	bl	2382c <_dtoa_r+0xee8>
   22d44:	46a1      	mov	r9, r4
   22d46:	4544      	cmp	r4, r8
   22d48:	d101      	bne.n	22d4e <_dtoa_r+0x40a>
   22d4a:	f000 fc33 	bl	235b4 <_dtoa_r+0xc70>
   22d4e:	9808      	ldr	r0, [sp, #32]
   22d50:	9909      	ldr	r1, [sp, #36]	; 0x24
   22d52:	2200      	movs	r2, #0
   22d54:	4bb0      	ldr	r3, [pc, #704]	; (23018 <_dtoa_r+0x6d4>)
   22d56:	f7fd f9bb 	bl	200d0 <__aeabi_dmul>
   22d5a:	2200      	movs	r2, #0
   22d5c:	4bae      	ldr	r3, [pc, #696]	; (23018 <_dtoa_r+0x6d4>)
   22d5e:	9008      	str	r0, [sp, #32]
   22d60:	9109      	str	r1, [sp, #36]	; 0x24
   22d62:	0028      	movs	r0, r5
   22d64:	0031      	movs	r1, r6
   22d66:	f7fd f9b3 	bl	200d0 <__aeabi_dmul>
   22d6a:	000d      	movs	r5, r1
   22d6c:	0004      	movs	r4, r0
   22d6e:	f7fd ff65 	bl	20c3c <__aeabi_d2iz>
   22d72:	0007      	movs	r7, r0
   22d74:	f7fd ff96 	bl	20ca4 <__aeabi_i2d>
   22d78:	0002      	movs	r2, r0
   22d7a:	000b      	movs	r3, r1
   22d7c:	0020      	movs	r0, r4
   22d7e:	0029      	movs	r1, r5
   22d80:	f7fd fc26 	bl	205d0 <__aeabi_dsub>
   22d84:	464b      	mov	r3, r9
   22d86:	3730      	adds	r7, #48	; 0x30
   22d88:	b2ff      	uxtb	r7, r7
   22d8a:	1c5c      	adds	r4, r3, #1
   22d8c:	701f      	strb	r7, [r3, #0]
   22d8e:	9a08      	ldr	r2, [sp, #32]
   22d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
   22d92:	0005      	movs	r5, r0
   22d94:	000e      	movs	r6, r1
   22d96:	f7fb fa63 	bl	1e260 <__aeabi_dcmplt>
   22d9a:	2800      	cmp	r0, #0
   22d9c:	d0c4      	beq.n	22d28 <_dtoa_r+0x3e4>
   22d9e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   22da0:	9303      	str	r3, [sp, #12]
   22da2:	4659      	mov	r1, fp
   22da4:	4650      	mov	r0, sl
   22da6:	f001 f8e9 	bl	23f7c <_Bfree>
   22daa:	2300      	movs	r3, #0
   22dac:	7023      	strb	r3, [r4, #0]
   22dae:	9b03      	ldr	r3, [sp, #12]
   22db0:	9a24      	ldr	r2, [sp, #144]	; 0x90
   22db2:	3301      	adds	r3, #1
   22db4:	6013      	str	r3, [r2, #0]
   22db6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   22db8:	2b00      	cmp	r3, #0
   22dba:	d100      	bne.n	22dbe <_dtoa_r+0x47a>
   22dbc:	e3a8      	b.n	23510 <_dtoa_r+0xbcc>
   22dbe:	601c      	str	r4, [r3, #0]
   22dc0:	980a      	ldr	r0, [sp, #40]	; 0x28
   22dc2:	e5f4      	b.n	229ae <_dtoa_r+0x6a>
   22dc4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   22dc6:	4699      	mov	r9, r3
   22dc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   22dca:	444b      	add	r3, r9
   22dcc:	001c      	movs	r4, r3
   22dce:	4b93      	ldr	r3, [pc, #588]	; (2301c <_dtoa_r+0x6d8>)
   22dd0:	18e3      	adds	r3, r4, r3
   22dd2:	2b20      	cmp	r3, #32
   22dd4:	dc00      	bgt.n	22dd8 <_dtoa_r+0x494>
   22dd6:	e17e      	b.n	230d6 <_dtoa_r+0x792>
   22dd8:	0031      	movs	r1, r6
   22dda:	4a91      	ldr	r2, [pc, #580]	; (23020 <_dtoa_r+0x6dc>)
   22ddc:	4640      	mov	r0, r8
   22dde:	18a2      	adds	r2, r4, r2
   22de0:	40d1      	lsrs	r1, r2
   22de2:	000a      	movs	r2, r1
   22de4:	2140      	movs	r1, #64	; 0x40
   22de6:	1acb      	subs	r3, r1, r3
   22de8:	4098      	lsls	r0, r3
   22dea:	4310      	orrs	r0, r2
   22dec:	f7fd ff9c 	bl	20d28 <__aeabi_ui2d>
   22df0:	1e63      	subs	r3, r4, #1
   22df2:	4698      	mov	r8, r3
   22df4:	2301      	movs	r3, #1
   22df6:	4d8b      	ldr	r5, [pc, #556]	; (23024 <_dtoa_r+0x6e0>)
   22df8:	930f      	str	r3, [sp, #60]	; 0x3c
   22dfa:	1949      	adds	r1, r1, r5
   22dfc:	e618      	b.n	22a30 <_dtoa_r+0xec>
   22dfe:	488a      	ldr	r0, [pc, #552]	; (23028 <_dtoa_r+0x6e4>)
   22e00:	e5d5      	b.n	229ae <_dtoa_r+0x6a>
   22e02:	2300      	movs	r3, #0
   22e04:	4652      	mov	r2, sl
   22e06:	2100      	movs	r1, #0
   22e08:	6453      	str	r3, [r2, #68]	; 0x44
   22e0a:	4650      	mov	r0, sl
   22e0c:	f001 f88e 	bl	23f2c <_Balloc>
   22e10:	4653      	mov	r3, sl
   22e12:	6418      	str	r0, [r3, #64]	; 0x40
   22e14:	2301      	movs	r3, #1
   22e16:	425b      	negs	r3, r3
   22e18:	9307      	str	r3, [sp, #28]
   22e1a:	930e      	str	r3, [sp, #56]	; 0x38
   22e1c:	3302      	adds	r3, #2
   22e1e:	2200      	movs	r2, #0
   22e20:	930b      	str	r3, [sp, #44]	; 0x2c
   22e22:	2300      	movs	r3, #0
   22e24:	900a      	str	r0, [sp, #40]	; 0x28
   22e26:	9223      	str	r2, [sp, #140]	; 0x8c
   22e28:	9322      	str	r3, [sp, #136]	; 0x88
   22e2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   22e2c:	2b00      	cmp	r3, #0
   22e2e:	da00      	bge.n	22e32 <_dtoa_r+0x4ee>
   22e30:	e0ab      	b.n	22f8a <_dtoa_r+0x646>
   22e32:	9a03      	ldr	r2, [sp, #12]
   22e34:	2a0e      	cmp	r2, #14
   22e36:	dd00      	ble.n	22e3a <_dtoa_r+0x4f6>
   22e38:	e0a7      	b.n	22f8a <_dtoa_r+0x646>
   22e3a:	4b7c      	ldr	r3, [pc, #496]	; (2302c <_dtoa_r+0x6e8>)
   22e3c:	00d2      	lsls	r2, r2, #3
   22e3e:	189b      	adds	r3, r3, r2
   22e40:	685c      	ldr	r4, [r3, #4]
   22e42:	681b      	ldr	r3, [r3, #0]
   22e44:	9304      	str	r3, [sp, #16]
   22e46:	9405      	str	r4, [sp, #20]
   22e48:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   22e4a:	2b00      	cmp	r3, #0
   22e4c:	da00      	bge.n	22e50 <_dtoa_r+0x50c>
   22e4e:	e2a7      	b.n	233a0 <_dtoa_r+0xa5c>
   22e50:	9c04      	ldr	r4, [sp, #16]
   22e52:	9d05      	ldr	r5, [sp, #20]
   22e54:	0030      	movs	r0, r6
   22e56:	0022      	movs	r2, r4
   22e58:	002b      	movs	r3, r5
   22e5a:	0039      	movs	r1, r7
   22e5c:	f7fc fd04 	bl	1f868 <__aeabi_ddiv>
   22e60:	f7fd feec 	bl	20c3c <__aeabi_d2iz>
   22e64:	4680      	mov	r8, r0
   22e66:	f7fd ff1d 	bl	20ca4 <__aeabi_i2d>
   22e6a:	0022      	movs	r2, r4
   22e6c:	002b      	movs	r3, r5
   22e6e:	f7fd f92f 	bl	200d0 <__aeabi_dmul>
   22e72:	0002      	movs	r2, r0
   22e74:	000b      	movs	r3, r1
   22e76:	0030      	movs	r0, r6
   22e78:	0039      	movs	r1, r7
   22e7a:	f7fd fba9 	bl	205d0 <__aeabi_dsub>
   22e7e:	4643      	mov	r3, r8
   22e80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   22e82:	3330      	adds	r3, #48	; 0x30
   22e84:	7013      	strb	r3, [r2, #0]
   22e86:	9b07      	ldr	r3, [sp, #28]
   22e88:	0006      	movs	r6, r0
   22e8a:	000f      	movs	r7, r1
   22e8c:	1c54      	adds	r4, r2, #1
   22e8e:	2b01      	cmp	r3, #1
   22e90:	d04e      	beq.n	22f30 <_dtoa_r+0x5ec>
   22e92:	2200      	movs	r2, #0
   22e94:	4b60      	ldr	r3, [pc, #384]	; (23018 <_dtoa_r+0x6d4>)
   22e96:	f7fd f91b 	bl	200d0 <__aeabi_dmul>
   22e9a:	2200      	movs	r2, #0
   22e9c:	2300      	movs	r3, #0
   22e9e:	0006      	movs	r6, r0
   22ea0:	000f      	movs	r7, r1
   22ea2:	f7fb f9d7 	bl	1e254 <__aeabi_dcmpeq>
   22ea6:	2800      	cmp	r0, #0
   22ea8:	d000      	beq.n	22eac <_dtoa_r+0x568>
   22eaa:	e77a      	b.n	22da2 <_dtoa_r+0x45e>
   22eac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   22eae:	9a07      	ldr	r2, [sp, #28]
   22eb0:	1c9d      	adds	r5, r3, #2
   22eb2:	469c      	mov	ip, r3
   22eb4:	465b      	mov	r3, fp
   22eb6:	9306      	str	r3, [sp, #24]
   22eb8:	4653      	mov	r3, sl
   22eba:	4462      	add	r2, ip
   22ebc:	46aa      	mov	sl, r5
   22ebe:	9c04      	ldr	r4, [sp, #16]
   22ec0:	9d05      	ldr	r5, [sp, #20]
   22ec2:	4691      	mov	r9, r2
   22ec4:	9307      	str	r3, [sp, #28]
   22ec6:	e00f      	b.n	22ee8 <_dtoa_r+0x5a4>
   22ec8:	2200      	movs	r2, #0
   22eca:	4b53      	ldr	r3, [pc, #332]	; (23018 <_dtoa_r+0x6d4>)
   22ecc:	f7fd f900 	bl	200d0 <__aeabi_dmul>
   22ed0:	2301      	movs	r3, #1
   22ed2:	469c      	mov	ip, r3
   22ed4:	2200      	movs	r2, #0
   22ed6:	2300      	movs	r3, #0
   22ed8:	0006      	movs	r6, r0
   22eda:	000f      	movs	r7, r1
   22edc:	44e2      	add	sl, ip
   22ede:	f7fb f9b9 	bl	1e254 <__aeabi_dcmpeq>
   22ee2:	2800      	cmp	r0, #0
   22ee4:	d000      	beq.n	22ee8 <_dtoa_r+0x5a4>
   22ee6:	e2d9      	b.n	2349c <_dtoa_r+0xb58>
   22ee8:	0022      	movs	r2, r4
   22eea:	002b      	movs	r3, r5
   22eec:	0030      	movs	r0, r6
   22eee:	0039      	movs	r1, r7
   22ef0:	f7fc fcba 	bl	1f868 <__aeabi_ddiv>
   22ef4:	f7fd fea2 	bl	20c3c <__aeabi_d2iz>
   22ef8:	4680      	mov	r8, r0
   22efa:	f7fd fed3 	bl	20ca4 <__aeabi_i2d>
   22efe:	0022      	movs	r2, r4
   22f00:	002b      	movs	r3, r5
   22f02:	f7fd f8e5 	bl	200d0 <__aeabi_dmul>
   22f06:	0002      	movs	r2, r0
   22f08:	000b      	movs	r3, r1
   22f0a:	0030      	movs	r0, r6
   22f0c:	0039      	movs	r1, r7
   22f0e:	f7fd fb5f 	bl	205d0 <__aeabi_dsub>
   22f12:	4653      	mov	r3, sl
   22f14:	4642      	mov	r2, r8
   22f16:	3b01      	subs	r3, #1
   22f18:	3230      	adds	r2, #48	; 0x30
   22f1a:	0006      	movs	r6, r0
   22f1c:	000f      	movs	r7, r1
   22f1e:	46d3      	mov	fp, sl
   22f20:	701a      	strb	r2, [r3, #0]
   22f22:	45d1      	cmp	r9, sl
   22f24:	d1d0      	bne.n	22ec8 <_dtoa_r+0x584>
   22f26:	9b06      	ldr	r3, [sp, #24]
   22f28:	4654      	mov	r4, sl
   22f2a:	469b      	mov	fp, r3
   22f2c:	9b07      	ldr	r3, [sp, #28]
   22f2e:	469a      	mov	sl, r3
   22f30:	0032      	movs	r2, r6
   22f32:	003b      	movs	r3, r7
   22f34:	0030      	movs	r0, r6
   22f36:	0039      	movs	r1, r7
   22f38:	f7fc f986 	bl	1f248 <__aeabi_dadd>
   22f3c:	0006      	movs	r6, r0
   22f3e:	000f      	movs	r7, r1
   22f40:	0002      	movs	r2, r0
   22f42:	000b      	movs	r3, r1
   22f44:	9804      	ldr	r0, [sp, #16]
   22f46:	9905      	ldr	r1, [sp, #20]
   22f48:	f7fb f98a 	bl	1e260 <__aeabi_dcmplt>
   22f4c:	2800      	cmp	r0, #0
   22f4e:	d10c      	bne.n	22f6a <_dtoa_r+0x626>
   22f50:	9804      	ldr	r0, [sp, #16]
   22f52:	9905      	ldr	r1, [sp, #20]
   22f54:	0032      	movs	r2, r6
   22f56:	003b      	movs	r3, r7
   22f58:	f7fb f97c 	bl	1e254 <__aeabi_dcmpeq>
   22f5c:	2800      	cmp	r0, #0
   22f5e:	d100      	bne.n	22f62 <_dtoa_r+0x61e>
   22f60:	e71f      	b.n	22da2 <_dtoa_r+0x45e>
   22f62:	4643      	mov	r3, r8
   22f64:	07db      	lsls	r3, r3, #31
   22f66:	d400      	bmi.n	22f6a <_dtoa_r+0x626>
   22f68:	e71b      	b.n	22da2 <_dtoa_r+0x45e>
   22f6a:	1e65      	subs	r5, r4, #1
   22f6c:	782f      	ldrb	r7, [r5, #0]
   22f6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   22f70:	e006      	b.n	22f80 <_dtoa_r+0x63c>
   22f72:	429d      	cmp	r5, r3
   22f74:	d100      	bne.n	22f78 <_dtoa_r+0x634>
   22f76:	e351      	b.n	2361c <_dtoa_r+0xcd8>
   22f78:	3c02      	subs	r4, #2
   22f7a:	7827      	ldrb	r7, [r4, #0]
   22f7c:	002c      	movs	r4, r5
   22f7e:	3d01      	subs	r5, #1
   22f80:	2f39      	cmp	r7, #57	; 0x39
   22f82:	d0f6      	beq.n	22f72 <_dtoa_r+0x62e>
   22f84:	3701      	adds	r7, #1
   22f86:	702f      	strb	r7, [r5, #0]
   22f88:	e70b      	b.n	22da2 <_dtoa_r+0x45e>
   22f8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   22f8c:	2a00      	cmp	r2, #0
   22f8e:	d04f      	beq.n	23030 <_dtoa_r+0x6ec>
   22f90:	9a22      	ldr	r2, [sp, #136]	; 0x88
   22f92:	2a01      	cmp	r2, #1
   22f94:	dc00      	bgt.n	22f98 <_dtoa_r+0x654>
   22f96:	e22c      	b.n	233f2 <_dtoa_r+0xaae>
   22f98:	9b07      	ldr	r3, [sp, #28]
   22f9a:	1e5c      	subs	r4, r3, #1
   22f9c:	464b      	mov	r3, r9
   22f9e:	45a1      	cmp	r9, r4
   22fa0:	da00      	bge.n	22fa4 <_dtoa_r+0x660>
   22fa2:	e2b8      	b.n	23516 <_dtoa_r+0xbd2>
   22fa4:	1b1c      	subs	r4, r3, r4
   22fa6:	9b07      	ldr	r3, [sp, #28]
   22fa8:	2b00      	cmp	r3, #0
   22faa:	da00      	bge.n	22fae <_dtoa_r+0x66a>
   22fac:	e3d4      	b.n	23758 <_dtoa_r+0xe14>
   22fae:	9b06      	ldr	r3, [sp, #24]
   22fb0:	9308      	str	r3, [sp, #32]
   22fb2:	9b07      	ldr	r3, [sp, #28]
   22fb4:	9a06      	ldr	r2, [sp, #24]
   22fb6:	2101      	movs	r1, #1
   22fb8:	4694      	mov	ip, r2
   22fba:	449c      	add	ip, r3
   22fbc:	4662      	mov	r2, ip
   22fbe:	9206      	str	r2, [sp, #24]
   22fc0:	9a04      	ldr	r2, [sp, #16]
   22fc2:	4650      	mov	r0, sl
   22fc4:	4694      	mov	ip, r2
   22fc6:	449c      	add	ip, r3
   22fc8:	4663      	mov	r3, ip
   22fca:	9304      	str	r3, [sp, #16]
   22fcc:	f001 f86e 	bl	240ac <__i2b>
   22fd0:	4680      	mov	r8, r0
   22fd2:	e032      	b.n	2303a <_dtoa_r+0x6f6>
   22fd4:	9a06      	ldr	r2, [sp, #24]
   22fd6:	9b03      	ldr	r3, [sp, #12]
   22fd8:	1ad2      	subs	r2, r2, r3
   22fda:	425b      	negs	r3, r3
   22fdc:	4699      	mov	r9, r3
   22fde:	2300      	movs	r3, #0
   22fe0:	9206      	str	r2, [sp, #24]
   22fe2:	930d      	str	r3, [sp, #52]	; 0x34
   22fe4:	e579      	b.n	22ada <_dtoa_r+0x196>
   22fe6:	9803      	ldr	r0, [sp, #12]
   22fe8:	f7fd fe5c 	bl	20ca4 <__aeabi_i2d>
   22fec:	000b      	movs	r3, r1
   22fee:	0002      	movs	r2, r0
   22ff0:	0029      	movs	r1, r5
   22ff2:	0020      	movs	r0, r4
   22ff4:	f7fb f92e 	bl	1e254 <__aeabi_dcmpeq>
   22ff8:	0002      	movs	r2, r0
   22ffa:	4250      	negs	r0, r2
   22ffc:	4150      	adcs	r0, r2
   22ffe:	9b03      	ldr	r3, [sp, #12]
   23000:	1a1b      	subs	r3, r3, r0
   23002:	9303      	str	r3, [sp, #12]
   23004:	e53d      	b.n	22a82 <_dtoa_r+0x13e>
   23006:	2301      	movs	r3, #1
   23008:	1a9b      	subs	r3, r3, r2
   2300a:	9306      	str	r3, [sp, #24]
   2300c:	2300      	movs	r3, #0
   2300e:	9304      	str	r3, [sp, #16]
   23010:	e557      	b.n	22ac2 <_dtoa_r+0x17e>
   23012:	46c0      	nop			; (mov r8, r8)
   23014:	3ff00000 	.word	0x3ff00000
   23018:	40240000 	.word	0x40240000
   2301c:	00000432 	.word	0x00000432
   23020:	00000412 	.word	0x00000412
   23024:	fe100000 	.word	0xfe100000
   23028:	00027078 	.word	0x00027078
   2302c:	000270d8 	.word	0x000270d8
   23030:	9b06      	ldr	r3, [sp, #24]
   23032:	464c      	mov	r4, r9
   23034:	9308      	str	r3, [sp, #32]
   23036:	2300      	movs	r3, #0
   23038:	4698      	mov	r8, r3
   2303a:	9908      	ldr	r1, [sp, #32]
   2303c:	1e0b      	subs	r3, r1, #0
   2303e:	dd0e      	ble.n	2305e <_dtoa_r+0x71a>
   23040:	9a04      	ldr	r2, [sp, #16]
   23042:	2a00      	cmp	r2, #0
   23044:	dd0b      	ble.n	2305e <_dtoa_r+0x71a>
   23046:	4293      	cmp	r3, r2
   23048:	dd00      	ble.n	2304c <_dtoa_r+0x708>
   2304a:	e187      	b.n	2335c <_dtoa_r+0xa18>
   2304c:	9a06      	ldr	r2, [sp, #24]
   2304e:	1ad2      	subs	r2, r2, r3
   23050:	9206      	str	r2, [sp, #24]
   23052:	9a08      	ldr	r2, [sp, #32]
   23054:	1ad2      	subs	r2, r2, r3
   23056:	9208      	str	r2, [sp, #32]
   23058:	9a04      	ldr	r2, [sp, #16]
   2305a:	1ad3      	subs	r3, r2, r3
   2305c:	9304      	str	r3, [sp, #16]
   2305e:	464b      	mov	r3, r9
   23060:	2b00      	cmp	r3, #0
   23062:	d01a      	beq.n	2309a <_dtoa_r+0x756>
   23064:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   23066:	2b00      	cmp	r3, #0
   23068:	d100      	bne.n	2306c <_dtoa_r+0x728>
   2306a:	e1bb      	b.n	233e4 <_dtoa_r+0xaa0>
   2306c:	2c00      	cmp	r4, #0
   2306e:	dd10      	ble.n	23092 <_dtoa_r+0x74e>
   23070:	4641      	mov	r1, r8
   23072:	0022      	movs	r2, r4
   23074:	4650      	mov	r0, sl
   23076:	f001 f8cd 	bl	24214 <__pow5mult>
   2307a:	465a      	mov	r2, fp
   2307c:	0001      	movs	r1, r0
   2307e:	4680      	mov	r8, r0
   23080:	4650      	mov	r0, sl
   23082:	f001 f81d 	bl	240c0 <__multiply>
   23086:	0005      	movs	r5, r0
   23088:	4659      	mov	r1, fp
   2308a:	4650      	mov	r0, sl
   2308c:	f000 ff76 	bl	23f7c <_Bfree>
   23090:	46ab      	mov	fp, r5
   23092:	464b      	mov	r3, r9
   23094:	1b1a      	subs	r2, r3, r4
   23096:	d000      	beq.n	2309a <_dtoa_r+0x756>
   23098:	e1a5      	b.n	233e6 <_dtoa_r+0xaa2>
   2309a:	2101      	movs	r1, #1
   2309c:	4650      	mov	r0, sl
   2309e:	f001 f805 	bl	240ac <__i2b>
   230a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   230a4:	4681      	mov	r9, r0
   230a6:	2b00      	cmp	r3, #0
   230a8:	dd1d      	ble.n	230e6 <_dtoa_r+0x7a2>
   230aa:	001a      	movs	r2, r3
   230ac:	0001      	movs	r1, r0
   230ae:	4650      	mov	r0, sl
   230b0:	f001 f8b0 	bl	24214 <__pow5mult>
   230b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
   230b6:	4681      	mov	r9, r0
   230b8:	2b01      	cmp	r3, #1
   230ba:	dc00      	bgt.n	230be <_dtoa_r+0x77a>
   230bc:	e150      	b.n	23360 <_dtoa_r+0xa1c>
   230be:	2400      	movs	r4, #0
   230c0:	464b      	mov	r3, r9
   230c2:	691b      	ldr	r3, [r3, #16]
   230c4:	3303      	adds	r3, #3
   230c6:	009b      	lsls	r3, r3, #2
   230c8:	444b      	add	r3, r9
   230ca:	6858      	ldr	r0, [r3, #4]
   230cc:	f000 ffa6 	bl	2401c <__hi0bits>
   230d0:	2320      	movs	r3, #32
   230d2:	1a1b      	subs	r3, r3, r0
   230d4:	e010      	b.n	230f8 <_dtoa_r+0x7b4>
   230d6:	2220      	movs	r2, #32
   230d8:	0030      	movs	r0, r6
   230da:	1ad3      	subs	r3, r2, r3
   230dc:	4098      	lsls	r0, r3
   230de:	e685      	b.n	22dec <_dtoa_r+0x4a8>
   230e0:	2300      	movs	r3, #0
   230e2:	930c      	str	r3, [sp, #48]	; 0x30
   230e4:	e4e3      	b.n	22aae <_dtoa_r+0x16a>
   230e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
   230e8:	2400      	movs	r4, #0
   230ea:	2b01      	cmp	r3, #1
   230ec:	dc00      	bgt.n	230f0 <_dtoa_r+0x7ac>
   230ee:	e18b      	b.n	23408 <_dtoa_r+0xac4>
   230f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   230f2:	2301      	movs	r3, #1
   230f4:	2a00      	cmp	r2, #0
   230f6:	d1e3      	bne.n	230c0 <_dtoa_r+0x77c>
   230f8:	9904      	ldr	r1, [sp, #16]
   230fa:	201f      	movs	r0, #31
   230fc:	468c      	mov	ip, r1
   230fe:	4463      	add	r3, ip
   23100:	4018      	ands	r0, r3
   23102:	d100      	bne.n	23106 <_dtoa_r+0x7c2>
   23104:	e0ae      	b.n	23264 <_dtoa_r+0x920>
   23106:	2320      	movs	r3, #32
   23108:	1a1b      	subs	r3, r3, r0
   2310a:	2b04      	cmp	r3, #4
   2310c:	dc00      	bgt.n	23110 <_dtoa_r+0x7cc>
   2310e:	e3cc      	b.n	238aa <_dtoa_r+0xf66>
   23110:	231c      	movs	r3, #28
   23112:	1a18      	subs	r0, r3, r0
   23114:	9b06      	ldr	r3, [sp, #24]
   23116:	469c      	mov	ip, r3
   23118:	4484      	add	ip, r0
   2311a:	4663      	mov	r3, ip
   2311c:	9306      	str	r3, [sp, #24]
   2311e:	9b08      	ldr	r3, [sp, #32]
   23120:	469c      	mov	ip, r3
   23122:	4484      	add	ip, r0
   23124:	4663      	mov	r3, ip
   23126:	468c      	mov	ip, r1
   23128:	4484      	add	ip, r0
   2312a:	9308      	str	r3, [sp, #32]
   2312c:	4663      	mov	r3, ip
   2312e:	9304      	str	r3, [sp, #16]
   23130:	9b06      	ldr	r3, [sp, #24]
   23132:	2b00      	cmp	r3, #0
   23134:	dd05      	ble.n	23142 <_dtoa_r+0x7fe>
   23136:	4659      	mov	r1, fp
   23138:	001a      	movs	r2, r3
   2313a:	4650      	mov	r0, sl
   2313c:	f001 f8ca 	bl	242d4 <__lshift>
   23140:	4683      	mov	fp, r0
   23142:	9b04      	ldr	r3, [sp, #16]
   23144:	2b00      	cmp	r3, #0
   23146:	dd05      	ble.n	23154 <_dtoa_r+0x810>
   23148:	4649      	mov	r1, r9
   2314a:	001a      	movs	r2, r3
   2314c:	4650      	mov	r0, sl
   2314e:	f001 f8c1 	bl	242d4 <__lshift>
   23152:	4681      	mov	r9, r0
   23154:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   23156:	2b00      	cmp	r3, #0
   23158:	d000      	beq.n	2315c <_dtoa_r+0x818>
   2315a:	e094      	b.n	23286 <_dtoa_r+0x942>
   2315c:	9b07      	ldr	r3, [sp, #28]
   2315e:	2b00      	cmp	r3, #0
   23160:	dc00      	bgt.n	23164 <_dtoa_r+0x820>
   23162:	e175      	b.n	23450 <_dtoa_r+0xb0c>
   23164:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   23166:	2b00      	cmp	r3, #0
   23168:	d100      	bne.n	2316c <_dtoa_r+0x828>
   2316a:	e0a6      	b.n	232ba <_dtoa_r+0x976>
   2316c:	9b08      	ldr	r3, [sp, #32]
   2316e:	2b00      	cmp	r3, #0
   23170:	dd05      	ble.n	2317e <_dtoa_r+0x83a>
   23172:	4641      	mov	r1, r8
   23174:	001a      	movs	r2, r3
   23176:	4650      	mov	r0, sl
   23178:	f001 f8ac 	bl	242d4 <__lshift>
   2317c:	4680      	mov	r8, r0
   2317e:	4643      	mov	r3, r8
   23180:	930c      	str	r3, [sp, #48]	; 0x30
   23182:	2c00      	cmp	r4, #0
   23184:	d000      	beq.n	23188 <_dtoa_r+0x844>
   23186:	e250      	b.n	2362a <_dtoa_r+0xce6>
   23188:	9c07      	ldr	r4, [sp, #28]
   2318a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2318c:	3c01      	subs	r4, #1
   2318e:	0023      	movs	r3, r4
   23190:	4694      	mov	ip, r2
   23192:	4463      	add	r3, ip
   23194:	9308      	str	r3, [sp, #32]
   23196:	2301      	movs	r3, #1
   23198:	4033      	ands	r3, r6
   2319a:	9307      	str	r3, [sp, #28]
   2319c:	464b      	mov	r3, r9
   2319e:	9306      	str	r3, [sp, #24]
   231a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   231a2:	4657      	mov	r7, sl
   231a4:	4645      	mov	r5, r8
   231a6:	465e      	mov	r6, fp
   231a8:	4692      	mov	sl, r2
   231aa:	4698      	mov	r8, r3
   231ac:	9b06      	ldr	r3, [sp, #24]
   231ae:	0030      	movs	r0, r6
   231b0:	0019      	movs	r1, r3
   231b2:	4699      	mov	r9, r3
   231b4:	f7ff fb1c 	bl	227f0 <quorem>
   231b8:	0003      	movs	r3, r0
   231ba:	900b      	str	r0, [sp, #44]	; 0x2c
   231bc:	3330      	adds	r3, #48	; 0x30
   231be:	0029      	movs	r1, r5
   231c0:	0030      	movs	r0, r6
   231c2:	9304      	str	r3, [sp, #16]
   231c4:	f001 f8e6 	bl	24394 <__mcmp>
   231c8:	4649      	mov	r1, r9
   231ca:	0004      	movs	r4, r0
   231cc:	4642      	mov	r2, r8
   231ce:	0038      	movs	r0, r7
   231d0:	f001 f8fa 	bl	243c8 <__mdiff>
   231d4:	68c3      	ldr	r3, [r0, #12]
   231d6:	4681      	mov	r9, r0
   231d8:	2b00      	cmp	r3, #0
   231da:	d000      	beq.n	231de <_dtoa_r+0x89a>
   231dc:	e11e      	b.n	2341c <_dtoa_r+0xad8>
   231de:	0001      	movs	r1, r0
   231e0:	0030      	movs	r0, r6
   231e2:	f001 f8d7 	bl	24394 <__mcmp>
   231e6:	4683      	mov	fp, r0
   231e8:	4649      	mov	r1, r9
   231ea:	0038      	movs	r0, r7
   231ec:	f000 fec6 	bl	23f7c <_Bfree>
   231f0:	465b      	mov	r3, fp
   231f2:	9a22      	ldr	r2, [sp, #136]	; 0x88
   231f4:	4313      	orrs	r3, r2
   231f6:	d103      	bne.n	23200 <_dtoa_r+0x8bc>
   231f8:	9b07      	ldr	r3, [sp, #28]
   231fa:	2b00      	cmp	r3, #0
   231fc:	d100      	bne.n	23200 <_dtoa_r+0x8bc>
   231fe:	e306      	b.n	2380e <_dtoa_r+0xeca>
   23200:	2c00      	cmp	r4, #0
   23202:	da00      	bge.n	23206 <_dtoa_r+0x8c2>
   23204:	e1a8      	b.n	23558 <_dtoa_r+0xc14>
   23206:	9b22      	ldr	r3, [sp, #136]	; 0x88
   23208:	431c      	orrs	r4, r3
   2320a:	d103      	bne.n	23214 <_dtoa_r+0x8d0>
   2320c:	9b07      	ldr	r3, [sp, #28]
   2320e:	2b00      	cmp	r3, #0
   23210:	d100      	bne.n	23214 <_dtoa_r+0x8d0>
   23212:	e1a1      	b.n	23558 <_dtoa_r+0xc14>
   23214:	465b      	mov	r3, fp
   23216:	2b00      	cmp	r3, #0
   23218:	dd00      	ble.n	2321c <_dtoa_r+0x8d8>
   2321a:	e282      	b.n	23722 <_dtoa_r+0xdde>
   2321c:	4669      	mov	r1, sp
   2321e:	4652      	mov	r2, sl
   23220:	4653      	mov	r3, sl
   23222:	7c09      	ldrb	r1, [r1, #16]
   23224:	1c5c      	adds	r4, r3, #1
   23226:	7011      	strb	r1, [r2, #0]
   23228:	9a08      	ldr	r2, [sp, #32]
   2322a:	4552      	cmp	r2, sl
   2322c:	d100      	bne.n	23230 <_dtoa_r+0x8ec>
   2322e:	e28a      	b.n	23746 <_dtoa_r+0xe02>
   23230:	0031      	movs	r1, r6
   23232:	2300      	movs	r3, #0
   23234:	220a      	movs	r2, #10
   23236:	0038      	movs	r0, r7
   23238:	f000 feaa 	bl	23f90 <__multadd>
   2323c:	2300      	movs	r3, #0
   2323e:	0006      	movs	r6, r0
   23240:	220a      	movs	r2, #10
   23242:	0029      	movs	r1, r5
   23244:	0038      	movs	r0, r7
   23246:	4545      	cmp	r5, r8
   23248:	d100      	bne.n	2324c <_dtoa_r+0x908>
   2324a:	e0e1      	b.n	23410 <_dtoa_r+0xacc>
   2324c:	f000 fea0 	bl	23f90 <__multadd>
   23250:	4641      	mov	r1, r8
   23252:	0005      	movs	r5, r0
   23254:	2300      	movs	r3, #0
   23256:	220a      	movs	r2, #10
   23258:	0038      	movs	r0, r7
   2325a:	f000 fe99 	bl	23f90 <__multadd>
   2325e:	46a2      	mov	sl, r4
   23260:	4680      	mov	r8, r0
   23262:	e7a3      	b.n	231ac <_dtoa_r+0x868>
   23264:	201c      	movs	r0, #28
   23266:	9b06      	ldr	r3, [sp, #24]
   23268:	469c      	mov	ip, r3
   2326a:	4484      	add	ip, r0
   2326c:	4663      	mov	r3, ip
   2326e:	9306      	str	r3, [sp, #24]
   23270:	9b08      	ldr	r3, [sp, #32]
   23272:	469c      	mov	ip, r3
   23274:	4484      	add	ip, r0
   23276:	4663      	mov	r3, ip
   23278:	9308      	str	r3, [sp, #32]
   2327a:	9b04      	ldr	r3, [sp, #16]
   2327c:	469c      	mov	ip, r3
   2327e:	4484      	add	ip, r0
   23280:	4663      	mov	r3, ip
   23282:	9304      	str	r3, [sp, #16]
   23284:	e754      	b.n	23130 <_dtoa_r+0x7ec>
   23286:	4649      	mov	r1, r9
   23288:	4658      	mov	r0, fp
   2328a:	f001 f883 	bl	24394 <__mcmp>
   2328e:	2800      	cmp	r0, #0
   23290:	db00      	blt.n	23294 <_dtoa_r+0x950>
   23292:	e763      	b.n	2315c <_dtoa_r+0x818>
   23294:	9b03      	ldr	r3, [sp, #12]
   23296:	4659      	mov	r1, fp
   23298:	3b01      	subs	r3, #1
   2329a:	9303      	str	r3, [sp, #12]
   2329c:	220a      	movs	r2, #10
   2329e:	2300      	movs	r3, #0
   232a0:	4650      	mov	r0, sl
   232a2:	f000 fe75 	bl	23f90 <__multadd>
   232a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   232a8:	4683      	mov	fp, r0
   232aa:	2b00      	cmp	r3, #0
   232ac:	d000      	beq.n	232b0 <_dtoa_r+0x96c>
   232ae:	e2ca      	b.n	23846 <_dtoa_r+0xf02>
   232b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   232b2:	2b00      	cmp	r3, #0
   232b4:	dc00      	bgt.n	232b8 <_dtoa_r+0x974>
   232b6:	e2d8      	b.n	2386a <_dtoa_r+0xf26>
   232b8:	9307      	str	r3, [sp, #28]
   232ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   232bc:	465d      	mov	r5, fp
   232be:	2400      	movs	r4, #0
   232c0:	9f07      	ldr	r7, [sp, #28]
   232c2:	469b      	mov	fp, r3
   232c4:	e006      	b.n	232d4 <_dtoa_r+0x990>
   232c6:	0029      	movs	r1, r5
   232c8:	2300      	movs	r3, #0
   232ca:	220a      	movs	r2, #10
   232cc:	4650      	mov	r0, sl
   232ce:	f000 fe5f 	bl	23f90 <__multadd>
   232d2:	0005      	movs	r5, r0
   232d4:	4649      	mov	r1, r9
   232d6:	0028      	movs	r0, r5
   232d8:	f7ff fa8a 	bl	227f0 <quorem>
   232dc:	465b      	mov	r3, fp
   232de:	3030      	adds	r0, #48	; 0x30
   232e0:	5518      	strb	r0, [r3, r4]
   232e2:	3401      	adds	r4, #1
   232e4:	42bc      	cmp	r4, r7
   232e6:	dbee      	blt.n	232c6 <_dtoa_r+0x982>
   232e8:	46ab      	mov	fp, r5
   232ea:	0006      	movs	r6, r0
   232ec:	9c07      	ldr	r4, [sp, #28]
   232ee:	2c00      	cmp	r4, #0
   232f0:	dc00      	bgt.n	232f4 <_dtoa_r+0x9b0>
   232f2:	e237      	b.n	23764 <_dtoa_r+0xe20>
   232f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   232f6:	2700      	movs	r7, #0
   232f8:	469c      	mov	ip, r3
   232fa:	4464      	add	r4, ip
   232fc:	4659      	mov	r1, fp
   232fe:	2201      	movs	r2, #1
   23300:	4650      	mov	r0, sl
   23302:	f000 ffe7 	bl	242d4 <__lshift>
   23306:	4649      	mov	r1, r9
   23308:	4683      	mov	fp, r0
   2330a:	f001 f843 	bl	24394 <__mcmp>
   2330e:	2800      	cmp	r0, #0
   23310:	dc00      	bgt.n	23314 <_dtoa_r+0x9d0>
   23312:	e144      	b.n	2359e <_dtoa_r+0xc5a>
   23314:	1e65      	subs	r5, r4, #1
   23316:	782b      	ldrb	r3, [r5, #0]
   23318:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2331a:	e006      	b.n	2332a <_dtoa_r+0x9e6>
   2331c:	4295      	cmp	r5, r2
   2331e:	d100      	bne.n	23322 <_dtoa_r+0x9de>
   23320:	e0b1      	b.n	23486 <_dtoa_r+0xb42>
   23322:	3c02      	subs	r4, #2
   23324:	7823      	ldrb	r3, [r4, #0]
   23326:	002c      	movs	r4, r5
   23328:	3d01      	subs	r5, #1
   2332a:	2b39      	cmp	r3, #57	; 0x39
   2332c:	d0f6      	beq.n	2331c <_dtoa_r+0x9d8>
   2332e:	3301      	adds	r3, #1
   23330:	702b      	strb	r3, [r5, #0]
   23332:	4649      	mov	r1, r9
   23334:	4650      	mov	r0, sl
   23336:	f000 fe21 	bl	23f7c <_Bfree>
   2333a:	4643      	mov	r3, r8
   2333c:	2b00      	cmp	r3, #0
   2333e:	d100      	bne.n	23342 <_dtoa_r+0x9fe>
   23340:	e52f      	b.n	22da2 <_dtoa_r+0x45e>
   23342:	2f00      	cmp	r7, #0
   23344:	d005      	beq.n	23352 <_dtoa_r+0xa0e>
   23346:	4547      	cmp	r7, r8
   23348:	d003      	beq.n	23352 <_dtoa_r+0xa0e>
   2334a:	0039      	movs	r1, r7
   2334c:	4650      	mov	r0, sl
   2334e:	f000 fe15 	bl	23f7c <_Bfree>
   23352:	4641      	mov	r1, r8
   23354:	4650      	mov	r0, sl
   23356:	f000 fe11 	bl	23f7c <_Bfree>
   2335a:	e522      	b.n	22da2 <_dtoa_r+0x45e>
   2335c:	0013      	movs	r3, r2
   2335e:	e675      	b.n	2304c <_dtoa_r+0x708>
   23360:	2e00      	cmp	r6, #0
   23362:	d000      	beq.n	23366 <_dtoa_r+0xa22>
   23364:	e6ab      	b.n	230be <_dtoa_r+0x77a>
   23366:	033b      	lsls	r3, r7, #12
   23368:	2400      	movs	r4, #0
   2336a:	2b00      	cmp	r3, #0
   2336c:	d000      	beq.n	23370 <_dtoa_r+0xa2c>
   2336e:	e6bf      	b.n	230f0 <_dtoa_r+0x7ac>
   23370:	4bba      	ldr	r3, [pc, #744]	; (2365c <_dtoa_r+0xd18>)
   23372:	423b      	tst	r3, r7
   23374:	d100      	bne.n	23378 <_dtoa_r+0xa34>
   23376:	e6bb      	b.n	230f0 <_dtoa_r+0x7ac>
   23378:	9b06      	ldr	r3, [sp, #24]
   2337a:	3401      	adds	r4, #1
   2337c:	3301      	adds	r3, #1
   2337e:	9306      	str	r3, [sp, #24]
   23380:	9b04      	ldr	r3, [sp, #16]
   23382:	3301      	adds	r3, #1
   23384:	9304      	str	r3, [sp, #16]
   23386:	e6b3      	b.n	230f0 <_dtoa_r+0x7ac>
   23388:	2301      	movs	r3, #1
   2338a:	930b      	str	r3, [sp, #44]	; 0x2c
   2338c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2338e:	2b00      	cmp	r3, #0
   23390:	dc00      	bgt.n	23394 <_dtoa_r+0xa50>
   23392:	e0d1      	b.n	23538 <_dtoa_r+0xbf4>
   23394:	001d      	movs	r5, r3
   23396:	4698      	mov	r8, r3
   23398:	930e      	str	r3, [sp, #56]	; 0x38
   2339a:	9307      	str	r3, [sp, #28]
   2339c:	f7ff fbc8 	bl	22b30 <_dtoa_r+0x1ec>
   233a0:	9b07      	ldr	r3, [sp, #28]
   233a2:	2b00      	cmp	r3, #0
   233a4:	dd00      	ble.n	233a8 <_dtoa_r+0xa64>
   233a6:	e553      	b.n	22e50 <_dtoa_r+0x50c>
   233a8:	d000      	beq.n	233ac <_dtoa_r+0xa68>
   233aa:	e0ad      	b.n	23508 <_dtoa_r+0xbc4>
   233ac:	9804      	ldr	r0, [sp, #16]
   233ae:	9905      	ldr	r1, [sp, #20]
   233b0:	2200      	movs	r2, #0
   233b2:	4bab      	ldr	r3, [pc, #684]	; (23660 <_dtoa_r+0xd1c>)
   233b4:	f7fc fe8c 	bl	200d0 <__aeabi_dmul>
   233b8:	003b      	movs	r3, r7
   233ba:	0032      	movs	r2, r6
   233bc:	f7fa ff6e 	bl	1e29c <__aeabi_dcmpge>
   233c0:	2300      	movs	r3, #0
   233c2:	4699      	mov	r9, r3
   233c4:	4698      	mov	r8, r3
   233c6:	2800      	cmp	r0, #0
   233c8:	d055      	beq.n	23476 <_dtoa_r+0xb32>
   233ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   233cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   233ce:	43db      	mvns	r3, r3
   233d0:	9303      	str	r3, [sp, #12]
   233d2:	4649      	mov	r1, r9
   233d4:	4650      	mov	r0, sl
   233d6:	f000 fdd1 	bl	23f7c <_Bfree>
   233da:	4643      	mov	r3, r8
   233dc:	2b00      	cmp	r3, #0
   233de:	d100      	bne.n	233e2 <_dtoa_r+0xa9e>
   233e0:	e4df      	b.n	22da2 <_dtoa_r+0x45e>
   233e2:	e7b6      	b.n	23352 <_dtoa_r+0xa0e>
   233e4:	464a      	mov	r2, r9
   233e6:	4659      	mov	r1, fp
   233e8:	4650      	mov	r0, sl
   233ea:	f000 ff13 	bl	24214 <__pow5mult>
   233ee:	4683      	mov	fp, r0
   233f0:	e653      	b.n	2309a <_dtoa_r+0x756>
   233f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   233f4:	2a00      	cmp	r2, #0
   233f6:	d100      	bne.n	233fa <_dtoa_r+0xab6>
   233f8:	e1b6      	b.n	23768 <_dtoa_r+0xe24>
   233fa:	4a9a      	ldr	r2, [pc, #616]	; (23664 <_dtoa_r+0xd20>)
   233fc:	464c      	mov	r4, r9
   233fe:	4694      	mov	ip, r2
   23400:	9a06      	ldr	r2, [sp, #24]
   23402:	4463      	add	r3, ip
   23404:	9208      	str	r2, [sp, #32]
   23406:	e5d5      	b.n	22fb4 <_dtoa_r+0x670>
   23408:	2e00      	cmp	r6, #0
   2340a:	d000      	beq.n	2340e <_dtoa_r+0xaca>
   2340c:	e670      	b.n	230f0 <_dtoa_r+0x7ac>
   2340e:	e7aa      	b.n	23366 <_dtoa_r+0xa22>
   23410:	f000 fdbe 	bl	23f90 <__multadd>
   23414:	46a2      	mov	sl, r4
   23416:	0005      	movs	r5, r0
   23418:	4680      	mov	r8, r0
   2341a:	e6c7      	b.n	231ac <_dtoa_r+0x868>
   2341c:	2301      	movs	r3, #1
   2341e:	469b      	mov	fp, r3
   23420:	e6e2      	b.n	231e8 <_dtoa_r+0x8a4>
   23422:	2300      	movs	r3, #0
   23424:	930b      	str	r3, [sp, #44]	; 0x2c
   23426:	9b22      	ldr	r3, [sp, #136]	; 0x88
   23428:	2b02      	cmp	r3, #2
   2342a:	d0af      	beq.n	2338c <_dtoa_r+0xa48>
   2342c:	2400      	movs	r4, #0
   2342e:	4653      	mov	r3, sl
   23430:	0021      	movs	r1, r4
   23432:	645c      	str	r4, [r3, #68]	; 0x44
   23434:	4650      	mov	r0, sl
   23436:	f000 fd79 	bl	23f2c <_Balloc>
   2343a:	4653      	mov	r3, sl
   2343c:	6418      	str	r0, [r3, #64]	; 0x40
   2343e:	2301      	movs	r3, #1
   23440:	425b      	negs	r3, r3
   23442:	9307      	str	r3, [sp, #28]
   23444:	930e      	str	r3, [sp, #56]	; 0x38
   23446:	3302      	adds	r3, #2
   23448:	900a      	str	r0, [sp, #40]	; 0x28
   2344a:	9423      	str	r4, [sp, #140]	; 0x8c
   2344c:	930b      	str	r3, [sp, #44]	; 0x2c
   2344e:	e4ec      	b.n	22e2a <_dtoa_r+0x4e6>
   23450:	9b22      	ldr	r3, [sp, #136]	; 0x88
   23452:	2b02      	cmp	r3, #2
   23454:	dc00      	bgt.n	23458 <_dtoa_r+0xb14>
   23456:	e685      	b.n	23164 <_dtoa_r+0x820>
   23458:	9b07      	ldr	r3, [sp, #28]
   2345a:	2b00      	cmp	r3, #0
   2345c:	d1b5      	bne.n	233ca <_dtoa_r+0xa86>
   2345e:	4649      	mov	r1, r9
   23460:	2205      	movs	r2, #5
   23462:	4650      	mov	r0, sl
   23464:	f000 fd94 	bl	23f90 <__multadd>
   23468:	4681      	mov	r9, r0
   2346a:	0001      	movs	r1, r0
   2346c:	4658      	mov	r0, fp
   2346e:	f000 ff91 	bl	24394 <__mcmp>
   23472:	2800      	cmp	r0, #0
   23474:	dda9      	ble.n	233ca <_dtoa_r+0xa86>
   23476:	2331      	movs	r3, #49	; 0x31
   23478:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2347a:	7013      	strb	r3, [r2, #0]
   2347c:	9b03      	ldr	r3, [sp, #12]
   2347e:	1c54      	adds	r4, r2, #1
   23480:	3301      	adds	r3, #1
   23482:	9303      	str	r3, [sp, #12]
   23484:	e7a5      	b.n	233d2 <_dtoa_r+0xa8e>
   23486:	9b03      	ldr	r3, [sp, #12]
   23488:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2348a:	3301      	adds	r3, #1
   2348c:	9303      	str	r3, [sp, #12]
   2348e:	2331      	movs	r3, #49	; 0x31
   23490:	7013      	strb	r3, [r2, #0]
   23492:	e74e      	b.n	23332 <_dtoa_r+0x9ee>
   23494:	2300      	movs	r3, #0
   23496:	930b      	str	r3, [sp, #44]	; 0x2c
   23498:	f7ff fb3d 	bl	22b16 <_dtoa_r+0x1d2>
   2349c:	9b06      	ldr	r3, [sp, #24]
   2349e:	465c      	mov	r4, fp
   234a0:	469b      	mov	fp, r3
   234a2:	9b07      	ldr	r3, [sp, #28]
   234a4:	469a      	mov	sl, r3
   234a6:	e47c      	b.n	22da2 <_dtoa_r+0x45e>
   234a8:	4640      	mov	r0, r8
   234aa:	f7fd fbfb 	bl	20ca4 <__aeabi_i2d>
   234ae:	0032      	movs	r2, r6
   234b0:	003b      	movs	r3, r7
   234b2:	f7fc fe0d 	bl	200d0 <__aeabi_dmul>
   234b6:	2200      	movs	r2, #0
   234b8:	4b6b      	ldr	r3, [pc, #428]	; (23668 <_dtoa_r+0xd24>)
   234ba:	f7fb fec5 	bl	1f248 <__aeabi_dadd>
   234be:	4a6b      	ldr	r2, [pc, #428]	; (2366c <_dtoa_r+0xd28>)
   234c0:	000b      	movs	r3, r1
   234c2:	4694      	mov	ip, r2
   234c4:	4463      	add	r3, ip
   234c6:	9008      	str	r0, [sp, #32]
   234c8:	9109      	str	r1, [sp, #36]	; 0x24
   234ca:	9309      	str	r3, [sp, #36]	; 0x24
   234cc:	2200      	movs	r2, #0
   234ce:	4b64      	ldr	r3, [pc, #400]	; (23660 <_dtoa_r+0xd1c>)
   234d0:	0030      	movs	r0, r6
   234d2:	0039      	movs	r1, r7
   234d4:	f7fd f87c 	bl	205d0 <__aeabi_dsub>
   234d8:	9e08      	ldr	r6, [sp, #32]
   234da:	9f09      	ldr	r7, [sp, #36]	; 0x24
   234dc:	0032      	movs	r2, r6
   234de:	003b      	movs	r3, r7
   234e0:	0004      	movs	r4, r0
   234e2:	000d      	movs	r5, r1
   234e4:	f7fa fed0 	bl	1e288 <__aeabi_dcmpgt>
   234e8:	2800      	cmp	r0, #0
   234ea:	d000      	beq.n	234ee <_dtoa_r+0xbaa>
   234ec:	e0b2      	b.n	23654 <_dtoa_r+0xd10>
   234ee:	2080      	movs	r0, #128	; 0x80
   234f0:	0600      	lsls	r0, r0, #24
   234f2:	4684      	mov	ip, r0
   234f4:	0039      	movs	r1, r7
   234f6:	4461      	add	r1, ip
   234f8:	000b      	movs	r3, r1
   234fa:	0032      	movs	r2, r6
   234fc:	0020      	movs	r0, r4
   234fe:	0029      	movs	r1, r5
   23500:	f7fa feae 	bl	1e260 <__aeabi_dcmplt>
   23504:	2800      	cmp	r0, #0
   23506:	d057      	beq.n	235b8 <_dtoa_r+0xc74>
   23508:	2300      	movs	r3, #0
   2350a:	4699      	mov	r9, r3
   2350c:	4698      	mov	r8, r3
   2350e:	e75c      	b.n	233ca <_dtoa_r+0xa86>
   23510:	980a      	ldr	r0, [sp, #40]	; 0x28
   23512:	f7ff fa4c 	bl	229ae <_dtoa_r+0x6a>
   23516:	1ae2      	subs	r2, r4, r3
   23518:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2351a:	46a1      	mov	r9, r4
   2351c:	469c      	mov	ip, r3
   2351e:	4494      	add	ip, r2
   23520:	4663      	mov	r3, ip
   23522:	2400      	movs	r4, #0
   23524:	930d      	str	r3, [sp, #52]	; 0x34
   23526:	e53e      	b.n	22fa6 <_dtoa_r+0x662>
   23528:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2352a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2352c:	9208      	str	r2, [sp, #32]
   2352e:	9309      	str	r3, [sp, #36]	; 0x24
   23530:	2302      	movs	r3, #2
   23532:	4698      	mov	r8, r3
   23534:	f7ff fb3a 	bl	22bac <_dtoa_r+0x268>
   23538:	2300      	movs	r3, #0
   2353a:	4652      	mov	r2, sl
   2353c:	2100      	movs	r1, #0
   2353e:	6453      	str	r3, [r2, #68]	; 0x44
   23540:	4650      	mov	r0, sl
   23542:	f000 fcf3 	bl	23f2c <_Balloc>
   23546:	4653      	mov	r3, sl
   23548:	6418      	str	r0, [r3, #64]	; 0x40
   2354a:	2301      	movs	r3, #1
   2354c:	900a      	str	r0, [sp, #40]	; 0x28
   2354e:	9307      	str	r3, [sp, #28]
   23550:	9323      	str	r3, [sp, #140]	; 0x8c
   23552:	930e      	str	r3, [sp, #56]	; 0x38
   23554:	f7ff fb07 	bl	22b66 <_dtoa_r+0x222>
   23558:	4643      	mov	r3, r8
   2355a:	930c      	str	r3, [sp, #48]	; 0x30
   2355c:	465b      	mov	r3, fp
   2355e:	9a06      	ldr	r2, [sp, #24]
   23560:	46a8      	mov	r8, r5
   23562:	46b3      	mov	fp, r6
   23564:	4655      	mov	r5, sl
   23566:	9e04      	ldr	r6, [sp, #16]
   23568:	4691      	mov	r9, r2
   2356a:	46ba      	mov	sl, r7
   2356c:	2b00      	cmp	r3, #0
   2356e:	dd10      	ble.n	23592 <_dtoa_r+0xc4e>
   23570:	4659      	mov	r1, fp
   23572:	2201      	movs	r2, #1
   23574:	0038      	movs	r0, r7
   23576:	f000 fead 	bl	242d4 <__lshift>
   2357a:	4649      	mov	r1, r9
   2357c:	4683      	mov	fp, r0
   2357e:	f000 ff09 	bl	24394 <__mcmp>
   23582:	2800      	cmp	r0, #0
   23584:	dc00      	bgt.n	23588 <_dtoa_r+0xc44>
   23586:	e157      	b.n	23838 <_dtoa_r+0xef4>
   23588:	2e39      	cmp	r6, #57	; 0x39
   2358a:	d100      	bne.n	2358e <_dtoa_r+0xc4a>
   2358c:	e122      	b.n	237d4 <_dtoa_r+0xe90>
   2358e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   23590:	3631      	adds	r6, #49	; 0x31
   23592:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   23594:	4647      	mov	r7, r8
   23596:	1c6c      	adds	r4, r5, #1
   23598:	702e      	strb	r6, [r5, #0]
   2359a:	4698      	mov	r8, r3
   2359c:	e6c9      	b.n	23332 <_dtoa_r+0x9ee>
   2359e:	2800      	cmp	r0, #0
   235a0:	d103      	bne.n	235aa <_dtoa_r+0xc66>
   235a2:	07f3      	lsls	r3, r6, #31
   235a4:	d501      	bpl.n	235aa <_dtoa_r+0xc66>
   235a6:	e6b5      	b.n	23314 <_dtoa_r+0x9d0>
   235a8:	001c      	movs	r4, r3
   235aa:	1e63      	subs	r3, r4, #1
   235ac:	781a      	ldrb	r2, [r3, #0]
   235ae:	2a30      	cmp	r2, #48	; 0x30
   235b0:	d0fa      	beq.n	235a8 <_dtoa_r+0xc64>
   235b2:	e6be      	b.n	23332 <_dtoa_r+0x9ee>
   235b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   235b6:	4699      	mov	r9, r3
   235b8:	9e10      	ldr	r6, [sp, #64]	; 0x40
   235ba:	9f11      	ldr	r7, [sp, #68]	; 0x44
   235bc:	e435      	b.n	22e2a <_dtoa_r+0x4e6>
   235be:	2501      	movs	r5, #1
   235c0:	f7ff fab4 	bl	22b2c <_dtoa_r+0x1e8>
   235c4:	9b03      	ldr	r3, [sp, #12]
   235c6:	2b00      	cmp	r3, #0
   235c8:	d100      	bne.n	235cc <_dtoa_r+0xc88>
   235ca:	e0d4      	b.n	23776 <_dtoa_r+0xe32>
   235cc:	9810      	ldr	r0, [sp, #64]	; 0x40
   235ce:	9911      	ldr	r1, [sp, #68]	; 0x44
   235d0:	425c      	negs	r4, r3
   235d2:	230f      	movs	r3, #15
   235d4:	4a26      	ldr	r2, [pc, #152]	; (23670 <_dtoa_r+0xd2c>)
   235d6:	4023      	ands	r3, r4
   235d8:	00db      	lsls	r3, r3, #3
   235da:	18d3      	adds	r3, r2, r3
   235dc:	681a      	ldr	r2, [r3, #0]
   235de:	685b      	ldr	r3, [r3, #4]
   235e0:	f7fc fd76 	bl	200d0 <__aeabi_dmul>
   235e4:	1124      	asrs	r4, r4, #4
   235e6:	0006      	movs	r6, r0
   235e8:	000f      	movs	r7, r1
   235ea:	2c00      	cmp	r4, #0
   235ec:	d100      	bne.n	235f0 <_dtoa_r+0xcac>
   235ee:	e149      	b.n	23884 <_dtoa_r+0xf40>
   235f0:	2302      	movs	r3, #2
   235f2:	4698      	mov	r8, r3
   235f4:	4d1f      	ldr	r5, [pc, #124]	; (23674 <_dtoa_r+0xd30>)
   235f6:	2301      	movs	r3, #1
   235f8:	4223      	tst	r3, r4
   235fa:	d009      	beq.n	23610 <_dtoa_r+0xccc>
   235fc:	469c      	mov	ip, r3
   235fe:	682a      	ldr	r2, [r5, #0]
   23600:	686b      	ldr	r3, [r5, #4]
   23602:	0030      	movs	r0, r6
   23604:	0039      	movs	r1, r7
   23606:	44e0      	add	r8, ip
   23608:	f7fc fd62 	bl	200d0 <__aeabi_dmul>
   2360c:	0006      	movs	r6, r0
   2360e:	000f      	movs	r7, r1
   23610:	1064      	asrs	r4, r4, #1
   23612:	3508      	adds	r5, #8
   23614:	2c00      	cmp	r4, #0
   23616:	d1ee      	bne.n	235f6 <_dtoa_r+0xcb2>
   23618:	f7ff fae4 	bl	22be4 <_dtoa_r+0x2a0>
   2361c:	9b03      	ldr	r3, [sp, #12]
   2361e:	2730      	movs	r7, #48	; 0x30
   23620:	3301      	adds	r3, #1
   23622:	9303      	str	r3, [sp, #12]
   23624:	2330      	movs	r3, #48	; 0x30
   23626:	702b      	strb	r3, [r5, #0]
   23628:	e4ac      	b.n	22f84 <_dtoa_r+0x640>
   2362a:	6859      	ldr	r1, [r3, #4]
   2362c:	4650      	mov	r0, sl
   2362e:	f000 fc7d 	bl	23f2c <_Balloc>
   23632:	4643      	mov	r3, r8
   23634:	4641      	mov	r1, r8
   23636:	0004      	movs	r4, r0
   23638:	691b      	ldr	r3, [r3, #16]
   2363a:	310c      	adds	r1, #12
   2363c:	1c9a      	adds	r2, r3, #2
   2363e:	0092      	lsls	r2, r2, #2
   23640:	300c      	adds	r0, #12
   23642:	f7fd fcaf 	bl	20fa4 <memcpy>
   23646:	2201      	movs	r2, #1
   23648:	0021      	movs	r1, r4
   2364a:	4650      	mov	r0, sl
   2364c:	f000 fe42 	bl	242d4 <__lshift>
   23650:	900c      	str	r0, [sp, #48]	; 0x30
   23652:	e599      	b.n	23188 <_dtoa_r+0x844>
   23654:	2300      	movs	r3, #0
   23656:	4699      	mov	r9, r3
   23658:	4698      	mov	r8, r3
   2365a:	e70c      	b.n	23476 <_dtoa_r+0xb32>
   2365c:	7ff00000 	.word	0x7ff00000
   23660:	40140000 	.word	0x40140000
   23664:	00000433 	.word	0x00000433
   23668:	401c0000 	.word	0x401c0000
   2366c:	fcc00000 	.word	0xfcc00000
   23670:	000270d8 	.word	0x000270d8
   23674:	000270b0 	.word	0x000270b0
   23678:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2367a:	498f      	ldr	r1, [pc, #572]	; (238b8 <_dtoa_r+0xf74>)
   2367c:	3b01      	subs	r3, #1
   2367e:	00db      	lsls	r3, r3, #3
   23680:	18c9      	adds	r1, r1, r3
   23682:	6808      	ldr	r0, [r1, #0]
   23684:	6849      	ldr	r1, [r1, #4]
   23686:	9a08      	ldr	r2, [sp, #32]
   23688:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2368a:	f7fc fd21 	bl	200d0 <__aeabi_dmul>
   2368e:	9014      	str	r0, [sp, #80]	; 0x50
   23690:	9115      	str	r1, [sp, #84]	; 0x54
   23692:	0039      	movs	r1, r7
   23694:	0030      	movs	r0, r6
   23696:	f7fd fad1 	bl	20c3c <__aeabi_d2iz>
   2369a:	0005      	movs	r5, r0
   2369c:	f7fd fb02 	bl	20ca4 <__aeabi_i2d>
   236a0:	0002      	movs	r2, r0
   236a2:	000b      	movs	r3, r1
   236a4:	0030      	movs	r0, r6
   236a6:	0039      	movs	r1, r7
   236a8:	f7fc ff92 	bl	205d0 <__aeabi_dsub>
   236ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
   236ae:	9008      	str	r0, [sp, #32]
   236b0:	9109      	str	r1, [sp, #36]	; 0x24
   236b2:	990a      	ldr	r1, [sp, #40]	; 0x28
   236b4:	001a      	movs	r2, r3
   236b6:	468c      	mov	ip, r1
   236b8:	3530      	adds	r5, #48	; 0x30
   236ba:	4462      	add	r2, ip
   236bc:	1c4c      	adds	r4, r1, #1
   236be:	700d      	strb	r5, [r1, #0]
   236c0:	4690      	mov	r8, r2
   236c2:	2b01      	cmp	r3, #1
   236c4:	d01b      	beq.n	236fe <_dtoa_r+0xdba>
   236c6:	9808      	ldr	r0, [sp, #32]
   236c8:	9909      	ldr	r1, [sp, #36]	; 0x24
   236ca:	0025      	movs	r5, r4
   236cc:	2200      	movs	r2, #0
   236ce:	4b7b      	ldr	r3, [pc, #492]	; (238bc <_dtoa_r+0xf78>)
   236d0:	f7fc fcfe 	bl	200d0 <__aeabi_dmul>
   236d4:	000f      	movs	r7, r1
   236d6:	0006      	movs	r6, r0
   236d8:	f7fd fab0 	bl	20c3c <__aeabi_d2iz>
   236dc:	0004      	movs	r4, r0
   236de:	f7fd fae1 	bl	20ca4 <__aeabi_i2d>
   236e2:	3430      	adds	r4, #48	; 0x30
   236e4:	0002      	movs	r2, r0
   236e6:	000b      	movs	r3, r1
   236e8:	0030      	movs	r0, r6
   236ea:	0039      	movs	r1, r7
   236ec:	f7fc ff70 	bl	205d0 <__aeabi_dsub>
   236f0:	702c      	strb	r4, [r5, #0]
   236f2:	3501      	adds	r5, #1
   236f4:	45a8      	cmp	r8, r5
   236f6:	d1e9      	bne.n	236cc <_dtoa_r+0xd88>
   236f8:	4644      	mov	r4, r8
   236fa:	9008      	str	r0, [sp, #32]
   236fc:	9109      	str	r1, [sp, #36]	; 0x24
   236fe:	9814      	ldr	r0, [sp, #80]	; 0x50
   23700:	9915      	ldr	r1, [sp, #84]	; 0x54
   23702:	2200      	movs	r2, #0
   23704:	4b6e      	ldr	r3, [pc, #440]	; (238c0 <_dtoa_r+0xf7c>)
   23706:	f7fb fd9f 	bl	1f248 <__aeabi_dadd>
   2370a:	9a08      	ldr	r2, [sp, #32]
   2370c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2370e:	f7fa fda7 	bl	1e260 <__aeabi_dcmplt>
   23712:	2800      	cmp	r0, #0
   23714:	d067      	beq.n	237e6 <_dtoa_r+0xea2>
   23716:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   23718:	1e65      	subs	r5, r4, #1
   2371a:	9303      	str	r3, [sp, #12]
   2371c:	782f      	ldrb	r7, [r5, #0]
   2371e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   23720:	e42e      	b.n	22f80 <_dtoa_r+0x63c>
   23722:	4643      	mov	r3, r8
   23724:	46b3      	mov	fp, r6
   23726:	930c      	str	r3, [sp, #48]	; 0x30
   23728:	9e04      	ldr	r6, [sp, #16]
   2372a:	9b06      	ldr	r3, [sp, #24]
   2372c:	46a8      	mov	r8, r5
   2372e:	4699      	mov	r9, r3
   23730:	4655      	mov	r5, sl
   23732:	46ba      	mov	sl, r7
   23734:	2e39      	cmp	r6, #57	; 0x39
   23736:	d04d      	beq.n	237d4 <_dtoa_r+0xe90>
   23738:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2373a:	3601      	adds	r6, #1
   2373c:	4647      	mov	r7, r8
   2373e:	1c6c      	adds	r4, r5, #1
   23740:	702e      	strb	r6, [r5, #0]
   23742:	4698      	mov	r8, r3
   23744:	e5f5      	b.n	23332 <_dtoa_r+0x9ee>
   23746:	4642      	mov	r2, r8
   23748:	9b06      	ldr	r3, [sp, #24]
   2374a:	46b3      	mov	fp, r6
   2374c:	46ba      	mov	sl, r7
   2374e:	9e04      	ldr	r6, [sp, #16]
   23750:	4699      	mov	r9, r3
   23752:	002f      	movs	r7, r5
   23754:	4690      	mov	r8, r2
   23756:	e5d1      	b.n	232fc <_dtoa_r+0x9b8>
   23758:	9b06      	ldr	r3, [sp, #24]
   2375a:	9a07      	ldr	r2, [sp, #28]
   2375c:	1a9b      	subs	r3, r3, r2
   2375e:	9308      	str	r3, [sp, #32]
   23760:	2300      	movs	r3, #0
   23762:	e427      	b.n	22fb4 <_dtoa_r+0x670>
   23764:	2401      	movs	r4, #1
   23766:	e5c5      	b.n	232f4 <_dtoa_r+0x9b0>
   23768:	2336      	movs	r3, #54	; 0x36
   2376a:	9a16      	ldr	r2, [sp, #88]	; 0x58
   2376c:	464c      	mov	r4, r9
   2376e:	1a9b      	subs	r3, r3, r2
   23770:	9a06      	ldr	r2, [sp, #24]
   23772:	9208      	str	r2, [sp, #32]
   23774:	e41e      	b.n	22fb4 <_dtoa_r+0x670>
   23776:	2302      	movs	r3, #2
   23778:	9e10      	ldr	r6, [sp, #64]	; 0x40
   2377a:	9f11      	ldr	r7, [sp, #68]	; 0x44
   2377c:	4698      	mov	r8, r3
   2377e:	f7ff fa31 	bl	22be4 <_dtoa_r+0x2a0>
   23782:	9b07      	ldr	r3, [sp, #28]
   23784:	2b00      	cmp	r3, #0
   23786:	d100      	bne.n	2378a <_dtoa_r+0xe46>
   23788:	e68e      	b.n	234a8 <_dtoa_r+0xb64>
   2378a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   2378c:	2c00      	cmp	r4, #0
   2378e:	dc00      	bgt.n	23792 <_dtoa_r+0xe4e>
   23790:	e712      	b.n	235b8 <_dtoa_r+0xc74>
   23792:	9b03      	ldr	r3, [sp, #12]
   23794:	2200      	movs	r2, #0
   23796:	3b01      	subs	r3, #1
   23798:	9313      	str	r3, [sp, #76]	; 0x4c
   2379a:	0030      	movs	r0, r6
   2379c:	4b47      	ldr	r3, [pc, #284]	; (238bc <_dtoa_r+0xf78>)
   2379e:	0039      	movs	r1, r7
   237a0:	f7fc fc96 	bl	200d0 <__aeabi_dmul>
   237a4:	0006      	movs	r6, r0
   237a6:	4640      	mov	r0, r8
   237a8:	000f      	movs	r7, r1
   237aa:	3001      	adds	r0, #1
   237ac:	f7fd fa7a 	bl	20ca4 <__aeabi_i2d>
   237b0:	0032      	movs	r2, r6
   237b2:	003b      	movs	r3, r7
   237b4:	f7fc fc8c 	bl	200d0 <__aeabi_dmul>
   237b8:	2200      	movs	r2, #0
   237ba:	4b42      	ldr	r3, [pc, #264]	; (238c4 <_dtoa_r+0xf80>)
   237bc:	f7fb fd44 	bl	1f248 <__aeabi_dadd>
   237c0:	4a41      	ldr	r2, [pc, #260]	; (238c8 <_dtoa_r+0xf84>)
   237c2:	000b      	movs	r3, r1
   237c4:	4694      	mov	ip, r2
   237c6:	4463      	add	r3, ip
   237c8:	9008      	str	r0, [sp, #32]
   237ca:	9109      	str	r1, [sp, #36]	; 0x24
   237cc:	9412      	str	r4, [sp, #72]	; 0x48
   237ce:	9309      	str	r3, [sp, #36]	; 0x24
   237d0:	f7ff fa30 	bl	22c34 <_dtoa_r+0x2f0>
   237d4:	2339      	movs	r3, #57	; 0x39
   237d6:	702b      	strb	r3, [r5, #0]
   237d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   237da:	4647      	mov	r7, r8
   237dc:	1c6c      	adds	r4, r5, #1
   237de:	4698      	mov	r8, r3
   237e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   237e2:	2339      	movs	r3, #57	; 0x39
   237e4:	e5a1      	b.n	2332a <_dtoa_r+0x9e6>
   237e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   237e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   237ea:	2000      	movs	r0, #0
   237ec:	4934      	ldr	r1, [pc, #208]	; (238c0 <_dtoa_r+0xf7c>)
   237ee:	f7fc feef 	bl	205d0 <__aeabi_dsub>
   237f2:	9a08      	ldr	r2, [sp, #32]
   237f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   237f6:	f7fa fd47 	bl	1e288 <__aeabi_dcmpgt>
   237fa:	2800      	cmp	r0, #0
   237fc:	d101      	bne.n	23802 <_dtoa_r+0xebe>
   237fe:	e6db      	b.n	235b8 <_dtoa_r+0xc74>
   23800:	001c      	movs	r4, r3
   23802:	1e63      	subs	r3, r4, #1
   23804:	781a      	ldrb	r2, [r3, #0]
   23806:	2a30      	cmp	r2, #48	; 0x30
   23808:	d0fa      	beq.n	23800 <_dtoa_r+0xebc>
   2380a:	f7ff fac8 	bl	22d9e <_dtoa_r+0x45a>
   2380e:	4643      	mov	r3, r8
   23810:	46b3      	mov	fp, r6
   23812:	930c      	str	r3, [sp, #48]	; 0x30
   23814:	9e04      	ldr	r6, [sp, #16]
   23816:	9b06      	ldr	r3, [sp, #24]
   23818:	46a8      	mov	r8, r5
   2381a:	4699      	mov	r9, r3
   2381c:	4655      	mov	r5, sl
   2381e:	46ba      	mov	sl, r7
   23820:	2e39      	cmp	r6, #57	; 0x39
   23822:	d0d7      	beq.n	237d4 <_dtoa_r+0xe90>
   23824:	2c00      	cmp	r4, #0
   23826:	dd00      	ble.n	2382a <_dtoa_r+0xee6>
   23828:	e6b1      	b.n	2358e <_dtoa_r+0xc4a>
   2382a:	e6b2      	b.n	23592 <_dtoa_r+0xc4e>
   2382c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2382e:	464d      	mov	r5, r9
   23830:	9203      	str	r2, [sp, #12]
   23832:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   23834:	f7ff fba4 	bl	22f80 <_dtoa_r+0x63c>
   23838:	2800      	cmp	r0, #0
   2383a:	d000      	beq.n	2383e <_dtoa_r+0xefa>
   2383c:	e6a9      	b.n	23592 <_dtoa_r+0xc4e>
   2383e:	07f3      	lsls	r3, r6, #31
   23840:	d400      	bmi.n	23844 <_dtoa_r+0xf00>
   23842:	e6a6      	b.n	23592 <_dtoa_r+0xc4e>
   23844:	e6a0      	b.n	23588 <_dtoa_r+0xc44>
   23846:	2300      	movs	r3, #0
   23848:	4641      	mov	r1, r8
   2384a:	220a      	movs	r2, #10
   2384c:	4650      	mov	r0, sl
   2384e:	f000 fb9f 	bl	23f90 <__multadd>
   23852:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   23854:	4680      	mov	r8, r0
   23856:	2b00      	cmp	r3, #0
   23858:	dd01      	ble.n	2385e <_dtoa_r+0xf1a>
   2385a:	9307      	str	r3, [sp, #28]
   2385c:	e486      	b.n	2316c <_dtoa_r+0x828>
   2385e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   23860:	2b02      	cmp	r3, #2
   23862:	dc1f      	bgt.n	238a4 <_dtoa_r+0xf60>
   23864:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   23866:	9307      	str	r3, [sp, #28]
   23868:	e480      	b.n	2316c <_dtoa_r+0x828>
   2386a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2386c:	2b02      	cmp	r3, #2
   2386e:	dc19      	bgt.n	238a4 <_dtoa_r+0xf60>
   23870:	4649      	mov	r1, r9
   23872:	f7fe ffbd 	bl	227f0 <quorem>
   23876:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   23878:	3030      	adds	r0, #48	; 0x30
   2387a:	7018      	strb	r0, [r3, #0]
   2387c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2387e:	0006      	movs	r6, r0
   23880:	9307      	str	r3, [sp, #28]
   23882:	e533      	b.n	232ec <_dtoa_r+0x9a8>
   23884:	2302      	movs	r3, #2
   23886:	4698      	mov	r8, r3
   23888:	f7ff f9ac 	bl	22be4 <_dtoa_r+0x2a0>
   2388c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2388e:	9c14      	ldr	r4, [sp, #80]	; 0x50
   23890:	9303      	str	r3, [sp, #12]
   23892:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   23894:	001d      	movs	r5, r3
   23896:	f7ff fb73 	bl	22f80 <_dtoa_r+0x63c>
   2389a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2389c:	9c14      	ldr	r4, [sp, #80]	; 0x50
   2389e:	9303      	str	r3, [sp, #12]
   238a0:	f7ff fa7f 	bl	22da2 <_dtoa_r+0x45e>
   238a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   238a6:	9307      	str	r3, [sp, #28]
   238a8:	e5d6      	b.n	23458 <_dtoa_r+0xb14>
   238aa:	2b04      	cmp	r3, #4
   238ac:	d100      	bne.n	238b0 <_dtoa_r+0xf6c>
   238ae:	e43f      	b.n	23130 <_dtoa_r+0x7ec>
   238b0:	233c      	movs	r3, #60	; 0x3c
   238b2:	1a18      	subs	r0, r3, r0
   238b4:	e4d7      	b.n	23266 <_dtoa_r+0x922>
   238b6:	46c0      	nop			; (mov r8, r8)
   238b8:	000270d8 	.word	0x000270d8
   238bc:	40240000 	.word	0x40240000
   238c0:	3fe00000 	.word	0x3fe00000
   238c4:	401c0000 	.word	0x401c0000
   238c8:	fcc00000 	.word	0xfcc00000

000238cc <__libc_fini_array>:
   238cc:	b570      	push	{r4, r5, r6, lr}
   238ce:	4b09      	ldr	r3, [pc, #36]	; (238f4 <__libc_fini_array+0x28>)
   238d0:	4c09      	ldr	r4, [pc, #36]	; (238f8 <__libc_fini_array+0x2c>)
   238d2:	1ae4      	subs	r4, r4, r3
   238d4:	10a4      	asrs	r4, r4, #2
   238d6:	d009      	beq.n	238ec <__libc_fini_array+0x20>
   238d8:	4a08      	ldr	r2, [pc, #32]	; (238fc <__libc_fini_array+0x30>)
   238da:	18a5      	adds	r5, r4, r2
   238dc:	00ad      	lsls	r5, r5, #2
   238de:	18ed      	adds	r5, r5, r3
   238e0:	682b      	ldr	r3, [r5, #0]
   238e2:	3c01      	subs	r4, #1
   238e4:	4798      	blx	r3
   238e6:	3d04      	subs	r5, #4
   238e8:	2c00      	cmp	r4, #0
   238ea:	d1f9      	bne.n	238e0 <__libc_fini_array+0x14>
   238ec:	f003 fcf2 	bl	272d4 <_fini>
   238f0:	bd70      	pop	{r4, r5, r6, pc}
   238f2:	46c0      	nop			; (mov r8, r8)
   238f4:	000272e0 	.word	0x000272e0
   238f8:	000272e4 	.word	0x000272e4
   238fc:	3fffffff 	.word	0x3fffffff

00023900 <_localeconv_r>:
   23900:	4b04      	ldr	r3, [pc, #16]	; (23914 <_localeconv_r+0x14>)
   23902:	681b      	ldr	r3, [r3, #0]
   23904:	6b58      	ldr	r0, [r3, #52]	; 0x34
   23906:	2800      	cmp	r0, #0
   23908:	d001      	beq.n	2390e <_localeconv_r+0xe>
   2390a:	30f0      	adds	r0, #240	; 0xf0
   2390c:	4770      	bx	lr
   2390e:	4802      	ldr	r0, [pc, #8]	; (23918 <_localeconv_r+0x18>)
   23910:	e7fb      	b.n	2390a <_localeconv_r+0xa>
   23912:	46c0      	nop			; (mov r8, r8)
   23914:	200002cc 	.word	0x200002cc
   23918:	20000b0c 	.word	0x20000b0c

0002391c <__retarget_lock_acquire_recursive>:
   2391c:	4770      	bx	lr
   2391e:	46c0      	nop			; (mov r8, r8)

00023920 <__retarget_lock_release_recursive>:
   23920:	4770      	bx	lr
   23922:	46c0      	nop			; (mov r8, r8)

00023924 <_malloc_r>:
   23924:	b5f0      	push	{r4, r5, r6, r7, lr}
   23926:	4657      	mov	r7, sl
   23928:	4645      	mov	r5, r8
   2392a:	46de      	mov	lr, fp
   2392c:	464e      	mov	r6, r9
   2392e:	b5e0      	push	{r5, r6, r7, lr}
   23930:	000d      	movs	r5, r1
   23932:	350b      	adds	r5, #11
   23934:	b083      	sub	sp, #12
   23936:	0007      	movs	r7, r0
   23938:	2d16      	cmp	r5, #22
   2393a:	d800      	bhi.n	2393e <_malloc_r+0x1a>
   2393c:	e09f      	b.n	23a7e <_malloc_r+0x15a>
   2393e:	2307      	movs	r3, #7
   23940:	439d      	bics	r5, r3
   23942:	d500      	bpl.n	23946 <_malloc_r+0x22>
   23944:	e0c4      	b.n	23ad0 <_malloc_r+0x1ac>
   23946:	42a9      	cmp	r1, r5
   23948:	d900      	bls.n	2394c <_malloc_r+0x28>
   2394a:	e0c1      	b.n	23ad0 <_malloc_r+0x1ac>
   2394c:	f000 fade 	bl	23f0c <__malloc_lock>
   23950:	23f8      	movs	r3, #248	; 0xf8
   23952:	33ff      	adds	r3, #255	; 0xff
   23954:	429d      	cmp	r5, r3
   23956:	d800      	bhi.n	2395a <_malloc_r+0x36>
   23958:	e28f      	b.n	23e7a <_malloc_r+0x556>
   2395a:	0a68      	lsrs	r0, r5, #9
   2395c:	d100      	bne.n	23960 <_malloc_r+0x3c>
   2395e:	e0bb      	b.n	23ad8 <_malloc_r+0x1b4>
   23960:	2804      	cmp	r0, #4
   23962:	d900      	bls.n	23966 <_malloc_r+0x42>
   23964:	e162      	b.n	23c2c <_malloc_r+0x308>
   23966:	2338      	movs	r3, #56	; 0x38
   23968:	4698      	mov	r8, r3
   2396a:	09a8      	lsrs	r0, r5, #6
   2396c:	4480      	add	r8, r0
   2396e:	3039      	adds	r0, #57	; 0x39
   23970:	00c1      	lsls	r1, r0, #3
   23972:	4ed2      	ldr	r6, [pc, #840]	; (23cbc <_malloc_r+0x398>)
   23974:	1871      	adds	r1, r6, r1
   23976:	3908      	subs	r1, #8
   23978:	68cc      	ldr	r4, [r1, #12]
   2397a:	42a1      	cmp	r1, r4
   2397c:	d019      	beq.n	239b2 <_malloc_r+0x8e>
   2397e:	2303      	movs	r3, #3
   23980:	6862      	ldr	r2, [r4, #4]
   23982:	439a      	bics	r2, r3
   23984:	0013      	movs	r3, r2
   23986:	1b52      	subs	r2, r2, r5
   23988:	2a0f      	cmp	r2, #15
   2398a:	dd00      	ble.n	2398e <_malloc_r+0x6a>
   2398c:	e0aa      	b.n	23ae4 <_malloc_r+0x1c0>
   2398e:	2a00      	cmp	r2, #0
   23990:	db00      	blt.n	23994 <_malloc_r+0x70>
   23992:	e088      	b.n	23aa6 <_malloc_r+0x182>
   23994:	2303      	movs	r3, #3
   23996:	469c      	mov	ip, r3
   23998:	e008      	b.n	239ac <_malloc_r+0x88>
   2399a:	4662      	mov	r2, ip
   2399c:	6863      	ldr	r3, [r4, #4]
   2399e:	4393      	bics	r3, r2
   239a0:	1b5a      	subs	r2, r3, r5
   239a2:	2a0f      	cmp	r2, #15
   239a4:	dd00      	ble.n	239a8 <_malloc_r+0x84>
   239a6:	e09d      	b.n	23ae4 <_malloc_r+0x1c0>
   239a8:	2a00      	cmp	r2, #0
   239aa:	da7c      	bge.n	23aa6 <_malloc_r+0x182>
   239ac:	68e4      	ldr	r4, [r4, #12]
   239ae:	42a1      	cmp	r1, r4
   239b0:	d1f3      	bne.n	2399a <_malloc_r+0x76>
   239b2:	0032      	movs	r2, r6
   239b4:	6934      	ldr	r4, [r6, #16]
   239b6:	3208      	adds	r2, #8
   239b8:	4294      	cmp	r4, r2
   239ba:	d100      	bne.n	239be <_malloc_r+0x9a>
   239bc:	e190      	b.n	23ce0 <_malloc_r+0x3bc>
   239be:	2303      	movs	r3, #3
   239c0:	6861      	ldr	r1, [r4, #4]
   239c2:	4399      	bics	r1, r3
   239c4:	4689      	mov	r9, r1
   239c6:	1b49      	subs	r1, r1, r5
   239c8:	290f      	cmp	r1, #15
   239ca:	dd00      	ble.n	239ce <_malloc_r+0xaa>
   239cc:	e162      	b.n	23c94 <_malloc_r+0x370>
   239ce:	6172      	str	r2, [r6, #20]
   239d0:	6132      	str	r2, [r6, #16]
   239d2:	2900      	cmp	r1, #0
   239d4:	db00      	blt.n	239d8 <_malloc_r+0xb4>
   239d6:	e087      	b.n	23ae8 <_malloc_r+0x1c4>
   239d8:	4ab9      	ldr	r2, [pc, #740]	; (23cc0 <_malloc_r+0x39c>)
   239da:	464b      	mov	r3, r9
   239dc:	4591      	cmp	r9, r2
   239de:	d900      	bls.n	239e2 <_malloc_r+0xbe>
   239e0:	e130      	b.n	23c44 <_malloc_r+0x320>
   239e2:	08db      	lsrs	r3, r3, #3
   239e4:	3aff      	subs	r2, #255	; 0xff
   239e6:	1099      	asrs	r1, r3, #2
   239e8:	3aff      	subs	r2, #255	; 0xff
   239ea:	408a      	lsls	r2, r1
   239ec:	00db      	lsls	r3, r3, #3
   239ee:	6871      	ldr	r1, [r6, #4]
   239f0:	199b      	adds	r3, r3, r6
   239f2:	430a      	orrs	r2, r1
   239f4:	6899      	ldr	r1, [r3, #8]
   239f6:	6072      	str	r2, [r6, #4]
   239f8:	60e3      	str	r3, [r4, #12]
   239fa:	60a1      	str	r1, [r4, #8]
   239fc:	609c      	str	r4, [r3, #8]
   239fe:	0013      	movs	r3, r2
   23a00:	60cc      	str	r4, [r1, #12]
   23a02:	2101      	movs	r1, #1
   23a04:	1082      	asrs	r2, r0, #2
   23a06:	4091      	lsls	r1, r2
   23a08:	4299      	cmp	r1, r3
   23a0a:	d86f      	bhi.n	23aec <_malloc_r+0x1c8>
   23a0c:	420b      	tst	r3, r1
   23a0e:	d105      	bne.n	23a1c <_malloc_r+0xf8>
   23a10:	2203      	movs	r2, #3
   23a12:	4390      	bics	r0, r2
   23a14:	0049      	lsls	r1, r1, #1
   23a16:	3004      	adds	r0, #4
   23a18:	420b      	tst	r3, r1
   23a1a:	d0fb      	beq.n	23a14 <_malloc_r+0xf0>
   23a1c:	2303      	movs	r3, #3
   23a1e:	4698      	mov	r8, r3
   23a20:	00c3      	lsls	r3, r0, #3
   23a22:	4699      	mov	r9, r3
   23a24:	44b1      	add	r9, r6
   23a26:	46cc      	mov	ip, r9
   23a28:	4682      	mov	sl, r0
   23a2a:	4663      	mov	r3, ip
   23a2c:	68dc      	ldr	r4, [r3, #12]
   23a2e:	45a4      	cmp	ip, r4
   23a30:	d107      	bne.n	23a42 <_malloc_r+0x11e>
   23a32:	e157      	b.n	23ce4 <_malloc_r+0x3c0>
   23a34:	2a00      	cmp	r2, #0
   23a36:	db00      	blt.n	23a3a <_malloc_r+0x116>
   23a38:	e166      	b.n	23d08 <_malloc_r+0x3e4>
   23a3a:	68e4      	ldr	r4, [r4, #12]
   23a3c:	45a4      	cmp	ip, r4
   23a3e:	d100      	bne.n	23a42 <_malloc_r+0x11e>
   23a40:	e150      	b.n	23ce4 <_malloc_r+0x3c0>
   23a42:	4642      	mov	r2, r8
   23a44:	6863      	ldr	r3, [r4, #4]
   23a46:	4393      	bics	r3, r2
   23a48:	1b5a      	subs	r2, r3, r5
   23a4a:	2a0f      	cmp	r2, #15
   23a4c:	ddf2      	ble.n	23a34 <_malloc_r+0x110>
   23a4e:	2001      	movs	r0, #1
   23a50:	4680      	mov	r8, r0
   23a52:	1961      	adds	r1, r4, r5
   23a54:	4305      	orrs	r5, r0
   23a56:	6065      	str	r5, [r4, #4]
   23a58:	68a0      	ldr	r0, [r4, #8]
   23a5a:	68e5      	ldr	r5, [r4, #12]
   23a5c:	3608      	adds	r6, #8
   23a5e:	60c5      	str	r5, [r0, #12]
   23a60:	60a8      	str	r0, [r5, #8]
   23a62:	4640      	mov	r0, r8
   23a64:	60f1      	str	r1, [r6, #12]
   23a66:	60b1      	str	r1, [r6, #8]
   23a68:	4310      	orrs	r0, r2
   23a6a:	6048      	str	r0, [r1, #4]
   23a6c:	60ce      	str	r6, [r1, #12]
   23a6e:	608e      	str	r6, [r1, #8]
   23a70:	0038      	movs	r0, r7
   23a72:	50e2      	str	r2, [r4, r3]
   23a74:	f000 fa52 	bl	23f1c <__malloc_unlock>
   23a78:	0020      	movs	r0, r4
   23a7a:	3008      	adds	r0, #8
   23a7c:	e021      	b.n	23ac2 <_malloc_r+0x19e>
   23a7e:	2910      	cmp	r1, #16
   23a80:	d826      	bhi.n	23ad0 <_malloc_r+0x1ac>
   23a82:	0038      	movs	r0, r7
   23a84:	f000 fa42 	bl	23f0c <__malloc_lock>
   23a88:	2510      	movs	r5, #16
   23a8a:	2318      	movs	r3, #24
   23a8c:	2002      	movs	r0, #2
   23a8e:	4e8b      	ldr	r6, [pc, #556]	; (23cbc <_malloc_r+0x398>)
   23a90:	18f3      	adds	r3, r6, r3
   23a92:	001a      	movs	r2, r3
   23a94:	685c      	ldr	r4, [r3, #4]
   23a96:	3a08      	subs	r2, #8
   23a98:	4294      	cmp	r4, r2
   23a9a:	d100      	bne.n	23a9e <_malloc_r+0x17a>
   23a9c:	e12e      	b.n	23cfc <_malloc_r+0x3d8>
   23a9e:	2303      	movs	r3, #3
   23aa0:	6862      	ldr	r2, [r4, #4]
   23aa2:	439a      	bics	r2, r3
   23aa4:	0013      	movs	r3, r2
   23aa6:	68e2      	ldr	r2, [r4, #12]
   23aa8:	68a1      	ldr	r1, [r4, #8]
   23aaa:	60ca      	str	r2, [r1, #12]
   23aac:	6091      	str	r1, [r2, #8]
   23aae:	2201      	movs	r2, #1
   23ab0:	18e3      	adds	r3, r4, r3
   23ab2:	6859      	ldr	r1, [r3, #4]
   23ab4:	0038      	movs	r0, r7
   23ab6:	430a      	orrs	r2, r1
   23ab8:	605a      	str	r2, [r3, #4]
   23aba:	f000 fa2f 	bl	23f1c <__malloc_unlock>
   23abe:	0020      	movs	r0, r4
   23ac0:	3008      	adds	r0, #8
   23ac2:	b003      	add	sp, #12
   23ac4:	bc3c      	pop	{r2, r3, r4, r5}
   23ac6:	4690      	mov	r8, r2
   23ac8:	4699      	mov	r9, r3
   23aca:	46a2      	mov	sl, r4
   23acc:	46ab      	mov	fp, r5
   23ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23ad0:	230c      	movs	r3, #12
   23ad2:	2000      	movs	r0, #0
   23ad4:	603b      	str	r3, [r7, #0]
   23ad6:	e7f4      	b.n	23ac2 <_malloc_r+0x19e>
   23ad8:	2180      	movs	r1, #128	; 0x80
   23ada:	233f      	movs	r3, #63	; 0x3f
   23adc:	2040      	movs	r0, #64	; 0x40
   23ade:	0089      	lsls	r1, r1, #2
   23ae0:	4698      	mov	r8, r3
   23ae2:	e746      	b.n	23972 <_malloc_r+0x4e>
   23ae4:	4640      	mov	r0, r8
   23ae6:	e764      	b.n	239b2 <_malloc_r+0x8e>
   23ae8:	464b      	mov	r3, r9
   23aea:	e7e0      	b.n	23aae <_malloc_r+0x18a>
   23aec:	2303      	movs	r3, #3
   23aee:	68b4      	ldr	r4, [r6, #8]
   23af0:	6862      	ldr	r2, [r4, #4]
   23af2:	439a      	bics	r2, r3
   23af4:	4690      	mov	r8, r2
   23af6:	42aa      	cmp	r2, r5
   23af8:	d303      	bcc.n	23b02 <_malloc_r+0x1de>
   23afa:	1b53      	subs	r3, r2, r5
   23afc:	2b0f      	cmp	r3, #15
   23afe:	dd00      	ble.n	23b02 <_malloc_r+0x1de>
   23b00:	e086      	b.n	23c10 <_malloc_r+0x2ec>
   23b02:	0023      	movs	r3, r4
   23b04:	4443      	add	r3, r8
   23b06:	4a6f      	ldr	r2, [pc, #444]	; (23cc4 <_malloc_r+0x3a0>)
   23b08:	9301      	str	r3, [sp, #4]
   23b0a:	4b6f      	ldr	r3, [pc, #444]	; (23cc8 <_malloc_r+0x3a4>)
   23b0c:	4693      	mov	fp, r2
   23b0e:	681b      	ldr	r3, [r3, #0]
   23b10:	6812      	ldr	r2, [r2, #0]
   23b12:	18eb      	adds	r3, r5, r3
   23b14:	3201      	adds	r2, #1
   23b16:	d100      	bne.n	23b1a <_malloc_r+0x1f6>
   23b18:	e168      	b.n	23dec <_malloc_r+0x4c8>
   23b1a:	4a6c      	ldr	r2, [pc, #432]	; (23ccc <_malloc_r+0x3a8>)
   23b1c:	4694      	mov	ip, r2
   23b1e:	4463      	add	r3, ip
   23b20:	0b1b      	lsrs	r3, r3, #12
   23b22:	031b      	lsls	r3, r3, #12
   23b24:	9300      	str	r3, [sp, #0]
   23b26:	9900      	ldr	r1, [sp, #0]
   23b28:	0038      	movs	r0, r7
   23b2a:	f000 fd47 	bl	245bc <_sbrk_r>
   23b2e:	0003      	movs	r3, r0
   23b30:	4681      	mov	r9, r0
   23b32:	3301      	adds	r3, #1
   23b34:	d061      	beq.n	23bfa <_malloc_r+0x2d6>
   23b36:	9b01      	ldr	r3, [sp, #4]
   23b38:	4283      	cmp	r3, r0
   23b3a:	d900      	bls.n	23b3e <_malloc_r+0x21a>
   23b3c:	e0ff      	b.n	23d3e <_malloc_r+0x41a>
   23b3e:	4b64      	ldr	r3, [pc, #400]	; (23cd0 <_malloc_r+0x3ac>)
   23b40:	9a00      	ldr	r2, [sp, #0]
   23b42:	469a      	mov	sl, r3
   23b44:	681b      	ldr	r3, [r3, #0]
   23b46:	469c      	mov	ip, r3
   23b48:	4653      	mov	r3, sl
   23b4a:	4462      	add	r2, ip
   23b4c:	601a      	str	r2, [r3, #0]
   23b4e:	9b01      	ldr	r3, [sp, #4]
   23b50:	0011      	movs	r1, r2
   23b52:	4283      	cmp	r3, r0
   23b54:	d100      	bne.n	23b58 <_malloc_r+0x234>
   23b56:	e155      	b.n	23e04 <_malloc_r+0x4e0>
   23b58:	465b      	mov	r3, fp
   23b5a:	681b      	ldr	r3, [r3, #0]
   23b5c:	3301      	adds	r3, #1
   23b5e:	d100      	bne.n	23b62 <_malloc_r+0x23e>
   23b60:	e16c      	b.n	23e3c <_malloc_r+0x518>
   23b62:	464b      	mov	r3, r9
   23b64:	9a01      	ldr	r2, [sp, #4]
   23b66:	1a9b      	subs	r3, r3, r2
   23b68:	1859      	adds	r1, r3, r1
   23b6a:	4653      	mov	r3, sl
   23b6c:	6019      	str	r1, [r3, #0]
   23b6e:	2307      	movs	r3, #7
   23b70:	464a      	mov	r2, r9
   23b72:	4013      	ands	r3, r2
   23b74:	d100      	bne.n	23b78 <_malloc_r+0x254>
   23b76:	e124      	b.n	23dc2 <_malloc_r+0x49e>
   23b78:	2108      	movs	r1, #8
   23b7a:	4689      	mov	r9, r1
   23b7c:	4955      	ldr	r1, [pc, #340]	; (23cd4 <_malloc_r+0x3b0>)
   23b7e:	1ad2      	subs	r2, r2, r3
   23b80:	4491      	add	r9, r2
   23b82:	1acb      	subs	r3, r1, r3
   23b84:	9a00      	ldr	r2, [sp, #0]
   23b86:	0038      	movs	r0, r7
   23b88:	444a      	add	r2, r9
   23b8a:	0511      	lsls	r1, r2, #20
   23b8c:	0d09      	lsrs	r1, r1, #20
   23b8e:	1a5b      	subs	r3, r3, r1
   23b90:	0019      	movs	r1, r3
   23b92:	469b      	mov	fp, r3
   23b94:	f000 fd12 	bl	245bc <_sbrk_r>
   23b98:	1c43      	adds	r3, r0, #1
   23b9a:	d100      	bne.n	23b9e <_malloc_r+0x27a>
   23b9c:	e142      	b.n	23e24 <_malloc_r+0x500>
   23b9e:	464b      	mov	r3, r9
   23ba0:	1ac0      	subs	r0, r0, r3
   23ba2:	2301      	movs	r3, #1
   23ba4:	4458      	add	r0, fp
   23ba6:	4318      	orrs	r0, r3
   23ba8:	4653      	mov	r3, sl
   23baa:	681b      	ldr	r3, [r3, #0]
   23bac:	445b      	add	r3, fp
   23bae:	0019      	movs	r1, r3
   23bb0:	4653      	mov	r3, sl
   23bb2:	6019      	str	r1, [r3, #0]
   23bb4:	464b      	mov	r3, r9
   23bb6:	60b3      	str	r3, [r6, #8]
   23bb8:	6058      	str	r0, [r3, #4]
   23bba:	42b4      	cmp	r4, r6
   23bbc:	d013      	beq.n	23be6 <_malloc_r+0x2c2>
   23bbe:	4643      	mov	r3, r8
   23bc0:	2b0f      	cmp	r3, #15
   23bc2:	d800      	bhi.n	23bc6 <_malloc_r+0x2a2>
   23bc4:	e0e8      	b.n	23d98 <_malloc_r+0x474>
   23bc6:	4643      	mov	r3, r8
   23bc8:	2207      	movs	r2, #7
   23bca:	6860      	ldr	r0, [r4, #4]
   23bcc:	3b0c      	subs	r3, #12
   23bce:	4393      	bics	r3, r2
   23bd0:	3a06      	subs	r2, #6
   23bd2:	4002      	ands	r2, r0
   23bd4:	2005      	movs	r0, #5
   23bd6:	431a      	orrs	r2, r3
   23bd8:	6062      	str	r2, [r4, #4]
   23bda:	18e2      	adds	r2, r4, r3
   23bdc:	6050      	str	r0, [r2, #4]
   23bde:	6090      	str	r0, [r2, #8]
   23be0:	2b0f      	cmp	r3, #15
   23be2:	d900      	bls.n	23be6 <_malloc_r+0x2c2>
   23be4:	e122      	b.n	23e2c <_malloc_r+0x508>
   23be6:	4b3c      	ldr	r3, [pc, #240]	; (23cd8 <_malloc_r+0x3b4>)
   23be8:	681a      	ldr	r2, [r3, #0]
   23bea:	4291      	cmp	r1, r2
   23bec:	d900      	bls.n	23bf0 <_malloc_r+0x2cc>
   23bee:	6019      	str	r1, [r3, #0]
   23bf0:	4b3a      	ldr	r3, [pc, #232]	; (23cdc <_malloc_r+0x3b8>)
   23bf2:	681a      	ldr	r2, [r3, #0]
   23bf4:	4291      	cmp	r1, r2
   23bf6:	d900      	bls.n	23bfa <_malloc_r+0x2d6>
   23bf8:	6019      	str	r1, [r3, #0]
   23bfa:	2303      	movs	r3, #3
   23bfc:	68b4      	ldr	r4, [r6, #8]
   23bfe:	6862      	ldr	r2, [r4, #4]
   23c00:	439a      	bics	r2, r3
   23c02:	1b53      	subs	r3, r2, r5
   23c04:	4295      	cmp	r5, r2
   23c06:	d900      	bls.n	23c0a <_malloc_r+0x2e6>
   23c08:	e0c9      	b.n	23d9e <_malloc_r+0x47a>
   23c0a:	2b0f      	cmp	r3, #15
   23c0c:	dc00      	bgt.n	23c10 <_malloc_r+0x2ec>
   23c0e:	e0c6      	b.n	23d9e <_malloc_r+0x47a>
   23c10:	2201      	movs	r2, #1
   23c12:	0029      	movs	r1, r5
   23c14:	4313      	orrs	r3, r2
   23c16:	4311      	orrs	r1, r2
   23c18:	1965      	adds	r5, r4, r5
   23c1a:	6061      	str	r1, [r4, #4]
   23c1c:	0038      	movs	r0, r7
   23c1e:	60b5      	str	r5, [r6, #8]
   23c20:	606b      	str	r3, [r5, #4]
   23c22:	f000 f97b 	bl	23f1c <__malloc_unlock>
   23c26:	0020      	movs	r0, r4
   23c28:	3008      	adds	r0, #8
   23c2a:	e74a      	b.n	23ac2 <_malloc_r+0x19e>
   23c2c:	2814      	cmp	r0, #20
   23c2e:	d97a      	bls.n	23d26 <_malloc_r+0x402>
   23c30:	2854      	cmp	r0, #84	; 0x54
   23c32:	d900      	bls.n	23c36 <_malloc_r+0x312>
   23c34:	e0ba      	b.n	23dac <_malloc_r+0x488>
   23c36:	236e      	movs	r3, #110	; 0x6e
   23c38:	4698      	mov	r8, r3
   23c3a:	0b28      	lsrs	r0, r5, #12
   23c3c:	4480      	add	r8, r0
   23c3e:	306f      	adds	r0, #111	; 0x6f
   23c40:	00c1      	lsls	r1, r0, #3
   23c42:	e696      	b.n	23972 <_malloc_r+0x4e>
   23c44:	0a5a      	lsrs	r2, r3, #9
   23c46:	2a04      	cmp	r2, #4
   23c48:	d973      	bls.n	23d32 <_malloc_r+0x40e>
   23c4a:	2a14      	cmp	r2, #20
   23c4c:	d900      	bls.n	23c50 <_malloc_r+0x32c>
   23c4e:	e0d0      	b.n	23df2 <_malloc_r+0x4ce>
   23c50:	0011      	movs	r1, r2
   23c52:	325c      	adds	r2, #92	; 0x5c
   23c54:	315b      	adds	r1, #91	; 0x5b
   23c56:	00d2      	lsls	r2, r2, #3
   23c58:	2308      	movs	r3, #8
   23c5a:	425b      	negs	r3, r3
   23c5c:	469c      	mov	ip, r3
   23c5e:	18b2      	adds	r2, r6, r2
   23c60:	4494      	add	ip, r2
   23c62:	4663      	mov	r3, ip
   23c64:	689a      	ldr	r2, [r3, #8]
   23c66:	2303      	movs	r3, #3
   23c68:	4698      	mov	r8, r3
   23c6a:	4594      	cmp	ip, r2
   23c6c:	d100      	bne.n	23c70 <_malloc_r+0x34c>
   23c6e:	e0ab      	b.n	23dc8 <_malloc_r+0x4a4>
   23c70:	4643      	mov	r3, r8
   23c72:	6851      	ldr	r1, [r2, #4]
   23c74:	4399      	bics	r1, r3
   23c76:	4589      	cmp	r9, r1
   23c78:	d300      	bcc.n	23c7c <_malloc_r+0x358>
   23c7a:	e095      	b.n	23da8 <_malloc_r+0x484>
   23c7c:	6892      	ldr	r2, [r2, #8]
   23c7e:	4594      	cmp	ip, r2
   23c80:	d1f6      	bne.n	23c70 <_malloc_r+0x34c>
   23c82:	4663      	mov	r3, ip
   23c84:	68da      	ldr	r2, [r3, #12]
   23c86:	6873      	ldr	r3, [r6, #4]
   23c88:	4661      	mov	r1, ip
   23c8a:	60e2      	str	r2, [r4, #12]
   23c8c:	60a1      	str	r1, [r4, #8]
   23c8e:	6094      	str	r4, [r2, #8]
   23c90:	60cc      	str	r4, [r1, #12]
   23c92:	e6b6      	b.n	23a02 <_malloc_r+0xde>
   23c94:	2301      	movs	r3, #1
   23c96:	1960      	adds	r0, r4, r5
   23c98:	431d      	orrs	r5, r3
   23c9a:	6065      	str	r5, [r4, #4]
   23c9c:	6170      	str	r0, [r6, #20]
   23c9e:	6130      	str	r0, [r6, #16]
   23ca0:	60c2      	str	r2, [r0, #12]
   23ca2:	6082      	str	r2, [r0, #8]
   23ca4:	001a      	movs	r2, r3
   23ca6:	464b      	mov	r3, r9
   23ca8:	430a      	orrs	r2, r1
   23caa:	6042      	str	r2, [r0, #4]
   23cac:	0038      	movs	r0, r7
   23cae:	50e1      	str	r1, [r4, r3]
   23cb0:	f000 f934 	bl	23f1c <__malloc_unlock>
   23cb4:	0020      	movs	r0, r4
   23cb6:	3008      	adds	r0, #8
   23cb8:	e703      	b.n	23ac2 <_malloc_r+0x19e>
   23cba:	46c0      	nop			; (mov r8, r8)
   23cbc:	200006fc 	.word	0x200006fc
   23cc0:	000001ff 	.word	0x000001ff
   23cc4:	20000b04 	.word	0x20000b04
   23cc8:	20000e44 	.word	0x20000e44
   23ccc:	0000100f 	.word	0x0000100f
   23cd0:	20000e14 	.word	0x20000e14
   23cd4:	00001008 	.word	0x00001008
   23cd8:	20000e3c 	.word	0x20000e3c
   23cdc:	20000e40 	.word	0x20000e40
   23ce0:	6873      	ldr	r3, [r6, #4]
   23ce2:	e68e      	b.n	23a02 <_malloc_r+0xde>
   23ce4:	2308      	movs	r3, #8
   23ce6:	469b      	mov	fp, r3
   23ce8:	3b07      	subs	r3, #7
   23cea:	44dc      	add	ip, fp
   23cec:	469b      	mov	fp, r3
   23cee:	44da      	add	sl, fp
   23cf0:	4643      	mov	r3, r8
   23cf2:	4652      	mov	r2, sl
   23cf4:	4213      	tst	r3, r2
   23cf6:	d000      	beq.n	23cfa <_malloc_r+0x3d6>
   23cf8:	e697      	b.n	23a2a <_malloc_r+0x106>
   23cfa:	e037      	b.n	23d6c <_malloc_r+0x448>
   23cfc:	68dc      	ldr	r4, [r3, #12]
   23cfe:	3002      	adds	r0, #2
   23d00:	42a3      	cmp	r3, r4
   23d02:	d100      	bne.n	23d06 <_malloc_r+0x3e2>
   23d04:	e655      	b.n	239b2 <_malloc_r+0x8e>
   23d06:	e6ca      	b.n	23a9e <_malloc_r+0x17a>
   23d08:	2201      	movs	r2, #1
   23d0a:	18e3      	adds	r3, r4, r3
   23d0c:	6859      	ldr	r1, [r3, #4]
   23d0e:	0038      	movs	r0, r7
   23d10:	430a      	orrs	r2, r1
   23d12:	605a      	str	r2, [r3, #4]
   23d14:	68e3      	ldr	r3, [r4, #12]
   23d16:	68a2      	ldr	r2, [r4, #8]
   23d18:	60d3      	str	r3, [r2, #12]
   23d1a:	609a      	str	r2, [r3, #8]
   23d1c:	f000 f8fe 	bl	23f1c <__malloc_unlock>
   23d20:	0020      	movs	r0, r4
   23d22:	3008      	adds	r0, #8
   23d24:	e6cd      	b.n	23ac2 <_malloc_r+0x19e>
   23d26:	235b      	movs	r3, #91	; 0x5b
   23d28:	4698      	mov	r8, r3
   23d2a:	4480      	add	r8, r0
   23d2c:	305c      	adds	r0, #92	; 0x5c
   23d2e:	00c1      	lsls	r1, r0, #3
   23d30:	e61f      	b.n	23972 <_malloc_r+0x4e>
   23d32:	099a      	lsrs	r2, r3, #6
   23d34:	0011      	movs	r1, r2
   23d36:	3239      	adds	r2, #57	; 0x39
   23d38:	3138      	adds	r1, #56	; 0x38
   23d3a:	00d2      	lsls	r2, r2, #3
   23d3c:	e78c      	b.n	23c58 <_malloc_r+0x334>
   23d3e:	42b4      	cmp	r4, r6
   23d40:	d000      	beq.n	23d44 <_malloc_r+0x420>
   23d42:	e75a      	b.n	23bfa <_malloc_r+0x2d6>
   23d44:	4b4f      	ldr	r3, [pc, #316]	; (23e84 <_malloc_r+0x560>)
   23d46:	9a00      	ldr	r2, [sp, #0]
   23d48:	469a      	mov	sl, r3
   23d4a:	681b      	ldr	r3, [r3, #0]
   23d4c:	469c      	mov	ip, r3
   23d4e:	4653      	mov	r3, sl
   23d50:	4462      	add	r2, ip
   23d52:	0011      	movs	r1, r2
   23d54:	601a      	str	r2, [r3, #0]
   23d56:	e6ff      	b.n	23b58 <_malloc_r+0x234>
   23d58:	2308      	movs	r3, #8
   23d5a:	425b      	negs	r3, r3
   23d5c:	469c      	mov	ip, r3
   23d5e:	44e1      	add	r9, ip
   23d60:	464b      	mov	r3, r9
   23d62:	689b      	ldr	r3, [r3, #8]
   23d64:	3801      	subs	r0, #1
   23d66:	4599      	cmp	r9, r3
   23d68:	d000      	beq.n	23d6c <_malloc_r+0x448>
   23d6a:	e084      	b.n	23e76 <_malloc_r+0x552>
   23d6c:	4643      	mov	r3, r8
   23d6e:	4203      	tst	r3, r0
   23d70:	d1f2      	bne.n	23d58 <_malloc_r+0x434>
   23d72:	6873      	ldr	r3, [r6, #4]
   23d74:	438b      	bics	r3, r1
   23d76:	6073      	str	r3, [r6, #4]
   23d78:	0049      	lsls	r1, r1, #1
   23d7a:	4299      	cmp	r1, r3
   23d7c:	d900      	bls.n	23d80 <_malloc_r+0x45c>
   23d7e:	e6b5      	b.n	23aec <_malloc_r+0x1c8>
   23d80:	2900      	cmp	r1, #0
   23d82:	d100      	bne.n	23d86 <_malloc_r+0x462>
   23d84:	e6b2      	b.n	23aec <_malloc_r+0x1c8>
   23d86:	4650      	mov	r0, sl
   23d88:	420b      	tst	r3, r1
   23d8a:	d000      	beq.n	23d8e <_malloc_r+0x46a>
   23d8c:	e648      	b.n	23a20 <_malloc_r+0xfc>
   23d8e:	0049      	lsls	r1, r1, #1
   23d90:	3004      	adds	r0, #4
   23d92:	420b      	tst	r3, r1
   23d94:	d0fb      	beq.n	23d8e <_malloc_r+0x46a>
   23d96:	e643      	b.n	23a20 <_malloc_r+0xfc>
   23d98:	2301      	movs	r3, #1
   23d9a:	464a      	mov	r2, r9
   23d9c:	6053      	str	r3, [r2, #4]
   23d9e:	0038      	movs	r0, r7
   23da0:	f000 f8bc 	bl	23f1c <__malloc_unlock>
   23da4:	2000      	movs	r0, #0
   23da6:	e68c      	b.n	23ac2 <_malloc_r+0x19e>
   23da8:	4694      	mov	ip, r2
   23daa:	e76a      	b.n	23c82 <_malloc_r+0x35e>
   23dac:	23aa      	movs	r3, #170	; 0xaa
   23dae:	005b      	lsls	r3, r3, #1
   23db0:	4298      	cmp	r0, r3
   23db2:	d811      	bhi.n	23dd8 <_malloc_r+0x4b4>
   23db4:	3bdd      	subs	r3, #221	; 0xdd
   23db6:	4698      	mov	r8, r3
   23db8:	0be8      	lsrs	r0, r5, #15
   23dba:	4480      	add	r8, r0
   23dbc:	3078      	adds	r0, #120	; 0x78
   23dbe:	00c1      	lsls	r1, r0, #3
   23dc0:	e5d7      	b.n	23972 <_malloc_r+0x4e>
   23dc2:	2380      	movs	r3, #128	; 0x80
   23dc4:	015b      	lsls	r3, r3, #5
   23dc6:	e6dd      	b.n	23b84 <_malloc_r+0x260>
   23dc8:	1089      	asrs	r1, r1, #2
   23dca:	3b02      	subs	r3, #2
   23dcc:	408b      	lsls	r3, r1
   23dce:	6872      	ldr	r2, [r6, #4]
   23dd0:	4313      	orrs	r3, r2
   23dd2:	6073      	str	r3, [r6, #4]
   23dd4:	4662      	mov	r2, ip
   23dd6:	e757      	b.n	23c88 <_malloc_r+0x364>
   23dd8:	4b2b      	ldr	r3, [pc, #172]	; (23e88 <_malloc_r+0x564>)
   23dda:	4298      	cmp	r0, r3
   23ddc:	d81c      	bhi.n	23e18 <_malloc_r+0x4f4>
   23dde:	237c      	movs	r3, #124	; 0x7c
   23de0:	4698      	mov	r8, r3
   23de2:	0ca8      	lsrs	r0, r5, #18
   23de4:	4480      	add	r8, r0
   23de6:	307d      	adds	r0, #125	; 0x7d
   23de8:	00c1      	lsls	r1, r0, #3
   23dea:	e5c2      	b.n	23972 <_malloc_r+0x4e>
   23dec:	3310      	adds	r3, #16
   23dee:	9300      	str	r3, [sp, #0]
   23df0:	e699      	b.n	23b26 <_malloc_r+0x202>
   23df2:	2a54      	cmp	r2, #84	; 0x54
   23df4:	d826      	bhi.n	23e44 <_malloc_r+0x520>
   23df6:	464b      	mov	r3, r9
   23df8:	0b1a      	lsrs	r2, r3, #12
   23dfa:	0011      	movs	r1, r2
   23dfc:	326f      	adds	r2, #111	; 0x6f
   23dfe:	316e      	adds	r1, #110	; 0x6e
   23e00:	00d2      	lsls	r2, r2, #3
   23e02:	e729      	b.n	23c58 <_malloc_r+0x334>
   23e04:	051b      	lsls	r3, r3, #20
   23e06:	d000      	beq.n	23e0a <_malloc_r+0x4e6>
   23e08:	e6a6      	b.n	23b58 <_malloc_r+0x234>
   23e0a:	2001      	movs	r0, #1
   23e0c:	9b00      	ldr	r3, [sp, #0]
   23e0e:	68b2      	ldr	r2, [r6, #8]
   23e10:	4443      	add	r3, r8
   23e12:	4303      	orrs	r3, r0
   23e14:	6053      	str	r3, [r2, #4]
   23e16:	e6e6      	b.n	23be6 <_malloc_r+0x2c2>
   23e18:	21fe      	movs	r1, #254	; 0xfe
   23e1a:	237e      	movs	r3, #126	; 0x7e
   23e1c:	207f      	movs	r0, #127	; 0x7f
   23e1e:	0089      	lsls	r1, r1, #2
   23e20:	4698      	mov	r8, r3
   23e22:	e5a6      	b.n	23972 <_malloc_r+0x4e>
   23e24:	2300      	movs	r3, #0
   23e26:	2001      	movs	r0, #1
   23e28:	469b      	mov	fp, r3
   23e2a:	e6bd      	b.n	23ba8 <_malloc_r+0x284>
   23e2c:	0021      	movs	r1, r4
   23e2e:	0038      	movs	r0, r7
   23e30:	3108      	adds	r1, #8
   23e32:	f000 fd5b 	bl	248ec <_free_r>
   23e36:	4653      	mov	r3, sl
   23e38:	6819      	ldr	r1, [r3, #0]
   23e3a:	e6d4      	b.n	23be6 <_malloc_r+0x2c2>
   23e3c:	465b      	mov	r3, fp
   23e3e:	464a      	mov	r2, r9
   23e40:	601a      	str	r2, [r3, #0]
   23e42:	e694      	b.n	23b6e <_malloc_r+0x24a>
   23e44:	21aa      	movs	r1, #170	; 0xaa
   23e46:	0049      	lsls	r1, r1, #1
   23e48:	428a      	cmp	r2, r1
   23e4a:	d806      	bhi.n	23e5a <_malloc_r+0x536>
   23e4c:	464b      	mov	r3, r9
   23e4e:	0bda      	lsrs	r2, r3, #15
   23e50:	0011      	movs	r1, r2
   23e52:	3278      	adds	r2, #120	; 0x78
   23e54:	3177      	adds	r1, #119	; 0x77
   23e56:	00d2      	lsls	r2, r2, #3
   23e58:	e6fe      	b.n	23c58 <_malloc_r+0x334>
   23e5a:	490b      	ldr	r1, [pc, #44]	; (23e88 <_malloc_r+0x564>)
   23e5c:	428a      	cmp	r2, r1
   23e5e:	d806      	bhi.n	23e6e <_malloc_r+0x54a>
   23e60:	464b      	mov	r3, r9
   23e62:	0c9a      	lsrs	r2, r3, #18
   23e64:	0011      	movs	r1, r2
   23e66:	327d      	adds	r2, #125	; 0x7d
   23e68:	317c      	adds	r1, #124	; 0x7c
   23e6a:	00d2      	lsls	r2, r2, #3
   23e6c:	e6f4      	b.n	23c58 <_malloc_r+0x334>
   23e6e:	22fe      	movs	r2, #254	; 0xfe
   23e70:	217e      	movs	r1, #126	; 0x7e
   23e72:	0092      	lsls	r2, r2, #2
   23e74:	e6f0      	b.n	23c58 <_malloc_r+0x334>
   23e76:	6873      	ldr	r3, [r6, #4]
   23e78:	e77e      	b.n	23d78 <_malloc_r+0x454>
   23e7a:	002b      	movs	r3, r5
   23e7c:	08e8      	lsrs	r0, r5, #3
   23e7e:	3308      	adds	r3, #8
   23e80:	e605      	b.n	23a8e <_malloc_r+0x16a>
   23e82:	46c0      	nop			; (mov r8, r8)
   23e84:	20000e14 	.word	0x20000e14
   23e88:	00000554 	.word	0x00000554

00023e8c <memchr>:
   23e8c:	b570      	push	{r4, r5, r6, lr}
   23e8e:	b2cd      	uxtb	r5, r1
   23e90:	0783      	lsls	r3, r0, #30
   23e92:	d034      	beq.n	23efe <memchr+0x72>
   23e94:	1e54      	subs	r4, r2, #1
   23e96:	2a00      	cmp	r2, #0
   23e98:	d01b      	beq.n	23ed2 <memchr+0x46>
   23e9a:	7803      	ldrb	r3, [r0, #0]
   23e9c:	42ab      	cmp	r3, r5
   23e9e:	d019      	beq.n	23ed4 <memchr+0x48>
   23ea0:	2203      	movs	r2, #3
   23ea2:	e004      	b.n	23eae <memchr+0x22>
   23ea4:	3c01      	subs	r4, #1
   23ea6:	d314      	bcc.n	23ed2 <memchr+0x46>
   23ea8:	7803      	ldrb	r3, [r0, #0]
   23eaa:	42ab      	cmp	r3, r5
   23eac:	d012      	beq.n	23ed4 <memchr+0x48>
   23eae:	3001      	adds	r0, #1
   23eb0:	4210      	tst	r0, r2
   23eb2:	d1f7      	bne.n	23ea4 <memchr+0x18>
   23eb4:	2c03      	cmp	r4, #3
   23eb6:	d80e      	bhi.n	23ed6 <memchr+0x4a>
   23eb8:	2c00      	cmp	r4, #0
   23eba:	d00a      	beq.n	23ed2 <memchr+0x46>
   23ebc:	7803      	ldrb	r3, [r0, #0]
   23ebe:	42ab      	cmp	r3, r5
   23ec0:	d008      	beq.n	23ed4 <memchr+0x48>
   23ec2:	1904      	adds	r4, r0, r4
   23ec4:	e002      	b.n	23ecc <memchr+0x40>
   23ec6:	7803      	ldrb	r3, [r0, #0]
   23ec8:	42ab      	cmp	r3, r5
   23eca:	d003      	beq.n	23ed4 <memchr+0x48>
   23ecc:	3001      	adds	r0, #1
   23ece:	4284      	cmp	r4, r0
   23ed0:	d1f9      	bne.n	23ec6 <memchr+0x3a>
   23ed2:	2000      	movs	r0, #0
   23ed4:	bd70      	pop	{r4, r5, r6, pc}
   23ed6:	22ff      	movs	r2, #255	; 0xff
   23ed8:	060b      	lsls	r3, r1, #24
   23eda:	0c1b      	lsrs	r3, r3, #16
   23edc:	4011      	ands	r1, r2
   23ede:	4319      	orrs	r1, r3
   23ee0:	040b      	lsls	r3, r1, #16
   23ee2:	4e08      	ldr	r6, [pc, #32]	; (23f04 <memchr+0x78>)
   23ee4:	4319      	orrs	r1, r3
   23ee6:	6803      	ldr	r3, [r0, #0]
   23ee8:	4a07      	ldr	r2, [pc, #28]	; (23f08 <memchr+0x7c>)
   23eea:	404b      	eors	r3, r1
   23eec:	189a      	adds	r2, r3, r2
   23eee:	439a      	bics	r2, r3
   23ef0:	4232      	tst	r2, r6
   23ef2:	d1e3      	bne.n	23ebc <memchr+0x30>
   23ef4:	3c04      	subs	r4, #4
   23ef6:	3004      	adds	r0, #4
   23ef8:	2c03      	cmp	r4, #3
   23efa:	d8f4      	bhi.n	23ee6 <memchr+0x5a>
   23efc:	e7dc      	b.n	23eb8 <memchr+0x2c>
   23efe:	0014      	movs	r4, r2
   23f00:	e7d8      	b.n	23eb4 <memchr+0x28>
   23f02:	46c0      	nop			; (mov r8, r8)
   23f04:	80808080 	.word	0x80808080
   23f08:	fefefeff 	.word	0xfefefeff

00023f0c <__malloc_lock>:
   23f0c:	b510      	push	{r4, lr}
   23f0e:	4802      	ldr	r0, [pc, #8]	; (23f18 <__malloc_lock+0xc>)
   23f10:	f7ff fd04 	bl	2391c <__retarget_lock_acquire_recursive>
   23f14:	bd10      	pop	{r4, pc}
   23f16:	46c0      	nop			; (mov r8, r8)
   23f18:	20004db0 	.word	0x20004db0

00023f1c <__malloc_unlock>:
   23f1c:	b510      	push	{r4, lr}
   23f1e:	4802      	ldr	r0, [pc, #8]	; (23f28 <__malloc_unlock+0xc>)
   23f20:	f7ff fcfe 	bl	23920 <__retarget_lock_release_recursive>
   23f24:	bd10      	pop	{r4, pc}
   23f26:	46c0      	nop			; (mov r8, r8)
   23f28:	20004db0 	.word	0x20004db0

00023f2c <_Balloc>:
   23f2c:	b570      	push	{r4, r5, r6, lr}
   23f2e:	0004      	movs	r4, r0
   23f30:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   23f32:	000d      	movs	r5, r1
   23f34:	2800      	cmp	r0, #0
   23f36:	d00a      	beq.n	23f4e <_Balloc+0x22>
   23f38:	00ab      	lsls	r3, r5, #2
   23f3a:	18c3      	adds	r3, r0, r3
   23f3c:	6818      	ldr	r0, [r3, #0]
   23f3e:	2800      	cmp	r0, #0
   23f40:	d00f      	beq.n	23f62 <_Balloc+0x36>
   23f42:	6802      	ldr	r2, [r0, #0]
   23f44:	601a      	str	r2, [r3, #0]
   23f46:	2300      	movs	r3, #0
   23f48:	6103      	str	r3, [r0, #16]
   23f4a:	60c3      	str	r3, [r0, #12]
   23f4c:	bd70      	pop	{r4, r5, r6, pc}
   23f4e:	2221      	movs	r2, #33	; 0x21
   23f50:	2104      	movs	r1, #4
   23f52:	0020      	movs	r0, r4
   23f54:	f000 fc4e 	bl	247f4 <_calloc_r>
   23f58:	64e0      	str	r0, [r4, #76]	; 0x4c
   23f5a:	2800      	cmp	r0, #0
   23f5c:	d1ec      	bne.n	23f38 <_Balloc+0xc>
   23f5e:	2000      	movs	r0, #0
   23f60:	e7f4      	b.n	23f4c <_Balloc+0x20>
   23f62:	2601      	movs	r6, #1
   23f64:	40ae      	lsls	r6, r5
   23f66:	1d72      	adds	r2, r6, #5
   23f68:	0092      	lsls	r2, r2, #2
   23f6a:	2101      	movs	r1, #1
   23f6c:	0020      	movs	r0, r4
   23f6e:	f000 fc41 	bl	247f4 <_calloc_r>
   23f72:	2800      	cmp	r0, #0
   23f74:	d0f3      	beq.n	23f5e <_Balloc+0x32>
   23f76:	6045      	str	r5, [r0, #4]
   23f78:	6086      	str	r6, [r0, #8]
   23f7a:	e7e4      	b.n	23f46 <_Balloc+0x1a>

00023f7c <_Bfree>:
   23f7c:	2900      	cmp	r1, #0
   23f7e:	d006      	beq.n	23f8e <_Bfree+0x12>
   23f80:	684b      	ldr	r3, [r1, #4]
   23f82:	009a      	lsls	r2, r3, #2
   23f84:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   23f86:	189b      	adds	r3, r3, r2
   23f88:	681a      	ldr	r2, [r3, #0]
   23f8a:	600a      	str	r2, [r1, #0]
   23f8c:	6019      	str	r1, [r3, #0]
   23f8e:	4770      	bx	lr

00023f90 <__multadd>:
   23f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23f92:	46ce      	mov	lr, r9
   23f94:	4647      	mov	r7, r8
   23f96:	4681      	mov	r9, r0
   23f98:	0008      	movs	r0, r1
   23f9a:	b580      	push	{r7, lr}
   23f9c:	000d      	movs	r5, r1
   23f9e:	690c      	ldr	r4, [r1, #16]
   23fa0:	001f      	movs	r7, r3
   23fa2:	2100      	movs	r1, #0
   23fa4:	3014      	adds	r0, #20
   23fa6:	6803      	ldr	r3, [r0, #0]
   23fa8:	3101      	adds	r1, #1
   23faa:	041e      	lsls	r6, r3, #16
   23fac:	0c36      	lsrs	r6, r6, #16
   23fae:	4356      	muls	r6, r2
   23fb0:	0c1b      	lsrs	r3, r3, #16
   23fb2:	4353      	muls	r3, r2
   23fb4:	19f6      	adds	r6, r6, r7
   23fb6:	0c37      	lsrs	r7, r6, #16
   23fb8:	19db      	adds	r3, r3, r7
   23fba:	0436      	lsls	r6, r6, #16
   23fbc:	0c1f      	lsrs	r7, r3, #16
   23fbe:	0c36      	lsrs	r6, r6, #16
   23fc0:	041b      	lsls	r3, r3, #16
   23fc2:	199b      	adds	r3, r3, r6
   23fc4:	c008      	stmia	r0!, {r3}
   23fc6:	428c      	cmp	r4, r1
   23fc8:	dced      	bgt.n	23fa6 <__multadd+0x16>
   23fca:	2f00      	cmp	r7, #0
   23fcc:	d008      	beq.n	23fe0 <__multadd+0x50>
   23fce:	68ab      	ldr	r3, [r5, #8]
   23fd0:	429c      	cmp	r4, r3
   23fd2:	da0a      	bge.n	23fea <__multadd+0x5a>
   23fd4:	1d23      	adds	r3, r4, #4
   23fd6:	009b      	lsls	r3, r3, #2
   23fd8:	18eb      	adds	r3, r5, r3
   23fda:	3401      	adds	r4, #1
   23fdc:	605f      	str	r7, [r3, #4]
   23fde:	612c      	str	r4, [r5, #16]
   23fe0:	0028      	movs	r0, r5
   23fe2:	bc0c      	pop	{r2, r3}
   23fe4:	4690      	mov	r8, r2
   23fe6:	4699      	mov	r9, r3
   23fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23fea:	686b      	ldr	r3, [r5, #4]
   23fec:	4648      	mov	r0, r9
   23fee:	1c59      	adds	r1, r3, #1
   23ff0:	f7ff ff9c 	bl	23f2c <_Balloc>
   23ff4:	0029      	movs	r1, r5
   23ff6:	692b      	ldr	r3, [r5, #16]
   23ff8:	4680      	mov	r8, r0
   23ffa:	1c9a      	adds	r2, r3, #2
   23ffc:	0092      	lsls	r2, r2, #2
   23ffe:	310c      	adds	r1, #12
   24000:	300c      	adds	r0, #12
   24002:	f7fc ffcf 	bl	20fa4 <memcpy>
   24006:	686b      	ldr	r3, [r5, #4]
   24008:	009a      	lsls	r2, r3, #2
   2400a:	464b      	mov	r3, r9
   2400c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2400e:	189b      	adds	r3, r3, r2
   24010:	681a      	ldr	r2, [r3, #0]
   24012:	602a      	str	r2, [r5, #0]
   24014:	601d      	str	r5, [r3, #0]
   24016:	4645      	mov	r5, r8
   24018:	e7dc      	b.n	23fd4 <__multadd+0x44>
   2401a:	46c0      	nop			; (mov r8, r8)

0002401c <__hi0bits>:
   2401c:	0003      	movs	r3, r0
   2401e:	0c02      	lsrs	r2, r0, #16
   24020:	2000      	movs	r0, #0
   24022:	2a00      	cmp	r2, #0
   24024:	d101      	bne.n	2402a <__hi0bits+0xe>
   24026:	041b      	lsls	r3, r3, #16
   24028:	3010      	adds	r0, #16
   2402a:	0e1a      	lsrs	r2, r3, #24
   2402c:	d101      	bne.n	24032 <__hi0bits+0x16>
   2402e:	3008      	adds	r0, #8
   24030:	021b      	lsls	r3, r3, #8
   24032:	0f1a      	lsrs	r2, r3, #28
   24034:	d101      	bne.n	2403a <__hi0bits+0x1e>
   24036:	3004      	adds	r0, #4
   24038:	011b      	lsls	r3, r3, #4
   2403a:	0f9a      	lsrs	r2, r3, #30
   2403c:	d101      	bne.n	24042 <__hi0bits+0x26>
   2403e:	3002      	adds	r0, #2
   24040:	009b      	lsls	r3, r3, #2
   24042:	2b00      	cmp	r3, #0
   24044:	db03      	blt.n	2404e <__hi0bits+0x32>
   24046:	3001      	adds	r0, #1
   24048:	005b      	lsls	r3, r3, #1
   2404a:	d400      	bmi.n	2404e <__hi0bits+0x32>
   2404c:	2020      	movs	r0, #32
   2404e:	4770      	bx	lr

00024050 <__lo0bits>:
   24050:	6803      	ldr	r3, [r0, #0]
   24052:	075a      	lsls	r2, r3, #29
   24054:	d009      	beq.n	2406a <__lo0bits+0x1a>
   24056:	2200      	movs	r2, #0
   24058:	07d9      	lsls	r1, r3, #31
   2405a:	d404      	bmi.n	24066 <__lo0bits+0x16>
   2405c:	079a      	lsls	r2, r3, #30
   2405e:	d420      	bmi.n	240a2 <__lo0bits+0x52>
   24060:	2202      	movs	r2, #2
   24062:	089b      	lsrs	r3, r3, #2
   24064:	6003      	str	r3, [r0, #0]
   24066:	0010      	movs	r0, r2
   24068:	4770      	bx	lr
   2406a:	0419      	lsls	r1, r3, #16
   2406c:	2200      	movs	r2, #0
   2406e:	2900      	cmp	r1, #0
   24070:	d101      	bne.n	24076 <__lo0bits+0x26>
   24072:	0c1b      	lsrs	r3, r3, #16
   24074:	3210      	adds	r2, #16
   24076:	21ff      	movs	r1, #255	; 0xff
   24078:	4219      	tst	r1, r3
   2407a:	d101      	bne.n	24080 <__lo0bits+0x30>
   2407c:	3208      	adds	r2, #8
   2407e:	0a1b      	lsrs	r3, r3, #8
   24080:	0719      	lsls	r1, r3, #28
   24082:	d101      	bne.n	24088 <__lo0bits+0x38>
   24084:	3204      	adds	r2, #4
   24086:	091b      	lsrs	r3, r3, #4
   24088:	0799      	lsls	r1, r3, #30
   2408a:	d101      	bne.n	24090 <__lo0bits+0x40>
   2408c:	3202      	adds	r2, #2
   2408e:	089b      	lsrs	r3, r3, #2
   24090:	07d9      	lsls	r1, r3, #31
   24092:	d404      	bmi.n	2409e <__lo0bits+0x4e>
   24094:	085b      	lsrs	r3, r3, #1
   24096:	d101      	bne.n	2409c <__lo0bits+0x4c>
   24098:	2220      	movs	r2, #32
   2409a:	e7e4      	b.n	24066 <__lo0bits+0x16>
   2409c:	3201      	adds	r2, #1
   2409e:	6003      	str	r3, [r0, #0]
   240a0:	e7e1      	b.n	24066 <__lo0bits+0x16>
   240a2:	085b      	lsrs	r3, r3, #1
   240a4:	6003      	str	r3, [r0, #0]
   240a6:	2201      	movs	r2, #1
   240a8:	e7dd      	b.n	24066 <__lo0bits+0x16>
   240aa:	46c0      	nop			; (mov r8, r8)

000240ac <__i2b>:
   240ac:	b510      	push	{r4, lr}
   240ae:	000c      	movs	r4, r1
   240b0:	2101      	movs	r1, #1
   240b2:	f7ff ff3b 	bl	23f2c <_Balloc>
   240b6:	2301      	movs	r3, #1
   240b8:	6144      	str	r4, [r0, #20]
   240ba:	6103      	str	r3, [r0, #16]
   240bc:	bd10      	pop	{r4, pc}
   240be:	46c0      	nop			; (mov r8, r8)

000240c0 <__multiply>:
   240c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   240c2:	4657      	mov	r7, sl
   240c4:	464e      	mov	r6, r9
   240c6:	4645      	mov	r5, r8
   240c8:	46de      	mov	lr, fp
   240ca:	b5e0      	push	{r5, r6, r7, lr}
   240cc:	6914      	ldr	r4, [r2, #16]
   240ce:	690e      	ldr	r6, [r1, #16]
   240d0:	b085      	sub	sp, #20
   240d2:	000f      	movs	r7, r1
   240d4:	0015      	movs	r5, r2
   240d6:	42a6      	cmp	r6, r4
   240d8:	da04      	bge.n	240e4 <__multiply+0x24>
   240da:	0033      	movs	r3, r6
   240dc:	0017      	movs	r7, r2
   240de:	0026      	movs	r6, r4
   240e0:	000d      	movs	r5, r1
   240e2:	001c      	movs	r4, r3
   240e4:	1933      	adds	r3, r6, r4
   240e6:	4698      	mov	r8, r3
   240e8:	68bb      	ldr	r3, [r7, #8]
   240ea:	6879      	ldr	r1, [r7, #4]
   240ec:	4598      	cmp	r8, r3
   240ee:	dd00      	ble.n	240f2 <__multiply+0x32>
   240f0:	3101      	adds	r1, #1
   240f2:	f7ff ff1b 	bl	23f2c <_Balloc>
   240f6:	2214      	movs	r2, #20
   240f8:	0003      	movs	r3, r0
   240fa:	4694      	mov	ip, r2
   240fc:	4463      	add	r3, ip
   240fe:	469b      	mov	fp, r3
   24100:	4643      	mov	r3, r8
   24102:	009b      	lsls	r3, r3, #2
   24104:	445b      	add	r3, fp
   24106:	0019      	movs	r1, r3
   24108:	9302      	str	r3, [sp, #8]
   2410a:	9003      	str	r0, [sp, #12]
   2410c:	465b      	mov	r3, fp
   2410e:	2200      	movs	r2, #0
   24110:	458b      	cmp	fp, r1
   24112:	d203      	bcs.n	2411c <__multiply+0x5c>
   24114:	9902      	ldr	r1, [sp, #8]
   24116:	c304      	stmia	r3!, {r2}
   24118:	4299      	cmp	r1, r3
   2411a:	d8fc      	bhi.n	24116 <__multiply+0x56>
   2411c:	2314      	movs	r3, #20
   2411e:	00a4      	lsls	r4, r4, #2
   24120:	469a      	mov	sl, r3
   24122:	3714      	adds	r7, #20
   24124:	0023      	movs	r3, r4
   24126:	46bc      	mov	ip, r7
   24128:	44aa      	add	sl, r5
   2412a:	00b6      	lsls	r6, r6, #2
   2412c:	4453      	add	r3, sl
   2412e:	9700      	str	r7, [sp, #0]
   24130:	44b4      	add	ip, r6
   24132:	9301      	str	r3, [sp, #4]
   24134:	459a      	cmp	sl, r3
   24136:	d24f      	bcs.n	241d8 <__multiply+0x118>
   24138:	4653      	mov	r3, sl
   2413a:	681b      	ldr	r3, [r3, #0]
   2413c:	041e      	lsls	r6, r3, #16
   2413e:	0c36      	lsrs	r6, r6, #16
   24140:	d020      	beq.n	24184 <__multiply+0xc4>
   24142:	465c      	mov	r4, fp
   24144:	2700      	movs	r7, #0
   24146:	9d00      	ldr	r5, [sp, #0]
   24148:	0021      	movs	r1, r4
   2414a:	cc08      	ldmia	r4!, {r3}
   2414c:	cd04      	ldmia	r5!, {r2}
   2414e:	4699      	mov	r9, r3
   24150:	4648      	mov	r0, r9
   24152:	0413      	lsls	r3, r2, #16
   24154:	0c1b      	lsrs	r3, r3, #16
   24156:	4373      	muls	r3, r6
   24158:	0400      	lsls	r0, r0, #16
   2415a:	0c00      	lsrs	r0, r0, #16
   2415c:	181b      	adds	r3, r3, r0
   2415e:	19d8      	adds	r0, r3, r7
   24160:	0c13      	lsrs	r3, r2, #16
   24162:	464a      	mov	r2, r9
   24164:	4373      	muls	r3, r6
   24166:	0c12      	lsrs	r2, r2, #16
   24168:	189b      	adds	r3, r3, r2
   2416a:	0c02      	lsrs	r2, r0, #16
   2416c:	189b      	adds	r3, r3, r2
   2416e:	0402      	lsls	r2, r0, #16
   24170:	0c1f      	lsrs	r7, r3, #16
   24172:	0c12      	lsrs	r2, r2, #16
   24174:	041b      	lsls	r3, r3, #16
   24176:	4313      	orrs	r3, r2
   24178:	600b      	str	r3, [r1, #0]
   2417a:	45ac      	cmp	ip, r5
   2417c:	d8e4      	bhi.n	24148 <__multiply+0x88>
   2417e:	4653      	mov	r3, sl
   24180:	6027      	str	r7, [r4, #0]
   24182:	681b      	ldr	r3, [r3, #0]
   24184:	0c1e      	lsrs	r6, r3, #16
   24186:	d020      	beq.n	241ca <__multiply+0x10a>
   24188:	465b      	mov	r3, fp
   2418a:	2100      	movs	r1, #0
   2418c:	681b      	ldr	r3, [r3, #0]
   2418e:	465c      	mov	r4, fp
   24190:	0018      	movs	r0, r3
   24192:	000f      	movs	r7, r1
   24194:	4662      	mov	r2, ip
   24196:	9d00      	ldr	r5, [sp, #0]
   24198:	8829      	ldrh	r1, [r5, #0]
   2419a:	0c00      	lsrs	r0, r0, #16
   2419c:	4371      	muls	r1, r6
   2419e:	1809      	adds	r1, r1, r0
   241a0:	19c9      	adds	r1, r1, r7
   241a2:	041b      	lsls	r3, r3, #16
   241a4:	0408      	lsls	r0, r1, #16
   241a6:	0c1b      	lsrs	r3, r3, #16
   241a8:	4303      	orrs	r3, r0
   241aa:	6023      	str	r3, [r4, #0]
   241ac:	cd08      	ldmia	r5!, {r3}
   241ae:	6860      	ldr	r0, [r4, #4]
   241b0:	0c1b      	lsrs	r3, r3, #16
   241b2:	4373      	muls	r3, r6
   241b4:	0407      	lsls	r7, r0, #16
   241b6:	0c3f      	lsrs	r7, r7, #16
   241b8:	19db      	adds	r3, r3, r7
   241ba:	0c09      	lsrs	r1, r1, #16
   241bc:	185b      	adds	r3, r3, r1
   241be:	0c1f      	lsrs	r7, r3, #16
   241c0:	3404      	adds	r4, #4
   241c2:	42aa      	cmp	r2, r5
   241c4:	d8e8      	bhi.n	24198 <__multiply+0xd8>
   241c6:	4694      	mov	ip, r2
   241c8:	6023      	str	r3, [r4, #0]
   241ca:	2304      	movs	r3, #4
   241cc:	4699      	mov	r9, r3
   241ce:	9b01      	ldr	r3, [sp, #4]
   241d0:	44ca      	add	sl, r9
   241d2:	44cb      	add	fp, r9
   241d4:	4553      	cmp	r3, sl
   241d6:	d8af      	bhi.n	24138 <__multiply+0x78>
   241d8:	4643      	mov	r3, r8
   241da:	2b00      	cmp	r3, #0
   241dc:	dd0e      	ble.n	241fc <__multiply+0x13c>
   241de:	9b02      	ldr	r3, [sp, #8]
   241e0:	3b04      	subs	r3, #4
   241e2:	681a      	ldr	r2, [r3, #0]
   241e4:	2a00      	cmp	r2, #0
   241e6:	d109      	bne.n	241fc <__multiply+0x13c>
   241e8:	4642      	mov	r2, r8
   241ea:	e003      	b.n	241f4 <__multiply+0x134>
   241ec:	3b04      	subs	r3, #4
   241ee:	6819      	ldr	r1, [r3, #0]
   241f0:	2900      	cmp	r1, #0
   241f2:	d102      	bne.n	241fa <__multiply+0x13a>
   241f4:	3a01      	subs	r2, #1
   241f6:	2a00      	cmp	r2, #0
   241f8:	d1f8      	bne.n	241ec <__multiply+0x12c>
   241fa:	4690      	mov	r8, r2
   241fc:	9b03      	ldr	r3, [sp, #12]
   241fe:	4642      	mov	r2, r8
   24200:	0018      	movs	r0, r3
   24202:	611a      	str	r2, [r3, #16]
   24204:	b005      	add	sp, #20
   24206:	bc3c      	pop	{r2, r3, r4, r5}
   24208:	4690      	mov	r8, r2
   2420a:	4699      	mov	r9, r3
   2420c:	46a2      	mov	sl, r4
   2420e:	46ab      	mov	fp, r5
   24210:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24212:	46c0      	nop			; (mov r8, r8)

00024214 <__pow5mult>:
   24214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24216:	4647      	mov	r7, r8
   24218:	46ce      	mov	lr, r9
   2421a:	2303      	movs	r3, #3
   2421c:	b580      	push	{r7, lr}
   2421e:	4680      	mov	r8, r0
   24220:	000f      	movs	r7, r1
   24222:	0014      	movs	r4, r2
   24224:	4013      	ands	r3, r2
   24226:	d13a      	bne.n	2429e <__pow5mult+0x8a>
   24228:	10a4      	asrs	r4, r4, #2
   2422a:	003e      	movs	r6, r7
   2422c:	2c00      	cmp	r4, #0
   2422e:	d025      	beq.n	2427c <__pow5mult+0x68>
   24230:	4643      	mov	r3, r8
   24232:	6c9d      	ldr	r5, [r3, #72]	; 0x48
   24234:	2d00      	cmp	r5, #0
   24236:	d03b      	beq.n	242b0 <__pow5mult+0x9c>
   24238:	003e      	movs	r6, r7
   2423a:	2300      	movs	r3, #0
   2423c:	2701      	movs	r7, #1
   2423e:	4699      	mov	r9, r3
   24240:	4227      	tst	r7, r4
   24242:	d107      	bne.n	24254 <__pow5mult+0x40>
   24244:	1064      	asrs	r4, r4, #1
   24246:	d019      	beq.n	2427c <__pow5mult+0x68>
   24248:	6828      	ldr	r0, [r5, #0]
   2424a:	2800      	cmp	r0, #0
   2424c:	d01b      	beq.n	24286 <__pow5mult+0x72>
   2424e:	0005      	movs	r5, r0
   24250:	4227      	tst	r7, r4
   24252:	d0f7      	beq.n	24244 <__pow5mult+0x30>
   24254:	002a      	movs	r2, r5
   24256:	0031      	movs	r1, r6
   24258:	4640      	mov	r0, r8
   2425a:	f7ff ff31 	bl	240c0 <__multiply>
   2425e:	2e00      	cmp	r6, #0
   24260:	d01b      	beq.n	2429a <__pow5mult+0x86>
   24262:	4642      	mov	r2, r8
   24264:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   24266:	6873      	ldr	r3, [r6, #4]
   24268:	4694      	mov	ip, r2
   2426a:	009b      	lsls	r3, r3, #2
   2426c:	4463      	add	r3, ip
   2426e:	681a      	ldr	r2, [r3, #0]
   24270:	1064      	asrs	r4, r4, #1
   24272:	6032      	str	r2, [r6, #0]
   24274:	601e      	str	r6, [r3, #0]
   24276:	0006      	movs	r6, r0
   24278:	2c00      	cmp	r4, #0
   2427a:	d1e5      	bne.n	24248 <__pow5mult+0x34>
   2427c:	0030      	movs	r0, r6
   2427e:	bc0c      	pop	{r2, r3}
   24280:	4690      	mov	r8, r2
   24282:	4699      	mov	r9, r3
   24284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24286:	002a      	movs	r2, r5
   24288:	0029      	movs	r1, r5
   2428a:	4640      	mov	r0, r8
   2428c:	f7ff ff18 	bl	240c0 <__multiply>
   24290:	464b      	mov	r3, r9
   24292:	6028      	str	r0, [r5, #0]
   24294:	6003      	str	r3, [r0, #0]
   24296:	0005      	movs	r5, r0
   24298:	e7da      	b.n	24250 <__pow5mult+0x3c>
   2429a:	0006      	movs	r6, r0
   2429c:	e7d2      	b.n	24244 <__pow5mult+0x30>
   2429e:	4a0b      	ldr	r2, [pc, #44]	; (242cc <__pow5mult+0xb8>)
   242a0:	3b01      	subs	r3, #1
   242a2:	009b      	lsls	r3, r3, #2
   242a4:	589a      	ldr	r2, [r3, r2]
   242a6:	2300      	movs	r3, #0
   242a8:	f7ff fe72 	bl	23f90 <__multadd>
   242ac:	0007      	movs	r7, r0
   242ae:	e7bb      	b.n	24228 <__pow5mult+0x14>
   242b0:	2101      	movs	r1, #1
   242b2:	4640      	mov	r0, r8
   242b4:	f7ff fe3a 	bl	23f2c <_Balloc>
   242b8:	4b05      	ldr	r3, [pc, #20]	; (242d0 <__pow5mult+0xbc>)
   242ba:	0005      	movs	r5, r0
   242bc:	6143      	str	r3, [r0, #20]
   242be:	2301      	movs	r3, #1
   242c0:	6103      	str	r3, [r0, #16]
   242c2:	4643      	mov	r3, r8
   242c4:	6498      	str	r0, [r3, #72]	; 0x48
   242c6:	2300      	movs	r3, #0
   242c8:	6003      	str	r3, [r0, #0]
   242ca:	e7b5      	b.n	24238 <__pow5mult+0x24>
   242cc:	000271a0 	.word	0x000271a0
   242d0:	00000271 	.word	0x00000271

000242d4 <__lshift>:
   242d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   242d6:	464e      	mov	r6, r9
   242d8:	4645      	mov	r5, r8
   242da:	46de      	mov	lr, fp
   242dc:	4657      	mov	r7, sl
   242de:	b5e0      	push	{r5, r6, r7, lr}
   242e0:	000e      	movs	r6, r1
   242e2:	6933      	ldr	r3, [r6, #16]
   242e4:	1154      	asrs	r4, r2, #5
   242e6:	4698      	mov	r8, r3
   242e8:	44a0      	add	r8, r4
   242ea:	4643      	mov	r3, r8
   242ec:	1c5d      	adds	r5, r3, #1
   242ee:	68b3      	ldr	r3, [r6, #8]
   242f0:	4683      	mov	fp, r0
   242f2:	4691      	mov	r9, r2
   242f4:	6849      	ldr	r1, [r1, #4]
   242f6:	429d      	cmp	r5, r3
   242f8:	dd03      	ble.n	24302 <__lshift+0x2e>
   242fa:	3101      	adds	r1, #1
   242fc:	005b      	lsls	r3, r3, #1
   242fe:	429d      	cmp	r5, r3
   24300:	dcfb      	bgt.n	242fa <__lshift+0x26>
   24302:	4658      	mov	r0, fp
   24304:	f7ff fe12 	bl	23f2c <_Balloc>
   24308:	0003      	movs	r3, r0
   2430a:	4684      	mov	ip, r0
   2430c:	3314      	adds	r3, #20
   2430e:	2c00      	cmp	r4, #0
   24310:	dd06      	ble.n	24320 <__lshift+0x4c>
   24312:	2100      	movs	r1, #0
   24314:	00a4      	lsls	r4, r4, #2
   24316:	001a      	movs	r2, r3
   24318:	191b      	adds	r3, r3, r4
   2431a:	c202      	stmia	r2!, {r1}
   2431c:	4293      	cmp	r3, r2
   2431e:	d1fc      	bne.n	2431a <__lshift+0x46>
   24320:	6932      	ldr	r2, [r6, #16]
   24322:	4648      	mov	r0, r9
   24324:	0097      	lsls	r7, r2, #2
   24326:	0031      	movs	r1, r6
   24328:	221f      	movs	r2, #31
   2432a:	3114      	adds	r1, #20
   2432c:	4010      	ands	r0, r2
   2432e:	19cf      	adds	r7, r1, r7
   24330:	4681      	mov	r9, r0
   24332:	2800      	cmp	r0, #0
   24334:	d025      	beq.n	24382 <__lshift+0xae>
   24336:	2220      	movs	r2, #32
   24338:	1a12      	subs	r2, r2, r0
   2433a:	4692      	mov	sl, r2
   2433c:	2200      	movs	r2, #0
   2433e:	4648      	mov	r0, r9
   24340:	680c      	ldr	r4, [r1, #0]
   24342:	4084      	lsls	r4, r0
   24344:	4650      	mov	r0, sl
   24346:	4314      	orrs	r4, r2
   24348:	601c      	str	r4, [r3, #0]
   2434a:	c904      	ldmia	r1!, {r2}
   2434c:	3304      	adds	r3, #4
   2434e:	40c2      	lsrs	r2, r0
   24350:	428f      	cmp	r7, r1
   24352:	d8f4      	bhi.n	2433e <__lshift+0x6a>
   24354:	601a      	str	r2, [r3, #0]
   24356:	2a00      	cmp	r2, #0
   24358:	d001      	beq.n	2435e <__lshift+0x8a>
   2435a:	4645      	mov	r5, r8
   2435c:	3502      	adds	r5, #2
   2435e:	4663      	mov	r3, ip
   24360:	3d01      	subs	r5, #1
   24362:	611d      	str	r5, [r3, #16]
   24364:	6873      	ldr	r3, [r6, #4]
   24366:	4660      	mov	r0, ip
   24368:	009a      	lsls	r2, r3, #2
   2436a:	465b      	mov	r3, fp
   2436c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2436e:	189b      	adds	r3, r3, r2
   24370:	681a      	ldr	r2, [r3, #0]
   24372:	6032      	str	r2, [r6, #0]
   24374:	601e      	str	r6, [r3, #0]
   24376:	bc3c      	pop	{r2, r3, r4, r5}
   24378:	4690      	mov	r8, r2
   2437a:	4699      	mov	r9, r3
   2437c:	46a2      	mov	sl, r4
   2437e:	46ab      	mov	fp, r5
   24380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24382:	c904      	ldmia	r1!, {r2}
   24384:	c304      	stmia	r3!, {r2}
   24386:	428f      	cmp	r7, r1
   24388:	d9e9      	bls.n	2435e <__lshift+0x8a>
   2438a:	c904      	ldmia	r1!, {r2}
   2438c:	c304      	stmia	r3!, {r2}
   2438e:	428f      	cmp	r7, r1
   24390:	d8f7      	bhi.n	24382 <__lshift+0xae>
   24392:	e7e4      	b.n	2435e <__lshift+0x8a>

00024394 <__mcmp>:
   24394:	690a      	ldr	r2, [r1, #16]
   24396:	6903      	ldr	r3, [r0, #16]
   24398:	b530      	push	{r4, r5, lr}
   2439a:	0005      	movs	r5, r0
   2439c:	1a98      	subs	r0, r3, r2
   2439e:	d111      	bne.n	243c4 <__mcmp+0x30>
   243a0:	0092      	lsls	r2, r2, #2
   243a2:	3514      	adds	r5, #20
   243a4:	3114      	adds	r1, #20
   243a6:	18ab      	adds	r3, r5, r2
   243a8:	1889      	adds	r1, r1, r2
   243aa:	e001      	b.n	243b0 <__mcmp+0x1c>
   243ac:	429d      	cmp	r5, r3
   243ae:	d209      	bcs.n	243c4 <__mcmp+0x30>
   243b0:	3b04      	subs	r3, #4
   243b2:	3904      	subs	r1, #4
   243b4:	681c      	ldr	r4, [r3, #0]
   243b6:	680a      	ldr	r2, [r1, #0]
   243b8:	4294      	cmp	r4, r2
   243ba:	d0f7      	beq.n	243ac <__mcmp+0x18>
   243bc:	4294      	cmp	r4, r2
   243be:	4180      	sbcs	r0, r0
   243c0:	2201      	movs	r2, #1
   243c2:	4310      	orrs	r0, r2
   243c4:	bd30      	pop	{r4, r5, pc}
   243c6:	46c0      	nop			; (mov r8, r8)

000243c8 <__mdiff>:
   243c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   243ca:	4645      	mov	r5, r8
   243cc:	46de      	mov	lr, fp
   243ce:	4657      	mov	r7, sl
   243d0:	464e      	mov	r6, r9
   243d2:	0014      	movs	r4, r2
   243d4:	690b      	ldr	r3, [r1, #16]
   243d6:	6912      	ldr	r2, [r2, #16]
   243d8:	b5e0      	push	{r5, r6, r7, lr}
   243da:	4688      	mov	r8, r1
   243dc:	1a9d      	subs	r5, r3, r2
   243de:	d11a      	bne.n	24416 <__mdiff+0x4e>
   243e0:	000f      	movs	r7, r1
   243e2:	2114      	movs	r1, #20
   243e4:	468c      	mov	ip, r1
   243e6:	0092      	lsls	r2, r2, #2
   243e8:	3714      	adds	r7, #20
   243ea:	44a4      	add	ip, r4
   243ec:	18bb      	adds	r3, r7, r2
   243ee:	4462      	add	r2, ip
   243f0:	e002      	b.n	243f8 <__mdiff+0x30>
   243f2:	429f      	cmp	r7, r3
   243f4:	d300      	bcc.n	243f8 <__mdiff+0x30>
   243f6:	e070      	b.n	244da <__mdiff+0x112>
   243f8:	3b04      	subs	r3, #4
   243fa:	3a04      	subs	r2, #4
   243fc:	681e      	ldr	r6, [r3, #0]
   243fe:	6811      	ldr	r1, [r2, #0]
   24400:	428e      	cmp	r6, r1
   24402:	d0f6      	beq.n	243f2 <__mdiff+0x2a>
   24404:	d300      	bcc.n	24408 <__mdiff+0x40>
   24406:	e071      	b.n	244ec <__mdiff+0x124>
   24408:	4643      	mov	r3, r8
   2440a:	003e      	movs	r6, r7
   2440c:	46a0      	mov	r8, r4
   2440e:	4667      	mov	r7, ip
   24410:	001c      	movs	r4, r3
   24412:	2501      	movs	r5, #1
   24414:	e006      	b.n	24424 <__mdiff+0x5c>
   24416:	2d00      	cmp	r5, #0
   24418:	db6a      	blt.n	244f0 <__mdiff+0x128>
   2441a:	4647      	mov	r7, r8
   2441c:	0026      	movs	r6, r4
   2441e:	2500      	movs	r5, #0
   24420:	3714      	adds	r7, #20
   24422:	3614      	adds	r6, #20
   24424:	4643      	mov	r3, r8
   24426:	6859      	ldr	r1, [r3, #4]
   24428:	f7ff fd80 	bl	23f2c <_Balloc>
   2442c:	4643      	mov	r3, r8
   2442e:	4681      	mov	r9, r0
   24430:	60c5      	str	r5, [r0, #12]
   24432:	6918      	ldr	r0, [r3, #16]
   24434:	464d      	mov	r5, r9
   24436:	0083      	lsls	r3, r0, #2
   24438:	469c      	mov	ip, r3
   2443a:	6923      	ldr	r3, [r4, #16]
   2443c:	44bc      	add	ip, r7
   2443e:	009b      	lsls	r3, r3, #2
   24440:	4698      	mov	r8, r3
   24442:	2300      	movs	r3, #0
   24444:	44b0      	add	r8, r6
   24446:	3514      	adds	r5, #20
   24448:	469a      	mov	sl, r3
   2444a:	e000      	b.n	2444e <__mdiff+0x86>
   2444c:	0027      	movs	r7, r4
   2444e:	ce04      	ldmia	r6!, {r2}
   24450:	003c      	movs	r4, r7
   24452:	4693      	mov	fp, r2
   24454:	4659      	mov	r1, fp
   24456:	cc08      	ldmia	r4!, {r3}
   24458:	0409      	lsls	r1, r1, #16
   2445a:	041a      	lsls	r2, r3, #16
   2445c:	0c12      	lsrs	r2, r2, #16
   2445e:	4452      	add	r2, sl
   24460:	0c09      	lsrs	r1, r1, #16
   24462:	1a52      	subs	r2, r2, r1
   24464:	0c19      	lsrs	r1, r3, #16
   24466:	465b      	mov	r3, fp
   24468:	0c1b      	lsrs	r3, r3, #16
   2446a:	1acb      	subs	r3, r1, r3
   2446c:	1411      	asrs	r1, r2, #16
   2446e:	185b      	adds	r3, r3, r1
   24470:	0412      	lsls	r2, r2, #16
   24472:	1419      	asrs	r1, r3, #16
   24474:	0c12      	lsrs	r2, r2, #16
   24476:	041b      	lsls	r3, r3, #16
   24478:	468a      	mov	sl, r1
   2447a:	4313      	orrs	r3, r2
   2447c:	1d29      	adds	r1, r5, #4
   2447e:	602b      	str	r3, [r5, #0]
   24480:	000d      	movs	r5, r1
   24482:	45b0      	cmp	r8, r6
   24484:	d8e2      	bhi.n	2444c <__mdiff+0x84>
   24486:	45a4      	cmp	ip, r4
   24488:	d916      	bls.n	244b8 <__mdiff+0xf0>
   2448a:	cc08      	ldmia	r4!, {r3}
   2448c:	041a      	lsls	r2, r3, #16
   2448e:	0c12      	lsrs	r2, r2, #16
   24490:	4452      	add	r2, sl
   24492:	1416      	asrs	r6, r2, #16
   24494:	0c1b      	lsrs	r3, r3, #16
   24496:	199b      	adds	r3, r3, r6
   24498:	0412      	lsls	r2, r2, #16
   2449a:	141e      	asrs	r6, r3, #16
   2449c:	0c12      	lsrs	r2, r2, #16
   2449e:	041b      	lsls	r3, r3, #16
   244a0:	4313      	orrs	r3, r2
   244a2:	46b2      	mov	sl, r6
   244a4:	c508      	stmia	r5!, {r3}
   244a6:	45a4      	cmp	ip, r4
   244a8:	d8ef      	bhi.n	2448a <__mdiff+0xc2>
   244aa:	4662      	mov	r2, ip
   244ac:	2403      	movs	r4, #3
   244ae:	1bd2      	subs	r2, r2, r7
   244b0:	3a05      	subs	r2, #5
   244b2:	43a2      	bics	r2, r4
   244b4:	3204      	adds	r2, #4
   244b6:	1889      	adds	r1, r1, r2
   244b8:	3904      	subs	r1, #4
   244ba:	2b00      	cmp	r3, #0
   244bc:	d104      	bne.n	244c8 <__mdiff+0x100>
   244be:	3904      	subs	r1, #4
   244c0:	680b      	ldr	r3, [r1, #0]
   244c2:	3801      	subs	r0, #1
   244c4:	2b00      	cmp	r3, #0
   244c6:	d0fa      	beq.n	244be <__mdiff+0xf6>
   244c8:	464b      	mov	r3, r9
   244ca:	6118      	str	r0, [r3, #16]
   244cc:	4648      	mov	r0, r9
   244ce:	bc3c      	pop	{r2, r3, r4, r5}
   244d0:	4690      	mov	r8, r2
   244d2:	4699      	mov	r9, r3
   244d4:	46a2      	mov	sl, r4
   244d6:	46ab      	mov	fp, r5
   244d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   244da:	2100      	movs	r1, #0
   244dc:	f7ff fd26 	bl	23f2c <_Balloc>
   244e0:	2301      	movs	r3, #1
   244e2:	6103      	str	r3, [r0, #16]
   244e4:	2300      	movs	r3, #0
   244e6:	4681      	mov	r9, r0
   244e8:	6143      	str	r3, [r0, #20]
   244ea:	e7ef      	b.n	244cc <__mdiff+0x104>
   244ec:	4666      	mov	r6, ip
   244ee:	e799      	b.n	24424 <__mdiff+0x5c>
   244f0:	0027      	movs	r7, r4
   244f2:	000e      	movs	r6, r1
   244f4:	46a0      	mov	r8, r4
   244f6:	3714      	adds	r7, #20
   244f8:	3614      	adds	r6, #20
   244fa:	000c      	movs	r4, r1
   244fc:	2501      	movs	r5, #1
   244fe:	e791      	b.n	24424 <__mdiff+0x5c>

00024500 <__d2b>:
   24500:	b5f0      	push	{r4, r5, r6, r7, lr}
   24502:	2101      	movs	r1, #1
   24504:	001c      	movs	r4, r3
   24506:	b083      	sub	sp, #12
   24508:	9e08      	ldr	r6, [sp, #32]
   2450a:	0015      	movs	r5, r2
   2450c:	f7ff fd0e 	bl	23f2c <_Balloc>
   24510:	0323      	lsls	r3, r4, #12
   24512:	0064      	lsls	r4, r4, #1
   24514:	0007      	movs	r7, r0
   24516:	0b1b      	lsrs	r3, r3, #12
   24518:	0d64      	lsrs	r4, r4, #21
   2451a:	d002      	beq.n	24522 <__d2b+0x22>
   2451c:	2280      	movs	r2, #128	; 0x80
   2451e:	0352      	lsls	r2, r2, #13
   24520:	4313      	orrs	r3, r2
   24522:	9301      	str	r3, [sp, #4]
   24524:	2d00      	cmp	r5, #0
   24526:	d019      	beq.n	2455c <__d2b+0x5c>
   24528:	4668      	mov	r0, sp
   2452a:	9500      	str	r5, [sp, #0]
   2452c:	f7ff fd90 	bl	24050 <__lo0bits>
   24530:	2800      	cmp	r0, #0
   24532:	d130      	bne.n	24596 <__d2b+0x96>
   24534:	9b00      	ldr	r3, [sp, #0]
   24536:	617b      	str	r3, [r7, #20]
   24538:	9b01      	ldr	r3, [sp, #4]
   2453a:	61bb      	str	r3, [r7, #24]
   2453c:	1e5a      	subs	r2, r3, #1
   2453e:	4193      	sbcs	r3, r2
   24540:	1c5d      	adds	r5, r3, #1
   24542:	613d      	str	r5, [r7, #16]
   24544:	2c00      	cmp	r4, #0
   24546:	d014      	beq.n	24572 <__d2b+0x72>
   24548:	4b19      	ldr	r3, [pc, #100]	; (245b0 <__d2b+0xb0>)
   2454a:	469c      	mov	ip, r3
   2454c:	2335      	movs	r3, #53	; 0x35
   2454e:	4464      	add	r4, ip
   24550:	1824      	adds	r4, r4, r0
   24552:	1a18      	subs	r0, r3, r0
   24554:	9b09      	ldr	r3, [sp, #36]	; 0x24
   24556:	6034      	str	r4, [r6, #0]
   24558:	6018      	str	r0, [r3, #0]
   2455a:	e019      	b.n	24590 <__d2b+0x90>
   2455c:	a801      	add	r0, sp, #4
   2455e:	f7ff fd77 	bl	24050 <__lo0bits>
   24562:	9b01      	ldr	r3, [sp, #4]
   24564:	3020      	adds	r0, #32
   24566:	617b      	str	r3, [r7, #20]
   24568:	2301      	movs	r3, #1
   2456a:	2501      	movs	r5, #1
   2456c:	613b      	str	r3, [r7, #16]
   2456e:	2c00      	cmp	r4, #0
   24570:	d1ea      	bne.n	24548 <__d2b+0x48>
   24572:	4b10      	ldr	r3, [pc, #64]	; (245b4 <__d2b+0xb4>)
   24574:	469c      	mov	ip, r3
   24576:	4b10      	ldr	r3, [pc, #64]	; (245b8 <__d2b+0xb8>)
   24578:	4460      	add	r0, ip
   2457a:	18eb      	adds	r3, r5, r3
   2457c:	009b      	lsls	r3, r3, #2
   2457e:	18fb      	adds	r3, r7, r3
   24580:	6030      	str	r0, [r6, #0]
   24582:	6958      	ldr	r0, [r3, #20]
   24584:	f7ff fd4a 	bl	2401c <__hi0bits>
   24588:	016b      	lsls	r3, r5, #5
   2458a:	1a18      	subs	r0, r3, r0
   2458c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2458e:	6018      	str	r0, [r3, #0]
   24590:	0038      	movs	r0, r7
   24592:	b003      	add	sp, #12
   24594:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24596:	9b01      	ldr	r3, [sp, #4]
   24598:	2220      	movs	r2, #32
   2459a:	0019      	movs	r1, r3
   2459c:	1a12      	subs	r2, r2, r0
   2459e:	4091      	lsls	r1, r2
   245a0:	000a      	movs	r2, r1
   245a2:	40c3      	lsrs	r3, r0
   245a4:	9900      	ldr	r1, [sp, #0]
   245a6:	9301      	str	r3, [sp, #4]
   245a8:	430a      	orrs	r2, r1
   245aa:	617a      	str	r2, [r7, #20]
   245ac:	e7c5      	b.n	2453a <__d2b+0x3a>
   245ae:	46c0      	nop			; (mov r8, r8)
   245b0:	fffffbcd 	.word	0xfffffbcd
   245b4:	fffffbce 	.word	0xfffffbce
   245b8:	3fffffff 	.word	0x3fffffff

000245bc <_sbrk_r>:
   245bc:	2300      	movs	r3, #0
   245be:	b570      	push	{r4, r5, r6, lr}
   245c0:	4c06      	ldr	r4, [pc, #24]	; (245dc <_sbrk_r+0x20>)
   245c2:	0005      	movs	r5, r0
   245c4:	0008      	movs	r0, r1
   245c6:	6023      	str	r3, [r4, #0]
   245c8:	f7e2 fdf2 	bl	71b0 <_sbrk>
   245cc:	1c43      	adds	r3, r0, #1
   245ce:	d000      	beq.n	245d2 <_sbrk_r+0x16>
   245d0:	bd70      	pop	{r4, r5, r6, pc}
   245d2:	6823      	ldr	r3, [r4, #0]
   245d4:	2b00      	cmp	r3, #0
   245d6:	d0fb      	beq.n	245d0 <_sbrk_r+0x14>
   245d8:	602b      	str	r3, [r5, #0]
   245da:	e7f9      	b.n	245d0 <_sbrk_r+0x14>
   245dc:	20004dc4 	.word	0x20004dc4

000245e0 <__ssprint_r>:
   245e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   245e2:	4657      	mov	r7, sl
   245e4:	464e      	mov	r6, r9
   245e6:	46de      	mov	lr, fp
   245e8:	4645      	mov	r5, r8
   245ea:	b5e0      	push	{r5, r6, r7, lr}
   245ec:	6893      	ldr	r3, [r2, #8]
   245ee:	b083      	sub	sp, #12
   245f0:	9001      	str	r0, [sp, #4]
   245f2:	000e      	movs	r6, r1
   245f4:	4692      	mov	sl, r2
   245f6:	2b00      	cmp	r3, #0
   245f8:	d070      	beq.n	246dc <__ssprint_r+0xfc>
   245fa:	688d      	ldr	r5, [r1, #8]
   245fc:	6813      	ldr	r3, [r2, #0]
   245fe:	002c      	movs	r4, r5
   24600:	6808      	ldr	r0, [r1, #0]
   24602:	001d      	movs	r5, r3
   24604:	e046      	b.n	24694 <__ssprint_r+0xb4>
   24606:	2290      	movs	r2, #144	; 0x90
   24608:	89b3      	ldrh	r3, [r6, #12]
   2460a:	00d2      	lsls	r2, r2, #3
   2460c:	4213      	tst	r3, r2
   2460e:	d030      	beq.n	24672 <__ssprint_r+0x92>
   24610:	6931      	ldr	r1, [r6, #16]
   24612:	1a42      	subs	r2, r0, r1
   24614:	4693      	mov	fp, r2
   24616:	6970      	ldr	r0, [r6, #20]
   24618:	0042      	lsls	r2, r0, #1
   2461a:	1812      	adds	r2, r2, r0
   2461c:	0fd0      	lsrs	r0, r2, #31
   2461e:	1882      	adds	r2, r0, r2
   24620:	1052      	asrs	r2, r2, #1
   24622:	4690      	mov	r8, r2
   24624:	465a      	mov	r2, fp
   24626:	1c50      	adds	r0, r2, #1
   24628:	19c0      	adds	r0, r0, r7
   2462a:	4642      	mov	r2, r8
   2462c:	4540      	cmp	r0, r8
   2462e:	d901      	bls.n	24634 <__ssprint_r+0x54>
   24630:	4680      	mov	r8, r0
   24632:	0002      	movs	r2, r0
   24634:	2080      	movs	r0, #128	; 0x80
   24636:	00c0      	lsls	r0, r0, #3
   24638:	4203      	tst	r3, r0
   2463a:	d038      	beq.n	246ae <__ssprint_r+0xce>
   2463c:	0011      	movs	r1, r2
   2463e:	9801      	ldr	r0, [sp, #4]
   24640:	f7ff f970 	bl	23924 <_malloc_r>
   24644:	1e04      	subs	r4, r0, #0
   24646:	d054      	beq.n	246f2 <__ssprint_r+0x112>
   24648:	465a      	mov	r2, fp
   2464a:	6931      	ldr	r1, [r6, #16]
   2464c:	f7fc fcaa 	bl	20fa4 <memcpy>
   24650:	89b3      	ldrh	r3, [r6, #12]
   24652:	4a2a      	ldr	r2, [pc, #168]	; (246fc <__ssprint_r+0x11c>)
   24654:	4013      	ands	r3, r2
   24656:	2280      	movs	r2, #128	; 0x80
   24658:	4313      	orrs	r3, r2
   2465a:	81b3      	strh	r3, [r6, #12]
   2465c:	4643      	mov	r3, r8
   2465e:	0020      	movs	r0, r4
   24660:	465a      	mov	r2, fp
   24662:	6134      	str	r4, [r6, #16]
   24664:	46b8      	mov	r8, r7
   24666:	003c      	movs	r4, r7
   24668:	4458      	add	r0, fp
   2466a:	6173      	str	r3, [r6, #20]
   2466c:	1a9b      	subs	r3, r3, r2
   2466e:	6030      	str	r0, [r6, #0]
   24670:	60b3      	str	r3, [r6, #8]
   24672:	4642      	mov	r2, r8
   24674:	4649      	mov	r1, r9
   24676:	f000 fa2d 	bl	24ad4 <memmove>
   2467a:	68b3      	ldr	r3, [r6, #8]
   2467c:	1b1c      	subs	r4, r3, r4
   2467e:	6833      	ldr	r3, [r6, #0]
   24680:	60b4      	str	r4, [r6, #8]
   24682:	4443      	add	r3, r8
   24684:	6033      	str	r3, [r6, #0]
   24686:	0018      	movs	r0, r3
   24688:	4653      	mov	r3, sl
   2468a:	689b      	ldr	r3, [r3, #8]
   2468c:	1bdf      	subs	r7, r3, r7
   2468e:	4653      	mov	r3, sl
   24690:	609f      	str	r7, [r3, #8]
   24692:	d023      	beq.n	246dc <__ssprint_r+0xfc>
   24694:	686f      	ldr	r7, [r5, #4]
   24696:	002b      	movs	r3, r5
   24698:	3508      	adds	r5, #8
   2469a:	2f00      	cmp	r7, #0
   2469c:	d0fa      	beq.n	24694 <__ssprint_r+0xb4>
   2469e:	681b      	ldr	r3, [r3, #0]
   246a0:	46a0      	mov	r8, r4
   246a2:	4699      	mov	r9, r3
   246a4:	42a7      	cmp	r7, r4
   246a6:	d2ae      	bcs.n	24606 <__ssprint_r+0x26>
   246a8:	003c      	movs	r4, r7
   246aa:	46b8      	mov	r8, r7
   246ac:	e7e1      	b.n	24672 <__ssprint_r+0x92>
   246ae:	9801      	ldr	r0, [sp, #4]
   246b0:	f000 fa60 	bl	24b74 <_realloc_r>
   246b4:	1e04      	subs	r4, r0, #0
   246b6:	d1d1      	bne.n	2465c <__ssprint_r+0x7c>
   246b8:	9c01      	ldr	r4, [sp, #4]
   246ba:	6931      	ldr	r1, [r6, #16]
   246bc:	0020      	movs	r0, r4
   246be:	f000 f915 	bl	248ec <_free_r>
   246c2:	230c      	movs	r3, #12
   246c4:	6023      	str	r3, [r4, #0]
   246c6:	2240      	movs	r2, #64	; 0x40
   246c8:	89b3      	ldrh	r3, [r6, #12]
   246ca:	2001      	movs	r0, #1
   246cc:	4313      	orrs	r3, r2
   246ce:	81b3      	strh	r3, [r6, #12]
   246d0:	4652      	mov	r2, sl
   246d2:	2300      	movs	r3, #0
   246d4:	4240      	negs	r0, r0
   246d6:	6093      	str	r3, [r2, #8]
   246d8:	6053      	str	r3, [r2, #4]
   246da:	e003      	b.n	246e4 <__ssprint_r+0x104>
   246dc:	2300      	movs	r3, #0
   246de:	4652      	mov	r2, sl
   246e0:	2000      	movs	r0, #0
   246e2:	6053      	str	r3, [r2, #4]
   246e4:	b003      	add	sp, #12
   246e6:	bc3c      	pop	{r2, r3, r4, r5}
   246e8:	4690      	mov	r8, r2
   246ea:	4699      	mov	r9, r3
   246ec:	46a2      	mov	sl, r4
   246ee:	46ab      	mov	fp, r5
   246f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   246f2:	230c      	movs	r3, #12
   246f4:	9a01      	ldr	r2, [sp, #4]
   246f6:	6013      	str	r3, [r2, #0]
   246f8:	e7e5      	b.n	246c6 <__ssprint_r+0xe6>
   246fa:	46c0      	nop			; (mov r8, r8)
   246fc:	fffffb7f 	.word	0xfffffb7f

00024700 <__register_exitproc>:
   24700:	b5f0      	push	{r4, r5, r6, r7, lr}
   24702:	464e      	mov	r6, r9
   24704:	4645      	mov	r5, r8
   24706:	46de      	mov	lr, fp
   24708:	4657      	mov	r7, sl
   2470a:	b5e0      	push	{r5, r6, r7, lr}
   2470c:	4d36      	ldr	r5, [pc, #216]	; (247e8 <__register_exitproc+0xe8>)
   2470e:	b083      	sub	sp, #12
   24710:	0006      	movs	r6, r0
   24712:	6828      	ldr	r0, [r5, #0]
   24714:	4698      	mov	r8, r3
   24716:	000f      	movs	r7, r1
   24718:	4691      	mov	r9, r2
   2471a:	f7ff f8ff 	bl	2391c <__retarget_lock_acquire_recursive>
   2471e:	4b33      	ldr	r3, [pc, #204]	; (247ec <__register_exitproc+0xec>)
   24720:	681c      	ldr	r4, [r3, #0]
   24722:	23a4      	movs	r3, #164	; 0xa4
   24724:	005b      	lsls	r3, r3, #1
   24726:	58e0      	ldr	r0, [r4, r3]
   24728:	2800      	cmp	r0, #0
   2472a:	d052      	beq.n	247d2 <__register_exitproc+0xd2>
   2472c:	6843      	ldr	r3, [r0, #4]
   2472e:	2b1f      	cmp	r3, #31
   24730:	dc13      	bgt.n	2475a <__register_exitproc+0x5a>
   24732:	1c5a      	adds	r2, r3, #1
   24734:	9201      	str	r2, [sp, #4]
   24736:	2e00      	cmp	r6, #0
   24738:	d128      	bne.n	2478c <__register_exitproc+0x8c>
   2473a:	9a01      	ldr	r2, [sp, #4]
   2473c:	3302      	adds	r3, #2
   2473e:	009b      	lsls	r3, r3, #2
   24740:	6042      	str	r2, [r0, #4]
   24742:	501f      	str	r7, [r3, r0]
   24744:	6828      	ldr	r0, [r5, #0]
   24746:	f7ff f8eb 	bl	23920 <__retarget_lock_release_recursive>
   2474a:	2000      	movs	r0, #0
   2474c:	b003      	add	sp, #12
   2474e:	bc3c      	pop	{r2, r3, r4, r5}
   24750:	4690      	mov	r8, r2
   24752:	4699      	mov	r9, r3
   24754:	46a2      	mov	sl, r4
   24756:	46ab      	mov	fp, r5
   24758:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2475a:	4b25      	ldr	r3, [pc, #148]	; (247f0 <__register_exitproc+0xf0>)
   2475c:	2b00      	cmp	r3, #0
   2475e:	d03d      	beq.n	247dc <__register_exitproc+0xdc>
   24760:	20c8      	movs	r0, #200	; 0xc8
   24762:	0040      	lsls	r0, r0, #1
   24764:	e000      	b.n	24768 <__register_exitproc+0x68>
   24766:	bf00      	nop
   24768:	2800      	cmp	r0, #0
   2476a:	d037      	beq.n	247dc <__register_exitproc+0xdc>
   2476c:	22a4      	movs	r2, #164	; 0xa4
   2476e:	2300      	movs	r3, #0
   24770:	0052      	lsls	r2, r2, #1
   24772:	58a1      	ldr	r1, [r4, r2]
   24774:	6043      	str	r3, [r0, #4]
   24776:	6001      	str	r1, [r0, #0]
   24778:	50a0      	str	r0, [r4, r2]
   2477a:	3240      	adds	r2, #64	; 0x40
   2477c:	5083      	str	r3, [r0, r2]
   2477e:	3204      	adds	r2, #4
   24780:	5083      	str	r3, [r0, r2]
   24782:	3301      	adds	r3, #1
   24784:	9301      	str	r3, [sp, #4]
   24786:	2300      	movs	r3, #0
   24788:	2e00      	cmp	r6, #0
   2478a:	d0d6      	beq.n	2473a <__register_exitproc+0x3a>
   2478c:	009a      	lsls	r2, r3, #2
   2478e:	4692      	mov	sl, r2
   24790:	4482      	add	sl, r0
   24792:	464a      	mov	r2, r9
   24794:	2188      	movs	r1, #136	; 0x88
   24796:	4654      	mov	r4, sl
   24798:	5062      	str	r2, [r4, r1]
   2479a:	22c4      	movs	r2, #196	; 0xc4
   2479c:	0052      	lsls	r2, r2, #1
   2479e:	4691      	mov	r9, r2
   247a0:	4481      	add	r9, r0
   247a2:	464a      	mov	r2, r9
   247a4:	3987      	subs	r1, #135	; 0x87
   247a6:	4099      	lsls	r1, r3
   247a8:	6812      	ldr	r2, [r2, #0]
   247aa:	468b      	mov	fp, r1
   247ac:	430a      	orrs	r2, r1
   247ae:	4694      	mov	ip, r2
   247b0:	464a      	mov	r2, r9
   247b2:	4661      	mov	r1, ip
   247b4:	6011      	str	r1, [r2, #0]
   247b6:	2284      	movs	r2, #132	; 0x84
   247b8:	4641      	mov	r1, r8
   247ba:	0052      	lsls	r2, r2, #1
   247bc:	50a1      	str	r1, [r4, r2]
   247be:	2e02      	cmp	r6, #2
   247c0:	d1bb      	bne.n	2473a <__register_exitproc+0x3a>
   247c2:	0002      	movs	r2, r0
   247c4:	465c      	mov	r4, fp
   247c6:	328d      	adds	r2, #141	; 0x8d
   247c8:	32ff      	adds	r2, #255	; 0xff
   247ca:	6811      	ldr	r1, [r2, #0]
   247cc:	430c      	orrs	r4, r1
   247ce:	6014      	str	r4, [r2, #0]
   247d0:	e7b3      	b.n	2473a <__register_exitproc+0x3a>
   247d2:	0020      	movs	r0, r4
   247d4:	304d      	adds	r0, #77	; 0x4d
   247d6:	30ff      	adds	r0, #255	; 0xff
   247d8:	50e0      	str	r0, [r4, r3]
   247da:	e7a7      	b.n	2472c <__register_exitproc+0x2c>
   247dc:	6828      	ldr	r0, [r5, #0]
   247de:	f7ff f89f 	bl	23920 <__retarget_lock_release_recursive>
   247e2:	2001      	movs	r0, #1
   247e4:	4240      	negs	r0, r0
   247e6:	e7b1      	b.n	2474c <__register_exitproc+0x4c>
   247e8:	200006f8 	.word	0x200006f8
   247ec:	00026ed0 	.word	0x00026ed0
   247f0:	00000000 	.word	0x00000000

000247f4 <_calloc_r>:
   247f4:	b510      	push	{r4, lr}
   247f6:	4351      	muls	r1, r2
   247f8:	f7ff f894 	bl	23924 <_malloc_r>
   247fc:	1e04      	subs	r4, r0, #0
   247fe:	d01c      	beq.n	2483a <_calloc_r+0x46>
   24800:	0003      	movs	r3, r0
   24802:	3b08      	subs	r3, #8
   24804:	685a      	ldr	r2, [r3, #4]
   24806:	2303      	movs	r3, #3
   24808:	439a      	bics	r2, r3
   2480a:	3a04      	subs	r2, #4
   2480c:	2a24      	cmp	r2, #36	; 0x24
   2480e:	d816      	bhi.n	2483e <_calloc_r+0x4a>
   24810:	0003      	movs	r3, r0
   24812:	2a13      	cmp	r2, #19
   24814:	d90d      	bls.n	24832 <_calloc_r+0x3e>
   24816:	2100      	movs	r1, #0
   24818:	3308      	adds	r3, #8
   2481a:	6001      	str	r1, [r0, #0]
   2481c:	6041      	str	r1, [r0, #4]
   2481e:	2a1b      	cmp	r2, #27
   24820:	d907      	bls.n	24832 <_calloc_r+0x3e>
   24822:	6081      	str	r1, [r0, #8]
   24824:	60c1      	str	r1, [r0, #12]
   24826:	2a24      	cmp	r2, #36	; 0x24
   24828:	d10d      	bne.n	24846 <_calloc_r+0x52>
   2482a:	0003      	movs	r3, r0
   2482c:	6101      	str	r1, [r0, #16]
   2482e:	3318      	adds	r3, #24
   24830:	6141      	str	r1, [r0, #20]
   24832:	2200      	movs	r2, #0
   24834:	601a      	str	r2, [r3, #0]
   24836:	605a      	str	r2, [r3, #4]
   24838:	609a      	str	r2, [r3, #8]
   2483a:	0020      	movs	r0, r4
   2483c:	bd10      	pop	{r4, pc}
   2483e:	2100      	movs	r1, #0
   24840:	f7fc fbf2 	bl	21028 <memset>
   24844:	e7f9      	b.n	2483a <_calloc_r+0x46>
   24846:	0003      	movs	r3, r0
   24848:	3310      	adds	r3, #16
   2484a:	e7f2      	b.n	24832 <_calloc_r+0x3e>

0002484c <_malloc_trim_r>:
   2484c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2484e:	000c      	movs	r4, r1
   24850:	0006      	movs	r6, r0
   24852:	f7ff fb5b 	bl	23f0c <__malloc_lock>
   24856:	4f20      	ldr	r7, [pc, #128]	; (248d8 <_malloc_trim_r+0x8c>)
   24858:	68bb      	ldr	r3, [r7, #8]
   2485a:	685d      	ldr	r5, [r3, #4]
   2485c:	2303      	movs	r3, #3
   2485e:	439d      	bics	r5, r3
   24860:	4b1e      	ldr	r3, [pc, #120]	; (248dc <_malloc_trim_r+0x90>)
   24862:	1b2c      	subs	r4, r5, r4
   24864:	469c      	mov	ip, r3
   24866:	4464      	add	r4, ip
   24868:	0b24      	lsrs	r4, r4, #12
   2486a:	4b1d      	ldr	r3, [pc, #116]	; (248e0 <_malloc_trim_r+0x94>)
   2486c:	3c01      	subs	r4, #1
   2486e:	0324      	lsls	r4, r4, #12
   24870:	429c      	cmp	r4, r3
   24872:	dd07      	ble.n	24884 <_malloc_trim_r+0x38>
   24874:	2100      	movs	r1, #0
   24876:	0030      	movs	r0, r6
   24878:	f7ff fea0 	bl	245bc <_sbrk_r>
   2487c:	68bb      	ldr	r3, [r7, #8]
   2487e:	195b      	adds	r3, r3, r5
   24880:	4298      	cmp	r0, r3
   24882:	d004      	beq.n	2488e <_malloc_trim_r+0x42>
   24884:	0030      	movs	r0, r6
   24886:	f7ff fb49 	bl	23f1c <__malloc_unlock>
   2488a:	2000      	movs	r0, #0
   2488c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2488e:	4261      	negs	r1, r4
   24890:	0030      	movs	r0, r6
   24892:	f7ff fe93 	bl	245bc <_sbrk_r>
   24896:	1c43      	adds	r3, r0, #1
   24898:	d00d      	beq.n	248b6 <_malloc_trim_r+0x6a>
   2489a:	2201      	movs	r2, #1
   2489c:	68bb      	ldr	r3, [r7, #8]
   2489e:	1b2d      	subs	r5, r5, r4
   248a0:	4315      	orrs	r5, r2
   248a2:	605d      	str	r5, [r3, #4]
   248a4:	4b0f      	ldr	r3, [pc, #60]	; (248e4 <_malloc_trim_r+0x98>)
   248a6:	0030      	movs	r0, r6
   248a8:	681a      	ldr	r2, [r3, #0]
   248aa:	1b14      	subs	r4, r2, r4
   248ac:	601c      	str	r4, [r3, #0]
   248ae:	f7ff fb35 	bl	23f1c <__malloc_unlock>
   248b2:	2001      	movs	r0, #1
   248b4:	e7ea      	b.n	2488c <_malloc_trim_r+0x40>
   248b6:	2100      	movs	r1, #0
   248b8:	0030      	movs	r0, r6
   248ba:	f7ff fe7f 	bl	245bc <_sbrk_r>
   248be:	68ba      	ldr	r2, [r7, #8]
   248c0:	1a83      	subs	r3, r0, r2
   248c2:	2b0f      	cmp	r3, #15
   248c4:	ddde      	ble.n	24884 <_malloc_trim_r+0x38>
   248c6:	4908      	ldr	r1, [pc, #32]	; (248e8 <_malloc_trim_r+0x9c>)
   248c8:	6809      	ldr	r1, [r1, #0]
   248ca:	1a40      	subs	r0, r0, r1
   248cc:	4905      	ldr	r1, [pc, #20]	; (248e4 <_malloc_trim_r+0x98>)
   248ce:	6008      	str	r0, [r1, #0]
   248d0:	2101      	movs	r1, #1
   248d2:	430b      	orrs	r3, r1
   248d4:	6053      	str	r3, [r2, #4]
   248d6:	e7d5      	b.n	24884 <_malloc_trim_r+0x38>
   248d8:	200006fc 	.word	0x200006fc
   248dc:	00000fef 	.word	0x00000fef
   248e0:	00000fff 	.word	0x00000fff
   248e4:	20000e14 	.word	0x20000e14
   248e8:	20000b04 	.word	0x20000b04

000248ec <_free_r>:
   248ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   248ee:	0004      	movs	r4, r0
   248f0:	1e0d      	subs	r5, r1, #0
   248f2:	d03c      	beq.n	2496e <_free_r+0x82>
   248f4:	f7ff fb0a 	bl	23f0c <__malloc_lock>
   248f8:	0029      	movs	r1, r5
   248fa:	3908      	subs	r1, #8
   248fc:	6848      	ldr	r0, [r1, #4]
   248fe:	2301      	movs	r3, #1
   24900:	0005      	movs	r5, r0
   24902:	2603      	movs	r6, #3
   24904:	439d      	bics	r5, r3
   24906:	194a      	adds	r2, r1, r5
   24908:	469c      	mov	ip, r3
   2490a:	4f61      	ldr	r7, [pc, #388]	; (24a90 <_free_r+0x1a4>)
   2490c:	6853      	ldr	r3, [r2, #4]
   2490e:	43b3      	bics	r3, r6
   24910:	68be      	ldr	r6, [r7, #8]
   24912:	42b2      	cmp	r2, r6
   24914:	d056      	beq.n	249c4 <_free_r+0xd8>
   24916:	4666      	mov	r6, ip
   24918:	6053      	str	r3, [r2, #4]
   2491a:	4206      	tst	r6, r0
   2491c:	d10a      	bne.n	24934 <_free_r+0x48>
   2491e:	003e      	movs	r6, r7
   24920:	6808      	ldr	r0, [r1, #0]
   24922:	3608      	adds	r6, #8
   24924:	1a09      	subs	r1, r1, r0
   24926:	182d      	adds	r5, r5, r0
   24928:	6888      	ldr	r0, [r1, #8]
   2492a:	42b0      	cmp	r0, r6
   2492c:	d065      	beq.n	249fa <_free_r+0x10e>
   2492e:	68ce      	ldr	r6, [r1, #12]
   24930:	60c6      	str	r6, [r0, #12]
   24932:	60b0      	str	r0, [r6, #8]
   24934:	2001      	movs	r0, #1
   24936:	18d6      	adds	r6, r2, r3
   24938:	6876      	ldr	r6, [r6, #4]
   2493a:	4206      	tst	r6, r0
   2493c:	d033      	beq.n	249a6 <_free_r+0xba>
   2493e:	4b55      	ldr	r3, [pc, #340]	; (24a94 <_free_r+0x1a8>)
   24940:	4328      	orrs	r0, r5
   24942:	6048      	str	r0, [r1, #4]
   24944:	514d      	str	r5, [r1, r5]
   24946:	429d      	cmp	r5, r3
   24948:	d812      	bhi.n	24970 <_free_r+0x84>
   2494a:	08ed      	lsrs	r5, r5, #3
   2494c:	3bff      	subs	r3, #255	; 0xff
   2494e:	10aa      	asrs	r2, r5, #2
   24950:	3bff      	subs	r3, #255	; 0xff
   24952:	4093      	lsls	r3, r2
   24954:	687a      	ldr	r2, [r7, #4]
   24956:	00ed      	lsls	r5, r5, #3
   24958:	4313      	orrs	r3, r2
   2495a:	607b      	str	r3, [r7, #4]
   2495c:	19ef      	adds	r7, r5, r7
   2495e:	68bb      	ldr	r3, [r7, #8]
   24960:	60cf      	str	r7, [r1, #12]
   24962:	608b      	str	r3, [r1, #8]
   24964:	60b9      	str	r1, [r7, #8]
   24966:	60d9      	str	r1, [r3, #12]
   24968:	0020      	movs	r0, r4
   2496a:	f7ff fad7 	bl	23f1c <__malloc_unlock>
   2496e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24970:	0a68      	lsrs	r0, r5, #9
   24972:	2804      	cmp	r0, #4
   24974:	d850      	bhi.n	24a18 <_free_r+0x12c>
   24976:	09a8      	lsrs	r0, r5, #6
   24978:	0002      	movs	r2, r0
   2497a:	3039      	adds	r0, #57	; 0x39
   2497c:	3238      	adds	r2, #56	; 0x38
   2497e:	00c0      	lsls	r0, r0, #3
   24980:	1838      	adds	r0, r7, r0
   24982:	3808      	subs	r0, #8
   24984:	6883      	ldr	r3, [r0, #8]
   24986:	2603      	movs	r6, #3
   24988:	4298      	cmp	r0, r3
   2498a:	d04c      	beq.n	24a26 <_free_r+0x13a>
   2498c:	685a      	ldr	r2, [r3, #4]
   2498e:	43b2      	bics	r2, r6
   24990:	4295      	cmp	r5, r2
   24992:	d230      	bcs.n	249f6 <_free_r+0x10a>
   24994:	689b      	ldr	r3, [r3, #8]
   24996:	4298      	cmp	r0, r3
   24998:	d1f8      	bne.n	2498c <_free_r+0xa0>
   2499a:	68c3      	ldr	r3, [r0, #12]
   2499c:	60cb      	str	r3, [r1, #12]
   2499e:	6088      	str	r0, [r1, #8]
   249a0:	6099      	str	r1, [r3, #8]
   249a2:	60c1      	str	r1, [r0, #12]
   249a4:	e7e0      	b.n	24968 <_free_r+0x7c>
   249a6:	18ed      	adds	r5, r5, r3
   249a8:	4e3b      	ldr	r6, [pc, #236]	; (24a98 <_free_r+0x1ac>)
   249aa:	6893      	ldr	r3, [r2, #8]
   249ac:	42b3      	cmp	r3, r6
   249ae:	d042      	beq.n	24a36 <_free_r+0x14a>
   249b0:	68d2      	ldr	r2, [r2, #12]
   249b2:	4328      	orrs	r0, r5
   249b4:	60da      	str	r2, [r3, #12]
   249b6:	6093      	str	r3, [r2, #8]
   249b8:	4b36      	ldr	r3, [pc, #216]	; (24a94 <_free_r+0x1a8>)
   249ba:	6048      	str	r0, [r1, #4]
   249bc:	514d      	str	r5, [r1, r5]
   249be:	429d      	cmp	r5, r3
   249c0:	d8d6      	bhi.n	24970 <_free_r+0x84>
   249c2:	e7c2      	b.n	2494a <_free_r+0x5e>
   249c4:	4662      	mov	r2, ip
   249c6:	18eb      	adds	r3, r5, r3
   249c8:	4202      	tst	r2, r0
   249ca:	d106      	bne.n	249da <_free_r+0xee>
   249cc:	680a      	ldr	r2, [r1, #0]
   249ce:	1a89      	subs	r1, r1, r2
   249d0:	6888      	ldr	r0, [r1, #8]
   249d2:	189b      	adds	r3, r3, r2
   249d4:	68ca      	ldr	r2, [r1, #12]
   249d6:	60c2      	str	r2, [r0, #12]
   249d8:	6090      	str	r0, [r2, #8]
   249da:	2201      	movs	r2, #1
   249dc:	431a      	orrs	r2, r3
   249de:	604a      	str	r2, [r1, #4]
   249e0:	4a2e      	ldr	r2, [pc, #184]	; (24a9c <_free_r+0x1b0>)
   249e2:	60b9      	str	r1, [r7, #8]
   249e4:	6812      	ldr	r2, [r2, #0]
   249e6:	4293      	cmp	r3, r2
   249e8:	d3be      	bcc.n	24968 <_free_r+0x7c>
   249ea:	4b2d      	ldr	r3, [pc, #180]	; (24aa0 <_free_r+0x1b4>)
   249ec:	0020      	movs	r0, r4
   249ee:	6819      	ldr	r1, [r3, #0]
   249f0:	f7ff ff2c 	bl	2484c <_malloc_trim_r>
   249f4:	e7b8      	b.n	24968 <_free_r+0x7c>
   249f6:	0018      	movs	r0, r3
   249f8:	e7cf      	b.n	2499a <_free_r+0xae>
   249fa:	4666      	mov	r6, ip
   249fc:	18d0      	adds	r0, r2, r3
   249fe:	6840      	ldr	r0, [r0, #4]
   24a00:	4230      	tst	r0, r6
   24a02:	d13f      	bne.n	24a84 <_free_r+0x198>
   24a04:	6890      	ldr	r0, [r2, #8]
   24a06:	195d      	adds	r5, r3, r5
   24a08:	68d3      	ldr	r3, [r2, #12]
   24a0a:	60c3      	str	r3, [r0, #12]
   24a0c:	6098      	str	r0, [r3, #8]
   24a0e:	4663      	mov	r3, ip
   24a10:	432b      	orrs	r3, r5
   24a12:	604b      	str	r3, [r1, #4]
   24a14:	514d      	str	r5, [r1, r5]
   24a16:	e7a7      	b.n	24968 <_free_r+0x7c>
   24a18:	2814      	cmp	r0, #20
   24a1a:	d814      	bhi.n	24a46 <_free_r+0x15a>
   24a1c:	0002      	movs	r2, r0
   24a1e:	305c      	adds	r0, #92	; 0x5c
   24a20:	325b      	adds	r2, #91	; 0x5b
   24a22:	00c0      	lsls	r0, r0, #3
   24a24:	e7ac      	b.n	24980 <_free_r+0x94>
   24a26:	2301      	movs	r3, #1
   24a28:	1092      	asrs	r2, r2, #2
   24a2a:	4093      	lsls	r3, r2
   24a2c:	687a      	ldr	r2, [r7, #4]
   24a2e:	4313      	orrs	r3, r2
   24a30:	607b      	str	r3, [r7, #4]
   24a32:	0003      	movs	r3, r0
   24a34:	e7b2      	b.n	2499c <_free_r+0xb0>
   24a36:	4328      	orrs	r0, r5
   24a38:	60d9      	str	r1, [r3, #12]
   24a3a:	6099      	str	r1, [r3, #8]
   24a3c:	60cb      	str	r3, [r1, #12]
   24a3e:	608b      	str	r3, [r1, #8]
   24a40:	6048      	str	r0, [r1, #4]
   24a42:	514d      	str	r5, [r1, r5]
   24a44:	e790      	b.n	24968 <_free_r+0x7c>
   24a46:	2854      	cmp	r0, #84	; 0x54
   24a48:	d805      	bhi.n	24a56 <_free_r+0x16a>
   24a4a:	0b28      	lsrs	r0, r5, #12
   24a4c:	0002      	movs	r2, r0
   24a4e:	306f      	adds	r0, #111	; 0x6f
   24a50:	326e      	adds	r2, #110	; 0x6e
   24a52:	00c0      	lsls	r0, r0, #3
   24a54:	e794      	b.n	24980 <_free_r+0x94>
   24a56:	22aa      	movs	r2, #170	; 0xaa
   24a58:	0052      	lsls	r2, r2, #1
   24a5a:	4290      	cmp	r0, r2
   24a5c:	d805      	bhi.n	24a6a <_free_r+0x17e>
   24a5e:	0be8      	lsrs	r0, r5, #15
   24a60:	0002      	movs	r2, r0
   24a62:	3078      	adds	r0, #120	; 0x78
   24a64:	3277      	adds	r2, #119	; 0x77
   24a66:	00c0      	lsls	r0, r0, #3
   24a68:	e78a      	b.n	24980 <_free_r+0x94>
   24a6a:	4a0e      	ldr	r2, [pc, #56]	; (24aa4 <_free_r+0x1b8>)
   24a6c:	4290      	cmp	r0, r2
   24a6e:	d805      	bhi.n	24a7c <_free_r+0x190>
   24a70:	0ca8      	lsrs	r0, r5, #18
   24a72:	0002      	movs	r2, r0
   24a74:	307d      	adds	r0, #125	; 0x7d
   24a76:	327c      	adds	r2, #124	; 0x7c
   24a78:	00c0      	lsls	r0, r0, #3
   24a7a:	e781      	b.n	24980 <_free_r+0x94>
   24a7c:	20fe      	movs	r0, #254	; 0xfe
   24a7e:	227e      	movs	r2, #126	; 0x7e
   24a80:	0080      	lsls	r0, r0, #2
   24a82:	e77d      	b.n	24980 <_free_r+0x94>
   24a84:	4663      	mov	r3, ip
   24a86:	432b      	orrs	r3, r5
   24a88:	604b      	str	r3, [r1, #4]
   24a8a:	6015      	str	r5, [r2, #0]
   24a8c:	e76c      	b.n	24968 <_free_r+0x7c>
   24a8e:	46c0      	nop			; (mov r8, r8)
   24a90:	200006fc 	.word	0x200006fc
   24a94:	000001ff 	.word	0x000001ff
   24a98:	20000704 	.word	0x20000704
   24a9c:	20000b08 	.word	0x20000b08
   24aa0:	20000e44 	.word	0x20000e44
   24aa4:	00000554 	.word	0x00000554

00024aa8 <__ascii_mbtowc>:
   24aa8:	b082      	sub	sp, #8
   24aaa:	2900      	cmp	r1, #0
   24aac:	d00a      	beq.n	24ac4 <__ascii_mbtowc+0x1c>
   24aae:	2a00      	cmp	r2, #0
   24ab0:	d00b      	beq.n	24aca <__ascii_mbtowc+0x22>
   24ab2:	2b00      	cmp	r3, #0
   24ab4:	d00b      	beq.n	24ace <__ascii_mbtowc+0x26>
   24ab6:	7813      	ldrb	r3, [r2, #0]
   24ab8:	600b      	str	r3, [r1, #0]
   24aba:	7810      	ldrb	r0, [r2, #0]
   24abc:	1e43      	subs	r3, r0, #1
   24abe:	4198      	sbcs	r0, r3
   24ac0:	b002      	add	sp, #8
   24ac2:	4770      	bx	lr
   24ac4:	a901      	add	r1, sp, #4
   24ac6:	2a00      	cmp	r2, #0
   24ac8:	d1f3      	bne.n	24ab2 <__ascii_mbtowc+0xa>
   24aca:	2000      	movs	r0, #0
   24acc:	e7f8      	b.n	24ac0 <__ascii_mbtowc+0x18>
   24ace:	2002      	movs	r0, #2
   24ad0:	4240      	negs	r0, r0
   24ad2:	e7f5      	b.n	24ac0 <__ascii_mbtowc+0x18>

00024ad4 <memmove>:
   24ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
   24ad6:	4288      	cmp	r0, r1
   24ad8:	d90a      	bls.n	24af0 <memmove+0x1c>
   24ada:	188b      	adds	r3, r1, r2
   24adc:	4298      	cmp	r0, r3
   24ade:	d207      	bcs.n	24af0 <memmove+0x1c>
   24ae0:	1e53      	subs	r3, r2, #1
   24ae2:	2a00      	cmp	r2, #0
   24ae4:	d003      	beq.n	24aee <memmove+0x1a>
   24ae6:	5cca      	ldrb	r2, [r1, r3]
   24ae8:	54c2      	strb	r2, [r0, r3]
   24aea:	3b01      	subs	r3, #1
   24aec:	d2fb      	bcs.n	24ae6 <memmove+0x12>
   24aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24af0:	0005      	movs	r5, r0
   24af2:	2a0f      	cmp	r2, #15
   24af4:	d808      	bhi.n	24b08 <memmove+0x34>
   24af6:	2a00      	cmp	r2, #0
   24af8:	d0f9      	beq.n	24aee <memmove+0x1a>
   24afa:	2300      	movs	r3, #0
   24afc:	5ccc      	ldrb	r4, [r1, r3]
   24afe:	54ec      	strb	r4, [r5, r3]
   24b00:	3301      	adds	r3, #1
   24b02:	4293      	cmp	r3, r2
   24b04:	d1fa      	bne.n	24afc <memmove+0x28>
   24b06:	e7f2      	b.n	24aee <memmove+0x1a>
   24b08:	000b      	movs	r3, r1
   24b0a:	4303      	orrs	r3, r0
   24b0c:	079b      	lsls	r3, r3, #30
   24b0e:	d12d      	bne.n	24b6c <memmove+0x98>
   24b10:	0015      	movs	r5, r2
   24b12:	000c      	movs	r4, r1
   24b14:	0003      	movs	r3, r0
   24b16:	3d10      	subs	r5, #16
   24b18:	092f      	lsrs	r7, r5, #4
   24b1a:	3701      	adds	r7, #1
   24b1c:	013f      	lsls	r7, r7, #4
   24b1e:	19c7      	adds	r7, r0, r7
   24b20:	6826      	ldr	r6, [r4, #0]
   24b22:	601e      	str	r6, [r3, #0]
   24b24:	6866      	ldr	r6, [r4, #4]
   24b26:	605e      	str	r6, [r3, #4]
   24b28:	68a6      	ldr	r6, [r4, #8]
   24b2a:	609e      	str	r6, [r3, #8]
   24b2c:	68e6      	ldr	r6, [r4, #12]
   24b2e:	3410      	adds	r4, #16
   24b30:	60de      	str	r6, [r3, #12]
   24b32:	3310      	adds	r3, #16
   24b34:	429f      	cmp	r7, r3
   24b36:	d1f3      	bne.n	24b20 <memmove+0x4c>
   24b38:	240f      	movs	r4, #15
   24b3a:	43a5      	bics	r5, r4
   24b3c:	3510      	adds	r5, #16
   24b3e:	1949      	adds	r1, r1, r5
   24b40:	4014      	ands	r4, r2
   24b42:	1945      	adds	r5, r0, r5
   24b44:	2c03      	cmp	r4, #3
   24b46:	d913      	bls.n	24b70 <memmove+0x9c>
   24b48:	2300      	movs	r3, #0
   24b4a:	1f27      	subs	r7, r4, #4
   24b4c:	08be      	lsrs	r6, r7, #2
   24b4e:	3601      	adds	r6, #1
   24b50:	00b6      	lsls	r6, r6, #2
   24b52:	58cc      	ldr	r4, [r1, r3]
   24b54:	50ec      	str	r4, [r5, r3]
   24b56:	3304      	adds	r3, #4
   24b58:	42b3      	cmp	r3, r6
   24b5a:	d1fa      	bne.n	24b52 <memmove+0x7e>
   24b5c:	2603      	movs	r6, #3
   24b5e:	43b7      	bics	r7, r6
   24b60:	1d3c      	adds	r4, r7, #4
   24b62:	1909      	adds	r1, r1, r4
   24b64:	192d      	adds	r5, r5, r4
   24b66:	4032      	ands	r2, r6
   24b68:	d1c7      	bne.n	24afa <memmove+0x26>
   24b6a:	e7c0      	b.n	24aee <memmove+0x1a>
   24b6c:	0005      	movs	r5, r0
   24b6e:	e7c4      	b.n	24afa <memmove+0x26>
   24b70:	0022      	movs	r2, r4
   24b72:	e7c0      	b.n	24af6 <memmove+0x22>

00024b74 <_realloc_r>:
   24b74:	b5f0      	push	{r4, r5, r6, r7, lr}
   24b76:	464e      	mov	r6, r9
   24b78:	4645      	mov	r5, r8
   24b7a:	46de      	mov	lr, fp
   24b7c:	4657      	mov	r7, sl
   24b7e:	b5e0      	push	{r5, r6, r7, lr}
   24b80:	b085      	sub	sp, #20
   24b82:	9001      	str	r0, [sp, #4]
   24b84:	000e      	movs	r6, r1
   24b86:	0015      	movs	r5, r2
   24b88:	2900      	cmp	r1, #0
   24b8a:	d100      	bne.n	24b8e <_realloc_r+0x1a>
   24b8c:	e09e      	b.n	24ccc <_realloc_r+0x158>
   24b8e:	0037      	movs	r7, r6
   24b90:	9801      	ldr	r0, [sp, #4]
   24b92:	3f08      	subs	r7, #8
   24b94:	f7ff f9ba 	bl	23f0c <__malloc_lock>
   24b98:	687a      	ldr	r2, [r7, #4]
   24b9a:	2303      	movs	r3, #3
   24b9c:	0014      	movs	r4, r2
   24b9e:	439c      	bics	r4, r3
   24ba0:	002b      	movs	r3, r5
   24ba2:	330b      	adds	r3, #11
   24ba4:	46b9      	mov	r9, r7
   24ba6:	2b16      	cmp	r3, #22
   24ba8:	d847      	bhi.n	24c3a <_realloc_r+0xc6>
   24baa:	2110      	movs	r1, #16
   24bac:	2310      	movs	r3, #16
   24bae:	4688      	mov	r8, r1
   24bb0:	4545      	cmp	r5, r8
   24bb2:	d846      	bhi.n	24c42 <_realloc_r+0xce>
   24bb4:	429c      	cmp	r4, r3
   24bb6:	da49      	bge.n	24c4c <_realloc_r+0xd8>
   24bb8:	49cc      	ldr	r1, [pc, #816]	; (24eec <_realloc_r+0x378>)
   24bba:	1938      	adds	r0, r7, r4
   24bbc:	468b      	mov	fp, r1
   24bbe:	6889      	ldr	r1, [r1, #8]
   24bc0:	9002      	str	r0, [sp, #8]
   24bc2:	4288      	cmp	r0, r1
   24bc4:	d100      	bne.n	24bc8 <_realloc_r+0x54>
   24bc6:	e0c2      	b.n	24d4e <_realloc_r+0x1da>
   24bc8:	2101      	movs	r1, #1
   24bca:	468a      	mov	sl, r1
   24bcc:	6840      	ldr	r0, [r0, #4]
   24bce:	0001      	movs	r1, r0
   24bd0:	9003      	str	r0, [sp, #12]
   24bd2:	4650      	mov	r0, sl
   24bd4:	4381      	bics	r1, r0
   24bd6:	468c      	mov	ip, r1
   24bd8:	9902      	ldr	r1, [sp, #8]
   24bda:	468b      	mov	fp, r1
   24bdc:	44dc      	add	ip, fp
   24bde:	4661      	mov	r1, ip
   24be0:	6849      	ldr	r1, [r1, #4]
   24be2:	4201      	tst	r1, r0
   24be4:	d04d      	beq.n	24c82 <_realloc_r+0x10e>
   24be6:	4210      	tst	r0, r2
   24be8:	d100      	bne.n	24bec <_realloc_r+0x78>
   24bea:	e0a2      	b.n	24d32 <_realloc_r+0x1be>
   24bec:	0029      	movs	r1, r5
   24bee:	9801      	ldr	r0, [sp, #4]
   24bf0:	f7fe fe98 	bl	23924 <_malloc_r>
   24bf4:	1e05      	subs	r5, r0, #0
   24bf6:	d039      	beq.n	24c6c <_realloc_r+0xf8>
   24bf8:	2301      	movs	r3, #1
   24bfa:	0002      	movs	r2, r0
   24bfc:	6879      	ldr	r1, [r7, #4]
   24bfe:	3a08      	subs	r2, #8
   24c00:	4399      	bics	r1, r3
   24c02:	187f      	adds	r7, r7, r1
   24c04:	42ba      	cmp	r2, r7
   24c06:	d100      	bne.n	24c0a <_realloc_r+0x96>
   24c08:	e12e      	b.n	24e68 <_realloc_r+0x2f4>
   24c0a:	1f22      	subs	r2, r4, #4
   24c0c:	2a24      	cmp	r2, #36	; 0x24
   24c0e:	d900      	bls.n	24c12 <_realloc_r+0x9e>
   24c10:	e114      	b.n	24e3c <_realloc_r+0x2c8>
   24c12:	2a13      	cmp	r2, #19
   24c14:	d900      	bls.n	24c18 <_realloc_r+0xa4>
   24c16:	e0e8      	b.n	24dea <_realloc_r+0x276>
   24c18:	0003      	movs	r3, r0
   24c1a:	0032      	movs	r2, r6
   24c1c:	6811      	ldr	r1, [r2, #0]
   24c1e:	6019      	str	r1, [r3, #0]
   24c20:	6851      	ldr	r1, [r2, #4]
   24c22:	6059      	str	r1, [r3, #4]
   24c24:	6892      	ldr	r2, [r2, #8]
   24c26:	609a      	str	r2, [r3, #8]
   24c28:	9c01      	ldr	r4, [sp, #4]
   24c2a:	0031      	movs	r1, r6
   24c2c:	0020      	movs	r0, r4
   24c2e:	f7ff fe5d 	bl	248ec <_free_r>
   24c32:	0020      	movs	r0, r4
   24c34:	f7ff f972 	bl	23f1c <__malloc_unlock>
   24c38:	e01b      	b.n	24c72 <_realloc_r+0xfe>
   24c3a:	2107      	movs	r1, #7
   24c3c:	438b      	bics	r3, r1
   24c3e:	4698      	mov	r8, r3
   24c40:	d5b6      	bpl.n	24bb0 <_realloc_r+0x3c>
   24c42:	230c      	movs	r3, #12
   24c44:	9a01      	ldr	r2, [sp, #4]
   24c46:	2500      	movs	r5, #0
   24c48:	6013      	str	r3, [r2, #0]
   24c4a:	e012      	b.n	24c72 <_realloc_r+0xfe>
   24c4c:	0035      	movs	r5, r6
   24c4e:	4643      	mov	r3, r8
   24c50:	1ae3      	subs	r3, r4, r3
   24c52:	2b0f      	cmp	r3, #15
   24c54:	d825      	bhi.n	24ca2 <_realloc_r+0x12e>
   24c56:	464b      	mov	r3, r9
   24c58:	2201      	movs	r2, #1
   24c5a:	4649      	mov	r1, r9
   24c5c:	685b      	ldr	r3, [r3, #4]
   24c5e:	4013      	ands	r3, r2
   24c60:	4323      	orrs	r3, r4
   24c62:	604b      	str	r3, [r1, #4]
   24c64:	444c      	add	r4, r9
   24c66:	6863      	ldr	r3, [r4, #4]
   24c68:	431a      	orrs	r2, r3
   24c6a:	6062      	str	r2, [r4, #4]
   24c6c:	9801      	ldr	r0, [sp, #4]
   24c6e:	f7ff f955 	bl	23f1c <__malloc_unlock>
   24c72:	0028      	movs	r0, r5
   24c74:	b005      	add	sp, #20
   24c76:	bc3c      	pop	{r2, r3, r4, r5}
   24c78:	4690      	mov	r8, r2
   24c7a:	4699      	mov	r9, r3
   24c7c:	46a2      	mov	sl, r4
   24c7e:	46ab      	mov	fp, r5
   24c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24c82:	2103      	movs	r1, #3
   24c84:	9803      	ldr	r0, [sp, #12]
   24c86:	468c      	mov	ip, r1
   24c88:	4388      	bics	r0, r1
   24c8a:	1821      	adds	r1, r4, r0
   24c8c:	468b      	mov	fp, r1
   24c8e:	4299      	cmp	r1, r3
   24c90:	db21      	blt.n	24cd6 <_realloc_r+0x162>
   24c92:	9a02      	ldr	r2, [sp, #8]
   24c94:	0035      	movs	r5, r6
   24c96:	68d3      	ldr	r3, [r2, #12]
   24c98:	6892      	ldr	r2, [r2, #8]
   24c9a:	465c      	mov	r4, fp
   24c9c:	60d3      	str	r3, [r2, #12]
   24c9e:	609a      	str	r2, [r3, #8]
   24ca0:	e7d5      	b.n	24c4e <_realloc_r+0xda>
   24ca2:	464a      	mov	r2, r9
   24ca4:	2001      	movs	r0, #1
   24ca6:	4646      	mov	r6, r8
   24ca8:	6852      	ldr	r2, [r2, #4]
   24caa:	4649      	mov	r1, r9
   24cac:	4002      	ands	r2, r0
   24cae:	4332      	orrs	r2, r6
   24cb0:	464e      	mov	r6, r9
   24cb2:	4441      	add	r1, r8
   24cb4:	4303      	orrs	r3, r0
   24cb6:	6072      	str	r2, [r6, #4]
   24cb8:	444c      	add	r4, r9
   24cba:	604b      	str	r3, [r1, #4]
   24cbc:	6863      	ldr	r3, [r4, #4]
   24cbe:	3108      	adds	r1, #8
   24cc0:	4318      	orrs	r0, r3
   24cc2:	6060      	str	r0, [r4, #4]
   24cc4:	9801      	ldr	r0, [sp, #4]
   24cc6:	f7ff fe11 	bl	248ec <_free_r>
   24cca:	e7cf      	b.n	24c6c <_realloc_r+0xf8>
   24ccc:	0011      	movs	r1, r2
   24cce:	f7fe fe29 	bl	23924 <_malloc_r>
   24cd2:	0005      	movs	r5, r0
   24cd4:	e7cd      	b.n	24c72 <_realloc_r+0xfe>
   24cd6:	4651      	mov	r1, sl
   24cd8:	4211      	tst	r1, r2
   24cda:	d000      	beq.n	24cde <_realloc_r+0x16a>
   24cdc:	e786      	b.n	24bec <_realloc_r+0x78>
   24cde:	4661      	mov	r1, ip
   24ce0:	683a      	ldr	r2, [r7, #0]
   24ce2:	1aba      	subs	r2, r7, r2
   24ce4:	4692      	mov	sl, r2
   24ce6:	6852      	ldr	r2, [r2, #4]
   24ce8:	438a      	bics	r2, r1
   24cea:	1880      	adds	r0, r0, r2
   24cec:	4683      	mov	fp, r0
   24cee:	44a3      	add	fp, r4
   24cf0:	459b      	cmp	fp, r3
   24cf2:	db26      	blt.n	24d42 <_realloc_r+0x1ce>
   24cf4:	9a02      	ldr	r2, [sp, #8]
   24cf6:	68d3      	ldr	r3, [r2, #12]
   24cf8:	6892      	ldr	r2, [r2, #8]
   24cfa:	60d3      	str	r3, [r2, #12]
   24cfc:	609a      	str	r2, [r3, #8]
   24cfe:	4653      	mov	r3, sl
   24d00:	4652      	mov	r2, sl
   24d02:	4655      	mov	r5, sl
   24d04:	6892      	ldr	r2, [r2, #8]
   24d06:	68db      	ldr	r3, [r3, #12]
   24d08:	3508      	adds	r5, #8
   24d0a:	60d3      	str	r3, [r2, #12]
   24d0c:	609a      	str	r2, [r3, #8]
   24d0e:	1f22      	subs	r2, r4, #4
   24d10:	2a24      	cmp	r2, #36	; 0x24
   24d12:	d900      	bls.n	24d16 <_realloc_r+0x1a2>
   24d14:	e096      	b.n	24e44 <_realloc_r+0x2d0>
   24d16:	2a13      	cmp	r2, #19
   24d18:	d972      	bls.n	24e00 <_realloc_r+0x28c>
   24d1a:	4653      	mov	r3, sl
   24d1c:	6831      	ldr	r1, [r6, #0]
   24d1e:	6099      	str	r1, [r3, #8]
   24d20:	6871      	ldr	r1, [r6, #4]
   24d22:	60d9      	str	r1, [r3, #12]
   24d24:	2a1b      	cmp	r2, #27
   24d26:	d900      	bls.n	24d2a <_realloc_r+0x1b6>
   24d28:	e0a4      	b.n	24e74 <_realloc_r+0x300>
   24d2a:	0032      	movs	r2, r6
   24d2c:	3310      	adds	r3, #16
   24d2e:	3208      	adds	r2, #8
   24d30:	e068      	b.n	24e04 <_realloc_r+0x290>
   24d32:	683a      	ldr	r2, [r7, #0]
   24d34:	1aba      	subs	r2, r7, r2
   24d36:	4692      	mov	sl, r2
   24d38:	4651      	mov	r1, sl
   24d3a:	2203      	movs	r2, #3
   24d3c:	6849      	ldr	r1, [r1, #4]
   24d3e:	4391      	bics	r1, r2
   24d40:	000a      	movs	r2, r1
   24d42:	4693      	mov	fp, r2
   24d44:	44a3      	add	fp, r4
   24d46:	459b      	cmp	fp, r3
   24d48:	da00      	bge.n	24d4c <_realloc_r+0x1d8>
   24d4a:	e74f      	b.n	24bec <_realloc_r+0x78>
   24d4c:	e7d7      	b.n	24cfe <_realloc_r+0x18a>
   24d4e:	2003      	movs	r0, #3
   24d50:	9902      	ldr	r1, [sp, #8]
   24d52:	4684      	mov	ip, r0
   24d54:	6849      	ldr	r1, [r1, #4]
   24d56:	4381      	bics	r1, r0
   24d58:	4640      	mov	r0, r8
   24d5a:	1909      	adds	r1, r1, r4
   24d5c:	3010      	adds	r0, #16
   24d5e:	9002      	str	r0, [sp, #8]
   24d60:	4281      	cmp	r1, r0
   24d62:	da58      	bge.n	24e16 <_realloc_r+0x2a2>
   24d64:	07d2      	lsls	r2, r2, #31
   24d66:	d500      	bpl.n	24d6a <_realloc_r+0x1f6>
   24d68:	e740      	b.n	24bec <_realloc_r+0x78>
   24d6a:	4660      	mov	r0, ip
   24d6c:	683a      	ldr	r2, [r7, #0]
   24d6e:	1aba      	subs	r2, r7, r2
   24d70:	4692      	mov	sl, r2
   24d72:	6852      	ldr	r2, [r2, #4]
   24d74:	4382      	bics	r2, r0
   24d76:	9802      	ldr	r0, [sp, #8]
   24d78:	1851      	adds	r1, r2, r1
   24d7a:	9103      	str	r1, [sp, #12]
   24d7c:	4288      	cmp	r0, r1
   24d7e:	dce0      	bgt.n	24d42 <_realloc_r+0x1ce>
   24d80:	4653      	mov	r3, sl
   24d82:	4652      	mov	r2, sl
   24d84:	4655      	mov	r5, sl
   24d86:	6892      	ldr	r2, [r2, #8]
   24d88:	68db      	ldr	r3, [r3, #12]
   24d8a:	3508      	adds	r5, #8
   24d8c:	60d3      	str	r3, [r2, #12]
   24d8e:	609a      	str	r2, [r3, #8]
   24d90:	1f22      	subs	r2, r4, #4
   24d92:	2a24      	cmp	r2, #36	; 0x24
   24d94:	d900      	bls.n	24d98 <_realloc_r+0x224>
   24d96:	e08e      	b.n	24eb6 <_realloc_r+0x342>
   24d98:	2a13      	cmp	r2, #19
   24d9a:	d800      	bhi.n	24d9e <_realloc_r+0x22a>
   24d9c:	e088      	b.n	24eb0 <_realloc_r+0x33c>
   24d9e:	4653      	mov	r3, sl
   24da0:	6831      	ldr	r1, [r6, #0]
   24da2:	6099      	str	r1, [r3, #8]
   24da4:	6871      	ldr	r1, [r6, #4]
   24da6:	60d9      	str	r1, [r3, #12]
   24da8:	2a1b      	cmp	r2, #27
   24daa:	d900      	bls.n	24dae <_realloc_r+0x23a>
   24dac:	e088      	b.n	24ec0 <_realloc_r+0x34c>
   24dae:	0032      	movs	r2, r6
   24db0:	3310      	adds	r3, #16
   24db2:	3208      	adds	r2, #8
   24db4:	6811      	ldr	r1, [r2, #0]
   24db6:	6019      	str	r1, [r3, #0]
   24db8:	6851      	ldr	r1, [r2, #4]
   24dba:	6059      	str	r1, [r3, #4]
   24dbc:	6892      	ldr	r2, [r2, #8]
   24dbe:	609a      	str	r2, [r3, #8]
   24dc0:	4651      	mov	r1, sl
   24dc2:	465b      	mov	r3, fp
   24dc4:	4642      	mov	r2, r8
   24dc6:	4441      	add	r1, r8
   24dc8:	6099      	str	r1, [r3, #8]
   24dca:	9b03      	ldr	r3, [sp, #12]
   24dcc:	9801      	ldr	r0, [sp, #4]
   24dce:	1a9a      	subs	r2, r3, r2
   24dd0:	2301      	movs	r3, #1
   24dd2:	431a      	orrs	r2, r3
   24dd4:	604a      	str	r2, [r1, #4]
   24dd6:	4652      	mov	r2, sl
   24dd8:	6852      	ldr	r2, [r2, #4]
   24dda:	4013      	ands	r3, r2
   24ddc:	4642      	mov	r2, r8
   24dde:	4313      	orrs	r3, r2
   24de0:	4652      	mov	r2, sl
   24de2:	6053      	str	r3, [r2, #4]
   24de4:	f7ff f89a 	bl	23f1c <__malloc_unlock>
   24de8:	e743      	b.n	24c72 <_realloc_r+0xfe>
   24dea:	6833      	ldr	r3, [r6, #0]
   24dec:	6003      	str	r3, [r0, #0]
   24dee:	6873      	ldr	r3, [r6, #4]
   24df0:	6043      	str	r3, [r0, #4]
   24df2:	2a1b      	cmp	r2, #27
   24df4:	d82d      	bhi.n	24e52 <_realloc_r+0x2de>
   24df6:	0003      	movs	r3, r0
   24df8:	0032      	movs	r2, r6
   24dfa:	3308      	adds	r3, #8
   24dfc:	3208      	adds	r2, #8
   24dfe:	e70d      	b.n	24c1c <_realloc_r+0xa8>
   24e00:	002b      	movs	r3, r5
   24e02:	0032      	movs	r2, r6
   24e04:	6811      	ldr	r1, [r2, #0]
   24e06:	465c      	mov	r4, fp
   24e08:	6019      	str	r1, [r3, #0]
   24e0a:	6851      	ldr	r1, [r2, #4]
   24e0c:	46d1      	mov	r9, sl
   24e0e:	6059      	str	r1, [r3, #4]
   24e10:	6892      	ldr	r2, [r2, #8]
   24e12:	609a      	str	r2, [r3, #8]
   24e14:	e71b      	b.n	24c4e <_realloc_r+0xda>
   24e16:	4643      	mov	r3, r8
   24e18:	18fa      	adds	r2, r7, r3
   24e1a:	465b      	mov	r3, fp
   24e1c:	609a      	str	r2, [r3, #8]
   24e1e:	4643      	mov	r3, r8
   24e20:	1ac9      	subs	r1, r1, r3
   24e22:	2301      	movs	r3, #1
   24e24:	4319      	orrs	r1, r3
   24e26:	6051      	str	r1, [r2, #4]
   24e28:	687a      	ldr	r2, [r7, #4]
   24e2a:	9801      	ldr	r0, [sp, #4]
   24e2c:	4013      	ands	r3, r2
   24e2e:	4642      	mov	r2, r8
   24e30:	4313      	orrs	r3, r2
   24e32:	607b      	str	r3, [r7, #4]
   24e34:	f7ff f872 	bl	23f1c <__malloc_unlock>
   24e38:	0035      	movs	r5, r6
   24e3a:	e71a      	b.n	24c72 <_realloc_r+0xfe>
   24e3c:	0031      	movs	r1, r6
   24e3e:	f7ff fe49 	bl	24ad4 <memmove>
   24e42:	e6f1      	b.n	24c28 <_realloc_r+0xb4>
   24e44:	0031      	movs	r1, r6
   24e46:	0028      	movs	r0, r5
   24e48:	f7ff fe44 	bl	24ad4 <memmove>
   24e4c:	465c      	mov	r4, fp
   24e4e:	46d1      	mov	r9, sl
   24e50:	e6fd      	b.n	24c4e <_realloc_r+0xda>
   24e52:	68b3      	ldr	r3, [r6, #8]
   24e54:	6083      	str	r3, [r0, #8]
   24e56:	68f3      	ldr	r3, [r6, #12]
   24e58:	60c3      	str	r3, [r0, #12]
   24e5a:	2a24      	cmp	r2, #36	; 0x24
   24e5c:	d015      	beq.n	24e8a <_realloc_r+0x316>
   24e5e:	0003      	movs	r3, r0
   24e60:	0032      	movs	r2, r6
   24e62:	3310      	adds	r3, #16
   24e64:	3210      	adds	r2, #16
   24e66:	e6d9      	b.n	24c1c <_realloc_r+0xa8>
   24e68:	6853      	ldr	r3, [r2, #4]
   24e6a:	2203      	movs	r2, #3
   24e6c:	4393      	bics	r3, r2
   24e6e:	18e4      	adds	r4, r4, r3
   24e70:	0035      	movs	r5, r6
   24e72:	e6ec      	b.n	24c4e <_realloc_r+0xda>
   24e74:	4653      	mov	r3, sl
   24e76:	68b1      	ldr	r1, [r6, #8]
   24e78:	6119      	str	r1, [r3, #16]
   24e7a:	68f1      	ldr	r1, [r6, #12]
   24e7c:	6159      	str	r1, [r3, #20]
   24e7e:	2a24      	cmp	r2, #36	; 0x24
   24e80:	d00c      	beq.n	24e9c <_realloc_r+0x328>
   24e82:	0032      	movs	r2, r6
   24e84:	3318      	adds	r3, #24
   24e86:	3210      	adds	r2, #16
   24e88:	e7bc      	b.n	24e04 <_realloc_r+0x290>
   24e8a:	6933      	ldr	r3, [r6, #16]
   24e8c:	0032      	movs	r2, r6
   24e8e:	6103      	str	r3, [r0, #16]
   24e90:	0003      	movs	r3, r0
   24e92:	6971      	ldr	r1, [r6, #20]
   24e94:	3318      	adds	r3, #24
   24e96:	3218      	adds	r2, #24
   24e98:	6141      	str	r1, [r0, #20]
   24e9a:	e6bf      	b.n	24c1c <_realloc_r+0xa8>
   24e9c:	4653      	mov	r3, sl
   24e9e:	6932      	ldr	r2, [r6, #16]
   24ea0:	4651      	mov	r1, sl
   24ea2:	619a      	str	r2, [r3, #24]
   24ea4:	0032      	movs	r2, r6
   24ea6:	6970      	ldr	r0, [r6, #20]
   24ea8:	3320      	adds	r3, #32
   24eaa:	3218      	adds	r2, #24
   24eac:	61c8      	str	r0, [r1, #28]
   24eae:	e7a9      	b.n	24e04 <_realloc_r+0x290>
   24eb0:	002b      	movs	r3, r5
   24eb2:	0032      	movs	r2, r6
   24eb4:	e77e      	b.n	24db4 <_realloc_r+0x240>
   24eb6:	0031      	movs	r1, r6
   24eb8:	0028      	movs	r0, r5
   24eba:	f7ff fe0b 	bl	24ad4 <memmove>
   24ebe:	e77f      	b.n	24dc0 <_realloc_r+0x24c>
   24ec0:	4653      	mov	r3, sl
   24ec2:	68b1      	ldr	r1, [r6, #8]
   24ec4:	6119      	str	r1, [r3, #16]
   24ec6:	68f1      	ldr	r1, [r6, #12]
   24ec8:	6159      	str	r1, [r3, #20]
   24eca:	2a24      	cmp	r2, #36	; 0x24
   24ecc:	d003      	beq.n	24ed6 <_realloc_r+0x362>
   24ece:	0032      	movs	r2, r6
   24ed0:	3318      	adds	r3, #24
   24ed2:	3210      	adds	r2, #16
   24ed4:	e76e      	b.n	24db4 <_realloc_r+0x240>
   24ed6:	4653      	mov	r3, sl
   24ed8:	6932      	ldr	r2, [r6, #16]
   24eda:	4651      	mov	r1, sl
   24edc:	619a      	str	r2, [r3, #24]
   24ede:	0032      	movs	r2, r6
   24ee0:	6970      	ldr	r0, [r6, #20]
   24ee2:	3320      	adds	r3, #32
   24ee4:	3218      	adds	r2, #24
   24ee6:	61c8      	str	r0, [r1, #28]
   24ee8:	e764      	b.n	24db4 <_realloc_r+0x240>
   24eea:	46c0      	nop			; (mov r8, r8)
   24eec:	200006fc 	.word	0x200006fc

00024ef0 <__ascii_wctomb>:
   24ef0:	2900      	cmp	r1, #0
   24ef2:	d004      	beq.n	24efe <__ascii_wctomb+0xe>
   24ef4:	2aff      	cmp	r2, #255	; 0xff
   24ef6:	d804      	bhi.n	24f02 <__ascii_wctomb+0x12>
   24ef8:	2001      	movs	r0, #1
   24efa:	700a      	strb	r2, [r1, #0]
   24efc:	4770      	bx	lr
   24efe:	2000      	movs	r0, #0
   24f00:	e7fc      	b.n	24efc <__ascii_wctomb+0xc>
   24f02:	238a      	movs	r3, #138	; 0x8a
   24f04:	6003      	str	r3, [r0, #0]
   24f06:	2001      	movs	r0, #1
   24f08:	4240      	negs	r0, r0
   24f0a:	e7f7      	b.n	24efc <__ascii_wctomb+0xc>

00024f0c <__aeabi_uldivmod>:
   24f0c:	2b00      	cmp	r3, #0
   24f0e:	d111      	bne.n	24f34 <__aeabi_uldivmod+0x28>
   24f10:	2a00      	cmp	r2, #0
   24f12:	d10f      	bne.n	24f34 <__aeabi_uldivmod+0x28>
   24f14:	2900      	cmp	r1, #0
   24f16:	d100      	bne.n	24f1a <__aeabi_uldivmod+0xe>
   24f18:	2800      	cmp	r0, #0
   24f1a:	d002      	beq.n	24f22 <__aeabi_uldivmod+0x16>
   24f1c:	2100      	movs	r1, #0
   24f1e:	43c9      	mvns	r1, r1
   24f20:	1c08      	adds	r0, r1, #0
   24f22:	b407      	push	{r0, r1, r2}
   24f24:	4802      	ldr	r0, [pc, #8]	; (24f30 <__aeabi_uldivmod+0x24>)
   24f26:	a102      	add	r1, pc, #8	; (adr r1, 24f30 <__aeabi_uldivmod+0x24>)
   24f28:	1840      	adds	r0, r0, r1
   24f2a:	9002      	str	r0, [sp, #8]
   24f2c:	bd03      	pop	{r0, r1, pc}
   24f2e:	46c0      	nop			; (mov r8, r8)
   24f30:	ffff9301 	.word	0xffff9301
   24f34:	b403      	push	{r0, r1}
   24f36:	4668      	mov	r0, sp
   24f38:	b501      	push	{r0, lr}
   24f3a:	9802      	ldr	r0, [sp, #8]
   24f3c:	f000 f806 	bl	24f4c <__udivmoddi4>
   24f40:	9b01      	ldr	r3, [sp, #4]
   24f42:	469e      	mov	lr, r3
   24f44:	b002      	add	sp, #8
   24f46:	bc0c      	pop	{r2, r3}
   24f48:	4770      	bx	lr
   24f4a:	46c0      	nop			; (mov r8, r8)

00024f4c <__udivmoddi4>:
   24f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   24f4e:	4657      	mov	r7, sl
   24f50:	464e      	mov	r6, r9
   24f52:	4645      	mov	r5, r8
   24f54:	46de      	mov	lr, fp
   24f56:	b5e0      	push	{r5, r6, r7, lr}
   24f58:	0004      	movs	r4, r0
   24f5a:	b083      	sub	sp, #12
   24f5c:	000d      	movs	r5, r1
   24f5e:	4692      	mov	sl, r2
   24f60:	4699      	mov	r9, r3
   24f62:	428b      	cmp	r3, r1
   24f64:	d82f      	bhi.n	24fc6 <__udivmoddi4+0x7a>
   24f66:	d02c      	beq.n	24fc2 <__udivmoddi4+0x76>
   24f68:	4649      	mov	r1, r9
   24f6a:	4650      	mov	r0, sl
   24f6c:	f000 f8ae 	bl	250cc <__clzdi2>
   24f70:	0029      	movs	r1, r5
   24f72:	0006      	movs	r6, r0
   24f74:	0020      	movs	r0, r4
   24f76:	f000 f8a9 	bl	250cc <__clzdi2>
   24f7a:	1a33      	subs	r3, r6, r0
   24f7c:	4698      	mov	r8, r3
   24f7e:	3b20      	subs	r3, #32
   24f80:	469b      	mov	fp, r3
   24f82:	d500      	bpl.n	24f86 <__udivmoddi4+0x3a>
   24f84:	e074      	b.n	25070 <__udivmoddi4+0x124>
   24f86:	4653      	mov	r3, sl
   24f88:	465a      	mov	r2, fp
   24f8a:	4093      	lsls	r3, r2
   24f8c:	001f      	movs	r7, r3
   24f8e:	4653      	mov	r3, sl
   24f90:	4642      	mov	r2, r8
   24f92:	4093      	lsls	r3, r2
   24f94:	001e      	movs	r6, r3
   24f96:	42af      	cmp	r7, r5
   24f98:	d829      	bhi.n	24fee <__udivmoddi4+0xa2>
   24f9a:	d026      	beq.n	24fea <__udivmoddi4+0x9e>
   24f9c:	465b      	mov	r3, fp
   24f9e:	1ba4      	subs	r4, r4, r6
   24fa0:	41bd      	sbcs	r5, r7
   24fa2:	2b00      	cmp	r3, #0
   24fa4:	da00      	bge.n	24fa8 <__udivmoddi4+0x5c>
   24fa6:	e079      	b.n	2509c <__udivmoddi4+0x150>
   24fa8:	2200      	movs	r2, #0
   24faa:	2300      	movs	r3, #0
   24fac:	9200      	str	r2, [sp, #0]
   24fae:	9301      	str	r3, [sp, #4]
   24fb0:	2301      	movs	r3, #1
   24fb2:	465a      	mov	r2, fp
   24fb4:	4093      	lsls	r3, r2
   24fb6:	9301      	str	r3, [sp, #4]
   24fb8:	2301      	movs	r3, #1
   24fba:	4642      	mov	r2, r8
   24fbc:	4093      	lsls	r3, r2
   24fbe:	9300      	str	r3, [sp, #0]
   24fc0:	e019      	b.n	24ff6 <__udivmoddi4+0xaa>
   24fc2:	4282      	cmp	r2, r0
   24fc4:	d9d0      	bls.n	24f68 <__udivmoddi4+0x1c>
   24fc6:	2200      	movs	r2, #0
   24fc8:	2300      	movs	r3, #0
   24fca:	9200      	str	r2, [sp, #0]
   24fcc:	9301      	str	r3, [sp, #4]
   24fce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   24fd0:	2b00      	cmp	r3, #0
   24fd2:	d001      	beq.n	24fd8 <__udivmoddi4+0x8c>
   24fd4:	601c      	str	r4, [r3, #0]
   24fd6:	605d      	str	r5, [r3, #4]
   24fd8:	9800      	ldr	r0, [sp, #0]
   24fda:	9901      	ldr	r1, [sp, #4]
   24fdc:	b003      	add	sp, #12
   24fde:	bc3c      	pop	{r2, r3, r4, r5}
   24fe0:	4690      	mov	r8, r2
   24fe2:	4699      	mov	r9, r3
   24fe4:	46a2      	mov	sl, r4
   24fe6:	46ab      	mov	fp, r5
   24fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24fea:	42a3      	cmp	r3, r4
   24fec:	d9d6      	bls.n	24f9c <__udivmoddi4+0x50>
   24fee:	2200      	movs	r2, #0
   24ff0:	2300      	movs	r3, #0
   24ff2:	9200      	str	r2, [sp, #0]
   24ff4:	9301      	str	r3, [sp, #4]
   24ff6:	4643      	mov	r3, r8
   24ff8:	2b00      	cmp	r3, #0
   24ffa:	d0e8      	beq.n	24fce <__udivmoddi4+0x82>
   24ffc:	07fb      	lsls	r3, r7, #31
   24ffe:	0872      	lsrs	r2, r6, #1
   25000:	431a      	orrs	r2, r3
   25002:	4646      	mov	r6, r8
   25004:	087b      	lsrs	r3, r7, #1
   25006:	e00e      	b.n	25026 <__udivmoddi4+0xda>
   25008:	42ab      	cmp	r3, r5
   2500a:	d101      	bne.n	25010 <__udivmoddi4+0xc4>
   2500c:	42a2      	cmp	r2, r4
   2500e:	d80c      	bhi.n	2502a <__udivmoddi4+0xde>
   25010:	1aa4      	subs	r4, r4, r2
   25012:	419d      	sbcs	r5, r3
   25014:	2001      	movs	r0, #1
   25016:	1924      	adds	r4, r4, r4
   25018:	416d      	adcs	r5, r5
   2501a:	2100      	movs	r1, #0
   2501c:	3e01      	subs	r6, #1
   2501e:	1824      	adds	r4, r4, r0
   25020:	414d      	adcs	r5, r1
   25022:	2e00      	cmp	r6, #0
   25024:	d006      	beq.n	25034 <__udivmoddi4+0xe8>
   25026:	42ab      	cmp	r3, r5
   25028:	d9ee      	bls.n	25008 <__udivmoddi4+0xbc>
   2502a:	3e01      	subs	r6, #1
   2502c:	1924      	adds	r4, r4, r4
   2502e:	416d      	adcs	r5, r5
   25030:	2e00      	cmp	r6, #0
   25032:	d1f8      	bne.n	25026 <__udivmoddi4+0xda>
   25034:	465b      	mov	r3, fp
   25036:	9800      	ldr	r0, [sp, #0]
   25038:	9901      	ldr	r1, [sp, #4]
   2503a:	1900      	adds	r0, r0, r4
   2503c:	4169      	adcs	r1, r5
   2503e:	2b00      	cmp	r3, #0
   25040:	db22      	blt.n	25088 <__udivmoddi4+0x13c>
   25042:	002b      	movs	r3, r5
   25044:	465a      	mov	r2, fp
   25046:	40d3      	lsrs	r3, r2
   25048:	002a      	movs	r2, r5
   2504a:	4644      	mov	r4, r8
   2504c:	40e2      	lsrs	r2, r4
   2504e:	001c      	movs	r4, r3
   25050:	465b      	mov	r3, fp
   25052:	0015      	movs	r5, r2
   25054:	2b00      	cmp	r3, #0
   25056:	db2c      	blt.n	250b2 <__udivmoddi4+0x166>
   25058:	0026      	movs	r6, r4
   2505a:	409e      	lsls	r6, r3
   2505c:	0033      	movs	r3, r6
   2505e:	0026      	movs	r6, r4
   25060:	4647      	mov	r7, r8
   25062:	40be      	lsls	r6, r7
   25064:	0032      	movs	r2, r6
   25066:	1a80      	subs	r0, r0, r2
   25068:	4199      	sbcs	r1, r3
   2506a:	9000      	str	r0, [sp, #0]
   2506c:	9101      	str	r1, [sp, #4]
   2506e:	e7ae      	b.n	24fce <__udivmoddi4+0x82>
   25070:	4642      	mov	r2, r8
   25072:	2320      	movs	r3, #32
   25074:	1a9b      	subs	r3, r3, r2
   25076:	4652      	mov	r2, sl
   25078:	40da      	lsrs	r2, r3
   2507a:	4641      	mov	r1, r8
   2507c:	0013      	movs	r3, r2
   2507e:	464a      	mov	r2, r9
   25080:	408a      	lsls	r2, r1
   25082:	0017      	movs	r7, r2
   25084:	431f      	orrs	r7, r3
   25086:	e782      	b.n	24f8e <__udivmoddi4+0x42>
   25088:	4642      	mov	r2, r8
   2508a:	2320      	movs	r3, #32
   2508c:	1a9b      	subs	r3, r3, r2
   2508e:	002a      	movs	r2, r5
   25090:	4646      	mov	r6, r8
   25092:	409a      	lsls	r2, r3
   25094:	0023      	movs	r3, r4
   25096:	40f3      	lsrs	r3, r6
   25098:	4313      	orrs	r3, r2
   2509a:	e7d5      	b.n	25048 <__udivmoddi4+0xfc>
   2509c:	4642      	mov	r2, r8
   2509e:	2320      	movs	r3, #32
   250a0:	2100      	movs	r1, #0
   250a2:	1a9b      	subs	r3, r3, r2
   250a4:	2200      	movs	r2, #0
   250a6:	9100      	str	r1, [sp, #0]
   250a8:	9201      	str	r2, [sp, #4]
   250aa:	2201      	movs	r2, #1
   250ac:	40da      	lsrs	r2, r3
   250ae:	9201      	str	r2, [sp, #4]
   250b0:	e782      	b.n	24fb8 <__udivmoddi4+0x6c>
   250b2:	4642      	mov	r2, r8
   250b4:	2320      	movs	r3, #32
   250b6:	0026      	movs	r6, r4
   250b8:	1a9b      	subs	r3, r3, r2
   250ba:	40de      	lsrs	r6, r3
   250bc:	002f      	movs	r7, r5
   250be:	46b4      	mov	ip, r6
   250c0:	4097      	lsls	r7, r2
   250c2:	4666      	mov	r6, ip
   250c4:	003b      	movs	r3, r7
   250c6:	4333      	orrs	r3, r6
   250c8:	e7c9      	b.n	2505e <__udivmoddi4+0x112>
   250ca:	46c0      	nop			; (mov r8, r8)

000250cc <__clzdi2>:
   250cc:	b510      	push	{r4, lr}
   250ce:	2900      	cmp	r1, #0
   250d0:	d103      	bne.n	250da <__clzdi2+0xe>
   250d2:	f7f9 f927 	bl	1e324 <__clzsi2>
   250d6:	3020      	adds	r0, #32
   250d8:	e002      	b.n	250e0 <__clzdi2+0x14>
   250da:	1c08      	adds	r0, r1, #0
   250dc:	f7f9 f922 	bl	1e324 <__clzsi2>
   250e0:	bd10      	pop	{r4, pc}
   250e2:	46c0      	nop			; (mov r8, r8)

000250e4 <_usb_device_irq_bits>:
   250e4:	0004 0008 0070 0080 0001 0100 0200 0000     ....p...........
   250f4:	1028 0000 1036 0000 1044 0000 1052 0000     (...6...D...R...
   25104:	1060 0000 6341 3163 4820 6769 3a68 2520     `...Acc1 High: %
   25114:	2e30 6634 0000 0000 6341 3163 4c20 776f     0.4f....Acc1 Low
   25124:	203a 3025 342e 0066 6341 3263 4820 6769     : %0.4f.Acc2 Hig
   25134:	3a68 2520 2e30 6634 0000 0000 6341 3263     h: %0.4f....Acc2
   25144:	4c20 776f 203a 3025 342e 0066 6f43 706d      Low: %0.4f.Comp
   25154:	2031 6948 6867 203a 3025 342e 0066 0000     1 High: %0.4f...
   25164:	6f43 706d 2031 6f4c 3a77 2520 2e30 6634     Comp1 Low: %0.4f
   25174:	0000 0000 6f43 706d 2032 6948 6867 203a     ....Comp2 High: 
   25184:	3025 342e 0066 0000 6f43 706d 2032 6f4c     %0.4f...Comp2 Lo
   25194:	3a77 2520 2e30 6634 0000 0000 6341 2063     w: %0.4f....Acc 
   251a4:	6564 746c 2061 7861 6425 203a 3025 332e     delta ax%d: %0.3
   251b4:	2566 0025 6d43 2070 6564 746c 2061 7861     f%%.Cmp delta ax
   251c4:	6425 203a 3025 332e 2566 0025 6e49 2063     %d: %0.3f%%.Inc 
   251d4:	6544 746c 3a61 2520 2e30 6633 6420 6765     Delta: %0.3f deg
   251e4:	0000 0000 7a41 206d 6544 746c 3a61 2520     ....Azm Delta: %
   251f4:	2e30 6633 6420 6765 0000 0000 616c 6573     0.3f deg....lase
   25204:	2072 6163 636c 6520 7272 726f 0000 0000     r calc error....
   25214:	616c 6573 2072 6577 6b61 7320 6769 616e     laser weak signa
   25224:	006c 0000 616c 6573 2072 7473 6f72 676e     l...laser strong
   25234:	7320 6769 616e 006c 616c 6573 2072 6f63      signal.laser co
   25244:	6d6d 7420 6d69 6f65 7475 0000 616c 6573     mm timeout..lase
   25254:	2072 7265 6f72 2c72 7520 6b6e 6f6e 6e77     r error, unknown
   25264:	0000 0000 616c 6573 2072 7277 6e6f 2067     ....laser wrong 
   25274:	656d 7373 6761 0065 6e75 6572 6f63 6e67     message.unrecogn
   25284:	7a69 6465 6520 7272 726f 0000 3c3a 0000     ized error..:<..
   25294:	3a4e 0000 3a8c 0000 3aca 0000 3b08 0000     N:...:...:...;..
   252a4:	3b46 0000 3b72 0000 3bce 0000 3be0 0000     F;..r;...;...;..
   252b4:	3bf2 0000 3c3a 0000 3c04 0000 3c16 0000     .;..:<...<...<..
   252c4:	3c28 0000 3b9e 0000 3bb6 0000 4c48 0000     (<...;...;..HL..
   252d4:	4c56 0000 4c64 0000 4c72 0000 4c80 0000     VL..dL..rL...L..
   252e4:	524c 0000 525a 0000 5268 0000 5276 0000     LR..ZR..hR..vR..
   252f4:	5284 0000 0908 0b0a 0d0c 0000 6b28 0000     .R..........(k..
   25304:	6b36 0000 6b44 0000 6b52 0000 6b60 0000     6k..Dk..Rk..`k..
   25314:	2000 4200 2400 4200 0800 4300 1b1b 001d     . .B.$.B...C....
   25324:	0002 0000 0100 0000 0002 0000 0200 0000     ................
   25334:	0003 0000 0004 0000 3032 3025 7832 3025     ........20%02x%0
   25344:	7832 3025 7832 255f 3230 2578 3230 2578     2x%02x_%02x%02x%
   25354:	3230 5f78 6163 696c 7262 7461 6f69 5f6e     02x_calibration_
   25364:	6572 6f70 7472 742e 7478 0000 6143 696c     report.txt..Cali
   25374:	7262 7461 6f69 206e 6552 6f70 7472 0a0d     bration Report..
   25384:	0a0d 6144 6574 6120 646e 5420 6d69 3a65     ..Date and Time:
   25394:	0a0d 5959 5959 4d2e 2e4d 4444 4840 3a48     ..YYYY.MM.DD@HH:
   253a4:	6d6d 733a 0d73 320a 2530 3230 2e78 3025     mm:ss..20%02x.%0
   253b4:	7832 252e 3230 4078 3025 7832 253a 3230     2x.%02x@%02x:%02
   253c4:	3a78 3025 7832 0a0d 0a0d 0000 6f53 7466     x:%02x......Soft
   253d4:	6177 6572 5620 7265 6973 6e6f 203a 3125     ware Version: %1
   253e4:	312e 0d66 0d0a 000a 654d 7361 7275 6d65     .1f.....Measurem
   253f4:	6e65 7374 203a 6425 0a0d 2d34 6f50 6e69     ents: %d..4-Poin
   25404:	2074 7247 756f 7370 203a 6425 0a0d 0a0d     t Groups: %d....
   25414:	0000 0000 6e41 6c67 2065 7245 6f72 2072     ....Angle Error 
   25424:	7453 6e61 6164 6472 4420 7665 6169 6974     Standard Deviati
   25434:	6e6f 0d3a 200a 4120 697a 756d 6874 203a     on:..  Azimuth: 
   25444:	3325 362e 2066 6564 7267 6565 0d73 200a     %3.6f degrees.. 
   25454:	4920 636e 696c 616e 6974 6e6f 203a 3325      Inclination: %3
   25464:	362e 2066 6564 7267 6565 0d73 000a 0000     .6f degrees.....
   25474:	614d 6e67 7469 6475 2065 7245 6f72 2072     Magnitude Error 
   25484:	7453 6e61 6164 6472 4420 7665 6169 6974     Standard Deviati
   25494:	6e6f 0d3a 200a 4120 6363 6c65 7265 6d6f     on:..  Accelerom
   254a4:	7465 7265 3120 203a 3325 362e 2066 2525     eter 1: %3.6f %%
   254b4:	0a0d 2020 6341 6563 656c 6f72 656d 6574     ..  Acceleromete
   254c4:	2072 3a32 2520 2e33 6636 2520 0d25 200a     r 2: %3.6f %%.. 
   254d4:	4320 6d6f 6170 7373 3120 203a 3325 362e      Compass 1: %3.6
   254e4:	2066 2525 0a0d 2020 6f43 706d 7361 2073     f %%..  Compass 
   254f4:	3a32 2520 2e33 6636 2520 0d25 000a 0000     2: %3.6f %%.....
   25504:	7841 7369 4420 7369 6170 6972 7974 0d3a     Axis Disparity:.
   25514:	200a 4120 6363 6c65 7265 6d6f 7465 7265     .  Accelerometer
   25524:	203a 2d58 3325 362e 2566 2025 2d59 3325     : X-%3.6f%% Y-%3
   25534:	362e 2566 2025 2d5a 3325 362e 2566 0d25     .6f%% Z-%3.6f%%.
   25544:	000a 0000 2020 6f43 706d 7361 3a73 5820     ....  Compass: X
   25554:	252d 2e33 6636 2525 5920 252d 2e33 6636     -%3.6f%% Y-%3.6f
   25564:	2525 5a20 252d 2e33 6636 2525 0a0d 0a0d     %% Z-%3.6f%%....
   25574:	0a0d 0000 6e49 6c63 6e69 6d6f 7465 7265     ....Inclinometer
   25584:	3120 4320 6c61 6269 6172 6974 6e6f 0d3a      1 Calibration:.
   25594:	000a 0000 6e49 6c63 6e69 6d6f 7465 7265     ....Inclinometer
   255a4:	3220 4320 6c61 6269 6172 6974 6e6f 0d3a      2 Calibration:.
   255b4:	000a 0000 6f43 706d 7361 2073 2031 6143     ....Compass 1 Ca
   255c4:	696c 7262 7461 6f69 3a6e 0a0d 0000 0000     libration:......
   255d4:	6f43 706d 7361 2073 2032 6143 696c 7262     Compass 2 Calibr
   255e4:	7461 6f69 3a6e 0a0d 0000 0000 2020 6147     ation:......  Ga
   255f4:	6e69 5820 203a 2e25 6636 0a0d 2020 6147     in X: %.6f..  Ga
   25604:	6e69 5920 203a 2e25 6636 0a0d 2020 6147     in Y: %.6f..  Ga
   25614:	6e69 3a5a 2520 362e 0d66 000a 2020 664f     inZ: %.6f...  Of
   25624:	7366 7465 5820 203a 2e25 6636 0a0d 2020     fset X: %.6f..  
   25634:	664f 7366 7465 5920 203a 2e25 6636 0a0d     Offset Y: %.6f..
   25644:	2020 664f 7366 7465 5a20 203a 2e25 6636       Offset Z: %.6f
   25654:	0a0d 0000 2020 7841 7369 4d20 7369 6c61     ....  Axis Misal
   25664:	6769 6d6e 6e65 2c74 5920 582d 203a 2e25     ignment, Y-X: %.
   25674:	6636 6420 6765 0a0d 2020 7841 7369 4d20     6f deg..  Axis M
   25684:	7369 6c61 6769 6d6e 6e65 2c74 5a20 582d     isalignment, Z-X
   25694:	203a 2e25 6636 6420 6765 0a0d 2020 7841     : %.6f deg..  Ax
   256a4:	7369 4d20 7369 6c61 6769 6d6e 6e65 2c74     is Misalignment,
   256b4:	5a20 592d 203a 2e25 6636 6420 6765 0a0d      Z-Y: %.6f deg..
   256c4:	0000 0000 2020 6150 6b63 6761 2065 694d     ....  Package Mi
   256d4:	6173 696c 6e67 656d 746e 4120 6f62 7475     salignment About
   256e4:	5820 203a 2e25 6633 6420 6765 0a0d 2020      X: %.3f deg..  
   256f4:	6150 6b63 6761 2065 694d 6173 696c 6e67     Package Misalign
   25704:	656d 746e 4120 6f62 7475 5920 203a 2e25     ment About Y: %.
   25714:	6633 6420 6765 0a0d 2020 6150 6b63 6761     3f deg..  Packag
   25724:	2065 694d 6173 696c 6e67 656d 746e 4120     e Misalignment A
   25734:	6f62 7475 5a20 203a 2e25 6633 6420 6765     bout Z: %.3f deg
   25744:	0a0d 0a0d 0000 0000 0a0d 6143 696c 7262     ..........Calibr
   25754:	7461 6f69 206e 654d 7361 7275 6d65 6e65     ation Measuremen
   25764:	7374 0d3a 000a 0000 2020 2020 2020 2020     ts:.....        
   25774:	2020 2020 2020 2020 6e55 6163 696c 7262             Uncalibr
   25784:	7461 6465 2020 2020 2020 2020 2020 2020     ated            
   25794:	2020 2020 2020 2020 4320 6c61 6269 6172              Calibra
   257a4:	6574 0d64 000a 0000 7247 756f 2c70 5020     ted.....Group, P
   257b4:	696f 746e 202c 2020 7a41 6d69 7475 2c68     oint,   Azimuth,
   257c4:	2020 6e49 6c63 6e69 7461 6f69 2c6e 5220       Inclination, R
   257d4:	6c6f 2c6c 2020 2020 4120 697a 756d 6874     oll,     Azimuth
   257e4:	202c 4920 636e 696c 616e 6974 6e6f 202c     ,  Inclination, 
   257f4:	6f52 6c6c 0a0d 0000 2d25 6432 202c 2020     Roll....%-2d,   
   25804:	2520 322d 2c64 2020 2020 2020 3025 2e33      %-2d,      %03.
   25814:	6632 202c 2020 3025 2e33 6632 202c 2020     2f,   %03.2f,   
   25824:	2020 2520 3330 322e 2c66 2020 2520 3330        %03.2f,   %03
   25834:	322e 2c66 2020 2520 3330 322e 2c66 2020     .2f,   %03.2f,  
   25844:	2020 2020 3025 2e33 6632 0a0d 0000 0000         %03.2f......
   25854:	3032 3025 7832 3025 7832 3025 7832 255f     20%02x%02x%02x_%
   25864:	3230 2578 3230 2578 3230 5f78 6163 696c     02x%02x%02x_cali
   25874:	7262 7461 6f69 5f6e 6172 5f77 6164 6174     bration_raw_data
   25884:	622e 6e69 0000 0000                         .bin....

0002588c <LfnOfs>:
   2588c:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................

0002589c <ExCvt>:
   2589c:	9a80 4145 418e 808f 4545 4945 4949 8f8e     ..EA.A..EEEIII..
   258ac:	9290 4f92 4f99 5555 9959 9b9a 9d9c 9f9e     ...O.OUUY.......
   258bc:	4941 554f a5a5 a7a6 a9a8 abaa adac afae     AIOU............
   258cc:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
   258dc:	c1c0 c3c2 c5c4 c7c6 c9c8 cbca cdcc cfce     ................
   258ec:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
   258fc:	e1e0 e3e2 e5e4 e7e6 e9e8 ebea edec efee     ................
   2590c:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................
   2591c:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
   2592c:	5d5b 0000 4146 0054 4146 3354 0032 0000     []..FAT.FAT32...

0002593c <uc437>:
   2593c:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
   2594c:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
   2595c:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
   2596c:	00ff 00d6 00dc 00a2 00a3 00a5 20a7 0192     ............. ..
   2597c:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
   2598c:	00bf 2310 00ac 00bd 00bc 00a1 00ab 00bb     ...#............
   2599c:	2591 2592 2593 2502 2524 2561 2562 2556     .%.%.%.%$%a%b%V%
   259ac:	2555 2563 2551 2557 255d 255c 255b 2510     U%c%Q%W%]%\%[%.%
   259bc:	2514 2534 252c 251c 2500 253c 255e 255f     .%4%,%.%.%<%^%_%
   259cc:	255a 2554 2569 2566 2560 2550 256c 2567     Z%T%i%f%`%P%l%g%
   259dc:	2568 2564 2565 2559 2558 2552 2553 256b     h%d%e%Y%X%R%S%k%
   259ec:	256a 2518 250c 2588 2584 258c 2590 2580     j%.%.%.%.%.%.%.%
   259fc:	03b1 00df 0393 03c0 03a3 03c3 00b5 03c4     ................
   25a0c:	03a6 0398 03a9 03b4 221e 03c6 03b5 2229     ........."....)"
   25a1c:	2261 00b1 2265 2264 2320 2321 00f7 2248     a"..e"d" #!#..H"
   25a2c:	00b0 2219 00b7 221a 207f 00b2 25a0 00a0     ..."...". ...%..
   25a3c:	205c 0001 207a 0001 20a0 0001 20b0 0001     \ ..z ... ... ..
   25a4c:	20c0 0001 20d0 0001 20e0 0001 20f0 0001     . ... ... ... ..
   25a5c:	2100 0001                                   .!..

00025a60 <cvt1.4394>:
   25a60:	0061 031a 00e0 0317 00f8 0307 00ff 0001     a...............
   25a70:	0178 0100 0130 0132 0106 0139 0110 014a     x...0.2...9...J.
   25a80:	012e 0179 0106 0180 004d 0243 0181 0182     ..y.....M.C.....
   25a90:	0182 0184 0184 0186 0187 0187 0189 018a     ................
   25aa0:	018b 018b 018d 018e 018f 0190 0191 0191     ................
   25ab0:	0193 0194 01f6 0196 0197 0198 0198 023d     ..............=.
   25ac0:	019b 019c 019d 0220 019f 01a0 01a0 01a2     ...... .........
   25ad0:	01a2 01a4 01a4 01a6 01a7 01a7 01a9 01aa     ................
   25ae0:	01ab 01ac 01ac 01ae 01af 01af 01b1 01b2     ................
   25af0:	01b3 01b3 01b5 01b5 01b7 01b8 01b8 01ba     ................
   25b00:	01bb 01bc 01bc 01be 01f7 01c0 01c1 01c2     ................
   25b10:	01c3 01c4 01c5 01c4 01c7 01c8 01c7 01ca     ................
   25b20:	01cb 01ca 01cd 0110 01dd 0001 018e 01de     ................
   25b30:	0112 01f3 0003 01f1 01f4 01f4 01f8 0128     ..............(.
   25b40:	0222 0112 023a 0009 2c65 023b 023b 023d     "...:...e,;.;.=.
   25b50:	2c66 023f 0240 0241 0241 0246 010a 0253     f,?.@.A.A.F...S.
   25b60:	0040 0181 0186 0255 0189 018a 0258 018f     @.....U.....X...
   25b70:	025a 0190 025c 025d 025e 025f 0193 0261     Z...\.].^._...a.
   25b80:	0262 0194 0264 0265 0266 0267 0197 0196     b...d.e.f.g.....
   25b90:	026a 2c62 026c 026d 026e 019c 0270 0271     j.b,l.m.n...p.q.
   25ba0:	019d 0273 0274 019f 0276 0277 0278 0279     ..s.t...v.w.x.y.
   25bb0:	027a 027b 027c 2c64 027e 027f 01a6 0281     z.{.|.d,~.......
   25bc0:	0282 01a9 0284 0285 0286 0287 01ae 0244     ..............D.
   25bd0:	01b1 01b2 0245 028d 028e 028f 0290 0291     ....E...........
   25be0:	01b7 037b 0003 03fd 03fe 03ff 03ac 0004     ..{.............
   25bf0:	0386 0388 0389 038a 03b1 0311 03c2 0002     ................
   25c00:	03a3 03a3 03c4 0308 03cc 0003 038c 038e     ................
   25c10:	038f 03d8 0118 03f2 000a 03f9 03f3 03f4     ................
   25c20:	03f5 03f6 03f7 03f7 03f9 03fa 03fa 0430     ..............0.
   25c30:	0320 0450 0710 0460 0122 048a 0136 04c1      .P...`."...6...
   25c40:	010e 04cf 0001 04c0 04d0 0144 0561 0426     ..........D.a.&.
   25c50:	0000 0000                                   ....

00025c54 <cvt2.4395>:
   25c54:	1d7d 0001 2c63 1e00 0196 1ea0 015a 1f00     }...c,......Z...
   25c64:	0608 1f10 0606 1f20 0608 1f30 0608 1f40     ...... ...0...@.
   25c74:	0606 1f51 0007 1f59 1f52 1f5b 1f54 1f5d     ..Q...Y.R.[.T.].
   25c84:	1f56 1f5f 1f60 0608 1f70 000e 1fba 1fbb     V._.`...p.......
   25c94:	1fc8 1fc9 1fca 1fcb 1fda 1fdb 1ff8 1ff9     ................
   25ca4:	1fea 1feb 1ffa 1ffb 1f80 0608 1f90 0608     ................
   25cb4:	1fa0 0608 1fb0 0004 1fb8 1fb9 1fb2 1fbc     ................
   25cc4:	1fcc 0001 1fc3 1fd0 0602 1fe0 0602 1fe5     ................
   25cd4:	0001 1fec 1ff3 0001 1ffc 214e 0001 2132     ..........N!..2!
   25ce4:	2170 0210 2184 0001 2183 24d0 051a 2c30     p!...!...!.$..0,
   25cf4:	042f 2c60 0102 2c67 0106 2c75 0102 2c80     /.`,..g,..u,...,
   25d04:	0164 2d00 0826 ff41 031a 0000 3768 0001     d..-&.A.....h7..
   25d14:	3776 0001 3784 0001 3792 0001 37a0 0001     v7...7...7...7..
   25d24:	3efc 0001 3f0a 0001 3f18 0001 3f26 0001     .>...?...?..&?..
   25d34:	3f34 0001 0000 4200 0400 4200 0800 4200     4?.....B...B...B
   25d44:	0c00 4200 1000 4200 0400 4300 5802 0001     ...B...B...C.X..
   25d54:	587c 0001 587c 0001 5822 0001 581c 0001     |X..|X.."X...X..
   25d64:	5828 0001 5808 0001 582e 0001 5862 0001     (X...X...X..bX..
   25d74:	59e0 0001 5a3e 0001 5a3e 0001 5a3a 0001     .Y..>Z..>Z..:Z..
   25d84:	59d2 0001 59f2 0001 59be 0001 5a00 0001     .Y...Y...Y...Z..
   25d94:	5a12 0001 5ab2 0001 5b18 0001 5b18 0001     .Z...Z...[...[..
   25da4:	5b14 0001 5a9a 0001 5aca 0001 5a82 0001     .[...Z...Z...Z..
   25db4:	5ae2 0001 5afc 0001 5c64 0001 5c72 0001     .Z...Z..d\..r\..
   25dc4:	5c80 0001 5c8e 0001 5c9c 0001               .\...\...\..

00025dd0 <Font5x7>:
   25dd0:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   25de0:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   25df0:	2255 0050 0305 0000 1c00 4122 0000 2241     U"P......."A..A"
   25e00:	001c 2a08 2a1c 0808 3e08 0808 5000 0030     ...*.*...>...P0.
   25e10:	0800 0808 0808 6000 0060 2000 0810 0204     .......``.. ....
   25e20:	513e 4549 003e 7f42 0040 6142 4951 2146     >QIE>.B.@.BaQIF!
   25e30:	4541 314b 1418 7f12 2710 4545 3945 4a3c     AEK1.....'EEE9<J
   25e40:	4949 0130 0971 0305 4936 4949 0636 4949     II0.q...6III6.II
   25e50:	1e29 3600 0036 0000 3656 0000 0800 2214     )..66...V6....."
   25e60:	1441 1414 1414 2241 0814 0200 5101 0609     A.....A".....Q..
   25e70:	4932 4179 7e3e 1111 7e11 497f 4949 3e36     2IyA>~...~.III6>
   25e80:	4141 2241 417f 2241 7f1c 4949 4149 097f     AAA".AA"..IIIA..
   25e90:	0109 3e01 4141 3251 087f 0808 007f 7f41     ...>AAQ2......A.
   25ea0:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   25eb0:	7f40 0402 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   25ec0:	097f 0909 3e06 5141 5e21 097f 2919 4646     .....>AQ!^...)FF
   25ed0:	4949 3149 0101 017f 3f01 4040 3f40 201f     III1.....?@@@?. 
   25ee0:	2040 7f1f 1820 7f20 1463 1408 0363 7804     @ .. . .c...c..x
   25ef0:	0304 5161 4549 0043 7f00 4141 0402 1008     ..aQIEC...AA....
   25f00:	4120 7f41 0000 0204 0201 4004 4040 4040      AA........@@@@@
   25f10:	0100 0402 2000 5454 7854 487f 4444 3838     ..... TTTx.HDD88
   25f20:	4444 2044 4438 4844 387f 5454 1854 7e08     DDD 8DDH.8TTT..~
   25f30:	0109 0802 5414 3c54 087f 0404 0078 7d44     .....TT<....x.D}
   25f40:	0040 4020 3d44 0000 107f 4428 4100 407f     @. @D=....(D.A.@
   25f50:	7c00 1804 7804 087c 0404 3878 4444 3844     .|...x|...x8DDD8
   25f60:	147c 1414 0808 1414 7c18 087c 0404 4808     |........||....H
   25f70:	5454 2054 3f04 4044 3c20 4040 7c20 201c     TTT .?D@ <@@ |. 
   25f80:	2040 3c1c 3040 3c40 2844 2810 0c44 5050     @ .<@0@<D(.(D.PP
   25f90:	3c50 6444 4c54 0044 3608 0041 0000 007f     P<DdTLD..6A.....
   25fa0:	0000 3641 0008 0808 1c2a 0808 2a1c 0808     ..A6....*....*..

00025fb0 <software_version>:
   25fb0:	0000 4080                                   ...@

00025fb4 <rad2deg>:
   25fb4:	2ee1 4265                                   ..eB

00025fb8 <deg2rad>:
   25fb8:	fa35 3c8e                                   5..<

00025fbc <mt2ft>:
   25fbc:	f948 4051 6843 7261 6567 2072 6544 7562     H.Q@Charger Debu
   25fcc:	3a67 0000 6441 3a64 3025 7832 3d20 2520     g:..Add:%02x = %
   25fdc:	0073 0000 0100 0706 0c0b 0000 6341 2063     s...........Acc 
   25fec:	2031 2020 2020 6341 2063 2032 4420 6e6f     1     Acc 2  Don
   25ffc:	0065 0000 3a58 2520 302b 332e 2066 2b25     e...X: %+0.3f %+
   2600c:	2e30 6633 0000 0000 3a59 2520 302b 332e     0.3f....Y: %+0.3
   2601c:	2066 2b25 2e30 6633 0000 0000 3a5a 2520     f %+0.3f....Z: %
   2602c:	302b 332e 2066 2b25 2e30 6633 0000 0000     +0.3f %+0.3f....
   2603c:	6f43 706d 3120 2020 2020 6f43 706d 3220     Comp 1    Comp 2
   2604c:	2020 0000 3a5a 2520 302b 332e 2066 2b25       ..Z: %+0.3f %+
   2605c:	2e30 6633 4520 6978 0074 0000 7250 636f     0.3f Exit...Proc
   2606c:	7365 6973 676e 4420 7461 2e61 2e2e 0000     essing Data.....
   2607c:	6143 696c 7262 7461 6f69 3a6e 0000 0000     Calibration:....
   2608c:	6147 6e69 6120 646e 4f20 6666 6573 2074     Gain and Offset 
   2609c:	6143 006c 6341 6563 656c 6f72 656d 6574     Cal.Acceleromete
   260ac:	2072 2031 2020 2020 0020 0000 6341 6563     r 1      ...Acce
   260bc:	656c 6f72 656d 6574 2072 2032 2020 2020     lerometer 2     
   260cc:	0020 0000 6f43 706d 7361 2073 2031 2020      ...Compass 1   
   260dc:	2020 2020 2020 2020 0020 0000 6f43 706d              ...Comp
   260ec:	7361 2073 2032 2020 2020 2020 2020 2020     ass 2           
   260fc:	0020 0000 7841 7369 4d20 7369 6c61 6769      ...Axis Misalig
   2610c:	6d6e 6e65 7374 003a 694d 6173 696c 6e67     nments:.Misalign
   2611c:	656d 746e 4320 6c61 202c 5a59 0000 0000     ment Cal, YZ....
   2612c:	7449 7265 7461 6f69 3a6e 2520 2064 666f     Iteration: %d of
   2613c:	3320 2020 2020 0000 694d 6173 696c 6e67      3    ..Misalign
   2614c:	656d 746e 4320 6c61 202c 0058 7645 6c61     ment Cal, X.Eval
   2615c:	6175 6974 676e 5220 7365 6c75 7374 2020     uating Results  
   2616c:	0020 0000 7257 7469 6e69 2067 6552 6f70      ...Writing Repo
   2617c:	7472 2020 2020 2020 0020 0000 6143 696c     rt       ...Cali
   2618c:	7262 7461 6f69 206e 6f43 706d 656c 6574     bration Complete
   2619c:	0021 0000 6143 696c 7262 7461 6f69 206e     !...Calibration 
   261ac:	6f4d 6564 0000 0000 7543 7272 6e65 2074     Mode....Current 
   261bc:	7247 756f 3a70 2520 0064 0000 7453 7461     Group: %d...Stat
   261cc:	7375 203a 6425 6f20 2066 0034 6f43 706d     us: %d of 4.Comp
   261dc:	656c 6574 4720 6f72 7075 3a73 2520 0064     lete Groups: %d.
   261ec:	6f44 656e 0000 0000 6241 726f 0074 0000     Done....Abort...
   261fc:	6f4c 706f 5420 7365 3a74 0000 6553 6d67     Loop Test:..Segm
   2620c:	6e65 7374 203a 6425 0000 0000 6f4c 706f     ents: %d....Loop
   2621c:	6c20 6e65 7467 3a68 2520 312e 0066 0000      length: %.1f...
   2622c:	7466 0000 006d 0000 6944 7073 616c 6563     ft..m...Displace
   2623c:	656d 746e 6620 6f72 206d 3150 003a 0000     ment from P1:...
   2624c:	6f48 6972 6f7a 746e 6c61 203a 2e25 6631     Horizontal: %.1f
   2625c:	0000 0000 6556 7472 6369 6c61 203a 2e25     ....Vertical: %.
   2626c:	6631 0000 7a41 6d69 7475 3a68 2520 312e     1f..Azimuth: %.1
   2627c:	0066 0000 6f4c 706f 5420 7365 2074 6552     f...Loop Test Re
   2628c:	6f70 7472 003a 0000 6f54 6174 206c 654c     port:...Total Le
   2629c:	676e 6874 203a 2e25 6631 2520 0073 0000     ngth: %.1f %s...
   262ac:	6f48 7a72 4520 7272 203a 2e25 6633 2520     Horz Err: %.3f %
   262bc:	0073 0000 6556 7472 4520 7272 203a 2e25     s...Vert Err: %.
   262cc:	6633 2520 0073 0000 2020 7a41 6d69 4520     3f %s...  Azim E
   262dc:	7272 203a 2e25 6631 6420 6765 0000 0000     rr: %.1f deg....
   262ec:	6f4c 706f 4520 7272 203a 2e25 6633 2525     Loop Err: %.3f%%
   262fc:	0020 0000 5420 7261 6567 2074 2e25 6631      ... Target %.1f
   2630c:	6620 6565 0074 0000 5420 7261 6567 2074      feet... Target 
   2631c:	2e25 6631 6d20 7465 7265 2e73 0000 0000     %.1f meters.....
   2632c:	254d 3a64 2520 2e32 6634 0020 664f 7366     M%d: %2.4f .Offs
   2633c:	7465 203a 6625 0000 6143 696c 7262 7461     et: %f..Calibrat
   2634c:	6f69 206e 2020 2020 4420 6e6f 0065 0000     ion      Done...
   2635c:	7a41 2f6d 6e49 2063 6143 696c 7262 7461     Azm/Inc Calibrat
   2636c:	6f69 3a6e 0000 0000 6154 656b 5520 696e     ion:....Take Uni
   2637c:	442d 7269 6365 6974 6e6f 6c61 4720 6f72     -Directional Gro
   2638c:	7075 2073 666f 3420 5320 6f68 7374 2020     ups of 4 Shots  
   2639c:	2020 6877 6c69 2065 6f72 6174 6974 676e       while rotating
   263ac:	2020 2020 2020 6920 736e 7274 6d75 6e65            instrumen
   263bc:	2e74 4f20 6c6e 2079 616c 7473 2034 6873     t. Only last4 sh
   263cc:	746f 2073 666f 6520 6361 2068 7267 756f     ots of each grou
   263dc:	7770 6c69 206c 6562 7320 7661 6465 0000     pwill be saved..
   263ec:	6944 7473 6e61 6563 4320 6c61 6269 6172     Distance Calibra
   263fc:	6974 6e6f 003a 0000 6c50 6361 2065 2061     tion:...Place a 
   2640c:	6174 6772 7465 6120 0074 0000 2020 2e25     target at...  %.
   2641c:	6631 6620 6565 2e74 0000 0000 2020 2e25     1f feet.....  %.
   2642c:	6631 6d20 7465 7265 2e73 0000 6154 656b     1f meters...Take
   2643c:	6d20 6e69 202e 2034 6873 746f 2073 6e69      min. 4 shots in
   2644c:	0000 0000 754d 746c 7069 656c 4f20 6972     ....Multiple Ori
   2645c:	6e65 6174 6974 6e6f 0073 0000 6e4f 796c     entations...Only
   2646c:	6c20 7361 2074 2034 7375 6465 002e 0000      last 4 used....
   2647c:	6154 656b 6120 7320 7265 6569 2073 666f     Take a series of
   2648c:	0000 0000 656d 7361 7275 6d65 6e65 7374     ....measurements
   2649c:	6520 646e 6e69 0067 6162 6b63 6120 2074      ending.back at 
   264ac:	6874 2065 6966 7372 0074 0000 6f70 6e69     the first...poin
   264bc:	2e74 2020 7250 7365 2073 4427 6e6f 2765     t.  Press 'Done'
   264cc:	0000 0000 6877 6e65 6320 6d6f 6c70 7465     ....when complet
   264dc:	2e65 0000 7250 7365 2073 6e61 2079 7562     e...Press any bu
   264ec:	7474 6e6f 2e2e 002e 6143 696c 7262 7461     tton....Calibrat
   264fc:	6f69 206e 6552 6f70 7472 003a 7a41 6d69     ion Report:.Azim
   2650c:	7475 2068 2026 6e49 6c63 6e69 7461 6f69     uth & Inclinatio
   2651c:	006e 0000 3032 3025 7832 252e 3230 2e78     n...20%02x.%02x.
   2652c:	3025 7832 2540 3230 3a78 3025 7832 253a     %02x@%02x:%02x:%
   2653c:	3230 0078 2d34 6f50 6e69 2074 7247 756f     02x.4-Point Grou
   2654c:	7370 203a 6425 0000 7a41 206d 7453 6564     ps: %d..Azm Stde
   2655c:	3a76 2520 332e 0066 6e49 2063 7453 6564     v: %.3f.Inc Stde
   2656c:	3a76 2520 332e 0066 6553 736e 726f 4420     v: %.3f.Sensor D
   2657c:	6c65 6174 5820 592c 5a2c 2525 0000 0000     elta X,Y,Z%%....
   2658c:	3a41 2e25 6633 252c 332e 2c66 2e25 6633     A:%.3f,%.3f,%.3f
   2659c:	0000 0000 3a43 2e25 6633 252c 332e 2c66     ....C:%.3f,%.3f,
   265ac:	2e25 6633 0000 0000 614d 6e67 7469 6475     %.3f....Magnitud
   265bc:	2065 7245 6f72 2072 2525 0000 3141 253a     e Error %%..A1:%
   265cc:	332e 2066 3241 253a 332e 0066 3143 253a     .3f A2:%.3f.C1:%
   265dc:	332e 2066 3243 253a 332e 0066 6944 7473     .3f C2:%.3f.Dist
   265ec:	6e61 6563 0000 0000 6152 676e 6665 6e69     ance....Rangefin
   265fc:	6564 2072 664f 7366 7465 003a 2020 2e25     der Offset:.  %.
   2660c:	6634 6d20 7465 7265 0073 0000 2020 2e25     4f meters...  %.
   2661c:	6634 6620 6565 0074 7845 7469 0000 0000     4f feet.Exit....
   2662c:	3032 3025 7832 3025 7832 3025 7832 645f     20%02x%02x%02x_d
   2663c:	7461 6661 6c69 2e65 7363 0076 6954 656d     atafile.csv.Time
   2664c:	532d 6174 706d 202c 6e49 6564 2c78 4420     -Stamp, Index, D
   2665c:	7369 6174 636e 2065 6d28 7465 7265 2973     istance (meters)
   2666c:	202c 7a41 6d69 7475 2068 6428 6765 6572     , Azimuth (degre
   2667c:	7365 2c29 4920 636e 696c 616e 6974 6e6f     es), Inclination
   2668c:	2820 6564 7267 6565 2973 202c 6554 706d      (degrees), Temp
   2669c:	7265 7461 7275 2065 4328 6c65 6973 7375     erature (Celsius
   266ac:	2c29 2020 7245 6f72 2072 6f4c 0d67 000a     ),  Error Log...
   266bc:	6954 656d 532d 6174 706d 202c 6e49 6564     Time-Stamp, Inde
   266cc:	2c78 4420 7369 6174 636e 2065 6628 6565     x, Distance (fee
   266dc:	2974 202c 7a41 6d69 7475 2068 6428 6765     t), Azimuth (deg
   266ec:	6572 7365 2c29 4920 636e 696c 616e 6974     rees), Inclinati
   266fc:	6e6f 2820 6564 7267 6565 2973 202c 6554     on (degrees), Te
   2670c:	706d 7265 7461 7275 2065 4628 6861 6572     mperature (Fahre
   2671c:	686e 6965 2974 202c 7245 6f72 2072 6f4c     nheit), Error Lo
   2672c:	0d67 000a 3032 3025 7832 252e 3230 2e78     g...20%02x.%02x.
   2673c:	3025 7832 2540 3230 3a78 3025 7832 253a     %02x@%02x:%02x:%
   2674c:	3230 2c78 0000 0000 2520 2c64 2520 332e     02x,.... %d, %.3
   2675c:	2c66 2520 332e 2c66 2520 332e 2c66 0000     f, %.3f, %.3f,..
   2676c:	2520 332e 2c66 0000 0a0d 0000 0000 0000      %.3f,..........
   2677c:	7245 6f72 2072 6e49 6f66 6d72 7461 6f69     Error Informatio
   2678c:	3a6e 0000 6142 6b63 0000 0000 6f4e 4120     n:..Back....No A
   2679c:	6464 7469 6f69 616e 206c 7245 6f72 7372     dditional Errors
   267ac:	0000 0000 6f74 5220 7065 726f 2074 6e69     ....to Report in
   267bc:	4c20 7361 0074 0000 6425 4d20 6165 7573      Last...%d Measu
   267cc:	6572 656d 746e 0073 654d 7361 7275 6d65     rements.Measurem
   267dc:	6e65 2074 6425 0000 654d 756e 003a 0000     ent %d..Menu:...
   267ec:	6e45 6574 0072 0000 704f 6974 6e6f 0073     Enter...Options.
   267fc:	7245 6f72 2072 6e49 6f66 0000 6143 696c     Error Info..Cali
   2680c:	7262 7461 6f69 006e 6553 2074 6c43 636f     bration.Set Cloc
   2681c:	006b 0000 6c42 6575 6f74 746f 0068 0000     k...Bluetooth...
   2682c:	6544 7562 2067 654d 756e 0000 003e 0000     Debug Menu..>...
   2683c:	6544 7562 2067 654d 756e 003a 6553 736e     Debug Menu:.Sens
   2684c:	726f 5220 7761 4420 7461 0061 6142 6b63     or Raw Data.Back
   2685c:	696c 6867 2074 614d 756e 6c61 0000 0000     light Manual....
   2686c:	6843 7261 6567 2072 6e49 6f66 0000 0000     Charger Info....
   2687c:	6944 7073 616c 2079 6552 6f70 7472 0000     Display Report..
   2688c:	6143 206c 6944 7473 6e61 6563 0000 0000     Cal Distance....
   2689c:	6143 206c 5a41 204d 2026 4e49 4c43 0000     Cal AZM & INCL..
   268ac:	6f4c 706f 5420 7365 0074 0000 6142 6b63     Loop Test...Back
   268bc:	696c 6867 2074 6544 7562 3a67 0000 0000     light Debug:....
   268cc:	6552 3a64 2020 2520 0064 0000 7247 6565     Red:   %d...Gree
   268dc:	3a6e 2520 0064 0000 6c42 6575 203a 2520     n: %d...Blue:  %
   268ec:	0064 0000 694c 6867 3a74 2520 0064 0000     d...Light: %d...
   268fc:	7055 0000 6f44 6e77 0000 0000 6944 7473     Up..Down....Dist
   2690c:	6e61 6563 203a 4620 6565 0074 6944 7473     ance:  Feet.Dist
   2691c:	6e61 6563 203a 4d20 7465 7265 0073 0000     ance:  Meters...
   2692c:	6554 706d 203a 4620 6861 6572 686e 6965     Temp:  Fahrenhei
   2693c:	0074 0000 6554 706d 203a 4320 6c65 6973     t...Temp:  Celsi
   2694c:	7375 0000 6853 746f 4420 6c65 7961 203a     us..Shot Delay: 
   2695c:	6425 7320 6365 0000 6843 7261 6567 4320     %d sec..Charge C
   2696c:	7275 3a72 2520 6d64 0041 0000 7245 2072     urr: %dmA...Err 
   2697c:	6553 736e 203a 3025 322e 2066 6564 0067     Sens: %0.2f deg.
   2698c:	4c42 4320 6c6f 726f 203a 7325 0000 0000     BL Color: %s....
   2699c:	4c42 4c20 7665 6c65 203a 6425 0000 0000     BL Level: %d....
   269ac:	704f 6974 6e6f 3a73 0000 0000 6441 756a     Options:....Adju
   269bc:	7473 0000 7541 6f74 7552 206e 6e4f 4f2f     st..AutoRun On/O
   269cc:	6666 0000 6552 6573 2074 6e4f 4f2f 6666     ff..Reset On/Off
   269dc:	0000 0000 544f 2041 6e4f 4f2f 6666 0000     ....OTA On/Off..
   269ec:	434d 5520 5241 2054 6e4f 4f2f 6666 0000     MC UART On/Off..
   269fc:	6c42 6575 6f74 746f 3a68 2020 2020 4120     Bluetooth:     A
   26a0c:	6a64 7375 0074 0000 6e4f 0000 6553 2074     djust...On..Set 
   26a1c:	6c43 636f 3a6b 0000 6f48 7275 4d20 6e69     Clock:..Hour Min
   26a2c:	2020 6553 0063 0000 3025 7832 2020 2520       Sec...%02x   %
   26a3c:	3230 2078 2020 3025 7832 0000 6144 6574     02x   %02x..Date
   26a4c:	4d20 6e6f 6874 5920 6165 0072 3025 7832      Month Year.%02x
   26a5c:	2020 2520 3230 2078 2020 3220 2530 3230        %02x    20%02
   26a6c:	0078 0000 002b 0000 002d 0000 654e 7478     x...+...-...Next
   26a7c:	0000 0000 6143 636e 6c65 0000 005e 0000     ....Cancel..^...
   26a8c:	030a 2400 108e 2000 0328 5900 108d 2000     ...$... (..Y... 
   26a9c:	0346 5900 108c 2000 060a 3101 1090 2000     F..Y... ...1... 
   26aac:	0628 1201 1091 2000 064c 9900 1092 2000     (...... L...... 
   26abc:	3a54 3425 312e 4666 0000 0000 3a54 3425     T:%4.1fF....T:%4
   26acc:	312e 4366 0000 0000 3025 7832 253a 3230     .1fC....%02x:%02
   26adc:	3a78 3025 7832 0000 3a42 3025 6432 2525     x:%02x..B:%02d%%
   26aec:	0000 0000 3a42 3025 6432 0000 4552 0046     ....B:%02d..REF.
   26afc:	4944 5453 0000 0000 5a41 004d 4e49 4c43     DIST....AZM.INCL
   26b0c:	0000 0000 6425 0000 2e25 6631 0000 0000     ....%d..%.1f....
   26b1c:	0045 0000 9e82 0001 9dde 0001 9dfa 0001     E...............
   26b2c:	9e16 0001 9e36 0001 9e5c 0001 9e66 0001     ....6...\...f...
   26b3c:	9e70 0001 b0de 0001 b0aa 0001 b0d6 0001     p...............
   26b4c:	b0ce 0001 b0ee 0001 b0e6 0001 6f70 0077     ............pow.
   26b5c:	7173 7472 0000 0000                         sqrt....

00026b64 <npio2_hw>:
   26b64:	21fb 3ff9 21fb 4009 d97c 4012 21fb 4019     .!.?.!.@|..@.!.@
   26b74:	6a7a 401f d97c 4022 fdbb 4025 21fb 4029     zj.@|."@..%@.!)@
   26b84:	463a 402c 6a7a 402f 475c 4031 d97c 4032     :F,@zj/@\G1@|.2@
   26b94:	6b9c 4034 fdbb 4035 8fdb 4037 21fb 4039     .k4@..5@..7@.!9@
   26ba4:	b41b 403a 463a 403c d85a 403d 6a7a 403f     ..:@:F<@Z.=@zj?@
   26bb4:	7e4c 4040 475c 4041 106c 4042 d97c 4042     L~@@\GA@l.B@|.B@
   26bc4:	a28c 4043 6b9c 4044 34ac 4045 fdbb 4045     ..C@.kD@.4E@..E@
   26bd4:	c6cb 4046 8fdb 4047 58eb 4048 21fb 4049     ..F@..G@.XH@.!I@

00026be4 <two_over_pi>:
   26be4:	f983 00a2 4e44 006e 29fc 0015 57d1 0027     ....DNn..)...W'.
   26bf4:	34dd 00f5 db62 00c0 993c 0095 9041 0043     .4..b...<...A.C.
   26c04:	5163 00fe debb 00ab 61b7 00c5 6e3a 0024     cQ.......a..:n$.
   26c14:	4dd2 0042 0649 00e0 ea09 002e 921c 00d1     .MB.I...........
   26c24:	1deb 00fe b129 001c 3ee8 00a7 35f5 0082     ....)....>...5..
   26c34:	bb44 002e e99c 0084 26b4 0070 7e41 005f     D........&p.A~_.
   26c44:	91d6 0039 8353 0039 f49c 0039 5f8b 0084     ..9.S.9...9.._..
   26c54:	f928 00bd 1ff8 003b ffde 0097 980f 0005     (.....;.........
   26c64:	2f11 00ef 5a0a 008b 1f6d 006d 7ecf 0036     ./...Z..m.m..~6.
   26c74:	cb09 0027 4f46 00b7 669e 003f ea2d 005f     ..'.FO...f?.-._.
   26c84:	27ba 0075 ebe5 00c7 7b3d 00f1 39f7 0007     .'u.....={...9..
   26c94:	5292 008a 6bfb 00ea b11f 005f 5d08 008d     .R...k...._..]..
   26ca4:	0330 0056 fc7b 0046 abf0 006b bc20 00cf     0.V.{.F...k. ...
   26cb4:	f436 009a a9e3 001d 615e 0091 1b08 00e6     6.......^a......
   26cc4:	9985 0065 14a0 005f 408d 0068 d880 00ff     ..e..._..@h.....
   26cd4:	7327 004d 0606 0031 56ca 0015 a8c9 0073     'sM...1..V....s.
   26ce4:	e27b 0060 8c6b 00c0 0000 0000               {.`.k.......

00026cf0 <PIo2>:
   26cf0:	0000 4000 21fb 3ff9 0000 0000 442d 3e74     ...@.!.?....-Dt>
   26d00:	0000 8000 4698 3cf8 0000 6000 cc51 3b78     .....F.<...`Q.x;
   26d10:	0000 8000 1b83 39f0 0000 4000 2520 387a     .......9...@ %z8
   26d20:	0000 8000 8222 36e3 0000 0000 f31d 3569     ...."..6......i5

00026d30 <init_jk>:
   26d30:	0002 0000 0003 0000 0004 0000 0006 0000     ................

00026d40 <atanhi>:
   26d40:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
   26d50:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?

00026d60 <atanlo>:
   26d60:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
   26d70:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<

00026d80 <TWO52>:
   26d80:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.
   26d90:	e910 0001 e8e0 0001 e8f2 0001 e834 0001     ............4...
   26da0:	e8f2 0001 e8d6 0001 e8f2 0001 e834 0001     ............4...
   26db0:	e8e0 0001 e8e0 0001 e8d6 0001 e834 0001     ............4...
   26dc0:	e83c 0001 e83c 0001 e83c 0001 e8f8 0001     <...<...<.......
   26dd0:	e8e0 0001 e8e0 0001 e8b4 0001 e998 0001     ................
   26de0:	e8b4 0001 e8d6 0001 e8b4 0001 e998 0001     ................
   26df0:	e8e0 0001 e8e0 0001 e8d6 0001 e998 0001     ................
   26e00:	e83c 0001 e83c 0001 e83c 0001 e9a2 0001     <...<...<.......
   26e10:	ec90 0001 ebe0 0001 ebe0 0001 ebde 0001     ................
   26e20:	ec82 0001 ec82 0001 ec78 0001 ebde 0001     ........x.......
   26e30:	ec82 0001 ec78 0001 ec82 0001 ebde 0001     ....x...........
   26e40:	ec88 0001 ec88 0001 ec88 0001 ed18 0001     ................
   26e50:	fa60 0001 fa42 0001 f9fc 0001 f91a 0001     `...B...........
   26e60:	f9fc 0001 fa34 0001 f9fc 0001 f91a 0001     ....4...........
   26e70:	fa42 0001 fa42 0001 fa34 0001 f91a 0001     B...B...4.......
   26e80:	f912 0001 f912 0001 f912 0001 fc78 0001     ............x...
   26e90:	02c0 0002 0180 0002 0180 0002 017c 0002     ............|...
   26ea0:	0298 0002 0298 0002 028a 0002 017c 0002     ............|...
   26eb0:	0298 0002 028a 0002 0298 0002 017c 0002     ............|...
   26ec0:	02a0 0002 02a0 0002 02a0 0002 04a4 0002     ................

00026ed0 <_global_impure_ptr>:
   26ed0:	02d0 2000 181c 0002 1890 0002 1890 0002     ... ............
   26ee0:	1800 0002 1890 0002 1890 0002 1890 0002     ................
   26ef0:	1890 0002 1890 0002 1890 0002 1808 0002     ................
   26f00:	12ea 0002 1890 0002 12a4 0002 12f4 0002     ................
   26f10:	1890 0002 1340 0002 152a 0002 152a 0002     ....@...*...*...
   26f20:	152a 0002 152a 0002 152a 0002 152a 0002     *...*...*...*...
   26f30:	152a 0002 152a 0002 152a 0002 1890 0002     *...*...*.......
   26f40:	1890 0002 1890 0002 1890 0002 1890 0002     ................
   26f50:	1890 0002 1890 0002 1890 0002 1890 0002     ................
   26f60:	1890 0002 1348 0002 1490 0002 1890 0002     ....H...........
   26f70:	1490 0002 1890 0002 1890 0002 1890 0002     ................
   26f80:	1890 0002 155a 0002 1890 0002 1890 0002     ....Z...........
   26f90:	1562 0002 1890 0002 1890 0002 1890 0002     b...............
   26fa0:	1890 0002 1890 0002 1604 0002 1890 0002     ................
   26fb0:	1890 0002 1636 0002 1890 0002 1890 0002     ....6...........
   26fc0:	1890 0002 1890 0002 1890 0002 1890 0002     ................
   26fd0:	1890 0002 1890 0002 1890 0002 1890 0002     ................
   26fe0:	1730 0002 1764 0002 1490 0002 1490 0002     0...d...........
   26ff0:	1490 0002 1776 0002 1764 0002 1890 0002     ....v...d.......
   27000:	1890 0002 177e 0002 1890 0002 1698 0002     ....~...........
   27010:	185e 0002 17d4 0002 16ce 0002 1890 0002     ^...............
   27020:	16d6 0002 1890 0002 182c 0002 1890 0002     ........,.......
   27030:	1890 0002 178e 0002 4e49 0046 6e69 0066     ........INF.inf.
   27040:	414e 004e 616e 006e 3130 3332 3534 3736     NAN.nan.01234567
   27050:	3938 4241 4443 4645 0000 0000 3130 3332     89ABCDEF....0123
   27060:	3534 3736 3938 6261 6463 6665 0000 0000     456789abcdef....
   27070:	6e28 6c75 296c 0000 0030 0000               (null)..0...

0002707c <blanks.7223>:
   2707c:	2020 2020 2020 2020 2020 2020 2020 2020                     

0002708c <zeroes.7224>:
   2708c:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
   2709c:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
   270ac:	0000 0000                                   ....

000270b0 <__mprec_bigtens>:
   270b0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   270c0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   270d0:	bf3c 7f73 4fdd 7515                         <.s..O.u

000270d8 <__mprec_tens>:
   270d8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   270e8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   270f8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   27108:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   27118:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   27128:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   27138:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   27148:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   27158:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   27168:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   27178:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   27188:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   27198:	9db4 79d9 7843 44ea                         ...yCx.D

000271a0 <p05.6055>:
   271a0:	0005 0000 0019 0000 007d 0000 0043 0000     ........}...C...
   271b0:	4f50 4953 0058 0000 002e 0000               POSIX.......

000271bc <_ctype_>:
   271bc:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   271cc:	2020 2020 2020 2020 2020 2020 2020 2020                     
   271dc:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   271ec:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   271fc:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   2720c:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   2721c:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   2722c:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   2723c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000272c0 <_init>:
   272c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   272c2:	46c0      	nop			; (mov r8, r8)
   272c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   272c6:	bc08      	pop	{r3}
   272c8:	469e      	mov	lr, r3
   272ca:	4770      	bx	lr

000272cc <__init_array_start>:
   272cc:	000227c9 	.word	0x000227c9

000272d0 <__frame_dummy_init_array_entry>:
   272d0:	000000dd                                ....

000272d4 <_fini>:
   272d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   272d6:	46c0      	nop			; (mov r8, r8)
   272d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   272da:	bc08      	pop	{r3}
   272dc:	469e      	mov	lr, r3
   272de:	4770      	bx	lr

000272e0 <__fini_array_start>:
   272e0:	000000b5 	.word	0x000000b5
